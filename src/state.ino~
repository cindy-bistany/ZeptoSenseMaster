
// Structure to store state of device through power down cycles
typedef struct
{
  int firstRunCheck;
  int numberOfReadings;
  int secondsBetweenReadings;
  float zeroOff;
  char expression[256];
  char email[256];
  char batEmail[256];
  char tamperEmail[256];
  float batThreshold;
  bool lastAlert;
  bool batLastAlert;
  bool tamperLastAlert;
 //bool buzzerActivated;
  /****************** New Blync Pins ******************/
  bool buzzerTamper; // Buzzer Tamper
  bool buzzerVapor; // Vapor Buzzer
  bool notifyVapor; // Vapor Notify
  bool notifyTamper; // Tamper Notify
  bool notifyBattery; // Battery Notify
  int ActivityThreshold;  // 62.5mg per increment-activity thresholds (0-255) 36,72,100 or 144

  int deviceZone; //0=America/New_York, 1=America/Chicago, 2=America/Phoenix, 3=America/Los_Angeles

  /****************** New Flags ******************/
  bool bSleepModeStandby; // If TRUE will do a SLEEP_NETWORK_STANDBY if FALSE will do a SLEEP_MODE_DEEP
  bool bInSleepMode; // If TRUE was in a sleep
  int OnTime;

} State;

void state_save(State st)
{
  // EEPROM.put(0, state);
  debug("Saving State\n");
  fram.put(0,st);
}

void state_load(State st)
{
  // EEPROM.get(0, state);
  debug("Loading State\n");
  fram.get(0,st);
}

void state_str(State st) {
  //print out the state struct on the debug serial port
}

