
c:/Code/ZeptoSensorBlynk-master/zeptologger/target/1.4.2/boron/zeptologger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013370  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0002750c  2**0
                  CONTENTS
  4 .data         00000150  2003d560  000e7390  0001d560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001140  2003d6b0  2003d6b0  0002d6b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e74e0  000e74e0  000274e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e7508  000e7508  00027508  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00152338  00000000  00000000  0002750c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001c9d6  00000000  00000000  00179844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f7b5  00000000  00000000  0019621a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003b70  00000000  00000000  001c59cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000069c0  00000000  00000000  001c953f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004bd97  00000000  00000000  001cfeff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004cd70  00000000  00000000  0021bc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113f99  00000000  00000000  00268a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00012260  00000000  00000000  0037c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00e f9c7 	bl	e23c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00e f9cc 	bl	e23da <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d560 	.word	0x2003d560
   d404c:	000e7390 	.word	0x000e7390
   d4050:	2003d6b0 	.word	0x2003d6b0
   d4054:	2003d6b0 	.word	0x2003d6b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 fc39 	bl	da8d4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e7388 	.word	0x000e7388
   d4084:	000e7324 	.word	0x000e7324

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f003 ba52 	b.w	d7530 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f003 fd75 	bl	d7b7c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f006 bbeb 	b.w	da870 <_post_loop>

000d409a <_Znwj>:
   d409a:	f005 bc4b 	b.w	d9934 <malloc>

000d409e <_ZdlPv>:
   d409e:	f005 bc51 	b.w	d9944 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f005 bc4f 	b.w	d9944 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00d fb23 	bl	e172c <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00d fb17 	bl	e1728 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00d fcc1 	bl	e1a90 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00d fde1 	bl	e1ce4 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00d ff2d 	bl	e1fb0 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00d ff0b 	bl	e1f9c <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00d fedf 	bl	e1f74 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00d fed1 	bl	e1f88 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00d fea5 	bl	e1f60 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00d fe8d 	bl	e1f60 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00d fe73 	bl	e1f60 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00d fe6a 	bl	e1f60 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00d fb95 	bl	e19c4 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00d fe55 	bl	e1f60 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00d fe4c 	bl	e1f60 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00d fb77 	bl	e19c4 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00d fe39 	bl	e1f60 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00d fe21 	bl	e1f60 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00d fe09 	bl	e1f60 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00d fb35 	bl	e19c4 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00d fdf9 	bl	e1f60 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00d fb25 	bl	e19c4 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f005 fac4 	bl	d9934 <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00e f812 	bl	e23da <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00d fffd 	bl	e23c4 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00d fdc4 	bl	e1f74 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00d fdda 	bl	e1fb0 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00d fe1d 	bl	e2040 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00d fabf 	bl	e19a4 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00d fd8a 	bl	e1f74 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00d fd82 	bl	e1f74 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00d fd7b 	bl	e1f74 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00d fd91 	bl	e1fb0 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00d fd89 	bl	e1fb0 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00d fdcc 	bl	e2040 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00d fdc7 	bl	e2040 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00d fa61 	bl	e19a4 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00d faaa 	bl	e1a90 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f005 b9f3 	b.w	d9944 <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f00f fd09 	bl	e3ff8 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f00e fea0 	bl	e336c <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f00e fe86 	bl	e336c <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000dcd71 	.word	0x000dcd71
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000dd071 	.word	0x000dd071
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e5718 	.word	0x000e5718

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000dd071 	.word	0x000dd071

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000dcd71 	.word	0x000dcd71
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}

000d52f2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d52f2:	4770      	bx	lr

000d52f4 <_Z8ADXL_ISRv>:

/********************* ISR *********************/
/* Look for Interrupts and Triggered Action    */
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d52f4:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_Z8ADXL_ISRv+0x8>)
   d52f6:	2201      	movs	r2, #1
   d52f8:	701a      	strb	r2, [r3, #0]
   d52fa:	4770      	bx	lr
   d52fc:	2003de6c 	.word	0x2003de6c

000d5300 <__tcf_0>:
String StateString = "Ready";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d5300:	b538      	push	{r3, r4, r5, lr}
   d5302:	4d06      	ldr	r5, [pc, #24]	; (d531c <__tcf_0+0x1c>)
   d5304:	2400      	movs	r4, #0
   d5306:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d530a:	4428      	add	r0, r5
   d530c:	3c10      	subs	r4, #16
   d530e:	f004 fc77 	bl	d9c00 <_ZN6StringD1Ev>
   d5312:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d5316:	d1f6      	bne.n	d5306 <__tcf_0+0x6>
   d5318:	bd38      	pop	{r3, r4, r5, pc}
   d531a:	bf00      	nop
   d531c:	2003d6c8 	.word	0x2003d6c8

000d5320 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5320:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5322:	4608      	mov	r0, r1
   d5324:	f00c ff3b 	bl	e219e <atoi>
   d5328:	4c08      	ldr	r4, [pc, #32]	; (d534c <_Z16gmtOffsetHandlerPKcS0_+0x2c>)
  gmtOffsetValid = true;
   d532a:	4b09      	ldr	r3, [pc, #36]	; (d5350 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d532c:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d532e:	2201      	movs	r2, #1
   d5330:	701a      	strb	r2, [r3, #0]
  DEBUG_PRINT("GMT seconds offset is: ");
   d5332:	f005 ffc5 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d5336:	4907      	ldr	r1, [pc, #28]	; (d5354 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
   d5338:	f004 fe18 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d533c:	f005 ffc0 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d5340:	6821      	ldr	r1, [r4, #0]
   d5342:	220a      	movs	r2, #10
}
   d5344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
  gmtOffsetValid = true;
  DEBUG_PRINT("GMT seconds offset is: ");
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d5348:	f004 be80 	b.w	da04c <_ZN5Print7printlnEii>
   d534c:	2003d5a4 	.word	0x2003d5a4
   d5350:	2003e174 	.word	0x2003e174
   d5354:	000e5983 	.word	0x000e5983

000d5358 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5358:	b510      	push	{r4, lr}
   d535a:	4b05      	ldr	r3, [pc, #20]	; (d5370 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d535c:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d535e:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5360:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5362:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5366:	f004 f9f7 	bl	d9758 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d536a:	4620      	mov	r0, r4
   d536c:	bd10      	pop	{r4, pc}
   d536e:	bf00      	nop
   d5370:	000e5924 	.word	0x000e5924

000d5374 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5374:	b510      	push	{r4, lr}
   d5376:	4604      	mov	r4, r0
    setActive(false);
}
   d5378:	f7ff ffee 	bl	d5358 <_ZN8particle9LEDStatusD1Ev>
   d537c:	4620      	mov	r0, r4
   d537e:	2120      	movs	r1, #32
   d5380:	f006 fd85 	bl	dbe8e <_ZdlPvj>
   d5384:	4620      	mov	r0, r4
   d5386:	bd10      	pop	{r4, pc}

000d5388 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5388:	2300      	movs	r3, #0
   d538a:	461a      	mov	r2, r3
   d538c:	4619      	mov	r1, r3
   d538e:	6840      	ldr	r0, [r0, #4]
   d5390:	f004 ba68 	b.w	d9864 <network_on>

000d5394 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5394:	2200      	movs	r2, #0
   d5396:	4611      	mov	r1, r2
   d5398:	6840      	ldr	r0, [r0, #4]
   d539a:	f004 ba5b 	b.w	d9854 <network_ready>
	...

000d53a0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d53a0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53a2:	f004 f831 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53a6:	4b03      	ldr	r3, [pc, #12]	; (d53b4 <_ZN10CloudClass7processEv+0x14>)
   d53a8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d53aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d53ae:	f004 ba89 	b.w	d98c4 <spark_process>
   d53b2:	bf00      	nop
   d53b4:	2003e5f4 	.word	0x2003e5f4

000d53b8 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d53b8:	6803      	ldr	r3, [r0, #0]
   d53ba:	b12b      	cbz	r3, d53c8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d53bc:	6842      	ldr	r2, [r0, #4]
   d53be:	4293      	cmp	r3, r2
   d53c0:	d202      	bcs.n	d53c8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d53c2:	4618      	mov	r0, r3
   d53c4:	f00c beeb 	b.w	e219e <atoi>
   d53c8:	2000      	movs	r0, #0
   d53ca:	4770      	bx	lr

000d53cc <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d53cc:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d53ce:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d53d0:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d53d2:	b145      	cbz	r5, d53e6 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d53d4:	6843      	ldr	r3, [r0, #4]
   d53d6:	429d      	cmp	r5, r3
   d53d8:	d205      	bcs.n	d53e6 <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d53da:	4628      	mov	r0, r5
   d53dc:	f00d ffbe 	bl	e335c <strlen>
   d53e0:	3001      	adds	r0, #1
   d53e2:	4405      	add	r5, r0
   d53e4:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d53e6:	4620      	mov	r0, r4
   d53e8:	bd38      	pop	{r3, r4, r5, pc}

000d53ea <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d53ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53ec:	4604      	mov	r4, r0
    if (str == NULL) {
   d53ee:	460f      	mov	r7, r1
   d53f0:	6846      	ldr	r6, [r0, #4]
   d53f2:	b921      	cbnz	r1, d53fe <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d53f4:	6803      	ldr	r3, [r0, #0]
   d53f6:	1c72      	adds	r2, r6, #1
   d53f8:	6042      	str	r2, [r0, #4]
   d53fa:	5599      	strb	r1, [r3, r6]
        return;
   d53fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d53fe:	4608      	mov	r0, r1
   d5400:	f00d ffac 	bl	e335c <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5404:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d5406:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5408:	19aa      	adds	r2, r5, r6
   d540a:	429a      	cmp	r2, r3
   d540c:	d808      	bhi.n	d5420 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d540e:	6820      	ldr	r0, [r4, #0]
   d5410:	462a      	mov	r2, r5
   d5412:	4639      	mov	r1, r7
   d5414:	4430      	add	r0, r6
   d5416:	f00c ffd5 	bl	e23c4 <memcpy>
    len += l;
   d541a:	6863      	ldr	r3, [r4, #4]
   d541c:	441d      	add	r5, r3
   d541e:	6065      	str	r5, [r4, #4]
   d5420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5424 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d5424:	b570      	push	{r4, r5, r6, lr}
   d5426:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d5428:	6840      	ldr	r0, [r0, #4]
   d542a:	68a6      	ldr	r6, [r4, #8]
   d542c:	6825      	ldr	r5, [r4, #0]
   d542e:	4a05      	ldr	r2, [pc, #20]	; (d5444 <_ZN10BlynkParam3addEi+0x20>)
   d5430:	460b      	mov	r3, r1
   d5432:	1a31      	subs	r1, r6, r0
   d5434:	4428      	add	r0, r5
   d5436:	f004 faa5 	bl	d9984 <snprintf>
   d543a:	6863      	ldr	r3, [r4, #4]
   d543c:	3001      	adds	r0, #1
   d543e:	4418      	add	r0, r3
   d5440:	6060      	str	r0, [r4, #4]
   d5442:	bd70      	pop	{r4, r5, r6, pc}
   d5444:	000e599b 	.word	0x000e599b

000d5448 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d5448:	b570      	push	{r4, r5, r6, lr}
   d544a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	68a6      	ldr	r6, [r4, #8]
   d5450:	6825      	ldr	r5, [r4, #0]
   d5452:	4a05      	ldr	r2, [pc, #20]	; (d5468 <_ZN10BlynkParam3addEl+0x20>)
   d5454:	460b      	mov	r3, r1
   d5456:	1a31      	subs	r1, r6, r0
   d5458:	4428      	add	r0, r5
   d545a:	f004 fa93 	bl	d9984 <snprintf>
   d545e:	6863      	ldr	r3, [r4, #4]
   d5460:	3001      	adds	r0, #1
   d5462:	4418      	add	r0, r3
   d5464:	6060      	str	r0, [r4, #4]
   d5466:	bd70      	pop	{r4, r5, r6, pc}
   d5468:	000e599e 	.word	0x000e599e

000d546c <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5470:	4692      	mov	sl, r2
   d5472:	b08f      	sub	sp, #60	; 0x3c
   d5474:	4699      	mov	r9, r3
   d5476:	4606      	mov	r6, r0
   d5478:	461d      	mov	r5, r3
   d547a:	4688      	mov	r8, r1
  byte error, address;
  bool result = true;
   d547c:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d547e:	ebc9 0305 	rsb	r3, r9, r5
   d5482:	459a      	cmp	sl, r3
   d5484:	d97b      	bls.n	d557e <_Z15checkI2CDevicesP6StringPhjPb+0x112>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d5486:	f818 7b01 	ldrb.w	r7, [r8], #1
    Wire.beginTransmission(address);
   d548a:	f006 fcbb 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d548e:	4639      	mov	r1, r7
   d5490:	f005 ffb2 	bl	db3f8 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d5494:	f006 fcb6 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d5498:	f005 ffb9 	bl	db40e <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d549c:	bb78      	cbnz	r0, d54fe <_Z15checkI2CDevicesP6StringPhjPb+0x92>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d549e:	f005 ff0f 	bl	db2c0 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d54a2:	4939      	ldr	r1, [pc, #228]	; (d5588 <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d54a4:	4683      	mov	fp, r0
   d54a6:	a802      	add	r0, sp, #8
   d54a8:	f004 fbf1 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d54ac:	4631      	mov	r1, r6
   d54ae:	a802      	add	r0, sp, #8
   d54b0:	f004 fc8c 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d54b4:	4935      	ldr	r1, [pc, #212]	; (d558c <_Z15checkI2CDevicesP6StringPhjPb+0x120>)
   d54b6:	f004 fc95 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d54ba:	4935      	ldr	r1, [pc, #212]	; (d5590 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d54bc:	f004 fc92 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d54c0:	2210      	movs	r2, #16
   d54c2:	9001      	str	r0, [sp, #4]
   d54c4:	4639      	mov	r1, r7
   d54c6:	a806      	add	r0, sp, #24
   d54c8:	f004 fc44 	bl	d9d54 <_ZN6StringC1Ehh>
   d54cc:	9b01      	ldr	r3, [sp, #4]
   d54ce:	a906      	add	r1, sp, #24
   d54d0:	4618      	mov	r0, r3
   d54d2:	f004 fc7b 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d54d6:	4601      	mov	r1, r0
   d54d8:	a80a      	add	r0, sp, #40	; 0x28
   d54da:	f004 fc17 	bl	d9d0c <_ZN6StringC1ERKS_>
   d54de:	990a      	ldr	r1, [sp, #40]	; 0x28
   d54e0:	4658      	mov	r0, fp
   d54e2:	f004 fd56 	bl	d9f92 <_ZN5Print7printlnEPKc>
   d54e6:	a80a      	add	r0, sp, #40	; 0x28
   d54e8:	f004 fb8a 	bl	d9c00 <_ZN6StringD1Ev>
   d54ec:	a806      	add	r0, sp, #24
   d54ee:	f004 fb87 	bl	d9c00 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d54f2:	a802      	add	r0, sp, #8
   d54f4:	f004 fb84 	bl	d9c00 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d54f8:	2301      	movs	r3, #1
   d54fa:	702b      	strb	r3, [r5, #0]
   d54fc:	e03c      	b.n	d5578 <_Z15checkI2CDevicesP6StringPhjPb+0x10c>
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (!error==0)
    {
      Wire.reset();
   d54fe:	f006 fc81 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d5502:	f005 ff8b 	bl	db41c <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d5506:	f006 fc7d 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d550a:	4639      	mov	r1, r7
   d550c:	f005 ff74 	bl	db3f8 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d5510:	f006 fc78 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d5514:	f005 ff7b 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d5518:	2800      	cmp	r0, #0
   d551a:	d0c0      	beq.n	d549e <_Z15checkI2CDevicesP6StringPhjPb+0x32>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d551c:	f005 fed0 	bl	db2c0 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5520:	4919      	ldr	r1, [pc, #100]	; (d5588 <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d5522:	4604      	mov	r4, r0
   d5524:	a802      	add	r0, sp, #8
   d5526:	f004 fbb2 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d552a:	4631      	mov	r1, r6
   d552c:	a802      	add	r0, sp, #8
   d552e:	f004 fc4d 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d5532:	4918      	ldr	r1, [pc, #96]	; (d5594 <_Z15checkI2CDevicesP6StringPhjPb+0x128>)
   d5534:	f004 fc56 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d5538:	4915      	ldr	r1, [pc, #84]	; (d5590 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d553a:	f004 fc53 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d553e:	2210      	movs	r2, #16
   d5540:	4683      	mov	fp, r0
   d5542:	4639      	mov	r1, r7
   d5544:	a806      	add	r0, sp, #24
   d5546:	f004 fc05 	bl	d9d54 <_ZN6StringC1Ehh>
   d554a:	a906      	add	r1, sp, #24
   d554c:	4658      	mov	r0, fp
   d554e:	f004 fc3d 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d5552:	4601      	mov	r1, r0
   d5554:	a80a      	add	r0, sp, #40	; 0x28
   d5556:	f004 fbd9 	bl	d9d0c <_ZN6StringC1ERKS_>
   d555a:	990a      	ldr	r1, [sp, #40]	; 0x28
   d555c:	4620      	mov	r0, r4
   d555e:	f004 fd18 	bl	d9f92 <_ZN5Print7printlnEPKc>
   d5562:	a80a      	add	r0, sp, #40	; 0x28
   d5564:	f004 fb4c 	bl	d9c00 <_ZN6StringD1Ev>
   d5568:	a806      	add	r0, sp, #24
   d556a:	f004 fb49 	bl	d9c00 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d556e:	2400      	movs	r4, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5570:	a802      	add	r0, sp, #8
   d5572:	f004 fb45 	bl	d9c00 <_ZN6StringD1Ev>
   d5576:	702c      	strb	r4, [r5, #0]
   d5578:	3610      	adds	r6, #16
   d557a:	3501      	adds	r5, #1
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d557c:	e77f      	b.n	d547e <_Z15checkI2CDevicesP6StringPhjPb+0x12>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d557e:	4620      	mov	r0, r4
   d5580:	b00f      	add	sp, #60	; 0x3c
   d5582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5586:	bf00      	nop
   d5588:	000e59a2 	.word	0x000e59a2
   d558c:	000e59ba 	.word	0x000e59ba
   d5590:	000e59aa 	.word	0x000e59aa
   d5594:	000e59b6 	.word	0x000e59b6

000d5598 <_Z9saveStatev>:
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5598:	f240 431c 	movw	r3, #1052	; 0x41c
   d559c:	4a02      	ldr	r2, [pc, #8]	; (d55a8 <_Z9saveStatev+0x10>)
   d559e:	4803      	ldr	r0, [pc, #12]	; (d55ac <_Z9saveStatev+0x14>)
   d55a0:	2100      	movs	r1, #0
   d55a2:	f003 b83b 	b.w	d861c <_ZN10MB85RC256V9writeDataEjPKhj>
   d55a6:	bf00      	nop
   d55a8:	2003da38 	.word	0x2003da38
   d55ac:	2003d6b8 	.word	0x2003d6b8

000d55b0 <_Z9loadStatev>:
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d55b0:	f240 431c 	movw	r3, #1052	; 0x41c
   d55b4:	4a02      	ldr	r2, [pc, #8]	; (d55c0 <_Z9loadStatev+0x10>)
   d55b6:	4803      	ldr	r0, [pc, #12]	; (d55c4 <_Z9loadStatev+0x14>)
   d55b8:	2100      	movs	r1, #0
   d55ba:	f002 bfe3 	b.w	d8584 <_ZN10MB85RC256V8readDataEjPhj>
   d55be:	bf00      	nop
   d55c0:	2003da38 	.word	0x2003da38
   d55c4:	2003d6b8 	.word	0x2003d6b8

000d55c8 <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d55c8:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d55ca:	4b05      	ldr	r3, [pc, #20]	; (d55e0 <BlynkWidgetWriteInternalPinADIS+0x18>)
   d55cc:	2200      	movs	r2, #0
   d55ce:	701a      	strb	r2, [r3, #0]
 DEBUG_PRINTLN("Disconnected");
   d55d0:	f005 fe76 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d55d4:	4903      	ldr	r1, [pc, #12]	; (d55e4 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d55d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 DEBUG_PRINTLN("Disconnected");
   d55da:	f004 bcda 	b.w	d9f92 <_ZN5Print7printlnEPKc>
   d55de:	bf00      	nop
   d55e0:	2003d9fd 	.word	0x2003d9fd
   d55e4:	000e5a02 	.word	0x000e5a02

000d55e8 <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d55e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d55ea:	6809      	ldr	r1, [r1, #0]
   d55ec:	4668      	mov	r0, sp
   d55ee:	f004 fb4e 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d55f2:	4668      	mov	r0, sp
   d55f4:	f004 fc49 	bl	d9e8a <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d55f8:	9900      	ldr	r1, [sp, #0]
   d55fa:	4805      	ldr	r0, [pc, #20]	; (d5610 <BlynkWidgetWrite16+0x28>)
   d55fc:	f00d f976 	bl	e28ec <strcpy>
    saveState();
   d5600:	f7ff ffca 	bl	d5598 <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d5604:	4668      	mov	r0, sp
   d5606:	f004 fafb 	bl	d9c00 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d560a:	b005      	add	sp, #20
   d560c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5610:	2003db48 	.word	0x2003db48

000d5614 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d5614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5616:	6809      	ldr	r1, [r1, #0]
   d5618:	4668      	mov	r0, sp
   d561a:	f004 fb38 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d561e:	4668      	mov	r0, sp
   d5620:	f004 fc33 	bl	d9e8a <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d5624:	9900      	ldr	r1, [sp, #0]
   d5626:	4805      	ldr	r0, [pc, #20]	; (d563c <BlynkWidgetWrite18+0x28>)
   d5628:	f00d f960 	bl	e28ec <strcpy>
    saveState();
   d562c:	f7ff ffb4 	bl	d5598 <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d5630:	4668      	mov	r0, sp
   d5632:	f004 fae5 	bl	d9c00 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d5636:	b005      	add	sp, #20
   d5638:	f85d fb04 	ldr.w	pc, [sp], #4
   d563c:	2003dc48 	.word	0x2003dc48

000d5640 <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d5640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5642:	6809      	ldr	r1, [r1, #0]
   d5644:	4668      	mov	r0, sp
   d5646:	f004 fb22 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d564a:	4668      	mov	r0, sp
   d564c:	f004 fc1d 	bl	d9e8a <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d5650:	9900      	ldr	r1, [sp, #0]
   d5652:	4805      	ldr	r0, [pc, #20]	; (d5668 <BlynkWidgetWrite26+0x28>)
   d5654:	f00d f94a 	bl	e28ec <strcpy>
    saveState();
   d5658:	f7ff ff9e 	bl	d5598 <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d565c:	4668      	mov	r0, sp
   d565e:	f004 facf 	bl	d9c00 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d5662:	b005      	add	sp, #20
   d5664:	f85d fb04 	ldr.w	pc, [sp], #4
   d5668:	2003dd48 	.word	0x2003dd48

000d566c <BlynkWidgetWrite25>:
  Blynk.virtualWrite(V14, 0);
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d566c:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d566e:	6808      	ldr	r0, [r1, #0]
   d5670:	f00c fd92 	bl	e2198 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d5674:	ec51 0b10 	vmov	r0, r1, d0
   d5678:	f00c fd02 	bl	e2080 <__aeabi_d2f>
   d567c:	4b02      	ldr	r3, [pc, #8]	; (d5688 <BlynkWidgetWrite25+0x1c>)
   d567e:	6018      	str	r0, [r3, #0]
  saveState();
}
   d5680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d5684:	f7ff bf88 	b.w	d5598 <_Z9saveStatev>
   d5688:	2003de48 	.word	0x2003de48

000d568c <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d568c:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d568e:	6808      	ldr	r0, [r1, #0]
   d5690:	f00c fd85 	bl	e219e <atoi>
   d5694:	4b03      	ldr	r3, [pc, #12]	; (d56a4 <BlynkWidgetWrite17+0x18>)
  if (param.asInt()==1)
   d5696:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d5698:	bf0c      	ite	eq
   d569a:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d569c:	2201      	movne	r2, #1
   d569e:	701a      	strb	r2, [r3, #0]
   d56a0:	bd08      	pop	{r3, pc}
   d56a2:	bf00      	nop
   d56a4:	2003d9fe 	.word	0x2003d9fe

000d56a8 <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d56a8:	b508      	push	{r3, lr}
   d56aa:	6808      	ldr	r0, [r1, #0]
   d56ac:	f00c fd77 	bl	e219e <atoi>
  state.deviceZone=param.asInt();
   d56b0:	4b03      	ldr	r3, [pc, #12]	; (d56c0 <BlynkWidgetWrite23+0x18>)
   d56b2:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  saveState();
}
   d56b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update time zone
BLYNK_WRITE(V23) 
{
  state.deviceZone=param.asInt();
  saveState();
   d56ba:	f7ff bf6d 	b.w	d5598 <_Z9saveStatev>
   d56be:	bf00      	nop
   d56c0:	2003da38 	.word	0x2003da38

000d56c4 <BlynkWidgetWrite24>:
}
// Update buzzerActivated flag
BLYNK_WRITE(V24) 
{
   d56c4:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d56c6:	4c14      	ldr	r4, [pc, #80]	; (d5718 <BlynkWidgetWrite24+0x54>)
  state.deviceZone=param.asInt();
  saveState();
}
// Update buzzerActivated flag
BLYNK_WRITE(V24) 
{
   d56c8:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d56ca:	8820      	ldrh	r0, [r4, #0]
   d56cc:	2101      	movs	r1, #1
   d56ce:	f006 fb0e 	bl	dbcee <digitalWrite>
    delay(5);
   d56d2:	2005      	movs	r0, #5
   d56d4:	f004 ff50 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d56d8:	2100      	movs	r1, #0
   d56da:	8820      	ldrh	r0, [r4, #0]
   d56dc:	f006 fb07 	bl	dbcee <digitalWrite>
    delay(200);  
   d56e0:	20c8      	movs	r0, #200	; 0xc8
   d56e2:	f004 ff49 	bl	da578 <delay>
    digitalWrite(buzzer, HIGH);
   d56e6:	2101      	movs	r1, #1
   d56e8:	8820      	ldrh	r0, [r4, #0]
   d56ea:	f006 fb00 	bl	dbcee <digitalWrite>
    delay(5);
   d56ee:	2005      	movs	r0, #5
   d56f0:	f004 ff42 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d56f4:	8820      	ldrh	r0, [r4, #0]
   d56f6:	2100      	movs	r1, #0
   d56f8:	f006 faf9 	bl	dbcee <digitalWrite>
   d56fc:	6828      	ldr	r0, [r5, #0]
   d56fe:	f00c fd4e 	bl	e219e <atoi>
    #endif
  state.buzzerActivated=param.asInt();
   d5702:	4b06      	ldr	r3, [pc, #24]	; (d571c <BlynkWidgetWrite24+0x58>)
   d5704:	3000      	adds	r0, #0
   d5706:	bf18      	it	ne
   d5708:	2001      	movne	r0, #1
   d570a:	f883 0417 	strb.w	r0, [r3, #1047]	; 0x417
  saveState();
}
   d570e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
  state.buzzerActivated=param.asInt();
  saveState();
   d5712:	f7ff bf41 	b.w	d5598 <_Z9saveStatev>
   d5716:	bf00      	nop
   d5718:	2003d574 	.word	0x2003d574
   d571c:	2003da38 	.word	0x2003da38

000d5720 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5720:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5722:	4b07      	ldr	r3, [pc, #28]	; (d5740 <_Z12alertChangedv+0x20>)
   d5724:	781a      	ldrb	r2, [r3, #0]
   d5726:	4b07      	ldr	r3, [pc, #28]	; (d5744 <_Z12alertChangedv+0x24>)
   d5728:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d572c:	4291      	cmp	r1, r2
   d572e:	d005      	beq.n	d573c <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5730:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d5734:	f7ff ff30 	bl	d5598 <_Z9saveStatev>
    return true;
   d5738:	2001      	movs	r0, #1
   d573a:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d573c:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d573e:	bd08      	pop	{r3, pc}
   d5740:	2003deb0 	.word	0x2003deb0
   d5744:	2003da38 	.word	0x2003da38

000d5748 <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d5748:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d574a:	4b07      	ldr	r3, [pc, #28]	; (d5768 <_Z15batAlertChangedv+0x20>)
   d574c:	781a      	ldrb	r2, [r3, #0]
   d574e:	4b07      	ldr	r3, [pc, #28]	; (d576c <_Z15batAlertChangedv+0x24>)
   d5750:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d5754:	4291      	cmp	r1, r2
   d5756:	d005      	beq.n	d5764 <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d5758:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d575c:	f7ff ff1c 	bl	d5598 <_Z9saveStatev>
    return true;
   d5760:	2001      	movs	r0, #1
   d5762:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5764:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d5766:	bd08      	pop	{r3, pc}
   d5768:	2003de6e 	.word	0x2003de6e
   d576c:	2003da38 	.word	0x2003da38

000d5770 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5770:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d5772:	4b07      	ldr	r3, [pc, #28]	; (d5790 <_Z18tamperAlertChangedv+0x20>)
   d5774:	781a      	ldrb	r2, [r3, #0]
   d5776:	4b07      	ldr	r3, [pc, #28]	; (d5794 <_Z18tamperAlertChangedv+0x24>)
   d5778:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d577c:	4291      	cmp	r1, r2
   d577e:	d005      	beq.n	d578c <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5780:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d5784:	f7ff ff08 	bl	d5598 <_Z9saveStatev>
    return true;
   d5788:	2001      	movs	r0, #1
   d578a:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d578c:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d578e:	bd08      	pop	{r3, pc}
   d5790:	2003de6d 	.word	0x2003de6d
   d5794:	2003da38 	.word	0x2003da38

000d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5798:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d579a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d579c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d579e:	b17c      	cbz	r4, d57c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d57a0:	6863      	ldr	r3, [r4, #4]
   d57a2:	3b01      	subs	r3, #1
   d57a4:	6063      	str	r3, [r4, #4]
   d57a6:	b95b      	cbnz	r3, d57c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d57a8:	6823      	ldr	r3, [r4, #0]
   d57aa:	4620      	mov	r0, r4
   d57ac:	689b      	ldr	r3, [r3, #8]
   d57ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57b0:	68a3      	ldr	r3, [r4, #8]
   d57b2:	3b01      	subs	r3, #1
   d57b4:	60a3      	str	r3, [r4, #8]
   d57b6:	b91b      	cbnz	r3, d57c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d57b8:	6823      	ldr	r3, [r4, #0]
   d57ba:	4620      	mov	r0, r4
   d57bc:	68db      	ldr	r3, [r3, #12]
   d57be:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d57c0:	4628      	mov	r0, r5
   d57c2:	bd38      	pop	{r3, r4, r5, pc}

000d57c4 <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d57c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  switch (state.deviceZone)
   d57c6:	4b16      	ldr	r3, [pc, #88]	; (d5820 <_Z23publishGMTOffsetRequestv+0x5c>)
   d57c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   d57cc:	4b15      	ldr	r3, [pc, #84]	; (d5824 <_Z23publishGMTOffsetRequestv+0x60>)
   d57ce:	3a01      	subs	r2, #1
   d57d0:	2a03      	cmp	r2, #3
   d57d2:	d815      	bhi.n	d5800 <_Z23publishGMTOffsetRequestv+0x3c>
   d57d4:	e8df f002 	tbb	[pc, r2]
   d57d8:	0e080214 	.word	0x0e080214
   d57dc:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d57de:	f88d 3000 	strb.w	r3, [sp]
   d57e2:	4a11      	ldr	r2, [pc, #68]	; (d5828 <_Z23publishGMTOffsetRequestv+0x64>)
   d57e4:	233c      	movs	r3, #60	; 0x3c
   d57e6:	e010      	b.n	d580a <_Z23publishGMTOffsetRequestv+0x46>
   d57e8:	781b      	ldrb	r3, [r3, #0]
   d57ea:	f88d 3000 	strb.w	r3, [sp]
   d57ee:	4a0f      	ldr	r2, [pc, #60]	; (d582c <_Z23publishGMTOffsetRequestv+0x68>)
   d57f0:	233c      	movs	r3, #60	; 0x3c
   d57f2:	e00a      	b.n	d580a <_Z23publishGMTOffsetRequestv+0x46>
   d57f4:	781b      	ldrb	r3, [r3, #0]
   d57f6:	f88d 3000 	strb.w	r3, [sp]
   d57fa:	4a0d      	ldr	r2, [pc, #52]	; (d5830 <_Z23publishGMTOffsetRequestv+0x6c>)
   d57fc:	233c      	movs	r3, #60	; 0x3c
   d57fe:	e004      	b.n	d580a <_Z23publishGMTOffsetRequestv+0x46>
   d5800:	781b      	ldrb	r3, [r3, #0]
   d5802:	4a0c      	ldr	r2, [pc, #48]	; (d5834 <_Z23publishGMTOffsetRequestv+0x70>)
   d5804:	f88d 3000 	strb.w	r3, [sp]
   d5808:	233c      	movs	r3, #60	; 0x3c
   d580a:	490b      	ldr	r1, [pc, #44]	; (d5838 <_Z23publishGMTOffsetRequestv+0x74>)
   d580c:	a802      	add	r0, sp, #8
   d580e:	f005 f9bd 	bl	dab8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5812:	a803      	add	r0, sp, #12
   d5814:	f7ff ffc0 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}
   d5818:	b005      	add	sp, #20
   d581a:	f85d fb04 	ldr.w	pc, [sp], #4
   d581e:	bf00      	nop
   d5820:	2003da38 	.word	0x2003da38
   d5824:	2003d6c5 	.word	0x2003d6c5
   d5828:	000e5a62 	.word	0x000e5a62
   d582c:	000e5a72 	.word	0x000e5a72
   d5830:	000e5a82 	.word	0x000e5a82
   d5834:	000e5a51 	.word	0x000e5a51
   d5838:	000e612d 	.word	0x000e612d

000d583c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d583c:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d583e:	4b04      	ldr	r3, [pc, #16]	; (d5850 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d5840:	4604      	mov	r4, r0
   d5842:	f840 3b18 	str.w	r3, [r0], #24
   d5846:	f7ff ffa7 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d584a:	4620      	mov	r0, r4
   d584c:	bd10      	pop	{r4, pc}
   d584e:	bf00      	nop
   d5850:	000e6948 	.word	0x000e6948

000d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d5854:	b508      	push	{r3, lr}
        state = CONNECTING;
   d5856:	2300      	movs	r3, #0
   d5858:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d585a:	6800      	ldr	r0, [r0, #0]
   d585c:	f006 f89c 	bl	db998 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d5860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d5864:	f003 bd28 	b.w	d92b8 <BlynkNoOpCbk>

000d5868 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d586c:	188e      	adds	r6, r1, r2
   d586e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5870:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5872:	4680      	mov	r8, r0
   d5874:	460d      	mov	r5, r1
   d5876:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5878:	9105      	str	r1, [sp, #20]
   d587a:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d587c:	f080 8119 	bcs.w	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d5880:	880b      	ldrh	r3, [r1, #0]
   d5882:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d5886:	a805      	add	r0, sp, #20
   d5888:	f7ff fda0 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d588c:	6803      	ldr	r3, [r0, #0]
   d588e:	429e      	cmp	r6, r3
   d5890:	f240 810f 	bls.w	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
   d5894:	9805      	ldr	r0, [sp, #20]
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d5896:	7803      	ldrb	r3, [r0, #0]
   d5898:	2b41      	cmp	r3, #65	; 0x41
   d589a:	d112      	bne.n	d58c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d589c:	3001      	adds	r0, #1
   d589e:	f00c fc7e 	bl	e219e <atoi>
   d58a2:	2805      	cmp	r0, #5
   d58a4:	dd01      	ble.n	d58aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d58a6:	24ff      	movs	r4, #255	; 0xff
   d58a8:	e00f      	b.n	d58ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d58aa:	9805      	ldr	r0, [sp, #20]
   d58ac:	3001      	adds	r0, #1
   d58ae:	f00c fc76 	bl	e219e <atoi>
   d58b2:	2800      	cmp	r0, #0
   d58b4:	dbf7      	blt.n	d58a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d58b6:	9805      	ldr	r0, [sp, #20]
   d58b8:	3001      	adds	r0, #1
   d58ba:	f00c fc70 	bl	e219e <atoi>
   d58be:	300e      	adds	r0, #14
   d58c0:	e002      	b.n	d58c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d58c2:	a805      	add	r0, sp, #20
   d58c4:	f7ff fd78 	bl	d53b8 <_ZNK10BlynkParam8iterator5asIntEv>
   d58c8:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d58ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d58ce:	f247 2276 	movw	r2, #29302	; 0x7276
   d58d2:	4293      	cmp	r3, r2
   d58d4:	f000 80b4 	beq.w	d5a40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
   d58d8:	d80d      	bhi.n	d58f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d58da:	f247 2261 	movw	r2, #29281	; 0x7261
   d58de:	4293      	cmp	r3, r2
   d58e0:	d07a      	beq.n	d59d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x170>
   d58e2:	f247 2264 	movw	r2, #29284	; 0x7264
   d58e6:	4293      	cmp	r3, r2
   d58e8:	d04f      	beq.n	d598a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x122>
   d58ea:	f646 5270 	movw	r2, #28016	; 0x6d70
   d58ee:	4293      	cmp	r3, r2
   d58f0:	f040 80d1 	bne.w	d5a96 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d58f4:	e034      	b.n	d5960 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf8>
   d58f6:	f247 7264 	movw	r2, #30564	; 0x7764
   d58fa:	4293      	cmp	r3, r2
   d58fc:	d057      	beq.n	d59ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x146>
   d58fe:	f247 7276 	movw	r2, #30582	; 0x7776
   d5902:	4293      	cmp	r3, r2
   d5904:	f000 80ad 	beq.w	d5a62 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5908:	f247 7261 	movw	r2, #30561	; 0x7761
   d590c:	4293      	cmp	r3, r2
   d590e:	f040 80c2 	bne.w	d5a96 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5912:	e082      	b.n	d5a1a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b2>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d5914:	7803      	ldrb	r3, [r0, #0]
   d5916:	2b41      	cmp	r3, #65	; 0x41
   d5918:	d132      	bne.n	d5980 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
   d591a:	3001      	adds	r0, #1
   d591c:	f00c fc3f 	bl	e219e <atoi>
   d5920:	2805      	cmp	r0, #5
   d5922:	dd21      	ble.n	d5968 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x100>
   d5924:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d5926:	a805      	add	r0, sp, #20
   d5928:	f7ff fd50 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d592c:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d592e:	4962      	ldr	r1, [pc, #392]	; (d5ab8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d5930:	4628      	mov	r0, r5
   d5932:	f00c ffd1 	bl	e28d8 <strcmp>
   d5936:	4601      	mov	r1, r0
   d5938:	2800      	cmp	r0, #0
   d593a:	f000 80b6 	beq.w	d5aaa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x242>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d593e:	495f      	ldr	r1, [pc, #380]	; (d5abc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d5940:	4628      	mov	r0, r5
   d5942:	f00c ffc9 	bl	e28d8 <strcmp>
   d5946:	2800      	cmp	r0, #0
   d5948:	f000 80ae 	beq.w	d5aa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x240>
   d594c:	495c      	ldr	r1, [pc, #368]	; (d5ac0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d594e:	4628      	mov	r0, r5
   d5950:	f00c ffc2 	bl	e28d8 <strcmp>
   d5954:	2800      	cmp	r0, #0
   d5956:	f000 80a7 	beq.w	d5aa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x240>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d595a:	a805      	add	r0, sp, #20
   d595c:	f7ff fd36 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d5960:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d5962:	4286      	cmp	r6, r0
   d5964:	d8d6      	bhi.n	d5914 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d5966:	e0a4      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
            pin = BLYNK_DECODE_PIN(it);
   d5968:	9805      	ldr	r0, [sp, #20]
   d596a:	3001      	adds	r0, #1
   d596c:	f00c fc17 	bl	e219e <atoi>
   d5970:	2800      	cmp	r0, #0
   d5972:	dbd7      	blt.n	d5924 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d5974:	9805      	ldr	r0, [sp, #20]
   d5976:	3001      	adds	r0, #1
   d5978:	f00c fc11 	bl	e219e <atoi>
   d597c:	300e      	adds	r0, #14
   d597e:	e002      	b.n	d5986 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x11e>
   d5980:	a805      	add	r0, sp, #20
   d5982:	f7ff fd19 	bl	d53b8 <_ZNK10BlynkParam8iterator5asIntEv>
   d5986:	b2c4      	uxtb	r4, r0
   d5988:	e7cd      	b.n	d5926 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d598a:	ab0a      	add	r3, sp, #40	; 0x28
   d598c:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d598e:	a807      	add	r0, sp, #28
   d5990:	2310      	movs	r3, #16
   d5992:	2500      	movs	r5, #0
   d5994:	494b      	ldr	r1, [pc, #300]	; (d5ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>)
   d5996:	9309      	str	r3, [sp, #36]	; 0x24
   d5998:	9508      	str	r5, [sp, #32]
   d599a:	f7ff fd26 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d599e:	a807      	add	r0, sp, #28
   d59a0:	4621      	mov	r1, r4
   d59a2:	f7ff fd3f 	bl	d5424 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d59a6:	4620      	mov	r0, r4
   d59a8:	f006 f9ba 	bl	dbd20 <digitalRead>
   d59ac:	e025      	b.n	d59fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x192>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d59ae:	a805      	add	r0, sp, #20
   d59b0:	f7ff fd0c 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d59b4:	6803      	ldr	r3, [r0, #0]
   d59b6:	429e      	cmp	r6, r3
   d59b8:	d97b      	bls.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d59ba:	b2a4      	uxth	r4, r4
   d59bc:	2101      	movs	r1, #1
   d59be:	4620      	mov	r0, r4
   d59c0:	f006 f984 	bl	dbccc <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d59c4:	a805      	add	r0, sp, #20
   d59c6:	f7ff fcf7 	bl	d53b8 <_ZNK10BlynkParam8iterator5asIntEv>
   d59ca:	1c01      	adds	r1, r0, #0
   d59cc:	bf18      	it	ne
   d59ce:	2101      	movne	r1, #1
   d59d0:	4620      	mov	r0, r4
   d59d2:	f006 f98c 	bl	dbcee <digitalWrite>
    } break;
   d59d6:	e06c      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
   d59d8:	ab0a      	add	r3, sp, #40	; 0x28
   d59da:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d59dc:	493a      	ldr	r1, [pc, #232]	; (d5ac8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x260>)
   d59de:	2310      	movs	r3, #16
   d59e0:	a807      	add	r0, sp, #28
   d59e2:	2500      	movs	r5, #0
   d59e4:	9309      	str	r3, [sp, #36]	; 0x24
   d59e6:	9508      	str	r5, [sp, #32]
   d59e8:	f7ff fcff 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d59ec:	a807      	add	r0, sp, #28
   d59ee:	4621      	mov	r1, r4
   d59f0:	f7ff fd18 	bl	d5424 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d59f4:	4620      	mov	r0, r4
   d59f6:	f006 f9a6 	bl	dbd46 <analogRead>
   d59fa:	4601      	mov	r1, r0
   d59fc:	a807      	add	r0, sp, #28
   d59fe:	f7ff fd23 	bl	d5448 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d5a02:	9b08      	ldr	r3, [sp, #32]
   d5a04:	9502      	str	r5, [sp, #8]
   d5a06:	3b01      	subs	r3, #1
   d5a08:	9300      	str	r3, [sp, #0]
   d5a0a:	9b07      	ldr	r3, [sp, #28]
   d5a0c:	9501      	str	r5, [sp, #4]
   d5a0e:	462a      	mov	r2, r5
   d5a10:	2114      	movs	r1, #20
   d5a12:	4640      	mov	r0, r8
   d5a14:	f000 fa50 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d5a18:	e04b      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5a1a:	a805      	add	r0, sp, #20
   d5a1c:	f7ff fcd6 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d5a20:	6803      	ldr	r3, [r0, #0]
   d5a22:	429e      	cmp	r6, r3
   d5a24:	d945      	bls.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5a26:	b2a4      	uxth	r4, r4
   d5a28:	2101      	movs	r1, #1
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	f006 f94e 	bl	dbccc <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d5a30:	a805      	add	r0, sp, #20
   d5a32:	f7ff fcc1 	bl	d53b8 <_ZNK10BlynkParam8iterator5asIntEv>
   d5a36:	4601      	mov	r1, r0
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f006 f99b 	bl	dbd74 <_Z11analogWritetm>
    } break;
   d5a3e:	e038      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5a40:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d5a42:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5a44:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d5a48:	f003 fc38 	bl	d92bc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d5a4c:	4603      	mov	r3, r0
            handler(req);
   d5a4e:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d5a50:	b123      	cbz	r3, d5a5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
   d5a52:	4a1e      	ldr	r2, [pc, #120]	; (d5acc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x264>)
   d5a54:	4293      	cmp	r3, r2
   d5a56:	d001      	beq.n	d5a5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
            handler(req);
   d5a58:	4798      	blx	r3
   d5a5a:	e02a      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        } else {
            BlynkWidgetReadDefault(req);
   d5a5c:	f003 fc2a 	bl	d92b4 <BlynkWidgetRead>
        }
    } break;
   d5a60:	e027      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    case BLYNK_HW_VW: {
        ++it;
   d5a62:	a805      	add	r0, sp, #20
   d5a64:	f7ff fcb2 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d5a68:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5a6a:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d5a6c:	1b5d      	subs	r5, r3, r5
   d5a6e:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5a70:	4620      	mov	r0, r4
   d5a72:	950b      	str	r5, [sp, #44]	; 0x2c
   d5a74:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d5a76:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5a7a:	f003 fc29 	bl	d92d0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d5a7e:	4603      	mov	r3, r0
            handler(req, param2);
   d5a80:	a90a      	add	r1, sp, #40	; 0x28
   d5a82:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d5a84:	b123      	cbz	r3, d5a90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>
   d5a86:	4a12      	ldr	r2, [pc, #72]	; (d5ad0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x268>)
   d5a88:	4293      	cmp	r3, r2
   d5a8a:	d001      	beq.n	d5a90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>
            handler(req, param2);
   d5a8c:	4798      	blx	r3
   d5a8e:	e010      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d5a90:	f003 fc11 	bl	d92b6 <BlynkWidgetWrite>
        }
    } break;
   d5a94:	e00d      	b.n	d5ab2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d5a96:	2300      	movs	r3, #0
   d5a98:	2102      	movs	r1, #2
   d5a9a:	9100      	str	r1, [sp, #0]
   d5a9c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d5aa0:	9302      	str	r3, [sp, #8]
   d5aa2:	9301      	str	r3, [sp, #4]
   d5aa4:	4619      	mov	r1, r3
   d5aa6:	e7b4      	b.n	d5a12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1aa>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5aa8:	2101      	movs	r1, #1
   d5aaa:	4620      	mov	r0, r4
   d5aac:	f006 f90e 	bl	dbccc <pinMode>
   d5ab0:	e753      	b.n	d595a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf2>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d5ab2:	b00e      	add	sp, #56	; 0x38
   d5ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ab8:	000e5f49 	.word	0x000e5f49
   d5abc:	000e5a96 	.word	0x000e5a96
   d5ac0:	000e5a9a 	.word	0x000e5a9a
   d5ac4:	000e5a9e 	.word	0x000e5a9e
   d5ac8:	000e5aa1 	.word	0x000e5aa1
   d5acc:	000d92b5 	.word	0x000d92b5
   d5ad0:	000d92b7 	.word	0x000d92b7

000d5ad4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d5ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ad8:	b08e      	sub	sp, #56	; 0x38
   d5ada:	af04      	add	r7, sp, #16
   d5adc:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d5ade:	2205      	movs	r2, #5
   d5ae0:	f107 010c 	add.w	r1, r7, #12
   d5ae4:	6800      	ldr	r0, [r0, #0]
   d5ae6:	f004 fbca 	bl	da27e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d5aea:	2800      	cmp	r0, #0
   d5aec:	f000 8119 	beq.w	d5d22 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d5af0:	2805      	cmp	r0, #5
   d5af2:	d001      	beq.n	d5af8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d5af4:	2000      	movs	r0, #0
   d5af6:	e119      	b.n	d5d2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5af8:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5afc:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5b00:	0a13      	lsrs	r3, r2, #8
   d5b02:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d5b06:	0a23      	lsrs	r3, r4, #8
   d5b08:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5b0c:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d5b0e:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5b10:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5b14:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d5b18:	2a00      	cmp	r2, #0
   d5b1a:	d0eb      	beq.n	d5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d5b1c:	7b3b      	ldrb	r3, [r7, #12]
   d5b1e:	b9f3      	cbnz	r3, d5b5e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d5b20:	f003 fbc4 	bl	d92ac <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5b24:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d5b26:	60e8      	str	r0, [r5, #12]
   d5b28:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5b2c:	b99b      	cbnz	r3, d5b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d5b2e:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d5b32:	2901      	cmp	r1, #1
   d5b34:	d10f      	bne.n	d5b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d5b36:	2a04      	cmp	r2, #4
   d5b38:	d001      	beq.n	d5b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d5b3a:	2ac8      	cmp	r2, #200	; 0xc8
   d5b3c:	d1da      	bne.n	d5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d5b3e:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d5b40:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d5b42:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d5b44:	4628      	mov	r0, r5
   d5b46:	f000 fa99 	bl	d607c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d5b4a:	f7ff fc29 	bl	d53a0 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d5b4e:	f000 fddb 	bl	d6708 <BlynkOnConnected>
                return true;
   d5b52:	4620      	mov	r0, r4
   d5b54:	e0ea      	b.n	d5d2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d5b56:	1f50      	subs	r0, r2, #5
   d5b58:	bf18      	it	ne
   d5b5a:	2001      	movne	r0, #1
   d5b5c:	e0e6      	b.n	d5d2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d5b5e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d5b62:	d903      	bls.n	d5b6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d5b64:	4628      	mov	r0, r5
   d5b66:	f7ff fe75 	bl	d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d5b6a:	e0da      	b.n	d5d22 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d5b6c:	f104 0308 	add.w	r3, r4, #8
   d5b70:	f023 0307 	bic.w	r3, r3, #7
   d5b74:	46e8      	mov	r8, sp
   d5b76:	ebad 0d03 	sub.w	sp, sp, r3
   d5b7a:	ae04      	add	r6, sp, #16
   d5b7c:	4622      	mov	r2, r4
   d5b7e:	4631      	mov	r1, r6
   d5b80:	6828      	ldr	r0, [r5, #0]
   d5b82:	f004 fb7c 	bl	da27e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d5b86:	4284      	cmp	r4, r0
   d5b88:	f04f 0400 	mov.w	r4, #0
   d5b8c:	f040 80c4 	bne.w	d5d18 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d5b90:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d5b94:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d5b96:	f003 fb89 	bl	d92ac <_Z11BlynkMillisv>

    switch (hdr.type)
   d5b9a:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d5b9c:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d5b9e:	2b11      	cmp	r3, #17
   d5ba0:	d072      	beq.n	d5c88 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d5ba2:	d806      	bhi.n	d5bb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d5ba4:	2b06      	cmp	r3, #6
   d5ba6:	d020      	beq.n	d5bea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d5ba8:	2b0f      	cmp	r3, #15
   d5baa:	d060      	beq.n	d5c6e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d5bac:	2b02      	cmp	r3, #2
   d5bae:	d009      	beq.n	d5bc4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d5bb0:	e0ae      	b.n	d5d10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d5bb2:	2b29      	cmp	r3, #41	; 0x29
   d5bb4:	d025      	beq.n	d5c02 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d5bb6:	2b37      	cmp	r3, #55	; 0x37
   d5bb8:	f000 80b0 	beq.w	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d5bbc:	2b14      	cmp	r3, #20
   d5bbe:	f040 80a7 	bne.w	d5d10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d5bc2:	e054      	b.n	d5c6e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d5bc4:	7f6b      	ldrb	r3, [r5, #29]
   d5bc6:	b943      	cbnz	r3, d5bda <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d5bc8:	2301      	movs	r3, #1
   d5bca:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d5bcc:	4628      	mov	r0, r5
   d5bce:	f000 fa55 	bl	d607c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d5bd2:	f7ff fbe5 	bl	d53a0 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d5bd6:	f000 fd97 	bl	d6708 <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d5bda:	2300      	movs	r3, #0
   d5bdc:	21c8      	movs	r1, #200	; 0xc8
   d5bde:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d5be2:	9302      	str	r3, [sp, #8]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	9100      	str	r1, [sp, #0]
   d5be8:	e006      	b.n	d5bf8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d5bea:	23c8      	movs	r3, #200	; 0xc8
   d5bec:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d5bf0:	9300      	str	r3, [sp, #0]
   d5bf2:	9402      	str	r4, [sp, #8]
   d5bf4:	9401      	str	r4, [sp, #4]
   d5bf6:	4623      	mov	r3, r4
   d5bf8:	4619      	mov	r1, r3
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	f000 f95c 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d5c00:	e08c      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d5c02:	68ab      	ldr	r3, [r5, #8]
   d5c04:	b91b      	cbnz	r3, d5c0e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d5c06:	2020      	movs	r0, #32
   d5c08:	f003 fe94 	bl	d9934 <malloc>
   d5c0c:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5c0e:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5c12:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5c14:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d5c16:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5c18:	623c      	str	r4, [r7, #32]
   d5c1a:	d301      	bcc.n	d5c20 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d5c1c:	2000      	movs	r0, #0
   d5c1e:	e07e      	b.n	d5d1e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d5c20:	2220      	movs	r2, #32
   d5c22:	4631      	mov	r1, r6
   d5c24:	68a8      	ldr	r0, [r5, #8]
   d5c26:	f00d fbb6 	bl	e3396 <strncpy>
        if (++it < param.end())
   d5c2a:	f107 001c 	add.w	r0, r7, #28
   d5c2e:	f7ff fbcd 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d5c32:	6803      	ldr	r3, [r0, #0]
   d5c34:	42a3      	cmp	r3, r4
   d5c36:	d207      	bcs.n	d5c48 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5c38:	69f8      	ldr	r0, [r7, #28]
   d5c3a:	b118      	cbz	r0, d5c44 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d5c3c:	6a3b      	ldr	r3, [r7, #32]
   d5c3e:	4298      	cmp	r0, r3
   d5c40:	d371      	bcc.n	d5d26 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5c42:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d5c44:	b284      	uxth	r4, r0
   d5c46:	e000      	b.n	d5c4a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d5c48:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5c4a:	6828      	ldr	r0, [r5, #0]
   d5c4c:	f005 fea4 	bl	db998 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d5c50:	682b      	ldr	r3, [r5, #0]
   d5c52:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d5c54:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d5c56:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d5c58:	2300      	movs	r3, #0
   d5c5a:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d5c5c:	f003 fb26 	bl	d92ac <_Z11BlynkMillisv>
   d5c60:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d5c64:	3808      	subs	r0, #8
   d5c66:	6128      	str	r0, [r5, #16]
   d5c68:	60e8      	str	r0, [r5, #12]
   d5c6a:	6168      	str	r0, [r5, #20]
   d5c6c:	e056      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d5c6e:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d5c70:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d5c74:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d5c78:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d5c7a:	4631      	mov	r1, r6
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	f7ff fdf3 	bl	d5868 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d5c82:	2300      	movs	r3, #0
   d5c84:	836b      	strh	r3, [r5, #26]
   d5c86:	e049      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5c88:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d5c8c:	713c      	strb	r4, [r7, #4]
   d5c8e:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d5c90:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5c92:	617e      	str	r6, [r7, #20]
   d5c94:	61bb      	str	r3, [r7, #24]
   d5c96:	d241      	bcs.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d5c98:	6830      	ldr	r0, [r6, #0]
   d5c9a:	60b8      	str	r0, [r7, #8]

        ++it;
   d5c9c:	f107 0014 	add.w	r0, r7, #20
   d5ca0:	f7ff fb94 	bl	d53cc <_ZN10BlynkParam8iteratorppEv>
   d5ca4:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d5ca6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5caa:	61fa      	str	r2, [r7, #28]
   d5cac:	1b96      	subs	r6, r2, r6
   d5cae:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d5cb0:	4a20      	ldr	r2, [pc, #128]	; (d5d34 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d5cb2:	68bb      	ldr	r3, [r7, #8]
   d5cb4:	623e      	str	r6, [r7, #32]
   d5cb6:	4293      	cmp	r3, r2
   d5cb8:	627e      	str	r6, [r7, #36]	; 0x24
   d5cba:	d01d      	beq.n	d5cf8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d5cbc:	d80b      	bhi.n	d5cd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d5cbe:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d5cc2:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d5cc6:	4293      	cmp	r3, r2
   d5cc8:	d128      	bne.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d5cca:	f107 011c 	add.w	r1, r7, #28
   d5cce:	1d38      	adds	r0, r7, #4
   d5cd0:	f003 faf1 	bl	d92b6 <BlynkWidgetWrite>
   d5cd4:	e022      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d5cd6:	4a18      	ldr	r2, [pc, #96]	; (d5d38 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d5cd8:	4293      	cmp	r3, r2
   d5cda:	d013      	beq.n	d5d04 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d5cdc:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d5ce0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d5ce4:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d5ce8:	4293      	cmp	r3, r2
   d5cea:	d117      	bne.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d5cec:	f107 011c 	add.w	r1, r7, #28
   d5cf0:	1d38      	adds	r0, r7, #4
   d5cf2:	f7ff fc69 	bl	d55c8 <BlynkWidgetWriteInternalPinADIS>
   d5cf6:	e011      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d5cf8:	f107 011c 	add.w	r1, r7, #28
   d5cfc:	1d38      	adds	r0, r7, #4
   d5cfe:	f003 fada 	bl	d92b6 <BlynkWidgetWrite>
   d5d02:	e00b      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d5d04:	f107 011c 	add.w	r1, r7, #28
   d5d08:	1d38      	adds	r0, r7, #4
   d5d0a:	f000 fb6b 	bl	d63e4 <BlynkWidgetWriteInternalPinACON>
   d5d0e:	e005      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d5d10:	4628      	mov	r0, r5
   d5d12:	f7ff fd9f 	bl	d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d5d16:	e001      	b.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d5d18:	4620      	mov	r0, r4
   d5d1a:	e000      	b.n	d5d1e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d5d1c:	2001      	movs	r0, #1
   d5d1e:	46c5      	mov	sp, r8
   d5d20:	e004      	b.n	d5d2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d5d22:	2001      	movs	r0, #1
   d5d24:	e002      	b.n	d5d2c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5d26:	f00c fa3e 	bl	e21a6 <atol>
   d5d2a:	e78b      	b.n	d5c44 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d5d2c:	3728      	adds	r7, #40	; 0x28
   d5d2e:	46bd      	mov	sp, r7
   d5d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d34:	00637472 	.word	0x00637472
   d5d38:	6e6f6361 	.word	0x6e6f6361

000d5d3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d5d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d40:	4604      	mov	r4, r0
   d5d42:	b08a      	sub	sp, #40	; 0x28
   d5d44:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d5d46:	f7ff fb2b 	bl	d53a0 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d5d4a:	7f63      	ldrb	r3, [r4, #29]
   d5d4c:	2b02      	cmp	r3, #2
   d5d4e:	f000 809d 	beq.w	d5e8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d5d52:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d5d54:	8b62      	ldrh	r2, [r4, #26]
   d5d56:	3301      	adds	r3, #1
   d5d58:	b2db      	uxtb	r3, r3
   d5d5a:	7723      	strb	r3, [r4, #28]
   d5d5c:	2a00      	cmp	r2, #0
   d5d5e:	d141      	bne.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5d60:	2b02      	cmp	r3, #2
   d5d62:	d83f      	bhi.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5d64:	6820      	ldr	r0, [r4, #0]
   d5d66:	f005 fc44 	bl	db5f2 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d5d6a:	b140      	cbz	r0, d5d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d5d6c:	2d00      	cmp	r5, #0
   d5d6e:	f040 808f 	bne.w	d5e90 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d5d72:	6820      	ldr	r0, [r4, #0]
   d5d74:	f005 fe28 	bl	db9c8 <_ZN9TCPClient9availableEv>
   d5d78:	2800      	cmp	r0, #0
   d5d7a:	f300 8089 	bgt.w	d5e90 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d5d7e:	f003 fa95 	bl	d92ac <_Z11BlynkMillisv>
   d5d82:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5d84:	6820      	ldr	r0, [r4, #0]
   d5d86:	f005 fc34 	bl	db5f2 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d5d8a:	7f67      	ldrb	r7, [r4, #29]
   d5d8c:	2f01      	cmp	r7, #1
   d5d8e:	4605      	mov	r5, r0
   d5d90:	d12a      	bne.n	d5de8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d5d92:	b920      	cbnz	r0, d5d9e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d5d94:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff fd5c 	bl	d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d5d9c:	e072      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d5d9e:	68e3      	ldr	r3, [r4, #12]
   d5da0:	f644 2238 	movw	r2, #19000	; 0x4a38
   d5da4:	1af3      	subs	r3, r6, r3
   d5da6:	4293      	cmp	r3, r2
   d5da8:	d904      	bls.n	d5db4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d5daa:	4620      	mov	r0, r4
   d5dac:	f7ff fd52 	bl	d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d5db0:	2500      	movs	r5, #0
   d5db2:	e067      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d5db4:	f242 7210 	movw	r2, #10000	; 0x2710
   d5db8:	4293      	cmp	r3, r2
   d5dba:	d803      	bhi.n	d5dc4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d5dbc:	6923      	ldr	r3, [r4, #16]
   d5dbe:	1af3      	subs	r3, r6, r3
   d5dc0:	4293      	cmp	r3, r2
   d5dc2:	d90f      	bls.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5dc4:	6963      	ldr	r3, [r4, #20]
   d5dc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d5dca:	1af3      	subs	r3, r6, r3
   d5dcc:	4293      	cmp	r3, r2
   d5dce:	d909      	bls.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	9302      	str	r3, [sp, #8]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	9300      	str	r3, [sp, #0]
   d5dd8:	461a      	mov	r2, r3
   d5dda:	2106      	movs	r1, #6
   d5ddc:	4620      	mov	r0, r4
   d5dde:	f000 f86b 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d5de2:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d5de4:	2501      	movs	r5, #1
   d5de6:	e04d      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d5de8:	2f00      	cmp	r7, #0
   d5dea:	d1fb      	bne.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5dec:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d5dee:	b150      	cbz	r0, d5e06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d5df0:	1ab6      	subs	r6, r6, r2
   d5df2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d5df6:	429e      	cmp	r6, r3
   d5df8:	d9f4      	bls.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5dfa:	6820      	ldr	r0, [r4, #0]
   d5dfc:	f005 fdcc 	bl	db998 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d5e00:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d5e02:	7767      	strb	r7, [r4, #29]
            return false;
   d5e04:	e03e      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d5e06:	1ab2      	subs	r2, r6, r2
   d5e08:	f241 3388 	movw	r3, #5000	; 0x1388
   d5e0c:	429a      	cmp	r2, r3
   d5e0e:	d9e9      	bls.n	d5de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5e10:	6820      	ldr	r0, [r4, #0]
   d5e12:	f005 fdc1 	bl	db998 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d5e16:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d5e1a:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d5e1e:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d5e22:	f1bc 0f00 	cmp.w	ip, #0
   d5e26:	d006      	beq.n	d5e36 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d5e28:	462b      	mov	r3, r5
   d5e2a:	4642      	mov	r2, r8
   d5e2c:	4661      	mov	r1, ip
   d5e2e:	4670      	mov	r0, lr
   d5e30:	f005 fcb6 	bl	db7a0 <_ZN9TCPClient7connectEPKctm>
   d5e34:	e00e      	b.n	d5e54 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e36:	4b1f      	ldr	r3, [pc, #124]	; (d5eb4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d5e38:	9304      	str	r3, [sp, #16]
   d5e3a:	f10e 0720 	add.w	r7, lr, #32
   d5e3e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d5e40:	ad05      	add	r5, sp, #20
   d5e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5e44:	683b      	ldr	r3, [r7, #0]
   d5e46:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d5e48:	4642      	mov	r2, r8
   d5e4a:	4663      	mov	r3, ip
   d5e4c:	a904      	add	r1, sp, #16
   d5e4e:	4670      	mov	r0, lr
   d5e50:	f005 fd28 	bl	db8a4 <_ZN9TCPClient7connectE9IPAddresstm>
   d5e54:	1e43      	subs	r3, r0, #1
   d5e56:	425d      	negs	r5, r3
   d5e58:	415d      	adcs	r5, r3
   d5e5a:	b90d      	cbnz	r5, d5e60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d5e5c:	6166      	str	r6, [r4, #20]
                return false;
   d5e5e:	e011      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5e60:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d5e62:	2601      	movs	r6, #1
   d5e64:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5e66:	4638      	mov	r0, r7
   d5e68:	f00d fa78 	bl	e335c <strlen>
   d5e6c:	2300      	movs	r3, #0
   d5e6e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5e72:	9302      	str	r3, [sp, #8]
   d5e74:	4632      	mov	r2, r6
   d5e76:	463b      	mov	r3, r7
   d5e78:	2102      	movs	r1, #2
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f000 f81c 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d5e80:	6923      	ldr	r3, [r4, #16]
   d5e82:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d5e84:	7f23      	ldrb	r3, [r4, #28]
   d5e86:	3b01      	subs	r3, #1
   d5e88:	7723      	strb	r3, [r4, #28]
   d5e8a:	e00e      	b.n	d5eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d5e8c:	2500      	movs	r5, #0
   d5e8e:	e00c      	b.n	d5eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d5e90:	4620      	mov	r0, r4
   d5e92:	f7ff fe1f 	bl	d5ad4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d5e96:	4605      	mov	r5, r0
   d5e98:	2800      	cmp	r0, #0
   d5e9a:	f47f af6a 	bne.w	d5d72 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5e9e:	6820      	ldr	r0, [r4, #0]
   d5ea0:	f005 fd7a 	bl	db998 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d5ea4:	f003 fa08 	bl	d92b8 <BlynkNoOpCbk>
                return false;
   d5ea8:	e7ec      	b.n	d5e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d5eaa:	4628      	mov	r0, r5
   d5eac:	b00a      	add	sp, #40	; 0x28
   d5eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5eb2:	bf00      	nop
   d5eb4:	000e6828 	.word	0x000e6828

000d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d5eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ebc:	b083      	sub	sp, #12
   d5ebe:	af00      	add	r7, sp, #0
   d5ec0:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5ec2:	6800      	ldr	r0, [r0, #0]
   d5ec4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d5ec6:	4689      	mov	r9, r1
   d5ec8:	4616      	mov	r6, r2
   d5eca:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d5ecc:	46ea      	mov	sl, sp
   d5ece:	f005 fb90 	bl	db5f2 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d5ed2:	2800      	cmp	r0, #0
   d5ed4:	d060      	beq.n	d5f98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d5ed6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d5eda:	f000 80a0 	beq.w	d601e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d5ede:	f1b9 0f06 	cmp.w	r9, #6
   d5ee2:	f000 809c 	beq.w	d601e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d5ee6:	7f63      	ldrb	r3, [r4, #29]
   d5ee8:	2b01      	cmp	r3, #1
   d5eea:	d155      	bne.n	d5f98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d5eec:	b916      	cbnz	r6, d5ef4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d5eee:	8b66      	ldrh	r6, [r4, #26]
   d5ef0:	2e00      	cmp	r6, #0
   d5ef2:	d056      	beq.n	d5fa2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d5ef4:	f1a9 030c 	sub.w	r3, r9, #12
   d5ef8:	2b08      	cmp	r3, #8
   d5efa:	d95a      	bls.n	d5fb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d5efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d5efe:	f1bb 0f00 	cmp.w	fp, #0
   d5f02:	bf14      	ite	ne
   d5f04:	46a8      	movne	r8, r5
   d5f06:	f04f 0800 	moveq.w	r8, #0
   d5f0a:	2a00      	cmp	r2, #0
   d5f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d5f0e:	f108 0305 	add.w	r3, r8, #5
   d5f12:	bf14      	ite	ne
   d5f14:	4690      	movne	r8, r2
   d5f16:	f04f 0800 	moveq.w	r8, #0
   d5f1a:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5f1c:	f108 0307 	add.w	r3, r8, #7
   d5f20:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d5f24:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5f26:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d5f2a:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d5f2e:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d5f30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5f34:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d5f38:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d5f3c:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d5f40:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d5f44:	f1bb 0f00 	cmp.w	fp, #0
   d5f48:	d052      	beq.n	d5ff0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d5f4a:	2d00      	cmp	r5, #0
   d5f4c:	d050      	beq.n	d5ff0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d5f4e:	462a      	mov	r2, r5
   d5f50:	4659      	mov	r1, fp
   d5f52:	f10d 0005 	add.w	r0, sp, #5
   d5f56:	f00c fa35 	bl	e23c4 <memcpy>
        pos += length;
   d5f5a:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d5f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d5f5e:	2b00      	cmp	r3, #0
   d5f60:	d148      	bne.n	d5ff4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d5f62:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d5f64:	4545      	cmp	r5, r8
   d5f66:	d251      	bcs.n	d600c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d5f68:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d5f6c:	687b      	ldr	r3, [r7, #4]
   d5f6e:	6820      	ldr	r0, [r4, #0]
   d5f70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d5f74:	bf28      	it	cs
   d5f76:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d5f7a:	1959      	adds	r1, r3, r5
   d5f7c:	f005 fb23 	bl	db5c6 <_ZN9TCPClient5writeEPKhj>
   d5f80:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d5f82:	2000      	movs	r0, #0
   d5f84:	f003 f990 	bl	d92a8 <_Z10BlynkDelaym>
        if (w == 0) {
   d5f88:	2e00      	cmp	r6, #0
   d5f8a:	d13d      	bne.n	d6008 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5f8c:	6820      	ldr	r0, [r4, #0]
   d5f8e:	f005 fd03 	bl	db998 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d5f92:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d5f94:	f003 f990 	bl	d92b8 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d5f98:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d5f9a:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d5f9c:	46bd      	mov	sp, r7
   d5f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d5fa2:	8b23      	ldrh	r3, [r4, #24]
   d5fa4:	3301      	adds	r3, #1
   d5fa6:	b29b      	uxth	r3, r3
   d5fa8:	b903      	cbnz	r3, d5fac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d5faa:	2301      	movs	r3, #1
   d5fac:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d5fae:	8b26      	ldrh	r6, [r4, #24]
   d5fb0:	e7a0      	b.n	d5ef4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d5fb2:	68e3      	ldr	r3, [r4, #12]
   d5fb4:	6922      	ldr	r2, [r4, #16]
   d5fb6:	4293      	cmp	r3, r2
   d5fb8:	bf38      	it	cc
   d5fba:	4613      	movcc	r3, r2
   d5fbc:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d5fc0:	f003 f974 	bl	d92ac <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d5fc4:	ebc0 0008 	rsb	r0, r0, r8
   d5fc8:	2800      	cmp	r0, #0
   d5fca:	db0a      	blt.n	d5fe2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d5fcc:	2100      	movs	r1, #0
   d5fce:	4620      	mov	r0, r4
   d5fd0:	f7ff feb4 	bl	d5d3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d5fd4:	f003 f96a 	bl	d92ac <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d5fd8:	ebc0 0008 	rsb	r0, r0, r8
   d5fdc:	2800      	cmp	r0, #0
   d5fde:	daf5      	bge.n	d5fcc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d5fe0:	e78c      	b.n	d5efc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d5fe2:	7f21      	ldrb	r1, [r4, #28]
   d5fe4:	2900      	cmp	r1, #0
   d5fe6:	d189      	bne.n	d5efc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7ff fea7 	bl	d5d3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d5fee:	e785      	b.n	d5efc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d5ff0:	2005      	movs	r0, #5
   d5ff2:	e7b3      	b.n	d5f5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d5ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d5ff6:	2b00      	cmp	r3, #0
   d5ff8:	d0b3      	beq.n	d5f62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d5ffa:	461a      	mov	r2, r3
   d5ffc:	687b      	ldr	r3, [r7, #4]
   d5ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d6000:	4418      	add	r0, r3
   d6002:	f00c f9df 	bl	e23c4 <memcpy>
   d6006:	e7ac      	b.n	d5f62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d6008:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d600a:	e7ab      	b.n	d5f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d600c:	d003      	beq.n	d6016 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d600e:	4620      	mov	r0, r4
   d6010:	f7ff fc20 	bl	d5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d6014:	e7c0      	b.n	d5f98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d6016:	f003 f949 	bl	d92ac <_Z11BlynkMillisv>
   d601a:	6120      	str	r0, [r4, #16]
   d601c:	e7bc      	b.n	d5f98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d601e:	2e00      	cmp	r6, #0
   d6020:	f47f af6c 	bne.w	d5efc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d6024:	e763      	b.n	d5eee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6028:	b5f0      	push	{r4, r5, r6, r7, lr}
   d602a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d602e:	ab08      	add	r3, sp, #32
   d6030:	2400      	movs	r4, #0
   d6032:	4605      	mov	r5, r0
   d6034:	460f      	mov	r7, r1
   d6036:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6038:	a805      	add	r0, sp, #20
   d603a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d603e:	490e      	ldr	r1, [pc, #56]	; (d6078 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d6040:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6042:	4616      	mov	r6, r2
   d6044:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6046:	f7ff f9d0 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d604a:	4639      	mov	r1, r7
   d604c:	a805      	add	r0, sp, #20
   d604e:	f7ff f9e9 	bl	d5424 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6052:	4631      	mov	r1, r6
   d6054:	a805      	add	r0, sp, #20
   d6056:	f7ff f9e5 	bl	d5424 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d605a:	9b06      	ldr	r3, [sp, #24]
   d605c:	9402      	str	r4, [sp, #8]
   d605e:	3b01      	subs	r3, #1
   d6060:	9300      	str	r3, [sp, #0]
   d6062:	9401      	str	r4, [sp, #4]
   d6064:	9b05      	ldr	r3, [sp, #20]
   d6066:	4622      	mov	r2, r4
   d6068:	2114      	movs	r1, #20
   d606a:	4628      	mov	r0, r5
   d606c:	f7ff ff24 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6070:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6076:	bf00      	nop
   d6078:	000e5aa4 	.word	0x000e5aa4

000d607c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d607c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d607e:	2200      	movs	r2, #0
   d6080:	2349      	movs	r3, #73	; 0x49
   d6082:	9300      	str	r3, [sp, #0]
   d6084:	9202      	str	r2, [sp, #8]
   d6086:	9201      	str	r2, [sp, #4]
   d6088:	4b03      	ldr	r3, [pc, #12]	; (d6098 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d608a:	2111      	movs	r1, #17
   d608c:	f7ff ff14 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d6090:	b005      	add	sp, #20
   d6092:	f85d fb04 	ldr.w	pc, [sp], #4
   d6096:	bf00      	nop
   d6098:	000e5938 	.word	0x000e5938

000d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d609c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d609e:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d60a2:	ab0c      	add	r3, sp, #48	; 0x30
   d60a4:	2400      	movs	r4, #0
   d60a6:	4605      	mov	r5, r0
   d60a8:	460f      	mov	r7, r1
   d60aa:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d60ac:	a805      	add	r0, sp, #20
   d60ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d60b2:	4911      	ldr	r1, [pc, #68]	; (d60f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d60b4:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d60b6:	4616      	mov	r6, r2
   d60b8:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d60ba:	f7ff f996 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d60be:	4639      	mov	r1, r7
   d60c0:	a805      	add	r0, sp, #20
   d60c2:	f7ff f9af 	bl	d5424 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d60c6:	4631      	mov	r1, r6
   d60c8:	a808      	add	r0, sp, #32
   d60ca:	f003 fe1f 	bl	d9d0c <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d60ce:	9908      	ldr	r1, [sp, #32]
   d60d0:	a805      	add	r0, sp, #20
   d60d2:	f7ff f98a 	bl	d53ea <_ZN10BlynkParam3addEPKc>
   d60d6:	a808      	add	r0, sp, #32
   d60d8:	f003 fd92 	bl	d9c00 <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d60dc:	9b06      	ldr	r3, [sp, #24]
   d60de:	9402      	str	r4, [sp, #8]
   d60e0:	3b01      	subs	r3, #1
   d60e2:	9300      	str	r3, [sp, #0]
   d60e4:	9401      	str	r4, [sp, #4]
   d60e6:	9b05      	ldr	r3, [sp, #20]
   d60e8:	4622      	mov	r2, r4
   d60ea:	2114      	movs	r1, #20
   d60ec:	4628      	mov	r0, r5
   d60ee:	f7ff fee3 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d60f2:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d60f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d60f8:	000e5aa4 	.word	0x000e5aa4

000d60fc <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d60fc:	b510      	push	{r4, lr}
   d60fe:	b08c      	sub	sp, #48	; 0x30
  String statusMessage;
   d6100:	4943      	ldr	r1, [pc, #268]	; (d6210 <_Z9deepSleepv+0x114>)
   d6102:	4668      	mov	r0, sp
   d6104:	f003 fdc3 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  StateString = "STBY";
   d6108:	4942      	ldr	r1, [pc, #264]	; (d6214 <_Z9deepSleepv+0x118>)
   d610a:	4843      	ldr	r0, [pc, #268]	; (d6218 <_Z9deepSleepv+0x11c>)
   d610c:	f003 fe11 	bl	d9d32 <_ZN6StringaSEPKc>
    if (timeSynced)
   d6110:	4b42      	ldr	r3, [pc, #264]	; (d621c <_Z9deepSleepv+0x120>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6112:	4941      	ldr	r1, [pc, #260]	; (d6218 <_Z9deepSleepv+0x11c>)
   d6114:	781b      	ldrb	r3, [r3, #0]
   d6116:	b343      	cbz	r3, d616a <_Z9deepSleepv+0x6e>
   d6118:	a804      	add	r0, sp, #16
   d611a:	f003 fdf7 	bl	d9d0c <_ZN6StringC1ERKS_>
  {
       statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
   d611e:	4940      	ldr	r1, [pc, #256]	; (d6220 <_Z9deepSleepv+0x124>)
   d6120:	a804      	add	r0, sp, #16
   d6122:	f003 fe5f 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6126:	4604      	mov	r4, r0
   d6128:	483e      	ldr	r0, [pc, #248]	; (d6224 <_Z9deepSleepv+0x128>)
   d612a:	f002 f9e6 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d612e:	4b3e      	ldr	r3, [pc, #248]	; (d6228 <_Z9deepSleepv+0x12c>)
   d6130:	493e      	ldr	r1, [pc, #248]	; (d622c <_Z9deepSleepv+0x130>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	4b3e      	ldr	r3, [pc, #248]	; (d6230 <_Z9deepSleepv+0x134>)
   d6136:	4402      	add	r2, r0
   d6138:	a808      	add	r0, sp, #32
   d613a:	f004 f9b9 	bl	da4b0 <_ZN9TimeClass6formatElPKc>
   d613e:	a908      	add	r1, sp, #32
   d6140:	4620      	mov	r0, r4
   d6142:	f003 fe43 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6146:	4936      	ldr	r1, [pc, #216]	; (d6220 <_Z9deepSleepv+0x124>)
   d6148:	f003 fe4c 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d614c:	4939      	ldr	r1, [pc, #228]	; (d6234 <_Z9deepSleepv+0x138>)
   d614e:	f003 fe3d 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6152:	4939      	ldr	r1, [pc, #228]	; (d6238 <_Z9deepSleepv+0x13c>)
   d6154:	f003 fe46 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6158:	4601      	mov	r1, r0
   d615a:	4668      	mov	r0, sp
   d615c:	f003 fdc7 	bl	d9cee <_ZN6StringaSERKS_>
   d6160:	a808      	add	r0, sp, #32
   d6162:	f003 fd4d 	bl	d9c00 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6166:	a804      	add	r0, sp, #16
   d6168:	e011      	b.n	d618e <_Z9deepSleepv+0x92>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d616a:	a808      	add	r0, sp, #32
   d616c:	f003 fdce 	bl	d9d0c <_ZN6StringC1ERKS_>
  }
  else
  {
       statusMessage = StateString+"                "+field7+"%";
   d6170:	4932      	ldr	r1, [pc, #200]	; (d623c <_Z9deepSleepv+0x140>)
   d6172:	a808      	add	r0, sp, #32
   d6174:	f003 fe36 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6178:	492e      	ldr	r1, [pc, #184]	; (d6234 <_Z9deepSleepv+0x138>)
   d617a:	f003 fe27 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d617e:	492e      	ldr	r1, [pc, #184]	; (d6238 <_Z9deepSleepv+0x13c>)
   d6180:	f003 fe30 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6184:	4601      	mov	r1, r0
   d6186:	4668      	mov	r0, sp
   d6188:	f003 fdb1 	bl	d9cee <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d618c:	a808      	add	r0, sp, #32
   d618e:	f003 fd37 	bl	d9c00 <_ZN6StringD1Ev>
  }
  Blynk.virtualWrite(V30,statusMessage);
   d6192:	4669      	mov	r1, sp
   d6194:	a808      	add	r0, sp, #32
   d6196:	f003 fdb9 	bl	d9d0c <_ZN6StringC1ERKS_>
   d619a:	aa08      	add	r2, sp, #32
   d619c:	211e      	movs	r1, #30
   d619e:	4828      	ldr	r0, [pc, #160]	; (d6240 <_Z9deepSleepv+0x144>)
   d61a0:	f7ff ff7c 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d61a4:	a808      	add	r0, sp, #32
   d61a6:	f003 fd2b 	bl	d9c00 <_ZN6StringD1Ev>
  delay(3000);
   d61aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d61ae:	f004 f9e3 	bl	da578 <delay>
  power.setPowerON(EXT3V3,false);
   d61b2:	2200      	movs	r2, #0
   d61b4:	2102      	movs	r1, #2
   d61b6:	4823      	ldr	r0, [pc, #140]	; (d6244 <_Z9deepSleepv+0x148>)
   d61b8:	f002 fb2a 	bl	d8810 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d61bc:	2200      	movs	r2, #0
   d61be:	2103      	movs	r1, #3
   d61c0:	4820      	ldr	r0, [pc, #128]	; (d6244 <_Z9deepSleepv+0x148>)
   d61c2:	f002 fb25 	bl	d8810 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d61c6:	f005 fe1d 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d61ca:	f005 f923 	bl	db414 <_ZN7TwoWire9isEnabledEv>
   d61ce:	b918      	cbnz	r0, d61d8 <_Z9deepSleepv+0xdc>
    Wire.end();
   d61d0:	f005 fe18 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d61d4:	f005 f8f6 	bl	db3c4 <_ZN7TwoWire3endEv>
  }  

  DEBUG_PRINTLN("Going to deep sleep");
   d61d8:	f005 f872 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d61dc:	491a      	ldr	r1, [pc, #104]	; (d6248 <_Z9deepSleepv+0x14c>)
   d61de:	f003 fed8 	bl	d9f92 <_ZN5Print7printlnEPKc>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d61e2:	481a      	ldr	r0, [pc, #104]	; (d624c <_Z9deepSleepv+0x150>)
   d61e4:	2300      	movs	r3, #0
   d61e6:	461a      	mov	r2, r3
   d61e8:	4619      	mov	r1, r3
   d61ea:	6840      	ldr	r0, [r0, #4]
   d61ec:	f003 fb42 	bl	d9874 <network_off>
  Cellular.off();

  delay(5000);
   d61f0:	f241 3088 	movw	r0, #5000	; 0x1388
   d61f4:	f004 f9c0 	bl	da578 <delay>
  System.sleep(SLEEP_MODE_DEEP);
   d61f8:	4b15      	ldr	r3, [pc, #84]	; (d6250 <_Z9deepSleepv+0x154>)
   d61fa:	2200      	movs	r2, #0
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	2101      	movs	r1, #1
   d6200:	a808      	add	r0, sp, #32
   d6202:	f003 fc83 	bl	d9b0c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6206:	4668      	mov	r0, sp
   d6208:	f003 fcfa 	bl	d9c00 <_ZN6StringD1Ev>
  DEBUG_PRINTLN("Going to deep sleep");
  Cellular.off();

  delay(5000);
  System.sleep(SLEEP_MODE_DEEP);
}
   d620c:	b00c      	add	sp, #48	; 0x30
   d620e:	bd10      	pop	{r4, pc}
   d6210:	000e5da8 	.word	0x000e5da8
   d6214:	000e5aa7 	.word	0x000e5aa7
   d6218:	2003d788 	.word	0x2003d788
   d621c:	2003de55 	.word	0x2003de55
   d6220:	000e5ac3 	.word	0x000e5ac3
   d6224:	2003d6c4 	.word	0x2003d6c4
   d6228:	2003d5a4 	.word	0x2003d5a4
   d622c:	2003e268 	.word	0x2003e268
   d6230:	000e5aac 	.word	0x000e5aac
   d6234:	2003d798 	.word	0x2003d798
   d6238:	000e5ab2 	.word	0x000e5ab2
   d623c:	000e5ab4 	.word	0x000e5ab4
   d6240:	2003e154 	.word	0x2003e154
   d6244:	2003de54 	.word	0x2003de54
   d6248:	000e5ac5 	.word	0x000e5ac5
   d624c:	2003e2a8 	.word	0x2003e2a8
   d6250:	2003e110 	.word	0x2003e110

000d6254 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d6254:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6256:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d625a:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d625c:	ab08      	add	r3, sp, #32
   d625e:	4617      	mov	r7, r2
   d6260:	2400      	movs	r4, #0
   d6262:	4605      	mov	r5, r0
   d6264:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d6266:	a805      	add	r0, sp, #20
   d6268:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d626c:	9307      	str	r3, [sp, #28]
   d626e:	9406      	str	r4, [sp, #24]
   d6270:	f7ff f8bb 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d6274:	4639      	mov	r1, r7
   d6276:	a805      	add	r0, sp, #20
   d6278:	f7ff f8b7 	bl	d53ea <_ZN10BlynkParam3addEPKc>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d627c:	6831      	ldr	r1, [r6, #0]
   d627e:	a805      	add	r0, sp, #20
   d6280:	f7ff f8b3 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6284:	9b06      	ldr	r3, [sp, #24]
   d6286:	9402      	str	r4, [sp, #8]
   d6288:	3b01      	subs	r3, #1
   d628a:	9300      	str	r3, [sp, #0]
   d628c:	9401      	str	r4, [sp, #4]
   d628e:	9b05      	ldr	r3, [sp, #20]
   d6290:	4622      	mov	r2, r4
   d6292:	210d      	movs	r1, #13
   d6294:	4628      	mov	r0, r5
   d6296:	f7ff fe0f 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d629a:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d629e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d62a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62a2:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d62a6:	ab0c      	add	r3, sp, #48	; 0x30
   d62a8:	2400      	movs	r4, #0
   d62aa:	4605      	mov	r5, r0
   d62ac:	460f      	mov	r7, r1
   d62ae:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d62b0:	a805      	add	r0, sp, #20
   d62b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d62b6:	4911      	ldr	r1, [pc, #68]	; (d62fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d62b8:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d62ba:	4616      	mov	r6, r2
   d62bc:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d62be:	f7ff f894 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d62c2:	4639      	mov	r1, r7
   d62c4:	a805      	add	r0, sp, #20
   d62c6:	f7ff f8ad 	bl	d5424 <_ZN10BlynkParam3addEi>
   d62ca:	4631      	mov	r1, r6
   d62cc:	a808      	add	r0, sp, #32
   d62ce:	f003 fd1d 	bl	d9d0c <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d62d2:	9908      	ldr	r1, [sp, #32]
   d62d4:	a805      	add	r0, sp, #20
   d62d6:	f7ff f888 	bl	d53ea <_ZN10BlynkParam3addEPKc>
   d62da:	a808      	add	r0, sp, #32
   d62dc:	f003 fc90 	bl	d9c00 <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d62e0:	9b06      	ldr	r3, [sp, #24]
   d62e2:	9402      	str	r4, [sp, #8]
   d62e4:	3b01      	subs	r3, #1
   d62e6:	9300      	str	r3, [sp, #0]
   d62e8:	9401      	str	r4, [sp, #4]
   d62ea:	9b05      	ldr	r3, [sp, #20]
   d62ec:	4622      	mov	r2, r4
   d62ee:	2114      	movs	r1, #20
   d62f0:	4628      	mov	r0, r5
   d62f2:	f7ff fde1 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d62f6:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62fc:	000e5aa4 	.word	0x000e5aa4

000d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6300:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6302:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6306:	ab0a      	add	r3, sp, #40	; 0x28
   d6308:	2400      	movs	r4, #0
   d630a:	4606      	mov	r6, r0
   d630c:	460d      	mov	r5, r1
   d630e:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6310:	a807      	add	r0, sp, #28
   d6312:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6316:	4917      	ldr	r1, [pc, #92]	; (d6374 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6318:	ed8d 0a05 	vstr	s0, [sp, #20]
   d631c:	9309      	str	r3, [sp, #36]	; 0x24
   d631e:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6320:	f7ff f863 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6324:	4629      	mov	r1, r5
   d6326:	a807      	add	r0, sp, #28
   d6328:	f7ff f87c 	bl	d5424 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d632c:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6330:	9b08      	ldr	r3, [sp, #32]
   d6332:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6334:	9d07      	ldr	r5, [sp, #28]
   d6336:	ee10 0a10 	vmov	r0, s0
   d633a:	1acf      	subs	r7, r1, r3
   d633c:	441d      	add	r5, r3
   d633e:	f00b fb53 	bl	e19e8 <__aeabi_f2d>
   d6342:	4a0d      	ldr	r2, [pc, #52]	; (d6378 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d6344:	e9cd 0100 	strd	r0, r1, [sp]
   d6348:	4639      	mov	r1, r7
   d634a:	4628      	mov	r0, r5
   d634c:	f003 fb1a 	bl	d9984 <snprintf>
   d6350:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6352:	9402      	str	r4, [sp, #8]
   d6354:	3001      	adds	r0, #1
   d6356:	4418      	add	r0, r3
   d6358:	9008      	str	r0, [sp, #32]
   d635a:	3801      	subs	r0, #1
   d635c:	9000      	str	r0, [sp, #0]
   d635e:	9401      	str	r4, [sp, #4]
   d6360:	9b07      	ldr	r3, [sp, #28]
   d6362:	4622      	mov	r2, r4
   d6364:	2114      	movs	r1, #20
   d6366:	4630      	mov	r0, r6
   d6368:	f7ff fda6 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d636c:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d6370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6372:	bf00      	nop
   d6374:	000e5aa4 	.word	0x000e5aa4
   d6378:	000e5add 	.word	0x000e5add

000d637c <_Z13setAppWidgetsv>:
 DEBUG_PRINTLN("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d637c:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d637e:	4d09      	ldr	r5, [pc, #36]	; (d63a4 <_Z13setAppWidgetsv+0x28>)
   d6380:	4c09      	ldr	r4, [pc, #36]	; (d63a8 <_Z13setAppWidgetsv+0x2c>)
   d6382:	686a      	ldr	r2, [r5, #4]
   d6384:	4620      	mov	r0, r4
   d6386:	210b      	movs	r1, #11
   d6388:	f7ff fe4e 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d638c:	4620      	mov	r0, r4
   d638e:	68aa      	ldr	r2, [r5, #8]
   d6390:	210d      	movs	r1, #13
   d6392:	f7ff fe49 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6396:	ed95 0a03 	vldr	s0, [r5, #12]
   d639a:	210f      	movs	r1, #15
   d639c:	4620      	mov	r0, r4
   d639e:	f7ff ffaf 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d63a2:	bd38      	pop	{r3, r4, r5, pc}
   d63a4:	2003da38 	.word	0x2003da38
   d63a8:	2003e154 	.word	0x2003e154

000d63ac <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d63ac:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d63ae:	6808      	ldr	r0, [r1, #0]
   d63b0:	f00b fef5 	bl	e219e <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d63b4:	4b03      	ldr	r3, [pc, #12]	; (d63c4 <BlynkWidgetWrite10+0x18>)
   d63b6:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d63b8:	f7ff f8ee 	bl	d5598 <_Z9saveStatev>
  setAppWidgets();
}
   d63bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d63c0:	f7ff bfdc 	b.w	d637c <_Z13setAppWidgetsv>
   d63c4:	2003da38 	.word	0x2003da38

000d63c8 <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d63c8:	b508      	push	{r3, lr}
   d63ca:	6808      	ldr	r0, [r1, #0]
   d63cc:	f00b fee7 	bl	e219e <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d63d0:	4b03      	ldr	r3, [pc, #12]	; (d63e0 <BlynkWidgetWrite12+0x18>)
   d63d2:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d63d4:	f7ff f8e0 	bl	d5598 <_Z9saveStatev>
  setAppWidgets();
}
   d63d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d63dc:	f7ff bfce 	b.w	d637c <_Z13setAppWidgetsv>
   d63e0:	2003da38 	.word	0x2003da38

000d63e4 <BlynkWidgetWriteInternalPinACON>:
  delay(5000);
  System.sleep(SLEEP_MODE_DEEP);
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d63e4:	b508      	push	{r3, lr}
  appConnected = true;
   d63e6:	4b06      	ldr	r3, [pc, #24]	; (d6400 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d63e8:	2201      	movs	r2, #1
   d63ea:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d63ec:	f7ff ffc6 	bl	d637c <_Z13setAppWidgetsv>
  DEBUG_PRINTLN("Connected");
   d63f0:	f004 ff66 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d63f4:	4903      	ldr	r1, [pc, #12]	; (d6404 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d63f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
   d63fa:	f003 bdca 	b.w	d9f92 <_ZN5Print7printlnEPKc>
   d63fe:	bf00      	nop
   d6400:	2003d9fd 	.word	0x2003d9fd
   d6404:	000e5ae3 	.word	0x000e5ae3

000d6408 <BlynkWidgetWrite14>:
  }
  
}

BLYNK_WRITE(V14) 
{
   d6408:	b510      	push	{r4, lr}
   d640a:	6808      	ldr	r0, [r1, #0]
   d640c:	f00b fec7 	bl	e219e <atoi>
  if (param.asInt()==1)
   d6410:	2801      	cmp	r0, #1
   d6412:	d10d      	bne.n	d6430 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d6414:	4809      	ldr	r0, [pc, #36]	; (d643c <BlynkWidgetWrite14+0x34>)
   d6416:	4c0a      	ldr	r4, [pc, #40]	; (d6440 <BlynkWidgetWrite14+0x38>)
   d6418:	f001 fdf4 	bl	d8004 <_ZN3ULP4zeroEv>
   d641c:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6420:	f7ff f8ba 	bl	d5598 <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6424:	ed94 0a03 	vldr	s0, [r4, #12]
   d6428:	4806      	ldr	r0, [pc, #24]	; (d6444 <BlynkWidgetWrite14+0x3c>)
   d642a:	210f      	movs	r1, #15
   d642c:	f7ff ff68 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6430:	2200      	movs	r2, #0
   d6432:	210e      	movs	r1, #14
   d6434:	4803      	ldr	r0, [pc, #12]	; (d6444 <BlynkWidgetWrite14+0x3c>)
   d6436:	f7ff fdf7 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
   d643a:	bd10      	pop	{r4, pc}
   d643c:	2003de70 	.word	0x2003de70
   d6440:	2003da38 	.word	0x2003da38
   d6444:	2003e154 	.word	0x2003e154

000d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6448:	b5f0      	push	{r4, r5, r6, r7, lr}
   d644a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d644e:	ab08      	add	r3, sp, #32
   d6450:	2400      	movs	r4, #0
   d6452:	4605      	mov	r5, r0
   d6454:	460f      	mov	r7, r1
   d6456:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6458:	a805      	add	r0, sp, #20
   d645a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d645e:	490e      	ldr	r1, [pc, #56]	; (d6498 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6460:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6462:	4616      	mov	r6, r2
   d6464:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6466:	f7fe ffc0 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d646a:	4639      	mov	r1, r7
   d646c:	a805      	add	r0, sp, #20
   d646e:	f7fe ffd9 	bl	d5424 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6472:	4631      	mov	r1, r6
   d6474:	a805      	add	r0, sp, #20
   d6476:	f7fe ffb8 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d647a:	9b06      	ldr	r3, [sp, #24]
   d647c:	9402      	str	r4, [sp, #8]
   d647e:	3b01      	subs	r3, #1
   d6480:	9300      	str	r3, [sp, #0]
   d6482:	9401      	str	r4, [sp, #4]
   d6484:	9b05      	ldr	r3, [sp, #20]
   d6486:	4622      	mov	r2, r4
   d6488:	2114      	movs	r1, #20
   d648a:	4628      	mov	r0, r5
   d648c:	f7ff fd14 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6490:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6496:	bf00      	nop
   d6498:	000e5aa4 	.word	0x000e5aa4

000d649c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d649c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d649e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d64a2:	ab08      	add	r3, sp, #32
   d64a4:	2400      	movs	r4, #0
   d64a6:	4605      	mov	r5, r0
   d64a8:	460f      	mov	r7, r1
   d64aa:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d64ac:	a805      	add	r0, sp, #20
   d64ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d64b2:	490e      	ldr	r1, [pc, #56]	; (d64ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_+0x50>)
   d64b4:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d64b6:	4616      	mov	r6, r2
   d64b8:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d64ba:	f7fe ff96 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d64be:	4639      	mov	r1, r7
   d64c0:	a805      	add	r0, sp, #20
   d64c2:	f7fe ffaf 	bl	d5424 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d64c6:	4631      	mov	r1, r6
   d64c8:	a805      	add	r0, sp, #20
   d64ca:	f7fe ffab 	bl	d5424 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d64ce:	9b06      	ldr	r3, [sp, #24]
   d64d0:	9402      	str	r4, [sp, #8]
   d64d2:	3b01      	subs	r3, #1
   d64d4:	9300      	str	r3, [sp, #0]
   d64d6:	9401      	str	r4, [sp, #4]
   d64d8:	9b05      	ldr	r3, [sp, #20]
   d64da:	4622      	mov	r2, r4
   d64dc:	2114      	movs	r1, #20
   d64de:	4628      	mov	r0, r5
   d64e0:	f7ff fcea 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d64e4:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d64e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d64ea:	bf00      	nop
   d64ec:	000e5aa4 	.word	0x000e5aa4

000d64f0 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d64f0:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d64f2:	4c2a      	ldr	r4, [pc, #168]	; (d659c <_Z20initializeAppWidgetsv+0xac>)
   d64f4:	482a      	ldr	r0, [pc, #168]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d64f6:	6862      	ldr	r2, [r4, #4]
   d64f8:	210a      	movs	r1, #10
   d64fa:	f7ff fd95 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d64fe:	68a2      	ldr	r2, [r4, #8]
   d6500:	4827      	ldr	r0, [pc, #156]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6502:	210c      	movs	r1, #12
   d6504:	f7ff fd90 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6508:	6862      	ldr	r2, [r4, #4]
   d650a:	4825      	ldr	r0, [pc, #148]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d650c:	210b      	movs	r1, #11
   d650e:	f7ff fd8b 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6512:	68a2      	ldr	r2, [r4, #8]
   d6514:	4822      	ldr	r0, [pc, #136]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6516:	210d      	movs	r1, #13
   d6518:	f7ff fd86 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d651c:	f104 0210 	add.w	r2, r4, #16
   d6520:	2114      	movs	r1, #20
   d6522:	481f      	ldr	r0, [pc, #124]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6524:	f7ff ff90 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d6528:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d652c:	2110      	movs	r1, #16
   d652e:	481c      	ldr	r0, [pc, #112]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6530:	f7ff ff8a 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d6534:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6538:	2112      	movs	r1, #18
   d653a:	4819      	ldr	r0, [pc, #100]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d653c:	f7ff ff84 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d6540:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6544:	211a      	movs	r1, #26
   d6546:	4816      	ldr	r0, [pc, #88]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6548:	f7ff ff7e 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d654c:	ed94 0a03 	vldr	s0, [r4, #12]
   d6550:	4813      	ldr	r0, [pc, #76]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6552:	210f      	movs	r1, #15
   d6554:	f7ff fed4 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d6558:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d655c:	ed93 0a00 	vldr	s0, [r3]
   d6560:	480f      	ldr	r0, [pc, #60]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6562:	2119      	movs	r1, #25
   d6564:	f7ff fecc 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d6568:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   d656c:	480c      	ldr	r0, [pc, #48]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d656e:	2117      	movs	r1, #23
   d6570:	f7ff fd5a 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V24, state.buzzerActivated);
   d6574:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6578:	4809      	ldr	r0, [pc, #36]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d657a:	2118      	movs	r1, #24
   d657c:	f7ff ff8e 	bl	d649c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V22,"Enter code to reset");
   d6580:	4a08      	ldr	r2, [pc, #32]	; (d65a4 <_Z20initializeAppWidgetsv+0xb4>)
   d6582:	4807      	ldr	r0, [pc, #28]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6584:	2116      	movs	r1, #22
   d6586:	f7ff ff5f 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d658a:	4b07      	ldr	r3, [pc, #28]	; (d65a8 <_Z20initializeAppWidgetsv+0xb8>)
   d658c:	781b      	ldrb	r3, [r3, #0]
   d658e:	b123      	cbz	r3, d659a <_Z20initializeAppWidgetsv+0xaa>
   d6590:	4a06      	ldr	r2, [pc, #24]	; (d65ac <_Z20initializeAppWidgetsv+0xbc>)
   d6592:	4803      	ldr	r0, [pc, #12]	; (d65a0 <_Z20initializeAppWidgetsv+0xb0>)
   d6594:	2115      	movs	r1, #21
   d6596:	f7ff ff57 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d659a:	bd10      	pop	{r4, pc}
   d659c:	2003da38 	.word	0x2003da38
   d65a0:	2003e154 	.word	0x2003e154
   d65a4:	000e5aed 	.word	0x000e5aed
   d65a8:	2003d9fe 	.word	0x2003d9fe
   d65ac:	000e5b01 	.word	0x000e5b01

000d65b0 <BlynkWidgetWrite22>:
}

BLYNK_WRITE(V22) //Reset Expression
{
   d65b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d65b4:	6809      	ldr	r1, [r1, #0]
   d65b6:	4668      	mov	r0, sp
   d65b8:	f003 fb69 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d65bc:	494a      	ldr	r1, [pc, #296]	; (d66e8 <BlynkWidgetWrite22+0x138>)
   d65be:	4668      	mov	r0, sp
   d65c0:	f003 fc22 	bl	d9e08 <_ZNK6String6equalsEPKc>
   d65c4:	2800      	cmp	r0, #0
   d65c6:	f000 8088 	beq.w	d66da <BlynkWidgetWrite22+0x12a>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d65ca:	4c48      	ldr	r4, [pc, #288]	; (d66ec <BlynkWidgetWrite22+0x13c>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d65cc:	4a48      	ldr	r2, [pc, #288]	; (d66f0 <BlynkWidgetWrite22+0x140>)
   d65ce:	4849      	ldr	r0, [pc, #292]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d65d0:	2116      	movs	r1, #22
   d65d2:	f7ff ff39 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
   d65d6:	260f      	movs	r6, #15
    state.secondsBetweenReadings=5;
   d65d8:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d65da:	2700      	movs	r7, #0
    state.zeroOff = 0;
   d65dc:	f04f 0800 	mov.w	r8, #0
    strcpy(state.expression,"Enter expression here");
   d65e0:	4945      	ldr	r1, [pc, #276]	; (d66f8 <BlynkWidgetWrite22+0x148>)
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d65e2:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d65e4:	f104 0010 	add.w	r0, r4, #16
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d65e8:	6066      	str	r6, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d65ea:	6027      	str	r7, [r4, #0]
    state.zeroOff = 0;
   d65ec:	f8c4 800c 	str.w	r8, [r4, #12]
    strcpy(state.expression,"Enter expression here");
   d65f0:	f00c f97c 	bl	e28ec <strcpy>
    strcpy(state.email,"Enter email here");
   d65f4:	4941      	ldr	r1, [pc, #260]	; (d66fc <BlynkWidgetWrite22+0x14c>)
   d65f6:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d65fa:	f00c f977 	bl	e28ec <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d65fe:	493f      	ldr	r1, [pc, #252]	; (d66fc <BlynkWidgetWrite22+0x14c>)
   d6600:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d6604:	f00c f972 	bl	e28ec <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=1;
    state.buzzerActivated=true;
    state.batThreshold = 0;
   d6608:	f504 6582 	add.w	r5, r4, #1040	; 0x410
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d660c:	493b      	ldr	r1, [pc, #236]	; (d66fc <BlynkWidgetWrite22+0x14c>)
   d660e:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d6612:	f00c f96b 	bl	e28ec <strcpy>
    state.deviceZone=1;
   d6616:	2301      	movs	r3, #1
    state.buzzerActivated=true;
    state.batThreshold = 0;
    state.lastAlert=false;
    state.batLastAlert=false;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6618:	4632      	mov	r2, r6
   d661a:	210a      	movs	r1, #10
   d661c:	4835      	ldr	r0, [pc, #212]	; (d66f4 <BlynkWidgetWrite22+0x144>)
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=1;
   d661e:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
    state.buzzerActivated=true;
   d6622:	f884 3417 	strb.w	r3, [r4, #1047]	; 0x417
    state.batThreshold = 0;
   d6626:	f8c5 8000 	str.w	r8, [r5]
    state.lastAlert=false;
   d662a:	f884 7414 	strb.w	r7, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d662e:	f884 7415 	strb.w	r7, [r4, #1045]	; 0x415
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6632:	f7ff fcf9 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6636:	68a2      	ldr	r2, [r4, #8]
   d6638:	482e      	ldr	r0, [pc, #184]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d663a:	210c      	movs	r1, #12
   d663c:	f7ff fcf4 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d6640:	6862      	ldr	r2, [r4, #4]
   d6642:	482c      	ldr	r0, [pc, #176]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d6644:	210b      	movs	r1, #11
   d6646:	f7ff fcef 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d664a:	68a2      	ldr	r2, [r4, #8]
   d664c:	4829      	ldr	r0, [pc, #164]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d664e:	210d      	movs	r1, #13
   d6650:	f7ff fcea 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d6654:	f104 0210 	add.w	r2, r4, #16
   d6658:	2114      	movs	r1, #20
   d665a:	4826      	ldr	r0, [pc, #152]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d665c:	f7ff fef4 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6660:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6664:	2110      	movs	r1, #16
   d6666:	4823      	ldr	r0, [pc, #140]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d6668:	f7ff feee 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d666c:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6670:	2112      	movs	r1, #18
   d6672:	4820      	ldr	r0, [pc, #128]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d6674:	f7ff fee8 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d6678:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d667c:	211a      	movs	r1, #26
   d667e:	481d      	ldr	r0, [pc, #116]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d6680:	f7ff fee2 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6684:	ed94 0a03 	vldr	s0, [r4, #12]
   d6688:	481a      	ldr	r0, [pc, #104]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d668a:	4631      	mov	r1, r6
   d668c:	f7ff fe38 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d6690:	ed95 0a00 	vldr	s0, [r5]
   d6694:	4817      	ldr	r0, [pc, #92]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d6696:	2119      	movs	r1, #25
   d6698:	f7ff fe32 	bl	d6300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d669c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   d66a0:	4814      	ldr	r0, [pc, #80]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d66a2:	2117      	movs	r1, #23
   d66a4:	f7ff fcc0 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V24, state.buzzerActivated);
   d66a8:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d66ac:	4811      	ldr	r0, [pc, #68]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d66ae:	2118      	movs	r1, #24
   d66b0:	f7ff fef4 	bl	d649c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d66b4:	4812      	ldr	r0, [pc, #72]	; (d6700 <BlynkWidgetWrite22+0x150>)
   d66b6:	f001 ffe6 	bl	d8686 <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d66ba:	4a12      	ldr	r2, [pc, #72]	; (d6704 <BlynkWidgetWrite22+0x154>)
   d66bc:	480d      	ldr	r0, [pc, #52]	; (d66f4 <BlynkWidgetWrite22+0x144>)
   d66be:	2115      	movs	r1, #21
   d66c0:	f7ff fec2 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    DEBUG_PRINTLN("Hard Resetting");
   d66c4:	f004 fdfc 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d66c8:	490e      	ldr	r1, [pc, #56]	; (d6704 <BlynkWidgetWrite22+0x154>)
   d66ca:	f003 fc62 	bl	d9f92 <_ZN5Print7printlnEPKc>
    delay(500);
   d66ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d66d2:	f003 ff51 	bl	da578 <delay>
    System.reset();
   d66d6:	f003 fa15 	bl	d9b04 <_ZN11SystemClass5resetEv>
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d66da:	4668      	mov	r0, sp
   d66dc:	f003 fa90 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    DEBUG_PRINTLN("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d66e0:	b004      	add	sp, #16
   d66e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66e6:	bf00      	nop
   d66e8:	000e5b1c 	.word	0x000e5b1c
   d66ec:	2003da38 	.word	0x2003da38
   d66f0:	000e5aed 	.word	0x000e5aed
   d66f4:	2003e154 	.word	0x2003e154
   d66f8:	000e5b24 	.word	0x000e5b24
   d66fc:	000e5b3a 	.word	0x000e5b3a
   d6700:	2003d6b8 	.word	0x2003d6b8
   d6704:	000e5b4b 	.word	0x000e5b4b

000d6708 <BlynkOnConnected>:

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d6708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  DEBUG_PRINTLN("Blynk is now connected - syncing all pins.");
   d670a:	f004 fdd9 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d670e:	490a      	ldr	r1, [pc, #40]	; (d6738 <BlynkOnConnected+0x30>)
   d6710:	f003 fc3f 	bl	d9f92 <_ZN5Print7printlnEPKc>
  if (firstRun)
   d6714:	4b09      	ldr	r3, [pc, #36]	; (d673c <BlynkOnConnected+0x34>)
   d6716:	781b      	ldrb	r3, [r3, #0]
   d6718:	b10b      	cbz	r3, d671e <BlynkOnConnected+0x16>
  {
    initializeAppWidgets();
   d671a:	f7ff fee9 	bl	d64f0 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d671e:	2300      	movs	r3, #0
   d6720:	9302      	str	r3, [sp, #8]
   d6722:	9301      	str	r3, [sp, #4]
   d6724:	9300      	str	r3, [sp, #0]
   d6726:	461a      	mov	r2, r3
   d6728:	2110      	movs	r1, #16
   d672a:	4805      	ldr	r0, [pc, #20]	; (d6740 <BlynkOnConnected+0x38>)
   d672c:	f7ff fbc4 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d6730:	b005      	add	sp, #20
   d6732:	f85d fb04 	ldr.w	pc, [sp], #4
   d6736:	bf00      	nop
   d6738:	000e5b5a 	.word	0x000e5b5a
   d673c:	2003d9fc 	.word	0x2003d9fc
   d6740:	2003e154 	.word	0x2003e154

000d6744 <_Z13runExpressionPc>:
  state.buzzerActivated=param.asInt();
  saveState();
}

bool runExpression(char *expression)
{   
   d6744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6748:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   d674c:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d674e:	2260      	movs	r2, #96	; 0x60
   d6750:	2100      	movs	r1, #0
   d6752:	a81a      	add	r0, sp, #104	; 0x68
   d6754:	f00b fe41 	bl	e23da <memset>
   d6758:	4b7a      	ldr	r3, [pc, #488]	; (d6944 <_Z13runExpressionPc+0x200>)
   d675a:	931a      	str	r3, [sp, #104]	; 0x68
   d675c:	4b7a      	ldr	r3, [pc, #488]	; (d6948 <_Z13runExpressionPc+0x204>)
   d675e:	931e      	str	r3, [sp, #120]	; 0x78
   d6760:	4b7a      	ldr	r3, [pc, #488]	; (d694c <_Z13runExpressionPc+0x208>)
   d6762:	9322      	str	r3, [sp, #136]	; 0x88
   d6764:	4b7a      	ldr	r3, [pc, #488]	; (d6950 <_Z13runExpressionPc+0x20c>)
   d6766:	9326      	str	r3, [sp, #152]	; 0x98
   d6768:	4b7a      	ldr	r3, [pc, #488]	; (d6954 <_Z13runExpressionPc+0x210>)
   d676a:	932a      	str	r3, [sp, #168]	; 0xa8
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d676c:	4c7a      	ldr	r4, [pc, #488]	; (d6958 <_Z13runExpressionPc+0x214>)

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d676e:	4b7b      	ldr	r3, [pc, #492]	; (d695c <_Z13runExpressionPc+0x218>)
   d6770:	932e      	str	r3, [sp, #184]	; 0xb8
   d6772:	ab0e      	add	r3, sp, #56	; 0x38
   d6774:	932b      	str	r3, [sp, #172]	; 0xac
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d6776:	7823      	ldrb	r3, [r4, #0]

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6778:	f10d 0b18 	add.w	fp, sp, #24
   d677c:	f10d 0a20 	add.w	sl, sp, #32
   d6780:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   d6784:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   d6788:	af10      	add	r7, sp, #64	; 0x40
   d678a:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
   d678e:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
   d6792:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   d6796:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   d679a:	972f      	str	r7, [sp, #188]	; 0xbc
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d679c:	b123      	cbz	r3, d67a8 <_Z13runExpressionPc+0x64>
   d679e:	462a      	mov	r2, r5
   d67a0:	2115      	movs	r1, #21
   d67a2:	486f      	ldr	r0, [pc, #444]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d67a4:	f7ff fe50 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  /* Compile the expression with variables. */
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d67a8:	ab05      	add	r3, sp, #20
   d67aa:	2206      	movs	r2, #6
   d67ac:	a91a      	add	r1, sp, #104	; 0x68
   d67ae:	4628      	mov	r0, r5
   d67b0:	f7fe fd78 	bl	d52a4 <te_compile>

  if (expr) {
   d67b4:	4606      	mov	r6, r0
   d67b6:	2800      	cmp	r0, #0
   d67b8:	f000 8096 	beq.w	d68e8 <_Z13runExpressionPc+0x1a4>

      pm1 = (double)Sensor.massPM1;
   d67bc:	4d69      	ldr	r5, [pc, #420]	; (d6964 <_Z13runExpressionPc+0x220>)
   d67be:	6868      	ldr	r0, [r5, #4]
   d67c0:	f00b f912 	bl	e19e8 <__aeabi_f2d>
   d67c4:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d67c8:	68a8      	ldr	r0, [r5, #8]
   d67ca:	f00b f90d 	bl	e19e8 <__aeabi_f2d>
   d67ce:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d67d2:	68e8      	ldr	r0, [r5, #12]
   d67d4:	f00b f908 	bl	e19e8 <__aeabi_f2d>
   d67d8:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d67dc:	6928      	ldr	r0, [r5, #16]
   d67de:	f00b f903 	bl	e19e8 <__aeabi_f2d>
      conc = (double)conc;
      temp = (double)temp1;
   d67e2:	4b61      	ldr	r3, [pc, #388]	; (d6968 <_Z13runExpressionPc+0x224>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d67e4:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc;
      temp = (double)temp1;
   d67e8:	6818      	ldr	r0, [r3, #0]
   d67ea:	f00b f8fd 	bl	e19e8 <__aeabi_f2d>
   d67ee:	e9c7 0100 	strd	r0, r1, [r7]
      const double h2 = te_eval(expr);
   d67f2:	4630      	mov	r0, r6
   d67f4:	f7fe fa40 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d67f8:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d67fa:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d67fe:	b15b      	cbz	r3, d6818 <_Z13runExpressionPc+0xd4>
   d6800:	495a      	ldr	r1, [pc, #360]	; (d696c <_Z13runExpressionPc+0x228>)
   d6802:	a832      	add	r0, sp, #200	; 0xc8
   d6804:	f003 fa82 	bl	d9d0c <_ZN6StringC1ERKS_>
   d6808:	4855      	ldr	r0, [pc, #340]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d680a:	aa32      	add	r2, sp, #200	; 0xc8
   d680c:	2115      	movs	r1, #21
   d680e:	f7ff fc45 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6812:	a832      	add	r0, sp, #200	; 0xc8
   d6814:	f003 f9f4 	bl	d9c00 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d6818:	7823      	ldrb	r3, [r4, #0]
   d681a:	b333      	cbz	r3, d686a <_Z13runExpressionPc+0x126>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d681c:	ab32      	add	r3, sp, #200	; 0xc8
   d681e:	2500      	movs	r5, #0
   d6820:	9316      	str	r3, [sp, #88]	; 0x58
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6822:	4953      	ldr	r1, [pc, #332]	; (d6970 <_Z13runExpressionPc+0x22c>)
   d6824:	9517      	str	r5, [sp, #92]	; 0x5c
   d6826:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d682a:	a816      	add	r0, sp, #88	; 0x58
   d682c:	9318      	str	r3, [sp, #96]	; 0x60
   d682e:	f7fe fddc 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6832:	2115      	movs	r1, #21
   d6834:	a816      	add	r0, sp, #88	; 0x58
   d6836:	f7fe fdf5 	bl	d5424 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d683a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d683c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d683e:	9816      	ldr	r0, [sp, #88]	; 0x58
   d6840:	4a4c      	ldr	r2, [pc, #304]	; (d6974 <_Z13runExpressionPc+0x230>)
   d6842:	1ac9      	subs	r1, r1, r3
   d6844:	4418      	add	r0, r3
   d6846:	e9cd 6700 	strd	r6, r7, [sp]
   d684a:	f003 f89b 	bl	d9984 <snprintf>
   d684e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6850:	9502      	str	r5, [sp, #8]
   d6852:	3001      	adds	r0, #1
   d6854:	4418      	add	r0, r3
   d6856:	9017      	str	r0, [sp, #92]	; 0x5c
   d6858:	3801      	subs	r0, #1
   d685a:	9000      	str	r0, [sp, #0]
   d685c:	9501      	str	r5, [sp, #4]
   d685e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d6860:	483f      	ldr	r0, [pc, #252]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d6862:	462a      	mov	r2, r5
   d6864:	2114      	movs	r1, #20
   d6866:	f7ff fb27 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
   d686a:	7823      	ldrb	r3, [r4, #0]
   d686c:	b15b      	cbz	r3, d6886 <_Z13runExpressionPc+0x142>
   d686e:	4942      	ldr	r1, [pc, #264]	; (d6978 <_Z13runExpressionPc+0x234>)
   d6870:	a832      	add	r0, sp, #200	; 0xc8
   d6872:	f003 fa4b 	bl	d9d0c <_ZN6StringC1ERKS_>
   d6876:	483a      	ldr	r0, [pc, #232]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d6878:	aa32      	add	r2, sp, #200	; 0xc8
   d687a:	2115      	movs	r1, #21
   d687c:	f7ff fc0e 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6880:	a832      	add	r0, sp, #200	; 0xc8
   d6882:	f003 f9bd 	bl	d9c00 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);
   d6886:	7823      	ldrb	r3, [r4, #0]
   d6888:	b1eb      	cbz	r3, d68c6 <_Z13runExpressionPc+0x182>
   d688a:	493c      	ldr	r1, [pc, #240]	; (d697c <_Z13runExpressionPc+0x238>)
   d688c:	a832      	add	r0, sp, #200	; 0xc8
   d688e:	f003 fa3d 	bl	d9d0c <_ZN6StringC1ERKS_>
   d6892:	aa32      	add	r2, sp, #200	; 0xc8
   d6894:	2115      	movs	r1, #21
   d6896:	4832      	ldr	r0, [pc, #200]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d6898:	f7ff fc00 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d689c:	a832      	add	r0, sp, #200	; 0xc8
   d689e:	f003 f9af 	bl	d9c00 <_ZN6StringD1Ev>

      if (h2==1.0)
   d68a2:	2200      	movs	r2, #0
   d68a4:	4b36      	ldr	r3, [pc, #216]	; (d6980 <_Z13runExpressionPc+0x23c>)
   d68a6:	4630      	mov	r0, r6
   d68a8:	4639      	mov	r1, r7
   d68aa:	f00b fb59 	bl	e1f60 <__aeabi_dcmpeq>
   d68ae:	b190      	cbz	r0, d68d6 <_Z13runExpressionPc+0x192>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d68b0:	4b29      	ldr	r3, [pc, #164]	; (d6958 <_Z13runExpressionPc+0x214>)
   d68b2:	781c      	ldrb	r4, [r3, #0]
   d68b4:	b90c      	cbnz	r4, d68ba <_Z13runExpressionPc+0x176>
        return true;
   d68b6:	2401      	movs	r4, #1
   d68b8:	e03f      	b.n	d693a <_Z13runExpressionPc+0x1f6>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d68ba:	4a32      	ldr	r2, [pc, #200]	; (d6984 <_Z13runExpressionPc+0x240>)
   d68bc:	4828      	ldr	r0, [pc, #160]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d68be:	2115      	movs	r1, #21
   d68c0:	f7ff fdc2 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d68c4:	e039      	b.n	d693a <_Z13runExpressionPc+0x1f6>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
   d68c6:	2200      	movs	r2, #0
   d68c8:	4b2d      	ldr	r3, [pc, #180]	; (d6980 <_Z13runExpressionPc+0x23c>)
   d68ca:	4630      	mov	r0, r6
   d68cc:	4639      	mov	r1, r7
   d68ce:	f00b fb47 	bl	e1f60 <__aeabi_dcmpeq>
   d68d2:	2800      	cmp	r0, #0
   d68d4:	d1ef      	bne.n	d68b6 <_Z13runExpressionPc+0x172>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d68d6:	7824      	ldrb	r4, [r4, #0]
   d68d8:	2c00      	cmp	r4, #0
   d68da:	d02e      	beq.n	d693a <_Z13runExpressionPc+0x1f6>
   d68dc:	4a2a      	ldr	r2, [pc, #168]	; (d6988 <_Z13runExpressionPc+0x244>)
   d68de:	4820      	ldr	r0, [pc, #128]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d68e0:	2115      	movs	r1, #21
   d68e2:	f7ff fdb1 	bl	d6448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d68e6:	e027      	b.n	d6938 <_Z13runExpressionPc+0x1f4>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d68e8:	4928      	ldr	r1, [pc, #160]	; (d698c <_Z13runExpressionPc+0x248>)
   d68ea:	a832      	add	r0, sp, #200	; 0xc8
   d68ec:	f003 f9cf 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d68f0:	220a      	movs	r2, #10
   d68f2:	9905      	ldr	r1, [sp, #20]
   d68f4:	a816      	add	r0, sp, #88	; 0x58
   d68f6:	f003 fa3f 	bl	d9d78 <_ZN6StringC1Eih>
   d68fa:	a916      	add	r1, sp, #88	; 0x58
   d68fc:	a832      	add	r0, sp, #200	; 0xc8
   d68fe:	f003 fa65 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6902:	4601      	mov	r1, r0
   d6904:	a812      	add	r0, sp, #72	; 0x48
   d6906:	f003 fa01 	bl	d9d0c <_ZN6StringC1ERKS_>
   d690a:	a816      	add	r0, sp, #88	; 0x58
   d690c:	f003 f978 	bl	d9c00 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6910:	a832      	add	r0, sp, #200	; 0xc8
   d6912:	f003 f975 	bl	d9c00 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d6916:	7823      	ldrb	r3, [r4, #0]
   d6918:	b15b      	cbz	r3, d6932 <_Z13runExpressionPc+0x1ee>
   d691a:	a912      	add	r1, sp, #72	; 0x48
   d691c:	a832      	add	r0, sp, #200	; 0xc8
   d691e:	f003 f9f5 	bl	d9d0c <_ZN6StringC1ERKS_>
   d6922:	480f      	ldr	r0, [pc, #60]	; (d6960 <_Z13runExpressionPc+0x21c>)
   d6924:	aa32      	add	r2, sp, #200	; 0xc8
   d6926:	2115      	movs	r1, #21
   d6928:	f7ff fbb8 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d692c:	a832      	add	r0, sp, #200	; 0xc8
   d692e:	f003 f967 	bl	d9c00 <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d6932:	a812      	add	r0, sp, #72	; 0x48
   d6934:	f003 f964 	bl	d9c00 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d6938:	2400      	movs	r4, #0
  } 
}
   d693a:	4620      	mov	r0, r4
   d693c:	f20d 4dcc 	addw	sp, sp, #1228	; 0x4cc
   d6940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6944:	000e5b85 	.word	0x000e5b85
   d6948:	000e5b89 	.word	0x000e5b89
   d694c:	000e5b8d 	.word	0x000e5b8d
   d6950:	000e5b91 	.word	0x000e5b91
   d6954:	000e5b96 	.word	0x000e5b96
   d6958:	2003d9fe 	.word	0x2003d9fe
   d695c:	000e5b9b 	.word	0x000e5b9b
   d6960:	2003e154 	.word	0x2003e154
   d6964:	2003e1b4 	.word	0x2003e1b4
   d6968:	2003e224 	.word	0x2003e224
   d696c:	2003de58 	.word	0x2003de58
   d6970:	000e5aa4 	.word	0x000e5aa4
   d6974:	000e5ba0 	.word	0x000e5ba0
   d6978:	2003e124 	.word	0x2003e124
   d697c:	2003e1e4 	.word	0x2003e1e4
   d6980:	3ff00000 	.word	0x3ff00000
   d6984:	000e5ba6 	.word	0x000e5ba6
   d6988:	000e5bbd 	.word	0x000e5bbd
   d698c:	000e5bd5 	.word	0x000e5bd5

000d6990 <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d6990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d6992:	6809      	ldr	r1, [r1, #0]
   d6994:	4668      	mov	r0, sp
   d6996:	f003 f97a 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d699a:	4668      	mov	r0, sp
   d699c:	f003 fa75 	bl	d9e8a <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d69a0:	9900      	ldr	r1, [sp, #0]
   d69a2:	4808      	ldr	r0, [pc, #32]	; (d69c4 <BlynkWidgetWrite20+0x34>)
   d69a4:	f00b ffa2 	bl	e28ec <strcpy>
  saveState();
   d69a8:	f7fe fdf6 	bl	d5598 <_Z9saveStatev>
  if (sensorValid)
   d69ac:	4b06      	ldr	r3, [pc, #24]	; (d69c8 <BlynkWidgetWrite20+0x38>)
   d69ae:	781b      	ldrb	r3, [r3, #0]
   d69b0:	b113      	cbz	r3, d69b8 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d69b2:	4804      	ldr	r0, [pc, #16]	; (d69c4 <BlynkWidgetWrite20+0x34>)
   d69b4:	f7ff fec6 	bl	d6744 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d69b8:	4668      	mov	r0, sp
   d69ba:	f003 f921 	bl	d9c00 <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d69be:	b005      	add	sp, #20
   d69c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d69c4:	2003da48 	.word	0x2003da48
   d69c8:	2003e120 	.word	0x2003e120

000d69cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d69cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69ce:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d69d2:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d69d4:	ab08      	add	r3, sp, #32
   d69d6:	4617      	mov	r7, r2
   d69d8:	2400      	movs	r4, #0
   d69da:	4605      	mov	r5, r0
   d69dc:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d69de:	a805      	add	r0, sp, #20
   d69e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d69e4:	9307      	str	r3, [sp, #28]
   d69e6:	9406      	str	r4, [sp, #24]
   d69e8:	f7fe fcff 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d69ec:	4639      	mov	r1, r7
   d69ee:	a805      	add	r0, sp, #20
   d69f0:	f7fe fcfb 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
   d69f4:	4631      	mov	r1, r6
   d69f6:	a805      	add	r0, sp, #20
   d69f8:	f7fe fcf7 	bl	d53ea <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d69fc:	9b06      	ldr	r3, [sp, #24]
   d69fe:	9402      	str	r4, [sp, #8]
   d6a00:	3b01      	subs	r3, #1
   d6a02:	9300      	str	r3, [sp, #0]
   d6a04:	9401      	str	r4, [sp, #4]
   d6a06:	9b05      	ldr	r3, [sp, #20]
   d6a08:	4622      	mov	r2, r4
   d6a0a:	210d      	movs	r1, #13
   d6a0c:	4628      	mov	r0, r5
   d6a0e:	f7ff fa53 	bl	d5eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6a12:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a18 <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d6a18:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d6a1a:	4b33      	ldr	r3, [pc, #204]	; (d6ae8 <_Z10checkAccelv+0xd0>)
   d6a1c:	4c33      	ldr	r4, [pc, #204]	; (d6aec <_Z10checkAccelv+0xd4>)
   d6a1e:	781a      	ldrb	r2, [r3, #0]
   d6a20:	461d      	mov	r5, r3
   d6a22:	2a00      	cmp	r2, #0
   d6a24:	d046      	beq.n	d6ab4 <_Z10checkAccelv+0x9c>
  {
    DEBUG_PRINTLN("*** ACCEL INTERRUPTED ***");
   d6a26:	f004 fc4b 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6a2a:	4931      	ldr	r1, [pc, #196]	; (d6af0 <_Z10checkAccelv+0xd8>)
   d6a2c:	f003 fab1 	bl	d9f92 <_ZN5Print7printlnEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d6a30:	2100      	movs	r1, #0
   d6a32:	4830      	ldr	r0, [pc, #192]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a34:	f002 f8d4 	bl	d8be0 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d6a38:	2100      	movs	r1, #0
   d6a3a:	482e      	ldr	r0, [pc, #184]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a3c:	f002 f8ca 	bl	d8bd4 <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d6a40:	482c      	ldr	r0, [pc, #176]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a42:	f002 f812 	bl	d8a6a <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d6a46:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d6a48:	4606      	mov	r6, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d6a4a:	4601      	mov	r1, r0
   d6a4c:	4829      	ldr	r0, [pc, #164]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a4e:	f002 f807 	bl	d8a60 <_ZN7ADXL3459triggeredEhi>
   d6a52:	b198      	cbz	r0, d6a7c <_Z10checkAccelv+0x64>
      DEBUG_PRINTLN("*** INACTIVITY ***");
   d6a54:	f004 fc34 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6a58:	4927      	ldr	r1, [pc, #156]	; (d6af8 <_Z10checkAccelv+0xe0>)
   d6a5a:	f003 fa9a 	bl	d9f92 <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d6a5e:	2300      	movs	r3, #0
   d6a60:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d6a62:	f7fe fe85 	bl	d5770 <_Z18tamperAlertChangedv>
   d6a66:	b128      	cbz	r0, d6a74 <_Z10checkAccelv+0x5c>
      {
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");     
   d6a68:	4b24      	ldr	r3, [pc, #144]	; (d6afc <_Z10checkAccelv+0xe4>)
   d6a6a:	4a25      	ldr	r2, [pc, #148]	; (d6b00 <_Z10checkAccelv+0xe8>)
   d6a6c:	4925      	ldr	r1, [pc, #148]	; (d6b04 <_Z10checkAccelv+0xec>)
   d6a6e:	4826      	ldr	r0, [pc, #152]	; (d6b08 <_Z10checkAccelv+0xf0>)
   d6a70:	f7ff ffac 	bl	d69cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d6a74:	2101      	movs	r1, #1
   d6a76:	481f      	ldr	r0, [pc, #124]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a78:	f002 f8ac 	bl	d8bd4 <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d6a7c:	2204      	movs	r2, #4
   d6a7e:	4631      	mov	r1, r6
   d6a80:	481c      	ldr	r0, [pc, #112]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6a82:	f001 ffed 	bl	d8a60 <_ZN7ADXL3459triggeredEhi>
   d6a86:	b198      	cbz	r0, d6ab0 <_Z10checkAccelv+0x98>
      DEBUG_PRINTLN("*** ACTIVITY ***"); 
   d6a88:	f004 fc1a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6a8c:	491f      	ldr	r1, [pc, #124]	; (d6b0c <_Z10checkAccelv+0xf4>)
   d6a8e:	f003 fa80 	bl	d9f92 <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d6a92:	2301      	movs	r3, #1
   d6a94:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d6a96:	f7fe fe6b 	bl	d5770 <_Z18tamperAlertChangedv>
   d6a9a:	b128      	cbz	r0, d6aa8 <_Z10checkAccelv+0x90>
      {
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");      
   d6a9c:	4b1c      	ldr	r3, [pc, #112]	; (d6b10 <_Z10checkAccelv+0xf8>)
   d6a9e:	4a1d      	ldr	r2, [pc, #116]	; (d6b14 <_Z10checkAccelv+0xfc>)
   d6aa0:	4918      	ldr	r1, [pc, #96]	; (d6b04 <_Z10checkAccelv+0xec>)
   d6aa2:	4819      	ldr	r0, [pc, #100]	; (d6b08 <_Z10checkAccelv+0xf0>)
   d6aa4:	f7ff ff92 	bl	d69cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d6aa8:	2101      	movs	r1, #1
   d6aaa:	4812      	ldr	r0, [pc, #72]	; (d6af4 <_Z10checkAccelv+0xdc>)
   d6aac:	f002 f898 	bl	d8be0 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d6ab0:	2300      	movs	r3, #0
   d6ab2:	702b      	strb	r3, [r5, #0]
  }

  if ((tamperCurrentAlert==false)&&(currentAlert==false))
   d6ab4:	7823      	ldrb	r3, [r4, #0]
   d6ab6:	b933      	cbnz	r3, d6ac6 <_Z10checkAccelv+0xae>
   d6ab8:	4b17      	ldr	r3, [pc, #92]	; (d6b18 <_Z10checkAccelv+0x100>)
   d6aba:	7819      	ldrb	r1, [r3, #0]
   d6abc:	b919      	cbnz	r1, d6ac6 <_Z10checkAccelv+0xae>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d6abe:	4b17      	ldr	r3, [pc, #92]	; (d6b1c <_Z10checkAccelv+0x104>)
   d6ac0:	8818      	ldrh	r0, [r3, #0]
   d6ac2:	f005 f914 	bl	dbcee <digitalWrite>
  }

  if ((tamperCurrentAlert==true)||(currentAlert==true))
   d6ac6:	7823      	ldrb	r3, [r4, #0]
   d6ac8:	b913      	cbnz	r3, d6ad0 <_Z10checkAccelv+0xb8>
   d6aca:	4b13      	ldr	r3, [pc, #76]	; (d6b18 <_Z10checkAccelv+0x100>)
   d6acc:	781b      	ldrb	r3, [r3, #0]
   d6ace:	b153      	cbz	r3, d6ae6 <_Z10checkAccelv+0xce>
  {
    //Buzzer On
    if (!state.buzzerActivated)
   d6ad0:	4b13      	ldr	r3, [pc, #76]	; (d6b20 <_Z10checkAccelv+0x108>)
   d6ad2:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
   d6ad6:	b933      	cbnz	r3, d6ae6 <_Z10checkAccelv+0xce>
      digitalWrite(buzzer, HIGH);
   d6ad8:	4b10      	ldr	r3, [pc, #64]	; (d6b1c <_Z10checkAccelv+0x104>)
   d6ada:	2101      	movs	r1, #1
   d6adc:	8818      	ldrh	r0, [r3, #0]
  }

}
   d6ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if ((tamperCurrentAlert==true)||(currentAlert==true))
  {
    //Buzzer On
    if (!state.buzzerActivated)
      digitalWrite(buzzer, HIGH);
   d6ae2:	f005 b904 	b.w	dbcee <digitalWrite>
   d6ae6:	bd70      	pop	{r4, r5, r6, pc}
   d6ae8:	2003de6c 	.word	0x2003de6c
   d6aec:	2003de6d 	.word	0x2003de6d
   d6af0:	000e5be7 	.word	0x000e5be7
   d6af4:	2003da00 	.word	0x2003da00
   d6af8:	000e5c01 	.word	0x000e5c01
   d6afc:	000e5c14 	.word	0x000e5c14
   d6b00:	000e5c36 	.word	0x000e5c36
   d6b04:	2003dd48 	.word	0x2003dd48
   d6b08:	2003e154 	.word	0x2003e154
   d6b0c:	000e5c59 	.word	0x000e5c59
   d6b10:	000e5c6a 	.word	0x000e5c6a
   d6b14:	000e5c86 	.word	0x000e5c86
   d6b18:	2003deb0 	.word	0x2003deb0
   d6b1c:	2003d574 	.word	0x2003d574
   d6b20:	2003da38 	.word	0x2003da38

000d6b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:
        , state(CONNECTING)
    {}

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d6b24:	b570      	push	{r4, r5, r6, lr}
   d6b26:	4604      	mov	r4, r0
   d6b28:	6800      	ldr	r0, [r0, #0]
   d6b2a:	460e      	mov	r6, r1
   d6b2c:	f004 ff34 	bl	db998 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        state = CONNECTING;
   d6b30:	2300      	movs	r3, #0
   d6b32:	7763      	strb	r3, [r4, #29]
        millis_time_t started = BlynkMillis();
   d6b34:	f002 fbba 	bl	d92ac <_Z11BlynkMillisv>
   d6b38:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d6b3a:	7f63      	ldrb	r3, [r4, #29]
   d6b3c:	2b01      	cmp	r3, #1
   d6b3e:	d009      	beq.n	d6b54 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
   d6b40:	f002 fbb4 	bl	d92ac <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d6b44:	1b40      	subs	r0, r0, r5
   d6b46:	42b0      	cmp	r0, r6
   d6b48:	d204      	bcs.n	d6b54 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
        {
            run();
   d6b4a:	2100      	movs	r1, #0
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	f7ff f8f5 	bl	d5d3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d6b52:	e7f2      	b.n	d6b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
               (BlynkMillis() - started < timeout))
        {
            run();
        }
        return state == CONNECTED;
   d6b54:	7f60      	ldrb	r0, [r4, #29]
    }
   d6b56:	1e43      	subs	r3, r0, #1
   d6b58:	4258      	negs	r0, r3
   d6b5a:	4158      	adcs	r0, r3
   d6b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b60 <_Z21connectWithoutWaitingv>:
    DEBUG_PRINTLN("Blynk connected");
  }
}

void connectWithoutWaiting()
{
   d6b60:	b570      	push	{r4, r5, r6, lr}
  bool cellready=Cellular.ready();
   d6b62:	4c34      	ldr	r4, [pc, #208]	; (d6c34 <_Z21connectWithoutWaitingv+0xd4>)
   d6b64:	4620      	mov	r0, r4
   d6b66:	f7fe fc15 	bl	d5394 <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d6b6a:	4605      	mov	r5, r0
   d6b6c:	b9e0      	cbnz	r0, d6ba8 <_Z21connectWithoutWaitingv+0x48>
  {
    DEBUG_PRINTLN("Cellular not ready");
   d6b6e:	f004 fba7 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6b72:	4931      	ldr	r1, [pc, #196]	; (d6c38 <_Z21connectWithoutWaitingv+0xd8>)
   d6b74:	f003 fa0d 	bl	d9f92 <_ZN5Print7printlnEPKc>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b78:	462a      	mov	r2, r5
   d6b7a:	4629      	mov	r1, r5
   d6b7c:	6860      	ldr	r0, [r4, #4]
   d6b7e:	f002 fe59 	bl	d9834 <network_connecting>
    if (!Cellular.connecting())
   d6b82:	4605      	mov	r5, r0
   d6b84:	2800      	cmp	r0, #0
   d6b86:	d153      	bne.n	d6c30 <_Z21connectWithoutWaitingv+0xd0>
    {
      DEBUG_PRINTLN("Attempting to connect cellular...");
   d6b88:	f004 fb9a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6b8c:	492b      	ldr	r1, [pc, #172]	; (d6c3c <_Z21connectWithoutWaitingv+0xdc>)
   d6b8e:	f003 fa00 	bl	d9f92 <_ZN5Print7printlnEPKc>
      Cellular.on();
   d6b92:	4620      	mov	r0, r4
   d6b94:	f7fe fbf8 	bl	d5388 <_ZN5spark13CellularClass2onEv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b98:	462b      	mov	r3, r5
   d6b9a:	462a      	mov	r2, r5
   d6b9c:	4629      	mov	r1, r5
   d6b9e:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***//
  }


}  
   d6ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6ba4:	f002 be3e 	b.w	d9824 <network_connect>
   d6ba8:	4c25      	ldr	r4, [pc, #148]	; (d6c40 <_Z21connectWithoutWaitingv+0xe0>)
      Cellular.connect();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d6baa:	f004 fb89 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6bae:	4925      	ldr	r1, [pc, #148]	; (d6c44 <_Z21connectWithoutWaitingv+0xe4>)
   d6bb0:	f003 f9ef 	bl	d9f92 <_ZN5Print7printlnEPKc>
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d6bb4:	7f63      	ldrb	r3, [r4, #29]
   d6bb6:	2b01      	cmp	r3, #1
   d6bb8:	d01d      	beq.n	d6bf6 <_Z21connectWithoutWaitingv+0x96>
    {
      DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d6bba:	f004 fb81 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6bbe:	4922      	ldr	r1, [pc, #136]	; (d6c48 <_Z21connectWithoutWaitingv+0xe8>)
   d6bc0:	f003 f9e7 	bl	d9f92 <_ZN5Print7printlnEPKc>
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d6bc4:	4b21      	ldr	r3, [pc, #132]	; (d6c4c <_Z21connectWithoutWaitingv+0xec>)
   d6bc6:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d6bc8:	f002 fb70 	bl	d92ac <_Z11BlynkMillisv>
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d6bcc:	6823      	ldr	r3, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d6bce:	4a20      	ldr	r2, [pc, #128]	; (d6c50 <_Z21connectWithoutWaitingv+0xf0>)
   d6bd0:	635a      	str	r2, [r3, #52]	; 0x34
   d6bd2:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d6bd6:	3808      	subs	r0, #8
        port = p;
   d6bd8:	2250      	movs	r2, #80	; 0x50
   d6bda:	6120      	str	r0, [r4, #16]
   d6bdc:	60e0      	str	r0, [r4, #12]
   d6bde:	6160      	str	r0, [r4, #20]
   d6be0:	871a      	strh	r2, [r3, #56]	; 0x38
      Blynk.config(auth, "zeptosense.blynk.cc");
      if (!Blynk.connect())
   d6be2:	f242 3128 	movw	r1, #9000	; 0x2328
   d6be6:	4620      	mov	r0, r4
   d6be8:	f7ff ff9c 	bl	d6b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d6bec:	b940      	cbnz	r0, d6c00 <_Z21connectWithoutWaitingv+0xa0>
      {
        DEBUG_PRINTLN("Blynk not connected");
   d6bee:	f004 fb67 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6bf2:	4918      	ldr	r1, [pc, #96]	; (d6c54 <_Z21connectWithoutWaitingv+0xf4>)
   d6bf4:	e002      	b.n	d6bfc <_Z21connectWithoutWaitingv+0x9c>
      }
    }
    else
    {
      DEBUG_PRINTLN("Blynk connected");
   d6bf6:	f004 fb63 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6bfa:	4917      	ldr	r1, [pc, #92]	; (d6c58 <_Z21connectWithoutWaitingv+0xf8>)
   d6bfc:	f003 f9c9 	bl	d9f92 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c00:	f002 fe70 	bl	d98e4 <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***//
    bool partconnected=Particle.connected();
    if (!partconnected)
   d6c04:	b968      	cbnz	r0, d6c22 <_Z21connectWithoutWaitingv+0xc2>
    {
      DEBUG_PRINTLN("Attempting to connect to Particle...");
   d6c06:	f004 fb5b 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6c0a:	4914      	ldr	r1, [pc, #80]	; (d6c5c <_Z21connectWithoutWaitingv+0xfc>)
   d6c0c:	f003 f9c1 	bl	d9f92 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d6c10:	f002 fe60 	bl	d98d4 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6c14:	f002 fe66 	bl	d98e4 <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d6c18:	b950      	cbnz	r0, d6c30 <_Z21connectWithoutWaitingv+0xd0>
      {
        DEBUG_PRINTLN("Particle not connected");
   d6c1a:	f004 fb51 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6c1e:	4910      	ldr	r1, [pc, #64]	; (d6c60 <_Z21connectWithoutWaitingv+0x100>)
   d6c20:	e002      	b.n	d6c28 <_Z21connectWithoutWaitingv+0xc8>
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d6c22:	f004 fb4d 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6c26:	490f      	ldr	r1, [pc, #60]	; (d6c64 <_Z21connectWithoutWaitingv+0x104>)
    }
  //*** Commented out for testing without particle connected ***//
  }


}  
   d6c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DEBUG_PRINTLN("Particle not connected");
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d6c2c:	f003 b9b1 	b.w	d9f92 <_ZN5Print7printlnEPKc>
   d6c30:	bd70      	pop	{r4, r5, r6, pc}
   d6c32:	bf00      	nop
   d6c34:	2003e2a8 	.word	0x2003e2a8
   d6c38:	000e5a2a 	.word	0x000e5a2a
   d6c3c:	000e5ca3 	.word	0x000e5ca3
   d6c40:	2003e154 	.word	0x2003e154
   d6c44:	000e5cc5 	.word	0x000e5cc5
   d6c48:	000e5d23 	.word	0x000e5d23
   d6c4c:	2003d580 	.word	0x2003d580
   d6c50:	000e5d45 	.word	0x000e5d45
   d6c54:	000e5a3d 	.word	0x000e5a3d
   d6c58:	000e5d59 	.word	0x000e5d59
   d6c5c:	000e5cd4 	.word	0x000e5cd4
   d6c60:	000e5cf9 	.word	0x000e5cf9
   d6c64:	000e5d10 	.word	0x000e5d10

000d6c68 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d6c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c6c:	ed2d 8b02 	vpush	{d8}
   d6c70:	b0a0      	sub	sp, #128	; 0x80
  connectWithoutWaiting();
   d6c72:	f7ff ff75 	bl	d6b60 <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d6c76:	f003 fc4d 	bl	da514 <_ZN9TimeClass7isValidEv>
   d6c7a:	b328      	cbz	r0, d6cc8 <_Z11readSensorsv+0x60>
   d6c7c:	4b45      	ldr	r3, [pc, #276]	; (d6d94 <_Z11readSensorsv+0x12c>)
   d6c7e:	781a      	ldrb	r2, [r3, #0]
   d6c80:	461d      	mov	r5, r3
   d6c82:	bb0a      	cbnz	r2, d6cc8 <_Z11readSensorsv+0x60>
  {
    rtc.setUnixTime(Time.now());
   d6c84:	f003 fc67 	bl	da556 <_ZN9TimeClass3nowEv>
   d6c88:	4601      	mov	r1, r0
   d6c8a:	4843      	ldr	r0, [pc, #268]	; (d6d98 <_Z11readSensorsv+0x130>)
   d6c8c:	f001 fbec 	bl	d8468 <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d6c90:	f003 fc61 	bl	da556 <_ZN9TimeClass3nowEv>
   d6c94:	4604      	mov	r4, r0
   d6c96:	4840      	ldr	r0, [pc, #256]	; (d6d98 <_Z11readSensorsv+0x130>)
   d6c98:	f001 fc2f 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d6c9c:	4284      	cmp	r4, r0
   d6c9e:	f000 8430 	beq.w	d7502 <_Z11readSensorsv+0x89a>
   d6ca2:	f003 fc58 	bl	da556 <_ZN9TimeClass3nowEv>
   d6ca6:	4604      	mov	r4, r0
   d6ca8:	483b      	ldr	r0, [pc, #236]	; (d6d98 <_Z11readSensorsv+0x130>)
   d6caa:	f001 fc26 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d6cae:	1a20      	subs	r0, r4, r0
   d6cb0:	2809      	cmp	r0, #9
   d6cb2:	bf8c      	ite	hi
   d6cb4:	2000      	movhi	r0, #0
   d6cb6:	2001      	movls	r0, #1
   d6cb8:	b130      	cbz	r0, d6cc8 <_Z11readSensorsv+0x60>
    {
      timeSynced=true;
   d6cba:	2301      	movs	r3, #1
   d6cbc:	702b      	strb	r3, [r5, #0]
      DEBUG_PRINTLN("Time is sync'ed to the cloud");
   d6cbe:	f004 faff 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6cc2:	4936      	ldr	r1, [pc, #216]	; (d6d9c <_Z11readSensorsv+0x134>)
   d6cc4:	f003 f965 	bl	d9f92 <_ZN5Print7printlnEPKc>
    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d6cc8:	4b35      	ldr	r3, [pc, #212]	; (d6da0 <_Z11readSensorsv+0x138>)
   d6cca:	781b      	ldrb	r3, [r3, #0]
   d6ccc:	b90b      	cbnz	r3, d6cd2 <_Z11readSensorsv+0x6a>
  {
    publishGMTOffsetRequest();
   d6cce:	f7fe fd79 	bl	d57c4 <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d6cd2:	f7ff fea1 	bl	d6a18 <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d6cd6:	4833      	ldr	r0, [pc, #204]	; (d6da4 <_Z11readSensorsv+0x13c>)
   d6cd8:	4c32      	ldr	r4, [pc, #200]	; (d6da4 <_Z11readSensorsv+0x13c>)
   d6cda:	f002 f87c 	bl	d8dd6 <_ZN5SPS3013dataAvailableEv>
   d6cde:	2800      	cmp	r0, #0
   d6ce0:	f000 83bc 	beq.w	d745c <_Z11readSensorsv+0x7f4>
    Sensor.getMass(mass_concen);
   d6ce4:	4930      	ldr	r1, [pc, #192]	; (d6da8 <_Z11readSensorsv+0x140>)
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d6ce6:	4e31      	ldr	r6, [pc, #196]	; (d6dac <_Z11readSensorsv+0x144>)
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d6ce8:	4d31      	ldr	r5, [pc, #196]	; (d6db0 <_Z11readSensorsv+0x148>)
   d6cea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d6da8 <_Z11readSensorsv+0x140>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d6cee:	4620      	mov	r0, r4
   d6cf0:	f002 f98a 	bl	d9008 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d6cf4:	492f      	ldr	r1, [pc, #188]	; (d6db4 <_Z11readSensorsv+0x14c>)
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	f002 f99a 	bl	d9030 <_ZN5SPS306getNumEPf>

    DEBUG_PRINTLN("--Mass Concentration--");
   d6cfc:	f004 fae0 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6d00:	492d      	ldr	r1, [pc, #180]	; (d6db8 <_Z11readSensorsv+0x150>)
   d6d02:	f003 f946 	bl	d9f92 <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d6d06:	2300      	movs	r3, #0
   d6d08:	6033      	str	r3, [r6, #0]
   d6d0a:	4637      	mov	r7, r6
   d6d0c:	6833      	ldr	r3, [r6, #0]
   d6d0e:	f8df 909c 	ldr.w	r9, [pc, #156]	; d6dac <_Z11readSensorsv+0x144>
   d6d12:	2b03      	cmp	r3, #3
   d6d14:	dc17      	bgt.n	d6d46 <_Z11readSensorsv+0xde>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d6d16:	f004 fad3 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6d1a:	683b      	ldr	r3, [r7, #0]
   d6d1c:	f103 0a01 	add.w	sl, r3, #1
   d6d20:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   d6d24:	4681      	mov	r9, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6d26:	6818      	ldr	r0, [r3, #0]
   d6d28:	f00a fe5e 	bl	e19e8 <__aeabi_f2d>
   d6d2c:	e9cd 0100 	strd	r0, r1, [sp]
   d6d30:	4a22      	ldr	r2, [pc, #136]	; (d6dbc <_Z11readSensorsv+0x154>)
   d6d32:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
   d6d36:	2100      	movs	r1, #0
   d6d38:	4648      	mov	r0, r9
   d6d3a:	f003 fa51 	bl	da1e0 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d6d3e:	683b      	ldr	r3, [r7, #0]
   d6d40:	3301      	adds	r3, #1
   d6d42:	603b      	str	r3, [r7, #0]
   d6d44:	e7e2      	b.n	d6d0c <_Z11readSensorsv+0xa4>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d6d46:	f004 fabb 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6d4a:	491d      	ldr	r1, [pc, #116]	; (d6dc0 <_Z11readSensorsv+0x158>)
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d6d4c:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6db0 <_Z11readSensorsv+0x148>
    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d6d50:	f003 f91f 	bl	d9f92 <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d6d54:	2300      	movs	r3, #0
   d6d56:	f8c9 3000 	str.w	r3, [r9]
   d6d5a:	464d      	mov	r5, r9
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d6d5c:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6db4 <_Z11readSensorsv+0x14c>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d6d60:	6833      	ldr	r3, [r6, #0]
   d6d62:	2b04      	cmp	r3, #4
   d6d64:	dc2e      	bgt.n	d6dc4 <_Z11readSensorsv+0x15c>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d6d66:	f004 faab 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6d6a:	682f      	ldr	r7, [r5, #0]
   d6d6c:	eb09 0387 	add.w	r3, r9, r7, lsl #2
   d6d70:	4682      	mov	sl, r0
   d6d72:	6818      	ldr	r0, [r3, #0]
   d6d74:	f00a fe38 	bl	e19e8 <__aeabi_f2d>
   d6d78:	e9cd 0100 	strd	r0, r1, [sp]
   d6d7c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   d6d80:	4a0e      	ldr	r2, [pc, #56]	; (d6dbc <_Z11readSensorsv+0x154>)
   d6d82:	2100      	movs	r1, #0
   d6d84:	4650      	mov	r0, sl
   d6d86:	f003 fa2b 	bl	da1e0 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d6d8a:	682b      	ldr	r3, [r5, #0]
   d6d8c:	3301      	adds	r3, #1
   d6d8e:	602b      	str	r3, [r5, #0]
   d6d90:	e7e6      	b.n	d6d60 <_Z11readSensorsv+0xf8>
   d6d92:	bf00      	nop
   d6d94:	2003de55 	.word	0x2003de55
   d6d98:	2003d6c4 	.word	0x2003d6c4
   d6d9c:	000e5d69 	.word	0x000e5d69
   d6da0:	2003e174 	.word	0x2003e174
   d6da4:	2003e1b4 	.word	0x2003e1b4
   d6da8:	2003e100 	.word	0x2003e100
   d6dac:	2003de68 	.word	0x2003de68
   d6db0:	2003d560 	.word	0x2003d560
   d6db4:	2003e210 	.word	0x2003e210
   d6db8:	000e5d86 	.word	0x000e5d86
   d6dbc:	000e5d9d 	.word	0x000e5d9d
   d6dc0:	000e5da9 	.word	0x000e5da9
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d6dc4:	6860      	ldr	r0, [r4, #4]
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d6dc6:	4dbf      	ldr	r5, [pc, #764]	; (d70c4 <_Z11readSensorsv+0x45c>)
   d6dc8:	4fbf      	ldr	r7, [pc, #764]	; (d70c8 <_Z11readSensorsv+0x460>)
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d6dca:	f00a fe0d 	bl	e19e8 <__aeabi_f2d>
   d6dce:	4602      	mov	r2, r0
   d6dd0:	460b      	mov	r3, r1
   d6dd2:	a816      	add	r0, sp, #88	; 0x58
   d6dd4:	49bd      	ldr	r1, [pc, #756]	; (d70cc <_Z11readSensorsv+0x464>)
   d6dd6:	f003 f86b 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6dda:	a916      	add	r1, sp, #88	; 0x58
   d6ddc:	48bc      	ldr	r0, [pc, #752]	; (d70d0 <_Z11readSensorsv+0x468>)
   d6dde:	f002 ffa0 	bl	d9d22 <_ZN6StringaSEOS_>
   d6de2:	a816      	add	r0, sp, #88	; 0x58
   d6de4:	f002 ff0c 	bl	d9c00 <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d6de8:	68a0      	ldr	r0, [r4, #8]
   d6dea:	f00a fdfd 	bl	e19e8 <__aeabi_f2d>
   d6dee:	4602      	mov	r2, r0
   d6df0:	460b      	mov	r3, r1
   d6df2:	a816      	add	r0, sp, #88	; 0x58
   d6df4:	49b5      	ldr	r1, [pc, #724]	; (d70cc <_Z11readSensorsv+0x464>)
   d6df6:	f003 f85b 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6dfa:	a916      	add	r1, sp, #88	; 0x58
   d6dfc:	48b5      	ldr	r0, [pc, #724]	; (d70d4 <_Z11readSensorsv+0x46c>)
   d6dfe:	f002 ff90 	bl	d9d22 <_ZN6StringaSEOS_>
   d6e02:	a816      	add	r0, sp, #88	; 0x58
   d6e04:	f002 fefc 	bl	d9c00 <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d6e08:	68e0      	ldr	r0, [r4, #12]
   d6e0a:	f00a fded 	bl	e19e8 <__aeabi_f2d>
   d6e0e:	4602      	mov	r2, r0
   d6e10:	460b      	mov	r3, r1
   d6e12:	a816      	add	r0, sp, #88	; 0x58
   d6e14:	49ad      	ldr	r1, [pc, #692]	; (d70cc <_Z11readSensorsv+0x464>)
   d6e16:	f003 f84b 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6e1a:	a916      	add	r1, sp, #88	; 0x58
   d6e1c:	48ae      	ldr	r0, [pc, #696]	; (d70d8 <_Z11readSensorsv+0x470>)
   d6e1e:	f002 ff80 	bl	d9d22 <_ZN6StringaSEOS_>
   d6e22:	a816      	add	r0, sp, #88	; 0x58
   d6e24:	f002 feec 	bl	d9c00 <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d6e28:	6920      	ldr	r0, [r4, #16]
   d6e2a:	f00a fddd 	bl	e19e8 <__aeabi_f2d>
   d6e2e:	460b      	mov	r3, r1
   d6e30:	4602      	mov	r2, r0
   d6e32:	49a6      	ldr	r1, [pc, #664]	; (d70cc <_Z11readSensorsv+0x464>)
   d6e34:	a816      	add	r0, sp, #88	; 0x58
   d6e36:	f003 f83b 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6e3a:	a916      	add	r1, sp, #88	; 0x58
   d6e3c:	48a7      	ldr	r0, [pc, #668]	; (d70dc <_Z11readSensorsv+0x474>)
   d6e3e:	f002 ff70 	bl	d9d22 <_ZN6StringaSEOS_>
   d6e42:	a816      	add	r0, sp, #88	; 0x58
   d6e44:	f002 fedc 	bl	d9c00 <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d6e48:	4aa5      	ldr	r2, [pc, #660]	; (d70e0 <_Z11readSensorsv+0x478>)
   d6e4a:	48a6      	ldr	r0, [pc, #664]	; (d70e4 <_Z11readSensorsv+0x47c>)
   d6e4c:	2101      	movs	r1, #1
   d6e4e:	f001 f877 	bl	d7f40 <_ZN3ULP7getTempEiPc>
   d6e52:	ee07 0a90 	vmov	s15, r0
   d6e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6e5a:	edc5 7a00 	vstr	s15, [r5]
    
    DEBUG_PRINT("temp1: ");
   d6e5e:	f004 fa2f 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6e62:	49a1      	ldr	r1, [pc, #644]	; (d70e8 <_Z11readSensorsv+0x480>)
   d6e64:	f003 f882 	bl	d9f6c <_ZN5Print5printEPKc>
    DEBUG_PRINT(temp1);
   d6e68:	f004 fa2a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6e6c:	4604      	mov	r4, r0
   d6e6e:	6828      	ldr	r0, [r5, #0]
   d6e70:	f00a fdba 	bl	e19e8 <__aeabi_f2d>
   d6e74:	ec41 0b10 	vmov	d0, r0, r1
   d6e78:	2102      	movs	r1, #2
   d6e7a:	4620      	mov	r0, r4
   d6e7c:	f003 f9a2 	bl	da1c4 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d6e80:	f004 fa1e 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6e84:	f003 f879 	bl	d9f7a <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    DEBUG_PRINT("Vgas: ");
   d6e88:	f004 fa1a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6e8c:	4997      	ldr	r1, [pc, #604]	; (d70ec <_Z11readSensorsv+0x484>)
   d6e8e:	f003 f86d 	bl	d9f6c <_ZN5Print5printEPKc>
    DEBUG_PRINT(sensor1.getVgas(1));
   d6e92:	f004 fa15 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6e96:	2101      	movs	r1, #1
   d6e98:	4604      	mov	r4, r0
   d6e9a:	4892      	ldr	r0, [pc, #584]	; (d70e4 <_Z11readSensorsv+0x47c>)
   d6e9c:	f001 f904 	bl	d80a8 <_ZN3ULP7getVgasEi>
   d6ea0:	ee10 0a10 	vmov	r0, s0
   d6ea4:	f00a fda0 	bl	e19e8 <__aeabi_f2d>
   d6ea8:	ec41 0b10 	vmov	d0, r0, r1
   d6eac:	2102      	movs	r1, #2
   d6eae:	4620      	mov	r0, r4
   d6eb0:	f003 f988 	bl	da1c4 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d6eb4:	f004 fa04 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6eb8:	f003 f85f 	bl	d9f7a <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d6ebc:	f004 fa00 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6ec0:	498b      	ldr	r1, [pc, #556]	; (d70f0 <_Z11readSensorsv+0x488>)
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d6ec2:	4c8c      	ldr	r4, [pc, #560]	; (d70f4 <_Z11readSensorsv+0x48c>)
    DEBUG_PRINT("Vgas: ");
    DEBUG_PRINT(sensor1.getVgas(1));
    DEBUG_PRINTLN();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d6ec4:	f003 f852 	bl	d9f6c <_ZN5Print5printEPKc>
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d6ec8:	4a8b      	ldr	r2, [pc, #556]	; (d70f8 <_Z11readSensorsv+0x490>)
   d6eca:	4886      	ldr	r0, [pc, #536]	; (d70e4 <_Z11readSensorsv+0x47c>)
   d6ecc:	2101      	movs	r1, #1
   d6ece:	f001 f837 	bl	d7f40 <_ZN3ULP7getTempEiPc>
   d6ed2:	ee07 0a90 	vmov	s15, r0
   d6ed6:	2101      	movs	r1, #1
   d6ed8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d6edc:	4881      	ldr	r0, [pc, #516]	; (d70e4 <_Z11readSensorsv+0x47c>)
   d6ede:	f001 f923 	bl	d8128 <_ZN3ULP7getConcEif>
   d6ee2:	ed84 0a00 	vstr	s0, [r4]
    DEBUG_PRINTLN(conc);
   d6ee6:	f004 f9eb 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d6eea:	4606      	mov	r6, r0
   d6eec:	6820      	ldr	r0, [r4, #0]
   d6eee:	f00a fd7b 	bl	e19e8 <__aeabi_f2d>
   d6ef2:	ec41 0b10 	vmov	d0, r0, r1
   d6ef6:	2102      	movs	r1, #2
   d6ef8:	4630      	mov	r0, r6
   d6efa:	f003 f966 	bl	da1ca <_ZN5Print7printlnEdi>

    field5 = String::format("%0.1f", conc);
   d6efe:	6820      	ldr	r0, [r4, #0]
    CellularSignal sig = Cellular.RSSI();
    float batCharge = fuel.getSoC();
    field7 = String::format("%0.0f", batCharge);
    field8 = String::format("%d", sig.qual);

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d6f00:	4c7e      	ldr	r4, [pc, #504]	; (d70fc <_Z11readSensorsv+0x494>)
   d6f02:	4e7f      	ldr	r6, [pc, #508]	; (d7100 <_Z11readSensorsv+0x498>)
    DEBUG_PRINT("Conc: ");
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
    DEBUG_PRINTLN(conc);

    field5 = String::format("%0.1f", conc);
   d6f04:	f00a fd70 	bl	e19e8 <__aeabi_f2d>
   d6f08:	4602      	mov	r2, r0
   d6f0a:	460b      	mov	r3, r1
   d6f0c:	a816      	add	r0, sp, #88	; 0x58
   d6f0e:	496f      	ldr	r1, [pc, #444]	; (d70cc <_Z11readSensorsv+0x464>)
   d6f10:	f002 ffce 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6f14:	a916      	add	r1, sp, #88	; 0x58
   d6f16:	487b      	ldr	r0, [pc, #492]	; (d7104 <_Z11readSensorsv+0x49c>)
   d6f18:	f002 ff03 	bl	d9d22 <_ZN6StringaSEOS_>
   d6f1c:	a816      	add	r0, sp, #88	; 0x58
   d6f1e:	f002 fe6f 	bl	d9c00 <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d6f22:	6828      	ldr	r0, [r5, #0]
   d6f24:	4d78      	ldr	r5, [pc, #480]	; (d7108 <_Z11readSensorsv+0x4a0>)
   d6f26:	f00a fd5f 	bl	e19e8 <__aeabi_f2d>
   d6f2a:	4602      	mov	r2, r0
   d6f2c:	460b      	mov	r3, r1
   d6f2e:	a816      	add	r0, sp, #88	; 0x58
   d6f30:	4966      	ldr	r1, [pc, #408]	; (d70cc <_Z11readSensorsv+0x464>)
   d6f32:	f002 ffbd 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6f36:	a916      	add	r1, sp, #88	; 0x58
   d6f38:	4874      	ldr	r0, [pc, #464]	; (d710c <_Z11readSensorsv+0x4a4>)
   d6f3a:	f002 fef2 	bl	d9d22 <_ZN6StringaSEOS_>
   d6f3e:	a816      	add	r0, sp, #88	; 0x58
   d6f40:	f002 fe5e 	bl	d9c00 <_ZN6StringD1Ev>

    /////////

    CellularSignal sig = Cellular.RSSI();
   d6f44:	4972      	ldr	r1, [pc, #456]	; (d7110 <_Z11readSensorsv+0x4a8>)
   d6f46:	a816      	add	r0, sp, #88	; 0x58
   d6f48:	f004 f906 	bl	db158 <_ZN5spark13CellularClass4RSSIEv>
    float batCharge = fuel.getSoC();
   d6f4c:	4871      	ldr	r0, [pc, #452]	; (d7114 <_Z11readSensorsv+0x4ac>)
   d6f4e:	f003 fc4b 	bl	da7e8 <_ZN9FuelGauge6getSoCEv>
    field7 = String::format("%0.0f", batCharge);
   d6f52:	ee10 0a10 	vmov	r0, s0
    field6 = String::format("%0.1f", temp1);

    /////////

    CellularSignal sig = Cellular.RSSI();
    float batCharge = fuel.getSoC();
   d6f56:	eeb0 8a40 	vmov.f32	s16, s0
    field7 = String::format("%0.0f", batCharge);
   d6f5a:	f00a fd45 	bl	e19e8 <__aeabi_f2d>
   d6f5e:	460b      	mov	r3, r1
   d6f60:	4602      	mov	r2, r0
   d6f62:	496d      	ldr	r1, [pc, #436]	; (d7118 <_Z11readSensorsv+0x4b0>)
   d6f64:	a812      	add	r0, sp, #72	; 0x48
   d6f66:	f002 ffa3 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6f6a:	a912      	add	r1, sp, #72	; 0x48
   d6f6c:	486b      	ldr	r0, [pc, #428]	; (d711c <_Z11readSensorsv+0x4b4>)
   d6f6e:	f002 fed8 	bl	d9d22 <_ZN6StringaSEOS_>
   d6f72:	a812      	add	r0, sp, #72	; 0x48
   d6f74:	f002 fe44 	bl	d9c00 <_ZN6StringD1Ev>
    field8 = String::format("%d", sig.qual);
   d6f78:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d6f7a:	4969      	ldr	r1, [pc, #420]	; (d7120 <_Z11readSensorsv+0x4b8>)
   d6f7c:	a812      	add	r0, sp, #72	; 0x48
   d6f7e:	f002 ff97 	bl	d9eb0 <_ZN6String6formatEPKcz>
   d6f82:	a912      	add	r1, sp, #72	; 0x48
   d6f84:	4867      	ldr	r0, [pc, #412]	; (d7124 <_Z11readSensorsv+0x4bc>)
   d6f86:	f002 fecc 	bl	d9d22 <_ZN6StringaSEOS_>
   d6f8a:	a812      	add	r0, sp, #72	; 0x48
   d6f8c:	f002 fe38 	bl	d9c00 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6f90:	494f      	ldr	r1, [pc, #316]	; (d70d0 <_Z11readSensorsv+0x468>)
   d6f92:	a812      	add	r0, sp, #72	; 0x48
   d6f94:	f002 feba 	bl	d9d0c <_ZN6StringC1ERKS_>

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d6f98:	4963      	ldr	r1, [pc, #396]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6f9a:	a812      	add	r0, sp, #72	; 0x48
   d6f9c:	f002 ff22 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fa0:	494c      	ldr	r1, [pc, #304]	; (d70d4 <_Z11readSensorsv+0x46c>)
   d6fa2:	f002 ff13 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fa6:	4960      	ldr	r1, [pc, #384]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fa8:	f002 ff1c 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fac:	494a      	ldr	r1, [pc, #296]	; (d70d8 <_Z11readSensorsv+0x470>)
   d6fae:	f002 ff0d 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fb2:	495d      	ldr	r1, [pc, #372]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fb4:	f002 ff16 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fb8:	4948      	ldr	r1, [pc, #288]	; (d70dc <_Z11readSensorsv+0x474>)
   d6fba:	f002 ff07 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fbe:	495a      	ldr	r1, [pc, #360]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fc0:	f002 ff10 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fc4:	494f      	ldr	r1, [pc, #316]	; (d7104 <_Z11readSensorsv+0x49c>)
   d6fc6:	f002 ff01 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fca:	4957      	ldr	r1, [pc, #348]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fcc:	f002 ff0a 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fd0:	494e      	ldr	r1, [pc, #312]	; (d710c <_Z11readSensorsv+0x4a4>)
   d6fd2:	f002 fefb 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fd6:	4954      	ldr	r1, [pc, #336]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fd8:	f002 ff04 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fdc:	494f      	ldr	r1, [pc, #316]	; (d711c <_Z11readSensorsv+0x4b4>)
   d6fde:	f002 fef5 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fe2:	4951      	ldr	r1, [pc, #324]	; (d7128 <_Z11readSensorsv+0x4c0>)
   d6fe4:	f002 fefe 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d6fe8:	494e      	ldr	r1, [pc, #312]	; (d7124 <_Z11readSensorsv+0x4bc>)
   d6fea:	f002 feef 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d6fee:	4601      	mov	r1, r0
   d6ff0:	4620      	mov	r0, r4
   d6ff2:	f002 fe7c 	bl	d9cee <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6ff6:	a812      	add	r0, sp, #72	; 0x48
   d6ff8:	f002 fe02 	bl	d9c00 <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d6ffc:	4934      	ldr	r1, [pc, #208]	; (d70d0 <_Z11readSensorsv+0x468>)
   d6ffe:	a812      	add	r0, sp, #72	; 0x48
   d7000:	f002 fe84 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7004:	aa12      	add	r2, sp, #72	; 0x48
   d7006:	2101      	movs	r1, #1
   d7008:	4848      	ldr	r0, [pc, #288]	; (d712c <_Z11readSensorsv+0x4c4>)
   d700a:	f7ff f847 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d700e:	a812      	add	r0, sp, #72	; 0x48
   d7010:	f002 fdf6 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d7014:	492f      	ldr	r1, [pc, #188]	; (d70d4 <_Z11readSensorsv+0x46c>)
   d7016:	a812      	add	r0, sp, #72	; 0x48
   d7018:	f002 fe78 	bl	d9d0c <_ZN6StringC1ERKS_>
   d701c:	aa12      	add	r2, sp, #72	; 0x48
   d701e:	2102      	movs	r1, #2
   d7020:	4842      	ldr	r0, [pc, #264]	; (d712c <_Z11readSensorsv+0x4c4>)
   d7022:	f7ff f83b 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7026:	a812      	add	r0, sp, #72	; 0x48
   d7028:	f002 fdea 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d702c:	492a      	ldr	r1, [pc, #168]	; (d70d8 <_Z11readSensorsv+0x470>)
   d702e:	a812      	add	r0, sp, #72	; 0x48
   d7030:	f002 fe6c 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7034:	aa12      	add	r2, sp, #72	; 0x48
   d7036:	2103      	movs	r1, #3
   d7038:	483c      	ldr	r0, [pc, #240]	; (d712c <_Z11readSensorsv+0x4c4>)
   d703a:	f7ff f82f 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d703e:	a812      	add	r0, sp, #72	; 0x48
   d7040:	f002 fdde 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d7044:	4925      	ldr	r1, [pc, #148]	; (d70dc <_Z11readSensorsv+0x474>)
   d7046:	a812      	add	r0, sp, #72	; 0x48
   d7048:	f002 fe60 	bl	d9d0c <_ZN6StringC1ERKS_>
   d704c:	aa12      	add	r2, sp, #72	; 0x48
   d704e:	2104      	movs	r1, #4
   d7050:	4836      	ldr	r0, [pc, #216]	; (d712c <_Z11readSensorsv+0x4c4>)
   d7052:	f7ff f823 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7056:	a812      	add	r0, sp, #72	; 0x48
   d7058:	f002 fdd2 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d705c:	4929      	ldr	r1, [pc, #164]	; (d7104 <_Z11readSensorsv+0x49c>)
   d705e:	a812      	add	r0, sp, #72	; 0x48
   d7060:	f002 fe54 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7064:	aa12      	add	r2, sp, #72	; 0x48
   d7066:	2105      	movs	r1, #5
   d7068:	4830      	ldr	r0, [pc, #192]	; (d712c <_Z11readSensorsv+0x4c4>)
   d706a:	f7ff f817 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d706e:	a812      	add	r0, sp, #72	; 0x48
   d7070:	f002 fdc6 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d7074:	4925      	ldr	r1, [pc, #148]	; (d710c <_Z11readSensorsv+0x4a4>)
   d7076:	a812      	add	r0, sp, #72	; 0x48
   d7078:	f002 fe48 	bl	d9d0c <_ZN6StringC1ERKS_>
   d707c:	aa12      	add	r2, sp, #72	; 0x48
   d707e:	2106      	movs	r1, #6
   d7080:	482a      	ldr	r0, [pc, #168]	; (d712c <_Z11readSensorsv+0x4c4>)
   d7082:	f7ff f80b 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7086:	a812      	add	r0, sp, #72	; 0x48
   d7088:	f002 fdba 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d708c:	4923      	ldr	r1, [pc, #140]	; (d711c <_Z11readSensorsv+0x4b4>)
   d708e:	a812      	add	r0, sp, #72	; 0x48
   d7090:	f002 fe3c 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7094:	aa12      	add	r2, sp, #72	; 0x48
   d7096:	2107      	movs	r1, #7
   d7098:	4824      	ldr	r0, [pc, #144]	; (d712c <_Z11readSensorsv+0x4c4>)
   d709a:	f7fe ffff 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d709e:	a812      	add	r0, sp, #72	; 0x48
   d70a0:	f002 fdae 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d70a4:	491f      	ldr	r1, [pc, #124]	; (d7124 <_Z11readSensorsv+0x4bc>)
   d70a6:	a812      	add	r0, sp, #72	; 0x48
   d70a8:	f002 fe30 	bl	d9d0c <_ZN6StringC1ERKS_>
   d70ac:	aa12      	add	r2, sp, #72	; 0x48
   d70ae:	2108      	movs	r1, #8
   d70b0:	481e      	ldr	r0, [pc, #120]	; (d712c <_Z11readSensorsv+0x4c4>)
   d70b2:	f7fe fff3 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d70b6:	a812      	add	r0, sp, #72	; 0x48
   d70b8:	f002 fda2 	bl	d9c00 <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
   d70bc:	f004 f900 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d70c0:	6821      	ldr	r1, [r4, #0]
   d70c2:	e035      	b.n	d7130 <_Z11readSensorsv+0x4c8>
   d70c4:	2003e224 	.word	0x2003e224
   d70c8:	2003d9fe 	.word	0x2003d9fe
   d70cc:	000e5dc2 	.word	0x000e5dc2
   d70d0:	2003d738 	.word	0x2003d738
   d70d4:	2003d748 	.word	0x2003d748
   d70d8:	2003d758 	.word	0x2003d758
   d70dc:	2003d768 	.word	0x2003d768
   d70e0:	000e5dc8 	.word	0x000e5dc8
   d70e4:	2003de70 	.word	0x2003de70
   d70e8:	000e5dca 	.word	0x000e5dca
   d70ec:	000e5dd2 	.word	0x000e5dd2
   d70f0:	000e5dd9 	.word	0x000e5dd9
   d70f4:	2003e11c 	.word	0x2003e11c
   d70f8:	000e6191 	.word	0x000e6191
   d70fc:	2003de58 	.word	0x2003de58
   d7100:	2003deb0 	.word	0x2003deb0
   d7104:	2003d778 	.word	0x2003d778
   d7108:	2003de55 	.word	0x2003de55
   d710c:	2003e200 	.word	0x2003e200
   d7110:	2003e2a8 	.word	0x2003e2a8
   d7114:	2003deb4 	.word	0x2003deb4
   d7118:	000e5de0 	.word	0x000e5de0
   d711c:	2003d798 	.word	0x2003d798
   d7120:	000e69a0 	.word	0x000e69a0
   d7124:	2003d7a8 	.word	0x2003d7a8
   d7128:	000e5de6 	.word	0x000e5de6
   d712c:	2003e154 	.word	0x2003e154
   d7130:	f002 ff2f 	bl	d9f92 <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d7134:	4bac      	ldr	r3, [pc, #688]	; (d73e8 <_Z11readSensorsv+0x780>)
    String statusMessage;
   d7136:	49ad      	ldr	r1, [pc, #692]	; (d73ec <_Z11readSensorsv+0x784>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7138:	2401      	movs	r4, #1
    String statusMessage;
   d713a:	a802      	add	r0, sp, #8
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d713c:	701c      	strb	r4, [r3, #0]
    String statusMessage;
   d713e:	f002 fda6 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d7142:	48ab      	ldr	r0, [pc, #684]	; (d73f0 <_Z11readSensorsv+0x788>)
   d7144:	f7ff fafe 	bl	d6744 <_Z13runExpressionPc>
   d7148:	4602      	mov	r2, r0
   d714a:	2800      	cmp	r0, #0
   d714c:	f000 8082 	beq.w	d7254 <_Z11readSensorsv+0x5ec>
    {
      currentAlert = true;
      Blynk.virtualWrite(V0,1);
   d7150:	4622      	mov	r2, r4
   d7152:	2100      	movs	r1, #0
   d7154:	48a7      	ldr	r0, [pc, #668]	; (d73f4 <_Z11readSensorsv+0x78c>)
    sensorValid = true;
    String statusMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d7156:	7034      	strb	r4, [r6, #0]
      Blynk.virtualWrite(V0,1);
   d7158:	f7fe ff66 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,2);
   d715c:	2202      	movs	r2, #2
   d715e:	2109      	movs	r1, #9
   d7160:	48a4      	ldr	r0, [pc, #656]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d7162:	f7fe ff61 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d7166:	782b      	ldrb	r3, [r5, #0]
   d7168:	b31b      	cbz	r3, d71b2 <_Z11readSensorsv+0x54a>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d716a:	49a3      	ldr	r1, [pc, #652]	; (d73f8 <_Z11readSensorsv+0x790>)
   d716c:	a812      	add	r0, sp, #72	; 0x48
   d716e:	f002 fd8e 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
      {
        statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
   d7172:	48a2      	ldr	r0, [pc, #648]	; (d73fc <_Z11readSensorsv+0x794>)
   d7174:	f001 f9c1 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d7178:	4ba1      	ldr	r3, [pc, #644]	; (d7400 <_Z11readSensorsv+0x798>)
   d717a:	49a2      	ldr	r1, [pc, #648]	; (d7404 <_Z11readSensorsv+0x79c>)
   d717c:	681a      	ldr	r2, [r3, #0]
   d717e:	4ba2      	ldr	r3, [pc, #648]	; (d7408 <_Z11readSensorsv+0x7a0>)
   d7180:	4402      	add	r2, r0
   d7182:	a80e      	add	r0, sp, #56	; 0x38
   d7184:	f003 f994 	bl	da4b0 <_ZN9TimeClass6formatElPKc>
   d7188:	a90e      	add	r1, sp, #56	; 0x38
   d718a:	a812      	add	r0, sp, #72	; 0x48
   d718c:	f002 fe1e 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d7190:	499e      	ldr	r1, [pc, #632]	; (d740c <_Z11readSensorsv+0x7a4>)
   d7192:	f002 fe27 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d7196:	499e      	ldr	r1, [pc, #632]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d7198:	f002 fe18 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d719c:	499d      	ldr	r1, [pc, #628]	; (d7414 <_Z11readSensorsv+0x7ac>)
   d719e:	f002 fe21 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d71a2:	4601      	mov	r1, r0
   d71a4:	a802      	add	r0, sp, #8
   d71a6:	f002 fda2 	bl	d9cee <_ZN6StringaSERKS_>
   d71aa:	a80e      	add	r0, sp, #56	; 0x38
   d71ac:	f002 fd28 	bl	d9c00 <_ZN6StringD1Ev>
   d71b0:	e00e      	b.n	d71d0 <_Z11readSensorsv+0x568>
   d71b2:	4999      	ldr	r1, [pc, #612]	; (d7418 <_Z11readSensorsv+0x7b0>)
   d71b4:	a812      	add	r0, sp, #72	; 0x48
   d71b6:	f002 fd6a 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d71ba:	4995      	ldr	r1, [pc, #596]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d71bc:	a812      	add	r0, sp, #72	; 0x48
   d71be:	f002 fe05 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d71c2:	4994      	ldr	r1, [pc, #592]	; (d7414 <_Z11readSensorsv+0x7ac>)
   d71c4:	f002 fe0e 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d71c8:	4601      	mov	r1, r0
   d71ca:	a802      	add	r0, sp, #8
   d71cc:	f002 fd8f 	bl	d9cee <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d71d0:	a812      	add	r0, sp, #72	; 0x48
   d71d2:	f002 fd15 	bl	d9c00 <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d71d6:	a902      	add	r1, sp, #8
   d71d8:	a812      	add	r0, sp, #72	; 0x48
   d71da:	f002 fd97 	bl	d9d0c <_ZN6StringC1ERKS_>
   d71de:	aa12      	add	r2, sp, #72	; 0x48
   d71e0:	211e      	movs	r1, #30
   d71e2:	4884      	ldr	r0, [pc, #528]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d71e4:	f7fe ff5a 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d71e8:	a812      	add	r0, sp, #72	; 0x48
   d71ea:	f002 fd09 	bl	d9c00 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d71ee:	783b      	ldrb	r3, [r7, #0]
   d71f0:	2b00      	cmp	r3, #0
   d71f2:	f000 80b6 	beq.w	d7362 <_Z11readSensorsv+0x6fa>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d71f6:	f003 f9ae 	bl	da556 <_ZN9TimeClass3nowEv>
   d71fa:	4601      	mov	r1, r0
   d71fc:	a806      	add	r0, sp, #24
   d71fe:	f003 f8d7 	bl	da3b0 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7202:	a906      	add	r1, sp, #24
   d7204:	a80a      	add	r0, sp, #40	; 0x28
   d7206:	f002 fd81 	bl	d9d0c <_ZN6StringC1ERKS_>
   d720a:	4984      	ldr	r1, [pc, #528]	; (d741c <_Z11readSensorsv+0x7b4>)
   d720c:	a80a      	add	r0, sp, #40	; 0x28
   d720e:	f002 fde9 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d7212:	4b7b      	ldr	r3, [pc, #492]	; (d7400 <_Z11readSensorsv+0x798>)
   d7214:	220a      	movs	r2, #10
   d7216:	6819      	ldr	r1, [r3, #0]
   d7218:	4604      	mov	r4, r0
   d721a:	a80e      	add	r0, sp, #56	; 0x38
   d721c:	f002 fdac 	bl	d9d78 <_ZN6StringC1Eih>
   d7220:	a90e      	add	r1, sp, #56	; 0x38
   d7222:	4620      	mov	r0, r4
   d7224:	f002 fdd2 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7228:	4601      	mov	r1, r0
   d722a:	a812      	add	r0, sp, #72	; 0x48
   d722c:	f002 fd6e 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7230:	aa12      	add	r2, sp, #72	; 0x48
   d7232:	2115      	movs	r1, #21
   d7234:	486f      	ldr	r0, [pc, #444]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d7236:	f7ff f833 	bl	d62a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d723a:	a812      	add	r0, sp, #72	; 0x48
   d723c:	f002 fce0 	bl	d9c00 <_ZN6StringD1Ev>
   d7240:	a80e      	add	r0, sp, #56	; 0x38
   d7242:	f002 fcdd 	bl	d9c00 <_ZN6StringD1Ev>
   d7246:	a80a      	add	r0, sp, #40	; 0x28
   d7248:	f002 fcda 	bl	d9c00 <_ZN6StringD1Ev>
   d724c:	a806      	add	r0, sp, #24
   d724e:	f002 fcd7 	bl	d9c00 <_ZN6StringD1Ev>
   d7252:	e086      	b.n	d7362 <_Z11readSensorsv+0x6fa>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d7254:	4601      	mov	r1, r0
   d7256:	4867      	ldr	r0, [pc, #412]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d7258:	f7fe fee6 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,1);
   d725c:	2109      	movs	r1, #9
   d725e:	4622      	mov	r2, r4
   d7260:	4864      	ldr	r0, [pc, #400]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d7262:	f7fe fee1 	bl	d6028 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
     
      if (timeSynced)
   d7266:	782b      	ldrb	r3, [r5, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7268:	496d      	ldr	r1, [pc, #436]	; (d7420 <_Z11readSensorsv+0x7b8>)
   d726a:	b343      	cbz	r3, d72be <_Z11readSensorsv+0x656>
   d726c:	a80e      	add	r0, sp, #56	; 0x38
   d726e:	f002 fd4d 	bl	d9d0c <_ZN6StringC1ERKS_>
      {
        statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
   d7272:	4966      	ldr	r1, [pc, #408]	; (d740c <_Z11readSensorsv+0x7a4>)
   d7274:	a80e      	add	r0, sp, #56	; 0x38
   d7276:	f002 fdb5 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d727a:	4604      	mov	r4, r0
   d727c:	485f      	ldr	r0, [pc, #380]	; (d73fc <_Z11readSensorsv+0x794>)
   d727e:	f001 f93c 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d7282:	4b5f      	ldr	r3, [pc, #380]	; (d7400 <_Z11readSensorsv+0x798>)
   d7284:	495f      	ldr	r1, [pc, #380]	; (d7404 <_Z11readSensorsv+0x79c>)
   d7286:	681a      	ldr	r2, [r3, #0]
   d7288:	4b5f      	ldr	r3, [pc, #380]	; (d7408 <_Z11readSensorsv+0x7a0>)
   d728a:	4402      	add	r2, r0
   d728c:	a812      	add	r0, sp, #72	; 0x48
   d728e:	f003 f90f 	bl	da4b0 <_ZN9TimeClass6formatElPKc>
   d7292:	a912      	add	r1, sp, #72	; 0x48
   d7294:	4620      	mov	r0, r4
   d7296:	f002 fd99 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d729a:	495c      	ldr	r1, [pc, #368]	; (d740c <_Z11readSensorsv+0x7a4>)
   d729c:	f002 fda2 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d72a0:	495b      	ldr	r1, [pc, #364]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d72a2:	f002 fd93 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d72a6:	495b      	ldr	r1, [pc, #364]	; (d7414 <_Z11readSensorsv+0x7ac>)
   d72a8:	f002 fd9c 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d72ac:	4601      	mov	r1, r0
   d72ae:	a802      	add	r0, sp, #8
   d72b0:	f002 fd1d 	bl	d9cee <_ZN6StringaSERKS_>
   d72b4:	a812      	add	r0, sp, #72	; 0x48
   d72b6:	f002 fca3 	bl	d9c00 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d72ba:	a80e      	add	r0, sp, #56	; 0x38
   d72bc:	e011      	b.n	d72e2 <_Z11readSensorsv+0x67a>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d72be:	a812      	add	r0, sp, #72	; 0x48
   d72c0:	f002 fd24 	bl	d9d0c <_ZN6StringC1ERKS_>
      }
      else
      {
        statusMessage = StateString+"                "+field7+"%";
   d72c4:	4957      	ldr	r1, [pc, #348]	; (d7424 <_Z11readSensorsv+0x7bc>)
   d72c6:	a812      	add	r0, sp, #72	; 0x48
   d72c8:	f002 fd8c 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d72cc:	4950      	ldr	r1, [pc, #320]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d72ce:	f002 fd7d 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d72d2:	4950      	ldr	r1, [pc, #320]	; (d7414 <_Z11readSensorsv+0x7ac>)
   d72d4:	f002 fd86 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d72d8:	4601      	mov	r1, r0
   d72da:	a802      	add	r0, sp, #8
   d72dc:	f002 fd07 	bl	d9cee <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d72e0:	a812      	add	r0, sp, #72	; 0x48
   d72e2:	f002 fc8d 	bl	d9c00 <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d72e6:	a902      	add	r1, sp, #8
   d72e8:	a812      	add	r0, sp, #72	; 0x48
   d72ea:	f002 fd0f 	bl	d9d0c <_ZN6StringC1ERKS_>
   d72ee:	aa12      	add	r2, sp, #72	; 0x48
   d72f0:	211e      	movs	r1, #30
   d72f2:	4840      	ldr	r0, [pc, #256]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d72f4:	f7fe fed2 	bl	d609c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d72f8:	a812      	add	r0, sp, #72	; 0x48
   d72fa:	f002 fc81 	bl	d9c00 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d72fe:	783b      	ldrb	r3, [r7, #0]
   d7300:	b36b      	cbz	r3, d735e <_Z11readSensorsv+0x6f6>
   d7302:	f003 f928 	bl	da556 <_ZN9TimeClass3nowEv>
   d7306:	4601      	mov	r1, r0
   d7308:	a806      	add	r0, sp, #24
   d730a:	f003 f851 	bl	da3b0 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d730e:	a906      	add	r1, sp, #24
   d7310:	a80a      	add	r0, sp, #40	; 0x28
   d7312:	f002 fcfb 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7316:	4941      	ldr	r1, [pc, #260]	; (d741c <_Z11readSensorsv+0x7b4>)
   d7318:	a80a      	add	r0, sp, #40	; 0x28
   d731a:	f002 fd63 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d731e:	4b38      	ldr	r3, [pc, #224]	; (d7400 <_Z11readSensorsv+0x798>)
   d7320:	220a      	movs	r2, #10
   d7322:	6819      	ldr	r1, [r3, #0]
   d7324:	4604      	mov	r4, r0
   d7326:	a80e      	add	r0, sp, #56	; 0x38
   d7328:	f002 fd26 	bl	d9d78 <_ZN6StringC1Eih>
   d732c:	a90e      	add	r1, sp, #56	; 0x38
   d732e:	4620      	mov	r0, r4
   d7330:	f002 fd4c 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7334:	4601      	mov	r1, r0
   d7336:	a812      	add	r0, sp, #72	; 0x48
   d7338:	f002 fce8 	bl	d9d0c <_ZN6StringC1ERKS_>
   d733c:	aa12      	add	r2, sp, #72	; 0x48
   d733e:	2115      	movs	r1, #21
   d7340:	482c      	ldr	r0, [pc, #176]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d7342:	f7fe ffad 	bl	d62a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d7346:	a812      	add	r0, sp, #72	; 0x48
   d7348:	f002 fc5a 	bl	d9c00 <_ZN6StringD1Ev>
   d734c:	a80e      	add	r0, sp, #56	; 0x38
   d734e:	f002 fc57 	bl	d9c00 <_ZN6StringD1Ev>
   d7352:	a80a      	add	r0, sp, #40	; 0x28
   d7354:	f002 fc54 	bl	d9c00 <_ZN6StringD1Ev>
   d7358:	a806      	add	r0, sp, #24
   d735a:	f002 fc51 	bl	d9c00 <_ZN6StringD1Ev>
      currentAlert = false;
   d735e:	2300      	movs	r3, #0
   d7360:	7033      	strb	r3, [r6, #0]
    }
    
    if (alertChanged())
   d7362:	f7fe f9dd 	bl	d5720 <_Z12alertChangedv>
   d7366:	b150      	cbz	r0, d737e <_Z11readSensorsv+0x716>
    {
      if (currentAlert)
   d7368:	7833      	ldrb	r3, [r6, #0]
   d736a:	b113      	cbz	r3, d7372 <_Z11readSensorsv+0x70a>
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm", "{DEVICE_NAME} has alarmed!");
   d736c:	4b2e      	ldr	r3, [pc, #184]	; (d7428 <_Z11readSensorsv+0x7c0>)
   d736e:	4a2f      	ldr	r2, [pc, #188]	; (d742c <_Z11readSensorsv+0x7c4>)
   d7370:	e001      	b.n	d7376 <_Z11readSensorsv+0x70e>
      }
      else
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm ended", "{DEVICE_NAME} alarm ended.");
   d7372:	4b2f      	ldr	r3, [pc, #188]	; (d7430 <_Z11readSensorsv+0x7c8>)
   d7374:	4a2f      	ldr	r2, [pc, #188]	; (d7434 <_Z11readSensorsv+0x7cc>)
   d7376:	4930      	ldr	r1, [pc, #192]	; (d7438 <_Z11readSensorsv+0x7d0>)
   d7378:	481e      	ldr	r0, [pc, #120]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d737a:	f7ff fb27 	bl	d69cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      
    }

    if (batCharge<state.batThreshold)
   d737e:	4b2f      	ldr	r3, [pc, #188]	; (d743c <_Z11readSensorsv+0x7d4>)
   d7380:	4c2f      	ldr	r4, [pc, #188]	; (d7440 <_Z11readSensorsv+0x7d8>)
   d7382:	edd3 7a00 	vldr	s15, [r3]
   d7386:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d738a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d738e:	bf4c      	ite	mi
   d7390:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d7392:	2300      	movpl	r3, #0
   d7394:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d7396:	f7fe f9d7 	bl	d5748 <_Z15batAlertChangedv>
   d739a:	b308      	cbz	r0, d73e0 <_Z11readSensorsv+0x778>
    {
      if (batCurrentAlert)
   d739c:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d739e:	4929      	ldr	r1, [pc, #164]	; (d7444 <_Z11readSensorsv+0x7dc>)
   d73a0:	a812      	add	r0, sp, #72	; 0x48
   d73a2:	b15b      	cbz	r3, d73bc <_Z11readSensorsv+0x754>
   d73a4:	f002 fc73 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm", "{DEVICE_NAME} battery is "+field7+"%!");
   d73a8:	4919      	ldr	r1, [pc, #100]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d73aa:	a812      	add	r0, sp, #72	; 0x48
   d73ac:	f002 fd0e 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d73b0:	4925      	ldr	r1, [pc, #148]	; (d7448 <_Z11readSensorsv+0x7e0>)
   d73b2:	f002 fd17 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d73b6:	4a25      	ldr	r2, [pc, #148]	; (d744c <_Z11readSensorsv+0x7e4>)
   d73b8:	4603      	mov	r3, r0
   d73ba:	e00a      	b.n	d73d2 <_Z11readSensorsv+0x76a>
   d73bc:	f002 fc67 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm ended", "{DEVICE_NAME} battery is "+field7+"%.");
   d73c0:	4913      	ldr	r1, [pc, #76]	; (d7410 <_Z11readSensorsv+0x7a8>)
   d73c2:	a812      	add	r0, sp, #72	; 0x48
   d73c4:	f002 fd02 	bl	d9dcc <_ZplRK15StringSumHelperRK6String>
   d73c8:	4921      	ldr	r1, [pc, #132]	; (d7450 <_Z11readSensorsv+0x7e8>)
   d73ca:	f002 fd0b 	bl	d9de4 <_ZplRK15StringSumHelperPKc>
   d73ce:	4a21      	ldr	r2, [pc, #132]	; (d7454 <_Z11readSensorsv+0x7ec>)
   d73d0:	4603      	mov	r3, r0
   d73d2:	4808      	ldr	r0, [pc, #32]	; (d73f4 <_Z11readSensorsv+0x78c>)
   d73d4:	4920      	ldr	r1, [pc, #128]	; (d7458 <_Z11readSensorsv+0x7f0>)
   d73d6:	f7fe ff3d 	bl	d6254 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d73da:	a812      	add	r0, sp, #72	; 0x48
   d73dc:	f002 fc10 	bl	d9c00 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
   d73e0:	a802      	add	r0, sp, #8
   d73e2:	f002 fc0d 	bl	d9c00 <_ZN6StringD1Ev>
   d73e6:	e048      	b.n	d747a <_Z11readSensorsv+0x812>
   d73e8:	2003e120 	.word	0x2003e120
   d73ec:	000e5da8 	.word	0x000e5da8
   d73f0:	2003da48 	.word	0x2003da48
   d73f4:	2003e154 	.word	0x2003e154
   d73f8:	000e5de8 	.word	0x000e5de8
   d73fc:	2003d6c4 	.word	0x2003d6c4
   d7400:	2003d5a4 	.word	0x2003d5a4
   d7404:	2003e268 	.word	0x2003e268
   d7408:	000e5aac 	.word	0x000e5aac
   d740c:	000e5ac3 	.word	0x000e5ac3
   d7410:	2003d798 	.word	0x2003d798
   d7414:	000e5ab2 	.word	0x000e5ab2
   d7418:	000e5df0 	.word	0x000e5df0
   d741c:	000e5e04 	.word	0x000e5e04
   d7420:	2003d788 	.word	0x2003d788
   d7424:	000e5ab4 	.word	0x000e5ab4
   d7428:	000e5e06 	.word	0x000e5e06
   d742c:	000e5e21 	.word	0x000e5e21
   d7430:	000e5e37 	.word	0x000e5e37
   d7434:	000e5e52 	.word	0x000e5e52
   d7438:	2003db48 	.word	0x2003db48
   d743c:	2003de48 	.word	0x2003de48
   d7440:	2003de6e 	.word	0x2003de6e
   d7444:	000e5e6e 	.word	0x000e5e6e
   d7448:	000e5e88 	.word	0x000e5e88
   d744c:	000e5e8b 	.word	0x000e5e8b
   d7450:	000e5ead 	.word	0x000e5ead
   d7454:	000e5eb0 	.word	0x000e5eb0
   d7458:	2003dc48 	.word	0x2003dc48
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d745c:	4620      	mov	r0, r4
   d745e:	f001 fe48 	bl	d90f2 <_ZN5SPS3014beginMeasuringEv>
   d7462:	b950      	cbnz	r0, d747a <_Z11readSensorsv+0x812>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d7464:	f003 ff2c 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7468:	492a      	ldr	r1, [pc, #168]	; (d7514 <_Z11readSensorsv+0x8ac>)
   d746a:	f002 fd92 	bl	d9f92 <_ZN5Print7printlnEPKc>
      delay(1000);
   d746e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7472:	f003 f881 	bl	da578 <delay>
      // // MOTE: RTC CONTROL MUST BE SET TO Yes when operating
      // // If the device never wakes up then switch RTC CONTROL back to No
      // // reset the device and then after the device is running switch back to Yes
      // // within 10 seconds
      // timerSleep(10);
      System.reset();
   d7476:	f002 fb45 	bl	d9b04 <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d747a:	4b27      	ldr	r3, [pc, #156]	; (d7518 <_Z11readSensorsv+0x8b0>)
   d747c:	4c27      	ldr	r4, [pc, #156]	; (d751c <_Z11readSensorsv+0x8b4>)
   d747e:	781b      	ldrb	r3, [r3, #0]
   d7480:	b1f3      	cbz	r3, d74c0 <_Z11readSensorsv+0x858>
   d7482:	220a      	movs	r2, #10
   d7484:	6821      	ldr	r1, [r4, #0]
   d7486:	a80e      	add	r0, sp, #56	; 0x38
   d7488:	f002 fc76 	bl	d9d78 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d748c:	a90e      	add	r1, sp, #56	; 0x38
   d748e:	a812      	add	r0, sp, #72	; 0x48
   d7490:	f002 fc3c 	bl	d9d0c <_ZN6StringC1ERKS_>
   d7494:	4922      	ldr	r1, [pc, #136]	; (d7520 <_Z11readSensorsv+0x8b8>)
   d7496:	a812      	add	r0, sp, #72	; 0x48
   d7498:	f002 fca4 	bl	d9de4 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d749c:	4601      	mov	r1, r0
   d749e:	a816      	add	r0, sp, #88	; 0x58
   d74a0:	f002 fc34 	bl	d9d0c <_ZN6StringC1ERKS_>
   d74a4:	aa16      	add	r2, sp, #88	; 0x58
   d74a6:	2115      	movs	r1, #21
   d74a8:	481e      	ldr	r0, [pc, #120]	; (d7524 <_Z11readSensorsv+0x8bc>)
   d74aa:	f7fe fef9 	bl	d62a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d74ae:	a816      	add	r0, sp, #88	; 0x58
   d74b0:	f002 fba6 	bl	d9c00 <_ZN6StringD1Ev>
   d74b4:	a812      	add	r0, sp, #72	; 0x48
   d74b6:	f002 fba3 	bl	d9c00 <_ZN6StringD1Ev>
   d74ba:	a80e      	add	r0, sp, #56	; 0x38
   d74bc:	f002 fba0 	bl	d9c00 <_ZN6StringD1Ev>
  DEBUG_PRINT(millis());
   d74c0:	f003 fefe 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d74c4:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d74c6:	f001 ff9f 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
   d74ca:	220a      	movs	r2, #10
   d74cc:	4601      	mov	r1, r0
   d74ce:	4628      	mov	r0, r5
   d74d0:	f002 fd89 	bl	d9fe6 <_ZN5Print5printEmi>
  DEBUG_PRINT(": ");
   d74d4:	f003 fef4 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d74d8:	4913      	ldr	r1, [pc, #76]	; (d7528 <_Z11readSensorsv+0x8c0>)
   d74da:	f002 fd47 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(readingCount);
   d74de:	f003 feef 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d74e2:	220a      	movs	r2, #10
   d74e4:	6821      	ldr	r1, [r4, #0]
   d74e6:	f002 fdb1 	bl	da04c <_ZN5Print7printlnEii>
  DEBUG_PRINTLN();
   d74ea:	f003 fee9 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d74ee:	f002 fd44 	bl	d9f7a <_ZN5Print7printlnEv>
  readingCount++;
   d74f2:	6823      	ldr	r3, [r4, #0]
   d74f4:	3301      	adds	r3, #1
   d74f6:	6023      	str	r3, [r4, #0]
}
   d74f8:	b020      	add	sp, #128	; 0x80
   d74fa:	ecbd 8b02 	vpop	{d8}
   d74fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7502:	480a      	ldr	r0, [pc, #40]	; (d752c <_Z11readSensorsv+0x8c4>)
   d7504:	f000 fff9 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d7508:	4604      	mov	r4, r0
   d750a:	f003 f824 	bl	da556 <_ZN9TimeClass3nowEv>
   d750e:	f7ff bbce 	b.w	d6cae <_Z11readSensorsv+0x46>
   d7512:	bf00      	nop
   d7514:	000e5ed8 	.word	0x000e5ed8
   d7518:	2003d9fe 	.word	0x2003d9fe
   d751c:	2003e1f4 	.word	0x2003e1f4
   d7520:	000e5da7 	.word	0x000e5da7
   d7524:	2003e154 	.word	0x2003e154
   d7528:	000e675b 	.word	0x000e675b
   d752c:	2003d6c4 	.word	0x2003d6c4

000d7530 <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d7530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7534:	b08a      	sub	sp, #40	; 0x28
  Wire.setSpeed(20000);
   d7536:	f004 fc65 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d753a:	f644 6120 	movw	r1, #20000	; 0x4e20
   d753e:	f003 ff37 	bl	db3b0 <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d7542:	2103      	movs	r1, #3
   d7544:	2008      	movs	r0, #8
   d7546:	f004 fbc1 	bl	dbccc <pinMode>
  Serial.begin(115200);
   d754a:	f003 fd8b 	bl	db064 <_Z16_fetch_usbserialv>
   d754e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7552:	f003 fd7b 	bl	db04c <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d7556:	4cc0      	ldr	r4, [pc, #768]	; (d7858 <setup+0x328>)
   d7558:	4dc0      	ldr	r5, [pc, #768]	; (d785c <setup+0x32c>)
  Wire.setSpeed(20000);
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
  Serial.begin(115200);
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d755a:	f003 feb1 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d755e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7562:	f003 fea7 	bl	db2b4 <_ZN11USARTSerial5beginEm>
  delay(100);
   d7566:	2064      	movs	r0, #100	; 0x64
   d7568:	f003 f806 	bl	da578 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d756c:	2101      	movs	r1, #1
   d756e:	8820      	ldrh	r0, [r4, #0]
   d7570:	f004 fbac 	bl	dbccc <pinMode>
  digitalWrite(buzzer, LOW);
   d7574:	2100      	movs	r1, #0
   d7576:	8820      	ldrh	r0, [r4, #0]
   d7578:	f004 fbb9 	bl	dbcee <digitalWrite>

  Wire.begin();
   d757c:	f004 fc42 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d7580:	f003 ff1a 	bl	db3b8 <_ZN7TwoWire5beginEv>
  delay(100);
   d7584:	2064      	movs	r0, #100	; 0x64
   d7586:	f002 fff7 	bl	da578 <delay>
  // Need this to switch on the power
  power.begin();
   d758a:	48b5      	ldr	r0, [pc, #724]	; (d7860 <setup+0x330>)
   d758c:	f001 f896 	bl	d86bc <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d7590:	2201      	movs	r2, #1
   d7592:	2102      	movs	r1, #2
   d7594:	48b2      	ldr	r0, [pc, #712]	; (d7860 <setup+0x330>)
   d7596:	f001 f93b 	bl	d8810 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d759a:	2201      	movs	r2, #1
   d759c:	2103      	movs	r1, #3
   d759e:	48b0      	ldr	r0, [pc, #704]	; (d7860 <setup+0x330>)
   d75a0:	f001 f936 	bl	d8810 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d75a4:	2064      	movs	r0, #100	; 0x64
   d75a6:	f002 ffe7 	bl	da578 <delay>

  uint32_t d1=0;
   d75aa:	aa0a      	add	r2, sp, #40	; 0x28
   d75ac:	2100      	movs	r1, #0
   d75ae:	f842 1d1c 	str.w	r1, [r2, #-28]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d75b2:	2304      	movs	r3, #4
   d75b4:	48ab      	ldr	r0, [pc, #684]	; (d7864 <setup+0x334>)
   d75b6:	f000 ffe5 	bl	d8584 <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d75ba:	f003 fe81 	bl	db2c0 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d75be:	9b03      	ldr	r3, [sp, #12]
   d75c0:	4aa9      	ldr	r2, [pc, #676]	; (d7868 <setup+0x338>)
   d75c2:	2101      	movs	r1, #1
   d75c4:	f002 fe0c 	bl	da1e0 <_ZN5Print11printf_implEbPKcz>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d75c8:	4ba8      	ldr	r3, [pc, #672]	; (d786c <setup+0x33c>)
   d75ca:	781e      	ldrb	r6, [r3, #0]
   d75cc:	b986      	cbnz	r6, d75f0 <setup+0xc0>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d75ce:	a80a      	add	r0, sp, #40	; 0x28
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d75d0:	2201      	movs	r2, #1
   d75d2:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d75d4:	f840 6d10 	str.w	r6, [r0, #-16]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d75d8:	4632      	mov	r2, r6
   d75da:	4631      	mov	r1, r6
   d75dc:	f001 ff34 	bl	d9448 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d75e0:	9b06      	ldr	r3, [sp, #24]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d75e2:	2b1e      	cmp	r3, #30
   d75e4:	d104      	bne.n	d75f0 <setup+0xc0>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d75e6:	2303      	movs	r3, #3
   d75e8:	702b      	strb	r3, [r5, #0]
   d75ea:	2308      	movs	r3, #8
   d75ec:	806e      	strh	r6, [r5, #2]
   d75ee:	80ab      	strh	r3, [r5, #4]
            }
        }
        return sleepResult_;
   d75f0:	6828      	ldr	r0, [r5, #0]
   d75f2:	88ab      	ldrh	r3, [r5, #4]
   d75f4:	9004      	str	r0, [sp, #16]
  // delay(1000);
  // // deepSleep();
  // // delay(10000);

  SleepResult result = System.sleepResult();
  switch (result.reason()) {
   d75f6:	a804      	add	r0, sp, #16
   d75f8:	f8ad 3014 	strh.w	r3, [sp, #20]
   d75fc:	f002 fa9e 	bl	d9b3c <_ZNK11SleepResult6reasonEv>
   d7600:	2803      	cmp	r0, #3
   d7602:	d814      	bhi.n	d762e <setup+0xfe>
   d7604:	e8df f000 	tbb	[pc, r0]
   d7608:	0e0a0602 	.word	0x0e0a0602
    case WAKEUP_REASON_NONE: {
      DEBUG_PRINTLN("Boron did not wake up from Particle sleep");
   d760c:	f003 fe58 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7610:	4997      	ldr	r1, [pc, #604]	; (d7870 <setup+0x340>)
   d7612:	e00a      	b.n	d762a <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_PIN: {
      DEBUG_PRINTLN("Boron was woken up by a pin");
   d7614:	f003 fe54 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7618:	4996      	ldr	r1, [pc, #600]	; (d7874 <setup+0x344>)
   d761a:	e006      	b.n	d762a <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Boron was woken up by the Particle RTC (after a specified number of seconds)");
   d761c:	f003 fe50 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7620:	4995      	ldr	r1, [pc, #596]	; (d7878 <setup+0x348>)
   d7622:	e002      	b.n	d762a <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Boron was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
   d7624:	f003 fe4c 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7628:	4994      	ldr	r1, [pc, #592]	; (d787c <setup+0x34c>)
   d762a:	f002 fcb2 	bl	d9f92 <_ZN5Print7printlnEPKc>
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d762e:	f003 fe47 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7632:	4993      	ldr	r1, [pc, #588]	; (d7880 <setup+0x350>)
   d7634:	f8df 8254 	ldr.w	r8, [pc, #596]	; d788c <setup+0x35c>

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d7638:	4f92      	ldr	r7, [pc, #584]	; (d7884 <setup+0x354>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Boron was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d763a:	f002 fcaa 	bl	d9f92 <_ZN5Print7printlnEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d763e:	4b91      	ldr	r3, [pc, #580]	; (d7884 <setup+0x354>)
   d7640:	4991      	ldr	r1, [pc, #580]	; (d7888 <setup+0x358>)
   d7642:	4892      	ldr	r0, [pc, #584]	; (d788c <setup+0x35c>)
   d7644:	2207      	movs	r2, #7
   d7646:	f7fd ff11 	bl	d546c <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d764a:	2500      	movs	r5, #0
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d764c:	4606      	mov	r6, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
   d764e:	f003 fe37 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7652:	012b      	lsls	r3, r5, #4
   d7654:	f853 1008 	ldr.w	r1, [r3, r8]
   d7658:	f002 fc88 	bl	d9f6c <_ZN5Print5printEPKc>
    DEBUG_PRINT(": ");
   d765c:	f003 fe30 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7660:	498b      	ldr	r1, [pc, #556]	; (d7890 <setup+0x360>)
   d7662:	f002 fc83 	bl	d9f6c <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(i2cExists[x]);
   d7666:	f003 fe2b 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d766a:	5d79      	ldrb	r1, [r7, r5]
   d766c:	220a      	movs	r2, #10
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d766e:	3501      	adds	r5, #1
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d7670:	f002 fcec 	bl	da04c <_ZN5Print7printlnEii>
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d7674:	2d07      	cmp	r5, #7
   d7676:	d1ea      	bne.n	d764e <setup+0x11e>
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
  }
  if (!i2cOK)
   d7678:	bb2e      	cbnz	r6, d76c6 <setup+0x196>
  {
    StateString = "ERROR";
   d767a:	4986      	ldr	r1, [pc, #536]	; (d7894 <setup+0x364>)
   d767c:	4886      	ldr	r0, [pc, #536]	; (d7898 <setup+0x368>)
   d767e:	f002 fb58 	bl	d9d32 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C Issue");
   d7682:	f003 fe1d 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7686:	4985      	ldr	r1, [pc, #532]	; (d789c <setup+0x36c>)
   d7688:	f002 fc83 	bl	d9f92 <_ZN5Print7printlnEPKc>
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d768c:	2101      	movs	r1, #1
   d768e:	8820      	ldrh	r0, [r4, #0]
   d7690:	f004 fb2d 	bl	dbcee <digitalWrite>
    delay(100);
   d7694:	2064      	movs	r0, #100	; 0x64
   d7696:	f002 ff6f 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d769a:	4631      	mov	r1, r6
   d769c:	8820      	ldrh	r0, [r4, #0]
   d769e:	f004 fb26 	bl	dbcee <digitalWrite>
    #endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d76a2:	f004 fbaf 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d76a6:	f003 feb9 	bl	db41c <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d76aa:	f004 fbab 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d76ae:	f003 feb1 	bl	db414 <_ZN7TwoWire9isEnabledEv>
   d76b2:	b918      	cbnz	r0, d76bc <setup+0x18c>
      Wire.begin();
   d76b4:	f004 fba6 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d76b8:	f003 fe7e 	bl	db3b8 <_ZN7TwoWire5beginEv>
    // rtc.publishAlarm0Debug(); 
    // power.begin();
    // power.setPowerON(EXT3V3,false);
    // power.setPowerON(EXT5V,false);

    Wire.end();
   d76bc:	f004 fba2 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d76c0:	f003 fe80 	bl	db3c4 <_ZN7TwoWire3endEv>
   d76c4:	e02f      	b.n	d7726 <setup+0x1f6>
    // Wire.end();
// deepSleep();
  }
  else
  {
    StateString = "READY";
   d76c6:	4976      	ldr	r1, [pc, #472]	; (d78a0 <setup+0x370>)
   d76c8:	4873      	ldr	r0, [pc, #460]	; (d7898 <setup+0x368>)
   d76ca:	f002 fb32 	bl	d9d32 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C OK");
   d76ce:	f003 fdf7 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d76d2:	4974      	ldr	r1, [pc, #464]	; (d78a4 <setup+0x374>)
   d76d4:	f002 fc5d 	bl	d9f92 <_ZN5Print7printlnEPKc>
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d76d8:	2101      	movs	r1, #1
   d76da:	8820      	ldrh	r0, [r4, #0]
   d76dc:	f004 fb07 	bl	dbcee <digitalWrite>
    delay(5);
   d76e0:	2005      	movs	r0, #5
   d76e2:	f002 ff49 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d76e6:	2100      	movs	r1, #0
   d76e8:	8820      	ldrh	r0, [r4, #0]
   d76ea:	f004 fb00 	bl	dbcee <digitalWrite>
    delay(200);  
   d76ee:	20c8      	movs	r0, #200	; 0xc8
   d76f0:	f002 ff42 	bl	da578 <delay>
    digitalWrite(buzzer, HIGH);
   d76f4:	2101      	movs	r1, #1
   d76f6:	8820      	ldrh	r0, [r4, #0]
   d76f8:	f004 faf9 	bl	dbcee <digitalWrite>
    delay(5);
   d76fc:	2005      	movs	r0, #5
   d76fe:	f002 ff3b 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d7702:	2100      	movs	r1, #0
   d7704:	8820      	ldrh	r0, [r4, #0]
   d7706:	f004 faf2 	bl	dbcee <digitalWrite>
    delay(200);  
   d770a:	20c8      	movs	r0, #200	; 0xc8
   d770c:	f002 ff34 	bl	da578 <delay>
    digitalWrite(buzzer, HIGH);
   d7710:	2101      	movs	r1, #1
   d7712:	8820      	ldrh	r0, [r4, #0]
   d7714:	f004 faeb 	bl	dbcee <digitalWrite>
    delay(5);
   d7718:	2005      	movs	r0, #5
   d771a:	f002 ff2d 	bl	da578 <delay>
    digitalWrite(buzzer, LOW);
   d771e:	2100      	movs	r1, #0
   d7720:	8820      	ldrh	r0, [r4, #0]
   d7722:	f004 fae4 	bl	dbcee <digitalWrite>
    #endif
  }
  delay(200);
   d7726:	20c8      	movs	r0, #200	; 0xc8
   d7728:	f002 ff26 	bl	da578 <delay>
  if (!i2cOK)
   d772c:	b90e      	cbnz	r6, d7732 <setup+0x202>
  {
    System.reset();
   d772e:	f002 f9e9 	bl	d9b04 <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d7732:	485d      	ldr	r0, [pc, #372]	; (d78a8 <setup+0x378>)
  DEBUG_PRINTLN("Before");
  DEBUG_PRINT(clockTime);
  DEBUG_PRINTLN(": ");
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7734:	4d5d      	ldr	r5, [pc, #372]	; (d78ac <setup+0x37c>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d7736:	f000 fee0 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d773a:	4604      	mov	r4, r0
  DEBUG_PRINTLN("Before");
   d773c:	f003 fdc0 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7740:	495b      	ldr	r1, [pc, #364]	; (d78b0 <setup+0x380>)
   d7742:	f002 fc26 	bl	d9f92 <_ZN5Print7printlnEPKc>
  DEBUG_PRINT(clockTime);
   d7746:	f003 fdbb 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d774a:	220a      	movs	r2, #10
   d774c:	4621      	mov	r1, r4
   d774e:	f002 fc59 	bl	da004 <_ZN5Print5printEli>
  DEBUG_PRINTLN(": ");
   d7752:	f003 fdb5 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7756:	494e      	ldr	r1, [pc, #312]	; (d7890 <setup+0x360>)
   d7758:	f002 fc1b 	bl	d9f92 <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d775c:	f003 fdb0 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7760:	682b      	ldr	r3, [r5, #0]
   d7762:	4954      	ldr	r1, [pc, #336]	; (d78b4 <setup+0x384>)
   d7764:	4622      	mov	r2, r4
   d7766:	4606      	mov	r6, r0
   d7768:	a806      	add	r0, sp, #24
   d776a:	f002 fea1 	bl	da4b0 <_ZN9TimeClass6formatElPKc>
   d776e:	9906      	ldr	r1, [sp, #24]
   d7770:	4630      	mov	r0, r6
   d7772:	f002 fc0e 	bl	d9f92 <_ZN5Print7printlnEPKc>
   d7776:	a806      	add	r0, sp, #24
   d7778:	f002 fa42 	bl	d9c00 <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d777c:	4b4e      	ldr	r3, [pc, #312]	; (d78b8 <setup+0x388>)
   d777e:	429c      	cmp	r4, r3
   d7780:	dc27      	bgt.n	d77d2 <setup+0x2a2>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d7782:	494e      	ldr	r1, [pc, #312]	; (d78bc <setup+0x38c>)
   d7784:	4848      	ldr	r0, [pc, #288]	; (d78a8 <setup+0x378>)
   d7786:	f000 fe6f 	bl	d8468 <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d778a:	4847      	ldr	r0, [pc, #284]	; (d78a8 <setup+0x378>)
   d778c:	f000 feb5 	bl	d84fa <_ZN8MCP7941x6rtcNowEv>
   d7790:	4604      	mov	r4, r0
    DEBUG_PRINTLN("After");
   d7792:	f003 fd95 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7796:	494a      	ldr	r1, [pc, #296]	; (d78c0 <setup+0x390>)
   d7798:	f002 fbfb 	bl	d9f92 <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d779c:	f003 fd90 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d77a0:	220a      	movs	r2, #10
   d77a2:	4621      	mov	r1, r4
   d77a4:	f002 fc2e 	bl	da004 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d77a8:	f003 fd8a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d77ac:	4938      	ldr	r1, [pc, #224]	; (d7890 <setup+0x360>)
   d77ae:	f002 fbf0 	bl	d9f92 <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d77b2:	f003 fd85 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d77b6:	682b      	ldr	r3, [r5, #0]
   d77b8:	493e      	ldr	r1, [pc, #248]	; (d78b4 <setup+0x384>)
   d77ba:	4606      	mov	r6, r0
   d77bc:	4622      	mov	r2, r4
   d77be:	a806      	add	r0, sp, #24
   d77c0:	f002 fe76 	bl	da4b0 <_ZN9TimeClass6formatElPKc>
   d77c4:	9906      	ldr	r1, [sp, #24]
   d77c6:	4630      	mov	r0, r6
   d77c8:	f002 fbe3 	bl	d9f92 <_ZN5Print7printlnEPKc>
   d77cc:	a806      	add	r0, sp, #24
   d77ce:	f002 fa17 	bl	d9c00 <_ZN6StringD1Ev>
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d77d2:	f004 fb17 	bl	dbe04 <_Z19__fetch_global_Wirev>
  }
  // initializeAlarm();
  // rtc.publishAlarm0Debug(); 

  Sensor.begin();
   d77d6:	4601      	mov	r1, r0
   d77d8:	483a      	ldr	r0, [pc, #232]	; (d78c4 <setup+0x394>)

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d77da:	4c3b      	ldr	r4, [pc, #236]	; (d78c8 <setup+0x398>)
   d77dc:	4d3b      	ldr	r5, [pc, #236]	; (d78cc <setup+0x39c>)
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
  }
  // initializeAlarm();
  // rtc.publishAlarm0Debug(); 

  Sensor.begin();
   d77de:	f001 fc8d 	bl	d90fc <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d77e2:	483b      	ldr	r0, [pc, #236]	; (d78d0 <setup+0x3a0>)
   d77e4:	f001 f8bd 	bl	d8962 <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d77e8:	f7fd fee2 	bl	d55b0 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d77ec:	4b39      	ldr	r3, [pc, #228]	; (d78d4 <setup+0x3a4>)
   d77ee:	6822      	ldr	r2, [r4, #0]
   d77f0:	681b      	ldr	r3, [r3, #0]
   d77f2:	429a      	cmp	r2, r3
   d77f4:	d07a      	beq.n	d78ec <setup+0x3bc>
  {
    // Then this is the first time running so set defaults
    state.firstRunCheck = firstRunValue;
   d77f6:	6023      	str	r3, [r4, #0]
    state.numberOfReadings = 24;
   d77f8:	2318      	movs	r3, #24
   d77fa:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d77fc:	2305      	movs	r3, #5
   d77fe:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d7800:	4935      	ldr	r1, [pc, #212]	; (d78d8 <setup+0x3a8>)
  {
    // Then this is the first time running so set defaults
    state.firstRunCheck = firstRunValue;
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d7802:	4b36      	ldr	r3, [pc, #216]	; (d78dc <setup+0x3ac>)
   d7804:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d7806:	f104 0010 	add.w	r0, r4, #16
   d780a:	f00b f86f 	bl	e28ec <strcpy>
    strcpy(state.email,"robert@sentientthings.com");
   d780e:	4934      	ldr	r1, [pc, #208]	; (d78e0 <setup+0x3b0>)
   d7810:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d7814:	f00b f86a 	bl	e28ec <strcpy>
    strcpy(state.batEmail,"robert@sentientthings.com");
   d7818:	4931      	ldr	r1, [pc, #196]	; (d78e0 <setup+0x3b0>)
   d781a:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d781e:	f00b f865 	bl	e28ec <strcpy>
    strcpy(state.tamperEmail,"robert@sentientthings.com");
   d7822:	492f      	ldr	r1, [pc, #188]	; (d78e0 <setup+0x3b0>)
   d7824:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d7828:	f00b f860 	bl	e28ec <strcpy>
    state.batThreshold = 10.0;
   d782c:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d7830:	4a2c      	ldr	r2, [pc, #176]	; (d78e4 <setup+0x3b4>)
   d7832:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
   d7834:	2300      	movs	r3, #0
   d7836:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d783a:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    firstRun = true;
   d783e:	2301      	movs	r3, #1
   d7840:	702b      	strb	r3, [r5, #0]
    state.deviceZone=1; //America/New_York
   d7842:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
    // Save state
    saveState();
   d7846:	f7fd fea7 	bl	d5598 <_Z9saveStatev>
    DEBUG_PRINTLN("First run.");
   d784a:	f003 fd39 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d784e:	4926      	ldr	r1, [pc, #152]	; (d78e8 <setup+0x3b8>)
   d7850:	f002 fb9f 	bl	d9f92 <_ZN5Print7printlnEPKc>
   d7854:	e051      	b.n	d78fa <setup+0x3ca>
   d7856:	bf00      	nop
   d7858:	2003d574 	.word	0x2003d574
   d785c:	2003e234 	.word	0x2003e234
   d7860:	2003de54 	.word	0x2003de54
   d7864:	2003d6b8 	.word	0x2003d6b8
   d7868:	000e5f00 	.word	0x000e5f00
   d786c:	2003d6b4 	.word	0x2003d6b4
   d7870:	000e5f06 	.word	0x000e5f06
   d7874:	000e5f30 	.word	0x000e5f30
   d7878:	000e5f4c 	.word	0x000e5f4c
   d787c:	000e5f99 	.word	0x000e5f99
   d7880:	000e5ff6 	.word	0x000e5ff6
   d7884:	2003e1f8 	.word	0x2003e1f8
   d7888:	2003d5a8 	.word	0x2003d5a8
   d788c:	2003d6c8 	.word	0x2003d6c8
   d7890:	000e675b 	.word	0x000e675b
   d7894:	000e600e 	.word	0x000e600e
   d7898:	2003d788 	.word	0x2003d788
   d789c:	000e6014 	.word	0x000e6014
   d78a0:	000e601e 	.word	0x000e601e
   d78a4:	000e6024 	.word	0x000e6024
   d78a8:	2003d6c4 	.word	0x2003d6c4
   d78ac:	2003d5b8 	.word	0x2003d5b8
   d78b0:	000e602b 	.word	0x000e602b
   d78b4:	2003e268 	.word	0x2003e268
   d78b8:	386d437f 	.word	0x386d437f
   d78bc:	4b3d3b00 	.word	0x4b3d3b00
   d78c0:	000e6032 	.word	0x000e6032
   d78c4:	2003e1b4 	.word	0x2003e1b4
   d78c8:	2003da38 	.word	0x2003da38
   d78cc:	2003d9fc 	.word	0x2003d9fc
   d78d0:	2003da00 	.word	0x2003da00
   d78d4:	2003d578 	.word	0x2003d578
   d78d8:	000e6038 	.word	0x000e6038
   d78dc:	c31c0000 	.word	0xc31c0000
   d78e0:	000e6070 	.word	0x000e6070
   d78e4:	41200000 	.word	0x41200000
   d78e8:	000e608a 	.word	0x000e608a
  }
  else
  {
    DEBUG_PRINTLN("Not first run.");
   d78ec:	f003 fce8 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d78f0:	4987      	ldr	r1, [pc, #540]	; (d7b10 <setup+0x5e0>)
   d78f2:	f002 fb4e 	bl	d9f92 <_ZN5Print7printlnEPKc>
    firstRun =false;
   d78f6:	2300      	movs	r3, #0
   d78f8:	702b      	strb	r3, [r5, #0]
  }


/////////////
// Setup ADXL345
  DEBUG_PRINT("ADXL345 Setup");
   d78fa:	f003 fce1 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d78fe:	4985      	ldr	r1, [pc, #532]	; (d7b14 <setup+0x5e4>)
   d7900:	f002 fb34 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN();
   d7904:	f003 fcdc 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7908:	f002 fb37 	bl	d9f7a <_ZN5Print7printlnEv>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d790c:	4882      	ldr	r0, [pc, #520]	; (d7b18 <setup+0x5e8>)
   d790e:	f001 f828 	bl	d8962 <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d7912:	2104      	movs	r1, #4
   d7914:	4880      	ldr	r0, [pc, #512]	; (d7b18 <setup+0x5e8>)
   d7916:	f001 f871 	bl	d89fc <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d791a:	2301      	movs	r3, #1
   d791c:	461a      	mov	r2, r3
   d791e:	4619      	mov	r1, r3
   d7920:	487d      	ldr	r0, [pc, #500]	; (d7b18 <setup+0x5e8>)
   d7922:	f001 f8da 	bl	d8ada <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(18);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d7926:	2112      	movs	r1, #18
   d7928:	487b      	ldr	r0, [pc, #492]	; (d7b18 <setup+0x5e8>)
   d792a:	f001 f887 	bl	d8a3c <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d792e:	2301      	movs	r3, #1
   d7930:	461a      	mov	r2, r3
   d7932:	4619      	mov	r1, r3
   d7934:	4878      	ldr	r0, [pc, #480]	; (d7b18 <setup+0x5e8>)
   d7936:	f001 f8ef 	bl	d8b18 <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(18);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d793a:	2112      	movs	r1, #18
   d793c:	4876      	ldr	r0, [pc, #472]	; (d7b18 <setup+0x5e8>)
   d793e:	f001 f883 	bl	d8a48 <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d7942:	210a      	movs	r1, #10
   d7944:	4874      	ldr	r0, [pc, #464]	; (d7b18 <setup+0x5e8>)
   d7946:	f001 f885 	bl	d8a54 <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d794a:	2501      	movs	r5, #1
   d794c:	2300      	movs	r3, #0
   d794e:	461a      	mov	r2, r3
   d7950:	4619      	mov	r1, r3
   d7952:	9501      	str	r5, [sp, #4]
   d7954:	9500      	str	r5, [sp, #0]
   d7956:	4870      	ldr	r0, [pc, #448]	; (d7b18 <setup+0x5e8>)
   d7958:	f001 f8f3 	bl	d8b42 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d795c:	4629      	mov	r1, r5
   d795e:	486e      	ldr	r0, [pc, #440]	; (d7b18 <setup+0x5e8>)
   d7960:	f001 f93e 	bl	d8be0 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d7964:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d7966:	4d6d      	ldr	r5, [pc, #436]	; (d7b1c <setup+0x5ec>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d7968:	486b      	ldr	r0, [pc, #428]	; (d7b18 <setup+0x5e8>)
   d796a:	f001 f933 	bl	d8bd4 <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d796e:	8828      	ldrh	r0, [r5, #0]
   d7970:	2100      	movs	r1, #0
   d7972:	f004 f9ab 	bl	dbccc <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d7976:	2200      	movs	r2, #0
   d7978:	f04f 33ff 	mov.w	r3, #4294967295
   d797c:	4968      	ldr	r1, [pc, #416]	; (d7b20 <setup+0x5f0>)
   d797e:	8828      	ldrh	r0, [r5, #0]
   d7980:	9200      	str	r2, [sp, #0]
   d7982:	f003 fb97 	bl	db0b4 <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  DEBUG_PRINTLN();
   d7986:	f003 fc9b 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d798a:	f002 faf6 	bl	d9f7a <_ZN5Print7printlnEv>


/////////////
  DEBUG_PRINTLN();
   d798e:	f003 fc97 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7992:	f002 faf2 	bl	d9f7a <_ZN5Print7printlnEv>
  DEBUG_PRINTLN("Setting Up");
   d7996:	f003 fc93 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d799a:	4962      	ldr	r1, [pc, #392]	; (d7b24 <setup+0x5f4>)
   d799c:	f002 faf9 	bl	d9f92 <_ZN5Print7printlnEPKc>

  DEBUG_PRINT("Vsup for all sensors = ");
   d79a0:	f003 fc8e 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79a4:	4960      	ldr	r1, [pc, #384]	; (d7b28 <setup+0x5f8>)
   d79a6:	f002 fae1 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vsup);
   d79aa:	f003 fc89 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79ae:	4b5f      	ldr	r3, [pc, #380]	; (d7b2c <setup+0x5fc>)
   d79b0:	4605      	mov	r5, r0
   d79b2:	6818      	ldr	r0, [r3, #0]
   d79b4:	f00a f818 	bl	e19e8 <__aeabi_f2d>
   d79b8:	ec41 0b10 	vmov	d0, r0, r1
   d79bc:	2102      	movs	r1, #2
   d79be:	4628      	mov	r0, r5
   d79c0:	f002 fc03 	bl	da1ca <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vcc for all sensors = ");
   d79c4:	f003 fc7c 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79c8:	4959      	ldr	r1, [pc, #356]	; (d7b30 <setup+0x600>)
   d79ca:	f002 facf 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vcc);
   d79ce:	f003 fc77 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79d2:	4b58      	ldr	r3, [pc, #352]	; (d7b34 <setup+0x604>)
   d79d4:	4605      	mov	r5, r0
   d79d6:	6818      	ldr	r0, [r3, #0]
   d79d8:	f00a f806 	bl	e19e8 <__aeabi_f2d>
   d79dc:	ec41 0b10 	vmov	d0, r0, r1
   d79e0:	2102      	movs	r1, #2
   d79e2:	4628      	mov	r0, r5
   d79e4:	f002 fbf1 	bl	da1ca <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vref for sensor 1 = ");
   d79e8:	f003 fc6a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79ec:	4952      	ldr	r1, [pc, #328]	; (d7b38 <setup+0x608>)
  DEBUG_PRINTLN(sensor1._Vref);
   d79ee:	4d53      	ldr	r5, [pc, #332]	; (d7b3c <setup+0x60c>)

  DEBUG_PRINT("Vsup for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vsup);
  DEBUG_PRINT("Vcc for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vcc);
  DEBUG_PRINT("Vref for sensor 1 = ");
   d79f0:	f002 fabc 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Vref);
   d79f4:	f003 fc64 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d79f8:	4606      	mov	r6, r0
   d79fa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d79fc:	f009 fff4 	bl	e19e8 <__aeabi_f2d>
   d7a00:	ec41 0b10 	vmov	d0, r0, r1
   d7a04:	2102      	movs	r1, #2
   d7a06:	4630      	mov	r0, r6
   d7a08:	f002 fbdf 	bl	da1ca <_ZN5Print7printlnEdi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  DEBUG_PRINTLN(sensor1._Voff = state.zeroOff);
   d7a0c:	f003 fc58 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a10:	4606      	mov	r6, r0
   d7a12:	68e0      	ldr	r0, [r4, #12]
   d7a14:	6268      	str	r0, [r5, #36]	; 0x24
   d7a16:	f009 ffe7 	bl	e19e8 <__aeabi_f2d>
   d7a1a:	ec41 0b10 	vmov	d0, r0, r1
   d7a1e:	2102      	movs	r1, #2
   d7a20:	4630      	mov	r0, r6
   d7a22:	f002 fbd2 	bl	da1ca <_ZN5Print7printlnEdi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   DEBUG_PRINT("Vzero = ");
  //   DEBUG_PRINTLN(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  DEBUG_PRINT("Tzero = ");
   d7a26:	f003 fc4b 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a2a:	4945      	ldr	r1, [pc, #276]	; (d7b40 <setup+0x610>)
   d7a2c:	f002 fa9e 	bl	d9f6c <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Tz);
   d7a30:	f003 fc46 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a34:	4606      	mov	r6, r0
   d7a36:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d7a38:	f009 ffd6 	bl	e19e8 <__aeabi_f2d>
   d7a3c:	ec41 0b10 	vmov	d0, r0, r1
   d7a40:	2102      	movs	r1, #2
   d7a42:	4630      	mov	r0, r6
   d7a44:	f002 fbc1 	bl	da1ca <_ZN5Print7printlnEdi>
  //Must have previously zeroed in clean air, returns new span factor.

  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  DEBUG_PRINTLN("Finished Setting Up");
   d7a48:	f003 fc3a 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a4c:	493d      	ldr	r1, [pc, #244]	; (d7b44 <setup+0x614>)
   d7a4e:	f002 faa0 	bl	d9f92 <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN("T1, mV1, C1");
   d7a52:	f003 fc35 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a56:	493c      	ldr	r1, [pc, #240]	; (d7b48 <setup+0x618>)
   d7a58:	f002 fa9b 	bl	d9f92 <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d7a5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d7a60:	f002 fd8a 	bl	da578 <delay>
   d7a64:	f004 f9ce 	bl	dbe04 <_Z19__fetch_global_Wirev>

  if (!Sensor.begin())
   d7a68:	4601      	mov	r1, r0
   d7a6a:	4838      	ldr	r0, [pc, #224]	; (d7b4c <setup+0x61c>)
   d7a6c:	f001 fb46 	bl	d90fc <_ZN5SPS305beginER7TwoWire>
   d7a70:	b950      	cbnz	r0, d7a88 <setup+0x558>
  {
    DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d7a72:	f003 fc25 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7a76:	4936      	ldr	r1, [pc, #216]	; (d7b50 <setup+0x620>)
   d7a78:	f002 fa8b 	bl	d9f92 <_ZN5Print7printlnEPKc>
    delay(1000);
   d7a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7a80:	f002 fd7a 	bl	da578 <delay>
    // // MOTE: RTC CONTROL MUST BE SET TO Yes when operating
    // // If the device never wakes up then switch RTC CONTROL back to No
    // // reset the device and then after the device is running switch back to Yes
    // // within 10 seconds
    // timerSleep(10);
    System.reset();
   d7a84:	f002 f83e 	bl	d9b04 <_ZN11SystemClass5resetEv>
  }

  connectWithoutWaiting();
   d7a88:	f7ff f86a 	bl	d6b60 <_Z21connectWithoutWaitingv>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d7a8c:	2300      	movs	r3, #0
   d7a8e:	9301      	str	r3, [sp, #4]
   d7a90:	9300      	str	r3, [sp, #0]
   d7a92:	461a      	mov	r2, r3
   d7a94:	492f      	ldr	r1, [pc, #188]	; (d7b54 <setup+0x624>)
   d7a96:	4830      	ldr	r0, [pc, #192]	; (d7b58 <setup+0x628>)
   d7a98:	f001 ff34 	bl	d9904 <spark_subscribe>
  //*** Commented out for testing without particle connected ***//
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7a9c:	4b2f      	ldr	r3, [pc, #188]	; (d7b5c <setup+0x62c>)
   d7a9e:	781b      	ldrb	r3, [r3, #0]
   d7aa0:	b90b      	cbnz	r3, d7aa6 <setup+0x576>
  {
    publishGMTOffsetRequest();
   d7aa2:	f7fd fe8f 	bl	d57c4 <_Z23publishGMTOffsetRequestv>
   d7aa6:	f001 fcaf 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***//
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7aaa:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d7aae:	4605      	mov	r5, r0
   d7ab0:	4826      	ldr	r0, [pc, #152]	; (d7b4c <setup+0x61c>)
   d7ab2:	f001 f990 	bl	d8dd6 <_ZN5SPS3013dataAvailableEv>
   d7ab6:	b300      	cbz	r0, d7afa <setup+0x5ca>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d7ab8:	68a3      	ldr	r3, [r4, #8]
   d7aba:	4a29      	ldr	r2, [pc, #164]	; (d7b60 <setup+0x630>)
   d7abc:	4829      	ldr	r0, [pc, #164]	; (d7b64 <setup+0x634>)
   d7abe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d7ac2:	4359      	muls	r1, r3
   d7ac4:	f001 fb82 	bl	d91cc <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d7ac8:	4826      	ldr	r0, [pc, #152]	; (d7b64 <setup+0x634>)
   d7aca:	f001 fba1 	bl	d9210 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d7ace:	4a26      	ldr	r2, [pc, #152]	; (d7b68 <setup+0x638>)
   d7ad0:	4826      	ldr	r0, [pc, #152]	; (d7b6c <setup+0x63c>)
   d7ad2:	216f      	movs	r1, #111	; 0x6f
   d7ad4:	f001 fb7a 	bl	d91cc <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d7ad8:	4824      	ldr	r0, [pc, #144]	; (d7b6c <setup+0x63c>)
   d7ada:	f001 fb99 	bl	d9210 <_ZN10BlynkTimer3runEv>

  DEBUG_PRINTLN("Setup complete");
   d7ade:	f003 fbef 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   d7ae2:	4923      	ldr	r1, [pc, #140]	; (d7b70 <setup+0x640>)
   d7ae4:	f002 fa55 	bl	d9f92 <_ZN5Print7printlnEPKc>
  StateString = "READY";
   d7ae8:	4922      	ldr	r1, [pc, #136]	; (d7b74 <setup+0x644>)
   d7aea:	4823      	ldr	r0, [pc, #140]	; (d7b78 <setup+0x648>)
   d7aec:	f002 f921 	bl	d9d32 <_ZN6StringaSEPKc>
  readSensors(); 
   d7af0:	f7ff f8ba 	bl	d6c68 <_Z11readSensorsv>
}
   d7af4:	b00a      	add	sp, #40	; 0x28
   d7af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7afa:	f001 fc85 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***//
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7afe:	1b40      	subs	r0, r0, r5
   d7b00:	42b0      	cmp	r0, r6
   d7b02:	d8d9      	bhi.n	d7ab8 <setup+0x588>
  {
    delay(100);
   d7b04:	2064      	movs	r0, #100	; 0x64
   d7b06:	f002 fd37 	bl	da578 <delay>
    checkAccel();
   d7b0a:	f7fe ff85 	bl	d6a18 <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***//
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7b0e:	e7cf      	b.n	d7ab0 <setup+0x580>
   d7b10:	000e6095 	.word	0x000e6095
   d7b14:	000e60a4 	.word	0x000e60a4
   d7b18:	2003da00 	.word	0x2003da00
   d7b1c:	2003d57c 	.word	0x2003d57c
   d7b20:	000d52f5 	.word	0x000d52f5
   d7b24:	000e6108 	.word	0x000e6108
   d7b28:	000e60b2 	.word	0x000e60b2
   d7b2c:	2003d5b4 	.word	0x2003d5b4
   d7b30:	000e60ca 	.word	0x000e60ca
   d7b34:	2003d5b0 	.word	0x2003d5b0
   d7b38:	000e60e1 	.word	0x000e60e1
   d7b3c:	2003de70 	.word	0x2003de70
   d7b40:	000e60f6 	.word	0x000e60f6
   d7b44:	000e60ff 	.word	0x000e60ff
   d7b48:	000e6113 	.word	0x000e6113
   d7b4c:	2003e1b4 	.word	0x2003e1b4
   d7b50:	000e5ed8 	.word	0x000e5ed8
   d7b54:	000d5321 	.word	0x000d5321
   d7b58:	000e611f 	.word	0x000e611f
   d7b5c:	2003e174 	.word	0x2003e174
   d7b60:	000d6c69 	.word	0x000d6c69
   d7b64:	2003d7b8 	.word	0x2003d7b8
   d7b68:	000d6a19 	.word	0x000d6a19
   d7b6c:	2003debc 	.word	0x2003debc
   d7b70:	000e6137 	.word	0x000e6137
   d7b74:	000e601e 	.word	0x000e601e
   d7b78:	2003d788 	.word	0x2003d788

000d7b7c <loop>:
  StateString = "READY";
  readSensors(); 
}

void loop()
{
   d7b7c:	b508      	push	{r3, lr}
  Blynk.run();
   d7b7e:	2100      	movs	r1, #0
   d7b80:	480e      	ldr	r0, [pc, #56]	; (d7bbc <loop+0x40>)
   d7b82:	f7fe f8db 	bl	d5d3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d7b86:	480e      	ldr	r0, [pc, #56]	; (d7bc0 <loop+0x44>)
   d7b88:	f001 fb42 	bl	d9210 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d7b8c:	480d      	ldr	r0, [pc, #52]	; (d7bc4 <loop+0x48>)
   d7b8e:	f001 fb3f 	bl	d9210 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d7b92:	4b0d      	ldr	r3, [pc, #52]	; (d7bc8 <loop+0x4c>)
   d7b94:	685a      	ldr	r2, [r3, #4]
   d7b96:	4b0d      	ldr	r3, [pc, #52]	; (d7bcc <loop+0x50>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	429a      	cmp	r2, r3
   d7b9c:	dc0c      	bgt.n	d7bb8 <loop+0x3c>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d7b9e:	4b0c      	ldr	r3, [pc, #48]	; (d7bd0 <loop+0x54>)
   d7ba0:	2100      	movs	r1, #0
   d7ba2:	8818      	ldrh	r0, [r3, #0]
   d7ba4:	f004 f8a3 	bl	dbcee <digitalWrite>
    delay(2000);
   d7ba8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d7bac:	f002 fce4 	bl	da578 <delay>
    deepSleep();
  }

   d7bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (readingCount>=state.numberOfReadings)// Number of readings variable
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
   d7bb4:	f7fe baa2 	b.w	d60fc <_Z9deepSleepv>
   d7bb8:	bd08      	pop	{r3, pc}
   d7bba:	bf00      	nop
   d7bbc:	2003e154 	.word	0x2003e154
   d7bc0:	2003d7b8 	.word	0x2003d7b8
   d7bc4:	2003debc 	.word	0x2003debc
   d7bc8:	2003da38 	.word	0x2003da38
   d7bcc:	2003e1f4 	.word	0x2003e1f4
   d7bd0:	2003d574 	.word	0x2003d574

000d7bd4 <_GLOBAL__sub_I_Blynk>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7bd4:	4b91      	ldr	r3, [pc, #580]	; (d7e1c <_GLOBAL__sub_I_Blynk+0x248>)
  }

   d7bd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7bda:	2400      	movs	r4, #0

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d7bdc:	4e90      	ldr	r6, [pc, #576]	; (d7e20 <_GLOBAL__sub_I_Blynk+0x24c>)
   d7bde:	601c      	str	r4, [r3, #0]
   d7be0:	4b90      	ldr	r3, [pc, #576]	; (d7e24 <_GLOBAL__sub_I_Blynk+0x250>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d7be2:	4d91      	ldr	r5, [pc, #580]	; (d7e28 <_GLOBAL__sub_I_Blynk+0x254>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d7be4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; d7eb8 <_GLOBAL__sub_I_Blynk+0x2e4>
   d7be8:	2701      	movs	r7, #1
   d7bea:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d7bec:	f001 fb8c 	bl	d9308 <HAL_Pin_Map>
   d7bf0:	4630      	mov	r0, r6
   d7bf2:	f003 ff85 	bl	dbb00 <_ZN9TCPClientC1Ev>
   d7bf6:	f106 001c 	add.w	r0, r6, #28
   d7bfa:	f003 f983 	bl	daf04 <_ZN9IPAddressC1Ev>
   d7bfe:	462a      	mov	r2, r5
   d7c00:	498a      	ldr	r1, [pc, #552]	; (d7e2c <_GLOBAL__sub_I_Blynk+0x258>)
   d7c02:	6374      	str	r4, [r6, #52]	; 0x34
   d7c04:	4630      	mov	r0, r6
   d7c06:	8734      	strh	r4, [r6, #56]	; 0x38
   d7c08:	f004 f93c 	bl	dbe84 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d7c0c:	4b88      	ldr	r3, [pc, #544]	; (d7e30 <_GLOBAL__sub_I_Blynk+0x25c>)
   d7c0e:	601e      	str	r6, [r3, #0]
   d7c10:	605c      	str	r4, [r3, #4]
   d7c12:	609c      	str	r4, [r3, #8]
   d7c14:	60dc      	str	r4, [r3, #12]
   d7c16:	611c      	str	r4, [r3, #16]
   d7c18:	615c      	str	r4, [r3, #20]
   d7c1a:	831c      	strh	r4, [r3, #24]
   d7c1c:	835c      	strh	r4, [r3, #26]
   d7c1e:	771c      	strb	r4, [r3, #28]
   d7c20:	775c      	strb	r4, [r3, #29]
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7c22:	4b84      	ldr	r3, [pc, #528]	; (d7e34 <_GLOBAL__sub_I_Blynk+0x260>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d7c24:	4e84      	ldr	r6, [pc, #528]	; (d7e38 <_GLOBAL__sub_I_Blynk+0x264>)
   d7c26:	701c      	strb	r4, [r3, #0]
   d7c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7c2c:	805c      	strh	r4, [r3, #2]
   d7c2e:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7c30:	2002      	movs	r0, #2
   d7c32:	f001 fda3 	bl	d977c <set_system_mode>
  #include "arduino.h"
  #include <Wire.h>  
#endif //end of #ifdef PARTICLE

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d7c36:	4621      	mov	r1, r4
   d7c38:	4638      	mov	r0, r7
   d7c3a:	f001 fdb7 	bl	d97ac <system_thread_set_state>
   d7c3e:	4622      	mov	r2, r4
   d7c40:	2114      	movs	r1, #20
   d7c42:	2002      	movs	r0, #2
   d7c44:	f001 fdd2 	bl	d97ec <led_pattern_period>
   d7c48:	231e      	movs	r3, #30
   d7c4a:	9701      	str	r7, [sp, #4]
   d7c4c:	9300      	str	r3, [sp, #0]
   d7c4e:	2202      	movs	r2, #2
   d7c50:	4603      	mov	r3, r0
   d7c52:	497a      	ldr	r1, [pc, #488]	; (d7e3c <_GLOBAL__sub_I_Blynk+0x268>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d7c54:	4f7a      	ldr	r7, [pc, #488]	; (d7e40 <_GLOBAL__sub_I_Blynk+0x26c>)
   d7c56:	4630      	mov	r0, r6
   d7c58:	f001 ff08 	bl	d9a6c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d7c5c:	462a      	mov	r2, r5
   d7c5e:	4979      	ldr	r1, [pc, #484]	; (d7e44 <_GLOBAL__sub_I_Blynk+0x270>)
   d7c60:	4630      	mov	r0, r6
   d7c62:	f004 f90f 	bl	dbe84 <__aeabi_atexit>

/*********** ADXL345 COMMUNICATION ***********/
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d7c66:	4878      	ldr	r0, [pc, #480]	; (d7e48 <_GLOBAL__sub_I_Blynk+0x274>)

MB85RC256V fram(Wire, 0);
   d7c68:	4e78      	ldr	r6, [pc, #480]	; (d7e4c <_GLOBAL__sub_I_Blynk+0x278>)

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

/*********** ADXL345 COMMUNICATION ***********/
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d7c6a:	f000 fdd9 	bl	d8820 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d7c6e:	f004 f8c9 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d7c72:	4622      	mov	r2, r4
   d7c74:	4601      	mov	r1, r0
   d7c76:	4630      	mov	r0, r6
   d7c78:	f000 fc7c 	bl	d8574 <_ZN10MB85RC256VC1ER7TwoWirei>
   d7c7c:	462a      	mov	r2, r5
   d7c7e:	4974      	ldr	r1, [pc, #464]	; (d7e50 <_GLOBAL__sub_I_Blynk+0x27c>)
   d7c80:	4630      	mov	r0, r6
   d7c82:	f004 f8ff 	bl	dbe84 <__aeabi_atexit>

int firstRunValue = 1122119;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d7c86:	4873      	ldr	r0, [pc, #460]	; (d7e54 <_GLOBAL__sub_I_Blynk+0x280>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d7c88:	4e73      	ldr	r6, [pc, #460]	; (d7e58 <_GLOBAL__sub_I_Blynk+0x284>)

int firstRunValue = 1122119;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d7c8a:	f000 fadb 	bl	d8244 <_ZN8MCP7941xC1Ev>
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, firstRun = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d7c8e:	4873      	ldr	r0, [pc, #460]	; (d7e5c <_GLOBAL__sub_I_Blynk+0x288>)
   d7c90:	f000 fd12 	bl	d86b8 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d7c94:	4872      	ldr	r0, [pc, #456]	; (d7e60 <_GLOBAL__sub_I_Blynk+0x28c>)
   d7c96:	f001 f85c 	bl	d8d52 <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d7c9a:	4621      	mov	r1, r4
   d7c9c:	4630      	mov	r0, r6
   d7c9e:	f002 fd63 	bl	da768 <_ZN9FuelGaugeC1Eb>
   d7ca2:	462a      	mov	r2, r5
   d7ca4:	496f      	ldr	r1, [pc, #444]	; (d7e64 <_GLOBAL__sub_I_Blynk+0x290>)
   d7ca6:	4630      	mov	r0, r6
   d7ca8:	f004 f8ec 	bl	dbe84 <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d7cac:	4e6e      	ldr	r6, [pc, #440]	; (d7e68 <_GLOBAL__sub_I_Blynk+0x294>)
   d7cae:	4639      	mov	r1, r7
   d7cb0:	4640      	mov	r0, r8
   d7cb2:	f001 ffec 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7cb6:	4640      	mov	r0, r8
   d7cb8:	f8df 8200 	ldr.w	r8, [pc, #512]	; d7ebc <_GLOBAL__sub_I_Blynk+0x2e8>
   d7cbc:	462a      	mov	r2, r5
   d7cbe:	4631      	mov	r1, r6
   d7cc0:	f004 f8e0 	bl	dbe84 <__aeabi_atexit>
   d7cc4:	4639      	mov	r1, r7
   d7cc6:	4640      	mov	r0, r8
   d7cc8:	f001 ffe1 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7ccc:	4640      	mov	r0, r8
   d7cce:	f8df 81f0 	ldr.w	r8, [pc, #496]	; d7ec0 <_GLOBAL__sub_I_Blynk+0x2ec>
   d7cd2:	462a      	mov	r2, r5
   d7cd4:	4631      	mov	r1, r6
   d7cd6:	f004 f8d5 	bl	dbe84 <__aeabi_atexit>
   d7cda:	4639      	mov	r1, r7
   d7cdc:	4640      	mov	r0, r8
   d7cde:	f001 ffd6 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7ce2:	4640      	mov	r0, r8
   d7ce4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d7ec4 <_GLOBAL__sub_I_Blynk+0x2f0>
   d7ce8:	462a      	mov	r2, r5
   d7cea:	4631      	mov	r1, r6
   d7cec:	f004 f8ca 	bl	dbe84 <__aeabi_atexit>
   d7cf0:	4639      	mov	r1, r7
   d7cf2:	4640      	mov	r0, r8
   d7cf4:	f001 ffcb 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7cf8:	4640      	mov	r0, r8
   d7cfa:	f8df 81cc 	ldr.w	r8, [pc, #460]	; d7ec8 <_GLOBAL__sub_I_Blynk+0x2f4>
   d7cfe:	462a      	mov	r2, r5
   d7d00:	4631      	mov	r1, r6
   d7d02:	f004 f8bf 	bl	dbe84 <__aeabi_atexit>
   d7d06:	4639      	mov	r1, r7
   d7d08:	4640      	mov	r0, r8
   d7d0a:	f001 ffc0 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d0e:	4640      	mov	r0, r8
   d7d10:	f8df 81b8 	ldr.w	r8, [pc, #440]	; d7ecc <_GLOBAL__sub_I_Blynk+0x2f8>
   d7d14:	462a      	mov	r2, r5
   d7d16:	4631      	mov	r1, r6
   d7d18:	f004 f8b4 	bl	dbe84 <__aeabi_atexit>
   d7d1c:	4639      	mov	r1, r7
   d7d1e:	4640      	mov	r0, r8
   d7d20:	f001 ffb5 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d24:	4640      	mov	r0, r8
   d7d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d7ed0 <_GLOBAL__sub_I_Blynk+0x2fc>
   d7d2a:	462a      	mov	r2, r5
   d7d2c:	4631      	mov	r1, r6
   d7d2e:	f004 f8a9 	bl	dbe84 <__aeabi_atexit>
   d7d32:	4639      	mov	r1, r7
   d7d34:	4640      	mov	r0, r8
   d7d36:	f001 ffaa 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d3a:	4640      	mov	r0, r8
   d7d3c:	f8df 8194 	ldr.w	r8, [pc, #404]	; d7ed4 <_GLOBAL__sub_I_Blynk+0x300>
   d7d40:	462a      	mov	r2, r5
   d7d42:	4631      	mov	r1, r6
   d7d44:	f004 f89e 	bl	dbe84 <__aeabi_atexit>
   d7d48:	4639      	mov	r1, r7
   d7d4a:	4640      	mov	r0, r8
   d7d4c:	f001 ff9f 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d50:	4640      	mov	r0, r8
String datastring;
   d7d52:	f8df 8184 	ldr.w	r8, [pc, #388]	; d7ed8 <_GLOBAL__sub_I_Blynk+0x304>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d7d56:	462a      	mov	r2, r5
   d7d58:	4631      	mov	r1, r6
   d7d5a:	f004 f893 	bl	dbe84 <__aeabi_atexit>
String datastring;
   d7d5e:	4639      	mov	r1, r7
   d7d60:	4640      	mov	r0, r8
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
// char auth[] = "7-3k6yTAAzg7y8k7frgFQfevIMqJVYPs"; //Bathroom 5

// Install Information
String iSoftwareVersion = " SW Ver = 2019101 ";
   d7d62:	4f42      	ldr	r7, [pc, #264]	; (d7e6c <_GLOBAL__sub_I_Blynk+0x298>)
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
String datastring;
   d7d64:	f001 ff93 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d68:	462a      	mov	r2, r5
   d7d6a:	4631      	mov	r1, r6
   d7d6c:	4640      	mov	r0, r8
   d7d6e:	f004 f889 	bl	dbe84 <__aeabi_atexit>
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
// char auth[] = "7-3k6yTAAzg7y8k7frgFQfevIMqJVYPs"; //Bathroom 5

// Install Information
String iSoftwareVersion = " SW Ver = 2019101 ";
   d7d72:	493f      	ldr	r1, [pc, #252]	; (d7e70 <_GLOBAL__sub_I_Blynk+0x29c>)
   d7d74:	4638      	mov	r0, r7
   d7d76:	f001 ff8a 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d7a:	4638      	mov	r0, r7
String InstallLocation = " Loc = M-Bathroom 2nd floor ";
   d7d7c:	4f3d      	ldr	r7, [pc, #244]	; (d7e74 <_GLOBAL__sub_I_Blynk+0x2a0>)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
// char auth[] = "7-3k6yTAAzg7y8k7frgFQfevIMqJVYPs"; //Bathroom 5

// Install Information
String iSoftwareVersion = " SW Ver = 2019101 ";
   d7d7e:	462a      	mov	r2, r5
   d7d80:	4631      	mov	r1, r6
   d7d82:	f004 f87f 	bl	dbe84 <__aeabi_atexit>
String InstallLocation = " Loc = M-Bathroom 2nd floor ";
   d7d86:	493c      	ldr	r1, [pc, #240]	; (d7e78 <_GLOBAL__sub_I_Blynk+0x2a4>)
   d7d88:	4638      	mov	r0, r7
   d7d8a:	f001 ff80 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7d8e:	4638      	mov	r0, r7
String StateString = "Ready";
   d7d90:	4f3a      	ldr	r7, [pc, #232]	; (d7e7c <_GLOBAL__sub_I_Blynk+0x2a8>)
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
// char auth[] = "7-3k6yTAAzg7y8k7frgFQfevIMqJVYPs"; //Bathroom 5

// Install Information
String iSoftwareVersion = " SW Ver = 2019101 ";
String InstallLocation = " Loc = M-Bathroom 2nd floor ";
   d7d92:	462a      	mov	r2, r5
   d7d94:	4631      	mov	r1, r6
   d7d96:	f004 f875 	bl	dbe84 <__aeabi_atexit>
String StateString = "Ready";
   d7d9a:	4939      	ldr	r1, [pc, #228]	; (d7e80 <_GLOBAL__sub_I_Blynk+0x2ac>)
   d7d9c:	4638      	mov	r0, r7
   d7d9e:	f001 ff76 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7da2:	462a      	mov	r2, r5
   d7da4:	4631      	mov	r1, r6
   d7da6:	4638      	mov	r0, r7
   d7da8:	f004 f86c 	bl	dbe84 <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d7dac:	4e35      	ldr	r6, [pc, #212]	; (d7e84 <_GLOBAL__sub_I_Blynk+0x2b0>)
// Install Information
String iSoftwareVersion = " SW Ver = 2019101 ";
String InstallLocation = " Loc = M-Bathroom 2nd floor ";
String StateString = "Ready";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d7dae:	4836      	ldr	r0, [pc, #216]	; (d7e88 <_GLOBAL__sub_I_Blynk+0x2b4>)
   d7db0:	f001 f9b1 	bl	d9116 <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d7db4:	4835      	ldr	r0, [pc, #212]	; (d7e8c <_GLOBAL__sub_I_Blynk+0x2b8>)
   d7db6:	f001 f9ae 	bl	d9116 <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d7dba:	4935      	ldr	r1, [pc, #212]	; (d7e90 <_GLOBAL__sub_I_Blynk+0x2bc>)
   d7dbc:	4630      	mov	r0, r6
   d7dbe:	f001 ff66 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7dc2:	4934      	ldr	r1, [pc, #208]	; (d7e94 <_GLOBAL__sub_I_Blynk+0x2c0>)
   d7dc4:	f106 0010 	add.w	r0, r6, #16
   d7dc8:	f001 ff61 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7dcc:	4932      	ldr	r1, [pc, #200]	; (d7e98 <_GLOBAL__sub_I_Blynk+0x2c4>)
   d7dce:	f106 0020 	add.w	r0, r6, #32
   d7dd2:	f001 ff5c 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7dd6:	4931      	ldr	r1, [pc, #196]	; (d7e9c <_GLOBAL__sub_I_Blynk+0x2c8>)
   d7dd8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d7ddc:	f001 ff57 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7de0:	492f      	ldr	r1, [pc, #188]	; (d7ea0 <_GLOBAL__sub_I_Blynk+0x2cc>)
   d7de2:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d7de6:	f001 ff52 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7dea:	492e      	ldr	r1, [pc, #184]	; (d7ea4 <_GLOBAL__sub_I_Blynk+0x2d0>)
   d7dec:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d7df0:	f001 ff4d 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
   d7df4:	492c      	ldr	r1, [pc, #176]	; (d7ea8 <_GLOBAL__sub_I_Blynk+0x2d4>)
   d7df6:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d7dfa:	f001 ff48 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
String StateString = "Ready";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d7dfe:	462a      	mov	r2, r5
   d7e00:	492a      	ldr	r1, [pc, #168]	; (d7eac <_GLOBAL__sub_I_Blynk+0x2d8>)
   d7e02:	4620      	mov	r0, r4
   d7e04:	f004 f83e 	bl	dbe84 <__aeabi_atexit>

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d7e08:	ed9f 0a29 	vldr	s0, [pc, #164]	; d7eb0 <_GLOBAL__sub_I_Blynk+0x2dc>
   d7e0c:	4829      	ldr	r0, [pc, #164]	; (d7eb4 <_GLOBAL__sub_I_Blynk+0x2e0>)
   d7e0e:	220f      	movs	r2, #15
   d7e10:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

   d7e12:	b002      	add	sp, #8
   d7e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d7e18:	f000 b9e0 	b.w	d81dc <_ZN3IAQC1Eiif>
   d7e1c:	2003e110 	.word	0x2003e110
   d7e20:	2003e178 	.word	0x2003e178
   d7e24:	2003d6c5 	.word	0x2003d6c5
   d7e28:	2003d6b0 	.word	0x2003d6b0
   d7e2c:	000d583d 	.word	0x000d583d
   d7e30:	2003e154 	.word	0x2003e154
   d7e34:	2003e114 	.word	0x2003e114
   d7e38:	2003e134 	.word	0x2003e134
   d7e3c:	00ffff00 	.word	0x00ffff00
   d7e40:	000e5da8 	.word	0x000e5da8
   d7e44:	000d5359 	.word	0x000d5359
   d7e48:	2003da00 	.word	0x2003da00
   d7e4c:	2003d6b8 	.word	0x2003d6b8
   d7e50:	000d855d 	.word	0x000d855d
   d7e54:	2003d6c4 	.word	0x2003d6c4
   d7e58:	2003deb4 	.word	0x2003deb4
   d7e5c:	2003de54 	.word	0x2003de54
   d7e60:	2003e1b4 	.word	0x2003e1b4
   d7e64:	000da787 	.word	0x000da787
   d7e68:	000d9c01 	.word	0x000d9c01
   d7e6c:	2003e1e4 	.word	0x2003e1e4
   d7e70:	000e6146 	.word	0x000e6146
   d7e74:	2003e124 	.word	0x2003e124
   d7e78:	000e6159 	.word	0x000e6159
   d7e7c:	2003d788 	.word	0x2003d788
   d7e80:	000e6176 	.word	0x000e6176
   d7e84:	2003d6c8 	.word	0x2003d6c8
   d7e88:	2003d7b8 	.word	0x2003d7b8
   d7e8c:	2003debc 	.word	0x2003debc
   d7e90:	000e617c 	.word	0x000e617c
   d7e94:	000e6180 	.word	0x000e6180
   d7e98:	000e6184 	.word	0x000e6184
   d7e9c:	000e618f 	.word	0x000e618f
   d7ea0:	000e6193 	.word	0x000e6193
   d7ea4:	000e6198 	.word	0x000e6198
   d7ea8:	000e61a0 	.word	0x000e61a0
   d7eac:	000d5301 	.word	0x000d5301
   d7eb0:	4081999a 	.word	0x4081999a
   d7eb4:	2003de70 	.word	0x2003de70
   d7eb8:	2003d738 	.word	0x2003d738
   d7ebc:	2003d748 	.word	0x2003d748
   d7ec0:	2003d758 	.word	0x2003d758
   d7ec4:	2003d768 	.word	0x2003d768
   d7ec8:	2003d778 	.word	0x2003d778
   d7ecc:	2003e200 	.word	0x2003e200
   d7ed0:	2003d798 	.word	0x2003d798
   d7ed4:	2003d7a8 	.word	0x2003d7a8
   d7ed8:	2003de58 	.word	0x2003de58

000d7edc <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d7edc:	e880 0006 	stmia.w	r0, {r1, r2}
   d7ee0:	4a10      	ldr	r2, [pc, #64]	; (d7f24 <_ZN3ULPC1Eiif+0x48>)
   d7ee2:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d7ee4:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d7ee6:	4a10      	ldr	r2, [pc, #64]	; (d7f28 <_ZN3ULPC1Eiif+0x4c>)
   d7ee8:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7eea:	4a10      	ldr	r2, [pc, #64]	; (d7f2c <_ZN3ULPC1Eiif+0x50>)
   d7eec:	eddf 6a10 	vldr	s13, [pc, #64]	; d7f30 <_ZN3ULPC1Eiif+0x54>
   d7ef0:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d7ef4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d7f34 <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d7ef8:	490f      	ldr	r1, [pc, #60]	; (d7f38 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d7efa:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7efe:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d7f02:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7f04:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7f08:	eddf 6a0c 	vldr	s13, [pc, #48]	; d7f3c <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d7f0c:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7f14:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d7f1c:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d7f20:	4770      	bx	lr
   d7f22:	bf00      	nop
   d7f24:	41a00000 	.word	0x41a00000
   d7f28:	41900000 	.word	0x41900000
   d7f2c:	2003d5b4 	.word	0x2003d5b4
   d7f30:	42680000 	.word	0x42680000
   d7f34:	42ae0000 	.word	0x42ae0000
   d7f38:	42200000 	.word	0x42200000
   d7f3c:	42180000 	.word	0x42180000

000d7f40 <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d7f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f44:	460c      	mov	r4, r1
   d7f46:	4606      	mov	r6, r0
   d7f48:	4690      	mov	r8, r2
   d7f4a:	f001 fa5d 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d7f4e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d7f52:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d7f56:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d7f58:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d7f5a:	88b0      	ldrh	r0, [r6, #4]
   d7f5c:	f003 fef3 	bl	dbd46 <analogRead>
   d7f60:	4404      	add	r4, r0
    delay(1);
   d7f62:	2001      	movs	r0, #1
   d7f64:	f002 fb08 	bl	da578 <delay>
   d7f68:	f001 fa4e 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d7f6c:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d7f6e:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d7f72:	d3f2      	bcc.n	d7f5a <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d7f74:	ee07 5a10 	vmov	s14, r5
   d7f78:	ee07 4a90 	vmov	s15, r4
   d7f7c:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d7f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d7f84:	4b18      	ldr	r3, [pc, #96]	; (d7fe8 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d7f86:	edd6 5a08 	vldr	s11, [r6, #32]
   d7f8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d7f8e:	edd3 7a00 	vldr	s15, [r3]
   d7f92:	4b16      	ldr	r3, [pc, #88]	; (d7fec <_ZN3ULP7getTempEiPc+0xac>)
   d7f94:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d7f98:	4b15      	ldr	r3, [pc, #84]	; (d7ff0 <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d7f9a:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d7f9e:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d7fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
   d7fa4:	ed9f 7a13 	vldr	s14, [pc, #76]	; d7ff4 <_ZN3ULP7getTempEiPc+0xb4>
   d7fa8:	ee27 7a87 	vmul.f32	s14, s15, s14
   d7fac:	edd6 7a07 	vldr	s15, [r6, #28]
   d7fb0:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d7fb4:	d10c      	bne.n	d7fd0 <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d7fb6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d7fba:	ee67 7a87 	vmul.f32	s15, s15, s14
   d7fbe:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d7fc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d7fc6:	eddf 7a0c 	vldr	s15, [pc, #48]	; d7ff8 <_ZN3ULP7getTempEiPc+0xb8>
   d7fca:	ee77 7a27 	vadd.f32	s15, s14, s15
   d7fce:	e002      	b.n	d7fd6 <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d7fd0:	4b0a      	ldr	r3, [pc, #40]	; (d7ffc <_ZN3ULP7getTempEiPc+0xbc>)
   d7fd2:	4598      	cmp	r8, r3
   d7fd4:	d102      	bne.n	d7fdc <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d7fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d7fda:	e001      	b.n	d7fe0 <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d7fdc:	eddf 7a08 	vldr	s15, [pc, #32]	; d8000 <_ZN3ULP7getTempEiPc+0xc0>
}
   d7fe0:	ee17 0a90 	vmov	r0, s15
   d7fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7fe8:	2003d5b0 	.word	0x2003d5b0
   d7fec:	2003d5b4 	.word	0x2003d5b4
   d7ff0:	000e5dc8 	.word	0x000e5dc8
   d7ff4:	39800000 	.word	0x39800000
   d7ff8:	42000000 	.word	0x42000000
   d7ffc:	000e6191 	.word	0x000e6191
   d8000:	00000000 	.word	0x00000000

000d8004 <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d8004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8006:	4604      	mov	r4, r0
   d8008:	f001 f9fe 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d800c:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d800e:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d8012:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d8014:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d8016:	8820      	ldrh	r0, [r4, #0]
   d8018:	f003 fe95 	bl	dbd46 <analogRead>
   d801c:	4405      	add	r5, r0
    delay(1);
   d801e:	2001      	movs	r0, #1
   d8020:	f002 faaa 	bl	da578 <delay>
   d8024:	f001 f9f0 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d8028:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d802a:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d802e:	d3f2      	bcc.n	d8016 <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d8030:	ee07 5a90 	vmov	s15, r5
   d8034:	ee07 6a10 	vmov	s14, r6
   d8038:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d803c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d8040:	4b15      	ldr	r3, [pc, #84]	; (d8098 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d8042:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d8046:	edd3 7a00 	vldr	s15, [r3]
   d804a:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d804e:	ee17 0a90 	vmov	r0, s15
   d8052:	f009 fcc9 	bl	e19e8 <__aeabi_f2d>
   d8056:	2200      	movs	r2, #0
   d8058:	4b10      	ldr	r3, [pc, #64]	; (d809c <_ZN3ULP4zeroEv+0x98>)
   d805a:	f009 fd19 	bl	e1a90 <__aeabi_dmul>
   d805e:	4b10      	ldr	r3, [pc, #64]	; (d80a0 <_ZN3ULP4zeroEv+0x9c>)
   d8060:	2200      	movs	r2, #0
   d8062:	f009 fd15 	bl	e1a90 <__aeabi_dmul>
   d8066:	f00a f80b 	bl	e2080 <__aeabi_d2f>
   d806a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d806e:	4a0d      	ldr	r2, [pc, #52]	; (d80a4 <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d8070:	ee07 0a10 	vmov	s14, r0
   d8074:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d8078:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d807a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d807e:	4620      	mov	r0, r4
   d8080:	f7ff ff5e 	bl	d7f40 <_ZN3ULP7getTempEiPc>
   d8084:	ee07 0a90 	vmov	s15, r0
   d8088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d808c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d8090:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d8094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8096:	bf00      	nop
   d8098:	2003d5b0 	.word	0x2003d5b0
   d809c:	408f4000 	.word	0x408f4000
   d80a0:	3f300000 	.word	0x3f300000
   d80a4:	000e6191 	.word	0x000e6191

000d80a8 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d80a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80aa:	460c      	mov	r4, r1
   d80ac:	4607      	mov	r7, r0
   d80ae:	f001 f9ab 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d80b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d80b6:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d80ba:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d80bc:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d80be:	8838      	ldrh	r0, [r7, #0]
   d80c0:	f003 fe41 	bl	dbd46 <analogRead>
   d80c4:	4404      	add	r4, r0
    delay(1);
   d80c6:	2001      	movs	r0, #1
   d80c8:	f002 fa56 	bl	da578 <delay>
   d80cc:	f001 f99c 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d80d0:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d80d2:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d80d6:	d3f2      	bcc.n	d80be <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d80d8:	ee07 4a90 	vmov	s15, r4
   d80dc:	ee07 5a10 	vmov	s14, r5
   d80e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d80e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d80e8:	4b0b      	ldr	r3, [pc, #44]	; (d8118 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d80ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d80ee:	edd3 7a00 	vldr	s15, [r3]
   d80f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d80f6:	ee17 0a90 	vmov	r0, s15
   d80fa:	f009 fc75 	bl	e19e8 <__aeabi_f2d>
   d80fe:	2200      	movs	r2, #0
   d8100:	4b06      	ldr	r3, [pc, #24]	; (d811c <_ZN3ULP7getVgasEi+0x74>)
   d8102:	f009 fcc5 	bl	e1a90 <__aeabi_dmul>
   d8106:	2200      	movs	r2, #0
   d8108:	4b05      	ldr	r3, [pc, #20]	; (d8120 <_ZN3ULP7getVgasEi+0x78>)
   d810a:	f009 fcc1 	bl	e1a90 <__aeabi_dmul>
   d810e:	f009 ffb7 	bl	e2080 <__aeabi_d2f>
} //returns voltage at zero concentration
   d8112:	ee00 0a10 	vmov	s0, r0
   d8116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8118:	2003d5b0 	.word	0x2003d5b0
   d811c:	408f4000 	.word	0x408f4000
   d8120:	3f300000 	.word	0x3f300000
   d8124:	00000000 	.word	0x00000000

000d8128 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d8128:	b5d0      	push	{r4, r6, r7, lr}
   d812a:	ed2d 8b02 	vpush	{d8}
   d812e:	4604      	mov	r4, r0
   d8130:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d8134:	f7ff ffb8 	bl	d80a8 <_ZN3ULP7getVgasEi>
   d8138:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d813c:	ee30 0a67 	vsub.f32	s0, s0, s15
   d8140:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d8144:	ee70 7a67 	vsub.f32	s15, s0, s15
   d8148:	ee17 0a90 	vmov	r0, s15
   d814c:	f009 fc4c 	bl	e19e8 <__aeabi_f2d>
   d8150:	2200      	movs	r2, #0
   d8152:	4b21      	ldr	r3, [pc, #132]	; (d81d8 <_ZN3ULP7getConcEif+0xb0>)
   d8154:	f009 fdc6 	bl	e1ce4 <__aeabi_ddiv>
   d8158:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d815c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8160:	4606      	mov	r6, r0
   d8162:	ee17 0a90 	vmov	r0, s15
   d8166:	460f      	mov	r7, r1
   d8168:	f009 fc3e 	bl	e19e8 <__aeabi_f2d>
   d816c:	4602      	mov	r2, r0
   d816e:	460b      	mov	r3, r1
   d8170:	4630      	mov	r0, r6
   d8172:	4639      	mov	r1, r7
   d8174:	f009 fdb6 	bl	e1ce4 <__aeabi_ddiv>
   d8178:	a315      	add	r3, pc, #84	; (adr r3, d81d0 <_ZN3ULP7getConcEif+0xa8>)
   d817a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d817e:	f009 fc87 	bl	e1a90 <__aeabi_dmul>
   d8182:	f009 ff7d 	bl	e2080 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d8186:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d818a:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d818e:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d8192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d8196:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d819a:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d819e:	bfcc      	ite	gt
   d81a0:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d81a4:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d81a8:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d81ac:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d81b0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d81b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d81b8:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d81bc:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d81c0:	edd4 6a02 	vldr	s13, [r4, #8]
   d81c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d81c8:	ee20 0a07 	vmul.f32	s0, s0, s14
   d81cc:	bdd0      	pop	{r4, r6, r7, pc}
   d81ce:	bf00      	nop
   d81d0:	00000000 	.word	0x00000000
   d81d4:	41cdcd65 	.word	0x41cdcd65
   d81d8:	408f4000 	.word	0x408f4000

000d81dc <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d81dc:	b508      	push	{r3, lr}
   d81de:	4603      	mov	r3, r0
   d81e0:	f7ff fe7c 	bl	d7edc <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d81e4:	4a0d      	ldr	r2, [pc, #52]	; (d821c <_ZN3IAQC1Eiif+0x40>)
   d81e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d8220 <_ZN3IAQC1Eiif+0x44>
   d81ea:	edd2 7a00 	vldr	s15, [r2]
   d81ee:	eddf 6a0d 	vldr	s13, [pc, #52]	; d8224 <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d81f2:	4a0d      	ldr	r2, [pc, #52]	; (d8228 <_ZN3IAQC1Eiif+0x4c>)
   d81f4:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d81f6:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d81fa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d81fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d8202:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d8204:	4a09      	ldr	r2, [pc, #36]	; (d822c <_ZN3IAQC1Eiif+0x50>)
   d8206:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d8208:	4a09      	ldr	r2, [pc, #36]	; (d8230 <_ZN3IAQC1Eiif+0x54>)
   d820a:	635a      	str	r2, [r3, #52]	; 0x34
}
   d820c:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d820e:	ed9f 7a09 	vldr	s14, [pc, #36]	; d8234 <_ZN3IAQC1Eiif+0x58>
   d8212:	ee67 7a87 	vmul.f32	s15, s15, s14
   d8216:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d821a:	bd08      	pop	{r3, pc}
   d821c:	2003d5b4 	.word	0x2003d5b4
   d8220:	4986e340 	.word	0x4986e340
   d8224:	4a007aa0 	.word	0x4a007aa0
   d8228:	000186a0 	.word	0x000186a0
   d822c:	4181999a 	.word	0x4181999a
   d8230:	4093851f 	.word	0x4093851f
   d8234:	447a0000 	.word	0x447a0000

000d8238 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d8238:	f001 b866 	b.w	d9308 <HAL_Pin_Map>

000d823c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d823c:	6803      	ldr	r3, [r0, #0]
   d823e:	b2c9      	uxtb	r1, r1
   d8240:	689b      	ldr	r3, [r3, #8]
   d8242:	4718      	bx	r3

000d8244 <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   d8244:	b510      	push	{r4, lr}
   d8246:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   d8248:	f003 fddc 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d824c:	f003 f8e2 	bl	db414 <_ZN7TwoWire9isEnabledEv>
   d8250:	b918      	cbnz	r0, d825a <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   d8252:	f003 fdd7 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8256:	f003 f8af 	bl	db3b8 <_ZN7TwoWire5beginEv>
  }
}
   d825a:	4620      	mov	r0, r4
   d825c:	bd10      	pop	{r4, pc}

000d825e <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d825e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8262:	4692      	mov	sl, r2
   d8264:	4698      	mov	r8, r3
   d8266:	460d      	mov	r5, r1
   d8268:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d826c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d8270:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   d8274:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d8278:	f003 fdc4 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d827c:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d827e:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d8280:	f003 f8be 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d8284:	f003 fdbe 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8288:	2100      	movs	r1, #0
   d828a:	f7ff ffd7 	bl	d823c <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d828e:	f003 fdb9 	bl	dbe04 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d8292:	fbb5 f3f4 	udiv	r3, r5, r4
   d8296:	fb04 5513 	mls	r5, r4, r3, r5
   d829a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   d829e:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d82a0:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d82a4:	f7ff ffca 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d82a8:	f003 fdac 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d82ac:	fbba f1f4 	udiv	r1, sl, r4
   d82b0:	fb04 aa11 	mls	sl, r4, r1, sl
   d82b4:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d82b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d82bc:	f7ff ffbe 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d82c0:	f003 fda0 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d82c4:	fbb8 f1f4 	udiv	r1, r8, r4
   d82c8:	fb04 8811 	mls	r8, r4, r1, r8
   d82cc:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   d82d0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d82d4:	f7ff ffb2 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d82d8:	f003 fd94 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d82dc:	fbbb f1f4 	udiv	r1, fp, r4
   d82e0:	fb04 b111 	mls	r1, r4, r1, fp
   d82e4:	f001 0107 	and.w	r1, r1, #7
   d82e8:	f041 0108 	orr.w	r1, r1, #8
   d82ec:	f7ff ffa6 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d82f0:	f003 fd88 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d82f4:	fbb7 f1f4 	udiv	r1, r7, r4
   d82f8:	fb04 7711 	mls	r7, r4, r1, r7
   d82fc:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d8300:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d8304:	f7ff ff9a 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d8308:	f003 fd7c 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d830c:	fbb6 f1f4 	udiv	r1, r6, r4
   d8310:	fb04 6611 	mls	r6, r4, r1, r6
   d8314:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d8318:	f001 011f 	and.w	r1, r1, #31
   d831c:	f7ff ff8e 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   d8320:	f003 fd70 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8324:	fbb9 f1f4 	udiv	r1, r9, r4
   d8328:	6803      	ldr	r3, [r0, #0]
   d832a:	fb04 9411 	mls	r4, r4, r1, r9
   d832e:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d8332:	689b      	ldr	r3, [r3, #8]
   d8334:	b2c9      	uxtb	r1, r1
   d8336:	4798      	blx	r3

  Wire.endTransmission();
   d8338:	f003 fd64 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d833c:	f003 f867 	bl	db40e <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d8340:	f003 fd60 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8344:	216f      	movs	r1, #111	; 0x6f
   d8346:	f003 f85b 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d834a:	f003 fd5b 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d834e:	2100      	movs	r1, #0
   d8350:	f7ff ff74 	bl	d823c <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d8354:	f003 fd56 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8358:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d835c:	f7ff ff6e 	bl	d823c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d8360:	f003 fd50 	bl	dbe04 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d8364:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   d8368:	f003 b851 	b.w	db40e <_ZN7TwoWire15endTransmissionEv>

000d836c <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d836c:	b570      	push	{r4, r5, r6, lr}
   d836e:	461c      	mov	r4, r3
   d8370:	4615      	mov	r5, r2
   d8372:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d8374:	f003 fd46 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8378:	216f      	movs	r1, #111	; 0x6f
   d837a:	f003 f841 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d837e:	f003 fd41 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8382:	2100      	movs	r1, #0
   d8384:	f7ff ff5a 	bl	d823c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d8388:	f003 fd3c 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d838c:	f003 f83f 	bl	db40e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d8390:	f003 fd38 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8394:	216f      	movs	r1, #111	; 0x6f
   d8396:	2207      	movs	r2, #7
   d8398:	f003 f824 	bl	db3e4 <_ZN7TwoWire11requestFromEii>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d839c:	f003 fd32 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d83a0:	6803      	ldr	r3, [r0, #0]
   d83a2:	695b      	ldr	r3, [r3, #20]
   d83a4:	4798      	blx	r3
   d83a6:	b2c0      	uxtb	r0, r0
   d83a8:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d83ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d83b0:	f000 000f 	and.w	r0, r0, #15
   d83b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d83b8:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d83ba:	f003 fd23 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d83be:	6803      	ldr	r3, [r0, #0]
   d83c0:	695b      	ldr	r3, [r3, #20]
   d83c2:	4798      	blx	r3
   d83c4:	b2c0      	uxtb	r0, r0
   d83c6:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d83ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d83ce:	f000 000f 	and.w	r0, r0, #15
   d83d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d83d6:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d83d8:	f003 fd14 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d83dc:	6803      	ldr	r3, [r0, #0]
   d83de:	695b      	ldr	r3, [r3, #20]
   d83e0:	4798      	blx	r3
   d83e2:	b2c0      	uxtb	r0, r0
   d83e4:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d83e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d83ec:	f000 000f 	and.w	r0, r0, #15
   d83f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d83f4:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d83f6:	f003 fd05 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d83fa:	6803      	ldr	r3, [r0, #0]
   d83fc:	695b      	ldr	r3, [r3, #20]
   d83fe:	4798      	blx	r3
   d8400:	9b04      	ldr	r3, [sp, #16]
   d8402:	f000 0007 	and.w	r0, r0, #7
   d8406:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d8408:	f003 fcfc 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d840c:	6803      	ldr	r3, [r0, #0]
   d840e:	695b      	ldr	r3, [r3, #20]
   d8410:	4798      	blx	r3
   d8412:	b2c0      	uxtb	r0, r0
   d8414:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d8418:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d841c:	f000 000f 	and.w	r0, r0, #15
   d8420:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d8424:	9b05      	ldr	r3, [sp, #20]
   d8426:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d8428:	f003 fcec 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d842c:	6803      	ldr	r3, [r0, #0]
   d842e:	695b      	ldr	r3, [r3, #20]
   d8430:	4798      	blx	r3
   d8432:	b2c0      	uxtb	r0, r0
   d8434:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d8438:	0093      	lsls	r3, r2, #2
   d843a:	4413      	add	r3, r2
   d843c:	f000 000f 	and.w	r0, r0, #15
   d8440:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d8444:	9b06      	ldr	r3, [sp, #24]
   d8446:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   d8448:	f003 fcdc 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d844c:	6803      	ldr	r3, [r0, #0]
   d844e:	695b      	ldr	r3, [r3, #20]
   d8450:	4798      	blx	r3
   d8452:	b2c0      	uxtb	r0, r0
   d8454:	0903      	lsrs	r3, r0, #4
   d8456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d845a:	f000 000f 	and.w	r0, r0, #15
   d845e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d8462:	9b07      	ldr	r3, [sp, #28]
   d8464:	7018      	strb	r0, [r3, #0]
   d8466:	bd70      	pop	{r4, r5, r6, pc}

000d8468 <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d8468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d846c:	4607      	mov	r7, r0
   d846e:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d8470:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d8472:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d8474:	f001 ff70 	bl	da358 <_ZN9TimeClass6secondEl>
   d8478:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d847a:	4620      	mov	r0, r4
   d847c:	f001 ff64 	bl	da348 <_ZN9TimeClass6minuteEl>
   d8480:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d8482:	4620      	mov	r0, r4
   d8484:	f001 ff58 	bl	da338 <_ZN9TimeClass4hourEl>
   d8488:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d848a:	4620      	mov	r0, r4
   d848c:	f001 ff74 	bl	da378 <_ZN9TimeClass7weekdayEl>
   d8490:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d8492:	4620      	mov	r0, r4
   d8494:	f001 ff68 	bl	da368 <_ZN9TimeClass3dayEl>
   d8498:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d849a:	4620      	mov	r0, r4
   d849c:	f001 ff76 	bl	da38c <_ZN9TimeClass5monthEl>
   d84a0:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d84a2:	4620      	mov	r0, r4
   d84a4:	f001 ff7c 	bl	da3a0 <_ZN9TimeClass4yearEl>
   d84a8:	220a      	movs	r2, #10
   d84aa:	4601      	mov	r1, r0
   d84ac:	a804      	add	r0, sp, #16
   d84ae:	f001 fc63 	bl	d9d78 <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d84b2:	a904      	add	r1, sp, #16
   d84b4:	2202      	movs	r2, #2
   d84b6:	a808      	add	r0, sp, #32
   d84b8:	f001 fce0 	bl	d9e7c <_ZNK6String9substringEj>
   d84bc:	a808      	add	r0, sp, #32
   d84be:	f001 fcf1 	bl	d9ea4 <_ZNK6String5toIntEv>
   d84c2:	4604      	mov	r4, r0
   d84c4:	a808      	add	r0, sp, #32
   d84c6:	f001 fb9b 	bl	d9c00 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d84ca:	b2e4      	uxtb	r4, r4
   d84cc:	fa5f f38b 	uxtb.w	r3, fp
   d84d0:	b2f6      	uxtb	r6, r6
   d84d2:	b2ed      	uxtb	r5, r5
   d84d4:	9302      	str	r3, [sp, #8]
   d84d6:	fa5f f289 	uxtb.w	r2, r9
   d84da:	fa5f f38a 	uxtb.w	r3, sl
   d84de:	fa5f f188 	uxtb.w	r1, r8
   d84e2:	4638      	mov	r0, r7
   d84e4:	9403      	str	r4, [sp, #12]
   d84e6:	9601      	str	r6, [sp, #4]
   d84e8:	9500      	str	r5, [sp, #0]
   d84ea:	f7ff feb8 	bl	d825e <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d84ee:	a804      	add	r0, sp, #16
   d84f0:	f001 fb86 	bl	d9c00 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d84f4:	b00d      	add	sp, #52	; 0x34
   d84f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d84fa <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   d84fa:	b500      	push	{lr}
   d84fc:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d84fe:	f10d 031b 	add.w	r3, sp, #27
   d8502:	9303      	str	r3, [sp, #12]
   d8504:	f10d 031a 	add.w	r3, sp, #26
   d8508:	9302      	str	r3, [sp, #8]
   d850a:	f10d 0319 	add.w	r3, sp, #25
   d850e:	9301      	str	r3, [sp, #4]
   d8510:	ab06      	add	r3, sp, #24
   d8512:	9300      	str	r3, [sp, #0]
   d8514:	f10d 0216 	add.w	r2, sp, #22
   d8518:	f10d 0317 	add.w	r3, sp, #23
   d851c:	f10d 0115 	add.w	r1, sp, #21
   d8520:	f7ff ff24 	bl	d836c <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d8524:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d8528:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d852a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d852e:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d8530:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d8534:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d8536:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d853a:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d853c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d8540:	3b01      	subs	r3, #1
   d8542:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d8544:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d8548:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d854a:	3364      	adds	r3, #100	; 0x64
   d854c:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d854e:	f00a f829 	bl	e25a4 <mktime>

  return uint32_t(moment);
}
   d8552:	b011      	add	sp, #68	; 0x44
   d8554:	f85d fb04 	ldr.w	pc, [sp], #4

000d8558 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d8558:	f000 bed6 	b.w	d9308 <HAL_Pin_Map>

000d855c <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d855c:	4770      	bx	lr

000d855e <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d855e:	b510      	push	{r4, lr}
}
   d8560:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d8562:	4604      	mov	r4, r0
}
   d8564:	f003 fc93 	bl	dbe8e <_ZdlPvj>
   d8568:	4620      	mov	r0, r4
   d856a:	bd10      	pop	{r4, pc}

000d856c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d856c:	6803      	ldr	r3, [r0, #0]
   d856e:	b2c9      	uxtb	r1, r1
   d8570:	689b      	ldr	r3, [r3, #8]
   d8572:	4718      	bx	r3

000d8574 <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d8574:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d8576:	4c02      	ldr	r4, [pc, #8]	; (d8580 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d8578:	6004      	str	r4, [r0, #0]
   d857a:	6041      	str	r1, [r0, #4]
   d857c:	6082      	str	r2, [r0, #8]
}
   d857e:	bd10      	pop	{r4, pc}
   d8580:	000e6270 	.word	0x000e6270

000d8584 <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d8584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8588:	4604      	mov	r4, r0
   d858a:	460d      	mov	r5, r1
   d858c:	4617      	mov	r7, r2
   d858e:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d8590:	f1b8 0f00 	cmp.w	r8, #0
   d8594:	d03f      	beq.n	d8616 <_ZN10MB85RC256V8readDataEjPhj+0x92>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d8596:	68a1      	ldr	r1, [r4, #8]
   d8598:	6860      	ldr	r0, [r4, #4]
   d859a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d859e:	f002 ff2f 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d85a2:	0a29      	lsrs	r1, r5, #8
   d85a4:	6860      	ldr	r0, [r4, #4]
   d85a6:	f7ff ffe1 	bl	d856c <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d85aa:	4629      	mov	r1, r5
   d85ac:	6860      	ldr	r0, [r4, #4]
   d85ae:	f7ff ffdd 	bl	d856c <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d85b2:	2100      	movs	r1, #0
   d85b4:	6860      	ldr	r0, [r4, #4]
   d85b6:	f002 ff26 	bl	db406 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d85ba:	b110      	cbz	r0, d85c2 <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d85bc:	2000      	movs	r0, #0
   d85be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85c2:	f1b8 0f20 	cmp.w	r8, #32
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d85c6:	68a1      	ldr	r1, [r4, #8]
   d85c8:	6860      	ldr	r0, [r4, #4]
   d85ca:	46c1      	mov	r9, r8
   d85cc:	bf28      	it	cs
   d85ce:	f04f 0920 	movcs.w	r9, #32
   d85d2:	2301      	movs	r3, #1
   d85d4:	464a      	mov	r2, r9
   d85d6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d85da:	f002 ff08 	bl	db3ee <_ZN7TwoWire11requestFromEiii>

		if (Wire.available() < (int) bytesToRead) {
   d85de:	f003 fc11 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d85e2:	6803      	ldr	r3, [r0, #0]
   d85e4:	691b      	ldr	r3, [r3, #16]
   d85e6:	4798      	blx	r3
   d85e8:	4581      	cmp	r9, r0
   d85ea:	dce7      	bgt.n	d85bc <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d85ec:	463e      	mov	r6, r7
   d85ee:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d85f2:	f003 fc07 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d85f6:	6803      	ldr	r3, [r0, #0]
   d85f8:	695b      	ldr	r3, [r3, #20]
   d85fa:	4798      	blx	r3
   d85fc:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d8600:	1bf2      	subs	r2, r6, r7
   d8602:	ebc6 0308 	rsb	r3, r6, r8
   d8606:	4591      	cmp	r9, r2
   d8608:	eb06 050a 	add.w	r5, r6, sl
   d860c:	443b      	add	r3, r7
   d860e:	d8f0      	bhi.n	d85f2 <_ZN10MB85RC256V8readDataEjPhj+0x6e>
   d8610:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d8612:	4637      	mov	r7, r6
   d8614:	e7bc      	b.n	d8590 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d8616:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d8618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d861c <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8620:	4604      	mov	r4, r0
   d8622:	460d      	mov	r5, r1
   d8624:	4690      	mov	r8, r2
   d8626:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d8628:	b357      	cbz	r7, d8680 <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d862a:	68a1      	ldr	r1, [r4, #8]
   d862c:	6860      	ldr	r0, [r4, #4]
   d862e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d8632:	f002 fee5 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d8636:	0a29      	lsrs	r1, r5, #8
   d8638:	6860      	ldr	r0, [r4, #4]
   d863a:	f7ff ff97 	bl	d856c <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d863e:	4629      	mov	r1, r5
   d8640:	6860      	ldr	r0, [r4, #4]
   d8642:	f7ff ff93 	bl	d856c <_ZN7TwoWire5writeEj>
   d8646:	f108 091e 	add.w	r9, r8, #30
   d864a:	4646      	mov	r6, r8
   d864c:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d8650:	6860      	ldr	r0, [r4, #4]
   d8652:	f816 1b01 	ldrb.w	r1, [r6], #1
   d8656:	6803      	ldr	r3, [r0, #0]
   d8658:	689b      	ldr	r3, [r3, #8]
   d865a:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d865c:	454e      	cmp	r6, r9
   d865e:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d8662:	46b0      	mov	r8, r6
			dataLen--;
   d8664:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d8668:	d001      	beq.n	d866e <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d866a:	2f00      	cmp	r7, #0
   d866c:	d1f0      	bne.n	d8650 <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d866e:	2101      	movs	r1, #1
   d8670:	6860      	ldr	r0, [r4, #4]
   d8672:	f002 fec8 	bl	db406 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d8676:	2800      	cmp	r0, #0
   d8678:	d0d6      	beq.n	d8628 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d867a:	2000      	movs	r0, #0
   d867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d8680:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d8682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8686 <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d8686:	b530      	push	{r4, r5, lr}
   d8688:	b089      	sub	sp, #36	; 0x24
   d868a:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d868c:	2220      	movs	r2, #32
   d868e:	2100      	movs	r1, #0
   d8690:	4668      	mov	r0, sp
   d8692:	f009 fea2 	bl	e23da <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d8696:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d8698:	2320      	movs	r3, #32
   d869a:	466a      	mov	r2, sp
   d869c:	4621      	mov	r1, r4
   d869e:	4628      	mov	r0, r5
   d86a0:	f7ff ffbc 	bl	d861c <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d86a4:	b120      	cbz	r0, d86b0 <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d86a6:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d86a8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d86ac:	d1f4      	bne.n	d8698 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d86ae:	2001      	movs	r0, #1
}
   d86b0:	b009      	add	sp, #36	; 0x24
   d86b2:	bd30      	pop	{r4, r5, pc}

000d86b4 <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d86b4:	f000 be28 	b.w	d9308 <HAL_Pin_Map>

000d86b8 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d86b8:	4770      	bx	lr
	...

000d86bc <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d86bc:	b510      	push	{r4, lr}

      IOexp.begin();
   d86be:	4c53      	ldr	r4, [pc, #332]	; (d880c <_ZN12IoTNodePower5beginEv+0x150>)
   d86c0:	4620      	mov	r0, r4
   d86c2:	f000 fb0f 	bl	d8ce4 <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d86c6:	4620      	mov	r0, r4
   d86c8:	2201      	movs	r2, #1
   d86ca:	2100      	movs	r1, #0
   d86cc:	f000 fb0d 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d86d0:	2201      	movs	r2, #1
   d86d2:	4611      	mov	r1, r2
   d86d4:	4620      	mov	r0, r4
   d86d6:	f000 fb08 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d86da:	4620      	mov	r0, r4
   d86dc:	2201      	movs	r2, #1
   d86de:	2102      	movs	r1, #2
   d86e0:	f000 fb03 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d86e4:	4620      	mov	r0, r4
   d86e6:	2201      	movs	r2, #1
   d86e8:	2103      	movs	r1, #3
   d86ea:	f000 fafe 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d86ee:	4620      	mov	r0, r4
   d86f0:	2201      	movs	r2, #1
   d86f2:	2104      	movs	r1, #4
   d86f4:	f000 faf9 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d86f8:	4620      	mov	r0, r4
   d86fa:	2201      	movs	r2, #1
   d86fc:	2105      	movs	r1, #5
   d86fe:	f000 faf4 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d8702:	4620      	mov	r0, r4
   d8704:	2200      	movs	r2, #0
   d8706:	2106      	movs	r1, #6
   d8708:	f000 faef 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d870c:	4620      	mov	r0, r4
   d870e:	2201      	movs	r2, #1
   d8710:	2107      	movs	r1, #7
   d8712:	f000 faea 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d8716:	4620      	mov	r0, r4
   d8718:	2200      	movs	r2, #0
   d871a:	2108      	movs	r1, #8
   d871c:	f000 fae5 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d8720:	4620      	mov	r0, r4
   d8722:	2200      	movs	r2, #0
   d8724:	2109      	movs	r1, #9
   d8726:	f000 fae0 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d872a:	4620      	mov	r0, r4
   d872c:	2200      	movs	r2, #0
   d872e:	210a      	movs	r1, #10
   d8730:	f000 fadb 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d8734:	4620      	mov	r0, r4
   d8736:	2200      	movs	r2, #0
   d8738:	210b      	movs	r1, #11
   d873a:	f000 fad6 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d873e:	4620      	mov	r0, r4
   d8740:	2200      	movs	r2, #0
   d8742:	210c      	movs	r1, #12
   d8744:	f000 fad1 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d8748:	4620      	mov	r0, r4
   d874a:	2200      	movs	r2, #0
   d874c:	210d      	movs	r1, #13
   d874e:	f000 facc 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d8752:	4620      	mov	r0, r4
   d8754:	2200      	movs	r2, #0
   d8756:	210e      	movs	r1, #14
   d8758:	f000 fac7 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d875c:	4620      	mov	r0, r4
   d875e:	2200      	movs	r2, #0
   d8760:	210f      	movs	r1, #15
   d8762:	f000 fac2 	bl	d8cea <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d8766:	4620      	mov	r0, r4
   d8768:	2201      	movs	r2, #1
   d876a:	2100      	movs	r1, #0
   d876c:	f000 fae6 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d8770:	2201      	movs	r2, #1
   d8772:	4611      	mov	r1, r2
   d8774:	4620      	mov	r0, r4
   d8776:	f000 fae1 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d877a:	4620      	mov	r0, r4
   d877c:	2201      	movs	r2, #1
   d877e:	2102      	movs	r1, #2
   d8780:	f000 fadc 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d8784:	4620      	mov	r0, r4
   d8786:	2201      	movs	r2, #1
   d8788:	2103      	movs	r1, #3
   d878a:	f000 fad7 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d878e:	4620      	mov	r0, r4
   d8790:	2201      	movs	r2, #1
   d8792:	2104      	movs	r1, #4
   d8794:	f000 fad2 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d8798:	4620      	mov	r0, r4
   d879a:	2201      	movs	r2, #1
   d879c:	2105      	movs	r1, #5
   d879e:	f000 facd 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d87a2:	4620      	mov	r0, r4
   d87a4:	2201      	movs	r2, #1
   d87a6:	2106      	movs	r1, #6
   d87a8:	f000 fac8 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d87ac:	4620      	mov	r0, r4
   d87ae:	2201      	movs	r2, #1
   d87b0:	2107      	movs	r1, #7
   d87b2:	f000 fac3 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d87b6:	4620      	mov	r0, r4
   d87b8:	2201      	movs	r2, #1
   d87ba:	2108      	movs	r1, #8
   d87bc:	f000 fabe 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d87c0:	4620      	mov	r0, r4
   d87c2:	2201      	movs	r2, #1
   d87c4:	2109      	movs	r1, #9
   d87c6:	f000 fab9 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d87ca:	4620      	mov	r0, r4
   d87cc:	2201      	movs	r2, #1
   d87ce:	210a      	movs	r1, #10
   d87d0:	f000 fab4 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d87d4:	4620      	mov	r0, r4
   d87d6:	2201      	movs	r2, #1
   d87d8:	210b      	movs	r1, #11
   d87da:	f000 faaf 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d87de:	4620      	mov	r0, r4
   d87e0:	2201      	movs	r2, #1
   d87e2:	210c      	movs	r1, #12
   d87e4:	f000 faaa 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d87e8:	4620      	mov	r0, r4
   d87ea:	2201      	movs	r2, #1
   d87ec:	210d      	movs	r1, #13
   d87ee:	f000 faa5 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d87f2:	4620      	mov	r0, r4
   d87f4:	2201      	movs	r2, #1
   d87f6:	210e      	movs	r1, #14
   d87f8:	f000 faa0 	bl	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d87fc:	4620      	mov	r0, r4
   d87fe:	2201      	movs	r2, #1
   d8800:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d8802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d8806:	f000 ba99 	b.w	d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>
   d880a:	bf00      	nop
   d880c:	2003e228 	.word	0x2003e228

000d8810 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d8810:	4801      	ldr	r0, [pc, #4]	; (d8818 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d8812:	f000 ba76 	b.w	d8d02 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d8816:	bf00      	nop
   d8818:	2003e228 	.word	0x2003e228

000d881c <_GLOBAL__sub_I_IOexp>:
   d881c:	f000 bd74 	b.w	d9308 <HAL_Pin_Map>

000d8820 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8820:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d8822:	a50e      	add	r5, pc, #56	; (adr r5, d885c <_ZN7ADXL345C1Ev+0x3c>)
   d8824:	e9d5 4500 	ldrd	r4, r5, [r5]
   d8828:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d882c:	a50d      	add	r5, pc, #52	; (adr r5, d8864 <_ZN7ADXL345C1Ev+0x44>)
   d882e:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8832:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d8834:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d8838:	a50c      	add	r5, pc, #48	; (adr r5, d886c <_ZN7ADXL345C1Ev+0x4c>)
   d883a:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d883e:	6282      	str	r2, [r0, #40]	; 0x28
   d8840:	2201      	movs	r2, #1
   d8842:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d8846:	4904      	ldr	r1, [pc, #16]	; (d8858 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d8848:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d884a:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d884c:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d884e:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d8850:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d8854:	bd30      	pop	{r4, r5, pc}
   d8856:	bf00      	nop
   d8858:	004c4b40 	.word	0x004c4b40
   d885c:	6cf9279f 	.word	0x6cf9279f
   d8860:	3f6ed578 	.word	0x3f6ed578
   d8864:	f28f7f0e 	.word	0xf28f7f0e
   d8868:	3f6ecd7a 	.word	0x3f6ecd7a
   d886c:	30d80f20 	.word	0x30d80f20
   d8870:	3f6c9c9e 	.word	0x3f6c9c9e

000d8874 <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d8874:	b538      	push	{r3, r4, r5, lr}
   d8876:	4614      	mov	r4, r2
   d8878:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d887a:	f003 fac3 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d887e:	2153      	movs	r1, #83	; 0x53
   d8880:	f002 fdbe 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d8884:	f003 fabe 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8888:	6803      	ldr	r3, [r0, #0]
   d888a:	4629      	mov	r1, r5
   d888c:	689b      	ldr	r3, [r3, #8]
   d888e:	4798      	blx	r3
	Wire.write(_val);                 
   d8890:	f003 fab8 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8894:	6803      	ldr	r3, [r0, #0]
   d8896:	4621      	mov	r1, r4
   d8898:	689b      	ldr	r3, [r3, #8]
   d889a:	4798      	blx	r3
	Wire.endTransmission();         
   d889c:	f003 fab2 	bl	dbe04 <_Z19__fetch_global_Wirev>
}
   d88a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d88a4:	f002 bdb3 	b.w	db40e <_ZN7TwoWire15endTransmissionEv>

000d88a8 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d88a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d88ac:	4616      	mov	r6, r2
   d88ae:	461f      	mov	r7, r3
   d88b0:	460c      	mov	r4, r1
   d88b2:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d88b4:	f003 faa6 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88b8:	2153      	movs	r1, #83	; 0x53
   d88ba:	f002 fda1 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d88be:	f003 faa1 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88c2:	6803      	ldr	r3, [r0, #0]
   d88c4:	4621      	mov	r1, r4
   d88c6:	689b      	ldr	r3, [r3, #8]
   d88c8:	4798      	blx	r3
	Wire.endTransmission();         
   d88ca:	f003 fa9b 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88ce:	f002 fd9e 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d88d2:	f003 fa97 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88d6:	2153      	movs	r1, #83	; 0x53
   d88d8:	f002 fd92 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d88dc:	f003 fa92 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88e0:	4632      	mov	r2, r6
   d88e2:	2153      	movs	r1, #83	; 0x53
   d88e4:	f002 fd7e 	bl	db3e4 <_ZN7TwoWire11requestFromEii>
   d88e8:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d88ea:	f003 fa8b 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88ee:	6803      	ldr	r3, [r0, #0]
   d88f0:	691b      	ldr	r3, [r3, #16]
   d88f2:	ebc7 0804 	rsb	r8, r7, r4
   d88f6:	4798      	blx	r3
   d88f8:	b138      	cbz	r0, d890a <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d88fa:	f003 fa83 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d88fe:	6803      	ldr	r3, [r0, #0]
   d8900:	695b      	ldr	r3, [r3, #20]
   d8902:	4798      	blx	r3
   d8904:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d8908:	e7ef      	b.n	d88ea <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d890a:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d890c:	bf1e      	ittt	ne
   d890e:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d8910:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d8912:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d8914:	f003 fa76 	bl	dbe04 <_Z19__fetch_global_Wirev>
}
   d8918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d891c:	f002 bd77 	b.w	db40e <_ZN7TwoWire15endTransmissionEv>

000d8920 <_ZN7ADXL34510writeToSPIEhh>:
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
   d8922:	4d0b      	ldr	r5, [pc, #44]	; (d8950 <_ZN7ADXL34510writeToSPIEhh+0x30>)
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d8924:	4604      	mov	r4, r0
   d8926:	460f      	mov	r7, r1
  digitalWrite(_CS, LOW);
   d8928:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   d892a:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d892c:	4616      	mov	r6, r2
  digitalWrite(_CS, LOW);
   d892e:	f003 f9de 	bl	dbcee <digitalWrite>
  SPI.transfer(__reg_address); 
   d8932:	4639      	mov	r1, r7
   d8934:	4628      	mov	r0, r5
   d8936:	f001 f8d7 	bl	d9ae8 <_ZN8SPIClass8transferEh>
  SPI.transfer(__val); 
   d893a:	4631      	mov	r1, r6
   d893c:	4628      	mov	r0, r5
   d893e:	f001 f8d3 	bl	d9ae8 <_ZN8SPIClass8transferEh>
  digitalWrite(_CS, HIGH); 
   d8942:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   d8944:	2101      	movs	r1, #1
}
   d8946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   d894a:	f003 b9d0 	b.w	dbcee <digitalWrite>
   d894e:	bf00      	nop
   d8950:	2003e5d4 	.word	0x2003e5d4

000d8954 <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   d8954:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d8958:	b10b      	cbz	r3, d895e <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   d895a:	f7ff bf8b 	b.w	d8874 <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   d895e:	f7ff bfdf 	b.w	d8920 <_ZN7ADXL34510writeToSPIEhh>

000d8962 <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d8962:	b510      	push	{r4, lr}
	if(I2C) {
   d8964:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d8968:	4604      	mov	r4, r0
	if(I2C) {
   d896a:	b11b      	cbz	r3, d8974 <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   d896c:	f003 fa4a 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8970:	f002 fd22 	bl	db3b8 <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   d8974:	4620      	mov	r0, r4
   d8976:	2200      	movs	r2, #0
   d8978:	212d      	movs	r1, #45	; 0x2d
   d897a:	f7ff ffeb 	bl	d8954 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   d897e:	4620      	mov	r0, r4
   d8980:	2210      	movs	r2, #16
   d8982:	212d      	movs	r1, #45	; 0x2d
   d8984:	f7ff ffe6 	bl	d8954 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d8988:	4620      	mov	r0, r4
   d898a:	2208      	movs	r2, #8
   d898c:	212d      	movs	r1, #45	; 0x2d
}
   d898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d8992:	f7ff bfdf 	b.w	d8954 <_ZN7ADXL3457writeToEhh>
	...

000d8998 <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d8998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   d899a:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   d899c:	bfd4      	ite	le
   d899e:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   d89a2:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d89a6:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d89a8:	2100      	movs	r1, #0
   d89aa:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d89ac:	461f      	mov	r7, r3
   d89ae:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d89b0:	f003 f99d 	bl	dbcee <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   d89b4:	4621      	mov	r1, r4
   d89b6:	480a      	ldr	r0, [pc, #40]	; (d89e0 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d89b8:	f001 f896 	bl	d9ae8 <_ZN8SPIClass8transferEh>
   d89bc:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   d89be:	1be3      	subs	r3, r4, r7
   d89c0:	429e      	cmp	r6, r3
   d89c2:	dd06      	ble.n	d89d2 <_ZN7ADXL34511readFromSPIEhiPh+0x3a>
    _buff[i] = SPI.transfer(0x00);
   d89c4:	2100      	movs	r1, #0
   d89c6:	4806      	ldr	r0, [pc, #24]	; (d89e0 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d89c8:	f001 f88e 	bl	d9ae8 <_ZN8SPIClass8transferEh>
   d89cc:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   d89d0:	e7f5      	b.n	d89be <_ZN7ADXL34511readFromSPIEhiPh+0x26>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d89d2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   d89d4:	2101      	movs	r1, #1
}
   d89d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d89da:	f003 b988 	b.w	dbcee <digitalWrite>
   d89de:	bf00      	nop
   d89e0:	2003e5d4 	.word	0x2003e5d4

000d89e4 <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d89e4:	b410      	push	{r4}
	if(I2C) {
   d89e6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   d89ea:	b11c      	cbz	r4, d89f4 <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d89ec:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   d89f0:	f7ff bf5a 	b.w	d88a8 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d89f4:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   d89f8:	f7ff bfce 	b.w	d8998 <_ZN7ADXL34511readFromSPIEhiPh>

000d89fc <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d89fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d89fe:	3904      	subs	r1, #4
   d8a00:	290c      	cmp	r1, #12
   d8a02:	bf98      	it	ls
   d8a04:	4b0c      	ldrls	r3, [pc, #48]	; (d8a38 <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d8a06:	f04f 0201 	mov.w	r2, #1
   d8a0a:	bf98      	it	ls
   d8a0c:	5c5d      	ldrbls	r5, [r3, r1]
   d8a0e:	f10d 0307 	add.w	r3, sp, #7
   d8a12:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   d8a16:	bf88      	it	hi
   d8a18:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d8a1a:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d8a1c:	f7ff ffe2 	bl	d89e4 <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   d8a20:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d8a24:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   d8a28:	432a      	orrs	r2, r5
   d8a2a:	2131      	movs	r1, #49	; 0x31
   d8a2c:	4620      	mov	r0, r4
   d8a2e:	f7ff ff91 	bl	d8954 <_ZN7ADXL3457writeToEhh>
}
   d8a32:	b003      	add	sp, #12
   d8a34:	bd30      	pop	{r4, r5, pc}
   d8a36:	bf00      	nop
   d8a38:	000e6278 	.word	0x000e6278

000d8a3c <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   d8a3c:	f381 0208 	usat	r2, #8, r1
   d8a40:	b2d2      	uxtb	r2, r2
   d8a42:	2124      	movs	r1, #36	; 0x24
   d8a44:	f7ff bf86 	b.w	d8954 <_ZN7ADXL3457writeToEhh>

000d8a48 <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   d8a48:	f381 0208 	usat	r2, #8, r1
   d8a4c:	b2d2      	uxtb	r2, r2
   d8a4e:	2125      	movs	r1, #37	; 0x25
   d8a50:	f7ff bf80 	b.w	d8954 <_ZN7ADXL3457writeToEhh>

000d8a54 <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   d8a54:	f381 0208 	usat	r2, #8, r1
   d8a58:	b2d2      	uxtb	r2, r2
   d8a5a:	2126      	movs	r1, #38	; 0x26
   d8a5c:	f7ff bf7a 	b.w	d8954 <_ZN7ADXL3457writeToEhh>

000d8a60 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d8a60:	fa41 f202 	asr.w	r2, r1, r2
}
   d8a64:	f002 0001 	and.w	r0, r2, #1
   d8a68:	4770      	bx	lr

000d8a6a <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   d8a6a:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d8a6c:	2201      	movs	r2, #1
   d8a6e:	f10d 0307 	add.w	r3, sp, #7
   d8a72:	2130      	movs	r1, #48	; 0x30
   d8a74:	f7ff ffb6 	bl	d89e4 <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   d8a78:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8a7c:	b003      	add	sp, #12
   d8a7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8a82 <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d8a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8a84:	4616      	mov	r6, r2
   d8a86:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   d8a88:	2201      	movs	r2, #1
   d8a8a:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d8a8e:	4604      	mov	r4, r0
   d8a90:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   d8a92:	f7ff ffa7 	bl	d89e4 <_ZN7ADXL3458readFromEhiPh>
   d8a96:	2201      	movs	r2, #1
   d8a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d8a9c:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   d8a9e:	b10f      	cbz	r7, d8aa4 <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d8aa0:	4313      	orrs	r3, r2
   d8aa2:	e001      	b.n	d8aa8 <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   d8aa4:	ea23 0302 	bic.w	r3, r3, r2
   d8aa8:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   d8aac:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d8ab0:	4629      	mov	r1, r5
   d8ab2:	4620      	mov	r0, r4
   d8ab4:	f7ff ff4e 	bl	d8954 <_ZN7ADXL3457writeToEhh>
}
   d8ab8:	b003      	add	sp, #12
   d8aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8abc <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d8abc:	460b      	mov	r3, r1
   d8abe:	2206      	movs	r2, #6
   d8ac0:	2127      	movs	r1, #39	; 0x27
   d8ac2:	f7ff bfde 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8ac6 <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d8ac6:	460b      	mov	r3, r1
   d8ac8:	2205      	movs	r2, #5
   d8aca:	2127      	movs	r1, #39	; 0x27
   d8acc:	f7ff bfd9 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8ad0 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d8ad0:	460b      	mov	r3, r1
   d8ad2:	2204      	movs	r2, #4
   d8ad4:	2127      	movs	r1, #39	; 0x27
   d8ad6:	f7ff bfd4 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8ada <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d8ada:	b570      	push	{r4, r5, r6, lr}
   d8adc:	4604      	mov	r4, r0
   d8ade:	4616      	mov	r6, r2
   d8ae0:	461d      	mov	r5, r3
	setActivityX(stateX);
   d8ae2:	f7ff ffeb 	bl	d8abc <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   d8ae6:	4631      	mov	r1, r6
   d8ae8:	4620      	mov	r0, r4
   d8aea:	f7ff ffec 	bl	d8ac6 <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   d8aee:	4629      	mov	r1, r5
   d8af0:	4620      	mov	r0, r4
}
   d8af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   d8af6:	f7ff bfeb 	b.w	d8ad0 <_ZN7ADXL34512setActivityZEb>

000d8afa <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d8afa:	460b      	mov	r3, r1
   d8afc:	2202      	movs	r2, #2
   d8afe:	2127      	movs	r1, #39	; 0x27
   d8b00:	f7ff bfbf 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8b04 <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d8b04:	460b      	mov	r3, r1
   d8b06:	2201      	movs	r2, #1
   d8b08:	2127      	movs	r1, #39	; 0x27
   d8b0a:	f7ff bfba 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8b0e <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d8b0e:	460b      	mov	r3, r1
   d8b10:	2200      	movs	r2, #0
   d8b12:	2127      	movs	r1, #39	; 0x27
   d8b14:	f7ff bfb5 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8b18 <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d8b18:	b570      	push	{r4, r5, r6, lr}
   d8b1a:	4604      	mov	r4, r0
   d8b1c:	4616      	mov	r6, r2
   d8b1e:	461d      	mov	r5, r3
	setInactivityX(stateX);
   d8b20:	f7ff ffeb 	bl	d8afa <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   d8b24:	4631      	mov	r1, r6
   d8b26:	4620      	mov	r0, r4
   d8b28:	f7ff ffec 	bl	d8b04 <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   d8b2c:	4629      	mov	r1, r5
   d8b2e:	4620      	mov	r0, r4
}
   d8b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   d8b34:	f7ff bfeb 	b.w	d8b0e <_ZN7ADXL34514setInactivityZEb>

000d8b38 <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d8b38:	4613      	mov	r3, r2
   d8b3a:	460a      	mov	r2, r1
   d8b3c:	212f      	movs	r1, #47	; 0x2f
   d8b3e:	f7ff bfa0 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8b42 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d8b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   d8b46:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d8b48:	4604      	mov	r4, r0
   d8b4a:	4690      	mov	r8, r2
   d8b4c:	461d      	mov	r5, r3
   d8b4e:	9f06      	ldr	r7, [sp, #24]
   d8b50:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   d8b52:	d101      	bne.n	d8b58 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d8b54:	2200      	movs	r2, #0
   d8b56:	e002      	b.n	d8b5e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   d8b58:	2902      	cmp	r1, #2
   d8b5a:	d103      	bne.n	d8b64 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d8b5c:	2201      	movs	r2, #1
   d8b5e:	2106      	movs	r1, #6
   d8b60:	f7ff ffea 	bl	d8b38 <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   d8b64:	f1b8 0f01 	cmp.w	r8, #1
   d8b68:	d101      	bne.n	d8b6e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d8b6a:	2200      	movs	r2, #0
   d8b6c:	e003      	b.n	d8b76 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   d8b6e:	f1b8 0f02 	cmp.w	r8, #2
   d8b72:	d104      	bne.n	d8b7e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d8b74:	2201      	movs	r2, #1
   d8b76:	2105      	movs	r1, #5
   d8b78:	4620      	mov	r0, r4
   d8b7a:	f7ff ffdd 	bl	d8b38 <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   d8b7e:	2d01      	cmp	r5, #1
   d8b80:	d102      	bne.n	d8b88 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   d8b82:	2200      	movs	r2, #0
   d8b84:	2102      	movs	r1, #2
   d8b86:	e003      	b.n	d8b90 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   d8b88:	2d02      	cmp	r5, #2
   d8b8a:	d104      	bne.n	d8b96 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   d8b8c:	2201      	movs	r2, #1
   d8b8e:	4629      	mov	r1, r5
   d8b90:	4620      	mov	r0, r4
   d8b92:	f7ff ffd1 	bl	d8b38 <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   d8b96:	2f01      	cmp	r7, #1
   d8b98:	d101      	bne.n	d8b9e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d8b9a:	2200      	movs	r2, #0
   d8b9c:	e002      	b.n	d8ba4 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   d8b9e:	2f02      	cmp	r7, #2
   d8ba0:	d104      	bne.n	d8bac <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8ba2:	2201      	movs	r2, #1
   d8ba4:	2104      	movs	r1, #4
   d8ba6:	4620      	mov	r0, r4
   d8ba8:	f7ff ffc6 	bl	d8b38 <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   d8bac:	2e01      	cmp	r6, #1
   d8bae:	d101      	bne.n	d8bb4 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d8bb0:	2200      	movs	r2, #0
   d8bb2:	e002      	b.n	d8bba <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   d8bb4:	2e02      	cmp	r6, #2
   d8bb6:	d106      	bne.n	d8bc6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8bb8:	2201      	movs	r2, #1
   d8bba:	4620      	mov	r0, r4
   d8bbc:	2103      	movs	r1, #3
}
   d8bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8bc2:	f7ff bfb9 	b.w	d8b38 <_ZN7ADXL34519setInterruptMappingEhb>
   d8bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8bca <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d8bca:	4613      	mov	r3, r2
   d8bcc:	460a      	mov	r2, r1
   d8bce:	212e      	movs	r1, #46	; 0x2e
   d8bd0:	f7ff bf57 	b.w	d8a82 <_ZN7ADXL34514setRegisterBitEhib>

000d8bd4 <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   d8bd4:	460a      	mov	r2, r1
   d8bd6:	b101      	cbz	r1, d8bda <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   d8bd8:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   d8bda:	2104      	movs	r1, #4
   d8bdc:	f7ff bff5 	b.w	d8bca <_ZN7ADXL34512setInterruptEhb>

000d8be0 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   d8be0:	460a      	mov	r2, r1
   d8be2:	b101      	cbz	r1, d8be6 <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   d8be4:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   d8be6:	2103      	movs	r1, #3
   d8be8:	f7ff bfef 	b.w	d8bca <_ZN7ADXL34512setInterruptEhb>

000d8bec <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d8bec:	f000 bb8c 	b.w	d9308 <HAL_Pin_Map>

000d8bf0 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d8bf0:	b510      	push	{r4, lr}
   d8bf2:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d8bf4:	f003 f906 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8bf8:	6803      	ldr	r3, [r0, #0]
   d8bfa:	4621      	mov	r1, r4
   d8bfc:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d8bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d8c02:	4718      	bx	r3

000d8c04 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d8c04:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d8c06:	f003 f8fd 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8c0a:	6803      	ldr	r3, [r0, #0]
   d8c0c:	695b      	ldr	r3, [r3, #20]
   d8c0e:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d8c10:	b2c0      	uxtb	r0, r0
   d8c12:	bd08      	pop	{r3, pc}

000d8c14 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d8c14:	b538      	push	{r3, r4, r5, lr}
   d8c16:	4604      	mov	r4, r0
   d8c18:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d8c1a:	f003 f8f3 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8c1e:	7821      	ldrb	r1, [r4, #0]
   d8c20:	f041 0120 	orr.w	r1, r1, #32
   d8c24:	f002 fbec 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d8c28:	4628      	mov	r0, r5
   d8c2a:	f7ff ffe1 	bl	d8bf0 <_ZL8wiresendh>
	Wire.endTransmission();
   d8c2e:	f003 f8e9 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8c32:	f002 fbec 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d8c36:	f003 f8e5 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8c3a:	7821      	ldrb	r1, [r4, #0]
   d8c3c:	2201      	movs	r2, #1
   d8c3e:	f041 0120 	orr.w	r1, r1, #32
   d8c42:	f002 fbcf 	bl	db3e4 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d8c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d8c4a:	f7ff bfdb 	b.w	d8c04 <_ZL8wirerecvv>

000d8c4e <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d8c4e:	b570      	push	{r4, r5, r6, lr}
   d8c50:	4606      	mov	r6, r0
   d8c52:	4614      	mov	r4, r2
   d8c54:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d8c56:	f003 f8d5 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8c5a:	7831      	ldrb	r1, [r6, #0]
   d8c5c:	f041 0120 	orr.w	r1, r1, #32
   d8c60:	f002 fbce 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d8c64:	4628      	mov	r0, r5
   d8c66:	f7ff ffc3 	bl	d8bf0 <_ZL8wiresendh>
	wiresend(regValue);
   d8c6a:	4620      	mov	r0, r4
   d8c6c:	f7ff ffc0 	bl	d8bf0 <_ZL8wiresendh>
	Wire.endTransmission();
   d8c70:	f003 f8c8 	bl	dbe04 <_Z19__fetch_global_Wirev>
}
   d8c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d8c78:	f002 bbc9 	b.w	db40e <_ZN7TwoWire15endTransmissionEv>

000d8c7c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c80:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8c84:	2907      	cmp	r1, #7
   d8c86:	bf98      	it	ls
   d8c88:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d8c8a:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8c8e:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d8c90:	4631      	mov	r1, r6
   d8c92:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8c94:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d8c96:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d8c98:	f7ff ffbc 	bl	d8c14 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d8c9c:	f1b8 0f00 	cmp.w	r8, #0
   d8ca0:	d001      	beq.n	d8ca6 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d8ca2:	4304      	orrs	r4, r0
   d8ca4:	e001      	b.n	d8caa <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d8ca6:	ea20 0404 	bic.w	r4, r0, r4
   d8caa:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d8cac:	4631      	mov	r1, r6
   d8cae:	4628      	mov	r0, r5
}
   d8cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d8cb4:	f7ff bfcb 	b.w	d8c4e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d8cb8 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d8cb8:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d8cba:	2907      	cmp	r1, #7
   d8cbc:	bf28      	it	cs
   d8cbe:	2107      	movcs	r1, #7
   d8cc0:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d8cc2:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d8cc4:	f003 f89e 	bl	dbe04 <_Z19__fetch_global_Wirev>
   d8cc8:	f002 fb76 	bl	db3b8 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d8ccc:	4620      	mov	r0, r4
   d8cce:	22ff      	movs	r2, #255	; 0xff
   d8cd0:	2100      	movs	r1, #0
   d8cd2:	f7ff ffbc 	bl	d8c4e <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d8cd6:	4620      	mov	r0, r4
   d8cd8:	22ff      	movs	r2, #255	; 0xff
   d8cda:	2101      	movs	r1, #1
}
   d8cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d8ce0:	f7ff bfb5 	b.w	d8c4e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d8ce4 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d8ce4:	2100      	movs	r1, #0
   d8ce6:	f7ff bfe7 	b.w	d8cb8 <_ZN17Adafruit_MCP230175beginEh>

000d8cea <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d8cea:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d8cec:	2301      	movs	r3, #1
   d8cee:	fab2 f282 	clz	r2, r2
   d8cf2:	9300      	str	r3, [sp, #0]
   d8cf4:	0952      	lsrs	r2, r2, #5
   d8cf6:	2300      	movs	r3, #0
   d8cf8:	f7ff ffc0 	bl	d8c7c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d8cfc:	b003      	add	sp, #12
   d8cfe:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d02 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8d02:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d8d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d8d06:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d8d0a:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d8d0c:	bf34      	ite	cc
   d8d0e:	2114      	movcc	r1, #20
   d8d10:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d8d12:	4605      	mov	r5, r0
   d8d14:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d8d16:	f7ff ff7d 	bl	d8c14 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d8d1a:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d8d1c:	40b3      	lsls	r3, r6
   d8d1e:	b10f      	cbz	r7, d8d24 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d8d20:	4303      	orrs	r3, r0
   d8d22:	e001      	b.n	d8d28 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d8d24:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8d28:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d8d2a:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d8d2c:	4628      	mov	r0, r5
   d8d2e:	bf34      	ite	cc
   d8d30:	2112      	movcc	r1, #18
   d8d32:	2113      	movcs	r1, #19
}
   d8d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d8d38:	f7ff bf89 	b.w	d8c4e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d8d3c <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d8d3c:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d8d3e:	230d      	movs	r3, #13
   d8d40:	9300      	str	r3, [sp, #0]
   d8d42:	230c      	movs	r3, #12
   d8d44:	f7ff ff9a 	bl	d8c7c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d8d48:	b003      	add	sp, #12
   d8d4a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d4e <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d8d4e:	f000 badb 	b.w	d9308 <HAL_Pin_Map>

000d8d52 <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d8d52:	2200      	movs	r2, #0
   d8d54:	6042      	str	r2, [r0, #4]
   d8d56:	6082      	str	r2, [r0, #8]
   d8d58:	60c2      	str	r2, [r0, #12]
   d8d5a:	6102      	str	r2, [r0, #16]
   d8d5c:	6142      	str	r2, [r0, #20]
   d8d5e:	6182      	str	r2, [r0, #24]
   d8d60:	61c2      	str	r2, [r0, #28]
   d8d62:	6202      	str	r2, [r0, #32]
   d8d64:	6242      	str	r2, [r0, #36]	; 0x24
   d8d66:	6282      	str	r2, [r0, #40]	; 0x28
   d8d68:	2201      	movs	r2, #1
   d8d6a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d8d6e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d8d72:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d8d76:	4770      	bx	lr

000d8d78 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d8d78:	b538      	push	{r3, r4, r5, lr}
   d8d7a:	4605      	mov	r5, r0
   d8d7c:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d8d7e:	6800      	ldr	r0, [r0, #0]
   d8d80:	2169      	movs	r1, #105	; 0x69
   d8d82:	f002 fb3d 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d8d86:	0a21      	lsrs	r1, r4, #8
   d8d88:	6828      	ldr	r0, [r5, #0]
   d8d8a:	f7ff fa57 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d8d8e:	b2e1      	uxtb	r1, r4
   d8d90:	6828      	ldr	r0, [r5, #0]
   d8d92:	f7ff fa53 	bl	d823c <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d8d96:	6828      	ldr	r0, [r5, #0]
   d8d98:	f002 fb39 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
   d8d9c:	b108      	cbz	r0, d8da2 <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d8d9e:	2000      	movs	r0, #0
   d8da0:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d8da2:	2202      	movs	r2, #2
   d8da4:	2169      	movs	r1, #105	; 0x69
   d8da6:	6828      	ldr	r0, [r5, #0]
   d8da8:	f002 fb19 	bl	db3de <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d8dac:	6828      	ldr	r0, [r5, #0]
   d8dae:	6803      	ldr	r3, [r0, #0]
   d8db0:	691b      	ldr	r3, [r3, #16]
   d8db2:	4798      	blx	r3
   d8db4:	2800      	cmp	r0, #0
   d8db6:	d0f2      	beq.n	d8d9e <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d8db8:	6828      	ldr	r0, [r5, #0]
   d8dba:	6803      	ldr	r3, [r0, #0]
   d8dbc:	695b      	ldr	r3, [r3, #20]
   d8dbe:	4798      	blx	r3
   d8dc0:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d8dc2:	6828      	ldr	r0, [r5, #0]
   d8dc4:	6803      	ldr	r3, [r0, #0]
   d8dc6:	695b      	ldr	r3, [r3, #20]
   d8dc8:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d8dca:	0224      	lsls	r4, r4, #8
   d8dcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d8dd0:	b2c0      	uxtb	r0, r0
   d8dd2:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d8dd4:	bd38      	pop	{r3, r4, r5, pc}

000d8dd6 <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d8dd6:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d8dd8:	f240 2102 	movw	r1, #514	; 0x202
   d8ddc:	f7ff ffcc 	bl	d8d78 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d8de0:	1e43      	subs	r3, r0, #1
   d8de2:	4258      	negs	r0, r3
   d8de4:	4158      	adcs	r0, r3
   d8de6:	bd08      	pop	{r3, pc}

000d8de8 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d8de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dea:	b08b      	sub	sp, #44	; 0x2c
   d8dec:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d8dee:	f7ff fff2 	bl	d8dd6 <_ZN5SPS3013dataAvailableEv>
   d8df2:	4604      	mov	r4, r0
   d8df4:	2800      	cmp	r0, #0
   d8df6:	f000 8104 	beq.w	d9002 <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d8dfa:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d8dfc:	2169      	movs	r1, #105	; 0x69
   d8dfe:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d8e00:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d8e02:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d8e04:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d8e06:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d8e08:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d8e0a:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d8e0c:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d8e0e:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d8e10:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d8e12:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d8e14:	f002 faf4 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d8e18:	2103      	movs	r1, #3
   d8e1a:	6828      	ldr	r0, [r5, #0]
   d8e1c:	f7ff fa0e 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d8e20:	4639      	mov	r1, r7
   d8e22:	6828      	ldr	r0, [r5, #0]
   d8e24:	f7ff fa0a 	bl	d823c <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d8e28:	6828      	ldr	r0, [r5, #0]
   d8e2a:	f002 faf0 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
   d8e2e:	4606      	mov	r6, r0
   d8e30:	2800      	cmp	r0, #0
   d8e32:	f040 80e5 	bne.w	d9000 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d8e36:	223c      	movs	r2, #60	; 0x3c
   d8e38:	2169      	movs	r1, #105	; 0x69
   d8e3a:	6828      	ldr	r0, [r5, #0]
   d8e3c:	f002 facf 	bl	db3de <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d8e40:	6828      	ldr	r0, [r5, #0]
   d8e42:	6803      	ldr	r3, [r0, #0]
   d8e44:	691b      	ldr	r3, [r3, #16]
   d8e46:	4798      	blx	r3
   d8e48:	bb18      	cbnz	r0, d8e92 <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d8e4a:	9800      	ldr	r0, [sp, #0]
   d8e4c:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d8e4e:	9801      	ldr	r0, [sp, #4]
   d8e50:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d8e52:	9802      	ldr	r0, [sp, #8]
   d8e54:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d8e56:	9803      	ldr	r0, [sp, #12]
   d8e58:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d8e5a:	9804      	ldr	r0, [sp, #16]
   d8e5c:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d8e5e:	9805      	ldr	r0, [sp, #20]
   d8e60:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d8e62:	9806      	ldr	r0, [sp, #24]
   d8e64:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d8e66:	9807      	ldr	r0, [sp, #28]
   d8e68:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d8e6a:	9808      	ldr	r0, [sp, #32]
   d8e6c:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d8e6e:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d8e70:	9809      	ldr	r0, [sp, #36]	; 0x24
   d8e72:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d8e74:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d8e78:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d8e7c:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d8e80:	e0bf      	b.n	d9002 <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d8e82:	9b00      	ldr	r3, [sp, #0]
   d8e84:	b2c0      	uxtb	r0, r0
   d8e86:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8e8a:	9000      	str	r0, [sp, #0]
   d8e8c:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d8e8e:	2e3c      	cmp	r6, #60	; 0x3c
   d8e90:	d0db      	beq.n	d8e4a <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d8e92:	6828      	ldr	r0, [r5, #0]
   d8e94:	6803      	ldr	r3, [r0, #0]
   d8e96:	695b      	ldr	r3, [r3, #20]
   d8e98:	4798      	blx	r3

      switch (x)
   d8e9a:	b2f3      	uxtb	r3, r6
   d8e9c:	2b3a      	cmp	r3, #58	; 0x3a
   d8e9e:	d8f5      	bhi.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
   d8ea0:	a201      	add	r2, pc, #4	; (adr r2, d8ea8 <_ZN5SPS3015readMeasurementEv+0xc0>)
   d8ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d8ea6:	bf00      	nop
   d8ea8:	000d8e83 	.word	0x000d8e83
   d8eac:	000d8e83 	.word	0x000d8e83
   d8eb0:	000d8e8d 	.word	0x000d8e8d
   d8eb4:	000d8e83 	.word	0x000d8e83
   d8eb8:	000d8e83 	.word	0x000d8e83
   d8ebc:	000d8e8d 	.word	0x000d8e8d
   d8ec0:	000d8f95 	.word	0x000d8f95
   d8ec4:	000d8f95 	.word	0x000d8f95
   d8ec8:	000d8e8d 	.word	0x000d8e8d
   d8ecc:	000d8f95 	.word	0x000d8f95
   d8ed0:	000d8f95 	.word	0x000d8f95
   d8ed4:	000d8e8d 	.word	0x000d8e8d
   d8ed8:	000d8fa1 	.word	0x000d8fa1
   d8edc:	000d8fa1 	.word	0x000d8fa1
   d8ee0:	000d8e8d 	.word	0x000d8e8d
   d8ee4:	000d8fa1 	.word	0x000d8fa1
   d8ee8:	000d8fa1 	.word	0x000d8fa1
   d8eec:	000d8e8d 	.word	0x000d8e8d
   d8ef0:	000d8fad 	.word	0x000d8fad
   d8ef4:	000d8fad 	.word	0x000d8fad
   d8ef8:	000d8e8d 	.word	0x000d8e8d
   d8efc:	000d8fad 	.word	0x000d8fad
   d8f00:	000d8fad 	.word	0x000d8fad
   d8f04:	000d8e8d 	.word	0x000d8e8d
   d8f08:	000d8fb9 	.word	0x000d8fb9
   d8f0c:	000d8fb9 	.word	0x000d8fb9
   d8f10:	000d8e8d 	.word	0x000d8e8d
   d8f14:	000d8fb9 	.word	0x000d8fb9
   d8f18:	000d8fb9 	.word	0x000d8fb9
   d8f1c:	000d8e8d 	.word	0x000d8e8d
   d8f20:	000d8fc5 	.word	0x000d8fc5
   d8f24:	000d8fc5 	.word	0x000d8fc5
   d8f28:	000d8e8d 	.word	0x000d8e8d
   d8f2c:	000d8fc5 	.word	0x000d8fc5
   d8f30:	000d8fc5 	.word	0x000d8fc5
   d8f34:	000d8e8d 	.word	0x000d8e8d
   d8f38:	000d8fd1 	.word	0x000d8fd1
   d8f3c:	000d8fd1 	.word	0x000d8fd1
   d8f40:	000d8e8d 	.word	0x000d8e8d
   d8f44:	000d8fd1 	.word	0x000d8fd1
   d8f48:	000d8fd1 	.word	0x000d8fd1
   d8f4c:	000d8e8d 	.word	0x000d8e8d
   d8f50:	000d8fdd 	.word	0x000d8fdd
   d8f54:	000d8fdd 	.word	0x000d8fdd
   d8f58:	000d8e8d 	.word	0x000d8e8d
   d8f5c:	000d8fdd 	.word	0x000d8fdd
   d8f60:	000d8fdd 	.word	0x000d8fdd
   d8f64:	000d8e8d 	.word	0x000d8e8d
   d8f68:	000d8fe9 	.word	0x000d8fe9
   d8f6c:	000d8fe9 	.word	0x000d8fe9
   d8f70:	000d8e8d 	.word	0x000d8e8d
   d8f74:	000d8fe9 	.word	0x000d8fe9
   d8f78:	000d8fe9 	.word	0x000d8fe9
   d8f7c:	000d8e8d 	.word	0x000d8e8d
   d8f80:	000d8ff5 	.word	0x000d8ff5
   d8f84:	000d8ff5 	.word	0x000d8ff5
   d8f88:	000d8e8d 	.word	0x000d8e8d
   d8f8c:	000d8ff5 	.word	0x000d8ff5
   d8f90:	000d8ff5 	.word	0x000d8ff5
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   d8f94:	9b01      	ldr	r3, [sp, #4]
   d8f96:	b2c0      	uxtb	r0, r0
   d8f98:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8f9c:	9001      	str	r0, [sp, #4]
   d8f9e:	e775      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   d8fa0:	9b02      	ldr	r3, [sp, #8]
   d8fa2:	b2c0      	uxtb	r0, r0
   d8fa4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8fa8:	9002      	str	r0, [sp, #8]
   d8faa:	e76f      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   d8fac:	9b03      	ldr	r3, [sp, #12]
   d8fae:	b2c0      	uxtb	r0, r0
   d8fb0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8fb4:	9003      	str	r0, [sp, #12]
   d8fb6:	e769      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   d8fb8:	9b04      	ldr	r3, [sp, #16]
   d8fba:	b2c0      	uxtb	r0, r0
   d8fbc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8fc0:	9004      	str	r0, [sp, #16]
   d8fc2:	e763      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   d8fc4:	9b05      	ldr	r3, [sp, #20]
   d8fc6:	b2c0      	uxtb	r0, r0
   d8fc8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d8fcc:	9005      	str	r0, [sp, #20]
   d8fce:	e75d      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   d8fd0:	9b06      	ldr	r3, [sp, #24]
   d8fd2:	b2c0      	uxtb	r0, r0
   d8fd4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   d8fd8:	9306      	str	r3, [sp, #24]
   d8fda:	e757      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   d8fdc:	b2c3      	uxtb	r3, r0
   d8fde:	9807      	ldr	r0, [sp, #28]
   d8fe0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d8fe4:	9307      	str	r3, [sp, #28]
   d8fe6:	e751      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   d8fe8:	b2c3      	uxtb	r3, r0
   d8fea:	9808      	ldr	r0, [sp, #32]
   d8fec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d8ff0:	9308      	str	r3, [sp, #32]
   d8ff2:	e74b      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   d8ff4:	b2c3      	uxtb	r3, r0
   d8ff6:	9809      	ldr	r0, [sp, #36]	; 0x24
   d8ff8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d8ffc:	9309      	str	r3, [sp, #36]	; 0x24
   d8ffe:	e745      	b.n	d8e8c <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   d9000:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   d9002:	4620      	mov	r0, r4
   d9004:	b00b      	add	sp, #44	; 0x2c
   d9006:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9008 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d9008:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   d900a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d900e:	4604      	mov	r4, r0
   d9010:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   d9012:	b10b      	cbz	r3, d9018 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   d9014:	f7ff fee8 	bl	d8de8 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   d9018:	2301      	movs	r3, #1
   d901a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   d901e:	6863      	ldr	r3, [r4, #4]
   d9020:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   d9022:	68a3      	ldr	r3, [r4, #8]
   d9024:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   d9026:	68e3      	ldr	r3, [r4, #12]
   d9028:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   d902a:	6923      	ldr	r3, [r4, #16]
   d902c:	60eb      	str	r3, [r5, #12]
}
   d902e:	bd38      	pop	{r3, r4, r5, pc}

000d9030 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   d9030:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   d9032:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   d9036:	4604      	mov	r4, r0
   d9038:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   d903a:	b10b      	cbz	r3, d9040 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   d903c:	f7ff fed4 	bl	d8de8 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   d9040:	2301      	movs	r3, #1
   d9042:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   d9046:	6963      	ldr	r3, [r4, #20]
   d9048:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   d904a:	69a3      	ldr	r3, [r4, #24]
   d904c:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   d904e:	69e3      	ldr	r3, [r4, #28]
   d9050:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   d9052:	6a23      	ldr	r3, [r4, #32]
   d9054:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   d9056:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9058:	612b      	str	r3, [r5, #16]
}
   d905a:	bd38      	pop	{r3, r4, r5, pc}

000d905c <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d905c:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   d905e:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d9060:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   d9062:	1a63      	subs	r3, r4, r1
   d9064:	b2db      	uxtb	r3, r3
   d9066:	429a      	cmp	r2, r3
   d9068:	d911      	bls.n	d908e <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   d906a:	f814 3b01 	ldrb.w	r3, [r4], #1
   d906e:	4058      	eors	r0, r3
   d9070:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   d9072:	f010 0f80 	tst.w	r0, #128	; 0x80
   d9076:	f103 33ff 	add.w	r3, r3, #4294967295
   d907a:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   d907e:	bf18      	it	ne
   d9080:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d9084:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   d9088:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d908a:	d1f2      	bne.n	d9072 <_ZN5SPS3011computeCRC8EPhh+0x16>
   d908c:	e7e9      	b.n	d9062 <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   d908e:	bd10      	pop	{r4, pc}

000d9090 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9090:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9094:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   d9096:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9098:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   d909a:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d909e:	a901      	add	r1, sp, #4
   d90a0:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d90a2:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   d90a4:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d90a8:	f7ff ffd8 	bl	d905c <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d90ac:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d90ae:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d90b0:	6820      	ldr	r0, [r4, #0]
   d90b2:	f002 f9a5 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   d90b6:	0a39      	lsrs	r1, r7, #8
   d90b8:	6820      	ldr	r0, [r4, #0]
   d90ba:	f7ff f8bf 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   d90be:	b2f9      	uxtb	r1, r7
   d90c0:	6820      	ldr	r0, [r4, #0]
   d90c2:	f7ff f8bb 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   d90c6:	4631      	mov	r1, r6
   d90c8:	6820      	ldr	r0, [r4, #0]
   d90ca:	f7ff f8b7 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   d90ce:	b2e9      	uxtb	r1, r5
   d90d0:	6820      	ldr	r0, [r4, #0]
   d90d2:	f7ff f8b3 	bl	d823c <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   d90d6:	6820      	ldr	r0, [r4, #0]
   d90d8:	6803      	ldr	r3, [r0, #0]
   d90da:	4641      	mov	r1, r8
   d90dc:	689b      	ldr	r3, [r3, #8]
   d90de:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d90e0:	6820      	ldr	r0, [r4, #0]
   d90e2:	f002 f994 	bl	db40e <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   d90e6:	fab0 f080 	clz	r0, r0
   d90ea:	0940      	lsrs	r0, r0, #5
   d90ec:	b002      	add	sp, #8
   d90ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d90f2 <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   d90f2:	f44f 7240 	mov.w	r2, #768	; 0x300
   d90f6:	2110      	movs	r1, #16
   d90f8:	f7ff bfca 	b.w	d9090 <_ZN5SPS3011sendCommandEtt>

000d90fc <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   d90fc:	b510      	push	{r4, lr}
   d90fe:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d9100:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   d9102:	4608      	mov	r0, r1
   d9104:	f002 f958 	bl	db3b8 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d9108:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   d910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d910e:	f7ff bff0 	b.w	d90f2 <_ZN5SPS3014beginMeasuringEv>

000d9112 <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   d9112:	f000 b8f9 	b.w	d9308 <HAL_Pin_Map>

000d9116 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d9116:	f04f 33ff 	mov.w	r3, #4294967295
   d911a:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d911e:	4770      	bx	lr

000d9120 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d9120:	b570      	push	{r4, r5, r6, lr}
   d9122:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9124:	f000 f8c2 	bl	d92ac <_Z11BlynkMillisv>
   d9128:	2400      	movs	r4, #0
   d912a:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d912c:	1928      	adds	r0, r5, r4
   d912e:	2224      	movs	r2, #36	; 0x24
   d9130:	2100      	movs	r1, #0
   d9132:	f009 f952 	bl	e23da <memset>
        timer[i].prev_millis = current_millis;
   d9136:	512e      	str	r6, [r5, r4]
   d9138:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   d913a:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   d913e:	d1f5      	bne.n	d912c <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   d9140:	2300      	movs	r3, #0
   d9142:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   d9146:	bd70      	pop	{r4, r5, r6, pc}

000d9148 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d9148:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d914c:	2b0f      	cmp	r3, #15
   d914e:	dc08      	bgt.n	d9162 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   d9150:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   d9152:	2224      	movs	r2, #36	; 0x24
   d9154:	fb02 0103 	mla	r1, r2, r3, r0
   d9158:	6849      	ldr	r1, [r1, #4]
   d915a:	b129      	cbz	r1, d9168 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d915c:	3301      	adds	r3, #1
   d915e:	2b10      	cmp	r3, #16
   d9160:	d1f8      	bne.n	d9154 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   d9162:	f04f 30ff 	mov.w	r0, #4294967295
   d9166:	4770      	bx	lr
   d9168:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   d916a:	4770      	bx	lr

000d916c <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9170:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d9172:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d9176:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d9178:	4605      	mov	r5, r0
   d917a:	4689      	mov	r9, r1
   d917c:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   d917e:	da01      	bge.n	d9184 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d9180:	f7ff ffce 	bl	d9120 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d9184:	4628      	mov	r0, r5
   d9186:	f7ff ffdf 	bl	d9148 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d918a:	1e04      	subs	r4, r0, #0
   d918c:	db1a      	blt.n	d91c4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   d918e:	b1cf      	cbz	r7, d91c4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   d9190:	2624      	movs	r6, #36	; 0x24
   d9192:	4366      	muls	r6, r4
   d9194:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d9196:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d919a:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   d919c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d919e:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   d91a0:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   d91a2:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   d91a6:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   d91a8:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   d91ac:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d91ae:	f000 f87d 	bl	d92ac <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   d91b2:	51a8      	str	r0, [r5, r6]

    numTimers++;
   d91b4:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   d91b8:	3301      	adds	r3, #1
   d91ba:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   d91be:	4620      	mov	r0, r4
   d91c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   d91c4:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   d91c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d91cc <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d91cc:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d91ce:	2300      	movs	r3, #0
   d91d0:	9301      	str	r3, [sp, #4]
   d91d2:	9300      	str	r3, [sp, #0]
   d91d4:	f7ff ffca 	bl	d916c <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d91d8:	b003      	add	sp, #12
   d91da:	f85d fb04 	ldr.w	pc, [sp], #4

000d91de <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d91de:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   d91e0:	b538      	push	{r3, r4, r5, lr}
   d91e2:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d91e4:	d813      	bhi.n	d920e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d91e6:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d91ea:	b183      	cbz	r3, d920e <_ZN10BlynkTimer11deleteTimerEj+0x30>
   d91ec:	2224      	movs	r2, #36	; 0x24
   d91ee:	fb02 f501 	mul.w	r5, r2, r1
   d91f2:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d91f4:	6843      	ldr	r3, [r0, #4]
   d91f6:	b153      	cbz	r3, d920e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d91f8:	2100      	movs	r1, #0
   d91fa:	f009 f8ee 	bl	e23da <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d91fe:	f000 f855 	bl	d92ac <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   d9202:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d9204:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d9208:	3b01      	subs	r3, #1
   d920a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   d920e:	bd38      	pop	{r3, r4, r5, pc}

000d9210 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   d9210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9214:	4605      	mov	r5, r0
   d9216:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d921a:	f000 f847 	bl	d92ac <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d921e:	2601      	movs	r6, #1
   d9220:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d9222:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d9226:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d922a:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d922c:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d9230:	b1e2      	cbz	r2, d926c <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d9232:	f853 8c04 	ldr.w	r8, [r3, #-4]
   d9236:	68dc      	ldr	r4, [r3, #12]
   d9238:	ebc8 0200 	rsb	r2, r8, r0
   d923c:	42a2      	cmp	r2, r4
   d923e:	d315      	bcc.n	d926c <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d9240:	fbb2 f1f4 	udiv	r1, r2, r4
   d9244:	fb04 8201 	mla	r2, r4, r1, r8
   d9248:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   d924c:	7e1a      	ldrb	r2, [r3, #24]
   d924e:	b16a      	cbz	r2, d926c <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d9250:	6919      	ldr	r1, [r3, #16]
   d9252:	b909      	cbnz	r1, d9258 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9254:	61de      	str	r6, [r3, #28]
   d9256:	e009      	b.n	d926c <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d9258:	695a      	ldr	r2, [r3, #20]
   d925a:	4291      	cmp	r1, r2
   d925c:	d906      	bls.n	d926c <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   d925e:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d9260:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9262:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   d9264:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d9266:	bf98      	it	ls
   d9268:	f8c3 c01c 	strls.w	ip, [r3, #28]
   d926c:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   d926e:	42bb      	cmp	r3, r7
   d9270:	d1db      	bne.n	d922a <_ZN10BlynkTimer3runEv+0x1a>
   d9272:	462c      	mov	r4, r5
   d9274:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d9276:	6a23      	ldr	r3, [r4, #32]
   d9278:	b16b      	cbz	r3, d9296 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   d927a:	7b22      	ldrb	r2, [r4, #12]
   d927c:	6863      	ldr	r3, [r4, #4]
   d927e:	b112      	cbz	r2, d9286 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d9280:	68a0      	ldr	r0, [r4, #8]
   d9282:	4798      	blx	r3
   d9284:	e000      	b.n	d9288 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   d9286:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d9288:	6a23      	ldr	r3, [r4, #32]
   d928a:	2b02      	cmp	r3, #2
   d928c:	d103      	bne.n	d9296 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   d928e:	4631      	mov	r1, r6
   d9290:	4628      	mov	r0, r5
   d9292:	f7ff ffa4 	bl	d91de <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   d9296:	3601      	adds	r6, #1
   d9298:	2e10      	cmp	r6, #16
   d929a:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d929e:	d1ea      	bne.n	d9276 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   d92a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d92a4 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d92a4:	f000 b830 	b.w	d9308 <HAL_Pin_Map>

000d92a8 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d92a8:	f001 b966 	b.w	da578 <delay>

000d92ac <_Z11BlynkMillisv>:
   d92ac:	f000 b8ac 	b.w	d9408 <HAL_Timer_Get_Milli_Seconds>

000d92b0 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d92b0:	f000 b82a 	b.w	d9308 <HAL_Pin_Map>

000d92b4 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d92b4:	4770      	bx	lr

000d92b6 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d92b6:	4770      	bx	lr

000d92b8 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d92b8:	4770      	bx	lr
	...

000d92bc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d92bc:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d92be:	bf9a      	itte	ls
   d92c0:	4b02      	ldrls	r3, [pc, #8]	; (d92cc <GetReadHandler+0x10>)
   d92c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d92c6:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d92c8:	4770      	bx	lr
   d92ca:	bf00      	nop
   d92cc:	000e6488 	.word	0x000e6488

000d92d0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d92d0:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d92d2:	bf9a      	itte	ls
   d92d4:	4b02      	ldrls	r3, [pc, #8]	; (d92e0 <GetWriteHandler+0x10>)
   d92d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d92da:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d92dc:	4770      	bx	lr
   d92de:	bf00      	nop
   d92e0:	000e6288 	.word	0x000e6288

000d92e4 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d92e4:	f000 b810 	b.w	d9308 <HAL_Pin_Map>

000d92e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d92e8:	b508      	push	{r3, lr}
   d92ea:	4b02      	ldr	r3, [pc, #8]	; (d92f4 <netdb_freeaddrinfo+0xc>)
   d92ec:	681b      	ldr	r3, [r3, #0]
   d92ee:	689b      	ldr	r3, [r3, #8]
   d92f0:	9301      	str	r3, [sp, #4]
   d92f2:	bd08      	pop	{r3, pc}
   d92f4:	00030268 	.word	0x00030268

000d92f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d92f8:	b508      	push	{r3, lr}
   d92fa:	4b02      	ldr	r3, [pc, #8]	; (d9304 <netdb_getaddrinfo+0xc>)
   d92fc:	681b      	ldr	r3, [r3, #0]
   d92fe:	68db      	ldr	r3, [r3, #12]
   d9300:	9301      	str	r3, [sp, #4]
   d9302:	bd08      	pop	{r3, pc}
   d9304:	00030268 	.word	0x00030268

000d9308 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d9308:	b508      	push	{r3, lr}
   d930a:	4b02      	ldr	r3, [pc, #8]	; (d9314 <HAL_Pin_Map+0xc>)
   d930c:	681b      	ldr	r3, [r3, #0]
   d930e:	681b      	ldr	r3, [r3, #0]
   d9310:	9301      	str	r3, [sp, #4]
   d9312:	bd08      	pop	{r3, pc}
   d9314:	0003022c 	.word	0x0003022c

000d9318 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d9318:	b508      	push	{r3, lr}
   d931a:	4b02      	ldr	r3, [pc, #8]	; (d9324 <HAL_Validate_Pin_Function+0xc>)
   d931c:	681b      	ldr	r3, [r3, #0]
   d931e:	685b      	ldr	r3, [r3, #4]
   d9320:	9301      	str	r3, [sp, #4]
   d9322:	bd08      	pop	{r3, pc}
   d9324:	0003022c 	.word	0x0003022c

000d9328 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d9328:	b508      	push	{r3, lr}
   d932a:	4b02      	ldr	r3, [pc, #8]	; (d9334 <HAL_Pin_Mode+0xc>)
   d932c:	681b      	ldr	r3, [r3, #0]
   d932e:	689b      	ldr	r3, [r3, #8]
   d9330:	9301      	str	r3, [sp, #4]
   d9332:	bd08      	pop	{r3, pc}
   d9334:	0003022c 	.word	0x0003022c

000d9338 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d9338:	b508      	push	{r3, lr}
   d933a:	4b02      	ldr	r3, [pc, #8]	; (d9344 <HAL_Get_Pin_Mode+0xc>)
   d933c:	681b      	ldr	r3, [r3, #0]
   d933e:	68db      	ldr	r3, [r3, #12]
   d9340:	9301      	str	r3, [sp, #4]
   d9342:	bd08      	pop	{r3, pc}
   d9344:	0003022c 	.word	0x0003022c

000d9348 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d9348:	b508      	push	{r3, lr}
   d934a:	4b02      	ldr	r3, [pc, #8]	; (d9354 <HAL_GPIO_Write+0xc>)
   d934c:	681b      	ldr	r3, [r3, #0]
   d934e:	691b      	ldr	r3, [r3, #16]
   d9350:	9301      	str	r3, [sp, #4]
   d9352:	bd08      	pop	{r3, pc}
   d9354:	0003022c 	.word	0x0003022c

000d9358 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d9358:	b508      	push	{r3, lr}
   d935a:	4b02      	ldr	r3, [pc, #8]	; (d9364 <HAL_GPIO_Read+0xc>)
   d935c:	681b      	ldr	r3, [r3, #0]
   d935e:	695b      	ldr	r3, [r3, #20]
   d9360:	9301      	str	r3, [sp, #4]
   d9362:	bd08      	pop	{r3, pc}
   d9364:	0003022c 	.word	0x0003022c

000d9368 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d9368:	b508      	push	{r3, lr}
   d936a:	4b02      	ldr	r3, [pc, #8]	; (d9374 <HAL_Interrupts_Attach+0xc>)
   d936c:	681b      	ldr	r3, [r3, #0]
   d936e:	699b      	ldr	r3, [r3, #24]
   d9370:	9301      	str	r3, [sp, #4]
   d9372:	bd08      	pop	{r3, pc}
   d9374:	0003022c 	.word	0x0003022c

000d9378 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d9378:	b508      	push	{r3, lr}
   d937a:	4b02      	ldr	r3, [pc, #8]	; (d9384 <HAL_Interrupts_Detach+0xc>)
   d937c:	681b      	ldr	r3, [r3, #0]
   d937e:	69db      	ldr	r3, [r3, #28]
   d9380:	9301      	str	r3, [sp, #4]
   d9382:	bd08      	pop	{r3, pc}
   d9384:	0003022c 	.word	0x0003022c

000d9388 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d9388:	b508      	push	{r3, lr}
   d938a:	4b02      	ldr	r3, [pc, #8]	; (d9394 <HAL_DAC_Write+0xc>)
   d938c:	681b      	ldr	r3, [r3, #0]
   d938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9390:	9301      	str	r3, [sp, #4]
   d9392:	bd08      	pop	{r3, pc}
   d9394:	0003022c 	.word	0x0003022c

000d9398 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d9398:	b508      	push	{r3, lr}
   d939a:	4b02      	ldr	r3, [pc, #8]	; (d93a4 <HAL_ADC_Read+0xc>)
   d939c:	681b      	ldr	r3, [r3, #0]
   d939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d93a0:	9301      	str	r3, [sp, #4]
   d93a2:	bd08      	pop	{r3, pc}
   d93a4:	0003022c 	.word	0x0003022c

000d93a8 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d93a8:	b508      	push	{r3, lr}
   d93aa:	4b02      	ldr	r3, [pc, #8]	; (d93b4 <HAL_PWM_Write_Ext+0xc>)
   d93ac:	681b      	ldr	r3, [r3, #0]
   d93ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d93b0:	9301      	str	r3, [sp, #4]
   d93b2:	bd08      	pop	{r3, pc}
   d93b4:	0003022c 	.word	0x0003022c

000d93b8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d93b8:	b508      	push	{r3, lr}
   d93ba:	4b02      	ldr	r3, [pc, #8]	; (d93c4 <HAL_SPI_Send_Receive_Data+0xc>)
   d93bc:	681b      	ldr	r3, [r3, #0]
   d93be:	695b      	ldr	r3, [r3, #20]
   d93c0:	9301      	str	r3, [sp, #4]
   d93c2:	bd08      	pop	{r3, pc}
   d93c4:	00030230 	.word	0x00030230

000d93c8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d93c8:	b508      	push	{r3, lr}
   d93ca:	4b02      	ldr	r3, [pc, #8]	; (d93d4 <HAL_SPI_Init+0xc>)
   d93cc:	681b      	ldr	r3, [r3, #0]
   d93ce:	69db      	ldr	r3, [r3, #28]
   d93d0:	9301      	str	r3, [sp, #4]
   d93d2:	bd08      	pop	{r3, pc}
   d93d4:	00030230 	.word	0x00030230

000d93d8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d93d8:	b508      	push	{r3, lr}
   d93da:	4b02      	ldr	r3, [pc, #8]	; (d93e4 <HAL_SPI_Is_Enabled+0xc>)
   d93dc:	681b      	ldr	r3, [r3, #0]
   d93de:	6a1b      	ldr	r3, [r3, #32]
   d93e0:	9301      	str	r3, [sp, #4]
   d93e2:	bd08      	pop	{r3, pc}
   d93e4:	00030230 	.word	0x00030230

000d93e8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d93e8:	b508      	push	{r3, lr}
   d93ea:	4b02      	ldr	r3, [pc, #8]	; (d93f4 <if_index_to_name+0xc>)
   d93ec:	681b      	ldr	r3, [r3, #0]
   d93ee:	695b      	ldr	r3, [r3, #20]
   d93f0:	9301      	str	r3, [sp, #4]
   d93f2:	bd08      	pop	{r3, pc}
   d93f4:	0003026c 	.word	0x0003026c

000d93f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d93f8:	b508      	push	{r3, lr}
   d93fa:	4b02      	ldr	r3, [pc, #8]	; (d9404 <HAL_RNG_GetRandomNumber+0xc>)
   d93fc:	681b      	ldr	r3, [r3, #0]
   d93fe:	685b      	ldr	r3, [r3, #4]
   d9400:	9301      	str	r3, [sp, #4]
   d9402:	bd08      	pop	{r3, pc}
   d9404:	00030218 	.word	0x00030218

000d9408 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9408:	b508      	push	{r3, lr}
   d940a:	4b02      	ldr	r3, [pc, #8]	; (d9414 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d940c:	681b      	ldr	r3, [r3, #0]
   d940e:	695b      	ldr	r3, [r3, #20]
   d9410:	9301      	str	r3, [sp, #4]
   d9412:	bd08      	pop	{r3, pc}
   d9414:	00030218 	.word	0x00030218

000d9418 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d9418:	b508      	push	{r3, lr}
   d941a:	4b02      	ldr	r3, [pc, #8]	; (d9424 <HAL_RTC_Get_UnixTime+0xc>)
   d941c:	681b      	ldr	r3, [r3, #0]
   d941e:	69db      	ldr	r3, [r3, #28]
   d9420:	9301      	str	r3, [sp, #4]
   d9422:	bd08      	pop	{r3, pc}
   d9424:	00030218 	.word	0x00030218

000d9428 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d9428:	b508      	push	{r3, lr}
   d942a:	4b02      	ldr	r3, [pc, #8]	; (d9434 <HAL_RTC_Time_Is_Valid+0xc>)
   d942c:	681b      	ldr	r3, [r3, #0]
   d942e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9430:	9301      	str	r3, [sp, #4]
   d9432:	bd08      	pop	{r3, pc}
   d9434:	00030218 	.word	0x00030218

000d9438 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d9438:	b508      	push	{r3, lr}
   d943a:	4b02      	ldr	r3, [pc, #8]	; (d9444 <HAL_Core_System_Reset_Ex+0xc>)
   d943c:	681b      	ldr	r3, [r3, #0]
   d943e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d9440:	9301      	str	r3, [sp, #4]
   d9442:	bd08      	pop	{r3, pc}
   d9444:	00030234 	.word	0x00030234

000d9448 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d9448:	b508      	push	{r3, lr}
   d944a:	4b02      	ldr	r3, [pc, #8]	; (d9454 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d944c:	681b      	ldr	r3, [r3, #0]
   d944e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d9450:	9301      	str	r3, [sp, #4]
   d9452:	bd08      	pop	{r3, pc}
   d9454:	00030234 	.word	0x00030234

000d9458 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d9458:	b508      	push	{r3, lr}
   d945a:	4b02      	ldr	r3, [pc, #8]	; (d9464 <os_thread_is_current+0xc>)
   d945c:	681b      	ldr	r3, [r3, #0]
   d945e:	689b      	ldr	r3, [r3, #8]
   d9460:	9301      	str	r3, [sp, #4]
   d9462:	bd08      	pop	{r3, pc}
   d9464:	00030248 	.word	0x00030248

000d9468 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d9468:	b508      	push	{r3, lr}
   d946a:	4b02      	ldr	r3, [pc, #8]	; (d9474 <os_thread_join+0xc>)
   d946c:	681b      	ldr	r3, [r3, #0]
   d946e:	691b      	ldr	r3, [r3, #16]
   d9470:	9301      	str	r3, [sp, #4]
   d9472:	bd08      	pop	{r3, pc}
   d9474:	00030248 	.word	0x00030248

000d9478 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d9478:	b508      	push	{r3, lr}
   d947a:	4b02      	ldr	r3, [pc, #8]	; (d9484 <os_thread_cleanup+0xc>)
   d947c:	681b      	ldr	r3, [r3, #0]
   d947e:	695b      	ldr	r3, [r3, #20]
   d9480:	9301      	str	r3, [sp, #4]
   d9482:	bd08      	pop	{r3, pc}
   d9484:	00030248 	.word	0x00030248

000d9488 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d9488:	b508      	push	{r3, lr}
   d948a:	4b02      	ldr	r3, [pc, #8]	; (d9494 <os_mutex_create+0xc>)
   d948c:	681b      	ldr	r3, [r3, #0]
   d948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9490:	9301      	str	r3, [sp, #4]
   d9492:	bd08      	pop	{r3, pc}
   d9494:	00030248 	.word	0x00030248

000d9498 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d9498:	b508      	push	{r3, lr}
   d949a:	4b02      	ldr	r3, [pc, #8]	; (d94a4 <os_mutex_recursive_create+0xc>)
   d949c:	681b      	ldr	r3, [r3, #0]
   d949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d94a0:	9301      	str	r3, [sp, #4]
   d94a2:	bd08      	pop	{r3, pc}
   d94a4:	00030248 	.word	0x00030248

000d94a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d94a8:	b508      	push	{r3, lr}
   d94aa:	4b02      	ldr	r3, [pc, #8]	; (d94b4 <inet_inet_ntop+0xc>)
   d94ac:	681b      	ldr	r3, [r3, #0]
   d94ae:	695b      	ldr	r3, [r3, #20]
   d94b0:	9301      	str	r3, [sp, #4]
   d94b2:	bd08      	pop	{r3, pc}
   d94b4:	00030264 	.word	0x00030264

000d94b8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d94b8:	b508      	push	{r3, lr}
   d94ba:	4b02      	ldr	r3, [pc, #8]	; (d94c4 <inet_htonl+0xc>)
   d94bc:	681b      	ldr	r3, [r3, #0]
   d94be:	6a1b      	ldr	r3, [r3, #32]
   d94c0:	9301      	str	r3, [sp, #4]
   d94c2:	bd08      	pop	{r3, pc}
   d94c4:	00030264 	.word	0x00030264

000d94c8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d94c8:	b508      	push	{r3, lr}
   d94ca:	4b02      	ldr	r3, [pc, #8]	; (d94d4 <inet_htons+0xc>)
   d94cc:	681b      	ldr	r3, [r3, #0]
   d94ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d94d0:	9301      	str	r3, [sp, #4]
   d94d2:	bd08      	pop	{r3, pc}
   d94d4:	00030264 	.word	0x00030264

000d94d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d94d8:	b508      	push	{r3, lr}
   d94da:	4b02      	ldr	r3, [pc, #8]	; (d94e4 <HAL_USART_Init+0xc>)
   d94dc:	681b      	ldr	r3, [r3, #0]
   d94de:	681b      	ldr	r3, [r3, #0]
   d94e0:	9301      	str	r3, [sp, #4]
   d94e2:	bd08      	pop	{r3, pc}
   d94e4:	0003023c 	.word	0x0003023c

000d94e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d94e8:	b508      	push	{r3, lr}
   d94ea:	4b02      	ldr	r3, [pc, #8]	; (d94f4 <HAL_USART_Write_Data+0xc>)
   d94ec:	681b      	ldr	r3, [r3, #0]
   d94ee:	68db      	ldr	r3, [r3, #12]
   d94f0:	9301      	str	r3, [sp, #4]
   d94f2:	bd08      	pop	{r3, pc}
   d94f4:	0003023c 	.word	0x0003023c

000d94f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d94f8:	b508      	push	{r3, lr}
   d94fa:	4b02      	ldr	r3, [pc, #8]	; (d9504 <HAL_USART_Available_Data+0xc>)
   d94fc:	681b      	ldr	r3, [r3, #0]
   d94fe:	691b      	ldr	r3, [r3, #16]
   d9500:	9301      	str	r3, [sp, #4]
   d9502:	bd08      	pop	{r3, pc}
   d9504:	0003023c 	.word	0x0003023c

000d9508 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d9508:	b508      	push	{r3, lr}
   d950a:	4b02      	ldr	r3, [pc, #8]	; (d9514 <HAL_USART_Read_Data+0xc>)
   d950c:	681b      	ldr	r3, [r3, #0]
   d950e:	695b      	ldr	r3, [r3, #20]
   d9510:	9301      	str	r3, [sp, #4]
   d9512:	bd08      	pop	{r3, pc}
   d9514:	0003023c 	.word	0x0003023c

000d9518 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d9518:	b508      	push	{r3, lr}
   d951a:	4b02      	ldr	r3, [pc, #8]	; (d9524 <HAL_USART_Peek_Data+0xc>)
   d951c:	681b      	ldr	r3, [r3, #0]
   d951e:	699b      	ldr	r3, [r3, #24]
   d9520:	9301      	str	r3, [sp, #4]
   d9522:	bd08      	pop	{r3, pc}
   d9524:	0003023c 	.word	0x0003023c

000d9528 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d9528:	b508      	push	{r3, lr}
   d952a:	4b02      	ldr	r3, [pc, #8]	; (d9534 <HAL_USART_Flush_Data+0xc>)
   d952c:	681b      	ldr	r3, [r3, #0]
   d952e:	69db      	ldr	r3, [r3, #28]
   d9530:	9301      	str	r3, [sp, #4]
   d9532:	bd08      	pop	{r3, pc}
   d9534:	0003023c 	.word	0x0003023c

000d9538 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d9538:	b508      	push	{r3, lr}
   d953a:	4b02      	ldr	r3, [pc, #8]	; (d9544 <HAL_USART_Is_Enabled+0xc>)
   d953c:	681b      	ldr	r3, [r3, #0]
   d953e:	6a1b      	ldr	r3, [r3, #32]
   d9540:	9301      	str	r3, [sp, #4]
   d9542:	bd08      	pop	{r3, pc}
   d9544:	0003023c 	.word	0x0003023c

000d9548 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d9548:	b508      	push	{r3, lr}
   d954a:	4b02      	ldr	r3, [pc, #8]	; (d9554 <HAL_USART_Available_Data_For_Write+0xc>)
   d954c:	681b      	ldr	r3, [r3, #0]
   d954e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9550:	9301      	str	r3, [sp, #4]
   d9552:	bd08      	pop	{r3, pc}
   d9554:	0003023c 	.word	0x0003023c

000d9558 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d9558:	b508      	push	{r3, lr}
   d955a:	4b02      	ldr	r3, [pc, #8]	; (d9564 <HAL_USART_BeginConfig+0xc>)
   d955c:	681b      	ldr	r3, [r3, #0]
   d955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9560:	9301      	str	r3, [sp, #4]
   d9562:	bd08      	pop	{r3, pc}
   d9564:	0003023c 	.word	0x0003023c

000d9568 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d9568:	b508      	push	{r3, lr}
   d956a:	4b02      	ldr	r3, [pc, #8]	; (d9574 <HAL_I2C_Set_Speed+0xc>)
   d956c:	681b      	ldr	r3, [r3, #0]
   d956e:	681b      	ldr	r3, [r3, #0]
   d9570:	9301      	str	r3, [sp, #4]
   d9572:	bd08      	pop	{r3, pc}
   d9574:	00030228 	.word	0x00030228

000d9578 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d9578:	b508      	push	{r3, lr}
   d957a:	4b02      	ldr	r3, [pc, #8]	; (d9584 <HAL_I2C_Begin+0xc>)
   d957c:	681b      	ldr	r3, [r3, #0]
   d957e:	68db      	ldr	r3, [r3, #12]
   d9580:	9301      	str	r3, [sp, #4]
   d9582:	bd08      	pop	{r3, pc}
   d9584:	00030228 	.word	0x00030228

000d9588 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   d9588:	b508      	push	{r3, lr}
   d958a:	4b02      	ldr	r3, [pc, #8]	; (d9594 <HAL_I2C_End+0xc>)
   d958c:	681b      	ldr	r3, [r3, #0]
   d958e:	691b      	ldr	r3, [r3, #16]
   d9590:	9301      	str	r3, [sp, #4]
   d9592:	bd08      	pop	{r3, pc}
   d9594:	00030228 	.word	0x00030228

000d9598 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d9598:	b508      	push	{r3, lr}
   d959a:	4b02      	ldr	r3, [pc, #8]	; (d95a4 <HAL_I2C_Request_Data+0xc>)
   d959c:	681b      	ldr	r3, [r3, #0]
   d959e:	695b      	ldr	r3, [r3, #20]
   d95a0:	9301      	str	r3, [sp, #4]
   d95a2:	bd08      	pop	{r3, pc}
   d95a4:	00030228 	.word	0x00030228

000d95a8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d95a8:	b508      	push	{r3, lr}
   d95aa:	4b02      	ldr	r3, [pc, #8]	; (d95b4 <HAL_I2C_Begin_Transmission+0xc>)
   d95ac:	681b      	ldr	r3, [r3, #0]
   d95ae:	699b      	ldr	r3, [r3, #24]
   d95b0:	9301      	str	r3, [sp, #4]
   d95b2:	bd08      	pop	{r3, pc}
   d95b4:	00030228 	.word	0x00030228

000d95b8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d95b8:	b508      	push	{r3, lr}
   d95ba:	4b02      	ldr	r3, [pc, #8]	; (d95c4 <HAL_I2C_End_Transmission+0xc>)
   d95bc:	681b      	ldr	r3, [r3, #0]
   d95be:	69db      	ldr	r3, [r3, #28]
   d95c0:	9301      	str	r3, [sp, #4]
   d95c2:	bd08      	pop	{r3, pc}
   d95c4:	00030228 	.word	0x00030228

000d95c8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d95c8:	b508      	push	{r3, lr}
   d95ca:	4b02      	ldr	r3, [pc, #8]	; (d95d4 <HAL_I2C_Write_Data+0xc>)
   d95cc:	681b      	ldr	r3, [r3, #0]
   d95ce:	6a1b      	ldr	r3, [r3, #32]
   d95d0:	9301      	str	r3, [sp, #4]
   d95d2:	bd08      	pop	{r3, pc}
   d95d4:	00030228 	.word	0x00030228

000d95d8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d95d8:	b508      	push	{r3, lr}
   d95da:	4b02      	ldr	r3, [pc, #8]	; (d95e4 <HAL_I2C_Available_Data+0xc>)
   d95dc:	681b      	ldr	r3, [r3, #0]
   d95de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d95e0:	9301      	str	r3, [sp, #4]
   d95e2:	bd08      	pop	{r3, pc}
   d95e4:	00030228 	.word	0x00030228

000d95e8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d95e8:	b508      	push	{r3, lr}
   d95ea:	4b02      	ldr	r3, [pc, #8]	; (d95f4 <HAL_I2C_Read_Data+0xc>)
   d95ec:	681b      	ldr	r3, [r3, #0]
   d95ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d95f0:	9301      	str	r3, [sp, #4]
   d95f2:	bd08      	pop	{r3, pc}
   d95f4:	00030228 	.word	0x00030228

000d95f8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d95f8:	b508      	push	{r3, lr}
   d95fa:	4b02      	ldr	r3, [pc, #8]	; (d9604 <HAL_I2C_Peek_Data+0xc>)
   d95fc:	681b      	ldr	r3, [r3, #0]
   d95fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9600:	9301      	str	r3, [sp, #4]
   d9602:	bd08      	pop	{r3, pc}
   d9604:	00030228 	.word	0x00030228

000d9608 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d9608:	b508      	push	{r3, lr}
   d960a:	4b02      	ldr	r3, [pc, #8]	; (d9614 <HAL_I2C_Flush_Data+0xc>)
   d960c:	681b      	ldr	r3, [r3, #0]
   d960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9610:	9301      	str	r3, [sp, #4]
   d9612:	bd08      	pop	{r3, pc}
   d9614:	00030228 	.word	0x00030228

000d9618 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d9618:	b508      	push	{r3, lr}
   d961a:	4b02      	ldr	r3, [pc, #8]	; (d9624 <HAL_I2C_Is_Enabled+0xc>)
   d961c:	681b      	ldr	r3, [r3, #0]
   d961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9620:	9301      	str	r3, [sp, #4]
   d9622:	bd08      	pop	{r3, pc}
   d9624:	00030228 	.word	0x00030228

000d9628 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d9628:	b508      	push	{r3, lr}
   d962a:	4b02      	ldr	r3, [pc, #8]	; (d9634 <HAL_I2C_Init+0xc>)
   d962c:	681b      	ldr	r3, [r3, #0]
   d962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9630:	9301      	str	r3, [sp, #4]
   d9632:	bd08      	pop	{r3, pc}
   d9634:	00030228 	.word	0x00030228

000d9638 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   d9638:	b508      	push	{r3, lr}
   d963a:	4b02      	ldr	r3, [pc, #8]	; (d9644 <HAL_I2C_Reset+0xc>)
   d963c:	681b      	ldr	r3, [r3, #0]
   d963e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9640:	9301      	str	r3, [sp, #4]
   d9642:	bd08      	pop	{r3, pc}
   d9644:	00030228 	.word	0x00030228

000d9648 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d9648:	b508      	push	{r3, lr}
   d964a:	4b02      	ldr	r3, [pc, #8]	; (d9654 <HAL_I2C_Acquire+0xc>)
   d964c:	681b      	ldr	r3, [r3, #0]
   d964e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9650:	9301      	str	r3, [sp, #4]
   d9652:	bd08      	pop	{r3, pc}
   d9654:	00030228 	.word	0x00030228

000d9658 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d9658:	b508      	push	{r3, lr}
   d965a:	4b02      	ldr	r3, [pc, #8]	; (d9664 <HAL_I2C_Release+0xc>)
   d965c:	681b      	ldr	r3, [r3, #0]
   d965e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9660:	9301      	str	r3, [sp, #4]
   d9662:	bd08      	pop	{r3, pc}
   d9664:	00030228 	.word	0x00030228

000d9668 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d9668:	b508      	push	{r3, lr}
   d966a:	4b02      	ldr	r3, [pc, #8]	; (d9674 <sock_setsockopt+0xc>)
   d966c:	681b      	ldr	r3, [r3, #0]
   d966e:	699b      	ldr	r3, [r3, #24]
   d9670:	9301      	str	r3, [sp, #4]
   d9672:	bd08      	pop	{r3, pc}
   d9674:	00030238 	.word	0x00030238

000d9678 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d9678:	b508      	push	{r3, lr}
   d967a:	4b02      	ldr	r3, [pc, #8]	; (d9684 <sock_close+0xc>)
   d967c:	681b      	ldr	r3, [r3, #0]
   d967e:	69db      	ldr	r3, [r3, #28]
   d9680:	9301      	str	r3, [sp, #4]
   d9682:	bd08      	pop	{r3, pc}
   d9684:	00030238 	.word	0x00030238

000d9688 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d9688:	b508      	push	{r3, lr}
   d968a:	4b02      	ldr	r3, [pc, #8]	; (d9694 <sock_connect+0xc>)
   d968c:	681b      	ldr	r3, [r3, #0]
   d968e:	6a1b      	ldr	r3, [r3, #32]
   d9690:	9301      	str	r3, [sp, #4]
   d9692:	bd08      	pop	{r3, pc}
   d9694:	00030238 	.word	0x00030238

000d9698 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d9698:	b508      	push	{r3, lr}
   d969a:	4b02      	ldr	r3, [pc, #8]	; (d96a4 <sock_recv+0xc>)
   d969c:	681b      	ldr	r3, [r3, #0]
   d969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d96a0:	9301      	str	r3, [sp, #4]
   d96a2:	bd08      	pop	{r3, pc}
   d96a4:	00030238 	.word	0x00030238

000d96a8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d96a8:	b508      	push	{r3, lr}
   d96aa:	4b02      	ldr	r3, [pc, #8]	; (d96b4 <sock_send+0xc>)
   d96ac:	681b      	ldr	r3, [r3, #0]
   d96ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d96b0:	9301      	str	r3, [sp, #4]
   d96b2:	bd08      	pop	{r3, pc}
   d96b4:	00030238 	.word	0x00030238

000d96b8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d96b8:	b508      	push	{r3, lr}
   d96ba:	4b02      	ldr	r3, [pc, #8]	; (d96c4 <sock_socket+0xc>)
   d96bc:	681b      	ldr	r3, [r3, #0]
   d96be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d96c0:	9301      	str	r3, [sp, #4]
   d96c2:	bd08      	pop	{r3, pc}
   d96c4:	00030238 	.word	0x00030238

000d96c8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d96c8:	b508      	push	{r3, lr}
   d96ca:	4b02      	ldr	r3, [pc, #8]	; (d96d4 <cellular_signal+0xc>)
   d96cc:	681b      	ldr	r3, [r3, #0]
   d96ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d96d0:	9301      	str	r3, [sp, #4]
   d96d2:	bd08      	pop	{r3, pc}
   d96d4:	00030274 	.word	0x00030274

000d96d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d96d8:	b508      	push	{r3, lr}
   d96da:	4b02      	ldr	r3, [pc, #8]	; (d96e4 <HAL_USB_USART_Init+0xc>)
   d96dc:	681b      	ldr	r3, [r3, #0]
   d96de:	681b      	ldr	r3, [r3, #0]
   d96e0:	9301      	str	r3, [sp, #4]
   d96e2:	bd08      	pop	{r3, pc}
   d96e4:	0003024c 	.word	0x0003024c

000d96e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d96e8:	b508      	push	{r3, lr}
   d96ea:	4b02      	ldr	r3, [pc, #8]	; (d96f4 <HAL_USB_USART_Begin+0xc>)
   d96ec:	681b      	ldr	r3, [r3, #0]
   d96ee:	685b      	ldr	r3, [r3, #4]
   d96f0:	9301      	str	r3, [sp, #4]
   d96f2:	bd08      	pop	{r3, pc}
   d96f4:	0003024c 	.word	0x0003024c

000d96f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d96f8:	b508      	push	{r3, lr}
   d96fa:	4b02      	ldr	r3, [pc, #8]	; (d9704 <HAL_USB_USART_Available_Data+0xc>)
   d96fc:	681b      	ldr	r3, [r3, #0]
   d96fe:	691b      	ldr	r3, [r3, #16]
   d9700:	9301      	str	r3, [sp, #4]
   d9702:	bd08      	pop	{r3, pc}
   d9704:	0003024c 	.word	0x0003024c

000d9708 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9708:	b508      	push	{r3, lr}
   d970a:	4b02      	ldr	r3, [pc, #8]	; (d9714 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d970c:	681b      	ldr	r3, [r3, #0]
   d970e:	695b      	ldr	r3, [r3, #20]
   d9710:	9301      	str	r3, [sp, #4]
   d9712:	bd08      	pop	{r3, pc}
   d9714:	0003024c 	.word	0x0003024c

000d9718 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9718:	b508      	push	{r3, lr}
   d971a:	4b02      	ldr	r3, [pc, #8]	; (d9724 <HAL_USB_USART_Receive_Data+0xc>)
   d971c:	681b      	ldr	r3, [r3, #0]
   d971e:	699b      	ldr	r3, [r3, #24]
   d9720:	9301      	str	r3, [sp, #4]
   d9722:	bd08      	pop	{r3, pc}
   d9724:	0003024c 	.word	0x0003024c

000d9728 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9728:	b508      	push	{r3, lr}
   d972a:	4b02      	ldr	r3, [pc, #8]	; (d9734 <HAL_USB_USART_Send_Data+0xc>)
   d972c:	681b      	ldr	r3, [r3, #0]
   d972e:	69db      	ldr	r3, [r3, #28]
   d9730:	9301      	str	r3, [sp, #4]
   d9732:	bd08      	pop	{r3, pc}
   d9734:	0003024c 	.word	0x0003024c

000d9738 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d9738:	b508      	push	{r3, lr}
   d973a:	4b02      	ldr	r3, [pc, #8]	; (d9744 <HAL_USB_USART_Flush_Data+0xc>)
   d973c:	681b      	ldr	r3, [r3, #0]
   d973e:	6a1b      	ldr	r3, [r3, #32]
   d9740:	9301      	str	r3, [sp, #4]
   d9742:	bd08      	pop	{r3, pc}
   d9744:	0003024c 	.word	0x0003024c

000d9748 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d9748:	b508      	push	{r3, lr}
   d974a:	4b02      	ldr	r3, [pc, #8]	; (d9754 <log_message+0xc>)
   d974c:	681b      	ldr	r3, [r3, #0]
   d974e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9750:	9301      	str	r3, [sp, #4]
   d9752:	bd08      	pop	{r3, pc}
   d9754:	00030260 	.word	0x00030260

000d9758 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d9758:	b508      	push	{r3, lr}
   d975a:	4b03      	ldr	r3, [pc, #12]	; (d9768 <led_set_status_active+0x10>)
   d975c:	681b      	ldr	r3, [r3, #0]
   d975e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9762:	9301      	str	r3, [sp, #4]
   d9764:	bd08      	pop	{r3, pc}
   d9766:	0000      	.short	0x0000
   d9768:	00030260 	.word	0x00030260

000d976c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d976c:	b508      	push	{r3, lr}
   d976e:	4b02      	ldr	r3, [pc, #8]	; (d9778 <system_mode+0xc>)
   d9770:	681b      	ldr	r3, [r3, #0]
   d9772:	681b      	ldr	r3, [r3, #0]
   d9774:	9301      	str	r3, [sp, #4]
   d9776:	bd08      	pop	{r3, pc}
   d9778:	00030220 	.word	0x00030220

000d977c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d977c:	b508      	push	{r3, lr}
   d977e:	4b02      	ldr	r3, [pc, #8]	; (d9788 <set_system_mode+0xc>)
   d9780:	681b      	ldr	r3, [r3, #0]
   d9782:	685b      	ldr	r3, [r3, #4]
   d9784:	9301      	str	r3, [sp, #4]
   d9786:	bd08      	pop	{r3, pc}
   d9788:	00030220 	.word	0x00030220

000d978c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d978c:	b508      	push	{r3, lr}
   d978e:	4b02      	ldr	r3, [pc, #8]	; (d9798 <system_delay_ms+0xc>)
   d9790:	681b      	ldr	r3, [r3, #0]
   d9792:	695b      	ldr	r3, [r3, #20]
   d9794:	9301      	str	r3, [sp, #4]
   d9796:	bd08      	pop	{r3, pc}
   d9798:	00030220 	.word	0x00030220

000d979c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d979c:	b508      	push	{r3, lr}
   d979e:	4b02      	ldr	r3, [pc, #8]	; (d97a8 <system_sleep+0xc>)
   d97a0:	681b      	ldr	r3, [r3, #0]
   d97a2:	699b      	ldr	r3, [r3, #24]
   d97a4:	9301      	str	r3, [sp, #4]
   d97a6:	bd08      	pop	{r3, pc}
   d97a8:	00030220 	.word	0x00030220

000d97ac <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d97ac:	b508      	push	{r3, lr}
   d97ae:	4b02      	ldr	r3, [pc, #8]	; (d97b8 <system_thread_set_state+0xc>)
   d97b0:	681b      	ldr	r3, [r3, #0]
   d97b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d97b4:	9301      	str	r3, [sp, #4]
   d97b6:	bd08      	pop	{r3, pc}
   d97b8:	00030220 	.word	0x00030220

000d97bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d97bc:	b508      	push	{r3, lr}
   d97be:	4b02      	ldr	r3, [pc, #8]	; (d97c8 <application_thread_current+0xc>)
   d97c0:	681b      	ldr	r3, [r3, #0]
   d97c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d97c4:	9301      	str	r3, [sp, #4]
   d97c6:	bd08      	pop	{r3, pc}
   d97c8:	00030220 	.word	0x00030220

000d97cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d97cc:	b508      	push	{r3, lr}
   d97ce:	4b02      	ldr	r3, [pc, #8]	; (d97d8 <application_thread_invoke+0xc>)
   d97d0:	681b      	ldr	r3, [r3, #0]
   d97d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d97d4:	9301      	str	r3, [sp, #4]
   d97d6:	bd08      	pop	{r3, pc}
   d97d8:	00030220 	.word	0x00030220

000d97dc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d97dc:	b508      	push	{r3, lr}
   d97de:	4b02      	ldr	r3, [pc, #8]	; (d97e8 <system_thread_get_state+0xc>)
   d97e0:	681b      	ldr	r3, [r3, #0]
   d97e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d97e4:	9301      	str	r3, [sp, #4]
   d97e6:	bd08      	pop	{r3, pc}
   d97e8:	00030220 	.word	0x00030220

000d97ec <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d97ec:	b508      	push	{r3, lr}
   d97ee:	4b02      	ldr	r3, [pc, #8]	; (d97f8 <led_pattern_period+0xc>)
   d97f0:	681b      	ldr	r3, [r3, #0]
   d97f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d97f4:	9301      	str	r3, [sp, #4]
   d97f6:	bd08      	pop	{r3, pc}
   d97f8:	00030220 	.word	0x00030220

000d97fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d97fc:	b508      	push	{r3, lr}
   d97fe:	4b03      	ldr	r3, [pc, #12]	; (d980c <system_ctrl_set_app_request_handler+0x10>)
   d9800:	681b      	ldr	r3, [r3, #0]
   d9802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d9806:	9301      	str	r3, [sp, #4]
   d9808:	bd08      	pop	{r3, pc}
   d980a:	0000      	.short	0x0000
   d980c:	00030220 	.word	0x00030220

000d9810 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d9810:	b508      	push	{r3, lr}
   d9812:	4b03      	ldr	r3, [pc, #12]	; (d9820 <system_ctrl_set_result+0x10>)
   d9814:	681b      	ldr	r3, [r3, #0]
   d9816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d981a:	9301      	str	r3, [sp, #4]
   d981c:	bd08      	pop	{r3, pc}
   d981e:	0000      	.short	0x0000
   d9820:	00030220 	.word	0x00030220

000d9824 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9824:	b508      	push	{r3, lr}
   d9826:	4b02      	ldr	r3, [pc, #8]	; (d9830 <network_connect+0xc>)
   d9828:	681b      	ldr	r3, [r3, #0]
   d982a:	685b      	ldr	r3, [r3, #4]
   d982c:	9301      	str	r3, [sp, #4]
   d982e:	bd08      	pop	{r3, pc}
   d9830:	00030240 	.word	0x00030240

000d9834 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9834:	b508      	push	{r3, lr}
   d9836:	4b02      	ldr	r3, [pc, #8]	; (d9840 <network_connecting+0xc>)
   d9838:	681b      	ldr	r3, [r3, #0]
   d983a:	689b      	ldr	r3, [r3, #8]
   d983c:	9301      	str	r3, [sp, #4]
   d983e:	bd08      	pop	{r3, pc}
   d9840:	00030240 	.word	0x00030240

000d9844 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9844:	b508      	push	{r3, lr}
   d9846:	4b02      	ldr	r3, [pc, #8]	; (d9850 <network_disconnect+0xc>)
   d9848:	681b      	ldr	r3, [r3, #0]
   d984a:	68db      	ldr	r3, [r3, #12]
   d984c:	9301      	str	r3, [sp, #4]
   d984e:	bd08      	pop	{r3, pc}
   d9850:	00030240 	.word	0x00030240

000d9854 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9854:	b508      	push	{r3, lr}
   d9856:	4b02      	ldr	r3, [pc, #8]	; (d9860 <network_ready+0xc>)
   d9858:	681b      	ldr	r3, [r3, #0]
   d985a:	691b      	ldr	r3, [r3, #16]
   d985c:	9301      	str	r3, [sp, #4]
   d985e:	bd08      	pop	{r3, pc}
   d9860:	00030240 	.word	0x00030240

000d9864 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d9864:	b508      	push	{r3, lr}
   d9866:	4b02      	ldr	r3, [pc, #8]	; (d9870 <network_on+0xc>)
   d9868:	681b      	ldr	r3, [r3, #0]
   d986a:	695b      	ldr	r3, [r3, #20]
   d986c:	9301      	str	r3, [sp, #4]
   d986e:	bd08      	pop	{r3, pc}
   d9870:	00030240 	.word	0x00030240

000d9874 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d9874:	b508      	push	{r3, lr}
   d9876:	4b02      	ldr	r3, [pc, #8]	; (d9880 <network_off+0xc>)
   d9878:	681b      	ldr	r3, [r3, #0]
   d987a:	699b      	ldr	r3, [r3, #24]
   d987c:	9301      	str	r3, [sp, #4]
   d987e:	bd08      	pop	{r3, pc}
   d9880:	00030240 	.word	0x00030240

000d9884 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d9884:	b508      	push	{r3, lr}
   d9886:	4b02      	ldr	r3, [pc, #8]	; (d9890 <network_listen+0xc>)
   d9888:	681b      	ldr	r3, [r3, #0]
   d988a:	69db      	ldr	r3, [r3, #28]
   d988c:	9301      	str	r3, [sp, #4]
   d988e:	bd08      	pop	{r3, pc}
   d9890:	00030240 	.word	0x00030240

000d9894 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d9894:	b508      	push	{r3, lr}
   d9896:	4b02      	ldr	r3, [pc, #8]	; (d98a0 <network_listening+0xc>)
   d9898:	681b      	ldr	r3, [r3, #0]
   d989a:	6a1b      	ldr	r3, [r3, #32]
   d989c:	9301      	str	r3, [sp, #4]
   d989e:	bd08      	pop	{r3, pc}
   d98a0:	00030240 	.word	0x00030240

000d98a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d98a4:	b508      	push	{r3, lr}
   d98a6:	4b02      	ldr	r3, [pc, #8]	; (d98b0 <network_set_listen_timeout+0xc>)
   d98a8:	681b      	ldr	r3, [r3, #0]
   d98aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d98ac:	9301      	str	r3, [sp, #4]
   d98ae:	bd08      	pop	{r3, pc}
   d98b0:	00030240 	.word	0x00030240

000d98b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d98b4:	b508      	push	{r3, lr}
   d98b6:	4b02      	ldr	r3, [pc, #8]	; (d98c0 <network_get_listen_timeout+0xc>)
   d98b8:	681b      	ldr	r3, [r3, #0]
   d98ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d98bc:	9301      	str	r3, [sp, #4]
   d98be:	bd08      	pop	{r3, pc}
   d98c0:	00030240 	.word	0x00030240

000d98c4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d98c4:	b508      	push	{r3, lr}
   d98c6:	4b02      	ldr	r3, [pc, #8]	; (d98d0 <spark_process+0xc>)
   d98c8:	681b      	ldr	r3, [r3, #0]
   d98ca:	689b      	ldr	r3, [r3, #8]
   d98cc:	9301      	str	r3, [sp, #4]
   d98ce:	bd08      	pop	{r3, pc}
   d98d0:	00030244 	.word	0x00030244

000d98d4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d98d4:	b508      	push	{r3, lr}
   d98d6:	4b02      	ldr	r3, [pc, #8]	; (d98e0 <spark_cloud_flag_connect+0xc>)
   d98d8:	681b      	ldr	r3, [r3, #0]
   d98da:	68db      	ldr	r3, [r3, #12]
   d98dc:	9301      	str	r3, [sp, #4]
   d98de:	bd08      	pop	{r3, pc}
   d98e0:	00030244 	.word	0x00030244

000d98e4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d98e4:	b508      	push	{r3, lr}
   d98e6:	4b02      	ldr	r3, [pc, #8]	; (d98f0 <spark_cloud_flag_connected+0xc>)
   d98e8:	681b      	ldr	r3, [r3, #0]
   d98ea:	695b      	ldr	r3, [r3, #20]
   d98ec:	9301      	str	r3, [sp, #4]
   d98ee:	bd08      	pop	{r3, pc}
   d98f0:	00030244 	.word	0x00030244

000d98f4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d98f4:	b508      	push	{r3, lr}
   d98f6:	4b02      	ldr	r3, [pc, #8]	; (d9900 <spark_send_event+0xc>)
   d98f8:	681b      	ldr	r3, [r3, #0]
   d98fa:	6a1b      	ldr	r3, [r3, #32]
   d98fc:	9301      	str	r3, [sp, #4]
   d98fe:	bd08      	pop	{r3, pc}
   d9900:	00030244 	.word	0x00030244

000d9904 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d9904:	b508      	push	{r3, lr}
   d9906:	4b02      	ldr	r3, [pc, #8]	; (d9910 <spark_subscribe+0xc>)
   d9908:	681b      	ldr	r3, [r3, #0]
   d990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d990c:	9301      	str	r3, [sp, #4]
   d990e:	bd08      	pop	{r3, pc}
   d9910:	00030244 	.word	0x00030244

000d9914 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9914:	b508      	push	{r3, lr}
   d9916:	4b02      	ldr	r3, [pc, #8]	; (d9920 <spark_sync_time_pending+0xc>)
   d9918:	681b      	ldr	r3, [r3, #0]
   d991a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d991c:	9301      	str	r3, [sp, #4]
   d991e:	bd08      	pop	{r3, pc}
   d9920:	00030244 	.word	0x00030244

000d9924 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9924:	b508      	push	{r3, lr}
   d9926:	4b02      	ldr	r3, [pc, #8]	; (d9930 <spark_set_random_seed_from_cloud_handler+0xc>)
   d9928:	681b      	ldr	r3, [r3, #0]
   d992a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d992c:	9301      	str	r3, [sp, #4]
   d992e:	bd08      	pop	{r3, pc}
   d9930:	00030244 	.word	0x00030244

000d9934 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9934:	b508      	push	{r3, lr}
   d9936:	4b02      	ldr	r3, [pc, #8]	; (d9940 <malloc+0xc>)
   d9938:	681b      	ldr	r3, [r3, #0]
   d993a:	681b      	ldr	r3, [r3, #0]
   d993c:	9301      	str	r3, [sp, #4]
   d993e:	bd08      	pop	{r3, pc}
   d9940:	0003021c 	.word	0x0003021c

000d9944 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9944:	b508      	push	{r3, lr}
   d9946:	4b02      	ldr	r3, [pc, #8]	; (d9950 <free+0xc>)
   d9948:	681b      	ldr	r3, [r3, #0]
   d994a:	685b      	ldr	r3, [r3, #4]
   d994c:	9301      	str	r3, [sp, #4]
   d994e:	bd08      	pop	{r3, pc}
   d9950:	0003021c 	.word	0x0003021c

000d9954 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9954:	b508      	push	{r3, lr}
   d9956:	4b02      	ldr	r3, [pc, #8]	; (d9960 <realloc+0xc>)
   d9958:	681b      	ldr	r3, [r3, #0]
   d995a:	689b      	ldr	r3, [r3, #8]
   d995c:	9301      	str	r3, [sp, #4]
   d995e:	bd08      	pop	{r3, pc}
   d9960:	0003021c 	.word	0x0003021c

000d9964 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9964:	b508      	push	{r3, lr}
   d9966:	4b02      	ldr	r3, [pc, #8]	; (d9970 <siprintf+0xc>)
   d9968:	681b      	ldr	r3, [r3, #0]
   d996a:	691b      	ldr	r3, [r3, #16]
   d996c:	9301      	str	r3, [sp, #4]
   d996e:	bd08      	pop	{r3, pc}
   d9970:	0003021c 	.word	0x0003021c

000d9974 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d9974:	b508      	push	{r3, lr}
   d9976:	4b02      	ldr	r3, [pc, #8]	; (d9980 <siscanf+0xc>)
   d9978:	681b      	ldr	r3, [r3, #0]
   d997a:	699b      	ldr	r3, [r3, #24]
   d997c:	9301      	str	r3, [sp, #4]
   d997e:	bd08      	pop	{r3, pc}
   d9980:	0003021c 	.word	0x0003021c

000d9984 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d9984:	b508      	push	{r3, lr}
   d9986:	4b02      	ldr	r3, [pc, #8]	; (d9990 <snprintf+0xc>)
   d9988:	681b      	ldr	r3, [r3, #0]
   d998a:	69db      	ldr	r3, [r3, #28]
   d998c:	9301      	str	r3, [sp, #4]
   d998e:	bd08      	pop	{r3, pc}
   d9990:	0003021c 	.word	0x0003021c

000d9994 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d9994:	b508      	push	{r3, lr}
   d9996:	4b02      	ldr	r3, [pc, #8]	; (d99a0 <sniprintf+0xc>)
   d9998:	681b      	ldr	r3, [r3, #0]
   d999a:	6a1b      	ldr	r3, [r3, #32]
   d999c:	9301      	str	r3, [sp, #4]
   d999e:	bd08      	pop	{r3, pc}
   d99a0:	0003021c 	.word	0x0003021c

000d99a4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d99a4:	b508      	push	{r3, lr}
   d99a6:	4b02      	ldr	r3, [pc, #8]	; (d99b0 <vsnprintf+0xc>)
   d99a8:	681b      	ldr	r3, [r3, #0]
   d99aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d99ac:	9301      	str	r3, [sp, #4]
   d99ae:	bd08      	pop	{r3, pc}
   d99b0:	0003021c 	.word	0x0003021c

000d99b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d99b4:	b508      	push	{r3, lr}
   d99b6:	4b02      	ldr	r3, [pc, #8]	; (d99c0 <abort+0xc>)
   d99b8:	681b      	ldr	r3, [r3, #0]
   d99ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d99bc:	9301      	str	r3, [sp, #4]
   d99be:	bd08      	pop	{r3, pc}
   d99c0:	0003021c 	.word	0x0003021c

000d99c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d99c4:	b508      	push	{r3, lr}
   d99c6:	4b02      	ldr	r3, [pc, #8]	; (d99d0 <_malloc_r+0xc>)
   d99c8:	681b      	ldr	r3, [r3, #0]
   d99ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d99cc:	9301      	str	r3, [sp, #4]
   d99ce:	bd08      	pop	{r3, pc}
   d99d0:	0003021c 	.word	0x0003021c

000d99d4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d99d4:	b508      	push	{r3, lr}
   d99d6:	4b02      	ldr	r3, [pc, #8]	; (d99e0 <__errno+0xc>)
   d99d8:	681b      	ldr	r3, [r3, #0]
   d99da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d99dc:	9301      	str	r3, [sp, #4]
   d99de:	bd08      	pop	{r3, pc}
   d99e0:	0003021c 	.word	0x0003021c

000d99e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d99e4:	2200      	movs	r2, #0
   d99e6:	4611      	mov	r1, r2
   d99e8:	6840      	ldr	r0, [r0, #4]
   d99ea:	f7ff bf53 	b.w	d9894 <network_listening>

000d99ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d99ee:	2200      	movs	r2, #0
   d99f0:	4611      	mov	r1, r2
   d99f2:	6840      	ldr	r0, [r0, #4]
   d99f4:	f7ff bf5e 	b.w	d98b4 <network_get_listen_timeout>

000d99f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d99f8:	2200      	movs	r2, #0
   d99fa:	6840      	ldr	r0, [r0, #4]
   d99fc:	f7ff bf52 	b.w	d98a4 <network_set_listen_timeout>

000d9a00 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9a00:	2200      	movs	r2, #0
   d9a02:	f081 0101 	eor.w	r1, r1, #1
   d9a06:	6840      	ldr	r0, [r0, #4]
   d9a08:	f7ff bf3c 	b.w	d9884 <network_listen>

000d9a0c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d9a0c:	2300      	movs	r3, #0
   d9a0e:	461a      	mov	r2, r3
   d9a10:	4619      	mov	r1, r3
   d9a12:	6840      	ldr	r0, [r0, #4]
   d9a14:	f7ff bf2e 	b.w	d9874 <network_off>

000d9a18 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9a18:	2300      	movs	r3, #0
   d9a1a:	461a      	mov	r2, r3
   d9a1c:	4619      	mov	r1, r3
   d9a1e:	6840      	ldr	r0, [r0, #4]
   d9a20:	f7ff bf20 	b.w	d9864 <network_on>

000d9a24 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9a24:	2200      	movs	r2, #0
   d9a26:	4611      	mov	r1, r2
   d9a28:	6840      	ldr	r0, [r0, #4]
   d9a2a:	f7ff bf13 	b.w	d9854 <network_ready>

000d9a2e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9a2e:	2200      	movs	r2, #0
   d9a30:	4611      	mov	r1, r2
   d9a32:	6840      	ldr	r0, [r0, #4]
   d9a34:	f7ff befe 	b.w	d9834 <network_connecting>

000d9a38 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9a38:	2200      	movs	r2, #0
   d9a3a:	2102      	movs	r1, #2
   d9a3c:	6840      	ldr	r0, [r0, #4]
   d9a3e:	f7ff bf01 	b.w	d9844 <network_disconnect>

000d9a42 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9a42:	2300      	movs	r3, #0
   d9a44:	461a      	mov	r2, r3
   d9a46:	6840      	ldr	r0, [r0, #4]
   d9a48:	f7ff beec 	b.w	d9824 <network_connect>

000d9a4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9a4c:	4b02      	ldr	r3, [pc, #8]	; (d9a58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9a4e:	2203      	movs	r2, #3
   d9a50:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9a52:	4a02      	ldr	r2, [pc, #8]	; (d9a5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9a54:	601a      	str	r2, [r3, #0]
   d9a56:	4770      	bx	lr
   d9a58:	2003e22c 	.word	0x2003e22c
   d9a5c:	000e6690 	.word	0x000e6690

000d9a60 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9a60:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d9a62:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9a64:	6892      	ldr	r2, [r2, #8]
   d9a66:	4601      	mov	r1, r0
   d9a68:	4618      	mov	r0, r3
   d9a6a:	4710      	bx	r2

000d9a6c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d9a6c:	b570      	push	{r4, r5, r6, lr}
   d9a6e:	4c0e      	ldr	r4, [pc, #56]	; (d9aa8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d9a70:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d9a72:	241c      	movs	r4, #28
   d9a74:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9a76:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d9a7a:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d9a7e:	f004 0403 	and.w	r4, r4, #3
   d9a82:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9a86:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9a88:	b2e4      	uxtb	r4, r4
   d9a8a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d9a8c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d9a8e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d9a90:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9a92:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9a94:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9a96:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9a98:	bf08      	it	eq
   d9a9a:	4b04      	ldreq	r3, [pc, #16]	; (d9aac <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d9a9c:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d9a9e:	bf06      	itte	eq
   d9aa0:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d9aa2:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d9aa4:	8303      	strhne	r3, [r0, #24]
    }
}
   d9aa6:	bd70      	pop	{r4, r5, r6, pc}
   d9aa8:	000e5924 	.word	0x000e5924
   d9aac:	000d9a61 	.word	0x000d9a61

000d9ab0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d9ab0:	4770      	bx	lr

000d9ab2 <_ZN8SPIClassD0Ev>:
   d9ab2:	b510      	push	{r4, lr}
   d9ab4:	2110      	movs	r1, #16
   d9ab6:	4604      	mov	r4, r0
   d9ab8:	f002 f9e9 	bl	dbe8e <_ZdlPvj>
   d9abc:	4620      	mov	r0, r4
   d9abe:	bd10      	pop	{r4, pc}

000d9ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9ac0:	b570      	push	{r4, r5, r6, lr}
   d9ac2:	4b08      	ldr	r3, [pc, #32]	; (d9ae4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d9ac4:	6003      	str	r3, [r0, #0]
   d9ac6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d9ac8:	2500      	movs	r5, #0
   d9aca:	460e      	mov	r6, r1
   d9acc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d9ad0:	f7ff fcda 	bl	d9488 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d9ad4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d9ad6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d9ad8:	f7ff fc76 	bl	d93c8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d9adc:	60a5      	str	r5, [r4, #8]
}
   d9ade:	4620      	mov	r0, r4
   d9ae0:	bd70      	pop	{r4, r5, r6, pc}
   d9ae2:	bf00      	nop
   d9ae4:	000e66c4 	.word	0x000e66c4

000d9ae8 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9ae8:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d9aea:	7900      	ldrb	r0, [r0, #4]
   d9aec:	f7ff fc64 	bl	d93b8 <HAL_SPI_Send_Receive_Data>
}
   d9af0:	b2c0      	uxtb	r0, r0
   d9af2:	bd08      	pop	{r3, pc}

000d9af4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d9af4:	7900      	ldrb	r0, [r0, #4]
   d9af6:	f7ff bc6f 	b.w	d93d8 <HAL_SPI_Is_Enabled>

000d9afa <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9afa:	4601      	mov	r1, r0
   d9afc:	2200      	movs	r2, #0
   d9afe:	208c      	movs	r0, #140	; 0x8c
   d9b00:	f7ff bc9a 	b.w	d9438 <HAL_Core_System_Reset_Ex>

000d9b04 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9b04:	2000      	movs	r0, #0
   d9b06:	f7ff bff8 	b.w	d9afa <_ZN11SystemClass5resetEm>
	...

000d9b0c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9b0c:	b510      	push	{r4, lr}
   d9b0e:	4604      	mov	r4, r0
   d9b10:	4608      	mov	r0, r1
   d9b12:	4611      	mov	r1, r2
   d9b14:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9b16:	2300      	movs	r3, #0
   d9b18:	f7ff fe40 	bl	d979c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d9b1c:	4b06      	ldr	r3, [pc, #24]	; (d9b38 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d9b1e:	2200      	movs	r2, #0
   d9b20:	701a      	strb	r2, [r3, #0]
   d9b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9b26:	8058      	strh	r0, [r3, #2]
   d9b28:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d9b2a:	681a      	ldr	r2, [r3, #0]
   d9b2c:	889b      	ldrh	r3, [r3, #4]
   d9b2e:	6022      	str	r2, [r4, #0]
   d9b30:	80a3      	strh	r3, [r4, #4]
}
   d9b32:	4620      	mov	r0, r4
   d9b34:	bd10      	pop	{r4, pc}
   d9b36:	bf00      	nop
   d9b38:	2003e234 	.word	0x2003e234

000d9b3c <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   d9b3c:	7800      	ldrb	r0, [r0, #0]
   d9b3e:	4770      	bx	lr

000d9b40 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d9b40:	4b04      	ldr	r3, [pc, #16]	; (d9b54 <_GLOBAL__sub_I_System+0x14>)
   d9b42:	2000      	movs	r0, #0
   d9b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9b48:	7018      	strb	r0, [r3, #0]
   d9b4a:	8058      	strh	r0, [r3, #2]
   d9b4c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9b4e:	f7ff be15 	b.w	d977c <set_system_mode>
   d9b52:	bf00      	nop
   d9b54:	2003e234 	.word	0x2003e234

000d9b58 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9b58:	b510      	push	{r4, lr}
   d9b5a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9b5c:	f009 fbfe 	bl	e335c <strlen>
   d9b60:	3801      	subs	r0, #1
   d9b62:	1823      	adds	r3, r4, r0
   d9b64:	4620      	mov	r0, r4
	while(i<j){
   d9b66:	4298      	cmp	r0, r3
   d9b68:	d206      	bcs.n	d9b78 <_Z11str_reversePc+0x20>
		c = *i;
   d9b6a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9b6c:	7819      	ldrb	r1, [r3, #0]
   d9b6e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9b72:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d9b76:	e7f6      	b.n	d9b66 <_Z11str_reversePc+0xe>
   d9b78:	bd10      	pop	{r4, pc}

000d9b7a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9b7a:	b570      	push	{r4, r5, r6, lr}
   d9b7c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9b7e:	1e91      	subs	r1, r2, #2
   d9b80:	2922      	cmp	r1, #34	; 0x22
   d9b82:	d820      	bhi.n	d9bc6 <ultoa+0x4c>
   d9b84:	4625      	mov	r5, r4
   d9b86:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9b88:	b910      	cbnz	r0, d9b90 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9b8a:	4423      	add	r3, r4
            *ptr++ = '0';
   d9b8c:	2230      	movs	r2, #48	; 0x30
   d9b8e:	e00e      	b.n	d9bae <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9b90:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d9b94:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d9b98:	b2c1      	uxtb	r1, r0
   d9b9a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d9b9e:	2809      	cmp	r0, #9
                *ptr += '0';
   d9ba0:	bf94      	ite	ls
   d9ba2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9ba4:	3157      	addhi	r1, #87	; 0x57
   d9ba6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d9baa:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9bac:	e7eb      	b.n	d9b86 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9bae:	4299      	cmp	r1, r3
   d9bb0:	d202      	bcs.n	d9bb8 <ultoa+0x3e>
            *ptr++ = '0';
   d9bb2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9bb6:	e7fa      	b.n	d9bae <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d9bb8:	2300      	movs	r3, #0
	str_reverse(buffer);
   d9bba:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d9bbc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d9bbe:	f7ff ffcb 	bl	d9b58 <_Z11str_reversePc>
	return buffer;
   d9bc2:	4620      	mov	r0, r4
   d9bc4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d9bc6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d9bc8:	bd70      	pop	{r4, r5, r6, pc}

000d9bca <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9bca:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9bcc:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9bce:	460c      	mov	r4, r1
   d9bd0:	4615      	mov	r5, r2
	if(a<0){
   d9bd2:	da0b      	bge.n	d9bec <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9bd8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bdc:	bf14      	ite	ne
   d9bde:	4258      	negne	r0, r3
   d9be0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9be2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9be4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d9be6:	462a      	mov	r2, r5
   d9be8:	4419      	add	r1, r3
   d9bea:	e000      	b.n	d9bee <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d9bec:	2301      	movs	r3, #1
   d9bee:	f7ff ffc4 	bl	d9b7a <ultoa>
	}
	return buffer;
}
   d9bf2:	4620      	mov	r0, r4
   d9bf4:	bd38      	pop	{r3, r4, r5, pc}

000d9bf6 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9bf6:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9bf8:	2301      	movs	r3, #1
   d9bfa:	f7ff ffbe 	bl	d9b7a <ultoa>
}
   d9bfe:	bd08      	pop	{r3, pc}

000d9c00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9c00:	b510      	push	{r4, lr}
   d9c02:	4604      	mov	r4, r0
{
	free(buffer);
   d9c04:	6800      	ldr	r0, [r0, #0]
   d9c06:	f7ff fe9d 	bl	d9944 <free>
}
   d9c0a:	4620      	mov	r0, r4
   d9c0c:	bd10      	pop	{r4, pc}

000d9c0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9c0e:	b510      	push	{r4, lr}
   d9c10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9c12:	6800      	ldr	r0, [r0, #0]
   d9c14:	b108      	cbz	r0, d9c1a <_ZN6String10invalidateEv+0xc>
   d9c16:	f7ff fe95 	bl	d9944 <free>
	buffer = NULL;
   d9c1a:	2300      	movs	r3, #0
   d9c1c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9c1e:	60a3      	str	r3, [r4, #8]
   d9c20:	6063      	str	r3, [r4, #4]
   d9c22:	bd10      	pop	{r4, pc}

000d9c24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9c24:	b538      	push	{r3, r4, r5, lr}
   d9c26:	4604      	mov	r4, r0
   d9c28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9c2a:	6800      	ldr	r0, [r0, #0]
   d9c2c:	3101      	adds	r1, #1
   d9c2e:	f7ff fe91 	bl	d9954 <realloc>
	if (newbuffer) {
   d9c32:	b110      	cbz	r0, d9c3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9c34:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9c38:	2001      	movs	r0, #1
	}
	return 0;
}
   d9c3a:	bd38      	pop	{r3, r4, r5, pc}

000d9c3c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9c3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9c3e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9c40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9c42:	b113      	cbz	r3, d9c4a <_ZN6String7reserveEj+0xe>
   d9c44:	6843      	ldr	r3, [r0, #4]
   d9c46:	428b      	cmp	r3, r1
   d9c48:	d207      	bcs.n	d9c5a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9c4a:	4620      	mov	r0, r4
   d9c4c:	f7ff ffea 	bl	d9c24 <_ZN6String12changeBufferEj>
   d9c50:	b120      	cbz	r0, d9c5c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9c52:	68a3      	ldr	r3, [r4, #8]
   d9c54:	b90b      	cbnz	r3, d9c5a <_ZN6String7reserveEj+0x1e>
   d9c56:	6822      	ldr	r2, [r4, #0]
   d9c58:	7013      	strb	r3, [r2, #0]
   d9c5a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9c5c:	bd10      	pop	{r4, pc}

000d9c5e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9c5e:	b570      	push	{r4, r5, r6, lr}
   d9c60:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9c62:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9c64:	4604      	mov	r4, r0
   d9c66:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9c68:	f7ff ffe8 	bl	d9c3c <_ZN6String7reserveEj>
   d9c6c:	b918      	cbnz	r0, d9c76 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9c6e:	4620      	mov	r0, r4
   d9c70:	f7ff ffcd 	bl	d9c0e <_ZN6String10invalidateEv>
		return *this;
   d9c74:	e009      	b.n	d9c8a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9c76:	462a      	mov	r2, r5
   d9c78:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9c7a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9c7c:	6820      	ldr	r0, [r4, #0]
   d9c7e:	f008 fba1 	bl	e23c4 <memcpy>
	buffer[len] = 0;
   d9c82:	6822      	ldr	r2, [r4, #0]
   d9c84:	68a3      	ldr	r3, [r4, #8]
   d9c86:	2100      	movs	r1, #0
   d9c88:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9c8a:	4620      	mov	r0, r4
   d9c8c:	bd70      	pop	{r4, r5, r6, pc}

000d9c8e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9c8e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9c90:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9c92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9c94:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9c96:	6043      	str	r3, [r0, #4]
	len = 0;
   d9c98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9c9a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9c9c:	460d      	mov	r5, r1
   d9c9e:	b139      	cbz	r1, d9cb0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9ca0:	4608      	mov	r0, r1
   d9ca2:	f009 fb5b 	bl	e335c <strlen>
   d9ca6:	4629      	mov	r1, r5
   d9ca8:	4602      	mov	r2, r0
   d9caa:	4620      	mov	r0, r4
   d9cac:	f7ff ffd7 	bl	d9c5e <_ZN6String4copyEPKcj>
}
   d9cb0:	4620      	mov	r0, r4
   d9cb2:	bd38      	pop	{r3, r4, r5, pc}

000d9cb4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9cb4:	b538      	push	{r3, r4, r5, lr}
   d9cb6:	4605      	mov	r5, r0
	if (buffer) {
   d9cb8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9cba:	460c      	mov	r4, r1
	if (buffer) {
   d9cbc:	b160      	cbz	r0, d9cd8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d9cbe:	686a      	ldr	r2, [r5, #4]
   d9cc0:	688b      	ldr	r3, [r1, #8]
   d9cc2:	429a      	cmp	r2, r3
   d9cc4:	d306      	bcc.n	d9cd4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d9cc6:	6809      	ldr	r1, [r1, #0]
   d9cc8:	f008 fe10 	bl	e28ec <strcpy>
			len = rhs.len;
   d9ccc:	68a3      	ldr	r3, [r4, #8]
   d9cce:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9cd0:	2300      	movs	r3, #0
   d9cd2:	e00a      	b.n	d9cea <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d9cd4:	f7ff fe36 	bl	d9944 <free>
		}
	}
	buffer = rhs.buffer;
   d9cd8:	6823      	ldr	r3, [r4, #0]
   d9cda:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9cdc:	6863      	ldr	r3, [r4, #4]
   d9cde:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9ce0:	68a3      	ldr	r3, [r4, #8]
   d9ce2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9ce4:	2300      	movs	r3, #0
   d9ce6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d9ce8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d9cea:	60a3      	str	r3, [r4, #8]
   d9cec:	bd38      	pop	{r3, r4, r5, pc}

000d9cee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9cee:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9cf0:	b510      	push	{r4, lr}
   d9cf2:	460b      	mov	r3, r1
   d9cf4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9cf6:	d007      	beq.n	d9d08 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9cf8:	6809      	ldr	r1, [r1, #0]
   d9cfa:	b119      	cbz	r1, d9d04 <_ZN6StringaSERKS_+0x16>
   d9cfc:	689a      	ldr	r2, [r3, #8]
   d9cfe:	f7ff ffae 	bl	d9c5e <_ZN6String4copyEPKcj>
   d9d02:	e001      	b.n	d9d08 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9d04:	f7ff ff83 	bl	d9c0e <_ZN6String10invalidateEv>

	return *this;
}
   d9d08:	4620      	mov	r0, r4
   d9d0a:	bd10      	pop	{r4, pc}

000d9d0c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9d0c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d0e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9d10:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d12:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9d14:	6043      	str	r3, [r0, #4]
	len = 0;
   d9d16:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9d18:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9d1a:	f7ff ffe8 	bl	d9cee <_ZN6StringaSERKS_>
}
   d9d1e:	4620      	mov	r0, r4
   d9d20:	bd10      	pop	{r4, pc}

000d9d22 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9d22:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d9d24:	b510      	push	{r4, lr}
   d9d26:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9d28:	d001      	beq.n	d9d2e <_ZN6StringaSEOS_+0xc>
   d9d2a:	f7ff ffc3 	bl	d9cb4 <_ZN6String4moveERS_>
	return *this;
}
   d9d2e:	4620      	mov	r0, r4
   d9d30:	bd10      	pop	{r4, pc}

000d9d32 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9d32:	b538      	push	{r3, r4, r5, lr}
   d9d34:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9d36:	460c      	mov	r4, r1
   d9d38:	b141      	cbz	r1, d9d4c <_ZN6StringaSEPKc+0x1a>
   d9d3a:	4608      	mov	r0, r1
   d9d3c:	f009 fb0e 	bl	e335c <strlen>
   d9d40:	4621      	mov	r1, r4
   d9d42:	4602      	mov	r2, r0
   d9d44:	4628      	mov	r0, r5
   d9d46:	f7ff ff8a 	bl	d9c5e <_ZN6String4copyEPKcj>
   d9d4a:	e001      	b.n	d9d50 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d9d4c:	f7ff ff5f 	bl	d9c0e <_ZN6String10invalidateEv>

	return *this;
}
   d9d50:	4628      	mov	r0, r5
   d9d52:	bd38      	pop	{r3, r4, r5, pc}

000d9d54 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d9d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9d56:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d58:	2300      	movs	r3, #0
   d9d5a:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9d5c:	6063      	str	r3, [r4, #4]
	len = 0;
   d9d5e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9d60:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d9d62:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d9d64:	a901      	add	r1, sp, #4
   d9d66:	f7ff ff46 	bl	d9bf6 <utoa>
	*this = buf;
   d9d6a:	a901      	add	r1, sp, #4
   d9d6c:	4620      	mov	r0, r4
   d9d6e:	f7ff ffe0 	bl	d9d32 <_ZN6StringaSEPKc>
}
   d9d72:	4620      	mov	r0, r4
   d9d74:	b004      	add	sp, #16
   d9d76:	bd10      	pop	{r4, pc}

000d9d78 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   d9d78:	b510      	push	{r4, lr}
   d9d7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d7c:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9d7e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d80:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9d82:	6063      	str	r3, [r4, #4]
	len = 0;
   d9d84:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9d86:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9d88:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d9d8a:	a901      	add	r1, sp, #4
   d9d8c:	f7ff ff1d 	bl	d9bca <itoa>
	*this = buf;
   d9d90:	a901      	add	r1, sp, #4
   d9d92:	4620      	mov	r0, r4
   d9d94:	f7ff ffcd 	bl	d9d32 <_ZN6StringaSEPKc>
}
   d9d98:	4620      	mov	r0, r4
   d9d9a:	b00a      	add	sp, #40	; 0x28
   d9d9c:	bd10      	pop	{r4, pc}

000d9d9e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9d9e:	b570      	push	{r4, r5, r6, lr}
   d9da0:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9da2:	460e      	mov	r6, r1
   d9da4:	b909      	cbnz	r1, d9daa <_ZN6String6concatEPKcj+0xc>
   d9da6:	2000      	movs	r0, #0
   d9da8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9daa:	b16a      	cbz	r2, d9dc8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d9dac:	6883      	ldr	r3, [r0, #8]
   d9dae:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d9db0:	4629      	mov	r1, r5
   d9db2:	f7ff ff43 	bl	d9c3c <_ZN6String7reserveEj>
   d9db6:	2800      	cmp	r0, #0
   d9db8:	d0f5      	beq.n	d9da6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9dba:	6820      	ldr	r0, [r4, #0]
   d9dbc:	68a3      	ldr	r3, [r4, #8]
   d9dbe:	4631      	mov	r1, r6
   d9dc0:	4418      	add	r0, r3
   d9dc2:	f008 fd93 	bl	e28ec <strcpy>
	len = newlen;
   d9dc6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d9dc8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9dca:	bd70      	pop	{r4, r5, r6, pc}

000d9dcc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9dcc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9dce:	688a      	ldr	r2, [r1, #8]
   d9dd0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9dd2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9dd4:	f7ff ffe3 	bl	d9d9e <_ZN6String6concatEPKcj>
   d9dd8:	b910      	cbnz	r0, d9de0 <_ZplRK15StringSumHelperRK6String+0x14>
   d9dda:	4620      	mov	r0, r4
   d9ddc:	f7ff ff17 	bl	d9c0e <_ZN6String10invalidateEv>
	return a;
}
   d9de0:	4620      	mov	r0, r4
   d9de2:	bd10      	pop	{r4, pc}

000d9de4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9de4:	b538      	push	{r3, r4, r5, lr}
   d9de6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9de8:	460d      	mov	r5, r1
   d9dea:	b141      	cbz	r1, d9dfe <_ZplRK15StringSumHelperPKc+0x1a>
   d9dec:	4608      	mov	r0, r1
   d9dee:	f009 fab5 	bl	e335c <strlen>
   d9df2:	4629      	mov	r1, r5
   d9df4:	4602      	mov	r2, r0
   d9df6:	4620      	mov	r0, r4
   d9df8:	f7ff ffd1 	bl	d9d9e <_ZN6String6concatEPKcj>
   d9dfc:	b910      	cbnz	r0, d9e04 <_ZplRK15StringSumHelperPKc+0x20>
   d9dfe:	4620      	mov	r0, r4
   d9e00:	f7ff ff05 	bl	d9c0e <_ZN6String10invalidateEv>
	return a;
}
   d9e04:	4620      	mov	r0, r4
   d9e06:	bd38      	pop	{r3, r4, r5, pc}

000d9e08 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9e08:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9e0a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9e0c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9e0e:	b912      	cbnz	r2, d9e16 <_ZNK6String6equalsEPKc+0xe>
   d9e10:	b919      	cbnz	r1, d9e1a <_ZNK6String6equalsEPKc+0x12>
   d9e12:	2001      	movs	r0, #1
   d9e14:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9e16:	b911      	cbnz	r1, d9e1e <_ZNK6String6equalsEPKc+0x16>
   d9e18:	6803      	ldr	r3, [r0, #0]
   d9e1a:	7818      	ldrb	r0, [r3, #0]
   d9e1c:	e002      	b.n	d9e24 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d9e1e:	6800      	ldr	r0, [r0, #0]
   d9e20:	f008 fd5a 	bl	e28d8 <strcmp>
   d9e24:	fab0 f080 	clz	r0, r0
   d9e28:	0940      	lsrs	r0, r0, #5
}
   d9e2a:	bd08      	pop	{r3, pc}

000d9e2c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d9e30:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9e32:	460e      	mov	r6, r1
   d9e34:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9e36:	4910      	ldr	r1, [pc, #64]	; (d9e78 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d9e38:	bf88      	it	hi
   d9e3a:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9e3c:	4615      	mov	r5, r2
   d9e3e:	4607      	mov	r7, r0
	if (left > right) {
   d9e40:	bf84      	itt	hi
   d9e42:	4625      	movhi	r5, r4
   d9e44:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9e46:	f7ff ff22 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d9e4a:	68b1      	ldr	r1, [r6, #8]
   d9e4c:	428d      	cmp	r5, r1
   d9e4e:	d80f      	bhi.n	d9e70 <_ZNK6String9substringEjj+0x44>
   d9e50:	428c      	cmp	r4, r1
   d9e52:	bf28      	it	cs
   d9e54:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d9e56:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d9e58:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d9e5a:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d9e5e:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d9e60:	6831      	ldr	r1, [r6, #0]
   d9e62:	4638      	mov	r0, r7
   d9e64:	4429      	add	r1, r5
   d9e66:	f7ff ff64 	bl	d9d32 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d9e6a:	6833      	ldr	r3, [r6, #0]
   d9e6c:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d9e70:	4638      	mov	r0, r7
   d9e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9e76:	bf00      	nop
   d9e78:	000e5da8 	.word	0x000e5da8

000d9e7c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d9e7c:	b510      	push	{r4, lr}
   d9e7e:	4604      	mov	r4, r0
	return substring(left, len);
   d9e80:	688b      	ldr	r3, [r1, #8]
   d9e82:	f7ff ffd3 	bl	d9e2c <_ZNK6String9substringEjj>
}
   d9e86:	4620      	mov	r0, r4
   d9e88:	bd10      	pop	{r4, pc}

000d9e8a <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   d9e8a:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   d9e8c:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   d9e8e:	4605      	mov	r5, r0
	if (buffer) {
   d9e90:	b134      	cbz	r4, d9ea0 <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   d9e92:	7820      	ldrb	r0, [r4, #0]
   d9e94:	b120      	cbz	r0, d9ea0 <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   d9e96:	f00a f9df 	bl	e4258 <tolower>
   d9e9a:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   d9e9e:	e7f8      	b.n	d9e92 <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   d9ea0:	4628      	mov	r0, r5
   d9ea2:	bd38      	pop	{r3, r4, r5, pc}

000d9ea4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9ea4:	6800      	ldr	r0, [r0, #0]
   d9ea6:	b108      	cbz	r0, d9eac <_ZNK6String5toIntEv+0x8>
   d9ea8:	f008 b97d 	b.w	e21a6 <atol>
	return 0;
}
   d9eac:	4770      	bx	lr
	...

000d9eb0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9eb0:	b40e      	push	{r1, r2, r3}
   d9eb2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d9eb4:	ac09      	add	r4, sp, #36	; 0x24
   d9eb6:	4605      	mov	r5, r0
   d9eb8:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d9ebc:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9ebe:	4623      	mov	r3, r4
   d9ec0:	463a      	mov	r2, r7
   d9ec2:	2105      	movs	r1, #5
   d9ec4:	a802      	add	r0, sp, #8
   d9ec6:	f7ff fd6d 	bl	d99a4 <vsnprintf>
    va_end(marker);

    String result;
   d9eca:	490c      	ldr	r1, [pc, #48]	; (d9efc <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9ecc:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d9ece:	4628      	mov	r0, r5
   d9ed0:	f7ff fedd 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d9ed4:	4631      	mov	r1, r6
   d9ed6:	4628      	mov	r0, r5
   d9ed8:	f7ff feb0 	bl	d9c3c <_ZN6String7reserveEj>
    if (result.buffer) {
   d9edc:	6828      	ldr	r0, [r5, #0]
   d9ede:	b130      	cbz	r0, d9eee <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9ee0:	4623      	mov	r3, r4
   d9ee2:	463a      	mov	r2, r7
   d9ee4:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d9ee6:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9ee8:	f7ff fd5c 	bl	d99a4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d9eec:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d9eee:	4628      	mov	r0, r5
   d9ef0:	b004      	add	sp, #16
   d9ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9ef6:	b003      	add	sp, #12
   d9ef8:	4770      	bx	lr
   d9efa:	bf00      	nop
   d9efc:	000e5da8 	.word	0x000e5da8

000d9f00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d9f00:	680b      	ldr	r3, [r1, #0]
   d9f02:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d9f04:	b113      	cbz	r3, d9f0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d9f06:	685a      	ldr	r2, [r3, #4]
   d9f08:	3201      	adds	r2, #1
   d9f0a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d9f0c:	4770      	bx	lr
	...

000d9f10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9f10:	4802      	ldr	r0, [pc, #8]	; (d9f1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d9f12:	2300      	movs	r3, #0
   d9f14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d9f16:	f7ff babf 	b.w	d9498 <os_mutex_recursive_create>
   d9f1a:	bf00      	nop
   d9f1c:	2003e23c 	.word	0x2003e23c

000d9f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9f22:	4606      	mov	r6, r0
   d9f24:	460d      	mov	r5, r1
   d9f26:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9f28:	2400      	movs	r4, #0
  while (size--) {
   d9f2a:	42bd      	cmp	r5, r7
   d9f2c:	d00c      	beq.n	d9f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9f2e:	6833      	ldr	r3, [r6, #0]
   d9f30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9f34:	689b      	ldr	r3, [r3, #8]
   d9f36:	4630      	mov	r0, r6
   d9f38:	4798      	blx	r3
     if (chunk>=0)
   d9f3a:	2800      	cmp	r0, #0
   d9f3c:	db01      	blt.n	d9f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9f3e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d9f40:	e7f3      	b.n	d9f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9f42:	2c00      	cmp	r4, #0
   d9f44:	bf08      	it	eq
   d9f46:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d9f48:	4620      	mov	r0, r4
   d9f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d9f4c:	b570      	push	{r4, r5, r6, lr}
   d9f4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d9f50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d9f52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d9f54:	b149      	cbz	r1, d9f6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d9f56:	f009 fa01 	bl	e335c <strlen>
   d9f5a:	682b      	ldr	r3, [r5, #0]
   d9f5c:	4602      	mov	r2, r0
   d9f5e:	4621      	mov	r1, r4
   d9f60:	4628      	mov	r0, r5
   d9f62:	68db      	ldr	r3, [r3, #12]
    }
   d9f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9f68:	4718      	bx	r3
    }
   d9f6a:	bd70      	pop	{r4, r5, r6, pc}

000d9f6c <_ZN5Print5printEPKc>:
   d9f6c:	b508      	push	{r3, lr}
   d9f6e:	f7ff ffed 	bl	d9f4c <_ZN5Print5writeEPKc>
   d9f72:	bd08      	pop	{r3, pc}

000d9f74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9f74:	6803      	ldr	r3, [r0, #0]
   d9f76:	689b      	ldr	r3, [r3, #8]
   d9f78:	4718      	bx	r3

000d9f7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9f7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9f7c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9f7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9f80:	f7ff fff8 	bl	d9f74 <_ZN5Print5printEc>
  n += print('\n');
   d9f84:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d9f86:	4604      	mov	r4, r0
  n += print('\n');
   d9f88:	4628      	mov	r0, r5
   d9f8a:	f7ff fff3 	bl	d9f74 <_ZN5Print5printEc>
  return n;
}
   d9f8e:	4420      	add	r0, r4
   d9f90:	bd38      	pop	{r3, r4, r5, pc}

000d9f92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9f92:	b538      	push	{r3, r4, r5, lr}
   d9f94:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9f96:	f7ff ffd9 	bl	d9f4c <_ZN5Print5writeEPKc>
   d9f9a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9f9c:	4628      	mov	r0, r5
   d9f9e:	f7ff ffec 	bl	d9f7a <_ZN5Print7printlnEv>
  return n;
}
   d9fa2:	4420      	add	r0, r4
   d9fa4:	bd38      	pop	{r3, r4, r5, pc}

000d9fa6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9fa6:	b530      	push	{r4, r5, lr}
   d9fa8:	b08b      	sub	sp, #44	; 0x2c
   d9faa:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9fac:	2100      	movs	r1, #0
   d9fae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9fb2:	2a01      	cmp	r2, #1
   d9fb4:	bf98      	it	ls
   d9fb6:	220a      	movls	r2, #10
   d9fb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d9fbc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d9fc0:	fb05 3312 	mls	r3, r5, r2, r3
   d9fc4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9fc8:	2b09      	cmp	r3, #9
   d9fca:	bf94      	ite	ls
   d9fcc:	3330      	addls	r3, #48	; 0x30
   d9fce:	3337      	addhi	r3, #55	; 0x37
   d9fd0:	b2db      	uxtb	r3, r3
   d9fd2:	4621      	mov	r1, r4
   d9fd4:	f804 3901 	strb.w	r3, [r4], #-1
   d9fd8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9fda:	2d00      	cmp	r5, #0
   d9fdc:	d1ee      	bne.n	d9fbc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9fde:	f7ff ffb5 	bl	d9f4c <_ZN5Print5writeEPKc>
}
   d9fe2:	b00b      	add	sp, #44	; 0x2c
   d9fe4:	bd30      	pop	{r4, r5, pc}

000d9fe6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d9fe6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d9fe8:	b92a      	cbnz	r2, d9ff6 <_ZN5Print5printEmi+0x10>
   d9fea:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d9fec:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d9ff0:	689b      	ldr	r3, [r3, #8]
   d9ff2:	b2c9      	uxtb	r1, r1
   d9ff4:	4718      	bx	r3
  else return printNumber(n, base);
   d9ff6:	b2d2      	uxtb	r2, r2
}
   d9ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d9ffc:	f7ff bfd3 	b.w	d9fa6 <_ZN5Print11printNumberEmh>

000da000 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   da000:	f7ff bff1 	b.w	d9fe6 <_ZN5Print5printEmi>

000da004 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   da004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da008:	4607      	mov	r7, r0
   da00a:	460e      	mov	r6, r1
  if (base == 0) {
   da00c:	4615      	mov	r5, r2
   da00e:	b92a      	cbnz	r2, da01c <_ZN5Print5printEli+0x18>
    return write(n);
   da010:	6803      	ldr	r3, [r0, #0]
   da012:	b2c9      	uxtb	r1, r1
   da014:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   da01a:	4718      	bx	r3
  } else if (base == 10) {
   da01c:	2a0a      	cmp	r2, #10
   da01e:	d102      	bne.n	da026 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   da020:	2900      	cmp	r1, #0
   da022:	da01      	bge.n	da028 <_ZN5Print5printEli+0x24>
   da024:	e004      	b.n	da030 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da026:	b2d2      	uxtb	r2, r2
  }
}
   da028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da02c:	f7ff bfbb 	b.w	d9fa6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da030:	212d      	movs	r1, #45	; 0x2d
   da032:	f7ff ff9f 	bl	d9f74 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   da036:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da038:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   da03a:	4271      	negs	r1, r6
   da03c:	4638      	mov	r0, r7
   da03e:	f7ff ffb2 	bl	d9fa6 <_ZN5Print11printNumberEmh>
   da042:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da048 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da048:	f7ff bfdc 	b.w	da004 <_ZN5Print5printEli>

000da04c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   da04c:	b538      	push	{r3, r4, r5, lr}
   da04e:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da050:	f7ff ffd8 	bl	da004 <_ZN5Print5printEli>
   da054:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   da056:	4628      	mov	r0, r5
   da058:	f7ff ff8f 	bl	d9f7a <_ZN5Print7printlnEv>
  return n;
}
   da05c:	4420      	add	r0, r4
   da05e:	bd38      	pop	{r3, r4, r5, pc}

000da060 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   da060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da064:	ec57 6b10 	vmov	r6, r7, d0
   da068:	4682      	mov	sl, r0
   da06a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   da06c:	ee10 2a10 	vmov	r2, s0
   da070:	463b      	mov	r3, r7
   da072:	ee10 0a10 	vmov	r0, s0
   da076:	4639      	mov	r1, r7
   da078:	f007 ffa4 	bl	e1fc4 <__aeabi_dcmpun>
   da07c:	b108      	cbz	r0, da082 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da07e:	4948      	ldr	r1, [pc, #288]	; (da1a0 <_ZN5Print10printFloatEdh+0x140>)
   da080:	e012      	b.n	da0a8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da082:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   da086:	f04f 32ff 	mov.w	r2, #4294967295
   da08a:	4b46      	ldr	r3, [pc, #280]	; (da1a4 <_ZN5Print10printFloatEdh+0x144>)
   da08c:	4630      	mov	r0, r6
   da08e:	4649      	mov	r1, r9
   da090:	f007 ff98 	bl	e1fc4 <__aeabi_dcmpun>
   da094:	b968      	cbnz	r0, da0b2 <_ZN5Print10printFloatEdh+0x52>
   da096:	f04f 32ff 	mov.w	r2, #4294967295
   da09a:	4b42      	ldr	r3, [pc, #264]	; (da1a4 <_ZN5Print10printFloatEdh+0x144>)
   da09c:	4630      	mov	r0, r6
   da09e:	4649      	mov	r1, r9
   da0a0:	f007 ff72 	bl	e1f88 <__aeabi_dcmple>
   da0a4:	b928      	cbnz	r0, da0b2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da0a6:	4940      	ldr	r1, [pc, #256]	; (da1a8 <_ZN5Print10printFloatEdh+0x148>)
   da0a8:	4650      	mov	r0, sl
   da0aa:	f7ff ff4f 	bl	d9f4c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   da0b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da0b6:	4b3d      	ldr	r3, [pc, #244]	; (da1ac <_ZN5Print10printFloatEdh+0x14c>)
   da0b8:	4630      	mov	r0, r6
   da0ba:	4639      	mov	r1, r7
   da0bc:	f007 ff78 	bl	e1fb0 <__aeabi_dcmpgt>
   da0c0:	b108      	cbz	r0, da0c6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da0c2:	493b      	ldr	r1, [pc, #236]	; (da1b0 <_ZN5Print10printFloatEdh+0x150>)
   da0c4:	e7f0      	b.n	da0a8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   da0c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da0ca:	4b3a      	ldr	r3, [pc, #232]	; (da1b4 <_ZN5Print10printFloatEdh+0x154>)
   da0cc:	4630      	mov	r0, r6
   da0ce:	4639      	mov	r1, r7
   da0d0:	f007 ff50 	bl	e1f74 <__aeabi_dcmplt>
   da0d4:	2800      	cmp	r0, #0
   da0d6:	d1f4      	bne.n	da0c2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   da0d8:	2200      	movs	r2, #0
   da0da:	2300      	movs	r3, #0
   da0dc:	4630      	mov	r0, r6
   da0de:	4639      	mov	r1, r7
   da0e0:	f007 ff48 	bl	e1f74 <__aeabi_dcmplt>
   da0e4:	b140      	cbz	r0, da0f8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   da0e6:	212d      	movs	r1, #45	; 0x2d
   da0e8:	4650      	mov	r0, sl
   da0ea:	f7ff ff43 	bl	d9f74 <_ZN5Print5printEc>
     number = -number;
   da0ee:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   da0f2:	4604      	mov	r4, r0
     number = -number;
   da0f4:	461f      	mov	r7, r3
   da0f6:	e000      	b.n	da0fa <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da0f8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da0fa:	492f      	ldr	r1, [pc, #188]	; (da1b8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da0fc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da100:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   da102:	fa5f f388 	uxtb.w	r3, r8
   da106:	429d      	cmp	r5, r3
   da108:	d906      	bls.n	da118 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   da10a:	2200      	movs	r2, #0
   da10c:	4b2b      	ldr	r3, [pc, #172]	; (da1bc <_ZN5Print10printFloatEdh+0x15c>)
   da10e:	f007 fde9 	bl	e1ce4 <__aeabi_ddiv>
   da112:	f108 0801 	add.w	r8, r8, #1
   da116:	e7f4      	b.n	da102 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   da118:	4632      	mov	r2, r6
   da11a:	463b      	mov	r3, r7
   da11c:	f007 fb06 	bl	e172c <__adddf3>
   da120:	460f      	mov	r7, r1
   da122:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da124:	f007 ff8c 	bl	e2040 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da128:	220a      	movs	r2, #10
   da12a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da12c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da12e:	4650      	mov	r0, sl
   da130:	f7ff ff39 	bl	d9fa6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da134:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   da136:	b37d      	cbz	r5, da198 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   da138:	4640      	mov	r0, r8
   da13a:	f007 fc33 	bl	e19a4 <__aeabi_ui2d>
   da13e:	4602      	mov	r2, r0
   da140:	460b      	mov	r3, r1
   da142:	4630      	mov	r0, r6
   da144:	4639      	mov	r1, r7
   da146:	f007 faef 	bl	e1728 <__aeabi_dsub>
   da14a:	4606      	mov	r6, r0
   da14c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da14e:	4650      	mov	r0, sl
   da150:	491b      	ldr	r1, [pc, #108]	; (da1c0 <_ZN5Print10printFloatEdh+0x160>)
   da152:	f7ff fefb 	bl	d9f4c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   da156:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   da158:	4b18      	ldr	r3, [pc, #96]	; (da1bc <_ZN5Print10printFloatEdh+0x15c>)
   da15a:	2200      	movs	r2, #0
   da15c:	4630      	mov	r0, r6
   da15e:	4639      	mov	r1, r7
   da160:	f007 fc96 	bl	e1a90 <__aeabi_dmul>
   da164:	460f      	mov	r7, r1
   da166:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   da168:	f007 ff42 	bl	e1ff0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da16c:	220a      	movs	r2, #10
   da16e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   da170:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da172:	4650      	mov	r0, sl
   da174:	f7ff ff46 	bl	da004 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   da178:	4404      	add	r4, r0
    remainder -= toPrint;
   da17a:	4640      	mov	r0, r8
   da17c:	f007 fc22 	bl	e19c4 <__aeabi_i2d>
   da180:	4602      	mov	r2, r0
   da182:	460b      	mov	r3, r1
   da184:	4630      	mov	r0, r6
   da186:	4639      	mov	r1, r7
   da188:	f007 face 	bl	e1728 <__aeabi_dsub>
   da18c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da18e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   da192:	4606      	mov	r6, r0
   da194:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da196:	d1df      	bne.n	da158 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da198:	4620      	mov	r0, r4
   da19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da19e:	bf00      	nop
   da1a0:	000e66cc 	.word	0x000e66cc
   da1a4:	7fefffff 	.word	0x7fefffff
   da1a8:	000e66d4 	.word	0x000e66d4
   da1ac:	41efffff 	.word	0x41efffff
   da1b0:	000e66d0 	.word	0x000e66d0
   da1b4:	c1efffff 	.word	0xc1efffff
   da1b8:	3fe00000 	.word	0x3fe00000
   da1bc:	40240000 	.word	0x40240000
   da1c0:	000e5eae 	.word	0x000e5eae

000da1c4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da1c4:	b2c9      	uxtb	r1, r1
   da1c6:	f7ff bf4b 	b.w	da060 <_ZN5Print10printFloatEdh>

000da1ca <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   da1ca:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da1cc:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   da1ce:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da1d0:	f7ff ff46 	bl	da060 <_ZN5Print10printFloatEdh>
   da1d4:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   da1d6:	4628      	mov	r0, r5
   da1d8:	f7ff fecf 	bl	d9f7a <_ZN5Print7printlnEv>
  return n;
}
   da1dc:	4420      	add	r0, r4
   da1de:	bd38      	pop	{r3, r4, r5, pc}

000da1e0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da1e0:	b40c      	push	{r2, r3}
   da1e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da1e6:	b087      	sub	sp, #28
   da1e8:	af00      	add	r7, sp, #0
   da1ea:	f107 0438 	add.w	r4, r7, #56	; 0x38
   da1ee:	4605      	mov	r5, r0
   da1f0:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   da1f4:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da1f6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   da1f8:	4623      	mov	r3, r4
   da1fa:	464a      	mov	r2, r9
   da1fc:	2114      	movs	r1, #20
   da1fe:	1d38      	adds	r0, r7, #4
   da200:	f7ff fbd0 	bl	d99a4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   da204:	2813      	cmp	r0, #19
   da206:	d805      	bhi.n	da214 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da208:	1d39      	adds	r1, r7, #4
   da20a:	4628      	mov	r0, r5
   da20c:	f7ff fe9e 	bl	d9f4c <_ZN5Print5writeEPKc>
   da210:	4604      	mov	r4, r0
   da212:	e013      	b.n	da23c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da214:	f100 0308 	add.w	r3, r0, #8
   da218:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   da21c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da21e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   da222:	1c41      	adds	r1, r0, #1
   da224:	4623      	mov	r3, r4
   da226:	464a      	mov	r2, r9
   da228:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   da22a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   da22c:	f7ff fbba 	bl	d99a4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da230:	4669      	mov	r1, sp
   da232:	4628      	mov	r0, r5
   da234:	f7ff fe8a 	bl	d9f4c <_ZN5Print5writeEPKc>
   da238:	4604      	mov	r4, r0
   da23a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   da23c:	b11e      	cbz	r6, da246 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   da23e:	4628      	mov	r0, r5
   da240:	f7ff fe9b 	bl	d9f7a <_ZN5Print7printlnEv>
   da244:	4404      	add	r4, r0
    return n;
}
   da246:	4620      	mov	r0, r4
   da248:	371c      	adds	r7, #28
   da24a:	46bd      	mov	sp, r7
   da24c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da250:	b002      	add	sp, #8
   da252:	4770      	bx	lr

000da254 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   da254:	b510      	push	{r4, lr}
   da256:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   da258:	f7ff f8d6 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   da25c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   da25e:	6823      	ldr	r3, [r4, #0]
   da260:	4620      	mov	r0, r4
   da262:	695b      	ldr	r3, [r3, #20]
   da264:	4798      	blx	r3
    if (c >= 0) return c;
   da266:	2800      	cmp	r0, #0
   da268:	da08      	bge.n	da27c <_ZN6Stream9timedReadEv+0x28>
   da26a:	f7ff f8cd 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   da26e:	68e3      	ldr	r3, [r4, #12]
   da270:	1ac0      	subs	r0, r0, r3
   da272:	68a3      	ldr	r3, [r4, #8]
   da274:	4298      	cmp	r0, r3
   da276:	d3f2      	bcc.n	da25e <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   da278:	f04f 30ff 	mov.w	r0, #4294967295
}
   da27c:	bd10      	pop	{r4, pc}

000da27e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   da27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da282:	4680      	mov	r8, r0
   da284:	460d      	mov	r5, r1
   da286:	188f      	adds	r7, r1, r2
   da288:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   da28a:	42bc      	cmp	r4, r7
   da28c:	eba4 0605 	sub.w	r6, r4, r5
   da290:	d007      	beq.n	da2a2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   da292:	4640      	mov	r0, r8
   da294:	f7ff ffde 	bl	da254 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   da298:	2800      	cmp	r0, #0
   da29a:	db02      	blt.n	da2a2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   da29c:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   da2a0:	e7f3      	b.n	da28a <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   da2a2:	4630      	mov	r0, r6
   da2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da2a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da2a8:	4b01      	ldr	r3, [pc, #4]	; (da2b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da2aa:	4a02      	ldr	r2, [pc, #8]	; (da2b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da2ac:	601a      	str	r2, [r3, #0]
   da2ae:	4770      	bx	lr
   da2b0:	2003e240 	.word	0x2003e240
   da2b4:	000e674b 	.word	0x000e674b

000da2b8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   da2ba:	4b14      	ldr	r3, [pc, #80]	; (da30c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da2bc:	4f14      	ldr	r7, [pc, #80]	; (da310 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da2be:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   da2c0:	4b14      	ldr	r3, [pc, #80]	; (da314 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da2c2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   da2c4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   da2c6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   da2c8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   da2ca:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da2cc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da2ce:	d01b      	beq.n	da308 <_ZL22Refresh_UnixTime_Cachel+0x50>
   da2d0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   da2d2:	ad01      	add	r5, sp, #4
   da2d4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   da2d8:	f007 ff78 	bl	e21cc <localtime>
	calendar_time->tm_year += 1900;
   da2dc:	6943      	ldr	r3, [r0, #20]
   da2de:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   da2e2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   da2e4:	4604      	mov	r4, r0
   da2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da2e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da2ee:	f8d4 e000 	ldr.w	lr, [r4]
   da2f2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da2f6:	ad01      	add	r5, sp, #4
   da2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da2fa:	4c07      	ldr	r4, [pc, #28]	; (da318 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   da2fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da2fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da302:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da304:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   da308:	b00b      	add	sp, #44	; 0x2c
   da30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da30c:	2003e278 	.word	0x2003e278
   da310:	2003e274 	.word	0x2003e274
   da314:	2003e270 	.word	0x2003e270
   da318:	2003e244 	.word	0x2003e244

000da31c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   da31c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   da31e:	2000      	movs	r0, #0
   da320:	f7ff faf8 	bl	d9914 <spark_sync_time_pending>
   da324:	b128      	cbz	r0, da332 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da326:	f7ff fadd 	bl	d98e4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   da32a:	f080 0001 	eor.w	r0, r0, #1
   da32e:	b2c0      	uxtb	r0, r0
   da330:	bd08      	pop	{r3, pc}
   da332:	2001      	movs	r0, #1
    }
   da334:	bd08      	pop	{r3, pc}
	...

000da338 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da338:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da33a:	f7ff ffbd 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   da33e:	4b01      	ldr	r3, [pc, #4]	; (da344 <_ZN9TimeClass4hourEl+0xc>)
   da340:	6898      	ldr	r0, [r3, #8]
   da342:	bd08      	pop	{r3, pc}
   da344:	2003e244 	.word	0x2003e244

000da348 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   da348:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da34a:	f7ff ffb5 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   da34e:	4b01      	ldr	r3, [pc, #4]	; (da354 <_ZN9TimeClass6minuteEl+0xc>)
   da350:	6858      	ldr	r0, [r3, #4]
   da352:	bd08      	pop	{r3, pc}
   da354:	2003e244 	.word	0x2003e244

000da358 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   da358:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da35a:	f7ff ffad 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   da35e:	4b01      	ldr	r3, [pc, #4]	; (da364 <_ZN9TimeClass6secondEl+0xc>)
   da360:	6818      	ldr	r0, [r3, #0]
   da362:	bd08      	pop	{r3, pc}
   da364:	2003e244 	.word	0x2003e244

000da368 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da368:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da36a:	f7ff ffa5 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   da36e:	4b01      	ldr	r3, [pc, #4]	; (da374 <_ZN9TimeClass3dayEl+0xc>)
   da370:	68d8      	ldr	r0, [r3, #12]
   da372:	bd08      	pop	{r3, pc}
   da374:	2003e244 	.word	0x2003e244

000da378 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da378:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da37a:	f7ff ff9d 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da37e:	4b02      	ldr	r3, [pc, #8]	; (da388 <_ZN9TimeClass7weekdayEl+0x10>)
   da380:	6998      	ldr	r0, [r3, #24]
}
   da382:	3001      	adds	r0, #1
   da384:	bd08      	pop	{r3, pc}
   da386:	bf00      	nop
   da388:	2003e244 	.word	0x2003e244

000da38c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da38c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da38e:	f7ff ff93 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da392:	4b02      	ldr	r3, [pc, #8]	; (da39c <_ZN9TimeClass5monthEl+0x10>)
   da394:	6918      	ldr	r0, [r3, #16]
}
   da396:	3001      	adds	r0, #1
   da398:	bd08      	pop	{r3, pc}
   da39a:	bf00      	nop
   da39c:	2003e244 	.word	0x2003e244

000da3a0 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   da3a0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3a2:	f7ff ff89 	bl	da2b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   da3a6:	4b01      	ldr	r3, [pc, #4]	; (da3ac <_ZN9TimeClass4yearEl+0xc>)
   da3a8:	6958      	ldr	r0, [r3, #20]
   da3aa:	bd08      	pop	{r3, pc}
   da3ac:	2003e244 	.word	0x2003e244

000da3b0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   da3b2:	4b0e      	ldr	r3, [pc, #56]	; (da3ec <_ZN9TimeClass7timeStrEl+0x3c>)
   da3b4:	681b      	ldr	r3, [r3, #0]
   da3b6:	4419      	add	r1, r3
   da3b8:	4b0d      	ldr	r3, [pc, #52]	; (da3f0 <_ZN9TimeClass7timeStrEl+0x40>)
   da3ba:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da3bc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   da3be:	a802      	add	r0, sp, #8
   da3c0:	4419      	add	r1, r3
   da3c2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   da3c6:	f007 ff01 	bl	e21cc <localtime>
        char* ascstr = asctime(calendar_time);
   da3ca:	f007 fea9 	bl	e2120 <asctime>
   da3ce:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   da3d0:	f008 ffc4 	bl	e335c <strlen>
        ascstr[len-1] = 0; // remove final newline
   da3d4:	4428      	add	r0, r5
   da3d6:	2300      	movs	r3, #0
   da3d8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   da3dc:	4629      	mov	r1, r5
   da3de:	4620      	mov	r0, r4
   da3e0:	f7ff fc55 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
}
   da3e4:	4620      	mov	r0, r4
   da3e6:	b003      	add	sp, #12
   da3e8:	bd30      	pop	{r4, r5, pc}
   da3ea:	bf00      	nop
   da3ec:	2003e278 	.word	0x2003e278
   da3f0:	2003e270 	.word	0x2003e270

000da3f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da3f8:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   da3fa:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da3fc:	4607      	mov	r7, r0
   da3fe:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   da400:	4620      	mov	r0, r4
   da402:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da404:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   da406:	f008 fa71 	bl	e28ec <strcpy>
    size_t len = strlen(format_str);
   da40a:	4620      	mov	r0, r4
   da40c:	f008 ffa6 	bl	e335c <strlen>
   da410:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da412:	b925      	cbnz	r5, da41e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   da414:	4924      	ldr	r1, [pc, #144]	; (da4a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   da416:	a803      	add	r0, sp, #12
   da418:	f008 fa68 	bl	e28ec <strcpy>
   da41c:	e013      	b.n	da446 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da41e:	213c      	movs	r1, #60	; 0x3c
   da420:	fb95 f2f1 	sdiv	r2, r5, r1
   da424:	2a00      	cmp	r2, #0
   da426:	bfb8      	it	lt
   da428:	4252      	neglt	r2, r2
   da42a:	fb92 f3f1 	sdiv	r3, r2, r1
   da42e:	fb01 2213 	mls	r2, r1, r3, r2
   da432:	9200      	str	r2, [sp, #0]
   da434:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da438:	4a1c      	ldr	r2, [pc, #112]	; (da4ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   da43a:	fb95 f3f3 	sdiv	r3, r5, r3
   da43e:	2110      	movs	r1, #16
   da440:	a803      	add	r0, sp, #12
   da442:	f7ff fa9f 	bl	d9984 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da446:	4625      	mov	r5, r4
   da448:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da44a:	f108 3aff 	add.w	sl, r8, #4294967295
   da44e:	45b2      	cmp	sl, r6
   da450:	d91b      	bls.n	da48a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da452:	782b      	ldrb	r3, [r5, #0]
   da454:	2b25      	cmp	r3, #37	; 0x25
   da456:	d116      	bne.n	da486 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   da458:	786b      	ldrb	r3, [r5, #1]
   da45a:	2b7a      	cmp	r3, #122	; 0x7a
   da45c:	d113      	bne.n	da486 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   da45e:	a803      	add	r0, sp, #12
   da460:	f008 ff7c 	bl	e335c <strlen>
   da464:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da466:	4430      	add	r0, r6
   da468:	ebc6 020a 	rsb	r2, r6, sl
   da46c:	1ca9      	adds	r1, r5, #2
   da46e:	4420      	add	r0, r4
   da470:	f007 ffa8 	bl	e23c4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da474:	4642      	mov	r2, r8
   da476:	a903      	add	r1, sp, #12
   da478:	4628      	mov	r0, r5
   da47a:	f007 ffa3 	bl	e23c4 <memcpy>
            len = strlen(format_str);
   da47e:	4620      	mov	r0, r4
   da480:	f008 ff6c 	bl	e335c <strlen>
   da484:	4680      	mov	r8, r0
   da486:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da488:	e7de      	b.n	da448 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   da48a:	464b      	mov	r3, r9
   da48c:	4622      	mov	r2, r4
   da48e:	2132      	movs	r1, #50	; 0x32
   da490:	a807      	add	r0, sp, #28
   da492:	f008 faaf 	bl	e29f4 <strftime>
    return String(buf);
   da496:	a907      	add	r1, sp, #28
   da498:	4638      	mov	r0, r7
   da49a:	f7ff fbf8 	bl	d9c8e <_ZN6StringC1EPK19__FlashStringHelper>
}
   da49e:	4638      	mov	r0, r7
   da4a0:	b024      	add	sp, #144	; 0x90
   da4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da4a6:	bf00      	nop
   da4a8:	000e71ed 	.word	0x000e71ed
   da4ac:	000e67a8 	.word	0x000e67a8

000da4b0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   da4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da4b2:	4605      	mov	r5, r0
   da4b4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   da4b6:	461c      	mov	r4, r3
   da4b8:	b913      	cbnz	r3, da4c0 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   da4ba:	4b12      	ldr	r3, [pc, #72]	; (da504 <_ZN9TimeClass6formatElPKc+0x54>)
   da4bc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   da4be:	b12c      	cbz	r4, da4cc <_ZN9TimeClass6formatElPKc+0x1c>
   da4c0:	4b11      	ldr	r3, [pc, #68]	; (da508 <_ZN9TimeClass6formatElPKc+0x58>)
   da4c2:	4620      	mov	r0, r4
   da4c4:	6819      	ldr	r1, [r3, #0]
   da4c6:	f008 fa07 	bl	e28d8 <strcmp>
   da4ca:	b920      	cbnz	r0, da4d6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   da4cc:	9901      	ldr	r1, [sp, #4]
   da4ce:	4628      	mov	r0, r5
   da4d0:	f7ff ff6e 	bl	da3b0 <_ZN9TimeClass7timeStrEl>
   da4d4:	e013      	b.n	da4fe <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   da4d6:	4f0d      	ldr	r7, [pc, #52]	; (da50c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   da4d8:	9a01      	ldr	r2, [sp, #4]
   da4da:	683b      	ldr	r3, [r7, #0]
   da4dc:	4e0c      	ldr	r6, [pc, #48]	; (da510 <_ZN9TimeClass6formatElPKc+0x60>)
   da4de:	441a      	add	r2, r3
   da4e0:	6833      	ldr	r3, [r6, #0]
   da4e2:	a802      	add	r0, sp, #8
   da4e4:	4413      	add	r3, r2
   da4e6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   da4ea:	f007 fe6f 	bl	e21cc <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da4ee:	683a      	ldr	r2, [r7, #0]
   da4f0:	6833      	ldr	r3, [r6, #0]
   da4f2:	4601      	mov	r1, r0
   da4f4:	4413      	add	r3, r2
   da4f6:	4628      	mov	r0, r5
   da4f8:	4622      	mov	r2, r4
   da4fa:	f7ff ff7b 	bl	da3f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   da4fe:	4628      	mov	r0, r5
   da500:	b003      	add	sp, #12
   da502:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da504:	2003e26c 	.word	0x2003e26c
   da508:	2003d5bc 	.word	0x2003d5bc
   da50c:	2003e278 	.word	0x2003e278
   da510:	2003e270 	.word	0x2003e270

000da514 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   da514:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   da516:	2000      	movs	r0, #0
   da518:	f7fe ff86 	bl	d9428 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   da51c:	4604      	mov	r4, r0
   da51e:	b968      	cbnz	r0, da53c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da520:	f7ff f924 	bl	d976c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da524:	2801      	cmp	r0, #1
   da526:	d10b      	bne.n	da540 <_ZN9TimeClass7isValidEv+0x2c>
   da528:	4620      	mov	r0, r4
   da52a:	f7ff f957 	bl	d97dc <system_thread_get_state>
   da52e:	b938      	cbnz	r0, da540 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   da530:	f7ff fef4 	bl	da31c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da534:	b930      	cbnz	r0, da544 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   da536:	f7ff f9c5 	bl	d98c4 <spark_process>
   da53a:	e7f9      	b.n	da530 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   da53c:	2001      	movs	r0, #1
   da53e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   da540:	2000      	movs	r0, #0
   da542:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   da544:	f7ff feea 	bl	da31c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   da548:	2000      	movs	r0, #0
   da54a:	f7fe ff6d 	bl	d9428 <HAL_RTC_Time_Is_Valid>
   da54e:	3000      	adds	r0, #0
   da550:	bf18      	it	ne
   da552:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   da554:	bd10      	pop	{r4, pc}

000da556 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   da556:	b508      	push	{r3, lr}
    (void)isValid();
   da558:	f7ff ffdc 	bl	da514 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   da55c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   da560:	f7fe bf5a 	b.w	d9418 <HAL_RTC_Get_UnixTime>

000da564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da564:	4b02      	ldr	r3, [pc, #8]	; (da570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da566:	681a      	ldr	r2, [r3, #0]
   da568:	4b02      	ldr	r3, [pc, #8]	; (da574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da56a:	601a      	str	r2, [r3, #0]
   da56c:	4770      	bx	lr
   da56e:	bf00      	nop
   da570:	2003d5bc 	.word	0x2003d5bc
   da574:	2003e26c 	.word	0x2003e26c

000da578 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da578:	2100      	movs	r1, #0
   da57a:	f7ff b907 	b.w	d978c <system_delay_ms>

000da57e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da57e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da580:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da582:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da584:	689b      	ldr	r3, [r3, #8]
   da586:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da588:	68a3      	ldr	r3, [r4, #8]
   da58a:	3b01      	subs	r3, #1
   da58c:	60a3      	str	r3, [r4, #8]
   da58e:	b92b      	cbnz	r3, da59c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   da590:	6823      	ldr	r3, [r4, #0]
   da592:	4620      	mov	r0, r4
   da594:	68db      	ldr	r3, [r3, #12]
        }
    }
   da596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da59a:	4718      	bx	r3
   da59c:	bd10      	pop	{r4, pc}
	...

000da5a0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   da5a0:	b510      	push	{r4, lr}
   da5a2:	4b06      	ldr	r3, [pc, #24]	; (da5bc <_ZN9TCPClientD1Ev+0x1c>)
   da5a4:	6003      	str	r3, [r0, #0]
   da5a6:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da5a8:	6980      	ldr	r0, [r0, #24]
   da5aa:	b128      	cbz	r0, da5b8 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da5ac:	6843      	ldr	r3, [r0, #4]
   da5ae:	3b01      	subs	r3, #1
   da5b0:	6043      	str	r3, [r0, #4]
   da5b2:	b90b      	cbnz	r3, da5b8 <_ZN9TCPClientD1Ev+0x18>
   da5b4:	f7ff ffe3 	bl	da57e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   da5b8:	4620      	mov	r0, r4
   da5ba:	bd10      	pop	{r4, pc}
   da5bc:	000e6948 	.word	0x000e6948

000da5c0 <_ZN9TCPClientD0Ev>:
   da5c0:	b510      	push	{r4, lr}
   da5c2:	4604      	mov	r4, r0
   da5c4:	f7ff ffec 	bl	da5a0 <_ZN9TCPClientD1Ev>
   da5c8:	4620      	mov	r0, r4
   da5ca:	211c      	movs	r1, #28
   da5cc:	f001 fc5f 	bl	dbe8e <_ZdlPvj>
   da5d0:	4620      	mov	r0, r4
   da5d2:	bd10      	pop	{r4, pc}

000da5d4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   da5d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   da5d6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   da5d8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   da5da:	b113      	cbz	r3, da5e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da5dc:	2203      	movs	r2, #3
   da5de:	4601      	mov	r1, r0
   da5e0:	4798      	blx	r3
    }
   da5e2:	4620      	mov	r0, r4
   da5e4:	bd10      	pop	{r4, pc}

000da5e6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da5e6:	b510      	push	{r4, lr}
   da5e8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   da5ea:	f7ff fff3 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
   da5ee:	4620      	mov	r0, r4
   da5f0:	bd10      	pop	{r4, pc}

000da5f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   da5f2:	b513      	push	{r0, r1, r4, lr}
   da5f4:	460b      	mov	r3, r1
   da5f6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da5f8:	c803      	ldmia	r0, {r0, r1}
   da5fa:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da5fe:	e893 0003 	ldmia.w	r3, {r0, r1}
   da602:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da606:	e89d 0003 	ldmia.w	sp, {r0, r1}
   da60a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da60e:	b002      	add	sp, #8
   da610:	bd10      	pop	{r4, pc}
	...

000da614 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da614:	4803      	ldr	r0, [pc, #12]	; (da624 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da616:	4a04      	ldr	r2, [pc, #16]	; (da628 <_GLOBAL__sub_I_RGB+0x14>)
   da618:	4904      	ldr	r1, [pc, #16]	; (da62c <_GLOBAL__sub_I_RGB+0x18>)
   da61a:	2300      	movs	r3, #0
   da61c:	6083      	str	r3, [r0, #8]
   da61e:	f001 bc31 	b.w	dbe84 <__aeabi_atexit>
   da622:	bf00      	nop
   da624:	2003e27c 	.word	0x2003e27c
   da628:	2003d6b0 	.word	0x2003d6b0
   da62c:	000da5e7 	.word	0x000da5e7

000da630 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   da630:	4770      	bx	lr

000da632 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   da632:	7d00      	ldrb	r0, [r0, #20]
   da634:	4770      	bx	lr
	...

000da638 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   da638:	7d03      	ldrb	r3, [r0, #20]
   da63a:	b11b      	cbz	r3, da644 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   da63c:	6983      	ldr	r3, [r0, #24]
   da63e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   da642:	d102      	bne.n	da64a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   da644:	ed9f 0a05 	vldr	s0, [pc, #20]	; da65c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   da648:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   da64a:	ee07 3a90 	vmov	s15, r3
   da64e:	ed9f 7a04 	vldr	s14, [pc, #16]	; da660 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   da652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da656:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   da65a:	4770      	bx	lr
   da65c:	00000000 	.word	0x00000000
   da660:	42c80000 	.word	0x42c80000

000da664 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   da664:	7d03      	ldrb	r3, [r0, #20]
   da666:	b11b      	cbz	r3, da670 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   da668:	6a03      	ldr	r3, [r0, #32]
   da66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   da66e:	d102      	bne.n	da676 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   da670:	ed9f 0a05 	vldr	s0, [pc, #20]	; da688 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   da674:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   da676:	ee07 3a90 	vmov	s15, r3
   da67a:	ed9f 7a04 	vldr	s14, [pc, #16]	; da68c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   da67e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   da682:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   da686:	4770      	bx	lr
   da688:	00000000 	.word	0x00000000
   da68c:	42c80000 	.word	0x42c80000

000da690 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   da690:	b570      	push	{r4, r5, r6, lr}
   da692:	460d      	mov	r5, r1
   da694:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   da696:	220a      	movs	r2, #10
   da698:	6881      	ldr	r1, [r0, #8]
   da69a:	4628      	mov	r0, r5
   da69c:	f7ff fcd4 	bl	da048 <_ZN5Print5printEii>
    n += p.print(',');
   da6a0:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   da6a2:	4604      	mov	r4, r0
    n += p.print(',');
   da6a4:	4628      	mov	r0, r5
   da6a6:	f7ff fc65 	bl	d9f74 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   da6aa:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   da6ac:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   da6ae:	68f1      	ldr	r1, [r6, #12]
   da6b0:	4628      	mov	r0, r5
   da6b2:	f7ff fcc9 	bl	da048 <_ZN5Print5printEii>
    return n;
}
   da6b6:	4420      	add	r0, r4
   da6b8:	bd70      	pop	{r4, r5, r6, pc}

000da6ba <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   da6ba:	f1a0 0004 	sub.w	r0, r0, #4
   da6be:	f7ff bfe7 	b.w	da690 <_ZNK14CellularSignal7printToER5Print>

000da6c2 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   da6c2:	b510      	push	{r4, lr}
   da6c4:	2128      	movs	r1, #40	; 0x28
   da6c6:	4604      	mov	r4, r0
   da6c8:	f001 fbe1 	bl	dbe8e <_ZdlPvj>
   da6cc:	4620      	mov	r0, r4
   da6ce:	bd10      	pop	{r4, pc}

000da6d0 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   da6d0:	7d03      	ldrb	r3, [r0, #20]
   da6d2:	b17b      	cbz	r3, da6f4 <_ZNK14CellularSignal10getQualityEv+0x24>
   da6d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   da6d6:	2b00      	cmp	r3, #0
   da6d8:	db0c      	blt.n	da6f4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   da6da:	ee07 3a90 	vmov	s15, r3
   da6de:	eddf 6a07 	vldr	s13, [pc, #28]	; da6fc <_ZNK14CellularSignal10getQualityEv+0x2c>
   da6e2:	ed9f 0a07 	vldr	s0, [pc, #28]	; da700 <_ZNK14CellularSignal10getQualityEv+0x30>
   da6e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   da6ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
   da6ee:	ee27 0a80 	vmul.f32	s0, s15, s0
   da6f2:	4770      	bx	lr
    }

    return -1.0f;
   da6f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   da6f8:	4770      	bx	lr
   da6fa:	bf00      	nop
   da6fc:	477fff00 	.word	0x477fff00
   da700:	42c80000 	.word	0x42c80000

000da704 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   da704:	7d03      	ldrb	r3, [r0, #20]
   da706:	b17b      	cbz	r3, da728 <_ZNK14CellularSignal11getStrengthEv+0x24>
   da708:	69c3      	ldr	r3, [r0, #28]
   da70a:	2b00      	cmp	r3, #0
   da70c:	db0c      	blt.n	da728 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   da70e:	ee07 3a90 	vmov	s15, r3
   da712:	eddf 6a07 	vldr	s13, [pc, #28]	; da730 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   da716:	ed9f 0a07 	vldr	s0, [pc, #28]	; da734 <_ZNK14CellularSignal11getStrengthEv+0x30>
   da71a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   da71e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   da722:	ee27 0a80 	vmul.f32	s0, s15, s0
   da726:	4770      	bx	lr
    }

    return -1.0f;
   da728:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   da72c:	4770      	bx	lr
   da72e:	bf00      	nop
   da730:	477fff00 	.word	0x477fff00
   da734:	42c80000 	.word	0x42c80000

000da738 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   da738:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   da73a:	460d      	mov	r5, r1
   da73c:	f100 0410 	add.w	r4, r0, #16
   da740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da744:	e895 0003 	ldmia.w	r5, {r0, r1}
   da748:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   da74c:	2001      	movs	r0, #1
   da74e:	bd30      	pop	{r4, r5, pc}

000da750 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   da750:	6800      	ldr	r0, [r0, #0]
   da752:	f000 be68 	b.w	db426 <_ZN7TwoWire4lockEv>

000da756 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   da756:	b510      	push	{r4, lr}
   da758:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   da75a:	6001      	str	r1, [r0, #0]
   da75c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   da75e:	b10a      	cbz	r2, da764 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   da760:	f7ff fff6 	bl	da750 <_ZN9FuelGauge4lockEv>
    }
}
   da764:	4620      	mov	r0, r4
   da766:	bd10      	pop	{r4, pc}

000da768 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   da768:	b538      	push	{r3, r4, r5, lr}
   da76a:	4604      	mov	r4, r0
   da76c:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   da76e:	f001 fb69 	bl	dbe44 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   da772:	462a      	mov	r2, r5
   da774:	4601      	mov	r1, r0
   da776:	4620      	mov	r0, r4
   da778:	f7ff ffed 	bl	da756 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   da77c:	4620      	mov	r0, r4
   da77e:	bd38      	pop	{r3, r4, r5, pc}

000da780 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   da780:	6800      	ldr	r0, [r0, #0]
   da782:	f000 be59 	b.w	db438 <_ZN7TwoWire6unlockEv>

000da786 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   da786:	b510      	push	{r4, lr}
{
    if (lock_) {
   da788:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   da78a:	4604      	mov	r4, r0
{
    if (lock_) {
   da78c:	b10b      	cbz	r3, da792 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   da78e:	f7ff fff7 	bl	da780 <_ZN9FuelGauge6unlockEv>
    }
}
   da792:	4620      	mov	r0, r4
   da794:	bd10      	pop	{r4, pc}

000da796 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   da796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da798:	4604      	mov	r4, r0
   da79a:	4616      	mov	r6, r2
   da79c:	461d      	mov	r5, r3
   da79e:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   da7a0:	f7ff ffd6 	bl	da750 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   da7a4:	6820      	ldr	r0, [r4, #0]
   da7a6:	2136      	movs	r1, #54	; 0x36
   da7a8:	f000 fe2a 	bl	db400 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   da7ac:	6820      	ldr	r0, [r4, #0]
   da7ae:	6803      	ldr	r3, [r0, #0]
   da7b0:	4639      	mov	r1, r7
   da7b2:	689b      	ldr	r3, [r3, #8]
   da7b4:	4798      	blx	r3
    i2c_.endTransmission(true);
   da7b6:	2101      	movs	r1, #1
   da7b8:	6820      	ldr	r0, [r4, #0]
   da7ba:	f000 fe24 	bl	db406 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   da7be:	2202      	movs	r2, #2
   da7c0:	2136      	movs	r1, #54	; 0x36
   da7c2:	2301      	movs	r3, #1
   da7c4:	6820      	ldr	r0, [r4, #0]
   da7c6:	f000 fe12 	bl	db3ee <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   da7ca:	6820      	ldr	r0, [r4, #0]
   da7cc:	6803      	ldr	r3, [r0, #0]
   da7ce:	695b      	ldr	r3, [r3, #20]
   da7d0:	4798      	blx	r3
   da7d2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   da7d4:	6820      	ldr	r0, [r4, #0]
   da7d6:	6803      	ldr	r3, [r0, #0]
   da7d8:	695b      	ldr	r3, [r3, #20]
   da7da:	4798      	blx	r3
   da7dc:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   da7de:	4620      	mov	r0, r4
}
   da7e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   da7e4:	f7ff bfcc 	b.w	da780 <_ZN9FuelGauge6unlockEv>

000da7e8 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   da7e8:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   da7ea:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   da7ec:	2200      	movs	r2, #0
	byte LSB = 0;
   da7ee:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   da7f2:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   da7f6:	2104      	movs	r1, #4
   da7f8:	f10d 0206 	add.w	r2, sp, #6
   da7fc:	f7ff ffcb 	bl	da796 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   da800:	f89d 0007 	ldrb.w	r0, [sp, #7]
   da804:	f007 f8de 	bl	e19c4 <__aeabi_i2d>
   da808:	2200      	movs	r2, #0
   da80a:	4b09      	ldr	r3, [pc, #36]	; (da830 <_ZN9FuelGauge6getSoCEv+0x48>)
   da80c:	f007 f940 	bl	e1a90 <__aeabi_dmul>
   da810:	f007 fc36 	bl	e2080 <__aeabi_d2f>
   da814:	f89d 3006 	ldrb.w	r3, [sp, #6]
   da818:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   da81c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   da820:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   da824:	ee37 0a80 	vadd.f32	s0, s15, s0
   da828:	b003      	add	sp, #12
   da82a:	f85d fb04 	ldr.w	pc, [sp], #4
   da82e:	bf00      	nop
   da830:	3f700000 	.word	0x3f700000

000da834 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   da834:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da836:	4b0c      	ldr	r3, [pc, #48]	; (da868 <serialEventRun+0x34>)
   da838:	b133      	cbz	r3, da848 <serialEventRun+0x14>
   da83a:	f000 fc13 	bl	db064 <_Z16_fetch_usbserialv>
   da83e:	6803      	ldr	r3, [r0, #0]
   da840:	691b      	ldr	r3, [r3, #16]
   da842:	4798      	blx	r3
   da844:	2800      	cmp	r0, #0
   da846:	dc09      	bgt.n	da85c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   da848:	4b08      	ldr	r3, [pc, #32]	; (da86c <serialEventRun+0x38>)
   da84a:	b163      	cbz	r3, da866 <serialEventRun+0x32>
   da84c:	f000 fd38 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   da850:	6803      	ldr	r3, [r0, #0]
   da852:	691b      	ldr	r3, [r3, #16]
   da854:	4798      	blx	r3
   da856:	2800      	cmp	r0, #0
   da858:	dc03      	bgt.n	da862 <serialEventRun+0x2e>
   da85a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   da85c:	f3af 8000 	nop.w
   da860:	e7f2      	b.n	da848 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   da862:	f3af 8000 	nop.w
   da866:	bd08      	pop	{r3, pc}
	...

000da870 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   da870:	b508      	push	{r3, lr}
	serialEventRun();
   da872:	f7ff ffdf 	bl	da834 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da876:	f7fe fdc7 	bl	d9408 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da87a:	4b01      	ldr	r3, [pc, #4]	; (da880 <_post_loop+0x10>)
   da87c:	6018      	str	r0, [r3, #0]
   da87e:	bd08      	pop	{r3, pc}
   da880:	2003e5f4 	.word	0x2003e5f4

000da884 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da884:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da886:	2300      	movs	r3, #0
   da888:	9300      	str	r3, [sp, #0]
   da88a:	461a      	mov	r2, r3
   da88c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da890:	f7fe ffbe 	bl	d9810 <system_ctrl_set_result>
}
   da894:	b003      	add	sp, #12
   da896:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da89c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   da89c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da89e:	8843      	ldrh	r3, [r0, #2]
   da8a0:	2b0a      	cmp	r3, #10
   da8a2:	d008      	beq.n	da8b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da8a4:	2b50      	cmp	r3, #80	; 0x50
   da8a6:	d109      	bne.n	da8bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   da8a8:	4b09      	ldr	r3, [pc, #36]	; (da8d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da8aa:	681b      	ldr	r3, [r3, #0]
   da8ac:	b13b      	cbz	r3, da8be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   da8ae:	b003      	add	sp, #12
   da8b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da8b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da8b6:	f7ff ffe5 	bl	da884 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da8ba:	e006      	b.n	da8ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da8bc:	2300      	movs	r3, #0
   da8be:	9300      	str	r3, [sp, #0]
   da8c0:	461a      	mov	r2, r3
   da8c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da8c6:	f7fe ffa3 	bl	d9810 <system_ctrl_set_result>
        break;
    }
}
   da8ca:	b003      	add	sp, #12
   da8cc:	f85d fb04 	ldr.w	pc, [sp], #4
   da8d0:	2003e28c 	.word	0x2003e28c

000da8d4 <module_user_init_hook>:

void module_user_init_hook()
{
   da8d4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da8d6:	f7fe fd8f 	bl	d93f8 <HAL_RNG_GetRandomNumber>
   da8da:	4604      	mov	r4, r0
    srand(seed);
   da8dc:	f007 ffd4 	bl	e2888 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da8e0:	4b07      	ldr	r3, [pc, #28]	; (da900 <module_user_init_hook+0x2c>)
   da8e2:	b113      	cbz	r3, da8ea <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   da8e4:	4620      	mov	r0, r4
   da8e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da8ea:	2100      	movs	r1, #0
   da8ec:	4804      	ldr	r0, [pc, #16]	; (da900 <module_user_init_hook+0x2c>)
   da8ee:	f7ff f819 	bl	d9924 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da8f2:	2100      	movs	r1, #0
   da8f4:	4803      	ldr	r0, [pc, #12]	; (da904 <module_user_init_hook+0x30>)
}
   da8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da8fa:	f7fe bf7f 	b.w	d97fc <system_ctrl_set_app_request_handler>
   da8fe:	bf00      	nop
   da900:	00000000 	.word	0x00000000
   da904:	000da89d 	.word	0x000da89d

000da908 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da908:	4770      	bx	lr

000da90a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   da90a:	2000      	movs	r0, #0
   da90c:	4770      	bx	lr

000da90e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da90e:	b510      	push	{r4, lr}
   da910:	2110      	movs	r1, #16
   da912:	4604      	mov	r4, r0
   da914:	f001 fabb 	bl	dbe8e <_ZdlPvj>
   da918:	4620      	mov	r0, r4
   da91a:	bd10      	pop	{r4, pc}

000da91c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   da91c:	b508      	push	{r3, lr}
      { delete this; }
   da91e:	b108      	cbz	r0, da924 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   da920:	f7ff fff5 	bl	da90e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da924:	bd08      	pop	{r3, pc}

000da926 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da926:	2200      	movs	r2, #0
   da928:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da92a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da92c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   da930:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   da932:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   da936:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da938:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da93a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da93c:	680c      	ldr	r4, [r1, #0]
   da93e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da940:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   da942:	bd10      	pop	{r4, pc}

000da944 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da944:	b510      	push	{r4, lr}
   da946:	4604      	mov	r4, r0
    free((void*)msg_);
   da948:	6800      	ldr	r0, [r0, #0]
   da94a:	f7fe fffb 	bl	d9944 <free>
}
   da94e:	4620      	mov	r0, r4
   da950:	bd10      	pop	{r4, pc}

000da952 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   da952:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da954:	68c4      	ldr	r4, [r0, #12]
   da956:	b1f4      	cbz	r4, da996 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   da958:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da95a:	2b02      	cmp	r3, #2
   da95c:	d103      	bne.n	da966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da95e:	f104 000c 	add.w	r0, r4, #12
   da962:	f7ff ffef 	bl	da944 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   da966:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   da968:	b135      	cbz	r5, da978 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   da96a:	4628      	mov	r0, r5
   da96c:	f7ff fe32 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
   da970:	2110      	movs	r1, #16
   da972:	4628      	mov	r0, r5
   da974:	f001 fa8b 	bl	dbe8e <_ZdlPvj>
   da978:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da97a:	b135      	cbz	r5, da98a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da97c:	4628      	mov	r0, r5
   da97e:	f7ff fe29 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
   da982:	2110      	movs	r1, #16
   da984:	4628      	mov	r0, r5
   da986:	f001 fa82 	bl	dbe8e <_ZdlPvj>
   da98a:	4620      	mov	r0, r4
   da98c:	2114      	movs	r1, #20
   da98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da992:	f001 ba7c 	b.w	dbe8e <_ZdlPvj>
   da996:	bd38      	pop	{r3, r4, r5, pc}

000da998 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   da998:	b513      	push	{r0, r1, r4, lr}
   da99a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da99c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   da9a0:	2300      	movs	r3, #0
   da9a2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da9a4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da9a6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da9a8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9aa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da9ac:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da9ae:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9b0:	f7fa fef2 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9b4:	4620      	mov	r0, r4
   da9b6:	b002      	add	sp, #8
   da9b8:	bd10      	pop	{r4, pc}

000da9ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da9ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da9bc:	460c      	mov	r4, r1
   da9be:	ad02      	add	r5, sp, #8
   da9c0:	f854 3b04 	ldr.w	r3, [r4], #4
   da9c4:	f845 3d08 	str.w	r3, [r5, #-8]!
   da9c8:	4606      	mov	r6, r0
   da9ca:	460f      	mov	r7, r1
   da9cc:	a801      	add	r0, sp, #4
   da9ce:	4621      	mov	r1, r4
   da9d0:	f7ff fa96 	bl	d9f00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   da9d4:	4629      	mov	r1, r5
   da9d6:	4630      	mov	r0, r6
   da9d8:	f7ff ffde 	bl	da998 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9dc:	a801      	add	r0, sp, #4
   da9de:	f7fa fedb 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9e2:	4620      	mov	r0, r4
   da9e4:	f7fa fed8 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   da9e8:	4638      	mov	r0, r7
   da9ea:	2108      	movs	r1, #8
   da9ec:	f001 fa4f 	bl	dbe8e <_ZdlPvj>
        return p;
    }
   da9f0:	4630      	mov	r0, r6
   da9f2:	b003      	add	sp, #12
   da9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000da9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   da9f8:	b538      	push	{r3, r4, r5, lr}
   da9fa:	2300      	movs	r3, #0
   da9fc:	4604      	mov	r4, r0
   da9fe:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa00:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   daa02:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa04:	f7f9 fb49 	bl	d409a <_Znwj>
   daa08:	b128      	cbz	r0, daa16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   daa0a:	2301      	movs	r3, #1
   daa0c:	6043      	str	r3, [r0, #4]
   daa0e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   daa10:	4b02      	ldr	r3, [pc, #8]	; (daa1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   daa12:	6003      	str	r3, [r0, #0]
   daa14:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa16:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   daa18:	4620      	mov	r0, r4
   daa1a:	bd38      	pop	{r3, r4, r5, pc}
   daa1c:	000e680c 	.word	0x000e680c

000daa20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa20:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   daa22:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa24:	b90a      	cbnz	r2, daa2a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   daa26:	f001 fa34 	bl	dbe92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa2a:	68c3      	ldr	r3, [r0, #12]
    }
   daa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa30:	4718      	bx	r3

000daa32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   daa32:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daa34:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   daa36:	f100 0110 	add.w	r1, r0, #16
   daa3a:	f7ff fff1 	bl	daa20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   daa3e:	bd08      	pop	{r3, pc}

000daa40 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa40:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   daa42:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa44:	b90a      	cbnz	r2, daa4a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   daa46:	f001 fa24 	bl	dbe92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa4a:	68c3      	ldr	r3, [r0, #12]
    }
   daa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa50:	4718      	bx	r3

000daa52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   daa52:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daa54:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   daa56:	f100 0110 	add.w	r1, r0, #16
   daa5a:	f7ff fff1 	bl	daa40 <_ZNKSt8functionIFvRKbEEclES1_>
   daa5e:	bd08      	pop	{r3, pc}

000daa60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daa60:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daa62:	2300      	movs	r3, #0
   daa64:	6083      	str	r3, [r0, #8]
   daa66:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daa68:	4604      	mov	r4, r0
   daa6a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   daa6c:	b12b      	cbz	r3, daa7a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   daa6e:	2202      	movs	r2, #2
   daa70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   daa72:	68eb      	ldr	r3, [r5, #12]
   daa74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   daa76:	68ab      	ldr	r3, [r5, #8]
   daa78:	60a3      	str	r3, [r4, #8]
	}
    }
   daa7a:	4620      	mov	r0, r4
   daa7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000daa80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   daa80:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa82:	b089      	sub	sp, #36	; 0x24
   daa84:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   daa86:	4668      	mov	r0, sp
   daa88:	f7ff ff4d 	bl	da926 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   daa8c:	2300      	movs	r3, #0
   daa8e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   daa92:	f04f 0202 	mov.w	r2, #2
   daa96:	e8d4 3f4f 	ldrexb	r3, [r4]
   daa9a:	2b00      	cmp	r3, #0
   daa9c:	d103      	bne.n	daaa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   daa9e:	e8c4 2f41 	strexb	r1, r2, [r4]
   daaa2:	2900      	cmp	r1, #0
   daaa4:	d1f7      	bne.n	daa96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   daaa6:	d002      	beq.n	daaae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   daaa8:	f88d 3008 	strb.w	r3, [sp, #8]
   daaac:	e063      	b.n	dab76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   daaae:	f114 050c 	adds.w	r5, r4, #12
   daab2:	d003      	beq.n	daabc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   daab4:	4669      	mov	r1, sp
   daab6:	4628      	mov	r0, r5
   daab8:	f7ff ff35 	bl	da926 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   daabc:	f3bf 8f5f 	dmb	sy
   daac0:	2301      	movs	r3, #1
   daac2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   daac4:	2000      	movs	r0, #0
   daac6:	f104 0308 	add.w	r3, r4, #8
   daaca:	f3bf 8f5f 	dmb	sy
   daace:	e853 6f00 	ldrex	r6, [r3]
   daad2:	e843 0200 	strex	r2, r0, [r3]
   daad6:	2a00      	cmp	r2, #0
   daad8:	d1f9      	bne.n	daace <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   daada:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   daade:	2e00      	cmp	r6, #0
   daae0:	d049      	beq.n	dab76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   daae2:	f7fe fe6b 	bl	d97bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   daae6:	b120      	cbz	r0, daaf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daae8:	4629      	mov	r1, r5
   daaea:	4630      	mov	r0, r6
   daaec:	f7ff ff98 	bl	daa20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   daaf0:	e03a      	b.n	dab68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daaf2:	4631      	mov	r1, r6
   daaf4:	a802      	add	r0, sp, #8
   daaf6:	f7ff ffb3 	bl	daa60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   daafa:	68e0      	ldr	r0, [r4, #12]
   daafc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dab00:	b108      	cbz	r0, dab06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dab02:	f007 fefb 	bl	e28fc <strdup>
   dab06:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dab08:	2010      	movs	r0, #16
   dab0a:	f8ad 501c 	strh.w	r5, [sp, #28]
   dab0e:	f7f9 fac4 	bl	d409a <_Znwj>
   dab12:	4605      	mov	r5, r0
   dab14:	b1e8      	cbz	r0, dab52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dab16:	2700      	movs	r7, #0
   dab18:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dab1a:	2018      	movs	r0, #24
   dab1c:	f7f9 fabd 	bl	d409a <_Znwj>
   dab20:	4604      	mov	r4, r0
   dab22:	b188      	cbz	r0, dab48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dab24:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dab26:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dab28:	a802      	add	r0, sp, #8
   dab2a:	f7ff fd62 	bl	da5f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab2e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dab30:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dab32:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab34:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dab36:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dab38:	a906      	add	r1, sp, #24
   dab3a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dab3c:	60e3      	str	r3, [r4, #12]
   dab3e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dab42:	9205      	str	r2, [sp, #20]
   dab44:	f7ff feef 	bl	da926 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dab48:	4b0d      	ldr	r3, [pc, #52]	; (dab80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dab4a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dab4c:	4b0d      	ldr	r3, [pc, #52]	; (dab84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dab4e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dab50:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dab52:	a806      	add	r0, sp, #24
   dab54:	f7ff fef6 	bl	da944 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dab58:	a802      	add	r0, sp, #8
   dab5a:	f7ff fd3b 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dab5e:	2200      	movs	r2, #0
   dab60:	4629      	mov	r1, r5
   dab62:	4809      	ldr	r0, [pc, #36]	; (dab88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dab64:	f7fe fe32 	bl	d97cc <application_thread_invoke>
   dab68:	4630      	mov	r0, r6
   dab6a:	f7ff fd33 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dab6e:	2110      	movs	r1, #16
   dab70:	4630      	mov	r0, r6
   dab72:	f001 f98c 	bl	dbe8e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dab76:	4668      	mov	r0, sp
   dab78:	f7ff fee4 	bl	da944 <_ZN8particle5ErrorD1Ev>
    }
   dab7c:	b009      	add	sp, #36	; 0x24
   dab7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dab80:	000daa33 	.word	0x000daa33
   dab84:	000daca9 	.word	0x000daca9
   dab88:	000db30d 	.word	0x000db30d

000dab8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dab90:	b08b      	sub	sp, #44	; 0x2c
   dab92:	4606      	mov	r6, r0
   dab94:	460f      	mov	r7, r1
   dab96:	4690      	mov	r8, r2
   dab98:	4699      	mov	r9, r3
   dab9a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dab9e:	f7fe fea1 	bl	d98e4 <spark_cloud_flag_connected>
   daba2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   daba4:	4683      	mov	fp, r0
   daba6:	bb30      	cbnz	r0, dabf6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   daba8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dabac:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dabae:	a905      	add	r1, sp, #20
   dabb0:	4628      	mov	r0, r5
   dabb2:	f8ad 3018 	strh.w	r3, [sp, #24]
   dabb6:	f7ff feb6 	bl	da926 <_ZN8particle5ErrorC1EOS0_>
   dabba:	2014      	movs	r0, #20
   dabbc:	f7f9 fa6d 	bl	d409a <_Znwj>
   dabc0:	4604      	mov	r4, r0
   dabc2:	b158      	cbz	r0, dabdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dabc4:	2302      	movs	r3, #2
   dabc6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dabc8:	2301      	movs	r3, #1
   dabca:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dabcc:	f8c0 b004 	str.w	fp, [r0, #4]
   dabd0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dabd4:	4629      	mov	r1, r5
   dabd6:	300c      	adds	r0, #12
   dabd8:	f7ff fea5 	bl	da926 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dabdc:	4630      	mov	r0, r6
   dabde:	4621      	mov	r1, r4
   dabe0:	f840 4b04 	str.w	r4, [r0], #4
   dabe4:	f7ff ff08 	bl	da9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dabe8:	4628      	mov	r0, r5
   dabea:	f7ff feab 	bl	da944 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dabee:	a805      	add	r0, sp, #20
   dabf0:	f7ff fea8 	bl	da944 <_ZN8particle5ErrorD1Ev>
   dabf4:	e052      	b.n	dac9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dabf6:	2400      	movs	r4, #0
   dabf8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dabfa:	2014      	movs	r0, #20
   dabfc:	606c      	str	r4, [r5, #4]
   dabfe:	60ac      	str	r4, [r5, #8]
   dac00:	9307      	str	r3, [sp, #28]
   dac02:	f7f9 fa4a 	bl	d409a <_Znwj>
   dac06:	4601      	mov	r1, r0
   dac08:	b118      	cbz	r0, dac12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dac0a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dac0c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dac0e:	6044      	str	r4, [r0, #4]
   dac10:	6084      	str	r4, [r0, #8]
   dac12:	a804      	add	r0, sp, #16
   dac14:	9103      	str	r1, [sp, #12]
   dac16:	f7ff feef 	bl	da9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dac1a:	4b22      	ldr	r3, [pc, #136]	; (daca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dac1c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dac1e:	2008      	movs	r0, #8
   dac20:	f7f9 fa3b 	bl	d409a <_Znwj>
   dac24:	4604      	mov	r4, r0
   dac26:	b128      	cbz	r0, dac34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dac28:	9b03      	ldr	r3, [sp, #12]
   dac2a:	f840 3b04 	str.w	r3, [r0], #4
   dac2e:	a904      	add	r1, sp, #16
   dac30:	f7ff f966 	bl	d9f00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dac34:	9500      	str	r5, [sp, #0]
   dac36:	fa5f f38a 	uxtb.w	r3, sl
   dac3a:	464a      	mov	r2, r9
   dac3c:	4641      	mov	r1, r8
   dac3e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dac40:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dac42:	f7fe fe57 	bl	d98f4 <spark_send_event>
   dac46:	b920      	cbnz	r0, dac52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dac48:	9b03      	ldr	r3, [sp, #12]
   dac4a:	785b      	ldrb	r3, [r3, #1]
   dac4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dac50:	b183      	cbz	r3, dac74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dac52:	9b03      	ldr	r3, [sp, #12]
   dac54:	9305      	str	r3, [sp, #20]
   dac56:	a904      	add	r1, sp, #16
   dac58:	a806      	add	r0, sp, #24
   dac5a:	f7ff f951 	bl	d9f00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dac5e:	a905      	add	r1, sp, #20
   dac60:	4630      	mov	r0, r6
   dac62:	f7ff fe99 	bl	da998 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dac66:	a806      	add	r0, sp, #24
   dac68:	f7fa fd96 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac6c:	a804      	add	r0, sp, #16
   dac6e:	f7fa fd93 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac72:	e013      	b.n	dac9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dac74:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dac78:	a905      	add	r1, sp, #20
   dac7a:	a803      	add	r0, sp, #12
   dac7c:	9205      	str	r2, [sp, #20]
   dac7e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dac82:	f7ff fefd 	bl	daa80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dac86:	a805      	add	r0, sp, #20
   dac88:	f7ff fe5c 	bl	da944 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dac8c:	a805      	add	r0, sp, #20
   dac8e:	9909      	ldr	r1, [sp, #36]	; 0x24
   dac90:	f7ff fe93 	bl	da9ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dac94:	a806      	add	r0, sp, #24
   dac96:	f7fa fd7f 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac9a:	e7da      	b.n	dac52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   dac9c:	4630      	mov	r0, r6
   dac9e:	b00b      	add	sp, #44	; 0x2c
   daca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daca4:	000dae19 	.word	0x000dae19

000daca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   daca8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dacaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dacae:	d006      	beq.n	dacbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dacb0:	2a03      	cmp	r2, #3
   dacb2:	d017      	beq.n	dace4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dacb4:	2a01      	cmp	r2, #1
   dacb6:	d122      	bne.n	dacfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dacb8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dacba:	6003      	str	r3, [r0, #0]
	      break;
   dacbc:	e01f      	b.n	dacfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dacbe:	2018      	movs	r0, #24
   dacc0:	680e      	ldr	r6, [r1, #0]
   dacc2:	f7f9 f9ea 	bl	d409a <_Znwj>
   dacc6:	4605      	mov	r5, r0
   dacc8:	b150      	cbz	r0, dace0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dacca:	4631      	mov	r1, r6
   daccc:	f7ff fec8 	bl	daa60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dacd0:	6930      	ldr	r0, [r6, #16]
   dacd2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dacd6:	b108      	cbz	r0, dacdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dacd8:	f007 fe10 	bl	e28fc <strdup>
   dacdc:	6128      	str	r0, [r5, #16]
   dacde:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dace0:	6025      	str	r5, [r4, #0]
   dace2:	e00c      	b.n	dacfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dace4:	6804      	ldr	r4, [r0, #0]
   dace6:	b154      	cbz	r4, dacfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dace8:	f104 0010 	add.w	r0, r4, #16
   dacec:	f7ff fe2a 	bl	da944 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dacf0:	4620      	mov	r0, r4
   dacf2:	f7ff fc6f 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dacf6:	2118      	movs	r1, #24
   dacf8:	4620      	mov	r0, r4
   dacfa:	f001 f8c8 	bl	dbe8e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dacfe:	2000      	movs	r0, #0
   dad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dad02 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dad02:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dad04:	2300      	movs	r3, #0
   dad06:	6083      	str	r3, [r0, #8]
   dad08:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dad0a:	4604      	mov	r4, r0
   dad0c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dad0e:	b12b      	cbz	r3, dad1c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dad10:	2202      	movs	r2, #2
   dad12:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dad14:	68eb      	ldr	r3, [r5, #12]
   dad16:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dad18:	68ab      	ldr	r3, [r5, #8]
   dad1a:	60a3      	str	r3, [r4, #8]
	}
    }
   dad1c:	4620      	mov	r0, r4
   dad1e:	bd38      	pop	{r3, r4, r5, pc}

000dad20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dad20:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dad22:	b570      	push	{r4, r5, r6, lr}
   dad24:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dad26:	d006      	beq.n	dad36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dad28:	2a03      	cmp	r2, #3
   dad2a:	d011      	beq.n	dad50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dad2c:	2a01      	cmp	r2, #1
   dad2e:	d118      	bne.n	dad62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dad30:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dad32:	6003      	str	r3, [r0, #0]
	      break;
   dad34:	e015      	b.n	dad62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dad36:	2014      	movs	r0, #20
   dad38:	680e      	ldr	r6, [r1, #0]
   dad3a:	f7f9 f9ae 	bl	d409a <_Znwj>
   dad3e:	4605      	mov	r5, r0
   dad40:	b120      	cbz	r0, dad4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dad42:	4631      	mov	r1, r6
   dad44:	f7ff ffdd 	bl	dad02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dad48:	7c33      	ldrb	r3, [r6, #16]
   dad4a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dad4c:	6025      	str	r5, [r4, #0]
   dad4e:	e008      	b.n	dad62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dad50:	6804      	ldr	r4, [r0, #0]
   dad52:	b134      	cbz	r4, dad62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dad54:	4620      	mov	r0, r4
   dad56:	f7ff fc3d 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dad5a:	2114      	movs	r1, #20
   dad5c:	4620      	mov	r0, r4
   dad5e:	f001 f896 	bl	dbe8e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dad62:	2000      	movs	r0, #0
   dad64:	bd70      	pop	{r4, r5, r6, pc}
	...

000dad68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dad68:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dad6a:	2300      	movs	r3, #0
   dad6c:	b087      	sub	sp, #28
   dad6e:	460c      	mov	r4, r1
   dad70:	f3bf 8f5f 	dmb	sy
   dad74:	e850 6f00 	ldrex	r6, [r0]
   dad78:	e840 3200 	strex	r2, r3, [r0]
   dad7c:	2a00      	cmp	r2, #0
   dad7e:	d1f9      	bne.n	dad74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dad80:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dad84:	2e00      	cmp	r6, #0
   dad86:	d03f      	beq.n	dae08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dad88:	4618      	mov	r0, r3
   dad8a:	f7fe fd17 	bl	d97bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dad8e:	4607      	mov	r7, r0
   dad90:	b120      	cbz	r0, dad9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dad92:	4621      	mov	r1, r4
   dad94:	4630      	mov	r0, r6
   dad96:	f7ff fe53 	bl	daa40 <_ZNKSt8functionIFvRKbEEclES1_>
   dad9a:	e02e      	b.n	dadfa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dad9c:	4631      	mov	r1, r6
   dad9e:	a801      	add	r0, sp, #4
   dada0:	f7ff ffaf 	bl	dad02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dada4:	7823      	ldrb	r3, [r4, #0]
   dada6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dadaa:	2010      	movs	r0, #16
   dadac:	f7f9 f975 	bl	d409a <_Znwj>
   dadb0:	4605      	mov	r5, r0
   dadb2:	b1d0      	cbz	r0, dadea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dadb4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dadb6:	2014      	movs	r0, #20
   dadb8:	f7f9 f96f 	bl	d409a <_Znwj>
   dadbc:	4604      	mov	r4, r0
   dadbe:	b178      	cbz	r0, dade0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dadc0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dadc2:	4601      	mov	r1, r0
   dadc4:	a801      	add	r0, sp, #4
   dadc6:	f7ff fc14 	bl	da5f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadca:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dadcc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dadce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dadd2:	9203      	str	r2, [sp, #12]
   dadd4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dadd6:	60e3      	str	r3, [r4, #12]
   dadd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   daddc:	9204      	str	r2, [sp, #16]
   dadde:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dade0:	4b0a      	ldr	r3, [pc, #40]	; (dae0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dade2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dade4:	4b0a      	ldr	r3, [pc, #40]	; (dae10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dade6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dade8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dadea:	a801      	add	r0, sp, #4
   dadec:	f7ff fbf2 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dadf0:	2200      	movs	r2, #0
   dadf2:	4629      	mov	r1, r5
   dadf4:	4807      	ldr	r0, [pc, #28]	; (dae14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dadf6:	f7fe fce9 	bl	d97cc <application_thread_invoke>
   dadfa:	4630      	mov	r0, r6
   dadfc:	f7ff fbea 	bl	da5d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dae00:	2110      	movs	r1, #16
   dae02:	4630      	mov	r0, r6
   dae04:	f001 f843 	bl	dbe8e <_ZdlPvj>
        }
    }
   dae08:	b007      	add	sp, #28
   dae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae0c:	000daa53 	.word	0x000daa53
   dae10:	000dad21 	.word	0x000dad21
   dae14:	000db30d 	.word	0x000db30d

000dae18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dae18:	b530      	push	{r4, r5, lr}
   dae1a:	b085      	sub	sp, #20
   dae1c:	4604      	mov	r4, r0
   dae1e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dae20:	4668      	mov	r0, sp
   dae22:	4611      	mov	r1, r2
   dae24:	f7ff fdc9 	bl	da9ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dae28:	b17c      	cbz	r4, dae4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dae2a:	b224      	sxth	r4, r4
   dae2c:	4628      	mov	r0, r5
   dae2e:	b10d      	cbz	r5, dae34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dae30:	f007 fd64 	bl	e28fc <strdup>
   dae34:	9002      	str	r0, [sp, #8]
   dae36:	a902      	add	r1, sp, #8
   dae38:	4668      	mov	r0, sp
   dae3a:	f8ad 400c 	strh.w	r4, [sp, #12]
   dae3e:	f7ff fe1f 	bl	daa80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dae42:	a802      	add	r0, sp, #8
   dae44:	f7ff fd7e 	bl	da944 <_ZN8particle5ErrorD1Ev>
   dae48:	e01d      	b.n	dae86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dae4a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dae4c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dae50:	f04f 0201 	mov.w	r2, #1
   dae54:	e8d0 3f4f 	ldrexb	r3, [r0]
   dae58:	42a3      	cmp	r3, r4
   dae5a:	d103      	bne.n	dae64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dae5c:	e8c0 2f41 	strexb	r1, r2, [r0]
   dae60:	2900      	cmp	r1, #0
   dae62:	d1f7      	bne.n	dae54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dae64:	d002      	beq.n	dae6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dae66:	f88d 3008 	strb.w	r3, [sp, #8]
   dae6a:	e00c      	b.n	dae86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dae6c:	f110 010c 	adds.w	r1, r0, #12
   dae70:	f04f 0301 	mov.w	r3, #1
   dae74:	bf18      	it	ne
   dae76:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dae78:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dae7c:	3004      	adds	r0, #4
   dae7e:	f800 3c03 	strb.w	r3, [r0, #-3]
   dae82:	f7ff ff71 	bl	dad68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dae86:	a801      	add	r0, sp, #4
   dae88:	f7fa fc86 	bl	d5798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dae8c:	b005      	add	sp, #20
   dae8e:	bd30      	pop	{r4, r5, pc}

000dae90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dae90:	4770      	bx	lr

000dae92 <_ZN9IPAddressD0Ev>:
   dae92:	b510      	push	{r4, lr}
   dae94:	2118      	movs	r1, #24
   dae96:	4604      	mov	r4, r0
   dae98:	f000 fff9 	bl	dbe8e <_ZdlPvj>
   dae9c:	4620      	mov	r0, r4
   dae9e:	bd10      	pop	{r4, pc}

000daea0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   daea0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   daea2:	7d03      	ldrb	r3, [r0, #20]
   daea4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   daea6:	b08d      	sub	sp, #52	; 0x34
   daea8:	460e      	mov	r6, r1
   daeaa:	f100 0704 	add.w	r7, r0, #4
   daeae:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   daeb2:	d002      	beq.n	daeba <_ZNK9IPAddress7printToER5Print+0x1a>
   daeb4:	f100 0508 	add.w	r5, r0, #8
   daeb8:	e018      	b.n	daeec <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   daeba:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   daebc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   daebe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   daec2:	232f      	movs	r3, #47	; 0x2f
   daec4:	462a      	mov	r2, r5
   daec6:	200a      	movs	r0, #10
   daec8:	f7fe faee 	bl	d94a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   daecc:	4628      	mov	r0, r5
   daece:	f008 fa45 	bl	e335c <strlen>
   daed2:	6833      	ldr	r3, [r6, #0]
   daed4:	4602      	mov	r2, r0
   daed6:	68db      	ldr	r3, [r3, #12]
   daed8:	4629      	mov	r1, r5
   daeda:	4630      	mov	r0, r6
   daedc:	4798      	blx	r3
   daede:	e00f      	b.n	daf00 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   daee0:	b124      	cbz	r4, daeec <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   daee2:	212e      	movs	r1, #46	; 0x2e
   daee4:	4630      	mov	r0, r6
   daee6:	f7ff f845 	bl	d9f74 <_ZN5Print5printEc>
   daeea:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   daeec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   daef0:	220a      	movs	r2, #10
   daef2:	4630      	mov	r0, r6
   daef4:	f7ff f884 	bl	da000 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   daef8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   daefa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   daefc:	d1f0      	bne.n	daee0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   daefe:	4620      	mov	r0, r4
    }
    return n;
}
   daf00:	b00d      	add	sp, #52	; 0x34
   daf02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000daf04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   daf04:	b510      	push	{r4, lr}
   daf06:	4b05      	ldr	r3, [pc, #20]	; (daf1c <_ZN9IPAddressC1Ev+0x18>)
   daf08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   daf0a:	2211      	movs	r2, #17
   daf0c:	f840 3b04 	str.w	r3, [r0], #4
   daf10:	2100      	movs	r1, #0
   daf12:	f007 fa62 	bl	e23da <memset>
{
    clear();
}
   daf16:	4620      	mov	r0, r4
   daf18:	bd10      	pop	{r4, pc}
   daf1a:	bf00      	nop
   daf1c:	000e6828 	.word	0x000e6828

000daf20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   daf20:	4603      	mov	r3, r0
   daf22:	4a07      	ldr	r2, [pc, #28]	; (daf40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   daf24:	b510      	push	{r4, lr}
   daf26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   daf2a:	f101 0210 	add.w	r2, r1, #16
   daf2e:	f851 4b04 	ldr.w	r4, [r1], #4
   daf32:	f843 4b04 	str.w	r4, [r3], #4
   daf36:	4291      	cmp	r1, r2
   daf38:	d1f9      	bne.n	daf2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   daf3a:	780a      	ldrb	r2, [r1, #0]
   daf3c:	701a      	strb	r2, [r3, #0]
}
   daf3e:	bd10      	pop	{r4, pc}
   daf40:	000e6828 	.word	0x000e6828

000daf44 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   daf44:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   daf46:	2b04      	cmp	r3, #4
   daf48:	d101      	bne.n	daf4e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   daf4a:	6840      	ldr	r0, [r0, #4]
   daf4c:	e008      	b.n	daf60 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   daf4e:	2b06      	cmp	r3, #6
   daf50:	d10a      	bne.n	daf68 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   daf52:	6843      	ldr	r3, [r0, #4]
   daf54:	b953      	cbnz	r3, daf6c <_ZNK9IPAddresscvbEv+0x28>
   daf56:	6883      	ldr	r3, [r0, #8]
   daf58:	b943      	cbnz	r3, daf6c <_ZNK9IPAddresscvbEv+0x28>
   daf5a:	68c3      	ldr	r3, [r0, #12]
   daf5c:	b933      	cbnz	r3, daf6c <_ZNK9IPAddresscvbEv+0x28>
   daf5e:	6900      	ldr	r0, [r0, #16]
   daf60:	3000      	adds	r0, #0
   daf62:	bf18      	it	ne
   daf64:	2001      	movne	r0, #1
   daf66:	4770      	bx	lr
    } else {
        return false;
   daf68:	2000      	movs	r0, #0
   daf6a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   daf6c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   daf6e:	4770      	bx	lr

000daf70 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   daf70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   daf72:	f89d 4008 	ldrb.w	r4, [sp, #8]
   daf76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   daf7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   daf7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   daf82:	2304      	movs	r3, #4
   daf84:	6041      	str	r1, [r0, #4]
   daf86:	7503      	strb	r3, [r0, #20]
   daf88:	bd10      	pop	{r4, pc}

000daf8a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   daf8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   daf8c:	780d      	ldrb	r5, [r1, #0]
   daf8e:	788b      	ldrb	r3, [r1, #2]
   daf90:	784a      	ldrb	r2, [r1, #1]
   daf92:	78c9      	ldrb	r1, [r1, #3]
   daf94:	9100      	str	r1, [sp, #0]
   daf96:	4629      	mov	r1, r5
   daf98:	f7ff ffea 	bl	daf70 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   daf9c:	b003      	add	sp, #12
   daf9e:	bd30      	pop	{r4, r5, pc}

000dafa0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dafa0:	7441      	strb	r1, [r0, #17]
   dafa2:	4770      	bx	lr

000dafa4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dafa4:	4770      	bx	lr

000dafa6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dafa6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dafa8:	2100      	movs	r1, #0
   dafaa:	7c00      	ldrb	r0, [r0, #16]
   dafac:	f7fe fbb4 	bl	d9718 <HAL_USB_USART_Receive_Data>
}
   dafb0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dafb4:	bf28      	it	cs
   dafb6:	f04f 30ff 	movcs.w	r0, #4294967295
   dafba:	bd08      	pop	{r3, pc}

000dafbc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dafbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dafbe:	2101      	movs	r1, #1
   dafc0:	7c00      	ldrb	r0, [r0, #16]
   dafc2:	f7fe fba9 	bl	d9718 <HAL_USB_USART_Receive_Data>
}
   dafc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dafca:	bf28      	it	cs
   dafcc:	f04f 30ff 	movcs.w	r0, #4294967295
   dafd0:	bd08      	pop	{r3, pc}

000dafd2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dafd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dafd4:	7c00      	ldrb	r0, [r0, #16]
   dafd6:	f7fe fb97 	bl	d9708 <HAL_USB_USART_Available_Data_For_Write>
}
   dafda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafde:	bd08      	pop	{r3, pc}

000dafe0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dafe0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dafe2:	7c00      	ldrb	r0, [r0, #16]
   dafe4:	f7fe fb88 	bl	d96f8 <HAL_USB_USART_Available_Data>
}
   dafe8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafec:	bd08      	pop	{r3, pc}

000dafee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dafee:	7c00      	ldrb	r0, [r0, #16]
   daff0:	f7fe bba2 	b.w	d9738 <HAL_USB_USART_Flush_Data>

000daff4 <_ZN9USBSerialD0Ev>:
   daff4:	b510      	push	{r4, lr}
   daff6:	2114      	movs	r1, #20
   daff8:	4604      	mov	r4, r0
   daffa:	f000 ff48 	bl	dbe8e <_ZdlPvj>
   daffe:	4620      	mov	r0, r4
   db000:	bd10      	pop	{r4, pc}

000db002 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db002:	b538      	push	{r3, r4, r5, lr}
   db004:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db006:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db008:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db00a:	f7fe fb7d 	bl	d9708 <HAL_USB_USART_Available_Data_For_Write>
   db00e:	2800      	cmp	r0, #0
   db010:	dc01      	bgt.n	db016 <_ZN9USBSerial5writeEh+0x14>
   db012:	7c60      	ldrb	r0, [r4, #17]
   db014:	b128      	cbz	r0, db022 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db016:	4629      	mov	r1, r5
   db018:	7c20      	ldrb	r0, [r4, #16]
   db01a:	f7fe fb85 	bl	d9728 <HAL_USB_USART_Send_Data>
   db01e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   db022:	bd38      	pop	{r3, r4, r5, pc}

000db024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db024:	b510      	push	{r4, lr}
   db026:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db028:	2300      	movs	r3, #0
   db02a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db02c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db030:	60a3      	str	r3, [r4, #8]
   db032:	4b05      	ldr	r3, [pc, #20]	; (db048 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db034:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db036:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db038:	4608      	mov	r0, r1
{
  _serial = serial;
   db03a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db03c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db03e:	4611      	mov	r1, r2
   db040:	f7fe fb4a 	bl	d96d8 <HAL_USB_USART_Init>
}
   db044:	4620      	mov	r0, r4
   db046:	bd10      	pop	{r4, pc}
   db048:	000e683c 	.word	0x000e683c

000db04c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db04c:	2200      	movs	r2, #0
   db04e:	7c00      	ldrb	r0, [r0, #16]
   db050:	f7fe bb4a 	b.w	d96e8 <HAL_USB_USART_Begin>

000db054 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db054:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db056:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db058:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db05a:	2100      	movs	r1, #0
   db05c:	f007 f9bd 	bl	e23da <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db060:	4620      	mov	r0, r4
   db062:	bd10      	pop	{r4, pc}

000db064 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db064:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db066:	4d0e      	ldr	r5, [pc, #56]	; (db0a0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db068:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db06a:	a801      	add	r0, sp, #4
   db06c:	f7ff fff2 	bl	db054 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db070:	6829      	ldr	r1, [r5, #0]
   db072:	f011 0401 	ands.w	r4, r1, #1
   db076:	d110      	bne.n	db09a <_Z16_fetch_usbserialv+0x36>
   db078:	4628      	mov	r0, r5
   db07a:	f7f9 f814 	bl	d40a6 <__cxa_guard_acquire>
   db07e:	b160      	cbz	r0, db09a <_Z16_fetch_usbserialv+0x36>
   db080:	aa01      	add	r2, sp, #4
   db082:	4621      	mov	r1, r4
   db084:	4807      	ldr	r0, [pc, #28]	; (db0a4 <_Z16_fetch_usbserialv+0x40>)
   db086:	f7ff ffcd 	bl	db024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db08a:	4628      	mov	r0, r5
   db08c:	f7f9 f810 	bl	d40b0 <__cxa_guard_release>
   db090:	4a05      	ldr	r2, [pc, #20]	; (db0a8 <_Z16_fetch_usbserialv+0x44>)
   db092:	4906      	ldr	r1, [pc, #24]	; (db0ac <_Z16_fetch_usbserialv+0x48>)
   db094:	4803      	ldr	r0, [pc, #12]	; (db0a4 <_Z16_fetch_usbserialv+0x40>)
   db096:	f000 fef5 	bl	dbe84 <__aeabi_atexit>
	return _usbserial;
}
   db09a:	4802      	ldr	r0, [pc, #8]	; (db0a4 <_Z16_fetch_usbserialv+0x40>)
   db09c:	b007      	add	sp, #28
   db09e:	bd30      	pop	{r4, r5, pc}
   db0a0:	2003e290 	.word	0x2003e290
   db0a4:	2003e294 	.word	0x2003e294
   db0a8:	2003d6b0 	.word	0x2003d6b0
   db0ac:	000dafa5 	.word	0x000dafa5

000db0b0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   db0b0:	4700      	bx	r0
	...

000db0b4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   db0b6:	b085      	sub	sp, #20
   db0b8:	461c      	mov	r4, r3
   db0ba:	460e      	mov	r6, r1
   db0bc:	4617      	mov	r7, r2
   db0be:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   db0c0:	f7fe f95a 	bl	d9378 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   db0c4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   db0c6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db0c8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   db0cc:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db0ce:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   db0d2:	bfa5      	ittet	ge
   db0d4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db0d8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   db0dc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   db0de:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db0e0:	9300      	str	r3, [sp, #0]
   db0e2:	4632      	mov	r2, r6
   db0e4:	463b      	mov	r3, r7
   db0e6:	4906      	ldr	r1, [pc, #24]	; (db100 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db0e8:	bfa8      	it	ge
   db0ea:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db0ee:	4628      	mov	r0, r5
   db0f0:	f7fe f93a 	bl	d9368 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   db0f4:	fab0 f080 	clz	r0, r0
   db0f8:	0940      	lsrs	r0, r0, #5
   db0fa:	b005      	add	sp, #20
   db0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0fe:	bf00      	nop
   db100:	000db0b1 	.word	0x000db0b1

000db104 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db104:	2200      	movs	r2, #0
   db106:	4611      	mov	r1, r2
   db108:	6840      	ldr	r0, [r0, #4]
   db10a:	f7fe bbc3 	b.w	d9894 <network_listening>

000db10e <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db10e:	2200      	movs	r2, #0
   db110:	4611      	mov	r1, r2
   db112:	6840      	ldr	r0, [r0, #4]
   db114:	f7fe bbce 	b.w	d98b4 <network_get_listen_timeout>

000db118 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db118:	2200      	movs	r2, #0
   db11a:	6840      	ldr	r0, [r0, #4]
   db11c:	f7fe bbc2 	b.w	d98a4 <network_set_listen_timeout>

000db120 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db120:	2200      	movs	r2, #0
   db122:	f081 0101 	eor.w	r1, r1, #1
   db126:	6840      	ldr	r0, [r0, #4]
   db128:	f7fe bbac 	b.w	d9884 <network_listen>

000db12c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   db12c:	2300      	movs	r3, #0
   db12e:	461a      	mov	r2, r3
   db130:	4619      	mov	r1, r3
   db132:	6840      	ldr	r0, [r0, #4]
   db134:	f7fe bb9e 	b.w	d9874 <network_off>

000db138 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db138:	2200      	movs	r2, #0
   db13a:	4611      	mov	r1, r2
   db13c:	6840      	ldr	r0, [r0, #4]
   db13e:	f7fe bb79 	b.w	d9834 <network_connecting>

000db142 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db142:	2200      	movs	r2, #0
   db144:	2102      	movs	r1, #2
   db146:	6840      	ldr	r0, [r0, #4]
   db148:	f7fe bb7c 	b.w	d9844 <network_disconnect>

000db14c <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db14c:	2300      	movs	r3, #0
   db14e:	461a      	mov	r2, r3
   db150:	6840      	ldr	r0, [r0, #4]
   db152:	f7fe bb67 	b.w	d9824 <network_connect>
	...

000db158 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   db158:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   db15a:	4b1b      	ldr	r3, [pc, #108]	; (db1c8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   db15c:	6003      	str	r3, [r0, #0]
   db15e:	2500      	movs	r5, #0
   db160:	460f      	mov	r7, r1
   db162:	3328      	adds	r3, #40	; 0x28
   db164:	2618      	movs	r6, #24
   db166:	b089      	sub	sp, #36	; 0x24
   db168:	6043      	str	r3, [r0, #4]
   db16a:	6085      	str	r5, [r0, #8]
   db16c:	60c5      	str	r5, [r0, #12]
   db16e:	4632      	mov	r2, r6
   db170:	4629      	mov	r1, r5
   db172:	4604      	mov	r4, r0
   db174:	3010      	adds	r0, #16
   db176:	f007 f930 	bl	e23da <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   db17a:	462a      	mov	r2, r5
   db17c:	4629      	mov	r1, r5
   db17e:	6878      	ldr	r0, [r7, #4]
   db180:	f7fe fb68 	bl	d9854 <network_ready>
   db184:	b908      	cbnz	r0, db18a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   db186:	60a0      	str	r0, [r4, #8]
            return sig;
   db188:	e01b      	b.n	db1c2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   db18a:	4629      	mov	r1, r5
   db18c:	4632      	mov	r2, r6
   db18e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   db190:	9500      	str	r5, [sp, #0]
   db192:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   db194:	f007 f921 	bl	e23da <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   db198:	a902      	add	r1, sp, #8
   db19a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   db19c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   db1a0:	f7fe fa92 	bl	d96c8 <cellular_signal>
   db1a4:	b110      	cbz	r0, db1ac <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   db1a6:	2301      	movs	r3, #1
   db1a8:	60a3      	str	r3, [r4, #8]
            return sig;
   db1aa:	e00a      	b.n	db1c2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   db1ac:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   db1ae:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   db1b0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   db1b2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   db1b4:	b90b      	cbnz	r3, db1ba <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   db1b6:	2302      	movs	r3, #2
   db1b8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   db1ba:	a902      	add	r1, sp, #8
   db1bc:	4620      	mov	r0, r4
   db1be:	f7ff fabb 	bl	da738 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   db1c2:	4620      	mov	r0, r4
   db1c4:	b009      	add	sp, #36	; 0x24
   db1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db1c8:	000e67d8 	.word	0x000e67d8

000db1cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db1cc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db1ce:	4c08      	ldr	r4, [pc, #32]	; (db1f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   db1d0:	2528      	movs	r5, #40	; 0x28
   db1d2:	462a      	mov	r2, r5
   db1d4:	2100      	movs	r1, #0
   db1d6:	4620      	mov	r0, r4
   db1d8:	f007 f8ff 	bl	e23da <memset>
        cid = -1;
   db1dc:	f04f 33ff 	mov.w	r3, #4294967295
   db1e0:	6063      	str	r3, [r4, #4]
   db1e2:	4b04      	ldr	r3, [pc, #16]	; (db1f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   db1e4:	8025      	strh	r5, [r4, #0]
   db1e6:	2204      	movs	r2, #4
   db1e8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db1ea:	4a03      	ldr	r2, [pc, #12]	; (db1f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db1ec:	601a      	str	r2, [r3, #0]
   db1ee:	bd38      	pop	{r3, r4, r5, pc}
   db1f0:	2003e2b0 	.word	0x2003e2b0
   db1f4:	2003e2a8 	.word	0x2003e2a8
   db1f8:	000e686c 	.word	0x000e686c

000db1fc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db1fc:	4770      	bx	lr

000db1fe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db1fe:	7441      	strb	r1, [r0, #17]
   db200:	4770      	bx	lr

000db202 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db202:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db204:	7c00      	ldrb	r0, [r0, #16]
   db206:	f7fe f99f 	bl	d9548 <HAL_USART_Available_Data_For_Write>
}
   db20a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db20e:	bd08      	pop	{r3, pc}

000db210 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db210:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db212:	7c00      	ldrb	r0, [r0, #16]
   db214:	f7fe f970 	bl	d94f8 <HAL_USART_Available_Data>
}
   db218:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db21c:	bd08      	pop	{r3, pc}

000db21e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db21e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db220:	7c00      	ldrb	r0, [r0, #16]
   db222:	f7fe f979 	bl	d9518 <HAL_USART_Peek_Data>
}
   db226:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db22a:	bf28      	it	cs
   db22c:	f04f 30ff 	movcs.w	r0, #4294967295
   db230:	bd08      	pop	{r3, pc}

000db232 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db232:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db234:	7c00      	ldrb	r0, [r0, #16]
   db236:	f7fe f967 	bl	d9508 <HAL_USART_Read_Data>
}
   db23a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db23e:	bf28      	it	cs
   db240:	f04f 30ff 	movcs.w	r0, #4294967295
   db244:	bd08      	pop	{r3, pc}

000db246 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db246:	7c00      	ldrb	r0, [r0, #16]
   db248:	f7fe b96e 	b.w	d9528 <HAL_USART_Flush_Data>

000db24c <_ZN11USARTSerialD0Ev>:
   db24c:	b510      	push	{r4, lr}
   db24e:	2114      	movs	r1, #20
   db250:	4604      	mov	r4, r0
   db252:	f000 fe1c 	bl	dbe8e <_ZdlPvj>
   db256:	4620      	mov	r0, r4
   db258:	bd10      	pop	{r4, pc}

000db25a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db25a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db25c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db25e:	4604      	mov	r4, r0
   db260:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db262:	b925      	cbnz	r5, db26e <_ZN11USARTSerial5writeEh+0x14>
   db264:	7c00      	ldrb	r0, [r0, #16]
   db266:	f7fe f96f 	bl	d9548 <HAL_USART_Available_Data_For_Write>
   db26a:	2800      	cmp	r0, #0
   db26c:	dd05      	ble.n	db27a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db26e:	4631      	mov	r1, r6
   db270:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db276:	f7fe b937 	b.w	d94e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   db27a:	4628      	mov	r0, r5
   db27c:	bd70      	pop	{r4, r5, r6, pc}
	...

000db280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db280:	b510      	push	{r4, lr}
   db282:	4604      	mov	r4, r0
   db284:	4608      	mov	r0, r1
   db286:	4611      	mov	r1, r2
   db288:	2200      	movs	r2, #0
   db28a:	6062      	str	r2, [r4, #4]
   db28c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db290:	60a2      	str	r2, [r4, #8]
   db292:	4a05      	ldr	r2, [pc, #20]	; (db2a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db294:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db296:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db298:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db29a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db29c:	461a      	mov	r2, r3
   db29e:	f7fe f91b 	bl	d94d8 <HAL_USART_Init>
}
   db2a2:	4620      	mov	r0, r4
   db2a4:	bd10      	pop	{r4, pc}
   db2a6:	bf00      	nop
   db2a8:	000e68a0 	.word	0x000e68a0

000db2ac <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db2ac:	2300      	movs	r3, #0
   db2ae:	7c00      	ldrb	r0, [r0, #16]
   db2b0:	f7fe b952 	b.w	d9558 <HAL_USART_BeginConfig>

000db2b4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db2b4:	2200      	movs	r2, #0
   db2b6:	f7ff bff9 	b.w	db2ac <_ZN11USARTSerial5beginEmm>

000db2ba <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db2ba:	7c00      	ldrb	r0, [r0, #16]
   db2bc:	f7fe b93c 	b.w	d9538 <HAL_USART_Is_Enabled>

000db2c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db2c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db2c2:	4d0c      	ldr	r5, [pc, #48]	; (db2f4 <_Z22__fetch_global_Serial1v+0x34>)
   db2c4:	6829      	ldr	r1, [r5, #0]
   db2c6:	f011 0401 	ands.w	r4, r1, #1
   db2ca:	d111      	bne.n	db2f0 <_Z22__fetch_global_Serial1v+0x30>
   db2cc:	4628      	mov	r0, r5
   db2ce:	f7f8 feea 	bl	d40a6 <__cxa_guard_acquire>
   db2d2:	b168      	cbz	r0, db2f0 <_Z22__fetch_global_Serial1v+0x30>
   db2d4:	4a08      	ldr	r2, [pc, #32]	; (db2f8 <_Z22__fetch_global_Serial1v+0x38>)
   db2d6:	4b09      	ldr	r3, [pc, #36]	; (db2fc <_Z22__fetch_global_Serial1v+0x3c>)
   db2d8:	4809      	ldr	r0, [pc, #36]	; (db300 <_Z22__fetch_global_Serial1v+0x40>)
   db2da:	4621      	mov	r1, r4
   db2dc:	f7ff ffd0 	bl	db280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db2e0:	4628      	mov	r0, r5
   db2e2:	f7f8 fee5 	bl	d40b0 <__cxa_guard_release>
   db2e6:	4a07      	ldr	r2, [pc, #28]	; (db304 <_Z22__fetch_global_Serial1v+0x44>)
   db2e8:	4907      	ldr	r1, [pc, #28]	; (db308 <_Z22__fetch_global_Serial1v+0x48>)
   db2ea:	4805      	ldr	r0, [pc, #20]	; (db300 <_Z22__fetch_global_Serial1v+0x40>)
   db2ec:	f000 fdca 	bl	dbe84 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db2f0:	4803      	ldr	r0, [pc, #12]	; (db300 <_Z22__fetch_global_Serial1v+0x40>)
   db2f2:	bd38      	pop	{r3, r4, r5, pc}
   db2f4:	2003e370 	.word	0x2003e370
   db2f8:	2003e374 	.word	0x2003e374
   db2fc:	2003e2ec 	.word	0x2003e2ec
   db300:	2003e2d8 	.word	0x2003e2d8
   db304:	2003d6b0 	.word	0x2003d6b0
   db308:	000db1fd 	.word	0x000db1fd

000db30c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db30c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db30e:	6883      	ldr	r3, [r0, #8]
   db310:	4604      	mov	r4, r0
   db312:	b90b      	cbnz	r3, db318 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db314:	f000 fdbd 	bl	dbe92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db318:	68c3      	ldr	r3, [r0, #12]
   db31a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db31c:	68a3      	ldr	r3, [r4, #8]
   db31e:	b11b      	cbz	r3, db328 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db320:	2203      	movs	r2, #3
   db322:	4621      	mov	r1, r4
   db324:	4620      	mov	r0, r4
   db326:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db328:	4620      	mov	r0, r4
   db32a:	2110      	movs	r1, #16
}
   db32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db330:	f000 bdad 	b.w	dbe8e <_ZdlPvj>

000db334 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   db334:	4770      	bx	lr

000db336 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db338:	4606      	mov	r6, r0
   db33a:	4615      	mov	r5, r2
   db33c:	460c      	mov	r4, r1
   db33e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db340:	42bc      	cmp	r4, r7
   db342:	d006      	beq.n	db352 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db344:	6833      	ldr	r3, [r6, #0]
   db346:	f814 1b01 	ldrb.w	r1, [r4], #1
   db34a:	689b      	ldr	r3, [r3, #8]
   db34c:	4630      	mov	r0, r6
   db34e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db350:	e7f6      	b.n	db340 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   db352:	4628      	mov	r0, r5
   db354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db356 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   db356:	2200      	movs	r2, #0
   db358:	7c00      	ldrb	r0, [r0, #16]
   db35a:	f7fe b935 	b.w	d95c8 <HAL_I2C_Write_Data>

000db35e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   db35e:	2100      	movs	r1, #0
   db360:	7c00      	ldrb	r0, [r0, #16]
   db362:	f7fe b939 	b.w	d95d8 <HAL_I2C_Available_Data>

000db366 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   db366:	2100      	movs	r1, #0
   db368:	7c00      	ldrb	r0, [r0, #16]
   db36a:	f7fe b93d 	b.w	d95e8 <HAL_I2C_Read_Data>

000db36e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   db36e:	2100      	movs	r1, #0
   db370:	7c00      	ldrb	r0, [r0, #16]
   db372:	f7fe b941 	b.w	d95f8 <HAL_I2C_Peek_Data>

000db376 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   db376:	2100      	movs	r1, #0
   db378:	7c00      	ldrb	r0, [r0, #16]
   db37a:	f7fe b945 	b.w	d9608 <HAL_I2C_Flush_Data>

000db37e <_ZN7TwoWireD0Ev>:
   db37e:	b510      	push	{r4, lr}
   db380:	2114      	movs	r1, #20
   db382:	4604      	mov	r4, r0
   db384:	f000 fd83 	bl	dbe8e <_ZdlPvj>
   db388:	4620      	mov	r0, r4
   db38a:	bd10      	pop	{r4, pc}

000db38c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   db38c:	b510      	push	{r4, lr}
   db38e:	4604      	mov	r4, r0
   db390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db394:	4608      	mov	r0, r1
   db396:	60a3      	str	r3, [r4, #8]
   db398:	2100      	movs	r1, #0
   db39a:	4b04      	ldr	r3, [pc, #16]	; (db3ac <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   db39c:	7420      	strb	r0, [r4, #16]
   db39e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   db3a0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   db3a2:	f7fe f941 	bl	d9628 <HAL_I2C_Init>

}
   db3a6:	4620      	mov	r0, r4
   db3a8:	bd10      	pop	{r4, pc}
   db3aa:	bf00      	nop
   db3ac:	000e68d0 	.word	0x000e68d0

000db3b0 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   db3b0:	2200      	movs	r2, #0
   db3b2:	7c00      	ldrb	r0, [r0, #16]
   db3b4:	f7fe b8d8 	b.w	d9568 <HAL_I2C_Set_Speed>

000db3b8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db3b8:	2300      	movs	r3, #0
   db3ba:	461a      	mov	r2, r3
   db3bc:	4619      	mov	r1, r3
   db3be:	7c00      	ldrb	r0, [r0, #16]
   db3c0:	f7fe b8da 	b.w	d9578 <HAL_I2C_Begin>

000db3c4 <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   db3c4:	2100      	movs	r1, #0
   db3c6:	7c00      	ldrb	r0, [r0, #16]
   db3c8:	f7fe b8de 	b.w	d9588 <HAL_I2C_End>

000db3cc <_ZN7TwoWire11requestFromEhhh>:
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   db3cc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   db3ce:	2400      	movs	r4, #0
   db3d0:	7c00      	ldrb	r0, [r0, #16]
   db3d2:	9400      	str	r4, [sp, #0]
   db3d4:	f7fe f8e0 	bl	d9598 <HAL_I2C_Request_Data>
  return result;
}
   db3d8:	b2c0      	uxtb	r0, r0
   db3da:	b002      	add	sp, #8
   db3dc:	bd10      	pop	{r4, pc}

000db3de <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   db3de:	2301      	movs	r3, #1
   db3e0:	f7ff bff4 	b.w	db3cc <_ZN7TwoWire11requestFromEhhh>

000db3e4 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   db3e4:	2301      	movs	r3, #1
   db3e6:	b2d2      	uxtb	r2, r2
   db3e8:	b2c9      	uxtb	r1, r1
   db3ea:	f7ff bfef 	b.w	db3cc <_ZN7TwoWire11requestFromEhhh>

000db3ee <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   db3ee:	b2db      	uxtb	r3, r3
   db3f0:	b2d2      	uxtb	r2, r2
   db3f2:	b2c9      	uxtb	r1, r1
   db3f4:	f7ff bfea 	b.w	db3cc <_ZN7TwoWire11requestFromEhhh>

000db3f8 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   db3f8:	2200      	movs	r2, #0
   db3fa:	7c00      	ldrb	r0, [r0, #16]
   db3fc:	f7fe b8d4 	b.w	d95a8 <HAL_I2C_Begin_Transmission>

000db400 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   db400:	b2c9      	uxtb	r1, r1
   db402:	f7ff bff9 	b.w	db3f8 <_ZN7TwoWire17beginTransmissionEh>

000db406 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   db406:	2200      	movs	r2, #0
   db408:	7c00      	ldrb	r0, [r0, #16]
   db40a:	f7fe b8d5 	b.w	d95b8 <HAL_I2C_End_Transmission>

000db40e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   db40e:	2101      	movs	r1, #1
   db410:	f7ff bff9 	b.w	db406 <_ZN7TwoWire15endTransmissionEh>

000db414 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   db414:	2100      	movs	r1, #0
   db416:	7c00      	ldrb	r0, [r0, #16]
   db418:	f7fe b8fe 	b.w	d9618 <HAL_I2C_Is_Enabled>

000db41c <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   db41c:	2200      	movs	r2, #0
   db41e:	4611      	mov	r1, r2
   db420:	7c00      	ldrb	r0, [r0, #16]
   db422:	f7fe b909 	b.w	d9638 <HAL_I2C_Reset>

000db426 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   db426:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   db428:	2100      	movs	r1, #0
   db42a:	7c00      	ldrb	r0, [r0, #16]
   db42c:	f7fe f90c 	bl	d9648 <HAL_I2C_Acquire>
}
   db430:	fab0 f080 	clz	r0, r0
   db434:	0940      	lsrs	r0, r0, #5
   db436:	bd08      	pop	{r3, pc}

000db438 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db438:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   db43a:	2100      	movs	r1, #0
   db43c:	7c00      	ldrb	r0, [r0, #16]
   db43e:	f7fe f90b 	bl	d9658 <HAL_I2C_Release>
}
   db442:	fab0 f080 	clz	r0, r0
   db446:	0940      	lsrs	r0, r0, #5
   db448:	bd08      	pop	{r3, pc}

000db44a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db44a:	2200      	movs	r2, #0
   db44c:	4611      	mov	r1, r2
   db44e:	6840      	ldr	r0, [r0, #4]
   db450:	f7fe ba20 	b.w	d9894 <network_listening>

000db454 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db454:	2200      	movs	r2, #0
   db456:	4611      	mov	r1, r2
   db458:	6840      	ldr	r0, [r0, #4]
   db45a:	f7fe ba2b 	b.w	d98b4 <network_get_listen_timeout>

000db45e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db45e:	2200      	movs	r2, #0
   db460:	6840      	ldr	r0, [r0, #4]
   db462:	f7fe ba1f 	b.w	d98a4 <network_set_listen_timeout>

000db466 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db466:	2200      	movs	r2, #0
   db468:	f081 0101 	eor.w	r1, r1, #1
   db46c:	6840      	ldr	r0, [r0, #4]
   db46e:	f7fe ba09 	b.w	d9884 <network_listen>

000db472 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db472:	2300      	movs	r3, #0
   db474:	461a      	mov	r2, r3
   db476:	2101      	movs	r1, #1
   db478:	6840      	ldr	r0, [r0, #4]
   db47a:	f7fe b9fb 	b.w	d9874 <network_off>

000db47e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db47e:	2300      	movs	r3, #0
   db480:	461a      	mov	r2, r3
   db482:	4619      	mov	r1, r3
   db484:	6840      	ldr	r0, [r0, #4]
   db486:	f7fe b9ed 	b.w	d9864 <network_on>

000db48a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db48a:	2200      	movs	r2, #0
   db48c:	4611      	mov	r1, r2
   db48e:	6840      	ldr	r0, [r0, #4]
   db490:	f7fe b9e0 	b.w	d9854 <network_ready>

000db494 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db494:	2200      	movs	r2, #0
   db496:	4611      	mov	r1, r2
   db498:	6840      	ldr	r0, [r0, #4]
   db49a:	f7fe b9cb 	b.w	d9834 <network_connecting>

000db49e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db49e:	2200      	movs	r2, #0
   db4a0:	2102      	movs	r1, #2
   db4a2:	6840      	ldr	r0, [r0, #4]
   db4a4:	f7fe b9ce 	b.w	d9844 <network_disconnect>

000db4a8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db4a8:	2300      	movs	r3, #0
   db4aa:	461a      	mov	r2, r3
   db4ac:	6840      	ldr	r0, [r0, #4]
   db4ae:	f7fe b9b9 	b.w	d9824 <network_connect>

000db4b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db4b2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db4b4:	4605      	mov	r5, r0
   db4b6:	b188      	cbz	r0, db4dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db4b8:	6804      	ldr	r4, [r0, #0]
   db4ba:	b14c      	cbz	r4, db4d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db4bc:	68a3      	ldr	r3, [r4, #8]
   db4be:	b11b      	cbz	r3, db4c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db4c0:	2203      	movs	r2, #3
   db4c2:	4621      	mov	r1, r4
   db4c4:	4620      	mov	r0, r4
   db4c6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db4c8:	2110      	movs	r1, #16
   db4ca:	4620      	mov	r0, r4
   db4cc:	f000 fcdf 	bl	dbe8e <_ZdlPvj>
   db4d0:	4628      	mov	r0, r5
   db4d2:	2114      	movs	r1, #20
      }
   db4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db4d8:	f000 bcd9 	b.w	dbe8e <_ZdlPvj>
   db4dc:	bd38      	pop	{r3, r4, r5, pc}

000db4de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db4de:	b110      	cbz	r0, db4e6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db4e0:	6803      	ldr	r3, [r0, #0]
   db4e2:	685b      	ldr	r3, [r3, #4]
   db4e4:	4718      	bx	r3
   db4e6:	4770      	bx	lr

000db4e8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db4e8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db4ea:	6803      	ldr	r3, [r0, #0]
   db4ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db4ee:	b1bb      	cbz	r3, db520 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db4f0:	6858      	ldr	r0, [r3, #4]
   db4f2:	f7fd ffb1 	bl	d9458 <os_thread_is_current>
   db4f6:	b978      	cbnz	r0, db518 <_ZN6ThreadD1Ev+0x30>
   db4f8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db4fa:	7c5a      	ldrb	r2, [r3, #17]
   db4fc:	b912      	cbnz	r2, db504 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db4fe:	6858      	ldr	r0, [r3, #4]
   db500:	f7fd ffb2 	bl	d9468 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db504:	6823      	ldr	r3, [r4, #0]
   db506:	6858      	ldr	r0, [r3, #4]
   db508:	f7fd ffb6 	bl	d9478 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db50c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db50e:	2300      	movs	r3, #0
   db510:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db512:	b128      	cbz	r0, db520 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db514:	f7ff ffcd 	bl	db4b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db518:	6820      	ldr	r0, [r4, #0]
   db51a:	b108      	cbz	r0, db520 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db51c:	f7ff ffc9 	bl	db4b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db520:	4620      	mov	r0, r4
   db522:	bd10      	pop	{r4, pc}

000db524 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db524:	b538      	push	{r3, r4, r5, lr}
   db526:	4b0c      	ldr	r3, [pc, #48]	; (db558 <_ZN5spark9MeshClassD1Ev+0x34>)
   db528:	6003      	str	r3, [r0, #0]
   db52a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db52c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   db530:	b108      	cbz	r0, db536 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db532:	f7f8 fdb6 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db536:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   db53a:	b135      	cbz	r5, db54a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db53c:	4628      	mov	r0, r5
   db53e:	f7ff ffd3 	bl	db4e8 <_ZN6ThreadD1Ev>
   db542:	2104      	movs	r1, #4
   db544:	4628      	mov	r0, r5
   db546:	f000 fca2 	bl	dbe8e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db54a:	68a0      	ldr	r0, [r4, #8]
   db54c:	b108      	cbz	r0, db552 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   db54e:	f7ff ffc6 	bl	db4de <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db552:	4620      	mov	r0, r4
   db554:	bd38      	pop	{r3, r4, r5, pc}
   db556:	bf00      	nop
   db558:	000e68f8 	.word	0x000e68f8

000db55c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db55c:	b538      	push	{r3, r4, r5, lr}
   db55e:	4c0e      	ldr	r4, [pc, #56]	; (db598 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db560:	4b0e      	ldr	r3, [pc, #56]	; (db59c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db562:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db564:	2500      	movs	r5, #0
   db566:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db568:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db56c:	6063      	str	r3, [r4, #4]
   db56e:	60a5      	str	r5, [r4, #8]
   db570:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db574:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db578:	f7fd ff8e 	bl	d9498 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db57c:	4b08      	ldr	r3, [pc, #32]	; (db5a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db57e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db582:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db586:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db588:	4620      	mov	r0, r4
   db58a:	4a06      	ldr	r2, [pc, #24]	; (db5a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db58c:	4906      	ldr	r1, [pc, #24]	; (db5a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db592:	f000 bc77 	b.w	dbe84 <__aeabi_atexit>
   db596:	bf00      	nop
   db598:	2003e3f8 	.word	0x2003e3f8
   db59c:	000e69ac 	.word	0x000e69ac
   db5a0:	000e68f8 	.word	0x000e68f8
   db5a4:	2003d6b0 	.word	0x2003d6b0
   db5a8:	000db525 	.word	0x000db525

000db5ac <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db5ae:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db5b0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db5b2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db5b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db5b8:	2201      	movs	r2, #1
   db5ba:	f04f 33ff 	mov.w	r3, #4294967295
   db5be:	4621      	mov	r1, r4
   db5c0:	47a8      	blx	r5
}
   db5c2:	b003      	add	sp, #12
   db5c4:	bd30      	pop	{r4, r5, pc}

000db5c6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   db5c6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db5c8:	6803      	ldr	r3, [r0, #0]
   db5ca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   db5cc:	f04f 33ff 	mov.w	r3, #4294967295
   db5d0:	46a4      	mov	ip, r4
}
   db5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db5d6:	4760      	bx	ip

000db5d8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db5da:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   db5dc:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db5de:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   db5e2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db5e4:	4621      	mov	r1, r4
   db5e6:	4613      	mov	r3, r2
   db5e8:	2201      	movs	r2, #1
   db5ea:	47a8      	blx	r5
}
   db5ec:	b003      	add	sp, #12
   db5ee:	bd30      	pop	{r4, r5, pc}

000db5f0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   db5f0:	4770      	bx	lr

000db5f2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db5f2:	b538      	push	{r3, r4, r5, lr}
   db5f4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   db5f6:	681a      	ldr	r2, [r3, #0]
   db5f8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db5fa:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   db5fc:	da05      	bge.n	db60a <_ZN9TCPClient9connectedEv+0x18>
   db5fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db602:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db606:	429a      	cmp	r2, r3
   db608:	d001      	beq.n	db60e <_ZN9TCPClient9connectedEv+0x1c>
   db60a:	2501      	movs	r5, #1
   db60c:	e00b      	b.n	db626 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   db60e:	6803      	ldr	r3, [r0, #0]
   db610:	691b      	ldr	r3, [r3, #16]
   db612:	4798      	blx	r3
   db614:	2800      	cmp	r0, #0
   db616:	bf14      	ite	ne
   db618:	2501      	movne	r5, #1
   db61a:	2500      	moveq	r5, #0
        if (!rv) {
   db61c:	d103      	bne.n	db626 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   db61e:	6823      	ldr	r3, [r4, #0]
   db620:	4620      	mov	r0, r4
   db622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db624:	4798      	blx	r3
        }
    }
    return rv;
}
   db626:	4628      	mov	r0, r5
   db628:	bd38      	pop	{r3, r4, r5, pc}

000db62a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   db62a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   db62c:	6818      	ldr	r0, [r3, #0]
}
   db62e:	43c0      	mvns	r0, r0
   db630:	0fc0      	lsrs	r0, r0, #31
   db632:	4770      	bx	lr

000db634 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db634:	4770      	bx	lr

000db636 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   db636:	2000      	movs	r0, #0
   db638:	4770      	bx	lr

000db63a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db63a:	b510      	push	{r4, lr}
   db63c:	2114      	movs	r1, #20
   db63e:	4604      	mov	r4, r0
   db640:	f000 fc25 	bl	dbe8e <_ZdlPvj>
   db644:	4620      	mov	r0, r4
   db646:	bd10      	pop	{r4, pc}

000db648 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   db648:	f7f8 bd29 	b.w	d409e <_ZdlPv>

000db64c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db64c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db64e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   db650:	2200      	movs	r2, #0
   db652:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   db654:	9202      	str	r2, [sp, #8]
   db656:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   db658:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db65a:	4604      	mov	r4, r0
   db65c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   db65e:	d008      	beq.n	db672 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   db660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db664:	fbb3 f1f2 	udiv	r1, r3, r2
   db668:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   db66a:	fb02 3111 	mls	r1, r2, r1, r3
   db66e:	434a      	muls	r2, r1
   db670:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   db672:	6960      	ldr	r0, [r4, #20]
   db674:	2308      	movs	r3, #8
   db676:	9300      	str	r3, [sp, #0]
   db678:	f241 0205 	movw	r2, #4101	; 0x1005
   db67c:	446b      	add	r3, sp
   db67e:	f640 71ff 	movw	r1, #4095	; 0xfff
   db682:	6800      	ldr	r0, [r0, #0]
   db684:	f7fd fff0 	bl	d9668 <sock_setsockopt>
    if (ret < 0) {
   db688:	2800      	cmp	r0, #0
   db68a:	db08      	blt.n	db69e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   db68c:	6960      	ldr	r0, [r4, #20]
   db68e:	2300      	movs	r3, #0
   db690:	4632      	mov	r2, r6
   db692:	4629      	mov	r1, r5
   db694:	6800      	ldr	r0, [r0, #0]
   db696:	f7fe f807 	bl	d96a8 <sock_send>
    if (ret < 0) {
   db69a:	2800      	cmp	r0, #0
   db69c:	da04      	bge.n	db6a8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   db69e:	f7fe f999 	bl	d99d4 <__errno>
   db6a2:	6803      	ldr	r3, [r0, #0]
   db6a4:	6063      	str	r3, [r4, #4]
   db6a6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   db6a8:	b004      	add	sp, #16
   db6aa:	bd70      	pop	{r4, r5, r6, pc}

000db6ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db6ac:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db6ae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db6b0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db6b2:	689b      	ldr	r3, [r3, #8]
   db6b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db6b6:	68a3      	ldr	r3, [r4, #8]
   db6b8:	3b01      	subs	r3, #1
   db6ba:	60a3      	str	r3, [r4, #8]
   db6bc:	b92b      	cbnz	r3, db6ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   db6be:	6823      	ldr	r3, [r4, #0]
   db6c0:	4620      	mov	r0, r4
   db6c2:	68db      	ldr	r3, [r3, #12]
        }
    }
   db6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db6c8:	4718      	bx	r3
   db6ca:	bd10      	pop	{r4, pc}

000db6cc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   db6cc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db6ce:	4604      	mov	r4, r0
   db6d0:	694d      	ldr	r5, [r1, #20]
   db6d2:	4b05      	ldr	r3, [pc, #20]	; (db6e8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   db6d4:	f844 3b04 	str.w	r3, [r4], #4
   db6d8:	358c      	adds	r5, #140	; 0x8c
   db6da:	4606      	mov	r6, r0
   db6dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db6de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db6e0:	682b      	ldr	r3, [r5, #0]
   db6e2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   db6e4:	4630      	mov	r0, r6
   db6e6:	bd70      	pop	{r4, r5, r6, pc}
   db6e8:	000e6828 	.word	0x000e6828

000db6ec <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db6ec:	b510      	push	{r4, lr}
   db6ee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db6f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db6f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db6f8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db6fa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db6fc:	d005      	beq.n	db70a <_ZN9TCPClient4peekEv+0x1e>
   db6fe:	6962      	ldr	r2, [r4, #20]
   db700:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db704:	4413      	add	r3, r2
   db706:	7918      	ldrb	r0, [r3, #4]
   db708:	bd10      	pop	{r4, pc}
   db70a:	6803      	ldr	r3, [r0, #0]
   db70c:	691b      	ldr	r3, [r3, #16]
   db70e:	4798      	blx	r3
   db710:	2800      	cmp	r0, #0
   db712:	d1f4      	bne.n	db6fe <_ZN9TCPClient4peekEv+0x12>
   db714:	f04f 30ff 	mov.w	r0, #4294967295
}
   db718:	bd10      	pop	{r4, pc}

000db71a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db71a:	b510      	push	{r4, lr}
   db71c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db71e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db722:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db726:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db728:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db72a:	d008      	beq.n	db73e <_ZN9TCPClient4readEv+0x24>
   db72c:	6962      	ldr	r2, [r4, #20]
   db72e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db732:	1c59      	adds	r1, r3, #1
   db734:	4413      	add	r3, r2
   db736:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   db73a:	7918      	ldrb	r0, [r3, #4]
   db73c:	bd10      	pop	{r4, pc}
   db73e:	6803      	ldr	r3, [r0, #0]
   db740:	691b      	ldr	r3, [r3, #16]
   db742:	4798      	blx	r3
   db744:	2800      	cmp	r0, #0
   db746:	d1f1      	bne.n	db72c <_ZN9TCPClient4readEv+0x12>
   db748:	f04f 30ff 	mov.w	r0, #4294967295
}
   db74c:	bd10      	pop	{r4, pc}

000db74e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   db74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db750:	6943      	ldr	r3, [r0, #20]
   db752:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   db754:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db758:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db75c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   db75e:	4605      	mov	r5, r0
   db760:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   db762:	d106      	bne.n	db772 <_ZN9TCPClient4readEPhj+0x24>
   db764:	6803      	ldr	r3, [r0, #0]
   db766:	691b      	ldr	r3, [r3, #16]
   db768:	4798      	blx	r3
   db76a:	b910      	cbnz	r0, db772 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   db76c:	f04f 34ff 	mov.w	r4, #4294967295
   db770:	e014      	b.n	db79c <_ZN9TCPClient4readEPhj+0x4e>
   db772:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   db774:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   db778:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   db77c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   db77e:	42bc      	cmp	r4, r7
   db780:	bf28      	it	cs
   db782:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   db784:	4419      	add	r1, r3
   db786:	4622      	mov	r2, r4
   db788:	3104      	adds	r1, #4
   db78a:	4630      	mov	r0, r6
   db78c:	f006 fe1a 	bl	e23c4 <memcpy>
   db790:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   db792:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db796:	4423      	add	r3, r4
   db798:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   db79c:	4620      	mov	r0, r4
   db79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db7a0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db7a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db7a4:	4698      	mov	r8, r3
    stop();
   db7a6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db7a8:	b093      	sub	sp, #76	; 0x4c
    stop();
   db7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db7ac:	460d      	mov	r5, r1
   db7ae:	4606      	mov	r6, r0
   db7b0:	4617      	mov	r7, r2
    stop();
   db7b2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   db7b4:	ab12      	add	r3, sp, #72	; 0x48
   db7b6:	2400      	movs	r4, #0
   db7b8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db7bc:	4622      	mov	r2, r4
   db7be:	4621      	mov	r1, r4
   db7c0:	4628      	mov	r0, r5
   db7c2:	f7fd fd99 	bl	d92f8 <netdb_getaddrinfo>
   db7c6:	4681      	mov	r9, r0
   db7c8:	2800      	cmp	r0, #0
   db7ca:	d13d      	bne.n	db848 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   db7cc:	9b00      	ldr	r3, [sp, #0]
   db7ce:	2b00      	cmp	r3, #0
   db7d0:	d056      	beq.n	db880 <_ZN9TCPClient7connectEPKctm+0xe0>
   db7d2:	695b      	ldr	r3, [r3, #20]
   db7d4:	2b00      	cmp	r3, #0
   db7d6:	d053      	beq.n	db880 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   db7d8:	a806      	add	r0, sp, #24
   db7da:	f7ff fb93 	bl	daf04 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   db7de:	9b00      	ldr	r3, [sp, #0]
   db7e0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   db7e2:	7863      	ldrb	r3, [r4, #1]
   db7e4:	2b02      	cmp	r3, #2
   db7e6:	d101      	bne.n	db7ec <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   db7e8:	1d21      	adds	r1, r4, #4
   db7ea:	e013      	b.n	db814 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   db7ec:	2b0a      	cmp	r3, #10
   db7ee:	d114      	bne.n	db81a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   db7f0:	2211      	movs	r2, #17
   db7f2:	4649      	mov	r1, r9
   db7f4:	a801      	add	r0, sp, #4
   db7f6:	f006 fdf0 	bl	e23da <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   db7fa:	68a3      	ldr	r3, [r4, #8]
   db7fc:	bb33      	cbnz	r3, db84c <_ZN9TCPClient7connectEPKctm+0xac>
   db7fe:	68e3      	ldr	r3, [r4, #12]
   db800:	bb23      	cbnz	r3, db84c <_ZN9TCPClient7connectEPKctm+0xac>
   db802:	f64f 70ff 	movw	r0, #65535	; 0xffff
   db806:	6925      	ldr	r5, [r4, #16]
   db808:	f7fd fe56 	bl	d94b8 <inet_htonl>
   db80c:	4285      	cmp	r5, r0
   db80e:	d11d      	bne.n	db84c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   db810:	f104 0114 	add.w	r1, r4, #20
   db814:	a806      	add	r0, sp, #24
   db816:	f7ff fbb8 	bl	daf8a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   db81a:	a806      	add	r0, sp, #24
   db81c:	f7ff fb92 	bl	daf44 <_ZNK9IPAddresscvbEv>
        if (addr) {
   db820:	2800      	cmp	r0, #0
   db822:	d02d      	beq.n	db880 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   db824:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db826:	ad07      	add	r5, sp, #28
   db828:	f8d3 9020 	ldr.w	r9, [r3, #32]
   db82c:	4b18      	ldr	r3, [pc, #96]	; (db890 <_ZN9TCPClient7connectEPKctm+0xf0>)
   db82e:	930c      	str	r3, [sp, #48]	; 0x30
   db830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db832:	ac0d      	add	r4, sp, #52	; 0x34
   db834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db836:	682b      	ldr	r3, [r5, #0]
   db838:	7023      	strb	r3, [r4, #0]
   db83a:	463a      	mov	r2, r7
   db83c:	4643      	mov	r3, r8
   db83e:	a90c      	add	r1, sp, #48	; 0x30
   db840:	4630      	mov	r0, r6
   db842:	47c8      	blx	r9
   db844:	4681      	mov	r9, r0
   db846:	e01b      	b.n	db880 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db848:	46a1      	mov	r9, r4
   db84a:	e019      	b.n	db880 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   db84c:	f104 0308 	add.w	r3, r4, #8
   db850:	ad01      	add	r5, sp, #4
   db852:	3418      	adds	r4, #24
   db854:	6818      	ldr	r0, [r3, #0]
   db856:	6859      	ldr	r1, [r3, #4]
   db858:	462a      	mov	r2, r5
   db85a:	c203      	stmia	r2!, {r0, r1}
   db85c:	3308      	adds	r3, #8
   db85e:	42a3      	cmp	r3, r4
   db860:	4615      	mov	r5, r2
   db862:	d1f7      	bne.n	db854 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   db864:	2306      	movs	r3, #6
            addr = IPAddress(a);
   db866:	a901      	add	r1, sp, #4
   db868:	a80c      	add	r0, sp, #48	; 0x30
   db86a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   db86c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   db870:	f7ff fb56 	bl	daf20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db876:	ac07      	add	r4, sp, #28
   db878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db87a:	682b      	ldr	r3, [r5, #0]
   db87c:	7023      	strb	r3, [r4, #0]
   db87e:	e7cc      	b.n	db81a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   db880:	9800      	ldr	r0, [sp, #0]
   db882:	f7fd fd31 	bl	d92e8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   db886:	4648      	mov	r0, r9
   db888:	b013      	add	sp, #76	; 0x4c
   db88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db88e:	bf00      	nop
   db890:	000e6828 	.word	0x000e6828

000db894 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   db894:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   db896:	2300      	movs	r3, #0
   db898:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   db89c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   db89e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   db8a2:	4770      	bx	lr

000db8a4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db8a8:	461e      	mov	r6, r3
    stop();
   db8aa:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db8ac:	460c      	mov	r4, r1
   db8ae:	b08a      	sub	sp, #40	; 0x28
    stop();
   db8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db8b2:	4605      	mov	r5, r0
   db8b4:	4617      	mov	r7, r2
    stop();
   db8b6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   db8b8:	7d23      	ldrb	r3, [r4, #20]
   db8ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
   db8be:	2b04      	cmp	r3, #4
   db8c0:	bf0c      	ite	eq
   db8c2:	2002      	moveq	r0, #2
   db8c4:	200a      	movne	r0, #10
   db8c6:	2206      	movs	r2, #6
   db8c8:	2101      	movs	r1, #1
   db8ca:	f7fd fef5 	bl	d96b8 <sock_socket>
   db8ce:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   db8d2:	696b      	ldr	r3, [r5, #20]
   db8d4:	681b      	ldr	r3, [r3, #0]
   db8d6:	2b00      	cmp	r3, #0
   db8d8:	db18      	blt.n	db90c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   db8da:	4628      	mov	r0, r5
   db8dc:	f7ff ffda 	bl	db894 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   db8e0:	b1d6      	cbz	r6, db918 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   db8e2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db8e4:	a903      	add	r1, sp, #12
   db8e6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   db8e8:	9303      	str	r3, [sp, #12]
   db8ea:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db8ee:	f7fd fd7b 	bl	d93e8 <if_index_to_name>
   db8f2:	b958      	cbnz	r0, db90c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   db8f4:	6968      	ldr	r0, [r5, #20]
   db8f6:	2306      	movs	r3, #6
   db8f8:	9300      	str	r3, [sp, #0]
   db8fa:	f241 020b 	movw	r2, #4107	; 0x100b
   db8fe:	ab03      	add	r3, sp, #12
   db900:	f640 71ff 	movw	r1, #4095	; 0xfff
   db904:	6800      	ldr	r0, [r0, #0]
   db906:	f7fd feaf 	bl	d9668 <sock_setsockopt>
   db90a:	b128      	cbz	r0, db918 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   db90c:	682b      	ldr	r3, [r5, #0]
   db90e:	4628      	mov	r0, r5
   db910:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db912:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   db914:	4798      	blx	r3
   db916:	e03b      	b.n	db990 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   db918:	261c      	movs	r6, #28
   db91a:	4632      	mov	r2, r6
   db91c:	2100      	movs	r1, #0
   db91e:	a803      	add	r0, sp, #12
   db920:	f006 fd5b 	bl	e23da <memset>
    if (ip.version() == 4) {
   db924:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   db926:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   db92a:	2b04      	cmp	r3, #4
   db92c:	d10c      	bne.n	db948 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   db92e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   db930:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   db932:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   db936:	f7fd fdc7 	bl	d94c8 <inet_htons>
   db93a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   db93e:	6860      	ldr	r0, [r4, #4]
   db940:	f7fd fdba 	bl	d94b8 <inet_htonl>
   db944:	9004      	str	r0, [sp, #16]
   db946:	e013      	b.n	db970 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   db948:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   db94a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   db94c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   db950:	f7fd fdba 	bl	d94c8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   db954:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   db956:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   db95a:	1d23      	adds	r3, r4, #4
   db95c:	f104 0714 	add.w	r7, r4, #20
   db960:	6818      	ldr	r0, [r3, #0]
   db962:	6859      	ldr	r1, [r3, #4]
   db964:	4632      	mov	r2, r6
   db966:	c203      	stmia	r2!, {r0, r1}
   db968:	3308      	adds	r3, #8
   db96a:	42bb      	cmp	r3, r7
   db96c:	4616      	mov	r6, r2
   db96e:	d1f7      	bne.n	db960 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   db970:	696b      	ldr	r3, [r5, #20]
   db972:	221c      	movs	r2, #28
   db974:	a903      	add	r1, sp, #12
   db976:	6818      	ldr	r0, [r3, #0]
   db978:	f7fd fe86 	bl	d9688 <sock_connect>
   db97c:	2800      	cmp	r0, #0
   db97e:	d1c5      	bne.n	db90c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   db980:	3404      	adds	r4, #4
   db982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db984:	696d      	ldr	r5, [r5, #20]
   db986:	358c      	adds	r5, #140	; 0x8c
   db988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db98a:	6823      	ldr	r3, [r4, #0]
   db98c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   db98e:	2401      	movs	r4, #1
}
   db990:	4620      	mov	r0, r4
   db992:	b00a      	add	sp, #40	; 0x28
   db994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db998 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   db998:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   db99a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   db99c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   db99e:	6818      	ldr	r0, [r3, #0]
   db9a0:	2800      	cmp	r0, #0
   db9a2:	db01      	blt.n	db9a8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   db9a4:	f7fd fe68 	bl	d9678 <sock_close>
   db9a8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   db9aa:	f04f 32ff 	mov.w	r2, #4294967295
   db9ae:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db9b0:	6960      	ldr	r0, [r4, #20]
   db9b2:	2211      	movs	r2, #17
   db9b4:	2100      	movs	r1, #0
   db9b6:	308c      	adds	r0, #140	; 0x8c
   db9b8:	f006 fd0f 	bl	e23da <memset>
    d_->remoteIP.clear();
    flush_buffer();
   db9bc:	4620      	mov	r0, r4
}
   db9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   db9c2:	f7ff bf67 	b.w	db894 <_ZN9TCPClient12flush_bufferEv>
	...

000db9c8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   db9c8:	b530      	push	{r4, r5, lr}
   db9ca:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   db9cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   db9d0:	b08b      	sub	sp, #44	; 0x2c
   db9d2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   db9d4:	b11b      	cbz	r3, db9de <_ZN9TCPClient9availableEv+0x16>
   db9d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   db9da:	429a      	cmp	r2, r3
   db9dc:	d040      	beq.n	dba60 <_ZN9TCPClient9availableEv+0x98>
   db9de:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   db9e0:	6818      	ldr	r0, [r3, #0]
   db9e2:	2800      	cmp	r0, #0
   db9e4:	db3f      	blt.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   db9e6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   db9ea:	2d7f      	cmp	r5, #127	; 0x7f
   db9ec:	d83b      	bhi.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   db9ee:	1d19      	adds	r1, r3, #4
   db9f0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   db9f4:	2308      	movs	r3, #8
   db9f6:	4429      	add	r1, r5
   db9f8:	f7fd fe4e 	bl	d9698 <sock_recv>
            if (ret > 0) {
   db9fc:	2800      	cmp	r0, #0
   db9fe:	dd0c      	ble.n	dba1a <_ZN9TCPClient9availableEv+0x52>
   dba00:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dba02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dba06:	b90a      	cbnz	r2, dba0c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dba08:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dba0c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dba0e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dba12:	4418      	add	r0, r3
   dba14:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dba18:	e025      	b.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dba1a:	f7fd ffdb 	bl	d99d4 <__errno>
   dba1e:	6803      	ldr	r3, [r0, #0]
   dba20:	2b0b      	cmp	r3, #11
   dba22:	d020      	beq.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
   dba24:	f7fd ffd6 	bl	d99d4 <__errno>
   dba28:	6803      	ldr	r3, [r0, #0]
   dba2a:	2b0b      	cmp	r3, #11
   dba2c:	d01b      	beq.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dba2e:	2320      	movs	r3, #32
   dba30:	2500      	movs	r5, #0
   dba32:	9302      	str	r3, [sp, #8]
   dba34:	9503      	str	r5, [sp, #12]
   dba36:	f7fd ffcd 	bl	d99d4 <__errno>
   dba3a:	6803      	ldr	r3, [r0, #0]
   dba3c:	9301      	str	r3, [sp, #4]
   dba3e:	4b0e      	ldr	r3, [pc, #56]	; (dba78 <_ZN9TCPClient9availableEv+0xb0>)
   dba40:	9300      	str	r3, [sp, #0]
   dba42:	aa02      	add	r2, sp, #8
   dba44:	462b      	mov	r3, r5
   dba46:	490d      	ldr	r1, [pc, #52]	; (dba7c <_ZN9TCPClient9availableEv+0xb4>)
   dba48:	2032      	movs	r0, #50	; 0x32
   dba4a:	f7fd fe7d 	bl	d9748 <log_message>
                    sock_close(d_->sock);
   dba4e:	6963      	ldr	r3, [r4, #20]
   dba50:	6818      	ldr	r0, [r3, #0]
   dba52:	f7fd fe11 	bl	d9678 <sock_close>
   dba56:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dba58:	f04f 32ff 	mov.w	r2, #4294967295
   dba5c:	601a      	str	r2, [r3, #0]
   dba5e:	e002      	b.n	dba66 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dba60:	f7ff ff18 	bl	db894 <_ZN9TCPClient12flush_bufferEv>
   dba64:	e7bb      	b.n	db9de <_ZN9TCPClient9availableEv+0x16>
   dba66:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dba68:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dba6c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dba70:	1a18      	subs	r0, r3, r0
}
   dba72:	b00b      	add	sp, #44	; 0x2c
   dba74:	bd30      	pop	{r4, r5, pc}
   dba76:	bf00      	nop
   dba78:	000e6993 	.word	0x000e6993
   dba7c:	000e698c 	.word	0x000e698c

000dba80 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dba80:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dba82:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dba84:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dba86:	6001      	str	r1, [r0, #0]
   dba88:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dba8c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dba90:	3088      	adds	r0, #136	; 0x88
   dba92:	f7ff fa37 	bl	daf04 <_ZN9IPAddressC1Ev>
}
   dba96:	4620      	mov	r0, r4
   dba98:	bd10      	pop	{r4, pc}
	...

000dba9c <_ZN9TCPClientC1Ei>:
   dba9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dbaa0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dbaa2:	2300      	movs	r3, #0
   dbaa4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dbaa6:	4a14      	ldr	r2, [pc, #80]	; (dbaf8 <_ZN9TCPClientC1Ei+0x5c>)
   dbaa8:	6043      	str	r3, [r0, #4]
   dbaaa:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dbaac:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dbaae:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dbab0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbab2:	20a0      	movs	r0, #160	; 0xa0
   dbab4:	460e      	mov	r6, r1
   dbab6:	f7f8 faf0 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbaba:	4605      	mov	r5, r0
   dbabc:	b110      	cbz	r0, dbac4 <_ZN9TCPClientC1Ei+0x28>
   dbabe:	4631      	mov	r1, r6
   dbac0:	f7ff ffde 	bl	dba80 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbac4:	2014      	movs	r0, #20
   dbac6:	f7f8 fae8 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   dbaca:	4603      	mov	r3, r0
   dbacc:	b128      	cbz	r0, dbada <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbace:	2201      	movs	r2, #1
   dbad0:	6042      	str	r2, [r0, #4]
   dbad2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   dbad4:	4a09      	ldr	r2, [pc, #36]	; (dbafc <_ZN9TCPClientC1Ei+0x60>)
   dbad6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   dbad8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbada:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   dbadc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbade:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   dbae0:	b128      	cbz	r0, dbaee <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dbae2:	6843      	ldr	r3, [r0, #4]
   dbae4:	3b01      	subs	r3, #1
   dbae6:	6043      	str	r3, [r0, #4]
   dbae8:	b90b      	cbnz	r3, dbaee <_ZN9TCPClientC1Ei+0x52>
   dbaea:	f7ff fddf 	bl	db6ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   dbaee:	4620      	mov	r0, r4
   dbaf0:	f7ff fed0 	bl	db894 <_ZN9TCPClient12flush_bufferEv>
}
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	bd70      	pop	{r4, r5, r6, pc}
   dbaf8:	000e6948 	.word	0x000e6948
   dbafc:	000e692c 	.word	0x000e692c

000dbb00 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dbb00:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   dbb02:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dbb06:	4604      	mov	r4, r0
        : TCPClient(-1) {
   dbb08:	f7ff ffc8 	bl	dba9c <_ZN9TCPClientC1Ei>
}
   dbb0c:	4620      	mov	r0, r4
   dbb0e:	bd10      	pop	{r4, pc}

000dbb10 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   dbb10:	b510      	push	{r4, lr}
   dbb12:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   dbb14:	6800      	ldr	r0, [r0, #0]
   dbb16:	2800      	cmp	r0, #0
   dbb18:	db01      	blt.n	dbb1e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   dbb1a:	f7fd fdad 	bl	d9678 <sock_close>
    }
}
   dbb1e:	4620      	mov	r0, r4
   dbb20:	bd10      	pop	{r4, pc}

000dbb22 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   dbb22:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   dbb24:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   dbb26:	4620      	mov	r0, r4
   dbb28:	f7ff fff2 	bl	dbb10 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   dbb2c:	b124      	cbz	r4, dbb38 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dbb2e:	4620      	mov	r0, r4
   dbb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dbb34:	f7f8 bab3 	b.w	d409e <_ZdlPv>
   dbb38:	bd10      	pop	{r4, pc}

000dbb3a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dbb3a:	2300      	movs	r3, #0
   dbb3c:	461a      	mov	r2, r3
   dbb3e:	6840      	ldr	r0, [r0, #4]
   dbb40:	f7fd be70 	b.w	d9824 <network_connect>

000dbb44 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dbb44:	2200      	movs	r2, #0
   dbb46:	2102      	movs	r1, #2
   dbb48:	6840      	ldr	r0, [r0, #4]
   dbb4a:	f7fd be7b 	b.w	d9844 <network_disconnect>

000dbb4e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dbb4e:	2200      	movs	r2, #0
   dbb50:	4611      	mov	r1, r2
   dbb52:	6840      	ldr	r0, [r0, #4]
   dbb54:	f7fd be6e 	b.w	d9834 <network_connecting>

000dbb58 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dbb58:	2200      	movs	r2, #0
   dbb5a:	4611      	mov	r1, r2
   dbb5c:	6840      	ldr	r0, [r0, #4]
   dbb5e:	f7fd be79 	b.w	d9854 <network_ready>

000dbb62 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dbb62:	2300      	movs	r3, #0
   dbb64:	461a      	mov	r2, r3
   dbb66:	4619      	mov	r1, r3
   dbb68:	6840      	ldr	r0, [r0, #4]
   dbb6a:	f7fd be7b 	b.w	d9864 <network_on>

000dbb6e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dbb6e:	2300      	movs	r3, #0
   dbb70:	461a      	mov	r2, r3
   dbb72:	4619      	mov	r1, r3
   dbb74:	6840      	ldr	r0, [r0, #4]
   dbb76:	f7fd be7d 	b.w	d9874 <network_off>

000dbb7a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dbb7a:	2200      	movs	r2, #0
   dbb7c:	f081 0101 	eor.w	r1, r1, #1
   dbb80:	6840      	ldr	r0, [r0, #4]
   dbb82:	f7fd be7f 	b.w	d9884 <network_listen>

000dbb86 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dbb86:	2200      	movs	r2, #0
   dbb88:	6840      	ldr	r0, [r0, #4]
   dbb8a:	f7fd be8b 	b.w	d98a4 <network_set_listen_timeout>

000dbb8e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dbb8e:	2200      	movs	r2, #0
   dbb90:	4611      	mov	r1, r2
   dbb92:	6840      	ldr	r0, [r0, #4]
   dbb94:	f7fd be8e 	b.w	d98b4 <network_get_listen_timeout>

000dbb98 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dbb98:	2200      	movs	r2, #0
   dbb9a:	4611      	mov	r1, r2
   dbb9c:	6840      	ldr	r0, [r0, #4]
   dbb9e:	f7fd be79 	b.w	d9894 <network_listening>

000dbba2 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dbba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dbba6:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   dbba8:	b095      	sub	sp, #84	; 0x54
   dbbaa:	4616      	mov	r6, r2
   dbbac:	460d      	mov	r5, r1
   dbbae:	4607      	mov	r7, r0
    IPAddress addr;
   dbbb0:	f7ff f9a8 	bl	daf04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   dbbb4:	4621      	mov	r1, r4
   dbbb6:	2220      	movs	r2, #32
   dbbb8:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dbbba:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dbbbc:	f006 fc0d 	bl	e23da <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dbbc0:	2340      	movs	r3, #64	; 0x40
   dbbc2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dbbc4:	4621      	mov	r1, r4
   dbbc6:	466b      	mov	r3, sp
   dbbc8:	aa0c      	add	r2, sp, #48	; 0x30
   dbbca:	4630      	mov	r0, r6
   dbbcc:	f7fd fb94 	bl	d92f8 <netdb_getaddrinfo>
    if (!r) {
   dbbd0:	4604      	mov	r4, r0
   dbbd2:	2800      	cmp	r0, #0
   dbbd4:	d144      	bne.n	dbc60 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbbd6:	4602      	mov	r2, r0
   dbbd8:	2101      	movs	r1, #1
   dbbda:	6868      	ldr	r0, [r5, #4]
   dbbdc:	f7fd fe3a 	bl	d9854 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbbe0:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbbe2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbbe4:	4622      	mov	r2, r4
   dbbe6:	6868      	ldr	r0, [r5, #4]
   dbbe8:	f7fd fe34 	bl	d9854 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbbec:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbbee:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   dbbf0:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbbf2:	2e00      	cmp	r6, #0
   dbbf4:	d034      	beq.n	dbc60 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   dbbf6:	2900      	cmp	r1, #0
   dbbf8:	d132      	bne.n	dbc60 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dbbfa:	6873      	ldr	r3, [r6, #4]
   dbbfc:	2b02      	cmp	r3, #2
   dbbfe:	d002      	beq.n	dbc06 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   dbc00:	2b0a      	cmp	r3, #10
   dbc02:	d009      	beq.n	dbc18 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   dbc04:	e02a      	b.n	dbc5c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   dbc06:	f1b8 0f00 	cmp.w	r8, #0
   dbc0a:	d027      	beq.n	dbc5c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dbc0c:	6971      	ldr	r1, [r6, #20]
   dbc0e:	4638      	mov	r0, r7
   dbc10:	3104      	adds	r1, #4
   dbc12:	f7ff f9ba 	bl	daf8a <_ZN9IPAddressaSEPKh>
   dbc16:	e020      	b.n	dbc5a <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   dbc18:	f1b9 0f00 	cmp.w	r9, #0
   dbc1c:	d01e      	beq.n	dbc5c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dbc1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dbc20:	2211      	movs	r2, #17
   dbc22:	a801      	add	r0, sp, #4
   dbc24:	f006 fbd9 	bl	e23da <memset>
                    a.v = 6;
   dbc28:	2306      	movs	r3, #6
   dbc2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dbc2e:	ad01      	add	r5, sp, #4
   dbc30:	f104 0308 	add.w	r3, r4, #8
   dbc34:	3418      	adds	r4, #24
   dbc36:	6818      	ldr	r0, [r3, #0]
   dbc38:	6859      	ldr	r1, [r3, #4]
   dbc3a:	462a      	mov	r2, r5
   dbc3c:	c203      	stmia	r2!, {r0, r1}
   dbc3e:	3308      	adds	r3, #8
   dbc40:	42a3      	cmp	r3, r4
   dbc42:	4615      	mov	r5, r2
   dbc44:	d1f7      	bne.n	dbc36 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dbc46:	a901      	add	r1, sp, #4
   dbc48:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dbc4a:	ad07      	add	r5, sp, #28
   dbc4c:	f7ff f968 	bl	daf20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dbc50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dbc52:	1d3c      	adds	r4, r7, #4
   dbc54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dbc56:	682b      	ldr	r3, [r5, #0]
   dbc58:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dbc5a:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbc5c:	69f6      	ldr	r6, [r6, #28]
   dbc5e:	e7c8      	b.n	dbbf2 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dbc60:	9800      	ldr	r0, [sp, #0]
   dbc62:	f7fd fb41 	bl	d92e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dbc66:	4638      	mov	r0, r7
   dbc68:	b015      	add	sp, #84	; 0x54
   dbc6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dbc70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dbc70:	4b02      	ldr	r3, [pc, #8]	; (dbc7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dbc72:	4a03      	ldr	r2, [pc, #12]	; (dbc80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dbc74:	601a      	str	r2, [r3, #0]
   dbc76:	2200      	movs	r2, #0
   dbc78:	605a      	str	r2, [r3, #4]
   dbc7a:	4770      	bx	lr
   dbc7c:	2003e5cc 	.word	0x2003e5cc
   dbc80:	000e69ac 	.word	0x000e69ac

000dbc84 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dbc84:	b510      	push	{r4, lr}
   dbc86:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dbc88:	480f      	ldr	r0, [pc, #60]	; (dbcc8 <pinAvailable+0x44>)
   dbc8a:	f7fd ff33 	bl	d9af4 <_ZN8SPIClass9isEnabledEv>
   dbc8e:	b128      	cbz	r0, dbc9c <pinAvailable+0x18>
   dbc90:	f1a4 030b 	sub.w	r3, r4, #11
   dbc94:	2b02      	cmp	r3, #2
   dbc96:	d801      	bhi.n	dbc9c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   dbc98:	2000      	movs	r0, #0
   dbc9a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dbc9c:	f000 f8b2 	bl	dbe04 <_Z19__fetch_global_Wirev>
   dbca0:	f7ff fbb8 	bl	db414 <_ZN7TwoWire9isEnabledEv>
   dbca4:	b108      	cbz	r0, dbcaa <pinAvailable+0x26>
   dbca6:	2c01      	cmp	r4, #1
   dbca8:	d9f6      	bls.n	dbc98 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dbcaa:	f7ff fb09 	bl	db2c0 <_Z22__fetch_global_Serial1v>
   dbcae:	f7ff fb04 	bl	db2ba <_ZN11USARTSerial9isEnabledEv>
   dbcb2:	b118      	cbz	r0, dbcbc <pinAvailable+0x38>
   dbcb4:	f1a4 0309 	sub.w	r3, r4, #9
   dbcb8:	2b01      	cmp	r3, #1
   dbcba:	d9ed      	bls.n	dbc98 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dbcbc:	2c23      	cmp	r4, #35	; 0x23
   dbcbe:	bf8c      	ite	hi
   dbcc0:	2000      	movhi	r0, #0
   dbcc2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dbcc4:	bd10      	pop	{r4, pc}
   dbcc6:	bf00      	nop
   dbcc8:	2003e5d4 	.word	0x2003e5d4

000dbccc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbccc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dbcce:	b538      	push	{r3, r4, r5, lr}
   dbcd0:	4604      	mov	r4, r0
   dbcd2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbcd4:	d80a      	bhi.n	dbcec <pinMode+0x20>
   dbcd6:	29ff      	cmp	r1, #255	; 0xff
   dbcd8:	d008      	beq.n	dbcec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbcda:	f7ff ffd3 	bl	dbc84 <pinAvailable>
   dbcde:	b128      	cbz	r0, dbcec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbce0:	4629      	mov	r1, r5
   dbce2:	4620      	mov	r0, r4
}
   dbce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbce8:	f7fd bb1e 	b.w	d9328 <HAL_Pin_Mode>
   dbcec:	bd38      	pop	{r3, r4, r5, pc}

000dbcee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbcee:	b538      	push	{r3, r4, r5, lr}
   dbcf0:	4604      	mov	r4, r0
   dbcf2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbcf4:	f7fd fb20 	bl	d9338 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbcf8:	28ff      	cmp	r0, #255	; 0xff
   dbcfa:	d010      	beq.n	dbd1e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dbcfc:	2806      	cmp	r0, #6
   dbcfe:	d804      	bhi.n	dbd0a <digitalWrite+0x1c>
   dbd00:	234d      	movs	r3, #77	; 0x4d
   dbd02:	fa23 f000 	lsr.w	r0, r3, r0
   dbd06:	07c3      	lsls	r3, r0, #31
   dbd08:	d409      	bmi.n	dbd1e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbd0a:	4620      	mov	r0, r4
   dbd0c:	f7ff ffba 	bl	dbc84 <pinAvailable>
   dbd10:	b128      	cbz	r0, dbd1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbd12:	4629      	mov	r1, r5
   dbd14:	4620      	mov	r0, r4
}
   dbd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbd1a:	f7fd bb15 	b.w	d9348 <HAL_GPIO_Write>
   dbd1e:	bd38      	pop	{r3, r4, r5, pc}

000dbd20 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dbd20:	b510      	push	{r4, lr}
   dbd22:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbd24:	f7fd fb08 	bl	d9338 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dbd28:	3804      	subs	r0, #4
   dbd2a:	b2c0      	uxtb	r0, r0
   dbd2c:	2801      	cmp	r0, #1
   dbd2e:	d908      	bls.n	dbd42 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dbd30:	4620      	mov	r0, r4
   dbd32:	f7ff ffa7 	bl	dbc84 <pinAvailable>
   dbd36:	b120      	cbz	r0, dbd42 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dbd38:	4620      	mov	r0, r4
}
   dbd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dbd3e:	f7fd bb0b 	b.w	d9358 <HAL_GPIO_Read>
}
   dbd42:	2000      	movs	r0, #0
   dbd44:	bd10      	pop	{r4, pc}

000dbd46 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dbd46:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dbd48:	b510      	push	{r4, lr}
   dbd4a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dbd4c:	bf9c      	itt	ls
   dbd4e:	340e      	addls	r4, #14
   dbd50:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbd52:	4620      	mov	r0, r4
   dbd54:	f7ff ff96 	bl	dbc84 <pinAvailable>
   dbd58:	b150      	cbz	r0, dbd70 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dbd5a:	2103      	movs	r1, #3
   dbd5c:	4620      	mov	r0, r4
   dbd5e:	f7fd fadb 	bl	d9318 <HAL_Validate_Pin_Function>
   dbd62:	2803      	cmp	r0, #3
   dbd64:	d104      	bne.n	dbd70 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dbd66:	4620      	mov	r0, r4
}
   dbd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dbd6c:	f7fd bb14 	b.w	d9398 <HAL_ADC_Read>
}
   dbd70:	2000      	movs	r0, #0
   dbd72:	bd10      	pop	{r4, pc}

000dbd74 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dbd74:	b538      	push	{r3, r4, r5, lr}
   dbd76:	4604      	mov	r4, r0
   dbd78:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dbd7a:	f7ff ff83 	bl	dbc84 <pinAvailable>
   dbd7e:	b1f0      	cbz	r0, dbdbe <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dbd80:	2104      	movs	r1, #4
   dbd82:	4620      	mov	r0, r4
   dbd84:	f7fd fac8 	bl	d9318 <HAL_Validate_Pin_Function>
   dbd88:	2804      	cmp	r0, #4
   dbd8a:	d105      	bne.n	dbd98 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dbd8c:	b2a9      	uxth	r1, r5
   dbd8e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dbd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dbd94:	f7fd baf8 	b.w	d9388 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dbd98:	2102      	movs	r1, #2
   dbd9a:	4620      	mov	r0, r4
   dbd9c:	f7fd fabc 	bl	d9318 <HAL_Validate_Pin_Function>
   dbda0:	2802      	cmp	r0, #2
   dbda2:	d10c      	bne.n	dbdbe <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dbda4:	4620      	mov	r0, r4
   dbda6:	f7fd fac7 	bl	d9338 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dbdaa:	2801      	cmp	r0, #1
   dbdac:	d001      	beq.n	dbdb2 <_Z11analogWritetm+0x3e>
   dbdae:	2804      	cmp	r0, #4
   dbdb0:	d105      	bne.n	dbdbe <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dbdb2:	4629      	mov	r1, r5
   dbdb4:	4620      	mov	r0, r4
    }
}
   dbdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dbdba:	f7fd baf5 	b.w	d93a8 <HAL_PWM_Write_Ext>
   dbdbe:	bd38      	pop	{r3, r4, r5, pc}

000dbdc0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dbdc0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dbdc2:	4c0c      	ldr	r4, [pc, #48]	; (dbdf4 <_GLOBAL__sub_I_SPI+0x34>)
   dbdc4:	4e0c      	ldr	r6, [pc, #48]	; (dbdf8 <_GLOBAL__sub_I_SPI+0x38>)
   dbdc6:	4d0d      	ldr	r5, [pc, #52]	; (dbdfc <_GLOBAL__sub_I_SPI+0x3c>)
   dbdc8:	2100      	movs	r1, #0
   dbdca:	4620      	mov	r0, r4
   dbdcc:	f7fd fe78 	bl	d9ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dbdd0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dbdd2:	4c0b      	ldr	r4, [pc, #44]	; (dbe00 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dbdd4:	4632      	mov	r2, r6
   dbdd6:	4629      	mov	r1, r5
   dbdd8:	f000 f854 	bl	dbe84 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dbddc:	2101      	movs	r1, #1
   dbdde:	4620      	mov	r0, r4
   dbde0:	f7fd fe6e 	bl	d9ac0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dbde4:	4632      	mov	r2, r6
   dbde6:	4629      	mov	r1, r5
   dbde8:	4620      	mov	r0, r4
   dbdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dbdee:	f000 b849 	b.w	dbe84 <__aeabi_atexit>
   dbdf2:	bf00      	nop
   dbdf4:	2003e5d4 	.word	0x2003e5d4
   dbdf8:	2003d6b0 	.word	0x2003d6b0
   dbdfc:	000d9ab1 	.word	0x000d9ab1
   dbe00:	2003e5e4 	.word	0x2003e5e4

000dbe04 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   dbe04:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   dbe06:	4d0b      	ldr	r5, [pc, #44]	; (dbe34 <_Z19__fetch_global_Wirev+0x30>)
   dbe08:	6829      	ldr	r1, [r5, #0]
   dbe0a:	f011 0401 	ands.w	r4, r1, #1
   dbe0e:	d10f      	bne.n	dbe30 <_Z19__fetch_global_Wirev+0x2c>
   dbe10:	4628      	mov	r0, r5
   dbe12:	f7f8 f948 	bl	d40a6 <__cxa_guard_acquire>
   dbe16:	b158      	cbz	r0, dbe30 <_Z19__fetch_global_Wirev+0x2c>
   dbe18:	4621      	mov	r1, r4
   dbe1a:	4807      	ldr	r0, [pc, #28]	; (dbe38 <_Z19__fetch_global_Wirev+0x34>)
   dbe1c:	f7ff fab6 	bl	db38c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dbe20:	4628      	mov	r0, r5
   dbe22:	f7f8 f945 	bl	d40b0 <__cxa_guard_release>
   dbe26:	4a05      	ldr	r2, [pc, #20]	; (dbe3c <_Z19__fetch_global_Wirev+0x38>)
   dbe28:	4905      	ldr	r1, [pc, #20]	; (dbe40 <_Z19__fetch_global_Wirev+0x3c>)
   dbe2a:	4803      	ldr	r0, [pc, #12]	; (dbe38 <_Z19__fetch_global_Wirev+0x34>)
   dbe2c:	f000 f82a 	bl	dbe84 <__aeabi_atexit>
	return wire;
}
   dbe30:	4801      	ldr	r0, [pc, #4]	; (dbe38 <_Z19__fetch_global_Wirev+0x34>)
   dbe32:	bd38      	pop	{r3, r4, r5, pc}
   dbe34:	2003e5f8 	.word	0x2003e5f8
   dbe38:	2003e610 	.word	0x2003e610
   dbe3c:	2003d6b0 	.word	0x2003d6b0
   dbe40:	000db335 	.word	0x000db335

000dbe44 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dbe44:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   dbe46:	4c0b      	ldr	r4, [pc, #44]	; (dbe74 <_Z20__fetch_global_Wire1v+0x30>)
   dbe48:	6823      	ldr	r3, [r4, #0]
   dbe4a:	07db      	lsls	r3, r3, #31
   dbe4c:	d40f      	bmi.n	dbe6e <_Z20__fetch_global_Wire1v+0x2a>
   dbe4e:	4620      	mov	r0, r4
   dbe50:	f7f8 f929 	bl	d40a6 <__cxa_guard_acquire>
   dbe54:	b158      	cbz	r0, dbe6e <_Z20__fetch_global_Wire1v+0x2a>
   dbe56:	2101      	movs	r1, #1
   dbe58:	4807      	ldr	r0, [pc, #28]	; (dbe78 <_Z20__fetch_global_Wire1v+0x34>)
   dbe5a:	f7ff fa97 	bl	db38c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dbe5e:	4620      	mov	r0, r4
   dbe60:	f7f8 f926 	bl	d40b0 <__cxa_guard_release>
   dbe64:	4a05      	ldr	r2, [pc, #20]	; (dbe7c <_Z20__fetch_global_Wire1v+0x38>)
   dbe66:	4906      	ldr	r1, [pc, #24]	; (dbe80 <_Z20__fetch_global_Wire1v+0x3c>)
   dbe68:	4803      	ldr	r0, [pc, #12]	; (dbe78 <_Z20__fetch_global_Wire1v+0x34>)
   dbe6a:	f000 f80b 	bl	dbe84 <__aeabi_atexit>
	return wire;
}
   dbe6e:	4802      	ldr	r0, [pc, #8]	; (dbe78 <_Z20__fetch_global_Wire1v+0x34>)
   dbe70:	bd10      	pop	{r4, pc}
   dbe72:	bf00      	nop
   dbe74:	2003e624 	.word	0x2003e624
   dbe78:	2003e5fc 	.word	0x2003e5fc
   dbe7c:	2003d6b0 	.word	0x2003d6b0
   dbe80:	000db335 	.word	0x000db335

000dbe84 <__aeabi_atexit>:
   dbe84:	460b      	mov	r3, r1
   dbe86:	4601      	mov	r1, r0
   dbe88:	4618      	mov	r0, r3
   dbe8a:	f006 b991 	b.w	e21b0 <__cxa_atexit>

000dbe8e <_ZdlPvj>:
   dbe8e:	f7f8 b906 	b.w	d409e <_ZdlPv>

000dbe92 <_ZSt25__throw_bad_function_callv>:
   dbe92:	b508      	push	{r3, lr}
   dbe94:	f7fd fd8e 	bl	d99b4 <abort>

000dbe98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbe98:	4b18      	ldr	r3, [pc, #96]	; (dbefc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbe9a:	681a      	ldr	r2, [r3, #0]
   dbe9c:	07d1      	lsls	r1, r2, #31
   dbe9e:	bf5c      	itt	pl
   dbea0:	2201      	movpl	r2, #1
   dbea2:	601a      	strpl	r2, [r3, #0]
   dbea4:	4b16      	ldr	r3, [pc, #88]	; (dbf00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbea6:	681a      	ldr	r2, [r3, #0]
   dbea8:	07d2      	lsls	r2, r2, #31
   dbeaa:	bf5c      	itt	pl
   dbeac:	2201      	movpl	r2, #1
   dbeae:	601a      	strpl	r2, [r3, #0]
   dbeb0:	4b14      	ldr	r3, [pc, #80]	; (dbf04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbeb2:	681a      	ldr	r2, [r3, #0]
   dbeb4:	07d0      	lsls	r0, r2, #31
   dbeb6:	bf5c      	itt	pl
   dbeb8:	2201      	movpl	r2, #1
   dbeba:	601a      	strpl	r2, [r3, #0]
   dbebc:	4b12      	ldr	r3, [pc, #72]	; (dbf08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbebe:	681a      	ldr	r2, [r3, #0]
   dbec0:	07d1      	lsls	r1, r2, #31
   dbec2:	bf5c      	itt	pl
   dbec4:	2201      	movpl	r2, #1
   dbec6:	601a      	strpl	r2, [r3, #0]
   dbec8:	4b10      	ldr	r3, [pc, #64]	; (dbf0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbeca:	681a      	ldr	r2, [r3, #0]
   dbecc:	07d2      	lsls	r2, r2, #31
   dbece:	bf5c      	itt	pl
   dbed0:	2201      	movpl	r2, #1
   dbed2:	601a      	strpl	r2, [r3, #0]
   dbed4:	4b0e      	ldr	r3, [pc, #56]	; (dbf10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbed6:	681a      	ldr	r2, [r3, #0]
   dbed8:	07d0      	lsls	r0, r2, #31
   dbeda:	bf5c      	itt	pl
   dbedc:	2201      	movpl	r2, #1
   dbede:	601a      	strpl	r2, [r3, #0]
   dbee0:	4b0c      	ldr	r3, [pc, #48]	; (dbf14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbee2:	681a      	ldr	r2, [r3, #0]
   dbee4:	07d1      	lsls	r1, r2, #31
   dbee6:	bf5c      	itt	pl
   dbee8:	2201      	movpl	r2, #1
   dbeea:	601a      	strpl	r2, [r3, #0]
   dbeec:	4b0a      	ldr	r3, [pc, #40]	; (dbf18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbeee:	681a      	ldr	r2, [r3, #0]
   dbef0:	07d2      	lsls	r2, r2, #31
   dbef2:	bf5c      	itt	pl
   dbef4:	2201      	movpl	r2, #1
   dbef6:	601a      	strpl	r2, [r3, #0]
   dbef8:	4770      	bx	lr
   dbefa:	bf00      	nop
   dbefc:	2003e644 	.word	0x2003e644
   dbf00:	2003e640 	.word	0x2003e640
   dbf04:	2003e63c 	.word	0x2003e63c
   dbf08:	2003e638 	.word	0x2003e638
   dbf0c:	2003e634 	.word	0x2003e634
   dbf10:	2003e630 	.word	0x2003e630
   dbf14:	2003e62c 	.word	0x2003e62c
   dbf18:	2003e628 	.word	0x2003e628

000dbf1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dbf1c:	4b24      	ldr	r3, [pc, #144]	; (dbfb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dbf1e:	681a      	ldr	r2, [r3, #0]
   dbf20:	07d0      	lsls	r0, r2, #31
   dbf22:	bf5c      	itt	pl
   dbf24:	2201      	movpl	r2, #1
   dbf26:	601a      	strpl	r2, [r3, #0]
   dbf28:	4b22      	ldr	r3, [pc, #136]	; (dbfb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dbf2a:	681a      	ldr	r2, [r3, #0]
   dbf2c:	07d1      	lsls	r1, r2, #31
   dbf2e:	bf5c      	itt	pl
   dbf30:	2201      	movpl	r2, #1
   dbf32:	601a      	strpl	r2, [r3, #0]
   dbf34:	4b20      	ldr	r3, [pc, #128]	; (dbfb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dbf36:	681a      	ldr	r2, [r3, #0]
   dbf38:	07d2      	lsls	r2, r2, #31
   dbf3a:	bf5c      	itt	pl
   dbf3c:	2201      	movpl	r2, #1
   dbf3e:	601a      	strpl	r2, [r3, #0]
   dbf40:	4b1e      	ldr	r3, [pc, #120]	; (dbfbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dbf42:	681a      	ldr	r2, [r3, #0]
   dbf44:	07d0      	lsls	r0, r2, #31
   dbf46:	bf5c      	itt	pl
   dbf48:	2201      	movpl	r2, #1
   dbf4a:	601a      	strpl	r2, [r3, #0]
   dbf4c:	4b1c      	ldr	r3, [pc, #112]	; (dbfc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dbf4e:	681a      	ldr	r2, [r3, #0]
   dbf50:	07d1      	lsls	r1, r2, #31
   dbf52:	bf5c      	itt	pl
   dbf54:	2201      	movpl	r2, #1
   dbf56:	601a      	strpl	r2, [r3, #0]
   dbf58:	4b1a      	ldr	r3, [pc, #104]	; (dbfc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dbf5a:	681a      	ldr	r2, [r3, #0]
   dbf5c:	07d2      	lsls	r2, r2, #31
   dbf5e:	bf5c      	itt	pl
   dbf60:	2201      	movpl	r2, #1
   dbf62:	601a      	strpl	r2, [r3, #0]
   dbf64:	4b18      	ldr	r3, [pc, #96]	; (dbfc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dbf66:	681a      	ldr	r2, [r3, #0]
   dbf68:	07d0      	lsls	r0, r2, #31
   dbf6a:	bf5c      	itt	pl
   dbf6c:	2201      	movpl	r2, #1
   dbf6e:	601a      	strpl	r2, [r3, #0]
   dbf70:	4b16      	ldr	r3, [pc, #88]	; (dbfcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dbf72:	681a      	ldr	r2, [r3, #0]
   dbf74:	07d1      	lsls	r1, r2, #31
   dbf76:	bf5c      	itt	pl
   dbf78:	2201      	movpl	r2, #1
   dbf7a:	601a      	strpl	r2, [r3, #0]
   dbf7c:	4b14      	ldr	r3, [pc, #80]	; (dbfd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dbf7e:	681a      	ldr	r2, [r3, #0]
   dbf80:	07d2      	lsls	r2, r2, #31
   dbf82:	bf5c      	itt	pl
   dbf84:	2201      	movpl	r2, #1
   dbf86:	601a      	strpl	r2, [r3, #0]
   dbf88:	4b12      	ldr	r3, [pc, #72]	; (dbfd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dbf8a:	681a      	ldr	r2, [r3, #0]
   dbf8c:	07d0      	lsls	r0, r2, #31
   dbf8e:	bf5c      	itt	pl
   dbf90:	2201      	movpl	r2, #1
   dbf92:	601a      	strpl	r2, [r3, #0]
   dbf94:	4b10      	ldr	r3, [pc, #64]	; (dbfd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dbf96:	681a      	ldr	r2, [r3, #0]
   dbf98:	07d1      	lsls	r1, r2, #31
   dbf9a:	bf5c      	itt	pl
   dbf9c:	2201      	movpl	r2, #1
   dbf9e:	601a      	strpl	r2, [r3, #0]
   dbfa0:	4b0e      	ldr	r3, [pc, #56]	; (dbfdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dbfa2:	681a      	ldr	r2, [r3, #0]
   dbfa4:	07d2      	lsls	r2, r2, #31
   dbfa6:	bf5c      	itt	pl
   dbfa8:	2201      	movpl	r2, #1
   dbfaa:	601a      	strpl	r2, [r3, #0]
   dbfac:	4770      	bx	lr
   dbfae:	bf00      	nop
   dbfb0:	2003e674 	.word	0x2003e674
   dbfb4:	2003e670 	.word	0x2003e670
   dbfb8:	2003e66c 	.word	0x2003e66c
   dbfbc:	2003e668 	.word	0x2003e668
   dbfc0:	2003e664 	.word	0x2003e664
   dbfc4:	2003e660 	.word	0x2003e660
   dbfc8:	2003e65c 	.word	0x2003e65c
   dbfcc:	2003e658 	.word	0x2003e658
   dbfd0:	2003e654 	.word	0x2003e654
   dbfd4:	2003e650 	.word	0x2003e650
   dbfd8:	2003e64c 	.word	0x2003e64c
   dbfdc:	2003e648 	.word	0x2003e648

000dbfe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dbfe0:	4b24      	ldr	r3, [pc, #144]	; (dc074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dbfe2:	681a      	ldr	r2, [r3, #0]
   dbfe4:	07d0      	lsls	r0, r2, #31
   dbfe6:	bf5c      	itt	pl
   dbfe8:	2201      	movpl	r2, #1
   dbfea:	601a      	strpl	r2, [r3, #0]
   dbfec:	4b22      	ldr	r3, [pc, #136]	; (dc078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dbfee:	681a      	ldr	r2, [r3, #0]
   dbff0:	07d1      	lsls	r1, r2, #31
   dbff2:	bf5c      	itt	pl
   dbff4:	2201      	movpl	r2, #1
   dbff6:	601a      	strpl	r2, [r3, #0]
   dbff8:	4b20      	ldr	r3, [pc, #128]	; (dc07c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dbffa:	681a      	ldr	r2, [r3, #0]
   dbffc:	07d2      	lsls	r2, r2, #31
   dbffe:	bf5c      	itt	pl
   dc000:	2201      	movpl	r2, #1
   dc002:	601a      	strpl	r2, [r3, #0]
   dc004:	4b1e      	ldr	r3, [pc, #120]	; (dc080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dc006:	681a      	ldr	r2, [r3, #0]
   dc008:	07d0      	lsls	r0, r2, #31
   dc00a:	bf5c      	itt	pl
   dc00c:	2201      	movpl	r2, #1
   dc00e:	601a      	strpl	r2, [r3, #0]
   dc010:	4b1c      	ldr	r3, [pc, #112]	; (dc084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dc012:	681a      	ldr	r2, [r3, #0]
   dc014:	07d1      	lsls	r1, r2, #31
   dc016:	bf5c      	itt	pl
   dc018:	2201      	movpl	r2, #1
   dc01a:	601a      	strpl	r2, [r3, #0]
   dc01c:	4b1a      	ldr	r3, [pc, #104]	; (dc088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dc01e:	681a      	ldr	r2, [r3, #0]
   dc020:	07d2      	lsls	r2, r2, #31
   dc022:	bf5c      	itt	pl
   dc024:	2201      	movpl	r2, #1
   dc026:	601a      	strpl	r2, [r3, #0]
   dc028:	4b18      	ldr	r3, [pc, #96]	; (dc08c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dc02a:	681a      	ldr	r2, [r3, #0]
   dc02c:	07d0      	lsls	r0, r2, #31
   dc02e:	bf5c      	itt	pl
   dc030:	2201      	movpl	r2, #1
   dc032:	601a      	strpl	r2, [r3, #0]
   dc034:	4b16      	ldr	r3, [pc, #88]	; (dc090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dc036:	681a      	ldr	r2, [r3, #0]
   dc038:	07d1      	lsls	r1, r2, #31
   dc03a:	bf5c      	itt	pl
   dc03c:	2201      	movpl	r2, #1
   dc03e:	601a      	strpl	r2, [r3, #0]
   dc040:	4b14      	ldr	r3, [pc, #80]	; (dc094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dc042:	681a      	ldr	r2, [r3, #0]
   dc044:	07d2      	lsls	r2, r2, #31
   dc046:	bf5c      	itt	pl
   dc048:	2201      	movpl	r2, #1
   dc04a:	601a      	strpl	r2, [r3, #0]
   dc04c:	4b12      	ldr	r3, [pc, #72]	; (dc098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dc04e:	681a      	ldr	r2, [r3, #0]
   dc050:	07d0      	lsls	r0, r2, #31
   dc052:	bf5c      	itt	pl
   dc054:	2201      	movpl	r2, #1
   dc056:	601a      	strpl	r2, [r3, #0]
   dc058:	4b10      	ldr	r3, [pc, #64]	; (dc09c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dc05a:	681a      	ldr	r2, [r3, #0]
   dc05c:	07d1      	lsls	r1, r2, #31
   dc05e:	bf5c      	itt	pl
   dc060:	2201      	movpl	r2, #1
   dc062:	601a      	strpl	r2, [r3, #0]
   dc064:	4b0e      	ldr	r3, [pc, #56]	; (dc0a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dc066:	681a      	ldr	r2, [r3, #0]
   dc068:	07d2      	lsls	r2, r2, #31
   dc06a:	bf5c      	itt	pl
   dc06c:	2201      	movpl	r2, #1
   dc06e:	601a      	strpl	r2, [r3, #0]
   dc070:	4770      	bx	lr
   dc072:	bf00      	nop
   dc074:	2003e6a4 	.word	0x2003e6a4
   dc078:	2003e6a0 	.word	0x2003e6a0
   dc07c:	2003e69c 	.word	0x2003e69c
   dc080:	2003e698 	.word	0x2003e698
   dc084:	2003e694 	.word	0x2003e694
   dc088:	2003e690 	.word	0x2003e690
   dc08c:	2003e68c 	.word	0x2003e68c
   dc090:	2003e688 	.word	0x2003e688
   dc094:	2003e684 	.word	0x2003e684
   dc098:	2003e680 	.word	0x2003e680
   dc09c:	2003e67c 	.word	0x2003e67c
   dc0a0:	2003e678 	.word	0x2003e678

000dc0a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc0a4:	4b18      	ldr	r3, [pc, #96]	; (dc108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc0a6:	681a      	ldr	r2, [r3, #0]
   dc0a8:	07d1      	lsls	r1, r2, #31
   dc0aa:	bf5c      	itt	pl
   dc0ac:	2201      	movpl	r2, #1
   dc0ae:	601a      	strpl	r2, [r3, #0]
   dc0b0:	4b16      	ldr	r3, [pc, #88]	; (dc10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc0b2:	681a      	ldr	r2, [r3, #0]
   dc0b4:	07d2      	lsls	r2, r2, #31
   dc0b6:	bf5c      	itt	pl
   dc0b8:	2201      	movpl	r2, #1
   dc0ba:	601a      	strpl	r2, [r3, #0]
   dc0bc:	4b14      	ldr	r3, [pc, #80]	; (dc110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc0be:	681a      	ldr	r2, [r3, #0]
   dc0c0:	07d0      	lsls	r0, r2, #31
   dc0c2:	bf5c      	itt	pl
   dc0c4:	2201      	movpl	r2, #1
   dc0c6:	601a      	strpl	r2, [r3, #0]
   dc0c8:	4b12      	ldr	r3, [pc, #72]	; (dc114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc0ca:	681a      	ldr	r2, [r3, #0]
   dc0cc:	07d1      	lsls	r1, r2, #31
   dc0ce:	bf5c      	itt	pl
   dc0d0:	2201      	movpl	r2, #1
   dc0d2:	601a      	strpl	r2, [r3, #0]
   dc0d4:	4b10      	ldr	r3, [pc, #64]	; (dc118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc0d6:	681a      	ldr	r2, [r3, #0]
   dc0d8:	07d2      	lsls	r2, r2, #31
   dc0da:	bf5c      	itt	pl
   dc0dc:	2201      	movpl	r2, #1
   dc0de:	601a      	strpl	r2, [r3, #0]
   dc0e0:	4b0e      	ldr	r3, [pc, #56]	; (dc11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc0e2:	681a      	ldr	r2, [r3, #0]
   dc0e4:	07d0      	lsls	r0, r2, #31
   dc0e6:	bf5c      	itt	pl
   dc0e8:	2201      	movpl	r2, #1
   dc0ea:	601a      	strpl	r2, [r3, #0]
   dc0ec:	4b0c      	ldr	r3, [pc, #48]	; (dc120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc0ee:	681a      	ldr	r2, [r3, #0]
   dc0f0:	07d1      	lsls	r1, r2, #31
   dc0f2:	bf5c      	itt	pl
   dc0f4:	2201      	movpl	r2, #1
   dc0f6:	601a      	strpl	r2, [r3, #0]
   dc0f8:	4b0a      	ldr	r3, [pc, #40]	; (dc124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc0fa:	681a      	ldr	r2, [r3, #0]
   dc0fc:	07d2      	lsls	r2, r2, #31
   dc0fe:	bf5c      	itt	pl
   dc100:	2201      	movpl	r2, #1
   dc102:	601a      	strpl	r2, [r3, #0]
   dc104:	4770      	bx	lr
   dc106:	bf00      	nop
   dc108:	2003e6c4 	.word	0x2003e6c4
   dc10c:	2003e6c0 	.word	0x2003e6c0
   dc110:	2003e6bc 	.word	0x2003e6bc
   dc114:	2003e6b8 	.word	0x2003e6b8
   dc118:	2003e6b4 	.word	0x2003e6b4
   dc11c:	2003e6b0 	.word	0x2003e6b0
   dc120:	2003e6ac 	.word	0x2003e6ac
   dc124:	2003e6a8 	.word	0x2003e6a8

000dc128 <atan>:
   dc128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc12c:	ec55 4b10 	vmov	r4, r5, d0
   dc130:	4bd1      	ldr	r3, [pc, #836]	; (dc478 <atan+0x350>)
   dc132:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dc136:	429e      	cmp	r6, r3
   dc138:	46ab      	mov	fp, r5
   dc13a:	dd10      	ble.n	dc15e <atan+0x36>
   dc13c:	4bcf      	ldr	r3, [pc, #828]	; (dc47c <atan+0x354>)
   dc13e:	429e      	cmp	r6, r3
   dc140:	f300 80b2 	bgt.w	dc2a8 <atan+0x180>
   dc144:	f000 80ad 	beq.w	dc2a2 <atan+0x17a>
   dc148:	f1bb 0f00 	cmp.w	fp, #0
   dc14c:	f340 80fd 	ble.w	dc34a <atan+0x222>
   dc150:	a5ad      	add	r5, pc, #692	; (adr r5, dc408 <atan+0x2e0>)
   dc152:	e9d5 4500 	ldrd	r4, r5, [r5]
   dc156:	ec45 4b10 	vmov	d0, r4, r5
   dc15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc15e:	4bc8      	ldr	r3, [pc, #800]	; (dc480 <atan+0x358>)
   dc160:	429e      	cmp	r6, r3
   dc162:	f300 80c0 	bgt.w	dc2e6 <atan+0x1be>
   dc166:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dc16a:	429e      	cmp	r6, r3
   dc16c:	f340 80a8 	ble.w	dc2c0 <atan+0x198>
   dc170:	f04f 3aff 	mov.w	sl, #4294967295
   dc174:	4622      	mov	r2, r4
   dc176:	462b      	mov	r3, r5
   dc178:	4620      	mov	r0, r4
   dc17a:	4629      	mov	r1, r5
   dc17c:	f005 fc88 	bl	e1a90 <__aeabi_dmul>
   dc180:	4602      	mov	r2, r0
   dc182:	460b      	mov	r3, r1
   dc184:	4680      	mov	r8, r0
   dc186:	4689      	mov	r9, r1
   dc188:	f005 fc82 	bl	e1a90 <__aeabi_dmul>
   dc18c:	a3a0      	add	r3, pc, #640	; (adr r3, dc410 <atan+0x2e8>)
   dc18e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc192:	4606      	mov	r6, r0
   dc194:	460f      	mov	r7, r1
   dc196:	f005 fc7b 	bl	e1a90 <__aeabi_dmul>
   dc19a:	a39f      	add	r3, pc, #636	; (adr r3, dc418 <atan+0x2f0>)
   dc19c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1a0:	f005 fac4 	bl	e172c <__adddf3>
   dc1a4:	4632      	mov	r2, r6
   dc1a6:	463b      	mov	r3, r7
   dc1a8:	f005 fc72 	bl	e1a90 <__aeabi_dmul>
   dc1ac:	a39c      	add	r3, pc, #624	; (adr r3, dc420 <atan+0x2f8>)
   dc1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1b2:	f005 fabb 	bl	e172c <__adddf3>
   dc1b6:	4632      	mov	r2, r6
   dc1b8:	463b      	mov	r3, r7
   dc1ba:	f005 fc69 	bl	e1a90 <__aeabi_dmul>
   dc1be:	a39a      	add	r3, pc, #616	; (adr r3, dc428 <atan+0x300>)
   dc1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1c4:	f005 fab2 	bl	e172c <__adddf3>
   dc1c8:	4632      	mov	r2, r6
   dc1ca:	463b      	mov	r3, r7
   dc1cc:	f005 fc60 	bl	e1a90 <__aeabi_dmul>
   dc1d0:	a397      	add	r3, pc, #604	; (adr r3, dc430 <atan+0x308>)
   dc1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1d6:	f005 faa9 	bl	e172c <__adddf3>
   dc1da:	4632      	mov	r2, r6
   dc1dc:	463b      	mov	r3, r7
   dc1de:	f005 fc57 	bl	e1a90 <__aeabi_dmul>
   dc1e2:	a395      	add	r3, pc, #596	; (adr r3, dc438 <atan+0x310>)
   dc1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1e8:	f005 faa0 	bl	e172c <__adddf3>
   dc1ec:	4642      	mov	r2, r8
   dc1ee:	464b      	mov	r3, r9
   dc1f0:	f005 fc4e 	bl	e1a90 <__aeabi_dmul>
   dc1f4:	a392      	add	r3, pc, #584	; (adr r3, dc440 <atan+0x318>)
   dc1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1fa:	4680      	mov	r8, r0
   dc1fc:	4689      	mov	r9, r1
   dc1fe:	4630      	mov	r0, r6
   dc200:	4639      	mov	r1, r7
   dc202:	f005 fc45 	bl	e1a90 <__aeabi_dmul>
   dc206:	a390      	add	r3, pc, #576	; (adr r3, dc448 <atan+0x320>)
   dc208:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc20c:	f005 fa8c 	bl	e1728 <__aeabi_dsub>
   dc210:	4632      	mov	r2, r6
   dc212:	463b      	mov	r3, r7
   dc214:	f005 fc3c 	bl	e1a90 <__aeabi_dmul>
   dc218:	a38d      	add	r3, pc, #564	; (adr r3, dc450 <atan+0x328>)
   dc21a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc21e:	f005 fa83 	bl	e1728 <__aeabi_dsub>
   dc222:	4632      	mov	r2, r6
   dc224:	463b      	mov	r3, r7
   dc226:	f005 fc33 	bl	e1a90 <__aeabi_dmul>
   dc22a:	a38b      	add	r3, pc, #556	; (adr r3, dc458 <atan+0x330>)
   dc22c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc230:	f005 fa7a 	bl	e1728 <__aeabi_dsub>
   dc234:	4632      	mov	r2, r6
   dc236:	463b      	mov	r3, r7
   dc238:	f005 fc2a 	bl	e1a90 <__aeabi_dmul>
   dc23c:	a388      	add	r3, pc, #544	; (adr r3, dc460 <atan+0x338>)
   dc23e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc242:	f005 fa71 	bl	e1728 <__aeabi_dsub>
   dc246:	4632      	mov	r2, r6
   dc248:	463b      	mov	r3, r7
   dc24a:	f005 fc21 	bl	e1a90 <__aeabi_dmul>
   dc24e:	f1ba 3fff 	cmp.w	sl, #4294967295
   dc252:	4602      	mov	r2, r0
   dc254:	460b      	mov	r3, r1
   dc256:	d07c      	beq.n	dc352 <atan+0x22a>
   dc258:	4640      	mov	r0, r8
   dc25a:	4649      	mov	r1, r9
   dc25c:	f005 fa66 	bl	e172c <__adddf3>
   dc260:	4622      	mov	r2, r4
   dc262:	462b      	mov	r3, r5
   dc264:	f005 fc14 	bl	e1a90 <__aeabi_dmul>
   dc268:	4e86      	ldr	r6, [pc, #536]	; (dc484 <atan+0x35c>)
   dc26a:	4b87      	ldr	r3, [pc, #540]	; (dc488 <atan+0x360>)
   dc26c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dc270:	4456      	add	r6, sl
   dc272:	449a      	add	sl, r3
   dc274:	e9da 2300 	ldrd	r2, r3, [sl]
   dc278:	f005 fa56 	bl	e1728 <__aeabi_dsub>
   dc27c:	4622      	mov	r2, r4
   dc27e:	462b      	mov	r3, r5
   dc280:	f005 fa52 	bl	e1728 <__aeabi_dsub>
   dc284:	4602      	mov	r2, r0
   dc286:	460b      	mov	r3, r1
   dc288:	e9d6 0100 	ldrd	r0, r1, [r6]
   dc28c:	f005 fa4c 	bl	e1728 <__aeabi_dsub>
   dc290:	f1bb 0f00 	cmp.w	fp, #0
   dc294:	db52      	blt.n	dc33c <atan+0x214>
   dc296:	4604      	mov	r4, r0
   dc298:	460d      	mov	r5, r1
   dc29a:	ec45 4b10 	vmov	d0, r4, r5
   dc29e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2a2:	2c00      	cmp	r4, #0
   dc2a4:	f43f af50 	beq.w	dc148 <atan+0x20>
   dc2a8:	4622      	mov	r2, r4
   dc2aa:	462b      	mov	r3, r5
   dc2ac:	4620      	mov	r0, r4
   dc2ae:	4629      	mov	r1, r5
   dc2b0:	f005 fa3c 	bl	e172c <__adddf3>
   dc2b4:	4604      	mov	r4, r0
   dc2b6:	460d      	mov	r5, r1
   dc2b8:	ec45 4b10 	vmov	d0, r4, r5
   dc2bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2c0:	a369      	add	r3, pc, #420	; (adr r3, dc468 <atan+0x340>)
   dc2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc2c6:	ee10 0a10 	vmov	r0, s0
   dc2ca:	4629      	mov	r1, r5
   dc2cc:	f005 fa2e 	bl	e172c <__adddf3>
   dc2d0:	2200      	movs	r2, #0
   dc2d2:	4b6e      	ldr	r3, [pc, #440]	; (dc48c <atan+0x364>)
   dc2d4:	f005 fe6c 	bl	e1fb0 <__aeabi_dcmpgt>
   dc2d8:	2800      	cmp	r0, #0
   dc2da:	f43f af49 	beq.w	dc170 <atan+0x48>
   dc2de:	ec45 4b10 	vmov	d0, r4, r5
   dc2e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc2e6:	f000 f9cb 	bl	dc680 <fabs>
   dc2ea:	4b69      	ldr	r3, [pc, #420]	; (dc490 <atan+0x368>)
   dc2ec:	429e      	cmp	r6, r3
   dc2ee:	ec55 4b10 	vmov	r4, r5, d0
   dc2f2:	dc3f      	bgt.n	dc374 <atan+0x24c>
   dc2f4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dc2f8:	429e      	cmp	r6, r3
   dc2fa:	dc68      	bgt.n	dc3ce <atan+0x2a6>
   dc2fc:	ee10 2a10 	vmov	r2, s0
   dc300:	ee10 0a10 	vmov	r0, s0
   dc304:	462b      	mov	r3, r5
   dc306:	4629      	mov	r1, r5
   dc308:	f005 fa10 	bl	e172c <__adddf3>
   dc30c:	2200      	movs	r2, #0
   dc30e:	4b5f      	ldr	r3, [pc, #380]	; (dc48c <atan+0x364>)
   dc310:	f005 fa0a 	bl	e1728 <__aeabi_dsub>
   dc314:	2200      	movs	r2, #0
   dc316:	4606      	mov	r6, r0
   dc318:	460f      	mov	r7, r1
   dc31a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc31e:	4620      	mov	r0, r4
   dc320:	4629      	mov	r1, r5
   dc322:	f005 fa03 	bl	e172c <__adddf3>
   dc326:	4602      	mov	r2, r0
   dc328:	460b      	mov	r3, r1
   dc32a:	4630      	mov	r0, r6
   dc32c:	4639      	mov	r1, r7
   dc32e:	f005 fcd9 	bl	e1ce4 <__aeabi_ddiv>
   dc332:	f04f 0a00 	mov.w	sl, #0
   dc336:	4604      	mov	r4, r0
   dc338:	460d      	mov	r5, r1
   dc33a:	e71b      	b.n	dc174 <atan+0x4c>
   dc33c:	4604      	mov	r4, r0
   dc33e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dc342:	ec45 4b10 	vmov	d0, r4, r5
   dc346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc34a:	a549      	add	r5, pc, #292	; (adr r5, dc470 <atan+0x348>)
   dc34c:	e9d5 4500 	ldrd	r4, r5, [r5]
   dc350:	e7b2      	b.n	dc2b8 <atan+0x190>
   dc352:	4640      	mov	r0, r8
   dc354:	4649      	mov	r1, r9
   dc356:	f005 f9e9 	bl	e172c <__adddf3>
   dc35a:	4622      	mov	r2, r4
   dc35c:	462b      	mov	r3, r5
   dc35e:	f005 fb97 	bl	e1a90 <__aeabi_dmul>
   dc362:	4602      	mov	r2, r0
   dc364:	460b      	mov	r3, r1
   dc366:	4620      	mov	r0, r4
   dc368:	4629      	mov	r1, r5
   dc36a:	f005 f9dd 	bl	e1728 <__aeabi_dsub>
   dc36e:	4604      	mov	r4, r0
   dc370:	460d      	mov	r5, r1
   dc372:	e7a1      	b.n	dc2b8 <atan+0x190>
   dc374:	4b47      	ldr	r3, [pc, #284]	; (dc494 <atan+0x36c>)
   dc376:	429e      	cmp	r6, r3
   dc378:	dc1d      	bgt.n	dc3b6 <atan+0x28e>
   dc37a:	ee10 0a10 	vmov	r0, s0
   dc37e:	2200      	movs	r2, #0
   dc380:	4b45      	ldr	r3, [pc, #276]	; (dc498 <atan+0x370>)
   dc382:	4629      	mov	r1, r5
   dc384:	f005 f9d0 	bl	e1728 <__aeabi_dsub>
   dc388:	2200      	movs	r2, #0
   dc38a:	4606      	mov	r6, r0
   dc38c:	460f      	mov	r7, r1
   dc38e:	4b42      	ldr	r3, [pc, #264]	; (dc498 <atan+0x370>)
   dc390:	4620      	mov	r0, r4
   dc392:	4629      	mov	r1, r5
   dc394:	f005 fb7c 	bl	e1a90 <__aeabi_dmul>
   dc398:	2200      	movs	r2, #0
   dc39a:	4b3c      	ldr	r3, [pc, #240]	; (dc48c <atan+0x364>)
   dc39c:	f005 f9c6 	bl	e172c <__adddf3>
   dc3a0:	4602      	mov	r2, r0
   dc3a2:	460b      	mov	r3, r1
   dc3a4:	4630      	mov	r0, r6
   dc3a6:	4639      	mov	r1, r7
   dc3a8:	f005 fc9c 	bl	e1ce4 <__aeabi_ddiv>
   dc3ac:	f04f 0a02 	mov.w	sl, #2
   dc3b0:	4604      	mov	r4, r0
   dc3b2:	460d      	mov	r5, r1
   dc3b4:	e6de      	b.n	dc174 <atan+0x4c>
   dc3b6:	462b      	mov	r3, r5
   dc3b8:	ee10 2a10 	vmov	r2, s0
   dc3bc:	2000      	movs	r0, #0
   dc3be:	4937      	ldr	r1, [pc, #220]	; (dc49c <atan+0x374>)
   dc3c0:	f005 fc90 	bl	e1ce4 <__aeabi_ddiv>
   dc3c4:	f04f 0a03 	mov.w	sl, #3
   dc3c8:	4604      	mov	r4, r0
   dc3ca:	460d      	mov	r5, r1
   dc3cc:	e6d2      	b.n	dc174 <atan+0x4c>
   dc3ce:	ee10 0a10 	vmov	r0, s0
   dc3d2:	2200      	movs	r2, #0
   dc3d4:	4b2d      	ldr	r3, [pc, #180]	; (dc48c <atan+0x364>)
   dc3d6:	4629      	mov	r1, r5
   dc3d8:	f005 f9a6 	bl	e1728 <__aeabi_dsub>
   dc3dc:	2200      	movs	r2, #0
   dc3de:	4606      	mov	r6, r0
   dc3e0:	460f      	mov	r7, r1
   dc3e2:	4b2a      	ldr	r3, [pc, #168]	; (dc48c <atan+0x364>)
   dc3e4:	4620      	mov	r0, r4
   dc3e6:	4629      	mov	r1, r5
   dc3e8:	f005 f9a0 	bl	e172c <__adddf3>
   dc3ec:	4602      	mov	r2, r0
   dc3ee:	460b      	mov	r3, r1
   dc3f0:	4630      	mov	r0, r6
   dc3f2:	4639      	mov	r1, r7
   dc3f4:	f005 fc76 	bl	e1ce4 <__aeabi_ddiv>
   dc3f8:	f04f 0a01 	mov.w	sl, #1
   dc3fc:	4604      	mov	r4, r0
   dc3fe:	460d      	mov	r5, r1
   dc400:	e6b8      	b.n	dc174 <atan+0x4c>
   dc402:	bf00      	nop
   dc404:	f3af 8000 	nop.w
   dc408:	54442d18 	.word	0x54442d18
   dc40c:	3ff921fb 	.word	0x3ff921fb
   dc410:	e322da11 	.word	0xe322da11
   dc414:	3f90ad3a 	.word	0x3f90ad3a
   dc418:	24760deb 	.word	0x24760deb
   dc41c:	3fa97b4b 	.word	0x3fa97b4b
   dc420:	a0d03d51 	.word	0xa0d03d51
   dc424:	3fb10d66 	.word	0x3fb10d66
   dc428:	c54c206e 	.word	0xc54c206e
   dc42c:	3fb745cd 	.word	0x3fb745cd
   dc430:	920083ff 	.word	0x920083ff
   dc434:	3fc24924 	.word	0x3fc24924
   dc438:	5555550d 	.word	0x5555550d
   dc43c:	3fd55555 	.word	0x3fd55555
   dc440:	2c6a6c2f 	.word	0x2c6a6c2f
   dc444:	bfa2b444 	.word	0xbfa2b444
   dc448:	52defd9a 	.word	0x52defd9a
   dc44c:	3fadde2d 	.word	0x3fadde2d
   dc450:	af749a6d 	.word	0xaf749a6d
   dc454:	3fb3b0f2 	.word	0x3fb3b0f2
   dc458:	fe231671 	.word	0xfe231671
   dc45c:	3fbc71c6 	.word	0x3fbc71c6
   dc460:	9998ebc4 	.word	0x9998ebc4
   dc464:	3fc99999 	.word	0x3fc99999
   dc468:	8800759c 	.word	0x8800759c
   dc46c:	7e37e43c 	.word	0x7e37e43c
   dc470:	54442d18 	.word	0x54442d18
   dc474:	bff921fb 	.word	0xbff921fb
   dc478:	440fffff 	.word	0x440fffff
   dc47c:	7ff00000 	.word	0x7ff00000
   dc480:	3fdbffff 	.word	0x3fdbffff
   dc484:	000e69f8 	.word	0x000e69f8
   dc488:	000e69d8 	.word	0x000e69d8
   dc48c:	3ff00000 	.word	0x3ff00000
   dc490:	3ff2ffff 	.word	0x3ff2ffff
   dc494:	40037fff 	.word	0x40037fff
   dc498:	3ff80000 	.word	0x3ff80000
   dc49c:	bff00000 	.word	0xbff00000

000dc4a0 <ceil>:
   dc4a0:	ec51 0b10 	vmov	r0, r1, d0
   dc4a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc4ac:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc4b0:	2d13      	cmp	r5, #19
   dc4b2:	460c      	mov	r4, r1
   dc4b4:	460f      	mov	r7, r1
   dc4b6:	ee10 6a10 	vmov	r6, s0
   dc4ba:	dc22      	bgt.n	dc502 <ceil+0x62>
   dc4bc:	2d00      	cmp	r5, #0
   dc4be:	db52      	blt.n	dc566 <ceil+0xc6>
   dc4c0:	4b3d      	ldr	r3, [pc, #244]	; (dc5b8 <ceil+0x118>)
   dc4c2:	fa43 f805 	asr.w	r8, r3, r5
   dc4c6:	ea01 0308 	and.w	r3, r1, r8
   dc4ca:	4303      	orrs	r3, r0
   dc4cc:	d01e      	beq.n	dc50c <ceil+0x6c>
   dc4ce:	a338      	add	r3, pc, #224	; (adr r3, dc5b0 <ceil+0x110>)
   dc4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4d4:	f005 f92a 	bl	e172c <__adddf3>
   dc4d8:	2200      	movs	r2, #0
   dc4da:	2300      	movs	r3, #0
   dc4dc:	f005 fd68 	bl	e1fb0 <__aeabi_dcmpgt>
   dc4e0:	b148      	cbz	r0, dc4f6 <ceil+0x56>
   dc4e2:	2c00      	cmp	r4, #0
   dc4e4:	dd04      	ble.n	dc4f0 <ceil+0x50>
   dc4e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dc4ea:	fa43 f505 	asr.w	r5, r3, r5
   dc4ee:	442f      	add	r7, r5
   dc4f0:	ea27 0408 	bic.w	r4, r7, r8
   dc4f4:	2600      	movs	r6, #0
   dc4f6:	4623      	mov	r3, r4
   dc4f8:	4632      	mov	r2, r6
   dc4fa:	ec43 2b10 	vmov	d0, r2, r3
   dc4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc502:	2d33      	cmp	r5, #51	; 0x33
   dc504:	dd06      	ble.n	dc514 <ceil+0x74>
   dc506:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc50a:	d03e      	beq.n	dc58a <ceil+0xea>
   dc50c:	ec41 0b10 	vmov	d0, r0, r1
   dc510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc514:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc518:	f04f 38ff 	mov.w	r8, #4294967295
   dc51c:	fa28 f803 	lsr.w	r8, r8, r3
   dc520:	ea10 0f08 	tst.w	r0, r8
   dc524:	d0f2      	beq.n	dc50c <ceil+0x6c>
   dc526:	a322      	add	r3, pc, #136	; (adr r3, dc5b0 <ceil+0x110>)
   dc528:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc52c:	f005 f8fe 	bl	e172c <__adddf3>
   dc530:	2200      	movs	r2, #0
   dc532:	2300      	movs	r3, #0
   dc534:	f005 fd3c 	bl	e1fb0 <__aeabi_dcmpgt>
   dc538:	2800      	cmp	r0, #0
   dc53a:	d0dc      	beq.n	dc4f6 <ceil+0x56>
   dc53c:	2c00      	cmp	r4, #0
   dc53e:	dd09      	ble.n	dc554 <ceil+0xb4>
   dc540:	2d14      	cmp	r5, #20
   dc542:	d031      	beq.n	dc5a8 <ceil+0x108>
   dc544:	2301      	movs	r3, #1
   dc546:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dc54a:	fa03 f505 	lsl.w	r5, r3, r5
   dc54e:	19ae      	adds	r6, r5, r6
   dc550:	bf28      	it	cs
   dc552:	18ff      	addcs	r7, r7, r3
   dc554:	463c      	mov	r4, r7
   dc556:	ea26 0608 	bic.w	r6, r6, r8
   dc55a:	4623      	mov	r3, r4
   dc55c:	4632      	mov	r2, r6
   dc55e:	ec43 2b10 	vmov	d0, r2, r3
   dc562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc566:	a312      	add	r3, pc, #72	; (adr r3, dc5b0 <ceil+0x110>)
   dc568:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc56c:	f005 f8de 	bl	e172c <__adddf3>
   dc570:	2200      	movs	r2, #0
   dc572:	2300      	movs	r3, #0
   dc574:	f005 fd1c 	bl	e1fb0 <__aeabi_dcmpgt>
   dc578:	2800      	cmp	r0, #0
   dc57a:	d0bc      	beq.n	dc4f6 <ceil+0x56>
   dc57c:	2c00      	cmp	r4, #0
   dc57e:	db0f      	blt.n	dc5a0 <ceil+0x100>
   dc580:	4326      	orrs	r6, r4
   dc582:	d00b      	beq.n	dc59c <ceil+0xfc>
   dc584:	2600      	movs	r6, #0
   dc586:	4c0d      	ldr	r4, [pc, #52]	; (dc5bc <ceil+0x11c>)
   dc588:	e7b5      	b.n	dc4f6 <ceil+0x56>
   dc58a:	ee10 2a10 	vmov	r2, s0
   dc58e:	460b      	mov	r3, r1
   dc590:	f005 f8cc 	bl	e172c <__adddf3>
   dc594:	ec41 0b10 	vmov	d0, r0, r1
   dc598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc59c:	4634      	mov	r4, r6
   dc59e:	e7aa      	b.n	dc4f6 <ceil+0x56>
   dc5a0:	2600      	movs	r6, #0
   dc5a2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dc5a6:	e7a6      	b.n	dc4f6 <ceil+0x56>
   dc5a8:	3701      	adds	r7, #1
   dc5aa:	e7d3      	b.n	dc554 <ceil+0xb4>
   dc5ac:	f3af 8000 	nop.w
   dc5b0:	8800759c 	.word	0x8800759c
   dc5b4:	7e37e43c 	.word	0x7e37e43c
   dc5b8:	000fffff 	.word	0x000fffff
   dc5bc:	3ff00000 	.word	0x3ff00000

000dc5c0 <cos>:
   dc5c0:	b500      	push	{lr}
   dc5c2:	ec51 0b10 	vmov	r0, r1, d0
   dc5c6:	4a2c      	ldr	r2, [pc, #176]	; (dc678 <cos+0xb8>)
   dc5c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc5cc:	4293      	cmp	r3, r2
   dc5ce:	b085      	sub	sp, #20
   dc5d0:	dd20      	ble.n	dc614 <cos+0x54>
   dc5d2:	4a2a      	ldr	r2, [pc, #168]	; (dc67c <cos+0xbc>)
   dc5d4:	4293      	cmp	r3, r2
   dc5d6:	dd09      	ble.n	dc5ec <cos+0x2c>
   dc5d8:	ee10 2a10 	vmov	r2, s0
   dc5dc:	460b      	mov	r3, r1
   dc5de:	f005 f8a3 	bl	e1728 <__aeabi_dsub>
   dc5e2:	ec41 0b10 	vmov	d0, r0, r1
   dc5e6:	b005      	add	sp, #20
   dc5e8:	f85d fb04 	ldr.w	pc, [sp], #4
   dc5ec:	4668      	mov	r0, sp
   dc5ee:	f003 f91b 	bl	df828 <__ieee754_rem_pio2>
   dc5f2:	f000 0003 	and.w	r0, r0, #3
   dc5f6:	2801      	cmp	r0, #1
   dc5f8:	d028      	beq.n	dc64c <cos+0x8c>
   dc5fa:	2802      	cmp	r0, #2
   dc5fc:	d015      	beq.n	dc62a <cos+0x6a>
   dc5fe:	b360      	cbz	r0, dc65a <cos+0x9a>
   dc600:	2001      	movs	r0, #1
   dc602:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc606:	ed9d 0b00 	vldr	d0, [sp]
   dc60a:	f004 fa3d 	bl	e0a88 <__kernel_sin>
   dc60e:	ec51 0b10 	vmov	r0, r1, d0
   dc612:	e7e6      	b.n	dc5e2 <cos+0x22>
   dc614:	ed9f 1b16 	vldr	d1, [pc, #88]	; dc670 <cos+0xb0>
   dc618:	f003 fce2 	bl	dffe0 <__kernel_cos>
   dc61c:	ec51 0b10 	vmov	r0, r1, d0
   dc620:	ec41 0b10 	vmov	d0, r0, r1
   dc624:	b005      	add	sp, #20
   dc626:	f85d fb04 	ldr.w	pc, [sp], #4
   dc62a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc62e:	ed9d 0b00 	vldr	d0, [sp]
   dc632:	f003 fcd5 	bl	dffe0 <__kernel_cos>
   dc636:	ec53 2b10 	vmov	r2, r3, d0
   dc63a:	ee10 0a10 	vmov	r0, s0
   dc63e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc642:	ec41 0b10 	vmov	d0, r0, r1
   dc646:	b005      	add	sp, #20
   dc648:	f85d fb04 	ldr.w	pc, [sp], #4
   dc64c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc650:	ed9d 0b00 	vldr	d0, [sp]
   dc654:	f004 fa18 	bl	e0a88 <__kernel_sin>
   dc658:	e7ed      	b.n	dc636 <cos+0x76>
   dc65a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc65e:	ed9d 0b00 	vldr	d0, [sp]
   dc662:	f003 fcbd 	bl	dffe0 <__kernel_cos>
   dc666:	ec51 0b10 	vmov	r0, r1, d0
   dc66a:	e7ba      	b.n	dc5e2 <cos+0x22>
   dc66c:	f3af 8000 	nop.w
	...
   dc678:	3fe921fb 	.word	0x3fe921fb
   dc67c:	7fefffff 	.word	0x7fefffff

000dc680 <fabs>:
   dc680:	ec53 2b10 	vmov	r2, r3, d0
   dc684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc688:	ec43 2b10 	vmov	d0, r2, r3
   dc68c:	4770      	bx	lr
   dc68e:	bf00      	nop

000dc690 <floor>:
   dc690:	ec51 0b10 	vmov	r0, r1, d0
   dc694:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc69c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc6a0:	2d13      	cmp	r5, #19
   dc6a2:	460c      	mov	r4, r1
   dc6a4:	460f      	mov	r7, r1
   dc6a6:	ee10 6a10 	vmov	r6, s0
   dc6aa:	dc1d      	bgt.n	dc6e8 <floor+0x58>
   dc6ac:	2d00      	cmp	r5, #0
   dc6ae:	db43      	blt.n	dc738 <floor+0xa8>
   dc6b0:	4b3d      	ldr	r3, [pc, #244]	; (dc7a8 <floor+0x118>)
   dc6b2:	fa43 f805 	asr.w	r8, r3, r5
   dc6b6:	ea01 0308 	and.w	r3, r1, r8
   dc6ba:	4303      	orrs	r3, r0
   dc6bc:	d019      	beq.n	dc6f2 <floor+0x62>
   dc6be:	a338      	add	r3, pc, #224	; (adr r3, dc7a0 <floor+0x110>)
   dc6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc6c4:	f005 f832 	bl	e172c <__adddf3>
   dc6c8:	2200      	movs	r2, #0
   dc6ca:	2300      	movs	r3, #0
   dc6cc:	f005 fc70 	bl	e1fb0 <__aeabi_dcmpgt>
   dc6d0:	b120      	cbz	r0, dc6dc <floor+0x4c>
   dc6d2:	2c00      	cmp	r4, #0
   dc6d4:	db49      	blt.n	dc76a <floor+0xda>
   dc6d6:	ea27 0408 	bic.w	r4, r7, r8
   dc6da:	2600      	movs	r6, #0
   dc6dc:	4623      	mov	r3, r4
   dc6de:	4632      	mov	r2, r6
   dc6e0:	ec43 2b10 	vmov	d0, r2, r3
   dc6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc6e8:	2d33      	cmp	r5, #51	; 0x33
   dc6ea:	dd06      	ble.n	dc6fa <floor+0x6a>
   dc6ec:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc6f0:	d032      	beq.n	dc758 <floor+0xc8>
   dc6f2:	ec41 0b10 	vmov	d0, r0, r1
   dc6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc6fa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc6fe:	f04f 38ff 	mov.w	r8, #4294967295
   dc702:	fa28 f803 	lsr.w	r8, r8, r3
   dc706:	ea10 0f08 	tst.w	r0, r8
   dc70a:	d0f2      	beq.n	dc6f2 <floor+0x62>
   dc70c:	a324      	add	r3, pc, #144	; (adr r3, dc7a0 <floor+0x110>)
   dc70e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc712:	f005 f80b 	bl	e172c <__adddf3>
   dc716:	2200      	movs	r2, #0
   dc718:	2300      	movs	r3, #0
   dc71a:	f005 fc49 	bl	e1fb0 <__aeabi_dcmpgt>
   dc71e:	2800      	cmp	r0, #0
   dc720:	d0dc      	beq.n	dc6dc <floor+0x4c>
   dc722:	2c00      	cmp	r4, #0
   dc724:	db27      	blt.n	dc776 <floor+0xe6>
   dc726:	463c      	mov	r4, r7
   dc728:	ea26 0608 	bic.w	r6, r6, r8
   dc72c:	4623      	mov	r3, r4
   dc72e:	4632      	mov	r2, r6
   dc730:	ec43 2b10 	vmov	d0, r2, r3
   dc734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc738:	a319      	add	r3, pc, #100	; (adr r3, dc7a0 <floor+0x110>)
   dc73a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc73e:	f004 fff5 	bl	e172c <__adddf3>
   dc742:	2200      	movs	r2, #0
   dc744:	2300      	movs	r3, #0
   dc746:	f005 fc33 	bl	e1fb0 <__aeabi_dcmpgt>
   dc74a:	2800      	cmp	r0, #0
   dc74c:	d0c6      	beq.n	dc6dc <floor+0x4c>
   dc74e:	2c00      	cmp	r4, #0
   dc750:	db1c      	blt.n	dc78c <floor+0xfc>
   dc752:	2600      	movs	r6, #0
   dc754:	4634      	mov	r4, r6
   dc756:	e7c1      	b.n	dc6dc <floor+0x4c>
   dc758:	ee10 2a10 	vmov	r2, s0
   dc75c:	460b      	mov	r3, r1
   dc75e:	f004 ffe5 	bl	e172c <__adddf3>
   dc762:	ec41 0b10 	vmov	d0, r0, r1
   dc766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc76a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dc76e:	fa43 f505 	asr.w	r5, r3, r5
   dc772:	442f      	add	r7, r5
   dc774:	e7af      	b.n	dc6d6 <floor+0x46>
   dc776:	2d14      	cmp	r5, #20
   dc778:	d010      	beq.n	dc79c <floor+0x10c>
   dc77a:	2301      	movs	r3, #1
   dc77c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dc780:	fa03 f505 	lsl.w	r5, r3, r5
   dc784:	19ae      	adds	r6, r5, r6
   dc786:	bf28      	it	cs
   dc788:	18ff      	addcs	r7, r7, r3
   dc78a:	e7cc      	b.n	dc726 <floor+0x96>
   dc78c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dc790:	4b06      	ldr	r3, [pc, #24]	; (dc7ac <floor+0x11c>)
   dc792:	4332      	orrs	r2, r6
   dc794:	bf18      	it	ne
   dc796:	461c      	movne	r4, r3
   dc798:	2600      	movs	r6, #0
   dc79a:	e79f      	b.n	dc6dc <floor+0x4c>
   dc79c:	3701      	adds	r7, #1
   dc79e:	e7c2      	b.n	dc726 <floor+0x96>
   dc7a0:	8800759c 	.word	0x8800759c
   dc7a4:	7e37e43c 	.word	0x7e37e43c
   dc7a8:	000fffff 	.word	0x000fffff
   dc7ac:	bff00000 	.word	0xbff00000

000dc7b0 <sin>:
   dc7b0:	b500      	push	{lr}
   dc7b2:	ec51 0b10 	vmov	r0, r1, d0
   dc7b6:	4a2c      	ldr	r2, [pc, #176]	; (dc868 <sin+0xb8>)
   dc7b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc7bc:	4293      	cmp	r3, r2
   dc7be:	b085      	sub	sp, #20
   dc7c0:	dd27      	ble.n	dc812 <sin+0x62>
   dc7c2:	4a2a      	ldr	r2, [pc, #168]	; (dc86c <sin+0xbc>)
   dc7c4:	4293      	cmp	r3, r2
   dc7c6:	dd09      	ble.n	dc7dc <sin+0x2c>
   dc7c8:	ee10 2a10 	vmov	r2, s0
   dc7cc:	460b      	mov	r3, r1
   dc7ce:	f004 ffab 	bl	e1728 <__aeabi_dsub>
   dc7d2:	ec41 0b10 	vmov	d0, r0, r1
   dc7d6:	b005      	add	sp, #20
   dc7d8:	f85d fb04 	ldr.w	pc, [sp], #4
   dc7dc:	4668      	mov	r0, sp
   dc7de:	f003 f823 	bl	df828 <__ieee754_rem_pio2>
   dc7e2:	f000 0003 	and.w	r0, r0, #3
   dc7e6:	2801      	cmp	r0, #1
   dc7e8:	d027      	beq.n	dc83a <sin+0x8a>
   dc7ea:	2802      	cmp	r0, #2
   dc7ec:	d01d      	beq.n	dc82a <sin+0x7a>
   dc7ee:	b368      	cbz	r0, dc84c <sin+0x9c>
   dc7f0:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc7f4:	ed9d 0b00 	vldr	d0, [sp]
   dc7f8:	f003 fbf2 	bl	dffe0 <__kernel_cos>
   dc7fc:	ec53 2b10 	vmov	r2, r3, d0
   dc800:	ee10 0a10 	vmov	r0, s0
   dc804:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc808:	ec41 0b10 	vmov	d0, r0, r1
   dc80c:	b005      	add	sp, #20
   dc80e:	f85d fb04 	ldr.w	pc, [sp], #4
   dc812:	2000      	movs	r0, #0
   dc814:	ed9f 1b12 	vldr	d1, [pc, #72]	; dc860 <sin+0xb0>
   dc818:	f004 f936 	bl	e0a88 <__kernel_sin>
   dc81c:	ec51 0b10 	vmov	r0, r1, d0
   dc820:	ec41 0b10 	vmov	d0, r0, r1
   dc824:	b005      	add	sp, #20
   dc826:	f85d fb04 	ldr.w	pc, [sp], #4
   dc82a:	2001      	movs	r0, #1
   dc82c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc830:	ed9d 0b00 	vldr	d0, [sp]
   dc834:	f004 f928 	bl	e0a88 <__kernel_sin>
   dc838:	e7e0      	b.n	dc7fc <sin+0x4c>
   dc83a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc83e:	ed9d 0b00 	vldr	d0, [sp]
   dc842:	f003 fbcd 	bl	dffe0 <__kernel_cos>
   dc846:	ec51 0b10 	vmov	r0, r1, d0
   dc84a:	e7c2      	b.n	dc7d2 <sin+0x22>
   dc84c:	2001      	movs	r0, #1
   dc84e:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc852:	ed9d 0b00 	vldr	d0, [sp]
   dc856:	f004 f917 	bl	e0a88 <__kernel_sin>
   dc85a:	ec51 0b10 	vmov	r0, r1, d0
   dc85e:	e7b8      	b.n	dc7d2 <sin+0x22>
	...
   dc868:	3fe921fb 	.word	0x3fe921fb
   dc86c:	7fefffff 	.word	0x7fefffff

000dc870 <tan>:
   dc870:	b500      	push	{lr}
   dc872:	ec51 0b10 	vmov	r0, r1, d0
   dc876:	4a18      	ldr	r2, [pc, #96]	; (dc8d8 <tan+0x68>)
   dc878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc87c:	4293      	cmp	r3, r2
   dc87e:	b085      	sub	sp, #20
   dc880:	dd1d      	ble.n	dc8be <tan+0x4e>
   dc882:	4a16      	ldr	r2, [pc, #88]	; (dc8dc <tan+0x6c>)
   dc884:	4293      	cmp	r3, r2
   dc886:	dd09      	ble.n	dc89c <tan+0x2c>
   dc888:	ee10 2a10 	vmov	r2, s0
   dc88c:	460b      	mov	r3, r1
   dc88e:	f004 ff4b 	bl	e1728 <__aeabi_dsub>
   dc892:	ec41 0b10 	vmov	d0, r0, r1
   dc896:	b005      	add	sp, #20
   dc898:	f85d fb04 	ldr.w	pc, [sp], #4
   dc89c:	4668      	mov	r0, sp
   dc89e:	f002 ffc3 	bl	df828 <__ieee754_rem_pio2>
   dc8a2:	0040      	lsls	r0, r0, #1
   dc8a4:	f000 0002 	and.w	r0, r0, #2
   dc8a8:	f1c0 0001 	rsb	r0, r0, #1
   dc8ac:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc8b0:	ed9d 0b00 	vldr	d0, [sp]
   dc8b4:	f004 f9b4 	bl	e0c20 <__kernel_tan>
   dc8b8:	b005      	add	sp, #20
   dc8ba:	f85d fb04 	ldr.w	pc, [sp], #4
   dc8be:	2001      	movs	r0, #1
   dc8c0:	ed9f 1b03 	vldr	d1, [pc, #12]	; dc8d0 <tan+0x60>
   dc8c4:	f004 f9ac 	bl	e0c20 <__kernel_tan>
   dc8c8:	b005      	add	sp, #20
   dc8ca:	f85d fb04 	ldr.w	pc, [sp], #4
   dc8ce:	bf00      	nop
	...
   dc8d8:	3fe921fb 	.word	0x3fe921fb
   dc8dc:	7fefffff 	.word	0x7fefffff

000dc8e0 <tanh>:
   dc8e0:	b5d0      	push	{r4, r6, r7, lr}
   dc8e2:	ec57 6b10 	vmov	r6, r7, d0
   dc8e6:	4a42      	ldr	r2, [pc, #264]	; (dc9f0 <tanh+0x110>)
   dc8e8:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   dc8ec:	4293      	cmp	r3, r2
   dc8ee:	463c      	mov	r4, r7
   dc8f0:	dd10      	ble.n	dc914 <tanh+0x34>
   dc8f2:	2f00      	cmp	r7, #0
   dc8f4:	ee10 2a10 	vmov	r2, s0
   dc8f8:	463b      	mov	r3, r7
   dc8fa:	f04f 0000 	mov.w	r0, #0
   dc8fe:	493d      	ldr	r1, [pc, #244]	; (dc9f4 <tanh+0x114>)
   dc900:	db40      	blt.n	dc984 <tanh+0xa4>
   dc902:	f005 f9ef 	bl	e1ce4 <__aeabi_ddiv>
   dc906:	2200      	movs	r2, #0
   dc908:	4b3a      	ldr	r3, [pc, #232]	; (dc9f4 <tanh+0x114>)
   dc90a:	f004 ff0f 	bl	e172c <__adddf3>
   dc90e:	ec41 0b10 	vmov	d0, r0, r1
   dc912:	bdd0      	pop	{r4, r6, r7, pc}
   dc914:	4a38      	ldr	r2, [pc, #224]	; (dc9f8 <tanh+0x118>)
   dc916:	4293      	cmp	r3, r2
   dc918:	dd0a      	ble.n	dc930 <tanh+0x50>
   dc91a:	4b36      	ldr	r3, [pc, #216]	; (dc9f4 <tanh+0x114>)
   dc91c:	2200      	movs	r2, #0
   dc91e:	2c00      	cmp	r4, #0
   dc920:	4610      	mov	r0, r2
   dc922:	bfb4      	ite	lt
   dc924:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   dc928:	4619      	movge	r1, r3
   dc92a:	ec41 0b10 	vmov	d0, r0, r1
   dc92e:	bdd0      	pop	{r4, r6, r7, pc}
   dc930:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   dc934:	db2f      	blt.n	dc996 <tanh+0xb6>
   dc936:	4a31      	ldr	r2, [pc, #196]	; (dc9fc <tanh+0x11c>)
   dc938:	4293      	cmp	r3, r2
   dc93a:	dd38      	ble.n	dc9ae <tanh+0xce>
   dc93c:	f7ff fea0 	bl	dc680 <fabs>
   dc940:	ec53 2b10 	vmov	r2, r3, d0
   dc944:	ee10 0a10 	vmov	r0, s0
   dc948:	4619      	mov	r1, r3
   dc94a:	f004 feef 	bl	e172c <__adddf3>
   dc94e:	ec41 0b10 	vmov	d0, r0, r1
   dc952:	f004 fb49 	bl	e0fe8 <expm1>
   dc956:	2200      	movs	r2, #0
   dc958:	ec51 0b10 	vmov	r0, r1, d0
   dc95c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc960:	f004 fee4 	bl	e172c <__adddf3>
   dc964:	4602      	mov	r2, r0
   dc966:	460b      	mov	r3, r1
   dc968:	2000      	movs	r0, #0
   dc96a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   dc96e:	f005 f9b9 	bl	e1ce4 <__aeabi_ddiv>
   dc972:	4602      	mov	r2, r0
   dc974:	460b      	mov	r3, r1
   dc976:	2000      	movs	r0, #0
   dc978:	491e      	ldr	r1, [pc, #120]	; (dc9f4 <tanh+0x114>)
   dc97a:	f004 fed5 	bl	e1728 <__aeabi_dsub>
   dc97e:	4602      	mov	r2, r0
   dc980:	460b      	mov	r3, r1
   dc982:	e7cc      	b.n	dc91e <tanh+0x3e>
   dc984:	f005 f9ae 	bl	e1ce4 <__aeabi_ddiv>
   dc988:	2200      	movs	r2, #0
   dc98a:	4b1a      	ldr	r3, [pc, #104]	; (dc9f4 <tanh+0x114>)
   dc98c:	f004 fecc 	bl	e1728 <__aeabi_dsub>
   dc990:	ec41 0b10 	vmov	d0, r0, r1
   dc994:	bdd0      	pop	{r4, r6, r7, pc}
   dc996:	2200      	movs	r2, #0
   dc998:	4b16      	ldr	r3, [pc, #88]	; (dc9f4 <tanh+0x114>)
   dc99a:	ee10 0a10 	vmov	r0, s0
   dc99e:	4639      	mov	r1, r7
   dc9a0:	f004 fec4 	bl	e172c <__adddf3>
   dc9a4:	4632      	mov	r2, r6
   dc9a6:	463b      	mov	r3, r7
   dc9a8:	f005 f872 	bl	e1a90 <__aeabi_dmul>
   dc9ac:	e7af      	b.n	dc90e <tanh+0x2e>
   dc9ae:	f7ff fe67 	bl	dc680 <fabs>
   dc9b2:	2200      	movs	r2, #0
   dc9b4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   dc9b8:	ec51 0b10 	vmov	r0, r1, d0
   dc9bc:	f005 f868 	bl	e1a90 <__aeabi_dmul>
   dc9c0:	ec41 0b10 	vmov	d0, r0, r1
   dc9c4:	f004 fb10 	bl	e0fe8 <expm1>
   dc9c8:	ec51 0b10 	vmov	r0, r1, d0
   dc9cc:	2200      	movs	r2, #0
   dc9ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc9d2:	ee10 6a10 	vmov	r6, s0
   dc9d6:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   dc9da:	f004 fea7 	bl	e172c <__adddf3>
   dc9de:	4602      	mov	r2, r0
   dc9e0:	460b      	mov	r3, r1
   dc9e2:	4630      	mov	r0, r6
   dc9e4:	4639      	mov	r1, r7
   dc9e6:	f005 f97d 	bl	e1ce4 <__aeabi_ddiv>
   dc9ea:	4602      	mov	r2, r0
   dc9ec:	460b      	mov	r3, r1
   dc9ee:	e796      	b.n	dc91e <tanh+0x3e>
   dc9f0:	7fefffff 	.word	0x7fefffff
   dc9f4:	3ff00000 	.word	0x3ff00000
   dc9f8:	4035ffff 	.word	0x4035ffff
   dc9fc:	3fefffff 	.word	0x3fefffff

000dca00 <acos>:
   dca00:	b530      	push	{r4, r5, lr}
   dca02:	ed2d 8b04 	vpush	{d8-d9}
   dca06:	eeb0 8a40 	vmov.f32	s16, s0
   dca0a:	eef0 8a60 	vmov.f32	s17, s1
   dca0e:	4c29      	ldr	r4, [pc, #164]	; (dcab4 <acos+0xb4>)
   dca10:	b08b      	sub	sp, #44	; 0x2c
   dca12:	f000 fd99 	bl	dd548 <__ieee754_acos>
   dca16:	f994 3000 	ldrsb.w	r3, [r4]
   dca1a:	eeb0 9a40 	vmov.f32	s18, s0
   dca1e:	eef0 9a60 	vmov.f32	s19, s1
   dca22:	3301      	adds	r3, #1
   dca24:	d032      	beq.n	dca8c <acos+0x8c>
   dca26:	ec53 2b18 	vmov	r2, r3, d8
   dca2a:	ec51 0b18 	vmov	r0, r1, d8
   dca2e:	f005 fac9 	bl	e1fc4 <__aeabi_dcmpun>
   dca32:	4605      	mov	r5, r0
   dca34:	bb50      	cbnz	r0, dca8c <acos+0x8c>
   dca36:	eeb0 0a48 	vmov.f32	s0, s16
   dca3a:	eef0 0a68 	vmov.f32	s1, s17
   dca3e:	f7ff fe1f 	bl	dc680 <fabs>
   dca42:	2200      	movs	r2, #0
   dca44:	4b1c      	ldr	r3, [pc, #112]	; (dcab8 <acos+0xb8>)
   dca46:	ec51 0b10 	vmov	r0, r1, d0
   dca4a:	f005 fab1 	bl	e1fb0 <__aeabi_dcmpgt>
   dca4e:	b1e8      	cbz	r0, dca8c <acos+0x8c>
   dca50:	4b1a      	ldr	r3, [pc, #104]	; (dcabc <acos+0xbc>)
   dca52:	481b      	ldr	r0, [pc, #108]	; (dcac0 <acos+0xc0>)
   dca54:	9508      	str	r5, [sp, #32]
   dca56:	2201      	movs	r2, #1
   dca58:	e88d 000c 	stmia.w	sp, {r2, r3}
   dca5c:	ed8d 8b04 	vstr	d8, [sp, #16]
   dca60:	ed8d 8b02 	vstr	d8, [sp, #8]
   dca64:	f004 fd2c 	bl	e14c0 <nan>
   dca68:	f994 3000 	ldrsb.w	r3, [r4]
   dca6c:	2b02      	cmp	r3, #2
   dca6e:	ed8d 0b06 	vstr	d0, [sp, #24]
   dca72:	d013      	beq.n	dca9c <acos+0x9c>
   dca74:	4668      	mov	r0, sp
   dca76:	f004 fd21 	bl	e14bc <matherr>
   dca7a:	b178      	cbz	r0, dca9c <acos+0x9c>
   dca7c:	9b08      	ldr	r3, [sp, #32]
   dca7e:	b9a3      	cbnz	r3, dcaaa <acos+0xaa>
   dca80:	ed9d 0b06 	vldr	d0, [sp, #24]
   dca84:	b00b      	add	sp, #44	; 0x2c
   dca86:	ecbd 8b04 	vpop	{d8-d9}
   dca8a:	bd30      	pop	{r4, r5, pc}
   dca8c:	eeb0 0a49 	vmov.f32	s0, s18
   dca90:	eef0 0a69 	vmov.f32	s1, s19
   dca94:	b00b      	add	sp, #44	; 0x2c
   dca96:	ecbd 8b04 	vpop	{d8-d9}
   dca9a:	bd30      	pop	{r4, r5, pc}
   dca9c:	f7fc ff9a 	bl	d99d4 <__errno>
   dcaa0:	2321      	movs	r3, #33	; 0x21
   dcaa2:	6003      	str	r3, [r0, #0]
   dcaa4:	9b08      	ldr	r3, [sp, #32]
   dcaa6:	2b00      	cmp	r3, #0
   dcaa8:	d0ea      	beq.n	dca80 <acos+0x80>
   dcaaa:	f7fc ff93 	bl	d99d4 <__errno>
   dcaae:	9b08      	ldr	r3, [sp, #32]
   dcab0:	6003      	str	r3, [r0, #0]
   dcab2:	e7e5      	b.n	dca80 <acos+0x80>
   dcab4:	2003d5c0 	.word	0x2003d5c0
   dcab8:	3ff00000 	.word	0x3ff00000
   dcabc:	000e6a18 	.word	0x000e6a18
   dcac0:	000e6a38 	.word	0x000e6a38

000dcac4 <asin>:
   dcac4:	b530      	push	{r4, r5, lr}
   dcac6:	ed2d 8b04 	vpush	{d8-d9}
   dcaca:	eeb0 8a40 	vmov.f32	s16, s0
   dcace:	eef0 8a60 	vmov.f32	s17, s1
   dcad2:	4c29      	ldr	r4, [pc, #164]	; (dcb78 <asin+0xb4>)
   dcad4:	b08b      	sub	sp, #44	; 0x2c
   dcad6:	f000 ffa7 	bl	dda28 <__ieee754_asin>
   dcada:	f994 3000 	ldrsb.w	r3, [r4]
   dcade:	eeb0 9a40 	vmov.f32	s18, s0
   dcae2:	eef0 9a60 	vmov.f32	s19, s1
   dcae6:	3301      	adds	r3, #1
   dcae8:	d032      	beq.n	dcb50 <asin+0x8c>
   dcaea:	ec53 2b18 	vmov	r2, r3, d8
   dcaee:	ec51 0b18 	vmov	r0, r1, d8
   dcaf2:	f005 fa67 	bl	e1fc4 <__aeabi_dcmpun>
   dcaf6:	4605      	mov	r5, r0
   dcaf8:	bb50      	cbnz	r0, dcb50 <asin+0x8c>
   dcafa:	eeb0 0a48 	vmov.f32	s0, s16
   dcafe:	eef0 0a68 	vmov.f32	s1, s17
   dcb02:	f7ff fdbd 	bl	dc680 <fabs>
   dcb06:	2200      	movs	r2, #0
   dcb08:	4b1c      	ldr	r3, [pc, #112]	; (dcb7c <asin+0xb8>)
   dcb0a:	ec51 0b10 	vmov	r0, r1, d0
   dcb0e:	f005 fa4f 	bl	e1fb0 <__aeabi_dcmpgt>
   dcb12:	b1e8      	cbz	r0, dcb50 <asin+0x8c>
   dcb14:	4b1a      	ldr	r3, [pc, #104]	; (dcb80 <asin+0xbc>)
   dcb16:	481b      	ldr	r0, [pc, #108]	; (dcb84 <asin+0xc0>)
   dcb18:	9508      	str	r5, [sp, #32]
   dcb1a:	2201      	movs	r2, #1
   dcb1c:	e88d 000c 	stmia.w	sp, {r2, r3}
   dcb20:	ed8d 8b04 	vstr	d8, [sp, #16]
   dcb24:	ed8d 8b02 	vstr	d8, [sp, #8]
   dcb28:	f004 fcca 	bl	e14c0 <nan>
   dcb2c:	f994 3000 	ldrsb.w	r3, [r4]
   dcb30:	2b02      	cmp	r3, #2
   dcb32:	ed8d 0b06 	vstr	d0, [sp, #24]
   dcb36:	d013      	beq.n	dcb60 <asin+0x9c>
   dcb38:	4668      	mov	r0, sp
   dcb3a:	f004 fcbf 	bl	e14bc <matherr>
   dcb3e:	b178      	cbz	r0, dcb60 <asin+0x9c>
   dcb40:	9b08      	ldr	r3, [sp, #32]
   dcb42:	b9a3      	cbnz	r3, dcb6e <asin+0xaa>
   dcb44:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcb48:	b00b      	add	sp, #44	; 0x2c
   dcb4a:	ecbd 8b04 	vpop	{d8-d9}
   dcb4e:	bd30      	pop	{r4, r5, pc}
   dcb50:	eeb0 0a49 	vmov.f32	s0, s18
   dcb54:	eef0 0a69 	vmov.f32	s1, s19
   dcb58:	b00b      	add	sp, #44	; 0x2c
   dcb5a:	ecbd 8b04 	vpop	{d8-d9}
   dcb5e:	bd30      	pop	{r4, r5, pc}
   dcb60:	f7fc ff38 	bl	d99d4 <__errno>
   dcb64:	2321      	movs	r3, #33	; 0x21
   dcb66:	6003      	str	r3, [r0, #0]
   dcb68:	9b08      	ldr	r3, [sp, #32]
   dcb6a:	2b00      	cmp	r3, #0
   dcb6c:	d0ea      	beq.n	dcb44 <asin+0x80>
   dcb6e:	f7fc ff31 	bl	d99d4 <__errno>
   dcb72:	9b08      	ldr	r3, [sp, #32]
   dcb74:	6003      	str	r3, [r0, #0]
   dcb76:	e7e5      	b.n	dcb44 <asin+0x80>
   dcb78:	2003d5c0 	.word	0x2003d5c0
   dcb7c:	3ff00000 	.word	0x3ff00000
   dcb80:	000e6a20 	.word	0x000e6a20
   dcb84:	000e6a38 	.word	0x000e6a38

000dcb88 <atan2>:
   dcb88:	f001 b99e 	b.w	ddec8 <__ieee754_atan2>
   dcb8c:	0000      	movs	r0, r0
	...

000dcb90 <cosh>:
   dcb90:	b530      	push	{r4, r5, lr}
   dcb92:	ed2d 8b04 	vpush	{d8-d9}
   dcb96:	eeb0 8a40 	vmov.f32	s16, s0
   dcb9a:	eef0 8a60 	vmov.f32	s17, s1
   dcb9e:	4c2e      	ldr	r4, [pc, #184]	; (dcc58 <cosh+0xc8>)
   dcba0:	b08b      	sub	sp, #44	; 0x2c
   dcba2:	f001 fa89 	bl	de0b8 <__ieee754_cosh>
   dcba6:	f994 3000 	ldrsb.w	r3, [r4]
   dcbaa:	eeb0 9a40 	vmov.f32	s18, s0
   dcbae:	eef0 9a60 	vmov.f32	s19, s1
   dcbb2:	3301      	adds	r3, #1
   dcbb4:	d032      	beq.n	dcc1c <cosh+0x8c>
   dcbb6:	ec53 2b18 	vmov	r2, r3, d8
   dcbba:	ec51 0b18 	vmov	r0, r1, d8
   dcbbe:	f005 fa01 	bl	e1fc4 <__aeabi_dcmpun>
   dcbc2:	4605      	mov	r5, r0
   dcbc4:	bb50      	cbnz	r0, dcc1c <cosh+0x8c>
   dcbc6:	eeb0 0a48 	vmov.f32	s0, s16
   dcbca:	eef0 0a68 	vmov.f32	s1, s17
   dcbce:	f7ff fd57 	bl	dc680 <fabs>
   dcbd2:	a31f      	add	r3, pc, #124	; (adr r3, dcc50 <cosh+0xc0>)
   dcbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcbd8:	ec51 0b10 	vmov	r0, r1, d0
   dcbdc:	f005 f9e8 	bl	e1fb0 <__aeabi_dcmpgt>
   dcbe0:	b1e0      	cbz	r0, dcc1c <cosh+0x8c>
   dcbe2:	4a1e      	ldr	r2, [pc, #120]	; (dcc5c <cosh+0xcc>)
   dcbe4:	f994 3000 	ldrsb.w	r3, [r4]
   dcbe8:	9508      	str	r5, [sp, #32]
   dcbea:	2103      	movs	r1, #3
   dcbec:	ed8d 8b04 	vstr	d8, [sp, #16]
   dcbf0:	ed8d 8b02 	vstr	d8, [sp, #8]
   dcbf4:	e88d 0006 	stmia.w	sp, {r1, r2}
   dcbf8:	b9c3      	cbnz	r3, dcc2c <cosh+0x9c>
   dcbfa:	4b19      	ldr	r3, [pc, #100]	; (dcc60 <cosh+0xd0>)
   dcbfc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dcc00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dcc04:	4668      	mov	r0, sp
   dcc06:	f004 fc59 	bl	e14bc <matherr>
   dcc0a:	b1a8      	cbz	r0, dcc38 <cosh+0xa8>
   dcc0c:	9b08      	ldr	r3, [sp, #32]
   dcc0e:	b9d3      	cbnz	r3, dcc46 <cosh+0xb6>
   dcc10:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcc14:	b00b      	add	sp, #44	; 0x2c
   dcc16:	ecbd 8b04 	vpop	{d8-d9}
   dcc1a:	bd30      	pop	{r4, r5, pc}
   dcc1c:	eeb0 0a49 	vmov.f32	s0, s18
   dcc20:	eef0 0a69 	vmov.f32	s1, s19
   dcc24:	b00b      	add	sp, #44	; 0x2c
   dcc26:	ecbd 8b04 	vpop	{d8-d9}
   dcc2a:	bd30      	pop	{r4, r5, pc}
   dcc2c:	490d      	ldr	r1, [pc, #52]	; (dcc64 <cosh+0xd4>)
   dcc2e:	2000      	movs	r0, #0
   dcc30:	2b02      	cmp	r3, #2
   dcc32:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dcc36:	d1e5      	bne.n	dcc04 <cosh+0x74>
   dcc38:	f7fc fecc 	bl	d99d4 <__errno>
   dcc3c:	2322      	movs	r3, #34	; 0x22
   dcc3e:	6003      	str	r3, [r0, #0]
   dcc40:	9b08      	ldr	r3, [sp, #32]
   dcc42:	2b00      	cmp	r3, #0
   dcc44:	d0e4      	beq.n	dcc10 <cosh+0x80>
   dcc46:	f7fc fec5 	bl	d99d4 <__errno>
   dcc4a:	9b08      	ldr	r3, [sp, #32]
   dcc4c:	6003      	str	r3, [r0, #0]
   dcc4e:	e7df      	b.n	dcc10 <cosh+0x80>
   dcc50:	8fb9f87d 	.word	0x8fb9f87d
   dcc54:	408633ce 	.word	0x408633ce
   dcc58:	2003d5c0 	.word	0x2003d5c0
   dcc5c:	000e6a28 	.word	0x000e6a28
   dcc60:	47efffff 	.word	0x47efffff
   dcc64:	7ff00000 	.word	0x7ff00000

000dcc68 <exp>:
   dcc68:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcc6a:	ed2d 8b04 	vpush	{d8-d9}
   dcc6e:	eeb0 9a40 	vmov.f32	s18, s0
   dcc72:	eef0 9a60 	vmov.f32	s19, s1
   dcc76:	4c3a      	ldr	r4, [pc, #232]	; (dcd60 <exp+0xf8>)
   dcc78:	b08b      	sub	sp, #44	; 0x2c
   dcc7a:	f001 fad9 	bl	de230 <__ieee754_exp>
   dcc7e:	f994 3000 	ldrsb.w	r3, [r4]
   dcc82:	eeb0 8a40 	vmov.f32	s16, s0
   dcc86:	eef0 8a60 	vmov.f32	s17, s1
   dcc8a:	3301      	adds	r3, #1
   dcc8c:	d038      	beq.n	dcd00 <exp+0x98>
   dcc8e:	eeb0 0a49 	vmov.f32	s0, s18
   dcc92:	eef0 0a69 	vmov.f32	s1, s19
   dcc96:	f004 fc09 	bl	e14ac <finite>
   dcc9a:	b388      	cbz	r0, dcd00 <exp+0x98>
   dcc9c:	a32c      	add	r3, pc, #176	; (adr r3, dcd50 <exp+0xe8>)
   dcc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcca2:	ec51 0b19 	vmov	r0, r1, d9
   dcca6:	f005 f983 	bl	e1fb0 <__aeabi_dcmpgt>
   dccaa:	4605      	mov	r5, r0
   dccac:	bb80      	cbnz	r0, dcd10 <exp+0xa8>
   dccae:	a32a      	add	r3, pc, #168	; (adr r3, dcd58 <exp+0xf0>)
   dccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dccb4:	ec51 0b19 	vmov	r0, r1, d9
   dccb8:	f005 f95c 	bl	e1f74 <__aeabi_dcmplt>
   dccbc:	b300      	cbz	r0, dcd00 <exp+0x98>
   dccbe:	f994 3000 	ldrsb.w	r3, [r4]
   dccc2:	4a28      	ldr	r2, [pc, #160]	; (dcd64 <exp+0xfc>)
   dccc4:	9508      	str	r5, [sp, #32]
   dccc6:	2600      	movs	r6, #0
   dccc8:	2700      	movs	r7, #0
   dccca:	2104      	movs	r1, #4
   dcccc:	2b02      	cmp	r3, #2
   dccce:	ed8d 9b04 	vstr	d9, [sp, #16]
   dccd2:	ed8d 9b02 	vstr	d9, [sp, #8]
   dccd6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dccda:	e88d 0006 	stmia.w	sp, {r1, r2}
   dccde:	d030      	beq.n	dcd42 <exp+0xda>
   dcce0:	4668      	mov	r0, sp
   dcce2:	f004 fbeb 	bl	e14bc <matherr>
   dcce6:	b360      	cbz	r0, dcd42 <exp+0xda>
   dcce8:	9b08      	ldr	r3, [sp, #32]
   dccea:	b11b      	cbz	r3, dccf4 <exp+0x8c>
   dccec:	f7fc fe72 	bl	d99d4 <__errno>
   dccf0:	9b08      	ldr	r3, [sp, #32]
   dccf2:	6003      	str	r3, [r0, #0]
   dccf4:	ed9d 0b06 	vldr	d0, [sp, #24]
   dccf8:	b00b      	add	sp, #44	; 0x2c
   dccfa:	ecbd 8b04 	vpop	{d8-d9}
   dccfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcd00:	eeb0 0a48 	vmov.f32	s0, s16
   dcd04:	eef0 0a68 	vmov.f32	s1, s17
   dcd08:	b00b      	add	sp, #44	; 0x2c
   dcd0a:	ecbd 8b04 	vpop	{d8-d9}
   dcd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcd10:	4a14      	ldr	r2, [pc, #80]	; (dcd64 <exp+0xfc>)
   dcd12:	f994 3000 	ldrsb.w	r3, [r4]
   dcd16:	9201      	str	r2, [sp, #4]
   dcd18:	2103      	movs	r1, #3
   dcd1a:	2200      	movs	r2, #0
   dcd1c:	ed8d 9b04 	vstr	d9, [sp, #16]
   dcd20:	ed8d 9b02 	vstr	d9, [sp, #8]
   dcd24:	9100      	str	r1, [sp, #0]
   dcd26:	9208      	str	r2, [sp, #32]
   dcd28:	b92b      	cbnz	r3, dcd36 <exp+0xce>
   dcd2a:	4b0f      	ldr	r3, [pc, #60]	; (dcd68 <exp+0x100>)
   dcd2c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dcd30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dcd34:	e7d4      	b.n	dcce0 <exp+0x78>
   dcd36:	490d      	ldr	r1, [pc, #52]	; (dcd6c <exp+0x104>)
   dcd38:	2000      	movs	r0, #0
   dcd3a:	2b02      	cmp	r3, #2
   dcd3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dcd40:	d1ce      	bne.n	dcce0 <exp+0x78>
   dcd42:	f7fc fe47 	bl	d99d4 <__errno>
   dcd46:	2322      	movs	r3, #34	; 0x22
   dcd48:	6003      	str	r3, [r0, #0]
   dcd4a:	e7cd      	b.n	dcce8 <exp+0x80>
   dcd4c:	f3af 8000 	nop.w
   dcd50:	fefa39ef 	.word	0xfefa39ef
   dcd54:	40862e42 	.word	0x40862e42
   dcd58:	d52d3051 	.word	0xd52d3051
   dcd5c:	c0874910 	.word	0xc0874910
   dcd60:	2003d5c0 	.word	0x2003d5c0
   dcd64:	000e6a30 	.word	0x000e6a30
   dcd68:	47efffff 	.word	0x47efffff
   dcd6c:	7ff00000 	.word	0x7ff00000

000dcd70 <fmod>:
   dcd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcd74:	ed2d 8b02 	vpush	{d8}
   dcd78:	b08b      	sub	sp, #44	; 0x2c
   dcd7a:	ec57 6b10 	vmov	r6, r7, d0
   dcd7e:	ec55 4b11 	vmov	r4, r5, d1
   dcd82:	f001 fbe7 	bl	de554 <__ieee754_fmod>
   dcd86:	4b2e      	ldr	r3, [pc, #184]	; (dce40 <fmod+0xd0>)
   dcd88:	eeb0 8a40 	vmov.f32	s16, s0
   dcd8c:	eef0 8a60 	vmov.f32	s17, s1
   dcd90:	f993 8000 	ldrsb.w	r8, [r3]
   dcd94:	f1b8 3fff 	cmp.w	r8, #4294967295
   dcd98:	d031      	beq.n	dcdfe <fmod+0x8e>
   dcd9a:	4622      	mov	r2, r4
   dcd9c:	462b      	mov	r3, r5
   dcd9e:	4620      	mov	r0, r4
   dcda0:	4629      	mov	r1, r5
   dcda2:	f005 f90f 	bl	e1fc4 <__aeabi_dcmpun>
   dcda6:	bb50      	cbnz	r0, dcdfe <fmod+0x8e>
   dcda8:	4632      	mov	r2, r6
   dcdaa:	463b      	mov	r3, r7
   dcdac:	4630      	mov	r0, r6
   dcdae:	4639      	mov	r1, r7
   dcdb0:	f005 f908 	bl	e1fc4 <__aeabi_dcmpun>
   dcdb4:	4681      	mov	r9, r0
   dcdb6:	bb10      	cbnz	r0, dcdfe <fmod+0x8e>
   dcdb8:	2200      	movs	r2, #0
   dcdba:	2300      	movs	r3, #0
   dcdbc:	4620      	mov	r0, r4
   dcdbe:	4629      	mov	r1, r5
   dcdc0:	f005 f8ce 	bl	e1f60 <__aeabi_dcmpeq>
   dcdc4:	b1d8      	cbz	r0, dcdfe <fmod+0x8e>
   dcdc6:	4b1f      	ldr	r3, [pc, #124]	; (dce44 <fmod+0xd4>)
   dcdc8:	f8cd 9020 	str.w	r9, [sp, #32]
   dcdcc:	2201      	movs	r2, #1
   dcdce:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dcdd2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dcdd6:	e88d 000c 	stmia.w	sp, {r2, r3}
   dcdda:	f1b8 0f00 	cmp.w	r8, #0
   dcdde:	d117      	bne.n	dce10 <fmod+0xa0>
   dcde0:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dcde4:	4668      	mov	r0, sp
   dcde6:	f004 fb69 	bl	e14bc <matherr>
   dcdea:	b1e0      	cbz	r0, dce26 <fmod+0xb6>
   dcdec:	9b08      	ldr	r3, [sp, #32]
   dcdee:	bb0b      	cbnz	r3, dce34 <fmod+0xc4>
   dcdf0:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcdf4:	b00b      	add	sp, #44	; 0x2c
   dcdf6:	ecbd 8b02 	vpop	{d8}
   dcdfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcdfe:	eeb0 0a48 	vmov.f32	s0, s16
   dce02:	eef0 0a68 	vmov.f32	s1, s17
   dce06:	b00b      	add	sp, #44	; 0x2c
   dce08:	ecbd 8b02 	vpop	{d8}
   dce0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dce10:	2200      	movs	r2, #0
   dce12:	2300      	movs	r3, #0
   dce14:	4610      	mov	r0, r2
   dce16:	4619      	mov	r1, r3
   dce18:	f004 ff64 	bl	e1ce4 <__aeabi_ddiv>
   dce1c:	f1b8 0f02 	cmp.w	r8, #2
   dce20:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dce24:	d1de      	bne.n	dcde4 <fmod+0x74>
   dce26:	f7fc fdd5 	bl	d99d4 <__errno>
   dce2a:	2321      	movs	r3, #33	; 0x21
   dce2c:	6003      	str	r3, [r0, #0]
   dce2e:	9b08      	ldr	r3, [sp, #32]
   dce30:	2b00      	cmp	r3, #0
   dce32:	d0dd      	beq.n	dcdf0 <fmod+0x80>
   dce34:	f7fc fdce 	bl	d99d4 <__errno>
   dce38:	9b08      	ldr	r3, [sp, #32]
   dce3a:	6003      	str	r3, [r0, #0]
   dce3c:	e7d8      	b.n	dcdf0 <fmod+0x80>
   dce3e:	bf00      	nop
   dce40:	2003d5c0 	.word	0x2003d5c0
   dce44:	000e6a34 	.word	0x000e6a34

000dce48 <log>:
   dce48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dce4c:	ed2d 8b02 	vpush	{d8}
   dce50:	b08b      	sub	sp, #44	; 0x2c
   dce52:	ec55 4b10 	vmov	r4, r5, d0
   dce56:	f001 fcb7 	bl	de7c8 <__ieee754_log>
   dce5a:	4b3a      	ldr	r3, [pc, #232]	; (dcf44 <log+0xfc>)
   dce5c:	eeb0 8a40 	vmov.f32	s16, s0
   dce60:	eef0 8a60 	vmov.f32	s17, s1
   dce64:	f993 6000 	ldrsb.w	r6, [r3]
   dce68:	1c73      	adds	r3, r6, #1
   dce6a:	d00d      	beq.n	dce88 <log+0x40>
   dce6c:	4622      	mov	r2, r4
   dce6e:	462b      	mov	r3, r5
   dce70:	4620      	mov	r0, r4
   dce72:	4629      	mov	r1, r5
   dce74:	f005 f8a6 	bl	e1fc4 <__aeabi_dcmpun>
   dce78:	b930      	cbnz	r0, dce88 <log+0x40>
   dce7a:	2200      	movs	r2, #0
   dce7c:	2300      	movs	r3, #0
   dce7e:	4620      	mov	r0, r4
   dce80:	4629      	mov	r1, r5
   dce82:	f005 f895 	bl	e1fb0 <__aeabi_dcmpgt>
   dce86:	b140      	cbz	r0, dce9a <log+0x52>
   dce88:	eeb0 0a48 	vmov.f32	s0, s16
   dce8c:	eef0 0a68 	vmov.f32	s1, s17
   dce90:	b00b      	add	sp, #44	; 0x2c
   dce92:	ecbd 8b02 	vpop	{d8}
   dce96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dce9a:	4b2b      	ldr	r3, [pc, #172]	; (dcf48 <log+0x100>)
   dce9c:	9008      	str	r0, [sp, #32]
   dce9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dcea2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dcea6:	9301      	str	r3, [sp, #4]
   dcea8:	b9de      	cbnz	r6, dcee2 <log+0x9a>
   dceaa:	4f28      	ldr	r7, [pc, #160]	; (dcf4c <log+0x104>)
   dceac:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   dceb0:	4620      	mov	r0, r4
   dceb2:	4629      	mov	r1, r5
   dceb4:	2200      	movs	r2, #0
   dceb6:	2300      	movs	r3, #0
   dceb8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dcebc:	f005 f850 	bl	e1f60 <__aeabi_dcmpeq>
   dcec0:	2800      	cmp	r0, #0
   dcec2:	d037      	beq.n	dcf34 <log+0xec>
   dcec4:	2302      	movs	r3, #2
   dcec6:	9300      	str	r3, [sp, #0]
   dcec8:	4668      	mov	r0, sp
   dceca:	f004 faf7 	bl	e14bc <matherr>
   dcece:	b1c8      	cbz	r0, dcf04 <log+0xbc>
   dced0:	9b08      	ldr	r3, [sp, #32]
   dced2:	b9e3      	cbnz	r3, dcf0e <log+0xc6>
   dced4:	ed9d 0b06 	vldr	d0, [sp, #24]
   dced8:	b00b      	add	sp, #44	; 0x2c
   dceda:	ecbd 8b02 	vpop	{d8}
   dcede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcee2:	f8df 9070 	ldr.w	r9, [pc, #112]	; dcf54 <log+0x10c>
   dcee6:	f04f 0800 	mov.w	r8, #0
   dceea:	4620      	mov	r0, r4
   dceec:	4629      	mov	r1, r5
   dceee:	2200      	movs	r2, #0
   dcef0:	2300      	movs	r3, #0
   dcef2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dcef6:	f005 f833 	bl	e1f60 <__aeabi_dcmpeq>
   dcefa:	b168      	cbz	r0, dcf18 <log+0xd0>
   dcefc:	2302      	movs	r3, #2
   dcefe:	429e      	cmp	r6, r3
   dcf00:	9300      	str	r3, [sp, #0]
   dcf02:	d1e1      	bne.n	dcec8 <log+0x80>
   dcf04:	f7fc fd66 	bl	d99d4 <__errno>
   dcf08:	2322      	movs	r3, #34	; 0x22
   dcf0a:	6003      	str	r3, [r0, #0]
   dcf0c:	e7e0      	b.n	dced0 <log+0x88>
   dcf0e:	f7fc fd61 	bl	d99d4 <__errno>
   dcf12:	9b08      	ldr	r3, [sp, #32]
   dcf14:	6003      	str	r3, [r0, #0]
   dcf16:	e7dd      	b.n	dced4 <log+0x8c>
   dcf18:	2301      	movs	r3, #1
   dcf1a:	2e02      	cmp	r6, #2
   dcf1c:	9300      	str	r3, [sp, #0]
   dcf1e:	d10b      	bne.n	dcf38 <log+0xf0>
   dcf20:	f7fc fd58 	bl	d99d4 <__errno>
   dcf24:	2321      	movs	r3, #33	; 0x21
   dcf26:	6003      	str	r3, [r0, #0]
   dcf28:	4809      	ldr	r0, [pc, #36]	; (dcf50 <log+0x108>)
   dcf2a:	f004 fac9 	bl	e14c0 <nan>
   dcf2e:	ed8d 0b06 	vstr	d0, [sp, #24]
   dcf32:	e7cd      	b.n	dced0 <log+0x88>
   dcf34:	2301      	movs	r3, #1
   dcf36:	9300      	str	r3, [sp, #0]
   dcf38:	4668      	mov	r0, sp
   dcf3a:	f004 fabf 	bl	e14bc <matherr>
   dcf3e:	2800      	cmp	r0, #0
   dcf40:	d1f2      	bne.n	dcf28 <log+0xe0>
   dcf42:	e7ed      	b.n	dcf20 <log+0xd8>
   dcf44:	2003d5c0 	.word	0x2003d5c0
   dcf48:	000e6a3c 	.word	0x000e6a3c
   dcf4c:	c7efffff 	.word	0xc7efffff
   dcf50:	000e6a38 	.word	0x000e6a38
   dcf54:	fff00000 	.word	0xfff00000

000dcf58 <log10>:
   dcf58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcf5c:	ed2d 8b02 	vpush	{d8}
   dcf60:	b08b      	sub	sp, #44	; 0x2c
   dcf62:	ec55 4b10 	vmov	r4, r5, d0
   dcf66:	f001 fe33 	bl	debd0 <__ieee754_log10>
   dcf6a:	4b3b      	ldr	r3, [pc, #236]	; (dd058 <log10+0x100>)
   dcf6c:	eeb0 8a40 	vmov.f32	s16, s0
   dcf70:	eef0 8a60 	vmov.f32	s17, s1
   dcf74:	f993 6000 	ldrsb.w	r6, [r3]
   dcf78:	1c73      	adds	r3, r6, #1
   dcf7a:	d00e      	beq.n	dcf9a <log10+0x42>
   dcf7c:	4622      	mov	r2, r4
   dcf7e:	462b      	mov	r3, r5
   dcf80:	4620      	mov	r0, r4
   dcf82:	4629      	mov	r1, r5
   dcf84:	f005 f81e 	bl	e1fc4 <__aeabi_dcmpun>
   dcf88:	4607      	mov	r7, r0
   dcf8a:	b930      	cbnz	r0, dcf9a <log10+0x42>
   dcf8c:	2200      	movs	r2, #0
   dcf8e:	2300      	movs	r3, #0
   dcf90:	4620      	mov	r0, r4
   dcf92:	4629      	mov	r1, r5
   dcf94:	f004 fff8 	bl	e1f88 <__aeabi_dcmple>
   dcf98:	b940      	cbnz	r0, dcfac <log10+0x54>
   dcf9a:	eeb0 0a48 	vmov.f32	s0, s16
   dcf9e:	eef0 0a68 	vmov.f32	s1, s17
   dcfa2:	b00b      	add	sp, #44	; 0x2c
   dcfa4:	ecbd 8b02 	vpop	{d8}
   dcfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcfac:	4b2b      	ldr	r3, [pc, #172]	; (dd05c <log10+0x104>)
   dcfae:	9708      	str	r7, [sp, #32]
   dcfb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dcfb4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dcfb8:	9301      	str	r3, [sp, #4]
   dcfba:	b9de      	cbnz	r6, dcff4 <log10+0x9c>
   dcfbc:	4f28      	ldr	r7, [pc, #160]	; (dd060 <log10+0x108>)
   dcfbe:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   dcfc2:	4620      	mov	r0, r4
   dcfc4:	4629      	mov	r1, r5
   dcfc6:	2200      	movs	r2, #0
   dcfc8:	2300      	movs	r3, #0
   dcfca:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dcfce:	f004 ffc7 	bl	e1f60 <__aeabi_dcmpeq>
   dcfd2:	2800      	cmp	r0, #0
   dcfd4:	d037      	beq.n	dd046 <log10+0xee>
   dcfd6:	2302      	movs	r3, #2
   dcfd8:	9300      	str	r3, [sp, #0]
   dcfda:	4668      	mov	r0, sp
   dcfdc:	f004 fa6e 	bl	e14bc <matherr>
   dcfe0:	b1c8      	cbz	r0, dd016 <log10+0xbe>
   dcfe2:	9b08      	ldr	r3, [sp, #32]
   dcfe4:	b9e3      	cbnz	r3, dd020 <log10+0xc8>
   dcfe6:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcfea:	b00b      	add	sp, #44	; 0x2c
   dcfec:	ecbd 8b02 	vpop	{d8}
   dcff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcff4:	f8df 9070 	ldr.w	r9, [pc, #112]	; dd068 <log10+0x110>
   dcff8:	f04f 0800 	mov.w	r8, #0
   dcffc:	4620      	mov	r0, r4
   dcffe:	4629      	mov	r1, r5
   dd000:	2200      	movs	r2, #0
   dd002:	2300      	movs	r3, #0
   dd004:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd008:	f004 ffaa 	bl	e1f60 <__aeabi_dcmpeq>
   dd00c:	b168      	cbz	r0, dd02a <log10+0xd2>
   dd00e:	2302      	movs	r3, #2
   dd010:	429e      	cmp	r6, r3
   dd012:	9300      	str	r3, [sp, #0]
   dd014:	d1e1      	bne.n	dcfda <log10+0x82>
   dd016:	f7fc fcdd 	bl	d99d4 <__errno>
   dd01a:	2322      	movs	r3, #34	; 0x22
   dd01c:	6003      	str	r3, [r0, #0]
   dd01e:	e7e0      	b.n	dcfe2 <log10+0x8a>
   dd020:	f7fc fcd8 	bl	d99d4 <__errno>
   dd024:	9b08      	ldr	r3, [sp, #32]
   dd026:	6003      	str	r3, [r0, #0]
   dd028:	e7dd      	b.n	dcfe6 <log10+0x8e>
   dd02a:	2301      	movs	r3, #1
   dd02c:	2e02      	cmp	r6, #2
   dd02e:	9300      	str	r3, [sp, #0]
   dd030:	d10b      	bne.n	dd04a <log10+0xf2>
   dd032:	f7fc fccf 	bl	d99d4 <__errno>
   dd036:	2321      	movs	r3, #33	; 0x21
   dd038:	6003      	str	r3, [r0, #0]
   dd03a:	480a      	ldr	r0, [pc, #40]	; (dd064 <log10+0x10c>)
   dd03c:	f004 fa40 	bl	e14c0 <nan>
   dd040:	ed8d 0b06 	vstr	d0, [sp, #24]
   dd044:	e7cd      	b.n	dcfe2 <log10+0x8a>
   dd046:	2301      	movs	r3, #1
   dd048:	9300      	str	r3, [sp, #0]
   dd04a:	4668      	mov	r0, sp
   dd04c:	f004 fa36 	bl	e14bc <matherr>
   dd050:	2800      	cmp	r0, #0
   dd052:	d1f2      	bne.n	dd03a <log10+0xe2>
   dd054:	e7ed      	b.n	dd032 <log10+0xda>
   dd056:	bf00      	nop
   dd058:	2003d5c0 	.word	0x2003d5c0
   dd05c:	000e6a40 	.word	0x000e6a40
   dd060:	c7efffff 	.word	0xc7efffff
   dd064:	000e6a38 	.word	0x000e6a38
   dd068:	fff00000 	.word	0xfff00000
   dd06c:	00000000 	.word	0x00000000

000dd070 <pow>:
   dd070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd074:	ed2d 8b02 	vpush	{d8}
   dd078:	f8df a324 	ldr.w	sl, [pc, #804]	; dd3a0 <pow+0x330>
   dd07c:	b08b      	sub	sp, #44	; 0x2c
   dd07e:	ec57 6b10 	vmov	r6, r7, d0
   dd082:	ec55 4b11 	vmov	r4, r5, d1
   dd086:	f001 fe47 	bl	ded18 <__ieee754_pow>
   dd08a:	f99a 8000 	ldrsb.w	r8, [sl]
   dd08e:	eeb0 8a40 	vmov.f32	s16, s0
   dd092:	eef0 8a60 	vmov.f32	s17, s1
   dd096:	f1b8 3fff 	cmp.w	r8, #4294967295
   dd09a:	d048      	beq.n	dd12e <pow+0xbe>
   dd09c:	4622      	mov	r2, r4
   dd09e:	462b      	mov	r3, r5
   dd0a0:	4620      	mov	r0, r4
   dd0a2:	4629      	mov	r1, r5
   dd0a4:	f004 ff8e 	bl	e1fc4 <__aeabi_dcmpun>
   dd0a8:	4683      	mov	fp, r0
   dd0aa:	2800      	cmp	r0, #0
   dd0ac:	d13f      	bne.n	dd12e <pow+0xbe>
   dd0ae:	4632      	mov	r2, r6
   dd0b0:	463b      	mov	r3, r7
   dd0b2:	4630      	mov	r0, r6
   dd0b4:	4639      	mov	r1, r7
   dd0b6:	f004 ff85 	bl	e1fc4 <__aeabi_dcmpun>
   dd0ba:	4681      	mov	r9, r0
   dd0bc:	2800      	cmp	r0, #0
   dd0be:	f040 8090 	bne.w	dd1e2 <pow+0x172>
   dd0c2:	4630      	mov	r0, r6
   dd0c4:	4639      	mov	r1, r7
   dd0c6:	2200      	movs	r2, #0
   dd0c8:	2300      	movs	r3, #0
   dd0ca:	f004 ff49 	bl	e1f60 <__aeabi_dcmpeq>
   dd0ce:	2800      	cmp	r0, #0
   dd0d0:	d036      	beq.n	dd140 <pow+0xd0>
   dd0d2:	2200      	movs	r2, #0
   dd0d4:	2300      	movs	r3, #0
   dd0d6:	4620      	mov	r0, r4
   dd0d8:	4629      	mov	r1, r5
   dd0da:	f004 ff41 	bl	e1f60 <__aeabi_dcmpeq>
   dd0de:	4683      	mov	fp, r0
   dd0e0:	b1b8      	cbz	r0, dd112 <pow+0xa2>
   dd0e2:	ed9f 7ba5 	vldr	d7, [pc, #660]	; dd378 <pow+0x308>
   dd0e6:	2201      	movs	r2, #1
   dd0e8:	4ba9      	ldr	r3, [pc, #676]	; (dd390 <pow+0x320>)
   dd0ea:	f8cd 9020 	str.w	r9, [sp, #32]
   dd0ee:	9200      	str	r2, [sp, #0]
   dd0f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd0f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd0f8:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd0fc:	9301      	str	r3, [sp, #4]
   dd0fe:	f1b8 0f00 	cmp.w	r8, #0
   dd102:	d05b      	beq.n	dd1bc <pow+0x14c>
   dd104:	ed9f 0b9e 	vldr	d0, [pc, #632]	; dd380 <pow+0x310>
   dd108:	b00b      	add	sp, #44	; 0x2c
   dd10a:	ecbd 8b02 	vpop	{d8}
   dd10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd112:	ec45 4b10 	vmov	d0, r4, r5
   dd116:	f004 f9c9 	bl	e14ac <finite>
   dd11a:	b140      	cbz	r0, dd12e <pow+0xbe>
   dd11c:	2200      	movs	r2, #0
   dd11e:	2300      	movs	r3, #0
   dd120:	4620      	mov	r0, r4
   dd122:	4629      	mov	r1, r5
   dd124:	f004 ff26 	bl	e1f74 <__aeabi_dcmplt>
   dd128:	2800      	cmp	r0, #0
   dd12a:	f040 80c5 	bne.w	dd2b8 <pow+0x248>
   dd12e:	eeb0 0a48 	vmov.f32	s0, s16
   dd132:	eef0 0a68 	vmov.f32	s1, s17
   dd136:	b00b      	add	sp, #44	; 0x2c
   dd138:	ecbd 8b02 	vpop	{d8}
   dd13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd140:	eeb0 0a48 	vmov.f32	s0, s16
   dd144:	eef0 0a68 	vmov.f32	s1, s17
   dd148:	f004 f9b0 	bl	e14ac <finite>
   dd14c:	4680      	mov	r8, r0
   dd14e:	2800      	cmp	r0, #0
   dd150:	d061      	beq.n	dd216 <pow+0x1a6>
   dd152:	f04f 0800 	mov.w	r8, #0
   dd156:	f04f 0900 	mov.w	r9, #0
   dd15a:	ec51 0b18 	vmov	r0, r1, d8
   dd15e:	4642      	mov	r2, r8
   dd160:	464b      	mov	r3, r9
   dd162:	f004 fefd 	bl	e1f60 <__aeabi_dcmpeq>
   dd166:	2800      	cmp	r0, #0
   dd168:	d0e1      	beq.n	dd12e <pow+0xbe>
   dd16a:	ec47 6b10 	vmov	d0, r6, r7
   dd16e:	f004 f99d 	bl	e14ac <finite>
   dd172:	2800      	cmp	r0, #0
   dd174:	d0db      	beq.n	dd12e <pow+0xbe>
   dd176:	ec45 4b10 	vmov	d0, r4, r5
   dd17a:	f004 f997 	bl	e14ac <finite>
   dd17e:	2800      	cmp	r0, #0
   dd180:	d0d5      	beq.n	dd12e <pow+0xbe>
   dd182:	f99a 3000 	ldrsb.w	r3, [sl]
   dd186:	4a82      	ldr	r2, [pc, #520]	; (dd390 <pow+0x320>)
   dd188:	9201      	str	r2, [sp, #4]
   dd18a:	2104      	movs	r1, #4
   dd18c:	2200      	movs	r2, #0
   dd18e:	2b02      	cmp	r3, #2
   dd190:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd194:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd198:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd19c:	9100      	str	r1, [sp, #0]
   dd19e:	9208      	str	r2, [sp, #32]
   dd1a0:	d003      	beq.n	dd1aa <pow+0x13a>
   dd1a2:	4668      	mov	r0, sp
   dd1a4:	f004 f98a 	bl	e14bc <matherr>
   dd1a8:	b970      	cbnz	r0, dd1c8 <pow+0x158>
   dd1aa:	f7fc fc13 	bl	d99d4 <__errno>
   dd1ae:	2322      	movs	r3, #34	; 0x22
   dd1b0:	6003      	str	r3, [r0, #0]
   dd1b2:	e009      	b.n	dd1c8 <pow+0x158>
   dd1b4:	ed9f 7b70 	vldr	d7, [pc, #448]	; dd378 <pow+0x308>
   dd1b8:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd1bc:	4668      	mov	r0, sp
   dd1be:	f004 f97d 	bl	e14bc <matherr>
   dd1c2:	2800      	cmp	r0, #0
   dd1c4:	f000 808e 	beq.w	dd2e4 <pow+0x274>
   dd1c8:	9b08      	ldr	r3, [sp, #32]
   dd1ca:	b11b      	cbz	r3, dd1d4 <pow+0x164>
   dd1cc:	f7fc fc02 	bl	d99d4 <__errno>
   dd1d0:	9b08      	ldr	r3, [sp, #32]
   dd1d2:	6003      	str	r3, [r0, #0]
   dd1d4:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd1d8:	b00b      	add	sp, #44	; 0x2c
   dd1da:	ecbd 8b02 	vpop	{d8}
   dd1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd1e2:	2200      	movs	r2, #0
   dd1e4:	2300      	movs	r3, #0
   dd1e6:	4620      	mov	r0, r4
   dd1e8:	4629      	mov	r1, r5
   dd1ea:	f004 feb9 	bl	e1f60 <__aeabi_dcmpeq>
   dd1ee:	2800      	cmp	r0, #0
   dd1f0:	d09d      	beq.n	dd12e <pow+0xbe>
   dd1f2:	ed9f 0b63 	vldr	d0, [pc, #396]	; dd380 <pow+0x310>
   dd1f6:	4b66      	ldr	r3, [pc, #408]	; (dd390 <pow+0x320>)
   dd1f8:	f8cd b020 	str.w	fp, [sp, #32]
   dd1fc:	2201      	movs	r2, #1
   dd1fe:	f1b8 0f02 	cmp.w	r8, #2
   dd202:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd206:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd20a:	ed8d 0b06 	vstr	d0, [sp, #24]
   dd20e:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd212:	d1d3      	bne.n	dd1bc <pow+0x14c>
   dd214:	e78f      	b.n	dd136 <pow+0xc6>
   dd216:	ec47 6b10 	vmov	d0, r6, r7
   dd21a:	f004 f947 	bl	e14ac <finite>
   dd21e:	2800      	cmp	r0, #0
   dd220:	d097      	beq.n	dd152 <pow+0xe2>
   dd222:	ec45 4b10 	vmov	d0, r4, r5
   dd226:	f004 f941 	bl	e14ac <finite>
   dd22a:	2800      	cmp	r0, #0
   dd22c:	d091      	beq.n	dd152 <pow+0xe2>
   dd22e:	ec53 2b18 	vmov	r2, r3, d8
   dd232:	ee18 0a10 	vmov	r0, s16
   dd236:	4619      	mov	r1, r3
   dd238:	f004 fec4 	bl	e1fc4 <__aeabi_dcmpun>
   dd23c:	2800      	cmp	r0, #0
   dd23e:	d17c      	bne.n	dd33a <pow+0x2ca>
   dd240:	2303      	movs	r3, #3
   dd242:	f99a 8000 	ldrsb.w	r8, [sl]
   dd246:	9300      	str	r3, [sp, #0]
   dd248:	4b51      	ldr	r3, [pc, #324]	; (dd390 <pow+0x320>)
   dd24a:	9008      	str	r0, [sp, #32]
   dd24c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd250:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd254:	9301      	str	r3, [sp, #4]
   dd256:	f1b8 0f00 	cmp.w	r8, #0
   dd25a:	d148      	bne.n	dd2ee <pow+0x27e>
   dd25c:	f8df 9144 	ldr.w	r9, [pc, #324]	; dd3a4 <pow+0x334>
   dd260:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   dd264:	2200      	movs	r2, #0
   dd266:	2300      	movs	r3, #0
   dd268:	4630      	mov	r0, r6
   dd26a:	4639      	mov	r1, r7
   dd26c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd270:	f004 fe80 	bl	e1f74 <__aeabi_dcmplt>
   dd274:	2800      	cmp	r0, #0
   dd276:	d094      	beq.n	dd1a2 <pow+0x132>
   dd278:	2200      	movs	r2, #0
   dd27a:	4b46      	ldr	r3, [pc, #280]	; (dd394 <pow+0x324>)
   dd27c:	4620      	mov	r0, r4
   dd27e:	4629      	mov	r1, r5
   dd280:	f004 fc06 	bl	e1a90 <__aeabi_dmul>
   dd284:	4604      	mov	r4, r0
   dd286:	460d      	mov	r5, r1
   dd288:	ec45 4b10 	vmov	d0, r4, r5
   dd28c:	f004 f920 	bl	e14d0 <rint>
   dd290:	4620      	mov	r0, r4
   dd292:	ec53 2b10 	vmov	r2, r3, d0
   dd296:	4629      	mov	r1, r5
   dd298:	f004 fe62 	bl	e1f60 <__aeabi_dcmpeq>
   dd29c:	2800      	cmp	r0, #0
   dd29e:	d149      	bne.n	dd334 <pow+0x2c4>
   dd2a0:	4b3d      	ldr	r3, [pc, #244]	; (dd398 <pow+0x328>)
   dd2a2:	f99a 8000 	ldrsb.w	r8, [sl]
   dd2a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dd2aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd2ae:	f1b8 0f02 	cmp.w	r8, #2
   dd2b2:	f47f af76 	bne.w	dd1a2 <pow+0x132>
   dd2b6:	e778      	b.n	dd1aa <pow+0x13a>
   dd2b8:	4a35      	ldr	r2, [pc, #212]	; (dd390 <pow+0x320>)
   dd2ba:	f99a 3000 	ldrsb.w	r3, [sl]
   dd2be:	f8cd b020 	str.w	fp, [sp, #32]
   dd2c2:	2101      	movs	r1, #1
   dd2c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd2c8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd2cc:	e88d 0006 	stmia.w	sp, {r1, r2}
   dd2d0:	2b00      	cmp	r3, #0
   dd2d2:	f43f af6f 	beq.w	dd1b4 <pow+0x144>
   dd2d6:	4931      	ldr	r1, [pc, #196]	; (dd39c <pow+0x32c>)
   dd2d8:	2000      	movs	r0, #0
   dd2da:	2b02      	cmp	r3, #2
   dd2dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd2e0:	f47f af6c 	bne.w	dd1bc <pow+0x14c>
   dd2e4:	f7fc fb76 	bl	d99d4 <__errno>
   dd2e8:	2321      	movs	r3, #33	; 0x21
   dd2ea:	6003      	str	r3, [r0, #0]
   dd2ec:	e76c      	b.n	dd1c8 <pow+0x158>
   dd2ee:	ed9f 7b26 	vldr	d7, [pc, #152]	; dd388 <pow+0x318>
   dd2f2:	2200      	movs	r2, #0
   dd2f4:	2300      	movs	r3, #0
   dd2f6:	4630      	mov	r0, r6
   dd2f8:	4639      	mov	r1, r7
   dd2fa:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd2fe:	f004 fe39 	bl	e1f74 <__aeabi_dcmplt>
   dd302:	2800      	cmp	r0, #0
   dd304:	d0d3      	beq.n	dd2ae <pow+0x23e>
   dd306:	2200      	movs	r2, #0
   dd308:	4b22      	ldr	r3, [pc, #136]	; (dd394 <pow+0x324>)
   dd30a:	4620      	mov	r0, r4
   dd30c:	4629      	mov	r1, r5
   dd30e:	f004 fbbf 	bl	e1a90 <__aeabi_dmul>
   dd312:	4604      	mov	r4, r0
   dd314:	460d      	mov	r5, r1
   dd316:	ec45 4b10 	vmov	d0, r4, r5
   dd31a:	f004 f8d9 	bl	e14d0 <rint>
   dd31e:	4620      	mov	r0, r4
   dd320:	ec53 2b10 	vmov	r2, r3, d0
   dd324:	4629      	mov	r1, r5
   dd326:	f004 fe1b 	bl	e1f60 <__aeabi_dcmpeq>
   dd32a:	b918      	cbnz	r0, dd334 <pow+0x2c4>
   dd32c:	4b1b      	ldr	r3, [pc, #108]	; (dd39c <pow+0x32c>)
   dd32e:	2200      	movs	r2, #0
   dd330:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd334:	f99a 8000 	ldrsb.w	r8, [sl]
   dd338:	e7b9      	b.n	dd2ae <pow+0x23e>
   dd33a:	4b15      	ldr	r3, [pc, #84]	; (dd390 <pow+0x320>)
   dd33c:	f99a 9000 	ldrsb.w	r9, [sl]
   dd340:	f8cd 8020 	str.w	r8, [sp, #32]
   dd344:	2201      	movs	r2, #1
   dd346:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd34a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd34e:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd352:	f1b9 0f00 	cmp.w	r9, #0
   dd356:	f43f af2d 	beq.w	dd1b4 <pow+0x144>
   dd35a:	2200      	movs	r2, #0
   dd35c:	2300      	movs	r3, #0
   dd35e:	4610      	mov	r0, r2
   dd360:	4619      	mov	r1, r3
   dd362:	f004 fcbf 	bl	e1ce4 <__aeabi_ddiv>
   dd366:	f1b9 0f02 	cmp.w	r9, #2
   dd36a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd36e:	d0b9      	beq.n	dd2e4 <pow+0x274>
   dd370:	e724      	b.n	dd1bc <pow+0x14c>
   dd372:	bf00      	nop
   dd374:	f3af 8000 	nop.w
	...
   dd384:	3ff00000 	.word	0x3ff00000
   dd388:	00000000 	.word	0x00000000
   dd38c:	7ff00000 	.word	0x7ff00000
   dd390:	000e6a48 	.word	0x000e6a48
   dd394:	3fe00000 	.word	0x3fe00000
   dd398:	c7efffff 	.word	0xc7efffff
   dd39c:	fff00000 	.word	0xfff00000
   dd3a0:	2003d5c0 	.word	0x2003d5c0
   dd3a4:	47efffff 	.word	0x47efffff

000dd3a8 <sinh>:
   dd3a8:	b530      	push	{r4, r5, lr}
   dd3aa:	ed2d 8b04 	vpush	{d8-d9}
   dd3ae:	eeb0 9a40 	vmov.f32	s18, s0
   dd3b2:	eef0 9a60 	vmov.f32	s19, s1
   dd3b6:	4c2d      	ldr	r4, [pc, #180]	; (dd46c <sinh+0xc4>)
   dd3b8:	b08b      	sub	sp, #44	; 0x2c
   dd3ba:	f002 fc5d 	bl	dfc78 <__ieee754_sinh>
   dd3be:	f994 3000 	ldrsb.w	r3, [r4]
   dd3c2:	eeb0 8a40 	vmov.f32	s16, s0
   dd3c6:	eef0 8a60 	vmov.f32	s17, s1
   dd3ca:	3301      	adds	r3, #1
   dd3cc:	d003      	beq.n	dd3d6 <sinh+0x2e>
   dd3ce:	f004 f86d 	bl	e14ac <finite>
   dd3d2:	4605      	mov	r5, r0
   dd3d4:	b138      	cbz	r0, dd3e6 <sinh+0x3e>
   dd3d6:	eeb0 0a48 	vmov.f32	s0, s16
   dd3da:	eef0 0a68 	vmov.f32	s1, s17
   dd3de:	b00b      	add	sp, #44	; 0x2c
   dd3e0:	ecbd 8b04 	vpop	{d8-d9}
   dd3e4:	bd30      	pop	{r4, r5, pc}
   dd3e6:	eeb0 0a49 	vmov.f32	s0, s18
   dd3ea:	eef0 0a69 	vmov.f32	s1, s19
   dd3ee:	f004 f85d 	bl	e14ac <finite>
   dd3f2:	2800      	cmp	r0, #0
   dd3f4:	d0ef      	beq.n	dd3d6 <sinh+0x2e>
   dd3f6:	4b1e      	ldr	r3, [pc, #120]	; (dd470 <sinh+0xc8>)
   dd3f8:	f994 4000 	ldrsb.w	r4, [r4]
   dd3fc:	9508      	str	r5, [sp, #32]
   dd3fe:	2203      	movs	r2, #3
   dd400:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd404:	ed8d 9b04 	vstr	d9, [sp, #16]
   dd408:	ed8d 9b02 	vstr	d9, [sp, #8]
   dd40c:	2200      	movs	r2, #0
   dd40e:	2300      	movs	r3, #0
   dd410:	ec51 0b19 	vmov	r0, r1, d9
   dd414:	b99c      	cbnz	r4, dd43e <sinh+0x96>
   dd416:	f004 fdcb 	bl	e1fb0 <__aeabi_dcmpgt>
   dd41a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dd41e:	b308      	cbz	r0, dd464 <sinh+0xbc>
   dd420:	4b14      	ldr	r3, [pc, #80]	; (dd474 <sinh+0xcc>)
   dd422:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd426:	4668      	mov	r0, sp
   dd428:	f004 f848 	bl	e14bc <matherr>
   dd42c:	b180      	cbz	r0, dd450 <sinh+0xa8>
   dd42e:	9b08      	ldr	r3, [sp, #32]
   dd430:	b99b      	cbnz	r3, dd45a <sinh+0xb2>
   dd432:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd436:	b00b      	add	sp, #44	; 0x2c
   dd438:	ecbd 8b04 	vpop	{d8-d9}
   dd43c:	bd30      	pop	{r4, r5, pc}
   dd43e:	f004 fdb7 	bl	e1fb0 <__aeabi_dcmpgt>
   dd442:	2200      	movs	r2, #0
   dd444:	b180      	cbz	r0, dd468 <sinh+0xc0>
   dd446:	4b0c      	ldr	r3, [pc, #48]	; (dd478 <sinh+0xd0>)
   dd448:	2c02      	cmp	r4, #2
   dd44a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd44e:	d1ea      	bne.n	dd426 <sinh+0x7e>
   dd450:	f7fc fac0 	bl	d99d4 <__errno>
   dd454:	2322      	movs	r3, #34	; 0x22
   dd456:	6003      	str	r3, [r0, #0]
   dd458:	e7e9      	b.n	dd42e <sinh+0x86>
   dd45a:	f7fc fabb 	bl	d99d4 <__errno>
   dd45e:	9b08      	ldr	r3, [sp, #32]
   dd460:	6003      	str	r3, [r0, #0]
   dd462:	e7e6      	b.n	dd432 <sinh+0x8a>
   dd464:	4b05      	ldr	r3, [pc, #20]	; (dd47c <sinh+0xd4>)
   dd466:	e7dc      	b.n	dd422 <sinh+0x7a>
   dd468:	4b05      	ldr	r3, [pc, #20]	; (dd480 <sinh+0xd8>)
   dd46a:	e7ed      	b.n	dd448 <sinh+0xa0>
   dd46c:	2003d5c0 	.word	0x2003d5c0
   dd470:	000e6a4c 	.word	0x000e6a4c
   dd474:	47efffff 	.word	0x47efffff
   dd478:	7ff00000 	.word	0x7ff00000
   dd47c:	c7efffff 	.word	0xc7efffff
   dd480:	fff00000 	.word	0xfff00000

000dd484 <sqrt>:
   dd484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd488:	ed2d 8b02 	vpush	{d8}
   dd48c:	b08b      	sub	sp, #44	; 0x2c
   dd48e:	ec55 4b10 	vmov	r4, r5, d0
   dd492:	f002 fcd5 	bl	dfe40 <__ieee754_sqrt>
   dd496:	4b29      	ldr	r3, [pc, #164]	; (dd53c <sqrt+0xb8>)
   dd498:	eeb0 8a40 	vmov.f32	s16, s0
   dd49c:	eef0 8a60 	vmov.f32	s17, s1
   dd4a0:	f993 6000 	ldrsb.w	r6, [r3]
   dd4a4:	1c73      	adds	r3, r6, #1
   dd4a6:	d012      	beq.n	dd4ce <sqrt+0x4a>
   dd4a8:	4622      	mov	r2, r4
   dd4aa:	462b      	mov	r3, r5
   dd4ac:	4620      	mov	r0, r4
   dd4ae:	4629      	mov	r1, r5
   dd4b0:	f004 fd88 	bl	e1fc4 <__aeabi_dcmpun>
   dd4b4:	4607      	mov	r7, r0
   dd4b6:	b950      	cbnz	r0, dd4ce <sqrt+0x4a>
   dd4b8:	f04f 0800 	mov.w	r8, #0
   dd4bc:	f04f 0900 	mov.w	r9, #0
   dd4c0:	4620      	mov	r0, r4
   dd4c2:	4629      	mov	r1, r5
   dd4c4:	4642      	mov	r2, r8
   dd4c6:	464b      	mov	r3, r9
   dd4c8:	f004 fd54 	bl	e1f74 <__aeabi_dcmplt>
   dd4cc:	b940      	cbnz	r0, dd4e0 <sqrt+0x5c>
   dd4ce:	eeb0 0a48 	vmov.f32	s0, s16
   dd4d2:	eef0 0a68 	vmov.f32	s1, s17
   dd4d6:	b00b      	add	sp, #44	; 0x2c
   dd4d8:	ecbd 8b02 	vpop	{d8}
   dd4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd4e0:	4b17      	ldr	r3, [pc, #92]	; (dd540 <sqrt+0xbc>)
   dd4e2:	9708      	str	r7, [sp, #32]
   dd4e4:	2201      	movs	r2, #1
   dd4e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd4ea:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dd4ee:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd4f2:	b1b6      	cbz	r6, dd522 <sqrt+0x9e>
   dd4f4:	4642      	mov	r2, r8
   dd4f6:	464b      	mov	r3, r9
   dd4f8:	4640      	mov	r0, r8
   dd4fa:	4649      	mov	r1, r9
   dd4fc:	f004 fbf2 	bl	e1ce4 <__aeabi_ddiv>
   dd500:	2e02      	cmp	r6, #2
   dd502:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd506:	d10e      	bne.n	dd526 <sqrt+0xa2>
   dd508:	f7fc fa64 	bl	d99d4 <__errno>
   dd50c:	2321      	movs	r3, #33	; 0x21
   dd50e:	6003      	str	r3, [r0, #0]
   dd510:	9b08      	ldr	r3, [sp, #32]
   dd512:	b973      	cbnz	r3, dd532 <sqrt+0xae>
   dd514:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd518:	b00b      	add	sp, #44	; 0x2c
   dd51a:	ecbd 8b02 	vpop	{d8}
   dd51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd522:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd526:	4668      	mov	r0, sp
   dd528:	f003 ffc8 	bl	e14bc <matherr>
   dd52c:	2800      	cmp	r0, #0
   dd52e:	d1ef      	bne.n	dd510 <sqrt+0x8c>
   dd530:	e7ea      	b.n	dd508 <sqrt+0x84>
   dd532:	f7fc fa4f 	bl	d99d4 <__errno>
   dd536:	9b08      	ldr	r3, [sp, #32]
   dd538:	6003      	str	r3, [r0, #0]
   dd53a:	e7eb      	b.n	dd514 <sqrt+0x90>
   dd53c:	2003d5c0 	.word	0x2003d5c0
   dd540:	000e6a54 	.word	0x000e6a54
   dd544:	00000000 	.word	0x00000000

000dd548 <__ieee754_acos>:
   dd548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd54c:	ec55 4b10 	vmov	r4, r5, d0
   dd550:	49cd      	ldr	r1, [pc, #820]	; (dd888 <__ieee754_acos+0x340>)
   dd552:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   dd556:	428b      	cmp	r3, r1
   dd558:	dd0d      	ble.n	dd576 <__ieee754_acos+0x2e>
   dd55a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   dd55e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dd562:	4323      	orrs	r3, r4
   dd564:	f040 80bd 	bne.w	dd6e2 <__ieee754_acos+0x19a>
   dd568:	2d00      	cmp	r5, #0
   dd56a:	f340 814f 	ble.w	dd80c <__ieee754_acos+0x2c4>
   dd56e:	ed9f 0baa 	vldr	d0, [pc, #680]	; dd818 <__ieee754_acos+0x2d0>
   dd572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd576:	49c5      	ldr	r1, [pc, #788]	; (dd88c <__ieee754_acos+0x344>)
   dd578:	428b      	cmp	r3, r1
   dd57a:	f340 80ab 	ble.w	dd6d4 <__ieee754_acos+0x18c>
   dd57e:	2d00      	cmp	r5, #0
   dd580:	f2c0 818c 	blt.w	dd89c <__ieee754_acos+0x354>
   dd584:	ee10 2a10 	vmov	r2, s0
   dd588:	462b      	mov	r3, r5
   dd58a:	2000      	movs	r0, #0
   dd58c:	49c0      	ldr	r1, [pc, #768]	; (dd890 <__ieee754_acos+0x348>)
   dd58e:	f004 f8cb 	bl	e1728 <__aeabi_dsub>
   dd592:	2200      	movs	r2, #0
   dd594:	4bbf      	ldr	r3, [pc, #764]	; (dd894 <__ieee754_acos+0x34c>)
   dd596:	f004 fa7b 	bl	e1a90 <__aeabi_dmul>
   dd59a:	4604      	mov	r4, r0
   dd59c:	460d      	mov	r5, r1
   dd59e:	ec45 4b10 	vmov	d0, r4, r5
   dd5a2:	f002 fc4d 	bl	dfe40 <__ieee754_sqrt>
   dd5a6:	4620      	mov	r0, r4
   dd5a8:	4629      	mov	r1, r5
   dd5aa:	a39d      	add	r3, pc, #628	; (adr r3, dd820 <__ieee754_acos+0x2d8>)
   dd5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5b0:	ec59 8b10 	vmov	r8, r9, d0
   dd5b4:	f004 fa6c 	bl	e1a90 <__aeabi_dmul>
   dd5b8:	a39b      	add	r3, pc, #620	; (adr r3, dd828 <__ieee754_acos+0x2e0>)
   dd5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5be:	f004 f8b5 	bl	e172c <__adddf3>
   dd5c2:	4622      	mov	r2, r4
   dd5c4:	462b      	mov	r3, r5
   dd5c6:	f004 fa63 	bl	e1a90 <__aeabi_dmul>
   dd5ca:	a399      	add	r3, pc, #612	; (adr r3, dd830 <__ieee754_acos+0x2e8>)
   dd5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5d0:	f004 f8aa 	bl	e1728 <__aeabi_dsub>
   dd5d4:	4622      	mov	r2, r4
   dd5d6:	462b      	mov	r3, r5
   dd5d8:	f004 fa5a 	bl	e1a90 <__aeabi_dmul>
   dd5dc:	a396      	add	r3, pc, #600	; (adr r3, dd838 <__ieee754_acos+0x2f0>)
   dd5de:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5e2:	f004 f8a3 	bl	e172c <__adddf3>
   dd5e6:	4622      	mov	r2, r4
   dd5e8:	462b      	mov	r3, r5
   dd5ea:	f004 fa51 	bl	e1a90 <__aeabi_dmul>
   dd5ee:	a394      	add	r3, pc, #592	; (adr r3, dd840 <__ieee754_acos+0x2f8>)
   dd5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5f4:	f004 f898 	bl	e1728 <__aeabi_dsub>
   dd5f8:	4622      	mov	r2, r4
   dd5fa:	462b      	mov	r3, r5
   dd5fc:	f004 fa48 	bl	e1a90 <__aeabi_dmul>
   dd600:	a391      	add	r3, pc, #580	; (adr r3, dd848 <__ieee754_acos+0x300>)
   dd602:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd606:	f004 f891 	bl	e172c <__adddf3>
   dd60a:	4622      	mov	r2, r4
   dd60c:	462b      	mov	r3, r5
   dd60e:	f004 fa3f 	bl	e1a90 <__aeabi_dmul>
   dd612:	a38f      	add	r3, pc, #572	; (adr r3, dd850 <__ieee754_acos+0x308>)
   dd614:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd618:	4682      	mov	sl, r0
   dd61a:	468b      	mov	fp, r1
   dd61c:	4620      	mov	r0, r4
   dd61e:	4629      	mov	r1, r5
   dd620:	f004 fa36 	bl	e1a90 <__aeabi_dmul>
   dd624:	a38c      	add	r3, pc, #560	; (adr r3, dd858 <__ieee754_acos+0x310>)
   dd626:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd62a:	f004 f87d 	bl	e1728 <__aeabi_dsub>
   dd62e:	4622      	mov	r2, r4
   dd630:	462b      	mov	r3, r5
   dd632:	f004 fa2d 	bl	e1a90 <__aeabi_dmul>
   dd636:	a38a      	add	r3, pc, #552	; (adr r3, dd860 <__ieee754_acos+0x318>)
   dd638:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd63c:	f004 f876 	bl	e172c <__adddf3>
   dd640:	4622      	mov	r2, r4
   dd642:	462b      	mov	r3, r5
   dd644:	f004 fa24 	bl	e1a90 <__aeabi_dmul>
   dd648:	a387      	add	r3, pc, #540	; (adr r3, dd868 <__ieee754_acos+0x320>)
   dd64a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd64e:	f004 f86b 	bl	e1728 <__aeabi_dsub>
   dd652:	4622      	mov	r2, r4
   dd654:	462b      	mov	r3, r5
   dd656:	f004 fa1b 	bl	e1a90 <__aeabi_dmul>
   dd65a:	2200      	movs	r2, #0
   dd65c:	4b8c      	ldr	r3, [pc, #560]	; (dd890 <__ieee754_acos+0x348>)
   dd65e:	f004 f865 	bl	e172c <__adddf3>
   dd662:	4602      	mov	r2, r0
   dd664:	460b      	mov	r3, r1
   dd666:	4650      	mov	r0, sl
   dd668:	4659      	mov	r1, fp
   dd66a:	f004 fb3b 	bl	e1ce4 <__aeabi_ddiv>
   dd66e:	4642      	mov	r2, r8
   dd670:	464b      	mov	r3, r9
   dd672:	f004 fa0d 	bl	e1a90 <__aeabi_dmul>
   dd676:	2600      	movs	r6, #0
   dd678:	4682      	mov	sl, r0
   dd67a:	468b      	mov	fp, r1
   dd67c:	4632      	mov	r2, r6
   dd67e:	464b      	mov	r3, r9
   dd680:	4630      	mov	r0, r6
   dd682:	4649      	mov	r1, r9
   dd684:	f004 fa04 	bl	e1a90 <__aeabi_dmul>
   dd688:	4602      	mov	r2, r0
   dd68a:	460b      	mov	r3, r1
   dd68c:	4620      	mov	r0, r4
   dd68e:	4629      	mov	r1, r5
   dd690:	f004 f84a 	bl	e1728 <__aeabi_dsub>
   dd694:	4632      	mov	r2, r6
   dd696:	4604      	mov	r4, r0
   dd698:	460d      	mov	r5, r1
   dd69a:	464b      	mov	r3, r9
   dd69c:	4640      	mov	r0, r8
   dd69e:	4649      	mov	r1, r9
   dd6a0:	f004 f844 	bl	e172c <__adddf3>
   dd6a4:	4602      	mov	r2, r0
   dd6a6:	460b      	mov	r3, r1
   dd6a8:	4620      	mov	r0, r4
   dd6aa:	4629      	mov	r1, r5
   dd6ac:	f004 fb1a 	bl	e1ce4 <__aeabi_ddiv>
   dd6b0:	4602      	mov	r2, r0
   dd6b2:	460b      	mov	r3, r1
   dd6b4:	4650      	mov	r0, sl
   dd6b6:	4659      	mov	r1, fp
   dd6b8:	f004 f838 	bl	e172c <__adddf3>
   dd6bc:	4632      	mov	r2, r6
   dd6be:	464b      	mov	r3, r9
   dd6c0:	f004 f834 	bl	e172c <__adddf3>
   dd6c4:	4602      	mov	r2, r0
   dd6c6:	460b      	mov	r3, r1
   dd6c8:	f004 f830 	bl	e172c <__adddf3>
   dd6cc:	ec41 0b10 	vmov	d0, r0, r1
   dd6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd6d4:	4a70      	ldr	r2, [pc, #448]	; (dd898 <__ieee754_acos+0x350>)
   dd6d6:	4293      	cmp	r3, r2
   dd6d8:	dc12      	bgt.n	dd700 <__ieee754_acos+0x1b8>
   dd6da:	ed9f 0b65 	vldr	d0, [pc, #404]	; dd870 <__ieee754_acos+0x328>
   dd6de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd6e2:	ee10 2a10 	vmov	r2, s0
   dd6e6:	462b      	mov	r3, r5
   dd6e8:	4620      	mov	r0, r4
   dd6ea:	4629      	mov	r1, r5
   dd6ec:	f004 f81c 	bl	e1728 <__aeabi_dsub>
   dd6f0:	4602      	mov	r2, r0
   dd6f2:	460b      	mov	r3, r1
   dd6f4:	f004 faf6 	bl	e1ce4 <__aeabi_ddiv>
   dd6f8:	ec41 0b10 	vmov	d0, r0, r1
   dd6fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd700:	ee10 2a10 	vmov	r2, s0
   dd704:	ee10 0a10 	vmov	r0, s0
   dd708:	462b      	mov	r3, r5
   dd70a:	4629      	mov	r1, r5
   dd70c:	f004 f9c0 	bl	e1a90 <__aeabi_dmul>
   dd710:	a343      	add	r3, pc, #268	; (adr r3, dd820 <__ieee754_acos+0x2d8>)
   dd712:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd716:	4606      	mov	r6, r0
   dd718:	460f      	mov	r7, r1
   dd71a:	f004 f9b9 	bl	e1a90 <__aeabi_dmul>
   dd71e:	a342      	add	r3, pc, #264	; (adr r3, dd828 <__ieee754_acos+0x2e0>)
   dd720:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd724:	f004 f802 	bl	e172c <__adddf3>
   dd728:	4632      	mov	r2, r6
   dd72a:	463b      	mov	r3, r7
   dd72c:	f004 f9b0 	bl	e1a90 <__aeabi_dmul>
   dd730:	a33f      	add	r3, pc, #252	; (adr r3, dd830 <__ieee754_acos+0x2e8>)
   dd732:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd736:	f003 fff7 	bl	e1728 <__aeabi_dsub>
   dd73a:	4632      	mov	r2, r6
   dd73c:	463b      	mov	r3, r7
   dd73e:	f004 f9a7 	bl	e1a90 <__aeabi_dmul>
   dd742:	a33d      	add	r3, pc, #244	; (adr r3, dd838 <__ieee754_acos+0x2f0>)
   dd744:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd748:	f003 fff0 	bl	e172c <__adddf3>
   dd74c:	4632      	mov	r2, r6
   dd74e:	463b      	mov	r3, r7
   dd750:	f004 f99e 	bl	e1a90 <__aeabi_dmul>
   dd754:	a33a      	add	r3, pc, #232	; (adr r3, dd840 <__ieee754_acos+0x2f8>)
   dd756:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd75a:	f003 ffe5 	bl	e1728 <__aeabi_dsub>
   dd75e:	4632      	mov	r2, r6
   dd760:	463b      	mov	r3, r7
   dd762:	f004 f995 	bl	e1a90 <__aeabi_dmul>
   dd766:	a338      	add	r3, pc, #224	; (adr r3, dd848 <__ieee754_acos+0x300>)
   dd768:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd76c:	f003 ffde 	bl	e172c <__adddf3>
   dd770:	4632      	mov	r2, r6
   dd772:	463b      	mov	r3, r7
   dd774:	f004 f98c 	bl	e1a90 <__aeabi_dmul>
   dd778:	a335      	add	r3, pc, #212	; (adr r3, dd850 <__ieee754_acos+0x308>)
   dd77a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd77e:	4680      	mov	r8, r0
   dd780:	4689      	mov	r9, r1
   dd782:	4630      	mov	r0, r6
   dd784:	4639      	mov	r1, r7
   dd786:	f004 f983 	bl	e1a90 <__aeabi_dmul>
   dd78a:	a333      	add	r3, pc, #204	; (adr r3, dd858 <__ieee754_acos+0x310>)
   dd78c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd790:	f003 ffca 	bl	e1728 <__aeabi_dsub>
   dd794:	4632      	mov	r2, r6
   dd796:	463b      	mov	r3, r7
   dd798:	f004 f97a 	bl	e1a90 <__aeabi_dmul>
   dd79c:	a330      	add	r3, pc, #192	; (adr r3, dd860 <__ieee754_acos+0x318>)
   dd79e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd7a2:	f003 ffc3 	bl	e172c <__adddf3>
   dd7a6:	4632      	mov	r2, r6
   dd7a8:	463b      	mov	r3, r7
   dd7aa:	f004 f971 	bl	e1a90 <__aeabi_dmul>
   dd7ae:	a32e      	add	r3, pc, #184	; (adr r3, dd868 <__ieee754_acos+0x320>)
   dd7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd7b4:	f003 ffb8 	bl	e1728 <__aeabi_dsub>
   dd7b8:	4632      	mov	r2, r6
   dd7ba:	463b      	mov	r3, r7
   dd7bc:	f004 f968 	bl	e1a90 <__aeabi_dmul>
   dd7c0:	2200      	movs	r2, #0
   dd7c2:	4b33      	ldr	r3, [pc, #204]	; (dd890 <__ieee754_acos+0x348>)
   dd7c4:	f003 ffb2 	bl	e172c <__adddf3>
   dd7c8:	4602      	mov	r2, r0
   dd7ca:	460b      	mov	r3, r1
   dd7cc:	4640      	mov	r0, r8
   dd7ce:	4649      	mov	r1, r9
   dd7d0:	f004 fa88 	bl	e1ce4 <__aeabi_ddiv>
   dd7d4:	4622      	mov	r2, r4
   dd7d6:	462b      	mov	r3, r5
   dd7d8:	f004 f95a 	bl	e1a90 <__aeabi_dmul>
   dd7dc:	4602      	mov	r2, r0
   dd7de:	460b      	mov	r3, r1
   dd7e0:	a125      	add	r1, pc, #148	; (adr r1, dd878 <__ieee754_acos+0x330>)
   dd7e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd7e6:	f003 ff9f 	bl	e1728 <__aeabi_dsub>
   dd7ea:	4602      	mov	r2, r0
   dd7ec:	460b      	mov	r3, r1
   dd7ee:	4620      	mov	r0, r4
   dd7f0:	4629      	mov	r1, r5
   dd7f2:	f003 ff99 	bl	e1728 <__aeabi_dsub>
   dd7f6:	4602      	mov	r2, r0
   dd7f8:	460b      	mov	r3, r1
   dd7fa:	a11d      	add	r1, pc, #116	; (adr r1, dd870 <__ieee754_acos+0x328>)
   dd7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd800:	f003 ff92 	bl	e1728 <__aeabi_dsub>
   dd804:	ec41 0b10 	vmov	d0, r0, r1
   dd808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd80c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dd880 <__ieee754_acos+0x338>
   dd810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd814:	f3af 8000 	nop.w
	...
   dd820:	0dfdf709 	.word	0x0dfdf709
   dd824:	3f023de1 	.word	0x3f023de1
   dd828:	7501b288 	.word	0x7501b288
   dd82c:	3f49efe0 	.word	0x3f49efe0
   dd830:	b5688f3b 	.word	0xb5688f3b
   dd834:	3fa48228 	.word	0x3fa48228
   dd838:	0e884455 	.word	0x0e884455
   dd83c:	3fc9c155 	.word	0x3fc9c155
   dd840:	03eb6f7d 	.word	0x03eb6f7d
   dd844:	3fd4d612 	.word	0x3fd4d612
   dd848:	55555555 	.word	0x55555555
   dd84c:	3fc55555 	.word	0x3fc55555
   dd850:	b12e9282 	.word	0xb12e9282
   dd854:	3fb3b8c5 	.word	0x3fb3b8c5
   dd858:	1b8d0159 	.word	0x1b8d0159
   dd85c:	3fe6066c 	.word	0x3fe6066c
   dd860:	9c598ac8 	.word	0x9c598ac8
   dd864:	40002ae5 	.word	0x40002ae5
   dd868:	1c8a2d4b 	.word	0x1c8a2d4b
   dd86c:	40033a27 	.word	0x40033a27
   dd870:	54442d18 	.word	0x54442d18
   dd874:	3ff921fb 	.word	0x3ff921fb
   dd878:	33145c07 	.word	0x33145c07
   dd87c:	3c91a626 	.word	0x3c91a626
   dd880:	54442d18 	.word	0x54442d18
   dd884:	400921fb 	.word	0x400921fb
   dd888:	3fefffff 	.word	0x3fefffff
   dd88c:	3fdfffff 	.word	0x3fdfffff
   dd890:	3ff00000 	.word	0x3ff00000
   dd894:	3fe00000 	.word	0x3fe00000
   dd898:	3c600000 	.word	0x3c600000
   dd89c:	ee10 0a10 	vmov	r0, s0
   dd8a0:	4629      	mov	r1, r5
   dd8a2:	2200      	movs	r2, #0
   dd8a4:	4b5e      	ldr	r3, [pc, #376]	; (dda20 <__ieee754_acos+0x4d8>)
   dd8a6:	f003 ff41 	bl	e172c <__adddf3>
   dd8aa:	2200      	movs	r2, #0
   dd8ac:	4b5d      	ldr	r3, [pc, #372]	; (dda24 <__ieee754_acos+0x4dc>)
   dd8ae:	f004 f8ef 	bl	e1a90 <__aeabi_dmul>
   dd8b2:	a343      	add	r3, pc, #268	; (adr r3, dd9c0 <__ieee754_acos+0x478>)
   dd8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8b8:	4604      	mov	r4, r0
   dd8ba:	460d      	mov	r5, r1
   dd8bc:	f004 f8e8 	bl	e1a90 <__aeabi_dmul>
   dd8c0:	a341      	add	r3, pc, #260	; (adr r3, dd9c8 <__ieee754_acos+0x480>)
   dd8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8c6:	f003 ff31 	bl	e172c <__adddf3>
   dd8ca:	4622      	mov	r2, r4
   dd8cc:	462b      	mov	r3, r5
   dd8ce:	f004 f8df 	bl	e1a90 <__aeabi_dmul>
   dd8d2:	a33f      	add	r3, pc, #252	; (adr r3, dd9d0 <__ieee754_acos+0x488>)
   dd8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8d8:	f003 ff26 	bl	e1728 <__aeabi_dsub>
   dd8dc:	4622      	mov	r2, r4
   dd8de:	462b      	mov	r3, r5
   dd8e0:	f004 f8d6 	bl	e1a90 <__aeabi_dmul>
   dd8e4:	a33c      	add	r3, pc, #240	; (adr r3, dd9d8 <__ieee754_acos+0x490>)
   dd8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8ea:	f003 ff1f 	bl	e172c <__adddf3>
   dd8ee:	4622      	mov	r2, r4
   dd8f0:	462b      	mov	r3, r5
   dd8f2:	f004 f8cd 	bl	e1a90 <__aeabi_dmul>
   dd8f6:	a33a      	add	r3, pc, #232	; (adr r3, dd9e0 <__ieee754_acos+0x498>)
   dd8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8fc:	f003 ff14 	bl	e1728 <__aeabi_dsub>
   dd900:	4622      	mov	r2, r4
   dd902:	462b      	mov	r3, r5
   dd904:	f004 f8c4 	bl	e1a90 <__aeabi_dmul>
   dd908:	a337      	add	r3, pc, #220	; (adr r3, dd9e8 <__ieee754_acos+0x4a0>)
   dd90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd90e:	f003 ff0d 	bl	e172c <__adddf3>
   dd912:	4622      	mov	r2, r4
   dd914:	462b      	mov	r3, r5
   dd916:	f004 f8bb 	bl	e1a90 <__aeabi_dmul>
   dd91a:	ec45 4b10 	vmov	d0, r4, r5
   dd91e:	4680      	mov	r8, r0
   dd920:	4689      	mov	r9, r1
   dd922:	f002 fa8d 	bl	dfe40 <__ieee754_sqrt>
   dd926:	4620      	mov	r0, r4
   dd928:	4629      	mov	r1, r5
   dd92a:	a331      	add	r3, pc, #196	; (adr r3, dd9f0 <__ieee754_acos+0x4a8>)
   dd92c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd930:	ec57 6b10 	vmov	r6, r7, d0
   dd934:	f004 f8ac 	bl	e1a90 <__aeabi_dmul>
   dd938:	a32f      	add	r3, pc, #188	; (adr r3, dd9f8 <__ieee754_acos+0x4b0>)
   dd93a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd93e:	f003 fef3 	bl	e1728 <__aeabi_dsub>
   dd942:	4622      	mov	r2, r4
   dd944:	462b      	mov	r3, r5
   dd946:	f004 f8a3 	bl	e1a90 <__aeabi_dmul>
   dd94a:	a32d      	add	r3, pc, #180	; (adr r3, dda00 <__ieee754_acos+0x4b8>)
   dd94c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd950:	f003 feec 	bl	e172c <__adddf3>
   dd954:	4622      	mov	r2, r4
   dd956:	462b      	mov	r3, r5
   dd958:	f004 f89a 	bl	e1a90 <__aeabi_dmul>
   dd95c:	a32a      	add	r3, pc, #168	; (adr r3, dda08 <__ieee754_acos+0x4c0>)
   dd95e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd962:	f003 fee1 	bl	e1728 <__aeabi_dsub>
   dd966:	4622      	mov	r2, r4
   dd968:	462b      	mov	r3, r5
   dd96a:	f004 f891 	bl	e1a90 <__aeabi_dmul>
   dd96e:	2200      	movs	r2, #0
   dd970:	4b2b      	ldr	r3, [pc, #172]	; (dda20 <__ieee754_acos+0x4d8>)
   dd972:	f003 fedb 	bl	e172c <__adddf3>
   dd976:	4602      	mov	r2, r0
   dd978:	460b      	mov	r3, r1
   dd97a:	4640      	mov	r0, r8
   dd97c:	4649      	mov	r1, r9
   dd97e:	f004 f9b1 	bl	e1ce4 <__aeabi_ddiv>
   dd982:	4632      	mov	r2, r6
   dd984:	463b      	mov	r3, r7
   dd986:	f004 f883 	bl	e1a90 <__aeabi_dmul>
   dd98a:	a321      	add	r3, pc, #132	; (adr r3, dda10 <__ieee754_acos+0x4c8>)
   dd98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd990:	f003 feca 	bl	e1728 <__aeabi_dsub>
   dd994:	4632      	mov	r2, r6
   dd996:	463b      	mov	r3, r7
   dd998:	f003 fec8 	bl	e172c <__adddf3>
   dd99c:	4602      	mov	r2, r0
   dd99e:	460b      	mov	r3, r1
   dd9a0:	f003 fec4 	bl	e172c <__adddf3>
   dd9a4:	4602      	mov	r2, r0
   dd9a6:	460b      	mov	r3, r1
   dd9a8:	a11b      	add	r1, pc, #108	; (adr r1, dda18 <__ieee754_acos+0x4d0>)
   dd9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd9ae:	f003 febb 	bl	e1728 <__aeabi_dsub>
   dd9b2:	ec41 0b10 	vmov	d0, r0, r1
   dd9b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd9ba:	bf00      	nop
   dd9bc:	f3af 8000 	nop.w
   dd9c0:	0dfdf709 	.word	0x0dfdf709
   dd9c4:	3f023de1 	.word	0x3f023de1
   dd9c8:	7501b288 	.word	0x7501b288
   dd9cc:	3f49efe0 	.word	0x3f49efe0
   dd9d0:	b5688f3b 	.word	0xb5688f3b
   dd9d4:	3fa48228 	.word	0x3fa48228
   dd9d8:	0e884455 	.word	0x0e884455
   dd9dc:	3fc9c155 	.word	0x3fc9c155
   dd9e0:	03eb6f7d 	.word	0x03eb6f7d
   dd9e4:	3fd4d612 	.word	0x3fd4d612
   dd9e8:	55555555 	.word	0x55555555
   dd9ec:	3fc55555 	.word	0x3fc55555
   dd9f0:	b12e9282 	.word	0xb12e9282
   dd9f4:	3fb3b8c5 	.word	0x3fb3b8c5
   dd9f8:	1b8d0159 	.word	0x1b8d0159
   dd9fc:	3fe6066c 	.word	0x3fe6066c
   dda00:	9c598ac8 	.word	0x9c598ac8
   dda04:	40002ae5 	.word	0x40002ae5
   dda08:	1c8a2d4b 	.word	0x1c8a2d4b
   dda0c:	40033a27 	.word	0x40033a27
   dda10:	33145c07 	.word	0x33145c07
   dda14:	3c91a626 	.word	0x3c91a626
   dda18:	54442d18 	.word	0x54442d18
   dda1c:	400921fb 	.word	0x400921fb
   dda20:	3ff00000 	.word	0x3ff00000
   dda24:	3fe00000 	.word	0x3fe00000

000dda28 <__ieee754_asin>:
   dda28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dda2c:	ec57 6b10 	vmov	r6, r7, d0
   dda30:	4bcb      	ldr	r3, [pc, #812]	; (ddd60 <__ieee754_asin+0x338>)
   dda32:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   dda36:	429d      	cmp	r5, r3
   dda38:	b083      	sub	sp, #12
   dda3a:	dd17      	ble.n	dda6c <__ieee754_asin+0x44>
   dda3c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   dda40:	ee10 3a10 	vmov	r3, s0
   dda44:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   dda48:	432b      	orrs	r3, r5
   dda4a:	d02b      	beq.n	ddaa4 <__ieee754_asin+0x7c>
   dda4c:	ee10 2a10 	vmov	r2, s0
   dda50:	463b      	mov	r3, r7
   dda52:	4630      	mov	r0, r6
   dda54:	4639      	mov	r1, r7
   dda56:	f003 fe67 	bl	e1728 <__aeabi_dsub>
   dda5a:	4602      	mov	r2, r0
   dda5c:	460b      	mov	r3, r1
   dda5e:	f004 f941 	bl	e1ce4 <__aeabi_ddiv>
   dda62:	ec41 0b10 	vmov	d0, r0, r1
   dda66:	b003      	add	sp, #12
   dda68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dda6c:	4bbd      	ldr	r3, [pc, #756]	; (ddd64 <__ieee754_asin+0x33c>)
   dda6e:	429d      	cmp	r5, r3
   dda70:	463c      	mov	r4, r7
   dda72:	dc33      	bgt.n	ddadc <__ieee754_asin+0xb4>
   dda74:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   dda78:	f280 817c 	bge.w	ddd74 <__ieee754_asin+0x34c>
   dda7c:	a39c      	add	r3, pc, #624	; (adr r3, ddcf0 <__ieee754_asin+0x2c8>)
   dda7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda82:	ee10 0a10 	vmov	r0, s0
   dda86:	4639      	mov	r1, r7
   dda88:	f003 fe50 	bl	e172c <__adddf3>
   dda8c:	2200      	movs	r2, #0
   dda8e:	4bb6      	ldr	r3, [pc, #728]	; (ddd68 <__ieee754_asin+0x340>)
   dda90:	f004 fa8e 	bl	e1fb0 <__aeabi_dcmpgt>
   dda94:	b310      	cbz	r0, ddadc <__ieee754_asin+0xb4>
   dda96:	4630      	mov	r0, r6
   dda98:	4639      	mov	r1, r7
   dda9a:	ec41 0b10 	vmov	d0, r0, r1
   dda9e:	b003      	add	sp, #12
   ddaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddaa4:	ee10 0a10 	vmov	r0, s0
   ddaa8:	a393      	add	r3, pc, #588	; (adr r3, ddcf8 <__ieee754_asin+0x2d0>)
   ddaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaae:	4639      	mov	r1, r7
   ddab0:	f003 ffee 	bl	e1a90 <__aeabi_dmul>
   ddab4:	a392      	add	r3, pc, #584	; (adr r3, ddd00 <__ieee754_asin+0x2d8>)
   ddab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaba:	4604      	mov	r4, r0
   ddabc:	460d      	mov	r5, r1
   ddabe:	4630      	mov	r0, r6
   ddac0:	4639      	mov	r1, r7
   ddac2:	f003 ffe5 	bl	e1a90 <__aeabi_dmul>
   ddac6:	4602      	mov	r2, r0
   ddac8:	460b      	mov	r3, r1
   ddaca:	4620      	mov	r0, r4
   ddacc:	4629      	mov	r1, r5
   ddace:	f003 fe2d 	bl	e172c <__adddf3>
   ddad2:	ec41 0b10 	vmov	d0, r0, r1
   ddad6:	b003      	add	sp, #12
   ddad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddadc:	ec47 6b10 	vmov	d0, r6, r7
   ddae0:	f7fe fdce 	bl	dc680 <fabs>
   ddae4:	2000      	movs	r0, #0
   ddae6:	ec53 2b10 	vmov	r2, r3, d0
   ddaea:	499f      	ldr	r1, [pc, #636]	; (ddd68 <__ieee754_asin+0x340>)
   ddaec:	f003 fe1c 	bl	e1728 <__aeabi_dsub>
   ddaf0:	2200      	movs	r2, #0
   ddaf2:	4b9e      	ldr	r3, [pc, #632]	; (ddd6c <__ieee754_asin+0x344>)
   ddaf4:	f003 ffcc 	bl	e1a90 <__aeabi_dmul>
   ddaf8:	a383      	add	r3, pc, #524	; (adr r3, ddd08 <__ieee754_asin+0x2e0>)
   ddafa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddafe:	4606      	mov	r6, r0
   ddb00:	460f      	mov	r7, r1
   ddb02:	f003 ffc5 	bl	e1a90 <__aeabi_dmul>
   ddb06:	a382      	add	r3, pc, #520	; (adr r3, ddd10 <__ieee754_asin+0x2e8>)
   ddb08:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb0c:	f003 fe0e 	bl	e172c <__adddf3>
   ddb10:	4632      	mov	r2, r6
   ddb12:	463b      	mov	r3, r7
   ddb14:	f003 ffbc 	bl	e1a90 <__aeabi_dmul>
   ddb18:	a37f      	add	r3, pc, #508	; (adr r3, ddd18 <__ieee754_asin+0x2f0>)
   ddb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb1e:	f003 fe03 	bl	e1728 <__aeabi_dsub>
   ddb22:	4632      	mov	r2, r6
   ddb24:	463b      	mov	r3, r7
   ddb26:	f003 ffb3 	bl	e1a90 <__aeabi_dmul>
   ddb2a:	a37d      	add	r3, pc, #500	; (adr r3, ddd20 <__ieee754_asin+0x2f8>)
   ddb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb30:	f003 fdfc 	bl	e172c <__adddf3>
   ddb34:	4632      	mov	r2, r6
   ddb36:	463b      	mov	r3, r7
   ddb38:	f003 ffaa 	bl	e1a90 <__aeabi_dmul>
   ddb3c:	a37a      	add	r3, pc, #488	; (adr r3, ddd28 <__ieee754_asin+0x300>)
   ddb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb42:	f003 fdf1 	bl	e1728 <__aeabi_dsub>
   ddb46:	4632      	mov	r2, r6
   ddb48:	463b      	mov	r3, r7
   ddb4a:	f003 ffa1 	bl	e1a90 <__aeabi_dmul>
   ddb4e:	a378      	add	r3, pc, #480	; (adr r3, ddd30 <__ieee754_asin+0x308>)
   ddb50:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb54:	f003 fdea 	bl	e172c <__adddf3>
   ddb58:	4632      	mov	r2, r6
   ddb5a:	463b      	mov	r3, r7
   ddb5c:	f003 ff98 	bl	e1a90 <__aeabi_dmul>
   ddb60:	a375      	add	r3, pc, #468	; (adr r3, ddd38 <__ieee754_asin+0x310>)
   ddb62:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb66:	4680      	mov	r8, r0
   ddb68:	4689      	mov	r9, r1
   ddb6a:	4630      	mov	r0, r6
   ddb6c:	4639      	mov	r1, r7
   ddb6e:	f003 ff8f 	bl	e1a90 <__aeabi_dmul>
   ddb72:	a373      	add	r3, pc, #460	; (adr r3, ddd40 <__ieee754_asin+0x318>)
   ddb74:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb78:	f003 fdd6 	bl	e1728 <__aeabi_dsub>
   ddb7c:	4632      	mov	r2, r6
   ddb7e:	463b      	mov	r3, r7
   ddb80:	f003 ff86 	bl	e1a90 <__aeabi_dmul>
   ddb84:	a370      	add	r3, pc, #448	; (adr r3, ddd48 <__ieee754_asin+0x320>)
   ddb86:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb8a:	f003 fdcf 	bl	e172c <__adddf3>
   ddb8e:	4632      	mov	r2, r6
   ddb90:	463b      	mov	r3, r7
   ddb92:	f003 ff7d 	bl	e1a90 <__aeabi_dmul>
   ddb96:	a36e      	add	r3, pc, #440	; (adr r3, ddd50 <__ieee754_asin+0x328>)
   ddb98:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb9c:	f003 fdc4 	bl	e1728 <__aeabi_dsub>
   ddba0:	4632      	mov	r2, r6
   ddba2:	463b      	mov	r3, r7
   ddba4:	f003 ff74 	bl	e1a90 <__aeabi_dmul>
   ddba8:	4b6f      	ldr	r3, [pc, #444]	; (ddd68 <__ieee754_asin+0x340>)
   ddbaa:	2200      	movs	r2, #0
   ddbac:	f003 fdbe 	bl	e172c <__adddf3>
   ddbb0:	ec47 6b10 	vmov	d0, r6, r7
   ddbb4:	e9cd 0100 	strd	r0, r1, [sp]
   ddbb8:	f002 f942 	bl	dfe40 <__ieee754_sqrt>
   ddbbc:	4b6c      	ldr	r3, [pc, #432]	; (ddd70 <__ieee754_asin+0x348>)
   ddbbe:	429d      	cmp	r5, r3
   ddbc0:	ec5b ab10 	vmov	sl, fp, d0
   ddbc4:	e9dd 0100 	ldrd	r0, r1, [sp]
   ddbc8:	dc6e      	bgt.n	ddca8 <__ieee754_asin+0x280>
   ddbca:	4602      	mov	r2, r0
   ddbcc:	460b      	mov	r3, r1
   ddbce:	4640      	mov	r0, r8
   ddbd0:	4649      	mov	r1, r9
   ddbd2:	2500      	movs	r5, #0
   ddbd4:	e9cd ab00 	strd	sl, fp, [sp]
   ddbd8:	9500      	str	r5, [sp, #0]
   ddbda:	f004 f883 	bl	e1ce4 <__aeabi_ddiv>
   ddbde:	e9dd 8900 	ldrd	r8, r9, [sp]
   ddbe2:	4652      	mov	r2, sl
   ddbe4:	e9cd 0100 	strd	r0, r1, [sp]
   ddbe8:	465b      	mov	r3, fp
   ddbea:	4650      	mov	r0, sl
   ddbec:	4659      	mov	r1, fp
   ddbee:	f003 fd9d 	bl	e172c <__adddf3>
   ddbf2:	4602      	mov	r2, r0
   ddbf4:	460b      	mov	r3, r1
   ddbf6:	e9dd 0100 	ldrd	r0, r1, [sp]
   ddbfa:	f003 ff49 	bl	e1a90 <__aeabi_dmul>
   ddbfe:	4642      	mov	r2, r8
   ddc00:	e9cd 0100 	strd	r0, r1, [sp]
   ddc04:	464b      	mov	r3, r9
   ddc06:	4640      	mov	r0, r8
   ddc08:	4649      	mov	r1, r9
   ddc0a:	f003 ff41 	bl	e1a90 <__aeabi_dmul>
   ddc0e:	4602      	mov	r2, r0
   ddc10:	460b      	mov	r3, r1
   ddc12:	4630      	mov	r0, r6
   ddc14:	4639      	mov	r1, r7
   ddc16:	f003 fd87 	bl	e1728 <__aeabi_dsub>
   ddc1a:	4642      	mov	r2, r8
   ddc1c:	4606      	mov	r6, r0
   ddc1e:	460f      	mov	r7, r1
   ddc20:	464b      	mov	r3, r9
   ddc22:	4650      	mov	r0, sl
   ddc24:	4659      	mov	r1, fp
   ddc26:	f003 fd81 	bl	e172c <__adddf3>
   ddc2a:	4602      	mov	r2, r0
   ddc2c:	460b      	mov	r3, r1
   ddc2e:	4630      	mov	r0, r6
   ddc30:	4639      	mov	r1, r7
   ddc32:	f004 f857 	bl	e1ce4 <__aeabi_ddiv>
   ddc36:	4602      	mov	r2, r0
   ddc38:	460b      	mov	r3, r1
   ddc3a:	f003 fd77 	bl	e172c <__adddf3>
   ddc3e:	4602      	mov	r2, r0
   ddc40:	460b      	mov	r3, r1
   ddc42:	a12f      	add	r1, pc, #188	; (adr r1, ddd00 <__ieee754_asin+0x2d8>)
   ddc44:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddc48:	f003 fd6e 	bl	e1728 <__aeabi_dsub>
   ddc4c:	4602      	mov	r2, r0
   ddc4e:	460b      	mov	r3, r1
   ddc50:	e9dd 0100 	ldrd	r0, r1, [sp]
   ddc54:	f003 fd68 	bl	e1728 <__aeabi_dsub>
   ddc58:	4642      	mov	r2, r8
   ddc5a:	4606      	mov	r6, r0
   ddc5c:	460f      	mov	r7, r1
   ddc5e:	464b      	mov	r3, r9
   ddc60:	4640      	mov	r0, r8
   ddc62:	4649      	mov	r1, r9
   ddc64:	f003 fd62 	bl	e172c <__adddf3>
   ddc68:	4602      	mov	r2, r0
   ddc6a:	460b      	mov	r3, r1
   ddc6c:	a13a      	add	r1, pc, #232	; (adr r1, ddd58 <__ieee754_asin+0x330>)
   ddc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddc72:	f003 fd59 	bl	e1728 <__aeabi_dsub>
   ddc76:	4602      	mov	r2, r0
   ddc78:	460b      	mov	r3, r1
   ddc7a:	4630      	mov	r0, r6
   ddc7c:	4639      	mov	r1, r7
   ddc7e:	f003 fd53 	bl	e1728 <__aeabi_dsub>
   ddc82:	4602      	mov	r2, r0
   ddc84:	460b      	mov	r3, r1
   ddc86:	a134      	add	r1, pc, #208	; (adr r1, ddd58 <__ieee754_asin+0x330>)
   ddc88:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddc8c:	f003 fd4c 	bl	e1728 <__aeabi_dsub>
   ddc90:	4602      	mov	r2, r0
   ddc92:	460b      	mov	r3, r1
   ddc94:	2c00      	cmp	r4, #0
   ddc96:	f340 80e4 	ble.w	dde62 <__ieee754_asin+0x43a>
   ddc9a:	4610      	mov	r0, r2
   ddc9c:	4619      	mov	r1, r3
   ddc9e:	ec41 0b10 	vmov	d0, r0, r1
   ddca2:	b003      	add	sp, #12
   ddca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddca8:	4602      	mov	r2, r0
   ddcaa:	460b      	mov	r3, r1
   ddcac:	4640      	mov	r0, r8
   ddcae:	4649      	mov	r1, r9
   ddcb0:	f004 f818 	bl	e1ce4 <__aeabi_ddiv>
   ddcb4:	4652      	mov	r2, sl
   ddcb6:	465b      	mov	r3, fp
   ddcb8:	f003 feea 	bl	e1a90 <__aeabi_dmul>
   ddcbc:	4652      	mov	r2, sl
   ddcbe:	465b      	mov	r3, fp
   ddcc0:	f003 fd34 	bl	e172c <__adddf3>
   ddcc4:	4602      	mov	r2, r0
   ddcc6:	460b      	mov	r3, r1
   ddcc8:	f003 fd30 	bl	e172c <__adddf3>
   ddccc:	a30c      	add	r3, pc, #48	; (adr r3, ddd00 <__ieee754_asin+0x2d8>)
   ddcce:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcd2:	f003 fd29 	bl	e1728 <__aeabi_dsub>
   ddcd6:	4602      	mov	r2, r0
   ddcd8:	460b      	mov	r3, r1
   ddcda:	a107      	add	r1, pc, #28	; (adr r1, ddcf8 <__ieee754_asin+0x2d0>)
   ddcdc:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddce0:	f003 fd22 	bl	e1728 <__aeabi_dsub>
   ddce4:	4602      	mov	r2, r0
   ddce6:	460b      	mov	r3, r1
   ddce8:	e7d4      	b.n	ddc94 <__ieee754_asin+0x26c>
   ddcea:	bf00      	nop
   ddcec:	f3af 8000 	nop.w
   ddcf0:	8800759c 	.word	0x8800759c
   ddcf4:	7e37e43c 	.word	0x7e37e43c
   ddcf8:	54442d18 	.word	0x54442d18
   ddcfc:	3ff921fb 	.word	0x3ff921fb
   ddd00:	33145c07 	.word	0x33145c07
   ddd04:	3c91a626 	.word	0x3c91a626
   ddd08:	0dfdf709 	.word	0x0dfdf709
   ddd0c:	3f023de1 	.word	0x3f023de1
   ddd10:	7501b288 	.word	0x7501b288
   ddd14:	3f49efe0 	.word	0x3f49efe0
   ddd18:	b5688f3b 	.word	0xb5688f3b
   ddd1c:	3fa48228 	.word	0x3fa48228
   ddd20:	0e884455 	.word	0x0e884455
   ddd24:	3fc9c155 	.word	0x3fc9c155
   ddd28:	03eb6f7d 	.word	0x03eb6f7d
   ddd2c:	3fd4d612 	.word	0x3fd4d612
   ddd30:	55555555 	.word	0x55555555
   ddd34:	3fc55555 	.word	0x3fc55555
   ddd38:	b12e9282 	.word	0xb12e9282
   ddd3c:	3fb3b8c5 	.word	0x3fb3b8c5
   ddd40:	1b8d0159 	.word	0x1b8d0159
   ddd44:	3fe6066c 	.word	0x3fe6066c
   ddd48:	9c598ac8 	.word	0x9c598ac8
   ddd4c:	40002ae5 	.word	0x40002ae5
   ddd50:	1c8a2d4b 	.word	0x1c8a2d4b
   ddd54:	40033a27 	.word	0x40033a27
   ddd58:	54442d18 	.word	0x54442d18
   ddd5c:	3fe921fb 	.word	0x3fe921fb
   ddd60:	3fefffff 	.word	0x3fefffff
   ddd64:	3fdfffff 	.word	0x3fdfffff
   ddd68:	3ff00000 	.word	0x3ff00000
   ddd6c:	3fe00000 	.word	0x3fe00000
   ddd70:	3fef3332 	.word	0x3fef3332
   ddd74:	ee10 2a10 	vmov	r2, s0
   ddd78:	ee10 0a10 	vmov	r0, s0
   ddd7c:	463b      	mov	r3, r7
   ddd7e:	4639      	mov	r1, r7
   ddd80:	f003 fe86 	bl	e1a90 <__aeabi_dmul>
   ddd84:	a33b      	add	r3, pc, #236	; (adr r3, dde74 <__ieee754_asin+0x44c>)
   ddd86:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd8a:	4604      	mov	r4, r0
   ddd8c:	460d      	mov	r5, r1
   ddd8e:	f003 fe7f 	bl	e1a90 <__aeabi_dmul>
   ddd92:	a33a      	add	r3, pc, #232	; (adr r3, dde7c <__ieee754_asin+0x454>)
   ddd94:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd98:	f003 fcc8 	bl	e172c <__adddf3>
   ddd9c:	4622      	mov	r2, r4
   ddd9e:	462b      	mov	r3, r5
   ddda0:	f003 fe76 	bl	e1a90 <__aeabi_dmul>
   ddda4:	a337      	add	r3, pc, #220	; (adr r3, dde84 <__ieee754_asin+0x45c>)
   ddda6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddaa:	f003 fcbd 	bl	e1728 <__aeabi_dsub>
   dddae:	4622      	mov	r2, r4
   dddb0:	462b      	mov	r3, r5
   dddb2:	f003 fe6d 	bl	e1a90 <__aeabi_dmul>
   dddb6:	a335      	add	r3, pc, #212	; (adr r3, dde8c <__ieee754_asin+0x464>)
   dddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddbc:	f003 fcb6 	bl	e172c <__adddf3>
   dddc0:	4622      	mov	r2, r4
   dddc2:	462b      	mov	r3, r5
   dddc4:	f003 fe64 	bl	e1a90 <__aeabi_dmul>
   dddc8:	a332      	add	r3, pc, #200	; (adr r3, dde94 <__ieee754_asin+0x46c>)
   dddca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddce:	f003 fcab 	bl	e1728 <__aeabi_dsub>
   dddd2:	4622      	mov	r2, r4
   dddd4:	462b      	mov	r3, r5
   dddd6:	f003 fe5b 	bl	e1a90 <__aeabi_dmul>
   dddda:	a330      	add	r3, pc, #192	; (adr r3, dde9c <__ieee754_asin+0x474>)
   ddddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddde0:	f003 fca4 	bl	e172c <__adddf3>
   ddde4:	4622      	mov	r2, r4
   ddde6:	462b      	mov	r3, r5
   ddde8:	f003 fe52 	bl	e1a90 <__aeabi_dmul>
   dddec:	a32d      	add	r3, pc, #180	; (adr r3, ddea4 <__ieee754_asin+0x47c>)
   dddee:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddf2:	4680      	mov	r8, r0
   dddf4:	4689      	mov	r9, r1
   dddf6:	4620      	mov	r0, r4
   dddf8:	4629      	mov	r1, r5
   dddfa:	f003 fe49 	bl	e1a90 <__aeabi_dmul>
   dddfe:	a32b      	add	r3, pc, #172	; (adr r3, ddeac <__ieee754_asin+0x484>)
   dde00:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde04:	f003 fc90 	bl	e1728 <__aeabi_dsub>
   dde08:	4622      	mov	r2, r4
   dde0a:	462b      	mov	r3, r5
   dde0c:	f003 fe40 	bl	e1a90 <__aeabi_dmul>
   dde10:	a328      	add	r3, pc, #160	; (adr r3, ddeb4 <__ieee754_asin+0x48c>)
   dde12:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde16:	f003 fc89 	bl	e172c <__adddf3>
   dde1a:	4622      	mov	r2, r4
   dde1c:	462b      	mov	r3, r5
   dde1e:	f003 fe37 	bl	e1a90 <__aeabi_dmul>
   dde22:	a326      	add	r3, pc, #152	; (adr r3, ddebc <__ieee754_asin+0x494>)
   dde24:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde28:	f003 fc7e 	bl	e1728 <__aeabi_dsub>
   dde2c:	4622      	mov	r2, r4
   dde2e:	462b      	mov	r3, r5
   dde30:	f003 fe2e 	bl	e1a90 <__aeabi_dmul>
   dde34:	2200      	movs	r2, #0
   dde36:	4b0e      	ldr	r3, [pc, #56]	; (dde70 <__ieee754_asin+0x448>)
   dde38:	f003 fc78 	bl	e172c <__adddf3>
   dde3c:	4602      	mov	r2, r0
   dde3e:	460b      	mov	r3, r1
   dde40:	4640      	mov	r0, r8
   dde42:	4649      	mov	r1, r9
   dde44:	f003 ff4e 	bl	e1ce4 <__aeabi_ddiv>
   dde48:	4632      	mov	r2, r6
   dde4a:	463b      	mov	r3, r7
   dde4c:	f003 fe20 	bl	e1a90 <__aeabi_dmul>
   dde50:	4632      	mov	r2, r6
   dde52:	463b      	mov	r3, r7
   dde54:	f003 fc6a 	bl	e172c <__adddf3>
   dde58:	ec41 0b10 	vmov	d0, r0, r1
   dde5c:	b003      	add	sp, #12
   dde5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dde62:	4610      	mov	r0, r2
   dde64:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dde68:	e5fb      	b.n	dda62 <__ieee754_asin+0x3a>
   dde6a:	bf00      	nop
   dde6c:	f3af 8000 	nop.w
   dde70:	3ff00000 	.word	0x3ff00000
   dde74:	0dfdf709 	.word	0x0dfdf709
   dde78:	3f023de1 	.word	0x3f023de1
   dde7c:	7501b288 	.word	0x7501b288
   dde80:	3f49efe0 	.word	0x3f49efe0
   dde84:	b5688f3b 	.word	0xb5688f3b
   dde88:	3fa48228 	.word	0x3fa48228
   dde8c:	0e884455 	.word	0x0e884455
   dde90:	3fc9c155 	.word	0x3fc9c155
   dde94:	03eb6f7d 	.word	0x03eb6f7d
   dde98:	3fd4d612 	.word	0x3fd4d612
   dde9c:	55555555 	.word	0x55555555
   ddea0:	3fc55555 	.word	0x3fc55555
   ddea4:	b12e9282 	.word	0xb12e9282
   ddea8:	3fb3b8c5 	.word	0x3fb3b8c5
   ddeac:	1b8d0159 	.word	0x1b8d0159
   ddeb0:	3fe6066c 	.word	0x3fe6066c
   ddeb4:	9c598ac8 	.word	0x9c598ac8
   ddeb8:	40002ae5 	.word	0x40002ae5
   ddebc:	1c8a2d4b 	.word	0x1c8a2d4b
   ddec0:	40033a27 	.word	0x40033a27
   ddec4:	00000000 	.word	0x00000000

000ddec8 <__ieee754_atan2>:
   ddec8:	ec51 0b11 	vmov	r0, r1, d1
   ddecc:	4243      	negs	r3, r0
   ddece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dded2:	4303      	orrs	r3, r0
   dded4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dded8:	4f75      	ldr	r7, [pc, #468]	; (de0b0 <__ieee754_atan2+0x1e8>)
   ddeda:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   ddede:	42bb      	cmp	r3, r7
   ddee0:	ec55 4b10 	vmov	r4, r5, d0
   ddee4:	d849      	bhi.n	ddf7a <__ieee754_atan2+0xb2>
   ddee6:	4263      	negs	r3, r4
   ddee8:	4323      	orrs	r3, r4
   ddeea:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   ddeee:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   ddef2:	42bb      	cmp	r3, r7
   ddef4:	46a9      	mov	r9, r5
   ddef6:	d840      	bhi.n	ddf7a <__ieee754_atan2+0xb2>
   ddef8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   ddefc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   ddf00:	4303      	orrs	r3, r0
   ddf02:	468e      	mov	lr, r1
   ddf04:	d050      	beq.n	ddfa8 <__ieee754_atan2+0xe0>
   ddf06:	178e      	asrs	r6, r1, #30
   ddf08:	f006 0602 	and.w	r6, r6, #2
   ddf0c:	ea54 030a 	orrs.w	r3, r4, sl
   ddf10:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   ddf14:	d039      	beq.n	ddf8a <__ieee754_atan2+0xc2>
   ddf16:	ea50 0308 	orrs.w	r3, r0, r8
   ddf1a:	d03e      	beq.n	ddf9a <__ieee754_atan2+0xd2>
   ddf1c:	45b8      	cmp	r8, r7
   ddf1e:	d055      	beq.n	ddfcc <__ieee754_atan2+0x104>
   ddf20:	45ba      	cmp	sl, r7
   ddf22:	d03a      	beq.n	ddf9a <__ieee754_atan2+0xd2>
   ddf24:	ebc8 080a 	rsb	r8, r8, sl
   ddf28:	ea4f 5828 	mov.w	r8, r8, asr #20
   ddf2c:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   ddf30:	dc40      	bgt.n	ddfb4 <__ieee754_atan2+0xec>
   ddf32:	2900      	cmp	r1, #0
   ddf34:	db70      	blt.n	de018 <__ieee754_atan2+0x150>
   ddf36:	4602      	mov	r2, r0
   ddf38:	460b      	mov	r3, r1
   ddf3a:	4620      	mov	r0, r4
   ddf3c:	4629      	mov	r1, r5
   ddf3e:	f003 fed1 	bl	e1ce4 <__aeabi_ddiv>
   ddf42:	ec41 0b10 	vmov	d0, r0, r1
   ddf46:	f7fe fb9b 	bl	dc680 <fabs>
   ddf4a:	f7fe f8ed 	bl	dc128 <atan>
   ddf4e:	ec51 0b10 	vmov	r0, r1, d0
   ddf52:	2e01      	cmp	r6, #1
   ddf54:	d05a      	beq.n	de00c <__ieee754_atan2+0x144>
   ddf56:	2e02      	cmp	r6, #2
   ddf58:	d048      	beq.n	ddfec <__ieee754_atan2+0x124>
   ddf5a:	2e00      	cmp	r6, #0
   ddf5c:	d042      	beq.n	ddfe4 <__ieee754_atan2+0x11c>
   ddf5e:	a33e      	add	r3, pc, #248	; (adr r3, de058 <__ieee754_atan2+0x190>)
   ddf60:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddf64:	f003 fbe0 	bl	e1728 <__aeabi_dsub>
   ddf68:	a33d      	add	r3, pc, #244	; (adr r3, de060 <__ieee754_atan2+0x198>)
   ddf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddf6e:	f003 fbdb 	bl	e1728 <__aeabi_dsub>
   ddf72:	ec41 0b10 	vmov	d0, r0, r1
   ddf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf7a:	4622      	mov	r2, r4
   ddf7c:	462b      	mov	r3, r5
   ddf7e:	f003 fbd5 	bl	e172c <__adddf3>
   ddf82:	ec41 0b10 	vmov	d0, r0, r1
   ddf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf8a:	2e02      	cmp	r6, #2
   ddf8c:	d016      	beq.n	ddfbc <__ieee754_atan2+0xf4>
   ddf8e:	2e03      	cmp	r6, #3
   ddf90:	d10e      	bne.n	ddfb0 <__ieee754_atan2+0xe8>
   ddf92:	ed9f 0b35 	vldr	d0, [pc, #212]	; de068 <__ieee754_atan2+0x1a0>
   ddf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddf9a:	f1b9 0f00 	cmp.w	r9, #0
   ddf9e:	db11      	blt.n	ddfc4 <__ieee754_atan2+0xfc>
   ddfa0:	ed9f 0b33 	vldr	d0, [pc, #204]	; de070 <__ieee754_atan2+0x1a8>
   ddfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddfac:	f7fe b8bc 	b.w	dc128 <atan>
   ddfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfb4:	a12e      	add	r1, pc, #184	; (adr r1, de070 <__ieee754_atan2+0x1a8>)
   ddfb6:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddfba:	e7ca      	b.n	ddf52 <__ieee754_atan2+0x8a>
   ddfbc:	ed9f 0b28 	vldr	d0, [pc, #160]	; de060 <__ieee754_atan2+0x198>
   ddfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfc4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; de078 <__ieee754_atan2+0x1b0>
   ddfc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfcc:	45c2      	cmp	sl, r8
   ddfce:	d029      	beq.n	de024 <__ieee754_atan2+0x15c>
   ddfd0:	2e02      	cmp	r6, #2
   ddfd2:	d0f3      	beq.n	ddfbc <__ieee754_atan2+0xf4>
   ddfd4:	2e03      	cmp	r6, #3
   ddfd6:	d0dc      	beq.n	ddf92 <__ieee754_atan2+0xca>
   ddfd8:	2e01      	cmp	r6, #1
   ddfda:	d02d      	beq.n	de038 <__ieee754_atan2+0x170>
   ddfdc:	ed9f 0b28 	vldr	d0, [pc, #160]	; de080 <__ieee754_atan2+0x1b8>
   ddfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfe4:	ec41 0b10 	vmov	d0, r0, r1
   ddfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ddfec:	a31a      	add	r3, pc, #104	; (adr r3, de058 <__ieee754_atan2+0x190>)
   ddfee:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddff2:	f003 fb99 	bl	e1728 <__aeabi_dsub>
   ddff6:	4602      	mov	r2, r0
   ddff8:	460b      	mov	r3, r1
   ddffa:	a119      	add	r1, pc, #100	; (adr r1, de060 <__ieee754_atan2+0x198>)
   ddffc:	e9d1 0100 	ldrd	r0, r1, [r1]
   de000:	f003 fb92 	bl	e1728 <__aeabi_dsub>
   de004:	ec41 0b10 	vmov	d0, r0, r1
   de008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de00c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   de010:	ec41 0b10 	vmov	d0, r0, r1
   de014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de018:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   de01c:	da8b      	bge.n	ddf36 <__ieee754_atan2+0x6e>
   de01e:	2000      	movs	r0, #0
   de020:	2100      	movs	r1, #0
   de022:	e796      	b.n	ddf52 <__ieee754_atan2+0x8a>
   de024:	2e02      	cmp	r6, #2
   de026:	d013      	beq.n	de050 <__ieee754_atan2+0x188>
   de028:	2e03      	cmp	r6, #3
   de02a:	d00d      	beq.n	de048 <__ieee754_atan2+0x180>
   de02c:	2e01      	cmp	r6, #1
   de02e:	d007      	beq.n	de040 <__ieee754_atan2+0x178>
   de030:	ed9f 0b15 	vldr	d0, [pc, #84]	; de088 <__ieee754_atan2+0x1c0>
   de034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de038:	ed9f 0b15 	vldr	d0, [pc, #84]	; de090 <__ieee754_atan2+0x1c8>
   de03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de040:	ed9f 0b15 	vldr	d0, [pc, #84]	; de098 <__ieee754_atan2+0x1d0>
   de044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de048:	ed9f 0b15 	vldr	d0, [pc, #84]	; de0a0 <__ieee754_atan2+0x1d8>
   de04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de050:	ed9f 0b15 	vldr	d0, [pc, #84]	; de0a8 <__ieee754_atan2+0x1e0>
   de054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de058:	33145c07 	.word	0x33145c07
   de05c:	3ca1a626 	.word	0x3ca1a626
   de060:	54442d18 	.word	0x54442d18
   de064:	400921fb 	.word	0x400921fb
   de068:	54442d18 	.word	0x54442d18
   de06c:	c00921fb 	.word	0xc00921fb
   de070:	54442d18 	.word	0x54442d18
   de074:	3ff921fb 	.word	0x3ff921fb
   de078:	54442d18 	.word	0x54442d18
   de07c:	bff921fb 	.word	0xbff921fb
	...
   de088:	54442d18 	.word	0x54442d18
   de08c:	3fe921fb 	.word	0x3fe921fb
   de090:	00000000 	.word	0x00000000
   de094:	80000000 	.word	0x80000000
   de098:	54442d18 	.word	0x54442d18
   de09c:	bfe921fb 	.word	0xbfe921fb
   de0a0:	7f3321d2 	.word	0x7f3321d2
   de0a4:	c002d97c 	.word	0xc002d97c
   de0a8:	7f3321d2 	.word	0x7f3321d2
   de0ac:	4002d97c 	.word	0x4002d97c
   de0b0:	7ff00000 	.word	0x7ff00000
   de0b4:	00000000 	.word	0x00000000

000de0b8 <__ieee754_cosh>:
   de0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de0bc:	ec53 2b10 	vmov	r2, r3, d0
   de0c0:	4953      	ldr	r1, [pc, #332]	; (de210 <__ieee754_cosh+0x158>)
   de0c2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   de0c6:	428c      	cmp	r4, r1
   de0c8:	dc12      	bgt.n	de0f0 <__ieee754_cosh+0x38>
   de0ca:	4952      	ldr	r1, [pc, #328]	; (de214 <__ieee754_cosh+0x15c>)
   de0cc:	428c      	cmp	r4, r1
   de0ce:	dd17      	ble.n	de100 <__ieee754_cosh+0x48>
   de0d0:	4951      	ldr	r1, [pc, #324]	; (de218 <__ieee754_cosh+0x160>)
   de0d2:	428c      	cmp	r4, r1
   de0d4:	dd64      	ble.n	de1a0 <__ieee754_cosh+0xe8>
   de0d6:	4951      	ldr	r1, [pc, #324]	; (de21c <__ieee754_cosh+0x164>)
   de0d8:	428c      	cmp	r4, r1
   de0da:	f340 8084 	ble.w	de1e6 <__ieee754_cosh+0x12e>
   de0de:	4950      	ldr	r1, [pc, #320]	; (de220 <__ieee754_cosh+0x168>)
   de0e0:	428c      	cmp	r4, r1
   de0e2:	dd3e      	ble.n	de162 <__ieee754_cosh+0xaa>
   de0e4:	3101      	adds	r1, #1
   de0e6:	428c      	cmp	r4, r1
   de0e8:	d038      	beq.n	de15c <__ieee754_cosh+0xa4>
   de0ea:	a347      	add	r3, pc, #284	; (adr r3, de208 <__ieee754_cosh+0x150>)
   de0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0f0:	4610      	mov	r0, r2
   de0f2:	4619      	mov	r1, r3
   de0f4:	f003 fccc 	bl	e1a90 <__aeabi_dmul>
   de0f8:	ec41 0b10 	vmov	d0, r0, r1
   de0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de100:	f7fe fabe 	bl	dc680 <fabs>
   de104:	f002 ff70 	bl	e0fe8 <expm1>
   de108:	ec59 8b10 	vmov	r8, r9, d0
   de10c:	2200      	movs	r2, #0
   de10e:	4b45      	ldr	r3, [pc, #276]	; (de224 <__ieee754_cosh+0x16c>)
   de110:	ee10 0a10 	vmov	r0, s0
   de114:	4649      	mov	r1, r9
   de116:	f003 fb09 	bl	e172c <__adddf3>
   de11a:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   de11e:	4606      	mov	r6, r0
   de120:	460f      	mov	r7, r1
   de122:	db5c      	blt.n	de1de <__ieee754_cosh+0x126>
   de124:	4642      	mov	r2, r8
   de126:	464b      	mov	r3, r9
   de128:	4640      	mov	r0, r8
   de12a:	4649      	mov	r1, r9
   de12c:	f003 fcb0 	bl	e1a90 <__aeabi_dmul>
   de130:	4632      	mov	r2, r6
   de132:	4604      	mov	r4, r0
   de134:	460d      	mov	r5, r1
   de136:	463b      	mov	r3, r7
   de138:	4630      	mov	r0, r6
   de13a:	4639      	mov	r1, r7
   de13c:	f003 faf6 	bl	e172c <__adddf3>
   de140:	4602      	mov	r2, r0
   de142:	460b      	mov	r3, r1
   de144:	4620      	mov	r0, r4
   de146:	4629      	mov	r1, r5
   de148:	f003 fdcc 	bl	e1ce4 <__aeabi_ddiv>
   de14c:	2200      	movs	r2, #0
   de14e:	4b35      	ldr	r3, [pc, #212]	; (de224 <__ieee754_cosh+0x16c>)
   de150:	f003 faec 	bl	e172c <__adddf3>
   de154:	ec41 0b10 	vmov	d0, r0, r1
   de158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de15c:	4932      	ldr	r1, [pc, #200]	; (de228 <__ieee754_cosh+0x170>)
   de15e:	428a      	cmp	r2, r1
   de160:	d8c3      	bhi.n	de0ea <__ieee754_cosh+0x32>
   de162:	ec43 2b10 	vmov	d0, r2, r3
   de166:	f7fe fa8b 	bl	dc680 <fabs>
   de16a:	2200      	movs	r2, #0
   de16c:	4b2f      	ldr	r3, [pc, #188]	; (de22c <__ieee754_cosh+0x174>)
   de16e:	ec51 0b10 	vmov	r0, r1, d0
   de172:	f003 fc8d 	bl	e1a90 <__aeabi_dmul>
   de176:	ec41 0b10 	vmov	d0, r0, r1
   de17a:	f000 f859 	bl	de230 <__ieee754_exp>
   de17e:	ec55 4b10 	vmov	r4, r5, d0
   de182:	ee10 0a10 	vmov	r0, s0
   de186:	2200      	movs	r2, #0
   de188:	4b28      	ldr	r3, [pc, #160]	; (de22c <__ieee754_cosh+0x174>)
   de18a:	4629      	mov	r1, r5
   de18c:	f003 fc80 	bl	e1a90 <__aeabi_dmul>
   de190:	4622      	mov	r2, r4
   de192:	462b      	mov	r3, r5
   de194:	f003 fc7c 	bl	e1a90 <__aeabi_dmul>
   de198:	ec41 0b10 	vmov	d0, r0, r1
   de19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de1a0:	f7fe fa6e 	bl	dc680 <fabs>
   de1a4:	f000 f844 	bl	de230 <__ieee754_exp>
   de1a8:	ec55 4b10 	vmov	r4, r5, d0
   de1ac:	ee10 0a10 	vmov	r0, s0
   de1b0:	2200      	movs	r2, #0
   de1b2:	4b1e      	ldr	r3, [pc, #120]	; (de22c <__ieee754_cosh+0x174>)
   de1b4:	4629      	mov	r1, r5
   de1b6:	f003 fc6b 	bl	e1a90 <__aeabi_dmul>
   de1ba:	4622      	mov	r2, r4
   de1bc:	4606      	mov	r6, r0
   de1be:	460f      	mov	r7, r1
   de1c0:	462b      	mov	r3, r5
   de1c2:	2000      	movs	r0, #0
   de1c4:	4919      	ldr	r1, [pc, #100]	; (de22c <__ieee754_cosh+0x174>)
   de1c6:	f003 fd8d 	bl	e1ce4 <__aeabi_ddiv>
   de1ca:	4602      	mov	r2, r0
   de1cc:	460b      	mov	r3, r1
   de1ce:	4630      	mov	r0, r6
   de1d0:	4639      	mov	r1, r7
   de1d2:	f003 faab 	bl	e172c <__adddf3>
   de1d6:	ec41 0b10 	vmov	d0, r0, r1
   de1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de1de:	ec47 6b10 	vmov	d0, r6, r7
   de1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de1e6:	f7fe fa4b 	bl	dc680 <fabs>
   de1ea:	f000 f821 	bl	de230 <__ieee754_exp>
   de1ee:	2200      	movs	r2, #0
   de1f0:	4b0e      	ldr	r3, [pc, #56]	; (de22c <__ieee754_cosh+0x174>)
   de1f2:	ec51 0b10 	vmov	r0, r1, d0
   de1f6:	f003 fc4b 	bl	e1a90 <__aeabi_dmul>
   de1fa:	ec41 0b10 	vmov	d0, r0, r1
   de1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de202:	bf00      	nop
   de204:	f3af 8000 	nop.w
   de208:	8800759c 	.word	0x8800759c
   de20c:	7e37e43c 	.word	0x7e37e43c
   de210:	7fefffff 	.word	0x7fefffff
   de214:	3fd62e42 	.word	0x3fd62e42
   de218:	4035ffff 	.word	0x4035ffff
   de21c:	40862e41 	.word	0x40862e41
   de220:	408633cd 	.word	0x408633cd
   de224:	3ff00000 	.word	0x3ff00000
   de228:	8fb9f87d 	.word	0x8fb9f87d
   de22c:	3fe00000 	.word	0x3fe00000

000de230 <__ieee754_exp>:
   de230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de234:	ec55 4b10 	vmov	r4, r5, d0
   de238:	49bd      	ldr	r1, [pc, #756]	; (de530 <__ieee754_exp+0x300>)
   de23a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   de23e:	428a      	cmp	r2, r1
   de240:	b083      	sub	sp, #12
   de242:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   de246:	d90d      	bls.n	de264 <__ieee754_exp+0x34>
   de248:	49ba      	ldr	r1, [pc, #744]	; (de534 <__ieee754_exp+0x304>)
   de24a:	428a      	cmp	r2, r1
   de24c:	d92a      	bls.n	de2a4 <__ieee754_exp+0x74>
   de24e:	f3c5 0313 	ubfx	r3, r5, #0, #20
   de252:	4323      	orrs	r3, r4
   de254:	f040 80fa 	bne.w	de44c <__ieee754_exp+0x21c>
   de258:	b10f      	cbz	r7, de25e <__ieee754_exp+0x2e>
   de25a:	ed9f 0b9d 	vldr	d0, [pc, #628]	; de4d0 <__ieee754_exp+0x2a0>
   de25e:	b003      	add	sp, #12
   de260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de264:	4bb4      	ldr	r3, [pc, #720]	; (de538 <__ieee754_exp+0x308>)
   de266:	429a      	cmp	r2, r3
   de268:	f200 80d5 	bhi.w	de416 <__ieee754_exp+0x1e6>
   de26c:	4bb3      	ldr	r3, [pc, #716]	; (de53c <__ieee754_exp+0x30c>)
   de26e:	429a      	cmp	r2, r3
   de270:	f200 80ea 	bhi.w	de448 <__ieee754_exp+0x218>
   de274:	a398      	add	r3, pc, #608	; (adr r3, de4d8 <__ieee754_exp+0x2a8>)
   de276:	e9d3 2300 	ldrd	r2, r3, [r3]
   de27a:	ee10 0a10 	vmov	r0, s0
   de27e:	4629      	mov	r1, r5
   de280:	f003 fa54 	bl	e172c <__adddf3>
   de284:	2200      	movs	r2, #0
   de286:	4bae      	ldr	r3, [pc, #696]	; (de540 <__ieee754_exp+0x310>)
   de288:	f003 fe92 	bl	e1fb0 <__aeabi_dcmpgt>
   de28c:	2800      	cmp	r0, #0
   de28e:	f000 811c 	beq.w	de4ca <__ieee754_exp+0x29a>
   de292:	4620      	mov	r0, r4
   de294:	4629      	mov	r1, r5
   de296:	2200      	movs	r2, #0
   de298:	4ba9      	ldr	r3, [pc, #676]	; (de540 <__ieee754_exp+0x310>)
   de29a:	f003 fa47 	bl	e172c <__adddf3>
   de29e:	ec41 0b10 	vmov	d0, r0, r1
   de2a2:	e7dc      	b.n	de25e <__ieee754_exp+0x2e>
   de2a4:	a38e      	add	r3, pc, #568	; (adr r3, de4e0 <__ieee754_exp+0x2b0>)
   de2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de2aa:	ee10 0a10 	vmov	r0, s0
   de2ae:	4629      	mov	r1, r5
   de2b0:	f003 fe7e 	bl	e1fb0 <__aeabi_dcmpgt>
   de2b4:	2800      	cmp	r0, #0
   de2b6:	f040 80d3 	bne.w	de460 <__ieee754_exp+0x230>
   de2ba:	a38b      	add	r3, pc, #556	; (adr r3, de4e8 <__ieee754_exp+0x2b8>)
   de2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   de2c0:	4620      	mov	r0, r4
   de2c2:	4629      	mov	r1, r5
   de2c4:	f003 fe56 	bl	e1f74 <__aeabi_dcmplt>
   de2c8:	2800      	cmp	r0, #0
   de2ca:	d1c6      	bne.n	de25a <__ieee754_exp+0x2a>
   de2cc:	4e9d      	ldr	r6, [pc, #628]	; (de544 <__ieee754_exp+0x314>)
   de2ce:	a388      	add	r3, pc, #544	; (adr r3, de4f0 <__ieee754_exp+0x2c0>)
   de2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de2d4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   de2d8:	4620      	mov	r0, r4
   de2da:	4629      	mov	r1, r5
   de2dc:	f003 fbd8 	bl	e1a90 <__aeabi_dmul>
   de2e0:	e9d6 2300 	ldrd	r2, r3, [r6]
   de2e4:	f003 fa22 	bl	e172c <__adddf3>
   de2e8:	f003 fe82 	bl	e1ff0 <__aeabi_d2iz>
   de2ec:	4606      	mov	r6, r0
   de2ee:	f003 fb69 	bl	e19c4 <__aeabi_i2d>
   de2f2:	a381      	add	r3, pc, #516	; (adr r3, de4f8 <__ieee754_exp+0x2c8>)
   de2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   de2f8:	4680      	mov	r8, r0
   de2fa:	4689      	mov	r9, r1
   de2fc:	f003 fbc8 	bl	e1a90 <__aeabi_dmul>
   de300:	4602      	mov	r2, r0
   de302:	460b      	mov	r3, r1
   de304:	4620      	mov	r0, r4
   de306:	4629      	mov	r1, r5
   de308:	f003 fa0e 	bl	e1728 <__aeabi_dsub>
   de30c:	a37c      	add	r3, pc, #496	; (adr r3, de500 <__ieee754_exp+0x2d0>)
   de30e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de312:	e9cd 0100 	strd	r0, r1, [sp]
   de316:	4640      	mov	r0, r8
   de318:	4649      	mov	r1, r9
   de31a:	f003 fbb9 	bl	e1a90 <__aeabi_dmul>
   de31e:	4682      	mov	sl, r0
   de320:	468b      	mov	fp, r1
   de322:	4652      	mov	r2, sl
   de324:	465b      	mov	r3, fp
   de326:	e9dd 0100 	ldrd	r0, r1, [sp]
   de32a:	f003 f9fd 	bl	e1728 <__aeabi_dsub>
   de32e:	4604      	mov	r4, r0
   de330:	460d      	mov	r5, r1
   de332:	4622      	mov	r2, r4
   de334:	462b      	mov	r3, r5
   de336:	4620      	mov	r0, r4
   de338:	4629      	mov	r1, r5
   de33a:	f003 fba9 	bl	e1a90 <__aeabi_dmul>
   de33e:	a372      	add	r3, pc, #456	; (adr r3, de508 <__ieee754_exp+0x2d8>)
   de340:	e9d3 2300 	ldrd	r2, r3, [r3]
   de344:	4680      	mov	r8, r0
   de346:	4689      	mov	r9, r1
   de348:	f003 fba2 	bl	e1a90 <__aeabi_dmul>
   de34c:	a370      	add	r3, pc, #448	; (adr r3, de510 <__ieee754_exp+0x2e0>)
   de34e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de352:	f003 f9e9 	bl	e1728 <__aeabi_dsub>
   de356:	4642      	mov	r2, r8
   de358:	464b      	mov	r3, r9
   de35a:	f003 fb99 	bl	e1a90 <__aeabi_dmul>
   de35e:	a36e      	add	r3, pc, #440	; (adr r3, de518 <__ieee754_exp+0x2e8>)
   de360:	e9d3 2300 	ldrd	r2, r3, [r3]
   de364:	f003 f9e2 	bl	e172c <__adddf3>
   de368:	4642      	mov	r2, r8
   de36a:	464b      	mov	r3, r9
   de36c:	f003 fb90 	bl	e1a90 <__aeabi_dmul>
   de370:	a36b      	add	r3, pc, #428	; (adr r3, de520 <__ieee754_exp+0x2f0>)
   de372:	e9d3 2300 	ldrd	r2, r3, [r3]
   de376:	f003 f9d7 	bl	e1728 <__aeabi_dsub>
   de37a:	4642      	mov	r2, r8
   de37c:	464b      	mov	r3, r9
   de37e:	f003 fb87 	bl	e1a90 <__aeabi_dmul>
   de382:	a369      	add	r3, pc, #420	; (adr r3, de528 <__ieee754_exp+0x2f8>)
   de384:	e9d3 2300 	ldrd	r2, r3, [r3]
   de388:	f003 f9d0 	bl	e172c <__adddf3>
   de38c:	4642      	mov	r2, r8
   de38e:	464b      	mov	r3, r9
   de390:	f003 fb7e 	bl	e1a90 <__aeabi_dmul>
   de394:	4602      	mov	r2, r0
   de396:	460b      	mov	r3, r1
   de398:	4620      	mov	r0, r4
   de39a:	4629      	mov	r1, r5
   de39c:	f003 f9c4 	bl	e1728 <__aeabi_dsub>
   de3a0:	4680      	mov	r8, r0
   de3a2:	4689      	mov	r9, r1
   de3a4:	2e00      	cmp	r6, #0
   de3a6:	d065      	beq.n	de474 <__ieee754_exp+0x244>
   de3a8:	4620      	mov	r0, r4
   de3aa:	4629      	mov	r1, r5
   de3ac:	4642      	mov	r2, r8
   de3ae:	464b      	mov	r3, r9
   de3b0:	f003 fb6e 	bl	e1a90 <__aeabi_dmul>
   de3b4:	4642      	mov	r2, r8
   de3b6:	4604      	mov	r4, r0
   de3b8:	460d      	mov	r5, r1
   de3ba:	464b      	mov	r3, r9
   de3bc:	2000      	movs	r0, #0
   de3be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   de3c2:	f003 f9b1 	bl	e1728 <__aeabi_dsub>
   de3c6:	4602      	mov	r2, r0
   de3c8:	460b      	mov	r3, r1
   de3ca:	4620      	mov	r0, r4
   de3cc:	4629      	mov	r1, r5
   de3ce:	f003 fc89 	bl	e1ce4 <__aeabi_ddiv>
   de3d2:	4602      	mov	r2, r0
   de3d4:	460b      	mov	r3, r1
   de3d6:	4650      	mov	r0, sl
   de3d8:	4659      	mov	r1, fp
   de3da:	f003 f9a5 	bl	e1728 <__aeabi_dsub>
   de3de:	e9dd 2300 	ldrd	r2, r3, [sp]
   de3e2:	f003 f9a1 	bl	e1728 <__aeabi_dsub>
   de3e6:	460b      	mov	r3, r1
   de3e8:	4602      	mov	r2, r0
   de3ea:	4955      	ldr	r1, [pc, #340]	; (de540 <__ieee754_exp+0x310>)
   de3ec:	2000      	movs	r0, #0
   de3ee:	f003 f99b 	bl	e1728 <__aeabi_dsub>
   de3f2:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   de3f6:	429e      	cmp	r6, r3
   de3f8:	da60      	bge.n	de4bc <__ieee754_exp+0x28c>
   de3fa:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   de3fe:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   de402:	2200      	movs	r2, #0
   de404:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   de408:	f003 fb42 	bl	e1a90 <__aeabi_dmul>
   de40c:	ec41 0b10 	vmov	d0, r0, r1
   de410:	b003      	add	sp, #12
   de412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de416:	4b4c      	ldr	r3, [pc, #304]	; (de548 <__ieee754_exp+0x318>)
   de418:	429a      	cmp	r2, r3
   de41a:	f63f af57 	bhi.w	de2cc <__ieee754_exp+0x9c>
   de41e:	4b4b      	ldr	r3, [pc, #300]	; (de54c <__ieee754_exp+0x31c>)
   de420:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   de424:	4443      	add	r3, r8
   de426:	e9d3 2300 	ldrd	r2, r3, [r3]
   de42a:	ee10 0a10 	vmov	r0, s0
   de42e:	4629      	mov	r1, r5
   de430:	f003 f97a 	bl	e1728 <__aeabi_dsub>
   de434:	4b46      	ldr	r3, [pc, #280]	; (de550 <__ieee754_exp+0x320>)
   de436:	f1c7 0601 	rsb	r6, r7, #1
   de43a:	4498      	add	r8, r3
   de43c:	e9cd 0100 	strd	r0, r1, [sp]
   de440:	e9d8 ab00 	ldrd	sl, fp, [r8]
   de444:	1bf6      	subs	r6, r6, r7
   de446:	e76c      	b.n	de322 <__ieee754_exp+0xf2>
   de448:	2600      	movs	r6, #0
   de44a:	e772      	b.n	de332 <__ieee754_exp+0x102>
   de44c:	ee10 2a10 	vmov	r2, s0
   de450:	462b      	mov	r3, r5
   de452:	4620      	mov	r0, r4
   de454:	4629      	mov	r1, r5
   de456:	f003 f969 	bl	e172c <__adddf3>
   de45a:	ec41 0b10 	vmov	d0, r0, r1
   de45e:	e6fe      	b.n	de25e <__ieee754_exp+0x2e>
   de460:	a31d      	add	r3, pc, #116	; (adr r3, de4d8 <__ieee754_exp+0x2a8>)
   de462:	e9d3 2300 	ldrd	r2, r3, [r3]
   de466:	4610      	mov	r0, r2
   de468:	4619      	mov	r1, r3
   de46a:	f003 fb11 	bl	e1a90 <__aeabi_dmul>
   de46e:	ec41 0b10 	vmov	d0, r0, r1
   de472:	e6f4      	b.n	de25e <__ieee754_exp+0x2e>
   de474:	4602      	mov	r2, r0
   de476:	460b      	mov	r3, r1
   de478:	4620      	mov	r0, r4
   de47a:	4629      	mov	r1, r5
   de47c:	f003 fb08 	bl	e1a90 <__aeabi_dmul>
   de480:	2200      	movs	r2, #0
   de482:	4606      	mov	r6, r0
   de484:	460f      	mov	r7, r1
   de486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de48a:	4640      	mov	r0, r8
   de48c:	4649      	mov	r1, r9
   de48e:	f003 f94b 	bl	e1728 <__aeabi_dsub>
   de492:	4602      	mov	r2, r0
   de494:	460b      	mov	r3, r1
   de496:	4630      	mov	r0, r6
   de498:	4639      	mov	r1, r7
   de49a:	f003 fc23 	bl	e1ce4 <__aeabi_ddiv>
   de49e:	4622      	mov	r2, r4
   de4a0:	462b      	mov	r3, r5
   de4a2:	f003 f941 	bl	e1728 <__aeabi_dsub>
   de4a6:	4602      	mov	r2, r0
   de4a8:	460b      	mov	r3, r1
   de4aa:	2000      	movs	r0, #0
   de4ac:	4924      	ldr	r1, [pc, #144]	; (de540 <__ieee754_exp+0x310>)
   de4ae:	f003 f93b 	bl	e1728 <__aeabi_dsub>
   de4b2:	ec41 0b10 	vmov	d0, r0, r1
   de4b6:	b003      	add	sp, #12
   de4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de4bc:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   de4c0:	ec41 0b10 	vmov	d0, r0, r1
   de4c4:	b003      	add	sp, #12
   de4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de4ca:	4606      	mov	r6, r0
   de4cc:	e731      	b.n	de332 <__ieee754_exp+0x102>
   de4ce:	bf00      	nop
	...
   de4d8:	8800759c 	.word	0x8800759c
   de4dc:	7e37e43c 	.word	0x7e37e43c
   de4e0:	fefa39ef 	.word	0xfefa39ef
   de4e4:	40862e42 	.word	0x40862e42
   de4e8:	d52d3051 	.word	0xd52d3051
   de4ec:	c0874910 	.word	0xc0874910
   de4f0:	652b82fe 	.word	0x652b82fe
   de4f4:	3ff71547 	.word	0x3ff71547
   de4f8:	fee00000 	.word	0xfee00000
   de4fc:	3fe62e42 	.word	0x3fe62e42
   de500:	35793c76 	.word	0x35793c76
   de504:	3dea39ef 	.word	0x3dea39ef
   de508:	72bea4d0 	.word	0x72bea4d0
   de50c:	3e663769 	.word	0x3e663769
   de510:	c5d26bf1 	.word	0xc5d26bf1
   de514:	3ebbbd41 	.word	0x3ebbbd41
   de518:	af25de2c 	.word	0xaf25de2c
   de51c:	3f11566a 	.word	0x3f11566a
   de520:	16bebd93 	.word	0x16bebd93
   de524:	3f66c16c 	.word	0x3f66c16c
   de528:	5555553e 	.word	0x5555553e
   de52c:	3fc55555 	.word	0x3fc55555
   de530:	40862e41 	.word	0x40862e41
   de534:	7fefffff 	.word	0x7fefffff
   de538:	3fd62e42 	.word	0x3fd62e42
   de53c:	3e2fffff 	.word	0x3e2fffff
   de540:	3ff00000 	.word	0x3ff00000
   de544:	000e6a60 	.word	0x000e6a60
   de548:	3ff0a2b1 	.word	0x3ff0a2b1
   de54c:	000e6a80 	.word	0x000e6a80
   de550:	000e6a70 	.word	0x000e6a70

000de554 <__ieee754_fmod>:
   de554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de558:	ec53 2b11 	vmov	r2, r3, d1
   de55c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   de560:	ea52 0009 	orrs.w	r0, r2, r9
   de564:	ec55 4b10 	vmov	r4, r5, d0
   de568:	d025      	beq.n	de5b6 <__ieee754_fmod+0x62>
   de56a:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   de56e:	488f      	ldr	r0, [pc, #572]	; (de7ac <__ieee754_fmod+0x258>)
   de570:	ea85 0b06 	eor.w	fp, r5, r6
   de574:	4583      	cmp	fp, r0
   de576:	dc1e      	bgt.n	de5b6 <__ieee754_fmod+0x62>
   de578:	4250      	negs	r0, r2
   de57a:	4310      	orrs	r0, r2
   de57c:	f8df c244 	ldr.w	ip, [pc, #580]	; de7c4 <__ieee754_fmod+0x270>
   de580:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   de584:	4560      	cmp	r0, ip
   de586:	ee11 8a10 	vmov	r8, s2
   de58a:	d814      	bhi.n	de5b6 <__ieee754_fmod+0x62>
   de58c:	45cb      	cmp	fp, r9
   de58e:	461f      	mov	r7, r3
   de590:	ee10 aa10 	vmov	sl, s0
   de594:	ee11 ea10 	vmov	lr, s2
   de598:	ee10 1a10 	vmov	r1, s0
   de59c:	dc17      	bgt.n	de5ce <__ieee754_fmod+0x7a>
   de59e:	db28      	blt.n	de5f2 <__ieee754_fmod+0x9e>
   de5a0:	4294      	cmp	r4, r2
   de5a2:	d326      	bcc.n	de5f2 <__ieee754_fmod+0x9e>
   de5a4:	d113      	bne.n	de5ce <__ieee754_fmod+0x7a>
   de5a6:	4b82      	ldr	r3, [pc, #520]	; (de7b0 <__ieee754_fmod+0x25c>)
   de5a8:	0ff6      	lsrs	r6, r6, #31
   de5aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   de5ae:	ed93 0b00 	vldr	d0, [r3]
   de5b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de5b6:	4620      	mov	r0, r4
   de5b8:	4629      	mov	r1, r5
   de5ba:	f003 fa69 	bl	e1a90 <__aeabi_dmul>
   de5be:	4602      	mov	r2, r0
   de5c0:	460b      	mov	r3, r1
   de5c2:	f003 fb8f 	bl	e1ce4 <__aeabi_ddiv>
   de5c6:	ec41 0b10 	vmov	d0, r0, r1
   de5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de5ce:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   de5d2:	da12      	bge.n	de5fa <__ieee754_fmod+0xa6>
   de5d4:	f1bb 0f00 	cmp.w	fp, #0
   de5d8:	f040 80a7 	bne.w	de72a <__ieee754_fmod+0x1d6>
   de5dc:	f1ba 0f00 	cmp.w	sl, #0
   de5e0:	4653      	mov	r3, sl
   de5e2:	4874      	ldr	r0, [pc, #464]	; (de7b4 <__ieee754_fmod+0x260>)
   de5e4:	dd0d      	ble.n	de602 <__ieee754_fmod+0xae>
   de5e6:	005b      	lsls	r3, r3, #1
   de5e8:	2b00      	cmp	r3, #0
   de5ea:	f100 30ff 	add.w	r0, r0, #4294967295
   de5ee:	dcfa      	bgt.n	de5e6 <__ieee754_fmod+0x92>
   de5f0:	e007      	b.n	de602 <__ieee754_fmod+0xae>
   de5f2:	ec45 4b10 	vmov	d0, r4, r5
   de5f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de5fa:	ea4f 502b 	mov.w	r0, fp, asr #20
   de5fe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   de602:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   de606:	da0f      	bge.n	de628 <__ieee754_fmod+0xd4>
   de608:	f1b9 0f00 	cmp.w	r9, #0
   de60c:	f040 80a7 	bne.w	de75e <__ieee754_fmod+0x20a>
   de610:	f1b8 0f00 	cmp.w	r8, #0
   de614:	4643      	mov	r3, r8
   de616:	f8df c19c 	ldr.w	ip, [pc, #412]	; de7b4 <__ieee754_fmod+0x260>
   de61a:	dd09      	ble.n	de630 <__ieee754_fmod+0xdc>
   de61c:	005b      	lsls	r3, r3, #1
   de61e:	2b00      	cmp	r3, #0
   de620:	f10c 3cff 	add.w	ip, ip, #4294967295
   de624:	dcfa      	bgt.n	de61c <__ieee754_fmod+0xc8>
   de626:	e003      	b.n	de630 <__ieee754_fmod+0xdc>
   de628:	ea4f 5c29 	mov.w	ip, r9, asr #20
   de62c:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   de630:	4b61      	ldr	r3, [pc, #388]	; (de7b8 <__ieee754_fmod+0x264>)
   de632:	4298      	cmp	r0, r3
   de634:	db5b      	blt.n	de6ee <__ieee754_fmod+0x19a>
   de636:	f3cb 0313 	ubfx	r3, fp, #0, #20
   de63a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de63e:	4a5e      	ldr	r2, [pc, #376]	; (de7b8 <__ieee754_fmod+0x264>)
   de640:	4594      	cmp	ip, r2
   de642:	db63      	blt.n	de70c <__ieee754_fmod+0x1b8>
   de644:	f3c7 0513 	ubfx	r5, r7, #0, #20
   de648:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   de64c:	ebcc 0000 	rsb	r0, ip, r0
   de650:	e007      	b.n	de662 <__ieee754_fmod+0x10e>
   de652:	ea52 0304 	orrs.w	r3, r2, r4
   de656:	d013      	beq.n	de680 <__ieee754_fmod+0x12c>
   de658:	0fe3      	lsrs	r3, r4, #31
   de65a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   de65e:	0061      	lsls	r1, r4, #1
   de660:	3801      	subs	r0, #1
   de662:	ebce 0401 	rsb	r4, lr, r1
   de666:	1b5a      	subs	r2, r3, r5
   de668:	b190      	cbz	r0, de690 <__ieee754_fmod+0x13c>
   de66a:	4571      	cmp	r1, lr
   de66c:	bf38      	it	cc
   de66e:	f102 32ff 	addcc.w	r2, r2, #4294967295
   de672:	2a00      	cmp	r2, #0
   de674:	daed      	bge.n	de652 <__ieee754_fmod+0xfe>
   de676:	0fca      	lsrs	r2, r1, #31
   de678:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   de67c:	0049      	lsls	r1, r1, #1
   de67e:	e7ef      	b.n	de660 <__ieee754_fmod+0x10c>
   de680:	4b4b      	ldr	r3, [pc, #300]	; (de7b0 <__ieee754_fmod+0x25c>)
   de682:	0ff6      	lsrs	r6, r6, #31
   de684:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   de688:	ed96 0b00 	vldr	d0, [r6]
   de68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de690:	4571      	cmp	r1, lr
   de692:	4615      	mov	r5, r2
   de694:	bf38      	it	cc
   de696:	f102 35ff 	addcc.w	r5, r2, #4294967295
   de69a:	2d00      	cmp	r5, #0
   de69c:	bfac      	ite	ge
   de69e:	ebce 0101 	rsbge	r1, lr, r1
   de6a2:	461d      	movlt	r5, r3
   de6a4:	ea55 0301 	orrs.w	r3, r5, r1
   de6a8:	d0ea      	beq.n	de680 <__ieee754_fmod+0x12c>
   de6aa:	4a44      	ldr	r2, [pc, #272]	; (de7bc <__ieee754_fmod+0x268>)
   de6ac:	4295      	cmp	r5, r2
   de6ae:	dc08      	bgt.n	de6c2 <__ieee754_fmod+0x16e>
   de6b0:	0fcb      	lsrs	r3, r1, #31
   de6b2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   de6b6:	4295      	cmp	r5, r2
   de6b8:	f10c 3cff 	add.w	ip, ip, #4294967295
   de6bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
   de6c0:	ddf6      	ble.n	de6b0 <__ieee754_fmod+0x15c>
   de6c2:	4b3d      	ldr	r3, [pc, #244]	; (de7b8 <__ieee754_fmod+0x264>)
   de6c4:	459c      	cmp	ip, r3
   de6c6:	da54      	bge.n	de772 <__ieee754_fmod+0x21e>
   de6c8:	4a3b      	ldr	r2, [pc, #236]	; (de7b8 <__ieee754_fmod+0x264>)
   de6ca:	ebcc 0202 	rsb	r2, ip, r2
   de6ce:	2a14      	cmp	r2, #20
   de6d0:	dc5b      	bgt.n	de78a <__ieee754_fmod+0x236>
   de6d2:	f1c2 0320 	rsb	r3, r2, #32
   de6d6:	fa05 f303 	lsl.w	r3, r5, r3
   de6da:	40d1      	lsrs	r1, r2
   de6dc:	430b      	orrs	r3, r1
   de6de:	4115      	asrs	r5, r2
   de6e0:	ea45 0106 	orr.w	r1, r5, r6
   de6e4:	4618      	mov	r0, r3
   de6e6:	ec41 0b10 	vmov	d0, r0, r1
   de6ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de6ee:	4932      	ldr	r1, [pc, #200]	; (de7b8 <__ieee754_fmod+0x264>)
   de6f0:	1a09      	subs	r1, r1, r0
   de6f2:	291f      	cmp	r1, #31
   de6f4:	dc2d      	bgt.n	de752 <__ieee754_fmod+0x1fe>
   de6f6:	f1c1 0320 	rsb	r3, r1, #32
   de6fa:	fa0b fb01 	lsl.w	fp, fp, r1
   de6fe:	fa2a f303 	lsr.w	r3, sl, r3
   de702:	ea43 030b 	orr.w	r3, r3, fp
   de706:	fa0a f101 	lsl.w	r1, sl, r1
   de70a:	e798      	b.n	de63e <__ieee754_fmod+0xea>
   de70c:	4c2a      	ldr	r4, [pc, #168]	; (de7b8 <__ieee754_fmod+0x264>)
   de70e:	ebcc 0404 	rsb	r4, ip, r4
   de712:	2c1f      	cmp	r4, #31
   de714:	dc15      	bgt.n	de742 <__ieee754_fmod+0x1ee>
   de716:	f1c4 0220 	rsb	r2, r4, #32
   de71a:	fa09 f504 	lsl.w	r5, r9, r4
   de71e:	fa28 f202 	lsr.w	r2, r8, r2
   de722:	4315      	orrs	r5, r2
   de724:	fa08 fe04 	lsl.w	lr, r8, r4
   de728:	e790      	b.n	de64c <__ieee754_fmod+0xf8>
   de72a:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   de72e:	2b00      	cmp	r3, #0
   de730:	4821      	ldr	r0, [pc, #132]	; (de7b8 <__ieee754_fmod+0x264>)
   de732:	f77f af66 	ble.w	de602 <__ieee754_fmod+0xae>
   de736:	005b      	lsls	r3, r3, #1
   de738:	2b00      	cmp	r3, #0
   de73a:	f100 30ff 	add.w	r0, r0, #4294967295
   de73e:	dcfa      	bgt.n	de736 <__ieee754_fmod+0x1e2>
   de740:	e75f      	b.n	de602 <__ieee754_fmod+0xae>
   de742:	4d1f      	ldr	r5, [pc, #124]	; (de7c0 <__ieee754_fmod+0x26c>)
   de744:	ebcc 0505 	rsb	r5, ip, r5
   de748:	fa08 f505 	lsl.w	r5, r8, r5
   de74c:	f04f 0e00 	mov.w	lr, #0
   de750:	e77c      	b.n	de64c <__ieee754_fmod+0xf8>
   de752:	4b1b      	ldr	r3, [pc, #108]	; (de7c0 <__ieee754_fmod+0x26c>)
   de754:	1a1b      	subs	r3, r3, r0
   de756:	fa0a f303 	lsl.w	r3, sl, r3
   de75a:	2100      	movs	r1, #0
   de75c:	e76f      	b.n	de63e <__ieee754_fmod+0xea>
   de75e:	f8df c058 	ldr.w	ip, [pc, #88]	; de7b8 <__ieee754_fmod+0x264>
   de762:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   de766:	005b      	lsls	r3, r3, #1
   de768:	2b00      	cmp	r3, #0
   de76a:	f10c 3cff 	add.w	ip, ip, #4294967295
   de76e:	dcfa      	bgt.n	de766 <__ieee754_fmod+0x212>
   de770:	e75e      	b.n	de630 <__ieee754_fmod+0xdc>
   de772:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   de776:	432e      	orrs	r6, r5
   de778:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   de77c:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   de780:	460a      	mov	r2, r1
   de782:	ec43 2b10 	vmov	d0, r2, r3
   de786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de78a:	2a1f      	cmp	r2, #31
   de78c:	dc07      	bgt.n	de79e <__ieee754_fmod+0x24a>
   de78e:	f1c2 0320 	rsb	r3, r2, #32
   de792:	409d      	lsls	r5, r3
   de794:	40d1      	lsrs	r1, r2
   de796:	ea45 0301 	orr.w	r3, r5, r1
   de79a:	4635      	mov	r5, r6
   de79c:	e7a0      	b.n	de6e0 <__ieee754_fmod+0x18c>
   de79e:	4b08      	ldr	r3, [pc, #32]	; (de7c0 <__ieee754_fmod+0x26c>)
   de7a0:	ebcc 0303 	rsb	r3, ip, r3
   de7a4:	fa45 f303 	asr.w	r3, r5, r3
   de7a8:	4635      	mov	r5, r6
   de7aa:	e799      	b.n	de6e0 <__ieee754_fmod+0x18c>
   de7ac:	7fefffff 	.word	0x7fefffff
   de7b0:	000e6a90 	.word	0x000e6a90
   de7b4:	fffffbed 	.word	0xfffffbed
   de7b8:	fffffc02 	.word	0xfffffc02
   de7bc:	000fffff 	.word	0x000fffff
   de7c0:	fffffbe2 	.word	0xfffffbe2
   de7c4:	7ff00000 	.word	0x7ff00000

000de7c8 <__ieee754_log>:
   de7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de7cc:	ec51 0b10 	vmov	r0, r1, d0
   de7d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   de7d4:	b085      	sub	sp, #20
   de7d6:	460b      	mov	r3, r1
   de7d8:	da59      	bge.n	de88e <__ieee754_log+0xc6>
   de7da:	ee10 2a10 	vmov	r2, s0
   de7de:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   de7e2:	4322      	orrs	r2, r4
   de7e4:	f000 80f8 	beq.w	de9d8 <__ieee754_log+0x210>
   de7e8:	2900      	cmp	r1, #0
   de7ea:	f2c0 8180 	blt.w	deaee <__ieee754_log+0x326>
   de7ee:	2200      	movs	r2, #0
   de7f0:	4bdd      	ldr	r3, [pc, #884]	; (deb68 <__ieee754_log+0x3a0>)
   de7f2:	4cde      	ldr	r4, [pc, #888]	; (deb6c <__ieee754_log+0x3a4>)
   de7f4:	f003 f94c 	bl	e1a90 <__aeabi_dmul>
   de7f8:	460b      	mov	r3, r1
   de7fa:	42a3      	cmp	r3, r4
   de7fc:	f06f 0235 	mvn.w	r2, #53	; 0x35
   de800:	dc4a      	bgt.n	de898 <__ieee754_log+0xd0>
   de802:	f3c3 0513 	ubfx	r5, r3, #0, #20
   de806:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   de80a:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   de80e:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   de812:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   de816:	151b      	asrs	r3, r3, #20
   de818:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   de81c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   de820:	ea44 0105 	orr.w	r1, r4, r5
   de824:	189c      	adds	r4, r3, r2
   de826:	2200      	movs	r2, #0
   de828:	4bd1      	ldr	r3, [pc, #836]	; (deb70 <__ieee754_log+0x3a8>)
   de82a:	f002 ff7d 	bl	e1728 <__aeabi_dsub>
   de82e:	1cab      	adds	r3, r5, #2
   de830:	f3c3 0313 	ubfx	r3, r3, #0, #20
   de834:	2b02      	cmp	r3, #2
   de836:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   de83a:	4682      	mov	sl, r0
   de83c:	468b      	mov	fp, r1
   de83e:	f04f 0200 	mov.w	r2, #0
   de842:	dc32      	bgt.n	de8aa <__ieee754_log+0xe2>
   de844:	2300      	movs	r3, #0
   de846:	f003 fb8b 	bl	e1f60 <__aeabi_dcmpeq>
   de84a:	2800      	cmp	r0, #0
   de84c:	f000 80cf 	beq.w	de9ee <__ieee754_log+0x226>
   de850:	2c00      	cmp	r4, #0
   de852:	f000 8158 	beq.w	deb06 <__ieee754_log+0x33e>
   de856:	4620      	mov	r0, r4
   de858:	f003 f8b4 	bl	e19c4 <__aeabi_i2d>
   de85c:	a3ac      	add	r3, pc, #688	; (adr r3, deb10 <__ieee754_log+0x348>)
   de85e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de862:	4606      	mov	r6, r0
   de864:	460f      	mov	r7, r1
   de866:	f003 f913 	bl	e1a90 <__aeabi_dmul>
   de86a:	a3ab      	add	r3, pc, #684	; (adr r3, deb18 <__ieee754_log+0x350>)
   de86c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de870:	4604      	mov	r4, r0
   de872:	460d      	mov	r5, r1
   de874:	4630      	mov	r0, r6
   de876:	4639      	mov	r1, r7
   de878:	f003 f90a 	bl	e1a90 <__aeabi_dmul>
   de87c:	4602      	mov	r2, r0
   de87e:	460b      	mov	r3, r1
   de880:	4620      	mov	r0, r4
   de882:	4629      	mov	r1, r5
   de884:	f002 ff52 	bl	e172c <__adddf3>
   de888:	ec41 0b10 	vmov	d0, r0, r1
   de88c:	e00a      	b.n	de8a4 <__ieee754_log+0xdc>
   de88e:	4cb7      	ldr	r4, [pc, #732]	; (deb6c <__ieee754_log+0x3a4>)
   de890:	42a3      	cmp	r3, r4
   de892:	f04f 0200 	mov.w	r2, #0
   de896:	ddb4      	ble.n	de802 <__ieee754_log+0x3a>
   de898:	4602      	mov	r2, r0
   de89a:	460b      	mov	r3, r1
   de89c:	f002 ff46 	bl	e172c <__adddf3>
   de8a0:	ec41 0b10 	vmov	d0, r0, r1
   de8a4:	b005      	add	sp, #20
   de8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de8aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de8ae:	f002 ff3d 	bl	e172c <__adddf3>
   de8b2:	4602      	mov	r2, r0
   de8b4:	460b      	mov	r3, r1
   de8b6:	4650      	mov	r0, sl
   de8b8:	4659      	mov	r1, fp
   de8ba:	f003 fa13 	bl	e1ce4 <__aeabi_ddiv>
   de8be:	4606      	mov	r6, r0
   de8c0:	4620      	mov	r0, r4
   de8c2:	460f      	mov	r7, r1
   de8c4:	f003 f87e 	bl	e19c4 <__aeabi_i2d>
   de8c8:	4632      	mov	r2, r6
   de8ca:	e9cd 0100 	strd	r0, r1, [sp]
   de8ce:	463b      	mov	r3, r7
   de8d0:	4630      	mov	r0, r6
   de8d2:	4639      	mov	r1, r7
   de8d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de8d8:	f003 f8da 	bl	e1a90 <__aeabi_dmul>
   de8dc:	4602      	mov	r2, r0
   de8de:	460b      	mov	r3, r1
   de8e0:	4680      	mov	r8, r0
   de8e2:	4689      	mov	r9, r1
   de8e4:	f003 f8d4 	bl	e1a90 <__aeabi_dmul>
   de8e8:	a38d      	add	r3, pc, #564	; (adr r3, deb20 <__ieee754_log+0x358>)
   de8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8ee:	4606      	mov	r6, r0
   de8f0:	460f      	mov	r7, r1
   de8f2:	f003 f8cd 	bl	e1a90 <__aeabi_dmul>
   de8f6:	a38c      	add	r3, pc, #560	; (adr r3, deb28 <__ieee754_log+0x360>)
   de8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de8fc:	f002 ff16 	bl	e172c <__adddf3>
   de900:	4632      	mov	r2, r6
   de902:	463b      	mov	r3, r7
   de904:	f003 f8c4 	bl	e1a90 <__aeabi_dmul>
   de908:	a389      	add	r3, pc, #548	; (adr r3, deb30 <__ieee754_log+0x368>)
   de90a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de90e:	f002 ff0d 	bl	e172c <__adddf3>
   de912:	4632      	mov	r2, r6
   de914:	463b      	mov	r3, r7
   de916:	f003 f8bb 	bl	e1a90 <__aeabi_dmul>
   de91a:	a387      	add	r3, pc, #540	; (adr r3, deb38 <__ieee754_log+0x370>)
   de91c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de920:	f002 ff04 	bl	e172c <__adddf3>
   de924:	4642      	mov	r2, r8
   de926:	464b      	mov	r3, r9
   de928:	f003 f8b2 	bl	e1a90 <__aeabi_dmul>
   de92c:	a384      	add	r3, pc, #528	; (adr r3, deb40 <__ieee754_log+0x378>)
   de92e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de932:	4680      	mov	r8, r0
   de934:	4689      	mov	r9, r1
   de936:	4630      	mov	r0, r6
   de938:	4639      	mov	r1, r7
   de93a:	f003 f8a9 	bl	e1a90 <__aeabi_dmul>
   de93e:	a382      	add	r3, pc, #520	; (adr r3, deb48 <__ieee754_log+0x380>)
   de940:	e9d3 2300 	ldrd	r2, r3, [r3]
   de944:	f002 fef2 	bl	e172c <__adddf3>
   de948:	4632      	mov	r2, r6
   de94a:	463b      	mov	r3, r7
   de94c:	f003 f8a0 	bl	e1a90 <__aeabi_dmul>
   de950:	a37f      	add	r3, pc, #508	; (adr r3, deb50 <__ieee754_log+0x388>)
   de952:	e9d3 2300 	ldrd	r2, r3, [r3]
   de956:	f002 fee9 	bl	e172c <__adddf3>
   de95a:	4632      	mov	r2, r6
   de95c:	463b      	mov	r3, r7
   de95e:	f003 f897 	bl	e1a90 <__aeabi_dmul>
   de962:	460b      	mov	r3, r1
   de964:	4602      	mov	r2, r0
   de966:	4649      	mov	r1, r9
   de968:	4640      	mov	r0, r8
   de96a:	f002 fedf 	bl	e172c <__adddf3>
   de96e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   de972:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   de976:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   de97a:	3551      	adds	r5, #81	; 0x51
   de97c:	431d      	orrs	r5, r3
   de97e:	2d00      	cmp	r5, #0
   de980:	4680      	mov	r8, r0
   de982:	4689      	mov	r9, r1
   de984:	dd5c      	ble.n	dea40 <__ieee754_log+0x278>
   de986:	2200      	movs	r2, #0
   de988:	4b7a      	ldr	r3, [pc, #488]	; (deb74 <__ieee754_log+0x3ac>)
   de98a:	4650      	mov	r0, sl
   de98c:	4659      	mov	r1, fp
   de98e:	f003 f87f 	bl	e1a90 <__aeabi_dmul>
   de992:	4652      	mov	r2, sl
   de994:	465b      	mov	r3, fp
   de996:	f003 f87b 	bl	e1a90 <__aeabi_dmul>
   de99a:	4606      	mov	r6, r0
   de99c:	460f      	mov	r7, r1
   de99e:	2c00      	cmp	r4, #0
   de9a0:	d16e      	bne.n	dea80 <__ieee754_log+0x2b8>
   de9a2:	4632      	mov	r2, r6
   de9a4:	463b      	mov	r3, r7
   de9a6:	4640      	mov	r0, r8
   de9a8:	4649      	mov	r1, r9
   de9aa:	f002 febf 	bl	e172c <__adddf3>
   de9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de9b2:	f003 f86d 	bl	e1a90 <__aeabi_dmul>
   de9b6:	4602      	mov	r2, r0
   de9b8:	460b      	mov	r3, r1
   de9ba:	4630      	mov	r0, r6
   de9bc:	4639      	mov	r1, r7
   de9be:	f002 feb3 	bl	e1728 <__aeabi_dsub>
   de9c2:	4602      	mov	r2, r0
   de9c4:	460b      	mov	r3, r1
   de9c6:	4650      	mov	r0, sl
   de9c8:	4659      	mov	r1, fp
   de9ca:	f002 fead 	bl	e1728 <__aeabi_dsub>
   de9ce:	ec41 0b10 	vmov	d0, r0, r1
   de9d2:	b005      	add	sp, #20
   de9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9d8:	2200      	movs	r2, #0
   de9da:	2300      	movs	r3, #0
   de9dc:	2000      	movs	r0, #0
   de9de:	4966      	ldr	r1, [pc, #408]	; (deb78 <__ieee754_log+0x3b0>)
   de9e0:	f003 f980 	bl	e1ce4 <__aeabi_ddiv>
   de9e4:	ec41 0b10 	vmov	d0, r0, r1
   de9e8:	b005      	add	sp, #20
   de9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9ee:	a35a      	add	r3, pc, #360	; (adr r3, deb58 <__ieee754_log+0x390>)
   de9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9f4:	4650      	mov	r0, sl
   de9f6:	4659      	mov	r1, fp
   de9f8:	f003 f84a 	bl	e1a90 <__aeabi_dmul>
   de9fc:	4602      	mov	r2, r0
   de9fe:	460b      	mov	r3, r1
   dea00:	2000      	movs	r0, #0
   dea02:	495c      	ldr	r1, [pc, #368]	; (deb74 <__ieee754_log+0x3ac>)
   dea04:	f002 fe90 	bl	e1728 <__aeabi_dsub>
   dea08:	4652      	mov	r2, sl
   dea0a:	4606      	mov	r6, r0
   dea0c:	460f      	mov	r7, r1
   dea0e:	465b      	mov	r3, fp
   dea10:	4650      	mov	r0, sl
   dea12:	4659      	mov	r1, fp
   dea14:	f003 f83c 	bl	e1a90 <__aeabi_dmul>
   dea18:	4602      	mov	r2, r0
   dea1a:	460b      	mov	r3, r1
   dea1c:	4630      	mov	r0, r6
   dea1e:	4639      	mov	r1, r7
   dea20:	f003 f836 	bl	e1a90 <__aeabi_dmul>
   dea24:	4606      	mov	r6, r0
   dea26:	460f      	mov	r7, r1
   dea28:	2c00      	cmp	r4, #0
   dea2a:	f040 80a7 	bne.w	deb7c <__ieee754_log+0x3b4>
   dea2e:	4602      	mov	r2, r0
   dea30:	460b      	mov	r3, r1
   dea32:	4650      	mov	r0, sl
   dea34:	4659      	mov	r1, fp
   dea36:	f002 fe77 	bl	e1728 <__aeabi_dsub>
   dea3a:	ec41 0b10 	vmov	d0, r0, r1
   dea3e:	e731      	b.n	de8a4 <__ieee754_log+0xdc>
   dea40:	2c00      	cmp	r4, #0
   dea42:	f000 80af 	beq.w	deba4 <__ieee754_log+0x3dc>
   dea46:	a332      	add	r3, pc, #200	; (adr r3, deb10 <__ieee754_log+0x348>)
   dea48:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   dea50:	f003 f81e 	bl	e1a90 <__aeabi_dmul>
   dea54:	4642      	mov	r2, r8
   dea56:	464b      	mov	r3, r9
   dea58:	4604      	mov	r4, r0
   dea5a:	460d      	mov	r5, r1
   dea5c:	4650      	mov	r0, sl
   dea5e:	4659      	mov	r1, fp
   dea60:	f002 fe62 	bl	e1728 <__aeabi_dsub>
   dea64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dea68:	f003 f812 	bl	e1a90 <__aeabi_dmul>
   dea6c:	a32a      	add	r3, pc, #168	; (adr r3, deb18 <__ieee754_log+0x350>)
   dea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea72:	4606      	mov	r6, r0
   dea74:	460f      	mov	r7, r1
   dea76:	e9dd 0100 	ldrd	r0, r1, [sp]
   dea7a:	f003 f809 	bl	e1a90 <__aeabi_dmul>
   dea7e:	e021      	b.n	deac4 <__ieee754_log+0x2fc>
   dea80:	a323      	add	r3, pc, #140	; (adr r3, deb10 <__ieee754_log+0x348>)
   dea82:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea86:	e9dd 0100 	ldrd	r0, r1, [sp]
   dea8a:	f003 f801 	bl	e1a90 <__aeabi_dmul>
   dea8e:	4632      	mov	r2, r6
   dea90:	463b      	mov	r3, r7
   dea92:	4604      	mov	r4, r0
   dea94:	460d      	mov	r5, r1
   dea96:	4640      	mov	r0, r8
   dea98:	4649      	mov	r1, r9
   dea9a:	f002 fe47 	bl	e172c <__adddf3>
   dea9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   deaa2:	f002 fff5 	bl	e1a90 <__aeabi_dmul>
   deaa6:	a31c      	add	r3, pc, #112	; (adr r3, deb18 <__ieee754_log+0x350>)
   deaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deaac:	4680      	mov	r8, r0
   deaae:	4689      	mov	r9, r1
   deab0:	e9dd 0100 	ldrd	r0, r1, [sp]
   deab4:	f002 ffec 	bl	e1a90 <__aeabi_dmul>
   deab8:	4602      	mov	r2, r0
   deaba:	460b      	mov	r3, r1
   deabc:	4640      	mov	r0, r8
   deabe:	4649      	mov	r1, r9
   deac0:	f002 fe34 	bl	e172c <__adddf3>
   deac4:	4602      	mov	r2, r0
   deac6:	460b      	mov	r3, r1
   deac8:	4630      	mov	r0, r6
   deaca:	4639      	mov	r1, r7
   deacc:	f002 fe2c 	bl	e1728 <__aeabi_dsub>
   dead0:	4652      	mov	r2, sl
   dead2:	465b      	mov	r3, fp
   dead4:	f002 fe28 	bl	e1728 <__aeabi_dsub>
   dead8:	4602      	mov	r2, r0
   deada:	460b      	mov	r3, r1
   deadc:	4620      	mov	r0, r4
   deade:	4629      	mov	r1, r5
   deae0:	f002 fe22 	bl	e1728 <__aeabi_dsub>
   deae4:	ec41 0b10 	vmov	d0, r0, r1
   deae8:	b005      	add	sp, #20
   deaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deaee:	ee10 2a10 	vmov	r2, s0
   deaf2:	460b      	mov	r3, r1
   deaf4:	f002 fe18 	bl	e1728 <__aeabi_dsub>
   deaf8:	2200      	movs	r2, #0
   deafa:	2300      	movs	r3, #0
   deafc:	f003 f8f2 	bl	e1ce4 <__aeabi_ddiv>
   deb00:	ec41 0b10 	vmov	d0, r0, r1
   deb04:	e6ce      	b.n	de8a4 <__ieee754_log+0xdc>
   deb06:	ed9f 0b16 	vldr	d0, [pc, #88]	; deb60 <__ieee754_log+0x398>
   deb0a:	e6cb      	b.n	de8a4 <__ieee754_log+0xdc>
   deb0c:	f3af 8000 	nop.w
   deb10:	fee00000 	.word	0xfee00000
   deb14:	3fe62e42 	.word	0x3fe62e42
   deb18:	35793c76 	.word	0x35793c76
   deb1c:	3dea39ef 	.word	0x3dea39ef
   deb20:	df3e5244 	.word	0xdf3e5244
   deb24:	3fc2f112 	.word	0x3fc2f112
   deb28:	96cb03de 	.word	0x96cb03de
   deb2c:	3fc74664 	.word	0x3fc74664
   deb30:	94229359 	.word	0x94229359
   deb34:	3fd24924 	.word	0x3fd24924
   deb38:	55555593 	.word	0x55555593
   deb3c:	3fe55555 	.word	0x3fe55555
   deb40:	d078c69f 	.word	0xd078c69f
   deb44:	3fc39a09 	.word	0x3fc39a09
   deb48:	1d8e78af 	.word	0x1d8e78af
   deb4c:	3fcc71c5 	.word	0x3fcc71c5
   deb50:	9997fa04 	.word	0x9997fa04
   deb54:	3fd99999 	.word	0x3fd99999
   deb58:	55555555 	.word	0x55555555
   deb5c:	3fd55555 	.word	0x3fd55555
	...
   deb68:	43500000 	.word	0x43500000
   deb6c:	7fefffff 	.word	0x7fefffff
   deb70:	3ff00000 	.word	0x3ff00000
   deb74:	3fe00000 	.word	0x3fe00000
   deb78:	c3500000 	.word	0xc3500000
   deb7c:	4620      	mov	r0, r4
   deb7e:	f002 ff21 	bl	e19c4 <__aeabi_i2d>
   deb82:	a30f      	add	r3, pc, #60	; (adr r3, debc0 <__ieee754_log+0x3f8>)
   deb84:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb88:	4680      	mov	r8, r0
   deb8a:	4689      	mov	r9, r1
   deb8c:	f002 ff80 	bl	e1a90 <__aeabi_dmul>
   deb90:	a30d      	add	r3, pc, #52	; (adr r3, debc8 <__ieee754_log+0x400>)
   deb92:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb96:	4604      	mov	r4, r0
   deb98:	460d      	mov	r5, r1
   deb9a:	4640      	mov	r0, r8
   deb9c:	4649      	mov	r1, r9
   deb9e:	f002 ff77 	bl	e1a90 <__aeabi_dmul>
   deba2:	e78f      	b.n	deac4 <__ieee754_log+0x2fc>
   deba4:	4602      	mov	r2, r0
   deba6:	460b      	mov	r3, r1
   deba8:	4650      	mov	r0, sl
   debaa:	4659      	mov	r1, fp
   debac:	f002 fdbc 	bl	e1728 <__aeabi_dsub>
   debb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   debb4:	f002 ff6c 	bl	e1a90 <__aeabi_dmul>
   debb8:	e703      	b.n	de9c2 <__ieee754_log+0x1fa>
   debba:	bf00      	nop
   debbc:	f3af 8000 	nop.w
   debc0:	fee00000 	.word	0xfee00000
   debc4:	3fe62e42 	.word	0x3fe62e42
   debc8:	35793c76 	.word	0x35793c76
   debcc:	3dea39ef 	.word	0x3dea39ef

000debd0 <__ieee754_log10>:
   debd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   debd4:	ec55 4b10 	vmov	r4, r5, d0
   debd8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   debdc:	b083      	sub	sp, #12
   debde:	462b      	mov	r3, r5
   debe0:	da21      	bge.n	dec26 <__ieee754_log10+0x56>
   debe2:	ee10 2a10 	vmov	r2, s0
   debe6:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   debea:	430a      	orrs	r2, r1
   debec:	d064      	beq.n	decb8 <__ieee754_log10+0xe8>
   debee:	2d00      	cmp	r5, #0
   debf0:	db6d      	blt.n	decce <__ieee754_log10+0xfe>
   debf2:	4629      	mov	r1, r5
   debf4:	2200      	movs	r2, #0
   debf6:	4b44      	ldr	r3, [pc, #272]	; (ded08 <__ieee754_log10+0x138>)
   debf8:	ee10 0a10 	vmov	r0, s0
   debfc:	f002 ff48 	bl	e1a90 <__aeabi_dmul>
   dec00:	460b      	mov	r3, r1
   dec02:	460d      	mov	r5, r1
   dec04:	4941      	ldr	r1, [pc, #260]	; (ded0c <__ieee754_log10+0x13c>)
   dec06:	428b      	cmp	r3, r1
   dec08:	4604      	mov	r4, r0
   dec0a:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dec0e:	dd0f      	ble.n	dec30 <__ieee754_log10+0x60>
   dec10:	4622      	mov	r2, r4
   dec12:	462b      	mov	r3, r5
   dec14:	4620      	mov	r0, r4
   dec16:	4629      	mov	r1, r5
   dec18:	f002 fd88 	bl	e172c <__adddf3>
   dec1c:	ec41 0b10 	vmov	d0, r0, r1
   dec20:	b003      	add	sp, #12
   dec22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dec26:	4939      	ldr	r1, [pc, #228]	; (ded0c <__ieee754_log10+0x13c>)
   dec28:	428b      	cmp	r3, r1
   dec2a:	f04f 0200 	mov.w	r2, #0
   dec2e:	dcef      	bgt.n	dec10 <__ieee754_log10+0x40>
   dec30:	1518      	asrs	r0, r3, #20
   dec32:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dec36:	4410      	add	r0, r2
   dec38:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   dec3c:	4448      	add	r0, r9
   dec3e:	f3c3 0813 	ubfx	r8, r3, #0, #20
   dec42:	f002 febf 	bl	e19c4 <__aeabi_i2d>
   dec46:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   dec4a:	3303      	adds	r3, #3
   dec4c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   dec50:	ec45 4b10 	vmov	d0, r4, r5
   dec54:	4606      	mov	r6, r0
   dec56:	460f      	mov	r7, r1
   dec58:	f7ff fdb6 	bl	de7c8 <__ieee754_log>
   dec5c:	4630      	mov	r0, r6
   dec5e:	4639      	mov	r1, r7
   dec60:	a323      	add	r3, pc, #140	; (adr r3, decf0 <__ieee754_log10+0x120>)
   dec62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec66:	ed8d 0b00 	vstr	d0, [sp]
   dec6a:	f002 ff11 	bl	e1a90 <__aeabi_dmul>
   dec6e:	ed9d 0b00 	vldr	d0, [sp]
   dec72:	4604      	mov	r4, r0
   dec74:	460d      	mov	r5, r1
   dec76:	a320      	add	r3, pc, #128	; (adr r3, decf8 <__ieee754_log10+0x128>)
   dec78:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec7c:	ec51 0b10 	vmov	r0, r1, d0
   dec80:	f002 ff06 	bl	e1a90 <__aeabi_dmul>
   dec84:	4602      	mov	r2, r0
   dec86:	460b      	mov	r3, r1
   dec88:	4620      	mov	r0, r4
   dec8a:	4629      	mov	r1, r5
   dec8c:	f002 fd4e 	bl	e172c <__adddf3>
   dec90:	a31b      	add	r3, pc, #108	; (adr r3, ded00 <__ieee754_log10+0x130>)
   dec92:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec96:	4604      	mov	r4, r0
   dec98:	460d      	mov	r5, r1
   dec9a:	4630      	mov	r0, r6
   dec9c:	4639      	mov	r1, r7
   dec9e:	f002 fef7 	bl	e1a90 <__aeabi_dmul>
   deca2:	4602      	mov	r2, r0
   deca4:	460b      	mov	r3, r1
   deca6:	4620      	mov	r0, r4
   deca8:	4629      	mov	r1, r5
   decaa:	f002 fd3f 	bl	e172c <__adddf3>
   decae:	ec41 0b10 	vmov	d0, r0, r1
   decb2:	b003      	add	sp, #12
   decb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   decb8:	2200      	movs	r2, #0
   decba:	2300      	movs	r3, #0
   decbc:	2000      	movs	r0, #0
   decbe:	4914      	ldr	r1, [pc, #80]	; (ded10 <__ieee754_log10+0x140>)
   decc0:	f003 f810 	bl	e1ce4 <__aeabi_ddiv>
   decc4:	ec41 0b10 	vmov	d0, r0, r1
   decc8:	b003      	add	sp, #12
   decca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   decce:	ee10 2a10 	vmov	r2, s0
   decd2:	462b      	mov	r3, r5
   decd4:	4620      	mov	r0, r4
   decd6:	4629      	mov	r1, r5
   decd8:	f002 fd26 	bl	e1728 <__aeabi_dsub>
   decdc:	2200      	movs	r2, #0
   decde:	2300      	movs	r3, #0
   dece0:	f003 f800 	bl	e1ce4 <__aeabi_ddiv>
   dece4:	ec41 0b10 	vmov	d0, r0, r1
   dece8:	e79a      	b.n	dec20 <__ieee754_log10+0x50>
   decea:	bf00      	nop
   decec:	f3af 8000 	nop.w
   decf0:	11f12b36 	.word	0x11f12b36
   decf4:	3d59fef3 	.word	0x3d59fef3
   decf8:	1526e50e 	.word	0x1526e50e
   decfc:	3fdbcb7b 	.word	0x3fdbcb7b
   ded00:	509f6000 	.word	0x509f6000
   ded04:	3fd34413 	.word	0x3fd34413
   ded08:	43500000 	.word	0x43500000
   ded0c:	7fefffff 	.word	0x7fefffff
   ded10:	c3500000 	.word	0xc3500000
   ded14:	00000000 	.word	0x00000000

000ded18 <__ieee754_pow>:
   ded18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded1c:	ec51 0b11 	vmov	r0, r1, d1
   ded20:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   ded24:	ea58 0400 	orrs.w	r4, r8, r0
   ded28:	b093      	sub	sp, #76	; 0x4c
   ded2a:	d03c      	beq.n	deda6 <__ieee754_pow+0x8e>
   ded2c:	ec53 2b10 	vmov	r2, r3, d0
   ded30:	4e6d      	ldr	r6, [pc, #436]	; (deee8 <__ieee754_pow+0x1d0>)
   ded32:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   ded36:	42b4      	cmp	r4, r6
   ded38:	ee10 aa10 	vmov	sl, s0
   ded3c:	461d      	mov	r5, r3
   ded3e:	dc2b      	bgt.n	ded98 <__ieee754_pow+0x80>
   ded40:	4689      	mov	r9, r1
   ded42:	ee11 ea10 	vmov	lr, s2
   ded46:	d026      	beq.n	ded96 <__ieee754_pow+0x7e>
   ded48:	45b0      	cmp	r8, r6
   ded4a:	dc25      	bgt.n	ded98 <__ieee754_pow+0x80>
   ded4c:	4e66      	ldr	r6, [pc, #408]	; (deee8 <__ieee754_pow+0x1d0>)
   ded4e:	45b0      	cmp	r8, r6
   ded50:	d077      	beq.n	dee42 <__ieee754_pow+0x12a>
   ded52:	2d00      	cmp	r5, #0
   ded54:	4616      	mov	r6, r2
   ded56:	461f      	mov	r7, r3
   ded58:	e9cd 0100 	strd	r0, r1, [sp]
   ded5c:	db75      	blt.n	dee4a <__ieee754_pow+0x132>
   ded5e:	f04f 0b00 	mov.w	fp, #0
   ded62:	f1be 0f00 	cmp.w	lr, #0
   ded66:	d12d      	bne.n	dedc4 <__ieee754_pow+0xac>
   ded68:	4b5f      	ldr	r3, [pc, #380]	; (deee8 <__ieee754_pow+0x1d0>)
   ded6a:	4598      	cmp	r8, r3
   ded6c:	f000 8089 	beq.w	dee82 <__ieee754_pow+0x16a>
   ded70:	4b5e      	ldr	r3, [pc, #376]	; (deeec <__ieee754_pow+0x1d4>)
   ded72:	4598      	cmp	r8, r3
   ded74:	d05e      	beq.n	dee34 <__ieee754_pow+0x11c>
   ded76:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   ded7a:	f000 83de 	beq.w	df53a <__ieee754_pow+0x822>
   ded7e:	4b5c      	ldr	r3, [pc, #368]	; (deef0 <__ieee754_pow+0x1d8>)
   ded80:	4599      	cmp	r9, r3
   ded82:	d11f      	bne.n	dedc4 <__ieee754_pow+0xac>
   ded84:	2d00      	cmp	r5, #0
   ded86:	db1d      	blt.n	dedc4 <__ieee754_pow+0xac>
   ded88:	ec47 6b10 	vmov	d0, r6, r7
   ded8c:	b013      	add	sp, #76	; 0x4c
   ded8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded92:	f001 b855 	b.w	dfe40 <__ieee754_sqrt>
   ded96:	b15a      	cbz	r2, dedb0 <__ieee754_pow+0x98>
   ded98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   ded9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   deda0:	ea54 030a 	orrs.w	r3, r4, sl
   deda4:	d106      	bne.n	dedb4 <__ieee754_pow+0x9c>
   deda6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; deed0 <__ieee754_pow+0x1b8>
   dedaa:	b013      	add	sp, #76	; 0x4c
   dedac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dedb0:	45a0      	cmp	r8, r4
   dedb2:	ddcb      	ble.n	ded4c <__ieee754_pow+0x34>
   dedb4:	484f      	ldr	r0, [pc, #316]	; (deef4 <__ieee754_pow+0x1dc>)
   dedb6:	b013      	add	sp, #76	; 0x4c
   dedb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dedbc:	f002 bb80 	b.w	e14c0 <nan>
   dedc0:	f04f 0b00 	mov.w	fp, #0
   dedc4:	ec47 6b10 	vmov	d0, r6, r7
   dedc8:	f7fd fc5a 	bl	dc680 <fabs>
   dedcc:	ec51 0b10 	vmov	r0, r1, d0
   dedd0:	f1ba 0f00 	cmp.w	sl, #0
   dedd4:	d01e      	beq.n	dee14 <__ieee754_pow+0xfc>
   dedd6:	0fed      	lsrs	r5, r5, #31
   dedd8:	f105 3aff 	add.w	sl, r5, #4294967295
   deddc:	ea5b 030a 	orrs.w	r3, fp, sl
   dede0:	d063      	beq.n	deeaa <__ieee754_pow+0x192>
   dede2:	4b45      	ldr	r3, [pc, #276]	; (deef8 <__ieee754_pow+0x1e0>)
   dede4:	4598      	cmp	r8, r3
   dede6:	f340 808d 	ble.w	def04 <__ieee754_pow+0x1ec>
   dedea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   dedee:	4598      	cmp	r8, r3
   dedf0:	f340 8438 	ble.w	df664 <__ieee754_pow+0x94c>
   dedf4:	4b41      	ldr	r3, [pc, #260]	; (deefc <__ieee754_pow+0x1e4>)
   dedf6:	429c      	cmp	r4, r3
   dedf8:	dd62      	ble.n	deec0 <__ieee754_pow+0x1a8>
   dedfa:	f1b9 0f00 	cmp.w	r9, #0
   dedfe:	dd62      	ble.n	deec6 <__ieee754_pow+0x1ae>
   dee00:	a335      	add	r3, pc, #212	; (adr r3, deed8 <__ieee754_pow+0x1c0>)
   dee02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee06:	4610      	mov	r0, r2
   dee08:	4619      	mov	r1, r3
   dee0a:	f002 fe41 	bl	e1a90 <__aeabi_dmul>
   dee0e:	ec41 0b10 	vmov	d0, r0, r1
   dee12:	e7ca      	b.n	dedaa <__ieee754_pow+0x92>
   dee14:	b124      	cbz	r4, dee20 <__ieee754_pow+0x108>
   dee16:	4b35      	ldr	r3, [pc, #212]	; (deeec <__ieee754_pow+0x1d4>)
   dee18:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   dee1c:	429a      	cmp	r2, r3
   dee1e:	d1da      	bne.n	dedd6 <__ieee754_pow+0xbe>
   dee20:	f1b9 0f00 	cmp.w	r9, #0
   dee24:	f2c0 83cb 	blt.w	df5be <__ieee754_pow+0x8a6>
   dee28:	2d00      	cmp	r5, #0
   dee2a:	f2c0 8374 	blt.w	df516 <__ieee754_pow+0x7fe>
   dee2e:	ec41 0b10 	vmov	d0, r0, r1
   dee32:	e7ba      	b.n	dedaa <__ieee754_pow+0x92>
   dee34:	f1b9 0f00 	cmp.w	r9, #0
   dee38:	f2c0 847a 	blt.w	df730 <__ieee754_pow+0xa18>
   dee3c:	ec47 6b10 	vmov	d0, r6, r7
   dee40:	e7b3      	b.n	dedaa <__ieee754_pow+0x92>
   dee42:	f1be 0f00 	cmp.w	lr, #0
   dee46:	d084      	beq.n	ded52 <__ieee754_pow+0x3a>
   dee48:	e7a6      	b.n	ded98 <__ieee754_pow+0x80>
   dee4a:	4b2d      	ldr	r3, [pc, #180]	; (def00 <__ieee754_pow+0x1e8>)
   dee4c:	4598      	cmp	r8, r3
   dee4e:	dc29      	bgt.n	deea4 <__ieee754_pow+0x18c>
   dee50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   dee54:	4598      	cmp	r8, r3
   dee56:	dd82      	ble.n	ded5e <__ieee754_pow+0x46>
   dee58:	ea4f 5328 	mov.w	r3, r8, asr #20
   dee5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dee60:	2b14      	cmp	r3, #20
   dee62:	f340 847f 	ble.w	df764 <__ieee754_pow+0xa4c>
   dee66:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   dee6a:	fa2e f203 	lsr.w	r2, lr, r3
   dee6e:	fa02 f303 	lsl.w	r3, r2, r3
   dee72:	459e      	cmp	lr, r3
   dee74:	f47f af73 	bne.w	ded5e <__ieee754_pow+0x46>
   dee78:	f002 0201 	and.w	r2, r2, #1
   dee7c:	f1c2 0b02 	rsb	fp, r2, #2
   dee80:	e76f      	b.n	ded62 <__ieee754_pow+0x4a>
   dee82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   dee86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dee8a:	ea53 030a 	orrs.w	r3, r3, sl
   dee8e:	d08a      	beq.n	deda6 <__ieee754_pow+0x8e>
   dee90:	4b1a      	ldr	r3, [pc, #104]	; (deefc <__ieee754_pow+0x1e4>)
   dee92:	429c      	cmp	r4, r3
   dee94:	f340 8385 	ble.w	df5a2 <__ieee754_pow+0x88a>
   dee98:	f1b9 0f00 	cmp.w	r9, #0
   dee9c:	db13      	blt.n	deec6 <__ieee754_pow+0x1ae>
   dee9e:	ed9d 0b00 	vldr	d0, [sp]
   deea2:	e782      	b.n	dedaa <__ieee754_pow+0x92>
   deea4:	f04f 0b02 	mov.w	fp, #2
   deea8:	e75b      	b.n	ded62 <__ieee754_pow+0x4a>
   deeaa:	4632      	mov	r2, r6
   deeac:	463b      	mov	r3, r7
   deeae:	4610      	mov	r0, r2
   deeb0:	4619      	mov	r1, r3
   deeb2:	f002 fc39 	bl	e1728 <__aeabi_dsub>
   deeb6:	4602      	mov	r2, r0
   deeb8:	460b      	mov	r3, r1
   deeba:	f002 ff13 	bl	e1ce4 <__aeabi_ddiv>
   deebe:	e7b6      	b.n	dee2e <__ieee754_pow+0x116>
   deec0:	f1b9 0f00 	cmp.w	r9, #0
   deec4:	db9c      	blt.n	dee00 <__ieee754_pow+0xe8>
   deec6:	ed9f 0b06 	vldr	d0, [pc, #24]	; deee0 <__ieee754_pow+0x1c8>
   deeca:	e76e      	b.n	dedaa <__ieee754_pow+0x92>
   deecc:	f3af 8000 	nop.w
   deed0:	00000000 	.word	0x00000000
   deed4:	3ff00000 	.word	0x3ff00000
   deed8:	8800759c 	.word	0x8800759c
   deedc:	7e37e43c 	.word	0x7e37e43c
	...
   deee8:	7ff00000 	.word	0x7ff00000
   deeec:	3ff00000 	.word	0x3ff00000
   deef0:	3fe00000 	.word	0x3fe00000
   deef4:	000e6a38 	.word	0x000e6a38
   deef8:	41e00000 	.word	0x41e00000
   deefc:	3fefffff 	.word	0x3fefffff
   def00:	433fffff 	.word	0x433fffff
   def04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   def08:	f04f 0200 	mov.w	r2, #0
   def0c:	da05      	bge.n	def1a <__ieee754_pow+0x202>
   def0e:	4bd6      	ldr	r3, [pc, #856]	; (df268 <__ieee754_pow+0x550>)
   def10:	f002 fdbe 	bl	e1a90 <__aeabi_dmul>
   def14:	f06f 0234 	mvn.w	r2, #52	; 0x34
   def18:	460c      	mov	r4, r1
   def1a:	1523      	asrs	r3, r4, #20
   def1c:	4ed3      	ldr	r6, [pc, #844]	; (df26c <__ieee754_pow+0x554>)
   def1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   def22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   def26:	4413      	add	r3, r2
   def28:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   def2c:	42b4      	cmp	r4, r6
   def2e:	461a      	mov	r2, r3
   def30:	930d      	str	r3, [sp, #52]	; 0x34
   def32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   def36:	f340 8349 	ble.w	df5cc <__ieee754_pow+0x8b4>
   def3a:	4bcd      	ldr	r3, [pc, #820]	; (df270 <__ieee754_pow+0x558>)
   def3c:	429c      	cmp	r4, r3
   def3e:	f340 842d 	ble.w	df79c <__ieee754_pow+0xa84>
   def42:	ed9f 7bb3 	vldr	d7, [pc, #716]	; df210 <__ieee754_pow+0x4f8>
   def46:	ed8d 7b08 	vstr	d7, [sp, #32]
   def4a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   def4e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; df218 <__ieee754_pow+0x500>
   def52:	4613      	mov	r3, r2
   def54:	ed8d 7b06 	vstr	d7, [sp, #24]
   def58:	3301      	adds	r3, #1
   def5a:	930d      	str	r3, [sp, #52]	; 0x34
   def5c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   def60:	f04f 0800 	mov.w	r8, #0
   def64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   def68:	4629      	mov	r1, r5
   def6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   def6e:	f002 fbdb 	bl	e1728 <__aeabi_dsub>
   def72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   def76:	4606      	mov	r6, r0
   def78:	460f      	mov	r7, r1
   def7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   def7e:	f002 fbd5 	bl	e172c <__adddf3>
   def82:	4602      	mov	r2, r0
   def84:	460b      	mov	r3, r1
   def86:	2000      	movs	r0, #0
   def88:	49ba      	ldr	r1, [pc, #744]	; (df274 <__ieee754_pow+0x55c>)
   def8a:	f002 feab 	bl	e1ce4 <__aeabi_ddiv>
   def8e:	4603      	mov	r3, r0
   def90:	460c      	mov	r4, r1
   def92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   def96:	4602      	mov	r2, r0
   def98:	460b      	mov	r3, r1
   def9a:	4630      	mov	r0, r6
   def9c:	4639      	mov	r1, r7
   def9e:	f002 fd77 	bl	e1a90 <__aeabi_dmul>
   defa2:	106b      	asrs	r3, r5, #1
   defa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   defa8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   defac:	eb03 0508 	add.w	r5, r3, r8
   defb0:	460a      	mov	r2, r1
   defb2:	2300      	movs	r3, #0
   defb4:	4601      	mov	r1, r0
   defb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   defba:	9302      	str	r3, [sp, #8]
   defbc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   defc0:	2400      	movs	r4, #0
   defc2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   defc6:	462b      	mov	r3, r5
   defc8:	4622      	mov	r2, r4
   defca:	4640      	mov	r0, r8
   defcc:	4649      	mov	r1, r9
   defce:	f002 fd5f 	bl	e1a90 <__aeabi_dmul>
   defd2:	4602      	mov	r2, r0
   defd4:	460b      	mov	r3, r1
   defd6:	4630      	mov	r0, r6
   defd8:	4639      	mov	r1, r7
   defda:	f002 fba5 	bl	e1728 <__aeabi_dsub>
   defde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   defe2:	4606      	mov	r6, r0
   defe4:	460f      	mov	r7, r1
   defe6:	4620      	mov	r0, r4
   defe8:	4629      	mov	r1, r5
   defea:	f002 fb9d 	bl	e1728 <__aeabi_dsub>
   defee:	4602      	mov	r2, r0
   deff0:	460b      	mov	r3, r1
   deff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   deff6:	f002 fb97 	bl	e1728 <__aeabi_dsub>
   deffa:	4642      	mov	r2, r8
   deffc:	464b      	mov	r3, r9
   deffe:	f002 fd47 	bl	e1a90 <__aeabi_dmul>
   df002:	4602      	mov	r2, r0
   df004:	460b      	mov	r3, r1
   df006:	4630      	mov	r0, r6
   df008:	4639      	mov	r1, r7
   df00a:	f002 fb8d 	bl	e1728 <__aeabi_dsub>
   df00e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   df012:	f002 fd3d 	bl	e1a90 <__aeabi_dmul>
   df016:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   df01a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   df01e:	4622      	mov	r2, r4
   df020:	462b      	mov	r3, r5
   df022:	4620      	mov	r0, r4
   df024:	4629      	mov	r1, r5
   df026:	f002 fd33 	bl	e1a90 <__aeabi_dmul>
   df02a:	a37d      	add	r3, pc, #500	; (adr r3, df220 <__ieee754_pow+0x508>)
   df02c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df030:	4604      	mov	r4, r0
   df032:	460d      	mov	r5, r1
   df034:	f002 fd2c 	bl	e1a90 <__aeabi_dmul>
   df038:	a37b      	add	r3, pc, #492	; (adr r3, df228 <__ieee754_pow+0x510>)
   df03a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df03e:	f002 fb75 	bl	e172c <__adddf3>
   df042:	4622      	mov	r2, r4
   df044:	462b      	mov	r3, r5
   df046:	f002 fd23 	bl	e1a90 <__aeabi_dmul>
   df04a:	a379      	add	r3, pc, #484	; (adr r3, df230 <__ieee754_pow+0x518>)
   df04c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df050:	f002 fb6c 	bl	e172c <__adddf3>
   df054:	4622      	mov	r2, r4
   df056:	462b      	mov	r3, r5
   df058:	f002 fd1a 	bl	e1a90 <__aeabi_dmul>
   df05c:	a376      	add	r3, pc, #472	; (adr r3, df238 <__ieee754_pow+0x520>)
   df05e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df062:	f002 fb63 	bl	e172c <__adddf3>
   df066:	4622      	mov	r2, r4
   df068:	462b      	mov	r3, r5
   df06a:	f002 fd11 	bl	e1a90 <__aeabi_dmul>
   df06e:	a374      	add	r3, pc, #464	; (adr r3, df240 <__ieee754_pow+0x528>)
   df070:	e9d3 2300 	ldrd	r2, r3, [r3]
   df074:	f002 fb5a 	bl	e172c <__adddf3>
   df078:	4622      	mov	r2, r4
   df07a:	462b      	mov	r3, r5
   df07c:	f002 fd08 	bl	e1a90 <__aeabi_dmul>
   df080:	a371      	add	r3, pc, #452	; (adr r3, df248 <__ieee754_pow+0x530>)
   df082:	e9d3 2300 	ldrd	r2, r3, [r3]
   df086:	f002 fb51 	bl	e172c <__adddf3>
   df08a:	4622      	mov	r2, r4
   df08c:	4606      	mov	r6, r0
   df08e:	460f      	mov	r7, r1
   df090:	462b      	mov	r3, r5
   df092:	4620      	mov	r0, r4
   df094:	4629      	mov	r1, r5
   df096:	f002 fcfb 	bl	e1a90 <__aeabi_dmul>
   df09a:	4602      	mov	r2, r0
   df09c:	460b      	mov	r3, r1
   df09e:	4630      	mov	r0, r6
   df0a0:	4639      	mov	r1, r7
   df0a2:	f002 fcf5 	bl	e1a90 <__aeabi_dmul>
   df0a6:	4642      	mov	r2, r8
   df0a8:	4604      	mov	r4, r0
   df0aa:	460d      	mov	r5, r1
   df0ac:	464b      	mov	r3, r9
   df0ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df0b2:	f002 fb3b 	bl	e172c <__adddf3>
   df0b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df0ba:	f002 fce9 	bl	e1a90 <__aeabi_dmul>
   df0be:	4622      	mov	r2, r4
   df0c0:	462b      	mov	r3, r5
   df0c2:	f002 fb33 	bl	e172c <__adddf3>
   df0c6:	4642      	mov	r2, r8
   df0c8:	4606      	mov	r6, r0
   df0ca:	460f      	mov	r7, r1
   df0cc:	464b      	mov	r3, r9
   df0ce:	4640      	mov	r0, r8
   df0d0:	4649      	mov	r1, r9
   df0d2:	f002 fcdd 	bl	e1a90 <__aeabi_dmul>
   df0d6:	2200      	movs	r2, #0
   df0d8:	4b67      	ldr	r3, [pc, #412]	; (df278 <__ieee754_pow+0x560>)
   df0da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   df0de:	f002 fb25 	bl	e172c <__adddf3>
   df0e2:	4632      	mov	r2, r6
   df0e4:	463b      	mov	r3, r7
   df0e6:	f002 fb21 	bl	e172c <__adddf3>
   df0ea:	9802      	ldr	r0, [sp, #8]
   df0ec:	460d      	mov	r5, r1
   df0ee:	4604      	mov	r4, r0
   df0f0:	4622      	mov	r2, r4
   df0f2:	462b      	mov	r3, r5
   df0f4:	4640      	mov	r0, r8
   df0f6:	4649      	mov	r1, r9
   df0f8:	f002 fcca 	bl	e1a90 <__aeabi_dmul>
   df0fc:	2200      	movs	r2, #0
   df0fe:	4680      	mov	r8, r0
   df100:	4689      	mov	r9, r1
   df102:	4b5d      	ldr	r3, [pc, #372]	; (df278 <__ieee754_pow+0x560>)
   df104:	4620      	mov	r0, r4
   df106:	4629      	mov	r1, r5
   df108:	f002 fb0e 	bl	e1728 <__aeabi_dsub>
   df10c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   df110:	f002 fb0a 	bl	e1728 <__aeabi_dsub>
   df114:	4602      	mov	r2, r0
   df116:	460b      	mov	r3, r1
   df118:	4630      	mov	r0, r6
   df11a:	4639      	mov	r1, r7
   df11c:	f002 fb04 	bl	e1728 <__aeabi_dsub>
   df120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df124:	f002 fcb4 	bl	e1a90 <__aeabi_dmul>
   df128:	4622      	mov	r2, r4
   df12a:	4606      	mov	r6, r0
   df12c:	460f      	mov	r7, r1
   df12e:	462b      	mov	r3, r5
   df130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df134:	f002 fcac 	bl	e1a90 <__aeabi_dmul>
   df138:	4602      	mov	r2, r0
   df13a:	460b      	mov	r3, r1
   df13c:	4630      	mov	r0, r6
   df13e:	4639      	mov	r1, r7
   df140:	f002 faf4 	bl	e172c <__adddf3>
   df144:	4606      	mov	r6, r0
   df146:	460f      	mov	r7, r1
   df148:	4602      	mov	r2, r0
   df14a:	460b      	mov	r3, r1
   df14c:	4640      	mov	r0, r8
   df14e:	4649      	mov	r1, r9
   df150:	e9cd 8904 	strd	r8, r9, [sp, #16]
   df154:	f002 faea 	bl	e172c <__adddf3>
   df158:	9802      	ldr	r0, [sp, #8]
   df15a:	a33d      	add	r3, pc, #244	; (adr r3, df250 <__ieee754_pow+0x538>)
   df15c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df160:	4604      	mov	r4, r0
   df162:	460d      	mov	r5, r1
   df164:	f002 fc94 	bl	e1a90 <__aeabi_dmul>
   df168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df16c:	4680      	mov	r8, r0
   df16e:	4689      	mov	r9, r1
   df170:	4620      	mov	r0, r4
   df172:	4629      	mov	r1, r5
   df174:	f002 fad8 	bl	e1728 <__aeabi_dsub>
   df178:	4602      	mov	r2, r0
   df17a:	460b      	mov	r3, r1
   df17c:	4630      	mov	r0, r6
   df17e:	4639      	mov	r1, r7
   df180:	f002 fad2 	bl	e1728 <__aeabi_dsub>
   df184:	a334      	add	r3, pc, #208	; (adr r3, df258 <__ieee754_pow+0x540>)
   df186:	e9d3 2300 	ldrd	r2, r3, [r3]
   df18a:	f002 fc81 	bl	e1a90 <__aeabi_dmul>
   df18e:	a334      	add	r3, pc, #208	; (adr r3, df260 <__ieee754_pow+0x548>)
   df190:	e9d3 2300 	ldrd	r2, r3, [r3]
   df194:	4606      	mov	r6, r0
   df196:	460f      	mov	r7, r1
   df198:	4620      	mov	r0, r4
   df19a:	4629      	mov	r1, r5
   df19c:	f002 fc78 	bl	e1a90 <__aeabi_dmul>
   df1a0:	4602      	mov	r2, r0
   df1a2:	460b      	mov	r3, r1
   df1a4:	4630      	mov	r0, r6
   df1a6:	4639      	mov	r1, r7
   df1a8:	f002 fac0 	bl	e172c <__adddf3>
   df1ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   df1b0:	f002 fabc 	bl	e172c <__adddf3>
   df1b4:	4606      	mov	r6, r0
   df1b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   df1b8:	460f      	mov	r7, r1
   df1ba:	f002 fc03 	bl	e19c4 <__aeabi_i2d>
   df1be:	4632      	mov	r2, r6
   df1c0:	4604      	mov	r4, r0
   df1c2:	460d      	mov	r5, r1
   df1c4:	463b      	mov	r3, r7
   df1c6:	4640      	mov	r0, r8
   df1c8:	4649      	mov	r1, r9
   df1ca:	f002 faaf 	bl	e172c <__adddf3>
   df1ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   df1d2:	f002 faab 	bl	e172c <__adddf3>
   df1d6:	4622      	mov	r2, r4
   df1d8:	462b      	mov	r3, r5
   df1da:	f002 faa7 	bl	e172c <__adddf3>
   df1de:	9802      	ldr	r0, [sp, #8]
   df1e0:	4622      	mov	r2, r4
   df1e2:	462b      	mov	r3, r5
   df1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df1e8:	f002 fa9e 	bl	e1728 <__aeabi_dsub>
   df1ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   df1f0:	f002 fa9a 	bl	e1728 <__aeabi_dsub>
   df1f4:	4642      	mov	r2, r8
   df1f6:	464b      	mov	r3, r9
   df1f8:	f002 fa96 	bl	e1728 <__aeabi_dsub>
   df1fc:	4602      	mov	r2, r0
   df1fe:	460b      	mov	r3, r1
   df200:	4630      	mov	r0, r6
   df202:	4639      	mov	r1, r7
   df204:	f002 fa90 	bl	e1728 <__aeabi_dsub>
   df208:	4680      	mov	r8, r0
   df20a:	4689      	mov	r9, r1
   df20c:	e036      	b.n	df27c <__ieee754_pow+0x564>
   df20e:	bf00      	nop
	...
   df21c:	3ff00000 	.word	0x3ff00000
   df220:	4a454eef 	.word	0x4a454eef
   df224:	3fca7e28 	.word	0x3fca7e28
   df228:	93c9db65 	.word	0x93c9db65
   df22c:	3fcd864a 	.word	0x3fcd864a
   df230:	a91d4101 	.word	0xa91d4101
   df234:	3fd17460 	.word	0x3fd17460
   df238:	518f264d 	.word	0x518f264d
   df23c:	3fd55555 	.word	0x3fd55555
   df240:	db6fabff 	.word	0xdb6fabff
   df244:	3fdb6db6 	.word	0x3fdb6db6
   df248:	33333303 	.word	0x33333303
   df24c:	3fe33333 	.word	0x3fe33333
   df250:	e0000000 	.word	0xe0000000
   df254:	3feec709 	.word	0x3feec709
   df258:	dc3a03fd 	.word	0xdc3a03fd
   df25c:	3feec709 	.word	0x3feec709
   df260:	145b01f5 	.word	0x145b01f5
   df264:	be3e2fe0 	.word	0xbe3e2fe0
   df268:	43400000 	.word	0x43400000
   df26c:	0003988e 	.word	0x0003988e
   df270:	000bb679 	.word	0x000bb679
   df274:	3ff00000 	.word	0x3ff00000
   df278:	40080000 	.word	0x40080000
   df27c:	f10b 33ff 	add.w	r3, fp, #4294967295
   df280:	ea53 030a 	orrs.w	r3, r3, sl
   df284:	f000 8188 	beq.w	df598 <__ieee754_pow+0x880>
   df288:	ed9f 7bd7 	vldr	d7, [pc, #860]	; df5e8 <__ieee754_pow+0x8d0>
   df28c:	ed8d 7b06 	vstr	d7, [sp, #24]
   df290:	e9dd ab00 	ldrd	sl, fp, [sp]
   df294:	4653      	mov	r3, sl
   df296:	465c      	mov	r4, fp
   df298:	e9cd 3400 	strd	r3, r4, [sp]
   df29c:	2300      	movs	r3, #0
   df29e:	9300      	str	r3, [sp, #0]
   df2a0:	e9dd 4500 	ldrd	r4, r5, [sp]
   df2a4:	4650      	mov	r0, sl
   df2a6:	4622      	mov	r2, r4
   df2a8:	462b      	mov	r3, r5
   df2aa:	4659      	mov	r1, fp
   df2ac:	f002 fa3c 	bl	e1728 <__aeabi_dsub>
   df2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df2b4:	f002 fbec 	bl	e1a90 <__aeabi_dmul>
   df2b8:	4652      	mov	r2, sl
   df2ba:	4606      	mov	r6, r0
   df2bc:	460f      	mov	r7, r1
   df2be:	465b      	mov	r3, fp
   df2c0:	4640      	mov	r0, r8
   df2c2:	4649      	mov	r1, r9
   df2c4:	f002 fbe4 	bl	e1a90 <__aeabi_dmul>
   df2c8:	4602      	mov	r2, r0
   df2ca:	460b      	mov	r3, r1
   df2cc:	4630      	mov	r0, r6
   df2ce:	4639      	mov	r1, r7
   df2d0:	f002 fa2c 	bl	e172c <__adddf3>
   df2d4:	4622      	mov	r2, r4
   df2d6:	4680      	mov	r8, r0
   df2d8:	4689      	mov	r9, r1
   df2da:	462b      	mov	r3, r5
   df2dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df2e0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   df2e4:	f002 fbd4 	bl	e1a90 <__aeabi_dmul>
   df2e8:	460b      	mov	r3, r1
   df2ea:	4602      	mov	r2, r0
   df2ec:	4606      	mov	r6, r0
   df2ee:	460f      	mov	r7, r1
   df2f0:	4640      	mov	r0, r8
   df2f2:	4649      	mov	r1, r9
   df2f4:	f002 fa1a 	bl	e172c <__adddf3>
   df2f8:	4bd5      	ldr	r3, [pc, #852]	; (df650 <__ieee754_pow+0x938>)
   df2fa:	4299      	cmp	r1, r3
   df2fc:	4604      	mov	r4, r0
   df2fe:	460d      	mov	r5, r1
   df300:	468a      	mov	sl, r1
   df302:	f340 8123 	ble.w	df54c <__ieee754_pow+0x834>
   df306:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   df30a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   df30e:	4303      	orrs	r3, r0
   df310:	f040 8218 	bne.w	df744 <__ieee754_pow+0xa2c>
   df314:	a3b6      	add	r3, pc, #728	; (adr r3, df5f0 <__ieee754_pow+0x8d8>)
   df316:	e9d3 2300 	ldrd	r2, r3, [r3]
   df31a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df31e:	f002 fa05 	bl	e172c <__adddf3>
   df322:	4632      	mov	r2, r6
   df324:	4680      	mov	r8, r0
   df326:	4689      	mov	r9, r1
   df328:	463b      	mov	r3, r7
   df32a:	4620      	mov	r0, r4
   df32c:	4629      	mov	r1, r5
   df32e:	f002 f9fb 	bl	e1728 <__aeabi_dsub>
   df332:	4602      	mov	r2, r0
   df334:	460b      	mov	r3, r1
   df336:	4640      	mov	r0, r8
   df338:	4649      	mov	r1, r9
   df33a:	f002 fe39 	bl	e1fb0 <__aeabi_dcmpgt>
   df33e:	2800      	cmp	r0, #0
   df340:	f040 8200 	bne.w	df744 <__ieee754_pow+0xa2c>
   df344:	46a8      	mov	r8, r5
   df346:	ea4f 5328 	mov.w	r3, r8, asr #20
   df34a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   df34e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   df352:	fa42 f303 	asr.w	r3, r2, r3
   df356:	4453      	add	r3, sl
   df358:	f3c3 520a 	ubfx	r2, r3, #20, #11
   df35c:	4dbd      	ldr	r5, [pc, #756]	; (df654 <__ieee754_pow+0x93c>)
   df35e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   df362:	4115      	asrs	r5, r2
   df364:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   df368:	2000      	movs	r0, #0
   df36a:	f1c2 0414 	rsb	r4, r2, #20
   df36e:	ea23 0105 	bic.w	r1, r3, r5
   df372:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   df376:	f1ba 0f00 	cmp.w	sl, #0
   df37a:	4602      	mov	r2, r0
   df37c:	460b      	mov	r3, r1
   df37e:	fa4b fb04 	asr.w	fp, fp, r4
   df382:	4630      	mov	r0, r6
   df384:	4639      	mov	r1, r7
   df386:	bfb8      	it	lt
   df388:	f1cb 0b00 	rsblt	fp, fp, #0
   df38c:	f002 f9cc 	bl	e1728 <__aeabi_dsub>
   df390:	4602      	mov	r2, r0
   df392:	460b      	mov	r3, r1
   df394:	4606      	mov	r6, r0
   df396:	460f      	mov	r7, r1
   df398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df39c:	f002 f9c6 	bl	e172c <__adddf3>
   df3a0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   df3a4:	2400      	movs	r4, #0
   df3a6:	a394      	add	r3, pc, #592	; (adr r3, df5f8 <__ieee754_pow+0x8e0>)
   df3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3ac:	4620      	mov	r0, r4
   df3ae:	460d      	mov	r5, r1
   df3b0:	f002 fb6e 	bl	e1a90 <__aeabi_dmul>
   df3b4:	4632      	mov	r2, r6
   df3b6:	4680      	mov	r8, r0
   df3b8:	4689      	mov	r9, r1
   df3ba:	463b      	mov	r3, r7
   df3bc:	4620      	mov	r0, r4
   df3be:	4629      	mov	r1, r5
   df3c0:	f002 f9b2 	bl	e1728 <__aeabi_dsub>
   df3c4:	4602      	mov	r2, r0
   df3c6:	460b      	mov	r3, r1
   df3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df3cc:	f002 f9ac 	bl	e1728 <__aeabi_dsub>
   df3d0:	a38b      	add	r3, pc, #556	; (adr r3, df600 <__ieee754_pow+0x8e8>)
   df3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3d6:	f002 fb5b 	bl	e1a90 <__aeabi_dmul>
   df3da:	a38b      	add	r3, pc, #556	; (adr r3, df608 <__ieee754_pow+0x8f0>)
   df3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3e0:	4606      	mov	r6, r0
   df3e2:	460f      	mov	r7, r1
   df3e4:	4620      	mov	r0, r4
   df3e6:	4629      	mov	r1, r5
   df3e8:	f002 fb52 	bl	e1a90 <__aeabi_dmul>
   df3ec:	4602      	mov	r2, r0
   df3ee:	460b      	mov	r3, r1
   df3f0:	4630      	mov	r0, r6
   df3f2:	4639      	mov	r1, r7
   df3f4:	f002 f99a 	bl	e172c <__adddf3>
   df3f8:	4606      	mov	r6, r0
   df3fa:	460f      	mov	r7, r1
   df3fc:	4602      	mov	r2, r0
   df3fe:	460b      	mov	r3, r1
   df400:	4640      	mov	r0, r8
   df402:	4649      	mov	r1, r9
   df404:	f002 f992 	bl	e172c <__adddf3>
   df408:	4642      	mov	r2, r8
   df40a:	464b      	mov	r3, r9
   df40c:	4604      	mov	r4, r0
   df40e:	460d      	mov	r5, r1
   df410:	f002 f98a 	bl	e1728 <__aeabi_dsub>
   df414:	4602      	mov	r2, r0
   df416:	460b      	mov	r3, r1
   df418:	4630      	mov	r0, r6
   df41a:	4639      	mov	r1, r7
   df41c:	f002 f984 	bl	e1728 <__aeabi_dsub>
   df420:	4622      	mov	r2, r4
   df422:	4680      	mov	r8, r0
   df424:	4689      	mov	r9, r1
   df426:	462b      	mov	r3, r5
   df428:	4620      	mov	r0, r4
   df42a:	4629      	mov	r1, r5
   df42c:	f002 fb30 	bl	e1a90 <__aeabi_dmul>
   df430:	a377      	add	r3, pc, #476	; (adr r3, df610 <__ieee754_pow+0x8f8>)
   df432:	e9d3 2300 	ldrd	r2, r3, [r3]
   df436:	4606      	mov	r6, r0
   df438:	460f      	mov	r7, r1
   df43a:	f002 fb29 	bl	e1a90 <__aeabi_dmul>
   df43e:	a376      	add	r3, pc, #472	; (adr r3, df618 <__ieee754_pow+0x900>)
   df440:	e9d3 2300 	ldrd	r2, r3, [r3]
   df444:	f002 f970 	bl	e1728 <__aeabi_dsub>
   df448:	4632      	mov	r2, r6
   df44a:	463b      	mov	r3, r7
   df44c:	f002 fb20 	bl	e1a90 <__aeabi_dmul>
   df450:	a373      	add	r3, pc, #460	; (adr r3, df620 <__ieee754_pow+0x908>)
   df452:	e9d3 2300 	ldrd	r2, r3, [r3]
   df456:	f002 f969 	bl	e172c <__adddf3>
   df45a:	4632      	mov	r2, r6
   df45c:	463b      	mov	r3, r7
   df45e:	f002 fb17 	bl	e1a90 <__aeabi_dmul>
   df462:	a371      	add	r3, pc, #452	; (adr r3, df628 <__ieee754_pow+0x910>)
   df464:	e9d3 2300 	ldrd	r2, r3, [r3]
   df468:	f002 f95e 	bl	e1728 <__aeabi_dsub>
   df46c:	4632      	mov	r2, r6
   df46e:	463b      	mov	r3, r7
   df470:	f002 fb0e 	bl	e1a90 <__aeabi_dmul>
   df474:	a36e      	add	r3, pc, #440	; (adr r3, df630 <__ieee754_pow+0x918>)
   df476:	e9d3 2300 	ldrd	r2, r3, [r3]
   df47a:	f002 f957 	bl	e172c <__adddf3>
   df47e:	4632      	mov	r2, r6
   df480:	463b      	mov	r3, r7
   df482:	f002 fb05 	bl	e1a90 <__aeabi_dmul>
   df486:	4602      	mov	r2, r0
   df488:	460b      	mov	r3, r1
   df48a:	4620      	mov	r0, r4
   df48c:	4629      	mov	r1, r5
   df48e:	f002 f94b 	bl	e1728 <__aeabi_dsub>
   df492:	4606      	mov	r6, r0
   df494:	460f      	mov	r7, r1
   df496:	4602      	mov	r2, r0
   df498:	460b      	mov	r3, r1
   df49a:	4620      	mov	r0, r4
   df49c:	4629      	mov	r1, r5
   df49e:	f002 faf7 	bl	e1a90 <__aeabi_dmul>
   df4a2:	2200      	movs	r2, #0
   df4a4:	e9cd 0100 	strd	r0, r1, [sp]
   df4a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df4ac:	4630      	mov	r0, r6
   df4ae:	4639      	mov	r1, r7
   df4b0:	f002 f93a 	bl	e1728 <__aeabi_dsub>
   df4b4:	4602      	mov	r2, r0
   df4b6:	460b      	mov	r3, r1
   df4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   df4bc:	f002 fc12 	bl	e1ce4 <__aeabi_ddiv>
   df4c0:	4642      	mov	r2, r8
   df4c2:	4606      	mov	r6, r0
   df4c4:	460f      	mov	r7, r1
   df4c6:	464b      	mov	r3, r9
   df4c8:	4620      	mov	r0, r4
   df4ca:	4629      	mov	r1, r5
   df4cc:	f002 fae0 	bl	e1a90 <__aeabi_dmul>
   df4d0:	4642      	mov	r2, r8
   df4d2:	464b      	mov	r3, r9
   df4d4:	f002 f92a 	bl	e172c <__adddf3>
   df4d8:	4602      	mov	r2, r0
   df4da:	460b      	mov	r3, r1
   df4dc:	4630      	mov	r0, r6
   df4de:	4639      	mov	r1, r7
   df4e0:	f002 f922 	bl	e1728 <__aeabi_dsub>
   df4e4:	4622      	mov	r2, r4
   df4e6:	462b      	mov	r3, r5
   df4e8:	f002 f91e 	bl	e1728 <__aeabi_dsub>
   df4ec:	4602      	mov	r2, r0
   df4ee:	460b      	mov	r3, r1
   df4f0:	2000      	movs	r0, #0
   df4f2:	4959      	ldr	r1, [pc, #356]	; (df658 <__ieee754_pow+0x940>)
   df4f4:	f002 f918 	bl	e1728 <__aeabi_dsub>
   df4f8:	448a      	add	sl, r1
   df4fa:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   df4fe:	4602      	mov	r2, r0
   df500:	460b      	mov	r3, r1
   df502:	f2c0 815b 	blt.w	df7bc <__ieee754_pow+0xaa4>
   df506:	4651      	mov	r1, sl
   df508:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df50c:	f002 fac0 	bl	e1a90 <__aeabi_dmul>
   df510:	ec41 0b10 	vmov	d0, r0, r1
   df514:	e449      	b.n	dedaa <__ieee754_pow+0x92>
   df516:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   df51a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   df51e:	ea54 030b 	orrs.w	r3, r4, fp
   df522:	f000 8137 	beq.w	df794 <__ieee754_pow+0xa7c>
   df526:	f1bb 0f01 	cmp.w	fp, #1
   df52a:	f47f ac80 	bne.w	dee2e <__ieee754_pow+0x116>
   df52e:	4602      	mov	r2, r0
   df530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df534:	ec43 2b10 	vmov	d0, r2, r3
   df538:	e437      	b.n	dedaa <__ieee754_pow+0x92>
   df53a:	4632      	mov	r2, r6
   df53c:	463b      	mov	r3, r7
   df53e:	4630      	mov	r0, r6
   df540:	4639      	mov	r1, r7
   df542:	f002 faa5 	bl	e1a90 <__aeabi_dmul>
   df546:	ec41 0b10 	vmov	d0, r0, r1
   df54a:	e42e      	b.n	dedaa <__ieee754_pow+0x92>
   df54c:	4b43      	ldr	r3, [pc, #268]	; (df65c <__ieee754_pow+0x944>)
   df54e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df552:	4598      	cmp	r8, r3
   df554:	f340 8115 	ble.w	df782 <__ieee754_pow+0xa6a>
   df558:	4b41      	ldr	r3, [pc, #260]	; (df660 <__ieee754_pow+0x948>)
   df55a:	440b      	add	r3, r1
   df55c:	4303      	orrs	r3, r0
   df55e:	d10c      	bne.n	df57a <__ieee754_pow+0x862>
   df560:	4632      	mov	r2, r6
   df562:	463b      	mov	r3, r7
   df564:	f002 f8e0 	bl	e1728 <__aeabi_dsub>
   df568:	4602      	mov	r2, r0
   df56a:	460b      	mov	r3, r1
   df56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df570:	f002 fd0a 	bl	e1f88 <__aeabi_dcmple>
   df574:	2800      	cmp	r0, #0
   df576:	f43f aee6 	beq.w	df346 <__ieee754_pow+0x62e>
   df57a:	a32f      	add	r3, pc, #188	; (adr r3, df638 <__ieee754_pow+0x920>)
   df57c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df584:	f002 fa84 	bl	e1a90 <__aeabi_dmul>
   df588:	a32b      	add	r3, pc, #172	; (adr r3, df638 <__ieee754_pow+0x920>)
   df58a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df58e:	f002 fa7f 	bl	e1a90 <__aeabi_dmul>
   df592:	ec41 0b10 	vmov	d0, r0, r1
   df596:	e408      	b.n	dedaa <__ieee754_pow+0x92>
   df598:	ed9f 7b29 	vldr	d7, [pc, #164]	; df640 <__ieee754_pow+0x928>
   df59c:	ed8d 7b06 	vstr	d7, [sp, #24]
   df5a0:	e676      	b.n	df290 <__ieee754_pow+0x578>
   df5a2:	f1b9 0f00 	cmp.w	r9, #0
   df5a6:	f6bf ac8e 	bge.w	deec6 <__ieee754_pow+0x1ae>
   df5aa:	e9dd 3400 	ldrd	r3, r4, [sp]
   df5ae:	ee00 3a10 	vmov	s0, r3
   df5b2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   df5b6:	ee00 3a90 	vmov	s1, r3
   df5ba:	f7ff bbf6 	b.w	dedaa <__ieee754_pow+0x92>
   df5be:	4602      	mov	r2, r0
   df5c0:	460b      	mov	r3, r1
   df5c2:	2000      	movs	r0, #0
   df5c4:	4924      	ldr	r1, [pc, #144]	; (df658 <__ieee754_pow+0x940>)
   df5c6:	f002 fb8d 	bl	e1ce4 <__aeabi_ddiv>
   df5ca:	e42d      	b.n	dee28 <__ieee754_pow+0x110>
   df5cc:	ed9f 7b1e 	vldr	d7, [pc, #120]	; df648 <__ieee754_pow+0x930>
   df5d0:	ed8d 7b08 	vstr	d7, [sp, #32]
   df5d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   df5d8:	ed9f 7b03 	vldr	d7, [pc, #12]	; df5e8 <__ieee754_pow+0x8d0>
   df5dc:	f04f 0800 	mov.w	r8, #0
   df5e0:	ed8d 7b06 	vstr	d7, [sp, #24]
   df5e4:	e4be      	b.n	def64 <__ieee754_pow+0x24c>
   df5e6:	bf00      	nop
   df5e8:	00000000 	.word	0x00000000
   df5ec:	3ff00000 	.word	0x3ff00000
   df5f0:	652b82fe 	.word	0x652b82fe
   df5f4:	3c971547 	.word	0x3c971547
   df5f8:	00000000 	.word	0x00000000
   df5fc:	3fe62e43 	.word	0x3fe62e43
   df600:	fefa39ef 	.word	0xfefa39ef
   df604:	3fe62e42 	.word	0x3fe62e42
   df608:	0ca86c39 	.word	0x0ca86c39
   df60c:	be205c61 	.word	0xbe205c61
   df610:	72bea4d0 	.word	0x72bea4d0
   df614:	3e663769 	.word	0x3e663769
   df618:	c5d26bf1 	.word	0xc5d26bf1
   df61c:	3ebbbd41 	.word	0x3ebbbd41
   df620:	af25de2c 	.word	0xaf25de2c
   df624:	3f11566a 	.word	0x3f11566a
   df628:	16bebd93 	.word	0x16bebd93
   df62c:	3f66c16c 	.word	0x3f66c16c
   df630:	5555553e 	.word	0x5555553e
   df634:	3fc55555 	.word	0x3fc55555
   df638:	c2f8f359 	.word	0xc2f8f359
   df63c:	01a56e1f 	.word	0x01a56e1f
   df640:	00000000 	.word	0x00000000
   df644:	bff00000 	.word	0xbff00000
	...
   df650:	408fffff 	.word	0x408fffff
   df654:	000fffff 	.word	0x000fffff
   df658:	3ff00000 	.word	0x3ff00000
   df65c:	4090cbff 	.word	0x4090cbff
   df660:	3f6f3400 	.word	0x3f6f3400
   df664:	4b6c      	ldr	r3, [pc, #432]	; (df818 <__ieee754_pow+0xb00>)
   df666:	429c      	cmp	r4, r3
   df668:	f77f ac2a 	ble.w	deec0 <__ieee754_pow+0x1a8>
   df66c:	4b6b      	ldr	r3, [pc, #428]	; (df81c <__ieee754_pow+0xb04>)
   df66e:	429c      	cmp	r4, r3
   df670:	f73f abc3 	bgt.w	dedfa <__ieee754_pow+0xe2>
   df674:	2200      	movs	r2, #0
   df676:	4b69      	ldr	r3, [pc, #420]	; (df81c <__ieee754_pow+0xb04>)
   df678:	f002 f856 	bl	e1728 <__aeabi_dsub>
   df67c:	a356      	add	r3, pc, #344	; (adr r3, df7d8 <__ieee754_pow+0xac0>)
   df67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df682:	4604      	mov	r4, r0
   df684:	460d      	mov	r5, r1
   df686:	f002 fa03 	bl	e1a90 <__aeabi_dmul>
   df68a:	a355      	add	r3, pc, #340	; (adr r3, df7e0 <__ieee754_pow+0xac8>)
   df68c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df690:	4680      	mov	r8, r0
   df692:	4689      	mov	r9, r1
   df694:	4620      	mov	r0, r4
   df696:	4629      	mov	r1, r5
   df698:	f002 f9fa 	bl	e1a90 <__aeabi_dmul>
   df69c:	2200      	movs	r2, #0
   df69e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df6a2:	4b5f      	ldr	r3, [pc, #380]	; (df820 <__ieee754_pow+0xb08>)
   df6a4:	4620      	mov	r0, r4
   df6a6:	4629      	mov	r1, r5
   df6a8:	f002 f9f2 	bl	e1a90 <__aeabi_dmul>
   df6ac:	4602      	mov	r2, r0
   df6ae:	460b      	mov	r3, r1
   df6b0:	a14d      	add	r1, pc, #308	; (adr r1, df7e8 <__ieee754_pow+0xad0>)
   df6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
   df6b6:	f002 f837 	bl	e1728 <__aeabi_dsub>
   df6ba:	4622      	mov	r2, r4
   df6bc:	462b      	mov	r3, r5
   df6be:	f002 f9e7 	bl	e1a90 <__aeabi_dmul>
   df6c2:	4602      	mov	r2, r0
   df6c4:	460b      	mov	r3, r1
   df6c6:	2000      	movs	r0, #0
   df6c8:	4956      	ldr	r1, [pc, #344]	; (df824 <__ieee754_pow+0xb0c>)
   df6ca:	f002 f82d 	bl	e1728 <__aeabi_dsub>
   df6ce:	4622      	mov	r2, r4
   df6d0:	462b      	mov	r3, r5
   df6d2:	4606      	mov	r6, r0
   df6d4:	460f      	mov	r7, r1
   df6d6:	4620      	mov	r0, r4
   df6d8:	4629      	mov	r1, r5
   df6da:	f002 f9d9 	bl	e1a90 <__aeabi_dmul>
   df6de:	4602      	mov	r2, r0
   df6e0:	460b      	mov	r3, r1
   df6e2:	4630      	mov	r0, r6
   df6e4:	4639      	mov	r1, r7
   df6e6:	f002 f9d3 	bl	e1a90 <__aeabi_dmul>
   df6ea:	a341      	add	r3, pc, #260	; (adr r3, df7f0 <__ieee754_pow+0xad8>)
   df6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6f0:	f002 f9ce 	bl	e1a90 <__aeabi_dmul>
   df6f4:	4602      	mov	r2, r0
   df6f6:	460b      	mov	r3, r1
   df6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df6fc:	f002 f814 	bl	e1728 <__aeabi_dsub>
   df700:	4602      	mov	r2, r0
   df702:	460b      	mov	r3, r1
   df704:	4604      	mov	r4, r0
   df706:	460d      	mov	r5, r1
   df708:	4640      	mov	r0, r8
   df70a:	4649      	mov	r1, r9
   df70c:	f002 f80e 	bl	e172c <__adddf3>
   df710:	4642      	mov	r2, r8
   df712:	464b      	mov	r3, r9
   df714:	2000      	movs	r0, #0
   df716:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df71a:	f002 f805 	bl	e1728 <__aeabi_dsub>
   df71e:	4602      	mov	r2, r0
   df720:	460b      	mov	r3, r1
   df722:	4620      	mov	r0, r4
   df724:	4629      	mov	r1, r5
   df726:	f001 ffff 	bl	e1728 <__aeabi_dsub>
   df72a:	4680      	mov	r8, r0
   df72c:	4689      	mov	r9, r1
   df72e:	e5a5      	b.n	df27c <__ieee754_pow+0x564>
   df730:	4632      	mov	r2, r6
   df732:	463b      	mov	r3, r7
   df734:	2000      	movs	r0, #0
   df736:	4939      	ldr	r1, [pc, #228]	; (df81c <__ieee754_pow+0xb04>)
   df738:	f002 fad4 	bl	e1ce4 <__aeabi_ddiv>
   df73c:	ec41 0b10 	vmov	d0, r0, r1
   df740:	f7ff bb33 	b.w	dedaa <__ieee754_pow+0x92>
   df744:	a32c      	add	r3, pc, #176	; (adr r3, df7f8 <__ieee754_pow+0xae0>)
   df746:	e9d3 2300 	ldrd	r2, r3, [r3]
   df74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df74e:	f002 f99f 	bl	e1a90 <__aeabi_dmul>
   df752:	a329      	add	r3, pc, #164	; (adr r3, df7f8 <__ieee754_pow+0xae0>)
   df754:	e9d3 2300 	ldrd	r2, r3, [r3]
   df758:	f002 f99a 	bl	e1a90 <__aeabi_dmul>
   df75c:	ec41 0b10 	vmov	d0, r0, r1
   df760:	f7ff bb23 	b.w	dedaa <__ieee754_pow+0x92>
   df764:	f1be 0f00 	cmp.w	lr, #0
   df768:	f47f ab2a 	bne.w	dedc0 <__ieee754_pow+0xa8>
   df76c:	f1c3 0314 	rsb	r3, r3, #20
   df770:	fa48 f203 	asr.w	r2, r8, r3
   df774:	fa02 f303 	lsl.w	r3, r2, r3
   df778:	4598      	cmp	r8, r3
   df77a:	d027      	beq.n	df7cc <__ieee754_pow+0xab4>
   df77c:	46f3      	mov	fp, lr
   df77e:	f7ff baf7 	b.w	ded70 <__ieee754_pow+0x58>
   df782:	4b28      	ldr	r3, [pc, #160]	; (df824 <__ieee754_pow+0xb0c>)
   df784:	4598      	cmp	r8, r3
   df786:	f73f adde 	bgt.w	df346 <__ieee754_pow+0x62e>
   df78a:	e9dd 3400 	ldrd	r3, r4, [sp]
   df78e:	469a      	mov	sl, r3
   df790:	469b      	mov	fp, r3
   df792:	e607      	b.n	df3a4 <__ieee754_pow+0x68c>
   df794:	4602      	mov	r2, r0
   df796:	460b      	mov	r3, r1
   df798:	f7ff bb89 	b.w	deeae <__ieee754_pow+0x196>
   df79c:	ed9f 7b18 	vldr	d7, [pc, #96]	; df800 <__ieee754_pow+0xae8>
   df7a0:	ed8d 7b08 	vstr	d7, [sp, #32]
   df7a4:	ed9f 7b18 	vldr	d7, [pc, #96]	; df808 <__ieee754_pow+0xaf0>
   df7a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   df7ac:	ed9f 7b18 	vldr	d7, [pc, #96]	; df810 <__ieee754_pow+0xaf8>
   df7b0:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   df7b4:	ed8d 7b06 	vstr	d7, [sp, #24]
   df7b8:	f7ff bbd4 	b.w	def64 <__ieee754_pow+0x24c>
   df7bc:	4658      	mov	r0, fp
   df7be:	ec43 2b10 	vmov	d0, r2, r3
   df7c2:	f001 ff19 	bl	e15f8 <scalbn>
   df7c6:	ec51 0b10 	vmov	r0, r1, d0
   df7ca:	e69d      	b.n	df508 <__ieee754_pow+0x7f0>
   df7cc:	f002 0201 	and.w	r2, r2, #1
   df7d0:	f1c2 0b02 	rsb	fp, r2, #2
   df7d4:	f7ff bacc 	b.w	ded70 <__ieee754_pow+0x58>
   df7d8:	60000000 	.word	0x60000000
   df7dc:	3ff71547 	.word	0x3ff71547
   df7e0:	f85ddf44 	.word	0xf85ddf44
   df7e4:	3e54ae0b 	.word	0x3e54ae0b
   df7e8:	55555555 	.word	0x55555555
   df7ec:	3fd55555 	.word	0x3fd55555
   df7f0:	652b82fe 	.word	0x652b82fe
   df7f4:	3ff71547 	.word	0x3ff71547
   df7f8:	8800759c 	.word	0x8800759c
   df7fc:	7e37e43c 	.word	0x7e37e43c
   df800:	40000000 	.word	0x40000000
   df804:	3fe2b803 	.word	0x3fe2b803
   df808:	43cfd006 	.word	0x43cfd006
   df80c:	3e4cfdeb 	.word	0x3e4cfdeb
   df810:	00000000 	.word	0x00000000
   df814:	3ff80000 	.word	0x3ff80000
   df818:	3feffffe 	.word	0x3feffffe
   df81c:	3ff00000 	.word	0x3ff00000
   df820:	3fd00000 	.word	0x3fd00000
   df824:	3fe00000 	.word	0x3fe00000

000df828 <__ieee754_rem_pio2>:
   df828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df82c:	ec53 2b10 	vmov	r2, r3, d0
   df830:	4997      	ldr	r1, [pc, #604]	; (dfa90 <__ieee754_rem_pio2+0x268>)
   df832:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   df836:	458b      	cmp	fp, r1
   df838:	b08f      	sub	sp, #60	; 0x3c
   df83a:	f340 8087 	ble.w	df94c <__ieee754_rem_pio2+0x124>
   df83e:	4995      	ldr	r1, [pc, #596]	; (dfa94 <__ieee754_rem_pio2+0x26c>)
   df840:	458b      	cmp	fp, r1
   df842:	461c      	mov	r4, r3
   df844:	4682      	mov	sl, r0
   df846:	dc29      	bgt.n	df89c <__ieee754_rem_pio2+0x74>
   df848:	2c00      	cmp	r4, #0
   df84a:	4619      	mov	r1, r3
   df84c:	ee10 0a10 	vmov	r0, s0
   df850:	a385      	add	r3, pc, #532	; (adr r3, dfa68 <__ieee754_rem_pio2+0x240>)
   df852:	e9d3 2300 	ldrd	r2, r3, [r3]
   df856:	f340 81a5 	ble.w	dfba4 <__ieee754_rem_pio2+0x37c>
   df85a:	f001 ff65 	bl	e1728 <__aeabi_dsub>
   df85e:	4b8e      	ldr	r3, [pc, #568]	; (dfa98 <__ieee754_rem_pio2+0x270>)
   df860:	459b      	cmp	fp, r3
   df862:	4604      	mov	r4, r0
   df864:	460d      	mov	r5, r1
   df866:	f000 8087 	beq.w	df978 <__ieee754_rem_pio2+0x150>
   df86a:	a381      	add	r3, pc, #516	; (adr r3, dfa70 <__ieee754_rem_pio2+0x248>)
   df86c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df870:	f001 ff5a 	bl	e1728 <__aeabi_dsub>
   df874:	4602      	mov	r2, r0
   df876:	460b      	mov	r3, r1
   df878:	e9ca 2300 	strd	r2, r3, [sl]
   df87c:	4620      	mov	r0, r4
   df87e:	4629      	mov	r1, r5
   df880:	f001 ff52 	bl	e1728 <__aeabi_dsub>
   df884:	a37a      	add	r3, pc, #488	; (adr r3, dfa70 <__ieee754_rem_pio2+0x248>)
   df886:	e9d3 2300 	ldrd	r2, r3, [r3]
   df88a:	f001 ff4d 	bl	e1728 <__aeabi_dsub>
   df88e:	2501      	movs	r5, #1
   df890:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df894:	4628      	mov	r0, r5
   df896:	b00f      	add	sp, #60	; 0x3c
   df898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df89c:	497f      	ldr	r1, [pc, #508]	; (dfa9c <__ieee754_rem_pio2+0x274>)
   df89e:	458b      	cmp	fp, r1
   df8a0:	f340 8087 	ble.w	df9b2 <__ieee754_rem_pio2+0x18a>
   df8a4:	497e      	ldr	r1, [pc, #504]	; (dfaa0 <__ieee754_rem_pio2+0x278>)
   df8a6:	458b      	cmp	fp, r1
   df8a8:	dc5b      	bgt.n	df962 <__ieee754_rem_pio2+0x13a>
   df8aa:	ea4f 552b 	mov.w	r5, fp, asr #20
   df8ae:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   df8b2:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   df8b6:	4610      	mov	r0, r2
   df8b8:	4639      	mov	r1, r7
   df8ba:	ee10 6a10 	vmov	r6, s0
   df8be:	f002 fb97 	bl	e1ff0 <__aeabi_d2iz>
   df8c2:	f002 f87f 	bl	e19c4 <__aeabi_i2d>
   df8c6:	4680      	mov	r8, r0
   df8c8:	4689      	mov	r9, r1
   df8ca:	4642      	mov	r2, r8
   df8cc:	464b      	mov	r3, r9
   df8ce:	4630      	mov	r0, r6
   df8d0:	4639      	mov	r1, r7
   df8d2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   df8d6:	f001 ff27 	bl	e1728 <__aeabi_dsub>
   df8da:	2200      	movs	r2, #0
   df8dc:	4b71      	ldr	r3, [pc, #452]	; (dfaa4 <__ieee754_rem_pio2+0x27c>)
   df8de:	f002 f8d7 	bl	e1a90 <__aeabi_dmul>
   df8e2:	4689      	mov	r9, r1
   df8e4:	4680      	mov	r8, r0
   df8e6:	f002 fb83 	bl	e1ff0 <__aeabi_d2iz>
   df8ea:	f002 f86b 	bl	e19c4 <__aeabi_i2d>
   df8ee:	4606      	mov	r6, r0
   df8f0:	460f      	mov	r7, r1
   df8f2:	4632      	mov	r2, r6
   df8f4:	463b      	mov	r3, r7
   df8f6:	4640      	mov	r0, r8
   df8f8:	4649      	mov	r1, r9
   df8fa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   df8fe:	f001 ff13 	bl	e1728 <__aeabi_dsub>
   df902:	2200      	movs	r2, #0
   df904:	4b67      	ldr	r3, [pc, #412]	; (dfaa4 <__ieee754_rem_pio2+0x27c>)
   df906:	f002 f8c3 	bl	e1a90 <__aeabi_dmul>
   df90a:	2200      	movs	r2, #0
   df90c:	2300      	movs	r3, #0
   df90e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   df912:	f002 fb25 	bl	e1f60 <__aeabi_dcmpeq>
   df916:	2800      	cmp	r0, #0
   df918:	f000 8170 	beq.w	dfbfc <__ieee754_rem_pio2+0x3d4>
   df91c:	2300      	movs	r3, #0
   df91e:	4630      	mov	r0, r6
   df920:	4639      	mov	r1, r7
   df922:	2200      	movs	r2, #0
   df924:	f002 fb1c 	bl	e1f60 <__aeabi_dcmpeq>
   df928:	2800      	cmp	r0, #0
   df92a:	bf14      	ite	ne
   df92c:	2301      	movne	r3, #1
   df92e:	2302      	moveq	r3, #2
   df930:	4a5d      	ldr	r2, [pc, #372]	; (dfaa8 <__ieee754_rem_pio2+0x280>)
   df932:	9201      	str	r2, [sp, #4]
   df934:	2102      	movs	r1, #2
   df936:	9100      	str	r1, [sp, #0]
   df938:	462a      	mov	r2, r5
   df93a:	4651      	mov	r1, sl
   df93c:	a808      	add	r0, sp, #32
   df93e:	f000 fc93 	bl	e0268 <__kernel_rem_pio2>
   df942:	2c00      	cmp	r4, #0
   df944:	f2c0 814c 	blt.w	dfbe0 <__ieee754_rem_pio2+0x3b8>
   df948:	4605      	mov	r5, r0
   df94a:	e006      	b.n	df95a <__ieee754_rem_pio2+0x132>
   df94c:	ed80 0b00 	vstr	d0, [r0]
   df950:	2500      	movs	r5, #0
   df952:	2400      	movs	r4, #0
   df954:	e9c0 4502 	strd	r4, r5, [r0, #8]
   df958:	2500      	movs	r5, #0
   df95a:	4628      	mov	r0, r5
   df95c:	b00f      	add	sp, #60	; 0x3c
   df95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df962:	ee10 0a10 	vmov	r0, s0
   df966:	4619      	mov	r1, r3
   df968:	f001 fede 	bl	e1728 <__aeabi_dsub>
   df96c:	2500      	movs	r5, #0
   df96e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df972:	e9ca 0100 	strd	r0, r1, [sl]
   df976:	e7f0      	b.n	df95a <__ieee754_rem_pio2+0x132>
   df978:	a33f      	add	r3, pc, #252	; (adr r3, dfa78 <__ieee754_rem_pio2+0x250>)
   df97a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df97e:	f001 fed3 	bl	e1728 <__aeabi_dsub>
   df982:	a33f      	add	r3, pc, #252	; (adr r3, dfa80 <__ieee754_rem_pio2+0x258>)
   df984:	e9d3 2300 	ldrd	r2, r3, [r3]
   df988:	460d      	mov	r5, r1
   df98a:	4604      	mov	r4, r0
   df98c:	f001 fecc 	bl	e1728 <__aeabi_dsub>
   df990:	4602      	mov	r2, r0
   df992:	460b      	mov	r3, r1
   df994:	e9ca 2300 	strd	r2, r3, [sl]
   df998:	4629      	mov	r1, r5
   df99a:	4620      	mov	r0, r4
   df99c:	f001 fec4 	bl	e1728 <__aeabi_dsub>
   df9a0:	a337      	add	r3, pc, #220	; (adr r3, dfa80 <__ieee754_rem_pio2+0x258>)
   df9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9a6:	f001 febf 	bl	e1728 <__aeabi_dsub>
   df9aa:	2501      	movs	r5, #1
   df9ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df9b0:	e7d3      	b.n	df95a <__ieee754_rem_pio2+0x132>
   df9b2:	f7fc fe65 	bl	dc680 <fabs>
   df9b6:	ec57 6b10 	vmov	r6, r7, d0
   df9ba:	ee10 0a10 	vmov	r0, s0
   df9be:	a332      	add	r3, pc, #200	; (adr r3, dfa88 <__ieee754_rem_pio2+0x260>)
   df9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9c4:	4639      	mov	r1, r7
   df9c6:	f002 f863 	bl	e1a90 <__aeabi_dmul>
   df9ca:	2200      	movs	r2, #0
   df9cc:	4b37      	ldr	r3, [pc, #220]	; (dfaac <__ieee754_rem_pio2+0x284>)
   df9ce:	f001 fead 	bl	e172c <__adddf3>
   df9d2:	f002 fb0d 	bl	e1ff0 <__aeabi_d2iz>
   df9d6:	4605      	mov	r5, r0
   df9d8:	f001 fff4 	bl	e19c4 <__aeabi_i2d>
   df9dc:	a322      	add	r3, pc, #136	; (adr r3, dfa68 <__ieee754_rem_pio2+0x240>)
   df9de:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   df9e6:	f002 f853 	bl	e1a90 <__aeabi_dmul>
   df9ea:	4602      	mov	r2, r0
   df9ec:	460b      	mov	r3, r1
   df9ee:	4630      	mov	r0, r6
   df9f0:	4639      	mov	r1, r7
   df9f2:	f001 fe99 	bl	e1728 <__aeabi_dsub>
   df9f6:	a31e      	add	r3, pc, #120	; (adr r3, dfa70 <__ieee754_rem_pio2+0x248>)
   df9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9fc:	4680      	mov	r8, r0
   df9fe:	4689      	mov	r9, r1
   dfa00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfa04:	f002 f844 	bl	e1a90 <__aeabi_dmul>
   dfa08:	2d1f      	cmp	r5, #31
   dfa0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfa0e:	dc51      	bgt.n	dfab4 <__ieee754_rem_pio2+0x28c>
   dfa10:	4b27      	ldr	r3, [pc, #156]	; (dfab0 <__ieee754_rem_pio2+0x288>)
   dfa12:	1e6a      	subs	r2, r5, #1
   dfa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dfa18:	459b      	cmp	fp, r3
   dfa1a:	d04b      	beq.n	dfab4 <__ieee754_rem_pio2+0x28c>
   dfa1c:	4602      	mov	r2, r0
   dfa1e:	460b      	mov	r3, r1
   dfa20:	4640      	mov	r0, r8
   dfa22:	4649      	mov	r1, r9
   dfa24:	f001 fe80 	bl	e1728 <__aeabi_dsub>
   dfa28:	4606      	mov	r6, r0
   dfa2a:	460f      	mov	r7, r1
   dfa2c:	e9ca 6700 	strd	r6, r7, [sl]
   dfa30:	4632      	mov	r2, r6
   dfa32:	463b      	mov	r3, r7
   dfa34:	4640      	mov	r0, r8
   dfa36:	4649      	mov	r1, r9
   dfa38:	f001 fe76 	bl	e1728 <__aeabi_dsub>
   dfa3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfa40:	f001 fe72 	bl	e1728 <__aeabi_dsub>
   dfa44:	2c00      	cmp	r4, #0
   dfa46:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfa4a:	da86      	bge.n	df95a <__ieee754_rem_pio2+0x132>
   dfa4c:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   dfa50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dfa54:	426d      	negs	r5, r5
   dfa56:	f8ca 6000 	str.w	r6, [sl]
   dfa5a:	f8ca 4004 	str.w	r4, [sl, #4]
   dfa5e:	f8ca 0008 	str.w	r0, [sl, #8]
   dfa62:	f8ca 300c 	str.w	r3, [sl, #12]
   dfa66:	e778      	b.n	df95a <__ieee754_rem_pio2+0x132>
   dfa68:	54400000 	.word	0x54400000
   dfa6c:	3ff921fb 	.word	0x3ff921fb
   dfa70:	1a626331 	.word	0x1a626331
   dfa74:	3dd0b461 	.word	0x3dd0b461
   dfa78:	1a600000 	.word	0x1a600000
   dfa7c:	3dd0b461 	.word	0x3dd0b461
   dfa80:	2e037073 	.word	0x2e037073
   dfa84:	3ba3198a 	.word	0x3ba3198a
   dfa88:	6dc9c883 	.word	0x6dc9c883
   dfa8c:	3fe45f30 	.word	0x3fe45f30
   dfa90:	3fe921fb 	.word	0x3fe921fb
   dfa94:	4002d97b 	.word	0x4002d97b
   dfa98:	3ff921fb 	.word	0x3ff921fb
   dfa9c:	413921fb 	.word	0x413921fb
   dfaa0:	7fefffff 	.word	0x7fefffff
   dfaa4:	41700000 	.word	0x41700000
   dfaa8:	000e6b20 	.word	0x000e6b20
   dfaac:	3fe00000 	.word	0x3fe00000
   dfab0:	000e6aa0 	.word	0x000e6aa0
   dfab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfab8:	4640      	mov	r0, r8
   dfaba:	4649      	mov	r1, r9
   dfabc:	f001 fe34 	bl	e1728 <__aeabi_dsub>
   dfac0:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   dfac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dfac8:	ebc3 030b 	rsb	r3, r3, fp
   dfacc:	4606      	mov	r6, r0
   dface:	460f      	mov	r7, r1
   dfad0:	2b10      	cmp	r3, #16
   dfad2:	e9ca 6700 	strd	r6, r7, [sl]
   dfad6:	ddab      	ble.n	dfa30 <__ieee754_rem_pio2+0x208>
   dfad8:	a35d      	add	r3, pc, #372	; (adr r3, dfc50 <__ieee754_rem_pio2+0x428>)
   dfada:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfae2:	f001 ffd5 	bl	e1a90 <__aeabi_dmul>
   dfae6:	4606      	mov	r6, r0
   dfae8:	460f      	mov	r7, r1
   dfaea:	4602      	mov	r2, r0
   dfaec:	460b      	mov	r3, r1
   dfaee:	4640      	mov	r0, r8
   dfaf0:	4649      	mov	r1, r9
   dfaf2:	f001 fe19 	bl	e1728 <__aeabi_dsub>
   dfaf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dfafa:	4602      	mov	r2, r0
   dfafc:	460b      	mov	r3, r1
   dfafe:	4640      	mov	r0, r8
   dfb00:	4649      	mov	r1, r9
   dfb02:	f001 fe11 	bl	e1728 <__aeabi_dsub>
   dfb06:	4632      	mov	r2, r6
   dfb08:	463b      	mov	r3, r7
   dfb0a:	f001 fe0d 	bl	e1728 <__aeabi_dsub>
   dfb0e:	a352      	add	r3, pc, #328	; (adr r3, dfc58 <__ieee754_rem_pio2+0x430>)
   dfb10:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb14:	4606      	mov	r6, r0
   dfb16:	460f      	mov	r7, r1
   dfb18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfb1c:	f001 ffb8 	bl	e1a90 <__aeabi_dmul>
   dfb20:	4632      	mov	r2, r6
   dfb22:	463b      	mov	r3, r7
   dfb24:	f001 fe00 	bl	e1728 <__aeabi_dsub>
   dfb28:	460b      	mov	r3, r1
   dfb2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfb2e:	4602      	mov	r2, r0
   dfb30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfb34:	f001 fdf8 	bl	e1728 <__aeabi_dsub>
   dfb38:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dfb3c:	ebc3 0b0b 	rsb	fp, r3, fp
   dfb40:	4606      	mov	r6, r0
   dfb42:	460f      	mov	r7, r1
   dfb44:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   dfb48:	e9ca 6700 	strd	r6, r7, [sl]
   dfb4c:	dd76      	ble.n	dfc3c <__ieee754_rem_pio2+0x414>
   dfb4e:	a345      	add	r3, pc, #276	; (adr r3, dfc64 <__ieee754_rem_pio2+0x43c>)
   dfb50:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfb58:	f001 ff9a 	bl	e1a90 <__aeabi_dmul>
   dfb5c:	4606      	mov	r6, r0
   dfb5e:	460f      	mov	r7, r1
   dfb60:	4602      	mov	r2, r0
   dfb62:	460b      	mov	r3, r1
   dfb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfb68:	f001 fdde 	bl	e1728 <__aeabi_dsub>
   dfb6c:	4602      	mov	r2, r0
   dfb6e:	460b      	mov	r3, r1
   dfb70:	4680      	mov	r8, r0
   dfb72:	4689      	mov	r9, r1
   dfb74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfb78:	f001 fdd6 	bl	e1728 <__aeabi_dsub>
   dfb7c:	4632      	mov	r2, r6
   dfb7e:	463b      	mov	r3, r7
   dfb80:	f001 fdd2 	bl	e1728 <__aeabi_dsub>
   dfb84:	a339      	add	r3, pc, #228	; (adr r3, dfc6c <__ieee754_rem_pio2+0x444>)
   dfb86:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb8a:	4606      	mov	r6, r0
   dfb8c:	460f      	mov	r7, r1
   dfb8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfb92:	f001 ff7d 	bl	e1a90 <__aeabi_dmul>
   dfb96:	4632      	mov	r2, r6
   dfb98:	463b      	mov	r3, r7
   dfb9a:	f001 fdc5 	bl	e1728 <__aeabi_dsub>
   dfb9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfba2:	e73b      	b.n	dfa1c <__ieee754_rem_pio2+0x1f4>
   dfba4:	f001 fdc2 	bl	e172c <__adddf3>
   dfba8:	4b2d      	ldr	r3, [pc, #180]	; (dfc60 <__ieee754_rem_pio2+0x438>)
   dfbaa:	459b      	cmp	fp, r3
   dfbac:	4604      	mov	r4, r0
   dfbae:	460d      	mov	r5, r1
   dfbb0:	d026      	beq.n	dfc00 <__ieee754_rem_pio2+0x3d8>
   dfbb2:	a325      	add	r3, pc, #148	; (adr r3, dfc48 <__ieee754_rem_pio2+0x420>)
   dfbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbb8:	f001 fdb8 	bl	e172c <__adddf3>
   dfbbc:	4602      	mov	r2, r0
   dfbbe:	460b      	mov	r3, r1
   dfbc0:	e9ca 2300 	strd	r2, r3, [sl]
   dfbc4:	4629      	mov	r1, r5
   dfbc6:	4620      	mov	r0, r4
   dfbc8:	f001 fdae 	bl	e1728 <__aeabi_dsub>
   dfbcc:	a31e      	add	r3, pc, #120	; (adr r3, dfc48 <__ieee754_rem_pio2+0x420>)
   dfbce:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbd2:	f001 fdab 	bl	e172c <__adddf3>
   dfbd6:	f04f 35ff 	mov.w	r5, #4294967295
   dfbda:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfbde:	e6bc      	b.n	df95a <__ieee754_rem_pio2+0x132>
   dfbe0:	f8da 2004 	ldr.w	r2, [sl, #4]
   dfbe4:	f8da 300c 	ldr.w	r3, [sl, #12]
   dfbe8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dfbec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dfbf0:	4245      	negs	r5, r0
   dfbf2:	f8ca 2004 	str.w	r2, [sl, #4]
   dfbf6:	f8ca 300c 	str.w	r3, [sl, #12]
   dfbfa:	e6ae      	b.n	df95a <__ieee754_rem_pio2+0x132>
   dfbfc:	2303      	movs	r3, #3
   dfbfe:	e697      	b.n	df930 <__ieee754_rem_pio2+0x108>
   dfc00:	a313      	add	r3, pc, #76	; (adr r3, dfc50 <__ieee754_rem_pio2+0x428>)
   dfc02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc06:	f001 fd91 	bl	e172c <__adddf3>
   dfc0a:	a313      	add	r3, pc, #76	; (adr r3, dfc58 <__ieee754_rem_pio2+0x430>)
   dfc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc10:	460d      	mov	r5, r1
   dfc12:	4604      	mov	r4, r0
   dfc14:	f001 fd8a 	bl	e172c <__adddf3>
   dfc18:	4602      	mov	r2, r0
   dfc1a:	460b      	mov	r3, r1
   dfc1c:	e9ca 2300 	strd	r2, r3, [sl]
   dfc20:	4629      	mov	r1, r5
   dfc22:	4620      	mov	r0, r4
   dfc24:	f001 fd80 	bl	e1728 <__aeabi_dsub>
   dfc28:	a30b      	add	r3, pc, #44	; (adr r3, dfc58 <__ieee754_rem_pio2+0x430>)
   dfc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc2e:	f001 fd7d 	bl	e172c <__adddf3>
   dfc32:	f04f 35ff 	mov.w	r5, #4294967295
   dfc36:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfc3a:	e68e      	b.n	df95a <__ieee754_rem_pio2+0x132>
   dfc3c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   dfc40:	e6f6      	b.n	dfa30 <__ieee754_rem_pio2+0x208>
   dfc42:	bf00      	nop
   dfc44:	f3af 8000 	nop.w
   dfc48:	1a626331 	.word	0x1a626331
   dfc4c:	3dd0b461 	.word	0x3dd0b461
   dfc50:	1a600000 	.word	0x1a600000
   dfc54:	3dd0b461 	.word	0x3dd0b461
   dfc58:	2e037073 	.word	0x2e037073
   dfc5c:	3ba3198a 	.word	0x3ba3198a
   dfc60:	3ff921fb 	.word	0x3ff921fb
   dfc64:	2e000000 	.word	0x2e000000
   dfc68:	3ba3198a 	.word	0x3ba3198a
   dfc6c:	252049c1 	.word	0x252049c1
   dfc70:	397b839a 	.word	0x397b839a
   dfc74:	00000000 	.word	0x00000000

000dfc78 <__ieee754_sinh>:
   dfc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfc7c:	ec57 6b10 	vmov	r6, r7, d0
   dfc80:	4a65      	ldr	r2, [pc, #404]	; (dfe18 <__ieee754_sinh+0x1a0>)
   dfc82:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   dfc86:	4590      	cmp	r8, r2
   dfc88:	dc32      	bgt.n	dfcf0 <__ieee754_sinh+0x78>
   dfc8a:	4b64      	ldr	r3, [pc, #400]	; (dfe1c <__ieee754_sinh+0x1a4>)
   dfc8c:	2f00      	cmp	r7, #0
   dfc8e:	bfb4      	ite	lt
   dfc90:	4d63      	ldrlt	r5, [pc, #396]	; (dfe20 <__ieee754_sinh+0x1a8>)
   dfc92:	4d64      	ldrge	r5, [pc, #400]	; (dfe24 <__ieee754_sinh+0x1ac>)
   dfc94:	4598      	cmp	r8, r3
   dfc96:	f04f 0400 	mov.w	r4, #0
   dfc9a:	dc14      	bgt.n	dfcc6 <__ieee754_sinh+0x4e>
   dfc9c:	4b62      	ldr	r3, [pc, #392]	; (dfe28 <__ieee754_sinh+0x1b0>)
   dfc9e:	4598      	cmp	r8, r3
   dfca0:	f300 8085 	bgt.w	dfdae <__ieee754_sinh+0x136>
   dfca4:	a35a      	add	r3, pc, #360	; (adr r3, dfe10 <__ieee754_sinh+0x198>)
   dfca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcaa:	ee10 0a10 	vmov	r0, s0
   dfcae:	4639      	mov	r1, r7
   dfcb0:	f001 fd3c 	bl	e172c <__adddf3>
   dfcb4:	2200      	movs	r2, #0
   dfcb6:	4b5d      	ldr	r3, [pc, #372]	; (dfe2c <__ieee754_sinh+0x1b4>)
   dfcb8:	f002 f97a 	bl	e1fb0 <__aeabi_dcmpgt>
   dfcbc:	b318      	cbz	r0, dfd06 <__ieee754_sinh+0x8e>
   dfcbe:	ec47 6b10 	vmov	d0, r6, r7
   dfcc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfcc6:	4b5a      	ldr	r3, [pc, #360]	; (dfe30 <__ieee754_sinh+0x1b8>)
   dfcc8:	4598      	cmp	r8, r3
   dfcca:	f340 8092 	ble.w	dfdf2 <__ieee754_sinh+0x17a>
   dfcce:	4b59      	ldr	r3, [pc, #356]	; (dfe34 <__ieee754_sinh+0x1bc>)
   dfcd0:	4598      	cmp	r8, r3
   dfcd2:	dd4d      	ble.n	dfd70 <__ieee754_sinh+0xf8>
   dfcd4:	3301      	adds	r3, #1
   dfcd6:	4598      	cmp	r8, r3
   dfcd8:	d047      	beq.n	dfd6a <__ieee754_sinh+0xf2>
   dfcda:	4630      	mov	r0, r6
   dfcdc:	4639      	mov	r1, r7
   dfcde:	a34c      	add	r3, pc, #304	; (adr r3, dfe10 <__ieee754_sinh+0x198>)
   dfce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfce4:	f001 fed4 	bl	e1a90 <__aeabi_dmul>
   dfce8:	ec41 0b10 	vmov	d0, r0, r1
   dfcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfcf0:	ee10 2a10 	vmov	r2, s0
   dfcf4:	463b      	mov	r3, r7
   dfcf6:	4630      	mov	r0, r6
   dfcf8:	4639      	mov	r1, r7
   dfcfa:	f001 fd17 	bl	e172c <__adddf3>
   dfcfe:	ec41 0b10 	vmov	d0, r0, r1
   dfd02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd06:	ec47 6b10 	vmov	d0, r6, r7
   dfd0a:	f7fc fcb9 	bl	dc680 <fabs>
   dfd0e:	f001 f96b 	bl	e0fe8 <expm1>
   dfd12:	ec57 6b10 	vmov	r6, r7, d0
   dfd16:	4632      	mov	r2, r6
   dfd18:	463b      	mov	r3, r7
   dfd1a:	4630      	mov	r0, r6
   dfd1c:	4639      	mov	r1, r7
   dfd1e:	f001 fd05 	bl	e172c <__adddf3>
   dfd22:	4632      	mov	r2, r6
   dfd24:	4682      	mov	sl, r0
   dfd26:	468b      	mov	fp, r1
   dfd28:	463b      	mov	r3, r7
   dfd2a:	4630      	mov	r0, r6
   dfd2c:	4639      	mov	r1, r7
   dfd2e:	f001 feaf 	bl	e1a90 <__aeabi_dmul>
   dfd32:	2200      	movs	r2, #0
   dfd34:	4680      	mov	r8, r0
   dfd36:	4689      	mov	r9, r1
   dfd38:	4b3c      	ldr	r3, [pc, #240]	; (dfe2c <__ieee754_sinh+0x1b4>)
   dfd3a:	4630      	mov	r0, r6
   dfd3c:	4639      	mov	r1, r7
   dfd3e:	f001 fcf5 	bl	e172c <__adddf3>
   dfd42:	4602      	mov	r2, r0
   dfd44:	460b      	mov	r3, r1
   dfd46:	4640      	mov	r0, r8
   dfd48:	4649      	mov	r1, r9
   dfd4a:	f001 ffcb 	bl	e1ce4 <__aeabi_ddiv>
   dfd4e:	4602      	mov	r2, r0
   dfd50:	460b      	mov	r3, r1
   dfd52:	4650      	mov	r0, sl
   dfd54:	4659      	mov	r1, fp
   dfd56:	f001 fce7 	bl	e1728 <__aeabi_dsub>
   dfd5a:	4622      	mov	r2, r4
   dfd5c:	462b      	mov	r3, r5
   dfd5e:	f001 fe97 	bl	e1a90 <__aeabi_dmul>
   dfd62:	ec41 0b10 	vmov	d0, r0, r1
   dfd66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd6a:	4b33      	ldr	r3, [pc, #204]	; (dfe38 <__ieee754_sinh+0x1c0>)
   dfd6c:	429e      	cmp	r6, r3
   dfd6e:	d8b4      	bhi.n	dfcda <__ieee754_sinh+0x62>
   dfd70:	ec47 6b10 	vmov	d0, r6, r7
   dfd74:	f7fc fc84 	bl	dc680 <fabs>
   dfd78:	2200      	movs	r2, #0
   dfd7a:	4b2a      	ldr	r3, [pc, #168]	; (dfe24 <__ieee754_sinh+0x1ac>)
   dfd7c:	ec51 0b10 	vmov	r0, r1, d0
   dfd80:	f001 fe86 	bl	e1a90 <__aeabi_dmul>
   dfd84:	ec41 0b10 	vmov	d0, r0, r1
   dfd88:	f7fe fa52 	bl	de230 <__ieee754_exp>
   dfd8c:	ec57 6b10 	vmov	r6, r7, d0
   dfd90:	ee10 2a10 	vmov	r2, s0
   dfd94:	463b      	mov	r3, r7
   dfd96:	4620      	mov	r0, r4
   dfd98:	4629      	mov	r1, r5
   dfd9a:	f001 fe79 	bl	e1a90 <__aeabi_dmul>
   dfd9e:	4632      	mov	r2, r6
   dfda0:	463b      	mov	r3, r7
   dfda2:	f001 fe75 	bl	e1a90 <__aeabi_dmul>
   dfda6:	ec41 0b10 	vmov	d0, r0, r1
   dfdaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfdae:	f7fc fc67 	bl	dc680 <fabs>
   dfdb2:	f001 f919 	bl	e0fe8 <expm1>
   dfdb6:	4b21      	ldr	r3, [pc, #132]	; (dfe3c <__ieee754_sinh+0x1c4>)
   dfdb8:	4598      	cmp	r8, r3
   dfdba:	ec57 6b10 	vmov	r6, r7, d0
   dfdbe:	ddaa      	ble.n	dfd16 <__ieee754_sinh+0x9e>
   dfdc0:	ee10 0a10 	vmov	r0, s0
   dfdc4:	2200      	movs	r2, #0
   dfdc6:	4b19      	ldr	r3, [pc, #100]	; (dfe2c <__ieee754_sinh+0x1b4>)
   dfdc8:	4639      	mov	r1, r7
   dfdca:	f001 fcaf 	bl	e172c <__adddf3>
   dfdce:	4602      	mov	r2, r0
   dfdd0:	460b      	mov	r3, r1
   dfdd2:	4630      	mov	r0, r6
   dfdd4:	4639      	mov	r1, r7
   dfdd6:	f001 ff85 	bl	e1ce4 <__aeabi_ddiv>
   dfdda:	4632      	mov	r2, r6
   dfddc:	463b      	mov	r3, r7
   dfdde:	f001 fca5 	bl	e172c <__adddf3>
   dfde2:	4622      	mov	r2, r4
   dfde4:	462b      	mov	r3, r5
   dfde6:	f001 fe53 	bl	e1a90 <__aeabi_dmul>
   dfdea:	ec41 0b10 	vmov	d0, r0, r1
   dfdee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfdf2:	f7fc fc45 	bl	dc680 <fabs>
   dfdf6:	f7fe fa1b 	bl	de230 <__ieee754_exp>
   dfdfa:	4620      	mov	r0, r4
   dfdfc:	ec53 2b10 	vmov	r2, r3, d0
   dfe00:	4629      	mov	r1, r5
   dfe02:	f001 fe45 	bl	e1a90 <__aeabi_dmul>
   dfe06:	ec41 0b10 	vmov	d0, r0, r1
   dfe0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe0e:	bf00      	nop
   dfe10:	3cac7433 	.word	0x3cac7433
   dfe14:	7fac7b1f 	.word	0x7fac7b1f
   dfe18:	7fefffff 	.word	0x7fefffff
   dfe1c:	4035ffff 	.word	0x4035ffff
   dfe20:	bfe00000 	.word	0xbfe00000
   dfe24:	3fe00000 	.word	0x3fe00000
   dfe28:	3e2fffff 	.word	0x3e2fffff
   dfe2c:	3ff00000 	.word	0x3ff00000
   dfe30:	40862e41 	.word	0x40862e41
   dfe34:	408633cd 	.word	0x408633cd
   dfe38:	8fb9f87d 	.word	0x8fb9f87d
   dfe3c:	3fefffff 	.word	0x3fefffff

000dfe40 <__ieee754_sqrt>:
   dfe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dfe44:	4965      	ldr	r1, [pc, #404]	; (dffdc <__ieee754_sqrt+0x19c>)
   dfe46:	ec55 4b10 	vmov	r4, r5, d0
   dfe4a:	460e      	mov	r6, r1
   dfe4c:	4029      	ands	r1, r5
   dfe4e:	42b1      	cmp	r1, r6
   dfe50:	f000 8097 	beq.w	dff82 <__ieee754_sqrt+0x142>
   dfe54:	2d00      	cmp	r5, #0
   dfe56:	462b      	mov	r3, r5
   dfe58:	ee10 2a10 	vmov	r2, s0
   dfe5c:	dd74      	ble.n	dff48 <__ieee754_sqrt+0x108>
   dfe5e:	152f      	asrs	r7, r5, #20
   dfe60:	d07f      	beq.n	dff62 <__ieee754_sqrt+0x122>
   dfe62:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   dfe66:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dfe6a:	07f9      	lsls	r1, r7, #31
   dfe6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dfe70:	d465      	bmi.n	dff3e <__ieee754_sqrt+0xfe>
   dfe72:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   dfe76:	2600      	movs	r6, #0
   dfe78:	440b      	add	r3, r1
   dfe7a:	107f      	asrs	r7, r7, #1
   dfe7c:	0052      	lsls	r2, r2, #1
   dfe7e:	46b6      	mov	lr, r6
   dfe80:	2016      	movs	r0, #22
   dfe82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   dfe86:	eb0e 0401 	add.w	r4, lr, r1
   dfe8a:	429c      	cmp	r4, r3
   dfe8c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   dfe90:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dfe94:	dc03      	bgt.n	dfe9e <__ieee754_sqrt+0x5e>
   dfe96:	1b1b      	subs	r3, r3, r4
   dfe98:	eb04 0e01 	add.w	lr, r4, r1
   dfe9c:	440e      	add	r6, r1
   dfe9e:	3801      	subs	r0, #1
   dfea0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   dfea4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   dfea8:	d1ed      	bne.n	dfe86 <__ieee754_sqrt+0x46>
   dfeaa:	4684      	mov	ip, r0
   dfeac:	2420      	movs	r4, #32
   dfeae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   dfeb2:	e009      	b.n	dfec8 <__ieee754_sqrt+0x88>
   dfeb4:	d020      	beq.n	dfef8 <__ieee754_sqrt+0xb8>
   dfeb6:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   dfeba:	3c01      	subs	r4, #1
   dfebc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   dfec0:	442b      	add	r3, r5
   dfec2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dfec6:	d020      	beq.n	dff0a <__ieee754_sqrt+0xca>
   dfec8:	459e      	cmp	lr, r3
   dfeca:	eb01 050c 	add.w	r5, r1, ip
   dfece:	daf1      	bge.n	dfeb4 <__ieee754_sqrt+0x74>
   dfed0:	2d00      	cmp	r5, #0
   dfed2:	eb05 0c01 	add.w	ip, r5, r1
   dfed6:	db09      	blt.n	dfeec <__ieee754_sqrt+0xac>
   dfed8:	46f0      	mov	r8, lr
   dfeda:	4295      	cmp	r5, r2
   dfedc:	ebce 0303 	rsb	r3, lr, r3
   dfee0:	d900      	bls.n	dfee4 <__ieee754_sqrt+0xa4>
   dfee2:	3b01      	subs	r3, #1
   dfee4:	1b52      	subs	r2, r2, r5
   dfee6:	4408      	add	r0, r1
   dfee8:	46c6      	mov	lr, r8
   dfeea:	e7e4      	b.n	dfeb6 <__ieee754_sqrt+0x76>
   dfeec:	f1bc 0f00 	cmp.w	ip, #0
   dfef0:	dbf2      	blt.n	dfed8 <__ieee754_sqrt+0x98>
   dfef2:	f10e 0801 	add.w	r8, lr, #1
   dfef6:	e7f0      	b.n	dfeda <__ieee754_sqrt+0x9a>
   dfef8:	4295      	cmp	r5, r2
   dfefa:	d81e      	bhi.n	dff3a <__ieee754_sqrt+0xfa>
   dfefc:	2d00      	cmp	r5, #0
   dfefe:	eb05 0c01 	add.w	ip, r5, r1
   dff02:	db50      	blt.n	dffa6 <__ieee754_sqrt+0x166>
   dff04:	4698      	mov	r8, r3
   dff06:	2300      	movs	r3, #0
   dff08:	e7ec      	b.n	dfee4 <__ieee754_sqrt+0xa4>
   dff0a:	4313      	orrs	r3, r2
   dff0c:	d004      	beq.n	dff18 <__ieee754_sqrt+0xd8>
   dff0e:	1c42      	adds	r2, r0, #1
   dff10:	d04d      	beq.n	dffae <__ieee754_sqrt+0x16e>
   dff12:	f000 0301 	and.w	r3, r0, #1
   dff16:	4418      	add	r0, r3
   dff18:	0840      	lsrs	r0, r0, #1
   dff1a:	1071      	asrs	r1, r6, #1
   dff1c:	07f3      	lsls	r3, r6, #31
   dff1e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   dff22:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   dff26:	bf48      	it	mi
   dff28:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   dff2c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   dff30:	4602      	mov	r2, r0
   dff32:	ec43 2b10 	vmov	d0, r2, r3
   dff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dff3a:	4673      	mov	r3, lr
   dff3c:	e7bb      	b.n	dfeb6 <__ieee754_sqrt+0x76>
   dff3e:	005b      	lsls	r3, r3, #1
   dff40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   dff44:	0052      	lsls	r2, r2, #1
   dff46:	e794      	b.n	dfe72 <__ieee754_sqrt+0x32>
   dff48:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   dff4c:	4321      	orrs	r1, r4
   dff4e:	d028      	beq.n	dffa2 <__ieee754_sqrt+0x162>
   dff50:	bbad      	cbnz	r5, dffbe <__ieee754_sqrt+0x17e>
   dff52:	462f      	mov	r7, r5
   dff54:	0ad3      	lsrs	r3, r2, #11
   dff56:	3f15      	subs	r7, #21
   dff58:	0552      	lsls	r2, r2, #21
   dff5a:	2b00      	cmp	r3, #0
   dff5c:	d0fa      	beq.n	dff54 <__ieee754_sqrt+0x114>
   dff5e:	02dd      	lsls	r5, r3, #11
   dff60:	d428      	bmi.n	dffb4 <__ieee754_sqrt+0x174>
   dff62:	2100      	movs	r1, #0
   dff64:	e000      	b.n	dff68 <__ieee754_sqrt+0x128>
   dff66:	4601      	mov	r1, r0
   dff68:	005b      	lsls	r3, r3, #1
   dff6a:	02dc      	lsls	r4, r3, #11
   dff6c:	f101 0001 	add.w	r0, r1, #1
   dff70:	d5f9      	bpl.n	dff66 <__ieee754_sqrt+0x126>
   dff72:	f1c0 0420 	rsb	r4, r0, #32
   dff76:	fa22 f404 	lsr.w	r4, r2, r4
   dff7a:	4323      	orrs	r3, r4
   dff7c:	1a7f      	subs	r7, r7, r1
   dff7e:	4082      	lsls	r2, r0
   dff80:	e76f      	b.n	dfe62 <__ieee754_sqrt+0x22>
   dff82:	ee10 2a10 	vmov	r2, s0
   dff86:	462b      	mov	r3, r5
   dff88:	ee10 0a10 	vmov	r0, s0
   dff8c:	4629      	mov	r1, r5
   dff8e:	f001 fd7f 	bl	e1a90 <__aeabi_dmul>
   dff92:	4622      	mov	r2, r4
   dff94:	462b      	mov	r3, r5
   dff96:	f001 fbc9 	bl	e172c <__adddf3>
   dff9a:	ec41 0b10 	vmov	d0, r0, r1
   dff9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dffa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dffa6:	f1bc 0f00 	cmp.w	ip, #0
   dffaa:	daa2      	bge.n	dfef2 <__ieee754_sqrt+0xb2>
   dffac:	e7aa      	b.n	dff04 <__ieee754_sqrt+0xc4>
   dffae:	3601      	adds	r6, #1
   dffb0:	4620      	mov	r0, r4
   dffb2:	e7b2      	b.n	dff1a <__ieee754_sqrt+0xda>
   dffb4:	2420      	movs	r4, #32
   dffb6:	f04f 31ff 	mov.w	r1, #4294967295
   dffba:	2000      	movs	r0, #0
   dffbc:	e7db      	b.n	dff76 <__ieee754_sqrt+0x136>
   dffbe:	ee10 2a10 	vmov	r2, s0
   dffc2:	462b      	mov	r3, r5
   dffc4:	4620      	mov	r0, r4
   dffc6:	4629      	mov	r1, r5
   dffc8:	f001 fbae 	bl	e1728 <__aeabi_dsub>
   dffcc:	4602      	mov	r2, r0
   dffce:	460b      	mov	r3, r1
   dffd0:	f001 fe88 	bl	e1ce4 <__aeabi_ddiv>
   dffd4:	ec41 0b10 	vmov	d0, r0, r1
   dffd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dffdc:	7ff00000 	.word	0x7ff00000

000dffe0 <__kernel_cos>:
   dffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dffe4:	ec57 6b10 	vmov	r6, r7, d0
   dffe8:	ed2d 8b02 	vpush	{d8}
   dffec:	eeb0 8a41 	vmov.f32	s16, s2
   dfff0:	eef0 8a61 	vmov.f32	s17, s3
   dfff4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dfff8:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   dfffc:	b083      	sub	sp, #12
   dfffe:	da72      	bge.n	e00e6 <__kernel_cos+0x106>
   e0000:	ee10 0a10 	vmov	r0, s0
   e0004:	4639      	mov	r1, r7
   e0006:	f001 fff3 	bl	e1ff0 <__aeabi_d2iz>
   e000a:	2800      	cmp	r0, #0
   e000c:	f000 80f6 	beq.w	e01fc <__kernel_cos+0x21c>
   e0010:	4632      	mov	r2, r6
   e0012:	463b      	mov	r3, r7
   e0014:	4630      	mov	r0, r6
   e0016:	4639      	mov	r1, r7
   e0018:	f001 fd3a 	bl	e1a90 <__aeabi_dmul>
   e001c:	a37c      	add	r3, pc, #496	; (adr r3, e0210 <__kernel_cos+0x230>)
   e001e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0022:	4604      	mov	r4, r0
   e0024:	460d      	mov	r5, r1
   e0026:	f001 fd33 	bl	e1a90 <__aeabi_dmul>
   e002a:	a37b      	add	r3, pc, #492	; (adr r3, e0218 <__kernel_cos+0x238>)
   e002c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0030:	f001 fb7c 	bl	e172c <__adddf3>
   e0034:	4622      	mov	r2, r4
   e0036:	462b      	mov	r3, r5
   e0038:	f001 fd2a 	bl	e1a90 <__aeabi_dmul>
   e003c:	a378      	add	r3, pc, #480	; (adr r3, e0220 <__kernel_cos+0x240>)
   e003e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0042:	f001 fb71 	bl	e1728 <__aeabi_dsub>
   e0046:	4622      	mov	r2, r4
   e0048:	462b      	mov	r3, r5
   e004a:	f001 fd21 	bl	e1a90 <__aeabi_dmul>
   e004e:	a376      	add	r3, pc, #472	; (adr r3, e0228 <__kernel_cos+0x248>)
   e0050:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0054:	f001 fb6a 	bl	e172c <__adddf3>
   e0058:	4622      	mov	r2, r4
   e005a:	462b      	mov	r3, r5
   e005c:	f001 fd18 	bl	e1a90 <__aeabi_dmul>
   e0060:	a373      	add	r3, pc, #460	; (adr r3, e0230 <__kernel_cos+0x250>)
   e0062:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0066:	f001 fb5f 	bl	e1728 <__aeabi_dsub>
   e006a:	4622      	mov	r2, r4
   e006c:	462b      	mov	r3, r5
   e006e:	f001 fd0f 	bl	e1a90 <__aeabi_dmul>
   e0072:	a371      	add	r3, pc, #452	; (adr r3, e0238 <__kernel_cos+0x258>)
   e0074:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0078:	f001 fb58 	bl	e172c <__adddf3>
   e007c:	4622      	mov	r2, r4
   e007e:	462b      	mov	r3, r5
   e0080:	f001 fd06 	bl	e1a90 <__aeabi_dmul>
   e0084:	4682      	mov	sl, r0
   e0086:	468b      	mov	fp, r1
   e0088:	2200      	movs	r2, #0
   e008a:	4b71      	ldr	r3, [pc, #452]	; (e0250 <__kernel_cos+0x270>)
   e008c:	4620      	mov	r0, r4
   e008e:	4629      	mov	r1, r5
   e0090:	f001 fcfe 	bl	e1a90 <__aeabi_dmul>
   e0094:	4652      	mov	r2, sl
   e0096:	4680      	mov	r8, r0
   e0098:	4689      	mov	r9, r1
   e009a:	465b      	mov	r3, fp
   e009c:	4620      	mov	r0, r4
   e009e:	4629      	mov	r1, r5
   e00a0:	f001 fcf6 	bl	e1a90 <__aeabi_dmul>
   e00a4:	ec53 2b18 	vmov	r2, r3, d8
   e00a8:	4604      	mov	r4, r0
   e00aa:	460d      	mov	r5, r1
   e00ac:	4630      	mov	r0, r6
   e00ae:	4639      	mov	r1, r7
   e00b0:	f001 fcee 	bl	e1a90 <__aeabi_dmul>
   e00b4:	4602      	mov	r2, r0
   e00b6:	460b      	mov	r3, r1
   e00b8:	4620      	mov	r0, r4
   e00ba:	4629      	mov	r1, r5
   e00bc:	f001 fb34 	bl	e1728 <__aeabi_dsub>
   e00c0:	4602      	mov	r2, r0
   e00c2:	460b      	mov	r3, r1
   e00c4:	4640      	mov	r0, r8
   e00c6:	4649      	mov	r1, r9
   e00c8:	f001 fb2e 	bl	e1728 <__aeabi_dsub>
   e00cc:	4602      	mov	r2, r0
   e00ce:	460b      	mov	r3, r1
   e00d0:	2000      	movs	r0, #0
   e00d2:	4960      	ldr	r1, [pc, #384]	; (e0254 <__kernel_cos+0x274>)
   e00d4:	f001 fb28 	bl	e1728 <__aeabi_dsub>
   e00d8:	ec41 0b10 	vmov	d0, r0, r1
   e00dc:	b003      	add	sp, #12
   e00de:	ecbd 8b02 	vpop	{d8}
   e00e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e00e6:	ee10 2a10 	vmov	r2, s0
   e00ea:	ee10 0a10 	vmov	r0, s0
   e00ee:	463b      	mov	r3, r7
   e00f0:	4639      	mov	r1, r7
   e00f2:	f001 fccd 	bl	e1a90 <__aeabi_dmul>
   e00f6:	a346      	add	r3, pc, #280	; (adr r3, e0210 <__kernel_cos+0x230>)
   e00f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e00fc:	4604      	mov	r4, r0
   e00fe:	460d      	mov	r5, r1
   e0100:	f001 fcc6 	bl	e1a90 <__aeabi_dmul>
   e0104:	a344      	add	r3, pc, #272	; (adr r3, e0218 <__kernel_cos+0x238>)
   e0106:	e9d3 2300 	ldrd	r2, r3, [r3]
   e010a:	f001 fb0f 	bl	e172c <__adddf3>
   e010e:	4622      	mov	r2, r4
   e0110:	462b      	mov	r3, r5
   e0112:	f001 fcbd 	bl	e1a90 <__aeabi_dmul>
   e0116:	a342      	add	r3, pc, #264	; (adr r3, e0220 <__kernel_cos+0x240>)
   e0118:	e9d3 2300 	ldrd	r2, r3, [r3]
   e011c:	f001 fb04 	bl	e1728 <__aeabi_dsub>
   e0120:	4622      	mov	r2, r4
   e0122:	462b      	mov	r3, r5
   e0124:	f001 fcb4 	bl	e1a90 <__aeabi_dmul>
   e0128:	a33f      	add	r3, pc, #252	; (adr r3, e0228 <__kernel_cos+0x248>)
   e012a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e012e:	f001 fafd 	bl	e172c <__adddf3>
   e0132:	4622      	mov	r2, r4
   e0134:	462b      	mov	r3, r5
   e0136:	f001 fcab 	bl	e1a90 <__aeabi_dmul>
   e013a:	a33d      	add	r3, pc, #244	; (adr r3, e0230 <__kernel_cos+0x250>)
   e013c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0140:	f001 faf2 	bl	e1728 <__aeabi_dsub>
   e0144:	4622      	mov	r2, r4
   e0146:	462b      	mov	r3, r5
   e0148:	f001 fca2 	bl	e1a90 <__aeabi_dmul>
   e014c:	a33a      	add	r3, pc, #232	; (adr r3, e0238 <__kernel_cos+0x258>)
   e014e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0152:	f001 faeb 	bl	e172c <__adddf3>
   e0156:	462b      	mov	r3, r5
   e0158:	4622      	mov	r2, r4
   e015a:	f001 fc99 	bl	e1a90 <__aeabi_dmul>
   e015e:	4b3e      	ldr	r3, [pc, #248]	; (e0258 <__kernel_cos+0x278>)
   e0160:	4599      	cmp	r9, r3
   e0162:	4682      	mov	sl, r0
   e0164:	468b      	mov	fp, r1
   e0166:	dd8f      	ble.n	e0088 <__kernel_cos+0xa8>
   e0168:	4b3c      	ldr	r3, [pc, #240]	; (e025c <__kernel_cos+0x27c>)
   e016a:	4599      	cmp	r9, r3
   e016c:	dc3d      	bgt.n	e01ea <__kernel_cos+0x20a>
   e016e:	2200      	movs	r2, #0
   e0170:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e0174:	2000      	movs	r0, #0
   e0176:	4937      	ldr	r1, [pc, #220]	; (e0254 <__kernel_cos+0x274>)
   e0178:	4690      	mov	r8, r2
   e017a:	4699      	mov	r9, r3
   e017c:	f001 fad4 	bl	e1728 <__aeabi_dsub>
   e0180:	e9cd 0100 	strd	r0, r1, [sp]
   e0184:	2200      	movs	r2, #0
   e0186:	4b32      	ldr	r3, [pc, #200]	; (e0250 <__kernel_cos+0x270>)
   e0188:	4620      	mov	r0, r4
   e018a:	4629      	mov	r1, r5
   e018c:	f001 fc80 	bl	e1a90 <__aeabi_dmul>
   e0190:	4642      	mov	r2, r8
   e0192:	464b      	mov	r3, r9
   e0194:	f001 fac8 	bl	e1728 <__aeabi_dsub>
   e0198:	4652      	mov	r2, sl
   e019a:	4680      	mov	r8, r0
   e019c:	4689      	mov	r9, r1
   e019e:	465b      	mov	r3, fp
   e01a0:	4620      	mov	r0, r4
   e01a2:	4629      	mov	r1, r5
   e01a4:	f001 fc74 	bl	e1a90 <__aeabi_dmul>
   e01a8:	ec53 2b18 	vmov	r2, r3, d8
   e01ac:	4604      	mov	r4, r0
   e01ae:	460d      	mov	r5, r1
   e01b0:	4630      	mov	r0, r6
   e01b2:	4639      	mov	r1, r7
   e01b4:	f001 fc6c 	bl	e1a90 <__aeabi_dmul>
   e01b8:	4602      	mov	r2, r0
   e01ba:	460b      	mov	r3, r1
   e01bc:	4620      	mov	r0, r4
   e01be:	4629      	mov	r1, r5
   e01c0:	f001 fab2 	bl	e1728 <__aeabi_dsub>
   e01c4:	4602      	mov	r2, r0
   e01c6:	460b      	mov	r3, r1
   e01c8:	4640      	mov	r0, r8
   e01ca:	4649      	mov	r1, r9
   e01cc:	f001 faac 	bl	e1728 <__aeabi_dsub>
   e01d0:	4602      	mov	r2, r0
   e01d2:	460b      	mov	r3, r1
   e01d4:	e9dd 0100 	ldrd	r0, r1, [sp]
   e01d8:	f001 faa6 	bl	e1728 <__aeabi_dsub>
   e01dc:	ec41 0b10 	vmov	d0, r0, r1
   e01e0:	b003      	add	sp, #12
   e01e2:	ecbd 8b02 	vpop	{d8}
   e01e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e01ea:	ed9f 7b15 	vldr	d7, [pc, #84]	; e0240 <__kernel_cos+0x260>
   e01ee:	f04f 0800 	mov.w	r8, #0
   e01f2:	ed8d 7b00 	vstr	d7, [sp]
   e01f6:	f8df 9068 	ldr.w	r9, [pc, #104]	; e0260 <__kernel_cos+0x280>
   e01fa:	e7c3      	b.n	e0184 <__kernel_cos+0x1a4>
   e01fc:	ed9f 0b12 	vldr	d0, [pc, #72]	; e0248 <__kernel_cos+0x268>
   e0200:	b003      	add	sp, #12
   e0202:	ecbd 8b02 	vpop	{d8}
   e0206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e020a:	bf00      	nop
   e020c:	f3af 8000 	nop.w
   e0210:	be8838d4 	.word	0xbe8838d4
   e0214:	bda8fae9 	.word	0xbda8fae9
   e0218:	bdb4b1c4 	.word	0xbdb4b1c4
   e021c:	3e21ee9e 	.word	0x3e21ee9e
   e0220:	809c52ad 	.word	0x809c52ad
   e0224:	3e927e4f 	.word	0x3e927e4f
   e0228:	19cb1590 	.word	0x19cb1590
   e022c:	3efa01a0 	.word	0x3efa01a0
   e0230:	16c15177 	.word	0x16c15177
   e0234:	3f56c16c 	.word	0x3f56c16c
   e0238:	5555554c 	.word	0x5555554c
   e023c:	3fa55555 	.word	0x3fa55555
   e0240:	00000000 	.word	0x00000000
   e0244:	3fe70000 	.word	0x3fe70000
   e0248:	00000000 	.word	0x00000000
   e024c:	3ff00000 	.word	0x3ff00000
   e0250:	3fe00000 	.word	0x3fe00000
   e0254:	3ff00000 	.word	0x3ff00000
   e0258:	3fd33332 	.word	0x3fd33332
   e025c:	3fe90000 	.word	0x3fe90000
   e0260:	3fd20000 	.word	0x3fd20000
   e0264:	00000000 	.word	0x00000000

000e0268 <__kernel_rem_pio2>:
   e0268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e026c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e0270:	4c81      	ldr	r4, [pc, #516]	; (e0478 <__kernel_rem_pio2+0x210>)
   e0272:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e0274:	4d81      	ldr	r5, [pc, #516]	; (e047c <__kernel_rem_pio2+0x214>)
   e0276:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e027a:	9407      	str	r4, [sp, #28]
   e027c:	4626      	mov	r6, r4
   e027e:	1ed4      	subs	r4, r2, #3
   e0280:	fb85 7504 	smull	r7, r5, r5, r4
   e0284:	17e4      	asrs	r4, r4, #31
   e0286:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e028a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e028e:	461d      	mov	r5, r3
   e0290:	930a      	str	r3, [sp, #40]	; 0x28
   e0292:	1c63      	adds	r3, r4, #1
   e0294:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e0298:	3d01      	subs	r5, #1
   e029a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e029e:	9306      	str	r3, [sp, #24]
   e02a0:	462b      	mov	r3, r5
   e02a2:	940b      	str	r4, [sp, #44]	; 0x2c
   e02a4:	9500      	str	r5, [sp, #0]
   e02a6:	1b65      	subs	r5, r4, r5
   e02a8:	18f4      	adds	r4, r6, r3
   e02aa:	9003      	str	r0, [sp, #12]
   e02ac:	9108      	str	r1, [sp, #32]
   e02ae:	d416      	bmi.n	e02de <__kernel_rem_pio2+0x76>
   e02b0:	442c      	add	r4, r5
   e02b2:	3401      	adds	r4, #1
   e02b4:	ae22      	add	r6, sp, #136	; 0x88
   e02b6:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e02b8:	e008      	b.n	e02cc <__kernel_rem_pio2+0x64>
   e02ba:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e02be:	f001 fb81 	bl	e19c4 <__aeabi_i2d>
   e02c2:	3501      	adds	r5, #1
   e02c4:	42a5      	cmp	r5, r4
   e02c6:	e8e6 0102 	strd	r0, r1, [r6], #8
   e02ca:	d008      	beq.n	e02de <__kernel_rem_pio2+0x76>
   e02cc:	2d00      	cmp	r5, #0
   e02ce:	daf4      	bge.n	e02ba <__kernel_rem_pio2+0x52>
   e02d0:	3501      	adds	r5, #1
   e02d2:	2000      	movs	r0, #0
   e02d4:	2100      	movs	r1, #0
   e02d6:	42a5      	cmp	r5, r4
   e02d8:	e8e6 0102 	strd	r0, r1, [r6], #8
   e02dc:	d1f6      	bne.n	e02cc <__kernel_rem_pio2+0x64>
   e02de:	9b07      	ldr	r3, [sp, #28]
   e02e0:	2b00      	cmp	r3, #0
   e02e2:	f2c0 83c2 	blt.w	e0a6a <__kernel_rem_pio2+0x802>
   e02e6:	9b07      	ldr	r3, [sp, #28]
   e02e8:	f103 0b01 	add.w	fp, r3, #1
   e02ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e02ee:	a922      	add	r1, sp, #136	; 0x88
   e02f0:	00db      	lsls	r3, r3, #3
   e02f2:	461a      	mov	r2, r3
   e02f4:	eb01 0903 	add.w	r9, r1, r3
   e02f8:	9304      	str	r3, [sp, #16]
   e02fa:	9b03      	ldr	r3, [sp, #12]
   e02fc:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e0300:	4619      	mov	r1, r3
   e0302:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e0306:	eb01 0802 	add.w	r8, r1, r2
   e030a:	9b00      	ldr	r3, [sp, #0]
   e030c:	2b00      	cmp	r3, #0
   e030e:	f2c0 818f 	blt.w	e0630 <__kernel_rem_pio2+0x3c8>
   e0312:	9c03      	ldr	r4, [sp, #12]
   e0314:	464d      	mov	r5, r9
   e0316:	2600      	movs	r6, #0
   e0318:	2700      	movs	r7, #0
   e031a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e031e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e0322:	f001 fbb5 	bl	e1a90 <__aeabi_dmul>
   e0326:	4602      	mov	r2, r0
   e0328:	460b      	mov	r3, r1
   e032a:	4630      	mov	r0, r6
   e032c:	4639      	mov	r1, r7
   e032e:	f001 f9fd 	bl	e172c <__adddf3>
   e0332:	4544      	cmp	r4, r8
   e0334:	4606      	mov	r6, r0
   e0336:	460f      	mov	r7, r1
   e0338:	d1ef      	bne.n	e031a <__kernel_rem_pio2+0xb2>
   e033a:	e8ea 6702 	strd	r6, r7, [sl], #8
   e033e:	45da      	cmp	sl, fp
   e0340:	f109 0908 	add.w	r9, r9, #8
   e0344:	d1e1      	bne.n	e030a <__kernel_rem_pio2+0xa2>
   e0346:	9907      	ldr	r1, [sp, #28]
   e0348:	9804      	ldr	r0, [sp, #16]
   e034a:	9c03      	ldr	r4, [sp, #12]
   e034c:	9104      	str	r1, [sp, #16]
   e034e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e0352:	3b02      	subs	r3, #2
   e0354:	009b      	lsls	r3, r3, #2
   e0356:	4420      	add	r0, r4
   e0358:	1d1a      	adds	r2, r3, #4
   e035a:	4683      	mov	fp, r0
   e035c:	a80e      	add	r0, sp, #56	; 0x38
   e035e:	4402      	add	r2, r0
   e0360:	4403      	add	r3, r0
   e0362:	920d      	str	r2, [sp, #52]	; 0x34
   e0364:	930c      	str	r3, [sp, #48]	; 0x30
   e0366:	9a04      	ldr	r2, [sp, #16]
   e0368:	a99a      	add	r1, sp, #616	; 0x268
   e036a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e036e:	2a00      	cmp	r2, #0
   e0370:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e0374:	dd29      	ble.n	e03ca <__kernel_rem_pio2+0x162>
   e0376:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e037a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e037e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e0382:	2200      	movs	r2, #0
   e0384:	4b3e      	ldr	r3, [pc, #248]	; (e0480 <__kernel_rem_pio2+0x218>)
   e0386:	4620      	mov	r0, r4
   e0388:	4629      	mov	r1, r5
   e038a:	f001 fb81 	bl	e1a90 <__aeabi_dmul>
   e038e:	f001 fe2f 	bl	e1ff0 <__aeabi_d2iz>
   e0392:	f001 fb17 	bl	e19c4 <__aeabi_i2d>
   e0396:	2200      	movs	r2, #0
   e0398:	4b3a      	ldr	r3, [pc, #232]	; (e0484 <__kernel_rem_pio2+0x21c>)
   e039a:	4606      	mov	r6, r0
   e039c:	460f      	mov	r7, r1
   e039e:	f001 fb77 	bl	e1a90 <__aeabi_dmul>
   e03a2:	4602      	mov	r2, r0
   e03a4:	460b      	mov	r3, r1
   e03a6:	4620      	mov	r0, r4
   e03a8:	4629      	mov	r1, r5
   e03aa:	f001 f9bd 	bl	e1728 <__aeabi_dsub>
   e03ae:	f001 fe1f 	bl	e1ff0 <__aeabi_d2iz>
   e03b2:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e03b6:	f849 0f04 	str.w	r0, [r9, #4]!
   e03ba:	4639      	mov	r1, r7
   e03bc:	4630      	mov	r0, r6
   e03be:	f001 f9b5 	bl	e172c <__adddf3>
   e03c2:	45d0      	cmp	r8, sl
   e03c4:	4604      	mov	r4, r0
   e03c6:	460d      	mov	r5, r1
   e03c8:	d1db      	bne.n	e0382 <__kernel_rem_pio2+0x11a>
   e03ca:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e03ce:	ec45 4b10 	vmov	d0, r4, r5
   e03d2:	4648      	mov	r0, r9
   e03d4:	f001 f910 	bl	e15f8 <scalbn>
   e03d8:	ec55 4b10 	vmov	r4, r5, d0
   e03dc:	2200      	movs	r2, #0
   e03de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e03e2:	ee10 0a10 	vmov	r0, s0
   e03e6:	4629      	mov	r1, r5
   e03e8:	f001 fb52 	bl	e1a90 <__aeabi_dmul>
   e03ec:	ec41 0b10 	vmov	d0, r0, r1
   e03f0:	f7fc f94e 	bl	dc690 <floor>
   e03f4:	2200      	movs	r2, #0
   e03f6:	ec51 0b10 	vmov	r0, r1, d0
   e03fa:	4b23      	ldr	r3, [pc, #140]	; (e0488 <__kernel_rem_pio2+0x220>)
   e03fc:	f001 fb48 	bl	e1a90 <__aeabi_dmul>
   e0400:	4602      	mov	r2, r0
   e0402:	460b      	mov	r3, r1
   e0404:	4620      	mov	r0, r4
   e0406:	4629      	mov	r1, r5
   e0408:	f001 f98e 	bl	e1728 <__aeabi_dsub>
   e040c:	460d      	mov	r5, r1
   e040e:	4604      	mov	r4, r0
   e0410:	f001 fdee 	bl	e1ff0 <__aeabi_d2iz>
   e0414:	4680      	mov	r8, r0
   e0416:	f001 fad5 	bl	e19c4 <__aeabi_i2d>
   e041a:	460b      	mov	r3, r1
   e041c:	4602      	mov	r2, r0
   e041e:	4629      	mov	r1, r5
   e0420:	4620      	mov	r0, r4
   e0422:	f001 f981 	bl	e1728 <__aeabi_dsub>
   e0426:	464b      	mov	r3, r9
   e0428:	2b00      	cmp	r3, #0
   e042a:	4606      	mov	r6, r0
   e042c:	460f      	mov	r7, r1
   e042e:	f340 80e5 	ble.w	e05fc <__kernel_rem_pio2+0x394>
   e0432:	9a04      	ldr	r2, [sp, #16]
   e0434:	a90e      	add	r1, sp, #56	; 0x38
   e0436:	3a01      	subs	r2, #1
   e0438:	f1c9 0318 	rsb	r3, r9, #24
   e043c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e0440:	fa45 f103 	asr.w	r1, r5, r3
   e0444:	fa01 f303 	lsl.w	r3, r1, r3
   e0448:	a80e      	add	r0, sp, #56	; 0x38
   e044a:	1aeb      	subs	r3, r5, r3
   e044c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e0450:	f1c9 0517 	rsb	r5, r9, #23
   e0454:	4488      	add	r8, r1
   e0456:	fa43 f505 	asr.w	r5, r3, r5
   e045a:	2d00      	cmp	r5, #0
   e045c:	dd41      	ble.n	e04e2 <__kernel_rem_pio2+0x27a>
   e045e:	9b04      	ldr	r3, [sp, #16]
   e0460:	2b00      	cmp	r3, #0
   e0462:	f108 0801 	add.w	r8, r8, #1
   e0466:	f340 82c9 	ble.w	e09fc <__kernel_rem_pio2+0x794>
   e046a:	2200      	movs	r2, #0
   e046c:	4614      	mov	r4, r2
   e046e:	a90d      	add	r1, sp, #52	; 0x34
   e0470:	9804      	ldr	r0, [sp, #16]
   e0472:	46ae      	mov	lr, r5
   e0474:	e012      	b.n	e049c <__kernel_rem_pio2+0x234>
   e0476:	bf00      	nop
   e0478:	000e6c28 	.word	0x000e6c28
   e047c:	2aaaaaab 	.word	0x2aaaaaab
   e0480:	3e700000 	.word	0x3e700000
   e0484:	41700000 	.word	0x41700000
   e0488:	40200000 	.word	0x40200000
   e048c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e0490:	b10b      	cbz	r3, e0496 <__kernel_rem_pio2+0x22e>
   e0492:	600d      	str	r5, [r1, #0]
   e0494:	2401      	movs	r4, #1
   e0496:	3201      	adds	r2, #1
   e0498:	4290      	cmp	r0, r2
   e049a:	dd0d      	ble.n	e04b8 <__kernel_rem_pio2+0x250>
   e049c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e04a0:	2c00      	cmp	r4, #0
   e04a2:	d0f3      	beq.n	e048c <__kernel_rem_pio2+0x224>
   e04a4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e04a8:	3201      	adds	r2, #1
   e04aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e04ae:	4290      	cmp	r0, r2
   e04b0:	600b      	str	r3, [r1, #0]
   e04b2:	f04f 0401 	mov.w	r4, #1
   e04b6:	dcf1      	bgt.n	e049c <__kernel_rem_pio2+0x234>
   e04b8:	4675      	mov	r5, lr
   e04ba:	9b06      	ldr	r3, [sp, #24]
   e04bc:	2b00      	cmp	r3, #0
   e04be:	dd0e      	ble.n	e04de <__kernel_rem_pio2+0x276>
   e04c0:	2b01      	cmp	r3, #1
   e04c2:	f000 80a3 	beq.w	e060c <__kernel_rem_pio2+0x3a4>
   e04c6:	2b02      	cmp	r3, #2
   e04c8:	d109      	bne.n	e04de <__kernel_rem_pio2+0x276>
   e04ca:	9b04      	ldr	r3, [sp, #16]
   e04cc:	1e5a      	subs	r2, r3, #1
   e04ce:	ab0e      	add	r3, sp, #56	; 0x38
   e04d0:	a90e      	add	r1, sp, #56	; 0x38
   e04d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e04d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e04da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e04de:	2d02      	cmp	r5, #2
   e04e0:	d074      	beq.n	e05cc <__kernel_rem_pio2+0x364>
   e04e2:	2200      	movs	r2, #0
   e04e4:	2300      	movs	r3, #0
   e04e6:	4630      	mov	r0, r6
   e04e8:	4639      	mov	r1, r7
   e04ea:	f001 fd39 	bl	e1f60 <__aeabi_dcmpeq>
   e04ee:	2800      	cmp	r0, #0
   e04f0:	f000 8249 	beq.w	e0986 <__kernel_rem_pio2+0x71e>
   e04f4:	9a04      	ldr	r2, [sp, #16]
   e04f6:	9b07      	ldr	r3, [sp, #28]
   e04f8:	1e50      	subs	r0, r2, #1
   e04fa:	4283      	cmp	r3, r0
   e04fc:	dc10      	bgt.n	e0520 <__kernel_rem_pio2+0x2b8>
   e04fe:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e0502:	3b01      	subs	r3, #1
   e0504:	aa0e      	add	r2, sp, #56	; 0x38
   e0506:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e0508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e050c:	2200      	movs	r2, #0
   e050e:	f853 1904 	ldr.w	r1, [r3], #-4
   e0512:	42a3      	cmp	r3, r4
   e0514:	ea42 0201 	orr.w	r2, r2, r1
   e0518:	d1f9      	bne.n	e050e <__kernel_rem_pio2+0x2a6>
   e051a:	2a00      	cmp	r2, #0
   e051c:	f040 80a4 	bne.w	e0668 <__kernel_rem_pio2+0x400>
   e0520:	9b07      	ldr	r3, [sp, #28]
   e0522:	aa0e      	add	r2, sp, #56	; 0x38
   e0524:	3b01      	subs	r3, #1
   e0526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e052a:	2b00      	cmp	r3, #0
   e052c:	f040 8264 	bne.w	e09f8 <__kernel_rem_pio2+0x790>
   e0530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e0532:	2301      	movs	r3, #1
   e0534:	f852 1904 	ldr.w	r1, [r2], #-4
   e0538:	3301      	adds	r3, #1
   e053a:	2900      	cmp	r1, #0
   e053c:	d0fa      	beq.n	e0534 <__kernel_rem_pio2+0x2cc>
   e053e:	9a04      	ldr	r2, [sp, #16]
   e0540:	18d3      	adds	r3, r2, r3
   e0542:	f102 0a01 	add.w	sl, r2, #1
   e0546:	459a      	cmp	sl, r3
   e0548:	9309      	str	r3, [sp, #36]	; 0x24
   e054a:	dc3c      	bgt.n	e05c6 <__kernel_rem_pio2+0x35e>
   e054c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e054e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e0550:	9909      	ldr	r1, [sp, #36]	; 0x24
   e0552:	eb0a 0903 	add.w	r9, sl, r3
   e0556:	9b04      	ldr	r3, [sp, #16]
   e0558:	4698      	mov	r8, r3
   e055a:	4490      	add	r8, r2
   e055c:	188b      	adds	r3, r1, r2
   e055e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e0562:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e0564:	f109 39ff 	add.w	r9, r9, #4294967295
   e0568:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e056c:	aa22      	add	r2, sp, #136	; 0x88
   e056e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e0572:	9304      	str	r3, [sp, #16]
   e0574:	ab72      	add	r3, sp, #456	; 0x1c8
   e0576:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e057a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e057e:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e0582:	f001 fa1f 	bl	e19c4 <__aeabi_i2d>
   e0586:	9b00      	ldr	r3, [sp, #0]
   e0588:	2b00      	cmp	r3, #0
   e058a:	e8e8 0102 	strd	r0, r1, [r8], #8
   e058e:	f04f 0600 	mov.w	r6, #0
   e0592:	f04f 0700 	mov.w	r7, #0
   e0596:	db11      	blt.n	e05bc <__kernel_rem_pio2+0x354>
   e0598:	9c03      	ldr	r4, [sp, #12]
   e059a:	4645      	mov	r5, r8
   e059c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e05a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e05a4:	f001 fa74 	bl	e1a90 <__aeabi_dmul>
   e05a8:	4602      	mov	r2, r0
   e05aa:	460b      	mov	r3, r1
   e05ac:	4630      	mov	r0, r6
   e05ae:	4639      	mov	r1, r7
   e05b0:	f001 f8bc 	bl	e172c <__adddf3>
   e05b4:	455c      	cmp	r4, fp
   e05b6:	4606      	mov	r6, r0
   e05b8:	460f      	mov	r7, r1
   e05ba:	d1ef      	bne.n	e059c <__kernel_rem_pio2+0x334>
   e05bc:	9b04      	ldr	r3, [sp, #16]
   e05be:	4598      	cmp	r8, r3
   e05c0:	e8ea 6702 	strd	r6, r7, [sl], #8
   e05c4:	d1db      	bne.n	e057e <__kernel_rem_pio2+0x316>
   e05c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e05c8:	9304      	str	r3, [sp, #16]
   e05ca:	e6cc      	b.n	e0366 <__kernel_rem_pio2+0xfe>
   e05cc:	4632      	mov	r2, r6
   e05ce:	463b      	mov	r3, r7
   e05d0:	2000      	movs	r0, #0
   e05d2:	49b3      	ldr	r1, [pc, #716]	; (e08a0 <__kernel_rem_pio2+0x638>)
   e05d4:	f001 f8a8 	bl	e1728 <__aeabi_dsub>
   e05d8:	4606      	mov	r6, r0
   e05da:	460f      	mov	r7, r1
   e05dc:	2c00      	cmp	r4, #0
   e05de:	d080      	beq.n	e04e2 <__kernel_rem_pio2+0x27a>
   e05e0:	9806      	ldr	r0, [sp, #24]
   e05e2:	ed9f 0bab 	vldr	d0, [pc, #684]	; e0890 <__kernel_rem_pio2+0x628>
   e05e6:	f001 f807 	bl	e15f8 <scalbn>
   e05ea:	4630      	mov	r0, r6
   e05ec:	4639      	mov	r1, r7
   e05ee:	ec53 2b10 	vmov	r2, r3, d0
   e05f2:	f001 f899 	bl	e1728 <__aeabi_dsub>
   e05f6:	4606      	mov	r6, r0
   e05f8:	460f      	mov	r7, r1
   e05fa:	e772      	b.n	e04e2 <__kernel_rem_pio2+0x27a>
   e05fc:	d111      	bne.n	e0622 <__kernel_rem_pio2+0x3ba>
   e05fe:	9b04      	ldr	r3, [sp, #16]
   e0600:	aa0e      	add	r2, sp, #56	; 0x38
   e0602:	3b01      	subs	r3, #1
   e0604:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e0608:	15ed      	asrs	r5, r5, #23
   e060a:	e726      	b.n	e045a <__kernel_rem_pio2+0x1f2>
   e060c:	9b04      	ldr	r3, [sp, #16]
   e060e:	1e5a      	subs	r2, r3, #1
   e0610:	ab0e      	add	r3, sp, #56	; 0x38
   e0612:	a90e      	add	r1, sp, #56	; 0x38
   e0614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e0618:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e061c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e0620:	e75d      	b.n	e04de <__kernel_rem_pio2+0x276>
   e0622:	2200      	movs	r2, #0
   e0624:	4b9f      	ldr	r3, [pc, #636]	; (e08a4 <__kernel_rem_pio2+0x63c>)
   e0626:	f001 fcb9 	bl	e1f9c <__aeabi_dcmpge>
   e062a:	b958      	cbnz	r0, e0644 <__kernel_rem_pio2+0x3dc>
   e062c:	4605      	mov	r5, r0
   e062e:	e758      	b.n	e04e2 <__kernel_rem_pio2+0x27a>
   e0630:	2600      	movs	r6, #0
   e0632:	2700      	movs	r7, #0
   e0634:	e8ea 6702 	strd	r6, r7, [sl], #8
   e0638:	45da      	cmp	sl, fp
   e063a:	f109 0908 	add.w	r9, r9, #8
   e063e:	f47f ae64 	bne.w	e030a <__kernel_rem_pio2+0xa2>
   e0642:	e680      	b.n	e0346 <__kernel_rem_pio2+0xde>
   e0644:	9b04      	ldr	r3, [sp, #16]
   e0646:	2b00      	cmp	r3, #0
   e0648:	f108 0801 	add.w	r8, r8, #1
   e064c:	bfc8      	it	gt
   e064e:	2502      	movgt	r5, #2
   e0650:	f73f af0b 	bgt.w	e046a <__kernel_rem_pio2+0x202>
   e0654:	4632      	mov	r2, r6
   e0656:	463b      	mov	r3, r7
   e0658:	2000      	movs	r0, #0
   e065a:	4991      	ldr	r1, [pc, #580]	; (e08a0 <__kernel_rem_pio2+0x638>)
   e065c:	f001 f864 	bl	e1728 <__aeabi_dsub>
   e0660:	2502      	movs	r5, #2
   e0662:	4606      	mov	r6, r0
   e0664:	460f      	mov	r7, r1
   e0666:	e73c      	b.n	e04e2 <__kernel_rem_pio2+0x27a>
   e0668:	a90e      	add	r1, sp, #56	; 0x38
   e066a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e066e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e0672:	9906      	ldr	r1, [sp, #24]
   e0674:	9000      	str	r0, [sp, #0]
   e0676:	3918      	subs	r1, #24
   e0678:	4602      	mov	r2, r0
   e067a:	9503      	str	r5, [sp, #12]
   e067c:	9106      	str	r1, [sp, #24]
   e067e:	b96b      	cbnz	r3, e069c <__kernel_rem_pio2+0x434>
   e0680:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e0684:	3b01      	subs	r3, #1
   e0686:	a80e      	add	r0, sp, #56	; 0x38
   e0688:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e068c:	f853 0904 	ldr.w	r0, [r3], #-4
   e0690:	3a01      	subs	r2, #1
   e0692:	3918      	subs	r1, #24
   e0694:	2800      	cmp	r0, #0
   e0696:	d0f9      	beq.n	e068c <__kernel_rem_pio2+0x424>
   e0698:	9200      	str	r2, [sp, #0]
   e069a:	9106      	str	r1, [sp, #24]
   e069c:	9806      	ldr	r0, [sp, #24]
   e069e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e0890 <__kernel_rem_pio2+0x628>
   e06a2:	f000 ffa9 	bl	e15f8 <scalbn>
   e06a6:	9b00      	ldr	r3, [sp, #0]
   e06a8:	2b00      	cmp	r3, #0
   e06aa:	ec55 4b10 	vmov	r4, r5, d0
   e06ae:	f2c0 81c1 	blt.w	e0a34 <__kernel_rem_pio2+0x7cc>
   e06b2:	00da      	lsls	r2, r3, #3
   e06b4:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e06b8:	a90e      	add	r1, sp, #56	; 0x38
   e06ba:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e06be:	eb08 0b02 	add.w	fp, r8, r2
   e06c2:	9206      	str	r2, [sp, #24]
   e06c4:	3604      	adds	r6, #4
   e06c6:	f10b 0708 	add.w	r7, fp, #8
   e06ca:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e06ce:	f001 f979 	bl	e19c4 <__aeabi_i2d>
   e06d2:	4622      	mov	r2, r4
   e06d4:	462b      	mov	r3, r5
   e06d6:	f001 f9db 	bl	e1a90 <__aeabi_dmul>
   e06da:	2200      	movs	r2, #0
   e06dc:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e06e0:	4b71      	ldr	r3, [pc, #452]	; (e08a8 <__kernel_rem_pio2+0x640>)
   e06e2:	4620      	mov	r0, r4
   e06e4:	4629      	mov	r1, r5
   e06e6:	f001 f9d3 	bl	e1a90 <__aeabi_dmul>
   e06ea:	4547      	cmp	r7, r8
   e06ec:	4604      	mov	r4, r0
   e06ee:	460d      	mov	r5, r1
   e06f0:	d1eb      	bne.n	e06ca <__kernel_rem_pio2+0x462>
   e06f2:	ac4a      	add	r4, sp, #296	; 0x128
   e06f4:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e06f8:	9404      	str	r4, [sp, #16]
   e06fa:	f04f 0a00 	mov.w	sl, #0
   e06fe:	f1b9 0f00 	cmp.w	r9, #0
   e0702:	f2c0 812b 	blt.w	e095c <__kernel_rem_pio2+0x6f4>
   e0706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e08ac <__kernel_rem_pio2+0x644>
   e070a:	465d      	mov	r5, fp
   e070c:	a362      	add	r3, pc, #392	; (adr r3, e0898 <__kernel_rem_pio2+0x630>)
   e070e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0712:	2600      	movs	r6, #0
   e0714:	2700      	movs	r7, #0
   e0716:	2400      	movs	r4, #0
   e0718:	e003      	b.n	e0722 <__kernel_rem_pio2+0x4ba>
   e071a:	45a2      	cmp	sl, r4
   e071c:	db10      	blt.n	e0740 <__kernel_rem_pio2+0x4d8>
   e071e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e0722:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e0726:	f001 f9b3 	bl	e1a90 <__aeabi_dmul>
   e072a:	4602      	mov	r2, r0
   e072c:	460b      	mov	r3, r1
   e072e:	4630      	mov	r0, r6
   e0730:	4639      	mov	r1, r7
   e0732:	f000 fffb 	bl	e172c <__adddf3>
   e0736:	3401      	adds	r4, #1
   e0738:	45a1      	cmp	r9, r4
   e073a:	4606      	mov	r6, r0
   e073c:	460f      	mov	r7, r1
   e073e:	daec      	bge.n	e071a <__kernel_rem_pio2+0x4b2>
   e0740:	9b04      	ldr	r3, [sp, #16]
   e0742:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e0746:	f1ab 0b08 	sub.w	fp, fp, #8
   e074a:	e9c3 6700 	strd	r6, r7, [r3]
   e074e:	ab70      	add	r3, sp, #448	; 0x1c0
   e0750:	459b      	cmp	fp, r3
   e0752:	f10a 0a01 	add.w	sl, sl, #1
   e0756:	d1d2      	bne.n	e06fe <__kernel_rem_pio2+0x496>
   e0758:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e075a:	9c04      	ldr	r4, [sp, #16]
   e075c:	2b03      	cmp	r3, #3
   e075e:	f200 808d 	bhi.w	e087c <__kernel_rem_pio2+0x614>
   e0762:	e8df f013 	tbh	[pc, r3, lsl #1]
   e0766:	00dd      	.short	0x00dd
   e0768:	00a500a5 	.word	0x00a500a5
   e076c:	0004      	.short	0x0004
   e076e:	9b00      	ldr	r3, [sp, #0]
   e0770:	2b00      	cmp	r3, #0
   e0772:	f340 815c 	ble.w	e0a2e <__kernel_rem_pio2+0x7c6>
   e0776:	9b00      	ldr	r3, [sp, #0]
   e0778:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e077c:	9b06      	ldr	r3, [sp, #24]
   e077e:	f10b 3bff 	add.w	fp, fp, #4294967295
   e0782:	18e2      	adds	r2, r4, r3
   e0784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e0788:	e9d2 8900 	ldrd	r8, r9, [r2]
   e078c:	f103 0208 	add.w	r2, r3, #8
   e0790:	3310      	adds	r3, #16
   e0792:	eb04 0a02 	add.w	sl, r4, r2
   e0796:	18e5      	adds	r5, r4, r3
   e0798:	ed3a 7b02 	vldmdb	sl!, {d7}
   e079c:	4642      	mov	r2, r8
   e079e:	464b      	mov	r3, r9
   e07a0:	ec51 0b17 	vmov	r0, r1, d7
   e07a4:	ed8d 7b04 	vstr	d7, [sp, #16]
   e07a8:	f000 ffc0 	bl	e172c <__adddf3>
   e07ac:	4606      	mov	r6, r0
   e07ae:	460f      	mov	r7, r1
   e07b0:	4602      	mov	r2, r0
   e07b2:	460b      	mov	r3, r1
   e07b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e07b8:	f000 ffb6 	bl	e1728 <__aeabi_dsub>
   e07bc:	464b      	mov	r3, r9
   e07be:	4642      	mov	r2, r8
   e07c0:	f000 ffb4 	bl	e172c <__adddf3>
   e07c4:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e07c8:	ab4c      	add	r3, sp, #304	; 0x130
   e07ca:	429d      	cmp	r5, r3
   e07cc:	46b0      	mov	r8, r6
   e07ce:	46b9      	mov	r9, r7
   e07d0:	e9ca 6700 	strd	r6, r7, [sl]
   e07d4:	d1e0      	bne.n	e0798 <__kernel_rem_pio2+0x530>
   e07d6:	9b00      	ldr	r3, [sp, #0]
   e07d8:	2b01      	cmp	r3, #1
   e07da:	f340 8128 	ble.w	e0a2e <__kernel_rem_pio2+0x7c6>
   e07de:	9b06      	ldr	r3, [sp, #24]
   e07e0:	4423      	add	r3, r4
   e07e2:	ed93 7b00 	vldr	d7, [r3]
   e07e6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e07ea:	f10b 0a10 	add.w	sl, fp, #16
   e07ee:	ed8d 7b00 	vstr	d7, [sp]
   e07f2:	44a2      	add	sl, r4
   e07f4:	f10b 0b08 	add.w	fp, fp, #8
   e07f8:	eb04 050b 	add.w	r5, r4, fp
   e07fc:	46d0      	mov	r8, sl
   e07fe:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e0802:	f8cd a010 	str.w	sl, [sp, #16]
   e0806:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e080a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e080e:	464a      	mov	r2, r9
   e0810:	4653      	mov	r3, sl
   e0812:	f000 ff8b 	bl	e172c <__adddf3>
   e0816:	4606      	mov	r6, r0
   e0818:	460f      	mov	r7, r1
   e081a:	4602      	mov	r2, r0
   e081c:	460b      	mov	r3, r1
   e081e:	4648      	mov	r0, r9
   e0820:	4651      	mov	r1, sl
   e0822:	f000 ff81 	bl	e1728 <__aeabi_dsub>
   e0826:	e9dd 2300 	ldrd	r2, r3, [sp]
   e082a:	f000 ff7f 	bl	e172c <__adddf3>
   e082e:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e0832:	45c3      	cmp	fp, r8
   e0834:	e9cd 6700 	strd	r6, r7, [sp]
   e0838:	e9c5 6700 	strd	r6, r7, [r5]
   e083c:	d1e3      	bne.n	e0806 <__kernel_rem_pio2+0x59e>
   e083e:	f8dd a010 	ldr.w	sl, [sp, #16]
   e0842:	2000      	movs	r0, #0
   e0844:	2100      	movs	r1, #0
   e0846:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e084a:	f000 ff6f 	bl	e172c <__adddf3>
   e084e:	45d3      	cmp	fp, sl
   e0850:	d1f9      	bne.n	e0846 <__kernel_rem_pio2+0x5de>
   e0852:	9b03      	ldr	r3, [sp, #12]
   e0854:	2b00      	cmp	r3, #0
   e0856:	f000 80d3 	beq.w	e0a00 <__kernel_rem_pio2+0x798>
   e085a:	6862      	ldr	r2, [r4, #4]
   e085c:	68e3      	ldr	r3, [r4, #12]
   e085e:	9f08      	ldr	r7, [sp, #32]
   e0860:	6825      	ldr	r5, [r4, #0]
   e0862:	68a4      	ldr	r4, [r4, #8]
   e0864:	603d      	str	r5, [r7, #0]
   e0866:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e086a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e086e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e0872:	607a      	str	r2, [r7, #4]
   e0874:	60fb      	str	r3, [r7, #12]
   e0876:	60bc      	str	r4, [r7, #8]
   e0878:	6138      	str	r0, [r7, #16]
   e087a:	6179      	str	r1, [r7, #20]
   e087c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e087e:	f003 0007 	and.w	r0, r3, #7
   e0882:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e088a:	bf00      	nop
   e088c:	f3af 8000 	nop.w
   e0890:	00000000 	.word	0x00000000
   e0894:	3ff00000 	.word	0x3ff00000
   e0898:	40000000 	.word	0x40000000
   e089c:	3ff921fb 	.word	0x3ff921fb
   e08a0:	3ff00000 	.word	0x3ff00000
   e08a4:	3fe00000 	.word	0x3fe00000
   e08a8:	3e700000 	.word	0x3e700000
   e08ac:	000e6c40 	.word	0x000e6c40
   e08b0:	9d06      	ldr	r5, [sp, #24]
   e08b2:	3508      	adds	r5, #8
   e08b4:	4425      	add	r5, r4
   e08b6:	2000      	movs	r0, #0
   e08b8:	2100      	movs	r1, #0
   e08ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e08be:	f000 ff35 	bl	e172c <__adddf3>
   e08c2:	42a5      	cmp	r5, r4
   e08c4:	d1f9      	bne.n	e08ba <__kernel_rem_pio2+0x652>
   e08c6:	9b03      	ldr	r3, [sp, #12]
   e08c8:	2b00      	cmp	r3, #0
   e08ca:	d04a      	beq.n	e0962 <__kernel_rem_pio2+0x6fa>
   e08cc:	9e08      	ldr	r6, [sp, #32]
   e08ce:	4602      	mov	r2, r0
   e08d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e08d4:	e886 000c 	stmia.w	r6, {r2, r3}
   e08d8:	460b      	mov	r3, r1
   e08da:	4602      	mov	r2, r0
   e08dc:	e9d4 0100 	ldrd	r0, r1, [r4]
   e08e0:	f000 ff22 	bl	e1728 <__aeabi_dsub>
   e08e4:	9b00      	ldr	r3, [sp, #0]
   e08e6:	2b00      	cmp	r3, #0
   e08e8:	dd0d      	ble.n	e0906 <__kernel_rem_pio2+0x69e>
   e08ea:	ad4c      	add	r5, sp, #304	; 0x130
   e08ec:	2401      	movs	r4, #1
   e08ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e08f2:	f000 ff1b 	bl	e172c <__adddf3>
   e08f6:	9b00      	ldr	r3, [sp, #0]
   e08f8:	3401      	adds	r4, #1
   e08fa:	42a3      	cmp	r3, r4
   e08fc:	daf7      	bge.n	e08ee <__kernel_rem_pio2+0x686>
   e08fe:	9b03      	ldr	r3, [sp, #12]
   e0900:	2b00      	cmp	r3, #0
   e0902:	f000 80a7 	beq.w	e0a54 <__kernel_rem_pio2+0x7ec>
   e0906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e090a:	9908      	ldr	r1, [sp, #32]
   e090c:	4602      	mov	r2, r0
   e090e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0912:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0914:	f003 0007 	and.w	r0, r3, #7
   e0918:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e091c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0920:	9b06      	ldr	r3, [sp, #24]
   e0922:	9d00      	ldr	r5, [sp, #0]
   e0924:	3308      	adds	r3, #8
   e0926:	2000      	movs	r0, #0
   e0928:	2100      	movs	r1, #0
   e092a:	441c      	add	r4, r3
   e092c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e0930:	3d01      	subs	r5, #1
   e0932:	f000 fefb 	bl	e172c <__adddf3>
   e0936:	1c6b      	adds	r3, r5, #1
   e0938:	d1f8      	bne.n	e092c <__kernel_rem_pio2+0x6c4>
   e093a:	9b03      	ldr	r3, [sp, #12]
   e093c:	4602      	mov	r2, r0
   e093e:	2b00      	cmp	r3, #0
   e0940:	f000 808e 	beq.w	e0a60 <__kernel_rem_pio2+0x7f8>
   e0944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0948:	9908      	ldr	r1, [sp, #32]
   e094a:	e9c1 2300 	strd	r2, r3, [r1]
   e094e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0950:	f003 0007 	and.w	r0, r3, #7
   e0954:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e095c:	2600      	movs	r6, #0
   e095e:	2700      	movs	r7, #0
   e0960:	e6ee      	b.n	e0740 <__kernel_rem_pio2+0x4d8>
   e0962:	9b08      	ldr	r3, [sp, #32]
   e0964:	4602      	mov	r2, r0
   e0966:	e9c3 0100 	strd	r0, r1, [r3]
   e096a:	460b      	mov	r3, r1
   e096c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e0970:	f000 feda 	bl	e1728 <__aeabi_dsub>
   e0974:	9c00      	ldr	r4, [sp, #0]
   e0976:	2c00      	cmp	r4, #0
   e0978:	4602      	mov	r2, r0
   e097a:	460b      	mov	r3, r1
   e097c:	dcb5      	bgt.n	e08ea <__kernel_rem_pio2+0x682>
   e097e:	9908      	ldr	r1, [sp, #32]
   e0980:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0984:	e7c5      	b.n	e0912 <__kernel_rem_pio2+0x6aa>
   e0986:	9b06      	ldr	r3, [sp, #24]
   e0988:	9503      	str	r5, [sp, #12]
   e098a:	4258      	negs	r0, r3
   e098c:	ec47 6b10 	vmov	d0, r6, r7
   e0990:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e0994:	f000 fe30 	bl	e15f8 <scalbn>
   e0998:	ec55 4b10 	vmov	r4, r5, d0
   e099c:	2200      	movs	r2, #0
   e099e:	4b38      	ldr	r3, [pc, #224]	; (e0a80 <__kernel_rem_pio2+0x818>)
   e09a0:	ee10 0a10 	vmov	r0, s0
   e09a4:	4629      	mov	r1, r5
   e09a6:	f001 faf9 	bl	e1f9c <__aeabi_dcmpge>
   e09aa:	2800      	cmp	r0, #0
   e09ac:	d034      	beq.n	e0a18 <__kernel_rem_pio2+0x7b0>
   e09ae:	2200      	movs	r2, #0
   e09b0:	4b34      	ldr	r3, [pc, #208]	; (e0a84 <__kernel_rem_pio2+0x81c>)
   e09b2:	4620      	mov	r0, r4
   e09b4:	4629      	mov	r1, r5
   e09b6:	f001 f86b 	bl	e1a90 <__aeabi_dmul>
   e09ba:	f001 fb19 	bl	e1ff0 <__aeabi_d2iz>
   e09be:	4606      	mov	r6, r0
   e09c0:	f001 f800 	bl	e19c4 <__aeabi_i2d>
   e09c4:	2200      	movs	r2, #0
   e09c6:	4b2e      	ldr	r3, [pc, #184]	; (e0a80 <__kernel_rem_pio2+0x818>)
   e09c8:	f001 f862 	bl	e1a90 <__aeabi_dmul>
   e09cc:	4602      	mov	r2, r0
   e09ce:	460b      	mov	r3, r1
   e09d0:	4620      	mov	r0, r4
   e09d2:	4629      	mov	r1, r5
   e09d4:	f000 fea8 	bl	e1728 <__aeabi_dsub>
   e09d8:	f001 fb0a 	bl	e1ff0 <__aeabi_d2iz>
   e09dc:	9904      	ldr	r1, [sp, #16]
   e09de:	9b06      	ldr	r3, [sp, #24]
   e09e0:	460a      	mov	r2, r1
   e09e2:	3318      	adds	r3, #24
   e09e4:	3201      	adds	r2, #1
   e09e6:	9306      	str	r3, [sp, #24]
   e09e8:	460b      	mov	r3, r1
   e09ea:	a90e      	add	r1, sp, #56	; 0x38
   e09ec:	9200      	str	r2, [sp, #0]
   e09ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e09f2:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e09f6:	e651      	b.n	e069c <__kernel_rem_pio2+0x434>
   e09f8:	2301      	movs	r3, #1
   e09fa:	e5a0      	b.n	e053e <__kernel_rem_pio2+0x2d6>
   e09fc:	2400      	movs	r4, #0
   e09fe:	e55c      	b.n	e04ba <__kernel_rem_pio2+0x252>
   e0a00:	e9d4 6700 	ldrd	r6, r7, [r4]
   e0a04:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e0a08:	9d08      	ldr	r5, [sp, #32]
   e0a0a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e0a0e:	e9c5 6700 	strd	r6, r7, [r5]
   e0a12:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e0a16:	e731      	b.n	e087c <__kernel_rem_pio2+0x614>
   e0a18:	4629      	mov	r1, r5
   e0a1a:	4620      	mov	r0, r4
   e0a1c:	f001 fae8 	bl	e1ff0 <__aeabi_d2iz>
   e0a20:	9a04      	ldr	r2, [sp, #16]
   e0a22:	9200      	str	r2, [sp, #0]
   e0a24:	a90e      	add	r1, sp, #56	; 0x38
   e0a26:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e0a2a:	e637      	b.n	e069c <__kernel_rem_pio2+0x434>
   e0a2c:	ac4a      	add	r4, sp, #296	; 0x128
   e0a2e:	2000      	movs	r0, #0
   e0a30:	2100      	movs	r1, #0
   e0a32:	e70e      	b.n	e0852 <__kernel_rem_pio2+0x5ea>
   e0a34:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e0a36:	2b03      	cmp	r3, #3
   e0a38:	f63f af20 	bhi.w	e087c <__kernel_rem_pio2+0x614>
   e0a3c:	a201      	add	r2, pc, #4	; (adr r2, e0a44 <__kernel_rem_pio2+0x7dc>)
   e0a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e0a42:	bf00      	nop
   e0a44:	000e0a7b 	.word	0x000e0a7b
   e0a48:	000e0a73 	.word	0x000e0a73
   e0a4c:	000e0a73 	.word	0x000e0a73
   e0a50:	000e0a2d 	.word	0x000e0a2d
   e0a54:	460b      	mov	r3, r1
   e0a56:	9908      	ldr	r1, [sp, #32]
   e0a58:	4602      	mov	r2, r0
   e0a5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0a5e:	e758      	b.n	e0912 <__kernel_rem_pio2+0x6aa>
   e0a60:	460b      	mov	r3, r1
   e0a62:	9908      	ldr	r1, [sp, #32]
   e0a64:	e9c1 2300 	strd	r2, r3, [r1]
   e0a68:	e771      	b.n	e094e <__kernel_rem_pio2+0x6e6>
   e0a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e0a6c:	00db      	lsls	r3, r3, #3
   e0a6e:	9304      	str	r3, [sp, #16]
   e0a70:	e469      	b.n	e0346 <__kernel_rem_pio2+0xde>
   e0a72:	2000      	movs	r0, #0
   e0a74:	2100      	movs	r1, #0
   e0a76:	ac4a      	add	r4, sp, #296	; 0x128
   e0a78:	e725      	b.n	e08c6 <__kernel_rem_pio2+0x65e>
   e0a7a:	2000      	movs	r0, #0
   e0a7c:	2100      	movs	r1, #0
   e0a7e:	e75c      	b.n	e093a <__kernel_rem_pio2+0x6d2>
   e0a80:	41700000 	.word	0x41700000
   e0a84:	3e700000 	.word	0x3e700000

000e0a88 <__kernel_sin>:
   e0a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0a8c:	ec55 4b10 	vmov	r4, r5, d0
   e0a90:	ed2d 8b02 	vpush	{d8}
   e0a94:	eeb0 8a41 	vmov.f32	s16, s2
   e0a98:	eef0 8a61 	vmov.f32	s17, s3
   e0a9c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e0aa0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e0aa4:	b083      	sub	sp, #12
   e0aa6:	4682      	mov	sl, r0
   e0aa8:	da07      	bge.n	e0aba <__kernel_sin+0x32>
   e0aaa:	ee10 0a10 	vmov	r0, s0
   e0aae:	4629      	mov	r1, r5
   e0ab0:	f001 fa9e 	bl	e1ff0 <__aeabi_d2iz>
   e0ab4:	2800      	cmp	r0, #0
   e0ab6:	f000 808e 	beq.w	e0bd6 <__kernel_sin+0x14e>
   e0aba:	4622      	mov	r2, r4
   e0abc:	462b      	mov	r3, r5
   e0abe:	4620      	mov	r0, r4
   e0ac0:	4629      	mov	r1, r5
   e0ac2:	f000 ffe5 	bl	e1a90 <__aeabi_dmul>
   e0ac6:	4606      	mov	r6, r0
   e0ac8:	460f      	mov	r7, r1
   e0aca:	4602      	mov	r2, r0
   e0acc:	460b      	mov	r3, r1
   e0ace:	4620      	mov	r0, r4
   e0ad0:	4629      	mov	r1, r5
   e0ad2:	f000 ffdd 	bl	e1a90 <__aeabi_dmul>
   e0ad6:	a347      	add	r3, pc, #284	; (adr r3, e0bf4 <__kernel_sin+0x16c>)
   e0ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0adc:	4680      	mov	r8, r0
   e0ade:	4689      	mov	r9, r1
   e0ae0:	4630      	mov	r0, r6
   e0ae2:	4639      	mov	r1, r7
   e0ae4:	f000 ffd4 	bl	e1a90 <__aeabi_dmul>
   e0ae8:	a344      	add	r3, pc, #272	; (adr r3, e0bfc <__kernel_sin+0x174>)
   e0aea:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0aee:	f000 fe1b 	bl	e1728 <__aeabi_dsub>
   e0af2:	4632      	mov	r2, r6
   e0af4:	463b      	mov	r3, r7
   e0af6:	f000 ffcb 	bl	e1a90 <__aeabi_dmul>
   e0afa:	a342      	add	r3, pc, #264	; (adr r3, e0c04 <__kernel_sin+0x17c>)
   e0afc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b00:	f000 fe14 	bl	e172c <__adddf3>
   e0b04:	4632      	mov	r2, r6
   e0b06:	463b      	mov	r3, r7
   e0b08:	f000 ffc2 	bl	e1a90 <__aeabi_dmul>
   e0b0c:	a33f      	add	r3, pc, #252	; (adr r3, e0c0c <__kernel_sin+0x184>)
   e0b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b12:	f000 fe09 	bl	e1728 <__aeabi_dsub>
   e0b16:	4632      	mov	r2, r6
   e0b18:	463b      	mov	r3, r7
   e0b1a:	f000 ffb9 	bl	e1a90 <__aeabi_dmul>
   e0b1e:	a33d      	add	r3, pc, #244	; (adr r3, e0c14 <__kernel_sin+0x18c>)
   e0b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b24:	f000 fe02 	bl	e172c <__adddf3>
   e0b28:	e9cd 0100 	strd	r0, r1, [sp]
   e0b2c:	f1ba 0f00 	cmp.w	sl, #0
   e0b30:	d037      	beq.n	e0ba2 <__kernel_sin+0x11a>
   e0b32:	2200      	movs	r2, #0
   e0b34:	4b2e      	ldr	r3, [pc, #184]	; (e0bf0 <__kernel_sin+0x168>)
   e0b36:	ec51 0b18 	vmov	r0, r1, d8
   e0b3a:	f000 ffa9 	bl	e1a90 <__aeabi_dmul>
   e0b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0b42:	4682      	mov	sl, r0
   e0b44:	468b      	mov	fp, r1
   e0b46:	4640      	mov	r0, r8
   e0b48:	4649      	mov	r1, r9
   e0b4a:	f000 ffa1 	bl	e1a90 <__aeabi_dmul>
   e0b4e:	4602      	mov	r2, r0
   e0b50:	460b      	mov	r3, r1
   e0b52:	4650      	mov	r0, sl
   e0b54:	4659      	mov	r1, fp
   e0b56:	f000 fde7 	bl	e1728 <__aeabi_dsub>
   e0b5a:	4632      	mov	r2, r6
   e0b5c:	463b      	mov	r3, r7
   e0b5e:	f000 ff97 	bl	e1a90 <__aeabi_dmul>
   e0b62:	ec53 2b18 	vmov	r2, r3, d8
   e0b66:	f000 fddf 	bl	e1728 <__aeabi_dsub>
   e0b6a:	a31f      	add	r3, pc, #124	; (adr r3, e0be8 <__kernel_sin+0x160>)
   e0b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b70:	4606      	mov	r6, r0
   e0b72:	460f      	mov	r7, r1
   e0b74:	4640      	mov	r0, r8
   e0b76:	4649      	mov	r1, r9
   e0b78:	f000 ff8a 	bl	e1a90 <__aeabi_dmul>
   e0b7c:	4602      	mov	r2, r0
   e0b7e:	460b      	mov	r3, r1
   e0b80:	4630      	mov	r0, r6
   e0b82:	4639      	mov	r1, r7
   e0b84:	f000 fdd2 	bl	e172c <__adddf3>
   e0b88:	4602      	mov	r2, r0
   e0b8a:	460b      	mov	r3, r1
   e0b8c:	4620      	mov	r0, r4
   e0b8e:	4629      	mov	r1, r5
   e0b90:	f000 fdca 	bl	e1728 <__aeabi_dsub>
   e0b94:	ec41 0b10 	vmov	d0, r0, r1
   e0b98:	b003      	add	sp, #12
   e0b9a:	ecbd 8b02 	vpop	{d8}
   e0b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0ba2:	4602      	mov	r2, r0
   e0ba4:	460b      	mov	r3, r1
   e0ba6:	4630      	mov	r0, r6
   e0ba8:	4639      	mov	r1, r7
   e0baa:	f000 ff71 	bl	e1a90 <__aeabi_dmul>
   e0bae:	a30e      	add	r3, pc, #56	; (adr r3, e0be8 <__kernel_sin+0x160>)
   e0bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0bb4:	f000 fdb8 	bl	e1728 <__aeabi_dsub>
   e0bb8:	4642      	mov	r2, r8
   e0bba:	464b      	mov	r3, r9
   e0bbc:	f000 ff68 	bl	e1a90 <__aeabi_dmul>
   e0bc0:	4622      	mov	r2, r4
   e0bc2:	462b      	mov	r3, r5
   e0bc4:	f000 fdb2 	bl	e172c <__adddf3>
   e0bc8:	ec41 0b10 	vmov	d0, r0, r1
   e0bcc:	b003      	add	sp, #12
   e0bce:	ecbd 8b02 	vpop	{d8}
   e0bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0bd6:	ec45 4b10 	vmov	d0, r4, r5
   e0bda:	b003      	add	sp, #12
   e0bdc:	ecbd 8b02 	vpop	{d8}
   e0be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0be4:	f3af 8000 	nop.w
   e0be8:	55555549 	.word	0x55555549
   e0bec:	3fc55555 	.word	0x3fc55555
   e0bf0:	3fe00000 	.word	0x3fe00000
   e0bf4:	5acfd57c 	.word	0x5acfd57c
   e0bf8:	3de5d93a 	.word	0x3de5d93a
   e0bfc:	8a2b9ceb 	.word	0x8a2b9ceb
   e0c00:	3e5ae5e6 	.word	0x3e5ae5e6
   e0c04:	57b1fe7d 	.word	0x57b1fe7d
   e0c08:	3ec71de3 	.word	0x3ec71de3
   e0c0c:	19c161d5 	.word	0x19c161d5
   e0c10:	3f2a01a0 	.word	0x3f2a01a0
   e0c14:	1110f8a6 	.word	0x1110f8a6
   e0c18:	3f811111 	.word	0x3f811111
   e0c1c:	00000000 	.word	0x00000000

000e0c20 <__kernel_tan>:
   e0c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0c24:	ec59 8b10 	vmov	r8, r9, d0
   e0c28:	4be1      	ldr	r3, [pc, #900]	; (e0fb0 <__kernel_tan+0x390>)
   e0c2a:	b089      	sub	sp, #36	; 0x24
   e0c2c:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e0c30:	429e      	cmp	r6, r3
   e0c32:	f8cd 9014 	str.w	r9, [sp, #20]
   e0c36:	4607      	mov	r7, r0
   e0c38:	ed8d 1b00 	vstr	d1, [sp]
   e0c3c:	dc19      	bgt.n	e0c72 <__kernel_tan+0x52>
   e0c3e:	ee10 0a10 	vmov	r0, s0
   e0c42:	4649      	mov	r1, r9
   e0c44:	f001 f9d4 	bl	e1ff0 <__aeabi_d2iz>
   e0c48:	bba0      	cbnz	r0, e0cb4 <__kernel_tan+0x94>
   e0c4a:	4643      	mov	r3, r8
   e0c4c:	431e      	orrs	r6, r3
   e0c4e:	1c7b      	adds	r3, r7, #1
   e0c50:	4333      	orrs	r3, r6
   e0c52:	f000 815e 	beq.w	e0f12 <__kernel_tan+0x2f2>
   e0c56:	2f01      	cmp	r7, #1
   e0c58:	f000 81c2 	beq.w	e0fe0 <__kernel_tan+0x3c0>
   e0c5c:	4642      	mov	r2, r8
   e0c5e:	464b      	mov	r3, r9
   e0c60:	2000      	movs	r0, #0
   e0c62:	49d4      	ldr	r1, [pc, #848]	; (e0fb4 <__kernel_tan+0x394>)
   e0c64:	f001 f83e 	bl	e1ce4 <__aeabi_ddiv>
   e0c68:	ec41 0b10 	vmov	d0, r0, r1
   e0c6c:	b009      	add	sp, #36	; 0x24
   e0c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0c72:	4bd1      	ldr	r3, [pc, #836]	; (e0fb8 <__kernel_tan+0x398>)
   e0c74:	429e      	cmp	r6, r3
   e0c76:	dd1d      	ble.n	e0cb4 <__kernel_tan+0x94>
   e0c78:	9b05      	ldr	r3, [sp, #20]
   e0c7a:	2b00      	cmp	r3, #0
   e0c7c:	f2c0 81a0 	blt.w	e0fc0 <__kernel_tan+0x3a0>
   e0c80:	4642      	mov	r2, r8
   e0c82:	464b      	mov	r3, r9
   e0c84:	a1aa      	add	r1, pc, #680	; (adr r1, e0f30 <__kernel_tan+0x310>)
   e0c86:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0c8a:	f000 fd4d 	bl	e1728 <__aeabi_dsub>
   e0c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0c92:	4604      	mov	r4, r0
   e0c94:	460d      	mov	r5, r1
   e0c96:	a1a8      	add	r1, pc, #672	; (adr r1, e0f38 <__kernel_tan+0x318>)
   e0c98:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0c9c:	f000 fd44 	bl	e1728 <__aeabi_dsub>
   e0ca0:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e0f40 <__kernel_tan+0x320>
   e0ca4:	4622      	mov	r2, r4
   e0ca6:	462b      	mov	r3, r5
   e0ca8:	ed8d 7b00 	vstr	d7, [sp]
   e0cac:	f000 fd3e 	bl	e172c <__adddf3>
   e0cb0:	4680      	mov	r8, r0
   e0cb2:	4689      	mov	r9, r1
   e0cb4:	4642      	mov	r2, r8
   e0cb6:	464b      	mov	r3, r9
   e0cb8:	4640      	mov	r0, r8
   e0cba:	4649      	mov	r1, r9
   e0cbc:	f000 fee8 	bl	e1a90 <__aeabi_dmul>
   e0cc0:	4602      	mov	r2, r0
   e0cc2:	460b      	mov	r3, r1
   e0cc4:	4682      	mov	sl, r0
   e0cc6:	468b      	mov	fp, r1
   e0cc8:	f000 fee2 	bl	e1a90 <__aeabi_dmul>
   e0ccc:	4652      	mov	r2, sl
   e0cce:	4604      	mov	r4, r0
   e0cd0:	460d      	mov	r5, r1
   e0cd2:	465b      	mov	r3, fp
   e0cd4:	4640      	mov	r0, r8
   e0cd6:	4649      	mov	r1, r9
   e0cd8:	f000 feda 	bl	e1a90 <__aeabi_dmul>
   e0cdc:	a39a      	add	r3, pc, #616	; (adr r3, e0f48 <__kernel_tan+0x328>)
   e0cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0ce6:	4620      	mov	r0, r4
   e0ce8:	4629      	mov	r1, r5
   e0cea:	f000 fed1 	bl	e1a90 <__aeabi_dmul>
   e0cee:	a398      	add	r3, pc, #608	; (adr r3, e0f50 <__kernel_tan+0x330>)
   e0cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cf4:	f000 fd1a 	bl	e172c <__adddf3>
   e0cf8:	4622      	mov	r2, r4
   e0cfa:	462b      	mov	r3, r5
   e0cfc:	f000 fec8 	bl	e1a90 <__aeabi_dmul>
   e0d00:	a395      	add	r3, pc, #596	; (adr r3, e0f58 <__kernel_tan+0x338>)
   e0d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d06:	f000 fd11 	bl	e172c <__adddf3>
   e0d0a:	4622      	mov	r2, r4
   e0d0c:	462b      	mov	r3, r5
   e0d0e:	f000 febf 	bl	e1a90 <__aeabi_dmul>
   e0d12:	a393      	add	r3, pc, #588	; (adr r3, e0f60 <__kernel_tan+0x340>)
   e0d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d18:	f000 fd08 	bl	e172c <__adddf3>
   e0d1c:	4622      	mov	r2, r4
   e0d1e:	462b      	mov	r3, r5
   e0d20:	f000 feb6 	bl	e1a90 <__aeabi_dmul>
   e0d24:	a390      	add	r3, pc, #576	; (adr r3, e0f68 <__kernel_tan+0x348>)
   e0d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d2a:	f000 fcff 	bl	e172c <__adddf3>
   e0d2e:	4622      	mov	r2, r4
   e0d30:	462b      	mov	r3, r5
   e0d32:	f000 fead 	bl	e1a90 <__aeabi_dmul>
   e0d36:	a38e      	add	r3, pc, #568	; (adr r3, e0f70 <__kernel_tan+0x350>)
   e0d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d3c:	f000 fcf6 	bl	e172c <__adddf3>
   e0d40:	4652      	mov	r2, sl
   e0d42:	465b      	mov	r3, fp
   e0d44:	f000 fea4 	bl	e1a90 <__aeabi_dmul>
   e0d48:	a38b      	add	r3, pc, #556	; (adr r3, e0f78 <__kernel_tan+0x358>)
   e0d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0d52:	4620      	mov	r0, r4
   e0d54:	4629      	mov	r1, r5
   e0d56:	f000 fe9b 	bl	e1a90 <__aeabi_dmul>
   e0d5a:	a389      	add	r3, pc, #548	; (adr r3, e0f80 <__kernel_tan+0x360>)
   e0d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d60:	f000 fce4 	bl	e172c <__adddf3>
   e0d64:	4622      	mov	r2, r4
   e0d66:	462b      	mov	r3, r5
   e0d68:	f000 fe92 	bl	e1a90 <__aeabi_dmul>
   e0d6c:	a386      	add	r3, pc, #536	; (adr r3, e0f88 <__kernel_tan+0x368>)
   e0d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d72:	f000 fcdb 	bl	e172c <__adddf3>
   e0d76:	4622      	mov	r2, r4
   e0d78:	462b      	mov	r3, r5
   e0d7a:	f000 fe89 	bl	e1a90 <__aeabi_dmul>
   e0d7e:	a384      	add	r3, pc, #528	; (adr r3, e0f90 <__kernel_tan+0x370>)
   e0d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d84:	f000 fcd2 	bl	e172c <__adddf3>
   e0d88:	4622      	mov	r2, r4
   e0d8a:	462b      	mov	r3, r5
   e0d8c:	f000 fe80 	bl	e1a90 <__aeabi_dmul>
   e0d90:	a381      	add	r3, pc, #516	; (adr r3, e0f98 <__kernel_tan+0x378>)
   e0d92:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d96:	f000 fcc9 	bl	e172c <__adddf3>
   e0d9a:	4622      	mov	r2, r4
   e0d9c:	462b      	mov	r3, r5
   e0d9e:	f000 fe77 	bl	e1a90 <__aeabi_dmul>
   e0da2:	a37f      	add	r3, pc, #508	; (adr r3, e0fa0 <__kernel_tan+0x380>)
   e0da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0da8:	f000 fcc0 	bl	e172c <__adddf3>
   e0dac:	4602      	mov	r2, r0
   e0dae:	460b      	mov	r3, r1
   e0db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0db4:	f000 fcba 	bl	e172c <__adddf3>
   e0db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0dbc:	f000 fe68 	bl	e1a90 <__aeabi_dmul>
   e0dc0:	e9dd 4500 	ldrd	r4, r5, [sp]
   e0dc4:	4622      	mov	r2, r4
   e0dc6:	462b      	mov	r3, r5
   e0dc8:	f000 fcb0 	bl	e172c <__adddf3>
   e0dcc:	4652      	mov	r2, sl
   e0dce:	465b      	mov	r3, fp
   e0dd0:	f000 fe5e 	bl	e1a90 <__aeabi_dmul>
   e0dd4:	4602      	mov	r2, r0
   e0dd6:	460b      	mov	r3, r1
   e0dd8:	4620      	mov	r0, r4
   e0dda:	4629      	mov	r1, r5
   e0ddc:	f000 fca6 	bl	e172c <__adddf3>
   e0de0:	a371      	add	r3, pc, #452	; (adr r3, e0fa8 <__kernel_tan+0x388>)
   e0de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0de6:	4604      	mov	r4, r0
   e0de8:	460d      	mov	r5, r1
   e0dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0dee:	f000 fe4f 	bl	e1a90 <__aeabi_dmul>
   e0df2:	4622      	mov	r2, r4
   e0df4:	462b      	mov	r3, r5
   e0df6:	f000 fc99 	bl	e172c <__adddf3>
   e0dfa:	460b      	mov	r3, r1
   e0dfc:	4602      	mov	r2, r0
   e0dfe:	4649      	mov	r1, r9
   e0e00:	4640      	mov	r0, r8
   e0e02:	e9cd 2300 	strd	r2, r3, [sp]
   e0e06:	f000 fc91 	bl	e172c <__adddf3>
   e0e0a:	4b6b      	ldr	r3, [pc, #428]	; (e0fb8 <__kernel_tan+0x398>)
   e0e0c:	429e      	cmp	r6, r3
   e0e0e:	4604      	mov	r4, r0
   e0e10:	460d      	mov	r5, r1
   e0e12:	dc3c      	bgt.n	e0e8e <__kernel_tan+0x26e>
   e0e14:	2f01      	cmp	r7, #1
   e0e16:	f000 80e0 	beq.w	e0fda <__kernel_tan+0x3ba>
   e0e1a:	4602      	mov	r2, r0
   e0e1c:	460b      	mov	r3, r1
   e0e1e:	2000      	movs	r0, #0
   e0e20:	4964      	ldr	r1, [pc, #400]	; (e0fb4 <__kernel_tan+0x394>)
   e0e22:	f000 ff5f 	bl	e1ce4 <__aeabi_ddiv>
   e0e26:	2400      	movs	r4, #0
   e0e28:	460f      	mov	r7, r1
   e0e2a:	464b      	mov	r3, r9
   e0e2c:	4606      	mov	r6, r0
   e0e2e:	4629      	mov	r1, r5
   e0e30:	4620      	mov	r0, r4
   e0e32:	4642      	mov	r2, r8
   e0e34:	f000 fc78 	bl	e1728 <__aeabi_dsub>
   e0e38:	4602      	mov	r2, r0
   e0e3a:	460b      	mov	r3, r1
   e0e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0e40:	f000 fc72 	bl	e1728 <__aeabi_dsub>
   e0e44:	4622      	mov	r2, r4
   e0e46:	463b      	mov	r3, r7
   e0e48:	f000 fe22 	bl	e1a90 <__aeabi_dmul>
   e0e4c:	46a2      	mov	sl, r4
   e0e4e:	46a9      	mov	r9, r5
   e0e50:	4604      	mov	r4, r0
   e0e52:	460d      	mov	r5, r1
   e0e54:	4652      	mov	r2, sl
   e0e56:	463b      	mov	r3, r7
   e0e58:	4650      	mov	r0, sl
   e0e5a:	4649      	mov	r1, r9
   e0e5c:	f000 fe18 	bl	e1a90 <__aeabi_dmul>
   e0e60:	2200      	movs	r2, #0
   e0e62:	4b56      	ldr	r3, [pc, #344]	; (e0fbc <__kernel_tan+0x39c>)
   e0e64:	f000 fc62 	bl	e172c <__adddf3>
   e0e68:	4602      	mov	r2, r0
   e0e6a:	460b      	mov	r3, r1
   e0e6c:	4620      	mov	r0, r4
   e0e6e:	4629      	mov	r1, r5
   e0e70:	f000 fc5c 	bl	e172c <__adddf3>
   e0e74:	4632      	mov	r2, r6
   e0e76:	463b      	mov	r3, r7
   e0e78:	f000 fe0a 	bl	e1a90 <__aeabi_dmul>
   e0e7c:	4652      	mov	r2, sl
   e0e7e:	463b      	mov	r3, r7
   e0e80:	f000 fc54 	bl	e172c <__adddf3>
   e0e84:	ec41 0b10 	vmov	d0, r0, r1
   e0e88:	b009      	add	sp, #36	; 0x24
   e0e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0e8e:	4638      	mov	r0, r7
   e0e90:	f000 fd98 	bl	e19c4 <__aeabi_i2d>
   e0e94:	4622      	mov	r2, r4
   e0e96:	4606      	mov	r6, r0
   e0e98:	460f      	mov	r7, r1
   e0e9a:	462b      	mov	r3, r5
   e0e9c:	4620      	mov	r0, r4
   e0e9e:	4629      	mov	r1, r5
   e0ea0:	f000 fdf6 	bl	e1a90 <__aeabi_dmul>
   e0ea4:	4632      	mov	r2, r6
   e0ea6:	4682      	mov	sl, r0
   e0ea8:	468b      	mov	fp, r1
   e0eaa:	463b      	mov	r3, r7
   e0eac:	4620      	mov	r0, r4
   e0eae:	4629      	mov	r1, r5
   e0eb0:	f000 fc3c 	bl	e172c <__adddf3>
   e0eb4:	4602      	mov	r2, r0
   e0eb6:	460b      	mov	r3, r1
   e0eb8:	4650      	mov	r0, sl
   e0eba:	4659      	mov	r1, fp
   e0ebc:	f000 ff12 	bl	e1ce4 <__aeabi_ddiv>
   e0ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0ec4:	f000 fc30 	bl	e1728 <__aeabi_dsub>
   e0ec8:	4602      	mov	r2, r0
   e0eca:	460b      	mov	r3, r1
   e0ecc:	4640      	mov	r0, r8
   e0ece:	4649      	mov	r1, r9
   e0ed0:	f000 fc2a 	bl	e1728 <__aeabi_dsub>
   e0ed4:	4602      	mov	r2, r0
   e0ed6:	460b      	mov	r3, r1
   e0ed8:	f000 fc28 	bl	e172c <__adddf3>
   e0edc:	4602      	mov	r2, r0
   e0ede:	460b      	mov	r3, r1
   e0ee0:	4630      	mov	r0, r6
   e0ee2:	4639      	mov	r1, r7
   e0ee4:	f000 fc20 	bl	e1728 <__aeabi_dsub>
   e0ee8:	9b05      	ldr	r3, [sp, #20]
   e0eea:	4604      	mov	r4, r0
   e0eec:	1798      	asrs	r0, r3, #30
   e0eee:	f000 0002 	and.w	r0, r0, #2
   e0ef2:	f1c0 0001 	rsb	r0, r0, #1
   e0ef6:	460d      	mov	r5, r1
   e0ef8:	f000 fd64 	bl	e19c4 <__aeabi_i2d>
   e0efc:	4602      	mov	r2, r0
   e0efe:	460b      	mov	r3, r1
   e0f00:	4620      	mov	r0, r4
   e0f02:	4629      	mov	r1, r5
   e0f04:	f000 fdc4 	bl	e1a90 <__aeabi_dmul>
   e0f08:	ec41 0b10 	vmov	d0, r0, r1
   e0f0c:	b009      	add	sp, #36	; 0x24
   e0f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f12:	ec49 8b10 	vmov	d0, r8, r9
   e0f16:	f7fb fbb3 	bl	dc680 <fabs>
   e0f1a:	2000      	movs	r0, #0
   e0f1c:	ec53 2b10 	vmov	r2, r3, d0
   e0f20:	4926      	ldr	r1, [pc, #152]	; (e0fbc <__kernel_tan+0x39c>)
   e0f22:	f000 fedf 	bl	e1ce4 <__aeabi_ddiv>
   e0f26:	ec41 0b10 	vmov	d0, r0, r1
   e0f2a:	e7ad      	b.n	e0e88 <__kernel_tan+0x268>
   e0f2c:	f3af 8000 	nop.w
   e0f30:	54442d18 	.word	0x54442d18
   e0f34:	3fe921fb 	.word	0x3fe921fb
   e0f38:	33145c07 	.word	0x33145c07
   e0f3c:	3c81a626 	.word	0x3c81a626
	...
   e0f48:	74bf7ad4 	.word	0x74bf7ad4
   e0f4c:	3efb2a70 	.word	0x3efb2a70
   e0f50:	32f0a7e9 	.word	0x32f0a7e9
   e0f54:	3f12b80f 	.word	0x3f12b80f
   e0f58:	1a8d1068 	.word	0x1a8d1068
   e0f5c:	3f3026f7 	.word	0x3f3026f7
   e0f60:	fee08315 	.word	0xfee08315
   e0f64:	3f57dbc8 	.word	0x3f57dbc8
   e0f68:	e96e8493 	.word	0xe96e8493
   e0f6c:	3f8226e3 	.word	0x3f8226e3
   e0f70:	1bb341fe 	.word	0x1bb341fe
   e0f74:	3faba1ba 	.word	0x3faba1ba
   e0f78:	db605373 	.word	0xdb605373
   e0f7c:	bef375cb 	.word	0xbef375cb
   e0f80:	a03792a6 	.word	0xa03792a6
   e0f84:	3f147e88 	.word	0x3f147e88
   e0f88:	f2f26501 	.word	0xf2f26501
   e0f8c:	3f4344d8 	.word	0x3f4344d8
   e0f90:	c9560328 	.word	0xc9560328
   e0f94:	3f6d6d22 	.word	0x3f6d6d22
   e0f98:	8406d637 	.word	0x8406d637
   e0f9c:	3f9664f4 	.word	0x3f9664f4
   e0fa0:	1110fe7a 	.word	0x1110fe7a
   e0fa4:	3fc11111 	.word	0x3fc11111
   e0fa8:	55555563 	.word	0x55555563
   e0fac:	3fd55555 	.word	0x3fd55555
   e0fb0:	3e2fffff 	.word	0x3e2fffff
   e0fb4:	bff00000 	.word	0xbff00000
   e0fb8:	3fe59427 	.word	0x3fe59427
   e0fbc:	3ff00000 	.word	0x3ff00000
   e0fc0:	e9dd 4500 	ldrd	r4, r5, [sp]
   e0fc4:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e0fc8:	4622      	mov	r2, r4
   e0fca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e0fce:	ee10 8a10 	vmov	r8, s0
   e0fd2:	4689      	mov	r9, r1
   e0fd4:	e9cd 2300 	strd	r2, r3, [sp]
   e0fd8:	e652      	b.n	e0c80 <__kernel_tan+0x60>
   e0fda:	ec45 4b10 	vmov	d0, r4, r5
   e0fde:	e753      	b.n	e0e88 <__kernel_tan+0x268>
   e0fe0:	ec49 8b10 	vmov	d0, r8, r9
   e0fe4:	e750      	b.n	e0e88 <__kernel_tan+0x268>
   e0fe6:	bf00      	nop

000e0fe8 <expm1>:
   e0fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0fec:	ec5b ab10 	vmov	sl, fp, d0
   e0ff0:	49d7      	ldr	r1, [pc, #860]	; (e1350 <expm1+0x368>)
   e0ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e0ff6:	428b      	cmp	r3, r1
   e0ff8:	b085      	sub	sp, #20
   e0ffa:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e0ffe:	d953      	bls.n	e10a8 <expm1+0xc0>
   e1000:	49d4      	ldr	r1, [pc, #848]	; (e1354 <expm1+0x36c>)
   e1002:	428b      	cmp	r3, r1
   e1004:	f200 8105 	bhi.w	e1212 <expm1+0x22a>
   e1008:	2c00      	cmp	r4, #0
   e100a:	f000 81de 	beq.w	e13ca <expm1+0x3e2>
   e100e:	a3b6      	add	r3, pc, #728	; (adr r3, e12e8 <expm1+0x300>)
   e1010:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1014:	4650      	mov	r0, sl
   e1016:	4659      	mov	r1, fp
   e1018:	f000 fb88 	bl	e172c <__adddf3>
   e101c:	2200      	movs	r2, #0
   e101e:	2300      	movs	r3, #0
   e1020:	f000 ffa8 	bl	e1f74 <__aeabi_dcmplt>
   e1024:	2800      	cmp	r0, #0
   e1026:	f040 80ff 	bne.w	e1228 <expm1+0x240>
   e102a:	a3b1      	add	r3, pc, #708	; (adr r3, e12f0 <expm1+0x308>)
   e102c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1030:	4650      	mov	r0, sl
   e1032:	4659      	mov	r1, fp
   e1034:	f000 fd2c 	bl	e1a90 <__aeabi_dmul>
   e1038:	4602      	mov	r2, r0
   e103a:	460b      	mov	r3, r1
   e103c:	2000      	movs	r0, #0
   e103e:	49c6      	ldr	r1, [pc, #792]	; (e1358 <expm1+0x370>)
   e1040:	f000 fb74 	bl	e172c <__adddf3>
   e1044:	f000 ffd4 	bl	e1ff0 <__aeabi_d2iz>
   e1048:	9001      	str	r0, [sp, #4]
   e104a:	f000 fcbb 	bl	e19c4 <__aeabi_i2d>
   e104e:	a3aa      	add	r3, pc, #680	; (adr r3, e12f8 <expm1+0x310>)
   e1050:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1054:	4606      	mov	r6, r0
   e1056:	460f      	mov	r7, r1
   e1058:	f000 fd1a 	bl	e1a90 <__aeabi_dmul>
   e105c:	4602      	mov	r2, r0
   e105e:	460b      	mov	r3, r1
   e1060:	4650      	mov	r0, sl
   e1062:	4659      	mov	r1, fp
   e1064:	f000 fb60 	bl	e1728 <__aeabi_dsub>
   e1068:	a3a5      	add	r3, pc, #660	; (adr r3, e1300 <expm1+0x318>)
   e106a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e106e:	4680      	mov	r8, r0
   e1070:	4689      	mov	r9, r1
   e1072:	4630      	mov	r0, r6
   e1074:	4639      	mov	r1, r7
   e1076:	f000 fd0b 	bl	e1a90 <__aeabi_dmul>
   e107a:	4606      	mov	r6, r0
   e107c:	460f      	mov	r7, r1
   e107e:	4632      	mov	r2, r6
   e1080:	463b      	mov	r3, r7
   e1082:	4640      	mov	r0, r8
   e1084:	4649      	mov	r1, r9
   e1086:	f000 fb4f 	bl	e1728 <__aeabi_dsub>
   e108a:	4602      	mov	r2, r0
   e108c:	460b      	mov	r3, r1
   e108e:	4682      	mov	sl, r0
   e1090:	468b      	mov	fp, r1
   e1092:	4640      	mov	r0, r8
   e1094:	4649      	mov	r1, r9
   e1096:	f000 fb47 	bl	e1728 <__aeabi_dsub>
   e109a:	4632      	mov	r2, r6
   e109c:	463b      	mov	r3, r7
   e109e:	f000 fb43 	bl	e1728 <__aeabi_dsub>
   e10a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e10a6:	e009      	b.n	e10bc <expm1+0xd4>
   e10a8:	4aac      	ldr	r2, [pc, #688]	; (e135c <expm1+0x374>)
   e10aa:	4293      	cmp	r3, r2
   e10ac:	f200 80e7 	bhi.w	e127e <expm1+0x296>
   e10b0:	4aab      	ldr	r2, [pc, #684]	; (e1360 <expm1+0x378>)
   e10b2:	4293      	cmp	r3, r2
   e10b4:	f240 8162 	bls.w	e137c <expm1+0x394>
   e10b8:	2300      	movs	r3, #0
   e10ba:	9301      	str	r3, [sp, #4]
   e10bc:	2200      	movs	r2, #0
   e10be:	4ba9      	ldr	r3, [pc, #676]	; (e1364 <expm1+0x37c>)
   e10c0:	4650      	mov	r0, sl
   e10c2:	4659      	mov	r1, fp
   e10c4:	f000 fce4 	bl	e1a90 <__aeabi_dmul>
   e10c8:	4606      	mov	r6, r0
   e10ca:	460f      	mov	r7, r1
   e10cc:	4602      	mov	r2, r0
   e10ce:	460b      	mov	r3, r1
   e10d0:	4650      	mov	r0, sl
   e10d2:	4659      	mov	r1, fp
   e10d4:	f000 fcdc 	bl	e1a90 <__aeabi_dmul>
   e10d8:	a38b      	add	r3, pc, #556	; (adr r3, e1308 <expm1+0x320>)
   e10da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e10de:	4604      	mov	r4, r0
   e10e0:	460d      	mov	r5, r1
   e10e2:	f000 fcd5 	bl	e1a90 <__aeabi_dmul>
   e10e6:	a38a      	add	r3, pc, #552	; (adr r3, e1310 <expm1+0x328>)
   e10e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e10ec:	f000 fb1e 	bl	e172c <__adddf3>
   e10f0:	4622      	mov	r2, r4
   e10f2:	462b      	mov	r3, r5
   e10f4:	f000 fccc 	bl	e1a90 <__aeabi_dmul>
   e10f8:	a387      	add	r3, pc, #540	; (adr r3, e1318 <expm1+0x330>)
   e10fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e10fe:	f000 fb13 	bl	e1728 <__aeabi_dsub>
   e1102:	4622      	mov	r2, r4
   e1104:	462b      	mov	r3, r5
   e1106:	f000 fcc3 	bl	e1a90 <__aeabi_dmul>
   e110a:	a385      	add	r3, pc, #532	; (adr r3, e1320 <expm1+0x338>)
   e110c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1110:	f000 fb0c 	bl	e172c <__adddf3>
   e1114:	4622      	mov	r2, r4
   e1116:	462b      	mov	r3, r5
   e1118:	f000 fcba 	bl	e1a90 <__aeabi_dmul>
   e111c:	a382      	add	r3, pc, #520	; (adr r3, e1328 <expm1+0x340>)
   e111e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1122:	f000 fb01 	bl	e1728 <__aeabi_dsub>
   e1126:	4622      	mov	r2, r4
   e1128:	462b      	mov	r3, r5
   e112a:	f000 fcb1 	bl	e1a90 <__aeabi_dmul>
   e112e:	2200      	movs	r2, #0
   e1130:	4b8d      	ldr	r3, [pc, #564]	; (e1368 <expm1+0x380>)
   e1132:	f000 fafb 	bl	e172c <__adddf3>
   e1136:	4680      	mov	r8, r0
   e1138:	4689      	mov	r9, r1
   e113a:	4602      	mov	r2, r0
   e113c:	460b      	mov	r3, r1
   e113e:	4630      	mov	r0, r6
   e1140:	4639      	mov	r1, r7
   e1142:	f000 fca5 	bl	e1a90 <__aeabi_dmul>
   e1146:	4602      	mov	r2, r0
   e1148:	460b      	mov	r3, r1
   e114a:	2000      	movs	r0, #0
   e114c:	4987      	ldr	r1, [pc, #540]	; (e136c <expm1+0x384>)
   e114e:	f000 faeb 	bl	e1728 <__aeabi_dsub>
   e1152:	4606      	mov	r6, r0
   e1154:	4602      	mov	r2, r0
   e1156:	460b      	mov	r3, r1
   e1158:	460f      	mov	r7, r1
   e115a:	4640      	mov	r0, r8
   e115c:	4649      	mov	r1, r9
   e115e:	f000 fae3 	bl	e1728 <__aeabi_dsub>
   e1162:	4632      	mov	r2, r6
   e1164:	4680      	mov	r8, r0
   e1166:	4689      	mov	r9, r1
   e1168:	463b      	mov	r3, r7
   e116a:	4650      	mov	r0, sl
   e116c:	4659      	mov	r1, fp
   e116e:	f000 fc8f 	bl	e1a90 <__aeabi_dmul>
   e1172:	4602      	mov	r2, r0
   e1174:	460b      	mov	r3, r1
   e1176:	2000      	movs	r0, #0
   e1178:	497d      	ldr	r1, [pc, #500]	; (e1370 <expm1+0x388>)
   e117a:	f000 fad5 	bl	e1728 <__aeabi_dsub>
   e117e:	4602      	mov	r2, r0
   e1180:	460b      	mov	r3, r1
   e1182:	4640      	mov	r0, r8
   e1184:	4649      	mov	r1, r9
   e1186:	f000 fdad 	bl	e1ce4 <__aeabi_ddiv>
   e118a:	4622      	mov	r2, r4
   e118c:	462b      	mov	r3, r5
   e118e:	f000 fc7f 	bl	e1a90 <__aeabi_dmul>
   e1192:	9e01      	ldr	r6, [sp, #4]
   e1194:	4602      	mov	r2, r0
   e1196:	460b      	mov	r3, r1
   e1198:	2e00      	cmp	r6, #0
   e119a:	d048      	beq.n	e122e <expm1+0x246>
   e119c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e11a0:	4632      	mov	r2, r6
   e11a2:	463b      	mov	r3, r7
   e11a4:	f000 fac0 	bl	e1728 <__aeabi_dsub>
   e11a8:	4652      	mov	r2, sl
   e11aa:	465b      	mov	r3, fp
   e11ac:	f000 fc70 	bl	e1a90 <__aeabi_dmul>
   e11b0:	4632      	mov	r2, r6
   e11b2:	463b      	mov	r3, r7
   e11b4:	f000 fab8 	bl	e1728 <__aeabi_dsub>
   e11b8:	462b      	mov	r3, r5
   e11ba:	4622      	mov	r2, r4
   e11bc:	f000 fab4 	bl	e1728 <__aeabi_dsub>
   e11c0:	9b01      	ldr	r3, [sp, #4]
   e11c2:	3301      	adds	r3, #1
   e11c4:	4606      	mov	r6, r0
   e11c6:	460f      	mov	r7, r1
   e11c8:	f000 810b 	beq.w	e13e2 <expm1+0x3fa>
   e11cc:	9b01      	ldr	r3, [sp, #4]
   e11ce:	2b01      	cmp	r3, #1
   e11d0:	f000 80df 	beq.w	e1392 <expm1+0x3aa>
   e11d4:	9b01      	ldr	r3, [sp, #4]
   e11d6:	3301      	adds	r3, #1
   e11d8:	2b39      	cmp	r3, #57	; 0x39
   e11da:	d866      	bhi.n	e12aa <expm1+0x2c2>
   e11dc:	9b01      	ldr	r3, [sp, #4]
   e11de:	2b13      	cmp	r3, #19
   e11e0:	f340 8110 	ble.w	e1404 <expm1+0x41c>
   e11e4:	9c01      	ldr	r4, [sp, #4]
   e11e6:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e11ea:	3503      	adds	r5, #3
   e11ec:	2200      	movs	r2, #0
   e11ee:	052b      	lsls	r3, r5, #20
   e11f0:	f000 fa9c 	bl	e172c <__adddf3>
   e11f4:	4602      	mov	r2, r0
   e11f6:	460b      	mov	r3, r1
   e11f8:	4650      	mov	r0, sl
   e11fa:	4659      	mov	r1, fp
   e11fc:	f000 fa94 	bl	e1728 <__aeabi_dsub>
   e1200:	2200      	movs	r2, #0
   e1202:	4b59      	ldr	r3, [pc, #356]	; (e1368 <expm1+0x380>)
   e1204:	f000 fa92 	bl	e172c <__adddf3>
   e1208:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e120c:	ec41 0b10 	vmov	d0, r0, r1
   e1210:	e01d      	b.n	e124e <expm1+0x266>
   e1212:	4958      	ldr	r1, [pc, #352]	; (e1374 <expm1+0x38c>)
   e1214:	428b      	cmp	r3, r1
   e1216:	d91d      	bls.n	e1254 <expm1+0x26c>
   e1218:	ee10 3a10 	vmov	r3, s0
   e121c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e1220:	4313      	orrs	r3, r2
   e1222:	f040 8128 	bne.w	e1476 <expm1+0x48e>
   e1226:	b194      	cbz	r4, e124e <expm1+0x266>
   e1228:	ed9f 0b41 	vldr	d0, [pc, #260]	; e1330 <expm1+0x348>
   e122c:	e00f      	b.n	e124e <expm1+0x266>
   e122e:	4650      	mov	r0, sl
   e1230:	4659      	mov	r1, fp
   e1232:	f000 fc2d 	bl	e1a90 <__aeabi_dmul>
   e1236:	4622      	mov	r2, r4
   e1238:	462b      	mov	r3, r5
   e123a:	f000 fa75 	bl	e1728 <__aeabi_dsub>
   e123e:	4602      	mov	r2, r0
   e1240:	460b      	mov	r3, r1
   e1242:	4650      	mov	r0, sl
   e1244:	4659      	mov	r1, fp
   e1246:	f000 fa6f 	bl	e1728 <__aeabi_dsub>
   e124a:	ec41 0b10 	vmov	d0, r0, r1
   e124e:	b005      	add	sp, #20
   e1250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1254:	a338      	add	r3, pc, #224	; (adr r3, e1338 <expm1+0x350>)
   e1256:	e9d3 2300 	ldrd	r2, r3, [r3]
   e125a:	ee10 0a10 	vmov	r0, s0
   e125e:	4659      	mov	r1, fp
   e1260:	f000 fea6 	bl	e1fb0 <__aeabi_dcmpgt>
   e1264:	2800      	cmp	r0, #0
   e1266:	f43f aecf 	beq.w	e1008 <expm1+0x20>
   e126a:	a335      	add	r3, pc, #212	; (adr r3, e1340 <expm1+0x358>)
   e126c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1270:	4610      	mov	r0, r2
   e1272:	4619      	mov	r1, r3
   e1274:	f000 fc0c 	bl	e1a90 <__aeabi_dmul>
   e1278:	ec41 0b10 	vmov	d0, r0, r1
   e127c:	e7e7      	b.n	e124e <expm1+0x266>
   e127e:	4a3e      	ldr	r2, [pc, #248]	; (e1378 <expm1+0x390>)
   e1280:	4293      	cmp	r3, r2
   e1282:	f200 80d7 	bhi.w	e1434 <expm1+0x44c>
   e1286:	ee10 0a10 	vmov	r0, s0
   e128a:	4659      	mov	r1, fp
   e128c:	a31a      	add	r3, pc, #104	; (adr r3, e12f8 <expm1+0x310>)
   e128e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1292:	b1f4      	cbz	r4, e12d2 <expm1+0x2ea>
   e1294:	f000 fa4a 	bl	e172c <__adddf3>
   e1298:	f04f 33ff 	mov.w	r3, #4294967295
   e129c:	4680      	mov	r8, r0
   e129e:	4689      	mov	r9, r1
   e12a0:	9301      	str	r3, [sp, #4]
   e12a2:	a729      	add	r7, pc, #164	; (adr r7, e1348 <expm1+0x360>)
   e12a4:	e9d7 6700 	ldrd	r6, r7, [r7]
   e12a8:	e6e9      	b.n	e107e <expm1+0x96>
   e12aa:	4652      	mov	r2, sl
   e12ac:	465b      	mov	r3, fp
   e12ae:	f000 fa3b 	bl	e1728 <__aeabi_dsub>
   e12b2:	4602      	mov	r2, r0
   e12b4:	460b      	mov	r3, r1
   e12b6:	2000      	movs	r0, #0
   e12b8:	492b      	ldr	r1, [pc, #172]	; (e1368 <expm1+0x380>)
   e12ba:	f000 fa35 	bl	e1728 <__aeabi_dsub>
   e12be:	9a01      	ldr	r2, [sp, #4]
   e12c0:	4b29      	ldr	r3, [pc, #164]	; (e1368 <expm1+0x380>)
   e12c2:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e12c6:	2200      	movs	r2, #0
   e12c8:	f000 fa2e 	bl	e1728 <__aeabi_dsub>
   e12cc:	ec41 0b10 	vmov	d0, r0, r1
   e12d0:	e7bd      	b.n	e124e <expm1+0x266>
   e12d2:	f000 fa29 	bl	e1728 <__aeabi_dsub>
   e12d6:	2301      	movs	r3, #1
   e12d8:	4680      	mov	r8, r0
   e12da:	4689      	mov	r9, r1
   e12dc:	9301      	str	r3, [sp, #4]
   e12de:	a708      	add	r7, pc, #32	; (adr r7, e1300 <expm1+0x318>)
   e12e0:	e9d7 6700 	ldrd	r6, r7, [r7]
   e12e4:	e6cb      	b.n	e107e <expm1+0x96>
   e12e6:	bf00      	nop
   e12e8:	c2f8f359 	.word	0xc2f8f359
   e12ec:	01a56e1f 	.word	0x01a56e1f
   e12f0:	652b82fe 	.word	0x652b82fe
   e12f4:	3ff71547 	.word	0x3ff71547
   e12f8:	fee00000 	.word	0xfee00000
   e12fc:	3fe62e42 	.word	0x3fe62e42
   e1300:	35793c76 	.word	0x35793c76
   e1304:	3dea39ef 	.word	0x3dea39ef
   e1308:	6e09c32d 	.word	0x6e09c32d
   e130c:	be8afdb7 	.word	0xbe8afdb7
   e1310:	86e65239 	.word	0x86e65239
   e1314:	3ed0cfca 	.word	0x3ed0cfca
   e1318:	9eaadbb7 	.word	0x9eaadbb7
   e131c:	3f14ce19 	.word	0x3f14ce19
   e1320:	19fe5585 	.word	0x19fe5585
   e1324:	3f5a01a0 	.word	0x3f5a01a0
   e1328:	111110f4 	.word	0x111110f4
   e132c:	3fa11111 	.word	0x3fa11111
   e1330:	00000000 	.word	0x00000000
   e1334:	bff00000 	.word	0xbff00000
   e1338:	fefa39ef 	.word	0xfefa39ef
   e133c:	40862e42 	.word	0x40862e42
   e1340:	8800759c 	.word	0x8800759c
   e1344:	7e37e43c 	.word	0x7e37e43c
   e1348:	35793c76 	.word	0x35793c76
   e134c:	bdea39ef 	.word	0xbdea39ef
   e1350:	40436879 	.word	0x40436879
   e1354:	40862e41 	.word	0x40862e41
   e1358:	bfe00000 	.word	0xbfe00000
   e135c:	3fd62e42 	.word	0x3fd62e42
   e1360:	3c8fffff 	.word	0x3c8fffff
   e1364:	3fe00000 	.word	0x3fe00000
   e1368:	3ff00000 	.word	0x3ff00000
   e136c:	40080000 	.word	0x40080000
   e1370:	40180000 	.word	0x40180000
   e1374:	7fefffff 	.word	0x7fefffff
   e1378:	3ff0a2b1 	.word	0x3ff0a2b1
   e137c:	a349      	add	r3, pc, #292	; (adr r3, e14a4 <expm1+0x4bc>)
   e137e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1382:	ee10 0a10 	vmov	r0, s0
   e1386:	4659      	mov	r1, fp
   e1388:	f000 f9d0 	bl	e172c <__adddf3>
   e138c:	4602      	mov	r2, r0
   e138e:	460b      	mov	r3, r1
   e1390:	e753      	b.n	e123a <expm1+0x252>
   e1392:	2200      	movs	r2, #0
   e1394:	4b40      	ldr	r3, [pc, #256]	; (e1498 <expm1+0x4b0>)
   e1396:	4650      	mov	r0, sl
   e1398:	4659      	mov	r1, fp
   e139a:	f000 fdeb 	bl	e1f74 <__aeabi_dcmplt>
   e139e:	2800      	cmp	r0, #0
   e13a0:	d058      	beq.n	e1454 <expm1+0x46c>
   e13a2:	2200      	movs	r2, #0
   e13a4:	4b3d      	ldr	r3, [pc, #244]	; (e149c <expm1+0x4b4>)
   e13a6:	4650      	mov	r0, sl
   e13a8:	4659      	mov	r1, fp
   e13aa:	f000 f9bf 	bl	e172c <__adddf3>
   e13ae:	4602      	mov	r2, r0
   e13b0:	460b      	mov	r3, r1
   e13b2:	4630      	mov	r0, r6
   e13b4:	4639      	mov	r1, r7
   e13b6:	f000 f9b7 	bl	e1728 <__aeabi_dsub>
   e13ba:	2200      	movs	r2, #0
   e13bc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e13c0:	f000 fb66 	bl	e1a90 <__aeabi_dmul>
   e13c4:	ec41 0b10 	vmov	d0, r0, r1
   e13c8:	e741      	b.n	e124e <expm1+0x266>
   e13ca:	a331      	add	r3, pc, #196	; (adr r3, e1490 <expm1+0x4a8>)
   e13cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13d0:	4650      	mov	r0, sl
   e13d2:	4659      	mov	r1, fp
   e13d4:	f000 fb5c 	bl	e1a90 <__aeabi_dmul>
   e13d8:	4602      	mov	r2, r0
   e13da:	460b      	mov	r3, r1
   e13dc:	2000      	movs	r0, #0
   e13de:	492f      	ldr	r1, [pc, #188]	; (e149c <expm1+0x4b4>)
   e13e0:	e62e      	b.n	e1040 <expm1+0x58>
   e13e2:	4602      	mov	r2, r0
   e13e4:	460b      	mov	r3, r1
   e13e6:	4650      	mov	r0, sl
   e13e8:	4659      	mov	r1, fp
   e13ea:	f000 f99d 	bl	e1728 <__aeabi_dsub>
   e13ee:	2200      	movs	r2, #0
   e13f0:	4b2a      	ldr	r3, [pc, #168]	; (e149c <expm1+0x4b4>)
   e13f2:	f000 fb4d 	bl	e1a90 <__aeabi_dmul>
   e13f6:	2200      	movs	r2, #0
   e13f8:	4b28      	ldr	r3, [pc, #160]	; (e149c <expm1+0x4b4>)
   e13fa:	f000 f995 	bl	e1728 <__aeabi_dsub>
   e13fe:	ec41 0b10 	vmov	d0, r0, r1
   e1402:	e724      	b.n	e124e <expm1+0x266>
   e1404:	9c01      	ldr	r4, [sp, #4]
   e1406:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e140a:	4123      	asrs	r3, r4
   e140c:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e1410:	4652      	mov	r2, sl
   e1412:	465b      	mov	r3, fp
   e1414:	f000 f988 	bl	e1728 <__aeabi_dsub>
   e1418:	2600      	movs	r6, #0
   e141a:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e141e:	4602      	mov	r2, r0
   e1420:	460b      	mov	r3, r1
   e1422:	4630      	mov	r0, r6
   e1424:	4639      	mov	r1, r7
   e1426:	f000 f97f 	bl	e1728 <__aeabi_dsub>
   e142a:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e142e:	ec41 0b10 	vmov	d0, r0, r1
   e1432:	e70c      	b.n	e124e <expm1+0x266>
   e1434:	a316      	add	r3, pc, #88	; (adr r3, e1490 <expm1+0x4a8>)
   e1436:	e9d3 2300 	ldrd	r2, r3, [r3]
   e143a:	ee10 0a10 	vmov	r0, s0
   e143e:	4659      	mov	r1, fp
   e1440:	f000 fb26 	bl	e1a90 <__aeabi_dmul>
   e1444:	4602      	mov	r2, r0
   e1446:	460b      	mov	r3, r1
   e1448:	2000      	movs	r0, #0
   e144a:	2c00      	cmp	r4, #0
   e144c:	f47f adf7 	bne.w	e103e <expm1+0x56>
   e1450:	4912      	ldr	r1, [pc, #72]	; (e149c <expm1+0x4b4>)
   e1452:	e5f5      	b.n	e1040 <expm1+0x58>
   e1454:	4632      	mov	r2, r6
   e1456:	463b      	mov	r3, r7
   e1458:	4650      	mov	r0, sl
   e145a:	4659      	mov	r1, fp
   e145c:	f000 f964 	bl	e1728 <__aeabi_dsub>
   e1460:	4602      	mov	r2, r0
   e1462:	460b      	mov	r3, r1
   e1464:	f000 f962 	bl	e172c <__adddf3>
   e1468:	2200      	movs	r2, #0
   e146a:	4b0d      	ldr	r3, [pc, #52]	; (e14a0 <expm1+0x4b8>)
   e146c:	f000 f95e 	bl	e172c <__adddf3>
   e1470:	ec41 0b10 	vmov	d0, r0, r1
   e1474:	e6eb      	b.n	e124e <expm1+0x266>
   e1476:	ee10 2a10 	vmov	r2, s0
   e147a:	ee10 0a10 	vmov	r0, s0
   e147e:	465b      	mov	r3, fp
   e1480:	4659      	mov	r1, fp
   e1482:	f000 f953 	bl	e172c <__adddf3>
   e1486:	ec41 0b10 	vmov	d0, r0, r1
   e148a:	e6e0      	b.n	e124e <expm1+0x266>
   e148c:	f3af 8000 	nop.w
   e1490:	652b82fe 	.word	0x652b82fe
   e1494:	3ff71547 	.word	0x3ff71547
   e1498:	bfd00000 	.word	0xbfd00000
   e149c:	3fe00000 	.word	0x3fe00000
   e14a0:	3ff00000 	.word	0x3ff00000
   e14a4:	8800759c 	.word	0x8800759c
   e14a8:	7e37e43c 	.word	0x7e37e43c

000e14ac <finite>:
   e14ac:	ee10 3a90 	vmov	r3, s1
   e14b0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e14b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e14b8:	0fc0      	lsrs	r0, r0, #31
   e14ba:	4770      	bx	lr

000e14bc <matherr>:
   e14bc:	2000      	movs	r0, #0
   e14be:	4770      	bx	lr

000e14c0 <nan>:
   e14c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; e14c8 <nan+0x8>
   e14c4:	4770      	bx	lr
   e14c6:	bf00      	nop
   e14c8:	00000000 	.word	0x00000000
   e14cc:	7ff80000 	.word	0x7ff80000

000e14d0 <rint>:
   e14d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e14d2:	ec53 2b10 	vmov	r2, r3, d0
   e14d6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e14da:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e14de:	2813      	cmp	r0, #19
   e14e0:	b083      	sub	sp, #12
   e14e2:	4619      	mov	r1, r3
   e14e4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e14e8:	ee10 5a10 	vmov	r5, s0
   e14ec:	dc2f      	bgt.n	e154e <rint+0x7e>
   e14ee:	2800      	cmp	r0, #0
   e14f0:	db49      	blt.n	e1586 <rint+0xb6>
   e14f2:	4e3f      	ldr	r6, [pc, #252]	; (e15f0 <rint+0x120>)
   e14f4:	4106      	asrs	r6, r0
   e14f6:	ea03 0706 	and.w	r7, r3, r6
   e14fa:	4317      	orrs	r7, r2
   e14fc:	d02c      	beq.n	e1558 <rint+0x88>
   e14fe:	0876      	lsrs	r6, r6, #1
   e1500:	4033      	ands	r3, r6
   e1502:	431d      	orrs	r5, r3
   e1504:	d00c      	beq.n	e1520 <rint+0x50>
   e1506:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e150a:	2813      	cmp	r0, #19
   e150c:	ea21 0606 	bic.w	r6, r1, r6
   e1510:	fa43 f100 	asr.w	r1, r3, r0
   e1514:	ea41 0106 	orr.w	r1, r1, r6
   e1518:	bf0c      	ite	eq
   e151a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e151e:	2500      	movne	r5, #0
   e1520:	4834      	ldr	r0, [pc, #208]	; (e15f4 <rint+0x124>)
   e1522:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e1526:	462a      	mov	r2, r5
   e1528:	e9d4 4500 	ldrd	r4, r5, [r4]
   e152c:	4610      	mov	r0, r2
   e152e:	462b      	mov	r3, r5
   e1530:	4622      	mov	r2, r4
   e1532:	f000 f8fb 	bl	e172c <__adddf3>
   e1536:	e9cd 0100 	strd	r0, r1, [sp]
   e153a:	4622      	mov	r2, r4
   e153c:	462b      	mov	r3, r5
   e153e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1542:	f000 f8f1 	bl	e1728 <__aeabi_dsub>
   e1546:	ec41 0b10 	vmov	d0, r0, r1
   e154a:	b003      	add	sp, #12
   e154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e154e:	2833      	cmp	r0, #51	; 0x33
   e1550:	dd06      	ble.n	e1560 <rint+0x90>
   e1552:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e1556:	d042      	beq.n	e15de <rint+0x10e>
   e1558:	ec43 2b10 	vmov	d0, r2, r3
   e155c:	b003      	add	sp, #12
   e155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1560:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e1564:	f04f 30ff 	mov.w	r0, #4294967295
   e1568:	40f0      	lsrs	r0, r6
   e156a:	4202      	tst	r2, r0
   e156c:	d0f4      	beq.n	e1558 <rint+0x88>
   e156e:	0840      	lsrs	r0, r0, #1
   e1570:	4202      	tst	r2, r0
   e1572:	d0d5      	beq.n	e1520 <rint+0x50>
   e1574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e1578:	ea25 0000 	bic.w	r0, r5, r0
   e157c:	fa43 f606 	asr.w	r6, r3, r6
   e1580:	ea46 0500 	orr.w	r5, r6, r0
   e1584:	e7cc      	b.n	e1520 <rint+0x50>
   e1586:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e158a:	4310      	orrs	r0, r2
   e158c:	ee10 7a10 	vmov	r7, s0
   e1590:	d0e2      	beq.n	e1558 <rint+0x88>
   e1592:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e1596:	4307      	orrs	r7, r0
   e1598:	4278      	negs	r0, r7
   e159a:	4307      	orrs	r7, r0
   e159c:	4815      	ldr	r0, [pc, #84]	; (e15f4 <rint+0x124>)
   e159e:	0c59      	lsrs	r1, r3, #17
   e15a0:	0b3f      	lsrs	r7, r7, #12
   e15a2:	0449      	lsls	r1, r1, #17
   e15a4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e15a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e15ac:	ea47 0301 	orr.w	r3, r7, r1
   e15b0:	e9d0 6700 	ldrd	r6, r7, [r0]
   e15b4:	4619      	mov	r1, r3
   e15b6:	4610      	mov	r0, r2
   e15b8:	463b      	mov	r3, r7
   e15ba:	4632      	mov	r2, r6
   e15bc:	f000 f8b6 	bl	e172c <__adddf3>
   e15c0:	e9cd 0100 	strd	r0, r1, [sp]
   e15c4:	463b      	mov	r3, r7
   e15c6:	4632      	mov	r2, r6
   e15c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   e15cc:	f000 f8ac 	bl	e1728 <__aeabi_dsub>
   e15d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e15d4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e15d8:	ec41 0b10 	vmov	d0, r0, r1
   e15dc:	e7be      	b.n	e155c <rint+0x8c>
   e15de:	ee10 0a10 	vmov	r0, s0
   e15e2:	4619      	mov	r1, r3
   e15e4:	f000 f8a2 	bl	e172c <__adddf3>
   e15e8:	ec41 0b10 	vmov	d0, r0, r1
   e15ec:	e7b6      	b.n	e155c <rint+0x8c>
   e15ee:	bf00      	nop
   e15f0:	000fffff 	.word	0x000fffff
   e15f4:	000e6c78 	.word	0x000e6c78

000e15f8 <scalbn>:
   e15f8:	ec53 2b10 	vmov	r2, r3, d0
   e15fc:	b570      	push	{r4, r5, r6, lr}
   e15fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e1602:	4619      	mov	r1, r3
   e1604:	4605      	mov	r5, r0
   e1606:	bb14      	cbnz	r4, e164e <scalbn+0x56>
   e1608:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e160c:	4311      	orrs	r1, r2
   e160e:	d02a      	beq.n	e1666 <scalbn+0x6e>
   e1610:	4619      	mov	r1, r3
   e1612:	2200      	movs	r2, #0
   e1614:	4b38      	ldr	r3, [pc, #224]	; (e16f8 <scalbn+0x100>)
   e1616:	4e39      	ldr	r6, [pc, #228]	; (e16fc <scalbn+0x104>)
   e1618:	ee10 0a10 	vmov	r0, s0
   e161c:	f000 fa38 	bl	e1a90 <__aeabi_dmul>
   e1620:	42b5      	cmp	r5, r6
   e1622:	4602      	mov	r2, r0
   e1624:	460b      	mov	r3, r1
   e1626:	db1f      	blt.n	e1668 <scalbn+0x70>
   e1628:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e162c:	3c36      	subs	r4, #54	; 0x36
   e162e:	442c      	add	r4, r5
   e1630:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e1634:	4284      	cmp	r4, r0
   e1636:	dc1f      	bgt.n	e1678 <scalbn+0x80>
   e1638:	2c00      	cmp	r4, #0
   e163a:	dd2d      	ble.n	e1698 <scalbn+0xa0>
   e163c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e1640:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e1644:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e1648:	ec43 2b10 	vmov	d0, r2, r3
   e164c:	bd70      	pop	{r4, r5, r6, pc}
   e164e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e1652:	4284      	cmp	r4, r0
   e1654:	d1eb      	bne.n	e162e <scalbn+0x36>
   e1656:	ee10 0a10 	vmov	r0, s0
   e165a:	4619      	mov	r1, r3
   e165c:	f000 f866 	bl	e172c <__adddf3>
   e1660:	ec41 0b10 	vmov	d0, r0, r1
   e1664:	bd70      	pop	{r4, r5, r6, pc}
   e1666:	bd70      	pop	{r4, r5, r6, pc}
   e1668:	a31f      	add	r3, pc, #124	; (adr r3, e16e8 <scalbn+0xf0>)
   e166a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e166e:	f000 fa0f 	bl	e1a90 <__aeabi_dmul>
   e1672:	ec41 0b10 	vmov	d0, r0, r1
   e1676:	bd70      	pop	{r4, r5, r6, pc}
   e1678:	ec43 2b11 	vmov	d1, r2, r3
   e167c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e16f0 <scalbn+0xf8>
   e1680:	f000 f840 	bl	e1704 <copysign>
   e1684:	a31a      	add	r3, pc, #104	; (adr r3, e16f0 <scalbn+0xf8>)
   e1686:	e9d3 2300 	ldrd	r2, r3, [r3]
   e168a:	ec51 0b10 	vmov	r0, r1, d0
   e168e:	f000 f9ff 	bl	e1a90 <__aeabi_dmul>
   e1692:	ec41 0b10 	vmov	d0, r0, r1
   e1696:	bd70      	pop	{r4, r5, r6, pc}
   e1698:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e169c:	da13      	bge.n	e16c6 <scalbn+0xce>
   e169e:	f24c 3150 	movw	r1, #50000	; 0xc350
   e16a2:	428d      	cmp	r5, r1
   e16a4:	ec43 2b11 	vmov	d1, r2, r3
   e16a8:	dce8      	bgt.n	e167c <scalbn+0x84>
   e16aa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e16e8 <scalbn+0xf0>
   e16ae:	f000 f829 	bl	e1704 <copysign>
   e16b2:	a30d      	add	r3, pc, #52	; (adr r3, e16e8 <scalbn+0xf0>)
   e16b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e16b8:	ec51 0b10 	vmov	r0, r1, d0
   e16bc:	f000 f9e8 	bl	e1a90 <__aeabi_dmul>
   e16c0:	ec41 0b10 	vmov	d0, r0, r1
   e16c4:	bd70      	pop	{r4, r5, r6, pc}
   e16c6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e16ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e16ce:	3436      	adds	r4, #54	; 0x36
   e16d0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e16d4:	4610      	mov	r0, r2
   e16d6:	4619      	mov	r1, r3
   e16d8:	2200      	movs	r2, #0
   e16da:	4b09      	ldr	r3, [pc, #36]	; (e1700 <scalbn+0x108>)
   e16dc:	f000 f9d8 	bl	e1a90 <__aeabi_dmul>
   e16e0:	ec41 0b10 	vmov	d0, r0, r1
   e16e4:	bd70      	pop	{r4, r5, r6, pc}
   e16e6:	bf00      	nop
   e16e8:	c2f8f359 	.word	0xc2f8f359
   e16ec:	01a56e1f 	.word	0x01a56e1f
   e16f0:	8800759c 	.word	0x8800759c
   e16f4:	7e37e43c 	.word	0x7e37e43c
   e16f8:	43500000 	.word	0x43500000
   e16fc:	ffff3cb0 	.word	0xffff3cb0
   e1700:	3c900000 	.word	0x3c900000

000e1704 <copysign>:
   e1704:	ec53 2b10 	vmov	r2, r3, d0
   e1708:	ee11 0a90 	vmov	r0, s3
   e170c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e1710:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e1714:	ea41 0300 	orr.w	r3, r1, r0
   e1718:	ec43 2b10 	vmov	d0, r2, r3
   e171c:	4770      	bx	lr
   e171e:	bf00      	nop

000e1720 <__aeabi_drsub>:
   e1720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e1724:	e002      	b.n	e172c <__adddf3>
   e1726:	bf00      	nop

000e1728 <__aeabi_dsub>:
   e1728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e172c <__adddf3>:
   e172c:	b530      	push	{r4, r5, lr}
   e172e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e1732:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e1736:	ea94 0f05 	teq	r4, r5
   e173a:	bf08      	it	eq
   e173c:	ea90 0f02 	teqeq	r0, r2
   e1740:	bf1f      	itttt	ne
   e1742:	ea54 0c00 	orrsne.w	ip, r4, r0
   e1746:	ea55 0c02 	orrsne.w	ip, r5, r2
   e174a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e174e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e1752:	f000 80e2 	beq.w	e191a <__adddf3+0x1ee>
   e1756:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e175a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e175e:	bfb8      	it	lt
   e1760:	426d      	neglt	r5, r5
   e1762:	dd0c      	ble.n	e177e <__adddf3+0x52>
   e1764:	442c      	add	r4, r5
   e1766:	ea80 0202 	eor.w	r2, r0, r2
   e176a:	ea81 0303 	eor.w	r3, r1, r3
   e176e:	ea82 0000 	eor.w	r0, r2, r0
   e1772:	ea83 0101 	eor.w	r1, r3, r1
   e1776:	ea80 0202 	eor.w	r2, r0, r2
   e177a:	ea81 0303 	eor.w	r3, r1, r3
   e177e:	2d36      	cmp	r5, #54	; 0x36
   e1780:	bf88      	it	hi
   e1782:	bd30      	pophi	{r4, r5, pc}
   e1784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e1788:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e178c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e1790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e1794:	d002      	beq.n	e179c <__adddf3+0x70>
   e1796:	4240      	negs	r0, r0
   e1798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e179c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e17a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e17a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e17a8:	d002      	beq.n	e17b0 <__adddf3+0x84>
   e17aa:	4252      	negs	r2, r2
   e17ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e17b0:	ea94 0f05 	teq	r4, r5
   e17b4:	f000 80a7 	beq.w	e1906 <__adddf3+0x1da>
   e17b8:	f1a4 0401 	sub.w	r4, r4, #1
   e17bc:	f1d5 0e20 	rsbs	lr, r5, #32
   e17c0:	db0d      	blt.n	e17de <__adddf3+0xb2>
   e17c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   e17c6:	fa22 f205 	lsr.w	r2, r2, r5
   e17ca:	1880      	adds	r0, r0, r2
   e17cc:	f141 0100 	adc.w	r1, r1, #0
   e17d0:	fa03 f20e 	lsl.w	r2, r3, lr
   e17d4:	1880      	adds	r0, r0, r2
   e17d6:	fa43 f305 	asr.w	r3, r3, r5
   e17da:	4159      	adcs	r1, r3
   e17dc:	e00e      	b.n	e17fc <__adddf3+0xd0>
   e17de:	f1a5 0520 	sub.w	r5, r5, #32
   e17e2:	f10e 0e20 	add.w	lr, lr, #32
   e17e6:	2a01      	cmp	r2, #1
   e17e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   e17ec:	bf28      	it	cs
   e17ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   e17f2:	fa43 f305 	asr.w	r3, r3, r5
   e17f6:	18c0      	adds	r0, r0, r3
   e17f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e17fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1800:	d507      	bpl.n	e1812 <__adddf3+0xe6>
   e1802:	f04f 0e00 	mov.w	lr, #0
   e1806:	f1dc 0c00 	rsbs	ip, ip, #0
   e180a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e180e:	eb6e 0101 	sbc.w	r1, lr, r1
   e1812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e1816:	d31b      	bcc.n	e1850 <__adddf3+0x124>
   e1818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e181c:	d30c      	bcc.n	e1838 <__adddf3+0x10c>
   e181e:	0849      	lsrs	r1, r1, #1
   e1820:	ea5f 0030 	movs.w	r0, r0, rrx
   e1824:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e1828:	f104 0401 	add.w	r4, r4, #1
   e182c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e1830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e1834:	f080 809a 	bcs.w	e196c <__adddf3+0x240>
   e1838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e183c:	bf08      	it	eq
   e183e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1842:	f150 0000 	adcs.w	r0, r0, #0
   e1846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e184a:	ea41 0105 	orr.w	r1, r1, r5
   e184e:	bd30      	pop	{r4, r5, pc}
   e1850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e1854:	4140      	adcs	r0, r0
   e1856:	eb41 0101 	adc.w	r1, r1, r1
   e185a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e185e:	f1a4 0401 	sub.w	r4, r4, #1
   e1862:	d1e9      	bne.n	e1838 <__adddf3+0x10c>
   e1864:	f091 0f00 	teq	r1, #0
   e1868:	bf04      	itt	eq
   e186a:	4601      	moveq	r1, r0
   e186c:	2000      	moveq	r0, #0
   e186e:	fab1 f381 	clz	r3, r1
   e1872:	bf08      	it	eq
   e1874:	3320      	addeq	r3, #32
   e1876:	f1a3 030b 	sub.w	r3, r3, #11
   e187a:	f1b3 0220 	subs.w	r2, r3, #32
   e187e:	da0c      	bge.n	e189a <__adddf3+0x16e>
   e1880:	320c      	adds	r2, #12
   e1882:	dd08      	ble.n	e1896 <__adddf3+0x16a>
   e1884:	f102 0c14 	add.w	ip, r2, #20
   e1888:	f1c2 020c 	rsb	r2, r2, #12
   e188c:	fa01 f00c 	lsl.w	r0, r1, ip
   e1890:	fa21 f102 	lsr.w	r1, r1, r2
   e1894:	e00c      	b.n	e18b0 <__adddf3+0x184>
   e1896:	f102 0214 	add.w	r2, r2, #20
   e189a:	bfd8      	it	le
   e189c:	f1c2 0c20 	rsble	ip, r2, #32
   e18a0:	fa01 f102 	lsl.w	r1, r1, r2
   e18a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   e18a8:	bfdc      	itt	le
   e18aa:	ea41 010c 	orrle.w	r1, r1, ip
   e18ae:	4090      	lslle	r0, r2
   e18b0:	1ae4      	subs	r4, r4, r3
   e18b2:	bfa2      	ittt	ge
   e18b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e18b8:	4329      	orrge	r1, r5
   e18ba:	bd30      	popge	{r4, r5, pc}
   e18bc:	ea6f 0404 	mvn.w	r4, r4
   e18c0:	3c1f      	subs	r4, #31
   e18c2:	da1c      	bge.n	e18fe <__adddf3+0x1d2>
   e18c4:	340c      	adds	r4, #12
   e18c6:	dc0e      	bgt.n	e18e6 <__adddf3+0x1ba>
   e18c8:	f104 0414 	add.w	r4, r4, #20
   e18cc:	f1c4 0220 	rsb	r2, r4, #32
   e18d0:	fa20 f004 	lsr.w	r0, r0, r4
   e18d4:	fa01 f302 	lsl.w	r3, r1, r2
   e18d8:	ea40 0003 	orr.w	r0, r0, r3
   e18dc:	fa21 f304 	lsr.w	r3, r1, r4
   e18e0:	ea45 0103 	orr.w	r1, r5, r3
   e18e4:	bd30      	pop	{r4, r5, pc}
   e18e6:	f1c4 040c 	rsb	r4, r4, #12
   e18ea:	f1c4 0220 	rsb	r2, r4, #32
   e18ee:	fa20 f002 	lsr.w	r0, r0, r2
   e18f2:	fa01 f304 	lsl.w	r3, r1, r4
   e18f6:	ea40 0003 	orr.w	r0, r0, r3
   e18fa:	4629      	mov	r1, r5
   e18fc:	bd30      	pop	{r4, r5, pc}
   e18fe:	fa21 f004 	lsr.w	r0, r1, r4
   e1902:	4629      	mov	r1, r5
   e1904:	bd30      	pop	{r4, r5, pc}
   e1906:	f094 0f00 	teq	r4, #0
   e190a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e190e:	bf06      	itte	eq
   e1910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e1914:	3401      	addeq	r4, #1
   e1916:	3d01      	subne	r5, #1
   e1918:	e74e      	b.n	e17b8 <__adddf3+0x8c>
   e191a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e191e:	bf18      	it	ne
   e1920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e1924:	d029      	beq.n	e197a <__adddf3+0x24e>
   e1926:	ea94 0f05 	teq	r4, r5
   e192a:	bf08      	it	eq
   e192c:	ea90 0f02 	teqeq	r0, r2
   e1930:	d005      	beq.n	e193e <__adddf3+0x212>
   e1932:	ea54 0c00 	orrs.w	ip, r4, r0
   e1936:	bf04      	itt	eq
   e1938:	4619      	moveq	r1, r3
   e193a:	4610      	moveq	r0, r2
   e193c:	bd30      	pop	{r4, r5, pc}
   e193e:	ea91 0f03 	teq	r1, r3
   e1942:	bf1e      	ittt	ne
   e1944:	2100      	movne	r1, #0
   e1946:	2000      	movne	r0, #0
   e1948:	bd30      	popne	{r4, r5, pc}
   e194a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e194e:	d105      	bne.n	e195c <__adddf3+0x230>
   e1950:	0040      	lsls	r0, r0, #1
   e1952:	4149      	adcs	r1, r1
   e1954:	bf28      	it	cs
   e1956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e195a:	bd30      	pop	{r4, r5, pc}
   e195c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e1960:	bf3c      	itt	cc
   e1962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e1966:	bd30      	popcc	{r4, r5, pc}
   e1968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e196c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e1970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1974:	f04f 0000 	mov.w	r0, #0
   e1978:	bd30      	pop	{r4, r5, pc}
   e197a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e197e:	bf1a      	itte	ne
   e1980:	4619      	movne	r1, r3
   e1982:	4610      	movne	r0, r2
   e1984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e1988:	bf1c      	itt	ne
   e198a:	460b      	movne	r3, r1
   e198c:	4602      	movne	r2, r0
   e198e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1992:	bf06      	itte	eq
   e1994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e1998:	ea91 0f03 	teqeq	r1, r3
   e199c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e19a0:	bd30      	pop	{r4, r5, pc}
   e19a2:	bf00      	nop

000e19a4 <__aeabi_ui2d>:
   e19a4:	f090 0f00 	teq	r0, #0
   e19a8:	bf04      	itt	eq
   e19aa:	2100      	moveq	r1, #0
   e19ac:	4770      	bxeq	lr
   e19ae:	b530      	push	{r4, r5, lr}
   e19b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e19b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e19b8:	f04f 0500 	mov.w	r5, #0
   e19bc:	f04f 0100 	mov.w	r1, #0
   e19c0:	e750      	b.n	e1864 <__adddf3+0x138>
   e19c2:	bf00      	nop

000e19c4 <__aeabi_i2d>:
   e19c4:	f090 0f00 	teq	r0, #0
   e19c8:	bf04      	itt	eq
   e19ca:	2100      	moveq	r1, #0
   e19cc:	4770      	bxeq	lr
   e19ce:	b530      	push	{r4, r5, lr}
   e19d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e19d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e19d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e19dc:	bf48      	it	mi
   e19de:	4240      	negmi	r0, r0
   e19e0:	f04f 0100 	mov.w	r1, #0
   e19e4:	e73e      	b.n	e1864 <__adddf3+0x138>
   e19e6:	bf00      	nop

000e19e8 <__aeabi_f2d>:
   e19e8:	0042      	lsls	r2, r0, #1
   e19ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e19ee:	ea4f 0131 	mov.w	r1, r1, rrx
   e19f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e19f6:	bf1f      	itttt	ne
   e19f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e19fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e1a04:	4770      	bxne	lr
   e1a06:	f092 0f00 	teq	r2, #0
   e1a0a:	bf14      	ite	ne
   e1a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1a10:	4770      	bxeq	lr
   e1a12:	b530      	push	{r4, r5, lr}
   e1a14:	f44f 7460 	mov.w	r4, #896	; 0x380
   e1a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1a20:	e720      	b.n	e1864 <__adddf3+0x138>
   e1a22:	bf00      	nop

000e1a24 <__aeabi_ul2d>:
   e1a24:	ea50 0201 	orrs.w	r2, r0, r1
   e1a28:	bf08      	it	eq
   e1a2a:	4770      	bxeq	lr
   e1a2c:	b530      	push	{r4, r5, lr}
   e1a2e:	f04f 0500 	mov.w	r5, #0
   e1a32:	e00a      	b.n	e1a4a <__aeabi_l2d+0x16>

000e1a34 <__aeabi_l2d>:
   e1a34:	ea50 0201 	orrs.w	r2, r0, r1
   e1a38:	bf08      	it	eq
   e1a3a:	4770      	bxeq	lr
   e1a3c:	b530      	push	{r4, r5, lr}
   e1a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e1a42:	d502      	bpl.n	e1a4a <__aeabi_l2d+0x16>
   e1a44:	4240      	negs	r0, r0
   e1a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e1a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e1a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e1a56:	f43f aedc 	beq.w	e1812 <__adddf3+0xe6>
   e1a5a:	f04f 0203 	mov.w	r2, #3
   e1a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1a62:	bf18      	it	ne
   e1a64:	3203      	addne	r2, #3
   e1a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1a6a:	bf18      	it	ne
   e1a6c:	3203      	addne	r2, #3
   e1a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e1a72:	f1c2 0320 	rsb	r3, r2, #32
   e1a76:	fa00 fc03 	lsl.w	ip, r0, r3
   e1a7a:	fa20 f002 	lsr.w	r0, r0, r2
   e1a7e:	fa01 fe03 	lsl.w	lr, r1, r3
   e1a82:	ea40 000e 	orr.w	r0, r0, lr
   e1a86:	fa21 f102 	lsr.w	r1, r1, r2
   e1a8a:	4414      	add	r4, r2
   e1a8c:	e6c1      	b.n	e1812 <__adddf3+0xe6>
   e1a8e:	bf00      	nop

000e1a90 <__aeabi_dmul>:
   e1a90:	b570      	push	{r4, r5, r6, lr}
   e1a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1a9e:	bf1d      	ittte	ne
   e1aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1aa4:	ea94 0f0c 	teqne	r4, ip
   e1aa8:	ea95 0f0c 	teqne	r5, ip
   e1aac:	f000 f8de 	bleq	e1c6c <__aeabi_dmul+0x1dc>
   e1ab0:	442c      	add	r4, r5
   e1ab2:	ea81 0603 	eor.w	r6, r1, r3
   e1ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e1aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e1abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e1ac2:	bf18      	it	ne
   e1ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e1ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1ad0:	d038      	beq.n	e1b44 <__aeabi_dmul+0xb4>
   e1ad2:	fba0 ce02 	umull	ip, lr, r0, r2
   e1ad6:	f04f 0500 	mov.w	r5, #0
   e1ada:	fbe1 e502 	umlal	lr, r5, r1, r2
   e1ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e1ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
   e1ae6:	f04f 0600 	mov.w	r6, #0
   e1aea:	fbe1 5603 	umlal	r5, r6, r1, r3
   e1aee:	f09c 0f00 	teq	ip, #0
   e1af2:	bf18      	it	ne
   e1af4:	f04e 0e01 	orrne.w	lr, lr, #1
   e1af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e1afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e1b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e1b04:	d204      	bcs.n	e1b10 <__aeabi_dmul+0x80>
   e1b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e1b0a:	416d      	adcs	r5, r5
   e1b0c:	eb46 0606 	adc.w	r6, r6, r6
   e1b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e1b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e1b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e1b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e1b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e1b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1b28:	bf88      	it	hi
   e1b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1b2e:	d81e      	bhi.n	e1b6e <__aeabi_dmul+0xde>
   e1b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e1b34:	bf08      	it	eq
   e1b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e1b3a:	f150 0000 	adcs.w	r0, r0, #0
   e1b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1b42:	bd70      	pop	{r4, r5, r6, pc}
   e1b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e1b48:	ea46 0101 	orr.w	r1, r6, r1
   e1b4c:	ea40 0002 	orr.w	r0, r0, r2
   e1b50:	ea81 0103 	eor.w	r1, r1, r3
   e1b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e1b58:	bfc2      	ittt	gt
   e1b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1b62:	bd70      	popgt	{r4, r5, r6, pc}
   e1b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1b68:	f04f 0e00 	mov.w	lr, #0
   e1b6c:	3c01      	subs	r4, #1
   e1b6e:	f300 80ab 	bgt.w	e1cc8 <__aeabi_dmul+0x238>
   e1b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e1b76:	bfde      	ittt	le
   e1b78:	2000      	movle	r0, #0
   e1b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e1b7e:	bd70      	pople	{r4, r5, r6, pc}
   e1b80:	f1c4 0400 	rsb	r4, r4, #0
   e1b84:	3c20      	subs	r4, #32
   e1b86:	da35      	bge.n	e1bf4 <__aeabi_dmul+0x164>
   e1b88:	340c      	adds	r4, #12
   e1b8a:	dc1b      	bgt.n	e1bc4 <__aeabi_dmul+0x134>
   e1b8c:	f104 0414 	add.w	r4, r4, #20
   e1b90:	f1c4 0520 	rsb	r5, r4, #32
   e1b94:	fa00 f305 	lsl.w	r3, r0, r5
   e1b98:	fa20 f004 	lsr.w	r0, r0, r4
   e1b9c:	fa01 f205 	lsl.w	r2, r1, r5
   e1ba0:	ea40 0002 	orr.w	r0, r0, r2
   e1ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e1ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1bb0:	fa21 f604 	lsr.w	r6, r1, r4
   e1bb4:	eb42 0106 	adc.w	r1, r2, r6
   e1bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1bbc:	bf08      	it	eq
   e1bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1bc2:	bd70      	pop	{r4, r5, r6, pc}
   e1bc4:	f1c4 040c 	rsb	r4, r4, #12
   e1bc8:	f1c4 0520 	rsb	r5, r4, #32
   e1bcc:	fa00 f304 	lsl.w	r3, r0, r4
   e1bd0:	fa20 f005 	lsr.w	r0, r0, r5
   e1bd4:	fa01 f204 	lsl.w	r2, r1, r4
   e1bd8:	ea40 0002 	orr.w	r0, r0, r2
   e1bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1be4:	f141 0100 	adc.w	r1, r1, #0
   e1be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1bec:	bf08      	it	eq
   e1bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1bf2:	bd70      	pop	{r4, r5, r6, pc}
   e1bf4:	f1c4 0520 	rsb	r5, r4, #32
   e1bf8:	fa00 f205 	lsl.w	r2, r0, r5
   e1bfc:	ea4e 0e02 	orr.w	lr, lr, r2
   e1c00:	fa20 f304 	lsr.w	r3, r0, r4
   e1c04:	fa01 f205 	lsl.w	r2, r1, r5
   e1c08:	ea43 0302 	orr.w	r3, r3, r2
   e1c0c:	fa21 f004 	lsr.w	r0, r1, r4
   e1c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1c14:	fa21 f204 	lsr.w	r2, r1, r4
   e1c18:	ea20 0002 	bic.w	r0, r0, r2
   e1c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e1c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1c24:	bf08      	it	eq
   e1c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1c2a:	bd70      	pop	{r4, r5, r6, pc}
   e1c2c:	f094 0f00 	teq	r4, #0
   e1c30:	d10f      	bne.n	e1c52 <__aeabi_dmul+0x1c2>
   e1c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e1c36:	0040      	lsls	r0, r0, #1
   e1c38:	eb41 0101 	adc.w	r1, r1, r1
   e1c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1c40:	bf08      	it	eq
   e1c42:	3c01      	subeq	r4, #1
   e1c44:	d0f7      	beq.n	e1c36 <__aeabi_dmul+0x1a6>
   e1c46:	ea41 0106 	orr.w	r1, r1, r6
   e1c4a:	f095 0f00 	teq	r5, #0
   e1c4e:	bf18      	it	ne
   e1c50:	4770      	bxne	lr
   e1c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e1c56:	0052      	lsls	r2, r2, #1
   e1c58:	eb43 0303 	adc.w	r3, r3, r3
   e1c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1c60:	bf08      	it	eq
   e1c62:	3d01      	subeq	r5, #1
   e1c64:	d0f7      	beq.n	e1c56 <__aeabi_dmul+0x1c6>
   e1c66:	ea43 0306 	orr.w	r3, r3, r6
   e1c6a:	4770      	bx	lr
   e1c6c:	ea94 0f0c 	teq	r4, ip
   e1c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1c74:	bf18      	it	ne
   e1c76:	ea95 0f0c 	teqne	r5, ip
   e1c7a:	d00c      	beq.n	e1c96 <__aeabi_dmul+0x206>
   e1c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1c80:	bf18      	it	ne
   e1c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1c86:	d1d1      	bne.n	e1c2c <__aeabi_dmul+0x19c>
   e1c88:	ea81 0103 	eor.w	r1, r1, r3
   e1c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1c90:	f04f 0000 	mov.w	r0, #0
   e1c94:	bd70      	pop	{r4, r5, r6, pc}
   e1c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1c9a:	bf06      	itte	eq
   e1c9c:	4610      	moveq	r0, r2
   e1c9e:	4619      	moveq	r1, r3
   e1ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1ca4:	d019      	beq.n	e1cda <__aeabi_dmul+0x24a>
   e1ca6:	ea94 0f0c 	teq	r4, ip
   e1caa:	d102      	bne.n	e1cb2 <__aeabi_dmul+0x222>
   e1cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1cb0:	d113      	bne.n	e1cda <__aeabi_dmul+0x24a>
   e1cb2:	ea95 0f0c 	teq	r5, ip
   e1cb6:	d105      	bne.n	e1cc4 <__aeabi_dmul+0x234>
   e1cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e1cbc:	bf1c      	itt	ne
   e1cbe:	4610      	movne	r0, r2
   e1cc0:	4619      	movne	r1, r3
   e1cc2:	d10a      	bne.n	e1cda <__aeabi_dmul+0x24a>
   e1cc4:	ea81 0103 	eor.w	r1, r1, r3
   e1cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1cd4:	f04f 0000 	mov.w	r0, #0
   e1cd8:	bd70      	pop	{r4, r5, r6, pc}
   e1cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e1ce2:	bd70      	pop	{r4, r5, r6, pc}

000e1ce4 <__aeabi_ddiv>:
   e1ce4:	b570      	push	{r4, r5, r6, lr}
   e1ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1cf2:	bf1d      	ittte	ne
   e1cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1cf8:	ea94 0f0c 	teqne	r4, ip
   e1cfc:	ea95 0f0c 	teqne	r5, ip
   e1d00:	f000 f8a7 	bleq	e1e52 <__aeabi_ddiv+0x16e>
   e1d04:	eba4 0405 	sub.w	r4, r4, r5
   e1d08:	ea81 0e03 	eor.w	lr, r1, r3
   e1d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1d14:	f000 8088 	beq.w	e1e28 <__aeabi_ddiv+0x144>
   e1d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e1d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e1d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e1d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e1d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e1d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e1d3c:	429d      	cmp	r5, r3
   e1d3e:	bf08      	it	eq
   e1d40:	4296      	cmpeq	r6, r2
   e1d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e1d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e1d4a:	d202      	bcs.n	e1d52 <__aeabi_ddiv+0x6e>
   e1d4c:	085b      	lsrs	r3, r3, #1
   e1d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1d52:	1ab6      	subs	r6, r6, r2
   e1d54:	eb65 0503 	sbc.w	r5, r5, r3
   e1d58:	085b      	lsrs	r3, r3, #1
   e1d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   e1d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e1d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e1d66:	ebb6 0e02 	subs.w	lr, r6, r2
   e1d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1d6e:	bf22      	ittt	cs
   e1d70:	1ab6      	subcs	r6, r6, r2
   e1d72:	4675      	movcs	r5, lr
   e1d74:	ea40 000c 	orrcs.w	r0, r0, ip
   e1d78:	085b      	lsrs	r3, r3, #1
   e1d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   e1d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1d86:	bf22      	ittt	cs
   e1d88:	1ab6      	subcs	r6, r6, r2
   e1d8a:	4675      	movcs	r5, lr
   e1d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e1d90:	085b      	lsrs	r3, r3, #1
   e1d92:	ea4f 0232 	mov.w	r2, r2, rrx
   e1d96:	ebb6 0e02 	subs.w	lr, r6, r2
   e1d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1d9e:	bf22      	ittt	cs
   e1da0:	1ab6      	subcs	r6, r6, r2
   e1da2:	4675      	movcs	r5, lr
   e1da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e1da8:	085b      	lsrs	r3, r3, #1
   e1daa:	ea4f 0232 	mov.w	r2, r2, rrx
   e1dae:	ebb6 0e02 	subs.w	lr, r6, r2
   e1db2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1db6:	bf22      	ittt	cs
   e1db8:	1ab6      	subcs	r6, r6, r2
   e1dba:	4675      	movcs	r5, lr
   e1dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e1dc0:	ea55 0e06 	orrs.w	lr, r5, r6
   e1dc4:	d018      	beq.n	e1df8 <__aeabi_ddiv+0x114>
   e1dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e1dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e1dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e1dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e1dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e1dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e1dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e1de2:	d1c0      	bne.n	e1d66 <__aeabi_ddiv+0x82>
   e1de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1de8:	d10b      	bne.n	e1e02 <__aeabi_ddiv+0x11e>
   e1dea:	ea41 0100 	orr.w	r1, r1, r0
   e1dee:	f04f 0000 	mov.w	r0, #0
   e1df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e1df6:	e7b6      	b.n	e1d66 <__aeabi_ddiv+0x82>
   e1df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1dfc:	bf04      	itt	eq
   e1dfe:	4301      	orreq	r1, r0
   e1e00:	2000      	moveq	r0, #0
   e1e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1e06:	bf88      	it	hi
   e1e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1e0c:	f63f aeaf 	bhi.w	e1b6e <__aeabi_dmul+0xde>
   e1e10:	ebb5 0c03 	subs.w	ip, r5, r3
   e1e14:	bf04      	itt	eq
   e1e16:	ebb6 0c02 	subseq.w	ip, r6, r2
   e1e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1e1e:	f150 0000 	adcs.w	r0, r0, #0
   e1e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1e26:	bd70      	pop	{r4, r5, r6, pc}
   e1e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e1e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e1e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e1e34:	bfc2      	ittt	gt
   e1e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1e3e:	bd70      	popgt	{r4, r5, r6, pc}
   e1e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1e44:	f04f 0e00 	mov.w	lr, #0
   e1e48:	3c01      	subs	r4, #1
   e1e4a:	e690      	b.n	e1b6e <__aeabi_dmul+0xde>
   e1e4c:	ea45 0e06 	orr.w	lr, r5, r6
   e1e50:	e68d      	b.n	e1b6e <__aeabi_dmul+0xde>
   e1e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1e56:	ea94 0f0c 	teq	r4, ip
   e1e5a:	bf08      	it	eq
   e1e5c:	ea95 0f0c 	teqeq	r5, ip
   e1e60:	f43f af3b 	beq.w	e1cda <__aeabi_dmul+0x24a>
   e1e64:	ea94 0f0c 	teq	r4, ip
   e1e68:	d10a      	bne.n	e1e80 <__aeabi_ddiv+0x19c>
   e1e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1e6e:	f47f af34 	bne.w	e1cda <__aeabi_dmul+0x24a>
   e1e72:	ea95 0f0c 	teq	r5, ip
   e1e76:	f47f af25 	bne.w	e1cc4 <__aeabi_dmul+0x234>
   e1e7a:	4610      	mov	r0, r2
   e1e7c:	4619      	mov	r1, r3
   e1e7e:	e72c      	b.n	e1cda <__aeabi_dmul+0x24a>
   e1e80:	ea95 0f0c 	teq	r5, ip
   e1e84:	d106      	bne.n	e1e94 <__aeabi_ddiv+0x1b0>
   e1e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1e8a:	f43f aefd 	beq.w	e1c88 <__aeabi_dmul+0x1f8>
   e1e8e:	4610      	mov	r0, r2
   e1e90:	4619      	mov	r1, r3
   e1e92:	e722      	b.n	e1cda <__aeabi_dmul+0x24a>
   e1e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1e98:	bf18      	it	ne
   e1e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1e9e:	f47f aec5 	bne.w	e1c2c <__aeabi_dmul+0x19c>
   e1ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e1ea6:	f47f af0d 	bne.w	e1cc4 <__aeabi_dmul+0x234>
   e1eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e1eae:	f47f aeeb 	bne.w	e1c88 <__aeabi_dmul+0x1f8>
   e1eb2:	e712      	b.n	e1cda <__aeabi_dmul+0x24a>

000e1eb4 <__gedf2>:
   e1eb4:	f04f 3cff 	mov.w	ip, #4294967295
   e1eb8:	e006      	b.n	e1ec8 <__cmpdf2+0x4>
   e1eba:	bf00      	nop

000e1ebc <__ledf2>:
   e1ebc:	f04f 0c01 	mov.w	ip, #1
   e1ec0:	e002      	b.n	e1ec8 <__cmpdf2+0x4>
   e1ec2:	bf00      	nop

000e1ec4 <__cmpdf2>:
   e1ec4:	f04f 0c01 	mov.w	ip, #1
   e1ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
   e1ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1ed8:	bf18      	it	ne
   e1eda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e1ede:	d01b      	beq.n	e1f18 <__cmpdf2+0x54>
   e1ee0:	b001      	add	sp, #4
   e1ee2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e1ee6:	bf0c      	ite	eq
   e1ee8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e1eec:	ea91 0f03 	teqne	r1, r3
   e1ef0:	bf02      	ittt	eq
   e1ef2:	ea90 0f02 	teqeq	r0, r2
   e1ef6:	2000      	moveq	r0, #0
   e1ef8:	4770      	bxeq	lr
   e1efa:	f110 0f00 	cmn.w	r0, #0
   e1efe:	ea91 0f03 	teq	r1, r3
   e1f02:	bf58      	it	pl
   e1f04:	4299      	cmppl	r1, r3
   e1f06:	bf08      	it	eq
   e1f08:	4290      	cmpeq	r0, r2
   e1f0a:	bf2c      	ite	cs
   e1f0c:	17d8      	asrcs	r0, r3, #31
   e1f0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e1f12:	f040 0001 	orr.w	r0, r0, #1
   e1f16:	4770      	bx	lr
   e1f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1f20:	d102      	bne.n	e1f28 <__cmpdf2+0x64>
   e1f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e1f26:	d107      	bne.n	e1f38 <__cmpdf2+0x74>
   e1f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1f30:	d1d6      	bne.n	e1ee0 <__cmpdf2+0x1c>
   e1f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1f36:	d0d3      	beq.n	e1ee0 <__cmpdf2+0x1c>
   e1f38:	f85d 0b04 	ldr.w	r0, [sp], #4
   e1f3c:	4770      	bx	lr
   e1f3e:	bf00      	nop

000e1f40 <__aeabi_cdrcmple>:
   e1f40:	4684      	mov	ip, r0
   e1f42:	4610      	mov	r0, r2
   e1f44:	4662      	mov	r2, ip
   e1f46:	468c      	mov	ip, r1
   e1f48:	4619      	mov	r1, r3
   e1f4a:	4663      	mov	r3, ip
   e1f4c:	e000      	b.n	e1f50 <__aeabi_cdcmpeq>
   e1f4e:	bf00      	nop

000e1f50 <__aeabi_cdcmpeq>:
   e1f50:	b501      	push	{r0, lr}
   e1f52:	f7ff ffb7 	bl	e1ec4 <__cmpdf2>
   e1f56:	2800      	cmp	r0, #0
   e1f58:	bf48      	it	mi
   e1f5a:	f110 0f00 	cmnmi.w	r0, #0
   e1f5e:	bd01      	pop	{r0, pc}

000e1f60 <__aeabi_dcmpeq>:
   e1f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1f64:	f7ff fff4 	bl	e1f50 <__aeabi_cdcmpeq>
   e1f68:	bf0c      	ite	eq
   e1f6a:	2001      	moveq	r0, #1
   e1f6c:	2000      	movne	r0, #0
   e1f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   e1f72:	bf00      	nop

000e1f74 <__aeabi_dcmplt>:
   e1f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1f78:	f7ff ffea 	bl	e1f50 <__aeabi_cdcmpeq>
   e1f7c:	bf34      	ite	cc
   e1f7e:	2001      	movcc	r0, #1
   e1f80:	2000      	movcs	r0, #0
   e1f82:	f85d fb08 	ldr.w	pc, [sp], #8
   e1f86:	bf00      	nop

000e1f88 <__aeabi_dcmple>:
   e1f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1f8c:	f7ff ffe0 	bl	e1f50 <__aeabi_cdcmpeq>
   e1f90:	bf94      	ite	ls
   e1f92:	2001      	movls	r0, #1
   e1f94:	2000      	movhi	r0, #0
   e1f96:	f85d fb08 	ldr.w	pc, [sp], #8
   e1f9a:	bf00      	nop

000e1f9c <__aeabi_dcmpge>:
   e1f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1fa0:	f7ff ffce 	bl	e1f40 <__aeabi_cdrcmple>
   e1fa4:	bf94      	ite	ls
   e1fa6:	2001      	movls	r0, #1
   e1fa8:	2000      	movhi	r0, #0
   e1faa:	f85d fb08 	ldr.w	pc, [sp], #8
   e1fae:	bf00      	nop

000e1fb0 <__aeabi_dcmpgt>:
   e1fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1fb4:	f7ff ffc4 	bl	e1f40 <__aeabi_cdrcmple>
   e1fb8:	bf34      	ite	cc
   e1fba:	2001      	movcc	r0, #1
   e1fbc:	2000      	movcs	r0, #0
   e1fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   e1fc2:	bf00      	nop

000e1fc4 <__aeabi_dcmpun>:
   e1fc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1fcc:	d102      	bne.n	e1fd4 <__aeabi_dcmpun+0x10>
   e1fce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e1fd2:	d10a      	bne.n	e1fea <__aeabi_dcmpun+0x26>
   e1fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1fdc:	d102      	bne.n	e1fe4 <__aeabi_dcmpun+0x20>
   e1fde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1fe2:	d102      	bne.n	e1fea <__aeabi_dcmpun+0x26>
   e1fe4:	f04f 0000 	mov.w	r0, #0
   e1fe8:	4770      	bx	lr
   e1fea:	f04f 0001 	mov.w	r0, #1
   e1fee:	4770      	bx	lr

000e1ff0 <__aeabi_d2iz>:
   e1ff0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1ff4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1ff8:	d215      	bcs.n	e2026 <__aeabi_d2iz+0x36>
   e1ffa:	d511      	bpl.n	e2020 <__aeabi_d2iz+0x30>
   e1ffc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e2000:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e2004:	d912      	bls.n	e202c <__aeabi_d2iz+0x3c>
   e2006:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e200a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e200e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e2012:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e2016:	fa23 f002 	lsr.w	r0, r3, r2
   e201a:	bf18      	it	ne
   e201c:	4240      	negne	r0, r0
   e201e:	4770      	bx	lr
   e2020:	f04f 0000 	mov.w	r0, #0
   e2024:	4770      	bx	lr
   e2026:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e202a:	d105      	bne.n	e2038 <__aeabi_d2iz+0x48>
   e202c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e2030:	bf08      	it	eq
   e2032:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e2036:	4770      	bx	lr
   e2038:	f04f 0000 	mov.w	r0, #0
   e203c:	4770      	bx	lr
   e203e:	bf00      	nop

000e2040 <__aeabi_d2uiz>:
   e2040:	004a      	lsls	r2, r1, #1
   e2042:	d211      	bcs.n	e2068 <__aeabi_d2uiz+0x28>
   e2044:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e2048:	d211      	bcs.n	e206e <__aeabi_d2uiz+0x2e>
   e204a:	d50d      	bpl.n	e2068 <__aeabi_d2uiz+0x28>
   e204c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e2050:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e2054:	d40e      	bmi.n	e2074 <__aeabi_d2uiz+0x34>
   e2056:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e205a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e205e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e2062:	fa23 f002 	lsr.w	r0, r3, r2
   e2066:	4770      	bx	lr
   e2068:	f04f 0000 	mov.w	r0, #0
   e206c:	4770      	bx	lr
   e206e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e2072:	d102      	bne.n	e207a <__aeabi_d2uiz+0x3a>
   e2074:	f04f 30ff 	mov.w	r0, #4294967295
   e2078:	4770      	bx	lr
   e207a:	f04f 0000 	mov.w	r0, #0
   e207e:	4770      	bx	lr

000e2080 <__aeabi_d2f>:
   e2080:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e2084:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e2088:	bf24      	itt	cs
   e208a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e208e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e2092:	d90d      	bls.n	e20b0 <__aeabi_d2f+0x30>
   e2094:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e2098:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e209c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e20a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e20a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e20a8:	bf08      	it	eq
   e20aa:	f020 0001 	biceq.w	r0, r0, #1
   e20ae:	4770      	bx	lr
   e20b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e20b4:	d121      	bne.n	e20fa <__aeabi_d2f+0x7a>
   e20b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e20ba:	bfbc      	itt	lt
   e20bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e20c0:	4770      	bxlt	lr
   e20c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e20c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e20ca:	f1c2 0218 	rsb	r2, r2, #24
   e20ce:	f1c2 0c20 	rsb	ip, r2, #32
   e20d2:	fa10 f30c 	lsls.w	r3, r0, ip
   e20d6:	fa20 f002 	lsr.w	r0, r0, r2
   e20da:	bf18      	it	ne
   e20dc:	f040 0001 	orrne.w	r0, r0, #1
   e20e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e20e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e20e8:	fa03 fc0c 	lsl.w	ip, r3, ip
   e20ec:	ea40 000c 	orr.w	r0, r0, ip
   e20f0:	fa23 f302 	lsr.w	r3, r3, r2
   e20f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e20f8:	e7cc      	b.n	e2094 <__aeabi_d2f+0x14>
   e20fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e20fe:	d107      	bne.n	e2110 <__aeabi_d2f+0x90>
   e2100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e2104:	bf1e      	ittt	ne
   e2106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e210a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e210e:	4770      	bxne	lr
   e2110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e2114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e2118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e211c:	4770      	bx	lr
   e211e:	bf00      	nop

000e2120 <asctime>:
   e2120:	4b09      	ldr	r3, [pc, #36]	; (e2148 <asctime+0x28>)
   e2122:	b570      	push	{r4, r5, r6, lr}
   e2124:	681c      	ldr	r4, [r3, #0]
   e2126:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e2128:	4606      	mov	r6, r0
   e212a:	b93d      	cbnz	r5, e213c <asctime+0x1c>
   e212c:	201a      	movs	r0, #26
   e212e:	f7f7 fc01 	bl	d9934 <malloc>
   e2132:	221a      	movs	r2, #26
   e2134:	6420      	str	r0, [r4, #64]	; 0x40
   e2136:	4629      	mov	r1, r5
   e2138:	f000 f94f 	bl	e23da <memset>
   e213c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e213e:	4630      	mov	r0, r6
   e2140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e2144:	f000 b802 	b.w	e214c <asctime_r>
   e2148:	2003d628 	.word	0x2003d628

000e214c <asctime_r>:
   e214c:	b510      	push	{r4, lr}
   e214e:	460c      	mov	r4, r1
   e2150:	6941      	ldr	r1, [r0, #20]
   e2152:	6903      	ldr	r3, [r0, #16]
   e2154:	6982      	ldr	r2, [r0, #24]
   e2156:	b086      	sub	sp, #24
   e2158:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e215c:	9104      	str	r1, [sp, #16]
   e215e:	6801      	ldr	r1, [r0, #0]
   e2160:	9103      	str	r1, [sp, #12]
   e2162:	6841      	ldr	r1, [r0, #4]
   e2164:	9102      	str	r1, [sp, #8]
   e2166:	6881      	ldr	r1, [r0, #8]
   e2168:	9101      	str	r1, [sp, #4]
   e216a:	68c1      	ldr	r1, [r0, #12]
   e216c:	9100      	str	r1, [sp, #0]
   e216e:	4907      	ldr	r1, [pc, #28]	; (e218c <asctime_r+0x40>)
   e2170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e2174:	440b      	add	r3, r1
   e2176:	4906      	ldr	r1, [pc, #24]	; (e2190 <asctime_r+0x44>)
   e2178:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e217c:	440a      	add	r2, r1
   e217e:	4620      	mov	r0, r4
   e2180:	4904      	ldr	r1, [pc, #16]	; (e2194 <asctime_r+0x48>)
   e2182:	f7f7 fbef 	bl	d9964 <siprintf>
   e2186:	4620      	mov	r0, r4
   e2188:	b006      	add	sp, #24
   e218a:	bd10      	pop	{r4, pc}
   e218c:	000e6c9d 	.word	0x000e6c9d
   e2190:	000e6c88 	.word	0x000e6c88
   e2194:	000e6cc1 	.word	0x000e6cc1

000e2198 <atof>:
   e2198:	2100      	movs	r1, #0
   e219a:	f001 bf2d 	b.w	e3ff8 <strtod>

000e219e <atoi>:
   e219e:	220a      	movs	r2, #10
   e21a0:	2100      	movs	r1, #0
   e21a2:	f001 bfb7 	b.w	e4114 <strtol>

000e21a6 <atol>:
   e21a6:	220a      	movs	r2, #10
   e21a8:	2100      	movs	r1, #0
   e21aa:	f001 bfb3 	b.w	e4114 <strtol>
	...

000e21b0 <__cxa_atexit>:
   e21b0:	b510      	push	{r4, lr}
   e21b2:	4c05      	ldr	r4, [pc, #20]	; (e21c8 <__cxa_atexit+0x18>)
   e21b4:	4613      	mov	r3, r2
   e21b6:	b12c      	cbz	r4, e21c4 <__cxa_atexit+0x14>
   e21b8:	460a      	mov	r2, r1
   e21ba:	4601      	mov	r1, r0
   e21bc:	2002      	movs	r0, #2
   e21be:	f3af 8000 	nop.w
   e21c2:	bd10      	pop	{r4, pc}
   e21c4:	4620      	mov	r0, r4
   e21c6:	bd10      	pop	{r4, pc}
   e21c8:	00000000 	.word	0x00000000

000e21cc <localtime>:
   e21cc:	b538      	push	{r3, r4, r5, lr}
   e21ce:	4b07      	ldr	r3, [pc, #28]	; (e21ec <localtime+0x20>)
   e21d0:	681c      	ldr	r4, [r3, #0]
   e21d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e21d4:	4605      	mov	r5, r0
   e21d6:	b91b      	cbnz	r3, e21e0 <localtime+0x14>
   e21d8:	2024      	movs	r0, #36	; 0x24
   e21da:	f7f7 fbab 	bl	d9934 <malloc>
   e21de:	63e0      	str	r0, [r4, #60]	; 0x3c
   e21e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e21e2:	4628      	mov	r0, r5
   e21e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e21e8:	f000 b802 	b.w	e21f0 <localtime_r>
   e21ec:	2003d628 	.word	0x2003d628

000e21f0 <localtime_r>:
   e21f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e21f4:	460c      	mov	r4, r1
   e21f6:	4680      	mov	r8, r0
   e21f8:	f002 fde4 	bl	e4dc4 <__gettzinfo>
   e21fc:	4621      	mov	r1, r4
   e21fe:	4607      	mov	r7, r0
   e2200:	4640      	mov	r0, r8
   e2202:	f002 fde3 	bl	e4dcc <gmtime_r>
   e2206:	6946      	ldr	r6, [r0, #20]
   e2208:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e220c:	07b3      	lsls	r3, r6, #30
   e220e:	4604      	mov	r4, r0
   e2210:	d105      	bne.n	e221e <localtime_r+0x2e>
   e2212:	2264      	movs	r2, #100	; 0x64
   e2214:	fb96 f3f2 	sdiv	r3, r6, r2
   e2218:	fb02 6313 	mls	r3, r2, r3, r6
   e221c:	b94b      	cbnz	r3, e2232 <localtime_r+0x42>
   e221e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e2222:	fb96 f3f5 	sdiv	r3, r6, r5
   e2226:	fb05 6513 	mls	r5, r5, r3, r6
   e222a:	fab5 f385 	clz	r3, r5
   e222e:	095b      	lsrs	r3, r3, #5
   e2230:	e000      	b.n	e2234 <localtime_r+0x44>
   e2232:	2301      	movs	r3, #1
   e2234:	4a5f      	ldr	r2, [pc, #380]	; (e23b4 <localtime_r+0x1c4>)
   e2236:	2530      	movs	r5, #48	; 0x30
   e2238:	fb05 2503 	mla	r5, r5, r3, r2
   e223c:	f002 f8c0 	bl	e43c0 <__tz_lock>
   e2240:	f002 f8c0 	bl	e43c4 <_tzset_unlocked>
   e2244:	4b5c      	ldr	r3, [pc, #368]	; (e23b8 <localtime_r+0x1c8>)
   e2246:	681b      	ldr	r3, [r3, #0]
   e2248:	b1f3      	cbz	r3, e2288 <localtime_r+0x98>
   e224a:	687b      	ldr	r3, [r7, #4]
   e224c:	429e      	cmp	r6, r3
   e224e:	d105      	bne.n	e225c <localtime_r+0x6c>
   e2250:	6839      	ldr	r1, [r7, #0]
   e2252:	f8d8 3000 	ldr.w	r3, [r8]
   e2256:	69fa      	ldr	r2, [r7, #28]
   e2258:	b941      	cbnz	r1, e226c <localtime_r+0x7c>
   e225a:	e00a      	b.n	e2272 <localtime_r+0x82>
   e225c:	4630      	mov	r0, r6
   e225e:	f002 f807 	bl	e4270 <__tzcalc_limits>
   e2262:	2800      	cmp	r0, #0
   e2264:	d1f4      	bne.n	e2250 <localtime_r+0x60>
   e2266:	f04f 33ff 	mov.w	r3, #4294967295
   e226a:	e00d      	b.n	e2288 <localtime_r+0x98>
   e226c:	4293      	cmp	r3, r2
   e226e:	db08      	blt.n	e2282 <localtime_r+0x92>
   e2270:	e001      	b.n	e2276 <localtime_r+0x86>
   e2272:	4293      	cmp	r3, r2
   e2274:	da07      	bge.n	e2286 <localtime_r+0x96>
   e2276:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e2278:	4293      	cmp	r3, r2
   e227a:	bfac      	ite	ge
   e227c:	2300      	movge	r3, #0
   e227e:	2301      	movlt	r3, #1
   e2280:	e002      	b.n	e2288 <localtime_r+0x98>
   e2282:	2300      	movs	r3, #0
   e2284:	e000      	b.n	e2288 <localtime_r+0x98>
   e2286:	2301      	movs	r3, #1
   e2288:	6223      	str	r3, [r4, #32]
   e228a:	6a23      	ldr	r3, [r4, #32]
   e228c:	2b01      	cmp	r3, #1
   e228e:	bf0c      	ite	eq
   e2290:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e2292:	6a39      	ldrne	r1, [r7, #32]
   e2294:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e2298:	203c      	movs	r0, #60	; 0x3c
   e229a:	fb91 f6f3 	sdiv	r6, r1, r3
   e229e:	fb03 1316 	mls	r3, r3, r6, r1
   e22a2:	6861      	ldr	r1, [r4, #4]
   e22a4:	fb93 f2f0 	sdiv	r2, r3, r0
   e22a8:	fb00 3012 	mls	r0, r0, r2, r3
   e22ac:	6823      	ldr	r3, [r4, #0]
   e22ae:	1a89      	subs	r1, r1, r2
   e22b0:	68a2      	ldr	r2, [r4, #8]
   e22b2:	6061      	str	r1, [r4, #4]
   e22b4:	1a1b      	subs	r3, r3, r0
   e22b6:	1b92      	subs	r2, r2, r6
   e22b8:	2b3b      	cmp	r3, #59	; 0x3b
   e22ba:	6023      	str	r3, [r4, #0]
   e22bc:	60a2      	str	r2, [r4, #8]
   e22be:	dd03      	ble.n	e22c8 <localtime_r+0xd8>
   e22c0:	3101      	adds	r1, #1
   e22c2:	6061      	str	r1, [r4, #4]
   e22c4:	3b3c      	subs	r3, #60	; 0x3c
   e22c6:	e004      	b.n	e22d2 <localtime_r+0xe2>
   e22c8:	2b00      	cmp	r3, #0
   e22ca:	da03      	bge.n	e22d4 <localtime_r+0xe4>
   e22cc:	3901      	subs	r1, #1
   e22ce:	6061      	str	r1, [r4, #4]
   e22d0:	333c      	adds	r3, #60	; 0x3c
   e22d2:	6023      	str	r3, [r4, #0]
   e22d4:	6863      	ldr	r3, [r4, #4]
   e22d6:	2b3b      	cmp	r3, #59	; 0x3b
   e22d8:	dd03      	ble.n	e22e2 <localtime_r+0xf2>
   e22da:	3201      	adds	r2, #1
   e22dc:	60a2      	str	r2, [r4, #8]
   e22de:	3b3c      	subs	r3, #60	; 0x3c
   e22e0:	e004      	b.n	e22ec <localtime_r+0xfc>
   e22e2:	2b00      	cmp	r3, #0
   e22e4:	da03      	bge.n	e22ee <localtime_r+0xfe>
   e22e6:	3a01      	subs	r2, #1
   e22e8:	60a2      	str	r2, [r4, #8]
   e22ea:	333c      	adds	r3, #60	; 0x3c
   e22ec:	6063      	str	r3, [r4, #4]
   e22ee:	68a3      	ldr	r3, [r4, #8]
   e22f0:	2b17      	cmp	r3, #23
   e22f2:	dd22      	ble.n	e233a <localtime_r+0x14a>
   e22f4:	69e2      	ldr	r2, [r4, #28]
   e22f6:	3201      	adds	r2, #1
   e22f8:	61e2      	str	r2, [r4, #28]
   e22fa:	69a2      	ldr	r2, [r4, #24]
   e22fc:	3201      	adds	r2, #1
   e22fe:	2a06      	cmp	r2, #6
   e2300:	bfc8      	it	gt
   e2302:	2200      	movgt	r2, #0
   e2304:	61a2      	str	r2, [r4, #24]
   e2306:	68e2      	ldr	r2, [r4, #12]
   e2308:	3b18      	subs	r3, #24
   e230a:	3201      	adds	r2, #1
   e230c:	60a3      	str	r3, [r4, #8]
   e230e:	6923      	ldr	r3, [r4, #16]
   e2310:	60e2      	str	r2, [r4, #12]
   e2312:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e2316:	428a      	cmp	r2, r1
   e2318:	dd46      	ble.n	e23a8 <localtime_r+0x1b8>
   e231a:	3301      	adds	r3, #1
   e231c:	2b0c      	cmp	r3, #12
   e231e:	bf0c      	ite	eq
   e2320:	6963      	ldreq	r3, [r4, #20]
   e2322:	6123      	strne	r3, [r4, #16]
   e2324:	eba2 0201 	sub.w	r2, r2, r1
   e2328:	60e2      	str	r2, [r4, #12]
   e232a:	bf01      	itttt	eq
   e232c:	3301      	addeq	r3, #1
   e232e:	2200      	moveq	r2, #0
   e2330:	6122      	streq	r2, [r4, #16]
   e2332:	6163      	streq	r3, [r4, #20]
   e2334:	bf08      	it	eq
   e2336:	61e2      	streq	r2, [r4, #28]
   e2338:	e036      	b.n	e23a8 <localtime_r+0x1b8>
   e233a:	2b00      	cmp	r3, #0
   e233c:	da34      	bge.n	e23a8 <localtime_r+0x1b8>
   e233e:	69e2      	ldr	r2, [r4, #28]
   e2340:	3a01      	subs	r2, #1
   e2342:	61e2      	str	r2, [r4, #28]
   e2344:	69a2      	ldr	r2, [r4, #24]
   e2346:	3a01      	subs	r2, #1
   e2348:	bf48      	it	mi
   e234a:	2206      	movmi	r2, #6
   e234c:	61a2      	str	r2, [r4, #24]
   e234e:	68e2      	ldr	r2, [r4, #12]
   e2350:	3318      	adds	r3, #24
   e2352:	3a01      	subs	r2, #1
   e2354:	60e2      	str	r2, [r4, #12]
   e2356:	60a3      	str	r3, [r4, #8]
   e2358:	bb32      	cbnz	r2, e23a8 <localtime_r+0x1b8>
   e235a:	6923      	ldr	r3, [r4, #16]
   e235c:	3b01      	subs	r3, #1
   e235e:	d401      	bmi.n	e2364 <localtime_r+0x174>
   e2360:	6123      	str	r3, [r4, #16]
   e2362:	e01d      	b.n	e23a0 <localtime_r+0x1b0>
   e2364:	230b      	movs	r3, #11
   e2366:	6123      	str	r3, [r4, #16]
   e2368:	6963      	ldr	r3, [r4, #20]
   e236a:	1e5a      	subs	r2, r3, #1
   e236c:	f012 0f03 	tst.w	r2, #3
   e2370:	6162      	str	r2, [r4, #20]
   e2372:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e2376:	d105      	bne.n	e2384 <localtime_r+0x194>
   e2378:	2164      	movs	r1, #100	; 0x64
   e237a:	fb93 f2f1 	sdiv	r2, r3, r1
   e237e:	fb01 3212 	mls	r2, r1, r2, r3
   e2382:	b94a      	cbnz	r2, e2398 <localtime_r+0x1a8>
   e2384:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e2388:	fb93 f2f1 	sdiv	r2, r3, r1
   e238c:	fb01 3312 	mls	r3, r1, r2, r3
   e2390:	fab3 f383 	clz	r3, r3
   e2394:	095b      	lsrs	r3, r3, #5
   e2396:	e000      	b.n	e239a <localtime_r+0x1aa>
   e2398:	2301      	movs	r3, #1
   e239a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e239e:	61e3      	str	r3, [r4, #28]
   e23a0:	6923      	ldr	r3, [r4, #16]
   e23a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e23a6:	60e3      	str	r3, [r4, #12]
   e23a8:	f002 f80b 	bl	e43c2 <__tz_unlock>
   e23ac:	4620      	mov	r0, r4
   e23ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e23b2:	bf00      	nop
   e23b4:	000e6eac 	.word	0x000e6eac
   e23b8:	2003e7e4 	.word	0x2003e7e4

000e23bc <_localeconv_r>:
   e23bc:	4800      	ldr	r0, [pc, #0]	; (e23c0 <_localeconv_r+0x4>)
   e23be:	4770      	bx	lr
   e23c0:	2003d62c 	.word	0x2003d62c

000e23c4 <memcpy>:
   e23c4:	b510      	push	{r4, lr}
   e23c6:	1e43      	subs	r3, r0, #1
   e23c8:	440a      	add	r2, r1
   e23ca:	4291      	cmp	r1, r2
   e23cc:	d004      	beq.n	e23d8 <memcpy+0x14>
   e23ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   e23d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   e23d6:	e7f8      	b.n	e23ca <memcpy+0x6>
   e23d8:	bd10      	pop	{r4, pc}

000e23da <memset>:
   e23da:	4402      	add	r2, r0
   e23dc:	4603      	mov	r3, r0
   e23de:	4293      	cmp	r3, r2
   e23e0:	d002      	beq.n	e23e8 <memset+0xe>
   e23e2:	f803 1b01 	strb.w	r1, [r3], #1
   e23e6:	e7fa      	b.n	e23de <memset+0x4>
   e23e8:	4770      	bx	lr
	...

000e23ec <validate_structure>:
   e23ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e23ee:	6801      	ldr	r1, [r0, #0]
   e23f0:	293b      	cmp	r1, #59	; 0x3b
   e23f2:	4604      	mov	r4, r0
   e23f4:	d911      	bls.n	e241a <validate_structure+0x2e>
   e23f6:	223c      	movs	r2, #60	; 0x3c
   e23f8:	4668      	mov	r0, sp
   e23fa:	f002 f96d 	bl	e46d8 <div>
   e23fe:	9a01      	ldr	r2, [sp, #4]
   e2400:	6863      	ldr	r3, [r4, #4]
   e2402:	9900      	ldr	r1, [sp, #0]
   e2404:	2a00      	cmp	r2, #0
   e2406:	440b      	add	r3, r1
   e2408:	6063      	str	r3, [r4, #4]
   e240a:	bfbb      	ittet	lt
   e240c:	323c      	addlt	r2, #60	; 0x3c
   e240e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e2412:	6022      	strge	r2, [r4, #0]
   e2414:	6022      	strlt	r2, [r4, #0]
   e2416:	bfb8      	it	lt
   e2418:	6063      	strlt	r3, [r4, #4]
   e241a:	6861      	ldr	r1, [r4, #4]
   e241c:	293b      	cmp	r1, #59	; 0x3b
   e241e:	d911      	bls.n	e2444 <validate_structure+0x58>
   e2420:	223c      	movs	r2, #60	; 0x3c
   e2422:	4668      	mov	r0, sp
   e2424:	f002 f958 	bl	e46d8 <div>
   e2428:	9a01      	ldr	r2, [sp, #4]
   e242a:	68a1      	ldr	r1, [r4, #8]
   e242c:	9b00      	ldr	r3, [sp, #0]
   e242e:	2a00      	cmp	r2, #0
   e2430:	440b      	add	r3, r1
   e2432:	60a3      	str	r3, [r4, #8]
   e2434:	bfbb      	ittet	lt
   e2436:	323c      	addlt	r2, #60	; 0x3c
   e2438:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e243c:	6062      	strge	r2, [r4, #4]
   e243e:	6062      	strlt	r2, [r4, #4]
   e2440:	bfb8      	it	lt
   e2442:	60a3      	strlt	r3, [r4, #8]
   e2444:	68a1      	ldr	r1, [r4, #8]
   e2446:	2917      	cmp	r1, #23
   e2448:	d911      	bls.n	e246e <validate_structure+0x82>
   e244a:	2218      	movs	r2, #24
   e244c:	4668      	mov	r0, sp
   e244e:	f002 f943 	bl	e46d8 <div>
   e2452:	9a01      	ldr	r2, [sp, #4]
   e2454:	68e1      	ldr	r1, [r4, #12]
   e2456:	9b00      	ldr	r3, [sp, #0]
   e2458:	2a00      	cmp	r2, #0
   e245a:	440b      	add	r3, r1
   e245c:	60e3      	str	r3, [r4, #12]
   e245e:	bfbb      	ittet	lt
   e2460:	3218      	addlt	r2, #24
   e2462:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e2466:	60a2      	strge	r2, [r4, #8]
   e2468:	60a2      	strlt	r2, [r4, #8]
   e246a:	bfb8      	it	lt
   e246c:	60e3      	strlt	r3, [r4, #12]
   e246e:	6921      	ldr	r1, [r4, #16]
   e2470:	290b      	cmp	r1, #11
   e2472:	d911      	bls.n	e2498 <validate_structure+0xac>
   e2474:	220c      	movs	r2, #12
   e2476:	4668      	mov	r0, sp
   e2478:	f002 f92e 	bl	e46d8 <div>
   e247c:	9a01      	ldr	r2, [sp, #4]
   e247e:	6961      	ldr	r1, [r4, #20]
   e2480:	9b00      	ldr	r3, [sp, #0]
   e2482:	2a00      	cmp	r2, #0
   e2484:	440b      	add	r3, r1
   e2486:	6163      	str	r3, [r4, #20]
   e2488:	bfbb      	ittet	lt
   e248a:	320c      	addlt	r2, #12
   e248c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e2490:	6122      	strge	r2, [r4, #16]
   e2492:	6122      	strlt	r2, [r4, #16]
   e2494:	bfb8      	it	lt
   e2496:	6163      	strlt	r3, [r4, #20]
   e2498:	6963      	ldr	r3, [r4, #20]
   e249a:	0799      	lsls	r1, r3, #30
   e249c:	d112      	bne.n	e24c4 <validate_structure+0xd8>
   e249e:	2164      	movs	r1, #100	; 0x64
   e24a0:	fb93 f2f1 	sdiv	r2, r3, r1
   e24a4:	fb01 3212 	mls	r2, r1, r2, r3
   e24a8:	b972      	cbnz	r2, e24c8 <validate_structure+0xdc>
   e24aa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e24ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e24b2:	fb93 f2f1 	sdiv	r2, r3, r1
   e24b6:	fb01 3312 	mls	r3, r1, r2, r3
   e24ba:	2b00      	cmp	r3, #0
   e24bc:	bf14      	ite	ne
   e24be:	231c      	movne	r3, #28
   e24c0:	231d      	moveq	r3, #29
   e24c2:	e002      	b.n	e24ca <validate_structure+0xde>
   e24c4:	231c      	movs	r3, #28
   e24c6:	e000      	b.n	e24ca <validate_structure+0xde>
   e24c8:	231d      	movs	r3, #29
   e24ca:	68e2      	ldr	r2, [r4, #12]
   e24cc:	2a00      	cmp	r2, #0
   e24ce:	dd06      	ble.n	e24de <validate_structure+0xf2>
   e24d0:	4f33      	ldr	r7, [pc, #204]	; (e25a0 <validate_structure+0x1b4>)
   e24d2:	f04f 0e00 	mov.w	lr, #0
   e24d6:	2564      	movs	r5, #100	; 0x64
   e24d8:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e24dc:	e039      	b.n	e2552 <validate_structure+0x166>
   e24de:	4f30      	ldr	r7, [pc, #192]	; (e25a0 <validate_structure+0x1b4>)
   e24e0:	260b      	movs	r6, #11
   e24e2:	2064      	movs	r0, #100	; 0x64
   e24e4:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e24e8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e24ec:	f1be 0f00 	cmp.w	lr, #0
   e24f0:	dc53      	bgt.n	e259a <validate_structure+0x1ae>
   e24f2:	6921      	ldr	r1, [r4, #16]
   e24f4:	3901      	subs	r1, #1
   e24f6:	6121      	str	r1, [r4, #16]
   e24f8:	3101      	adds	r1, #1
   e24fa:	d118      	bne.n	e252e <validate_structure+0x142>
   e24fc:	6963      	ldr	r3, [r4, #20]
   e24fe:	6126      	str	r6, [r4, #16]
   e2500:	1e59      	subs	r1, r3, #1
   e2502:	078a      	lsls	r2, r1, #30
   e2504:	6161      	str	r1, [r4, #20]
   e2506:	d10f      	bne.n	e2528 <validate_structure+0x13c>
   e2508:	fb91 f2f0 	sdiv	r2, r1, r0
   e250c:	fb00 1112 	mls	r1, r0, r2, r1
   e2510:	b961      	cbnz	r1, e252c <validate_structure+0x140>
   e2512:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e2516:	fb93 f2f5 	sdiv	r2, r3, r5
   e251a:	fb05 3312 	mls	r3, r5, r2, r3
   e251e:	2b00      	cmp	r3, #0
   e2520:	bf14      	ite	ne
   e2522:	231c      	movne	r3, #28
   e2524:	231d      	moveq	r3, #29
   e2526:	e002      	b.n	e252e <validate_structure+0x142>
   e2528:	231c      	movs	r3, #28
   e252a:	e000      	b.n	e252e <validate_structure+0x142>
   e252c:	231d      	movs	r3, #29
   e252e:	6922      	ldr	r2, [r4, #16]
   e2530:	2a01      	cmp	r2, #1
   e2532:	bf14      	ite	ne
   e2534:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e2538:	461a      	moveq	r2, r3
   e253a:	4472      	add	r2, lr
   e253c:	60e2      	str	r2, [r4, #12]
   e253e:	e7d3      	b.n	e24e8 <validate_structure+0xfc>
   e2540:	428b      	cmp	r3, r1
   e2542:	da2a      	bge.n	e259a <validate_structure+0x1ae>
   e2544:	4618      	mov	r0, r3
   e2546:	3201      	adds	r2, #1
   e2548:	1a09      	subs	r1, r1, r0
   e254a:	2a0c      	cmp	r2, #12
   e254c:	60e1      	str	r1, [r4, #12]
   e254e:	6122      	str	r2, [r4, #16]
   e2550:	d008      	beq.n	e2564 <validate_structure+0x178>
   e2552:	6922      	ldr	r2, [r4, #16]
   e2554:	68e1      	ldr	r1, [r4, #12]
   e2556:	2a01      	cmp	r2, #1
   e2558:	d0f2      	beq.n	e2540 <validate_structure+0x154>
   e255a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e255e:	4281      	cmp	r1, r0
   e2560:	dcf1      	bgt.n	e2546 <validate_structure+0x15a>
   e2562:	e01a      	b.n	e259a <validate_structure+0x1ae>
   e2564:	6963      	ldr	r3, [r4, #20]
   e2566:	f8c4 e010 	str.w	lr, [r4, #16]
   e256a:	1c5a      	adds	r2, r3, #1
   e256c:	0791      	lsls	r1, r2, #30
   e256e:	6162      	str	r2, [r4, #20]
   e2570:	d10f      	bne.n	e2592 <validate_structure+0x1a6>
   e2572:	fb92 f1f5 	sdiv	r1, r2, r5
   e2576:	fb05 2211 	mls	r2, r5, r1, r2
   e257a:	b962      	cbnz	r2, e2596 <validate_structure+0x1aa>
   e257c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e2580:	fb93 f2f6 	sdiv	r2, r3, r6
   e2584:	fb06 3312 	mls	r3, r6, r2, r3
   e2588:	2b00      	cmp	r3, #0
   e258a:	bf14      	ite	ne
   e258c:	231c      	movne	r3, #28
   e258e:	231d      	moveq	r3, #29
   e2590:	e7df      	b.n	e2552 <validate_structure+0x166>
   e2592:	231c      	movs	r3, #28
   e2594:	e7dd      	b.n	e2552 <validate_structure+0x166>
   e2596:	231d      	movs	r3, #29
   e2598:	e7db      	b.n	e2552 <validate_structure+0x166>
   e259a:	b003      	add	sp, #12
   e259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e259e:	bf00      	nop
   e25a0:	000e6e7c 	.word	0x000e6e7c

000e25a4 <mktime>:
   e25a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e25a8:	4605      	mov	r5, r0
   e25aa:	f002 fc0b 	bl	e4dc4 <__gettzinfo>
   e25ae:	4681      	mov	r9, r0
   e25b0:	4628      	mov	r0, r5
   e25b2:	f7ff ff1b 	bl	e23ec <validate_structure>
   e25b6:	e895 000c 	ldmia.w	r5, {r2, r3}
   e25ba:	213c      	movs	r1, #60	; 0x3c
   e25bc:	fb01 2303 	mla	r3, r1, r3, r2
   e25c0:	68aa      	ldr	r2, [r5, #8]
   e25c2:	68ec      	ldr	r4, [r5, #12]
   e25c4:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e25c8:	fb08 3102 	mla	r1, r8, r2, r3
   e25cc:	692b      	ldr	r3, [r5, #16]
   e25ce:	4aab      	ldr	r2, [pc, #684]	; (e287c <mktime+0x2d8>)
   e25d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e25d4:	3c01      	subs	r4, #1
   e25d6:	2b01      	cmp	r3, #1
   e25d8:	4414      	add	r4, r2
   e25da:	696b      	ldr	r3, [r5, #20]
   e25dc:	dd11      	ble.n	e2602 <mktime+0x5e>
   e25de:	079e      	lsls	r6, r3, #30
   e25e0:	d10f      	bne.n	e2602 <mktime+0x5e>
   e25e2:	2064      	movs	r0, #100	; 0x64
   e25e4:	fb93 f2f0 	sdiv	r2, r3, r0
   e25e8:	fb00 3212 	mls	r2, r0, r2, r3
   e25ec:	b942      	cbnz	r2, e2600 <mktime+0x5c>
   e25ee:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e25f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e25f6:	fb96 f0f2 	sdiv	r0, r6, r2
   e25fa:	fb02 6210 	mls	r2, r2, r0, r6
   e25fe:	b902      	cbnz	r2, e2602 <mktime+0x5e>
   e2600:	3401      	adds	r4, #1
   e2602:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e2606:	3210      	adds	r2, #16
   e2608:	f644 6020 	movw	r0, #20000	; 0x4e20
   e260c:	4282      	cmp	r2, r0
   e260e:	61ec      	str	r4, [r5, #28]
   e2610:	461f      	mov	r7, r3
   e2612:	f200 812e 	bhi.w	e2872 <mktime+0x2ce>
   e2616:	2b46      	cmp	r3, #70	; 0x46
   e2618:	dd22      	ble.n	e2660 <mktime+0xbc>
   e261a:	2246      	movs	r2, #70	; 0x46
   e261c:	f240 1c6d 	movw	ip, #365	; 0x16d
   e2620:	2664      	movs	r6, #100	; 0x64
   e2622:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e2626:	0790      	lsls	r0, r2, #30
   e2628:	d110      	bne.n	e264c <mktime+0xa8>
   e262a:	fb92 f0f6 	sdiv	r0, r2, r6
   e262e:	fb06 2010 	mls	r0, r6, r0, r2
   e2632:	b970      	cbnz	r0, e2652 <mktime+0xae>
   e2634:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e2638:	fb98 f0fe 	sdiv	r0, r8, lr
   e263c:	fb0e 8010 	mls	r0, lr, r0, r8
   e2640:	2800      	cmp	r0, #0
   e2642:	bf14      	ite	ne
   e2644:	4660      	movne	r0, ip
   e2646:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e264a:	e004      	b.n	e2656 <mktime+0xb2>
   e264c:	f240 106d 	movw	r0, #365	; 0x16d
   e2650:	e001      	b.n	e2656 <mktime+0xb2>
   e2652:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e2656:	3201      	adds	r2, #1
   e2658:	4293      	cmp	r3, r2
   e265a:	4404      	add	r4, r0
   e265c:	d1e3      	bne.n	e2626 <mktime+0x82>
   e265e:	e044      	b.n	e26ea <mktime+0x146>
   e2660:	d043      	beq.n	e26ea <mktime+0x146>
   e2662:	2245      	movs	r2, #69	; 0x45
   e2664:	f240 1e6d 	movw	lr, #365	; 0x16d
   e2668:	2664      	movs	r6, #100	; 0x64
   e266a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e266e:	429a      	cmp	r2, r3
   e2670:	dd1a      	ble.n	e26a8 <mktime+0x104>
   e2672:	0790      	lsls	r0, r2, #30
   e2674:	d110      	bne.n	e2698 <mktime+0xf4>
   e2676:	fb92 f0f6 	sdiv	r0, r2, r6
   e267a:	fb06 2010 	mls	r0, r6, r0, r2
   e267e:	b970      	cbnz	r0, e269e <mktime+0xfa>
   e2680:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e2684:	fb9c f0f7 	sdiv	r0, ip, r7
   e2688:	fb07 c010 	mls	r0, r7, r0, ip
   e268c:	2800      	cmp	r0, #0
   e268e:	bf14      	ite	ne
   e2690:	4670      	movne	r0, lr
   e2692:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e2696:	e004      	b.n	e26a2 <mktime+0xfe>
   e2698:	f240 106d 	movw	r0, #365	; 0x16d
   e269c:	e001      	b.n	e26a2 <mktime+0xfe>
   e269e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e26a2:	1a24      	subs	r4, r4, r0
   e26a4:	3a01      	subs	r2, #1
   e26a6:	e7e2      	b.n	e266e <mktime+0xca>
   e26a8:	2b45      	cmp	r3, #69	; 0x45
   e26aa:	bfa8      	it	ge
   e26ac:	2345      	movge	r3, #69	; 0x45
   e26ae:	079e      	lsls	r6, r3, #30
   e26b0:	461f      	mov	r7, r3
   e26b2:	d114      	bne.n	e26de <mktime+0x13a>
   e26b4:	2264      	movs	r2, #100	; 0x64
   e26b6:	fb93 f3f2 	sdiv	r3, r3, r2
   e26ba:	fb02 7313 	mls	r3, r2, r3, r7
   e26be:	b98b      	cbnz	r3, e26e4 <mktime+0x140>
   e26c0:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e26c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e26c8:	fb90 f2f3 	sdiv	r2, r0, r3
   e26cc:	fb03 0312 	mls	r3, r3, r2, r0
   e26d0:	2b00      	cmp	r3, #0
   e26d2:	f240 136d 	movw	r3, #365	; 0x16d
   e26d6:	bf08      	it	eq
   e26d8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e26dc:	e004      	b.n	e26e8 <mktime+0x144>
   e26de:	f240 136d 	movw	r3, #365	; 0x16d
   e26e2:	e001      	b.n	e26e8 <mktime+0x144>
   e26e4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e26e8:	1ae4      	subs	r4, r4, r3
   e26ea:	4865      	ldr	r0, [pc, #404]	; (e2880 <mktime+0x2dc>)
   e26ec:	fb00 1804 	mla	r8, r0, r4, r1
   e26f0:	f001 fe66 	bl	e43c0 <__tz_lock>
   e26f4:	f001 fe66 	bl	e43c4 <_tzset_unlocked>
   e26f8:	4b62      	ldr	r3, [pc, #392]	; (e2884 <mktime+0x2e0>)
   e26fa:	681e      	ldr	r6, [r3, #0]
   e26fc:	2e00      	cmp	r6, #0
   e26fe:	f000 80a4 	beq.w	e284a <mktime+0x2a6>
   e2702:	6a2b      	ldr	r3, [r5, #32]
   e2704:	6968      	ldr	r0, [r5, #20]
   e2706:	2b01      	cmp	r3, #1
   e2708:	bfa8      	it	ge
   e270a:	2301      	movge	r3, #1
   e270c:	469a      	mov	sl, r3
   e270e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e2712:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2716:	4298      	cmp	r0, r3
   e2718:	d10d      	bne.n	e2736 <mktime+0x192>
   e271a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e271e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e2722:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e2726:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e272a:	1ad6      	subs	r6, r2, r3
   e272c:	45b0      	cmp	r8, r6
   e272e:	eba1 0100 	sub.w	r1, r1, r0
   e2732:	da05      	bge.n	e2740 <mktime+0x19c>
   e2734:	e007      	b.n	e2746 <mktime+0x1a2>
   e2736:	f001 fd9b 	bl	e4270 <__tzcalc_limits>
   e273a:	2800      	cmp	r0, #0
   e273c:	d1ed      	bne.n	e271a <mktime+0x176>
   e273e:	e076      	b.n	e282e <mktime+0x28a>
   e2740:	1a12      	subs	r2, r2, r0
   e2742:	4590      	cmp	r8, r2
   e2744:	db73      	blt.n	e282e <mktime+0x28a>
   e2746:	f8d9 2000 	ldr.w	r2, [r9]
   e274a:	b112      	cbz	r2, e2752 <mktime+0x1ae>
   e274c:	4588      	cmp	r8, r1
   e274e:	db77      	blt.n	e2840 <mktime+0x29c>
   e2750:	e001      	b.n	e2756 <mktime+0x1b2>
   e2752:	4588      	cmp	r8, r1
   e2754:	da07      	bge.n	e2766 <mktime+0x1c2>
   e2756:	45b0      	cmp	r8, r6
   e2758:	bfac      	ite	ge
   e275a:	2600      	movge	r6, #0
   e275c:	2601      	movlt	r6, #1
   e275e:	f1ba 0f00 	cmp.w	sl, #0
   e2762:	da04      	bge.n	e276e <mktime+0x1ca>
   e2764:	e064      	b.n	e2830 <mktime+0x28c>
   e2766:	f1ba 0f00 	cmp.w	sl, #0
   e276a:	db63      	blt.n	e2834 <mktime+0x290>
   e276c:	2601      	movs	r6, #1
   e276e:	ea8a 0a06 	eor.w	sl, sl, r6
   e2772:	f1ba 0f01 	cmp.w	sl, #1
   e2776:	d15b      	bne.n	e2830 <mktime+0x28c>
   e2778:	1a1b      	subs	r3, r3, r0
   e277a:	b906      	cbnz	r6, e277e <mktime+0x1da>
   e277c:	425b      	negs	r3, r3
   e277e:	682a      	ldr	r2, [r5, #0]
   e2780:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e2784:	441a      	add	r2, r3
   e2786:	602a      	str	r2, [r5, #0]
   e2788:	4628      	mov	r0, r5
   e278a:	4498      	add	r8, r3
   e278c:	f7ff fe2e 	bl	e23ec <validate_structure>
   e2790:	68eb      	ldr	r3, [r5, #12]
   e2792:	ebb3 030a 	subs.w	r3, r3, sl
   e2796:	d04b      	beq.n	e2830 <mktime+0x28c>
   e2798:	2b01      	cmp	r3, #1
   e279a:	dc03      	bgt.n	e27a4 <mktime+0x200>
   e279c:	1c98      	adds	r0, r3, #2
   e279e:	bfd8      	it	le
   e27a0:	2301      	movle	r3, #1
   e27a2:	e001      	b.n	e27a8 <mktime+0x204>
   e27a4:	f04f 33ff 	mov.w	r3, #4294967295
   e27a8:	69ea      	ldr	r2, [r5, #28]
   e27aa:	441c      	add	r4, r3
   e27ac:	189b      	adds	r3, r3, r2
   e27ae:	d51d      	bpl.n	e27ec <mktime+0x248>
   e27b0:	1e7b      	subs	r3, r7, #1
   e27b2:	0799      	lsls	r1, r3, #30
   e27b4:	d114      	bne.n	e27e0 <mktime+0x23c>
   e27b6:	2164      	movs	r1, #100	; 0x64
   e27b8:	fb93 f2f1 	sdiv	r2, r3, r1
   e27bc:	fb01 3312 	mls	r3, r1, r2, r3
   e27c0:	b98b      	cbnz	r3, e27e6 <mktime+0x242>
   e27c2:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e27c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e27ca:	fb97 f3f2 	sdiv	r3, r7, r2
   e27ce:	fb02 7713 	mls	r7, r2, r3, r7
   e27d2:	2f00      	cmp	r7, #0
   e27d4:	f240 136d 	movw	r3, #365	; 0x16d
   e27d8:	bf18      	it	ne
   e27da:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e27de:	e024      	b.n	e282a <mktime+0x286>
   e27e0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e27e4:	e021      	b.n	e282a <mktime+0x286>
   e27e6:	f240 136d 	movw	r3, #365	; 0x16d
   e27ea:	e01e      	b.n	e282a <mktime+0x286>
   e27ec:	07ba      	lsls	r2, r7, #30
   e27ee:	d114      	bne.n	e281a <mktime+0x276>
   e27f0:	2164      	movs	r1, #100	; 0x64
   e27f2:	fb97 f2f1 	sdiv	r2, r7, r1
   e27f6:	fb01 7212 	mls	r2, r1, r2, r7
   e27fa:	b98a      	cbnz	r2, e2820 <mktime+0x27c>
   e27fc:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e2800:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e2804:	fb97 f2f1 	sdiv	r2, r7, r1
   e2808:	fb01 7712 	mls	r7, r1, r2, r7
   e280c:	2f00      	cmp	r7, #0
   e280e:	f240 126d 	movw	r2, #365	; 0x16d
   e2812:	bf08      	it	eq
   e2814:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e2818:	e004      	b.n	e2824 <mktime+0x280>
   e281a:	f240 126d 	movw	r2, #365	; 0x16d
   e281e:	e001      	b.n	e2824 <mktime+0x280>
   e2820:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e2824:	429a      	cmp	r2, r3
   e2826:	bfd8      	it	le
   e2828:	1a9b      	suble	r3, r3, r2
   e282a:	61eb      	str	r3, [r5, #28]
   e282c:	e000      	b.n	e2830 <mktime+0x28c>
   e282e:	4656      	mov	r6, sl
   e2830:	2e01      	cmp	r6, #1
   e2832:	d10a      	bne.n	e284a <mktime+0x2a6>
   e2834:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e2838:	2601      	movs	r6, #1
   e283a:	eb08 0700 	add.w	r7, r8, r0
   e283e:	e008      	b.n	e2852 <mktime+0x2ae>
   e2840:	f1ba 0f00 	cmp.w	sl, #0
   e2844:	f04f 0600 	mov.w	r6, #0
   e2848:	da91      	bge.n	e276e <mktime+0x1ca>
   e284a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e284e:	eb08 0700 	add.w	r7, r8, r0
   e2852:	f001 fdb6 	bl	e43c2 <__tz_unlock>
   e2856:	3404      	adds	r4, #4
   e2858:	2307      	movs	r3, #7
   e285a:	fb94 f3f3 	sdiv	r3, r4, r3
   e285e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e2862:	1ae4      	subs	r4, r4, r3
   e2864:	bf48      	it	mi
   e2866:	3407      	addmi	r4, #7
   e2868:	622e      	str	r6, [r5, #32]
   e286a:	61ac      	str	r4, [r5, #24]
   e286c:	4638      	mov	r0, r7
   e286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2872:	f04f 30ff 	mov.w	r0, #4294967295
   e2876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e287a:	bf00      	nop
   e287c:	000e6e4c 	.word	0x000e6e4c
   e2880:	00015180 	.word	0x00015180
   e2884:	2003e7e4 	.word	0x2003e7e4

000e2888 <srand>:
   e2888:	b538      	push	{r3, r4, r5, lr}
   e288a:	4b12      	ldr	r3, [pc, #72]	; (e28d4 <srand+0x4c>)
   e288c:	681c      	ldr	r4, [r3, #0]
   e288e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2890:	4605      	mov	r5, r0
   e2892:	b9d3      	cbnz	r3, e28ca <srand+0x42>
   e2894:	2018      	movs	r0, #24
   e2896:	f7f7 f84d 	bl	d9934 <malloc>
   e289a:	f243 330e 	movw	r3, #13070	; 0x330e
   e289e:	63a0      	str	r0, [r4, #56]	; 0x38
   e28a0:	8003      	strh	r3, [r0, #0]
   e28a2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e28a6:	8043      	strh	r3, [r0, #2]
   e28a8:	f241 2334 	movw	r3, #4660	; 0x1234
   e28ac:	8083      	strh	r3, [r0, #4]
   e28ae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e28b2:	80c3      	strh	r3, [r0, #6]
   e28b4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e28b8:	8103      	strh	r3, [r0, #8]
   e28ba:	2305      	movs	r3, #5
   e28bc:	8143      	strh	r3, [r0, #10]
   e28be:	230b      	movs	r3, #11
   e28c0:	8183      	strh	r3, [r0, #12]
   e28c2:	2201      	movs	r2, #1
   e28c4:	2300      	movs	r3, #0
   e28c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e28ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e28cc:	2200      	movs	r2, #0
   e28ce:	611d      	str	r5, [r3, #16]
   e28d0:	615a      	str	r2, [r3, #20]
   e28d2:	bd38      	pop	{r3, r4, r5, pc}
   e28d4:	2003d628 	.word	0x2003d628

000e28d8 <strcmp>:
   e28d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   e28dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   e28e0:	2a01      	cmp	r2, #1
   e28e2:	bf28      	it	cs
   e28e4:	429a      	cmpcs	r2, r3
   e28e6:	d0f7      	beq.n	e28d8 <strcmp>
   e28e8:	1ad0      	subs	r0, r2, r3
   e28ea:	4770      	bx	lr

000e28ec <strcpy>:
   e28ec:	4603      	mov	r3, r0
   e28ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   e28f2:	f803 2b01 	strb.w	r2, [r3], #1
   e28f6:	2a00      	cmp	r2, #0
   e28f8:	d1f9      	bne.n	e28ee <strcpy+0x2>
   e28fa:	4770      	bx	lr

000e28fc <strdup>:
   e28fc:	4b02      	ldr	r3, [pc, #8]	; (e2908 <strdup+0xc>)
   e28fe:	4601      	mov	r1, r0
   e2900:	6818      	ldr	r0, [r3, #0]
   e2902:	f000 b803 	b.w	e290c <_strdup_r>
   e2906:	bf00      	nop
   e2908:	2003d628 	.word	0x2003d628

000e290c <_strdup_r>:
   e290c:	b570      	push	{r4, r5, r6, lr}
   e290e:	4606      	mov	r6, r0
   e2910:	4608      	mov	r0, r1
   e2912:	460c      	mov	r4, r1
   e2914:	f000 fd22 	bl	e335c <strlen>
   e2918:	1c45      	adds	r5, r0, #1
   e291a:	4629      	mov	r1, r5
   e291c:	4630      	mov	r0, r6
   e291e:	f7f7 f851 	bl	d99c4 <_malloc_r>
   e2922:	4606      	mov	r6, r0
   e2924:	b118      	cbz	r0, e292e <_strdup_r+0x22>
   e2926:	462a      	mov	r2, r5
   e2928:	4621      	mov	r1, r4
   e292a:	f7ff fd4b 	bl	e23c4 <memcpy>
   e292e:	4630      	mov	r0, r6
   e2930:	bd70      	pop	{r4, r5, r6, pc}

000e2932 <iso_year_adjust>:
   e2932:	6941      	ldr	r1, [r0, #20]
   e2934:	078b      	lsls	r3, r1, #30
   e2936:	b510      	push	{r4, lr}
   e2938:	d10c      	bne.n	e2954 <iso_year_adjust+0x22>
   e293a:	2900      	cmp	r1, #0
   e293c:	f240 736c 	movw	r3, #1900	; 0x76c
   e2940:	bfa8      	it	ge
   e2942:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e2946:	440b      	add	r3, r1
   e2948:	2464      	movs	r4, #100	; 0x64
   e294a:	fb93 f2f4 	sdiv	r2, r3, r4
   e294e:	fb04 3312 	mls	r3, r4, r2, r3
   e2952:	b983      	cbnz	r3, e2976 <iso_year_adjust+0x44>
   e2954:	2900      	cmp	r1, #0
   e2956:	f240 736c 	movw	r3, #1900	; 0x76c
   e295a:	bfa8      	it	ge
   e295c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e2960:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2964:	440b      	add	r3, r1
   e2966:	fb93 f1f2 	sdiv	r1, r3, r2
   e296a:	fb02 3311 	mls	r3, r2, r1, r3
   e296e:	fab3 f283 	clz	r2, r3
   e2972:	0952      	lsrs	r2, r2, #5
   e2974:	e000      	b.n	e2978 <iso_year_adjust+0x46>
   e2976:	2201      	movs	r2, #1
   e2978:	6983      	ldr	r3, [r0, #24]
   e297a:	69c1      	ldr	r1, [r0, #28]
   e297c:	005b      	lsls	r3, r3, #1
   e297e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e2982:	4413      	add	r3, r2
   e2984:	2b21      	cmp	r3, #33	; 0x21
   e2986:	dc0e      	bgt.n	e29a6 <iso_year_adjust+0x74>
   e2988:	2b20      	cmp	r3, #32
   e298a:	da2f      	bge.n	e29ec <iso_year_adjust+0xba>
   e298c:	2b0d      	cmp	r3, #13
   e298e:	dc02      	bgt.n	e2996 <iso_year_adjust+0x64>
   e2990:	2b0a      	cmp	r3, #10
   e2992:	db05      	blt.n	e29a0 <iso_year_adjust+0x6e>
   e2994:	e02a      	b.n	e29ec <iso_year_adjust+0xba>
   e2996:	2b10      	cmp	r3, #16
   e2998:	db26      	blt.n	e29e8 <iso_year_adjust+0xb6>
   e299a:	2b11      	cmp	r3, #17
   e299c:	dd26      	ble.n	e29ec <iso_year_adjust+0xba>
   e299e:	3b1c      	subs	r3, #28
   e29a0:	2b01      	cmp	r3, #1
   e29a2:	d923      	bls.n	e29ec <iso_year_adjust+0xba>
   e29a4:	e020      	b.n	e29e8 <iso_year_adjust+0xb6>
   e29a6:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e29aa:	4293      	cmp	r3, r2
   e29ac:	dc0e      	bgt.n	e29cc <iso_year_adjust+0x9a>
   e29ae:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e29b2:	4293      	cmp	r3, r2
   e29b4:	da16      	bge.n	e29e4 <iso_year_adjust+0xb2>
   e29b6:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e29ba:	4293      	cmp	r3, r2
   e29bc:	d012      	beq.n	e29e4 <iso_year_adjust+0xb2>
   e29be:	db13      	blt.n	e29e8 <iso_year_adjust+0xb6>
   e29c0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e29c4:	3b12      	subs	r3, #18
   e29c6:	2b02      	cmp	r3, #2
   e29c8:	d90c      	bls.n	e29e4 <iso_year_adjust+0xb2>
   e29ca:	e00d      	b.n	e29e8 <iso_year_adjust+0xb6>
   e29cc:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e29d0:	4293      	cmp	r3, r2
   e29d2:	d007      	beq.n	e29e4 <iso_year_adjust+0xb2>
   e29d4:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e29d8:	4293      	cmp	r3, r2
   e29da:	d003      	beq.n	e29e4 <iso_year_adjust+0xb2>
   e29dc:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e29e0:	4293      	cmp	r3, r2
   e29e2:	d101      	bne.n	e29e8 <iso_year_adjust+0xb6>
   e29e4:	2001      	movs	r0, #1
   e29e6:	bd10      	pop	{r4, pc}
   e29e8:	2000      	movs	r0, #0
   e29ea:	bd10      	pop	{r4, pc}
   e29ec:	f04f 30ff 	mov.w	r0, #4294967295
   e29f0:	bd10      	pop	{r4, pc}
	...

000e29f4 <strftime>:
   e29f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e29f8:	b093      	sub	sp, #76	; 0x4c
   e29fa:	460e      	mov	r6, r1
   e29fc:	461d      	mov	r5, r3
   e29fe:	4607      	mov	r7, r0
   e2a00:	4691      	mov	r9, r2
   e2a02:	f001 fc19 	bl	e4238 <__get_current_time_locale>
   e2a06:	2300      	movs	r3, #0
   e2a08:	9306      	str	r3, [sp, #24]
   e2a0a:	461c      	mov	r4, r3
   e2a0c:	1e73      	subs	r3, r6, #1
   e2a0e:	9003      	str	r0, [sp, #12]
   e2a10:	9302      	str	r3, [sp, #8]
   e2a12:	f899 3000 	ldrb.w	r3, [r9]
   e2a16:	2b00      	cmp	r3, #0
   e2a18:	f000 8492 	beq.w	e3340 <strftime+0x94c>
   e2a1c:	2b25      	cmp	r3, #37	; 0x25
   e2a1e:	d008      	beq.n	e2a32 <strftime+0x3e>
   e2a20:	9a02      	ldr	r2, [sp, #8]
   e2a22:	4294      	cmp	r4, r2
   e2a24:	f080 8490 	bcs.w	e3348 <strftime+0x954>
   e2a28:	553b      	strb	r3, [r7, r4]
   e2a2a:	f109 0901 	add.w	r9, r9, #1
   e2a2e:	3401      	adds	r4, #1
   e2a30:	e7ef      	b.n	e2a12 <strftime+0x1e>
   e2a32:	f899 a001 	ldrb.w	sl, [r9, #1]
   e2a36:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e2a3a:	d007      	beq.n	e2a4c <strftime+0x58>
   e2a3c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e2a40:	d004      	beq.n	e2a4c <strftime+0x58>
   e2a42:	f109 0901 	add.w	r9, r9, #1
   e2a46:	f04f 0a00 	mov.w	sl, #0
   e2a4a:	e001      	b.n	e2a50 <strftime+0x5c>
   e2a4c:	f109 0902 	add.w	r9, r9, #2
   e2a50:	f899 3000 	ldrb.w	r3, [r9]
   e2a54:	3b31      	subs	r3, #49	; 0x31
   e2a56:	2b08      	cmp	r3, #8
   e2a58:	d808      	bhi.n	e2a6c <strftime+0x78>
   e2a5a:	4648      	mov	r0, r9
   e2a5c:	220a      	movs	r2, #10
   e2a5e:	a90a      	add	r1, sp, #40	; 0x28
   e2a60:	f001 fbe0 	bl	e4224 <strtoul>
   e2a64:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e2a68:	4680      	mov	r8, r0
   e2a6a:	e001      	b.n	e2a70 <strftime+0x7c>
   e2a6c:	f04f 0800 	mov.w	r8, #0
   e2a70:	f899 3000 	ldrb.w	r3, [r9]
   e2a74:	2b45      	cmp	r3, #69	; 0x45
   e2a76:	d001      	beq.n	e2a7c <strftime+0x88>
   e2a78:	2b4f      	cmp	r3, #79	; 0x4f
   e2a7a:	d101      	bne.n	e2a80 <strftime+0x8c>
   e2a7c:	f109 0901 	add.w	r9, r9, #1
   e2a80:	f899 0000 	ldrb.w	r0, [r9]
   e2a84:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e2a88:	2b55      	cmp	r3, #85	; 0x55
   e2a8a:	f200 845d 	bhi.w	e3348 <strftime+0x954>
   e2a8e:	e8df f013 	tbh	[pc, r3, lsl #1]
   e2a92:	044a      	.short	0x044a
   e2a94:	045b045b 	.word	0x045b045b
   e2a98:	045b045b 	.word	0x045b045b
   e2a9c:	045b045b 	.word	0x045b045b
   e2aa0:	045b045b 	.word	0x045b045b
   e2aa4:	045b045b 	.word	0x045b045b
   e2aa8:	045b045b 	.word	0x045b045b
   e2aac:	045b045b 	.word	0x045b045b
   e2ab0:	045b045b 	.word	0x045b045b
   e2ab4:	045b045b 	.word	0x045b045b
   e2ab8:	045b045b 	.word	0x045b045b
   e2abc:	045b045b 	.word	0x045b045b
   e2ac0:	045b045b 	.word	0x045b045b
   e2ac4:	045b045b 	.word	0x045b045b
   e2ac8:	006f045b 	.word	0x006f045b
   e2acc:	00d400a1 	.word	0x00d400a1
   e2ad0:	045b011a 	.word	0x045b011a
   e2ad4:	01a0013f 	.word	0x01a0013f
   e2ad8:	022d0226 	.word	0x022d0226
   e2adc:	045b045b 	.word	0x045b045b
   e2ae0:	0260045b 	.word	0x0260045b
   e2ae4:	045b045b 	.word	0x045b045b
   e2ae8:	045b0268 	.word	0x045b0268
   e2aec:	031d0297 	.word	0x031d0297
   e2af0:	033b0325 	.word	0x033b0325
   e2af4:	03860343 	.word	0x03860343
   e2af8:	03a000c6 	.word	0x03a000c6
   e2afc:	045b041f 	.word	0x045b041f
   e2b00:	045b045b 	.word	0x045b045b
   e2b04:	045b045b 	.word	0x045b045b
   e2b08:	0056045b 	.word	0x0056045b
   e2b0c:	00ba0089 	.word	0x00ba0089
   e2b10:	010c010c 	.word	0x010c010c
   e2b14:	0171045b 	.word	0x0171045b
   e2b18:	045b0089 	.word	0x045b0089
   e2b1c:	0226023d 	.word	0x0226023d
   e2b20:	025d022d 	.word	0x025d022d
   e2b24:	045b0262 	.word	0x045b0262
   e2b28:	045b0268 	.word	0x045b0268
   e2b2c:	029c00be 	.word	0x029c00be
   e2b30:	032e031f 	.word	0x032e031f
   e2b34:	037f045b 	.word	0x037f045b
   e2b38:	039200c2 	.word	0x039200c2
   e2b3c:	03e7      	.short	0x03e7
   e2b3e:	69ab      	ldr	r3, [r5, #24]
   e2b40:	9a03      	ldr	r2, [sp, #12]
   e2b42:	3318      	adds	r3, #24
   e2b44:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2b48:	4640      	mov	r0, r8
   e2b4a:	f000 fc07 	bl	e335c <strlen>
   e2b4e:	f108 38ff 	add.w	r8, r8, #4294967295
   e2b52:	193b      	adds	r3, r7, r4
   e2b54:	4420      	add	r0, r4
   e2b56:	4284      	cmp	r4, r0
   e2b58:	f000 83eb 	beq.w	e3332 <strftime+0x93e>
   e2b5c:	9a02      	ldr	r2, [sp, #8]
   e2b5e:	4294      	cmp	r4, r2
   e2b60:	f080 83f2 	bcs.w	e3348 <strftime+0x954>
   e2b64:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2b68:	f803 2b01 	strb.w	r2, [r3], #1
   e2b6c:	3401      	adds	r4, #1
   e2b6e:	e7f2      	b.n	e2b56 <strftime+0x162>
   e2b70:	69ab      	ldr	r3, [r5, #24]
   e2b72:	9a03      	ldr	r2, [sp, #12]
   e2b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e2b78:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e2b7c:	4640      	mov	r0, r8
   e2b7e:	f000 fbed 	bl	e335c <strlen>
   e2b82:	f108 38ff 	add.w	r8, r8, #4294967295
   e2b86:	193b      	adds	r3, r7, r4
   e2b88:	4420      	add	r0, r4
   e2b8a:	4284      	cmp	r4, r0
   e2b8c:	f000 83d1 	beq.w	e3332 <strftime+0x93e>
   e2b90:	9a02      	ldr	r2, [sp, #8]
   e2b92:	4294      	cmp	r4, r2
   e2b94:	f080 83d8 	bcs.w	e3348 <strftime+0x954>
   e2b98:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2b9c:	f803 2b01 	strb.w	r2, [r3], #1
   e2ba0:	3401      	adds	r4, #1
   e2ba2:	e7f2      	b.n	e2b8a <strftime+0x196>
   e2ba4:	692b      	ldr	r3, [r5, #16]
   e2ba6:	9a03      	ldr	r2, [sp, #12]
   e2ba8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2bac:	4640      	mov	r0, r8
   e2bae:	f000 fbd5 	bl	e335c <strlen>
   e2bb2:	f108 38ff 	add.w	r8, r8, #4294967295
   e2bb6:	193b      	adds	r3, r7, r4
   e2bb8:	4420      	add	r0, r4
   e2bba:	4284      	cmp	r4, r0
   e2bbc:	f000 83b9 	beq.w	e3332 <strftime+0x93e>
   e2bc0:	9a02      	ldr	r2, [sp, #8]
   e2bc2:	4294      	cmp	r4, r2
   e2bc4:	f080 83c0 	bcs.w	e3348 <strftime+0x954>
   e2bc8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2bcc:	f803 2b01 	strb.w	r2, [r3], #1
   e2bd0:	3401      	adds	r4, #1
   e2bd2:	e7f2      	b.n	e2bba <strftime+0x1c6>
   e2bd4:	692b      	ldr	r3, [r5, #16]
   e2bd6:	9a03      	ldr	r2, [sp, #12]
   e2bd8:	330c      	adds	r3, #12
   e2bda:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2bde:	4640      	mov	r0, r8
   e2be0:	f000 fbbc 	bl	e335c <strlen>
   e2be4:	f108 38ff 	add.w	r8, r8, #4294967295
   e2be8:	193b      	adds	r3, r7, r4
   e2bea:	4420      	add	r0, r4
   e2bec:	4284      	cmp	r4, r0
   e2bee:	f000 83a0 	beq.w	e3332 <strftime+0x93e>
   e2bf2:	9a02      	ldr	r2, [sp, #8]
   e2bf4:	4294      	cmp	r4, r2
   e2bf6:	f080 83a7 	bcs.w	e3348 <strftime+0x954>
   e2bfa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2bfe:	f803 2b01 	strb.w	r2, [r3], #1
   e2c02:	3401      	adds	r4, #1
   e2c04:	e7f2      	b.n	e2bec <strftime+0x1f8>
   e2c06:	9b03      	ldr	r3, [sp, #12]
   e2c08:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e2c0c:	e00a      	b.n	e2c24 <strftime+0x230>
   e2c0e:	9b03      	ldr	r3, [sp, #12]
   e2c10:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e2c14:	e006      	b.n	e2c24 <strftime+0x230>
   e2c16:	9b03      	ldr	r3, [sp, #12]
   e2c18:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e2c1c:	e002      	b.n	e2c24 <strftime+0x230>
   e2c1e:	9b03      	ldr	r3, [sp, #12]
   e2c20:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e2c24:	4640      	mov	r0, r8
   e2c26:	f000 fb99 	bl	e335c <strlen>
   e2c2a:	f898 3000 	ldrb.w	r3, [r8]
   e2c2e:	2b00      	cmp	r3, #0
   e2c30:	f000 837f 	beq.w	e3332 <strftime+0x93e>
   e2c34:	462b      	mov	r3, r5
   e2c36:	4642      	mov	r2, r8
   e2c38:	e093      	b.n	e2d62 <strftime+0x36e>
   e2c3a:	49b6      	ldr	r1, [pc, #728]	; (e2f14 <strftime+0x520>)
   e2c3c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e2c40:	458b      	cmp	fp, r1
   e2c42:	bfac      	ite	ge
   e2c44:	2100      	movge	r1, #0
   e2c46:	2101      	movlt	r1, #1
   e2c48:	f1bb 0f00 	cmp.w	fp, #0
   e2c4c:	db04      	blt.n	e2c58 <strftime+0x264>
   e2c4e:	2064      	movs	r0, #100	; 0x64
   e2c50:	fb9b f0f0 	sdiv	r0, fp, r0
   e2c54:	3013      	adds	r0, #19
   e2c56:	e008      	b.n	e2c6a <strftime+0x276>
   e2c58:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e2c5c:	9107      	str	r1, [sp, #28]
   e2c5e:	f001 fd37 	bl	e46d0 <abs>
   e2c62:	9907      	ldr	r1, [sp, #28]
   e2c64:	2364      	movs	r3, #100	; 0x64
   e2c66:	fb90 f0f3 	sdiv	r0, r0, r3
   e2c6a:	f1ba 0f00 	cmp.w	sl, #0
   e2c6e:	d008      	beq.n	e2c82 <strftime+0x28e>
   e2c70:	2863      	cmp	r0, #99	; 0x63
   e2c72:	dd09      	ble.n	e2c88 <strftime+0x294>
   e2c74:	4ba8      	ldr	r3, [pc, #672]	; (e2f18 <strftime+0x524>)
   e2c76:	4aa9      	ldr	r2, [pc, #676]	; (e2f1c <strftime+0x528>)
   e2c78:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e2c7c:	bf18      	it	ne
   e2c7e:	4613      	movne	r3, r2
   e2c80:	e003      	b.n	e2c8a <strftime+0x296>
   e2c82:	4ba6      	ldr	r3, [pc, #664]	; (e2f1c <strftime+0x528>)
   e2c84:	4aa6      	ldr	r2, [pc, #664]	; (e2f20 <strftime+0x52c>)
   e2c86:	e001      	b.n	e2c8c <strftime+0x298>
   e2c88:	4ba4      	ldr	r3, [pc, #656]	; (e2f1c <strftime+0x528>)
   e2c8a:	4aa6      	ldr	r2, [pc, #664]	; (e2f24 <strftime+0x530>)
   e2c8c:	9001      	str	r0, [sp, #4]
   e2c8e:	f1b8 0f01 	cmp.w	r8, #1
   e2c92:	bf98      	it	ls
   e2c94:	f04f 0802 	movls.w	r8, #2
   e2c98:	ebc1 0108 	rsb	r1, r1, r8
   e2c9c:	9100      	str	r1, [sp, #0]
   e2c9e:	489d      	ldr	r0, [pc, #628]	; (e2f14 <strftime+0x520>)
   e2ca0:	49a1      	ldr	r1, [pc, #644]	; (e2f28 <strftime+0x534>)
   e2ca2:	4583      	cmp	fp, r0
   e2ca4:	bfb8      	it	lt
   e2ca6:	460b      	movlt	r3, r1
   e2ca8:	e21e      	b.n	e30e8 <strftime+0x6f4>
   e2caa:	4aa0      	ldr	r2, [pc, #640]	; (e2f2c <strftime+0x538>)
   e2cac:	49a0      	ldr	r1, [pc, #640]	; (e2f30 <strftime+0x53c>)
   e2cae:	68eb      	ldr	r3, [r5, #12]
   e2cb0:	2864      	cmp	r0, #100	; 0x64
   e2cb2:	bf08      	it	eq
   e2cb4:	460a      	moveq	r2, r1
   e2cb6:	1b31      	subs	r1, r6, r4
   e2cb8:	1938      	adds	r0, r7, r4
   e2cba:	f7f6 fe6b 	bl	d9994 <sniprintf>
   e2cbe:	2800      	cmp	r0, #0
   e2cc0:	f280 8302 	bge.w	e32c8 <strftime+0x8d4>
   e2cc4:	e340      	b.n	e3348 <strftime+0x954>
   e2cc6:	6968      	ldr	r0, [r5, #20]
   e2cc8:	692b      	ldr	r3, [r5, #16]
   e2cca:	2800      	cmp	r0, #0
   e2ccc:	f103 0b01 	add.w	fp, r3, #1
   e2cd0:	eb07 0804 	add.w	r8, r7, r4
   e2cd4:	ebc4 0a06 	rsb	sl, r4, r6
   e2cd8:	68eb      	ldr	r3, [r5, #12]
   e2cda:	db05      	blt.n	e2ce8 <strftime+0x2f4>
   e2cdc:	2264      	movs	r2, #100	; 0x64
   e2cde:	fb90 f1f2 	sdiv	r1, r0, r2
   e2ce2:	fb02 0011 	mls	r0, r2, r1, r0
   e2ce6:	e00a      	b.n	e2cfe <strftime+0x30a>
   e2ce8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2cec:	9307      	str	r3, [sp, #28]
   e2cee:	f001 fcef 	bl	e46d0 <abs>
   e2cf2:	2264      	movs	r2, #100	; 0x64
   e2cf4:	9b07      	ldr	r3, [sp, #28]
   e2cf6:	fb90 f1f2 	sdiv	r1, r0, r2
   e2cfa:	fb01 0012 	mls	r0, r1, r2, r0
   e2cfe:	4a8d      	ldr	r2, [pc, #564]	; (e2f34 <strftime+0x540>)
   e2d00:	9001      	str	r0, [sp, #4]
   e2d02:	9300      	str	r3, [sp, #0]
   e2d04:	4651      	mov	r1, sl
   e2d06:	465b      	mov	r3, fp
   e2d08:	4640      	mov	r0, r8
   e2d0a:	f7f6 fe43 	bl	d9994 <sniprintf>
   e2d0e:	e7d6      	b.n	e2cbe <strftime+0x2ca>
   e2d10:	2325      	movs	r3, #37	; 0x25
   e2d12:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e2d16:	f1ba 0f00 	cmp.w	sl, #0
   e2d1a:	d007      	beq.n	e2d2c <strftime+0x338>
   e2d1c:	f1b8 0f05 	cmp.w	r8, #5
   e2d20:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e2d24:	bf98      	it	ls
   e2d26:	f04f 0806 	movls.w	r8, #6
   e2d2a:	e004      	b.n	e2d36 <strftime+0x342>
   e2d2c:	232b      	movs	r3, #43	; 0x2b
   e2d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e2d32:	f04f 080a 	mov.w	r8, #10
   e2d36:	f1b8 0306 	subs.w	r3, r8, #6
   e2d3a:	d102      	bne.n	e2d42 <strftime+0x34e>
   e2d3c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e2d40:	e00a      	b.n	e2d58 <strftime+0x364>
   e2d42:	4a7d      	ldr	r2, [pc, #500]	; (e2f38 <strftime+0x544>)
   e2d44:	211e      	movs	r1, #30
   e2d46:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e2d4a:	f7f6 fe23 	bl	d9994 <sniprintf>
   e2d4e:	2800      	cmp	r0, #0
   e2d50:	ddf4      	ble.n	e2d3c <strftime+0x348>
   e2d52:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e2d56:	4418      	add	r0, r3
   e2d58:	4978      	ldr	r1, [pc, #480]	; (e2f3c <strftime+0x548>)
   e2d5a:	f7ff fdc7 	bl	e28ec <strcpy>
   e2d5e:	462b      	mov	r3, r5
   e2d60:	aa0a      	add	r2, sp, #40	; 0x28
   e2d62:	1b31      	subs	r1, r6, r4
   e2d64:	1938      	adds	r0, r7, r4
   e2d66:	f7ff fe45 	bl	e29f4 <strftime>
   e2d6a:	2800      	cmp	r0, #0
   e2d6c:	f340 82ec 	ble.w	e3348 <strftime+0x954>
   e2d70:	4404      	add	r4, r0
   e2d72:	e2de      	b.n	e3332 <strftime+0x93e>
   e2d74:	4628      	mov	r0, r5
   e2d76:	f7ff fddc 	bl	e2932 <iso_year_adjust>
   e2d7a:	4680      	mov	r8, r0
   e2d7c:	6968      	ldr	r0, [r5, #20]
   e2d7e:	2800      	cmp	r0, #0
   e2d80:	db05      	blt.n	e2d8e <strftime+0x39a>
   e2d82:	2264      	movs	r2, #100	; 0x64
   e2d84:	fb90 f1f2 	sdiv	r1, r0, r2
   e2d88:	fb02 0011 	mls	r0, r2, r1, r0
   e2d8c:	e008      	b.n	e2da0 <strftime+0x3ac>
   e2d8e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2d92:	f001 fc9d 	bl	e46d0 <abs>
   e2d96:	2264      	movs	r2, #100	; 0x64
   e2d98:	fb90 f3f2 	sdiv	r3, r0, r2
   e2d9c:	fb03 0012 	mls	r0, r3, r2, r0
   e2da0:	f1b8 0f00 	cmp.w	r8, #0
   e2da4:	da06      	bge.n	e2db4 <strftime+0x3c0>
   e2da6:	696a      	ldr	r2, [r5, #20]
   e2da8:	4b65      	ldr	r3, [pc, #404]	; (e2f40 <strftime+0x54c>)
   e2daa:	429a      	cmp	r2, r3
   e2dac:	bfb8      	it	lt
   e2dae:	f04f 0801 	movlt.w	r8, #1
   e2db2:	e006      	b.n	e2dc2 <strftime+0x3ce>
   e2db4:	d005      	beq.n	e2dc2 <strftime+0x3ce>
   e2db6:	696a      	ldr	r2, [r5, #20]
   e2db8:	4b56      	ldr	r3, [pc, #344]	; (e2f14 <strftime+0x520>)
   e2dba:	429a      	cmp	r2, r3
   e2dbc:	bfb8      	it	lt
   e2dbe:	f04f 38ff 	movlt.w	r8, #4294967295
   e2dc2:	2364      	movs	r3, #100	; 0x64
   e2dc4:	4440      	add	r0, r8
   e2dc6:	fb90 f2f3 	sdiv	r2, r0, r3
   e2dca:	fb03 0012 	mls	r0, r3, r2, r0
   e2dce:	4418      	add	r0, r3
   e2dd0:	e1f9      	b.n	e31c6 <strftime+0x7d2>
   e2dd2:	4b50      	ldr	r3, [pc, #320]	; (e2f14 <strftime+0x520>)
   e2dd4:	6969      	ldr	r1, [r5, #20]
   e2dd6:	9108      	str	r1, [sp, #32]
   e2dd8:	4299      	cmp	r1, r3
   e2dda:	bfac      	ite	ge
   e2ddc:	2300      	movge	r3, #0
   e2dde:	2301      	movlt	r3, #1
   e2de0:	4628      	mov	r0, r5
   e2de2:	9307      	str	r3, [sp, #28]
   e2de4:	f7ff fda5 	bl	e2932 <iso_year_adjust>
   e2de8:	9908      	ldr	r1, [sp, #32]
   e2dea:	2900      	cmp	r1, #0
   e2dec:	4683      	mov	fp, r0
   e2dee:	db04      	blt.n	e2dfa <strftime+0x406>
   e2df0:	2364      	movs	r3, #100	; 0x64
   e2df2:	fb91 f3f3 	sdiv	r3, r1, r3
   e2df6:	3313      	adds	r3, #19
   e2df8:	e008      	b.n	e2e0c <strftime+0x418>
   e2dfa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e2dfe:	9108      	str	r1, [sp, #32]
   e2e00:	f001 fc66 	bl	e46d0 <abs>
   e2e04:	9908      	ldr	r1, [sp, #32]
   e2e06:	2364      	movs	r3, #100	; 0x64
   e2e08:	fb90 f3f3 	sdiv	r3, r0, r3
   e2e0c:	6968      	ldr	r0, [r5, #20]
   e2e0e:	2800      	cmp	r0, #0
   e2e10:	db06      	blt.n	e2e20 <strftime+0x42c>
   e2e12:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e2e16:	fb90 fcfe 	sdiv	ip, r0, lr
   e2e1a:	fb0e 001c 	mls	r0, lr, ip, r0
   e2e1e:	e00d      	b.n	e2e3c <strftime+0x448>
   e2e20:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2e24:	9109      	str	r1, [sp, #36]	; 0x24
   e2e26:	9308      	str	r3, [sp, #32]
   e2e28:	f001 fc52 	bl	e46d0 <abs>
   e2e2c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e2e30:	9909      	ldr	r1, [sp, #36]	; 0x24
   e2e32:	9b08      	ldr	r3, [sp, #32]
   e2e34:	fb90 fcfe 	sdiv	ip, r0, lr
   e2e38:	fb0c 001e 	mls	r0, ip, lr, r0
   e2e3c:	f1bb 0f00 	cmp.w	fp, #0
   e2e40:	da08      	bge.n	e2e54 <strftime+0x460>
   e2e42:	6969      	ldr	r1, [r5, #20]
   e2e44:	4a3e      	ldr	r2, [pc, #248]	; (e2f40 <strftime+0x54c>)
   e2e46:	4291      	cmp	r1, r2
   e2e48:	da0a      	bge.n	e2e60 <strftime+0x46c>
   e2e4a:	f04f 0b01 	mov.w	fp, #1
   e2e4e:	f8cd b01c 	str.w	fp, [sp, #28]
   e2e52:	e005      	b.n	e2e60 <strftime+0x46c>
   e2e54:	d004      	beq.n	e2e60 <strftime+0x46c>
   e2e56:	4a2f      	ldr	r2, [pc, #188]	; (e2f14 <strftime+0x520>)
   e2e58:	4291      	cmp	r1, r2
   e2e5a:	bfb8      	it	lt
   e2e5c:	f04f 3bff 	movlt.w	fp, #4294967295
   e2e60:	eb0b 0200 	add.w	r2, fp, r0
   e2e64:	1c50      	adds	r0, r2, #1
   e2e66:	d102      	bne.n	e2e6e <strftime+0x47a>
   e2e68:	3b01      	subs	r3, #1
   e2e6a:	2263      	movs	r2, #99	; 0x63
   e2e6c:	e003      	b.n	e2e76 <strftime+0x482>
   e2e6e:	2a64      	cmp	r2, #100	; 0x64
   e2e70:	bf04      	itt	eq
   e2e72:	3301      	addeq	r3, #1
   e2e74:	2200      	moveq	r2, #0
   e2e76:	2064      	movs	r0, #100	; 0x64
   e2e78:	fb00 2303 	mla	r3, r0, r3, r2
   e2e7c:	9a07      	ldr	r2, [sp, #28]
   e2e7e:	b142      	cbz	r2, e2e92 <strftime+0x49e>
   e2e80:	222d      	movs	r2, #45	; 0x2d
   e2e82:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e2e86:	f1b8 0f00 	cmp.w	r8, #0
   e2e8a:	d013      	beq.n	e2eb4 <strftime+0x4c0>
   e2e8c:	f108 38ff 	add.w	r8, r8, #4294967295
   e2e90:	e010      	b.n	e2eb4 <strftime+0x4c0>
   e2e92:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e2e96:	d110      	bne.n	e2eba <strftime+0x4c6>
   e2e98:	f242 720f 	movw	r2, #9999	; 0x270f
   e2e9c:	4293      	cmp	r3, r2
   e2e9e:	d90c      	bls.n	e2eba <strftime+0x4c6>
   e2ea0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e2ea4:	f1b8 0f00 	cmp.w	r8, #0
   e2ea8:	d1f0      	bne.n	e2e8c <strftime+0x498>
   e2eaa:	aa12      	add	r2, sp, #72	; 0x48
   e2eac:	2125      	movs	r1, #37	; 0x25
   e2eae:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e2eb2:	e00a      	b.n	e2eca <strftime+0x4d6>
   e2eb4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e2eb8:	e000      	b.n	e2ebc <strftime+0x4c8>
   e2eba:	aa0a      	add	r2, sp, #40	; 0x28
   e2ebc:	2125      	movs	r1, #37	; 0x25
   e2ebe:	7011      	strb	r1, [r2, #0]
   e2ec0:	f1ba 0f00 	cmp.w	sl, #0
   e2ec4:	d101      	bne.n	e2eca <strftime+0x4d6>
   e2ec6:	1c50      	adds	r0, r2, #1
   e2ec8:	e002      	b.n	e2ed0 <strftime+0x4dc>
   e2eca:	2130      	movs	r1, #48	; 0x30
   e2ecc:	1c90      	adds	r0, r2, #2
   e2ece:	7051      	strb	r1, [r2, #1]
   e2ed0:	491c      	ldr	r1, [pc, #112]	; (e2f44 <strftime+0x550>)
   e2ed2:	9307      	str	r3, [sp, #28]
   e2ed4:	f7ff fd0a 	bl	e28ec <strcpy>
   e2ed8:	9b07      	ldr	r3, [sp, #28]
   e2eda:	9300      	str	r3, [sp, #0]
   e2edc:	e1ad      	b.n	e323a <strftime+0x846>
   e2ede:	4a14      	ldr	r2, [pc, #80]	; (e2f30 <strftime+0x53c>)
   e2ee0:	4912      	ldr	r1, [pc, #72]	; (e2f2c <strftime+0x538>)
   e2ee2:	68ab      	ldr	r3, [r5, #8]
   e2ee4:	286b      	cmp	r0, #107	; 0x6b
   e2ee6:	bf08      	it	eq
   e2ee8:	460a      	moveq	r2, r1
   e2eea:	e6e4      	b.n	e2cb6 <strftime+0x2c2>
   e2eec:	68a9      	ldr	r1, [r5, #8]
   e2eee:	230c      	movs	r3, #12
   e2ef0:	b131      	cbz	r1, e2f00 <strftime+0x50c>
   e2ef2:	4299      	cmp	r1, r3
   e2ef4:	bf0e      	itee	eq
   e2ef6:	460b      	moveq	r3, r1
   e2ef8:	fb91 f2f3 	sdivne	r2, r1, r3
   e2efc:	fb03 1312 	mlsne	r3, r3, r2, r1
   e2f00:	4a0a      	ldr	r2, [pc, #40]	; (e2f2c <strftime+0x538>)
   e2f02:	490b      	ldr	r1, [pc, #44]	; (e2f30 <strftime+0x53c>)
   e2f04:	2849      	cmp	r0, #73	; 0x49
   e2f06:	bf08      	it	eq
   e2f08:	460a      	moveq	r2, r1
   e2f0a:	e6d4      	b.n	e2cb6 <strftime+0x2c2>
   e2f0c:	69eb      	ldr	r3, [r5, #28]
   e2f0e:	4a0e      	ldr	r2, [pc, #56]	; (e2f48 <strftime+0x554>)
   e2f10:	3301      	adds	r3, #1
   e2f12:	e6d0      	b.n	e2cb6 <strftime+0x2c2>
   e2f14:	fffff894 	.word	0xfffff894
   e2f18:	000e6f1b 	.word	0x000e6f1b
   e2f1c:	000e5da8 	.word	0x000e5da8
   e2f20:	000e6f0c 	.word	0x000e6f0c
   e2f24:	000e6f13 	.word	0x000e6f13
   e2f28:	000e5dc0 	.word	0x000e5dc0
   e2f2c:	000e6f1d 	.word	0x000e6f1d
   e2f30:	000e6f2b 	.word	0x000e6f2b
   e2f34:	000e6f21 	.word	0x000e6f21
   e2f38:	000e6f30 	.word	0x000e6f30
   e2f3c:	000e6f34 	.word	0x000e6f34
   e2f40:	fffff895 	.word	0xfffff895
   e2f44:	000e6f3c 	.word	0x000e6f3c
   e2f48:	000e6f40 	.word	0x000e6f40
   e2f4c:	692b      	ldr	r3, [r5, #16]
   e2f4e:	3301      	adds	r3, #1
   e2f50:	e13d      	b.n	e31ce <strftime+0x7da>
   e2f52:	686b      	ldr	r3, [r5, #4]
   e2f54:	e13b      	b.n	e31ce <strftime+0x7da>
   e2f56:	9b02      	ldr	r3, [sp, #8]
   e2f58:	429c      	cmp	r4, r3
   e2f5a:	f080 81f5 	bcs.w	e3348 <strftime+0x954>
   e2f5e:	230a      	movs	r3, #10
   e2f60:	e1e5      	b.n	e332e <strftime+0x93a>
   e2f62:	68ab      	ldr	r3, [r5, #8]
   e2f64:	9a03      	ldr	r2, [sp, #12]
   e2f66:	2b0b      	cmp	r3, #11
   e2f68:	bfcc      	ite	gt
   e2f6a:	23a4      	movgt	r3, #164	; 0xa4
   e2f6c:	23a0      	movle	r3, #160	; 0xa0
   e2f6e:	4413      	add	r3, r2
   e2f70:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e2f74:	4640      	mov	r0, r8
   e2f76:	f000 f9f1 	bl	e335c <strlen>
   e2f7a:	4bb2      	ldr	r3, [pc, #712]	; (e3244 <strftime+0x850>)
   e2f7c:	f8d3 e000 	ldr.w	lr, [r3]
   e2f80:	1939      	adds	r1, r7, r4
   e2f82:	4642      	mov	r2, r8
   e2f84:	4420      	add	r0, r4
   e2f86:	4284      	cmp	r4, r0
   e2f88:	f000 81d3 	beq.w	e3332 <strftime+0x93e>
   e2f8c:	9b02      	ldr	r3, [sp, #8]
   e2f8e:	429c      	cmp	r4, r3
   e2f90:	f080 81da 	bcs.w	e3348 <strftime+0x954>
   e2f94:	f899 3000 	ldrb.w	r3, [r9]
   e2f98:	2b50      	cmp	r3, #80	; 0x50
   e2f9a:	f104 0401 	add.w	r4, r4, #1
   e2f9e:	7813      	ldrb	r3, [r2, #0]
   e2fa0:	d10a      	bne.n	e2fb8 <strftime+0x5c4>
   e2fa2:	eb0e 0c03 	add.w	ip, lr, r3
   e2fa6:	f89c c001 	ldrb.w	ip, [ip, #1]
   e2faa:	f00c 0c03 	and.w	ip, ip, #3
   e2fae:	f1bc 0f01 	cmp.w	ip, #1
   e2fb2:	bf08      	it	eq
   e2fb4:	3320      	addeq	r3, #32
   e2fb6:	b2db      	uxtb	r3, r3
   e2fb8:	f801 3b01 	strb.w	r3, [r1], #1
   e2fbc:	3201      	adds	r2, #1
   e2fbe:	e7e2      	b.n	e2f86 <strftime+0x592>
   e2fc0:	686b      	ldr	r3, [r5, #4]
   e2fc2:	9300      	str	r3, [sp, #0]
   e2fc4:	4aa0      	ldr	r2, [pc, #640]	; (e3248 <strftime+0x854>)
   e2fc6:	68ab      	ldr	r3, [r5, #8]
   e2fc8:	e139      	b.n	e323e <strftime+0x84a>
   e2fca:	6a2b      	ldr	r3, [r5, #32]
   e2fcc:	2b00      	cmp	r3, #0
   e2fce:	db17      	blt.n	e3000 <strftime+0x60c>
   e2fd0:	f001 f9f6 	bl	e43c0 <__tz_lock>
   e2fd4:	9b06      	ldr	r3, [sp, #24]
   e2fd6:	b91b      	cbnz	r3, e2fe0 <strftime+0x5ec>
   e2fd8:	f001 f9f4 	bl	e43c4 <_tzset_unlocked>
   e2fdc:	2301      	movs	r3, #1
   e2fde:	9306      	str	r3, [sp, #24]
   e2fe0:	f001 fef0 	bl	e4dc4 <__gettzinfo>
   e2fe4:	6a2b      	ldr	r3, [r5, #32]
   e2fe6:	2b00      	cmp	r3, #0
   e2fe8:	bfd4      	ite	le
   e2fea:	2300      	movle	r3, #0
   e2fec:	2301      	movgt	r3, #1
   e2fee:	221c      	movs	r2, #28
   e2ff0:	fb02 0003 	mla	r0, r2, r3, r0
   e2ff4:	6a03      	ldr	r3, [r0, #32]
   e2ff6:	f1c3 0800 	rsb	r8, r3, #0
   e2ffa:	f001 f9e2 	bl	e43c2 <__tz_unlock>
   e2ffe:	e001      	b.n	e3004 <strftime+0x610>
   e3000:	f04f 0800 	mov.w	r8, #0
   e3004:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e3008:	4670      	mov	r0, lr
   e300a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e300e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e3012:	f141 33ff 	adc.w	r3, r1, #4294967295
   e3016:	2a00      	cmp	r2, #0
   e3018:	f173 0b00 	sbcs.w	fp, r3, #0
   e301c:	ebc4 0c06 	rsb	ip, r4, r6
   e3020:	eb07 0a04 	add.w	sl, r7, r4
   e3024:	da03      	bge.n	e302e <strftime+0x63a>
   e3026:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e302a:	f141 33ff 	adc.w	r3, r1, #4294967295
   e302e:	0891      	lsrs	r1, r2, #2
   e3030:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e3034:	109b      	asrs	r3, r3, #2
   e3036:	9104      	str	r1, [sp, #16]
   e3038:	9305      	str	r3, [sp, #20]
   e303a:	f10e 31ff 	add.w	r1, lr, #4294967295
   e303e:	2364      	movs	r3, #100	; 0x64
   e3040:	fb91 f1f3 	sdiv	r1, r1, r3
   e3044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e3048:	1a52      	subs	r2, r2, r1
   e304a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e304e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e3052:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3056:	fb90 f1f1 	sdiv	r1, r0, r1
   e305a:	1852      	adds	r2, r2, r1
   e305c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e3060:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e3064:	f240 116d 	movw	r1, #365	; 0x16d
   e3068:	fb01 fe0e 	mul.w	lr, r1, lr
   e306c:	69e9      	ldr	r1, [r5, #28]
   e306e:	eb12 020e 	adds.w	r2, r2, lr
   e3072:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e3076:	1852      	adds	r2, r2, r1
   e3078:	f04f 0e18 	mov.w	lr, #24
   e307c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e3080:	fba2 010e 	umull	r0, r1, r2, lr
   e3084:	fb0e 1103 	mla	r1, lr, r3, r1
   e3088:	68ab      	ldr	r3, [r5, #8]
   e308a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e308e:	18c0      	adds	r0, r0, r3
   e3090:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e3094:	fba0 230e 	umull	r2, r3, r0, lr
   e3098:	fb0e 3301 	mla	r3, lr, r1, r3
   e309c:	6869      	ldr	r1, [r5, #4]
   e309e:	1852      	adds	r2, r2, r1
   e30a0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e30a4:	fba2 010e 	umull	r0, r1, r2, lr
   e30a8:	fb0e 1103 	mla	r1, lr, r3, r1
   e30ac:	682b      	ldr	r3, [r5, #0]
   e30ae:	4a67      	ldr	r2, [pc, #412]	; (e324c <strftime+0x858>)
   e30b0:	18c0      	adds	r0, r0, r3
   e30b2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e30b6:	ebb0 0008 	subs.w	r0, r0, r8
   e30ba:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e30be:	e9cd 0100 	strd	r0, r1, [sp]
   e30c2:	4661      	mov	r1, ip
   e30c4:	4650      	mov	r0, sl
   e30c6:	f7f6 fc65 	bl	d9994 <sniprintf>
   e30ca:	e5f8      	b.n	e2cbe <strftime+0x2ca>
   e30cc:	682b      	ldr	r3, [r5, #0]
   e30ce:	e07e      	b.n	e31ce <strftime+0x7da>
   e30d0:	9b02      	ldr	r3, [sp, #8]
   e30d2:	429c      	cmp	r4, r3
   e30d4:	f080 8138 	bcs.w	e3348 <strftime+0x954>
   e30d8:	2309      	movs	r3, #9
   e30da:	e128      	b.n	e332e <strftime+0x93a>
   e30dc:	682b      	ldr	r3, [r5, #0]
   e30de:	9301      	str	r3, [sp, #4]
   e30e0:	686b      	ldr	r3, [r5, #4]
   e30e2:	9300      	str	r3, [sp, #0]
   e30e4:	4a5a      	ldr	r2, [pc, #360]	; (e3250 <strftime+0x85c>)
   e30e6:	68ab      	ldr	r3, [r5, #8]
   e30e8:	1b31      	subs	r1, r6, r4
   e30ea:	1938      	adds	r0, r7, r4
   e30ec:	e60d      	b.n	e2d0a <strftime+0x316>
   e30ee:	9b02      	ldr	r3, [sp, #8]
   e30f0:	429c      	cmp	r4, r3
   e30f2:	f080 8129 	bcs.w	e3348 <strftime+0x954>
   e30f6:	69ab      	ldr	r3, [r5, #24]
   e30f8:	1c62      	adds	r2, r4, #1
   e30fa:	b90b      	cbnz	r3, e3100 <strftime+0x70c>
   e30fc:	2337      	movs	r3, #55	; 0x37
   e30fe:	e000      	b.n	e3102 <strftime+0x70e>
   e3100:	3330      	adds	r3, #48	; 0x30
   e3102:	553b      	strb	r3, [r7, r4]
   e3104:	4614      	mov	r4, r2
   e3106:	e114      	b.n	e3332 <strftime+0x93e>
   e3108:	69eb      	ldr	r3, [r5, #28]
   e310a:	69aa      	ldr	r2, [r5, #24]
   e310c:	3307      	adds	r3, #7
   e310e:	1a9b      	subs	r3, r3, r2
   e3110:	2207      	movs	r2, #7
   e3112:	fb93 f3f2 	sdiv	r3, r3, r2
   e3116:	e05a      	b.n	e31ce <strftime+0x7da>
   e3118:	4628      	mov	r0, r5
   e311a:	f7ff fc0a 	bl	e2932 <iso_year_adjust>
   e311e:	69aa      	ldr	r2, [r5, #24]
   e3120:	b10a      	cbz	r2, e3126 <strftime+0x732>
   e3122:	1e53      	subs	r3, r2, #1
   e3124:	e000      	b.n	e3128 <strftime+0x734>
   e3126:	2306      	movs	r3, #6
   e3128:	2800      	cmp	r0, #0
   e312a:	dc2f      	bgt.n	e318c <strftime+0x798>
   e312c:	69ea      	ldr	r2, [r5, #28]
   e312e:	d101      	bne.n	e3134 <strftime+0x740>
   e3130:	320a      	adds	r2, #10
   e3132:	e03b      	b.n	e31ac <strftime+0x7b8>
   e3134:	1a9a      	subs	r2, r3, r2
   e3136:	696b      	ldr	r3, [r5, #20]
   e3138:	f240 716b 	movw	r1, #1899	; 0x76b
   e313c:	2b00      	cmp	r3, #0
   e313e:	bfb4      	ite	lt
   e3140:	4608      	movlt	r0, r1
   e3142:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e3146:	4418      	add	r0, r3
   e3148:	0781      	lsls	r1, r0, #30
   e314a:	d107      	bne.n	e315c <strftime+0x768>
   e314c:	4601      	mov	r1, r0
   e314e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e3152:	fb90 f0fe 	sdiv	r0, r0, lr
   e3156:	fb0e 1110 	mls	r1, lr, r0, r1
   e315a:	b981      	cbnz	r1, e317e <strftime+0x78a>
   e315c:	2b00      	cmp	r3, #0
   e315e:	f240 716b 	movw	r1, #1899	; 0x76b
   e3162:	bfa8      	it	ge
   e3164:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e3168:	4419      	add	r1, r3
   e316a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e316e:	fb91 f0f3 	sdiv	r0, r1, r3
   e3172:	fb03 1110 	mls	r1, r3, r0, r1
   e3176:	fab1 f181 	clz	r1, r1
   e317a:	0949      	lsrs	r1, r1, #5
   e317c:	e000      	b.n	e3180 <strftime+0x78c>
   e317e:	2101      	movs	r1, #1
   e3180:	1a52      	subs	r2, r2, r1
   e3182:	2a05      	cmp	r2, #5
   e3184:	bfb4      	ite	lt
   e3186:	2335      	movlt	r3, #53	; 0x35
   e3188:	2334      	movge	r3, #52	; 0x34
   e318a:	e020      	b.n	e31ce <strftime+0x7da>
   e318c:	2301      	movs	r3, #1
   e318e:	e01e      	b.n	e31ce <strftime+0x7da>
   e3190:	9b02      	ldr	r3, [sp, #8]
   e3192:	429c      	cmp	r4, r3
   e3194:	f080 80d8 	bcs.w	e3348 <strftime+0x954>
   e3198:	69ab      	ldr	r3, [r5, #24]
   e319a:	3330      	adds	r3, #48	; 0x30
   e319c:	e0c7      	b.n	e332e <strftime+0x93a>
   e319e:	69aa      	ldr	r2, [r5, #24]
   e31a0:	b10a      	cbz	r2, e31a6 <strftime+0x7b2>
   e31a2:	1e53      	subs	r3, r2, #1
   e31a4:	e000      	b.n	e31a8 <strftime+0x7b4>
   e31a6:	2306      	movs	r3, #6
   e31a8:	69ea      	ldr	r2, [r5, #28]
   e31aa:	3207      	adds	r2, #7
   e31ac:	1ad2      	subs	r2, r2, r3
   e31ae:	2307      	movs	r3, #7
   e31b0:	fb92 f3f3 	sdiv	r3, r2, r3
   e31b4:	e00b      	b.n	e31ce <strftime+0x7da>
   e31b6:	6968      	ldr	r0, [r5, #20]
   e31b8:	2800      	cmp	r0, #0
   e31ba:	da03      	bge.n	e31c4 <strftime+0x7d0>
   e31bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e31c0:	f001 fa86 	bl	e46d0 <abs>
   e31c4:	2364      	movs	r3, #100	; 0x64
   e31c6:	fb90 f2f3 	sdiv	r2, r0, r3
   e31ca:	fb02 0313 	mls	r3, r2, r3, r0
   e31ce:	4a21      	ldr	r2, [pc, #132]	; (e3254 <strftime+0x860>)
   e31d0:	e571      	b.n	e2cb6 <strftime+0x2c2>
   e31d2:	696b      	ldr	r3, [r5, #20]
   e31d4:	4a20      	ldr	r2, [pc, #128]	; (e3258 <strftime+0x864>)
   e31d6:	4293      	cmp	r3, r2
   e31d8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e31dc:	da05      	bge.n	e31ea <strftime+0x7f6>
   e31de:	232d      	movs	r3, #45	; 0x2d
   e31e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e31e4:	f1cb 0b00 	rsb	fp, fp, #0
   e31e8:	e008      	b.n	e31fc <strftime+0x808>
   e31ea:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e31ee:	d10d      	bne.n	e320c <strftime+0x818>
   e31f0:	f242 730f 	movw	r3, #9999	; 0x270f
   e31f4:	459b      	cmp	fp, r3
   e31f6:	d911      	bls.n	e321c <strftime+0x828>
   e31f8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e31fc:	f1b8 0f00 	cmp.w	r8, #0
   e3200:	d001      	beq.n	e3206 <strftime+0x812>
   e3202:	f108 38ff 	add.w	r8, r8, #4294967295
   e3206:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e320a:	e000      	b.n	e320e <strftime+0x81a>
   e320c:	ab0a      	add	r3, sp, #40	; 0x28
   e320e:	2225      	movs	r2, #37	; 0x25
   e3210:	701a      	strb	r2, [r3, #0]
   e3212:	f1ba 0f00 	cmp.w	sl, #0
   e3216:	d108      	bne.n	e322a <strftime+0x836>
   e3218:	1c58      	adds	r0, r3, #1
   e321a:	e009      	b.n	e3230 <strftime+0x83c>
   e321c:	f1b8 0f00 	cmp.w	r8, #0
   e3220:	d1f4      	bne.n	e320c <strftime+0x818>
   e3222:	2325      	movs	r3, #37	; 0x25
   e3224:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e3228:	ab0a      	add	r3, sp, #40	; 0x28
   e322a:	2230      	movs	r2, #48	; 0x30
   e322c:	1c98      	adds	r0, r3, #2
   e322e:	705a      	strb	r2, [r3, #1]
   e3230:	490a      	ldr	r1, [pc, #40]	; (e325c <strftime+0x868>)
   e3232:	f7ff fb5b 	bl	e28ec <strcpy>
   e3236:	f8cd b000 	str.w	fp, [sp]
   e323a:	4643      	mov	r3, r8
   e323c:	aa0a      	add	r2, sp, #40	; 0x28
   e323e:	1b31      	subs	r1, r6, r4
   e3240:	1938      	adds	r0, r7, r4
   e3242:	e03e      	b.n	e32c2 <strftime+0x8ce>
   e3244:	2003d5c4 	.word	0x2003d5c4
   e3248:	000e6f4f 	.word	0x000e6f4f
   e324c:	000e6f45 	.word	0x000e6f45
   e3250:	000e6f4a 	.word	0x000e6f4a
   e3254:	000e6f2b 	.word	0x000e6f2b
   e3258:	fffff894 	.word	0xfffff894
   e325c:	000e6f3c 	.word	0x000e6f3c
   e3260:	6a2b      	ldr	r3, [r5, #32]
   e3262:	2b00      	cmp	r3, #0
   e3264:	db65      	blt.n	e3332 <strftime+0x93e>
   e3266:	f001 f8ab 	bl	e43c0 <__tz_lock>
   e326a:	9b06      	ldr	r3, [sp, #24]
   e326c:	b91b      	cbnz	r3, e3276 <strftime+0x882>
   e326e:	f001 f8a9 	bl	e43c4 <_tzset_unlocked>
   e3272:	2301      	movs	r3, #1
   e3274:	9306      	str	r3, [sp, #24]
   e3276:	f001 fda5 	bl	e4dc4 <__gettzinfo>
   e327a:	6a2b      	ldr	r3, [r5, #32]
   e327c:	2b00      	cmp	r3, #0
   e327e:	bfd4      	ite	le
   e3280:	2300      	movle	r3, #0
   e3282:	2301      	movgt	r3, #1
   e3284:	221c      	movs	r2, #28
   e3286:	fb02 0003 	mla	r0, r2, r3, r0
   e328a:	eb07 0a04 	add.w	sl, r7, r4
   e328e:	6a03      	ldr	r3, [r0, #32]
   e3290:	f1c3 0800 	rsb	r8, r3, #0
   e3294:	f001 f895 	bl	e43c2 <__tz_unlock>
   e3298:	233c      	movs	r3, #60	; 0x3c
   e329a:	fb98 f0f3 	sdiv	r0, r8, r3
   e329e:	9307      	str	r3, [sp, #28]
   e32a0:	f001 fe2c 	bl	e4efc <labs>
   e32a4:	9b07      	ldr	r3, [sp, #28]
   e32a6:	fb90 f2f3 	sdiv	r2, r0, r3
   e32aa:	ebc4 0b06 	rsb	fp, r4, r6
   e32ae:	fb02 0013 	mls	r0, r2, r3, r0
   e32b2:	4a28      	ldr	r2, [pc, #160]	; (e3354 <strftime+0x960>)
   e32b4:	9000      	str	r0, [sp, #0]
   e32b6:	4659      	mov	r1, fp
   e32b8:	4650      	mov	r0, sl
   e32ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e32be:	fb98 f3f3 	sdiv	r3, r8, r3
   e32c2:	f7f6 fb67 	bl	d9994 <sniprintf>
   e32c6:	e4fa      	b.n	e2cbe <strftime+0x2ca>
   e32c8:	4404      	add	r4, r0
   e32ca:	42a6      	cmp	r6, r4
   e32cc:	d831      	bhi.n	e3332 <strftime+0x93e>
   e32ce:	e03b      	b.n	e3348 <strftime+0x954>
   e32d0:	6a2b      	ldr	r3, [r5, #32]
   e32d2:	2b00      	cmp	r3, #0
   e32d4:	db2d      	blt.n	e3332 <strftime+0x93e>
   e32d6:	f001 f873 	bl	e43c0 <__tz_lock>
   e32da:	9b06      	ldr	r3, [sp, #24]
   e32dc:	b91b      	cbnz	r3, e32e6 <strftime+0x8f2>
   e32de:	f001 f871 	bl	e43c4 <_tzset_unlocked>
   e32e2:	2301      	movs	r3, #1
   e32e4:	9306      	str	r3, [sp, #24]
   e32e6:	6a2b      	ldr	r3, [r5, #32]
   e32e8:	4a1b      	ldr	r2, [pc, #108]	; (e3358 <strftime+0x964>)
   e32ea:	2b00      	cmp	r3, #0
   e32ec:	bfd4      	ite	le
   e32ee:	2300      	movle	r3, #0
   e32f0:	2301      	movgt	r3, #1
   e32f2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e32f6:	4640      	mov	r0, r8
   e32f8:	f000 f830 	bl	e335c <strlen>
   e32fc:	f108 38ff 	add.w	r8, r8, #4294967295
   e3300:	193b      	adds	r3, r7, r4
   e3302:	4420      	add	r0, r4
   e3304:	4284      	cmp	r4, r0
   e3306:	d00b      	beq.n	e3320 <strftime+0x92c>
   e3308:	9a02      	ldr	r2, [sp, #8]
   e330a:	4294      	cmp	r4, r2
   e330c:	d205      	bcs.n	e331a <strftime+0x926>
   e330e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3312:	f803 2b01 	strb.w	r2, [r3], #1
   e3316:	3401      	adds	r4, #1
   e3318:	e7f4      	b.n	e3304 <strftime+0x910>
   e331a:	f001 f852 	bl	e43c2 <__tz_unlock>
   e331e:	e013      	b.n	e3348 <strftime+0x954>
   e3320:	f001 f84f 	bl	e43c2 <__tz_unlock>
   e3324:	e005      	b.n	e3332 <strftime+0x93e>
   e3326:	9b02      	ldr	r3, [sp, #8]
   e3328:	429c      	cmp	r4, r3
   e332a:	d20d      	bcs.n	e3348 <strftime+0x954>
   e332c:	2325      	movs	r3, #37	; 0x25
   e332e:	553b      	strb	r3, [r7, r4]
   e3330:	3401      	adds	r4, #1
   e3332:	f899 3000 	ldrb.w	r3, [r9]
   e3336:	b11b      	cbz	r3, e3340 <strftime+0x94c>
   e3338:	f109 0901 	add.w	r9, r9, #1
   e333c:	f7ff bb69 	b.w	e2a12 <strftime+0x1e>
   e3340:	b126      	cbz	r6, e334c <strftime+0x958>
   e3342:	2300      	movs	r3, #0
   e3344:	553b      	strb	r3, [r7, r4]
   e3346:	e001      	b.n	e334c <strftime+0x958>
   e3348:	2000      	movs	r0, #0
   e334a:	e000      	b.n	e334e <strftime+0x95a>
   e334c:	4620      	mov	r0, r4
   e334e:	b013      	add	sp, #76	; 0x4c
   e3350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3354:	000e6f59 	.word	0x000e6f59
   e3358:	2003d664 	.word	0x2003d664

000e335c <strlen>:
   e335c:	4603      	mov	r3, r0
   e335e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e3362:	2a00      	cmp	r2, #0
   e3364:	d1fb      	bne.n	e335e <strlen+0x2>
   e3366:	1a18      	subs	r0, r3, r0
   e3368:	3801      	subs	r0, #1
   e336a:	4770      	bx	lr

000e336c <strncmp>:
   e336c:	b530      	push	{r4, r5, lr}
   e336e:	b182      	cbz	r2, e3392 <strncmp+0x26>
   e3370:	1e45      	subs	r5, r0, #1
   e3372:	3901      	subs	r1, #1
   e3374:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e3378:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e337c:	42a3      	cmp	r3, r4
   e337e:	d106      	bne.n	e338e <strncmp+0x22>
   e3380:	43ec      	mvns	r4, r5
   e3382:	4414      	add	r4, r2
   e3384:	42e0      	cmn	r0, r4
   e3386:	d001      	beq.n	e338c <strncmp+0x20>
   e3388:	2b00      	cmp	r3, #0
   e338a:	d1f3      	bne.n	e3374 <strncmp+0x8>
   e338c:	461c      	mov	r4, r3
   e338e:	1b18      	subs	r0, r3, r4
   e3390:	bd30      	pop	{r4, r5, pc}
   e3392:	4610      	mov	r0, r2
   e3394:	bd30      	pop	{r4, r5, pc}

000e3396 <strncpy>:
   e3396:	b510      	push	{r4, lr}
   e3398:	4603      	mov	r3, r0
   e339a:	b142      	cbz	r2, e33ae <strncpy+0x18>
   e339c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e33a0:	f803 4b01 	strb.w	r4, [r3], #1
   e33a4:	3a01      	subs	r2, #1
   e33a6:	2c00      	cmp	r4, #0
   e33a8:	d1f7      	bne.n	e339a <strncpy+0x4>
   e33aa:	441a      	add	r2, r3
   e33ac:	e000      	b.n	e33b0 <strncpy+0x1a>
   e33ae:	bd10      	pop	{r4, pc}
   e33b0:	4293      	cmp	r3, r2
   e33b2:	d002      	beq.n	e33ba <strncpy+0x24>
   e33b4:	f803 4b01 	strb.w	r4, [r3], #1
   e33b8:	e7fa      	b.n	e33b0 <strncpy+0x1a>
   e33ba:	bd10      	pop	{r4, pc}

000e33bc <sulp>:
   e33bc:	b570      	push	{r4, r5, r6, lr}
   e33be:	4604      	mov	r4, r0
   e33c0:	460d      	mov	r5, r1
   e33c2:	ec45 4b10 	vmov	d0, r4, r5
   e33c6:	4616      	mov	r6, r2
   e33c8:	f002 f862 	bl	e5490 <__ulp>
   e33cc:	ec51 0b10 	vmov	r0, r1, d0
   e33d0:	b17e      	cbz	r6, e33f2 <sulp+0x36>
   e33d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e33d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e33da:	2b00      	cmp	r3, #0
   e33dc:	dd09      	ble.n	e33f2 <sulp+0x36>
   e33de:	051b      	lsls	r3, r3, #20
   e33e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e33e4:	2400      	movs	r4, #0
   e33e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e33ea:	4622      	mov	r2, r4
   e33ec:	462b      	mov	r3, r5
   e33ee:	f7fe fb4f 	bl	e1a90 <__aeabi_dmul>
   e33f2:	bd70      	pop	{r4, r5, r6, pc}
   e33f4:	0000      	movs	r0, r0
	...

000e33f8 <_strtod_r>:
   e33f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e33fc:	b09d      	sub	sp, #116	; 0x74
   e33fe:	2300      	movs	r3, #0
   e3400:	9002      	str	r0, [sp, #8]
   e3402:	460c      	mov	r4, r1
   e3404:	9213      	str	r2, [sp, #76]	; 0x4c
   e3406:	9318      	str	r3, [sp, #96]	; 0x60
   e3408:	f04f 0a00 	mov.w	sl, #0
   e340c:	f04f 0b00 	mov.w	fp, #0
   e3410:	9117      	str	r1, [sp, #92]	; 0x5c
   e3412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3414:	781a      	ldrb	r2, [r3, #0]
   e3416:	2a0d      	cmp	r2, #13
   e3418:	d805      	bhi.n	e3426 <_strtod_r+0x2e>
   e341a:	2a09      	cmp	r2, #9
   e341c:	d213      	bcs.n	e3446 <_strtod_r+0x4e>
   e341e:	2a00      	cmp	r2, #0
   e3420:	f000 81ac 	beq.w	e377c <_strtod_r+0x384>
   e3424:	e012      	b.n	e344c <_strtod_r+0x54>
   e3426:	2a2b      	cmp	r2, #43	; 0x2b
   e3428:	d004      	beq.n	e3434 <_strtod_r+0x3c>
   e342a:	2a2d      	cmp	r2, #45	; 0x2d
   e342c:	d004      	beq.n	e3438 <_strtod_r+0x40>
   e342e:	2a20      	cmp	r2, #32
   e3430:	d10c      	bne.n	e344c <_strtod_r+0x54>
   e3432:	e008      	b.n	e3446 <_strtod_r+0x4e>
   e3434:	2200      	movs	r2, #0
   e3436:	e000      	b.n	e343a <_strtod_r+0x42>
   e3438:	2201      	movs	r2, #1
   e343a:	920c      	str	r2, [sp, #48]	; 0x30
   e343c:	1c5a      	adds	r2, r3, #1
   e343e:	9217      	str	r2, [sp, #92]	; 0x5c
   e3440:	785b      	ldrb	r3, [r3, #1]
   e3442:	b92b      	cbnz	r3, e3450 <_strtod_r+0x58>
   e3444:	e19a      	b.n	e377c <_strtod_r+0x384>
   e3446:	3301      	adds	r3, #1
   e3448:	9317      	str	r3, [sp, #92]	; 0x5c
   e344a:	e7e2      	b.n	e3412 <_strtod_r+0x1a>
   e344c:	2300      	movs	r3, #0
   e344e:	930c      	str	r3, [sp, #48]	; 0x30
   e3450:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e3452:	782b      	ldrb	r3, [r5, #0]
   e3454:	2b30      	cmp	r3, #48	; 0x30
   e3456:	d15c      	bne.n	e3512 <_strtod_r+0x11a>
   e3458:	786b      	ldrb	r3, [r5, #1]
   e345a:	2b58      	cmp	r3, #88	; 0x58
   e345c:	d001      	beq.n	e3462 <_strtod_r+0x6a>
   e345e:	2b78      	cmp	r3, #120	; 0x78
   e3460:	d14c      	bne.n	e34fc <_strtod_r+0x104>
   e3462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3464:	9301      	str	r3, [sp, #4]
   e3466:	ab18      	add	r3, sp, #96	; 0x60
   e3468:	9300      	str	r3, [sp, #0]
   e346a:	4aa9      	ldr	r2, [pc, #676]	; (e3710 <_strtod_r+0x318>)
   e346c:	9802      	ldr	r0, [sp, #8]
   e346e:	ab19      	add	r3, sp, #100	; 0x64
   e3470:	a917      	add	r1, sp, #92	; 0x5c
   e3472:	f001 f990 	bl	e4796 <__gethex>
   e3476:	f010 0607 	ands.w	r6, r0, #7
   e347a:	4604      	mov	r4, r0
   e347c:	f000 8587 	beq.w	e3f8e <_strtod_r+0xb96>
   e3480:	2e06      	cmp	r6, #6
   e3482:	d105      	bne.n	e3490 <_strtod_r+0x98>
   e3484:	3501      	adds	r5, #1
   e3486:	2300      	movs	r3, #0
   e3488:	9517      	str	r5, [sp, #92]	; 0x5c
   e348a:	930c      	str	r3, [sp, #48]	; 0x30
   e348c:	f000 bd7f 	b.w	e3f8e <_strtod_r+0xb96>
   e3490:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e3492:	b13a      	cbz	r2, e34a4 <_strtod_r+0xac>
   e3494:	2135      	movs	r1, #53	; 0x35
   e3496:	a81a      	add	r0, sp, #104	; 0x68
   e3498:	f002 f8e7 	bl	e566a <__copybits>
   e349c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e349e:	9802      	ldr	r0, [sp, #8]
   e34a0:	f001 fd65 	bl	e4f6e <_Bfree>
   e34a4:	2e06      	cmp	r6, #6
   e34a6:	d822      	bhi.n	e34ee <_strtod_r+0xf6>
   e34a8:	e8df f006 	tbb	[pc, r6]
   e34ac:	18080d04 	.word	0x18080d04
   e34b0:	0d1d      	.short	0x0d1d
   e34b2:	04          	.byte	0x04
   e34b3:	00          	.byte	0x00
   e34b4:	f04f 0b00 	mov.w	fp, #0
   e34b8:	46da      	mov	sl, fp
   e34ba:	e018      	b.n	e34ee <_strtod_r+0xf6>
   e34bc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e34c0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e34c4:	e013      	b.n	e34ee <_strtod_r+0xf6>
   e34c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e34c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e34ca:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e34ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e34d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e34d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e34da:	e008      	b.n	e34ee <_strtod_r+0xf6>
   e34dc:	f8df b234 	ldr.w	fp, [pc, #564]	; e3714 <_strtod_r+0x31c>
   e34e0:	f04f 0a00 	mov.w	sl, #0
   e34e4:	e003      	b.n	e34ee <_strtod_r+0xf6>
   e34e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e34ea:	f04f 3aff 	mov.w	sl, #4294967295
   e34ee:	0721      	lsls	r1, r4, #28
   e34f0:	f140 854d 	bpl.w	e3f8e <_strtod_r+0xb96>
   e34f4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e34f8:	f000 bd49 	b.w	e3f8e <_strtod_r+0xb96>
   e34fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e34fe:	1c5a      	adds	r2, r3, #1
   e3500:	9217      	str	r2, [sp, #92]	; 0x5c
   e3502:	785b      	ldrb	r3, [r3, #1]
   e3504:	2b30      	cmp	r3, #48	; 0x30
   e3506:	d0f9      	beq.n	e34fc <_strtod_r+0x104>
   e3508:	2b00      	cmp	r3, #0
   e350a:	f000 8540 	beq.w	e3f8e <_strtod_r+0xb96>
   e350e:	2301      	movs	r3, #1
   e3510:	e000      	b.n	e3514 <_strtod_r+0x11c>
   e3512:	2300      	movs	r3, #0
   e3514:	f04f 0800 	mov.w	r8, #0
   e3518:	9306      	str	r3, [sp, #24]
   e351a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e351c:	9307      	str	r3, [sp, #28]
   e351e:	f8cd 8014 	str.w	r8, [sp, #20]
   e3522:	f8cd 8010 	str.w	r8, [sp, #16]
   e3526:	220a      	movs	r2, #10
   e3528:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e352a:	782e      	ldrb	r6, [r5, #0]
   e352c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e3530:	b2d9      	uxtb	r1, r3
   e3532:	2909      	cmp	r1, #9
   e3534:	d80e      	bhi.n	e3554 <_strtod_r+0x15c>
   e3536:	9904      	ldr	r1, [sp, #16]
   e3538:	2908      	cmp	r1, #8
   e353a:	bfdd      	ittte	le
   e353c:	9905      	ldrle	r1, [sp, #20]
   e353e:	fb02 3301 	mlale	r3, r2, r1, r3
   e3542:	9305      	strle	r3, [sp, #20]
   e3544:	fb02 3808 	mlagt	r8, r2, r8, r3
   e3548:	9b04      	ldr	r3, [sp, #16]
   e354a:	3501      	adds	r5, #1
   e354c:	3301      	adds	r3, #1
   e354e:	9304      	str	r3, [sp, #16]
   e3550:	9517      	str	r5, [sp, #92]	; 0x5c
   e3552:	e7e9      	b.n	e3528 <_strtod_r+0x130>
   e3554:	9802      	ldr	r0, [sp, #8]
   e3556:	f7fe ff31 	bl	e23bc <_localeconv_r>
   e355a:	6807      	ldr	r7, [r0, #0]
   e355c:	9802      	ldr	r0, [sp, #8]
   e355e:	f7fe ff2d 	bl	e23bc <_localeconv_r>
   e3562:	6800      	ldr	r0, [r0, #0]
   e3564:	f7ff fefa 	bl	e335c <strlen>
   e3568:	4639      	mov	r1, r7
   e356a:	4602      	mov	r2, r0
   e356c:	4628      	mov	r0, r5
   e356e:	f7ff fefd 	bl	e336c <strncmp>
   e3572:	4607      	mov	r7, r0
   e3574:	b128      	cbz	r0, e3582 <_strtod_r+0x18a>
   e3576:	2000      	movs	r0, #0
   e3578:	4633      	mov	r3, r6
   e357a:	9d04      	ldr	r5, [sp, #16]
   e357c:	4602      	mov	r2, r0
   e357e:	4601      	mov	r1, r0
   e3580:	e057      	b.n	e3632 <_strtod_r+0x23a>
   e3582:	9802      	ldr	r0, [sp, #8]
   e3584:	f7fe ff1a 	bl	e23bc <_localeconv_r>
   e3588:	6800      	ldr	r0, [r0, #0]
   e358a:	f7ff fee7 	bl	e335c <strlen>
   e358e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3590:	181a      	adds	r2, r3, r0
   e3592:	9217      	str	r2, [sp, #92]	; 0x5c
   e3594:	9a04      	ldr	r2, [sp, #16]
   e3596:	5c1b      	ldrb	r3, [r3, r0]
   e3598:	2a00      	cmp	r2, #0
   e359a:	d142      	bne.n	e3622 <_strtod_r+0x22a>
   e359c:	4610      	mov	r0, r2
   e359e:	2b30      	cmp	r3, #48	; 0x30
   e35a0:	d105      	bne.n	e35ae <_strtod_r+0x1b6>
   e35a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e35a4:	1c5a      	adds	r2, r3, #1
   e35a6:	9217      	str	r2, [sp, #92]	; 0x5c
   e35a8:	3001      	adds	r0, #1
   e35aa:	785b      	ldrb	r3, [r3, #1]
   e35ac:	e7f7      	b.n	e359e <_strtod_r+0x1a6>
   e35ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e35b2:	2a08      	cmp	r2, #8
   e35b4:	d843      	bhi.n	e363e <_strtod_r+0x246>
   e35b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e35b8:	9207      	str	r2, [sp, #28]
   e35ba:	4602      	mov	r2, r0
   e35bc:	2000      	movs	r0, #0
   e35be:	4605      	mov	r5, r0
   e35c0:	3b30      	subs	r3, #48	; 0x30
   e35c2:	f100 0101 	add.w	r1, r0, #1
   e35c6:	d026      	beq.n	e3616 <_strtod_r+0x21e>
   e35c8:	440a      	add	r2, r1
   e35ca:	eb05 0c00 	add.w	ip, r5, r0
   e35ce:	4629      	mov	r1, r5
   e35d0:	260a      	movs	r6, #10
   e35d2:	4561      	cmp	r1, ip
   e35d4:	d00e      	beq.n	e35f4 <_strtod_r+0x1fc>
   e35d6:	3101      	adds	r1, #1
   e35d8:	f101 3eff 	add.w	lr, r1, #4294967295
   e35dc:	f1be 0f08 	cmp.w	lr, #8
   e35e0:	dc03      	bgt.n	e35ea <_strtod_r+0x1f2>
   e35e2:	9f05      	ldr	r7, [sp, #20]
   e35e4:	4377      	muls	r7, r6
   e35e6:	9705      	str	r7, [sp, #20]
   e35e8:	e7f3      	b.n	e35d2 <_strtod_r+0x1da>
   e35ea:	2910      	cmp	r1, #16
   e35ec:	bfd8      	it	le
   e35ee:	fb06 f808 	mulle.w	r8, r6, r8
   e35f2:	e7ee      	b.n	e35d2 <_strtod_r+0x1da>
   e35f4:	4428      	add	r0, r5
   e35f6:	2808      	cmp	r0, #8
   e35f8:	f100 0501 	add.w	r5, r0, #1
   e35fc:	dc05      	bgt.n	e360a <_strtod_r+0x212>
   e35fe:	9805      	ldr	r0, [sp, #20]
   e3600:	210a      	movs	r1, #10
   e3602:	fb01 3300 	mla	r3, r1, r0, r3
   e3606:	9305      	str	r3, [sp, #20]
   e3608:	e004      	b.n	e3614 <_strtod_r+0x21c>
   e360a:	2d10      	cmp	r5, #16
   e360c:	bfdc      	itt	le
   e360e:	210a      	movle	r1, #10
   e3610:	fb01 3808 	mlale	r8, r1, r8, r3
   e3614:	2100      	movs	r1, #0
   e3616:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3618:	1c58      	adds	r0, r3, #1
   e361a:	9017      	str	r0, [sp, #92]	; 0x5c
   e361c:	785b      	ldrb	r3, [r3, #1]
   e361e:	4608      	mov	r0, r1
   e3620:	e002      	b.n	e3628 <_strtod_r+0x230>
   e3622:	9d04      	ldr	r5, [sp, #16]
   e3624:	4638      	mov	r0, r7
   e3626:	463a      	mov	r2, r7
   e3628:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e362c:	2909      	cmp	r1, #9
   e362e:	d9c7      	bls.n	e35c0 <_strtod_r+0x1c8>
   e3630:	2101      	movs	r1, #1
   e3632:	2b65      	cmp	r3, #101	; 0x65
   e3634:	d001      	beq.n	e363a <_strtod_r+0x242>
   e3636:	2b45      	cmp	r3, #69	; 0x45
   e3638:	d151      	bne.n	e36de <_strtod_r+0x2e6>
   e363a:	b96d      	cbnz	r5, e3658 <_strtod_r+0x260>
   e363c:	e004      	b.n	e3648 <_strtod_r+0x250>
   e363e:	2b65      	cmp	r3, #101	; 0x65
   e3640:	f040 84b3 	bne.w	e3faa <_strtod_r+0xbb2>
   e3644:	2200      	movs	r2, #0
   e3646:	2101      	movs	r1, #1
   e3648:	b928      	cbnz	r0, e3656 <_strtod_r+0x25e>
   e364a:	9b06      	ldr	r3, [sp, #24]
   e364c:	2b00      	cmp	r3, #0
   e364e:	f000 8095 	beq.w	e377c <_strtod_r+0x384>
   e3652:	4605      	mov	r5, r0
   e3654:	e000      	b.n	e3658 <_strtod_r+0x260>
   e3656:	2500      	movs	r5, #0
   e3658:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e365a:	1c63      	adds	r3, r4, #1
   e365c:	9317      	str	r3, [sp, #92]	; 0x5c
   e365e:	7863      	ldrb	r3, [r4, #1]
   e3660:	2b2b      	cmp	r3, #43	; 0x2b
   e3662:	d006      	beq.n	e3672 <_strtod_r+0x27a>
   e3664:	2b2d      	cmp	r3, #45	; 0x2d
   e3666:	d002      	beq.n	e366e <_strtod_r+0x276>
   e3668:	2600      	movs	r6, #0
   e366a:	9603      	str	r6, [sp, #12]
   e366c:	e006      	b.n	e367c <_strtod_r+0x284>
   e366e:	2301      	movs	r3, #1
   e3670:	e000      	b.n	e3674 <_strtod_r+0x27c>
   e3672:	2300      	movs	r3, #0
   e3674:	9303      	str	r3, [sp, #12]
   e3676:	1ca3      	adds	r3, r4, #2
   e3678:	9317      	str	r3, [sp, #92]	; 0x5c
   e367a:	78a3      	ldrb	r3, [r4, #2]
   e367c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e3680:	2e09      	cmp	r6, #9
   e3682:	d82b      	bhi.n	e36dc <_strtod_r+0x2e4>
   e3684:	2b30      	cmp	r3, #48	; 0x30
   e3686:	d104      	bne.n	e3692 <_strtod_r+0x29a>
   e3688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e368a:	1c5e      	adds	r6, r3, #1
   e368c:	9617      	str	r6, [sp, #92]	; 0x5c
   e368e:	785b      	ldrb	r3, [r3, #1]
   e3690:	e7f8      	b.n	e3684 <_strtod_r+0x28c>
   e3692:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e3696:	2e08      	cmp	r6, #8
   e3698:	d821      	bhi.n	e36de <_strtod_r+0x2e6>
   e369a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e369e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e36a0:	f04f 0c0a 	mov.w	ip, #10
   e36a4:	461f      	mov	r7, r3
   e36a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e36a8:	1c5e      	adds	r6, r3, #1
   e36aa:	9617      	str	r6, [sp, #92]	; 0x5c
   e36ac:	785b      	ldrb	r3, [r3, #1]
   e36ae:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e36b2:	f1b9 0f09 	cmp.w	r9, #9
   e36b6:	d804      	bhi.n	e36c2 <_strtod_r+0x2ca>
   e36b8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e36bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e36c0:	e7f1      	b.n	e36a6 <_strtod_r+0x2ae>
   e36c2:	1bf6      	subs	r6, r6, r7
   e36c4:	2e08      	cmp	r6, #8
   e36c6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e36ca:	dc02      	bgt.n	e36d2 <_strtod_r+0x2da>
   e36cc:	45f1      	cmp	r9, lr
   e36ce:	bfa8      	it	ge
   e36d0:	46f1      	movge	r9, lr
   e36d2:	9e03      	ldr	r6, [sp, #12]
   e36d4:	b12e      	cbz	r6, e36e2 <_strtod_r+0x2ea>
   e36d6:	f1c9 0900 	rsb	r9, r9, #0
   e36da:	e002      	b.n	e36e2 <_strtod_r+0x2ea>
   e36dc:	9417      	str	r4, [sp, #92]	; 0x5c
   e36de:	f04f 0900 	mov.w	r9, #0
   e36e2:	2d00      	cmp	r5, #0
   e36e4:	d153      	bne.n	e378e <_strtod_r+0x396>
   e36e6:	2800      	cmp	r0, #0
   e36e8:	f040 8451 	bne.w	e3f8e <_strtod_r+0xb96>
   e36ec:	9a06      	ldr	r2, [sp, #24]
   e36ee:	2a00      	cmp	r2, #0
   e36f0:	f040 844d 	bne.w	e3f8e <_strtod_r+0xb96>
   e36f4:	2900      	cmp	r1, #0
   e36f6:	d141      	bne.n	e377c <_strtod_r+0x384>
   e36f8:	2b4e      	cmp	r3, #78	; 0x4e
   e36fa:	d020      	beq.n	e373e <_strtod_r+0x346>
   e36fc:	dc02      	bgt.n	e3704 <_strtod_r+0x30c>
   e36fe:	2b49      	cmp	r3, #73	; 0x49
   e3700:	d00a      	beq.n	e3718 <_strtod_r+0x320>
   e3702:	e03b      	b.n	e377c <_strtod_r+0x384>
   e3704:	2b69      	cmp	r3, #105	; 0x69
   e3706:	d007      	beq.n	e3718 <_strtod_r+0x320>
   e3708:	2b6e      	cmp	r3, #110	; 0x6e
   e370a:	d018      	beq.n	e373e <_strtod_r+0x346>
   e370c:	e036      	b.n	e377c <_strtod_r+0x384>
   e370e:	bf00      	nop
   e3710:	000e6f68 	.word	0x000e6f68
   e3714:	7ff00000 	.word	0x7ff00000
   e3718:	49a8      	ldr	r1, [pc, #672]	; (e39bc <_strtod_r+0x5c4>)
   e371a:	a817      	add	r0, sp, #92	; 0x5c
   e371c:	f001 fa6c 	bl	e4bf8 <__match>
   e3720:	b360      	cbz	r0, e377c <_strtod_r+0x384>
   e3722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3724:	49a6      	ldr	r1, [pc, #664]	; (e39c0 <_strtod_r+0x5c8>)
   e3726:	3b01      	subs	r3, #1
   e3728:	a817      	add	r0, sp, #92	; 0x5c
   e372a:	9317      	str	r3, [sp, #92]	; 0x5c
   e372c:	f001 fa64 	bl	e4bf8 <__match>
   e3730:	b910      	cbnz	r0, e3738 <_strtod_r+0x340>
   e3732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3734:	3301      	adds	r3, #1
   e3736:	9317      	str	r3, [sp, #92]	; 0x5c
   e3738:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e39dc <_strtod_r+0x5e4>
   e373c:	e01a      	b.n	e3774 <_strtod_r+0x37c>
   e373e:	49a1      	ldr	r1, [pc, #644]	; (e39c4 <_strtod_r+0x5cc>)
   e3740:	a817      	add	r0, sp, #92	; 0x5c
   e3742:	f001 fa59 	bl	e4bf8 <__match>
   e3746:	b1c8      	cbz	r0, e377c <_strtod_r+0x384>
   e3748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e374a:	781b      	ldrb	r3, [r3, #0]
   e374c:	2b28      	cmp	r3, #40	; 0x28
   e374e:	d10f      	bne.n	e3770 <_strtod_r+0x378>
   e3750:	aa1a      	add	r2, sp, #104	; 0x68
   e3752:	499d      	ldr	r1, [pc, #628]	; (e39c8 <_strtod_r+0x5d0>)
   e3754:	a817      	add	r0, sp, #92	; 0x5c
   e3756:	f001 fa62 	bl	e4c1e <__hexnan>
   e375a:	2805      	cmp	r0, #5
   e375c:	d108      	bne.n	e3770 <_strtod_r+0x378>
   e375e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e3760:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e3764:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e3768:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e376c:	f000 bc0f 	b.w	e3f8e <_strtod_r+0xb96>
   e3770:	f8df b26c 	ldr.w	fp, [pc, #620]	; e39e0 <_strtod_r+0x5e8>
   e3774:	f04f 0a00 	mov.w	sl, #0
   e3778:	f000 bc09 	b.w	e3f8e <_strtod_r+0xb96>
   e377c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e377e:	9417      	str	r4, [sp, #92]	; 0x5c
   e3780:	2b00      	cmp	r3, #0
   e3782:	f000 840f 	beq.w	e3fa4 <_strtod_r+0xbac>
   e3786:	2300      	movs	r3, #0
   e3788:	930c      	str	r3, [sp, #48]	; 0x30
   e378a:	f000 bc02 	b.w	e3f92 <_strtod_r+0xb9a>
   e378e:	9b04      	ldr	r3, [sp, #16]
   e3790:	9805      	ldr	r0, [sp, #20]
   e3792:	2b00      	cmp	r3, #0
   e3794:	bf08      	it	eq
   e3796:	462b      	moveq	r3, r5
   e3798:	2d10      	cmp	r5, #16
   e379a:	462c      	mov	r4, r5
   e379c:	ebc2 0909 	rsb	r9, r2, r9
   e37a0:	bfa8      	it	ge
   e37a2:	2410      	movge	r4, #16
   e37a4:	9304      	str	r3, [sp, #16]
   e37a6:	f7fe f8fd 	bl	e19a4 <__aeabi_ui2d>
   e37aa:	2c09      	cmp	r4, #9
   e37ac:	4682      	mov	sl, r0
   e37ae:	468b      	mov	fp, r1
   e37b0:	dd13      	ble.n	e37da <_strtod_r+0x3e2>
   e37b2:	4b86      	ldr	r3, [pc, #536]	; (e39cc <_strtod_r+0x5d4>)
   e37b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e37b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e37bc:	f7fe f968 	bl	e1a90 <__aeabi_dmul>
   e37c0:	4606      	mov	r6, r0
   e37c2:	4640      	mov	r0, r8
   e37c4:	460f      	mov	r7, r1
   e37c6:	f7fe f8ed 	bl	e19a4 <__aeabi_ui2d>
   e37ca:	4602      	mov	r2, r0
   e37cc:	460b      	mov	r3, r1
   e37ce:	4630      	mov	r0, r6
   e37d0:	4639      	mov	r1, r7
   e37d2:	f7fd ffab 	bl	e172c <__adddf3>
   e37d6:	4682      	mov	sl, r0
   e37d8:	468b      	mov	fp, r1
   e37da:	2d0f      	cmp	r5, #15
   e37dc:	dc36      	bgt.n	e384c <_strtod_r+0x454>
   e37de:	f1b9 0f00 	cmp.w	r9, #0
   e37e2:	f000 83d4 	beq.w	e3f8e <_strtod_r+0xb96>
   e37e6:	dd24      	ble.n	e3832 <_strtod_r+0x43a>
   e37e8:	f1b9 0f16 	cmp.w	r9, #22
   e37ec:	dc07      	bgt.n	e37fe <_strtod_r+0x406>
   e37ee:	4d77      	ldr	r5, [pc, #476]	; (e39cc <_strtod_r+0x5d4>)
   e37f0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e37f4:	4652      	mov	r2, sl
   e37f6:	465b      	mov	r3, fp
   e37f8:	e9d9 0100 	ldrd	r0, r1, [r9]
   e37fc:	e014      	b.n	e3828 <_strtod_r+0x430>
   e37fe:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e3802:	4599      	cmp	r9, r3
   e3804:	dc22      	bgt.n	e384c <_strtod_r+0x454>
   e3806:	4c71      	ldr	r4, [pc, #452]	; (e39cc <_strtod_r+0x5d4>)
   e3808:	f1c5 050f 	rsb	r5, r5, #15
   e380c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e3810:	ebc5 0509 	rsb	r5, r5, r9
   e3814:	4652      	mov	r2, sl
   e3816:	465b      	mov	r3, fp
   e3818:	e9d1 0100 	ldrd	r0, r1, [r1]
   e381c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e3820:	f7fe f936 	bl	e1a90 <__aeabi_dmul>
   e3824:	e9d4 2300 	ldrd	r2, r3, [r4]
   e3828:	f7fe f932 	bl	e1a90 <__aeabi_dmul>
   e382c:	4682      	mov	sl, r0
   e382e:	468b      	mov	fp, r1
   e3830:	e3ad      	b.n	e3f8e <_strtod_r+0xb96>
   e3832:	f119 0f16 	cmn.w	r9, #22
   e3836:	db09      	blt.n	e384c <_strtod_r+0x454>
   e3838:	4d64      	ldr	r5, [pc, #400]	; (e39cc <_strtod_r+0x5d4>)
   e383a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e383e:	e9d9 2300 	ldrd	r2, r3, [r9]
   e3842:	4650      	mov	r0, sl
   e3844:	4659      	mov	r1, fp
   e3846:	f7fe fa4d 	bl	e1ce4 <__aeabi_ddiv>
   e384a:	e7ef      	b.n	e382c <_strtod_r+0x434>
   e384c:	1b2c      	subs	r4, r5, r4
   e384e:	444c      	add	r4, r9
   e3850:	2c00      	cmp	r4, #0
   e3852:	dd57      	ble.n	e3904 <_strtod_r+0x50c>
   e3854:	f014 010f 	ands.w	r1, r4, #15
   e3858:	d00a      	beq.n	e3870 <_strtod_r+0x478>
   e385a:	4b5c      	ldr	r3, [pc, #368]	; (e39cc <_strtod_r+0x5d4>)
   e385c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e3860:	4652      	mov	r2, sl
   e3862:	465b      	mov	r3, fp
   e3864:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3868:	f7fe f912 	bl	e1a90 <__aeabi_dmul>
   e386c:	4682      	mov	sl, r0
   e386e:	468b      	mov	fp, r1
   e3870:	f034 040f 	bics.w	r4, r4, #15
   e3874:	f000 80b8 	beq.w	e39e8 <_strtod_r+0x5f0>
   e3878:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e387c:	dd0b      	ble.n	e3896 <_strtod_r+0x49e>
   e387e:	2400      	movs	r4, #0
   e3880:	4625      	mov	r5, r4
   e3882:	9405      	str	r4, [sp, #20]
   e3884:	9404      	str	r4, [sp, #16]
   e3886:	9a02      	ldr	r2, [sp, #8]
   e3888:	f8df b150 	ldr.w	fp, [pc, #336]	; e39dc <_strtod_r+0x5e4>
   e388c:	2322      	movs	r3, #34	; 0x22
   e388e:	6013      	str	r3, [r2, #0]
   e3890:	f04f 0a00 	mov.w	sl, #0
   e3894:	e187      	b.n	e3ba6 <_strtod_r+0x7ae>
   e3896:	4e4e      	ldr	r6, [pc, #312]	; (e39d0 <_strtod_r+0x5d8>)
   e3898:	2300      	movs	r3, #0
   e389a:	1124      	asrs	r4, r4, #4
   e389c:	4650      	mov	r0, sl
   e389e:	4659      	mov	r1, fp
   e38a0:	4698      	mov	r8, r3
   e38a2:	4637      	mov	r7, r6
   e38a4:	2c01      	cmp	r4, #1
   e38a6:	dd0b      	ble.n	e38c0 <_strtod_r+0x4c8>
   e38a8:	07e2      	lsls	r2, r4, #31
   e38aa:	d504      	bpl.n	e38b6 <_strtod_r+0x4be>
   e38ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   e38b0:	f7fe f8ee 	bl	e1a90 <__aeabi_dmul>
   e38b4:	2301      	movs	r3, #1
   e38b6:	f108 0801 	add.w	r8, r8, #1
   e38ba:	1064      	asrs	r4, r4, #1
   e38bc:	3608      	adds	r6, #8
   e38be:	e7f1      	b.n	e38a4 <_strtod_r+0x4ac>
   e38c0:	b10b      	cbz	r3, e38c6 <_strtod_r+0x4ce>
   e38c2:	4682      	mov	sl, r0
   e38c4:	468b      	mov	fp, r1
   e38c6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e38ca:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e38ce:	4652      	mov	r2, sl
   e38d0:	465b      	mov	r3, fp
   e38d2:	e9d7 0100 	ldrd	r0, r1, [r7]
   e38d6:	f7fe f8db 	bl	e1a90 <__aeabi_dmul>
   e38da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e38de:	468b      	mov	fp, r1
   e38e0:	460a      	mov	r2, r1
   e38e2:	0d1b      	lsrs	r3, r3, #20
   e38e4:	493b      	ldr	r1, [pc, #236]	; (e39d4 <_strtod_r+0x5dc>)
   e38e6:	051b      	lsls	r3, r3, #20
   e38e8:	428b      	cmp	r3, r1
   e38ea:	4682      	mov	sl, r0
   e38ec:	d8c7      	bhi.n	e387e <_strtod_r+0x486>
   e38ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e38f2:	428b      	cmp	r3, r1
   e38f4:	bf86      	itte	hi
   e38f6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e39e4 <_strtod_r+0x5ec>
   e38fa:	f04f 3aff 	movhi.w	sl, #4294967295
   e38fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e3902:	e071      	b.n	e39e8 <_strtod_r+0x5f0>
   e3904:	d070      	beq.n	e39e8 <_strtod_r+0x5f0>
   e3906:	4264      	negs	r4, r4
   e3908:	f014 020f 	ands.w	r2, r4, #15
   e390c:	d00a      	beq.n	e3924 <_strtod_r+0x52c>
   e390e:	4b2f      	ldr	r3, [pc, #188]	; (e39cc <_strtod_r+0x5d4>)
   e3910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e3914:	4650      	mov	r0, sl
   e3916:	4659      	mov	r1, fp
   e3918:	e9d3 2300 	ldrd	r2, r3, [r3]
   e391c:	f7fe f9e2 	bl	e1ce4 <__aeabi_ddiv>
   e3920:	4682      	mov	sl, r0
   e3922:	468b      	mov	fp, r1
   e3924:	1124      	asrs	r4, r4, #4
   e3926:	d05f      	beq.n	e39e8 <_strtod_r+0x5f0>
   e3928:	2c1f      	cmp	r4, #31
   e392a:	dd04      	ble.n	e3936 <_strtod_r+0x53e>
   e392c:	2400      	movs	r4, #0
   e392e:	4625      	mov	r5, r4
   e3930:	9405      	str	r4, [sp, #20]
   e3932:	9404      	str	r4, [sp, #16]
   e3934:	e130      	b.n	e3b98 <_strtod_r+0x7a0>
   e3936:	f014 0f10 	tst.w	r4, #16
   e393a:	bf0c      	ite	eq
   e393c:	2300      	moveq	r3, #0
   e393e:	236a      	movne	r3, #106	; 0x6a
   e3940:	4e25      	ldr	r6, [pc, #148]	; (e39d8 <_strtod_r+0x5e0>)
   e3942:	9303      	str	r3, [sp, #12]
   e3944:	4650      	mov	r0, sl
   e3946:	4659      	mov	r1, fp
   e3948:	2300      	movs	r3, #0
   e394a:	2c00      	cmp	r4, #0
   e394c:	dd09      	ble.n	e3962 <_strtod_r+0x56a>
   e394e:	07e2      	lsls	r2, r4, #31
   e3950:	d504      	bpl.n	e395c <_strtod_r+0x564>
   e3952:	e9d6 2300 	ldrd	r2, r3, [r6]
   e3956:	f7fe f89b 	bl	e1a90 <__aeabi_dmul>
   e395a:	2301      	movs	r3, #1
   e395c:	1064      	asrs	r4, r4, #1
   e395e:	3608      	adds	r6, #8
   e3960:	e7f3      	b.n	e394a <_strtod_r+0x552>
   e3962:	b10b      	cbz	r3, e3968 <_strtod_r+0x570>
   e3964:	4682      	mov	sl, r0
   e3966:	468b      	mov	fp, r1
   e3968:	9b03      	ldr	r3, [sp, #12]
   e396a:	b1eb      	cbz	r3, e39a8 <_strtod_r+0x5b0>
   e396c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e3970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e3974:	2b00      	cmp	r3, #0
   e3976:	4659      	mov	r1, fp
   e3978:	dd16      	ble.n	e39a8 <_strtod_r+0x5b0>
   e397a:	2b1f      	cmp	r3, #31
   e397c:	dd0e      	ble.n	e399c <_strtod_r+0x5a4>
   e397e:	2b34      	cmp	r3, #52	; 0x34
   e3980:	bfde      	ittt	le
   e3982:	3b20      	suble	r3, #32
   e3984:	f04f 32ff 	movle.w	r2, #4294967295
   e3988:	fa02 f303 	lslle.w	r3, r2, r3
   e398c:	f04f 0a00 	mov.w	sl, #0
   e3990:	bfcc      	ite	gt
   e3992:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e3996:	ea03 0b01 	andle.w	fp, r3, r1
   e399a:	e005      	b.n	e39a8 <_strtod_r+0x5b0>
   e399c:	f04f 32ff 	mov.w	r2, #4294967295
   e39a0:	fa02 f303 	lsl.w	r3, r2, r3
   e39a4:	ea03 0a0a 	and.w	sl, r3, sl
   e39a8:	2200      	movs	r2, #0
   e39aa:	2300      	movs	r3, #0
   e39ac:	4650      	mov	r0, sl
   e39ae:	4659      	mov	r1, fp
   e39b0:	f7fe fad6 	bl	e1f60 <__aeabi_dcmpeq>
   e39b4:	2800      	cmp	r0, #0
   e39b6:	d1b9      	bne.n	e392c <_strtod_r+0x534>
   e39b8:	e018      	b.n	e39ec <_strtod_r+0x5f4>
   e39ba:	bf00      	nop
   e39bc:	000e66d5 	.word	0x000e66d5
   e39c0:	000e6f90 	.word	0x000e6f90
   e39c4:	000e6fc9 	.word	0x000e6fc9
   e39c8:	000e6f7c 	.word	0x000e6f7c
   e39cc:	000e7228 	.word	0x000e7228
   e39d0:	000e72f0 	.word	0x000e72f0
   e39d4:	7ca00000 	.word	0x7ca00000
   e39d8:	000e6f98 	.word	0x000e6f98
   e39dc:	7ff00000 	.word	0x7ff00000
   e39e0:	fff80000 	.word	0xfff80000
   e39e4:	7fefffff 	.word	0x7fefffff
   e39e8:	2300      	movs	r3, #0
   e39ea:	9303      	str	r3, [sp, #12]
   e39ec:	9b05      	ldr	r3, [sp, #20]
   e39ee:	9300      	str	r3, [sp, #0]
   e39f0:	9a04      	ldr	r2, [sp, #16]
   e39f2:	9907      	ldr	r1, [sp, #28]
   e39f4:	9802      	ldr	r0, [sp, #8]
   e39f6:	462b      	mov	r3, r5
   e39f8:	f001 fb0b 	bl	e5012 <__s2b>
   e39fc:	9005      	str	r0, [sp, #20]
   e39fe:	2800      	cmp	r0, #0
   e3a00:	f43f af3d 	beq.w	e387e <_strtod_r+0x486>
   e3a04:	f1b9 0f00 	cmp.w	r9, #0
   e3a08:	f1c9 0300 	rsb	r3, r9, #0
   e3a0c:	bfa8      	it	ge
   e3a0e:	2300      	movge	r3, #0
   e3a10:	930d      	str	r3, [sp, #52]	; 0x34
   e3a12:	2400      	movs	r4, #0
   e3a14:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e3a18:	9312      	str	r3, [sp, #72]	; 0x48
   e3a1a:	4625      	mov	r5, r4
   e3a1c:	9b05      	ldr	r3, [sp, #20]
   e3a1e:	9802      	ldr	r0, [sp, #8]
   e3a20:	6859      	ldr	r1, [r3, #4]
   e3a22:	f001 fa6f 	bl	e4f04 <_Balloc>
   e3a26:	9004      	str	r0, [sp, #16]
   e3a28:	2800      	cmp	r0, #0
   e3a2a:	f43f af2c 	beq.w	e3886 <_strtod_r+0x48e>
   e3a2e:	9b05      	ldr	r3, [sp, #20]
   e3a30:	691a      	ldr	r2, [r3, #16]
   e3a32:	3202      	adds	r2, #2
   e3a34:	f103 010c 	add.w	r1, r3, #12
   e3a38:	0092      	lsls	r2, r2, #2
   e3a3a:	300c      	adds	r0, #12
   e3a3c:	f7fe fcc2 	bl	e23c4 <memcpy>
   e3a40:	aa1a      	add	r2, sp, #104	; 0x68
   e3a42:	a919      	add	r1, sp, #100	; 0x64
   e3a44:	ec4b ab10 	vmov	d0, sl, fp
   e3a48:	9802      	ldr	r0, [sp, #8]
   e3a4a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e3a4e:	f001 fd94 	bl	e557a <__d2b>
   e3a52:	9018      	str	r0, [sp, #96]	; 0x60
   e3a54:	2800      	cmp	r0, #0
   e3a56:	f43f af16 	beq.w	e3886 <_strtod_r+0x48e>
   e3a5a:	2101      	movs	r1, #1
   e3a5c:	9802      	ldr	r0, [sp, #8]
   e3a5e:	f001 fb63 	bl	e5128 <__i2b>
   e3a62:	4605      	mov	r5, r0
   e3a64:	2800      	cmp	r0, #0
   e3a66:	f43f af0e 	beq.w	e3886 <_strtod_r+0x48e>
   e3a6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e3a6c:	9903      	ldr	r1, [sp, #12]
   e3a6e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e3a70:	2b00      	cmp	r3, #0
   e3a72:	bfad      	iteet	ge
   e3a74:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e3a76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e3a78:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e3a7c:	eb02 0803 	addge.w	r8, r2, r3
   e3a80:	bfb8      	it	lt
   e3a82:	1ad2      	sublt	r2, r2, r3
   e3a84:	eba3 0301 	sub.w	r3, r3, r1
   e3a88:	4433      	add	r3, r6
   e3a8a:	49b5      	ldr	r1, [pc, #724]	; (e3d60 <_strtod_r+0x968>)
   e3a8c:	bfa8      	it	ge
   e3a8e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e3a90:	3b01      	subs	r3, #1
   e3a92:	428b      	cmp	r3, r1
   e3a94:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e3a98:	f280 808a 	bge.w	e3bb0 <_strtod_r+0x7b8>
   e3a9c:	1ac9      	subs	r1, r1, r3
   e3a9e:	291f      	cmp	r1, #31
   e3aa0:	bfc8      	it	gt
   e3aa2:	4fb0      	ldrgt	r7, [pc, #704]	; (e3d64 <_strtod_r+0x96c>)
   e3aa4:	f04f 0901 	mov.w	r9, #1
   e3aa8:	bfd4      	ite	le
   e3aaa:	fa09 f301 	lslle.w	r3, r9, r1
   e3aae:	1aff      	subgt	r7, r7, r3
   e3ab0:	eba6 0601 	sub.w	r6, r6, r1
   e3ab4:	bfd9      	ittee	le
   e3ab6:	9306      	strle	r3, [sp, #24]
   e3ab8:	2700      	movle	r7, #0
   e3aba:	fa09 f707 	lslgt.w	r7, r9, r7
   e3abe:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e3ac2:	eb08 0906 	add.w	r9, r8, r6
   e3ac6:	9b03      	ldr	r3, [sp, #12]
   e3ac8:	45c8      	cmp	r8, r9
   e3aca:	4416      	add	r6, r2
   e3acc:	441e      	add	r6, r3
   e3ace:	4643      	mov	r3, r8
   e3ad0:	bfa8      	it	ge
   e3ad2:	464b      	movge	r3, r9
   e3ad4:	42b3      	cmp	r3, r6
   e3ad6:	bfa8      	it	ge
   e3ad8:	4633      	movge	r3, r6
   e3ada:	2b00      	cmp	r3, #0
   e3adc:	bfc2      	ittt	gt
   e3ade:	ebc3 0909 	rsbgt	r9, r3, r9
   e3ae2:	1af6      	subgt	r6, r6, r3
   e3ae4:	ebc3 0808 	rsbgt	r8, r3, r8
   e3ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3aea:	2b00      	cmp	r3, #0
   e3aec:	d164      	bne.n	e3bb8 <_strtod_r+0x7c0>
   e3aee:	f1b9 0f00 	cmp.w	r9, #0
   e3af2:	dc7a      	bgt.n	e3bea <_strtod_r+0x7f2>
   e3af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e3af6:	2b00      	cmp	r3, #0
   e3af8:	f040 8081 	bne.w	e3bfe <_strtod_r+0x806>
   e3afc:	2e00      	cmp	r6, #0
   e3afe:	f300 8088 	bgt.w	e3c12 <_strtod_r+0x81a>
   e3b02:	f1b8 0f00 	cmp.w	r8, #0
   e3b06:	f300 808e 	bgt.w	e3c26 <_strtod_r+0x82e>
   e3b0a:	9a04      	ldr	r2, [sp, #16]
   e3b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3b0e:	9802      	ldr	r0, [sp, #8]
   e3b10:	f001 fc5f 	bl	e53d2 <__mdiff>
   e3b14:	4604      	mov	r4, r0
   e3b16:	2800      	cmp	r0, #0
   e3b18:	f43f aeb5 	beq.w	e3886 <_strtod_r+0x48e>
   e3b1c:	68c3      	ldr	r3, [r0, #12]
   e3b1e:	9307      	str	r3, [sp, #28]
   e3b20:	2300      	movs	r3, #0
   e3b22:	60c3      	str	r3, [r0, #12]
   e3b24:	4629      	mov	r1, r5
   e3b26:	f001 fc38 	bl	e539a <__mcmp>
   e3b2a:	2800      	cmp	r0, #0
   e3b2c:	f280 8089 	bge.w	e3c42 <_strtod_r+0x84a>
   e3b30:	9b07      	ldr	r3, [sp, #28]
   e3b32:	2b00      	cmp	r3, #0
   e3b34:	f040 8204 	bne.w	e3f40 <_strtod_r+0xb48>
   e3b38:	f1ba 0f00 	cmp.w	sl, #0
   e3b3c:	f040 8200 	bne.w	e3f40 <_strtod_r+0xb48>
   e3b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3b44:	2b00      	cmp	r3, #0
   e3b46:	f040 81fb 	bne.w	e3f40 <_strtod_r+0xb48>
   e3b4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3b4e:	0d1b      	lsrs	r3, r3, #20
   e3b50:	051b      	lsls	r3, r3, #20
   e3b52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e3b56:	f240 81f3 	bls.w	e3f40 <_strtod_r+0xb48>
   e3b5a:	6963      	ldr	r3, [r4, #20]
   e3b5c:	2b00      	cmp	r3, #0
   e3b5e:	d06c      	beq.n	e3c3a <_strtod_r+0x842>
   e3b60:	4621      	mov	r1, r4
   e3b62:	2201      	movs	r2, #1
   e3b64:	9802      	ldr	r0, [sp, #8]
   e3b66:	f001 fbc7 	bl	e52f8 <__lshift>
   e3b6a:	4629      	mov	r1, r5
   e3b6c:	4604      	mov	r4, r0
   e3b6e:	f001 fc14 	bl	e539a <__mcmp>
   e3b72:	2800      	cmp	r0, #0
   e3b74:	f340 81e4 	ble.w	e3f40 <_strtod_r+0xb48>
   e3b78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3b7c:	9a03      	ldr	r2, [sp, #12]
   e3b7e:	0d1b      	lsrs	r3, r3, #20
   e3b80:	051b      	lsls	r3, r3, #20
   e3b82:	2a00      	cmp	r2, #0
   e3b84:	f000 808c 	beq.w	e3ca0 <_strtod_r+0x8a8>
   e3b88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e3b8c:	f300 8088 	bgt.w	e3ca0 <_strtod_r+0x8a8>
   e3b90:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e3b94:	f300 81d6 	bgt.w	e3f44 <_strtod_r+0xb4c>
   e3b98:	9a02      	ldr	r2, [sp, #8]
   e3b9a:	2322      	movs	r3, #34	; 0x22
   e3b9c:	f04f 0a00 	mov.w	sl, #0
   e3ba0:	f04f 0b00 	mov.w	fp, #0
   e3ba4:	6013      	str	r3, [r2, #0]
   e3ba6:	9b05      	ldr	r3, [sp, #20]
   e3ba8:	2b00      	cmp	r3, #0
   e3baa:	f040 81dc 	bne.w	e3f66 <_strtod_r+0xb6e>
   e3bae:	e1ee      	b.n	e3f8e <_strtod_r+0xb96>
   e3bb0:	2301      	movs	r3, #1
   e3bb2:	2700      	movs	r7, #0
   e3bb4:	9306      	str	r3, [sp, #24]
   e3bb6:	e784      	b.n	e3ac2 <_strtod_r+0x6ca>
   e3bb8:	4629      	mov	r1, r5
   e3bba:	461a      	mov	r2, r3
   e3bbc:	9802      	ldr	r0, [sp, #8]
   e3bbe:	f001 fb4d 	bl	e525c <__pow5mult>
   e3bc2:	4605      	mov	r5, r0
   e3bc4:	2800      	cmp	r0, #0
   e3bc6:	f43f ae5e 	beq.w	e3886 <_strtod_r+0x48e>
   e3bca:	4601      	mov	r1, r0
   e3bcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e3bce:	9802      	ldr	r0, [sp, #8]
   e3bd0:	f001 fab3 	bl	e513a <__multiply>
   e3bd4:	9007      	str	r0, [sp, #28]
   e3bd6:	2800      	cmp	r0, #0
   e3bd8:	f43f ae55 	beq.w	e3886 <_strtod_r+0x48e>
   e3bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3bde:	9802      	ldr	r0, [sp, #8]
   e3be0:	f001 f9c5 	bl	e4f6e <_Bfree>
   e3be4:	9b07      	ldr	r3, [sp, #28]
   e3be6:	9318      	str	r3, [sp, #96]	; 0x60
   e3be8:	e781      	b.n	e3aee <_strtod_r+0x6f6>
   e3bea:	464a      	mov	r2, r9
   e3bec:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3bee:	9802      	ldr	r0, [sp, #8]
   e3bf0:	f001 fb82 	bl	e52f8 <__lshift>
   e3bf4:	9018      	str	r0, [sp, #96]	; 0x60
   e3bf6:	2800      	cmp	r0, #0
   e3bf8:	f47f af7c 	bne.w	e3af4 <_strtod_r+0x6fc>
   e3bfc:	e643      	b.n	e3886 <_strtod_r+0x48e>
   e3bfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e3c00:	9904      	ldr	r1, [sp, #16]
   e3c02:	9802      	ldr	r0, [sp, #8]
   e3c04:	f001 fb2a 	bl	e525c <__pow5mult>
   e3c08:	9004      	str	r0, [sp, #16]
   e3c0a:	2800      	cmp	r0, #0
   e3c0c:	f47f af76 	bne.w	e3afc <_strtod_r+0x704>
   e3c10:	e639      	b.n	e3886 <_strtod_r+0x48e>
   e3c12:	4632      	mov	r2, r6
   e3c14:	9904      	ldr	r1, [sp, #16]
   e3c16:	9802      	ldr	r0, [sp, #8]
   e3c18:	f001 fb6e 	bl	e52f8 <__lshift>
   e3c1c:	9004      	str	r0, [sp, #16]
   e3c1e:	2800      	cmp	r0, #0
   e3c20:	f47f af6f 	bne.w	e3b02 <_strtod_r+0x70a>
   e3c24:	e62f      	b.n	e3886 <_strtod_r+0x48e>
   e3c26:	4629      	mov	r1, r5
   e3c28:	4642      	mov	r2, r8
   e3c2a:	9802      	ldr	r0, [sp, #8]
   e3c2c:	f001 fb64 	bl	e52f8 <__lshift>
   e3c30:	4605      	mov	r5, r0
   e3c32:	2800      	cmp	r0, #0
   e3c34:	f47f af69 	bne.w	e3b0a <_strtod_r+0x712>
   e3c38:	e625      	b.n	e3886 <_strtod_r+0x48e>
   e3c3a:	6923      	ldr	r3, [r4, #16]
   e3c3c:	2b01      	cmp	r3, #1
   e3c3e:	dc8f      	bgt.n	e3b60 <_strtod_r+0x768>
   e3c40:	e17e      	b.n	e3f40 <_strtod_r+0xb48>
   e3c42:	d161      	bne.n	e3d08 <_strtod_r+0x910>
   e3c44:	9a07      	ldr	r2, [sp, #28]
   e3c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3c4a:	b322      	cbz	r2, e3c96 <_strtod_r+0x89e>
   e3c4c:	4946      	ldr	r1, [pc, #280]	; (e3d68 <_strtod_r+0x970>)
   e3c4e:	428b      	cmp	r3, r1
   e3c50:	465a      	mov	r2, fp
   e3c52:	d12e      	bne.n	e3cb2 <_strtod_r+0x8ba>
   e3c54:	9b03      	ldr	r3, [sp, #12]
   e3c56:	4651      	mov	r1, sl
   e3c58:	b163      	cbz	r3, e3c74 <_strtod_r+0x87c>
   e3c5a:	4b44      	ldr	r3, [pc, #272]	; (e3d6c <_strtod_r+0x974>)
   e3c5c:	4013      	ands	r3, r2
   e3c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e3c62:	d807      	bhi.n	e3c74 <_strtod_r+0x87c>
   e3c64:	0d1b      	lsrs	r3, r3, #20
   e3c66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e3c6a:	f04f 30ff 	mov.w	r0, #4294967295
   e3c6e:	fa00 f303 	lsl.w	r3, r0, r3
   e3c72:	e001      	b.n	e3c78 <_strtod_r+0x880>
   e3c74:	f04f 33ff 	mov.w	r3, #4294967295
   e3c78:	428b      	cmp	r3, r1
   e3c7a:	d11a      	bne.n	e3cb2 <_strtod_r+0x8ba>
   e3c7c:	493c      	ldr	r1, [pc, #240]	; (e3d70 <_strtod_r+0x978>)
   e3c7e:	428a      	cmp	r2, r1
   e3c80:	d102      	bne.n	e3c88 <_strtod_r+0x890>
   e3c82:	3301      	adds	r3, #1
   e3c84:	f43f adff 	beq.w	e3886 <_strtod_r+0x48e>
   e3c88:	4b38      	ldr	r3, [pc, #224]	; (e3d6c <_strtod_r+0x974>)
   e3c8a:	4013      	ands	r3, r2
   e3c8c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e3c90:	f04f 0a00 	mov.w	sl, #0
   e3c94:	e154      	b.n	e3f40 <_strtod_r+0xb48>
   e3c96:	b963      	cbnz	r3, e3cb2 <_strtod_r+0x8ba>
   e3c98:	f1ba 0f00 	cmp.w	sl, #0
   e3c9c:	d109      	bne.n	e3cb2 <_strtod_r+0x8ba>
   e3c9e:	e76b      	b.n	e3b78 <_strtod_r+0x780>
   e3ca0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e3ca4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e3ca8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e3cac:	f04f 3aff 	mov.w	sl, #4294967295
   e3cb0:	e146      	b.n	e3f40 <_strtod_r+0xb48>
   e3cb2:	b117      	cbz	r7, e3cba <_strtod_r+0x8c2>
   e3cb4:	ea17 0f0b 	tst.w	r7, fp
   e3cb8:	e002      	b.n	e3cc0 <_strtod_r+0x8c8>
   e3cba:	9b06      	ldr	r3, [sp, #24]
   e3cbc:	ea13 0f0a 	tst.w	r3, sl
   e3cc0:	f000 813e 	beq.w	e3f40 <_strtod_r+0xb48>
   e3cc4:	9b07      	ldr	r3, [sp, #28]
   e3cc6:	9a03      	ldr	r2, [sp, #12]
   e3cc8:	4650      	mov	r0, sl
   e3cca:	4659      	mov	r1, fp
   e3ccc:	b153      	cbz	r3, e3ce4 <_strtod_r+0x8ec>
   e3cce:	f7ff fb75 	bl	e33bc <sulp>
   e3cd2:	4602      	mov	r2, r0
   e3cd4:	460b      	mov	r3, r1
   e3cd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3cda:	f7fd fd27 	bl	e172c <__adddf3>
   e3cde:	4682      	mov	sl, r0
   e3ce0:	468b      	mov	fp, r1
   e3ce2:	e12d      	b.n	e3f40 <_strtod_r+0xb48>
   e3ce4:	f7ff fb6a 	bl	e33bc <sulp>
   e3ce8:	4602      	mov	r2, r0
   e3cea:	460b      	mov	r3, r1
   e3cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3cf0:	f7fd fd1a 	bl	e1728 <__aeabi_dsub>
   e3cf4:	2200      	movs	r2, #0
   e3cf6:	2300      	movs	r3, #0
   e3cf8:	4682      	mov	sl, r0
   e3cfa:	468b      	mov	fp, r1
   e3cfc:	f7fe f930 	bl	e1f60 <__aeabi_dcmpeq>
   e3d00:	2800      	cmp	r0, #0
   e3d02:	f47f af49 	bne.w	e3b98 <_strtod_r+0x7a0>
   e3d06:	e11b      	b.n	e3f40 <_strtod_r+0xb48>
   e3d08:	4629      	mov	r1, r5
   e3d0a:	4620      	mov	r0, r4
   e3d0c:	f001 fc83 	bl	e5616 <__ratio>
   e3d10:	ec57 6b10 	vmov	r6, r7, d0
   e3d14:	2200      	movs	r2, #0
   e3d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e3d1a:	ee10 0a10 	vmov	r0, s0
   e3d1e:	4639      	mov	r1, r7
   e3d20:	f7fe f932 	bl	e1f88 <__aeabi_dcmple>
   e3d24:	2800      	cmp	r0, #0
   e3d26:	d042      	beq.n	e3dae <_strtod_r+0x9b6>
   e3d28:	9b07      	ldr	r3, [sp, #28]
   e3d2a:	b123      	cbz	r3, e3d36 <_strtod_r+0x93e>
   e3d2c:	f04f 0800 	mov.w	r8, #0
   e3d30:	f8df 9040 	ldr.w	r9, [pc, #64]	; e3d74 <_strtod_r+0x97c>
   e3d34:	e011      	b.n	e3d5a <_strtod_r+0x962>
   e3d36:	f1ba 0f00 	cmp.w	sl, #0
   e3d3a:	d103      	bne.n	e3d44 <_strtod_r+0x94c>
   e3d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3d40:	b93b      	cbnz	r3, e3d52 <_strtod_r+0x95a>
   e3d42:	e01b      	b.n	e3d7c <_strtod_r+0x984>
   e3d44:	f1ba 0f01 	cmp.w	sl, #1
   e3d48:	d103      	bne.n	e3d52 <_strtod_r+0x95a>
   e3d4a:	f1bb 0f00 	cmp.w	fp, #0
   e3d4e:	f43f af23 	beq.w	e3b98 <_strtod_r+0x7a0>
   e3d52:	f8df 9024 	ldr.w	r9, [pc, #36]	; e3d78 <_strtod_r+0x980>
   e3d56:	f04f 0800 	mov.w	r8, #0
   e3d5a:	2600      	movs	r6, #0
   e3d5c:	4f05      	ldr	r7, [pc, #20]	; (e3d74 <_strtod_r+0x97c>)
   e3d5e:	e039      	b.n	e3dd4 <_strtod_r+0x9dc>
   e3d60:	fffffc02 	.word	0xfffffc02
   e3d64:	fffffbe2 	.word	0xfffffbe2
   e3d68:	000fffff 	.word	0x000fffff
   e3d6c:	7ff00000 	.word	0x7ff00000
   e3d70:	7fefffff 	.word	0x7fefffff
   e3d74:	3ff00000 	.word	0x3ff00000
   e3d78:	bff00000 	.word	0xbff00000
   e3d7c:	2200      	movs	r2, #0
   e3d7e:	4b98      	ldr	r3, [pc, #608]	; (e3fe0 <_strtod_r+0xbe8>)
   e3d80:	4630      	mov	r0, r6
   e3d82:	4639      	mov	r1, r7
   e3d84:	f7fe f8f6 	bl	e1f74 <__aeabi_dcmplt>
   e3d88:	b940      	cbnz	r0, e3d9c <_strtod_r+0x9a4>
   e3d8a:	4630      	mov	r0, r6
   e3d8c:	4639      	mov	r1, r7
   e3d8e:	2200      	movs	r2, #0
   e3d90:	4b94      	ldr	r3, [pc, #592]	; (e3fe4 <_strtod_r+0xbec>)
   e3d92:	f7fd fe7d 	bl	e1a90 <__aeabi_dmul>
   e3d96:	4606      	mov	r6, r0
   e3d98:	460f      	mov	r7, r1
   e3d9a:	e001      	b.n	e3da0 <_strtod_r+0x9a8>
   e3d9c:	4f91      	ldr	r7, [pc, #580]	; (e3fe4 <_strtod_r+0xbec>)
   e3d9e:	2600      	movs	r6, #0
   e3da0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e3da4:	9614      	str	r6, [sp, #80]	; 0x50
   e3da6:	9315      	str	r3, [sp, #84]	; 0x54
   e3da8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e3dac:	e012      	b.n	e3dd4 <_strtod_r+0x9dc>
   e3dae:	4b8d      	ldr	r3, [pc, #564]	; (e3fe4 <_strtod_r+0xbec>)
   e3db0:	4630      	mov	r0, r6
   e3db2:	4639      	mov	r1, r7
   e3db4:	2200      	movs	r2, #0
   e3db6:	f7fd fe6b 	bl	e1a90 <__aeabi_dmul>
   e3dba:	9b07      	ldr	r3, [sp, #28]
   e3dbc:	4606      	mov	r6, r0
   e3dbe:	460f      	mov	r7, r1
   e3dc0:	b923      	cbnz	r3, e3dcc <_strtod_r+0x9d4>
   e3dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e3dc6:	900e      	str	r0, [sp, #56]	; 0x38
   e3dc8:	930f      	str	r3, [sp, #60]	; 0x3c
   e3dca:	e001      	b.n	e3dd0 <_strtod_r+0x9d8>
   e3dcc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e3dd0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e3dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3dd8:	0d1b      	lsrs	r3, r3, #20
   e3dda:	051b      	lsls	r3, r3, #20
   e3ddc:	9306      	str	r3, [sp, #24]
   e3dde:	9a06      	ldr	r2, [sp, #24]
   e3de0:	4b81      	ldr	r3, [pc, #516]	; (e3fe8 <_strtod_r+0xbf0>)
   e3de2:	429a      	cmp	r2, r3
   e3de4:	d12b      	bne.n	e3e3e <_strtod_r+0xa46>
   e3de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e3dea:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e3dee:	ec4b ab10 	vmov	d0, sl, fp
   e3df2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e3df6:	f001 fb4b 	bl	e5490 <__ulp>
   e3dfa:	4640      	mov	r0, r8
   e3dfc:	ec53 2b10 	vmov	r2, r3, d0
   e3e00:	4649      	mov	r1, r9
   e3e02:	f7fd fe45 	bl	e1a90 <__aeabi_dmul>
   e3e06:	4652      	mov	r2, sl
   e3e08:	465b      	mov	r3, fp
   e3e0a:	f7fd fc8f 	bl	e172c <__adddf3>
   e3e0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e3e12:	0d1b      	lsrs	r3, r3, #20
   e3e14:	4a75      	ldr	r2, [pc, #468]	; (e3fec <_strtod_r+0xbf4>)
   e3e16:	051b      	lsls	r3, r3, #20
   e3e18:	4293      	cmp	r3, r2
   e3e1a:	4682      	mov	sl, r0
   e3e1c:	d90c      	bls.n	e3e38 <_strtod_r+0xa40>
   e3e1e:	4b74      	ldr	r3, [pc, #464]	; (e3ff0 <_strtod_r+0xbf8>)
   e3e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e3e22:	429a      	cmp	r2, r3
   e3e24:	d103      	bne.n	e3e2e <_strtod_r+0xa36>
   e3e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3e28:	3301      	adds	r3, #1
   e3e2a:	f43f ad2c 	beq.w	e3886 <_strtod_r+0x48e>
   e3e2e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e3ff0 <_strtod_r+0xbf8>
   e3e32:	f04f 3aff 	mov.w	sl, #4294967295
   e3e36:	e072      	b.n	e3f1e <_strtod_r+0xb26>
   e3e38:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e3e3c:	e038      	b.n	e3eb0 <_strtod_r+0xab8>
   e3e3e:	9b03      	ldr	r3, [sp, #12]
   e3e40:	b333      	cbz	r3, e3e90 <_strtod_r+0xa98>
   e3e42:	9b06      	ldr	r3, [sp, #24]
   e3e44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e3e48:	d822      	bhi.n	e3e90 <_strtod_r+0xa98>
   e3e4a:	a35d      	add	r3, pc, #372	; (adr r3, e3fc0 <_strtod_r+0xbc8>)
   e3e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3e50:	4630      	mov	r0, r6
   e3e52:	4639      	mov	r1, r7
   e3e54:	f7fe f898 	bl	e1f88 <__aeabi_dcmple>
   e3e58:	b1a8      	cbz	r0, e3e86 <_strtod_r+0xa8e>
   e3e5a:	4639      	mov	r1, r7
   e3e5c:	4630      	mov	r0, r6
   e3e5e:	f7fe f8ef 	bl	e2040 <__aeabi_d2uiz>
   e3e62:	2800      	cmp	r0, #0
   e3e64:	bf08      	it	eq
   e3e66:	2001      	moveq	r0, #1
   e3e68:	f7fd fd9c 	bl	e19a4 <__aeabi_ui2d>
   e3e6c:	9b07      	ldr	r3, [sp, #28]
   e3e6e:	4606      	mov	r6, r0
   e3e70:	460f      	mov	r7, r1
   e3e72:	b923      	cbnz	r3, e3e7e <_strtod_r+0xa86>
   e3e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e3e78:	9010      	str	r0, [sp, #64]	; 0x40
   e3e7a:	9311      	str	r3, [sp, #68]	; 0x44
   e3e7c:	e001      	b.n	e3e82 <_strtod_r+0xa8a>
   e3e7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e3e82:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e3e86:	9a06      	ldr	r2, [sp, #24]
   e3e88:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e3e8c:	ebc2 0903 	rsb	r9, r2, r3
   e3e90:	ed9d 0b08 	vldr	d0, [sp, #32]
   e3e94:	f001 fafc 	bl	e5490 <__ulp>
   e3e98:	4640      	mov	r0, r8
   e3e9a:	ec53 2b10 	vmov	r2, r3, d0
   e3e9e:	4649      	mov	r1, r9
   e3ea0:	f7fd fdf6 	bl	e1a90 <__aeabi_dmul>
   e3ea4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e3ea8:	f7fd fc40 	bl	e172c <__adddf3>
   e3eac:	4682      	mov	sl, r0
   e3eae:	468b      	mov	fp, r1
   e3eb0:	9b03      	ldr	r3, [sp, #12]
   e3eb2:	bba3      	cbnz	r3, e3f1e <_strtod_r+0xb26>
   e3eb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3eb8:	0d1b      	lsrs	r3, r3, #20
   e3eba:	9a06      	ldr	r2, [sp, #24]
   e3ebc:	051b      	lsls	r3, r3, #20
   e3ebe:	429a      	cmp	r2, r3
   e3ec0:	46d8      	mov	r8, fp
   e3ec2:	d12c      	bne.n	e3f1e <_strtod_r+0xb26>
   e3ec4:	4639      	mov	r1, r7
   e3ec6:	4630      	mov	r0, r6
   e3ec8:	f7fe f892 	bl	e1ff0 <__aeabi_d2iz>
   e3ecc:	f7fd fd7a 	bl	e19c4 <__aeabi_i2d>
   e3ed0:	460b      	mov	r3, r1
   e3ed2:	4602      	mov	r2, r0
   e3ed4:	4639      	mov	r1, r7
   e3ed6:	4630      	mov	r0, r6
   e3ed8:	f7fd fc26 	bl	e1728 <__aeabi_dsub>
   e3edc:	9b07      	ldr	r3, [sp, #28]
   e3ede:	4606      	mov	r6, r0
   e3ee0:	460f      	mov	r7, r1
   e3ee2:	b92b      	cbnz	r3, e3ef0 <_strtod_r+0xaf8>
   e3ee4:	f1ba 0f00 	cmp.w	sl, #0
   e3ee8:	d102      	bne.n	e3ef0 <_strtod_r+0xaf8>
   e3eea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3eee:	b183      	cbz	r3, e3f12 <_strtod_r+0xb1a>
   e3ef0:	a335      	add	r3, pc, #212	; (adr r3, e3fc8 <_strtod_r+0xbd0>)
   e3ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3ef6:	4630      	mov	r0, r6
   e3ef8:	4639      	mov	r1, r7
   e3efa:	f7fe f83b 	bl	e1f74 <__aeabi_dcmplt>
   e3efe:	2800      	cmp	r0, #0
   e3f00:	d131      	bne.n	e3f66 <_strtod_r+0xb6e>
   e3f02:	a333      	add	r3, pc, #204	; (adr r3, e3fd0 <_strtod_r+0xbd8>)
   e3f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3f08:	4630      	mov	r0, r6
   e3f0a:	4639      	mov	r1, r7
   e3f0c:	f7fe f850 	bl	e1fb0 <__aeabi_dcmpgt>
   e3f10:	e004      	b.n	e3f1c <_strtod_r+0xb24>
   e3f12:	a331      	add	r3, pc, #196	; (adr r3, e3fd8 <_strtod_r+0xbe0>)
   e3f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3f18:	f7fe f82c 	bl	e1f74 <__aeabi_dcmplt>
   e3f1c:	bb18      	cbnz	r0, e3f66 <_strtod_r+0xb6e>
   e3f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3f20:	9802      	ldr	r0, [sp, #8]
   e3f22:	f001 f824 	bl	e4f6e <_Bfree>
   e3f26:	9904      	ldr	r1, [sp, #16]
   e3f28:	9802      	ldr	r0, [sp, #8]
   e3f2a:	f001 f820 	bl	e4f6e <_Bfree>
   e3f2e:	4629      	mov	r1, r5
   e3f30:	9802      	ldr	r0, [sp, #8]
   e3f32:	f001 f81c 	bl	e4f6e <_Bfree>
   e3f36:	4621      	mov	r1, r4
   e3f38:	9802      	ldr	r0, [sp, #8]
   e3f3a:	f001 f818 	bl	e4f6e <_Bfree>
   e3f3e:	e56d      	b.n	e3a1c <_strtod_r+0x624>
   e3f40:	9b03      	ldr	r3, [sp, #12]
   e3f42:	b183      	cbz	r3, e3f66 <_strtod_r+0xb6e>
   e3f44:	4b2b      	ldr	r3, [pc, #172]	; (e3ff4 <_strtod_r+0xbfc>)
   e3f46:	930b      	str	r3, [sp, #44]	; 0x2c
   e3f48:	2300      	movs	r3, #0
   e3f4a:	930a      	str	r3, [sp, #40]	; 0x28
   e3f4c:	4650      	mov	r0, sl
   e3f4e:	4659      	mov	r1, fp
   e3f50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e3f54:	f7fd fd9c 	bl	e1a90 <__aeabi_dmul>
   e3f58:	4682      	mov	sl, r0
   e3f5a:	468b      	mov	fp, r1
   e3f5c:	b919      	cbnz	r1, e3f66 <_strtod_r+0xb6e>
   e3f5e:	b910      	cbnz	r0, e3f66 <_strtod_r+0xb6e>
   e3f60:	9a02      	ldr	r2, [sp, #8]
   e3f62:	2322      	movs	r3, #34	; 0x22
   e3f64:	6013      	str	r3, [r2, #0]
   e3f66:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3f68:	9802      	ldr	r0, [sp, #8]
   e3f6a:	f001 f800 	bl	e4f6e <_Bfree>
   e3f6e:	9904      	ldr	r1, [sp, #16]
   e3f70:	9802      	ldr	r0, [sp, #8]
   e3f72:	f000 fffc 	bl	e4f6e <_Bfree>
   e3f76:	4629      	mov	r1, r5
   e3f78:	9802      	ldr	r0, [sp, #8]
   e3f7a:	f000 fff8 	bl	e4f6e <_Bfree>
   e3f7e:	9905      	ldr	r1, [sp, #20]
   e3f80:	9802      	ldr	r0, [sp, #8]
   e3f82:	f000 fff4 	bl	e4f6e <_Bfree>
   e3f86:	4621      	mov	r1, r4
   e3f88:	9802      	ldr	r0, [sp, #8]
   e3f8a:	f000 fff0 	bl	e4f6e <_Bfree>
   e3f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e3f90:	b113      	cbz	r3, e3f98 <_strtod_r+0xba0>
   e3f92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e3f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3f96:	6013      	str	r3, [r2, #0]
   e3f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3f9a:	b11b      	cbz	r3, e3fa4 <_strtod_r+0xbac>
   e3f9c:	4652      	mov	r2, sl
   e3f9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e3fa2:	e007      	b.n	e3fb4 <_strtod_r+0xbbc>
   e3fa4:	4652      	mov	r2, sl
   e3fa6:	465b      	mov	r3, fp
   e3fa8:	e004      	b.n	e3fb4 <_strtod_r+0xbbc>
   e3faa:	2500      	movs	r5, #0
   e3fac:	462a      	mov	r2, r5
   e3fae:	2101      	movs	r1, #1
   e3fb0:	f7ff bb41 	b.w	e3636 <_strtod_r+0x23e>
   e3fb4:	ec43 2b10 	vmov	d0, r2, r3
   e3fb8:	b01d      	add	sp, #116	; 0x74
   e3fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3fbe:	bf00      	nop
   e3fc0:	ffc00000 	.word	0xffc00000
   e3fc4:	41dfffff 	.word	0x41dfffff
   e3fc8:	94a03595 	.word	0x94a03595
   e3fcc:	3fdfffff 	.word	0x3fdfffff
   e3fd0:	35afe535 	.word	0x35afe535
   e3fd4:	3fe00000 	.word	0x3fe00000
   e3fd8:	94a03595 	.word	0x94a03595
   e3fdc:	3fcfffff 	.word	0x3fcfffff
   e3fe0:	3ff00000 	.word	0x3ff00000
   e3fe4:	3fe00000 	.word	0x3fe00000
   e3fe8:	7fe00000 	.word	0x7fe00000
   e3fec:	7c9fffff 	.word	0x7c9fffff
   e3ff0:	7fefffff 	.word	0x7fefffff
   e3ff4:	39500000 	.word	0x39500000

000e3ff8 <strtod>:
   e3ff8:	4b02      	ldr	r3, [pc, #8]	; (e4004 <strtod+0xc>)
   e3ffa:	460a      	mov	r2, r1
   e3ffc:	4601      	mov	r1, r0
   e3ffe:	6818      	ldr	r0, [r3, #0]
   e4000:	f7ff b9fa 	b.w	e33f8 <_strtod_r>
   e4004:	2003d628 	.word	0x2003d628

000e4008 <_strtol_r>:
   e4008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e400c:	4680      	mov	r8, r0
   e400e:	4840      	ldr	r0, [pc, #256]	; (e4110 <_strtol_r+0x108>)
   e4010:	f8d0 9000 	ldr.w	r9, [r0]
   e4014:	460f      	mov	r7, r1
   e4016:	463d      	mov	r5, r7
   e4018:	f815 4b01 	ldrb.w	r4, [r5], #1
   e401c:	eb09 0004 	add.w	r0, r9, r4
   e4020:	7840      	ldrb	r0, [r0, #1]
   e4022:	f000 0008 	and.w	r0, r0, #8
   e4026:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e402a:	b108      	cbz	r0, e4030 <_strtol_r+0x28>
   e402c:	462f      	mov	r7, r5
   e402e:	e7f2      	b.n	e4016 <_strtol_r+0xe>
   e4030:	2c2d      	cmp	r4, #45	; 0x2d
   e4032:	d103      	bne.n	e403c <_strtol_r+0x34>
   e4034:	1cbd      	adds	r5, r7, #2
   e4036:	787c      	ldrb	r4, [r7, #1]
   e4038:	2601      	movs	r6, #1
   e403a:	e003      	b.n	e4044 <_strtol_r+0x3c>
   e403c:	2c2b      	cmp	r4, #43	; 0x2b
   e403e:	bf04      	itt	eq
   e4040:	787c      	ldrbeq	r4, [r7, #1]
   e4042:	1cbd      	addeq	r5, r7, #2
   e4044:	b113      	cbz	r3, e404c <_strtol_r+0x44>
   e4046:	2b10      	cmp	r3, #16
   e4048:	d10a      	bne.n	e4060 <_strtol_r+0x58>
   e404a:	e05b      	b.n	e4104 <_strtol_r+0xfc>
   e404c:	2c30      	cmp	r4, #48	; 0x30
   e404e:	d157      	bne.n	e4100 <_strtol_r+0xf8>
   e4050:	7828      	ldrb	r0, [r5, #0]
   e4052:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e4056:	2858      	cmp	r0, #88	; 0x58
   e4058:	d14d      	bne.n	e40f6 <_strtol_r+0xee>
   e405a:	786c      	ldrb	r4, [r5, #1]
   e405c:	2310      	movs	r3, #16
   e405e:	3502      	adds	r5, #2
   e4060:	2e00      	cmp	r6, #0
   e4062:	bf14      	ite	ne
   e4064:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e4068:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e406c:	2700      	movs	r7, #0
   e406e:	fbbc faf3 	udiv	sl, ip, r3
   e4072:	4638      	mov	r0, r7
   e4074:	fb03 cc1a 	mls	ip, r3, sl, ip
   e4078:	eb09 0e04 	add.w	lr, r9, r4
   e407c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e4080:	f01e 0f04 	tst.w	lr, #4
   e4084:	d001      	beq.n	e408a <_strtol_r+0x82>
   e4086:	3c30      	subs	r4, #48	; 0x30
   e4088:	e00b      	b.n	e40a2 <_strtol_r+0x9a>
   e408a:	f01e 0e03 	ands.w	lr, lr, #3
   e408e:	d01b      	beq.n	e40c8 <_strtol_r+0xc0>
   e4090:	f1be 0f01 	cmp.w	lr, #1
   e4094:	bf0c      	ite	eq
   e4096:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e409a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e409e:	ebce 0404 	rsb	r4, lr, r4
   e40a2:	42a3      	cmp	r3, r4
   e40a4:	dd10      	ble.n	e40c8 <_strtol_r+0xc0>
   e40a6:	f1b7 3fff 	cmp.w	r7, #4294967295
   e40aa:	d00a      	beq.n	e40c2 <_strtol_r+0xba>
   e40ac:	4550      	cmp	r0, sl
   e40ae:	d806      	bhi.n	e40be <_strtol_r+0xb6>
   e40b0:	d101      	bne.n	e40b6 <_strtol_r+0xae>
   e40b2:	4564      	cmp	r4, ip
   e40b4:	dc03      	bgt.n	e40be <_strtol_r+0xb6>
   e40b6:	fb03 4000 	mla	r0, r3, r0, r4
   e40ba:	2701      	movs	r7, #1
   e40bc:	e001      	b.n	e40c2 <_strtol_r+0xba>
   e40be:	f04f 37ff 	mov.w	r7, #4294967295
   e40c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   e40c6:	e7d7      	b.n	e4078 <_strtol_r+0x70>
   e40c8:	1c7b      	adds	r3, r7, #1
   e40ca:	d10c      	bne.n	e40e6 <_strtol_r+0xde>
   e40cc:	2e00      	cmp	r6, #0
   e40ce:	f04f 0322 	mov.w	r3, #34	; 0x22
   e40d2:	bf14      	ite	ne
   e40d4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e40d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e40dc:	f8c8 3000 	str.w	r3, [r8]
   e40e0:	b92a      	cbnz	r2, e40ee <_strtol_r+0xe6>
   e40e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e40e6:	b106      	cbz	r6, e40ea <_strtol_r+0xe2>
   e40e8:	4240      	negs	r0, r0
   e40ea:	b172      	cbz	r2, e410a <_strtol_r+0x102>
   e40ec:	b107      	cbz	r7, e40f0 <_strtol_r+0xe8>
   e40ee:	1e69      	subs	r1, r5, #1
   e40f0:	6011      	str	r1, [r2, #0]
   e40f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e40f6:	2430      	movs	r4, #48	; 0x30
   e40f8:	2b00      	cmp	r3, #0
   e40fa:	d1b1      	bne.n	e4060 <_strtol_r+0x58>
   e40fc:	2308      	movs	r3, #8
   e40fe:	e7af      	b.n	e4060 <_strtol_r+0x58>
   e4100:	230a      	movs	r3, #10
   e4102:	e7ad      	b.n	e4060 <_strtol_r+0x58>
   e4104:	2c30      	cmp	r4, #48	; 0x30
   e4106:	d0a3      	beq.n	e4050 <_strtol_r+0x48>
   e4108:	e7aa      	b.n	e4060 <_strtol_r+0x58>
   e410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e410e:	bf00      	nop
   e4110:	2003d5c4 	.word	0x2003d5c4

000e4114 <strtol>:
   e4114:	4613      	mov	r3, r2
   e4116:	460a      	mov	r2, r1
   e4118:	4601      	mov	r1, r0
   e411a:	4802      	ldr	r0, [pc, #8]	; (e4124 <strtol+0x10>)
   e411c:	6800      	ldr	r0, [r0, #0]
   e411e:	f7ff bf73 	b.w	e4008 <_strtol_r>
   e4122:	bf00      	nop
   e4124:	2003d628 	.word	0x2003d628

000e4128 <_strtoul_r>:
   e4128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e412c:	4680      	mov	r8, r0
   e412e:	483c      	ldr	r0, [pc, #240]	; (e4220 <_strtoul_r+0xf8>)
   e4130:	f8d0 9000 	ldr.w	r9, [r0]
   e4134:	460e      	mov	r6, r1
   e4136:	4635      	mov	r5, r6
   e4138:	f815 4b01 	ldrb.w	r4, [r5], #1
   e413c:	eb09 0004 	add.w	r0, r9, r4
   e4140:	7840      	ldrb	r0, [r0, #1]
   e4142:	f000 0008 	and.w	r0, r0, #8
   e4146:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e414a:	b108      	cbz	r0, e4150 <_strtoul_r+0x28>
   e414c:	462e      	mov	r6, r5
   e414e:	e7f2      	b.n	e4136 <_strtoul_r+0xe>
   e4150:	2c2d      	cmp	r4, #45	; 0x2d
   e4152:	d103      	bne.n	e415c <_strtoul_r+0x34>
   e4154:	1cb5      	adds	r5, r6, #2
   e4156:	7874      	ldrb	r4, [r6, #1]
   e4158:	2701      	movs	r7, #1
   e415a:	e003      	b.n	e4164 <_strtoul_r+0x3c>
   e415c:	2c2b      	cmp	r4, #43	; 0x2b
   e415e:	bf04      	itt	eq
   e4160:	7874      	ldrbeq	r4, [r6, #1]
   e4162:	1cb5      	addeq	r5, r6, #2
   e4164:	b113      	cbz	r3, e416c <_strtoul_r+0x44>
   e4166:	2b10      	cmp	r3, #16
   e4168:	d10a      	bne.n	e4180 <_strtoul_r+0x58>
   e416a:	e053      	b.n	e4214 <_strtoul_r+0xec>
   e416c:	2c30      	cmp	r4, #48	; 0x30
   e416e:	d14f      	bne.n	e4210 <_strtoul_r+0xe8>
   e4170:	7828      	ldrb	r0, [r5, #0]
   e4172:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e4176:	2858      	cmp	r0, #88	; 0x58
   e4178:	d145      	bne.n	e4206 <_strtoul_r+0xde>
   e417a:	786c      	ldrb	r4, [r5, #1]
   e417c:	2310      	movs	r3, #16
   e417e:	3502      	adds	r5, #2
   e4180:	f04f 3cff 	mov.w	ip, #4294967295
   e4184:	2600      	movs	r6, #0
   e4186:	fbbc fcf3 	udiv	ip, ip, r3
   e418a:	fb03 fa0c 	mul.w	sl, r3, ip
   e418e:	ea6f 0a0a 	mvn.w	sl, sl
   e4192:	4630      	mov	r0, r6
   e4194:	eb09 0e04 	add.w	lr, r9, r4
   e4198:	f89e e001 	ldrb.w	lr, [lr, #1]
   e419c:	f01e 0f04 	tst.w	lr, #4
   e41a0:	d001      	beq.n	e41a6 <_strtoul_r+0x7e>
   e41a2:	3c30      	subs	r4, #48	; 0x30
   e41a4:	e00b      	b.n	e41be <_strtoul_r+0x96>
   e41a6:	f01e 0e03 	ands.w	lr, lr, #3
   e41aa:	d01a      	beq.n	e41e2 <_strtoul_r+0xba>
   e41ac:	f1be 0f01 	cmp.w	lr, #1
   e41b0:	bf0c      	ite	eq
   e41b2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e41b6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e41ba:	ebce 0404 	rsb	r4, lr, r4
   e41be:	42a3      	cmp	r3, r4
   e41c0:	dd0f      	ble.n	e41e2 <_strtoul_r+0xba>
   e41c2:	2e00      	cmp	r6, #0
   e41c4:	db08      	blt.n	e41d8 <_strtoul_r+0xb0>
   e41c6:	4560      	cmp	r0, ip
   e41c8:	d806      	bhi.n	e41d8 <_strtoul_r+0xb0>
   e41ca:	d101      	bne.n	e41d0 <_strtoul_r+0xa8>
   e41cc:	4554      	cmp	r4, sl
   e41ce:	dc03      	bgt.n	e41d8 <_strtoul_r+0xb0>
   e41d0:	fb03 4000 	mla	r0, r3, r0, r4
   e41d4:	2601      	movs	r6, #1
   e41d6:	e001      	b.n	e41dc <_strtoul_r+0xb4>
   e41d8:	f04f 36ff 	mov.w	r6, #4294967295
   e41dc:	f815 4b01 	ldrb.w	r4, [r5], #1
   e41e0:	e7d8      	b.n	e4194 <_strtoul_r+0x6c>
   e41e2:	2e00      	cmp	r6, #0
   e41e4:	da07      	bge.n	e41f6 <_strtoul_r+0xce>
   e41e6:	2322      	movs	r3, #34	; 0x22
   e41e8:	f8c8 3000 	str.w	r3, [r8]
   e41ec:	f04f 30ff 	mov.w	r0, #4294967295
   e41f0:	b92a      	cbnz	r2, e41fe <_strtoul_r+0xd6>
   e41f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e41f6:	b107      	cbz	r7, e41fa <_strtoul_r+0xd2>
   e41f8:	4240      	negs	r0, r0
   e41fa:	b172      	cbz	r2, e421a <_strtoul_r+0xf2>
   e41fc:	b106      	cbz	r6, e4200 <_strtoul_r+0xd8>
   e41fe:	1e69      	subs	r1, r5, #1
   e4200:	6011      	str	r1, [r2, #0]
   e4202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4206:	2430      	movs	r4, #48	; 0x30
   e4208:	2b00      	cmp	r3, #0
   e420a:	d1b9      	bne.n	e4180 <_strtoul_r+0x58>
   e420c:	2308      	movs	r3, #8
   e420e:	e7b7      	b.n	e4180 <_strtoul_r+0x58>
   e4210:	230a      	movs	r3, #10
   e4212:	e7b5      	b.n	e4180 <_strtoul_r+0x58>
   e4214:	2c30      	cmp	r4, #48	; 0x30
   e4216:	d0ab      	beq.n	e4170 <_strtoul_r+0x48>
   e4218:	e7b2      	b.n	e4180 <_strtoul_r+0x58>
   e421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e421e:	bf00      	nop
   e4220:	2003d5c4 	.word	0x2003d5c4

000e4224 <strtoul>:
   e4224:	4613      	mov	r3, r2
   e4226:	460a      	mov	r2, r1
   e4228:	4601      	mov	r1, r0
   e422a:	4802      	ldr	r0, [pc, #8]	; (e4234 <strtoul+0x10>)
   e422c:	6800      	ldr	r0, [r0, #0]
   e422e:	f7ff bf7b 	b.w	e4128 <_strtoul_r>
   e4232:	bf00      	nop
   e4234:	2003d628 	.word	0x2003d628

000e4238 <__get_current_time_locale>:
   e4238:	4b04      	ldr	r3, [pc, #16]	; (e424c <__get_current_time_locale+0x14>)
   e423a:	4a05      	ldr	r2, [pc, #20]	; (e4250 <__get_current_time_locale+0x18>)
   e423c:	6818      	ldr	r0, [r3, #0]
   e423e:	4b05      	ldr	r3, [pc, #20]	; (e4254 <__get_current_time_locale+0x1c>)
   e4240:	2800      	cmp	r0, #0
   e4242:	bf14      	ite	ne
   e4244:	4610      	movne	r0, r2
   e4246:	4618      	moveq	r0, r3
   e4248:	4770      	bx	lr
   e424a:	bf00      	nop
   e424c:	2003e6c8 	.word	0x2003e6c8
   e4250:	2003e6cc 	.word	0x2003e6cc
   e4254:	000e70f0 	.word	0x000e70f0

000e4258 <tolower>:
   e4258:	4b04      	ldr	r3, [pc, #16]	; (e426c <tolower+0x14>)
   e425a:	681b      	ldr	r3, [r3, #0]
   e425c:	4403      	add	r3, r0
   e425e:	785b      	ldrb	r3, [r3, #1]
   e4260:	f003 0303 	and.w	r3, r3, #3
   e4264:	2b01      	cmp	r3, #1
   e4266:	bf08      	it	eq
   e4268:	3020      	addeq	r0, #32
   e426a:	4770      	bx	lr
   e426c:	2003d5c4 	.word	0x2003d5c4

000e4270 <__tzcalc_limits>:
   e4270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4274:	4604      	mov	r4, r0
   e4276:	f000 fda5 	bl	e4dc4 <__gettzinfo>
   e427a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e427e:	429c      	cmp	r4, r3
   e4280:	f340 8096 	ble.w	e43b0 <__tzcalc_limits+0x140>
   e4284:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e4288:	18e3      	adds	r3, r4, r3
   e428a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e428e:	109b      	asrs	r3, r3, #2
   e4290:	f240 156d 	movw	r5, #365	; 0x16d
   e4294:	fb05 3502 	mla	r5, r5, r2, r3
   e4298:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e429c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e42a0:	fb92 f3f3 	sdiv	r3, r2, r3
   e42a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e42a8:	442b      	add	r3, r5
   e42aa:	18a5      	adds	r5, r4, r2
   e42ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e42b0:	fb95 f5f2 	sdiv	r5, r5, r2
   e42b4:	441d      	add	r5, r3
   e42b6:	2364      	movs	r3, #100	; 0x64
   e42b8:	fb94 f7f2 	sdiv	r7, r4, r2
   e42bc:	fb94 f6f3 	sdiv	r6, r4, r3
   e42c0:	fb02 4717 	mls	r7, r2, r7, r4
   e42c4:	fb03 4616 	mls	r6, r3, r6, r4
   e42c8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e42cc:	fab7 fe87 	clz	lr, r7
   e42d0:	9301      	str	r3, [sp, #4]
   e42d2:	f004 0303 	and.w	r3, r4, #3
   e42d6:	6044      	str	r4, [r0, #4]
   e42d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e42dc:	4601      	mov	r1, r0
   e42de:	9300      	str	r3, [sp, #0]
   e42e0:	f04f 0c07 	mov.w	ip, #7
   e42e4:	7a0b      	ldrb	r3, [r1, #8]
   e42e6:	2b4a      	cmp	r3, #74	; 0x4a
   e42e8:	d10e      	bne.n	e4308 <__tzcalc_limits+0x98>
   e42ea:	694b      	ldr	r3, [r1, #20]
   e42ec:	9a00      	ldr	r2, [sp, #0]
   e42ee:	18ec      	adds	r4, r5, r3
   e42f0:	b902      	cbnz	r2, e42f4 <__tzcalc_limits+0x84>
   e42f2:	b906      	cbnz	r6, e42f6 <__tzcalc_limits+0x86>
   e42f4:	b927      	cbnz	r7, e4300 <__tzcalc_limits+0x90>
   e42f6:	2b3b      	cmp	r3, #59	; 0x3b
   e42f8:	bfd4      	ite	le
   e42fa:	2300      	movle	r3, #0
   e42fc:	2301      	movgt	r3, #1
   e42fe:	e000      	b.n	e4302 <__tzcalc_limits+0x92>
   e4300:	2300      	movs	r3, #0
   e4302:	4423      	add	r3, r4
   e4304:	3b01      	subs	r3, #1
   e4306:	e03f      	b.n	e4388 <__tzcalc_limits+0x118>
   e4308:	2b44      	cmp	r3, #68	; 0x44
   e430a:	d102      	bne.n	e4312 <__tzcalc_limits+0xa2>
   e430c:	694b      	ldr	r3, [r1, #20]
   e430e:	442b      	add	r3, r5
   e4310:	e03a      	b.n	e4388 <__tzcalc_limits+0x118>
   e4312:	9b00      	ldr	r3, [sp, #0]
   e4314:	b92b      	cbnz	r3, e4322 <__tzcalc_limits+0xb2>
   e4316:	2e00      	cmp	r6, #0
   e4318:	bf0c      	ite	eq
   e431a:	46f0      	moveq	r8, lr
   e431c:	f04f 0801 	movne.w	r8, #1
   e4320:	e000      	b.n	e4324 <__tzcalc_limits+0xb4>
   e4322:	46f0      	mov	r8, lr
   e4324:	4b24      	ldr	r3, [pc, #144]	; (e43b8 <__tzcalc_limits+0x148>)
   e4326:	68cc      	ldr	r4, [r1, #12]
   e4328:	2230      	movs	r2, #48	; 0x30
   e432a:	fb02 3808 	mla	r8, r2, r8, r3
   e432e:	f1a8 0a04 	sub.w	sl, r8, #4
   e4332:	46a9      	mov	r9, r5
   e4334:	2301      	movs	r3, #1
   e4336:	42a3      	cmp	r3, r4
   e4338:	da04      	bge.n	e4344 <__tzcalc_limits+0xd4>
   e433a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e433e:	3301      	adds	r3, #1
   e4340:	44d9      	add	r9, fp
   e4342:	e7f8      	b.n	e4336 <__tzcalc_limits+0xc6>
   e4344:	f109 0304 	add.w	r3, r9, #4
   e4348:	fb93 fbfc 	sdiv	fp, r3, ip
   e434c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e4350:	2c01      	cmp	r4, #1
   e4352:	ebca 0a03 	rsb	sl, sl, r3
   e4356:	694b      	ldr	r3, [r1, #20]
   e4358:	bfb8      	it	lt
   e435a:	2401      	movlt	r4, #1
   e435c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e4360:	ebb3 0a0a 	subs.w	sl, r3, sl
   e4364:	690b      	ldr	r3, [r1, #16]
   e4366:	f104 34ff 	add.w	r4, r4, #4294967295
   e436a:	f103 33ff 	add.w	r3, r3, #4294967295
   e436e:	bf48      	it	mi
   e4370:	f10a 0a07 	addmi.w	sl, sl, #7
   e4374:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e4378:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e437c:	4453      	add	r3, sl
   e437e:	42a3      	cmp	r3, r4
   e4380:	db01      	blt.n	e4386 <__tzcalc_limits+0x116>
   e4382:	3b07      	subs	r3, #7
   e4384:	e7fb      	b.n	e437e <__tzcalc_limits+0x10e>
   e4386:	444b      	add	r3, r9
   e4388:	698c      	ldr	r4, [r1, #24]
   e438a:	4a0c      	ldr	r2, [pc, #48]	; (e43bc <__tzcalc_limits+0x14c>)
   e438c:	fb02 4303 	mla	r3, r2, r3, r4
   e4390:	6a0c      	ldr	r4, [r1, #32]
   e4392:	4423      	add	r3, r4
   e4394:	f841 3f1c 	str.w	r3, [r1, #28]!
   e4398:	9b01      	ldr	r3, [sp, #4]
   e439a:	4299      	cmp	r1, r3
   e439c:	d1a2      	bne.n	e42e4 <__tzcalc_limits+0x74>
   e439e:	69c3      	ldr	r3, [r0, #28]
   e43a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e43a2:	4293      	cmp	r3, r2
   e43a4:	bfac      	ite	ge
   e43a6:	2300      	movge	r3, #0
   e43a8:	2301      	movlt	r3, #1
   e43aa:	6003      	str	r3, [r0, #0]
   e43ac:	2001      	movs	r0, #1
   e43ae:	e000      	b.n	e43b2 <__tzcalc_limits+0x142>
   e43b0:	2000      	movs	r0, #0
   e43b2:	b003      	add	sp, #12
   e43b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e43b8:	000e6eac 	.word	0x000e6eac
   e43bc:	00015180 	.word	0x00015180

000e43c0 <__tz_lock>:
   e43c0:	4770      	bx	lr

000e43c2 <__tz_unlock>:
   e43c2:	4770      	bx	lr

000e43c4 <_tzset_unlocked>:
   e43c4:	4b01      	ldr	r3, [pc, #4]	; (e43cc <_tzset_unlocked+0x8>)
   e43c6:	6818      	ldr	r0, [r3, #0]
   e43c8:	f000 b802 	b.w	e43d0 <_tzset_unlocked_r>
   e43cc:	2003d628 	.word	0x2003d628

000e43d0 <_tzset_unlocked_r>:
   e43d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e43d4:	b08d      	sub	sp, #52	; 0x34
   e43d6:	4607      	mov	r7, r0
   e43d8:	f000 fcf4 	bl	e4dc4 <__gettzinfo>
   e43dc:	49b0      	ldr	r1, [pc, #704]	; (e46a0 <_tzset_unlocked_r+0x2d0>)
   e43de:	4eb1      	ldr	r6, [pc, #708]	; (e46a4 <_tzset_unlocked_r+0x2d4>)
   e43e0:	4604      	mov	r4, r0
   e43e2:	4638      	mov	r0, r7
   e43e4:	f000 fce6 	bl	e4db4 <_getenv_r>
   e43e8:	4605      	mov	r5, r0
   e43ea:	b960      	cbnz	r0, e4406 <_tzset_unlocked_r+0x36>
   e43ec:	4bae      	ldr	r3, [pc, #696]	; (e46a8 <_tzset_unlocked_r+0x2d8>)
   e43ee:	4aaf      	ldr	r2, [pc, #700]	; (e46ac <_tzset_unlocked_r+0x2dc>)
   e43f0:	6018      	str	r0, [r3, #0]
   e43f2:	4baf      	ldr	r3, [pc, #700]	; (e46b0 <_tzset_unlocked_r+0x2e0>)
   e43f4:	6018      	str	r0, [r3, #0]
   e43f6:	4baf      	ldr	r3, [pc, #700]	; (e46b4 <_tzset_unlocked_r+0x2e4>)
   e43f8:	6830      	ldr	r0, [r6, #0]
   e43fa:	601a      	str	r2, [r3, #0]
   e43fc:	605a      	str	r2, [r3, #4]
   e43fe:	f7f5 faa1 	bl	d9944 <free>
   e4402:	6035      	str	r5, [r6, #0]
   e4404:	e148      	b.n	e4698 <_tzset_unlocked_r+0x2c8>
   e4406:	6831      	ldr	r1, [r6, #0]
   e4408:	b979      	cbnz	r1, e442a <_tzset_unlocked_r+0x5a>
   e440a:	6830      	ldr	r0, [r6, #0]
   e440c:	f7f5 fa9a 	bl	d9944 <free>
   e4410:	4628      	mov	r0, r5
   e4412:	f7fe ffa3 	bl	e335c <strlen>
   e4416:	1c41      	adds	r1, r0, #1
   e4418:	4638      	mov	r0, r7
   e441a:	f7f5 fad3 	bl	d99c4 <_malloc_r>
   e441e:	6030      	str	r0, [r6, #0]
   e4420:	b148      	cbz	r0, e4436 <_tzset_unlocked_r+0x66>
   e4422:	4629      	mov	r1, r5
   e4424:	f7fe fa62 	bl	e28ec <strcpy>
   e4428:	e005      	b.n	e4436 <_tzset_unlocked_r+0x66>
   e442a:	f7fe fa55 	bl	e28d8 <strcmp>
   e442e:	2800      	cmp	r0, #0
   e4430:	f000 8132 	beq.w	e4698 <_tzset_unlocked_r+0x2c8>
   e4434:	e7e9      	b.n	e440a <_tzset_unlocked_r+0x3a>
   e4436:	782b      	ldrb	r3, [r5, #0]
   e4438:	4a9f      	ldr	r2, [pc, #636]	; (e46b8 <_tzset_unlocked_r+0x2e8>)
   e443a:	49a0      	ldr	r1, [pc, #640]	; (e46bc <_tzset_unlocked_r+0x2ec>)
   e443c:	2b3a      	cmp	r3, #58	; 0x3a
   e443e:	bf08      	it	eq
   e4440:	3501      	addeq	r5, #1
   e4442:	ae0a      	add	r6, sp, #40	; 0x28
   e4444:	4633      	mov	r3, r6
   e4446:	4628      	mov	r0, r5
   e4448:	f7f5 fa94 	bl	d9974 <siscanf>
   e444c:	2800      	cmp	r0, #0
   e444e:	f340 8123 	ble.w	e4698 <_tzset_unlocked_r+0x2c8>
   e4452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4454:	18ef      	adds	r7, r5, r3
   e4456:	5ceb      	ldrb	r3, [r5, r3]
   e4458:	2b2d      	cmp	r3, #45	; 0x2d
   e445a:	d103      	bne.n	e4464 <_tzset_unlocked_r+0x94>
   e445c:	3701      	adds	r7, #1
   e445e:	f04f 35ff 	mov.w	r5, #4294967295
   e4462:	e003      	b.n	e446c <_tzset_unlocked_r+0x9c>
   e4464:	2b2b      	cmp	r3, #43	; 0x2b
   e4466:	bf08      	it	eq
   e4468:	3701      	addeq	r7, #1
   e446a:	2501      	movs	r5, #1
   e446c:	f10d 0a20 	add.w	sl, sp, #32
   e4470:	f10d 0b1e 	add.w	fp, sp, #30
   e4474:	f04f 0800 	mov.w	r8, #0
   e4478:	9603      	str	r6, [sp, #12]
   e447a:	f8cd a008 	str.w	sl, [sp, #8]
   e447e:	9601      	str	r6, [sp, #4]
   e4480:	f8cd b000 	str.w	fp, [sp]
   e4484:	4633      	mov	r3, r6
   e4486:	aa07      	add	r2, sp, #28
   e4488:	498d      	ldr	r1, [pc, #564]	; (e46c0 <_tzset_unlocked_r+0x2f0>)
   e448a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e448e:	4638      	mov	r0, r7
   e4490:	f8ad 8020 	strh.w	r8, [sp, #32]
   e4494:	f7f5 fa6e 	bl	d9974 <siscanf>
   e4498:	4540      	cmp	r0, r8
   e449a:	f340 80fd 	ble.w	e4698 <_tzset_unlocked_r+0x2c8>
   e449e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e44a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e44a6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e46cc <_tzset_unlocked_r+0x2fc>
   e44aa:	213c      	movs	r1, #60	; 0x3c
   e44ac:	fb01 3302 	mla	r3, r1, r2, r3
   e44b0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e44b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e44b8:	fb01 3302 	mla	r3, r1, r2, r3
   e44bc:	435d      	muls	r5, r3
   e44be:	6225      	str	r5, [r4, #32]
   e44c0:	4d7c      	ldr	r5, [pc, #496]	; (e46b4 <_tzset_unlocked_r+0x2e4>)
   e44c2:	4b7d      	ldr	r3, [pc, #500]	; (e46b8 <_tzset_unlocked_r+0x2e8>)
   e44c4:	602b      	str	r3, [r5, #0]
   e44c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e44c8:	497c      	ldr	r1, [pc, #496]	; (e46bc <_tzset_unlocked_r+0x2ec>)
   e44ca:	441f      	add	r7, r3
   e44cc:	464a      	mov	r2, r9
   e44ce:	4633      	mov	r3, r6
   e44d0:	4638      	mov	r0, r7
   e44d2:	f7f5 fa4f 	bl	d9974 <siscanf>
   e44d6:	4540      	cmp	r0, r8
   e44d8:	dc08      	bgt.n	e44ec <_tzset_unlocked_r+0x11c>
   e44da:	682b      	ldr	r3, [r5, #0]
   e44dc:	606b      	str	r3, [r5, #4]
   e44de:	4b72      	ldr	r3, [pc, #456]	; (e46a8 <_tzset_unlocked_r+0x2d8>)
   e44e0:	6a22      	ldr	r2, [r4, #32]
   e44e2:	601a      	str	r2, [r3, #0]
   e44e4:	4b72      	ldr	r3, [pc, #456]	; (e46b0 <_tzset_unlocked_r+0x2e0>)
   e44e6:	f8c3 8000 	str.w	r8, [r3]
   e44ea:	e0d5      	b.n	e4698 <_tzset_unlocked_r+0x2c8>
   e44ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e44ee:	f8c5 9004 	str.w	r9, [r5, #4]
   e44f2:	18fd      	adds	r5, r7, r3
   e44f4:	5cfb      	ldrb	r3, [r7, r3]
   e44f6:	2b2d      	cmp	r3, #45	; 0x2d
   e44f8:	d103      	bne.n	e4502 <_tzset_unlocked_r+0x132>
   e44fa:	3501      	adds	r5, #1
   e44fc:	f04f 37ff 	mov.w	r7, #4294967295
   e4500:	e003      	b.n	e450a <_tzset_unlocked_r+0x13a>
   e4502:	2b2b      	cmp	r3, #43	; 0x2b
   e4504:	bf08      	it	eq
   e4506:	3501      	addeq	r5, #1
   e4508:	2701      	movs	r7, #1
   e450a:	2300      	movs	r3, #0
   e450c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e4510:	f8ad 301e 	strh.w	r3, [sp, #30]
   e4514:	f8ad 3020 	strh.w	r3, [sp, #32]
   e4518:	930a      	str	r3, [sp, #40]	; 0x28
   e451a:	9603      	str	r6, [sp, #12]
   e451c:	f8cd a008 	str.w	sl, [sp, #8]
   e4520:	9601      	str	r6, [sp, #4]
   e4522:	f8cd b000 	str.w	fp, [sp]
   e4526:	4633      	mov	r3, r6
   e4528:	aa07      	add	r2, sp, #28
   e452a:	4965      	ldr	r1, [pc, #404]	; (e46c0 <_tzset_unlocked_r+0x2f0>)
   e452c:	4628      	mov	r0, r5
   e452e:	f7f5 fa21 	bl	d9974 <siscanf>
   e4532:	2800      	cmp	r0, #0
   e4534:	dc04      	bgt.n	e4540 <_tzset_unlocked_r+0x170>
   e4536:	6a23      	ldr	r3, [r4, #32]
   e4538:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e453c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e453e:	e00e      	b.n	e455e <_tzset_unlocked_r+0x18e>
   e4540:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e4544:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e4548:	213c      	movs	r1, #60	; 0x3c
   e454a:	fb01 3302 	mla	r3, r1, r2, r3
   e454e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e4552:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e4556:	fb01 3302 	mla	r3, r1, r2, r3
   e455a:	435f      	muls	r7, r3
   e455c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4560:	4627      	mov	r7, r4
   e4562:	441d      	add	r5, r3
   e4564:	f04f 0900 	mov.w	r9, #0
   e4568:	782b      	ldrb	r3, [r5, #0]
   e456a:	2b2c      	cmp	r3, #44	; 0x2c
   e456c:	bf08      	it	eq
   e456e:	3501      	addeq	r5, #1
   e4570:	f895 8000 	ldrb.w	r8, [r5]
   e4574:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e4578:	d126      	bne.n	e45c8 <_tzset_unlocked_r+0x1f8>
   e457a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e457e:	9302      	str	r3, [sp, #8]
   e4580:	ab09      	add	r3, sp, #36	; 0x24
   e4582:	9300      	str	r3, [sp, #0]
   e4584:	9603      	str	r6, [sp, #12]
   e4586:	9601      	str	r6, [sp, #4]
   e4588:	4633      	mov	r3, r6
   e458a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e458e:	494d      	ldr	r1, [pc, #308]	; (e46c4 <_tzset_unlocked_r+0x2f4>)
   e4590:	4628      	mov	r0, r5
   e4592:	f7f5 f9ef 	bl	d9974 <siscanf>
   e4596:	2803      	cmp	r0, #3
   e4598:	d17e      	bne.n	e4698 <_tzset_unlocked_r+0x2c8>
   e459a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e459e:	1e4b      	subs	r3, r1, #1
   e45a0:	2b0b      	cmp	r3, #11
   e45a2:	d879      	bhi.n	e4698 <_tzset_unlocked_r+0x2c8>
   e45a4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e45a8:	1e53      	subs	r3, r2, #1
   e45aa:	2b04      	cmp	r3, #4
   e45ac:	d874      	bhi.n	e4698 <_tzset_unlocked_r+0x2c8>
   e45ae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e45b2:	2b06      	cmp	r3, #6
   e45b4:	d870      	bhi.n	e4698 <_tzset_unlocked_r+0x2c8>
   e45b6:	f887 8008 	strb.w	r8, [r7, #8]
   e45ba:	60f9      	str	r1, [r7, #12]
   e45bc:	613a      	str	r2, [r7, #16]
   e45be:	617b      	str	r3, [r7, #20]
   e45c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e45c2:	eb05 0803 	add.w	r8, r5, r3
   e45c6:	e02a      	b.n	e461e <_tzset_unlocked_r+0x24e>
   e45c8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e45cc:	bf06      	itte	eq
   e45ce:	3501      	addeq	r5, #1
   e45d0:	4643      	moveq	r3, r8
   e45d2:	2344      	movne	r3, #68	; 0x44
   e45d4:	220a      	movs	r2, #10
   e45d6:	a90b      	add	r1, sp, #44	; 0x2c
   e45d8:	4628      	mov	r0, r5
   e45da:	9305      	str	r3, [sp, #20]
   e45dc:	f7ff fe22 	bl	e4224 <strtoul>
   e45e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e45e4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e45e8:	4545      	cmp	r5, r8
   e45ea:	9b05      	ldr	r3, [sp, #20]
   e45ec:	d114      	bne.n	e4618 <_tzset_unlocked_r+0x248>
   e45ee:	234d      	movs	r3, #77	; 0x4d
   e45f0:	f1b9 0f00 	cmp.w	r9, #0
   e45f4:	d107      	bne.n	e4606 <_tzset_unlocked_r+0x236>
   e45f6:	7223      	strb	r3, [r4, #8]
   e45f8:	2303      	movs	r3, #3
   e45fa:	60e3      	str	r3, [r4, #12]
   e45fc:	2302      	movs	r3, #2
   e45fe:	6123      	str	r3, [r4, #16]
   e4600:	f8c4 9014 	str.w	r9, [r4, #20]
   e4604:	e00b      	b.n	e461e <_tzset_unlocked_r+0x24e>
   e4606:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e460a:	230b      	movs	r3, #11
   e460c:	62a3      	str	r3, [r4, #40]	; 0x28
   e460e:	2301      	movs	r3, #1
   e4610:	62e3      	str	r3, [r4, #44]	; 0x2c
   e4612:	2300      	movs	r3, #0
   e4614:	6323      	str	r3, [r4, #48]	; 0x30
   e4616:	e002      	b.n	e461e <_tzset_unlocked_r+0x24e>
   e4618:	b280      	uxth	r0, r0
   e461a:	723b      	strb	r3, [r7, #8]
   e461c:	6178      	str	r0, [r7, #20]
   e461e:	2302      	movs	r3, #2
   e4620:	f8ad 301c 	strh.w	r3, [sp, #28]
   e4624:	2300      	movs	r3, #0
   e4626:	f8ad 301e 	strh.w	r3, [sp, #30]
   e462a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e462e:	930a      	str	r3, [sp, #40]	; 0x28
   e4630:	f898 3000 	ldrb.w	r3, [r8]
   e4634:	2b2f      	cmp	r3, #47	; 0x2f
   e4636:	d10b      	bne.n	e4650 <_tzset_unlocked_r+0x280>
   e4638:	9603      	str	r6, [sp, #12]
   e463a:	f8cd a008 	str.w	sl, [sp, #8]
   e463e:	9601      	str	r6, [sp, #4]
   e4640:	f8cd b000 	str.w	fp, [sp]
   e4644:	4633      	mov	r3, r6
   e4646:	aa07      	add	r2, sp, #28
   e4648:	491f      	ldr	r1, [pc, #124]	; (e46c8 <_tzset_unlocked_r+0x2f8>)
   e464a:	4640      	mov	r0, r8
   e464c:	f7f5 f992 	bl	d9974 <siscanf>
   e4650:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e4654:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e4658:	213c      	movs	r1, #60	; 0x3c
   e465a:	fb01 3302 	mla	r3, r1, r2, r3
   e465e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e4662:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e4666:	fb01 3302 	mla	r3, r1, r2, r3
   e466a:	61bb      	str	r3, [r7, #24]
   e466c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e466e:	f109 0901 	add.w	r9, r9, #1
   e4672:	f1b9 0f02 	cmp.w	r9, #2
   e4676:	4445      	add	r5, r8
   e4678:	f107 071c 	add.w	r7, r7, #28
   e467c:	f47f af74 	bne.w	e4568 <_tzset_unlocked_r+0x198>
   e4680:	6860      	ldr	r0, [r4, #4]
   e4682:	f7ff fdf5 	bl	e4270 <__tzcalc_limits>
   e4686:	4b08      	ldr	r3, [pc, #32]	; (e46a8 <_tzset_unlocked_r+0x2d8>)
   e4688:	6a22      	ldr	r2, [r4, #32]
   e468a:	601a      	str	r2, [r3, #0]
   e468c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e468e:	1a9b      	subs	r3, r3, r2
   e4690:	4a07      	ldr	r2, [pc, #28]	; (e46b0 <_tzset_unlocked_r+0x2e0>)
   e4692:	bf18      	it	ne
   e4694:	2301      	movne	r3, #1
   e4696:	6013      	str	r3, [r2, #0]
   e4698:	b00d      	add	sp, #52	; 0x34
   e469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e469e:	bf00      	nop
   e46a0:	000e71ec 	.word	0x000e71ec
   e46a4:	2003e7e0 	.word	0x2003e7e0
   e46a8:	2003e7e8 	.word	0x2003e7e8
   e46ac:	000e71ef 	.word	0x000e71ef
   e46b0:	2003e7e4 	.word	0x2003e7e4
   e46b4:	2003d664 	.word	0x2003d664
   e46b8:	2003e7d3 	.word	0x2003e7d3
   e46bc:	000e71f3 	.word	0x000e71f3
   e46c0:	000e7216 	.word	0x000e7216
   e46c4:	000e7202 	.word	0x000e7202
   e46c8:	000e7215 	.word	0x000e7215
   e46cc:	2003e7c8 	.word	0x2003e7c8

000e46d0 <abs>:
   e46d0:	2800      	cmp	r0, #0
   e46d2:	bfb8      	it	lt
   e46d4:	4240      	neglt	r0, r0
   e46d6:	4770      	bx	lr

000e46d8 <div>:
   e46d8:	2900      	cmp	r1, #0
   e46da:	b510      	push	{r4, lr}
   e46dc:	fb91 f4f2 	sdiv	r4, r1, r2
   e46e0:	fb02 1314 	mls	r3, r2, r4, r1
   e46e4:	db04      	blt.n	e46f0 <div+0x18>
   e46e6:	2b00      	cmp	r3, #0
   e46e8:	da07      	bge.n	e46fa <div+0x22>
   e46ea:	3401      	adds	r4, #1
   e46ec:	1a9b      	subs	r3, r3, r2
   e46ee:	e004      	b.n	e46fa <div+0x22>
   e46f0:	2b00      	cmp	r3, #0
   e46f2:	bfc4      	itt	gt
   e46f4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e46f8:	189b      	addgt	r3, r3, r2
   e46fa:	6004      	str	r4, [r0, #0]
   e46fc:	6043      	str	r3, [r0, #4]
   e46fe:	bd10      	pop	{r4, pc}

000e4700 <rshift>:
   e4700:	b5f0      	push	{r4, r5, r6, r7, lr}
   e4702:	6906      	ldr	r6, [r0, #16]
   e4704:	114b      	asrs	r3, r1, #5
   e4706:	42b3      	cmp	r3, r6
   e4708:	f100 0514 	add.w	r5, r0, #20
   e470c:	da27      	bge.n	e475e <rshift+0x5e>
   e470e:	f011 011f 	ands.w	r1, r1, #31
   e4712:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e4716:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e471a:	d101      	bne.n	e4720 <rshift+0x20>
   e471c:	4629      	mov	r1, r5
   e471e:	e016      	b.n	e474e <rshift+0x4e>
   e4720:	1d14      	adds	r4, r2, #4
   e4722:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e4726:	f1c1 0e20 	rsb	lr, r1, #32
   e472a:	40ca      	lsrs	r2, r1
   e472c:	462b      	mov	r3, r5
   e472e:	42b4      	cmp	r4, r6
   e4730:	d209      	bcs.n	e4746 <rshift+0x46>
   e4732:	6827      	ldr	r7, [r4, #0]
   e4734:	fa07 f70e 	lsl.w	r7, r7, lr
   e4738:	433a      	orrs	r2, r7
   e473a:	f843 2b04 	str.w	r2, [r3], #4
   e473e:	f854 2b04 	ldr.w	r2, [r4], #4
   e4742:	40ca      	lsrs	r2, r1
   e4744:	e7f3      	b.n	e472e <rshift+0x2e>
   e4746:	601a      	str	r2, [r3, #0]
   e4748:	b152      	cbz	r2, e4760 <rshift+0x60>
   e474a:	3304      	adds	r3, #4
   e474c:	e008      	b.n	e4760 <rshift+0x60>
   e474e:	42b2      	cmp	r2, r6
   e4750:	460b      	mov	r3, r1
   e4752:	d205      	bcs.n	e4760 <rshift+0x60>
   e4754:	f852 3b04 	ldr.w	r3, [r2], #4
   e4758:	f841 3b04 	str.w	r3, [r1], #4
   e475c:	e7f7      	b.n	e474e <rshift+0x4e>
   e475e:	462b      	mov	r3, r5
   e4760:	1b5b      	subs	r3, r3, r5
   e4762:	109b      	asrs	r3, r3, #2
   e4764:	6103      	str	r3, [r0, #16]
   e4766:	b903      	cbnz	r3, e476a <rshift+0x6a>
   e4768:	6143      	str	r3, [r0, #20]
   e476a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e476c <__hexdig_fun>:
   e476c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e4770:	2b09      	cmp	r3, #9
   e4772:	d801      	bhi.n	e4778 <__hexdig_fun+0xc>
   e4774:	3820      	subs	r0, #32
   e4776:	e00a      	b.n	e478e <__hexdig_fun+0x22>
   e4778:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e477c:	2b05      	cmp	r3, #5
   e477e:	d801      	bhi.n	e4784 <__hexdig_fun+0x18>
   e4780:	3847      	subs	r0, #71	; 0x47
   e4782:	e004      	b.n	e478e <__hexdig_fun+0x22>
   e4784:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e4788:	2b05      	cmp	r3, #5
   e478a:	d802      	bhi.n	e4792 <__hexdig_fun+0x26>
   e478c:	3827      	subs	r0, #39	; 0x27
   e478e:	b2c0      	uxtb	r0, r0
   e4790:	4770      	bx	lr
   e4792:	2000      	movs	r0, #0
   e4794:	4770      	bx	lr

000e4796 <__gethex>:
   e4796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e479a:	b08b      	sub	sp, #44	; 0x2c
   e479c:	468a      	mov	sl, r1
   e479e:	4690      	mov	r8, r2
   e47a0:	9306      	str	r3, [sp, #24]
   e47a2:	9002      	str	r0, [sp, #8]
   e47a4:	f7fd fe0a 	bl	e23bc <_localeconv_r>
   e47a8:	6803      	ldr	r3, [r0, #0]
   e47aa:	9303      	str	r3, [sp, #12]
   e47ac:	4618      	mov	r0, r3
   e47ae:	f7fe fdd5 	bl	e335c <strlen>
   e47b2:	9b03      	ldr	r3, [sp, #12]
   e47b4:	9001      	str	r0, [sp, #4]
   e47b6:	4403      	add	r3, r0
   e47b8:	f04f 0b00 	mov.w	fp, #0
   e47bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e47c0:	9307      	str	r3, [sp, #28]
   e47c2:	f8da 3000 	ldr.w	r3, [sl]
   e47c6:	3302      	adds	r3, #2
   e47c8:	461f      	mov	r7, r3
   e47ca:	f813 0b01 	ldrb.w	r0, [r3], #1
   e47ce:	2830      	cmp	r0, #48	; 0x30
   e47d0:	d102      	bne.n	e47d8 <__gethex+0x42>
   e47d2:	f10b 0b01 	add.w	fp, fp, #1
   e47d6:	e7f7      	b.n	e47c8 <__gethex+0x32>
   e47d8:	f7ff ffc8 	bl	e476c <__hexdig_fun>
   e47dc:	4604      	mov	r4, r0
   e47de:	b9e0      	cbnz	r0, e481a <__gethex+0x84>
   e47e0:	9a01      	ldr	r2, [sp, #4]
   e47e2:	9903      	ldr	r1, [sp, #12]
   e47e4:	4638      	mov	r0, r7
   e47e6:	f7fe fdc1 	bl	e336c <strncmp>
   e47ea:	2800      	cmp	r0, #0
   e47ec:	d134      	bne.n	e4858 <__gethex+0xc2>
   e47ee:	9b01      	ldr	r3, [sp, #4]
   e47f0:	5cf8      	ldrb	r0, [r7, r3]
   e47f2:	18fe      	adds	r6, r7, r3
   e47f4:	f7ff ffba 	bl	e476c <__hexdig_fun>
   e47f8:	b380      	cbz	r0, e485c <__gethex+0xc6>
   e47fa:	4633      	mov	r3, r6
   e47fc:	7818      	ldrb	r0, [r3, #0]
   e47fe:	2830      	cmp	r0, #48	; 0x30
   e4800:	461f      	mov	r7, r3
   e4802:	f103 0301 	add.w	r3, r3, #1
   e4806:	d0f9      	beq.n	e47fc <__gethex+0x66>
   e4808:	f7ff ffb0 	bl	e476c <__hexdig_fun>
   e480c:	fab0 f580 	clz	r5, r0
   e4810:	096d      	lsrs	r5, r5, #5
   e4812:	4634      	mov	r4, r6
   e4814:	f04f 0b01 	mov.w	fp, #1
   e4818:	e001      	b.n	e481e <__gethex+0x88>
   e481a:	2500      	movs	r5, #0
   e481c:	462c      	mov	r4, r5
   e481e:	463a      	mov	r2, r7
   e4820:	4616      	mov	r6, r2
   e4822:	3201      	adds	r2, #1
   e4824:	7830      	ldrb	r0, [r6, #0]
   e4826:	f7ff ffa1 	bl	e476c <__hexdig_fun>
   e482a:	2800      	cmp	r0, #0
   e482c:	d1f8      	bne.n	e4820 <__gethex+0x8a>
   e482e:	9a01      	ldr	r2, [sp, #4]
   e4830:	9903      	ldr	r1, [sp, #12]
   e4832:	4630      	mov	r0, r6
   e4834:	f7fe fd9a 	bl	e336c <strncmp>
   e4838:	b950      	cbnz	r0, e4850 <__gethex+0xba>
   e483a:	b954      	cbnz	r4, e4852 <__gethex+0xbc>
   e483c:	9b01      	ldr	r3, [sp, #4]
   e483e:	18f4      	adds	r4, r6, r3
   e4840:	4622      	mov	r2, r4
   e4842:	4616      	mov	r6, r2
   e4844:	3201      	adds	r2, #1
   e4846:	7830      	ldrb	r0, [r6, #0]
   e4848:	f7ff ff90 	bl	e476c <__hexdig_fun>
   e484c:	2800      	cmp	r0, #0
   e484e:	d1f8      	bne.n	e4842 <__gethex+0xac>
   e4850:	b134      	cbz	r4, e4860 <__gethex+0xca>
   e4852:	1ba4      	subs	r4, r4, r6
   e4854:	00a4      	lsls	r4, r4, #2
   e4856:	e003      	b.n	e4860 <__gethex+0xca>
   e4858:	463e      	mov	r6, r7
   e485a:	e000      	b.n	e485e <__gethex+0xc8>
   e485c:	4604      	mov	r4, r0
   e485e:	2501      	movs	r5, #1
   e4860:	7833      	ldrb	r3, [r6, #0]
   e4862:	2b50      	cmp	r3, #80	; 0x50
   e4864:	d001      	beq.n	e486a <__gethex+0xd4>
   e4866:	2b70      	cmp	r3, #112	; 0x70
   e4868:	d12a      	bne.n	e48c0 <__gethex+0x12a>
   e486a:	7873      	ldrb	r3, [r6, #1]
   e486c:	2b2b      	cmp	r3, #43	; 0x2b
   e486e:	d008      	beq.n	e4882 <__gethex+0xec>
   e4870:	2b2d      	cmp	r3, #45	; 0x2d
   e4872:	d003      	beq.n	e487c <__gethex+0xe6>
   e4874:	1c71      	adds	r1, r6, #1
   e4876:	f04f 0900 	mov.w	r9, #0
   e487a:	e005      	b.n	e4888 <__gethex+0xf2>
   e487c:	f04f 0901 	mov.w	r9, #1
   e4880:	e001      	b.n	e4886 <__gethex+0xf0>
   e4882:	f04f 0900 	mov.w	r9, #0
   e4886:	1cb1      	adds	r1, r6, #2
   e4888:	7808      	ldrb	r0, [r1, #0]
   e488a:	f7ff ff6f 	bl	e476c <__hexdig_fun>
   e488e:	1e43      	subs	r3, r0, #1
   e4890:	b2db      	uxtb	r3, r3
   e4892:	2b18      	cmp	r3, #24
   e4894:	d814      	bhi.n	e48c0 <__gethex+0x12a>
   e4896:	f1a0 0210 	sub.w	r2, r0, #16
   e489a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e489e:	f7ff ff65 	bl	e476c <__hexdig_fun>
   e48a2:	1e43      	subs	r3, r0, #1
   e48a4:	b2db      	uxtb	r3, r3
   e48a6:	2b18      	cmp	r3, #24
   e48a8:	d804      	bhi.n	e48b4 <__gethex+0x11e>
   e48aa:	230a      	movs	r3, #10
   e48ac:	fb03 0202 	mla	r2, r3, r2, r0
   e48b0:	3a10      	subs	r2, #16
   e48b2:	e7f2      	b.n	e489a <__gethex+0x104>
   e48b4:	f1b9 0f00 	cmp.w	r9, #0
   e48b8:	d000      	beq.n	e48bc <__gethex+0x126>
   e48ba:	4252      	negs	r2, r2
   e48bc:	4414      	add	r4, r2
   e48be:	e000      	b.n	e48c2 <__gethex+0x12c>
   e48c0:	4631      	mov	r1, r6
   e48c2:	f8ca 1000 	str.w	r1, [sl]
   e48c6:	b12d      	cbz	r5, e48d4 <__gethex+0x13e>
   e48c8:	f1bb 0f00 	cmp.w	fp, #0
   e48cc:	bf14      	ite	ne
   e48ce:	2000      	movne	r0, #0
   e48d0:	2006      	moveq	r0, #6
   e48d2:	e17c      	b.n	e4bce <__gethex+0x438>
   e48d4:	1bf3      	subs	r3, r6, r7
   e48d6:	3b01      	subs	r3, #1
   e48d8:	4629      	mov	r1, r5
   e48da:	2b07      	cmp	r3, #7
   e48dc:	dd02      	ble.n	e48e4 <__gethex+0x14e>
   e48de:	3101      	adds	r1, #1
   e48e0:	105b      	asrs	r3, r3, #1
   e48e2:	e7fa      	b.n	e48da <__gethex+0x144>
   e48e4:	9802      	ldr	r0, [sp, #8]
   e48e6:	f000 fb0d 	bl	e4f04 <_Balloc>
   e48ea:	9b01      	ldr	r3, [sp, #4]
   e48ec:	f100 0a14 	add.w	sl, r0, #20
   e48f0:	f04f 0900 	mov.w	r9, #0
   e48f4:	f1c3 0301 	rsb	r3, r3, #1
   e48f8:	4605      	mov	r5, r0
   e48fa:	f8cd a010 	str.w	sl, [sp, #16]
   e48fe:	46cb      	mov	fp, r9
   e4900:	9308      	str	r3, [sp, #32]
   e4902:	42b7      	cmp	r7, r6
   e4904:	d22f      	bcs.n	e4966 <__gethex+0x1d0>
   e4906:	1e73      	subs	r3, r6, #1
   e4908:	9305      	str	r3, [sp, #20]
   e490a:	9a07      	ldr	r2, [sp, #28]
   e490c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e4910:	4293      	cmp	r3, r2
   e4912:	d00b      	beq.n	e492c <__gethex+0x196>
   e4914:	f1bb 0f20 	cmp.w	fp, #32
   e4918:	d116      	bne.n	e4948 <__gethex+0x1b2>
   e491a:	9b04      	ldr	r3, [sp, #16]
   e491c:	f8c3 9000 	str.w	r9, [r3]
   e4920:	3304      	adds	r3, #4
   e4922:	f04f 0900 	mov.w	r9, #0
   e4926:	9304      	str	r3, [sp, #16]
   e4928:	46cb      	mov	fp, r9
   e492a:	e00d      	b.n	e4948 <__gethex+0x1b2>
   e492c:	9b05      	ldr	r3, [sp, #20]
   e492e:	9a08      	ldr	r2, [sp, #32]
   e4930:	4413      	add	r3, r2
   e4932:	429f      	cmp	r7, r3
   e4934:	d8ee      	bhi.n	e4914 <__gethex+0x17e>
   e4936:	4618      	mov	r0, r3
   e4938:	9a01      	ldr	r2, [sp, #4]
   e493a:	9903      	ldr	r1, [sp, #12]
   e493c:	9309      	str	r3, [sp, #36]	; 0x24
   e493e:	f7fe fd15 	bl	e336c <strncmp>
   e4942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e4944:	b168      	cbz	r0, e4962 <__gethex+0x1cc>
   e4946:	e7e5      	b.n	e4914 <__gethex+0x17e>
   e4948:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e494c:	f7ff ff0e 	bl	e476c <__hexdig_fun>
   e4950:	f000 000f 	and.w	r0, r0, #15
   e4954:	fa00 f00b 	lsl.w	r0, r0, fp
   e4958:	9b05      	ldr	r3, [sp, #20]
   e495a:	ea49 0900 	orr.w	r9, r9, r0
   e495e:	f10b 0b04 	add.w	fp, fp, #4
   e4962:	461e      	mov	r6, r3
   e4964:	e7cd      	b.n	e4902 <__gethex+0x16c>
   e4966:	9804      	ldr	r0, [sp, #16]
   e4968:	f840 9b04 	str.w	r9, [r0], #4
   e496c:	ebca 0000 	rsb	r0, sl, r0
   e4970:	1080      	asrs	r0, r0, #2
   e4972:	6128      	str	r0, [r5, #16]
   e4974:	0147      	lsls	r7, r0, #5
   e4976:	4648      	mov	r0, r9
   e4978:	f000 fb89 	bl	e508e <__hi0bits>
   e497c:	f8d8 6000 	ldr.w	r6, [r8]
   e4980:	1a38      	subs	r0, r7, r0
   e4982:	42b0      	cmp	r0, r6
   e4984:	dd26      	ble.n	e49d4 <__gethex+0x23e>
   e4986:	1b87      	subs	r7, r0, r6
   e4988:	4639      	mov	r1, r7
   e498a:	4628      	mov	r0, r5
   e498c:	f000 fe87 	bl	e569e <__any_on>
   e4990:	b1c8      	cbz	r0, e49c6 <__gethex+0x230>
   e4992:	1e7b      	subs	r3, r7, #1
   e4994:	1159      	asrs	r1, r3, #5
   e4996:	f003 021f 	and.w	r2, r3, #31
   e499a:	f04f 0901 	mov.w	r9, #1
   e499e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e49a2:	fa09 f202 	lsl.w	r2, r9, r2
   e49a6:	420a      	tst	r2, r1
   e49a8:	d00e      	beq.n	e49c8 <__gethex+0x232>
   e49aa:	454b      	cmp	r3, r9
   e49ac:	dc02      	bgt.n	e49b4 <__gethex+0x21e>
   e49ae:	f04f 0902 	mov.w	r9, #2
   e49b2:	e009      	b.n	e49c8 <__gethex+0x232>
   e49b4:	1eb9      	subs	r1, r7, #2
   e49b6:	4628      	mov	r0, r5
   e49b8:	f000 fe71 	bl	e569e <__any_on>
   e49bc:	2800      	cmp	r0, #0
   e49be:	d0f6      	beq.n	e49ae <__gethex+0x218>
   e49c0:	f04f 0903 	mov.w	r9, #3
   e49c4:	e000      	b.n	e49c8 <__gethex+0x232>
   e49c6:	4681      	mov	r9, r0
   e49c8:	4639      	mov	r1, r7
   e49ca:	4628      	mov	r0, r5
   e49cc:	f7ff fe98 	bl	e4700 <rshift>
   e49d0:	443c      	add	r4, r7
   e49d2:	e00c      	b.n	e49ee <__gethex+0x258>
   e49d4:	da09      	bge.n	e49ea <__gethex+0x254>
   e49d6:	1a37      	subs	r7, r6, r0
   e49d8:	4629      	mov	r1, r5
   e49da:	463a      	mov	r2, r7
   e49dc:	9802      	ldr	r0, [sp, #8]
   e49de:	f000 fc8b 	bl	e52f8 <__lshift>
   e49e2:	1be4      	subs	r4, r4, r7
   e49e4:	4605      	mov	r5, r0
   e49e6:	f100 0a14 	add.w	sl, r0, #20
   e49ea:	f04f 0900 	mov.w	r9, #0
   e49ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e49f2:	429c      	cmp	r4, r3
   e49f4:	dd08      	ble.n	e4a08 <__gethex+0x272>
   e49f6:	9802      	ldr	r0, [sp, #8]
   e49f8:	4629      	mov	r1, r5
   e49fa:	f000 fab8 	bl	e4f6e <_Bfree>
   e49fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e4a00:	2300      	movs	r3, #0
   e4a02:	6013      	str	r3, [r2, #0]
   e4a04:	20a3      	movs	r0, #163	; 0xa3
   e4a06:	e0e2      	b.n	e4bce <__gethex+0x438>
   e4a08:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e4a0c:	4284      	cmp	r4, r0
   e4a0e:	da53      	bge.n	e4ab8 <__gethex+0x322>
   e4a10:	1b04      	subs	r4, r0, r4
   e4a12:	42a6      	cmp	r6, r4
   e4a14:	dc2e      	bgt.n	e4a74 <__gethex+0x2de>
   e4a16:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e4a1a:	2b02      	cmp	r3, #2
   e4a1c:	d01a      	beq.n	e4a54 <__gethex+0x2be>
   e4a1e:	2b03      	cmp	r3, #3
   e4a20:	d01c      	beq.n	e4a5c <__gethex+0x2c6>
   e4a22:	2b01      	cmp	r3, #1
   e4a24:	d11d      	bne.n	e4a62 <__gethex+0x2cc>
   e4a26:	42a6      	cmp	r6, r4
   e4a28:	d11b      	bne.n	e4a62 <__gethex+0x2cc>
   e4a2a:	2e01      	cmp	r6, #1
   e4a2c:	dc0b      	bgt.n	e4a46 <__gethex+0x2b0>
   e4a2e:	9a06      	ldr	r2, [sp, #24]
   e4a30:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e4a34:	6013      	str	r3, [r2, #0]
   e4a36:	2301      	movs	r3, #1
   e4a38:	612b      	str	r3, [r5, #16]
   e4a3a:	f8ca 3000 	str.w	r3, [sl]
   e4a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e4a40:	2062      	movs	r0, #98	; 0x62
   e4a42:	601d      	str	r5, [r3, #0]
   e4a44:	e0c3      	b.n	e4bce <__gethex+0x438>
   e4a46:	1e71      	subs	r1, r6, #1
   e4a48:	4628      	mov	r0, r5
   e4a4a:	f000 fe28 	bl	e569e <__any_on>
   e4a4e:	2800      	cmp	r0, #0
   e4a50:	d1ed      	bne.n	e4a2e <__gethex+0x298>
   e4a52:	e006      	b.n	e4a62 <__gethex+0x2cc>
   e4a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4a56:	2b00      	cmp	r3, #0
   e4a58:	d0e9      	beq.n	e4a2e <__gethex+0x298>
   e4a5a:	e002      	b.n	e4a62 <__gethex+0x2cc>
   e4a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4a5e:	2b00      	cmp	r3, #0
   e4a60:	d1e5      	bne.n	e4a2e <__gethex+0x298>
   e4a62:	9802      	ldr	r0, [sp, #8]
   e4a64:	4629      	mov	r1, r5
   e4a66:	f000 fa82 	bl	e4f6e <_Bfree>
   e4a6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e4a6c:	2300      	movs	r3, #0
   e4a6e:	6013      	str	r3, [r2, #0]
   e4a70:	2050      	movs	r0, #80	; 0x50
   e4a72:	e0ac      	b.n	e4bce <__gethex+0x438>
   e4a74:	1e67      	subs	r7, r4, #1
   e4a76:	f1b9 0f00 	cmp.w	r9, #0
   e4a7a:	d106      	bne.n	e4a8a <__gethex+0x2f4>
   e4a7c:	b13f      	cbz	r7, e4a8e <__gethex+0x2f8>
   e4a7e:	4639      	mov	r1, r7
   e4a80:	4628      	mov	r0, r5
   e4a82:	f000 fe0c 	bl	e569e <__any_on>
   e4a86:	4681      	mov	r9, r0
   e4a88:	e001      	b.n	e4a8e <__gethex+0x2f8>
   e4a8a:	f04f 0901 	mov.w	r9, #1
   e4a8e:	117a      	asrs	r2, r7, #5
   e4a90:	2301      	movs	r3, #1
   e4a92:	f007 071f 	and.w	r7, r7, #31
   e4a96:	fa03 f707 	lsl.w	r7, r3, r7
   e4a9a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e4a9e:	4621      	mov	r1, r4
   e4aa0:	421f      	tst	r7, r3
   e4aa2:	4628      	mov	r0, r5
   e4aa4:	bf18      	it	ne
   e4aa6:	f049 0902 	orrne.w	r9, r9, #2
   e4aaa:	1b36      	subs	r6, r6, r4
   e4aac:	f7ff fe28 	bl	e4700 <rshift>
   e4ab0:	2702      	movs	r7, #2
   e4ab2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e4ab6:	e000      	b.n	e4aba <__gethex+0x324>
   e4ab8:	2701      	movs	r7, #1
   e4aba:	f1b9 0f00 	cmp.w	r9, #0
   e4abe:	f000 8081 	beq.w	e4bc4 <__gethex+0x42e>
   e4ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e4ac6:	2b02      	cmp	r3, #2
   e4ac8:	d00e      	beq.n	e4ae8 <__gethex+0x352>
   e4aca:	2b03      	cmp	r3, #3
   e4acc:	d010      	beq.n	e4af0 <__gethex+0x35a>
   e4ace:	2b01      	cmp	r3, #1
   e4ad0:	d176      	bne.n	e4bc0 <__gethex+0x42a>
   e4ad2:	f019 0f02 	tst.w	r9, #2
   e4ad6:	d073      	beq.n	e4bc0 <__gethex+0x42a>
   e4ad8:	f8da 0000 	ldr.w	r0, [sl]
   e4adc:	ea49 0900 	orr.w	r9, r9, r0
   e4ae0:	f019 0f01 	tst.w	r9, #1
   e4ae4:	d107      	bne.n	e4af6 <__gethex+0x360>
   e4ae6:	e06b      	b.n	e4bc0 <__gethex+0x42a>
   e4ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4aea:	f1c3 0301 	rsb	r3, r3, #1
   e4aee:	9315      	str	r3, [sp, #84]	; 0x54
   e4af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4af2:	2b00      	cmp	r3, #0
   e4af4:	d064      	beq.n	e4bc0 <__gethex+0x42a>
   e4af6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e4afa:	f105 0314 	add.w	r3, r5, #20
   e4afe:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e4b02:	eb03 0109 	add.w	r1, r3, r9
   e4b06:	2000      	movs	r0, #0
   e4b08:	681a      	ldr	r2, [r3, #0]
   e4b0a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e4b0e:	d002      	beq.n	e4b16 <__gethex+0x380>
   e4b10:	3201      	adds	r2, #1
   e4b12:	601a      	str	r2, [r3, #0]
   e4b14:	e020      	b.n	e4b58 <__gethex+0x3c2>
   e4b16:	f843 0b04 	str.w	r0, [r3], #4
   e4b1a:	4299      	cmp	r1, r3
   e4b1c:	d8f4      	bhi.n	e4b08 <__gethex+0x372>
   e4b1e:	68ab      	ldr	r3, [r5, #8]
   e4b20:	459a      	cmp	sl, r3
   e4b22:	db12      	blt.n	e4b4a <__gethex+0x3b4>
   e4b24:	6869      	ldr	r1, [r5, #4]
   e4b26:	9802      	ldr	r0, [sp, #8]
   e4b28:	3101      	adds	r1, #1
   e4b2a:	f000 f9eb 	bl	e4f04 <_Balloc>
   e4b2e:	692a      	ldr	r2, [r5, #16]
   e4b30:	3202      	adds	r2, #2
   e4b32:	f105 010c 	add.w	r1, r5, #12
   e4b36:	4683      	mov	fp, r0
   e4b38:	0092      	lsls	r2, r2, #2
   e4b3a:	300c      	adds	r0, #12
   e4b3c:	f7fd fc42 	bl	e23c4 <memcpy>
   e4b40:	4629      	mov	r1, r5
   e4b42:	9802      	ldr	r0, [sp, #8]
   e4b44:	f000 fa13 	bl	e4f6e <_Bfree>
   e4b48:	465d      	mov	r5, fp
   e4b4a:	692b      	ldr	r3, [r5, #16]
   e4b4c:	1c5a      	adds	r2, r3, #1
   e4b4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e4b52:	612a      	str	r2, [r5, #16]
   e4b54:	2201      	movs	r2, #1
   e4b56:	615a      	str	r2, [r3, #20]
   e4b58:	2f02      	cmp	r7, #2
   e4b5a:	f105 0214 	add.w	r2, r5, #20
   e4b5e:	d111      	bne.n	e4b84 <__gethex+0x3ee>
   e4b60:	f8d8 3000 	ldr.w	r3, [r8]
   e4b64:	3b01      	subs	r3, #1
   e4b66:	429e      	cmp	r6, r3
   e4b68:	d127      	bne.n	e4bba <__gethex+0x424>
   e4b6a:	1171      	asrs	r1, r6, #5
   e4b6c:	2301      	movs	r3, #1
   e4b6e:	f006 061f 	and.w	r6, r6, #31
   e4b72:	fa03 f606 	lsl.w	r6, r3, r6
   e4b76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e4b7a:	421e      	tst	r6, r3
   e4b7c:	bf0c      	ite	eq
   e4b7e:	2702      	moveq	r7, #2
   e4b80:	2701      	movne	r7, #1
   e4b82:	e01a      	b.n	e4bba <__gethex+0x424>
   e4b84:	692b      	ldr	r3, [r5, #16]
   e4b86:	459a      	cmp	sl, r3
   e4b88:	da0a      	bge.n	e4ba0 <__gethex+0x40a>
   e4b8a:	2101      	movs	r1, #1
   e4b8c:	4628      	mov	r0, r5
   e4b8e:	f7ff fdb7 	bl	e4700 <rshift>
   e4b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e4b96:	3401      	adds	r4, #1
   e4b98:	429c      	cmp	r4, r3
   e4b9a:	f73f af2c 	bgt.w	e49f6 <__gethex+0x260>
   e4b9e:	e00b      	b.n	e4bb8 <__gethex+0x422>
   e4ba0:	f016 061f 	ands.w	r6, r6, #31
   e4ba4:	d008      	beq.n	e4bb8 <__gethex+0x422>
   e4ba6:	4491      	add	r9, r2
   e4ba8:	f1c6 0620 	rsb	r6, r6, #32
   e4bac:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e4bb0:	f000 fa6d 	bl	e508e <__hi0bits>
   e4bb4:	42b0      	cmp	r0, r6
   e4bb6:	dbe8      	blt.n	e4b8a <__gethex+0x3f4>
   e4bb8:	2701      	movs	r7, #1
   e4bba:	f047 0720 	orr.w	r7, r7, #32
   e4bbe:	e001      	b.n	e4bc4 <__gethex+0x42e>
   e4bc0:	f047 0710 	orr.w	r7, r7, #16
   e4bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e4bc6:	601d      	str	r5, [r3, #0]
   e4bc8:	9b06      	ldr	r3, [sp, #24]
   e4bca:	4638      	mov	r0, r7
   e4bcc:	601c      	str	r4, [r3, #0]
   e4bce:	b00b      	add	sp, #44	; 0x2c
   e4bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e4bd4 <L_shift>:
   e4bd4:	f1c2 0208 	rsb	r2, r2, #8
   e4bd8:	0092      	lsls	r2, r2, #2
   e4bda:	b570      	push	{r4, r5, r6, lr}
   e4bdc:	f1c2 0620 	rsb	r6, r2, #32
   e4be0:	6843      	ldr	r3, [r0, #4]
   e4be2:	6805      	ldr	r5, [r0, #0]
   e4be4:	fa03 f406 	lsl.w	r4, r3, r6
   e4be8:	432c      	orrs	r4, r5
   e4bea:	40d3      	lsrs	r3, r2
   e4bec:	6004      	str	r4, [r0, #0]
   e4bee:	f840 3f04 	str.w	r3, [r0, #4]!
   e4bf2:	4288      	cmp	r0, r1
   e4bf4:	d3f4      	bcc.n	e4be0 <L_shift+0xc>
   e4bf6:	bd70      	pop	{r4, r5, r6, pc}

000e4bf8 <__match>:
   e4bf8:	b530      	push	{r4, r5, lr}
   e4bfa:	6803      	ldr	r3, [r0, #0]
   e4bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
   e4c00:	3301      	adds	r3, #1
   e4c02:	b14c      	cbz	r4, e4c18 <__match+0x20>
   e4c04:	781a      	ldrb	r2, [r3, #0]
   e4c06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e4c0a:	2d19      	cmp	r5, #25
   e4c0c:	bf98      	it	ls
   e4c0e:	3220      	addls	r2, #32
   e4c10:	42a2      	cmp	r2, r4
   e4c12:	d0f3      	beq.n	e4bfc <__match+0x4>
   e4c14:	2000      	movs	r0, #0
   e4c16:	bd30      	pop	{r4, r5, pc}
   e4c18:	6003      	str	r3, [r0, #0]
   e4c1a:	2001      	movs	r0, #1
   e4c1c:	bd30      	pop	{r4, r5, pc}

000e4c1e <__hexnan>:
   e4c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4c22:	680b      	ldr	r3, [r1, #0]
   e4c24:	f8d0 b000 	ldr.w	fp, [r0]
   e4c28:	115e      	asrs	r6, r3, #5
   e4c2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e4c2e:	f013 031f 	ands.w	r3, r3, #31
   e4c32:	b085      	sub	sp, #20
   e4c34:	bf18      	it	ne
   e4c36:	3604      	addne	r6, #4
   e4c38:	1f35      	subs	r5, r6, #4
   e4c3a:	4617      	mov	r7, r2
   e4c3c:	2200      	movs	r2, #0
   e4c3e:	4682      	mov	sl, r0
   e4c40:	9301      	str	r3, [sp, #4]
   e4c42:	f846 2c04 	str.w	r2, [r6, #-4]
   e4c46:	46a8      	mov	r8, r5
   e4c48:	462c      	mov	r4, r5
   e4c4a:	9200      	str	r2, [sp, #0]
   e4c4c:	4691      	mov	r9, r2
   e4c4e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e4c52:	2900      	cmp	r1, #0
   e4c54:	d03c      	beq.n	e4cd0 <__hexnan+0xb2>
   e4c56:	4608      	mov	r0, r1
   e4c58:	9203      	str	r2, [sp, #12]
   e4c5a:	9102      	str	r1, [sp, #8]
   e4c5c:	f7ff fd86 	bl	e476c <__hexdig_fun>
   e4c60:	9a03      	ldr	r2, [sp, #12]
   e4c62:	bb00      	cbnz	r0, e4ca6 <__hexnan+0x88>
   e4c64:	9902      	ldr	r1, [sp, #8]
   e4c66:	2920      	cmp	r1, #32
   e4c68:	d816      	bhi.n	e4c98 <__hexnan+0x7a>
   e4c6a:	9b00      	ldr	r3, [sp, #0]
   e4c6c:	4599      	cmp	r9, r3
   e4c6e:	ddee      	ble.n	e4c4e <__hexnan+0x30>
   e4c70:	4544      	cmp	r4, r8
   e4c72:	d205      	bcs.n	e4c80 <__hexnan+0x62>
   e4c74:	2a07      	cmp	r2, #7
   e4c76:	dc03      	bgt.n	e4c80 <__hexnan+0x62>
   e4c78:	4641      	mov	r1, r8
   e4c7a:	4620      	mov	r0, r4
   e4c7c:	f7ff ffaa 	bl	e4bd4 <L_shift>
   e4c80:	42bc      	cmp	r4, r7
   e4c82:	d923      	bls.n	e4ccc <__hexnan+0xae>
   e4c84:	2300      	movs	r3, #0
   e4c86:	f1a4 0804 	sub.w	r8, r4, #4
   e4c8a:	f844 3c04 	str.w	r3, [r4, #-4]
   e4c8e:	f8cd 9000 	str.w	r9, [sp]
   e4c92:	4644      	mov	r4, r8
   e4c94:	461a      	mov	r2, r3
   e4c96:	e7da      	b.n	e4c4e <__hexnan+0x30>
   e4c98:	2929      	cmp	r1, #41	; 0x29
   e4c9a:	d148      	bne.n	e4d2e <__hexnan+0x110>
   e4c9c:	f10b 0301 	add.w	r3, fp, #1
   e4ca0:	f8ca 3000 	str.w	r3, [sl]
   e4ca4:	e014      	b.n	e4cd0 <__hexnan+0xb2>
   e4ca6:	3201      	adds	r2, #1
   e4ca8:	2a08      	cmp	r2, #8
   e4caa:	f109 0901 	add.w	r9, r9, #1
   e4cae:	dd06      	ble.n	e4cbe <__hexnan+0xa0>
   e4cb0:	42bc      	cmp	r4, r7
   e4cb2:	d9cc      	bls.n	e4c4e <__hexnan+0x30>
   e4cb4:	2300      	movs	r3, #0
   e4cb6:	f844 3c04 	str.w	r3, [r4, #-4]
   e4cba:	2201      	movs	r2, #1
   e4cbc:	3c04      	subs	r4, #4
   e4cbe:	6821      	ldr	r1, [r4, #0]
   e4cc0:	f000 000f 	and.w	r0, r0, #15
   e4cc4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e4cc8:	6020      	str	r0, [r4, #0]
   e4cca:	e7c0      	b.n	e4c4e <__hexnan+0x30>
   e4ccc:	2208      	movs	r2, #8
   e4cce:	e7be      	b.n	e4c4e <__hexnan+0x30>
   e4cd0:	f1b9 0f00 	cmp.w	r9, #0
   e4cd4:	d02b      	beq.n	e4d2e <__hexnan+0x110>
   e4cd6:	4544      	cmp	r4, r8
   e4cd8:	d205      	bcs.n	e4ce6 <__hexnan+0xc8>
   e4cda:	2a07      	cmp	r2, #7
   e4cdc:	dc03      	bgt.n	e4ce6 <__hexnan+0xc8>
   e4cde:	4641      	mov	r1, r8
   e4ce0:	4620      	mov	r0, r4
   e4ce2:	f7ff ff77 	bl	e4bd4 <L_shift>
   e4ce6:	42bc      	cmp	r4, r7
   e4ce8:	d90c      	bls.n	e4d04 <__hexnan+0xe6>
   e4cea:	463b      	mov	r3, r7
   e4cec:	f854 2b04 	ldr.w	r2, [r4], #4
   e4cf0:	f843 2b04 	str.w	r2, [r3], #4
   e4cf4:	42a5      	cmp	r5, r4
   e4cf6:	d2f9      	bcs.n	e4cec <__hexnan+0xce>
   e4cf8:	2200      	movs	r2, #0
   e4cfa:	f843 2b04 	str.w	r2, [r3], #4
   e4cfe:	429d      	cmp	r5, r3
   e4d00:	d2fb      	bcs.n	e4cfa <__hexnan+0xdc>
   e4d02:	e00b      	b.n	e4d1c <__hexnan+0xfe>
   e4d04:	9b01      	ldr	r3, [sp, #4]
   e4d06:	b14b      	cbz	r3, e4d1c <__hexnan+0xfe>
   e4d08:	f1c3 0220 	rsb	r2, r3, #32
   e4d0c:	f04f 33ff 	mov.w	r3, #4294967295
   e4d10:	40d3      	lsrs	r3, r2
   e4d12:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e4d16:	4013      	ands	r3, r2
   e4d18:	f846 3c04 	str.w	r3, [r6, #-4]
   e4d1c:	682b      	ldr	r3, [r5, #0]
   e4d1e:	b943      	cbnz	r3, e4d32 <__hexnan+0x114>
   e4d20:	42bd      	cmp	r5, r7
   e4d22:	d102      	bne.n	e4d2a <__hexnan+0x10c>
   e4d24:	2301      	movs	r3, #1
   e4d26:	602b      	str	r3, [r5, #0]
   e4d28:	e003      	b.n	e4d32 <__hexnan+0x114>
   e4d2a:	3d04      	subs	r5, #4
   e4d2c:	e7f6      	b.n	e4d1c <__hexnan+0xfe>
   e4d2e:	2004      	movs	r0, #4
   e4d30:	e000      	b.n	e4d34 <__hexnan+0x116>
   e4d32:	2005      	movs	r0, #5
   e4d34:	b005      	add	sp, #20
   e4d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e4d3c <_findenv_r>:
   e4d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4d40:	4607      	mov	r7, r0
   e4d42:	468b      	mov	fp, r1
   e4d44:	4690      	mov	r8, r2
   e4d46:	f000 fcda 	bl	e56fe <__env_lock>
   e4d4a:	4b19      	ldr	r3, [pc, #100]	; (e4db0 <_findenv_r+0x74>)
   e4d4c:	681d      	ldr	r5, [r3, #0]
   e4d4e:	469a      	mov	sl, r3
   e4d50:	b13d      	cbz	r5, e4d62 <_findenv_r+0x26>
   e4d52:	465c      	mov	r4, fp
   e4d54:	4623      	mov	r3, r4
   e4d56:	f813 2b01 	ldrb.w	r2, [r3], #1
   e4d5a:	b142      	cbz	r2, e4d6e <_findenv_r+0x32>
   e4d5c:	2a3d      	cmp	r2, #61	; 0x3d
   e4d5e:	461c      	mov	r4, r3
   e4d60:	d1f8      	bne.n	e4d54 <_findenv_r+0x18>
   e4d62:	4638      	mov	r0, r7
   e4d64:	f000 fccc 	bl	e5700 <__env_unlock>
   e4d68:	2000      	movs	r0, #0
   e4d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4d6e:	ebcb 0404 	rsb	r4, fp, r4
   e4d72:	46a9      	mov	r9, r5
   e4d74:	f859 0b04 	ldr.w	r0, [r9], #4
   e4d78:	2800      	cmp	r0, #0
   e4d7a:	d0f2      	beq.n	e4d62 <_findenv_r+0x26>
   e4d7c:	4622      	mov	r2, r4
   e4d7e:	4659      	mov	r1, fp
   e4d80:	f7fe faf4 	bl	e336c <strncmp>
   e4d84:	b988      	cbnz	r0, e4daa <_findenv_r+0x6e>
   e4d86:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e4d8a:	191e      	adds	r6, r3, r4
   e4d8c:	5d1b      	ldrb	r3, [r3, r4]
   e4d8e:	2b3d      	cmp	r3, #61	; 0x3d
   e4d90:	d10b      	bne.n	e4daa <_findenv_r+0x6e>
   e4d92:	f8da 3000 	ldr.w	r3, [sl]
   e4d96:	1aed      	subs	r5, r5, r3
   e4d98:	10ad      	asrs	r5, r5, #2
   e4d9a:	4638      	mov	r0, r7
   e4d9c:	f8c8 5000 	str.w	r5, [r8]
   e4da0:	f000 fcae 	bl	e5700 <__env_unlock>
   e4da4:	1c70      	adds	r0, r6, #1
   e4da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4daa:	464d      	mov	r5, r9
   e4dac:	e7e1      	b.n	e4d72 <_findenv_r+0x36>
   e4dae:	bf00      	nop
   e4db0:	2003d6ac 	.word	0x2003d6ac

000e4db4 <_getenv_r>:
   e4db4:	b507      	push	{r0, r1, r2, lr}
   e4db6:	aa01      	add	r2, sp, #4
   e4db8:	f7ff ffc0 	bl	e4d3c <_findenv_r>
   e4dbc:	b003      	add	sp, #12
   e4dbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e4dc4 <__gettzinfo>:
   e4dc4:	4800      	ldr	r0, [pc, #0]	; (e4dc8 <__gettzinfo+0x4>)
   e4dc6:	4770      	bx	lr
   e4dc8:	2003d66c 	.word	0x2003d66c

000e4dcc <gmtime_r>:
   e4dcc:	6802      	ldr	r2, [r0, #0]
   e4dce:	4b47      	ldr	r3, [pc, #284]	; (e4eec <gmtime_r+0x120>)
   e4dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e4dd2:	fb92 f4f3 	sdiv	r4, r2, r3
   e4dd6:	fb03 2214 	mls	r2, r3, r4, r2
   e4dda:	2a00      	cmp	r2, #0
   e4ddc:	bfbc      	itt	lt
   e4dde:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e4de2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e4de6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e4dea:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e4dee:	fb92 f3f0 	sdiv	r3, r2, r0
   e4df2:	fb00 2213 	mls	r2, r0, r3, r2
   e4df6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e4dfa:	bfac      	ite	ge
   e4dfc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e4e00:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e4e04:	608b      	str	r3, [r1, #8]
   e4e06:	fb92 f3f0 	sdiv	r3, r2, r0
   e4e0a:	fb00 2213 	mls	r2, r0, r3, r2
   e4e0e:	604b      	str	r3, [r1, #4]
   e4e10:	600a      	str	r2, [r1, #0]
   e4e12:	2307      	movs	r3, #7
   e4e14:	1ce2      	adds	r2, r4, #3
   e4e16:	fb92 f3f3 	sdiv	r3, r2, r3
   e4e1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e4e1e:	1ad3      	subs	r3, r2, r3
   e4e20:	618b      	str	r3, [r1, #24]
   e4e22:	4b33      	ldr	r3, [pc, #204]	; (e4ef0 <gmtime_r+0x124>)
   e4e24:	4d33      	ldr	r5, [pc, #204]	; (e4ef4 <gmtime_r+0x128>)
   e4e26:	fb94 f5f5 	sdiv	r5, r4, r5
   e4e2a:	fb03 4405 	mla	r4, r3, r5, r4
   e4e2e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e4e32:	fbb4 f2f2 	udiv	r2, r4, r2
   e4e36:	4422      	add	r2, r4
   e4e38:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e4e3c:	fbb4 f3f7 	udiv	r3, r4, r7
   e4e40:	1ad2      	subs	r2, r2, r3
   e4e42:	482d      	ldr	r0, [pc, #180]	; (e4ef8 <gmtime_r+0x12c>)
   e4e44:	fbb4 f0f0 	udiv	r0, r4, r0
   e4e48:	f648 6694 	movw	r6, #36500	; 0x8e94
   e4e4c:	1a13      	subs	r3, r2, r0
   e4e4e:	fbb3 f6f6 	udiv	r6, r3, r6
   e4e52:	4434      	add	r4, r6
   e4e54:	f240 126d 	movw	r2, #365	; 0x16d
   e4e58:	fbb3 f0f2 	udiv	r0, r3, r2
   e4e5c:	fbb3 f3f7 	udiv	r3, r3, r7
   e4e60:	1ae3      	subs	r3, r4, r3
   e4e62:	fb02 3310 	mls	r3, r2, r0, r3
   e4e66:	2499      	movs	r4, #153	; 0x99
   e4e68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e4e6c:	3202      	adds	r2, #2
   e4e6e:	fbb2 f2f4 	udiv	r2, r2, r4
   e4e72:	2a0a      	cmp	r2, #10
   e4e74:	fb04 f402 	mul.w	r4, r4, r2
   e4e78:	f104 0602 	add.w	r6, r4, #2
   e4e7c:	f04f 0405 	mov.w	r4, #5
   e4e80:	fbb6 f4f4 	udiv	r4, r6, r4
   e4e84:	bf34      	ite	cc
   e4e86:	2602      	movcc	r6, #2
   e4e88:	f06f 0609 	mvncs.w	r6, #9
   e4e8c:	4416      	add	r6, r2
   e4e8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4e92:	fb02 0505 	mla	r5, r2, r5, r0
   e4e96:	1c5f      	adds	r7, r3, #1
   e4e98:	2e01      	cmp	r6, #1
   e4e9a:	bf98      	it	ls
   e4e9c:	3501      	addls	r5, #1
   e4e9e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e4ea2:	eba7 0704 	sub.w	r7, r7, r4
   e4ea6:	d302      	bcc.n	e4eae <gmtime_r+0xe2>
   e4ea8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e4eac:	e014      	b.n	e4ed8 <gmtime_r+0x10c>
   e4eae:	0782      	lsls	r2, r0, #30
   e4eb0:	d105      	bne.n	e4ebe <gmtime_r+0xf2>
   e4eb2:	2464      	movs	r4, #100	; 0x64
   e4eb4:	fbb0 f2f4 	udiv	r2, r0, r4
   e4eb8:	fb04 0212 	mls	r2, r4, r2, r0
   e4ebc:	b94a      	cbnz	r2, e4ed2 <gmtime_r+0x106>
   e4ebe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4ec2:	fbb0 f4f2 	udiv	r4, r0, r2
   e4ec6:	fb02 0014 	mls	r0, r2, r4, r0
   e4eca:	fab0 f280 	clz	r2, r0
   e4ece:	0952      	lsrs	r2, r2, #5
   e4ed0:	e000      	b.n	e4ed4 <gmtime_r+0x108>
   e4ed2:	2201      	movs	r2, #1
   e4ed4:	333b      	adds	r3, #59	; 0x3b
   e4ed6:	441a      	add	r2, r3
   e4ed8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e4edc:	2300      	movs	r3, #0
   e4ede:	61ca      	str	r2, [r1, #28]
   e4ee0:	614d      	str	r5, [r1, #20]
   e4ee2:	610e      	str	r6, [r1, #16]
   e4ee4:	60cf      	str	r7, [r1, #12]
   e4ee6:	620b      	str	r3, [r1, #32]
   e4ee8:	4608      	mov	r0, r1
   e4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e4eec:	00015180 	.word	0x00015180
   e4ef0:	fffdc54f 	.word	0xfffdc54f
   e4ef4:	00023ab1 	.word	0x00023ab1
   e4ef8:	00023ab0 	.word	0x00023ab0

000e4efc <labs>:
   e4efc:	2800      	cmp	r0, #0
   e4efe:	bfb8      	it	lt
   e4f00:	4240      	neglt	r0, r0
   e4f02:	4770      	bx	lr

000e4f04 <_Balloc>:
   e4f04:	b570      	push	{r4, r5, r6, lr}
   e4f06:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e4f08:	4604      	mov	r4, r0
   e4f0a:	460e      	mov	r6, r1
   e4f0c:	b93d      	cbnz	r5, e4f1e <_Balloc+0x1a>
   e4f0e:	2010      	movs	r0, #16
   e4f10:	f7f4 fd10 	bl	d9934 <malloc>
   e4f14:	6260      	str	r0, [r4, #36]	; 0x24
   e4f16:	6045      	str	r5, [r0, #4]
   e4f18:	6085      	str	r5, [r0, #8]
   e4f1a:	6005      	str	r5, [r0, #0]
   e4f1c:	60c5      	str	r5, [r0, #12]
   e4f1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e4f20:	68eb      	ldr	r3, [r5, #12]
   e4f22:	b143      	cbz	r3, e4f36 <_Balloc+0x32>
   e4f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e4f26:	68db      	ldr	r3, [r3, #12]
   e4f28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e4f2c:	b178      	cbz	r0, e4f4e <_Balloc+0x4a>
   e4f2e:	6802      	ldr	r2, [r0, #0]
   e4f30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e4f34:	e017      	b.n	e4f66 <_Balloc+0x62>
   e4f36:	2221      	movs	r2, #33	; 0x21
   e4f38:	2104      	movs	r1, #4
   e4f3a:	4620      	mov	r0, r4
   e4f3c:	f000 fbd1 	bl	e56e2 <_calloc_r>
   e4f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e4f42:	60e8      	str	r0, [r5, #12]
   e4f44:	68db      	ldr	r3, [r3, #12]
   e4f46:	2b00      	cmp	r3, #0
   e4f48:	d1ec      	bne.n	e4f24 <_Balloc+0x20>
   e4f4a:	2000      	movs	r0, #0
   e4f4c:	bd70      	pop	{r4, r5, r6, pc}
   e4f4e:	2101      	movs	r1, #1
   e4f50:	fa01 f506 	lsl.w	r5, r1, r6
   e4f54:	1d6a      	adds	r2, r5, #5
   e4f56:	0092      	lsls	r2, r2, #2
   e4f58:	4620      	mov	r0, r4
   e4f5a:	f000 fbc2 	bl	e56e2 <_calloc_r>
   e4f5e:	2800      	cmp	r0, #0
   e4f60:	d0f3      	beq.n	e4f4a <_Balloc+0x46>
   e4f62:	6046      	str	r6, [r0, #4]
   e4f64:	6085      	str	r5, [r0, #8]
   e4f66:	2300      	movs	r3, #0
   e4f68:	6103      	str	r3, [r0, #16]
   e4f6a:	60c3      	str	r3, [r0, #12]
   e4f6c:	bd70      	pop	{r4, r5, r6, pc}

000e4f6e <_Bfree>:
   e4f6e:	b570      	push	{r4, r5, r6, lr}
   e4f70:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e4f72:	4606      	mov	r6, r0
   e4f74:	460d      	mov	r5, r1
   e4f76:	b93c      	cbnz	r4, e4f88 <_Bfree+0x1a>
   e4f78:	2010      	movs	r0, #16
   e4f7a:	f7f4 fcdb 	bl	d9934 <malloc>
   e4f7e:	6270      	str	r0, [r6, #36]	; 0x24
   e4f80:	6044      	str	r4, [r0, #4]
   e4f82:	6084      	str	r4, [r0, #8]
   e4f84:	6004      	str	r4, [r0, #0]
   e4f86:	60c4      	str	r4, [r0, #12]
   e4f88:	b13d      	cbz	r5, e4f9a <_Bfree+0x2c>
   e4f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e4f8c:	686a      	ldr	r2, [r5, #4]
   e4f8e:	68db      	ldr	r3, [r3, #12]
   e4f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e4f94:	6029      	str	r1, [r5, #0]
   e4f96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e4f9a:	bd70      	pop	{r4, r5, r6, pc}

000e4f9c <__multadd>:
   e4f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e4fa0:	690d      	ldr	r5, [r1, #16]
   e4fa2:	461f      	mov	r7, r3
   e4fa4:	4606      	mov	r6, r0
   e4fa6:	460c      	mov	r4, r1
   e4fa8:	f101 0e14 	add.w	lr, r1, #20
   e4fac:	2300      	movs	r3, #0
   e4fae:	f8de 0000 	ldr.w	r0, [lr]
   e4fb2:	b281      	uxth	r1, r0
   e4fb4:	fb02 7101 	mla	r1, r2, r1, r7
   e4fb8:	0c0f      	lsrs	r7, r1, #16
   e4fba:	0c00      	lsrs	r0, r0, #16
   e4fbc:	fb02 7000 	mla	r0, r2, r0, r7
   e4fc0:	b289      	uxth	r1, r1
   e4fc2:	3301      	adds	r3, #1
   e4fc4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e4fc8:	429d      	cmp	r5, r3
   e4fca:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e4fce:	f84e 1b04 	str.w	r1, [lr], #4
   e4fd2:	dcec      	bgt.n	e4fae <__multadd+0x12>
   e4fd4:	b1d7      	cbz	r7, e500c <__multadd+0x70>
   e4fd6:	68a3      	ldr	r3, [r4, #8]
   e4fd8:	429d      	cmp	r5, r3
   e4fda:	db12      	blt.n	e5002 <__multadd+0x66>
   e4fdc:	6861      	ldr	r1, [r4, #4]
   e4fde:	4630      	mov	r0, r6
   e4fe0:	3101      	adds	r1, #1
   e4fe2:	f7ff ff8f 	bl	e4f04 <_Balloc>
   e4fe6:	6922      	ldr	r2, [r4, #16]
   e4fe8:	3202      	adds	r2, #2
   e4fea:	f104 010c 	add.w	r1, r4, #12
   e4fee:	4680      	mov	r8, r0
   e4ff0:	0092      	lsls	r2, r2, #2
   e4ff2:	300c      	adds	r0, #12
   e4ff4:	f7fd f9e6 	bl	e23c4 <memcpy>
   e4ff8:	4621      	mov	r1, r4
   e4ffa:	4630      	mov	r0, r6
   e4ffc:	f7ff ffb7 	bl	e4f6e <_Bfree>
   e5000:	4644      	mov	r4, r8
   e5002:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e5006:	3501      	adds	r5, #1
   e5008:	615f      	str	r7, [r3, #20]
   e500a:	6125      	str	r5, [r4, #16]
   e500c:	4620      	mov	r0, r4
   e500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e5012 <__s2b>:
   e5012:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e5016:	460c      	mov	r4, r1
   e5018:	4615      	mov	r5, r2
   e501a:	461f      	mov	r7, r3
   e501c:	2209      	movs	r2, #9
   e501e:	3308      	adds	r3, #8
   e5020:	4606      	mov	r6, r0
   e5022:	fb93 f3f2 	sdiv	r3, r3, r2
   e5026:	2100      	movs	r1, #0
   e5028:	2201      	movs	r2, #1
   e502a:	429a      	cmp	r2, r3
   e502c:	da02      	bge.n	e5034 <__s2b+0x22>
   e502e:	0052      	lsls	r2, r2, #1
   e5030:	3101      	adds	r1, #1
   e5032:	e7fa      	b.n	e502a <__s2b+0x18>
   e5034:	4630      	mov	r0, r6
   e5036:	f7ff ff65 	bl	e4f04 <_Balloc>
   e503a:	9b08      	ldr	r3, [sp, #32]
   e503c:	6143      	str	r3, [r0, #20]
   e503e:	2d09      	cmp	r5, #9
   e5040:	f04f 0301 	mov.w	r3, #1
   e5044:	6103      	str	r3, [r0, #16]
   e5046:	dd11      	ble.n	e506c <__s2b+0x5a>
   e5048:	f104 0809 	add.w	r8, r4, #9
   e504c:	46c1      	mov	r9, r8
   e504e:	442c      	add	r4, r5
   e5050:	f819 3b01 	ldrb.w	r3, [r9], #1
   e5054:	4601      	mov	r1, r0
   e5056:	3b30      	subs	r3, #48	; 0x30
   e5058:	220a      	movs	r2, #10
   e505a:	4630      	mov	r0, r6
   e505c:	f7ff ff9e 	bl	e4f9c <__multadd>
   e5060:	45a1      	cmp	r9, r4
   e5062:	d1f5      	bne.n	e5050 <__s2b+0x3e>
   e5064:	eb08 0405 	add.w	r4, r8, r5
   e5068:	3c08      	subs	r4, #8
   e506a:	e001      	b.n	e5070 <__s2b+0x5e>
   e506c:	340a      	adds	r4, #10
   e506e:	2509      	movs	r5, #9
   e5070:	1b2d      	subs	r5, r5, r4
   e5072:	1963      	adds	r3, r4, r5
   e5074:	429f      	cmp	r7, r3
   e5076:	dd08      	ble.n	e508a <__s2b+0x78>
   e5078:	f814 3b01 	ldrb.w	r3, [r4], #1
   e507c:	4601      	mov	r1, r0
   e507e:	3b30      	subs	r3, #48	; 0x30
   e5080:	220a      	movs	r2, #10
   e5082:	4630      	mov	r0, r6
   e5084:	f7ff ff8a 	bl	e4f9c <__multadd>
   e5088:	e7f3      	b.n	e5072 <__s2b+0x60>
   e508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e508e <__hi0bits>:
   e508e:	0c03      	lsrs	r3, r0, #16
   e5090:	041b      	lsls	r3, r3, #16
   e5092:	b913      	cbnz	r3, e509a <__hi0bits+0xc>
   e5094:	0400      	lsls	r0, r0, #16
   e5096:	2310      	movs	r3, #16
   e5098:	e000      	b.n	e509c <__hi0bits+0xe>
   e509a:	2300      	movs	r3, #0
   e509c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e50a0:	bf04      	itt	eq
   e50a2:	0200      	lsleq	r0, r0, #8
   e50a4:	3308      	addeq	r3, #8
   e50a6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e50aa:	bf04      	itt	eq
   e50ac:	0100      	lsleq	r0, r0, #4
   e50ae:	3304      	addeq	r3, #4
   e50b0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e50b4:	bf04      	itt	eq
   e50b6:	0080      	lsleq	r0, r0, #2
   e50b8:	3302      	addeq	r3, #2
   e50ba:	2800      	cmp	r0, #0
   e50bc:	db03      	blt.n	e50c6 <__hi0bits+0x38>
   e50be:	0042      	lsls	r2, r0, #1
   e50c0:	d503      	bpl.n	e50ca <__hi0bits+0x3c>
   e50c2:	1c58      	adds	r0, r3, #1
   e50c4:	4770      	bx	lr
   e50c6:	4618      	mov	r0, r3
   e50c8:	4770      	bx	lr
   e50ca:	2020      	movs	r0, #32
   e50cc:	4770      	bx	lr

000e50ce <__lo0bits>:
   e50ce:	6803      	ldr	r3, [r0, #0]
   e50d0:	f013 0207 	ands.w	r2, r3, #7
   e50d4:	d00b      	beq.n	e50ee <__lo0bits+0x20>
   e50d6:	07d9      	lsls	r1, r3, #31
   e50d8:	d422      	bmi.n	e5120 <__lo0bits+0x52>
   e50da:	079a      	lsls	r2, r3, #30
   e50dc:	bf4b      	itete	mi
   e50de:	085b      	lsrmi	r3, r3, #1
   e50e0:	089b      	lsrpl	r3, r3, #2
   e50e2:	6003      	strmi	r3, [r0, #0]
   e50e4:	6003      	strpl	r3, [r0, #0]
   e50e6:	bf4c      	ite	mi
   e50e8:	2001      	movmi	r0, #1
   e50ea:	2002      	movpl	r0, #2
   e50ec:	4770      	bx	lr
   e50ee:	b299      	uxth	r1, r3
   e50f0:	b909      	cbnz	r1, e50f6 <__lo0bits+0x28>
   e50f2:	0c1b      	lsrs	r3, r3, #16
   e50f4:	2210      	movs	r2, #16
   e50f6:	f013 0fff 	tst.w	r3, #255	; 0xff
   e50fa:	bf04      	itt	eq
   e50fc:	0a1b      	lsreq	r3, r3, #8
   e50fe:	3208      	addeq	r2, #8
   e5100:	0719      	lsls	r1, r3, #28
   e5102:	bf04      	itt	eq
   e5104:	091b      	lsreq	r3, r3, #4
   e5106:	3204      	addeq	r2, #4
   e5108:	0799      	lsls	r1, r3, #30
   e510a:	bf04      	itt	eq
   e510c:	089b      	lsreq	r3, r3, #2
   e510e:	3202      	addeq	r2, #2
   e5110:	07d9      	lsls	r1, r3, #31
   e5112:	d402      	bmi.n	e511a <__lo0bits+0x4c>
   e5114:	085b      	lsrs	r3, r3, #1
   e5116:	d005      	beq.n	e5124 <__lo0bits+0x56>
   e5118:	3201      	adds	r2, #1
   e511a:	6003      	str	r3, [r0, #0]
   e511c:	4610      	mov	r0, r2
   e511e:	4770      	bx	lr
   e5120:	2000      	movs	r0, #0
   e5122:	4770      	bx	lr
   e5124:	2020      	movs	r0, #32
   e5126:	4770      	bx	lr

000e5128 <__i2b>:
   e5128:	b510      	push	{r4, lr}
   e512a:	460c      	mov	r4, r1
   e512c:	2101      	movs	r1, #1
   e512e:	f7ff fee9 	bl	e4f04 <_Balloc>
   e5132:	2201      	movs	r2, #1
   e5134:	6144      	str	r4, [r0, #20]
   e5136:	6102      	str	r2, [r0, #16]
   e5138:	bd10      	pop	{r4, pc}

000e513a <__multiply>:
   e513a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e513e:	4614      	mov	r4, r2
   e5140:	690a      	ldr	r2, [r1, #16]
   e5142:	6923      	ldr	r3, [r4, #16]
   e5144:	429a      	cmp	r2, r3
   e5146:	bfb8      	it	lt
   e5148:	460b      	movlt	r3, r1
   e514a:	4688      	mov	r8, r1
   e514c:	bfbc      	itt	lt
   e514e:	46a0      	movlt	r8, r4
   e5150:	461c      	movlt	r4, r3
   e5152:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e5156:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e515a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e515e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e5162:	eb07 0609 	add.w	r6, r7, r9
   e5166:	429e      	cmp	r6, r3
   e5168:	bfc8      	it	gt
   e516a:	3101      	addgt	r1, #1
   e516c:	f7ff feca 	bl	e4f04 <_Balloc>
   e5170:	f100 0514 	add.w	r5, r0, #20
   e5174:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e5178:	462b      	mov	r3, r5
   e517a:	2200      	movs	r2, #0
   e517c:	4563      	cmp	r3, ip
   e517e:	d202      	bcs.n	e5186 <__multiply+0x4c>
   e5180:	f843 2b04 	str.w	r2, [r3], #4
   e5184:	e7fa      	b.n	e517c <__multiply+0x42>
   e5186:	f104 0214 	add.w	r2, r4, #20
   e518a:	f108 0114 	add.w	r1, r8, #20
   e518e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e5192:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e5196:	9300      	str	r3, [sp, #0]
   e5198:	9b00      	ldr	r3, [sp, #0]
   e519a:	9201      	str	r2, [sp, #4]
   e519c:	4293      	cmp	r3, r2
   e519e:	d957      	bls.n	e5250 <__multiply+0x116>
   e51a0:	f8b2 b000 	ldrh.w	fp, [r2]
   e51a4:	f1bb 0f00 	cmp.w	fp, #0
   e51a8:	d023      	beq.n	e51f2 <__multiply+0xb8>
   e51aa:	4689      	mov	r9, r1
   e51ac:	46ae      	mov	lr, r5
   e51ae:	f04f 0800 	mov.w	r8, #0
   e51b2:	f859 4b04 	ldr.w	r4, [r9], #4
   e51b6:	f8be a000 	ldrh.w	sl, [lr]
   e51ba:	b2a3      	uxth	r3, r4
   e51bc:	fb0b a303 	mla	r3, fp, r3, sl
   e51c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e51c4:	f8de 4000 	ldr.w	r4, [lr]
   e51c8:	4443      	add	r3, r8
   e51ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e51ce:	fb0b 840a 	mla	r4, fp, sl, r8
   e51d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e51d6:	46f2      	mov	sl, lr
   e51d8:	b29b      	uxth	r3, r3
   e51da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e51de:	454f      	cmp	r7, r9
   e51e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e51e4:	f84a 3b04 	str.w	r3, [sl], #4
   e51e8:	d901      	bls.n	e51ee <__multiply+0xb4>
   e51ea:	46d6      	mov	lr, sl
   e51ec:	e7e1      	b.n	e51b2 <__multiply+0x78>
   e51ee:	f8ce 8004 	str.w	r8, [lr, #4]
   e51f2:	9b01      	ldr	r3, [sp, #4]
   e51f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e51f8:	3204      	adds	r2, #4
   e51fa:	f1ba 0f00 	cmp.w	sl, #0
   e51fe:	d021      	beq.n	e5244 <__multiply+0x10a>
   e5200:	682b      	ldr	r3, [r5, #0]
   e5202:	462c      	mov	r4, r5
   e5204:	4689      	mov	r9, r1
   e5206:	f04f 0800 	mov.w	r8, #0
   e520a:	f8b9 e000 	ldrh.w	lr, [r9]
   e520e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e5212:	fb0a be0e 	mla	lr, sl, lr, fp
   e5216:	44f0      	add	r8, lr
   e5218:	46a3      	mov	fp, r4
   e521a:	b29b      	uxth	r3, r3
   e521c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e5220:	f84b 3b04 	str.w	r3, [fp], #4
   e5224:	f859 3b04 	ldr.w	r3, [r9], #4
   e5228:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e522c:	0c1b      	lsrs	r3, r3, #16
   e522e:	fb0a e303 	mla	r3, sl, r3, lr
   e5232:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e5236:	454f      	cmp	r7, r9
   e5238:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e523c:	d901      	bls.n	e5242 <__multiply+0x108>
   e523e:	465c      	mov	r4, fp
   e5240:	e7e3      	b.n	e520a <__multiply+0xd0>
   e5242:	6063      	str	r3, [r4, #4]
   e5244:	3504      	adds	r5, #4
   e5246:	e7a7      	b.n	e5198 <__multiply+0x5e>
   e5248:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e524c:	b913      	cbnz	r3, e5254 <__multiply+0x11a>
   e524e:	3e01      	subs	r6, #1
   e5250:	2e00      	cmp	r6, #0
   e5252:	dcf9      	bgt.n	e5248 <__multiply+0x10e>
   e5254:	6106      	str	r6, [r0, #16]
   e5256:	b003      	add	sp, #12
   e5258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e525c <__pow5mult>:
   e525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e5260:	4615      	mov	r5, r2
   e5262:	f012 0203 	ands.w	r2, r2, #3
   e5266:	4606      	mov	r6, r0
   e5268:	460f      	mov	r7, r1
   e526a:	d007      	beq.n	e527c <__pow5mult+0x20>
   e526c:	3a01      	subs	r2, #1
   e526e:	4c21      	ldr	r4, [pc, #132]	; (e52f4 <__pow5mult+0x98>)
   e5270:	2300      	movs	r3, #0
   e5272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e5276:	f7ff fe91 	bl	e4f9c <__multadd>
   e527a:	4607      	mov	r7, r0
   e527c:	10ad      	asrs	r5, r5, #2
   e527e:	d036      	beq.n	e52ee <__pow5mult+0x92>
   e5280:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e5282:	b93c      	cbnz	r4, e5294 <__pow5mult+0x38>
   e5284:	2010      	movs	r0, #16
   e5286:	f7f4 fb55 	bl	d9934 <malloc>
   e528a:	6270      	str	r0, [r6, #36]	; 0x24
   e528c:	6044      	str	r4, [r0, #4]
   e528e:	6084      	str	r4, [r0, #8]
   e5290:	6004      	str	r4, [r0, #0]
   e5292:	60c4      	str	r4, [r0, #12]
   e5294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e5298:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e529c:	b94c      	cbnz	r4, e52b2 <__pow5mult+0x56>
   e529e:	f240 2171 	movw	r1, #625	; 0x271
   e52a2:	4630      	mov	r0, r6
   e52a4:	f7ff ff40 	bl	e5128 <__i2b>
   e52a8:	2300      	movs	r3, #0
   e52aa:	f8c8 0008 	str.w	r0, [r8, #8]
   e52ae:	4604      	mov	r4, r0
   e52b0:	6003      	str	r3, [r0, #0]
   e52b2:	f04f 0800 	mov.w	r8, #0
   e52b6:	07eb      	lsls	r3, r5, #31
   e52b8:	d50a      	bpl.n	e52d0 <__pow5mult+0x74>
   e52ba:	4639      	mov	r1, r7
   e52bc:	4622      	mov	r2, r4
   e52be:	4630      	mov	r0, r6
   e52c0:	f7ff ff3b 	bl	e513a <__multiply>
   e52c4:	4639      	mov	r1, r7
   e52c6:	4681      	mov	r9, r0
   e52c8:	4630      	mov	r0, r6
   e52ca:	f7ff fe50 	bl	e4f6e <_Bfree>
   e52ce:	464f      	mov	r7, r9
   e52d0:	106d      	asrs	r5, r5, #1
   e52d2:	d00c      	beq.n	e52ee <__pow5mult+0x92>
   e52d4:	6820      	ldr	r0, [r4, #0]
   e52d6:	b108      	cbz	r0, e52dc <__pow5mult+0x80>
   e52d8:	4604      	mov	r4, r0
   e52da:	e7ec      	b.n	e52b6 <__pow5mult+0x5a>
   e52dc:	4622      	mov	r2, r4
   e52de:	4621      	mov	r1, r4
   e52e0:	4630      	mov	r0, r6
   e52e2:	f7ff ff2a 	bl	e513a <__multiply>
   e52e6:	6020      	str	r0, [r4, #0]
   e52e8:	f8c0 8000 	str.w	r8, [r0]
   e52ec:	e7f4      	b.n	e52d8 <__pow5mult+0x7c>
   e52ee:	4638      	mov	r0, r7
   e52f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e52f4:	000e7318 	.word	0x000e7318

000e52f8 <__lshift>:
   e52f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e52fc:	460c      	mov	r4, r1
   e52fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e5302:	6926      	ldr	r6, [r4, #16]
   e5304:	6849      	ldr	r1, [r1, #4]
   e5306:	68a3      	ldr	r3, [r4, #8]
   e5308:	4456      	add	r6, sl
   e530a:	4607      	mov	r7, r0
   e530c:	4691      	mov	r9, r2
   e530e:	1c75      	adds	r5, r6, #1
   e5310:	42ab      	cmp	r3, r5
   e5312:	da02      	bge.n	e531a <__lshift+0x22>
   e5314:	3101      	adds	r1, #1
   e5316:	005b      	lsls	r3, r3, #1
   e5318:	e7fa      	b.n	e5310 <__lshift+0x18>
   e531a:	4638      	mov	r0, r7
   e531c:	f7ff fdf2 	bl	e4f04 <_Balloc>
   e5320:	2300      	movs	r3, #0
   e5322:	4680      	mov	r8, r0
   e5324:	f100 0114 	add.w	r1, r0, #20
   e5328:	461a      	mov	r2, r3
   e532a:	4553      	cmp	r3, sl
   e532c:	da03      	bge.n	e5336 <__lshift+0x3e>
   e532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e5332:	3301      	adds	r3, #1
   e5334:	e7f9      	b.n	e532a <__lshift+0x32>
   e5336:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e533a:	6920      	ldr	r0, [r4, #16]
   e533c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e5340:	f019 091f 	ands.w	r9, r9, #31
   e5344:	f104 0114 	add.w	r1, r4, #20
   e5348:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e534c:	d014      	beq.n	e5378 <__lshift+0x80>
   e534e:	f1c9 0c20 	rsb	ip, r9, #32
   e5352:	2200      	movs	r2, #0
   e5354:	6808      	ldr	r0, [r1, #0]
   e5356:	fa00 f009 	lsl.w	r0, r0, r9
   e535a:	4302      	orrs	r2, r0
   e535c:	469a      	mov	sl, r3
   e535e:	f843 2b04 	str.w	r2, [r3], #4
   e5362:	f851 2b04 	ldr.w	r2, [r1], #4
   e5366:	458e      	cmp	lr, r1
   e5368:	fa22 f20c 	lsr.w	r2, r2, ip
   e536c:	d8f2      	bhi.n	e5354 <__lshift+0x5c>
   e536e:	f8ca 2004 	str.w	r2, [sl, #4]
   e5372:	b142      	cbz	r2, e5386 <__lshift+0x8e>
   e5374:	1cb5      	adds	r5, r6, #2
   e5376:	e006      	b.n	e5386 <__lshift+0x8e>
   e5378:	3b04      	subs	r3, #4
   e537a:	f851 2b04 	ldr.w	r2, [r1], #4
   e537e:	f843 2f04 	str.w	r2, [r3, #4]!
   e5382:	458e      	cmp	lr, r1
   e5384:	d8f9      	bhi.n	e537a <__lshift+0x82>
   e5386:	3d01      	subs	r5, #1
   e5388:	4638      	mov	r0, r7
   e538a:	f8c8 5010 	str.w	r5, [r8, #16]
   e538e:	4621      	mov	r1, r4
   e5390:	f7ff fded 	bl	e4f6e <_Bfree>
   e5394:	4640      	mov	r0, r8
   e5396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e539a <__mcmp>:
   e539a:	6903      	ldr	r3, [r0, #16]
   e539c:	690a      	ldr	r2, [r1, #16]
   e539e:	1a9b      	subs	r3, r3, r2
   e53a0:	b510      	push	{r4, lr}
   e53a2:	d111      	bne.n	e53c8 <__mcmp+0x2e>
   e53a4:	0092      	lsls	r2, r2, #2
   e53a6:	3014      	adds	r0, #20
   e53a8:	3114      	adds	r1, #20
   e53aa:	1883      	adds	r3, r0, r2
   e53ac:	440a      	add	r2, r1
   e53ae:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e53b2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e53b6:	428c      	cmp	r4, r1
   e53b8:	d002      	beq.n	e53c0 <__mcmp+0x26>
   e53ba:	d307      	bcc.n	e53cc <__mcmp+0x32>
   e53bc:	2001      	movs	r0, #1
   e53be:	bd10      	pop	{r4, pc}
   e53c0:	4298      	cmp	r0, r3
   e53c2:	d3f4      	bcc.n	e53ae <__mcmp+0x14>
   e53c4:	2000      	movs	r0, #0
   e53c6:	bd10      	pop	{r4, pc}
   e53c8:	4618      	mov	r0, r3
   e53ca:	bd10      	pop	{r4, pc}
   e53cc:	f04f 30ff 	mov.w	r0, #4294967295
   e53d0:	bd10      	pop	{r4, pc}

000e53d2 <__mdiff>:
   e53d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e53d6:	460c      	mov	r4, r1
   e53d8:	4607      	mov	r7, r0
   e53da:	4611      	mov	r1, r2
   e53dc:	4620      	mov	r0, r4
   e53de:	4615      	mov	r5, r2
   e53e0:	f7ff ffdb 	bl	e539a <__mcmp>
   e53e4:	1e06      	subs	r6, r0, #0
   e53e6:	d108      	bne.n	e53fa <__mdiff+0x28>
   e53e8:	4631      	mov	r1, r6
   e53ea:	4638      	mov	r0, r7
   e53ec:	f7ff fd8a 	bl	e4f04 <_Balloc>
   e53f0:	2301      	movs	r3, #1
   e53f2:	6103      	str	r3, [r0, #16]
   e53f4:	6146      	str	r6, [r0, #20]
   e53f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e53fa:	bfbc      	itt	lt
   e53fc:	4623      	movlt	r3, r4
   e53fe:	462c      	movlt	r4, r5
   e5400:	4638      	mov	r0, r7
   e5402:	6861      	ldr	r1, [r4, #4]
   e5404:	bfba      	itte	lt
   e5406:	461d      	movlt	r5, r3
   e5408:	2601      	movlt	r6, #1
   e540a:	2600      	movge	r6, #0
   e540c:	f7ff fd7a 	bl	e4f04 <_Balloc>
   e5410:	692b      	ldr	r3, [r5, #16]
   e5412:	60c6      	str	r6, [r0, #12]
   e5414:	6926      	ldr	r6, [r4, #16]
   e5416:	f105 0914 	add.w	r9, r5, #20
   e541a:	3414      	adds	r4, #20
   e541c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e5420:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e5424:	f100 0514 	add.w	r5, r0, #20
   e5428:	f04f 0c00 	mov.w	ip, #0
   e542c:	f854 3b04 	ldr.w	r3, [r4], #4
   e5430:	f859 2b04 	ldr.w	r2, [r9], #4
   e5434:	fa1c f183 	uxtah	r1, ip, r3
   e5438:	fa1f fe82 	uxth.w	lr, r2
   e543c:	0c12      	lsrs	r2, r2, #16
   e543e:	ebce 0101 	rsb	r1, lr, r1
   e5442:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e5446:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e544a:	b289      	uxth	r1, r1
   e544c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e5450:	45c8      	cmp	r8, r9
   e5452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e5456:	46a6      	mov	lr, r4
   e5458:	f845 3b04 	str.w	r3, [r5], #4
   e545c:	d8e6      	bhi.n	e542c <__mdiff+0x5a>
   e545e:	45be      	cmp	lr, r7
   e5460:	d20e      	bcs.n	e5480 <__mdiff+0xae>
   e5462:	f85e 1b04 	ldr.w	r1, [lr], #4
   e5466:	fa1c f281 	uxtah	r2, ip, r1
   e546a:	1413      	asrs	r3, r2, #16
   e546c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e5470:	b292      	uxth	r2, r2
   e5472:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e5476:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e547a:	f845 2b04 	str.w	r2, [r5], #4
   e547e:	e7ee      	b.n	e545e <__mdiff+0x8c>
   e5480:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e5484:	b90b      	cbnz	r3, e548a <__mdiff+0xb8>
   e5486:	3e01      	subs	r6, #1
   e5488:	e7fa      	b.n	e5480 <__mdiff+0xae>
   e548a:	6106      	str	r6, [r0, #16]
   e548c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e5490 <__ulp>:
   e5490:	4b12      	ldr	r3, [pc, #72]	; (e54dc <__ulp+0x4c>)
   e5492:	ee10 2a90 	vmov	r2, s1
   e5496:	401a      	ands	r2, r3
   e5498:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e549c:	2b00      	cmp	r3, #0
   e549e:	dd02      	ble.n	e54a6 <__ulp+0x16>
   e54a0:	2000      	movs	r0, #0
   e54a2:	4619      	mov	r1, r3
   e54a4:	e017      	b.n	e54d6 <__ulp+0x46>
   e54a6:	425b      	negs	r3, r3
   e54a8:	151b      	asrs	r3, r3, #20
   e54aa:	2b13      	cmp	r3, #19
   e54ac:	f04f 0000 	mov.w	r0, #0
   e54b0:	f04f 0100 	mov.w	r1, #0
   e54b4:	dc04      	bgt.n	e54c0 <__ulp+0x30>
   e54b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e54ba:	fa42 f103 	asr.w	r1, r2, r3
   e54be:	e00a      	b.n	e54d6 <__ulp+0x46>
   e54c0:	3b14      	subs	r3, #20
   e54c2:	2b1e      	cmp	r3, #30
   e54c4:	f04f 0201 	mov.w	r2, #1
   e54c8:	bfda      	itte	le
   e54ca:	f1c3 031f 	rsble	r3, r3, #31
   e54ce:	fa02 f303 	lslle.w	r3, r2, r3
   e54d2:	4613      	movgt	r3, r2
   e54d4:	4618      	mov	r0, r3
   e54d6:	ec41 0b10 	vmov	d0, r0, r1
   e54da:	4770      	bx	lr
   e54dc:	7ff00000 	.word	0x7ff00000

000e54e0 <__b2d>:
   e54e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e54e2:	6905      	ldr	r5, [r0, #16]
   e54e4:	f100 0614 	add.w	r6, r0, #20
   e54e8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e54ec:	1f2f      	subs	r7, r5, #4
   e54ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e54f2:	4620      	mov	r0, r4
   e54f4:	f7ff fdcb 	bl	e508e <__hi0bits>
   e54f8:	f1c0 0320 	rsb	r3, r0, #32
   e54fc:	280a      	cmp	r0, #10
   e54fe:	600b      	str	r3, [r1, #0]
   e5500:	dc14      	bgt.n	e552c <__b2d+0x4c>
   e5502:	f1c0 0e0b 	rsb	lr, r0, #11
   e5506:	fa24 f10e 	lsr.w	r1, r4, lr
   e550a:	42be      	cmp	r6, r7
   e550c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e5510:	bf34      	ite	cc
   e5512:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e5516:	2100      	movcs	r1, #0
   e5518:	3015      	adds	r0, #21
   e551a:	fa04 f000 	lsl.w	r0, r4, r0
   e551e:	fa21 f10e 	lsr.w	r1, r1, lr
   e5522:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e5526:	ea40 0201 	orr.w	r2, r0, r1
   e552a:	e023      	b.n	e5574 <__b2d+0x94>
   e552c:	42be      	cmp	r6, r7
   e552e:	bf3a      	itte	cc
   e5530:	f1a5 0708 	subcc.w	r7, r5, #8
   e5534:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e5538:	2100      	movcs	r1, #0
   e553a:	380b      	subs	r0, #11
   e553c:	d015      	beq.n	e556a <__b2d+0x8a>
   e553e:	4084      	lsls	r4, r0
   e5540:	f1c0 0520 	rsb	r5, r0, #32
   e5544:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e5548:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e554c:	42b7      	cmp	r7, r6
   e554e:	fa21 fe05 	lsr.w	lr, r1, r5
   e5552:	ea44 030e 	orr.w	r3, r4, lr
   e5556:	bf8c      	ite	hi
   e5558:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e555c:	2400      	movls	r4, #0
   e555e:	fa01 f000 	lsl.w	r0, r1, r0
   e5562:	40ec      	lsrs	r4, r5
   e5564:	ea40 0204 	orr.w	r2, r0, r4
   e5568:	e004      	b.n	e5574 <__b2d+0x94>
   e556a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e556e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e5572:	460a      	mov	r2, r1
   e5574:	ec43 2b10 	vmov	d0, r2, r3
   e5578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e557a <__d2b>:
   e557a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e557e:	460e      	mov	r6, r1
   e5580:	2101      	movs	r1, #1
   e5582:	ec59 8b10 	vmov	r8, r9, d0
   e5586:	4615      	mov	r5, r2
   e5588:	f7ff fcbc 	bl	e4f04 <_Balloc>
   e558c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e5590:	4607      	mov	r7, r0
   e5592:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e5596:	b10c      	cbz	r4, e559c <__d2b+0x22>
   e5598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e559c:	9301      	str	r3, [sp, #4]
   e559e:	f1b8 0f00 	cmp.w	r8, #0
   e55a2:	d019      	beq.n	e55d8 <__d2b+0x5e>
   e55a4:	a802      	add	r0, sp, #8
   e55a6:	f840 8d08 	str.w	r8, [r0, #-8]!
   e55aa:	f7ff fd90 	bl	e50ce <__lo0bits>
   e55ae:	9b00      	ldr	r3, [sp, #0]
   e55b0:	b148      	cbz	r0, e55c6 <__d2b+0x4c>
   e55b2:	9a01      	ldr	r2, [sp, #4]
   e55b4:	f1c0 0120 	rsb	r1, r0, #32
   e55b8:	fa02 f101 	lsl.w	r1, r2, r1
   e55bc:	430b      	orrs	r3, r1
   e55be:	40c2      	lsrs	r2, r0
   e55c0:	617b      	str	r3, [r7, #20]
   e55c2:	9201      	str	r2, [sp, #4]
   e55c4:	e000      	b.n	e55c8 <__d2b+0x4e>
   e55c6:	617b      	str	r3, [r7, #20]
   e55c8:	9b01      	ldr	r3, [sp, #4]
   e55ca:	61bb      	str	r3, [r7, #24]
   e55cc:	2b00      	cmp	r3, #0
   e55ce:	bf14      	ite	ne
   e55d0:	2102      	movne	r1, #2
   e55d2:	2101      	moveq	r1, #1
   e55d4:	6139      	str	r1, [r7, #16]
   e55d6:	e007      	b.n	e55e8 <__d2b+0x6e>
   e55d8:	a801      	add	r0, sp, #4
   e55da:	f7ff fd78 	bl	e50ce <__lo0bits>
   e55de:	9b01      	ldr	r3, [sp, #4]
   e55e0:	617b      	str	r3, [r7, #20]
   e55e2:	2101      	movs	r1, #1
   e55e4:	6139      	str	r1, [r7, #16]
   e55e6:	3020      	adds	r0, #32
   e55e8:	b134      	cbz	r4, e55f8 <__d2b+0x7e>
   e55ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e55ee:	4404      	add	r4, r0
   e55f0:	6034      	str	r4, [r6, #0]
   e55f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e55f6:	e009      	b.n	e560c <__d2b+0x92>
   e55f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e55fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e5600:	6030      	str	r0, [r6, #0]
   e5602:	6918      	ldr	r0, [r3, #16]
   e5604:	f7ff fd43 	bl	e508e <__hi0bits>
   e5608:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e560c:	6028      	str	r0, [r5, #0]
   e560e:	4638      	mov	r0, r7
   e5610:	b003      	add	sp, #12
   e5612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e5616 <__ratio>:
   e5616:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e561a:	4688      	mov	r8, r1
   e561c:	4669      	mov	r1, sp
   e561e:	4681      	mov	r9, r0
   e5620:	f7ff ff5e 	bl	e54e0 <__b2d>
   e5624:	a901      	add	r1, sp, #4
   e5626:	4640      	mov	r0, r8
   e5628:	ec55 4b10 	vmov	r4, r5, d0
   e562c:	f7ff ff58 	bl	e54e0 <__b2d>
   e5630:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e5634:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e5638:	1a9a      	subs	r2, r3, r2
   e563a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e563e:	1ac9      	subs	r1, r1, r3
   e5640:	ec57 6b10 	vmov	r6, r7, d0
   e5644:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e5648:	2b00      	cmp	r3, #0
   e564a:	bfcc      	ite	gt
   e564c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e5650:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e5654:	4632      	mov	r2, r6
   e5656:	463b      	mov	r3, r7
   e5658:	4620      	mov	r0, r4
   e565a:	4629      	mov	r1, r5
   e565c:	f7fc fb42 	bl	e1ce4 <__aeabi_ddiv>
   e5660:	ec41 0b10 	vmov	d0, r0, r1
   e5664:	b003      	add	sp, #12
   e5666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e566a <__copybits>:
   e566a:	3901      	subs	r1, #1
   e566c:	b510      	push	{r4, lr}
   e566e:	1149      	asrs	r1, r1, #5
   e5670:	6914      	ldr	r4, [r2, #16]
   e5672:	3101      	adds	r1, #1
   e5674:	f102 0314 	add.w	r3, r2, #20
   e5678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e567c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e5680:	42a3      	cmp	r3, r4
   e5682:	4602      	mov	r2, r0
   e5684:	d204      	bcs.n	e5690 <__copybits+0x26>
   e5686:	f853 2b04 	ldr.w	r2, [r3], #4
   e568a:	f840 2b04 	str.w	r2, [r0], #4
   e568e:	e7f7      	b.n	e5680 <__copybits+0x16>
   e5690:	2300      	movs	r3, #0
   e5692:	428a      	cmp	r2, r1
   e5694:	d202      	bcs.n	e569c <__copybits+0x32>
   e5696:	f842 3b04 	str.w	r3, [r2], #4
   e569a:	e7fa      	b.n	e5692 <__copybits+0x28>
   e569c:	bd10      	pop	{r4, pc}

000e569e <__any_on>:
   e569e:	f100 0214 	add.w	r2, r0, #20
   e56a2:	6900      	ldr	r0, [r0, #16]
   e56a4:	114b      	asrs	r3, r1, #5
   e56a6:	4298      	cmp	r0, r3
   e56a8:	b510      	push	{r4, lr}
   e56aa:	db0c      	blt.n	e56c6 <__any_on+0x28>
   e56ac:	dd0c      	ble.n	e56c8 <__any_on+0x2a>
   e56ae:	f011 011f 	ands.w	r1, r1, #31
   e56b2:	d009      	beq.n	e56c8 <__any_on+0x2a>
   e56b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e56b8:	fa24 f001 	lsr.w	r0, r4, r1
   e56bc:	fa00 f101 	lsl.w	r1, r0, r1
   e56c0:	428c      	cmp	r4, r1
   e56c2:	d10c      	bne.n	e56de <__any_on+0x40>
   e56c4:	e000      	b.n	e56c8 <__any_on+0x2a>
   e56c6:	4603      	mov	r3, r0
   e56c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e56cc:	4293      	cmp	r3, r2
   e56ce:	d904      	bls.n	e56da <__any_on+0x3c>
   e56d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e56d4:	2900      	cmp	r1, #0
   e56d6:	d0f9      	beq.n	e56cc <__any_on+0x2e>
   e56d8:	e001      	b.n	e56de <__any_on+0x40>
   e56da:	2000      	movs	r0, #0
   e56dc:	bd10      	pop	{r4, pc}
   e56de:	2001      	movs	r0, #1
   e56e0:	bd10      	pop	{r4, pc}

000e56e2 <_calloc_r>:
   e56e2:	b538      	push	{r3, r4, r5, lr}
   e56e4:	fb02 f401 	mul.w	r4, r2, r1
   e56e8:	4621      	mov	r1, r4
   e56ea:	f7f4 f96b 	bl	d99c4 <_malloc_r>
   e56ee:	4605      	mov	r5, r0
   e56f0:	b118      	cbz	r0, e56fa <_calloc_r+0x18>
   e56f2:	4622      	mov	r2, r4
   e56f4:	2100      	movs	r1, #0
   e56f6:	f7fc fe70 	bl	e23da <memset>
   e56fa:	4628      	mov	r0, r5
   e56fc:	bd38      	pop	{r3, r4, r5, pc}

000e56fe <__env_lock>:
   e56fe:	4770      	bx	lr

000e5700 <__env_unlock>:
   e5700:	4770      	bx	lr

000e5702 <link_code_end>:
	...

000e5704 <dynalib_user>:
   e5704:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e5714:	0000 0000                                   ....

000e5718 <functions>:
   e5718:	58be 000e c681 000d 0029 0000 0000 0000     .X......).......
   e5728:	58c2 000e ca01 000d 0029 0000 0000 0000     .X......).......
   e5738:	58c7 000e cac5 000d 0029 0000 0000 0000     .X......).......
   e5748:	58cc 000e c129 000d 0029 0000 0000 0000     .X..)...).......
   e5758:	58d1 000e cb89 000d 002a 0000 0000 0000     .X......*.......
   e5768:	58d7 000e c4a1 000d 0029 0000 0000 0000     .X......).......
   e5778:	58c3 000e c5c1 000d 0029 0000 0000 0000     .X......).......
   e5788:	58dc 000e cb91 000d 0029 0000 0000 0000     .X......).......
   e5798:	678c 000e 40c9 000d 0028 0000 0000 0000     .g...@..(.......
   e57a8:	58e1 000e cc69 000d 0029 0000 0000 0000     .X..i...).......
   e57b8:	58e5 000e 43d9 000d 0029 0000 0000 0000     .X...C..).......
   e57c8:	58e9 000e c691 000d 0029 0000 0000 0000     .X......).......
   e57d8:	58ef 000e ce49 000d 0029 0000 0000 0000     .X..I...).......
   e57e8:	58f2 000e cf59 000d 0029 0000 0000 0000     .X..Y...).......
   e57f8:	58f6 000e cf59 000d 0029 0000 0000 0000     .X..Y...).......
   e5808:	58fc 000e 4449 000d 002a 0000 0000 0000     .X..ID..*.......
   e5818:	5900 000e 4509 000d 002a 0000 0000 0000     .Y...E..*.......
   e5828:	5904 000e 40b9 000d 0028 0000 0000 0000     .Y...@..(.......
   e5838:	5907 000e d071 000d 002a 0000 0000 0000     .Y..q...*.......
   e5848:	58c8 000e c7b1 000d 0029 0000 0000 0000     .X......).......
   e5858:	590b 000e d3a9 000d 0029 0000 0000 0000     .Y......).......
   e5868:	5910 000e d485 000d 0029 0000 0000 0000     .Y......).......
   e5878:	58cd 000e c871 000d 0029 0000 0000 0000     .X..q...).......
   e5888:	5915 000e c8e1 000d 0029 0000 0000 0000     .Y......).......
	...
   e58a8:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e58b8:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e58c8:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e58d8:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e58e8:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e58f8:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e5908:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e5918:	0068 0000                                   h...

000e591c <_ZTVN8particle9LEDStatusE>:
	...
   e5924:	5359 000d 5375 000d 52f3 000d               YS..uS...R..

000e5930 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e5930:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e35     blnkinf.ver.0.5.
   e5940:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   e5950:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e5960:	6974 6c63 0065 7562 6c69 0064 6544 2063     ticle.build.Dec 
   e5970:	3220 3220 3130 2039 3131 313a 3a33 3133      2 2019 11:13:31
   e5980:	0000 4700 544d 7320 6365 6e6f 7364 6f20     ...GMT seconds o
   e5990:	6666 6573 2074 7369 203a 2500 0069 6c25     ffset is: .%i.%l
   e59a0:	0069 6544 6976 6563 0020 6120 6464 6572     i.Device . addre
   e59b0:	7373 303a 0078 4e20 544f 6120 0074 6353     ss:0x. NOT at.Sc
   e59c0:	6e61 696e 676e 2e2e 002e 6e55 6e6b 776f     anning....Unknow
   e59d0:	206e 7265 6f72 2072 7461 6120 6464 6572     n error at addre
   e59e0:	7373 3020 0078 6f4e 4920 4332 6420 7665     ss 0x.No I2C dev
   e59f0:	6369 7365 6620 756f 646e 000a 6f64 656e     ices found..done
   e5a00:	000a 6944 6373 6e6f 656e 7463 6465 4900     ..Disconnected.I
   e5a10:	696e 6974 6c61 7a69 6e69 2067 6c61 7261     nitializing alar
   e5a20:	006d 6553 6f63 646e 0073 6543 6c6c 6c75     m.Seconds.Cellul
   e5a30:	7261 6e20 746f 7220 6165 7964 4200 796c     ar not ready.Bly
   e5a40:	6b6e 6e20 746f 6320 6e6f 656e 7463 6465     nk not connected
   e5a50:	4100 656d 6972 6163 4e2f 7765 595f 726f     .America/New_Yor
   e5a60:	006b 6d41 7265 6369 2f61 6843 6369 6761     k.America/Chicag
   e5a70:	006f 6d41 7265 6369 2f61 6850 656f 696e     o.America/Phoeni
   e5a80:	0078 6d41 7265 6369 2f61 6f4c 5f73 6e41     x.America/Los_An
   e5a90:	6567 656c 0073 756f 0074 7770 006d 7764     geles.out.pwm.dw
   e5aa0:	6100 0077 7776 5300 4254 0059 4425 2520     .aw.vw.STBY.%D %
   e5ab0:	0052 0025 2020 2020 2020 2020 2020 2020     R.%.            
   e5ac0:	2020 2020 4700 696f 676e 7420 206f 6564         .Going to de
   e5ad0:	7065 7320 656c 7065 2000 202b 2500 2e32     ep sleep. + .%2.
   e5ae0:	6633 4300 6e6f 656e 7463 6465 4500 746e     3f.Connected.Ent
   e5af0:	7265 6320 646f 2065 6f74 7220 7365 7465     er code to reset
   e5b00:	4900 696e 6974 6c61 7a69 6465 6420 6665     .Initialized def
   e5b10:	7561 746c 7620 6c61 6575 0073 6572 6573     ault values.rese
   e5b20:	6d74 0065 6e45 6574 2072 7865 7270 7365     tme.Enter expres
   e5b30:	6973 6e6f 6820 7265 0065 6e45 6574 2072     sion here.Enter 
   e5b40:	6d65 6961 206c 6568 6572 4800 7261 2064     email here.Hard 
   e5b50:	6552 6573 7474 6e69 0067 6c42 6e79 206b     Resetting.Blynk 
   e5b60:	7369 6e20 776f 6320 6e6f 656e 7463 6465     is now connected
   e5b70:	2d20 7320 6e79 6963 676e 6120 6c6c 7020      - syncing all p
   e5b80:	6e69 2e73 7000 316d 7000 326d 7000 346d     ins..pm1.pm2.pm4
   e5b90:	7000 316d 0030 6f63 636e 7400 6d65 0070     .pm10.conc.temp.
   e5ba0:	3225 372e 0066 6854 2065 7865 7270 7365     %2.7f.The expres
   e5bb0:	6973 6e6f 6920 2073 7254 6575 5400 6568     sion is True.The
   e5bc0:	6520 7078 6572 7373 6f69 206e 7369 4620      expression is F
   e5bd0:	6c61 6573 4500 7272 726f 6e20 6165 2072     alse.Error near 
   e5be0:	6863 7261 203a 2a00 2a2a 4120 4343 4c45     char: .*** ACCEL
   e5bf0:	4920 544e 5245 5552 5450 4445 2a20 2a2a      INTERRUPTED ***
   e5c00:	2a00 2a2a 4920 414e 5443 5649 5449 2059     .*** INACTIVITY 
   e5c10:	2a2a 002a 447b 5645 4349 5f45 414e 454d     ***.{DEVICE_NAME
   e5c20:	207d 6174 706d 7265 6120 616c 6d72 6520     } tamper alarm e
   e5c30:	646e 6465 002e 447b 5645 4349 5f45 414e     nded..{DEVICE_NA
   e5c40:	454d 207d 203a 6154 706d 7265 6120 616c     ME} : Tamper ala
   e5c50:	6d72 6520 646e 6465 2a00 2a2a 4120 5443     rm ended.*** ACT
   e5c60:	5649 5449 2059 2a2a 002a 447b 5645 4349     IVITY ***.{DEVIC
   e5c70:	5f45 414e 454d 207d 6174 706d 7265 6120     E_NAME} tamper a
   e5c80:	616c 6d72 0021 447b 5645 4349 5f45 414e     larm!.{DEVICE_NA
   e5c90:	454d 207d 203a 6154 706d 7265 6120 616c     ME} : Tamper ala
   e5ca0:	6d72 4100 7474 6d65 7470 6e69 2067 6f74     rm.Attempting to
   e5cb0:	6320 6e6f 656e 7463 6320 6c65 756c 616c      connect cellula
   e5cc0:	2e72 2e2e 4300 6c65 756c 616c 2072 6572     r....Cellular re
   e5cd0:	6461 0079 7441 6574 706d 6974 676e 7420     ady.Attempting t
   e5ce0:	206f 6f63 6e6e 6365 2074 6f74 5020 7261     o connect to Par
   e5cf0:	6974 6c63 2e65 2e2e 5000 7261 6974 6c63     ticle....Particl
   e5d00:	2065 6f6e 2074 6f63 6e6e 6365 6574 0064     e not connected.
   e5d10:	6150 7472 6369 656c 6320 6e6f 656e 7463     Particle connect
   e5d20:	6465 4100 7474 6d65 7470 6e69 2067 6f74     ed.Attempting to
   e5d30:	6320 6e6f 656e 7463 7420 206f 6c42 6e79      connect to Blyn
   e5d40:	2e6b 2e2e 7a00 7065 6f74 6573 736e 2e65     k....zeptosense.
   e5d50:	6c62 6e79 2e6b 6363 4200 796c 6b6e 6320     blynk.cc.Blynk c
   e5d60:	6e6f 656e 7463 6465 5400 6d69 2065 7369     onnected.Time is
   e5d70:	7320 6e79 2763 6465 7420 206f 6874 2065      sync'ed to the 
   e5d80:	6c63 756f 0064 2d2d 614d 7373 4320 6e6f     cloud.--Mass Con
   e5d90:	6563 746e 6172 6974 6e6f 2d2d 2500 3a73     centration--.%s:
   e5da0:	2520 2e30 6632 0a0d 2d00 4e2d 6d75 6562      %0.2f...--Numbe
   e5db0:	2072 6f43 636e 6e65 7274 7461 6f69 2d6e     r Concentration-
   e5dc0:	002d 3025 312e 0066 0046 6574 706d 3a31     -.%0.1f.F.temp1:
   e5dd0:	0020 6756 7361 203a 4300 6e6f 3a63 0020      .Vgas: .Conc: .
   e5de0:	3025 302e 0066 003a 4c41 5245 2154 0020     %0.0f.:.ALERT! .
   e5df0:	4c41 5245 2154 2020 2020 2020 2020 2020     ALERT!          
   e5e00:	2020 0020 007c 447b 5645 4349 5f45 414e        .|.{DEVICE_NA
   e5e10:	454d 207d 6168 2073 6c61 7261 656d 2164     ME} has alarmed!
   e5e20:	7b00 4544 4956 4543 4e5f 4d41 7d45 3a20     .{DEVICE_NAME} :
   e5e30:	4120 616c 6d72 7b00 4544 4956 4543 4e5f      Alarm.{DEVICE_N
   e5e40:	4d41 7d45 6120 616c 6d72 6520 646e 6465     AME} alarm ended
   e5e50:	002e 447b 5645 4349 5f45 414e 454d 207d     ..{DEVICE_NAME} 
   e5e60:	203a 6c41 7261 206d 6e65 6564 0064 447b     : Alarm ended.{D
   e5e70:	5645 4349 5f45 414e 454d 207d 6162 7474     EVICE_NAME} batt
   e5e80:	7265 2079 7369 0020 2125 7b00 4544 4956     ery is .%!.{DEVI
   e5e90:	4543 4e5f 4d41 7d45 3a20 4220 7461 6574     CE_NAME} : Batte
   e5ea0:	7972 4c20 776f 4120 616c 6d72 2500 002e     ry Low Alarm.%..
   e5eb0:	447b 5645 4349 5f45 414e 454d 207d 203a     {DEVICE_NAME} : 
   e5ec0:	6142 7474 7265 2079 6f4c 2077 6c41 7261     Battery Low Alar
   e5ed0:	206d 6e65 6564 0064 6e55 6261 656c 7420     m ended.Unable t
   e5ee0:	206f 6572 6461 5320 5350 3033 2d20 7220     o read SPS30 - r
   e5ef0:	7365 7465 6974 676e 6420 7665 6369 0065     esetting device.
   e5f00:	3164 253d 0075 6f42 6f72 206e 6964 2064     d1=%u.Boron did 
   e5f10:	6f6e 2074 6177 656b 7520 2070 7266 6d6f     not wake up from
   e5f20:	5020 7261 6974 6c63 2065 6c73 6565 0070      Particle sleep.
   e5f30:	6f42 6f72 206e 6177 2073 6f77 656b 206e     Boron was woken 
   e5f40:	7075 6220 2079 2061 6970 006e 6f42 6f72     up by a pin.Boro
   e5f50:	206e 6177 2073 6f77 656b 206e 7075 6220     n was woken up b
   e5f60:	2079 6874 2065 6150 7472 6369 656c 5220     y the Particle R
   e5f70:	4354 2820 6661 6574 2072 2061 7073 6365     TC (after a spec
   e5f80:	6669 6569 2064 756e 626d 7265 6f20 2066     ified number of 
   e5f90:	6573 6f63 646e 2973 4200 726f 6e6f 7720     seconds).Boron w
   e5fa0:	7361 7720 6b6f 6e65 7520 2070 7962 6520     as woken up by e
   e5fb0:	7469 6568 2072 2061 6970 206e 726f 7420     ither a pin or t
   e5fc0:	6568 5020 7261 6974 6c63 2065 5452 2043     he Particle RTC 
   e5fd0:	6128 7466 7265 6120 7320 6570 6963 6966     (after a specifi
   e5fe0:	6465 6e20 6d75 6562 2072 666f 7320 6365     ed number of sec
   e5ff0:	6e6f 7364 0029 6843 6365 696b 676e 6920     onds).Checking i
   e6000:	6332 6420 7665 6369 7365 2e2e 002e 5245     2c devices....ER
   e6010:	4f52 0052 3249 2043 7349 7573 0065 4552     ROR.I2C Issue.RE
   e6020:	4441 0059 3249 2043 4b4f 4200 6665 726f     ADY.I2C OK.Befor
   e6030:	0065 6641 6574 0072 6d70 3e31 3031 7c30     e.After.pm1>100|
   e6040:	707c 326d 313e 3030 7c7c 6d70 3e34 3031     |pm2>100||pm4>10
   e6050:	7c30 707c 316d 3e30 3031 7c30 637c 6e6f     0||pm10>100||con
   e6060:	3e63 3031 7c30 747c 6d65 3e70 3531 0030     c>100||temp>150.
   e6070:	6f72 6562 7472 7340 6e65 6974 6e65 7474     robert@sentientt
   e6080:	6968 676e 2e73 6f63 006d 6946 7372 2074     hings.com.First 
   e6090:	7572 2e6e 4e00 746f 6620 7269 7473 7220     run..Not first r
   e60a0:	6e75 002e 4441 4c58 3433 2035 6553 7574     un..ADXL345 Setu
   e60b0:	0070 7356 7075 6620 726f 6120 6c6c 7320     p.Vsup for all s
   e60c0:	6e65 6f73 7372 3d20 0020 6356 2063 6f66     ensors = .Vcc fo
   e60d0:	2072 6c61 206c 6573 736e 726f 2073 203d     r all sensors = 
   e60e0:	5600 6572 2066 6f66 2072 6573 736e 726f     .Vref for sensor
   e60f0:	3120 3d20 0020 7a54 7265 206f 203d 4600      1 = .Tzero = .F
   e6100:	6e69 7369 6568 2064 6553 7474 6e69 2067     inished Setting 
   e6110:	7055 5400 2c31 6d20 3156 202c 3143 6800     Up.T1, mV1, C1.h
   e6120:	6f6f 2d6b 6572 7073 6e6f 6573 672f 746d     ook-response/gmt
   e6130:	664f 7366 7465 5300 7465 7075 6320 6d6f     Offset.Setup com
   e6140:	6c70 7465 0065 5320 2057 6556 2072 203d     plete. SW Ver = 
   e6150:	3032 3931 3031 2031 2000 6f4c 2063 203d     2019101 . Loc = 
   e6160:	2d4d 6142 6874 6f72 6d6f 3220 646e 6620     M-Bathroom 2nd f
   e6170:	6f6c 726f 0020 6552 6461 0079 5452 0043     loor .Ready.RTC.
   e6180:	7845 0070 5452 2043 4545 5250 4d4f 4100     Exp.RTC EEPROM.A
   e6190:	4344 4600 4152 004d 4441 4c58 3433 0035     DC.FRAM.ADXL345.
   e61a0:	5053 3353 0030 4d50 2e30 0035 4d50 2e31     SPS30.PM0.5.PM1.
   e61b0:	0030 4d50 2e32 0035 4d50 2e34 0030 4d50     0.PM2.5.PM4.0.PM
   e61c0:	3031 4f00 646c 7420 6d65 2e70 7320 6170     10.Old temp. spa
   e61d0:	206e 6e61 2064 666f 7366 7465 203a 2c00     n and offset: .,
   e61e0:	0020 4948 4847 4c00 574f 4e00 7765 7420      .HIGH.LOW.New t
   e61f0:	6d65 2e70 7320 6170 206e 6e61 2064 666f     emp. span and of
   e6200:	7366 7465 203a 5700 6568 206e 6167 2073     fset: .When gas 
   e6210:	6f63 636e 6e65 7274 7461 6f69 206e 7473     concentration st
   e6220:	6165 7964 202c 6e65 6574 2072 6f43 636e     eady, enter Conc
   e6230:	6e65 7274 7461 6f69 206e 6e69 7020 6d70     entration in ppm
   e6240:	6620 6c6f 6f6c 6577 2064 7962 2720 7263      followed by 'cr
   e6250:	2027 203d 4500 7272 726f 5320 7465 6974     ' = .Error Setti
   e6260:	676e 5320 6170 006e                         ng Span.

000e6268 <_ZTV10MB85RC256V>:
	...
   e6270:	855d 000d 855f 000d                         ]..._...

000e6278 <CSWTCH.57>:
   e6278:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e6288 <_ZL23BlynkWriteHandlerVector>:
   e6288:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6298:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e62a8:	92b7 000d 92b7 000d 63ad 000d 92b7 000d     .........c......
   e62b8:	63c9 000d 92b7 000d 6409 000d 92b7 000d     .c.......d......
   e62c8:	55e9 000d 568d 000d 5615 000d 92b7 000d     .U...V...V......
   e62d8:	6991 000d 92b7 000d 65b1 000d 56a9 000d     .i.......e...V..
   e62e8:	56c5 000d 566d 000d 5641 000d 92b7 000d     .V..mV..AV......
   e62f8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6308:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6318:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6328:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6338:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6348:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6358:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6368:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6378:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6388:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6398:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63a8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63b8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63c8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63d8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63e8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e63f8:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6408:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6418:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6428:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6438:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6448:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6458:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6468:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................
   e6478:	92b7 000d 92b7 000d 92b7 000d 92b7 000d     ................

000e6488 <_ZL22BlynkReadHandlerVector>:
   e6488:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6498:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64a8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64b8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64c8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64d8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64e8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e64f8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6508:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6518:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6528:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6538:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6548:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6558:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6568:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6578:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6588:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6598:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65a8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65b8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65c8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65d8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65e8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e65f8:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6608:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6618:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6628:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6638:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6648:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6658:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6668:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................
   e6678:	92b5 000d 92b5 000d 92b5 000d 92b5 000d     ................

000e6688 <_ZTVN5spark13EthernetClassE>:
	...
   e6690:	9a43 000d 9a39 000d 9a2f 000d 9a25 000d     C...9.../...%...
   e66a0:	9a19 000d 9a0d 000d 9a01 000d 99f9 000d     ................
   e66b0:	99ef 000d 99e5 000d bba3 000d               ............

000e66bc <_ZTV8SPIClass>:
	...
   e66c4:	9ab1 000d 9ab3 000d 616e 006e 766f 0066     ........nan.ovf.
   e66d4:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e66e4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e66f4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e6704:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e6714:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e6724:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e6734:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e6744:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e6754:	0020 205d 2800 3a29 0020 5b20 6300 646f      .] .(): . [.cod
   e6764:	2065 203d 6400 7465 6961 736c 3d20 0020     e = .details = .
   e6774:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   e6784:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   e6794:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   e67a4:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   e67b4:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e67c4:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e67d0 <_ZTV14CellularSignal>:
	...
   e67d8:	a631 000d a6c3 000d a633 000d a705 000d     1.......3.......
   e67e8:	a639 000d a6d1 000d a665 000d a691 000d     9.......e.......
   e67f8:	fffc ffff 0000 0000 a6bb 000d               ............

000e6804 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e680c:	a909 000d a90f 000d a953 000d a91d 000d     ........S.......
   e681c:	a90b 000d                                   ....

000e6820 <_ZTV9IPAddress>:
	...
   e6828:	aea1 000d ae91 000d ae93 000d               ............

000e6834 <_ZTV9USBSerial>:
	...
   e683c:	afa5 000d aff5 000d b003 000d 9f21 000d     ............!...
   e684c:	afe1 000d afa7 000d afbd 000d afef 000d     ................
   e685c:	afd3 000d afa1 000d                         ........

000e6864 <_ZTVN5spark13CellularClassE>:
	...
   e686c:	b14d 000d b143 000d b139 000d 5395 000d     M...C...9....S..
   e687c:	5389 000d b12d 000d b121 000d b119 000d     .S..-...!.......
   e688c:	b10f 000d b105 000d bba3 000d               ............

000e6898 <_ZTV11USARTSerial>:
	...
   e68a0:	b1fd 000d b24d 000d b25b 000d 9f21 000d     ....M...[...!...
   e68b0:	b211 000d b233 000d b21f 000d b247 000d     ....3.......G...
   e68c0:	b1ff 000d b203 000d                         ........

000e68c8 <_ZTV7TwoWire>:
	...
   e68d0:	b335 000d b37f 000d b357 000d b337 000d     5.......W...7...
   e68e0:	b35f 000d b367 000d b36f 000d b377 000d     _...g...o...w...

000e68f0 <_ZTVN5spark9MeshClassE>:
	...
   e68f8:	b4a9 000d b49f 000d b495 000d b48b 000d     ................
   e6908:	b47f 000d b473 000d b467 000d b45f 000d     ....s...g..._...
   e6918:	b455 000d b44b 000d bba3 000d               U...K.......

000e6924 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e692c:	b635 000d b63b 000d bb23 000d b649 000d     5...;...#...I...
   e693c:	b637 000d                                   7...

000e6940 <_ZTV9TCPClient>:
	...
   e6948:	a5a1 000d a5c1 000d b5ad 000d b5c7 000d     ................
   e6958:	b9c9 000d b71b 000d b6ed 000d b5f1 000d     ................
   e6968:	b8a5 000d b7a1 000d b74f 000d b999 000d     ........O.......
   e6978:	b5f3 000d b62b 000d b5d9 000d b64d 000d     ....+.......M...
   e6988:	b6cd 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e6998:	7265 6f72 2072 203d 6425 0000               error = %d..

000e69a4 <_ZTVN5spark12NetworkClassE>:
	...
   e69ac:	bb3b 000d bb45 000d bb4f 000d bb59 000d     ;...E...O...Y...
   e69bc:	bb63 000d bb6f 000d bb7b 000d bb87 000d     c...o...{.......
   e69cc:	bb8f 000d bb99 000d bba3 000d               ............

000e69d8 <atanlo>:
   e69d8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e69e8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e69f8 <atanhi>:
   e69f8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e6a08:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e6a18:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e6a28:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e6a38:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e6a48:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e6a60 <halF>:
   e6a60:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e6a70 <ln2LO>:
   e6a70:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e6a80 <ln2HI>:
   e6a80:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e6a90 <Zero>:
	...
   e6a9c:	0000 8000                                   ....

000e6aa0 <npio2_hw>:
   e6aa0:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e6ab0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e6ac0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e6ad0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e6ae0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e6af0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e6b00:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e6b10:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e6b20 <two_over_pi>:
   e6b20:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e6b30:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e6b40:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e6b50:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e6b60:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e6b70:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e6b80:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e6b90:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e6ba0:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e6bb0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e6bc0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e6bd0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e6be0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e6bf0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e6c00:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e6c10:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e6c20:	e27b 0060 8c6b 00c0                         {.`.k...

000e6c28 <init_jk>:
   e6c28:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e6c38 <PIo2>:
   e6c38:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e6c48:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e6c58:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e6c68:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e6c78 <TWO52>:
   e6c78:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e6c88 <day_name.4725>:
   e6c88:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e6c98:	6972 6153 4a74                                   riSat

000e6c9d <mon_name.4726>:
   e6c9d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e6cad:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e6cbd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e6ccd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e6cdd:	6425 000a                                   %d..

000e6ce1 <_ctype_>:
   e6ce1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e6cf1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e6d01:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e6d11:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e6d21:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e6d31:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e6d41:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e6d51:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e6d61:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e6de4 <__sf_fake_stdin>:
	...

000e6e04 <__sf_fake_stdout>:
	...

000e6e24 <__sf_fake_stderr>:
	...
   e6e44:	4f50 4953 0058 0000                         POSIX...

000e6e4c <_DAYS_BEFORE_MONTH>:
   e6e4c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e6e5c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e6e6c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e6e7c <DAYS_IN_MONTH>:
   e6e7c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e6e8c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e6e9c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e6eac <__month_lengths>:
   e6eac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e6ebc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e6ecc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e6edc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e6eec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e6efc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e6f0c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e6f1c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e6f2c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e6f3c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e6f4c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e6f5c:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e6f68 <fpi.5344>:
   e6f68:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e6f78:	0000 0000                                   ....

000e6f7c <fpinan.5380>:
   e6f7c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e6f8c:	0000 0000 6e69 7469 0079 0000               ....inity...

000e6f98 <tinytens>:
   e6f98:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e6fa8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e6fb8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e6fc8:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e6fd8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e6fe8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e6ff8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e7008:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e7018:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e7028:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e7038:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e7048:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e7058:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e7068:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e7078:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e7088:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e7098:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e70a8:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e70b8:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e70c8:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e70d8:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e70e8:	2053 7025 0000 0000                         S %p....

000e70f0 <_C_time_locale>:
   e70f0:	6fc8 000e 6fcc 000e 6fd0 000e 6fd4 000e     .o...o...o...o..
   e7100:	6fd8 000e 6fdc 000e 6fe0 000e 6fe4 000e     .o...o...o...o..
   e7110:	6fe8 000e 6fec 000e 6ff0 000e 6ff4 000e     .o...o...o...o..
   e7120:	6ff8 000e 7000 000e 7009 000e 700f 000e     .o...p...p...p..
   e7130:	6fd8 000e 7015 000e 701a 000e 701f 000e     .o...p...p...p..
   e7140:	7026 000e 7030 000e 7038 000e 7041 000e     &p..0p..8p..Ap..
   e7150:	704a 000e 704e 000e 7052 000e 7056 000e     Jp..Np..Rp..Vp..
   e7160:	705a 000e 705e 000e 7062 000e 7066 000e     Zp..^p..bp..fp..
   e7170:	706d 000e 7074 000e 707c 000e 7086 000e     mp..tp..|p...p..
   e7180:	708f 000e 7096 000e 709f 000e 70a8 000e     .p...p...p...p..
   e7190:	70b1 000e 6195 000e 70c6 000e 70c9 000e     .p...a...p...p..
   e71a0:	6ff8 000e 7000 000e 7009 000e 700f 000e     .o...p...p...p..
   e71b0:	6fd8 000e 7015 000e 701a 000e 701f 000e     .o...p...p...p..
   e71c0:	7026 000e 7030 000e 7038 000e 7041 000e     &p..0p..8p..Ap..
   e71d0:	66f8 000e 70e1 000e 5da8 000e 5da8 000e     .f...p...]...]..
   e71e0:	5da8 000e 5da8 000e 5da8 000e 5a54 4700     .]...]...]..TZ.G
   e71f0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e7200:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e7210:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e7220:	3a6e 6825 2575 006e                         n:%hu%n.

000e7228 <__mprec_tens>:
   e7228:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e7238:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e7248:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e7258:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e7268:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e7278:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e7288:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e7298:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e72a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e72b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e72c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e72d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e72e8:	9db4 79d9 7843 44ea                         ...yCx.D

000e72f0 <__mprec_bigtens>:
   e72f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e7300:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e7310:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e7318 <p05.5387>:
   e7318:	0005 0000 0019 0000 007d 0000               ........}...

000e7324 <link_const_variable_data_end>:
   e7324:	000d7bd5 	.word	0x000d7bd5
   e7328:	000d8239 	.word	0x000d8239
   e732c:	000d8559 	.word	0x000d8559
   e7330:	000d86b5 	.word	0x000d86b5
   e7334:	000d881d 	.word	0x000d881d
   e7338:	000d8bed 	.word	0x000d8bed
   e733c:	000d8d4f 	.word	0x000d8d4f
   e7340:	000d9113 	.word	0x000d9113
   e7344:	000d92a5 	.word	0x000d92a5
   e7348:	000d92b1 	.word	0x000d92b1
   e734c:	000d92e5 	.word	0x000d92e5
   e7350:	000d9a4d 	.word	0x000d9a4d
   e7354:	000d9b41 	.word	0x000d9b41
   e7358:	000d9f11 	.word	0x000d9f11
   e735c:	000da2a9 	.word	0x000da2a9
   e7360:	000da565 	.word	0x000da565
   e7364:	000da615 	.word	0x000da615
   e7368:	000db1cd 	.word	0x000db1cd
   e736c:	000db55d 	.word	0x000db55d
   e7370:	000dbc71 	.word	0x000dbc71
   e7374:	000dbdc1 	.word	0x000dbdc1
   e7378:	000dbe99 	.word	0x000dbe99
   e737c:	000dbf1d 	.word	0x000dbf1d
   e7380:	000dbfe1 	.word	0x000dbfe1
   e7384:	000dc0a5 	.word	0x000dc0a5

000e7388 <link_constructors_end>:
	...
