
c:/Users/rober/Dropbox/ParticleWorkbench/ZeptoSensorBlynk/target/1.1.0/boron/ZeptoSensorBlynk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000109f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00024b74  2**0
                  CONTENTS
  4 .data         00000138  2003dad4  000e4a10  0001dad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000be4  2003dc0c  2003dc0c  0002dc0c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e4b48  000e4b48  00024b48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e4b70  000e4b70  00024b70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e9a3f  00000000  00000000  00024b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016739  00000000  00000000  0010e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c825  00000000  00000000  00124cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c00  00000000  00000000  00141511  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004478  00000000  00000000  00144111  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040d88  00000000  00000000  00148589  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003bc42  00000000  00000000  00189311  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e1635  00000000  00000000  001c4f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000efa8  00000000  00000000  002a6588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00c fa3b 	bl	e04ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00c fa40 	bl	e04c2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dad4 	.word	0x2003dad4
   d404c:	000e4a10 	.word	0x000e4a10
   d4050:	2003dc0c 	.word	0x2003dc0c
   d4054:	2003dc0c 	.word	0x2003dc0c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 ffcf 	bl	d9000 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e4a04 	.word	0x000e4a04
   d4084:	000e49ac 	.word	0x000e49ac

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f002 bd48 	b.w	d6b1c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f002 fec5 	bl	d6e1c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bf81 	b.w	d8f9c <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b929 	b.w	d82f0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b92f 	b.w	d8300 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b92d 	b.w	d8300 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00b fb97 	bl	df814 <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00b fb8b 	bl	df810 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00b fd35 	bl	dfb78 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00b fe55 	bl	dfdcc <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00b ffa1 	bl	e0098 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00b ff7f 	bl	e0084 <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00b ff53 	bl	e005c <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00b ff45 	bl	e0070 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00b ff19 	bl	e0048 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00b ff01 	bl	e0048 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00b fee7 	bl	e0048 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00b fede 	bl	e0048 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00b fc09 	bl	dfaac <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00b fec9 	bl	e0048 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00b fec0 	bl	e0048 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00b fbeb 	bl	dfaac <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00b fead 	bl	e0048 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00b fe95 	bl	e0048 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00b fe7d 	bl	e0048 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00b fba9 	bl	dfaac <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00b fe6d 	bl	e0048 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00b fb99 	bl	dfaac <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f003 ffa2 	bl	d82f0 <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00c f886 	bl	e04c2 <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00c f871 	bl	e04ac <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00b fe38 	bl	e005c <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00b fe4e 	bl	e0098 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00b fe91 	bl	e0128 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00b fb33 	bl	dfa8c <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00b fdfe 	bl	e005c <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00b fdf6 	bl	e005c <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00b fdef 	bl	e005c <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00b fe05 	bl	e0098 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00b fdfd 	bl	e0098 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00b fe40 	bl	e0128 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00b fe3b 	bl	e0128 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00b fad5 	bl	dfa8c <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00b fb1e 	bl	dfb78 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f003 bed1 	b.w	d8300 <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f00d fb11 	bl	e1c08 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f00c fcaa 	bl	e0f80 <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f00c fc90 	bl	e0f80 <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000dae59 	.word	0x000dae59
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000db159 	.word	0x000db159
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e3300 	.word	0x000e3300

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000db159 	.word	0x000db159

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000dae59 	.word	0x000dae59
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}
	...

000d52f4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d52f4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52f6:	f002 fdbf 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52fa:	4b03      	ldr	r3, [pc, #12]	; (d5308 <_ZN10CloudClass7processEv+0x14>)
   d52fc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d52fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5302:	f002 bfcd 	b.w	d82a0 <spark_process>
   d5306:	bf00      	nop
   d5308:	2003e5f4 	.word	0x2003e5f4

000d530c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d530c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d530e:	6984      	ldr	r4, [r0, #24]
   d5310:	4b0a      	ldr	r3, [pc, #40]	; (d533c <_ZN9TCPClientD1Ev+0x30>)
   d5312:	6003      	str	r3, [r0, #0]
   d5314:	4605      	mov	r5, r0
   d5316:	b17c      	cbz	r4, d5338 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5318:	6863      	ldr	r3, [r4, #4]
   d531a:	3b01      	subs	r3, #1
   d531c:	6063      	str	r3, [r4, #4]
   d531e:	b95b      	cbnz	r3, d5338 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5320:	6823      	ldr	r3, [r4, #0]
   d5322:	4620      	mov	r0, r4
   d5324:	689b      	ldr	r3, [r3, #8]
   d5326:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5328:	68a3      	ldr	r3, [r4, #8]
   d532a:	3b01      	subs	r3, #1
   d532c:	60a3      	str	r3, [r4, #8]
   d532e:	b91b      	cbnz	r3, d5338 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5330:	6823      	ldr	r3, [r4, #0]
   d5332:	4620      	mov	r0, r4
   d5334:	68db      	ldr	r3, [r3, #12]
   d5336:	4798      	blx	r3
   d5338:	4628      	mov	r0, r5
   d533a:	bd38      	pop	{r3, r4, r5, pc}
   d533c:	000e4030 	.word	0x000e4030

000d5340 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d5340:	b510      	push	{r4, lr}
   d5342:	4604      	mov	r4, r0
   d5344:	f7ff ffe2 	bl	d530c <_ZN9TCPClientD1Ev>
   d5348:	4620      	mov	r0, r4
   d534a:	bd10      	pop	{r4, pc}

000d534c <_ZN9TCPClientD0Ev>:
   d534c:	b510      	push	{r4, lr}
   d534e:	4604      	mov	r4, r0
   d5350:	f7ff ffdc 	bl	d530c <_ZN9TCPClientD1Ev>
   d5354:	4620      	mov	r0, r4
   d5356:	f7fe fea2 	bl	d409e <_ZdlPv>
   d535a:	4620      	mov	r0, r4
   d535c:	bd10      	pop	{r4, pc}

000d535e <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d535e:	6803      	ldr	r3, [r0, #0]
   d5360:	b12b      	cbz	r3, d536e <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d5362:	6842      	ldr	r2, [r0, #4]
   d5364:	4293      	cmp	r3, r2
   d5366:	d202      	bcs.n	d536e <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d5368:	4618      	mov	r0, r3
   d536a:	f00a bf8c 	b.w	e0286 <atoi>
   d536e:	2000      	movs	r0, #0
   d5370:	4770      	bx	lr

000d5372 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d5372:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5374:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d5376:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5378:	b145      	cbz	r5, d538c <_ZN10BlynkParam8iteratorppEv+0x1a>
   d537a:	6843      	ldr	r3, [r0, #4]
   d537c:	429d      	cmp	r5, r3
   d537e:	d205      	bcs.n	d538c <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d5380:	4628      	mov	r0, r5
   d5382:	f00b fdf5 	bl	e0f70 <strlen>
   d5386:	3001      	adds	r0, #1
   d5388:	4405      	add	r5, r0
   d538a:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d538c:	4620      	mov	r0, r4
   d538e:	bd38      	pop	{r3, r4, r5, pc}

000d5390 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d5390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5392:	4604      	mov	r4, r0
    if (str == NULL) {
   d5394:	460f      	mov	r7, r1
   d5396:	6846      	ldr	r6, [r0, #4]
   d5398:	b921      	cbnz	r1, d53a4 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d539a:	6803      	ldr	r3, [r0, #0]
   d539c:	1c72      	adds	r2, r6, #1
   d539e:	6042      	str	r2, [r0, #4]
   d53a0:	5599      	strb	r1, [r3, r6]
        return;
   d53a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d53a4:	4608      	mov	r0, r1
   d53a6:	f00b fde3 	bl	e0f70 <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d53aa:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d53ac:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d53ae:	19aa      	adds	r2, r5, r6
   d53b0:	429a      	cmp	r2, r3
   d53b2:	d808      	bhi.n	d53c6 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d53b4:	6820      	ldr	r0, [r4, #0]
   d53b6:	462a      	mov	r2, r5
   d53b8:	4639      	mov	r1, r7
   d53ba:	4430      	add	r0, r6
   d53bc:	f00b f876 	bl	e04ac <memcpy>
    len += l;
   d53c0:	6863      	ldr	r3, [r4, #4]
   d53c2:	441d      	add	r5, r3
   d53c4:	6065      	str	r5, [r4, #4]
   d53c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c8 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d53c8:	b570      	push	{r4, r5, r6, lr}
   d53ca:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	68a6      	ldr	r6, [r4, #8]
   d53d0:	6825      	ldr	r5, [r4, #0]
   d53d2:	4a05      	ldr	r2, [pc, #20]	; (d53e8 <_ZN10BlynkParam3addEi+0x20>)
   d53d4:	460b      	mov	r3, r1
   d53d6:	1a31      	subs	r1, r6, r0
   d53d8:	4428      	add	r0, r5
   d53da:	f002 ffb1 	bl	d8340 <snprintf>
   d53de:	6863      	ldr	r3, [r4, #4]
   d53e0:	3001      	adds	r0, #1
   d53e2:	4418      	add	r0, r3
   d53e4:	6060      	str	r0, [r4, #4]
   d53e6:	bd70      	pop	{r4, r5, r6, pc}
   d53e8:	000e3555 	.word	0x000e3555

000d53ec <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d53ec:	b570      	push	{r4, r5, r6, lr}
   d53ee:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d53f0:	6840      	ldr	r0, [r0, #4]
   d53f2:	68a6      	ldr	r6, [r4, #8]
   d53f4:	6825      	ldr	r5, [r4, #0]
   d53f6:	4a05      	ldr	r2, [pc, #20]	; (d540c <_ZN10BlynkParam3addEl+0x20>)
   d53f8:	460b      	mov	r3, r1
   d53fa:	1a31      	subs	r1, r6, r0
   d53fc:	4428      	add	r0, r5
   d53fe:	f002 ff9f 	bl	d8340 <snprintf>
   d5402:	6863      	ldr	r3, [r4, #4]
   d5404:	3001      	adds	r0, #1
   d5406:	4418      	add	r0, r3
   d5408:	6060      	str	r0, [r4, #4]
   d540a:	bd70      	pop	{r4, r5, r6, pc}
   d540c:	000e3558 	.word	0x000e3558

000d5410 <_Z9saveStatev>:
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5410:	f44f 7346 	mov.w	r3, #792	; 0x318
   d5414:	4a02      	ldr	r2, [pc, #8]	; (d5420 <_Z9saveStatev+0x10>)
   d5416:	4803      	ldr	r0, [pc, #12]	; (d5424 <_Z9saveStatev+0x14>)
   d5418:	2100      	movs	r1, #0
   d541a:	f002 bc66 	b.w	d7cea <_ZN10MB85RC256V9writeDataEjPKhj>
   d541e:	bf00      	nop
   d5420:	2003deb4 	.word	0x2003deb4
   d5424:	2003dc10 	.word	0x2003dc10

000d5428 <_Z9loadStatev>:
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5428:	f44f 7346 	mov.w	r3, #792	; 0x318
   d542c:	4a02      	ldr	r2, [pc, #8]	; (d5438 <_Z9loadStatev+0x10>)
   d542e:	4803      	ldr	r0, [pc, #12]	; (d543c <_Z9loadStatev+0x14>)
   d5430:	2100      	movs	r1, #0
   d5432:	f002 bc0e 	b.w	d7c52 <_ZN10MB85RC256V8readDataEjPhj>
   d5436:	bf00      	nop
   d5438:	2003deb4 	.word	0x2003deb4
   d543c:	2003dc10 	.word	0x2003dc10

000d5440 <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d5440:	b513      	push	{r0, r1, r4, lr}
  power.setPowerON(EXT3V3,false);
   d5442:	4c12      	ldr	r4, [pc, #72]	; (d548c <_Z9deepSleepv+0x4c>)
   d5444:	2200      	movs	r2, #0
   d5446:	4620      	mov	r0, r4
   d5448:	2102      	movs	r1, #2
   d544a:	f002 f84b 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d544e:	2200      	movs	r2, #0
   d5450:	2103      	movs	r1, #3
   d5452:	4620      	mov	r0, r4
   d5454:	f002 f846 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  Serial.println("Going to deep sleep");
   d5458:	f003 febe 	bl	d91d8 <_Z16_fetch_usbserialv>
   d545c:	490c      	ldr	r1, [pc, #48]	; (d5490 <_Z9deepSleepv+0x50>)
   d545e:	f003 f9e2 	bl	d8826 <_ZN5Print7printlnEPKc>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5462:	480c      	ldr	r0, [pc, #48]	; (d5494 <_Z9deepSleepv+0x54>)
   d5464:	2300      	movs	r3, #0
   d5466:	461a      	mov	r2, r3
   d5468:	4619      	mov	r1, r3
   d546a:	6840      	ldr	r0, [r0, #4]
   d546c:	f002 fef0 	bl	d8250 <network_off>
  Cellular.off();
  delay(5000);
   d5470:	f241 3088 	movw	r0, #5000	; 0x1388
   d5474:	f003 fc52 	bl	d8d1c <delay>
  System.sleep(SLEEP_MODE_DEEP);
   d5478:	4b07      	ldr	r3, [pc, #28]	; (d5498 <_Z9deepSleepv+0x58>)
   d547a:	2200      	movs	r2, #0
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	2101      	movs	r1, #1
   d5480:	4668      	mov	r0, sp
   d5482:	f002 ffeb 	bl	d845c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d5486:	b002      	add	sp, #8
   d5488:	bd10      	pop	{r4, pc}
   d548a:	bf00      	nop
   d548c:	2003e1cc 	.word	0x2003e1cc
   d5490:	000e355c 	.word	0x000e355c
   d5494:	2003e380 	.word	0x2003e380
   d5498:	2003e324 	.word	0x2003e324

000d549c <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  Serial.println("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d549c:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d549e:	4b05      	ldr	r3, [pc, #20]	; (d54b4 <BlynkWidgetWriteInternalPinADIS+0x18>)
   d54a0:	2200      	movs	r2, #0
   d54a2:	701a      	strb	r2, [r3, #0]
 Serial.println("Disconnected");
   d54a4:	f003 fe98 	bl	d91d8 <_Z16_fetch_usbserialv>
   d54a8:	4903      	ldr	r1, [pc, #12]	; (d54b8 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d54aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 Serial.println("Disconnected");
   d54ae:	f003 b9ba 	b.w	d8826 <_ZN5Print7printlnEPKc>
   d54b2:	bf00      	nop
   d54b4:	2003deb1 	.word	0x2003deb1
   d54b8:	000e3570 	.word	0x000e3570

000d54bc <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d54bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d54be:	6809      	ldr	r1, [r1, #0]
   d54c0:	4668      	mov	r0, sp
   d54c2:	f003 f885 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d54c6:	4668      	mov	r0, sp
   d54c8:	f003 f93f 	bl	d874a <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d54cc:	9900      	ldr	r1, [sp, #0]
   d54ce:	4805      	ldr	r0, [pc, #20]	; (d54e4 <BlynkWidgetWrite16+0x28>)
   d54d0:	f00b f832 	bl	e0538 <strcpy>
    saveState();
   d54d4:	f7ff ff9c 	bl	d5410 <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d54d8:	4668      	mov	r0, sp
   d54da:	f003 f832 	bl	d8542 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d54de:	b005      	add	sp, #20
   d54e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d54e4:	2003dfc4 	.word	0x2003dfc4

000d54e8 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d54e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d54ea:	6809      	ldr	r1, [r1, #0]
   d54ec:	4668      	mov	r0, sp
   d54ee:	f003 f86f 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d54f2:	4668      	mov	r0, sp
   d54f4:	f003 f929 	bl	d874a <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d54f8:	9900      	ldr	r1, [sp, #0]
   d54fa:	4805      	ldr	r0, [pc, #20]	; (d5510 <BlynkWidgetWrite18+0x28>)
   d54fc:	f00b f81c 	bl	e0538 <strcpy>
    saveState();
   d5500:	f7ff ff86 	bl	d5410 <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d5504:	4668      	mov	r0, sp
   d5506:	f003 f81c 	bl	d8542 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d550a:	b005      	add	sp, #20
   d550c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5510:	2003e0c4 	.word	0x2003e0c4

000d5514 <BlynkWidgetWrite25>:
  Blynk.virtualWrite(V14, 0);
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d5514:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d5516:	6808      	ldr	r0, [r1, #0]
   d5518:	f00a feb2 	bl	e0280 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d551c:	ec51 0b10 	vmov	r0, r1, d0
   d5520:	f00a fe22 	bl	e0168 <__aeabi_d2f>
   d5524:	4b03      	ldr	r3, [pc, #12]	; (d5534 <BlynkWidgetWrite25+0x20>)
   d5526:	f8c3 0310 	str.w	r0, [r3, #784]	; 0x310
  saveState();
}
   d552a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d552e:	f7ff bf6f 	b.w	d5410 <_Z9saveStatev>
   d5532:	bf00      	nop
   d5534:	2003deb4 	.word	0x2003deb4

000d5538 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d5538:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d553a:	6808      	ldr	r0, [r1, #0]
   d553c:	f00a fea3 	bl	e0286 <atoi>
   d5540:	4b03      	ldr	r3, [pc, #12]	; (d5550 <BlynkWidgetWrite17+0x18>)
  if (param.asInt()==1)
   d5542:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d5544:	bf0c      	ite	eq
   d5546:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d5548:	2201      	movne	r2, #1
   d554a:	701a      	strb	r2, [r3, #0]
   d554c:	bd08      	pop	{r3, pc}
   d554e:	bf00      	nop
   d5550:	2003deb2 	.word	0x2003deb2

000d5554 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5554:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5556:	4b07      	ldr	r3, [pc, #28]	; (d5574 <_Z12alertChangedv+0x20>)
   d5558:	781a      	ldrb	r2, [r3, #0]
   d555a:	4b07      	ldr	r3, [pc, #28]	; (d5578 <_Z12alertChangedv+0x24>)
   d555c:	f893 1314 	ldrb.w	r1, [r3, #788]	; 0x314
   d5560:	4291      	cmp	r1, r2
   d5562:	d005      	beq.n	d5570 <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5564:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
    saveState();
   d5568:	f7ff ff52 	bl	d5410 <_Z9saveStatev>
    return true;
   d556c:	2001      	movs	r0, #1
   d556e:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5570:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5572:	bd08      	pop	{r3, pc}
   d5574:	2003dc1c 	.word	0x2003dc1c
   d5578:	2003deb4 	.word	0x2003deb4

000d557c <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d557c:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d557e:	4b07      	ldr	r3, [pc, #28]	; (d559c <_Z15batAlertChangedv+0x20>)
   d5580:	781a      	ldrb	r2, [r3, #0]
   d5582:	4b07      	ldr	r3, [pc, #28]	; (d55a0 <_Z15batAlertChangedv+0x24>)
   d5584:	f893 1315 	ldrb.w	r1, [r3, #789]	; 0x315
   d5588:	4291      	cmp	r1, r2
   d558a:	d005      	beq.n	d5598 <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d558c:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
    saveState();
   d5590:	f7ff ff3e 	bl	d5410 <_Z9saveStatev>
    return true;
   d5594:	2001      	movs	r0, #1
   d5596:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5598:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d559a:	bd08      	pop	{r3, pc}
   d559c:	2003e1e8 	.word	0x2003e1e8
   d55a0:	2003deb4 	.word	0x2003deb4

000d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d55a4:	b508      	push	{r3, lr}
        state = CONNECTING;
   d55a6:	2300      	movs	r3, #0
   d55a8:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d55aa:	6800      	ldr	r0, [r0, #0]
   d55ac:	f004 fa6d 	bl	d9a8a <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d55b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d55b4:	f002 bb1e 	b.w	d7bf4 <BlynkNoOpCbk>

000d55b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d55b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d55bc:	188e      	adds	r6, r1, r2
   d55be:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d55c0:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d55c2:	4680      	mov	r8, r0
   d55c4:	460d      	mov	r5, r1
   d55c6:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d55c8:	9105      	str	r1, [sp, #20]
   d55ca:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d55cc:	f080 8119 	bcs.w	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d55d0:	880b      	ldrh	r3, [r1, #0]
   d55d2:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d55d6:	a805      	add	r0, sp, #20
   d55d8:	f7ff fecb 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d55dc:	6803      	ldr	r3, [r0, #0]
   d55de:	429e      	cmp	r6, r3
   d55e0:	f240 810f 	bls.w	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
   d55e4:	9805      	ldr	r0, [sp, #20]
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d55e6:	7803      	ldrb	r3, [r0, #0]
   d55e8:	2b41      	cmp	r3, #65	; 0x41
   d55ea:	d112      	bne.n	d5612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d55ec:	3001      	adds	r0, #1
   d55ee:	f00a fe4a 	bl	e0286 <atoi>
   d55f2:	2805      	cmp	r0, #5
   d55f4:	dd01      	ble.n	d55fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d55f6:	24ff      	movs	r4, #255	; 0xff
   d55f8:	e00f      	b.n	d561a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d55fa:	9805      	ldr	r0, [sp, #20]
   d55fc:	3001      	adds	r0, #1
   d55fe:	f00a fe42 	bl	e0286 <atoi>
   d5602:	2800      	cmp	r0, #0
   d5604:	dbf7      	blt.n	d55f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d5606:	9805      	ldr	r0, [sp, #20]
   d5608:	3001      	adds	r0, #1
   d560a:	f00a fe3c 	bl	e0286 <atoi>
   d560e:	300e      	adds	r0, #14
   d5610:	e002      	b.n	d5618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d5612:	a805      	add	r0, sp, #20
   d5614:	f7ff fea3 	bl	d535e <_ZNK10BlynkParam8iterator5asIntEv>
   d5618:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d561a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d561e:	f247 2276 	movw	r2, #29302	; 0x7276
   d5622:	4293      	cmp	r3, r2
   d5624:	f000 80b4 	beq.w	d5790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
   d5628:	d80d      	bhi.n	d5646 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d562a:	f247 2261 	movw	r2, #29281	; 0x7261
   d562e:	4293      	cmp	r3, r2
   d5630:	d07a      	beq.n	d5728 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x170>
   d5632:	f247 2264 	movw	r2, #29284	; 0x7264
   d5636:	4293      	cmp	r3, r2
   d5638:	d04f      	beq.n	d56da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x122>
   d563a:	f646 5270 	movw	r2, #28016	; 0x6d70
   d563e:	4293      	cmp	r3, r2
   d5640:	f040 80d1 	bne.w	d57e6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5644:	e034      	b.n	d56b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf8>
   d5646:	f247 7264 	movw	r2, #30564	; 0x7764
   d564a:	4293      	cmp	r3, r2
   d564c:	d057      	beq.n	d56fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x146>
   d564e:	f247 7276 	movw	r2, #30582	; 0x7776
   d5652:	4293      	cmp	r3, r2
   d5654:	f000 80ad 	beq.w	d57b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5658:	f247 7261 	movw	r2, #30561	; 0x7761
   d565c:	4293      	cmp	r3, r2
   d565e:	f040 80c2 	bne.w	d57e6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5662:	e082      	b.n	d576a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b2>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d5664:	7803      	ldrb	r3, [r0, #0]
   d5666:	2b41      	cmp	r3, #65	; 0x41
   d5668:	d132      	bne.n	d56d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
   d566a:	3001      	adds	r0, #1
   d566c:	f00a fe0b 	bl	e0286 <atoi>
   d5670:	2805      	cmp	r0, #5
   d5672:	dd21      	ble.n	d56b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x100>
   d5674:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d5676:	a805      	add	r0, sp, #20
   d5678:	f7ff fe7b 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d567c:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d567e:	4962      	ldr	r1, [pc, #392]	; (d5808 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d5680:	4628      	mov	r0, r5
   d5682:	f00a ff4f 	bl	e0524 <strcmp>
   d5686:	4601      	mov	r1, r0
   d5688:	2800      	cmp	r0, #0
   d568a:	f000 80b6 	beq.w	d57fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x242>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d568e:	495f      	ldr	r1, [pc, #380]	; (d580c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d5690:	4628      	mov	r0, r5
   d5692:	f00a ff47 	bl	e0524 <strcmp>
   d5696:	2800      	cmp	r0, #0
   d5698:	f000 80ae 	beq.w	d57f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x240>
   d569c:	495c      	ldr	r1, [pc, #368]	; (d5810 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d569e:	4628      	mov	r0, r5
   d56a0:	f00a ff40 	bl	e0524 <strcmp>
   d56a4:	2800      	cmp	r0, #0
   d56a6:	f000 80a7 	beq.w	d57f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x240>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d56aa:	a805      	add	r0, sp, #20
   d56ac:	f7ff fe61 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d56b0:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d56b2:	4286      	cmp	r6, r0
   d56b4:	d8d6      	bhi.n	d5664 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d56b6:	e0a4      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
            pin = BLYNK_DECODE_PIN(it);
   d56b8:	9805      	ldr	r0, [sp, #20]
   d56ba:	3001      	adds	r0, #1
   d56bc:	f00a fde3 	bl	e0286 <atoi>
   d56c0:	2800      	cmp	r0, #0
   d56c2:	dbd7      	blt.n	d5674 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d56c4:	9805      	ldr	r0, [sp, #20]
   d56c6:	3001      	adds	r0, #1
   d56c8:	f00a fddd 	bl	e0286 <atoi>
   d56cc:	300e      	adds	r0, #14
   d56ce:	e002      	b.n	d56d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x11e>
   d56d0:	a805      	add	r0, sp, #20
   d56d2:	f7ff fe44 	bl	d535e <_ZNK10BlynkParam8iterator5asIntEv>
   d56d6:	b2c4      	uxtb	r4, r0
   d56d8:	e7cd      	b.n	d5676 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d56da:	ab0a      	add	r3, sp, #40	; 0x28
   d56dc:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d56de:	a807      	add	r0, sp, #28
   d56e0:	2310      	movs	r3, #16
   d56e2:	2500      	movs	r5, #0
   d56e4:	494b      	ldr	r1, [pc, #300]	; (d5814 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>)
   d56e6:	9309      	str	r3, [sp, #36]	; 0x24
   d56e8:	9508      	str	r5, [sp, #32]
   d56ea:	f7ff fe51 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d56ee:	a807      	add	r0, sp, #28
   d56f0:	4621      	mov	r1, r4
   d56f2:	f7ff fe69 	bl	d53c8 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d56f6:	4620      	mov	r0, r4
   d56f8:	f004 fb8a 	bl	d9e10 <digitalRead>
   d56fc:	e025      	b.n	d574a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x192>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d56fe:	a805      	add	r0, sp, #20
   d5700:	f7ff fe37 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d5704:	6803      	ldr	r3, [r0, #0]
   d5706:	429e      	cmp	r6, r3
   d5708:	d97b      	bls.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d570a:	b2a4      	uxth	r4, r4
   d570c:	2101      	movs	r1, #1
   d570e:	4620      	mov	r0, r4
   d5710:	f004 fb54 	bl	d9dbc <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d5714:	a805      	add	r0, sp, #20
   d5716:	f7ff fe22 	bl	d535e <_ZNK10BlynkParam8iterator5asIntEv>
   d571a:	1c01      	adds	r1, r0, #0
   d571c:	bf18      	it	ne
   d571e:	2101      	movne	r1, #1
   d5720:	4620      	mov	r0, r4
   d5722:	f004 fb5c 	bl	d9dde <digitalWrite>
    } break;
   d5726:	e06c      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
   d5728:	ab0a      	add	r3, sp, #40	; 0x28
   d572a:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d572c:	493a      	ldr	r1, [pc, #232]	; (d5818 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x260>)
   d572e:	2310      	movs	r3, #16
   d5730:	a807      	add	r0, sp, #28
   d5732:	2500      	movs	r5, #0
   d5734:	9309      	str	r3, [sp, #36]	; 0x24
   d5736:	9508      	str	r5, [sp, #32]
   d5738:	f7ff fe2a 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d573c:	a807      	add	r0, sp, #28
   d573e:	4621      	mov	r1, r4
   d5740:	f7ff fe42 	bl	d53c8 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d5744:	4620      	mov	r0, r4
   d5746:	f004 fb76 	bl	d9e36 <analogRead>
   d574a:	4601      	mov	r1, r0
   d574c:	a807      	add	r0, sp, #28
   d574e:	f7ff fe4d 	bl	d53ec <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d5752:	9b08      	ldr	r3, [sp, #32]
   d5754:	9502      	str	r5, [sp, #8]
   d5756:	3b01      	subs	r3, #1
   d5758:	9300      	str	r3, [sp, #0]
   d575a:	9b07      	ldr	r3, [sp, #28]
   d575c:	9501      	str	r5, [sp, #4]
   d575e:	462a      	mov	r2, r5
   d5760:	2114      	movs	r1, #20
   d5762:	4640      	mov	r0, r8
   d5764:	f000 fa50 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d5768:	e04b      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d576a:	a805      	add	r0, sp, #20
   d576c:	f7ff fe01 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d5770:	6803      	ldr	r3, [r0, #0]
   d5772:	429e      	cmp	r6, r3
   d5774:	d945      	bls.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5776:	b2a4      	uxth	r4, r4
   d5778:	2101      	movs	r1, #1
   d577a:	4620      	mov	r0, r4
   d577c:	f004 fb1e 	bl	d9dbc <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d5780:	a805      	add	r0, sp, #20
   d5782:	f7ff fdec 	bl	d535e <_ZNK10BlynkParam8iterator5asIntEv>
   d5786:	4601      	mov	r1, r0
   d5788:	4620      	mov	r0, r4
   d578a:	f004 fb6b 	bl	d9e64 <_Z11analogWritetm>
    } break;
   d578e:	e038      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5790:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d5792:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5794:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d5798:	f002 fa2e 	bl	d7bf8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d579c:	4603      	mov	r3, r0
            handler(req);
   d579e:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d57a0:	b123      	cbz	r3, d57ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
   d57a2:	4a1e      	ldr	r2, [pc, #120]	; (d581c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x264>)
   d57a4:	4293      	cmp	r3, r2
   d57a6:	d001      	beq.n	d57ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
            handler(req);
   d57a8:	4798      	blx	r3
   d57aa:	e02a      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        } else {
            BlynkWidgetReadDefault(req);
   d57ac:	f002 fa20 	bl	d7bf0 <BlynkWidgetRead>
        }
    } break;
   d57b0:	e027      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    case BLYNK_HW_VW: {
        ++it;
   d57b2:	a805      	add	r0, sp, #20
   d57b4:	f7ff fddd 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d57b8:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d57ba:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d57bc:	1b5d      	subs	r5, r3, r5
   d57be:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d57c0:	4620      	mov	r0, r4
   d57c2:	950b      	str	r5, [sp, #44]	; 0x2c
   d57c4:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d57c6:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d57ca:	f002 fa1f 	bl	d7c0c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d57ce:	4603      	mov	r3, r0
            handler(req, param2);
   d57d0:	a90a      	add	r1, sp, #40	; 0x28
   d57d2:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d57d4:	b123      	cbz	r3, d57e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>
   d57d6:	4a12      	ldr	r2, [pc, #72]	; (d5820 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x268>)
   d57d8:	4293      	cmp	r3, r2
   d57da:	d001      	beq.n	d57e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x228>
            handler(req, param2);
   d57dc:	4798      	blx	r3
   d57de:	e010      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d57e0:	f002 fa07 	bl	d7bf2 <BlynkWidgetWrite>
        }
    } break;
   d57e4:	e00d      	b.n	d5802 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d57e6:	2300      	movs	r3, #0
   d57e8:	2102      	movs	r1, #2
   d57ea:	9100      	str	r1, [sp, #0]
   d57ec:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d57f0:	9302      	str	r3, [sp, #8]
   d57f2:	9301      	str	r3, [sp, #4]
   d57f4:	4619      	mov	r1, r3
   d57f6:	e7b4      	b.n	d5762 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1aa>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d57f8:	2101      	movs	r1, #1
   d57fa:	4620      	mov	r0, r4
   d57fc:	f004 fade 	bl	d9dbc <pinMode>
   d5800:	e753      	b.n	d56aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf2>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d5802:	b00e      	add	sp, #56	; 0x38
   d5804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5808:	000e34b1 	.word	0x000e34b1
   d580c:	000e357d 	.word	0x000e357d
   d5810:	000e3581 	.word	0x000e3581
   d5814:	000e3585 	.word	0x000e3585
   d5818:	000e3588 	.word	0x000e3588
   d581c:	000d7bf1 	.word	0x000d7bf1
   d5820:	000d7bf3 	.word	0x000d7bf3

000d5824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d5824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5828:	b08e      	sub	sp, #56	; 0x38
   d582a:	af04      	add	r7, sp, #16
   d582c:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d582e:	2205      	movs	r2, #5
   d5830:	f107 010c 	add.w	r1, r7, #12
   d5834:	6800      	ldr	r0, [r0, #0]
   d5836:	f003 f962 	bl	d8afe <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d583a:	2800      	cmp	r0, #0
   d583c:	f000 8119 	beq.w	d5a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d5840:	2805      	cmp	r0, #5
   d5842:	d001      	beq.n	d5848 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d5844:	2000      	movs	r0, #0
   d5846:	e119      	b.n	d5a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5848:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d584c:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5850:	0a13      	lsrs	r3, r2, #8
   d5852:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d5856:	0a23      	lsrs	r3, r4, #8
   d5858:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d585c:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d585e:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5860:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5864:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d5868:	2a00      	cmp	r2, #0
   d586a:	d0eb      	beq.n	d5844 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d586c:	7b3b      	ldrb	r3, [r7, #12]
   d586e:	b9f3      	cbnz	r3, d58ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d5870:	f002 f9ba 	bl	d7be8 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5874:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d5876:	60e8      	str	r0, [r5, #12]
   d5878:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d587c:	b99b      	cbnz	r3, d58a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d587e:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d5882:	2901      	cmp	r1, #1
   d5884:	d10f      	bne.n	d58a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d5886:	2a04      	cmp	r2, #4
   d5888:	d001      	beq.n	d588e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d588a:	2ac8      	cmp	r2, #200	; 0xc8
   d588c:	d1da      	bne.n	d5844 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d588e:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d5890:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d5892:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d5894:	4628      	mov	r0, r5
   d5896:	f000 fa99 	bl	d5dcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d589a:	f7ff fd2b 	bl	d52f4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d589e:	f000 fcbd 	bl	d621c <BlynkOnConnected>
                return true;
   d58a2:	4620      	mov	r0, r4
   d58a4:	e0ea      	b.n	d5a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d58a6:	1f50      	subs	r0, r2, #5
   d58a8:	bf18      	it	ne
   d58aa:	2001      	movne	r0, #1
   d58ac:	e0e6      	b.n	d5a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d58ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d58b2:	d903      	bls.n	d58bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d58b4:	4628      	mov	r0, r5
   d58b6:	f7ff fe75 	bl	d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d58ba:	e0da      	b.n	d5a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d58bc:	f104 0308 	add.w	r3, r4, #8
   d58c0:	f023 0307 	bic.w	r3, r3, #7
   d58c4:	46e8      	mov	r8, sp
   d58c6:	ebad 0d03 	sub.w	sp, sp, r3
   d58ca:	ae04      	add	r6, sp, #16
   d58cc:	4622      	mov	r2, r4
   d58ce:	4631      	mov	r1, r6
   d58d0:	6828      	ldr	r0, [r5, #0]
   d58d2:	f003 f914 	bl	d8afe <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d58d6:	4284      	cmp	r4, r0
   d58d8:	f04f 0400 	mov.w	r4, #0
   d58dc:	f040 80c4 	bne.w	d5a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d58e0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d58e4:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d58e6:	f002 f97f 	bl	d7be8 <_Z11BlynkMillisv>

    switch (hdr.type)
   d58ea:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d58ec:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d58ee:	2b11      	cmp	r3, #17
   d58f0:	d072      	beq.n	d59d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d58f2:	d806      	bhi.n	d5902 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d58f4:	2b06      	cmp	r3, #6
   d58f6:	d020      	beq.n	d593a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d58f8:	2b0f      	cmp	r3, #15
   d58fa:	d060      	beq.n	d59be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d58fc:	2b02      	cmp	r3, #2
   d58fe:	d009      	beq.n	d5914 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d5900:	e0ae      	b.n	d5a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d5902:	2b29      	cmp	r3, #41	; 0x29
   d5904:	d025      	beq.n	d5952 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d5906:	2b37      	cmp	r3, #55	; 0x37
   d5908:	f000 80b0 	beq.w	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d590c:	2b14      	cmp	r3, #20
   d590e:	f040 80a7 	bne.w	d5a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d5912:	e054      	b.n	d59be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d5914:	7f6b      	ldrb	r3, [r5, #29]
   d5916:	b943      	cbnz	r3, d592a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d5918:	2301      	movs	r3, #1
   d591a:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d591c:	4628      	mov	r0, r5
   d591e:	f000 fa55 	bl	d5dcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d5922:	f7ff fce7 	bl	d52f4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d5926:	f000 fc79 	bl	d621c <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d592a:	2300      	movs	r3, #0
   d592c:	21c8      	movs	r1, #200	; 0xc8
   d592e:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d5932:	9302      	str	r3, [sp, #8]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	9100      	str	r1, [sp, #0]
   d5938:	e006      	b.n	d5948 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d593a:	23c8      	movs	r3, #200	; 0xc8
   d593c:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d5940:	9300      	str	r3, [sp, #0]
   d5942:	9402      	str	r4, [sp, #8]
   d5944:	9401      	str	r4, [sp, #4]
   d5946:	4623      	mov	r3, r4
   d5948:	4619      	mov	r1, r3
   d594a:	4628      	mov	r0, r5
   d594c:	f000 f95c 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d5950:	e08c      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d5952:	68ab      	ldr	r3, [r5, #8]
   d5954:	b91b      	cbnz	r3, d595e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d5956:	2020      	movs	r0, #32
   d5958:	f002 fcca 	bl	d82f0 <malloc>
   d595c:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d595e:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5962:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5964:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d5966:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5968:	623c      	str	r4, [r7, #32]
   d596a:	d301      	bcc.n	d5970 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d596c:	2000      	movs	r0, #0
   d596e:	e07e      	b.n	d5a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d5970:	2220      	movs	r2, #32
   d5972:	4631      	mov	r1, r6
   d5974:	68a8      	ldr	r0, [r5, #8]
   d5976:	f00b fb18 	bl	e0faa <strncpy>
        if (++it < param.end())
   d597a:	f107 001c 	add.w	r0, r7, #28
   d597e:	f7ff fcf8 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d5982:	6803      	ldr	r3, [r0, #0]
   d5984:	42a3      	cmp	r3, r4
   d5986:	d207      	bcs.n	d5998 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5988:	69f8      	ldr	r0, [r7, #28]
   d598a:	b118      	cbz	r0, d5994 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d598c:	6a3b      	ldr	r3, [r7, #32]
   d598e:	4298      	cmp	r0, r3
   d5990:	d371      	bcc.n	d5a76 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5992:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d5994:	b284      	uxth	r4, r0
   d5996:	e000      	b.n	d599a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d5998:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d599a:	6828      	ldr	r0, [r5, #0]
   d599c:	f004 f875 	bl	d9a8a <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d59a0:	682b      	ldr	r3, [r5, #0]
   d59a2:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d59a4:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d59a6:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d59a8:	2300      	movs	r3, #0
   d59aa:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d59ac:	f002 f91c 	bl	d7be8 <_Z11BlynkMillisv>
   d59b0:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d59b4:	3808      	subs	r0, #8
   d59b6:	6128      	str	r0, [r5, #16]
   d59b8:	60e8      	str	r0, [r5, #12]
   d59ba:	6168      	str	r0, [r5, #20]
   d59bc:	e056      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d59be:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d59c0:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d59c4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d59c8:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d59ca:	4631      	mov	r1, r6
   d59cc:	4628      	mov	r0, r5
   d59ce:	f7ff fdf3 	bl	d55b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d59d2:	2300      	movs	r3, #0
   d59d4:	836b      	strh	r3, [r5, #26]
   d59d6:	e049      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d59d8:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d59dc:	713c      	strb	r4, [r7, #4]
   d59de:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d59e0:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d59e2:	617e      	str	r6, [r7, #20]
   d59e4:	61bb      	str	r3, [r7, #24]
   d59e6:	d241      	bcs.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d59e8:	6830      	ldr	r0, [r6, #0]
   d59ea:	60b8      	str	r0, [r7, #8]

        ++it;
   d59ec:	f107 0014 	add.w	r0, r7, #20
   d59f0:	f7ff fcbf 	bl	d5372 <_ZN10BlynkParam8iteratorppEv>
   d59f4:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d59f6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d59fa:	61fa      	str	r2, [r7, #28]
   d59fc:	1b96      	subs	r6, r2, r6
   d59fe:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d5a00:	4a20      	ldr	r2, [pc, #128]	; (d5a84 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d5a02:	68bb      	ldr	r3, [r7, #8]
   d5a04:	623e      	str	r6, [r7, #32]
   d5a06:	4293      	cmp	r3, r2
   d5a08:	627e      	str	r6, [r7, #36]	; 0x24
   d5a0a:	d01d      	beq.n	d5a48 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d5a0c:	d80b      	bhi.n	d5a26 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d5a0e:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d5a12:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d5a16:	4293      	cmp	r3, r2
   d5a18:	d128      	bne.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d5a1a:	f107 011c 	add.w	r1, r7, #28
   d5a1e:	1d38      	adds	r0, r7, #4
   d5a20:	f002 f8e7 	bl	d7bf2 <BlynkWidgetWrite>
   d5a24:	e022      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d5a26:	4a18      	ldr	r2, [pc, #96]	; (d5a88 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d5a28:	4293      	cmp	r3, r2
   d5a2a:	d013      	beq.n	d5a54 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d5a2c:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d5a30:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d5a34:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d5a38:	4293      	cmp	r3, r2
   d5a3a:	d117      	bne.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d5a3c:	f107 011c 	add.w	r1, r7, #28
   d5a40:	1d38      	adds	r0, r7, #4
   d5a42:	f7ff fd2b 	bl	d549c <BlynkWidgetWriteInternalPinADIS>
   d5a46:	e011      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d5a48:	f107 011c 	add.w	r1, r7, #28
   d5a4c:	1d38      	adds	r0, r7, #4
   d5a4e:	f002 f8d0 	bl	d7bf2 <BlynkWidgetWrite>
   d5a52:	e00b      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d5a54:	f107 011c 	add.w	r1, r7, #28
   d5a58:	1d38      	adds	r0, r7, #4
   d5a5a:	f000 fab5 	bl	d5fc8 <BlynkWidgetWriteInternalPinACON>
   d5a5e:	e005      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7ff fd9f 	bl	d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d5a66:	e001      	b.n	d5a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d5a68:	4620      	mov	r0, r4
   d5a6a:	e000      	b.n	d5a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d5a6c:	2001      	movs	r0, #1
   d5a6e:	46c5      	mov	sp, r8
   d5a70:	e004      	b.n	d5a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d5a72:	2001      	movs	r0, #1
   d5a74:	e002      	b.n	d5a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5a76:	f00a fc0a 	bl	e028e <atol>
   d5a7a:	e78b      	b.n	d5994 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d5a7c:	3728      	adds	r7, #40	; 0x28
   d5a7e:	46bd      	mov	sp, r7
   d5a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a84:	00637472 	.word	0x00637472
   d5a88:	6e6f6361 	.word	0x6e6f6361

000d5a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d5a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a90:	4604      	mov	r4, r0
   d5a92:	b08a      	sub	sp, #40	; 0x28
   d5a94:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d5a96:	f7ff fc2d 	bl	d52f4 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d5a9a:	7f63      	ldrb	r3, [r4, #29]
   d5a9c:	2b02      	cmp	r3, #2
   d5a9e:	f000 809d 	beq.w	d5bdc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d5aa2:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d5aa4:	8b62      	ldrh	r2, [r4, #26]
   d5aa6:	3301      	adds	r3, #1
   d5aa8:	b2db      	uxtb	r3, r3
   d5aaa:	7723      	strb	r3, [r4, #28]
   d5aac:	2a00      	cmp	r2, #0
   d5aae:	d141      	bne.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5ab0:	2b02      	cmp	r3, #2
   d5ab2:	d83f      	bhi.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5ab4:	6820      	ldr	r0, [r4, #0]
   d5ab6:	f003 fe14 	bl	d96e2 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d5aba:	b140      	cbz	r0, d5ace <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d5abc:	2d00      	cmp	r5, #0
   d5abe:	f040 808f 	bne.w	d5be0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d5ac2:	6820      	ldr	r0, [r4, #0]
   d5ac4:	f003 fff8 	bl	d9ab8 <_ZN9TCPClient9availableEv>
   d5ac8:	2800      	cmp	r0, #0
   d5aca:	f300 8089 	bgt.w	d5be0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d5ace:	f002 f88b 	bl	d7be8 <_Z11BlynkMillisv>
   d5ad2:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5ad4:	6820      	ldr	r0, [r4, #0]
   d5ad6:	f003 fe04 	bl	d96e2 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d5ada:	7f67      	ldrb	r7, [r4, #29]
   d5adc:	2f01      	cmp	r7, #1
   d5ade:	4605      	mov	r5, r0
   d5ae0:	d12a      	bne.n	d5b38 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d5ae2:	b920      	cbnz	r0, d5aee <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d5ae4:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	f7ff fd5c 	bl	d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d5aec:	e072      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d5aee:	68e3      	ldr	r3, [r4, #12]
   d5af0:	f644 2238 	movw	r2, #19000	; 0x4a38
   d5af4:	1af3      	subs	r3, r6, r3
   d5af6:	4293      	cmp	r3, r2
   d5af8:	d904      	bls.n	d5b04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d5afa:	4620      	mov	r0, r4
   d5afc:	f7ff fd52 	bl	d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d5b00:	2500      	movs	r5, #0
   d5b02:	e067      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d5b04:	f242 7210 	movw	r2, #10000	; 0x2710
   d5b08:	4293      	cmp	r3, r2
   d5b0a:	d803      	bhi.n	d5b14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d5b0c:	6923      	ldr	r3, [r4, #16]
   d5b0e:	1af3      	subs	r3, r6, r3
   d5b10:	4293      	cmp	r3, r2
   d5b12:	d90f      	bls.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5b14:	6963      	ldr	r3, [r4, #20]
   d5b16:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d5b1a:	1af3      	subs	r3, r6, r3
   d5b1c:	4293      	cmp	r3, r2
   d5b1e:	d909      	bls.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d5b20:	2300      	movs	r3, #0
   d5b22:	9302      	str	r3, [sp, #8]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	9300      	str	r3, [sp, #0]
   d5b28:	461a      	mov	r2, r3
   d5b2a:	2106      	movs	r1, #6
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	f000 f86b 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d5b32:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d5b34:	2501      	movs	r5, #1
   d5b36:	e04d      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d5b38:	2f00      	cmp	r7, #0
   d5b3a:	d1fb      	bne.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5b3c:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d5b3e:	b150      	cbz	r0, d5b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d5b40:	1ab6      	subs	r6, r6, r2
   d5b42:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d5b46:	429e      	cmp	r6, r3
   d5b48:	d9f4      	bls.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5b4a:	6820      	ldr	r0, [r4, #0]
   d5b4c:	f003 ff9d 	bl	d9a8a <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d5b50:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d5b52:	7767      	strb	r7, [r4, #29]
            return false;
   d5b54:	e03e      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d5b56:	1ab2      	subs	r2, r6, r2
   d5b58:	f241 3388 	movw	r3, #5000	; 0x1388
   d5b5c:	429a      	cmp	r2, r3
   d5b5e:	d9e9      	bls.n	d5b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d5b60:	6820      	ldr	r0, [r4, #0]
   d5b62:	f003 ff92 	bl	d9a8a <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d5b66:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d5b6a:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d5b6e:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d5b72:	f1bc 0f00 	cmp.w	ip, #0
   d5b76:	d006      	beq.n	d5b86 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d5b78:	462b      	mov	r3, r5
   d5b7a:	4642      	mov	r2, r8
   d5b7c:	4661      	mov	r1, ip
   d5b7e:	4670      	mov	r0, lr
   d5b80:	f003 fddc 	bl	d973c <_ZN9TCPClient7connectEPKctm>
   d5b84:	e00e      	b.n	d5ba4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5b86:	4b1f      	ldr	r3, [pc, #124]	; (d5c04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d5b88:	9304      	str	r3, [sp, #16]
   d5b8a:	f10e 0720 	add.w	r7, lr, #32
   d5b8e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d5b90:	ad05      	add	r5, sp, #20
   d5b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b94:	683b      	ldr	r3, [r7, #0]
   d5b96:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d5b98:	4642      	mov	r2, r8
   d5b9a:	4663      	mov	r3, ip
   d5b9c:	a904      	add	r1, sp, #16
   d5b9e:	4670      	mov	r0, lr
   d5ba0:	f003 fef6 	bl	d9990 <_ZN9TCPClient7connectE9IPAddresstm>
   d5ba4:	1e43      	subs	r3, r0, #1
   d5ba6:	425d      	negs	r5, r3
   d5ba8:	415d      	adcs	r5, r3
   d5baa:	b90d      	cbnz	r5, d5bb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d5bac:	6166      	str	r6, [r4, #20]
                return false;
   d5bae:	e011      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5bb0:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d5bb2:	2601      	movs	r6, #1
   d5bb4:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5bb6:	4638      	mov	r0, r7
   d5bb8:	f00b f9da 	bl	e0f70 <strlen>
   d5bbc:	2300      	movs	r3, #0
   d5bbe:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5bc2:	9302      	str	r3, [sp, #8]
   d5bc4:	4632      	mov	r2, r6
   d5bc6:	463b      	mov	r3, r7
   d5bc8:	2102      	movs	r1, #2
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f000 f81c 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d5bd0:	6923      	ldr	r3, [r4, #16]
   d5bd2:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d5bd4:	7f23      	ldrb	r3, [r4, #28]
   d5bd6:	3b01      	subs	r3, #1
   d5bd8:	7723      	strb	r3, [r4, #28]
   d5bda:	e00e      	b.n	d5bfa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d5bdc:	2500      	movs	r5, #0
   d5bde:	e00c      	b.n	d5bfa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d5be0:	4620      	mov	r0, r4
   d5be2:	f7ff fe1f 	bl	d5824 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d5be6:	4605      	mov	r5, r0
   d5be8:	2800      	cmp	r0, #0
   d5bea:	f47f af6a 	bne.w	d5ac2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5bee:	6820      	ldr	r0, [r4, #0]
   d5bf0:	f003 ff4b 	bl	d9a8a <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d5bf4:	f001 fffe 	bl	d7bf4 <BlynkNoOpCbk>
                return false;
   d5bf8:	e7ec      	b.n	d5bd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	b00a      	add	sp, #40	; 0x28
   d5bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c02:	bf00      	nop
   d5c04:	000e3f10 	.word	0x000e3f10

000d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d5c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c0c:	b083      	sub	sp, #12
   d5c0e:	af00      	add	r7, sp, #0
   d5c10:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5c12:	6800      	ldr	r0, [r0, #0]
   d5c14:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d5c16:	4689      	mov	r9, r1
   d5c18:	4616      	mov	r6, r2
   d5c1a:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d5c1c:	46ea      	mov	sl, sp
   d5c1e:	f003 fd60 	bl	d96e2 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d5c22:	2800      	cmp	r0, #0
   d5c24:	d060      	beq.n	d5ce8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d5c26:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d5c2a:	f000 80a0 	beq.w	d5d6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d5c2e:	f1b9 0f06 	cmp.w	r9, #6
   d5c32:	f000 809c 	beq.w	d5d6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d5c36:	7f63      	ldrb	r3, [r4, #29]
   d5c38:	2b01      	cmp	r3, #1
   d5c3a:	d155      	bne.n	d5ce8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d5c3c:	b916      	cbnz	r6, d5c44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d5c3e:	8b66      	ldrh	r6, [r4, #26]
   d5c40:	2e00      	cmp	r6, #0
   d5c42:	d056      	beq.n	d5cf2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d5c44:	f1a9 030c 	sub.w	r3, r9, #12
   d5c48:	2b08      	cmp	r3, #8
   d5c4a:	d95a      	bls.n	d5d02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d5c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d5c4e:	f1bb 0f00 	cmp.w	fp, #0
   d5c52:	bf14      	ite	ne
   d5c54:	46a8      	movne	r8, r5
   d5c56:	f04f 0800 	moveq.w	r8, #0
   d5c5a:	2a00      	cmp	r2, #0
   d5c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d5c5e:	f108 0305 	add.w	r3, r8, #5
   d5c62:	bf14      	ite	ne
   d5c64:	4690      	movne	r8, r2
   d5c66:	f04f 0800 	moveq.w	r8, #0
   d5c6a:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5c6c:	f108 0307 	add.w	r3, r8, #7
   d5c70:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d5c74:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5c76:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d5c7a:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d5c7e:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d5c80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5c84:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d5c88:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d5c8c:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d5c90:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d5c94:	f1bb 0f00 	cmp.w	fp, #0
   d5c98:	d052      	beq.n	d5d40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d5c9a:	2d00      	cmp	r5, #0
   d5c9c:	d050      	beq.n	d5d40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d5c9e:	462a      	mov	r2, r5
   d5ca0:	4659      	mov	r1, fp
   d5ca2:	f10d 0005 	add.w	r0, sp, #5
   d5ca6:	f00a fc01 	bl	e04ac <memcpy>
        pos += length;
   d5caa:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d5cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d5cae:	2b00      	cmp	r3, #0
   d5cb0:	d148      	bne.n	d5d44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d5cb2:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d5cb4:	4545      	cmp	r5, r8
   d5cb6:	d251      	bcs.n	d5d5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d5cb8:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d5cbc:	687b      	ldr	r3, [r7, #4]
   d5cbe:	6820      	ldr	r0, [r4, #0]
   d5cc0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d5cc4:	bf28      	it	cs
   d5cc6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d5cca:	1959      	adds	r1, r3, r5
   d5ccc:	f003 fcf3 	bl	d96b6 <_ZN9TCPClient5writeEPKhj>
   d5cd0:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d5cd2:	2000      	movs	r0, #0
   d5cd4:	f001 ff86 	bl	d7be4 <_Z10BlynkDelaym>
        if (w == 0) {
   d5cd8:	2e00      	cmp	r6, #0
   d5cda:	d13d      	bne.n	d5d58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5cdc:	6820      	ldr	r0, [r4, #0]
   d5cde:	f003 fed4 	bl	d9a8a <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d5ce2:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d5ce4:	f001 ff86 	bl	d7bf4 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d5ce8:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d5cea:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d5cec:	46bd      	mov	sp, r7
   d5cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d5cf2:	8b23      	ldrh	r3, [r4, #24]
   d5cf4:	3301      	adds	r3, #1
   d5cf6:	b29b      	uxth	r3, r3
   d5cf8:	b903      	cbnz	r3, d5cfc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d5cfa:	2301      	movs	r3, #1
   d5cfc:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d5cfe:	8b26      	ldrh	r6, [r4, #24]
   d5d00:	e7a0      	b.n	d5c44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d5d02:	68e3      	ldr	r3, [r4, #12]
   d5d04:	6922      	ldr	r2, [r4, #16]
   d5d06:	4293      	cmp	r3, r2
   d5d08:	bf38      	it	cc
   d5d0a:	4613      	movcc	r3, r2
   d5d0c:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d5d10:	f001 ff6a 	bl	d7be8 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d5d14:	ebc0 0008 	rsb	r0, r0, r8
   d5d18:	2800      	cmp	r0, #0
   d5d1a:	db0a      	blt.n	d5d32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d5d1c:	2100      	movs	r1, #0
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f7ff feb4 	bl	d5a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d5d24:	f001 ff60 	bl	d7be8 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d5d28:	ebc0 0008 	rsb	r0, r0, r8
   d5d2c:	2800      	cmp	r0, #0
   d5d2e:	daf5      	bge.n	d5d1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d5d30:	e78c      	b.n	d5c4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d5d32:	7f21      	ldrb	r1, [r4, #28]
   d5d34:	2900      	cmp	r1, #0
   d5d36:	d189      	bne.n	d5c4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d5d38:	4620      	mov	r0, r4
   d5d3a:	f7ff fea7 	bl	d5a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d5d3e:	e785      	b.n	d5c4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d5d40:	2005      	movs	r0, #5
   d5d42:	e7b3      	b.n	d5cac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d5d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d5d46:	2b00      	cmp	r3, #0
   d5d48:	d0b3      	beq.n	d5cb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d5d4a:	461a      	mov	r2, r3
   d5d4c:	687b      	ldr	r3, [r7, #4]
   d5d4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d5d50:	4418      	add	r0, r3
   d5d52:	f00a fbab 	bl	e04ac <memcpy>
   d5d56:	e7ac      	b.n	d5cb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d5d58:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d5d5a:	e7ab      	b.n	d5cb4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d5d5c:	d003      	beq.n	d5d66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d5d5e:	4620      	mov	r0, r4
   d5d60:	f7ff fc20 	bl	d55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d5d64:	e7c0      	b.n	d5ce8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d5d66:	f001 ff3f 	bl	d7be8 <_Z11BlynkMillisv>
   d5d6a:	6120      	str	r0, [r4, #16]
   d5d6c:	e7bc      	b.n	d5ce8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d5d6e:	2e00      	cmp	r6, #0
   d5d70:	f47f af6c 	bne.w	d5c4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d5d74:	e763      	b.n	d5c3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d7a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5d7e:	ab08      	add	r3, sp, #32
   d5d80:	2400      	movs	r4, #0
   d5d82:	4605      	mov	r5, r0
   d5d84:	460f      	mov	r7, r1
   d5d86:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5d88:	a805      	add	r0, sp, #20
   d5d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d5d8e:	490e      	ldr	r1, [pc, #56]	; (d5dc8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d5d90:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5d92:	4616      	mov	r6, r2
   d5d94:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5d96:	f7ff fafb 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d5d9a:	4639      	mov	r1, r7
   d5d9c:	a805      	add	r0, sp, #20
   d5d9e:	f7ff fb13 	bl	d53c8 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d5da2:	4631      	mov	r1, r6
   d5da4:	a805      	add	r0, sp, #20
   d5da6:	f7ff fb0f 	bl	d53c8 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5daa:	9b06      	ldr	r3, [sp, #24]
   d5dac:	9402      	str	r4, [sp, #8]
   d5dae:	3b01      	subs	r3, #1
   d5db0:	9300      	str	r3, [sp, #0]
   d5db2:	9401      	str	r4, [sp, #4]
   d5db4:	9b05      	ldr	r3, [sp, #20]
   d5db6:	4622      	mov	r2, r4
   d5db8:	2114      	movs	r1, #20
   d5dba:	4628      	mov	r0, r5
   d5dbc:	f7ff ff24 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5dc0:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d5dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5dc6:	bf00      	nop
   d5dc8:	000e358b 	.word	0x000e358b

000d5dcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d5dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d5dce:	2200      	movs	r2, #0
   d5dd0:	2349      	movs	r3, #73	; 0x49
   d5dd2:	9300      	str	r3, [sp, #0]
   d5dd4:	9202      	str	r2, [sp, #8]
   d5dd6:	9201      	str	r2, [sp, #4]
   d5dd8:	4b03      	ldr	r3, [pc, #12]	; (d5de8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d5dda:	2111      	movs	r1, #17
   d5ddc:	f7ff ff14 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d5de0:	b005      	add	sp, #20
   d5de2:	f85d fb04 	ldr.w	pc, [sp], #4
   d5de6:	bf00      	nop
   d5de8:	000e350a 	.word	0x000e350a

000d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5dee:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5df2:	ab0c      	add	r3, sp, #48	; 0x30
   d5df4:	2400      	movs	r4, #0
   d5df6:	4605      	mov	r5, r0
   d5df8:	460f      	mov	r7, r1
   d5dfa:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5dfc:	a805      	add	r0, sp, #20
   d5dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d5e02:	4911      	ldr	r1, [pc, #68]	; (d5e48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d5e04:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5e06:	4616      	mov	r6, r2
   d5e08:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5e0a:	f7ff fac1 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d5e0e:	4639      	mov	r1, r7
   d5e10:	a805      	add	r0, sp, #20
   d5e12:	f7ff fad9 	bl	d53c8 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d5e16:	4631      	mov	r1, r6
   d5e18:	a808      	add	r0, sp, #32
   d5e1a:	f002 fc18 	bl	d864e <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d5e1e:	9908      	ldr	r1, [sp, #32]
   d5e20:	a805      	add	r0, sp, #20
   d5e22:	f7ff fab5 	bl	d5390 <_ZN10BlynkParam3addEPKc>
   d5e26:	a808      	add	r0, sp, #32
   d5e28:	f002 fb8b 	bl	d8542 <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5e2c:	9b06      	ldr	r3, [sp, #24]
   d5e2e:	9402      	str	r4, [sp, #8]
   d5e30:	3b01      	subs	r3, #1
   d5e32:	9300      	str	r3, [sp, #0]
   d5e34:	9401      	str	r4, [sp, #4]
   d5e36:	9b05      	ldr	r3, [sp, #20]
   d5e38:	4622      	mov	r2, r4
   d5e3a:	2114      	movs	r1, #20
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f7ff fee3 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5e42:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e48:	000e358b 	.word	0x000e358b

000d5e4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA28_cA27_cEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d5e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e4e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d5e52:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5e54:	ab08      	add	r3, sp, #32
   d5e56:	4617      	mov	r7, r2
   d5e58:	2400      	movs	r4, #0
   d5e5a:	4605      	mov	r5, r0
   d5e5c:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d5e5e:	a805      	add	r0, sp, #20
   d5e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d5e64:	9307      	str	r3, [sp, #28]
   d5e66:	9406      	str	r4, [sp, #24]
   d5e68:	f7ff fa92 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d5e6c:	4639      	mov	r1, r7
   d5e6e:	a805      	add	r0, sp, #20
   d5e70:	f7ff fa8e 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
   d5e74:	4631      	mov	r1, r6
   d5e76:	a805      	add	r0, sp, #20
   d5e78:	f7ff fa8a 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5e7c:	9b06      	ldr	r3, [sp, #24]
   d5e7e:	9402      	str	r4, [sp, #8]
   d5e80:	3b01      	subs	r3, #1
   d5e82:	9300      	str	r3, [sp, #0]
   d5e84:	9401      	str	r4, [sp, #4]
   d5e86:	9b05      	ldr	r3, [sp, #20]
   d5e88:	4622      	mov	r2, r4
   d5e8a:	210d      	movs	r1, #13
   d5e8c:	4628      	mov	r0, r5
   d5e8e:	f7ff febb 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5e92:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d5e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e9a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d5e9e:	461e      	mov	r6, r3
   d5ea0:	ab08      	add	r3, sp, #32
   d5ea2:	4617      	mov	r7, r2
   d5ea4:	2400      	movs	r4, #0
   d5ea6:	4605      	mov	r5, r0
   d5ea8:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d5eaa:	a805      	add	r0, sp, #20
   d5eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d5eb0:	9307      	str	r3, [sp, #28]
   d5eb2:	9406      	str	r4, [sp, #24]
   d5eb4:	f7ff fa6c 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d5eb8:	4639      	mov	r1, r7
   d5eba:	a805      	add	r0, sp, #20
   d5ebc:	f7ff fa68 	bl	d5390 <_ZN10BlynkParam3addEPKc>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d5ec0:	6831      	ldr	r1, [r6, #0]
   d5ec2:	a805      	add	r0, sp, #20
   d5ec4:	f7ff fa64 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5ec8:	9b06      	ldr	r3, [sp, #24]
   d5eca:	9402      	str	r4, [sp, #8]
   d5ecc:	3b01      	subs	r3, #1
   d5ece:	9300      	str	r3, [sp, #0]
   d5ed0:	9401      	str	r4, [sp, #4]
   d5ed2:	9b05      	ldr	r3, [sp, #20]
   d5ed4:	4622      	mov	r2, r4
   d5ed6:	210d      	movs	r1, #13
   d5ed8:	4628      	mov	r0, r5
   d5eda:	f7ff fe95 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5ede:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d5ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ee6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5eea:	ab0a      	add	r3, sp, #40	; 0x28
   d5eec:	2400      	movs	r4, #0
   d5eee:	4606      	mov	r6, r0
   d5ef0:	460d      	mov	r5, r1
   d5ef2:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5ef4:	a807      	add	r0, sp, #28
   d5ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d5efa:	4917      	ldr	r1, [pc, #92]	; (d5f58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d5efc:	ed8d 0a05 	vstr	s0, [sp, #20]
   d5f00:	9309      	str	r3, [sp, #36]	; 0x24
   d5f02:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d5f04:	f7ff fa44 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d5f08:	4629      	mov	r1, r5
   d5f0a:	a807      	add	r0, sp, #28
   d5f0c:	f7ff fa5c 	bl	d53c8 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d5f10:	ed9d 0a05 	vldr	s0, [sp, #20]
   d5f14:	9b08      	ldr	r3, [sp, #32]
   d5f16:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5f18:	9d07      	ldr	r5, [sp, #28]
   d5f1a:	ee10 0a10 	vmov	r0, s0
   d5f1e:	1acf      	subs	r7, r1, r3
   d5f20:	441d      	add	r5, r3
   d5f22:	f009 fdd5 	bl	dfad0 <__aeabi_f2d>
   d5f26:	4a0d      	ldr	r2, [pc, #52]	; (d5f5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d5f28:	e9cd 0100 	strd	r0, r1, [sp]
   d5f2c:	4639      	mov	r1, r7
   d5f2e:	4628      	mov	r0, r5
   d5f30:	f002 fa06 	bl	d8340 <snprintf>
   d5f34:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5f36:	9402      	str	r4, [sp, #8]
   d5f38:	3001      	adds	r0, #1
   d5f3a:	4418      	add	r0, r3
   d5f3c:	9008      	str	r0, [sp, #32]
   d5f3e:	3801      	subs	r0, #1
   d5f40:	9000      	str	r0, [sp, #0]
   d5f42:	9401      	str	r4, [sp, #4]
   d5f44:	9b07      	ldr	r3, [sp, #28]
   d5f46:	4622      	mov	r2, r4
   d5f48:	2114      	movs	r1, #20
   d5f4a:	4630      	mov	r0, r6
   d5f4c:	f7ff fe5c 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d5f50:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d5f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f56:	bf00      	nop
   d5f58:	000e358b 	.word	0x000e358b
   d5f5c:	000e358e 	.word	0x000e358e

000d5f60 <_Z13setAppWidgetsv>:
 Serial.println("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d5f60:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d5f62:	4d09      	ldr	r5, [pc, #36]	; (d5f88 <_Z13setAppWidgetsv+0x28>)
   d5f64:	4c09      	ldr	r4, [pc, #36]	; (d5f8c <_Z13setAppWidgetsv+0x2c>)
   d5f66:	686a      	ldr	r2, [r5, #4]
   d5f68:	4620      	mov	r0, r4
   d5f6a:	210b      	movs	r1, #11
   d5f6c:	f7ff ff04 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d5f70:	4620      	mov	r0, r4
   d5f72:	68aa      	ldr	r2, [r5, #8]
   d5f74:	210d      	movs	r1, #13
   d5f76:	f7ff feff 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d5f7a:	ed95 0a03 	vldr	s0, [r5, #12]
   d5f7e:	210f      	movs	r1, #15
   d5f80:	4620      	mov	r0, r4
   d5f82:	f7ff ffaf 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d5f86:	bd38      	pop	{r3, r4, r5, pc}
   d5f88:	2003deb4 	.word	0x2003deb4
   d5f8c:	2003e304 	.word	0x2003e304

000d5f90 <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d5f90:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d5f92:	6808      	ldr	r0, [r1, #0]
   d5f94:	f00a f977 	bl	e0286 <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d5f98:	4b03      	ldr	r3, [pc, #12]	; (d5fa8 <BlynkWidgetWrite10+0x18>)
   d5f9a:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d5f9c:	f7ff fa38 	bl	d5410 <_Z9saveStatev>
  setAppWidgets();
}
   d5fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d5fa4:	f7ff bfdc 	b.w	d5f60 <_Z13setAppWidgetsv>
   d5fa8:	2003deb4 	.word	0x2003deb4

000d5fac <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d5fac:	b508      	push	{r3, lr}
   d5fae:	6808      	ldr	r0, [r1, #0]
   d5fb0:	f00a f969 	bl	e0286 <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d5fb4:	4b03      	ldr	r3, [pc, #12]	; (d5fc4 <BlynkWidgetWrite12+0x18>)
   d5fb6:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d5fb8:	f7ff fa2a 	bl	d5410 <_Z9saveStatev>
  setAppWidgets();
}
   d5fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d5fc0:	f7ff bfce 	b.w	d5f60 <_Z13setAppWidgetsv>
   d5fc4:	2003deb4 	.word	0x2003deb4

000d5fc8 <BlynkWidgetWriteInternalPinACON>:
  delay(5000);
  System.sleep(SLEEP_MODE_DEEP);
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d5fc8:	b508      	push	{r3, lr}
  appConnected = true;
   d5fca:	4b06      	ldr	r3, [pc, #24]	; (d5fe4 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d5fcc:	2201      	movs	r2, #1
   d5fce:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d5fd0:	f7ff ffc6 	bl	d5f60 <_Z13setAppWidgetsv>
  Serial.println("Connected");
   d5fd4:	f003 f900 	bl	d91d8 <_Z16_fetch_usbserialv>
   d5fd8:	4903      	ldr	r1, [pc, #12]	; (d5fe8 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d5fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  Serial.println("Connected");
   d5fde:	f002 bc22 	b.w	d8826 <_ZN5Print7printlnEPKc>
   d5fe2:	bf00      	nop
   d5fe4:	2003deb1 	.word	0x2003deb1
   d5fe8:	000e3594 	.word	0x000e3594

000d5fec <BlynkWidgetWrite14>:
  }
  
}

BLYNK_WRITE(V14) 
{
   d5fec:	b510      	push	{r4, lr}
   d5fee:	6808      	ldr	r0, [r1, #0]
   d5ff0:	f00a f949 	bl	e0286 <atoi>
  if (param.asInt()==1)
   d5ff4:	2801      	cmp	r0, #1
   d5ff6:	d10d      	bne.n	d6014 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d5ff8:	4809      	ldr	r0, [pc, #36]	; (d6020 <BlynkWidgetWrite14+0x34>)
   d5ffa:	4c0a      	ldr	r4, [pc, #40]	; (d6024 <BlynkWidgetWrite14+0x38>)
   d5ffc:	f001 f8aa 	bl	d7154 <_ZN3ULP4zeroEv>
   d6000:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6004:	f7ff fa04 	bl	d5410 <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6008:	ed94 0a03 	vldr	s0, [r4, #12]
   d600c:	4806      	ldr	r0, [pc, #24]	; (d6028 <BlynkWidgetWrite14+0x3c>)
   d600e:	210f      	movs	r1, #15
   d6010:	f7ff ff68 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6014:	2200      	movs	r2, #0
   d6016:	210e      	movs	r1, #14
   d6018:	4803      	ldr	r0, [pc, #12]	; (d6028 <BlynkWidgetWrite14+0x3c>)
   d601a:	f7ff fead 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
   d601e:	bd10      	pop	{r4, pc}
   d6020:	2003e270 	.word	0x2003e270
   d6024:	2003deb4 	.word	0x2003deb4
   d6028:	2003e304 	.word	0x2003e304

000d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d602c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d602e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6032:	ab08      	add	r3, sp, #32
   d6034:	2400      	movs	r4, #0
   d6036:	4605      	mov	r5, r0
   d6038:	460f      	mov	r7, r1
   d603a:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d603c:	a805      	add	r0, sp, #20
   d603e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6042:	490e      	ldr	r1, [pc, #56]	; (d607c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6044:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6046:	4616      	mov	r6, r2
   d6048:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d604a:	f7ff f9a1 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d604e:	4639      	mov	r1, r7
   d6050:	a805      	add	r0, sp, #20
   d6052:	f7ff f9b9 	bl	d53c8 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6056:	4631      	mov	r1, r6
   d6058:	a805      	add	r0, sp, #20
   d605a:	f7ff f999 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d605e:	9b06      	ldr	r3, [sp, #24]
   d6060:	9402      	str	r4, [sp, #8]
   d6062:	3b01      	subs	r3, #1
   d6064:	9300      	str	r3, [sp, #0]
   d6066:	9401      	str	r4, [sp, #4]
   d6068:	9b05      	ldr	r3, [sp, #20]
   d606a:	4622      	mov	r2, r4
   d606c:	2114      	movs	r1, #20
   d606e:	4628      	mov	r0, r5
   d6070:	f7ff fdca 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6074:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d607a:	bf00      	nop
   d607c:	000e358b 	.word	0x000e358b

000d6080 <BlynkWidgetWrite22>:
  Blynk.virtualWrite(V25,state.batThreshold);
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
}

BLYNK_WRITE(V22) //Reset Expression
{
   d6080:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6082:	b085      	sub	sp, #20
  String _resetKey = param.asStr();
   d6084:	6809      	ldr	r1, [r1, #0]
   d6086:	4668      	mov	r0, sp
   d6088:	f002 faa2 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d608c:	4939      	ldr	r1, [pc, #228]	; (d6174 <BlynkWidgetWrite22+0xf4>)
   d608e:	4668      	mov	r0, sp
   d6090:	f002 fb49 	bl	d8726 <_ZNK6String6equalsEPKc>
   d6094:	2800      	cmp	r0, #0
   d6096:	d067      	beq.n	d6168 <BlynkWidgetWrite22+0xe8>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 3;
   d6098:	4c37      	ldr	r4, [pc, #220]	; (d6178 <BlynkWidgetWrite22+0xf8>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d609a:	4a38      	ldr	r2, [pc, #224]	; (d617c <BlynkWidgetWrite22+0xfc>)
   d609c:	4838      	ldr	r0, [pc, #224]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d609e:	2116      	movs	r1, #22
   d60a0:	f7ff ffc4 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 3;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d60a4:	2500      	movs	r5, #0
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 3;
    state.secondsBetweenReadings=5;
   d60a6:	2305      	movs	r3, #5
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 3;
   d60a8:	2603      	movs	r6, #3
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.zeroOff = 0;
   d60aa:	2700      	movs	r7, #0
    strcpy(state.expression," ");
   d60ac:	4935      	ldr	r1, [pc, #212]	; (d6184 <BlynkWidgetWrite22+0x104>)
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 3;
    state.secondsBetweenReadings=5;
   d60ae:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression," ");
   d60b0:	f104 0010 	add.w	r0, r4, #16
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 3;
   d60b4:	6066      	str	r6, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d60b6:	6025      	str	r5, [r4, #0]
    state.zeroOff = 0;
   d60b8:	60e7      	str	r7, [r4, #12]
    strcpy(state.expression," ");
   d60ba:	f00a fa3d 	bl	e0538 <strcpy>
    strcpy(state.email," ");
   d60be:	4931      	ldr	r1, [pc, #196]	; (d6184 <BlynkWidgetWrite22+0x104>)
   d60c0:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d60c4:	f00a fa38 	bl	e0538 <strcpy>
    strcpy(state.batEmail," ");
   d60c8:	492e      	ldr	r1, [pc, #184]	; (d6184 <BlynkWidgetWrite22+0x104>)
   d60ca:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d60ce:	f00a fa33 	bl	e0538 <strcpy>
    state.batThreshold = 0;
    state.lastAlert=false;
    state.batLastAlert=false;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d60d2:	4632      	mov	r2, r6
   d60d4:	210a      	movs	r1, #10
   d60d6:	482a      	ldr	r0, [pc, #168]	; (d6180 <BlynkWidgetWrite22+0x100>)
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression," ");
    strcpy(state.email," ");
    strcpy(state.batEmail," ");
    state.batThreshold = 0;
   d60d8:	f8c4 7310 	str.w	r7, [r4, #784]	; 0x310
    state.lastAlert=false;
   d60dc:	f884 5314 	strb.w	r5, [r4, #788]	; 0x314
    state.batLastAlert=false;
   d60e0:	f884 5315 	strb.w	r5, [r4, #789]	; 0x315
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d60e4:	f7ff fe48 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d60e8:	68a2      	ldr	r2, [r4, #8]
   d60ea:	4825      	ldr	r0, [pc, #148]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d60ec:	210c      	movs	r1, #12
   d60ee:	f7ff fe43 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d60f2:	6862      	ldr	r2, [r4, #4]
   d60f4:	4822      	ldr	r0, [pc, #136]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d60f6:	210b      	movs	r1, #11
   d60f8:	f7ff fe3e 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d60fc:	68a2      	ldr	r2, [r4, #8]
   d60fe:	4820      	ldr	r0, [pc, #128]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d6100:	210d      	movs	r1, #13
   d6102:	f7ff fe39 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d6106:	f104 0210 	add.w	r2, r4, #16
   d610a:	2114      	movs	r1, #20
   d610c:	481c      	ldr	r0, [pc, #112]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d610e:	f7ff ff8d 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6112:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6116:	2110      	movs	r1, #16
   d6118:	4819      	ldr	r0, [pc, #100]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d611a:	f7ff ff87 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d611e:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6122:	2112      	movs	r1, #18
   d6124:	4816      	ldr	r0, [pc, #88]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d6126:	f7ff ff81 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d612a:	ed94 0a03 	vldr	s0, [r4, #12]
   d612e:	4814      	ldr	r0, [pc, #80]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d6130:	210f      	movs	r1, #15
   d6132:	f7ff fed7 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25,state.batThreshold);
   d6136:	ed94 0ac4 	vldr	s0, [r4, #784]	; 0x310
   d613a:	4811      	ldr	r0, [pc, #68]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d613c:	2119      	movs	r1, #25
   d613e:	f7ff fed1 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d6142:	4811      	ldr	r0, [pc, #68]	; (d6188 <BlynkWidgetWrite22+0x108>)
   d6144:	f001 fe06 	bl	d7d54 <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d6148:	4a10      	ldr	r2, [pc, #64]	; (d618c <BlynkWidgetWrite22+0x10c>)
   d614a:	480d      	ldr	r0, [pc, #52]	; (d6180 <BlynkWidgetWrite22+0x100>)
   d614c:	2115      	movs	r1, #21
   d614e:	f7ff ff6d 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Serial.println("Hard Resetting");
   d6152:	f003 f841 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6156:	490d      	ldr	r1, [pc, #52]	; (d618c <BlynkWidgetWrite22+0x10c>)
   d6158:	f002 fb65 	bl	d8826 <_ZN5Print7printlnEPKc>
    delay(500);
   d615c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6160:	f002 fddc 	bl	d8d1c <delay>
    System.reset();
   d6164:	f002 f976 	bl	d8454 <_ZN11SystemClass5resetEv>
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d6168:	4668      	mov	r0, sp
   d616a:	f002 f9ea 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    Serial.println("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d616e:	b005      	add	sp, #20
   d6170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6172:	bf00      	nop
   d6174:	000e359e 	.word	0x000e359e
   d6178:	2003deb4 	.word	0x2003deb4
   d617c:	000e35a6 	.word	0x000e35a6
   d6180:	2003e304 	.word	0x2003e304
   d6184:	000e36c0 	.word	0x000e36c0
   d6188:	2003dc10 	.word	0x2003dc10
   d618c:	000e35ba 	.word	0x000e35ba

000d6190 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d6190:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d6192:	4c1e      	ldr	r4, [pc, #120]	; (d620c <_Z20initializeAppWidgetsv+0x7c>)
   d6194:	481e      	ldr	r0, [pc, #120]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d6196:	6862      	ldr	r2, [r4, #4]
   d6198:	210a      	movs	r1, #10
   d619a:	f7ff fded 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d619e:	68a2      	ldr	r2, [r4, #8]
   d61a0:	481b      	ldr	r0, [pc, #108]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61a2:	210c      	movs	r1, #12
   d61a4:	f7ff fde8 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d61a8:	6862      	ldr	r2, [r4, #4]
   d61aa:	4819      	ldr	r0, [pc, #100]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61ac:	210b      	movs	r1, #11
   d61ae:	f7ff fde3 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d61b2:	68a2      	ldr	r2, [r4, #8]
   d61b4:	4816      	ldr	r0, [pc, #88]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61b6:	210d      	movs	r1, #13
   d61b8:	f7ff fdde 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d61bc:	f104 0210 	add.w	r2, r4, #16
   d61c0:	2114      	movs	r1, #20
   d61c2:	4813      	ldr	r0, [pc, #76]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61c4:	f7ff ff32 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d61c8:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d61cc:	2110      	movs	r1, #16
   d61ce:	4810      	ldr	r0, [pc, #64]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61d0:	f7ff ff2c 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d61d4:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d61d8:	2112      	movs	r1, #18
   d61da:	480d      	ldr	r0, [pc, #52]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61dc:	f7ff ff26 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d61e0:	ed94 0a03 	vldr	s0, [r4, #12]
   d61e4:	480a      	ldr	r0, [pc, #40]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61e6:	210f      	movs	r1, #15
   d61e8:	f7ff fe7c 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25,state.batThreshold);
   d61ec:	ed94 0ac4 	vldr	s0, [r4, #784]	; 0x310
   d61f0:	4807      	ldr	r0, [pc, #28]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d61f2:	2119      	movs	r1, #25
   d61f4:	f7ff fe76 	bl	d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d61f8:	4b06      	ldr	r3, [pc, #24]	; (d6214 <_Z20initializeAppWidgetsv+0x84>)
   d61fa:	781b      	ldrb	r3, [r3, #0]
   d61fc:	b123      	cbz	r3, d6208 <_Z20initializeAppWidgetsv+0x78>
   d61fe:	4a06      	ldr	r2, [pc, #24]	; (d6218 <_Z20initializeAppWidgetsv+0x88>)
   d6200:	4803      	ldr	r0, [pc, #12]	; (d6210 <_Z20initializeAppWidgetsv+0x80>)
   d6202:	2115      	movs	r1, #21
   d6204:	f7ff ff12 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d6208:	bd10      	pop	{r4, pc}
   d620a:	bf00      	nop
   d620c:	2003deb4 	.word	0x2003deb4
   d6210:	2003e304 	.word	0x2003e304
   d6214:	2003deb2 	.word	0x2003deb2
   d6218:	000e35c9 	.word	0x000e35c9

000d621c <BlynkOnConnected>:
    System.reset();
  }
}

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d621c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  Serial.println("Blynk connected.");
   d621e:	f002 ffdb 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6222:	490a      	ldr	r1, [pc, #40]	; (d624c <BlynkOnConnected+0x30>)
   d6224:	f002 faff 	bl	d8826 <_ZN5Print7printlnEPKc>
  if (firstRun)
   d6228:	4b09      	ldr	r3, [pc, #36]	; (d6250 <BlynkOnConnected+0x34>)
   d622a:	781b      	ldrb	r3, [r3, #0]
   d622c:	b10b      	cbz	r3, d6232 <BlynkOnConnected+0x16>
  {
    initializeAppWidgets();
   d622e:	f7ff ffaf 	bl	d6190 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d6232:	2300      	movs	r3, #0
   d6234:	9302      	str	r3, [sp, #8]
   d6236:	9301      	str	r3, [sp, #4]
   d6238:	9300      	str	r3, [sp, #0]
   d623a:	461a      	mov	r2, r3
   d623c:	2110      	movs	r1, #16
   d623e:	4805      	ldr	r0, [pc, #20]	; (d6254 <BlynkOnConnected+0x38>)
   d6240:	f7ff fce2 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d6244:	b005      	add	sp, #20
   d6246:	f85d fb04 	ldr.w	pc, [sp], #4
   d624a:	bf00      	nop
   d624c:	000e35e4 	.word	0x000e35e4
   d6250:	2003deb0 	.word	0x2003deb0
   d6254:	2003e304 	.word	0x2003e304

000d6258 <_Z13runExpressionPc>:
    terminalDebug = true;
  }
}

bool runExpression(char *expression)
{   
   d6258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d625c:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   d6260:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6262:	2260      	movs	r2, #96	; 0x60
   d6264:	2100      	movs	r1, #0
   d6266:	a81a      	add	r0, sp, #104	; 0x68
   d6268:	f00a f92b 	bl	e04c2 <memset>
   d626c:	4b6c      	ldr	r3, [pc, #432]	; (d6420 <_Z13runExpressionPc+0x1c8>)
   d626e:	931a      	str	r3, [sp, #104]	; 0x68
   d6270:	4b6c      	ldr	r3, [pc, #432]	; (d6424 <_Z13runExpressionPc+0x1cc>)
   d6272:	931e      	str	r3, [sp, #120]	; 0x78
   d6274:	4b6c      	ldr	r3, [pc, #432]	; (d6428 <_Z13runExpressionPc+0x1d0>)
   d6276:	9322      	str	r3, [sp, #136]	; 0x88
   d6278:	4b6c      	ldr	r3, [pc, #432]	; (d642c <_Z13runExpressionPc+0x1d4>)
   d627a:	9326      	str	r3, [sp, #152]	; 0x98
   d627c:	4b6c      	ldr	r3, [pc, #432]	; (d6430 <_Z13runExpressionPc+0x1d8>)
   d627e:	932a      	str	r3, [sp, #168]	; 0xa8
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d6280:	4c6c      	ldr	r4, [pc, #432]	; (d6434 <_Z13runExpressionPc+0x1dc>)

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6282:	4b6d      	ldr	r3, [pc, #436]	; (d6438 <_Z13runExpressionPc+0x1e0>)
   d6284:	932e      	str	r3, [sp, #184]	; 0xb8
   d6286:	ab0e      	add	r3, sp, #56	; 0x38
   d6288:	932b      	str	r3, [sp, #172]	; 0xac
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d628a:	7823      	ldrb	r3, [r4, #0]

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  /* Store variable names and pointers. */
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d628c:	f10d 0b18 	add.w	fp, sp, #24
   d6290:	f10d 0a20 	add.w	sl, sp, #32
   d6294:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   d6298:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   d629c:	af10      	add	r7, sp, #64	; 0x40
   d629e:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
   d62a2:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
   d62a6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   d62aa:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   d62ae:	972f      	str	r7, [sp, #188]	; 0xbc
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d62b0:	b123      	cbz	r3, d62bc <_Z13runExpressionPc+0x64>
   d62b2:	462a      	mov	r2, r5
   d62b4:	2115      	movs	r1, #21
   d62b6:	4861      	ldr	r0, [pc, #388]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d62b8:	f7ff feb8 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  /* Compile the expression with variables. */
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d62bc:	ab05      	add	r3, sp, #20
   d62be:	2206      	movs	r2, #6
   d62c0:	a91a      	add	r1, sp, #104	; 0x68
   d62c2:	4628      	mov	r0, r5
   d62c4:	f7fe ffee 	bl	d52a4 <te_compile>

  if (expr) {
   d62c8:	4606      	mov	r6, r0
   d62ca:	2800      	cmp	r0, #0
   d62cc:	d07a      	beq.n	d63c4 <_Z13runExpressionPc+0x16c>

      pm1 = (double)Sensor.massPM1;
   d62ce:	4d5c      	ldr	r5, [pc, #368]	; (d6440 <_Z13runExpressionPc+0x1e8>)
   d62d0:	6868      	ldr	r0, [r5, #4]
   d62d2:	f009 fbfd 	bl	dfad0 <__aeabi_f2d>
   d62d6:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d62da:	68a8      	ldr	r0, [r5, #8]
   d62dc:	f009 fbf8 	bl	dfad0 <__aeabi_f2d>
   d62e0:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d62e4:	68e8      	ldr	r0, [r5, #12]
   d62e6:	f009 fbf3 	bl	dfad0 <__aeabi_f2d>
   d62ea:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d62ee:	6928      	ldr	r0, [r5, #16]
   d62f0:	f009 fbee 	bl	dfad0 <__aeabi_f2d>
      conc = (double)conc;
      temp = (double)temp1;
   d62f4:	4b53      	ldr	r3, [pc, #332]	; (d6444 <_Z13runExpressionPc+0x1ec>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d62f6:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc;
      temp = (double)temp1;
   d62fa:	6818      	ldr	r0, [r3, #0]
   d62fc:	f009 fbe8 	bl	dfad0 <__aeabi_f2d>
   d6300:	e9c7 0100 	strd	r0, r1, [r7]
      const double h2 = te_eval(expr);
   d6304:	4630      	mov	r0, r6
   d6306:	f7fe fcb7 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d630a:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d630c:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6310:	b15b      	cbz	r3, d632a <_Z13runExpressionPc+0xd2>
   d6312:	494d      	ldr	r1, [pc, #308]	; (d6448 <_Z13runExpressionPc+0x1f0>)
   d6314:	a832      	add	r0, sp, #200	; 0xc8
   d6316:	f002 f99a 	bl	d864e <_ZN6StringC1ERKS_>
   d631a:	4848      	ldr	r0, [pc, #288]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d631c:	aa32      	add	r2, sp, #200	; 0xc8
   d631e:	2115      	movs	r1, #21
   d6320:	f7ff fd64 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6324:	a832      	add	r0, sp, #200	; 0xc8
   d6326:	f002 f90c 	bl	d8542 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d632a:	7823      	ldrb	r3, [r4, #0]
   d632c:	2b00      	cmp	r3, #0
   d632e:	d038      	beq.n	d63a2 <_Z13runExpressionPc+0x14a>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6330:	ab32      	add	r3, sp, #200	; 0xc8
   d6332:	2500      	movs	r5, #0
   d6334:	9316      	str	r3, [sp, #88]	; 0x58
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6336:	4945      	ldr	r1, [pc, #276]	; (d644c <_Z13runExpressionPc+0x1f4>)
   d6338:	9517      	str	r5, [sp, #92]	; 0x5c
   d633a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d633e:	a816      	add	r0, sp, #88	; 0x58
   d6340:	9318      	str	r3, [sp, #96]	; 0x60
   d6342:	f7ff f825 	bl	d5390 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6346:	2115      	movs	r1, #21
   d6348:	a816      	add	r0, sp, #88	; 0x58
   d634a:	f7ff f83d 	bl	d53c8 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d634e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6350:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6352:	9816      	ldr	r0, [sp, #88]	; 0x58
   d6354:	4a3e      	ldr	r2, [pc, #248]	; (d6450 <_Z13runExpressionPc+0x1f8>)
   d6356:	1ac9      	subs	r1, r1, r3
   d6358:	4418      	add	r0, r3
   d635a:	e9cd 6700 	strd	r6, r7, [sp]
   d635e:	f001 ffef 	bl	d8340 <snprintf>
   d6362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6364:	9502      	str	r5, [sp, #8]
   d6366:	3001      	adds	r0, #1
   d6368:	4418      	add	r0, r3
   d636a:	9017      	str	r0, [sp, #92]	; 0x5c
   d636c:	3801      	subs	r0, #1
   d636e:	9000      	str	r0, [sp, #0]
   d6370:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d6372:	4832      	ldr	r0, [pc, #200]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d6374:	9501      	str	r5, [sp, #4]
   d6376:	462a      	mov	r2, r5
   d6378:	2114      	movs	r1, #20
   d637a:	f7ff fc45 	bl	d5c08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>

      if (h2==1.0)
   d637e:	2200      	movs	r2, #0
   d6380:	4b34      	ldr	r3, [pc, #208]	; (d6454 <_Z13runExpressionPc+0x1fc>)
   d6382:	4630      	mov	r0, r6
   d6384:	4639      	mov	r1, r7
   d6386:	f009 fe5f 	bl	e0048 <__aeabi_dcmpeq>
   d638a:	b190      	cbz	r0, d63b2 <_Z13runExpressionPc+0x15a>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d638c:	4b29      	ldr	r3, [pc, #164]	; (d6434 <_Z13runExpressionPc+0x1dc>)
   d638e:	781c      	ldrb	r4, [r3, #0]
   d6390:	b90c      	cbnz	r4, d6396 <_Z13runExpressionPc+0x13e>
        return true;
   d6392:	2401      	movs	r4, #1
   d6394:	e03f      	b.n	d6416 <_Z13runExpressionPc+0x1be>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d6396:	4a30      	ldr	r2, [pc, #192]	; (d6458 <_Z13runExpressionPc+0x200>)
   d6398:	4828      	ldr	r0, [pc, #160]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d639a:	2115      	movs	r1, #21
   d639c:	f7ff fe46 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d63a0:	e039      	b.n	d6416 <_Z13runExpressionPc+0x1be>
      temp = (double)temp1;
      const double h2 = te_eval(expr);
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);

      if (h2==1.0)
   d63a2:	2200      	movs	r2, #0
   d63a4:	4b2b      	ldr	r3, [pc, #172]	; (d6454 <_Z13runExpressionPc+0x1fc>)
   d63a6:	4630      	mov	r0, r6
   d63a8:	4639      	mov	r1, r7
   d63aa:	f009 fe4d 	bl	e0048 <__aeabi_dcmpeq>
   d63ae:	2800      	cmp	r0, #0
   d63b0:	d1ef      	bne.n	d6392 <_Z13runExpressionPc+0x13a>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d63b2:	7824      	ldrb	r4, [r4, #0]
   d63b4:	2c00      	cmp	r4, #0
   d63b6:	d02e      	beq.n	d6416 <_Z13runExpressionPc+0x1be>
   d63b8:	4a28      	ldr	r2, [pc, #160]	; (d645c <_Z13runExpressionPc+0x204>)
   d63ba:	4820      	ldr	r0, [pc, #128]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d63bc:	2115      	movs	r1, #21
   d63be:	f7ff fe35 	bl	d602c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d63c2:	e027      	b.n	d6414 <_Z13runExpressionPc+0x1bc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d63c4:	4926      	ldr	r1, [pc, #152]	; (d6460 <_Z13runExpressionPc+0x208>)
   d63c6:	a832      	add	r0, sp, #200	; 0xc8
   d63c8:	f002 f902 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d63cc:	220a      	movs	r2, #10
   d63ce:	9905      	ldr	r1, [sp, #20]
   d63d0:	a816      	add	r0, sp, #88	; 0x58
   d63d2:	f002 f960 	bl	d8696 <_ZN6StringC1Eih>
   d63d6:	a916      	add	r1, sp, #88	; 0x58
   d63d8:	a832      	add	r0, sp, #200	; 0xc8
   d63da:	f002 f986 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d63de:	4601      	mov	r1, r0
   d63e0:	a812      	add	r0, sp, #72	; 0x48
   d63e2:	f002 f934 	bl	d864e <_ZN6StringC1ERKS_>
   d63e6:	a816      	add	r0, sp, #88	; 0x58
   d63e8:	f002 f8ab 	bl	d8542 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d63ec:	a832      	add	r0, sp, #200	; 0xc8
   d63ee:	f002 f8a8 	bl	d8542 <_ZN6StringD1Ev>
      // Serial.printf("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d63f2:	7823      	ldrb	r3, [r4, #0]
   d63f4:	b15b      	cbz	r3, d640e <_Z13runExpressionPc+0x1b6>
   d63f6:	a912      	add	r1, sp, #72	; 0x48
   d63f8:	a832      	add	r0, sp, #200	; 0xc8
   d63fa:	f002 f928 	bl	d864e <_ZN6StringC1ERKS_>
   d63fe:	480f      	ldr	r0, [pc, #60]	; (d643c <_Z13runExpressionPc+0x1e4>)
   d6400:	aa32      	add	r2, sp, #200	; 0xc8
   d6402:	2115      	movs	r1, #21
   d6404:	f7ff fcf2 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6408:	a832      	add	r0, sp, #200	; 0xc8
   d640a:	f002 f89a 	bl	d8542 <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d640e:	a812      	add	r0, sp, #72	; 0x48
   d6410:	f002 f897 	bl	d8542 <_ZN6StringD1Ev>
      // Serial.printf("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d6414:	2400      	movs	r4, #0
  } 
}
   d6416:	4620      	mov	r0, r4
   d6418:	f20d 4dcc 	addw	sp, sp, #1228	; 0x4cc
   d641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6420:	000e35f5 	.word	0x000e35f5
   d6424:	000e35f9 	.word	0x000e35f9
   d6428:	000e35fd 	.word	0x000e35fd
   d642c:	000e3601 	.word	0x000e3601
   d6430:	000e3606 	.word	0x000e3606
   d6434:	2003deb2 	.word	0x2003deb2
   d6438:	000e360b 	.word	0x000e360b
   d643c:	2003e304 	.word	0x2003e304
   d6440:	2003e2d4 	.word	0x2003e2d4
   d6444:	2003e328 	.word	0x2003e328
   d6448:	2003e1d4 	.word	0x2003e1d4
   d644c:	000e358b 	.word	0x000e358b
   d6450:	000e3610 	.word	0x000e3610
   d6454:	3ff00000 	.word	0x3ff00000
   d6458:	000e3616 	.word	0x000e3616
   d645c:	000e362d 	.word	0x000e362d
   d6460:	000e3645 	.word	0x000e3645

000d6464 <_Z11readSensorsv.part.14>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////


void readSensors()
   d6464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6468:	ed2d 8b02 	vpush	{d8}
{
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d646c:	492b      	ldr	r1, [pc, #172]	; (d651c <_Z11readSensorsv.part.14+0xb8>)
   d646e:	482c      	ldr	r0, [pc, #176]	; (d6520 <_Z11readSensorsv.part.14+0xbc>)
    Sensor.getNum(num_concen);

    Serial.println("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d6470:	4d2c      	ldr	r5, [pc, #176]	; (d6524 <_Z11readSensorsv.part.14+0xc0>)
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
   d6472:	4f2d      	ldr	r7, [pc, #180]	; (d6528 <_Z11readSensorsv.part.14+0xc4>)
   d6474:	4c29      	ldr	r4, [pc, #164]	; (d651c <_Z11readSensorsv.part.14+0xb8>)
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////


void readSensors()
   d6476:	b099      	sub	sp, #100	; 0x64
{
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d6478:	f001 fa64 	bl	d7944 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d647c:	492b      	ldr	r1, [pc, #172]	; (d652c <_Z11readSensorsv.part.14+0xc8>)
   d647e:	4828      	ldr	r0, [pc, #160]	; (d6520 <_Z11readSensorsv.part.14+0xbc>)
   d6480:	f001 fa74 	bl	d796c <_ZN5SPS306getNumEPf>

    Serial.println("--Mass Concentration--");
   d6484:	f002 fea8 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6488:	4929      	ldr	r1, [pc, #164]	; (d6530 <_Z11readSensorsv.part.14+0xcc>)
   d648a:	f002 f9cc 	bl	d8826 <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d648e:	2300      	movs	r3, #0
   d6490:	602b      	str	r3, [r5, #0]
   d6492:	462e      	mov	r6, r5
   d6494:	682b      	ldr	r3, [r5, #0]
   d6496:	f8df 808c 	ldr.w	r8, [pc, #140]	; d6524 <_Z11readSensorsv.part.14+0xc0>
   d649a:	2b03      	cmp	r3, #3
   d649c:	dc17      	bgt.n	d64ce <_Z11readSensorsv.part.14+0x6a>
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
   d649e:	f002 fe9b 	bl	d91d8 <_Z16_fetch_usbserialv>
   d64a2:	6833      	ldr	r3, [r6, #0]
   d64a4:	f103 0901 	add.w	r9, r3, #1
   d64a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d64ac:	4680      	mov	r8, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d64ae:	6818      	ldr	r0, [r3, #0]
   d64b0:	f009 fb0e 	bl	dfad0 <__aeabi_f2d>
   d64b4:	e9cd 0100 	strd	r0, r1, [sp]
   d64b8:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
   d64bc:	4a1d      	ldr	r2, [pc, #116]	; (d6534 <_Z11readSensorsv.part.14+0xd0>)
   d64be:	2100      	movs	r1, #0
   d64c0:	4640      	mov	r0, r8
   d64c2:	f002 facd 	bl	d8a60 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    Serial.println("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d64c6:	6833      	ldr	r3, [r6, #0]
   d64c8:	3301      	adds	r3, #1
   d64ca:	6033      	str	r3, [r6, #0]
   d64cc:	e7e2      	b.n	d6494 <_Z11readSensorsv.part.14+0x30>
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
    }
    
    Serial.println("--Number Concentration--");
   d64ce:	f002 fe83 	bl	d91d8 <_Z16_fetch_usbserialv>
   d64d2:	4919      	ldr	r1, [pc, #100]	; (d6538 <_Z11readSensorsv.part.14+0xd4>)
    for(i=0; i<5;i++) {
        Serial.printf("%s: %0.2f\n", pm[i],num_concen[i]);
   d64d4:	f8df 9054 	ldr.w	r9, [pc, #84]	; d652c <_Z11readSensorsv.part.14+0xc8>
    Serial.println("--Mass Concentration--");
    for(i=0; i<4;i++) {
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
    }
    
    Serial.println("--Number Concentration--");
   d64d8:	f002 f9a5 	bl	d8826 <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d64dc:	2300      	movs	r3, #0
   d64de:	f8c8 3000 	str.w	r3, [r8]
   d64e2:	4644      	mov	r4, r8
        Serial.printf("%s: %0.2f\n", pm[i],num_concen[i]);
   d64e4:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6528 <_Z11readSensorsv.part.14+0xc4>
    for(i=0; i<4;i++) {
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
    }
    
    Serial.println("--Number Concentration--");
    for(i=0; i<5;i++) {
   d64e8:	682b      	ldr	r3, [r5, #0]
   d64ea:	2b04      	cmp	r3, #4
   d64ec:	dc26      	bgt.n	d653c <_Z11readSensorsv.part.14+0xd8>
        Serial.printf("%s: %0.2f\n", pm[i],num_concen[i]);
   d64ee:	f002 fe73 	bl	d91d8 <_Z16_fetch_usbserialv>
   d64f2:	6826      	ldr	r6, [r4, #0]
   d64f4:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   d64f8:	4607      	mov	r7, r0
   d64fa:	6818      	ldr	r0, [r3, #0]
   d64fc:	f009 fae8 	bl	dfad0 <__aeabi_f2d>
   d6500:	e9cd 0100 	strd	r0, r1, [sp]
   d6504:	4a0b      	ldr	r2, [pc, #44]	; (d6534 <_Z11readSensorsv.part.14+0xd0>)
   d6506:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   d650a:	2100      	movs	r1, #0
   d650c:	4638      	mov	r0, r7
   d650e:	f002 faa7 	bl	d8a60 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        Serial.printf("%s: %0.2f\n", pm[i+1],mass_concen[i]);
    }
    
    Serial.println("--Number Concentration--");
    for(i=0; i<5;i++) {
   d6512:	6823      	ldr	r3, [r4, #0]
   d6514:	3301      	adds	r3, #1
   d6516:	6023      	str	r3, [r4, #0]
   d6518:	e7e6      	b.n	d64e8 <_Z11readSensorsv.part.14+0x84>
   d651a:	bf00      	nop
   d651c:	2003e1fc 	.word	0x2003e1fc
   d6520:	2003e2d4 	.word	0x2003e2d4
   d6524:	2003e1e4 	.word	0x2003e1e4
   d6528:	2003dad4 	.word	0x2003dad4
   d652c:	2003e2b0 	.word	0x2003e2b0
   d6530:	000e3657 	.word	0x000e3657
   d6534:	000e366e 	.word	0x000e366e
   d6538:	000e3679 	.word	0x000e3679
        Serial.printf("%s: %0.2f\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d653c:	4cbf      	ldr	r4, [pc, #764]	; (d683c <_Z11readSensorsv.part.14+0x3d8>)
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d653e:	4dc0      	ldr	r5, [pc, #768]	; (d6840 <_Z11readSensorsv.part.14+0x3dc>)
    Serial.println("--Number Concentration--");
    for(i=0; i<5;i++) {
        Serial.printf("%s: %0.2f\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d6540:	6860      	ldr	r0, [r4, #4]
   d6542:	f009 fac5 	bl	dfad0 <__aeabi_f2d>
   d6546:	4602      	mov	r2, r0
   d6548:	460b      	mov	r3, r1
   d654a:	a80e      	add	r0, sp, #56	; 0x38
   d654c:	49bd      	ldr	r1, [pc, #756]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d654e:	f002 f909 	bl	d8764 <_ZN6String6formatEPKcz>
   d6552:	a90e      	add	r1, sp, #56	; 0x38
   d6554:	48bc      	ldr	r0, [pc, #752]	; (d6848 <_Z11readSensorsv.part.14+0x3e4>)
   d6556:	f002 f885 	bl	d8664 <_ZN6StringaSEOS_>
   d655a:	a80e      	add	r0, sp, #56	; 0x38
   d655c:	f001 fff1 	bl	d8542 <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d6560:	68a0      	ldr	r0, [r4, #8]
   d6562:	f009 fab5 	bl	dfad0 <__aeabi_f2d>
   d6566:	4602      	mov	r2, r0
   d6568:	460b      	mov	r3, r1
   d656a:	a80e      	add	r0, sp, #56	; 0x38
   d656c:	49b5      	ldr	r1, [pc, #724]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d656e:	f002 f8f9 	bl	d8764 <_ZN6String6formatEPKcz>
   d6572:	a90e      	add	r1, sp, #56	; 0x38
   d6574:	48b5      	ldr	r0, [pc, #724]	; (d684c <_Z11readSensorsv.part.14+0x3e8>)
   d6576:	f002 f875 	bl	d8664 <_ZN6StringaSEOS_>
   d657a:	a80e      	add	r0, sp, #56	; 0x38
   d657c:	f001 ffe1 	bl	d8542 <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d6580:	68e0      	ldr	r0, [r4, #12]
   d6582:	f009 faa5 	bl	dfad0 <__aeabi_f2d>
   d6586:	4602      	mov	r2, r0
   d6588:	460b      	mov	r3, r1
   d658a:	a80e      	add	r0, sp, #56	; 0x38
   d658c:	49ad      	ldr	r1, [pc, #692]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d658e:	f002 f8e9 	bl	d8764 <_ZN6String6formatEPKcz>
   d6592:	a90e      	add	r1, sp, #56	; 0x38
   d6594:	48ae      	ldr	r0, [pc, #696]	; (d6850 <_Z11readSensorsv.part.14+0x3ec>)
   d6596:	f002 f865 	bl	d8664 <_ZN6StringaSEOS_>
   d659a:	a80e      	add	r0, sp, #56	; 0x38
   d659c:	f001 ffd1 	bl	d8542 <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d65a0:	6920      	ldr	r0, [r4, #16]
   d65a2:	f009 fa95 	bl	dfad0 <__aeabi_f2d>
   d65a6:	460b      	mov	r3, r1
   d65a8:	4602      	mov	r2, r0
   d65aa:	49a6      	ldr	r1, [pc, #664]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d65ac:	a80e      	add	r0, sp, #56	; 0x38
   d65ae:	f002 f8d9 	bl	d8764 <_ZN6String6formatEPKcz>
   d65b2:	a90e      	add	r1, sp, #56	; 0x38
   d65b4:	48a7      	ldr	r0, [pc, #668]	; (d6854 <_Z11readSensorsv.part.14+0x3f0>)
   d65b6:	f002 f855 	bl	d8664 <_ZN6StringaSEOS_>
   d65ba:	a80e      	add	r0, sp, #56	; 0x38
   d65bc:	f001 ffc1 	bl	d8542 <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d65c0:	4aa5      	ldr	r2, [pc, #660]	; (d6858 <_Z11readSensorsv.part.14+0x3f4>)
   d65c2:	48a6      	ldr	r0, [pc, #664]	; (d685c <_Z11readSensorsv.part.14+0x3f8>)
   d65c4:	2101      	movs	r1, #1
   d65c6:	f000 fd63 	bl	d7090 <_ZN3ULP7getTempEiPc>
   d65ca:	ee07 0a90 	vmov	s15, r0
   d65ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d65d2:	edc5 7a00 	vstr	s15, [r5]
    
    Serial.print("temp1: ");
   d65d6:	f002 fdff 	bl	d91d8 <_Z16_fetch_usbserialv>
   d65da:	49a1      	ldr	r1, [pc, #644]	; (d6860 <_Z11readSensorsv.part.14+0x3fc>)
   d65dc:	f002 f910 	bl	d8800 <_ZN5Print5printEPKc>
    Serial.print(temp1);
   d65e0:	f002 fdfa 	bl	d91d8 <_Z16_fetch_usbserialv>
   d65e4:	4604      	mov	r4, r0
   d65e6:	6828      	ldr	r0, [r5, #0]
   d65e8:	f009 fa72 	bl	dfad0 <__aeabi_f2d>
   d65ec:	ec41 0b10 	vmov	d0, r0, r1
   d65f0:	2102      	movs	r1, #2
   d65f2:	4620      	mov	r0, r4
   d65f4:	f002 fa26 	bl	d8a44 <_ZN5Print5printEdi>
    Serial.println();
   d65f8:	f002 fdee 	bl	d91d8 <_Z16_fetch_usbserialv>
   d65fc:	f002 f907 	bl	d880e <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    Serial.print("Vgas: ");
   d6600:	f002 fdea 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6604:	4997      	ldr	r1, [pc, #604]	; (d6864 <_Z11readSensorsv.part.14+0x400>)
   d6606:	f002 f8fb 	bl	d8800 <_ZN5Print5printEPKc>
    Serial.print(sensor1.getVgas(1));
   d660a:	f002 fde5 	bl	d91d8 <_Z16_fetch_usbserialv>
   d660e:	2101      	movs	r1, #1
   d6610:	4604      	mov	r4, r0
   d6612:	4892      	ldr	r0, [pc, #584]	; (d685c <_Z11readSensorsv.part.14+0x3f8>)
   d6614:	f000 fdf0 	bl	d71f8 <_ZN3ULP7getVgasEi>
   d6618:	ee10 0a10 	vmov	r0, s0
   d661c:	f009 fa58 	bl	dfad0 <__aeabi_f2d>
   d6620:	ec41 0b10 	vmov	d0, r0, r1
   d6624:	2102      	movs	r1, #2
   d6626:	4620      	mov	r0, r4
   d6628:	f002 fa0c 	bl	d8a44 <_ZN5Print5printEdi>
    Serial.println();
   d662c:	f002 fdd4 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6630:	f002 f8ed 	bl	d880e <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    Serial.print("Conc: ");
   d6634:	f002 fdd0 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6638:	498b      	ldr	r1, [pc, #556]	; (d6868 <_Z11readSensorsv.part.14+0x404>)
    //  Serial.print(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d663a:	4c8c      	ldr	r4, [pc, #560]	; (d686c <_Z11readSensorsv.part.14+0x408>)
    Serial.print("Vgas: ");
    Serial.print(sensor1.getVgas(1));
    Serial.println();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    Serial.print("Conc: ");
   d663c:	f002 f8e0 	bl	d8800 <_ZN5Print5printEPKc>
    //  Serial.print(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d6640:	4a8b      	ldr	r2, [pc, #556]	; (d6870 <_Z11readSensorsv.part.14+0x40c>)
   d6642:	4886      	ldr	r0, [pc, #536]	; (d685c <_Z11readSensorsv.part.14+0x3f8>)
   d6644:	2101      	movs	r1, #1
   d6646:	f000 fd23 	bl	d7090 <_ZN3ULP7getTempEiPc>
   d664a:	ee07 0a90 	vmov	s15, r0
   d664e:	2101      	movs	r1, #1
   d6650:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d6654:	4881      	ldr	r0, [pc, #516]	; (d685c <_Z11readSensorsv.part.14+0x3f8>)
   d6656:	f000 fe0f 	bl	d7278 <_ZN3ULP7getConcEif>
   d665a:	ed84 0a00 	vstr	s0, [r4]
    Serial.println(conc);
   d665e:	f002 fdbb 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6662:	4606      	mov	r6, r0
   d6664:	6820      	ldr	r0, [r4, #0]
   d6666:	f009 fa33 	bl	dfad0 <__aeabi_f2d>
   d666a:	ec41 0b10 	vmov	d0, r0, r1
   d666e:	2102      	movs	r1, #2
   d6670:	4630      	mov	r0, r6
   d6672:	f002 f9ea 	bl	d8a4a <_ZN5Print7printlnEdi>
    Serial.println();
   d6676:	f002 fdaf 	bl	d91d8 <_Z16_fetch_usbserialv>
   d667a:	f002 f8c8 	bl	d880e <_ZN5Print7printlnEv>

    field5 = String::format("%0.1f", conc);
   d667e:	6820      	ldr	r0, [r4, #0]
    CellularSignal sig = Cellular.RSSI();
    float batCharge = fuel.getSoC();
    field7 = String::format("%0.0f", batCharge);
    field8 = String::format("%d", sig.qual);

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d6680:	4c7c      	ldr	r4, [pc, #496]	; (d6874 <_Z11readSensorsv.part.14+0x410>)
   d6682:	4e7d      	ldr	r6, [pc, #500]	; (d6878 <_Z11readSensorsv.part.14+0x414>)
    //  Serial.print(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
    Serial.println(conc);
    Serial.println();

    field5 = String::format("%0.1f", conc);
   d6684:	f009 fa24 	bl	dfad0 <__aeabi_f2d>
   d6688:	4602      	mov	r2, r0
   d668a:	460b      	mov	r3, r1
   d668c:	a80e      	add	r0, sp, #56	; 0x38
   d668e:	496d      	ldr	r1, [pc, #436]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d6690:	f002 f868 	bl	d8764 <_ZN6String6formatEPKcz>
   d6694:	a90e      	add	r1, sp, #56	; 0x38
   d6696:	4879      	ldr	r0, [pc, #484]	; (d687c <_Z11readSensorsv.part.14+0x418>)
   d6698:	f001 ffe4 	bl	d8664 <_ZN6StringaSEOS_>
   d669c:	a80e      	add	r0, sp, #56	; 0x38
   d669e:	f001 ff50 	bl	d8542 <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d66a2:	6828      	ldr	r0, [r5, #0]
   d66a4:	f009 fa14 	bl	dfad0 <__aeabi_f2d>
   d66a8:	4602      	mov	r2, r0
   d66aa:	460b      	mov	r3, r1
   d66ac:	a80e      	add	r0, sp, #56	; 0x38
   d66ae:	4965      	ldr	r1, [pc, #404]	; (d6844 <_Z11readSensorsv.part.14+0x3e0>)
   d66b0:	f002 f858 	bl	d8764 <_ZN6String6formatEPKcz>
   d66b4:	a90e      	add	r1, sp, #56	; 0x38
   d66b6:	4872      	ldr	r0, [pc, #456]	; (d6880 <_Z11readSensorsv.part.14+0x41c>)
   d66b8:	f001 ffd4 	bl	d8664 <_ZN6StringaSEOS_>
   d66bc:	a80e      	add	r0, sp, #56	; 0x38
   d66be:	f001 ff40 	bl	d8542 <_ZN6StringD1Ev>

    /////////

    CellularSignal sig = Cellular.RSSI();
   d66c2:	4970      	ldr	r1, [pc, #448]	; (d6884 <_Z11readSensorsv.part.14+0x420>)
   d66c4:	a80e      	add	r0, sp, #56	; 0x38
   d66c6:	f002 fde1 	bl	d928c <_ZN5spark13CellularClass4RSSIEv>
    float batCharge = fuel.getSoC();
   d66ca:	486f      	ldr	r0, [pc, #444]	; (d6888 <_Z11readSensorsv.part.14+0x424>)
   d66cc:	f002 fc22 	bl	d8f14 <_ZN9FuelGauge6getSoCEv>
    field7 = String::format("%0.0f", batCharge);
   d66d0:	ee10 0a10 	vmov	r0, s0
    field6 = String::format("%0.1f", temp1);

    /////////

    CellularSignal sig = Cellular.RSSI();
    float batCharge = fuel.getSoC();
   d66d4:	eeb0 8a40 	vmov.f32	s16, s0
    field7 = String::format("%0.0f", batCharge);
   d66d8:	f009 f9fa 	bl	dfad0 <__aeabi_f2d>
   d66dc:	460b      	mov	r3, r1
   d66de:	4602      	mov	r2, r0
   d66e0:	496a      	ldr	r1, [pc, #424]	; (d688c <_Z11readSensorsv.part.14+0x428>)
   d66e2:	a80a      	add	r0, sp, #40	; 0x28
   d66e4:	f002 f83e 	bl	d8764 <_ZN6String6formatEPKcz>
   d66e8:	a90a      	add	r1, sp, #40	; 0x28
   d66ea:	4869      	ldr	r0, [pc, #420]	; (d6890 <_Z11readSensorsv.part.14+0x42c>)
   d66ec:	f001 ffba 	bl	d8664 <_ZN6StringaSEOS_>
   d66f0:	a80a      	add	r0, sp, #40	; 0x28
   d66f2:	f001 ff26 	bl	d8542 <_ZN6StringD1Ev>
    field8 = String::format("%d", sig.qual);
   d66f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d66f8:	4966      	ldr	r1, [pc, #408]	; (d6894 <_Z11readSensorsv.part.14+0x430>)
   d66fa:	a80a      	add	r0, sp, #40	; 0x28
   d66fc:	f002 f832 	bl	d8764 <_ZN6String6formatEPKcz>
   d6700:	a90a      	add	r1, sp, #40	; 0x28
   d6702:	4865      	ldr	r0, [pc, #404]	; (d6898 <_Z11readSensorsv.part.14+0x434>)
   d6704:	f001 ffae 	bl	d8664 <_ZN6StringaSEOS_>
   d6708:	a80a      	add	r0, sp, #40	; 0x28
   d670a:	f001 ff1a 	bl	d8542 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d670e:	494e      	ldr	r1, [pc, #312]	; (d6848 <_Z11readSensorsv.part.14+0x3e4>)
   d6710:	a80a      	add	r0, sp, #40	; 0x28
   d6712:	f001 ff9c 	bl	d864e <_ZN6StringC1ERKS_>

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d6716:	4961      	ldr	r1, [pc, #388]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d6718:	a80a      	add	r0, sp, #40	; 0x28
   d671a:	f001 fff2 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d671e:	494b      	ldr	r1, [pc, #300]	; (d684c <_Z11readSensorsv.part.14+0x3e8>)
   d6720:	f001 ffe3 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6724:	495d      	ldr	r1, [pc, #372]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d6726:	f001 ffec 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d672a:	4949      	ldr	r1, [pc, #292]	; (d6850 <_Z11readSensorsv.part.14+0x3ec>)
   d672c:	f001 ffdd 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6730:	495a      	ldr	r1, [pc, #360]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d6732:	f001 ffe6 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6736:	4947      	ldr	r1, [pc, #284]	; (d6854 <_Z11readSensorsv.part.14+0x3f0>)
   d6738:	f001 ffd7 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d673c:	4957      	ldr	r1, [pc, #348]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d673e:	f001 ffe0 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6742:	494e      	ldr	r1, [pc, #312]	; (d687c <_Z11readSensorsv.part.14+0x418>)
   d6744:	f001 ffd1 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6748:	4954      	ldr	r1, [pc, #336]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d674a:	f001 ffda 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d674e:	494c      	ldr	r1, [pc, #304]	; (d6880 <_Z11readSensorsv.part.14+0x41c>)
   d6750:	f001 ffcb 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6754:	4951      	ldr	r1, [pc, #324]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d6756:	f001 ffd4 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d675a:	494d      	ldr	r1, [pc, #308]	; (d6890 <_Z11readSensorsv.part.14+0x42c>)
   d675c:	f001 ffc5 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6760:	494e      	ldr	r1, [pc, #312]	; (d689c <_Z11readSensorsv.part.14+0x438>)
   d6762:	f001 ffce 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6766:	494c      	ldr	r1, [pc, #304]	; (d6898 <_Z11readSensorsv.part.14+0x434>)
   d6768:	f001 ffbf 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d676c:	4601      	mov	r1, r0
   d676e:	4620      	mov	r0, r4
   d6770:	f001 ff5e 	bl	d8630 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6774:	a80a      	add	r0, sp, #40	; 0x28
   d6776:	f001 fee4 	bl	d8542 <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d677a:	4933      	ldr	r1, [pc, #204]	; (d6848 <_Z11readSensorsv.part.14+0x3e4>)
   d677c:	a80a      	add	r0, sp, #40	; 0x28
   d677e:	f001 ff66 	bl	d864e <_ZN6StringC1ERKS_>
   d6782:	aa0a      	add	r2, sp, #40	; 0x28
   d6784:	2101      	movs	r1, #1
   d6786:	4846      	ldr	r0, [pc, #280]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d6788:	f7ff fb30 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d678c:	a80a      	add	r0, sp, #40	; 0x28
   d678e:	f001 fed8 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d6792:	492e      	ldr	r1, [pc, #184]	; (d684c <_Z11readSensorsv.part.14+0x3e8>)
   d6794:	a80a      	add	r0, sp, #40	; 0x28
   d6796:	f001 ff5a 	bl	d864e <_ZN6StringC1ERKS_>
   d679a:	aa0a      	add	r2, sp, #40	; 0x28
   d679c:	2102      	movs	r1, #2
   d679e:	4840      	ldr	r0, [pc, #256]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d67a0:	f7ff fb24 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d67a4:	a80a      	add	r0, sp, #40	; 0x28
   d67a6:	f001 fecc 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d67aa:	4929      	ldr	r1, [pc, #164]	; (d6850 <_Z11readSensorsv.part.14+0x3ec>)
   d67ac:	a80a      	add	r0, sp, #40	; 0x28
   d67ae:	f001 ff4e 	bl	d864e <_ZN6StringC1ERKS_>
   d67b2:	aa0a      	add	r2, sp, #40	; 0x28
   d67b4:	2103      	movs	r1, #3
   d67b6:	483a      	ldr	r0, [pc, #232]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d67b8:	f7ff fb18 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d67bc:	a80a      	add	r0, sp, #40	; 0x28
   d67be:	f001 fec0 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d67c2:	4924      	ldr	r1, [pc, #144]	; (d6854 <_Z11readSensorsv.part.14+0x3f0>)
   d67c4:	a80a      	add	r0, sp, #40	; 0x28
   d67c6:	f001 ff42 	bl	d864e <_ZN6StringC1ERKS_>
   d67ca:	aa0a      	add	r2, sp, #40	; 0x28
   d67cc:	2104      	movs	r1, #4
   d67ce:	4834      	ldr	r0, [pc, #208]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d67d0:	f7ff fb0c 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d67d4:	a80a      	add	r0, sp, #40	; 0x28
   d67d6:	f001 feb4 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d67da:	4928      	ldr	r1, [pc, #160]	; (d687c <_Z11readSensorsv.part.14+0x418>)
   d67dc:	a80a      	add	r0, sp, #40	; 0x28
   d67de:	f001 ff36 	bl	d864e <_ZN6StringC1ERKS_>
   d67e2:	aa0a      	add	r2, sp, #40	; 0x28
   d67e4:	2105      	movs	r1, #5
   d67e6:	482e      	ldr	r0, [pc, #184]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d67e8:	f7ff fb00 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d67ec:	a80a      	add	r0, sp, #40	; 0x28
   d67ee:	f001 fea8 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d67f2:	4923      	ldr	r1, [pc, #140]	; (d6880 <_Z11readSensorsv.part.14+0x41c>)
   d67f4:	a80a      	add	r0, sp, #40	; 0x28
   d67f6:	f001 ff2a 	bl	d864e <_ZN6StringC1ERKS_>
   d67fa:	aa0a      	add	r2, sp, #40	; 0x28
   d67fc:	2106      	movs	r1, #6
   d67fe:	4828      	ldr	r0, [pc, #160]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d6800:	f7ff faf4 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6804:	a80a      	add	r0, sp, #40	; 0x28
   d6806:	f001 fe9c 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d680a:	4921      	ldr	r1, [pc, #132]	; (d6890 <_Z11readSensorsv.part.14+0x42c>)
   d680c:	a80a      	add	r0, sp, #40	; 0x28
   d680e:	f001 ff1e 	bl	d864e <_ZN6StringC1ERKS_>
   d6812:	aa0a      	add	r2, sp, #40	; 0x28
   d6814:	2107      	movs	r1, #7
   d6816:	4822      	ldr	r0, [pc, #136]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d6818:	f7ff fae8 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d681c:	a80a      	add	r0, sp, #40	; 0x28
   d681e:	f001 fe90 	bl	d8542 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d6822:	491d      	ldr	r1, [pc, #116]	; (d6898 <_Z11readSensorsv.part.14+0x434>)
   d6824:	a80a      	add	r0, sp, #40	; 0x28
   d6826:	f001 ff12 	bl	d864e <_ZN6StringC1ERKS_>
   d682a:	aa0a      	add	r2, sp, #40	; 0x28
   d682c:	2108      	movs	r1, #8
   d682e:	481c      	ldr	r0, [pc, #112]	; (d68a0 <_Z11readSensorsv.part.14+0x43c>)
   d6830:	f7ff fadc 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6834:	a80a      	add	r0, sp, #40	; 0x28
   d6836:	f001 fe84 	bl	d8542 <_ZN6StringD1Ev>
   d683a:	e033      	b.n	d68a4 <_Z11readSensorsv.part.14+0x440>
   d683c:	2003e2d4 	.word	0x2003e2d4
   d6840:	2003e328 	.word	0x2003e328
   d6844:	000e3692 	.word	0x000e3692
   d6848:	2003e2c4 	.word	0x2003e2c4
   d684c:	2003dc24 	.word	0x2003dc24
   d6850:	2003dc34 	.word	0x2003dc34
   d6854:	2003e1ec 	.word	0x2003e1ec
   d6858:	000e3698 	.word	0x000e3698
   d685c:	2003e270 	.word	0x2003e270
   d6860:	000e369a 	.word	0x000e369a
   d6864:	000e36a2 	.word	0x000e36a2
   d6868:	000e36a9 	.word	0x000e36a9
   d686c:	2003dc20 	.word	0x2003dc20
   d6870:	000e36b0 	.word	0x000e36b0
   d6874:	2003e1d4 	.word	0x2003e1d4
   d6878:	2003dc1c 	.word	0x2003dc1c
   d687c:	2003dc44 	.word	0x2003dc44
   d6880:	2003e260 	.word	0x2003e260
   d6884:	2003e380 	.word	0x2003e380
   d6888:	2003dc54 	.word	0x2003dc54
   d688c:	000e36b2 	.word	0x000e36b2
   d6890:	2003dc5c 	.word	0x2003dc5c
   d6894:	000e4088 	.word	0x000e4088
   d6898:	2003e248 	.word	0x2003e248
   d689c:	000e36b8 	.word	0x000e36b8
   d68a0:	2003e304 	.word	0x2003e304

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    Serial.println(datastring);
   d68a4:	f002 fc98 	bl	d91d8 <_Z16_fetch_usbserialv>
   d68a8:	6821      	ldr	r1, [r4, #0]
   d68aa:	f001 ffbc 	bl	d8826 <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d68ae:	4b69      	ldr	r3, [pc, #420]	; (d6a54 <_Z11readSensorsv.part.14+0x5f0>)

    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d68b0:	4869      	ldr	r0, [pc, #420]	; (d6a58 <_Z11readSensorsv.part.14+0x5f4>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    Serial.println(datastring);
    sensorValid = true;
   d68b2:	2401      	movs	r4, #1
   d68b4:	701c      	strb	r4, [r3, #0]

    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d68b6:	f7ff fccf 	bl	d6258 <_Z13runExpressionPc>
   d68ba:	4605      	mov	r5, r0
   d68bc:	2800      	cmp	r0, #0
   d68be:	d03f      	beq.n	d6940 <_Z11readSensorsv.part.14+0x4dc>
    {
      currentAlert = true;
      //Buzzer On
      power.digitalWrite(GIO1, false);
   d68c0:	2200      	movs	r2, #0
   d68c2:	210b      	movs	r1, #11
   d68c4:	4865      	ldr	r0, [pc, #404]	; (d6a5c <_Z11readSensorsv.part.14+0x5f8>)
    sensorValid = true;

    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d68c6:	7034      	strb	r4, [r6, #0]
      //Buzzer On
      power.digitalWrite(GIO1, false);
   d68c8:	f000 fe18 	bl	d74fc <_ZN12IoTNodePower12digitalWriteE7gioNameb>
      Blynk.virtualWrite(V0,1);
   d68cc:	4622      	mov	r2, r4
   d68ce:	2100      	movs	r1, #0
   d68d0:	4863      	ldr	r0, [pc, #396]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d68d2:	f7ff fa51 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,2);
   d68d6:	2202      	movs	r2, #2
   d68d8:	2109      	movs	r1, #9
   d68da:	4861      	ldr	r0, [pc, #388]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d68dc:	f7ff fa4c 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d68e0:	4960      	ldr	r1, [pc, #384]	; (d6a64 <_Z11readSensorsv.part.14+0x600>)
   d68e2:	a80a      	add	r0, sp, #40	; 0x28
   d68e4:	f001 fe74 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
      String statusMessage = "ALERT! "+Time.format(Time.now(),"%D %R")+" "+field7+"%";
   d68e8:	f002 fa07 	bl	d8cfa <_ZN9TimeClass3nowEv>
   d68ec:	4b5e      	ldr	r3, [pc, #376]	; (d6a68 <_Z11readSensorsv.part.14+0x604>)
   d68ee:	495f      	ldr	r1, [pc, #380]	; (d6a6c <_Z11readSensorsv.part.14+0x608>)
   d68f0:	4602      	mov	r2, r0
   d68f2:	a806      	add	r0, sp, #24
   d68f4:	f002 f9ae 	bl	d8c54 <_ZN9TimeClass6formatElPKc>
   d68f8:	a906      	add	r1, sp, #24
   d68fa:	a80a      	add	r0, sp, #40	; 0x28
   d68fc:	f001 fef5 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6900:	495b      	ldr	r1, [pc, #364]	; (d6a70 <_Z11readSensorsv.part.14+0x60c>)
   d6902:	f001 fefe 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6906:	495b      	ldr	r1, [pc, #364]	; (d6a74 <_Z11readSensorsv.part.14+0x610>)
   d6908:	f001 feef 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d690c:	495a      	ldr	r1, [pc, #360]	; (d6a78 <_Z11readSensorsv.part.14+0x614>)
   d690e:	f001 fef8 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6912:	4601      	mov	r1, r0
   d6914:	a802      	add	r0, sp, #8
   d6916:	f001 fe9a 	bl	d864e <_ZN6StringC1ERKS_>
   d691a:	a806      	add	r0, sp, #24
   d691c:	f001 fe11 	bl	d8542 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6920:	a80a      	add	r0, sp, #40	; 0x28
   d6922:	f001 fe0e 	bl	d8542 <_ZN6StringD1Ev>
      Blynk.virtualWrite(V30,statusMessage);
   d6926:	a902      	add	r1, sp, #8
   d6928:	a80a      	add	r0, sp, #40	; 0x28
   d692a:	f001 fe90 	bl	d864e <_ZN6StringC1ERKS_>
   d692e:	aa0a      	add	r2, sp, #40	; 0x28
   d6930:	211e      	movs	r1, #30
   d6932:	484b      	ldr	r0, [pc, #300]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d6934:	f7ff fa5a 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6938:	a80a      	add	r0, sp, #40	; 0x28
   d693a:	f001 fe02 	bl	d8542 <_ZN6StringD1Ev>
   d693e:	e03e      	b.n	d69be <_Z11readSensorsv.part.14+0x55a>
    }
    else
    {
      //Buzzer Off
      power.digitalWrite(GIO1, true);
   d6940:	4622      	mov	r2, r4
   d6942:	210b      	movs	r1, #11
   d6944:	4845      	ldr	r0, [pc, #276]	; (d6a5c <_Z11readSensorsv.part.14+0x5f8>)
   d6946:	f000 fdd9 	bl	d74fc <_ZN12IoTNodePower12digitalWriteE7gioNameb>
      Blynk.virtualWrite(V0,0);
   d694a:	462a      	mov	r2, r5
   d694c:	4629      	mov	r1, r5
   d694e:	4844      	ldr	r0, [pc, #272]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d6950:	f7ff fa12 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,1);
   d6954:	4622      	mov	r2, r4
   d6956:	2109      	movs	r1, #9
   d6958:	4841      	ldr	r0, [pc, #260]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d695a:	f7ff fa0d 	bl	d5d78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d695e:	4947      	ldr	r1, [pc, #284]	; (d6a7c <_Z11readSensorsv.part.14+0x618>)
   d6960:	a80a      	add	r0, sp, #40	; 0x28
   d6962:	f001 fe35 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
      String statusMessage = "OK "+Time.format(Time.now(),"%D %R")+" "+field7+"%";
   d6966:	f002 f9c8 	bl	d8cfa <_ZN9TimeClass3nowEv>
   d696a:	4b3f      	ldr	r3, [pc, #252]	; (d6a68 <_Z11readSensorsv.part.14+0x604>)
   d696c:	493f      	ldr	r1, [pc, #252]	; (d6a6c <_Z11readSensorsv.part.14+0x608>)
   d696e:	4602      	mov	r2, r0
   d6970:	a806      	add	r0, sp, #24
   d6972:	f002 f96f 	bl	d8c54 <_ZN9TimeClass6formatElPKc>
   d6976:	a906      	add	r1, sp, #24
   d6978:	a80a      	add	r0, sp, #40	; 0x28
   d697a:	f001 feb6 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d697e:	493c      	ldr	r1, [pc, #240]	; (d6a70 <_Z11readSensorsv.part.14+0x60c>)
   d6980:	f001 febf 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6984:	493b      	ldr	r1, [pc, #236]	; (d6a74 <_Z11readSensorsv.part.14+0x610>)
   d6986:	f001 feb0 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d698a:	493b      	ldr	r1, [pc, #236]	; (d6a78 <_Z11readSensorsv.part.14+0x614>)
   d698c:	f001 feb9 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6990:	4601      	mov	r1, r0
   d6992:	a802      	add	r0, sp, #8
   d6994:	f001 fe5b 	bl	d864e <_ZN6StringC1ERKS_>
   d6998:	a806      	add	r0, sp, #24
   d699a:	f001 fdd2 	bl	d8542 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d699e:	a80a      	add	r0, sp, #40	; 0x28
   d69a0:	f001 fdcf 	bl	d8542 <_ZN6StringD1Ev>
      Blynk.virtualWrite(V30,statusMessage);
   d69a4:	a902      	add	r1, sp, #8
   d69a6:	a80a      	add	r0, sp, #40	; 0x28
   d69a8:	f001 fe51 	bl	d864e <_ZN6StringC1ERKS_>
   d69ac:	aa0a      	add	r2, sp, #40	; 0x28
   d69ae:	211e      	movs	r1, #30
   d69b0:	482b      	ldr	r0, [pc, #172]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d69b2:	f7ff fa1b 	bl	d5dec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d69b6:	a80a      	add	r0, sp, #40	; 0x28
   d69b8:	f001 fdc3 	bl	d8542 <_ZN6StringD1Ev>
      currentAlert = false;
   d69bc:	7035      	strb	r5, [r6, #0]
    {
      //Buzzer Off
      power.digitalWrite(GIO1, true);
      Blynk.virtualWrite(V0,0);
      Blynk.virtualWrite(V9,1);
      String statusMessage = "OK "+Time.format(Time.now(),"%D %R")+" "+field7+"%";
   d69be:	a802      	add	r0, sp, #8
   d69c0:	f001 fdbf 	bl	d8542 <_ZN6StringD1Ev>
      Blynk.virtualWrite(V30,statusMessage);
      currentAlert = false;
    }
    
    if (alertChanged())
   d69c4:	f7fe fdc6 	bl	d5554 <_Z12alertChangedv>
   d69c8:	b150      	cbz	r0, d69e0 <_Z11readSensorsv.part.14+0x57c>
    {
      if (currentAlert)
   d69ca:	7833      	ldrb	r3, [r6, #0]
   d69cc:	b113      	cbz	r3, d69d4 <_Z11readSensorsv.part.14+0x570>
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm", "{DEVICE_NAME} has alarmed!");
   d69ce:	4b2c      	ldr	r3, [pc, #176]	; (d6a80 <_Z11readSensorsv.part.14+0x61c>)
   d69d0:	4a2c      	ldr	r2, [pc, #176]	; (d6a84 <_Z11readSensorsv.part.14+0x620>)
   d69d2:	e001      	b.n	d69d8 <_Z11readSensorsv.part.14+0x574>
      }
      else
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm ended", "{DEVICE_NAME} alarm ended.");
   d69d4:	4b2c      	ldr	r3, [pc, #176]	; (d6a88 <_Z11readSensorsv.part.14+0x624>)
   d69d6:	4a2d      	ldr	r2, [pc, #180]	; (d6a8c <_Z11readSensorsv.part.14+0x628>)
   d69d8:	492d      	ldr	r1, [pc, #180]	; (d6a90 <_Z11readSensorsv.part.14+0x62c>)
   d69da:	4821      	ldr	r0, [pc, #132]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d69dc:	f7ff fa36 	bl	d5e4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA28_cA27_cEEvPKcRKT_RKT0_>
      }
      
    }

    if (batCharge<state.batThreshold)
   d69e0:	4b2c      	ldr	r3, [pc, #176]	; (d6a94 <_Z11readSensorsv.part.14+0x630>)
   d69e2:	4c2d      	ldr	r4, [pc, #180]	; (d6a98 <_Z11readSensorsv.part.14+0x634>)
   d69e4:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
   d69e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d69ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d69f0:	bf4c      	ite	mi
   d69f2:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d69f4:	2300      	movpl	r3, #0
   d69f6:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d69f8:	f7fe fdc0 	bl	d557c <_Z15batAlertChangedv>
   d69fc:	b308      	cbz	r0, d6a42 <_Z11readSensorsv.part.14+0x5de>
    {
      if (batCurrentAlert)
   d69fe:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d6a00:	4926      	ldr	r1, [pc, #152]	; (d6a9c <_Z11readSensorsv.part.14+0x638>)
   d6a02:	a80a      	add	r0, sp, #40	; 0x28
   d6a04:	b15b      	cbz	r3, d6a1e <_Z11readSensorsv.part.14+0x5ba>
   d6a06:	f001 fde3 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm", "{DEVICE_NAME} battery is "+field7+"%!");
   d6a0a:	491a      	ldr	r1, [pc, #104]	; (d6a74 <_Z11readSensorsv.part.14+0x610>)
   d6a0c:	a80a      	add	r0, sp, #40	; 0x28
   d6a0e:	f001 fe6c 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6a12:	4923      	ldr	r1, [pc, #140]	; (d6aa0 <_Z11readSensorsv.part.14+0x63c>)
   d6a14:	f001 fe75 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6a18:	4a22      	ldr	r2, [pc, #136]	; (d6aa4 <_Z11readSensorsv.part.14+0x640>)
   d6a1a:	4603      	mov	r3, r0
   d6a1c:	e00a      	b.n	d6a34 <_Z11readSensorsv.part.14+0x5d0>
   d6a1e:	f001 fdd7 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm ended", "{DEVICE_NAME} battery is "+field7+"%.");
   d6a22:	4914      	ldr	r1, [pc, #80]	; (d6a74 <_Z11readSensorsv.part.14+0x610>)
   d6a24:	a80a      	add	r0, sp, #40	; 0x28
   d6a26:	f001 fe60 	bl	d86ea <_ZplRK15StringSumHelperRK6String>
   d6a2a:	491f      	ldr	r1, [pc, #124]	; (d6aa8 <_Z11readSensorsv.part.14+0x644>)
   d6a2c:	f001 fe69 	bl	d8702 <_ZplRK15StringSumHelperPKc>
   d6a30:	4a1e      	ldr	r2, [pc, #120]	; (d6aac <_Z11readSensorsv.part.14+0x648>)
   d6a32:	4603      	mov	r3, r0
   d6a34:	480a      	ldr	r0, [pc, #40]	; (d6a60 <_Z11readSensorsv.part.14+0x5fc>)
   d6a36:	491e      	ldr	r1, [pc, #120]	; (d6ab0 <_Z11readSensorsv.part.14+0x64c>)
   d6a38:	f7ff fa2e 	bl	d5e98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6a3c:	a80a      	add	r0, sp, #40	; 0x28
   d6a3e:	f001 fd80 	bl	d8542 <_ZN6StringD1Ev>
      }
      
    }


    readingCount++;
   d6a42:	4a1c      	ldr	r2, [pc, #112]	; (d6ab4 <_Z11readSensorsv.part.14+0x650>)
   d6a44:	6813      	ldr	r3, [r2, #0]
   d6a46:	3301      	adds	r3, #1
   d6a48:	6013      	str	r3, [r2, #0]
  }
  else { Serial.println("NA"); }

}
   d6a4a:	b019      	add	sp, #100	; 0x64
   d6a4c:	ecbd 8b02 	vpop	{d8}
   d6a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6a54:	2003e25e 	.word	0x2003e25e
   d6a58:	2003dec4 	.word	0x2003dec4
   d6a5c:	2003e1cc 	.word	0x2003e1cc
   d6a60:	2003e304 	.word	0x2003e304
   d6a64:	000e36ba 	.word	0x000e36ba
   d6a68:	000e36c2 	.word	0x000e36c2
   d6a6c:	2003e344 	.word	0x2003e344
   d6a70:	000e36c0 	.word	0x000e36c0
   d6a74:	2003dc5c 	.word	0x2003dc5c
   d6a78:	000e36c8 	.word	0x000e36c8
   d6a7c:	000e36ca 	.word	0x000e36ca
   d6a80:	000e36ce 	.word	0x000e36ce
   d6a84:	000e36e9 	.word	0x000e36e9
   d6a88:	000e36ff 	.word	0x000e36ff
   d6a8c:	000e371a 	.word	0x000e371a
   d6a90:	2003dfc4 	.word	0x2003dfc4
   d6a94:	2003deb4 	.word	0x2003deb4
   d6a98:	2003e1e8 	.word	0x2003e1e8
   d6a9c:	000e3736 	.word	0x000e3736
   d6aa0:	000e3750 	.word	0x000e3750
   d6aa4:	000e3753 	.word	0x000e3753
   d6aa8:	000e3775 	.word	0x000e3775
   d6aac:	000e3778 	.word	0x000e3778
   d6ab0:	2003e0c4 	.word	0x2003e0c4
   d6ab4:	2003e1d0 	.word	0x2003e1d0

000d6ab8 <_Z11readSensorsv>:

///////////////////////


void readSensors()
{
   d6ab8:	b508      	push	{r3, lr}
  if (Sensor.dataAvailable()) { 
   d6aba:	4807      	ldr	r0, [pc, #28]	; (d6ad8 <_Z11readSensorsv+0x20>)
   d6abc:	f000 fe29 	bl	d7712 <_ZN5SPS3013dataAvailableEv>
   d6ac0:	b118      	cbz	r0, d6aca <_Z11readSensorsv+0x12>

    readingCount++;
  }
  else { Serial.println("NA"); }

}
   d6ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6ac6:	f7ff bccd 	b.w	d6464 <_Z11readSensorsv.part.14>
    }


    readingCount++;
  }
  else { Serial.println("NA"); }
   d6aca:	f002 fb85 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6ace:	4903      	ldr	r1, [pc, #12]	; (d6adc <_Z11readSensorsv+0x24>)

}
   d6ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }


    readingCount++;
  }
  else { Serial.println("NA"); }
   d6ad4:	f001 bea7 	b.w	d8826 <_ZN5Print7printlnEPKc>
   d6ad8:	2003e2d4 	.word	0x2003e2d4
   d6adc:	000e37a0 	.word	0x000e37a0

000d6ae0 <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d6ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d6ae2:	6809      	ldr	r1, [r1, #0]
   d6ae4:	4668      	mov	r0, sp
   d6ae6:	f001 fd73 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d6aea:	4668      	mov	r0, sp
   d6aec:	f001 fe2d 	bl	d874a <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d6af0:	9900      	ldr	r1, [sp, #0]
   d6af2:	4808      	ldr	r0, [pc, #32]	; (d6b14 <BlynkWidgetWrite20+0x34>)
   d6af4:	f009 fd20 	bl	e0538 <strcpy>
  saveState();
   d6af8:	f7fe fc8a 	bl	d5410 <_Z9saveStatev>
  if (sensorValid)
   d6afc:	4b06      	ldr	r3, [pc, #24]	; (d6b18 <BlynkWidgetWrite20+0x38>)
   d6afe:	781b      	ldrb	r3, [r3, #0]
   d6b00:	b113      	cbz	r3, d6b08 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d6b02:	4804      	ldr	r0, [pc, #16]	; (d6b14 <BlynkWidgetWrite20+0x34>)
   d6b04:	f7ff fba8 	bl	d6258 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d6b08:	4668      	mov	r0, sp
   d6b0a:	f001 fd1a 	bl	d8542 <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d6b0e:	b005      	add	sp, #20
   d6b10:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b14:	2003dec4 	.word	0x2003dec4
   d6b18:	2003e25e 	.word	0x2003e25e

000d6b1c <setup>:
    return true;
  }
}

void setup()
{
   d6b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6b1e:	48a1      	ldr	r0, [pc, #644]	; (d6da4 <setup+0x288>)
  delay(3000);
  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d6b20:	4ca1      	ldr	r4, [pc, #644]	; (d6da8 <setup+0x28c>)
   d6b22:	6840      	ldr	r0, [r0, #4]
   d6b24:	2300      	movs	r3, #0
   d6b26:	461a      	mov	r2, r3
   d6b28:	4619      	mov	r1, r3
   d6b2a:	f001 fb89 	bl	d8240 <network_on>

void setup()
{
  Cellular.on();
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d6b2e:	2103      	movs	r1, #3
   d6b30:	2008      	movs	r0, #8
   d6b32:	f003 f943 	bl	d9dbc <pinMode>
  Serial.begin(9600);
   d6b36:	f002 fb4f 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6b3a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6b3e:	f002 fb3f 	bl	d91c0 <_ZN9USBSerial5beginEl>
  delay(300);
   d6b42:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6b46:	f002 f8e9 	bl	d8d1c <delay>
  Wire.begin();
   d6b4a:	f003 f9d3 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d6b4e:	f002 fcb9 	bl	d94c4 <_ZN7TwoWire5beginEv>

  fram.begin(); 
   d6b52:	4896      	ldr	r0, [pc, #600]	; (d6dac <setup+0x290>)
   d6b54:	f001 f87a 	bl	d7c4c <_ZN10MB85RC256V5beginEv>

  power.begin();
   d6b58:	4895      	ldr	r0, [pc, #596]	; (d6db0 <setup+0x294>)
   d6b5a:	f000 fc19 	bl	d7390 <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,false);
   d6b5e:	2200      	movs	r2, #0
   d6b60:	2102      	movs	r1, #2
   d6b62:	4893      	ldr	r0, [pc, #588]	; (d6db0 <setup+0x294>)
   d6b64:	f000 fcbe 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d6b68:	2200      	movs	r2, #0
   d6b6a:	2103      	movs	r1, #3
   d6b6c:	4890      	ldr	r0, [pc, #576]	; (d6db0 <setup+0x294>)
   d6b6e:	f000 fcb9 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  delay(100);
   d6b72:	2064      	movs	r0, #100	; 0x64
   d6b74:	f002 f8d2 	bl	d8d1c <delay>
  power.setPowerON(EXT3V3,true);
   d6b78:	2201      	movs	r2, #1
   d6b7a:	2102      	movs	r1, #2
   d6b7c:	488c      	ldr	r0, [pc, #560]	; (d6db0 <setup+0x294>)
   d6b7e:	f000 fcb1 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true); 
   d6b82:	2201      	movs	r2, #1
   d6b84:	2103      	movs	r1, #3
   d6b86:	488a      	ldr	r0, [pc, #552]	; (d6db0 <setup+0x294>)
   d6b88:	f000 fcac 	bl	d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>

  // Buzzer
  power.digitalWrite(GIO1, true);
   d6b8c:	2201      	movs	r2, #1
   d6b8e:	210b      	movs	r1, #11
   d6b90:	4887      	ldr	r0, [pc, #540]	; (d6db0 <setup+0x294>)
   d6b92:	f000 fcb3 	bl	d74fc <_ZN12IoTNodePower12digitalWriteE7gioNameb>
  power.setPullUp(GIO1, false);
   d6b96:	2200      	movs	r2, #0
   d6b98:	210b      	movs	r1, #11
   d6b9a:	4885      	ldr	r0, [pc, #532]	; (d6db0 <setup+0x294>)
   d6b9c:	f000 fca8 	bl	d74f0 <_ZN12IoTNodePower9setPullUpE7gioNameb>


  delay(3000);
   d6ba0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d6ba4:	f002 f8ba 	bl	d8d1c <delay>
  // Load state
  loadState();
   d6ba8:	f7fe fc3e 	bl	d5428 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d6bac:	4b81      	ldr	r3, [pc, #516]	; (d6db4 <setup+0x298>)
   d6bae:	6822      	ldr	r2, [r4, #0]
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	429a      	cmp	r2, r3
   d6bb4:	d026      	beq.n	d6c04 <setup+0xe8>
  {
    // Then this is the first time running so set defaults
    state.firstRunCheck = firstRunValue;
   d6bb6:	6023      	str	r3, [r4, #0]
    state.numberOfReadings = 24;
   d6bb8:	2318      	movs	r3, #24
   d6bba:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d6bbc:	2305      	movs	r3, #5
   d6bbe:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d6bc0:	497d      	ldr	r1, [pc, #500]	; (d6db8 <setup+0x29c>)
  {
    // Then this is the first time running so set defaults
    state.firstRunCheck = firstRunValue;
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d6bc2:	4b7e      	ldr	r3, [pc, #504]	; (d6dbc <setup+0x2a0>)
   d6bc4:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d6bc6:	f104 0010 	add.w	r0, r4, #16
   d6bca:	f009 fcb5 	bl	e0538 <strcpy>
    strcpy(state.email,"robert@sentientthings.com");
   d6bce:	497c      	ldr	r1, [pc, #496]	; (d6dc0 <setup+0x2a4>)
   d6bd0:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6bd4:	f009 fcb0 	bl	e0538 <strcpy>
    strcpy(state.batEmail,"robert@sentientthings.com");
   d6bd8:	4979      	ldr	r1, [pc, #484]	; (d6dc0 <setup+0x2a4>)
   d6bda:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d6bde:	f009 fcab 	bl	e0538 <strcpy>
    state.batThreshold = 10.0;
   d6be2:	4b78      	ldr	r3, [pc, #480]	; (d6dc4 <setup+0x2a8>)
   d6be4:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
    state.lastAlert=false;
   d6be8:	2300      	movs	r3, #0
   d6bea:	f884 3314 	strb.w	r3, [r4, #788]	; 0x314
    state.batLastAlert=false;
   d6bee:	f884 3315 	strb.w	r3, [r4, #789]	; 0x315
    firstRun = true;
   d6bf2:	4b75      	ldr	r3, [pc, #468]	; (d6dc8 <setup+0x2ac>)
   d6bf4:	2201      	movs	r2, #1
   d6bf6:	701a      	strb	r2, [r3, #0]
    // Save state
    saveState();
   d6bf8:	f7fe fc0a 	bl	d5410 <_Z9saveStatev>
    Serial.println("First run.");
   d6bfc:	f002 faec 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c00:	4972      	ldr	r1, [pc, #456]	; (d6dcc <setup+0x2b0>)
   d6c02:	e002      	b.n	d6c0a <setup+0xee>
  }
  else
  {
    Serial.println("Not first run.");
   d6c04:	f002 fae8 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c08:	4971      	ldr	r1, [pc, #452]	; (d6dd0 <setup+0x2b4>)
   d6c0a:	f001 fe0c 	bl	d8826 <_ZN5Print7printlnEPKc>
  }



/////////////
  Serial.println();
   d6c0e:	f002 fae3 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c12:	f001 fdfc 	bl	d880e <_ZN5Print7printlnEv>
  Serial.println("Setting Up");
   d6c16:	f002 fadf 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c1a:	496e      	ldr	r1, [pc, #440]	; (d6dd4 <setup+0x2b8>)
   d6c1c:	f001 fe03 	bl	d8826 <_ZN5Print7printlnEPKc>

  Serial.print("Vsup for all sensors = ");
   d6c20:	f002 fada 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c24:	496c      	ldr	r1, [pc, #432]	; (d6dd8 <setup+0x2bc>)
   d6c26:	f001 fdeb 	bl	d8800 <_ZN5Print5printEPKc>
  Serial.println(ULP::_Vsup);
   d6c2a:	f002 fad5 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c2e:	4b6b      	ldr	r3, [pc, #428]	; (d6ddc <setup+0x2c0>)
   d6c30:	4605      	mov	r5, r0
   d6c32:	6818      	ldr	r0, [r3, #0]
   d6c34:	f008 ff4c 	bl	dfad0 <__aeabi_f2d>
   d6c38:	ec41 0b10 	vmov	d0, r0, r1
   d6c3c:	2102      	movs	r1, #2
   d6c3e:	4628      	mov	r0, r5
   d6c40:	f001 ff03 	bl	d8a4a <_ZN5Print7printlnEdi>
  Serial.print("Vcc for all sensors = ");
   d6c44:	f002 fac8 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c48:	4965      	ldr	r1, [pc, #404]	; (d6de0 <setup+0x2c4>)
   d6c4a:	f001 fdd9 	bl	d8800 <_ZN5Print5printEPKc>
  Serial.println(ULP::_Vcc);
   d6c4e:	f002 fac3 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c52:	4b64      	ldr	r3, [pc, #400]	; (d6de4 <setup+0x2c8>)
   d6c54:	4605      	mov	r5, r0
   d6c56:	6818      	ldr	r0, [r3, #0]
   d6c58:	f008 ff3a 	bl	dfad0 <__aeabi_f2d>
   d6c5c:	ec41 0b10 	vmov	d0, r0, r1
   d6c60:	2102      	movs	r1, #2
   d6c62:	4628      	mov	r0, r5
   d6c64:	f001 fef1 	bl	d8a4a <_ZN5Print7printlnEdi>
  Serial.print("Vref for sensor 1 = ");
   d6c68:	f002 fab6 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c6c:	495e      	ldr	r1, [pc, #376]	; (d6de8 <setup+0x2cc>)
  Serial.println(sensor1._Vref);
   d6c6e:	4d5f      	ldr	r5, [pc, #380]	; (d6dec <setup+0x2d0>)

  Serial.print("Vsup for all sensors = ");
  Serial.println(ULP::_Vsup);
  Serial.print("Vcc for all sensors = ");
  Serial.println(ULP::_Vcc);
  Serial.print("Vref for sensor 1 = ");
   d6c70:	f001 fdc6 	bl	d8800 <_ZN5Print5printEPKc>
  Serial.println(sensor1._Vref);
   d6c74:	f002 fab0 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c78:	4606      	mov	r6, r0
   d6c7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d6c7c:	f008 ff28 	bl	dfad0 <__aeabi_f2d>
   d6c80:	ec41 0b10 	vmov	d0, r0, r1
   d6c84:	2102      	movs	r1, #2
   d6c86:	4630      	mov	r0, r6
   d6c88:	f001 fedf 	bl	d8a4a <_ZN5Print7printlnEdi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  Serial.println(sensor1._Voff = state.zeroOff);
   d6c8c:	f002 faa4 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6c90:	4606      	mov	r6, r0
   d6c92:	68e0      	ldr	r0, [r4, #12]
   d6c94:	6268      	str	r0, [r5, #36]	; 0x24
   d6c96:	f008 ff1b 	bl	dfad0 <__aeabi_f2d>
   d6c9a:	ec41 0b10 	vmov	d0, r0, r1
   d6c9e:	2102      	movs	r1, #2
   d6ca0:	4630      	mov	r0, r6
   d6ca2:	f001 fed2 	bl	d8a4a <_ZN5Print7printlnEdi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   Serial.print("Vzero = ");
  //   Serial.println(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  Serial.print("Tzero = ");
   d6ca6:	f002 fa97 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6caa:	4951      	ldr	r1, [pc, #324]	; (d6df0 <setup+0x2d4>)
   d6cac:	f001 fda8 	bl	d8800 <_ZN5Print5printEPKc>
  Serial.println(sensor1._Tz);
   d6cb0:	f002 fa92 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6cb4:	4606      	mov	r6, r0
   d6cb6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d6cb8:	f008 ff0a 	bl	dfad0 <__aeabi_f2d>
   d6cbc:	ec41 0b10 	vmov	d0, r0, r1
   d6cc0:	2102      	movs	r1, #2
   d6cc2:	4630      	mov	r0, r6
   d6cc4:	f001 fec1 	bl	d8a4a <_ZN5Print7printlnEdi>
  //Must have previously zeroed in clean air, returns new span factor.

  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  Serial.println("Finished Setting Up");
   d6cc8:	f002 fa86 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6ccc:	4949      	ldr	r1, [pc, #292]	; (d6df4 <setup+0x2d8>)
   d6cce:	f001 fdaa 	bl	d8826 <_ZN5Print7printlnEPKc>
  Serial.println("T1, mV1, C1");
   d6cd2:	f002 fa81 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6cd6:	4948      	ldr	r1, [pc, #288]	; (d6df8 <setup+0x2dc>)
   d6cd8:	f001 fda5 	bl	d8826 <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d6cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6ce0:	f002 f81c 	bl	d8d1c <delay>
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d6ce4:	f003 f906 	bl	d9ef4 <_Z19__fetch_global_Wirev>
  
  if( !Sensor.begin() ) {
   d6ce8:	4601      	mov	r1, r0
   d6cea:	4844      	ldr	r0, [pc, #272]	; (d6dfc <setup+0x2e0>)
   d6cec:	f000 fea4 	bl	d7a38 <_ZN5SPS305beginER7TwoWire>
   d6cf0:	b950      	cbnz	r0, d6d08 <setup+0x1ec>
      Serial.println("SENSOR NOT DETECTED");
   d6cf2:	f002 fa71 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6cf6:	4942      	ldr	r1, [pc, #264]	; (d6e00 <setup+0x2e4>)
   d6cf8:	f001 fd95 	bl	d8826 <_ZN5Print7printlnEPKc>
      delay(2000);
   d6cfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6d00:	f002 f80c 	bl	d8d1c <delay>
      deepSleep();
   d6d04:	f7fe fb9c 	bl	d5440 <_Z9deepSleepv>
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d6d08:	4d3e      	ldr	r5, [pc, #248]	; (d6e04 <setup+0x2e8>)
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d6d0a:	f001 fad1 	bl	d82b0 <spark_cloud_flag_connect>
   d6d0e:	4b3e      	ldr	r3, [pc, #248]	; (d6e08 <setup+0x2ec>)
   d6d10:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d6d12:	f000 ff69 	bl	d7be8 <_Z11BlynkMillisv>
   d6d16:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d6d1a:	3808      	subs	r0, #8
   d6d1c:	6128      	str	r0, [r5, #16]
   d6d1e:	60e8      	str	r0, [r5, #12]
   d6d20:	6168      	str	r0, [r5, #20]
    void config(const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d6d22:	6828      	ldr	r0, [r5, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d6d24:	4b39      	ldr	r3, [pc, #228]	; (d6e0c <setup+0x2f0>)
   d6d26:	6343      	str	r3, [r0, #52]	; 0x34
        port = p;
   d6d28:	2350      	movs	r3, #80	; 0x50
   d6d2a:	8703      	strh	r3, [r0, #56]	; 0x38
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d6d2c:	f002 fead 	bl	d9a8a <_ZN9TCPClient4stopEv>

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d6d30:	2300      	movs	r3, #0
   d6d32:	776b      	strb	r3, [r5, #29]
        millis_time_t started = BlynkMillis();
   d6d34:	f000 ff58 	bl	d7be8 <_Z11BlynkMillisv>
        while ((state != CONNECTED) &&
   d6d38:	f242 3727 	movw	r7, #8999	; 0x2327
    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
   d6d3c:	4606      	mov	r6, r0
        while ((state != CONNECTED) &&
   d6d3e:	7f6b      	ldrb	r3, [r5, #29]
   d6d40:	2b01      	cmp	r3, #1
   d6d42:	d009      	beq.n	d6d58 <setup+0x23c>
               (BlynkMillis() - started < timeout))
   d6d44:	f000 ff50 	bl	d7be8 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d6d48:	1b80      	subs	r0, r0, r6
   d6d4a:	42b8      	cmp	r0, r7
   d6d4c:	d804      	bhi.n	d6d58 <setup+0x23c>
               (BlynkMillis() - started < timeout))
        {
            run();
   d6d4e:	2100      	movs	r1, #0
   d6d50:	482c      	ldr	r0, [pc, #176]	; (d6e04 <setup+0x2e8>)
   d6d52:	f7fe fe9b 	bl	d5a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d6d56:	e7f2      	b.n	d6d3e <setup+0x222>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6d58:	f001 f88e 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  Blynk.config(auth, "zeptosense.blynk.cc");
  Blynk.connect();
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d6d5c:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d6d60:	4605      	mov	r5, r0
   d6d62:	4826      	ldr	r0, [pc, #152]	; (d6dfc <setup+0x2e0>)
   d6d64:	f000 fcd5 	bl	d7712 <_ZN5SPS3013dataAvailableEv>
   d6d68:	b940      	cbnz	r0, d6d7c <setup+0x260>
   d6d6a:	f001 f885 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
   d6d6e:	1b40      	subs	r0, r0, r5
   d6d70:	42b0      	cmp	r0, r6
   d6d72:	d803      	bhi.n	d6d7c <setup+0x260>
  {
    delay(100);
   d6d74:	2064      	movs	r0, #100	; 0x64
   d6d76:	f001 ffd1 	bl	d8d1c <delay>
  Blynk.config(auth, "zeptosense.blynk.cc");
  Blynk.connect();
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d6d7a:	e7f2      	b.n	d6d62 <setup+0x246>
  {
    delay(100);
  }

  Serial.println("Setup complete");
   d6d7c:	f002 fa2c 	bl	d91d8 <_Z16_fetch_usbserialv>
   d6d80:	4923      	ldr	r1, [pc, #140]	; (d6e10 <setup+0x2f4>)
   d6d82:	f001 fd50 	bl	d8826 <_ZN5Print7printlnEPKc>
  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d6d86:	68a3      	ldr	r3, [r4, #8]
   d6d88:	4a22      	ldr	r2, [pc, #136]	; (d6e14 <setup+0x2f8>)
   d6d8a:	4823      	ldr	r0, [pc, #140]	; (d6e18 <setup+0x2fc>)
   d6d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6d90:	4359      	muls	r1, r3
   d6d92:	f000 feb9 	bl	d7b08 <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d6d96:	4820      	ldr	r0, [pc, #128]	; (d6e18 <setup+0x2fc>)
   d6d98:	f000 fed8 	bl	d7b4c <_ZN10BlynkTimer3runEv>

  readSensors(); 
  // setAppWidgets();
}
   d6d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  Serial.println("Setup complete");
  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
  sensorTimer.run(); // BlynkTimer is working...

  readSensors(); 
   d6da0:	f7ff be8a 	b.w	d6ab8 <_Z11readSensorsv>
   d6da4:	2003e380 	.word	0x2003e380
   d6da8:	2003deb4 	.word	0x2003deb4
   d6dac:	2003dc10 	.word	0x2003dc10
   d6db0:	2003e1cc 	.word	0x2003e1cc
   d6db4:	2003dae8 	.word	0x2003dae8
   d6db8:	000e37a3 	.word	0x000e37a3
   d6dbc:	c31c0000 	.word	0xc31c0000
   d6dc0:	000e37db 	.word	0x000e37db
   d6dc4:	41200000 	.word	0x41200000
   d6dc8:	2003deb0 	.word	0x2003deb0
   d6dcc:	000e37f5 	.word	0x000e37f5
   d6dd0:	000e3800 	.word	0x000e3800
   d6dd4:	000e3865 	.word	0x000e3865
   d6dd8:	000e380f 	.word	0x000e380f
   d6ddc:	2003db14 	.word	0x2003db14
   d6de0:	000e3827 	.word	0x000e3827
   d6de4:	2003db10 	.word	0x2003db10
   d6de8:	000e383e 	.word	0x000e383e
   d6dec:	2003e270 	.word	0x2003e270
   d6df0:	000e3853 	.word	0x000e3853
   d6df4:	000e385c 	.word	0x000e385c
   d6df8:	000e3870 	.word	0x000e3870
   d6dfc:	2003e2d4 	.word	0x2003e2d4
   d6e00:	000e387c 	.word	0x000e387c
   d6e04:	2003e304 	.word	0x2003e304
   d6e08:	2003daec 	.word	0x2003daec
   d6e0c:	000e3890 	.word	0x000e3890
   d6e10:	000e38a4 	.word	0x000e38a4
   d6e14:	000d6ab9 	.word	0x000d6ab9
   d6e18:	2003dc6c 	.word	0x2003dc6c

000d6e1c <loop>:
  // setAppWidgets();
}

void loop()
{
   d6e1c:	b508      	push	{r3, lr}
  Blynk.run();
   d6e1e:	2100      	movs	r1, #0
   d6e20:	480a      	ldr	r0, [pc, #40]	; (d6e4c <loop+0x30>)
   d6e22:	f7fe fe33 	bl	d5a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  sensorTimer.run(); // BlynkTimer is working...
   d6e26:	480a      	ldr	r0, [pc, #40]	; (d6e50 <loop+0x34>)
   d6e28:	f000 fe90 	bl	d7b4c <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d6e2c:	4b09      	ldr	r3, [pc, #36]	; (d6e54 <loop+0x38>)
   d6e2e:	685a      	ldr	r2, [r3, #4]
   d6e30:	4b09      	ldr	r3, [pc, #36]	; (d6e58 <loop+0x3c>)
   d6e32:	681b      	ldr	r3, [r3, #0]
   d6e34:	429a      	cmp	r2, r3
   d6e36:	dc07      	bgt.n	d6e48 <loop+0x2c>
  {
    delay(2000);
   d6e38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6e3c:	f001 ff6e 	bl	d8d1c <delay>
    deepSleep();
  }

   d6e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sensorTimer.run(); // BlynkTimer is working...

  if (readingCount>=state.numberOfReadings)// Number of readings variable
  {
    delay(2000);
    deepSleep();
   d6e44:	f7fe bafc 	b.w	d5440 <_Z9deepSleepv>
   d6e48:	bd08      	pop	{r3, pc}
   d6e4a:	bf00      	nop
   d6e4c:	2003e304 	.word	0x2003e304
   d6e50:	2003dc6c 	.word	0x2003dc6c
   d6e54:	2003deb4 	.word	0x2003deb4
   d6e58:	2003e1d0 	.word	0x2003e1d0

000d6e5c <_GLOBAL__sub_I_Blynk>:
  }

   d6e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d6e5e:	4e59      	ldr	r6, [pc, #356]	; (d6fc4 <_GLOBAL__sub_I_Blynk+0x168>)
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6e60:	4b59      	ldr	r3, [pc, #356]	; (d6fc8 <_GLOBAL__sub_I_Blynk+0x16c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d6e62:	4d5a      	ldr	r5, [pc, #360]	; (d6fcc <_GLOBAL__sub_I_Blynk+0x170>)

int i=0;
unsigned long mytime;
int readingCount = 0;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d6e64:	4f5a      	ldr	r7, [pc, #360]	; (d6fd0 <_GLOBAL__sub_I_Blynk+0x174>)
   d6e66:	2400      	movs	r4, #0
   d6e68:	601c      	str	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d6e6a:	f000 ff9d 	bl	d7da8 <HAL_Pin_Map>
   d6e6e:	4630      	mov	r0, r6
   d6e70:	f002 febe 	bl	d9bf0 <_ZN9TCPClientC1Ev>
   d6e74:	f106 001c 	add.w	r0, r6, #28
   d6e78:	f002 f916 	bl	d90a8 <_ZN9IPAddressC1Ev>
   d6e7c:	462a      	mov	r2, r5
   d6e7e:	4955      	ldr	r1, [pc, #340]	; (d6fd4 <_GLOBAL__sub_I_Blynk+0x178>)
   d6e80:	6374      	str	r4, [r6, #52]	; 0x34
   d6e82:	4630      	mov	r0, r6
   d6e84:	8734      	strh	r4, [r6, #56]	; 0x38
   d6e86:	f003 f875 	bl	d9f74 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d6e8a:	4b53      	ldr	r3, [pc, #332]	; (d6fd8 <_GLOBAL__sub_I_Blynk+0x17c>)
   d6e8c:	601e      	str	r6, [r3, #0]
   d6e8e:	605c      	str	r4, [r3, #4]
   d6e90:	609c      	str	r4, [r3, #8]
   d6e92:	60dc      	str	r4, [r3, #12]
   d6e94:	611c      	str	r4, [r3, #16]
   d6e96:	615c      	str	r4, [r3, #20]
   d6e98:	831c      	strh	r4, [r3, #24]
   d6e9a:	835c      	strh	r4, [r3, #26]
   d6e9c:	771c      	strb	r4, [r3, #28]
   d6e9e:	775c      	strb	r4, [r3, #29]
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6ea0:	4b4e      	ldr	r3, [pc, #312]	; (d6fdc <_GLOBAL__sub_I_Blynk+0x180>)
#endif //end of #ifdef PARTICLE

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

MB85RC256V fram(Wire, 0);
   d6ea2:	4e4f      	ldr	r6, [pc, #316]	; (d6fe0 <_GLOBAL__sub_I_Blynk+0x184>)
   d6ea4:	701c      	strb	r4, [r3, #0]
   d6ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6eaa:	805c      	strh	r4, [r3, #2]
   d6eac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6eae:	2002      	movs	r0, #2
   d6eb0:	f001 f96a 	bl	d8188 <set_system_mode>
  #include "arduino.h"
  #include <Wire.h>  
#endif //end of #ifdef PARTICLE

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d6eb4:	4621      	mov	r1, r4
   d6eb6:	2001      	movs	r0, #1
   d6eb8:	f001 f97e 	bl	d81b8 <system_thread_set_state>

MB85RC256V fram(Wire, 0);
   d6ebc:	f003 f81a 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d6ec0:	4622      	mov	r2, r4
   d6ec2:	4601      	mov	r1, r0
   d6ec4:	4630      	mov	r0, r6
   d6ec6:	f000 feb9 	bl	d7c3c <_ZN10MB85RC256VC1ER7TwoWirei>
   d6eca:	462a      	mov	r2, r5
   d6ecc:	4945      	ldr	r1, [pc, #276]	; (d6fe4 <_GLOBAL__sub_I_Blynk+0x188>)
   d6ece:	4630      	mov	r0, r6
   d6ed0:	f003 f850 	bl	d9f74 <__aeabi_atexit>
bool batCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d6ed4:	4e44      	ldr	r6, [pc, #272]	; (d6fe8 <_GLOBAL__sub_I_Blynk+0x18c>)
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, firstRun = false, terminalDebug = false;
bool batCurrentAlert = false;

IoTNodePower power;
   d6ed6:	4845      	ldr	r0, [pc, #276]	; (d6fec <_GLOBAL__sub_I_Blynk+0x190>)
   d6ed8:	f000 fa58 	bl	d738c <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d6edc:	4844      	ldr	r0, [pc, #272]	; (d6ff0 <_GLOBAL__sub_I_Blynk+0x194>)
   d6ede:	f000 fbd6 	bl	d768e <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d6ee2:	4621      	mov	r1, r4
   d6ee4:	4630      	mov	r0, r6
   d6ee6:	f001 ffd5 	bl	d8e94 <_ZN9FuelGaugeC1Eb>
   d6eea:	4630      	mov	r0, r6

int i=0;
unsigned long mytime;
int readingCount = 0;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d6eec:	4e41      	ldr	r6, [pc, #260]	; (d6ff4 <_GLOBAL__sub_I_Blynk+0x198>)
bool batCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d6eee:	4942      	ldr	r1, [pc, #264]	; (d6ff8 <_GLOBAL__sub_I_Blynk+0x19c>)

int i=0;
unsigned long mytime;
int readingCount = 0;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d6ef0:	4c42      	ldr	r4, [pc, #264]	; (d6ffc <_GLOBAL__sub_I_Blynk+0x1a0>)
bool batCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d6ef2:	462a      	mov	r2, r5
   d6ef4:	f003 f83e 	bl	d9f74 <__aeabi_atexit>

int i=0;
unsigned long mytime;
int readingCount = 0;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d6ef8:	4631      	mov	r1, r6
   d6efa:	4638      	mov	r0, r7
   d6efc:	f001 fb68 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f00:	4638      	mov	r0, r7
   d6f02:	4f3f      	ldr	r7, [pc, #252]	; (d7000 <_GLOBAL__sub_I_Blynk+0x1a4>)
   d6f04:	462a      	mov	r2, r5
   d6f06:	4621      	mov	r1, r4
   d6f08:	f003 f834 	bl	d9f74 <__aeabi_atexit>
   d6f0c:	4631      	mov	r1, r6
   d6f0e:	4638      	mov	r0, r7
   d6f10:	f001 fb5e 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f14:	4638      	mov	r0, r7
   d6f16:	4f3b      	ldr	r7, [pc, #236]	; (d7004 <_GLOBAL__sub_I_Blynk+0x1a8>)
   d6f18:	462a      	mov	r2, r5
   d6f1a:	4621      	mov	r1, r4
   d6f1c:	f003 f82a 	bl	d9f74 <__aeabi_atexit>
   d6f20:	4631      	mov	r1, r6
   d6f22:	4638      	mov	r0, r7
   d6f24:	f001 fb54 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f28:	4638      	mov	r0, r7
   d6f2a:	4f37      	ldr	r7, [pc, #220]	; (d7008 <_GLOBAL__sub_I_Blynk+0x1ac>)
   d6f2c:	462a      	mov	r2, r5
   d6f2e:	4621      	mov	r1, r4
   d6f30:	f003 f820 	bl	d9f74 <__aeabi_atexit>
   d6f34:	4631      	mov	r1, r6
   d6f36:	4638      	mov	r0, r7
   d6f38:	f001 fb4a 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f3c:	4638      	mov	r0, r7
   d6f3e:	4f33      	ldr	r7, [pc, #204]	; (d700c <_GLOBAL__sub_I_Blynk+0x1b0>)
   d6f40:	462a      	mov	r2, r5
   d6f42:	4621      	mov	r1, r4
   d6f44:	f003 f816 	bl	d9f74 <__aeabi_atexit>
   d6f48:	4631      	mov	r1, r6
   d6f4a:	4638      	mov	r0, r7
   d6f4c:	f001 fb40 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f50:	4638      	mov	r0, r7
   d6f52:	4f2f      	ldr	r7, [pc, #188]	; (d7010 <_GLOBAL__sub_I_Blynk+0x1b4>)
   d6f54:	462a      	mov	r2, r5
   d6f56:	4621      	mov	r1, r4
   d6f58:	f003 f80c 	bl	d9f74 <__aeabi_atexit>
   d6f5c:	4631      	mov	r1, r6
   d6f5e:	4638      	mov	r0, r7
   d6f60:	f001 fb36 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f64:	4638      	mov	r0, r7
   d6f66:	4f2b      	ldr	r7, [pc, #172]	; (d7014 <_GLOBAL__sub_I_Blynk+0x1b8>)
   d6f68:	462a      	mov	r2, r5
   d6f6a:	4621      	mov	r1, r4
   d6f6c:	f003 f802 	bl	d9f74 <__aeabi_atexit>
   d6f70:	4631      	mov	r1, r6
   d6f72:	4638      	mov	r0, r7
   d6f74:	f001 fb2c 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f78:	4638      	mov	r0, r7
   d6f7a:	4f27      	ldr	r7, [pc, #156]	; (d7018 <_GLOBAL__sub_I_Blynk+0x1bc>)
   d6f7c:	462a      	mov	r2, r5
   d6f7e:	4621      	mov	r1, r4
   d6f80:	f002 fff8 	bl	d9f74 <__aeabi_atexit>
   d6f84:	4631      	mov	r1, r6
   d6f86:	4638      	mov	r0, r7
   d6f88:	f001 fb22 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6f8c:	4638      	mov	r0, r7
String datastring;
   d6f8e:	4f23      	ldr	r7, [pc, #140]	; (d701c <_GLOBAL__sub_I_Blynk+0x1c0>)

int i=0;
unsigned long mytime;
int readingCount = 0;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d6f90:	462a      	mov	r2, r5
   d6f92:	4621      	mov	r1, r4
   d6f94:	f002 ffee 	bl	d9f74 <__aeabi_atexit>
String datastring;
   d6f98:	4631      	mov	r1, r6
   d6f9a:	4638      	mov	r0, r7
   d6f9c:	f001 fb18 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d6fa0:	462a      	mov	r2, r5
   d6fa2:	4621      	mov	r1, r4
   d6fa4:	4638      	mov	r0, r7
   d6fa6:	f002 ffe5 	bl	d9f74 <__aeabi_atexit>
// char auth[] = "JouQtmYm-Cs2QCjZA18AxFAvdFrs6Sr6"; //Bathroom 2
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
// char auth[] = "7-3k6yTAAzg7y8k7frgFQfevIMqJVYPs"; //Bathroom 5

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d6faa:	481d      	ldr	r0, [pc, #116]	; (d7020 <_GLOBAL__sub_I_Blynk+0x1c4>)
   d6fac:	f000 fd51 	bl	d7a52 <_ZN10BlynkTimerC1Ev>

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d6fb0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; d7024 <_GLOBAL__sub_I_Blynk+0x1c8>
   d6fb4:	481c      	ldr	r0, [pc, #112]	; (d7028 <_GLOBAL__sub_I_Blynk+0x1cc>)
   d6fb6:	220f      	movs	r2, #15
   d6fb8:	2111      	movs	r1, #17
  {
    delay(2000);
    deepSleep();
  }

   d6fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d6fbe:	f000 b9b5 	b.w	d732c <_ZN3IAQC1Eiif>
   d6fc2:	bf00      	nop
   d6fc4:	2003e20c 	.word	0x2003e20c
   d6fc8:	2003e324 	.word	0x2003e324
   d6fcc:	2003dc0c 	.word	0x2003dc0c
   d6fd0:	2003e2c4 	.word	0x2003e2c4
   d6fd4:	000d5341 	.word	0x000d5341
   d6fd8:	2003e304 	.word	0x2003e304
   d6fdc:	2003e258 	.word	0x2003e258
   d6fe0:	2003dc10 	.word	0x2003dc10
   d6fe4:	000d7c25 	.word	0x000d7c25
   d6fe8:	2003dc54 	.word	0x2003dc54
   d6fec:	2003e1cc 	.word	0x2003e1cc
   d6ff0:	2003e2d4 	.word	0x2003e2d4
   d6ff4:	000e3de9 	.word	0x000e3de9
   d6ff8:	000d8eb3 	.word	0x000d8eb3
   d6ffc:	000d8543 	.word	0x000d8543
   d7000:	2003dc24 	.word	0x2003dc24
   d7004:	2003dc34 	.word	0x2003dc34
   d7008:	2003e1ec 	.word	0x2003e1ec
   d700c:	2003dc44 	.word	0x2003dc44
   d7010:	2003e260 	.word	0x2003e260
   d7014:	2003dc5c 	.word	0x2003dc5c
   d7018:	2003e248 	.word	0x2003e248
   d701c:	2003e1d4 	.word	0x2003e1d4
   d7020:	2003dc6c 	.word	0x2003dc6c
   d7024:	4081999a 	.word	0x4081999a
   d7028:	2003e270 	.word	0x2003e270

000d702c <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d702c:	e880 0006 	stmia.w	r0, {r1, r2}
   d7030:	4a10      	ldr	r2, [pc, #64]	; (d7074 <_ZN3ULPC1Eiif+0x48>)
   d7032:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d7034:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d7036:	4a10      	ldr	r2, [pc, #64]	; (d7078 <_ZN3ULPC1Eiif+0x4c>)
   d7038:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d703a:	4a10      	ldr	r2, [pc, #64]	; (d707c <_ZN3ULPC1Eiif+0x50>)
   d703c:	eddf 6a10 	vldr	s13, [pc, #64]	; d7080 <_ZN3ULPC1Eiif+0x54>
   d7040:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d7044:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d7084 <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d7048:	490f      	ldr	r1, [pc, #60]	; (d7088 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d704a:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d704e:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d7052:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7054:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7058:	eddf 6a0c 	vldr	s13, [pc, #48]	; d708c <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d705c:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7060:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d7064:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d7068:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d706c:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d7070:	4770      	bx	lr
   d7072:	bf00      	nop
   d7074:	41a00000 	.word	0x41a00000
   d7078:	41900000 	.word	0x41900000
   d707c:	2003db14 	.word	0x2003db14
   d7080:	42680000 	.word	0x42680000
   d7084:	42ae0000 	.word	0x42ae0000
   d7088:	42200000 	.word	0x42200000
   d708c:	42180000 	.word	0x42180000

000d7090 <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d7090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7094:	460c      	mov	r4, r1
   d7096:	4606      	mov	r6, r0
   d7098:	4690      	mov	r8, r2
   d709a:	f000 feed 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d709e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d70a2:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d70a6:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d70a8:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d70aa:	88b0      	ldrh	r0, [r6, #4]
   d70ac:	f002 fec3 	bl	d9e36 <analogRead>
   d70b0:	4404      	add	r4, r0
    delay(1);
   d70b2:	2001      	movs	r0, #1
   d70b4:	f001 fe32 	bl	d8d1c <delay>
   d70b8:	f000 fede 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d70bc:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d70be:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d70c2:	d3f2      	bcc.n	d70aa <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d70c4:	ee07 5a10 	vmov	s14, r5
   d70c8:	ee07 4a90 	vmov	s15, r4
   d70cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d70d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d70d4:	4b18      	ldr	r3, [pc, #96]	; (d7138 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d70d6:	edd6 5a08 	vldr	s11, [r6, #32]
   d70da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d70de:	edd3 7a00 	vldr	s15, [r3]
   d70e2:	4b16      	ldr	r3, [pc, #88]	; (d713c <_ZN3ULP7getTempEiPc+0xac>)
   d70e4:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d70e8:	4b15      	ldr	r3, [pc, #84]	; (d7140 <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d70ea:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d70ee:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d70f0:	ee67 7a27 	vmul.f32	s15, s14, s15
   d70f4:	ed9f 7a13 	vldr	s14, [pc, #76]	; d7144 <_ZN3ULP7getTempEiPc+0xb4>
   d70f8:	ee27 7a87 	vmul.f32	s14, s15, s14
   d70fc:	edd6 7a07 	vldr	s15, [r6, #28]
   d7100:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d7104:	d10c      	bne.n	d7120 <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d7106:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d710a:	ee67 7a87 	vmul.f32	s15, s15, s14
   d710e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d7112:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d7116:	eddf 7a0c 	vldr	s15, [pc, #48]	; d7148 <_ZN3ULP7getTempEiPc+0xb8>
   d711a:	ee77 7a27 	vadd.f32	s15, s14, s15
   d711e:	e002      	b.n	d7126 <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d7120:	4b0a      	ldr	r3, [pc, #40]	; (d714c <_ZN3ULP7getTempEiPc+0xbc>)
   d7122:	4598      	cmp	r8, r3
   d7124:	d102      	bne.n	d712c <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d7126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d712a:	e001      	b.n	d7130 <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d712c:	eddf 7a08 	vldr	s15, [pc, #32]	; d7150 <_ZN3ULP7getTempEiPc+0xc0>
}
   d7130:	ee17 0a90 	vmov	r0, s15
   d7134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7138:	2003db10 	.word	0x2003db10
   d713c:	2003db14 	.word	0x2003db14
   d7140:	000e3698 	.word	0x000e3698
   d7144:	39800000 	.word	0x39800000
   d7148:	42000000 	.word	0x42000000
   d714c:	000e36b0 	.word	0x000e36b0
   d7150:	00000000 	.word	0x00000000

000d7154 <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d7154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7156:	4604      	mov	r4, r0
   d7158:	f000 fe8e 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d715c:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d715e:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d7162:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d7164:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d7166:	8820      	ldrh	r0, [r4, #0]
   d7168:	f002 fe65 	bl	d9e36 <analogRead>
   d716c:	4405      	add	r5, r0
    delay(1);
   d716e:	2001      	movs	r0, #1
   d7170:	f001 fdd4 	bl	d8d1c <delay>
   d7174:	f000 fe80 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d7178:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d717a:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d717e:	d3f2      	bcc.n	d7166 <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d7180:	ee07 5a90 	vmov	s15, r5
   d7184:	ee07 6a10 	vmov	s14, r6
   d7188:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d718c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d7190:	4b15      	ldr	r3, [pc, #84]	; (d71e8 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d7192:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d7196:	edd3 7a00 	vldr	s15, [r3]
   d719a:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d719e:	ee17 0a90 	vmov	r0, s15
   d71a2:	f008 fc95 	bl	dfad0 <__aeabi_f2d>
   d71a6:	2200      	movs	r2, #0
   d71a8:	4b10      	ldr	r3, [pc, #64]	; (d71ec <_ZN3ULP4zeroEv+0x98>)
   d71aa:	f008 fce5 	bl	dfb78 <__aeabi_dmul>
   d71ae:	4b10      	ldr	r3, [pc, #64]	; (d71f0 <_ZN3ULP4zeroEv+0x9c>)
   d71b0:	2200      	movs	r2, #0
   d71b2:	f008 fce1 	bl	dfb78 <__aeabi_dmul>
   d71b6:	f008 ffd7 	bl	e0168 <__aeabi_d2f>
   d71ba:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d71be:	4a0d      	ldr	r2, [pc, #52]	; (d71f4 <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d71c0:	ee07 0a10 	vmov	s14, r0
   d71c4:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d71c8:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d71ca:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d71ce:	4620      	mov	r0, r4
   d71d0:	f7ff ff5e 	bl	d7090 <_ZN3ULP7getTempEiPc>
   d71d4:	ee07 0a90 	vmov	s15, r0
   d71d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d71dc:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d71e0:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d71e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d71e6:	bf00      	nop
   d71e8:	2003db10 	.word	0x2003db10
   d71ec:	408f4000 	.word	0x408f4000
   d71f0:	3f300000 	.word	0x3f300000
   d71f4:	000e36b0 	.word	0x000e36b0

000d71f8 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d71f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71fa:	460c      	mov	r4, r1
   d71fc:	4607      	mov	r7, r0
   d71fe:	f000 fe3b 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d7202:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d7206:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d720a:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d720c:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d720e:	8838      	ldrh	r0, [r7, #0]
   d7210:	f002 fe11 	bl	d9e36 <analogRead>
   d7214:	4404      	add	r4, r0
    delay(1);
   d7216:	2001      	movs	r0, #1
   d7218:	f001 fd80 	bl	d8d1c <delay>
   d721c:	f000 fe2c 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d7220:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d7222:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d7226:	d3f2      	bcc.n	d720e <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d7228:	ee07 4a90 	vmov	s15, r4
   d722c:	ee07 5a10 	vmov	s14, r5
   d7230:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d7234:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d7238:	4b0b      	ldr	r3, [pc, #44]	; (d7268 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d723a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d723e:	edd3 7a00 	vldr	s15, [r3]
   d7242:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d7246:	ee17 0a90 	vmov	r0, s15
   d724a:	f008 fc41 	bl	dfad0 <__aeabi_f2d>
   d724e:	2200      	movs	r2, #0
   d7250:	4b06      	ldr	r3, [pc, #24]	; (d726c <_ZN3ULP7getVgasEi+0x74>)
   d7252:	f008 fc91 	bl	dfb78 <__aeabi_dmul>
   d7256:	2200      	movs	r2, #0
   d7258:	4b05      	ldr	r3, [pc, #20]	; (d7270 <_ZN3ULP7getVgasEi+0x78>)
   d725a:	f008 fc8d 	bl	dfb78 <__aeabi_dmul>
   d725e:	f008 ff83 	bl	e0168 <__aeabi_d2f>
} //returns voltage at zero concentration
   d7262:	ee00 0a10 	vmov	s0, r0
   d7266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7268:	2003db10 	.word	0x2003db10
   d726c:	408f4000 	.word	0x408f4000
   d7270:	3f300000 	.word	0x3f300000
   d7274:	00000000 	.word	0x00000000

000d7278 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d7278:	b5d0      	push	{r4, r6, r7, lr}
   d727a:	ed2d 8b02 	vpush	{d8}
   d727e:	4604      	mov	r4, r0
   d7280:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d7284:	f7ff ffb8 	bl	d71f8 <_ZN3ULP7getVgasEi>
   d7288:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d728c:	ee30 0a67 	vsub.f32	s0, s0, s15
   d7290:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d7294:	ee70 7a67 	vsub.f32	s15, s0, s15
   d7298:	ee17 0a90 	vmov	r0, s15
   d729c:	f008 fc18 	bl	dfad0 <__aeabi_f2d>
   d72a0:	2200      	movs	r2, #0
   d72a2:	4b21      	ldr	r3, [pc, #132]	; (d7328 <_ZN3ULP7getConcEif+0xb0>)
   d72a4:	f008 fd92 	bl	dfdcc <__aeabi_ddiv>
   d72a8:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d72ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d72b0:	4606      	mov	r6, r0
   d72b2:	ee17 0a90 	vmov	r0, s15
   d72b6:	460f      	mov	r7, r1
   d72b8:	f008 fc0a 	bl	dfad0 <__aeabi_f2d>
   d72bc:	4602      	mov	r2, r0
   d72be:	460b      	mov	r3, r1
   d72c0:	4630      	mov	r0, r6
   d72c2:	4639      	mov	r1, r7
   d72c4:	f008 fd82 	bl	dfdcc <__aeabi_ddiv>
   d72c8:	a315      	add	r3, pc, #84	; (adr r3, d7320 <_ZN3ULP7getConcEif+0xa8>)
   d72ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d72ce:	f008 fc53 	bl	dfb78 <__aeabi_dmul>
   d72d2:	f008 ff49 	bl	e0168 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d72d6:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d72da:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d72de:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d72e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d72e6:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d72ea:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d72ee:	bfcc      	ite	gt
   d72f0:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d72f4:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d72f8:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d72fc:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d7300:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d7304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d7308:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d730c:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d7310:	edd4 6a02 	vldr	s13, [r4, #8]
   d7314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d7318:	ee20 0a07 	vmul.f32	s0, s0, s14
   d731c:	bdd0      	pop	{r4, r6, r7, pc}
   d731e:	bf00      	nop
   d7320:	00000000 	.word	0x00000000
   d7324:	41cdcd65 	.word	0x41cdcd65
   d7328:	408f4000 	.word	0x408f4000

000d732c <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d732c:	b508      	push	{r3, lr}
   d732e:	4603      	mov	r3, r0
   d7330:	f7ff fe7c 	bl	d702c <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d7334:	4a0d      	ldr	r2, [pc, #52]	; (d736c <_ZN3IAQC1Eiif+0x40>)
   d7336:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d7370 <_ZN3IAQC1Eiif+0x44>
   d733a:	edd2 7a00 	vldr	s15, [r2]
   d733e:	eddf 6a0d 	vldr	s13, [pc, #52]	; d7374 <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d7342:	4a0d      	ldr	r2, [pc, #52]	; (d7378 <_ZN3IAQC1Eiif+0x4c>)
   d7344:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d7346:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d734a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d734e:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d7352:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d7354:	4a09      	ldr	r2, [pc, #36]	; (d737c <_ZN3IAQC1Eiif+0x50>)
   d7356:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d7358:	4a09      	ldr	r2, [pc, #36]	; (d7380 <_ZN3IAQC1Eiif+0x54>)
   d735a:	635a      	str	r2, [r3, #52]	; 0x34
}
   d735c:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d735e:	ed9f 7a09 	vldr	s14, [pc, #36]	; d7384 <_ZN3IAQC1Eiif+0x58>
   d7362:	ee67 7a87 	vmul.f32	s15, s15, s14
   d7366:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d736a:	bd08      	pop	{r3, pc}
   d736c:	2003db14 	.word	0x2003db14
   d7370:	4986e340 	.word	0x4986e340
   d7374:	4a007aa0 	.word	0x4a007aa0
   d7378:	000186a0 	.word	0x000186a0
   d737c:	4181999a 	.word	0x4181999a
   d7380:	4093851f 	.word	0x4093851f
   d7384:	447a0000 	.word	0x447a0000

000d7388 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d7388:	f000 bd0e 	b.w	d7da8 <HAL_Pin_Map>

000d738c <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d738c:	4770      	bx	lr
	...

000d7390 <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d7390:	b510      	push	{r4, lr}

      IOexp.begin();
   d7392:	4c53      	ldr	r4, [pc, #332]	; (d74e0 <_ZN12IoTNodePower5beginEv+0x150>)
   d7394:	4620      	mov	r0, r4
   d7396:	f000 f93f 	bl	d7618 <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d739a:	4620      	mov	r0, r4
   d739c:	2201      	movs	r2, #1
   d739e:	2100      	movs	r1, #0
   d73a0:	f000 f93d 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d73a4:	2201      	movs	r2, #1
   d73a6:	4611      	mov	r1, r2
   d73a8:	4620      	mov	r0, r4
   d73aa:	f000 f938 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d73ae:	4620      	mov	r0, r4
   d73b0:	2201      	movs	r2, #1
   d73b2:	2102      	movs	r1, #2
   d73b4:	f000 f933 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d73b8:	4620      	mov	r0, r4
   d73ba:	2201      	movs	r2, #1
   d73bc:	2103      	movs	r1, #3
   d73be:	f000 f92e 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d73c2:	4620      	mov	r0, r4
   d73c4:	2201      	movs	r2, #1
   d73c6:	2104      	movs	r1, #4
   d73c8:	f000 f929 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d73cc:	4620      	mov	r0, r4
   d73ce:	2201      	movs	r2, #1
   d73d0:	2105      	movs	r1, #5
   d73d2:	f000 f924 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d73d6:	4620      	mov	r0, r4
   d73d8:	2200      	movs	r2, #0
   d73da:	2106      	movs	r1, #6
   d73dc:	f000 f91f 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d73e0:	4620      	mov	r0, r4
   d73e2:	2201      	movs	r2, #1
   d73e4:	2107      	movs	r1, #7
   d73e6:	f000 f91a 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d73ea:	4620      	mov	r0, r4
   d73ec:	2200      	movs	r2, #0
   d73ee:	2108      	movs	r1, #8
   d73f0:	f000 f915 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d73f4:	4620      	mov	r0, r4
   d73f6:	2200      	movs	r2, #0
   d73f8:	2109      	movs	r1, #9
   d73fa:	f000 f910 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d73fe:	4620      	mov	r0, r4
   d7400:	2200      	movs	r2, #0
   d7402:	210a      	movs	r1, #10
   d7404:	f000 f90b 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d7408:	4620      	mov	r0, r4
   d740a:	2200      	movs	r2, #0
   d740c:	210b      	movs	r1, #11
   d740e:	f000 f906 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d7412:	4620      	mov	r0, r4
   d7414:	2200      	movs	r2, #0
   d7416:	210c      	movs	r1, #12
   d7418:	f000 f901 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d741c:	4620      	mov	r0, r4
   d741e:	2200      	movs	r2, #0
   d7420:	210d      	movs	r1, #13
   d7422:	f000 f8fc 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d7426:	4620      	mov	r0, r4
   d7428:	2200      	movs	r2, #0
   d742a:	210e      	movs	r1, #14
   d742c:	f000 f8f7 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d7430:	4620      	mov	r0, r4
   d7432:	2200      	movs	r2, #0
   d7434:	210f      	movs	r1, #15
   d7436:	f000 f8f2 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d743a:	4620      	mov	r0, r4
   d743c:	2201      	movs	r2, #1
   d743e:	2100      	movs	r1, #0
   d7440:	f000 f916 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d7444:	2201      	movs	r2, #1
   d7446:	4611      	mov	r1, r2
   d7448:	4620      	mov	r0, r4
   d744a:	f000 f911 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d744e:	4620      	mov	r0, r4
   d7450:	2201      	movs	r2, #1
   d7452:	2102      	movs	r1, #2
   d7454:	f000 f90c 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d7458:	4620      	mov	r0, r4
   d745a:	2201      	movs	r2, #1
   d745c:	2103      	movs	r1, #3
   d745e:	f000 f907 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d7462:	4620      	mov	r0, r4
   d7464:	2201      	movs	r2, #1
   d7466:	2104      	movs	r1, #4
   d7468:	f000 f902 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d746c:	4620      	mov	r0, r4
   d746e:	2201      	movs	r2, #1
   d7470:	2105      	movs	r1, #5
   d7472:	f000 f8fd 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d7476:	4620      	mov	r0, r4
   d7478:	2201      	movs	r2, #1
   d747a:	2106      	movs	r1, #6
   d747c:	f000 f8f8 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d7480:	4620      	mov	r0, r4
   d7482:	2201      	movs	r2, #1
   d7484:	2107      	movs	r1, #7
   d7486:	f000 f8f3 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d748a:	4620      	mov	r0, r4
   d748c:	2201      	movs	r2, #1
   d748e:	2108      	movs	r1, #8
   d7490:	f000 f8ee 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d7494:	4620      	mov	r0, r4
   d7496:	2201      	movs	r2, #1
   d7498:	2109      	movs	r1, #9
   d749a:	f000 f8e9 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d749e:	4620      	mov	r0, r4
   d74a0:	2201      	movs	r2, #1
   d74a2:	210a      	movs	r1, #10
   d74a4:	f000 f8e4 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d74a8:	4620      	mov	r0, r4
   d74aa:	2201      	movs	r2, #1
   d74ac:	210b      	movs	r1, #11
   d74ae:	f000 f8df 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d74b2:	4620      	mov	r0, r4
   d74b4:	2201      	movs	r2, #1
   d74b6:	210c      	movs	r1, #12
   d74b8:	f000 f8da 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d74bc:	4620      	mov	r0, r4
   d74be:	2201      	movs	r2, #1
   d74c0:	210d      	movs	r1, #13
   d74c2:	f000 f8d5 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d74c6:	4620      	mov	r0, r4
   d74c8:	2201      	movs	r2, #1
   d74ca:	210e      	movs	r1, #14
   d74cc:	f000 f8d0 	bl	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d74d0:	4620      	mov	r0, r4
   d74d2:	2201      	movs	r2, #1
   d74d4:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d74d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d74da:	f000 b8c9 	b.w	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
   d74de:	bf00      	nop
   d74e0:	2003e32c 	.word	0x2003e32c

000d74e4 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d74e4:	4801      	ldr	r0, [pc, #4]	; (d74ec <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d74e6:	f000 b8a6 	b.w	d7636 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d74ea:	bf00      	nop
   d74ec:	2003e32c 	.word	0x2003e32c

000d74f0 <_ZN12IoTNodePower9setPullUpE7gioNameb>:
        //i.e. IOexp.digitalWrite(3, state);
    }

void IoTNodePower::setPullUp(gioName ioName, bool state)
    {
        IOexp.pullUp(ioName, (uint8_t)state);
   d74f0:	4801      	ldr	r0, [pc, #4]	; (d74f8 <_ZN12IoTNodePower9setPullUpE7gioNameb+0x8>)
   d74f2:	f000 b8bd 	b.w	d7670 <_ZN17Adafruit_MCP230176pullUpEhh>
   d74f6:	bf00      	nop
   d74f8:	2003e32c 	.word	0x2003e32c

000d74fc <_ZN12IoTNodePower12digitalWriteE7gioNameb>:
    }

void IoTNodePower::digitalWrite(gioName ioName, bool state)
{
   d74fc:	b570      	push	{r4, r5, r6, lr}
  IOexp.pinMode(ioName,OUTPUT);
   d74fe:	4c07      	ldr	r4, [pc, #28]	; (d751c <_ZN12IoTNodePower12digitalWriteE7gioNameb+0x20>)
    {
        IOexp.pullUp(ioName, (uint8_t)state);
    }

void IoTNodePower::digitalWrite(gioName ioName, bool state)
{
   d7500:	460d      	mov	r5, r1
   d7502:	4616      	mov	r6, r2
  IOexp.pinMode(ioName,OUTPUT);
   d7504:	4620      	mov	r0, r4
   d7506:	2201      	movs	r2, #1
   d7508:	f000 f889 	bl	d761e <_ZN17Adafruit_MCP230177pinModeEhh>
  IOexp.digitalWrite(ioName, state);
   d750c:	4632      	mov	r2, r6
   d750e:	4629      	mov	r1, r5
   d7510:	4620      	mov	r0, r4
}
   d7512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }

void IoTNodePower::digitalWrite(gioName ioName, bool state)
{
  IOexp.pinMode(ioName,OUTPUT);
  IOexp.digitalWrite(ioName, state);
   d7516:	f000 b88e 	b.w	d7636 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d751a:	bf00      	nop
   d751c:	2003e32c 	.word	0x2003e32c

000d7520 <_GLOBAL__sub_I_IOexp>:
   d7520:	f000 bc42 	b.w	d7da8 <HAL_Pin_Map>

000d7524 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d7524:	b510      	push	{r4, lr}
   d7526:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7528:	f002 fce4 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d752c:	6803      	ldr	r3, [r0, #0]
   d752e:	4621      	mov	r1, r4
   d7530:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d7532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7536:	4718      	bx	r3

000d7538 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d7538:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d753a:	f002 fcdb 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d753e:	6803      	ldr	r3, [r0, #0]
   d7540:	695b      	ldr	r3, [r3, #20]
   d7542:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d7544:	b2c0      	uxtb	r0, r0
   d7546:	bd08      	pop	{r3, pc}

000d7548 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d7548:	b538      	push	{r3, r4, r5, lr}
   d754a:	4604      	mov	r4, r0
   d754c:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d754e:	f002 fcd1 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d7552:	7821      	ldrb	r1, [r4, #0]
   d7554:	f041 0120 	orr.w	r1, r1, #32
   d7558:	f001 ffd4 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d755c:	4628      	mov	r0, r5
   d755e:	f7ff ffe1 	bl	d7524 <_ZL8wiresendh>
	Wire.endTransmission();
   d7562:	f002 fcc7 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d7566:	f001 ffd4 	bl	d9512 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d756a:	f002 fcc3 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d756e:	7821      	ldrb	r1, [r4, #0]
   d7570:	2201      	movs	r2, #1
   d7572:	f041 0120 	orr.w	r1, r1, #32
   d7576:	f001 ffb7 	bl	d94e8 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d757e:	f7ff bfdb 	b.w	d7538 <_ZL8wirerecvv>

000d7582 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d7582:	b570      	push	{r4, r5, r6, lr}
   d7584:	4606      	mov	r6, r0
   d7586:	4614      	mov	r4, r2
   d7588:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d758a:	f002 fcb3 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d758e:	7831      	ldrb	r1, [r6, #0]
   d7590:	f041 0120 	orr.w	r1, r1, #32
   d7594:	f001 ffb6 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d7598:	4628      	mov	r0, r5
   d759a:	f7ff ffc3 	bl	d7524 <_ZL8wiresendh>
	wiresend(regValue);
   d759e:	4620      	mov	r0, r4
   d75a0:	f7ff ffc0 	bl	d7524 <_ZL8wiresendh>
	Wire.endTransmission();
   d75a4:	f002 fca6 	bl	d9ef4 <_Z19__fetch_global_Wirev>
}
   d75a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d75ac:	f001 bfb1 	b.w	d9512 <_ZN7TwoWire15endTransmissionEv>

000d75b0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d75b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d75b4:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d75b8:	2907      	cmp	r1, #7
   d75ba:	bf98      	it	ls
   d75bc:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d75be:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d75c2:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d75c4:	4631      	mov	r1, r6
   d75c6:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d75c8:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d75ca:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d75cc:	f7ff ffbc 	bl	d7548 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d75d0:	f1b8 0f00 	cmp.w	r8, #0
   d75d4:	d001      	beq.n	d75da <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d75d6:	4304      	orrs	r4, r0
   d75d8:	e001      	b.n	d75de <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d75da:	ea20 0404 	bic.w	r4, r0, r4
   d75de:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d75e0:	4631      	mov	r1, r6
   d75e2:	4628      	mov	r0, r5
}
   d75e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d75e8:	f7ff bfcb 	b.w	d7582 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d75ec <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d75ec:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d75ee:	2907      	cmp	r1, #7
   d75f0:	bf28      	it	cs
   d75f2:	2107      	movcs	r1, #7
   d75f4:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d75f6:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d75f8:	f002 fc7c 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d75fc:	f001 ff62 	bl	d94c4 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d7600:	4620      	mov	r0, r4
   d7602:	22ff      	movs	r2, #255	; 0xff
   d7604:	2100      	movs	r1, #0
   d7606:	f7ff ffbc 	bl	d7582 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d760a:	4620      	mov	r0, r4
   d760c:	22ff      	movs	r2, #255	; 0xff
   d760e:	2101      	movs	r1, #1
}
   d7610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d7614:	f7ff bfb5 	b.w	d7582 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7618 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d7618:	2100      	movs	r1, #0
   d761a:	f7ff bfe7 	b.w	d75ec <_ZN17Adafruit_MCP230175beginEh>

000d761e <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d761e:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d7620:	2301      	movs	r3, #1
   d7622:	fab2 f282 	clz	r2, r2
   d7626:	9300      	str	r3, [sp, #0]
   d7628:	0952      	lsrs	r2, r2, #5
   d762a:	2300      	movs	r3, #0
   d762c:	f7ff ffc0 	bl	d75b0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7630:	b003      	add	sp, #12
   d7632:	f85d fb04 	ldr.w	pc, [sp], #4

000d7636 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7636:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d763a:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d763e:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7640:	bf34      	ite	cc
   d7642:	2114      	movcc	r1, #20
   d7644:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7646:	4605      	mov	r5, r0
   d7648:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d764a:	f7ff ff7d 	bl	d7548 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d764e:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7650:	40b3      	lsls	r3, r6
   d7652:	b10f      	cbz	r7, d7658 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d7654:	4303      	orrs	r3, r0
   d7656:	e001      	b.n	d765c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d7658:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d765c:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d765e:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7660:	4628      	mov	r0, r5
   d7662:	bf34      	ite	cc
   d7664:	2112      	movcc	r1, #18
   d7666:	2113      	movcs	r1, #19
}
   d7668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d766c:	f7ff bf89 	b.w	d7582 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7670 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d7670:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d7672:	230d      	movs	r3, #13
   d7674:	9300      	str	r3, [sp, #0]
   d7676:	230c      	movs	r3, #12
   d7678:	f7ff ff9a 	bl	d75b0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d767c:	b003      	add	sp, #12
   d767e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7682 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d7682:	f000 bb91 	b.w	d7da8 <HAL_Pin_Map>

000d7686 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d7686:	6803      	ldr	r3, [r0, #0]
   d7688:	b2c9      	uxtb	r1, r1
   d768a:	689b      	ldr	r3, [r3, #8]
   d768c:	4718      	bx	r3

000d768e <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d768e:	2200      	movs	r2, #0
   d7690:	6042      	str	r2, [r0, #4]
   d7692:	6082      	str	r2, [r0, #8]
   d7694:	60c2      	str	r2, [r0, #12]
   d7696:	6102      	str	r2, [r0, #16]
   d7698:	6142      	str	r2, [r0, #20]
   d769a:	6182      	str	r2, [r0, #24]
   d769c:	61c2      	str	r2, [r0, #28]
   d769e:	6202      	str	r2, [r0, #32]
   d76a0:	6242      	str	r2, [r0, #36]	; 0x24
   d76a2:	6282      	str	r2, [r0, #40]	; 0x28
   d76a4:	2201      	movs	r2, #1
   d76a6:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d76aa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d76ae:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d76b2:	4770      	bx	lr

000d76b4 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d76b4:	b538      	push	{r3, r4, r5, lr}
   d76b6:	4605      	mov	r5, r0
   d76b8:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d76ba:	6800      	ldr	r0, [r0, #0]
   d76bc:	2169      	movs	r1, #105	; 0x69
   d76be:	f001 ff21 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d76c2:	0a21      	lsrs	r1, r4, #8
   d76c4:	6828      	ldr	r0, [r5, #0]
   d76c6:	f7ff ffde 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d76ca:	b2e1      	uxtb	r1, r4
   d76cc:	6828      	ldr	r0, [r5, #0]
   d76ce:	f7ff ffda 	bl	d7686 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d76d2:	6828      	ldr	r0, [r5, #0]
   d76d4:	f001 ff1d 	bl	d9512 <_ZN7TwoWire15endTransmissionEv>
   d76d8:	b108      	cbz	r0, d76de <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d76da:	2000      	movs	r0, #0
   d76dc:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d76de:	2202      	movs	r2, #2
   d76e0:	2169      	movs	r1, #105	; 0x69
   d76e2:	6828      	ldr	r0, [r5, #0]
   d76e4:	f001 fefd 	bl	d94e2 <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d76e8:	6828      	ldr	r0, [r5, #0]
   d76ea:	6803      	ldr	r3, [r0, #0]
   d76ec:	691b      	ldr	r3, [r3, #16]
   d76ee:	4798      	blx	r3
   d76f0:	2800      	cmp	r0, #0
   d76f2:	d0f2      	beq.n	d76da <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d76f4:	6828      	ldr	r0, [r5, #0]
   d76f6:	6803      	ldr	r3, [r0, #0]
   d76f8:	695b      	ldr	r3, [r3, #20]
   d76fa:	4798      	blx	r3
   d76fc:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d76fe:	6828      	ldr	r0, [r5, #0]
   d7700:	6803      	ldr	r3, [r0, #0]
   d7702:	695b      	ldr	r3, [r3, #20]
   d7704:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d7706:	0224      	lsls	r4, r4, #8
   d7708:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d770c:	b2c0      	uxtb	r0, r0
   d770e:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d7710:	bd38      	pop	{r3, r4, r5, pc}

000d7712 <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d7712:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d7714:	f240 2102 	movw	r1, #514	; 0x202
   d7718:	f7ff ffcc 	bl	d76b4 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d771c:	1e43      	subs	r3, r0, #1
   d771e:	4258      	negs	r0, r3
   d7720:	4158      	adcs	r0, r3
   d7722:	bd08      	pop	{r3, pc}

000d7724 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d7724:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7726:	b08b      	sub	sp, #44	; 0x2c
   d7728:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d772a:	f7ff fff2 	bl	d7712 <_ZN5SPS3013dataAvailableEv>
   d772e:	4604      	mov	r4, r0
   d7730:	2800      	cmp	r0, #0
   d7732:	f000 8104 	beq.w	d793e <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d7736:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d7738:	2169      	movs	r1, #105	; 0x69
   d773a:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d773c:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d773e:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d7740:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d7742:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d7744:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d7746:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d7748:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d774a:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d774c:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d774e:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d7750:	f001 fed8 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d7754:	2103      	movs	r1, #3
   d7756:	6828      	ldr	r0, [r5, #0]
   d7758:	f7ff ff95 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d775c:	4639      	mov	r1, r7
   d775e:	6828      	ldr	r0, [r5, #0]
   d7760:	f7ff ff91 	bl	d7686 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d7764:	6828      	ldr	r0, [r5, #0]
   d7766:	f001 fed4 	bl	d9512 <_ZN7TwoWire15endTransmissionEv>
   d776a:	4606      	mov	r6, r0
   d776c:	2800      	cmp	r0, #0
   d776e:	f040 80e5 	bne.w	d793c <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d7772:	223c      	movs	r2, #60	; 0x3c
   d7774:	2169      	movs	r1, #105	; 0x69
   d7776:	6828      	ldr	r0, [r5, #0]
   d7778:	f001 feb3 	bl	d94e2 <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d777c:	6828      	ldr	r0, [r5, #0]
   d777e:	6803      	ldr	r3, [r0, #0]
   d7780:	691b      	ldr	r3, [r3, #16]
   d7782:	4798      	blx	r3
   d7784:	bb18      	cbnz	r0, d77ce <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d7786:	9800      	ldr	r0, [sp, #0]
   d7788:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d778a:	9801      	ldr	r0, [sp, #4]
   d778c:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d778e:	9802      	ldr	r0, [sp, #8]
   d7790:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d7792:	9803      	ldr	r0, [sp, #12]
   d7794:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d7796:	9804      	ldr	r0, [sp, #16]
   d7798:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d779a:	9805      	ldr	r0, [sp, #20]
   d779c:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d779e:	9806      	ldr	r0, [sp, #24]
   d77a0:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d77a2:	9807      	ldr	r0, [sp, #28]
   d77a4:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d77a6:	9808      	ldr	r0, [sp, #32]
   d77a8:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d77aa:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d77ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   d77ae:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d77b0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d77b4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d77b8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d77bc:	e0bf      	b.n	d793e <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d77be:	9b00      	ldr	r3, [sp, #0]
   d77c0:	b2c0      	uxtb	r0, r0
   d77c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d77c6:	9000      	str	r0, [sp, #0]
   d77c8:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d77ca:	2e3c      	cmp	r6, #60	; 0x3c
   d77cc:	d0db      	beq.n	d7786 <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d77ce:	6828      	ldr	r0, [r5, #0]
   d77d0:	6803      	ldr	r3, [r0, #0]
   d77d2:	695b      	ldr	r3, [r3, #20]
   d77d4:	4798      	blx	r3

      switch (x)
   d77d6:	b2f3      	uxtb	r3, r6
   d77d8:	2b3a      	cmp	r3, #58	; 0x3a
   d77da:	d8f5      	bhi.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
   d77dc:	a201      	add	r2, pc, #4	; (adr r2, d77e4 <_ZN5SPS3015readMeasurementEv+0xc0>)
   d77de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d77e2:	bf00      	nop
   d77e4:	000d77bf 	.word	0x000d77bf
   d77e8:	000d77bf 	.word	0x000d77bf
   d77ec:	000d77c9 	.word	0x000d77c9
   d77f0:	000d77bf 	.word	0x000d77bf
   d77f4:	000d77bf 	.word	0x000d77bf
   d77f8:	000d77c9 	.word	0x000d77c9
   d77fc:	000d78d1 	.word	0x000d78d1
   d7800:	000d78d1 	.word	0x000d78d1
   d7804:	000d77c9 	.word	0x000d77c9
   d7808:	000d78d1 	.word	0x000d78d1
   d780c:	000d78d1 	.word	0x000d78d1
   d7810:	000d77c9 	.word	0x000d77c9
   d7814:	000d78dd 	.word	0x000d78dd
   d7818:	000d78dd 	.word	0x000d78dd
   d781c:	000d77c9 	.word	0x000d77c9
   d7820:	000d78dd 	.word	0x000d78dd
   d7824:	000d78dd 	.word	0x000d78dd
   d7828:	000d77c9 	.word	0x000d77c9
   d782c:	000d78e9 	.word	0x000d78e9
   d7830:	000d78e9 	.word	0x000d78e9
   d7834:	000d77c9 	.word	0x000d77c9
   d7838:	000d78e9 	.word	0x000d78e9
   d783c:	000d78e9 	.word	0x000d78e9
   d7840:	000d77c9 	.word	0x000d77c9
   d7844:	000d78f5 	.word	0x000d78f5
   d7848:	000d78f5 	.word	0x000d78f5
   d784c:	000d77c9 	.word	0x000d77c9
   d7850:	000d78f5 	.word	0x000d78f5
   d7854:	000d78f5 	.word	0x000d78f5
   d7858:	000d77c9 	.word	0x000d77c9
   d785c:	000d7901 	.word	0x000d7901
   d7860:	000d7901 	.word	0x000d7901
   d7864:	000d77c9 	.word	0x000d77c9
   d7868:	000d7901 	.word	0x000d7901
   d786c:	000d7901 	.word	0x000d7901
   d7870:	000d77c9 	.word	0x000d77c9
   d7874:	000d790d 	.word	0x000d790d
   d7878:	000d790d 	.word	0x000d790d
   d787c:	000d77c9 	.word	0x000d77c9
   d7880:	000d790d 	.word	0x000d790d
   d7884:	000d790d 	.word	0x000d790d
   d7888:	000d77c9 	.word	0x000d77c9
   d788c:	000d7919 	.word	0x000d7919
   d7890:	000d7919 	.word	0x000d7919
   d7894:	000d77c9 	.word	0x000d77c9
   d7898:	000d7919 	.word	0x000d7919
   d789c:	000d7919 	.word	0x000d7919
   d78a0:	000d77c9 	.word	0x000d77c9
   d78a4:	000d7925 	.word	0x000d7925
   d78a8:	000d7925 	.word	0x000d7925
   d78ac:	000d77c9 	.word	0x000d77c9
   d78b0:	000d7925 	.word	0x000d7925
   d78b4:	000d7925 	.word	0x000d7925
   d78b8:	000d77c9 	.word	0x000d77c9
   d78bc:	000d7931 	.word	0x000d7931
   d78c0:	000d7931 	.word	0x000d7931
   d78c4:	000d77c9 	.word	0x000d77c9
   d78c8:	000d7931 	.word	0x000d7931
   d78cc:	000d7931 	.word	0x000d7931
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   d78d0:	9b01      	ldr	r3, [sp, #4]
   d78d2:	b2c0      	uxtb	r0, r0
   d78d4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d78d8:	9001      	str	r0, [sp, #4]
   d78da:	e775      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   d78dc:	9b02      	ldr	r3, [sp, #8]
   d78de:	b2c0      	uxtb	r0, r0
   d78e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d78e4:	9002      	str	r0, [sp, #8]
   d78e6:	e76f      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   d78e8:	9b03      	ldr	r3, [sp, #12]
   d78ea:	b2c0      	uxtb	r0, r0
   d78ec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d78f0:	9003      	str	r0, [sp, #12]
   d78f2:	e769      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   d78f4:	9b04      	ldr	r3, [sp, #16]
   d78f6:	b2c0      	uxtb	r0, r0
   d78f8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d78fc:	9004      	str	r0, [sp, #16]
   d78fe:	e763      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   d7900:	9b05      	ldr	r3, [sp, #20]
   d7902:	b2c0      	uxtb	r0, r0
   d7904:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d7908:	9005      	str	r0, [sp, #20]
   d790a:	e75d      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   d790c:	9b06      	ldr	r3, [sp, #24]
   d790e:	b2c0      	uxtb	r0, r0
   d7910:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   d7914:	9306      	str	r3, [sp, #24]
   d7916:	e757      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   d7918:	b2c3      	uxtb	r3, r0
   d791a:	9807      	ldr	r0, [sp, #28]
   d791c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d7920:	9307      	str	r3, [sp, #28]
   d7922:	e751      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   d7924:	b2c3      	uxtb	r3, r0
   d7926:	9808      	ldr	r0, [sp, #32]
   d7928:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d792c:	9308      	str	r3, [sp, #32]
   d792e:	e74b      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   d7930:	b2c3      	uxtb	r3, r0
   d7932:	9809      	ldr	r0, [sp, #36]	; 0x24
   d7934:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d7938:	9309      	str	r3, [sp, #36]	; 0x24
   d793a:	e745      	b.n	d77c8 <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   d793c:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   d793e:	4620      	mov	r0, r4
   d7940:	b00b      	add	sp, #44	; 0x2c
   d7942:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7944 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d7944:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   d7946:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d794a:	4604      	mov	r4, r0
   d794c:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   d794e:	b10b      	cbz	r3, d7954 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   d7950:	f7ff fee8 	bl	d7724 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   d7954:	2301      	movs	r3, #1
   d7956:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   d795a:	6863      	ldr	r3, [r4, #4]
   d795c:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   d795e:	68a3      	ldr	r3, [r4, #8]
   d7960:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   d7962:	68e3      	ldr	r3, [r4, #12]
   d7964:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   d7966:	6923      	ldr	r3, [r4, #16]
   d7968:	60eb      	str	r3, [r5, #12]
}
   d796a:	bd38      	pop	{r3, r4, r5, pc}

000d796c <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   d796c:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   d796e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   d7972:	4604      	mov	r4, r0
   d7974:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   d7976:	b10b      	cbz	r3, d797c <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   d7978:	f7ff fed4 	bl	d7724 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   d797c:	2301      	movs	r3, #1
   d797e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   d7982:	6963      	ldr	r3, [r4, #20]
   d7984:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   d7986:	69a3      	ldr	r3, [r4, #24]
   d7988:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   d798a:	69e3      	ldr	r3, [r4, #28]
   d798c:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   d798e:	6a23      	ldr	r3, [r4, #32]
   d7990:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   d7992:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7994:	612b      	str	r3, [r5, #16]
}
   d7996:	bd38      	pop	{r3, r4, r5, pc}

000d7998 <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d7998:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   d799a:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d799c:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   d799e:	1a63      	subs	r3, r4, r1
   d79a0:	b2db      	uxtb	r3, r3
   d79a2:	429a      	cmp	r2, r3
   d79a4:	d911      	bls.n	d79ca <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   d79a6:	f814 3b01 	ldrb.w	r3, [r4], #1
   d79aa:	4058      	eors	r0, r3
   d79ac:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   d79ae:	f010 0f80 	tst.w	r0, #128	; 0x80
   d79b2:	f103 33ff 	add.w	r3, r3, #4294967295
   d79b6:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   d79ba:	bf18      	it	ne
   d79bc:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d79c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   d79c4:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d79c6:	d1f2      	bne.n	d79ae <_ZN5SPS3011computeCRC8EPhh+0x16>
   d79c8:	e7e9      	b.n	d799e <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   d79ca:	bd10      	pop	{r4, pc}

000d79cc <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d79cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d79d0:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   d79d2:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d79d4:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   d79d6:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d79da:	a901      	add	r1, sp, #4
   d79dc:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d79de:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   d79e0:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d79e4:	f7ff ffd8 	bl	d7998 <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d79e8:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d79ea:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d79ec:	6820      	ldr	r0, [r4, #0]
   d79ee:	f001 fd89 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   d79f2:	0a39      	lsrs	r1, r7, #8
   d79f4:	6820      	ldr	r0, [r4, #0]
   d79f6:	f7ff fe46 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   d79fa:	b2f9      	uxtb	r1, r7
   d79fc:	6820      	ldr	r0, [r4, #0]
   d79fe:	f7ff fe42 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   d7a02:	4631      	mov	r1, r6
   d7a04:	6820      	ldr	r0, [r4, #0]
   d7a06:	f7ff fe3e 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   d7a0a:	b2e9      	uxtb	r1, r5
   d7a0c:	6820      	ldr	r0, [r4, #0]
   d7a0e:	f7ff fe3a 	bl	d7686 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   d7a12:	6820      	ldr	r0, [r4, #0]
   d7a14:	6803      	ldr	r3, [r0, #0]
   d7a16:	4641      	mov	r1, r8
   d7a18:	689b      	ldr	r3, [r3, #8]
   d7a1a:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d7a1c:	6820      	ldr	r0, [r4, #0]
   d7a1e:	f001 fd78 	bl	d9512 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   d7a22:	fab0 f080 	clz	r0, r0
   d7a26:	0940      	lsrs	r0, r0, #5
   d7a28:	b002      	add	sp, #8
   d7a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a2e <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   d7a2e:	f44f 7240 	mov.w	r2, #768	; 0x300
   d7a32:	2110      	movs	r1, #16
   d7a34:	f7ff bfca 	b.w	d79cc <_ZN5SPS3011sendCommandEtt>

000d7a38 <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   d7a38:	b510      	push	{r4, lr}
   d7a3a:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d7a3c:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   d7a3e:	4608      	mov	r0, r1
   d7a40:	f001 fd40 	bl	d94c4 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d7a44:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   d7a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d7a4a:	f7ff bff0 	b.w	d7a2e <_ZN5SPS3014beginMeasuringEv>

000d7a4e <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   d7a4e:	f000 b9ab 	b.w	d7da8 <HAL_Pin_Map>

000d7a52 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d7a52:	f04f 33ff 	mov.w	r3, #4294967295
   d7a56:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d7a5a:	4770      	bx	lr

000d7a5c <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d7a5c:	b570      	push	{r4, r5, r6, lr}
   d7a5e:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d7a60:	f000 f8c2 	bl	d7be8 <_Z11BlynkMillisv>
   d7a64:	2400      	movs	r4, #0
   d7a66:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d7a68:	1928      	adds	r0, r5, r4
   d7a6a:	2224      	movs	r2, #36	; 0x24
   d7a6c:	2100      	movs	r1, #0
   d7a6e:	f008 fd28 	bl	e04c2 <memset>
        timer[i].prev_millis = current_millis;
   d7a72:	512e      	str	r6, [r5, r4]
   d7a74:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   d7a76:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   d7a7a:	d1f5      	bne.n	d7a68 <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   d7a7c:	2300      	movs	r3, #0
   d7a7e:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   d7a82:	bd70      	pop	{r4, r5, r6, pc}

000d7a84 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d7a84:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d7a88:	2b0f      	cmp	r3, #15
   d7a8a:	dc08      	bgt.n	d7a9e <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   d7a8c:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   d7a8e:	2224      	movs	r2, #36	; 0x24
   d7a90:	fb02 0103 	mla	r1, r2, r3, r0
   d7a94:	6849      	ldr	r1, [r1, #4]
   d7a96:	b129      	cbz	r1, d7aa4 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d7a98:	3301      	adds	r3, #1
   d7a9a:	2b10      	cmp	r3, #16
   d7a9c:	d1f8      	bne.n	d7a90 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   d7a9e:	f04f 30ff 	mov.w	r0, #4294967295
   d7aa2:	4770      	bx	lr
   d7aa4:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   d7aa6:	4770      	bx	lr

000d7aa8 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d7aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7aac:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d7aae:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d7ab2:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d7ab4:	4605      	mov	r5, r0
   d7ab6:	4689      	mov	r9, r1
   d7ab8:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   d7aba:	da01      	bge.n	d7ac0 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d7abc:	f7ff ffce 	bl	d7a5c <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d7ac0:	4628      	mov	r0, r5
   d7ac2:	f7ff ffdf 	bl	d7a84 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d7ac6:	1e04      	subs	r4, r0, #0
   d7ac8:	db1a      	blt.n	d7b00 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   d7aca:	b1cf      	cbz	r7, d7b00 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   d7acc:	2624      	movs	r6, #36	; 0x24
   d7ace:	4366      	muls	r6, r4
   d7ad0:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d7ad2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d7ad6:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   d7ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d7ada:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   d7adc:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   d7ade:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   d7ae2:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   d7ae4:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   d7ae8:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d7aea:	f000 f87d 	bl	d7be8 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   d7aee:	51a8      	str	r0, [r5, r6]

    numTimers++;
   d7af0:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   d7af4:	3301      	adds	r3, #1
   d7af6:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   d7afa:	4620      	mov	r0, r4
   d7afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   d7b00:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   d7b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7b08 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d7b08:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d7b0a:	2300      	movs	r3, #0
   d7b0c:	9301      	str	r3, [sp, #4]
   d7b0e:	9300      	str	r3, [sp, #0]
   d7b10:	f7ff ffca 	bl	d7aa8 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d7b14:	b003      	add	sp, #12
   d7b16:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b1a <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d7b1a:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   d7b1c:	b538      	push	{r3, r4, r5, lr}
   d7b1e:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d7b20:	d813      	bhi.n	d7b4a <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d7b22:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d7b26:	b183      	cbz	r3, d7b4a <_ZN10BlynkTimer11deleteTimerEj+0x30>
   d7b28:	2224      	movs	r2, #36	; 0x24
   d7b2a:	fb02 f501 	mul.w	r5, r2, r1
   d7b2e:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d7b30:	6843      	ldr	r3, [r0, #4]
   d7b32:	b153      	cbz	r3, d7b4a <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d7b34:	2100      	movs	r1, #0
   d7b36:	f008 fcc4 	bl	e04c2 <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d7b3a:	f000 f855 	bl	d7be8 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   d7b3e:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d7b40:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d7b44:	3b01      	subs	r3, #1
   d7b46:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   d7b4a:	bd38      	pop	{r3, r4, r5, pc}

000d7b4c <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   d7b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b50:	4605      	mov	r5, r0
   d7b52:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d7b56:	f000 f847 	bl	d7be8 <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d7b5a:	2601      	movs	r6, #1
   d7b5c:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d7b5e:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d7b62:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d7b66:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d7b68:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d7b6c:	b1e2      	cbz	r2, d7ba8 <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d7b6e:	f853 8c04 	ldr.w	r8, [r3, #-4]
   d7b72:	68dc      	ldr	r4, [r3, #12]
   d7b74:	ebc8 0200 	rsb	r2, r8, r0
   d7b78:	42a2      	cmp	r2, r4
   d7b7a:	d315      	bcc.n	d7ba8 <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d7b7c:	fbb2 f1f4 	udiv	r1, r2, r4
   d7b80:	fb04 8201 	mla	r2, r4, r1, r8
   d7b84:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   d7b88:	7e1a      	ldrb	r2, [r3, #24]
   d7b8a:	b16a      	cbz	r2, d7ba8 <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d7b8c:	6919      	ldr	r1, [r3, #16]
   d7b8e:	b909      	cbnz	r1, d7b94 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d7b90:	61de      	str	r6, [r3, #28]
   d7b92:	e009      	b.n	d7ba8 <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d7b94:	695a      	ldr	r2, [r3, #20]
   d7b96:	4291      	cmp	r1, r2
   d7b98:	d906      	bls.n	d7ba8 <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   d7b9a:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d7b9c:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d7b9e:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   d7ba0:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d7ba2:	bf98      	it	ls
   d7ba4:	f8c3 c01c 	strls.w	ip, [r3, #28]
   d7ba8:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   d7baa:	42bb      	cmp	r3, r7
   d7bac:	d1db      	bne.n	d7b66 <_ZN10BlynkTimer3runEv+0x1a>
   d7bae:	462c      	mov	r4, r5
   d7bb0:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d7bb2:	6a23      	ldr	r3, [r4, #32]
   d7bb4:	b16b      	cbz	r3, d7bd2 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   d7bb6:	7b22      	ldrb	r2, [r4, #12]
   d7bb8:	6863      	ldr	r3, [r4, #4]
   d7bba:	b112      	cbz	r2, d7bc2 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d7bbc:	68a0      	ldr	r0, [r4, #8]
   d7bbe:	4798      	blx	r3
   d7bc0:	e000      	b.n	d7bc4 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   d7bc2:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d7bc4:	6a23      	ldr	r3, [r4, #32]
   d7bc6:	2b02      	cmp	r3, #2
   d7bc8:	d103      	bne.n	d7bd2 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   d7bca:	4631      	mov	r1, r6
   d7bcc:	4628      	mov	r0, r5
   d7bce:	f7ff ffa4 	bl	d7b1a <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   d7bd2:	3601      	adds	r6, #1
   d7bd4:	2e10      	cmp	r6, #16
   d7bd6:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d7bda:	d1ea      	bne.n	d7bb2 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   d7bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7be0 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d7be0:	f000 b8e2 	b.w	d7da8 <HAL_Pin_Map>

000d7be4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d7be4:	f001 b89a 	b.w	d8d1c <delay>

000d7be8 <_Z11BlynkMillisv>:
   d7be8:	f000 b946 	b.w	d7e78 <HAL_Timer_Get_Milli_Seconds>

000d7bec <_GLOBAL__sub_I__Z10BlynkResetv>:
   d7bec:	f000 b8dc 	b.w	d7da8 <HAL_Pin_Map>

000d7bf0 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d7bf0:	4770      	bx	lr

000d7bf2 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d7bf2:	4770      	bx	lr

000d7bf4 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d7bf4:	4770      	bx	lr
	...

000d7bf8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d7bf8:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d7bfa:	bf9a      	itte	ls
   d7bfc:	4b02      	ldrls	r3, [pc, #8]	; (d7c08 <GetReadHandler+0x10>)
   d7bfe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d7c02:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d7c04:	4770      	bx	lr
   d7c06:	bf00      	nop
   d7c08:	000e3b78 	.word	0x000e3b78

000d7c0c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d7c0c:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d7c0e:	bf9a      	itte	ls
   d7c10:	4b02      	ldrls	r3, [pc, #8]	; (d7c1c <GetWriteHandler+0x10>)
   d7c12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d7c16:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d7c18:	4770      	bx	lr
   d7c1a:	bf00      	nop
   d7c1c:	000e3978 	.word	0x000e3978

000d7c20 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d7c20:	f000 b8c2 	b.w	d7da8 <HAL_Pin_Map>

000d7c24 <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d7c24:	4770      	bx	lr

000d7c26 <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d7c26:	b510      	push	{r4, lr}
   d7c28:	4604      	mov	r4, r0
}
   d7c2a:	f7fc fa38 	bl	d409e <_ZdlPv>
   d7c2e:	4620      	mov	r0, r4
   d7c30:	bd10      	pop	{r4, pc}

000d7c32 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7c32:	6803      	ldr	r3, [r0, #0]
   d7c34:	b2c9      	uxtb	r1, r1
   d7c36:	689b      	ldr	r3, [r3, #8]
   d7c38:	4718      	bx	r3
	...

000d7c3c <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d7c3c:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d7c3e:	4c02      	ldr	r4, [pc, #8]	; (d7c48 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d7c40:	6004      	str	r4, [r0, #0]
   d7c42:	6041      	str	r1, [r0, #4]
   d7c44:	6082      	str	r2, [r0, #8]
}
   d7c46:	bd10      	pop	{r4, pc}
   d7c48:	000e3d80 	.word	0x000e3d80

000d7c4c <_ZN10MB85RC256V5beginEv>:

MB85RC256V::~MB85RC256V() {
}

void MB85RC256V::begin() {
	wire.begin();
   d7c4c:	6840      	ldr	r0, [r0, #4]
   d7c4e:	f001 bc39 	b.w	d94c4 <_ZN7TwoWire5beginEv>

000d7c52 <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c56:	4604      	mov	r4, r0
   d7c58:	460d      	mov	r5, r1
   d7c5a:	4617      	mov	r7, r2
   d7c5c:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d7c5e:	f1b8 0f00 	cmp.w	r8, #0
   d7c62:	d03f      	beq.n	d7ce4 <_ZN10MB85RC256V8readDataEjPhj+0x92>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d7c64:	68a1      	ldr	r1, [r4, #8]
   d7c66:	6860      	ldr	r0, [r4, #4]
   d7c68:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7c6c:	f001 fc4a 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d7c70:	0a29      	lsrs	r1, r5, #8
   d7c72:	6860      	ldr	r0, [r4, #4]
   d7c74:	f7ff ffdd 	bl	d7c32 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d7c78:	4629      	mov	r1, r5
   d7c7a:	6860      	ldr	r0, [r4, #4]
   d7c7c:	f7ff ffd9 	bl	d7c32 <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d7c80:	2100      	movs	r1, #0
   d7c82:	6860      	ldr	r0, [r4, #4]
   d7c84:	f001 fc41 	bl	d950a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7c88:	b110      	cbz	r0, d7c90 <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d7c8a:	2000      	movs	r0, #0
   d7c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c90:	f1b8 0f20 	cmp.w	r8, #32
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d7c94:	68a1      	ldr	r1, [r4, #8]
   d7c96:	6860      	ldr	r0, [r4, #4]
   d7c98:	46c1      	mov	r9, r8
   d7c9a:	bf28      	it	cs
   d7c9c:	f04f 0920 	movcs.w	r9, #32
   d7ca0:	2301      	movs	r3, #1
   d7ca2:	464a      	mov	r2, r9
   d7ca4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7ca8:	f001 fc23 	bl	d94f2 <_ZN7TwoWire11requestFromEiii>

		if (Wire.available() < (int) bytesToRead) {
   d7cac:	f002 f922 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d7cb0:	6803      	ldr	r3, [r0, #0]
   d7cb2:	691b      	ldr	r3, [r3, #16]
   d7cb4:	4798      	blx	r3
   d7cb6:	4581      	cmp	r9, r0
   d7cb8:	dce7      	bgt.n	d7c8a <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d7cba:	463e      	mov	r6, r7
   d7cbc:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d7cc0:	f002 f918 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d7cc4:	6803      	ldr	r3, [r0, #0]
   d7cc6:	695b      	ldr	r3, [r3, #20]
   d7cc8:	4798      	blx	r3
   d7cca:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7cce:	1bf2      	subs	r2, r6, r7
   d7cd0:	ebc6 0308 	rsb	r3, r6, r8
   d7cd4:	4591      	cmp	r9, r2
   d7cd6:	eb06 050a 	add.w	r5, r6, sl
   d7cda:	443b      	add	r3, r7
   d7cdc:	d8f0      	bhi.n	d7cc0 <_ZN10MB85RC256V8readDataEjPhj+0x6e>
   d7cde:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d7ce0:	4637      	mov	r7, r6
   d7ce2:	e7bc      	b.n	d7c5e <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d7ce4:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d7ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7cea <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7cee:	4604      	mov	r4, r0
   d7cf0:	460d      	mov	r5, r1
   d7cf2:	4690      	mov	r8, r2
   d7cf4:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d7cf6:	b357      	cbz	r7, d7d4e <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d7cf8:	68a1      	ldr	r1, [r4, #8]
   d7cfa:	6860      	ldr	r0, [r4, #4]
   d7cfc:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7d00:	f001 fc00 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d7d04:	0a29      	lsrs	r1, r5, #8
   d7d06:	6860      	ldr	r0, [r4, #4]
   d7d08:	f7ff ff93 	bl	d7c32 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d7d0c:	4629      	mov	r1, r5
   d7d0e:	6860      	ldr	r0, [r4, #4]
   d7d10:	f7ff ff8f 	bl	d7c32 <_ZN7TwoWire5writeEj>
   d7d14:	f108 091e 	add.w	r9, r8, #30
   d7d18:	4646      	mov	r6, r8
   d7d1a:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d7d1e:	6860      	ldr	r0, [r4, #4]
   d7d20:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7d24:	6803      	ldr	r3, [r0, #0]
   d7d26:	689b      	ldr	r3, [r3, #8]
   d7d28:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7d2a:	454e      	cmp	r6, r9
   d7d2c:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d7d30:	46b0      	mov	r8, r6
			dataLen--;
   d7d32:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7d36:	d001      	beq.n	d7d3c <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d7d38:	2f00      	cmp	r7, #0
   d7d3a:	d1f0      	bne.n	d7d1e <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d7d3c:	2101      	movs	r1, #1
   d7d3e:	6860      	ldr	r0, [r4, #4]
   d7d40:	f001 fbe3 	bl	d950a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7d44:	2800      	cmp	r0, #0
   d7d46:	d0d6      	beq.n	d7cf6 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d7d48:	2000      	movs	r0, #0
   d7d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d7d4e:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d7d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7d54 <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d7d54:	b530      	push	{r4, r5, lr}
   d7d56:	b089      	sub	sp, #36	; 0x24
   d7d58:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d7d5a:	2220      	movs	r2, #32
   d7d5c:	2100      	movs	r1, #0
   d7d5e:	4668      	mov	r0, sp
   d7d60:	f008 fbaf 	bl	e04c2 <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d7d64:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d7d66:	2320      	movs	r3, #32
   d7d68:	466a      	mov	r2, sp
   d7d6a:	4621      	mov	r1, r4
   d7d6c:	4628      	mov	r0, r5
   d7d6e:	f7ff ffbc 	bl	d7cea <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d7d72:	b120      	cbz	r0, d7d7e <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d7d74:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d7d76:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d7d7a:	d1f4      	bne.n	d7d66 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d7d7c:	2001      	movs	r0, #1
}
   d7d7e:	b009      	add	sp, #36	; 0x24
   d7d80:	bd30      	pop	{r4, r5, pc}

000d7d82 <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d7d82:	f000 b811 	b.w	d7da8 <HAL_Pin_Map>
	...

000d7d88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <netdb_freeaddrinfo+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	689b      	ldr	r3, [r3, #8]
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	00030268 	.word	0x00030268

000d7d98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <netdb_getaddrinfo+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	68db      	ldr	r3, [r3, #12]
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	00030268 	.word	0x00030268

000d7da8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <HAL_Pin_Map+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	681b      	ldr	r3, [r3, #0]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003022c 	.word	0x0003022c

000d7db8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <HAL_Validate_Pin_Function+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	685b      	ldr	r3, [r3, #4]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003022c 	.word	0x0003022c

000d7dc8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <HAL_Pin_Mode+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	689b      	ldr	r3, [r3, #8]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003022c 	.word	0x0003022c

000d7dd8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <HAL_Get_Pin_Mode+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	68db      	ldr	r3, [r3, #12]
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003022c 	.word	0x0003022c

000d7de8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <HAL_GPIO_Write+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	691b      	ldr	r3, [r3, #16]
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003022c 	.word	0x0003022c

000d7df8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <HAL_GPIO_Read+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	695b      	ldr	r3, [r3, #20]
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003022c 	.word	0x0003022c

000d7e08 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <HAL_DAC_Write+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	0003022c 	.word	0x0003022c

000d7e18 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <HAL_ADC_Read+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	0003022c 	.word	0x0003022c

000d7e28 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <HAL_PWM_Write_Ext+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	0003022c 	.word	0x0003022c

000d7e38 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <HAL_SPI_Init+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	69db      	ldr	r3, [r3, #28]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	00030230 	.word	0x00030230

000d7e48 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <HAL_SPI_Is_Enabled+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	6a1b      	ldr	r3, [r3, #32]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	00030230 	.word	0x00030230

000d7e58 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <if_index_to_name+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	695b      	ldr	r3, [r3, #20]
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	0003026c 	.word	0x0003026c

000d7e68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <HAL_RNG_GetRandomNumber+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	685b      	ldr	r3, [r3, #4]
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	00030218 	.word	0x00030218

000d7e78 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	695b      	ldr	r3, [r3, #20]
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	00030218 	.word	0x00030218

000d7e88 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <HAL_RTC_Get_UnixTime+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	69db      	ldr	r3, [r3, #28]
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	00030218 	.word	0x00030218

000d7e98 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <HAL_RTC_Time_Is_Valid+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030218 	.word	0x00030218

000d7ea8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <HAL_Core_System_Reset_Ex+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030234 	.word	0x00030234

000d7eb8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <os_thread_is_current+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	689b      	ldr	r3, [r3, #8]
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030248 	.word	0x00030248

000d7ec8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <os_thread_join+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	691b      	ldr	r3, [r3, #16]
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030248 	.word	0x00030248

000d7ed8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <os_thread_cleanup+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	695b      	ldr	r3, [r3, #20]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030248 	.word	0x00030248

000d7ee8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <os_mutex_create+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030248 	.word	0x00030248

000d7ef8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <os_mutex_recursive_create+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030248 	.word	0x00030248

000d7f08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <inet_inet_ntop+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	695b      	ldr	r3, [r3, #20]
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030264 	.word	0x00030264

000d7f18 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <inet_htonl+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	6a1b      	ldr	r3, [r3, #32]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030264 	.word	0x00030264

000d7f28 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <inet_htons+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030264 	.word	0x00030264

000d7f38 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <HAL_USART_Init+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	681b      	ldr	r3, [r3, #0]
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	0003023c 	.word	0x0003023c

000d7f48 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <HAL_USART_Write_Data+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	68db      	ldr	r3, [r3, #12]
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	0003023c 	.word	0x0003023c

000d7f58 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <HAL_USART_Available_Data+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	691b      	ldr	r3, [r3, #16]
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	0003023c 	.word	0x0003023c

000d7f68 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <HAL_USART_Read_Data+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	695b      	ldr	r3, [r3, #20]
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	0003023c 	.word	0x0003023c

000d7f78 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <HAL_USART_Peek_Data+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	699b      	ldr	r3, [r3, #24]
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	0003023c 	.word	0x0003023c

000d7f88 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <HAL_USART_Flush_Data+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	69db      	ldr	r3, [r3, #28]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	0003023c 	.word	0x0003023c

000d7f98 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <HAL_USART_Is_Enabled+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	6a1b      	ldr	r3, [r3, #32]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	0003023c 	.word	0x0003023c

000d7fa8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <HAL_USART_Available_Data_For_Write+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	0003023c 	.word	0x0003023c

000d7fb8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <HAL_I2C_Begin+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	68db      	ldr	r3, [r3, #12]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	00030228 	.word	0x00030228

000d7fc8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <HAL_I2C_Request_Data+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	695b      	ldr	r3, [r3, #20]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	00030228 	.word	0x00030228

000d7fd8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <HAL_I2C_Begin_Transmission+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	699b      	ldr	r3, [r3, #24]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	00030228 	.word	0x00030228

000d7fe8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <HAL_I2C_End_Transmission+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	69db      	ldr	r3, [r3, #28]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	00030228 	.word	0x00030228

000d7ff8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <HAL_I2C_Write_Data+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6a1b      	ldr	r3, [r3, #32]
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	00030228 	.word	0x00030228

000d8008 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <HAL_I2C_Available_Data+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	00030228 	.word	0x00030228

000d8018 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <HAL_I2C_Read_Data+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	00030228 	.word	0x00030228

000d8028 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <HAL_I2C_Peek_Data+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	00030228 	.word	0x00030228

000d8038 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <HAL_I2C_Flush_Data+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	00030228 	.word	0x00030228

000d8048 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <HAL_I2C_Is_Enabled+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	00030228 	.word	0x00030228

000d8058 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <HAL_I2C_Init+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	00030228 	.word	0x00030228

000d8068 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <HAL_I2C_Acquire+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	00030228 	.word	0x00030228

000d8078 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <HAL_I2C_Release+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	00030228 	.word	0x00030228

000d8088 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <sock_setsockopt+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	699b      	ldr	r3, [r3, #24]
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	00030238 	.word	0x00030238

000d8098 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b02      	ldr	r3, [pc, #8]	; (d80a4 <sock_close+0xc>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	69db      	ldr	r3, [r3, #28]
   d80a0:	9301      	str	r3, [sp, #4]
   d80a2:	bd08      	pop	{r3, pc}
   d80a4:	00030238 	.word	0x00030238

000d80a8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b02      	ldr	r3, [pc, #8]	; (d80b4 <sock_connect+0xc>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	6a1b      	ldr	r3, [r3, #32]
   d80b0:	9301      	str	r3, [sp, #4]
   d80b2:	bd08      	pop	{r3, pc}
   d80b4:	00030238 	.word	0x00030238

000d80b8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d80b8:	b508      	push	{r3, lr}
   d80ba:	4b02      	ldr	r3, [pc, #8]	; (d80c4 <sock_recv+0xc>)
   d80bc:	681b      	ldr	r3, [r3, #0]
   d80be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80c0:	9301      	str	r3, [sp, #4]
   d80c2:	bd08      	pop	{r3, pc}
   d80c4:	00030238 	.word	0x00030238

000d80c8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d80c8:	b508      	push	{r3, lr}
   d80ca:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <sock_send+0xc>)
   d80cc:	681b      	ldr	r3, [r3, #0]
   d80ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d80d0:	9301      	str	r3, [sp, #4]
   d80d2:	bd08      	pop	{r3, pc}
   d80d4:	00030238 	.word	0x00030238

000d80d8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d80d8:	b508      	push	{r3, lr}
   d80da:	4b02      	ldr	r3, [pc, #8]	; (d80e4 <sock_socket+0xc>)
   d80dc:	681b      	ldr	r3, [r3, #0]
   d80de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d80e0:	9301      	str	r3, [sp, #4]
   d80e2:	bd08      	pop	{r3, pc}
   d80e4:	00030238 	.word	0x00030238

000d80e8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b02      	ldr	r3, [pc, #8]	; (d80f4 <cellular_signal+0xc>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80f0:	9301      	str	r3, [sp, #4]
   d80f2:	bd08      	pop	{r3, pc}
   d80f4:	00030274 	.word	0x00030274

000d80f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d80f8:	b508      	push	{r3, lr}
   d80fa:	4b02      	ldr	r3, [pc, #8]	; (d8104 <HAL_USB_USART_Init+0xc>)
   d80fc:	681b      	ldr	r3, [r3, #0]
   d80fe:	681b      	ldr	r3, [r3, #0]
   d8100:	9301      	str	r3, [sp, #4]
   d8102:	bd08      	pop	{r3, pc}
   d8104:	0003024c 	.word	0x0003024c

000d8108 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8108:	b508      	push	{r3, lr}
   d810a:	4b02      	ldr	r3, [pc, #8]	; (d8114 <HAL_USB_USART_Begin+0xc>)
   d810c:	681b      	ldr	r3, [r3, #0]
   d810e:	685b      	ldr	r3, [r3, #4]
   d8110:	9301      	str	r3, [sp, #4]
   d8112:	bd08      	pop	{r3, pc}
   d8114:	0003024c 	.word	0x0003024c

000d8118 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8118:	b508      	push	{r3, lr}
   d811a:	4b02      	ldr	r3, [pc, #8]	; (d8124 <HAL_USB_USART_Available_Data+0xc>)
   d811c:	681b      	ldr	r3, [r3, #0]
   d811e:	691b      	ldr	r3, [r3, #16]
   d8120:	9301      	str	r3, [sp, #4]
   d8122:	bd08      	pop	{r3, pc}
   d8124:	0003024c 	.word	0x0003024c

000d8128 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8128:	b508      	push	{r3, lr}
   d812a:	4b02      	ldr	r3, [pc, #8]	; (d8134 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d812c:	681b      	ldr	r3, [r3, #0]
   d812e:	695b      	ldr	r3, [r3, #20]
   d8130:	9301      	str	r3, [sp, #4]
   d8132:	bd08      	pop	{r3, pc}
   d8134:	0003024c 	.word	0x0003024c

000d8138 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8138:	b508      	push	{r3, lr}
   d813a:	4b02      	ldr	r3, [pc, #8]	; (d8144 <HAL_USB_USART_Receive_Data+0xc>)
   d813c:	681b      	ldr	r3, [r3, #0]
   d813e:	699b      	ldr	r3, [r3, #24]
   d8140:	9301      	str	r3, [sp, #4]
   d8142:	bd08      	pop	{r3, pc}
   d8144:	0003024c 	.word	0x0003024c

000d8148 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8148:	b508      	push	{r3, lr}
   d814a:	4b02      	ldr	r3, [pc, #8]	; (d8154 <HAL_USB_USART_Send_Data+0xc>)
   d814c:	681b      	ldr	r3, [r3, #0]
   d814e:	69db      	ldr	r3, [r3, #28]
   d8150:	9301      	str	r3, [sp, #4]
   d8152:	bd08      	pop	{r3, pc}
   d8154:	0003024c 	.word	0x0003024c

000d8158 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8158:	b508      	push	{r3, lr}
   d815a:	4b02      	ldr	r3, [pc, #8]	; (d8164 <HAL_USB_USART_Flush_Data+0xc>)
   d815c:	681b      	ldr	r3, [r3, #0]
   d815e:	6a1b      	ldr	r3, [r3, #32]
   d8160:	9301      	str	r3, [sp, #4]
   d8162:	bd08      	pop	{r3, pc}
   d8164:	0003024c 	.word	0x0003024c

000d8168 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b02      	ldr	r3, [pc, #8]	; (d8174 <log_message+0xc>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8170:	9301      	str	r3, [sp, #4]
   d8172:	bd08      	pop	{r3, pc}
   d8174:	00030260 	.word	0x00030260

000d8178 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <system_mode+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	681b      	ldr	r3, [r3, #0]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	00030220 	.word	0x00030220

000d8188 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <set_system_mode+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	685b      	ldr	r3, [r3, #4]
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	00030220 	.word	0x00030220

000d8198 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <system_delay_ms+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	695b      	ldr	r3, [r3, #20]
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	00030220 	.word	0x00030220

000d81a8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <system_sleep+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	699b      	ldr	r3, [r3, #24]
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	00030220 	.word	0x00030220

000d81b8 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <system_thread_set_state+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	00030220 	.word	0x00030220

000d81c8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b02      	ldr	r3, [pc, #8]	; (d81d4 <system_thread_get_state+0xc>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81d0:	9301      	str	r3, [sp, #4]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	00030220 	.word	0x00030220

000d81d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81d8:	b508      	push	{r3, lr}
   d81da:	4b03      	ldr	r3, [pc, #12]	; (d81e8 <system_ctrl_set_app_request_handler+0x10>)
   d81dc:	681b      	ldr	r3, [r3, #0]
   d81de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d81e2:	9301      	str	r3, [sp, #4]
   d81e4:	bd08      	pop	{r3, pc}
   d81e6:	0000      	.short	0x0000
   d81e8:	00030220 	.word	0x00030220

000d81ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b03      	ldr	r3, [pc, #12]	; (d81fc <system_ctrl_set_result+0x10>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d81f6:	9301      	str	r3, [sp, #4]
   d81f8:	bd08      	pop	{r3, pc}
   d81fa:	0000      	.short	0x0000
   d81fc:	00030220 	.word	0x00030220

000d8200 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <network_connect+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	685b      	ldr	r3, [r3, #4]
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030240 	.word	0x00030240

000d8210 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <network_connecting+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	689b      	ldr	r3, [r3, #8]
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030240 	.word	0x00030240

000d8220 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <network_disconnect+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	68db      	ldr	r3, [r3, #12]
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030240 	.word	0x00030240

000d8230 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <network_ready+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	691b      	ldr	r3, [r3, #16]
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030240 	.word	0x00030240

000d8240 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <network_on+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	695b      	ldr	r3, [r3, #20]
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030240 	.word	0x00030240

000d8250 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <network_off+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	699b      	ldr	r3, [r3, #24]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	00030240 	.word	0x00030240

000d8260 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <network_listen+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	69db      	ldr	r3, [r3, #28]
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	00030240 	.word	0x00030240

000d8270 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <network_listening+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	6a1b      	ldr	r3, [r3, #32]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	00030240 	.word	0x00030240

000d8280 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <network_set_listen_timeout+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	00030240 	.word	0x00030240

000d8290 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <network_get_listen_timeout+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	00030240 	.word	0x00030240

000d82a0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <spark_process+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	689b      	ldr	r3, [r3, #8]
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	00030244 	.word	0x00030244

000d82b0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d82b0:	b508      	push	{r3, lr}
   d82b2:	4b02      	ldr	r3, [pc, #8]	; (d82bc <spark_cloud_flag_connect+0xc>)
   d82b4:	681b      	ldr	r3, [r3, #0]
   d82b6:	68db      	ldr	r3, [r3, #12]
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	bd08      	pop	{r3, pc}
   d82bc:	00030244 	.word	0x00030244

000d82c0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d82c0:	b508      	push	{r3, lr}
   d82c2:	4b02      	ldr	r3, [pc, #8]	; (d82cc <spark_cloud_flag_connected+0xc>)
   d82c4:	681b      	ldr	r3, [r3, #0]
   d82c6:	695b      	ldr	r3, [r3, #20]
   d82c8:	9301      	str	r3, [sp, #4]
   d82ca:	bd08      	pop	{r3, pc}
   d82cc:	00030244 	.word	0x00030244

000d82d0 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d82d0:	b508      	push	{r3, lr}
   d82d2:	4b02      	ldr	r3, [pc, #8]	; (d82dc <spark_sync_time_pending+0xc>)
   d82d4:	681b      	ldr	r3, [r3, #0]
   d82d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	00030244 	.word	0x00030244

000d82e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d82e0:	b508      	push	{r3, lr}
   d82e2:	4b02      	ldr	r3, [pc, #8]	; (d82ec <spark_set_random_seed_from_cloud_handler+0xc>)
   d82e4:	681b      	ldr	r3, [r3, #0]
   d82e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d82e8:	9301      	str	r3, [sp, #4]
   d82ea:	bd08      	pop	{r3, pc}
   d82ec:	00030244 	.word	0x00030244

000d82f0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b02      	ldr	r3, [pc, #8]	; (d82fc <malloc+0xc>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	681b      	ldr	r3, [r3, #0]
   d82f8:	9301      	str	r3, [sp, #4]
   d82fa:	bd08      	pop	{r3, pc}
   d82fc:	0003021c 	.word	0x0003021c

000d8300 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8300:	b508      	push	{r3, lr}
   d8302:	4b02      	ldr	r3, [pc, #8]	; (d830c <free+0xc>)
   d8304:	681b      	ldr	r3, [r3, #0]
   d8306:	685b      	ldr	r3, [r3, #4]
   d8308:	9301      	str	r3, [sp, #4]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	0003021c 	.word	0x0003021c

000d8310 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8310:	b508      	push	{r3, lr}
   d8312:	4b02      	ldr	r3, [pc, #8]	; (d831c <realloc+0xc>)
   d8314:	681b      	ldr	r3, [r3, #0]
   d8316:	689b      	ldr	r3, [r3, #8]
   d8318:	9301      	str	r3, [sp, #4]
   d831a:	bd08      	pop	{r3, pc}
   d831c:	0003021c 	.word	0x0003021c

000d8320 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8320:	b508      	push	{r3, lr}
   d8322:	4b02      	ldr	r3, [pc, #8]	; (d832c <siprintf+0xc>)
   d8324:	681b      	ldr	r3, [r3, #0]
   d8326:	691b      	ldr	r3, [r3, #16]
   d8328:	9301      	str	r3, [sp, #4]
   d832a:	bd08      	pop	{r3, pc}
   d832c:	0003021c 	.word	0x0003021c

000d8330 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8330:	b508      	push	{r3, lr}
   d8332:	4b02      	ldr	r3, [pc, #8]	; (d833c <siscanf+0xc>)
   d8334:	681b      	ldr	r3, [r3, #0]
   d8336:	699b      	ldr	r3, [r3, #24]
   d8338:	9301      	str	r3, [sp, #4]
   d833a:	bd08      	pop	{r3, pc}
   d833c:	0003021c 	.word	0x0003021c

000d8340 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b02      	ldr	r3, [pc, #8]	; (d834c <snprintf+0xc>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	69db      	ldr	r3, [r3, #28]
   d8348:	9301      	str	r3, [sp, #4]
   d834a:	bd08      	pop	{r3, pc}
   d834c:	0003021c 	.word	0x0003021c

000d8350 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8350:	b508      	push	{r3, lr}
   d8352:	4b02      	ldr	r3, [pc, #8]	; (d835c <sniprintf+0xc>)
   d8354:	681b      	ldr	r3, [r3, #0]
   d8356:	6a1b      	ldr	r3, [r3, #32]
   d8358:	9301      	str	r3, [sp, #4]
   d835a:	bd08      	pop	{r3, pc}
   d835c:	0003021c 	.word	0x0003021c

000d8360 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8360:	b508      	push	{r3, lr}
   d8362:	4b02      	ldr	r3, [pc, #8]	; (d836c <vsnprintf+0xc>)
   d8364:	681b      	ldr	r3, [r3, #0]
   d8366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8368:	9301      	str	r3, [sp, #4]
   d836a:	bd08      	pop	{r3, pc}
   d836c:	0003021c 	.word	0x0003021c

000d8370 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8370:	b508      	push	{r3, lr}
   d8372:	4b02      	ldr	r3, [pc, #8]	; (d837c <_malloc_r+0xc>)
   d8374:	681b      	ldr	r3, [r3, #0]
   d8376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8378:	9301      	str	r3, [sp, #4]
   d837a:	bd08      	pop	{r3, pc}
   d837c:	0003021c 	.word	0x0003021c

000d8380 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d8380:	b508      	push	{r3, lr}
   d8382:	4b02      	ldr	r3, [pc, #8]	; (d838c <__errno+0xc>)
   d8384:	681b      	ldr	r3, [r3, #0]
   d8386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8388:	9301      	str	r3, [sp, #4]
   d838a:	bd08      	pop	{r3, pc}
   d838c:	0003021c 	.word	0x0003021c

000d8390 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8390:	2200      	movs	r2, #0
   d8392:	4611      	mov	r1, r2
   d8394:	6840      	ldr	r0, [r0, #4]
   d8396:	f7ff bf6b 	b.w	d8270 <network_listening>

000d839a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d839a:	2200      	movs	r2, #0
   d839c:	4611      	mov	r1, r2
   d839e:	6840      	ldr	r0, [r0, #4]
   d83a0:	f7ff bf76 	b.w	d8290 <network_get_listen_timeout>

000d83a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d83a4:	2200      	movs	r2, #0
   d83a6:	6840      	ldr	r0, [r0, #4]
   d83a8:	f7ff bf6a 	b.w	d8280 <network_set_listen_timeout>

000d83ac <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d83ac:	2200      	movs	r2, #0
   d83ae:	f081 0101 	eor.w	r1, r1, #1
   d83b2:	6840      	ldr	r0, [r0, #4]
   d83b4:	f7ff bf54 	b.w	d8260 <network_listen>

000d83b8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d83b8:	2300      	movs	r3, #0
   d83ba:	461a      	mov	r2, r3
   d83bc:	4619      	mov	r1, r3
   d83be:	6840      	ldr	r0, [r0, #4]
   d83c0:	f7ff bf46 	b.w	d8250 <network_off>

000d83c4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d83c4:	2300      	movs	r3, #0
   d83c6:	461a      	mov	r2, r3
   d83c8:	4619      	mov	r1, r3
   d83ca:	6840      	ldr	r0, [r0, #4]
   d83cc:	f7ff bf38 	b.w	d8240 <network_on>

000d83d0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d83d0:	2200      	movs	r2, #0
   d83d2:	4611      	mov	r1, r2
   d83d4:	6840      	ldr	r0, [r0, #4]
   d83d6:	f7ff bf2b 	b.w	d8230 <network_ready>

000d83da <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d83da:	2200      	movs	r2, #0
   d83dc:	4611      	mov	r1, r2
   d83de:	6840      	ldr	r0, [r0, #4]
   d83e0:	f7ff bf16 	b.w	d8210 <network_connecting>

000d83e4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83e4:	2200      	movs	r2, #0
   d83e6:	2102      	movs	r1, #2
   d83e8:	6840      	ldr	r0, [r0, #4]
   d83ea:	f7ff bf19 	b.w	d8220 <network_disconnect>

000d83ee <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d83ee:	2300      	movs	r3, #0
   d83f0:	461a      	mov	r2, r3
   d83f2:	6840      	ldr	r0, [r0, #4]
   d83f4:	f7ff bf04 	b.w	d8200 <network_connect>

000d83f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d83f8:	4b02      	ldr	r3, [pc, #8]	; (d8404 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d83fa:	2203      	movs	r2, #3
   d83fc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d83fe:	4a02      	ldr	r2, [pc, #8]	; (d8408 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8400:	601a      	str	r2, [r3, #0]
   d8402:	4770      	bx	lr
   d8404:	2003e330 	.word	0x2003e330
   d8408:	000e3d90 	.word	0x000e3d90

000d840c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d840c:	4770      	bx	lr

000d840e <_ZN8SPIClassD0Ev>:
   d840e:	b510      	push	{r4, lr}
   d8410:	4604      	mov	r4, r0
   d8412:	f7fb fe44 	bl	d409e <_ZdlPv>
   d8416:	4620      	mov	r0, r4
   d8418:	bd10      	pop	{r4, pc}
	...

000d841c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d841c:	b570      	push	{r4, r5, r6, lr}
   d841e:	4b08      	ldr	r3, [pc, #32]	; (d8440 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d8420:	6003      	str	r3, [r0, #0]
   d8422:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d8424:	2500      	movs	r5, #0
   d8426:	460e      	mov	r6, r1
   d8428:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d842c:	f7ff fd5c 	bl	d7ee8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d8430:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d8432:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d8434:	f7ff fd00 	bl	d7e38 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d8438:	60a5      	str	r5, [r4, #8]
}
   d843a:	4620      	mov	r0, r4
   d843c:	bd70      	pop	{r4, r5, r6, pc}
   d843e:	bf00      	nop
   d8440:	000e3dc4 	.word	0x000e3dc4

000d8444 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d8444:	7900      	ldrb	r0, [r0, #4]
   d8446:	f7ff bcff 	b.w	d7e48 <HAL_SPI_Is_Enabled>

000d844a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d844a:	4601      	mov	r1, r0
   d844c:	2200      	movs	r2, #0
   d844e:	208c      	movs	r0, #140	; 0x8c
   d8450:	f7ff bd2a 	b.w	d7ea8 <HAL_Core_System_Reset_Ex>

000d8454 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d8454:	2000      	movs	r0, #0
   d8456:	f7ff bff8 	b.w	d844a <_ZN11SystemClass5resetEm>
	...

000d845c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d845c:	b510      	push	{r4, lr}
   d845e:	4604      	mov	r4, r0
   d8460:	4608      	mov	r0, r1
   d8462:	4611      	mov	r1, r2
   d8464:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d8466:	2300      	movs	r3, #0
   d8468:	f7ff fe9e 	bl	d81a8 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d846c:	4b06      	ldr	r3, [pc, #24]	; (d8488 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d846e:	2200      	movs	r2, #0
   d8470:	701a      	strb	r2, [r3, #0]
   d8472:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8476:	8058      	strh	r0, [r3, #2]
   d8478:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d847a:	681a      	ldr	r2, [r3, #0]
   d847c:	889b      	ldrh	r3, [r3, #4]
   d847e:	6022      	str	r2, [r4, #0]
   d8480:	80a3      	strh	r3, [r4, #4]
}
   d8482:	4620      	mov	r0, r4
   d8484:	bd10      	pop	{r4, pc}
   d8486:	bf00      	nop
   d8488:	2003e338 	.word	0x2003e338

000d848c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d848c:	4b04      	ldr	r3, [pc, #16]	; (d84a0 <_GLOBAL__sub_I_System+0x14>)
   d848e:	2000      	movs	r0, #0
   d8490:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8494:	7018      	strb	r0, [r3, #0]
   d8496:	8058      	strh	r0, [r3, #2]
   d8498:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d849a:	f7ff be75 	b.w	d8188 <set_system_mode>
   d849e:	bf00      	nop
   d84a0:	2003e338 	.word	0x2003e338

000d84a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d84a4:	b510      	push	{r4, lr}
   d84a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d84a8:	f008 fd62 	bl	e0f70 <strlen>
   d84ac:	3801      	subs	r0, #1
   d84ae:	1823      	adds	r3, r4, r0
   d84b0:	4620      	mov	r0, r4
	while(i<j){
   d84b2:	4298      	cmp	r0, r3
   d84b4:	d206      	bcs.n	d84c4 <_Z11str_reversePc+0x20>
		c = *i;
   d84b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d84b8:	7819      	ldrb	r1, [r3, #0]
   d84ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d84be:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d84c2:	e7f6      	b.n	d84b2 <_Z11str_reversePc+0xe>
   d84c4:	bd10      	pop	{r4, pc}

000d84c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d84c6:	b570      	push	{r4, r5, r6, lr}
   d84c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d84ca:	1e91      	subs	r1, r2, #2
   d84cc:	2922      	cmp	r1, #34	; 0x22
   d84ce:	d820      	bhi.n	d8512 <ultoa+0x4c>
   d84d0:	4625      	mov	r5, r4
   d84d2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d84d4:	b910      	cbnz	r0, d84dc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d84d6:	4423      	add	r3, r4
            *ptr++ = '0';
   d84d8:	2230      	movs	r2, #48	; 0x30
   d84da:	e00e      	b.n	d84fa <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d84dc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d84e0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d84e4:	b2c1      	uxtb	r1, r0
   d84e6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d84ea:	2809      	cmp	r0, #9
                *ptr += '0';
   d84ec:	bf94      	ite	ls
   d84ee:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d84f0:	3157      	addhi	r1, #87	; 0x57
   d84f2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d84f6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d84f8:	e7eb      	b.n	d84d2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d84fa:	4299      	cmp	r1, r3
   d84fc:	d202      	bcs.n	d8504 <ultoa+0x3e>
            *ptr++ = '0';
   d84fe:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d8502:	e7fa      	b.n	d84fa <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d8504:	2300      	movs	r3, #0
	str_reverse(buffer);
   d8506:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d8508:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d850a:	f7ff ffcb 	bl	d84a4 <_Z11str_reversePc>
	return buffer;
   d850e:	4620      	mov	r0, r4
   d8510:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d8512:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d8514:	bd70      	pop	{r4, r5, r6, pc}

000d8516 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d8516:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d8518:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d851a:	460c      	mov	r4, r1
   d851c:	4615      	mov	r5, r2
	if(a<0){
   d851e:	da0b      	bge.n	d8538 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d8520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d8524:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d8528:	bf14      	ite	ne
   d852a:	4258      	negne	r0, r3
   d852c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d852e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d8530:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d8532:	462a      	mov	r2, r5
   d8534:	4419      	add	r1, r3
   d8536:	e000      	b.n	d853a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d8538:	2301      	movs	r3, #1
   d853a:	f7ff ffc4 	bl	d84c6 <ultoa>
	}
	return buffer;
}
   d853e:	4620      	mov	r0, r4
   d8540:	bd38      	pop	{r3, r4, r5, pc}

000d8542 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8542:	b510      	push	{r4, lr}
   d8544:	4604      	mov	r4, r0
{
	free(buffer);
   d8546:	6800      	ldr	r0, [r0, #0]
   d8548:	f7ff feda 	bl	d8300 <free>
}
   d854c:	4620      	mov	r0, r4
   d854e:	bd10      	pop	{r4, pc}

000d8550 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8550:	b510      	push	{r4, lr}
   d8552:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8554:	6800      	ldr	r0, [r0, #0]
   d8556:	b108      	cbz	r0, d855c <_ZN6String10invalidateEv+0xc>
   d8558:	f7ff fed2 	bl	d8300 <free>
	buffer = NULL;
   d855c:	2300      	movs	r3, #0
   d855e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8560:	60a3      	str	r3, [r4, #8]
   d8562:	6063      	str	r3, [r4, #4]
   d8564:	bd10      	pop	{r4, pc}

000d8566 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8566:	b538      	push	{r3, r4, r5, lr}
   d8568:	4604      	mov	r4, r0
   d856a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d856c:	6800      	ldr	r0, [r0, #0]
   d856e:	3101      	adds	r1, #1
   d8570:	f7ff fece 	bl	d8310 <realloc>
	if (newbuffer) {
   d8574:	b110      	cbz	r0, d857c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8576:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d857a:	2001      	movs	r0, #1
	}
	return 0;
}
   d857c:	bd38      	pop	{r3, r4, r5, pc}

000d857e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d857e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8580:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8582:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8584:	b113      	cbz	r3, d858c <_ZN6String7reserveEj+0xe>
   d8586:	6843      	ldr	r3, [r0, #4]
   d8588:	428b      	cmp	r3, r1
   d858a:	d207      	bcs.n	d859c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d858c:	4620      	mov	r0, r4
   d858e:	f7ff ffea 	bl	d8566 <_ZN6String12changeBufferEj>
   d8592:	b120      	cbz	r0, d859e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8594:	68a3      	ldr	r3, [r4, #8]
   d8596:	b90b      	cbnz	r3, d859c <_ZN6String7reserveEj+0x1e>
   d8598:	6822      	ldr	r2, [r4, #0]
   d859a:	7013      	strb	r3, [r2, #0]
   d859c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d859e:	bd10      	pop	{r4, pc}

000d85a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d85a0:	b570      	push	{r4, r5, r6, lr}
   d85a2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d85a4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d85a6:	4604      	mov	r4, r0
   d85a8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d85aa:	f7ff ffe8 	bl	d857e <_ZN6String7reserveEj>
   d85ae:	b918      	cbnz	r0, d85b8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d85b0:	4620      	mov	r0, r4
   d85b2:	f7ff ffcd 	bl	d8550 <_ZN6String10invalidateEv>
		return *this;
   d85b6:	e009      	b.n	d85cc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d85b8:	462a      	mov	r2, r5
   d85ba:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d85bc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d85be:	6820      	ldr	r0, [r4, #0]
   d85c0:	f007 ff74 	bl	e04ac <memcpy>
	buffer[len] = 0;
   d85c4:	6822      	ldr	r2, [r4, #0]
   d85c6:	68a3      	ldr	r3, [r4, #8]
   d85c8:	2100      	movs	r1, #0
   d85ca:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d85cc:	4620      	mov	r0, r4
   d85ce:	bd70      	pop	{r4, r5, r6, pc}

000d85d0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d85d0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d85d2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d85d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d85d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d85d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d85da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d85dc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d85de:	460d      	mov	r5, r1
   d85e0:	b139      	cbz	r1, d85f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d85e2:	4608      	mov	r0, r1
   d85e4:	f008 fcc4 	bl	e0f70 <strlen>
   d85e8:	4629      	mov	r1, r5
   d85ea:	4602      	mov	r2, r0
   d85ec:	4620      	mov	r0, r4
   d85ee:	f7ff ffd7 	bl	d85a0 <_ZN6String4copyEPKcj>
}
   d85f2:	4620      	mov	r0, r4
   d85f4:	bd38      	pop	{r3, r4, r5, pc}

000d85f6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d85f6:	b538      	push	{r3, r4, r5, lr}
   d85f8:	4605      	mov	r5, r0
	if (buffer) {
   d85fa:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d85fc:	460c      	mov	r4, r1
	if (buffer) {
   d85fe:	b160      	cbz	r0, d861a <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d8600:	686a      	ldr	r2, [r5, #4]
   d8602:	688b      	ldr	r3, [r1, #8]
   d8604:	429a      	cmp	r2, r3
   d8606:	d306      	bcc.n	d8616 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8608:	6809      	ldr	r1, [r1, #0]
   d860a:	f007 ff95 	bl	e0538 <strcpy>
			len = rhs.len;
   d860e:	68a3      	ldr	r3, [r4, #8]
   d8610:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8612:	2300      	movs	r3, #0
   d8614:	e00a      	b.n	d862c <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d8616:	f7ff fe73 	bl	d8300 <free>
		}
	}
	buffer = rhs.buffer;
   d861a:	6823      	ldr	r3, [r4, #0]
   d861c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d861e:	6863      	ldr	r3, [r4, #4]
   d8620:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8622:	68a3      	ldr	r3, [r4, #8]
   d8624:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8626:	2300      	movs	r3, #0
   d8628:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d862a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d862c:	60a3      	str	r3, [r4, #8]
   d862e:	bd38      	pop	{r3, r4, r5, pc}

000d8630 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8630:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8632:	b510      	push	{r4, lr}
   d8634:	460b      	mov	r3, r1
   d8636:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8638:	d007      	beq.n	d864a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d863a:	6809      	ldr	r1, [r1, #0]
   d863c:	b119      	cbz	r1, d8646 <_ZN6StringaSERKS_+0x16>
   d863e:	689a      	ldr	r2, [r3, #8]
   d8640:	f7ff ffae 	bl	d85a0 <_ZN6String4copyEPKcj>
   d8644:	e001      	b.n	d864a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8646:	f7ff ff83 	bl	d8550 <_ZN6String10invalidateEv>

	return *this;
}
   d864a:	4620      	mov	r0, r4
   d864c:	bd10      	pop	{r4, pc}

000d864e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d864e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8650:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8652:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8654:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8656:	6043      	str	r3, [r0, #4]
	len = 0;
   d8658:	6083      	str	r3, [r0, #8]
	flags = 0;
   d865a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d865c:	f7ff ffe8 	bl	d8630 <_ZN6StringaSERKS_>
}
   d8660:	4620      	mov	r0, r4
   d8662:	bd10      	pop	{r4, pc}

000d8664 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8664:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d8666:	b510      	push	{r4, lr}
   d8668:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d866a:	d001      	beq.n	d8670 <_ZN6StringaSEOS_+0xc>
   d866c:	f7ff ffc3 	bl	d85f6 <_ZN6String4moveERS_>
	return *this;
}
   d8670:	4620      	mov	r0, r4
   d8672:	bd10      	pop	{r4, pc}

000d8674 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8674:	b538      	push	{r3, r4, r5, lr}
   d8676:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8678:	460c      	mov	r4, r1
   d867a:	b141      	cbz	r1, d868e <_ZN6StringaSEPKc+0x1a>
   d867c:	4608      	mov	r0, r1
   d867e:	f008 fc77 	bl	e0f70 <strlen>
   d8682:	4621      	mov	r1, r4
   d8684:	4602      	mov	r2, r0
   d8686:	4628      	mov	r0, r5
   d8688:	f7ff ff8a 	bl	d85a0 <_ZN6String4copyEPKcj>
   d868c:	e001      	b.n	d8692 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d868e:	f7ff ff5f 	bl	d8550 <_ZN6String10invalidateEv>

	return *this;
}
   d8692:	4628      	mov	r0, r5
   d8694:	bd38      	pop	{r3, r4, r5, pc}

000d8696 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d8696:	b510      	push	{r4, lr}
   d8698:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d869a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d869c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d869e:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d86a0:	6063      	str	r3, [r4, #4]
	len = 0;
   d86a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d86a4:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d86a6:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d86a8:	a901      	add	r1, sp, #4
   d86aa:	f7ff ff34 	bl	d8516 <itoa>
	*this = buf;
   d86ae:	a901      	add	r1, sp, #4
   d86b0:	4620      	mov	r0, r4
   d86b2:	f7ff ffdf 	bl	d8674 <_ZN6StringaSEPKc>
}
   d86b6:	4620      	mov	r0, r4
   d86b8:	b00a      	add	sp, #40	; 0x28
   d86ba:	bd10      	pop	{r4, pc}

000d86bc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d86bc:	b570      	push	{r4, r5, r6, lr}
   d86be:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d86c0:	460e      	mov	r6, r1
   d86c2:	b909      	cbnz	r1, d86c8 <_ZN6String6concatEPKcj+0xc>
   d86c4:	2000      	movs	r0, #0
   d86c6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d86c8:	b16a      	cbz	r2, d86e6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d86ca:	6883      	ldr	r3, [r0, #8]
   d86cc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d86ce:	4629      	mov	r1, r5
   d86d0:	f7ff ff55 	bl	d857e <_ZN6String7reserveEj>
   d86d4:	2800      	cmp	r0, #0
   d86d6:	d0f5      	beq.n	d86c4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d86d8:	6820      	ldr	r0, [r4, #0]
   d86da:	68a3      	ldr	r3, [r4, #8]
   d86dc:	4631      	mov	r1, r6
   d86de:	4418      	add	r0, r3
   d86e0:	f007 ff2a 	bl	e0538 <strcpy>
	len = newlen;
   d86e4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d86e6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d86e8:	bd70      	pop	{r4, r5, r6, pc}

000d86ea <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d86ea:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d86ec:	688a      	ldr	r2, [r1, #8]
   d86ee:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d86f0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d86f2:	f7ff ffe3 	bl	d86bc <_ZN6String6concatEPKcj>
   d86f6:	b910      	cbnz	r0, d86fe <_ZplRK15StringSumHelperRK6String+0x14>
   d86f8:	4620      	mov	r0, r4
   d86fa:	f7ff ff29 	bl	d8550 <_ZN6String10invalidateEv>
	return a;
}
   d86fe:	4620      	mov	r0, r4
   d8700:	bd10      	pop	{r4, pc}

000d8702 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d8702:	b538      	push	{r3, r4, r5, lr}
   d8704:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8706:	460d      	mov	r5, r1
   d8708:	b141      	cbz	r1, d871c <_ZplRK15StringSumHelperPKc+0x1a>
   d870a:	4608      	mov	r0, r1
   d870c:	f008 fc30 	bl	e0f70 <strlen>
   d8710:	4629      	mov	r1, r5
   d8712:	4602      	mov	r2, r0
   d8714:	4620      	mov	r0, r4
   d8716:	f7ff ffd1 	bl	d86bc <_ZN6String6concatEPKcj>
   d871a:	b910      	cbnz	r0, d8722 <_ZplRK15StringSumHelperPKc+0x20>
   d871c:	4620      	mov	r0, r4
   d871e:	f7ff ff17 	bl	d8550 <_ZN6String10invalidateEv>
	return a;
}
   d8722:	4620      	mov	r0, r4
   d8724:	bd38      	pop	{r3, r4, r5, pc}

000d8726 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8726:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8728:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d872a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d872c:	b912      	cbnz	r2, d8734 <_ZNK6String6equalsEPKc+0xe>
   d872e:	b919      	cbnz	r1, d8738 <_ZNK6String6equalsEPKc+0x12>
   d8730:	2001      	movs	r0, #1
   d8732:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8734:	b911      	cbnz	r1, d873c <_ZNK6String6equalsEPKc+0x16>
   d8736:	6803      	ldr	r3, [r0, #0]
   d8738:	7818      	ldrb	r0, [r3, #0]
   d873a:	e002      	b.n	d8742 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d873c:	6800      	ldr	r0, [r0, #0]
   d873e:	f007 fef1 	bl	e0524 <strcmp>
   d8742:	fab0 f080 	clz	r0, r0
   d8746:	0940      	lsrs	r0, r0, #5
}
   d8748:	bd08      	pop	{r3, pc}

000d874a <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
        return *this;
}

String& String::toLowerCase(void)
{
   d874a:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   d874c:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
        return *this;
}

String& String::toLowerCase(void)
{
   d874e:	4605      	mov	r5, r0
	if (buffer) {
   d8750:	b134      	cbz	r4, d8760 <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   d8752:	7820      	ldrb	r0, [r4, #0]
   d8754:	b120      	cbz	r0, d8760 <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   d8756:	f009 fb87 	bl	e1e68 <tolower>
   d875a:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   d875e:	e7f8      	b.n	d8752 <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   d8760:	4628      	mov	r0, r5
   d8762:	bd38      	pop	{r3, r4, r5, pc}

000d8764 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d8764:	b40e      	push	{r1, r2, r3}
   d8766:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d8768:	ac09      	add	r4, sp, #36	; 0x24
   d876a:	4605      	mov	r5, r0
   d876c:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d8770:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8772:	4623      	mov	r3, r4
   d8774:	463a      	mov	r2, r7
   d8776:	2105      	movs	r1, #5
   d8778:	a802      	add	r0, sp, #8
   d877a:	f7ff fdf1 	bl	d8360 <vsnprintf>
    va_end(marker);

    String result;
   d877e:	490c      	ldr	r1, [pc, #48]	; (d87b0 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8780:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d8782:	4628      	mov	r0, r5
   d8784:	f7ff ff24 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d8788:	4631      	mov	r1, r6
   d878a:	4628      	mov	r0, r5
   d878c:	f7ff fef7 	bl	d857e <_ZN6String7reserveEj>
    if (result.buffer) {
   d8790:	6828      	ldr	r0, [r5, #0]
   d8792:	b130      	cbz	r0, d87a2 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8794:	4623      	mov	r3, r4
   d8796:	463a      	mov	r2, r7
   d8798:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d879a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d879c:	f7ff fde0 	bl	d8360 <vsnprintf>
        va_end(marker);
        result.len = n;
   d87a0:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d87a2:	4628      	mov	r0, r5
   d87a4:	b004      	add	sp, #16
   d87a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d87aa:	b003      	add	sp, #12
   d87ac:	4770      	bx	lr
   d87ae:	bf00      	nop
   d87b0:	000e3de9 	.word	0x000e3de9

000d87b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d87b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87b6:	4606      	mov	r6, r0
   d87b8:	460d      	mov	r5, r1
   d87ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d87bc:	2400      	movs	r4, #0
  while (size--) {
   d87be:	42bd      	cmp	r5, r7
   d87c0:	d00c      	beq.n	d87dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d87c2:	6833      	ldr	r3, [r6, #0]
   d87c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d87c8:	689b      	ldr	r3, [r3, #8]
   d87ca:	4630      	mov	r0, r6
   d87cc:	4798      	blx	r3
     if (chunk>=0)
   d87ce:	2800      	cmp	r0, #0
   d87d0:	db01      	blt.n	d87d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d87d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d87d4:	e7f3      	b.n	d87be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d87d6:	2c00      	cmp	r4, #0
   d87d8:	bf08      	it	eq
   d87da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d87dc:	4620      	mov	r0, r4
   d87de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d87e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d87e0:	b570      	push	{r4, r5, r6, lr}
   d87e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d87e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d87e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d87e8:	b149      	cbz	r1, d87fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d87ea:	f008 fbc1 	bl	e0f70 <strlen>
   d87ee:	682b      	ldr	r3, [r5, #0]
   d87f0:	4602      	mov	r2, r0
   d87f2:	4621      	mov	r1, r4
   d87f4:	4628      	mov	r0, r5
   d87f6:	68db      	ldr	r3, [r3, #12]
    }
   d87f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d87fc:	4718      	bx	r3
    }
   d87fe:	bd70      	pop	{r4, r5, r6, pc}

000d8800 <_ZN5Print5printEPKc>:
   d8800:	b508      	push	{r3, lr}
   d8802:	f7ff ffed 	bl	d87e0 <_ZN5Print5writeEPKc>
   d8806:	bd08      	pop	{r3, pc}

000d8808 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8808:	6803      	ldr	r3, [r0, #0]
   d880a:	689b      	ldr	r3, [r3, #8]
   d880c:	4718      	bx	r3

000d880e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d880e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8810:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8812:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8814:	f7ff fff8 	bl	d8808 <_ZN5Print5printEc>
  n += print('\n');
   d8818:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d881a:	4604      	mov	r4, r0
  n += print('\n');
   d881c:	4628      	mov	r0, r5
   d881e:	f7ff fff3 	bl	d8808 <_ZN5Print5printEc>
  return n;
}
   d8822:	4420      	add	r0, r4
   d8824:	bd38      	pop	{r3, r4, r5, pc}

000d8826 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8826:	b538      	push	{r3, r4, r5, lr}
   d8828:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d882a:	f7ff ffd9 	bl	d87e0 <_ZN5Print5writeEPKc>
   d882e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8830:	4628      	mov	r0, r5
   d8832:	f7ff ffec 	bl	d880e <_ZN5Print7printlnEv>
  return n;
}
   d8836:	4420      	add	r0, r4
   d8838:	bd38      	pop	{r3, r4, r5, pc}

000d883a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d883a:	b530      	push	{r4, r5, lr}
   d883c:	b08b      	sub	sp, #44	; 0x2c
   d883e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8840:	2100      	movs	r1, #0
   d8842:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8846:	2a01      	cmp	r2, #1
   d8848:	bf98      	it	ls
   d884a:	220a      	movls	r2, #10
   d884c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d8850:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d8854:	fb05 3312 	mls	r3, r5, r2, r3
   d8858:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d885c:	2b09      	cmp	r3, #9
   d885e:	bf94      	ite	ls
   d8860:	3330      	addls	r3, #48	; 0x30
   d8862:	3337      	addhi	r3, #55	; 0x37
   d8864:	b2db      	uxtb	r3, r3
   d8866:	4621      	mov	r1, r4
   d8868:	f804 3901 	strb.w	r3, [r4], #-1
   d886c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d886e:	2d00      	cmp	r5, #0
   d8870:	d1ee      	bne.n	d8850 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8872:	f7ff ffb5 	bl	d87e0 <_ZN5Print5writeEPKc>
}
   d8876:	b00b      	add	sp, #44	; 0x2c
   d8878:	bd30      	pop	{r4, r5, pc}

000d887a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d887a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d887c:	b92a      	cbnz	r2, d888a <_ZN5Print5printEmi+0x10>
   d887e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d8880:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d8884:	689b      	ldr	r3, [r3, #8]
   d8886:	b2c9      	uxtb	r1, r1
   d8888:	4718      	bx	r3
  else return printNumber(n, base);
   d888a:	b2d2      	uxtb	r2, r2
}
   d888c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d8890:	f7ff bfd3 	b.w	d883a <_ZN5Print11printNumberEmh>

000d8894 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d8894:	f7ff bff1 	b.w	d887a <_ZN5Print5printEmi>

000d8898 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d8898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d889c:	4607      	mov	r7, r0
   d889e:	460e      	mov	r6, r1
  if (base == 0) {
   d88a0:	4615      	mov	r5, r2
   d88a2:	b92a      	cbnz	r2, d88b0 <_ZN5Print5printEli+0x18>
    return write(n);
   d88a4:	6803      	ldr	r3, [r0, #0]
   d88a6:	b2c9      	uxtb	r1, r1
   d88a8:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d88aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d88ae:	4718      	bx	r3
  } else if (base == 10) {
   d88b0:	2a0a      	cmp	r2, #10
   d88b2:	d102      	bne.n	d88ba <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d88b4:	2900      	cmp	r1, #0
   d88b6:	da01      	bge.n	d88bc <_ZN5Print5printEli+0x24>
   d88b8:	e004      	b.n	d88c4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d88ba:	b2d2      	uxtb	r2, r2
  }
}
   d88bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d88c0:	f7ff bfbb 	b.w	d883a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d88c4:	212d      	movs	r1, #45	; 0x2d
   d88c6:	f7ff ff9f 	bl	d8808 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d88ca:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d88cc:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d88ce:	4271      	negs	r1, r6
   d88d0:	4638      	mov	r0, r7
   d88d2:	f7ff ffb2 	bl	d883a <_ZN5Print11printNumberEmh>
   d88d6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d88d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d88dc <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d88dc:	f7ff bfdc 	b.w	d8898 <_ZN5Print5printEli>

000d88e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d88e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d88e4:	ec57 6b10 	vmov	r6, r7, d0
   d88e8:	4682      	mov	sl, r0
   d88ea:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d88ec:	ee10 2a10 	vmov	r2, s0
   d88f0:	463b      	mov	r3, r7
   d88f2:	ee10 0a10 	vmov	r0, s0
   d88f6:	4639      	mov	r1, r7
   d88f8:	f007 fbd8 	bl	e00ac <__aeabi_dcmpun>
   d88fc:	b108      	cbz	r0, d8902 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d88fe:	4948      	ldr	r1, [pc, #288]	; (d8a20 <_ZN5Print10printFloatEdh+0x140>)
   d8900:	e012      	b.n	d8928 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d8902:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d8906:	f04f 32ff 	mov.w	r2, #4294967295
   d890a:	4b46      	ldr	r3, [pc, #280]	; (d8a24 <_ZN5Print10printFloatEdh+0x144>)
   d890c:	4630      	mov	r0, r6
   d890e:	4649      	mov	r1, r9
   d8910:	f007 fbcc 	bl	e00ac <__aeabi_dcmpun>
   d8914:	b968      	cbnz	r0, d8932 <_ZN5Print10printFloatEdh+0x52>
   d8916:	f04f 32ff 	mov.w	r2, #4294967295
   d891a:	4b42      	ldr	r3, [pc, #264]	; (d8a24 <_ZN5Print10printFloatEdh+0x144>)
   d891c:	4630      	mov	r0, r6
   d891e:	4649      	mov	r1, r9
   d8920:	f007 fba6 	bl	e0070 <__aeabi_dcmple>
   d8924:	b928      	cbnz	r0, d8932 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8926:	4940      	ldr	r1, [pc, #256]	; (d8a28 <_ZN5Print10printFloatEdh+0x148>)
   d8928:	4650      	mov	r0, sl
   d892a:	f7ff ff59 	bl	d87e0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8932:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8936:	4b3d      	ldr	r3, [pc, #244]	; (d8a2c <_ZN5Print10printFloatEdh+0x14c>)
   d8938:	4630      	mov	r0, r6
   d893a:	4639      	mov	r1, r7
   d893c:	f007 fbac 	bl	e0098 <__aeabi_dcmpgt>
   d8940:	b108      	cbz	r0, d8946 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8942:	493b      	ldr	r1, [pc, #236]	; (d8a30 <_ZN5Print10printFloatEdh+0x150>)
   d8944:	e7f0      	b.n	d8928 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8946:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d894a:	4b3a      	ldr	r3, [pc, #232]	; (d8a34 <_ZN5Print10printFloatEdh+0x154>)
   d894c:	4630      	mov	r0, r6
   d894e:	4639      	mov	r1, r7
   d8950:	f007 fb84 	bl	e005c <__aeabi_dcmplt>
   d8954:	2800      	cmp	r0, #0
   d8956:	d1f4      	bne.n	d8942 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d8958:	2200      	movs	r2, #0
   d895a:	2300      	movs	r3, #0
   d895c:	4630      	mov	r0, r6
   d895e:	4639      	mov	r1, r7
   d8960:	f007 fb7c 	bl	e005c <__aeabi_dcmplt>
   d8964:	b140      	cbz	r0, d8978 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d8966:	212d      	movs	r1, #45	; 0x2d
   d8968:	4650      	mov	r0, sl
   d896a:	f7ff ff4d 	bl	d8808 <_ZN5Print5printEc>
     number = -number;
   d896e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d8972:	4604      	mov	r4, r0
     number = -number;
   d8974:	461f      	mov	r7, r3
   d8976:	e000      	b.n	d897a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d8978:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d897a:	492f      	ldr	r1, [pc, #188]	; (d8a38 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d897c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d8980:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d8982:	fa5f f388 	uxtb.w	r3, r8
   d8986:	429d      	cmp	r5, r3
   d8988:	d906      	bls.n	d8998 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d898a:	2200      	movs	r2, #0
   d898c:	4b2b      	ldr	r3, [pc, #172]	; (d8a3c <_ZN5Print10printFloatEdh+0x15c>)
   d898e:	f007 fa1d 	bl	dfdcc <__aeabi_ddiv>
   d8992:	f108 0801 	add.w	r8, r8, #1
   d8996:	e7f4      	b.n	d8982 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d8998:	4632      	mov	r2, r6
   d899a:	463b      	mov	r3, r7
   d899c:	f006 ff3a 	bl	df814 <__adddf3>
   d89a0:	460f      	mov	r7, r1
   d89a2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d89a4:	f007 fbc0 	bl	e0128 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d89a8:	220a      	movs	r2, #10
   d89aa:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d89ac:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d89ae:	4650      	mov	r0, sl
   d89b0:	f7ff ff43 	bl	d883a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d89b4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d89b6:	b37d      	cbz	r5, d8a18 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d89b8:	4640      	mov	r0, r8
   d89ba:	f007 f867 	bl	dfa8c <__aeabi_ui2d>
   d89be:	4602      	mov	r2, r0
   d89c0:	460b      	mov	r3, r1
   d89c2:	4630      	mov	r0, r6
   d89c4:	4639      	mov	r1, r7
   d89c6:	f006 ff23 	bl	df810 <__aeabi_dsub>
   d89ca:	4606      	mov	r6, r0
   d89cc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d89ce:	4650      	mov	r0, sl
   d89d0:	491b      	ldr	r1, [pc, #108]	; (d8a40 <_ZN5Print10printFloatEdh+0x160>)
   d89d2:	f7ff ff05 	bl	d87e0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d89d6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d89d8:	4b18      	ldr	r3, [pc, #96]	; (d8a3c <_ZN5Print10printFloatEdh+0x15c>)
   d89da:	2200      	movs	r2, #0
   d89dc:	4630      	mov	r0, r6
   d89de:	4639      	mov	r1, r7
   d89e0:	f007 f8ca 	bl	dfb78 <__aeabi_dmul>
   d89e4:	460f      	mov	r7, r1
   d89e6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d89e8:	f007 fb76 	bl	e00d8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d89ec:	220a      	movs	r2, #10
   d89ee:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d89f0:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d89f2:	4650      	mov	r0, sl
   d89f4:	f7ff ff50 	bl	d8898 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d89f8:	4404      	add	r4, r0
    remainder -= toPrint;
   d89fa:	4640      	mov	r0, r8
   d89fc:	f007 f856 	bl	dfaac <__aeabi_i2d>
   d8a00:	4602      	mov	r2, r0
   d8a02:	460b      	mov	r3, r1
   d8a04:	4630      	mov	r0, r6
   d8a06:	4639      	mov	r1, r7
   d8a08:	f006 ff02 	bl	df810 <__aeabi_dsub>
   d8a0c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8a0e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d8a12:	4606      	mov	r6, r0
   d8a14:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d8a16:	d1df      	bne.n	d89d8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d8a18:	4620      	mov	r0, r4
   d8a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a1e:	bf00      	nop
   d8a20:	000e3dcc 	.word	0x000e3dcc
   d8a24:	7fefffff 	.word	0x7fefffff
   d8a28:	000e3dd4 	.word	0x000e3dd4
   d8a2c:	41efffff 	.word	0x41efffff
   d8a30:	000e3dd0 	.word	0x000e3dd0
   d8a34:	c1efffff 	.word	0xc1efffff
   d8a38:	3fe00000 	.word	0x3fe00000
   d8a3c:	40240000 	.word	0x40240000
   d8a40:	000e3776 	.word	0x000e3776

000d8a44 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8a44:	b2c9      	uxtb	r1, r1
   d8a46:	f7ff bf4b 	b.w	d88e0 <_ZN5Print10printFloatEdh>

000d8a4a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d8a4a:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8a4c:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d8a4e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d8a50:	f7ff ff46 	bl	d88e0 <_ZN5Print10printFloatEdh>
   d8a54:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d8a56:	4628      	mov	r0, r5
   d8a58:	f7ff fed9 	bl	d880e <_ZN5Print7printlnEv>
  return n;
}
   d8a5c:	4420      	add	r0, r4
   d8a5e:	bd38      	pop	{r3, r4, r5, pc}

000d8a60 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8a60:	b40c      	push	{r2, r3}
   d8a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8a66:	b087      	sub	sp, #28
   d8a68:	af00      	add	r7, sp, #0
   d8a6a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d8a6e:	4605      	mov	r5, r0
   d8a70:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d8a74:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d8a76:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d8a78:	4623      	mov	r3, r4
   d8a7a:	464a      	mov	r2, r9
   d8a7c:	2114      	movs	r1, #20
   d8a7e:	1d38      	adds	r0, r7, #4
   d8a80:	f7ff fc6e 	bl	d8360 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d8a84:	2813      	cmp	r0, #19
   d8a86:	d805      	bhi.n	d8a94 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8a88:	1d39      	adds	r1, r7, #4
   d8a8a:	4628      	mov	r0, r5
   d8a8c:	f7ff fea8 	bl	d87e0 <_ZN5Print5writeEPKc>
   d8a90:	4604      	mov	r4, r0
   d8a92:	e013      	b.n	d8abc <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8a94:	f100 0308 	add.w	r3, r0, #8
   d8a98:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8a9c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8a9e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8aa2:	1c41      	adds	r1, r0, #1
   d8aa4:	4623      	mov	r3, r4
   d8aa6:	464a      	mov	r2, r9
   d8aa8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8aaa:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8aac:	f7ff fc58 	bl	d8360 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8ab0:	4669      	mov	r1, sp
   d8ab2:	4628      	mov	r0, r5
   d8ab4:	f7ff fe94 	bl	d87e0 <_ZN5Print5writeEPKc>
   d8ab8:	4604      	mov	r4, r0
   d8aba:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8abc:	b11e      	cbz	r6, d8ac6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8abe:	4628      	mov	r0, r5
   d8ac0:	f7ff fea5 	bl	d880e <_ZN5Print7printlnEv>
   d8ac4:	4404      	add	r4, r0
    return n;
}
   d8ac6:	4620      	mov	r0, r4
   d8ac8:	371c      	adds	r7, #28
   d8aca:	46bd      	mov	sp, r7
   d8acc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8ad0:	b002      	add	sp, #8
   d8ad2:	4770      	bx	lr

000d8ad4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8ad4:	b510      	push	{r4, lr}
   d8ad6:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8ad8:	f7ff f9ce 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8adc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8ade:	6823      	ldr	r3, [r4, #0]
   d8ae0:	4620      	mov	r0, r4
   d8ae2:	695b      	ldr	r3, [r3, #20]
   d8ae4:	4798      	blx	r3
    if (c >= 0) return c;
   d8ae6:	2800      	cmp	r0, #0
   d8ae8:	da08      	bge.n	d8afc <_ZN6Stream9timedReadEv+0x28>
   d8aea:	f7ff f9c5 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d8aee:	68e3      	ldr	r3, [r4, #12]
   d8af0:	1ac0      	subs	r0, r0, r3
   d8af2:	68a3      	ldr	r3, [r4, #8]
   d8af4:	4298      	cmp	r0, r3
   d8af6:	d3f2      	bcc.n	d8ade <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d8af8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8afc:	bd10      	pop	{r4, pc}

000d8afe <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d8afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8b02:	4680      	mov	r8, r0
   d8b04:	460d      	mov	r5, r1
   d8b06:	188f      	adds	r7, r1, r2
   d8b08:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d8b0a:	42bc      	cmp	r4, r7
   d8b0c:	eba4 0605 	sub.w	r6, r4, r5
   d8b10:	d007      	beq.n	d8b22 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d8b12:	4640      	mov	r0, r8
   d8b14:	f7ff ffde 	bl	d8ad4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d8b18:	2800      	cmp	r0, #0
   d8b1a:	db02      	blt.n	d8b22 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d8b1c:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d8b20:	e7f3      	b.n	d8b0a <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d8b22:	4630      	mov	r0, r6
   d8b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8b28 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8b28:	4b01      	ldr	r3, [pc, #4]	; (d8b30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8b2a:	4a02      	ldr	r2, [pc, #8]	; (d8b34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8b2c:	601a      	str	r2, [r3, #0]
   d8b2e:	4770      	bx	lr
   d8b30:	2003e340 	.word	0x2003e340
   d8b34:	000e3e82 	.word	0x000e3e82

000d8b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d8b38:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d8b3a:	2000      	movs	r0, #0
   d8b3c:	f7ff fbc8 	bl	d82d0 <spark_sync_time_pending>
   d8b40:	b128      	cbz	r0, d8b4e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8b42:	f7ff fbbd 	bl	d82c0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d8b46:	f080 0001 	eor.w	r0, r0, #1
   d8b4a:	b2c0      	uxtb	r0, r0
   d8b4c:	bd08      	pop	{r3, pc}
   d8b4e:	2001      	movs	r0, #1
    }
   d8b50:	bd08      	pop	{r3, pc}
	...

000d8b54 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d8b56:	4b0e      	ldr	r3, [pc, #56]	; (d8b90 <_ZN9TimeClass7timeStrEl+0x3c>)
   d8b58:	681b      	ldr	r3, [r3, #0]
   d8b5a:	4419      	add	r1, r3
   d8b5c:	4b0d      	ldr	r3, [pc, #52]	; (d8b94 <_ZN9TimeClass7timeStrEl+0x40>)
   d8b5e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8b60:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d8b62:	a802      	add	r0, sp, #8
   d8b64:	4419      	add	r1, r3
   d8b66:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d8b6a:	f007 fba3 	bl	e02b4 <localtime>
        char* ascstr = asctime(calendar_time);
   d8b6e:	f007 fb4b 	bl	e0208 <asctime>
   d8b72:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d8b74:	f008 f9fc 	bl	e0f70 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d8b78:	4428      	add	r0, r5
   d8b7a:	2300      	movs	r3, #0
   d8b7c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d8b80:	4629      	mov	r1, r5
   d8b82:	4620      	mov	r0, r4
   d8b84:	f7ff fd24 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8b88:	4620      	mov	r0, r4
   d8b8a:	b003      	add	sp, #12
   d8b8c:	bd30      	pop	{r4, r5, pc}
   d8b8e:	bf00      	nop
   d8b90:	2003e350 	.word	0x2003e350
   d8b94:	2003e34c 	.word	0x2003e34c

000d8b98 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8b9c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d8b9e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8ba0:	4607      	mov	r7, r0
   d8ba2:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d8ba4:	4620      	mov	r0, r4
   d8ba6:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8ba8:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d8baa:	f007 fcc5 	bl	e0538 <strcpy>
    size_t len = strlen(format_str);
   d8bae:	4620      	mov	r0, r4
   d8bb0:	f008 f9de 	bl	e0f70 <strlen>
   d8bb4:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8bb6:	b925      	cbnz	r5, d8bc2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d8bb8:	4924      	ldr	r1, [pc, #144]	; (d8c4c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d8bba:	a803      	add	r0, sp, #12
   d8bbc:	f007 fcbc 	bl	e0538 <strcpy>
   d8bc0:	e013      	b.n	d8bea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8bc2:	213c      	movs	r1, #60	; 0x3c
   d8bc4:	fb95 f2f1 	sdiv	r2, r5, r1
   d8bc8:	2a00      	cmp	r2, #0
   d8bca:	bfb8      	it	lt
   d8bcc:	4252      	neglt	r2, r2
   d8bce:	fb92 f3f1 	sdiv	r3, r2, r1
   d8bd2:	fb01 2213 	mls	r2, r1, r3, r2
   d8bd6:	9200      	str	r2, [sp, #0]
   d8bd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8bdc:	4a1c      	ldr	r2, [pc, #112]	; (d8c50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d8bde:	fb95 f3f3 	sdiv	r3, r5, r3
   d8be2:	2110      	movs	r1, #16
   d8be4:	a803      	add	r0, sp, #12
   d8be6:	f7ff fbab 	bl	d8340 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8bea:	4625      	mov	r5, r4
   d8bec:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8bee:	f108 3aff 	add.w	sl, r8, #4294967295
   d8bf2:	45b2      	cmp	sl, r6
   d8bf4:	d91b      	bls.n	d8c2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8bf6:	782b      	ldrb	r3, [r5, #0]
   d8bf8:	2b25      	cmp	r3, #37	; 0x25
   d8bfa:	d116      	bne.n	d8c2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d8bfc:	786b      	ldrb	r3, [r5, #1]
   d8bfe:	2b7a      	cmp	r3, #122	; 0x7a
   d8c00:	d113      	bne.n	d8c2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d8c02:	a803      	add	r0, sp, #12
   d8c04:	f008 f9b4 	bl	e0f70 <strlen>
   d8c08:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8c0a:	4430      	add	r0, r6
   d8c0c:	ebc6 020a 	rsb	r2, r6, sl
   d8c10:	1ca9      	adds	r1, r5, #2
   d8c12:	4420      	add	r0, r4
   d8c14:	f007 fc4a 	bl	e04ac <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8c18:	4642      	mov	r2, r8
   d8c1a:	a903      	add	r1, sp, #12
   d8c1c:	4628      	mov	r0, r5
   d8c1e:	f007 fc45 	bl	e04ac <memcpy>
            len = strlen(format_str);
   d8c22:	4620      	mov	r0, r4
   d8c24:	f008 f9a4 	bl	e0f70 <strlen>
   d8c28:	4680      	mov	r8, r0
   d8c2a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8c2c:	e7de      	b.n	d8bec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d8c2e:	464b      	mov	r3, r9
   d8c30:	4622      	mov	r2, r4
   d8c32:	2132      	movs	r1, #50	; 0x32
   d8c34:	a807      	add	r0, sp, #28
   d8c36:	f007 fce7 	bl	e0608 <strftime>
    return String(buf);
   d8c3a:	a907      	add	r1, sp, #28
   d8c3c:	4638      	mov	r0, r7
   d8c3e:	f7ff fcc7 	bl	d85d0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8c42:	4638      	mov	r0, r7
   d8c44:	b024      	add	sp, #144	; 0x90
   d8c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c4a:	bf00      	nop
   d8c4c:	000e4875 	.word	0x000e4875
   d8c50:	000e3eab 	.word	0x000e3eab

000d8c54 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d8c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8c56:	4605      	mov	r5, r0
   d8c58:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d8c5a:	461c      	mov	r4, r3
   d8c5c:	b913      	cbnz	r3, d8c64 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d8c5e:	4b12      	ldr	r3, [pc, #72]	; (d8ca8 <_ZN9TimeClass6formatElPKc+0x54>)
   d8c60:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d8c62:	b12c      	cbz	r4, d8c70 <_ZN9TimeClass6formatElPKc+0x1c>
   d8c64:	4b11      	ldr	r3, [pc, #68]	; (d8cac <_ZN9TimeClass6formatElPKc+0x58>)
   d8c66:	4620      	mov	r0, r4
   d8c68:	6819      	ldr	r1, [r3, #0]
   d8c6a:	f007 fc5b 	bl	e0524 <strcmp>
   d8c6e:	b920      	cbnz	r0, d8c7a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d8c70:	9901      	ldr	r1, [sp, #4]
   d8c72:	4628      	mov	r0, r5
   d8c74:	f7ff ff6e 	bl	d8b54 <_ZN9TimeClass7timeStrEl>
   d8c78:	e013      	b.n	d8ca2 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d8c7a:	4f0d      	ldr	r7, [pc, #52]	; (d8cb0 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d8c7c:	9a01      	ldr	r2, [sp, #4]
   d8c7e:	683b      	ldr	r3, [r7, #0]
   d8c80:	4e0c      	ldr	r6, [pc, #48]	; (d8cb4 <_ZN9TimeClass6formatElPKc+0x60>)
   d8c82:	441a      	add	r2, r3
   d8c84:	6833      	ldr	r3, [r6, #0]
   d8c86:	a802      	add	r0, sp, #8
   d8c88:	4413      	add	r3, r2
   d8c8a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d8c8e:	f007 fb11 	bl	e02b4 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8c92:	683a      	ldr	r2, [r7, #0]
   d8c94:	6833      	ldr	r3, [r6, #0]
   d8c96:	4601      	mov	r1, r0
   d8c98:	4413      	add	r3, r2
   d8c9a:	4628      	mov	r0, r5
   d8c9c:	4622      	mov	r2, r4
   d8c9e:	f7ff ff7b 	bl	d8b98 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d8ca2:	4628      	mov	r0, r5
   d8ca4:	b003      	add	sp, #12
   d8ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ca8:	2003e348 	.word	0x2003e348
   d8cac:	2003db18 	.word	0x2003db18
   d8cb0:	2003e350 	.word	0x2003e350
   d8cb4:	2003e34c 	.word	0x2003e34c

000d8cb8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8cb8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8cba:	2000      	movs	r0, #0
   d8cbc:	f7ff f8ec 	bl	d7e98 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8cc0:	4604      	mov	r4, r0
   d8cc2:	b968      	cbnz	r0, d8ce0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8cc4:	f7ff fa58 	bl	d8178 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8cc8:	2801      	cmp	r0, #1
   d8cca:	d10b      	bne.n	d8ce4 <_ZN9TimeClass7isValidEv+0x2c>
   d8ccc:	4620      	mov	r0, r4
   d8cce:	f7ff fa7b 	bl	d81c8 <system_thread_get_state>
   d8cd2:	b938      	cbnz	r0, d8ce4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8cd4:	f7ff ff30 	bl	d8b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8cd8:	b930      	cbnz	r0, d8ce8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8cda:	f7ff fae1 	bl	d82a0 <spark_process>
   d8cde:	e7f9      	b.n	d8cd4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8ce0:	2001      	movs	r0, #1
   d8ce2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8ce4:	2000      	movs	r0, #0
   d8ce6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8ce8:	f7ff ff26 	bl	d8b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8cec:	2000      	movs	r0, #0
   d8cee:	f7ff f8d3 	bl	d7e98 <HAL_RTC_Time_Is_Valid>
   d8cf2:	3000      	adds	r0, #0
   d8cf4:	bf18      	it	ne
   d8cf6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8cf8:	bd10      	pop	{r4, pc}

000d8cfa <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8cfa:	b508      	push	{r3, lr}
    (void)isValid();
   d8cfc:	f7ff ffdc 	bl	d8cb8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8d04:	f7ff b8c0 	b.w	d7e88 <HAL_RTC_Get_UnixTime>

000d8d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8d08:	4b02      	ldr	r3, [pc, #8]	; (d8d14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8d0a:	681a      	ldr	r2, [r3, #0]
   d8d0c:	4b02      	ldr	r3, [pc, #8]	; (d8d18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8d0e:	601a      	str	r2, [r3, #0]
   d8d10:	4770      	bx	lr
   d8d12:	bf00      	nop
   d8d14:	2003db18 	.word	0x2003db18
   d8d18:	2003e348 	.word	0x2003e348

000d8d1c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8d1c:	2100      	movs	r1, #0
   d8d1e:	f7ff ba3b 	b.w	d8198 <system_delay_ms>

000d8d22 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8d22:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d8d24:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d8d26:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d8d28:	b113      	cbz	r3, d8d30 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8d2a:	2203      	movs	r2, #3
   d8d2c:	4601      	mov	r1, r0
   d8d2e:	4798      	blx	r3
    }
   d8d30:	4620      	mov	r0, r4
   d8d32:	bd10      	pop	{r4, pc}

000d8d34 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8d34:	b510      	push	{r4, lr}
   d8d36:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8d38:	f7ff fff3 	bl	d8d22 <_ZNSt14_Function_baseD1Ev>
   d8d3c:	4620      	mov	r0, r4
   d8d3e:	bd10      	pop	{r4, pc}

000d8d40 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8d40:	4803      	ldr	r0, [pc, #12]	; (d8d50 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8d42:	4a04      	ldr	r2, [pc, #16]	; (d8d54 <_GLOBAL__sub_I_RGB+0x14>)
   d8d44:	4904      	ldr	r1, [pc, #16]	; (d8d58 <_GLOBAL__sub_I_RGB+0x18>)
   d8d46:	2300      	movs	r3, #0
   d8d48:	6083      	str	r3, [r0, #8]
   d8d4a:	f001 b913 	b.w	d9f74 <__aeabi_atexit>
   d8d4e:	bf00      	nop
   d8d50:	2003e354 	.word	0x2003e354
   d8d54:	2003dc0c 	.word	0x2003dc0c
   d8d58:	000d8d35 	.word	0x000d8d35

000d8d5c <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8d5c:	4770      	bx	lr

000d8d5e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8d5e:	7d00      	ldrb	r0, [r0, #20]
   d8d60:	4770      	bx	lr
	...

000d8d64 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8d64:	7d03      	ldrb	r3, [r0, #20]
   d8d66:	b11b      	cbz	r3, d8d70 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d8d68:	6983      	ldr	r3, [r0, #24]
   d8d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8d6e:	d102      	bne.n	d8d76 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d8d70:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8d88 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8d74:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d8d76:	ee07 3a90 	vmov	s15, r3
   d8d7a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8d8c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d8d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8d82:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8d86:	4770      	bx	lr
   d8d88:	00000000 	.word	0x00000000
   d8d8c:	42c80000 	.word	0x42c80000

000d8d90 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8d90:	7d03      	ldrb	r3, [r0, #20]
   d8d92:	b11b      	cbz	r3, d8d9c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d8d94:	6a03      	ldr	r3, [r0, #32]
   d8d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8d9a:	d102      	bne.n	d8da2 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8d9c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8db4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8da0:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d8da2:	ee07 3a90 	vmov	s15, r3
   d8da6:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8db8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d8daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8dae:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8db2:	4770      	bx	lr
   d8db4:	00000000 	.word	0x00000000
   d8db8:	42c80000 	.word	0x42c80000

000d8dbc <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d8dbc:	b570      	push	{r4, r5, r6, lr}
   d8dbe:	460d      	mov	r5, r1
   d8dc0:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8dc2:	220a      	movs	r2, #10
   d8dc4:	6881      	ldr	r1, [r0, #8]
   d8dc6:	4628      	mov	r0, r5
   d8dc8:	f7ff fd88 	bl	d88dc <_ZN5Print5printEii>
    n += p.print(',');
   d8dcc:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8dce:	4604      	mov	r4, r0
    n += p.print(',');
   d8dd0:	4628      	mov	r0, r5
   d8dd2:	f7ff fd19 	bl	d8808 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d8dd6:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8dd8:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d8dda:	68f1      	ldr	r1, [r6, #12]
   d8ddc:	4628      	mov	r0, r5
   d8dde:	f7ff fd7d 	bl	d88dc <_ZN5Print5printEii>
    return n;
}
   d8de2:	4420      	add	r0, r4
   d8de4:	bd70      	pop	{r4, r5, r6, pc}

000d8de6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8de6:	f1a0 0004 	sub.w	r0, r0, #4
   d8dea:	f7ff bfe7 	b.w	d8dbc <_ZNK14CellularSignal7printToER5Print>

000d8dee <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8dee:	b510      	push	{r4, lr}
   d8df0:	4604      	mov	r4, r0
   d8df2:	f7fb f954 	bl	d409e <_ZdlPv>
   d8df6:	4620      	mov	r0, r4
   d8df8:	bd10      	pop	{r4, pc}
	...

000d8dfc <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8dfc:	7d03      	ldrb	r3, [r0, #20]
   d8dfe:	b17b      	cbz	r3, d8e20 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8e00:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8e02:	2b00      	cmp	r3, #0
   d8e04:	db0c      	blt.n	d8e20 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8e06:	ee07 3a90 	vmov	s15, r3
   d8e0a:	eddf 6a07 	vldr	s13, [pc, #28]	; d8e28 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8e0e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8e2c <_ZNK14CellularSignal10getQualityEv+0x30>
   d8e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8e1a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8e1e:	4770      	bx	lr
    }

    return -1.0f;
   d8e20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8e24:	4770      	bx	lr
   d8e26:	bf00      	nop
   d8e28:	477fff00 	.word	0x477fff00
   d8e2c:	42c80000 	.word	0x42c80000

000d8e30 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8e30:	7d03      	ldrb	r3, [r0, #20]
   d8e32:	b17b      	cbz	r3, d8e54 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8e34:	69c3      	ldr	r3, [r0, #28]
   d8e36:	2b00      	cmp	r3, #0
   d8e38:	db0c      	blt.n	d8e54 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8e3a:	ee07 3a90 	vmov	s15, r3
   d8e3e:	eddf 6a07 	vldr	s13, [pc, #28]	; d8e5c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8e42:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8e60 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8e52:	4770      	bx	lr
    }

    return -1.0f;
   d8e54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8e58:	4770      	bx	lr
   d8e5a:	bf00      	nop
   d8e5c:	477fff00 	.word	0x477fff00
   d8e60:	42c80000 	.word	0x42c80000

000d8e64 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d8e64:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8e66:	460d      	mov	r5, r1
   d8e68:	f100 0410 	add.w	r4, r0, #16
   d8e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e70:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8e74:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d8e78:	2001      	movs	r0, #1
   d8e7a:	bd30      	pop	{r4, r5, pc}

000d8e7c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8e7c:	6800      	ldr	r0, [r0, #0]
   d8e7e:	f000 bb4f 	b.w	d9520 <_ZN7TwoWire4lockEv>

000d8e82 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8e82:	b510      	push	{r4, lr}
   d8e84:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d8e86:	6001      	str	r1, [r0, #0]
   d8e88:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d8e8a:	b10a      	cbz	r2, d8e90 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8e8c:	f7ff fff6 	bl	d8e7c <_ZN9FuelGauge4lockEv>
    }
}
   d8e90:	4620      	mov	r0, r4
   d8e92:	bd10      	pop	{r4, pc}

000d8e94 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d8e94:	b538      	push	{r3, r4, r5, lr}
   d8e96:	4604      	mov	r4, r0
   d8e98:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8e9a:	f001 f84b 	bl	d9f34 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d8e9e:	462a      	mov	r2, r5
   d8ea0:	4601      	mov	r1, r0
   d8ea2:	4620      	mov	r0, r4
   d8ea4:	f7ff ffed 	bl	d8e82 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d8ea8:	4620      	mov	r0, r4
   d8eaa:	bd38      	pop	{r3, r4, r5, pc}

000d8eac <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d8eac:	6800      	ldr	r0, [r0, #0]
   d8eae:	f000 bb40 	b.w	d9532 <_ZN7TwoWire6unlockEv>

000d8eb2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8eb2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d8eb4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d8eb6:	4604      	mov	r4, r0
{
    if (lock_) {
   d8eb8:	b10b      	cbz	r3, d8ebe <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8eba:	f7ff fff7 	bl	d8eac <_ZN9FuelGauge6unlockEv>
    }
}
   d8ebe:	4620      	mov	r0, r4
   d8ec0:	bd10      	pop	{r4, pc}

000d8ec2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ec4:	4604      	mov	r4, r0
   d8ec6:	4616      	mov	r6, r2
   d8ec8:	461d      	mov	r5, r3
   d8eca:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8ecc:	f7ff ffd6 	bl	d8e7c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d8ed0:	6820      	ldr	r0, [r4, #0]
   d8ed2:	2136      	movs	r1, #54	; 0x36
   d8ed4:	f000 fb16 	bl	d9504 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d8ed8:	6820      	ldr	r0, [r4, #0]
   d8eda:	6803      	ldr	r3, [r0, #0]
   d8edc:	4639      	mov	r1, r7
   d8ede:	689b      	ldr	r3, [r3, #8]
   d8ee0:	4798      	blx	r3
    i2c_.endTransmission(true);
   d8ee2:	2101      	movs	r1, #1
   d8ee4:	6820      	ldr	r0, [r4, #0]
   d8ee6:	f000 fb10 	bl	d950a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d8eea:	2202      	movs	r2, #2
   d8eec:	2136      	movs	r1, #54	; 0x36
   d8eee:	2301      	movs	r3, #1
   d8ef0:	6820      	ldr	r0, [r4, #0]
   d8ef2:	f000 fafe 	bl	d94f2 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d8ef6:	6820      	ldr	r0, [r4, #0]
   d8ef8:	6803      	ldr	r3, [r0, #0]
   d8efa:	695b      	ldr	r3, [r3, #20]
   d8efc:	4798      	blx	r3
   d8efe:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d8f00:	6820      	ldr	r0, [r4, #0]
   d8f02:	6803      	ldr	r3, [r0, #0]
   d8f04:	695b      	ldr	r3, [r3, #20]
   d8f06:	4798      	blx	r3
   d8f08:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8f0a:	4620      	mov	r0, r4
}
   d8f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d8f10:	f7ff bfcc 	b.w	d8eac <_ZN9FuelGauge6unlockEv>

000d8f14 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d8f14:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d8f16:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d8f18:	2200      	movs	r2, #0
	byte LSB = 0;
   d8f1a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d8f1e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d8f22:	2104      	movs	r1, #4
   d8f24:	f10d 0206 	add.w	r2, sp, #6
   d8f28:	f7ff ffcb 	bl	d8ec2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8f2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8f30:	f006 fdbc 	bl	dfaac <__aeabi_i2d>
   d8f34:	2200      	movs	r2, #0
   d8f36:	4b09      	ldr	r3, [pc, #36]	; (d8f5c <_ZN9FuelGauge6getSoCEv+0x48>)
   d8f38:	f006 fe1e 	bl	dfb78 <__aeabi_dmul>
   d8f3c:	f007 f914 	bl	e0168 <__aeabi_d2f>
   d8f40:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d8f44:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8f48:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d8f4c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d8f50:	ee37 0a80 	vadd.f32	s0, s15, s0
   d8f54:	b003      	add	sp, #12
   d8f56:	f85d fb04 	ldr.w	pc, [sp], #4
   d8f5a:	bf00      	nop
   d8f5c:	3f700000 	.word	0x3f700000

000d8f60 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8f60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8f62:	4b0c      	ldr	r3, [pc, #48]	; (d8f94 <serialEventRun+0x34>)
   d8f64:	b133      	cbz	r3, d8f74 <serialEventRun+0x14>
   d8f66:	f000 f937 	bl	d91d8 <_Z16_fetch_usbserialv>
   d8f6a:	6803      	ldr	r3, [r0, #0]
   d8f6c:	691b      	ldr	r3, [r3, #16]
   d8f6e:	4798      	blx	r3
   d8f70:	2800      	cmp	r0, #0
   d8f72:	dc09      	bgt.n	d8f88 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8f74:	4b08      	ldr	r3, [pc, #32]	; (d8f98 <serialEventRun+0x38>)
   d8f76:	b163      	cbz	r3, d8f92 <serialEventRun+0x32>
   d8f78:	f000 fa26 	bl	d93c8 <_Z22__fetch_global_Serial1v>
   d8f7c:	6803      	ldr	r3, [r0, #0]
   d8f7e:	691b      	ldr	r3, [r3, #16]
   d8f80:	4798      	blx	r3
   d8f82:	2800      	cmp	r0, #0
   d8f84:	dc03      	bgt.n	d8f8e <serialEventRun+0x2e>
   d8f86:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8f88:	f3af 8000 	nop.w
   d8f8c:	e7f2      	b.n	d8f74 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8f8e:	f3af 8000 	nop.w
   d8f92:	bd08      	pop	{r3, pc}
	...

000d8f9c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8f9c:	b508      	push	{r3, lr}
	serialEventRun();
   d8f9e:	f7ff ffdf 	bl	d8f60 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8fa2:	f7fe ff69 	bl	d7e78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8fa6:	4b01      	ldr	r3, [pc, #4]	; (d8fac <_post_loop+0x10>)
   d8fa8:	6018      	str	r0, [r3, #0]
   d8faa:	bd08      	pop	{r3, pc}
   d8fac:	2003e5f4 	.word	0x2003e5f4

000d8fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8fb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8fb2:	2300      	movs	r3, #0
   d8fb4:	9300      	str	r3, [sp, #0]
   d8fb6:	461a      	mov	r2, r3
   d8fb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8fbc:	f7ff f916 	bl	d81ec <system_ctrl_set_result>
}
   d8fc0:	b003      	add	sp, #12
   d8fc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8fc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8fc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8fca:	8843      	ldrh	r3, [r0, #2]
   d8fcc:	2b0a      	cmp	r3, #10
   d8fce:	d008      	beq.n	d8fe2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8fd0:	2b50      	cmp	r3, #80	; 0x50
   d8fd2:	d109      	bne.n	d8fe8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8fd4:	4b09      	ldr	r3, [pc, #36]	; (d8ffc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8fd6:	681b      	ldr	r3, [r3, #0]
   d8fd8:	b13b      	cbz	r3, d8fea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8fda:	b003      	add	sp, #12
   d8fdc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8fe0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8fe2:	f7ff ffe5 	bl	d8fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8fe6:	e006      	b.n	d8ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8fe8:	2300      	movs	r3, #0
   d8fea:	9300      	str	r3, [sp, #0]
   d8fec:	461a      	mov	r2, r3
   d8fee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8ff2:	f7ff f8fb 	bl	d81ec <system_ctrl_set_result>
        break;
    }
}
   d8ff6:	b003      	add	sp, #12
   d8ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   d8ffc:	2003e364 	.word	0x2003e364

000d9000 <module_user_init_hook>:

void module_user_init_hook()
{
   d9000:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9002:	f7fe ff31 	bl	d7e68 <HAL_RNG_GetRandomNumber>
   d9006:	4604      	mov	r4, r0
    srand(seed);
   d9008:	f007 fa64 	bl	e04d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d900c:	4b07      	ldr	r3, [pc, #28]	; (d902c <module_user_init_hook+0x2c>)
   d900e:	b113      	cbz	r3, d9016 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d9010:	4620      	mov	r0, r4
   d9012:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9016:	2100      	movs	r1, #0
   d9018:	4804      	ldr	r0, [pc, #16]	; (d902c <module_user_init_hook+0x2c>)
   d901a:	f7ff f961 	bl	d82e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d901e:	2100      	movs	r1, #0
   d9020:	4803      	ldr	r0, [pc, #12]	; (d9030 <module_user_init_hook+0x30>)
}
   d9022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9026:	f7ff b8d7 	b.w	d81d8 <system_ctrl_set_app_request_handler>
   d902a:	bf00      	nop
   d902c:	00000000 	.word	0x00000000
   d9030:	000d8fc9 	.word	0x000d8fc9

000d9034 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9034:	4770      	bx	lr

000d9036 <_ZN9IPAddressD0Ev>:
   d9036:	b510      	push	{r4, lr}
   d9038:	4604      	mov	r4, r0
   d903a:	f7fb f830 	bl	d409e <_ZdlPv>
   d903e:	4620      	mov	r0, r4
   d9040:	bd10      	pop	{r4, pc}

000d9042 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9042:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9044:	7d03      	ldrb	r3, [r0, #20]
   d9046:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9048:	b08d      	sub	sp, #52	; 0x34
   d904a:	460e      	mov	r6, r1
   d904c:	f100 0704 	add.w	r7, r0, #4
   d9050:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9054:	d002      	beq.n	d905c <_ZNK9IPAddress7printToER5Print+0x1a>
   d9056:	f100 0508 	add.w	r5, r0, #8
   d905a:	e018      	b.n	d908e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d905c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d905e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9060:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9064:	232f      	movs	r3, #47	; 0x2f
   d9066:	462a      	mov	r2, r5
   d9068:	200a      	movs	r0, #10
   d906a:	f7fe ff4d 	bl	d7f08 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d906e:	4628      	mov	r0, r5
   d9070:	f007 ff7e 	bl	e0f70 <strlen>
   d9074:	6833      	ldr	r3, [r6, #0]
   d9076:	4602      	mov	r2, r0
   d9078:	68db      	ldr	r3, [r3, #12]
   d907a:	4629      	mov	r1, r5
   d907c:	4630      	mov	r0, r6
   d907e:	4798      	blx	r3
   d9080:	e00f      	b.n	d90a2 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9082:	b124      	cbz	r4, d908e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9084:	212e      	movs	r1, #46	; 0x2e
   d9086:	4630      	mov	r0, r6
   d9088:	f7ff fbbe 	bl	d8808 <_ZN5Print5printEc>
   d908c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d908e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9092:	220a      	movs	r2, #10
   d9094:	4630      	mov	r0, r6
   d9096:	f7ff fbfd 	bl	d8894 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d909a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d909c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d909e:	d1f0      	bne.n	d9082 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d90a0:	4620      	mov	r0, r4
    }
    return n;
}
   d90a2:	b00d      	add	sp, #52	; 0x34
   d90a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d90a8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d90a8:	b510      	push	{r4, lr}
   d90aa:	4b05      	ldr	r3, [pc, #20]	; (d90c0 <_ZN9IPAddressC1Ev+0x18>)
   d90ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d90ae:	2211      	movs	r2, #17
   d90b0:	f840 3b04 	str.w	r3, [r0], #4
   d90b4:	2100      	movs	r1, #0
   d90b6:	f007 fa04 	bl	e04c2 <memset>
{
    clear();
}
   d90ba:	4620      	mov	r0, r4
   d90bc:	bd10      	pop	{r4, pc}
   d90be:	bf00      	nop
   d90c0:	000e3f10 	.word	0x000e3f10

000d90c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d90c4:	4603      	mov	r3, r0
   d90c6:	4a07      	ldr	r2, [pc, #28]	; (d90e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d90c8:	b510      	push	{r4, lr}
   d90ca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d90ce:	f101 0210 	add.w	r2, r1, #16
   d90d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d90d6:	f843 4b04 	str.w	r4, [r3], #4
   d90da:	4291      	cmp	r1, r2
   d90dc:	d1f9      	bne.n	d90d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d90de:	780a      	ldrb	r2, [r1, #0]
   d90e0:	701a      	strb	r2, [r3, #0]
}
   d90e2:	bd10      	pop	{r4, pc}
   d90e4:	000e3f10 	.word	0x000e3f10

000d90e8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d90e8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d90ea:	2b04      	cmp	r3, #4
   d90ec:	d101      	bne.n	d90f2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d90ee:	6840      	ldr	r0, [r0, #4]
   d90f0:	e008      	b.n	d9104 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d90f2:	2b06      	cmp	r3, #6
   d90f4:	d10a      	bne.n	d910c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d90f6:	6843      	ldr	r3, [r0, #4]
   d90f8:	b153      	cbz	r3, d9110 <_ZNK9IPAddresscvbEv+0x28>
   d90fa:	6883      	ldr	r3, [r0, #8]
   d90fc:	b143      	cbz	r3, d9110 <_ZNK9IPAddresscvbEv+0x28>
   d90fe:	68c3      	ldr	r3, [r0, #12]
   d9100:	b133      	cbz	r3, d9110 <_ZNK9IPAddresscvbEv+0x28>
   d9102:	6900      	ldr	r0, [r0, #16]
   d9104:	3000      	adds	r0, #0
   d9106:	bf18      	it	ne
   d9108:	2001      	movne	r0, #1
   d910a:	4770      	bx	lr
   d910c:	2000      	movs	r0, #0
   d910e:	4770      	bx	lr
   d9110:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9112:	4770      	bx	lr

000d9114 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9114:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9116:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d911a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d911e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9122:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9126:	2304      	movs	r3, #4
   d9128:	6041      	str	r1, [r0, #4]
   d912a:	7503      	strb	r3, [r0, #20]
   d912c:	bd10      	pop	{r4, pc}

000d912e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d912e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9130:	780d      	ldrb	r5, [r1, #0]
   d9132:	788b      	ldrb	r3, [r1, #2]
   d9134:	784a      	ldrb	r2, [r1, #1]
   d9136:	78c9      	ldrb	r1, [r1, #3]
   d9138:	9100      	str	r1, [sp, #0]
   d913a:	4629      	mov	r1, r5
   d913c:	f7ff ffea 	bl	d9114 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9140:	b003      	add	sp, #12
   d9142:	bd30      	pop	{r4, r5, pc}

000d9144 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9144:	7441      	strb	r1, [r0, #17]
   d9146:	4770      	bx	lr

000d9148 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9148:	4770      	bx	lr

000d914a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d914a:	2100      	movs	r1, #0
   d914c:	7c00      	ldrb	r0, [r0, #16]
   d914e:	f7fe bff3 	b.w	d8138 <HAL_USB_USART_Receive_Data>

000d9152 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d9152:	2101      	movs	r1, #1
   d9154:	7c00      	ldrb	r0, [r0, #16]
   d9156:	f7fe bfef 	b.w	d8138 <HAL_USB_USART_Receive_Data>

000d915a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d915a:	7c00      	ldrb	r0, [r0, #16]
   d915c:	f7fe bfe4 	b.w	d8128 <HAL_USB_USART_Available_Data_For_Write>

000d9160 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d9160:	7c00      	ldrb	r0, [r0, #16]
   d9162:	f7fe bfd9 	b.w	d8118 <HAL_USB_USART_Available_Data>

000d9166 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d9166:	b538      	push	{r3, r4, r5, lr}
   d9168:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d916a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d916c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d916e:	f7fe ffdb 	bl	d8128 <HAL_USB_USART_Available_Data_For_Write>
   d9172:	2800      	cmp	r0, #0
   d9174:	dc01      	bgt.n	d917a <_ZN9USBSerial5writeEh+0x14>
   d9176:	7c60      	ldrb	r0, [r4, #17]
   d9178:	b120      	cbz	r0, d9184 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d917a:	4629      	mov	r1, r5
   d917c:	7c20      	ldrb	r0, [r4, #16]
   d917e:	f7fe ffe3 	bl	d8148 <HAL_USB_USART_Send_Data>
    return 1;
   d9182:	2001      	movs	r0, #1
  }
  return 0;
}
   d9184:	bd38      	pop	{r3, r4, r5, pc}

000d9186 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9186:	7c00      	ldrb	r0, [r0, #16]
   d9188:	f7fe bfe6 	b.w	d8158 <HAL_USB_USART_Flush_Data>

000d918c <_ZN9USBSerialD0Ev>:
   d918c:	b510      	push	{r4, lr}
   d918e:	4604      	mov	r4, r0
   d9190:	f7fa ff85 	bl	d409e <_ZdlPv>
   d9194:	4620      	mov	r0, r4
   d9196:	bd10      	pop	{r4, pc}

000d9198 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9198:	b510      	push	{r4, lr}
   d919a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d919c:	2300      	movs	r3, #0
   d919e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d91a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d91a4:	60a3      	str	r3, [r4, #8]
   d91a6:	4b05      	ldr	r3, [pc, #20]	; (d91bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d91a8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d91aa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d91ac:	4608      	mov	r0, r1
{
  _serial = serial;
   d91ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d91b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d91b2:	4611      	mov	r1, r2
   d91b4:	f7fe ffa0 	bl	d80f8 <HAL_USB_USART_Init>
}
   d91b8:	4620      	mov	r0, r4
   d91ba:	bd10      	pop	{r4, pc}
   d91bc:	000e3f24 	.word	0x000e3f24

000d91c0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d91c0:	2200      	movs	r2, #0
   d91c2:	7c00      	ldrb	r0, [r0, #16]
   d91c4:	f7fe bfa0 	b.w	d8108 <HAL_USB_USART_Begin>

000d91c8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d91c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d91ca:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d91cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d91ce:	2100      	movs	r1, #0
   d91d0:	f007 f977 	bl	e04c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d91d4:	4620      	mov	r0, r4
   d91d6:	bd10      	pop	{r4, pc}

000d91d8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d91d8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d91da:	4d0e      	ldr	r5, [pc, #56]	; (d9214 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d91dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d91de:	a801      	add	r0, sp, #4
   d91e0:	f7ff fff2 	bl	d91c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d91e4:	6829      	ldr	r1, [r5, #0]
   d91e6:	f011 0401 	ands.w	r4, r1, #1
   d91ea:	d110      	bne.n	d920e <_Z16_fetch_usbserialv+0x36>
   d91ec:	4628      	mov	r0, r5
   d91ee:	f7fa ff5a 	bl	d40a6 <__cxa_guard_acquire>
   d91f2:	b160      	cbz	r0, d920e <_Z16_fetch_usbserialv+0x36>
   d91f4:	aa01      	add	r2, sp, #4
   d91f6:	4621      	mov	r1, r4
   d91f8:	4807      	ldr	r0, [pc, #28]	; (d9218 <_Z16_fetch_usbserialv+0x40>)
   d91fa:	f7ff ffcd 	bl	d9198 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d91fe:	4628      	mov	r0, r5
   d9200:	f7fa ff56 	bl	d40b0 <__cxa_guard_release>
   d9204:	4a05      	ldr	r2, [pc, #20]	; (d921c <_Z16_fetch_usbserialv+0x44>)
   d9206:	4906      	ldr	r1, [pc, #24]	; (d9220 <_Z16_fetch_usbserialv+0x48>)
   d9208:	4803      	ldr	r0, [pc, #12]	; (d9218 <_Z16_fetch_usbserialv+0x40>)
   d920a:	f000 feb3 	bl	d9f74 <__aeabi_atexit>
	return _usbserial;
}
   d920e:	4802      	ldr	r0, [pc, #8]	; (d9218 <_Z16_fetch_usbserialv+0x40>)
   d9210:	b007      	add	sp, #28
   d9212:	bd30      	pop	{r4, r5, pc}
   d9214:	2003e368 	.word	0x2003e368
   d9218:	2003e36c 	.word	0x2003e36c
   d921c:	2003dc0c 	.word	0x2003dc0c
   d9220:	000d9149 	.word	0x000d9149

000d9224 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d9224:	2200      	movs	r2, #0
   d9226:	4611      	mov	r1, r2
   d9228:	6840      	ldr	r0, [r0, #4]
   d922a:	f7ff b801 	b.w	d8230 <network_ready>

000d922e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d922e:	2200      	movs	r2, #0
   d9230:	4611      	mov	r1, r2
   d9232:	6840      	ldr	r0, [r0, #4]
   d9234:	f7ff b81c 	b.w	d8270 <network_listening>

000d9238 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9238:	2200      	movs	r2, #0
   d923a:	4611      	mov	r1, r2
   d923c:	6840      	ldr	r0, [r0, #4]
   d923e:	f7ff b827 	b.w	d8290 <network_get_listen_timeout>

000d9242 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9242:	2200      	movs	r2, #0
   d9244:	6840      	ldr	r0, [r0, #4]
   d9246:	f7ff b81b 	b.w	d8280 <network_set_listen_timeout>

000d924a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d924a:	2200      	movs	r2, #0
   d924c:	f081 0101 	eor.w	r1, r1, #1
   d9250:	6840      	ldr	r0, [r0, #4]
   d9252:	f7ff b805 	b.w	d8260 <network_listen>

000d9256 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d9256:	2300      	movs	r3, #0
   d9258:	461a      	mov	r2, r3
   d925a:	4619      	mov	r1, r3
   d925c:	6840      	ldr	r0, [r0, #4]
   d925e:	f7fe bff7 	b.w	d8250 <network_off>

000d9262 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d9262:	2300      	movs	r3, #0
   d9264:	461a      	mov	r2, r3
   d9266:	4619      	mov	r1, r3
   d9268:	6840      	ldr	r0, [r0, #4]
   d926a:	f7fe bfe9 	b.w	d8240 <network_on>

000d926e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d926e:	2200      	movs	r2, #0
   d9270:	4611      	mov	r1, r2
   d9272:	6840      	ldr	r0, [r0, #4]
   d9274:	f7fe bfcc 	b.w	d8210 <network_connecting>

000d9278 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9278:	2200      	movs	r2, #0
   d927a:	2102      	movs	r1, #2
   d927c:	6840      	ldr	r0, [r0, #4]
   d927e:	f7fe bfcf 	b.w	d8220 <network_disconnect>

000d9282 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9282:	2300      	movs	r3, #0
   d9284:	461a      	mov	r2, r3
   d9286:	6840      	ldr	r0, [r0, #4]
   d9288:	f7fe bfba 	b.w	d8200 <network_connect>

000d928c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d928c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d928e:	4b1b      	ldr	r3, [pc, #108]	; (d92fc <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d9290:	6003      	str	r3, [r0, #0]
   d9292:	2500      	movs	r5, #0
   d9294:	460f      	mov	r7, r1
   d9296:	3328      	adds	r3, #40	; 0x28
   d9298:	2618      	movs	r6, #24
   d929a:	b089      	sub	sp, #36	; 0x24
   d929c:	6043      	str	r3, [r0, #4]
   d929e:	6085      	str	r5, [r0, #8]
   d92a0:	60c5      	str	r5, [r0, #12]
   d92a2:	4632      	mov	r2, r6
   d92a4:	4629      	mov	r1, r5
   d92a6:	4604      	mov	r4, r0
   d92a8:	3010      	adds	r0, #16
   d92aa:	f007 f90a 	bl	e04c2 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d92ae:	462a      	mov	r2, r5
   d92b0:	4629      	mov	r1, r5
   d92b2:	6878      	ldr	r0, [r7, #4]
   d92b4:	f7fe ffbc 	bl	d8230 <network_ready>
   d92b8:	b908      	cbnz	r0, d92be <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d92ba:	60a0      	str	r0, [r4, #8]
            return sig;
   d92bc:	e01b      	b.n	d92f6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d92be:	4629      	mov	r1, r5
   d92c0:	4632      	mov	r2, r6
   d92c2:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d92c4:	9500      	str	r5, [sp, #0]
   d92c6:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d92c8:	f007 f8fb 	bl	e04c2 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d92cc:	a902      	add	r1, sp, #8
   d92ce:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d92d0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d92d4:	f7fe ff08 	bl	d80e8 <cellular_signal>
   d92d8:	b110      	cbz	r0, d92e0 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d92da:	2301      	movs	r3, #1
   d92dc:	60a3      	str	r3, [r4, #8]
            return sig;
   d92de:	e00a      	b.n	d92f6 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d92e0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d92e2:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d92e4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d92e6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d92e8:	b90b      	cbnz	r3, d92ee <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d92ea:	2302      	movs	r3, #2
   d92ec:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d92ee:	a902      	add	r1, sp, #8
   d92f0:	4620      	mov	r0, r4
   d92f2:	f7ff fdb7 	bl	d8e64 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d92f6:	4620      	mov	r0, r4
   d92f8:	b009      	add	sp, #36	; 0x24
   d92fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d92fc:	000e3edc 	.word	0x000e3edc

000d9300 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d9300:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d9302:	4c0c      	ldr	r4, [pc, #48]	; (d9334 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d9304:	2528      	movs	r5, #40	; 0x28
   d9306:	462a      	mov	r2, r5
   d9308:	2100      	movs	r1, #0
   d930a:	4620      	mov	r0, r4
   d930c:	f007 f8d9 	bl	e04c2 <memset>
        cid = -1;
   d9310:	f04f 33ff 	mov.w	r3, #4294967295
   d9314:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d9316:	8025      	strh	r5, [r4, #0]
   d9318:	4c07      	ldr	r4, [pc, #28]	; (d9338 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d931a:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d931c:	4620      	mov	r0, r4
   d931e:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d9320:	252c      	movs	r5, #44	; 0x2c
   d9322:	4b06      	ldr	r3, [pc, #24]	; (d933c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d9324:	f840 3b08 	str.w	r3, [r0], #8
   d9328:	462a      	mov	r2, r5
   d932a:	2100      	movs	r1, #0
   d932c:	f007 f8c9 	bl	e04c2 <memset>
        size = sizeof(*this);
   d9330:	8125      	strh	r5, [r4, #8]
   d9332:	bd38      	pop	{r3, r4, r5, pc}
   d9334:	2003e3b4 	.word	0x2003e3b4
   d9338:	2003e380 	.word	0x2003e380
   d933c:	000e3f54 	.word	0x000e3f54

000d9340 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9340:	4770      	bx	lr

000d9342 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9342:	7441      	strb	r1, [r0, #17]
   d9344:	4770      	bx	lr

000d9346 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d9346:	7c00      	ldrb	r0, [r0, #16]
   d9348:	f7fe be2e 	b.w	d7fa8 <HAL_USART_Available_Data_For_Write>

000d934c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d934c:	7c00      	ldrb	r0, [r0, #16]
   d934e:	f7fe be03 	b.w	d7f58 <HAL_USART_Available_Data>

000d9352 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d9352:	7c00      	ldrb	r0, [r0, #16]
   d9354:	f7fe be10 	b.w	d7f78 <HAL_USART_Peek_Data>

000d9358 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d9358:	7c00      	ldrb	r0, [r0, #16]
   d935a:	f7fe be05 	b.w	d7f68 <HAL_USART_Read_Data>

000d935e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d935e:	7c00      	ldrb	r0, [r0, #16]
   d9360:	f7fe be12 	b.w	d7f88 <HAL_USART_Flush_Data>

000d9364 <_ZN11USARTSerialD0Ev>:
   d9364:	b510      	push	{r4, lr}
   d9366:	4604      	mov	r4, r0
   d9368:	f7fa fe99 	bl	d409e <_ZdlPv>
   d936c:	4620      	mov	r0, r4
   d936e:	bd10      	pop	{r4, pc}

000d9370 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9370:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9372:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9374:	4604      	mov	r4, r0
   d9376:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9378:	b925      	cbnz	r5, d9384 <_ZN11USARTSerial5writeEh+0x14>
   d937a:	7c00      	ldrb	r0, [r0, #16]
   d937c:	f7fe fe14 	bl	d7fa8 <HAL_USART_Available_Data_For_Write>
   d9380:	2800      	cmp	r0, #0
   d9382:	dd05      	ble.n	d9390 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9384:	4631      	mov	r1, r6
   d9386:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d938c:	f7fe bddc 	b.w	d7f48 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9390:	4628      	mov	r0, r5
   d9392:	bd70      	pop	{r4, r5, r6, pc}

000d9394 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9394:	b510      	push	{r4, lr}
   d9396:	4604      	mov	r4, r0
   d9398:	4608      	mov	r0, r1
   d939a:	4611      	mov	r1, r2
   d939c:	2200      	movs	r2, #0
   d939e:	6062      	str	r2, [r4, #4]
   d93a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d93a4:	60a2      	str	r2, [r4, #8]
   d93a6:	4a05      	ldr	r2, [pc, #20]	; (d93bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d93a8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d93aa:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d93ac:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d93ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d93b0:	461a      	mov	r2, r3
   d93b2:	f7fe fdc1 	bl	d7f38 <HAL_USART_Init>
}
   d93b6:	4620      	mov	r0, r4
   d93b8:	bd10      	pop	{r4, pc}
   d93ba:	bf00      	nop
   d93bc:	000e3f88 	.word	0x000e3f88

000d93c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d93c0:	7c00      	ldrb	r0, [r0, #16]
   d93c2:	f7fe bde9 	b.w	d7f98 <HAL_USART_Is_Enabled>
	...

000d93c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d93c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d93ca:	4c19      	ldr	r4, [pc, #100]	; (d9430 <_Z22__fetch_global_Serial1v+0x68>)
   d93cc:	6825      	ldr	r5, [r4, #0]
   d93ce:	b94d      	cbnz	r5, d93e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d93d0:	2084      	movs	r0, #132	; 0x84
   d93d2:	f7fa fe62 	bl	d409a <_Znwj>
   d93d6:	4606      	mov	r6, r0
   d93d8:	b118      	cbz	r0, d93e2 <_Z22__fetch_global_Serial1v+0x1a>
   d93da:	2284      	movs	r2, #132	; 0x84
   d93dc:	4629      	mov	r1, r5
   d93de:	f007 f870 	bl	e04c2 <memset>
   d93e2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d93e4:	4d13      	ldr	r5, [pc, #76]	; (d9434 <_Z22__fetch_global_Serial1v+0x6c>)
   d93e6:	682e      	ldr	r6, [r5, #0]
   d93e8:	b94e      	cbnz	r6, d93fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d93ea:	2084      	movs	r0, #132	; 0x84
   d93ec:	f7fa fe55 	bl	d409a <_Znwj>
   d93f0:	4607      	mov	r7, r0
   d93f2:	b118      	cbz	r0, d93fc <_Z22__fetch_global_Serial1v+0x34>
   d93f4:	2284      	movs	r2, #132	; 0x84
   d93f6:	4631      	mov	r1, r6
   d93f8:	f007 f863 	bl	e04c2 <memset>
   d93fc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d93fe:	4f0e      	ldr	r7, [pc, #56]	; (d9438 <_Z22__fetch_global_Serial1v+0x70>)
   d9400:	6839      	ldr	r1, [r7, #0]
   d9402:	f011 0601 	ands.w	r6, r1, #1
   d9406:	d111      	bne.n	d942c <_Z22__fetch_global_Serial1v+0x64>
   d9408:	4638      	mov	r0, r7
   d940a:	f7fa fe4c 	bl	d40a6 <__cxa_guard_acquire>
   d940e:	b168      	cbz	r0, d942c <_Z22__fetch_global_Serial1v+0x64>
   d9410:	6822      	ldr	r2, [r4, #0]
   d9412:	682b      	ldr	r3, [r5, #0]
   d9414:	4809      	ldr	r0, [pc, #36]	; (d943c <_Z22__fetch_global_Serial1v+0x74>)
   d9416:	4631      	mov	r1, r6
   d9418:	f7ff ffbc 	bl	d9394 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d941c:	4638      	mov	r0, r7
   d941e:	f7fa fe47 	bl	d40b0 <__cxa_guard_release>
   d9422:	4a07      	ldr	r2, [pc, #28]	; (d9440 <_Z22__fetch_global_Serial1v+0x78>)
   d9424:	4907      	ldr	r1, [pc, #28]	; (d9444 <_Z22__fetch_global_Serial1v+0x7c>)
   d9426:	4805      	ldr	r0, [pc, #20]	; (d943c <_Z22__fetch_global_Serial1v+0x74>)
   d9428:	f000 fda4 	bl	d9f74 <__aeabi_atexit>
#endif
	return serial1;
}
   d942c:	4803      	ldr	r0, [pc, #12]	; (d943c <_Z22__fetch_global_Serial1v+0x74>)
   d942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9430:	2003e3f8 	.word	0x2003e3f8
   d9434:	2003e3f0 	.word	0x2003e3f0
   d9438:	2003e3f4 	.word	0x2003e3f4
   d943c:	2003e3dc 	.word	0x2003e3dc
   d9440:	2003dc0c 	.word	0x2003dc0c
   d9444:	000d9341 	.word	0x000d9341

000d9448 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d9448:	4770      	bx	lr

000d944a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d944a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d944c:	4606      	mov	r6, r0
   d944e:	4615      	mov	r5, r2
   d9450:	460c      	mov	r4, r1
   d9452:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9454:	42bc      	cmp	r4, r7
   d9456:	d006      	beq.n	d9466 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9458:	6833      	ldr	r3, [r6, #0]
   d945a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d945e:	689b      	ldr	r3, [r3, #8]
   d9460:	4630      	mov	r0, r6
   d9462:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9464:	e7f6      	b.n	d9454 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9466:	4628      	mov	r0, r5
   d9468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d946a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d946a:	2200      	movs	r2, #0
   d946c:	7c00      	ldrb	r0, [r0, #16]
   d946e:	f7fe bdc3 	b.w	d7ff8 <HAL_I2C_Write_Data>

000d9472 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9472:	2100      	movs	r1, #0
   d9474:	7c00      	ldrb	r0, [r0, #16]
   d9476:	f7fe bdc7 	b.w	d8008 <HAL_I2C_Available_Data>

000d947a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d947a:	2100      	movs	r1, #0
   d947c:	7c00      	ldrb	r0, [r0, #16]
   d947e:	f7fe bdcb 	b.w	d8018 <HAL_I2C_Read_Data>

000d9482 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9482:	2100      	movs	r1, #0
   d9484:	7c00      	ldrb	r0, [r0, #16]
   d9486:	f7fe bdcf 	b.w	d8028 <HAL_I2C_Peek_Data>

000d948a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d948a:	2100      	movs	r1, #0
   d948c:	7c00      	ldrb	r0, [r0, #16]
   d948e:	f7fe bdd3 	b.w	d8038 <HAL_I2C_Flush_Data>

000d9492 <_ZN7TwoWireD0Ev>:
   d9492:	b510      	push	{r4, lr}
   d9494:	4604      	mov	r4, r0
   d9496:	f7fa fe02 	bl	d409e <_ZdlPv>
   d949a:	4620      	mov	r0, r4
   d949c:	bd10      	pop	{r4, pc}
	...

000d94a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d94a0:	b510      	push	{r4, lr}
   d94a2:	4604      	mov	r4, r0
   d94a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d94a8:	4608      	mov	r0, r1
   d94aa:	60a3      	str	r3, [r4, #8]
   d94ac:	2100      	movs	r1, #0
   d94ae:	4b04      	ldr	r3, [pc, #16]	; (d94c0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d94b0:	7420      	strb	r0, [r4, #16]
   d94b2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d94b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d94b6:	f7fe fdcf 	bl	d8058 <HAL_I2C_Init>

}
   d94ba:	4620      	mov	r0, r4
   d94bc:	bd10      	pop	{r4, pc}
   d94be:	bf00      	nop
   d94c0:	000e3fb8 	.word	0x000e3fb8

000d94c4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d94c4:	2300      	movs	r3, #0
   d94c6:	461a      	mov	r2, r3
   d94c8:	4619      	mov	r1, r3
   d94ca:	7c00      	ldrb	r0, [r0, #16]
   d94cc:	f7fe bd74 	b.w	d7fb8 <HAL_I2C_Begin>

000d94d0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d94d0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d94d2:	2400      	movs	r4, #0
   d94d4:	7c00      	ldrb	r0, [r0, #16]
   d94d6:	9400      	str	r4, [sp, #0]
   d94d8:	f7fe fd76 	bl	d7fc8 <HAL_I2C_Request_Data>
  return result;
}
   d94dc:	b2c0      	uxtb	r0, r0
   d94de:	b002      	add	sp, #8
   d94e0:	bd10      	pop	{r4, pc}

000d94e2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d94e2:	2301      	movs	r3, #1
   d94e4:	f7ff bff4 	b.w	d94d0 <_ZN7TwoWire11requestFromEhhh>

000d94e8 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d94e8:	2301      	movs	r3, #1
   d94ea:	b2d2      	uxtb	r2, r2
   d94ec:	b2c9      	uxtb	r1, r1
   d94ee:	f7ff bfef 	b.w	d94d0 <_ZN7TwoWire11requestFromEhhh>

000d94f2 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d94f2:	b2db      	uxtb	r3, r3
   d94f4:	b2d2      	uxtb	r2, r2
   d94f6:	b2c9      	uxtb	r1, r1
   d94f8:	f7ff bfea 	b.w	d94d0 <_ZN7TwoWire11requestFromEhhh>

000d94fc <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d94fc:	2200      	movs	r2, #0
   d94fe:	7c00      	ldrb	r0, [r0, #16]
   d9500:	f7fe bd6a 	b.w	d7fd8 <HAL_I2C_Begin_Transmission>

000d9504 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d9504:	b2c9      	uxtb	r1, r1
   d9506:	f7ff bff9 	b.w	d94fc <_ZN7TwoWire17beginTransmissionEh>

000d950a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d950a:	2200      	movs	r2, #0
   d950c:	7c00      	ldrb	r0, [r0, #16]
   d950e:	f7fe bd6b 	b.w	d7fe8 <HAL_I2C_End_Transmission>

000d9512 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d9512:	2101      	movs	r1, #1
   d9514:	f7ff bff9 	b.w	d950a <_ZN7TwoWire15endTransmissionEh>

000d9518 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d9518:	2100      	movs	r1, #0
   d951a:	7c00      	ldrb	r0, [r0, #16]
   d951c:	f7fe bd94 	b.w	d8048 <HAL_I2C_Is_Enabled>

000d9520 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9520:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d9522:	2100      	movs	r1, #0
   d9524:	7c00      	ldrb	r0, [r0, #16]
   d9526:	f7fe fd9f 	bl	d8068 <HAL_I2C_Acquire>
}
   d952a:	fab0 f080 	clz	r0, r0
   d952e:	0940      	lsrs	r0, r0, #5
   d9530:	bd08      	pop	{r3, pc}

000d9532 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9532:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d9534:	2100      	movs	r1, #0
   d9536:	7c00      	ldrb	r0, [r0, #16]
   d9538:	f7fe fd9e 	bl	d8078 <HAL_I2C_Release>
}
   d953c:	fab0 f080 	clz	r0, r0
   d9540:	0940      	lsrs	r0, r0, #5
   d9542:	bd08      	pop	{r3, pc}

000d9544 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9544:	2200      	movs	r2, #0
   d9546:	4611      	mov	r1, r2
   d9548:	6840      	ldr	r0, [r0, #4]
   d954a:	f7fe be91 	b.w	d8270 <network_listening>

000d954e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d954e:	2200      	movs	r2, #0
   d9550:	4611      	mov	r1, r2
   d9552:	6840      	ldr	r0, [r0, #4]
   d9554:	f7fe be9c 	b.w	d8290 <network_get_listen_timeout>

000d9558 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9558:	2200      	movs	r2, #0
   d955a:	6840      	ldr	r0, [r0, #4]
   d955c:	f7fe be90 	b.w	d8280 <network_set_listen_timeout>

000d9560 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9560:	2200      	movs	r2, #0
   d9562:	f081 0101 	eor.w	r1, r1, #1
   d9566:	6840      	ldr	r0, [r0, #4]
   d9568:	f7fe be7a 	b.w	d8260 <network_listen>

000d956c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d956c:	2300      	movs	r3, #0
   d956e:	461a      	mov	r2, r3
   d9570:	4619      	mov	r1, r3
   d9572:	6840      	ldr	r0, [r0, #4]
   d9574:	f7fe be6c 	b.w	d8250 <network_off>

000d9578 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9578:	2300      	movs	r3, #0
   d957a:	461a      	mov	r2, r3
   d957c:	4619      	mov	r1, r3
   d957e:	6840      	ldr	r0, [r0, #4]
   d9580:	f7fe be5e 	b.w	d8240 <network_on>

000d9584 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9584:	2200      	movs	r2, #0
   d9586:	4611      	mov	r1, r2
   d9588:	6840      	ldr	r0, [r0, #4]
   d958a:	f7fe be51 	b.w	d8230 <network_ready>

000d958e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d958e:	2200      	movs	r2, #0
   d9590:	4611      	mov	r1, r2
   d9592:	6840      	ldr	r0, [r0, #4]
   d9594:	f7fe be3c 	b.w	d8210 <network_connecting>

000d9598 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9598:	2200      	movs	r2, #0
   d959a:	2102      	movs	r1, #2
   d959c:	6840      	ldr	r0, [r0, #4]
   d959e:	f7fe be3f 	b.w	d8220 <network_disconnect>

000d95a2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d95a2:	2300      	movs	r3, #0
   d95a4:	461a      	mov	r2, r3
   d95a6:	6840      	ldr	r0, [r0, #4]
   d95a8:	f7fe be2a 	b.w	d8200 <network_connect>

000d95ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d95ac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d95ae:	4605      	mov	r5, r0
   d95b0:	b178      	cbz	r0, d95d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d95b2:	6804      	ldr	r4, [r0, #0]
   d95b4:	b144      	cbz	r4, d95c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d95b6:	68a3      	ldr	r3, [r4, #8]
   d95b8:	b11b      	cbz	r3, d95c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d95ba:	2203      	movs	r2, #3
   d95bc:	4621      	mov	r1, r4
   d95be:	4620      	mov	r0, r4
   d95c0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d95c2:	4620      	mov	r0, r4
   d95c4:	f7fa fd6b 	bl	d409e <_ZdlPv>
   d95c8:	4628      	mov	r0, r5
      }
   d95ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d95ce:	f7fa bd66 	b.w	d409e <_ZdlPv>
   d95d2:	bd38      	pop	{r3, r4, r5, pc}

000d95d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d95d4:	b110      	cbz	r0, d95dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d95d6:	6803      	ldr	r3, [r0, #0]
   d95d8:	685b      	ldr	r3, [r3, #4]
   d95da:	4718      	bx	r3
   d95dc:	4770      	bx	lr

000d95de <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d95de:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d95e0:	6803      	ldr	r3, [r0, #0]
   d95e2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d95e4:	b1bb      	cbz	r3, d9616 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d95e6:	6858      	ldr	r0, [r3, #4]
   d95e8:	f7fe fc66 	bl	d7eb8 <os_thread_is_current>
   d95ec:	b978      	cbnz	r0, d960e <_ZN6ThreadD1Ev+0x30>
   d95ee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d95f0:	7c5a      	ldrb	r2, [r3, #17]
   d95f2:	b912      	cbnz	r2, d95fa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d95f4:	6858      	ldr	r0, [r3, #4]
   d95f6:	f7fe fc67 	bl	d7ec8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d95fa:	6823      	ldr	r3, [r4, #0]
   d95fc:	6858      	ldr	r0, [r3, #4]
   d95fe:	f7fe fc6b 	bl	d7ed8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9602:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9604:	2300      	movs	r3, #0
   d9606:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d9608:	b128      	cbz	r0, d9616 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d960a:	f7ff ffcf 	bl	d95ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d960e:	6820      	ldr	r0, [r4, #0]
   d9610:	b108      	cbz	r0, d9616 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d9612:	f7ff ffcb 	bl	d95ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d9616:	4620      	mov	r0, r4
   d9618:	bd10      	pop	{r4, pc}
	...

000d961c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d961c:	b538      	push	{r3, r4, r5, lr}
   d961e:	4b0b      	ldr	r3, [pc, #44]	; (d964c <_ZN5spark9MeshClassD1Ev+0x30>)
   d9620:	6003      	str	r3, [r0, #0]
   d9622:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9624:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d9628:	b108      	cbz	r0, d962e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d962a:	f7fa fd3a 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d962e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d9632:	b12d      	cbz	r5, d9640 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9634:	4628      	mov	r0, r5
   d9636:	f7ff ffd2 	bl	d95de <_ZN6ThreadD1Ev>
   d963a:	4628      	mov	r0, r5
   d963c:	f7fa fd2f 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9640:	68a0      	ldr	r0, [r4, #8]
   d9642:	b108      	cbz	r0, d9648 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d9644:	f7ff ffc6 	bl	d95d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d9648:	4620      	mov	r0, r4
   d964a:	bd38      	pop	{r3, r4, r5, pc}
   d964c:	000e3fe0 	.word	0x000e3fe0

000d9650 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d9650:	b538      	push	{r3, r4, r5, lr}
   d9652:	4c0d      	ldr	r4, [pc, #52]	; (d9688 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d9654:	4b0d      	ldr	r3, [pc, #52]	; (d968c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d9656:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d9658:	2500      	movs	r5, #0
   d965a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d965c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9660:	6063      	str	r3, [r4, #4]
   d9662:	60a5      	str	r5, [r4, #8]
   d9664:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d9668:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d966c:	f7fe fc44 	bl	d7ef8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9670:	4b07      	ldr	r3, [pc, #28]	; (d9690 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d9672:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d9676:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d9678:	4620      	mov	r0, r4
   d967a:	4a06      	ldr	r2, [pc, #24]	; (d9694 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d967c:	4906      	ldr	r1, [pc, #24]	; (d9698 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d967e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d9682:	f000 bc77 	b.w	d9f74 <__aeabi_atexit>
   d9686:	bf00      	nop
   d9688:	2003e3fc 	.word	0x2003e3fc
   d968c:	000e4094 	.word	0x000e4094
   d9690:	000e3fe0 	.word	0x000e3fe0
   d9694:	2003dc0c 	.word	0x2003dc0c
   d9698:	000d961d 	.word	0x000d961d

000d969c <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d969c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d969e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d96a0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d96a2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d96a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d96a8:	2201      	movs	r2, #1
   d96aa:	f04f 33ff 	mov.w	r3, #4294967295
   d96ae:	4621      	mov	r1, r4
   d96b0:	47a8      	blx	r5
}
   d96b2:	b003      	add	sp, #12
   d96b4:	bd30      	pop	{r4, r5, pc}

000d96b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d96b6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d96b8:	6803      	ldr	r3, [r0, #0]
   d96ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d96bc:	f04f 33ff 	mov.w	r3, #4294967295
   d96c0:	46a4      	mov	ip, r4
}
   d96c2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d96c6:	4760      	bx	ip

000d96c8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d96c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d96ca:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d96cc:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d96ce:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d96d2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d96d4:	4621      	mov	r1, r4
   d96d6:	4613      	mov	r3, r2
   d96d8:	2201      	movs	r2, #1
   d96da:	47a8      	blx	r5
}
   d96dc:	b003      	add	sp, #12
   d96de:	bd30      	pop	{r4, r5, pc}

000d96e0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d96e0:	4770      	bx	lr

000d96e2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d96e2:	b538      	push	{r3, r4, r5, lr}
   d96e4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d96e6:	681a      	ldr	r2, [r3, #0]
   d96e8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d96ea:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d96ec:	da05      	bge.n	d96fa <_ZN9TCPClient9connectedEv+0x18>
   d96ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d96f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d96f6:	429a      	cmp	r2, r3
   d96f8:	d001      	beq.n	d96fe <_ZN9TCPClient9connectedEv+0x1c>
   d96fa:	2501      	movs	r5, #1
   d96fc:	e00b      	b.n	d9716 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d96fe:	6803      	ldr	r3, [r0, #0]
   d9700:	691b      	ldr	r3, [r3, #16]
   d9702:	4798      	blx	r3
   d9704:	2800      	cmp	r0, #0
   d9706:	bf14      	ite	ne
   d9708:	2501      	movne	r5, #1
   d970a:	2500      	moveq	r5, #0
        if (!rv) {
   d970c:	d103      	bne.n	d9716 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d970e:	6823      	ldr	r3, [r4, #0]
   d9710:	4620      	mov	r0, r4
   d9712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9714:	4798      	blx	r3
        }
    }
    return rv;
}
   d9716:	4628      	mov	r0, r5
   d9718:	bd38      	pop	{r3, r4, r5, pc}

000d971a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d971a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d971c:	6818      	ldr	r0, [r3, #0]
}
   d971e:	43c0      	mvns	r0, r0
   d9720:	0fc0      	lsrs	r0, r0, #31
   d9722:	4770      	bx	lr

000d9724 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d9724:	4770      	bx	lr

000d9726 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d9726:	2000      	movs	r0, #0
   d9728:	4770      	bx	lr

000d972a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d972a:	b510      	push	{r4, lr}
   d972c:	4604      	mov	r4, r0
   d972e:	f7fa fcb6 	bl	d409e <_ZdlPv>
   d9732:	4620      	mov	r0, r4
   d9734:	bd10      	pop	{r4, pc}

000d9736 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9736:	f7fa bcb2 	b.w	d409e <_ZdlPv>
	...

000d973c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d973c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9740:	4698      	mov	r8, r3
    stop();
   d9742:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9744:	b093      	sub	sp, #76	; 0x4c
    stop();
   d9746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d9748:	460c      	mov	r4, r1
   d974a:	4606      	mov	r6, r0
   d974c:	4617      	mov	r7, r2
    stop();
   d974e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d9750:	ab12      	add	r3, sp, #72	; 0x48
   d9752:	2500      	movs	r5, #0
   d9754:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d9758:	462a      	mov	r2, r5
   d975a:	4629      	mov	r1, r5
   d975c:	4620      	mov	r0, r4
   d975e:	f7fe fb1b 	bl	d7d98 <netdb_getaddrinfo>
   d9762:	2800      	cmp	r0, #0
   d9764:	db3a      	blt.n	d97dc <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d9766:	9b00      	ldr	r3, [sp, #0]
   d9768:	2b00      	cmp	r3, #0
   d976a:	d039      	beq.n	d97e0 <_ZN9TCPClient7connectEPKctm+0xa4>
   d976c:	695b      	ldr	r3, [r3, #20]
   d976e:	2b00      	cmp	r3, #0
   d9770:	d036      	beq.n	d97e0 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d9772:	a806      	add	r0, sp, #24
   d9774:	f7ff fc98 	bl	d90a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d9778:	9b00      	ldr	r3, [sp, #0]
   d977a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d977c:	7863      	ldrb	r3, [r4, #1]
   d977e:	2b02      	cmp	r3, #2
   d9780:	d101      	bne.n	d9786 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d9782:	1d21      	adds	r1, r4, #4
   d9784:	e013      	b.n	d97ae <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d9786:	2b0a      	cmp	r3, #10
   d9788:	d114      	bne.n	d97b4 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d978a:	2211      	movs	r2, #17
   d978c:	4629      	mov	r1, r5
   d978e:	a801      	add	r0, sp, #4
   d9790:	f006 fe97 	bl	e04c2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9794:	68a3      	ldr	r3, [r4, #8]
   d9796:	bb33      	cbnz	r3, d97e6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d9798:	68e3      	ldr	r3, [r4, #12]
   d979a:	bb23      	cbnz	r3, d97e6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d979c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d97a0:	6925      	ldr	r5, [r4, #16]
   d97a2:	f7fe fbb9 	bl	d7f18 <inet_htonl>
   d97a6:	4285      	cmp	r5, r0
   d97a8:	d11d      	bne.n	d97e6 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d97aa:	f104 0114 	add.w	r1, r4, #20
   d97ae:	a806      	add	r0, sp, #24
   d97b0:	f7ff fcbd 	bl	d912e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d97b4:	a806      	add	r0, sp, #24
   d97b6:	f7ff fc97 	bl	d90e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d97ba:	b188      	cbz	r0, d97e0 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d97bc:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d97be:	ad07      	add	r5, sp, #28
   d97c0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d97c4:	4b18      	ldr	r3, [pc, #96]	; (d9828 <_ZN9TCPClient7connectEPKctm+0xec>)
   d97c6:	930c      	str	r3, [sp, #48]	; 0x30
   d97c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d97ca:	ac0d      	add	r4, sp, #52	; 0x34
   d97cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d97ce:	682b      	ldr	r3, [r5, #0]
   d97d0:	7023      	strb	r3, [r4, #0]
   d97d2:	463a      	mov	r2, r7
   d97d4:	4643      	mov	r3, r8
   d97d6:	a90c      	add	r1, sp, #48	; 0x30
   d97d8:	4630      	mov	r0, r6
   d97da:	47c8      	blx	r9
   d97dc:	4604      	mov	r4, r0
   d97de:	e01c      	b.n	d981a <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d97e0:	f04f 34ff 	mov.w	r4, #4294967295
   d97e4:	e019      	b.n	d981a <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d97e6:	f104 0308 	add.w	r3, r4, #8
   d97ea:	ad01      	add	r5, sp, #4
   d97ec:	3418      	adds	r4, #24
   d97ee:	6818      	ldr	r0, [r3, #0]
   d97f0:	6859      	ldr	r1, [r3, #4]
   d97f2:	462a      	mov	r2, r5
   d97f4:	c203      	stmia	r2!, {r0, r1}
   d97f6:	3308      	adds	r3, #8
   d97f8:	42a3      	cmp	r3, r4
   d97fa:	4615      	mov	r5, r2
   d97fc:	d1f7      	bne.n	d97ee <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d97fe:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d9800:	a901      	add	r1, sp, #4
   d9802:	a80c      	add	r0, sp, #48	; 0x30
   d9804:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d9806:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d980a:	f7ff fc5b 	bl	d90c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d980e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9810:	ac07      	add	r4, sp, #28
   d9812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9814:	682b      	ldr	r3, [r5, #0]
   d9816:	7023      	strb	r3, [r4, #0]
   d9818:	e7cc      	b.n	d97b4 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d981a:	9800      	ldr	r0, [sp, #0]
   d981c:	f7fe fab4 	bl	d7d88 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d9820:	4620      	mov	r0, r4
   d9822:	b013      	add	sp, #76	; 0x4c
   d9824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9828:	000e3f10 	.word	0x000e3f10

000d982c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d982c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d982e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d9830:	2200      	movs	r2, #0
   d9832:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d9834:	9202      	str	r2, [sp, #8]
   d9836:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d9838:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d983a:	4604      	mov	r4, r0
   d983c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d983e:	d008      	beq.n	d9852 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d9840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9844:	fbb3 f1f2 	udiv	r1, r3, r2
   d9848:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d984a:	fb02 3111 	mls	r1, r2, r1, r3
   d984e:	434a      	muls	r2, r1
   d9850:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d9852:	6960      	ldr	r0, [r4, #20]
   d9854:	2308      	movs	r3, #8
   d9856:	9300      	str	r3, [sp, #0]
   d9858:	f241 0205 	movw	r2, #4101	; 0x1005
   d985c:	446b      	add	r3, sp
   d985e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9862:	6800      	ldr	r0, [r0, #0]
   d9864:	f7fe fc10 	bl	d8088 <sock_setsockopt>
    if (ret < 0) {
   d9868:	2800      	cmp	r0, #0
   d986a:	db08      	blt.n	d987e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d986c:	6960      	ldr	r0, [r4, #20]
   d986e:	2300      	movs	r3, #0
   d9870:	4632      	mov	r2, r6
   d9872:	4629      	mov	r1, r5
   d9874:	6800      	ldr	r0, [r0, #0]
   d9876:	f7fe fc27 	bl	d80c8 <sock_send>
    if (ret < 0) {
   d987a:	2800      	cmp	r0, #0
   d987c:	da04      	bge.n	d9888 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d987e:	f7fe fd7f 	bl	d8380 <__errno>
   d9882:	6803      	ldr	r3, [r0, #0]
   d9884:	6063      	str	r3, [r4, #4]
   d9886:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d9888:	b004      	add	sp, #16
   d988a:	bd70      	pop	{r4, r5, r6, pc}

000d988c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d988c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d988e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9890:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9892:	689b      	ldr	r3, [r3, #8]
   d9894:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9896:	68a3      	ldr	r3, [r4, #8]
   d9898:	3b01      	subs	r3, #1
   d989a:	60a3      	str	r3, [r4, #8]
   d989c:	b92b      	cbnz	r3, d98aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d989e:	6823      	ldr	r3, [r4, #0]
   d98a0:	4620      	mov	r0, r4
   d98a2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d98a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d98a8:	4718      	bx	r3
   d98aa:	bd10      	pop	{r4, pc}

000d98ac <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d98ac:	b570      	push	{r4, r5, r6, lr}
   d98ae:	4604      	mov	r4, r0
   d98b0:	694d      	ldr	r5, [r1, #20]
   d98b2:	4b05      	ldr	r3, [pc, #20]	; (d98c8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d98b4:	f844 3b04 	str.w	r3, [r4], #4
   d98b8:	358c      	adds	r5, #140	; 0x8c
   d98ba:	4606      	mov	r6, r0
   d98bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d98be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d98c0:	682b      	ldr	r3, [r5, #0]
   d98c2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d98c4:	4630      	mov	r0, r6
   d98c6:	bd70      	pop	{r4, r5, r6, pc}
   d98c8:	000e3f10 	.word	0x000e3f10

000d98cc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d98cc:	b510      	push	{r4, lr}
   d98ce:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d98d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d98d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d98d8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d98da:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d98dc:	d005      	beq.n	d98ea <_ZN9TCPClient4peekEv+0x1e>
   d98de:	6962      	ldr	r2, [r4, #20]
   d98e0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d98e4:	4413      	add	r3, r2
   d98e6:	7918      	ldrb	r0, [r3, #4]
   d98e8:	bd10      	pop	{r4, pc}
   d98ea:	6803      	ldr	r3, [r0, #0]
   d98ec:	691b      	ldr	r3, [r3, #16]
   d98ee:	4798      	blx	r3
   d98f0:	2800      	cmp	r0, #0
   d98f2:	d1f4      	bne.n	d98de <_ZN9TCPClient4peekEv+0x12>
   d98f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d98f8:	bd10      	pop	{r4, pc}

000d98fa <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d98fa:	b510      	push	{r4, lr}
   d98fc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d98fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9902:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9906:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d9908:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d990a:	d008      	beq.n	d991e <_ZN9TCPClient4readEv+0x24>
   d990c:	6962      	ldr	r2, [r4, #20]
   d990e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9912:	1c59      	adds	r1, r3, #1
   d9914:	4413      	add	r3, r2
   d9916:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d991a:	7918      	ldrb	r0, [r3, #4]
   d991c:	bd10      	pop	{r4, pc}
   d991e:	6803      	ldr	r3, [r0, #0]
   d9920:	691b      	ldr	r3, [r3, #16]
   d9922:	4798      	blx	r3
   d9924:	2800      	cmp	r0, #0
   d9926:	d1f1      	bne.n	d990c <_ZN9TCPClient4readEv+0x12>
   d9928:	f04f 30ff 	mov.w	r0, #4294967295
}
   d992c:	bd10      	pop	{r4, pc}

000d992e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d992e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9930:	6943      	ldr	r3, [r0, #20]
   d9932:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d9934:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9938:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d993c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d993e:	4605      	mov	r5, r0
   d9940:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d9942:	d106      	bne.n	d9952 <_ZN9TCPClient4readEPhj+0x24>
   d9944:	6803      	ldr	r3, [r0, #0]
   d9946:	691b      	ldr	r3, [r3, #16]
   d9948:	4798      	blx	r3
   d994a:	b910      	cbnz	r0, d9952 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d994c:	f04f 34ff 	mov.w	r4, #4294967295
   d9950:	e014      	b.n	d997c <_ZN9TCPClient4readEPhj+0x4e>
   d9952:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d9954:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d9958:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d995c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d995e:	42bc      	cmp	r4, r7
   d9960:	bf28      	it	cs
   d9962:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d9964:	4419      	add	r1, r3
   d9966:	4622      	mov	r2, r4
   d9968:	3104      	adds	r1, #4
   d996a:	4630      	mov	r0, r6
   d996c:	f006 fd9e 	bl	e04ac <memcpy>
   d9970:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d9972:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d9976:	4423      	add	r3, r4
   d9978:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d997c:	4620      	mov	r0, r4
   d997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9980 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d9980:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d9982:	2300      	movs	r3, #0
   d9984:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d9988:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d998a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d998e:	4770      	bx	lr

000d9990 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9994:	4698      	mov	r8, r3
    stop();
   d9996:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9998:	460d      	mov	r5, r1
   d999a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d999e:	4606      	mov	r6, r0
   d99a0:	4617      	mov	r7, r2
    stop();
   d99a2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d99a4:	7d2b      	ldrb	r3, [r5, #20]
   d99a6:	6974      	ldr	r4, [r6, #20]
   d99a8:	2b04      	cmp	r3, #4
   d99aa:	bf0c      	ite	eq
   d99ac:	2002      	moveq	r0, #2
   d99ae:	200a      	movne	r0, #10
   d99b0:	2206      	movs	r2, #6
   d99b2:	2101      	movs	r1, #1
   d99b4:	f7fe fb90 	bl	d80d8 <sock_socket>
   d99b8:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d99ba:	6973      	ldr	r3, [r6, #20]
   d99bc:	681c      	ldr	r4, [r3, #0]
   d99be:	2c00      	cmp	r4, #0
   d99c0:	db5b      	blt.n	d9a7a <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d99c2:	4630      	mov	r0, r6
   d99c4:	f7ff ffdc 	bl	d9980 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d99c8:	f1b8 0f00 	cmp.w	r8, #0
   d99cc:	d017      	beq.n	d99fe <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d99ce:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d99d0:	a903      	add	r1, sp, #12
   d99d2:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d99d6:	9303      	str	r3, [sp, #12]
   d99d8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d99dc:	f7fe fa3c 	bl	d7e58 <if_index_to_name>
   d99e0:	2800      	cmp	r0, #0
   d99e2:	db49      	blt.n	d9a78 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d99e4:	6970      	ldr	r0, [r6, #20]
   d99e6:	2306      	movs	r3, #6
   d99e8:	9300      	str	r3, [sp, #0]
   d99ea:	f241 020b 	movw	r2, #4107	; 0x100b
   d99ee:	ab03      	add	r3, sp, #12
   d99f0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d99f4:	6800      	ldr	r0, [r0, #0]
   d99f6:	f7fe fb47 	bl	d8088 <sock_setsockopt>
   d99fa:	2800      	cmp	r0, #0
   d99fc:	db3c      	blt.n	d9a78 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d99fe:	241c      	movs	r4, #28
   d9a00:	4622      	mov	r2, r4
   d9a02:	2100      	movs	r1, #0
   d9a04:	a803      	add	r0, sp, #12
   d9a06:	f006 fd5c 	bl	e04c2 <memset>
    if (ip.version() == 4) {
   d9a0a:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d9a0c:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d9a10:	2b04      	cmp	r3, #4
   d9a12:	d10c      	bne.n	d9a2e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9a14:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d9a16:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d9a18:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d9a1c:	f7fe fa84 	bl	d7f28 <inet_htons>
   d9a20:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d9a24:	6868      	ldr	r0, [r5, #4]
   d9a26:	f7fe fa77 	bl	d7f18 <inet_htonl>
   d9a2a:	9004      	str	r0, [sp, #16]
   d9a2c:	e013      	b.n	d9a56 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9a2e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d9a30:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9a32:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d9a36:	f7fe fa77 	bl	d7f28 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9a3a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d9a3c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9a40:	1d2b      	adds	r3, r5, #4
   d9a42:	f105 0714 	add.w	r7, r5, #20
   d9a46:	6818      	ldr	r0, [r3, #0]
   d9a48:	6859      	ldr	r1, [r3, #4]
   d9a4a:	4622      	mov	r2, r4
   d9a4c:	c203      	stmia	r2!, {r0, r1}
   d9a4e:	3308      	adds	r3, #8
   d9a50:	42bb      	cmp	r3, r7
   d9a52:	4614      	mov	r4, r2
   d9a54:	d1f7      	bne.n	d9a46 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d9a56:	6973      	ldr	r3, [r6, #20]
   d9a58:	221c      	movs	r2, #28
   d9a5a:	a903      	add	r1, sp, #12
   d9a5c:	6818      	ldr	r0, [r3, #0]
   d9a5e:	f7fe fb23 	bl	d80a8 <sock_connect>
   d9a62:	2800      	cmp	r0, #0
   d9a64:	db08      	blt.n	d9a78 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d9a66:	1d2c      	adds	r4, r5, #4
   d9a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9a6a:	6976      	ldr	r6, [r6, #20]
   d9a6c:	368c      	adds	r6, #140	; 0x8c
   d9a6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d9a70:	6823      	ldr	r3, [r4, #0]
   d9a72:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d9a74:	2401      	movs	r4, #1
   d9a76:	e004      	b.n	d9a82 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d9a78:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9a7a:	6833      	ldr	r3, [r6, #0]
   d9a7c:	4630      	mov	r0, r6
   d9a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9a80:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d9a82:	4620      	mov	r0, r4
   d9a84:	b00a      	add	sp, #40	; 0x28
   d9a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9a8a <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9a8a:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9a8c:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9a8e:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d9a90:	6818      	ldr	r0, [r3, #0]
   d9a92:	2800      	cmp	r0, #0
   d9a94:	db01      	blt.n	d9a9a <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d9a96:	f7fe faff 	bl	d8098 <sock_close>
   d9a9a:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d9a9c:	f04f 32ff 	mov.w	r2, #4294967295
   d9aa0:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9aa2:	6960      	ldr	r0, [r4, #20]
   d9aa4:	2211      	movs	r2, #17
   d9aa6:	2100      	movs	r1, #0
   d9aa8:	308c      	adds	r0, #140	; 0x8c
   d9aaa:	f006 fd0a 	bl	e04c2 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d9aae:	4620      	mov	r0, r4
}
   d9ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d9ab4:	f7ff bf64 	b.w	d9980 <_ZN9TCPClient12flush_bufferEv>

000d9ab8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9ab8:	b530      	push	{r4, r5, lr}
   d9aba:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9abc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9ac0:	b08b      	sub	sp, #44	; 0x2c
   d9ac2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9ac4:	b11b      	cbz	r3, d9ace <_ZN9TCPClient9availableEv+0x16>
   d9ac6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d9aca:	429a      	cmp	r2, r3
   d9acc:	d040      	beq.n	d9b50 <_ZN9TCPClient9availableEv+0x98>
   d9ace:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d9ad0:	6818      	ldr	r0, [r3, #0]
   d9ad2:	2800      	cmp	r0, #0
   d9ad4:	db3f      	blt.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d9ad6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d9ada:	2d7f      	cmp	r5, #127	; 0x7f
   d9adc:	d83b      	bhi.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d9ade:	1d19      	adds	r1, r3, #4
   d9ae0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d9ae4:	2308      	movs	r3, #8
   d9ae6:	4429      	add	r1, r5
   d9ae8:	f7fe fae6 	bl	d80b8 <sock_recv>
            if (ret > 0) {
   d9aec:	2800      	cmp	r0, #0
   d9aee:	dd0c      	ble.n	d9b0a <_ZN9TCPClient9availableEv+0x52>
   d9af0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d9af2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d9af6:	b90a      	cbnz	r2, d9afc <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d9af8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d9afc:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d9afe:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9b02:	4418      	add	r0, r3
   d9b04:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d9b08:	e025      	b.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d9b0a:	f7fe fc39 	bl	d8380 <__errno>
   d9b0e:	6803      	ldr	r3, [r0, #0]
   d9b10:	2b0b      	cmp	r3, #11
   d9b12:	d020      	beq.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
   d9b14:	f7fe fc34 	bl	d8380 <__errno>
   d9b18:	6803      	ldr	r3, [r0, #0]
   d9b1a:	2b0b      	cmp	r3, #11
   d9b1c:	d01b      	beq.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d9b1e:	2320      	movs	r3, #32
   d9b20:	2500      	movs	r5, #0
   d9b22:	9302      	str	r3, [sp, #8]
   d9b24:	9503      	str	r5, [sp, #12]
   d9b26:	f7fe fc2b 	bl	d8380 <__errno>
   d9b2a:	6803      	ldr	r3, [r0, #0]
   d9b2c:	9301      	str	r3, [sp, #4]
   d9b2e:	4b0e      	ldr	r3, [pc, #56]	; (d9b68 <_ZN9TCPClient9availableEv+0xb0>)
   d9b30:	9300      	str	r3, [sp, #0]
   d9b32:	aa02      	add	r2, sp, #8
   d9b34:	462b      	mov	r3, r5
   d9b36:	490d      	ldr	r1, [pc, #52]	; (d9b6c <_ZN9TCPClient9availableEv+0xb4>)
   d9b38:	2032      	movs	r0, #50	; 0x32
   d9b3a:	f7fe fb15 	bl	d8168 <log_message>
                    sock_close(d_->sock);
   d9b3e:	6963      	ldr	r3, [r4, #20]
   d9b40:	6818      	ldr	r0, [r3, #0]
   d9b42:	f7fe faa9 	bl	d8098 <sock_close>
   d9b46:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9b48:	f04f 32ff 	mov.w	r2, #4294967295
   d9b4c:	601a      	str	r2, [r3, #0]
   d9b4e:	e002      	b.n	d9b56 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d9b50:	f7ff ff16 	bl	d9980 <_ZN9TCPClient12flush_bufferEv>
   d9b54:	e7bb      	b.n	d9ace <_ZN9TCPClient9availableEv+0x16>
   d9b56:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d9b58:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9b5c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d9b60:	1a18      	subs	r0, r3, r0
}
   d9b62:	b00b      	add	sp, #44	; 0x2c
   d9b64:	bd30      	pop	{r4, r5, pc}
   d9b66:	bf00      	nop
   d9b68:	000e407b 	.word	0x000e407b
   d9b6c:	000e4074 	.word	0x000e4074

000d9b70 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9b70:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d9b72:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9b74:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d9b76:	6001      	str	r1, [r0, #0]
   d9b78:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d9b7c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d9b80:	3088      	adds	r0, #136	; 0x88
   d9b82:	f7ff fa91 	bl	d90a8 <_ZN9IPAddressC1Ev>
}
   d9b86:	4620      	mov	r0, r4
   d9b88:	bd10      	pop	{r4, pc}
	...

000d9b8c <_ZN9TCPClientC1Ei>:
   d9b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9b90:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9b92:	2300      	movs	r3, #0
   d9b94:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d9b96:	4a14      	ldr	r2, [pc, #80]	; (d9be8 <_ZN9TCPClientC1Ei+0x5c>)
   d9b98:	6043      	str	r3, [r0, #4]
   d9b9a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9b9c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9b9e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9ba0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9ba2:	20a0      	movs	r0, #160	; 0xa0
   d9ba4:	460e      	mov	r6, r1
   d9ba6:	f7fa fa78 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9baa:	4605      	mov	r5, r0
   d9bac:	b110      	cbz	r0, d9bb4 <_ZN9TCPClientC1Ei+0x28>
   d9bae:	4631      	mov	r1, r6
   d9bb0:	f7ff ffde 	bl	d9b70 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9bb4:	2014      	movs	r0, #20
   d9bb6:	f7fa fa70 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d9bba:	4603      	mov	r3, r0
   d9bbc:	b128      	cbz	r0, d9bca <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9bbe:	2201      	movs	r2, #1
   d9bc0:	6042      	str	r2, [r0, #4]
   d9bc2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d9bc4:	4a09      	ldr	r2, [pc, #36]	; (d9bec <_ZN9TCPClientC1Ei+0x60>)
   d9bc6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d9bc8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9bca:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d9bcc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9bce:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d9bd0:	b128      	cbz	r0, d9bde <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d9bd2:	6843      	ldr	r3, [r0, #4]
   d9bd4:	3b01      	subs	r3, #1
   d9bd6:	6043      	str	r3, [r0, #4]
   d9bd8:	b90b      	cbnz	r3, d9bde <_ZN9TCPClientC1Ei+0x52>
   d9bda:	f7ff fe57 	bl	d988c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d9bde:	4620      	mov	r0, r4
   d9be0:	f7ff fece 	bl	d9980 <_ZN9TCPClient12flush_bufferEv>
}
   d9be4:	4620      	mov	r0, r4
   d9be6:	bd70      	pop	{r4, r5, r6, pc}
   d9be8:	000e4030 	.word	0x000e4030
   d9bec:	000e4014 	.word	0x000e4014

000d9bf0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9bf0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d9bf2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d9bf6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d9bf8:	f7ff ffc8 	bl	d9b8c <_ZN9TCPClientC1Ei>
}
   d9bfc:	4620      	mov	r0, r4
   d9bfe:	bd10      	pop	{r4, pc}

000d9c00 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d9c00:	b510      	push	{r4, lr}
   d9c02:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d9c04:	6800      	ldr	r0, [r0, #0]
   d9c06:	2800      	cmp	r0, #0
   d9c08:	db01      	blt.n	d9c0e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d9c0a:	f7fe fa45 	bl	d8098 <sock_close>
    }
}
   d9c0e:	4620      	mov	r0, r4
   d9c10:	bd10      	pop	{r4, pc}

000d9c12 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d9c12:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d9c14:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d9c16:	4620      	mov	r0, r4
   d9c18:	f7ff fff2 	bl	d9c00 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d9c1c:	b124      	cbz	r4, d9c28 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9c1e:	4620      	mov	r0, r4
   d9c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9c24:	f7fa ba3b 	b.w	d409e <_ZdlPv>
   d9c28:	bd10      	pop	{r4, pc}

000d9c2a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9c2a:	2300      	movs	r3, #0
   d9c2c:	461a      	mov	r2, r3
   d9c2e:	6840      	ldr	r0, [r0, #4]
   d9c30:	f7fe bae6 	b.w	d8200 <network_connect>

000d9c34 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9c34:	2200      	movs	r2, #0
   d9c36:	2102      	movs	r1, #2
   d9c38:	6840      	ldr	r0, [r0, #4]
   d9c3a:	f7fe baf1 	b.w	d8220 <network_disconnect>

000d9c3e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9c3e:	2200      	movs	r2, #0
   d9c40:	4611      	mov	r1, r2
   d9c42:	6840      	ldr	r0, [r0, #4]
   d9c44:	f7fe bae4 	b.w	d8210 <network_connecting>

000d9c48 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9c48:	2200      	movs	r2, #0
   d9c4a:	4611      	mov	r1, r2
   d9c4c:	6840      	ldr	r0, [r0, #4]
   d9c4e:	f7fe baef 	b.w	d8230 <network_ready>

000d9c52 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9c52:	2300      	movs	r3, #0
   d9c54:	461a      	mov	r2, r3
   d9c56:	4619      	mov	r1, r3
   d9c58:	6840      	ldr	r0, [r0, #4]
   d9c5a:	f7fe baf1 	b.w	d8240 <network_on>

000d9c5e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9c5e:	2300      	movs	r3, #0
   d9c60:	461a      	mov	r2, r3
   d9c62:	4619      	mov	r1, r3
   d9c64:	6840      	ldr	r0, [r0, #4]
   d9c66:	f7fe baf3 	b.w	d8250 <network_off>

000d9c6a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9c6a:	2200      	movs	r2, #0
   d9c6c:	f081 0101 	eor.w	r1, r1, #1
   d9c70:	6840      	ldr	r0, [r0, #4]
   d9c72:	f7fe baf5 	b.w	d8260 <network_listen>

000d9c76 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9c76:	2200      	movs	r2, #0
   d9c78:	6840      	ldr	r0, [r0, #4]
   d9c7a:	f7fe bb01 	b.w	d8280 <network_set_listen_timeout>

000d9c7e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9c7e:	2200      	movs	r2, #0
   d9c80:	4611      	mov	r1, r2
   d9c82:	6840      	ldr	r0, [r0, #4]
   d9c84:	f7fe bb04 	b.w	d8290 <network_get_listen_timeout>

000d9c88 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9c88:	2200      	movs	r2, #0
   d9c8a:	4611      	mov	r1, r2
   d9c8c:	6840      	ldr	r0, [r0, #4]
   d9c8e:	f7fe baef 	b.w	d8270 <network_listening>

000d9c92 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9c96:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d9c98:	b095      	sub	sp, #84	; 0x54
   d9c9a:	4616      	mov	r6, r2
   d9c9c:	460d      	mov	r5, r1
   d9c9e:	4607      	mov	r7, r0
    IPAddress addr;
   d9ca0:	f7ff fa02 	bl	d90a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d9ca4:	4621      	mov	r1, r4
   d9ca6:	2220      	movs	r2, #32
   d9ca8:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9caa:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9cac:	f006 fc09 	bl	e04c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9cb0:	2340      	movs	r3, #64	; 0x40
   d9cb2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9cb4:	4621      	mov	r1, r4
   d9cb6:	466b      	mov	r3, sp
   d9cb8:	aa0c      	add	r2, sp, #48	; 0x30
   d9cba:	4630      	mov	r0, r6
   d9cbc:	f7fe f86c 	bl	d7d98 <netdb_getaddrinfo>
    if (!r) {
   d9cc0:	4604      	mov	r4, r0
   d9cc2:	2800      	cmp	r0, #0
   d9cc4:	d144      	bne.n	d9d50 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9cc6:	4602      	mov	r2, r0
   d9cc8:	2101      	movs	r1, #1
   d9cca:	6868      	ldr	r0, [r5, #4]
   d9ccc:	f7fe fab0 	bl	d8230 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9cd0:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9cd2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9cd4:	4622      	mov	r2, r4
   d9cd6:	6868      	ldr	r0, [r5, #4]
   d9cd8:	f7fe faaa 	bl	d8230 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9cdc:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9cde:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d9ce0:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9ce2:	2e00      	cmp	r6, #0
   d9ce4:	d034      	beq.n	d9d50 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9ce6:	2900      	cmp	r1, #0
   d9ce8:	d132      	bne.n	d9d50 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9cea:	6873      	ldr	r3, [r6, #4]
   d9cec:	2b02      	cmp	r3, #2
   d9cee:	d002      	beq.n	d9cf6 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d9cf0:	2b0a      	cmp	r3, #10
   d9cf2:	d009      	beq.n	d9d08 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d9cf4:	e02a      	b.n	d9d4c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9cf6:	f1b8 0f00 	cmp.w	r8, #0
   d9cfa:	d027      	beq.n	d9d4c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9cfc:	6971      	ldr	r1, [r6, #20]
   d9cfe:	4638      	mov	r0, r7
   d9d00:	3104      	adds	r1, #4
   d9d02:	f7ff fa14 	bl	d912e <_ZN9IPAddressaSEPKh>
   d9d06:	e020      	b.n	d9d4a <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9d08:	f1b9 0f00 	cmp.w	r9, #0
   d9d0c:	d01e      	beq.n	d9d4c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9d0e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9d10:	2211      	movs	r2, #17
   d9d12:	a801      	add	r0, sp, #4
   d9d14:	f006 fbd5 	bl	e04c2 <memset>
                    a.v = 6;
   d9d18:	2306      	movs	r3, #6
   d9d1a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9d1e:	ad01      	add	r5, sp, #4
   d9d20:	f104 0308 	add.w	r3, r4, #8
   d9d24:	3418      	adds	r4, #24
   d9d26:	6818      	ldr	r0, [r3, #0]
   d9d28:	6859      	ldr	r1, [r3, #4]
   d9d2a:	462a      	mov	r2, r5
   d9d2c:	c203      	stmia	r2!, {r0, r1}
   d9d2e:	3308      	adds	r3, #8
   d9d30:	42a3      	cmp	r3, r4
   d9d32:	4615      	mov	r5, r2
   d9d34:	d1f7      	bne.n	d9d26 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d9d36:	a901      	add	r1, sp, #4
   d9d38:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9d3a:	ad07      	add	r5, sp, #28
   d9d3c:	f7ff f9c2 	bl	d90c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9d42:	1d3c      	adds	r4, r7, #4
   d9d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9d46:	682b      	ldr	r3, [r5, #0]
   d9d48:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9d4a:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9d4c:	69f6      	ldr	r6, [r6, #28]
   d9d4e:	e7c8      	b.n	d9ce2 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9d50:	9800      	ldr	r0, [sp, #0]
   d9d52:	f7fe f819 	bl	d7d88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9d56:	4638      	mov	r0, r7
   d9d58:	b015      	add	sp, #84	; 0x54
   d9d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9d60 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9d60:	4b02      	ldr	r3, [pc, #8]	; (d9d6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9d62:	4a03      	ldr	r2, [pc, #12]	; (d9d70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9d64:	601a      	str	r2, [r3, #0]
   d9d66:	2200      	movs	r2, #0
   d9d68:	605a      	str	r2, [r3, #4]
   d9d6a:	4770      	bx	lr
   d9d6c:	2003e5cc 	.word	0x2003e5cc
   d9d70:	000e4094 	.word	0x000e4094

000d9d74 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9d74:	b510      	push	{r4, lr}
   d9d76:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9d78:	480f      	ldr	r0, [pc, #60]	; (d9db8 <pinAvailable+0x44>)
   d9d7a:	f7fe fb63 	bl	d8444 <_ZN8SPIClass9isEnabledEv>
   d9d7e:	b128      	cbz	r0, d9d8c <pinAvailable+0x18>
   d9d80:	f1a4 030b 	sub.w	r3, r4, #11
   d9d84:	2b02      	cmp	r3, #2
   d9d86:	d801      	bhi.n	d9d8c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d9d88:	2000      	movs	r0, #0
   d9d8a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9d8c:	f000 f8b2 	bl	d9ef4 <_Z19__fetch_global_Wirev>
   d9d90:	f7ff fbc2 	bl	d9518 <_ZN7TwoWire9isEnabledEv>
   d9d94:	b108      	cbz	r0, d9d9a <pinAvailable+0x26>
   d9d96:	2c01      	cmp	r4, #1
   d9d98:	d9f6      	bls.n	d9d88 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9d9a:	f7ff fb15 	bl	d93c8 <_Z22__fetch_global_Serial1v>
   d9d9e:	f7ff fb0f 	bl	d93c0 <_ZN11USARTSerial9isEnabledEv>
   d9da2:	b118      	cbz	r0, d9dac <pinAvailable+0x38>
   d9da4:	f1a4 0309 	sub.w	r3, r4, #9
   d9da8:	2b01      	cmp	r3, #1
   d9daa:	d9ed      	bls.n	d9d88 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9dac:	2c23      	cmp	r4, #35	; 0x23
   d9dae:	bf8c      	ite	hi
   d9db0:	2000      	movhi	r0, #0
   d9db2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9db4:	bd10      	pop	{r4, pc}
   d9db6:	bf00      	nop
   d9db8:	2003e5d4 	.word	0x2003e5d4

000d9dbc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9dbc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d9dbe:	b538      	push	{r3, r4, r5, lr}
   d9dc0:	4604      	mov	r4, r0
   d9dc2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9dc4:	d80a      	bhi.n	d9ddc <pinMode+0x20>
   d9dc6:	29ff      	cmp	r1, #255	; 0xff
   d9dc8:	d008      	beq.n	d9ddc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9dca:	f7ff ffd3 	bl	d9d74 <pinAvailable>
   d9dce:	b128      	cbz	r0, d9ddc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9dd0:	4629      	mov	r1, r5
   d9dd2:	4620      	mov	r0, r4
}
   d9dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9dd8:	f7fd bff6 	b.w	d7dc8 <HAL_Pin_Mode>
   d9ddc:	bd38      	pop	{r3, r4, r5, pc}

000d9dde <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9dde:	b538      	push	{r3, r4, r5, lr}
   d9de0:	4604      	mov	r4, r0
   d9de2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9de4:	f7fd fff8 	bl	d7dd8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9de8:	28ff      	cmp	r0, #255	; 0xff
   d9dea:	d010      	beq.n	d9e0e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9dec:	2806      	cmp	r0, #6
   d9dee:	d804      	bhi.n	d9dfa <digitalWrite+0x1c>
   d9df0:	234d      	movs	r3, #77	; 0x4d
   d9df2:	fa23 f000 	lsr.w	r0, r3, r0
   d9df6:	07c3      	lsls	r3, r0, #31
   d9df8:	d409      	bmi.n	d9e0e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9dfa:	4620      	mov	r0, r4
   d9dfc:	f7ff ffba 	bl	d9d74 <pinAvailable>
   d9e00:	b128      	cbz	r0, d9e0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9e02:	4629      	mov	r1, r5
   d9e04:	4620      	mov	r0, r4
}
   d9e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9e0a:	f7fd bfed 	b.w	d7de8 <HAL_GPIO_Write>
   d9e0e:	bd38      	pop	{r3, r4, r5, pc}

000d9e10 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9e10:	b510      	push	{r4, lr}
   d9e12:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e14:	f7fd ffe0 	bl	d7dd8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d9e18:	3804      	subs	r0, #4
   d9e1a:	b2c0      	uxtb	r0, r0
   d9e1c:	2801      	cmp	r0, #1
   d9e1e:	d908      	bls.n	d9e32 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9e20:	4620      	mov	r0, r4
   d9e22:	f7ff ffa7 	bl	d9d74 <pinAvailable>
   d9e26:	b120      	cbz	r0, d9e32 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9e28:	4620      	mov	r0, r4
}
   d9e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9e2e:	f7fd bfe3 	b.w	d7df8 <HAL_GPIO_Read>
}
   d9e32:	2000      	movs	r0, #0
   d9e34:	bd10      	pop	{r4, pc}

000d9e36 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9e36:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d9e38:	b510      	push	{r4, lr}
   d9e3a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9e3c:	bf9c      	itt	ls
   d9e3e:	340e      	addls	r4, #14
   d9e40:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9e42:	4620      	mov	r0, r4
   d9e44:	f7ff ff96 	bl	d9d74 <pinAvailable>
   d9e48:	b150      	cbz	r0, d9e60 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d9e4a:	2103      	movs	r1, #3
   d9e4c:	4620      	mov	r0, r4
   d9e4e:	f7fd ffb3 	bl	d7db8 <HAL_Validate_Pin_Function>
   d9e52:	2803      	cmp	r0, #3
   d9e54:	d104      	bne.n	d9e60 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9e56:	4620      	mov	r0, r4
}
   d9e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9e5c:	f7fd bfdc 	b.w	d7e18 <HAL_ADC_Read>
}
   d9e60:	2000      	movs	r0, #0
   d9e62:	bd10      	pop	{r4, pc}

000d9e64 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d9e64:	b538      	push	{r3, r4, r5, lr}
   d9e66:	4604      	mov	r4, r0
   d9e68:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d9e6a:	f7ff ff83 	bl	d9d74 <pinAvailable>
   d9e6e:	b1f0      	cbz	r0, d9eae <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d9e70:	2104      	movs	r1, #4
   d9e72:	4620      	mov	r0, r4
   d9e74:	f7fd ffa0 	bl	d7db8 <HAL_Validate_Pin_Function>
   d9e78:	2804      	cmp	r0, #4
   d9e7a:	d105      	bne.n	d9e88 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d9e7c:	b2a9      	uxth	r1, r5
   d9e7e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d9e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d9e84:	f7fd bfc0 	b.w	d7e08 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d9e88:	2102      	movs	r1, #2
   d9e8a:	4620      	mov	r0, r4
   d9e8c:	f7fd ff94 	bl	d7db8 <HAL_Validate_Pin_Function>
   d9e90:	2802      	cmp	r0, #2
   d9e92:	d10c      	bne.n	d9eae <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e94:	4620      	mov	r0, r4
   d9e96:	f7fd ff9f 	bl	d7dd8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d9e9a:	2801      	cmp	r0, #1
   d9e9c:	d001      	beq.n	d9ea2 <_Z11analogWritetm+0x3e>
   d9e9e:	2804      	cmp	r0, #4
   d9ea0:	d105      	bne.n	d9eae <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d9ea2:	4629      	mov	r1, r5
   d9ea4:	4620      	mov	r0, r4
    }
}
   d9ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d9eaa:	f7fd bfbd 	b.w	d7e28 <HAL_PWM_Write_Ext>
   d9eae:	bd38      	pop	{r3, r4, r5, pc}

000d9eb0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9eb0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9eb2:	4c0c      	ldr	r4, [pc, #48]	; (d9ee4 <_GLOBAL__sub_I_SPI+0x34>)
   d9eb4:	4e0c      	ldr	r6, [pc, #48]	; (d9ee8 <_GLOBAL__sub_I_SPI+0x38>)
   d9eb6:	4d0d      	ldr	r5, [pc, #52]	; (d9eec <_GLOBAL__sub_I_SPI+0x3c>)
   d9eb8:	2100      	movs	r1, #0
   d9eba:	4620      	mov	r0, r4
   d9ebc:	f7fe faae 	bl	d841c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9ec0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9ec2:	4c0b      	ldr	r4, [pc, #44]	; (d9ef0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9ec4:	4632      	mov	r2, r6
   d9ec6:	4629      	mov	r1, r5
   d9ec8:	f000 f854 	bl	d9f74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9ecc:	2101      	movs	r1, #1
   d9ece:	4620      	mov	r0, r4
   d9ed0:	f7fe faa4 	bl	d841c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9ed4:	4632      	mov	r2, r6
   d9ed6:	4629      	mov	r1, r5
   d9ed8:	4620      	mov	r0, r4
   d9eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9ede:	f000 b849 	b.w	d9f74 <__aeabi_atexit>
   d9ee2:	bf00      	nop
   d9ee4:	2003e5d4 	.word	0x2003e5d4
   d9ee8:	2003dc0c 	.word	0x2003dc0c
   d9eec:	000d840d 	.word	0x000d840d
   d9ef0:	2003e5e4 	.word	0x2003e5e4

000d9ef4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d9ef4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d9ef6:	4d0b      	ldr	r5, [pc, #44]	; (d9f24 <_Z19__fetch_global_Wirev+0x30>)
   d9ef8:	6829      	ldr	r1, [r5, #0]
   d9efa:	f011 0401 	ands.w	r4, r1, #1
   d9efe:	d10f      	bne.n	d9f20 <_Z19__fetch_global_Wirev+0x2c>
   d9f00:	4628      	mov	r0, r5
   d9f02:	f7fa f8d0 	bl	d40a6 <__cxa_guard_acquire>
   d9f06:	b158      	cbz	r0, d9f20 <_Z19__fetch_global_Wirev+0x2c>
   d9f08:	4621      	mov	r1, r4
   d9f0a:	4807      	ldr	r0, [pc, #28]	; (d9f28 <_Z19__fetch_global_Wirev+0x34>)
   d9f0c:	f7ff fac8 	bl	d94a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d9f10:	4628      	mov	r0, r5
   d9f12:	f7fa f8cd 	bl	d40b0 <__cxa_guard_release>
   d9f16:	4a05      	ldr	r2, [pc, #20]	; (d9f2c <_Z19__fetch_global_Wirev+0x38>)
   d9f18:	4905      	ldr	r1, [pc, #20]	; (d9f30 <_Z19__fetch_global_Wirev+0x3c>)
   d9f1a:	4803      	ldr	r0, [pc, #12]	; (d9f28 <_Z19__fetch_global_Wirev+0x34>)
   d9f1c:	f000 f82a 	bl	d9f74 <__aeabi_atexit>
	return wire;
}
   d9f20:	4801      	ldr	r0, [pc, #4]	; (d9f28 <_Z19__fetch_global_Wirev+0x34>)
   d9f22:	bd38      	pop	{r3, r4, r5, pc}
   d9f24:	2003e5f8 	.word	0x2003e5f8
   d9f28:	2003e610 	.word	0x2003e610
   d9f2c:	2003dc0c 	.word	0x2003dc0c
   d9f30:	000d9449 	.word	0x000d9449

000d9f34 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d9f34:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d9f36:	4c0b      	ldr	r4, [pc, #44]	; (d9f64 <_Z20__fetch_global_Wire1v+0x30>)
   d9f38:	6823      	ldr	r3, [r4, #0]
   d9f3a:	07db      	lsls	r3, r3, #31
   d9f3c:	d40f      	bmi.n	d9f5e <_Z20__fetch_global_Wire1v+0x2a>
   d9f3e:	4620      	mov	r0, r4
   d9f40:	f7fa f8b1 	bl	d40a6 <__cxa_guard_acquire>
   d9f44:	b158      	cbz	r0, d9f5e <_Z20__fetch_global_Wire1v+0x2a>
   d9f46:	2101      	movs	r1, #1
   d9f48:	4807      	ldr	r0, [pc, #28]	; (d9f68 <_Z20__fetch_global_Wire1v+0x34>)
   d9f4a:	f7ff faa9 	bl	d94a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d9f4e:	4620      	mov	r0, r4
   d9f50:	f7fa f8ae 	bl	d40b0 <__cxa_guard_release>
   d9f54:	4a05      	ldr	r2, [pc, #20]	; (d9f6c <_Z20__fetch_global_Wire1v+0x38>)
   d9f56:	4906      	ldr	r1, [pc, #24]	; (d9f70 <_Z20__fetch_global_Wire1v+0x3c>)
   d9f58:	4803      	ldr	r0, [pc, #12]	; (d9f68 <_Z20__fetch_global_Wire1v+0x34>)
   d9f5a:	f000 f80b 	bl	d9f74 <__aeabi_atexit>
	return wire;
}
   d9f5e:	4802      	ldr	r0, [pc, #8]	; (d9f68 <_Z20__fetch_global_Wire1v+0x34>)
   d9f60:	bd10      	pop	{r4, pc}
   d9f62:	bf00      	nop
   d9f64:	2003e624 	.word	0x2003e624
   d9f68:	2003e5fc 	.word	0x2003e5fc
   d9f6c:	2003dc0c 	.word	0x2003dc0c
   d9f70:	000d9449 	.word	0x000d9449

000d9f74 <__aeabi_atexit>:
   d9f74:	460b      	mov	r3, r1
   d9f76:	4601      	mov	r1, r0
   d9f78:	4618      	mov	r0, r3
   d9f7a:	f006 b98d 	b.w	e0298 <__cxa_atexit>
	...

000d9f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9f80:	4b18      	ldr	r3, [pc, #96]	; (d9fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9f82:	681a      	ldr	r2, [r3, #0]
   d9f84:	07d1      	lsls	r1, r2, #31
   d9f86:	bf5c      	itt	pl
   d9f88:	2201      	movpl	r2, #1
   d9f8a:	601a      	strpl	r2, [r3, #0]
   d9f8c:	4b16      	ldr	r3, [pc, #88]	; (d9fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9f8e:	681a      	ldr	r2, [r3, #0]
   d9f90:	07d2      	lsls	r2, r2, #31
   d9f92:	bf5c      	itt	pl
   d9f94:	2201      	movpl	r2, #1
   d9f96:	601a      	strpl	r2, [r3, #0]
   d9f98:	4b14      	ldr	r3, [pc, #80]	; (d9fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9f9a:	681a      	ldr	r2, [r3, #0]
   d9f9c:	07d0      	lsls	r0, r2, #31
   d9f9e:	bf5c      	itt	pl
   d9fa0:	2201      	movpl	r2, #1
   d9fa2:	601a      	strpl	r2, [r3, #0]
   d9fa4:	4b12      	ldr	r3, [pc, #72]	; (d9ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9fa6:	681a      	ldr	r2, [r3, #0]
   d9fa8:	07d1      	lsls	r1, r2, #31
   d9faa:	bf5c      	itt	pl
   d9fac:	2201      	movpl	r2, #1
   d9fae:	601a      	strpl	r2, [r3, #0]
   d9fb0:	4b10      	ldr	r3, [pc, #64]	; (d9ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9fb2:	681a      	ldr	r2, [r3, #0]
   d9fb4:	07d2      	lsls	r2, r2, #31
   d9fb6:	bf5c      	itt	pl
   d9fb8:	2201      	movpl	r2, #1
   d9fba:	601a      	strpl	r2, [r3, #0]
   d9fbc:	4b0e      	ldr	r3, [pc, #56]	; (d9ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9fbe:	681a      	ldr	r2, [r3, #0]
   d9fc0:	07d0      	lsls	r0, r2, #31
   d9fc2:	bf5c      	itt	pl
   d9fc4:	2201      	movpl	r2, #1
   d9fc6:	601a      	strpl	r2, [r3, #0]
   d9fc8:	4b0c      	ldr	r3, [pc, #48]	; (d9ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9fca:	681a      	ldr	r2, [r3, #0]
   d9fcc:	07d1      	lsls	r1, r2, #31
   d9fce:	bf5c      	itt	pl
   d9fd0:	2201      	movpl	r2, #1
   d9fd2:	601a      	strpl	r2, [r3, #0]
   d9fd4:	4b0a      	ldr	r3, [pc, #40]	; (da000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9fd6:	681a      	ldr	r2, [r3, #0]
   d9fd8:	07d2      	lsls	r2, r2, #31
   d9fda:	bf5c      	itt	pl
   d9fdc:	2201      	movpl	r2, #1
   d9fde:	601a      	strpl	r2, [r3, #0]
   d9fe0:	4770      	bx	lr
   d9fe2:	bf00      	nop
   d9fe4:	2003e644 	.word	0x2003e644
   d9fe8:	2003e640 	.word	0x2003e640
   d9fec:	2003e63c 	.word	0x2003e63c
   d9ff0:	2003e638 	.word	0x2003e638
   d9ff4:	2003e634 	.word	0x2003e634
   d9ff8:	2003e630 	.word	0x2003e630
   d9ffc:	2003e62c 	.word	0x2003e62c
   da000:	2003e628 	.word	0x2003e628

000da004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da004:	4b24      	ldr	r3, [pc, #144]	; (da098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da006:	681a      	ldr	r2, [r3, #0]
   da008:	07d0      	lsls	r0, r2, #31
   da00a:	bf5c      	itt	pl
   da00c:	2201      	movpl	r2, #1
   da00e:	601a      	strpl	r2, [r3, #0]
   da010:	4b22      	ldr	r3, [pc, #136]	; (da09c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da012:	681a      	ldr	r2, [r3, #0]
   da014:	07d1      	lsls	r1, r2, #31
   da016:	bf5c      	itt	pl
   da018:	2201      	movpl	r2, #1
   da01a:	601a      	strpl	r2, [r3, #0]
   da01c:	4b20      	ldr	r3, [pc, #128]	; (da0a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da01e:	681a      	ldr	r2, [r3, #0]
   da020:	07d2      	lsls	r2, r2, #31
   da022:	bf5c      	itt	pl
   da024:	2201      	movpl	r2, #1
   da026:	601a      	strpl	r2, [r3, #0]
   da028:	4b1e      	ldr	r3, [pc, #120]	; (da0a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da02a:	681a      	ldr	r2, [r3, #0]
   da02c:	07d0      	lsls	r0, r2, #31
   da02e:	bf5c      	itt	pl
   da030:	2201      	movpl	r2, #1
   da032:	601a      	strpl	r2, [r3, #0]
   da034:	4b1c      	ldr	r3, [pc, #112]	; (da0a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da036:	681a      	ldr	r2, [r3, #0]
   da038:	07d1      	lsls	r1, r2, #31
   da03a:	bf5c      	itt	pl
   da03c:	2201      	movpl	r2, #1
   da03e:	601a      	strpl	r2, [r3, #0]
   da040:	4b1a      	ldr	r3, [pc, #104]	; (da0ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da042:	681a      	ldr	r2, [r3, #0]
   da044:	07d2      	lsls	r2, r2, #31
   da046:	bf5c      	itt	pl
   da048:	2201      	movpl	r2, #1
   da04a:	601a      	strpl	r2, [r3, #0]
   da04c:	4b18      	ldr	r3, [pc, #96]	; (da0b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da04e:	681a      	ldr	r2, [r3, #0]
   da050:	07d0      	lsls	r0, r2, #31
   da052:	bf5c      	itt	pl
   da054:	2201      	movpl	r2, #1
   da056:	601a      	strpl	r2, [r3, #0]
   da058:	4b16      	ldr	r3, [pc, #88]	; (da0b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da05a:	681a      	ldr	r2, [r3, #0]
   da05c:	07d1      	lsls	r1, r2, #31
   da05e:	bf5c      	itt	pl
   da060:	2201      	movpl	r2, #1
   da062:	601a      	strpl	r2, [r3, #0]
   da064:	4b14      	ldr	r3, [pc, #80]	; (da0b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da066:	681a      	ldr	r2, [r3, #0]
   da068:	07d2      	lsls	r2, r2, #31
   da06a:	bf5c      	itt	pl
   da06c:	2201      	movpl	r2, #1
   da06e:	601a      	strpl	r2, [r3, #0]
   da070:	4b12      	ldr	r3, [pc, #72]	; (da0bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da072:	681a      	ldr	r2, [r3, #0]
   da074:	07d0      	lsls	r0, r2, #31
   da076:	bf5c      	itt	pl
   da078:	2201      	movpl	r2, #1
   da07a:	601a      	strpl	r2, [r3, #0]
   da07c:	4b10      	ldr	r3, [pc, #64]	; (da0c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da07e:	681a      	ldr	r2, [r3, #0]
   da080:	07d1      	lsls	r1, r2, #31
   da082:	bf5c      	itt	pl
   da084:	2201      	movpl	r2, #1
   da086:	601a      	strpl	r2, [r3, #0]
   da088:	4b0e      	ldr	r3, [pc, #56]	; (da0c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da08a:	681a      	ldr	r2, [r3, #0]
   da08c:	07d2      	lsls	r2, r2, #31
   da08e:	bf5c      	itt	pl
   da090:	2201      	movpl	r2, #1
   da092:	601a      	strpl	r2, [r3, #0]
   da094:	4770      	bx	lr
   da096:	bf00      	nop
   da098:	2003e674 	.word	0x2003e674
   da09c:	2003e670 	.word	0x2003e670
   da0a0:	2003e66c 	.word	0x2003e66c
   da0a4:	2003e668 	.word	0x2003e668
   da0a8:	2003e664 	.word	0x2003e664
   da0ac:	2003e660 	.word	0x2003e660
   da0b0:	2003e65c 	.word	0x2003e65c
   da0b4:	2003e658 	.word	0x2003e658
   da0b8:	2003e654 	.word	0x2003e654
   da0bc:	2003e650 	.word	0x2003e650
   da0c0:	2003e64c 	.word	0x2003e64c
   da0c4:	2003e648 	.word	0x2003e648

000da0c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da0c8:	4b24      	ldr	r3, [pc, #144]	; (da15c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da0ca:	681a      	ldr	r2, [r3, #0]
   da0cc:	07d0      	lsls	r0, r2, #31
   da0ce:	bf5c      	itt	pl
   da0d0:	2201      	movpl	r2, #1
   da0d2:	601a      	strpl	r2, [r3, #0]
   da0d4:	4b22      	ldr	r3, [pc, #136]	; (da160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da0d6:	681a      	ldr	r2, [r3, #0]
   da0d8:	07d1      	lsls	r1, r2, #31
   da0da:	bf5c      	itt	pl
   da0dc:	2201      	movpl	r2, #1
   da0de:	601a      	strpl	r2, [r3, #0]
   da0e0:	4b20      	ldr	r3, [pc, #128]	; (da164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da0e2:	681a      	ldr	r2, [r3, #0]
   da0e4:	07d2      	lsls	r2, r2, #31
   da0e6:	bf5c      	itt	pl
   da0e8:	2201      	movpl	r2, #1
   da0ea:	601a      	strpl	r2, [r3, #0]
   da0ec:	4b1e      	ldr	r3, [pc, #120]	; (da168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da0ee:	681a      	ldr	r2, [r3, #0]
   da0f0:	07d0      	lsls	r0, r2, #31
   da0f2:	bf5c      	itt	pl
   da0f4:	2201      	movpl	r2, #1
   da0f6:	601a      	strpl	r2, [r3, #0]
   da0f8:	4b1c      	ldr	r3, [pc, #112]	; (da16c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da0fa:	681a      	ldr	r2, [r3, #0]
   da0fc:	07d1      	lsls	r1, r2, #31
   da0fe:	bf5c      	itt	pl
   da100:	2201      	movpl	r2, #1
   da102:	601a      	strpl	r2, [r3, #0]
   da104:	4b1a      	ldr	r3, [pc, #104]	; (da170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da106:	681a      	ldr	r2, [r3, #0]
   da108:	07d2      	lsls	r2, r2, #31
   da10a:	bf5c      	itt	pl
   da10c:	2201      	movpl	r2, #1
   da10e:	601a      	strpl	r2, [r3, #0]
   da110:	4b18      	ldr	r3, [pc, #96]	; (da174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da112:	681a      	ldr	r2, [r3, #0]
   da114:	07d0      	lsls	r0, r2, #31
   da116:	bf5c      	itt	pl
   da118:	2201      	movpl	r2, #1
   da11a:	601a      	strpl	r2, [r3, #0]
   da11c:	4b16      	ldr	r3, [pc, #88]	; (da178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da11e:	681a      	ldr	r2, [r3, #0]
   da120:	07d1      	lsls	r1, r2, #31
   da122:	bf5c      	itt	pl
   da124:	2201      	movpl	r2, #1
   da126:	601a      	strpl	r2, [r3, #0]
   da128:	4b14      	ldr	r3, [pc, #80]	; (da17c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da12a:	681a      	ldr	r2, [r3, #0]
   da12c:	07d2      	lsls	r2, r2, #31
   da12e:	bf5c      	itt	pl
   da130:	2201      	movpl	r2, #1
   da132:	601a      	strpl	r2, [r3, #0]
   da134:	4b12      	ldr	r3, [pc, #72]	; (da180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da136:	681a      	ldr	r2, [r3, #0]
   da138:	07d0      	lsls	r0, r2, #31
   da13a:	bf5c      	itt	pl
   da13c:	2201      	movpl	r2, #1
   da13e:	601a      	strpl	r2, [r3, #0]
   da140:	4b10      	ldr	r3, [pc, #64]	; (da184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da142:	681a      	ldr	r2, [r3, #0]
   da144:	07d1      	lsls	r1, r2, #31
   da146:	bf5c      	itt	pl
   da148:	2201      	movpl	r2, #1
   da14a:	601a      	strpl	r2, [r3, #0]
   da14c:	4b0e      	ldr	r3, [pc, #56]	; (da188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da14e:	681a      	ldr	r2, [r3, #0]
   da150:	07d2      	lsls	r2, r2, #31
   da152:	bf5c      	itt	pl
   da154:	2201      	movpl	r2, #1
   da156:	601a      	strpl	r2, [r3, #0]
   da158:	4770      	bx	lr
   da15a:	bf00      	nop
   da15c:	2003e6a4 	.word	0x2003e6a4
   da160:	2003e6a0 	.word	0x2003e6a0
   da164:	2003e69c 	.word	0x2003e69c
   da168:	2003e698 	.word	0x2003e698
   da16c:	2003e694 	.word	0x2003e694
   da170:	2003e690 	.word	0x2003e690
   da174:	2003e68c 	.word	0x2003e68c
   da178:	2003e688 	.word	0x2003e688
   da17c:	2003e684 	.word	0x2003e684
   da180:	2003e680 	.word	0x2003e680
   da184:	2003e67c 	.word	0x2003e67c
   da188:	2003e678 	.word	0x2003e678

000da18c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da18c:	4b18      	ldr	r3, [pc, #96]	; (da1f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da18e:	681a      	ldr	r2, [r3, #0]
   da190:	07d1      	lsls	r1, r2, #31
   da192:	bf5c      	itt	pl
   da194:	2201      	movpl	r2, #1
   da196:	601a      	strpl	r2, [r3, #0]
   da198:	4b16      	ldr	r3, [pc, #88]	; (da1f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da19a:	681a      	ldr	r2, [r3, #0]
   da19c:	07d2      	lsls	r2, r2, #31
   da19e:	bf5c      	itt	pl
   da1a0:	2201      	movpl	r2, #1
   da1a2:	601a      	strpl	r2, [r3, #0]
   da1a4:	4b14      	ldr	r3, [pc, #80]	; (da1f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da1a6:	681a      	ldr	r2, [r3, #0]
   da1a8:	07d0      	lsls	r0, r2, #31
   da1aa:	bf5c      	itt	pl
   da1ac:	2201      	movpl	r2, #1
   da1ae:	601a      	strpl	r2, [r3, #0]
   da1b0:	4b12      	ldr	r3, [pc, #72]	; (da1fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da1b2:	681a      	ldr	r2, [r3, #0]
   da1b4:	07d1      	lsls	r1, r2, #31
   da1b6:	bf5c      	itt	pl
   da1b8:	2201      	movpl	r2, #1
   da1ba:	601a      	strpl	r2, [r3, #0]
   da1bc:	4b10      	ldr	r3, [pc, #64]	; (da200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da1be:	681a      	ldr	r2, [r3, #0]
   da1c0:	07d2      	lsls	r2, r2, #31
   da1c2:	bf5c      	itt	pl
   da1c4:	2201      	movpl	r2, #1
   da1c6:	601a      	strpl	r2, [r3, #0]
   da1c8:	4b0e      	ldr	r3, [pc, #56]	; (da204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da1ca:	681a      	ldr	r2, [r3, #0]
   da1cc:	07d0      	lsls	r0, r2, #31
   da1ce:	bf5c      	itt	pl
   da1d0:	2201      	movpl	r2, #1
   da1d2:	601a      	strpl	r2, [r3, #0]
   da1d4:	4b0c      	ldr	r3, [pc, #48]	; (da208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da1d6:	681a      	ldr	r2, [r3, #0]
   da1d8:	07d1      	lsls	r1, r2, #31
   da1da:	bf5c      	itt	pl
   da1dc:	2201      	movpl	r2, #1
   da1de:	601a      	strpl	r2, [r3, #0]
   da1e0:	4b0a      	ldr	r3, [pc, #40]	; (da20c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da1e2:	681a      	ldr	r2, [r3, #0]
   da1e4:	07d2      	lsls	r2, r2, #31
   da1e6:	bf5c      	itt	pl
   da1e8:	2201      	movpl	r2, #1
   da1ea:	601a      	strpl	r2, [r3, #0]
   da1ec:	4770      	bx	lr
   da1ee:	bf00      	nop
   da1f0:	2003e6c4 	.word	0x2003e6c4
   da1f4:	2003e6c0 	.word	0x2003e6c0
   da1f8:	2003e6bc 	.word	0x2003e6bc
   da1fc:	2003e6b8 	.word	0x2003e6b8
   da200:	2003e6b4 	.word	0x2003e6b4
   da204:	2003e6b0 	.word	0x2003e6b0
   da208:	2003e6ac 	.word	0x2003e6ac
   da20c:	2003e6a8 	.word	0x2003e6a8

000da210 <atan>:
   da210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da214:	ec55 4b10 	vmov	r4, r5, d0
   da218:	4bd1      	ldr	r3, [pc, #836]	; (da560 <atan+0x350>)
   da21a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   da21e:	429e      	cmp	r6, r3
   da220:	46ab      	mov	fp, r5
   da222:	dd10      	ble.n	da246 <atan+0x36>
   da224:	4bcf      	ldr	r3, [pc, #828]	; (da564 <atan+0x354>)
   da226:	429e      	cmp	r6, r3
   da228:	f300 80b2 	bgt.w	da390 <atan+0x180>
   da22c:	f000 80ad 	beq.w	da38a <atan+0x17a>
   da230:	f1bb 0f00 	cmp.w	fp, #0
   da234:	f340 80fd 	ble.w	da432 <atan+0x222>
   da238:	a5ad      	add	r5, pc, #692	; (adr r5, da4f0 <atan+0x2e0>)
   da23a:	e9d5 4500 	ldrd	r4, r5, [r5]
   da23e:	ec45 4b10 	vmov	d0, r4, r5
   da242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da246:	4bc8      	ldr	r3, [pc, #800]	; (da568 <atan+0x358>)
   da248:	429e      	cmp	r6, r3
   da24a:	f300 80c0 	bgt.w	da3ce <atan+0x1be>
   da24e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   da252:	429e      	cmp	r6, r3
   da254:	f340 80a8 	ble.w	da3a8 <atan+0x198>
   da258:	f04f 3aff 	mov.w	sl, #4294967295
   da25c:	4622      	mov	r2, r4
   da25e:	462b      	mov	r3, r5
   da260:	4620      	mov	r0, r4
   da262:	4629      	mov	r1, r5
   da264:	f005 fc88 	bl	dfb78 <__aeabi_dmul>
   da268:	4602      	mov	r2, r0
   da26a:	460b      	mov	r3, r1
   da26c:	4680      	mov	r8, r0
   da26e:	4689      	mov	r9, r1
   da270:	f005 fc82 	bl	dfb78 <__aeabi_dmul>
   da274:	a3a0      	add	r3, pc, #640	; (adr r3, da4f8 <atan+0x2e8>)
   da276:	e9d3 2300 	ldrd	r2, r3, [r3]
   da27a:	4606      	mov	r6, r0
   da27c:	460f      	mov	r7, r1
   da27e:	f005 fc7b 	bl	dfb78 <__aeabi_dmul>
   da282:	a39f      	add	r3, pc, #636	; (adr r3, da500 <atan+0x2f0>)
   da284:	e9d3 2300 	ldrd	r2, r3, [r3]
   da288:	f005 fac4 	bl	df814 <__adddf3>
   da28c:	4632      	mov	r2, r6
   da28e:	463b      	mov	r3, r7
   da290:	f005 fc72 	bl	dfb78 <__aeabi_dmul>
   da294:	a39c      	add	r3, pc, #624	; (adr r3, da508 <atan+0x2f8>)
   da296:	e9d3 2300 	ldrd	r2, r3, [r3]
   da29a:	f005 fabb 	bl	df814 <__adddf3>
   da29e:	4632      	mov	r2, r6
   da2a0:	463b      	mov	r3, r7
   da2a2:	f005 fc69 	bl	dfb78 <__aeabi_dmul>
   da2a6:	a39a      	add	r3, pc, #616	; (adr r3, da510 <atan+0x300>)
   da2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2ac:	f005 fab2 	bl	df814 <__adddf3>
   da2b0:	4632      	mov	r2, r6
   da2b2:	463b      	mov	r3, r7
   da2b4:	f005 fc60 	bl	dfb78 <__aeabi_dmul>
   da2b8:	a397      	add	r3, pc, #604	; (adr r3, da518 <atan+0x308>)
   da2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2be:	f005 faa9 	bl	df814 <__adddf3>
   da2c2:	4632      	mov	r2, r6
   da2c4:	463b      	mov	r3, r7
   da2c6:	f005 fc57 	bl	dfb78 <__aeabi_dmul>
   da2ca:	a395      	add	r3, pc, #596	; (adr r3, da520 <atan+0x310>)
   da2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2d0:	f005 faa0 	bl	df814 <__adddf3>
   da2d4:	4642      	mov	r2, r8
   da2d6:	464b      	mov	r3, r9
   da2d8:	f005 fc4e 	bl	dfb78 <__aeabi_dmul>
   da2dc:	a392      	add	r3, pc, #584	; (adr r3, da528 <atan+0x318>)
   da2de:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2e2:	4680      	mov	r8, r0
   da2e4:	4689      	mov	r9, r1
   da2e6:	4630      	mov	r0, r6
   da2e8:	4639      	mov	r1, r7
   da2ea:	f005 fc45 	bl	dfb78 <__aeabi_dmul>
   da2ee:	a390      	add	r3, pc, #576	; (adr r3, da530 <atan+0x320>)
   da2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2f4:	f005 fa8c 	bl	df810 <__aeabi_dsub>
   da2f8:	4632      	mov	r2, r6
   da2fa:	463b      	mov	r3, r7
   da2fc:	f005 fc3c 	bl	dfb78 <__aeabi_dmul>
   da300:	a38d      	add	r3, pc, #564	; (adr r3, da538 <atan+0x328>)
   da302:	e9d3 2300 	ldrd	r2, r3, [r3]
   da306:	f005 fa83 	bl	df810 <__aeabi_dsub>
   da30a:	4632      	mov	r2, r6
   da30c:	463b      	mov	r3, r7
   da30e:	f005 fc33 	bl	dfb78 <__aeabi_dmul>
   da312:	a38b      	add	r3, pc, #556	; (adr r3, da540 <atan+0x330>)
   da314:	e9d3 2300 	ldrd	r2, r3, [r3]
   da318:	f005 fa7a 	bl	df810 <__aeabi_dsub>
   da31c:	4632      	mov	r2, r6
   da31e:	463b      	mov	r3, r7
   da320:	f005 fc2a 	bl	dfb78 <__aeabi_dmul>
   da324:	a388      	add	r3, pc, #544	; (adr r3, da548 <atan+0x338>)
   da326:	e9d3 2300 	ldrd	r2, r3, [r3]
   da32a:	f005 fa71 	bl	df810 <__aeabi_dsub>
   da32e:	4632      	mov	r2, r6
   da330:	463b      	mov	r3, r7
   da332:	f005 fc21 	bl	dfb78 <__aeabi_dmul>
   da336:	f1ba 3fff 	cmp.w	sl, #4294967295
   da33a:	4602      	mov	r2, r0
   da33c:	460b      	mov	r3, r1
   da33e:	d07c      	beq.n	da43a <atan+0x22a>
   da340:	4640      	mov	r0, r8
   da342:	4649      	mov	r1, r9
   da344:	f005 fa66 	bl	df814 <__adddf3>
   da348:	4622      	mov	r2, r4
   da34a:	462b      	mov	r3, r5
   da34c:	f005 fc14 	bl	dfb78 <__aeabi_dmul>
   da350:	4e86      	ldr	r6, [pc, #536]	; (da56c <atan+0x35c>)
   da352:	4b87      	ldr	r3, [pc, #540]	; (da570 <atan+0x360>)
   da354:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   da358:	4456      	add	r6, sl
   da35a:	449a      	add	sl, r3
   da35c:	e9da 2300 	ldrd	r2, r3, [sl]
   da360:	f005 fa56 	bl	df810 <__aeabi_dsub>
   da364:	4622      	mov	r2, r4
   da366:	462b      	mov	r3, r5
   da368:	f005 fa52 	bl	df810 <__aeabi_dsub>
   da36c:	4602      	mov	r2, r0
   da36e:	460b      	mov	r3, r1
   da370:	e9d6 0100 	ldrd	r0, r1, [r6]
   da374:	f005 fa4c 	bl	df810 <__aeabi_dsub>
   da378:	f1bb 0f00 	cmp.w	fp, #0
   da37c:	db52      	blt.n	da424 <atan+0x214>
   da37e:	4604      	mov	r4, r0
   da380:	460d      	mov	r5, r1
   da382:	ec45 4b10 	vmov	d0, r4, r5
   da386:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da38a:	2c00      	cmp	r4, #0
   da38c:	f43f af50 	beq.w	da230 <atan+0x20>
   da390:	4622      	mov	r2, r4
   da392:	462b      	mov	r3, r5
   da394:	4620      	mov	r0, r4
   da396:	4629      	mov	r1, r5
   da398:	f005 fa3c 	bl	df814 <__adddf3>
   da39c:	4604      	mov	r4, r0
   da39e:	460d      	mov	r5, r1
   da3a0:	ec45 4b10 	vmov	d0, r4, r5
   da3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3a8:	a369      	add	r3, pc, #420	; (adr r3, da550 <atan+0x340>)
   da3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da3ae:	ee10 0a10 	vmov	r0, s0
   da3b2:	4629      	mov	r1, r5
   da3b4:	f005 fa2e 	bl	df814 <__adddf3>
   da3b8:	2200      	movs	r2, #0
   da3ba:	4b6e      	ldr	r3, [pc, #440]	; (da574 <atan+0x364>)
   da3bc:	f005 fe6c 	bl	e0098 <__aeabi_dcmpgt>
   da3c0:	2800      	cmp	r0, #0
   da3c2:	f43f af49 	beq.w	da258 <atan+0x48>
   da3c6:	ec45 4b10 	vmov	d0, r4, r5
   da3ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3ce:	f000 f9cb 	bl	da768 <fabs>
   da3d2:	4b69      	ldr	r3, [pc, #420]	; (da578 <atan+0x368>)
   da3d4:	429e      	cmp	r6, r3
   da3d6:	ec55 4b10 	vmov	r4, r5, d0
   da3da:	dc3f      	bgt.n	da45c <atan+0x24c>
   da3dc:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   da3e0:	429e      	cmp	r6, r3
   da3e2:	dc68      	bgt.n	da4b6 <atan+0x2a6>
   da3e4:	ee10 2a10 	vmov	r2, s0
   da3e8:	ee10 0a10 	vmov	r0, s0
   da3ec:	462b      	mov	r3, r5
   da3ee:	4629      	mov	r1, r5
   da3f0:	f005 fa10 	bl	df814 <__adddf3>
   da3f4:	2200      	movs	r2, #0
   da3f6:	4b5f      	ldr	r3, [pc, #380]	; (da574 <atan+0x364>)
   da3f8:	f005 fa0a 	bl	df810 <__aeabi_dsub>
   da3fc:	2200      	movs	r2, #0
   da3fe:	4606      	mov	r6, r0
   da400:	460f      	mov	r7, r1
   da402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da406:	4620      	mov	r0, r4
   da408:	4629      	mov	r1, r5
   da40a:	f005 fa03 	bl	df814 <__adddf3>
   da40e:	4602      	mov	r2, r0
   da410:	460b      	mov	r3, r1
   da412:	4630      	mov	r0, r6
   da414:	4639      	mov	r1, r7
   da416:	f005 fcd9 	bl	dfdcc <__aeabi_ddiv>
   da41a:	f04f 0a00 	mov.w	sl, #0
   da41e:	4604      	mov	r4, r0
   da420:	460d      	mov	r5, r1
   da422:	e71b      	b.n	da25c <atan+0x4c>
   da424:	4604      	mov	r4, r0
   da426:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   da42a:	ec45 4b10 	vmov	d0, r4, r5
   da42e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da432:	a549      	add	r5, pc, #292	; (adr r5, da558 <atan+0x348>)
   da434:	e9d5 4500 	ldrd	r4, r5, [r5]
   da438:	e7b2      	b.n	da3a0 <atan+0x190>
   da43a:	4640      	mov	r0, r8
   da43c:	4649      	mov	r1, r9
   da43e:	f005 f9e9 	bl	df814 <__adddf3>
   da442:	4622      	mov	r2, r4
   da444:	462b      	mov	r3, r5
   da446:	f005 fb97 	bl	dfb78 <__aeabi_dmul>
   da44a:	4602      	mov	r2, r0
   da44c:	460b      	mov	r3, r1
   da44e:	4620      	mov	r0, r4
   da450:	4629      	mov	r1, r5
   da452:	f005 f9dd 	bl	df810 <__aeabi_dsub>
   da456:	4604      	mov	r4, r0
   da458:	460d      	mov	r5, r1
   da45a:	e7a1      	b.n	da3a0 <atan+0x190>
   da45c:	4b47      	ldr	r3, [pc, #284]	; (da57c <atan+0x36c>)
   da45e:	429e      	cmp	r6, r3
   da460:	dc1d      	bgt.n	da49e <atan+0x28e>
   da462:	ee10 0a10 	vmov	r0, s0
   da466:	2200      	movs	r2, #0
   da468:	4b45      	ldr	r3, [pc, #276]	; (da580 <atan+0x370>)
   da46a:	4629      	mov	r1, r5
   da46c:	f005 f9d0 	bl	df810 <__aeabi_dsub>
   da470:	2200      	movs	r2, #0
   da472:	4606      	mov	r6, r0
   da474:	460f      	mov	r7, r1
   da476:	4b42      	ldr	r3, [pc, #264]	; (da580 <atan+0x370>)
   da478:	4620      	mov	r0, r4
   da47a:	4629      	mov	r1, r5
   da47c:	f005 fb7c 	bl	dfb78 <__aeabi_dmul>
   da480:	2200      	movs	r2, #0
   da482:	4b3c      	ldr	r3, [pc, #240]	; (da574 <atan+0x364>)
   da484:	f005 f9c6 	bl	df814 <__adddf3>
   da488:	4602      	mov	r2, r0
   da48a:	460b      	mov	r3, r1
   da48c:	4630      	mov	r0, r6
   da48e:	4639      	mov	r1, r7
   da490:	f005 fc9c 	bl	dfdcc <__aeabi_ddiv>
   da494:	f04f 0a02 	mov.w	sl, #2
   da498:	4604      	mov	r4, r0
   da49a:	460d      	mov	r5, r1
   da49c:	e6de      	b.n	da25c <atan+0x4c>
   da49e:	462b      	mov	r3, r5
   da4a0:	ee10 2a10 	vmov	r2, s0
   da4a4:	2000      	movs	r0, #0
   da4a6:	4937      	ldr	r1, [pc, #220]	; (da584 <atan+0x374>)
   da4a8:	f005 fc90 	bl	dfdcc <__aeabi_ddiv>
   da4ac:	f04f 0a03 	mov.w	sl, #3
   da4b0:	4604      	mov	r4, r0
   da4b2:	460d      	mov	r5, r1
   da4b4:	e6d2      	b.n	da25c <atan+0x4c>
   da4b6:	ee10 0a10 	vmov	r0, s0
   da4ba:	2200      	movs	r2, #0
   da4bc:	4b2d      	ldr	r3, [pc, #180]	; (da574 <atan+0x364>)
   da4be:	4629      	mov	r1, r5
   da4c0:	f005 f9a6 	bl	df810 <__aeabi_dsub>
   da4c4:	2200      	movs	r2, #0
   da4c6:	4606      	mov	r6, r0
   da4c8:	460f      	mov	r7, r1
   da4ca:	4b2a      	ldr	r3, [pc, #168]	; (da574 <atan+0x364>)
   da4cc:	4620      	mov	r0, r4
   da4ce:	4629      	mov	r1, r5
   da4d0:	f005 f9a0 	bl	df814 <__adddf3>
   da4d4:	4602      	mov	r2, r0
   da4d6:	460b      	mov	r3, r1
   da4d8:	4630      	mov	r0, r6
   da4da:	4639      	mov	r1, r7
   da4dc:	f005 fc76 	bl	dfdcc <__aeabi_ddiv>
   da4e0:	f04f 0a01 	mov.w	sl, #1
   da4e4:	4604      	mov	r4, r0
   da4e6:	460d      	mov	r5, r1
   da4e8:	e6b8      	b.n	da25c <atan+0x4c>
   da4ea:	bf00      	nop
   da4ec:	f3af 8000 	nop.w
   da4f0:	54442d18 	.word	0x54442d18
   da4f4:	3ff921fb 	.word	0x3ff921fb
   da4f8:	e322da11 	.word	0xe322da11
   da4fc:	3f90ad3a 	.word	0x3f90ad3a
   da500:	24760deb 	.word	0x24760deb
   da504:	3fa97b4b 	.word	0x3fa97b4b
   da508:	a0d03d51 	.word	0xa0d03d51
   da50c:	3fb10d66 	.word	0x3fb10d66
   da510:	c54c206e 	.word	0xc54c206e
   da514:	3fb745cd 	.word	0x3fb745cd
   da518:	920083ff 	.word	0x920083ff
   da51c:	3fc24924 	.word	0x3fc24924
   da520:	5555550d 	.word	0x5555550d
   da524:	3fd55555 	.word	0x3fd55555
   da528:	2c6a6c2f 	.word	0x2c6a6c2f
   da52c:	bfa2b444 	.word	0xbfa2b444
   da530:	52defd9a 	.word	0x52defd9a
   da534:	3fadde2d 	.word	0x3fadde2d
   da538:	af749a6d 	.word	0xaf749a6d
   da53c:	3fb3b0f2 	.word	0x3fb3b0f2
   da540:	fe231671 	.word	0xfe231671
   da544:	3fbc71c6 	.word	0x3fbc71c6
   da548:	9998ebc4 	.word	0x9998ebc4
   da54c:	3fc99999 	.word	0x3fc99999
   da550:	8800759c 	.word	0x8800759c
   da554:	7e37e43c 	.word	0x7e37e43c
   da558:	54442d18 	.word	0x54442d18
   da55c:	bff921fb 	.word	0xbff921fb
   da560:	440fffff 	.word	0x440fffff
   da564:	7ff00000 	.word	0x7ff00000
   da568:	3fdbffff 	.word	0x3fdbffff
   da56c:	000e40e0 	.word	0x000e40e0
   da570:	000e40c0 	.word	0x000e40c0
   da574:	3ff00000 	.word	0x3ff00000
   da578:	3ff2ffff 	.word	0x3ff2ffff
   da57c:	40037fff 	.word	0x40037fff
   da580:	3ff80000 	.word	0x3ff80000
   da584:	bff00000 	.word	0xbff00000

000da588 <ceil>:
   da588:	ec51 0b10 	vmov	r0, r1, d0
   da58c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   da590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da594:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   da598:	2d13      	cmp	r5, #19
   da59a:	460c      	mov	r4, r1
   da59c:	460f      	mov	r7, r1
   da59e:	ee10 6a10 	vmov	r6, s0
   da5a2:	dc22      	bgt.n	da5ea <ceil+0x62>
   da5a4:	2d00      	cmp	r5, #0
   da5a6:	db52      	blt.n	da64e <ceil+0xc6>
   da5a8:	4b3d      	ldr	r3, [pc, #244]	; (da6a0 <ceil+0x118>)
   da5aa:	fa43 f805 	asr.w	r8, r3, r5
   da5ae:	ea01 0308 	and.w	r3, r1, r8
   da5b2:	4303      	orrs	r3, r0
   da5b4:	d01e      	beq.n	da5f4 <ceil+0x6c>
   da5b6:	a338      	add	r3, pc, #224	; (adr r3, da698 <ceil+0x110>)
   da5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da5bc:	f005 f92a 	bl	df814 <__adddf3>
   da5c0:	2200      	movs	r2, #0
   da5c2:	2300      	movs	r3, #0
   da5c4:	f005 fd68 	bl	e0098 <__aeabi_dcmpgt>
   da5c8:	b148      	cbz	r0, da5de <ceil+0x56>
   da5ca:	2c00      	cmp	r4, #0
   da5cc:	dd04      	ble.n	da5d8 <ceil+0x50>
   da5ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   da5d2:	fa43 f505 	asr.w	r5, r3, r5
   da5d6:	442f      	add	r7, r5
   da5d8:	ea27 0408 	bic.w	r4, r7, r8
   da5dc:	2600      	movs	r6, #0
   da5de:	4623      	mov	r3, r4
   da5e0:	4632      	mov	r2, r6
   da5e2:	ec43 2b10 	vmov	d0, r2, r3
   da5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da5ea:	2d33      	cmp	r5, #51	; 0x33
   da5ec:	dd06      	ble.n	da5fc <ceil+0x74>
   da5ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   da5f2:	d03e      	beq.n	da672 <ceil+0xea>
   da5f4:	ec41 0b10 	vmov	d0, r0, r1
   da5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da5fc:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   da600:	f04f 38ff 	mov.w	r8, #4294967295
   da604:	fa28 f803 	lsr.w	r8, r8, r3
   da608:	ea10 0f08 	tst.w	r0, r8
   da60c:	d0f2      	beq.n	da5f4 <ceil+0x6c>
   da60e:	a322      	add	r3, pc, #136	; (adr r3, da698 <ceil+0x110>)
   da610:	e9d3 2300 	ldrd	r2, r3, [r3]
   da614:	f005 f8fe 	bl	df814 <__adddf3>
   da618:	2200      	movs	r2, #0
   da61a:	2300      	movs	r3, #0
   da61c:	f005 fd3c 	bl	e0098 <__aeabi_dcmpgt>
   da620:	2800      	cmp	r0, #0
   da622:	d0dc      	beq.n	da5de <ceil+0x56>
   da624:	2c00      	cmp	r4, #0
   da626:	dd09      	ble.n	da63c <ceil+0xb4>
   da628:	2d14      	cmp	r5, #20
   da62a:	d031      	beq.n	da690 <ceil+0x108>
   da62c:	2301      	movs	r3, #1
   da62e:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   da632:	fa03 f505 	lsl.w	r5, r3, r5
   da636:	19ae      	adds	r6, r5, r6
   da638:	bf28      	it	cs
   da63a:	18ff      	addcs	r7, r7, r3
   da63c:	463c      	mov	r4, r7
   da63e:	ea26 0608 	bic.w	r6, r6, r8
   da642:	4623      	mov	r3, r4
   da644:	4632      	mov	r2, r6
   da646:	ec43 2b10 	vmov	d0, r2, r3
   da64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da64e:	a312      	add	r3, pc, #72	; (adr r3, da698 <ceil+0x110>)
   da650:	e9d3 2300 	ldrd	r2, r3, [r3]
   da654:	f005 f8de 	bl	df814 <__adddf3>
   da658:	2200      	movs	r2, #0
   da65a:	2300      	movs	r3, #0
   da65c:	f005 fd1c 	bl	e0098 <__aeabi_dcmpgt>
   da660:	2800      	cmp	r0, #0
   da662:	d0bc      	beq.n	da5de <ceil+0x56>
   da664:	2c00      	cmp	r4, #0
   da666:	db0f      	blt.n	da688 <ceil+0x100>
   da668:	4326      	orrs	r6, r4
   da66a:	d00b      	beq.n	da684 <ceil+0xfc>
   da66c:	2600      	movs	r6, #0
   da66e:	4c0d      	ldr	r4, [pc, #52]	; (da6a4 <ceil+0x11c>)
   da670:	e7b5      	b.n	da5de <ceil+0x56>
   da672:	ee10 2a10 	vmov	r2, s0
   da676:	460b      	mov	r3, r1
   da678:	f005 f8cc 	bl	df814 <__adddf3>
   da67c:	ec41 0b10 	vmov	d0, r0, r1
   da680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da684:	4634      	mov	r4, r6
   da686:	e7aa      	b.n	da5de <ceil+0x56>
   da688:	2600      	movs	r6, #0
   da68a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   da68e:	e7a6      	b.n	da5de <ceil+0x56>
   da690:	3701      	adds	r7, #1
   da692:	e7d3      	b.n	da63c <ceil+0xb4>
   da694:	f3af 8000 	nop.w
   da698:	8800759c 	.word	0x8800759c
   da69c:	7e37e43c 	.word	0x7e37e43c
   da6a0:	000fffff 	.word	0x000fffff
   da6a4:	3ff00000 	.word	0x3ff00000

000da6a8 <cos>:
   da6a8:	b500      	push	{lr}
   da6aa:	ec51 0b10 	vmov	r0, r1, d0
   da6ae:	4a2c      	ldr	r2, [pc, #176]	; (da760 <cos+0xb8>)
   da6b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da6b4:	4293      	cmp	r3, r2
   da6b6:	b085      	sub	sp, #20
   da6b8:	dd20      	ble.n	da6fc <cos+0x54>
   da6ba:	4a2a      	ldr	r2, [pc, #168]	; (da764 <cos+0xbc>)
   da6bc:	4293      	cmp	r3, r2
   da6be:	dd09      	ble.n	da6d4 <cos+0x2c>
   da6c0:	ee10 2a10 	vmov	r2, s0
   da6c4:	460b      	mov	r3, r1
   da6c6:	f005 f8a3 	bl	df810 <__aeabi_dsub>
   da6ca:	ec41 0b10 	vmov	d0, r0, r1
   da6ce:	b005      	add	sp, #20
   da6d0:	f85d fb04 	ldr.w	pc, [sp], #4
   da6d4:	4668      	mov	r0, sp
   da6d6:	f003 f91b 	bl	dd910 <__ieee754_rem_pio2>
   da6da:	f000 0003 	and.w	r0, r0, #3
   da6de:	2801      	cmp	r0, #1
   da6e0:	d028      	beq.n	da734 <cos+0x8c>
   da6e2:	2802      	cmp	r0, #2
   da6e4:	d015      	beq.n	da712 <cos+0x6a>
   da6e6:	b360      	cbz	r0, da742 <cos+0x9a>
   da6e8:	2001      	movs	r0, #1
   da6ea:	ed9d 1b02 	vldr	d1, [sp, #8]
   da6ee:	ed9d 0b00 	vldr	d0, [sp]
   da6f2:	f004 fa3d 	bl	deb70 <__kernel_sin>
   da6f6:	ec51 0b10 	vmov	r0, r1, d0
   da6fa:	e7e6      	b.n	da6ca <cos+0x22>
   da6fc:	ed9f 1b16 	vldr	d1, [pc, #88]	; da758 <cos+0xb0>
   da700:	f003 fce2 	bl	de0c8 <__kernel_cos>
   da704:	ec51 0b10 	vmov	r0, r1, d0
   da708:	ec41 0b10 	vmov	d0, r0, r1
   da70c:	b005      	add	sp, #20
   da70e:	f85d fb04 	ldr.w	pc, [sp], #4
   da712:	ed9d 1b02 	vldr	d1, [sp, #8]
   da716:	ed9d 0b00 	vldr	d0, [sp]
   da71a:	f003 fcd5 	bl	de0c8 <__kernel_cos>
   da71e:	ec53 2b10 	vmov	r2, r3, d0
   da722:	ee10 0a10 	vmov	r0, s0
   da726:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   da72a:	ec41 0b10 	vmov	d0, r0, r1
   da72e:	b005      	add	sp, #20
   da730:	f85d fb04 	ldr.w	pc, [sp], #4
   da734:	ed9d 1b02 	vldr	d1, [sp, #8]
   da738:	ed9d 0b00 	vldr	d0, [sp]
   da73c:	f004 fa18 	bl	deb70 <__kernel_sin>
   da740:	e7ed      	b.n	da71e <cos+0x76>
   da742:	ed9d 1b02 	vldr	d1, [sp, #8]
   da746:	ed9d 0b00 	vldr	d0, [sp]
   da74a:	f003 fcbd 	bl	de0c8 <__kernel_cos>
   da74e:	ec51 0b10 	vmov	r0, r1, d0
   da752:	e7ba      	b.n	da6ca <cos+0x22>
   da754:	f3af 8000 	nop.w
	...
   da760:	3fe921fb 	.word	0x3fe921fb
   da764:	7fefffff 	.word	0x7fefffff

000da768 <fabs>:
   da768:	ec53 2b10 	vmov	r2, r3, d0
   da76c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   da770:	ec43 2b10 	vmov	d0, r2, r3
   da774:	4770      	bx	lr
   da776:	bf00      	nop

000da778 <floor>:
   da778:	ec51 0b10 	vmov	r0, r1, d0
   da77c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   da780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da784:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   da788:	2d13      	cmp	r5, #19
   da78a:	460c      	mov	r4, r1
   da78c:	460f      	mov	r7, r1
   da78e:	ee10 6a10 	vmov	r6, s0
   da792:	dc1d      	bgt.n	da7d0 <floor+0x58>
   da794:	2d00      	cmp	r5, #0
   da796:	db43      	blt.n	da820 <floor+0xa8>
   da798:	4b3d      	ldr	r3, [pc, #244]	; (da890 <floor+0x118>)
   da79a:	fa43 f805 	asr.w	r8, r3, r5
   da79e:	ea01 0308 	and.w	r3, r1, r8
   da7a2:	4303      	orrs	r3, r0
   da7a4:	d019      	beq.n	da7da <floor+0x62>
   da7a6:	a338      	add	r3, pc, #224	; (adr r3, da888 <floor+0x110>)
   da7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7ac:	f005 f832 	bl	df814 <__adddf3>
   da7b0:	2200      	movs	r2, #0
   da7b2:	2300      	movs	r3, #0
   da7b4:	f005 fc70 	bl	e0098 <__aeabi_dcmpgt>
   da7b8:	b120      	cbz	r0, da7c4 <floor+0x4c>
   da7ba:	2c00      	cmp	r4, #0
   da7bc:	db49      	blt.n	da852 <floor+0xda>
   da7be:	ea27 0408 	bic.w	r4, r7, r8
   da7c2:	2600      	movs	r6, #0
   da7c4:	4623      	mov	r3, r4
   da7c6:	4632      	mov	r2, r6
   da7c8:	ec43 2b10 	vmov	d0, r2, r3
   da7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da7d0:	2d33      	cmp	r5, #51	; 0x33
   da7d2:	dd06      	ble.n	da7e2 <floor+0x6a>
   da7d4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   da7d8:	d032      	beq.n	da840 <floor+0xc8>
   da7da:	ec41 0b10 	vmov	d0, r0, r1
   da7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da7e2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   da7e6:	f04f 38ff 	mov.w	r8, #4294967295
   da7ea:	fa28 f803 	lsr.w	r8, r8, r3
   da7ee:	ea10 0f08 	tst.w	r0, r8
   da7f2:	d0f2      	beq.n	da7da <floor+0x62>
   da7f4:	a324      	add	r3, pc, #144	; (adr r3, da888 <floor+0x110>)
   da7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   da7fa:	f005 f80b 	bl	df814 <__adddf3>
   da7fe:	2200      	movs	r2, #0
   da800:	2300      	movs	r3, #0
   da802:	f005 fc49 	bl	e0098 <__aeabi_dcmpgt>
   da806:	2800      	cmp	r0, #0
   da808:	d0dc      	beq.n	da7c4 <floor+0x4c>
   da80a:	2c00      	cmp	r4, #0
   da80c:	db27      	blt.n	da85e <floor+0xe6>
   da80e:	463c      	mov	r4, r7
   da810:	ea26 0608 	bic.w	r6, r6, r8
   da814:	4623      	mov	r3, r4
   da816:	4632      	mov	r2, r6
   da818:	ec43 2b10 	vmov	d0, r2, r3
   da81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da820:	a319      	add	r3, pc, #100	; (adr r3, da888 <floor+0x110>)
   da822:	e9d3 2300 	ldrd	r2, r3, [r3]
   da826:	f004 fff5 	bl	df814 <__adddf3>
   da82a:	2200      	movs	r2, #0
   da82c:	2300      	movs	r3, #0
   da82e:	f005 fc33 	bl	e0098 <__aeabi_dcmpgt>
   da832:	2800      	cmp	r0, #0
   da834:	d0c6      	beq.n	da7c4 <floor+0x4c>
   da836:	2c00      	cmp	r4, #0
   da838:	db1c      	blt.n	da874 <floor+0xfc>
   da83a:	2600      	movs	r6, #0
   da83c:	4634      	mov	r4, r6
   da83e:	e7c1      	b.n	da7c4 <floor+0x4c>
   da840:	ee10 2a10 	vmov	r2, s0
   da844:	460b      	mov	r3, r1
   da846:	f004 ffe5 	bl	df814 <__adddf3>
   da84a:	ec41 0b10 	vmov	d0, r0, r1
   da84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da852:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   da856:	fa43 f505 	asr.w	r5, r3, r5
   da85a:	442f      	add	r7, r5
   da85c:	e7af      	b.n	da7be <floor+0x46>
   da85e:	2d14      	cmp	r5, #20
   da860:	d010      	beq.n	da884 <floor+0x10c>
   da862:	2301      	movs	r3, #1
   da864:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   da868:	fa03 f505 	lsl.w	r5, r3, r5
   da86c:	19ae      	adds	r6, r5, r6
   da86e:	bf28      	it	cs
   da870:	18ff      	addcs	r7, r7, r3
   da872:	e7cc      	b.n	da80e <floor+0x96>
   da874:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   da878:	4b06      	ldr	r3, [pc, #24]	; (da894 <floor+0x11c>)
   da87a:	4332      	orrs	r2, r6
   da87c:	bf18      	it	ne
   da87e:	461c      	movne	r4, r3
   da880:	2600      	movs	r6, #0
   da882:	e79f      	b.n	da7c4 <floor+0x4c>
   da884:	3701      	adds	r7, #1
   da886:	e7c2      	b.n	da80e <floor+0x96>
   da888:	8800759c 	.word	0x8800759c
   da88c:	7e37e43c 	.word	0x7e37e43c
   da890:	000fffff 	.word	0x000fffff
   da894:	bff00000 	.word	0xbff00000

000da898 <sin>:
   da898:	b500      	push	{lr}
   da89a:	ec51 0b10 	vmov	r0, r1, d0
   da89e:	4a2c      	ldr	r2, [pc, #176]	; (da950 <sin+0xb8>)
   da8a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da8a4:	4293      	cmp	r3, r2
   da8a6:	b085      	sub	sp, #20
   da8a8:	dd27      	ble.n	da8fa <sin+0x62>
   da8aa:	4a2a      	ldr	r2, [pc, #168]	; (da954 <sin+0xbc>)
   da8ac:	4293      	cmp	r3, r2
   da8ae:	dd09      	ble.n	da8c4 <sin+0x2c>
   da8b0:	ee10 2a10 	vmov	r2, s0
   da8b4:	460b      	mov	r3, r1
   da8b6:	f004 ffab 	bl	df810 <__aeabi_dsub>
   da8ba:	ec41 0b10 	vmov	d0, r0, r1
   da8be:	b005      	add	sp, #20
   da8c0:	f85d fb04 	ldr.w	pc, [sp], #4
   da8c4:	4668      	mov	r0, sp
   da8c6:	f003 f823 	bl	dd910 <__ieee754_rem_pio2>
   da8ca:	f000 0003 	and.w	r0, r0, #3
   da8ce:	2801      	cmp	r0, #1
   da8d0:	d027      	beq.n	da922 <sin+0x8a>
   da8d2:	2802      	cmp	r0, #2
   da8d4:	d01d      	beq.n	da912 <sin+0x7a>
   da8d6:	b368      	cbz	r0, da934 <sin+0x9c>
   da8d8:	ed9d 1b02 	vldr	d1, [sp, #8]
   da8dc:	ed9d 0b00 	vldr	d0, [sp]
   da8e0:	f003 fbf2 	bl	de0c8 <__kernel_cos>
   da8e4:	ec53 2b10 	vmov	r2, r3, d0
   da8e8:	ee10 0a10 	vmov	r0, s0
   da8ec:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   da8f0:	ec41 0b10 	vmov	d0, r0, r1
   da8f4:	b005      	add	sp, #20
   da8f6:	f85d fb04 	ldr.w	pc, [sp], #4
   da8fa:	2000      	movs	r0, #0
   da8fc:	ed9f 1b12 	vldr	d1, [pc, #72]	; da948 <sin+0xb0>
   da900:	f004 f936 	bl	deb70 <__kernel_sin>
   da904:	ec51 0b10 	vmov	r0, r1, d0
   da908:	ec41 0b10 	vmov	d0, r0, r1
   da90c:	b005      	add	sp, #20
   da90e:	f85d fb04 	ldr.w	pc, [sp], #4
   da912:	2001      	movs	r0, #1
   da914:	ed9d 1b02 	vldr	d1, [sp, #8]
   da918:	ed9d 0b00 	vldr	d0, [sp]
   da91c:	f004 f928 	bl	deb70 <__kernel_sin>
   da920:	e7e0      	b.n	da8e4 <sin+0x4c>
   da922:	ed9d 1b02 	vldr	d1, [sp, #8]
   da926:	ed9d 0b00 	vldr	d0, [sp]
   da92a:	f003 fbcd 	bl	de0c8 <__kernel_cos>
   da92e:	ec51 0b10 	vmov	r0, r1, d0
   da932:	e7c2      	b.n	da8ba <sin+0x22>
   da934:	2001      	movs	r0, #1
   da936:	ed9d 1b02 	vldr	d1, [sp, #8]
   da93a:	ed9d 0b00 	vldr	d0, [sp]
   da93e:	f004 f917 	bl	deb70 <__kernel_sin>
   da942:	ec51 0b10 	vmov	r0, r1, d0
   da946:	e7b8      	b.n	da8ba <sin+0x22>
	...
   da950:	3fe921fb 	.word	0x3fe921fb
   da954:	7fefffff 	.word	0x7fefffff

000da958 <tan>:
   da958:	b500      	push	{lr}
   da95a:	ec51 0b10 	vmov	r0, r1, d0
   da95e:	4a18      	ldr	r2, [pc, #96]	; (da9c0 <tan+0x68>)
   da960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da964:	4293      	cmp	r3, r2
   da966:	b085      	sub	sp, #20
   da968:	dd1d      	ble.n	da9a6 <tan+0x4e>
   da96a:	4a16      	ldr	r2, [pc, #88]	; (da9c4 <tan+0x6c>)
   da96c:	4293      	cmp	r3, r2
   da96e:	dd09      	ble.n	da984 <tan+0x2c>
   da970:	ee10 2a10 	vmov	r2, s0
   da974:	460b      	mov	r3, r1
   da976:	f004 ff4b 	bl	df810 <__aeabi_dsub>
   da97a:	ec41 0b10 	vmov	d0, r0, r1
   da97e:	b005      	add	sp, #20
   da980:	f85d fb04 	ldr.w	pc, [sp], #4
   da984:	4668      	mov	r0, sp
   da986:	f002 ffc3 	bl	dd910 <__ieee754_rem_pio2>
   da98a:	0040      	lsls	r0, r0, #1
   da98c:	f000 0002 	and.w	r0, r0, #2
   da990:	f1c0 0001 	rsb	r0, r0, #1
   da994:	ed9d 1b02 	vldr	d1, [sp, #8]
   da998:	ed9d 0b00 	vldr	d0, [sp]
   da99c:	f004 f9b4 	bl	ded08 <__kernel_tan>
   da9a0:	b005      	add	sp, #20
   da9a2:	f85d fb04 	ldr.w	pc, [sp], #4
   da9a6:	2001      	movs	r0, #1
   da9a8:	ed9f 1b03 	vldr	d1, [pc, #12]	; da9b8 <tan+0x60>
   da9ac:	f004 f9ac 	bl	ded08 <__kernel_tan>
   da9b0:	b005      	add	sp, #20
   da9b2:	f85d fb04 	ldr.w	pc, [sp], #4
   da9b6:	bf00      	nop
	...
   da9c0:	3fe921fb 	.word	0x3fe921fb
   da9c4:	7fefffff 	.word	0x7fefffff

000da9c8 <tanh>:
   da9c8:	b5d0      	push	{r4, r6, r7, lr}
   da9ca:	ec57 6b10 	vmov	r6, r7, d0
   da9ce:	4a42      	ldr	r2, [pc, #264]	; (daad8 <tanh+0x110>)
   da9d0:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   da9d4:	4293      	cmp	r3, r2
   da9d6:	463c      	mov	r4, r7
   da9d8:	dd10      	ble.n	da9fc <tanh+0x34>
   da9da:	2f00      	cmp	r7, #0
   da9dc:	ee10 2a10 	vmov	r2, s0
   da9e0:	463b      	mov	r3, r7
   da9e2:	f04f 0000 	mov.w	r0, #0
   da9e6:	493d      	ldr	r1, [pc, #244]	; (daadc <tanh+0x114>)
   da9e8:	db40      	blt.n	daa6c <tanh+0xa4>
   da9ea:	f005 f9ef 	bl	dfdcc <__aeabi_ddiv>
   da9ee:	2200      	movs	r2, #0
   da9f0:	4b3a      	ldr	r3, [pc, #232]	; (daadc <tanh+0x114>)
   da9f2:	f004 ff0f 	bl	df814 <__adddf3>
   da9f6:	ec41 0b10 	vmov	d0, r0, r1
   da9fa:	bdd0      	pop	{r4, r6, r7, pc}
   da9fc:	4a38      	ldr	r2, [pc, #224]	; (daae0 <tanh+0x118>)
   da9fe:	4293      	cmp	r3, r2
   daa00:	dd0a      	ble.n	daa18 <tanh+0x50>
   daa02:	4b36      	ldr	r3, [pc, #216]	; (daadc <tanh+0x114>)
   daa04:	2200      	movs	r2, #0
   daa06:	2c00      	cmp	r4, #0
   daa08:	4610      	mov	r0, r2
   daa0a:	bfb4      	ite	lt
   daa0c:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   daa10:	4619      	movge	r1, r3
   daa12:	ec41 0b10 	vmov	d0, r0, r1
   daa16:	bdd0      	pop	{r4, r6, r7, pc}
   daa18:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   daa1c:	db2f      	blt.n	daa7e <tanh+0xb6>
   daa1e:	4a31      	ldr	r2, [pc, #196]	; (daae4 <tanh+0x11c>)
   daa20:	4293      	cmp	r3, r2
   daa22:	dd38      	ble.n	daa96 <tanh+0xce>
   daa24:	f7ff fea0 	bl	da768 <fabs>
   daa28:	ec53 2b10 	vmov	r2, r3, d0
   daa2c:	ee10 0a10 	vmov	r0, s0
   daa30:	4619      	mov	r1, r3
   daa32:	f004 feef 	bl	df814 <__adddf3>
   daa36:	ec41 0b10 	vmov	d0, r0, r1
   daa3a:	f004 fb49 	bl	df0d0 <expm1>
   daa3e:	2200      	movs	r2, #0
   daa40:	ec51 0b10 	vmov	r0, r1, d0
   daa44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daa48:	f004 fee4 	bl	df814 <__adddf3>
   daa4c:	4602      	mov	r2, r0
   daa4e:	460b      	mov	r3, r1
   daa50:	2000      	movs	r0, #0
   daa52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   daa56:	f005 f9b9 	bl	dfdcc <__aeabi_ddiv>
   daa5a:	4602      	mov	r2, r0
   daa5c:	460b      	mov	r3, r1
   daa5e:	2000      	movs	r0, #0
   daa60:	491e      	ldr	r1, [pc, #120]	; (daadc <tanh+0x114>)
   daa62:	f004 fed5 	bl	df810 <__aeabi_dsub>
   daa66:	4602      	mov	r2, r0
   daa68:	460b      	mov	r3, r1
   daa6a:	e7cc      	b.n	daa06 <tanh+0x3e>
   daa6c:	f005 f9ae 	bl	dfdcc <__aeabi_ddiv>
   daa70:	2200      	movs	r2, #0
   daa72:	4b1a      	ldr	r3, [pc, #104]	; (daadc <tanh+0x114>)
   daa74:	f004 fecc 	bl	df810 <__aeabi_dsub>
   daa78:	ec41 0b10 	vmov	d0, r0, r1
   daa7c:	bdd0      	pop	{r4, r6, r7, pc}
   daa7e:	2200      	movs	r2, #0
   daa80:	4b16      	ldr	r3, [pc, #88]	; (daadc <tanh+0x114>)
   daa82:	ee10 0a10 	vmov	r0, s0
   daa86:	4639      	mov	r1, r7
   daa88:	f004 fec4 	bl	df814 <__adddf3>
   daa8c:	4632      	mov	r2, r6
   daa8e:	463b      	mov	r3, r7
   daa90:	f005 f872 	bl	dfb78 <__aeabi_dmul>
   daa94:	e7af      	b.n	da9f6 <tanh+0x2e>
   daa96:	f7ff fe67 	bl	da768 <fabs>
   daa9a:	2200      	movs	r2, #0
   daa9c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   daaa0:	ec51 0b10 	vmov	r0, r1, d0
   daaa4:	f005 f868 	bl	dfb78 <__aeabi_dmul>
   daaa8:	ec41 0b10 	vmov	d0, r0, r1
   daaac:	f004 fb10 	bl	df0d0 <expm1>
   daab0:	ec51 0b10 	vmov	r0, r1, d0
   daab4:	2200      	movs	r2, #0
   daab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daaba:	ee10 6a10 	vmov	r6, s0
   daabe:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   daac2:	f004 fea7 	bl	df814 <__adddf3>
   daac6:	4602      	mov	r2, r0
   daac8:	460b      	mov	r3, r1
   daaca:	4630      	mov	r0, r6
   daacc:	4639      	mov	r1, r7
   daace:	f005 f97d 	bl	dfdcc <__aeabi_ddiv>
   daad2:	4602      	mov	r2, r0
   daad4:	460b      	mov	r3, r1
   daad6:	e796      	b.n	daa06 <tanh+0x3e>
   daad8:	7fefffff 	.word	0x7fefffff
   daadc:	3ff00000 	.word	0x3ff00000
   daae0:	4035ffff 	.word	0x4035ffff
   daae4:	3fefffff 	.word	0x3fefffff

000daae8 <acos>:
   daae8:	b530      	push	{r4, r5, lr}
   daaea:	ed2d 8b04 	vpush	{d8-d9}
   daaee:	eeb0 8a40 	vmov.f32	s16, s0
   daaf2:	eef0 8a60 	vmov.f32	s17, s1
   daaf6:	4c29      	ldr	r4, [pc, #164]	; (dab9c <acos+0xb4>)
   daaf8:	b08b      	sub	sp, #44	; 0x2c
   daafa:	f000 fd99 	bl	db630 <__ieee754_acos>
   daafe:	f994 3000 	ldrsb.w	r3, [r4]
   dab02:	eeb0 9a40 	vmov.f32	s18, s0
   dab06:	eef0 9a60 	vmov.f32	s19, s1
   dab0a:	3301      	adds	r3, #1
   dab0c:	d032      	beq.n	dab74 <acos+0x8c>
   dab0e:	ec53 2b18 	vmov	r2, r3, d8
   dab12:	ec51 0b18 	vmov	r0, r1, d8
   dab16:	f005 fac9 	bl	e00ac <__aeabi_dcmpun>
   dab1a:	4605      	mov	r5, r0
   dab1c:	bb50      	cbnz	r0, dab74 <acos+0x8c>
   dab1e:	eeb0 0a48 	vmov.f32	s0, s16
   dab22:	eef0 0a68 	vmov.f32	s1, s17
   dab26:	f7ff fe1f 	bl	da768 <fabs>
   dab2a:	2200      	movs	r2, #0
   dab2c:	4b1c      	ldr	r3, [pc, #112]	; (daba0 <acos+0xb8>)
   dab2e:	ec51 0b10 	vmov	r0, r1, d0
   dab32:	f005 fab1 	bl	e0098 <__aeabi_dcmpgt>
   dab36:	b1e8      	cbz	r0, dab74 <acos+0x8c>
   dab38:	4b1a      	ldr	r3, [pc, #104]	; (daba4 <acos+0xbc>)
   dab3a:	481b      	ldr	r0, [pc, #108]	; (daba8 <acos+0xc0>)
   dab3c:	9508      	str	r5, [sp, #32]
   dab3e:	2201      	movs	r2, #1
   dab40:	e88d 000c 	stmia.w	sp, {r2, r3}
   dab44:	ed8d 8b04 	vstr	d8, [sp, #16]
   dab48:	ed8d 8b02 	vstr	d8, [sp, #8]
   dab4c:	f004 fd2c 	bl	df5a8 <nan>
   dab50:	f994 3000 	ldrsb.w	r3, [r4]
   dab54:	2b02      	cmp	r3, #2
   dab56:	ed8d 0b06 	vstr	d0, [sp, #24]
   dab5a:	d013      	beq.n	dab84 <acos+0x9c>
   dab5c:	4668      	mov	r0, sp
   dab5e:	f004 fd21 	bl	df5a4 <matherr>
   dab62:	b178      	cbz	r0, dab84 <acos+0x9c>
   dab64:	9b08      	ldr	r3, [sp, #32]
   dab66:	b9a3      	cbnz	r3, dab92 <acos+0xaa>
   dab68:	ed9d 0b06 	vldr	d0, [sp, #24]
   dab6c:	b00b      	add	sp, #44	; 0x2c
   dab6e:	ecbd 8b04 	vpop	{d8-d9}
   dab72:	bd30      	pop	{r4, r5, pc}
   dab74:	eeb0 0a49 	vmov.f32	s0, s18
   dab78:	eef0 0a69 	vmov.f32	s1, s19
   dab7c:	b00b      	add	sp, #44	; 0x2c
   dab7e:	ecbd 8b04 	vpop	{d8-d9}
   dab82:	bd30      	pop	{r4, r5, pc}
   dab84:	f7fd fbfc 	bl	d8380 <__errno>
   dab88:	2321      	movs	r3, #33	; 0x21
   dab8a:	6003      	str	r3, [r0, #0]
   dab8c:	9b08      	ldr	r3, [sp, #32]
   dab8e:	2b00      	cmp	r3, #0
   dab90:	d0ea      	beq.n	dab68 <acos+0x80>
   dab92:	f7fd fbf5 	bl	d8380 <__errno>
   dab96:	9b08      	ldr	r3, [sp, #32]
   dab98:	6003      	str	r3, [r0, #0]
   dab9a:	e7e5      	b.n	dab68 <acos+0x80>
   dab9c:	2003db1c 	.word	0x2003db1c
   daba0:	3ff00000 	.word	0x3ff00000
   daba4:	000e4100 	.word	0x000e4100
   daba8:	000e4120 	.word	0x000e4120

000dabac <asin>:
   dabac:	b530      	push	{r4, r5, lr}
   dabae:	ed2d 8b04 	vpush	{d8-d9}
   dabb2:	eeb0 8a40 	vmov.f32	s16, s0
   dabb6:	eef0 8a60 	vmov.f32	s17, s1
   dabba:	4c29      	ldr	r4, [pc, #164]	; (dac60 <asin+0xb4>)
   dabbc:	b08b      	sub	sp, #44	; 0x2c
   dabbe:	f000 ffa7 	bl	dbb10 <__ieee754_asin>
   dabc2:	f994 3000 	ldrsb.w	r3, [r4]
   dabc6:	eeb0 9a40 	vmov.f32	s18, s0
   dabca:	eef0 9a60 	vmov.f32	s19, s1
   dabce:	3301      	adds	r3, #1
   dabd0:	d032      	beq.n	dac38 <asin+0x8c>
   dabd2:	ec53 2b18 	vmov	r2, r3, d8
   dabd6:	ec51 0b18 	vmov	r0, r1, d8
   dabda:	f005 fa67 	bl	e00ac <__aeabi_dcmpun>
   dabde:	4605      	mov	r5, r0
   dabe0:	bb50      	cbnz	r0, dac38 <asin+0x8c>
   dabe2:	eeb0 0a48 	vmov.f32	s0, s16
   dabe6:	eef0 0a68 	vmov.f32	s1, s17
   dabea:	f7ff fdbd 	bl	da768 <fabs>
   dabee:	2200      	movs	r2, #0
   dabf0:	4b1c      	ldr	r3, [pc, #112]	; (dac64 <asin+0xb8>)
   dabf2:	ec51 0b10 	vmov	r0, r1, d0
   dabf6:	f005 fa4f 	bl	e0098 <__aeabi_dcmpgt>
   dabfa:	b1e8      	cbz	r0, dac38 <asin+0x8c>
   dabfc:	4b1a      	ldr	r3, [pc, #104]	; (dac68 <asin+0xbc>)
   dabfe:	481b      	ldr	r0, [pc, #108]	; (dac6c <asin+0xc0>)
   dac00:	9508      	str	r5, [sp, #32]
   dac02:	2201      	movs	r2, #1
   dac04:	e88d 000c 	stmia.w	sp, {r2, r3}
   dac08:	ed8d 8b04 	vstr	d8, [sp, #16]
   dac0c:	ed8d 8b02 	vstr	d8, [sp, #8]
   dac10:	f004 fcca 	bl	df5a8 <nan>
   dac14:	f994 3000 	ldrsb.w	r3, [r4]
   dac18:	2b02      	cmp	r3, #2
   dac1a:	ed8d 0b06 	vstr	d0, [sp, #24]
   dac1e:	d013      	beq.n	dac48 <asin+0x9c>
   dac20:	4668      	mov	r0, sp
   dac22:	f004 fcbf 	bl	df5a4 <matherr>
   dac26:	b178      	cbz	r0, dac48 <asin+0x9c>
   dac28:	9b08      	ldr	r3, [sp, #32]
   dac2a:	b9a3      	cbnz	r3, dac56 <asin+0xaa>
   dac2c:	ed9d 0b06 	vldr	d0, [sp, #24]
   dac30:	b00b      	add	sp, #44	; 0x2c
   dac32:	ecbd 8b04 	vpop	{d8-d9}
   dac36:	bd30      	pop	{r4, r5, pc}
   dac38:	eeb0 0a49 	vmov.f32	s0, s18
   dac3c:	eef0 0a69 	vmov.f32	s1, s19
   dac40:	b00b      	add	sp, #44	; 0x2c
   dac42:	ecbd 8b04 	vpop	{d8-d9}
   dac46:	bd30      	pop	{r4, r5, pc}
   dac48:	f7fd fb9a 	bl	d8380 <__errno>
   dac4c:	2321      	movs	r3, #33	; 0x21
   dac4e:	6003      	str	r3, [r0, #0]
   dac50:	9b08      	ldr	r3, [sp, #32]
   dac52:	2b00      	cmp	r3, #0
   dac54:	d0ea      	beq.n	dac2c <asin+0x80>
   dac56:	f7fd fb93 	bl	d8380 <__errno>
   dac5a:	9b08      	ldr	r3, [sp, #32]
   dac5c:	6003      	str	r3, [r0, #0]
   dac5e:	e7e5      	b.n	dac2c <asin+0x80>
   dac60:	2003db1c 	.word	0x2003db1c
   dac64:	3ff00000 	.word	0x3ff00000
   dac68:	000e4108 	.word	0x000e4108
   dac6c:	000e4120 	.word	0x000e4120

000dac70 <atan2>:
   dac70:	f001 b99e 	b.w	dbfb0 <__ieee754_atan2>
   dac74:	0000      	movs	r0, r0
	...

000dac78 <cosh>:
   dac78:	b530      	push	{r4, r5, lr}
   dac7a:	ed2d 8b04 	vpush	{d8-d9}
   dac7e:	eeb0 8a40 	vmov.f32	s16, s0
   dac82:	eef0 8a60 	vmov.f32	s17, s1
   dac86:	4c2e      	ldr	r4, [pc, #184]	; (dad40 <cosh+0xc8>)
   dac88:	b08b      	sub	sp, #44	; 0x2c
   dac8a:	f001 fa89 	bl	dc1a0 <__ieee754_cosh>
   dac8e:	f994 3000 	ldrsb.w	r3, [r4]
   dac92:	eeb0 9a40 	vmov.f32	s18, s0
   dac96:	eef0 9a60 	vmov.f32	s19, s1
   dac9a:	3301      	adds	r3, #1
   dac9c:	d032      	beq.n	dad04 <cosh+0x8c>
   dac9e:	ec53 2b18 	vmov	r2, r3, d8
   daca2:	ec51 0b18 	vmov	r0, r1, d8
   daca6:	f005 fa01 	bl	e00ac <__aeabi_dcmpun>
   dacaa:	4605      	mov	r5, r0
   dacac:	bb50      	cbnz	r0, dad04 <cosh+0x8c>
   dacae:	eeb0 0a48 	vmov.f32	s0, s16
   dacb2:	eef0 0a68 	vmov.f32	s1, s17
   dacb6:	f7ff fd57 	bl	da768 <fabs>
   dacba:	a31f      	add	r3, pc, #124	; (adr r3, dad38 <cosh+0xc0>)
   dacbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dacc0:	ec51 0b10 	vmov	r0, r1, d0
   dacc4:	f005 f9e8 	bl	e0098 <__aeabi_dcmpgt>
   dacc8:	b1e0      	cbz	r0, dad04 <cosh+0x8c>
   dacca:	4a1e      	ldr	r2, [pc, #120]	; (dad44 <cosh+0xcc>)
   daccc:	f994 3000 	ldrsb.w	r3, [r4]
   dacd0:	9508      	str	r5, [sp, #32]
   dacd2:	2103      	movs	r1, #3
   dacd4:	ed8d 8b04 	vstr	d8, [sp, #16]
   dacd8:	ed8d 8b02 	vstr	d8, [sp, #8]
   dacdc:	e88d 0006 	stmia.w	sp, {r1, r2}
   dace0:	b9c3      	cbnz	r3, dad14 <cosh+0x9c>
   dace2:	4b19      	ldr	r3, [pc, #100]	; (dad48 <cosh+0xd0>)
   dace4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dace8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dacec:	4668      	mov	r0, sp
   dacee:	f004 fc59 	bl	df5a4 <matherr>
   dacf2:	b1a8      	cbz	r0, dad20 <cosh+0xa8>
   dacf4:	9b08      	ldr	r3, [sp, #32]
   dacf6:	b9d3      	cbnz	r3, dad2e <cosh+0xb6>
   dacf8:	ed9d 0b06 	vldr	d0, [sp, #24]
   dacfc:	b00b      	add	sp, #44	; 0x2c
   dacfe:	ecbd 8b04 	vpop	{d8-d9}
   dad02:	bd30      	pop	{r4, r5, pc}
   dad04:	eeb0 0a49 	vmov.f32	s0, s18
   dad08:	eef0 0a69 	vmov.f32	s1, s19
   dad0c:	b00b      	add	sp, #44	; 0x2c
   dad0e:	ecbd 8b04 	vpop	{d8-d9}
   dad12:	bd30      	pop	{r4, r5, pc}
   dad14:	490d      	ldr	r1, [pc, #52]	; (dad4c <cosh+0xd4>)
   dad16:	2000      	movs	r0, #0
   dad18:	2b02      	cmp	r3, #2
   dad1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dad1e:	d1e5      	bne.n	dacec <cosh+0x74>
   dad20:	f7fd fb2e 	bl	d8380 <__errno>
   dad24:	2322      	movs	r3, #34	; 0x22
   dad26:	6003      	str	r3, [r0, #0]
   dad28:	9b08      	ldr	r3, [sp, #32]
   dad2a:	2b00      	cmp	r3, #0
   dad2c:	d0e4      	beq.n	dacf8 <cosh+0x80>
   dad2e:	f7fd fb27 	bl	d8380 <__errno>
   dad32:	9b08      	ldr	r3, [sp, #32]
   dad34:	6003      	str	r3, [r0, #0]
   dad36:	e7df      	b.n	dacf8 <cosh+0x80>
   dad38:	8fb9f87d 	.word	0x8fb9f87d
   dad3c:	408633ce 	.word	0x408633ce
   dad40:	2003db1c 	.word	0x2003db1c
   dad44:	000e4110 	.word	0x000e4110
   dad48:	47efffff 	.word	0x47efffff
   dad4c:	7ff00000 	.word	0x7ff00000

000dad50 <exp>:
   dad50:	b5f0      	push	{r4, r5, r6, r7, lr}
   dad52:	ed2d 8b04 	vpush	{d8-d9}
   dad56:	eeb0 9a40 	vmov.f32	s18, s0
   dad5a:	eef0 9a60 	vmov.f32	s19, s1
   dad5e:	4c3a      	ldr	r4, [pc, #232]	; (dae48 <exp+0xf8>)
   dad60:	b08b      	sub	sp, #44	; 0x2c
   dad62:	f001 fad9 	bl	dc318 <__ieee754_exp>
   dad66:	f994 3000 	ldrsb.w	r3, [r4]
   dad6a:	eeb0 8a40 	vmov.f32	s16, s0
   dad6e:	eef0 8a60 	vmov.f32	s17, s1
   dad72:	3301      	adds	r3, #1
   dad74:	d038      	beq.n	dade8 <exp+0x98>
   dad76:	eeb0 0a49 	vmov.f32	s0, s18
   dad7a:	eef0 0a69 	vmov.f32	s1, s19
   dad7e:	f004 fc09 	bl	df594 <finite>
   dad82:	b388      	cbz	r0, dade8 <exp+0x98>
   dad84:	a32c      	add	r3, pc, #176	; (adr r3, dae38 <exp+0xe8>)
   dad86:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad8a:	ec51 0b19 	vmov	r0, r1, d9
   dad8e:	f005 f983 	bl	e0098 <__aeabi_dcmpgt>
   dad92:	4605      	mov	r5, r0
   dad94:	bb80      	cbnz	r0, dadf8 <exp+0xa8>
   dad96:	a32a      	add	r3, pc, #168	; (adr r3, dae40 <exp+0xf0>)
   dad98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dad9c:	ec51 0b19 	vmov	r0, r1, d9
   dada0:	f005 f95c 	bl	e005c <__aeabi_dcmplt>
   dada4:	b300      	cbz	r0, dade8 <exp+0x98>
   dada6:	f994 3000 	ldrsb.w	r3, [r4]
   dadaa:	4a28      	ldr	r2, [pc, #160]	; (dae4c <exp+0xfc>)
   dadac:	9508      	str	r5, [sp, #32]
   dadae:	2600      	movs	r6, #0
   dadb0:	2700      	movs	r7, #0
   dadb2:	2104      	movs	r1, #4
   dadb4:	2b02      	cmp	r3, #2
   dadb6:	ed8d 9b04 	vstr	d9, [sp, #16]
   dadba:	ed8d 9b02 	vstr	d9, [sp, #8]
   dadbe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dadc2:	e88d 0006 	stmia.w	sp, {r1, r2}
   dadc6:	d030      	beq.n	dae2a <exp+0xda>
   dadc8:	4668      	mov	r0, sp
   dadca:	f004 fbeb 	bl	df5a4 <matherr>
   dadce:	b360      	cbz	r0, dae2a <exp+0xda>
   dadd0:	9b08      	ldr	r3, [sp, #32]
   dadd2:	b11b      	cbz	r3, daddc <exp+0x8c>
   dadd4:	f7fd fad4 	bl	d8380 <__errno>
   dadd8:	9b08      	ldr	r3, [sp, #32]
   dadda:	6003      	str	r3, [r0, #0]
   daddc:	ed9d 0b06 	vldr	d0, [sp, #24]
   dade0:	b00b      	add	sp, #44	; 0x2c
   dade2:	ecbd 8b04 	vpop	{d8-d9}
   dade6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dade8:	eeb0 0a48 	vmov.f32	s0, s16
   dadec:	eef0 0a68 	vmov.f32	s1, s17
   dadf0:	b00b      	add	sp, #44	; 0x2c
   dadf2:	ecbd 8b04 	vpop	{d8-d9}
   dadf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dadf8:	4a14      	ldr	r2, [pc, #80]	; (dae4c <exp+0xfc>)
   dadfa:	f994 3000 	ldrsb.w	r3, [r4]
   dadfe:	9201      	str	r2, [sp, #4]
   dae00:	2103      	movs	r1, #3
   dae02:	2200      	movs	r2, #0
   dae04:	ed8d 9b04 	vstr	d9, [sp, #16]
   dae08:	ed8d 9b02 	vstr	d9, [sp, #8]
   dae0c:	9100      	str	r1, [sp, #0]
   dae0e:	9208      	str	r2, [sp, #32]
   dae10:	b92b      	cbnz	r3, dae1e <exp+0xce>
   dae12:	4b0f      	ldr	r3, [pc, #60]	; (dae50 <exp+0x100>)
   dae14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dae18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dae1c:	e7d4      	b.n	dadc8 <exp+0x78>
   dae1e:	490d      	ldr	r1, [pc, #52]	; (dae54 <exp+0x104>)
   dae20:	2000      	movs	r0, #0
   dae22:	2b02      	cmp	r3, #2
   dae24:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dae28:	d1ce      	bne.n	dadc8 <exp+0x78>
   dae2a:	f7fd faa9 	bl	d8380 <__errno>
   dae2e:	2322      	movs	r3, #34	; 0x22
   dae30:	6003      	str	r3, [r0, #0]
   dae32:	e7cd      	b.n	dadd0 <exp+0x80>
   dae34:	f3af 8000 	nop.w
   dae38:	fefa39ef 	.word	0xfefa39ef
   dae3c:	40862e42 	.word	0x40862e42
   dae40:	d52d3051 	.word	0xd52d3051
   dae44:	c0874910 	.word	0xc0874910
   dae48:	2003db1c 	.word	0x2003db1c
   dae4c:	000e4118 	.word	0x000e4118
   dae50:	47efffff 	.word	0x47efffff
   dae54:	7ff00000 	.word	0x7ff00000

000dae58 <fmod>:
   dae58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dae5c:	ed2d 8b02 	vpush	{d8}
   dae60:	b08b      	sub	sp, #44	; 0x2c
   dae62:	ec57 6b10 	vmov	r6, r7, d0
   dae66:	ec55 4b11 	vmov	r4, r5, d1
   dae6a:	f001 fbe7 	bl	dc63c <__ieee754_fmod>
   dae6e:	4b2e      	ldr	r3, [pc, #184]	; (daf28 <fmod+0xd0>)
   dae70:	eeb0 8a40 	vmov.f32	s16, s0
   dae74:	eef0 8a60 	vmov.f32	s17, s1
   dae78:	f993 8000 	ldrsb.w	r8, [r3]
   dae7c:	f1b8 3fff 	cmp.w	r8, #4294967295
   dae80:	d031      	beq.n	daee6 <fmod+0x8e>
   dae82:	4622      	mov	r2, r4
   dae84:	462b      	mov	r3, r5
   dae86:	4620      	mov	r0, r4
   dae88:	4629      	mov	r1, r5
   dae8a:	f005 f90f 	bl	e00ac <__aeabi_dcmpun>
   dae8e:	bb50      	cbnz	r0, daee6 <fmod+0x8e>
   dae90:	4632      	mov	r2, r6
   dae92:	463b      	mov	r3, r7
   dae94:	4630      	mov	r0, r6
   dae96:	4639      	mov	r1, r7
   dae98:	f005 f908 	bl	e00ac <__aeabi_dcmpun>
   dae9c:	4681      	mov	r9, r0
   dae9e:	bb10      	cbnz	r0, daee6 <fmod+0x8e>
   daea0:	2200      	movs	r2, #0
   daea2:	2300      	movs	r3, #0
   daea4:	4620      	mov	r0, r4
   daea6:	4629      	mov	r1, r5
   daea8:	f005 f8ce 	bl	e0048 <__aeabi_dcmpeq>
   daeac:	b1d8      	cbz	r0, daee6 <fmod+0x8e>
   daeae:	4b1f      	ldr	r3, [pc, #124]	; (daf2c <fmod+0xd4>)
   daeb0:	f8cd 9020 	str.w	r9, [sp, #32]
   daeb4:	2201      	movs	r2, #1
   daeb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   daeba:	e9cd 4504 	strd	r4, r5, [sp, #16]
   daebe:	e88d 000c 	stmia.w	sp, {r2, r3}
   daec2:	f1b8 0f00 	cmp.w	r8, #0
   daec6:	d117      	bne.n	daef8 <fmod+0xa0>
   daec8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   daecc:	4668      	mov	r0, sp
   daece:	f004 fb69 	bl	df5a4 <matherr>
   daed2:	b1e0      	cbz	r0, daf0e <fmod+0xb6>
   daed4:	9b08      	ldr	r3, [sp, #32]
   daed6:	bb0b      	cbnz	r3, daf1c <fmod+0xc4>
   daed8:	ed9d 0b06 	vldr	d0, [sp, #24]
   daedc:	b00b      	add	sp, #44	; 0x2c
   daede:	ecbd 8b02 	vpop	{d8}
   daee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daee6:	eeb0 0a48 	vmov.f32	s0, s16
   daeea:	eef0 0a68 	vmov.f32	s1, s17
   daeee:	b00b      	add	sp, #44	; 0x2c
   daef0:	ecbd 8b02 	vpop	{d8}
   daef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daef8:	2200      	movs	r2, #0
   daefa:	2300      	movs	r3, #0
   daefc:	4610      	mov	r0, r2
   daefe:	4619      	mov	r1, r3
   daf00:	f004 ff64 	bl	dfdcc <__aeabi_ddiv>
   daf04:	f1b8 0f02 	cmp.w	r8, #2
   daf08:	e9cd 0106 	strd	r0, r1, [sp, #24]
   daf0c:	d1de      	bne.n	daecc <fmod+0x74>
   daf0e:	f7fd fa37 	bl	d8380 <__errno>
   daf12:	2321      	movs	r3, #33	; 0x21
   daf14:	6003      	str	r3, [r0, #0]
   daf16:	9b08      	ldr	r3, [sp, #32]
   daf18:	2b00      	cmp	r3, #0
   daf1a:	d0dd      	beq.n	daed8 <fmod+0x80>
   daf1c:	f7fd fa30 	bl	d8380 <__errno>
   daf20:	9b08      	ldr	r3, [sp, #32]
   daf22:	6003      	str	r3, [r0, #0]
   daf24:	e7d8      	b.n	daed8 <fmod+0x80>
   daf26:	bf00      	nop
   daf28:	2003db1c 	.word	0x2003db1c
   daf2c:	000e411c 	.word	0x000e411c

000daf30 <log>:
   daf30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daf34:	ed2d 8b02 	vpush	{d8}
   daf38:	b08b      	sub	sp, #44	; 0x2c
   daf3a:	ec55 4b10 	vmov	r4, r5, d0
   daf3e:	f001 fcb7 	bl	dc8b0 <__ieee754_log>
   daf42:	4b3a      	ldr	r3, [pc, #232]	; (db02c <log+0xfc>)
   daf44:	eeb0 8a40 	vmov.f32	s16, s0
   daf48:	eef0 8a60 	vmov.f32	s17, s1
   daf4c:	f993 6000 	ldrsb.w	r6, [r3]
   daf50:	1c73      	adds	r3, r6, #1
   daf52:	d00d      	beq.n	daf70 <log+0x40>
   daf54:	4622      	mov	r2, r4
   daf56:	462b      	mov	r3, r5
   daf58:	4620      	mov	r0, r4
   daf5a:	4629      	mov	r1, r5
   daf5c:	f005 f8a6 	bl	e00ac <__aeabi_dcmpun>
   daf60:	b930      	cbnz	r0, daf70 <log+0x40>
   daf62:	2200      	movs	r2, #0
   daf64:	2300      	movs	r3, #0
   daf66:	4620      	mov	r0, r4
   daf68:	4629      	mov	r1, r5
   daf6a:	f005 f895 	bl	e0098 <__aeabi_dcmpgt>
   daf6e:	b140      	cbz	r0, daf82 <log+0x52>
   daf70:	eeb0 0a48 	vmov.f32	s0, s16
   daf74:	eef0 0a68 	vmov.f32	s1, s17
   daf78:	b00b      	add	sp, #44	; 0x2c
   daf7a:	ecbd 8b02 	vpop	{d8}
   daf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daf82:	4b2b      	ldr	r3, [pc, #172]	; (db030 <log+0x100>)
   daf84:	9008      	str	r0, [sp, #32]
   daf86:	e9cd 4502 	strd	r4, r5, [sp, #8]
   daf8a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   daf8e:	9301      	str	r3, [sp, #4]
   daf90:	b9de      	cbnz	r6, dafca <log+0x9a>
   daf92:	4f28      	ldr	r7, [pc, #160]	; (db034 <log+0x104>)
   daf94:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   daf98:	4620      	mov	r0, r4
   daf9a:	4629      	mov	r1, r5
   daf9c:	2200      	movs	r2, #0
   daf9e:	2300      	movs	r3, #0
   dafa0:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dafa4:	f005 f850 	bl	e0048 <__aeabi_dcmpeq>
   dafa8:	2800      	cmp	r0, #0
   dafaa:	d037      	beq.n	db01c <log+0xec>
   dafac:	2302      	movs	r3, #2
   dafae:	9300      	str	r3, [sp, #0]
   dafb0:	4668      	mov	r0, sp
   dafb2:	f004 faf7 	bl	df5a4 <matherr>
   dafb6:	b1c8      	cbz	r0, dafec <log+0xbc>
   dafb8:	9b08      	ldr	r3, [sp, #32]
   dafba:	b9e3      	cbnz	r3, daff6 <log+0xc6>
   dafbc:	ed9d 0b06 	vldr	d0, [sp, #24]
   dafc0:	b00b      	add	sp, #44	; 0x2c
   dafc2:	ecbd 8b02 	vpop	{d8}
   dafc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dafca:	f8df 9070 	ldr.w	r9, [pc, #112]	; db03c <log+0x10c>
   dafce:	f04f 0800 	mov.w	r8, #0
   dafd2:	4620      	mov	r0, r4
   dafd4:	4629      	mov	r1, r5
   dafd6:	2200      	movs	r2, #0
   dafd8:	2300      	movs	r3, #0
   dafda:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dafde:	f005 f833 	bl	e0048 <__aeabi_dcmpeq>
   dafe2:	b168      	cbz	r0, db000 <log+0xd0>
   dafe4:	2302      	movs	r3, #2
   dafe6:	429e      	cmp	r6, r3
   dafe8:	9300      	str	r3, [sp, #0]
   dafea:	d1e1      	bne.n	dafb0 <log+0x80>
   dafec:	f7fd f9c8 	bl	d8380 <__errno>
   daff0:	2322      	movs	r3, #34	; 0x22
   daff2:	6003      	str	r3, [r0, #0]
   daff4:	e7e0      	b.n	dafb8 <log+0x88>
   daff6:	f7fd f9c3 	bl	d8380 <__errno>
   daffa:	9b08      	ldr	r3, [sp, #32]
   daffc:	6003      	str	r3, [r0, #0]
   daffe:	e7dd      	b.n	dafbc <log+0x8c>
   db000:	2301      	movs	r3, #1
   db002:	2e02      	cmp	r6, #2
   db004:	9300      	str	r3, [sp, #0]
   db006:	d10b      	bne.n	db020 <log+0xf0>
   db008:	f7fd f9ba 	bl	d8380 <__errno>
   db00c:	2321      	movs	r3, #33	; 0x21
   db00e:	6003      	str	r3, [r0, #0]
   db010:	4809      	ldr	r0, [pc, #36]	; (db038 <log+0x108>)
   db012:	f004 fac9 	bl	df5a8 <nan>
   db016:	ed8d 0b06 	vstr	d0, [sp, #24]
   db01a:	e7cd      	b.n	dafb8 <log+0x88>
   db01c:	2301      	movs	r3, #1
   db01e:	9300      	str	r3, [sp, #0]
   db020:	4668      	mov	r0, sp
   db022:	f004 fabf 	bl	df5a4 <matherr>
   db026:	2800      	cmp	r0, #0
   db028:	d1f2      	bne.n	db010 <log+0xe0>
   db02a:	e7ed      	b.n	db008 <log+0xd8>
   db02c:	2003db1c 	.word	0x2003db1c
   db030:	000e4124 	.word	0x000e4124
   db034:	c7efffff 	.word	0xc7efffff
   db038:	000e4120 	.word	0x000e4120
   db03c:	fff00000 	.word	0xfff00000

000db040 <log10>:
   db040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db044:	ed2d 8b02 	vpush	{d8}
   db048:	b08b      	sub	sp, #44	; 0x2c
   db04a:	ec55 4b10 	vmov	r4, r5, d0
   db04e:	f001 fe33 	bl	dccb8 <__ieee754_log10>
   db052:	4b3b      	ldr	r3, [pc, #236]	; (db140 <log10+0x100>)
   db054:	eeb0 8a40 	vmov.f32	s16, s0
   db058:	eef0 8a60 	vmov.f32	s17, s1
   db05c:	f993 6000 	ldrsb.w	r6, [r3]
   db060:	1c73      	adds	r3, r6, #1
   db062:	d00e      	beq.n	db082 <log10+0x42>
   db064:	4622      	mov	r2, r4
   db066:	462b      	mov	r3, r5
   db068:	4620      	mov	r0, r4
   db06a:	4629      	mov	r1, r5
   db06c:	f005 f81e 	bl	e00ac <__aeabi_dcmpun>
   db070:	4607      	mov	r7, r0
   db072:	b930      	cbnz	r0, db082 <log10+0x42>
   db074:	2200      	movs	r2, #0
   db076:	2300      	movs	r3, #0
   db078:	4620      	mov	r0, r4
   db07a:	4629      	mov	r1, r5
   db07c:	f004 fff8 	bl	e0070 <__aeabi_dcmple>
   db080:	b940      	cbnz	r0, db094 <log10+0x54>
   db082:	eeb0 0a48 	vmov.f32	s0, s16
   db086:	eef0 0a68 	vmov.f32	s1, s17
   db08a:	b00b      	add	sp, #44	; 0x2c
   db08c:	ecbd 8b02 	vpop	{d8}
   db090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db094:	4b2b      	ldr	r3, [pc, #172]	; (db144 <log10+0x104>)
   db096:	9708      	str	r7, [sp, #32]
   db098:	e9cd 4502 	strd	r4, r5, [sp, #8]
   db09c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db0a0:	9301      	str	r3, [sp, #4]
   db0a2:	b9de      	cbnz	r6, db0dc <log10+0x9c>
   db0a4:	4f28      	ldr	r7, [pc, #160]	; (db148 <log10+0x108>)
   db0a6:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   db0aa:	4620      	mov	r0, r4
   db0ac:	4629      	mov	r1, r5
   db0ae:	2200      	movs	r2, #0
   db0b0:	2300      	movs	r3, #0
   db0b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   db0b6:	f004 ffc7 	bl	e0048 <__aeabi_dcmpeq>
   db0ba:	2800      	cmp	r0, #0
   db0bc:	d037      	beq.n	db12e <log10+0xee>
   db0be:	2302      	movs	r3, #2
   db0c0:	9300      	str	r3, [sp, #0]
   db0c2:	4668      	mov	r0, sp
   db0c4:	f004 fa6e 	bl	df5a4 <matherr>
   db0c8:	b1c8      	cbz	r0, db0fe <log10+0xbe>
   db0ca:	9b08      	ldr	r3, [sp, #32]
   db0cc:	b9e3      	cbnz	r3, db108 <log10+0xc8>
   db0ce:	ed9d 0b06 	vldr	d0, [sp, #24]
   db0d2:	b00b      	add	sp, #44	; 0x2c
   db0d4:	ecbd 8b02 	vpop	{d8}
   db0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db0dc:	f8df 9070 	ldr.w	r9, [pc, #112]	; db150 <log10+0x110>
   db0e0:	f04f 0800 	mov.w	r8, #0
   db0e4:	4620      	mov	r0, r4
   db0e6:	4629      	mov	r1, r5
   db0e8:	2200      	movs	r2, #0
   db0ea:	2300      	movs	r3, #0
   db0ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
   db0f0:	f004 ffaa 	bl	e0048 <__aeabi_dcmpeq>
   db0f4:	b168      	cbz	r0, db112 <log10+0xd2>
   db0f6:	2302      	movs	r3, #2
   db0f8:	429e      	cmp	r6, r3
   db0fa:	9300      	str	r3, [sp, #0]
   db0fc:	d1e1      	bne.n	db0c2 <log10+0x82>
   db0fe:	f7fd f93f 	bl	d8380 <__errno>
   db102:	2322      	movs	r3, #34	; 0x22
   db104:	6003      	str	r3, [r0, #0]
   db106:	e7e0      	b.n	db0ca <log10+0x8a>
   db108:	f7fd f93a 	bl	d8380 <__errno>
   db10c:	9b08      	ldr	r3, [sp, #32]
   db10e:	6003      	str	r3, [r0, #0]
   db110:	e7dd      	b.n	db0ce <log10+0x8e>
   db112:	2301      	movs	r3, #1
   db114:	2e02      	cmp	r6, #2
   db116:	9300      	str	r3, [sp, #0]
   db118:	d10b      	bne.n	db132 <log10+0xf2>
   db11a:	f7fd f931 	bl	d8380 <__errno>
   db11e:	2321      	movs	r3, #33	; 0x21
   db120:	6003      	str	r3, [r0, #0]
   db122:	480a      	ldr	r0, [pc, #40]	; (db14c <log10+0x10c>)
   db124:	f004 fa40 	bl	df5a8 <nan>
   db128:	ed8d 0b06 	vstr	d0, [sp, #24]
   db12c:	e7cd      	b.n	db0ca <log10+0x8a>
   db12e:	2301      	movs	r3, #1
   db130:	9300      	str	r3, [sp, #0]
   db132:	4668      	mov	r0, sp
   db134:	f004 fa36 	bl	df5a4 <matherr>
   db138:	2800      	cmp	r0, #0
   db13a:	d1f2      	bne.n	db122 <log10+0xe2>
   db13c:	e7ed      	b.n	db11a <log10+0xda>
   db13e:	bf00      	nop
   db140:	2003db1c 	.word	0x2003db1c
   db144:	000e4128 	.word	0x000e4128
   db148:	c7efffff 	.word	0xc7efffff
   db14c:	000e4120 	.word	0x000e4120
   db150:	fff00000 	.word	0xfff00000
   db154:	00000000 	.word	0x00000000

000db158 <pow>:
   db158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db15c:	ed2d 8b02 	vpush	{d8}
   db160:	f8df a324 	ldr.w	sl, [pc, #804]	; db488 <pow+0x330>
   db164:	b08b      	sub	sp, #44	; 0x2c
   db166:	ec57 6b10 	vmov	r6, r7, d0
   db16a:	ec55 4b11 	vmov	r4, r5, d1
   db16e:	f001 fe47 	bl	dce00 <__ieee754_pow>
   db172:	f99a 8000 	ldrsb.w	r8, [sl]
   db176:	eeb0 8a40 	vmov.f32	s16, s0
   db17a:	eef0 8a60 	vmov.f32	s17, s1
   db17e:	f1b8 3fff 	cmp.w	r8, #4294967295
   db182:	d048      	beq.n	db216 <pow+0xbe>
   db184:	4622      	mov	r2, r4
   db186:	462b      	mov	r3, r5
   db188:	4620      	mov	r0, r4
   db18a:	4629      	mov	r1, r5
   db18c:	f004 ff8e 	bl	e00ac <__aeabi_dcmpun>
   db190:	4683      	mov	fp, r0
   db192:	2800      	cmp	r0, #0
   db194:	d13f      	bne.n	db216 <pow+0xbe>
   db196:	4632      	mov	r2, r6
   db198:	463b      	mov	r3, r7
   db19a:	4630      	mov	r0, r6
   db19c:	4639      	mov	r1, r7
   db19e:	f004 ff85 	bl	e00ac <__aeabi_dcmpun>
   db1a2:	4681      	mov	r9, r0
   db1a4:	2800      	cmp	r0, #0
   db1a6:	f040 8090 	bne.w	db2ca <pow+0x172>
   db1aa:	4630      	mov	r0, r6
   db1ac:	4639      	mov	r1, r7
   db1ae:	2200      	movs	r2, #0
   db1b0:	2300      	movs	r3, #0
   db1b2:	f004 ff49 	bl	e0048 <__aeabi_dcmpeq>
   db1b6:	2800      	cmp	r0, #0
   db1b8:	d036      	beq.n	db228 <pow+0xd0>
   db1ba:	2200      	movs	r2, #0
   db1bc:	2300      	movs	r3, #0
   db1be:	4620      	mov	r0, r4
   db1c0:	4629      	mov	r1, r5
   db1c2:	f004 ff41 	bl	e0048 <__aeabi_dcmpeq>
   db1c6:	4683      	mov	fp, r0
   db1c8:	b1b8      	cbz	r0, db1fa <pow+0xa2>
   db1ca:	ed9f 7ba5 	vldr	d7, [pc, #660]	; db460 <pow+0x308>
   db1ce:	2201      	movs	r2, #1
   db1d0:	4ba9      	ldr	r3, [pc, #676]	; (db478 <pow+0x320>)
   db1d2:	f8cd 9020 	str.w	r9, [sp, #32]
   db1d6:	9200      	str	r2, [sp, #0]
   db1d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db1dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db1e0:	ed8d 7b06 	vstr	d7, [sp, #24]
   db1e4:	9301      	str	r3, [sp, #4]
   db1e6:	f1b8 0f00 	cmp.w	r8, #0
   db1ea:	d05b      	beq.n	db2a4 <pow+0x14c>
   db1ec:	ed9f 0b9e 	vldr	d0, [pc, #632]	; db468 <pow+0x310>
   db1f0:	b00b      	add	sp, #44	; 0x2c
   db1f2:	ecbd 8b02 	vpop	{d8}
   db1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db1fa:	ec45 4b10 	vmov	d0, r4, r5
   db1fe:	f004 f9c9 	bl	df594 <finite>
   db202:	b140      	cbz	r0, db216 <pow+0xbe>
   db204:	2200      	movs	r2, #0
   db206:	2300      	movs	r3, #0
   db208:	4620      	mov	r0, r4
   db20a:	4629      	mov	r1, r5
   db20c:	f004 ff26 	bl	e005c <__aeabi_dcmplt>
   db210:	2800      	cmp	r0, #0
   db212:	f040 80c5 	bne.w	db3a0 <pow+0x248>
   db216:	eeb0 0a48 	vmov.f32	s0, s16
   db21a:	eef0 0a68 	vmov.f32	s1, s17
   db21e:	b00b      	add	sp, #44	; 0x2c
   db220:	ecbd 8b02 	vpop	{d8}
   db224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db228:	eeb0 0a48 	vmov.f32	s0, s16
   db22c:	eef0 0a68 	vmov.f32	s1, s17
   db230:	f004 f9b0 	bl	df594 <finite>
   db234:	4680      	mov	r8, r0
   db236:	2800      	cmp	r0, #0
   db238:	d061      	beq.n	db2fe <pow+0x1a6>
   db23a:	f04f 0800 	mov.w	r8, #0
   db23e:	f04f 0900 	mov.w	r9, #0
   db242:	ec51 0b18 	vmov	r0, r1, d8
   db246:	4642      	mov	r2, r8
   db248:	464b      	mov	r3, r9
   db24a:	f004 fefd 	bl	e0048 <__aeabi_dcmpeq>
   db24e:	2800      	cmp	r0, #0
   db250:	d0e1      	beq.n	db216 <pow+0xbe>
   db252:	ec47 6b10 	vmov	d0, r6, r7
   db256:	f004 f99d 	bl	df594 <finite>
   db25a:	2800      	cmp	r0, #0
   db25c:	d0db      	beq.n	db216 <pow+0xbe>
   db25e:	ec45 4b10 	vmov	d0, r4, r5
   db262:	f004 f997 	bl	df594 <finite>
   db266:	2800      	cmp	r0, #0
   db268:	d0d5      	beq.n	db216 <pow+0xbe>
   db26a:	f99a 3000 	ldrsb.w	r3, [sl]
   db26e:	4a82      	ldr	r2, [pc, #520]	; (db478 <pow+0x320>)
   db270:	9201      	str	r2, [sp, #4]
   db272:	2104      	movs	r1, #4
   db274:	2200      	movs	r2, #0
   db276:	2b02      	cmp	r3, #2
   db278:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db27c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db280:	e9cd 8906 	strd	r8, r9, [sp, #24]
   db284:	9100      	str	r1, [sp, #0]
   db286:	9208      	str	r2, [sp, #32]
   db288:	d003      	beq.n	db292 <pow+0x13a>
   db28a:	4668      	mov	r0, sp
   db28c:	f004 f98a 	bl	df5a4 <matherr>
   db290:	b970      	cbnz	r0, db2b0 <pow+0x158>
   db292:	f7fd f875 	bl	d8380 <__errno>
   db296:	2322      	movs	r3, #34	; 0x22
   db298:	6003      	str	r3, [r0, #0]
   db29a:	e009      	b.n	db2b0 <pow+0x158>
   db29c:	ed9f 7b70 	vldr	d7, [pc, #448]	; db460 <pow+0x308>
   db2a0:	ed8d 7b06 	vstr	d7, [sp, #24]
   db2a4:	4668      	mov	r0, sp
   db2a6:	f004 f97d 	bl	df5a4 <matherr>
   db2aa:	2800      	cmp	r0, #0
   db2ac:	f000 808e 	beq.w	db3cc <pow+0x274>
   db2b0:	9b08      	ldr	r3, [sp, #32]
   db2b2:	b11b      	cbz	r3, db2bc <pow+0x164>
   db2b4:	f7fd f864 	bl	d8380 <__errno>
   db2b8:	9b08      	ldr	r3, [sp, #32]
   db2ba:	6003      	str	r3, [r0, #0]
   db2bc:	ed9d 0b06 	vldr	d0, [sp, #24]
   db2c0:	b00b      	add	sp, #44	; 0x2c
   db2c2:	ecbd 8b02 	vpop	{d8}
   db2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db2ca:	2200      	movs	r2, #0
   db2cc:	2300      	movs	r3, #0
   db2ce:	4620      	mov	r0, r4
   db2d0:	4629      	mov	r1, r5
   db2d2:	f004 feb9 	bl	e0048 <__aeabi_dcmpeq>
   db2d6:	2800      	cmp	r0, #0
   db2d8:	d09d      	beq.n	db216 <pow+0xbe>
   db2da:	ed9f 0b63 	vldr	d0, [pc, #396]	; db468 <pow+0x310>
   db2de:	4b66      	ldr	r3, [pc, #408]	; (db478 <pow+0x320>)
   db2e0:	f8cd b020 	str.w	fp, [sp, #32]
   db2e4:	2201      	movs	r2, #1
   db2e6:	f1b8 0f02 	cmp.w	r8, #2
   db2ea:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db2ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db2f2:	ed8d 0b06 	vstr	d0, [sp, #24]
   db2f6:	e88d 000c 	stmia.w	sp, {r2, r3}
   db2fa:	d1d3      	bne.n	db2a4 <pow+0x14c>
   db2fc:	e78f      	b.n	db21e <pow+0xc6>
   db2fe:	ec47 6b10 	vmov	d0, r6, r7
   db302:	f004 f947 	bl	df594 <finite>
   db306:	2800      	cmp	r0, #0
   db308:	d097      	beq.n	db23a <pow+0xe2>
   db30a:	ec45 4b10 	vmov	d0, r4, r5
   db30e:	f004 f941 	bl	df594 <finite>
   db312:	2800      	cmp	r0, #0
   db314:	d091      	beq.n	db23a <pow+0xe2>
   db316:	ec53 2b18 	vmov	r2, r3, d8
   db31a:	ee18 0a10 	vmov	r0, s16
   db31e:	4619      	mov	r1, r3
   db320:	f004 fec4 	bl	e00ac <__aeabi_dcmpun>
   db324:	2800      	cmp	r0, #0
   db326:	d17c      	bne.n	db422 <pow+0x2ca>
   db328:	2303      	movs	r3, #3
   db32a:	f99a 8000 	ldrsb.w	r8, [sl]
   db32e:	9300      	str	r3, [sp, #0]
   db330:	4b51      	ldr	r3, [pc, #324]	; (db478 <pow+0x320>)
   db332:	9008      	str	r0, [sp, #32]
   db334:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db338:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db33c:	9301      	str	r3, [sp, #4]
   db33e:	f1b8 0f00 	cmp.w	r8, #0
   db342:	d148      	bne.n	db3d6 <pow+0x27e>
   db344:	f8df 9144 	ldr.w	r9, [pc, #324]	; db48c <pow+0x334>
   db348:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   db34c:	2200      	movs	r2, #0
   db34e:	2300      	movs	r3, #0
   db350:	4630      	mov	r0, r6
   db352:	4639      	mov	r1, r7
   db354:	e9cd 8906 	strd	r8, r9, [sp, #24]
   db358:	f004 fe80 	bl	e005c <__aeabi_dcmplt>
   db35c:	2800      	cmp	r0, #0
   db35e:	d094      	beq.n	db28a <pow+0x132>
   db360:	2200      	movs	r2, #0
   db362:	4b46      	ldr	r3, [pc, #280]	; (db47c <pow+0x324>)
   db364:	4620      	mov	r0, r4
   db366:	4629      	mov	r1, r5
   db368:	f004 fc06 	bl	dfb78 <__aeabi_dmul>
   db36c:	4604      	mov	r4, r0
   db36e:	460d      	mov	r5, r1
   db370:	ec45 4b10 	vmov	d0, r4, r5
   db374:	f004 f920 	bl	df5b8 <rint>
   db378:	4620      	mov	r0, r4
   db37a:	ec53 2b10 	vmov	r2, r3, d0
   db37e:	4629      	mov	r1, r5
   db380:	f004 fe62 	bl	e0048 <__aeabi_dcmpeq>
   db384:	2800      	cmp	r0, #0
   db386:	d149      	bne.n	db41c <pow+0x2c4>
   db388:	4b3d      	ldr	r3, [pc, #244]	; (db480 <pow+0x328>)
   db38a:	f99a 8000 	ldrsb.w	r8, [sl]
   db38e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db392:	e9cd 2306 	strd	r2, r3, [sp, #24]
   db396:	f1b8 0f02 	cmp.w	r8, #2
   db39a:	f47f af76 	bne.w	db28a <pow+0x132>
   db39e:	e778      	b.n	db292 <pow+0x13a>
   db3a0:	4a35      	ldr	r2, [pc, #212]	; (db478 <pow+0x320>)
   db3a2:	f99a 3000 	ldrsb.w	r3, [sl]
   db3a6:	f8cd b020 	str.w	fp, [sp, #32]
   db3aa:	2101      	movs	r1, #1
   db3ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db3b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db3b4:	e88d 0006 	stmia.w	sp, {r1, r2}
   db3b8:	2b00      	cmp	r3, #0
   db3ba:	f43f af6f 	beq.w	db29c <pow+0x144>
   db3be:	4931      	ldr	r1, [pc, #196]	; (db484 <pow+0x32c>)
   db3c0:	2000      	movs	r0, #0
   db3c2:	2b02      	cmp	r3, #2
   db3c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   db3c8:	f47f af6c 	bne.w	db2a4 <pow+0x14c>
   db3cc:	f7fc ffd8 	bl	d8380 <__errno>
   db3d0:	2321      	movs	r3, #33	; 0x21
   db3d2:	6003      	str	r3, [r0, #0]
   db3d4:	e76c      	b.n	db2b0 <pow+0x158>
   db3d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; db470 <pow+0x318>
   db3da:	2200      	movs	r2, #0
   db3dc:	2300      	movs	r3, #0
   db3de:	4630      	mov	r0, r6
   db3e0:	4639      	mov	r1, r7
   db3e2:	ed8d 7b06 	vstr	d7, [sp, #24]
   db3e6:	f004 fe39 	bl	e005c <__aeabi_dcmplt>
   db3ea:	2800      	cmp	r0, #0
   db3ec:	d0d3      	beq.n	db396 <pow+0x23e>
   db3ee:	2200      	movs	r2, #0
   db3f0:	4b22      	ldr	r3, [pc, #136]	; (db47c <pow+0x324>)
   db3f2:	4620      	mov	r0, r4
   db3f4:	4629      	mov	r1, r5
   db3f6:	f004 fbbf 	bl	dfb78 <__aeabi_dmul>
   db3fa:	4604      	mov	r4, r0
   db3fc:	460d      	mov	r5, r1
   db3fe:	ec45 4b10 	vmov	d0, r4, r5
   db402:	f004 f8d9 	bl	df5b8 <rint>
   db406:	4620      	mov	r0, r4
   db408:	ec53 2b10 	vmov	r2, r3, d0
   db40c:	4629      	mov	r1, r5
   db40e:	f004 fe1b 	bl	e0048 <__aeabi_dcmpeq>
   db412:	b918      	cbnz	r0, db41c <pow+0x2c4>
   db414:	4b1b      	ldr	r3, [pc, #108]	; (db484 <pow+0x32c>)
   db416:	2200      	movs	r2, #0
   db418:	e9cd 2306 	strd	r2, r3, [sp, #24]
   db41c:	f99a 8000 	ldrsb.w	r8, [sl]
   db420:	e7b9      	b.n	db396 <pow+0x23e>
   db422:	4b15      	ldr	r3, [pc, #84]	; (db478 <pow+0x320>)
   db424:	f99a 9000 	ldrsb.w	r9, [sl]
   db428:	f8cd 8020 	str.w	r8, [sp, #32]
   db42c:	2201      	movs	r2, #1
   db42e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   db432:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db436:	e88d 000c 	stmia.w	sp, {r2, r3}
   db43a:	f1b9 0f00 	cmp.w	r9, #0
   db43e:	f43f af2d 	beq.w	db29c <pow+0x144>
   db442:	2200      	movs	r2, #0
   db444:	2300      	movs	r3, #0
   db446:	4610      	mov	r0, r2
   db448:	4619      	mov	r1, r3
   db44a:	f004 fcbf 	bl	dfdcc <__aeabi_ddiv>
   db44e:	f1b9 0f02 	cmp.w	r9, #2
   db452:	e9cd 0106 	strd	r0, r1, [sp, #24]
   db456:	d0b9      	beq.n	db3cc <pow+0x274>
   db458:	e724      	b.n	db2a4 <pow+0x14c>
   db45a:	bf00      	nop
   db45c:	f3af 8000 	nop.w
	...
   db46c:	3ff00000 	.word	0x3ff00000
   db470:	00000000 	.word	0x00000000
   db474:	7ff00000 	.word	0x7ff00000
   db478:	000e4130 	.word	0x000e4130
   db47c:	3fe00000 	.word	0x3fe00000
   db480:	c7efffff 	.word	0xc7efffff
   db484:	fff00000 	.word	0xfff00000
   db488:	2003db1c 	.word	0x2003db1c
   db48c:	47efffff 	.word	0x47efffff

000db490 <sinh>:
   db490:	b530      	push	{r4, r5, lr}
   db492:	ed2d 8b04 	vpush	{d8-d9}
   db496:	eeb0 9a40 	vmov.f32	s18, s0
   db49a:	eef0 9a60 	vmov.f32	s19, s1
   db49e:	4c2d      	ldr	r4, [pc, #180]	; (db554 <sinh+0xc4>)
   db4a0:	b08b      	sub	sp, #44	; 0x2c
   db4a2:	f002 fc5d 	bl	ddd60 <__ieee754_sinh>
   db4a6:	f994 3000 	ldrsb.w	r3, [r4]
   db4aa:	eeb0 8a40 	vmov.f32	s16, s0
   db4ae:	eef0 8a60 	vmov.f32	s17, s1
   db4b2:	3301      	adds	r3, #1
   db4b4:	d003      	beq.n	db4be <sinh+0x2e>
   db4b6:	f004 f86d 	bl	df594 <finite>
   db4ba:	4605      	mov	r5, r0
   db4bc:	b138      	cbz	r0, db4ce <sinh+0x3e>
   db4be:	eeb0 0a48 	vmov.f32	s0, s16
   db4c2:	eef0 0a68 	vmov.f32	s1, s17
   db4c6:	b00b      	add	sp, #44	; 0x2c
   db4c8:	ecbd 8b04 	vpop	{d8-d9}
   db4cc:	bd30      	pop	{r4, r5, pc}
   db4ce:	eeb0 0a49 	vmov.f32	s0, s18
   db4d2:	eef0 0a69 	vmov.f32	s1, s19
   db4d6:	f004 f85d 	bl	df594 <finite>
   db4da:	2800      	cmp	r0, #0
   db4dc:	d0ef      	beq.n	db4be <sinh+0x2e>
   db4de:	4b1e      	ldr	r3, [pc, #120]	; (db558 <sinh+0xc8>)
   db4e0:	f994 4000 	ldrsb.w	r4, [r4]
   db4e4:	9508      	str	r5, [sp, #32]
   db4e6:	2203      	movs	r2, #3
   db4e8:	e88d 000c 	stmia.w	sp, {r2, r3}
   db4ec:	ed8d 9b04 	vstr	d9, [sp, #16]
   db4f0:	ed8d 9b02 	vstr	d9, [sp, #8]
   db4f4:	2200      	movs	r2, #0
   db4f6:	2300      	movs	r3, #0
   db4f8:	ec51 0b19 	vmov	r0, r1, d9
   db4fc:	b99c      	cbnz	r4, db526 <sinh+0x96>
   db4fe:	f004 fdcb 	bl	e0098 <__aeabi_dcmpgt>
   db502:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db506:	b308      	cbz	r0, db54c <sinh+0xbc>
   db508:	4b14      	ldr	r3, [pc, #80]	; (db55c <sinh+0xcc>)
   db50a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   db50e:	4668      	mov	r0, sp
   db510:	f004 f848 	bl	df5a4 <matherr>
   db514:	b180      	cbz	r0, db538 <sinh+0xa8>
   db516:	9b08      	ldr	r3, [sp, #32]
   db518:	b99b      	cbnz	r3, db542 <sinh+0xb2>
   db51a:	ed9d 0b06 	vldr	d0, [sp, #24]
   db51e:	b00b      	add	sp, #44	; 0x2c
   db520:	ecbd 8b04 	vpop	{d8-d9}
   db524:	bd30      	pop	{r4, r5, pc}
   db526:	f004 fdb7 	bl	e0098 <__aeabi_dcmpgt>
   db52a:	2200      	movs	r2, #0
   db52c:	b180      	cbz	r0, db550 <sinh+0xc0>
   db52e:	4b0c      	ldr	r3, [pc, #48]	; (db560 <sinh+0xd0>)
   db530:	2c02      	cmp	r4, #2
   db532:	e9cd 2306 	strd	r2, r3, [sp, #24]
   db536:	d1ea      	bne.n	db50e <sinh+0x7e>
   db538:	f7fc ff22 	bl	d8380 <__errno>
   db53c:	2322      	movs	r3, #34	; 0x22
   db53e:	6003      	str	r3, [r0, #0]
   db540:	e7e9      	b.n	db516 <sinh+0x86>
   db542:	f7fc ff1d 	bl	d8380 <__errno>
   db546:	9b08      	ldr	r3, [sp, #32]
   db548:	6003      	str	r3, [r0, #0]
   db54a:	e7e6      	b.n	db51a <sinh+0x8a>
   db54c:	4b05      	ldr	r3, [pc, #20]	; (db564 <sinh+0xd4>)
   db54e:	e7dc      	b.n	db50a <sinh+0x7a>
   db550:	4b05      	ldr	r3, [pc, #20]	; (db568 <sinh+0xd8>)
   db552:	e7ed      	b.n	db530 <sinh+0xa0>
   db554:	2003db1c 	.word	0x2003db1c
   db558:	000e4134 	.word	0x000e4134
   db55c:	47efffff 	.word	0x47efffff
   db560:	7ff00000 	.word	0x7ff00000
   db564:	c7efffff 	.word	0xc7efffff
   db568:	fff00000 	.word	0xfff00000

000db56c <sqrt>:
   db56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db570:	ed2d 8b02 	vpush	{d8}
   db574:	b08b      	sub	sp, #44	; 0x2c
   db576:	ec55 4b10 	vmov	r4, r5, d0
   db57a:	f002 fcd5 	bl	ddf28 <__ieee754_sqrt>
   db57e:	4b29      	ldr	r3, [pc, #164]	; (db624 <sqrt+0xb8>)
   db580:	eeb0 8a40 	vmov.f32	s16, s0
   db584:	eef0 8a60 	vmov.f32	s17, s1
   db588:	f993 6000 	ldrsb.w	r6, [r3]
   db58c:	1c73      	adds	r3, r6, #1
   db58e:	d012      	beq.n	db5b6 <sqrt+0x4a>
   db590:	4622      	mov	r2, r4
   db592:	462b      	mov	r3, r5
   db594:	4620      	mov	r0, r4
   db596:	4629      	mov	r1, r5
   db598:	f004 fd88 	bl	e00ac <__aeabi_dcmpun>
   db59c:	4607      	mov	r7, r0
   db59e:	b950      	cbnz	r0, db5b6 <sqrt+0x4a>
   db5a0:	f04f 0800 	mov.w	r8, #0
   db5a4:	f04f 0900 	mov.w	r9, #0
   db5a8:	4620      	mov	r0, r4
   db5aa:	4629      	mov	r1, r5
   db5ac:	4642      	mov	r2, r8
   db5ae:	464b      	mov	r3, r9
   db5b0:	f004 fd54 	bl	e005c <__aeabi_dcmplt>
   db5b4:	b940      	cbnz	r0, db5c8 <sqrt+0x5c>
   db5b6:	eeb0 0a48 	vmov.f32	s0, s16
   db5ba:	eef0 0a68 	vmov.f32	s1, s17
   db5be:	b00b      	add	sp, #44	; 0x2c
   db5c0:	ecbd 8b02 	vpop	{d8}
   db5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db5c8:	4b17      	ldr	r3, [pc, #92]	; (db628 <sqrt+0xbc>)
   db5ca:	9708      	str	r7, [sp, #32]
   db5cc:	2201      	movs	r2, #1
   db5ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
   db5d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   db5d6:	e88d 000c 	stmia.w	sp, {r2, r3}
   db5da:	b1b6      	cbz	r6, db60a <sqrt+0x9e>
   db5dc:	4642      	mov	r2, r8
   db5de:	464b      	mov	r3, r9
   db5e0:	4640      	mov	r0, r8
   db5e2:	4649      	mov	r1, r9
   db5e4:	f004 fbf2 	bl	dfdcc <__aeabi_ddiv>
   db5e8:	2e02      	cmp	r6, #2
   db5ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   db5ee:	d10e      	bne.n	db60e <sqrt+0xa2>
   db5f0:	f7fc fec6 	bl	d8380 <__errno>
   db5f4:	2321      	movs	r3, #33	; 0x21
   db5f6:	6003      	str	r3, [r0, #0]
   db5f8:	9b08      	ldr	r3, [sp, #32]
   db5fa:	b973      	cbnz	r3, db61a <sqrt+0xae>
   db5fc:	ed9d 0b06 	vldr	d0, [sp, #24]
   db600:	b00b      	add	sp, #44	; 0x2c
   db602:	ecbd 8b02 	vpop	{d8}
   db606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db60a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   db60e:	4668      	mov	r0, sp
   db610:	f003 ffc8 	bl	df5a4 <matherr>
   db614:	2800      	cmp	r0, #0
   db616:	d1ef      	bne.n	db5f8 <sqrt+0x8c>
   db618:	e7ea      	b.n	db5f0 <sqrt+0x84>
   db61a:	f7fc feb1 	bl	d8380 <__errno>
   db61e:	9b08      	ldr	r3, [sp, #32]
   db620:	6003      	str	r3, [r0, #0]
   db622:	e7eb      	b.n	db5fc <sqrt+0x90>
   db624:	2003db1c 	.word	0x2003db1c
   db628:	000e413c 	.word	0x000e413c
   db62c:	00000000 	.word	0x00000000

000db630 <__ieee754_acos>:
   db630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db634:	ec55 4b10 	vmov	r4, r5, d0
   db638:	49cd      	ldr	r1, [pc, #820]	; (db970 <__ieee754_acos+0x340>)
   db63a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   db63e:	428b      	cmp	r3, r1
   db640:	dd0d      	ble.n	db65e <__ieee754_acos+0x2e>
   db642:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   db646:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   db64a:	4323      	orrs	r3, r4
   db64c:	f040 80bd 	bne.w	db7ca <__ieee754_acos+0x19a>
   db650:	2d00      	cmp	r5, #0
   db652:	f340 814f 	ble.w	db8f4 <__ieee754_acos+0x2c4>
   db656:	ed9f 0baa 	vldr	d0, [pc, #680]	; db900 <__ieee754_acos+0x2d0>
   db65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db65e:	49c5      	ldr	r1, [pc, #788]	; (db974 <__ieee754_acos+0x344>)
   db660:	428b      	cmp	r3, r1
   db662:	f340 80ab 	ble.w	db7bc <__ieee754_acos+0x18c>
   db666:	2d00      	cmp	r5, #0
   db668:	f2c0 818c 	blt.w	db984 <__ieee754_acos+0x354>
   db66c:	ee10 2a10 	vmov	r2, s0
   db670:	462b      	mov	r3, r5
   db672:	2000      	movs	r0, #0
   db674:	49c0      	ldr	r1, [pc, #768]	; (db978 <__ieee754_acos+0x348>)
   db676:	f004 f8cb 	bl	df810 <__aeabi_dsub>
   db67a:	2200      	movs	r2, #0
   db67c:	4bbf      	ldr	r3, [pc, #764]	; (db97c <__ieee754_acos+0x34c>)
   db67e:	f004 fa7b 	bl	dfb78 <__aeabi_dmul>
   db682:	4604      	mov	r4, r0
   db684:	460d      	mov	r5, r1
   db686:	ec45 4b10 	vmov	d0, r4, r5
   db68a:	f002 fc4d 	bl	ddf28 <__ieee754_sqrt>
   db68e:	4620      	mov	r0, r4
   db690:	4629      	mov	r1, r5
   db692:	a39d      	add	r3, pc, #628	; (adr r3, db908 <__ieee754_acos+0x2d8>)
   db694:	e9d3 2300 	ldrd	r2, r3, [r3]
   db698:	ec59 8b10 	vmov	r8, r9, d0
   db69c:	f004 fa6c 	bl	dfb78 <__aeabi_dmul>
   db6a0:	a39b      	add	r3, pc, #620	; (adr r3, db910 <__ieee754_acos+0x2e0>)
   db6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6a6:	f004 f8b5 	bl	df814 <__adddf3>
   db6aa:	4622      	mov	r2, r4
   db6ac:	462b      	mov	r3, r5
   db6ae:	f004 fa63 	bl	dfb78 <__aeabi_dmul>
   db6b2:	a399      	add	r3, pc, #612	; (adr r3, db918 <__ieee754_acos+0x2e8>)
   db6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6b8:	f004 f8aa 	bl	df810 <__aeabi_dsub>
   db6bc:	4622      	mov	r2, r4
   db6be:	462b      	mov	r3, r5
   db6c0:	f004 fa5a 	bl	dfb78 <__aeabi_dmul>
   db6c4:	a396      	add	r3, pc, #600	; (adr r3, db920 <__ieee754_acos+0x2f0>)
   db6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6ca:	f004 f8a3 	bl	df814 <__adddf3>
   db6ce:	4622      	mov	r2, r4
   db6d0:	462b      	mov	r3, r5
   db6d2:	f004 fa51 	bl	dfb78 <__aeabi_dmul>
   db6d6:	a394      	add	r3, pc, #592	; (adr r3, db928 <__ieee754_acos+0x2f8>)
   db6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6dc:	f004 f898 	bl	df810 <__aeabi_dsub>
   db6e0:	4622      	mov	r2, r4
   db6e2:	462b      	mov	r3, r5
   db6e4:	f004 fa48 	bl	dfb78 <__aeabi_dmul>
   db6e8:	a391      	add	r3, pc, #580	; (adr r3, db930 <__ieee754_acos+0x300>)
   db6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6ee:	f004 f891 	bl	df814 <__adddf3>
   db6f2:	4622      	mov	r2, r4
   db6f4:	462b      	mov	r3, r5
   db6f6:	f004 fa3f 	bl	dfb78 <__aeabi_dmul>
   db6fa:	a38f      	add	r3, pc, #572	; (adr r3, db938 <__ieee754_acos+0x308>)
   db6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   db700:	4682      	mov	sl, r0
   db702:	468b      	mov	fp, r1
   db704:	4620      	mov	r0, r4
   db706:	4629      	mov	r1, r5
   db708:	f004 fa36 	bl	dfb78 <__aeabi_dmul>
   db70c:	a38c      	add	r3, pc, #560	; (adr r3, db940 <__ieee754_acos+0x310>)
   db70e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db712:	f004 f87d 	bl	df810 <__aeabi_dsub>
   db716:	4622      	mov	r2, r4
   db718:	462b      	mov	r3, r5
   db71a:	f004 fa2d 	bl	dfb78 <__aeabi_dmul>
   db71e:	a38a      	add	r3, pc, #552	; (adr r3, db948 <__ieee754_acos+0x318>)
   db720:	e9d3 2300 	ldrd	r2, r3, [r3]
   db724:	f004 f876 	bl	df814 <__adddf3>
   db728:	4622      	mov	r2, r4
   db72a:	462b      	mov	r3, r5
   db72c:	f004 fa24 	bl	dfb78 <__aeabi_dmul>
   db730:	a387      	add	r3, pc, #540	; (adr r3, db950 <__ieee754_acos+0x320>)
   db732:	e9d3 2300 	ldrd	r2, r3, [r3]
   db736:	f004 f86b 	bl	df810 <__aeabi_dsub>
   db73a:	4622      	mov	r2, r4
   db73c:	462b      	mov	r3, r5
   db73e:	f004 fa1b 	bl	dfb78 <__aeabi_dmul>
   db742:	2200      	movs	r2, #0
   db744:	4b8c      	ldr	r3, [pc, #560]	; (db978 <__ieee754_acos+0x348>)
   db746:	f004 f865 	bl	df814 <__adddf3>
   db74a:	4602      	mov	r2, r0
   db74c:	460b      	mov	r3, r1
   db74e:	4650      	mov	r0, sl
   db750:	4659      	mov	r1, fp
   db752:	f004 fb3b 	bl	dfdcc <__aeabi_ddiv>
   db756:	4642      	mov	r2, r8
   db758:	464b      	mov	r3, r9
   db75a:	f004 fa0d 	bl	dfb78 <__aeabi_dmul>
   db75e:	2600      	movs	r6, #0
   db760:	4682      	mov	sl, r0
   db762:	468b      	mov	fp, r1
   db764:	4632      	mov	r2, r6
   db766:	464b      	mov	r3, r9
   db768:	4630      	mov	r0, r6
   db76a:	4649      	mov	r1, r9
   db76c:	f004 fa04 	bl	dfb78 <__aeabi_dmul>
   db770:	4602      	mov	r2, r0
   db772:	460b      	mov	r3, r1
   db774:	4620      	mov	r0, r4
   db776:	4629      	mov	r1, r5
   db778:	f004 f84a 	bl	df810 <__aeabi_dsub>
   db77c:	4632      	mov	r2, r6
   db77e:	4604      	mov	r4, r0
   db780:	460d      	mov	r5, r1
   db782:	464b      	mov	r3, r9
   db784:	4640      	mov	r0, r8
   db786:	4649      	mov	r1, r9
   db788:	f004 f844 	bl	df814 <__adddf3>
   db78c:	4602      	mov	r2, r0
   db78e:	460b      	mov	r3, r1
   db790:	4620      	mov	r0, r4
   db792:	4629      	mov	r1, r5
   db794:	f004 fb1a 	bl	dfdcc <__aeabi_ddiv>
   db798:	4602      	mov	r2, r0
   db79a:	460b      	mov	r3, r1
   db79c:	4650      	mov	r0, sl
   db79e:	4659      	mov	r1, fp
   db7a0:	f004 f838 	bl	df814 <__adddf3>
   db7a4:	4632      	mov	r2, r6
   db7a6:	464b      	mov	r3, r9
   db7a8:	f004 f834 	bl	df814 <__adddf3>
   db7ac:	4602      	mov	r2, r0
   db7ae:	460b      	mov	r3, r1
   db7b0:	f004 f830 	bl	df814 <__adddf3>
   db7b4:	ec41 0b10 	vmov	d0, r0, r1
   db7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db7bc:	4a70      	ldr	r2, [pc, #448]	; (db980 <__ieee754_acos+0x350>)
   db7be:	4293      	cmp	r3, r2
   db7c0:	dc12      	bgt.n	db7e8 <__ieee754_acos+0x1b8>
   db7c2:	ed9f 0b65 	vldr	d0, [pc, #404]	; db958 <__ieee754_acos+0x328>
   db7c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db7ca:	ee10 2a10 	vmov	r2, s0
   db7ce:	462b      	mov	r3, r5
   db7d0:	4620      	mov	r0, r4
   db7d2:	4629      	mov	r1, r5
   db7d4:	f004 f81c 	bl	df810 <__aeabi_dsub>
   db7d8:	4602      	mov	r2, r0
   db7da:	460b      	mov	r3, r1
   db7dc:	f004 faf6 	bl	dfdcc <__aeabi_ddiv>
   db7e0:	ec41 0b10 	vmov	d0, r0, r1
   db7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db7e8:	ee10 2a10 	vmov	r2, s0
   db7ec:	ee10 0a10 	vmov	r0, s0
   db7f0:	462b      	mov	r3, r5
   db7f2:	4629      	mov	r1, r5
   db7f4:	f004 f9c0 	bl	dfb78 <__aeabi_dmul>
   db7f8:	a343      	add	r3, pc, #268	; (adr r3, db908 <__ieee754_acos+0x2d8>)
   db7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   db7fe:	4606      	mov	r6, r0
   db800:	460f      	mov	r7, r1
   db802:	f004 f9b9 	bl	dfb78 <__aeabi_dmul>
   db806:	a342      	add	r3, pc, #264	; (adr r3, db910 <__ieee754_acos+0x2e0>)
   db808:	e9d3 2300 	ldrd	r2, r3, [r3]
   db80c:	f004 f802 	bl	df814 <__adddf3>
   db810:	4632      	mov	r2, r6
   db812:	463b      	mov	r3, r7
   db814:	f004 f9b0 	bl	dfb78 <__aeabi_dmul>
   db818:	a33f      	add	r3, pc, #252	; (adr r3, db918 <__ieee754_acos+0x2e8>)
   db81a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db81e:	f003 fff7 	bl	df810 <__aeabi_dsub>
   db822:	4632      	mov	r2, r6
   db824:	463b      	mov	r3, r7
   db826:	f004 f9a7 	bl	dfb78 <__aeabi_dmul>
   db82a:	a33d      	add	r3, pc, #244	; (adr r3, db920 <__ieee754_acos+0x2f0>)
   db82c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db830:	f003 fff0 	bl	df814 <__adddf3>
   db834:	4632      	mov	r2, r6
   db836:	463b      	mov	r3, r7
   db838:	f004 f99e 	bl	dfb78 <__aeabi_dmul>
   db83c:	a33a      	add	r3, pc, #232	; (adr r3, db928 <__ieee754_acos+0x2f8>)
   db83e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db842:	f003 ffe5 	bl	df810 <__aeabi_dsub>
   db846:	4632      	mov	r2, r6
   db848:	463b      	mov	r3, r7
   db84a:	f004 f995 	bl	dfb78 <__aeabi_dmul>
   db84e:	a338      	add	r3, pc, #224	; (adr r3, db930 <__ieee754_acos+0x300>)
   db850:	e9d3 2300 	ldrd	r2, r3, [r3]
   db854:	f003 ffde 	bl	df814 <__adddf3>
   db858:	4632      	mov	r2, r6
   db85a:	463b      	mov	r3, r7
   db85c:	f004 f98c 	bl	dfb78 <__aeabi_dmul>
   db860:	a335      	add	r3, pc, #212	; (adr r3, db938 <__ieee754_acos+0x308>)
   db862:	e9d3 2300 	ldrd	r2, r3, [r3]
   db866:	4680      	mov	r8, r0
   db868:	4689      	mov	r9, r1
   db86a:	4630      	mov	r0, r6
   db86c:	4639      	mov	r1, r7
   db86e:	f004 f983 	bl	dfb78 <__aeabi_dmul>
   db872:	a333      	add	r3, pc, #204	; (adr r3, db940 <__ieee754_acos+0x310>)
   db874:	e9d3 2300 	ldrd	r2, r3, [r3]
   db878:	f003 ffca 	bl	df810 <__aeabi_dsub>
   db87c:	4632      	mov	r2, r6
   db87e:	463b      	mov	r3, r7
   db880:	f004 f97a 	bl	dfb78 <__aeabi_dmul>
   db884:	a330      	add	r3, pc, #192	; (adr r3, db948 <__ieee754_acos+0x318>)
   db886:	e9d3 2300 	ldrd	r2, r3, [r3]
   db88a:	f003 ffc3 	bl	df814 <__adddf3>
   db88e:	4632      	mov	r2, r6
   db890:	463b      	mov	r3, r7
   db892:	f004 f971 	bl	dfb78 <__aeabi_dmul>
   db896:	a32e      	add	r3, pc, #184	; (adr r3, db950 <__ieee754_acos+0x320>)
   db898:	e9d3 2300 	ldrd	r2, r3, [r3]
   db89c:	f003 ffb8 	bl	df810 <__aeabi_dsub>
   db8a0:	4632      	mov	r2, r6
   db8a2:	463b      	mov	r3, r7
   db8a4:	f004 f968 	bl	dfb78 <__aeabi_dmul>
   db8a8:	2200      	movs	r2, #0
   db8aa:	4b33      	ldr	r3, [pc, #204]	; (db978 <__ieee754_acos+0x348>)
   db8ac:	f003 ffb2 	bl	df814 <__adddf3>
   db8b0:	4602      	mov	r2, r0
   db8b2:	460b      	mov	r3, r1
   db8b4:	4640      	mov	r0, r8
   db8b6:	4649      	mov	r1, r9
   db8b8:	f004 fa88 	bl	dfdcc <__aeabi_ddiv>
   db8bc:	4622      	mov	r2, r4
   db8be:	462b      	mov	r3, r5
   db8c0:	f004 f95a 	bl	dfb78 <__aeabi_dmul>
   db8c4:	4602      	mov	r2, r0
   db8c6:	460b      	mov	r3, r1
   db8c8:	a125      	add	r1, pc, #148	; (adr r1, db960 <__ieee754_acos+0x330>)
   db8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
   db8ce:	f003 ff9f 	bl	df810 <__aeabi_dsub>
   db8d2:	4602      	mov	r2, r0
   db8d4:	460b      	mov	r3, r1
   db8d6:	4620      	mov	r0, r4
   db8d8:	4629      	mov	r1, r5
   db8da:	f003 ff99 	bl	df810 <__aeabi_dsub>
   db8de:	4602      	mov	r2, r0
   db8e0:	460b      	mov	r3, r1
   db8e2:	a11d      	add	r1, pc, #116	; (adr r1, db958 <__ieee754_acos+0x328>)
   db8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   db8e8:	f003 ff92 	bl	df810 <__aeabi_dsub>
   db8ec:	ec41 0b10 	vmov	d0, r0, r1
   db8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db8f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; db968 <__ieee754_acos+0x338>
   db8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db8fc:	f3af 8000 	nop.w
	...
   db908:	0dfdf709 	.word	0x0dfdf709
   db90c:	3f023de1 	.word	0x3f023de1
   db910:	7501b288 	.word	0x7501b288
   db914:	3f49efe0 	.word	0x3f49efe0
   db918:	b5688f3b 	.word	0xb5688f3b
   db91c:	3fa48228 	.word	0x3fa48228
   db920:	0e884455 	.word	0x0e884455
   db924:	3fc9c155 	.word	0x3fc9c155
   db928:	03eb6f7d 	.word	0x03eb6f7d
   db92c:	3fd4d612 	.word	0x3fd4d612
   db930:	55555555 	.word	0x55555555
   db934:	3fc55555 	.word	0x3fc55555
   db938:	b12e9282 	.word	0xb12e9282
   db93c:	3fb3b8c5 	.word	0x3fb3b8c5
   db940:	1b8d0159 	.word	0x1b8d0159
   db944:	3fe6066c 	.word	0x3fe6066c
   db948:	9c598ac8 	.word	0x9c598ac8
   db94c:	40002ae5 	.word	0x40002ae5
   db950:	1c8a2d4b 	.word	0x1c8a2d4b
   db954:	40033a27 	.word	0x40033a27
   db958:	54442d18 	.word	0x54442d18
   db95c:	3ff921fb 	.word	0x3ff921fb
   db960:	33145c07 	.word	0x33145c07
   db964:	3c91a626 	.word	0x3c91a626
   db968:	54442d18 	.word	0x54442d18
   db96c:	400921fb 	.word	0x400921fb
   db970:	3fefffff 	.word	0x3fefffff
   db974:	3fdfffff 	.word	0x3fdfffff
   db978:	3ff00000 	.word	0x3ff00000
   db97c:	3fe00000 	.word	0x3fe00000
   db980:	3c600000 	.word	0x3c600000
   db984:	ee10 0a10 	vmov	r0, s0
   db988:	4629      	mov	r1, r5
   db98a:	2200      	movs	r2, #0
   db98c:	4b5e      	ldr	r3, [pc, #376]	; (dbb08 <__ieee754_acos+0x4d8>)
   db98e:	f003 ff41 	bl	df814 <__adddf3>
   db992:	2200      	movs	r2, #0
   db994:	4b5d      	ldr	r3, [pc, #372]	; (dbb0c <__ieee754_acos+0x4dc>)
   db996:	f004 f8ef 	bl	dfb78 <__aeabi_dmul>
   db99a:	a343      	add	r3, pc, #268	; (adr r3, dbaa8 <__ieee754_acos+0x478>)
   db99c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9a0:	4604      	mov	r4, r0
   db9a2:	460d      	mov	r5, r1
   db9a4:	f004 f8e8 	bl	dfb78 <__aeabi_dmul>
   db9a8:	a341      	add	r3, pc, #260	; (adr r3, dbab0 <__ieee754_acos+0x480>)
   db9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9ae:	f003 ff31 	bl	df814 <__adddf3>
   db9b2:	4622      	mov	r2, r4
   db9b4:	462b      	mov	r3, r5
   db9b6:	f004 f8df 	bl	dfb78 <__aeabi_dmul>
   db9ba:	a33f      	add	r3, pc, #252	; (adr r3, dbab8 <__ieee754_acos+0x488>)
   db9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9c0:	f003 ff26 	bl	df810 <__aeabi_dsub>
   db9c4:	4622      	mov	r2, r4
   db9c6:	462b      	mov	r3, r5
   db9c8:	f004 f8d6 	bl	dfb78 <__aeabi_dmul>
   db9cc:	a33c      	add	r3, pc, #240	; (adr r3, dbac0 <__ieee754_acos+0x490>)
   db9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9d2:	f003 ff1f 	bl	df814 <__adddf3>
   db9d6:	4622      	mov	r2, r4
   db9d8:	462b      	mov	r3, r5
   db9da:	f004 f8cd 	bl	dfb78 <__aeabi_dmul>
   db9de:	a33a      	add	r3, pc, #232	; (adr r3, dbac8 <__ieee754_acos+0x498>)
   db9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9e4:	f003 ff14 	bl	df810 <__aeabi_dsub>
   db9e8:	4622      	mov	r2, r4
   db9ea:	462b      	mov	r3, r5
   db9ec:	f004 f8c4 	bl	dfb78 <__aeabi_dmul>
   db9f0:	a337      	add	r3, pc, #220	; (adr r3, dbad0 <__ieee754_acos+0x4a0>)
   db9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9f6:	f003 ff0d 	bl	df814 <__adddf3>
   db9fa:	4622      	mov	r2, r4
   db9fc:	462b      	mov	r3, r5
   db9fe:	f004 f8bb 	bl	dfb78 <__aeabi_dmul>
   dba02:	ec45 4b10 	vmov	d0, r4, r5
   dba06:	4680      	mov	r8, r0
   dba08:	4689      	mov	r9, r1
   dba0a:	f002 fa8d 	bl	ddf28 <__ieee754_sqrt>
   dba0e:	4620      	mov	r0, r4
   dba10:	4629      	mov	r1, r5
   dba12:	a331      	add	r3, pc, #196	; (adr r3, dbad8 <__ieee754_acos+0x4a8>)
   dba14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba18:	ec57 6b10 	vmov	r6, r7, d0
   dba1c:	f004 f8ac 	bl	dfb78 <__aeabi_dmul>
   dba20:	a32f      	add	r3, pc, #188	; (adr r3, dbae0 <__ieee754_acos+0x4b0>)
   dba22:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba26:	f003 fef3 	bl	df810 <__aeabi_dsub>
   dba2a:	4622      	mov	r2, r4
   dba2c:	462b      	mov	r3, r5
   dba2e:	f004 f8a3 	bl	dfb78 <__aeabi_dmul>
   dba32:	a32d      	add	r3, pc, #180	; (adr r3, dbae8 <__ieee754_acos+0x4b8>)
   dba34:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba38:	f003 feec 	bl	df814 <__adddf3>
   dba3c:	4622      	mov	r2, r4
   dba3e:	462b      	mov	r3, r5
   dba40:	f004 f89a 	bl	dfb78 <__aeabi_dmul>
   dba44:	a32a      	add	r3, pc, #168	; (adr r3, dbaf0 <__ieee754_acos+0x4c0>)
   dba46:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba4a:	f003 fee1 	bl	df810 <__aeabi_dsub>
   dba4e:	4622      	mov	r2, r4
   dba50:	462b      	mov	r3, r5
   dba52:	f004 f891 	bl	dfb78 <__aeabi_dmul>
   dba56:	2200      	movs	r2, #0
   dba58:	4b2b      	ldr	r3, [pc, #172]	; (dbb08 <__ieee754_acos+0x4d8>)
   dba5a:	f003 fedb 	bl	df814 <__adddf3>
   dba5e:	4602      	mov	r2, r0
   dba60:	460b      	mov	r3, r1
   dba62:	4640      	mov	r0, r8
   dba64:	4649      	mov	r1, r9
   dba66:	f004 f9b1 	bl	dfdcc <__aeabi_ddiv>
   dba6a:	4632      	mov	r2, r6
   dba6c:	463b      	mov	r3, r7
   dba6e:	f004 f883 	bl	dfb78 <__aeabi_dmul>
   dba72:	a321      	add	r3, pc, #132	; (adr r3, dbaf8 <__ieee754_acos+0x4c8>)
   dba74:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba78:	f003 feca 	bl	df810 <__aeabi_dsub>
   dba7c:	4632      	mov	r2, r6
   dba7e:	463b      	mov	r3, r7
   dba80:	f003 fec8 	bl	df814 <__adddf3>
   dba84:	4602      	mov	r2, r0
   dba86:	460b      	mov	r3, r1
   dba88:	f003 fec4 	bl	df814 <__adddf3>
   dba8c:	4602      	mov	r2, r0
   dba8e:	460b      	mov	r3, r1
   dba90:	a11b      	add	r1, pc, #108	; (adr r1, dbb00 <__ieee754_acos+0x4d0>)
   dba92:	e9d1 0100 	ldrd	r0, r1, [r1]
   dba96:	f003 febb 	bl	df810 <__aeabi_dsub>
   dba9a:	ec41 0b10 	vmov	d0, r0, r1
   dba9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbaa2:	bf00      	nop
   dbaa4:	f3af 8000 	nop.w
   dbaa8:	0dfdf709 	.word	0x0dfdf709
   dbaac:	3f023de1 	.word	0x3f023de1
   dbab0:	7501b288 	.word	0x7501b288
   dbab4:	3f49efe0 	.word	0x3f49efe0
   dbab8:	b5688f3b 	.word	0xb5688f3b
   dbabc:	3fa48228 	.word	0x3fa48228
   dbac0:	0e884455 	.word	0x0e884455
   dbac4:	3fc9c155 	.word	0x3fc9c155
   dbac8:	03eb6f7d 	.word	0x03eb6f7d
   dbacc:	3fd4d612 	.word	0x3fd4d612
   dbad0:	55555555 	.word	0x55555555
   dbad4:	3fc55555 	.word	0x3fc55555
   dbad8:	b12e9282 	.word	0xb12e9282
   dbadc:	3fb3b8c5 	.word	0x3fb3b8c5
   dbae0:	1b8d0159 	.word	0x1b8d0159
   dbae4:	3fe6066c 	.word	0x3fe6066c
   dbae8:	9c598ac8 	.word	0x9c598ac8
   dbaec:	40002ae5 	.word	0x40002ae5
   dbaf0:	1c8a2d4b 	.word	0x1c8a2d4b
   dbaf4:	40033a27 	.word	0x40033a27
   dbaf8:	33145c07 	.word	0x33145c07
   dbafc:	3c91a626 	.word	0x3c91a626
   dbb00:	54442d18 	.word	0x54442d18
   dbb04:	400921fb 	.word	0x400921fb
   dbb08:	3ff00000 	.word	0x3ff00000
   dbb0c:	3fe00000 	.word	0x3fe00000

000dbb10 <__ieee754_asin>:
   dbb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb14:	ec57 6b10 	vmov	r6, r7, d0
   dbb18:	4bcb      	ldr	r3, [pc, #812]	; (dbe48 <__ieee754_asin+0x338>)
   dbb1a:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   dbb1e:	429d      	cmp	r5, r3
   dbb20:	b083      	sub	sp, #12
   dbb22:	dd17      	ble.n	dbb54 <__ieee754_asin+0x44>
   dbb24:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   dbb28:	ee10 3a10 	vmov	r3, s0
   dbb2c:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   dbb30:	432b      	orrs	r3, r5
   dbb32:	d02b      	beq.n	dbb8c <__ieee754_asin+0x7c>
   dbb34:	ee10 2a10 	vmov	r2, s0
   dbb38:	463b      	mov	r3, r7
   dbb3a:	4630      	mov	r0, r6
   dbb3c:	4639      	mov	r1, r7
   dbb3e:	f003 fe67 	bl	df810 <__aeabi_dsub>
   dbb42:	4602      	mov	r2, r0
   dbb44:	460b      	mov	r3, r1
   dbb46:	f004 f941 	bl	dfdcc <__aeabi_ddiv>
   dbb4a:	ec41 0b10 	vmov	d0, r0, r1
   dbb4e:	b003      	add	sp, #12
   dbb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbb54:	4bbd      	ldr	r3, [pc, #756]	; (dbe4c <__ieee754_asin+0x33c>)
   dbb56:	429d      	cmp	r5, r3
   dbb58:	463c      	mov	r4, r7
   dbb5a:	dc33      	bgt.n	dbbc4 <__ieee754_asin+0xb4>
   dbb5c:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   dbb60:	f280 817c 	bge.w	dbe5c <__ieee754_asin+0x34c>
   dbb64:	a39c      	add	r3, pc, #624	; (adr r3, dbdd8 <__ieee754_asin+0x2c8>)
   dbb66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb6a:	ee10 0a10 	vmov	r0, s0
   dbb6e:	4639      	mov	r1, r7
   dbb70:	f003 fe50 	bl	df814 <__adddf3>
   dbb74:	2200      	movs	r2, #0
   dbb76:	4bb6      	ldr	r3, [pc, #728]	; (dbe50 <__ieee754_asin+0x340>)
   dbb78:	f004 fa8e 	bl	e0098 <__aeabi_dcmpgt>
   dbb7c:	b310      	cbz	r0, dbbc4 <__ieee754_asin+0xb4>
   dbb7e:	4630      	mov	r0, r6
   dbb80:	4639      	mov	r1, r7
   dbb82:	ec41 0b10 	vmov	d0, r0, r1
   dbb86:	b003      	add	sp, #12
   dbb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbb8c:	ee10 0a10 	vmov	r0, s0
   dbb90:	a393      	add	r3, pc, #588	; (adr r3, dbde0 <__ieee754_asin+0x2d0>)
   dbb92:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbb96:	4639      	mov	r1, r7
   dbb98:	f003 ffee 	bl	dfb78 <__aeabi_dmul>
   dbb9c:	a392      	add	r3, pc, #584	; (adr r3, dbde8 <__ieee754_asin+0x2d8>)
   dbb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbba2:	4604      	mov	r4, r0
   dbba4:	460d      	mov	r5, r1
   dbba6:	4630      	mov	r0, r6
   dbba8:	4639      	mov	r1, r7
   dbbaa:	f003 ffe5 	bl	dfb78 <__aeabi_dmul>
   dbbae:	4602      	mov	r2, r0
   dbbb0:	460b      	mov	r3, r1
   dbbb2:	4620      	mov	r0, r4
   dbbb4:	4629      	mov	r1, r5
   dbbb6:	f003 fe2d 	bl	df814 <__adddf3>
   dbbba:	ec41 0b10 	vmov	d0, r0, r1
   dbbbe:	b003      	add	sp, #12
   dbbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbbc4:	ec47 6b10 	vmov	d0, r6, r7
   dbbc8:	f7fe fdce 	bl	da768 <fabs>
   dbbcc:	2000      	movs	r0, #0
   dbbce:	ec53 2b10 	vmov	r2, r3, d0
   dbbd2:	499f      	ldr	r1, [pc, #636]	; (dbe50 <__ieee754_asin+0x340>)
   dbbd4:	f003 fe1c 	bl	df810 <__aeabi_dsub>
   dbbd8:	2200      	movs	r2, #0
   dbbda:	4b9e      	ldr	r3, [pc, #632]	; (dbe54 <__ieee754_asin+0x344>)
   dbbdc:	f003 ffcc 	bl	dfb78 <__aeabi_dmul>
   dbbe0:	a383      	add	r3, pc, #524	; (adr r3, dbdf0 <__ieee754_asin+0x2e0>)
   dbbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbe6:	4606      	mov	r6, r0
   dbbe8:	460f      	mov	r7, r1
   dbbea:	f003 ffc5 	bl	dfb78 <__aeabi_dmul>
   dbbee:	a382      	add	r3, pc, #520	; (adr r3, dbdf8 <__ieee754_asin+0x2e8>)
   dbbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbf4:	f003 fe0e 	bl	df814 <__adddf3>
   dbbf8:	4632      	mov	r2, r6
   dbbfa:	463b      	mov	r3, r7
   dbbfc:	f003 ffbc 	bl	dfb78 <__aeabi_dmul>
   dbc00:	a37f      	add	r3, pc, #508	; (adr r3, dbe00 <__ieee754_asin+0x2f0>)
   dbc02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc06:	f003 fe03 	bl	df810 <__aeabi_dsub>
   dbc0a:	4632      	mov	r2, r6
   dbc0c:	463b      	mov	r3, r7
   dbc0e:	f003 ffb3 	bl	dfb78 <__aeabi_dmul>
   dbc12:	a37d      	add	r3, pc, #500	; (adr r3, dbe08 <__ieee754_asin+0x2f8>)
   dbc14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc18:	f003 fdfc 	bl	df814 <__adddf3>
   dbc1c:	4632      	mov	r2, r6
   dbc1e:	463b      	mov	r3, r7
   dbc20:	f003 ffaa 	bl	dfb78 <__aeabi_dmul>
   dbc24:	a37a      	add	r3, pc, #488	; (adr r3, dbe10 <__ieee754_asin+0x300>)
   dbc26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc2a:	f003 fdf1 	bl	df810 <__aeabi_dsub>
   dbc2e:	4632      	mov	r2, r6
   dbc30:	463b      	mov	r3, r7
   dbc32:	f003 ffa1 	bl	dfb78 <__aeabi_dmul>
   dbc36:	a378      	add	r3, pc, #480	; (adr r3, dbe18 <__ieee754_asin+0x308>)
   dbc38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc3c:	f003 fdea 	bl	df814 <__adddf3>
   dbc40:	4632      	mov	r2, r6
   dbc42:	463b      	mov	r3, r7
   dbc44:	f003 ff98 	bl	dfb78 <__aeabi_dmul>
   dbc48:	a375      	add	r3, pc, #468	; (adr r3, dbe20 <__ieee754_asin+0x310>)
   dbc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc4e:	4680      	mov	r8, r0
   dbc50:	4689      	mov	r9, r1
   dbc52:	4630      	mov	r0, r6
   dbc54:	4639      	mov	r1, r7
   dbc56:	f003 ff8f 	bl	dfb78 <__aeabi_dmul>
   dbc5a:	a373      	add	r3, pc, #460	; (adr r3, dbe28 <__ieee754_asin+0x318>)
   dbc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc60:	f003 fdd6 	bl	df810 <__aeabi_dsub>
   dbc64:	4632      	mov	r2, r6
   dbc66:	463b      	mov	r3, r7
   dbc68:	f003 ff86 	bl	dfb78 <__aeabi_dmul>
   dbc6c:	a370      	add	r3, pc, #448	; (adr r3, dbe30 <__ieee754_asin+0x320>)
   dbc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc72:	f003 fdcf 	bl	df814 <__adddf3>
   dbc76:	4632      	mov	r2, r6
   dbc78:	463b      	mov	r3, r7
   dbc7a:	f003 ff7d 	bl	dfb78 <__aeabi_dmul>
   dbc7e:	a36e      	add	r3, pc, #440	; (adr r3, dbe38 <__ieee754_asin+0x328>)
   dbc80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc84:	f003 fdc4 	bl	df810 <__aeabi_dsub>
   dbc88:	4632      	mov	r2, r6
   dbc8a:	463b      	mov	r3, r7
   dbc8c:	f003 ff74 	bl	dfb78 <__aeabi_dmul>
   dbc90:	4b6f      	ldr	r3, [pc, #444]	; (dbe50 <__ieee754_asin+0x340>)
   dbc92:	2200      	movs	r2, #0
   dbc94:	f003 fdbe 	bl	df814 <__adddf3>
   dbc98:	ec47 6b10 	vmov	d0, r6, r7
   dbc9c:	e9cd 0100 	strd	r0, r1, [sp]
   dbca0:	f002 f942 	bl	ddf28 <__ieee754_sqrt>
   dbca4:	4b6c      	ldr	r3, [pc, #432]	; (dbe58 <__ieee754_asin+0x348>)
   dbca6:	429d      	cmp	r5, r3
   dbca8:	ec5b ab10 	vmov	sl, fp, d0
   dbcac:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbcb0:	dc6e      	bgt.n	dbd90 <__ieee754_asin+0x280>
   dbcb2:	4602      	mov	r2, r0
   dbcb4:	460b      	mov	r3, r1
   dbcb6:	4640      	mov	r0, r8
   dbcb8:	4649      	mov	r1, r9
   dbcba:	2500      	movs	r5, #0
   dbcbc:	e9cd ab00 	strd	sl, fp, [sp]
   dbcc0:	9500      	str	r5, [sp, #0]
   dbcc2:	f004 f883 	bl	dfdcc <__aeabi_ddiv>
   dbcc6:	e9dd 8900 	ldrd	r8, r9, [sp]
   dbcca:	4652      	mov	r2, sl
   dbccc:	e9cd 0100 	strd	r0, r1, [sp]
   dbcd0:	465b      	mov	r3, fp
   dbcd2:	4650      	mov	r0, sl
   dbcd4:	4659      	mov	r1, fp
   dbcd6:	f003 fd9d 	bl	df814 <__adddf3>
   dbcda:	4602      	mov	r2, r0
   dbcdc:	460b      	mov	r3, r1
   dbcde:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbce2:	f003 ff49 	bl	dfb78 <__aeabi_dmul>
   dbce6:	4642      	mov	r2, r8
   dbce8:	e9cd 0100 	strd	r0, r1, [sp]
   dbcec:	464b      	mov	r3, r9
   dbcee:	4640      	mov	r0, r8
   dbcf0:	4649      	mov	r1, r9
   dbcf2:	f003 ff41 	bl	dfb78 <__aeabi_dmul>
   dbcf6:	4602      	mov	r2, r0
   dbcf8:	460b      	mov	r3, r1
   dbcfa:	4630      	mov	r0, r6
   dbcfc:	4639      	mov	r1, r7
   dbcfe:	f003 fd87 	bl	df810 <__aeabi_dsub>
   dbd02:	4642      	mov	r2, r8
   dbd04:	4606      	mov	r6, r0
   dbd06:	460f      	mov	r7, r1
   dbd08:	464b      	mov	r3, r9
   dbd0a:	4650      	mov	r0, sl
   dbd0c:	4659      	mov	r1, fp
   dbd0e:	f003 fd81 	bl	df814 <__adddf3>
   dbd12:	4602      	mov	r2, r0
   dbd14:	460b      	mov	r3, r1
   dbd16:	4630      	mov	r0, r6
   dbd18:	4639      	mov	r1, r7
   dbd1a:	f004 f857 	bl	dfdcc <__aeabi_ddiv>
   dbd1e:	4602      	mov	r2, r0
   dbd20:	460b      	mov	r3, r1
   dbd22:	f003 fd77 	bl	df814 <__adddf3>
   dbd26:	4602      	mov	r2, r0
   dbd28:	460b      	mov	r3, r1
   dbd2a:	a12f      	add	r1, pc, #188	; (adr r1, dbde8 <__ieee754_asin+0x2d8>)
   dbd2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbd30:	f003 fd6e 	bl	df810 <__aeabi_dsub>
   dbd34:	4602      	mov	r2, r0
   dbd36:	460b      	mov	r3, r1
   dbd38:	e9dd 0100 	ldrd	r0, r1, [sp]
   dbd3c:	f003 fd68 	bl	df810 <__aeabi_dsub>
   dbd40:	4642      	mov	r2, r8
   dbd42:	4606      	mov	r6, r0
   dbd44:	460f      	mov	r7, r1
   dbd46:	464b      	mov	r3, r9
   dbd48:	4640      	mov	r0, r8
   dbd4a:	4649      	mov	r1, r9
   dbd4c:	f003 fd62 	bl	df814 <__adddf3>
   dbd50:	4602      	mov	r2, r0
   dbd52:	460b      	mov	r3, r1
   dbd54:	a13a      	add	r1, pc, #232	; (adr r1, dbe40 <__ieee754_asin+0x330>)
   dbd56:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbd5a:	f003 fd59 	bl	df810 <__aeabi_dsub>
   dbd5e:	4602      	mov	r2, r0
   dbd60:	460b      	mov	r3, r1
   dbd62:	4630      	mov	r0, r6
   dbd64:	4639      	mov	r1, r7
   dbd66:	f003 fd53 	bl	df810 <__aeabi_dsub>
   dbd6a:	4602      	mov	r2, r0
   dbd6c:	460b      	mov	r3, r1
   dbd6e:	a134      	add	r1, pc, #208	; (adr r1, dbe40 <__ieee754_asin+0x330>)
   dbd70:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbd74:	f003 fd4c 	bl	df810 <__aeabi_dsub>
   dbd78:	4602      	mov	r2, r0
   dbd7a:	460b      	mov	r3, r1
   dbd7c:	2c00      	cmp	r4, #0
   dbd7e:	f340 80e4 	ble.w	dbf4a <__ieee754_asin+0x43a>
   dbd82:	4610      	mov	r0, r2
   dbd84:	4619      	mov	r1, r3
   dbd86:	ec41 0b10 	vmov	d0, r0, r1
   dbd8a:	b003      	add	sp, #12
   dbd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd90:	4602      	mov	r2, r0
   dbd92:	460b      	mov	r3, r1
   dbd94:	4640      	mov	r0, r8
   dbd96:	4649      	mov	r1, r9
   dbd98:	f004 f818 	bl	dfdcc <__aeabi_ddiv>
   dbd9c:	4652      	mov	r2, sl
   dbd9e:	465b      	mov	r3, fp
   dbda0:	f003 feea 	bl	dfb78 <__aeabi_dmul>
   dbda4:	4652      	mov	r2, sl
   dbda6:	465b      	mov	r3, fp
   dbda8:	f003 fd34 	bl	df814 <__adddf3>
   dbdac:	4602      	mov	r2, r0
   dbdae:	460b      	mov	r3, r1
   dbdb0:	f003 fd30 	bl	df814 <__adddf3>
   dbdb4:	a30c      	add	r3, pc, #48	; (adr r3, dbde8 <__ieee754_asin+0x2d8>)
   dbdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbdba:	f003 fd29 	bl	df810 <__aeabi_dsub>
   dbdbe:	4602      	mov	r2, r0
   dbdc0:	460b      	mov	r3, r1
   dbdc2:	a107      	add	r1, pc, #28	; (adr r1, dbde0 <__ieee754_asin+0x2d0>)
   dbdc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dbdc8:	f003 fd22 	bl	df810 <__aeabi_dsub>
   dbdcc:	4602      	mov	r2, r0
   dbdce:	460b      	mov	r3, r1
   dbdd0:	e7d4      	b.n	dbd7c <__ieee754_asin+0x26c>
   dbdd2:	bf00      	nop
   dbdd4:	f3af 8000 	nop.w
   dbdd8:	8800759c 	.word	0x8800759c
   dbddc:	7e37e43c 	.word	0x7e37e43c
   dbde0:	54442d18 	.word	0x54442d18
   dbde4:	3ff921fb 	.word	0x3ff921fb
   dbde8:	33145c07 	.word	0x33145c07
   dbdec:	3c91a626 	.word	0x3c91a626
   dbdf0:	0dfdf709 	.word	0x0dfdf709
   dbdf4:	3f023de1 	.word	0x3f023de1
   dbdf8:	7501b288 	.word	0x7501b288
   dbdfc:	3f49efe0 	.word	0x3f49efe0
   dbe00:	b5688f3b 	.word	0xb5688f3b
   dbe04:	3fa48228 	.word	0x3fa48228
   dbe08:	0e884455 	.word	0x0e884455
   dbe0c:	3fc9c155 	.word	0x3fc9c155
   dbe10:	03eb6f7d 	.word	0x03eb6f7d
   dbe14:	3fd4d612 	.word	0x3fd4d612
   dbe18:	55555555 	.word	0x55555555
   dbe1c:	3fc55555 	.word	0x3fc55555
   dbe20:	b12e9282 	.word	0xb12e9282
   dbe24:	3fb3b8c5 	.word	0x3fb3b8c5
   dbe28:	1b8d0159 	.word	0x1b8d0159
   dbe2c:	3fe6066c 	.word	0x3fe6066c
   dbe30:	9c598ac8 	.word	0x9c598ac8
   dbe34:	40002ae5 	.word	0x40002ae5
   dbe38:	1c8a2d4b 	.word	0x1c8a2d4b
   dbe3c:	40033a27 	.word	0x40033a27
   dbe40:	54442d18 	.word	0x54442d18
   dbe44:	3fe921fb 	.word	0x3fe921fb
   dbe48:	3fefffff 	.word	0x3fefffff
   dbe4c:	3fdfffff 	.word	0x3fdfffff
   dbe50:	3ff00000 	.word	0x3ff00000
   dbe54:	3fe00000 	.word	0x3fe00000
   dbe58:	3fef3332 	.word	0x3fef3332
   dbe5c:	ee10 2a10 	vmov	r2, s0
   dbe60:	ee10 0a10 	vmov	r0, s0
   dbe64:	463b      	mov	r3, r7
   dbe66:	4639      	mov	r1, r7
   dbe68:	f003 fe86 	bl	dfb78 <__aeabi_dmul>
   dbe6c:	a33b      	add	r3, pc, #236	; (adr r3, dbf5c <__ieee754_asin+0x44c>)
   dbe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe72:	4604      	mov	r4, r0
   dbe74:	460d      	mov	r5, r1
   dbe76:	f003 fe7f 	bl	dfb78 <__aeabi_dmul>
   dbe7a:	a33a      	add	r3, pc, #232	; (adr r3, dbf64 <__ieee754_asin+0x454>)
   dbe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe80:	f003 fcc8 	bl	df814 <__adddf3>
   dbe84:	4622      	mov	r2, r4
   dbe86:	462b      	mov	r3, r5
   dbe88:	f003 fe76 	bl	dfb78 <__aeabi_dmul>
   dbe8c:	a337      	add	r3, pc, #220	; (adr r3, dbf6c <__ieee754_asin+0x45c>)
   dbe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe92:	f003 fcbd 	bl	df810 <__aeabi_dsub>
   dbe96:	4622      	mov	r2, r4
   dbe98:	462b      	mov	r3, r5
   dbe9a:	f003 fe6d 	bl	dfb78 <__aeabi_dmul>
   dbe9e:	a335      	add	r3, pc, #212	; (adr r3, dbf74 <__ieee754_asin+0x464>)
   dbea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbea4:	f003 fcb6 	bl	df814 <__adddf3>
   dbea8:	4622      	mov	r2, r4
   dbeaa:	462b      	mov	r3, r5
   dbeac:	f003 fe64 	bl	dfb78 <__aeabi_dmul>
   dbeb0:	a332      	add	r3, pc, #200	; (adr r3, dbf7c <__ieee754_asin+0x46c>)
   dbeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeb6:	f003 fcab 	bl	df810 <__aeabi_dsub>
   dbeba:	4622      	mov	r2, r4
   dbebc:	462b      	mov	r3, r5
   dbebe:	f003 fe5b 	bl	dfb78 <__aeabi_dmul>
   dbec2:	a330      	add	r3, pc, #192	; (adr r3, dbf84 <__ieee754_asin+0x474>)
   dbec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbec8:	f003 fca4 	bl	df814 <__adddf3>
   dbecc:	4622      	mov	r2, r4
   dbece:	462b      	mov	r3, r5
   dbed0:	f003 fe52 	bl	dfb78 <__aeabi_dmul>
   dbed4:	a32d      	add	r3, pc, #180	; (adr r3, dbf8c <__ieee754_asin+0x47c>)
   dbed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeda:	4680      	mov	r8, r0
   dbedc:	4689      	mov	r9, r1
   dbede:	4620      	mov	r0, r4
   dbee0:	4629      	mov	r1, r5
   dbee2:	f003 fe49 	bl	dfb78 <__aeabi_dmul>
   dbee6:	a32b      	add	r3, pc, #172	; (adr r3, dbf94 <__ieee754_asin+0x484>)
   dbee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeec:	f003 fc90 	bl	df810 <__aeabi_dsub>
   dbef0:	4622      	mov	r2, r4
   dbef2:	462b      	mov	r3, r5
   dbef4:	f003 fe40 	bl	dfb78 <__aeabi_dmul>
   dbef8:	a328      	add	r3, pc, #160	; (adr r3, dbf9c <__ieee754_asin+0x48c>)
   dbefa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbefe:	f003 fc89 	bl	df814 <__adddf3>
   dbf02:	4622      	mov	r2, r4
   dbf04:	462b      	mov	r3, r5
   dbf06:	f003 fe37 	bl	dfb78 <__aeabi_dmul>
   dbf0a:	a326      	add	r3, pc, #152	; (adr r3, dbfa4 <__ieee754_asin+0x494>)
   dbf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf10:	f003 fc7e 	bl	df810 <__aeabi_dsub>
   dbf14:	4622      	mov	r2, r4
   dbf16:	462b      	mov	r3, r5
   dbf18:	f003 fe2e 	bl	dfb78 <__aeabi_dmul>
   dbf1c:	2200      	movs	r2, #0
   dbf1e:	4b0e      	ldr	r3, [pc, #56]	; (dbf58 <__ieee754_asin+0x448>)
   dbf20:	f003 fc78 	bl	df814 <__adddf3>
   dbf24:	4602      	mov	r2, r0
   dbf26:	460b      	mov	r3, r1
   dbf28:	4640      	mov	r0, r8
   dbf2a:	4649      	mov	r1, r9
   dbf2c:	f003 ff4e 	bl	dfdcc <__aeabi_ddiv>
   dbf30:	4632      	mov	r2, r6
   dbf32:	463b      	mov	r3, r7
   dbf34:	f003 fe20 	bl	dfb78 <__aeabi_dmul>
   dbf38:	4632      	mov	r2, r6
   dbf3a:	463b      	mov	r3, r7
   dbf3c:	f003 fc6a 	bl	df814 <__adddf3>
   dbf40:	ec41 0b10 	vmov	d0, r0, r1
   dbf44:	b003      	add	sp, #12
   dbf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf4a:	4610      	mov	r0, r2
   dbf4c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dbf50:	e5fb      	b.n	dbb4a <__ieee754_asin+0x3a>
   dbf52:	bf00      	nop
   dbf54:	f3af 8000 	nop.w
   dbf58:	3ff00000 	.word	0x3ff00000
   dbf5c:	0dfdf709 	.word	0x0dfdf709
   dbf60:	3f023de1 	.word	0x3f023de1
   dbf64:	7501b288 	.word	0x7501b288
   dbf68:	3f49efe0 	.word	0x3f49efe0
   dbf6c:	b5688f3b 	.word	0xb5688f3b
   dbf70:	3fa48228 	.word	0x3fa48228
   dbf74:	0e884455 	.word	0x0e884455
   dbf78:	3fc9c155 	.word	0x3fc9c155
   dbf7c:	03eb6f7d 	.word	0x03eb6f7d
   dbf80:	3fd4d612 	.word	0x3fd4d612
   dbf84:	55555555 	.word	0x55555555
   dbf88:	3fc55555 	.word	0x3fc55555
   dbf8c:	b12e9282 	.word	0xb12e9282
   dbf90:	3fb3b8c5 	.word	0x3fb3b8c5
   dbf94:	1b8d0159 	.word	0x1b8d0159
   dbf98:	3fe6066c 	.word	0x3fe6066c
   dbf9c:	9c598ac8 	.word	0x9c598ac8
   dbfa0:	40002ae5 	.word	0x40002ae5
   dbfa4:	1c8a2d4b 	.word	0x1c8a2d4b
   dbfa8:	40033a27 	.word	0x40033a27
   dbfac:	00000000 	.word	0x00000000

000dbfb0 <__ieee754_atan2>:
   dbfb0:	ec51 0b11 	vmov	r0, r1, d1
   dbfb4:	4243      	negs	r3, r0
   dbfb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbfba:	4303      	orrs	r3, r0
   dbfbc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dbfc0:	4f75      	ldr	r7, [pc, #468]	; (dc198 <__ieee754_atan2+0x1e8>)
   dbfc2:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   dbfc6:	42bb      	cmp	r3, r7
   dbfc8:	ec55 4b10 	vmov	r4, r5, d0
   dbfcc:	d849      	bhi.n	dc062 <__ieee754_atan2+0xb2>
   dbfce:	4263      	negs	r3, r4
   dbfd0:	4323      	orrs	r3, r4
   dbfd2:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   dbfd6:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   dbfda:	42bb      	cmp	r3, r7
   dbfdc:	46a9      	mov	r9, r5
   dbfde:	d840      	bhi.n	dc062 <__ieee754_atan2+0xb2>
   dbfe0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   dbfe4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dbfe8:	4303      	orrs	r3, r0
   dbfea:	468e      	mov	lr, r1
   dbfec:	d050      	beq.n	dc090 <__ieee754_atan2+0xe0>
   dbfee:	178e      	asrs	r6, r1, #30
   dbff0:	f006 0602 	and.w	r6, r6, #2
   dbff4:	ea54 030a 	orrs.w	r3, r4, sl
   dbff8:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   dbffc:	d039      	beq.n	dc072 <__ieee754_atan2+0xc2>
   dbffe:	ea50 0308 	orrs.w	r3, r0, r8
   dc002:	d03e      	beq.n	dc082 <__ieee754_atan2+0xd2>
   dc004:	45b8      	cmp	r8, r7
   dc006:	d055      	beq.n	dc0b4 <__ieee754_atan2+0x104>
   dc008:	45ba      	cmp	sl, r7
   dc00a:	d03a      	beq.n	dc082 <__ieee754_atan2+0xd2>
   dc00c:	ebc8 080a 	rsb	r8, r8, sl
   dc010:	ea4f 5828 	mov.w	r8, r8, asr #20
   dc014:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   dc018:	dc40      	bgt.n	dc09c <__ieee754_atan2+0xec>
   dc01a:	2900      	cmp	r1, #0
   dc01c:	db70      	blt.n	dc100 <__ieee754_atan2+0x150>
   dc01e:	4602      	mov	r2, r0
   dc020:	460b      	mov	r3, r1
   dc022:	4620      	mov	r0, r4
   dc024:	4629      	mov	r1, r5
   dc026:	f003 fed1 	bl	dfdcc <__aeabi_ddiv>
   dc02a:	ec41 0b10 	vmov	d0, r0, r1
   dc02e:	f7fe fb9b 	bl	da768 <fabs>
   dc032:	f7fe f8ed 	bl	da210 <atan>
   dc036:	ec51 0b10 	vmov	r0, r1, d0
   dc03a:	2e01      	cmp	r6, #1
   dc03c:	d05a      	beq.n	dc0f4 <__ieee754_atan2+0x144>
   dc03e:	2e02      	cmp	r6, #2
   dc040:	d048      	beq.n	dc0d4 <__ieee754_atan2+0x124>
   dc042:	2e00      	cmp	r6, #0
   dc044:	d042      	beq.n	dc0cc <__ieee754_atan2+0x11c>
   dc046:	a33e      	add	r3, pc, #248	; (adr r3, dc140 <__ieee754_atan2+0x190>)
   dc048:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc04c:	f003 fbe0 	bl	df810 <__aeabi_dsub>
   dc050:	a33d      	add	r3, pc, #244	; (adr r3, dc148 <__ieee754_atan2+0x198>)
   dc052:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc056:	f003 fbdb 	bl	df810 <__aeabi_dsub>
   dc05a:	ec41 0b10 	vmov	d0, r0, r1
   dc05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc062:	4622      	mov	r2, r4
   dc064:	462b      	mov	r3, r5
   dc066:	f003 fbd5 	bl	df814 <__adddf3>
   dc06a:	ec41 0b10 	vmov	d0, r0, r1
   dc06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc072:	2e02      	cmp	r6, #2
   dc074:	d016      	beq.n	dc0a4 <__ieee754_atan2+0xf4>
   dc076:	2e03      	cmp	r6, #3
   dc078:	d10e      	bne.n	dc098 <__ieee754_atan2+0xe8>
   dc07a:	ed9f 0b35 	vldr	d0, [pc, #212]	; dc150 <__ieee754_atan2+0x1a0>
   dc07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc082:	f1b9 0f00 	cmp.w	r9, #0
   dc086:	db11      	blt.n	dc0ac <__ieee754_atan2+0xfc>
   dc088:	ed9f 0b33 	vldr	d0, [pc, #204]	; dc158 <__ieee754_atan2+0x1a8>
   dc08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc090:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc094:	f7fe b8bc 	b.w	da210 <atan>
   dc098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc09c:	a12e      	add	r1, pc, #184	; (adr r1, dc158 <__ieee754_atan2+0x1a8>)
   dc09e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc0a2:	e7ca      	b.n	dc03a <__ieee754_atan2+0x8a>
   dc0a4:	ed9f 0b28 	vldr	d0, [pc, #160]	; dc148 <__ieee754_atan2+0x198>
   dc0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc0ac:	ed9f 0b2c 	vldr	d0, [pc, #176]	; dc160 <__ieee754_atan2+0x1b0>
   dc0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc0b4:	45c2      	cmp	sl, r8
   dc0b6:	d029      	beq.n	dc10c <__ieee754_atan2+0x15c>
   dc0b8:	2e02      	cmp	r6, #2
   dc0ba:	d0f3      	beq.n	dc0a4 <__ieee754_atan2+0xf4>
   dc0bc:	2e03      	cmp	r6, #3
   dc0be:	d0dc      	beq.n	dc07a <__ieee754_atan2+0xca>
   dc0c0:	2e01      	cmp	r6, #1
   dc0c2:	d02d      	beq.n	dc120 <__ieee754_atan2+0x170>
   dc0c4:	ed9f 0b28 	vldr	d0, [pc, #160]	; dc168 <__ieee754_atan2+0x1b8>
   dc0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc0cc:	ec41 0b10 	vmov	d0, r0, r1
   dc0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc0d4:	a31a      	add	r3, pc, #104	; (adr r3, dc140 <__ieee754_atan2+0x190>)
   dc0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc0da:	f003 fb99 	bl	df810 <__aeabi_dsub>
   dc0de:	4602      	mov	r2, r0
   dc0e0:	460b      	mov	r3, r1
   dc0e2:	a119      	add	r1, pc, #100	; (adr r1, dc148 <__ieee754_atan2+0x198>)
   dc0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   dc0e8:	f003 fb92 	bl	df810 <__aeabi_dsub>
   dc0ec:	ec41 0b10 	vmov	d0, r0, r1
   dc0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc0f4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   dc0f8:	ec41 0b10 	vmov	d0, r0, r1
   dc0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc100:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   dc104:	da8b      	bge.n	dc01e <__ieee754_atan2+0x6e>
   dc106:	2000      	movs	r0, #0
   dc108:	2100      	movs	r1, #0
   dc10a:	e796      	b.n	dc03a <__ieee754_atan2+0x8a>
   dc10c:	2e02      	cmp	r6, #2
   dc10e:	d013      	beq.n	dc138 <__ieee754_atan2+0x188>
   dc110:	2e03      	cmp	r6, #3
   dc112:	d00d      	beq.n	dc130 <__ieee754_atan2+0x180>
   dc114:	2e01      	cmp	r6, #1
   dc116:	d007      	beq.n	dc128 <__ieee754_atan2+0x178>
   dc118:	ed9f 0b15 	vldr	d0, [pc, #84]	; dc170 <__ieee754_atan2+0x1c0>
   dc11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc120:	ed9f 0b15 	vldr	d0, [pc, #84]	; dc178 <__ieee754_atan2+0x1c8>
   dc124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc128:	ed9f 0b15 	vldr	d0, [pc, #84]	; dc180 <__ieee754_atan2+0x1d0>
   dc12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc130:	ed9f 0b15 	vldr	d0, [pc, #84]	; dc188 <__ieee754_atan2+0x1d8>
   dc134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc138:	ed9f 0b15 	vldr	d0, [pc, #84]	; dc190 <__ieee754_atan2+0x1e0>
   dc13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc140:	33145c07 	.word	0x33145c07
   dc144:	3ca1a626 	.word	0x3ca1a626
   dc148:	54442d18 	.word	0x54442d18
   dc14c:	400921fb 	.word	0x400921fb
   dc150:	54442d18 	.word	0x54442d18
   dc154:	c00921fb 	.word	0xc00921fb
   dc158:	54442d18 	.word	0x54442d18
   dc15c:	3ff921fb 	.word	0x3ff921fb
   dc160:	54442d18 	.word	0x54442d18
   dc164:	bff921fb 	.word	0xbff921fb
	...
   dc170:	54442d18 	.word	0x54442d18
   dc174:	3fe921fb 	.word	0x3fe921fb
   dc178:	00000000 	.word	0x00000000
   dc17c:	80000000 	.word	0x80000000
   dc180:	54442d18 	.word	0x54442d18
   dc184:	bfe921fb 	.word	0xbfe921fb
   dc188:	7f3321d2 	.word	0x7f3321d2
   dc18c:	c002d97c 	.word	0xc002d97c
   dc190:	7f3321d2 	.word	0x7f3321d2
   dc194:	4002d97c 	.word	0x4002d97c
   dc198:	7ff00000 	.word	0x7ff00000
   dc19c:	00000000 	.word	0x00000000

000dc1a0 <__ieee754_cosh>:
   dc1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc1a4:	ec53 2b10 	vmov	r2, r3, d0
   dc1a8:	4953      	ldr	r1, [pc, #332]	; (dc2f8 <__ieee754_cosh+0x158>)
   dc1aa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dc1ae:	428c      	cmp	r4, r1
   dc1b0:	dc12      	bgt.n	dc1d8 <__ieee754_cosh+0x38>
   dc1b2:	4952      	ldr	r1, [pc, #328]	; (dc2fc <__ieee754_cosh+0x15c>)
   dc1b4:	428c      	cmp	r4, r1
   dc1b6:	dd17      	ble.n	dc1e8 <__ieee754_cosh+0x48>
   dc1b8:	4951      	ldr	r1, [pc, #324]	; (dc300 <__ieee754_cosh+0x160>)
   dc1ba:	428c      	cmp	r4, r1
   dc1bc:	dd64      	ble.n	dc288 <__ieee754_cosh+0xe8>
   dc1be:	4951      	ldr	r1, [pc, #324]	; (dc304 <__ieee754_cosh+0x164>)
   dc1c0:	428c      	cmp	r4, r1
   dc1c2:	f340 8084 	ble.w	dc2ce <__ieee754_cosh+0x12e>
   dc1c6:	4950      	ldr	r1, [pc, #320]	; (dc308 <__ieee754_cosh+0x168>)
   dc1c8:	428c      	cmp	r4, r1
   dc1ca:	dd3e      	ble.n	dc24a <__ieee754_cosh+0xaa>
   dc1cc:	3101      	adds	r1, #1
   dc1ce:	428c      	cmp	r4, r1
   dc1d0:	d038      	beq.n	dc244 <__ieee754_cosh+0xa4>
   dc1d2:	a347      	add	r3, pc, #284	; (adr r3, dc2f0 <__ieee754_cosh+0x150>)
   dc1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1d8:	4610      	mov	r0, r2
   dc1da:	4619      	mov	r1, r3
   dc1dc:	f003 fccc 	bl	dfb78 <__aeabi_dmul>
   dc1e0:	ec41 0b10 	vmov	d0, r0, r1
   dc1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc1e8:	f7fe fabe 	bl	da768 <fabs>
   dc1ec:	f002 ff70 	bl	df0d0 <expm1>
   dc1f0:	ec59 8b10 	vmov	r8, r9, d0
   dc1f4:	2200      	movs	r2, #0
   dc1f6:	4b45      	ldr	r3, [pc, #276]	; (dc30c <__ieee754_cosh+0x16c>)
   dc1f8:	ee10 0a10 	vmov	r0, s0
   dc1fc:	4649      	mov	r1, r9
   dc1fe:	f003 fb09 	bl	df814 <__adddf3>
   dc202:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   dc206:	4606      	mov	r6, r0
   dc208:	460f      	mov	r7, r1
   dc20a:	db5c      	blt.n	dc2c6 <__ieee754_cosh+0x126>
   dc20c:	4642      	mov	r2, r8
   dc20e:	464b      	mov	r3, r9
   dc210:	4640      	mov	r0, r8
   dc212:	4649      	mov	r1, r9
   dc214:	f003 fcb0 	bl	dfb78 <__aeabi_dmul>
   dc218:	4632      	mov	r2, r6
   dc21a:	4604      	mov	r4, r0
   dc21c:	460d      	mov	r5, r1
   dc21e:	463b      	mov	r3, r7
   dc220:	4630      	mov	r0, r6
   dc222:	4639      	mov	r1, r7
   dc224:	f003 faf6 	bl	df814 <__adddf3>
   dc228:	4602      	mov	r2, r0
   dc22a:	460b      	mov	r3, r1
   dc22c:	4620      	mov	r0, r4
   dc22e:	4629      	mov	r1, r5
   dc230:	f003 fdcc 	bl	dfdcc <__aeabi_ddiv>
   dc234:	2200      	movs	r2, #0
   dc236:	4b35      	ldr	r3, [pc, #212]	; (dc30c <__ieee754_cosh+0x16c>)
   dc238:	f003 faec 	bl	df814 <__adddf3>
   dc23c:	ec41 0b10 	vmov	d0, r0, r1
   dc240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc244:	4932      	ldr	r1, [pc, #200]	; (dc310 <__ieee754_cosh+0x170>)
   dc246:	428a      	cmp	r2, r1
   dc248:	d8c3      	bhi.n	dc1d2 <__ieee754_cosh+0x32>
   dc24a:	ec43 2b10 	vmov	d0, r2, r3
   dc24e:	f7fe fa8b 	bl	da768 <fabs>
   dc252:	2200      	movs	r2, #0
   dc254:	4b2f      	ldr	r3, [pc, #188]	; (dc314 <__ieee754_cosh+0x174>)
   dc256:	ec51 0b10 	vmov	r0, r1, d0
   dc25a:	f003 fc8d 	bl	dfb78 <__aeabi_dmul>
   dc25e:	ec41 0b10 	vmov	d0, r0, r1
   dc262:	f000 f859 	bl	dc318 <__ieee754_exp>
   dc266:	ec55 4b10 	vmov	r4, r5, d0
   dc26a:	ee10 0a10 	vmov	r0, s0
   dc26e:	2200      	movs	r2, #0
   dc270:	4b28      	ldr	r3, [pc, #160]	; (dc314 <__ieee754_cosh+0x174>)
   dc272:	4629      	mov	r1, r5
   dc274:	f003 fc80 	bl	dfb78 <__aeabi_dmul>
   dc278:	4622      	mov	r2, r4
   dc27a:	462b      	mov	r3, r5
   dc27c:	f003 fc7c 	bl	dfb78 <__aeabi_dmul>
   dc280:	ec41 0b10 	vmov	d0, r0, r1
   dc284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc288:	f7fe fa6e 	bl	da768 <fabs>
   dc28c:	f000 f844 	bl	dc318 <__ieee754_exp>
   dc290:	ec55 4b10 	vmov	r4, r5, d0
   dc294:	ee10 0a10 	vmov	r0, s0
   dc298:	2200      	movs	r2, #0
   dc29a:	4b1e      	ldr	r3, [pc, #120]	; (dc314 <__ieee754_cosh+0x174>)
   dc29c:	4629      	mov	r1, r5
   dc29e:	f003 fc6b 	bl	dfb78 <__aeabi_dmul>
   dc2a2:	4622      	mov	r2, r4
   dc2a4:	4606      	mov	r6, r0
   dc2a6:	460f      	mov	r7, r1
   dc2a8:	462b      	mov	r3, r5
   dc2aa:	2000      	movs	r0, #0
   dc2ac:	4919      	ldr	r1, [pc, #100]	; (dc314 <__ieee754_cosh+0x174>)
   dc2ae:	f003 fd8d 	bl	dfdcc <__aeabi_ddiv>
   dc2b2:	4602      	mov	r2, r0
   dc2b4:	460b      	mov	r3, r1
   dc2b6:	4630      	mov	r0, r6
   dc2b8:	4639      	mov	r1, r7
   dc2ba:	f003 faab 	bl	df814 <__adddf3>
   dc2be:	ec41 0b10 	vmov	d0, r0, r1
   dc2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc2c6:	ec47 6b10 	vmov	d0, r6, r7
   dc2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc2ce:	f7fe fa4b 	bl	da768 <fabs>
   dc2d2:	f000 f821 	bl	dc318 <__ieee754_exp>
   dc2d6:	2200      	movs	r2, #0
   dc2d8:	4b0e      	ldr	r3, [pc, #56]	; (dc314 <__ieee754_cosh+0x174>)
   dc2da:	ec51 0b10 	vmov	r0, r1, d0
   dc2de:	f003 fc4b 	bl	dfb78 <__aeabi_dmul>
   dc2e2:	ec41 0b10 	vmov	d0, r0, r1
   dc2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc2ea:	bf00      	nop
   dc2ec:	f3af 8000 	nop.w
   dc2f0:	8800759c 	.word	0x8800759c
   dc2f4:	7e37e43c 	.word	0x7e37e43c
   dc2f8:	7fefffff 	.word	0x7fefffff
   dc2fc:	3fd62e42 	.word	0x3fd62e42
   dc300:	4035ffff 	.word	0x4035ffff
   dc304:	40862e41 	.word	0x40862e41
   dc308:	408633cd 	.word	0x408633cd
   dc30c:	3ff00000 	.word	0x3ff00000
   dc310:	8fb9f87d 	.word	0x8fb9f87d
   dc314:	3fe00000 	.word	0x3fe00000

000dc318 <__ieee754_exp>:
   dc318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc31c:	ec55 4b10 	vmov	r4, r5, d0
   dc320:	49bd      	ldr	r1, [pc, #756]	; (dc618 <__ieee754_exp+0x300>)
   dc322:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   dc326:	428a      	cmp	r2, r1
   dc328:	b083      	sub	sp, #12
   dc32a:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   dc32e:	d90d      	bls.n	dc34c <__ieee754_exp+0x34>
   dc330:	49ba      	ldr	r1, [pc, #744]	; (dc61c <__ieee754_exp+0x304>)
   dc332:	428a      	cmp	r2, r1
   dc334:	d92a      	bls.n	dc38c <__ieee754_exp+0x74>
   dc336:	f3c5 0313 	ubfx	r3, r5, #0, #20
   dc33a:	4323      	orrs	r3, r4
   dc33c:	f040 80fa 	bne.w	dc534 <__ieee754_exp+0x21c>
   dc340:	b10f      	cbz	r7, dc346 <__ieee754_exp+0x2e>
   dc342:	ed9f 0b9d 	vldr	d0, [pc, #628]	; dc5b8 <__ieee754_exp+0x2a0>
   dc346:	b003      	add	sp, #12
   dc348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc34c:	4bb4      	ldr	r3, [pc, #720]	; (dc620 <__ieee754_exp+0x308>)
   dc34e:	429a      	cmp	r2, r3
   dc350:	f200 80d5 	bhi.w	dc4fe <__ieee754_exp+0x1e6>
   dc354:	4bb3      	ldr	r3, [pc, #716]	; (dc624 <__ieee754_exp+0x30c>)
   dc356:	429a      	cmp	r2, r3
   dc358:	f200 80ea 	bhi.w	dc530 <__ieee754_exp+0x218>
   dc35c:	a398      	add	r3, pc, #608	; (adr r3, dc5c0 <__ieee754_exp+0x2a8>)
   dc35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc362:	ee10 0a10 	vmov	r0, s0
   dc366:	4629      	mov	r1, r5
   dc368:	f003 fa54 	bl	df814 <__adddf3>
   dc36c:	2200      	movs	r2, #0
   dc36e:	4bae      	ldr	r3, [pc, #696]	; (dc628 <__ieee754_exp+0x310>)
   dc370:	f003 fe92 	bl	e0098 <__aeabi_dcmpgt>
   dc374:	2800      	cmp	r0, #0
   dc376:	f000 811c 	beq.w	dc5b2 <__ieee754_exp+0x29a>
   dc37a:	4620      	mov	r0, r4
   dc37c:	4629      	mov	r1, r5
   dc37e:	2200      	movs	r2, #0
   dc380:	4ba9      	ldr	r3, [pc, #676]	; (dc628 <__ieee754_exp+0x310>)
   dc382:	f003 fa47 	bl	df814 <__adddf3>
   dc386:	ec41 0b10 	vmov	d0, r0, r1
   dc38a:	e7dc      	b.n	dc346 <__ieee754_exp+0x2e>
   dc38c:	a38e      	add	r3, pc, #568	; (adr r3, dc5c8 <__ieee754_exp+0x2b0>)
   dc38e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc392:	ee10 0a10 	vmov	r0, s0
   dc396:	4629      	mov	r1, r5
   dc398:	f003 fe7e 	bl	e0098 <__aeabi_dcmpgt>
   dc39c:	2800      	cmp	r0, #0
   dc39e:	f040 80d3 	bne.w	dc548 <__ieee754_exp+0x230>
   dc3a2:	a38b      	add	r3, pc, #556	; (adr r3, dc5d0 <__ieee754_exp+0x2b8>)
   dc3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3a8:	4620      	mov	r0, r4
   dc3aa:	4629      	mov	r1, r5
   dc3ac:	f003 fe56 	bl	e005c <__aeabi_dcmplt>
   dc3b0:	2800      	cmp	r0, #0
   dc3b2:	d1c6      	bne.n	dc342 <__ieee754_exp+0x2a>
   dc3b4:	4e9d      	ldr	r6, [pc, #628]	; (dc62c <__ieee754_exp+0x314>)
   dc3b6:	a388      	add	r3, pc, #544	; (adr r3, dc5d8 <__ieee754_exp+0x2c0>)
   dc3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3bc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   dc3c0:	4620      	mov	r0, r4
   dc3c2:	4629      	mov	r1, r5
   dc3c4:	f003 fbd8 	bl	dfb78 <__aeabi_dmul>
   dc3c8:	e9d6 2300 	ldrd	r2, r3, [r6]
   dc3cc:	f003 fa22 	bl	df814 <__adddf3>
   dc3d0:	f003 fe82 	bl	e00d8 <__aeabi_d2iz>
   dc3d4:	4606      	mov	r6, r0
   dc3d6:	f003 fb69 	bl	dfaac <__aeabi_i2d>
   dc3da:	a381      	add	r3, pc, #516	; (adr r3, dc5e0 <__ieee754_exp+0x2c8>)
   dc3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3e0:	4680      	mov	r8, r0
   dc3e2:	4689      	mov	r9, r1
   dc3e4:	f003 fbc8 	bl	dfb78 <__aeabi_dmul>
   dc3e8:	4602      	mov	r2, r0
   dc3ea:	460b      	mov	r3, r1
   dc3ec:	4620      	mov	r0, r4
   dc3ee:	4629      	mov	r1, r5
   dc3f0:	f003 fa0e 	bl	df810 <__aeabi_dsub>
   dc3f4:	a37c      	add	r3, pc, #496	; (adr r3, dc5e8 <__ieee754_exp+0x2d0>)
   dc3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3fa:	e9cd 0100 	strd	r0, r1, [sp]
   dc3fe:	4640      	mov	r0, r8
   dc400:	4649      	mov	r1, r9
   dc402:	f003 fbb9 	bl	dfb78 <__aeabi_dmul>
   dc406:	4682      	mov	sl, r0
   dc408:	468b      	mov	fp, r1
   dc40a:	4652      	mov	r2, sl
   dc40c:	465b      	mov	r3, fp
   dc40e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc412:	f003 f9fd 	bl	df810 <__aeabi_dsub>
   dc416:	4604      	mov	r4, r0
   dc418:	460d      	mov	r5, r1
   dc41a:	4622      	mov	r2, r4
   dc41c:	462b      	mov	r3, r5
   dc41e:	4620      	mov	r0, r4
   dc420:	4629      	mov	r1, r5
   dc422:	f003 fba9 	bl	dfb78 <__aeabi_dmul>
   dc426:	a372      	add	r3, pc, #456	; (adr r3, dc5f0 <__ieee754_exp+0x2d8>)
   dc428:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc42c:	4680      	mov	r8, r0
   dc42e:	4689      	mov	r9, r1
   dc430:	f003 fba2 	bl	dfb78 <__aeabi_dmul>
   dc434:	a370      	add	r3, pc, #448	; (adr r3, dc5f8 <__ieee754_exp+0x2e0>)
   dc436:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc43a:	f003 f9e9 	bl	df810 <__aeabi_dsub>
   dc43e:	4642      	mov	r2, r8
   dc440:	464b      	mov	r3, r9
   dc442:	f003 fb99 	bl	dfb78 <__aeabi_dmul>
   dc446:	a36e      	add	r3, pc, #440	; (adr r3, dc600 <__ieee754_exp+0x2e8>)
   dc448:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc44c:	f003 f9e2 	bl	df814 <__adddf3>
   dc450:	4642      	mov	r2, r8
   dc452:	464b      	mov	r3, r9
   dc454:	f003 fb90 	bl	dfb78 <__aeabi_dmul>
   dc458:	a36b      	add	r3, pc, #428	; (adr r3, dc608 <__ieee754_exp+0x2f0>)
   dc45a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc45e:	f003 f9d7 	bl	df810 <__aeabi_dsub>
   dc462:	4642      	mov	r2, r8
   dc464:	464b      	mov	r3, r9
   dc466:	f003 fb87 	bl	dfb78 <__aeabi_dmul>
   dc46a:	a369      	add	r3, pc, #420	; (adr r3, dc610 <__ieee754_exp+0x2f8>)
   dc46c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc470:	f003 f9d0 	bl	df814 <__adddf3>
   dc474:	4642      	mov	r2, r8
   dc476:	464b      	mov	r3, r9
   dc478:	f003 fb7e 	bl	dfb78 <__aeabi_dmul>
   dc47c:	4602      	mov	r2, r0
   dc47e:	460b      	mov	r3, r1
   dc480:	4620      	mov	r0, r4
   dc482:	4629      	mov	r1, r5
   dc484:	f003 f9c4 	bl	df810 <__aeabi_dsub>
   dc488:	4680      	mov	r8, r0
   dc48a:	4689      	mov	r9, r1
   dc48c:	2e00      	cmp	r6, #0
   dc48e:	d065      	beq.n	dc55c <__ieee754_exp+0x244>
   dc490:	4620      	mov	r0, r4
   dc492:	4629      	mov	r1, r5
   dc494:	4642      	mov	r2, r8
   dc496:	464b      	mov	r3, r9
   dc498:	f003 fb6e 	bl	dfb78 <__aeabi_dmul>
   dc49c:	4642      	mov	r2, r8
   dc49e:	4604      	mov	r4, r0
   dc4a0:	460d      	mov	r5, r1
   dc4a2:	464b      	mov	r3, r9
   dc4a4:	2000      	movs	r0, #0
   dc4a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   dc4aa:	f003 f9b1 	bl	df810 <__aeabi_dsub>
   dc4ae:	4602      	mov	r2, r0
   dc4b0:	460b      	mov	r3, r1
   dc4b2:	4620      	mov	r0, r4
   dc4b4:	4629      	mov	r1, r5
   dc4b6:	f003 fc89 	bl	dfdcc <__aeabi_ddiv>
   dc4ba:	4602      	mov	r2, r0
   dc4bc:	460b      	mov	r3, r1
   dc4be:	4650      	mov	r0, sl
   dc4c0:	4659      	mov	r1, fp
   dc4c2:	f003 f9a5 	bl	df810 <__aeabi_dsub>
   dc4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
   dc4ca:	f003 f9a1 	bl	df810 <__aeabi_dsub>
   dc4ce:	460b      	mov	r3, r1
   dc4d0:	4602      	mov	r2, r0
   dc4d2:	4955      	ldr	r1, [pc, #340]	; (dc628 <__ieee754_exp+0x310>)
   dc4d4:	2000      	movs	r0, #0
   dc4d6:	f003 f99b 	bl	df810 <__aeabi_dsub>
   dc4da:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   dc4de:	429e      	cmp	r6, r3
   dc4e0:	da60      	bge.n	dc5a4 <__ieee754_exp+0x28c>
   dc4e2:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   dc4e6:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   dc4ea:	2200      	movs	r2, #0
   dc4ec:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   dc4f0:	f003 fb42 	bl	dfb78 <__aeabi_dmul>
   dc4f4:	ec41 0b10 	vmov	d0, r0, r1
   dc4f8:	b003      	add	sp, #12
   dc4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc4fe:	4b4c      	ldr	r3, [pc, #304]	; (dc630 <__ieee754_exp+0x318>)
   dc500:	429a      	cmp	r2, r3
   dc502:	f63f af57 	bhi.w	dc3b4 <__ieee754_exp+0x9c>
   dc506:	4b4b      	ldr	r3, [pc, #300]	; (dc634 <__ieee754_exp+0x31c>)
   dc508:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   dc50c:	4443      	add	r3, r8
   dc50e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc512:	ee10 0a10 	vmov	r0, s0
   dc516:	4629      	mov	r1, r5
   dc518:	f003 f97a 	bl	df810 <__aeabi_dsub>
   dc51c:	4b46      	ldr	r3, [pc, #280]	; (dc638 <__ieee754_exp+0x320>)
   dc51e:	f1c7 0601 	rsb	r6, r7, #1
   dc522:	4498      	add	r8, r3
   dc524:	e9cd 0100 	strd	r0, r1, [sp]
   dc528:	e9d8 ab00 	ldrd	sl, fp, [r8]
   dc52c:	1bf6      	subs	r6, r6, r7
   dc52e:	e76c      	b.n	dc40a <__ieee754_exp+0xf2>
   dc530:	2600      	movs	r6, #0
   dc532:	e772      	b.n	dc41a <__ieee754_exp+0x102>
   dc534:	ee10 2a10 	vmov	r2, s0
   dc538:	462b      	mov	r3, r5
   dc53a:	4620      	mov	r0, r4
   dc53c:	4629      	mov	r1, r5
   dc53e:	f003 f969 	bl	df814 <__adddf3>
   dc542:	ec41 0b10 	vmov	d0, r0, r1
   dc546:	e6fe      	b.n	dc346 <__ieee754_exp+0x2e>
   dc548:	a31d      	add	r3, pc, #116	; (adr r3, dc5c0 <__ieee754_exp+0x2a8>)
   dc54a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc54e:	4610      	mov	r0, r2
   dc550:	4619      	mov	r1, r3
   dc552:	f003 fb11 	bl	dfb78 <__aeabi_dmul>
   dc556:	ec41 0b10 	vmov	d0, r0, r1
   dc55a:	e6f4      	b.n	dc346 <__ieee754_exp+0x2e>
   dc55c:	4602      	mov	r2, r0
   dc55e:	460b      	mov	r3, r1
   dc560:	4620      	mov	r0, r4
   dc562:	4629      	mov	r1, r5
   dc564:	f003 fb08 	bl	dfb78 <__aeabi_dmul>
   dc568:	2200      	movs	r2, #0
   dc56a:	4606      	mov	r6, r0
   dc56c:	460f      	mov	r7, r1
   dc56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc572:	4640      	mov	r0, r8
   dc574:	4649      	mov	r1, r9
   dc576:	f003 f94b 	bl	df810 <__aeabi_dsub>
   dc57a:	4602      	mov	r2, r0
   dc57c:	460b      	mov	r3, r1
   dc57e:	4630      	mov	r0, r6
   dc580:	4639      	mov	r1, r7
   dc582:	f003 fc23 	bl	dfdcc <__aeabi_ddiv>
   dc586:	4622      	mov	r2, r4
   dc588:	462b      	mov	r3, r5
   dc58a:	f003 f941 	bl	df810 <__aeabi_dsub>
   dc58e:	4602      	mov	r2, r0
   dc590:	460b      	mov	r3, r1
   dc592:	2000      	movs	r0, #0
   dc594:	4924      	ldr	r1, [pc, #144]	; (dc628 <__ieee754_exp+0x310>)
   dc596:	f003 f93b 	bl	df810 <__aeabi_dsub>
   dc59a:	ec41 0b10 	vmov	d0, r0, r1
   dc59e:	b003      	add	sp, #12
   dc5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5a4:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   dc5a8:	ec41 0b10 	vmov	d0, r0, r1
   dc5ac:	b003      	add	sp, #12
   dc5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5b2:	4606      	mov	r6, r0
   dc5b4:	e731      	b.n	dc41a <__ieee754_exp+0x102>
   dc5b6:	bf00      	nop
	...
   dc5c0:	8800759c 	.word	0x8800759c
   dc5c4:	7e37e43c 	.word	0x7e37e43c
   dc5c8:	fefa39ef 	.word	0xfefa39ef
   dc5cc:	40862e42 	.word	0x40862e42
   dc5d0:	d52d3051 	.word	0xd52d3051
   dc5d4:	c0874910 	.word	0xc0874910
   dc5d8:	652b82fe 	.word	0x652b82fe
   dc5dc:	3ff71547 	.word	0x3ff71547
   dc5e0:	fee00000 	.word	0xfee00000
   dc5e4:	3fe62e42 	.word	0x3fe62e42
   dc5e8:	35793c76 	.word	0x35793c76
   dc5ec:	3dea39ef 	.word	0x3dea39ef
   dc5f0:	72bea4d0 	.word	0x72bea4d0
   dc5f4:	3e663769 	.word	0x3e663769
   dc5f8:	c5d26bf1 	.word	0xc5d26bf1
   dc5fc:	3ebbbd41 	.word	0x3ebbbd41
   dc600:	af25de2c 	.word	0xaf25de2c
   dc604:	3f11566a 	.word	0x3f11566a
   dc608:	16bebd93 	.word	0x16bebd93
   dc60c:	3f66c16c 	.word	0x3f66c16c
   dc610:	5555553e 	.word	0x5555553e
   dc614:	3fc55555 	.word	0x3fc55555
   dc618:	40862e41 	.word	0x40862e41
   dc61c:	7fefffff 	.word	0x7fefffff
   dc620:	3fd62e42 	.word	0x3fd62e42
   dc624:	3e2fffff 	.word	0x3e2fffff
   dc628:	3ff00000 	.word	0x3ff00000
   dc62c:	000e4148 	.word	0x000e4148
   dc630:	3ff0a2b1 	.word	0x3ff0a2b1
   dc634:	000e4168 	.word	0x000e4168
   dc638:	000e4158 	.word	0x000e4158

000dc63c <__ieee754_fmod>:
   dc63c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc640:	ec53 2b11 	vmov	r2, r3, d1
   dc644:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   dc648:	ea52 0009 	orrs.w	r0, r2, r9
   dc64c:	ec55 4b10 	vmov	r4, r5, d0
   dc650:	d025      	beq.n	dc69e <__ieee754_fmod+0x62>
   dc652:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   dc656:	488f      	ldr	r0, [pc, #572]	; (dc894 <__ieee754_fmod+0x258>)
   dc658:	ea85 0b06 	eor.w	fp, r5, r6
   dc65c:	4583      	cmp	fp, r0
   dc65e:	dc1e      	bgt.n	dc69e <__ieee754_fmod+0x62>
   dc660:	4250      	negs	r0, r2
   dc662:	4310      	orrs	r0, r2
   dc664:	f8df c244 	ldr.w	ip, [pc, #580]	; dc8ac <__ieee754_fmod+0x270>
   dc668:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   dc66c:	4560      	cmp	r0, ip
   dc66e:	ee11 8a10 	vmov	r8, s2
   dc672:	d814      	bhi.n	dc69e <__ieee754_fmod+0x62>
   dc674:	45cb      	cmp	fp, r9
   dc676:	461f      	mov	r7, r3
   dc678:	ee10 aa10 	vmov	sl, s0
   dc67c:	ee11 ea10 	vmov	lr, s2
   dc680:	ee10 1a10 	vmov	r1, s0
   dc684:	dc17      	bgt.n	dc6b6 <__ieee754_fmod+0x7a>
   dc686:	db28      	blt.n	dc6da <__ieee754_fmod+0x9e>
   dc688:	4294      	cmp	r4, r2
   dc68a:	d326      	bcc.n	dc6da <__ieee754_fmod+0x9e>
   dc68c:	d113      	bne.n	dc6b6 <__ieee754_fmod+0x7a>
   dc68e:	4b82      	ldr	r3, [pc, #520]	; (dc898 <__ieee754_fmod+0x25c>)
   dc690:	0ff6      	lsrs	r6, r6, #31
   dc692:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   dc696:	ed93 0b00 	vldr	d0, [r3]
   dc69a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc69e:	4620      	mov	r0, r4
   dc6a0:	4629      	mov	r1, r5
   dc6a2:	f003 fa69 	bl	dfb78 <__aeabi_dmul>
   dc6a6:	4602      	mov	r2, r0
   dc6a8:	460b      	mov	r3, r1
   dc6aa:	f003 fb8f 	bl	dfdcc <__aeabi_ddiv>
   dc6ae:	ec41 0b10 	vmov	d0, r0, r1
   dc6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc6b6:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   dc6ba:	da12      	bge.n	dc6e2 <__ieee754_fmod+0xa6>
   dc6bc:	f1bb 0f00 	cmp.w	fp, #0
   dc6c0:	f040 80a7 	bne.w	dc812 <__ieee754_fmod+0x1d6>
   dc6c4:	f1ba 0f00 	cmp.w	sl, #0
   dc6c8:	4653      	mov	r3, sl
   dc6ca:	4874      	ldr	r0, [pc, #464]	; (dc89c <__ieee754_fmod+0x260>)
   dc6cc:	dd0d      	ble.n	dc6ea <__ieee754_fmod+0xae>
   dc6ce:	005b      	lsls	r3, r3, #1
   dc6d0:	2b00      	cmp	r3, #0
   dc6d2:	f100 30ff 	add.w	r0, r0, #4294967295
   dc6d6:	dcfa      	bgt.n	dc6ce <__ieee754_fmod+0x92>
   dc6d8:	e007      	b.n	dc6ea <__ieee754_fmod+0xae>
   dc6da:	ec45 4b10 	vmov	d0, r4, r5
   dc6de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc6e2:	ea4f 502b 	mov.w	r0, fp, asr #20
   dc6e6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dc6ea:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   dc6ee:	da0f      	bge.n	dc710 <__ieee754_fmod+0xd4>
   dc6f0:	f1b9 0f00 	cmp.w	r9, #0
   dc6f4:	f040 80a7 	bne.w	dc846 <__ieee754_fmod+0x20a>
   dc6f8:	f1b8 0f00 	cmp.w	r8, #0
   dc6fc:	4643      	mov	r3, r8
   dc6fe:	f8df c19c 	ldr.w	ip, [pc, #412]	; dc89c <__ieee754_fmod+0x260>
   dc702:	dd09      	ble.n	dc718 <__ieee754_fmod+0xdc>
   dc704:	005b      	lsls	r3, r3, #1
   dc706:	2b00      	cmp	r3, #0
   dc708:	f10c 3cff 	add.w	ip, ip, #4294967295
   dc70c:	dcfa      	bgt.n	dc704 <__ieee754_fmod+0xc8>
   dc70e:	e003      	b.n	dc718 <__ieee754_fmod+0xdc>
   dc710:	ea4f 5c29 	mov.w	ip, r9, asr #20
   dc714:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   dc718:	4b61      	ldr	r3, [pc, #388]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc71a:	4298      	cmp	r0, r3
   dc71c:	db5b      	blt.n	dc7d6 <__ieee754_fmod+0x19a>
   dc71e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dc722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc726:	4a5e      	ldr	r2, [pc, #376]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc728:	4594      	cmp	ip, r2
   dc72a:	db63      	blt.n	dc7f4 <__ieee754_fmod+0x1b8>
   dc72c:	f3c7 0513 	ubfx	r5, r7, #0, #20
   dc730:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dc734:	ebcc 0000 	rsb	r0, ip, r0
   dc738:	e007      	b.n	dc74a <__ieee754_fmod+0x10e>
   dc73a:	ea52 0304 	orrs.w	r3, r2, r4
   dc73e:	d013      	beq.n	dc768 <__ieee754_fmod+0x12c>
   dc740:	0fe3      	lsrs	r3, r4, #31
   dc742:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   dc746:	0061      	lsls	r1, r4, #1
   dc748:	3801      	subs	r0, #1
   dc74a:	ebce 0401 	rsb	r4, lr, r1
   dc74e:	1b5a      	subs	r2, r3, r5
   dc750:	b190      	cbz	r0, dc778 <__ieee754_fmod+0x13c>
   dc752:	4571      	cmp	r1, lr
   dc754:	bf38      	it	cc
   dc756:	f102 32ff 	addcc.w	r2, r2, #4294967295
   dc75a:	2a00      	cmp	r2, #0
   dc75c:	daed      	bge.n	dc73a <__ieee754_fmod+0xfe>
   dc75e:	0fca      	lsrs	r2, r1, #31
   dc760:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dc764:	0049      	lsls	r1, r1, #1
   dc766:	e7ef      	b.n	dc748 <__ieee754_fmod+0x10c>
   dc768:	4b4b      	ldr	r3, [pc, #300]	; (dc898 <__ieee754_fmod+0x25c>)
   dc76a:	0ff6      	lsrs	r6, r6, #31
   dc76c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   dc770:	ed96 0b00 	vldr	d0, [r6]
   dc774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc778:	4571      	cmp	r1, lr
   dc77a:	4615      	mov	r5, r2
   dc77c:	bf38      	it	cc
   dc77e:	f102 35ff 	addcc.w	r5, r2, #4294967295
   dc782:	2d00      	cmp	r5, #0
   dc784:	bfac      	ite	ge
   dc786:	ebce 0101 	rsbge	r1, lr, r1
   dc78a:	461d      	movlt	r5, r3
   dc78c:	ea55 0301 	orrs.w	r3, r5, r1
   dc790:	d0ea      	beq.n	dc768 <__ieee754_fmod+0x12c>
   dc792:	4a44      	ldr	r2, [pc, #272]	; (dc8a4 <__ieee754_fmod+0x268>)
   dc794:	4295      	cmp	r5, r2
   dc796:	dc08      	bgt.n	dc7aa <__ieee754_fmod+0x16e>
   dc798:	0fcb      	lsrs	r3, r1, #31
   dc79a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   dc79e:	4295      	cmp	r5, r2
   dc7a0:	f10c 3cff 	add.w	ip, ip, #4294967295
   dc7a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
   dc7a8:	ddf6      	ble.n	dc798 <__ieee754_fmod+0x15c>
   dc7aa:	4b3d      	ldr	r3, [pc, #244]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc7ac:	459c      	cmp	ip, r3
   dc7ae:	da54      	bge.n	dc85a <__ieee754_fmod+0x21e>
   dc7b0:	4a3b      	ldr	r2, [pc, #236]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc7b2:	ebcc 0202 	rsb	r2, ip, r2
   dc7b6:	2a14      	cmp	r2, #20
   dc7b8:	dc5b      	bgt.n	dc872 <__ieee754_fmod+0x236>
   dc7ba:	f1c2 0320 	rsb	r3, r2, #32
   dc7be:	fa05 f303 	lsl.w	r3, r5, r3
   dc7c2:	40d1      	lsrs	r1, r2
   dc7c4:	430b      	orrs	r3, r1
   dc7c6:	4115      	asrs	r5, r2
   dc7c8:	ea45 0106 	orr.w	r1, r5, r6
   dc7cc:	4618      	mov	r0, r3
   dc7ce:	ec41 0b10 	vmov	d0, r0, r1
   dc7d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc7d6:	4932      	ldr	r1, [pc, #200]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc7d8:	1a09      	subs	r1, r1, r0
   dc7da:	291f      	cmp	r1, #31
   dc7dc:	dc2d      	bgt.n	dc83a <__ieee754_fmod+0x1fe>
   dc7de:	f1c1 0320 	rsb	r3, r1, #32
   dc7e2:	fa0b fb01 	lsl.w	fp, fp, r1
   dc7e6:	fa2a f303 	lsr.w	r3, sl, r3
   dc7ea:	ea43 030b 	orr.w	r3, r3, fp
   dc7ee:	fa0a f101 	lsl.w	r1, sl, r1
   dc7f2:	e798      	b.n	dc726 <__ieee754_fmod+0xea>
   dc7f4:	4c2a      	ldr	r4, [pc, #168]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc7f6:	ebcc 0404 	rsb	r4, ip, r4
   dc7fa:	2c1f      	cmp	r4, #31
   dc7fc:	dc15      	bgt.n	dc82a <__ieee754_fmod+0x1ee>
   dc7fe:	f1c4 0220 	rsb	r2, r4, #32
   dc802:	fa09 f504 	lsl.w	r5, r9, r4
   dc806:	fa28 f202 	lsr.w	r2, r8, r2
   dc80a:	4315      	orrs	r5, r2
   dc80c:	fa08 fe04 	lsl.w	lr, r8, r4
   dc810:	e790      	b.n	dc734 <__ieee754_fmod+0xf8>
   dc812:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   dc816:	2b00      	cmp	r3, #0
   dc818:	4821      	ldr	r0, [pc, #132]	; (dc8a0 <__ieee754_fmod+0x264>)
   dc81a:	f77f af66 	ble.w	dc6ea <__ieee754_fmod+0xae>
   dc81e:	005b      	lsls	r3, r3, #1
   dc820:	2b00      	cmp	r3, #0
   dc822:	f100 30ff 	add.w	r0, r0, #4294967295
   dc826:	dcfa      	bgt.n	dc81e <__ieee754_fmod+0x1e2>
   dc828:	e75f      	b.n	dc6ea <__ieee754_fmod+0xae>
   dc82a:	4d1f      	ldr	r5, [pc, #124]	; (dc8a8 <__ieee754_fmod+0x26c>)
   dc82c:	ebcc 0505 	rsb	r5, ip, r5
   dc830:	fa08 f505 	lsl.w	r5, r8, r5
   dc834:	f04f 0e00 	mov.w	lr, #0
   dc838:	e77c      	b.n	dc734 <__ieee754_fmod+0xf8>
   dc83a:	4b1b      	ldr	r3, [pc, #108]	; (dc8a8 <__ieee754_fmod+0x26c>)
   dc83c:	1a1b      	subs	r3, r3, r0
   dc83e:	fa0a f303 	lsl.w	r3, sl, r3
   dc842:	2100      	movs	r1, #0
   dc844:	e76f      	b.n	dc726 <__ieee754_fmod+0xea>
   dc846:	f8df c058 	ldr.w	ip, [pc, #88]	; dc8a0 <__ieee754_fmod+0x264>
   dc84a:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   dc84e:	005b      	lsls	r3, r3, #1
   dc850:	2b00      	cmp	r3, #0
   dc852:	f10c 3cff 	add.w	ip, ip, #4294967295
   dc856:	dcfa      	bgt.n	dc84e <__ieee754_fmod+0x212>
   dc858:	e75e      	b.n	dc718 <__ieee754_fmod+0xdc>
   dc85a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   dc85e:	432e      	orrs	r6, r5
   dc860:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   dc864:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   dc868:	460a      	mov	r2, r1
   dc86a:	ec43 2b10 	vmov	d0, r2, r3
   dc86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc872:	2a1f      	cmp	r2, #31
   dc874:	dc07      	bgt.n	dc886 <__ieee754_fmod+0x24a>
   dc876:	f1c2 0320 	rsb	r3, r2, #32
   dc87a:	409d      	lsls	r5, r3
   dc87c:	40d1      	lsrs	r1, r2
   dc87e:	ea45 0301 	orr.w	r3, r5, r1
   dc882:	4635      	mov	r5, r6
   dc884:	e7a0      	b.n	dc7c8 <__ieee754_fmod+0x18c>
   dc886:	4b08      	ldr	r3, [pc, #32]	; (dc8a8 <__ieee754_fmod+0x26c>)
   dc888:	ebcc 0303 	rsb	r3, ip, r3
   dc88c:	fa45 f303 	asr.w	r3, r5, r3
   dc890:	4635      	mov	r5, r6
   dc892:	e799      	b.n	dc7c8 <__ieee754_fmod+0x18c>
   dc894:	7fefffff 	.word	0x7fefffff
   dc898:	000e4178 	.word	0x000e4178
   dc89c:	fffffbed 	.word	0xfffffbed
   dc8a0:	fffffc02 	.word	0xfffffc02
   dc8a4:	000fffff 	.word	0x000fffff
   dc8a8:	fffffbe2 	.word	0xfffffbe2
   dc8ac:	7ff00000 	.word	0x7ff00000

000dc8b0 <__ieee754_log>:
   dc8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8b4:	ec51 0b10 	vmov	r0, r1, d0
   dc8b8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc8bc:	b085      	sub	sp, #20
   dc8be:	460b      	mov	r3, r1
   dc8c0:	da59      	bge.n	dc976 <__ieee754_log+0xc6>
   dc8c2:	ee10 2a10 	vmov	r2, s0
   dc8c6:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   dc8ca:	4322      	orrs	r2, r4
   dc8cc:	f000 80f8 	beq.w	dcac0 <__ieee754_log+0x210>
   dc8d0:	2900      	cmp	r1, #0
   dc8d2:	f2c0 8180 	blt.w	dcbd6 <__ieee754_log+0x326>
   dc8d6:	2200      	movs	r2, #0
   dc8d8:	4bdd      	ldr	r3, [pc, #884]	; (dcc50 <__ieee754_log+0x3a0>)
   dc8da:	4cde      	ldr	r4, [pc, #888]	; (dcc54 <__ieee754_log+0x3a4>)
   dc8dc:	f003 f94c 	bl	dfb78 <__aeabi_dmul>
   dc8e0:	460b      	mov	r3, r1
   dc8e2:	42a3      	cmp	r3, r4
   dc8e4:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dc8e8:	dc4a      	bgt.n	dc980 <__ieee754_log+0xd0>
   dc8ea:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dc8ee:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   dc8f2:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   dc8f6:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   dc8fa:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   dc8fe:	151b      	asrs	r3, r3, #20
   dc900:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   dc904:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dc908:	ea44 0105 	orr.w	r1, r4, r5
   dc90c:	189c      	adds	r4, r3, r2
   dc90e:	2200      	movs	r2, #0
   dc910:	4bd1      	ldr	r3, [pc, #836]	; (dcc58 <__ieee754_log+0x3a8>)
   dc912:	f002 ff7d 	bl	df810 <__aeabi_dsub>
   dc916:	1cab      	adds	r3, r5, #2
   dc918:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dc91c:	2b02      	cmp	r3, #2
   dc91e:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   dc922:	4682      	mov	sl, r0
   dc924:	468b      	mov	fp, r1
   dc926:	f04f 0200 	mov.w	r2, #0
   dc92a:	dc32      	bgt.n	dc992 <__ieee754_log+0xe2>
   dc92c:	2300      	movs	r3, #0
   dc92e:	f003 fb8b 	bl	e0048 <__aeabi_dcmpeq>
   dc932:	2800      	cmp	r0, #0
   dc934:	f000 80cf 	beq.w	dcad6 <__ieee754_log+0x226>
   dc938:	2c00      	cmp	r4, #0
   dc93a:	f000 8158 	beq.w	dcbee <__ieee754_log+0x33e>
   dc93e:	4620      	mov	r0, r4
   dc940:	f003 f8b4 	bl	dfaac <__aeabi_i2d>
   dc944:	a3ac      	add	r3, pc, #688	; (adr r3, dcbf8 <__ieee754_log+0x348>)
   dc946:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc94a:	4606      	mov	r6, r0
   dc94c:	460f      	mov	r7, r1
   dc94e:	f003 f913 	bl	dfb78 <__aeabi_dmul>
   dc952:	a3ab      	add	r3, pc, #684	; (adr r3, dcc00 <__ieee754_log+0x350>)
   dc954:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc958:	4604      	mov	r4, r0
   dc95a:	460d      	mov	r5, r1
   dc95c:	4630      	mov	r0, r6
   dc95e:	4639      	mov	r1, r7
   dc960:	f003 f90a 	bl	dfb78 <__aeabi_dmul>
   dc964:	4602      	mov	r2, r0
   dc966:	460b      	mov	r3, r1
   dc968:	4620      	mov	r0, r4
   dc96a:	4629      	mov	r1, r5
   dc96c:	f002 ff52 	bl	df814 <__adddf3>
   dc970:	ec41 0b10 	vmov	d0, r0, r1
   dc974:	e00a      	b.n	dc98c <__ieee754_log+0xdc>
   dc976:	4cb7      	ldr	r4, [pc, #732]	; (dcc54 <__ieee754_log+0x3a4>)
   dc978:	42a3      	cmp	r3, r4
   dc97a:	f04f 0200 	mov.w	r2, #0
   dc97e:	ddb4      	ble.n	dc8ea <__ieee754_log+0x3a>
   dc980:	4602      	mov	r2, r0
   dc982:	460b      	mov	r3, r1
   dc984:	f002 ff46 	bl	df814 <__adddf3>
   dc988:	ec41 0b10 	vmov	d0, r0, r1
   dc98c:	b005      	add	sp, #20
   dc98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc996:	f002 ff3d 	bl	df814 <__adddf3>
   dc99a:	4602      	mov	r2, r0
   dc99c:	460b      	mov	r3, r1
   dc99e:	4650      	mov	r0, sl
   dc9a0:	4659      	mov	r1, fp
   dc9a2:	f003 fa13 	bl	dfdcc <__aeabi_ddiv>
   dc9a6:	4606      	mov	r6, r0
   dc9a8:	4620      	mov	r0, r4
   dc9aa:	460f      	mov	r7, r1
   dc9ac:	f003 f87e 	bl	dfaac <__aeabi_i2d>
   dc9b0:	4632      	mov	r2, r6
   dc9b2:	e9cd 0100 	strd	r0, r1, [sp]
   dc9b6:	463b      	mov	r3, r7
   dc9b8:	4630      	mov	r0, r6
   dc9ba:	4639      	mov	r1, r7
   dc9bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dc9c0:	f003 f8da 	bl	dfb78 <__aeabi_dmul>
   dc9c4:	4602      	mov	r2, r0
   dc9c6:	460b      	mov	r3, r1
   dc9c8:	4680      	mov	r8, r0
   dc9ca:	4689      	mov	r9, r1
   dc9cc:	f003 f8d4 	bl	dfb78 <__aeabi_dmul>
   dc9d0:	a38d      	add	r3, pc, #564	; (adr r3, dcc08 <__ieee754_log+0x358>)
   dc9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9d6:	4606      	mov	r6, r0
   dc9d8:	460f      	mov	r7, r1
   dc9da:	f003 f8cd 	bl	dfb78 <__aeabi_dmul>
   dc9de:	a38c      	add	r3, pc, #560	; (adr r3, dcc10 <__ieee754_log+0x360>)
   dc9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9e4:	f002 ff16 	bl	df814 <__adddf3>
   dc9e8:	4632      	mov	r2, r6
   dc9ea:	463b      	mov	r3, r7
   dc9ec:	f003 f8c4 	bl	dfb78 <__aeabi_dmul>
   dc9f0:	a389      	add	r3, pc, #548	; (adr r3, dcc18 <__ieee754_log+0x368>)
   dc9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9f6:	f002 ff0d 	bl	df814 <__adddf3>
   dc9fa:	4632      	mov	r2, r6
   dc9fc:	463b      	mov	r3, r7
   dc9fe:	f003 f8bb 	bl	dfb78 <__aeabi_dmul>
   dca02:	a387      	add	r3, pc, #540	; (adr r3, dcc20 <__ieee754_log+0x370>)
   dca04:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca08:	f002 ff04 	bl	df814 <__adddf3>
   dca0c:	4642      	mov	r2, r8
   dca0e:	464b      	mov	r3, r9
   dca10:	f003 f8b2 	bl	dfb78 <__aeabi_dmul>
   dca14:	a384      	add	r3, pc, #528	; (adr r3, dcc28 <__ieee754_log+0x378>)
   dca16:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca1a:	4680      	mov	r8, r0
   dca1c:	4689      	mov	r9, r1
   dca1e:	4630      	mov	r0, r6
   dca20:	4639      	mov	r1, r7
   dca22:	f003 f8a9 	bl	dfb78 <__aeabi_dmul>
   dca26:	a382      	add	r3, pc, #520	; (adr r3, dcc30 <__ieee754_log+0x380>)
   dca28:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca2c:	f002 fef2 	bl	df814 <__adddf3>
   dca30:	4632      	mov	r2, r6
   dca32:	463b      	mov	r3, r7
   dca34:	f003 f8a0 	bl	dfb78 <__aeabi_dmul>
   dca38:	a37f      	add	r3, pc, #508	; (adr r3, dcc38 <__ieee754_log+0x388>)
   dca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca3e:	f002 fee9 	bl	df814 <__adddf3>
   dca42:	4632      	mov	r2, r6
   dca44:	463b      	mov	r3, r7
   dca46:	f003 f897 	bl	dfb78 <__aeabi_dmul>
   dca4a:	460b      	mov	r3, r1
   dca4c:	4602      	mov	r2, r0
   dca4e:	4649      	mov	r1, r9
   dca50:	4640      	mov	r0, r8
   dca52:	f002 fedf 	bl	df814 <__adddf3>
   dca56:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   dca5a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   dca5e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   dca62:	3551      	adds	r5, #81	; 0x51
   dca64:	431d      	orrs	r5, r3
   dca66:	2d00      	cmp	r5, #0
   dca68:	4680      	mov	r8, r0
   dca6a:	4689      	mov	r9, r1
   dca6c:	dd5c      	ble.n	dcb28 <__ieee754_log+0x278>
   dca6e:	2200      	movs	r2, #0
   dca70:	4b7a      	ldr	r3, [pc, #488]	; (dcc5c <__ieee754_log+0x3ac>)
   dca72:	4650      	mov	r0, sl
   dca74:	4659      	mov	r1, fp
   dca76:	f003 f87f 	bl	dfb78 <__aeabi_dmul>
   dca7a:	4652      	mov	r2, sl
   dca7c:	465b      	mov	r3, fp
   dca7e:	f003 f87b 	bl	dfb78 <__aeabi_dmul>
   dca82:	4606      	mov	r6, r0
   dca84:	460f      	mov	r7, r1
   dca86:	2c00      	cmp	r4, #0
   dca88:	d16e      	bne.n	dcb68 <__ieee754_log+0x2b8>
   dca8a:	4632      	mov	r2, r6
   dca8c:	463b      	mov	r3, r7
   dca8e:	4640      	mov	r0, r8
   dca90:	4649      	mov	r1, r9
   dca92:	f002 febf 	bl	df814 <__adddf3>
   dca96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dca9a:	f003 f86d 	bl	dfb78 <__aeabi_dmul>
   dca9e:	4602      	mov	r2, r0
   dcaa0:	460b      	mov	r3, r1
   dcaa2:	4630      	mov	r0, r6
   dcaa4:	4639      	mov	r1, r7
   dcaa6:	f002 feb3 	bl	df810 <__aeabi_dsub>
   dcaaa:	4602      	mov	r2, r0
   dcaac:	460b      	mov	r3, r1
   dcaae:	4650      	mov	r0, sl
   dcab0:	4659      	mov	r1, fp
   dcab2:	f002 fead 	bl	df810 <__aeabi_dsub>
   dcab6:	ec41 0b10 	vmov	d0, r0, r1
   dcaba:	b005      	add	sp, #20
   dcabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcac0:	2200      	movs	r2, #0
   dcac2:	2300      	movs	r3, #0
   dcac4:	2000      	movs	r0, #0
   dcac6:	4966      	ldr	r1, [pc, #408]	; (dcc60 <__ieee754_log+0x3b0>)
   dcac8:	f003 f980 	bl	dfdcc <__aeabi_ddiv>
   dcacc:	ec41 0b10 	vmov	d0, r0, r1
   dcad0:	b005      	add	sp, #20
   dcad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcad6:	a35a      	add	r3, pc, #360	; (adr r3, dcc40 <__ieee754_log+0x390>)
   dcad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcadc:	4650      	mov	r0, sl
   dcade:	4659      	mov	r1, fp
   dcae0:	f003 f84a 	bl	dfb78 <__aeabi_dmul>
   dcae4:	4602      	mov	r2, r0
   dcae6:	460b      	mov	r3, r1
   dcae8:	2000      	movs	r0, #0
   dcaea:	495c      	ldr	r1, [pc, #368]	; (dcc5c <__ieee754_log+0x3ac>)
   dcaec:	f002 fe90 	bl	df810 <__aeabi_dsub>
   dcaf0:	4652      	mov	r2, sl
   dcaf2:	4606      	mov	r6, r0
   dcaf4:	460f      	mov	r7, r1
   dcaf6:	465b      	mov	r3, fp
   dcaf8:	4650      	mov	r0, sl
   dcafa:	4659      	mov	r1, fp
   dcafc:	f003 f83c 	bl	dfb78 <__aeabi_dmul>
   dcb00:	4602      	mov	r2, r0
   dcb02:	460b      	mov	r3, r1
   dcb04:	4630      	mov	r0, r6
   dcb06:	4639      	mov	r1, r7
   dcb08:	f003 f836 	bl	dfb78 <__aeabi_dmul>
   dcb0c:	4606      	mov	r6, r0
   dcb0e:	460f      	mov	r7, r1
   dcb10:	2c00      	cmp	r4, #0
   dcb12:	f040 80a7 	bne.w	dcc64 <__ieee754_log+0x3b4>
   dcb16:	4602      	mov	r2, r0
   dcb18:	460b      	mov	r3, r1
   dcb1a:	4650      	mov	r0, sl
   dcb1c:	4659      	mov	r1, fp
   dcb1e:	f002 fe77 	bl	df810 <__aeabi_dsub>
   dcb22:	ec41 0b10 	vmov	d0, r0, r1
   dcb26:	e731      	b.n	dc98c <__ieee754_log+0xdc>
   dcb28:	2c00      	cmp	r4, #0
   dcb2a:	f000 80af 	beq.w	dcc8c <__ieee754_log+0x3dc>
   dcb2e:	a332      	add	r3, pc, #200	; (adr r3, dcbf8 <__ieee754_log+0x348>)
   dcb30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb34:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcb38:	f003 f81e 	bl	dfb78 <__aeabi_dmul>
   dcb3c:	4642      	mov	r2, r8
   dcb3e:	464b      	mov	r3, r9
   dcb40:	4604      	mov	r4, r0
   dcb42:	460d      	mov	r5, r1
   dcb44:	4650      	mov	r0, sl
   dcb46:	4659      	mov	r1, fp
   dcb48:	f002 fe62 	bl	df810 <__aeabi_dsub>
   dcb4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dcb50:	f003 f812 	bl	dfb78 <__aeabi_dmul>
   dcb54:	a32a      	add	r3, pc, #168	; (adr r3, dcc00 <__ieee754_log+0x350>)
   dcb56:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb5a:	4606      	mov	r6, r0
   dcb5c:	460f      	mov	r7, r1
   dcb5e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcb62:	f003 f809 	bl	dfb78 <__aeabi_dmul>
   dcb66:	e021      	b.n	dcbac <__ieee754_log+0x2fc>
   dcb68:	a323      	add	r3, pc, #140	; (adr r3, dcbf8 <__ieee754_log+0x348>)
   dcb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb6e:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcb72:	f003 f801 	bl	dfb78 <__aeabi_dmul>
   dcb76:	4632      	mov	r2, r6
   dcb78:	463b      	mov	r3, r7
   dcb7a:	4604      	mov	r4, r0
   dcb7c:	460d      	mov	r5, r1
   dcb7e:	4640      	mov	r0, r8
   dcb80:	4649      	mov	r1, r9
   dcb82:	f002 fe47 	bl	df814 <__adddf3>
   dcb86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dcb8a:	f002 fff5 	bl	dfb78 <__aeabi_dmul>
   dcb8e:	a31c      	add	r3, pc, #112	; (adr r3, dcc00 <__ieee754_log+0x350>)
   dcb90:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcb94:	4680      	mov	r8, r0
   dcb96:	4689      	mov	r9, r1
   dcb98:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcb9c:	f002 ffec 	bl	dfb78 <__aeabi_dmul>
   dcba0:	4602      	mov	r2, r0
   dcba2:	460b      	mov	r3, r1
   dcba4:	4640      	mov	r0, r8
   dcba6:	4649      	mov	r1, r9
   dcba8:	f002 fe34 	bl	df814 <__adddf3>
   dcbac:	4602      	mov	r2, r0
   dcbae:	460b      	mov	r3, r1
   dcbb0:	4630      	mov	r0, r6
   dcbb2:	4639      	mov	r1, r7
   dcbb4:	f002 fe2c 	bl	df810 <__aeabi_dsub>
   dcbb8:	4652      	mov	r2, sl
   dcbba:	465b      	mov	r3, fp
   dcbbc:	f002 fe28 	bl	df810 <__aeabi_dsub>
   dcbc0:	4602      	mov	r2, r0
   dcbc2:	460b      	mov	r3, r1
   dcbc4:	4620      	mov	r0, r4
   dcbc6:	4629      	mov	r1, r5
   dcbc8:	f002 fe22 	bl	df810 <__aeabi_dsub>
   dcbcc:	ec41 0b10 	vmov	d0, r0, r1
   dcbd0:	b005      	add	sp, #20
   dcbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcbd6:	ee10 2a10 	vmov	r2, s0
   dcbda:	460b      	mov	r3, r1
   dcbdc:	f002 fe18 	bl	df810 <__aeabi_dsub>
   dcbe0:	2200      	movs	r2, #0
   dcbe2:	2300      	movs	r3, #0
   dcbe4:	f003 f8f2 	bl	dfdcc <__aeabi_ddiv>
   dcbe8:	ec41 0b10 	vmov	d0, r0, r1
   dcbec:	e6ce      	b.n	dc98c <__ieee754_log+0xdc>
   dcbee:	ed9f 0b16 	vldr	d0, [pc, #88]	; dcc48 <__ieee754_log+0x398>
   dcbf2:	e6cb      	b.n	dc98c <__ieee754_log+0xdc>
   dcbf4:	f3af 8000 	nop.w
   dcbf8:	fee00000 	.word	0xfee00000
   dcbfc:	3fe62e42 	.word	0x3fe62e42
   dcc00:	35793c76 	.word	0x35793c76
   dcc04:	3dea39ef 	.word	0x3dea39ef
   dcc08:	df3e5244 	.word	0xdf3e5244
   dcc0c:	3fc2f112 	.word	0x3fc2f112
   dcc10:	96cb03de 	.word	0x96cb03de
   dcc14:	3fc74664 	.word	0x3fc74664
   dcc18:	94229359 	.word	0x94229359
   dcc1c:	3fd24924 	.word	0x3fd24924
   dcc20:	55555593 	.word	0x55555593
   dcc24:	3fe55555 	.word	0x3fe55555
   dcc28:	d078c69f 	.word	0xd078c69f
   dcc2c:	3fc39a09 	.word	0x3fc39a09
   dcc30:	1d8e78af 	.word	0x1d8e78af
   dcc34:	3fcc71c5 	.word	0x3fcc71c5
   dcc38:	9997fa04 	.word	0x9997fa04
   dcc3c:	3fd99999 	.word	0x3fd99999
   dcc40:	55555555 	.word	0x55555555
   dcc44:	3fd55555 	.word	0x3fd55555
	...
   dcc50:	43500000 	.word	0x43500000
   dcc54:	7fefffff 	.word	0x7fefffff
   dcc58:	3ff00000 	.word	0x3ff00000
   dcc5c:	3fe00000 	.word	0x3fe00000
   dcc60:	c3500000 	.word	0xc3500000
   dcc64:	4620      	mov	r0, r4
   dcc66:	f002 ff21 	bl	dfaac <__aeabi_i2d>
   dcc6a:	a30f      	add	r3, pc, #60	; (adr r3, dcca8 <__ieee754_log+0x3f8>)
   dcc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcc70:	4680      	mov	r8, r0
   dcc72:	4689      	mov	r9, r1
   dcc74:	f002 ff80 	bl	dfb78 <__aeabi_dmul>
   dcc78:	a30d      	add	r3, pc, #52	; (adr r3, dccb0 <__ieee754_log+0x400>)
   dcc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcc7e:	4604      	mov	r4, r0
   dcc80:	460d      	mov	r5, r1
   dcc82:	4640      	mov	r0, r8
   dcc84:	4649      	mov	r1, r9
   dcc86:	f002 ff77 	bl	dfb78 <__aeabi_dmul>
   dcc8a:	e78f      	b.n	dcbac <__ieee754_log+0x2fc>
   dcc8c:	4602      	mov	r2, r0
   dcc8e:	460b      	mov	r3, r1
   dcc90:	4650      	mov	r0, sl
   dcc92:	4659      	mov	r1, fp
   dcc94:	f002 fdbc 	bl	df810 <__aeabi_dsub>
   dcc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dcc9c:	f002 ff6c 	bl	dfb78 <__aeabi_dmul>
   dcca0:	e703      	b.n	dcaaa <__ieee754_log+0x1fa>
   dcca2:	bf00      	nop
   dcca4:	f3af 8000 	nop.w
   dcca8:	fee00000 	.word	0xfee00000
   dccac:	3fe62e42 	.word	0x3fe62e42
   dccb0:	35793c76 	.word	0x35793c76
   dccb4:	3dea39ef 	.word	0x3dea39ef

000dccb8 <__ieee754_log10>:
   dccb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dccbc:	ec55 4b10 	vmov	r4, r5, d0
   dccc0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   dccc4:	b083      	sub	sp, #12
   dccc6:	462b      	mov	r3, r5
   dccc8:	da21      	bge.n	dcd0e <__ieee754_log10+0x56>
   dccca:	ee10 2a10 	vmov	r2, s0
   dccce:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   dccd2:	430a      	orrs	r2, r1
   dccd4:	d064      	beq.n	dcda0 <__ieee754_log10+0xe8>
   dccd6:	2d00      	cmp	r5, #0
   dccd8:	db6d      	blt.n	dcdb6 <__ieee754_log10+0xfe>
   dccda:	4629      	mov	r1, r5
   dccdc:	2200      	movs	r2, #0
   dccde:	4b44      	ldr	r3, [pc, #272]	; (dcdf0 <__ieee754_log10+0x138>)
   dcce0:	ee10 0a10 	vmov	r0, s0
   dcce4:	f002 ff48 	bl	dfb78 <__aeabi_dmul>
   dcce8:	460b      	mov	r3, r1
   dccea:	460d      	mov	r5, r1
   dccec:	4941      	ldr	r1, [pc, #260]	; (dcdf4 <__ieee754_log10+0x13c>)
   dccee:	428b      	cmp	r3, r1
   dccf0:	4604      	mov	r4, r0
   dccf2:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dccf6:	dd0f      	ble.n	dcd18 <__ieee754_log10+0x60>
   dccf8:	4622      	mov	r2, r4
   dccfa:	462b      	mov	r3, r5
   dccfc:	4620      	mov	r0, r4
   dccfe:	4629      	mov	r1, r5
   dcd00:	f002 fd88 	bl	df814 <__adddf3>
   dcd04:	ec41 0b10 	vmov	d0, r0, r1
   dcd08:	b003      	add	sp, #12
   dcd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcd0e:	4939      	ldr	r1, [pc, #228]	; (dcdf4 <__ieee754_log10+0x13c>)
   dcd10:	428b      	cmp	r3, r1
   dcd12:	f04f 0200 	mov.w	r2, #0
   dcd16:	dcef      	bgt.n	dccf8 <__ieee754_log10+0x40>
   dcd18:	1518      	asrs	r0, r3, #20
   dcd1a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dcd1e:	4410      	add	r0, r2
   dcd20:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   dcd24:	4448      	add	r0, r9
   dcd26:	f3c3 0813 	ubfx	r8, r3, #0, #20
   dcd2a:	f002 febf 	bl	dfaac <__aeabi_i2d>
   dcd2e:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   dcd32:	3303      	adds	r3, #3
   dcd34:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   dcd38:	ec45 4b10 	vmov	d0, r4, r5
   dcd3c:	4606      	mov	r6, r0
   dcd3e:	460f      	mov	r7, r1
   dcd40:	f7ff fdb6 	bl	dc8b0 <__ieee754_log>
   dcd44:	4630      	mov	r0, r6
   dcd46:	4639      	mov	r1, r7
   dcd48:	a323      	add	r3, pc, #140	; (adr r3, dcdd8 <__ieee754_log10+0x120>)
   dcd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd4e:	ed8d 0b00 	vstr	d0, [sp]
   dcd52:	f002 ff11 	bl	dfb78 <__aeabi_dmul>
   dcd56:	ed9d 0b00 	vldr	d0, [sp]
   dcd5a:	4604      	mov	r4, r0
   dcd5c:	460d      	mov	r5, r1
   dcd5e:	a320      	add	r3, pc, #128	; (adr r3, dcde0 <__ieee754_log10+0x128>)
   dcd60:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd64:	ec51 0b10 	vmov	r0, r1, d0
   dcd68:	f002 ff06 	bl	dfb78 <__aeabi_dmul>
   dcd6c:	4602      	mov	r2, r0
   dcd6e:	460b      	mov	r3, r1
   dcd70:	4620      	mov	r0, r4
   dcd72:	4629      	mov	r1, r5
   dcd74:	f002 fd4e 	bl	df814 <__adddf3>
   dcd78:	a31b      	add	r3, pc, #108	; (adr r3, dcde8 <__ieee754_log10+0x130>)
   dcd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcd7e:	4604      	mov	r4, r0
   dcd80:	460d      	mov	r5, r1
   dcd82:	4630      	mov	r0, r6
   dcd84:	4639      	mov	r1, r7
   dcd86:	f002 fef7 	bl	dfb78 <__aeabi_dmul>
   dcd8a:	4602      	mov	r2, r0
   dcd8c:	460b      	mov	r3, r1
   dcd8e:	4620      	mov	r0, r4
   dcd90:	4629      	mov	r1, r5
   dcd92:	f002 fd3f 	bl	df814 <__adddf3>
   dcd96:	ec41 0b10 	vmov	d0, r0, r1
   dcd9a:	b003      	add	sp, #12
   dcd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcda0:	2200      	movs	r2, #0
   dcda2:	2300      	movs	r3, #0
   dcda4:	2000      	movs	r0, #0
   dcda6:	4914      	ldr	r1, [pc, #80]	; (dcdf8 <__ieee754_log10+0x140>)
   dcda8:	f003 f810 	bl	dfdcc <__aeabi_ddiv>
   dcdac:	ec41 0b10 	vmov	d0, r0, r1
   dcdb0:	b003      	add	sp, #12
   dcdb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcdb6:	ee10 2a10 	vmov	r2, s0
   dcdba:	462b      	mov	r3, r5
   dcdbc:	4620      	mov	r0, r4
   dcdbe:	4629      	mov	r1, r5
   dcdc0:	f002 fd26 	bl	df810 <__aeabi_dsub>
   dcdc4:	2200      	movs	r2, #0
   dcdc6:	2300      	movs	r3, #0
   dcdc8:	f003 f800 	bl	dfdcc <__aeabi_ddiv>
   dcdcc:	ec41 0b10 	vmov	d0, r0, r1
   dcdd0:	e79a      	b.n	dcd08 <__ieee754_log10+0x50>
   dcdd2:	bf00      	nop
   dcdd4:	f3af 8000 	nop.w
   dcdd8:	11f12b36 	.word	0x11f12b36
   dcddc:	3d59fef3 	.word	0x3d59fef3
   dcde0:	1526e50e 	.word	0x1526e50e
   dcde4:	3fdbcb7b 	.word	0x3fdbcb7b
   dcde8:	509f6000 	.word	0x509f6000
   dcdec:	3fd34413 	.word	0x3fd34413
   dcdf0:	43500000 	.word	0x43500000
   dcdf4:	7fefffff 	.word	0x7fefffff
   dcdf8:	c3500000 	.word	0xc3500000
   dcdfc:	00000000 	.word	0x00000000

000dce00 <__ieee754_pow>:
   dce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dce04:	ec51 0b11 	vmov	r0, r1, d1
   dce08:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dce0c:	ea58 0400 	orrs.w	r4, r8, r0
   dce10:	b093      	sub	sp, #76	; 0x4c
   dce12:	d03c      	beq.n	dce8e <__ieee754_pow+0x8e>
   dce14:	ec53 2b10 	vmov	r2, r3, d0
   dce18:	4e6d      	ldr	r6, [pc, #436]	; (dcfd0 <__ieee754_pow+0x1d0>)
   dce1a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dce1e:	42b4      	cmp	r4, r6
   dce20:	ee10 aa10 	vmov	sl, s0
   dce24:	461d      	mov	r5, r3
   dce26:	dc2b      	bgt.n	dce80 <__ieee754_pow+0x80>
   dce28:	4689      	mov	r9, r1
   dce2a:	ee11 ea10 	vmov	lr, s2
   dce2e:	d026      	beq.n	dce7e <__ieee754_pow+0x7e>
   dce30:	45b0      	cmp	r8, r6
   dce32:	dc25      	bgt.n	dce80 <__ieee754_pow+0x80>
   dce34:	4e66      	ldr	r6, [pc, #408]	; (dcfd0 <__ieee754_pow+0x1d0>)
   dce36:	45b0      	cmp	r8, r6
   dce38:	d077      	beq.n	dcf2a <__ieee754_pow+0x12a>
   dce3a:	2d00      	cmp	r5, #0
   dce3c:	4616      	mov	r6, r2
   dce3e:	461f      	mov	r7, r3
   dce40:	e9cd 0100 	strd	r0, r1, [sp]
   dce44:	db75      	blt.n	dcf32 <__ieee754_pow+0x132>
   dce46:	f04f 0b00 	mov.w	fp, #0
   dce4a:	f1be 0f00 	cmp.w	lr, #0
   dce4e:	d12d      	bne.n	dceac <__ieee754_pow+0xac>
   dce50:	4b5f      	ldr	r3, [pc, #380]	; (dcfd0 <__ieee754_pow+0x1d0>)
   dce52:	4598      	cmp	r8, r3
   dce54:	f000 8089 	beq.w	dcf6a <__ieee754_pow+0x16a>
   dce58:	4b5e      	ldr	r3, [pc, #376]	; (dcfd4 <__ieee754_pow+0x1d4>)
   dce5a:	4598      	cmp	r8, r3
   dce5c:	d05e      	beq.n	dcf1c <__ieee754_pow+0x11c>
   dce5e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   dce62:	f000 83de 	beq.w	dd622 <__ieee754_pow+0x822>
   dce66:	4b5c      	ldr	r3, [pc, #368]	; (dcfd8 <__ieee754_pow+0x1d8>)
   dce68:	4599      	cmp	r9, r3
   dce6a:	d11f      	bne.n	dceac <__ieee754_pow+0xac>
   dce6c:	2d00      	cmp	r5, #0
   dce6e:	db1d      	blt.n	dceac <__ieee754_pow+0xac>
   dce70:	ec47 6b10 	vmov	d0, r6, r7
   dce74:	b013      	add	sp, #76	; 0x4c
   dce76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dce7a:	f001 b855 	b.w	ddf28 <__ieee754_sqrt>
   dce7e:	b15a      	cbz	r2, dce98 <__ieee754_pow+0x98>
   dce80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   dce84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   dce88:	ea54 030a 	orrs.w	r3, r4, sl
   dce8c:	d106      	bne.n	dce9c <__ieee754_pow+0x9c>
   dce8e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; dcfb8 <__ieee754_pow+0x1b8>
   dce92:	b013      	add	sp, #76	; 0x4c
   dce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dce98:	45a0      	cmp	r8, r4
   dce9a:	ddcb      	ble.n	dce34 <__ieee754_pow+0x34>
   dce9c:	484f      	ldr	r0, [pc, #316]	; (dcfdc <__ieee754_pow+0x1dc>)
   dce9e:	b013      	add	sp, #76	; 0x4c
   dcea0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcea4:	f002 bb80 	b.w	df5a8 <nan>
   dcea8:	f04f 0b00 	mov.w	fp, #0
   dceac:	ec47 6b10 	vmov	d0, r6, r7
   dceb0:	f7fd fc5a 	bl	da768 <fabs>
   dceb4:	ec51 0b10 	vmov	r0, r1, d0
   dceb8:	f1ba 0f00 	cmp.w	sl, #0
   dcebc:	d01e      	beq.n	dcefc <__ieee754_pow+0xfc>
   dcebe:	0fed      	lsrs	r5, r5, #31
   dcec0:	f105 3aff 	add.w	sl, r5, #4294967295
   dcec4:	ea5b 030a 	orrs.w	r3, fp, sl
   dcec8:	d063      	beq.n	dcf92 <__ieee754_pow+0x192>
   dceca:	4b45      	ldr	r3, [pc, #276]	; (dcfe0 <__ieee754_pow+0x1e0>)
   dcecc:	4598      	cmp	r8, r3
   dcece:	f340 808d 	ble.w	dcfec <__ieee754_pow+0x1ec>
   dced2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   dced6:	4598      	cmp	r8, r3
   dced8:	f340 8438 	ble.w	dd74c <__ieee754_pow+0x94c>
   dcedc:	4b41      	ldr	r3, [pc, #260]	; (dcfe4 <__ieee754_pow+0x1e4>)
   dcede:	429c      	cmp	r4, r3
   dcee0:	dd62      	ble.n	dcfa8 <__ieee754_pow+0x1a8>
   dcee2:	f1b9 0f00 	cmp.w	r9, #0
   dcee6:	dd62      	ble.n	dcfae <__ieee754_pow+0x1ae>
   dcee8:	a335      	add	r3, pc, #212	; (adr r3, dcfc0 <__ieee754_pow+0x1c0>)
   dceea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dceee:	4610      	mov	r0, r2
   dcef0:	4619      	mov	r1, r3
   dcef2:	f002 fe41 	bl	dfb78 <__aeabi_dmul>
   dcef6:	ec41 0b10 	vmov	d0, r0, r1
   dcefa:	e7ca      	b.n	dce92 <__ieee754_pow+0x92>
   dcefc:	b124      	cbz	r4, dcf08 <__ieee754_pow+0x108>
   dcefe:	4b35      	ldr	r3, [pc, #212]	; (dcfd4 <__ieee754_pow+0x1d4>)
   dcf00:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   dcf04:	429a      	cmp	r2, r3
   dcf06:	d1da      	bne.n	dcebe <__ieee754_pow+0xbe>
   dcf08:	f1b9 0f00 	cmp.w	r9, #0
   dcf0c:	f2c0 83cb 	blt.w	dd6a6 <__ieee754_pow+0x8a6>
   dcf10:	2d00      	cmp	r5, #0
   dcf12:	f2c0 8374 	blt.w	dd5fe <__ieee754_pow+0x7fe>
   dcf16:	ec41 0b10 	vmov	d0, r0, r1
   dcf1a:	e7ba      	b.n	dce92 <__ieee754_pow+0x92>
   dcf1c:	f1b9 0f00 	cmp.w	r9, #0
   dcf20:	f2c0 847a 	blt.w	dd818 <__ieee754_pow+0xa18>
   dcf24:	ec47 6b10 	vmov	d0, r6, r7
   dcf28:	e7b3      	b.n	dce92 <__ieee754_pow+0x92>
   dcf2a:	f1be 0f00 	cmp.w	lr, #0
   dcf2e:	d084      	beq.n	dce3a <__ieee754_pow+0x3a>
   dcf30:	e7a6      	b.n	dce80 <__ieee754_pow+0x80>
   dcf32:	4b2d      	ldr	r3, [pc, #180]	; (dcfe8 <__ieee754_pow+0x1e8>)
   dcf34:	4598      	cmp	r8, r3
   dcf36:	dc29      	bgt.n	dcf8c <__ieee754_pow+0x18c>
   dcf38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   dcf3c:	4598      	cmp	r8, r3
   dcf3e:	dd82      	ble.n	dce46 <__ieee754_pow+0x46>
   dcf40:	ea4f 5328 	mov.w	r3, r8, asr #20
   dcf44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dcf48:	2b14      	cmp	r3, #20
   dcf4a:	f340 847f 	ble.w	dd84c <__ieee754_pow+0xa4c>
   dcf4e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   dcf52:	fa2e f203 	lsr.w	r2, lr, r3
   dcf56:	fa02 f303 	lsl.w	r3, r2, r3
   dcf5a:	459e      	cmp	lr, r3
   dcf5c:	f47f af73 	bne.w	dce46 <__ieee754_pow+0x46>
   dcf60:	f002 0201 	and.w	r2, r2, #1
   dcf64:	f1c2 0b02 	rsb	fp, r2, #2
   dcf68:	e76f      	b.n	dce4a <__ieee754_pow+0x4a>
   dcf6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   dcf6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dcf72:	ea53 030a 	orrs.w	r3, r3, sl
   dcf76:	d08a      	beq.n	dce8e <__ieee754_pow+0x8e>
   dcf78:	4b1a      	ldr	r3, [pc, #104]	; (dcfe4 <__ieee754_pow+0x1e4>)
   dcf7a:	429c      	cmp	r4, r3
   dcf7c:	f340 8385 	ble.w	dd68a <__ieee754_pow+0x88a>
   dcf80:	f1b9 0f00 	cmp.w	r9, #0
   dcf84:	db13      	blt.n	dcfae <__ieee754_pow+0x1ae>
   dcf86:	ed9d 0b00 	vldr	d0, [sp]
   dcf8a:	e782      	b.n	dce92 <__ieee754_pow+0x92>
   dcf8c:	f04f 0b02 	mov.w	fp, #2
   dcf90:	e75b      	b.n	dce4a <__ieee754_pow+0x4a>
   dcf92:	4632      	mov	r2, r6
   dcf94:	463b      	mov	r3, r7
   dcf96:	4610      	mov	r0, r2
   dcf98:	4619      	mov	r1, r3
   dcf9a:	f002 fc39 	bl	df810 <__aeabi_dsub>
   dcf9e:	4602      	mov	r2, r0
   dcfa0:	460b      	mov	r3, r1
   dcfa2:	f002 ff13 	bl	dfdcc <__aeabi_ddiv>
   dcfa6:	e7b6      	b.n	dcf16 <__ieee754_pow+0x116>
   dcfa8:	f1b9 0f00 	cmp.w	r9, #0
   dcfac:	db9c      	blt.n	dcee8 <__ieee754_pow+0xe8>
   dcfae:	ed9f 0b06 	vldr	d0, [pc, #24]	; dcfc8 <__ieee754_pow+0x1c8>
   dcfb2:	e76e      	b.n	dce92 <__ieee754_pow+0x92>
   dcfb4:	f3af 8000 	nop.w
   dcfb8:	00000000 	.word	0x00000000
   dcfbc:	3ff00000 	.word	0x3ff00000
   dcfc0:	8800759c 	.word	0x8800759c
   dcfc4:	7e37e43c 	.word	0x7e37e43c
	...
   dcfd0:	7ff00000 	.word	0x7ff00000
   dcfd4:	3ff00000 	.word	0x3ff00000
   dcfd8:	3fe00000 	.word	0x3fe00000
   dcfdc:	000e4120 	.word	0x000e4120
   dcfe0:	41e00000 	.word	0x41e00000
   dcfe4:	3fefffff 	.word	0x3fefffff
   dcfe8:	433fffff 	.word	0x433fffff
   dcfec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   dcff0:	f04f 0200 	mov.w	r2, #0
   dcff4:	da05      	bge.n	dd002 <__ieee754_pow+0x202>
   dcff6:	4bd6      	ldr	r3, [pc, #856]	; (dd350 <__ieee754_pow+0x550>)
   dcff8:	f002 fdbe 	bl	dfb78 <__aeabi_dmul>
   dcffc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   dd000:	460c      	mov	r4, r1
   dd002:	1523      	asrs	r3, r4, #20
   dd004:	4ed3      	ldr	r6, [pc, #844]	; (dd354 <__ieee754_pow+0x554>)
   dd006:	f3c4 0413 	ubfx	r4, r4, #0, #20
   dd00a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dd00e:	4413      	add	r3, r2
   dd010:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   dd014:	42b4      	cmp	r4, r6
   dd016:	461a      	mov	r2, r3
   dd018:	930d      	str	r3, [sp, #52]	; 0x34
   dd01a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   dd01e:	f340 8349 	ble.w	dd6b4 <__ieee754_pow+0x8b4>
   dd022:	4bcd      	ldr	r3, [pc, #820]	; (dd358 <__ieee754_pow+0x558>)
   dd024:	429c      	cmp	r4, r3
   dd026:	f340 842d 	ble.w	dd884 <__ieee754_pow+0xa84>
   dd02a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; dd2f8 <__ieee754_pow+0x4f8>
   dd02e:	ed8d 7b08 	vstr	d7, [sp, #32]
   dd032:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   dd036:	ed9f 7bb2 	vldr	d7, [pc, #712]	; dd300 <__ieee754_pow+0x500>
   dd03a:	4613      	mov	r3, r2
   dd03c:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd040:	3301      	adds	r3, #1
   dd042:	930d      	str	r3, [sp, #52]	; 0x34
   dd044:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   dd048:	f04f 0800 	mov.w	r8, #0
   dd04c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   dd050:	4629      	mov	r1, r5
   dd052:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   dd056:	f002 fbdb 	bl	df810 <__aeabi_dsub>
   dd05a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   dd05e:	4606      	mov	r6, r0
   dd060:	460f      	mov	r7, r1
   dd062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd066:	f002 fbd5 	bl	df814 <__adddf3>
   dd06a:	4602      	mov	r2, r0
   dd06c:	460b      	mov	r3, r1
   dd06e:	2000      	movs	r0, #0
   dd070:	49ba      	ldr	r1, [pc, #744]	; (dd35c <__ieee754_pow+0x55c>)
   dd072:	f002 feab 	bl	dfdcc <__aeabi_ddiv>
   dd076:	4603      	mov	r3, r0
   dd078:	460c      	mov	r4, r1
   dd07a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   dd07e:	4602      	mov	r2, r0
   dd080:	460b      	mov	r3, r1
   dd082:	4630      	mov	r0, r6
   dd084:	4639      	mov	r1, r7
   dd086:	f002 fd77 	bl	dfb78 <__aeabi_dmul>
   dd08a:	106b      	asrs	r3, r5, #1
   dd08c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   dd090:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   dd094:	eb03 0508 	add.w	r5, r3, r8
   dd098:	460a      	mov	r2, r1
   dd09a:	2300      	movs	r3, #0
   dd09c:	4601      	mov	r1, r0
   dd09e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   dd0a2:	9302      	str	r3, [sp, #8]
   dd0a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   dd0a8:	2400      	movs	r4, #0
   dd0aa:	e9cd 1204 	strd	r1, r2, [sp, #16]
   dd0ae:	462b      	mov	r3, r5
   dd0b0:	4622      	mov	r2, r4
   dd0b2:	4640      	mov	r0, r8
   dd0b4:	4649      	mov	r1, r9
   dd0b6:	f002 fd5f 	bl	dfb78 <__aeabi_dmul>
   dd0ba:	4602      	mov	r2, r0
   dd0bc:	460b      	mov	r3, r1
   dd0be:	4630      	mov	r0, r6
   dd0c0:	4639      	mov	r1, r7
   dd0c2:	f002 fba5 	bl	df810 <__aeabi_dsub>
   dd0c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   dd0ca:	4606      	mov	r6, r0
   dd0cc:	460f      	mov	r7, r1
   dd0ce:	4620      	mov	r0, r4
   dd0d0:	4629      	mov	r1, r5
   dd0d2:	f002 fb9d 	bl	df810 <__aeabi_dsub>
   dd0d6:	4602      	mov	r2, r0
   dd0d8:	460b      	mov	r3, r1
   dd0da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd0de:	f002 fb97 	bl	df810 <__aeabi_dsub>
   dd0e2:	4642      	mov	r2, r8
   dd0e4:	464b      	mov	r3, r9
   dd0e6:	f002 fd47 	bl	dfb78 <__aeabi_dmul>
   dd0ea:	4602      	mov	r2, r0
   dd0ec:	460b      	mov	r3, r1
   dd0ee:	4630      	mov	r0, r6
   dd0f0:	4639      	mov	r1, r7
   dd0f2:	f002 fb8d 	bl	df810 <__aeabi_dsub>
   dd0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   dd0fa:	f002 fd3d 	bl	dfb78 <__aeabi_dmul>
   dd0fe:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   dd102:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd106:	4622      	mov	r2, r4
   dd108:	462b      	mov	r3, r5
   dd10a:	4620      	mov	r0, r4
   dd10c:	4629      	mov	r1, r5
   dd10e:	f002 fd33 	bl	dfb78 <__aeabi_dmul>
   dd112:	a37d      	add	r3, pc, #500	; (adr r3, dd308 <__ieee754_pow+0x508>)
   dd114:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd118:	4604      	mov	r4, r0
   dd11a:	460d      	mov	r5, r1
   dd11c:	f002 fd2c 	bl	dfb78 <__aeabi_dmul>
   dd120:	a37b      	add	r3, pc, #492	; (adr r3, dd310 <__ieee754_pow+0x510>)
   dd122:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd126:	f002 fb75 	bl	df814 <__adddf3>
   dd12a:	4622      	mov	r2, r4
   dd12c:	462b      	mov	r3, r5
   dd12e:	f002 fd23 	bl	dfb78 <__aeabi_dmul>
   dd132:	a379      	add	r3, pc, #484	; (adr r3, dd318 <__ieee754_pow+0x518>)
   dd134:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd138:	f002 fb6c 	bl	df814 <__adddf3>
   dd13c:	4622      	mov	r2, r4
   dd13e:	462b      	mov	r3, r5
   dd140:	f002 fd1a 	bl	dfb78 <__aeabi_dmul>
   dd144:	a376      	add	r3, pc, #472	; (adr r3, dd320 <__ieee754_pow+0x520>)
   dd146:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd14a:	f002 fb63 	bl	df814 <__adddf3>
   dd14e:	4622      	mov	r2, r4
   dd150:	462b      	mov	r3, r5
   dd152:	f002 fd11 	bl	dfb78 <__aeabi_dmul>
   dd156:	a374      	add	r3, pc, #464	; (adr r3, dd328 <__ieee754_pow+0x528>)
   dd158:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd15c:	f002 fb5a 	bl	df814 <__adddf3>
   dd160:	4622      	mov	r2, r4
   dd162:	462b      	mov	r3, r5
   dd164:	f002 fd08 	bl	dfb78 <__aeabi_dmul>
   dd168:	a371      	add	r3, pc, #452	; (adr r3, dd330 <__ieee754_pow+0x530>)
   dd16a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd16e:	f002 fb51 	bl	df814 <__adddf3>
   dd172:	4622      	mov	r2, r4
   dd174:	4606      	mov	r6, r0
   dd176:	460f      	mov	r7, r1
   dd178:	462b      	mov	r3, r5
   dd17a:	4620      	mov	r0, r4
   dd17c:	4629      	mov	r1, r5
   dd17e:	f002 fcfb 	bl	dfb78 <__aeabi_dmul>
   dd182:	4602      	mov	r2, r0
   dd184:	460b      	mov	r3, r1
   dd186:	4630      	mov	r0, r6
   dd188:	4639      	mov	r1, r7
   dd18a:	f002 fcf5 	bl	dfb78 <__aeabi_dmul>
   dd18e:	4642      	mov	r2, r8
   dd190:	4604      	mov	r4, r0
   dd192:	460d      	mov	r5, r1
   dd194:	464b      	mov	r3, r9
   dd196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd19a:	f002 fb3b 	bl	df814 <__adddf3>
   dd19e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   dd1a2:	f002 fce9 	bl	dfb78 <__aeabi_dmul>
   dd1a6:	4622      	mov	r2, r4
   dd1a8:	462b      	mov	r3, r5
   dd1aa:	f002 fb33 	bl	df814 <__adddf3>
   dd1ae:	4642      	mov	r2, r8
   dd1b0:	4606      	mov	r6, r0
   dd1b2:	460f      	mov	r7, r1
   dd1b4:	464b      	mov	r3, r9
   dd1b6:	4640      	mov	r0, r8
   dd1b8:	4649      	mov	r1, r9
   dd1ba:	f002 fcdd 	bl	dfb78 <__aeabi_dmul>
   dd1be:	2200      	movs	r2, #0
   dd1c0:	4b67      	ldr	r3, [pc, #412]	; (dd360 <__ieee754_pow+0x560>)
   dd1c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   dd1c6:	f002 fb25 	bl	df814 <__adddf3>
   dd1ca:	4632      	mov	r2, r6
   dd1cc:	463b      	mov	r3, r7
   dd1ce:	f002 fb21 	bl	df814 <__adddf3>
   dd1d2:	9802      	ldr	r0, [sp, #8]
   dd1d4:	460d      	mov	r5, r1
   dd1d6:	4604      	mov	r4, r0
   dd1d8:	4622      	mov	r2, r4
   dd1da:	462b      	mov	r3, r5
   dd1dc:	4640      	mov	r0, r8
   dd1de:	4649      	mov	r1, r9
   dd1e0:	f002 fcca 	bl	dfb78 <__aeabi_dmul>
   dd1e4:	2200      	movs	r2, #0
   dd1e6:	4680      	mov	r8, r0
   dd1e8:	4689      	mov	r9, r1
   dd1ea:	4b5d      	ldr	r3, [pc, #372]	; (dd360 <__ieee754_pow+0x560>)
   dd1ec:	4620      	mov	r0, r4
   dd1ee:	4629      	mov	r1, r5
   dd1f0:	f002 fb0e 	bl	df810 <__aeabi_dsub>
   dd1f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd1f8:	f002 fb0a 	bl	df810 <__aeabi_dsub>
   dd1fc:	4602      	mov	r2, r0
   dd1fe:	460b      	mov	r3, r1
   dd200:	4630      	mov	r0, r6
   dd202:	4639      	mov	r1, r7
   dd204:	f002 fb04 	bl	df810 <__aeabi_dsub>
   dd208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dd20c:	f002 fcb4 	bl	dfb78 <__aeabi_dmul>
   dd210:	4622      	mov	r2, r4
   dd212:	4606      	mov	r6, r0
   dd214:	460f      	mov	r7, r1
   dd216:	462b      	mov	r3, r5
   dd218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dd21c:	f002 fcac 	bl	dfb78 <__aeabi_dmul>
   dd220:	4602      	mov	r2, r0
   dd222:	460b      	mov	r3, r1
   dd224:	4630      	mov	r0, r6
   dd226:	4639      	mov	r1, r7
   dd228:	f002 faf4 	bl	df814 <__adddf3>
   dd22c:	4606      	mov	r6, r0
   dd22e:	460f      	mov	r7, r1
   dd230:	4602      	mov	r2, r0
   dd232:	460b      	mov	r3, r1
   dd234:	4640      	mov	r0, r8
   dd236:	4649      	mov	r1, r9
   dd238:	e9cd 8904 	strd	r8, r9, [sp, #16]
   dd23c:	f002 faea 	bl	df814 <__adddf3>
   dd240:	9802      	ldr	r0, [sp, #8]
   dd242:	a33d      	add	r3, pc, #244	; (adr r3, dd338 <__ieee754_pow+0x538>)
   dd244:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd248:	4604      	mov	r4, r0
   dd24a:	460d      	mov	r5, r1
   dd24c:	f002 fc94 	bl	dfb78 <__aeabi_dmul>
   dd250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dd254:	4680      	mov	r8, r0
   dd256:	4689      	mov	r9, r1
   dd258:	4620      	mov	r0, r4
   dd25a:	4629      	mov	r1, r5
   dd25c:	f002 fad8 	bl	df810 <__aeabi_dsub>
   dd260:	4602      	mov	r2, r0
   dd262:	460b      	mov	r3, r1
   dd264:	4630      	mov	r0, r6
   dd266:	4639      	mov	r1, r7
   dd268:	f002 fad2 	bl	df810 <__aeabi_dsub>
   dd26c:	a334      	add	r3, pc, #208	; (adr r3, dd340 <__ieee754_pow+0x540>)
   dd26e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd272:	f002 fc81 	bl	dfb78 <__aeabi_dmul>
   dd276:	a334      	add	r3, pc, #208	; (adr r3, dd348 <__ieee754_pow+0x548>)
   dd278:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd27c:	4606      	mov	r6, r0
   dd27e:	460f      	mov	r7, r1
   dd280:	4620      	mov	r0, r4
   dd282:	4629      	mov	r1, r5
   dd284:	f002 fc78 	bl	dfb78 <__aeabi_dmul>
   dd288:	4602      	mov	r2, r0
   dd28a:	460b      	mov	r3, r1
   dd28c:	4630      	mov	r0, r6
   dd28e:	4639      	mov	r1, r7
   dd290:	f002 fac0 	bl	df814 <__adddf3>
   dd294:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   dd298:	f002 fabc 	bl	df814 <__adddf3>
   dd29c:	4606      	mov	r6, r0
   dd29e:	980d      	ldr	r0, [sp, #52]	; 0x34
   dd2a0:	460f      	mov	r7, r1
   dd2a2:	f002 fc03 	bl	dfaac <__aeabi_i2d>
   dd2a6:	4632      	mov	r2, r6
   dd2a8:	4604      	mov	r4, r0
   dd2aa:	460d      	mov	r5, r1
   dd2ac:	463b      	mov	r3, r7
   dd2ae:	4640      	mov	r0, r8
   dd2b0:	4649      	mov	r1, r9
   dd2b2:	f002 faaf 	bl	df814 <__adddf3>
   dd2b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dd2ba:	f002 faab 	bl	df814 <__adddf3>
   dd2be:	4622      	mov	r2, r4
   dd2c0:	462b      	mov	r3, r5
   dd2c2:	f002 faa7 	bl	df814 <__adddf3>
   dd2c6:	9802      	ldr	r0, [sp, #8]
   dd2c8:	4622      	mov	r2, r4
   dd2ca:	462b      	mov	r3, r5
   dd2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dd2d0:	f002 fa9e 	bl	df810 <__aeabi_dsub>
   dd2d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dd2d8:	f002 fa9a 	bl	df810 <__aeabi_dsub>
   dd2dc:	4642      	mov	r2, r8
   dd2de:	464b      	mov	r3, r9
   dd2e0:	f002 fa96 	bl	df810 <__aeabi_dsub>
   dd2e4:	4602      	mov	r2, r0
   dd2e6:	460b      	mov	r3, r1
   dd2e8:	4630      	mov	r0, r6
   dd2ea:	4639      	mov	r1, r7
   dd2ec:	f002 fa90 	bl	df810 <__aeabi_dsub>
   dd2f0:	4680      	mov	r8, r0
   dd2f2:	4689      	mov	r9, r1
   dd2f4:	e036      	b.n	dd364 <__ieee754_pow+0x564>
   dd2f6:	bf00      	nop
	...
   dd304:	3ff00000 	.word	0x3ff00000
   dd308:	4a454eef 	.word	0x4a454eef
   dd30c:	3fca7e28 	.word	0x3fca7e28
   dd310:	93c9db65 	.word	0x93c9db65
   dd314:	3fcd864a 	.word	0x3fcd864a
   dd318:	a91d4101 	.word	0xa91d4101
   dd31c:	3fd17460 	.word	0x3fd17460
   dd320:	518f264d 	.word	0x518f264d
   dd324:	3fd55555 	.word	0x3fd55555
   dd328:	db6fabff 	.word	0xdb6fabff
   dd32c:	3fdb6db6 	.word	0x3fdb6db6
   dd330:	33333303 	.word	0x33333303
   dd334:	3fe33333 	.word	0x3fe33333
   dd338:	e0000000 	.word	0xe0000000
   dd33c:	3feec709 	.word	0x3feec709
   dd340:	dc3a03fd 	.word	0xdc3a03fd
   dd344:	3feec709 	.word	0x3feec709
   dd348:	145b01f5 	.word	0x145b01f5
   dd34c:	be3e2fe0 	.word	0xbe3e2fe0
   dd350:	43400000 	.word	0x43400000
   dd354:	0003988e 	.word	0x0003988e
   dd358:	000bb679 	.word	0x000bb679
   dd35c:	3ff00000 	.word	0x3ff00000
   dd360:	40080000 	.word	0x40080000
   dd364:	f10b 33ff 	add.w	r3, fp, #4294967295
   dd368:	ea53 030a 	orrs.w	r3, r3, sl
   dd36c:	f000 8188 	beq.w	dd680 <__ieee754_pow+0x880>
   dd370:	ed9f 7bd7 	vldr	d7, [pc, #860]	; dd6d0 <__ieee754_pow+0x8d0>
   dd374:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd378:	e9dd ab00 	ldrd	sl, fp, [sp]
   dd37c:	4653      	mov	r3, sl
   dd37e:	465c      	mov	r4, fp
   dd380:	e9cd 3400 	strd	r3, r4, [sp]
   dd384:	2300      	movs	r3, #0
   dd386:	9300      	str	r3, [sp, #0]
   dd388:	e9dd 4500 	ldrd	r4, r5, [sp]
   dd38c:	4650      	mov	r0, sl
   dd38e:	4622      	mov	r2, r4
   dd390:	462b      	mov	r3, r5
   dd392:	4659      	mov	r1, fp
   dd394:	f002 fa3c 	bl	df810 <__aeabi_dsub>
   dd398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd39c:	f002 fbec 	bl	dfb78 <__aeabi_dmul>
   dd3a0:	4652      	mov	r2, sl
   dd3a2:	4606      	mov	r6, r0
   dd3a4:	460f      	mov	r7, r1
   dd3a6:	465b      	mov	r3, fp
   dd3a8:	4640      	mov	r0, r8
   dd3aa:	4649      	mov	r1, r9
   dd3ac:	f002 fbe4 	bl	dfb78 <__aeabi_dmul>
   dd3b0:	4602      	mov	r2, r0
   dd3b2:	460b      	mov	r3, r1
   dd3b4:	4630      	mov	r0, r6
   dd3b6:	4639      	mov	r1, r7
   dd3b8:	f002 fa2c 	bl	df814 <__adddf3>
   dd3bc:	4622      	mov	r2, r4
   dd3be:	4680      	mov	r8, r0
   dd3c0:	4689      	mov	r9, r1
   dd3c2:	462b      	mov	r3, r5
   dd3c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   dd3c8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   dd3cc:	f002 fbd4 	bl	dfb78 <__aeabi_dmul>
   dd3d0:	460b      	mov	r3, r1
   dd3d2:	4602      	mov	r2, r0
   dd3d4:	4606      	mov	r6, r0
   dd3d6:	460f      	mov	r7, r1
   dd3d8:	4640      	mov	r0, r8
   dd3da:	4649      	mov	r1, r9
   dd3dc:	f002 fa1a 	bl	df814 <__adddf3>
   dd3e0:	4bd5      	ldr	r3, [pc, #852]	; (dd738 <__ieee754_pow+0x938>)
   dd3e2:	4299      	cmp	r1, r3
   dd3e4:	4604      	mov	r4, r0
   dd3e6:	460d      	mov	r5, r1
   dd3e8:	468a      	mov	sl, r1
   dd3ea:	f340 8123 	ble.w	dd634 <__ieee754_pow+0x834>
   dd3ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   dd3f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   dd3f6:	4303      	orrs	r3, r0
   dd3f8:	f040 8218 	bne.w	dd82c <__ieee754_pow+0xa2c>
   dd3fc:	a3b6      	add	r3, pc, #728	; (adr r3, dd6d8 <__ieee754_pow+0x8d8>)
   dd3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd406:	f002 fa05 	bl	df814 <__adddf3>
   dd40a:	4632      	mov	r2, r6
   dd40c:	4680      	mov	r8, r0
   dd40e:	4689      	mov	r9, r1
   dd410:	463b      	mov	r3, r7
   dd412:	4620      	mov	r0, r4
   dd414:	4629      	mov	r1, r5
   dd416:	f002 f9fb 	bl	df810 <__aeabi_dsub>
   dd41a:	4602      	mov	r2, r0
   dd41c:	460b      	mov	r3, r1
   dd41e:	4640      	mov	r0, r8
   dd420:	4649      	mov	r1, r9
   dd422:	f002 fe39 	bl	e0098 <__aeabi_dcmpgt>
   dd426:	2800      	cmp	r0, #0
   dd428:	f040 8200 	bne.w	dd82c <__ieee754_pow+0xa2c>
   dd42c:	46a8      	mov	r8, r5
   dd42e:	ea4f 5328 	mov.w	r3, r8, asr #20
   dd432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   dd436:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   dd43a:	fa42 f303 	asr.w	r3, r2, r3
   dd43e:	4453      	add	r3, sl
   dd440:	f3c3 520a 	ubfx	r2, r3, #20, #11
   dd444:	4dbd      	ldr	r5, [pc, #756]	; (dd73c <__ieee754_pow+0x93c>)
   dd446:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   dd44a:	4115      	asrs	r5, r2
   dd44c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   dd450:	2000      	movs	r0, #0
   dd452:	f1c2 0414 	rsb	r4, r2, #20
   dd456:	ea23 0105 	bic.w	r1, r3, r5
   dd45a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   dd45e:	f1ba 0f00 	cmp.w	sl, #0
   dd462:	4602      	mov	r2, r0
   dd464:	460b      	mov	r3, r1
   dd466:	fa4b fb04 	asr.w	fp, fp, r4
   dd46a:	4630      	mov	r0, r6
   dd46c:	4639      	mov	r1, r7
   dd46e:	bfb8      	it	lt
   dd470:	f1cb 0b00 	rsblt	fp, fp, #0
   dd474:	f002 f9cc 	bl	df810 <__aeabi_dsub>
   dd478:	4602      	mov	r2, r0
   dd47a:	460b      	mov	r3, r1
   dd47c:	4606      	mov	r6, r0
   dd47e:	460f      	mov	r7, r1
   dd480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd484:	f002 f9c6 	bl	df814 <__adddf3>
   dd488:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   dd48c:	2400      	movs	r4, #0
   dd48e:	a394      	add	r3, pc, #592	; (adr r3, dd6e0 <__ieee754_pow+0x8e0>)
   dd490:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd494:	4620      	mov	r0, r4
   dd496:	460d      	mov	r5, r1
   dd498:	f002 fb6e 	bl	dfb78 <__aeabi_dmul>
   dd49c:	4632      	mov	r2, r6
   dd49e:	4680      	mov	r8, r0
   dd4a0:	4689      	mov	r9, r1
   dd4a2:	463b      	mov	r3, r7
   dd4a4:	4620      	mov	r0, r4
   dd4a6:	4629      	mov	r1, r5
   dd4a8:	f002 f9b2 	bl	df810 <__aeabi_dsub>
   dd4ac:	4602      	mov	r2, r0
   dd4ae:	460b      	mov	r3, r1
   dd4b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd4b4:	f002 f9ac 	bl	df810 <__aeabi_dsub>
   dd4b8:	a38b      	add	r3, pc, #556	; (adr r3, dd6e8 <__ieee754_pow+0x8e8>)
   dd4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4be:	f002 fb5b 	bl	dfb78 <__aeabi_dmul>
   dd4c2:	a38b      	add	r3, pc, #556	; (adr r3, dd6f0 <__ieee754_pow+0x8f0>)
   dd4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4c8:	4606      	mov	r6, r0
   dd4ca:	460f      	mov	r7, r1
   dd4cc:	4620      	mov	r0, r4
   dd4ce:	4629      	mov	r1, r5
   dd4d0:	f002 fb52 	bl	dfb78 <__aeabi_dmul>
   dd4d4:	4602      	mov	r2, r0
   dd4d6:	460b      	mov	r3, r1
   dd4d8:	4630      	mov	r0, r6
   dd4da:	4639      	mov	r1, r7
   dd4dc:	f002 f99a 	bl	df814 <__adddf3>
   dd4e0:	4606      	mov	r6, r0
   dd4e2:	460f      	mov	r7, r1
   dd4e4:	4602      	mov	r2, r0
   dd4e6:	460b      	mov	r3, r1
   dd4e8:	4640      	mov	r0, r8
   dd4ea:	4649      	mov	r1, r9
   dd4ec:	f002 f992 	bl	df814 <__adddf3>
   dd4f0:	4642      	mov	r2, r8
   dd4f2:	464b      	mov	r3, r9
   dd4f4:	4604      	mov	r4, r0
   dd4f6:	460d      	mov	r5, r1
   dd4f8:	f002 f98a 	bl	df810 <__aeabi_dsub>
   dd4fc:	4602      	mov	r2, r0
   dd4fe:	460b      	mov	r3, r1
   dd500:	4630      	mov	r0, r6
   dd502:	4639      	mov	r1, r7
   dd504:	f002 f984 	bl	df810 <__aeabi_dsub>
   dd508:	4622      	mov	r2, r4
   dd50a:	4680      	mov	r8, r0
   dd50c:	4689      	mov	r9, r1
   dd50e:	462b      	mov	r3, r5
   dd510:	4620      	mov	r0, r4
   dd512:	4629      	mov	r1, r5
   dd514:	f002 fb30 	bl	dfb78 <__aeabi_dmul>
   dd518:	a377      	add	r3, pc, #476	; (adr r3, dd6f8 <__ieee754_pow+0x8f8>)
   dd51a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd51e:	4606      	mov	r6, r0
   dd520:	460f      	mov	r7, r1
   dd522:	f002 fb29 	bl	dfb78 <__aeabi_dmul>
   dd526:	a376      	add	r3, pc, #472	; (adr r3, dd700 <__ieee754_pow+0x900>)
   dd528:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd52c:	f002 f970 	bl	df810 <__aeabi_dsub>
   dd530:	4632      	mov	r2, r6
   dd532:	463b      	mov	r3, r7
   dd534:	f002 fb20 	bl	dfb78 <__aeabi_dmul>
   dd538:	a373      	add	r3, pc, #460	; (adr r3, dd708 <__ieee754_pow+0x908>)
   dd53a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd53e:	f002 f969 	bl	df814 <__adddf3>
   dd542:	4632      	mov	r2, r6
   dd544:	463b      	mov	r3, r7
   dd546:	f002 fb17 	bl	dfb78 <__aeabi_dmul>
   dd54a:	a371      	add	r3, pc, #452	; (adr r3, dd710 <__ieee754_pow+0x910>)
   dd54c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd550:	f002 f95e 	bl	df810 <__aeabi_dsub>
   dd554:	4632      	mov	r2, r6
   dd556:	463b      	mov	r3, r7
   dd558:	f002 fb0e 	bl	dfb78 <__aeabi_dmul>
   dd55c:	a36e      	add	r3, pc, #440	; (adr r3, dd718 <__ieee754_pow+0x918>)
   dd55e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd562:	f002 f957 	bl	df814 <__adddf3>
   dd566:	4632      	mov	r2, r6
   dd568:	463b      	mov	r3, r7
   dd56a:	f002 fb05 	bl	dfb78 <__aeabi_dmul>
   dd56e:	4602      	mov	r2, r0
   dd570:	460b      	mov	r3, r1
   dd572:	4620      	mov	r0, r4
   dd574:	4629      	mov	r1, r5
   dd576:	f002 f94b 	bl	df810 <__aeabi_dsub>
   dd57a:	4606      	mov	r6, r0
   dd57c:	460f      	mov	r7, r1
   dd57e:	4602      	mov	r2, r0
   dd580:	460b      	mov	r3, r1
   dd582:	4620      	mov	r0, r4
   dd584:	4629      	mov	r1, r5
   dd586:	f002 faf7 	bl	dfb78 <__aeabi_dmul>
   dd58a:	2200      	movs	r2, #0
   dd58c:	e9cd 0100 	strd	r0, r1, [sp]
   dd590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd594:	4630      	mov	r0, r6
   dd596:	4639      	mov	r1, r7
   dd598:	f002 f93a 	bl	df810 <__aeabi_dsub>
   dd59c:	4602      	mov	r2, r0
   dd59e:	460b      	mov	r3, r1
   dd5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd5a4:	f002 fc12 	bl	dfdcc <__aeabi_ddiv>
   dd5a8:	4642      	mov	r2, r8
   dd5aa:	4606      	mov	r6, r0
   dd5ac:	460f      	mov	r7, r1
   dd5ae:	464b      	mov	r3, r9
   dd5b0:	4620      	mov	r0, r4
   dd5b2:	4629      	mov	r1, r5
   dd5b4:	f002 fae0 	bl	dfb78 <__aeabi_dmul>
   dd5b8:	4642      	mov	r2, r8
   dd5ba:	464b      	mov	r3, r9
   dd5bc:	f002 f92a 	bl	df814 <__adddf3>
   dd5c0:	4602      	mov	r2, r0
   dd5c2:	460b      	mov	r3, r1
   dd5c4:	4630      	mov	r0, r6
   dd5c6:	4639      	mov	r1, r7
   dd5c8:	f002 f922 	bl	df810 <__aeabi_dsub>
   dd5cc:	4622      	mov	r2, r4
   dd5ce:	462b      	mov	r3, r5
   dd5d0:	f002 f91e 	bl	df810 <__aeabi_dsub>
   dd5d4:	4602      	mov	r2, r0
   dd5d6:	460b      	mov	r3, r1
   dd5d8:	2000      	movs	r0, #0
   dd5da:	4959      	ldr	r1, [pc, #356]	; (dd740 <__ieee754_pow+0x940>)
   dd5dc:	f002 f918 	bl	df810 <__aeabi_dsub>
   dd5e0:	448a      	add	sl, r1
   dd5e2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   dd5e6:	4602      	mov	r2, r0
   dd5e8:	460b      	mov	r3, r1
   dd5ea:	f2c0 815b 	blt.w	dd8a4 <__ieee754_pow+0xaa4>
   dd5ee:	4651      	mov	r1, sl
   dd5f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   dd5f4:	f002 fac0 	bl	dfb78 <__aeabi_dmul>
   dd5f8:	ec41 0b10 	vmov	d0, r0, r1
   dd5fc:	e449      	b.n	dce92 <__ieee754_pow+0x92>
   dd5fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   dd602:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   dd606:	ea54 030b 	orrs.w	r3, r4, fp
   dd60a:	f000 8137 	beq.w	dd87c <__ieee754_pow+0xa7c>
   dd60e:	f1bb 0f01 	cmp.w	fp, #1
   dd612:	f47f ac80 	bne.w	dcf16 <__ieee754_pow+0x116>
   dd616:	4602      	mov	r2, r0
   dd618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd61c:	ec43 2b10 	vmov	d0, r2, r3
   dd620:	e437      	b.n	dce92 <__ieee754_pow+0x92>
   dd622:	4632      	mov	r2, r6
   dd624:	463b      	mov	r3, r7
   dd626:	4630      	mov	r0, r6
   dd628:	4639      	mov	r1, r7
   dd62a:	f002 faa5 	bl	dfb78 <__aeabi_dmul>
   dd62e:	ec41 0b10 	vmov	d0, r0, r1
   dd632:	e42e      	b.n	dce92 <__ieee754_pow+0x92>
   dd634:	4b43      	ldr	r3, [pc, #268]	; (dd744 <__ieee754_pow+0x944>)
   dd636:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dd63a:	4598      	cmp	r8, r3
   dd63c:	f340 8115 	ble.w	dd86a <__ieee754_pow+0xa6a>
   dd640:	4b41      	ldr	r3, [pc, #260]	; (dd748 <__ieee754_pow+0x948>)
   dd642:	440b      	add	r3, r1
   dd644:	4303      	orrs	r3, r0
   dd646:	d10c      	bne.n	dd662 <__ieee754_pow+0x862>
   dd648:	4632      	mov	r2, r6
   dd64a:	463b      	mov	r3, r7
   dd64c:	f002 f8e0 	bl	df810 <__aeabi_dsub>
   dd650:	4602      	mov	r2, r0
   dd652:	460b      	mov	r3, r1
   dd654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd658:	f002 fd0a 	bl	e0070 <__aeabi_dcmple>
   dd65c:	2800      	cmp	r0, #0
   dd65e:	f43f aee6 	beq.w	dd42e <__ieee754_pow+0x62e>
   dd662:	a32f      	add	r3, pc, #188	; (adr r3, dd720 <__ieee754_pow+0x920>)
   dd664:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dd66c:	f002 fa84 	bl	dfb78 <__aeabi_dmul>
   dd670:	a32b      	add	r3, pc, #172	; (adr r3, dd720 <__ieee754_pow+0x920>)
   dd672:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd676:	f002 fa7f 	bl	dfb78 <__aeabi_dmul>
   dd67a:	ec41 0b10 	vmov	d0, r0, r1
   dd67e:	e408      	b.n	dce92 <__ieee754_pow+0x92>
   dd680:	ed9f 7b29 	vldr	d7, [pc, #164]	; dd728 <__ieee754_pow+0x928>
   dd684:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd688:	e676      	b.n	dd378 <__ieee754_pow+0x578>
   dd68a:	f1b9 0f00 	cmp.w	r9, #0
   dd68e:	f6bf ac8e 	bge.w	dcfae <__ieee754_pow+0x1ae>
   dd692:	e9dd 3400 	ldrd	r3, r4, [sp]
   dd696:	ee00 3a10 	vmov	s0, r3
   dd69a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   dd69e:	ee00 3a90 	vmov	s1, r3
   dd6a2:	f7ff bbf6 	b.w	dce92 <__ieee754_pow+0x92>
   dd6a6:	4602      	mov	r2, r0
   dd6a8:	460b      	mov	r3, r1
   dd6aa:	2000      	movs	r0, #0
   dd6ac:	4924      	ldr	r1, [pc, #144]	; (dd740 <__ieee754_pow+0x940>)
   dd6ae:	f002 fb8d 	bl	dfdcc <__aeabi_ddiv>
   dd6b2:	e42d      	b.n	dcf10 <__ieee754_pow+0x110>
   dd6b4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; dd730 <__ieee754_pow+0x930>
   dd6b8:	ed8d 7b08 	vstr	d7, [sp, #32]
   dd6bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   dd6c0:	ed9f 7b03 	vldr	d7, [pc, #12]	; dd6d0 <__ieee754_pow+0x8d0>
   dd6c4:	f04f 0800 	mov.w	r8, #0
   dd6c8:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd6cc:	e4be      	b.n	dd04c <__ieee754_pow+0x24c>
   dd6ce:	bf00      	nop
   dd6d0:	00000000 	.word	0x00000000
   dd6d4:	3ff00000 	.word	0x3ff00000
   dd6d8:	652b82fe 	.word	0x652b82fe
   dd6dc:	3c971547 	.word	0x3c971547
   dd6e0:	00000000 	.word	0x00000000
   dd6e4:	3fe62e43 	.word	0x3fe62e43
   dd6e8:	fefa39ef 	.word	0xfefa39ef
   dd6ec:	3fe62e42 	.word	0x3fe62e42
   dd6f0:	0ca86c39 	.word	0x0ca86c39
   dd6f4:	be205c61 	.word	0xbe205c61
   dd6f8:	72bea4d0 	.word	0x72bea4d0
   dd6fc:	3e663769 	.word	0x3e663769
   dd700:	c5d26bf1 	.word	0xc5d26bf1
   dd704:	3ebbbd41 	.word	0x3ebbbd41
   dd708:	af25de2c 	.word	0xaf25de2c
   dd70c:	3f11566a 	.word	0x3f11566a
   dd710:	16bebd93 	.word	0x16bebd93
   dd714:	3f66c16c 	.word	0x3f66c16c
   dd718:	5555553e 	.word	0x5555553e
   dd71c:	3fc55555 	.word	0x3fc55555
   dd720:	c2f8f359 	.word	0xc2f8f359
   dd724:	01a56e1f 	.word	0x01a56e1f
   dd728:	00000000 	.word	0x00000000
   dd72c:	bff00000 	.word	0xbff00000
	...
   dd738:	408fffff 	.word	0x408fffff
   dd73c:	000fffff 	.word	0x000fffff
   dd740:	3ff00000 	.word	0x3ff00000
   dd744:	4090cbff 	.word	0x4090cbff
   dd748:	3f6f3400 	.word	0x3f6f3400
   dd74c:	4b6c      	ldr	r3, [pc, #432]	; (dd900 <__ieee754_pow+0xb00>)
   dd74e:	429c      	cmp	r4, r3
   dd750:	f77f ac2a 	ble.w	dcfa8 <__ieee754_pow+0x1a8>
   dd754:	4b6b      	ldr	r3, [pc, #428]	; (dd904 <__ieee754_pow+0xb04>)
   dd756:	429c      	cmp	r4, r3
   dd758:	f73f abc3 	bgt.w	dcee2 <__ieee754_pow+0xe2>
   dd75c:	2200      	movs	r2, #0
   dd75e:	4b69      	ldr	r3, [pc, #420]	; (dd904 <__ieee754_pow+0xb04>)
   dd760:	f002 f856 	bl	df810 <__aeabi_dsub>
   dd764:	a356      	add	r3, pc, #344	; (adr r3, dd8c0 <__ieee754_pow+0xac0>)
   dd766:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd76a:	4604      	mov	r4, r0
   dd76c:	460d      	mov	r5, r1
   dd76e:	f002 fa03 	bl	dfb78 <__aeabi_dmul>
   dd772:	a355      	add	r3, pc, #340	; (adr r3, dd8c8 <__ieee754_pow+0xac8>)
   dd774:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd778:	4680      	mov	r8, r0
   dd77a:	4689      	mov	r9, r1
   dd77c:	4620      	mov	r0, r4
   dd77e:	4629      	mov	r1, r5
   dd780:	f002 f9fa 	bl	dfb78 <__aeabi_dmul>
   dd784:	2200      	movs	r2, #0
   dd786:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dd78a:	4b5f      	ldr	r3, [pc, #380]	; (dd908 <__ieee754_pow+0xb08>)
   dd78c:	4620      	mov	r0, r4
   dd78e:	4629      	mov	r1, r5
   dd790:	f002 f9f2 	bl	dfb78 <__aeabi_dmul>
   dd794:	4602      	mov	r2, r0
   dd796:	460b      	mov	r3, r1
   dd798:	a14d      	add	r1, pc, #308	; (adr r1, dd8d0 <__ieee754_pow+0xad0>)
   dd79a:	e9d1 0100 	ldrd	r0, r1, [r1]
   dd79e:	f002 f837 	bl	df810 <__aeabi_dsub>
   dd7a2:	4622      	mov	r2, r4
   dd7a4:	462b      	mov	r3, r5
   dd7a6:	f002 f9e7 	bl	dfb78 <__aeabi_dmul>
   dd7aa:	4602      	mov	r2, r0
   dd7ac:	460b      	mov	r3, r1
   dd7ae:	2000      	movs	r0, #0
   dd7b0:	4956      	ldr	r1, [pc, #344]	; (dd90c <__ieee754_pow+0xb0c>)
   dd7b2:	f002 f82d 	bl	df810 <__aeabi_dsub>
   dd7b6:	4622      	mov	r2, r4
   dd7b8:	462b      	mov	r3, r5
   dd7ba:	4606      	mov	r6, r0
   dd7bc:	460f      	mov	r7, r1
   dd7be:	4620      	mov	r0, r4
   dd7c0:	4629      	mov	r1, r5
   dd7c2:	f002 f9d9 	bl	dfb78 <__aeabi_dmul>
   dd7c6:	4602      	mov	r2, r0
   dd7c8:	460b      	mov	r3, r1
   dd7ca:	4630      	mov	r0, r6
   dd7cc:	4639      	mov	r1, r7
   dd7ce:	f002 f9d3 	bl	dfb78 <__aeabi_dmul>
   dd7d2:	a341      	add	r3, pc, #260	; (adr r3, dd8d8 <__ieee754_pow+0xad8>)
   dd7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd7d8:	f002 f9ce 	bl	dfb78 <__aeabi_dmul>
   dd7dc:	4602      	mov	r2, r0
   dd7de:	460b      	mov	r3, r1
   dd7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   dd7e4:	f002 f814 	bl	df810 <__aeabi_dsub>
   dd7e8:	4602      	mov	r2, r0
   dd7ea:	460b      	mov	r3, r1
   dd7ec:	4604      	mov	r4, r0
   dd7ee:	460d      	mov	r5, r1
   dd7f0:	4640      	mov	r0, r8
   dd7f2:	4649      	mov	r1, r9
   dd7f4:	f002 f80e 	bl	df814 <__adddf3>
   dd7f8:	4642      	mov	r2, r8
   dd7fa:	464b      	mov	r3, r9
   dd7fc:	2000      	movs	r0, #0
   dd7fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dd802:	f002 f805 	bl	df810 <__aeabi_dsub>
   dd806:	4602      	mov	r2, r0
   dd808:	460b      	mov	r3, r1
   dd80a:	4620      	mov	r0, r4
   dd80c:	4629      	mov	r1, r5
   dd80e:	f001 ffff 	bl	df810 <__aeabi_dsub>
   dd812:	4680      	mov	r8, r0
   dd814:	4689      	mov	r9, r1
   dd816:	e5a5      	b.n	dd364 <__ieee754_pow+0x564>
   dd818:	4632      	mov	r2, r6
   dd81a:	463b      	mov	r3, r7
   dd81c:	2000      	movs	r0, #0
   dd81e:	4939      	ldr	r1, [pc, #228]	; (dd904 <__ieee754_pow+0xb04>)
   dd820:	f002 fad4 	bl	dfdcc <__aeabi_ddiv>
   dd824:	ec41 0b10 	vmov	d0, r0, r1
   dd828:	f7ff bb33 	b.w	dce92 <__ieee754_pow+0x92>
   dd82c:	a32c      	add	r3, pc, #176	; (adr r3, dd8e0 <__ieee754_pow+0xae0>)
   dd82e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dd836:	f002 f99f 	bl	dfb78 <__aeabi_dmul>
   dd83a:	a329      	add	r3, pc, #164	; (adr r3, dd8e0 <__ieee754_pow+0xae0>)
   dd83c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd840:	f002 f99a 	bl	dfb78 <__aeabi_dmul>
   dd844:	ec41 0b10 	vmov	d0, r0, r1
   dd848:	f7ff bb23 	b.w	dce92 <__ieee754_pow+0x92>
   dd84c:	f1be 0f00 	cmp.w	lr, #0
   dd850:	f47f ab2a 	bne.w	dcea8 <__ieee754_pow+0xa8>
   dd854:	f1c3 0314 	rsb	r3, r3, #20
   dd858:	fa48 f203 	asr.w	r2, r8, r3
   dd85c:	fa02 f303 	lsl.w	r3, r2, r3
   dd860:	4598      	cmp	r8, r3
   dd862:	d027      	beq.n	dd8b4 <__ieee754_pow+0xab4>
   dd864:	46f3      	mov	fp, lr
   dd866:	f7ff baf7 	b.w	dce58 <__ieee754_pow+0x58>
   dd86a:	4b28      	ldr	r3, [pc, #160]	; (dd90c <__ieee754_pow+0xb0c>)
   dd86c:	4598      	cmp	r8, r3
   dd86e:	f73f adde 	bgt.w	dd42e <__ieee754_pow+0x62e>
   dd872:	e9dd 3400 	ldrd	r3, r4, [sp]
   dd876:	469a      	mov	sl, r3
   dd878:	469b      	mov	fp, r3
   dd87a:	e607      	b.n	dd48c <__ieee754_pow+0x68c>
   dd87c:	4602      	mov	r2, r0
   dd87e:	460b      	mov	r3, r1
   dd880:	f7ff bb89 	b.w	dcf96 <__ieee754_pow+0x196>
   dd884:	ed9f 7b18 	vldr	d7, [pc, #96]	; dd8e8 <__ieee754_pow+0xae8>
   dd888:	ed8d 7b08 	vstr	d7, [sp, #32]
   dd88c:	ed9f 7b18 	vldr	d7, [pc, #96]	; dd8f0 <__ieee754_pow+0xaf0>
   dd890:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   dd894:	ed9f 7b18 	vldr	d7, [pc, #96]	; dd8f8 <__ieee754_pow+0xaf8>
   dd898:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   dd89c:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd8a0:	f7ff bbd4 	b.w	dd04c <__ieee754_pow+0x24c>
   dd8a4:	4658      	mov	r0, fp
   dd8a6:	ec43 2b10 	vmov	d0, r2, r3
   dd8aa:	f001 ff19 	bl	df6e0 <scalbn>
   dd8ae:	ec51 0b10 	vmov	r0, r1, d0
   dd8b2:	e69d      	b.n	dd5f0 <__ieee754_pow+0x7f0>
   dd8b4:	f002 0201 	and.w	r2, r2, #1
   dd8b8:	f1c2 0b02 	rsb	fp, r2, #2
   dd8bc:	f7ff bacc 	b.w	dce58 <__ieee754_pow+0x58>
   dd8c0:	60000000 	.word	0x60000000
   dd8c4:	3ff71547 	.word	0x3ff71547
   dd8c8:	f85ddf44 	.word	0xf85ddf44
   dd8cc:	3e54ae0b 	.word	0x3e54ae0b
   dd8d0:	55555555 	.word	0x55555555
   dd8d4:	3fd55555 	.word	0x3fd55555
   dd8d8:	652b82fe 	.word	0x652b82fe
   dd8dc:	3ff71547 	.word	0x3ff71547
   dd8e0:	8800759c 	.word	0x8800759c
   dd8e4:	7e37e43c 	.word	0x7e37e43c
   dd8e8:	40000000 	.word	0x40000000
   dd8ec:	3fe2b803 	.word	0x3fe2b803
   dd8f0:	43cfd006 	.word	0x43cfd006
   dd8f4:	3e4cfdeb 	.word	0x3e4cfdeb
   dd8f8:	00000000 	.word	0x00000000
   dd8fc:	3ff80000 	.word	0x3ff80000
   dd900:	3feffffe 	.word	0x3feffffe
   dd904:	3ff00000 	.word	0x3ff00000
   dd908:	3fd00000 	.word	0x3fd00000
   dd90c:	3fe00000 	.word	0x3fe00000

000dd910 <__ieee754_rem_pio2>:
   dd910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd914:	ec53 2b10 	vmov	r2, r3, d0
   dd918:	4997      	ldr	r1, [pc, #604]	; (ddb78 <__ieee754_rem_pio2+0x268>)
   dd91a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   dd91e:	458b      	cmp	fp, r1
   dd920:	b08f      	sub	sp, #60	; 0x3c
   dd922:	f340 8087 	ble.w	dda34 <__ieee754_rem_pio2+0x124>
   dd926:	4995      	ldr	r1, [pc, #596]	; (ddb7c <__ieee754_rem_pio2+0x26c>)
   dd928:	458b      	cmp	fp, r1
   dd92a:	461c      	mov	r4, r3
   dd92c:	4682      	mov	sl, r0
   dd92e:	dc29      	bgt.n	dd984 <__ieee754_rem_pio2+0x74>
   dd930:	2c00      	cmp	r4, #0
   dd932:	4619      	mov	r1, r3
   dd934:	ee10 0a10 	vmov	r0, s0
   dd938:	a385      	add	r3, pc, #532	; (adr r3, ddb50 <__ieee754_rem_pio2+0x240>)
   dd93a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd93e:	f340 81a5 	ble.w	ddc8c <__ieee754_rem_pio2+0x37c>
   dd942:	f001 ff65 	bl	df810 <__aeabi_dsub>
   dd946:	4b8e      	ldr	r3, [pc, #568]	; (ddb80 <__ieee754_rem_pio2+0x270>)
   dd948:	459b      	cmp	fp, r3
   dd94a:	4604      	mov	r4, r0
   dd94c:	460d      	mov	r5, r1
   dd94e:	f000 8087 	beq.w	dda60 <__ieee754_rem_pio2+0x150>
   dd952:	a381      	add	r3, pc, #516	; (adr r3, ddb58 <__ieee754_rem_pio2+0x248>)
   dd954:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd958:	f001 ff5a 	bl	df810 <__aeabi_dsub>
   dd95c:	4602      	mov	r2, r0
   dd95e:	460b      	mov	r3, r1
   dd960:	e9ca 2300 	strd	r2, r3, [sl]
   dd964:	4620      	mov	r0, r4
   dd966:	4629      	mov	r1, r5
   dd968:	f001 ff52 	bl	df810 <__aeabi_dsub>
   dd96c:	a37a      	add	r3, pc, #488	; (adr r3, ddb58 <__ieee754_rem_pio2+0x248>)
   dd96e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd972:	f001 ff4d 	bl	df810 <__aeabi_dsub>
   dd976:	2501      	movs	r5, #1
   dd978:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dd97c:	4628      	mov	r0, r5
   dd97e:	b00f      	add	sp, #60	; 0x3c
   dd980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd984:	497f      	ldr	r1, [pc, #508]	; (ddb84 <__ieee754_rem_pio2+0x274>)
   dd986:	458b      	cmp	fp, r1
   dd988:	f340 8087 	ble.w	dda9a <__ieee754_rem_pio2+0x18a>
   dd98c:	497e      	ldr	r1, [pc, #504]	; (ddb88 <__ieee754_rem_pio2+0x278>)
   dd98e:	458b      	cmp	fp, r1
   dd990:	dc5b      	bgt.n	dda4a <__ieee754_rem_pio2+0x13a>
   dd992:	ea4f 552b 	mov.w	r5, fp, asr #20
   dd996:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   dd99a:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   dd99e:	4610      	mov	r0, r2
   dd9a0:	4639      	mov	r1, r7
   dd9a2:	ee10 6a10 	vmov	r6, s0
   dd9a6:	f002 fb97 	bl	e00d8 <__aeabi_d2iz>
   dd9aa:	f002 f87f 	bl	dfaac <__aeabi_i2d>
   dd9ae:	4680      	mov	r8, r0
   dd9b0:	4689      	mov	r9, r1
   dd9b2:	4642      	mov	r2, r8
   dd9b4:	464b      	mov	r3, r9
   dd9b6:	4630      	mov	r0, r6
   dd9b8:	4639      	mov	r1, r7
   dd9ba:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dd9be:	f001 ff27 	bl	df810 <__aeabi_dsub>
   dd9c2:	2200      	movs	r2, #0
   dd9c4:	4b71      	ldr	r3, [pc, #452]	; (ddb8c <__ieee754_rem_pio2+0x27c>)
   dd9c6:	f002 f8d7 	bl	dfb78 <__aeabi_dmul>
   dd9ca:	4689      	mov	r9, r1
   dd9cc:	4680      	mov	r8, r0
   dd9ce:	f002 fb83 	bl	e00d8 <__aeabi_d2iz>
   dd9d2:	f002 f86b 	bl	dfaac <__aeabi_i2d>
   dd9d6:	4606      	mov	r6, r0
   dd9d8:	460f      	mov	r7, r1
   dd9da:	4632      	mov	r2, r6
   dd9dc:	463b      	mov	r3, r7
   dd9de:	4640      	mov	r0, r8
   dd9e0:	4649      	mov	r1, r9
   dd9e2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   dd9e6:	f001 ff13 	bl	df810 <__aeabi_dsub>
   dd9ea:	2200      	movs	r2, #0
   dd9ec:	4b67      	ldr	r3, [pc, #412]	; (ddb8c <__ieee754_rem_pio2+0x27c>)
   dd9ee:	f002 f8c3 	bl	dfb78 <__aeabi_dmul>
   dd9f2:	2200      	movs	r2, #0
   dd9f4:	2300      	movs	r3, #0
   dd9f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dd9fa:	f002 fb25 	bl	e0048 <__aeabi_dcmpeq>
   dd9fe:	2800      	cmp	r0, #0
   dda00:	f000 8170 	beq.w	ddce4 <__ieee754_rem_pio2+0x3d4>
   dda04:	2300      	movs	r3, #0
   dda06:	4630      	mov	r0, r6
   dda08:	4639      	mov	r1, r7
   dda0a:	2200      	movs	r2, #0
   dda0c:	f002 fb1c 	bl	e0048 <__aeabi_dcmpeq>
   dda10:	2800      	cmp	r0, #0
   dda12:	bf14      	ite	ne
   dda14:	2301      	movne	r3, #1
   dda16:	2302      	moveq	r3, #2
   dda18:	4a5d      	ldr	r2, [pc, #372]	; (ddb90 <__ieee754_rem_pio2+0x280>)
   dda1a:	9201      	str	r2, [sp, #4]
   dda1c:	2102      	movs	r1, #2
   dda1e:	9100      	str	r1, [sp, #0]
   dda20:	462a      	mov	r2, r5
   dda22:	4651      	mov	r1, sl
   dda24:	a808      	add	r0, sp, #32
   dda26:	f000 fc93 	bl	de350 <__kernel_rem_pio2>
   dda2a:	2c00      	cmp	r4, #0
   dda2c:	f2c0 814c 	blt.w	ddcc8 <__ieee754_rem_pio2+0x3b8>
   dda30:	4605      	mov	r5, r0
   dda32:	e006      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   dda34:	ed80 0b00 	vstr	d0, [r0]
   dda38:	2500      	movs	r5, #0
   dda3a:	2400      	movs	r4, #0
   dda3c:	e9c0 4502 	strd	r4, r5, [r0, #8]
   dda40:	2500      	movs	r5, #0
   dda42:	4628      	mov	r0, r5
   dda44:	b00f      	add	sp, #60	; 0x3c
   dda46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dda4a:	ee10 0a10 	vmov	r0, s0
   dda4e:	4619      	mov	r1, r3
   dda50:	f001 fede 	bl	df810 <__aeabi_dsub>
   dda54:	2500      	movs	r5, #0
   dda56:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dda5a:	e9ca 0100 	strd	r0, r1, [sl]
   dda5e:	e7f0      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   dda60:	a33f      	add	r3, pc, #252	; (adr r3, ddb60 <__ieee754_rem_pio2+0x250>)
   dda62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda66:	f001 fed3 	bl	df810 <__aeabi_dsub>
   dda6a:	a33f      	add	r3, pc, #252	; (adr r3, ddb68 <__ieee754_rem_pio2+0x258>)
   dda6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda70:	460d      	mov	r5, r1
   dda72:	4604      	mov	r4, r0
   dda74:	f001 fecc 	bl	df810 <__aeabi_dsub>
   dda78:	4602      	mov	r2, r0
   dda7a:	460b      	mov	r3, r1
   dda7c:	e9ca 2300 	strd	r2, r3, [sl]
   dda80:	4629      	mov	r1, r5
   dda82:	4620      	mov	r0, r4
   dda84:	f001 fec4 	bl	df810 <__aeabi_dsub>
   dda88:	a337      	add	r3, pc, #220	; (adr r3, ddb68 <__ieee754_rem_pio2+0x258>)
   dda8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda8e:	f001 febf 	bl	df810 <__aeabi_dsub>
   dda92:	2501      	movs	r5, #1
   dda94:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dda98:	e7d3      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   dda9a:	f7fc fe65 	bl	da768 <fabs>
   dda9e:	ec57 6b10 	vmov	r6, r7, d0
   ddaa2:	ee10 0a10 	vmov	r0, s0
   ddaa6:	a332      	add	r3, pc, #200	; (adr r3, ddb70 <__ieee754_rem_pio2+0x260>)
   ddaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaac:	4639      	mov	r1, r7
   ddaae:	f002 f863 	bl	dfb78 <__aeabi_dmul>
   ddab2:	2200      	movs	r2, #0
   ddab4:	4b37      	ldr	r3, [pc, #220]	; (ddb94 <__ieee754_rem_pio2+0x284>)
   ddab6:	f001 fead 	bl	df814 <__adddf3>
   ddaba:	f002 fb0d 	bl	e00d8 <__aeabi_d2iz>
   ddabe:	4605      	mov	r5, r0
   ddac0:	f001 fff4 	bl	dfaac <__aeabi_i2d>
   ddac4:	a322      	add	r3, pc, #136	; (adr r3, ddb50 <__ieee754_rem_pio2+0x240>)
   ddac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   ddace:	f002 f853 	bl	dfb78 <__aeabi_dmul>
   ddad2:	4602      	mov	r2, r0
   ddad4:	460b      	mov	r3, r1
   ddad6:	4630      	mov	r0, r6
   ddad8:	4639      	mov	r1, r7
   ddada:	f001 fe99 	bl	df810 <__aeabi_dsub>
   ddade:	a31e      	add	r3, pc, #120	; (adr r3, ddb58 <__ieee754_rem_pio2+0x248>)
   ddae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddae4:	4680      	mov	r8, r0
   ddae6:	4689      	mov	r9, r1
   ddae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddaec:	f002 f844 	bl	dfb78 <__aeabi_dmul>
   ddaf0:	2d1f      	cmp	r5, #31
   ddaf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   ddaf6:	dc51      	bgt.n	ddb9c <__ieee754_rem_pio2+0x28c>
   ddaf8:	4b27      	ldr	r3, [pc, #156]	; (ddb98 <__ieee754_rem_pio2+0x288>)
   ddafa:	1e6a      	subs	r2, r5, #1
   ddafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   ddb00:	459b      	cmp	fp, r3
   ddb02:	d04b      	beq.n	ddb9c <__ieee754_rem_pio2+0x28c>
   ddb04:	4602      	mov	r2, r0
   ddb06:	460b      	mov	r3, r1
   ddb08:	4640      	mov	r0, r8
   ddb0a:	4649      	mov	r1, r9
   ddb0c:	f001 fe80 	bl	df810 <__aeabi_dsub>
   ddb10:	4606      	mov	r6, r0
   ddb12:	460f      	mov	r7, r1
   ddb14:	e9ca 6700 	strd	r6, r7, [sl]
   ddb18:	4632      	mov	r2, r6
   ddb1a:	463b      	mov	r3, r7
   ddb1c:	4640      	mov	r0, r8
   ddb1e:	4649      	mov	r1, r9
   ddb20:	f001 fe76 	bl	df810 <__aeabi_dsub>
   ddb24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddb28:	f001 fe72 	bl	df810 <__aeabi_dsub>
   ddb2c:	2c00      	cmp	r4, #0
   ddb2e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   ddb32:	da86      	bge.n	dda42 <__ieee754_rem_pio2+0x132>
   ddb34:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   ddb38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ddb3c:	426d      	negs	r5, r5
   ddb3e:	f8ca 6000 	str.w	r6, [sl]
   ddb42:	f8ca 4004 	str.w	r4, [sl, #4]
   ddb46:	f8ca 0008 	str.w	r0, [sl, #8]
   ddb4a:	f8ca 300c 	str.w	r3, [sl, #12]
   ddb4e:	e778      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   ddb50:	54400000 	.word	0x54400000
   ddb54:	3ff921fb 	.word	0x3ff921fb
   ddb58:	1a626331 	.word	0x1a626331
   ddb5c:	3dd0b461 	.word	0x3dd0b461
   ddb60:	1a600000 	.word	0x1a600000
   ddb64:	3dd0b461 	.word	0x3dd0b461
   ddb68:	2e037073 	.word	0x2e037073
   ddb6c:	3ba3198a 	.word	0x3ba3198a
   ddb70:	6dc9c883 	.word	0x6dc9c883
   ddb74:	3fe45f30 	.word	0x3fe45f30
   ddb78:	3fe921fb 	.word	0x3fe921fb
   ddb7c:	4002d97b 	.word	0x4002d97b
   ddb80:	3ff921fb 	.word	0x3ff921fb
   ddb84:	413921fb 	.word	0x413921fb
   ddb88:	7fefffff 	.word	0x7fefffff
   ddb8c:	41700000 	.word	0x41700000
   ddb90:	000e4208 	.word	0x000e4208
   ddb94:	3fe00000 	.word	0x3fe00000
   ddb98:	000e4188 	.word	0x000e4188
   ddb9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ddba0:	4640      	mov	r0, r8
   ddba2:	4649      	mov	r1, r9
   ddba4:	f001 fe34 	bl	df810 <__aeabi_dsub>
   ddba8:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   ddbac:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ddbb0:	ebc3 030b 	rsb	r3, r3, fp
   ddbb4:	4606      	mov	r6, r0
   ddbb6:	460f      	mov	r7, r1
   ddbb8:	2b10      	cmp	r3, #16
   ddbba:	e9ca 6700 	strd	r6, r7, [sl]
   ddbbe:	ddab      	ble.n	ddb18 <__ieee754_rem_pio2+0x208>
   ddbc0:	a35d      	add	r3, pc, #372	; (adr r3, ddd38 <__ieee754_rem_pio2+0x428>)
   ddbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddbca:	f001 ffd5 	bl	dfb78 <__aeabi_dmul>
   ddbce:	4606      	mov	r6, r0
   ddbd0:	460f      	mov	r7, r1
   ddbd2:	4602      	mov	r2, r0
   ddbd4:	460b      	mov	r3, r1
   ddbd6:	4640      	mov	r0, r8
   ddbd8:	4649      	mov	r1, r9
   ddbda:	f001 fe19 	bl	df810 <__aeabi_dsub>
   ddbde:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddbe2:	4602      	mov	r2, r0
   ddbe4:	460b      	mov	r3, r1
   ddbe6:	4640      	mov	r0, r8
   ddbe8:	4649      	mov	r1, r9
   ddbea:	f001 fe11 	bl	df810 <__aeabi_dsub>
   ddbee:	4632      	mov	r2, r6
   ddbf0:	463b      	mov	r3, r7
   ddbf2:	f001 fe0d 	bl	df810 <__aeabi_dsub>
   ddbf6:	a352      	add	r3, pc, #328	; (adr r3, ddd40 <__ieee754_rem_pio2+0x430>)
   ddbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbfc:	4606      	mov	r6, r0
   ddbfe:	460f      	mov	r7, r1
   ddc00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddc04:	f001 ffb8 	bl	dfb78 <__aeabi_dmul>
   ddc08:	4632      	mov	r2, r6
   ddc0a:	463b      	mov	r3, r7
   ddc0c:	f001 fe00 	bl	df810 <__aeabi_dsub>
   ddc10:	460b      	mov	r3, r1
   ddc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
   ddc16:	4602      	mov	r2, r0
   ddc18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ddc1c:	f001 fdf8 	bl	df810 <__aeabi_dsub>
   ddc20:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ddc24:	ebc3 0b0b 	rsb	fp, r3, fp
   ddc28:	4606      	mov	r6, r0
   ddc2a:	460f      	mov	r7, r1
   ddc2c:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   ddc30:	e9ca 6700 	strd	r6, r7, [sl]
   ddc34:	dd76      	ble.n	ddd24 <__ieee754_rem_pio2+0x414>
   ddc36:	a345      	add	r3, pc, #276	; (adr r3, ddd4c <__ieee754_rem_pio2+0x43c>)
   ddc38:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddc40:	f001 ff9a 	bl	dfb78 <__aeabi_dmul>
   ddc44:	4606      	mov	r6, r0
   ddc46:	460f      	mov	r7, r1
   ddc48:	4602      	mov	r2, r0
   ddc4a:	460b      	mov	r3, r1
   ddc4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ddc50:	f001 fdde 	bl	df810 <__aeabi_dsub>
   ddc54:	4602      	mov	r2, r0
   ddc56:	460b      	mov	r3, r1
   ddc58:	4680      	mov	r8, r0
   ddc5a:	4689      	mov	r9, r1
   ddc5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ddc60:	f001 fdd6 	bl	df810 <__aeabi_dsub>
   ddc64:	4632      	mov	r2, r6
   ddc66:	463b      	mov	r3, r7
   ddc68:	f001 fdd2 	bl	df810 <__aeabi_dsub>
   ddc6c:	a339      	add	r3, pc, #228	; (adr r3, ddd54 <__ieee754_rem_pio2+0x444>)
   ddc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc72:	4606      	mov	r6, r0
   ddc74:	460f      	mov	r7, r1
   ddc76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddc7a:	f001 ff7d 	bl	dfb78 <__aeabi_dmul>
   ddc7e:	4632      	mov	r2, r6
   ddc80:	463b      	mov	r3, r7
   ddc82:	f001 fdc5 	bl	df810 <__aeabi_dsub>
   ddc86:	e9cd 0102 	strd	r0, r1, [sp, #8]
   ddc8a:	e73b      	b.n	ddb04 <__ieee754_rem_pio2+0x1f4>
   ddc8c:	f001 fdc2 	bl	df814 <__adddf3>
   ddc90:	4b2d      	ldr	r3, [pc, #180]	; (ddd48 <__ieee754_rem_pio2+0x438>)
   ddc92:	459b      	cmp	fp, r3
   ddc94:	4604      	mov	r4, r0
   ddc96:	460d      	mov	r5, r1
   ddc98:	d026      	beq.n	ddce8 <__ieee754_rem_pio2+0x3d8>
   ddc9a:	a325      	add	r3, pc, #148	; (adr r3, ddd30 <__ieee754_rem_pio2+0x420>)
   ddc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddca0:	f001 fdb8 	bl	df814 <__adddf3>
   ddca4:	4602      	mov	r2, r0
   ddca6:	460b      	mov	r3, r1
   ddca8:	e9ca 2300 	strd	r2, r3, [sl]
   ddcac:	4629      	mov	r1, r5
   ddcae:	4620      	mov	r0, r4
   ddcb0:	f001 fdae 	bl	df810 <__aeabi_dsub>
   ddcb4:	a31e      	add	r3, pc, #120	; (adr r3, ddd30 <__ieee754_rem_pio2+0x420>)
   ddcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcba:	f001 fdab 	bl	df814 <__adddf3>
   ddcbe:	f04f 35ff 	mov.w	r5, #4294967295
   ddcc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
   ddcc6:	e6bc      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   ddcc8:	f8da 2004 	ldr.w	r2, [sl, #4]
   ddccc:	f8da 300c 	ldr.w	r3, [sl, #12]
   ddcd0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   ddcd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   ddcd8:	4245      	negs	r5, r0
   ddcda:	f8ca 2004 	str.w	r2, [sl, #4]
   ddcde:	f8ca 300c 	str.w	r3, [sl, #12]
   ddce2:	e6ae      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   ddce4:	2303      	movs	r3, #3
   ddce6:	e697      	b.n	dda18 <__ieee754_rem_pio2+0x108>
   ddce8:	a313      	add	r3, pc, #76	; (adr r3, ddd38 <__ieee754_rem_pio2+0x428>)
   ddcea:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcee:	f001 fd91 	bl	df814 <__adddf3>
   ddcf2:	a313      	add	r3, pc, #76	; (adr r3, ddd40 <__ieee754_rem_pio2+0x430>)
   ddcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddcf8:	460d      	mov	r5, r1
   ddcfa:	4604      	mov	r4, r0
   ddcfc:	f001 fd8a 	bl	df814 <__adddf3>
   ddd00:	4602      	mov	r2, r0
   ddd02:	460b      	mov	r3, r1
   ddd04:	e9ca 2300 	strd	r2, r3, [sl]
   ddd08:	4629      	mov	r1, r5
   ddd0a:	4620      	mov	r0, r4
   ddd0c:	f001 fd80 	bl	df810 <__aeabi_dsub>
   ddd10:	a30b      	add	r3, pc, #44	; (adr r3, ddd40 <__ieee754_rem_pio2+0x430>)
   ddd12:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd16:	f001 fd7d 	bl	df814 <__adddf3>
   ddd1a:	f04f 35ff 	mov.w	r5, #4294967295
   ddd1e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   ddd22:	e68e      	b.n	dda42 <__ieee754_rem_pio2+0x132>
   ddd24:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   ddd28:	e6f6      	b.n	ddb18 <__ieee754_rem_pio2+0x208>
   ddd2a:	bf00      	nop
   ddd2c:	f3af 8000 	nop.w
   ddd30:	1a626331 	.word	0x1a626331
   ddd34:	3dd0b461 	.word	0x3dd0b461
   ddd38:	1a600000 	.word	0x1a600000
   ddd3c:	3dd0b461 	.word	0x3dd0b461
   ddd40:	2e037073 	.word	0x2e037073
   ddd44:	3ba3198a 	.word	0x3ba3198a
   ddd48:	3ff921fb 	.word	0x3ff921fb
   ddd4c:	2e000000 	.word	0x2e000000
   ddd50:	3ba3198a 	.word	0x3ba3198a
   ddd54:	252049c1 	.word	0x252049c1
   ddd58:	397b839a 	.word	0x397b839a
   ddd5c:	00000000 	.word	0x00000000

000ddd60 <__ieee754_sinh>:
   ddd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddd64:	ec57 6b10 	vmov	r6, r7, d0
   ddd68:	4a65      	ldr	r2, [pc, #404]	; (ddf00 <__ieee754_sinh+0x1a0>)
   ddd6a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   ddd6e:	4590      	cmp	r8, r2
   ddd70:	dc32      	bgt.n	dddd8 <__ieee754_sinh+0x78>
   ddd72:	4b64      	ldr	r3, [pc, #400]	; (ddf04 <__ieee754_sinh+0x1a4>)
   ddd74:	2f00      	cmp	r7, #0
   ddd76:	bfb4      	ite	lt
   ddd78:	4d63      	ldrlt	r5, [pc, #396]	; (ddf08 <__ieee754_sinh+0x1a8>)
   ddd7a:	4d64      	ldrge	r5, [pc, #400]	; (ddf0c <__ieee754_sinh+0x1ac>)
   ddd7c:	4598      	cmp	r8, r3
   ddd7e:	f04f 0400 	mov.w	r4, #0
   ddd82:	dc14      	bgt.n	dddae <__ieee754_sinh+0x4e>
   ddd84:	4b62      	ldr	r3, [pc, #392]	; (ddf10 <__ieee754_sinh+0x1b0>)
   ddd86:	4598      	cmp	r8, r3
   ddd88:	f300 8085 	bgt.w	dde96 <__ieee754_sinh+0x136>
   ddd8c:	a35a      	add	r3, pc, #360	; (adr r3, ddef8 <__ieee754_sinh+0x198>)
   ddd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd92:	ee10 0a10 	vmov	r0, s0
   ddd96:	4639      	mov	r1, r7
   ddd98:	f001 fd3c 	bl	df814 <__adddf3>
   ddd9c:	2200      	movs	r2, #0
   ddd9e:	4b5d      	ldr	r3, [pc, #372]	; (ddf14 <__ieee754_sinh+0x1b4>)
   ddda0:	f002 f97a 	bl	e0098 <__aeabi_dcmpgt>
   ddda4:	b318      	cbz	r0, dddee <__ieee754_sinh+0x8e>
   ddda6:	ec47 6b10 	vmov	d0, r6, r7
   dddaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dddae:	4b5a      	ldr	r3, [pc, #360]	; (ddf18 <__ieee754_sinh+0x1b8>)
   dddb0:	4598      	cmp	r8, r3
   dddb2:	f340 8092 	ble.w	ddeda <__ieee754_sinh+0x17a>
   dddb6:	4b59      	ldr	r3, [pc, #356]	; (ddf1c <__ieee754_sinh+0x1bc>)
   dddb8:	4598      	cmp	r8, r3
   dddba:	dd4d      	ble.n	dde58 <__ieee754_sinh+0xf8>
   dddbc:	3301      	adds	r3, #1
   dddbe:	4598      	cmp	r8, r3
   dddc0:	d047      	beq.n	dde52 <__ieee754_sinh+0xf2>
   dddc2:	4630      	mov	r0, r6
   dddc4:	4639      	mov	r1, r7
   dddc6:	a34c      	add	r3, pc, #304	; (adr r3, ddef8 <__ieee754_sinh+0x198>)
   dddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddcc:	f001 fed4 	bl	dfb78 <__aeabi_dmul>
   dddd0:	ec41 0b10 	vmov	d0, r0, r1
   dddd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dddd8:	ee10 2a10 	vmov	r2, s0
   ddddc:	463b      	mov	r3, r7
   dddde:	4630      	mov	r0, r6
   ddde0:	4639      	mov	r1, r7
   ddde2:	f001 fd17 	bl	df814 <__adddf3>
   ddde6:	ec41 0b10 	vmov	d0, r0, r1
   dddea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dddee:	ec47 6b10 	vmov	d0, r6, r7
   dddf2:	f7fc fcb9 	bl	da768 <fabs>
   dddf6:	f001 f96b 	bl	df0d0 <expm1>
   dddfa:	ec57 6b10 	vmov	r6, r7, d0
   dddfe:	4632      	mov	r2, r6
   dde00:	463b      	mov	r3, r7
   dde02:	4630      	mov	r0, r6
   dde04:	4639      	mov	r1, r7
   dde06:	f001 fd05 	bl	df814 <__adddf3>
   dde0a:	4632      	mov	r2, r6
   dde0c:	4682      	mov	sl, r0
   dde0e:	468b      	mov	fp, r1
   dde10:	463b      	mov	r3, r7
   dde12:	4630      	mov	r0, r6
   dde14:	4639      	mov	r1, r7
   dde16:	f001 feaf 	bl	dfb78 <__aeabi_dmul>
   dde1a:	2200      	movs	r2, #0
   dde1c:	4680      	mov	r8, r0
   dde1e:	4689      	mov	r9, r1
   dde20:	4b3c      	ldr	r3, [pc, #240]	; (ddf14 <__ieee754_sinh+0x1b4>)
   dde22:	4630      	mov	r0, r6
   dde24:	4639      	mov	r1, r7
   dde26:	f001 fcf5 	bl	df814 <__adddf3>
   dde2a:	4602      	mov	r2, r0
   dde2c:	460b      	mov	r3, r1
   dde2e:	4640      	mov	r0, r8
   dde30:	4649      	mov	r1, r9
   dde32:	f001 ffcb 	bl	dfdcc <__aeabi_ddiv>
   dde36:	4602      	mov	r2, r0
   dde38:	460b      	mov	r3, r1
   dde3a:	4650      	mov	r0, sl
   dde3c:	4659      	mov	r1, fp
   dde3e:	f001 fce7 	bl	df810 <__aeabi_dsub>
   dde42:	4622      	mov	r2, r4
   dde44:	462b      	mov	r3, r5
   dde46:	f001 fe97 	bl	dfb78 <__aeabi_dmul>
   dde4a:	ec41 0b10 	vmov	d0, r0, r1
   dde4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dde52:	4b33      	ldr	r3, [pc, #204]	; (ddf20 <__ieee754_sinh+0x1c0>)
   dde54:	429e      	cmp	r6, r3
   dde56:	d8b4      	bhi.n	dddc2 <__ieee754_sinh+0x62>
   dde58:	ec47 6b10 	vmov	d0, r6, r7
   dde5c:	f7fc fc84 	bl	da768 <fabs>
   dde60:	2200      	movs	r2, #0
   dde62:	4b2a      	ldr	r3, [pc, #168]	; (ddf0c <__ieee754_sinh+0x1ac>)
   dde64:	ec51 0b10 	vmov	r0, r1, d0
   dde68:	f001 fe86 	bl	dfb78 <__aeabi_dmul>
   dde6c:	ec41 0b10 	vmov	d0, r0, r1
   dde70:	f7fe fa52 	bl	dc318 <__ieee754_exp>
   dde74:	ec57 6b10 	vmov	r6, r7, d0
   dde78:	ee10 2a10 	vmov	r2, s0
   dde7c:	463b      	mov	r3, r7
   dde7e:	4620      	mov	r0, r4
   dde80:	4629      	mov	r1, r5
   dde82:	f001 fe79 	bl	dfb78 <__aeabi_dmul>
   dde86:	4632      	mov	r2, r6
   dde88:	463b      	mov	r3, r7
   dde8a:	f001 fe75 	bl	dfb78 <__aeabi_dmul>
   dde8e:	ec41 0b10 	vmov	d0, r0, r1
   dde92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dde96:	f7fc fc67 	bl	da768 <fabs>
   dde9a:	f001 f919 	bl	df0d0 <expm1>
   dde9e:	4b21      	ldr	r3, [pc, #132]	; (ddf24 <__ieee754_sinh+0x1c4>)
   ddea0:	4598      	cmp	r8, r3
   ddea2:	ec57 6b10 	vmov	r6, r7, d0
   ddea6:	ddaa      	ble.n	dddfe <__ieee754_sinh+0x9e>
   ddea8:	ee10 0a10 	vmov	r0, s0
   ddeac:	2200      	movs	r2, #0
   ddeae:	4b19      	ldr	r3, [pc, #100]	; (ddf14 <__ieee754_sinh+0x1b4>)
   ddeb0:	4639      	mov	r1, r7
   ddeb2:	f001 fcaf 	bl	df814 <__adddf3>
   ddeb6:	4602      	mov	r2, r0
   ddeb8:	460b      	mov	r3, r1
   ddeba:	4630      	mov	r0, r6
   ddebc:	4639      	mov	r1, r7
   ddebe:	f001 ff85 	bl	dfdcc <__aeabi_ddiv>
   ddec2:	4632      	mov	r2, r6
   ddec4:	463b      	mov	r3, r7
   ddec6:	f001 fca5 	bl	df814 <__adddf3>
   ddeca:	4622      	mov	r2, r4
   ddecc:	462b      	mov	r3, r5
   ddece:	f001 fe53 	bl	dfb78 <__aeabi_dmul>
   dded2:	ec41 0b10 	vmov	d0, r0, r1
   dded6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddeda:	f7fc fc45 	bl	da768 <fabs>
   ddede:	f7fe fa1b 	bl	dc318 <__ieee754_exp>
   ddee2:	4620      	mov	r0, r4
   ddee4:	ec53 2b10 	vmov	r2, r3, d0
   ddee8:	4629      	mov	r1, r5
   ddeea:	f001 fe45 	bl	dfb78 <__aeabi_dmul>
   ddeee:	ec41 0b10 	vmov	d0, r0, r1
   ddef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddef6:	bf00      	nop
   ddef8:	3cac7433 	.word	0x3cac7433
   ddefc:	7fac7b1f 	.word	0x7fac7b1f
   ddf00:	7fefffff 	.word	0x7fefffff
   ddf04:	4035ffff 	.word	0x4035ffff
   ddf08:	bfe00000 	.word	0xbfe00000
   ddf0c:	3fe00000 	.word	0x3fe00000
   ddf10:	3e2fffff 	.word	0x3e2fffff
   ddf14:	3ff00000 	.word	0x3ff00000
   ddf18:	40862e41 	.word	0x40862e41
   ddf1c:	408633cd 	.word	0x408633cd
   ddf20:	8fb9f87d 	.word	0x8fb9f87d
   ddf24:	3fefffff 	.word	0x3fefffff

000ddf28 <__ieee754_sqrt>:
   ddf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddf2c:	4965      	ldr	r1, [pc, #404]	; (de0c4 <__ieee754_sqrt+0x19c>)
   ddf2e:	ec55 4b10 	vmov	r4, r5, d0
   ddf32:	460e      	mov	r6, r1
   ddf34:	4029      	ands	r1, r5
   ddf36:	42b1      	cmp	r1, r6
   ddf38:	f000 8097 	beq.w	de06a <__ieee754_sqrt+0x142>
   ddf3c:	2d00      	cmp	r5, #0
   ddf3e:	462b      	mov	r3, r5
   ddf40:	ee10 2a10 	vmov	r2, s0
   ddf44:	dd74      	ble.n	de030 <__ieee754_sqrt+0x108>
   ddf46:	152f      	asrs	r7, r5, #20
   ddf48:	d07f      	beq.n	de04a <__ieee754_sqrt+0x122>
   ddf4a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   ddf4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ddf52:	07f9      	lsls	r1, r7, #31
   ddf54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ddf58:	d465      	bmi.n	de026 <__ieee754_sqrt+0xfe>
   ddf5a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   ddf5e:	2600      	movs	r6, #0
   ddf60:	440b      	add	r3, r1
   ddf62:	107f      	asrs	r7, r7, #1
   ddf64:	0052      	lsls	r2, r2, #1
   ddf66:	46b6      	mov	lr, r6
   ddf68:	2016      	movs	r0, #22
   ddf6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   ddf6e:	eb0e 0401 	add.w	r4, lr, r1
   ddf72:	429c      	cmp	r4, r3
   ddf74:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   ddf78:	ea4f 0242 	mov.w	r2, r2, lsl #1
   ddf7c:	dc03      	bgt.n	ddf86 <__ieee754_sqrt+0x5e>
   ddf7e:	1b1b      	subs	r3, r3, r4
   ddf80:	eb04 0e01 	add.w	lr, r4, r1
   ddf84:	440e      	add	r6, r1
   ddf86:	3801      	subs	r0, #1
   ddf88:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   ddf8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   ddf90:	d1ed      	bne.n	ddf6e <__ieee754_sqrt+0x46>
   ddf92:	4684      	mov	ip, r0
   ddf94:	2420      	movs	r4, #32
   ddf96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   ddf9a:	e009      	b.n	ddfb0 <__ieee754_sqrt+0x88>
   ddf9c:	d020      	beq.n	ddfe0 <__ieee754_sqrt+0xb8>
   ddf9e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   ddfa2:	3c01      	subs	r4, #1
   ddfa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   ddfa8:	442b      	add	r3, r5
   ddfaa:	ea4f 0242 	mov.w	r2, r2, lsl #1
   ddfae:	d020      	beq.n	ddff2 <__ieee754_sqrt+0xca>
   ddfb0:	459e      	cmp	lr, r3
   ddfb2:	eb01 050c 	add.w	r5, r1, ip
   ddfb6:	daf1      	bge.n	ddf9c <__ieee754_sqrt+0x74>
   ddfb8:	2d00      	cmp	r5, #0
   ddfba:	eb05 0c01 	add.w	ip, r5, r1
   ddfbe:	db09      	blt.n	ddfd4 <__ieee754_sqrt+0xac>
   ddfc0:	46f0      	mov	r8, lr
   ddfc2:	4295      	cmp	r5, r2
   ddfc4:	ebce 0303 	rsb	r3, lr, r3
   ddfc8:	d900      	bls.n	ddfcc <__ieee754_sqrt+0xa4>
   ddfca:	3b01      	subs	r3, #1
   ddfcc:	1b52      	subs	r2, r2, r5
   ddfce:	4408      	add	r0, r1
   ddfd0:	46c6      	mov	lr, r8
   ddfd2:	e7e4      	b.n	ddf9e <__ieee754_sqrt+0x76>
   ddfd4:	f1bc 0f00 	cmp.w	ip, #0
   ddfd8:	dbf2      	blt.n	ddfc0 <__ieee754_sqrt+0x98>
   ddfda:	f10e 0801 	add.w	r8, lr, #1
   ddfde:	e7f0      	b.n	ddfc2 <__ieee754_sqrt+0x9a>
   ddfe0:	4295      	cmp	r5, r2
   ddfe2:	d81e      	bhi.n	de022 <__ieee754_sqrt+0xfa>
   ddfe4:	2d00      	cmp	r5, #0
   ddfe6:	eb05 0c01 	add.w	ip, r5, r1
   ddfea:	db50      	blt.n	de08e <__ieee754_sqrt+0x166>
   ddfec:	4698      	mov	r8, r3
   ddfee:	2300      	movs	r3, #0
   ddff0:	e7ec      	b.n	ddfcc <__ieee754_sqrt+0xa4>
   ddff2:	4313      	orrs	r3, r2
   ddff4:	d004      	beq.n	de000 <__ieee754_sqrt+0xd8>
   ddff6:	1c42      	adds	r2, r0, #1
   ddff8:	d04d      	beq.n	de096 <__ieee754_sqrt+0x16e>
   ddffa:	f000 0301 	and.w	r3, r0, #1
   ddffe:	4418      	add	r0, r3
   de000:	0840      	lsrs	r0, r0, #1
   de002:	1071      	asrs	r1, r6, #1
   de004:	07f3      	lsls	r3, r6, #31
   de006:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   de00a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   de00e:	bf48      	it	mi
   de010:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   de014:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   de018:	4602      	mov	r2, r0
   de01a:	ec43 2b10 	vmov	d0, r2, r3
   de01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de022:	4673      	mov	r3, lr
   de024:	e7bb      	b.n	ddf9e <__ieee754_sqrt+0x76>
   de026:	005b      	lsls	r3, r3, #1
   de028:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   de02c:	0052      	lsls	r2, r2, #1
   de02e:	e794      	b.n	ddf5a <__ieee754_sqrt+0x32>
   de030:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   de034:	4321      	orrs	r1, r4
   de036:	d028      	beq.n	de08a <__ieee754_sqrt+0x162>
   de038:	bbad      	cbnz	r5, de0a6 <__ieee754_sqrt+0x17e>
   de03a:	462f      	mov	r7, r5
   de03c:	0ad3      	lsrs	r3, r2, #11
   de03e:	3f15      	subs	r7, #21
   de040:	0552      	lsls	r2, r2, #21
   de042:	2b00      	cmp	r3, #0
   de044:	d0fa      	beq.n	de03c <__ieee754_sqrt+0x114>
   de046:	02dd      	lsls	r5, r3, #11
   de048:	d428      	bmi.n	de09c <__ieee754_sqrt+0x174>
   de04a:	2100      	movs	r1, #0
   de04c:	e000      	b.n	de050 <__ieee754_sqrt+0x128>
   de04e:	4601      	mov	r1, r0
   de050:	005b      	lsls	r3, r3, #1
   de052:	02dc      	lsls	r4, r3, #11
   de054:	f101 0001 	add.w	r0, r1, #1
   de058:	d5f9      	bpl.n	de04e <__ieee754_sqrt+0x126>
   de05a:	f1c0 0420 	rsb	r4, r0, #32
   de05e:	fa22 f404 	lsr.w	r4, r2, r4
   de062:	4323      	orrs	r3, r4
   de064:	1a7f      	subs	r7, r7, r1
   de066:	4082      	lsls	r2, r0
   de068:	e76f      	b.n	ddf4a <__ieee754_sqrt+0x22>
   de06a:	ee10 2a10 	vmov	r2, s0
   de06e:	462b      	mov	r3, r5
   de070:	ee10 0a10 	vmov	r0, s0
   de074:	4629      	mov	r1, r5
   de076:	f001 fd7f 	bl	dfb78 <__aeabi_dmul>
   de07a:	4622      	mov	r2, r4
   de07c:	462b      	mov	r3, r5
   de07e:	f001 fbc9 	bl	df814 <__adddf3>
   de082:	ec41 0b10 	vmov	d0, r0, r1
   de086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de08e:	f1bc 0f00 	cmp.w	ip, #0
   de092:	daa2      	bge.n	ddfda <__ieee754_sqrt+0xb2>
   de094:	e7aa      	b.n	ddfec <__ieee754_sqrt+0xc4>
   de096:	3601      	adds	r6, #1
   de098:	4620      	mov	r0, r4
   de09a:	e7b2      	b.n	de002 <__ieee754_sqrt+0xda>
   de09c:	2420      	movs	r4, #32
   de09e:	f04f 31ff 	mov.w	r1, #4294967295
   de0a2:	2000      	movs	r0, #0
   de0a4:	e7db      	b.n	de05e <__ieee754_sqrt+0x136>
   de0a6:	ee10 2a10 	vmov	r2, s0
   de0aa:	462b      	mov	r3, r5
   de0ac:	4620      	mov	r0, r4
   de0ae:	4629      	mov	r1, r5
   de0b0:	f001 fbae 	bl	df810 <__aeabi_dsub>
   de0b4:	4602      	mov	r2, r0
   de0b6:	460b      	mov	r3, r1
   de0b8:	f001 fe88 	bl	dfdcc <__aeabi_ddiv>
   de0bc:	ec41 0b10 	vmov	d0, r0, r1
   de0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de0c4:	7ff00000 	.word	0x7ff00000

000de0c8 <__kernel_cos>:
   de0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de0cc:	ec57 6b10 	vmov	r6, r7, d0
   de0d0:	ed2d 8b02 	vpush	{d8}
   de0d4:	eeb0 8a41 	vmov.f32	s16, s2
   de0d8:	eef0 8a61 	vmov.f32	s17, s3
   de0dc:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   de0e0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   de0e4:	b083      	sub	sp, #12
   de0e6:	da72      	bge.n	de1ce <__kernel_cos+0x106>
   de0e8:	ee10 0a10 	vmov	r0, s0
   de0ec:	4639      	mov	r1, r7
   de0ee:	f001 fff3 	bl	e00d8 <__aeabi_d2iz>
   de0f2:	2800      	cmp	r0, #0
   de0f4:	f000 80f6 	beq.w	de2e4 <__kernel_cos+0x21c>
   de0f8:	4632      	mov	r2, r6
   de0fa:	463b      	mov	r3, r7
   de0fc:	4630      	mov	r0, r6
   de0fe:	4639      	mov	r1, r7
   de100:	f001 fd3a 	bl	dfb78 <__aeabi_dmul>
   de104:	a37c      	add	r3, pc, #496	; (adr r3, de2f8 <__kernel_cos+0x230>)
   de106:	e9d3 2300 	ldrd	r2, r3, [r3]
   de10a:	4604      	mov	r4, r0
   de10c:	460d      	mov	r5, r1
   de10e:	f001 fd33 	bl	dfb78 <__aeabi_dmul>
   de112:	a37b      	add	r3, pc, #492	; (adr r3, de300 <__kernel_cos+0x238>)
   de114:	e9d3 2300 	ldrd	r2, r3, [r3]
   de118:	f001 fb7c 	bl	df814 <__adddf3>
   de11c:	4622      	mov	r2, r4
   de11e:	462b      	mov	r3, r5
   de120:	f001 fd2a 	bl	dfb78 <__aeabi_dmul>
   de124:	a378      	add	r3, pc, #480	; (adr r3, de308 <__kernel_cos+0x240>)
   de126:	e9d3 2300 	ldrd	r2, r3, [r3]
   de12a:	f001 fb71 	bl	df810 <__aeabi_dsub>
   de12e:	4622      	mov	r2, r4
   de130:	462b      	mov	r3, r5
   de132:	f001 fd21 	bl	dfb78 <__aeabi_dmul>
   de136:	a376      	add	r3, pc, #472	; (adr r3, de310 <__kernel_cos+0x248>)
   de138:	e9d3 2300 	ldrd	r2, r3, [r3]
   de13c:	f001 fb6a 	bl	df814 <__adddf3>
   de140:	4622      	mov	r2, r4
   de142:	462b      	mov	r3, r5
   de144:	f001 fd18 	bl	dfb78 <__aeabi_dmul>
   de148:	a373      	add	r3, pc, #460	; (adr r3, de318 <__kernel_cos+0x250>)
   de14a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de14e:	f001 fb5f 	bl	df810 <__aeabi_dsub>
   de152:	4622      	mov	r2, r4
   de154:	462b      	mov	r3, r5
   de156:	f001 fd0f 	bl	dfb78 <__aeabi_dmul>
   de15a:	a371      	add	r3, pc, #452	; (adr r3, de320 <__kernel_cos+0x258>)
   de15c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de160:	f001 fb58 	bl	df814 <__adddf3>
   de164:	4622      	mov	r2, r4
   de166:	462b      	mov	r3, r5
   de168:	f001 fd06 	bl	dfb78 <__aeabi_dmul>
   de16c:	4682      	mov	sl, r0
   de16e:	468b      	mov	fp, r1
   de170:	2200      	movs	r2, #0
   de172:	4b71      	ldr	r3, [pc, #452]	; (de338 <__kernel_cos+0x270>)
   de174:	4620      	mov	r0, r4
   de176:	4629      	mov	r1, r5
   de178:	f001 fcfe 	bl	dfb78 <__aeabi_dmul>
   de17c:	4652      	mov	r2, sl
   de17e:	4680      	mov	r8, r0
   de180:	4689      	mov	r9, r1
   de182:	465b      	mov	r3, fp
   de184:	4620      	mov	r0, r4
   de186:	4629      	mov	r1, r5
   de188:	f001 fcf6 	bl	dfb78 <__aeabi_dmul>
   de18c:	ec53 2b18 	vmov	r2, r3, d8
   de190:	4604      	mov	r4, r0
   de192:	460d      	mov	r5, r1
   de194:	4630      	mov	r0, r6
   de196:	4639      	mov	r1, r7
   de198:	f001 fcee 	bl	dfb78 <__aeabi_dmul>
   de19c:	4602      	mov	r2, r0
   de19e:	460b      	mov	r3, r1
   de1a0:	4620      	mov	r0, r4
   de1a2:	4629      	mov	r1, r5
   de1a4:	f001 fb34 	bl	df810 <__aeabi_dsub>
   de1a8:	4602      	mov	r2, r0
   de1aa:	460b      	mov	r3, r1
   de1ac:	4640      	mov	r0, r8
   de1ae:	4649      	mov	r1, r9
   de1b0:	f001 fb2e 	bl	df810 <__aeabi_dsub>
   de1b4:	4602      	mov	r2, r0
   de1b6:	460b      	mov	r3, r1
   de1b8:	2000      	movs	r0, #0
   de1ba:	4960      	ldr	r1, [pc, #384]	; (de33c <__kernel_cos+0x274>)
   de1bc:	f001 fb28 	bl	df810 <__aeabi_dsub>
   de1c0:	ec41 0b10 	vmov	d0, r0, r1
   de1c4:	b003      	add	sp, #12
   de1c6:	ecbd 8b02 	vpop	{d8}
   de1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de1ce:	ee10 2a10 	vmov	r2, s0
   de1d2:	ee10 0a10 	vmov	r0, s0
   de1d6:	463b      	mov	r3, r7
   de1d8:	4639      	mov	r1, r7
   de1da:	f001 fccd 	bl	dfb78 <__aeabi_dmul>
   de1de:	a346      	add	r3, pc, #280	; (adr r3, de2f8 <__kernel_cos+0x230>)
   de1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1e4:	4604      	mov	r4, r0
   de1e6:	460d      	mov	r5, r1
   de1e8:	f001 fcc6 	bl	dfb78 <__aeabi_dmul>
   de1ec:	a344      	add	r3, pc, #272	; (adr r3, de300 <__kernel_cos+0x238>)
   de1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   de1f2:	f001 fb0f 	bl	df814 <__adddf3>
   de1f6:	4622      	mov	r2, r4
   de1f8:	462b      	mov	r3, r5
   de1fa:	f001 fcbd 	bl	dfb78 <__aeabi_dmul>
   de1fe:	a342      	add	r3, pc, #264	; (adr r3, de308 <__kernel_cos+0x240>)
   de200:	e9d3 2300 	ldrd	r2, r3, [r3]
   de204:	f001 fb04 	bl	df810 <__aeabi_dsub>
   de208:	4622      	mov	r2, r4
   de20a:	462b      	mov	r3, r5
   de20c:	f001 fcb4 	bl	dfb78 <__aeabi_dmul>
   de210:	a33f      	add	r3, pc, #252	; (adr r3, de310 <__kernel_cos+0x248>)
   de212:	e9d3 2300 	ldrd	r2, r3, [r3]
   de216:	f001 fafd 	bl	df814 <__adddf3>
   de21a:	4622      	mov	r2, r4
   de21c:	462b      	mov	r3, r5
   de21e:	f001 fcab 	bl	dfb78 <__aeabi_dmul>
   de222:	a33d      	add	r3, pc, #244	; (adr r3, de318 <__kernel_cos+0x250>)
   de224:	e9d3 2300 	ldrd	r2, r3, [r3]
   de228:	f001 faf2 	bl	df810 <__aeabi_dsub>
   de22c:	4622      	mov	r2, r4
   de22e:	462b      	mov	r3, r5
   de230:	f001 fca2 	bl	dfb78 <__aeabi_dmul>
   de234:	a33a      	add	r3, pc, #232	; (adr r3, de320 <__kernel_cos+0x258>)
   de236:	e9d3 2300 	ldrd	r2, r3, [r3]
   de23a:	f001 faeb 	bl	df814 <__adddf3>
   de23e:	462b      	mov	r3, r5
   de240:	4622      	mov	r2, r4
   de242:	f001 fc99 	bl	dfb78 <__aeabi_dmul>
   de246:	4b3e      	ldr	r3, [pc, #248]	; (de340 <__kernel_cos+0x278>)
   de248:	4599      	cmp	r9, r3
   de24a:	4682      	mov	sl, r0
   de24c:	468b      	mov	fp, r1
   de24e:	dd8f      	ble.n	de170 <__kernel_cos+0xa8>
   de250:	4b3c      	ldr	r3, [pc, #240]	; (de344 <__kernel_cos+0x27c>)
   de252:	4599      	cmp	r9, r3
   de254:	dc3d      	bgt.n	de2d2 <__kernel_cos+0x20a>
   de256:	2200      	movs	r2, #0
   de258:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   de25c:	2000      	movs	r0, #0
   de25e:	4937      	ldr	r1, [pc, #220]	; (de33c <__kernel_cos+0x274>)
   de260:	4690      	mov	r8, r2
   de262:	4699      	mov	r9, r3
   de264:	f001 fad4 	bl	df810 <__aeabi_dsub>
   de268:	e9cd 0100 	strd	r0, r1, [sp]
   de26c:	2200      	movs	r2, #0
   de26e:	4b32      	ldr	r3, [pc, #200]	; (de338 <__kernel_cos+0x270>)
   de270:	4620      	mov	r0, r4
   de272:	4629      	mov	r1, r5
   de274:	f001 fc80 	bl	dfb78 <__aeabi_dmul>
   de278:	4642      	mov	r2, r8
   de27a:	464b      	mov	r3, r9
   de27c:	f001 fac8 	bl	df810 <__aeabi_dsub>
   de280:	4652      	mov	r2, sl
   de282:	4680      	mov	r8, r0
   de284:	4689      	mov	r9, r1
   de286:	465b      	mov	r3, fp
   de288:	4620      	mov	r0, r4
   de28a:	4629      	mov	r1, r5
   de28c:	f001 fc74 	bl	dfb78 <__aeabi_dmul>
   de290:	ec53 2b18 	vmov	r2, r3, d8
   de294:	4604      	mov	r4, r0
   de296:	460d      	mov	r5, r1
   de298:	4630      	mov	r0, r6
   de29a:	4639      	mov	r1, r7
   de29c:	f001 fc6c 	bl	dfb78 <__aeabi_dmul>
   de2a0:	4602      	mov	r2, r0
   de2a2:	460b      	mov	r3, r1
   de2a4:	4620      	mov	r0, r4
   de2a6:	4629      	mov	r1, r5
   de2a8:	f001 fab2 	bl	df810 <__aeabi_dsub>
   de2ac:	4602      	mov	r2, r0
   de2ae:	460b      	mov	r3, r1
   de2b0:	4640      	mov	r0, r8
   de2b2:	4649      	mov	r1, r9
   de2b4:	f001 faac 	bl	df810 <__aeabi_dsub>
   de2b8:	4602      	mov	r2, r0
   de2ba:	460b      	mov	r3, r1
   de2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   de2c0:	f001 faa6 	bl	df810 <__aeabi_dsub>
   de2c4:	ec41 0b10 	vmov	d0, r0, r1
   de2c8:	b003      	add	sp, #12
   de2ca:	ecbd 8b02 	vpop	{d8}
   de2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de2d2:	ed9f 7b15 	vldr	d7, [pc, #84]	; de328 <__kernel_cos+0x260>
   de2d6:	f04f 0800 	mov.w	r8, #0
   de2da:	ed8d 7b00 	vstr	d7, [sp]
   de2de:	f8df 9068 	ldr.w	r9, [pc, #104]	; de348 <__kernel_cos+0x280>
   de2e2:	e7c3      	b.n	de26c <__kernel_cos+0x1a4>
   de2e4:	ed9f 0b12 	vldr	d0, [pc, #72]	; de330 <__kernel_cos+0x268>
   de2e8:	b003      	add	sp, #12
   de2ea:	ecbd 8b02 	vpop	{d8}
   de2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de2f2:	bf00      	nop
   de2f4:	f3af 8000 	nop.w
   de2f8:	be8838d4 	.word	0xbe8838d4
   de2fc:	bda8fae9 	.word	0xbda8fae9
   de300:	bdb4b1c4 	.word	0xbdb4b1c4
   de304:	3e21ee9e 	.word	0x3e21ee9e
   de308:	809c52ad 	.word	0x809c52ad
   de30c:	3e927e4f 	.word	0x3e927e4f
   de310:	19cb1590 	.word	0x19cb1590
   de314:	3efa01a0 	.word	0x3efa01a0
   de318:	16c15177 	.word	0x16c15177
   de31c:	3f56c16c 	.word	0x3f56c16c
   de320:	5555554c 	.word	0x5555554c
   de324:	3fa55555 	.word	0x3fa55555
   de328:	00000000 	.word	0x00000000
   de32c:	3fe70000 	.word	0x3fe70000
   de330:	00000000 	.word	0x00000000
   de334:	3ff00000 	.word	0x3ff00000
   de338:	3fe00000 	.word	0x3fe00000
   de33c:	3ff00000 	.word	0x3ff00000
   de340:	3fd33332 	.word	0x3fd33332
   de344:	3fe90000 	.word	0x3fe90000
   de348:	3fd20000 	.word	0x3fd20000
   de34c:	00000000 	.word	0x00000000

000de350 <__kernel_rem_pio2>:
   de350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de354:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   de358:	4c81      	ldr	r4, [pc, #516]	; (de560 <__kernel_rem_pio2+0x210>)
   de35a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   de35c:	4d81      	ldr	r5, [pc, #516]	; (de564 <__kernel_rem_pio2+0x214>)
   de35e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   de362:	9407      	str	r4, [sp, #28]
   de364:	4626      	mov	r6, r4
   de366:	1ed4      	subs	r4, r2, #3
   de368:	fb85 7504 	smull	r7, r5, r5, r4
   de36c:	17e4      	asrs	r4, r4, #31
   de36e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   de372:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   de376:	461d      	mov	r5, r3
   de378:	930a      	str	r3, [sp, #40]	; 0x28
   de37a:	1c63      	adds	r3, r4, #1
   de37c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   de380:	3d01      	subs	r5, #1
   de382:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   de386:	9306      	str	r3, [sp, #24]
   de388:	462b      	mov	r3, r5
   de38a:	940b      	str	r4, [sp, #44]	; 0x2c
   de38c:	9500      	str	r5, [sp, #0]
   de38e:	1b65      	subs	r5, r4, r5
   de390:	18f4      	adds	r4, r6, r3
   de392:	9003      	str	r0, [sp, #12]
   de394:	9108      	str	r1, [sp, #32]
   de396:	d416      	bmi.n	de3c6 <__kernel_rem_pio2+0x76>
   de398:	442c      	add	r4, r5
   de39a:	3401      	adds	r4, #1
   de39c:	ae22      	add	r6, sp, #136	; 0x88
   de39e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   de3a0:	e008      	b.n	de3b4 <__kernel_rem_pio2+0x64>
   de3a2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   de3a6:	f001 fb81 	bl	dfaac <__aeabi_i2d>
   de3aa:	3501      	adds	r5, #1
   de3ac:	42a5      	cmp	r5, r4
   de3ae:	e8e6 0102 	strd	r0, r1, [r6], #8
   de3b2:	d008      	beq.n	de3c6 <__kernel_rem_pio2+0x76>
   de3b4:	2d00      	cmp	r5, #0
   de3b6:	daf4      	bge.n	de3a2 <__kernel_rem_pio2+0x52>
   de3b8:	3501      	adds	r5, #1
   de3ba:	2000      	movs	r0, #0
   de3bc:	2100      	movs	r1, #0
   de3be:	42a5      	cmp	r5, r4
   de3c0:	e8e6 0102 	strd	r0, r1, [r6], #8
   de3c4:	d1f6      	bne.n	de3b4 <__kernel_rem_pio2+0x64>
   de3c6:	9b07      	ldr	r3, [sp, #28]
   de3c8:	2b00      	cmp	r3, #0
   de3ca:	f2c0 83c2 	blt.w	deb52 <__kernel_rem_pio2+0x802>
   de3ce:	9b07      	ldr	r3, [sp, #28]
   de3d0:	f103 0b01 	add.w	fp, r3, #1
   de3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   de3d6:	a922      	add	r1, sp, #136	; 0x88
   de3d8:	00db      	lsls	r3, r3, #3
   de3da:	461a      	mov	r2, r3
   de3dc:	eb01 0903 	add.w	r9, r1, r3
   de3e0:	9304      	str	r3, [sp, #16]
   de3e2:	9b03      	ldr	r3, [sp, #12]
   de3e4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   de3e8:	4619      	mov	r1, r3
   de3ea:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   de3ee:	eb01 0802 	add.w	r8, r1, r2
   de3f2:	9b00      	ldr	r3, [sp, #0]
   de3f4:	2b00      	cmp	r3, #0
   de3f6:	f2c0 818f 	blt.w	de718 <__kernel_rem_pio2+0x3c8>
   de3fa:	9c03      	ldr	r4, [sp, #12]
   de3fc:	464d      	mov	r5, r9
   de3fe:	2600      	movs	r6, #0
   de400:	2700      	movs	r7, #0
   de402:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   de406:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   de40a:	f001 fbb5 	bl	dfb78 <__aeabi_dmul>
   de40e:	4602      	mov	r2, r0
   de410:	460b      	mov	r3, r1
   de412:	4630      	mov	r0, r6
   de414:	4639      	mov	r1, r7
   de416:	f001 f9fd 	bl	df814 <__adddf3>
   de41a:	4544      	cmp	r4, r8
   de41c:	4606      	mov	r6, r0
   de41e:	460f      	mov	r7, r1
   de420:	d1ef      	bne.n	de402 <__kernel_rem_pio2+0xb2>
   de422:	e8ea 6702 	strd	r6, r7, [sl], #8
   de426:	45da      	cmp	sl, fp
   de428:	f109 0908 	add.w	r9, r9, #8
   de42c:	d1e1      	bne.n	de3f2 <__kernel_rem_pio2+0xa2>
   de42e:	9907      	ldr	r1, [sp, #28]
   de430:	9804      	ldr	r0, [sp, #16]
   de432:	9c03      	ldr	r4, [sp, #12]
   de434:	9104      	str	r1, [sp, #16]
   de436:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   de43a:	3b02      	subs	r3, #2
   de43c:	009b      	lsls	r3, r3, #2
   de43e:	4420      	add	r0, r4
   de440:	1d1a      	adds	r2, r3, #4
   de442:	4683      	mov	fp, r0
   de444:	a80e      	add	r0, sp, #56	; 0x38
   de446:	4402      	add	r2, r0
   de448:	4403      	add	r3, r0
   de44a:	920d      	str	r2, [sp, #52]	; 0x34
   de44c:	930c      	str	r3, [sp, #48]	; 0x30
   de44e:	9a04      	ldr	r2, [sp, #16]
   de450:	a99a      	add	r1, sp, #616	; 0x268
   de452:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   de456:	2a00      	cmp	r2, #0
   de458:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   de45c:	dd29      	ble.n	de4b2 <__kernel_rem_pio2+0x162>
   de45e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   de462:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   de466:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   de46a:	2200      	movs	r2, #0
   de46c:	4b3e      	ldr	r3, [pc, #248]	; (de568 <__kernel_rem_pio2+0x218>)
   de46e:	4620      	mov	r0, r4
   de470:	4629      	mov	r1, r5
   de472:	f001 fb81 	bl	dfb78 <__aeabi_dmul>
   de476:	f001 fe2f 	bl	e00d8 <__aeabi_d2iz>
   de47a:	f001 fb17 	bl	dfaac <__aeabi_i2d>
   de47e:	2200      	movs	r2, #0
   de480:	4b3a      	ldr	r3, [pc, #232]	; (de56c <__kernel_rem_pio2+0x21c>)
   de482:	4606      	mov	r6, r0
   de484:	460f      	mov	r7, r1
   de486:	f001 fb77 	bl	dfb78 <__aeabi_dmul>
   de48a:	4602      	mov	r2, r0
   de48c:	460b      	mov	r3, r1
   de48e:	4620      	mov	r0, r4
   de490:	4629      	mov	r1, r5
   de492:	f001 f9bd 	bl	df810 <__aeabi_dsub>
   de496:	f001 fe1f 	bl	e00d8 <__aeabi_d2iz>
   de49a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   de49e:	f849 0f04 	str.w	r0, [r9, #4]!
   de4a2:	4639      	mov	r1, r7
   de4a4:	4630      	mov	r0, r6
   de4a6:	f001 f9b5 	bl	df814 <__adddf3>
   de4aa:	45d0      	cmp	r8, sl
   de4ac:	4604      	mov	r4, r0
   de4ae:	460d      	mov	r5, r1
   de4b0:	d1db      	bne.n	de46a <__kernel_rem_pio2+0x11a>
   de4b2:	f8dd 9018 	ldr.w	r9, [sp, #24]
   de4b6:	ec45 4b10 	vmov	d0, r4, r5
   de4ba:	4648      	mov	r0, r9
   de4bc:	f001 f910 	bl	df6e0 <scalbn>
   de4c0:	ec55 4b10 	vmov	r4, r5, d0
   de4c4:	2200      	movs	r2, #0
   de4c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   de4ca:	ee10 0a10 	vmov	r0, s0
   de4ce:	4629      	mov	r1, r5
   de4d0:	f001 fb52 	bl	dfb78 <__aeabi_dmul>
   de4d4:	ec41 0b10 	vmov	d0, r0, r1
   de4d8:	f7fc f94e 	bl	da778 <floor>
   de4dc:	2200      	movs	r2, #0
   de4de:	ec51 0b10 	vmov	r0, r1, d0
   de4e2:	4b23      	ldr	r3, [pc, #140]	; (de570 <__kernel_rem_pio2+0x220>)
   de4e4:	f001 fb48 	bl	dfb78 <__aeabi_dmul>
   de4e8:	4602      	mov	r2, r0
   de4ea:	460b      	mov	r3, r1
   de4ec:	4620      	mov	r0, r4
   de4ee:	4629      	mov	r1, r5
   de4f0:	f001 f98e 	bl	df810 <__aeabi_dsub>
   de4f4:	460d      	mov	r5, r1
   de4f6:	4604      	mov	r4, r0
   de4f8:	f001 fdee 	bl	e00d8 <__aeabi_d2iz>
   de4fc:	4680      	mov	r8, r0
   de4fe:	f001 fad5 	bl	dfaac <__aeabi_i2d>
   de502:	460b      	mov	r3, r1
   de504:	4602      	mov	r2, r0
   de506:	4629      	mov	r1, r5
   de508:	4620      	mov	r0, r4
   de50a:	f001 f981 	bl	df810 <__aeabi_dsub>
   de50e:	464b      	mov	r3, r9
   de510:	2b00      	cmp	r3, #0
   de512:	4606      	mov	r6, r0
   de514:	460f      	mov	r7, r1
   de516:	f340 80e5 	ble.w	de6e4 <__kernel_rem_pio2+0x394>
   de51a:	9a04      	ldr	r2, [sp, #16]
   de51c:	a90e      	add	r1, sp, #56	; 0x38
   de51e:	3a01      	subs	r2, #1
   de520:	f1c9 0318 	rsb	r3, r9, #24
   de524:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   de528:	fa45 f103 	asr.w	r1, r5, r3
   de52c:	fa01 f303 	lsl.w	r3, r1, r3
   de530:	a80e      	add	r0, sp, #56	; 0x38
   de532:	1aeb      	subs	r3, r5, r3
   de534:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   de538:	f1c9 0517 	rsb	r5, r9, #23
   de53c:	4488      	add	r8, r1
   de53e:	fa43 f505 	asr.w	r5, r3, r5
   de542:	2d00      	cmp	r5, #0
   de544:	dd41      	ble.n	de5ca <__kernel_rem_pio2+0x27a>
   de546:	9b04      	ldr	r3, [sp, #16]
   de548:	2b00      	cmp	r3, #0
   de54a:	f108 0801 	add.w	r8, r8, #1
   de54e:	f340 82c9 	ble.w	deae4 <__kernel_rem_pio2+0x794>
   de552:	2200      	movs	r2, #0
   de554:	4614      	mov	r4, r2
   de556:	a90d      	add	r1, sp, #52	; 0x34
   de558:	9804      	ldr	r0, [sp, #16]
   de55a:	46ae      	mov	lr, r5
   de55c:	e012      	b.n	de584 <__kernel_rem_pio2+0x234>
   de55e:	bf00      	nop
   de560:	000e4310 	.word	0x000e4310
   de564:	2aaaaaab 	.word	0x2aaaaaab
   de568:	3e700000 	.word	0x3e700000
   de56c:	41700000 	.word	0x41700000
   de570:	40200000 	.word	0x40200000
   de574:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   de578:	b10b      	cbz	r3, de57e <__kernel_rem_pio2+0x22e>
   de57a:	600d      	str	r5, [r1, #0]
   de57c:	2401      	movs	r4, #1
   de57e:	3201      	adds	r2, #1
   de580:	4290      	cmp	r0, r2
   de582:	dd0d      	ble.n	de5a0 <__kernel_rem_pio2+0x250>
   de584:	f851 3f04 	ldr.w	r3, [r1, #4]!
   de588:	2c00      	cmp	r4, #0
   de58a:	d0f3      	beq.n	de574 <__kernel_rem_pio2+0x224>
   de58c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   de590:	3201      	adds	r2, #1
   de592:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   de596:	4290      	cmp	r0, r2
   de598:	600b      	str	r3, [r1, #0]
   de59a:	f04f 0401 	mov.w	r4, #1
   de59e:	dcf1      	bgt.n	de584 <__kernel_rem_pio2+0x234>
   de5a0:	4675      	mov	r5, lr
   de5a2:	9b06      	ldr	r3, [sp, #24]
   de5a4:	2b00      	cmp	r3, #0
   de5a6:	dd0e      	ble.n	de5c6 <__kernel_rem_pio2+0x276>
   de5a8:	2b01      	cmp	r3, #1
   de5aa:	f000 80a3 	beq.w	de6f4 <__kernel_rem_pio2+0x3a4>
   de5ae:	2b02      	cmp	r3, #2
   de5b0:	d109      	bne.n	de5c6 <__kernel_rem_pio2+0x276>
   de5b2:	9b04      	ldr	r3, [sp, #16]
   de5b4:	1e5a      	subs	r2, r3, #1
   de5b6:	ab0e      	add	r3, sp, #56	; 0x38
   de5b8:	a90e      	add	r1, sp, #56	; 0x38
   de5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   de5be:	f3c3 0315 	ubfx	r3, r3, #0, #22
   de5c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   de5c6:	2d02      	cmp	r5, #2
   de5c8:	d074      	beq.n	de6b4 <__kernel_rem_pio2+0x364>
   de5ca:	2200      	movs	r2, #0
   de5cc:	2300      	movs	r3, #0
   de5ce:	4630      	mov	r0, r6
   de5d0:	4639      	mov	r1, r7
   de5d2:	f001 fd39 	bl	e0048 <__aeabi_dcmpeq>
   de5d6:	2800      	cmp	r0, #0
   de5d8:	f000 8249 	beq.w	dea6e <__kernel_rem_pio2+0x71e>
   de5dc:	9a04      	ldr	r2, [sp, #16]
   de5de:	9b07      	ldr	r3, [sp, #28]
   de5e0:	1e50      	subs	r0, r2, #1
   de5e2:	4283      	cmp	r3, r0
   de5e4:	dc10      	bgt.n	de608 <__kernel_rem_pio2+0x2b8>
   de5e6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   de5ea:	3b01      	subs	r3, #1
   de5ec:	aa0e      	add	r2, sp, #56	; 0x38
   de5ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   de5f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   de5f4:	2200      	movs	r2, #0
   de5f6:	f853 1904 	ldr.w	r1, [r3], #-4
   de5fa:	42a3      	cmp	r3, r4
   de5fc:	ea42 0201 	orr.w	r2, r2, r1
   de600:	d1f9      	bne.n	de5f6 <__kernel_rem_pio2+0x2a6>
   de602:	2a00      	cmp	r2, #0
   de604:	f040 80a4 	bne.w	de750 <__kernel_rem_pio2+0x400>
   de608:	9b07      	ldr	r3, [sp, #28]
   de60a:	aa0e      	add	r2, sp, #56	; 0x38
   de60c:	3b01      	subs	r3, #1
   de60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   de612:	2b00      	cmp	r3, #0
   de614:	f040 8264 	bne.w	deae0 <__kernel_rem_pio2+0x790>
   de618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   de61a:	2301      	movs	r3, #1
   de61c:	f852 1904 	ldr.w	r1, [r2], #-4
   de620:	3301      	adds	r3, #1
   de622:	2900      	cmp	r1, #0
   de624:	d0fa      	beq.n	de61c <__kernel_rem_pio2+0x2cc>
   de626:	9a04      	ldr	r2, [sp, #16]
   de628:	18d3      	adds	r3, r2, r3
   de62a:	f102 0a01 	add.w	sl, r2, #1
   de62e:	459a      	cmp	sl, r3
   de630:	9309      	str	r3, [sp, #36]	; 0x24
   de632:	dc3c      	bgt.n	de6ae <__kernel_rem_pio2+0x35e>
   de634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   de638:	9909      	ldr	r1, [sp, #36]	; 0x24
   de63a:	eb0a 0903 	add.w	r9, sl, r3
   de63e:	9b04      	ldr	r3, [sp, #16]
   de640:	4698      	mov	r8, r3
   de642:	4490      	add	r8, r2
   de644:	188b      	adds	r3, r1, r2
   de646:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   de64a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   de64c:	f109 39ff 	add.w	r9, r9, #4294967295
   de650:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   de654:	aa22      	add	r2, sp, #136	; 0x88
   de656:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   de65a:	9304      	str	r3, [sp, #16]
   de65c:	ab72      	add	r3, sp, #456	; 0x1c8
   de65e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   de662:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   de666:	f859 0f04 	ldr.w	r0, [r9, #4]!
   de66a:	f001 fa1f 	bl	dfaac <__aeabi_i2d>
   de66e:	9b00      	ldr	r3, [sp, #0]
   de670:	2b00      	cmp	r3, #0
   de672:	e8e8 0102 	strd	r0, r1, [r8], #8
   de676:	f04f 0600 	mov.w	r6, #0
   de67a:	f04f 0700 	mov.w	r7, #0
   de67e:	db11      	blt.n	de6a4 <__kernel_rem_pio2+0x354>
   de680:	9c03      	ldr	r4, [sp, #12]
   de682:	4645      	mov	r5, r8
   de684:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   de688:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   de68c:	f001 fa74 	bl	dfb78 <__aeabi_dmul>
   de690:	4602      	mov	r2, r0
   de692:	460b      	mov	r3, r1
   de694:	4630      	mov	r0, r6
   de696:	4639      	mov	r1, r7
   de698:	f001 f8bc 	bl	df814 <__adddf3>
   de69c:	455c      	cmp	r4, fp
   de69e:	4606      	mov	r6, r0
   de6a0:	460f      	mov	r7, r1
   de6a2:	d1ef      	bne.n	de684 <__kernel_rem_pio2+0x334>
   de6a4:	9b04      	ldr	r3, [sp, #16]
   de6a6:	4598      	cmp	r8, r3
   de6a8:	e8ea 6702 	strd	r6, r7, [sl], #8
   de6ac:	d1db      	bne.n	de666 <__kernel_rem_pio2+0x316>
   de6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de6b0:	9304      	str	r3, [sp, #16]
   de6b2:	e6cc      	b.n	de44e <__kernel_rem_pio2+0xfe>
   de6b4:	4632      	mov	r2, r6
   de6b6:	463b      	mov	r3, r7
   de6b8:	2000      	movs	r0, #0
   de6ba:	49b3      	ldr	r1, [pc, #716]	; (de988 <__kernel_rem_pio2+0x638>)
   de6bc:	f001 f8a8 	bl	df810 <__aeabi_dsub>
   de6c0:	4606      	mov	r6, r0
   de6c2:	460f      	mov	r7, r1
   de6c4:	2c00      	cmp	r4, #0
   de6c6:	d080      	beq.n	de5ca <__kernel_rem_pio2+0x27a>
   de6c8:	9806      	ldr	r0, [sp, #24]
   de6ca:	ed9f 0bab 	vldr	d0, [pc, #684]	; de978 <__kernel_rem_pio2+0x628>
   de6ce:	f001 f807 	bl	df6e0 <scalbn>
   de6d2:	4630      	mov	r0, r6
   de6d4:	4639      	mov	r1, r7
   de6d6:	ec53 2b10 	vmov	r2, r3, d0
   de6da:	f001 f899 	bl	df810 <__aeabi_dsub>
   de6de:	4606      	mov	r6, r0
   de6e0:	460f      	mov	r7, r1
   de6e2:	e772      	b.n	de5ca <__kernel_rem_pio2+0x27a>
   de6e4:	d111      	bne.n	de70a <__kernel_rem_pio2+0x3ba>
   de6e6:	9b04      	ldr	r3, [sp, #16]
   de6e8:	aa0e      	add	r2, sp, #56	; 0x38
   de6ea:	3b01      	subs	r3, #1
   de6ec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   de6f0:	15ed      	asrs	r5, r5, #23
   de6f2:	e726      	b.n	de542 <__kernel_rem_pio2+0x1f2>
   de6f4:	9b04      	ldr	r3, [sp, #16]
   de6f6:	1e5a      	subs	r2, r3, #1
   de6f8:	ab0e      	add	r3, sp, #56	; 0x38
   de6fa:	a90e      	add	r1, sp, #56	; 0x38
   de6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   de700:	f3c3 0316 	ubfx	r3, r3, #0, #23
   de704:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   de708:	e75d      	b.n	de5c6 <__kernel_rem_pio2+0x276>
   de70a:	2200      	movs	r2, #0
   de70c:	4b9f      	ldr	r3, [pc, #636]	; (de98c <__kernel_rem_pio2+0x63c>)
   de70e:	f001 fcb9 	bl	e0084 <__aeabi_dcmpge>
   de712:	b958      	cbnz	r0, de72c <__kernel_rem_pio2+0x3dc>
   de714:	4605      	mov	r5, r0
   de716:	e758      	b.n	de5ca <__kernel_rem_pio2+0x27a>
   de718:	2600      	movs	r6, #0
   de71a:	2700      	movs	r7, #0
   de71c:	e8ea 6702 	strd	r6, r7, [sl], #8
   de720:	45da      	cmp	sl, fp
   de722:	f109 0908 	add.w	r9, r9, #8
   de726:	f47f ae64 	bne.w	de3f2 <__kernel_rem_pio2+0xa2>
   de72a:	e680      	b.n	de42e <__kernel_rem_pio2+0xde>
   de72c:	9b04      	ldr	r3, [sp, #16]
   de72e:	2b00      	cmp	r3, #0
   de730:	f108 0801 	add.w	r8, r8, #1
   de734:	bfc8      	it	gt
   de736:	2502      	movgt	r5, #2
   de738:	f73f af0b 	bgt.w	de552 <__kernel_rem_pio2+0x202>
   de73c:	4632      	mov	r2, r6
   de73e:	463b      	mov	r3, r7
   de740:	2000      	movs	r0, #0
   de742:	4991      	ldr	r1, [pc, #580]	; (de988 <__kernel_rem_pio2+0x638>)
   de744:	f001 f864 	bl	df810 <__aeabi_dsub>
   de748:	2502      	movs	r5, #2
   de74a:	4606      	mov	r6, r0
   de74c:	460f      	mov	r7, r1
   de74e:	e73c      	b.n	de5ca <__kernel_rem_pio2+0x27a>
   de750:	a90e      	add	r1, sp, #56	; 0x38
   de752:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   de756:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   de75a:	9906      	ldr	r1, [sp, #24]
   de75c:	9000      	str	r0, [sp, #0]
   de75e:	3918      	subs	r1, #24
   de760:	4602      	mov	r2, r0
   de762:	9503      	str	r5, [sp, #12]
   de764:	9106      	str	r1, [sp, #24]
   de766:	b96b      	cbnz	r3, de784 <__kernel_rem_pio2+0x434>
   de768:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   de76c:	3b01      	subs	r3, #1
   de76e:	a80e      	add	r0, sp, #56	; 0x38
   de770:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   de774:	f853 0904 	ldr.w	r0, [r3], #-4
   de778:	3a01      	subs	r2, #1
   de77a:	3918      	subs	r1, #24
   de77c:	2800      	cmp	r0, #0
   de77e:	d0f9      	beq.n	de774 <__kernel_rem_pio2+0x424>
   de780:	9200      	str	r2, [sp, #0]
   de782:	9106      	str	r1, [sp, #24]
   de784:	9806      	ldr	r0, [sp, #24]
   de786:	ed9f 0b7c 	vldr	d0, [pc, #496]	; de978 <__kernel_rem_pio2+0x628>
   de78a:	f000 ffa9 	bl	df6e0 <scalbn>
   de78e:	9b00      	ldr	r3, [sp, #0]
   de790:	2b00      	cmp	r3, #0
   de792:	ec55 4b10 	vmov	r4, r5, d0
   de796:	f2c0 81c1 	blt.w	deb1c <__kernel_rem_pio2+0x7cc>
   de79a:	00da      	lsls	r2, r3, #3
   de79c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   de7a0:	a90e      	add	r1, sp, #56	; 0x38
   de7a2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   de7a6:	eb08 0b02 	add.w	fp, r8, r2
   de7aa:	9206      	str	r2, [sp, #24]
   de7ac:	3604      	adds	r6, #4
   de7ae:	f10b 0708 	add.w	r7, fp, #8
   de7b2:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   de7b6:	f001 f979 	bl	dfaac <__aeabi_i2d>
   de7ba:	4622      	mov	r2, r4
   de7bc:	462b      	mov	r3, r5
   de7be:	f001 f9db 	bl	dfb78 <__aeabi_dmul>
   de7c2:	2200      	movs	r2, #0
   de7c4:	e967 0102 	strd	r0, r1, [r7, #-8]!
   de7c8:	4b71      	ldr	r3, [pc, #452]	; (de990 <__kernel_rem_pio2+0x640>)
   de7ca:	4620      	mov	r0, r4
   de7cc:	4629      	mov	r1, r5
   de7ce:	f001 f9d3 	bl	dfb78 <__aeabi_dmul>
   de7d2:	4547      	cmp	r7, r8
   de7d4:	4604      	mov	r4, r0
   de7d6:	460d      	mov	r5, r1
   de7d8:	d1eb      	bne.n	de7b2 <__kernel_rem_pio2+0x462>
   de7da:	ac4a      	add	r4, sp, #296	; 0x128
   de7dc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   de7e0:	9404      	str	r4, [sp, #16]
   de7e2:	f04f 0a00 	mov.w	sl, #0
   de7e6:	f1b9 0f00 	cmp.w	r9, #0
   de7ea:	f2c0 812b 	blt.w	dea44 <__kernel_rem_pio2+0x6f4>
   de7ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; de994 <__kernel_rem_pio2+0x644>
   de7f2:	465d      	mov	r5, fp
   de7f4:	a362      	add	r3, pc, #392	; (adr r3, de980 <__kernel_rem_pio2+0x630>)
   de7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7fa:	2600      	movs	r6, #0
   de7fc:	2700      	movs	r7, #0
   de7fe:	2400      	movs	r4, #0
   de800:	e003      	b.n	de80a <__kernel_rem_pio2+0x4ba>
   de802:	45a2      	cmp	sl, r4
   de804:	db10      	blt.n	de828 <__kernel_rem_pio2+0x4d8>
   de806:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   de80a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   de80e:	f001 f9b3 	bl	dfb78 <__aeabi_dmul>
   de812:	4602      	mov	r2, r0
   de814:	460b      	mov	r3, r1
   de816:	4630      	mov	r0, r6
   de818:	4639      	mov	r1, r7
   de81a:	f000 fffb 	bl	df814 <__adddf3>
   de81e:	3401      	adds	r4, #1
   de820:	45a1      	cmp	r9, r4
   de822:	4606      	mov	r6, r0
   de824:	460f      	mov	r7, r1
   de826:	daec      	bge.n	de802 <__kernel_rem_pio2+0x4b2>
   de828:	9b04      	ldr	r3, [sp, #16]
   de82a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   de82e:	f1ab 0b08 	sub.w	fp, fp, #8
   de832:	e9c3 6700 	strd	r6, r7, [r3]
   de836:	ab70      	add	r3, sp, #448	; 0x1c0
   de838:	459b      	cmp	fp, r3
   de83a:	f10a 0a01 	add.w	sl, sl, #1
   de83e:	d1d2      	bne.n	de7e6 <__kernel_rem_pio2+0x496>
   de840:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   de842:	9c04      	ldr	r4, [sp, #16]
   de844:	2b03      	cmp	r3, #3
   de846:	f200 808d 	bhi.w	de964 <__kernel_rem_pio2+0x614>
   de84a:	e8df f013 	tbh	[pc, r3, lsl #1]
   de84e:	00dd      	.short	0x00dd
   de850:	00a500a5 	.word	0x00a500a5
   de854:	0004      	.short	0x0004
   de856:	9b00      	ldr	r3, [sp, #0]
   de858:	2b00      	cmp	r3, #0
   de85a:	f340 815c 	ble.w	deb16 <__kernel_rem_pio2+0x7c6>
   de85e:	9b00      	ldr	r3, [sp, #0]
   de860:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   de864:	9b06      	ldr	r3, [sp, #24]
   de866:	f10b 3bff 	add.w	fp, fp, #4294967295
   de86a:	18e2      	adds	r2, r4, r3
   de86c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   de870:	e9d2 8900 	ldrd	r8, r9, [r2]
   de874:	f103 0208 	add.w	r2, r3, #8
   de878:	3310      	adds	r3, #16
   de87a:	eb04 0a02 	add.w	sl, r4, r2
   de87e:	18e5      	adds	r5, r4, r3
   de880:	ed3a 7b02 	vldmdb	sl!, {d7}
   de884:	4642      	mov	r2, r8
   de886:	464b      	mov	r3, r9
   de888:	ec51 0b17 	vmov	r0, r1, d7
   de88c:	ed8d 7b04 	vstr	d7, [sp, #16]
   de890:	f000 ffc0 	bl	df814 <__adddf3>
   de894:	4606      	mov	r6, r0
   de896:	460f      	mov	r7, r1
   de898:	4602      	mov	r2, r0
   de89a:	460b      	mov	r3, r1
   de89c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   de8a0:	f000 ffb6 	bl	df810 <__aeabi_dsub>
   de8a4:	464b      	mov	r3, r9
   de8a6:	4642      	mov	r2, r8
   de8a8:	f000 ffb4 	bl	df814 <__adddf3>
   de8ac:	e965 0102 	strd	r0, r1, [r5, #-8]!
   de8b0:	ab4c      	add	r3, sp, #304	; 0x130
   de8b2:	429d      	cmp	r5, r3
   de8b4:	46b0      	mov	r8, r6
   de8b6:	46b9      	mov	r9, r7
   de8b8:	e9ca 6700 	strd	r6, r7, [sl]
   de8bc:	d1e0      	bne.n	de880 <__kernel_rem_pio2+0x530>
   de8be:	9b00      	ldr	r3, [sp, #0]
   de8c0:	2b01      	cmp	r3, #1
   de8c2:	f340 8128 	ble.w	deb16 <__kernel_rem_pio2+0x7c6>
   de8c6:	9b06      	ldr	r3, [sp, #24]
   de8c8:	4423      	add	r3, r4
   de8ca:	ed93 7b00 	vldr	d7, [r3]
   de8ce:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   de8d2:	f10b 0a10 	add.w	sl, fp, #16
   de8d6:	ed8d 7b00 	vstr	d7, [sp]
   de8da:	44a2      	add	sl, r4
   de8dc:	f10b 0b08 	add.w	fp, fp, #8
   de8e0:	eb04 050b 	add.w	r5, r4, fp
   de8e4:	46d0      	mov	r8, sl
   de8e6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   de8ea:	f8cd a010 	str.w	sl, [sp, #16]
   de8ee:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   de8f2:	e9dd 0100 	ldrd	r0, r1, [sp]
   de8f6:	464a      	mov	r2, r9
   de8f8:	4653      	mov	r3, sl
   de8fa:	f000 ff8b 	bl	df814 <__adddf3>
   de8fe:	4606      	mov	r6, r0
   de900:	460f      	mov	r7, r1
   de902:	4602      	mov	r2, r0
   de904:	460b      	mov	r3, r1
   de906:	4648      	mov	r0, r9
   de908:	4651      	mov	r1, sl
   de90a:	f000 ff81 	bl	df810 <__aeabi_dsub>
   de90e:	e9dd 2300 	ldrd	r2, r3, [sp]
   de912:	f000 ff7f 	bl	df814 <__adddf3>
   de916:	e968 0102 	strd	r0, r1, [r8, #-8]!
   de91a:	45c3      	cmp	fp, r8
   de91c:	e9cd 6700 	strd	r6, r7, [sp]
   de920:	e9c5 6700 	strd	r6, r7, [r5]
   de924:	d1e3      	bne.n	de8ee <__kernel_rem_pio2+0x59e>
   de926:	f8dd a010 	ldr.w	sl, [sp, #16]
   de92a:	2000      	movs	r0, #0
   de92c:	2100      	movs	r1, #0
   de92e:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   de932:	f000 ff6f 	bl	df814 <__adddf3>
   de936:	45d3      	cmp	fp, sl
   de938:	d1f9      	bne.n	de92e <__kernel_rem_pio2+0x5de>
   de93a:	9b03      	ldr	r3, [sp, #12]
   de93c:	2b00      	cmp	r3, #0
   de93e:	f000 80d3 	beq.w	deae8 <__kernel_rem_pio2+0x798>
   de942:	6862      	ldr	r2, [r4, #4]
   de944:	68e3      	ldr	r3, [r4, #12]
   de946:	9f08      	ldr	r7, [sp, #32]
   de948:	6825      	ldr	r5, [r4, #0]
   de94a:	68a4      	ldr	r4, [r4, #8]
   de94c:	603d      	str	r5, [r7, #0]
   de94e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   de952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   de956:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   de95a:	607a      	str	r2, [r7, #4]
   de95c:	60fb      	str	r3, [r7, #12]
   de95e:	60bc      	str	r4, [r7, #8]
   de960:	6138      	str	r0, [r7, #16]
   de962:	6179      	str	r1, [r7, #20]
   de964:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de966:	f003 0007 	and.w	r0, r3, #7
   de96a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   de96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de972:	bf00      	nop
   de974:	f3af 8000 	nop.w
   de978:	00000000 	.word	0x00000000
   de97c:	3ff00000 	.word	0x3ff00000
   de980:	40000000 	.word	0x40000000
   de984:	3ff921fb 	.word	0x3ff921fb
   de988:	3ff00000 	.word	0x3ff00000
   de98c:	3fe00000 	.word	0x3fe00000
   de990:	3e700000 	.word	0x3e700000
   de994:	000e4328 	.word	0x000e4328
   de998:	9d06      	ldr	r5, [sp, #24]
   de99a:	3508      	adds	r5, #8
   de99c:	4425      	add	r5, r4
   de99e:	2000      	movs	r0, #0
   de9a0:	2100      	movs	r1, #0
   de9a2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   de9a6:	f000 ff35 	bl	df814 <__adddf3>
   de9aa:	42a5      	cmp	r5, r4
   de9ac:	d1f9      	bne.n	de9a2 <__kernel_rem_pio2+0x652>
   de9ae:	9b03      	ldr	r3, [sp, #12]
   de9b0:	2b00      	cmp	r3, #0
   de9b2:	d04a      	beq.n	dea4a <__kernel_rem_pio2+0x6fa>
   de9b4:	9e08      	ldr	r6, [sp, #32]
   de9b6:	4602      	mov	r2, r0
   de9b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   de9bc:	e886 000c 	stmia.w	r6, {r2, r3}
   de9c0:	460b      	mov	r3, r1
   de9c2:	4602      	mov	r2, r0
   de9c4:	e9d4 0100 	ldrd	r0, r1, [r4]
   de9c8:	f000 ff22 	bl	df810 <__aeabi_dsub>
   de9cc:	9b00      	ldr	r3, [sp, #0]
   de9ce:	2b00      	cmp	r3, #0
   de9d0:	dd0d      	ble.n	de9ee <__kernel_rem_pio2+0x69e>
   de9d2:	ad4c      	add	r5, sp, #304	; 0x130
   de9d4:	2401      	movs	r4, #1
   de9d6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   de9da:	f000 ff1b 	bl	df814 <__adddf3>
   de9de:	9b00      	ldr	r3, [sp, #0]
   de9e0:	3401      	adds	r4, #1
   de9e2:	42a3      	cmp	r3, r4
   de9e4:	daf7      	bge.n	de9d6 <__kernel_rem_pio2+0x686>
   de9e6:	9b03      	ldr	r3, [sp, #12]
   de9e8:	2b00      	cmp	r3, #0
   de9ea:	f000 80a7 	beq.w	deb3c <__kernel_rem_pio2+0x7ec>
   de9ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   de9f2:	9908      	ldr	r1, [sp, #32]
   de9f4:	4602      	mov	r2, r0
   de9f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
   de9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de9fc:	f003 0007 	and.w	r0, r3, #7
   dea00:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dea04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea08:	9b06      	ldr	r3, [sp, #24]
   dea0a:	9d00      	ldr	r5, [sp, #0]
   dea0c:	3308      	adds	r3, #8
   dea0e:	2000      	movs	r0, #0
   dea10:	2100      	movs	r1, #0
   dea12:	441c      	add	r4, r3
   dea14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   dea18:	3d01      	subs	r5, #1
   dea1a:	f000 fefb 	bl	df814 <__adddf3>
   dea1e:	1c6b      	adds	r3, r5, #1
   dea20:	d1f8      	bne.n	dea14 <__kernel_rem_pio2+0x6c4>
   dea22:	9b03      	ldr	r3, [sp, #12]
   dea24:	4602      	mov	r2, r0
   dea26:	2b00      	cmp	r3, #0
   dea28:	f000 808e 	beq.w	deb48 <__kernel_rem_pio2+0x7f8>
   dea2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dea30:	9908      	ldr	r1, [sp, #32]
   dea32:	e9c1 2300 	strd	r2, r3, [r1]
   dea36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dea38:	f003 0007 	and.w	r0, r3, #7
   dea3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dea40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea44:	2600      	movs	r6, #0
   dea46:	2700      	movs	r7, #0
   dea48:	e6ee      	b.n	de828 <__kernel_rem_pio2+0x4d8>
   dea4a:	9b08      	ldr	r3, [sp, #32]
   dea4c:	4602      	mov	r2, r0
   dea4e:	e9c3 0100 	strd	r0, r1, [r3]
   dea52:	460b      	mov	r3, r1
   dea54:	e9d4 0100 	ldrd	r0, r1, [r4]
   dea58:	f000 feda 	bl	df810 <__aeabi_dsub>
   dea5c:	9c00      	ldr	r4, [sp, #0]
   dea5e:	2c00      	cmp	r4, #0
   dea60:	4602      	mov	r2, r0
   dea62:	460b      	mov	r3, r1
   dea64:	dcb5      	bgt.n	de9d2 <__kernel_rem_pio2+0x682>
   dea66:	9908      	ldr	r1, [sp, #32]
   dea68:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dea6c:	e7c5      	b.n	de9fa <__kernel_rem_pio2+0x6aa>
   dea6e:	9b06      	ldr	r3, [sp, #24]
   dea70:	9503      	str	r5, [sp, #12]
   dea72:	4258      	negs	r0, r3
   dea74:	ec47 6b10 	vmov	d0, r6, r7
   dea78:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dea7c:	f000 fe30 	bl	df6e0 <scalbn>
   dea80:	ec55 4b10 	vmov	r4, r5, d0
   dea84:	2200      	movs	r2, #0
   dea86:	4b38      	ldr	r3, [pc, #224]	; (deb68 <__kernel_rem_pio2+0x818>)
   dea88:	ee10 0a10 	vmov	r0, s0
   dea8c:	4629      	mov	r1, r5
   dea8e:	f001 faf9 	bl	e0084 <__aeabi_dcmpge>
   dea92:	2800      	cmp	r0, #0
   dea94:	d034      	beq.n	deb00 <__kernel_rem_pio2+0x7b0>
   dea96:	2200      	movs	r2, #0
   dea98:	4b34      	ldr	r3, [pc, #208]	; (deb6c <__kernel_rem_pio2+0x81c>)
   dea9a:	4620      	mov	r0, r4
   dea9c:	4629      	mov	r1, r5
   dea9e:	f001 f86b 	bl	dfb78 <__aeabi_dmul>
   deaa2:	f001 fb19 	bl	e00d8 <__aeabi_d2iz>
   deaa6:	4606      	mov	r6, r0
   deaa8:	f001 f800 	bl	dfaac <__aeabi_i2d>
   deaac:	2200      	movs	r2, #0
   deaae:	4b2e      	ldr	r3, [pc, #184]	; (deb68 <__kernel_rem_pio2+0x818>)
   deab0:	f001 f862 	bl	dfb78 <__aeabi_dmul>
   deab4:	4602      	mov	r2, r0
   deab6:	460b      	mov	r3, r1
   deab8:	4620      	mov	r0, r4
   deaba:	4629      	mov	r1, r5
   deabc:	f000 fea8 	bl	df810 <__aeabi_dsub>
   deac0:	f001 fb0a 	bl	e00d8 <__aeabi_d2iz>
   deac4:	9904      	ldr	r1, [sp, #16]
   deac6:	9b06      	ldr	r3, [sp, #24]
   deac8:	460a      	mov	r2, r1
   deaca:	3318      	adds	r3, #24
   deacc:	3201      	adds	r2, #1
   deace:	9306      	str	r3, [sp, #24]
   dead0:	460b      	mov	r3, r1
   dead2:	a90e      	add	r1, sp, #56	; 0x38
   dead4:	9200      	str	r2, [sp, #0]
   dead6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   deada:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   deade:	e651      	b.n	de784 <__kernel_rem_pio2+0x434>
   deae0:	2301      	movs	r3, #1
   deae2:	e5a0      	b.n	de626 <__kernel_rem_pio2+0x2d6>
   deae4:	2400      	movs	r4, #0
   deae6:	e55c      	b.n	de5a2 <__kernel_rem_pio2+0x252>
   deae8:	e9d4 6700 	ldrd	r6, r7, [r4]
   deaec:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   deaf0:	9d08      	ldr	r5, [sp, #32]
   deaf2:	e9c5 0104 	strd	r0, r1, [r5, #16]
   deaf6:	e9c5 6700 	strd	r6, r7, [r5]
   deafa:	e9c5 2302 	strd	r2, r3, [r5, #8]
   deafe:	e731      	b.n	de964 <__kernel_rem_pio2+0x614>
   deb00:	4629      	mov	r1, r5
   deb02:	4620      	mov	r0, r4
   deb04:	f001 fae8 	bl	e00d8 <__aeabi_d2iz>
   deb08:	9a04      	ldr	r2, [sp, #16]
   deb0a:	9200      	str	r2, [sp, #0]
   deb0c:	a90e      	add	r1, sp, #56	; 0x38
   deb0e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   deb12:	e637      	b.n	de784 <__kernel_rem_pio2+0x434>
   deb14:	ac4a      	add	r4, sp, #296	; 0x128
   deb16:	2000      	movs	r0, #0
   deb18:	2100      	movs	r1, #0
   deb1a:	e70e      	b.n	de93a <__kernel_rem_pio2+0x5ea>
   deb1c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   deb1e:	2b03      	cmp	r3, #3
   deb20:	f63f af20 	bhi.w	de964 <__kernel_rem_pio2+0x614>
   deb24:	a201      	add	r2, pc, #4	; (adr r2, deb2c <__kernel_rem_pio2+0x7dc>)
   deb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   deb2a:	bf00      	nop
   deb2c:	000deb63 	.word	0x000deb63
   deb30:	000deb5b 	.word	0x000deb5b
   deb34:	000deb5b 	.word	0x000deb5b
   deb38:	000deb15 	.word	0x000deb15
   deb3c:	460b      	mov	r3, r1
   deb3e:	9908      	ldr	r1, [sp, #32]
   deb40:	4602      	mov	r2, r0
   deb42:	e9c1 2302 	strd	r2, r3, [r1, #8]
   deb46:	e758      	b.n	de9fa <__kernel_rem_pio2+0x6aa>
   deb48:	460b      	mov	r3, r1
   deb4a:	9908      	ldr	r1, [sp, #32]
   deb4c:	e9c1 2300 	strd	r2, r3, [r1]
   deb50:	e771      	b.n	dea36 <__kernel_rem_pio2+0x6e6>
   deb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   deb54:	00db      	lsls	r3, r3, #3
   deb56:	9304      	str	r3, [sp, #16]
   deb58:	e469      	b.n	de42e <__kernel_rem_pio2+0xde>
   deb5a:	2000      	movs	r0, #0
   deb5c:	2100      	movs	r1, #0
   deb5e:	ac4a      	add	r4, sp, #296	; 0x128
   deb60:	e725      	b.n	de9ae <__kernel_rem_pio2+0x65e>
   deb62:	2000      	movs	r0, #0
   deb64:	2100      	movs	r1, #0
   deb66:	e75c      	b.n	dea22 <__kernel_rem_pio2+0x6d2>
   deb68:	41700000 	.word	0x41700000
   deb6c:	3e700000 	.word	0x3e700000

000deb70 <__kernel_sin>:
   deb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deb74:	ec55 4b10 	vmov	r4, r5, d0
   deb78:	ed2d 8b02 	vpush	{d8}
   deb7c:	eeb0 8a41 	vmov.f32	s16, s2
   deb80:	eef0 8a61 	vmov.f32	s17, s3
   deb84:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   deb88:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   deb8c:	b083      	sub	sp, #12
   deb8e:	4682      	mov	sl, r0
   deb90:	da07      	bge.n	deba2 <__kernel_sin+0x32>
   deb92:	ee10 0a10 	vmov	r0, s0
   deb96:	4629      	mov	r1, r5
   deb98:	f001 fa9e 	bl	e00d8 <__aeabi_d2iz>
   deb9c:	2800      	cmp	r0, #0
   deb9e:	f000 808e 	beq.w	decbe <__kernel_sin+0x14e>
   deba2:	4622      	mov	r2, r4
   deba4:	462b      	mov	r3, r5
   deba6:	4620      	mov	r0, r4
   deba8:	4629      	mov	r1, r5
   debaa:	f000 ffe5 	bl	dfb78 <__aeabi_dmul>
   debae:	4606      	mov	r6, r0
   debb0:	460f      	mov	r7, r1
   debb2:	4602      	mov	r2, r0
   debb4:	460b      	mov	r3, r1
   debb6:	4620      	mov	r0, r4
   debb8:	4629      	mov	r1, r5
   debba:	f000 ffdd 	bl	dfb78 <__aeabi_dmul>
   debbe:	a347      	add	r3, pc, #284	; (adr r3, decdc <__kernel_sin+0x16c>)
   debc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   debc4:	4680      	mov	r8, r0
   debc6:	4689      	mov	r9, r1
   debc8:	4630      	mov	r0, r6
   debca:	4639      	mov	r1, r7
   debcc:	f000 ffd4 	bl	dfb78 <__aeabi_dmul>
   debd0:	a344      	add	r3, pc, #272	; (adr r3, dece4 <__kernel_sin+0x174>)
   debd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   debd6:	f000 fe1b 	bl	df810 <__aeabi_dsub>
   debda:	4632      	mov	r2, r6
   debdc:	463b      	mov	r3, r7
   debde:	f000 ffcb 	bl	dfb78 <__aeabi_dmul>
   debe2:	a342      	add	r3, pc, #264	; (adr r3, decec <__kernel_sin+0x17c>)
   debe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   debe8:	f000 fe14 	bl	df814 <__adddf3>
   debec:	4632      	mov	r2, r6
   debee:	463b      	mov	r3, r7
   debf0:	f000 ffc2 	bl	dfb78 <__aeabi_dmul>
   debf4:	a33f      	add	r3, pc, #252	; (adr r3, decf4 <__kernel_sin+0x184>)
   debf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   debfa:	f000 fe09 	bl	df810 <__aeabi_dsub>
   debfe:	4632      	mov	r2, r6
   dec00:	463b      	mov	r3, r7
   dec02:	f000 ffb9 	bl	dfb78 <__aeabi_dmul>
   dec06:	a33d      	add	r3, pc, #244	; (adr r3, decfc <__kernel_sin+0x18c>)
   dec08:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec0c:	f000 fe02 	bl	df814 <__adddf3>
   dec10:	e9cd 0100 	strd	r0, r1, [sp]
   dec14:	f1ba 0f00 	cmp.w	sl, #0
   dec18:	d037      	beq.n	dec8a <__kernel_sin+0x11a>
   dec1a:	2200      	movs	r2, #0
   dec1c:	4b2e      	ldr	r3, [pc, #184]	; (decd8 <__kernel_sin+0x168>)
   dec1e:	ec51 0b18 	vmov	r0, r1, d8
   dec22:	f000 ffa9 	bl	dfb78 <__aeabi_dmul>
   dec26:	e9dd 2300 	ldrd	r2, r3, [sp]
   dec2a:	4682      	mov	sl, r0
   dec2c:	468b      	mov	fp, r1
   dec2e:	4640      	mov	r0, r8
   dec30:	4649      	mov	r1, r9
   dec32:	f000 ffa1 	bl	dfb78 <__aeabi_dmul>
   dec36:	4602      	mov	r2, r0
   dec38:	460b      	mov	r3, r1
   dec3a:	4650      	mov	r0, sl
   dec3c:	4659      	mov	r1, fp
   dec3e:	f000 fde7 	bl	df810 <__aeabi_dsub>
   dec42:	4632      	mov	r2, r6
   dec44:	463b      	mov	r3, r7
   dec46:	f000 ff97 	bl	dfb78 <__aeabi_dmul>
   dec4a:	ec53 2b18 	vmov	r2, r3, d8
   dec4e:	f000 fddf 	bl	df810 <__aeabi_dsub>
   dec52:	a31f      	add	r3, pc, #124	; (adr r3, decd0 <__kernel_sin+0x160>)
   dec54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec58:	4606      	mov	r6, r0
   dec5a:	460f      	mov	r7, r1
   dec5c:	4640      	mov	r0, r8
   dec5e:	4649      	mov	r1, r9
   dec60:	f000 ff8a 	bl	dfb78 <__aeabi_dmul>
   dec64:	4602      	mov	r2, r0
   dec66:	460b      	mov	r3, r1
   dec68:	4630      	mov	r0, r6
   dec6a:	4639      	mov	r1, r7
   dec6c:	f000 fdd2 	bl	df814 <__adddf3>
   dec70:	4602      	mov	r2, r0
   dec72:	460b      	mov	r3, r1
   dec74:	4620      	mov	r0, r4
   dec76:	4629      	mov	r1, r5
   dec78:	f000 fdca 	bl	df810 <__aeabi_dsub>
   dec7c:	ec41 0b10 	vmov	d0, r0, r1
   dec80:	b003      	add	sp, #12
   dec82:	ecbd 8b02 	vpop	{d8}
   dec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec8a:	4602      	mov	r2, r0
   dec8c:	460b      	mov	r3, r1
   dec8e:	4630      	mov	r0, r6
   dec90:	4639      	mov	r1, r7
   dec92:	f000 ff71 	bl	dfb78 <__aeabi_dmul>
   dec96:	a30e      	add	r3, pc, #56	; (adr r3, decd0 <__kernel_sin+0x160>)
   dec98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec9c:	f000 fdb8 	bl	df810 <__aeabi_dsub>
   deca0:	4642      	mov	r2, r8
   deca2:	464b      	mov	r3, r9
   deca4:	f000 ff68 	bl	dfb78 <__aeabi_dmul>
   deca8:	4622      	mov	r2, r4
   decaa:	462b      	mov	r3, r5
   decac:	f000 fdb2 	bl	df814 <__adddf3>
   decb0:	ec41 0b10 	vmov	d0, r0, r1
   decb4:	b003      	add	sp, #12
   decb6:	ecbd 8b02 	vpop	{d8}
   decba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   decbe:	ec45 4b10 	vmov	d0, r4, r5
   decc2:	b003      	add	sp, #12
   decc4:	ecbd 8b02 	vpop	{d8}
   decc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deccc:	f3af 8000 	nop.w
   decd0:	55555549 	.word	0x55555549
   decd4:	3fc55555 	.word	0x3fc55555
   decd8:	3fe00000 	.word	0x3fe00000
   decdc:	5acfd57c 	.word	0x5acfd57c
   dece0:	3de5d93a 	.word	0x3de5d93a
   dece4:	8a2b9ceb 	.word	0x8a2b9ceb
   dece8:	3e5ae5e6 	.word	0x3e5ae5e6
   decec:	57b1fe7d 	.word	0x57b1fe7d
   decf0:	3ec71de3 	.word	0x3ec71de3
   decf4:	19c161d5 	.word	0x19c161d5
   decf8:	3f2a01a0 	.word	0x3f2a01a0
   decfc:	1110f8a6 	.word	0x1110f8a6
   ded00:	3f811111 	.word	0x3f811111
   ded04:	00000000 	.word	0x00000000

000ded08 <__kernel_tan>:
   ded08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded0c:	ec59 8b10 	vmov	r8, r9, d0
   ded10:	4be1      	ldr	r3, [pc, #900]	; (df098 <__kernel_tan+0x390>)
   ded12:	b089      	sub	sp, #36	; 0x24
   ded14:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   ded18:	429e      	cmp	r6, r3
   ded1a:	f8cd 9014 	str.w	r9, [sp, #20]
   ded1e:	4607      	mov	r7, r0
   ded20:	ed8d 1b00 	vstr	d1, [sp]
   ded24:	dc19      	bgt.n	ded5a <__kernel_tan+0x52>
   ded26:	ee10 0a10 	vmov	r0, s0
   ded2a:	4649      	mov	r1, r9
   ded2c:	f001 f9d4 	bl	e00d8 <__aeabi_d2iz>
   ded30:	bba0      	cbnz	r0, ded9c <__kernel_tan+0x94>
   ded32:	4643      	mov	r3, r8
   ded34:	431e      	orrs	r6, r3
   ded36:	1c7b      	adds	r3, r7, #1
   ded38:	4333      	orrs	r3, r6
   ded3a:	f000 815e 	beq.w	deffa <__kernel_tan+0x2f2>
   ded3e:	2f01      	cmp	r7, #1
   ded40:	f000 81c2 	beq.w	df0c8 <__kernel_tan+0x3c0>
   ded44:	4642      	mov	r2, r8
   ded46:	464b      	mov	r3, r9
   ded48:	2000      	movs	r0, #0
   ded4a:	49d4      	ldr	r1, [pc, #848]	; (df09c <__kernel_tan+0x394>)
   ded4c:	f001 f83e 	bl	dfdcc <__aeabi_ddiv>
   ded50:	ec41 0b10 	vmov	d0, r0, r1
   ded54:	b009      	add	sp, #36	; 0x24
   ded56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ded5a:	4bd1      	ldr	r3, [pc, #836]	; (df0a0 <__kernel_tan+0x398>)
   ded5c:	429e      	cmp	r6, r3
   ded5e:	dd1d      	ble.n	ded9c <__kernel_tan+0x94>
   ded60:	9b05      	ldr	r3, [sp, #20]
   ded62:	2b00      	cmp	r3, #0
   ded64:	f2c0 81a0 	blt.w	df0a8 <__kernel_tan+0x3a0>
   ded68:	4642      	mov	r2, r8
   ded6a:	464b      	mov	r3, r9
   ded6c:	a1aa      	add	r1, pc, #680	; (adr r1, df018 <__kernel_tan+0x310>)
   ded6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ded72:	f000 fd4d 	bl	df810 <__aeabi_dsub>
   ded76:	e9dd 2300 	ldrd	r2, r3, [sp]
   ded7a:	4604      	mov	r4, r0
   ded7c:	460d      	mov	r5, r1
   ded7e:	a1a8      	add	r1, pc, #672	; (adr r1, df020 <__kernel_tan+0x318>)
   ded80:	e9d1 0100 	ldrd	r0, r1, [r1]
   ded84:	f000 fd44 	bl	df810 <__aeabi_dsub>
   ded88:	ed9f 7ba7 	vldr	d7, [pc, #668]	; df028 <__kernel_tan+0x320>
   ded8c:	4622      	mov	r2, r4
   ded8e:	462b      	mov	r3, r5
   ded90:	ed8d 7b00 	vstr	d7, [sp]
   ded94:	f000 fd3e 	bl	df814 <__adddf3>
   ded98:	4680      	mov	r8, r0
   ded9a:	4689      	mov	r9, r1
   ded9c:	4642      	mov	r2, r8
   ded9e:	464b      	mov	r3, r9
   deda0:	4640      	mov	r0, r8
   deda2:	4649      	mov	r1, r9
   deda4:	f000 fee8 	bl	dfb78 <__aeabi_dmul>
   deda8:	4602      	mov	r2, r0
   dedaa:	460b      	mov	r3, r1
   dedac:	4682      	mov	sl, r0
   dedae:	468b      	mov	fp, r1
   dedb0:	f000 fee2 	bl	dfb78 <__aeabi_dmul>
   dedb4:	4652      	mov	r2, sl
   dedb6:	4604      	mov	r4, r0
   dedb8:	460d      	mov	r5, r1
   dedba:	465b      	mov	r3, fp
   dedbc:	4640      	mov	r0, r8
   dedbe:	4649      	mov	r1, r9
   dedc0:	f000 feda 	bl	dfb78 <__aeabi_dmul>
   dedc4:	a39a      	add	r3, pc, #616	; (adr r3, df030 <__kernel_tan+0x328>)
   dedc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dedce:	4620      	mov	r0, r4
   dedd0:	4629      	mov	r1, r5
   dedd2:	f000 fed1 	bl	dfb78 <__aeabi_dmul>
   dedd6:	a398      	add	r3, pc, #608	; (adr r3, df038 <__kernel_tan+0x330>)
   dedd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deddc:	f000 fd1a 	bl	df814 <__adddf3>
   dede0:	4622      	mov	r2, r4
   dede2:	462b      	mov	r3, r5
   dede4:	f000 fec8 	bl	dfb78 <__aeabi_dmul>
   dede8:	a395      	add	r3, pc, #596	; (adr r3, df040 <__kernel_tan+0x338>)
   dedea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedee:	f000 fd11 	bl	df814 <__adddf3>
   dedf2:	4622      	mov	r2, r4
   dedf4:	462b      	mov	r3, r5
   dedf6:	f000 febf 	bl	dfb78 <__aeabi_dmul>
   dedfa:	a393      	add	r3, pc, #588	; (adr r3, df048 <__kernel_tan+0x340>)
   dedfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee00:	f000 fd08 	bl	df814 <__adddf3>
   dee04:	4622      	mov	r2, r4
   dee06:	462b      	mov	r3, r5
   dee08:	f000 feb6 	bl	dfb78 <__aeabi_dmul>
   dee0c:	a390      	add	r3, pc, #576	; (adr r3, df050 <__kernel_tan+0x348>)
   dee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee12:	f000 fcff 	bl	df814 <__adddf3>
   dee16:	4622      	mov	r2, r4
   dee18:	462b      	mov	r3, r5
   dee1a:	f000 fead 	bl	dfb78 <__aeabi_dmul>
   dee1e:	a38e      	add	r3, pc, #568	; (adr r3, df058 <__kernel_tan+0x350>)
   dee20:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee24:	f000 fcf6 	bl	df814 <__adddf3>
   dee28:	4652      	mov	r2, sl
   dee2a:	465b      	mov	r3, fp
   dee2c:	f000 fea4 	bl	dfb78 <__aeabi_dmul>
   dee30:	a38b      	add	r3, pc, #556	; (adr r3, df060 <__kernel_tan+0x358>)
   dee32:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee36:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dee3a:	4620      	mov	r0, r4
   dee3c:	4629      	mov	r1, r5
   dee3e:	f000 fe9b 	bl	dfb78 <__aeabi_dmul>
   dee42:	a389      	add	r3, pc, #548	; (adr r3, df068 <__kernel_tan+0x360>)
   dee44:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee48:	f000 fce4 	bl	df814 <__adddf3>
   dee4c:	4622      	mov	r2, r4
   dee4e:	462b      	mov	r3, r5
   dee50:	f000 fe92 	bl	dfb78 <__aeabi_dmul>
   dee54:	a386      	add	r3, pc, #536	; (adr r3, df070 <__kernel_tan+0x368>)
   dee56:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee5a:	f000 fcdb 	bl	df814 <__adddf3>
   dee5e:	4622      	mov	r2, r4
   dee60:	462b      	mov	r3, r5
   dee62:	f000 fe89 	bl	dfb78 <__aeabi_dmul>
   dee66:	a384      	add	r3, pc, #528	; (adr r3, df078 <__kernel_tan+0x370>)
   dee68:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee6c:	f000 fcd2 	bl	df814 <__adddf3>
   dee70:	4622      	mov	r2, r4
   dee72:	462b      	mov	r3, r5
   dee74:	f000 fe80 	bl	dfb78 <__aeabi_dmul>
   dee78:	a381      	add	r3, pc, #516	; (adr r3, df080 <__kernel_tan+0x378>)
   dee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee7e:	f000 fcc9 	bl	df814 <__adddf3>
   dee82:	4622      	mov	r2, r4
   dee84:	462b      	mov	r3, r5
   dee86:	f000 fe77 	bl	dfb78 <__aeabi_dmul>
   dee8a:	a37f      	add	r3, pc, #508	; (adr r3, df088 <__kernel_tan+0x380>)
   dee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee90:	f000 fcc0 	bl	df814 <__adddf3>
   dee94:	4602      	mov	r2, r0
   dee96:	460b      	mov	r3, r1
   dee98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dee9c:	f000 fcba 	bl	df814 <__adddf3>
   deea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   deea4:	f000 fe68 	bl	dfb78 <__aeabi_dmul>
   deea8:	e9dd 4500 	ldrd	r4, r5, [sp]
   deeac:	4622      	mov	r2, r4
   deeae:	462b      	mov	r3, r5
   deeb0:	f000 fcb0 	bl	df814 <__adddf3>
   deeb4:	4652      	mov	r2, sl
   deeb6:	465b      	mov	r3, fp
   deeb8:	f000 fe5e 	bl	dfb78 <__aeabi_dmul>
   deebc:	4602      	mov	r2, r0
   deebe:	460b      	mov	r3, r1
   deec0:	4620      	mov	r0, r4
   deec2:	4629      	mov	r1, r5
   deec4:	f000 fca6 	bl	df814 <__adddf3>
   deec8:	a371      	add	r3, pc, #452	; (adr r3, df090 <__kernel_tan+0x388>)
   deeca:	e9d3 2300 	ldrd	r2, r3, [r3]
   deece:	4604      	mov	r4, r0
   deed0:	460d      	mov	r5, r1
   deed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   deed6:	f000 fe4f 	bl	dfb78 <__aeabi_dmul>
   deeda:	4622      	mov	r2, r4
   deedc:	462b      	mov	r3, r5
   deede:	f000 fc99 	bl	df814 <__adddf3>
   deee2:	460b      	mov	r3, r1
   deee4:	4602      	mov	r2, r0
   deee6:	4649      	mov	r1, r9
   deee8:	4640      	mov	r0, r8
   deeea:	e9cd 2300 	strd	r2, r3, [sp]
   deeee:	f000 fc91 	bl	df814 <__adddf3>
   deef2:	4b6b      	ldr	r3, [pc, #428]	; (df0a0 <__kernel_tan+0x398>)
   deef4:	429e      	cmp	r6, r3
   deef6:	4604      	mov	r4, r0
   deef8:	460d      	mov	r5, r1
   deefa:	dc3c      	bgt.n	def76 <__kernel_tan+0x26e>
   deefc:	2f01      	cmp	r7, #1
   deefe:	f000 80e0 	beq.w	df0c2 <__kernel_tan+0x3ba>
   def02:	4602      	mov	r2, r0
   def04:	460b      	mov	r3, r1
   def06:	2000      	movs	r0, #0
   def08:	4964      	ldr	r1, [pc, #400]	; (df09c <__kernel_tan+0x394>)
   def0a:	f000 ff5f 	bl	dfdcc <__aeabi_ddiv>
   def0e:	2400      	movs	r4, #0
   def10:	460f      	mov	r7, r1
   def12:	464b      	mov	r3, r9
   def14:	4606      	mov	r6, r0
   def16:	4629      	mov	r1, r5
   def18:	4620      	mov	r0, r4
   def1a:	4642      	mov	r2, r8
   def1c:	f000 fc78 	bl	df810 <__aeabi_dsub>
   def20:	4602      	mov	r2, r0
   def22:	460b      	mov	r3, r1
   def24:	e9dd 0100 	ldrd	r0, r1, [sp]
   def28:	f000 fc72 	bl	df810 <__aeabi_dsub>
   def2c:	4622      	mov	r2, r4
   def2e:	463b      	mov	r3, r7
   def30:	f000 fe22 	bl	dfb78 <__aeabi_dmul>
   def34:	46a2      	mov	sl, r4
   def36:	46a9      	mov	r9, r5
   def38:	4604      	mov	r4, r0
   def3a:	460d      	mov	r5, r1
   def3c:	4652      	mov	r2, sl
   def3e:	463b      	mov	r3, r7
   def40:	4650      	mov	r0, sl
   def42:	4649      	mov	r1, r9
   def44:	f000 fe18 	bl	dfb78 <__aeabi_dmul>
   def48:	2200      	movs	r2, #0
   def4a:	4b56      	ldr	r3, [pc, #344]	; (df0a4 <__kernel_tan+0x39c>)
   def4c:	f000 fc62 	bl	df814 <__adddf3>
   def50:	4602      	mov	r2, r0
   def52:	460b      	mov	r3, r1
   def54:	4620      	mov	r0, r4
   def56:	4629      	mov	r1, r5
   def58:	f000 fc5c 	bl	df814 <__adddf3>
   def5c:	4632      	mov	r2, r6
   def5e:	463b      	mov	r3, r7
   def60:	f000 fe0a 	bl	dfb78 <__aeabi_dmul>
   def64:	4652      	mov	r2, sl
   def66:	463b      	mov	r3, r7
   def68:	f000 fc54 	bl	df814 <__adddf3>
   def6c:	ec41 0b10 	vmov	d0, r0, r1
   def70:	b009      	add	sp, #36	; 0x24
   def72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def76:	4638      	mov	r0, r7
   def78:	f000 fd98 	bl	dfaac <__aeabi_i2d>
   def7c:	4622      	mov	r2, r4
   def7e:	4606      	mov	r6, r0
   def80:	460f      	mov	r7, r1
   def82:	462b      	mov	r3, r5
   def84:	4620      	mov	r0, r4
   def86:	4629      	mov	r1, r5
   def88:	f000 fdf6 	bl	dfb78 <__aeabi_dmul>
   def8c:	4632      	mov	r2, r6
   def8e:	4682      	mov	sl, r0
   def90:	468b      	mov	fp, r1
   def92:	463b      	mov	r3, r7
   def94:	4620      	mov	r0, r4
   def96:	4629      	mov	r1, r5
   def98:	f000 fc3c 	bl	df814 <__adddf3>
   def9c:	4602      	mov	r2, r0
   def9e:	460b      	mov	r3, r1
   defa0:	4650      	mov	r0, sl
   defa2:	4659      	mov	r1, fp
   defa4:	f000 ff12 	bl	dfdcc <__aeabi_ddiv>
   defa8:	e9dd 2300 	ldrd	r2, r3, [sp]
   defac:	f000 fc30 	bl	df810 <__aeabi_dsub>
   defb0:	4602      	mov	r2, r0
   defb2:	460b      	mov	r3, r1
   defb4:	4640      	mov	r0, r8
   defb6:	4649      	mov	r1, r9
   defb8:	f000 fc2a 	bl	df810 <__aeabi_dsub>
   defbc:	4602      	mov	r2, r0
   defbe:	460b      	mov	r3, r1
   defc0:	f000 fc28 	bl	df814 <__adddf3>
   defc4:	4602      	mov	r2, r0
   defc6:	460b      	mov	r3, r1
   defc8:	4630      	mov	r0, r6
   defca:	4639      	mov	r1, r7
   defcc:	f000 fc20 	bl	df810 <__aeabi_dsub>
   defd0:	9b05      	ldr	r3, [sp, #20]
   defd2:	4604      	mov	r4, r0
   defd4:	1798      	asrs	r0, r3, #30
   defd6:	f000 0002 	and.w	r0, r0, #2
   defda:	f1c0 0001 	rsb	r0, r0, #1
   defde:	460d      	mov	r5, r1
   defe0:	f000 fd64 	bl	dfaac <__aeabi_i2d>
   defe4:	4602      	mov	r2, r0
   defe6:	460b      	mov	r3, r1
   defe8:	4620      	mov	r0, r4
   defea:	4629      	mov	r1, r5
   defec:	f000 fdc4 	bl	dfb78 <__aeabi_dmul>
   deff0:	ec41 0b10 	vmov	d0, r0, r1
   deff4:	b009      	add	sp, #36	; 0x24
   deff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deffa:	ec49 8b10 	vmov	d0, r8, r9
   deffe:	f7fb fbb3 	bl	da768 <fabs>
   df002:	2000      	movs	r0, #0
   df004:	ec53 2b10 	vmov	r2, r3, d0
   df008:	4926      	ldr	r1, [pc, #152]	; (df0a4 <__kernel_tan+0x39c>)
   df00a:	f000 fedf 	bl	dfdcc <__aeabi_ddiv>
   df00e:	ec41 0b10 	vmov	d0, r0, r1
   df012:	e7ad      	b.n	def70 <__kernel_tan+0x268>
   df014:	f3af 8000 	nop.w
   df018:	54442d18 	.word	0x54442d18
   df01c:	3fe921fb 	.word	0x3fe921fb
   df020:	33145c07 	.word	0x33145c07
   df024:	3c81a626 	.word	0x3c81a626
	...
   df030:	74bf7ad4 	.word	0x74bf7ad4
   df034:	3efb2a70 	.word	0x3efb2a70
   df038:	32f0a7e9 	.word	0x32f0a7e9
   df03c:	3f12b80f 	.word	0x3f12b80f
   df040:	1a8d1068 	.word	0x1a8d1068
   df044:	3f3026f7 	.word	0x3f3026f7
   df048:	fee08315 	.word	0xfee08315
   df04c:	3f57dbc8 	.word	0x3f57dbc8
   df050:	e96e8493 	.word	0xe96e8493
   df054:	3f8226e3 	.word	0x3f8226e3
   df058:	1bb341fe 	.word	0x1bb341fe
   df05c:	3faba1ba 	.word	0x3faba1ba
   df060:	db605373 	.word	0xdb605373
   df064:	bef375cb 	.word	0xbef375cb
   df068:	a03792a6 	.word	0xa03792a6
   df06c:	3f147e88 	.word	0x3f147e88
   df070:	f2f26501 	.word	0xf2f26501
   df074:	3f4344d8 	.word	0x3f4344d8
   df078:	c9560328 	.word	0xc9560328
   df07c:	3f6d6d22 	.word	0x3f6d6d22
   df080:	8406d637 	.word	0x8406d637
   df084:	3f9664f4 	.word	0x3f9664f4
   df088:	1110fe7a 	.word	0x1110fe7a
   df08c:	3fc11111 	.word	0x3fc11111
   df090:	55555563 	.word	0x55555563
   df094:	3fd55555 	.word	0x3fd55555
   df098:	3e2fffff 	.word	0x3e2fffff
   df09c:	bff00000 	.word	0xbff00000
   df0a0:	3fe59427 	.word	0x3fe59427
   df0a4:	3ff00000 	.word	0x3ff00000
   df0a8:	e9dd 4500 	ldrd	r4, r5, [sp]
   df0ac:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   df0b0:	4622      	mov	r2, r4
   df0b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   df0b6:	ee10 8a10 	vmov	r8, s0
   df0ba:	4689      	mov	r9, r1
   df0bc:	e9cd 2300 	strd	r2, r3, [sp]
   df0c0:	e652      	b.n	ded68 <__kernel_tan+0x60>
   df0c2:	ec45 4b10 	vmov	d0, r4, r5
   df0c6:	e753      	b.n	def70 <__kernel_tan+0x268>
   df0c8:	ec49 8b10 	vmov	d0, r8, r9
   df0cc:	e750      	b.n	def70 <__kernel_tan+0x268>
   df0ce:	bf00      	nop

000df0d0 <expm1>:
   df0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df0d4:	ec5b ab10 	vmov	sl, fp, d0
   df0d8:	49d7      	ldr	r1, [pc, #860]	; (df438 <expm1+0x368>)
   df0da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   df0de:	428b      	cmp	r3, r1
   df0e0:	b085      	sub	sp, #20
   df0e2:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   df0e6:	d953      	bls.n	df190 <expm1+0xc0>
   df0e8:	49d4      	ldr	r1, [pc, #848]	; (df43c <expm1+0x36c>)
   df0ea:	428b      	cmp	r3, r1
   df0ec:	f200 8105 	bhi.w	df2fa <expm1+0x22a>
   df0f0:	2c00      	cmp	r4, #0
   df0f2:	f000 81de 	beq.w	df4b2 <expm1+0x3e2>
   df0f6:	a3b6      	add	r3, pc, #728	; (adr r3, df3d0 <expm1+0x300>)
   df0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   df0fc:	4650      	mov	r0, sl
   df0fe:	4659      	mov	r1, fp
   df100:	f000 fb88 	bl	df814 <__adddf3>
   df104:	2200      	movs	r2, #0
   df106:	2300      	movs	r3, #0
   df108:	f000 ffa8 	bl	e005c <__aeabi_dcmplt>
   df10c:	2800      	cmp	r0, #0
   df10e:	f040 80ff 	bne.w	df310 <expm1+0x240>
   df112:	a3b1      	add	r3, pc, #708	; (adr r3, df3d8 <expm1+0x308>)
   df114:	e9d3 2300 	ldrd	r2, r3, [r3]
   df118:	4650      	mov	r0, sl
   df11a:	4659      	mov	r1, fp
   df11c:	f000 fd2c 	bl	dfb78 <__aeabi_dmul>
   df120:	4602      	mov	r2, r0
   df122:	460b      	mov	r3, r1
   df124:	2000      	movs	r0, #0
   df126:	49c6      	ldr	r1, [pc, #792]	; (df440 <expm1+0x370>)
   df128:	f000 fb74 	bl	df814 <__adddf3>
   df12c:	f000 ffd4 	bl	e00d8 <__aeabi_d2iz>
   df130:	9001      	str	r0, [sp, #4]
   df132:	f000 fcbb 	bl	dfaac <__aeabi_i2d>
   df136:	a3aa      	add	r3, pc, #680	; (adr r3, df3e0 <expm1+0x310>)
   df138:	e9d3 2300 	ldrd	r2, r3, [r3]
   df13c:	4606      	mov	r6, r0
   df13e:	460f      	mov	r7, r1
   df140:	f000 fd1a 	bl	dfb78 <__aeabi_dmul>
   df144:	4602      	mov	r2, r0
   df146:	460b      	mov	r3, r1
   df148:	4650      	mov	r0, sl
   df14a:	4659      	mov	r1, fp
   df14c:	f000 fb60 	bl	df810 <__aeabi_dsub>
   df150:	a3a5      	add	r3, pc, #660	; (adr r3, df3e8 <expm1+0x318>)
   df152:	e9d3 2300 	ldrd	r2, r3, [r3]
   df156:	4680      	mov	r8, r0
   df158:	4689      	mov	r9, r1
   df15a:	4630      	mov	r0, r6
   df15c:	4639      	mov	r1, r7
   df15e:	f000 fd0b 	bl	dfb78 <__aeabi_dmul>
   df162:	4606      	mov	r6, r0
   df164:	460f      	mov	r7, r1
   df166:	4632      	mov	r2, r6
   df168:	463b      	mov	r3, r7
   df16a:	4640      	mov	r0, r8
   df16c:	4649      	mov	r1, r9
   df16e:	f000 fb4f 	bl	df810 <__aeabi_dsub>
   df172:	4602      	mov	r2, r0
   df174:	460b      	mov	r3, r1
   df176:	4682      	mov	sl, r0
   df178:	468b      	mov	fp, r1
   df17a:	4640      	mov	r0, r8
   df17c:	4649      	mov	r1, r9
   df17e:	f000 fb47 	bl	df810 <__aeabi_dsub>
   df182:	4632      	mov	r2, r6
   df184:	463b      	mov	r3, r7
   df186:	f000 fb43 	bl	df810 <__aeabi_dsub>
   df18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df18e:	e009      	b.n	df1a4 <expm1+0xd4>
   df190:	4aac      	ldr	r2, [pc, #688]	; (df444 <expm1+0x374>)
   df192:	4293      	cmp	r3, r2
   df194:	f200 80e7 	bhi.w	df366 <expm1+0x296>
   df198:	4aab      	ldr	r2, [pc, #684]	; (df448 <expm1+0x378>)
   df19a:	4293      	cmp	r3, r2
   df19c:	f240 8162 	bls.w	df464 <expm1+0x394>
   df1a0:	2300      	movs	r3, #0
   df1a2:	9301      	str	r3, [sp, #4]
   df1a4:	2200      	movs	r2, #0
   df1a6:	4ba9      	ldr	r3, [pc, #676]	; (df44c <expm1+0x37c>)
   df1a8:	4650      	mov	r0, sl
   df1aa:	4659      	mov	r1, fp
   df1ac:	f000 fce4 	bl	dfb78 <__aeabi_dmul>
   df1b0:	4606      	mov	r6, r0
   df1b2:	460f      	mov	r7, r1
   df1b4:	4602      	mov	r2, r0
   df1b6:	460b      	mov	r3, r1
   df1b8:	4650      	mov	r0, sl
   df1ba:	4659      	mov	r1, fp
   df1bc:	f000 fcdc 	bl	dfb78 <__aeabi_dmul>
   df1c0:	a38b      	add	r3, pc, #556	; (adr r3, df3f0 <expm1+0x320>)
   df1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1c6:	4604      	mov	r4, r0
   df1c8:	460d      	mov	r5, r1
   df1ca:	f000 fcd5 	bl	dfb78 <__aeabi_dmul>
   df1ce:	a38a      	add	r3, pc, #552	; (adr r3, df3f8 <expm1+0x328>)
   df1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1d4:	f000 fb1e 	bl	df814 <__adddf3>
   df1d8:	4622      	mov	r2, r4
   df1da:	462b      	mov	r3, r5
   df1dc:	f000 fccc 	bl	dfb78 <__aeabi_dmul>
   df1e0:	a387      	add	r3, pc, #540	; (adr r3, df400 <expm1+0x330>)
   df1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1e6:	f000 fb13 	bl	df810 <__aeabi_dsub>
   df1ea:	4622      	mov	r2, r4
   df1ec:	462b      	mov	r3, r5
   df1ee:	f000 fcc3 	bl	dfb78 <__aeabi_dmul>
   df1f2:	a385      	add	r3, pc, #532	; (adr r3, df408 <expm1+0x338>)
   df1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1f8:	f000 fb0c 	bl	df814 <__adddf3>
   df1fc:	4622      	mov	r2, r4
   df1fe:	462b      	mov	r3, r5
   df200:	f000 fcba 	bl	dfb78 <__aeabi_dmul>
   df204:	a382      	add	r3, pc, #520	; (adr r3, df410 <expm1+0x340>)
   df206:	e9d3 2300 	ldrd	r2, r3, [r3]
   df20a:	f000 fb01 	bl	df810 <__aeabi_dsub>
   df20e:	4622      	mov	r2, r4
   df210:	462b      	mov	r3, r5
   df212:	f000 fcb1 	bl	dfb78 <__aeabi_dmul>
   df216:	2200      	movs	r2, #0
   df218:	4b8d      	ldr	r3, [pc, #564]	; (df450 <expm1+0x380>)
   df21a:	f000 fafb 	bl	df814 <__adddf3>
   df21e:	4680      	mov	r8, r0
   df220:	4689      	mov	r9, r1
   df222:	4602      	mov	r2, r0
   df224:	460b      	mov	r3, r1
   df226:	4630      	mov	r0, r6
   df228:	4639      	mov	r1, r7
   df22a:	f000 fca5 	bl	dfb78 <__aeabi_dmul>
   df22e:	4602      	mov	r2, r0
   df230:	460b      	mov	r3, r1
   df232:	2000      	movs	r0, #0
   df234:	4987      	ldr	r1, [pc, #540]	; (df454 <expm1+0x384>)
   df236:	f000 faeb 	bl	df810 <__aeabi_dsub>
   df23a:	4606      	mov	r6, r0
   df23c:	4602      	mov	r2, r0
   df23e:	460b      	mov	r3, r1
   df240:	460f      	mov	r7, r1
   df242:	4640      	mov	r0, r8
   df244:	4649      	mov	r1, r9
   df246:	f000 fae3 	bl	df810 <__aeabi_dsub>
   df24a:	4632      	mov	r2, r6
   df24c:	4680      	mov	r8, r0
   df24e:	4689      	mov	r9, r1
   df250:	463b      	mov	r3, r7
   df252:	4650      	mov	r0, sl
   df254:	4659      	mov	r1, fp
   df256:	f000 fc8f 	bl	dfb78 <__aeabi_dmul>
   df25a:	4602      	mov	r2, r0
   df25c:	460b      	mov	r3, r1
   df25e:	2000      	movs	r0, #0
   df260:	497d      	ldr	r1, [pc, #500]	; (df458 <expm1+0x388>)
   df262:	f000 fad5 	bl	df810 <__aeabi_dsub>
   df266:	4602      	mov	r2, r0
   df268:	460b      	mov	r3, r1
   df26a:	4640      	mov	r0, r8
   df26c:	4649      	mov	r1, r9
   df26e:	f000 fdad 	bl	dfdcc <__aeabi_ddiv>
   df272:	4622      	mov	r2, r4
   df274:	462b      	mov	r3, r5
   df276:	f000 fc7f 	bl	dfb78 <__aeabi_dmul>
   df27a:	9e01      	ldr	r6, [sp, #4]
   df27c:	4602      	mov	r2, r0
   df27e:	460b      	mov	r3, r1
   df280:	2e00      	cmp	r6, #0
   df282:	d048      	beq.n	df316 <expm1+0x246>
   df284:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   df288:	4632      	mov	r2, r6
   df28a:	463b      	mov	r3, r7
   df28c:	f000 fac0 	bl	df810 <__aeabi_dsub>
   df290:	4652      	mov	r2, sl
   df292:	465b      	mov	r3, fp
   df294:	f000 fc70 	bl	dfb78 <__aeabi_dmul>
   df298:	4632      	mov	r2, r6
   df29a:	463b      	mov	r3, r7
   df29c:	f000 fab8 	bl	df810 <__aeabi_dsub>
   df2a0:	462b      	mov	r3, r5
   df2a2:	4622      	mov	r2, r4
   df2a4:	f000 fab4 	bl	df810 <__aeabi_dsub>
   df2a8:	9b01      	ldr	r3, [sp, #4]
   df2aa:	3301      	adds	r3, #1
   df2ac:	4606      	mov	r6, r0
   df2ae:	460f      	mov	r7, r1
   df2b0:	f000 810b 	beq.w	df4ca <expm1+0x3fa>
   df2b4:	9b01      	ldr	r3, [sp, #4]
   df2b6:	2b01      	cmp	r3, #1
   df2b8:	f000 80df 	beq.w	df47a <expm1+0x3aa>
   df2bc:	9b01      	ldr	r3, [sp, #4]
   df2be:	3301      	adds	r3, #1
   df2c0:	2b39      	cmp	r3, #57	; 0x39
   df2c2:	d866      	bhi.n	df392 <expm1+0x2c2>
   df2c4:	9b01      	ldr	r3, [sp, #4]
   df2c6:	2b13      	cmp	r3, #19
   df2c8:	f340 8110 	ble.w	df4ec <expm1+0x41c>
   df2cc:	9c01      	ldr	r4, [sp, #4]
   df2ce:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   df2d2:	3503      	adds	r5, #3
   df2d4:	2200      	movs	r2, #0
   df2d6:	052b      	lsls	r3, r5, #20
   df2d8:	f000 fa9c 	bl	df814 <__adddf3>
   df2dc:	4602      	mov	r2, r0
   df2de:	460b      	mov	r3, r1
   df2e0:	4650      	mov	r0, sl
   df2e2:	4659      	mov	r1, fp
   df2e4:	f000 fa94 	bl	df810 <__aeabi_dsub>
   df2e8:	2200      	movs	r2, #0
   df2ea:	4b59      	ldr	r3, [pc, #356]	; (df450 <expm1+0x380>)
   df2ec:	f000 fa92 	bl	df814 <__adddf3>
   df2f0:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   df2f4:	ec41 0b10 	vmov	d0, r0, r1
   df2f8:	e01d      	b.n	df336 <expm1+0x266>
   df2fa:	4958      	ldr	r1, [pc, #352]	; (df45c <expm1+0x38c>)
   df2fc:	428b      	cmp	r3, r1
   df2fe:	d91d      	bls.n	df33c <expm1+0x26c>
   df300:	ee10 3a10 	vmov	r3, s0
   df304:	f3cb 0213 	ubfx	r2, fp, #0, #20
   df308:	4313      	orrs	r3, r2
   df30a:	f040 8128 	bne.w	df55e <expm1+0x48e>
   df30e:	b194      	cbz	r4, df336 <expm1+0x266>
   df310:	ed9f 0b41 	vldr	d0, [pc, #260]	; df418 <expm1+0x348>
   df314:	e00f      	b.n	df336 <expm1+0x266>
   df316:	4650      	mov	r0, sl
   df318:	4659      	mov	r1, fp
   df31a:	f000 fc2d 	bl	dfb78 <__aeabi_dmul>
   df31e:	4622      	mov	r2, r4
   df320:	462b      	mov	r3, r5
   df322:	f000 fa75 	bl	df810 <__aeabi_dsub>
   df326:	4602      	mov	r2, r0
   df328:	460b      	mov	r3, r1
   df32a:	4650      	mov	r0, sl
   df32c:	4659      	mov	r1, fp
   df32e:	f000 fa6f 	bl	df810 <__aeabi_dsub>
   df332:	ec41 0b10 	vmov	d0, r0, r1
   df336:	b005      	add	sp, #20
   df338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df33c:	a338      	add	r3, pc, #224	; (adr r3, df420 <expm1+0x350>)
   df33e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df342:	ee10 0a10 	vmov	r0, s0
   df346:	4659      	mov	r1, fp
   df348:	f000 fea6 	bl	e0098 <__aeabi_dcmpgt>
   df34c:	2800      	cmp	r0, #0
   df34e:	f43f aecf 	beq.w	df0f0 <expm1+0x20>
   df352:	a335      	add	r3, pc, #212	; (adr r3, df428 <expm1+0x358>)
   df354:	e9d3 2300 	ldrd	r2, r3, [r3]
   df358:	4610      	mov	r0, r2
   df35a:	4619      	mov	r1, r3
   df35c:	f000 fc0c 	bl	dfb78 <__aeabi_dmul>
   df360:	ec41 0b10 	vmov	d0, r0, r1
   df364:	e7e7      	b.n	df336 <expm1+0x266>
   df366:	4a3e      	ldr	r2, [pc, #248]	; (df460 <expm1+0x390>)
   df368:	4293      	cmp	r3, r2
   df36a:	f200 80d7 	bhi.w	df51c <expm1+0x44c>
   df36e:	ee10 0a10 	vmov	r0, s0
   df372:	4659      	mov	r1, fp
   df374:	a31a      	add	r3, pc, #104	; (adr r3, df3e0 <expm1+0x310>)
   df376:	e9d3 2300 	ldrd	r2, r3, [r3]
   df37a:	b1f4      	cbz	r4, df3ba <expm1+0x2ea>
   df37c:	f000 fa4a 	bl	df814 <__adddf3>
   df380:	f04f 33ff 	mov.w	r3, #4294967295
   df384:	4680      	mov	r8, r0
   df386:	4689      	mov	r9, r1
   df388:	9301      	str	r3, [sp, #4]
   df38a:	a729      	add	r7, pc, #164	; (adr r7, df430 <expm1+0x360>)
   df38c:	e9d7 6700 	ldrd	r6, r7, [r7]
   df390:	e6e9      	b.n	df166 <expm1+0x96>
   df392:	4652      	mov	r2, sl
   df394:	465b      	mov	r3, fp
   df396:	f000 fa3b 	bl	df810 <__aeabi_dsub>
   df39a:	4602      	mov	r2, r0
   df39c:	460b      	mov	r3, r1
   df39e:	2000      	movs	r0, #0
   df3a0:	492b      	ldr	r1, [pc, #172]	; (df450 <expm1+0x380>)
   df3a2:	f000 fa35 	bl	df810 <__aeabi_dsub>
   df3a6:	9a01      	ldr	r2, [sp, #4]
   df3a8:	4b29      	ldr	r3, [pc, #164]	; (df450 <expm1+0x380>)
   df3aa:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   df3ae:	2200      	movs	r2, #0
   df3b0:	f000 fa2e 	bl	df810 <__aeabi_dsub>
   df3b4:	ec41 0b10 	vmov	d0, r0, r1
   df3b8:	e7bd      	b.n	df336 <expm1+0x266>
   df3ba:	f000 fa29 	bl	df810 <__aeabi_dsub>
   df3be:	2301      	movs	r3, #1
   df3c0:	4680      	mov	r8, r0
   df3c2:	4689      	mov	r9, r1
   df3c4:	9301      	str	r3, [sp, #4]
   df3c6:	a708      	add	r7, pc, #32	; (adr r7, df3e8 <expm1+0x318>)
   df3c8:	e9d7 6700 	ldrd	r6, r7, [r7]
   df3cc:	e6cb      	b.n	df166 <expm1+0x96>
   df3ce:	bf00      	nop
   df3d0:	c2f8f359 	.word	0xc2f8f359
   df3d4:	01a56e1f 	.word	0x01a56e1f
   df3d8:	652b82fe 	.word	0x652b82fe
   df3dc:	3ff71547 	.word	0x3ff71547
   df3e0:	fee00000 	.word	0xfee00000
   df3e4:	3fe62e42 	.word	0x3fe62e42
   df3e8:	35793c76 	.word	0x35793c76
   df3ec:	3dea39ef 	.word	0x3dea39ef
   df3f0:	6e09c32d 	.word	0x6e09c32d
   df3f4:	be8afdb7 	.word	0xbe8afdb7
   df3f8:	86e65239 	.word	0x86e65239
   df3fc:	3ed0cfca 	.word	0x3ed0cfca
   df400:	9eaadbb7 	.word	0x9eaadbb7
   df404:	3f14ce19 	.word	0x3f14ce19
   df408:	19fe5585 	.word	0x19fe5585
   df40c:	3f5a01a0 	.word	0x3f5a01a0
   df410:	111110f4 	.word	0x111110f4
   df414:	3fa11111 	.word	0x3fa11111
   df418:	00000000 	.word	0x00000000
   df41c:	bff00000 	.word	0xbff00000
   df420:	fefa39ef 	.word	0xfefa39ef
   df424:	40862e42 	.word	0x40862e42
   df428:	8800759c 	.word	0x8800759c
   df42c:	7e37e43c 	.word	0x7e37e43c
   df430:	35793c76 	.word	0x35793c76
   df434:	bdea39ef 	.word	0xbdea39ef
   df438:	40436879 	.word	0x40436879
   df43c:	40862e41 	.word	0x40862e41
   df440:	bfe00000 	.word	0xbfe00000
   df444:	3fd62e42 	.word	0x3fd62e42
   df448:	3c8fffff 	.word	0x3c8fffff
   df44c:	3fe00000 	.word	0x3fe00000
   df450:	3ff00000 	.word	0x3ff00000
   df454:	40080000 	.word	0x40080000
   df458:	40180000 	.word	0x40180000
   df45c:	7fefffff 	.word	0x7fefffff
   df460:	3ff0a2b1 	.word	0x3ff0a2b1
   df464:	a349      	add	r3, pc, #292	; (adr r3, df58c <expm1+0x4bc>)
   df466:	e9d3 2300 	ldrd	r2, r3, [r3]
   df46a:	ee10 0a10 	vmov	r0, s0
   df46e:	4659      	mov	r1, fp
   df470:	f000 f9d0 	bl	df814 <__adddf3>
   df474:	4602      	mov	r2, r0
   df476:	460b      	mov	r3, r1
   df478:	e753      	b.n	df322 <expm1+0x252>
   df47a:	2200      	movs	r2, #0
   df47c:	4b40      	ldr	r3, [pc, #256]	; (df580 <expm1+0x4b0>)
   df47e:	4650      	mov	r0, sl
   df480:	4659      	mov	r1, fp
   df482:	f000 fdeb 	bl	e005c <__aeabi_dcmplt>
   df486:	2800      	cmp	r0, #0
   df488:	d058      	beq.n	df53c <expm1+0x46c>
   df48a:	2200      	movs	r2, #0
   df48c:	4b3d      	ldr	r3, [pc, #244]	; (df584 <expm1+0x4b4>)
   df48e:	4650      	mov	r0, sl
   df490:	4659      	mov	r1, fp
   df492:	f000 f9bf 	bl	df814 <__adddf3>
   df496:	4602      	mov	r2, r0
   df498:	460b      	mov	r3, r1
   df49a:	4630      	mov	r0, r6
   df49c:	4639      	mov	r1, r7
   df49e:	f000 f9b7 	bl	df810 <__aeabi_dsub>
   df4a2:	2200      	movs	r2, #0
   df4a4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   df4a8:	f000 fb66 	bl	dfb78 <__aeabi_dmul>
   df4ac:	ec41 0b10 	vmov	d0, r0, r1
   df4b0:	e741      	b.n	df336 <expm1+0x266>
   df4b2:	a331      	add	r3, pc, #196	; (adr r3, df578 <expm1+0x4a8>)
   df4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4b8:	4650      	mov	r0, sl
   df4ba:	4659      	mov	r1, fp
   df4bc:	f000 fb5c 	bl	dfb78 <__aeabi_dmul>
   df4c0:	4602      	mov	r2, r0
   df4c2:	460b      	mov	r3, r1
   df4c4:	2000      	movs	r0, #0
   df4c6:	492f      	ldr	r1, [pc, #188]	; (df584 <expm1+0x4b4>)
   df4c8:	e62e      	b.n	df128 <expm1+0x58>
   df4ca:	4602      	mov	r2, r0
   df4cc:	460b      	mov	r3, r1
   df4ce:	4650      	mov	r0, sl
   df4d0:	4659      	mov	r1, fp
   df4d2:	f000 f99d 	bl	df810 <__aeabi_dsub>
   df4d6:	2200      	movs	r2, #0
   df4d8:	4b2a      	ldr	r3, [pc, #168]	; (df584 <expm1+0x4b4>)
   df4da:	f000 fb4d 	bl	dfb78 <__aeabi_dmul>
   df4de:	2200      	movs	r2, #0
   df4e0:	4b28      	ldr	r3, [pc, #160]	; (df584 <expm1+0x4b4>)
   df4e2:	f000 f995 	bl	df810 <__aeabi_dsub>
   df4e6:	ec41 0b10 	vmov	d0, r0, r1
   df4ea:	e724      	b.n	df336 <expm1+0x266>
   df4ec:	9c01      	ldr	r4, [sp, #4]
   df4ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   df4f2:	4123      	asrs	r3, r4
   df4f4:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   df4f8:	4652      	mov	r2, sl
   df4fa:	465b      	mov	r3, fp
   df4fc:	f000 f988 	bl	df810 <__aeabi_dsub>
   df500:	2600      	movs	r6, #0
   df502:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   df506:	4602      	mov	r2, r0
   df508:	460b      	mov	r3, r1
   df50a:	4630      	mov	r0, r6
   df50c:	4639      	mov	r1, r7
   df50e:	f000 f97f 	bl	df810 <__aeabi_dsub>
   df512:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   df516:	ec41 0b10 	vmov	d0, r0, r1
   df51a:	e70c      	b.n	df336 <expm1+0x266>
   df51c:	a316      	add	r3, pc, #88	; (adr r3, df578 <expm1+0x4a8>)
   df51e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df522:	ee10 0a10 	vmov	r0, s0
   df526:	4659      	mov	r1, fp
   df528:	f000 fb26 	bl	dfb78 <__aeabi_dmul>
   df52c:	4602      	mov	r2, r0
   df52e:	460b      	mov	r3, r1
   df530:	2000      	movs	r0, #0
   df532:	2c00      	cmp	r4, #0
   df534:	f47f adf7 	bne.w	df126 <expm1+0x56>
   df538:	4912      	ldr	r1, [pc, #72]	; (df584 <expm1+0x4b4>)
   df53a:	e5f5      	b.n	df128 <expm1+0x58>
   df53c:	4632      	mov	r2, r6
   df53e:	463b      	mov	r3, r7
   df540:	4650      	mov	r0, sl
   df542:	4659      	mov	r1, fp
   df544:	f000 f964 	bl	df810 <__aeabi_dsub>
   df548:	4602      	mov	r2, r0
   df54a:	460b      	mov	r3, r1
   df54c:	f000 f962 	bl	df814 <__adddf3>
   df550:	2200      	movs	r2, #0
   df552:	4b0d      	ldr	r3, [pc, #52]	; (df588 <expm1+0x4b8>)
   df554:	f000 f95e 	bl	df814 <__adddf3>
   df558:	ec41 0b10 	vmov	d0, r0, r1
   df55c:	e6eb      	b.n	df336 <expm1+0x266>
   df55e:	ee10 2a10 	vmov	r2, s0
   df562:	ee10 0a10 	vmov	r0, s0
   df566:	465b      	mov	r3, fp
   df568:	4659      	mov	r1, fp
   df56a:	f000 f953 	bl	df814 <__adddf3>
   df56e:	ec41 0b10 	vmov	d0, r0, r1
   df572:	e6e0      	b.n	df336 <expm1+0x266>
   df574:	f3af 8000 	nop.w
   df578:	652b82fe 	.word	0x652b82fe
   df57c:	3ff71547 	.word	0x3ff71547
   df580:	bfd00000 	.word	0xbfd00000
   df584:	3fe00000 	.word	0x3fe00000
   df588:	3ff00000 	.word	0x3ff00000
   df58c:	8800759c 	.word	0x8800759c
   df590:	7e37e43c 	.word	0x7e37e43c

000df594 <finite>:
   df594:	ee10 3a90 	vmov	r3, s1
   df598:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   df59c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   df5a0:	0fc0      	lsrs	r0, r0, #31
   df5a2:	4770      	bx	lr

000df5a4 <matherr>:
   df5a4:	2000      	movs	r0, #0
   df5a6:	4770      	bx	lr

000df5a8 <nan>:
   df5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; df5b0 <nan+0x8>
   df5ac:	4770      	bx	lr
   df5ae:	bf00      	nop
   df5b0:	00000000 	.word	0x00000000
   df5b4:	7ff80000 	.word	0x7ff80000

000df5b8 <rint>:
   df5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   df5ba:	ec53 2b10 	vmov	r2, r3, d0
   df5be:	f3c3 560a 	ubfx	r6, r3, #20, #11
   df5c2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   df5c6:	2813      	cmp	r0, #19
   df5c8:	b083      	sub	sp, #12
   df5ca:	4619      	mov	r1, r3
   df5cc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   df5d0:	ee10 5a10 	vmov	r5, s0
   df5d4:	dc2f      	bgt.n	df636 <rint+0x7e>
   df5d6:	2800      	cmp	r0, #0
   df5d8:	db49      	blt.n	df66e <rint+0xb6>
   df5da:	4e3f      	ldr	r6, [pc, #252]	; (df6d8 <rint+0x120>)
   df5dc:	4106      	asrs	r6, r0
   df5de:	ea03 0706 	and.w	r7, r3, r6
   df5e2:	4317      	orrs	r7, r2
   df5e4:	d02c      	beq.n	df640 <rint+0x88>
   df5e6:	0876      	lsrs	r6, r6, #1
   df5e8:	4033      	ands	r3, r6
   df5ea:	431d      	orrs	r5, r3
   df5ec:	d00c      	beq.n	df608 <rint+0x50>
   df5ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   df5f2:	2813      	cmp	r0, #19
   df5f4:	ea21 0606 	bic.w	r6, r1, r6
   df5f8:	fa43 f100 	asr.w	r1, r3, r0
   df5fc:	ea41 0106 	orr.w	r1, r1, r6
   df600:	bf0c      	ite	eq
   df602:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   df606:	2500      	movne	r5, #0
   df608:	4834      	ldr	r0, [pc, #208]	; (df6dc <rint+0x124>)
   df60a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   df60e:	462a      	mov	r2, r5
   df610:	e9d4 4500 	ldrd	r4, r5, [r4]
   df614:	4610      	mov	r0, r2
   df616:	462b      	mov	r3, r5
   df618:	4622      	mov	r2, r4
   df61a:	f000 f8fb 	bl	df814 <__adddf3>
   df61e:	e9cd 0100 	strd	r0, r1, [sp]
   df622:	4622      	mov	r2, r4
   df624:	462b      	mov	r3, r5
   df626:	e9dd 0100 	ldrd	r0, r1, [sp]
   df62a:	f000 f8f1 	bl	df810 <__aeabi_dsub>
   df62e:	ec41 0b10 	vmov	d0, r0, r1
   df632:	b003      	add	sp, #12
   df634:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df636:	2833      	cmp	r0, #51	; 0x33
   df638:	dd06      	ble.n	df648 <rint+0x90>
   df63a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   df63e:	d042      	beq.n	df6c6 <rint+0x10e>
   df640:	ec43 2b10 	vmov	d0, r2, r3
   df644:	b003      	add	sp, #12
   df646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df648:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   df64c:	f04f 30ff 	mov.w	r0, #4294967295
   df650:	40f0      	lsrs	r0, r6
   df652:	4202      	tst	r2, r0
   df654:	d0f4      	beq.n	df640 <rint+0x88>
   df656:	0840      	lsrs	r0, r0, #1
   df658:	4202      	tst	r2, r0
   df65a:	d0d5      	beq.n	df608 <rint+0x50>
   df65c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df660:	ea25 0000 	bic.w	r0, r5, r0
   df664:	fa43 f606 	asr.w	r6, r3, r6
   df668:	ea46 0500 	orr.w	r5, r6, r0
   df66c:	e7cc      	b.n	df608 <rint+0x50>
   df66e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   df672:	4310      	orrs	r0, r2
   df674:	ee10 7a10 	vmov	r7, s0
   df678:	d0e2      	beq.n	df640 <rint+0x88>
   df67a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   df67e:	4307      	orrs	r7, r0
   df680:	4278      	negs	r0, r7
   df682:	4307      	orrs	r7, r0
   df684:	4815      	ldr	r0, [pc, #84]	; (df6dc <rint+0x124>)
   df686:	0c59      	lsrs	r1, r3, #17
   df688:	0b3f      	lsrs	r7, r7, #12
   df68a:	0449      	lsls	r1, r1, #17
   df68c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   df690:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   df694:	ea47 0301 	orr.w	r3, r7, r1
   df698:	e9d0 6700 	ldrd	r6, r7, [r0]
   df69c:	4619      	mov	r1, r3
   df69e:	4610      	mov	r0, r2
   df6a0:	463b      	mov	r3, r7
   df6a2:	4632      	mov	r2, r6
   df6a4:	f000 f8b6 	bl	df814 <__adddf3>
   df6a8:	e9cd 0100 	strd	r0, r1, [sp]
   df6ac:	463b      	mov	r3, r7
   df6ae:	4632      	mov	r2, r6
   df6b0:	e9dd 0100 	ldrd	r0, r1, [sp]
   df6b4:	f000 f8ac 	bl	df810 <__aeabi_dsub>
   df6b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   df6bc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   df6c0:	ec41 0b10 	vmov	d0, r0, r1
   df6c4:	e7be      	b.n	df644 <rint+0x8c>
   df6c6:	ee10 0a10 	vmov	r0, s0
   df6ca:	4619      	mov	r1, r3
   df6cc:	f000 f8a2 	bl	df814 <__adddf3>
   df6d0:	ec41 0b10 	vmov	d0, r0, r1
   df6d4:	e7b6      	b.n	df644 <rint+0x8c>
   df6d6:	bf00      	nop
   df6d8:	000fffff 	.word	0x000fffff
   df6dc:	000e4360 	.word	0x000e4360

000df6e0 <scalbn>:
   df6e0:	ec53 2b10 	vmov	r2, r3, d0
   df6e4:	b570      	push	{r4, r5, r6, lr}
   df6e6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   df6ea:	4619      	mov	r1, r3
   df6ec:	4605      	mov	r5, r0
   df6ee:	bb14      	cbnz	r4, df736 <scalbn+0x56>
   df6f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   df6f4:	4311      	orrs	r1, r2
   df6f6:	d02a      	beq.n	df74e <scalbn+0x6e>
   df6f8:	4619      	mov	r1, r3
   df6fa:	2200      	movs	r2, #0
   df6fc:	4b38      	ldr	r3, [pc, #224]	; (df7e0 <scalbn+0x100>)
   df6fe:	4e39      	ldr	r6, [pc, #228]	; (df7e4 <scalbn+0x104>)
   df700:	ee10 0a10 	vmov	r0, s0
   df704:	f000 fa38 	bl	dfb78 <__aeabi_dmul>
   df708:	42b5      	cmp	r5, r6
   df70a:	4602      	mov	r2, r0
   df70c:	460b      	mov	r3, r1
   df70e:	db1f      	blt.n	df750 <scalbn+0x70>
   df710:	f3c1 540a 	ubfx	r4, r1, #20, #11
   df714:	3c36      	subs	r4, #54	; 0x36
   df716:	442c      	add	r4, r5
   df718:	f240 70fe 	movw	r0, #2046	; 0x7fe
   df71c:	4284      	cmp	r4, r0
   df71e:	dc1f      	bgt.n	df760 <scalbn+0x80>
   df720:	2c00      	cmp	r4, #0
   df722:	dd2d      	ble.n	df780 <scalbn+0xa0>
   df724:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   df728:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   df72c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   df730:	ec43 2b10 	vmov	d0, r2, r3
   df734:	bd70      	pop	{r4, r5, r6, pc}
   df736:	f240 70ff 	movw	r0, #2047	; 0x7ff
   df73a:	4284      	cmp	r4, r0
   df73c:	d1eb      	bne.n	df716 <scalbn+0x36>
   df73e:	ee10 0a10 	vmov	r0, s0
   df742:	4619      	mov	r1, r3
   df744:	f000 f866 	bl	df814 <__adddf3>
   df748:	ec41 0b10 	vmov	d0, r0, r1
   df74c:	bd70      	pop	{r4, r5, r6, pc}
   df74e:	bd70      	pop	{r4, r5, r6, pc}
   df750:	a31f      	add	r3, pc, #124	; (adr r3, df7d0 <scalbn+0xf0>)
   df752:	e9d3 2300 	ldrd	r2, r3, [r3]
   df756:	f000 fa0f 	bl	dfb78 <__aeabi_dmul>
   df75a:	ec41 0b10 	vmov	d0, r0, r1
   df75e:	bd70      	pop	{r4, r5, r6, pc}
   df760:	ec43 2b11 	vmov	d1, r2, r3
   df764:	ed9f 0b1c 	vldr	d0, [pc, #112]	; df7d8 <scalbn+0xf8>
   df768:	f000 f840 	bl	df7ec <copysign>
   df76c:	a31a      	add	r3, pc, #104	; (adr r3, df7d8 <scalbn+0xf8>)
   df76e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df772:	ec51 0b10 	vmov	r0, r1, d0
   df776:	f000 f9ff 	bl	dfb78 <__aeabi_dmul>
   df77a:	ec41 0b10 	vmov	d0, r0, r1
   df77e:	bd70      	pop	{r4, r5, r6, pc}
   df780:	f114 0f35 	cmn.w	r4, #53	; 0x35
   df784:	da13      	bge.n	df7ae <scalbn+0xce>
   df786:	f24c 3150 	movw	r1, #50000	; 0xc350
   df78a:	428d      	cmp	r5, r1
   df78c:	ec43 2b11 	vmov	d1, r2, r3
   df790:	dce8      	bgt.n	df764 <scalbn+0x84>
   df792:	ed9f 0b0f 	vldr	d0, [pc, #60]	; df7d0 <scalbn+0xf0>
   df796:	f000 f829 	bl	df7ec <copysign>
   df79a:	a30d      	add	r3, pc, #52	; (adr r3, df7d0 <scalbn+0xf0>)
   df79c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7a0:	ec51 0b10 	vmov	r0, r1, d0
   df7a4:	f000 f9e8 	bl	dfb78 <__aeabi_dmul>
   df7a8:	ec41 0b10 	vmov	d0, r0, r1
   df7ac:	bd70      	pop	{r4, r5, r6, pc}
   df7ae:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   df7b2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   df7b6:	3436      	adds	r4, #54	; 0x36
   df7b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   df7bc:	4610      	mov	r0, r2
   df7be:	4619      	mov	r1, r3
   df7c0:	2200      	movs	r2, #0
   df7c2:	4b09      	ldr	r3, [pc, #36]	; (df7e8 <scalbn+0x108>)
   df7c4:	f000 f9d8 	bl	dfb78 <__aeabi_dmul>
   df7c8:	ec41 0b10 	vmov	d0, r0, r1
   df7cc:	bd70      	pop	{r4, r5, r6, pc}
   df7ce:	bf00      	nop
   df7d0:	c2f8f359 	.word	0xc2f8f359
   df7d4:	01a56e1f 	.word	0x01a56e1f
   df7d8:	8800759c 	.word	0x8800759c
   df7dc:	7e37e43c 	.word	0x7e37e43c
   df7e0:	43500000 	.word	0x43500000
   df7e4:	ffff3cb0 	.word	0xffff3cb0
   df7e8:	3c900000 	.word	0x3c900000

000df7ec <copysign>:
   df7ec:	ec53 2b10 	vmov	r2, r3, d0
   df7f0:	ee11 0a90 	vmov	r0, s3
   df7f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   df7f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   df7fc:	ea41 0300 	orr.w	r3, r1, r0
   df800:	ec43 2b10 	vmov	d0, r2, r3
   df804:	4770      	bx	lr
   df806:	bf00      	nop

000df808 <__aeabi_drsub>:
   df808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   df80c:	e002      	b.n	df814 <__adddf3>
   df80e:	bf00      	nop

000df810 <__aeabi_dsub>:
   df810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000df814 <__adddf3>:
   df814:	b530      	push	{r4, r5, lr}
   df816:	ea4f 0441 	mov.w	r4, r1, lsl #1
   df81a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   df81e:	ea94 0f05 	teq	r4, r5
   df822:	bf08      	it	eq
   df824:	ea90 0f02 	teqeq	r0, r2
   df828:	bf1f      	itttt	ne
   df82a:	ea54 0c00 	orrsne.w	ip, r4, r0
   df82e:	ea55 0c02 	orrsne.w	ip, r5, r2
   df832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   df836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   df83a:	f000 80e2 	beq.w	dfa02 <__adddf3+0x1ee>
   df83e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   df842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   df846:	bfb8      	it	lt
   df848:	426d      	neglt	r5, r5
   df84a:	dd0c      	ble.n	df866 <__adddf3+0x52>
   df84c:	442c      	add	r4, r5
   df84e:	ea80 0202 	eor.w	r2, r0, r2
   df852:	ea81 0303 	eor.w	r3, r1, r3
   df856:	ea82 0000 	eor.w	r0, r2, r0
   df85a:	ea83 0101 	eor.w	r1, r3, r1
   df85e:	ea80 0202 	eor.w	r2, r0, r2
   df862:	ea81 0303 	eor.w	r3, r1, r3
   df866:	2d36      	cmp	r5, #54	; 0x36
   df868:	bf88      	it	hi
   df86a:	bd30      	pophi	{r4, r5, pc}
   df86c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   df870:	ea4f 3101 	mov.w	r1, r1, lsl #12
   df874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   df878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   df87c:	d002      	beq.n	df884 <__adddf3+0x70>
   df87e:	4240      	negs	r0, r0
   df880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   df888:	ea4f 3303 	mov.w	r3, r3, lsl #12
   df88c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   df890:	d002      	beq.n	df898 <__adddf3+0x84>
   df892:	4252      	negs	r2, r2
   df894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df898:	ea94 0f05 	teq	r4, r5
   df89c:	f000 80a7 	beq.w	df9ee <__adddf3+0x1da>
   df8a0:	f1a4 0401 	sub.w	r4, r4, #1
   df8a4:	f1d5 0e20 	rsbs	lr, r5, #32
   df8a8:	db0d      	blt.n	df8c6 <__adddf3+0xb2>
   df8aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   df8ae:	fa22 f205 	lsr.w	r2, r2, r5
   df8b2:	1880      	adds	r0, r0, r2
   df8b4:	f141 0100 	adc.w	r1, r1, #0
   df8b8:	fa03 f20e 	lsl.w	r2, r3, lr
   df8bc:	1880      	adds	r0, r0, r2
   df8be:	fa43 f305 	asr.w	r3, r3, r5
   df8c2:	4159      	adcs	r1, r3
   df8c4:	e00e      	b.n	df8e4 <__adddf3+0xd0>
   df8c6:	f1a5 0520 	sub.w	r5, r5, #32
   df8ca:	f10e 0e20 	add.w	lr, lr, #32
   df8ce:	2a01      	cmp	r2, #1
   df8d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   df8d4:	bf28      	it	cs
   df8d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   df8da:	fa43 f305 	asr.w	r3, r3, r5
   df8de:	18c0      	adds	r0, r0, r3
   df8e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   df8e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   df8e8:	d507      	bpl.n	df8fa <__adddf3+0xe6>
   df8ea:	f04f 0e00 	mov.w	lr, #0
   df8ee:	f1dc 0c00 	rsbs	ip, ip, #0
   df8f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   df8f6:	eb6e 0101 	sbc.w	r1, lr, r1
   df8fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   df8fe:	d31b      	bcc.n	df938 <__adddf3+0x124>
   df900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   df904:	d30c      	bcc.n	df920 <__adddf3+0x10c>
   df906:	0849      	lsrs	r1, r1, #1
   df908:	ea5f 0030 	movs.w	r0, r0, rrx
   df90c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   df910:	f104 0401 	add.w	r4, r4, #1
   df914:	ea4f 5244 	mov.w	r2, r4, lsl #21
   df918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   df91c:	f080 809a 	bcs.w	dfa54 <__adddf3+0x240>
   df920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   df924:	bf08      	it	eq
   df926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   df92a:	f150 0000 	adcs.w	r0, r0, #0
   df92e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   df932:	ea41 0105 	orr.w	r1, r1, r5
   df936:	bd30      	pop	{r4, r5, pc}
   df938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   df93c:	4140      	adcs	r0, r0
   df93e:	eb41 0101 	adc.w	r1, r1, r1
   df942:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   df946:	f1a4 0401 	sub.w	r4, r4, #1
   df94a:	d1e9      	bne.n	df920 <__adddf3+0x10c>
   df94c:	f091 0f00 	teq	r1, #0
   df950:	bf04      	itt	eq
   df952:	4601      	moveq	r1, r0
   df954:	2000      	moveq	r0, #0
   df956:	fab1 f381 	clz	r3, r1
   df95a:	bf08      	it	eq
   df95c:	3320      	addeq	r3, #32
   df95e:	f1a3 030b 	sub.w	r3, r3, #11
   df962:	f1b3 0220 	subs.w	r2, r3, #32
   df966:	da0c      	bge.n	df982 <__adddf3+0x16e>
   df968:	320c      	adds	r2, #12
   df96a:	dd08      	ble.n	df97e <__adddf3+0x16a>
   df96c:	f102 0c14 	add.w	ip, r2, #20
   df970:	f1c2 020c 	rsb	r2, r2, #12
   df974:	fa01 f00c 	lsl.w	r0, r1, ip
   df978:	fa21 f102 	lsr.w	r1, r1, r2
   df97c:	e00c      	b.n	df998 <__adddf3+0x184>
   df97e:	f102 0214 	add.w	r2, r2, #20
   df982:	bfd8      	it	le
   df984:	f1c2 0c20 	rsble	ip, r2, #32
   df988:	fa01 f102 	lsl.w	r1, r1, r2
   df98c:	fa20 fc0c 	lsr.w	ip, r0, ip
   df990:	bfdc      	itt	le
   df992:	ea41 010c 	orrle.w	r1, r1, ip
   df996:	4090      	lslle	r0, r2
   df998:	1ae4      	subs	r4, r4, r3
   df99a:	bfa2      	ittt	ge
   df99c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   df9a0:	4329      	orrge	r1, r5
   df9a2:	bd30      	popge	{r4, r5, pc}
   df9a4:	ea6f 0404 	mvn.w	r4, r4
   df9a8:	3c1f      	subs	r4, #31
   df9aa:	da1c      	bge.n	df9e6 <__adddf3+0x1d2>
   df9ac:	340c      	adds	r4, #12
   df9ae:	dc0e      	bgt.n	df9ce <__adddf3+0x1ba>
   df9b0:	f104 0414 	add.w	r4, r4, #20
   df9b4:	f1c4 0220 	rsb	r2, r4, #32
   df9b8:	fa20 f004 	lsr.w	r0, r0, r4
   df9bc:	fa01 f302 	lsl.w	r3, r1, r2
   df9c0:	ea40 0003 	orr.w	r0, r0, r3
   df9c4:	fa21 f304 	lsr.w	r3, r1, r4
   df9c8:	ea45 0103 	orr.w	r1, r5, r3
   df9cc:	bd30      	pop	{r4, r5, pc}
   df9ce:	f1c4 040c 	rsb	r4, r4, #12
   df9d2:	f1c4 0220 	rsb	r2, r4, #32
   df9d6:	fa20 f002 	lsr.w	r0, r0, r2
   df9da:	fa01 f304 	lsl.w	r3, r1, r4
   df9de:	ea40 0003 	orr.w	r0, r0, r3
   df9e2:	4629      	mov	r1, r5
   df9e4:	bd30      	pop	{r4, r5, pc}
   df9e6:	fa21 f004 	lsr.w	r0, r1, r4
   df9ea:	4629      	mov	r1, r5
   df9ec:	bd30      	pop	{r4, r5, pc}
   df9ee:	f094 0f00 	teq	r4, #0
   df9f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   df9f6:	bf06      	itte	eq
   df9f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   df9fc:	3401      	addeq	r4, #1
   df9fe:	3d01      	subne	r5, #1
   dfa00:	e74e      	b.n	df8a0 <__adddf3+0x8c>
   dfa02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dfa06:	bf18      	it	ne
   dfa08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dfa0c:	d029      	beq.n	dfa62 <__adddf3+0x24e>
   dfa0e:	ea94 0f05 	teq	r4, r5
   dfa12:	bf08      	it	eq
   dfa14:	ea90 0f02 	teqeq	r0, r2
   dfa18:	d005      	beq.n	dfa26 <__adddf3+0x212>
   dfa1a:	ea54 0c00 	orrs.w	ip, r4, r0
   dfa1e:	bf04      	itt	eq
   dfa20:	4619      	moveq	r1, r3
   dfa22:	4610      	moveq	r0, r2
   dfa24:	bd30      	pop	{r4, r5, pc}
   dfa26:	ea91 0f03 	teq	r1, r3
   dfa2a:	bf1e      	ittt	ne
   dfa2c:	2100      	movne	r1, #0
   dfa2e:	2000      	movne	r0, #0
   dfa30:	bd30      	popne	{r4, r5, pc}
   dfa32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dfa36:	d105      	bne.n	dfa44 <__adddf3+0x230>
   dfa38:	0040      	lsls	r0, r0, #1
   dfa3a:	4149      	adcs	r1, r1
   dfa3c:	bf28      	it	cs
   dfa3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dfa42:	bd30      	pop	{r4, r5, pc}
   dfa44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dfa48:	bf3c      	itt	cc
   dfa4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dfa4e:	bd30      	popcc	{r4, r5, pc}
   dfa50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dfa54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dfa58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dfa5c:	f04f 0000 	mov.w	r0, #0
   dfa60:	bd30      	pop	{r4, r5, pc}
   dfa62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dfa66:	bf1a      	itte	ne
   dfa68:	4619      	movne	r1, r3
   dfa6a:	4610      	movne	r0, r2
   dfa6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dfa70:	bf1c      	itt	ne
   dfa72:	460b      	movne	r3, r1
   dfa74:	4602      	movne	r2, r0
   dfa76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dfa7a:	bf06      	itte	eq
   dfa7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dfa80:	ea91 0f03 	teqeq	r1, r3
   dfa84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dfa88:	bd30      	pop	{r4, r5, pc}
   dfa8a:	bf00      	nop

000dfa8c <__aeabi_ui2d>:
   dfa8c:	f090 0f00 	teq	r0, #0
   dfa90:	bf04      	itt	eq
   dfa92:	2100      	moveq	r1, #0
   dfa94:	4770      	bxeq	lr
   dfa96:	b530      	push	{r4, r5, lr}
   dfa98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dfa9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dfaa0:	f04f 0500 	mov.w	r5, #0
   dfaa4:	f04f 0100 	mov.w	r1, #0
   dfaa8:	e750      	b.n	df94c <__adddf3+0x138>
   dfaaa:	bf00      	nop

000dfaac <__aeabi_i2d>:
   dfaac:	f090 0f00 	teq	r0, #0
   dfab0:	bf04      	itt	eq
   dfab2:	2100      	moveq	r1, #0
   dfab4:	4770      	bxeq	lr
   dfab6:	b530      	push	{r4, r5, lr}
   dfab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dfabc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dfac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dfac4:	bf48      	it	mi
   dfac6:	4240      	negmi	r0, r0
   dfac8:	f04f 0100 	mov.w	r1, #0
   dfacc:	e73e      	b.n	df94c <__adddf3+0x138>
   dface:	bf00      	nop

000dfad0 <__aeabi_f2d>:
   dfad0:	0042      	lsls	r2, r0, #1
   dfad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dfad6:	ea4f 0131 	mov.w	r1, r1, rrx
   dfada:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dfade:	bf1f      	itttt	ne
   dfae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dfae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dfae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dfaec:	4770      	bxne	lr
   dfaee:	f092 0f00 	teq	r2, #0
   dfaf2:	bf14      	ite	ne
   dfaf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dfaf8:	4770      	bxeq	lr
   dfafa:	b530      	push	{r4, r5, lr}
   dfafc:	f44f 7460 	mov.w	r4, #896	; 0x380
   dfb00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dfb04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dfb08:	e720      	b.n	df94c <__adddf3+0x138>
   dfb0a:	bf00      	nop

000dfb0c <__aeabi_ul2d>:
   dfb0c:	ea50 0201 	orrs.w	r2, r0, r1
   dfb10:	bf08      	it	eq
   dfb12:	4770      	bxeq	lr
   dfb14:	b530      	push	{r4, r5, lr}
   dfb16:	f04f 0500 	mov.w	r5, #0
   dfb1a:	e00a      	b.n	dfb32 <__aeabi_l2d+0x16>

000dfb1c <__aeabi_l2d>:
   dfb1c:	ea50 0201 	orrs.w	r2, r0, r1
   dfb20:	bf08      	it	eq
   dfb22:	4770      	bxeq	lr
   dfb24:	b530      	push	{r4, r5, lr}
   dfb26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dfb2a:	d502      	bpl.n	dfb32 <__aeabi_l2d+0x16>
   dfb2c:	4240      	negs	r0, r0
   dfb2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dfb32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dfb36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dfb3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dfb3e:	f43f aedc 	beq.w	df8fa <__adddf3+0xe6>
   dfb42:	f04f 0203 	mov.w	r2, #3
   dfb46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dfb4a:	bf18      	it	ne
   dfb4c:	3203      	addne	r2, #3
   dfb4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dfb52:	bf18      	it	ne
   dfb54:	3203      	addne	r2, #3
   dfb56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dfb5a:	f1c2 0320 	rsb	r3, r2, #32
   dfb5e:	fa00 fc03 	lsl.w	ip, r0, r3
   dfb62:	fa20 f002 	lsr.w	r0, r0, r2
   dfb66:	fa01 fe03 	lsl.w	lr, r1, r3
   dfb6a:	ea40 000e 	orr.w	r0, r0, lr
   dfb6e:	fa21 f102 	lsr.w	r1, r1, r2
   dfb72:	4414      	add	r4, r2
   dfb74:	e6c1      	b.n	df8fa <__adddf3+0xe6>
   dfb76:	bf00      	nop

000dfb78 <__aeabi_dmul>:
   dfb78:	b570      	push	{r4, r5, r6, lr}
   dfb7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dfb7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dfb82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dfb86:	bf1d      	ittte	ne
   dfb88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dfb8c:	ea94 0f0c 	teqne	r4, ip
   dfb90:	ea95 0f0c 	teqne	r5, ip
   dfb94:	f000 f8de 	bleq	dfd54 <__aeabi_dmul+0x1dc>
   dfb98:	442c      	add	r4, r5
   dfb9a:	ea81 0603 	eor.w	r6, r1, r3
   dfb9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dfba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dfba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dfbaa:	bf18      	it	ne
   dfbac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dfbb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dfbb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dfbb8:	d038      	beq.n	dfc2c <__aeabi_dmul+0xb4>
   dfbba:	fba0 ce02 	umull	ip, lr, r0, r2
   dfbbe:	f04f 0500 	mov.w	r5, #0
   dfbc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   dfbc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dfbca:	fbe0 e503 	umlal	lr, r5, r0, r3
   dfbce:	f04f 0600 	mov.w	r6, #0
   dfbd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   dfbd6:	f09c 0f00 	teq	ip, #0
   dfbda:	bf18      	it	ne
   dfbdc:	f04e 0e01 	orrne.w	lr, lr, #1
   dfbe0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dfbe4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dfbe8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dfbec:	d204      	bcs.n	dfbf8 <__aeabi_dmul+0x80>
   dfbee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dfbf2:	416d      	adcs	r5, r5
   dfbf4:	eb46 0606 	adc.w	r6, r6, r6
   dfbf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dfbfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dfc00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dfc04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dfc08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dfc0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dfc10:	bf88      	it	hi
   dfc12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dfc16:	d81e      	bhi.n	dfc56 <__aeabi_dmul+0xde>
   dfc18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dfc1c:	bf08      	it	eq
   dfc1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dfc22:	f150 0000 	adcs.w	r0, r0, #0
   dfc26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dfc2a:	bd70      	pop	{r4, r5, r6, pc}
   dfc2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dfc30:	ea46 0101 	orr.w	r1, r6, r1
   dfc34:	ea40 0002 	orr.w	r0, r0, r2
   dfc38:	ea81 0103 	eor.w	r1, r1, r3
   dfc3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dfc40:	bfc2      	ittt	gt
   dfc42:	ebd4 050c 	rsbsgt	r5, r4, ip
   dfc46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dfc4a:	bd70      	popgt	{r4, r5, r6, pc}
   dfc4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dfc50:	f04f 0e00 	mov.w	lr, #0
   dfc54:	3c01      	subs	r4, #1
   dfc56:	f300 80ab 	bgt.w	dfdb0 <__aeabi_dmul+0x238>
   dfc5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dfc5e:	bfde      	ittt	le
   dfc60:	2000      	movle	r0, #0
   dfc62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dfc66:	bd70      	pople	{r4, r5, r6, pc}
   dfc68:	f1c4 0400 	rsb	r4, r4, #0
   dfc6c:	3c20      	subs	r4, #32
   dfc6e:	da35      	bge.n	dfcdc <__aeabi_dmul+0x164>
   dfc70:	340c      	adds	r4, #12
   dfc72:	dc1b      	bgt.n	dfcac <__aeabi_dmul+0x134>
   dfc74:	f104 0414 	add.w	r4, r4, #20
   dfc78:	f1c4 0520 	rsb	r5, r4, #32
   dfc7c:	fa00 f305 	lsl.w	r3, r0, r5
   dfc80:	fa20 f004 	lsr.w	r0, r0, r4
   dfc84:	fa01 f205 	lsl.w	r2, r1, r5
   dfc88:	ea40 0002 	orr.w	r0, r0, r2
   dfc8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dfc90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dfc94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfc98:	fa21 f604 	lsr.w	r6, r1, r4
   dfc9c:	eb42 0106 	adc.w	r1, r2, r6
   dfca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfca4:	bf08      	it	eq
   dfca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfcaa:	bd70      	pop	{r4, r5, r6, pc}
   dfcac:	f1c4 040c 	rsb	r4, r4, #12
   dfcb0:	f1c4 0520 	rsb	r5, r4, #32
   dfcb4:	fa00 f304 	lsl.w	r3, r0, r4
   dfcb8:	fa20 f005 	lsr.w	r0, r0, r5
   dfcbc:	fa01 f204 	lsl.w	r2, r1, r4
   dfcc0:	ea40 0002 	orr.w	r0, r0, r2
   dfcc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfcc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dfccc:	f141 0100 	adc.w	r1, r1, #0
   dfcd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfcd4:	bf08      	it	eq
   dfcd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfcda:	bd70      	pop	{r4, r5, r6, pc}
   dfcdc:	f1c4 0520 	rsb	r5, r4, #32
   dfce0:	fa00 f205 	lsl.w	r2, r0, r5
   dfce4:	ea4e 0e02 	orr.w	lr, lr, r2
   dfce8:	fa20 f304 	lsr.w	r3, r0, r4
   dfcec:	fa01 f205 	lsl.w	r2, r1, r5
   dfcf0:	ea43 0302 	orr.w	r3, r3, r2
   dfcf4:	fa21 f004 	lsr.w	r0, r1, r4
   dfcf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfcfc:	fa21 f204 	lsr.w	r2, r1, r4
   dfd00:	ea20 0002 	bic.w	r0, r0, r2
   dfd04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dfd08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dfd0c:	bf08      	it	eq
   dfd0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dfd12:	bd70      	pop	{r4, r5, r6, pc}
   dfd14:	f094 0f00 	teq	r4, #0
   dfd18:	d10f      	bne.n	dfd3a <__aeabi_dmul+0x1c2>
   dfd1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dfd1e:	0040      	lsls	r0, r0, #1
   dfd20:	eb41 0101 	adc.w	r1, r1, r1
   dfd24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfd28:	bf08      	it	eq
   dfd2a:	3c01      	subeq	r4, #1
   dfd2c:	d0f7      	beq.n	dfd1e <__aeabi_dmul+0x1a6>
   dfd2e:	ea41 0106 	orr.w	r1, r1, r6
   dfd32:	f095 0f00 	teq	r5, #0
   dfd36:	bf18      	it	ne
   dfd38:	4770      	bxne	lr
   dfd3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dfd3e:	0052      	lsls	r2, r2, #1
   dfd40:	eb43 0303 	adc.w	r3, r3, r3
   dfd44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dfd48:	bf08      	it	eq
   dfd4a:	3d01      	subeq	r5, #1
   dfd4c:	d0f7      	beq.n	dfd3e <__aeabi_dmul+0x1c6>
   dfd4e:	ea43 0306 	orr.w	r3, r3, r6
   dfd52:	4770      	bx	lr
   dfd54:	ea94 0f0c 	teq	r4, ip
   dfd58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dfd5c:	bf18      	it	ne
   dfd5e:	ea95 0f0c 	teqne	r5, ip
   dfd62:	d00c      	beq.n	dfd7e <__aeabi_dmul+0x206>
   dfd64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfd68:	bf18      	it	ne
   dfd6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfd6e:	d1d1      	bne.n	dfd14 <__aeabi_dmul+0x19c>
   dfd70:	ea81 0103 	eor.w	r1, r1, r3
   dfd74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfd78:	f04f 0000 	mov.w	r0, #0
   dfd7c:	bd70      	pop	{r4, r5, r6, pc}
   dfd7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dfd82:	bf06      	itte	eq
   dfd84:	4610      	moveq	r0, r2
   dfd86:	4619      	moveq	r1, r3
   dfd88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dfd8c:	d019      	beq.n	dfdc2 <__aeabi_dmul+0x24a>
   dfd8e:	ea94 0f0c 	teq	r4, ip
   dfd92:	d102      	bne.n	dfd9a <__aeabi_dmul+0x222>
   dfd94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dfd98:	d113      	bne.n	dfdc2 <__aeabi_dmul+0x24a>
   dfd9a:	ea95 0f0c 	teq	r5, ip
   dfd9e:	d105      	bne.n	dfdac <__aeabi_dmul+0x234>
   dfda0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dfda4:	bf1c      	itt	ne
   dfda6:	4610      	movne	r0, r2
   dfda8:	4619      	movne	r1, r3
   dfdaa:	d10a      	bne.n	dfdc2 <__aeabi_dmul+0x24a>
   dfdac:	ea81 0103 	eor.w	r1, r1, r3
   dfdb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dfdb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfdb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dfdbc:	f04f 0000 	mov.w	r0, #0
   dfdc0:	bd70      	pop	{r4, r5, r6, pc}
   dfdc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dfdc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dfdca:	bd70      	pop	{r4, r5, r6, pc}

000dfdcc <__aeabi_ddiv>:
   dfdcc:	b570      	push	{r4, r5, r6, lr}
   dfdce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dfdd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dfdd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dfdda:	bf1d      	ittte	ne
   dfddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dfde0:	ea94 0f0c 	teqne	r4, ip
   dfde4:	ea95 0f0c 	teqne	r5, ip
   dfde8:	f000 f8a7 	bleq	dff3a <__aeabi_ddiv+0x16e>
   dfdec:	eba4 0405 	sub.w	r4, r4, r5
   dfdf0:	ea81 0e03 	eor.w	lr, r1, r3
   dfdf4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dfdf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dfdfc:	f000 8088 	beq.w	dff10 <__aeabi_ddiv+0x144>
   dfe00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dfe04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dfe08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dfe0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dfe10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dfe14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dfe18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dfe1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dfe20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dfe24:	429d      	cmp	r5, r3
   dfe26:	bf08      	it	eq
   dfe28:	4296      	cmpeq	r6, r2
   dfe2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dfe2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dfe32:	d202      	bcs.n	dfe3a <__aeabi_ddiv+0x6e>
   dfe34:	085b      	lsrs	r3, r3, #1
   dfe36:	ea4f 0232 	mov.w	r2, r2, rrx
   dfe3a:	1ab6      	subs	r6, r6, r2
   dfe3c:	eb65 0503 	sbc.w	r5, r5, r3
   dfe40:	085b      	lsrs	r3, r3, #1
   dfe42:	ea4f 0232 	mov.w	r2, r2, rrx
   dfe46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dfe4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dfe4e:	ebb6 0e02 	subs.w	lr, r6, r2
   dfe52:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfe56:	bf22      	ittt	cs
   dfe58:	1ab6      	subcs	r6, r6, r2
   dfe5a:	4675      	movcs	r5, lr
   dfe5c:	ea40 000c 	orrcs.w	r0, r0, ip
   dfe60:	085b      	lsrs	r3, r3, #1
   dfe62:	ea4f 0232 	mov.w	r2, r2, rrx
   dfe66:	ebb6 0e02 	subs.w	lr, r6, r2
   dfe6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfe6e:	bf22      	ittt	cs
   dfe70:	1ab6      	subcs	r6, r6, r2
   dfe72:	4675      	movcs	r5, lr
   dfe74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dfe78:	085b      	lsrs	r3, r3, #1
   dfe7a:	ea4f 0232 	mov.w	r2, r2, rrx
   dfe7e:	ebb6 0e02 	subs.w	lr, r6, r2
   dfe82:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfe86:	bf22      	ittt	cs
   dfe88:	1ab6      	subcs	r6, r6, r2
   dfe8a:	4675      	movcs	r5, lr
   dfe8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dfe90:	085b      	lsrs	r3, r3, #1
   dfe92:	ea4f 0232 	mov.w	r2, r2, rrx
   dfe96:	ebb6 0e02 	subs.w	lr, r6, r2
   dfe9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dfe9e:	bf22      	ittt	cs
   dfea0:	1ab6      	subcs	r6, r6, r2
   dfea2:	4675      	movcs	r5, lr
   dfea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dfea8:	ea55 0e06 	orrs.w	lr, r5, r6
   dfeac:	d018      	beq.n	dfee0 <__aeabi_ddiv+0x114>
   dfeae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dfeb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dfeb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dfeba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dfebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dfec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dfec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dfeca:	d1c0      	bne.n	dfe4e <__aeabi_ddiv+0x82>
   dfecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfed0:	d10b      	bne.n	dfeea <__aeabi_ddiv+0x11e>
   dfed2:	ea41 0100 	orr.w	r1, r1, r0
   dfed6:	f04f 0000 	mov.w	r0, #0
   dfeda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dfede:	e7b6      	b.n	dfe4e <__aeabi_ddiv+0x82>
   dfee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfee4:	bf04      	itt	eq
   dfee6:	4301      	orreq	r1, r0
   dfee8:	2000      	moveq	r0, #0
   dfeea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dfeee:	bf88      	it	hi
   dfef0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dfef4:	f63f aeaf 	bhi.w	dfc56 <__aeabi_dmul+0xde>
   dfef8:	ebb5 0c03 	subs.w	ip, r5, r3
   dfefc:	bf04      	itt	eq
   dfefe:	ebb6 0c02 	subseq.w	ip, r6, r2
   dff02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dff06:	f150 0000 	adcs.w	r0, r0, #0
   dff0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dff0e:	bd70      	pop	{r4, r5, r6, pc}
   dff10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dff14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dff18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dff1c:	bfc2      	ittt	gt
   dff1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dff22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dff26:	bd70      	popgt	{r4, r5, r6, pc}
   dff28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dff2c:	f04f 0e00 	mov.w	lr, #0
   dff30:	3c01      	subs	r4, #1
   dff32:	e690      	b.n	dfc56 <__aeabi_dmul+0xde>
   dff34:	ea45 0e06 	orr.w	lr, r5, r6
   dff38:	e68d      	b.n	dfc56 <__aeabi_dmul+0xde>
   dff3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dff3e:	ea94 0f0c 	teq	r4, ip
   dff42:	bf08      	it	eq
   dff44:	ea95 0f0c 	teqeq	r5, ip
   dff48:	f43f af3b 	beq.w	dfdc2 <__aeabi_dmul+0x24a>
   dff4c:	ea94 0f0c 	teq	r4, ip
   dff50:	d10a      	bne.n	dff68 <__aeabi_ddiv+0x19c>
   dff52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dff56:	f47f af34 	bne.w	dfdc2 <__aeabi_dmul+0x24a>
   dff5a:	ea95 0f0c 	teq	r5, ip
   dff5e:	f47f af25 	bne.w	dfdac <__aeabi_dmul+0x234>
   dff62:	4610      	mov	r0, r2
   dff64:	4619      	mov	r1, r3
   dff66:	e72c      	b.n	dfdc2 <__aeabi_dmul+0x24a>
   dff68:	ea95 0f0c 	teq	r5, ip
   dff6c:	d106      	bne.n	dff7c <__aeabi_ddiv+0x1b0>
   dff6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dff72:	f43f aefd 	beq.w	dfd70 <__aeabi_dmul+0x1f8>
   dff76:	4610      	mov	r0, r2
   dff78:	4619      	mov	r1, r3
   dff7a:	e722      	b.n	dfdc2 <__aeabi_dmul+0x24a>
   dff7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dff80:	bf18      	it	ne
   dff82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dff86:	f47f aec5 	bne.w	dfd14 <__aeabi_dmul+0x19c>
   dff8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dff8e:	f47f af0d 	bne.w	dfdac <__aeabi_dmul+0x234>
   dff92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dff96:	f47f aeeb 	bne.w	dfd70 <__aeabi_dmul+0x1f8>
   dff9a:	e712      	b.n	dfdc2 <__aeabi_dmul+0x24a>

000dff9c <__gedf2>:
   dff9c:	f04f 3cff 	mov.w	ip, #4294967295
   dffa0:	e006      	b.n	dffb0 <__cmpdf2+0x4>
   dffa2:	bf00      	nop

000dffa4 <__ledf2>:
   dffa4:	f04f 0c01 	mov.w	ip, #1
   dffa8:	e002      	b.n	dffb0 <__cmpdf2+0x4>
   dffaa:	bf00      	nop

000dffac <__cmpdf2>:
   dffac:	f04f 0c01 	mov.w	ip, #1
   dffb0:	f84d cd04 	str.w	ip, [sp, #-4]!
   dffb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dffb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dffbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dffc0:	bf18      	it	ne
   dffc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dffc6:	d01b      	beq.n	e0000 <__cmpdf2+0x54>
   dffc8:	b001      	add	sp, #4
   dffca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dffce:	bf0c      	ite	eq
   dffd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dffd4:	ea91 0f03 	teqne	r1, r3
   dffd8:	bf02      	ittt	eq
   dffda:	ea90 0f02 	teqeq	r0, r2
   dffde:	2000      	moveq	r0, #0
   dffe0:	4770      	bxeq	lr
   dffe2:	f110 0f00 	cmn.w	r0, #0
   dffe6:	ea91 0f03 	teq	r1, r3
   dffea:	bf58      	it	pl
   dffec:	4299      	cmppl	r1, r3
   dffee:	bf08      	it	eq
   dfff0:	4290      	cmpeq	r0, r2
   dfff2:	bf2c      	ite	cs
   dfff4:	17d8      	asrcs	r0, r3, #31
   dfff6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dfffa:	f040 0001 	orr.w	r0, r0, #1
   dfffe:	4770      	bx	lr
   e0000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e0004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0008:	d102      	bne.n	e0010 <__cmpdf2+0x64>
   e000a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e000e:	d107      	bne.n	e0020 <__cmpdf2+0x74>
   e0010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e0014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0018:	d1d6      	bne.n	dffc8 <__cmpdf2+0x1c>
   e001a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e001e:	d0d3      	beq.n	dffc8 <__cmpdf2+0x1c>
   e0020:	f85d 0b04 	ldr.w	r0, [sp], #4
   e0024:	4770      	bx	lr
   e0026:	bf00      	nop

000e0028 <__aeabi_cdrcmple>:
   e0028:	4684      	mov	ip, r0
   e002a:	4610      	mov	r0, r2
   e002c:	4662      	mov	r2, ip
   e002e:	468c      	mov	ip, r1
   e0030:	4619      	mov	r1, r3
   e0032:	4663      	mov	r3, ip
   e0034:	e000      	b.n	e0038 <__aeabi_cdcmpeq>
   e0036:	bf00      	nop

000e0038 <__aeabi_cdcmpeq>:
   e0038:	b501      	push	{r0, lr}
   e003a:	f7ff ffb7 	bl	dffac <__cmpdf2>
   e003e:	2800      	cmp	r0, #0
   e0040:	bf48      	it	mi
   e0042:	f110 0f00 	cmnmi.w	r0, #0
   e0046:	bd01      	pop	{r0, pc}

000e0048 <__aeabi_dcmpeq>:
   e0048:	f84d ed08 	str.w	lr, [sp, #-8]!
   e004c:	f7ff fff4 	bl	e0038 <__aeabi_cdcmpeq>
   e0050:	bf0c      	ite	eq
   e0052:	2001      	moveq	r0, #1
   e0054:	2000      	movne	r0, #0
   e0056:	f85d fb08 	ldr.w	pc, [sp], #8
   e005a:	bf00      	nop

000e005c <__aeabi_dcmplt>:
   e005c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0060:	f7ff ffea 	bl	e0038 <__aeabi_cdcmpeq>
   e0064:	bf34      	ite	cc
   e0066:	2001      	movcc	r0, #1
   e0068:	2000      	movcs	r0, #0
   e006a:	f85d fb08 	ldr.w	pc, [sp], #8
   e006e:	bf00      	nop

000e0070 <__aeabi_dcmple>:
   e0070:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0074:	f7ff ffe0 	bl	e0038 <__aeabi_cdcmpeq>
   e0078:	bf94      	ite	ls
   e007a:	2001      	movls	r0, #1
   e007c:	2000      	movhi	r0, #0
   e007e:	f85d fb08 	ldr.w	pc, [sp], #8
   e0082:	bf00      	nop

000e0084 <__aeabi_dcmpge>:
   e0084:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0088:	f7ff ffce 	bl	e0028 <__aeabi_cdrcmple>
   e008c:	bf94      	ite	ls
   e008e:	2001      	movls	r0, #1
   e0090:	2000      	movhi	r0, #0
   e0092:	f85d fb08 	ldr.w	pc, [sp], #8
   e0096:	bf00      	nop

000e0098 <__aeabi_dcmpgt>:
   e0098:	f84d ed08 	str.w	lr, [sp, #-8]!
   e009c:	f7ff ffc4 	bl	e0028 <__aeabi_cdrcmple>
   e00a0:	bf34      	ite	cc
   e00a2:	2001      	movcc	r0, #1
   e00a4:	2000      	movcs	r0, #0
   e00a6:	f85d fb08 	ldr.w	pc, [sp], #8
   e00aa:	bf00      	nop

000e00ac <__aeabi_dcmpun>:
   e00ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e00b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e00b4:	d102      	bne.n	e00bc <__aeabi_dcmpun+0x10>
   e00b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e00ba:	d10a      	bne.n	e00d2 <__aeabi_dcmpun+0x26>
   e00bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e00c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e00c4:	d102      	bne.n	e00cc <__aeabi_dcmpun+0x20>
   e00c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e00ca:	d102      	bne.n	e00d2 <__aeabi_dcmpun+0x26>
   e00cc:	f04f 0000 	mov.w	r0, #0
   e00d0:	4770      	bx	lr
   e00d2:	f04f 0001 	mov.w	r0, #1
   e00d6:	4770      	bx	lr

000e00d8 <__aeabi_d2iz>:
   e00d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e00dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e00e0:	d215      	bcs.n	e010e <__aeabi_d2iz+0x36>
   e00e2:	d511      	bpl.n	e0108 <__aeabi_d2iz+0x30>
   e00e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e00e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e00ec:	d912      	bls.n	e0114 <__aeabi_d2iz+0x3c>
   e00ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e00f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e00f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e00fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e00fe:	fa23 f002 	lsr.w	r0, r3, r2
   e0102:	bf18      	it	ne
   e0104:	4240      	negne	r0, r0
   e0106:	4770      	bx	lr
   e0108:	f04f 0000 	mov.w	r0, #0
   e010c:	4770      	bx	lr
   e010e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e0112:	d105      	bne.n	e0120 <__aeabi_d2iz+0x48>
   e0114:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e0118:	bf08      	it	eq
   e011a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e011e:	4770      	bx	lr
   e0120:	f04f 0000 	mov.w	r0, #0
   e0124:	4770      	bx	lr
   e0126:	bf00      	nop

000e0128 <__aeabi_d2uiz>:
   e0128:	004a      	lsls	r2, r1, #1
   e012a:	d211      	bcs.n	e0150 <__aeabi_d2uiz+0x28>
   e012c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e0130:	d211      	bcs.n	e0156 <__aeabi_d2uiz+0x2e>
   e0132:	d50d      	bpl.n	e0150 <__aeabi_d2uiz+0x28>
   e0134:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e0138:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e013c:	d40e      	bmi.n	e015c <__aeabi_d2uiz+0x34>
   e013e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e0142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e0146:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e014a:	fa23 f002 	lsr.w	r0, r3, r2
   e014e:	4770      	bx	lr
   e0150:	f04f 0000 	mov.w	r0, #0
   e0154:	4770      	bx	lr
   e0156:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e015a:	d102      	bne.n	e0162 <__aeabi_d2uiz+0x3a>
   e015c:	f04f 30ff 	mov.w	r0, #4294967295
   e0160:	4770      	bx	lr
   e0162:	f04f 0000 	mov.w	r0, #0
   e0166:	4770      	bx	lr

000e0168 <__aeabi_d2f>:
   e0168:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e016c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e0170:	bf24      	itt	cs
   e0172:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e0176:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e017a:	d90d      	bls.n	e0198 <__aeabi_d2f+0x30>
   e017c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e0180:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e0184:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e0188:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e018c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e0190:	bf08      	it	eq
   e0192:	f020 0001 	biceq.w	r0, r0, #1
   e0196:	4770      	bx	lr
   e0198:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e019c:	d121      	bne.n	e01e2 <__aeabi_d2f+0x7a>
   e019e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e01a2:	bfbc      	itt	lt
   e01a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e01a8:	4770      	bxlt	lr
   e01aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e01ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e01b2:	f1c2 0218 	rsb	r2, r2, #24
   e01b6:	f1c2 0c20 	rsb	ip, r2, #32
   e01ba:	fa10 f30c 	lsls.w	r3, r0, ip
   e01be:	fa20 f002 	lsr.w	r0, r0, r2
   e01c2:	bf18      	it	ne
   e01c4:	f040 0001 	orrne.w	r0, r0, #1
   e01c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e01cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e01d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   e01d4:	ea40 000c 	orr.w	r0, r0, ip
   e01d8:	fa23 f302 	lsr.w	r3, r3, r2
   e01dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e01e0:	e7cc      	b.n	e017c <__aeabi_d2f+0x14>
   e01e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e01e6:	d107      	bne.n	e01f8 <__aeabi_d2f+0x90>
   e01e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e01ec:	bf1e      	ittt	ne
   e01ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e01f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e01f6:	4770      	bxne	lr
   e01f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e01fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e0200:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e0204:	4770      	bx	lr
   e0206:	bf00      	nop

000e0208 <asctime>:
   e0208:	4b09      	ldr	r3, [pc, #36]	; (e0230 <asctime+0x28>)
   e020a:	b570      	push	{r4, r5, r6, lr}
   e020c:	681c      	ldr	r4, [r3, #0]
   e020e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e0210:	4606      	mov	r6, r0
   e0212:	b93d      	cbnz	r5, e0224 <asctime+0x1c>
   e0214:	201a      	movs	r0, #26
   e0216:	f7f8 f86b 	bl	d82f0 <malloc>
   e021a:	221a      	movs	r2, #26
   e021c:	6420      	str	r0, [r4, #64]	; 0x40
   e021e:	4629      	mov	r1, r5
   e0220:	f000 f94f 	bl	e04c2 <memset>
   e0224:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e0226:	4630      	mov	r0, r6
   e0228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e022c:	f000 b802 	b.w	e0234 <asctime_r>
   e0230:	2003db84 	.word	0x2003db84

000e0234 <asctime_r>:
   e0234:	b510      	push	{r4, lr}
   e0236:	460c      	mov	r4, r1
   e0238:	6941      	ldr	r1, [r0, #20]
   e023a:	6903      	ldr	r3, [r0, #16]
   e023c:	6982      	ldr	r2, [r0, #24]
   e023e:	b086      	sub	sp, #24
   e0240:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e0244:	9104      	str	r1, [sp, #16]
   e0246:	6801      	ldr	r1, [r0, #0]
   e0248:	9103      	str	r1, [sp, #12]
   e024a:	6841      	ldr	r1, [r0, #4]
   e024c:	9102      	str	r1, [sp, #8]
   e024e:	6881      	ldr	r1, [r0, #8]
   e0250:	9101      	str	r1, [sp, #4]
   e0252:	68c1      	ldr	r1, [r0, #12]
   e0254:	9100      	str	r1, [sp, #0]
   e0256:	4907      	ldr	r1, [pc, #28]	; (e0274 <asctime_r+0x40>)
   e0258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e025c:	440b      	add	r3, r1
   e025e:	4906      	ldr	r1, [pc, #24]	; (e0278 <asctime_r+0x44>)
   e0260:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e0264:	440a      	add	r2, r1
   e0266:	4620      	mov	r0, r4
   e0268:	4904      	ldr	r1, [pc, #16]	; (e027c <asctime_r+0x48>)
   e026a:	f7f8 f859 	bl	d8320 <siprintf>
   e026e:	4620      	mov	r0, r4
   e0270:	b006      	add	sp, #24
   e0272:	bd10      	pop	{r4, pc}
   e0274:	000e4385 	.word	0x000e4385
   e0278:	000e4370 	.word	0x000e4370
   e027c:	000e43a9 	.word	0x000e43a9

000e0280 <atof>:
   e0280:	2100      	movs	r1, #0
   e0282:	f001 bcc1 	b.w	e1c08 <strtod>

000e0286 <atoi>:
   e0286:	220a      	movs	r2, #10
   e0288:	2100      	movs	r1, #0
   e028a:	f001 bd4b 	b.w	e1d24 <strtol>

000e028e <atol>:
   e028e:	220a      	movs	r2, #10
   e0290:	2100      	movs	r1, #0
   e0292:	f001 bd47 	b.w	e1d24 <strtol>
	...

000e0298 <__cxa_atexit>:
   e0298:	b510      	push	{r4, lr}
   e029a:	4c05      	ldr	r4, [pc, #20]	; (e02b0 <__cxa_atexit+0x18>)
   e029c:	4613      	mov	r3, r2
   e029e:	b12c      	cbz	r4, e02ac <__cxa_atexit+0x14>
   e02a0:	460a      	mov	r2, r1
   e02a2:	4601      	mov	r1, r0
   e02a4:	2002      	movs	r0, #2
   e02a6:	f3af 8000 	nop.w
   e02aa:	bd10      	pop	{r4, pc}
   e02ac:	4620      	mov	r0, r4
   e02ae:	bd10      	pop	{r4, pc}
   e02b0:	00000000 	.word	0x00000000

000e02b4 <localtime>:
   e02b4:	b538      	push	{r3, r4, r5, lr}
   e02b6:	4b07      	ldr	r3, [pc, #28]	; (e02d4 <localtime+0x20>)
   e02b8:	681c      	ldr	r4, [r3, #0]
   e02ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e02bc:	4605      	mov	r5, r0
   e02be:	b91b      	cbnz	r3, e02c8 <localtime+0x14>
   e02c0:	2024      	movs	r0, #36	; 0x24
   e02c2:	f7f8 f815 	bl	d82f0 <malloc>
   e02c6:	63e0      	str	r0, [r4, #60]	; 0x3c
   e02c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e02ca:	4628      	mov	r0, r5
   e02cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e02d0:	f000 b802 	b.w	e02d8 <localtime_r>
   e02d4:	2003db84 	.word	0x2003db84

000e02d8 <localtime_r>:
   e02d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e02dc:	460c      	mov	r4, r1
   e02de:	4680      	mov	r8, r0
   e02e0:	f002 fb64 	bl	e29ac <__gettzinfo>
   e02e4:	4621      	mov	r1, r4
   e02e6:	4607      	mov	r7, r0
   e02e8:	4640      	mov	r0, r8
   e02ea:	f002 fb63 	bl	e29b4 <gmtime_r>
   e02ee:	6946      	ldr	r6, [r0, #20]
   e02f0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e02f4:	07b3      	lsls	r3, r6, #30
   e02f6:	4604      	mov	r4, r0
   e02f8:	d105      	bne.n	e0306 <localtime_r+0x2e>
   e02fa:	2264      	movs	r2, #100	; 0x64
   e02fc:	fb96 f3f2 	sdiv	r3, r6, r2
   e0300:	fb02 6313 	mls	r3, r2, r3, r6
   e0304:	b94b      	cbnz	r3, e031a <localtime_r+0x42>
   e0306:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e030a:	fb96 f3f5 	sdiv	r3, r6, r5
   e030e:	fb05 6513 	mls	r5, r5, r3, r6
   e0312:	fab5 f385 	clz	r3, r5
   e0316:	095b      	lsrs	r3, r3, #5
   e0318:	e000      	b.n	e031c <localtime_r+0x44>
   e031a:	2301      	movs	r3, #1
   e031c:	4a5f      	ldr	r2, [pc, #380]	; (e049c <localtime_r+0x1c4>)
   e031e:	2530      	movs	r5, #48	; 0x30
   e0320:	fb05 2503 	mla	r5, r5, r3, r2
   e0324:	f001 fe54 	bl	e1fd0 <__tz_lock>
   e0328:	f001 fe54 	bl	e1fd4 <_tzset_unlocked>
   e032c:	4b5c      	ldr	r3, [pc, #368]	; (e04a0 <localtime_r+0x1c8>)
   e032e:	681b      	ldr	r3, [r3, #0]
   e0330:	b1f3      	cbz	r3, e0370 <localtime_r+0x98>
   e0332:	687b      	ldr	r3, [r7, #4]
   e0334:	429e      	cmp	r6, r3
   e0336:	d105      	bne.n	e0344 <localtime_r+0x6c>
   e0338:	6839      	ldr	r1, [r7, #0]
   e033a:	f8d8 3000 	ldr.w	r3, [r8]
   e033e:	69fa      	ldr	r2, [r7, #28]
   e0340:	b941      	cbnz	r1, e0354 <localtime_r+0x7c>
   e0342:	e00a      	b.n	e035a <localtime_r+0x82>
   e0344:	4630      	mov	r0, r6
   e0346:	f001 fd9b 	bl	e1e80 <__tzcalc_limits>
   e034a:	2800      	cmp	r0, #0
   e034c:	d1f4      	bne.n	e0338 <localtime_r+0x60>
   e034e:	f04f 33ff 	mov.w	r3, #4294967295
   e0352:	e00d      	b.n	e0370 <localtime_r+0x98>
   e0354:	4293      	cmp	r3, r2
   e0356:	db08      	blt.n	e036a <localtime_r+0x92>
   e0358:	e001      	b.n	e035e <localtime_r+0x86>
   e035a:	4293      	cmp	r3, r2
   e035c:	da07      	bge.n	e036e <localtime_r+0x96>
   e035e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e0360:	4293      	cmp	r3, r2
   e0362:	bfac      	ite	ge
   e0364:	2300      	movge	r3, #0
   e0366:	2301      	movlt	r3, #1
   e0368:	e002      	b.n	e0370 <localtime_r+0x98>
   e036a:	2300      	movs	r3, #0
   e036c:	e000      	b.n	e0370 <localtime_r+0x98>
   e036e:	2301      	movs	r3, #1
   e0370:	6223      	str	r3, [r4, #32]
   e0372:	6a23      	ldr	r3, [r4, #32]
   e0374:	2b01      	cmp	r3, #1
   e0376:	bf0c      	ite	eq
   e0378:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e037a:	6a39      	ldrne	r1, [r7, #32]
   e037c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e0380:	203c      	movs	r0, #60	; 0x3c
   e0382:	fb91 f6f3 	sdiv	r6, r1, r3
   e0386:	fb03 1316 	mls	r3, r3, r6, r1
   e038a:	6861      	ldr	r1, [r4, #4]
   e038c:	fb93 f2f0 	sdiv	r2, r3, r0
   e0390:	fb00 3012 	mls	r0, r0, r2, r3
   e0394:	6823      	ldr	r3, [r4, #0]
   e0396:	1a89      	subs	r1, r1, r2
   e0398:	68a2      	ldr	r2, [r4, #8]
   e039a:	6061      	str	r1, [r4, #4]
   e039c:	1a1b      	subs	r3, r3, r0
   e039e:	1b92      	subs	r2, r2, r6
   e03a0:	2b3b      	cmp	r3, #59	; 0x3b
   e03a2:	6023      	str	r3, [r4, #0]
   e03a4:	60a2      	str	r2, [r4, #8]
   e03a6:	dd03      	ble.n	e03b0 <localtime_r+0xd8>
   e03a8:	3101      	adds	r1, #1
   e03aa:	6061      	str	r1, [r4, #4]
   e03ac:	3b3c      	subs	r3, #60	; 0x3c
   e03ae:	e004      	b.n	e03ba <localtime_r+0xe2>
   e03b0:	2b00      	cmp	r3, #0
   e03b2:	da03      	bge.n	e03bc <localtime_r+0xe4>
   e03b4:	3901      	subs	r1, #1
   e03b6:	6061      	str	r1, [r4, #4]
   e03b8:	333c      	adds	r3, #60	; 0x3c
   e03ba:	6023      	str	r3, [r4, #0]
   e03bc:	6863      	ldr	r3, [r4, #4]
   e03be:	2b3b      	cmp	r3, #59	; 0x3b
   e03c0:	dd03      	ble.n	e03ca <localtime_r+0xf2>
   e03c2:	3201      	adds	r2, #1
   e03c4:	60a2      	str	r2, [r4, #8]
   e03c6:	3b3c      	subs	r3, #60	; 0x3c
   e03c8:	e004      	b.n	e03d4 <localtime_r+0xfc>
   e03ca:	2b00      	cmp	r3, #0
   e03cc:	da03      	bge.n	e03d6 <localtime_r+0xfe>
   e03ce:	3a01      	subs	r2, #1
   e03d0:	60a2      	str	r2, [r4, #8]
   e03d2:	333c      	adds	r3, #60	; 0x3c
   e03d4:	6063      	str	r3, [r4, #4]
   e03d6:	68a3      	ldr	r3, [r4, #8]
   e03d8:	2b17      	cmp	r3, #23
   e03da:	dd22      	ble.n	e0422 <localtime_r+0x14a>
   e03dc:	69e2      	ldr	r2, [r4, #28]
   e03de:	3201      	adds	r2, #1
   e03e0:	61e2      	str	r2, [r4, #28]
   e03e2:	69a2      	ldr	r2, [r4, #24]
   e03e4:	3201      	adds	r2, #1
   e03e6:	2a06      	cmp	r2, #6
   e03e8:	bfc8      	it	gt
   e03ea:	2200      	movgt	r2, #0
   e03ec:	61a2      	str	r2, [r4, #24]
   e03ee:	68e2      	ldr	r2, [r4, #12]
   e03f0:	3b18      	subs	r3, #24
   e03f2:	3201      	adds	r2, #1
   e03f4:	60a3      	str	r3, [r4, #8]
   e03f6:	6923      	ldr	r3, [r4, #16]
   e03f8:	60e2      	str	r2, [r4, #12]
   e03fa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e03fe:	428a      	cmp	r2, r1
   e0400:	dd46      	ble.n	e0490 <localtime_r+0x1b8>
   e0402:	3301      	adds	r3, #1
   e0404:	2b0c      	cmp	r3, #12
   e0406:	bf0c      	ite	eq
   e0408:	6963      	ldreq	r3, [r4, #20]
   e040a:	6123      	strne	r3, [r4, #16]
   e040c:	eba2 0201 	sub.w	r2, r2, r1
   e0410:	60e2      	str	r2, [r4, #12]
   e0412:	bf01      	itttt	eq
   e0414:	3301      	addeq	r3, #1
   e0416:	2200      	moveq	r2, #0
   e0418:	6122      	streq	r2, [r4, #16]
   e041a:	6163      	streq	r3, [r4, #20]
   e041c:	bf08      	it	eq
   e041e:	61e2      	streq	r2, [r4, #28]
   e0420:	e036      	b.n	e0490 <localtime_r+0x1b8>
   e0422:	2b00      	cmp	r3, #0
   e0424:	da34      	bge.n	e0490 <localtime_r+0x1b8>
   e0426:	69e2      	ldr	r2, [r4, #28]
   e0428:	3a01      	subs	r2, #1
   e042a:	61e2      	str	r2, [r4, #28]
   e042c:	69a2      	ldr	r2, [r4, #24]
   e042e:	3a01      	subs	r2, #1
   e0430:	bf48      	it	mi
   e0432:	2206      	movmi	r2, #6
   e0434:	61a2      	str	r2, [r4, #24]
   e0436:	68e2      	ldr	r2, [r4, #12]
   e0438:	3318      	adds	r3, #24
   e043a:	3a01      	subs	r2, #1
   e043c:	60e2      	str	r2, [r4, #12]
   e043e:	60a3      	str	r3, [r4, #8]
   e0440:	bb32      	cbnz	r2, e0490 <localtime_r+0x1b8>
   e0442:	6923      	ldr	r3, [r4, #16]
   e0444:	3b01      	subs	r3, #1
   e0446:	d401      	bmi.n	e044c <localtime_r+0x174>
   e0448:	6123      	str	r3, [r4, #16]
   e044a:	e01d      	b.n	e0488 <localtime_r+0x1b0>
   e044c:	230b      	movs	r3, #11
   e044e:	6123      	str	r3, [r4, #16]
   e0450:	6963      	ldr	r3, [r4, #20]
   e0452:	1e5a      	subs	r2, r3, #1
   e0454:	f012 0f03 	tst.w	r2, #3
   e0458:	6162      	str	r2, [r4, #20]
   e045a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e045e:	d105      	bne.n	e046c <localtime_r+0x194>
   e0460:	2164      	movs	r1, #100	; 0x64
   e0462:	fb93 f2f1 	sdiv	r2, r3, r1
   e0466:	fb01 3212 	mls	r2, r1, r2, r3
   e046a:	b94a      	cbnz	r2, e0480 <localtime_r+0x1a8>
   e046c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e0470:	fb93 f2f1 	sdiv	r2, r3, r1
   e0474:	fb01 3312 	mls	r3, r1, r2, r3
   e0478:	fab3 f383 	clz	r3, r3
   e047c:	095b      	lsrs	r3, r3, #5
   e047e:	e000      	b.n	e0482 <localtime_r+0x1aa>
   e0480:	2301      	movs	r3, #1
   e0482:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e0486:	61e3      	str	r3, [r4, #28]
   e0488:	6923      	ldr	r3, [r4, #16]
   e048a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e048e:	60e3      	str	r3, [r4, #12]
   e0490:	f001 fd9f 	bl	e1fd2 <__tz_unlock>
   e0494:	4620      	mov	r0, r4
   e0496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e049a:	bf00      	nop
   e049c:	000e4534 	.word	0x000e4534
   e04a0:	2003e7e4 	.word	0x2003e7e4

000e04a4 <_localeconv_r>:
   e04a4:	4800      	ldr	r0, [pc, #0]	; (e04a8 <_localeconv_r+0x4>)
   e04a6:	4770      	bx	lr
   e04a8:	2003db88 	.word	0x2003db88

000e04ac <memcpy>:
   e04ac:	b510      	push	{r4, lr}
   e04ae:	1e43      	subs	r3, r0, #1
   e04b0:	440a      	add	r2, r1
   e04b2:	4291      	cmp	r1, r2
   e04b4:	d004      	beq.n	e04c0 <memcpy+0x14>
   e04b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   e04ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   e04be:	e7f8      	b.n	e04b2 <memcpy+0x6>
   e04c0:	bd10      	pop	{r4, pc}

000e04c2 <memset>:
   e04c2:	4402      	add	r2, r0
   e04c4:	4603      	mov	r3, r0
   e04c6:	4293      	cmp	r3, r2
   e04c8:	d002      	beq.n	e04d0 <memset+0xe>
   e04ca:	f803 1b01 	strb.w	r1, [r3], #1
   e04ce:	e7fa      	b.n	e04c6 <memset+0x4>
   e04d0:	4770      	bx	lr
	...

000e04d4 <srand>:
   e04d4:	b538      	push	{r3, r4, r5, lr}
   e04d6:	4b12      	ldr	r3, [pc, #72]	; (e0520 <srand+0x4c>)
   e04d8:	681c      	ldr	r4, [r3, #0]
   e04da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e04dc:	4605      	mov	r5, r0
   e04de:	b9d3      	cbnz	r3, e0516 <srand+0x42>
   e04e0:	2018      	movs	r0, #24
   e04e2:	f7f7 ff05 	bl	d82f0 <malloc>
   e04e6:	f243 330e 	movw	r3, #13070	; 0x330e
   e04ea:	63a0      	str	r0, [r4, #56]	; 0x38
   e04ec:	8003      	strh	r3, [r0, #0]
   e04ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e04f2:	8043      	strh	r3, [r0, #2]
   e04f4:	f241 2334 	movw	r3, #4660	; 0x1234
   e04f8:	8083      	strh	r3, [r0, #4]
   e04fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e04fe:	80c3      	strh	r3, [r0, #6]
   e0500:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e0504:	8103      	strh	r3, [r0, #8]
   e0506:	2305      	movs	r3, #5
   e0508:	8143      	strh	r3, [r0, #10]
   e050a:	230b      	movs	r3, #11
   e050c:	8183      	strh	r3, [r0, #12]
   e050e:	2201      	movs	r2, #1
   e0510:	2300      	movs	r3, #0
   e0512:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e0516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e0518:	2200      	movs	r2, #0
   e051a:	611d      	str	r5, [r3, #16]
   e051c:	615a      	str	r2, [r3, #20]
   e051e:	bd38      	pop	{r3, r4, r5, pc}
   e0520:	2003db84 	.word	0x2003db84

000e0524 <strcmp>:
   e0524:	f810 2b01 	ldrb.w	r2, [r0], #1
   e0528:	f811 3b01 	ldrb.w	r3, [r1], #1
   e052c:	2a01      	cmp	r2, #1
   e052e:	bf28      	it	cs
   e0530:	429a      	cmpcs	r2, r3
   e0532:	d0f7      	beq.n	e0524 <strcmp>
   e0534:	1ad0      	subs	r0, r2, r3
   e0536:	4770      	bx	lr

000e0538 <strcpy>:
   e0538:	4603      	mov	r3, r0
   e053a:	f811 2b01 	ldrb.w	r2, [r1], #1
   e053e:	f803 2b01 	strb.w	r2, [r3], #1
   e0542:	2a00      	cmp	r2, #0
   e0544:	d1f9      	bne.n	e053a <strcpy+0x2>
   e0546:	4770      	bx	lr

000e0548 <iso_year_adjust>:
   e0548:	6941      	ldr	r1, [r0, #20]
   e054a:	078b      	lsls	r3, r1, #30
   e054c:	b510      	push	{r4, lr}
   e054e:	d10c      	bne.n	e056a <iso_year_adjust+0x22>
   e0550:	2900      	cmp	r1, #0
   e0552:	f240 736c 	movw	r3, #1900	; 0x76c
   e0556:	bfa8      	it	ge
   e0558:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e055c:	440b      	add	r3, r1
   e055e:	2464      	movs	r4, #100	; 0x64
   e0560:	fb93 f2f4 	sdiv	r2, r3, r4
   e0564:	fb04 3312 	mls	r3, r4, r2, r3
   e0568:	b983      	cbnz	r3, e058c <iso_year_adjust+0x44>
   e056a:	2900      	cmp	r1, #0
   e056c:	f240 736c 	movw	r3, #1900	; 0x76c
   e0570:	bfa8      	it	ge
   e0572:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e0576:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e057a:	440b      	add	r3, r1
   e057c:	fb93 f1f2 	sdiv	r1, r3, r2
   e0580:	fb02 3311 	mls	r3, r2, r1, r3
   e0584:	fab3 f283 	clz	r2, r3
   e0588:	0952      	lsrs	r2, r2, #5
   e058a:	e000      	b.n	e058e <iso_year_adjust+0x46>
   e058c:	2201      	movs	r2, #1
   e058e:	6983      	ldr	r3, [r0, #24]
   e0590:	69c1      	ldr	r1, [r0, #28]
   e0592:	005b      	lsls	r3, r3, #1
   e0594:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e0598:	4413      	add	r3, r2
   e059a:	2b21      	cmp	r3, #33	; 0x21
   e059c:	dc0e      	bgt.n	e05bc <iso_year_adjust+0x74>
   e059e:	2b20      	cmp	r3, #32
   e05a0:	da2f      	bge.n	e0602 <iso_year_adjust+0xba>
   e05a2:	2b0d      	cmp	r3, #13
   e05a4:	dc02      	bgt.n	e05ac <iso_year_adjust+0x64>
   e05a6:	2b0a      	cmp	r3, #10
   e05a8:	db05      	blt.n	e05b6 <iso_year_adjust+0x6e>
   e05aa:	e02a      	b.n	e0602 <iso_year_adjust+0xba>
   e05ac:	2b10      	cmp	r3, #16
   e05ae:	db26      	blt.n	e05fe <iso_year_adjust+0xb6>
   e05b0:	2b11      	cmp	r3, #17
   e05b2:	dd26      	ble.n	e0602 <iso_year_adjust+0xba>
   e05b4:	3b1c      	subs	r3, #28
   e05b6:	2b01      	cmp	r3, #1
   e05b8:	d923      	bls.n	e0602 <iso_year_adjust+0xba>
   e05ba:	e020      	b.n	e05fe <iso_year_adjust+0xb6>
   e05bc:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e05c0:	4293      	cmp	r3, r2
   e05c2:	dc0e      	bgt.n	e05e2 <iso_year_adjust+0x9a>
   e05c4:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e05c8:	4293      	cmp	r3, r2
   e05ca:	da16      	bge.n	e05fa <iso_year_adjust+0xb2>
   e05cc:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e05d0:	4293      	cmp	r3, r2
   e05d2:	d012      	beq.n	e05fa <iso_year_adjust+0xb2>
   e05d4:	db13      	blt.n	e05fe <iso_year_adjust+0xb6>
   e05d6:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e05da:	3b12      	subs	r3, #18
   e05dc:	2b02      	cmp	r3, #2
   e05de:	d90c      	bls.n	e05fa <iso_year_adjust+0xb2>
   e05e0:	e00d      	b.n	e05fe <iso_year_adjust+0xb6>
   e05e2:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e05e6:	4293      	cmp	r3, r2
   e05e8:	d007      	beq.n	e05fa <iso_year_adjust+0xb2>
   e05ea:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e05ee:	4293      	cmp	r3, r2
   e05f0:	d003      	beq.n	e05fa <iso_year_adjust+0xb2>
   e05f2:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e05f6:	4293      	cmp	r3, r2
   e05f8:	d101      	bne.n	e05fe <iso_year_adjust+0xb6>
   e05fa:	2001      	movs	r0, #1
   e05fc:	bd10      	pop	{r4, pc}
   e05fe:	2000      	movs	r0, #0
   e0600:	bd10      	pop	{r4, pc}
   e0602:	f04f 30ff 	mov.w	r0, #4294967295
   e0606:	bd10      	pop	{r4, pc}

000e0608 <strftime>:
   e0608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e060c:	b093      	sub	sp, #76	; 0x4c
   e060e:	460e      	mov	r6, r1
   e0610:	461d      	mov	r5, r3
   e0612:	4607      	mov	r7, r0
   e0614:	4691      	mov	r9, r2
   e0616:	f001 fc17 	bl	e1e48 <__get_current_time_locale>
   e061a:	2300      	movs	r3, #0
   e061c:	9306      	str	r3, [sp, #24]
   e061e:	461c      	mov	r4, r3
   e0620:	1e73      	subs	r3, r6, #1
   e0622:	9003      	str	r0, [sp, #12]
   e0624:	9302      	str	r3, [sp, #8]
   e0626:	f899 3000 	ldrb.w	r3, [r9]
   e062a:	2b00      	cmp	r3, #0
   e062c:	f000 8492 	beq.w	e0f54 <strftime+0x94c>
   e0630:	2b25      	cmp	r3, #37	; 0x25
   e0632:	d008      	beq.n	e0646 <strftime+0x3e>
   e0634:	9a02      	ldr	r2, [sp, #8]
   e0636:	4294      	cmp	r4, r2
   e0638:	f080 8490 	bcs.w	e0f5c <strftime+0x954>
   e063c:	553b      	strb	r3, [r7, r4]
   e063e:	f109 0901 	add.w	r9, r9, #1
   e0642:	3401      	adds	r4, #1
   e0644:	e7ef      	b.n	e0626 <strftime+0x1e>
   e0646:	f899 a001 	ldrb.w	sl, [r9, #1]
   e064a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e064e:	d007      	beq.n	e0660 <strftime+0x58>
   e0650:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e0654:	d004      	beq.n	e0660 <strftime+0x58>
   e0656:	f109 0901 	add.w	r9, r9, #1
   e065a:	f04f 0a00 	mov.w	sl, #0
   e065e:	e001      	b.n	e0664 <strftime+0x5c>
   e0660:	f109 0902 	add.w	r9, r9, #2
   e0664:	f899 3000 	ldrb.w	r3, [r9]
   e0668:	3b31      	subs	r3, #49	; 0x31
   e066a:	2b08      	cmp	r3, #8
   e066c:	d808      	bhi.n	e0680 <strftime+0x78>
   e066e:	4648      	mov	r0, r9
   e0670:	220a      	movs	r2, #10
   e0672:	a90a      	add	r1, sp, #40	; 0x28
   e0674:	f001 fbde 	bl	e1e34 <strtoul>
   e0678:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e067c:	4680      	mov	r8, r0
   e067e:	e001      	b.n	e0684 <strftime+0x7c>
   e0680:	f04f 0800 	mov.w	r8, #0
   e0684:	f899 3000 	ldrb.w	r3, [r9]
   e0688:	2b45      	cmp	r3, #69	; 0x45
   e068a:	d001      	beq.n	e0690 <strftime+0x88>
   e068c:	2b4f      	cmp	r3, #79	; 0x4f
   e068e:	d101      	bne.n	e0694 <strftime+0x8c>
   e0690:	f109 0901 	add.w	r9, r9, #1
   e0694:	f899 0000 	ldrb.w	r0, [r9]
   e0698:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e069c:	2b55      	cmp	r3, #85	; 0x55
   e069e:	f200 845d 	bhi.w	e0f5c <strftime+0x954>
   e06a2:	e8df f013 	tbh	[pc, r3, lsl #1]
   e06a6:	044a      	.short	0x044a
   e06a8:	045b045b 	.word	0x045b045b
   e06ac:	045b045b 	.word	0x045b045b
   e06b0:	045b045b 	.word	0x045b045b
   e06b4:	045b045b 	.word	0x045b045b
   e06b8:	045b045b 	.word	0x045b045b
   e06bc:	045b045b 	.word	0x045b045b
   e06c0:	045b045b 	.word	0x045b045b
   e06c4:	045b045b 	.word	0x045b045b
   e06c8:	045b045b 	.word	0x045b045b
   e06cc:	045b045b 	.word	0x045b045b
   e06d0:	045b045b 	.word	0x045b045b
   e06d4:	045b045b 	.word	0x045b045b
   e06d8:	045b045b 	.word	0x045b045b
   e06dc:	006f045b 	.word	0x006f045b
   e06e0:	00d400a1 	.word	0x00d400a1
   e06e4:	045b011a 	.word	0x045b011a
   e06e8:	01a0013f 	.word	0x01a0013f
   e06ec:	022d0226 	.word	0x022d0226
   e06f0:	045b045b 	.word	0x045b045b
   e06f4:	0260045b 	.word	0x0260045b
   e06f8:	045b045b 	.word	0x045b045b
   e06fc:	045b0268 	.word	0x045b0268
   e0700:	031d0297 	.word	0x031d0297
   e0704:	033b0325 	.word	0x033b0325
   e0708:	03860343 	.word	0x03860343
   e070c:	03a000c6 	.word	0x03a000c6
   e0710:	045b041f 	.word	0x045b041f
   e0714:	045b045b 	.word	0x045b045b
   e0718:	045b045b 	.word	0x045b045b
   e071c:	0056045b 	.word	0x0056045b
   e0720:	00ba0089 	.word	0x00ba0089
   e0724:	010c010c 	.word	0x010c010c
   e0728:	0171045b 	.word	0x0171045b
   e072c:	045b0089 	.word	0x045b0089
   e0730:	0226023d 	.word	0x0226023d
   e0734:	025d022d 	.word	0x025d022d
   e0738:	045b0262 	.word	0x045b0262
   e073c:	045b0268 	.word	0x045b0268
   e0740:	029c00be 	.word	0x029c00be
   e0744:	032e031f 	.word	0x032e031f
   e0748:	037f045b 	.word	0x037f045b
   e074c:	039200c2 	.word	0x039200c2
   e0750:	03e7      	.short	0x03e7
   e0752:	69ab      	ldr	r3, [r5, #24]
   e0754:	9a03      	ldr	r2, [sp, #12]
   e0756:	3318      	adds	r3, #24
   e0758:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e075c:	4640      	mov	r0, r8
   e075e:	f000 fc07 	bl	e0f70 <strlen>
   e0762:	f108 38ff 	add.w	r8, r8, #4294967295
   e0766:	193b      	adds	r3, r7, r4
   e0768:	4420      	add	r0, r4
   e076a:	4284      	cmp	r4, r0
   e076c:	f000 83eb 	beq.w	e0f46 <strftime+0x93e>
   e0770:	9a02      	ldr	r2, [sp, #8]
   e0772:	4294      	cmp	r4, r2
   e0774:	f080 83f2 	bcs.w	e0f5c <strftime+0x954>
   e0778:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e077c:	f803 2b01 	strb.w	r2, [r3], #1
   e0780:	3401      	adds	r4, #1
   e0782:	e7f2      	b.n	e076a <strftime+0x162>
   e0784:	69ab      	ldr	r3, [r5, #24]
   e0786:	9a03      	ldr	r2, [sp, #12]
   e0788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e078c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e0790:	4640      	mov	r0, r8
   e0792:	f000 fbed 	bl	e0f70 <strlen>
   e0796:	f108 38ff 	add.w	r8, r8, #4294967295
   e079a:	193b      	adds	r3, r7, r4
   e079c:	4420      	add	r0, r4
   e079e:	4284      	cmp	r4, r0
   e07a0:	f000 83d1 	beq.w	e0f46 <strftime+0x93e>
   e07a4:	9a02      	ldr	r2, [sp, #8]
   e07a6:	4294      	cmp	r4, r2
   e07a8:	f080 83d8 	bcs.w	e0f5c <strftime+0x954>
   e07ac:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e07b0:	f803 2b01 	strb.w	r2, [r3], #1
   e07b4:	3401      	adds	r4, #1
   e07b6:	e7f2      	b.n	e079e <strftime+0x196>
   e07b8:	692b      	ldr	r3, [r5, #16]
   e07ba:	9a03      	ldr	r2, [sp, #12]
   e07bc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e07c0:	4640      	mov	r0, r8
   e07c2:	f000 fbd5 	bl	e0f70 <strlen>
   e07c6:	f108 38ff 	add.w	r8, r8, #4294967295
   e07ca:	193b      	adds	r3, r7, r4
   e07cc:	4420      	add	r0, r4
   e07ce:	4284      	cmp	r4, r0
   e07d0:	f000 83b9 	beq.w	e0f46 <strftime+0x93e>
   e07d4:	9a02      	ldr	r2, [sp, #8]
   e07d6:	4294      	cmp	r4, r2
   e07d8:	f080 83c0 	bcs.w	e0f5c <strftime+0x954>
   e07dc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e07e0:	f803 2b01 	strb.w	r2, [r3], #1
   e07e4:	3401      	adds	r4, #1
   e07e6:	e7f2      	b.n	e07ce <strftime+0x1c6>
   e07e8:	692b      	ldr	r3, [r5, #16]
   e07ea:	9a03      	ldr	r2, [sp, #12]
   e07ec:	330c      	adds	r3, #12
   e07ee:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e07f2:	4640      	mov	r0, r8
   e07f4:	f000 fbbc 	bl	e0f70 <strlen>
   e07f8:	f108 38ff 	add.w	r8, r8, #4294967295
   e07fc:	193b      	adds	r3, r7, r4
   e07fe:	4420      	add	r0, r4
   e0800:	4284      	cmp	r4, r0
   e0802:	f000 83a0 	beq.w	e0f46 <strftime+0x93e>
   e0806:	9a02      	ldr	r2, [sp, #8]
   e0808:	4294      	cmp	r4, r2
   e080a:	f080 83a7 	bcs.w	e0f5c <strftime+0x954>
   e080e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e0812:	f803 2b01 	strb.w	r2, [r3], #1
   e0816:	3401      	adds	r4, #1
   e0818:	e7f2      	b.n	e0800 <strftime+0x1f8>
   e081a:	9b03      	ldr	r3, [sp, #12]
   e081c:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e0820:	e00a      	b.n	e0838 <strftime+0x230>
   e0822:	9b03      	ldr	r3, [sp, #12]
   e0824:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e0828:	e006      	b.n	e0838 <strftime+0x230>
   e082a:	9b03      	ldr	r3, [sp, #12]
   e082c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e0830:	e002      	b.n	e0838 <strftime+0x230>
   e0832:	9b03      	ldr	r3, [sp, #12]
   e0834:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e0838:	4640      	mov	r0, r8
   e083a:	f000 fb99 	bl	e0f70 <strlen>
   e083e:	f898 3000 	ldrb.w	r3, [r8]
   e0842:	2b00      	cmp	r3, #0
   e0844:	f000 837f 	beq.w	e0f46 <strftime+0x93e>
   e0848:	462b      	mov	r3, r5
   e084a:	4642      	mov	r2, r8
   e084c:	e093      	b.n	e0976 <strftime+0x36e>
   e084e:	49b6      	ldr	r1, [pc, #728]	; (e0b28 <strftime+0x520>)
   e0850:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e0854:	458b      	cmp	fp, r1
   e0856:	bfac      	ite	ge
   e0858:	2100      	movge	r1, #0
   e085a:	2101      	movlt	r1, #1
   e085c:	f1bb 0f00 	cmp.w	fp, #0
   e0860:	db04      	blt.n	e086c <strftime+0x264>
   e0862:	2064      	movs	r0, #100	; 0x64
   e0864:	fb9b f0f0 	sdiv	r0, fp, r0
   e0868:	3013      	adds	r0, #19
   e086a:	e008      	b.n	e087e <strftime+0x276>
   e086c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e0870:	9107      	str	r1, [sp, #28]
   e0872:	f001 fd35 	bl	e22e0 <abs>
   e0876:	9907      	ldr	r1, [sp, #28]
   e0878:	2364      	movs	r3, #100	; 0x64
   e087a:	fb90 f0f3 	sdiv	r0, r0, r3
   e087e:	f1ba 0f00 	cmp.w	sl, #0
   e0882:	d008      	beq.n	e0896 <strftime+0x28e>
   e0884:	2863      	cmp	r0, #99	; 0x63
   e0886:	dd09      	ble.n	e089c <strftime+0x294>
   e0888:	4ba8      	ldr	r3, [pc, #672]	; (e0b2c <strftime+0x524>)
   e088a:	4aa9      	ldr	r2, [pc, #676]	; (e0b30 <strftime+0x528>)
   e088c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e0890:	bf18      	it	ne
   e0892:	4613      	movne	r3, r2
   e0894:	e003      	b.n	e089e <strftime+0x296>
   e0896:	4ba6      	ldr	r3, [pc, #664]	; (e0b30 <strftime+0x528>)
   e0898:	4aa6      	ldr	r2, [pc, #664]	; (e0b34 <strftime+0x52c>)
   e089a:	e001      	b.n	e08a0 <strftime+0x298>
   e089c:	4ba4      	ldr	r3, [pc, #656]	; (e0b30 <strftime+0x528>)
   e089e:	4aa6      	ldr	r2, [pc, #664]	; (e0b38 <strftime+0x530>)
   e08a0:	9001      	str	r0, [sp, #4]
   e08a2:	f1b8 0f01 	cmp.w	r8, #1
   e08a6:	bf98      	it	ls
   e08a8:	f04f 0802 	movls.w	r8, #2
   e08ac:	ebc1 0108 	rsb	r1, r1, r8
   e08b0:	9100      	str	r1, [sp, #0]
   e08b2:	489d      	ldr	r0, [pc, #628]	; (e0b28 <strftime+0x520>)
   e08b4:	49a1      	ldr	r1, [pc, #644]	; (e0b3c <strftime+0x534>)
   e08b6:	4583      	cmp	fp, r0
   e08b8:	bfb8      	it	lt
   e08ba:	460b      	movlt	r3, r1
   e08bc:	e21e      	b.n	e0cfc <strftime+0x6f4>
   e08be:	4aa0      	ldr	r2, [pc, #640]	; (e0b40 <strftime+0x538>)
   e08c0:	49a0      	ldr	r1, [pc, #640]	; (e0b44 <strftime+0x53c>)
   e08c2:	68eb      	ldr	r3, [r5, #12]
   e08c4:	2864      	cmp	r0, #100	; 0x64
   e08c6:	bf08      	it	eq
   e08c8:	460a      	moveq	r2, r1
   e08ca:	1b31      	subs	r1, r6, r4
   e08cc:	1938      	adds	r0, r7, r4
   e08ce:	f7f7 fd3f 	bl	d8350 <sniprintf>
   e08d2:	2800      	cmp	r0, #0
   e08d4:	f280 8302 	bge.w	e0edc <strftime+0x8d4>
   e08d8:	e340      	b.n	e0f5c <strftime+0x954>
   e08da:	6968      	ldr	r0, [r5, #20]
   e08dc:	692b      	ldr	r3, [r5, #16]
   e08de:	2800      	cmp	r0, #0
   e08e0:	f103 0b01 	add.w	fp, r3, #1
   e08e4:	eb07 0804 	add.w	r8, r7, r4
   e08e8:	ebc4 0a06 	rsb	sl, r4, r6
   e08ec:	68eb      	ldr	r3, [r5, #12]
   e08ee:	db05      	blt.n	e08fc <strftime+0x2f4>
   e08f0:	2264      	movs	r2, #100	; 0x64
   e08f2:	fb90 f1f2 	sdiv	r1, r0, r2
   e08f6:	fb02 0011 	mls	r0, r2, r1, r0
   e08fa:	e00a      	b.n	e0912 <strftime+0x30a>
   e08fc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e0900:	9307      	str	r3, [sp, #28]
   e0902:	f001 fced 	bl	e22e0 <abs>
   e0906:	2264      	movs	r2, #100	; 0x64
   e0908:	9b07      	ldr	r3, [sp, #28]
   e090a:	fb90 f1f2 	sdiv	r1, r0, r2
   e090e:	fb01 0012 	mls	r0, r1, r2, r0
   e0912:	4a8d      	ldr	r2, [pc, #564]	; (e0b48 <strftime+0x540>)
   e0914:	9001      	str	r0, [sp, #4]
   e0916:	9300      	str	r3, [sp, #0]
   e0918:	4651      	mov	r1, sl
   e091a:	465b      	mov	r3, fp
   e091c:	4640      	mov	r0, r8
   e091e:	f7f7 fd17 	bl	d8350 <sniprintf>
   e0922:	e7d6      	b.n	e08d2 <strftime+0x2ca>
   e0924:	2325      	movs	r3, #37	; 0x25
   e0926:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e092a:	f1ba 0f00 	cmp.w	sl, #0
   e092e:	d007      	beq.n	e0940 <strftime+0x338>
   e0930:	f1b8 0f05 	cmp.w	r8, #5
   e0934:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e0938:	bf98      	it	ls
   e093a:	f04f 0806 	movls.w	r8, #6
   e093e:	e004      	b.n	e094a <strftime+0x342>
   e0940:	232b      	movs	r3, #43	; 0x2b
   e0942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e0946:	f04f 080a 	mov.w	r8, #10
   e094a:	f1b8 0306 	subs.w	r3, r8, #6
   e094e:	d102      	bne.n	e0956 <strftime+0x34e>
   e0950:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e0954:	e00a      	b.n	e096c <strftime+0x364>
   e0956:	4a7d      	ldr	r2, [pc, #500]	; (e0b4c <strftime+0x544>)
   e0958:	211e      	movs	r1, #30
   e095a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e095e:	f7f7 fcf7 	bl	d8350 <sniprintf>
   e0962:	2800      	cmp	r0, #0
   e0964:	ddf4      	ble.n	e0950 <strftime+0x348>
   e0966:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e096a:	4418      	add	r0, r3
   e096c:	4978      	ldr	r1, [pc, #480]	; (e0b50 <strftime+0x548>)
   e096e:	f7ff fde3 	bl	e0538 <strcpy>
   e0972:	462b      	mov	r3, r5
   e0974:	aa0a      	add	r2, sp, #40	; 0x28
   e0976:	1b31      	subs	r1, r6, r4
   e0978:	1938      	adds	r0, r7, r4
   e097a:	f7ff fe45 	bl	e0608 <strftime>
   e097e:	2800      	cmp	r0, #0
   e0980:	f340 82ec 	ble.w	e0f5c <strftime+0x954>
   e0984:	4404      	add	r4, r0
   e0986:	e2de      	b.n	e0f46 <strftime+0x93e>
   e0988:	4628      	mov	r0, r5
   e098a:	f7ff fddd 	bl	e0548 <iso_year_adjust>
   e098e:	4680      	mov	r8, r0
   e0990:	6968      	ldr	r0, [r5, #20]
   e0992:	2800      	cmp	r0, #0
   e0994:	db05      	blt.n	e09a2 <strftime+0x39a>
   e0996:	2264      	movs	r2, #100	; 0x64
   e0998:	fb90 f1f2 	sdiv	r1, r0, r2
   e099c:	fb02 0011 	mls	r0, r2, r1, r0
   e09a0:	e008      	b.n	e09b4 <strftime+0x3ac>
   e09a2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e09a6:	f001 fc9b 	bl	e22e0 <abs>
   e09aa:	2264      	movs	r2, #100	; 0x64
   e09ac:	fb90 f3f2 	sdiv	r3, r0, r2
   e09b0:	fb03 0012 	mls	r0, r3, r2, r0
   e09b4:	f1b8 0f00 	cmp.w	r8, #0
   e09b8:	da06      	bge.n	e09c8 <strftime+0x3c0>
   e09ba:	696a      	ldr	r2, [r5, #20]
   e09bc:	4b65      	ldr	r3, [pc, #404]	; (e0b54 <strftime+0x54c>)
   e09be:	429a      	cmp	r2, r3
   e09c0:	bfb8      	it	lt
   e09c2:	f04f 0801 	movlt.w	r8, #1
   e09c6:	e006      	b.n	e09d6 <strftime+0x3ce>
   e09c8:	d005      	beq.n	e09d6 <strftime+0x3ce>
   e09ca:	696a      	ldr	r2, [r5, #20]
   e09cc:	4b56      	ldr	r3, [pc, #344]	; (e0b28 <strftime+0x520>)
   e09ce:	429a      	cmp	r2, r3
   e09d0:	bfb8      	it	lt
   e09d2:	f04f 38ff 	movlt.w	r8, #4294967295
   e09d6:	2364      	movs	r3, #100	; 0x64
   e09d8:	4440      	add	r0, r8
   e09da:	fb90 f2f3 	sdiv	r2, r0, r3
   e09de:	fb03 0012 	mls	r0, r3, r2, r0
   e09e2:	4418      	add	r0, r3
   e09e4:	e1f9      	b.n	e0dda <strftime+0x7d2>
   e09e6:	4b50      	ldr	r3, [pc, #320]	; (e0b28 <strftime+0x520>)
   e09e8:	6969      	ldr	r1, [r5, #20]
   e09ea:	9108      	str	r1, [sp, #32]
   e09ec:	4299      	cmp	r1, r3
   e09ee:	bfac      	ite	ge
   e09f0:	2300      	movge	r3, #0
   e09f2:	2301      	movlt	r3, #1
   e09f4:	4628      	mov	r0, r5
   e09f6:	9307      	str	r3, [sp, #28]
   e09f8:	f7ff fda6 	bl	e0548 <iso_year_adjust>
   e09fc:	9908      	ldr	r1, [sp, #32]
   e09fe:	2900      	cmp	r1, #0
   e0a00:	4683      	mov	fp, r0
   e0a02:	db04      	blt.n	e0a0e <strftime+0x406>
   e0a04:	2364      	movs	r3, #100	; 0x64
   e0a06:	fb91 f3f3 	sdiv	r3, r1, r3
   e0a0a:	3313      	adds	r3, #19
   e0a0c:	e008      	b.n	e0a20 <strftime+0x418>
   e0a0e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e0a12:	9108      	str	r1, [sp, #32]
   e0a14:	f001 fc64 	bl	e22e0 <abs>
   e0a18:	9908      	ldr	r1, [sp, #32]
   e0a1a:	2364      	movs	r3, #100	; 0x64
   e0a1c:	fb90 f3f3 	sdiv	r3, r0, r3
   e0a20:	6968      	ldr	r0, [r5, #20]
   e0a22:	2800      	cmp	r0, #0
   e0a24:	db06      	blt.n	e0a34 <strftime+0x42c>
   e0a26:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e0a2a:	fb90 fcfe 	sdiv	ip, r0, lr
   e0a2e:	fb0e 001c 	mls	r0, lr, ip, r0
   e0a32:	e00d      	b.n	e0a50 <strftime+0x448>
   e0a34:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e0a38:	9109      	str	r1, [sp, #36]	; 0x24
   e0a3a:	9308      	str	r3, [sp, #32]
   e0a3c:	f001 fc50 	bl	e22e0 <abs>
   e0a40:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e0a44:	9909      	ldr	r1, [sp, #36]	; 0x24
   e0a46:	9b08      	ldr	r3, [sp, #32]
   e0a48:	fb90 fcfe 	sdiv	ip, r0, lr
   e0a4c:	fb0c 001e 	mls	r0, ip, lr, r0
   e0a50:	f1bb 0f00 	cmp.w	fp, #0
   e0a54:	da08      	bge.n	e0a68 <strftime+0x460>
   e0a56:	6969      	ldr	r1, [r5, #20]
   e0a58:	4a3e      	ldr	r2, [pc, #248]	; (e0b54 <strftime+0x54c>)
   e0a5a:	4291      	cmp	r1, r2
   e0a5c:	da0a      	bge.n	e0a74 <strftime+0x46c>
   e0a5e:	f04f 0b01 	mov.w	fp, #1
   e0a62:	f8cd b01c 	str.w	fp, [sp, #28]
   e0a66:	e005      	b.n	e0a74 <strftime+0x46c>
   e0a68:	d004      	beq.n	e0a74 <strftime+0x46c>
   e0a6a:	4a2f      	ldr	r2, [pc, #188]	; (e0b28 <strftime+0x520>)
   e0a6c:	4291      	cmp	r1, r2
   e0a6e:	bfb8      	it	lt
   e0a70:	f04f 3bff 	movlt.w	fp, #4294967295
   e0a74:	eb0b 0200 	add.w	r2, fp, r0
   e0a78:	1c50      	adds	r0, r2, #1
   e0a7a:	d102      	bne.n	e0a82 <strftime+0x47a>
   e0a7c:	3b01      	subs	r3, #1
   e0a7e:	2263      	movs	r2, #99	; 0x63
   e0a80:	e003      	b.n	e0a8a <strftime+0x482>
   e0a82:	2a64      	cmp	r2, #100	; 0x64
   e0a84:	bf04      	itt	eq
   e0a86:	3301      	addeq	r3, #1
   e0a88:	2200      	moveq	r2, #0
   e0a8a:	2064      	movs	r0, #100	; 0x64
   e0a8c:	fb00 2303 	mla	r3, r0, r3, r2
   e0a90:	9a07      	ldr	r2, [sp, #28]
   e0a92:	b142      	cbz	r2, e0aa6 <strftime+0x49e>
   e0a94:	222d      	movs	r2, #45	; 0x2d
   e0a96:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e0a9a:	f1b8 0f00 	cmp.w	r8, #0
   e0a9e:	d013      	beq.n	e0ac8 <strftime+0x4c0>
   e0aa0:	f108 38ff 	add.w	r8, r8, #4294967295
   e0aa4:	e010      	b.n	e0ac8 <strftime+0x4c0>
   e0aa6:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e0aaa:	d110      	bne.n	e0ace <strftime+0x4c6>
   e0aac:	f242 720f 	movw	r2, #9999	; 0x270f
   e0ab0:	4293      	cmp	r3, r2
   e0ab2:	d90c      	bls.n	e0ace <strftime+0x4c6>
   e0ab4:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e0ab8:	f1b8 0f00 	cmp.w	r8, #0
   e0abc:	d1f0      	bne.n	e0aa0 <strftime+0x498>
   e0abe:	aa12      	add	r2, sp, #72	; 0x48
   e0ac0:	2125      	movs	r1, #37	; 0x25
   e0ac2:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e0ac6:	e00a      	b.n	e0ade <strftime+0x4d6>
   e0ac8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e0acc:	e000      	b.n	e0ad0 <strftime+0x4c8>
   e0ace:	aa0a      	add	r2, sp, #40	; 0x28
   e0ad0:	2125      	movs	r1, #37	; 0x25
   e0ad2:	7011      	strb	r1, [r2, #0]
   e0ad4:	f1ba 0f00 	cmp.w	sl, #0
   e0ad8:	d101      	bne.n	e0ade <strftime+0x4d6>
   e0ada:	1c50      	adds	r0, r2, #1
   e0adc:	e002      	b.n	e0ae4 <strftime+0x4dc>
   e0ade:	2130      	movs	r1, #48	; 0x30
   e0ae0:	1c90      	adds	r0, r2, #2
   e0ae2:	7051      	strb	r1, [r2, #1]
   e0ae4:	491c      	ldr	r1, [pc, #112]	; (e0b58 <strftime+0x550>)
   e0ae6:	9307      	str	r3, [sp, #28]
   e0ae8:	f7ff fd26 	bl	e0538 <strcpy>
   e0aec:	9b07      	ldr	r3, [sp, #28]
   e0aee:	9300      	str	r3, [sp, #0]
   e0af0:	e1ad      	b.n	e0e4e <strftime+0x846>
   e0af2:	4a14      	ldr	r2, [pc, #80]	; (e0b44 <strftime+0x53c>)
   e0af4:	4912      	ldr	r1, [pc, #72]	; (e0b40 <strftime+0x538>)
   e0af6:	68ab      	ldr	r3, [r5, #8]
   e0af8:	286b      	cmp	r0, #107	; 0x6b
   e0afa:	bf08      	it	eq
   e0afc:	460a      	moveq	r2, r1
   e0afe:	e6e4      	b.n	e08ca <strftime+0x2c2>
   e0b00:	68a9      	ldr	r1, [r5, #8]
   e0b02:	230c      	movs	r3, #12
   e0b04:	b131      	cbz	r1, e0b14 <strftime+0x50c>
   e0b06:	4299      	cmp	r1, r3
   e0b08:	bf0e      	itee	eq
   e0b0a:	460b      	moveq	r3, r1
   e0b0c:	fb91 f2f3 	sdivne	r2, r1, r3
   e0b10:	fb03 1312 	mlsne	r3, r3, r2, r1
   e0b14:	4a0a      	ldr	r2, [pc, #40]	; (e0b40 <strftime+0x538>)
   e0b16:	490b      	ldr	r1, [pc, #44]	; (e0b44 <strftime+0x53c>)
   e0b18:	2849      	cmp	r0, #73	; 0x49
   e0b1a:	bf08      	it	eq
   e0b1c:	460a      	moveq	r2, r1
   e0b1e:	e6d4      	b.n	e08ca <strftime+0x2c2>
   e0b20:	69eb      	ldr	r3, [r5, #28]
   e0b22:	4a0e      	ldr	r2, [pc, #56]	; (e0b5c <strftime+0x554>)
   e0b24:	3301      	adds	r3, #1
   e0b26:	e6d0      	b.n	e08ca <strftime+0x2c2>
   e0b28:	fffff894 	.word	0xfffff894
   e0b2c:	000e45a3 	.word	0x000e45a3
   e0b30:	000e3de9 	.word	0x000e3de9
   e0b34:	000e4594 	.word	0x000e4594
   e0b38:	000e459b 	.word	0x000e459b
   e0b3c:	000e3690 	.word	0x000e3690
   e0b40:	000e45a5 	.word	0x000e45a5
   e0b44:	000e45b3 	.word	0x000e45b3
   e0b48:	000e45a9 	.word	0x000e45a9
   e0b4c:	000e45b8 	.word	0x000e45b8
   e0b50:	000e45bc 	.word	0x000e45bc
   e0b54:	fffff895 	.word	0xfffff895
   e0b58:	000e45c4 	.word	0x000e45c4
   e0b5c:	000e45c8 	.word	0x000e45c8
   e0b60:	692b      	ldr	r3, [r5, #16]
   e0b62:	3301      	adds	r3, #1
   e0b64:	e13d      	b.n	e0de2 <strftime+0x7da>
   e0b66:	686b      	ldr	r3, [r5, #4]
   e0b68:	e13b      	b.n	e0de2 <strftime+0x7da>
   e0b6a:	9b02      	ldr	r3, [sp, #8]
   e0b6c:	429c      	cmp	r4, r3
   e0b6e:	f080 81f5 	bcs.w	e0f5c <strftime+0x954>
   e0b72:	230a      	movs	r3, #10
   e0b74:	e1e5      	b.n	e0f42 <strftime+0x93a>
   e0b76:	68ab      	ldr	r3, [r5, #8]
   e0b78:	9a03      	ldr	r2, [sp, #12]
   e0b7a:	2b0b      	cmp	r3, #11
   e0b7c:	bfcc      	ite	gt
   e0b7e:	23a4      	movgt	r3, #164	; 0xa4
   e0b80:	23a0      	movle	r3, #160	; 0xa0
   e0b82:	4413      	add	r3, r2
   e0b84:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e0b88:	4640      	mov	r0, r8
   e0b8a:	f000 f9f1 	bl	e0f70 <strlen>
   e0b8e:	4bb2      	ldr	r3, [pc, #712]	; (e0e58 <strftime+0x850>)
   e0b90:	f8d3 e000 	ldr.w	lr, [r3]
   e0b94:	1939      	adds	r1, r7, r4
   e0b96:	4642      	mov	r2, r8
   e0b98:	4420      	add	r0, r4
   e0b9a:	4284      	cmp	r4, r0
   e0b9c:	f000 81d3 	beq.w	e0f46 <strftime+0x93e>
   e0ba0:	9b02      	ldr	r3, [sp, #8]
   e0ba2:	429c      	cmp	r4, r3
   e0ba4:	f080 81da 	bcs.w	e0f5c <strftime+0x954>
   e0ba8:	f899 3000 	ldrb.w	r3, [r9]
   e0bac:	2b50      	cmp	r3, #80	; 0x50
   e0bae:	f104 0401 	add.w	r4, r4, #1
   e0bb2:	7813      	ldrb	r3, [r2, #0]
   e0bb4:	d10a      	bne.n	e0bcc <strftime+0x5c4>
   e0bb6:	eb0e 0c03 	add.w	ip, lr, r3
   e0bba:	f89c c001 	ldrb.w	ip, [ip, #1]
   e0bbe:	f00c 0c03 	and.w	ip, ip, #3
   e0bc2:	f1bc 0f01 	cmp.w	ip, #1
   e0bc6:	bf08      	it	eq
   e0bc8:	3320      	addeq	r3, #32
   e0bca:	b2db      	uxtb	r3, r3
   e0bcc:	f801 3b01 	strb.w	r3, [r1], #1
   e0bd0:	3201      	adds	r2, #1
   e0bd2:	e7e2      	b.n	e0b9a <strftime+0x592>
   e0bd4:	686b      	ldr	r3, [r5, #4]
   e0bd6:	9300      	str	r3, [sp, #0]
   e0bd8:	4aa0      	ldr	r2, [pc, #640]	; (e0e5c <strftime+0x854>)
   e0bda:	68ab      	ldr	r3, [r5, #8]
   e0bdc:	e139      	b.n	e0e52 <strftime+0x84a>
   e0bde:	6a2b      	ldr	r3, [r5, #32]
   e0be0:	2b00      	cmp	r3, #0
   e0be2:	db17      	blt.n	e0c14 <strftime+0x60c>
   e0be4:	f001 f9f4 	bl	e1fd0 <__tz_lock>
   e0be8:	9b06      	ldr	r3, [sp, #24]
   e0bea:	b91b      	cbnz	r3, e0bf4 <strftime+0x5ec>
   e0bec:	f001 f9f2 	bl	e1fd4 <_tzset_unlocked>
   e0bf0:	2301      	movs	r3, #1
   e0bf2:	9306      	str	r3, [sp, #24]
   e0bf4:	f001 feda 	bl	e29ac <__gettzinfo>
   e0bf8:	6a2b      	ldr	r3, [r5, #32]
   e0bfa:	2b00      	cmp	r3, #0
   e0bfc:	bfd4      	ite	le
   e0bfe:	2300      	movle	r3, #0
   e0c00:	2301      	movgt	r3, #1
   e0c02:	221c      	movs	r2, #28
   e0c04:	fb02 0003 	mla	r0, r2, r3, r0
   e0c08:	6a03      	ldr	r3, [r0, #32]
   e0c0a:	f1c3 0800 	rsb	r8, r3, #0
   e0c0e:	f001 f9e0 	bl	e1fd2 <__tz_unlock>
   e0c12:	e001      	b.n	e0c18 <strftime+0x610>
   e0c14:	f04f 0800 	mov.w	r8, #0
   e0c18:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e0c1c:	4670      	mov	r0, lr
   e0c1e:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e0c22:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e0c26:	f141 33ff 	adc.w	r3, r1, #4294967295
   e0c2a:	2a00      	cmp	r2, #0
   e0c2c:	f173 0b00 	sbcs.w	fp, r3, #0
   e0c30:	ebc4 0c06 	rsb	ip, r4, r6
   e0c34:	eb07 0a04 	add.w	sl, r7, r4
   e0c38:	da03      	bge.n	e0c42 <strftime+0x63a>
   e0c3a:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e0c3e:	f141 33ff 	adc.w	r3, r1, #4294967295
   e0c42:	0891      	lsrs	r1, r2, #2
   e0c44:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e0c48:	109b      	asrs	r3, r3, #2
   e0c4a:	9104      	str	r1, [sp, #16]
   e0c4c:	9305      	str	r3, [sp, #20]
   e0c4e:	f10e 31ff 	add.w	r1, lr, #4294967295
   e0c52:	2364      	movs	r3, #100	; 0x64
   e0c54:	fb91 f1f3 	sdiv	r1, r1, r3
   e0c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e0c5c:	1a52      	subs	r2, r2, r1
   e0c5e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e0c62:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e0c66:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e0c6a:	fb90 f1f1 	sdiv	r1, r0, r1
   e0c6e:	1852      	adds	r2, r2, r1
   e0c70:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e0c74:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e0c78:	f240 116d 	movw	r1, #365	; 0x16d
   e0c7c:	fb01 fe0e 	mul.w	lr, r1, lr
   e0c80:	69e9      	ldr	r1, [r5, #28]
   e0c82:	eb12 020e 	adds.w	r2, r2, lr
   e0c86:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e0c8a:	1852      	adds	r2, r2, r1
   e0c8c:	f04f 0e18 	mov.w	lr, #24
   e0c90:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e0c94:	fba2 010e 	umull	r0, r1, r2, lr
   e0c98:	fb0e 1103 	mla	r1, lr, r3, r1
   e0c9c:	68ab      	ldr	r3, [r5, #8]
   e0c9e:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e0ca2:	18c0      	adds	r0, r0, r3
   e0ca4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e0ca8:	fba0 230e 	umull	r2, r3, r0, lr
   e0cac:	fb0e 3301 	mla	r3, lr, r1, r3
   e0cb0:	6869      	ldr	r1, [r5, #4]
   e0cb2:	1852      	adds	r2, r2, r1
   e0cb4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e0cb8:	fba2 010e 	umull	r0, r1, r2, lr
   e0cbc:	fb0e 1103 	mla	r1, lr, r3, r1
   e0cc0:	682b      	ldr	r3, [r5, #0]
   e0cc2:	4a67      	ldr	r2, [pc, #412]	; (e0e60 <strftime+0x858>)
   e0cc4:	18c0      	adds	r0, r0, r3
   e0cc6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e0cca:	ebb0 0008 	subs.w	r0, r0, r8
   e0cce:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e0cd2:	e9cd 0100 	strd	r0, r1, [sp]
   e0cd6:	4661      	mov	r1, ip
   e0cd8:	4650      	mov	r0, sl
   e0cda:	f7f7 fb39 	bl	d8350 <sniprintf>
   e0cde:	e5f8      	b.n	e08d2 <strftime+0x2ca>
   e0ce0:	682b      	ldr	r3, [r5, #0]
   e0ce2:	e07e      	b.n	e0de2 <strftime+0x7da>
   e0ce4:	9b02      	ldr	r3, [sp, #8]
   e0ce6:	429c      	cmp	r4, r3
   e0ce8:	f080 8138 	bcs.w	e0f5c <strftime+0x954>
   e0cec:	2309      	movs	r3, #9
   e0cee:	e128      	b.n	e0f42 <strftime+0x93a>
   e0cf0:	682b      	ldr	r3, [r5, #0]
   e0cf2:	9301      	str	r3, [sp, #4]
   e0cf4:	686b      	ldr	r3, [r5, #4]
   e0cf6:	9300      	str	r3, [sp, #0]
   e0cf8:	4a5a      	ldr	r2, [pc, #360]	; (e0e64 <strftime+0x85c>)
   e0cfa:	68ab      	ldr	r3, [r5, #8]
   e0cfc:	1b31      	subs	r1, r6, r4
   e0cfe:	1938      	adds	r0, r7, r4
   e0d00:	e60d      	b.n	e091e <strftime+0x316>
   e0d02:	9b02      	ldr	r3, [sp, #8]
   e0d04:	429c      	cmp	r4, r3
   e0d06:	f080 8129 	bcs.w	e0f5c <strftime+0x954>
   e0d0a:	69ab      	ldr	r3, [r5, #24]
   e0d0c:	1c62      	adds	r2, r4, #1
   e0d0e:	b90b      	cbnz	r3, e0d14 <strftime+0x70c>
   e0d10:	2337      	movs	r3, #55	; 0x37
   e0d12:	e000      	b.n	e0d16 <strftime+0x70e>
   e0d14:	3330      	adds	r3, #48	; 0x30
   e0d16:	553b      	strb	r3, [r7, r4]
   e0d18:	4614      	mov	r4, r2
   e0d1a:	e114      	b.n	e0f46 <strftime+0x93e>
   e0d1c:	69eb      	ldr	r3, [r5, #28]
   e0d1e:	69aa      	ldr	r2, [r5, #24]
   e0d20:	3307      	adds	r3, #7
   e0d22:	1a9b      	subs	r3, r3, r2
   e0d24:	2207      	movs	r2, #7
   e0d26:	fb93 f3f2 	sdiv	r3, r3, r2
   e0d2a:	e05a      	b.n	e0de2 <strftime+0x7da>
   e0d2c:	4628      	mov	r0, r5
   e0d2e:	f7ff fc0b 	bl	e0548 <iso_year_adjust>
   e0d32:	69aa      	ldr	r2, [r5, #24]
   e0d34:	b10a      	cbz	r2, e0d3a <strftime+0x732>
   e0d36:	1e53      	subs	r3, r2, #1
   e0d38:	e000      	b.n	e0d3c <strftime+0x734>
   e0d3a:	2306      	movs	r3, #6
   e0d3c:	2800      	cmp	r0, #0
   e0d3e:	dc2f      	bgt.n	e0da0 <strftime+0x798>
   e0d40:	69ea      	ldr	r2, [r5, #28]
   e0d42:	d101      	bne.n	e0d48 <strftime+0x740>
   e0d44:	320a      	adds	r2, #10
   e0d46:	e03b      	b.n	e0dc0 <strftime+0x7b8>
   e0d48:	1a9a      	subs	r2, r3, r2
   e0d4a:	696b      	ldr	r3, [r5, #20]
   e0d4c:	f240 716b 	movw	r1, #1899	; 0x76b
   e0d50:	2b00      	cmp	r3, #0
   e0d52:	bfb4      	ite	lt
   e0d54:	4608      	movlt	r0, r1
   e0d56:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e0d5a:	4418      	add	r0, r3
   e0d5c:	0781      	lsls	r1, r0, #30
   e0d5e:	d107      	bne.n	e0d70 <strftime+0x768>
   e0d60:	4601      	mov	r1, r0
   e0d62:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e0d66:	fb90 f0fe 	sdiv	r0, r0, lr
   e0d6a:	fb0e 1110 	mls	r1, lr, r0, r1
   e0d6e:	b981      	cbnz	r1, e0d92 <strftime+0x78a>
   e0d70:	2b00      	cmp	r3, #0
   e0d72:	f240 716b 	movw	r1, #1899	; 0x76b
   e0d76:	bfa8      	it	ge
   e0d78:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e0d7c:	4419      	add	r1, r3
   e0d7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e0d82:	fb91 f0f3 	sdiv	r0, r1, r3
   e0d86:	fb03 1110 	mls	r1, r3, r0, r1
   e0d8a:	fab1 f181 	clz	r1, r1
   e0d8e:	0949      	lsrs	r1, r1, #5
   e0d90:	e000      	b.n	e0d94 <strftime+0x78c>
   e0d92:	2101      	movs	r1, #1
   e0d94:	1a52      	subs	r2, r2, r1
   e0d96:	2a05      	cmp	r2, #5
   e0d98:	bfb4      	ite	lt
   e0d9a:	2335      	movlt	r3, #53	; 0x35
   e0d9c:	2334      	movge	r3, #52	; 0x34
   e0d9e:	e020      	b.n	e0de2 <strftime+0x7da>
   e0da0:	2301      	movs	r3, #1
   e0da2:	e01e      	b.n	e0de2 <strftime+0x7da>
   e0da4:	9b02      	ldr	r3, [sp, #8]
   e0da6:	429c      	cmp	r4, r3
   e0da8:	f080 80d8 	bcs.w	e0f5c <strftime+0x954>
   e0dac:	69ab      	ldr	r3, [r5, #24]
   e0dae:	3330      	adds	r3, #48	; 0x30
   e0db0:	e0c7      	b.n	e0f42 <strftime+0x93a>
   e0db2:	69aa      	ldr	r2, [r5, #24]
   e0db4:	b10a      	cbz	r2, e0dba <strftime+0x7b2>
   e0db6:	1e53      	subs	r3, r2, #1
   e0db8:	e000      	b.n	e0dbc <strftime+0x7b4>
   e0dba:	2306      	movs	r3, #6
   e0dbc:	69ea      	ldr	r2, [r5, #28]
   e0dbe:	3207      	adds	r2, #7
   e0dc0:	1ad2      	subs	r2, r2, r3
   e0dc2:	2307      	movs	r3, #7
   e0dc4:	fb92 f3f3 	sdiv	r3, r2, r3
   e0dc8:	e00b      	b.n	e0de2 <strftime+0x7da>
   e0dca:	6968      	ldr	r0, [r5, #20]
   e0dcc:	2800      	cmp	r0, #0
   e0dce:	da03      	bge.n	e0dd8 <strftime+0x7d0>
   e0dd0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e0dd4:	f001 fa84 	bl	e22e0 <abs>
   e0dd8:	2364      	movs	r3, #100	; 0x64
   e0dda:	fb90 f2f3 	sdiv	r2, r0, r3
   e0dde:	fb02 0313 	mls	r3, r2, r3, r0
   e0de2:	4a21      	ldr	r2, [pc, #132]	; (e0e68 <strftime+0x860>)
   e0de4:	e571      	b.n	e08ca <strftime+0x2c2>
   e0de6:	696b      	ldr	r3, [r5, #20]
   e0de8:	4a20      	ldr	r2, [pc, #128]	; (e0e6c <strftime+0x864>)
   e0dea:	4293      	cmp	r3, r2
   e0dec:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e0df0:	da05      	bge.n	e0dfe <strftime+0x7f6>
   e0df2:	232d      	movs	r3, #45	; 0x2d
   e0df4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e0df8:	f1cb 0b00 	rsb	fp, fp, #0
   e0dfc:	e008      	b.n	e0e10 <strftime+0x808>
   e0dfe:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e0e02:	d10d      	bne.n	e0e20 <strftime+0x818>
   e0e04:	f242 730f 	movw	r3, #9999	; 0x270f
   e0e08:	459b      	cmp	fp, r3
   e0e0a:	d911      	bls.n	e0e30 <strftime+0x828>
   e0e0c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e0e10:	f1b8 0f00 	cmp.w	r8, #0
   e0e14:	d001      	beq.n	e0e1a <strftime+0x812>
   e0e16:	f108 38ff 	add.w	r8, r8, #4294967295
   e0e1a:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e0e1e:	e000      	b.n	e0e22 <strftime+0x81a>
   e0e20:	ab0a      	add	r3, sp, #40	; 0x28
   e0e22:	2225      	movs	r2, #37	; 0x25
   e0e24:	701a      	strb	r2, [r3, #0]
   e0e26:	f1ba 0f00 	cmp.w	sl, #0
   e0e2a:	d108      	bne.n	e0e3e <strftime+0x836>
   e0e2c:	1c58      	adds	r0, r3, #1
   e0e2e:	e009      	b.n	e0e44 <strftime+0x83c>
   e0e30:	f1b8 0f00 	cmp.w	r8, #0
   e0e34:	d1f4      	bne.n	e0e20 <strftime+0x818>
   e0e36:	2325      	movs	r3, #37	; 0x25
   e0e38:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e0e3c:	ab0a      	add	r3, sp, #40	; 0x28
   e0e3e:	2230      	movs	r2, #48	; 0x30
   e0e40:	1c98      	adds	r0, r3, #2
   e0e42:	705a      	strb	r2, [r3, #1]
   e0e44:	490a      	ldr	r1, [pc, #40]	; (e0e70 <strftime+0x868>)
   e0e46:	f7ff fb77 	bl	e0538 <strcpy>
   e0e4a:	f8cd b000 	str.w	fp, [sp]
   e0e4e:	4643      	mov	r3, r8
   e0e50:	aa0a      	add	r2, sp, #40	; 0x28
   e0e52:	1b31      	subs	r1, r6, r4
   e0e54:	1938      	adds	r0, r7, r4
   e0e56:	e03e      	b.n	e0ed6 <strftime+0x8ce>
   e0e58:	2003db20 	.word	0x2003db20
   e0e5c:	000e45d7 	.word	0x000e45d7
   e0e60:	000e45cd 	.word	0x000e45cd
   e0e64:	000e45d2 	.word	0x000e45d2
   e0e68:	000e45b3 	.word	0x000e45b3
   e0e6c:	fffff894 	.word	0xfffff894
   e0e70:	000e45c4 	.word	0x000e45c4
   e0e74:	6a2b      	ldr	r3, [r5, #32]
   e0e76:	2b00      	cmp	r3, #0
   e0e78:	db65      	blt.n	e0f46 <strftime+0x93e>
   e0e7a:	f001 f8a9 	bl	e1fd0 <__tz_lock>
   e0e7e:	9b06      	ldr	r3, [sp, #24]
   e0e80:	b91b      	cbnz	r3, e0e8a <strftime+0x882>
   e0e82:	f001 f8a7 	bl	e1fd4 <_tzset_unlocked>
   e0e86:	2301      	movs	r3, #1
   e0e88:	9306      	str	r3, [sp, #24]
   e0e8a:	f001 fd8f 	bl	e29ac <__gettzinfo>
   e0e8e:	6a2b      	ldr	r3, [r5, #32]
   e0e90:	2b00      	cmp	r3, #0
   e0e92:	bfd4      	ite	le
   e0e94:	2300      	movle	r3, #0
   e0e96:	2301      	movgt	r3, #1
   e0e98:	221c      	movs	r2, #28
   e0e9a:	fb02 0003 	mla	r0, r2, r3, r0
   e0e9e:	eb07 0a04 	add.w	sl, r7, r4
   e0ea2:	6a03      	ldr	r3, [r0, #32]
   e0ea4:	f1c3 0800 	rsb	r8, r3, #0
   e0ea8:	f001 f893 	bl	e1fd2 <__tz_unlock>
   e0eac:	233c      	movs	r3, #60	; 0x3c
   e0eae:	fb98 f0f3 	sdiv	r0, r8, r3
   e0eb2:	9307      	str	r3, [sp, #28]
   e0eb4:	f001 fe16 	bl	e2ae4 <labs>
   e0eb8:	9b07      	ldr	r3, [sp, #28]
   e0eba:	fb90 f2f3 	sdiv	r2, r0, r3
   e0ebe:	ebc4 0b06 	rsb	fp, r4, r6
   e0ec2:	fb02 0013 	mls	r0, r2, r3, r0
   e0ec6:	4a28      	ldr	r2, [pc, #160]	; (e0f68 <strftime+0x960>)
   e0ec8:	9000      	str	r0, [sp, #0]
   e0eca:	4659      	mov	r1, fp
   e0ecc:	4650      	mov	r0, sl
   e0ece:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e0ed2:	fb98 f3f3 	sdiv	r3, r8, r3
   e0ed6:	f7f7 fa3b 	bl	d8350 <sniprintf>
   e0eda:	e4fa      	b.n	e08d2 <strftime+0x2ca>
   e0edc:	4404      	add	r4, r0
   e0ede:	42a6      	cmp	r6, r4
   e0ee0:	d831      	bhi.n	e0f46 <strftime+0x93e>
   e0ee2:	e03b      	b.n	e0f5c <strftime+0x954>
   e0ee4:	6a2b      	ldr	r3, [r5, #32]
   e0ee6:	2b00      	cmp	r3, #0
   e0ee8:	db2d      	blt.n	e0f46 <strftime+0x93e>
   e0eea:	f001 f871 	bl	e1fd0 <__tz_lock>
   e0eee:	9b06      	ldr	r3, [sp, #24]
   e0ef0:	b91b      	cbnz	r3, e0efa <strftime+0x8f2>
   e0ef2:	f001 f86f 	bl	e1fd4 <_tzset_unlocked>
   e0ef6:	2301      	movs	r3, #1
   e0ef8:	9306      	str	r3, [sp, #24]
   e0efa:	6a2b      	ldr	r3, [r5, #32]
   e0efc:	4a1b      	ldr	r2, [pc, #108]	; (e0f6c <strftime+0x964>)
   e0efe:	2b00      	cmp	r3, #0
   e0f00:	bfd4      	ite	le
   e0f02:	2300      	movle	r3, #0
   e0f04:	2301      	movgt	r3, #1
   e0f06:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e0f0a:	4640      	mov	r0, r8
   e0f0c:	f000 f830 	bl	e0f70 <strlen>
   e0f10:	f108 38ff 	add.w	r8, r8, #4294967295
   e0f14:	193b      	adds	r3, r7, r4
   e0f16:	4420      	add	r0, r4
   e0f18:	4284      	cmp	r4, r0
   e0f1a:	d00b      	beq.n	e0f34 <strftime+0x92c>
   e0f1c:	9a02      	ldr	r2, [sp, #8]
   e0f1e:	4294      	cmp	r4, r2
   e0f20:	d205      	bcs.n	e0f2e <strftime+0x926>
   e0f22:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e0f26:	f803 2b01 	strb.w	r2, [r3], #1
   e0f2a:	3401      	adds	r4, #1
   e0f2c:	e7f4      	b.n	e0f18 <strftime+0x910>
   e0f2e:	f001 f850 	bl	e1fd2 <__tz_unlock>
   e0f32:	e013      	b.n	e0f5c <strftime+0x954>
   e0f34:	f001 f84d 	bl	e1fd2 <__tz_unlock>
   e0f38:	e005      	b.n	e0f46 <strftime+0x93e>
   e0f3a:	9b02      	ldr	r3, [sp, #8]
   e0f3c:	429c      	cmp	r4, r3
   e0f3e:	d20d      	bcs.n	e0f5c <strftime+0x954>
   e0f40:	2325      	movs	r3, #37	; 0x25
   e0f42:	553b      	strb	r3, [r7, r4]
   e0f44:	3401      	adds	r4, #1
   e0f46:	f899 3000 	ldrb.w	r3, [r9]
   e0f4a:	b11b      	cbz	r3, e0f54 <strftime+0x94c>
   e0f4c:	f109 0901 	add.w	r9, r9, #1
   e0f50:	f7ff bb69 	b.w	e0626 <strftime+0x1e>
   e0f54:	b126      	cbz	r6, e0f60 <strftime+0x958>
   e0f56:	2300      	movs	r3, #0
   e0f58:	553b      	strb	r3, [r7, r4]
   e0f5a:	e001      	b.n	e0f60 <strftime+0x958>
   e0f5c:	2000      	movs	r0, #0
   e0f5e:	e000      	b.n	e0f62 <strftime+0x95a>
   e0f60:	4620      	mov	r0, r4
   e0f62:	b013      	add	sp, #76	; 0x4c
   e0f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f68:	000e45e1 	.word	0x000e45e1
   e0f6c:	2003dbc0 	.word	0x2003dbc0

000e0f70 <strlen>:
   e0f70:	4603      	mov	r3, r0
   e0f72:	f813 2b01 	ldrb.w	r2, [r3], #1
   e0f76:	2a00      	cmp	r2, #0
   e0f78:	d1fb      	bne.n	e0f72 <strlen+0x2>
   e0f7a:	1a18      	subs	r0, r3, r0
   e0f7c:	3801      	subs	r0, #1
   e0f7e:	4770      	bx	lr

000e0f80 <strncmp>:
   e0f80:	b530      	push	{r4, r5, lr}
   e0f82:	b182      	cbz	r2, e0fa6 <strncmp+0x26>
   e0f84:	1e45      	subs	r5, r0, #1
   e0f86:	3901      	subs	r1, #1
   e0f88:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e0f8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e0f90:	42a3      	cmp	r3, r4
   e0f92:	d106      	bne.n	e0fa2 <strncmp+0x22>
   e0f94:	43ec      	mvns	r4, r5
   e0f96:	4414      	add	r4, r2
   e0f98:	42e0      	cmn	r0, r4
   e0f9a:	d001      	beq.n	e0fa0 <strncmp+0x20>
   e0f9c:	2b00      	cmp	r3, #0
   e0f9e:	d1f3      	bne.n	e0f88 <strncmp+0x8>
   e0fa0:	461c      	mov	r4, r3
   e0fa2:	1b18      	subs	r0, r3, r4
   e0fa4:	bd30      	pop	{r4, r5, pc}
   e0fa6:	4610      	mov	r0, r2
   e0fa8:	bd30      	pop	{r4, r5, pc}

000e0faa <strncpy>:
   e0faa:	b510      	push	{r4, lr}
   e0fac:	4603      	mov	r3, r0
   e0fae:	b142      	cbz	r2, e0fc2 <strncpy+0x18>
   e0fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
   e0fb4:	f803 4b01 	strb.w	r4, [r3], #1
   e0fb8:	3a01      	subs	r2, #1
   e0fba:	2c00      	cmp	r4, #0
   e0fbc:	d1f7      	bne.n	e0fae <strncpy+0x4>
   e0fbe:	441a      	add	r2, r3
   e0fc0:	e000      	b.n	e0fc4 <strncpy+0x1a>
   e0fc2:	bd10      	pop	{r4, pc}
   e0fc4:	4293      	cmp	r3, r2
   e0fc6:	d002      	beq.n	e0fce <strncpy+0x24>
   e0fc8:	f803 4b01 	strb.w	r4, [r3], #1
   e0fcc:	e7fa      	b.n	e0fc4 <strncpy+0x1a>
   e0fce:	bd10      	pop	{r4, pc}

000e0fd0 <sulp>:
   e0fd0:	b570      	push	{r4, r5, r6, lr}
   e0fd2:	4604      	mov	r4, r0
   e0fd4:	460d      	mov	r5, r1
   e0fd6:	ec45 4b10 	vmov	d0, r4, r5
   e0fda:	4616      	mov	r6, r2
   e0fdc:	f002 f84c 	bl	e3078 <__ulp>
   e0fe0:	ec51 0b10 	vmov	r0, r1, d0
   e0fe4:	b17e      	cbz	r6, e1006 <sulp+0x36>
   e0fe6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e0fea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e0fee:	2b00      	cmp	r3, #0
   e0ff0:	dd09      	ble.n	e1006 <sulp+0x36>
   e0ff2:	051b      	lsls	r3, r3, #20
   e0ff4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e0ff8:	2400      	movs	r4, #0
   e0ffa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e0ffe:	4622      	mov	r2, r4
   e1000:	462b      	mov	r3, r5
   e1002:	f7fe fdb9 	bl	dfb78 <__aeabi_dmul>
   e1006:	bd70      	pop	{r4, r5, r6, pc}

000e1008 <_strtod_r>:
   e1008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e100c:	b09d      	sub	sp, #116	; 0x74
   e100e:	2300      	movs	r3, #0
   e1010:	9002      	str	r0, [sp, #8]
   e1012:	460c      	mov	r4, r1
   e1014:	9213      	str	r2, [sp, #76]	; 0x4c
   e1016:	9318      	str	r3, [sp, #96]	; 0x60
   e1018:	f04f 0a00 	mov.w	sl, #0
   e101c:	f04f 0b00 	mov.w	fp, #0
   e1020:	9117      	str	r1, [sp, #92]	; 0x5c
   e1022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1024:	781a      	ldrb	r2, [r3, #0]
   e1026:	2a0d      	cmp	r2, #13
   e1028:	d805      	bhi.n	e1036 <_strtod_r+0x2e>
   e102a:	2a09      	cmp	r2, #9
   e102c:	d213      	bcs.n	e1056 <_strtod_r+0x4e>
   e102e:	2a00      	cmp	r2, #0
   e1030:	f000 81ac 	beq.w	e138c <_strtod_r+0x384>
   e1034:	e012      	b.n	e105c <_strtod_r+0x54>
   e1036:	2a2b      	cmp	r2, #43	; 0x2b
   e1038:	d004      	beq.n	e1044 <_strtod_r+0x3c>
   e103a:	2a2d      	cmp	r2, #45	; 0x2d
   e103c:	d004      	beq.n	e1048 <_strtod_r+0x40>
   e103e:	2a20      	cmp	r2, #32
   e1040:	d10c      	bne.n	e105c <_strtod_r+0x54>
   e1042:	e008      	b.n	e1056 <_strtod_r+0x4e>
   e1044:	2200      	movs	r2, #0
   e1046:	e000      	b.n	e104a <_strtod_r+0x42>
   e1048:	2201      	movs	r2, #1
   e104a:	920c      	str	r2, [sp, #48]	; 0x30
   e104c:	1c5a      	adds	r2, r3, #1
   e104e:	9217      	str	r2, [sp, #92]	; 0x5c
   e1050:	785b      	ldrb	r3, [r3, #1]
   e1052:	b92b      	cbnz	r3, e1060 <_strtod_r+0x58>
   e1054:	e19a      	b.n	e138c <_strtod_r+0x384>
   e1056:	3301      	adds	r3, #1
   e1058:	9317      	str	r3, [sp, #92]	; 0x5c
   e105a:	e7e2      	b.n	e1022 <_strtod_r+0x1a>
   e105c:	2300      	movs	r3, #0
   e105e:	930c      	str	r3, [sp, #48]	; 0x30
   e1060:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e1062:	782b      	ldrb	r3, [r5, #0]
   e1064:	2b30      	cmp	r3, #48	; 0x30
   e1066:	d15c      	bne.n	e1122 <_strtod_r+0x11a>
   e1068:	786b      	ldrb	r3, [r5, #1]
   e106a:	2b58      	cmp	r3, #88	; 0x58
   e106c:	d001      	beq.n	e1072 <_strtod_r+0x6a>
   e106e:	2b78      	cmp	r3, #120	; 0x78
   e1070:	d14c      	bne.n	e110c <_strtod_r+0x104>
   e1072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1074:	9301      	str	r3, [sp, #4]
   e1076:	ab18      	add	r3, sp, #96	; 0x60
   e1078:	9300      	str	r3, [sp, #0]
   e107a:	4aa9      	ldr	r2, [pc, #676]	; (e1320 <_strtod_r+0x318>)
   e107c:	9802      	ldr	r0, [sp, #8]
   e107e:	ab19      	add	r3, sp, #100	; 0x64
   e1080:	a917      	add	r1, sp, #92	; 0x5c
   e1082:	f001 f97c 	bl	e237e <__gethex>
   e1086:	f010 0607 	ands.w	r6, r0, #7
   e108a:	4604      	mov	r4, r0
   e108c:	f000 8587 	beq.w	e1b9e <_strtod_r+0xb96>
   e1090:	2e06      	cmp	r6, #6
   e1092:	d105      	bne.n	e10a0 <_strtod_r+0x98>
   e1094:	3501      	adds	r5, #1
   e1096:	2300      	movs	r3, #0
   e1098:	9517      	str	r5, [sp, #92]	; 0x5c
   e109a:	930c      	str	r3, [sp, #48]	; 0x30
   e109c:	f000 bd7f 	b.w	e1b9e <_strtod_r+0xb96>
   e10a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e10a2:	b13a      	cbz	r2, e10b4 <_strtod_r+0xac>
   e10a4:	2135      	movs	r1, #53	; 0x35
   e10a6:	a81a      	add	r0, sp, #104	; 0x68
   e10a8:	f002 f8d3 	bl	e3252 <__copybits>
   e10ac:	9918      	ldr	r1, [sp, #96]	; 0x60
   e10ae:	9802      	ldr	r0, [sp, #8]
   e10b0:	f001 fd51 	bl	e2b56 <_Bfree>
   e10b4:	2e06      	cmp	r6, #6
   e10b6:	d822      	bhi.n	e10fe <_strtod_r+0xf6>
   e10b8:	e8df f006 	tbb	[pc, r6]
   e10bc:	18080d04 	.word	0x18080d04
   e10c0:	0d1d      	.short	0x0d1d
   e10c2:	04          	.byte	0x04
   e10c3:	00          	.byte	0x00
   e10c4:	f04f 0b00 	mov.w	fp, #0
   e10c8:	46da      	mov	sl, fp
   e10ca:	e018      	b.n	e10fe <_strtod_r+0xf6>
   e10cc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e10d0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e10d4:	e013      	b.n	e10fe <_strtod_r+0xf6>
   e10d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e10d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e10da:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e10de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e10e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e10e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e10ea:	e008      	b.n	e10fe <_strtod_r+0xf6>
   e10ec:	f8df b234 	ldr.w	fp, [pc, #564]	; e1324 <_strtod_r+0x31c>
   e10f0:	f04f 0a00 	mov.w	sl, #0
   e10f4:	e003      	b.n	e10fe <_strtod_r+0xf6>
   e10f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e10fa:	f04f 3aff 	mov.w	sl, #4294967295
   e10fe:	0721      	lsls	r1, r4, #28
   e1100:	f140 854d 	bpl.w	e1b9e <_strtod_r+0xb96>
   e1104:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e1108:	f000 bd49 	b.w	e1b9e <_strtod_r+0xb96>
   e110c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e110e:	1c5a      	adds	r2, r3, #1
   e1110:	9217      	str	r2, [sp, #92]	; 0x5c
   e1112:	785b      	ldrb	r3, [r3, #1]
   e1114:	2b30      	cmp	r3, #48	; 0x30
   e1116:	d0f9      	beq.n	e110c <_strtod_r+0x104>
   e1118:	2b00      	cmp	r3, #0
   e111a:	f000 8540 	beq.w	e1b9e <_strtod_r+0xb96>
   e111e:	2301      	movs	r3, #1
   e1120:	e000      	b.n	e1124 <_strtod_r+0x11c>
   e1122:	2300      	movs	r3, #0
   e1124:	f04f 0800 	mov.w	r8, #0
   e1128:	9306      	str	r3, [sp, #24]
   e112a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e112c:	9307      	str	r3, [sp, #28]
   e112e:	f8cd 8014 	str.w	r8, [sp, #20]
   e1132:	f8cd 8010 	str.w	r8, [sp, #16]
   e1136:	220a      	movs	r2, #10
   e1138:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e113a:	782e      	ldrb	r6, [r5, #0]
   e113c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e1140:	b2d9      	uxtb	r1, r3
   e1142:	2909      	cmp	r1, #9
   e1144:	d80e      	bhi.n	e1164 <_strtod_r+0x15c>
   e1146:	9904      	ldr	r1, [sp, #16]
   e1148:	2908      	cmp	r1, #8
   e114a:	bfdd      	ittte	le
   e114c:	9905      	ldrle	r1, [sp, #20]
   e114e:	fb02 3301 	mlale	r3, r2, r1, r3
   e1152:	9305      	strle	r3, [sp, #20]
   e1154:	fb02 3808 	mlagt	r8, r2, r8, r3
   e1158:	9b04      	ldr	r3, [sp, #16]
   e115a:	3501      	adds	r5, #1
   e115c:	3301      	adds	r3, #1
   e115e:	9304      	str	r3, [sp, #16]
   e1160:	9517      	str	r5, [sp, #92]	; 0x5c
   e1162:	e7e9      	b.n	e1138 <_strtod_r+0x130>
   e1164:	9802      	ldr	r0, [sp, #8]
   e1166:	f7ff f99d 	bl	e04a4 <_localeconv_r>
   e116a:	6807      	ldr	r7, [r0, #0]
   e116c:	9802      	ldr	r0, [sp, #8]
   e116e:	f7ff f999 	bl	e04a4 <_localeconv_r>
   e1172:	6800      	ldr	r0, [r0, #0]
   e1174:	f7ff fefc 	bl	e0f70 <strlen>
   e1178:	4639      	mov	r1, r7
   e117a:	4602      	mov	r2, r0
   e117c:	4628      	mov	r0, r5
   e117e:	f7ff feff 	bl	e0f80 <strncmp>
   e1182:	4607      	mov	r7, r0
   e1184:	b128      	cbz	r0, e1192 <_strtod_r+0x18a>
   e1186:	2000      	movs	r0, #0
   e1188:	4633      	mov	r3, r6
   e118a:	9d04      	ldr	r5, [sp, #16]
   e118c:	4602      	mov	r2, r0
   e118e:	4601      	mov	r1, r0
   e1190:	e057      	b.n	e1242 <_strtod_r+0x23a>
   e1192:	9802      	ldr	r0, [sp, #8]
   e1194:	f7ff f986 	bl	e04a4 <_localeconv_r>
   e1198:	6800      	ldr	r0, [r0, #0]
   e119a:	f7ff fee9 	bl	e0f70 <strlen>
   e119e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e11a0:	181a      	adds	r2, r3, r0
   e11a2:	9217      	str	r2, [sp, #92]	; 0x5c
   e11a4:	9a04      	ldr	r2, [sp, #16]
   e11a6:	5c1b      	ldrb	r3, [r3, r0]
   e11a8:	2a00      	cmp	r2, #0
   e11aa:	d142      	bne.n	e1232 <_strtod_r+0x22a>
   e11ac:	4610      	mov	r0, r2
   e11ae:	2b30      	cmp	r3, #48	; 0x30
   e11b0:	d105      	bne.n	e11be <_strtod_r+0x1b6>
   e11b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e11b4:	1c5a      	adds	r2, r3, #1
   e11b6:	9217      	str	r2, [sp, #92]	; 0x5c
   e11b8:	3001      	adds	r0, #1
   e11ba:	785b      	ldrb	r3, [r3, #1]
   e11bc:	e7f7      	b.n	e11ae <_strtod_r+0x1a6>
   e11be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e11c2:	2a08      	cmp	r2, #8
   e11c4:	d843      	bhi.n	e124e <_strtod_r+0x246>
   e11c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e11c8:	9207      	str	r2, [sp, #28]
   e11ca:	4602      	mov	r2, r0
   e11cc:	2000      	movs	r0, #0
   e11ce:	4605      	mov	r5, r0
   e11d0:	3b30      	subs	r3, #48	; 0x30
   e11d2:	f100 0101 	add.w	r1, r0, #1
   e11d6:	d026      	beq.n	e1226 <_strtod_r+0x21e>
   e11d8:	440a      	add	r2, r1
   e11da:	eb05 0c00 	add.w	ip, r5, r0
   e11de:	4629      	mov	r1, r5
   e11e0:	260a      	movs	r6, #10
   e11e2:	4561      	cmp	r1, ip
   e11e4:	d00e      	beq.n	e1204 <_strtod_r+0x1fc>
   e11e6:	3101      	adds	r1, #1
   e11e8:	f101 3eff 	add.w	lr, r1, #4294967295
   e11ec:	f1be 0f08 	cmp.w	lr, #8
   e11f0:	dc03      	bgt.n	e11fa <_strtod_r+0x1f2>
   e11f2:	9f05      	ldr	r7, [sp, #20]
   e11f4:	4377      	muls	r7, r6
   e11f6:	9705      	str	r7, [sp, #20]
   e11f8:	e7f3      	b.n	e11e2 <_strtod_r+0x1da>
   e11fa:	2910      	cmp	r1, #16
   e11fc:	bfd8      	it	le
   e11fe:	fb06 f808 	mulle.w	r8, r6, r8
   e1202:	e7ee      	b.n	e11e2 <_strtod_r+0x1da>
   e1204:	4428      	add	r0, r5
   e1206:	2808      	cmp	r0, #8
   e1208:	f100 0501 	add.w	r5, r0, #1
   e120c:	dc05      	bgt.n	e121a <_strtod_r+0x212>
   e120e:	9805      	ldr	r0, [sp, #20]
   e1210:	210a      	movs	r1, #10
   e1212:	fb01 3300 	mla	r3, r1, r0, r3
   e1216:	9305      	str	r3, [sp, #20]
   e1218:	e004      	b.n	e1224 <_strtod_r+0x21c>
   e121a:	2d10      	cmp	r5, #16
   e121c:	bfdc      	itt	le
   e121e:	210a      	movle	r1, #10
   e1220:	fb01 3808 	mlale	r8, r1, r8, r3
   e1224:	2100      	movs	r1, #0
   e1226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1228:	1c58      	adds	r0, r3, #1
   e122a:	9017      	str	r0, [sp, #92]	; 0x5c
   e122c:	785b      	ldrb	r3, [r3, #1]
   e122e:	4608      	mov	r0, r1
   e1230:	e002      	b.n	e1238 <_strtod_r+0x230>
   e1232:	9d04      	ldr	r5, [sp, #16]
   e1234:	4638      	mov	r0, r7
   e1236:	463a      	mov	r2, r7
   e1238:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e123c:	2909      	cmp	r1, #9
   e123e:	d9c7      	bls.n	e11d0 <_strtod_r+0x1c8>
   e1240:	2101      	movs	r1, #1
   e1242:	2b65      	cmp	r3, #101	; 0x65
   e1244:	d001      	beq.n	e124a <_strtod_r+0x242>
   e1246:	2b45      	cmp	r3, #69	; 0x45
   e1248:	d151      	bne.n	e12ee <_strtod_r+0x2e6>
   e124a:	b96d      	cbnz	r5, e1268 <_strtod_r+0x260>
   e124c:	e004      	b.n	e1258 <_strtod_r+0x250>
   e124e:	2b65      	cmp	r3, #101	; 0x65
   e1250:	f040 84b3 	bne.w	e1bba <_strtod_r+0xbb2>
   e1254:	2200      	movs	r2, #0
   e1256:	2101      	movs	r1, #1
   e1258:	b928      	cbnz	r0, e1266 <_strtod_r+0x25e>
   e125a:	9b06      	ldr	r3, [sp, #24]
   e125c:	2b00      	cmp	r3, #0
   e125e:	f000 8095 	beq.w	e138c <_strtod_r+0x384>
   e1262:	4605      	mov	r5, r0
   e1264:	e000      	b.n	e1268 <_strtod_r+0x260>
   e1266:	2500      	movs	r5, #0
   e1268:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e126a:	1c63      	adds	r3, r4, #1
   e126c:	9317      	str	r3, [sp, #92]	; 0x5c
   e126e:	7863      	ldrb	r3, [r4, #1]
   e1270:	2b2b      	cmp	r3, #43	; 0x2b
   e1272:	d006      	beq.n	e1282 <_strtod_r+0x27a>
   e1274:	2b2d      	cmp	r3, #45	; 0x2d
   e1276:	d002      	beq.n	e127e <_strtod_r+0x276>
   e1278:	2600      	movs	r6, #0
   e127a:	9603      	str	r6, [sp, #12]
   e127c:	e006      	b.n	e128c <_strtod_r+0x284>
   e127e:	2301      	movs	r3, #1
   e1280:	e000      	b.n	e1284 <_strtod_r+0x27c>
   e1282:	2300      	movs	r3, #0
   e1284:	9303      	str	r3, [sp, #12]
   e1286:	1ca3      	adds	r3, r4, #2
   e1288:	9317      	str	r3, [sp, #92]	; 0x5c
   e128a:	78a3      	ldrb	r3, [r4, #2]
   e128c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e1290:	2e09      	cmp	r6, #9
   e1292:	d82b      	bhi.n	e12ec <_strtod_r+0x2e4>
   e1294:	2b30      	cmp	r3, #48	; 0x30
   e1296:	d104      	bne.n	e12a2 <_strtod_r+0x29a>
   e1298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e129a:	1c5e      	adds	r6, r3, #1
   e129c:	9617      	str	r6, [sp, #92]	; 0x5c
   e129e:	785b      	ldrb	r3, [r3, #1]
   e12a0:	e7f8      	b.n	e1294 <_strtod_r+0x28c>
   e12a2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e12a6:	2e08      	cmp	r6, #8
   e12a8:	d821      	bhi.n	e12ee <_strtod_r+0x2e6>
   e12aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e12ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e12b0:	f04f 0c0a 	mov.w	ip, #10
   e12b4:	461f      	mov	r7, r3
   e12b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e12b8:	1c5e      	adds	r6, r3, #1
   e12ba:	9617      	str	r6, [sp, #92]	; 0x5c
   e12bc:	785b      	ldrb	r3, [r3, #1]
   e12be:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e12c2:	f1b9 0f09 	cmp.w	r9, #9
   e12c6:	d804      	bhi.n	e12d2 <_strtod_r+0x2ca>
   e12c8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e12cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e12d0:	e7f1      	b.n	e12b6 <_strtod_r+0x2ae>
   e12d2:	1bf6      	subs	r6, r6, r7
   e12d4:	2e08      	cmp	r6, #8
   e12d6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e12da:	dc02      	bgt.n	e12e2 <_strtod_r+0x2da>
   e12dc:	45f1      	cmp	r9, lr
   e12de:	bfa8      	it	ge
   e12e0:	46f1      	movge	r9, lr
   e12e2:	9e03      	ldr	r6, [sp, #12]
   e12e4:	b12e      	cbz	r6, e12f2 <_strtod_r+0x2ea>
   e12e6:	f1c9 0900 	rsb	r9, r9, #0
   e12ea:	e002      	b.n	e12f2 <_strtod_r+0x2ea>
   e12ec:	9417      	str	r4, [sp, #92]	; 0x5c
   e12ee:	f04f 0900 	mov.w	r9, #0
   e12f2:	2d00      	cmp	r5, #0
   e12f4:	d153      	bne.n	e139e <_strtod_r+0x396>
   e12f6:	2800      	cmp	r0, #0
   e12f8:	f040 8451 	bne.w	e1b9e <_strtod_r+0xb96>
   e12fc:	9a06      	ldr	r2, [sp, #24]
   e12fe:	2a00      	cmp	r2, #0
   e1300:	f040 844d 	bne.w	e1b9e <_strtod_r+0xb96>
   e1304:	2900      	cmp	r1, #0
   e1306:	d141      	bne.n	e138c <_strtod_r+0x384>
   e1308:	2b4e      	cmp	r3, #78	; 0x4e
   e130a:	d020      	beq.n	e134e <_strtod_r+0x346>
   e130c:	dc02      	bgt.n	e1314 <_strtod_r+0x30c>
   e130e:	2b49      	cmp	r3, #73	; 0x49
   e1310:	d00a      	beq.n	e1328 <_strtod_r+0x320>
   e1312:	e03b      	b.n	e138c <_strtod_r+0x384>
   e1314:	2b69      	cmp	r3, #105	; 0x69
   e1316:	d007      	beq.n	e1328 <_strtod_r+0x320>
   e1318:	2b6e      	cmp	r3, #110	; 0x6e
   e131a:	d018      	beq.n	e134e <_strtod_r+0x346>
   e131c:	e036      	b.n	e138c <_strtod_r+0x384>
   e131e:	bf00      	nop
   e1320:	000e45f0 	.word	0x000e45f0
   e1324:	7ff00000 	.word	0x7ff00000
   e1328:	49a8      	ldr	r1, [pc, #672]	; (e15cc <_strtod_r+0x5c4>)
   e132a:	a817      	add	r0, sp, #92	; 0x5c
   e132c:	f001 fa58 	bl	e27e0 <__match>
   e1330:	b360      	cbz	r0, e138c <_strtod_r+0x384>
   e1332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1334:	49a6      	ldr	r1, [pc, #664]	; (e15d0 <_strtod_r+0x5c8>)
   e1336:	3b01      	subs	r3, #1
   e1338:	a817      	add	r0, sp, #92	; 0x5c
   e133a:	9317      	str	r3, [sp, #92]	; 0x5c
   e133c:	f001 fa50 	bl	e27e0 <__match>
   e1340:	b910      	cbnz	r0, e1348 <_strtod_r+0x340>
   e1342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1344:	3301      	adds	r3, #1
   e1346:	9317      	str	r3, [sp, #92]	; 0x5c
   e1348:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e15ec <_strtod_r+0x5e4>
   e134c:	e01a      	b.n	e1384 <_strtod_r+0x37c>
   e134e:	49a1      	ldr	r1, [pc, #644]	; (e15d4 <_strtod_r+0x5cc>)
   e1350:	a817      	add	r0, sp, #92	; 0x5c
   e1352:	f001 fa45 	bl	e27e0 <__match>
   e1356:	b1c8      	cbz	r0, e138c <_strtod_r+0x384>
   e1358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e135a:	781b      	ldrb	r3, [r3, #0]
   e135c:	2b28      	cmp	r3, #40	; 0x28
   e135e:	d10f      	bne.n	e1380 <_strtod_r+0x378>
   e1360:	aa1a      	add	r2, sp, #104	; 0x68
   e1362:	499d      	ldr	r1, [pc, #628]	; (e15d8 <_strtod_r+0x5d0>)
   e1364:	a817      	add	r0, sp, #92	; 0x5c
   e1366:	f001 fa4e 	bl	e2806 <__hexnan>
   e136a:	2805      	cmp	r0, #5
   e136c:	d108      	bne.n	e1380 <_strtod_r+0x378>
   e136e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e1370:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1374:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e1378:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e137c:	f000 bc0f 	b.w	e1b9e <_strtod_r+0xb96>
   e1380:	f8df b26c 	ldr.w	fp, [pc, #620]	; e15f0 <_strtod_r+0x5e8>
   e1384:	f04f 0a00 	mov.w	sl, #0
   e1388:	f000 bc09 	b.w	e1b9e <_strtod_r+0xb96>
   e138c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e138e:	9417      	str	r4, [sp, #92]	; 0x5c
   e1390:	2b00      	cmp	r3, #0
   e1392:	f000 840f 	beq.w	e1bb4 <_strtod_r+0xbac>
   e1396:	2300      	movs	r3, #0
   e1398:	930c      	str	r3, [sp, #48]	; 0x30
   e139a:	f000 bc02 	b.w	e1ba2 <_strtod_r+0xb9a>
   e139e:	9b04      	ldr	r3, [sp, #16]
   e13a0:	9805      	ldr	r0, [sp, #20]
   e13a2:	2b00      	cmp	r3, #0
   e13a4:	bf08      	it	eq
   e13a6:	462b      	moveq	r3, r5
   e13a8:	2d10      	cmp	r5, #16
   e13aa:	462c      	mov	r4, r5
   e13ac:	ebc2 0909 	rsb	r9, r2, r9
   e13b0:	bfa8      	it	ge
   e13b2:	2410      	movge	r4, #16
   e13b4:	9304      	str	r3, [sp, #16]
   e13b6:	f7fe fb69 	bl	dfa8c <__aeabi_ui2d>
   e13ba:	2c09      	cmp	r4, #9
   e13bc:	4682      	mov	sl, r0
   e13be:	468b      	mov	fp, r1
   e13c0:	dd13      	ble.n	e13ea <_strtod_r+0x3e2>
   e13c2:	4b86      	ldr	r3, [pc, #536]	; (e15dc <_strtod_r+0x5d4>)
   e13c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e13c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e13cc:	f7fe fbd4 	bl	dfb78 <__aeabi_dmul>
   e13d0:	4606      	mov	r6, r0
   e13d2:	4640      	mov	r0, r8
   e13d4:	460f      	mov	r7, r1
   e13d6:	f7fe fb59 	bl	dfa8c <__aeabi_ui2d>
   e13da:	4602      	mov	r2, r0
   e13dc:	460b      	mov	r3, r1
   e13de:	4630      	mov	r0, r6
   e13e0:	4639      	mov	r1, r7
   e13e2:	f7fe fa17 	bl	df814 <__adddf3>
   e13e6:	4682      	mov	sl, r0
   e13e8:	468b      	mov	fp, r1
   e13ea:	2d0f      	cmp	r5, #15
   e13ec:	dc36      	bgt.n	e145c <_strtod_r+0x454>
   e13ee:	f1b9 0f00 	cmp.w	r9, #0
   e13f2:	f000 83d4 	beq.w	e1b9e <_strtod_r+0xb96>
   e13f6:	dd24      	ble.n	e1442 <_strtod_r+0x43a>
   e13f8:	f1b9 0f16 	cmp.w	r9, #22
   e13fc:	dc07      	bgt.n	e140e <_strtod_r+0x406>
   e13fe:	4d77      	ldr	r5, [pc, #476]	; (e15dc <_strtod_r+0x5d4>)
   e1400:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e1404:	4652      	mov	r2, sl
   e1406:	465b      	mov	r3, fp
   e1408:	e9d9 0100 	ldrd	r0, r1, [r9]
   e140c:	e014      	b.n	e1438 <_strtod_r+0x430>
   e140e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e1412:	4599      	cmp	r9, r3
   e1414:	dc22      	bgt.n	e145c <_strtod_r+0x454>
   e1416:	4c71      	ldr	r4, [pc, #452]	; (e15dc <_strtod_r+0x5d4>)
   e1418:	f1c5 050f 	rsb	r5, r5, #15
   e141c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e1420:	ebc5 0509 	rsb	r5, r5, r9
   e1424:	4652      	mov	r2, sl
   e1426:	465b      	mov	r3, fp
   e1428:	e9d1 0100 	ldrd	r0, r1, [r1]
   e142c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e1430:	f7fe fba2 	bl	dfb78 <__aeabi_dmul>
   e1434:	e9d4 2300 	ldrd	r2, r3, [r4]
   e1438:	f7fe fb9e 	bl	dfb78 <__aeabi_dmul>
   e143c:	4682      	mov	sl, r0
   e143e:	468b      	mov	fp, r1
   e1440:	e3ad      	b.n	e1b9e <_strtod_r+0xb96>
   e1442:	f119 0f16 	cmn.w	r9, #22
   e1446:	db09      	blt.n	e145c <_strtod_r+0x454>
   e1448:	4d64      	ldr	r5, [pc, #400]	; (e15dc <_strtod_r+0x5d4>)
   e144a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e144e:	e9d9 2300 	ldrd	r2, r3, [r9]
   e1452:	4650      	mov	r0, sl
   e1454:	4659      	mov	r1, fp
   e1456:	f7fe fcb9 	bl	dfdcc <__aeabi_ddiv>
   e145a:	e7ef      	b.n	e143c <_strtod_r+0x434>
   e145c:	1b2c      	subs	r4, r5, r4
   e145e:	444c      	add	r4, r9
   e1460:	2c00      	cmp	r4, #0
   e1462:	dd57      	ble.n	e1514 <_strtod_r+0x50c>
   e1464:	f014 010f 	ands.w	r1, r4, #15
   e1468:	d00a      	beq.n	e1480 <_strtod_r+0x478>
   e146a:	4b5c      	ldr	r3, [pc, #368]	; (e15dc <_strtod_r+0x5d4>)
   e146c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e1470:	4652      	mov	r2, sl
   e1472:	465b      	mov	r3, fp
   e1474:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1478:	f7fe fb7e 	bl	dfb78 <__aeabi_dmul>
   e147c:	4682      	mov	sl, r0
   e147e:	468b      	mov	fp, r1
   e1480:	f034 040f 	bics.w	r4, r4, #15
   e1484:	f000 80b8 	beq.w	e15f8 <_strtod_r+0x5f0>
   e1488:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e148c:	dd0b      	ble.n	e14a6 <_strtod_r+0x49e>
   e148e:	2400      	movs	r4, #0
   e1490:	4625      	mov	r5, r4
   e1492:	9405      	str	r4, [sp, #20]
   e1494:	9404      	str	r4, [sp, #16]
   e1496:	9a02      	ldr	r2, [sp, #8]
   e1498:	f8df b150 	ldr.w	fp, [pc, #336]	; e15ec <_strtod_r+0x5e4>
   e149c:	2322      	movs	r3, #34	; 0x22
   e149e:	6013      	str	r3, [r2, #0]
   e14a0:	f04f 0a00 	mov.w	sl, #0
   e14a4:	e187      	b.n	e17b6 <_strtod_r+0x7ae>
   e14a6:	4e4e      	ldr	r6, [pc, #312]	; (e15e0 <_strtod_r+0x5d8>)
   e14a8:	2300      	movs	r3, #0
   e14aa:	1124      	asrs	r4, r4, #4
   e14ac:	4650      	mov	r0, sl
   e14ae:	4659      	mov	r1, fp
   e14b0:	4698      	mov	r8, r3
   e14b2:	4637      	mov	r7, r6
   e14b4:	2c01      	cmp	r4, #1
   e14b6:	dd0b      	ble.n	e14d0 <_strtod_r+0x4c8>
   e14b8:	07e2      	lsls	r2, r4, #31
   e14ba:	d504      	bpl.n	e14c6 <_strtod_r+0x4be>
   e14bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   e14c0:	f7fe fb5a 	bl	dfb78 <__aeabi_dmul>
   e14c4:	2301      	movs	r3, #1
   e14c6:	f108 0801 	add.w	r8, r8, #1
   e14ca:	1064      	asrs	r4, r4, #1
   e14cc:	3608      	adds	r6, #8
   e14ce:	e7f1      	b.n	e14b4 <_strtod_r+0x4ac>
   e14d0:	b10b      	cbz	r3, e14d6 <_strtod_r+0x4ce>
   e14d2:	4682      	mov	sl, r0
   e14d4:	468b      	mov	fp, r1
   e14d6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e14da:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e14de:	4652      	mov	r2, sl
   e14e0:	465b      	mov	r3, fp
   e14e2:	e9d7 0100 	ldrd	r0, r1, [r7]
   e14e6:	f7fe fb47 	bl	dfb78 <__aeabi_dmul>
   e14ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e14ee:	468b      	mov	fp, r1
   e14f0:	460a      	mov	r2, r1
   e14f2:	0d1b      	lsrs	r3, r3, #20
   e14f4:	493b      	ldr	r1, [pc, #236]	; (e15e4 <_strtod_r+0x5dc>)
   e14f6:	051b      	lsls	r3, r3, #20
   e14f8:	428b      	cmp	r3, r1
   e14fa:	4682      	mov	sl, r0
   e14fc:	d8c7      	bhi.n	e148e <_strtod_r+0x486>
   e14fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e1502:	428b      	cmp	r3, r1
   e1504:	bf86      	itte	hi
   e1506:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e15f4 <_strtod_r+0x5ec>
   e150a:	f04f 3aff 	movhi.w	sl, #4294967295
   e150e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e1512:	e071      	b.n	e15f8 <_strtod_r+0x5f0>
   e1514:	d070      	beq.n	e15f8 <_strtod_r+0x5f0>
   e1516:	4264      	negs	r4, r4
   e1518:	f014 020f 	ands.w	r2, r4, #15
   e151c:	d00a      	beq.n	e1534 <_strtod_r+0x52c>
   e151e:	4b2f      	ldr	r3, [pc, #188]	; (e15dc <_strtod_r+0x5d4>)
   e1520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e1524:	4650      	mov	r0, sl
   e1526:	4659      	mov	r1, fp
   e1528:	e9d3 2300 	ldrd	r2, r3, [r3]
   e152c:	f7fe fc4e 	bl	dfdcc <__aeabi_ddiv>
   e1530:	4682      	mov	sl, r0
   e1532:	468b      	mov	fp, r1
   e1534:	1124      	asrs	r4, r4, #4
   e1536:	d05f      	beq.n	e15f8 <_strtod_r+0x5f0>
   e1538:	2c1f      	cmp	r4, #31
   e153a:	dd04      	ble.n	e1546 <_strtod_r+0x53e>
   e153c:	2400      	movs	r4, #0
   e153e:	4625      	mov	r5, r4
   e1540:	9405      	str	r4, [sp, #20]
   e1542:	9404      	str	r4, [sp, #16]
   e1544:	e130      	b.n	e17a8 <_strtod_r+0x7a0>
   e1546:	f014 0f10 	tst.w	r4, #16
   e154a:	bf0c      	ite	eq
   e154c:	2300      	moveq	r3, #0
   e154e:	236a      	movne	r3, #106	; 0x6a
   e1550:	4e25      	ldr	r6, [pc, #148]	; (e15e8 <_strtod_r+0x5e0>)
   e1552:	9303      	str	r3, [sp, #12]
   e1554:	4650      	mov	r0, sl
   e1556:	4659      	mov	r1, fp
   e1558:	2300      	movs	r3, #0
   e155a:	2c00      	cmp	r4, #0
   e155c:	dd09      	ble.n	e1572 <_strtod_r+0x56a>
   e155e:	07e2      	lsls	r2, r4, #31
   e1560:	d504      	bpl.n	e156c <_strtod_r+0x564>
   e1562:	e9d6 2300 	ldrd	r2, r3, [r6]
   e1566:	f7fe fb07 	bl	dfb78 <__aeabi_dmul>
   e156a:	2301      	movs	r3, #1
   e156c:	1064      	asrs	r4, r4, #1
   e156e:	3608      	adds	r6, #8
   e1570:	e7f3      	b.n	e155a <_strtod_r+0x552>
   e1572:	b10b      	cbz	r3, e1578 <_strtod_r+0x570>
   e1574:	4682      	mov	sl, r0
   e1576:	468b      	mov	fp, r1
   e1578:	9b03      	ldr	r3, [sp, #12]
   e157a:	b1eb      	cbz	r3, e15b8 <_strtod_r+0x5b0>
   e157c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e1580:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1584:	2b00      	cmp	r3, #0
   e1586:	4659      	mov	r1, fp
   e1588:	dd16      	ble.n	e15b8 <_strtod_r+0x5b0>
   e158a:	2b1f      	cmp	r3, #31
   e158c:	dd0e      	ble.n	e15ac <_strtod_r+0x5a4>
   e158e:	2b34      	cmp	r3, #52	; 0x34
   e1590:	bfde      	ittt	le
   e1592:	3b20      	suble	r3, #32
   e1594:	f04f 32ff 	movle.w	r2, #4294967295
   e1598:	fa02 f303 	lslle.w	r3, r2, r3
   e159c:	f04f 0a00 	mov.w	sl, #0
   e15a0:	bfcc      	ite	gt
   e15a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e15a6:	ea03 0b01 	andle.w	fp, r3, r1
   e15aa:	e005      	b.n	e15b8 <_strtod_r+0x5b0>
   e15ac:	f04f 32ff 	mov.w	r2, #4294967295
   e15b0:	fa02 f303 	lsl.w	r3, r2, r3
   e15b4:	ea03 0a0a 	and.w	sl, r3, sl
   e15b8:	2200      	movs	r2, #0
   e15ba:	2300      	movs	r3, #0
   e15bc:	4650      	mov	r0, sl
   e15be:	4659      	mov	r1, fp
   e15c0:	f7fe fd42 	bl	e0048 <__aeabi_dcmpeq>
   e15c4:	2800      	cmp	r0, #0
   e15c6:	d1b9      	bne.n	e153c <_strtod_r+0x534>
   e15c8:	e018      	b.n	e15fc <_strtod_r+0x5f4>
   e15ca:	bf00      	nop
   e15cc:	000e3dd5 	.word	0x000e3dd5
   e15d0:	000e4618 	.word	0x000e4618
   e15d4:	000e4651 	.word	0x000e4651
   e15d8:	000e4604 	.word	0x000e4604
   e15dc:	000e48b0 	.word	0x000e48b0
   e15e0:	000e4978 	.word	0x000e4978
   e15e4:	7ca00000 	.word	0x7ca00000
   e15e8:	000e4620 	.word	0x000e4620
   e15ec:	7ff00000 	.word	0x7ff00000
   e15f0:	fff80000 	.word	0xfff80000
   e15f4:	7fefffff 	.word	0x7fefffff
   e15f8:	2300      	movs	r3, #0
   e15fa:	9303      	str	r3, [sp, #12]
   e15fc:	9b05      	ldr	r3, [sp, #20]
   e15fe:	9300      	str	r3, [sp, #0]
   e1600:	9a04      	ldr	r2, [sp, #16]
   e1602:	9907      	ldr	r1, [sp, #28]
   e1604:	9802      	ldr	r0, [sp, #8]
   e1606:	462b      	mov	r3, r5
   e1608:	f001 faf7 	bl	e2bfa <__s2b>
   e160c:	9005      	str	r0, [sp, #20]
   e160e:	2800      	cmp	r0, #0
   e1610:	f43f af3d 	beq.w	e148e <_strtod_r+0x486>
   e1614:	f1b9 0f00 	cmp.w	r9, #0
   e1618:	f1c9 0300 	rsb	r3, r9, #0
   e161c:	bfa8      	it	ge
   e161e:	2300      	movge	r3, #0
   e1620:	930d      	str	r3, [sp, #52]	; 0x34
   e1622:	2400      	movs	r4, #0
   e1624:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e1628:	9312      	str	r3, [sp, #72]	; 0x48
   e162a:	4625      	mov	r5, r4
   e162c:	9b05      	ldr	r3, [sp, #20]
   e162e:	9802      	ldr	r0, [sp, #8]
   e1630:	6859      	ldr	r1, [r3, #4]
   e1632:	f001 fa5b 	bl	e2aec <_Balloc>
   e1636:	9004      	str	r0, [sp, #16]
   e1638:	2800      	cmp	r0, #0
   e163a:	f43f af2c 	beq.w	e1496 <_strtod_r+0x48e>
   e163e:	9b05      	ldr	r3, [sp, #20]
   e1640:	691a      	ldr	r2, [r3, #16]
   e1642:	3202      	adds	r2, #2
   e1644:	f103 010c 	add.w	r1, r3, #12
   e1648:	0092      	lsls	r2, r2, #2
   e164a:	300c      	adds	r0, #12
   e164c:	f7fe ff2e 	bl	e04ac <memcpy>
   e1650:	aa1a      	add	r2, sp, #104	; 0x68
   e1652:	a919      	add	r1, sp, #100	; 0x64
   e1654:	ec4b ab10 	vmov	d0, sl, fp
   e1658:	9802      	ldr	r0, [sp, #8]
   e165a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e165e:	f001 fd80 	bl	e3162 <__d2b>
   e1662:	9018      	str	r0, [sp, #96]	; 0x60
   e1664:	2800      	cmp	r0, #0
   e1666:	f43f af16 	beq.w	e1496 <_strtod_r+0x48e>
   e166a:	2101      	movs	r1, #1
   e166c:	9802      	ldr	r0, [sp, #8]
   e166e:	f001 fb4f 	bl	e2d10 <__i2b>
   e1672:	4605      	mov	r5, r0
   e1674:	2800      	cmp	r0, #0
   e1676:	f43f af0e 	beq.w	e1496 <_strtod_r+0x48e>
   e167a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e167c:	9903      	ldr	r1, [sp, #12]
   e167e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e1680:	2b00      	cmp	r3, #0
   e1682:	bfad      	iteet	ge
   e1684:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e1686:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e1688:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e168c:	eb02 0803 	addge.w	r8, r2, r3
   e1690:	bfb8      	it	lt
   e1692:	1ad2      	sublt	r2, r2, r3
   e1694:	eba3 0301 	sub.w	r3, r3, r1
   e1698:	4433      	add	r3, r6
   e169a:	49b5      	ldr	r1, [pc, #724]	; (e1970 <_strtod_r+0x968>)
   e169c:	bfa8      	it	ge
   e169e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e16a0:	3b01      	subs	r3, #1
   e16a2:	428b      	cmp	r3, r1
   e16a4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e16a8:	f280 808a 	bge.w	e17c0 <_strtod_r+0x7b8>
   e16ac:	1ac9      	subs	r1, r1, r3
   e16ae:	291f      	cmp	r1, #31
   e16b0:	bfc8      	it	gt
   e16b2:	4fb0      	ldrgt	r7, [pc, #704]	; (e1974 <_strtod_r+0x96c>)
   e16b4:	f04f 0901 	mov.w	r9, #1
   e16b8:	bfd4      	ite	le
   e16ba:	fa09 f301 	lslle.w	r3, r9, r1
   e16be:	1aff      	subgt	r7, r7, r3
   e16c0:	eba6 0601 	sub.w	r6, r6, r1
   e16c4:	bfd9      	ittee	le
   e16c6:	9306      	strle	r3, [sp, #24]
   e16c8:	2700      	movle	r7, #0
   e16ca:	fa09 f707 	lslgt.w	r7, r9, r7
   e16ce:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e16d2:	eb08 0906 	add.w	r9, r8, r6
   e16d6:	9b03      	ldr	r3, [sp, #12]
   e16d8:	45c8      	cmp	r8, r9
   e16da:	4416      	add	r6, r2
   e16dc:	441e      	add	r6, r3
   e16de:	4643      	mov	r3, r8
   e16e0:	bfa8      	it	ge
   e16e2:	464b      	movge	r3, r9
   e16e4:	42b3      	cmp	r3, r6
   e16e6:	bfa8      	it	ge
   e16e8:	4633      	movge	r3, r6
   e16ea:	2b00      	cmp	r3, #0
   e16ec:	bfc2      	ittt	gt
   e16ee:	ebc3 0909 	rsbgt	r9, r3, r9
   e16f2:	1af6      	subgt	r6, r6, r3
   e16f4:	ebc3 0808 	rsbgt	r8, r3, r8
   e16f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e16fa:	2b00      	cmp	r3, #0
   e16fc:	d164      	bne.n	e17c8 <_strtod_r+0x7c0>
   e16fe:	f1b9 0f00 	cmp.w	r9, #0
   e1702:	dc7a      	bgt.n	e17fa <_strtod_r+0x7f2>
   e1704:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e1706:	2b00      	cmp	r3, #0
   e1708:	f040 8081 	bne.w	e180e <_strtod_r+0x806>
   e170c:	2e00      	cmp	r6, #0
   e170e:	f300 8088 	bgt.w	e1822 <_strtod_r+0x81a>
   e1712:	f1b8 0f00 	cmp.w	r8, #0
   e1716:	f300 808e 	bgt.w	e1836 <_strtod_r+0x82e>
   e171a:	9a04      	ldr	r2, [sp, #16]
   e171c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e171e:	9802      	ldr	r0, [sp, #8]
   e1720:	f001 fc4b 	bl	e2fba <__mdiff>
   e1724:	4604      	mov	r4, r0
   e1726:	2800      	cmp	r0, #0
   e1728:	f43f aeb5 	beq.w	e1496 <_strtod_r+0x48e>
   e172c:	68c3      	ldr	r3, [r0, #12]
   e172e:	9307      	str	r3, [sp, #28]
   e1730:	2300      	movs	r3, #0
   e1732:	60c3      	str	r3, [r0, #12]
   e1734:	4629      	mov	r1, r5
   e1736:	f001 fc24 	bl	e2f82 <__mcmp>
   e173a:	2800      	cmp	r0, #0
   e173c:	f280 8089 	bge.w	e1852 <_strtod_r+0x84a>
   e1740:	9b07      	ldr	r3, [sp, #28]
   e1742:	2b00      	cmp	r3, #0
   e1744:	f040 8204 	bne.w	e1b50 <_strtod_r+0xb48>
   e1748:	f1ba 0f00 	cmp.w	sl, #0
   e174c:	f040 8200 	bne.w	e1b50 <_strtod_r+0xb48>
   e1750:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e1754:	2b00      	cmp	r3, #0
   e1756:	f040 81fb 	bne.w	e1b50 <_strtod_r+0xb48>
   e175a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e175e:	0d1b      	lsrs	r3, r3, #20
   e1760:	051b      	lsls	r3, r3, #20
   e1762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e1766:	f240 81f3 	bls.w	e1b50 <_strtod_r+0xb48>
   e176a:	6963      	ldr	r3, [r4, #20]
   e176c:	2b00      	cmp	r3, #0
   e176e:	d06c      	beq.n	e184a <_strtod_r+0x842>
   e1770:	4621      	mov	r1, r4
   e1772:	2201      	movs	r2, #1
   e1774:	9802      	ldr	r0, [sp, #8]
   e1776:	f001 fbb3 	bl	e2ee0 <__lshift>
   e177a:	4629      	mov	r1, r5
   e177c:	4604      	mov	r4, r0
   e177e:	f001 fc00 	bl	e2f82 <__mcmp>
   e1782:	2800      	cmp	r0, #0
   e1784:	f340 81e4 	ble.w	e1b50 <_strtod_r+0xb48>
   e1788:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e178c:	9a03      	ldr	r2, [sp, #12]
   e178e:	0d1b      	lsrs	r3, r3, #20
   e1790:	051b      	lsls	r3, r3, #20
   e1792:	2a00      	cmp	r2, #0
   e1794:	f000 808c 	beq.w	e18b0 <_strtod_r+0x8a8>
   e1798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e179c:	f300 8088 	bgt.w	e18b0 <_strtod_r+0x8a8>
   e17a0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e17a4:	f300 81d6 	bgt.w	e1b54 <_strtod_r+0xb4c>
   e17a8:	9a02      	ldr	r2, [sp, #8]
   e17aa:	2322      	movs	r3, #34	; 0x22
   e17ac:	f04f 0a00 	mov.w	sl, #0
   e17b0:	f04f 0b00 	mov.w	fp, #0
   e17b4:	6013      	str	r3, [r2, #0]
   e17b6:	9b05      	ldr	r3, [sp, #20]
   e17b8:	2b00      	cmp	r3, #0
   e17ba:	f040 81dc 	bne.w	e1b76 <_strtod_r+0xb6e>
   e17be:	e1ee      	b.n	e1b9e <_strtod_r+0xb96>
   e17c0:	2301      	movs	r3, #1
   e17c2:	2700      	movs	r7, #0
   e17c4:	9306      	str	r3, [sp, #24]
   e17c6:	e784      	b.n	e16d2 <_strtod_r+0x6ca>
   e17c8:	4629      	mov	r1, r5
   e17ca:	461a      	mov	r2, r3
   e17cc:	9802      	ldr	r0, [sp, #8]
   e17ce:	f001 fb39 	bl	e2e44 <__pow5mult>
   e17d2:	4605      	mov	r5, r0
   e17d4:	2800      	cmp	r0, #0
   e17d6:	f43f ae5e 	beq.w	e1496 <_strtod_r+0x48e>
   e17da:	4601      	mov	r1, r0
   e17dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e17de:	9802      	ldr	r0, [sp, #8]
   e17e0:	f001 fa9f 	bl	e2d22 <__multiply>
   e17e4:	9007      	str	r0, [sp, #28]
   e17e6:	2800      	cmp	r0, #0
   e17e8:	f43f ae55 	beq.w	e1496 <_strtod_r+0x48e>
   e17ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   e17ee:	9802      	ldr	r0, [sp, #8]
   e17f0:	f001 f9b1 	bl	e2b56 <_Bfree>
   e17f4:	9b07      	ldr	r3, [sp, #28]
   e17f6:	9318      	str	r3, [sp, #96]	; 0x60
   e17f8:	e781      	b.n	e16fe <_strtod_r+0x6f6>
   e17fa:	464a      	mov	r2, r9
   e17fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e17fe:	9802      	ldr	r0, [sp, #8]
   e1800:	f001 fb6e 	bl	e2ee0 <__lshift>
   e1804:	9018      	str	r0, [sp, #96]	; 0x60
   e1806:	2800      	cmp	r0, #0
   e1808:	f47f af7c 	bne.w	e1704 <_strtod_r+0x6fc>
   e180c:	e643      	b.n	e1496 <_strtod_r+0x48e>
   e180e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e1810:	9904      	ldr	r1, [sp, #16]
   e1812:	9802      	ldr	r0, [sp, #8]
   e1814:	f001 fb16 	bl	e2e44 <__pow5mult>
   e1818:	9004      	str	r0, [sp, #16]
   e181a:	2800      	cmp	r0, #0
   e181c:	f47f af76 	bne.w	e170c <_strtod_r+0x704>
   e1820:	e639      	b.n	e1496 <_strtod_r+0x48e>
   e1822:	4632      	mov	r2, r6
   e1824:	9904      	ldr	r1, [sp, #16]
   e1826:	9802      	ldr	r0, [sp, #8]
   e1828:	f001 fb5a 	bl	e2ee0 <__lshift>
   e182c:	9004      	str	r0, [sp, #16]
   e182e:	2800      	cmp	r0, #0
   e1830:	f47f af6f 	bne.w	e1712 <_strtod_r+0x70a>
   e1834:	e62f      	b.n	e1496 <_strtod_r+0x48e>
   e1836:	4629      	mov	r1, r5
   e1838:	4642      	mov	r2, r8
   e183a:	9802      	ldr	r0, [sp, #8]
   e183c:	f001 fb50 	bl	e2ee0 <__lshift>
   e1840:	4605      	mov	r5, r0
   e1842:	2800      	cmp	r0, #0
   e1844:	f47f af69 	bne.w	e171a <_strtod_r+0x712>
   e1848:	e625      	b.n	e1496 <_strtod_r+0x48e>
   e184a:	6923      	ldr	r3, [r4, #16]
   e184c:	2b01      	cmp	r3, #1
   e184e:	dc8f      	bgt.n	e1770 <_strtod_r+0x768>
   e1850:	e17e      	b.n	e1b50 <_strtod_r+0xb48>
   e1852:	d161      	bne.n	e1918 <_strtod_r+0x910>
   e1854:	9a07      	ldr	r2, [sp, #28]
   e1856:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e185a:	b322      	cbz	r2, e18a6 <_strtod_r+0x89e>
   e185c:	4946      	ldr	r1, [pc, #280]	; (e1978 <_strtod_r+0x970>)
   e185e:	428b      	cmp	r3, r1
   e1860:	465a      	mov	r2, fp
   e1862:	d12e      	bne.n	e18c2 <_strtod_r+0x8ba>
   e1864:	9b03      	ldr	r3, [sp, #12]
   e1866:	4651      	mov	r1, sl
   e1868:	b163      	cbz	r3, e1884 <_strtod_r+0x87c>
   e186a:	4b44      	ldr	r3, [pc, #272]	; (e197c <_strtod_r+0x974>)
   e186c:	4013      	ands	r3, r2
   e186e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e1872:	d807      	bhi.n	e1884 <_strtod_r+0x87c>
   e1874:	0d1b      	lsrs	r3, r3, #20
   e1876:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e187a:	f04f 30ff 	mov.w	r0, #4294967295
   e187e:	fa00 f303 	lsl.w	r3, r0, r3
   e1882:	e001      	b.n	e1888 <_strtod_r+0x880>
   e1884:	f04f 33ff 	mov.w	r3, #4294967295
   e1888:	428b      	cmp	r3, r1
   e188a:	d11a      	bne.n	e18c2 <_strtod_r+0x8ba>
   e188c:	493c      	ldr	r1, [pc, #240]	; (e1980 <_strtod_r+0x978>)
   e188e:	428a      	cmp	r2, r1
   e1890:	d102      	bne.n	e1898 <_strtod_r+0x890>
   e1892:	3301      	adds	r3, #1
   e1894:	f43f adff 	beq.w	e1496 <_strtod_r+0x48e>
   e1898:	4b38      	ldr	r3, [pc, #224]	; (e197c <_strtod_r+0x974>)
   e189a:	4013      	ands	r3, r2
   e189c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e18a0:	f04f 0a00 	mov.w	sl, #0
   e18a4:	e154      	b.n	e1b50 <_strtod_r+0xb48>
   e18a6:	b963      	cbnz	r3, e18c2 <_strtod_r+0x8ba>
   e18a8:	f1ba 0f00 	cmp.w	sl, #0
   e18ac:	d109      	bne.n	e18c2 <_strtod_r+0x8ba>
   e18ae:	e76b      	b.n	e1788 <_strtod_r+0x780>
   e18b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e18b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e18b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e18bc:	f04f 3aff 	mov.w	sl, #4294967295
   e18c0:	e146      	b.n	e1b50 <_strtod_r+0xb48>
   e18c2:	b117      	cbz	r7, e18ca <_strtod_r+0x8c2>
   e18c4:	ea17 0f0b 	tst.w	r7, fp
   e18c8:	e002      	b.n	e18d0 <_strtod_r+0x8c8>
   e18ca:	9b06      	ldr	r3, [sp, #24]
   e18cc:	ea13 0f0a 	tst.w	r3, sl
   e18d0:	f000 813e 	beq.w	e1b50 <_strtod_r+0xb48>
   e18d4:	9b07      	ldr	r3, [sp, #28]
   e18d6:	9a03      	ldr	r2, [sp, #12]
   e18d8:	4650      	mov	r0, sl
   e18da:	4659      	mov	r1, fp
   e18dc:	b153      	cbz	r3, e18f4 <_strtod_r+0x8ec>
   e18de:	f7ff fb77 	bl	e0fd0 <sulp>
   e18e2:	4602      	mov	r2, r0
   e18e4:	460b      	mov	r3, r1
   e18e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e18ea:	f7fd ff93 	bl	df814 <__adddf3>
   e18ee:	4682      	mov	sl, r0
   e18f0:	468b      	mov	fp, r1
   e18f2:	e12d      	b.n	e1b50 <_strtod_r+0xb48>
   e18f4:	f7ff fb6c 	bl	e0fd0 <sulp>
   e18f8:	4602      	mov	r2, r0
   e18fa:	460b      	mov	r3, r1
   e18fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e1900:	f7fd ff86 	bl	df810 <__aeabi_dsub>
   e1904:	2200      	movs	r2, #0
   e1906:	2300      	movs	r3, #0
   e1908:	4682      	mov	sl, r0
   e190a:	468b      	mov	fp, r1
   e190c:	f7fe fb9c 	bl	e0048 <__aeabi_dcmpeq>
   e1910:	2800      	cmp	r0, #0
   e1912:	f47f af49 	bne.w	e17a8 <_strtod_r+0x7a0>
   e1916:	e11b      	b.n	e1b50 <_strtod_r+0xb48>
   e1918:	4629      	mov	r1, r5
   e191a:	4620      	mov	r0, r4
   e191c:	f001 fc6f 	bl	e31fe <__ratio>
   e1920:	ec57 6b10 	vmov	r6, r7, d0
   e1924:	2200      	movs	r2, #0
   e1926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e192a:	ee10 0a10 	vmov	r0, s0
   e192e:	4639      	mov	r1, r7
   e1930:	f7fe fb9e 	bl	e0070 <__aeabi_dcmple>
   e1934:	2800      	cmp	r0, #0
   e1936:	d042      	beq.n	e19be <_strtod_r+0x9b6>
   e1938:	9b07      	ldr	r3, [sp, #28]
   e193a:	b123      	cbz	r3, e1946 <_strtod_r+0x93e>
   e193c:	f04f 0800 	mov.w	r8, #0
   e1940:	f8df 9040 	ldr.w	r9, [pc, #64]	; e1984 <_strtod_r+0x97c>
   e1944:	e011      	b.n	e196a <_strtod_r+0x962>
   e1946:	f1ba 0f00 	cmp.w	sl, #0
   e194a:	d103      	bne.n	e1954 <_strtod_r+0x94c>
   e194c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e1950:	b93b      	cbnz	r3, e1962 <_strtod_r+0x95a>
   e1952:	e01b      	b.n	e198c <_strtod_r+0x984>
   e1954:	f1ba 0f01 	cmp.w	sl, #1
   e1958:	d103      	bne.n	e1962 <_strtod_r+0x95a>
   e195a:	f1bb 0f00 	cmp.w	fp, #0
   e195e:	f43f af23 	beq.w	e17a8 <_strtod_r+0x7a0>
   e1962:	f8df 9024 	ldr.w	r9, [pc, #36]	; e1988 <_strtod_r+0x980>
   e1966:	f04f 0800 	mov.w	r8, #0
   e196a:	2600      	movs	r6, #0
   e196c:	4f05      	ldr	r7, [pc, #20]	; (e1984 <_strtod_r+0x97c>)
   e196e:	e039      	b.n	e19e4 <_strtod_r+0x9dc>
   e1970:	fffffc02 	.word	0xfffffc02
   e1974:	fffffbe2 	.word	0xfffffbe2
   e1978:	000fffff 	.word	0x000fffff
   e197c:	7ff00000 	.word	0x7ff00000
   e1980:	7fefffff 	.word	0x7fefffff
   e1984:	3ff00000 	.word	0x3ff00000
   e1988:	bff00000 	.word	0xbff00000
   e198c:	2200      	movs	r2, #0
   e198e:	4b98      	ldr	r3, [pc, #608]	; (e1bf0 <_strtod_r+0xbe8>)
   e1990:	4630      	mov	r0, r6
   e1992:	4639      	mov	r1, r7
   e1994:	f7fe fb62 	bl	e005c <__aeabi_dcmplt>
   e1998:	b940      	cbnz	r0, e19ac <_strtod_r+0x9a4>
   e199a:	4630      	mov	r0, r6
   e199c:	4639      	mov	r1, r7
   e199e:	2200      	movs	r2, #0
   e19a0:	4b94      	ldr	r3, [pc, #592]	; (e1bf4 <_strtod_r+0xbec>)
   e19a2:	f7fe f8e9 	bl	dfb78 <__aeabi_dmul>
   e19a6:	4606      	mov	r6, r0
   e19a8:	460f      	mov	r7, r1
   e19aa:	e001      	b.n	e19b0 <_strtod_r+0x9a8>
   e19ac:	4f91      	ldr	r7, [pc, #580]	; (e1bf4 <_strtod_r+0xbec>)
   e19ae:	2600      	movs	r6, #0
   e19b0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e19b4:	9614      	str	r6, [sp, #80]	; 0x50
   e19b6:	9315      	str	r3, [sp, #84]	; 0x54
   e19b8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e19bc:	e012      	b.n	e19e4 <_strtod_r+0x9dc>
   e19be:	4b8d      	ldr	r3, [pc, #564]	; (e1bf4 <_strtod_r+0xbec>)
   e19c0:	4630      	mov	r0, r6
   e19c2:	4639      	mov	r1, r7
   e19c4:	2200      	movs	r2, #0
   e19c6:	f7fe f8d7 	bl	dfb78 <__aeabi_dmul>
   e19ca:	9b07      	ldr	r3, [sp, #28]
   e19cc:	4606      	mov	r6, r0
   e19ce:	460f      	mov	r7, r1
   e19d0:	b923      	cbnz	r3, e19dc <_strtod_r+0x9d4>
   e19d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e19d6:	900e      	str	r0, [sp, #56]	; 0x38
   e19d8:	930f      	str	r3, [sp, #60]	; 0x3c
   e19da:	e001      	b.n	e19e0 <_strtod_r+0x9d8>
   e19dc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e19e0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e19e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e19e8:	0d1b      	lsrs	r3, r3, #20
   e19ea:	051b      	lsls	r3, r3, #20
   e19ec:	9306      	str	r3, [sp, #24]
   e19ee:	9a06      	ldr	r2, [sp, #24]
   e19f0:	4b81      	ldr	r3, [pc, #516]	; (e1bf8 <_strtod_r+0xbf0>)
   e19f2:	429a      	cmp	r2, r3
   e19f4:	d12b      	bne.n	e1a4e <_strtod_r+0xa46>
   e19f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e19fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e19fe:	ec4b ab10 	vmov	d0, sl, fp
   e1a02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e1a06:	f001 fb37 	bl	e3078 <__ulp>
   e1a0a:	4640      	mov	r0, r8
   e1a0c:	ec53 2b10 	vmov	r2, r3, d0
   e1a10:	4649      	mov	r1, r9
   e1a12:	f7fe f8b1 	bl	dfb78 <__aeabi_dmul>
   e1a16:	4652      	mov	r2, sl
   e1a18:	465b      	mov	r3, fp
   e1a1a:	f7fd fefb 	bl	df814 <__adddf3>
   e1a1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e1a22:	0d1b      	lsrs	r3, r3, #20
   e1a24:	4a75      	ldr	r2, [pc, #468]	; (e1bfc <_strtod_r+0xbf4>)
   e1a26:	051b      	lsls	r3, r3, #20
   e1a28:	4293      	cmp	r3, r2
   e1a2a:	4682      	mov	sl, r0
   e1a2c:	d90c      	bls.n	e1a48 <_strtod_r+0xa40>
   e1a2e:	4b74      	ldr	r3, [pc, #464]	; (e1c00 <_strtod_r+0xbf8>)
   e1a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e1a32:	429a      	cmp	r2, r3
   e1a34:	d103      	bne.n	e1a3e <_strtod_r+0xa36>
   e1a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1a38:	3301      	adds	r3, #1
   e1a3a:	f43f ad2c 	beq.w	e1496 <_strtod_r+0x48e>
   e1a3e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e1c00 <_strtod_r+0xbf8>
   e1a42:	f04f 3aff 	mov.w	sl, #4294967295
   e1a46:	e072      	b.n	e1b2e <_strtod_r+0xb26>
   e1a48:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e1a4c:	e038      	b.n	e1ac0 <_strtod_r+0xab8>
   e1a4e:	9b03      	ldr	r3, [sp, #12]
   e1a50:	b333      	cbz	r3, e1aa0 <_strtod_r+0xa98>
   e1a52:	9b06      	ldr	r3, [sp, #24]
   e1a54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e1a58:	d822      	bhi.n	e1aa0 <_strtod_r+0xa98>
   e1a5a:	a35d      	add	r3, pc, #372	; (adr r3, e1bd0 <_strtod_r+0xbc8>)
   e1a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1a60:	4630      	mov	r0, r6
   e1a62:	4639      	mov	r1, r7
   e1a64:	f7fe fb04 	bl	e0070 <__aeabi_dcmple>
   e1a68:	b1a8      	cbz	r0, e1a96 <_strtod_r+0xa8e>
   e1a6a:	4639      	mov	r1, r7
   e1a6c:	4630      	mov	r0, r6
   e1a6e:	f7fe fb5b 	bl	e0128 <__aeabi_d2uiz>
   e1a72:	2800      	cmp	r0, #0
   e1a74:	bf08      	it	eq
   e1a76:	2001      	moveq	r0, #1
   e1a78:	f7fe f808 	bl	dfa8c <__aeabi_ui2d>
   e1a7c:	9b07      	ldr	r3, [sp, #28]
   e1a7e:	4606      	mov	r6, r0
   e1a80:	460f      	mov	r7, r1
   e1a82:	b923      	cbnz	r3, e1a8e <_strtod_r+0xa86>
   e1a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1a88:	9010      	str	r0, [sp, #64]	; 0x40
   e1a8a:	9311      	str	r3, [sp, #68]	; 0x44
   e1a8c:	e001      	b.n	e1a92 <_strtod_r+0xa8a>
   e1a8e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e1a92:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e1a96:	9a06      	ldr	r2, [sp, #24]
   e1a98:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e1a9c:	ebc2 0903 	rsb	r9, r2, r3
   e1aa0:	ed9d 0b08 	vldr	d0, [sp, #32]
   e1aa4:	f001 fae8 	bl	e3078 <__ulp>
   e1aa8:	4640      	mov	r0, r8
   e1aaa:	ec53 2b10 	vmov	r2, r3, d0
   e1aae:	4649      	mov	r1, r9
   e1ab0:	f7fe f862 	bl	dfb78 <__aeabi_dmul>
   e1ab4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e1ab8:	f7fd feac 	bl	df814 <__adddf3>
   e1abc:	4682      	mov	sl, r0
   e1abe:	468b      	mov	fp, r1
   e1ac0:	9b03      	ldr	r3, [sp, #12]
   e1ac2:	bba3      	cbnz	r3, e1b2e <_strtod_r+0xb26>
   e1ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e1ac8:	0d1b      	lsrs	r3, r3, #20
   e1aca:	9a06      	ldr	r2, [sp, #24]
   e1acc:	051b      	lsls	r3, r3, #20
   e1ace:	429a      	cmp	r2, r3
   e1ad0:	46d8      	mov	r8, fp
   e1ad2:	d12c      	bne.n	e1b2e <_strtod_r+0xb26>
   e1ad4:	4639      	mov	r1, r7
   e1ad6:	4630      	mov	r0, r6
   e1ad8:	f7fe fafe 	bl	e00d8 <__aeabi_d2iz>
   e1adc:	f7fd ffe6 	bl	dfaac <__aeabi_i2d>
   e1ae0:	460b      	mov	r3, r1
   e1ae2:	4602      	mov	r2, r0
   e1ae4:	4639      	mov	r1, r7
   e1ae6:	4630      	mov	r0, r6
   e1ae8:	f7fd fe92 	bl	df810 <__aeabi_dsub>
   e1aec:	9b07      	ldr	r3, [sp, #28]
   e1aee:	4606      	mov	r6, r0
   e1af0:	460f      	mov	r7, r1
   e1af2:	b92b      	cbnz	r3, e1b00 <_strtod_r+0xaf8>
   e1af4:	f1ba 0f00 	cmp.w	sl, #0
   e1af8:	d102      	bne.n	e1b00 <_strtod_r+0xaf8>
   e1afa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e1afe:	b183      	cbz	r3, e1b22 <_strtod_r+0xb1a>
   e1b00:	a335      	add	r3, pc, #212	; (adr r3, e1bd8 <_strtod_r+0xbd0>)
   e1b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1b06:	4630      	mov	r0, r6
   e1b08:	4639      	mov	r1, r7
   e1b0a:	f7fe faa7 	bl	e005c <__aeabi_dcmplt>
   e1b0e:	2800      	cmp	r0, #0
   e1b10:	d131      	bne.n	e1b76 <_strtod_r+0xb6e>
   e1b12:	a333      	add	r3, pc, #204	; (adr r3, e1be0 <_strtod_r+0xbd8>)
   e1b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1b18:	4630      	mov	r0, r6
   e1b1a:	4639      	mov	r1, r7
   e1b1c:	f7fe fabc 	bl	e0098 <__aeabi_dcmpgt>
   e1b20:	e004      	b.n	e1b2c <_strtod_r+0xb24>
   e1b22:	a331      	add	r3, pc, #196	; (adr r3, e1be8 <_strtod_r+0xbe0>)
   e1b24:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1b28:	f7fe fa98 	bl	e005c <__aeabi_dcmplt>
   e1b2c:	bb18      	cbnz	r0, e1b76 <_strtod_r+0xb6e>
   e1b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e1b30:	9802      	ldr	r0, [sp, #8]
   e1b32:	f001 f810 	bl	e2b56 <_Bfree>
   e1b36:	9904      	ldr	r1, [sp, #16]
   e1b38:	9802      	ldr	r0, [sp, #8]
   e1b3a:	f001 f80c 	bl	e2b56 <_Bfree>
   e1b3e:	4629      	mov	r1, r5
   e1b40:	9802      	ldr	r0, [sp, #8]
   e1b42:	f001 f808 	bl	e2b56 <_Bfree>
   e1b46:	4621      	mov	r1, r4
   e1b48:	9802      	ldr	r0, [sp, #8]
   e1b4a:	f001 f804 	bl	e2b56 <_Bfree>
   e1b4e:	e56d      	b.n	e162c <_strtod_r+0x624>
   e1b50:	9b03      	ldr	r3, [sp, #12]
   e1b52:	b183      	cbz	r3, e1b76 <_strtod_r+0xb6e>
   e1b54:	4b2b      	ldr	r3, [pc, #172]	; (e1c04 <_strtod_r+0xbfc>)
   e1b56:	930b      	str	r3, [sp, #44]	; 0x2c
   e1b58:	2300      	movs	r3, #0
   e1b5a:	930a      	str	r3, [sp, #40]	; 0x28
   e1b5c:	4650      	mov	r0, sl
   e1b5e:	4659      	mov	r1, fp
   e1b60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e1b64:	f7fe f808 	bl	dfb78 <__aeabi_dmul>
   e1b68:	4682      	mov	sl, r0
   e1b6a:	468b      	mov	fp, r1
   e1b6c:	b919      	cbnz	r1, e1b76 <_strtod_r+0xb6e>
   e1b6e:	b910      	cbnz	r0, e1b76 <_strtod_r+0xb6e>
   e1b70:	9a02      	ldr	r2, [sp, #8]
   e1b72:	2322      	movs	r3, #34	; 0x22
   e1b74:	6013      	str	r3, [r2, #0]
   e1b76:	9918      	ldr	r1, [sp, #96]	; 0x60
   e1b78:	9802      	ldr	r0, [sp, #8]
   e1b7a:	f000 ffec 	bl	e2b56 <_Bfree>
   e1b7e:	9904      	ldr	r1, [sp, #16]
   e1b80:	9802      	ldr	r0, [sp, #8]
   e1b82:	f000 ffe8 	bl	e2b56 <_Bfree>
   e1b86:	4629      	mov	r1, r5
   e1b88:	9802      	ldr	r0, [sp, #8]
   e1b8a:	f000 ffe4 	bl	e2b56 <_Bfree>
   e1b8e:	9905      	ldr	r1, [sp, #20]
   e1b90:	9802      	ldr	r0, [sp, #8]
   e1b92:	f000 ffe0 	bl	e2b56 <_Bfree>
   e1b96:	4621      	mov	r1, r4
   e1b98:	9802      	ldr	r0, [sp, #8]
   e1b9a:	f000 ffdc 	bl	e2b56 <_Bfree>
   e1b9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e1ba0:	b113      	cbz	r3, e1ba8 <_strtod_r+0xba0>
   e1ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e1ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1ba6:	6013      	str	r3, [r2, #0]
   e1ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1baa:	b11b      	cbz	r3, e1bb4 <_strtod_r+0xbac>
   e1bac:	4652      	mov	r2, sl
   e1bae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e1bb2:	e007      	b.n	e1bc4 <_strtod_r+0xbbc>
   e1bb4:	4652      	mov	r2, sl
   e1bb6:	465b      	mov	r3, fp
   e1bb8:	e004      	b.n	e1bc4 <_strtod_r+0xbbc>
   e1bba:	2500      	movs	r5, #0
   e1bbc:	462a      	mov	r2, r5
   e1bbe:	2101      	movs	r1, #1
   e1bc0:	f7ff bb41 	b.w	e1246 <_strtod_r+0x23e>
   e1bc4:	ec43 2b10 	vmov	d0, r2, r3
   e1bc8:	b01d      	add	sp, #116	; 0x74
   e1bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1bce:	bf00      	nop
   e1bd0:	ffc00000 	.word	0xffc00000
   e1bd4:	41dfffff 	.word	0x41dfffff
   e1bd8:	94a03595 	.word	0x94a03595
   e1bdc:	3fdfffff 	.word	0x3fdfffff
   e1be0:	35afe535 	.word	0x35afe535
   e1be4:	3fe00000 	.word	0x3fe00000
   e1be8:	94a03595 	.word	0x94a03595
   e1bec:	3fcfffff 	.word	0x3fcfffff
   e1bf0:	3ff00000 	.word	0x3ff00000
   e1bf4:	3fe00000 	.word	0x3fe00000
   e1bf8:	7fe00000 	.word	0x7fe00000
   e1bfc:	7c9fffff 	.word	0x7c9fffff
   e1c00:	7fefffff 	.word	0x7fefffff
   e1c04:	39500000 	.word	0x39500000

000e1c08 <strtod>:
   e1c08:	4b02      	ldr	r3, [pc, #8]	; (e1c14 <strtod+0xc>)
   e1c0a:	460a      	mov	r2, r1
   e1c0c:	4601      	mov	r1, r0
   e1c0e:	6818      	ldr	r0, [r3, #0]
   e1c10:	f7ff b9fa 	b.w	e1008 <_strtod_r>
   e1c14:	2003db84 	.word	0x2003db84

000e1c18 <_strtol_r>:
   e1c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1c1c:	4680      	mov	r8, r0
   e1c1e:	4840      	ldr	r0, [pc, #256]	; (e1d20 <_strtol_r+0x108>)
   e1c20:	f8d0 9000 	ldr.w	r9, [r0]
   e1c24:	460f      	mov	r7, r1
   e1c26:	463d      	mov	r5, r7
   e1c28:	f815 4b01 	ldrb.w	r4, [r5], #1
   e1c2c:	eb09 0004 	add.w	r0, r9, r4
   e1c30:	7840      	ldrb	r0, [r0, #1]
   e1c32:	f000 0008 	and.w	r0, r0, #8
   e1c36:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e1c3a:	b108      	cbz	r0, e1c40 <_strtol_r+0x28>
   e1c3c:	462f      	mov	r7, r5
   e1c3e:	e7f2      	b.n	e1c26 <_strtol_r+0xe>
   e1c40:	2c2d      	cmp	r4, #45	; 0x2d
   e1c42:	d103      	bne.n	e1c4c <_strtol_r+0x34>
   e1c44:	1cbd      	adds	r5, r7, #2
   e1c46:	787c      	ldrb	r4, [r7, #1]
   e1c48:	2601      	movs	r6, #1
   e1c4a:	e003      	b.n	e1c54 <_strtol_r+0x3c>
   e1c4c:	2c2b      	cmp	r4, #43	; 0x2b
   e1c4e:	bf04      	itt	eq
   e1c50:	787c      	ldrbeq	r4, [r7, #1]
   e1c52:	1cbd      	addeq	r5, r7, #2
   e1c54:	b113      	cbz	r3, e1c5c <_strtol_r+0x44>
   e1c56:	2b10      	cmp	r3, #16
   e1c58:	d10a      	bne.n	e1c70 <_strtol_r+0x58>
   e1c5a:	e05b      	b.n	e1d14 <_strtol_r+0xfc>
   e1c5c:	2c30      	cmp	r4, #48	; 0x30
   e1c5e:	d157      	bne.n	e1d10 <_strtol_r+0xf8>
   e1c60:	7828      	ldrb	r0, [r5, #0]
   e1c62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e1c66:	2858      	cmp	r0, #88	; 0x58
   e1c68:	d14d      	bne.n	e1d06 <_strtol_r+0xee>
   e1c6a:	786c      	ldrb	r4, [r5, #1]
   e1c6c:	2310      	movs	r3, #16
   e1c6e:	3502      	adds	r5, #2
   e1c70:	2e00      	cmp	r6, #0
   e1c72:	bf14      	ite	ne
   e1c74:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e1c78:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e1c7c:	2700      	movs	r7, #0
   e1c7e:	fbbc faf3 	udiv	sl, ip, r3
   e1c82:	4638      	mov	r0, r7
   e1c84:	fb03 cc1a 	mls	ip, r3, sl, ip
   e1c88:	eb09 0e04 	add.w	lr, r9, r4
   e1c8c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e1c90:	f01e 0f04 	tst.w	lr, #4
   e1c94:	d001      	beq.n	e1c9a <_strtol_r+0x82>
   e1c96:	3c30      	subs	r4, #48	; 0x30
   e1c98:	e00b      	b.n	e1cb2 <_strtol_r+0x9a>
   e1c9a:	f01e 0e03 	ands.w	lr, lr, #3
   e1c9e:	d01b      	beq.n	e1cd8 <_strtol_r+0xc0>
   e1ca0:	f1be 0f01 	cmp.w	lr, #1
   e1ca4:	bf0c      	ite	eq
   e1ca6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e1caa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e1cae:	ebce 0404 	rsb	r4, lr, r4
   e1cb2:	42a3      	cmp	r3, r4
   e1cb4:	dd10      	ble.n	e1cd8 <_strtol_r+0xc0>
   e1cb6:	f1b7 3fff 	cmp.w	r7, #4294967295
   e1cba:	d00a      	beq.n	e1cd2 <_strtol_r+0xba>
   e1cbc:	4550      	cmp	r0, sl
   e1cbe:	d806      	bhi.n	e1cce <_strtol_r+0xb6>
   e1cc0:	d101      	bne.n	e1cc6 <_strtol_r+0xae>
   e1cc2:	4564      	cmp	r4, ip
   e1cc4:	dc03      	bgt.n	e1cce <_strtol_r+0xb6>
   e1cc6:	fb03 4000 	mla	r0, r3, r0, r4
   e1cca:	2701      	movs	r7, #1
   e1ccc:	e001      	b.n	e1cd2 <_strtol_r+0xba>
   e1cce:	f04f 37ff 	mov.w	r7, #4294967295
   e1cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
   e1cd6:	e7d7      	b.n	e1c88 <_strtol_r+0x70>
   e1cd8:	1c7b      	adds	r3, r7, #1
   e1cda:	d10c      	bne.n	e1cf6 <_strtol_r+0xde>
   e1cdc:	2e00      	cmp	r6, #0
   e1cde:	f04f 0322 	mov.w	r3, #34	; 0x22
   e1ce2:	bf14      	ite	ne
   e1ce4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e1ce8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e1cec:	f8c8 3000 	str.w	r3, [r8]
   e1cf0:	b92a      	cbnz	r2, e1cfe <_strtol_r+0xe6>
   e1cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1cf6:	b106      	cbz	r6, e1cfa <_strtol_r+0xe2>
   e1cf8:	4240      	negs	r0, r0
   e1cfa:	b172      	cbz	r2, e1d1a <_strtol_r+0x102>
   e1cfc:	b107      	cbz	r7, e1d00 <_strtol_r+0xe8>
   e1cfe:	1e69      	subs	r1, r5, #1
   e1d00:	6011      	str	r1, [r2, #0]
   e1d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1d06:	2430      	movs	r4, #48	; 0x30
   e1d08:	2b00      	cmp	r3, #0
   e1d0a:	d1b1      	bne.n	e1c70 <_strtol_r+0x58>
   e1d0c:	2308      	movs	r3, #8
   e1d0e:	e7af      	b.n	e1c70 <_strtol_r+0x58>
   e1d10:	230a      	movs	r3, #10
   e1d12:	e7ad      	b.n	e1c70 <_strtol_r+0x58>
   e1d14:	2c30      	cmp	r4, #48	; 0x30
   e1d16:	d0a3      	beq.n	e1c60 <_strtol_r+0x48>
   e1d18:	e7aa      	b.n	e1c70 <_strtol_r+0x58>
   e1d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1d1e:	bf00      	nop
   e1d20:	2003db20 	.word	0x2003db20

000e1d24 <strtol>:
   e1d24:	4613      	mov	r3, r2
   e1d26:	460a      	mov	r2, r1
   e1d28:	4601      	mov	r1, r0
   e1d2a:	4802      	ldr	r0, [pc, #8]	; (e1d34 <strtol+0x10>)
   e1d2c:	6800      	ldr	r0, [r0, #0]
   e1d2e:	f7ff bf73 	b.w	e1c18 <_strtol_r>
   e1d32:	bf00      	nop
   e1d34:	2003db84 	.word	0x2003db84

000e1d38 <_strtoul_r>:
   e1d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1d3c:	4680      	mov	r8, r0
   e1d3e:	483c      	ldr	r0, [pc, #240]	; (e1e30 <_strtoul_r+0xf8>)
   e1d40:	f8d0 9000 	ldr.w	r9, [r0]
   e1d44:	460e      	mov	r6, r1
   e1d46:	4635      	mov	r5, r6
   e1d48:	f815 4b01 	ldrb.w	r4, [r5], #1
   e1d4c:	eb09 0004 	add.w	r0, r9, r4
   e1d50:	7840      	ldrb	r0, [r0, #1]
   e1d52:	f000 0008 	and.w	r0, r0, #8
   e1d56:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e1d5a:	b108      	cbz	r0, e1d60 <_strtoul_r+0x28>
   e1d5c:	462e      	mov	r6, r5
   e1d5e:	e7f2      	b.n	e1d46 <_strtoul_r+0xe>
   e1d60:	2c2d      	cmp	r4, #45	; 0x2d
   e1d62:	d103      	bne.n	e1d6c <_strtoul_r+0x34>
   e1d64:	1cb5      	adds	r5, r6, #2
   e1d66:	7874      	ldrb	r4, [r6, #1]
   e1d68:	2701      	movs	r7, #1
   e1d6a:	e003      	b.n	e1d74 <_strtoul_r+0x3c>
   e1d6c:	2c2b      	cmp	r4, #43	; 0x2b
   e1d6e:	bf04      	itt	eq
   e1d70:	7874      	ldrbeq	r4, [r6, #1]
   e1d72:	1cb5      	addeq	r5, r6, #2
   e1d74:	b113      	cbz	r3, e1d7c <_strtoul_r+0x44>
   e1d76:	2b10      	cmp	r3, #16
   e1d78:	d10a      	bne.n	e1d90 <_strtoul_r+0x58>
   e1d7a:	e053      	b.n	e1e24 <_strtoul_r+0xec>
   e1d7c:	2c30      	cmp	r4, #48	; 0x30
   e1d7e:	d14f      	bne.n	e1e20 <_strtoul_r+0xe8>
   e1d80:	7828      	ldrb	r0, [r5, #0]
   e1d82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e1d86:	2858      	cmp	r0, #88	; 0x58
   e1d88:	d145      	bne.n	e1e16 <_strtoul_r+0xde>
   e1d8a:	786c      	ldrb	r4, [r5, #1]
   e1d8c:	2310      	movs	r3, #16
   e1d8e:	3502      	adds	r5, #2
   e1d90:	f04f 3cff 	mov.w	ip, #4294967295
   e1d94:	2600      	movs	r6, #0
   e1d96:	fbbc fcf3 	udiv	ip, ip, r3
   e1d9a:	fb03 fa0c 	mul.w	sl, r3, ip
   e1d9e:	ea6f 0a0a 	mvn.w	sl, sl
   e1da2:	4630      	mov	r0, r6
   e1da4:	eb09 0e04 	add.w	lr, r9, r4
   e1da8:	f89e e001 	ldrb.w	lr, [lr, #1]
   e1dac:	f01e 0f04 	tst.w	lr, #4
   e1db0:	d001      	beq.n	e1db6 <_strtoul_r+0x7e>
   e1db2:	3c30      	subs	r4, #48	; 0x30
   e1db4:	e00b      	b.n	e1dce <_strtoul_r+0x96>
   e1db6:	f01e 0e03 	ands.w	lr, lr, #3
   e1dba:	d01a      	beq.n	e1df2 <_strtoul_r+0xba>
   e1dbc:	f1be 0f01 	cmp.w	lr, #1
   e1dc0:	bf0c      	ite	eq
   e1dc2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e1dc6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e1dca:	ebce 0404 	rsb	r4, lr, r4
   e1dce:	42a3      	cmp	r3, r4
   e1dd0:	dd0f      	ble.n	e1df2 <_strtoul_r+0xba>
   e1dd2:	2e00      	cmp	r6, #0
   e1dd4:	db08      	blt.n	e1de8 <_strtoul_r+0xb0>
   e1dd6:	4560      	cmp	r0, ip
   e1dd8:	d806      	bhi.n	e1de8 <_strtoul_r+0xb0>
   e1dda:	d101      	bne.n	e1de0 <_strtoul_r+0xa8>
   e1ddc:	4554      	cmp	r4, sl
   e1dde:	dc03      	bgt.n	e1de8 <_strtoul_r+0xb0>
   e1de0:	fb03 4000 	mla	r0, r3, r0, r4
   e1de4:	2601      	movs	r6, #1
   e1de6:	e001      	b.n	e1dec <_strtoul_r+0xb4>
   e1de8:	f04f 36ff 	mov.w	r6, #4294967295
   e1dec:	f815 4b01 	ldrb.w	r4, [r5], #1
   e1df0:	e7d8      	b.n	e1da4 <_strtoul_r+0x6c>
   e1df2:	2e00      	cmp	r6, #0
   e1df4:	da07      	bge.n	e1e06 <_strtoul_r+0xce>
   e1df6:	2322      	movs	r3, #34	; 0x22
   e1df8:	f8c8 3000 	str.w	r3, [r8]
   e1dfc:	f04f 30ff 	mov.w	r0, #4294967295
   e1e00:	b92a      	cbnz	r2, e1e0e <_strtoul_r+0xd6>
   e1e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1e06:	b107      	cbz	r7, e1e0a <_strtoul_r+0xd2>
   e1e08:	4240      	negs	r0, r0
   e1e0a:	b172      	cbz	r2, e1e2a <_strtoul_r+0xf2>
   e1e0c:	b106      	cbz	r6, e1e10 <_strtoul_r+0xd8>
   e1e0e:	1e69      	subs	r1, r5, #1
   e1e10:	6011      	str	r1, [r2, #0]
   e1e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1e16:	2430      	movs	r4, #48	; 0x30
   e1e18:	2b00      	cmp	r3, #0
   e1e1a:	d1b9      	bne.n	e1d90 <_strtoul_r+0x58>
   e1e1c:	2308      	movs	r3, #8
   e1e1e:	e7b7      	b.n	e1d90 <_strtoul_r+0x58>
   e1e20:	230a      	movs	r3, #10
   e1e22:	e7b5      	b.n	e1d90 <_strtoul_r+0x58>
   e1e24:	2c30      	cmp	r4, #48	; 0x30
   e1e26:	d0ab      	beq.n	e1d80 <_strtoul_r+0x48>
   e1e28:	e7b2      	b.n	e1d90 <_strtoul_r+0x58>
   e1e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1e2e:	bf00      	nop
   e1e30:	2003db20 	.word	0x2003db20

000e1e34 <strtoul>:
   e1e34:	4613      	mov	r3, r2
   e1e36:	460a      	mov	r2, r1
   e1e38:	4601      	mov	r1, r0
   e1e3a:	4802      	ldr	r0, [pc, #8]	; (e1e44 <strtoul+0x10>)
   e1e3c:	6800      	ldr	r0, [r0, #0]
   e1e3e:	f7ff bf7b 	b.w	e1d38 <_strtoul_r>
   e1e42:	bf00      	nop
   e1e44:	2003db84 	.word	0x2003db84

000e1e48 <__get_current_time_locale>:
   e1e48:	4b04      	ldr	r3, [pc, #16]	; (e1e5c <__get_current_time_locale+0x14>)
   e1e4a:	4a05      	ldr	r2, [pc, #20]	; (e1e60 <__get_current_time_locale+0x18>)
   e1e4c:	6818      	ldr	r0, [r3, #0]
   e1e4e:	4b05      	ldr	r3, [pc, #20]	; (e1e64 <__get_current_time_locale+0x1c>)
   e1e50:	2800      	cmp	r0, #0
   e1e52:	bf14      	ite	ne
   e1e54:	4610      	movne	r0, r2
   e1e56:	4618      	moveq	r0, r3
   e1e58:	4770      	bx	lr
   e1e5a:	bf00      	nop
   e1e5c:	2003e6c8 	.word	0x2003e6c8
   e1e60:	2003e6cc 	.word	0x2003e6cc
   e1e64:	000e4778 	.word	0x000e4778

000e1e68 <tolower>:
   e1e68:	4b04      	ldr	r3, [pc, #16]	; (e1e7c <tolower+0x14>)
   e1e6a:	681b      	ldr	r3, [r3, #0]
   e1e6c:	4403      	add	r3, r0
   e1e6e:	785b      	ldrb	r3, [r3, #1]
   e1e70:	f003 0303 	and.w	r3, r3, #3
   e1e74:	2b01      	cmp	r3, #1
   e1e76:	bf08      	it	eq
   e1e78:	3020      	addeq	r0, #32
   e1e7a:	4770      	bx	lr
   e1e7c:	2003db20 	.word	0x2003db20

000e1e80 <__tzcalc_limits>:
   e1e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1e84:	4604      	mov	r4, r0
   e1e86:	f000 fd91 	bl	e29ac <__gettzinfo>
   e1e8a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e1e8e:	429c      	cmp	r4, r3
   e1e90:	f340 8096 	ble.w	e1fc0 <__tzcalc_limits+0x140>
   e1e94:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e1e98:	18e3      	adds	r3, r4, r3
   e1e9a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e1e9e:	109b      	asrs	r3, r3, #2
   e1ea0:	f240 156d 	movw	r5, #365	; 0x16d
   e1ea4:	fb05 3502 	mla	r5, r5, r2, r3
   e1ea8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e1eac:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e1eb0:	fb92 f3f3 	sdiv	r3, r2, r3
   e1eb4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e1eb8:	442b      	add	r3, r5
   e1eba:	18a5      	adds	r5, r4, r2
   e1ebc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e1ec0:	fb95 f5f2 	sdiv	r5, r5, r2
   e1ec4:	441d      	add	r5, r3
   e1ec6:	2364      	movs	r3, #100	; 0x64
   e1ec8:	fb94 f7f2 	sdiv	r7, r4, r2
   e1ecc:	fb94 f6f3 	sdiv	r6, r4, r3
   e1ed0:	fb02 4717 	mls	r7, r2, r7, r4
   e1ed4:	fb03 4616 	mls	r6, r3, r6, r4
   e1ed8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e1edc:	fab7 fe87 	clz	lr, r7
   e1ee0:	9301      	str	r3, [sp, #4]
   e1ee2:	f004 0303 	and.w	r3, r4, #3
   e1ee6:	6044      	str	r4, [r0, #4]
   e1ee8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e1eec:	4601      	mov	r1, r0
   e1eee:	9300      	str	r3, [sp, #0]
   e1ef0:	f04f 0c07 	mov.w	ip, #7
   e1ef4:	7a0b      	ldrb	r3, [r1, #8]
   e1ef6:	2b4a      	cmp	r3, #74	; 0x4a
   e1ef8:	d10e      	bne.n	e1f18 <__tzcalc_limits+0x98>
   e1efa:	694b      	ldr	r3, [r1, #20]
   e1efc:	9a00      	ldr	r2, [sp, #0]
   e1efe:	18ec      	adds	r4, r5, r3
   e1f00:	b902      	cbnz	r2, e1f04 <__tzcalc_limits+0x84>
   e1f02:	b906      	cbnz	r6, e1f06 <__tzcalc_limits+0x86>
   e1f04:	b927      	cbnz	r7, e1f10 <__tzcalc_limits+0x90>
   e1f06:	2b3b      	cmp	r3, #59	; 0x3b
   e1f08:	bfd4      	ite	le
   e1f0a:	2300      	movle	r3, #0
   e1f0c:	2301      	movgt	r3, #1
   e1f0e:	e000      	b.n	e1f12 <__tzcalc_limits+0x92>
   e1f10:	2300      	movs	r3, #0
   e1f12:	4423      	add	r3, r4
   e1f14:	3b01      	subs	r3, #1
   e1f16:	e03f      	b.n	e1f98 <__tzcalc_limits+0x118>
   e1f18:	2b44      	cmp	r3, #68	; 0x44
   e1f1a:	d102      	bne.n	e1f22 <__tzcalc_limits+0xa2>
   e1f1c:	694b      	ldr	r3, [r1, #20]
   e1f1e:	442b      	add	r3, r5
   e1f20:	e03a      	b.n	e1f98 <__tzcalc_limits+0x118>
   e1f22:	9b00      	ldr	r3, [sp, #0]
   e1f24:	b92b      	cbnz	r3, e1f32 <__tzcalc_limits+0xb2>
   e1f26:	2e00      	cmp	r6, #0
   e1f28:	bf0c      	ite	eq
   e1f2a:	46f0      	moveq	r8, lr
   e1f2c:	f04f 0801 	movne.w	r8, #1
   e1f30:	e000      	b.n	e1f34 <__tzcalc_limits+0xb4>
   e1f32:	46f0      	mov	r8, lr
   e1f34:	4b24      	ldr	r3, [pc, #144]	; (e1fc8 <__tzcalc_limits+0x148>)
   e1f36:	68cc      	ldr	r4, [r1, #12]
   e1f38:	2230      	movs	r2, #48	; 0x30
   e1f3a:	fb02 3808 	mla	r8, r2, r8, r3
   e1f3e:	f1a8 0a04 	sub.w	sl, r8, #4
   e1f42:	46a9      	mov	r9, r5
   e1f44:	2301      	movs	r3, #1
   e1f46:	42a3      	cmp	r3, r4
   e1f48:	da04      	bge.n	e1f54 <__tzcalc_limits+0xd4>
   e1f4a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e1f4e:	3301      	adds	r3, #1
   e1f50:	44d9      	add	r9, fp
   e1f52:	e7f8      	b.n	e1f46 <__tzcalc_limits+0xc6>
   e1f54:	f109 0304 	add.w	r3, r9, #4
   e1f58:	fb93 fbfc 	sdiv	fp, r3, ip
   e1f5c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e1f60:	2c01      	cmp	r4, #1
   e1f62:	ebca 0a03 	rsb	sl, sl, r3
   e1f66:	694b      	ldr	r3, [r1, #20]
   e1f68:	bfb8      	it	lt
   e1f6a:	2401      	movlt	r4, #1
   e1f6c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e1f70:	ebb3 0a0a 	subs.w	sl, r3, sl
   e1f74:	690b      	ldr	r3, [r1, #16]
   e1f76:	f104 34ff 	add.w	r4, r4, #4294967295
   e1f7a:	f103 33ff 	add.w	r3, r3, #4294967295
   e1f7e:	bf48      	it	mi
   e1f80:	f10a 0a07 	addmi.w	sl, sl, #7
   e1f84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e1f88:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e1f8c:	4453      	add	r3, sl
   e1f8e:	42a3      	cmp	r3, r4
   e1f90:	db01      	blt.n	e1f96 <__tzcalc_limits+0x116>
   e1f92:	3b07      	subs	r3, #7
   e1f94:	e7fb      	b.n	e1f8e <__tzcalc_limits+0x10e>
   e1f96:	444b      	add	r3, r9
   e1f98:	698c      	ldr	r4, [r1, #24]
   e1f9a:	4a0c      	ldr	r2, [pc, #48]	; (e1fcc <__tzcalc_limits+0x14c>)
   e1f9c:	fb02 4303 	mla	r3, r2, r3, r4
   e1fa0:	6a0c      	ldr	r4, [r1, #32]
   e1fa2:	4423      	add	r3, r4
   e1fa4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e1fa8:	9b01      	ldr	r3, [sp, #4]
   e1faa:	4299      	cmp	r1, r3
   e1fac:	d1a2      	bne.n	e1ef4 <__tzcalc_limits+0x74>
   e1fae:	69c3      	ldr	r3, [r0, #28]
   e1fb0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e1fb2:	4293      	cmp	r3, r2
   e1fb4:	bfac      	ite	ge
   e1fb6:	2300      	movge	r3, #0
   e1fb8:	2301      	movlt	r3, #1
   e1fba:	6003      	str	r3, [r0, #0]
   e1fbc:	2001      	movs	r0, #1
   e1fbe:	e000      	b.n	e1fc2 <__tzcalc_limits+0x142>
   e1fc0:	2000      	movs	r0, #0
   e1fc2:	b003      	add	sp, #12
   e1fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1fc8:	000e4534 	.word	0x000e4534
   e1fcc:	00015180 	.word	0x00015180

000e1fd0 <__tz_lock>:
   e1fd0:	4770      	bx	lr

000e1fd2 <__tz_unlock>:
   e1fd2:	4770      	bx	lr

000e1fd4 <_tzset_unlocked>:
   e1fd4:	4b01      	ldr	r3, [pc, #4]	; (e1fdc <_tzset_unlocked+0x8>)
   e1fd6:	6818      	ldr	r0, [r3, #0]
   e1fd8:	f000 b802 	b.w	e1fe0 <_tzset_unlocked_r>
   e1fdc:	2003db84 	.word	0x2003db84

000e1fe0 <_tzset_unlocked_r>:
   e1fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1fe4:	b08d      	sub	sp, #52	; 0x34
   e1fe6:	4607      	mov	r7, r0
   e1fe8:	f000 fce0 	bl	e29ac <__gettzinfo>
   e1fec:	49b0      	ldr	r1, [pc, #704]	; (e22b0 <_tzset_unlocked_r+0x2d0>)
   e1fee:	4eb1      	ldr	r6, [pc, #708]	; (e22b4 <_tzset_unlocked_r+0x2d4>)
   e1ff0:	4604      	mov	r4, r0
   e1ff2:	4638      	mov	r0, r7
   e1ff4:	f000 fcd2 	bl	e299c <_getenv_r>
   e1ff8:	4605      	mov	r5, r0
   e1ffa:	b960      	cbnz	r0, e2016 <_tzset_unlocked_r+0x36>
   e1ffc:	4bae      	ldr	r3, [pc, #696]	; (e22b8 <_tzset_unlocked_r+0x2d8>)
   e1ffe:	4aaf      	ldr	r2, [pc, #700]	; (e22bc <_tzset_unlocked_r+0x2dc>)
   e2000:	6018      	str	r0, [r3, #0]
   e2002:	4baf      	ldr	r3, [pc, #700]	; (e22c0 <_tzset_unlocked_r+0x2e0>)
   e2004:	6018      	str	r0, [r3, #0]
   e2006:	4baf      	ldr	r3, [pc, #700]	; (e22c4 <_tzset_unlocked_r+0x2e4>)
   e2008:	6830      	ldr	r0, [r6, #0]
   e200a:	601a      	str	r2, [r3, #0]
   e200c:	605a      	str	r2, [r3, #4]
   e200e:	f7f6 f977 	bl	d8300 <free>
   e2012:	6035      	str	r5, [r6, #0]
   e2014:	e148      	b.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e2016:	6831      	ldr	r1, [r6, #0]
   e2018:	b979      	cbnz	r1, e203a <_tzset_unlocked_r+0x5a>
   e201a:	6830      	ldr	r0, [r6, #0]
   e201c:	f7f6 f970 	bl	d8300 <free>
   e2020:	4628      	mov	r0, r5
   e2022:	f7fe ffa5 	bl	e0f70 <strlen>
   e2026:	1c41      	adds	r1, r0, #1
   e2028:	4638      	mov	r0, r7
   e202a:	f7f6 f9a1 	bl	d8370 <_malloc_r>
   e202e:	6030      	str	r0, [r6, #0]
   e2030:	b148      	cbz	r0, e2046 <_tzset_unlocked_r+0x66>
   e2032:	4629      	mov	r1, r5
   e2034:	f7fe fa80 	bl	e0538 <strcpy>
   e2038:	e005      	b.n	e2046 <_tzset_unlocked_r+0x66>
   e203a:	f7fe fa73 	bl	e0524 <strcmp>
   e203e:	2800      	cmp	r0, #0
   e2040:	f000 8132 	beq.w	e22a8 <_tzset_unlocked_r+0x2c8>
   e2044:	e7e9      	b.n	e201a <_tzset_unlocked_r+0x3a>
   e2046:	782b      	ldrb	r3, [r5, #0]
   e2048:	4a9f      	ldr	r2, [pc, #636]	; (e22c8 <_tzset_unlocked_r+0x2e8>)
   e204a:	49a0      	ldr	r1, [pc, #640]	; (e22cc <_tzset_unlocked_r+0x2ec>)
   e204c:	2b3a      	cmp	r3, #58	; 0x3a
   e204e:	bf08      	it	eq
   e2050:	3501      	addeq	r5, #1
   e2052:	ae0a      	add	r6, sp, #40	; 0x28
   e2054:	4633      	mov	r3, r6
   e2056:	4628      	mov	r0, r5
   e2058:	f7f6 f96a 	bl	d8330 <siscanf>
   e205c:	2800      	cmp	r0, #0
   e205e:	f340 8123 	ble.w	e22a8 <_tzset_unlocked_r+0x2c8>
   e2062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2064:	18ef      	adds	r7, r5, r3
   e2066:	5ceb      	ldrb	r3, [r5, r3]
   e2068:	2b2d      	cmp	r3, #45	; 0x2d
   e206a:	d103      	bne.n	e2074 <_tzset_unlocked_r+0x94>
   e206c:	3701      	adds	r7, #1
   e206e:	f04f 35ff 	mov.w	r5, #4294967295
   e2072:	e003      	b.n	e207c <_tzset_unlocked_r+0x9c>
   e2074:	2b2b      	cmp	r3, #43	; 0x2b
   e2076:	bf08      	it	eq
   e2078:	3701      	addeq	r7, #1
   e207a:	2501      	movs	r5, #1
   e207c:	f10d 0a20 	add.w	sl, sp, #32
   e2080:	f10d 0b1e 	add.w	fp, sp, #30
   e2084:	f04f 0800 	mov.w	r8, #0
   e2088:	9603      	str	r6, [sp, #12]
   e208a:	f8cd a008 	str.w	sl, [sp, #8]
   e208e:	9601      	str	r6, [sp, #4]
   e2090:	f8cd b000 	str.w	fp, [sp]
   e2094:	4633      	mov	r3, r6
   e2096:	aa07      	add	r2, sp, #28
   e2098:	498d      	ldr	r1, [pc, #564]	; (e22d0 <_tzset_unlocked_r+0x2f0>)
   e209a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e209e:	4638      	mov	r0, r7
   e20a0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e20a4:	f7f6 f944 	bl	d8330 <siscanf>
   e20a8:	4540      	cmp	r0, r8
   e20aa:	f340 80fd 	ble.w	e22a8 <_tzset_unlocked_r+0x2c8>
   e20ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e20b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e20b6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e22dc <_tzset_unlocked_r+0x2fc>
   e20ba:	213c      	movs	r1, #60	; 0x3c
   e20bc:	fb01 3302 	mla	r3, r1, r2, r3
   e20c0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e20c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e20c8:	fb01 3302 	mla	r3, r1, r2, r3
   e20cc:	435d      	muls	r5, r3
   e20ce:	6225      	str	r5, [r4, #32]
   e20d0:	4d7c      	ldr	r5, [pc, #496]	; (e22c4 <_tzset_unlocked_r+0x2e4>)
   e20d2:	4b7d      	ldr	r3, [pc, #500]	; (e22c8 <_tzset_unlocked_r+0x2e8>)
   e20d4:	602b      	str	r3, [r5, #0]
   e20d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e20d8:	497c      	ldr	r1, [pc, #496]	; (e22cc <_tzset_unlocked_r+0x2ec>)
   e20da:	441f      	add	r7, r3
   e20dc:	464a      	mov	r2, r9
   e20de:	4633      	mov	r3, r6
   e20e0:	4638      	mov	r0, r7
   e20e2:	f7f6 f925 	bl	d8330 <siscanf>
   e20e6:	4540      	cmp	r0, r8
   e20e8:	dc08      	bgt.n	e20fc <_tzset_unlocked_r+0x11c>
   e20ea:	682b      	ldr	r3, [r5, #0]
   e20ec:	606b      	str	r3, [r5, #4]
   e20ee:	4b72      	ldr	r3, [pc, #456]	; (e22b8 <_tzset_unlocked_r+0x2d8>)
   e20f0:	6a22      	ldr	r2, [r4, #32]
   e20f2:	601a      	str	r2, [r3, #0]
   e20f4:	4b72      	ldr	r3, [pc, #456]	; (e22c0 <_tzset_unlocked_r+0x2e0>)
   e20f6:	f8c3 8000 	str.w	r8, [r3]
   e20fa:	e0d5      	b.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e20fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e20fe:	f8c5 9004 	str.w	r9, [r5, #4]
   e2102:	18fd      	adds	r5, r7, r3
   e2104:	5cfb      	ldrb	r3, [r7, r3]
   e2106:	2b2d      	cmp	r3, #45	; 0x2d
   e2108:	d103      	bne.n	e2112 <_tzset_unlocked_r+0x132>
   e210a:	3501      	adds	r5, #1
   e210c:	f04f 37ff 	mov.w	r7, #4294967295
   e2110:	e003      	b.n	e211a <_tzset_unlocked_r+0x13a>
   e2112:	2b2b      	cmp	r3, #43	; 0x2b
   e2114:	bf08      	it	eq
   e2116:	3501      	addeq	r5, #1
   e2118:	2701      	movs	r7, #1
   e211a:	2300      	movs	r3, #0
   e211c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2120:	f8ad 301e 	strh.w	r3, [sp, #30]
   e2124:	f8ad 3020 	strh.w	r3, [sp, #32]
   e2128:	930a      	str	r3, [sp, #40]	; 0x28
   e212a:	9603      	str	r6, [sp, #12]
   e212c:	f8cd a008 	str.w	sl, [sp, #8]
   e2130:	9601      	str	r6, [sp, #4]
   e2132:	f8cd b000 	str.w	fp, [sp]
   e2136:	4633      	mov	r3, r6
   e2138:	aa07      	add	r2, sp, #28
   e213a:	4965      	ldr	r1, [pc, #404]	; (e22d0 <_tzset_unlocked_r+0x2f0>)
   e213c:	4628      	mov	r0, r5
   e213e:	f7f6 f8f7 	bl	d8330 <siscanf>
   e2142:	2800      	cmp	r0, #0
   e2144:	dc04      	bgt.n	e2150 <_tzset_unlocked_r+0x170>
   e2146:	6a23      	ldr	r3, [r4, #32]
   e2148:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e214c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e214e:	e00e      	b.n	e216e <_tzset_unlocked_r+0x18e>
   e2150:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2154:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2158:	213c      	movs	r1, #60	; 0x3c
   e215a:	fb01 3302 	mla	r3, r1, r2, r3
   e215e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2162:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2166:	fb01 3302 	mla	r3, r1, r2, r3
   e216a:	435f      	muls	r7, r3
   e216c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e216e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2170:	4627      	mov	r7, r4
   e2172:	441d      	add	r5, r3
   e2174:	f04f 0900 	mov.w	r9, #0
   e2178:	782b      	ldrb	r3, [r5, #0]
   e217a:	2b2c      	cmp	r3, #44	; 0x2c
   e217c:	bf08      	it	eq
   e217e:	3501      	addeq	r5, #1
   e2180:	f895 8000 	ldrb.w	r8, [r5]
   e2184:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e2188:	d126      	bne.n	e21d8 <_tzset_unlocked_r+0x1f8>
   e218a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e218e:	9302      	str	r3, [sp, #8]
   e2190:	ab09      	add	r3, sp, #36	; 0x24
   e2192:	9300      	str	r3, [sp, #0]
   e2194:	9603      	str	r6, [sp, #12]
   e2196:	9601      	str	r6, [sp, #4]
   e2198:	4633      	mov	r3, r6
   e219a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e219e:	494d      	ldr	r1, [pc, #308]	; (e22d4 <_tzset_unlocked_r+0x2f4>)
   e21a0:	4628      	mov	r0, r5
   e21a2:	f7f6 f8c5 	bl	d8330 <siscanf>
   e21a6:	2803      	cmp	r0, #3
   e21a8:	d17e      	bne.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e21aa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e21ae:	1e4b      	subs	r3, r1, #1
   e21b0:	2b0b      	cmp	r3, #11
   e21b2:	d879      	bhi.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e21b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e21b8:	1e53      	subs	r3, r2, #1
   e21ba:	2b04      	cmp	r3, #4
   e21bc:	d874      	bhi.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e21be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e21c2:	2b06      	cmp	r3, #6
   e21c4:	d870      	bhi.n	e22a8 <_tzset_unlocked_r+0x2c8>
   e21c6:	f887 8008 	strb.w	r8, [r7, #8]
   e21ca:	60f9      	str	r1, [r7, #12]
   e21cc:	613a      	str	r2, [r7, #16]
   e21ce:	617b      	str	r3, [r7, #20]
   e21d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e21d2:	eb05 0803 	add.w	r8, r5, r3
   e21d6:	e02a      	b.n	e222e <_tzset_unlocked_r+0x24e>
   e21d8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e21dc:	bf06      	itte	eq
   e21de:	3501      	addeq	r5, #1
   e21e0:	4643      	moveq	r3, r8
   e21e2:	2344      	movne	r3, #68	; 0x44
   e21e4:	220a      	movs	r2, #10
   e21e6:	a90b      	add	r1, sp, #44	; 0x2c
   e21e8:	4628      	mov	r0, r5
   e21ea:	9305      	str	r3, [sp, #20]
   e21ec:	f7ff fe22 	bl	e1e34 <strtoul>
   e21f0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e21f4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e21f8:	4545      	cmp	r5, r8
   e21fa:	9b05      	ldr	r3, [sp, #20]
   e21fc:	d114      	bne.n	e2228 <_tzset_unlocked_r+0x248>
   e21fe:	234d      	movs	r3, #77	; 0x4d
   e2200:	f1b9 0f00 	cmp.w	r9, #0
   e2204:	d107      	bne.n	e2216 <_tzset_unlocked_r+0x236>
   e2206:	7223      	strb	r3, [r4, #8]
   e2208:	2303      	movs	r3, #3
   e220a:	60e3      	str	r3, [r4, #12]
   e220c:	2302      	movs	r3, #2
   e220e:	6123      	str	r3, [r4, #16]
   e2210:	f8c4 9014 	str.w	r9, [r4, #20]
   e2214:	e00b      	b.n	e222e <_tzset_unlocked_r+0x24e>
   e2216:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e221a:	230b      	movs	r3, #11
   e221c:	62a3      	str	r3, [r4, #40]	; 0x28
   e221e:	2301      	movs	r3, #1
   e2220:	62e3      	str	r3, [r4, #44]	; 0x2c
   e2222:	2300      	movs	r3, #0
   e2224:	6323      	str	r3, [r4, #48]	; 0x30
   e2226:	e002      	b.n	e222e <_tzset_unlocked_r+0x24e>
   e2228:	b280      	uxth	r0, r0
   e222a:	723b      	strb	r3, [r7, #8]
   e222c:	6178      	str	r0, [r7, #20]
   e222e:	2302      	movs	r3, #2
   e2230:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2234:	2300      	movs	r3, #0
   e2236:	f8ad 301e 	strh.w	r3, [sp, #30]
   e223a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e223e:	930a      	str	r3, [sp, #40]	; 0x28
   e2240:	f898 3000 	ldrb.w	r3, [r8]
   e2244:	2b2f      	cmp	r3, #47	; 0x2f
   e2246:	d10b      	bne.n	e2260 <_tzset_unlocked_r+0x280>
   e2248:	9603      	str	r6, [sp, #12]
   e224a:	f8cd a008 	str.w	sl, [sp, #8]
   e224e:	9601      	str	r6, [sp, #4]
   e2250:	f8cd b000 	str.w	fp, [sp]
   e2254:	4633      	mov	r3, r6
   e2256:	aa07      	add	r2, sp, #28
   e2258:	491f      	ldr	r1, [pc, #124]	; (e22d8 <_tzset_unlocked_r+0x2f8>)
   e225a:	4640      	mov	r0, r8
   e225c:	f7f6 f868 	bl	d8330 <siscanf>
   e2260:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2264:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2268:	213c      	movs	r1, #60	; 0x3c
   e226a:	fb01 3302 	mla	r3, r1, r2, r3
   e226e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2272:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2276:	fb01 3302 	mla	r3, r1, r2, r3
   e227a:	61bb      	str	r3, [r7, #24]
   e227c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e227e:	f109 0901 	add.w	r9, r9, #1
   e2282:	f1b9 0f02 	cmp.w	r9, #2
   e2286:	4445      	add	r5, r8
   e2288:	f107 071c 	add.w	r7, r7, #28
   e228c:	f47f af74 	bne.w	e2178 <_tzset_unlocked_r+0x198>
   e2290:	6860      	ldr	r0, [r4, #4]
   e2292:	f7ff fdf5 	bl	e1e80 <__tzcalc_limits>
   e2296:	4b08      	ldr	r3, [pc, #32]	; (e22b8 <_tzset_unlocked_r+0x2d8>)
   e2298:	6a22      	ldr	r2, [r4, #32]
   e229a:	601a      	str	r2, [r3, #0]
   e229c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e229e:	1a9b      	subs	r3, r3, r2
   e22a0:	4a07      	ldr	r2, [pc, #28]	; (e22c0 <_tzset_unlocked_r+0x2e0>)
   e22a2:	bf18      	it	ne
   e22a4:	2301      	movne	r3, #1
   e22a6:	6013      	str	r3, [r2, #0]
   e22a8:	b00d      	add	sp, #52	; 0x34
   e22aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e22ae:	bf00      	nop
   e22b0:	000e4874 	.word	0x000e4874
   e22b4:	2003e7e0 	.word	0x2003e7e0
   e22b8:	2003e7e8 	.word	0x2003e7e8
   e22bc:	000e4877 	.word	0x000e4877
   e22c0:	2003e7e4 	.word	0x2003e7e4
   e22c4:	2003dbc0 	.word	0x2003dbc0
   e22c8:	2003e7d3 	.word	0x2003e7d3
   e22cc:	000e487b 	.word	0x000e487b
   e22d0:	000e489e 	.word	0x000e489e
   e22d4:	000e488a 	.word	0x000e488a
   e22d8:	000e489d 	.word	0x000e489d
   e22dc:	2003e7c8 	.word	0x2003e7c8

000e22e0 <abs>:
   e22e0:	2800      	cmp	r0, #0
   e22e2:	bfb8      	it	lt
   e22e4:	4240      	neglt	r0, r0
   e22e6:	4770      	bx	lr

000e22e8 <rshift>:
   e22e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   e22ea:	6906      	ldr	r6, [r0, #16]
   e22ec:	114b      	asrs	r3, r1, #5
   e22ee:	42b3      	cmp	r3, r6
   e22f0:	f100 0514 	add.w	r5, r0, #20
   e22f4:	da27      	bge.n	e2346 <rshift+0x5e>
   e22f6:	f011 011f 	ands.w	r1, r1, #31
   e22fa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e22fe:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e2302:	d101      	bne.n	e2308 <rshift+0x20>
   e2304:	4629      	mov	r1, r5
   e2306:	e016      	b.n	e2336 <rshift+0x4e>
   e2308:	1d14      	adds	r4, r2, #4
   e230a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e230e:	f1c1 0e20 	rsb	lr, r1, #32
   e2312:	40ca      	lsrs	r2, r1
   e2314:	462b      	mov	r3, r5
   e2316:	42b4      	cmp	r4, r6
   e2318:	d209      	bcs.n	e232e <rshift+0x46>
   e231a:	6827      	ldr	r7, [r4, #0]
   e231c:	fa07 f70e 	lsl.w	r7, r7, lr
   e2320:	433a      	orrs	r2, r7
   e2322:	f843 2b04 	str.w	r2, [r3], #4
   e2326:	f854 2b04 	ldr.w	r2, [r4], #4
   e232a:	40ca      	lsrs	r2, r1
   e232c:	e7f3      	b.n	e2316 <rshift+0x2e>
   e232e:	601a      	str	r2, [r3, #0]
   e2330:	b152      	cbz	r2, e2348 <rshift+0x60>
   e2332:	3304      	adds	r3, #4
   e2334:	e008      	b.n	e2348 <rshift+0x60>
   e2336:	42b2      	cmp	r2, r6
   e2338:	460b      	mov	r3, r1
   e233a:	d205      	bcs.n	e2348 <rshift+0x60>
   e233c:	f852 3b04 	ldr.w	r3, [r2], #4
   e2340:	f841 3b04 	str.w	r3, [r1], #4
   e2344:	e7f7      	b.n	e2336 <rshift+0x4e>
   e2346:	462b      	mov	r3, r5
   e2348:	1b5b      	subs	r3, r3, r5
   e234a:	109b      	asrs	r3, r3, #2
   e234c:	6103      	str	r3, [r0, #16]
   e234e:	b903      	cbnz	r3, e2352 <rshift+0x6a>
   e2350:	6143      	str	r3, [r0, #20]
   e2352:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e2354 <__hexdig_fun>:
   e2354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e2358:	2b09      	cmp	r3, #9
   e235a:	d801      	bhi.n	e2360 <__hexdig_fun+0xc>
   e235c:	3820      	subs	r0, #32
   e235e:	e00a      	b.n	e2376 <__hexdig_fun+0x22>
   e2360:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e2364:	2b05      	cmp	r3, #5
   e2366:	d801      	bhi.n	e236c <__hexdig_fun+0x18>
   e2368:	3847      	subs	r0, #71	; 0x47
   e236a:	e004      	b.n	e2376 <__hexdig_fun+0x22>
   e236c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e2370:	2b05      	cmp	r3, #5
   e2372:	d802      	bhi.n	e237a <__hexdig_fun+0x26>
   e2374:	3827      	subs	r0, #39	; 0x27
   e2376:	b2c0      	uxtb	r0, r0
   e2378:	4770      	bx	lr
   e237a:	2000      	movs	r0, #0
   e237c:	4770      	bx	lr

000e237e <__gethex>:
   e237e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2382:	b08b      	sub	sp, #44	; 0x2c
   e2384:	468a      	mov	sl, r1
   e2386:	4690      	mov	r8, r2
   e2388:	9306      	str	r3, [sp, #24]
   e238a:	9002      	str	r0, [sp, #8]
   e238c:	f7fe f88a 	bl	e04a4 <_localeconv_r>
   e2390:	6803      	ldr	r3, [r0, #0]
   e2392:	9303      	str	r3, [sp, #12]
   e2394:	4618      	mov	r0, r3
   e2396:	f7fe fdeb 	bl	e0f70 <strlen>
   e239a:	9b03      	ldr	r3, [sp, #12]
   e239c:	9001      	str	r0, [sp, #4]
   e239e:	4403      	add	r3, r0
   e23a0:	f04f 0b00 	mov.w	fp, #0
   e23a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e23a8:	9307      	str	r3, [sp, #28]
   e23aa:	f8da 3000 	ldr.w	r3, [sl]
   e23ae:	3302      	adds	r3, #2
   e23b0:	461f      	mov	r7, r3
   e23b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   e23b6:	2830      	cmp	r0, #48	; 0x30
   e23b8:	d102      	bne.n	e23c0 <__gethex+0x42>
   e23ba:	f10b 0b01 	add.w	fp, fp, #1
   e23be:	e7f7      	b.n	e23b0 <__gethex+0x32>
   e23c0:	f7ff ffc8 	bl	e2354 <__hexdig_fun>
   e23c4:	4604      	mov	r4, r0
   e23c6:	b9e0      	cbnz	r0, e2402 <__gethex+0x84>
   e23c8:	9a01      	ldr	r2, [sp, #4]
   e23ca:	9903      	ldr	r1, [sp, #12]
   e23cc:	4638      	mov	r0, r7
   e23ce:	f7fe fdd7 	bl	e0f80 <strncmp>
   e23d2:	2800      	cmp	r0, #0
   e23d4:	d134      	bne.n	e2440 <__gethex+0xc2>
   e23d6:	9b01      	ldr	r3, [sp, #4]
   e23d8:	5cf8      	ldrb	r0, [r7, r3]
   e23da:	18fe      	adds	r6, r7, r3
   e23dc:	f7ff ffba 	bl	e2354 <__hexdig_fun>
   e23e0:	b380      	cbz	r0, e2444 <__gethex+0xc6>
   e23e2:	4633      	mov	r3, r6
   e23e4:	7818      	ldrb	r0, [r3, #0]
   e23e6:	2830      	cmp	r0, #48	; 0x30
   e23e8:	461f      	mov	r7, r3
   e23ea:	f103 0301 	add.w	r3, r3, #1
   e23ee:	d0f9      	beq.n	e23e4 <__gethex+0x66>
   e23f0:	f7ff ffb0 	bl	e2354 <__hexdig_fun>
   e23f4:	fab0 f580 	clz	r5, r0
   e23f8:	096d      	lsrs	r5, r5, #5
   e23fa:	4634      	mov	r4, r6
   e23fc:	f04f 0b01 	mov.w	fp, #1
   e2400:	e001      	b.n	e2406 <__gethex+0x88>
   e2402:	2500      	movs	r5, #0
   e2404:	462c      	mov	r4, r5
   e2406:	463a      	mov	r2, r7
   e2408:	4616      	mov	r6, r2
   e240a:	3201      	adds	r2, #1
   e240c:	7830      	ldrb	r0, [r6, #0]
   e240e:	f7ff ffa1 	bl	e2354 <__hexdig_fun>
   e2412:	2800      	cmp	r0, #0
   e2414:	d1f8      	bne.n	e2408 <__gethex+0x8a>
   e2416:	9a01      	ldr	r2, [sp, #4]
   e2418:	9903      	ldr	r1, [sp, #12]
   e241a:	4630      	mov	r0, r6
   e241c:	f7fe fdb0 	bl	e0f80 <strncmp>
   e2420:	b950      	cbnz	r0, e2438 <__gethex+0xba>
   e2422:	b954      	cbnz	r4, e243a <__gethex+0xbc>
   e2424:	9b01      	ldr	r3, [sp, #4]
   e2426:	18f4      	adds	r4, r6, r3
   e2428:	4622      	mov	r2, r4
   e242a:	4616      	mov	r6, r2
   e242c:	3201      	adds	r2, #1
   e242e:	7830      	ldrb	r0, [r6, #0]
   e2430:	f7ff ff90 	bl	e2354 <__hexdig_fun>
   e2434:	2800      	cmp	r0, #0
   e2436:	d1f8      	bne.n	e242a <__gethex+0xac>
   e2438:	b134      	cbz	r4, e2448 <__gethex+0xca>
   e243a:	1ba4      	subs	r4, r4, r6
   e243c:	00a4      	lsls	r4, r4, #2
   e243e:	e003      	b.n	e2448 <__gethex+0xca>
   e2440:	463e      	mov	r6, r7
   e2442:	e000      	b.n	e2446 <__gethex+0xc8>
   e2444:	4604      	mov	r4, r0
   e2446:	2501      	movs	r5, #1
   e2448:	7833      	ldrb	r3, [r6, #0]
   e244a:	2b50      	cmp	r3, #80	; 0x50
   e244c:	d001      	beq.n	e2452 <__gethex+0xd4>
   e244e:	2b70      	cmp	r3, #112	; 0x70
   e2450:	d12a      	bne.n	e24a8 <__gethex+0x12a>
   e2452:	7873      	ldrb	r3, [r6, #1]
   e2454:	2b2b      	cmp	r3, #43	; 0x2b
   e2456:	d008      	beq.n	e246a <__gethex+0xec>
   e2458:	2b2d      	cmp	r3, #45	; 0x2d
   e245a:	d003      	beq.n	e2464 <__gethex+0xe6>
   e245c:	1c71      	adds	r1, r6, #1
   e245e:	f04f 0900 	mov.w	r9, #0
   e2462:	e005      	b.n	e2470 <__gethex+0xf2>
   e2464:	f04f 0901 	mov.w	r9, #1
   e2468:	e001      	b.n	e246e <__gethex+0xf0>
   e246a:	f04f 0900 	mov.w	r9, #0
   e246e:	1cb1      	adds	r1, r6, #2
   e2470:	7808      	ldrb	r0, [r1, #0]
   e2472:	f7ff ff6f 	bl	e2354 <__hexdig_fun>
   e2476:	1e43      	subs	r3, r0, #1
   e2478:	b2db      	uxtb	r3, r3
   e247a:	2b18      	cmp	r3, #24
   e247c:	d814      	bhi.n	e24a8 <__gethex+0x12a>
   e247e:	f1a0 0210 	sub.w	r2, r0, #16
   e2482:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e2486:	f7ff ff65 	bl	e2354 <__hexdig_fun>
   e248a:	1e43      	subs	r3, r0, #1
   e248c:	b2db      	uxtb	r3, r3
   e248e:	2b18      	cmp	r3, #24
   e2490:	d804      	bhi.n	e249c <__gethex+0x11e>
   e2492:	230a      	movs	r3, #10
   e2494:	fb03 0202 	mla	r2, r3, r2, r0
   e2498:	3a10      	subs	r2, #16
   e249a:	e7f2      	b.n	e2482 <__gethex+0x104>
   e249c:	f1b9 0f00 	cmp.w	r9, #0
   e24a0:	d000      	beq.n	e24a4 <__gethex+0x126>
   e24a2:	4252      	negs	r2, r2
   e24a4:	4414      	add	r4, r2
   e24a6:	e000      	b.n	e24aa <__gethex+0x12c>
   e24a8:	4631      	mov	r1, r6
   e24aa:	f8ca 1000 	str.w	r1, [sl]
   e24ae:	b12d      	cbz	r5, e24bc <__gethex+0x13e>
   e24b0:	f1bb 0f00 	cmp.w	fp, #0
   e24b4:	bf14      	ite	ne
   e24b6:	2000      	movne	r0, #0
   e24b8:	2006      	moveq	r0, #6
   e24ba:	e17c      	b.n	e27b6 <__gethex+0x438>
   e24bc:	1bf3      	subs	r3, r6, r7
   e24be:	3b01      	subs	r3, #1
   e24c0:	4629      	mov	r1, r5
   e24c2:	2b07      	cmp	r3, #7
   e24c4:	dd02      	ble.n	e24cc <__gethex+0x14e>
   e24c6:	3101      	adds	r1, #1
   e24c8:	105b      	asrs	r3, r3, #1
   e24ca:	e7fa      	b.n	e24c2 <__gethex+0x144>
   e24cc:	9802      	ldr	r0, [sp, #8]
   e24ce:	f000 fb0d 	bl	e2aec <_Balloc>
   e24d2:	9b01      	ldr	r3, [sp, #4]
   e24d4:	f100 0a14 	add.w	sl, r0, #20
   e24d8:	f04f 0900 	mov.w	r9, #0
   e24dc:	f1c3 0301 	rsb	r3, r3, #1
   e24e0:	4605      	mov	r5, r0
   e24e2:	f8cd a010 	str.w	sl, [sp, #16]
   e24e6:	46cb      	mov	fp, r9
   e24e8:	9308      	str	r3, [sp, #32]
   e24ea:	42b7      	cmp	r7, r6
   e24ec:	d22f      	bcs.n	e254e <__gethex+0x1d0>
   e24ee:	1e73      	subs	r3, r6, #1
   e24f0:	9305      	str	r3, [sp, #20]
   e24f2:	9a07      	ldr	r2, [sp, #28]
   e24f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e24f8:	4293      	cmp	r3, r2
   e24fa:	d00b      	beq.n	e2514 <__gethex+0x196>
   e24fc:	f1bb 0f20 	cmp.w	fp, #32
   e2500:	d116      	bne.n	e2530 <__gethex+0x1b2>
   e2502:	9b04      	ldr	r3, [sp, #16]
   e2504:	f8c3 9000 	str.w	r9, [r3]
   e2508:	3304      	adds	r3, #4
   e250a:	f04f 0900 	mov.w	r9, #0
   e250e:	9304      	str	r3, [sp, #16]
   e2510:	46cb      	mov	fp, r9
   e2512:	e00d      	b.n	e2530 <__gethex+0x1b2>
   e2514:	9b05      	ldr	r3, [sp, #20]
   e2516:	9a08      	ldr	r2, [sp, #32]
   e2518:	4413      	add	r3, r2
   e251a:	429f      	cmp	r7, r3
   e251c:	d8ee      	bhi.n	e24fc <__gethex+0x17e>
   e251e:	4618      	mov	r0, r3
   e2520:	9a01      	ldr	r2, [sp, #4]
   e2522:	9903      	ldr	r1, [sp, #12]
   e2524:	9309      	str	r3, [sp, #36]	; 0x24
   e2526:	f7fe fd2b 	bl	e0f80 <strncmp>
   e252a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e252c:	b168      	cbz	r0, e254a <__gethex+0x1cc>
   e252e:	e7e5      	b.n	e24fc <__gethex+0x17e>
   e2530:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e2534:	f7ff ff0e 	bl	e2354 <__hexdig_fun>
   e2538:	f000 000f 	and.w	r0, r0, #15
   e253c:	fa00 f00b 	lsl.w	r0, r0, fp
   e2540:	9b05      	ldr	r3, [sp, #20]
   e2542:	ea49 0900 	orr.w	r9, r9, r0
   e2546:	f10b 0b04 	add.w	fp, fp, #4
   e254a:	461e      	mov	r6, r3
   e254c:	e7cd      	b.n	e24ea <__gethex+0x16c>
   e254e:	9804      	ldr	r0, [sp, #16]
   e2550:	f840 9b04 	str.w	r9, [r0], #4
   e2554:	ebca 0000 	rsb	r0, sl, r0
   e2558:	1080      	asrs	r0, r0, #2
   e255a:	6128      	str	r0, [r5, #16]
   e255c:	0147      	lsls	r7, r0, #5
   e255e:	4648      	mov	r0, r9
   e2560:	f000 fb89 	bl	e2c76 <__hi0bits>
   e2564:	f8d8 6000 	ldr.w	r6, [r8]
   e2568:	1a38      	subs	r0, r7, r0
   e256a:	42b0      	cmp	r0, r6
   e256c:	dd26      	ble.n	e25bc <__gethex+0x23e>
   e256e:	1b87      	subs	r7, r0, r6
   e2570:	4639      	mov	r1, r7
   e2572:	4628      	mov	r0, r5
   e2574:	f000 fe87 	bl	e3286 <__any_on>
   e2578:	b1c8      	cbz	r0, e25ae <__gethex+0x230>
   e257a:	1e7b      	subs	r3, r7, #1
   e257c:	1159      	asrs	r1, r3, #5
   e257e:	f003 021f 	and.w	r2, r3, #31
   e2582:	f04f 0901 	mov.w	r9, #1
   e2586:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e258a:	fa09 f202 	lsl.w	r2, r9, r2
   e258e:	420a      	tst	r2, r1
   e2590:	d00e      	beq.n	e25b0 <__gethex+0x232>
   e2592:	454b      	cmp	r3, r9
   e2594:	dc02      	bgt.n	e259c <__gethex+0x21e>
   e2596:	f04f 0902 	mov.w	r9, #2
   e259a:	e009      	b.n	e25b0 <__gethex+0x232>
   e259c:	1eb9      	subs	r1, r7, #2
   e259e:	4628      	mov	r0, r5
   e25a0:	f000 fe71 	bl	e3286 <__any_on>
   e25a4:	2800      	cmp	r0, #0
   e25a6:	d0f6      	beq.n	e2596 <__gethex+0x218>
   e25a8:	f04f 0903 	mov.w	r9, #3
   e25ac:	e000      	b.n	e25b0 <__gethex+0x232>
   e25ae:	4681      	mov	r9, r0
   e25b0:	4639      	mov	r1, r7
   e25b2:	4628      	mov	r0, r5
   e25b4:	f7ff fe98 	bl	e22e8 <rshift>
   e25b8:	443c      	add	r4, r7
   e25ba:	e00c      	b.n	e25d6 <__gethex+0x258>
   e25bc:	da09      	bge.n	e25d2 <__gethex+0x254>
   e25be:	1a37      	subs	r7, r6, r0
   e25c0:	4629      	mov	r1, r5
   e25c2:	463a      	mov	r2, r7
   e25c4:	9802      	ldr	r0, [sp, #8]
   e25c6:	f000 fc8b 	bl	e2ee0 <__lshift>
   e25ca:	1be4      	subs	r4, r4, r7
   e25cc:	4605      	mov	r5, r0
   e25ce:	f100 0a14 	add.w	sl, r0, #20
   e25d2:	f04f 0900 	mov.w	r9, #0
   e25d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e25da:	429c      	cmp	r4, r3
   e25dc:	dd08      	ble.n	e25f0 <__gethex+0x272>
   e25de:	9802      	ldr	r0, [sp, #8]
   e25e0:	4629      	mov	r1, r5
   e25e2:	f000 fab8 	bl	e2b56 <_Bfree>
   e25e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e25e8:	2300      	movs	r3, #0
   e25ea:	6013      	str	r3, [r2, #0]
   e25ec:	20a3      	movs	r0, #163	; 0xa3
   e25ee:	e0e2      	b.n	e27b6 <__gethex+0x438>
   e25f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e25f4:	4284      	cmp	r4, r0
   e25f6:	da53      	bge.n	e26a0 <__gethex+0x322>
   e25f8:	1b04      	subs	r4, r0, r4
   e25fa:	42a6      	cmp	r6, r4
   e25fc:	dc2e      	bgt.n	e265c <__gethex+0x2de>
   e25fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2602:	2b02      	cmp	r3, #2
   e2604:	d01a      	beq.n	e263c <__gethex+0x2be>
   e2606:	2b03      	cmp	r3, #3
   e2608:	d01c      	beq.n	e2644 <__gethex+0x2c6>
   e260a:	2b01      	cmp	r3, #1
   e260c:	d11d      	bne.n	e264a <__gethex+0x2cc>
   e260e:	42a6      	cmp	r6, r4
   e2610:	d11b      	bne.n	e264a <__gethex+0x2cc>
   e2612:	2e01      	cmp	r6, #1
   e2614:	dc0b      	bgt.n	e262e <__gethex+0x2b0>
   e2616:	9a06      	ldr	r2, [sp, #24]
   e2618:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e261c:	6013      	str	r3, [r2, #0]
   e261e:	2301      	movs	r3, #1
   e2620:	612b      	str	r3, [r5, #16]
   e2622:	f8ca 3000 	str.w	r3, [sl]
   e2626:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2628:	2062      	movs	r0, #98	; 0x62
   e262a:	601d      	str	r5, [r3, #0]
   e262c:	e0c3      	b.n	e27b6 <__gethex+0x438>
   e262e:	1e71      	subs	r1, r6, #1
   e2630:	4628      	mov	r0, r5
   e2632:	f000 fe28 	bl	e3286 <__any_on>
   e2636:	2800      	cmp	r0, #0
   e2638:	d1ed      	bne.n	e2616 <__gethex+0x298>
   e263a:	e006      	b.n	e264a <__gethex+0x2cc>
   e263c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e263e:	2b00      	cmp	r3, #0
   e2640:	d0e9      	beq.n	e2616 <__gethex+0x298>
   e2642:	e002      	b.n	e264a <__gethex+0x2cc>
   e2644:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2646:	2b00      	cmp	r3, #0
   e2648:	d1e5      	bne.n	e2616 <__gethex+0x298>
   e264a:	9802      	ldr	r0, [sp, #8]
   e264c:	4629      	mov	r1, r5
   e264e:	f000 fa82 	bl	e2b56 <_Bfree>
   e2652:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2654:	2300      	movs	r3, #0
   e2656:	6013      	str	r3, [r2, #0]
   e2658:	2050      	movs	r0, #80	; 0x50
   e265a:	e0ac      	b.n	e27b6 <__gethex+0x438>
   e265c:	1e67      	subs	r7, r4, #1
   e265e:	f1b9 0f00 	cmp.w	r9, #0
   e2662:	d106      	bne.n	e2672 <__gethex+0x2f4>
   e2664:	b13f      	cbz	r7, e2676 <__gethex+0x2f8>
   e2666:	4639      	mov	r1, r7
   e2668:	4628      	mov	r0, r5
   e266a:	f000 fe0c 	bl	e3286 <__any_on>
   e266e:	4681      	mov	r9, r0
   e2670:	e001      	b.n	e2676 <__gethex+0x2f8>
   e2672:	f04f 0901 	mov.w	r9, #1
   e2676:	117a      	asrs	r2, r7, #5
   e2678:	2301      	movs	r3, #1
   e267a:	f007 071f 	and.w	r7, r7, #31
   e267e:	fa03 f707 	lsl.w	r7, r3, r7
   e2682:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e2686:	4621      	mov	r1, r4
   e2688:	421f      	tst	r7, r3
   e268a:	4628      	mov	r0, r5
   e268c:	bf18      	it	ne
   e268e:	f049 0902 	orrne.w	r9, r9, #2
   e2692:	1b36      	subs	r6, r6, r4
   e2694:	f7ff fe28 	bl	e22e8 <rshift>
   e2698:	2702      	movs	r7, #2
   e269a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e269e:	e000      	b.n	e26a2 <__gethex+0x324>
   e26a0:	2701      	movs	r7, #1
   e26a2:	f1b9 0f00 	cmp.w	r9, #0
   e26a6:	f000 8081 	beq.w	e27ac <__gethex+0x42e>
   e26aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e26ae:	2b02      	cmp	r3, #2
   e26b0:	d00e      	beq.n	e26d0 <__gethex+0x352>
   e26b2:	2b03      	cmp	r3, #3
   e26b4:	d010      	beq.n	e26d8 <__gethex+0x35a>
   e26b6:	2b01      	cmp	r3, #1
   e26b8:	d176      	bne.n	e27a8 <__gethex+0x42a>
   e26ba:	f019 0f02 	tst.w	r9, #2
   e26be:	d073      	beq.n	e27a8 <__gethex+0x42a>
   e26c0:	f8da 0000 	ldr.w	r0, [sl]
   e26c4:	ea49 0900 	orr.w	r9, r9, r0
   e26c8:	f019 0f01 	tst.w	r9, #1
   e26cc:	d107      	bne.n	e26de <__gethex+0x360>
   e26ce:	e06b      	b.n	e27a8 <__gethex+0x42a>
   e26d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e26d2:	f1c3 0301 	rsb	r3, r3, #1
   e26d6:	9315      	str	r3, [sp, #84]	; 0x54
   e26d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e26da:	2b00      	cmp	r3, #0
   e26dc:	d064      	beq.n	e27a8 <__gethex+0x42a>
   e26de:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e26e2:	f105 0314 	add.w	r3, r5, #20
   e26e6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e26ea:	eb03 0109 	add.w	r1, r3, r9
   e26ee:	2000      	movs	r0, #0
   e26f0:	681a      	ldr	r2, [r3, #0]
   e26f2:	f1b2 3fff 	cmp.w	r2, #4294967295
   e26f6:	d002      	beq.n	e26fe <__gethex+0x380>
   e26f8:	3201      	adds	r2, #1
   e26fa:	601a      	str	r2, [r3, #0]
   e26fc:	e020      	b.n	e2740 <__gethex+0x3c2>
   e26fe:	f843 0b04 	str.w	r0, [r3], #4
   e2702:	4299      	cmp	r1, r3
   e2704:	d8f4      	bhi.n	e26f0 <__gethex+0x372>
   e2706:	68ab      	ldr	r3, [r5, #8]
   e2708:	459a      	cmp	sl, r3
   e270a:	db12      	blt.n	e2732 <__gethex+0x3b4>
   e270c:	6869      	ldr	r1, [r5, #4]
   e270e:	9802      	ldr	r0, [sp, #8]
   e2710:	3101      	adds	r1, #1
   e2712:	f000 f9eb 	bl	e2aec <_Balloc>
   e2716:	692a      	ldr	r2, [r5, #16]
   e2718:	3202      	adds	r2, #2
   e271a:	f105 010c 	add.w	r1, r5, #12
   e271e:	4683      	mov	fp, r0
   e2720:	0092      	lsls	r2, r2, #2
   e2722:	300c      	adds	r0, #12
   e2724:	f7fd fec2 	bl	e04ac <memcpy>
   e2728:	4629      	mov	r1, r5
   e272a:	9802      	ldr	r0, [sp, #8]
   e272c:	f000 fa13 	bl	e2b56 <_Bfree>
   e2730:	465d      	mov	r5, fp
   e2732:	692b      	ldr	r3, [r5, #16]
   e2734:	1c5a      	adds	r2, r3, #1
   e2736:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e273a:	612a      	str	r2, [r5, #16]
   e273c:	2201      	movs	r2, #1
   e273e:	615a      	str	r2, [r3, #20]
   e2740:	2f02      	cmp	r7, #2
   e2742:	f105 0214 	add.w	r2, r5, #20
   e2746:	d111      	bne.n	e276c <__gethex+0x3ee>
   e2748:	f8d8 3000 	ldr.w	r3, [r8]
   e274c:	3b01      	subs	r3, #1
   e274e:	429e      	cmp	r6, r3
   e2750:	d127      	bne.n	e27a2 <__gethex+0x424>
   e2752:	1171      	asrs	r1, r6, #5
   e2754:	2301      	movs	r3, #1
   e2756:	f006 061f 	and.w	r6, r6, #31
   e275a:	fa03 f606 	lsl.w	r6, r3, r6
   e275e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e2762:	421e      	tst	r6, r3
   e2764:	bf0c      	ite	eq
   e2766:	2702      	moveq	r7, #2
   e2768:	2701      	movne	r7, #1
   e276a:	e01a      	b.n	e27a2 <__gethex+0x424>
   e276c:	692b      	ldr	r3, [r5, #16]
   e276e:	459a      	cmp	sl, r3
   e2770:	da0a      	bge.n	e2788 <__gethex+0x40a>
   e2772:	2101      	movs	r1, #1
   e2774:	4628      	mov	r0, r5
   e2776:	f7ff fdb7 	bl	e22e8 <rshift>
   e277a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e277e:	3401      	adds	r4, #1
   e2780:	429c      	cmp	r4, r3
   e2782:	f73f af2c 	bgt.w	e25de <__gethex+0x260>
   e2786:	e00b      	b.n	e27a0 <__gethex+0x422>
   e2788:	f016 061f 	ands.w	r6, r6, #31
   e278c:	d008      	beq.n	e27a0 <__gethex+0x422>
   e278e:	4491      	add	r9, r2
   e2790:	f1c6 0620 	rsb	r6, r6, #32
   e2794:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e2798:	f000 fa6d 	bl	e2c76 <__hi0bits>
   e279c:	42b0      	cmp	r0, r6
   e279e:	dbe8      	blt.n	e2772 <__gethex+0x3f4>
   e27a0:	2701      	movs	r7, #1
   e27a2:	f047 0720 	orr.w	r7, r7, #32
   e27a6:	e001      	b.n	e27ac <__gethex+0x42e>
   e27a8:	f047 0710 	orr.w	r7, r7, #16
   e27ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e27ae:	601d      	str	r5, [r3, #0]
   e27b0:	9b06      	ldr	r3, [sp, #24]
   e27b2:	4638      	mov	r0, r7
   e27b4:	601c      	str	r4, [r3, #0]
   e27b6:	b00b      	add	sp, #44	; 0x2c
   e27b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e27bc <L_shift>:
   e27bc:	f1c2 0208 	rsb	r2, r2, #8
   e27c0:	0092      	lsls	r2, r2, #2
   e27c2:	b570      	push	{r4, r5, r6, lr}
   e27c4:	f1c2 0620 	rsb	r6, r2, #32
   e27c8:	6843      	ldr	r3, [r0, #4]
   e27ca:	6805      	ldr	r5, [r0, #0]
   e27cc:	fa03 f406 	lsl.w	r4, r3, r6
   e27d0:	432c      	orrs	r4, r5
   e27d2:	40d3      	lsrs	r3, r2
   e27d4:	6004      	str	r4, [r0, #0]
   e27d6:	f840 3f04 	str.w	r3, [r0, #4]!
   e27da:	4288      	cmp	r0, r1
   e27dc:	d3f4      	bcc.n	e27c8 <L_shift+0xc>
   e27de:	bd70      	pop	{r4, r5, r6, pc}

000e27e0 <__match>:
   e27e0:	b530      	push	{r4, r5, lr}
   e27e2:	6803      	ldr	r3, [r0, #0]
   e27e4:	f811 4b01 	ldrb.w	r4, [r1], #1
   e27e8:	3301      	adds	r3, #1
   e27ea:	b14c      	cbz	r4, e2800 <__match+0x20>
   e27ec:	781a      	ldrb	r2, [r3, #0]
   e27ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e27f2:	2d19      	cmp	r5, #25
   e27f4:	bf98      	it	ls
   e27f6:	3220      	addls	r2, #32
   e27f8:	42a2      	cmp	r2, r4
   e27fa:	d0f3      	beq.n	e27e4 <__match+0x4>
   e27fc:	2000      	movs	r0, #0
   e27fe:	bd30      	pop	{r4, r5, pc}
   e2800:	6003      	str	r3, [r0, #0]
   e2802:	2001      	movs	r0, #1
   e2804:	bd30      	pop	{r4, r5, pc}

000e2806 <__hexnan>:
   e2806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e280a:	680b      	ldr	r3, [r1, #0]
   e280c:	f8d0 b000 	ldr.w	fp, [r0]
   e2810:	115e      	asrs	r6, r3, #5
   e2812:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e2816:	f013 031f 	ands.w	r3, r3, #31
   e281a:	b085      	sub	sp, #20
   e281c:	bf18      	it	ne
   e281e:	3604      	addne	r6, #4
   e2820:	1f35      	subs	r5, r6, #4
   e2822:	4617      	mov	r7, r2
   e2824:	2200      	movs	r2, #0
   e2826:	4682      	mov	sl, r0
   e2828:	9301      	str	r3, [sp, #4]
   e282a:	f846 2c04 	str.w	r2, [r6, #-4]
   e282e:	46a8      	mov	r8, r5
   e2830:	462c      	mov	r4, r5
   e2832:	9200      	str	r2, [sp, #0]
   e2834:	4691      	mov	r9, r2
   e2836:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e283a:	2900      	cmp	r1, #0
   e283c:	d03c      	beq.n	e28b8 <__hexnan+0xb2>
   e283e:	4608      	mov	r0, r1
   e2840:	9203      	str	r2, [sp, #12]
   e2842:	9102      	str	r1, [sp, #8]
   e2844:	f7ff fd86 	bl	e2354 <__hexdig_fun>
   e2848:	9a03      	ldr	r2, [sp, #12]
   e284a:	bb00      	cbnz	r0, e288e <__hexnan+0x88>
   e284c:	9902      	ldr	r1, [sp, #8]
   e284e:	2920      	cmp	r1, #32
   e2850:	d816      	bhi.n	e2880 <__hexnan+0x7a>
   e2852:	9b00      	ldr	r3, [sp, #0]
   e2854:	4599      	cmp	r9, r3
   e2856:	ddee      	ble.n	e2836 <__hexnan+0x30>
   e2858:	4544      	cmp	r4, r8
   e285a:	d205      	bcs.n	e2868 <__hexnan+0x62>
   e285c:	2a07      	cmp	r2, #7
   e285e:	dc03      	bgt.n	e2868 <__hexnan+0x62>
   e2860:	4641      	mov	r1, r8
   e2862:	4620      	mov	r0, r4
   e2864:	f7ff ffaa 	bl	e27bc <L_shift>
   e2868:	42bc      	cmp	r4, r7
   e286a:	d923      	bls.n	e28b4 <__hexnan+0xae>
   e286c:	2300      	movs	r3, #0
   e286e:	f1a4 0804 	sub.w	r8, r4, #4
   e2872:	f844 3c04 	str.w	r3, [r4, #-4]
   e2876:	f8cd 9000 	str.w	r9, [sp]
   e287a:	4644      	mov	r4, r8
   e287c:	461a      	mov	r2, r3
   e287e:	e7da      	b.n	e2836 <__hexnan+0x30>
   e2880:	2929      	cmp	r1, #41	; 0x29
   e2882:	d148      	bne.n	e2916 <__hexnan+0x110>
   e2884:	f10b 0301 	add.w	r3, fp, #1
   e2888:	f8ca 3000 	str.w	r3, [sl]
   e288c:	e014      	b.n	e28b8 <__hexnan+0xb2>
   e288e:	3201      	adds	r2, #1
   e2890:	2a08      	cmp	r2, #8
   e2892:	f109 0901 	add.w	r9, r9, #1
   e2896:	dd06      	ble.n	e28a6 <__hexnan+0xa0>
   e2898:	42bc      	cmp	r4, r7
   e289a:	d9cc      	bls.n	e2836 <__hexnan+0x30>
   e289c:	2300      	movs	r3, #0
   e289e:	f844 3c04 	str.w	r3, [r4, #-4]
   e28a2:	2201      	movs	r2, #1
   e28a4:	3c04      	subs	r4, #4
   e28a6:	6821      	ldr	r1, [r4, #0]
   e28a8:	f000 000f 	and.w	r0, r0, #15
   e28ac:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e28b0:	6020      	str	r0, [r4, #0]
   e28b2:	e7c0      	b.n	e2836 <__hexnan+0x30>
   e28b4:	2208      	movs	r2, #8
   e28b6:	e7be      	b.n	e2836 <__hexnan+0x30>
   e28b8:	f1b9 0f00 	cmp.w	r9, #0
   e28bc:	d02b      	beq.n	e2916 <__hexnan+0x110>
   e28be:	4544      	cmp	r4, r8
   e28c0:	d205      	bcs.n	e28ce <__hexnan+0xc8>
   e28c2:	2a07      	cmp	r2, #7
   e28c4:	dc03      	bgt.n	e28ce <__hexnan+0xc8>
   e28c6:	4641      	mov	r1, r8
   e28c8:	4620      	mov	r0, r4
   e28ca:	f7ff ff77 	bl	e27bc <L_shift>
   e28ce:	42bc      	cmp	r4, r7
   e28d0:	d90c      	bls.n	e28ec <__hexnan+0xe6>
   e28d2:	463b      	mov	r3, r7
   e28d4:	f854 2b04 	ldr.w	r2, [r4], #4
   e28d8:	f843 2b04 	str.w	r2, [r3], #4
   e28dc:	42a5      	cmp	r5, r4
   e28de:	d2f9      	bcs.n	e28d4 <__hexnan+0xce>
   e28e0:	2200      	movs	r2, #0
   e28e2:	f843 2b04 	str.w	r2, [r3], #4
   e28e6:	429d      	cmp	r5, r3
   e28e8:	d2fb      	bcs.n	e28e2 <__hexnan+0xdc>
   e28ea:	e00b      	b.n	e2904 <__hexnan+0xfe>
   e28ec:	9b01      	ldr	r3, [sp, #4]
   e28ee:	b14b      	cbz	r3, e2904 <__hexnan+0xfe>
   e28f0:	f1c3 0220 	rsb	r2, r3, #32
   e28f4:	f04f 33ff 	mov.w	r3, #4294967295
   e28f8:	40d3      	lsrs	r3, r2
   e28fa:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e28fe:	4013      	ands	r3, r2
   e2900:	f846 3c04 	str.w	r3, [r6, #-4]
   e2904:	682b      	ldr	r3, [r5, #0]
   e2906:	b943      	cbnz	r3, e291a <__hexnan+0x114>
   e2908:	42bd      	cmp	r5, r7
   e290a:	d102      	bne.n	e2912 <__hexnan+0x10c>
   e290c:	2301      	movs	r3, #1
   e290e:	602b      	str	r3, [r5, #0]
   e2910:	e003      	b.n	e291a <__hexnan+0x114>
   e2912:	3d04      	subs	r5, #4
   e2914:	e7f6      	b.n	e2904 <__hexnan+0xfe>
   e2916:	2004      	movs	r0, #4
   e2918:	e000      	b.n	e291c <__hexnan+0x116>
   e291a:	2005      	movs	r0, #5
   e291c:	b005      	add	sp, #20
   e291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e2924 <_findenv_r>:
   e2924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2928:	4607      	mov	r7, r0
   e292a:	468b      	mov	fp, r1
   e292c:	4690      	mov	r8, r2
   e292e:	f000 fcda 	bl	e32e6 <__env_lock>
   e2932:	4b19      	ldr	r3, [pc, #100]	; (e2998 <_findenv_r+0x74>)
   e2934:	681d      	ldr	r5, [r3, #0]
   e2936:	469a      	mov	sl, r3
   e2938:	b13d      	cbz	r5, e294a <_findenv_r+0x26>
   e293a:	465c      	mov	r4, fp
   e293c:	4623      	mov	r3, r4
   e293e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e2942:	b142      	cbz	r2, e2956 <_findenv_r+0x32>
   e2944:	2a3d      	cmp	r2, #61	; 0x3d
   e2946:	461c      	mov	r4, r3
   e2948:	d1f8      	bne.n	e293c <_findenv_r+0x18>
   e294a:	4638      	mov	r0, r7
   e294c:	f000 fccc 	bl	e32e8 <__env_unlock>
   e2950:	2000      	movs	r0, #0
   e2952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2956:	ebcb 0404 	rsb	r4, fp, r4
   e295a:	46a9      	mov	r9, r5
   e295c:	f859 0b04 	ldr.w	r0, [r9], #4
   e2960:	2800      	cmp	r0, #0
   e2962:	d0f2      	beq.n	e294a <_findenv_r+0x26>
   e2964:	4622      	mov	r2, r4
   e2966:	4659      	mov	r1, fp
   e2968:	f7fe fb0a 	bl	e0f80 <strncmp>
   e296c:	b988      	cbnz	r0, e2992 <_findenv_r+0x6e>
   e296e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e2972:	191e      	adds	r6, r3, r4
   e2974:	5d1b      	ldrb	r3, [r3, r4]
   e2976:	2b3d      	cmp	r3, #61	; 0x3d
   e2978:	d10b      	bne.n	e2992 <_findenv_r+0x6e>
   e297a:	f8da 3000 	ldr.w	r3, [sl]
   e297e:	1aed      	subs	r5, r5, r3
   e2980:	10ad      	asrs	r5, r5, #2
   e2982:	4638      	mov	r0, r7
   e2984:	f8c8 5000 	str.w	r5, [r8]
   e2988:	f000 fcae 	bl	e32e8 <__env_unlock>
   e298c:	1c70      	adds	r0, r6, #1
   e298e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2992:	464d      	mov	r5, r9
   e2994:	e7e1      	b.n	e295a <_findenv_r+0x36>
   e2996:	bf00      	nop
   e2998:	2003dc08 	.word	0x2003dc08

000e299c <_getenv_r>:
   e299c:	b507      	push	{r0, r1, r2, lr}
   e299e:	aa01      	add	r2, sp, #4
   e29a0:	f7ff ffc0 	bl	e2924 <_findenv_r>
   e29a4:	b003      	add	sp, #12
   e29a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e29ac <__gettzinfo>:
   e29ac:	4800      	ldr	r0, [pc, #0]	; (e29b0 <__gettzinfo+0x4>)
   e29ae:	4770      	bx	lr
   e29b0:	2003dbc8 	.word	0x2003dbc8

000e29b4 <gmtime_r>:
   e29b4:	6802      	ldr	r2, [r0, #0]
   e29b6:	4b47      	ldr	r3, [pc, #284]	; (e2ad4 <gmtime_r+0x120>)
   e29b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   e29ba:	fb92 f4f3 	sdiv	r4, r2, r3
   e29be:	fb03 2214 	mls	r2, r3, r4, r2
   e29c2:	2a00      	cmp	r2, #0
   e29c4:	bfbc      	itt	lt
   e29c6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e29ca:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e29ce:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e29d2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e29d6:	fb92 f3f0 	sdiv	r3, r2, r0
   e29da:	fb00 2213 	mls	r2, r0, r3, r2
   e29de:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e29e2:	bfac      	ite	ge
   e29e4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e29e8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e29ec:	608b      	str	r3, [r1, #8]
   e29ee:	fb92 f3f0 	sdiv	r3, r2, r0
   e29f2:	fb00 2213 	mls	r2, r0, r3, r2
   e29f6:	604b      	str	r3, [r1, #4]
   e29f8:	600a      	str	r2, [r1, #0]
   e29fa:	2307      	movs	r3, #7
   e29fc:	1ce2      	adds	r2, r4, #3
   e29fe:	fb92 f3f3 	sdiv	r3, r2, r3
   e2a02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e2a06:	1ad3      	subs	r3, r2, r3
   e2a08:	618b      	str	r3, [r1, #24]
   e2a0a:	4b33      	ldr	r3, [pc, #204]	; (e2ad8 <gmtime_r+0x124>)
   e2a0c:	4d33      	ldr	r5, [pc, #204]	; (e2adc <gmtime_r+0x128>)
   e2a0e:	fb94 f5f5 	sdiv	r5, r4, r5
   e2a12:	fb03 4405 	mla	r4, r3, r5, r4
   e2a16:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e2a1a:	fbb4 f2f2 	udiv	r2, r4, r2
   e2a1e:	4422      	add	r2, r4
   e2a20:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e2a24:	fbb4 f3f7 	udiv	r3, r4, r7
   e2a28:	1ad2      	subs	r2, r2, r3
   e2a2a:	482d      	ldr	r0, [pc, #180]	; (e2ae0 <gmtime_r+0x12c>)
   e2a2c:	fbb4 f0f0 	udiv	r0, r4, r0
   e2a30:	f648 6694 	movw	r6, #36500	; 0x8e94
   e2a34:	1a13      	subs	r3, r2, r0
   e2a36:	fbb3 f6f6 	udiv	r6, r3, r6
   e2a3a:	4434      	add	r4, r6
   e2a3c:	f240 126d 	movw	r2, #365	; 0x16d
   e2a40:	fbb3 f0f2 	udiv	r0, r3, r2
   e2a44:	fbb3 f3f7 	udiv	r3, r3, r7
   e2a48:	1ae3      	subs	r3, r4, r3
   e2a4a:	fb02 3310 	mls	r3, r2, r0, r3
   e2a4e:	2499      	movs	r4, #153	; 0x99
   e2a50:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e2a54:	3202      	adds	r2, #2
   e2a56:	fbb2 f2f4 	udiv	r2, r2, r4
   e2a5a:	2a0a      	cmp	r2, #10
   e2a5c:	fb04 f402 	mul.w	r4, r4, r2
   e2a60:	f104 0602 	add.w	r6, r4, #2
   e2a64:	f04f 0405 	mov.w	r4, #5
   e2a68:	fbb6 f4f4 	udiv	r4, r6, r4
   e2a6c:	bf34      	ite	cc
   e2a6e:	2602      	movcc	r6, #2
   e2a70:	f06f 0609 	mvncs.w	r6, #9
   e2a74:	4416      	add	r6, r2
   e2a76:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2a7a:	fb02 0505 	mla	r5, r2, r5, r0
   e2a7e:	1c5f      	adds	r7, r3, #1
   e2a80:	2e01      	cmp	r6, #1
   e2a82:	bf98      	it	ls
   e2a84:	3501      	addls	r5, #1
   e2a86:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e2a8a:	eba7 0704 	sub.w	r7, r7, r4
   e2a8e:	d302      	bcc.n	e2a96 <gmtime_r+0xe2>
   e2a90:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e2a94:	e014      	b.n	e2ac0 <gmtime_r+0x10c>
   e2a96:	0782      	lsls	r2, r0, #30
   e2a98:	d105      	bne.n	e2aa6 <gmtime_r+0xf2>
   e2a9a:	2464      	movs	r4, #100	; 0x64
   e2a9c:	fbb0 f2f4 	udiv	r2, r0, r4
   e2aa0:	fb04 0212 	mls	r2, r4, r2, r0
   e2aa4:	b94a      	cbnz	r2, e2aba <gmtime_r+0x106>
   e2aa6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2aaa:	fbb0 f4f2 	udiv	r4, r0, r2
   e2aae:	fb02 0014 	mls	r0, r2, r4, r0
   e2ab2:	fab0 f280 	clz	r2, r0
   e2ab6:	0952      	lsrs	r2, r2, #5
   e2ab8:	e000      	b.n	e2abc <gmtime_r+0x108>
   e2aba:	2201      	movs	r2, #1
   e2abc:	333b      	adds	r3, #59	; 0x3b
   e2abe:	441a      	add	r2, r3
   e2ac0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e2ac4:	2300      	movs	r3, #0
   e2ac6:	61ca      	str	r2, [r1, #28]
   e2ac8:	614d      	str	r5, [r1, #20]
   e2aca:	610e      	str	r6, [r1, #16]
   e2acc:	60cf      	str	r7, [r1, #12]
   e2ace:	620b      	str	r3, [r1, #32]
   e2ad0:	4608      	mov	r0, r1
   e2ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2ad4:	00015180 	.word	0x00015180
   e2ad8:	fffdc54f 	.word	0xfffdc54f
   e2adc:	00023ab1 	.word	0x00023ab1
   e2ae0:	00023ab0 	.word	0x00023ab0

000e2ae4 <labs>:
   e2ae4:	2800      	cmp	r0, #0
   e2ae6:	bfb8      	it	lt
   e2ae8:	4240      	neglt	r0, r0
   e2aea:	4770      	bx	lr

000e2aec <_Balloc>:
   e2aec:	b570      	push	{r4, r5, r6, lr}
   e2aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e2af0:	4604      	mov	r4, r0
   e2af2:	460e      	mov	r6, r1
   e2af4:	b93d      	cbnz	r5, e2b06 <_Balloc+0x1a>
   e2af6:	2010      	movs	r0, #16
   e2af8:	f7f5 fbfa 	bl	d82f0 <malloc>
   e2afc:	6260      	str	r0, [r4, #36]	; 0x24
   e2afe:	6045      	str	r5, [r0, #4]
   e2b00:	6085      	str	r5, [r0, #8]
   e2b02:	6005      	str	r5, [r0, #0]
   e2b04:	60c5      	str	r5, [r0, #12]
   e2b06:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e2b08:	68eb      	ldr	r3, [r5, #12]
   e2b0a:	b143      	cbz	r3, e2b1e <_Balloc+0x32>
   e2b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e2b0e:	68db      	ldr	r3, [r3, #12]
   e2b10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e2b14:	b178      	cbz	r0, e2b36 <_Balloc+0x4a>
   e2b16:	6802      	ldr	r2, [r0, #0]
   e2b18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e2b1c:	e017      	b.n	e2b4e <_Balloc+0x62>
   e2b1e:	2221      	movs	r2, #33	; 0x21
   e2b20:	2104      	movs	r1, #4
   e2b22:	4620      	mov	r0, r4
   e2b24:	f000 fbd1 	bl	e32ca <_calloc_r>
   e2b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e2b2a:	60e8      	str	r0, [r5, #12]
   e2b2c:	68db      	ldr	r3, [r3, #12]
   e2b2e:	2b00      	cmp	r3, #0
   e2b30:	d1ec      	bne.n	e2b0c <_Balloc+0x20>
   e2b32:	2000      	movs	r0, #0
   e2b34:	bd70      	pop	{r4, r5, r6, pc}
   e2b36:	2101      	movs	r1, #1
   e2b38:	fa01 f506 	lsl.w	r5, r1, r6
   e2b3c:	1d6a      	adds	r2, r5, #5
   e2b3e:	0092      	lsls	r2, r2, #2
   e2b40:	4620      	mov	r0, r4
   e2b42:	f000 fbc2 	bl	e32ca <_calloc_r>
   e2b46:	2800      	cmp	r0, #0
   e2b48:	d0f3      	beq.n	e2b32 <_Balloc+0x46>
   e2b4a:	6046      	str	r6, [r0, #4]
   e2b4c:	6085      	str	r5, [r0, #8]
   e2b4e:	2300      	movs	r3, #0
   e2b50:	6103      	str	r3, [r0, #16]
   e2b52:	60c3      	str	r3, [r0, #12]
   e2b54:	bd70      	pop	{r4, r5, r6, pc}

000e2b56 <_Bfree>:
   e2b56:	b570      	push	{r4, r5, r6, lr}
   e2b58:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e2b5a:	4606      	mov	r6, r0
   e2b5c:	460d      	mov	r5, r1
   e2b5e:	b93c      	cbnz	r4, e2b70 <_Bfree+0x1a>
   e2b60:	2010      	movs	r0, #16
   e2b62:	f7f5 fbc5 	bl	d82f0 <malloc>
   e2b66:	6270      	str	r0, [r6, #36]	; 0x24
   e2b68:	6044      	str	r4, [r0, #4]
   e2b6a:	6084      	str	r4, [r0, #8]
   e2b6c:	6004      	str	r4, [r0, #0]
   e2b6e:	60c4      	str	r4, [r0, #12]
   e2b70:	b13d      	cbz	r5, e2b82 <_Bfree+0x2c>
   e2b72:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e2b74:	686a      	ldr	r2, [r5, #4]
   e2b76:	68db      	ldr	r3, [r3, #12]
   e2b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e2b7c:	6029      	str	r1, [r5, #0]
   e2b7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e2b82:	bd70      	pop	{r4, r5, r6, pc}

000e2b84 <__multadd>:
   e2b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2b88:	690d      	ldr	r5, [r1, #16]
   e2b8a:	461f      	mov	r7, r3
   e2b8c:	4606      	mov	r6, r0
   e2b8e:	460c      	mov	r4, r1
   e2b90:	f101 0e14 	add.w	lr, r1, #20
   e2b94:	2300      	movs	r3, #0
   e2b96:	f8de 0000 	ldr.w	r0, [lr]
   e2b9a:	b281      	uxth	r1, r0
   e2b9c:	fb02 7101 	mla	r1, r2, r1, r7
   e2ba0:	0c0f      	lsrs	r7, r1, #16
   e2ba2:	0c00      	lsrs	r0, r0, #16
   e2ba4:	fb02 7000 	mla	r0, r2, r0, r7
   e2ba8:	b289      	uxth	r1, r1
   e2baa:	3301      	adds	r3, #1
   e2bac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e2bb0:	429d      	cmp	r5, r3
   e2bb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e2bb6:	f84e 1b04 	str.w	r1, [lr], #4
   e2bba:	dcec      	bgt.n	e2b96 <__multadd+0x12>
   e2bbc:	b1d7      	cbz	r7, e2bf4 <__multadd+0x70>
   e2bbe:	68a3      	ldr	r3, [r4, #8]
   e2bc0:	429d      	cmp	r5, r3
   e2bc2:	db12      	blt.n	e2bea <__multadd+0x66>
   e2bc4:	6861      	ldr	r1, [r4, #4]
   e2bc6:	4630      	mov	r0, r6
   e2bc8:	3101      	adds	r1, #1
   e2bca:	f7ff ff8f 	bl	e2aec <_Balloc>
   e2bce:	6922      	ldr	r2, [r4, #16]
   e2bd0:	3202      	adds	r2, #2
   e2bd2:	f104 010c 	add.w	r1, r4, #12
   e2bd6:	4680      	mov	r8, r0
   e2bd8:	0092      	lsls	r2, r2, #2
   e2bda:	300c      	adds	r0, #12
   e2bdc:	f7fd fc66 	bl	e04ac <memcpy>
   e2be0:	4621      	mov	r1, r4
   e2be2:	4630      	mov	r0, r6
   e2be4:	f7ff ffb7 	bl	e2b56 <_Bfree>
   e2be8:	4644      	mov	r4, r8
   e2bea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e2bee:	3501      	adds	r5, #1
   e2bf0:	615f      	str	r7, [r3, #20]
   e2bf2:	6125      	str	r5, [r4, #16]
   e2bf4:	4620      	mov	r0, r4
   e2bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e2bfa <__s2b>:
   e2bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e2bfe:	460c      	mov	r4, r1
   e2c00:	4615      	mov	r5, r2
   e2c02:	461f      	mov	r7, r3
   e2c04:	2209      	movs	r2, #9
   e2c06:	3308      	adds	r3, #8
   e2c08:	4606      	mov	r6, r0
   e2c0a:	fb93 f3f2 	sdiv	r3, r3, r2
   e2c0e:	2100      	movs	r1, #0
   e2c10:	2201      	movs	r2, #1
   e2c12:	429a      	cmp	r2, r3
   e2c14:	da02      	bge.n	e2c1c <__s2b+0x22>
   e2c16:	0052      	lsls	r2, r2, #1
   e2c18:	3101      	adds	r1, #1
   e2c1a:	e7fa      	b.n	e2c12 <__s2b+0x18>
   e2c1c:	4630      	mov	r0, r6
   e2c1e:	f7ff ff65 	bl	e2aec <_Balloc>
   e2c22:	9b08      	ldr	r3, [sp, #32]
   e2c24:	6143      	str	r3, [r0, #20]
   e2c26:	2d09      	cmp	r5, #9
   e2c28:	f04f 0301 	mov.w	r3, #1
   e2c2c:	6103      	str	r3, [r0, #16]
   e2c2e:	dd11      	ble.n	e2c54 <__s2b+0x5a>
   e2c30:	f104 0809 	add.w	r8, r4, #9
   e2c34:	46c1      	mov	r9, r8
   e2c36:	442c      	add	r4, r5
   e2c38:	f819 3b01 	ldrb.w	r3, [r9], #1
   e2c3c:	4601      	mov	r1, r0
   e2c3e:	3b30      	subs	r3, #48	; 0x30
   e2c40:	220a      	movs	r2, #10
   e2c42:	4630      	mov	r0, r6
   e2c44:	f7ff ff9e 	bl	e2b84 <__multadd>
   e2c48:	45a1      	cmp	r9, r4
   e2c4a:	d1f5      	bne.n	e2c38 <__s2b+0x3e>
   e2c4c:	eb08 0405 	add.w	r4, r8, r5
   e2c50:	3c08      	subs	r4, #8
   e2c52:	e001      	b.n	e2c58 <__s2b+0x5e>
   e2c54:	340a      	adds	r4, #10
   e2c56:	2509      	movs	r5, #9
   e2c58:	1b2d      	subs	r5, r5, r4
   e2c5a:	1963      	adds	r3, r4, r5
   e2c5c:	429f      	cmp	r7, r3
   e2c5e:	dd08      	ble.n	e2c72 <__s2b+0x78>
   e2c60:	f814 3b01 	ldrb.w	r3, [r4], #1
   e2c64:	4601      	mov	r1, r0
   e2c66:	3b30      	subs	r3, #48	; 0x30
   e2c68:	220a      	movs	r2, #10
   e2c6a:	4630      	mov	r0, r6
   e2c6c:	f7ff ff8a 	bl	e2b84 <__multadd>
   e2c70:	e7f3      	b.n	e2c5a <__s2b+0x60>
   e2c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e2c76 <__hi0bits>:
   e2c76:	0c03      	lsrs	r3, r0, #16
   e2c78:	041b      	lsls	r3, r3, #16
   e2c7a:	b913      	cbnz	r3, e2c82 <__hi0bits+0xc>
   e2c7c:	0400      	lsls	r0, r0, #16
   e2c7e:	2310      	movs	r3, #16
   e2c80:	e000      	b.n	e2c84 <__hi0bits+0xe>
   e2c82:	2300      	movs	r3, #0
   e2c84:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e2c88:	bf04      	itt	eq
   e2c8a:	0200      	lsleq	r0, r0, #8
   e2c8c:	3308      	addeq	r3, #8
   e2c8e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e2c92:	bf04      	itt	eq
   e2c94:	0100      	lsleq	r0, r0, #4
   e2c96:	3304      	addeq	r3, #4
   e2c98:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e2c9c:	bf04      	itt	eq
   e2c9e:	0080      	lsleq	r0, r0, #2
   e2ca0:	3302      	addeq	r3, #2
   e2ca2:	2800      	cmp	r0, #0
   e2ca4:	db03      	blt.n	e2cae <__hi0bits+0x38>
   e2ca6:	0042      	lsls	r2, r0, #1
   e2ca8:	d503      	bpl.n	e2cb2 <__hi0bits+0x3c>
   e2caa:	1c58      	adds	r0, r3, #1
   e2cac:	4770      	bx	lr
   e2cae:	4618      	mov	r0, r3
   e2cb0:	4770      	bx	lr
   e2cb2:	2020      	movs	r0, #32
   e2cb4:	4770      	bx	lr

000e2cb6 <__lo0bits>:
   e2cb6:	6803      	ldr	r3, [r0, #0]
   e2cb8:	f013 0207 	ands.w	r2, r3, #7
   e2cbc:	d00b      	beq.n	e2cd6 <__lo0bits+0x20>
   e2cbe:	07d9      	lsls	r1, r3, #31
   e2cc0:	d422      	bmi.n	e2d08 <__lo0bits+0x52>
   e2cc2:	079a      	lsls	r2, r3, #30
   e2cc4:	bf4b      	itete	mi
   e2cc6:	085b      	lsrmi	r3, r3, #1
   e2cc8:	089b      	lsrpl	r3, r3, #2
   e2cca:	6003      	strmi	r3, [r0, #0]
   e2ccc:	6003      	strpl	r3, [r0, #0]
   e2cce:	bf4c      	ite	mi
   e2cd0:	2001      	movmi	r0, #1
   e2cd2:	2002      	movpl	r0, #2
   e2cd4:	4770      	bx	lr
   e2cd6:	b299      	uxth	r1, r3
   e2cd8:	b909      	cbnz	r1, e2cde <__lo0bits+0x28>
   e2cda:	0c1b      	lsrs	r3, r3, #16
   e2cdc:	2210      	movs	r2, #16
   e2cde:	f013 0fff 	tst.w	r3, #255	; 0xff
   e2ce2:	bf04      	itt	eq
   e2ce4:	0a1b      	lsreq	r3, r3, #8
   e2ce6:	3208      	addeq	r2, #8
   e2ce8:	0719      	lsls	r1, r3, #28
   e2cea:	bf04      	itt	eq
   e2cec:	091b      	lsreq	r3, r3, #4
   e2cee:	3204      	addeq	r2, #4
   e2cf0:	0799      	lsls	r1, r3, #30
   e2cf2:	bf04      	itt	eq
   e2cf4:	089b      	lsreq	r3, r3, #2
   e2cf6:	3202      	addeq	r2, #2
   e2cf8:	07d9      	lsls	r1, r3, #31
   e2cfa:	d402      	bmi.n	e2d02 <__lo0bits+0x4c>
   e2cfc:	085b      	lsrs	r3, r3, #1
   e2cfe:	d005      	beq.n	e2d0c <__lo0bits+0x56>
   e2d00:	3201      	adds	r2, #1
   e2d02:	6003      	str	r3, [r0, #0]
   e2d04:	4610      	mov	r0, r2
   e2d06:	4770      	bx	lr
   e2d08:	2000      	movs	r0, #0
   e2d0a:	4770      	bx	lr
   e2d0c:	2020      	movs	r0, #32
   e2d0e:	4770      	bx	lr

000e2d10 <__i2b>:
   e2d10:	b510      	push	{r4, lr}
   e2d12:	460c      	mov	r4, r1
   e2d14:	2101      	movs	r1, #1
   e2d16:	f7ff fee9 	bl	e2aec <_Balloc>
   e2d1a:	2201      	movs	r2, #1
   e2d1c:	6144      	str	r4, [r0, #20]
   e2d1e:	6102      	str	r2, [r0, #16]
   e2d20:	bd10      	pop	{r4, pc}

000e2d22 <__multiply>:
   e2d22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2d26:	4614      	mov	r4, r2
   e2d28:	690a      	ldr	r2, [r1, #16]
   e2d2a:	6923      	ldr	r3, [r4, #16]
   e2d2c:	429a      	cmp	r2, r3
   e2d2e:	bfb8      	it	lt
   e2d30:	460b      	movlt	r3, r1
   e2d32:	4688      	mov	r8, r1
   e2d34:	bfbc      	itt	lt
   e2d36:	46a0      	movlt	r8, r4
   e2d38:	461c      	movlt	r4, r3
   e2d3a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e2d3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e2d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2d46:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e2d4a:	eb07 0609 	add.w	r6, r7, r9
   e2d4e:	429e      	cmp	r6, r3
   e2d50:	bfc8      	it	gt
   e2d52:	3101      	addgt	r1, #1
   e2d54:	f7ff feca 	bl	e2aec <_Balloc>
   e2d58:	f100 0514 	add.w	r5, r0, #20
   e2d5c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e2d60:	462b      	mov	r3, r5
   e2d62:	2200      	movs	r2, #0
   e2d64:	4563      	cmp	r3, ip
   e2d66:	d202      	bcs.n	e2d6e <__multiply+0x4c>
   e2d68:	f843 2b04 	str.w	r2, [r3], #4
   e2d6c:	e7fa      	b.n	e2d64 <__multiply+0x42>
   e2d6e:	f104 0214 	add.w	r2, r4, #20
   e2d72:	f108 0114 	add.w	r1, r8, #20
   e2d76:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e2d7a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e2d7e:	9300      	str	r3, [sp, #0]
   e2d80:	9b00      	ldr	r3, [sp, #0]
   e2d82:	9201      	str	r2, [sp, #4]
   e2d84:	4293      	cmp	r3, r2
   e2d86:	d957      	bls.n	e2e38 <__multiply+0x116>
   e2d88:	f8b2 b000 	ldrh.w	fp, [r2]
   e2d8c:	f1bb 0f00 	cmp.w	fp, #0
   e2d90:	d023      	beq.n	e2dda <__multiply+0xb8>
   e2d92:	4689      	mov	r9, r1
   e2d94:	46ae      	mov	lr, r5
   e2d96:	f04f 0800 	mov.w	r8, #0
   e2d9a:	f859 4b04 	ldr.w	r4, [r9], #4
   e2d9e:	f8be a000 	ldrh.w	sl, [lr]
   e2da2:	b2a3      	uxth	r3, r4
   e2da4:	fb0b a303 	mla	r3, fp, r3, sl
   e2da8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e2dac:	f8de 4000 	ldr.w	r4, [lr]
   e2db0:	4443      	add	r3, r8
   e2db2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e2db6:	fb0b 840a 	mla	r4, fp, sl, r8
   e2dba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e2dbe:	46f2      	mov	sl, lr
   e2dc0:	b29b      	uxth	r3, r3
   e2dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e2dc6:	454f      	cmp	r7, r9
   e2dc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e2dcc:	f84a 3b04 	str.w	r3, [sl], #4
   e2dd0:	d901      	bls.n	e2dd6 <__multiply+0xb4>
   e2dd2:	46d6      	mov	lr, sl
   e2dd4:	e7e1      	b.n	e2d9a <__multiply+0x78>
   e2dd6:	f8ce 8004 	str.w	r8, [lr, #4]
   e2dda:	9b01      	ldr	r3, [sp, #4]
   e2ddc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e2de0:	3204      	adds	r2, #4
   e2de2:	f1ba 0f00 	cmp.w	sl, #0
   e2de6:	d021      	beq.n	e2e2c <__multiply+0x10a>
   e2de8:	682b      	ldr	r3, [r5, #0]
   e2dea:	462c      	mov	r4, r5
   e2dec:	4689      	mov	r9, r1
   e2dee:	f04f 0800 	mov.w	r8, #0
   e2df2:	f8b9 e000 	ldrh.w	lr, [r9]
   e2df6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e2dfa:	fb0a be0e 	mla	lr, sl, lr, fp
   e2dfe:	44f0      	add	r8, lr
   e2e00:	46a3      	mov	fp, r4
   e2e02:	b29b      	uxth	r3, r3
   e2e04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e2e08:	f84b 3b04 	str.w	r3, [fp], #4
   e2e0c:	f859 3b04 	ldr.w	r3, [r9], #4
   e2e10:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e2e14:	0c1b      	lsrs	r3, r3, #16
   e2e16:	fb0a e303 	mla	r3, sl, r3, lr
   e2e1a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e2e1e:	454f      	cmp	r7, r9
   e2e20:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e2e24:	d901      	bls.n	e2e2a <__multiply+0x108>
   e2e26:	465c      	mov	r4, fp
   e2e28:	e7e3      	b.n	e2df2 <__multiply+0xd0>
   e2e2a:	6063      	str	r3, [r4, #4]
   e2e2c:	3504      	adds	r5, #4
   e2e2e:	e7a7      	b.n	e2d80 <__multiply+0x5e>
   e2e30:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e2e34:	b913      	cbnz	r3, e2e3c <__multiply+0x11a>
   e2e36:	3e01      	subs	r6, #1
   e2e38:	2e00      	cmp	r6, #0
   e2e3a:	dcf9      	bgt.n	e2e30 <__multiply+0x10e>
   e2e3c:	6106      	str	r6, [r0, #16]
   e2e3e:	b003      	add	sp, #12
   e2e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e2e44 <__pow5mult>:
   e2e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e2e48:	4615      	mov	r5, r2
   e2e4a:	f012 0203 	ands.w	r2, r2, #3
   e2e4e:	4606      	mov	r6, r0
   e2e50:	460f      	mov	r7, r1
   e2e52:	d007      	beq.n	e2e64 <__pow5mult+0x20>
   e2e54:	3a01      	subs	r2, #1
   e2e56:	4c21      	ldr	r4, [pc, #132]	; (e2edc <__pow5mult+0x98>)
   e2e58:	2300      	movs	r3, #0
   e2e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e2e5e:	f7ff fe91 	bl	e2b84 <__multadd>
   e2e62:	4607      	mov	r7, r0
   e2e64:	10ad      	asrs	r5, r5, #2
   e2e66:	d036      	beq.n	e2ed6 <__pow5mult+0x92>
   e2e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e2e6a:	b93c      	cbnz	r4, e2e7c <__pow5mult+0x38>
   e2e6c:	2010      	movs	r0, #16
   e2e6e:	f7f5 fa3f 	bl	d82f0 <malloc>
   e2e72:	6270      	str	r0, [r6, #36]	; 0x24
   e2e74:	6044      	str	r4, [r0, #4]
   e2e76:	6084      	str	r4, [r0, #8]
   e2e78:	6004      	str	r4, [r0, #0]
   e2e7a:	60c4      	str	r4, [r0, #12]
   e2e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e2e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e2e84:	b94c      	cbnz	r4, e2e9a <__pow5mult+0x56>
   e2e86:	f240 2171 	movw	r1, #625	; 0x271
   e2e8a:	4630      	mov	r0, r6
   e2e8c:	f7ff ff40 	bl	e2d10 <__i2b>
   e2e90:	2300      	movs	r3, #0
   e2e92:	f8c8 0008 	str.w	r0, [r8, #8]
   e2e96:	4604      	mov	r4, r0
   e2e98:	6003      	str	r3, [r0, #0]
   e2e9a:	f04f 0800 	mov.w	r8, #0
   e2e9e:	07eb      	lsls	r3, r5, #31
   e2ea0:	d50a      	bpl.n	e2eb8 <__pow5mult+0x74>
   e2ea2:	4639      	mov	r1, r7
   e2ea4:	4622      	mov	r2, r4
   e2ea6:	4630      	mov	r0, r6
   e2ea8:	f7ff ff3b 	bl	e2d22 <__multiply>
   e2eac:	4639      	mov	r1, r7
   e2eae:	4681      	mov	r9, r0
   e2eb0:	4630      	mov	r0, r6
   e2eb2:	f7ff fe50 	bl	e2b56 <_Bfree>
   e2eb6:	464f      	mov	r7, r9
   e2eb8:	106d      	asrs	r5, r5, #1
   e2eba:	d00c      	beq.n	e2ed6 <__pow5mult+0x92>
   e2ebc:	6820      	ldr	r0, [r4, #0]
   e2ebe:	b108      	cbz	r0, e2ec4 <__pow5mult+0x80>
   e2ec0:	4604      	mov	r4, r0
   e2ec2:	e7ec      	b.n	e2e9e <__pow5mult+0x5a>
   e2ec4:	4622      	mov	r2, r4
   e2ec6:	4621      	mov	r1, r4
   e2ec8:	4630      	mov	r0, r6
   e2eca:	f7ff ff2a 	bl	e2d22 <__multiply>
   e2ece:	6020      	str	r0, [r4, #0]
   e2ed0:	f8c0 8000 	str.w	r8, [r0]
   e2ed4:	e7f4      	b.n	e2ec0 <__pow5mult+0x7c>
   e2ed6:	4638      	mov	r0, r7
   e2ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e2edc:	000e49a0 	.word	0x000e49a0

000e2ee0 <__lshift>:
   e2ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2ee4:	460c      	mov	r4, r1
   e2ee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e2eea:	6926      	ldr	r6, [r4, #16]
   e2eec:	6849      	ldr	r1, [r1, #4]
   e2eee:	68a3      	ldr	r3, [r4, #8]
   e2ef0:	4456      	add	r6, sl
   e2ef2:	4607      	mov	r7, r0
   e2ef4:	4691      	mov	r9, r2
   e2ef6:	1c75      	adds	r5, r6, #1
   e2ef8:	42ab      	cmp	r3, r5
   e2efa:	da02      	bge.n	e2f02 <__lshift+0x22>
   e2efc:	3101      	adds	r1, #1
   e2efe:	005b      	lsls	r3, r3, #1
   e2f00:	e7fa      	b.n	e2ef8 <__lshift+0x18>
   e2f02:	4638      	mov	r0, r7
   e2f04:	f7ff fdf2 	bl	e2aec <_Balloc>
   e2f08:	2300      	movs	r3, #0
   e2f0a:	4680      	mov	r8, r0
   e2f0c:	f100 0114 	add.w	r1, r0, #20
   e2f10:	461a      	mov	r2, r3
   e2f12:	4553      	cmp	r3, sl
   e2f14:	da03      	bge.n	e2f1e <__lshift+0x3e>
   e2f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e2f1a:	3301      	adds	r3, #1
   e2f1c:	e7f9      	b.n	e2f12 <__lshift+0x32>
   e2f1e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e2f22:	6920      	ldr	r0, [r4, #16]
   e2f24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e2f28:	f019 091f 	ands.w	r9, r9, #31
   e2f2c:	f104 0114 	add.w	r1, r4, #20
   e2f30:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e2f34:	d014      	beq.n	e2f60 <__lshift+0x80>
   e2f36:	f1c9 0c20 	rsb	ip, r9, #32
   e2f3a:	2200      	movs	r2, #0
   e2f3c:	6808      	ldr	r0, [r1, #0]
   e2f3e:	fa00 f009 	lsl.w	r0, r0, r9
   e2f42:	4302      	orrs	r2, r0
   e2f44:	469a      	mov	sl, r3
   e2f46:	f843 2b04 	str.w	r2, [r3], #4
   e2f4a:	f851 2b04 	ldr.w	r2, [r1], #4
   e2f4e:	458e      	cmp	lr, r1
   e2f50:	fa22 f20c 	lsr.w	r2, r2, ip
   e2f54:	d8f2      	bhi.n	e2f3c <__lshift+0x5c>
   e2f56:	f8ca 2004 	str.w	r2, [sl, #4]
   e2f5a:	b142      	cbz	r2, e2f6e <__lshift+0x8e>
   e2f5c:	1cb5      	adds	r5, r6, #2
   e2f5e:	e006      	b.n	e2f6e <__lshift+0x8e>
   e2f60:	3b04      	subs	r3, #4
   e2f62:	f851 2b04 	ldr.w	r2, [r1], #4
   e2f66:	f843 2f04 	str.w	r2, [r3, #4]!
   e2f6a:	458e      	cmp	lr, r1
   e2f6c:	d8f9      	bhi.n	e2f62 <__lshift+0x82>
   e2f6e:	3d01      	subs	r5, #1
   e2f70:	4638      	mov	r0, r7
   e2f72:	f8c8 5010 	str.w	r5, [r8, #16]
   e2f76:	4621      	mov	r1, r4
   e2f78:	f7ff fded 	bl	e2b56 <_Bfree>
   e2f7c:	4640      	mov	r0, r8
   e2f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e2f82 <__mcmp>:
   e2f82:	6903      	ldr	r3, [r0, #16]
   e2f84:	690a      	ldr	r2, [r1, #16]
   e2f86:	1a9b      	subs	r3, r3, r2
   e2f88:	b510      	push	{r4, lr}
   e2f8a:	d111      	bne.n	e2fb0 <__mcmp+0x2e>
   e2f8c:	0092      	lsls	r2, r2, #2
   e2f8e:	3014      	adds	r0, #20
   e2f90:	3114      	adds	r1, #20
   e2f92:	1883      	adds	r3, r0, r2
   e2f94:	440a      	add	r2, r1
   e2f96:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e2f9a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e2f9e:	428c      	cmp	r4, r1
   e2fa0:	d002      	beq.n	e2fa8 <__mcmp+0x26>
   e2fa2:	d307      	bcc.n	e2fb4 <__mcmp+0x32>
   e2fa4:	2001      	movs	r0, #1
   e2fa6:	bd10      	pop	{r4, pc}
   e2fa8:	4298      	cmp	r0, r3
   e2faa:	d3f4      	bcc.n	e2f96 <__mcmp+0x14>
   e2fac:	2000      	movs	r0, #0
   e2fae:	bd10      	pop	{r4, pc}
   e2fb0:	4618      	mov	r0, r3
   e2fb2:	bd10      	pop	{r4, pc}
   e2fb4:	f04f 30ff 	mov.w	r0, #4294967295
   e2fb8:	bd10      	pop	{r4, pc}

000e2fba <__mdiff>:
   e2fba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e2fbe:	460c      	mov	r4, r1
   e2fc0:	4607      	mov	r7, r0
   e2fc2:	4611      	mov	r1, r2
   e2fc4:	4620      	mov	r0, r4
   e2fc6:	4615      	mov	r5, r2
   e2fc8:	f7ff ffdb 	bl	e2f82 <__mcmp>
   e2fcc:	1e06      	subs	r6, r0, #0
   e2fce:	d108      	bne.n	e2fe2 <__mdiff+0x28>
   e2fd0:	4631      	mov	r1, r6
   e2fd2:	4638      	mov	r0, r7
   e2fd4:	f7ff fd8a 	bl	e2aec <_Balloc>
   e2fd8:	2301      	movs	r3, #1
   e2fda:	6103      	str	r3, [r0, #16]
   e2fdc:	6146      	str	r6, [r0, #20]
   e2fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e2fe2:	bfbc      	itt	lt
   e2fe4:	4623      	movlt	r3, r4
   e2fe6:	462c      	movlt	r4, r5
   e2fe8:	4638      	mov	r0, r7
   e2fea:	6861      	ldr	r1, [r4, #4]
   e2fec:	bfba      	itte	lt
   e2fee:	461d      	movlt	r5, r3
   e2ff0:	2601      	movlt	r6, #1
   e2ff2:	2600      	movge	r6, #0
   e2ff4:	f7ff fd7a 	bl	e2aec <_Balloc>
   e2ff8:	692b      	ldr	r3, [r5, #16]
   e2ffa:	60c6      	str	r6, [r0, #12]
   e2ffc:	6926      	ldr	r6, [r4, #16]
   e2ffe:	f105 0914 	add.w	r9, r5, #20
   e3002:	3414      	adds	r4, #20
   e3004:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e3008:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e300c:	f100 0514 	add.w	r5, r0, #20
   e3010:	f04f 0c00 	mov.w	ip, #0
   e3014:	f854 3b04 	ldr.w	r3, [r4], #4
   e3018:	f859 2b04 	ldr.w	r2, [r9], #4
   e301c:	fa1c f183 	uxtah	r1, ip, r3
   e3020:	fa1f fe82 	uxth.w	lr, r2
   e3024:	0c12      	lsrs	r2, r2, #16
   e3026:	ebce 0101 	rsb	r1, lr, r1
   e302a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e302e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e3032:	b289      	uxth	r1, r1
   e3034:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3038:	45c8      	cmp	r8, r9
   e303a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e303e:	46a6      	mov	lr, r4
   e3040:	f845 3b04 	str.w	r3, [r5], #4
   e3044:	d8e6      	bhi.n	e3014 <__mdiff+0x5a>
   e3046:	45be      	cmp	lr, r7
   e3048:	d20e      	bcs.n	e3068 <__mdiff+0xae>
   e304a:	f85e 1b04 	ldr.w	r1, [lr], #4
   e304e:	fa1c f281 	uxtah	r2, ip, r1
   e3052:	1413      	asrs	r3, r2, #16
   e3054:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e3058:	b292      	uxth	r2, r2
   e305a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e305e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3062:	f845 2b04 	str.w	r2, [r5], #4
   e3066:	e7ee      	b.n	e3046 <__mdiff+0x8c>
   e3068:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e306c:	b90b      	cbnz	r3, e3072 <__mdiff+0xb8>
   e306e:	3e01      	subs	r6, #1
   e3070:	e7fa      	b.n	e3068 <__mdiff+0xae>
   e3072:	6106      	str	r6, [r0, #16]
   e3074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e3078 <__ulp>:
   e3078:	4b12      	ldr	r3, [pc, #72]	; (e30c4 <__ulp+0x4c>)
   e307a:	ee10 2a90 	vmov	r2, s1
   e307e:	401a      	ands	r2, r3
   e3080:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e3084:	2b00      	cmp	r3, #0
   e3086:	dd02      	ble.n	e308e <__ulp+0x16>
   e3088:	2000      	movs	r0, #0
   e308a:	4619      	mov	r1, r3
   e308c:	e017      	b.n	e30be <__ulp+0x46>
   e308e:	425b      	negs	r3, r3
   e3090:	151b      	asrs	r3, r3, #20
   e3092:	2b13      	cmp	r3, #19
   e3094:	f04f 0000 	mov.w	r0, #0
   e3098:	f04f 0100 	mov.w	r1, #0
   e309c:	dc04      	bgt.n	e30a8 <__ulp+0x30>
   e309e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e30a2:	fa42 f103 	asr.w	r1, r2, r3
   e30a6:	e00a      	b.n	e30be <__ulp+0x46>
   e30a8:	3b14      	subs	r3, #20
   e30aa:	2b1e      	cmp	r3, #30
   e30ac:	f04f 0201 	mov.w	r2, #1
   e30b0:	bfda      	itte	le
   e30b2:	f1c3 031f 	rsble	r3, r3, #31
   e30b6:	fa02 f303 	lslle.w	r3, r2, r3
   e30ba:	4613      	movgt	r3, r2
   e30bc:	4618      	mov	r0, r3
   e30be:	ec41 0b10 	vmov	d0, r0, r1
   e30c2:	4770      	bx	lr
   e30c4:	7ff00000 	.word	0x7ff00000

000e30c8 <__b2d>:
   e30c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e30ca:	6905      	ldr	r5, [r0, #16]
   e30cc:	f100 0614 	add.w	r6, r0, #20
   e30d0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e30d4:	1f2f      	subs	r7, r5, #4
   e30d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e30da:	4620      	mov	r0, r4
   e30dc:	f7ff fdcb 	bl	e2c76 <__hi0bits>
   e30e0:	f1c0 0320 	rsb	r3, r0, #32
   e30e4:	280a      	cmp	r0, #10
   e30e6:	600b      	str	r3, [r1, #0]
   e30e8:	dc14      	bgt.n	e3114 <__b2d+0x4c>
   e30ea:	f1c0 0e0b 	rsb	lr, r0, #11
   e30ee:	fa24 f10e 	lsr.w	r1, r4, lr
   e30f2:	42be      	cmp	r6, r7
   e30f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e30f8:	bf34      	ite	cc
   e30fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e30fe:	2100      	movcs	r1, #0
   e3100:	3015      	adds	r0, #21
   e3102:	fa04 f000 	lsl.w	r0, r4, r0
   e3106:	fa21 f10e 	lsr.w	r1, r1, lr
   e310a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e310e:	ea40 0201 	orr.w	r2, r0, r1
   e3112:	e023      	b.n	e315c <__b2d+0x94>
   e3114:	42be      	cmp	r6, r7
   e3116:	bf3a      	itte	cc
   e3118:	f1a5 0708 	subcc.w	r7, r5, #8
   e311c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3120:	2100      	movcs	r1, #0
   e3122:	380b      	subs	r0, #11
   e3124:	d015      	beq.n	e3152 <__b2d+0x8a>
   e3126:	4084      	lsls	r4, r0
   e3128:	f1c0 0520 	rsb	r5, r0, #32
   e312c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e3130:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e3134:	42b7      	cmp	r7, r6
   e3136:	fa21 fe05 	lsr.w	lr, r1, r5
   e313a:	ea44 030e 	orr.w	r3, r4, lr
   e313e:	bf8c      	ite	hi
   e3140:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e3144:	2400      	movls	r4, #0
   e3146:	fa01 f000 	lsl.w	r0, r1, r0
   e314a:	40ec      	lsrs	r4, r5
   e314c:	ea40 0204 	orr.w	r2, r0, r4
   e3150:	e004      	b.n	e315c <__b2d+0x94>
   e3152:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e3156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e315a:	460a      	mov	r2, r1
   e315c:	ec43 2b10 	vmov	d0, r2, r3
   e3160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e3162 <__d2b>:
   e3162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3166:	460e      	mov	r6, r1
   e3168:	2101      	movs	r1, #1
   e316a:	ec59 8b10 	vmov	r8, r9, d0
   e316e:	4615      	mov	r5, r2
   e3170:	f7ff fcbc 	bl	e2aec <_Balloc>
   e3174:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e3178:	4607      	mov	r7, r0
   e317a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e317e:	b10c      	cbz	r4, e3184 <__d2b+0x22>
   e3180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e3184:	9301      	str	r3, [sp, #4]
   e3186:	f1b8 0f00 	cmp.w	r8, #0
   e318a:	d019      	beq.n	e31c0 <__d2b+0x5e>
   e318c:	a802      	add	r0, sp, #8
   e318e:	f840 8d08 	str.w	r8, [r0, #-8]!
   e3192:	f7ff fd90 	bl	e2cb6 <__lo0bits>
   e3196:	9b00      	ldr	r3, [sp, #0]
   e3198:	b148      	cbz	r0, e31ae <__d2b+0x4c>
   e319a:	9a01      	ldr	r2, [sp, #4]
   e319c:	f1c0 0120 	rsb	r1, r0, #32
   e31a0:	fa02 f101 	lsl.w	r1, r2, r1
   e31a4:	430b      	orrs	r3, r1
   e31a6:	40c2      	lsrs	r2, r0
   e31a8:	617b      	str	r3, [r7, #20]
   e31aa:	9201      	str	r2, [sp, #4]
   e31ac:	e000      	b.n	e31b0 <__d2b+0x4e>
   e31ae:	617b      	str	r3, [r7, #20]
   e31b0:	9b01      	ldr	r3, [sp, #4]
   e31b2:	61bb      	str	r3, [r7, #24]
   e31b4:	2b00      	cmp	r3, #0
   e31b6:	bf14      	ite	ne
   e31b8:	2102      	movne	r1, #2
   e31ba:	2101      	moveq	r1, #1
   e31bc:	6139      	str	r1, [r7, #16]
   e31be:	e007      	b.n	e31d0 <__d2b+0x6e>
   e31c0:	a801      	add	r0, sp, #4
   e31c2:	f7ff fd78 	bl	e2cb6 <__lo0bits>
   e31c6:	9b01      	ldr	r3, [sp, #4]
   e31c8:	617b      	str	r3, [r7, #20]
   e31ca:	2101      	movs	r1, #1
   e31cc:	6139      	str	r1, [r7, #16]
   e31ce:	3020      	adds	r0, #32
   e31d0:	b134      	cbz	r4, e31e0 <__d2b+0x7e>
   e31d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e31d6:	4404      	add	r4, r0
   e31d8:	6034      	str	r4, [r6, #0]
   e31da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e31de:	e009      	b.n	e31f4 <__d2b+0x92>
   e31e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e31e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e31e8:	6030      	str	r0, [r6, #0]
   e31ea:	6918      	ldr	r0, [r3, #16]
   e31ec:	f7ff fd43 	bl	e2c76 <__hi0bits>
   e31f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e31f4:	6028      	str	r0, [r5, #0]
   e31f6:	4638      	mov	r0, r7
   e31f8:	b003      	add	sp, #12
   e31fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e31fe <__ratio>:
   e31fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3202:	4688      	mov	r8, r1
   e3204:	4669      	mov	r1, sp
   e3206:	4681      	mov	r9, r0
   e3208:	f7ff ff5e 	bl	e30c8 <__b2d>
   e320c:	a901      	add	r1, sp, #4
   e320e:	4640      	mov	r0, r8
   e3210:	ec55 4b10 	vmov	r4, r5, d0
   e3214:	f7ff ff58 	bl	e30c8 <__b2d>
   e3218:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e321c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e3220:	1a9a      	subs	r2, r3, r2
   e3222:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e3226:	1ac9      	subs	r1, r1, r3
   e3228:	ec57 6b10 	vmov	r6, r7, d0
   e322c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e3230:	2b00      	cmp	r3, #0
   e3232:	bfcc      	ite	gt
   e3234:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e3238:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e323c:	4632      	mov	r2, r6
   e323e:	463b      	mov	r3, r7
   e3240:	4620      	mov	r0, r4
   e3242:	4629      	mov	r1, r5
   e3244:	f7fc fdc2 	bl	dfdcc <__aeabi_ddiv>
   e3248:	ec41 0b10 	vmov	d0, r0, r1
   e324c:	b003      	add	sp, #12
   e324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e3252 <__copybits>:
   e3252:	3901      	subs	r1, #1
   e3254:	b510      	push	{r4, lr}
   e3256:	1149      	asrs	r1, r1, #5
   e3258:	6914      	ldr	r4, [r2, #16]
   e325a:	3101      	adds	r1, #1
   e325c:	f102 0314 	add.w	r3, r2, #20
   e3260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e3264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e3268:	42a3      	cmp	r3, r4
   e326a:	4602      	mov	r2, r0
   e326c:	d204      	bcs.n	e3278 <__copybits+0x26>
   e326e:	f853 2b04 	ldr.w	r2, [r3], #4
   e3272:	f840 2b04 	str.w	r2, [r0], #4
   e3276:	e7f7      	b.n	e3268 <__copybits+0x16>
   e3278:	2300      	movs	r3, #0
   e327a:	428a      	cmp	r2, r1
   e327c:	d202      	bcs.n	e3284 <__copybits+0x32>
   e327e:	f842 3b04 	str.w	r3, [r2], #4
   e3282:	e7fa      	b.n	e327a <__copybits+0x28>
   e3284:	bd10      	pop	{r4, pc}

000e3286 <__any_on>:
   e3286:	f100 0214 	add.w	r2, r0, #20
   e328a:	6900      	ldr	r0, [r0, #16]
   e328c:	114b      	asrs	r3, r1, #5
   e328e:	4298      	cmp	r0, r3
   e3290:	b510      	push	{r4, lr}
   e3292:	db0c      	blt.n	e32ae <__any_on+0x28>
   e3294:	dd0c      	ble.n	e32b0 <__any_on+0x2a>
   e3296:	f011 011f 	ands.w	r1, r1, #31
   e329a:	d009      	beq.n	e32b0 <__any_on+0x2a>
   e329c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e32a0:	fa24 f001 	lsr.w	r0, r4, r1
   e32a4:	fa00 f101 	lsl.w	r1, r0, r1
   e32a8:	428c      	cmp	r4, r1
   e32aa:	d10c      	bne.n	e32c6 <__any_on+0x40>
   e32ac:	e000      	b.n	e32b0 <__any_on+0x2a>
   e32ae:	4603      	mov	r3, r0
   e32b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e32b4:	4293      	cmp	r3, r2
   e32b6:	d904      	bls.n	e32c2 <__any_on+0x3c>
   e32b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e32bc:	2900      	cmp	r1, #0
   e32be:	d0f9      	beq.n	e32b4 <__any_on+0x2e>
   e32c0:	e001      	b.n	e32c6 <__any_on+0x40>
   e32c2:	2000      	movs	r0, #0
   e32c4:	bd10      	pop	{r4, pc}
   e32c6:	2001      	movs	r0, #1
   e32c8:	bd10      	pop	{r4, pc}

000e32ca <_calloc_r>:
   e32ca:	b538      	push	{r3, r4, r5, lr}
   e32cc:	fb02 f401 	mul.w	r4, r2, r1
   e32d0:	4621      	mov	r1, r4
   e32d2:	f7f5 f84d 	bl	d8370 <_malloc_r>
   e32d6:	4605      	mov	r5, r0
   e32d8:	b118      	cbz	r0, e32e2 <_calloc_r+0x18>
   e32da:	4622      	mov	r2, r4
   e32dc:	2100      	movs	r1, #0
   e32de:	f7fd f8f0 	bl	e04c2 <memset>
   e32e2:	4628      	mov	r0, r5
   e32e4:	bd38      	pop	{r3, r4, r5, pc}

000e32e6 <__env_lock>:
   e32e6:	4770      	bx	lr

000e32e8 <__env_unlock>:
   e32e8:	4770      	bx	lr

000e32ea <link_code_end>:
	...

000e32ec <dynalib_user>:
   e32ec:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e32fc:	0000 0000                                   ....

000e3300 <functions>:
   e3300:	34a6 000e a769 000d 0029 0000 0000 0000     .4..i...).......
   e3310:	34aa 000e aae9 000d 0029 0000 0000 0000     .4......).......
   e3320:	34af 000e abad 000d 0029 0000 0000 0000     .4......).......
   e3330:	34b4 000e a211 000d 0029 0000 0000 0000     .4......).......
   e3340:	34b9 000e ac71 000d 002a 0000 0000 0000     .4..q...*.......
   e3350:	34bf 000e a589 000d 0029 0000 0000 0000     .4......).......
   e3360:	34ab 000e a6a9 000d 0029 0000 0000 0000     .4......).......
   e3370:	34c4 000e ac79 000d 0029 0000 0000 0000     .4..y...).......
   e3380:	3e8f 000e 40c9 000d 0028 0000 0000 0000     .>...@..(.......
   e3390:	34c9 000e ad51 000d 0029 0000 0000 0000     .4..Q...).......
   e33a0:	34cd 000e 43d9 000d 0029 0000 0000 0000     .4...C..).......
   e33b0:	34d1 000e a779 000d 0029 0000 0000 0000     .4..y...).......
   e33c0:	34d7 000e af31 000d 0029 0000 0000 0000     .4..1...).......
   e33d0:	34da 000e b041 000d 0029 0000 0000 0000     .4..A...).......
   e33e0:	34de 000e b041 000d 0029 0000 0000 0000     .4..A...).......
   e33f0:	34e4 000e 4449 000d 002a 0000 0000 0000     .4..ID..*.......
   e3400:	34e8 000e 4509 000d 002a 0000 0000 0000     .4...E..*.......
   e3410:	34ec 000e 40b9 000d 0028 0000 0000 0000     .4...@..(.......
   e3420:	34ef 000e b159 000d 002a 0000 0000 0000     .4..Y...*.......
   e3430:	34b0 000e a899 000d 0029 0000 0000 0000     .4......).......
   e3440:	34f3 000e b491 000d 0029 0000 0000 0000     .4......).......
   e3450:	34f8 000e b56d 000d 0029 0000 0000 0000     .4..m...).......
   e3460:	34b5 000e a959 000d 0029 0000 0000 0000     .4..Y...).......
   e3470:	34fd 000e a9c9 000d 0029 0000 0000 0000     .4......).......
	...
   e3490:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e34a0:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e34b0:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e34c0:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e34d0:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e34e0:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e34f0:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e3500:	0068                                        h.

000e3502 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e3502:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e35     blnkinf.ver.0.5.
   e3512:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   e3522:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e3532:	6974 6c63 0065 7562 6c69 0064 634f 2074     ticle.build.Oct 
   e3542:	3120 3220 3130 2039 3331 353a 3a35 3531      1 2019 13:55:15
   e3552:	0000 2500 0069 6c25 0069 6f47 6e69 2067     ...%i.%li.Going 
   e3562:	6f74 6420 6565 2070 6c73 6565 0070 6944     to deep sleep.Di
   e3572:	6373 6e6f 656e 7463 6465 6f00 7475 7000     sconnected.out.p
   e3582:	6d77 6400 0077 7761 7600 0077 3225 332e     wm.dw.aw.vw.%2.3
   e3592:	0066 6f43 6e6e 6365 6574 0064 6572 6573     f.Connected.rese
   e35a2:	6d74 0065 6e45 6574 2072 6f63 6564 7420     tme.Enter code t
   e35b2:	206f 6572 6573 0074 6148 6472 5220 7365     o reset.Hard Res
   e35c2:	7465 6974 676e 4900 696e 6974 6c61 7a69     etting.Initializ
   e35d2:	6465 6420 6665 7561 746c 7620 6c61 6575     ed default value
   e35e2:	0073 6c42 6e79 206b 6f63 6e6e 6365 6574     s.Blynk connecte
   e35f2:	2e64 7000 316d 7000 326d 7000 346d 7000     d..pm1.pm2.pm4.p
   e3602:	316d 0030 6f63 636e 7400 6d65 0070 3225     m10.conc.temp.%2
   e3612:	372e 0066 6854 2065 7865 7270 7365 6973     .7f.The expressi
   e3622:	6e6f 6920 2073 7254 6575 5400 6568 6520     on is True.The e
   e3632:	7078 6572 7373 6f69 206e 7369 4620 6c61     xpression is Fal
   e3642:	6573 4500 7272 726f 6e20 6165 2072 6863     se.Error near ch
   e3652:	7261 203a 2d00 4d2d 7361 2073 6f43 636e     ar: .--Mass Conc
   e3662:	6e65 7274 7461 6f69 2d6e 002d 7325 203a     entration--.%s: 
   e3672:	3025 322e 0a66 2d00 4e2d 6d75 6562 2072     %0.2f..--Number 
   e3682:	6f43 636e 6e65 7274 7461 6f69 2d6e 002d     Concentration--.
   e3692:	3025 312e 0066 0046 6574 706d 3a31 0020     %0.1f.F.temp1: .
   e36a2:	6756 7361 203a 4300 6e6f 3a63 0020 0043     Vgas: .Conc: .C.
   e36b2:	3025 302e 0066 003a 4c41 5245 2154 0020     %0.0f.:.ALERT! .
   e36c2:	4425 2520 0052 0025 4b4f 0020 447b 5645     %D %R.%.OK .{DEV
   e36d2:	4349 5f45 414e 454d 207d 6168 2073 6c61     ICE_NAME} has al
   e36e2:	7261 656d 2164 7b00 4544 4956 4543 4e5f     armed!.{DEVICE_N
   e36f2:	4d41 7d45 3a20 4120 616c 6d72 7b00 4544     AME} : Alarm.{DE
   e3702:	4956 4543 4e5f 4d41 7d45 6120 616c 6d72     VICE_NAME} alarm
   e3712:	6520 646e 6465 002e 447b 5645 4349 5f45      ended..{DEVICE_
   e3722:	414e 454d 207d 203a 6c41 7261 206d 6e65     NAME} : Alarm en
   e3732:	6564 0064 447b 5645 4349 5f45 414e 454d     ded.{DEVICE_NAME
   e3742:	207d 6162 7474 7265 2079 7369 0020 2125     } battery is .%!
   e3752:	7b00 4544 4956 4543 4e5f 4d41 7d45 3a20     .{DEVICE_NAME} :
   e3762:	4220 7461 6574 7972 4c20 776f 4120 616c      Battery Low Ala
   e3772:	6d72 2500 002e 447b 5645 4349 5f45 414e     rm.%..{DEVICE_NA
   e3782:	454d 207d 203a 6142 7474 7265 2079 6f4c     ME} : Battery Lo
   e3792:	2077 6c41 7261 206d 6e65 6564 0064 414e     w Alarm ended.NA
   e37a2:	7000 316d 313e 3030 7c7c 6d70 3e32 3031     .pm1>100||pm2>10
   e37b2:	7c30 707c 346d 313e 3030 7c7c 6d70 3031     0||pm4>100||pm10
   e37c2:	313e 3030 7c7c 6f63 636e 313e 3030 7c7c     >100||conc>100||
   e37d2:	6574 706d 313e 3035 7200 626f 7265 4074     temp>150.robert@
   e37e2:	6573 746e 6569 746e 6874 6e69 7367 632e     sentientthings.c
   e37f2:	6d6f 4600 7269 7473 7220 6e75 002e 6f4e     om.First run..No
   e3802:	2074 6966 7372 2074 7572 2e6e 5600 7573     t first run..Vsu
   e3812:	2070 6f66 2072 6c61 206c 6573 736e 726f     p for all sensor
   e3822:	2073 203d 5600 6363 6620 726f 6120 6c6c     s = .Vcc for all
   e3832:	7320 6e65 6f73 7372 3d20 0020 7256 6665      sensors = .Vref
   e3842:	6620 726f 7320 6e65 6f73 2072 2031 203d      for sensor 1 = 
   e3852:	5400 657a 6f72 3d20 0020 6946 696e 6873     .Tzero = .Finish
   e3862:	6465 5320 7465 6974 676e 5520 0070 3154     ed Setting Up.T1
   e3872:	202c 566d 2c31 4320 0031 4553 534e 524f     , mV1, C1.SENSOR
   e3882:	4e20 544f 4420 5445 4345 4554 0044 657a      NOT DETECTED.ze
   e3892:	7470 736f 6e65 6573 622e 796c 6b6e 632e     ptosense.blynk.c
   e38a2:	0063 6553 7574 2070 6f63 706d 656c 6574     c.Setup complete
   e38b2:	5000 304d 352e 5000 314d 302e 5000 324d     .PM0.5.PM1.0.PM2
   e38c2:	352e 5000 344d 302e 5000 314d 0030 6c4f     .5.PM4.0.PM10.Ol
   e38d2:	2064 6574 706d 202e 7073 6e61 6120 646e     d temp. span and
   e38e2:	6f20 6666 6573 3a74 0020 202c 4800 4749      offset: ., .HIG
   e38f2:	0048 4f4c 0057 654e 2077 6574 706d 202e     H.LOW.New temp. 
   e3902:	7073 6e61 6120 646e 6f20 6666 6573 3a74     span and offset:
   e3912:	0020 6857 6e65 6720 7361 6320 6e6f 6563      .When gas conce
   e3922:	746e 6172 6974 6e6f 7320 6574 6461 2c79     ntration steady,
   e3932:	6520 746e 7265 4320 6e6f 6563 746e 6172      enter Concentra
   e3942:	6974 6e6f 6920 206e 7070 206d 6f66 6c6c     tion in ppm foll
   e3952:	776f 6465 6220 2079 6327 2772 3d20 0020     owed by 'cr' = .
   e3962:	7245 6f72 2072 6553 7474 6e69 2067 7053     Error Setting Sp
   e3972:	6e61 0000 0000                              an....

000e3978 <_ZL23BlynkWriteHandlerVector>:
   e3978:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3988:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3998:	7bf3 000d 7bf3 000d 5f91 000d 7bf3 000d     .{...{..._...{..
   e39a8:	5fad 000d 7bf3 000d 5fed 000d 7bf3 000d     ._...{..._...{..
   e39b8:	54bd 000d 5539 000d 54e9 000d 7bf3 000d     .T..9U...T...{..
   e39c8:	6ae1 000d 7bf3 000d 6081 000d 7bf3 000d     .j...{...`...{..
   e39d8:	7bf3 000d 5515 000d 7bf3 000d 7bf3 000d     .{...U...{...{..
   e39e8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e39f8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a08:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a18:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a28:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a38:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a48:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a58:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a68:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a78:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a88:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3a98:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3aa8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3ab8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3ac8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3ad8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3ae8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3af8:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b08:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b18:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b28:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b38:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b48:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b58:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..
   e3b68:	7bf3 000d 7bf3 000d 7bf3 000d 7bf3 000d     .{...{...{...{..

000e3b78 <_ZL22BlynkReadHandlerVector>:
   e3b78:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3b88:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3b98:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3ba8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3bb8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3bc8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3bd8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3be8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3bf8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c08:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c18:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c28:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c38:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c48:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c58:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c68:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c78:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c88:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3c98:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3ca8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3cb8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3cc8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3cd8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3ce8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3cf8:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d08:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d18:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d28:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d38:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d48:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d58:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..
   e3d68:	7bf1 000d 7bf1 000d 7bf1 000d 7bf1 000d     .{...{...{...{..

000e3d78 <_ZTV10MB85RC256V>:
	...
   e3d80:	7c25 000d 7c27 000d                         %|..'|..

000e3d88 <_ZTVN5spark13EthernetClassE>:
	...
   e3d90:	83ef 000d 83e5 000d 83db 000d 83d1 000d     ................
   e3da0:	83c5 000d 83b9 000d 83ad 000d 83a5 000d     ................
   e3db0:	839b 000d 8391 000d 9c93 000d               ............

000e3dbc <_ZTV8SPIClass>:
	...
   e3dc4:	840d 000d 840f 000d 616e 006e 766f 0066     ........nan.ovf.
   e3dd4:	6e69 0066 6e66 6300 646f 0065 6564 6174     inf.fn.code.deta
   e3de4:	6c69 0d00 000a 3025 3031 2075 5d00 0020     il....%010u .] .
   e3df4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   e3e04:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
   e3e14:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   e3e24:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   e3e34:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   e3e44:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   e3e54:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   e3e64:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   e3e74:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   e3e84:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
   e3e94:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   e3ea4:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
   e3eb4:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   e3ec4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000e3ed4 <_ZTV14CellularSignal>:
	...
   e3edc:	8d5d 000d 8def 000d 8d5f 000d 8e31 000d     ]......._...1...
   e3eec:	8d65 000d 8dfd 000d 8d91 000d 8dbd 000d     e...............
   e3efc:	fffc ffff 0000 0000 8de7 000d               ............

000e3f08 <_ZTV9IPAddress>:
	...
   e3f10:	9043 000d 9035 000d 9037 000d               C...5...7...

000e3f1c <_ZTV9USBSerial>:
	...
   e3f24:	9149 000d 918d 000d 9167 000d 87b5 000d     I.......g.......
   e3f34:	9161 000d 914b 000d 9153 000d 9187 000d     a...K...S.......
   e3f44:	915b 000d 9145 000d                         [...E...

000e3f4c <_ZTVN5spark13CellularClassE>:
	...
   e3f54:	9283 000d 9279 000d 926f 000d 9225 000d     ....y...o...%...
   e3f64:	9263 000d 9257 000d 924b 000d 9243 000d     c...W...K...C...
   e3f74:	9239 000d 922f 000d 9c93 000d               9.../.......

000e3f80 <_ZTV11USARTSerial>:
	...
   e3f88:	9341 000d 9365 000d 9371 000d 87b5 000d     A...e...q.......
   e3f98:	934d 000d 9359 000d 9353 000d 935f 000d     M...Y...S..._...
   e3fa8:	9343 000d 9347 000d                         C...G...

000e3fb0 <_ZTV7TwoWire>:
	...
   e3fb8:	9449 000d 9493 000d 946b 000d 944b 000d     I.......k...K...
   e3fc8:	9473 000d 947b 000d 9483 000d 948b 000d     s...{...........

000e3fd8 <_ZTVN5spark9MeshClassE>:
	...
   e3fe0:	95a3 000d 9599 000d 958f 000d 9585 000d     ................
   e3ff0:	9579 000d 956d 000d 9561 000d 9559 000d     y...m...a...Y...
   e4000:	954f 000d 9545 000d 9c93 000d               O...E.......

000e400c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e4014:	9725 000d 972b 000d 9c13 000d 9737 000d     %...+.......7...
   e4024:	9727 000d                                   '...

000e4028 <_ZTV9TCPClient>:
	...
   e4030:	530d 000d 534d 000d 969d 000d 96b7 000d     .S..MS..........
   e4040:	9ab9 000d 98fb 000d 98cd 000d 96e1 000d     ................
   e4050:	9991 000d 973d 000d 992f 000d 9a8b 000d     ....=.../.......
   e4060:	96e3 000d 971b 000d 96c9 000d 982d 000d     ............-...
   e4070:	98ad 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e4080:	7265 6f72 2072 203d 6425 0000               error = %d..

000e408c <_ZTVN5spark12NetworkClassE>:
	...
   e4094:	9c2b 000d 9c35 000d 9c3f 000d 9c49 000d     +...5...?...I...
   e40a4:	9c53 000d 9c5f 000d 9c6b 000d 9c77 000d     S..._...k...w...
   e40b4:	9c7f 000d 9c89 000d 9c93 000d               ............

000e40c0 <atanlo>:
   e40c0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e40d0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e40e0 <atanhi>:
   e40e0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e40f0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e4100:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e4110:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e4120:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e4130:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e4148 <halF>:
   e4148:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e4158 <ln2LO>:
   e4158:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e4168 <ln2HI>:
   e4168:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e4178 <Zero>:
	...
   e4184:	0000 8000                                   ....

000e4188 <npio2_hw>:
   e4188:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e4198:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e41a8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e41b8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e41c8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e41d8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e41e8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e41f8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e4208 <two_over_pi>:
   e4208:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e4218:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e4228:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e4238:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e4248:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e4258:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e4268:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e4278:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e4288:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e4298:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e42a8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e42b8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e42c8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e42d8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e42e8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e42f8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e4308:	e27b 0060 8c6b 00c0                         {.`.k...

000e4310 <init_jk>:
   e4310:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e4320 <PIo2>:
   e4320:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e4330:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e4340:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e4350:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e4360 <TWO52>:
   e4360:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e4370 <day_name.4725>:
   e4370:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e4380:	6972 6153 4a74                                   riSat

000e4385 <mon_name.4726>:
   e4385:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e4395:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e43a5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e43b5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e43c5:	6425 000a                                   %d..

000e43c9 <_ctype_>:
   e43c9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e43d9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e43e9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e43f9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e4409:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e4419:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e4429:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e4439:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e4449:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e44cc <__sf_fake_stdin>:
	...

000e44ec <__sf_fake_stdout>:
	...

000e450c <__sf_fake_stderr>:
	...
   e452c:	4f50 4953 0058 0000                         POSIX...

000e4534 <__month_lengths>:
   e4534:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e4544:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4554:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e4564:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e4574:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4584:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e4594:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e45a4:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e45b4:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e45c4:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e45d4:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e45e4:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e45f0 <fpi.5344>:
   e45f0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e4600:	0000 0000                                   ....

000e4604 <fpinan.5380>:
   e4604:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e4614:	0000 0000 6e69 7469 0079 0000               ....inity...

000e4620 <tinytens>:
   e4620:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e4630:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e4640:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e4650:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e4660:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e4670:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e4680:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e4690:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e46a0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e46b0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e46c0:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e46d0:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e46e0:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e46f0:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e4700:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e4710:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e4720:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e4730:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e4740:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
   e4750:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   e4760:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   e4770:	3a4d 5325 2520 0070                         M:%S %p.

000e4778 <_C_time_locale>:
   e4778:	4650 000e 4654 000e 4658 000e 465c 000e     PF..TF..XF..\F..
   e4788:	4660 000e 4664 000e 4668 000e 466c 000e     `F..dF..hF..lF..
   e4798:	4670 000e 4674 000e 4678 000e 467c 000e     pF..tF..xF..|F..
   e47a8:	4680 000e 4688 000e 4691 000e 4697 000e     .F...F...F...F..
   e47b8:	4660 000e 469d 000e 46a2 000e 46a7 000e     `F...F...F...F..
   e47c8:	46ae 000e 46b8 000e 46c0 000e 46c9 000e     .F...F...F...F..
   e47d8:	46d2 000e 46d6 000e 46da 000e 46de 000e     .F...F...F...F..
   e47e8:	46e2 000e 46e6 000e 46ea 000e 46ee 000e     .F...F...F...F..
   e47f8:	46f5 000e 46fc 000e 4704 000e 470e 000e     .F...F...G...G..
   e4808:	4717 000e 471e 000e 4727 000e 4730 000e     .G...G..'G..0G..
   e4818:	4739 000e 474e 000e 4751 000e 4754 000e     9G..NG..QG..TG..
   e4828:	4680 000e 4688 000e 4691 000e 4697 000e     .F...F...F...F..
   e4838:	4660 000e 469d 000e 46a2 000e 46a7 000e     `F...F...F...F..
   e4848:	46ae 000e 46b8 000e 46c0 000e 46c9 000e     .F...F...F...F..
   e4858:	3e2f 000e 476c 000e 3de9 000e 3de9 000e     />..lG...=...=..
   e4868:	3de9 000e 3de9 000e 3de9 000e 5a54 4700     .=...=...=..TZ.G
   e4878:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e4888:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e4898:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e48a8:	3a6e 6825 2575 006e                         n:%hu%n.

000e48b0 <__mprec_tens>:
   e48b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e48c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e48d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e48e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e48f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4900:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4910:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4920:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e4930:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e4940:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e4950:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e4960:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e4970:	9db4 79d9 7843 44ea                         ...yCx.D

000e4978 <__mprec_bigtens>:
   e4978:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4988:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4998:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e49a0 <p05.5387>:
   e49a0:	0005 0000 0019 0000 007d 0000               ........}...

000e49ac <link_const_variable_data_end>:
   e49ac:	000d6e5d 	.word	0x000d6e5d
   e49b0:	000d7389 	.word	0x000d7389
   e49b4:	000d7521 	.word	0x000d7521
   e49b8:	000d7683 	.word	0x000d7683
   e49bc:	000d7a4f 	.word	0x000d7a4f
   e49c0:	000d7be1 	.word	0x000d7be1
   e49c4:	000d7bed 	.word	0x000d7bed
   e49c8:	000d7c21 	.word	0x000d7c21
   e49cc:	000d7d83 	.word	0x000d7d83
   e49d0:	000d83f9 	.word	0x000d83f9
   e49d4:	000d848d 	.word	0x000d848d
   e49d8:	000d8b29 	.word	0x000d8b29
   e49dc:	000d8d09 	.word	0x000d8d09
   e49e0:	000d8d41 	.word	0x000d8d41
   e49e4:	000d9301 	.word	0x000d9301
   e49e8:	000d9651 	.word	0x000d9651
   e49ec:	000d9d61 	.word	0x000d9d61
   e49f0:	000d9eb1 	.word	0x000d9eb1
   e49f4:	000d9f81 	.word	0x000d9f81
   e49f8:	000da005 	.word	0x000da005
   e49fc:	000da0c9 	.word	0x000da0c9
   e4a00:	000da18d 	.word	0x000da18d

000e4a04 <link_constructors_end>:
	...
