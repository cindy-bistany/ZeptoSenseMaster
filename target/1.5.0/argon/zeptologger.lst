
c:/Code/ZeptoSensorBlynk-master/zeptologger/target/1.5.0/argon/zeptologger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014c40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e8c60  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000154  2003d55c  000e8c64  0002d55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001140  2003d6b0  2003d6b0  0003d6b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e8db8  000e8db8  00038db8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e8de0  000e8de0  00038de0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0016dd59  00000000  00000000  00038de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d586  00000000  00000000  001a6b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030eaa  00000000  00000000  001c40c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003c28  00000000  00000000  001f4f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006ce8  00000000  00000000  001f8b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c06a  00000000  00000000  001ff87d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d52c  00000000  00000000  0024b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011734f  00000000  00000000  00298e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00012664  00000000  00000000  003b0164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00f fbe7 	bl	e3804 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00f fbec 	bl	e381a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d55c 	.word	0x2003d55c
   d404c:	000e8c64 	.word	0x000e8c64
   d4050:	2003d6b0 	.word	0x2003d6b0
   d4054:	2003d6b0 	.word	0x2003d6b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f007 fd97 	bl	dbb90 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e8c54 	.word	0x000e8c54
   d4084:	000e8bf4 	.word	0x000e8bf4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f004 bac6 	b.w	d8618 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f004 fe5b 	bl	d8d48 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f007 bd3d 	b.w	dbb14 <_post_loop>

000d409a <_Znwj>:
   d409a:	f006 bd9f 	b.w	dabdc <malloc>

000d409e <_ZdlPv>:
   d409e:	f006 bda5 	b.w	dabec <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f006 bda3 	b.w	dabec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00e fd43 	bl	e2b6c <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00e fd37 	bl	e2b68 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00e fee1 	bl	e2ed0 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00f f801 	bl	e3124 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00f f94d 	bl	e33f0 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00f f92b 	bl	e33dc <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00f f8ff 	bl	e33b4 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00f f8f1 	bl	e33c8 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00f f8c5 	bl	e33a0 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00f f8ad 	bl	e33a0 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00f f893 	bl	e33a0 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00f f88a 	bl	e33a0 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00e fdb5 	bl	e2e04 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00f f875 	bl	e33a0 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00f f86c 	bl	e33a0 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00e fd97 	bl	e2e04 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00f f859 	bl	e33a0 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00f f841 	bl	e33a0 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00f f829 	bl	e33a0 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00e fd55 	bl	e2e04 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00f f819 	bl	e33a0 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00e fd45 	bl	e2e04 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f006 fc18 	bl	dabdc <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00f fa32 	bl	e381a <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00f fa1d 	bl	e3804 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00e ffe4 	bl	e33b4 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00e fffa 	bl	e33f0 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00f f83d 	bl	e3480 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00e fcdf 	bl	e2de4 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00e ffaa 	bl	e33b4 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00e ffa2 	bl	e33b4 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00e ff9b 	bl	e33b4 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00e ffb1 	bl	e33f0 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00e ffa9 	bl	e33f0 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00e ffec 	bl	e3480 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00e ffe7 	bl	e3480 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00e fc81 	bl	e2de4 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00e fcca 	bl	e2ed0 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f006 bb47 	b.w	dabec <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f010 ff29 	bl	e5438 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f010 f8c0 	bl	e47ac <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f010 f8a6 	bl	e47ac <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000de1b1 	.word	0x000de1b1
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000de4b1 	.word	0x000de4b1
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e6b58 	.word	0x000e6b58

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000de4b1 	.word	0x000de4b1

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000de1b1 	.word	0x000de1b1
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}

000d52f2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d52f2:	4770      	bx	lr

000d52f4 <_Z8ADXL_ISRv>:

//******************** ISR *********************
// Look for Interrupts and Triggered Action    
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d52f4:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_Z8ADXL_ISRv+0x8>)
   d52f6:	2201      	movs	r2, #1
   d52f8:	701a      	strb	r2, [r3, #0]
   d52fa:	4770      	bx	lr
   d52fc:	2003dec4 	.word	0x2003dec4

000d5300 <__tcf_0>:
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d5300:	b538      	push	{r3, r4, r5, lr}
   d5302:	4d06      	ldr	r5, [pc, #24]	; (d531c <__tcf_0+0x1c>)
   d5304:	2400      	movs	r4, #0
   d5306:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d530a:	4428      	add	r0, r5
   d530c:	3c10      	subs	r4, #16
   d530e:	f005 fe89 	bl	db024 <_ZN6StringD1Ev>
   d5312:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d5316:	d1f6      	bne.n	d5306 <__tcf_0+0x6>
   d5318:	bd38      	pop	{r3, r4, r5, pc}
   d531a:	bf00      	nop
   d531c:	2003d718 	.word	0x2003d718

000d5320 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.39>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d5320:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5322:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5326:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5328:	f88d 3000 	strb.w	r3, [sp]
   d532c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d532e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5330:	f006 fd9c 	bl	dbe6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d5334:	4628      	mov	r0, r5
   d5336:	b003      	add	sp, #12
   d5338:	bd30      	pop	{r4, r5, pc}

000d533a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d533a:	2200      	movs	r2, #0
   d533c:	4611      	mov	r1, r2
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	f005 bbdc 	b.w	daafc <network_ready>

000d5344 <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5344:	2300      	movs	r3, #0
   d5346:	461a      	mov	r2, r3
   d5348:	4619      	mov	r1, r3
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	f005 bbde 	b.w	dab0c <network_on>

000d5350 <_ZN11SystemClass11sleepResultEv>:
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d5350:	b573      	push	{r0, r1, r4, r5, r6, lr}
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d5352:	4b1e      	ldr	r3, [pc, #120]	; (d53cc <_ZN11SystemClass11sleepResultEv+0x7c>)
   d5354:	781d      	ldrb	r5, [r3, #0]
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d5356:	4606      	mov	r6, r0
   d5358:	460c      	mov	r4, r1
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d535a:	b9b5      	cbnz	r5, d538a <_ZN11SystemClass11sleepResultEv+0x3a>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d535c:	a802      	add	r0, sp, #8
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d535e:	2201      	movs	r2, #1
   d5360:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5362:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5366:	462a      	mov	r2, r5
   d5368:	4629      	mov	r1, r5
   d536a:	f005 f997 	bl	da69c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d536e:	9b01      	ldr	r3, [sp, #4]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d5370:	2b1e      	cmp	r3, #30
   d5372:	d10a      	bne.n	d538a <_ZN11SystemClass11sleepResultEv+0x3a>
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5374:	2303      	movs	r3, #3
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d5376:	6820      	ldr	r0, [r4, #0]
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5378:	71a3      	strb	r3, [r4, #6]
   d537a:	2308      	movs	r3, #8
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
   d537c:	80a5      	strh	r5, [r4, #4]
        compatResult_ = result.compatResult_;
   d537e:	8125      	strh	r5, [r4, #8]
   d5380:	8163      	strh	r3, [r4, #10]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d5382:	b110      	cbz	r0, d538a <_ZN11SystemClass11sleepResultEv+0x3a>
            free(wakeupSource_);
   d5384:	f005 fc32 	bl	dabec <free>
            wakeupSource_ = nullptr;
   d5388:	6025      	str	r5, [r4, #0]
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d538a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   d538e:	b90b      	cbnz	r3, d5394 <_ZN11SystemClass11sleepResultEv+0x44>
   d5390:	6822      	ldr	r2, [r4, #0]
   d5392:	b19a      	cbz	r2, d53bc <_ZN11SystemClass11sleepResultEv+0x6c>
   d5394:	6821      	ldr	r1, [r4, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5396:	b159      	cbz	r1, d53b0 <_ZN11SystemClass11sleepResultEv+0x60>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d5398:	888a      	ldrh	r2, [r1, #4]
   d539a:	2a01      	cmp	r2, #1
   d539c:	d003      	beq.n	d53a6 <_ZN11SystemClass11sleepResultEv+0x56>
   d539e:	2a04      	cmp	r2, #4
   d53a0:	d106      	bne.n	d53b0 <_ZN11SystemClass11sleepResultEv+0x60>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d53a2:	2202      	movs	r2, #2
   d53a4:	e005      	b.n	d53b2 <_ZN11SystemClass11sleepResultEv+0x62>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d53a6:	8989      	ldrh	r1, [r1, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d53a8:	8161      	strh	r1, [r4, #10]
   d53aa:	71a2      	strb	r2, [r4, #6]
   d53ac:	8123      	strh	r3, [r4, #8]
   d53ae:	e005      	b.n	d53bc <_ZN11SystemClass11sleepResultEv+0x6c>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d53b0:	2204      	movs	r2, #4
   d53b2:	8123      	strh	r3, [r4, #8]
   d53b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d53b8:	71a2      	strb	r2, [r4, #6]
   d53ba:	8163      	strh	r3, [r4, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d53bc:	f854 3f06 	ldr.w	r3, [r4, #6]!
   d53c0:	6033      	str	r3, [r6, #0]
   d53c2:	88a3      	ldrh	r3, [r4, #4]
   d53c4:	80b3      	strh	r3, [r6, #4]
                // Woken up from standby mode
                systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP));
            }
        }
        return systemSleepResult_;
    }
   d53c6:	4630      	mov	r0, r6
   d53c8:	b002      	add	sp, #8
   d53ca:	bd70      	pop	{r4, r5, r6, pc}
   d53cc:	2003d6b4 	.word	0x2003d6b4

000d53d0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d53d0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53d2:	f005 f93b 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53d6:	4b03      	ldr	r3, [pc, #12]	; (d53e4 <_ZN10CloudClass7processEv+0x14>)
   d53d8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d53da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d53de:	f005 bbc5 	b.w	dab6c <spark_process>
   d53e2:	bf00      	nop
   d53e4:	2003e608 	.word	0x2003e608

000d53e8 <_ZN8particle9LEDStatus9setActiveEb>:
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d53e8:	2200      	movs	r2, #0
   d53ea:	3004      	adds	r0, #4
   d53ec:	f005 bb06 	b.w	da9fc <led_set_status_active>

000d53f0 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d53f0:	b510      	push	{r4, lr}
   d53f2:	4b04      	ldr	r3, [pc, #16]	; (d5404 <_ZN8particle9LEDStatusD1Ev+0x14>)
   d53f4:	6003      	str	r3, [r0, #0]
   d53f6:	4604      	mov	r4, r0
    setActive(false);
   d53f8:	2100      	movs	r1, #0
   d53fa:	f7ff fff5 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
}
   d53fe:	4620      	mov	r0, r4
   d5400:	bd10      	pop	{r4, pc}
   d5402:	bf00      	nop
   d5404:	000e6d64 	.word	0x000e6d64

000d5408 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5408:	b510      	push	{r4, lr}
   d540a:	4604      	mov	r4, r0
    setActive(false);
}
   d540c:	f7ff fff0 	bl	d53f0 <_ZN8particle9LEDStatusD1Ev>
   d5410:	4620      	mov	r0, r4
   d5412:	2120      	movs	r1, #32
   d5414:	f007 ff4a 	bl	dd2ac <_ZdlPvj>
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}

000d541c <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d541c:	6803      	ldr	r3, [r0, #0]
   d541e:	b12b      	cbz	r3, d542c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d5420:	6842      	ldr	r2, [r0, #4]
   d5422:	4293      	cmp	r3, r2
   d5424:	d202      	bcs.n	d542c <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d5426:	4618      	mov	r0, r3
   d5428:	f00e b8d9 	b.w	e35de <atoi>
   d542c:	2000      	movs	r0, #0
   d542e:	4770      	bx	lr

000d5430 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d5430:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5432:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d5434:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5436:	b145      	cbz	r5, d544a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d5438:	6843      	ldr	r3, [r0, #4]
   d543a:	429d      	cmp	r5, r3
   d543c:	d205      	bcs.n	d544a <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d543e:	4628      	mov	r0, r5
   d5440:	f00f f9ac 	bl	e479c <strlen>
   d5444:	3001      	adds	r0, #1
   d5446:	4405      	add	r5, r0
   d5448:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d544a:	4620      	mov	r0, r4
   d544c:	bd38      	pop	{r3, r4, r5, pc}

000d544e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5450:	4604      	mov	r4, r0
    if (str == NULL) {
   d5452:	460f      	mov	r7, r1
   d5454:	6846      	ldr	r6, [r0, #4]
   d5456:	b921      	cbnz	r1, d5462 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d5458:	6803      	ldr	r3, [r0, #0]
   d545a:	1c72      	adds	r2, r6, #1
   d545c:	6042      	str	r2, [r0, #4]
   d545e:	5599      	strb	r1, [r3, r6]
        return;
   d5460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d5462:	4608      	mov	r0, r1
   d5464:	f00f f99a 	bl	e479c <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5468:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d546a:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d546c:	19aa      	adds	r2, r5, r6
   d546e:	429a      	cmp	r2, r3
   d5470:	d808      	bhi.n	d5484 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d5472:	6820      	ldr	r0, [r4, #0]
   d5474:	462a      	mov	r2, r5
   d5476:	4639      	mov	r1, r7
   d5478:	4430      	add	r0, r6
   d547a:	f00e f9c3 	bl	e3804 <memcpy>
    len += l;
   d547e:	6863      	ldr	r3, [r4, #4]
   d5480:	441d      	add	r5, r3
   d5482:	6065      	str	r5, [r4, #4]
   d5484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5488 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d5488:	b570      	push	{r4, r5, r6, lr}
   d548a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	68a6      	ldr	r6, [r4, #8]
   d5490:	6825      	ldr	r5, [r4, #0]
   d5492:	4a05      	ldr	r2, [pc, #20]	; (d54a8 <_ZN10BlynkParam3addEi+0x20>)
   d5494:	460b      	mov	r3, r1
   d5496:	1a31      	subs	r1, r6, r0
   d5498:	4428      	add	r0, r5
   d549a:	f005 fbc7 	bl	dac2c <snprintf>
   d549e:	6863      	ldr	r3, [r4, #4]
   d54a0:	3001      	adds	r0, #1
   d54a2:	4418      	add	r0, r3
   d54a4:	6060      	str	r0, [r4, #4]
   d54a6:	bd70      	pop	{r4, r5, r6, pc}
   d54a8:	000e6dc3 	.word	0x000e6dc3

000d54ac <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d54ac:	b570      	push	{r4, r5, r6, lr}
   d54ae:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d54b0:	6840      	ldr	r0, [r0, #4]
   d54b2:	68a6      	ldr	r6, [r4, #8]
   d54b4:	6825      	ldr	r5, [r4, #0]
   d54b6:	4a05      	ldr	r2, [pc, #20]	; (d54cc <_ZN10BlynkParam3addEl+0x20>)
   d54b8:	460b      	mov	r3, r1
   d54ba:	1a31      	subs	r1, r6, r0
   d54bc:	4428      	add	r0, r5
   d54be:	f005 fbb5 	bl	dac2c <snprintf>
   d54c2:	6863      	ldr	r3, [r4, #4]
   d54c4:	3001      	adds	r0, #1
   d54c6:	4418      	add	r0, r3
   d54c8:	6060      	str	r0, [r4, #4]
   d54ca:	bd70      	pop	{r4, r5, r6, pc}
   d54cc:	000e6dc6 	.word	0x000e6dc6

000d54d0 <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d54d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54d4:	4692      	mov	sl, r2
   d54d6:	b08f      	sub	sp, #60	; 0x3c
   d54d8:	4699      	mov	r9, r3
   d54da:	4606      	mov	r6, r0
   d54dc:	461d      	mov	r5, r3
   d54de:	4688      	mov	r8, r1
  byte error, address;
  bool result = true;
   d54e0:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d54e2:	ebc9 0305 	rsb	r3, r9, r5
   d54e6:	459a      	cmp	sl, r3
   d54e8:	d97b      	bls.n	d55e2 <_Z15checkI2CDevicesP6StringPhjPb+0x112>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d54ea:	f818 7b01 	ldrb.w	r7, [r8], #1
    Wire.beginTransmission(address);
   d54ee:	f007 fea9 	bl	dd244 <_Z19__fetch_global_Wirev>
   d54f2:	4639      	mov	r1, r7
   d54f4:	f007 f88f 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d54f8:	f007 fea4 	bl	dd244 <_Z19__fetch_global_Wirev>
   d54fc:	f007 f896 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d5500:	bb78      	cbnz	r0, d5562 <_Z15checkI2CDevicesP6StringPhjPb+0x92>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d5502:	f006 ffd1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5506:	4939      	ldr	r1, [pc, #228]	; (d55ec <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d5508:	4683      	mov	fp, r0
   d550a:	a802      	add	r0, sp, #8
   d550c:	f005 fdd1 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d5510:	4631      	mov	r1, r6
   d5512:	a802      	add	r0, sp, #8
   d5514:	f005 fe6c 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d5518:	4935      	ldr	r1, [pc, #212]	; (d55f0 <_Z15checkI2CDevicesP6StringPhjPb+0x120>)
   d551a:	f005 fe75 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d551e:	4935      	ldr	r1, [pc, #212]	; (d55f4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d5520:	f005 fe72 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d5524:	2210      	movs	r2, #16
   d5526:	9001      	str	r0, [sp, #4]
   d5528:	4639      	mov	r1, r7
   d552a:	a806      	add	r0, sp, #24
   d552c:	f005 fe24 	bl	db178 <_ZN6StringC1Ehh>
   d5530:	9b01      	ldr	r3, [sp, #4]
   d5532:	a906      	add	r1, sp, #24
   d5534:	4618      	mov	r0, r3
   d5536:	f005 fe5b 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d553a:	4601      	mov	r1, r0
   d553c:	a80a      	add	r0, sp, #40	; 0x28
   d553e:	f005 fdf7 	bl	db130 <_ZN6StringC1ERKS_>
   d5542:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5544:	4658      	mov	r0, fp
   d5546:	f005 ff42 	bl	db3ce <_ZN5Print7printlnEPKc>
   d554a:	a80a      	add	r0, sp, #40	; 0x28
   d554c:	f005 fd6a 	bl	db024 <_ZN6StringD1Ev>
   d5550:	a806      	add	r0, sp, #24
   d5552:	f005 fd67 	bl	db024 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5556:	a802      	add	r0, sp, #8
   d5558:	f005 fd64 	bl	db024 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d555c:	2301      	movs	r3, #1
   d555e:	702b      	strb	r3, [r5, #0]
   d5560:	e03c      	b.n	d55dc <_Z15checkI2CDevicesP6StringPhjPb+0x10c>
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (!error==0)
    {
      Wire.reset();
   d5562:	f007 fe6f 	bl	dd244 <_Z19__fetch_global_Wirev>
   d5566:	f007 f868 	bl	dc63a <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d556a:	f007 fe6b 	bl	dd244 <_Z19__fetch_global_Wirev>
   d556e:	4639      	mov	r1, r7
   d5570:	f007 f851 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d5574:	f007 fe66 	bl	dd244 <_Z19__fetch_global_Wirev>
   d5578:	f007 f858 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d557c:	2800      	cmp	r0, #0
   d557e:	d0c0      	beq.n	d5502 <_Z15checkI2CDevicesP6StringPhjPb+0x32>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d5580:	f006 ff92 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5584:	4919      	ldr	r1, [pc, #100]	; (d55ec <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d5586:	4604      	mov	r4, r0
   d5588:	a802      	add	r0, sp, #8
   d558a:	f005 fd92 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d558e:	4631      	mov	r1, r6
   d5590:	a802      	add	r0, sp, #8
   d5592:	f005 fe2d 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d5596:	4918      	ldr	r1, [pc, #96]	; (d55f8 <_Z15checkI2CDevicesP6StringPhjPb+0x128>)
   d5598:	f005 fe36 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d559c:	4915      	ldr	r1, [pc, #84]	; (d55f4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d559e:	f005 fe33 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d55a2:	2210      	movs	r2, #16
   d55a4:	4683      	mov	fp, r0
   d55a6:	4639      	mov	r1, r7
   d55a8:	a806      	add	r0, sp, #24
   d55aa:	f005 fde5 	bl	db178 <_ZN6StringC1Ehh>
   d55ae:	a906      	add	r1, sp, #24
   d55b0:	4658      	mov	r0, fp
   d55b2:	f005 fe1d 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d55b6:	4601      	mov	r1, r0
   d55b8:	a80a      	add	r0, sp, #40	; 0x28
   d55ba:	f005 fdb9 	bl	db130 <_ZN6StringC1ERKS_>
   d55be:	990a      	ldr	r1, [sp, #40]	; 0x28
   d55c0:	4620      	mov	r0, r4
   d55c2:	f005 ff04 	bl	db3ce <_ZN5Print7printlnEPKc>
   d55c6:	a80a      	add	r0, sp, #40	; 0x28
   d55c8:	f005 fd2c 	bl	db024 <_ZN6StringD1Ev>
   d55cc:	a806      	add	r0, sp, #24
   d55ce:	f005 fd29 	bl	db024 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d55d2:	2400      	movs	r4, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d55d4:	a802      	add	r0, sp, #8
   d55d6:	f005 fd25 	bl	db024 <_ZN6StringD1Ev>
   d55da:	702c      	strb	r4, [r5, #0]
   d55dc:	3610      	adds	r6, #16
   d55de:	3501      	adds	r5, #1
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d55e0:	e77f      	b.n	d54e2 <_Z15checkI2CDevicesP6StringPhjPb+0x12>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d55e2:	4620      	mov	r0, r4
   d55e4:	b00f      	add	sp, #60	; 0x3c
   d55e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55ea:	bf00      	nop
   d55ec:	000e6dca 	.word	0x000e6dca
   d55f0:	000e6de2 	.word	0x000e6de2
   d55f4:	000e6dd2 	.word	0x000e6dd2
   d55f8:	000e6dde 	.word	0x000e6dde

000d55fc <_Z9saveStatev>:
  DEBUG_PRINTLN();
  readingCount++;
}

void saveState()
{
   d55fc:	b510      	push	{r4, lr}
  // EEPROM.put(0, state);
  DEBUG_PRINTLN("Saving State");
   d55fe:	f006 ff53 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5602:	4906      	ldr	r1, [pc, #24]	; (d561c <_Z9saveStatev+0x20>)
   d5604:	f005 fee3 	bl	db3ce <_ZN5Print7printlnEPKc>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5608:	f240 432c 	movw	r3, #1068	; 0x42c
   d560c:	4a04      	ldr	r2, [pc, #16]	; (d5620 <_Z9saveStatev+0x24>)
   d560e:	4805      	ldr	r0, [pc, #20]	; (d5624 <_Z9saveStatev+0x28>)
   d5610:	2100      	movs	r1, #0
  fram.put(0,state);
}
   d5612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5616:	f004 b916 	b.w	d9846 <_ZN10MB85RC256V9writeDataEjPKhj>
   d561a:	bf00      	nop
   d561c:	000e6e2a 	.word	0x000e6e2a
   d5620:	2003da80 	.word	0x2003da80
   d5624:	2003d6e8 	.word	0x2003d6e8

000d5628 <_Z9loadStatev>:

void loadState()
{
   d5628:	b510      	push	{r4, lr}
  // EEPROM.get(0, state);
  DEBUG_PRINTLN("Loading State");
   d562a:	f006 ff3d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d562e:	4906      	ldr	r1, [pc, #24]	; (d5648 <_Z9loadStatev+0x20>)
   d5630:	f005 fecd 	bl	db3ce <_ZN5Print7printlnEPKc>
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5634:	f240 432c 	movw	r3, #1068	; 0x42c
   d5638:	4a04      	ldr	r2, [pc, #16]	; (d564c <_Z9loadStatev+0x24>)
   d563a:	4805      	ldr	r0, [pc, #20]	; (d5650 <_Z9loadStatev+0x28>)
   d563c:	2100      	movs	r1, #0
  fram.get(0,state);
}
   d563e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5642:	f004 b8b3 	b.w	d97ac <_ZN10MB85RC256V8readDataEjPhj>
   d5646:	bf00      	nop
   d5648:	000e6e37 	.word	0x000e6e37
   d564c:	2003da80 	.word	0x2003da80
   d5650:	2003d6e8 	.word	0x2003d6e8

000d5654 <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d5654:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d5656:	4b05      	ldr	r3, [pc, #20]	; (d566c <BlynkWidgetWriteInternalPinADIS+0x18>)
   d5658:	2200      	movs	r2, #0
   d565a:	701a      	strb	r2, [r3, #0]
 DEBUG_PRINTLN("Disconnected");
   d565c:	f006 ff24 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5660:	4903      	ldr	r1, [pc, #12]	; (d5670 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d5662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 DEBUG_PRINTLN("Disconnected");
   d5666:	f005 beb2 	b.w	db3ce <_ZN5Print7printlnEPKc>
   d566a:	bf00      	nop
   d566c:	2003da44 	.word	0x2003da44
   d5670:	000e6e45 	.word	0x000e6e45

000d5674 <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d5674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5676:	6809      	ldr	r1, [r1, #0]
   d5678:	4668      	mov	r0, sp
   d567a:	f005 fd1a 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d567e:	4668      	mov	r0, sp
   d5680:	f005 fe0d 	bl	db29e <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d5684:	9900      	ldr	r1, [sp, #0]
   d5686:	4805      	ldr	r0, [pc, #20]	; (d569c <BlynkWidgetWrite16+0x28>)
   d5688:	f00e fb50 	bl	e3d2c <strcpy>
    saveState();
   d568c:	f7ff ffb6 	bl	d55fc <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d5690:	4668      	mov	r0, sp
   d5692:	f005 fcc7 	bl	db024 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d5696:	b005      	add	sp, #20
   d5698:	f85d fb04 	ldr.w	pc, [sp], #4
   d569c:	2003db90 	.word	0x2003db90

000d56a0 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d56a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d56a2:	6809      	ldr	r1, [r1, #0]
   d56a4:	4668      	mov	r0, sp
   d56a6:	f005 fd04 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d56aa:	4668      	mov	r0, sp
   d56ac:	f005 fdf7 	bl	db29e <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d56b0:	9900      	ldr	r1, [sp, #0]
   d56b2:	4805      	ldr	r0, [pc, #20]	; (d56c8 <BlynkWidgetWrite18+0x28>)
   d56b4:	f00e fb3a 	bl	e3d2c <strcpy>
    saveState();
   d56b8:	f7ff ffa0 	bl	d55fc <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d56bc:	4668      	mov	r0, sp
   d56be:	f005 fcb1 	bl	db024 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d56c2:	b005      	add	sp, #20
   d56c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d56c8:	2003dc90 	.word	0x2003dc90

000d56cc <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d56cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d56ce:	6809      	ldr	r1, [r1, #0]
   d56d0:	4668      	mov	r0, sp
   d56d2:	f005 fcee 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d56d6:	4668      	mov	r0, sp
   d56d8:	f005 fde1 	bl	db29e <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d56dc:	9900      	ldr	r1, [sp, #0]
   d56de:	4805      	ldr	r0, [pc, #20]	; (d56f4 <BlynkWidgetWrite26+0x28>)
   d56e0:	f00e fb24 	bl	e3d2c <strcpy>
    saveState();
   d56e4:	f7ff ff8a 	bl	d55fc <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d56e8:	4668      	mov	r0, sp
   d56ea:	f005 fc9b 	bl	db024 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d56ee:	b005      	add	sp, #20
   d56f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d56f4:	2003dd90 	.word	0x2003dd90

000d56f8 <BlynkWidgetWrite25>:
  System.reset();
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d56f8:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d56fa:	6808      	ldr	r0, [r1, #0]
   d56fc:	f00d ff6c 	bl	e35d8 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d5700:	ec51 0b10 	vmov	r0, r1, d0
   d5704:	f00d fedc 	bl	e34c0 <__aeabi_d2f>
   d5708:	4b02      	ldr	r3, [pc, #8]	; (d5714 <BlynkWidgetWrite25+0x1c>)
   d570a:	6018      	str	r0, [r3, #0]
  saveState();
}
   d570c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d5710:	f7ff bf74 	b.w	d55fc <_Z9saveStatev>
   d5714:	2003de90 	.word	0x2003de90

000d5718 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d5718:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d571a:	6808      	ldr	r0, [r1, #0]
   d571c:	f00d ff5f 	bl	e35de <atoi>
   d5720:	4b03      	ldr	r3, [pc, #12]	; (d5730 <BlynkWidgetWrite17+0x18>)
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
  #endif
  if (param.asInt()==1)
   d5722:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d5724:	bf0c      	ite	eq
   d5726:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d5728:	2201      	movne	r2, #1
   d572a:	701a      	strb	r2, [r3, #0]
   d572c:	bd08      	pop	{r3, pc}
   d572e:	bf00      	nop
   d5730:	2003da45 	.word	0x2003da45

000d5734 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5734:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5736:	4b07      	ldr	r3, [pc, #28]	; (d5754 <_Z12alertChangedv+0x20>)
   d5738:	781a      	ldrb	r2, [r3, #0]
   d573a:	4b07      	ldr	r3, [pc, #28]	; (d5758 <_Z12alertChangedv+0x24>)
   d573c:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d5740:	4291      	cmp	r1, r2
   d5742:	d005      	beq.n	d5750 <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5744:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d5748:	f7ff ff58 	bl	d55fc <_Z9saveStatev>
    return true;
   d574c:	2001      	movs	r0, #1
   d574e:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5750:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5752:	bd08      	pop	{r3, pc}
   d5754:	2003e21c 	.word	0x2003e21c
   d5758:	2003da80 	.word	0x2003da80

000d575c <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d575c:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d575e:	4b07      	ldr	r3, [pc, #28]	; (d577c <_Z15batAlertChangedv+0x20>)
   d5760:	781a      	ldrb	r2, [r3, #0]
   d5762:	4b07      	ldr	r3, [pc, #28]	; (d5780 <_Z15batAlertChangedv+0x24>)
   d5764:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d5768:	4291      	cmp	r1, r2
   d576a:	d005      	beq.n	d5778 <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d576c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d5770:	f7ff ff44 	bl	d55fc <_Z9saveStatev>
    return true;
   d5774:	2001      	movs	r0, #1
   d5776:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5778:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d577a:	bd08      	pop	{r3, pc}
   d577c:	2003decd 	.word	0x2003decd
   d5780:	2003da80 	.word	0x2003da80

000d5784 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5784:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d5786:	4b07      	ldr	r3, [pc, #28]	; (d57a4 <_Z18tamperAlertChangedv+0x20>)
   d5788:	781a      	ldrb	r2, [r3, #0]
   d578a:	4b07      	ldr	r3, [pc, #28]	; (d57a8 <_Z18tamperAlertChangedv+0x24>)
   d578c:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d5790:	4291      	cmp	r1, r2
   d5792:	d005      	beq.n	d57a0 <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5794:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d5798:	f7ff ff30 	bl	d55fc <_Z9saveStatev>
    return true;
   d579c:	2001      	movs	r0, #1
   d579e:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d57a0:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	2003decc 	.word	0x2003decc
   d57a8:	2003da80 	.word	0x2003da80

000d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d57ac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d57ae:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d57b0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d57b2:	b17c      	cbz	r4, d57d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d57b4:	6863      	ldr	r3, [r4, #4]
   d57b6:	3b01      	subs	r3, #1
   d57b8:	6063      	str	r3, [r4, #4]
   d57ba:	b95b      	cbnz	r3, d57d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d57bc:	6823      	ldr	r3, [r4, #0]
   d57be:	4620      	mov	r0, r4
   d57c0:	689b      	ldr	r3, [r3, #8]
   d57c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57c4:	68a3      	ldr	r3, [r4, #8]
   d57c6:	3b01      	subs	r3, #1
   d57c8:	60a3      	str	r3, [r4, #8]
   d57ca:	b91b      	cbnz	r3, d57d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d57cc:	6823      	ldr	r3, [r4, #0]
   d57ce:	4620      	mov	r0, r4
   d57d0:	68db      	ldr	r3, [r3, #12]
   d57d2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d57d4:	4628      	mov	r0, r5
   d57d6:	bd38      	pop	{r3, r4, r5, pc}

000d57d8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d57d8:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d57da:	4b04      	ldr	r3, [pc, #16]	; (d57ec <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d57dc:	4604      	mov	r4, r0
   d57de:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57e2:	f7ff ffe3 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57e6:	4620      	mov	r0, r4
   d57e8:	bd10      	pop	{r4, pc}
   d57ea:	bf00      	nop
   d57ec:	000e81bc 	.word	0x000e81bc

000d57f0 <_ZN5Print7printlnItLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d57f0:	b538      	push	{r3, r4, r5, lr}
   d57f2:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d57f4:	b922      	cbnz	r2, d5800 <_ZN5Print7printlnItLi0EEEjT_i+0x10>
        return write(n);
   d57f6:	6803      	ldr	r3, [r0, #0]
   d57f8:	b2c9      	uxtb	r1, r1
   d57fa:	689b      	ldr	r3, [r3, #8]
   d57fc:	4798      	blx	r3
   d57fe:	e002      	b.n	d5806 <_ZN5Print7printlnItLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5800:	b2d2      	uxtb	r2, r2
   d5802:	f005 fdee 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5806:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5808:	4628      	mov	r0, r5
   d580a:	f005 fdd4 	bl	db3b6 <_ZN5Print7printlnEv>
        return n;
    }
   d580e:	4420      	add	r0, r4
   d5810:	bd38      	pop	{r3, r4, r5, pc}

000d5812 <_ZN5Print7printlnIbLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d5812:	b538      	push	{r3, r4, r5, lr}
   d5814:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d5816:	b91a      	cbnz	r2, d5820 <_ZN5Print7printlnIbLi0EEEjT_i+0xe>
        return write(n);
   d5818:	6803      	ldr	r3, [r0, #0]
   d581a:	689b      	ldr	r3, [r3, #8]
   d581c:	4798      	blx	r3
   d581e:	e002      	b.n	d5826 <_ZN5Print7printlnIbLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5820:	b2d2      	uxtb	r2, r2
   d5822:	f005 fdde 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5826:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5828:	4628      	mov	r0, r5
   d582a:	f005 fdc4 	bl	db3b6 <_ZN5Print7printlnEv>
        return n;
    }
   d582e:	4420      	add	r0, r4
   d5830:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5834 <BlynkWidgetWrite24>:
    gmtOffsetValid=false;
  saveState();
}
// Update buzzerTamper flag
BLYNK_WRITE(V24) 
{
   d5834:	b510      	push	{r4, lr}
   d5836:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerTamper=param.asInt();
   d5838:	4c0b      	ldr	r4, [pc, #44]	; (d5868 <BlynkWidgetWrite24+0x34>)
   d583a:	f00d fed0 	bl	e35de <atoi>
   d583e:	3000      	adds	r0, #0
   d5840:	bf18      	it	ne
   d5842:	2001      	movne	r0, #1
   d5844:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
  saveState();
   d5848:	f7ff fed8 	bl	d55fc <_Z9saveStatev>

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerTamper flag value is: ");
   d584c:	f006 fe2c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5850:	4906      	ldr	r1, [pc, #24]	; (d586c <BlynkWidgetWrite24+0x38>)
   d5852:	f005 fda9 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerTamper);
   d5856:	f006 fe27 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d585a:	220a      	movs	r2, #10
   d585c:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d5860:	f7ff ffd7 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
   d5864:	bd10      	pop	{r4, pc}
   d5866:	bf00      	nop
   d5868:	2003da80 	.word	0x2003da80
   d586c:	000e6e90 	.word	0x000e6e90

000d5870 <BlynkWidgetWrite27>:
#endif
}
// Update buzzerVapor flag
BLYNK_WRITE(V27) 
{
   d5870:	b510      	push	{r4, lr}
   d5872:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerVapor=param.asInt();
   d5874:	4c0b      	ldr	r4, [pc, #44]	; (d58a4 <BlynkWidgetWrite27+0x34>)
   d5876:	f00d feb2 	bl	e35de <atoi>
   d587a:	3000      	adds	r0, #0
   d587c:	bf18      	it	ne
   d587e:	2001      	movne	r0, #1
   d5880:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
  saveState();
   d5884:	f7ff feba 	bl	d55fc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerVapor flag value is: ");
   d5888:	f006 fe0e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d588c:	4906      	ldr	r1, [pc, #24]	; (d58a8 <BlynkWidgetWrite27+0x38>)
   d588e:	f005 fd8b 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerVapor);
   d5892:	f006 fe09 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5896:	220a      	movs	r2, #10
   d5898:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d589c:	f7ff ffb9 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
   d58a0:	bd10      	pop	{r4, pc}
   d58a2:	bf00      	nop
   d58a4:	2003da80 	.word	0x2003da80
   d58a8:	000e6eb9 	.word	0x000e6eb9

000d58ac <BlynkWidgetWrite28>:
#endif
}
// Update notifyVapor flag
BLYNK_WRITE(V28) 
{
   d58ac:	b510      	push	{r4, lr}
   d58ae:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyVapor=param.asInt();
   d58b0:	4c0b      	ldr	r4, [pc, #44]	; (d58e0 <BlynkWidgetWrite28+0x34>)
   d58b2:	f00d fe94 	bl	e35de <atoi>
   d58b6:	3000      	adds	r0, #0
   d58b8:	bf18      	it	ne
   d58ba:	2001      	movne	r0, #1
   d58bc:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
  saveState();
   d58c0:	f7ff fe9c 	bl	d55fc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyVapor flag value is: ");
   d58c4:	f006 fdf0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d58c8:	4906      	ldr	r1, [pc, #24]	; (d58e4 <BlynkWidgetWrite28+0x38>)
   d58ca:	f005 fd6d 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyVapor);
   d58ce:	f006 fdeb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d58d2:	220a      	movs	r2, #10
   d58d4:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d58d8:	f7ff ff9b 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
   d58dc:	bd10      	pop	{r4, pc}
   d58de:	bf00      	nop
   d58e0:	2003da80 	.word	0x2003da80
   d58e4:	000e6ee1 	.word	0x000e6ee1

000d58e8 <BlynkWidgetWrite29>:
#endif
}
// Update notifyTamper flag
BLYNK_WRITE(V29) 
{
   d58e8:	b510      	push	{r4, lr}
   d58ea:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyTamper=param.asInt();
   d58ec:	4c0b      	ldr	r4, [pc, #44]	; (d591c <BlynkWidgetWrite29+0x34>)
   d58ee:	f00d fe76 	bl	e35de <atoi>
   d58f2:	3000      	adds	r0, #0
   d58f4:	bf18      	it	ne
   d58f6:	2001      	movne	r0, #1
   d58f8:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
  saveState();
   d58fc:	f7ff fe7e 	bl	d55fc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyTamper flag value is: ");
   d5900:	f006 fdd2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5904:	4906      	ldr	r1, [pc, #24]	; (d5920 <BlynkWidgetWrite29+0x38>)
   d5906:	f005 fd4f 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyTamper);
   d590a:	f006 fdcd 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d590e:	220a      	movs	r2, #10
   d5910:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d5914:	f7ff ff7d 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
   d5918:	bd10      	pop	{r4, pc}
   d591a:	bf00      	nop
   d591c:	2003da80 	.word	0x2003da80
   d5920:	000e6f09 	.word	0x000e6f09

000d5924 <BlynkWidgetWrite32>:
  }
}

// Update notifyBattery flag
BLYNK_WRITE(V32) 
{
   d5924:	b510      	push	{r4, lr}
   d5926:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyBattery=param.asInt();
   d5928:	4c0b      	ldr	r4, [pc, #44]	; (d5958 <BlynkWidgetWrite32+0x34>)
   d592a:	f00d fe58 	bl	e35de <atoi>
   d592e:	3000      	adds	r0, #0
   d5930:	bf18      	it	ne
   d5932:	2001      	movne	r0, #1
   d5934:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
  saveState();
   d5938:	f7ff fe60 	bl	d55fc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("Update notifyBattery flag value is: ");
   d593c:	f006 fdb4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5940:	4906      	ldr	r1, [pc, #24]	; (d595c <BlynkWidgetWrite32+0x38>)
   d5942:	f005 fd31 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyBattery);
   d5946:	f006 fdaf 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d594a:	220a      	movs	r2, #10
   d594c:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d5950:	f7ff ff5f 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
   d5954:	bd10      	pop	{r4, pc}
   d5956:	bf00      	nop
   d5958:	2003da80 	.word	0x2003da80
   d595c:	000e6f32 	.word	0x000e6f32

000d5960 <_ZN5Print5printIjLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d5960:	b410      	push	{r4}
{
    if (base == 0) {
   d5962:	b92a      	cbnz	r2, d5970 <_ZN5Print5printIjLi0EEEjT_i+0x10>
        return write(n);
   d5964:	6803      	ldr	r3, [r0, #0]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d5966:	f85d 4b04 	ldr.w	r4, [sp], #4
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d596a:	689b      	ldr	r3, [r3, #8]
   d596c:	b2c9      	uxtb	r1, r1
   d596e:	4718      	bx	r3
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5970:	b2d2      	uxtb	r2, r2
    }
}
   d5972:	f85d 4b04 	ldr.w	r4, [sp], #4
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5976:	f005 bd34 	b.w	db3e2 <_ZN5Print11printNumberEmh>
	...

000d597c <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
   d597c:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
   d597e:	f006 fd93 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5982:	215b      	movs	r1, #91	; 0x5b
   d5984:	f005 fd14 	bl	db3b0 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
   d5988:	f006 fd8e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d598c:	4604      	mov	r4, r0
   d598e:	f004 fd9d 	bl	da4cc <_Z11BlynkMillisv>
   d5992:	220a      	movs	r2, #10
   d5994:	4601      	mov	r1, r0
   d5996:	4620      	mov	r0, r4
   d5998:	f7ff ffe2 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
            BLYNK_PRINT.print(BLYNK_F("] "));
   d599c:	f006 fd84 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d59a0:	4902      	ldr	r1, [pc, #8]	; (d59ac <_ZL14BLYNK_LOG_TIMEv+0x30>)
        }
   d59a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
   d59a6:	f005 bcff 	b.w	db3a8 <_ZN5Print5printEPKc>
   d59aa:	bf00      	nop
   d59ac:	000e6f57 	.word	0x000e6f57

000d59b0 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>:
        #include <ctype.h>
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
   d59b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59b2:	4604      	mov	r4, r0
   d59b4:	460e      	mov	r6, r1
   d59b6:	4617      	mov	r7, r2
            if (len) {
                BLYNK_LOG_TIME();
   d59b8:	f7ff ffe0 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
                BLYNK_PRINT.print(msg);
   d59bc:	f006 fd74 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d59c0:	4621      	mov	r1, r4
   d59c2:	f005 fcf1 	bl	db3a8 <_ZN5Print5printEPKc>
   d59c6:	4437      	add	r7, r6
                int l2 = len;
                const uint8_t* octets = (const uint8_t*)addr;
                bool prev_print = true;
   d59c8:	2401      	movs	r4, #1
                while (l2--) {
   d59ca:	42be      	cmp	r6, r7
   d59cc:	d028      	beq.n	d5a20 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x70>
                    const uint8_t c = *octets++ & 0xFF;
   d59ce:	f816 5b01 	ldrb.w	r5, [r6], #1
                    if (c >= 32 && c < 127) {
   d59d2:	f1a5 0320 	sub.w	r3, r5, #32
   d59d6:	2b5e      	cmp	r3, #94	; 0x5e
   d59d8:	d80b      	bhi.n	d59f2 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x42>
                        if (!prev_print) { BLYNK_PRINT.print(']'); }
   d59da:	b924      	cbnz	r4, d59e6 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x36>
   d59dc:	f006 fd64 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d59e0:	215d      	movs	r1, #93	; 0x5d
   d59e2:	f005 fce5 	bl	db3b0 <_ZN5Print5printEc>
                        BLYNK_PRINT.print((char)c);
   d59e6:	f006 fd5f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d59ea:	4629      	mov	r1, r5
   d59ec:	f005 fce0 	bl	db3b0 <_ZN5Print5printEc>
   d59f0:	e7ea      	b.n	d59c8 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x18>
                        prev_print = true;
                    } else {
                        BLYNK_PRINT.print(prev_print?'[':'|');
   d59f2:	f006 fd59 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d59f6:	2c00      	cmp	r4, #0
   d59f8:	bf14      	ite	ne
   d59fa:	215b      	movne	r1, #91	; 0x5b
   d59fc:	217c      	moveq	r1, #124	; 0x7c
   d59fe:	f005 fcd7 	bl	db3b0 <_ZN5Print5printEc>
                        if (c < 0x10) { BLYNK_PRINT.print('0'); }
   d5a02:	2d0f      	cmp	r5, #15
   d5a04:	d804      	bhi.n	d5a10 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x60>
   d5a06:	f006 fd4f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a0a:	2130      	movs	r1, #48	; 0x30
   d5a0c:	f005 fcd0 	bl	db3b0 <_ZN5Print5printEc>
                        BLYNK_PRINT.print(c, HEX);
   d5a10:	f006 fd4a 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a14:	2210      	movs	r2, #16
   d5a16:	4629      	mov	r1, r5
   d5a18:	f005 fce3 	bl	db3e2 <_ZN5Print11printNumberEmh>
                        prev_print = false;
   d5a1c:	2400      	movs	r4, #0
   d5a1e:	e7d4      	b.n	d59ca <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x1a>
                    }
                }
                if (!prev_print) {
   d5a20:	b924      	cbnz	r4, d5a2c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x7c>
                    BLYNK_PRINT.print(']');
   d5a22:	f006 fd41 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a26:	215d      	movs	r1, #93	; 0x5d
   d5a28:	f005 fcc2 	bl	db3b0 <_ZN5Print5printEc>
                }
                BLYNK_PRINT.println();
   d5a2c:	f006 fd3c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
            }
        }
   d5a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    }
                }
                if (!prev_print) {
                    BLYNK_PRINT.print(']');
                }
                BLYNK_PRINT.println();
   d5a34:	f005 bcbf 	b.w	db3b6 <_ZN5Print7printlnEv>

000d5a38 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
   d5a3a:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5a3c:	b087      	sub	sp, #28
   d5a3e:	4604      	mov	r4, r0
        if (domain) {
   d5a40:	b1ef      	cbz	r7, d5a7e <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
   d5a42:	f7ff ff9b 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d5a46:	f006 fd2f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a4a:	4931      	ldr	r1, [pc, #196]	; (d5b10 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
   d5a4c:	f005 fcac 	bl	db3a8 <_ZN5Print5printEPKc>
   d5a50:	f006 fd2a 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5a56:	f005 fca7 	bl	db3a8 <_ZN5Print5printEPKc>
   d5a5a:	f006 fd25 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a5e:	213a      	movs	r1, #58	; 0x3a
   d5a60:	f005 fca6 	bl	db3b0 <_ZN5Print5printEc>
   d5a64:	f006 fd20 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a68:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d5a6a:	220a      	movs	r2, #10
   d5a6c:	f7ff fec0 	bl	d57f0 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(domain, port));
   d5a70:	2300      	movs	r3, #0
   d5a72:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d5a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5a76:	4620      	mov	r0, r4
   d5a78:	f006 ffae 	bl	dc9d8 <_ZN9TCPClient7connectEPKctm>
   d5a7c:	e043      	b.n	d5b06 <_ZN22BlynkTransportParticle7connectEv+0xce>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
   d5a7e:	f7ff ff7d 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d5a82:	f006 fd11 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a86:	4922      	ldr	r1, [pc, #136]	; (d5b10 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
   d5a88:	f005 fc8e 	bl	db3a8 <_ZN5Print5printEPKc>
   d5a8c:	f006 fd0c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a90:	220a      	movs	r2, #10
   d5a92:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d5a96:	f005 fca4 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5a9a:	f006 fd05 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5a9e:	212e      	movs	r1, #46	; 0x2e
   d5aa0:	f005 fc86 	bl	db3b0 <_ZN5Print5printEc>
   d5aa4:	f006 fd00 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5aa8:	220a      	movs	r2, #10
   d5aaa:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d5aae:	f005 fc98 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5ab2:	f006 fcf9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5ab6:	212e      	movs	r1, #46	; 0x2e
   d5ab8:	f005 fc7a 	bl	db3b0 <_ZN5Print5printEc>
   d5abc:	f006 fcf4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5ac0:	220a      	movs	r2, #10
   d5ac2:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d5ac6:	f005 fc8c 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5aca:	f006 fced 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5ace:	212e      	movs	r1, #46	; 0x2e
   d5ad0:	f005 fc6e 	bl	db3b0 <_ZN5Print5printEc>
   d5ad4:	f006 fce8 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5ad8:	4625      	mov	r5, r4
   d5ada:	4606      	mov	r6, r0
   d5adc:	220a      	movs	r2, #10
   d5ade:	f815 1f20 	ldrb.w	r1, [r5, #32]!
   d5ae2:	f005 fc7e 	bl	db3e2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5ae6:	4630      	mov	r0, r6
   d5ae8:	f005 fc65 	bl	db3b6 <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5aec:	4b09      	ldr	r3, [pc, #36]	; (d5b14 <_ZN22BlynkTransportParticle7connectEv+0xdc>)
   d5aee:	9300      	str	r3, [sp, #0]
   d5af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5af2:	ae01      	add	r6, sp, #4
   d5af4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5af6:	682b      	ldr	r3, [r5, #0]
   d5af8:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   d5afa:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d5afc:	463b      	mov	r3, r7
   d5afe:	4669      	mov	r1, sp
   d5b00:	4620      	mov	r0, r4
   d5b02:	f006 ffeb 	bl	dcadc <_ZN9TCPClient7connectE9IPAddresstm>
   d5b06:	1e43      	subs	r3, r0, #1
   d5b08:	4258      	negs	r0, r3
   d5b0a:	4158      	adcs	r0, r3
        }
        return 0;
    }
   d5b0c:	b007      	add	sp, #28
   d5b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b10:	000e6f5a 	.word	0x000e6f5a
   d5b14:	000e80d0 	.word	0x000e80d0

000d5b18 <_ZN13BlynkParticle6configEPKcS1_t>:
public:
    BlynkParticle(BlynkTransportParticle& transp)
        : Base(transp)
    {}

    void config(const char* auth,
   d5b18:	b570      	push	{r4, r5, r6, lr}
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d5b1a:	6041      	str	r1, [r0, #4]
   d5b1c:	4604      	mov	r4, r0
   d5b1e:	4616      	mov	r6, r2
   d5b20:	461d      	mov	r5, r3
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d5b22:	f004 fcd3 	bl	da4cc <_Z11BlynkMillisv>
   d5b26:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d5b2a:	3808      	subs	r0, #8
   d5b2c:	6120      	str	r0, [r4, #16]
   d5b2e:	60e0      	str	r0, [r4, #12]
   d5b30:	6160      	str	r0, [r4, #20]

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
        BLYNK_LOG1(BLYNK_F("Blynk v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE));
#else
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
   d5b32:	f7ff ff23 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d5b36:	f006 fcb7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5b3a:	4903      	ldr	r1, [pc, #12]	; (d5b48 <_ZN13BlynkParticle6configEPKcS1_t+0x30>)
   d5b3c:	f005 fc47 	bl	db3ce <_ZN5Print7printlnEPKc>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d5b40:	6821      	ldr	r1, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d5b42:	634e      	str	r6, [r1, #52]	; 0x34
        port = p;
   d5b44:	870d      	strh	r5, [r1, #56]	; 0x38
   d5b46:	bd70      	pop	{r4, r5, r6, pc}
   d5b48:	000e6f69 	.word	0x000e6f69

000d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d5b4c:	b508      	push	{r3, lr}
        state = CONNECTING;
   d5b4e:	2300      	movs	r3, #0
   d5b50:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5b52:	6800      	ldr	r0, [r0, #0]
   d5b54:	f007 f83c 	bl	dcbd0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d5b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d5b5c:	f004 bcbe 	b.w	da4dc <BlynkNoOpCbk>

000d5b60 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d5b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b64:	4607      	mov	r7, r0
   d5b66:	460c      	mov	r4, r1
{
    if (base == 0) {
   d5b68:	4615      	mov	r5, r2
   d5b6a:	b92a      	cbnz	r2, d5b78 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d5b6c:	6803      	ldr	r3, [r0, #0]
   d5b6e:	b2c9      	uxtb	r1, r1
   d5b70:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d5b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d5b76:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5b78:	2900      	cmp	r1, #0
   d5b7a:	da07      	bge.n	d5b8c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d5b7c:	2a0a      	cmp	r2, #10
   d5b7e:	d105      	bne.n	d5b8c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d5b80:	212d      	movs	r1, #45	; 0x2d
   d5b82:	f005 fc15 	bl	db3b0 <_ZN5Print5printEc>
            val = -n;
   d5b86:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d5b88:	4606      	mov	r6, r0
            val = -n;
   d5b8a:	e001      	b.n	d5b90 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d5b8c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5b8e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b90:	b2ea      	uxtb	r2, r5
   d5b92:	4638      	mov	r0, r7
   d5b94:	f005 fc25 	bl	db3e2 <_ZN5Print11printNumberEmh>
    }
}
   d5b98:	4430      	add	r0, r6
   d5b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d5b9e:	b538      	push	{r3, r4, r5, lr}
   d5ba0:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d5ba2:	f7ff ffdd 	bl	d5b60 <_ZN5Print5printIiLi0EEEjT_i>
   d5ba6:	4604      	mov	r4, r0
        n += println();
   d5ba8:	4628      	mov	r0, r5
   d5baa:	f005 fc04 	bl	db3b6 <_ZN5Print7printlnEv>
        return n;
    }
   d5bae:	4420      	add	r0, r4
   d5bb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bb4 <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d5bb4:	b510      	push	{r4, lr}
   d5bb6:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.deviceZone=param.asInt();
   d5bb8:	4c0b      	ldr	r4, [pc, #44]	; (d5be8 <BlynkWidgetWrite23+0x34>)
   d5bba:	f00d fd10 	bl	e35de <atoi>
   d5bbe:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
   d5bc2:	f006 fc71 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5bc6:	4909      	ldr	r1, [pc, #36]	; (d5bec <BlynkWidgetWrite23+0x38>)
   d5bc8:	f005 fbee 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.deviceZone);
   d5bcc:	f006 fc6c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5bd0:	220a      	movs	r2, #10
   d5bd2:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5bd6:	f7ff ffe2 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
#endif
    gmtOffsetValid=false;
   d5bda:	4b05      	ldr	r3, [pc, #20]	; (d5bf0 <BlynkWidgetWrite23+0x3c>)
   d5bdc:	2200      	movs	r2, #0
   d5bde:	701a      	strb	r2, [r3, #0]
  saveState();
}
   d5be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
    DEBUG_PRINTLN(state.deviceZone);
#endif
    gmtOffsetValid=false;
  saveState();
   d5be4:	f7ff bd0a 	b.w	d55fc <_Z9saveStatev>
   d5be8:	2003da80 	.word	0x2003da80
   d5bec:	000e6ff7 	.word	0x000e6ff7
   d5bf0:	2003e1ac 	.word	0x2003e1ac

000d5bf4 <BlynkWidgetWrite31>:
#endif
}

//Accelerometer threshold
BLYNK_WRITE(V31) 
{
   d5bf4:	b570      	push	{r4, r5, r6, lr}
   d5bf6:	6808      	ldr	r0, [r1, #0]
  int thresh = param.asInt();
  int oldvalue=state.ActivityThreshold;
   d5bf8:	4c1e      	ldr	r4, [pc, #120]	; (d5c74 <BlynkWidgetWrite31+0x80>)
   d5bfa:	f00d fcf0 	bl	e35de <atoi>
   d5bfe:	f8d4 641c 	ldr.w	r6, [r4, #1052]	; 0x41c
   d5c02:	4605      	mov	r5, r0

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
   d5c04:	f006 fc50 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c08:	491b      	ldr	r1, [pc, #108]	; (d5c78 <BlynkWidgetWrite31+0x84>)
   d5c0a:	f005 fbcd 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(thresh);
   d5c0e:	f006 fc4b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c12:	220a      	movs	r2, #10
   d5c14:	4629      	mov	r1, r5
   d5c16:	f7ff ffc2 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
#endif
  state.ActivityThreshold=100;
  if (thresh==3)
   d5c1a:	2d03      	cmp	r5, #3
   d5c1c:	4623      	mov	r3, r4
   d5c1e:	d101      	bne.n	d5c24 <BlynkWidgetWrite31+0x30>
  	state.ActivityThreshold=144;
   d5c20:	2290      	movs	r2, #144	; 0x90
   d5c22:	e003      	b.n	d5c2c <BlynkWidgetWrite31+0x38>
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
   d5c24:	2d01      	cmp	r5, #1

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
    DEBUG_PRINTLN(thresh);
#endif
  state.ActivityThreshold=100;
   d5c26:	bf14      	ite	ne
   d5c28:	2264      	movne	r2, #100	; 0x64
  if (thresh==3)
  	state.ActivityThreshold=144;
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
  	state.ActivityThreshold=72;
   d5c2a:	2248      	moveq	r2, #72	; 0x48
   d5c2c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  // If value changed since the acceleromter will need to be reinitalized save the new value and reset
  if (state.ActivityThreshold != oldvalue)
   d5c30:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   d5c34:	429e      	cmp	r6, r3
   d5c36:	d01b      	beq.n	d5c70 <BlynkWidgetWrite31+0x7c>
  {
#ifdef KURTDEBUG
    DEBUG_PRINT("Update Accelerometer value is: ");
   d5c38:	f006 fc36 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c3c:	490f      	ldr	r1, [pc, #60]	; (d5c7c <BlynkWidgetWrite31+0x88>)
   d5c3e:	f005 fbb3 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.ActivityThreshold);
   d5c42:	f006 fc31 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c46:	4b0b      	ldr	r3, [pc, #44]	; (d5c74 <BlynkWidgetWrite31+0x80>)
   d5c48:	220a      	movs	r2, #10
   d5c4a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   d5c4e:	f7ff ffa6 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
    DEBUG_PRINT("Will reset system ");
   d5c52:	f006 fc29 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c56:	490a      	ldr	r1, [pc, #40]	; (d5c80 <BlynkWidgetWrite31+0x8c>)
   d5c58:	f005 fba6 	bl	db3a8 <_ZN5Print5printEPKc>
#endif
    saveState();
   d5c5c:	f7ff fcce 	bl	d55fc <_Z9saveStatev>
    delay(4000);
   d5c60:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d5c64:	f005 fe96 	bl	db994 <delay>
    System.reset();
  }
}
   d5c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    DEBUG_PRINTLN(state.ActivityThreshold);
    DEBUG_PRINT("Will reset system ");
#endif
    saveState();
    delay(4000);
    System.reset();
   d5c6c:	f005 b8f0 	b.w	dae50 <_ZN11SystemClass5resetEv>
   d5c70:	bd70      	pop	{r4, r5, r6, pc}
   d5c72:	bf00      	nop
   d5c74:	2003da80 	.word	0x2003da80
   d5c78:	000e7013 	.word	0x000e7013
   d5c7c:	000e7042 	.word	0x000e7042
   d5c80:	000e7062 	.word	0x000e7062

000d5c84 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5c84:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5c86:	4608      	mov	r0, r1
   d5c88:	f00d fca9 	bl	e35de <atoi>
   d5c8c:	4c08      	ldr	r4, [pc, #32]	; (d5cb0 <_Z16gmtOffsetHandlerPKcS0_+0x2c>)
  gmtOffsetValid = true;
   d5c8e:	4b09      	ldr	r3, [pc, #36]	; (d5cb4 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5c90:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d5c92:	2201      	movs	r2, #1
   d5c94:	701a      	strb	r2, [r3, #0]
  DEBUG_PRINT("GMT seconds offset is: ");
   d5c96:	f006 fc07 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5c9a:	4907      	ldr	r1, [pc, #28]	; (d5cb8 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
   d5c9c:	f005 fb84 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d5ca0:	f006 fc02 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5ca4:	220a      	movs	r2, #10
   d5ca6:	6821      	ldr	r1, [r4, #0]
   d5ca8:	f7ff ff79 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
   d5cac:	bd10      	pop	{r4, pc}
   d5cae:	bf00      	nop
   d5cb0:	2003d5a4 	.word	0x2003d5a4
   d5cb4:	2003e1ac 	.word	0x2003e1ac
   d5cb8:	000e7075 	.word	0x000e7075

000d5cbc <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d5cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
  DEBUG_PRINTLN(state.deviceZone);
   d5cbe:	4c19      	ldr	r4, [pc, #100]	; (d5d24 <_Z23publishGMTOffsetRequestv+0x68>)
}

void publishGMTOffsetRequest()
{
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
   d5cc0:	f006 fbf2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5cc4:	4918      	ldr	r1, [pc, #96]	; (d5d28 <_Z23publishGMTOffsetRequestv+0x6c>)
   d5cc6:	f005 fb6f 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d5cca:	f006 fbed 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5cce:	220a      	movs	r2, #10
   d5cd0:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5cd4:	f7ff ff63 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
  switch (state.deviceZone)
   d5cd8:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5cdc:	4b13      	ldr	r3, [pc, #76]	; (d5d2c <_Z23publishGMTOffsetRequestv+0x70>)
   d5cde:	2200      	movs	r2, #0
   d5ce0:	2903      	cmp	r1, #3
   d5ce2:	d812      	bhi.n	d5d0a <_Z23publishGMTOffsetRequestv+0x4e>
   d5ce4:	e8df f001 	tbb	[pc, r1]
   d5ce8:	0c070211 	.word	0x0c070211
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5cec:	781b      	ldrb	r3, [r3, #0]
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);
      break;
    case 1:
      // America/Chicago
      Particle.publish("gmtOffset", "America/Chicago", PRIVATE);
   d5cee:	f88d 2000 	strb.w	r2, [sp]
   d5cf2:	4a0f      	ldr	r2, [pc, #60]	; (d5d30 <_Z23publishGMTOffsetRequestv+0x74>)
   d5cf4:	e00d      	b.n	d5d12 <_Z23publishGMTOffsetRequestv+0x56>
   d5cf6:	781b      	ldrb	r3, [r3, #0]
      break;
    case 2:
      // America/Phoenix
      Particle.publish("gmtOffset", "America/Phoenix", PRIVATE);
   d5cf8:	f88d 2000 	strb.w	r2, [sp]
   d5cfc:	4a0d      	ldr	r2, [pc, #52]	; (d5d34 <_Z23publishGMTOffsetRequestv+0x78>)
   d5cfe:	e008      	b.n	d5d12 <_Z23publishGMTOffsetRequestv+0x56>
   d5d00:	781b      	ldrb	r3, [r3, #0]
      break;
    case 3:
      // America/Los_Angeles
      Particle.publish("gmtOffset", "America/Los_Angeles", PRIVATE);
   d5d02:	f88d 2000 	strb.w	r2, [sp]
   d5d06:	4a0c      	ldr	r2, [pc, #48]	; (d5d38 <_Z23publishGMTOffsetRequestv+0x7c>)
   d5d08:	e003      	b.n	d5d12 <_Z23publishGMTOffsetRequestv+0x56>
   d5d0a:	781b      	ldrb	r3, [r3, #0]
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
   d5d0c:	f88d 2000 	strb.w	r2, [sp]
   d5d10:	4a0a      	ldr	r2, [pc, #40]	; (d5d3c <_Z23publishGMTOffsetRequestv+0x80>)
   d5d12:	490b      	ldr	r1, [pc, #44]	; (d5d40 <_Z23publishGMTOffsetRequestv+0x84>)
   d5d14:	a802      	add	r0, sp, #8
   d5d16:	f7ff fb03 	bl	d5320 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.39>
   d5d1a:	a803      	add	r0, sp, #12
   d5d1c:	f7ff fd46 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d5d20:	b004      	add	sp, #16
   d5d22:	bd10      	pop	{r4, pc}
   d5d24:	2003da80 	.word	0x2003da80
   d5d28:	000e708d 	.word	0x000e708d
   d5d2c:	2003d714 	.word	0x2003d714
   d5d30:	000e70cd 	.word	0x000e70cd
   d5d34:	000e70dd 	.word	0x000e70dd
   d5d38:	000e70ed 	.word	0x000e70ed
   d5d3c:	000e70bc 	.word	0x000e70bc
   d5d40:	000e79bb 	.word	0x000e79bb

000d5d44 <_ZN5Print7printlnImLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d5d44:	b538      	push	{r3, r4, r5, lr}
   d5d46:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d5d48:	f7ff fe0a 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
   d5d4c:	4604      	mov	r4, r0
        n += println();
   d5d4e:	4628      	mov	r0, r5
   d5d50:	f005 fb31 	bl	db3b6 <_ZN5Print7printlnEv>
        return n;
    }
   d5d54:	4420      	add	r0, r4
   d5d56:	bd38      	pop	{r3, r4, r5, pc}

000d5d58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5d5c:	188e      	adds	r6, r1, r2
   d5d5e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5d60:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5d62:	4680      	mov	r8, r0
   d5d64:	460d      	mov	r5, r1
   d5d66:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5d68:	9105      	str	r1, [sp, #20]
   d5d6a:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5d6c:	f080 813d 	bcs.w	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d5d70:	880b      	ldrh	r3, [r1, #0]
   d5d72:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d5d76:	a805      	add	r0, sp, #20
   d5d78:	f7ff fb5a 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5d7c:	6803      	ldr	r3, [r0, #0]
   d5d7e:	429e      	cmp	r6, r3
   d5d80:	f240 8133 	bls.w	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5d84:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5d86:	7803      	ldrb	r3, [r0, #0]
   d5d88:	2b41      	cmp	r3, #65	; 0x41
   d5d8a:	d112      	bne.n	d5db2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d5d8c:	3001      	adds	r0, #1
   d5d8e:	f00d fc26 	bl	e35de <atoi>
   d5d92:	2805      	cmp	r0, #5
   d5d94:	dd01      	ble.n	d5d9a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d5d96:	24ff      	movs	r4, #255	; 0xff
   d5d98:	e00f      	b.n	d5dba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d5d9a:	9805      	ldr	r0, [sp, #20]
   d5d9c:	3001      	adds	r0, #1
   d5d9e:	f00d fc1e 	bl	e35de <atoi>
   d5da2:	2800      	cmp	r0, #0
   d5da4:	dbf7      	blt.n	d5d96 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d5da6:	9805      	ldr	r0, [sp, #20]
   d5da8:	3001      	adds	r0, #1
   d5daa:	f00d fc18 	bl	e35de <atoi>
   d5dae:	300e      	adds	r0, #14
   d5db0:	e002      	b.n	d5db8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d5db2:	a805      	add	r0, sp, #20
   d5db4:	f7ff fb32 	bl	d541c <_ZNK10BlynkParam8iterator5asIntEv>
   d5db8:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d5dba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d5dbe:	f247 2276 	movw	r2, #29302	; 0x7276
   d5dc2:	4293      	cmp	r3, r2
   d5dc4:	f000 80b7 	beq.w	d5f36 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1de>
   d5dc8:	d80d      	bhi.n	d5de6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d5dca:	f247 2261 	movw	r2, #29281	; 0x7261
   d5dce:	4293      	cmp	r3, r2
   d5dd0:	d07d      	beq.n	d5ece <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x176>
   d5dd2:	f247 2264 	movw	r2, #29284	; 0x7264
   d5dd6:	4293      	cmp	r3, r2
   d5dd8:	d051      	beq.n	d5e7e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d5dda:	f646 5270 	movw	r2, #28016	; 0x6d70
   d5dde:	4293      	cmp	r3, r2
   d5de0:	f040 80d4 	bne.w	d5f8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5de4:	e027      	b.n	d5e36 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xde>
   d5de6:	f247 7264 	movw	r2, #30564	; 0x7764
   d5dea:	4293      	cmp	r3, r2
   d5dec:	d059      	beq.n	d5ea2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d5dee:	f247 7276 	movw	r2, #30582	; 0x7776
   d5df2:	4293      	cmp	r3, r2
   d5df4:	f000 80b0 	beq.w	d5f58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
   d5df8:	f247 7261 	movw	r2, #30561	; 0x7761
   d5dfc:	4293      	cmp	r3, r2
   d5dfe:	f040 80c5 	bne.w	d5f8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5e02:	e085      	b.n	d5f10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b8>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5e04:	7803      	ldrb	r3, [r0, #0]
   d5e06:	2b41      	cmp	r3, #65	; 0x41
   d5e08:	d125      	bne.n	d5e56 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfe>
   d5e0a:	3001      	adds	r0, #1
   d5e0c:	f00d fbe7 	bl	e35de <atoi>
   d5e10:	2805      	cmp	r0, #5
   d5e12:	dd14      	ble.n	d5e3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>
   d5e14:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d5e16:	a805      	add	r0, sp, #20
   d5e18:	f7ff fb0a 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5e1c:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d5e1e:	4974      	ldr	r1, [pc, #464]	; (d5ff0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x298>)
   d5e20:	4628      	mov	r0, r5
   d5e22:	f00d ff79 	bl	e3d18 <strcmp>
   d5e26:	4601      	mov	r1, r0
   d5e28:	b9d0      	cbnz	r0, d5e60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x108>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f007 f956 	bl	dd0dc <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d5e30:	a805      	add	r0, sp, #20
   d5e32:	f7ff fafd 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5e36:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d5e38:	4286      	cmp	r6, r0
   d5e3a:	d8e3      	bhi.n	d5e04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d5e3c:	e0d5      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5e3e:	9805      	ldr	r0, [sp, #20]
   d5e40:	3001      	adds	r0, #1
   d5e42:	f00d fbcc 	bl	e35de <atoi>
   d5e46:	2800      	cmp	r0, #0
   d5e48:	dbe4      	blt.n	d5e14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d5e4a:	9805      	ldr	r0, [sp, #20]
   d5e4c:	3001      	adds	r0, #1
   d5e4e:	f00d fbc6 	bl	e35de <atoi>
   d5e52:	300e      	adds	r0, #14
   d5e54:	e002      	b.n	d5e5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x104>
   d5e56:	a805      	add	r0, sp, #20
   d5e58:	f7ff fae0 	bl	d541c <_ZNK10BlynkParam8iterator5asIntEv>
   d5e5c:	b2c4      	uxtb	r4, r0
   d5e5e:	e7da      	b.n	d5e16 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d5e60:	4964      	ldr	r1, [pc, #400]	; (d5ff4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x29c>)
   d5e62:	4628      	mov	r0, r5
   d5e64:	f00d ff58 	bl	e3d18 <strcmp>
   d5e68:	2800      	cmp	r0, #0
   d5e6a:	f000 80a4 	beq.w	d5fb6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5e6e:	4962      	ldr	r1, [pc, #392]	; (d5ff8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a0>)
   d5e70:	4628      	mov	r0, r5
   d5e72:	f00d ff51 	bl	e3d18 <strcmp>
   d5e76:	2800      	cmp	r0, #0
   d5e78:	f000 809d 	beq.w	d5fb6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5e7c:	e09d      	b.n	d5fba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x262>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5e7e:	ab0a      	add	r3, sp, #40	; 0x28
   d5e80:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d5e82:	a807      	add	r0, sp, #28
   d5e84:	2310      	movs	r3, #16
   d5e86:	2500      	movs	r5, #0
   d5e88:	495c      	ldr	r1, [pc, #368]	; (d5ffc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a4>)
   d5e8a:	9309      	str	r3, [sp, #36]	; 0x24
   d5e8c:	9508      	str	r5, [sp, #32]
   d5e8e:	f7ff fade 	bl	d544e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5e92:	a807      	add	r0, sp, #28
   d5e94:	4621      	mov	r1, r4
   d5e96:	f7ff faf7 	bl	d5488 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	f007 f948 	bl	dd130 <digitalRead>
   d5ea0:	e026      	b.n	d5ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5ea2:	a805      	add	r0, sp, #20
   d5ea4:	f7ff fac4 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5ea8:	6803      	ldr	r3, [r0, #0]
   d5eaa:	429e      	cmp	r6, r3
   d5eac:	f240 809d 	bls.w	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5eb0:	b2a4      	uxth	r4, r4
   d5eb2:	2101      	movs	r1, #1
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f007 f911 	bl	dd0dc <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d5eba:	a805      	add	r0, sp, #20
   d5ebc:	f7ff faae 	bl	d541c <_ZNK10BlynkParam8iterator5asIntEv>
   d5ec0:	1c01      	adds	r1, r0, #0
   d5ec2:	bf18      	it	ne
   d5ec4:	2101      	movne	r1, #1
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	f007 f919 	bl	dd0fe <digitalWrite>
    } break;
   d5ecc:	e08d      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5ece:	ab0a      	add	r3, sp, #40	; 0x28
   d5ed0:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d5ed2:	494b      	ldr	r1, [pc, #300]	; (d6000 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a8>)
   d5ed4:	2310      	movs	r3, #16
   d5ed6:	a807      	add	r0, sp, #28
   d5ed8:	2500      	movs	r5, #0
   d5eda:	9309      	str	r3, [sp, #36]	; 0x24
   d5edc:	9508      	str	r5, [sp, #32]
   d5ede:	f7ff fab6 	bl	d544e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5ee2:	a807      	add	r0, sp, #28
   d5ee4:	4621      	mov	r1, r4
   d5ee6:	f7ff facf 	bl	d5488 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d5eea:	4620      	mov	r0, r4
   d5eec:	f007 f933 	bl	dd156 <analogRead>
   d5ef0:	4601      	mov	r1, r0
   d5ef2:	a807      	add	r0, sp, #28
   d5ef4:	f7ff fada 	bl	d54ac <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d5ef8:	9b08      	ldr	r3, [sp, #32]
   d5efa:	9502      	str	r5, [sp, #8]
   d5efc:	3b01      	subs	r3, #1
   d5efe:	9300      	str	r3, [sp, #0]
   d5f00:	9b07      	ldr	r3, [sp, #28]
   d5f02:	9501      	str	r5, [sp, #4]
   d5f04:	462a      	mov	r2, r5
   d5f06:	2114      	movs	r1, #20
   d5f08:	4640      	mov	r0, r8
   d5f0a:	f000 fb79 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d5f0e:	e06c      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5f10:	a805      	add	r0, sp, #20
   d5f12:	f7ff fa8d 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5f16:	6803      	ldr	r3, [r0, #0]
   d5f18:	429e      	cmp	r6, r3
   d5f1a:	d966      	bls.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5f1c:	b2a4      	uxth	r4, r4
   d5f1e:	2101      	movs	r1, #1
   d5f20:	4620      	mov	r0, r4
   d5f22:	f007 f8db 	bl	dd0dc <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d5f26:	a805      	add	r0, sp, #20
   d5f28:	f7ff fa78 	bl	d541c <_ZNK10BlynkParam8iterator5asIntEv>
   d5f2c:	4601      	mov	r1, r0
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f007 f928 	bl	dd184 <_Z11analogWritetm>
    } break;
   d5f34:	e059      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5f36:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d5f38:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5f3a:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d5f3e:	f004 facf 	bl	da4e0 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d5f42:	4603      	mov	r3, r0
            handler(req);
   d5f44:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d5f46:	b123      	cbz	r3, d5f52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5f48:	4a2e      	ldr	r2, [pc, #184]	; (d6004 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2ac>)
   d5f4a:	4293      	cmp	r3, r2
   d5f4c:	d001      	beq.n	d5f52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
            handler(req);
   d5f4e:	4798      	blx	r3
   d5f50:	e04b      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetReadDefault(req);
   d5f52:	f004 fac1 	bl	da4d8 <BlynkWidgetRead>
        }
    } break;
   d5f56:	e048      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_VW: {
        ++it;
   d5f58:	a805      	add	r0, sp, #20
   d5f5a:	f7ff fa69 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d5f5e:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5f60:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d5f62:	1b5d      	subs	r5, r3, r5
   d5f64:	1b7f      	subs	r7, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5f66:	4620      	mov	r0, r4
   d5f68:	970b      	str	r7, [sp, #44]	; 0x2c
   d5f6a:	970c      	str	r7, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d5f6c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5f70:	f004 fac0 	bl	da4f4 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d5f74:	4603      	mov	r3, r0
            handler(req, param2);
   d5f76:	a90a      	add	r1, sp, #40	; 0x28
   d5f78:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d5f7a:	b123      	cbz	r3, d5f86 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5f7c:	4a22      	ldr	r2, [pc, #136]	; (d6008 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b0>)
   d5f7e:	4293      	cmp	r3, r2
   d5f80:	d001      	beq.n	d5f86 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
            handler(req, param2);
   d5f82:	4798      	blx	r3
   d5f84:	e031      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d5f86:	f004 faa8 	bl	da4da <BlynkWidgetWrite>
        }
    } break;
   d5f8a:	e02e      	b.n	d5fea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
   d5f8c:	f7ff fcf6 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d5f90:	f006 fa8a 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5f94:	491d      	ldr	r1, [pc, #116]	; (d600c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b4>)
   d5f96:	f005 fa07 	bl	db3a8 <_ZN5Print5printEPKc>
   d5f9a:	f006 fa85 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5f9e:	4629      	mov	r1, r5
   d5fa0:	f005 fa15 	bl	db3ce <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d5fa4:	2300      	movs	r3, #0
   d5fa6:	2102      	movs	r1, #2
   d5fa8:	9100      	str	r1, [sp, #0]
   d5faa:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d5fae:	9302      	str	r3, [sp, #8]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	4619      	mov	r1, r3
   d5fb4:	e7a8      	b.n	d5f08 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b0>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5fb6:	2101      	movs	r1, #1
   d5fb8:	e737      	b.n	d5e2a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
            } else if (!strcmp(it.asStr(), "pd")) {
                pinMode(pin, INPUT_PULLDOWN);
#endif
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
   d5fba:	f7ff fcdf 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d5fbe:	f006 fa73 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5fc2:	4913      	ldr	r1, [pc, #76]	; (d6010 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b8>)
   d5fc4:	f005 f9f0 	bl	db3a8 <_ZN5Print5printEPKc>
   d5fc8:	f006 fa6e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5fcc:	220a      	movs	r2, #10
   d5fce:	4621      	mov	r1, r4
   d5fd0:	f005 fa07 	bl	db3e2 <_ZN5Print11printNumberEmh>
   d5fd4:	f006 fa68 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5fd8:	490e      	ldr	r1, [pc, #56]	; (d6014 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2bc>)
   d5fda:	f005 f9e5 	bl	db3a8 <_ZN5Print5printEPKc>
   d5fde:	f006 fa63 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d5fe2:	9905      	ldr	r1, [sp, #20]
   d5fe4:	f005 f9f3 	bl	db3ce <_ZN5Print7printlnEPKc>
   d5fe8:	e722      	b.n	d5e30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd8>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d5fea:	b00e      	add	sp, #56	; 0x38
   d5fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ff0:	000e7613 	.word	0x000e7613
   d5ff4:	000e7215 	.word	0x000e7215
   d5ff8:	000e7101 	.word	0x000e7101
   d5ffc:	000e7105 	.word	0x000e7105
   d6000:	000e7108 	.word	0x000e7108
   d6004:	000da4d9 	.word	0x000da4d9
   d6008:	000da4db 	.word	0x000da4db
   d600c:	000e710b 	.word	0x000e710b
   d6010:	000e711c 	.word	0x000e711c
   d6014:	000e7129 	.word	0x000e7129

000d6018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d6018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d601c:	b08e      	sub	sp, #56	; 0x38
   d601e:	af04      	add	r7, sp, #16
   d6020:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d6022:	2205      	movs	r2, #5
   d6024:	f107 010c 	add.w	r1, r7, #12
   d6028:	6800      	ldr	r0, [r0, #0]
   d602a:	f005 fb31 	bl	db690 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d602e:	4605      	mov	r5, r0
   d6030:	2800      	cmp	r0, #0
   d6032:	f000 8203 	beq.w	d643c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x424>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d6036:	2805      	cmp	r0, #5
   d6038:	d11a      	bne.n	d6070 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x58>
   d603a:	4602      	mov	r2, r0
   d603c:	f107 010c 	add.w	r1, r7, #12
   d6040:	48b6      	ldr	r0, [pc, #728]	; (d631c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x304>)
   d6042:	f7ff fcb5 	bl	d59b0 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d6046:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d604a:	f8b7 800f 	ldrh.w	r8, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d604e:	0a13      	lsrs	r3, r2, #8
   d6050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d6054:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d6058:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d605c:	b29b      	uxth	r3, r3
    hdr.length = ntohs(hdr.length);
   d605e:	fa1f f888 	uxth.w	r8, r8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d6062:	f8a7 300d 	strh.w	r3, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d6066:	f8a7 800f 	strh.w	r8, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d606a:	b993      	cbnz	r3, d6092 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7a>
    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
    hdr.length = ntohs(hdr.length);

    return rlen;
   d606c:	462c      	mov	r4, r5
   d606e:	e001      	b.n	d6074 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x5c>
    if (rlen == 0) {
        return 0;
    }

    if (sizeof(hdr) != rlen) {
        return -1;
   d6070:	f04f 34ff 	mov.w	r4, #4294967295
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
   d6074:	f7ff fc82 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6078:	f006 fa16 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d607c:	49a8      	ldr	r1, [pc, #672]	; (d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x308>)
   d607e:	f005 f993 	bl	db3a8 <_ZN5Print5printEPKc>
   d6082:	f006 fa11 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6086:	220a      	movs	r2, #10
   d6088:	4621      	mov	r1, r4
   d608a:	f7ff fd88 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
#endif
        return false;
   d608e:	2000      	movs	r0, #0
   d6090:	e1d9      	b.n	d6446 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42e>
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d6092:	7b3b      	ldrb	r3, [r7, #12]
   d6094:	2b00      	cmp	r3, #0
   d6096:	d15f      	bne.n	d6158 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x140>
        lastActivityIn = BlynkMillis();
   d6098:	f004 fa18 	bl	da4cc <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d609c:	7f65      	ldrb	r5, [r4, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d609e:	60e0      	str	r0, [r4, #12]
   d60a0:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d60a4:	2d00      	cmp	r5, #0
   d60a6:	d153      	bne.n	d6150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x138>
   d60a8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
   d60ac:	2b01      	cmp	r3, #1
   d60ae:	d14f      	bne.n	d6150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x138>
            switch (hdr.length) {
   d60b0:	2809      	cmp	r0, #9
   d60b2:	d034      	beq.n	d611e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
   d60b4:	28c8      	cmp	r0, #200	; 0xc8
   d60b6:	d001      	beq.n	d60bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
   d60b8:	2804      	cmp	r0, #4
   d60ba:	d13a      	bne.n	d6132 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x11a>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
   d60bc:	f7ff fc5e 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d60c0:	f006 f9f2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d60c4:	4997      	ldr	r1, [pc, #604]	; (d6324 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d60c6:	f005 f96f 	bl	db3a8 <_ZN5Print5printEPKc>
   d60ca:	f006 f9ed 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d60ce:	6963      	ldr	r3, [r4, #20]
   d60d0:	68e1      	ldr	r1, [r4, #12]
   d60d2:	220a      	movs	r2, #10
   d60d4:	1ac9      	subs	r1, r1, r3
   d60d6:	f7ff fc43 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
   d60da:	f006 f9e5 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d60de:	4992      	ldr	r1, [pc, #584]	; (d6328 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d60e0:	f005 f975 	bl	db3ce <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
   d60e4:	68e3      	ldr	r3, [r4, #12]
   d60e6:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
   d60e8:	2301      	movs	r3, #1
   d60ea:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
   d60ec:	f004 f9f0 	bl	da4d0 <_Z12BlynkFreeRamv>
   d60f0:	4605      	mov	r5, r0
   d60f2:	b160      	cbz	r0, d610e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d60f4:	f7ff fc42 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d60f8:	f006 f9d6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d60fc:	498b      	ldr	r1, [pc, #556]	; (d632c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d60fe:	f005 f953 	bl	db3a8 <_ZN5Print5printEPKc>
   d6102:	f006 f9d1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6106:	220a      	movs	r2, #10
   d6108:	4629      	mov	r1, r5
   d610a:	f7ff fe1b 	bl	d5d44 <_ZN5Print7printlnImLi0EEEjT_i>
                }
#endif
                this->sendInfo();
   d610e:	4620      	mov	r0, r4
   d6110:	f000 fb60 	bl	d67d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d6114:	f7ff f95c 	bl	d53d0 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d6118:	f000 ff64 	bl	d6fe4 <BlynkOnConnected>
   d611c:	e18e      	b.n	d643c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x424>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
   d611e:	f7ff fc2d 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6122:	f006 f9c1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6126:	4982      	ldr	r1, [pc, #520]	; (d6330 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>)
   d6128:	f005 f951 	bl	db3ce <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
   d612c:	2303      	movs	r3, #3
   d612e:	7763      	strb	r3, [r4, #29]
   d6130:	e7ad      	b.n	d608e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
   d6132:	f7ff fc23 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6136:	f006 f9b7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d613a:	497e      	ldr	r1, [pc, #504]	; (d6334 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>)
   d613c:	f005 f934 	bl	db3a8 <_ZN5Print5printEPKc>
   d6140:	f006 f9b2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6144:	220a      	movs	r2, #10
   d6146:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d614a:	f7ff fb51 	bl	d57f0 <_ZN5Print7printlnItLi0EEEjT_i>
   d614e:	e79e      	b.n	d608e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d6150:	3805      	subs	r0, #5
   d6152:	bf18      	it	ne
   d6154:	2001      	movne	r0, #1
   d6156:	e176      	b.n	d6446 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42e>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d6158:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d615c:	d911      	bls.n	d6182 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16a>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
   d615e:	f7ff fc0d 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6162:	f006 f9a1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6166:	4974      	ldr	r1, [pc, #464]	; (d6338 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x320>)
   d6168:	f005 f91e 	bl	db3a8 <_ZN5Print5printEPKc>
   d616c:	f006 f99c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6170:	220a      	movs	r2, #10
   d6172:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d6176:	f7ff fb3b 	bl	d57f0 <_ZN5Print7printlnItLi0EEEjT_i>
        // TODO: Flush
        internalReconnect();
   d617a:	4620      	mov	r0, r4
   d617c:	f7ff fce6 	bl	d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d6180:	e15c      	b.n	d643c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x424>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d6182:	f108 0308 	add.w	r3, r8, #8
   d6186:	f023 0307 	bic.w	r3, r3, #7
   d618a:	466e      	mov	r6, sp
   d618c:	ebad 0d03 	sub.w	sp, sp, r3
   d6190:	ad04      	add	r5, sp, #16
   d6192:	4642      	mov	r2, r8
   d6194:	4629      	mov	r1, r5
   d6196:	6820      	ldr	r0, [r4, #0]
   d6198:	f005 fa7a 	bl	db690 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d619c:	4580      	cmp	r8, r0
   d619e:	d007      	beq.n	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x198>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
   d61a0:	f7ff fbec 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d61a4:	f006 f980 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d61a8:	4964      	ldr	r1, [pc, #400]	; (d633c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x324>)
   d61aa:	f005 f910 	bl	db3ce <_ZN5Print7printlnEPKc>
   d61ae:	e063      	b.n	d6278 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d61b0:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d61b4:	2300      	movs	r3, #0
   d61b6:	54ab      	strb	r3, [r5, r2]
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
            if (len) {
   d61b8:	b11a      	cbz	r2, d61c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1aa>
   d61ba:	4629      	mov	r1, r5
   d61bc:	4857      	ldr	r0, [pc, #348]	; (d631c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x304>)
   d61be:	f7ff fbf7 	bl	d59b0 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d61c2:	f004 f983 	bl	da4cc <_Z11BlynkMillisv>

    switch (hdr.type)
   d61c6:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d61c8:	60e0      	str	r0, [r4, #12]

    switch (hdr.type)
   d61ca:	2b11      	cmp	r3, #17
   d61cc:	f000 80bc 	beq.w	d6348 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x330>
   d61d0:	d808      	bhi.n	d61e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
   d61d2:	2b06      	cmp	r3, #6
   d61d4:	d036      	beq.n	d6244 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x22c>
   d61d6:	2b0f      	cmp	r3, #15
   d61d8:	f000 8092 	beq.w	d6300 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e8>
   d61dc:	2b02      	cmp	r3, #2
   d61de:	f040 8116 	bne.w	d640e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f6>
   d61e2:	e00c      	b.n	d61fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e6>
   d61e4:	2b1d      	cmp	r3, #29
   d61e6:	d00a      	beq.n	d61fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e6>
   d61e8:	d803      	bhi.n	d61f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1da>
   d61ea:	2b14      	cmp	r3, #20
   d61ec:	f000 8088 	beq.w	d6300 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e8>
   d61f0:	e10d      	b.n	d640e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f6>
   d61f2:	2b29      	cmp	r3, #41	; 0x29
   d61f4:	d032      	beq.n	d625c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
   d61f6:	2b37      	cmp	r3, #55	; 0x37
   d61f8:	f000 80f9 	beq.w	d63ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3d6>
   d61fc:	e107      	b.n	d640e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f6>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d61fe:	7f63      	ldrb	r3, [r4, #29]
   d6200:	bb03      	cbnz	r3, d6244 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x22c>
            BLYNK_LOG1(BLYNK_F("Ready"));
   d6202:	f7ff fbbb 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6206:	f006 f94f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d620a:	494d      	ldr	r1, [pc, #308]	; (d6340 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x328>)
   d620c:	f005 f8df 	bl	db3ce <_ZN5Print7printlnEPKc>
            state = CONNECTED;
   d6210:	2301      	movs	r3, #1
   d6212:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
   d6214:	f004 f95c 	bl	da4d0 <_Z12BlynkFreeRamv>
   d6218:	4605      	mov	r5, r0
   d621a:	b160      	cbz	r0, d6236 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21e>
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d621c:	f7ff fbae 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6220:	f006 f942 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6224:	4941      	ldr	r1, [pc, #260]	; (d632c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d6226:	f005 f8bf 	bl	db3a8 <_ZN5Print5printEPKc>
   d622a:	f006 f93d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d622e:	220a      	movs	r2, #10
   d6230:	4629      	mov	r1, r5
   d6232:	f7ff fd87 	bl	d5d44 <_ZN5Print7printlnImLi0EEEjT_i>
            }
#endif
            this->sendInfo();
   d6236:	4620      	mov	r0, r4
   d6238:	f000 facc 	bl	d67d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d623c:	f7ff f8c8 	bl	d53d0 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d6240:	f000 fed0 	bl	d6fe4 <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d6244:	2300      	movs	r3, #0
   d6246:	21c8      	movs	r1, #200	; 0xc8
   d6248:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d624c:	9100      	str	r1, [sp, #0]
   d624e:	9302      	str	r3, [sp, #8]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	4619      	mov	r1, r3
   d6254:	4620      	mov	r0, r4
   d6256:	f000 f9d3 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d625a:	e0ec      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d625c:	68a3      	ldr	r3, [r4, #8]
   d625e:	b91b      	cbnz	r3, d6268 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
             redir_serv = (char*)malloc(32);
   d6260:	2020      	movs	r0, #32
   d6262:	f004 fcbb 	bl	dabdc <malloc>
   d6266:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6268:	f8b7 800f 	ldrh.w	r8, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d626c:	61fd      	str	r5, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d626e:	44a8      	add	r8, r5
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d6270:	4545      	cmp	r5, r8
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6272:	f8c7 8020 	str.w	r8, [r7, #32]
   d6276:	d301      	bcc.n	d627c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>
            return false;
   d6278:	2000      	movs	r0, #0
   d627a:	e0dd      	b.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x420>

        strncpy(redir_serv, it.asStr(), 32);
   d627c:	4629      	mov	r1, r5
   d627e:	2220      	movs	r2, #32
   d6280:	68a0      	ldr	r0, [r4, #8]
   d6282:	f00e faa8 	bl	e47d6 <strncpy>
        redir_serv[31] = '\0';
   d6286:	68a3      	ldr	r3, [r4, #8]
   d6288:	2500      	movs	r5, #0
   d628a:	77dd      	strb	r5, [r3, #31]

        if (++it < param.end())
   d628c:	f107 001c 	add.w	r0, r7, #28
   d6290:	f7ff f8ce 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d6294:	6803      	ldr	r3, [r0, #0]
   d6296:	4543      	cmp	r3, r8
   d6298:	d208      	bcs.n	d62ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x294>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d629a:	69f8      	ldr	r0, [r7, #28]
   d629c:	b120      	cbz	r0, d62a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
   d629e:	6a3b      	ldr	r3, [r7, #32]
   d62a0:	4298      	cmp	r0, r3
   d62a2:	f0c0 80cd 	bcc.w	d6440 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x428>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d62a6:	4628      	mov	r0, r5
            redir_port = it.asLong();
   d62a8:	b285      	uxth	r5, r0
   d62aa:	e000      	b.n	d62ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d62ac:	2550      	movs	r5, #80	; 0x50
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
   d62ae:	f7ff fb65 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d62b2:	f006 f8f9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d62b6:	4923      	ldr	r1, [pc, #140]	; (d6344 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32c>)
   d62b8:	f005 f876 	bl	db3a8 <_ZN5Print5printEPKc>
   d62bc:	f006 f8f4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d62c0:	68a1      	ldr	r1, [r4, #8]
   d62c2:	f005 f871 	bl	db3a8 <_ZN5Print5printEPKc>
   d62c6:	f006 f8ef 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d62ca:	213a      	movs	r1, #58	; 0x3a
   d62cc:	f005 f870 	bl	db3b0 <_ZN5Print5printEc>
   d62d0:	f006 f8ea 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d62d4:	220a      	movs	r2, #10
   d62d6:	4629      	mov	r1, r5
   d62d8:	f7ff fa8a 	bl	d57f0 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d62dc:	6820      	ldr	r0, [r4, #0]
   d62de:	f006 fc77 	bl	dcbd0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d62e2:	6823      	ldr	r3, [r4, #0]
   d62e4:	68a2      	ldr	r2, [r4, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d62e6:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d62e8:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d62ea:	2300      	movs	r3, #0
   d62ec:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d62ee:	f004 f8ed 	bl	da4cc <_Z11BlynkMillisv>
   d62f2:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d62f6:	3808      	subs	r0, #8
   d62f8:	6120      	str	r0, [r4, #16]
   d62fa:	60e0      	str	r0, [r4, #12]
   d62fc:	6160      	str	r0, [r4, #20]
   d62fe:	e09a      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d6300:	68fb      	ldr	r3, [r7, #12]
   d6302:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d6306:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d6308:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d630c:	4629      	mov	r1, r5
   d630e:	4620      	mov	r0, r4
   d6310:	f7ff fd22 	bl	d5d58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d6314:	2300      	movs	r3, #0
   d6316:	8363      	strh	r3, [r4, #26]
   d6318:	e08d      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
   d631a:	bf00      	nop
   d631c:	000e7130 	.word	0x000e7130
   d6320:	000e7132 	.word	0x000e7132
   d6324:	000e7140 	.word	0x000e7140
   d6328:	000e714e 	.word	0x000e714e
   d632c:	000e7153 	.word	0x000e7153
   d6330:	000e715e 	.word	0x000e715e
   d6334:	000e7171 	.word	0x000e7171
   d6338:	000e7188 	.word	0x000e7188
   d633c:	000e7199 	.word	0x000e7199
   d6340:	000e71a9 	.word	0x000e71a9
   d6344:	000e71af 	.word	0x000e71af
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d6348:	2300      	movs	r3, #0
   d634a:	713b      	strb	r3, [r7, #4]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d634c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6350:	617d      	str	r5, [r7, #20]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6352:	442b      	add	r3, r5
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d6354:	429d      	cmp	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6356:	61bb      	str	r3, [r7, #24]
   d6358:	d26d      	bcs.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d635a:	6828      	ldr	r0, [r5, #0]
   d635c:	60b8      	str	r0, [r7, #8]

        ++it;
   d635e:	f107 0014 	add.w	r0, r7, #20
   d6362:	f7ff f865 	bl	d5430 <_ZN10BlynkParam8iteratorppEv>
   d6366:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d6368:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d636c:	61fa      	str	r2, [r7, #28]
   d636e:	1b51      	subs	r1, r2, r5
   d6370:	1a5b      	subs	r3, r3, r1
   d6372:	623b      	str	r3, [r7, #32]
   d6374:	627b      	str	r3, [r7, #36]	; 0x24
        BlynkParam param2(start, length);

        switch (cmd32) {
   d6376:	4a36      	ldr	r2, [pc, #216]	; (d6450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x438>)
   d6378:	68bb      	ldr	r3, [r7, #8]
   d637a:	4293      	cmp	r3, r2
   d637c:	d02b      	beq.n	d63d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3be>
   d637e:	d80d      	bhi.n	d639c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x384>
   d6380:	4a34      	ldr	r2, [pc, #208]	; (d6454 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x43c>)
   d6382:	4293      	cmp	r3, r2
   d6384:	d01b      	beq.n	d63be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3a6>
   d6386:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d638a:	3203      	adds	r2, #3
   d638c:	4293      	cmp	r3, r2
   d638e:	d128      	bne.n	d63e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ca>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d6390:	f107 011c 	add.w	r1, r7, #28
   d6394:	1d38      	adds	r0, r7, #4
   d6396:	f004 f8a0 	bl	da4da <BlynkWidgetWrite>
   d639a:	e04c      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d639c:	4a2e      	ldr	r2, [pc, #184]	; (d6458 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x440>)
   d639e:	4293      	cmp	r3, r2
   d63a0:	d013      	beq.n	d63ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3b2>
   d63a2:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d63a6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d63aa:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d63ae:	4293      	cmp	r3, r2
   d63b0:	d117      	bne.n	d63e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ca>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d63b2:	f107 011c 	add.w	r1, r7, #28
   d63b6:	1d38      	adds	r0, r7, #4
   d63b8:	f7ff f94c 	bl	d5654 <BlynkWidgetWriteInternalPinADIS>
   d63bc:	e03b      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d63be:	f107 011c 	add.w	r1, r7, #28
   d63c2:	1d38      	adds	r0, r7, #4
   d63c4:	f004 f889 	bl	da4da <BlynkWidgetWrite>
   d63c8:	e035      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d63ca:	f107 011c 	add.w	r1, r7, #28
   d63ce:	1d38      	adds	r0, r7, #4
   d63d0:	f000 fc02 	bl	d6bd8 <BlynkWidgetWriteInternalPinACON>
   d63d4:	e02f      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d63d6:	f107 011c 	add.w	r1, r7, #28
   d63da:	1d38      	adds	r0, r7, #4
   d63dc:	f004 f87d 	bl	da4da <BlynkWidgetWrite>
   d63e0:	e029      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
#ifdef BLYNK_DEBUG
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
   d63e2:	f7ff facb 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d63e6:	f006 f85f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d63ea:	491c      	ldr	r1, [pc, #112]	; (d645c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x444>)
   d63ec:	e007      	b.n	d63fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3e6>
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
   d63ee:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d63f2:	b303      	cbz	r3, d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
   d63f4:	f7ff fac2 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d63f8:	f006 f856 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d63fc:	4918      	ldr	r1, [pc, #96]	; (d6460 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x448>)
   d63fe:	f004 ffd3 	bl	db3a8 <_ZN5Print5printEPKc>
   d6402:	f006 f851 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6406:	4629      	mov	r1, r5
   d6408:	f004 ffe1 	bl	db3ce <_ZN5Print7printlnEPKc>
   d640c:	e013      	b.n	d6436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41e>
        }
    } break;
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
   d640e:	f7ff fab5 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d6412:	f006 f849 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6416:	4913      	ldr	r1, [pc, #76]	; (d6464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x44c>)
   d6418:	f004 ffc6 	bl	db3a8 <_ZN5Print5printEPKc>
   d641c:	f006 f844 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6420:	220a      	movs	r2, #10
   d6422:	4605      	mov	r5, r0
   d6424:	7b39      	ldrb	r1, [r7, #12]
   d6426:	f004 ffdc 	bl	db3e2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d642a:	4628      	mov	r0, r5
   d642c:	f004 ffc3 	bl	db3b6 <_ZN5Print7printlnEv>
#endif
        // TODO: Flush
        internalReconnect();
   d6430:	4620      	mov	r0, r4
   d6432:	f7ff fb8b 	bl	d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    } break;
    }

    return true;
   d6436:	2001      	movs	r0, #1
   d6438:	46b5      	mov	sp, r6
   d643a:	e004      	b.n	d6446 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42e>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d643c:	2001      	movs	r0, #1
   d643e:	e002      	b.n	d6446 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42e>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6440:	f00d f8d1 	bl	e35e6 <atol>
   d6444:	e730      	b.n	d62a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
        internalReconnect();
    } break;
    }

    return true;
}
   d6446:	3728      	adds	r7, #40	; 0x28
   d6448:	46bd      	mov	sp, r7
   d644a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d644e:	bf00      	nop
   d6450:	6174656d 	.word	0x6174656d
   d6454:	0061746f 	.word	0x0061746f
   d6458:	6e6f6361 	.word	0x6e6f6361
   d645c:	000e71bf 	.word	0x000e71bf
   d6460:	000e71d5 	.word	0x000e71d5
   d6464:	000e71de 	.word	0x000e71de

000d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d6468:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d646c:	4604      	mov	r4, r0
   d646e:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d6470:	f7fe ffae 	bl	d53d0 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d6474:	7f63      	ldrb	r3, [r4, #29]
   d6476:	2b02      	cmp	r3, #2
   d6478:	f000 80a7 	beq.w	d65ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x162>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d647c:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d647e:	8b62      	ldrh	r2, [r4, #26]
   d6480:	3301      	adds	r3, #1
   d6482:	b2db      	uxtb	r3, r3
   d6484:	7723      	strb	r3, [r4, #28]
   d6486:	2a00      	cmp	r2, #0
   d6488:	d164      	bne.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d648a:	2b02      	cmp	r3, #2
   d648c:	d862      	bhi.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d648e:	6820      	ldr	r0, [r4, #0]
   d6490:	f006 f9cb 	bl	dc82a <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d6494:	b140      	cbz	r0, d64a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x40>
        while (avail || conn.available() > 0) {
   d6496:	2d00      	cmp	r5, #0
   d6498:	f040 8099 	bne.w	d65ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
    int available() { return client.available(); }
   d649c:	6820      	ldr	r0, [r4, #0]
   d649e:	f006 fbaf 	bl	dcc00 <_ZN9TCPClient9availableEv>
   d64a2:	2800      	cmp	r0, #0
   d64a4:	f300 8093 	bgt.w	d65ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d64a8:	f004 f810 	bl	da4cc <_Z11BlynkMillisv>
   d64ac:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d64ae:	6820      	ldr	r0, [r4, #0]
   d64b0:	f006 f9bb 	bl	dc82a <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d64b4:	7f65      	ldrb	r5, [r4, #29]
   d64b6:	2d01      	cmp	r5, #1
   d64b8:	4606      	mov	r6, r0
   d64ba:	d14d      	bne.n	d6558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf0>
        if (!tconn) {
   d64bc:	b928      	cbnz	r0, d64ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d64be:	6167      	str	r7, [r4, #20]
            internalReconnect();
   d64c0:	4620      	mov	r0, r4
   d64c2:	f7ff fb43 	bl	d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d64c6:	4635      	mov	r5, r6
   d64c8:	e07b      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d64ca:	68e3      	ldr	r3, [r4, #12]
   d64cc:	4a48      	ldr	r2, [pc, #288]	; (d65f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x188>)
   d64ce:	1afb      	subs	r3, r7, r3
   d64d0:	4293      	cmp	r3, r2
   d64d2:	d927      	bls.n	d6524 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xbc>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
   d64d4:	f7ff fa52 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d64d8:	f005 ffe6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d64dc:	4945      	ldr	r1, [pc, #276]	; (d65f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x18c>)
   d64de:	f004 ff63 	bl	db3a8 <_ZN5Print5printEPKc>
   d64e2:	f005 ffe1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d64e6:	220a      	movs	r2, #10
   d64e8:	4639      	mov	r1, r7
   d64ea:	f7ff fa39 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
   d64ee:	f005 ffdb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d64f2:	4941      	ldr	r1, [pc, #260]	; (d65f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d64f4:	f004 ff58 	bl	db3a8 <_ZN5Print5printEPKc>
   d64f8:	f005 ffd6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d64fc:	220a      	movs	r2, #10
   d64fe:	68e1      	ldr	r1, [r4, #12]
   d6500:	f7ff fa2e 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
   d6504:	f005 ffd0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6508:	493b      	ldr	r1, [pc, #236]	; (d65f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d650a:	f004 ff4d 	bl	db3a8 <_ZN5Print5printEPKc>
   d650e:	f005 ffcb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6512:	220a      	movs	r2, #10
   d6514:	6961      	ldr	r1, [r4, #20]
   d6516:	f7ff fc15 	bl	d5d44 <_ZN5Print7printlnImLi0EEEjT_i>
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d651a:	4620      	mov	r0, r4
   d651c:	f7ff fb16 	bl	d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d6520:	2500      	movs	r5, #0
   d6522:	e04e      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d6524:	f64e 2260 	movw	r2, #60000	; 0xea60
   d6528:	4293      	cmp	r3, r2
   d652a:	d803      	bhi.n	d6534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xcc>
   d652c:	6923      	ldr	r3, [r4, #16]
   d652e:	1afb      	subs	r3, r7, r3
   d6530:	4293      	cmp	r3, r2
   d6532:	d90f      	bls.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6534:	6963      	ldr	r3, [r4, #20]
   d6536:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d653a:	1afb      	subs	r3, r7, r3
   d653c:	4293      	cmp	r3, r2
   d653e:	d909      	bls.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d6540:	2300      	movs	r3, #0
   d6542:	9302      	str	r3, [sp, #8]
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	9300      	str	r3, [sp, #0]
   d6548:	461a      	mov	r2, r3
   d654a:	2106      	movs	r1, #6
   d654c:	4620      	mov	r0, r4
   d654e:	f000 f857 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d6552:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d6554:	2501      	movs	r5, #1
   d6556:	e034      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d6558:	2d00      	cmp	r5, #0
   d655a:	d1fb      	bne.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d655c:	6961      	ldr	r1, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d655e:	1a79      	subs	r1, r7, r1
   d6560:	b178      	cbz	r0, d6582 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
   d6562:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d6566:	4299      	cmp	r1, r3
   d6568:	d9f4      	bls.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
   d656a:	f7ff fa07 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d656e:	f005 ff9b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6572:	4922      	ldr	r1, [pc, #136]	; (d65fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x194>)
   d6574:	f004 ff2b 	bl	db3ce <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d6578:	6820      	ldr	r0, [r4, #0]
   d657a:	f006 fb29 	bl	dcbd0 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
   d657e:	7765      	strb	r5, [r4, #29]
            return false;
   d6580:	e01f      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d6582:	f241 3388 	movw	r3, #5000	; 0x1388
   d6586:	4299      	cmp	r1, r3
   d6588:	d9e4      	bls.n	d6554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d658a:	6820      	ldr	r0, [r4, #0]
   d658c:	f006 fb20 	bl	dcbd0 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d6590:	6820      	ldr	r0, [r4, #0]
   d6592:	f7ff fa51 	bl	d5a38 <_ZN22BlynkTransportParticle7connectEv>
   d6596:	4605      	mov	r5, r0
   d6598:	b908      	cbnz	r0, d659e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x136>
                lastLogin = t;
   d659a:	6167      	str	r7, [r4, #20]
                return false;
   d659c:	e011      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d659e:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d65a2:	2701      	movs	r7, #1
   d65a4:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d65a6:	4640      	mov	r0, r8
   d65a8:	f00e f8f8 	bl	e479c <strlen>
   d65ac:	4643      	mov	r3, r8
   d65ae:	e88d 0041 	stmia.w	sp, {r0, r6}
   d65b2:	9602      	str	r6, [sp, #8]
   d65b4:	463a      	mov	r2, r7
   d65b6:	211d      	movs	r1, #29
   d65b8:	4620      	mov	r0, r4
   d65ba:	f000 f821 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d65be:	6923      	ldr	r3, [r4, #16]
   d65c0:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d65c2:	7f23      	ldrb	r3, [r4, #28]
   d65c4:	3b01      	subs	r3, #1
   d65c6:	7723      	strb	r3, [r4, #28]
   d65c8:	e00e      	b.n	d65e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d65ca:	2500      	movs	r5, #0
   d65cc:	e00c      	b.n	d65e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d65ce:	4620      	mov	r0, r4
   d65d0:	f7ff fd22 	bl	d6018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d65d4:	4605      	mov	r5, r0
   d65d6:	2800      	cmp	r0, #0
   d65d8:	f47f af60 	bne.w	d649c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
   d65dc:	6820      	ldr	r0, [r4, #0]
   d65de:	f006 faf7 	bl	dcbd0 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d65e2:	f003 ff7b 	bl	da4dc <BlynkNoOpCbk>
                return false;
   d65e6:	e7ec      	b.n	d65c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            return true;
        }
#endif
    }
    return true;
}
   d65e8:	4628      	mov	r0, r5
   d65ea:	b004      	add	sp, #16
   d65ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65f0:	00010d88 	.word	0x00010d88
   d65f4:	000e71f4 	.word	0x000e71f4
   d65f8:	000e7208 	.word	0x000e7208
   d65fc:	000e720b 	.word	0x000e720b

000d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d6600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6604:	b083      	sub	sp, #12
   d6606:	af00      	add	r7, sp, #0
   d6608:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d660a:	6800      	ldr	r0, [r0, #0]
   d660c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d660e:	4689      	mov	r9, r1
   d6610:	4616      	mov	r6, r2
   d6612:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d6614:	46ea      	mov	sl, sp
   d6616:	f006 f908 	bl	dc82a <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d661a:	2800      	cmp	r0, #0
   d661c:	d071      	beq.n	d6702 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
   d661e:	f1b9 0f1d 	cmp.w	r9, #29
   d6622:	d805      	bhi.n	d6630 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   d6624:	4b67      	ldr	r3, [pc, #412]	; (d67c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c4>)
   d6626:	fa23 f309 	lsr.w	r3, r3, r9
   d662a:	07db      	lsls	r3, r3, #31
   d662c:	f100 80c5 	bmi.w	d67ba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ba>
   d6630:	7f63      	ldrb	r3, [r4, #29]
   d6632:	2b01      	cmp	r3, #1
   d6634:	d165      	bne.n	d6702 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d6636:	b916      	cbnz	r6, d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d6638:	8b66      	ldrh	r6, [r4, #26]
   d663a:	2e00      	cmp	r6, #0
   d663c:	d066      	beq.n	d670c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10c>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d663e:	f1a9 030c 	sub.w	r3, r9, #12
   d6642:	2b08      	cmp	r3, #8
   d6644:	d96a      	bls.n	d671c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11c>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d6646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d6648:	f1bb 0f00 	cmp.w	fp, #0
   d664c:	bf14      	ite	ne
   d664e:	46a8      	movne	r8, r5
   d6650:	f04f 0800 	moveq.w	r8, #0
   d6654:	2a00      	cmp	r2, #0
   d6656:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6658:	f108 0305 	add.w	r3, r8, #5
   d665c:	bf14      	ite	ne
   d665e:	4690      	movne	r8, r2
   d6660:	f04f 0800 	moveq.w	r8, #0
   d6664:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6666:	f108 0307 	add.w	r3, r8, #7
   d666a:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d666e:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6670:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6674:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d6678:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d667a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d667e:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d6682:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d6686:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d668a:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d668e:	f1bb 0f00 	cmp.w	fp, #0
   d6692:	d063      	beq.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
   d6694:	2d00      	cmp	r5, #0
   d6696:	d061      	beq.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
        memcpy(buff + pos, data, length);
   d6698:	462a      	mov	r2, r5
   d669a:	4659      	mov	r1, fp
   d669c:	f10d 0005 	add.w	r0, sp, #5
   d66a0:	f00d f8b0 	bl	e3804 <memcpy>
        pos += length;
   d66a4:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d66a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d66a8:	2b00      	cmp	r3, #0
   d66aa:	d159      	bne.n	d6760 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d66ac:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d66ae:	4545      	cmp	r5, r8
   d66b0:	d262      	bcs.n	d6778 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x178>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d66b2:	ebc5 0608 	rsb	r6, r5, r8
#define BlynkUtility_h

template<class T>
const T& BlynkMin(const T& a, const T& b)
{
    return (b < a) ? b : a;
   d66b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
   d66ba:	687b      	ldr	r3, [r7, #4]
   d66bc:	bf28      	it	cs
   d66be:	f44f 6680 	movcs.w	r6, #1024	; 0x400
   d66c2:	eb03 0905 	add.w	r9, r3, r5
   d66c6:	b126      	cbz	r6, d66d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd2>
   d66c8:	4632      	mov	r2, r6
   d66ca:	4649      	mov	r1, r9
   d66cc:	483e      	ldr	r0, [pc, #248]	; (d67c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c8>)
   d66ce:	f7ff f96f 	bl	d59b0 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d66d2:	4632      	mov	r2, r6
   d66d4:	4649      	mov	r1, r9
   d66d6:	6820      	ldr	r0, [r4, #0]
   d66d8:	f006 f891 	bl	dc7fe <_ZN9TCPClient5writeEPKhj>
   d66dc:	4606      	mov	r6, r0
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d66de:	2000      	movs	r0, #0
   d66e0:	f003 fef2 	bl	da4c8 <_Z10BlynkDelaym>
        if (w == 0) {
   d66e4:	2e00      	cmp	r6, #0
   d66e6:	d145      	bne.n	d6774 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x174>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
   d66e8:	f7ff f948 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d66ec:	f005 fedc 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d66f0:	4936      	ldr	r1, [pc, #216]	; (d67cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1cc>)
   d66f2:	f004 fe6c 	bl	db3ce <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d66f6:	6820      	ldr	r0, [r4, #0]
   d66f8:	f006 fa6a 	bl	dcbd0 <_ZN9TCPClient4stopEv>
#endif
            conn.disconnect();
            state = CONNECTING;
   d66fc:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d66fe:	f003 feed 	bl	da4dc <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d6702:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d6704:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d6706:	46bd      	mov	sp, r7
   d6708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d670c:	8b23      	ldrh	r3, [r4, #24]
   d670e:	3301      	adds	r3, #1
   d6710:	b29b      	uxth	r3, r3
   d6712:	b903      	cbnz	r3, d6716 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
        msgIdOut = 1;
   d6714:	2301      	movs	r3, #1
   d6716:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d6718:	8b26      	ldrh	r6, [r4, #24]
   d671a:	e790      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d671c:	68e3      	ldr	r3, [r4, #12]
   d671e:	6922      	ldr	r2, [r4, #16]
   d6720:	4293      	cmp	r3, r2
   d6722:	bf38      	it	cc
   d6724:	4613      	movcc	r3, r2
   d6726:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d672a:	f003 fecf 	bl	da4cc <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d672e:	ebc0 0008 	rsb	r0, r0, r8
   d6732:	2800      	cmp	r0, #0
   d6734:	db0a      	blt.n	d674c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d6736:	2100      	movs	r1, #0
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff fe95 	bl	d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d673e:	f003 fec5 	bl	da4cc <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d6742:	ebc0 0008 	rsb	r0, r0, r8
   d6746:	2800      	cmp	r0, #0
   d6748:	daf5      	bge.n	d6736 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x136>
   d674a:	e77c      	b.n	d6646 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d674c:	7f21      	ldrb	r1, [r4, #28]
   d674e:	2900      	cmp	r1, #0
   d6750:	f47f af79 	bne.w	d6646 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
            run();
   d6754:	4620      	mov	r0, r4
   d6756:	f7ff fe87 	bl	d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d675a:	e774      	b.n	d6646 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d675c:	2005      	movs	r0, #5
   d675e:	e7a2      	b.n	d66a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d6760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d6762:	2b00      	cmp	r3, #0
   d6764:	d0a2      	beq.n	d66ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
   d6766:	461a      	mov	r2, r3
   d6768:	687b      	ldr	r3, [r7, #4]
   d676a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d676c:	4418      	add	r0, r3
   d676e:	f00d f849 	bl	e3804 <memcpy>
   d6772:	e79b      	b.n	d66ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d6774:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d6776:	e79a      	b.n	d66ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
   d6778:	d01b      	beq.n	d67b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b2>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
   d677a:	f7ff f8ff 	bl	d597c <_ZL14BLYNK_LOG_TIMEv>
   d677e:	f005 fe93 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6782:	4913      	ldr	r1, [pc, #76]	; (d67d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>)
   d6784:	f004 fe10 	bl	db3a8 <_ZN5Print5printEPKc>
   d6788:	f005 fe8e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d678c:	220a      	movs	r2, #10
   d678e:	4629      	mov	r1, r5
   d6790:	f7ff f8e6 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
   d6794:	f005 fe88 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6798:	212f      	movs	r1, #47	; 0x2f
   d679a:	f004 fe09 	bl	db3b0 <_ZN5Print5printEc>
   d679e:	f005 fe83 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d67a2:	220a      	movs	r2, #10
   d67a4:	4641      	mov	r1, r8
   d67a6:	f7ff facd 	bl	d5d44 <_ZN5Print7printlnImLi0EEEjT_i>
#endif
        internalReconnect();
   d67aa:	4620      	mov	r0, r4
   d67ac:	f7ff f9ce 	bl	d5b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d67b0:	e7a7      	b.n	d6702 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
    }

    lastActivityOut = BlynkMillis();
   d67b2:	f003 fe8b 	bl	da4cc <_Z11BlynkMillisv>
   d67b6:	6120      	str	r0, [r4, #16]
   d67b8:	e7a3      	b.n	d6702 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d67ba:	2e00      	cmp	r6, #0
   d67bc:	f47f af43 	bne.w	d6646 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
   d67c0:	e73a      	b.n	d6638 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x38>
   d67c2:	bf00      	nop
   d67c4:	20000045 	.word	0x20000045
   d67c8:	000e7219 	.word	0x000e7219
   d67cc:	000e721b 	.word	0x000e721b
   d67d0:	000e7225 	.word	0x000e7225

000d67d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d67d4:	b500      	push	{lr}
   d67d6:	b095      	sub	sp, #84	; 0x54
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d67d8:	ab04      	add	r3, sp, #16
   d67da:	2200      	movs	r2, #0
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	2349      	movs	r3, #73	; 0x49
   d67e0:	9300      	str	r3, [sp, #0]
   d67e2:	9202      	str	r2, [sp, #8]
   d67e4:	4b03      	ldr	r3, [pc, #12]	; (d67f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d67e6:	2111      	movs	r1, #17
   d67e8:	f7ff ff0a 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d67ec:	b015      	add	sp, #84	; 0x54
   d67ee:	f85d fb04 	ldr.w	pc, [sp], #4
   d67f2:	bf00      	nop
   d67f4:	000e6d78 	.word	0x000e6d78

000d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d67f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67fa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d67fe:	ab08      	add	r3, sp, #32
   d6800:	2400      	movs	r4, #0
   d6802:	4605      	mov	r5, r0
   d6804:	460f      	mov	r7, r1
   d6806:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6808:	a805      	add	r0, sp, #20
   d680a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d680e:	490e      	ldr	r1, [pc, #56]	; (d6848 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d6810:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6812:	4616      	mov	r6, r2
   d6814:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6816:	f7fe fe1a 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d681a:	4639      	mov	r1, r7
   d681c:	a805      	add	r0, sp, #20
   d681e:	f7fe fe33 	bl	d5488 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6822:	4631      	mov	r1, r6
   d6824:	a805      	add	r0, sp, #20
   d6826:	f7fe fe2f 	bl	d5488 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d682a:	9b06      	ldr	r3, [sp, #24]
   d682c:	9402      	str	r4, [sp, #8]
   d682e:	3b01      	subs	r3, #1
   d6830:	9300      	str	r3, [sp, #0]
   d6832:	9401      	str	r4, [sp, #4]
   d6834:	9b05      	ldr	r3, [sp, #20]
   d6836:	4622      	mov	r2, r4
   d6838:	2114      	movs	r1, #20
   d683a:	4628      	mov	r0, r5
   d683c:	f7ff fee0 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6840:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6844:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6846:	bf00      	nop
   d6848:	000e722b 	.word	0x000e722b

000d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d684c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d684e:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6852:	ab0c      	add	r3, sp, #48	; 0x30
   d6854:	2400      	movs	r4, #0
   d6856:	4605      	mov	r5, r0
   d6858:	460f      	mov	r7, r1
   d685a:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d685c:	a805      	add	r0, sp, #20
   d685e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6862:	4911      	ldr	r1, [pc, #68]	; (d68a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d6864:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6866:	4616      	mov	r6, r2
   d6868:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d686a:	f7fe fdf0 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d686e:	4639      	mov	r1, r7
   d6870:	a805      	add	r0, sp, #20
   d6872:	f7fe fe09 	bl	d5488 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d6876:	4631      	mov	r1, r6
   d6878:	a808      	add	r0, sp, #32
   d687a:	f004 fc59 	bl	db130 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d687e:	9908      	ldr	r1, [sp, #32]
   d6880:	a805      	add	r0, sp, #20
   d6882:	f7fe fde4 	bl	d544e <_ZN10BlynkParam3addEPKc>
   d6886:	a808      	add	r0, sp, #32
   d6888:	f004 fbcc 	bl	db024 <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d688c:	9b06      	ldr	r3, [sp, #24]
   d688e:	9402      	str	r4, [sp, #8]
   d6890:	3b01      	subs	r3, #1
   d6892:	9300      	str	r3, [sp, #0]
   d6894:	9401      	str	r4, [sp, #4]
   d6896:	9b05      	ldr	r3, [sp, #20]
   d6898:	4622      	mov	r2, r4
   d689a:	2114      	movs	r1, #20
   d689c:	4628      	mov	r0, r5
   d689e:	f7ff feaf 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d68a2:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d68a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68a8:	000e722b 	.word	0x000e722b

000d68ac <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d68ac:	b570      	push	{r4, r5, r6, lr}
   d68ae:	b092      	sub	sp, #72	; 0x48
  String statusMessage;
   d68b0:	4962      	ldr	r1, [pc, #392]	; (d6a3c <_Z9deepSleepv+0x190>)
  StateString = "STBY";
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d68b2:	4c63      	ldr	r4, [pc, #396]	; (d6a40 <_Z9deepSleepv+0x194>)
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d68b4:	a806      	add	r0, sp, #24
   d68b6:	f004 fbfc 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  StateString = "STBY";
   d68ba:	4962      	ldr	r1, [pc, #392]	; (d6a44 <_Z9deepSleepv+0x198>)
   d68bc:	4862      	ldr	r0, [pc, #392]	; (d6a48 <_Z9deepSleepv+0x19c>)
   d68be:	f004 fc4a 	bl	db156 <_ZN6StringaSEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d68c2:	f003 fec3 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d68c6:	4a61      	ldr	r2, [pc, #388]	; (d6a4c <_Z9deepSleepv+0x1a0>)
   d68c8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
   d68cc:	6812      	ldr	r2, [r2, #0]
   d68ce:	1a9b      	subs	r3, r3, r2
   d68d0:	4418      	add	r0, r3
   d68d2:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
  //Save
  saveState();
   d68d6:	f7fe fe91 	bl	d55fc <_Z9saveStatev>

  if (timeSynced)
   d68da:	4b5d      	ldr	r3, [pc, #372]	; (d6a50 <_Z9deepSleepv+0x1a4>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d68dc:	495a      	ldr	r1, [pc, #360]	; (d6a48 <_Z9deepSleepv+0x19c>)
   d68de:	781b      	ldrb	r3, [r3, #0]
   d68e0:	b343      	cbz	r3, d6934 <_Z9deepSleepv+0x88>
   d68e2:	a80a      	add	r0, sp, #40	; 0x28
   d68e4:	f004 fc24 	bl	db130 <_ZN6StringC1ERKS_>
  {
       statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d68e8:	495a      	ldr	r1, [pc, #360]	; (d6a54 <_Z9deepSleepv+0x1a8>)
   d68ea:	a80a      	add	r0, sp, #40	; 0x28
   d68ec:	f004 fc8c 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d68f0:	4605      	mov	r5, r0
   d68f2:	4859      	ldr	r0, [pc, #356]	; (d6a58 <_Z9deepSleepv+0x1ac>)
   d68f4:	f002 ff15 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d68f8:	4b58      	ldr	r3, [pc, #352]	; (d6a5c <_Z9deepSleepv+0x1b0>)
   d68fa:	4959      	ldr	r1, [pc, #356]	; (d6a60 <_Z9deepSleepv+0x1b4>)
   d68fc:	681a      	ldr	r2, [r3, #0]
   d68fe:	4b59      	ldr	r3, [pc, #356]	; (d6a64 <_Z9deepSleepv+0x1b8>)
   d6900:	4402      	add	r2, r0
   d6902:	a80e      	add	r0, sp, #56	; 0x38
   d6904:	f004 ffe2 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d6908:	a90e      	add	r1, sp, #56	; 0x38
   d690a:	4628      	mov	r0, r5
   d690c:	f004 fc70 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d6910:	4950      	ldr	r1, [pc, #320]	; (d6a54 <_Z9deepSleepv+0x1a8>)
   d6912:	f004 fc79 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d6916:	4954      	ldr	r1, [pc, #336]	; (d6a68 <_Z9deepSleepv+0x1bc>)
   d6918:	f004 fc6a 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d691c:	4953      	ldr	r1, [pc, #332]	; (d6a6c <_Z9deepSleepv+0x1c0>)
   d691e:	f004 fc73 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d6922:	4601      	mov	r1, r0
   d6924:	a806      	add	r0, sp, #24
   d6926:	f004 fbf4 	bl	db112 <_ZN6StringaSERKS_>
   d692a:	a80e      	add	r0, sp, #56	; 0x38
   d692c:	f004 fb7a 	bl	db024 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6930:	a80a      	add	r0, sp, #40	; 0x28
   d6932:	e011      	b.n	d6958 <_Z9deepSleepv+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6934:	a80e      	add	r0, sp, #56	; 0x38
   d6936:	f004 fbfb 	bl	db130 <_ZN6StringC1ERKS_>

  }
  else
  {
       statusMessage = StateString+"                "+field7+"%";
   d693a:	494d      	ldr	r1, [pc, #308]	; (d6a70 <_Z9deepSleepv+0x1c4>)
   d693c:	a80e      	add	r0, sp, #56	; 0x38
   d693e:	f004 fc63 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d6942:	4949      	ldr	r1, [pc, #292]	; (d6a68 <_Z9deepSleepv+0x1bc>)
   d6944:	f004 fc54 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d6948:	4948      	ldr	r1, [pc, #288]	; (d6a6c <_Z9deepSleepv+0x1c0>)
   d694a:	f004 fc5d 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d694e:	4601      	mov	r1, r0
   d6950:	a806      	add	r0, sp, #24
   d6952:	f004 fbde 	bl	db112 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6956:	a80e      	add	r0, sp, #56	; 0x38
   d6958:	f004 fb64 	bl	db024 <_ZN6StringD1Ev>
  }
  Blynk.virtualWrite(V30,statusMessage);
   d695c:	a906      	add	r1, sp, #24
   d695e:	a80e      	add	r0, sp, #56	; 0x38
   d6960:	f004 fbe6 	bl	db130 <_ZN6StringC1ERKS_>
   d6964:	aa0e      	add	r2, sp, #56	; 0x38
   d6966:	211e      	movs	r1, #30
   d6968:	4842      	ldr	r0, [pc, #264]	; (d6a74 <_Z9deepSleepv+0x1c8>)
   d696a:	f7ff ff6f 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d696e:	a80e      	add	r0, sp, #56	; 0x38
   d6970:	f004 fb58 	bl	db024 <_ZN6StringD1Ev>
  delay(3000);
   d6974:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d6978:	f005 f80c 	bl	db994 <delay>
  power.setPowerON(EXT3V3,false);
   d697c:	2200      	movs	r2, #0
   d697e:	2102      	movs	r1, #2
   d6980:	483d      	ldr	r0, [pc, #244]	; (d6a78 <_Z9deepSleepv+0x1cc>)
   d6982:	f003 f859 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d6986:	2200      	movs	r2, #0
   d6988:	2103      	movs	r1, #3
   d698a:	483b      	ldr	r0, [pc, #236]	; (d6a78 <_Z9deepSleepv+0x1cc>)
   d698c:	f003 f854 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d6990:	f006 fc58 	bl	dd244 <_Z19__fetch_global_Wirev>
   d6994:	f005 fe4d 	bl	dc632 <_ZN7TwoWire9isEnabledEv>
   d6998:	b918      	cbnz	r0, d69a2 <_Z9deepSleepv+0xf6>
    Wire.end();
   d699a:	f006 fc53 	bl	dd244 <_Z19__fetch_global_Wirev>
   d699e:	f005 fe05 	bl	dc5ac <_ZN7TwoWire3endEv>
  }  

  DEBUG_PRINTLN("Going to sleep");
   d69a2:	f005 fd81 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d69a6:	4935      	ldr	r1, [pc, #212]	; (d6a7c <_Z9deepSleepv+0x1d0>)
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d69a8:	4d25      	ldr	r5, [pc, #148]	; (d6a40 <_Z9deepSleepv+0x194>)
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
    Wire.end();
  }  

  DEBUG_PRINTLN("Going to sleep");
   d69aa:	f004 fd10 	bl	db3ce <_ZN5Print7printlnEPKc>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d69ae:	4834      	ldr	r0, [pc, #208]	; (d6a80 <_Z9deepSleepv+0x1d4>)
   d69b0:	2300      	movs	r3, #0
   d69b2:	461a      	mov	r2, r3
   d69b4:	4619      	mov	r1, r3
   d69b6:	6840      	ldr	r0, [r0, #4]
   d69b8:	f004 f8b0 	bl	dab1c <network_off>
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d69bc:	2300      	movs	r3, #0
  state.bInSleepMode=false;
  #endif  

  delay(1000);
   d69be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d69c2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d69c6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  #endif  

  delay(1000);
   d69ca:	f004 ffe3 	bl	db994 <delay>
  if (state.bSleepModeStandby){
   d69ce:	f894 4424 	ldrb.w	r4, [r4, #1060]	; 0x424
   d69d2:	b1cc      	cbz	r4, d6a08 <_Z9deepSleepv+0x15c>
    DEBUG_PRINTLN("Going to standby sleep");
   d69d4:	f005 fd68 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d69d8:	492a      	ldr	r1, [pc, #168]	; (d6a84 <_Z9deepSleepv+0x1d8>)
   d69da:	f004 fcf8 	bl	db3ce <_ZN5Print7printlnEPKc>
   d69de:	4b2a      	ldr	r3, [pc, #168]	; (d6a88 <_Z9deepSleepv+0x1dc>)
   d69e0:	6819      	ldr	r1, [r3, #0]
   d69e2:	2308      	movs	r3, #8
   d69e4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   d69e8:	ab12      	add	r3, sp, #72	; 0x48
    state.bInSleepMode=true;
   d69ea:	2201      	movs	r2, #1
   d69ec:	f885 2425 	strb.w	r2, [r5, #1061]	; 0x425
   d69f0:	f803 2d31 	strb.w	r2, [r3, #-49]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d69f4:	9102      	str	r1, [sp, #8]
   d69f6:	f44f 7161 	mov.w	r1, #900	; 0x384
   d69fa:	9101      	str	r1, [sp, #4]
   d69fc:	9200      	str	r2, [sp, #0]
   d69fe:	a90a      	add	r1, sp, #40	; 0x28
   d6a00:	a80e      	add	r0, sp, #56	; 0x38
   d6a02:	f004 fa67 	bl	daed4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d6a06:	e014      	b.n	d6a32 <_Z9deepSleepv+0x186>
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
   d6a08:	f005 fd4e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6a0c:	491f      	ldr	r1, [pc, #124]	; (d6a8c <_Z9deepSleepv+0x1e0>)
   d6a0e:	f004 fcde 	bl	db3ce <_ZN5Print7printlnEPKc>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
   d6a12:	2601      	movs	r6, #1
    delay(2000);
   d6a14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
    state.bSleepModeStandby=false;
   d6a18:	f885 4424 	strb.w	r4, [r5, #1060]	; 0x424
    state.bInSleepMode=true;
   d6a1c:	f885 6425 	strb.w	r6, [r5, #1061]	; 0x425
    delay(2000);
   d6a20:	f004 ffb8 	bl	db994 <delay>
    System.sleep(SLEEP_MODE_DEEP); 
   d6a24:	4b1a      	ldr	r3, [pc, #104]	; (d6a90 <_Z9deepSleepv+0x1e4>)
   d6a26:	4622      	mov	r2, r4
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	4631      	mov	r1, r6
   d6a2c:	a80e      	add	r0, sp, #56	; 0x38
   d6a2e:	f004 fa13 	bl	dae58 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6a32:	a806      	add	r0, sp, #24
   d6a34:	f004 faf6 	bl	db024 <_ZN6StringD1Ev>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
    delay(2000);
    System.sleep(SLEEP_MODE_DEEP); 
    }
}
   d6a38:	b012      	add	sp, #72	; 0x48
   d6a3a:	bd70      	pop	{r4, r5, r6, pc}
   d6a3c:	000e6ff6 	.word	0x000e6ff6
   d6a40:	2003da80 	.word	0x2003da80
   d6a44:	000e722e 	.word	0x000e722e
   d6a48:	2003d7d8 	.word	0x2003d7d8
   d6a4c:	2003e178 	.word	0x2003e178
   d6a50:	2003dead 	.word	0x2003dead
   d6a54:	000e724c 	.word	0x000e724c
   d6a58:	2003e174 	.word	0x2003e174
   d6a5c:	2003d5a4 	.word	0x2003d5a4
   d6a60:	2003e2c0 	.word	0x2003e2c0
   d6a64:	000e7233 	.word	0x000e7233
   d6a68:	2003d7e8 	.word	0x2003d7e8
   d6a6c:	000e723b 	.word	0x000e723b
   d6a70:	000e723d 	.word	0x000e723d
   d6a74:	2003e234 	.word	0x2003e234
   d6a78:	2003deac 	.word	0x2003deac
   d6a7c:	000e724e 	.word	0x000e724e
   d6a80:	2003e5e8 	.word	0x2003e5e8
   d6a84:	000e725d 	.word	0x000e725d
   d6a88:	2003dec8 	.word	0x2003dec8
   d6a8c:	000e7274 	.word	0x000e7274
   d6a90:	2003e170 	.word	0x2003e170

000d6a94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a96:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6a9a:	ab0c      	add	r3, sp, #48	; 0x30
   d6a9c:	2400      	movs	r4, #0
   d6a9e:	4605      	mov	r5, r0
   d6aa0:	460f      	mov	r7, r1
   d6aa2:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6aa4:	a805      	add	r0, sp, #20
   d6aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6aaa:	4911      	ldr	r1, [pc, #68]	; (d6af0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d6aac:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6aae:	4616      	mov	r6, r2
   d6ab0:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6ab2:	f7fe fccc 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6ab6:	4639      	mov	r1, r7
   d6ab8:	a805      	add	r0, sp, #20
   d6aba:	f7fe fce5 	bl	d5488 <_ZN10BlynkParam3addEi>
   d6abe:	4631      	mov	r1, r6
   d6ac0:	a808      	add	r0, sp, #32
   d6ac2:	f004 fb35 	bl	db130 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6ac6:	9908      	ldr	r1, [sp, #32]
   d6ac8:	a805      	add	r0, sp, #20
   d6aca:	f7fe fcc0 	bl	d544e <_ZN10BlynkParam3addEPKc>
   d6ace:	a808      	add	r0, sp, #32
   d6ad0:	f004 faa8 	bl	db024 <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6ad4:	9b06      	ldr	r3, [sp, #24]
   d6ad6:	9402      	str	r4, [sp, #8]
   d6ad8:	3b01      	subs	r3, #1
   d6ada:	9300      	str	r3, [sp, #0]
   d6adc:	9401      	str	r4, [sp, #4]
   d6ade:	9b05      	ldr	r3, [sp, #20]
   d6ae0:	4622      	mov	r2, r4
   d6ae2:	2114      	movs	r1, #20
   d6ae4:	4628      	mov	r0, r5
   d6ae6:	f7ff fd8b 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6aea:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d6aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6af0:	000e722b 	.word	0x000e722b

000d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6af6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6afa:	ab0a      	add	r3, sp, #40	; 0x28
   d6afc:	2400      	movs	r4, #0
   d6afe:	4606      	mov	r6, r0
   d6b00:	460d      	mov	r5, r1
   d6b02:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b04:	a807      	add	r0, sp, #28
   d6b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6b0a:	4917      	ldr	r1, [pc, #92]	; (d6b68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b0c:	ed8d 0a05 	vstr	s0, [sp, #20]
   d6b10:	9309      	str	r3, [sp, #36]	; 0x24
   d6b12:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b14:	f7fe fc9b 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6b18:	4629      	mov	r1, r5
   d6b1a:	a807      	add	r0, sp, #28
   d6b1c:	f7fe fcb4 	bl	d5488 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d6b20:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6b24:	9b08      	ldr	r3, [sp, #32]
   d6b26:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6b28:	9d07      	ldr	r5, [sp, #28]
   d6b2a:	ee10 0a10 	vmov	r0, s0
   d6b2e:	1acf      	subs	r7, r1, r3
   d6b30:	441d      	add	r5, r3
   d6b32:	f00c f979 	bl	e2e28 <__aeabi_f2d>
   d6b36:	4a0d      	ldr	r2, [pc, #52]	; (d6b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d6b38:	e9cd 0100 	strd	r0, r1, [sp]
   d6b3c:	4639      	mov	r1, r7
   d6b3e:	4628      	mov	r0, r5
   d6b40:	f004 f874 	bl	dac2c <snprintf>
   d6b44:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6b46:	9402      	str	r4, [sp, #8]
   d6b48:	3001      	adds	r0, #1
   d6b4a:	4418      	add	r0, r3
   d6b4c:	9008      	str	r0, [sp, #32]
   d6b4e:	3801      	subs	r0, #1
   d6b50:	9000      	str	r0, [sp, #0]
   d6b52:	9401      	str	r4, [sp, #4]
   d6b54:	9b07      	ldr	r3, [sp, #28]
   d6b56:	4622      	mov	r2, r4
   d6b58:	2114      	movs	r1, #20
   d6b5a:	4630      	mov	r0, r6
   d6b5c:	f7ff fd50 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6b60:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d6b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b66:	bf00      	nop
   d6b68:	000e722b 	.word	0x000e722b
   d6b6c:	000e728c 	.word	0x000e728c

000d6b70 <_Z13setAppWidgetsv>:
 DEBUG_PRINTLN("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d6b70:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6b72:	4d09      	ldr	r5, [pc, #36]	; (d6b98 <_Z13setAppWidgetsv+0x28>)
   d6b74:	4c09      	ldr	r4, [pc, #36]	; (d6b9c <_Z13setAppWidgetsv+0x2c>)
   d6b76:	686a      	ldr	r2, [r5, #4]
   d6b78:	4620      	mov	r0, r4
   d6b7a:	210b      	movs	r1, #11
   d6b7c:	f7ff fe3c 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6b80:	4620      	mov	r0, r4
   d6b82:	68aa      	ldr	r2, [r5, #8]
   d6b84:	210d      	movs	r1, #13
   d6b86:	f7ff fe37 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6b8a:	ed95 0a03 	vldr	s0, [r5, #12]
   d6b8e:	210f      	movs	r1, #15
   d6b90:	4620      	mov	r0, r4
   d6b92:	f7ff ffaf 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d6b96:	bd38      	pop	{r3, r4, r5, pc}
   d6b98:	2003da80 	.word	0x2003da80
   d6b9c:	2003e234 	.word	0x2003e234

000d6ba0 <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d6ba0:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d6ba2:	6808      	ldr	r0, [r1, #0]
   d6ba4:	f00c fd1b 	bl	e35de <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d6ba8:	4b03      	ldr	r3, [pc, #12]	; (d6bb8 <BlynkWidgetWrite10+0x18>)
   d6baa:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d6bac:	f7fe fd26 	bl	d55fc <_Z9saveStatev>
  setAppWidgets();
}
   d6bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d6bb4:	f7ff bfdc 	b.w	d6b70 <_Z13setAppWidgetsv>
   d6bb8:	2003da80 	.word	0x2003da80

000d6bbc <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	6808      	ldr	r0, [r1, #0]
   d6bc0:	f00c fd0d 	bl	e35de <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d6bc4:	4b03      	ldr	r3, [pc, #12]	; (d6bd4 <BlynkWidgetWrite12+0x18>)
   d6bc6:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d6bc8:	f7fe fd18 	bl	d55fc <_Z9saveStatev>
  setAppWidgets();
}
   d6bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d6bd0:	f7ff bfce 	b.w	d6b70 <_Z13setAppWidgetsv>
   d6bd4:	2003da80 	.word	0x2003da80

000d6bd8 <BlynkWidgetWriteInternalPinACON>:
    System.sleep(SLEEP_MODE_DEEP); 
    }
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d6bd8:	b508      	push	{r3, lr}
  appConnected = true;
   d6bda:	4b06      	ldr	r3, [pc, #24]	; (d6bf4 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d6bdc:	2201      	movs	r2, #1
   d6bde:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d6be0:	f7ff ffc6 	bl	d6b70 <_Z13setAppWidgetsv>
  DEBUG_PRINTLN("Connected");
   d6be4:	f005 fc60 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6be8:	4903      	ldr	r1, [pc, #12]	; (d6bf8 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d6bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
   d6bee:	f004 bbee 	b.w	db3ce <_ZN5Print7printlnEPKc>
   d6bf2:	bf00      	nop
   d6bf4:	2003da44 	.word	0x2003da44
   d6bf8:	000e7292 	.word	0x000e7292

000d6bfc <BlynkWidgetWrite14>:
  }
  
}
// Calibration
BLYNK_WRITE(V14) 
{
   d6bfc:	b510      	push	{r4, lr}
   d6bfe:	6808      	ldr	r0, [r1, #0]
   d6c00:	f00c fced 	bl	e35de <atoi>
  if (param.asInt()==1)
   d6c04:	2801      	cmp	r0, #1
   d6c06:	d10d      	bne.n	d6c24 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d6c08:	480d      	ldr	r0, [pc, #52]	; (d6c40 <BlynkWidgetWrite14+0x44>)
   d6c0a:	4c0e      	ldr	r4, [pc, #56]	; (d6c44 <BlynkWidgetWrite14+0x48>)
   d6c0c:	f002 fb0e 	bl	d922c <_ZN3ULP4zeroEv>
   d6c10:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6c14:	f7fe fcf2 	bl	d55fc <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6c18:	ed94 0a03 	vldr	s0, [r4, #12]
   d6c1c:	480a      	ldr	r0, [pc, #40]	; (d6c48 <BlynkWidgetWrite14+0x4c>)
   d6c1e:	210f      	movs	r1, #15
   d6c20:	f7ff ff68 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6c24:	2200      	movs	r2, #0
   d6c26:	210e      	movs	r1, #14
   d6c28:	4807      	ldr	r0, [pc, #28]	; (d6c48 <BlynkWidgetWrite14+0x4c>)
   d6c2a:	f7ff fde5 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  // Since data will be invalid save the new calibration and reset
  delay(4000);
   d6c2e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d6c32:	f004 feaf 	bl	db994 <delay>
  System.reset();
}
   d6c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Blynk.virtualWrite(V15, state.zeroOff);
  }
  Blynk.virtualWrite(V14, 0);
  // Since data will be invalid save the new calibration and reset
  delay(4000);
  System.reset();
   d6c3a:	f004 b909 	b.w	dae50 <_ZN11SystemClass5resetEv>
   d6c3e:	bf00      	nop
   d6c40:	2003ded0 	.word	0x2003ded0
   d6c44:	2003da80 	.word	0x2003da80
   d6c48:	2003e234 	.word	0x2003e234

000d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c4e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6c52:	ab08      	add	r3, sp, #32
   d6c54:	2400      	movs	r4, #0
   d6c56:	4605      	mov	r5, r0
   d6c58:	460f      	mov	r7, r1
   d6c5a:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6c5c:	a805      	add	r0, sp, #20
   d6c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6c62:	490e      	ldr	r1, [pc, #56]	; (d6c9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6c64:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6c66:	4616      	mov	r6, r2
   d6c68:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6c6a:	f7fe fbf0 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6c6e:	4639      	mov	r1, r7
   d6c70:	a805      	add	r0, sp, #20
   d6c72:	f7fe fc09 	bl	d5488 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6c76:	4631      	mov	r1, r6
   d6c78:	a805      	add	r0, sp, #20
   d6c7a:	f7fe fbe8 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6c7e:	9b06      	ldr	r3, [sp, #24]
   d6c80:	9402      	str	r4, [sp, #8]
   d6c82:	3b01      	subs	r3, #1
   d6c84:	9300      	str	r3, [sp, #0]
   d6c86:	9401      	str	r4, [sp, #4]
   d6c88:	9b05      	ldr	r3, [sp, #20]
   d6c8a:	4622      	mov	r2, r4
   d6c8c:	2114      	movs	r1, #20
   d6c8e:	4628      	mov	r0, r5
   d6c90:	f7ff fcb6 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6c94:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6c9a:	bf00      	nop
   d6c9c:	000e722b 	.word	0x000e722b

000d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ca2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6ca6:	ab08      	add	r3, sp, #32
   d6ca8:	2400      	movs	r4, #0
   d6caa:	4605      	mov	r5, r0
   d6cac:	460f      	mov	r7, r1
   d6cae:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6cb0:	a805      	add	r0, sp, #20
   d6cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6cb6:	490e      	ldr	r1, [pc, #56]	; (d6cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_+0x50>)
   d6cb8:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6cba:	4616      	mov	r6, r2
   d6cbc:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6cbe:	f7fe fbc6 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6cc2:	4639      	mov	r1, r7
   d6cc4:	a805      	add	r0, sp, #20
   d6cc6:	f7fe fbdf 	bl	d5488 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6cca:	4631      	mov	r1, r6
   d6ccc:	a805      	add	r0, sp, #20
   d6cce:	f7fe fbdb 	bl	d5488 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6cd2:	9b06      	ldr	r3, [sp, #24]
   d6cd4:	9402      	str	r4, [sp, #8]
   d6cd6:	3b01      	subs	r3, #1
   d6cd8:	9300      	str	r3, [sp, #0]
   d6cda:	9401      	str	r4, [sp, #4]
   d6cdc:	9b05      	ldr	r3, [sp, #20]
   d6cde:	4622      	mov	r2, r4
   d6ce0:	2114      	movs	r1, #20
   d6ce2:	4628      	mov	r0, r5
   d6ce4:	f7ff fc8c 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6ce8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6cee:	bf00      	nop
   d6cf0:	000e722b 	.word	0x000e722b

000d6cf4 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d6cf4:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d6cf6:	4c46      	ldr	r4, [pc, #280]	; (d6e10 <_Z20initializeAppWidgetsv+0x11c>)
   d6cf8:	4846      	ldr	r0, [pc, #280]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6cfa:	6862      	ldr	r2, [r4, #4]
   d6cfc:	210a      	movs	r1, #10
   d6cfe:	f7ff fd7b 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6d02:	68a2      	ldr	r2, [r4, #8]
   d6d04:	4843      	ldr	r0, [pc, #268]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d06:	210c      	movs	r1, #12
   d6d08:	f7ff fd76 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6d0c:	6862      	ldr	r2, [r4, #4]
   d6d0e:	4841      	ldr	r0, [pc, #260]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d10:	210b      	movs	r1, #11
   d6d12:	f7ff fd71 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6d16:	68a2      	ldr	r2, [r4, #8]
   d6d18:	483e      	ldr	r0, [pc, #248]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d1a:	210d      	movs	r1, #13
   d6d1c:	f7ff fd6c 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d6d20:	f104 0210 	add.w	r2, r4, #16
   d6d24:	2114      	movs	r1, #20
   d6d26:	483b      	ldr	r0, [pc, #236]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d28:	f7ff ff90 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d6d2c:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6d30:	2110      	movs	r1, #16
   d6d32:	4838      	ldr	r0, [pc, #224]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d34:	f7ff ff8a 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d6d38:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6d3c:	2112      	movs	r1, #18
   d6d3e:	4835      	ldr	r0, [pc, #212]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d40:	f7ff ff84 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d6d44:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6d48:	211a      	movs	r1, #26
   d6d4a:	4832      	ldr	r0, [pc, #200]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d4c:	f7ff ff7e 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6d50:	ed94 0a03 	vldr	s0, [r4, #12]
   d6d54:	482f      	ldr	r0, [pc, #188]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d56:	210f      	movs	r1, #15
   d6d58:	f7ff fecc 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d6d5c:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d6d60:	ed93 0a00 	vldr	s0, [r3]
   d6d64:	482b      	ldr	r0, [pc, #172]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d66:	2119      	movs	r1, #25
   d6d68:	f7ff fec4 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d6d6c:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6d70:	4828      	ldr	r0, [pc, #160]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d72:	2117      	movs	r1, #23
   d6d74:	f7ff fd40 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 // Blynk.virtualWrite(V24, state.buzzerActivated);
  Blynk.virtualWrite(V22,"Enter code to reset");
   d6d78:	4a27      	ldr	r2, [pc, #156]	; (d6e18 <_Z20initializeAppWidgetsv+0x124>)
   d6d7a:	4826      	ldr	r0, [pc, #152]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d7c:	2116      	movs	r1, #22
   d6d7e:	f7ff ff65 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  // New Pins
  Blynk.virtualWrite(V24, state.buzzerTamper); // Buzzer Tamper
   d6d82:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6d86:	4823      	ldr	r0, [pc, #140]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d88:	2118      	movs	r1, #24
   d6d8a:	f7ff ff89 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6d8e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6d92:	4820      	ldr	r0, [pc, #128]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6d94:	211b      	movs	r1, #27
   d6d96:	f7ff ff83 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6d9a:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6d9e:	481d      	ldr	r0, [pc, #116]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6da0:	211c      	movs	r1, #28
   d6da2:	f7ff ff7d 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6da6:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6daa:	481a      	ldr	r0, [pc, #104]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6dac:	211d      	movs	r1, #29
   d6dae:	f7ff ff77 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6db2:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6db6:	4817      	ldr	r0, [pc, #92]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6db8:	2120      	movs	r1, #32
   d6dba:	f7ff ff71 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  if (state.ActivityThreshold==144)
   d6dbe:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   d6dc2:	2b90      	cmp	r3, #144	; 0x90
   d6dc4:	d101      	bne.n	d6dca <_Z20initializeAppWidgetsv+0xd6>
  	Blynk.virtualWrite(V31, 3); // Tamper Setting Hammer
   d6dc6:	2203      	movs	r2, #3
   d6dc8:	e003      	b.n	d6dd2 <_Z20initializeAppWidgetsv+0xde>
  else  if (state.ActivityThreshold==72)
   d6dca:	2b48      	cmp	r3, #72	; 0x48
  	Blynk.virtualWrite(V31, 1); // Tamper Setting feather
   d6dcc:	bf0c      	ite	eq
   d6dce:	2201      	moveq	r2, #1
  else
  	Blynk.virtualWrite(V31, 2); // Tamper Setting default
   d6dd0:	2202      	movne	r2, #2
   d6dd2:	211f      	movs	r1, #31
   d6dd4:	480f      	ldr	r0, [pc, #60]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6dd6:	f7ff fd0f 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>

  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d6dda:	4b10      	ldr	r3, [pc, #64]	; (d6e1c <_Z20initializeAppWidgetsv+0x128>)
   d6ddc:	781b      	ldrb	r3, [r3, #0]
   d6dde:	b123      	cbz	r3, d6dea <_Z20initializeAppWidgetsv+0xf6>
   d6de0:	4a0f      	ldr	r2, [pc, #60]	; (d6e20 <_Z20initializeAppWidgetsv+0x12c>)
   d6de2:	480c      	ldr	r0, [pc, #48]	; (d6e14 <_Z20initializeAppWidgetsv+0x120>)
   d6de4:	2115      	movs	r1, #21
   d6de6:	f7ff ff31 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  state.firstRunCheck = firstRunValue;
   d6dea:	4b0e      	ldr	r3, [pc, #56]	; (d6e24 <_Z20initializeAppWidgetsv+0x130>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6023      	str	r3, [r4, #0]
  state.bSleepModeStandby=true;
   d6df0:	2301      	movs	r3, #1
   d6df2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d6df6:	2300      	movs	r3, #0
   d6df8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  DEBUG_PRINTLN("Finished Initialization");
   d6dfc:	f005 fb54 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6e00:	4909      	ldr	r1, [pc, #36]	; (d6e28 <_Z20initializeAppWidgetsv+0x134>)
   d6e02:	f004 fae4 	bl	db3ce <_ZN5Print7printlnEPKc>
  saveState();
}
   d6e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
  state.firstRunCheck = firstRunValue;
  state.bSleepModeStandby=true;
  state.bInSleepMode=false;
  DEBUG_PRINTLN("Finished Initialization");
  saveState();
   d6e0a:	f7fe bbf7 	b.w	d55fc <_Z9saveStatev>
   d6e0e:	bf00      	nop
   d6e10:	2003da80 	.word	0x2003da80
   d6e14:	2003e234 	.word	0x2003e234
   d6e18:	000e729c 	.word	0x000e729c
   d6e1c:	2003da45 	.word	0x2003da45
   d6e20:	000e72b0 	.word	0x000e72b0
   d6e24:	2003d578 	.word	0x2003d578
   d6e28:	000e72cb 	.word	0x000e72cb

000d6e2c <BlynkWidgetWrite22>:
}

BLYNK_WRITE(V22) //Reset Expression
{
   d6e2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d6e30:	6809      	ldr	r1, [r1, #0]
   d6e32:	4668      	mov	r0, sp
   d6e34:	f004 f93d 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d6e38:	4961      	ldr	r1, [pc, #388]	; (d6fc0 <BlynkWidgetWrite22+0x194>)
   d6e3a:	4668      	mov	r0, sp
   d6e3c:	f004 f9f6 	bl	db22c <_ZNK6String6equalsEPKc>
   d6e40:	2800      	cmp	r0, #0
   d6e42:	f000 80b6 	beq.w	d6fb2 <BlynkWidgetWrite22+0x186>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6e46:	4c5f      	ldr	r4, [pc, #380]	; (d6fc4 <BlynkWidgetWrite22+0x198>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d6e48:	4a5f      	ldr	r2, [pc, #380]	; (d6fc8 <BlynkWidgetWrite22+0x19c>)
   d6e4a:	4860      	ldr	r0, [pc, #384]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6e4c:	2116      	movs	r1, #22
   d6e4e:	f7ff fefd 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d6e52:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d6e54:	2500      	movs	r5, #0
    state.bSleepModeStandby=true;
   d6e56:	2701      	movs	r7, #1
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6e58:	f04f 080f 	mov.w	r8, #15
    state.secondsBetweenReadings=5;
   d6e5c:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6e5e:	495c      	ldr	r1, [pc, #368]	; (d6fd0 <BlynkWidgetWrite22+0x1a4>)
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6e60:	f8c4 8004 	str.w	r8, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6e64:	2300      	movs	r3, #0
    strcpy(state.expression,"Enter expression here");
   d6e66:	f104 0010 	add.w	r0, r4, #16
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6e6a:	60e3      	str	r3, [r4, #12]
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d6e6c:	6025      	str	r5, [r4, #0]
    state.bSleepModeStandby=true;
   d6e6e:	f884 7424 	strb.w	r7, [r4, #1060]	; 0x424
    state.bInSleepMode=false;
   d6e72:	f884 5425 	strb.w	r5, [r4, #1061]	; 0x425
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6e76:	f00c ff59 	bl	e3d2c <strcpy>
    strcpy(state.email,"Enter email here");
   d6e7a:	4956      	ldr	r1, [pc, #344]	; (d6fd4 <BlynkWidgetWrite22+0x1a8>)
   d6e7c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6e80:	f00c ff54 	bl	e3d2c <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d6e84:	4953      	ldr	r1, [pc, #332]	; (d6fd4 <BlynkWidgetWrite22+0x1a8>)
   d6e86:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d6e8a:	f00c ff4f 	bl	e3d2c <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
   d6e8e:	f504 6682 	add.w	r6, r4, #1040	; 0x410
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d6e92:	4950      	ldr	r1, [pc, #320]	; (d6fd4 <BlynkWidgetWrite22+0x1a8>)
   d6e94:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d6e98:	f00c ff48 	bl	e3d2c <strcpy>
    state.deviceZone=0;
    state.batThreshold = 20;
   d6e9c:	4b4e      	ldr	r3, [pc, #312]	; (d6fd8 <BlynkWidgetWrite22+0x1ac>)
   d6e9e:	6033      	str	r3, [r6, #0]
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6ea0:	4642      	mov	r2, r8
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6ea2:	2364      	movs	r3, #100	; 0x64
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6ea4:	210a      	movs	r1, #10
   d6ea6:	4849      	ldr	r0, [pc, #292]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6ea8:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
   d6eac:	f8c4 5420 	str.w	r5, [r4, #1056]	; 0x420
    state.batThreshold = 20;
    state.lastAlert=false;
   d6eb0:	f884 5414 	strb.w	r5, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d6eb4:	f884 5415 	strb.w	r5, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d6eb8:	f884 7417 	strb.w	r7, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d6ebc:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d6ec0:	f884 7419 	strb.w	r7, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d6ec4:	f884 741a 	strb.w	r7, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d6ec8:	f884 741b 	strb.w	r7, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d6ecc:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6ed0:	f7ff fc92 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6ed4:	68a2      	ldr	r2, [r4, #8]
   d6ed6:	483d      	ldr	r0, [pc, #244]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6ed8:	210c      	movs	r1, #12
   d6eda:	f7ff fc8d 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d6ede:	6862      	ldr	r2, [r4, #4]
   d6ee0:	483a      	ldr	r0, [pc, #232]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6ee2:	210b      	movs	r1, #11
   d6ee4:	f7ff fc88 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6ee8:	68a2      	ldr	r2, [r4, #8]
   d6eea:	4838      	ldr	r0, [pc, #224]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6eec:	210d      	movs	r1, #13
   d6eee:	f7ff fc83 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d6ef2:	f104 0210 	add.w	r2, r4, #16
   d6ef6:	2114      	movs	r1, #20
   d6ef8:	4834      	ldr	r0, [pc, #208]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6efa:	f7ff fea7 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6efe:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6f02:	2110      	movs	r1, #16
   d6f04:	4831      	ldr	r0, [pc, #196]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f06:	f7ff fea1 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d6f0a:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6f0e:	2112      	movs	r1, #18
   d6f10:	482e      	ldr	r0, [pc, #184]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f12:	f7ff fe9b 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d6f16:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6f1a:	211a      	movs	r1, #26
   d6f1c:	482b      	ldr	r0, [pc, #172]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f1e:	f7ff fe95 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6f22:	ed94 0a03 	vldr	s0, [r4, #12]
   d6f26:	4829      	ldr	r0, [pc, #164]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f28:	4641      	mov	r1, r8
   d6f2a:	f7ff fde3 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d6f2e:	ed96 0a00 	vldr	s0, [r6]
   d6f32:	4826      	ldr	r0, [pc, #152]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f34:	2119      	movs	r1, #25
   d6f36:	f7ff fddd 	bl	d6af4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d6f3a:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6f3e:	4823      	ldr	r0, [pc, #140]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f40:	2117      	movs	r1, #23
   d6f42:	f7ff fc59 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V24, state.buzzerTamper);  // Buzzer Tamper
   d6f46:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6f4a:	4820      	ldr	r0, [pc, #128]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f4c:	2118      	movs	r1, #24
   d6f4e:	f7ff fea7 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6f52:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6f56:	481d      	ldr	r0, [pc, #116]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f58:	211b      	movs	r1, #27
   d6f5a:	f7ff fea1 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6f5e:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6f62:	481a      	ldr	r0, [pc, #104]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f64:	211c      	movs	r1, #28
   d6f66:	f7ff fe9b 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6f6a:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6f6e:	4817      	ldr	r0, [pc, #92]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f70:	211d      	movs	r1, #29
   d6f72:	f7ff fe95 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V31, 2); // Which is 100 for the accelerometer
   d6f76:	2202      	movs	r2, #2
   d6f78:	211f      	movs	r1, #31
   d6f7a:	4814      	ldr	r0, [pc, #80]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f7c:	f7ff fc3c 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6f80:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6f84:	4811      	ldr	r0, [pc, #68]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f86:	2120      	movs	r1, #32
   d6f88:	f7ff fe8a 	bl	d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d6f8c:	4813      	ldr	r0, [pc, #76]	; (d6fdc <BlynkWidgetWrite22+0x1b0>)
   d6f8e:	f002 fc8f 	bl	d98b0 <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d6f92:	4a13      	ldr	r2, [pc, #76]	; (d6fe0 <BlynkWidgetWrite22+0x1b4>)
   d6f94:	480d      	ldr	r0, [pc, #52]	; (d6fcc <BlynkWidgetWrite22+0x1a0>)
   d6f96:	2115      	movs	r1, #21
   d6f98:	f7ff fe58 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    DEBUG_PRINTLN("Hard Resetting");
   d6f9c:	f005 fa84 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6fa0:	490f      	ldr	r1, [pc, #60]	; (d6fe0 <BlynkWidgetWrite22+0x1b4>)
   d6fa2:	f004 fa14 	bl	db3ce <_ZN5Print7printlnEPKc>
    delay(500);
   d6fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6faa:	f004 fcf3 	bl	db994 <delay>
    System.reset();
   d6fae:	f003 ff4f 	bl	dae50 <_ZN11SystemClass5resetEv>
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d6fb2:	4668      	mov	r0, sp
   d6fb4:	f004 f836 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    DEBUG_PRINTLN("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d6fb8:	b004      	add	sp, #16
   d6fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fbe:	bf00      	nop
   d6fc0:	000e72e3 	.word	0x000e72e3
   d6fc4:	2003da80 	.word	0x2003da80
   d6fc8:	000e729c 	.word	0x000e729c
   d6fcc:	2003e234 	.word	0x2003e234
   d6fd0:	000e72eb 	.word	0x000e72eb
   d6fd4:	000e7301 	.word	0x000e7301
   d6fd8:	41a00000 	.word	0x41a00000
   d6fdc:	2003d6e8 	.word	0x2003d6e8
   d6fe0:	000e7312 	.word	0x000e7312

000d6fe4 <BlynkOnConnected>:

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d6fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  DEBUG_PRINTLN("Blynk is now connected - syncing all pins.");
   d6fe6:	f005 fa5f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d6fea:	490b      	ldr	r1, [pc, #44]	; (d7018 <BlynkOnConnected+0x34>)
   d6fec:	f004 f9ef 	bl	db3ce <_ZN5Print7printlnEPKc>
  if (state.firstRunCheck != firstRunValue)
   d6ff0:	4b0a      	ldr	r3, [pc, #40]	; (d701c <BlynkOnConnected+0x38>)
   d6ff2:	681a      	ldr	r2, [r3, #0]
   d6ff4:	4b0a      	ldr	r3, [pc, #40]	; (d7020 <BlynkOnConnected+0x3c>)
   d6ff6:	681b      	ldr	r3, [r3, #0]
   d6ff8:	429a      	cmp	r2, r3
   d6ffa:	d001      	beq.n	d7000 <BlynkOnConnected+0x1c>
  {
    initializeAppWidgets();
   d6ffc:	f7ff fe7a 	bl	d6cf4 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d7000:	2300      	movs	r3, #0
   d7002:	9302      	str	r3, [sp, #8]
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	9300      	str	r3, [sp, #0]
   d7008:	461a      	mov	r2, r3
   d700a:	2110      	movs	r1, #16
   d700c:	4805      	ldr	r0, [pc, #20]	; (d7024 <BlynkOnConnected+0x40>)
   d700e:	f7ff faf7 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d7012:	b005      	add	sp, #20
   d7014:	f85d fb04 	ldr.w	pc, [sp], #4
   d7018:	000e7321 	.word	0x000e7321
   d701c:	2003da80 	.word	0x2003da80
   d7020:	2003d578 	.word	0x2003d578
   d7024:	2003e234 	.word	0x2003e234

000d7028 <_Z13runExpressionPc>:
    DEBUG_PRINT("Update notifyBattery flag value is: ");
    DEBUG_PRINTLN(state.notifyBattery);
#endif
}
bool runExpression(char *expression)
{   
   d7028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d702c:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
   d7030:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d7032:	2260      	movs	r2, #96	; 0x60
   d7034:	2100      	movs	r1, #0
   d7036:	a81c      	add	r0, sp, #112	; 0x70
   d7038:	f00c fbef 	bl	e381a <memset>
   d703c:	4b7e      	ldr	r3, [pc, #504]	; (d7238 <_Z13runExpressionPc+0x210>)
   d703e:	931c      	str	r3, [sp, #112]	; 0x70
   d7040:	4b7e      	ldr	r3, [pc, #504]	; (d723c <_Z13runExpressionPc+0x214>)
   d7042:	9320      	str	r3, [sp, #128]	; 0x80
   d7044:	4b7e      	ldr	r3, [pc, #504]	; (d7240 <_Z13runExpressionPc+0x218>)
   d7046:	9324      	str	r3, [sp, #144]	; 0x90
   d7048:	4b7e      	ldr	r3, [pc, #504]	; (d7244 <_Z13runExpressionPc+0x21c>)
   d704a:	9328      	str	r3, [sp, #160]	; 0xa0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d704c:	4c7e      	ldr	r4, [pc, #504]	; (d7248 <_Z13runExpressionPc+0x220>)
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d704e:	4b7f      	ldr	r3, [pc, #508]	; (d724c <_Z13runExpressionPc+0x224>)
   d7050:	932c      	str	r3, [sp, #176]	; 0xb0
   d7052:	4b7f      	ldr	r3, [pc, #508]	; (d7250 <_Z13runExpressionPc+0x228>)
   d7054:	9330      	str	r3, [sp, #192]	; 0xc0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d7056:	7823      	ldrb	r3, [r4, #0]
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d7058:	f10d 0b20 	add.w	fp, sp, #32
   d705c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   d7060:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   d7064:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   d7068:	af10      	add	r7, sp, #64	; 0x40
   d706a:	ae12      	add	r6, sp, #72	; 0x48
   d706c:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   d7070:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
   d7074:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   d7078:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
   d707c:	972d      	str	r7, [sp, #180]	; 0xb4
   d707e:	9631      	str	r6, [sp, #196]	; 0xc4
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d7080:	b123      	cbz	r3, d708c <_Z13runExpressionPc+0x64>
   d7082:	462a      	mov	r2, r5
   d7084:	2115      	movs	r1, #21
   d7086:	4873      	ldr	r0, [pc, #460]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d7088:	f7ff fde0 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  // Compile the expression with variables.
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d708c:	ab07      	add	r3, sp, #28
   d708e:	2206      	movs	r2, #6
   d7090:	a91c      	add	r1, sp, #112	; 0x70
   d7092:	4628      	mov	r0, r5
   d7094:	f7fe f906 	bl	d52a4 <te_compile>

  if (expr) {
   d7098:	9005      	str	r0, [sp, #20]
   d709a:	2800      	cmp	r0, #0
   d709c:	f000 809d 	beq.w	d71da <_Z13runExpressionPc+0x1b2>

      pm1 = (double)Sensor.massPM1;
   d70a0:	4d6d      	ldr	r5, [pc, #436]	; (d7258 <_Z13runExpressionPc+0x230>)
   d70a2:	6868      	ldr	r0, [r5, #4]
   d70a4:	f00b fec0 	bl	e2e28 <__aeabi_f2d>
   d70a8:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d70ac:	68a8      	ldr	r0, [r5, #8]
   d70ae:	f00b febb 	bl	e2e28 <__aeabi_f2d>
   d70b2:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d70b6:	68e8      	ldr	r0, [r5, #12]
   d70b8:	f00b feb6 	bl	e2e28 <__aeabi_f2d>
   d70bc:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d70c0:	6928      	ldr	r0, [r5, #16]
   d70c2:	f00b feb1 	bl	e2e28 <__aeabi_f2d>
      conc = (double)conc1;
   d70c6:	4a65      	ldr	r2, [pc, #404]	; (d725c <_Z13runExpressionPc+0x234>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d70c8:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc1;
   d70cc:	6810      	ldr	r0, [r2, #0]
   d70ce:	f00b feab 	bl	e2e28 <__aeabi_f2d>
      temp = (double)temp1;
   d70d2:	4a63      	ldr	r2, [pc, #396]	; (d7260 <_Z13runExpressionPc+0x238>)

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
   d70d4:	e9c7 0100 	strd	r0, r1, [r7]
      temp = (double)temp1;
   d70d8:	6810      	ldr	r0, [r2, #0]
   d70da:	f00b fea5 	bl	e2e28 <__aeabi_f2d>
      const double h2 = te_eval(expr);
   d70de:	9b05      	ldr	r3, [sp, #20]
      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
   d70e0:	e9c6 0100 	strd	r0, r1, [r6]
      const double h2 = te_eval(expr);
   d70e4:	4618      	mov	r0, r3
   d70e6:	f7fd fdc7 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d70ea:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d70ec:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d70f0:	b15b      	cbz	r3, d710a <_Z13runExpressionPc+0xe2>
   d70f2:	495c      	ldr	r1, [pc, #368]	; (d7264 <_Z13runExpressionPc+0x23c>)
   d70f4:	a834      	add	r0, sp, #208	; 0xd0
   d70f6:	f004 f81b 	bl	db130 <_ZN6StringC1ERKS_>
   d70fa:	4856      	ldr	r0, [pc, #344]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d70fc:	aa34      	add	r2, sp, #208	; 0xd0
   d70fe:	2115      	movs	r1, #21
   d7100:	f7ff fba4 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7104:	a834      	add	r0, sp, #208	; 0xd0
   d7106:	f003 ff8d 	bl	db024 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d710a:	7823      	ldrb	r3, [r4, #0]
   d710c:	b333      	cbz	r3, d715c <_Z13runExpressionPc+0x134>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d710e:	ab34      	add	r3, sp, #208	; 0xd0
   d7110:	2500      	movs	r5, #0
   d7112:	9318      	str	r3, [sp, #96]	; 0x60
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d7114:	4954      	ldr	r1, [pc, #336]	; (d7268 <_Z13runExpressionPc+0x240>)
   d7116:	9519      	str	r5, [sp, #100]	; 0x64
   d7118:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d711c:	a818      	add	r0, sp, #96	; 0x60
   d711e:	931a      	str	r3, [sp, #104]	; 0x68
   d7120:	f7fe f995 	bl	d544e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d7124:	2115      	movs	r1, #21
   d7126:	a818      	add	r0, sp, #96	; 0x60
   d7128:	f7fe f9ae 	bl	d5488 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d712c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d712e:	991a      	ldr	r1, [sp, #104]	; 0x68
   d7130:	9818      	ldr	r0, [sp, #96]	; 0x60
   d7132:	4a4e      	ldr	r2, [pc, #312]	; (d726c <_Z13runExpressionPc+0x244>)
   d7134:	1ac9      	subs	r1, r1, r3
   d7136:	4418      	add	r0, r3
   d7138:	e9cd 6700 	strd	r6, r7, [sp]
   d713c:	f003 fd76 	bl	dac2c <snprintf>
   d7140:	9b19      	ldr	r3, [sp, #100]	; 0x64
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d7142:	9502      	str	r5, [sp, #8]
   d7144:	3001      	adds	r0, #1
   d7146:	4418      	add	r0, r3
   d7148:	9019      	str	r0, [sp, #100]	; 0x64
   d714a:	3801      	subs	r0, #1
   d714c:	9000      	str	r0, [sp, #0]
   d714e:	9501      	str	r5, [sp, #4]
   d7150:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d7152:	4840      	ldr	r0, [pc, #256]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d7154:	462a      	mov	r2, r5
   d7156:	2114      	movs	r1, #20
   d7158:	f7ff fa52 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
   d715c:	7823      	ldrb	r3, [r4, #0]
   d715e:	b15b      	cbz	r3, d7178 <_Z13runExpressionPc+0x150>
   d7160:	4943      	ldr	r1, [pc, #268]	; (d7270 <_Z13runExpressionPc+0x248>)
   d7162:	a834      	add	r0, sp, #208	; 0xd0
   d7164:	f003 ffe4 	bl	db130 <_ZN6StringC1ERKS_>
   d7168:	483a      	ldr	r0, [pc, #232]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d716a:	aa34      	add	r2, sp, #208	; 0xd0
   d716c:	2115      	movs	r1, #21
   d716e:	f7ff fb6d 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7172:	a834      	add	r0, sp, #208	; 0xd0
   d7174:	f003 ff56 	bl	db024 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);
   d7178:	7823      	ldrb	r3, [r4, #0]
   d717a:	b1eb      	cbz	r3, d71b8 <_Z13runExpressionPc+0x190>
   d717c:	493d      	ldr	r1, [pc, #244]	; (d7274 <_Z13runExpressionPc+0x24c>)
   d717e:	a834      	add	r0, sp, #208	; 0xd0
   d7180:	f003 ffd6 	bl	db130 <_ZN6StringC1ERKS_>
   d7184:	aa34      	add	r2, sp, #208	; 0xd0
   d7186:	2115      	movs	r1, #21
   d7188:	4832      	ldr	r0, [pc, #200]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d718a:	f7ff fb5f 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d718e:	a834      	add	r0, sp, #208	; 0xd0
   d7190:	f003 ff48 	bl	db024 <_ZN6StringD1Ev>

      if (h2==1.0)
   d7194:	2200      	movs	r2, #0
   d7196:	4b38      	ldr	r3, [pc, #224]	; (d7278 <_Z13runExpressionPc+0x250>)
   d7198:	4630      	mov	r0, r6
   d719a:	4639      	mov	r1, r7
   d719c:	f00c f900 	bl	e33a0 <__aeabi_dcmpeq>
   d71a0:	b190      	cbz	r0, d71c8 <_Z13runExpressionPc+0x1a0>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d71a2:	4b29      	ldr	r3, [pc, #164]	; (d7248 <_Z13runExpressionPc+0x220>)
   d71a4:	781c      	ldrb	r4, [r3, #0]
   d71a6:	b90c      	cbnz	r4, d71ac <_Z13runExpressionPc+0x184>
        return true;
   d71a8:	2401      	movs	r4, #1
   d71aa:	e03f      	b.n	d722c <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d71ac:	4a33      	ldr	r2, [pc, #204]	; (d727c <_Z13runExpressionPc+0x254>)
   d71ae:	4829      	ldr	r0, [pc, #164]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d71b0:	2115      	movs	r1, #21
   d71b2:	f7ff fd4b 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d71b6:	e039      	b.n	d722c <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
   d71b8:	2200      	movs	r2, #0
   d71ba:	4b2f      	ldr	r3, [pc, #188]	; (d7278 <_Z13runExpressionPc+0x250>)
   d71bc:	4630      	mov	r0, r6
   d71be:	4639      	mov	r1, r7
   d71c0:	f00c f8ee 	bl	e33a0 <__aeabi_dcmpeq>
   d71c4:	2800      	cmp	r0, #0
   d71c6:	d1ef      	bne.n	d71a8 <_Z13runExpressionPc+0x180>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d71c8:	7824      	ldrb	r4, [r4, #0]
   d71ca:	2c00      	cmp	r4, #0
   d71cc:	d02e      	beq.n	d722c <_Z13runExpressionPc+0x204>
   d71ce:	4a2c      	ldr	r2, [pc, #176]	; (d7280 <_Z13runExpressionPc+0x258>)
   d71d0:	4820      	ldr	r0, [pc, #128]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d71d2:	2115      	movs	r1, #21
   d71d4:	f7ff fd3a 	bl	d6c4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d71d8:	e027      	b.n	d722a <_Z13runExpressionPc+0x202>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d71da:	492a      	ldr	r1, [pc, #168]	; (d7284 <_Z13runExpressionPc+0x25c>)
   d71dc:	a834      	add	r0, sp, #208	; 0xd0
   d71de:	f003 ff68 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d71e2:	220a      	movs	r2, #10
   d71e4:	9907      	ldr	r1, [sp, #28]
   d71e6:	a818      	add	r0, sp, #96	; 0x60
   d71e8:	f003 ffd8 	bl	db19c <_ZN6StringC1Eih>
   d71ec:	a918      	add	r1, sp, #96	; 0x60
   d71ee:	a834      	add	r0, sp, #208	; 0xd0
   d71f0:	f003 fffe 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d71f4:	4601      	mov	r1, r0
   d71f6:	a814      	add	r0, sp, #80	; 0x50
   d71f8:	f003 ff9a 	bl	db130 <_ZN6StringC1ERKS_>
   d71fc:	a818      	add	r0, sp, #96	; 0x60
   d71fe:	f003 ff11 	bl	db024 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7202:	a834      	add	r0, sp, #208	; 0xd0
   d7204:	f003 ff0e 	bl	db024 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d7208:	7823      	ldrb	r3, [r4, #0]
   d720a:	b15b      	cbz	r3, d7224 <_Z13runExpressionPc+0x1fc>
   d720c:	a914      	add	r1, sp, #80	; 0x50
   d720e:	a834      	add	r0, sp, #208	; 0xd0
   d7210:	f003 ff8e 	bl	db130 <_ZN6StringC1ERKS_>
   d7214:	480f      	ldr	r0, [pc, #60]	; (d7254 <_Z13runExpressionPc+0x22c>)
   d7216:	aa34      	add	r2, sp, #208	; 0xd0
   d7218:	2115      	movs	r1, #21
   d721a:	f7ff fb17 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d721e:	a834      	add	r0, sp, #208	; 0xd0
   d7220:	f003 ff00 	bl	db024 <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d7224:	a814      	add	r0, sp, #80	; 0x50
   d7226:	f003 fefd 	bl	db024 <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d722a:	2400      	movs	r4, #0
  } 
}
   d722c:	4620      	mov	r0, r4
   d722e:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
   d7232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7236:	bf00      	nop
   d7238:	000e734c 	.word	0x000e734c
   d723c:	000e7350 	.word	0x000e7350
   d7240:	000e7354 	.word	0x000e7354
   d7244:	000e7358 	.word	0x000e7358
   d7248:	2003da45 	.word	0x2003da45
   d724c:	000e735d 	.word	0x000e735d
   d7250:	000e7362 	.word	0x000e7362
   d7254:	2003e234 	.word	0x2003e234
   d7258:	2003e1ec 	.word	0x2003e1ec
   d725c:	2003e15c 	.word	0x2003e15c
   d7260:	2003e268 	.word	0x2003e268
   d7264:	2003deb0 	.word	0x2003deb0
   d7268:	000e722b 	.word	0x000e722b
   d726c:	000e7367 	.word	0x000e7367
   d7270:	2003e190 	.word	0x2003e190
   d7274:	2003e220 	.word	0x2003e220
   d7278:	3ff00000 	.word	0x3ff00000
   d727c:	000e736d 	.word	0x000e736d
   d7280:	000e7384 	.word	0x000e7384
   d7284:	000e739c 	.word	0x000e739c

000d7288 <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d7288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d728a:	6809      	ldr	r1, [r1, #0]
   d728c:	4668      	mov	r0, sp
   d728e:	f003 ff10 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d7292:	4668      	mov	r0, sp
   d7294:	f004 f803 	bl	db29e <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d7298:	9900      	ldr	r1, [sp, #0]
   d729a:	4808      	ldr	r0, [pc, #32]	; (d72bc <BlynkWidgetWrite20+0x34>)
   d729c:	f00c fd46 	bl	e3d2c <strcpy>
  saveState();
   d72a0:	f7fe f9ac 	bl	d55fc <_Z9saveStatev>
  if (sensorValid)
   d72a4:	4b06      	ldr	r3, [pc, #24]	; (d72c0 <BlynkWidgetWrite20+0x38>)
   d72a6:	781b      	ldrb	r3, [r3, #0]
   d72a8:	b113      	cbz	r3, d72b0 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d72aa:	4804      	ldr	r0, [pc, #16]	; (d72bc <BlynkWidgetWrite20+0x34>)
   d72ac:	f7ff febc 	bl	d7028 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d72b0:	4668      	mov	r0, sp
   d72b2:	f003 feb7 	bl	db024 <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d72b6:	b005      	add	sp, #20
   d72b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d72bc:	2003da90 	.word	0x2003da90
   d72c0:	2003e17c 	.word	0x2003e17c

000d72c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   d72c4:	b530      	push	{r4, r5, lr}
   d72c6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d72ca:	ab08      	add	r3, sp, #32
   d72cc:	2400      	movs	r4, #0
   d72ce:	4605      	mov	r5, r0
   d72d0:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   d72d2:	a805      	add	r0, sp, #20
   d72d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d72d8:	9307      	str	r3, [sp, #28]
   d72da:	9406      	str	r4, [sp, #24]
   d72dc:	f7fe f8b7 	bl	d544e <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   d72e0:	9b06      	ldr	r3, [sp, #24]
   d72e2:	9402      	str	r4, [sp, #8]
   d72e4:	3b01      	subs	r3, #1
   d72e6:	9300      	str	r3, [sp, #0]
   d72e8:	9401      	str	r4, [sp, #4]
   d72ea:	9b05      	ldr	r3, [sp, #20]
   d72ec:	4622      	mov	r2, r4
   d72ee:	2140      	movs	r1, #64	; 0x40
   d72f0:	4628      	mov	r0, r5
   d72f2:	f7ff f985 	bl	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d72f6:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d72fa:	bd30      	pop	{r4, r5, pc}

000d72fc <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d72fc:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d72fe:	4b2f      	ldr	r3, [pc, #188]	; (d73bc <_Z10checkAccelv+0xc0>)
   d7300:	4c2f      	ldr	r4, [pc, #188]	; (d73c0 <_Z10checkAccelv+0xc4>)
   d7302:	781a      	ldrb	r2, [r3, #0]
   d7304:	461e      	mov	r6, r3
   d7306:	2a00      	cmp	r2, #0
   d7308:	d041      	beq.n	d738e <_Z10checkAccelv+0x92>
  {
    DEBUG_PRINTLN("*** ACCEL INTERRUPTED ***");
   d730a:	f005 f8cd 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d730e:	492d      	ldr	r1, [pc, #180]	; (d73c4 <_Z10checkAccelv+0xc8>)
   d7310:	f004 f85d 	bl	db3ce <_ZN5Print7printlnEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d7314:	2100      	movs	r1, #0
   d7316:	482c      	ldr	r0, [pc, #176]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7318:	f002 fd72 	bl	d9e00 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d731c:	2100      	movs	r1, #0
   d731e:	482a      	ldr	r0, [pc, #168]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7320:	f002 fd68 	bl	d9df4 <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d7324:	4828      	ldr	r0, [pc, #160]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7326:	f002 fcb0 	bl	d9c8a <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d732a:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d732c:	4605      	mov	r5, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d732e:	4601      	mov	r1, r0
   d7330:	4825      	ldr	r0, [pc, #148]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7332:	f002 fca5 	bl	d9c80 <_ZN7ADXL3459triggeredEhi>
   d7336:	b160      	cbz	r0, d7352 <_Z10checkAccelv+0x56>
      DEBUG_PRINTLN("*** INACTIVITY ***");
   d7338:	f005 f8b6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d733c:	4923      	ldr	r1, [pc, #140]	; (d73cc <_Z10checkAccelv+0xd0>)
   d733e:	f004 f846 	bl	db3ce <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d7342:	2300      	movs	r3, #0
   d7344:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d7346:	f7fe fa1d 	bl	d5784 <_Z18tamperAlertChangedv>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");
        #endif  */   
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d734a:	2101      	movs	r1, #1
   d734c:	481e      	ldr	r0, [pc, #120]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d734e:	f002 fd51 	bl	d9df4 <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d7352:	2204      	movs	r2, #4
   d7354:	4629      	mov	r1, r5
   d7356:	481c      	ldr	r0, [pc, #112]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7358:	f002 fc92 	bl	d9c80 <_ZN7ADXL3459triggeredEhi>
   d735c:	b1a8      	cbz	r0, d738a <_Z10checkAccelv+0x8e>
      DEBUG_PRINTLN("*** ACTIVITY ***"); 
   d735e:	f005 f8a3 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7362:	491b      	ldr	r1, [pc, #108]	; (d73d0 <_Z10checkAccelv+0xd4>)
   d7364:	f004 f833 	bl	db3ce <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d7368:	2301      	movs	r3, #1
   d736a:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d736c:	f7fe fa0a 	bl	d5784 <_Z18tamperAlertChangedv>
   d7370:	b138      	cbz	r0, d7382 <_Z10checkAccelv+0x86>
      {
        #ifdef Version_2
        if (state.notifyTamper==true)
   d7372:	4b18      	ldr	r3, [pc, #96]	; (d73d4 <_Z10checkAccelv+0xd8>)
   d7374:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
   d7378:	b11b      	cbz	r3, d7382 <_Z10checkAccelv+0x86>
          Blynk.logEvent("tamper_alert");
   d737a:	4917      	ldr	r1, [pc, #92]	; (d73d8 <_Z10checkAccelv+0xdc>)
   d737c:	4817      	ldr	r0, [pc, #92]	; (d73dc <_Z10checkAccelv+0xe0>)
   d737e:	f7ff ffa1 	bl	d72c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");
        #endif      
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d7382:	2101      	movs	r1, #1
   d7384:	4810      	ldr	r0, [pc, #64]	; (d73c8 <_Z10checkAccelv+0xcc>)
   d7386:	f002 fd3b 	bl	d9e00 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d738a:	2300      	movs	r3, #0
   d738c:	7033      	strb	r3, [r6, #0]
  }

// Only buzzer for tamper 
  if ((tamperCurrentAlert==false)&&(!VapeBuzzerOn))
   d738e:	7823      	ldrb	r3, [r4, #0]
   d7390:	b933      	cbnz	r3, d73a0 <_Z10checkAccelv+0xa4>
   d7392:	4b13      	ldr	r3, [pc, #76]	; (d73e0 <_Z10checkAccelv+0xe4>)
   d7394:	7819      	ldrb	r1, [r3, #0]
   d7396:	b919      	cbnz	r1, d73a0 <_Z10checkAccelv+0xa4>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d7398:	4b12      	ldr	r3, [pc, #72]	; (d73e4 <_Z10checkAccelv+0xe8>)
   d739a:	8818      	ldrh	r0, [r3, #0]
   d739c:	f005 feaf 	bl	dd0fe <digitalWrite>
  }

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
   d73a0:	7823      	ldrb	r3, [r4, #0]
   d73a2:	b153      	cbz	r3, d73ba <_Z10checkAccelv+0xbe>
   d73a4:	4b0b      	ldr	r3, [pc, #44]	; (d73d4 <_Z10checkAccelv+0xd8>)
   d73a6:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
   d73aa:	b133      	cbz	r3, d73ba <_Z10checkAccelv+0xbe>
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d73ac:	4b0d      	ldr	r3, [pc, #52]	; (d73e4 <_Z10checkAccelv+0xe8>)
   d73ae:	2101      	movs	r1, #1
   d73b0:	8818      	ldrh	r0, [r3, #0]
  }

}
   d73b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d73b6:	f005 bea2 	b.w	dd0fe <digitalWrite>
   d73ba:	bd70      	pop	{r4, r5, r6, pc}
   d73bc:	2003dec4 	.word	0x2003dec4
   d73c0:	2003decc 	.word	0x2003decc
   d73c4:	000e73ae 	.word	0x000e73ae
   d73c8:	2003da48 	.word	0x2003da48
   d73cc:	000e73c8 	.word	0x000e73c8
   d73d0:	000e73db 	.word	0x000e73db
   d73d4:	2003da80 	.word	0x2003da80
   d73d8:	000e73ec 	.word	0x000e73ec
   d73dc:	2003e234 	.word	0x2003e234
   d73e0:	2003d7f8 	.word	0x2003d7f8
   d73e4:	2003d570 	.word	0x2003d570

000d73e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:

    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d73e8:	b570      	push	{r4, r5, r6, lr}
   d73ea:	4604      	mov	r4, r0
   d73ec:	6800      	ldr	r0, [r0, #0]
   d73ee:	460e      	mov	r6, r1
   d73f0:	f005 fbee 	bl	dcbd0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        state = CONNECTING;
   d73f4:	2300      	movs	r3, #0
   d73f6:	7763      	strb	r3, [r4, #29]
        millis_time_t started = BlynkMillis();
   d73f8:	f003 f868 	bl	da4cc <_Z11BlynkMillisv>
   d73fc:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d73fe:	7f63      	ldrb	r3, [r4, #29]
   d7400:	2b01      	cmp	r3, #1
   d7402:	d009      	beq.n	d7418 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
   d7404:	f003 f862 	bl	da4cc <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d7408:	1b40      	subs	r0, r0, r5
   d740a:	42b0      	cmp	r0, r6
   d740c:	d204      	bcs.n	d7418 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
        {
            run();
   d740e:	2100      	movs	r1, #0
   d7410:	4620      	mov	r0, r4
   d7412:	f7ff f829 	bl	d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d7416:	e7f2      	b.n	d73fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
               (BlynkMillis() - started < timeout))
        {
            run();
        }
        return state == CONNECTED;
   d7418:	7f60      	ldrb	r0, [r4, #29]
    }
   d741a:	1e43      	subs	r3, r0, #1
   d741c:	4258      	negs	r0, r3
   d741e:	4158      	adcs	r0, r3
   d7420:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7424 <_Z7connectv>:
    
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d7424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif
  #if Wiring_WiFi
  bool cellready=WiFi.ready();
   d7426:	4d55      	ldr	r5, [pc, #340]	; (d757c <_Z7connectv+0x158>)
   d7428:	4628      	mov	r0, r5
   d742a:	f7fd ff86 	bl	d533a <_ZN5spark9WiFiClass5readyEv>
  if (!cellready)
   d742e:	4604      	mov	r4, r0
   d7430:	bb30      	cbnz	r0, d7480 <_Z7connectv+0x5c>
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
   d7432:	f005 f839 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7436:	4952      	ldr	r1, [pc, #328]	; (d7580 <_Z7connectv+0x15c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7438:	4e52      	ldr	r6, [pc, #328]	; (d7584 <_Z7connectv+0x160>)
   d743a:	f003 ffc8 	bl	db3ce <_ZN5Print7printlnEPKc>
    WiFi.on();
   d743e:	4628      	mov	r0, r5
   d7440:	f7fd ff80 	bl	d5344 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7444:	4623      	mov	r3, r4
   d7446:	4622      	mov	r2, r4
   d7448:	4621      	mov	r1, r4
   d744a:	6868      	ldr	r0, [r5, #4]
   d744c:	f003 fb3e 	bl	daacc <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7450:	4620      	mov	r0, r4
   d7452:	f003 f913 	bl	da67c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7456:	2500      	movs	r5, #0
   d7458:	4604      	mov	r4, r0
   d745a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d745c:	2000      	movs	r0, #0
   d745e:	f003 f90d 	bl	da67c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7462:	1b00      	subs	r0, r0, r4
   d7464:	eb61 0105 	sbc.w	r1, r1, r5
   d7468:	428f      	cmp	r7, r1
   d746a:	bf08      	it	eq
   d746c:	4286      	cmpeq	r6, r0
   d746e:	d35f      	bcc.n	d7530 <_Z7connectv+0x10c>
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d7470:	4842      	ldr	r0, [pc, #264]	; (d757c <_Z7connectv+0x158>)
   d7472:	f7fd ff62 	bl	d533a <_ZN5spark9WiFiClass5readyEv>
   d7476:	2800      	cmp	r0, #0
   d7478:	d15a      	bne.n	d7530 <_Z7connectv+0x10c>
            spark_process();
   d747a:	f003 fb77 	bl	dab6c <spark_process>
   d747e:	e7ed      	b.n	d745c <_Z7connectv+0x38>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("WiFi ready");
   d7480:	f005 f812 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7484:	4940      	ldr	r1, [pc, #256]	; (d7588 <_Z7connectv+0x164>)
   d7486:	f003 ffa2 	bl	db3ce <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d748a:	f003 fb7f 	bl	dab8c <spark_cloud_flag_connected>
  }
  #endif  
//*** Commented out for testing without particle connected ***
  bool partconnected=Particle.connected();
  if (!partconnected)
   d748e:	4604      	mov	r4, r0
   d7490:	b9f8      	cbnz	r0, d74d2 <_Z7connectv+0xae>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d7492:	f005 f809 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7496:	493d      	ldr	r1, [pc, #244]	; (d758c <_Z7connectv+0x168>)
   d7498:	f003 ff99 	bl	db3ce <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d749c:	f003 fb6e 	bl	dab7c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d74a0:	4620      	mov	r0, r4
   d74a2:	f003 f8eb 	bl	da67c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d74a6:	2500      	movs	r5, #0
   d74a8:	4604      	mov	r4, r0
   d74aa:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d74ae:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d74b0:	2000      	movs	r0, #0
   d74b2:	f003 f8e3 	bl	da67c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d74b6:	1b00      	subs	r0, r0, r4
   d74b8:	eb61 0105 	sbc.w	r1, r1, r5
   d74bc:	428f      	cmp	r7, r1
   d74be:	bf08      	it	eq
   d74c0:	4286      	cmpeq	r6, r0
   d74c2:	d348      	bcc.n	d7556 <_Z7connectv+0x132>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d74c4:	f003 fb62 	bl	dab8c <spark_cloud_flag_connected>
   d74c8:	2800      	cmp	r0, #0
   d74ca:	d144      	bne.n	d7556 <_Z7connectv+0x132>
            spark_process();
   d74cc:	f003 fb4e 	bl	dab6c <spark_process>
   d74d0:	e7ee      	b.n	d74b0 <_Z7connectv+0x8c>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d74d2:	f004 ffe9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d74d6:	492e      	ldr	r1, [pc, #184]	; (d7590 <_Z7connectv+0x16c>)
   d74d8:	f003 ff79 	bl	db3ce <_ZN5Print7printlnEPKc>
   d74dc:	4c2d      	ldr	r4, [pc, #180]	; (d7594 <_Z7connectv+0x170>)
  }
//*** Commented out for testing without particle connected ***
  bool blynkconnected=Blynk.connected();
  if (!blynkconnected)
   d74de:	7f63      	ldrb	r3, [r4, #29]
   d74e0:	2b01      	cmp	r3, #1
   d74e2:	d01e      	beq.n	d7522 <_Z7connectv+0xfe>
  {
    DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d74e4:	f004 ffe0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d74e8:	492b      	ldr	r1, [pc, #172]	; (d7598 <_Z7connectv+0x174>)
   d74ea:	f003 ff70 	bl	db3ce <_ZN5Print7printlnEPKc>
    #ifdef Version_2
    Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d74ee:	4b2b      	ldr	r3, [pc, #172]	; (d759c <_Z7connectv+0x178>)
   d74f0:	492b      	ldr	r1, [pc, #172]	; (d75a0 <_Z7connectv+0x17c>)
   d74f2:	881b      	ldrh	r3, [r3, #0]
   d74f4:	4a2b      	ldr	r2, [pc, #172]	; (d75a4 <_Z7connectv+0x180>)
   d74f6:	4620      	mov	r0, r4
   d74f8:	f7fe fb0e 	bl	d5b18 <_ZN13BlynkParticle6configEPKcS1_t>
    #else
    Blynk.config(auth, "zeptosense.blynk.cc");
    #endif
    if (!Blynk.connect())
   d74fc:	f242 3128 	movw	r1, #9000	; 0x2328
   d7500:	4620      	mov	r0, r4
   d7502:	f7ff ff71 	bl	d73e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d7506:	2800      	cmp	r0, #0
   d7508:	d136      	bne.n	d7578 <_Z7connectv+0x154>
    {
      DEBUG_PRINTLN("Blynk not connected");
   d750a:	f004 ffcd 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d750e:	4926      	ldr	r1, [pc, #152]	; (d75a8 <_Z7connectv+0x184>)
   d7510:	f003 ff5d 	bl	db3ce <_ZN5Print7printlnEPKc>
      delay(200);
   d7514:	20c8      	movs	r0, #200	; 0xc8
   d7516:	f004 fa3d 	bl	db994 <delay>
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
  }
}
   d751a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!Blynk.connect())
    {
      DEBUG_PRINTLN("Blynk not connected");
      delay(200);
      // timerSleep(3);
      System.reset();      
   d751e:	f003 bc97 	b.w	dae50 <_ZN11SystemClass5resetEv>
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d7522:	f004 ffc1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7526:	4921      	ldr	r1, [pc, #132]	; (d75ac <_Z7connectv+0x188>)
  }
}
   d7528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();      
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d752c:	f003 bf4f 	b.w	db3ce <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d7530:	4812      	ldr	r0, [pc, #72]	; (d757c <_Z7connectv+0x158>)
   d7532:	f7fd ff02 	bl	d533a <_ZN5spark9WiFiClass5readyEv>
    if (!WiFi.ready())
   d7536:	4811      	ldr	r0, [pc, #68]	; (d757c <_Z7connectv+0x158>)
   d7538:	f7fd feff 	bl	d533a <_ZN5spark9WiFiClass5readyEv>
   d753c:	2800      	cmp	r0, #0
   d753e:	d1a4      	bne.n	d748a <_Z7connectv+0x66>
    {
    DEBUG_PRINTLN("WiFi not ready");
   d7540:	f004 ffb2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7544:	491a      	ldr	r1, [pc, #104]	; (d75b0 <_Z7connectv+0x18c>)
   d7546:	f003 ff42 	bl	db3ce <_ZN5Print7printlnEPKc>
    delay(200);
   d754a:	20c8      	movs	r0, #200	; 0xc8
   d754c:	f004 fa22 	bl	db994 <delay>
    // timerSleep(3);
    System.reset();
   d7550:	f003 fc7e 	bl	dae50 <_ZN11SystemClass5resetEv>
   d7554:	e799      	b.n	d748a <_Z7connectv+0x66>
   d7556:	f003 fb19 	bl	dab8c <spark_cloud_flag_connected>
   d755a:	f003 fb17 	bl	dab8c <spark_cloud_flag_connected>
  if (!partconnected)
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d755e:	2800      	cmp	r0, #0
   d7560:	d1bc      	bne.n	d74dc <_Z7connectv+0xb8>
    {
      DEBUG_PRINTLN("Particle not connected");
   d7562:	f004 ffa1 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7566:	4913      	ldr	r1, [pc, #76]	; (d75b4 <_Z7connectv+0x190>)
   d7568:	f003 ff31 	bl	db3ce <_ZN5Print7printlnEPKc>
      delay(200);
   d756c:	20c8      	movs	r0, #200	; 0xc8
   d756e:	f004 fa11 	bl	db994 <delay>
      // timerSleep(3);
      System.reset();
   d7572:	f003 fc6d 	bl	dae50 <_ZN11SystemClass5resetEv>
   d7576:	e7b1      	b.n	d74dc <_Z7connectv+0xb8>
   d7578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d757a:	bf00      	nop
   d757c:	2003e5e8 	.word	0x2003e5e8
   d7580:	000e73f9 	.word	0x000e73f9
   d7584:	0002bf1f 	.word	0x0002bf1f
   d7588:	000e7417 	.word	0x000e7417
   d758c:	000e7422 	.word	0x000e7422
   d7590:	000e745e 	.word	0x000e745e
   d7594:	2003e234 	.word	0x2003e234
   d7598:	000e7471 	.word	0x000e7471
   d759c:	2003d574 	.word	0x2003d574
   d75a0:	2003d580 	.word	0x2003d580
   d75a4:	000e7493 	.word	0x000e7493
   d75a8:	000e6e7c 	.word	0x000e6e7c
   d75ac:	000e74a8 	.word	0x000e74a8
   d75b0:	000e6e6d 	.word	0x000e6e6d
   d75b4:	000e7447 	.word	0x000e7447

000d75b8 <_Z21connectWithoutWaitingv>:
    DEBUG_PRINTLN("Blynk connected");
  }
}

void connectWithoutWaiting()
{
   d75b8:	b570      	push	{r4, r5, r6, lr}
      Cellular.connect();
    }
  }
  #endif
  #if Wiring_WiFi
  bool wifiready=WiFi.ready();
   d75ba:	4c2e      	ldr	r4, [pc, #184]	; (d7674 <_Z21connectWithoutWaitingv+0xbc>)
   d75bc:	4620      	mov	r0, r4
   d75be:	f7fd febc 	bl	d533a <_ZN5spark9WiFiClass5readyEv>
  if (!wifiready)
   d75c2:	4605      	mov	r5, r0
   d75c4:	b9e0      	cbnz	r0, d7600 <_Z21connectWithoutWaitingv+0x48>
  {
    DEBUG_PRINTLN("WiFi not ready");
   d75c6:	f004 ff6f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d75ca:	492b      	ldr	r1, [pc, #172]	; (d7678 <_Z21connectWithoutWaitingv+0xc0>)
   d75cc:	f003 feff 	bl	db3ce <_ZN5Print7printlnEPKc>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d75d0:	462a      	mov	r2, r5
   d75d2:	4629      	mov	r1, r5
   d75d4:	6860      	ldr	r0, [r4, #4]
   d75d6:	f003 fa81 	bl	daadc <network_connecting>
    if (!WiFi.connecting())
   d75da:	4605      	mov	r5, r0
   d75dc:	2800      	cmp	r0, #0
   d75de:	d148      	bne.n	d7672 <_Z21connectWithoutWaitingv+0xba>
    {
      DEBUG_PRINTLN("Attempting to connect WiFi...");
   d75e0:	f004 ff62 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d75e4:	4925      	ldr	r1, [pc, #148]	; (d767c <_Z21connectWithoutWaitingv+0xc4>)
   d75e6:	f003 fef2 	bl	db3ce <_ZN5Print7printlnEPKc>
      WiFi.on();
   d75ea:	4620      	mov	r0, r4
   d75ec:	f7fd feaa 	bl	d5344 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d75f0:	462b      	mov	r3, r5
   d75f2:	462a      	mov	r2, r5
   d75f4:	4629      	mov	r1, r5
   d75f6:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d75f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d75fc:	f003 ba66 	b.w	daacc <network_connect>
   d7600:	4c1f      	ldr	r4, [pc, #124]	; (d7680 <_Z21connectWithoutWaitingv+0xc8>)
  {
    #if Wiring_Cellular
    DEBUG_PRINTLN("Cellular ready");
    #endif
    #if Wiring_WiFi
    DEBUG_PRINTLN("WiFi ready");
   d7602:	f004 ff51 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7606:	491f      	ldr	r1, [pc, #124]	; (d7684 <_Z21connectWithoutWaitingv+0xcc>)
   d7608:	f003 fee1 	bl	db3ce <_ZN5Print7printlnEPKc>
    #endif    
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d760c:	7f63      	ldrb	r3, [r4, #29]
   d760e:	2b01      	cmp	r3, #1
   d7610:	d012      	beq.n	d7638 <_Z21connectWithoutWaitingv+0x80>
    {
      DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d7612:	f004 ff49 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7616:	491c      	ldr	r1, [pc, #112]	; (d7688 <_Z21connectWithoutWaitingv+0xd0>)
   d7618:	f003 fed9 	bl	db3ce <_ZN5Print7printlnEPKc>

      Blynk.run();
   d761c:	2100      	movs	r1, #0
   d761e:	4620      	mov	r0, r4
   d7620:	f7fe ff22 	bl	d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
      if (!Blynk.connect())
   d7624:	f242 3128 	movw	r1, #9000	; 0x2328
   d7628:	4620      	mov	r0, r4
   d762a:	f7ff fedd 	bl	d73e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d762e:	b940      	cbnz	r0, d7642 <_Z21connectWithoutWaitingv+0x8a>
      {
        DEBUG_PRINTLN("Blynk not connected");
   d7630:	f004 ff3a 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7634:	4915      	ldr	r1, [pc, #84]	; (d768c <_Z21connectWithoutWaitingv+0xd4>)
   d7636:	e002      	b.n	d763e <_Z21connectWithoutWaitingv+0x86>
      }
    }
    else
    {
      DEBUG_PRINTLN("Blynk connected");
   d7638:	f004 ff36 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d763c:	4914      	ldr	r1, [pc, #80]	; (d7690 <_Z21connectWithoutWaitingv+0xd8>)
   d763e:	f003 fec6 	bl	db3ce <_ZN5Print7printlnEPKc>
   d7642:	f003 faa3 	bl	dab8c <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***
    bool partconnected=Particle.connected();
    if (!partconnected)
   d7646:	b968      	cbnz	r0, d7664 <_Z21connectWithoutWaitingv+0xac>
    {
      DEBUG_PRINTLN("Attempting to connect to Particle...");
   d7648:	f004 ff2e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d764c:	4911      	ldr	r1, [pc, #68]	; (d7694 <_Z21connectWithoutWaitingv+0xdc>)
   d764e:	f003 febe 	bl	db3ce <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7652:	f003 fa93 	bl	dab7c <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7656:	f003 fa99 	bl	dab8c <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d765a:	b950      	cbnz	r0, d7672 <_Z21connectWithoutWaitingv+0xba>
      {
        DEBUG_PRINTLN("Particle not connected");
   d765c:	f004 ff24 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7660:	490d      	ldr	r1, [pc, #52]	; (d7698 <_Z21connectWithoutWaitingv+0xe0>)
   d7662:	e002      	b.n	d766a <_Z21connectWithoutWaitingv+0xb2>
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d7664:	f004 ff20 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7668:	490c      	ldr	r1, [pc, #48]	; (d769c <_Z21connectWithoutWaitingv+0xe4>)
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d766a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DEBUG_PRINTLN("Particle not connected");
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d766e:	f003 beae 	b.w	db3ce <_ZN5Print7printlnEPKc>
   d7672:	bd70      	pop	{r4, r5, r6, pc}
   d7674:	2003e5e8 	.word	0x2003e5e8
   d7678:	000e6e6d 	.word	0x000e6e6d
   d767c:	000e73f9 	.word	0x000e73f9
   d7680:	2003e234 	.word	0x2003e234
   d7684:	000e7417 	.word	0x000e7417
   d7688:	000e7471 	.word	0x000e7471
   d768c:	000e6e7c 	.word	0x000e6e7c
   d7690:	000e74a8 	.word	0x000e74a8
   d7694:	000e7422 	.word	0x000e7422
   d7698:	000e7447 	.word	0x000e7447
   d769c:	000e745e 	.word	0x000e745e

000d76a0 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d76a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76a4:	ed2d 8b02 	vpush	{d8}
   d76a8:	b0a5      	sub	sp, #148	; 0x94
  DEBUG_PRINTLN("start readSensors");
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
  DEBUG_PRINTLN(state.buzzerTamper);
   d76aa:	4ca5      	ldr	r4, [pc, #660]	; (d7940 <_Z11readSensorsv+0x2a0>)

///////////////////////

void readSensors()
{
  DEBUG_PRINTLN("start readSensors");
   d76ac:	f004 fefc 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76b0:	49a4      	ldr	r1, [pc, #656]	; (d7944 <_Z11readSensorsv+0x2a4>)
   d76b2:	f003 fe8c 	bl	db3ce <_ZN5Print7printlnEPKc>
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
   d76b6:	f004 fef7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76ba:	49a3      	ldr	r1, [pc, #652]	; (d7948 <_Z11readSensorsv+0x2a8>)
   d76bc:	f003 fe74 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerTamper);
   d76c0:	f004 fef2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76c4:	220a      	movs	r2, #10
   d76c6:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d76ca:	f7fe f8a2 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  DEBUG_PRINT("Buzzer Vapor ");
   d76ce:	f004 feeb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76d2:	499e      	ldr	r1, [pc, #632]	; (d794c <_Z11readSensorsv+0x2ac>)
   d76d4:	f003 fe68 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerVapor);
   d76d8:	f004 fee6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76dc:	220a      	movs	r2, #10
   d76de:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d76e2:	f7fe f896 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  DEBUG_PRINT("Notify Vapor ");
   d76e6:	f004 fedf 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76ea:	4999      	ldr	r1, [pc, #612]	; (d7950 <_Z11readSensorsv+0x2b0>)
   d76ec:	f003 fe5c 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyVapor);
   d76f0:	f004 feda 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d76f4:	220a      	movs	r2, #10
   d76f6:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d76fa:	f7fe f88a 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  DEBUG_PRINT("Notify Tamper ");
   d76fe:	f004 fed3 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7702:	4994      	ldr	r1, [pc, #592]	; (d7954 <_Z11readSensorsv+0x2b4>)
   d7704:	f003 fe50 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyTamper);
   d7708:	f004 fece 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d770c:	220a      	movs	r2, #10
   d770e:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d7712:	f7fe f87e 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  DEBUG_PRINT("Notify Battery ");
   d7716:	f004 fec7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d771a:	498f      	ldr	r1, [pc, #572]	; (d7958 <_Z11readSensorsv+0x2b8>)
   d771c:	f003 fe44 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyBattery);
   d7720:	f004 fec2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7724:	220a      	movs	r2, #10
   d7726:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d772a:	f7fe f872 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  DEBUG_PRINT("Activity Threshold ");
   d772e:	f004 febb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7732:	498a      	ldr	r1, [pc, #552]	; (d795c <_Z11readSensorsv+0x2bc>)
   d7734:	f003 fe38 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.ActivityThreshold);
   d7738:	f004 feb6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d773c:	220a      	movs	r2, #10
   d773e:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d7742:	f7fe fa2c 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
  DEBUG_PRINT("Device Zone ");
   d7746:	f004 feaf 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d774a:	4985      	ldr	r1, [pc, #532]	; (d7960 <_Z11readSensorsv+0x2c0>)
   d774c:	f003 fe2c 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d7750:	f004 feaa 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7754:	220a      	movs	r2, #10
   d7756:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d775a:	f7fe fa20 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
#endif 
  // Woke up out of a sleep - setup the HW
  if (state.bInSleepMode){
   d775e:	f894 3425 	ldrb.w	r3, [r4, #1061]	; 0x425
   d7762:	4625      	mov	r5, r4
   d7764:	2b00      	cmp	r3, #0
   d7766:	f000 81f8 	beq.w	d7b5a <_Z11readSensorsv+0x4ba>
    
    Wire.setSpeed(20000);
   d776a:	f005 fd6b 	bl	dd244 <_Z19__fetch_global_Wirev>
   d776e:	f644 6120 	movw	r1, #20000	; 0x4e20
   d7772:	f004 ff11 	bl	dc598 <_ZN7TwoWire8setSpeedEm>
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
   d7776:	2103      	movs	r1, #3
   d7778:	2008      	movs	r0, #8
   d777a:	f005 fcaf 	bl	dd0dc <pinMode>
    Serial.begin(115200);
   d777e:	f004 fde1 	bl	dc344 <_Z16_fetch_usbserialv>
   d7782:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7786:	f004 fdd1 	bl	dc32c <_ZN9USBSerial5beginEl>
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
    delay(100);

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d778a:	4c76      	ldr	r4, [pc, #472]	; (d7964 <_Z11readSensorsv+0x2c4>)
    Wire.setSpeed(20000);
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
    Serial.begin(115200);
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
   d778c:	f004 fe8c 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7790:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7794:	f004 fe82 	bl	dc49c <_ZN11USARTSerial5beginEm>
    delay(100);
   d7798:	2064      	movs	r0, #100	; 0x64
   d779a:	f004 f8fb 	bl	db994 <delay>

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d779e:	2101      	movs	r1, #1
   d77a0:	8820      	ldrh	r0, [r4, #0]
   d77a2:	f005 fc9b 	bl	dd0dc <pinMode>
    digitalWrite(buzzer, LOW);
   d77a6:	2100      	movs	r1, #0
   d77a8:	8820      	ldrh	r0, [r4, #0]
   d77aa:	f005 fca8 	bl	dd0fe <digitalWrite>

    Wire.begin();
   d77ae:	f005 fd49 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77b2:	f004 fef5 	bl	dc5a0 <_ZN7TwoWire5beginEv>
    delay(100);
   d77b6:	2064      	movs	r0, #100	; 0x64
   d77b8:	f004 f8ec 	bl	db994 <delay>
    DEBUG_PRINTLN("Start Setup section after a sleep");
   d77bc:	f004 fe74 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d77c0:	4969      	ldr	r1, [pc, #420]	; (d7968 <_Z11readSensorsv+0x2c8>)
   d77c2:	f003 fe04 	bl	db3ce <_ZN5Print7printlnEPKc>
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    byte expandererror, expanderaddress;

    expanderaddress = 0x20; // MCP23017 address
    Wire.beginTransmission(expanderaddress);
   d77c6:	f005 fd3d 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77ca:	2120      	movs	r1, #32
   d77cc:	f004 ff23 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d77d0:	f005 fd38 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77d4:	f004 ff2a 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!expandererror==0)
   d77d8:	2800      	cmp	r0, #0
   d77da:	d041      	beq.n	d7860 <_Z11readSensorsv+0x1c0>
    {
      Wire.reset();
   d77dc:	f005 fd32 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77e0:	f004 ff2b 	bl	dc63a <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(expanderaddress);
   d77e4:	f005 fd2e 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77e8:	2120      	movs	r1, #32
   d77ea:	f004 ff14 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
      expandererror = Wire.endTransmission();
   d77ee:	f005 fd29 	bl	dd244 <_Z19__fetch_global_Wirev>
   d77f2:	f004 ff1b 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
    }

    // Blink LED and reset if there is an error
    if (!expandererror == 0)
   d77f6:	b398      	cbz	r0, d7860 <_Z11readSensorsv+0x1c0>
    {
      DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d77f8:	f004 fe56 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d77fc:	495b      	ldr	r1, [pc, #364]	; (d796c <_Z11readSensorsv+0x2cc>)
   d77fe:	f003 fde6 	bl	db3ce <_ZN5Print7printlnEPKc>
   d7802:	4b5b      	ldr	r3, [pc, #364]	; (d7970 <_Z11readSensorsv+0x2d0>)
      Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d7804:	4a59      	ldr	r2, [pc, #356]	; (d796c <_Z11readSensorsv+0x2cc>)
   d7806:	781b      	ldrb	r3, [r3, #0]
   d7808:	495a      	ldr	r1, [pc, #360]	; (d7974 <_Z11readSensorsv+0x2d4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d780a:	2400      	movs	r4, #0
   d780c:	a81b      	add	r0, sp, #108	; 0x6c
   d780e:	f88d 4000 	strb.w	r4, [sp]
   d7812:	f7fd fd85 	bl	d5320 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.39>
   d7816:	a81c      	add	r0, sp, #112	; 0x70
   d7818:	f7fd ffc8 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      blinkRed.setActive(true);
   d781c:	2101      	movs	r1, #1
   d781e:	4856      	ldr	r0, [pc, #344]	; (d7978 <_Z11readSensorsv+0x2d8>)
   d7820:	f7fd fde2 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7824:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7828:	f004 f8b4 	bl	db994 <delay>
      blinkRed.setActive(false);
   d782c:	4621      	mov	r1, r4
   d782e:	4852      	ldr	r0, [pc, #328]	; (d7978 <_Z11readSensorsv+0x2d8>)
   d7830:	f7fd fdda 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
      blinkYellow.setActive(true);
   d7834:	2101      	movs	r1, #1
   d7836:	4851      	ldr	r0, [pc, #324]	; (d797c <_Z11readSensorsv+0x2dc>)
   d7838:	f7fd fdd6 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d783c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7840:	f004 f8a8 	bl	db994 <delay>
      blinkYellow.setActive(false);
   d7844:	4621      	mov	r1, r4
   d7846:	484d      	ldr	r0, [pc, #308]	; (d797c <_Z11readSensorsv+0x2dc>)
   d7848:	f7fd fdce 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
      blinkRed.setActive(true);
   d784c:	2101      	movs	r1, #1
   d784e:	484a      	ldr	r0, [pc, #296]	; (d7978 <_Z11readSensorsv+0x2d8>)
   d7850:	f7fd fdca 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7854:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7858:	f004 f89c 	bl	db994 <delay>
      System.reset();
   d785c:	f003 faf8 	bl	dae50 <_ZN11SystemClass5resetEv>
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7860:	4847      	ldr	r0, [pc, #284]	; (d7980 <_Z11readSensorsv+0x2e0>)
   d7862:	f8df 8134 	ldr.w	r8, [pc, #308]	; d7998 <_Z11readSensorsv+0x2f8>

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d7866:	4f47      	ldr	r7, [pc, #284]	; (d7984 <_Z11readSensorsv+0x2e4>)
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7868:	f002 f83c 	bl	d98e4 <_ZN12IoTNodePower5beginEv>
    power.setPowerON(EXT3V3,true);
   d786c:	2201      	movs	r2, #1
   d786e:	2102      	movs	r1, #2
   d7870:	4843      	ldr	r0, [pc, #268]	; (d7980 <_Z11readSensorsv+0x2e0>)
   d7872:	f002 f8e1 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    power.setPowerON(EXT5V,true);
   d7876:	2201      	movs	r2, #1
   d7878:	2103      	movs	r1, #3
   d787a:	4841      	ldr	r0, [pc, #260]	; (d7980 <_Z11readSensorsv+0x2e0>)
   d787c:	f002 f8dc 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    // Allow time to settle
    delay(100);
   d7880:	2064      	movs	r0, #100	; 0x64
   d7882:	f004 f887 	bl	db994 <delay>

    uint32_t d1=0;
   d7886:	aa24      	add	r2, sp, #144	; 0x90
   d7888:	2400      	movs	r4, #0
   d788a:	f842 4d34 	str.w	r4, [r2, #-52]!
    fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d788e:	2304      	movs	r3, #4
   d7890:	4621      	mov	r1, r4
   d7892:	483d      	ldr	r0, [pc, #244]	; (d7988 <_Z11readSensorsv+0x2e8>)
   d7894:	f001 ff8a 	bl	d97ac <_ZN10MB85RC256V8readDataEjPhj>
    Serial1.printlnf("d1=%u", d1);
   d7898:	f004 fe06 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d789c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d789e:	4a3b      	ldr	r2, [pc, #236]	; (d798c <_Z11readSensorsv+0x2ec>)
   d78a0:	2101      	movs	r1, #1
   d78a2:	f003 fea6 	bl	db5f2 <_ZN5Print11printf_implEbPKcz>

    DEBUG_PRINTLN("Checking i2c devices...");
   d78a6:	f004 fdff 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d78aa:	4939      	ldr	r1, [pc, #228]	; (d7990 <_Z11readSensorsv+0x2f0>)
   d78ac:	f003 fd8f 	bl	db3ce <_ZN5Print7printlnEPKc>

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d78b0:	4b34      	ldr	r3, [pc, #208]	; (d7984 <_Z11readSensorsv+0x2e4>)
   d78b2:	4938      	ldr	r1, [pc, #224]	; (d7994 <_Z11readSensorsv+0x2f4>)
   d78b4:	4838      	ldr	r0, [pc, #224]	; (d7998 <_Z11readSensorsv+0x2f8>)
   d78b6:	2207      	movs	r2, #7
   d78b8:	f7fd fe0a 	bl	d54d0 <_Z15checkI2CDevicesP6StringPhjPb>
   d78bc:	4606      	mov	r6, r0

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
   d78be:	f004 fdf3 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d78c2:	0123      	lsls	r3, r4, #4
   d78c4:	f853 1008 	ldr.w	r1, [r3, r8]
   d78c8:	f003 fd6e 	bl	db3a8 <_ZN5Print5printEPKc>
      DEBUG_PRINT(": ");
   d78cc:	f004 fdec 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d78d0:	4932      	ldr	r1, [pc, #200]	; (d799c <_Z11readSensorsv+0x2fc>)
   d78d2:	f003 fd69 	bl	db3a8 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(i2cExists[x]);
   d78d6:	f004 fde7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d78da:	5d39      	ldrb	r1, [r7, r4]
   d78dc:	220a      	movs	r2, #10

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d78de:	3401      	adds	r4, #1
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d78e0:	f7fd ff97 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d78e4:	2c07      	cmp	r4, #7
   d78e6:	d1ea      	bne.n	d78be <_Z11readSensorsv+0x21e>
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
    }
    if (!i2cOK)
   d78e8:	2e00      	cmp	r6, #0
   d78ea:	d15f      	bne.n	d79ac <_Z11readSensorsv+0x30c>
    {
      StateString = "ERR";
   d78ec:	492c      	ldr	r1, [pc, #176]	; (d79a0 <_Z11readSensorsv+0x300>)
   d78ee:	482d      	ldr	r0, [pc, #180]	; (d79a4 <_Z11readSensorsv+0x304>)
   d78f0:	f003 fc31 	bl	db156 <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C Issue");
   d78f4:	f004 fdd8 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d78f8:	492b      	ldr	r1, [pc, #172]	; (d79a8 <_Z11readSensorsv+0x308>)
   d78fa:	f003 fd68 	bl	db3ce <_ZN5Print7printlnEPKc>
      RGB.control(true);
   d78fe:	2001      	movs	r0, #1
   d7900:	f004 f885 	bl	dba0e <_ZN8RGBClass7controlEb>
      // the following sets the RGB LED to red
      RGB.color(255, 0, 0);
   d7904:	4632      	mov	r2, r6
   d7906:	4631      	mov	r1, r6
   d7908:	20ff      	movs	r0, #255	; 0xff
   d790a:	f004 f890 	bl	dba2e <_ZN8RGBClass5colorEiii>
      delay(3000);
   d790e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7912:	f004 f83f 	bl	db994 <delay>
      // resume normal operation
      RGB.control(false);    
   d7916:	4630      	mov	r0, r6
   d7918:	f004 f879 	bl	dba0e <_ZN8RGBClass7controlEb>
      digitalWrite(buzzer, HIGH);
      delay(100);
      digitalWrite(buzzer, LOW);
  #endif
      //Generate 9 pulses on SCL to tell slave to release the bus 
      Wire.reset();     
   d791c:	f005 fc92 	bl	dd244 <_Z19__fetch_global_Wirev>
   d7920:	f004 fe8b 	bl	dc63a <_ZN7TwoWire5resetEv>
      if (!Wire.isEnabled()) {
   d7924:	f005 fc8e 	bl	dd244 <_Z19__fetch_global_Wirev>
   d7928:	f004 fe83 	bl	dc632 <_ZN7TwoWire9isEnabledEv>
   d792c:	b918      	cbnz	r0, d7936 <_Z11readSensorsv+0x296>
        Wire.begin();
   d792e:	f005 fc89 	bl	dd244 <_Z19__fetch_global_Wirev>
   d7932:	f004 fe35 	bl	dc5a0 <_ZN7TwoWire5beginEv>
      }
      Wire.end();
   d7936:	f005 fc85 	bl	dd244 <_Z19__fetch_global_Wirev>
   d793a:	f004 fe37 	bl	dc5ac <_ZN7TwoWire3endEv>
   d793e:	e03e      	b.n	d79be <_Z11readSensorsv+0x31e>
   d7940:	2003da80 	.word	0x2003da80
   d7944:	000e74b8 	.word	0x000e74b8
   d7948:	000e74ca 	.word	0x000e74ca
   d794c:	000e74eb 	.word	0x000e74eb
   d7950:	000e74f9 	.word	0x000e74f9
   d7954:	000e7507 	.word	0x000e7507
   d7958:	000e7516 	.word	0x000e7516
   d795c:	000e7526 	.word	0x000e7526
   d7960:	000e753a 	.word	0x000e753a
   d7964:	2003d570 	.word	0x2003d570
   d7968:	000e7547 	.word	0x000e7547
   d796c:	000e7569 	.word	0x000e7569
   d7970:	2003d714 	.word	0x2003d714
   d7974:	000e759a 	.word	0x000e759a
   d7978:	2003d6c8 	.word	0x2003d6c8
   d797c:	2003d6f4 	.word	0x2003d6f4
   d7980:	2003deac 	.word	0x2003deac
   d7984:	2003df10 	.word	0x2003df10
   d7988:	2003d6e8 	.word	0x2003d6e8
   d798c:	000e75a0 	.word	0x000e75a0
   d7990:	000e75a6 	.word	0x000e75a6
   d7994:	2003d5a8 	.word	0x2003d5a8
   d7998:	2003d718 	.word	0x2003d718
   d799c:	000e803c 	.word	0x000e803c
   d79a0:	000e75be 	.word	0x000e75be
   d79a4:	2003d7d8 	.word	0x2003d7d8
   d79a8:	000e75c2 	.word	0x000e75c2
    }
    else
    {
      StateString = "RDY";
   d79ac:	49b6      	ldr	r1, [pc, #728]	; (d7c88 <_Z11readSensorsv+0x5e8>)
   d79ae:	48b7      	ldr	r0, [pc, #732]	; (d7c8c <_Z11readSensorsv+0x5ec>)
   d79b0:	f003 fbd1 	bl	db156 <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C OK");
   d79b4:	f004 fd78 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d79b8:	49b5      	ldr	r1, [pc, #724]	; (d7c90 <_Z11readSensorsv+0x5f0>)
   d79ba:	f003 fd08 	bl	db3ce <_ZN5Print7printlnEPKc>
      digitalWrite(buzzer, HIGH);
      delay(5);
      digitalWrite(buzzer, LOW);
      #endif
    }
    delay(200);
   d79be:	20c8      	movs	r0, #200	; 0xc8
   d79c0:	f003 ffe8 	bl	db994 <delay>
    if (!i2cOK)
   d79c4:	b90e      	cbnz	r6, d79ca <_Z11readSensorsv+0x32a>
    {
      System.reset();
   d79c6:	f003 fa43 	bl	dae50 <_ZN11SystemClass5resetEv>
    }

    long int clockTime = rtc.rtcNow();
   d79ca:	48b2      	ldr	r0, [pc, #712]	; (d7c94 <_Z11readSensorsv+0x5f4>)
    DEBUG_PRINTLN("Before");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d79cc:	4eb2      	ldr	r6, [pc, #712]	; (d7c98 <_Z11readSensorsv+0x5f8>)
    if (!i2cOK)
    {
      System.reset();
    }

    long int clockTime = rtc.rtcNow();
   d79ce:	f001 fea8 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d79d2:	4604      	mov	r4, r0
    DEBUG_PRINTLN("Before");
   d79d4:	f004 fd68 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d79d8:	49b0      	ldr	r1, [pc, #704]	; (d7c9c <_Z11readSensorsv+0x5fc>)
   d79da:	f003 fcf8 	bl	db3ce <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d79de:	f004 fd63 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d79e2:	220a      	movs	r2, #10
   d79e4:	4621      	mov	r1, r4
   d79e6:	f7fe f8bb 	bl	d5b60 <_ZN5Print5printIiLi0EEEjT_i>
    DEBUG_PRINTLN(": ");
   d79ea:	f004 fd5d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d79ee:	49ac      	ldr	r1, [pc, #688]	; (d7ca0 <_Z11readSensorsv+0x600>)
   d79f0:	f003 fced 	bl	db3ce <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d79f4:	f004 fd58 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d79f8:	6833      	ldr	r3, [r6, #0]
   d79fa:	49aa      	ldr	r1, [pc, #680]	; (d7ca4 <_Z11readSensorsv+0x604>)
   d79fc:	4622      	mov	r2, r4
   d79fe:	4607      	mov	r7, r0
   d7a00:	a81b      	add	r0, sp, #108	; 0x6c
   d7a02:	f003 ff63 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d7a06:	991b      	ldr	r1, [sp, #108]	; 0x6c
   d7a08:	4638      	mov	r0, r7
   d7a0a:	f003 fce0 	bl	db3ce <_ZN5Print7printlnEPKc>
   d7a0e:	a81b      	add	r0, sp, #108	; 0x6c
   d7a10:	f003 fb08 	bl	db024 <_ZN6StringD1Ev>
    if (clockTime<946684800||clockTime>4102444799)
   d7a14:	4ba4      	ldr	r3, [pc, #656]	; (d7ca8 <_Z11readSensorsv+0x608>)
   d7a16:	429c      	cmp	r4, r3
   d7a18:	dc27      	bgt.n	d7a6a <_Z11readSensorsv+0x3ca>
    {
      // 2019-01-01T00:00:00+00:00 in ISO 8601
      // Actual time is not important for rtc reset but needs to be a positive unix time
      rtc.setUnixTime(1262304000);
   d7a1a:	49a4      	ldr	r1, [pc, #656]	; (d7cac <_Z11readSensorsv+0x60c>)
   d7a1c:	489d      	ldr	r0, [pc, #628]	; (d7c94 <_Z11readSensorsv+0x5f4>)
   d7a1e:	f001 fe37 	bl	d9690 <_ZN8MCP7941x11setUnixTimeEm>
      long int clockTime = rtc.rtcNow();
   d7a22:	489c      	ldr	r0, [pc, #624]	; (d7c94 <_Z11readSensorsv+0x5f4>)
   d7a24:	f001 fe7d 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d7a28:	4604      	mov	r4, r0
      DEBUG_PRINTLN("After");
   d7a2a:	f004 fd3d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a2e:	49a0      	ldr	r1, [pc, #640]	; (d7cb0 <_Z11readSensorsv+0x610>)
   d7a30:	f003 fccd 	bl	db3ce <_ZN5Print7printlnEPKc>
      DEBUG_PRINT(clockTime);
   d7a34:	f004 fd38 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a38:	220a      	movs	r2, #10
   d7a3a:	4621      	mov	r1, r4
   d7a3c:	f7fe f890 	bl	d5b60 <_ZN5Print5printIiLi0EEEjT_i>
      DEBUG_PRINTLN(": ");
   d7a40:	f004 fd32 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a44:	4996      	ldr	r1, [pc, #600]	; (d7ca0 <_Z11readSensorsv+0x600>)
   d7a46:	f003 fcc2 	bl	db3ce <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7a4a:	f004 fd2d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a4e:	6833      	ldr	r3, [r6, #0]
   d7a50:	4994      	ldr	r1, [pc, #592]	; (d7ca4 <_Z11readSensorsv+0x604>)
   d7a52:	4607      	mov	r7, r0
   d7a54:	4622      	mov	r2, r4
   d7a56:	a81b      	add	r0, sp, #108	; 0x6c
   d7a58:	f003 ff38 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d7a5c:	991b      	ldr	r1, [sp, #108]	; 0x6c
   d7a5e:	4638      	mov	r0, r7
   d7a60:	f003 fcb5 	bl	db3ce <_ZN5Print7printlnEPKc>
   d7a64:	a81b      	add	r0, sp, #108	; 0x6c
   d7a66:	f003 fadd 	bl	db024 <_ZN6StringD1Ev>
    }
    timeSynced=false;
   d7a6a:	4b92      	ldr	r3, [pc, #584]	; (d7cb4 <_Z11readSensorsv+0x614>)
   d7a6c:	2400      	movs	r4, #0
   d7a6e:	701c      	strb	r4, [r3, #0]
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d7a70:	f005 fbe8 	bl	dd244 <_Z19__fetch_global_Wirev>
    Sensor.begin();
   d7a74:	4601      	mov	r1, r0
   d7a76:	4890      	ldr	r0, [pc, #576]	; (d7cb8 <_Z11readSensorsv+0x618>)
   d7a78:	f002 fc50 	bl	da31c <_ZN5SPS305beginER7TwoWire>

    // Load state
    loadState();
   d7a7c:	f7fd fdd4 	bl	d5628 <_Z9loadStatev>
 
   /////////////
  // Setup ADXL345
    DEBUG_PRINT("ADXL345 Setup");
   d7a80:	f004 fd12 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a84:	498d      	ldr	r1, [pc, #564]	; (d7cbc <_Z11readSensorsv+0x61c>)
   d7a86:	f003 fc8f 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN();
   d7a8a:	f004 fd0d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7a8e:	f003 fc92 	bl	db3b6 <_ZN5Print7printlnEv>
    // // *Temp Debug* Set the pin mode to output, so you may control it.
    // pinMode(ledPin, OUTPUT);
    // Power on the ADXL345
    adxl.powerOn();
   d7a92:	488b      	ldr	r0, [pc, #556]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7a94:	f002 f877 	bl	d9b86 <_ZN7ADXL3457powerOnEv>

  // Configure Chip
    adxl.setRangeSetting(4);            // Give the range settings
   d7a98:	2104      	movs	r1, #4
   d7a9a:	4889      	ldr	r0, [pc, #548]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7a9c:	f002 f8be 	bl	d9c1c <_ZN7ADXL34515setRangeSettingEi>
                                        // Accepted values are 2g, 4g, 8g or 16g
                                        // Higher Values = Wider Measurement Range
                                        // Lower Values = Greater Sensitivity

    // No TAP or Freefall detection only Activity
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7aa0:	2301      	movs	r3, #1
   d7aa2:	461a      	mov	r2, r3
   d7aa4:	4619      	mov	r1, r3
   d7aa6:	4886      	ldr	r0, [pc, #536]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7aa8:	f002 f927 	bl	d9cfa <_ZN7ADXL34514setActivityXYZEbbb>
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
   d7aac:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d7ab0:	4883      	ldr	r0, [pc, #524]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7ab2:	f002 f8d3 	bl	d9c5c <_ZN7ADXL34520setActivityThresholdEi>
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7ab6:	2301      	movs	r3, #1
   d7ab8:	461a      	mov	r2, r3
   d7aba:	4619      	mov	r1, r3
   d7abc:	4880      	ldr	r0, [pc, #512]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7abe:	f002 f93b 	bl	d9d38 <_ZN7ADXL34516setInactivityXYZEbbb>
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d7ac2:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d7ac6:	487e      	ldr	r0, [pc, #504]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7ac8:	f002 f8ce 	bl	d9c68 <_ZN7ADXL34522setInactivityThresholdEi>
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d7acc:	2601      	movs	r6, #1
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d7ace:	210a      	movs	r1, #10
   d7ad0:	487b      	ldr	r0, [pc, #492]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7ad2:	f002 f8cf 	bl	d9c74 <_ZN7ADXL34517setTimeInactivityEi>

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d7ad6:	4623      	mov	r3, r4
   d7ad8:	4622      	mov	r2, r4
   d7ada:	4621      	mov	r1, r4
   d7adc:	9601      	str	r6, [sp, #4]
   d7ade:	9600      	str	r6, [sp, #0]
   d7ae0:	4877      	ldr	r0, [pc, #476]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7ae2:	f002 f93e 	bl	d9d62 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
   d7ae6:	4631      	mov	r1, r6
   d7ae8:	4875      	ldr	r0, [pc, #468]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7aea:	f002 f989 	bl	d9e00 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(1);
   d7aee:	4631      	mov	r1, r6

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d7af0:	4e74      	ldr	r6, [pc, #464]	; (d7cc4 <_Z11readSensorsv+0x624>)
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
    adxl.ActivityINT(1);
   d7af2:	4873      	ldr	r0, [pc, #460]	; (d7cc0 <_Z11readSensorsv+0x620>)
   d7af4:	f002 f97e 	bl	d9df4 <_ZN7ADXL34511ActivityINTEb>

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d7af8:	4621      	mov	r1, r4
   d7afa:	8830      	ldrh	r0, [r6, #0]
   d7afc:	f005 faee 	bl	dd0dc <pinMode>
    attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d7b00:	4622      	mov	r2, r4
   d7b02:	f04f 33ff 	mov.w	r3, #4294967295
   d7b06:	4970      	ldr	r1, [pc, #448]	; (d7cc8 <_Z11readSensorsv+0x628>)
   d7b08:	8830      	ldrh	r0, [r6, #0]
   d7b0a:	9400      	str	r4, [sp, #0]
   d7b0c:	f004 fc42 	bl	dc394 <_Z15attachInterrupttPFvvE13InterruptModeah>
 
    delay(300);  
   d7b10:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d7b14:	f003 ff3e 	bl	db994 <delay>
   d7b18:	f002 fd98 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
   d7b1c:	4604      	mov	r4, r0
   d7b1e:	f002 fd95 	bl	da64c <HAL_Timer_Get_Milli_Seconds>

    // SPS30 checks
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
   d7b22:	1b00      	subs	r0, r0, r4
   d7b24:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d7b28:	f0c0 8508 	bcc.w	d853c <_Z11readSensorsv+0xe9c>
   d7b2c:	f000 bd62 	b.w	d85f4 <_Z11readSensorsv+0xf54>
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
        delay(1000);
      }
      else
      {
        DEBUG_PRINTLN("Read SPS30");
   d7b30:	f004 fcba 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7b34:	4965      	ldr	r1, [pc, #404]	; (d7ccc <_Z11readSensorsv+0x62c>)
   d7b36:	f003 fc4a 	bl	db3ce <_ZN5Print7printlnEPKc>
   d7b3a:	f002 fd87 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7b3e:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d7b42:	4604      	mov	r4, r0
   d7b44:	485c      	ldr	r0, [pc, #368]	; (d7cb8 <_Z11readSensorsv+0x618>)
   d7b46:	f002 fa56 	bl	d9ff6 <_ZN5SPS3013dataAvailableEv>
   d7b4a:	2800      	cmp	r0, #0
   d7b4c:	f000 850a 	beq.w	d8564 <_Z11readSensorsv+0xec4>
    {
      delay(100);
      checkAccel();
    }

    readingCount=0;
   d7b50:	4a5f      	ldr	r2, [pc, #380]	; (d7cd0 <_Z11readSensorsv+0x630>)
   d7b52:	2300      	movs	r3, #0
   d7b54:	6013      	str	r3, [r2, #0]
    state.bInSleepMode=false;
   d7b56:	f885 3425 	strb.w	r3, [r5, #1061]	; 0x425
  }
  StateString = "RDY";
   d7b5a:	494b      	ldr	r1, [pc, #300]	; (d7c88 <_Z11readSensorsv+0x5e8>)
   d7b5c:	484b      	ldr	r0, [pc, #300]	; (d7c8c <_Z11readSensorsv+0x5ec>)
   d7b5e:	f003 fafa 	bl	db156 <_ZN6StringaSEPKc>
  connectWithoutWaiting();
   d7b62:	f7ff fd29 	bl	d75b8 <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d7b66:	f003 fee3 	bl	db930 <_ZN9TimeClass7isValidEv>
   d7b6a:	b328      	cbz	r0, d7bb8 <_Z11readSensorsv+0x518>
   d7b6c:	4b51      	ldr	r3, [pc, #324]	; (d7cb4 <_Z11readSensorsv+0x614>)
   d7b6e:	781a      	ldrb	r2, [r3, #0]
   d7b70:	461e      	mov	r6, r3
   d7b72:	bb0a      	cbnz	r2, d7bb8 <_Z11readSensorsv+0x518>
  {
    rtc.setUnixTime(Time.now());
   d7b74:	f003 fefd 	bl	db972 <_ZN9TimeClass3nowEv>
   d7b78:	4601      	mov	r1, r0
   d7b7a:	4846      	ldr	r0, [pc, #280]	; (d7c94 <_Z11readSensorsv+0x5f4>)
   d7b7c:	f001 fd88 	bl	d9690 <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7b80:	f003 fef7 	bl	db972 <_ZN9TimeClass3nowEv>
   d7b84:	4604      	mov	r4, r0
   d7b86:	4843      	ldr	r0, [pc, #268]	; (d7c94 <_Z11readSensorsv+0x5f4>)
   d7b88:	f001 fdcb 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d7b8c:	4284      	cmp	r4, r0
   d7b8e:	f000 8529 	beq.w	d85e4 <_Z11readSensorsv+0xf44>
   d7b92:	f003 feee 	bl	db972 <_ZN9TimeClass3nowEv>
   d7b96:	4604      	mov	r4, r0
   d7b98:	483e      	ldr	r0, [pc, #248]	; (d7c94 <_Z11readSensorsv+0x5f4>)
   d7b9a:	f001 fdc2 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d7b9e:	1a20      	subs	r0, r4, r0
   d7ba0:	2809      	cmp	r0, #9
   d7ba2:	bf8c      	ite	hi
   d7ba4:	2000      	movhi	r0, #0
   d7ba6:	2001      	movls	r0, #1
   d7ba8:	b130      	cbz	r0, d7bb8 <_Z11readSensorsv+0x518>
    {
      timeSynced=true;
   d7baa:	2301      	movs	r3, #1
   d7bac:	7033      	strb	r3, [r6, #0]
      DEBUG_PRINTLN("Time is sync'ed to the cloud"); 
   d7bae:	f004 fc7b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7bb2:	4948      	ldr	r1, [pc, #288]	; (d7cd4 <_Z11readSensorsv+0x634>)
   d7bb4:	f003 fc0b 	bl	db3ce <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(TimeMsg);*/

    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7bb8:	4b47      	ldr	r3, [pc, #284]	; (d7cd8 <_Z11readSensorsv+0x638>)
   d7bba:	781b      	ldrb	r3, [r3, #0]
   d7bbc:	b90b      	cbnz	r3, d7bc2 <_Z11readSensorsv+0x522>
  {
    publishGMTOffsetRequest();
   d7bbe:	f7fe f87d 	bl	d5cbc <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d7bc2:	f7ff fb9b 	bl	d72fc <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d7bc6:	483c      	ldr	r0, [pc, #240]	; (d7cb8 <_Z11readSensorsv+0x618>)
   d7bc8:	4c3b      	ldr	r4, [pc, #236]	; (d7cb8 <_Z11readSensorsv+0x618>)
   d7bca:	f002 fa14 	bl	d9ff6 <_ZN5SPS3013dataAvailableEv>
   d7bce:	2800      	cmp	r0, #0
   d7bd0:	f000 8461 	beq.w	d8496 <_Z11readSensorsv+0xdf6>
    Sensor.getMass(mass_concen);
   d7bd4:	4941      	ldr	r1, [pc, #260]	; (d7cdc <_Z11readSensorsv+0x63c>)
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7bd6:	4f42      	ldr	r7, [pc, #264]	; (d7ce0 <_Z11readSensorsv+0x640>)
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7bd8:	f8df 9118 	ldr.w	r9, [pc, #280]	; d7cf4 <_Z11readSensorsv+0x654>
   d7bdc:	f8df a0fc 	ldr.w	sl, [pc, #252]	; d7cdc <_Z11readSensorsv+0x63c>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d7be0:	4620      	mov	r0, r4
   d7be2:	f002 fb21 	bl	da228 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d7be6:	493f      	ldr	r1, [pc, #252]	; (d7ce4 <_Z11readSensorsv+0x644>)
   d7be8:	4620      	mov	r0, r4
   d7bea:	f002 fb31 	bl	da250 <_ZN5SPS306getNumEPf>

    DEBUG_PRINTLN("--Mass Concentration--");
   d7bee:	f004 fc5b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7bf2:	493d      	ldr	r1, [pc, #244]	; (d7ce8 <_Z11readSensorsv+0x648>)
   d7bf4:	f003 fbeb 	bl	db3ce <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d7bf8:	2300      	movs	r3, #0
   d7bfa:	603b      	str	r3, [r7, #0]
   d7bfc:	46b8      	mov	r8, r7
   d7bfe:	683b      	ldr	r3, [r7, #0]
   d7c00:	4e37      	ldr	r6, [pc, #220]	; (d7ce0 <_Z11readSensorsv+0x640>)
   d7c02:	2b03      	cmp	r3, #3
   d7c04:	dc1a      	bgt.n	d7c3c <_Z11readSensorsv+0x59c>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7c06:	f004 fc4f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7c0a:	f8d8 3000 	ldr.w	r3, [r8]
   d7c0e:	f103 0b01 	add.w	fp, r3, #1
   d7c12:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   d7c16:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7c18:	6818      	ldr	r0, [r3, #0]
   d7c1a:	f00b f905 	bl	e2e28 <__aeabi_f2d>
   d7c1e:	e9cd 0100 	strd	r0, r1, [sp]
   d7c22:	4a32      	ldr	r2, [pc, #200]	; (d7cec <_Z11readSensorsv+0x64c>)
   d7c24:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
   d7c28:	2100      	movs	r1, #0
   d7c2a:	4630      	mov	r0, r6
   d7c2c:	f003 fce1 	bl	db5f2 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7c30:	f8d8 3000 	ldr.w	r3, [r8]
   d7c34:	3301      	adds	r3, #1
   d7c36:	f8c8 3000 	str.w	r3, [r8]
   d7c3a:	e7e0      	b.n	d7bfe <_Z11readSensorsv+0x55e>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7c3c:	f004 fc34 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7c40:	492b      	ldr	r1, [pc, #172]	; (d7cf0 <_Z11readSensorsv+0x650>)
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7c42:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d7cf4 <_Z11readSensorsv+0x654>
   d7c46:	f8df 909c 	ldr.w	r9, [pc, #156]	; d7ce4 <_Z11readSensorsv+0x644>
    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7c4a:	f003 fbc0 	bl	db3ce <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d7c4e:	2300      	movs	r3, #0
   d7c50:	6033      	str	r3, [r6, #0]
   d7c52:	683b      	ldr	r3, [r7, #0]
   d7c54:	2b04      	cmp	r3, #4
   d7c56:	dc4f      	bgt.n	d7cf8 <_Z11readSensorsv+0x658>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7c58:	f004 fc26 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7c5c:	f8d6 a000 	ldr.w	sl, [r6]
   d7c60:	eb09 038a 	add.w	r3, r9, sl, lsl #2
   d7c64:	4683      	mov	fp, r0
   d7c66:	6818      	ldr	r0, [r3, #0]
   d7c68:	f00b f8de 	bl	e2e28 <__aeabi_f2d>
   d7c6c:	e9cd 0100 	strd	r0, r1, [sp]
   d7c70:	4a1e      	ldr	r2, [pc, #120]	; (d7cec <_Z11readSensorsv+0x64c>)
   d7c72:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   d7c76:	2100      	movs	r1, #0
   d7c78:	4658      	mov	r0, fp
   d7c7a:	f003 fcba 	bl	db5f2 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d7c7e:	6833      	ldr	r3, [r6, #0]
   d7c80:	3301      	adds	r3, #1
   d7c82:	6033      	str	r3, [r6, #0]
   d7c84:	e7e5      	b.n	d7c52 <_Z11readSensorsv+0x5b2>
   d7c86:	bf00      	nop
   d7c88:	000e75cc 	.word	0x000e75cc
   d7c8c:	2003d7d8 	.word	0x2003d7d8
   d7c90:	000e75d0 	.word	0x000e75d0
   d7c94:	2003e174 	.word	0x2003e174
   d7c98:	2003d5b8 	.word	0x2003d5b8
   d7c9c:	000e75d7 	.word	0x000e75d7
   d7ca0:	000e803c 	.word	0x000e803c
   d7ca4:	2003e2c0 	.word	0x2003e2c0
   d7ca8:	386d437f 	.word	0x386d437f
   d7cac:	4b3d3b00 	.word	0x4b3d3b00
   d7cb0:	000e75de 	.word	0x000e75de
   d7cb4:	2003dead 	.word	0x2003dead
   d7cb8:	2003e1ec 	.word	0x2003e1ec
   d7cbc:	000e75e4 	.word	0x000e75e4
   d7cc0:	2003da48 	.word	0x2003da48
   d7cc4:	2003d57c 	.word	0x2003d57c
   d7cc8:	000d52f5 	.word	0x000d52f5
   d7ccc:	000e7616 	.word	0x000e7616
   d7cd0:	2003e230 	.word	0x2003e230
   d7cd4:	000e7621 	.word	0x000e7621
   d7cd8:	2003e1ac 	.word	0x2003e1ac
   d7cdc:	2003e160 	.word	0x2003e160
   d7ce0:	2003dec0 	.word	0x2003dec0
   d7ce4:	2003e254 	.word	0x2003e254
   d7ce8:	000e763e 	.word	0x000e763e
   d7cec:	000e7655 	.word	0x000e7655
   d7cf0:	000e7661 	.word	0x000e7661
   d7cf4:	2003d55c 	.word	0x2003d55c
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7cf8:	6860      	ldr	r0, [r4, #4]
   d7cfa:	4fc5      	ldr	r7, [pc, #788]	; (d8010 <_Z11readSensorsv+0x970>)
   d7cfc:	f8df 8374 	ldr.w	r8, [pc, #884]	; d8074 <_Z11readSensorsv+0x9d4>
   d7d00:	f00b f892 	bl	e2e28 <__aeabi_f2d>
   d7d04:	4602      	mov	r2, r0
   d7d06:	460b      	mov	r3, r1
   d7d08:	a81b      	add	r0, sp, #108	; 0x6c
   d7d0a:	49c2      	ldr	r1, [pc, #776]	; (d8014 <_Z11readSensorsv+0x974>)
   d7d0c:	f003 fada 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7d10:	a91b      	add	r1, sp, #108	; 0x6c
   d7d12:	48c1      	ldr	r0, [pc, #772]	; (d8018 <_Z11readSensorsv+0x978>)
   d7d14:	f003 fa17 	bl	db146 <_ZN6StringaSEOS_>
   d7d18:	a81b      	add	r0, sp, #108	; 0x6c
   d7d1a:	f003 f983 	bl	db024 <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d7d1e:	68a0      	ldr	r0, [r4, #8]
   d7d20:	f00b f882 	bl	e2e28 <__aeabi_f2d>
   d7d24:	4602      	mov	r2, r0
   d7d26:	460b      	mov	r3, r1
   d7d28:	a81b      	add	r0, sp, #108	; 0x6c
   d7d2a:	49ba      	ldr	r1, [pc, #744]	; (d8014 <_Z11readSensorsv+0x974>)
   d7d2c:	f003 faca 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7d30:	a91b      	add	r1, sp, #108	; 0x6c
   d7d32:	48ba      	ldr	r0, [pc, #744]	; (d801c <_Z11readSensorsv+0x97c>)
   d7d34:	f003 fa07 	bl	db146 <_ZN6StringaSEOS_>
   d7d38:	a81b      	add	r0, sp, #108	; 0x6c
   d7d3a:	f003 f973 	bl	db024 <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d7d3e:	68e0      	ldr	r0, [r4, #12]
   d7d40:	f00b f872 	bl	e2e28 <__aeabi_f2d>
   d7d44:	4602      	mov	r2, r0
   d7d46:	460b      	mov	r3, r1
   d7d48:	a81b      	add	r0, sp, #108	; 0x6c
   d7d4a:	49b2      	ldr	r1, [pc, #712]	; (d8014 <_Z11readSensorsv+0x974>)
   d7d4c:	f003 faba 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7d50:	a91b      	add	r1, sp, #108	; 0x6c
   d7d52:	48b3      	ldr	r0, [pc, #716]	; (d8020 <_Z11readSensorsv+0x980>)
   d7d54:	f003 f9f7 	bl	db146 <_ZN6StringaSEOS_>
   d7d58:	a81b      	add	r0, sp, #108	; 0x6c
   d7d5a:	f003 f963 	bl	db024 <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d7d5e:	6920      	ldr	r0, [r4, #16]

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7d60:	4cb0      	ldr	r4, [pc, #704]	; (d8024 <_Z11readSensorsv+0x984>)
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);
   d7d62:	f00b f861 	bl	e2e28 <__aeabi_f2d>
   d7d66:	460b      	mov	r3, r1
   d7d68:	4602      	mov	r2, r0
   d7d6a:	49aa      	ldr	r1, [pc, #680]	; (d8014 <_Z11readSensorsv+0x974>)
   d7d6c:	a81b      	add	r0, sp, #108	; 0x6c
   d7d6e:	f003 faa9 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7d72:	a91b      	add	r1, sp, #108	; 0x6c
   d7d74:	48ac      	ldr	r0, [pc, #688]	; (d8028 <_Z11readSensorsv+0x988>)
   d7d76:	f003 f9e6 	bl	db146 <_ZN6StringaSEOS_>
   d7d7a:	a81b      	add	r0, sp, #108	; 0x6c
   d7d7c:	f003 f952 	bl	db024 <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7d80:	4aaa      	ldr	r2, [pc, #680]	; (d802c <_Z11readSensorsv+0x98c>)
   d7d82:	48ab      	ldr	r0, [pc, #684]	; (d8030 <_Z11readSensorsv+0x990>)
   d7d84:	2101      	movs	r1, #1
   d7d86:	f001 f9ef 	bl	d9168 <_ZN3ULP7getTempEiPc>
   d7d8a:	ee07 0a90 	vmov	s15, r0
   d7d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d92:	edc4 7a00 	vstr	s15, [r4]
    
    DEBUG_PRINT("temp1: ");
   d7d96:	f004 fb87 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7d9a:	49a6      	ldr	r1, [pc, #664]	; (d8034 <_Z11readSensorsv+0x994>)
   d7d9c:	f003 fb04 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(temp1);
   d7da0:	f004 fb82 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7da4:	ed94 0a00 	vldr	s0, [r4]
   d7da8:	2102      	movs	r1, #2
   d7daa:	f003 fbf9 	bl	db5a0 <_ZN5Print5printEfi>
    DEBUG_PRINTLN();
   d7dae:	f004 fb7b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7db2:	f003 fb00 	bl	db3b6 <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    DEBUG_PRINT("Vgas: ");
   d7db6:	f004 fb77 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7dba:	499f      	ldr	r1, [pc, #636]	; (d8038 <_Z11readSensorsv+0x998>)
   d7dbc:	f003 faf4 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(sensor1.getVgas(1));
   d7dc0:	f004 fb72 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7dc4:	2101      	movs	r1, #1
   d7dc6:	4606      	mov	r6, r0
   d7dc8:	4899      	ldr	r0, [pc, #612]	; (d8030 <_Z11readSensorsv+0x990>)
   d7dca:	f001 fa81 	bl	d92d0 <_ZN3ULP7getVgasEi>
   d7dce:	2102      	movs	r1, #2
   d7dd0:	4630      	mov	r0, r6
   d7dd2:	f003 fbe5 	bl	db5a0 <_ZN5Print5printEfi>
    DEBUG_PRINTLN();
   d7dd6:	f004 fb67 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7dda:	f003 faec 	bl	db3b6 <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7dde:	f004 fb63 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7de2:	4996      	ldr	r1, [pc, #600]	; (d803c <_Z11readSensorsv+0x99c>)
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7de4:	4e96      	ldr	r6, [pc, #600]	; (d8040 <_Z11readSensorsv+0x9a0>)
    DEBUG_PRINT("Vgas: ");
    DEBUG_PRINT(sensor1.getVgas(1));
    DEBUG_PRINTLN();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7de6:	f003 fadf 	bl	db3a8 <_ZN5Print5printEPKc>
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7dea:	4a96      	ldr	r2, [pc, #600]	; (d8044 <_Z11readSensorsv+0x9a4>)
   d7dec:	4890      	ldr	r0, [pc, #576]	; (d8030 <_Z11readSensorsv+0x990>)
   d7dee:	2101      	movs	r1, #1
   d7df0:	f001 f9ba 	bl	d9168 <_ZN3ULP7getTempEiPc>
   d7df4:	ee07 0a90 	vmov	s15, r0
   d7df8:	2101      	movs	r1, #1
   d7dfa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d7dfe:	488c      	ldr	r0, [pc, #560]	; (d8030 <_Z11readSensorsv+0x990>)
   d7e00:	f001 faa6 	bl	d9350 <_ZN3ULP7getConcEif>
   d7e04:	ed86 0a00 	vstr	s0, [r6]
    DEBUG_PRINTLN(conc1);
   d7e08:	f004 fb4e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d7e0c:	ed96 0a00 	vldr	s0, [r6]
   d7e10:	2102      	movs	r1, #2
   d7e12:	f003 fbdf 	bl	db5d4 <_ZN5Print7printlnEfi>

    field5 = String::format("%0.1f", conc1);
   d7e16:	6830      	ldr	r0, [r6, #0]
   d7e18:	f00b f806 	bl	e2e28 <__aeabi_f2d>
   d7e1c:	4602      	mov	r2, r0
   d7e1e:	460b      	mov	r3, r1
   d7e20:	a81b      	add	r0, sp, #108	; 0x6c
   d7e22:	497c      	ldr	r1, [pc, #496]	; (d8014 <_Z11readSensorsv+0x974>)
   d7e24:	f003 fa4e 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7e28:	a91b      	add	r1, sp, #108	; 0x6c
   d7e2a:	4887      	ldr	r0, [pc, #540]	; (d8048 <_Z11readSensorsv+0x9a8>)
   d7e2c:	f003 f98b 	bl	db146 <_ZN6StringaSEOS_>
   d7e30:	a81b      	add	r0, sp, #108	; 0x6c
   d7e32:	f003 f8f7 	bl	db024 <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d7e36:	6820      	ldr	r0, [r4, #0]
    field7 = String::format("%0.0f", batCharge);
    WiFiSignal sig = WiFi.RSSI();
    field8 = String::format("%d", (int)sig.getQuality());
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7e38:	4c84      	ldr	r4, [pc, #528]	; (d804c <_Z11readSensorsv+0x9ac>)
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
    DEBUG_PRINTLN(conc1);

    field5 = String::format("%0.1f", conc1);
    field6 = String::format("%0.1f", temp1);
   d7e3a:	f00a fff5 	bl	e2e28 <__aeabi_f2d>
   d7e3e:	4602      	mov	r2, r0
   d7e40:	460b      	mov	r3, r1
   d7e42:	a81b      	add	r0, sp, #108	; 0x6c
   d7e44:	4973      	ldr	r1, [pc, #460]	; (d8014 <_Z11readSensorsv+0x974>)
   d7e46:	f003 fa3d 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7e4a:	a91b      	add	r1, sp, #108	; 0x6c
   d7e4c:	4880      	ldr	r0, [pc, #512]	; (d8050 <_Z11readSensorsv+0x9b0>)
   d7e4e:	f003 f97a 	bl	db146 <_ZN6StringaSEOS_>
   d7e52:	a81b      	add	r0, sp, #108	; 0x6c
   d7e54:	f003 f8e6 	bl	db024 <_ZN6StringD1Ev>
    CellularSignal sig = Cellular.RSSI();
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
   d7e58:	2021      	movs	r0, #33	; 0x21
   d7e5a:	f005 f97c 	bl	dd156 <analogRead>
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d7e5e:	f00a ffd1 	bl	e2e04 <__aeabi_i2d>
   d7e62:	a365      	add	r3, pc, #404	; (adr r3, d7ff8 <_Z11readSensorsv+0x958>)
   d7e64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e68:	f00b f832 	bl	e2ed0 <__aeabi_dmul>
   d7e6c:	f00b fb28 	bl	e34c0 <__aeabi_d2f>
   d7e70:	f00a ffda 	bl	e2e28 <__aeabi_f2d>
   d7e74:	a362      	add	r3, pc, #392	; (adr r3, d8000 <_Z11readSensorsv+0x960>)
   d7e76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e7a:	f00b f829 	bl	e2ed0 <__aeabi_dmul>
   d7e7e:	ec41 0b10 	vmov	d0, r0, r1
   d7e82:	f006 f911 	bl	de0a8 <exp>
   d7e86:	a360      	add	r3, pc, #384	; (adr r3, d8008 <_Z11readSensorsv+0x968>)
   d7e88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e8c:	ec51 0b10 	vmov	r0, r1, d0
   d7e90:	f00b f81e 	bl	e2ed0 <__aeabi_dmul>
   d7e94:	f00b fb14 	bl	e34c0 <__aeabi_d2f>
    if (batCharge>100) batCharge = 100;
   d7e98:	eddf 7a6e 	vldr	s15, [pc, #440]	; d8054 <_Z11readSensorsv+0x9b4>
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d7e9c:	ee08 0a10 	vmov	s16, r0
    if (batCharge>100) batCharge = 100;
   d7ea0:	eeb4 8a67 	vcmp.f32	s16, s15
   d7ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7ea8:	bfc8      	it	gt
   d7eaa:	eeb0 8a67 	vmovgt.f32	s16, s15
    field7 = String::format("%0.0f", batCharge);
   d7eae:	ee18 0a10 	vmov	r0, s16
   d7eb2:	f00a ffb9 	bl	e2e28 <__aeabi_f2d>
   d7eb6:	460b      	mov	r3, r1
   d7eb8:	4602      	mov	r2, r0
   d7eba:	4967      	ldr	r1, [pc, #412]	; (d8058 <_Z11readSensorsv+0x9b8>)
   d7ebc:	a81b      	add	r0, sp, #108	; 0x6c
   d7ebe:	f003 fa01 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7ec2:	a91b      	add	r1, sp, #108	; 0x6c
   d7ec4:	4865      	ldr	r0, [pc, #404]	; (d805c <_Z11readSensorsv+0x9bc>)
   d7ec6:	f003 f93e 	bl	db146 <_ZN6StringaSEOS_>
   d7eca:	a81b      	add	r0, sp, #108	; 0x6c
   d7ecc:	f003 f8aa 	bl	db024 <_ZN6StringD1Ev>
    WiFiSignal sig = WiFi.RSSI();
   d7ed0:	4963      	ldr	r1, [pc, #396]	; (d8060 <_Z11readSensorsv+0x9c0>)
   d7ed2:	a81b      	add	r0, sp, #108	; 0x6c
   d7ed4:	f005 f800 	bl	dced8 <_ZN5spark9WiFiClass4RSSIEv>
    field8 = String::format("%d", (int)sig.getQuality());
   d7ed8:	a81b      	add	r0, sp, #108	; 0x6c
   d7eda:	f004 ffa9 	bl	dce30 <_ZNK10WiFiSignal10getQualityEv>
   d7ede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d7ee2:	4960      	ldr	r1, [pc, #384]	; (d8064 <_Z11readSensorsv+0x9c4>)
   d7ee4:	ee17 2a90 	vmov	r2, s15
   d7ee8:	a817      	add	r0, sp, #92	; 0x5c
   d7eea:	f003 f9eb 	bl	db2c4 <_ZN6String6formatEPKcz>
   d7eee:	a917      	add	r1, sp, #92	; 0x5c
   d7ef0:	485d      	ldr	r0, [pc, #372]	; (d8068 <_Z11readSensorsv+0x9c8>)
   d7ef2:	f003 f928 	bl	db146 <_ZN6StringaSEOS_>
   d7ef6:	a817      	add	r0, sp, #92	; 0x5c
   d7ef8:	f003 f894 	bl	db024 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7efc:	4946      	ldr	r1, [pc, #280]	; (d8018 <_Z11readSensorsv+0x978>)
   d7efe:	a817      	add	r0, sp, #92	; 0x5c
   d7f00:	f003 f916 	bl	db130 <_ZN6StringC1ERKS_>
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7f04:	4959      	ldr	r1, [pc, #356]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f06:	a817      	add	r0, sp, #92	; 0x5c
   d7f08:	f003 f97e 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f0c:	4943      	ldr	r1, [pc, #268]	; (d801c <_Z11readSensorsv+0x97c>)
   d7f0e:	f003 f96f 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f12:	4956      	ldr	r1, [pc, #344]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f14:	f003 f978 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f18:	4941      	ldr	r1, [pc, #260]	; (d8020 <_Z11readSensorsv+0x980>)
   d7f1a:	f003 f969 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f1e:	4953      	ldr	r1, [pc, #332]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f20:	f003 f972 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f24:	4940      	ldr	r1, [pc, #256]	; (d8028 <_Z11readSensorsv+0x988>)
   d7f26:	f003 f963 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f2a:	4950      	ldr	r1, [pc, #320]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f2c:	f003 f96c 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f30:	4945      	ldr	r1, [pc, #276]	; (d8048 <_Z11readSensorsv+0x9a8>)
   d7f32:	f003 f95d 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f36:	494d      	ldr	r1, [pc, #308]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f38:	f003 f966 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f3c:	4944      	ldr	r1, [pc, #272]	; (d8050 <_Z11readSensorsv+0x9b0>)
   d7f3e:	f003 f957 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f42:	494a      	ldr	r1, [pc, #296]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f44:	f003 f960 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f48:	4944      	ldr	r1, [pc, #272]	; (d805c <_Z11readSensorsv+0x9bc>)
   d7f4a:	f003 f951 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f4e:	4947      	ldr	r1, [pc, #284]	; (d806c <_Z11readSensorsv+0x9cc>)
   d7f50:	f003 f95a 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d7f54:	4944      	ldr	r1, [pc, #272]	; (d8068 <_Z11readSensorsv+0x9c8>)
   d7f56:	f003 f94b 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d7f5a:	4601      	mov	r1, r0
   d7f5c:	4620      	mov	r0, r4
   d7f5e:	f003 f8d8 	bl	db112 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7f62:	a817      	add	r0, sp, #92	; 0x5c
   d7f64:	f003 f85e 	bl	db024 <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d7f68:	492b      	ldr	r1, [pc, #172]	; (d8018 <_Z11readSensorsv+0x978>)
   d7f6a:	a817      	add	r0, sp, #92	; 0x5c
   d7f6c:	f003 f8e0 	bl	db130 <_ZN6StringC1ERKS_>
   d7f70:	aa17      	add	r2, sp, #92	; 0x5c
   d7f72:	2101      	movs	r1, #1
   d7f74:	483e      	ldr	r0, [pc, #248]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7f76:	f7fe fc69 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7f7a:	a817      	add	r0, sp, #92	; 0x5c
   d7f7c:	f003 f852 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d7f80:	4926      	ldr	r1, [pc, #152]	; (d801c <_Z11readSensorsv+0x97c>)
   d7f82:	a817      	add	r0, sp, #92	; 0x5c
   d7f84:	f003 f8d4 	bl	db130 <_ZN6StringC1ERKS_>
   d7f88:	aa17      	add	r2, sp, #92	; 0x5c
   d7f8a:	2102      	movs	r1, #2
   d7f8c:	4838      	ldr	r0, [pc, #224]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7f8e:	f7fe fc5d 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7f92:	a817      	add	r0, sp, #92	; 0x5c
   d7f94:	f003 f846 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d7f98:	4921      	ldr	r1, [pc, #132]	; (d8020 <_Z11readSensorsv+0x980>)
   d7f9a:	a817      	add	r0, sp, #92	; 0x5c
   d7f9c:	f003 f8c8 	bl	db130 <_ZN6StringC1ERKS_>
   d7fa0:	aa17      	add	r2, sp, #92	; 0x5c
   d7fa2:	2103      	movs	r1, #3
   d7fa4:	4832      	ldr	r0, [pc, #200]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7fa6:	f7fe fc51 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7faa:	a817      	add	r0, sp, #92	; 0x5c
   d7fac:	f003 f83a 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d7fb0:	491d      	ldr	r1, [pc, #116]	; (d8028 <_Z11readSensorsv+0x988>)
   d7fb2:	a817      	add	r0, sp, #92	; 0x5c
   d7fb4:	f003 f8bc 	bl	db130 <_ZN6StringC1ERKS_>
   d7fb8:	aa17      	add	r2, sp, #92	; 0x5c
   d7fba:	2104      	movs	r1, #4
   d7fbc:	482c      	ldr	r0, [pc, #176]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7fbe:	f7fe fc45 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7fc2:	a817      	add	r0, sp, #92	; 0x5c
   d7fc4:	f003 f82e 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d7fc8:	491f      	ldr	r1, [pc, #124]	; (d8048 <_Z11readSensorsv+0x9a8>)
   d7fca:	a817      	add	r0, sp, #92	; 0x5c
   d7fcc:	f003 f8b0 	bl	db130 <_ZN6StringC1ERKS_>
   d7fd0:	aa17      	add	r2, sp, #92	; 0x5c
   d7fd2:	2105      	movs	r1, #5
   d7fd4:	4826      	ldr	r0, [pc, #152]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7fd6:	f7fe fc39 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7fda:	a817      	add	r0, sp, #92	; 0x5c
   d7fdc:	f003 f822 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d7fe0:	491b      	ldr	r1, [pc, #108]	; (d8050 <_Z11readSensorsv+0x9b0>)
   d7fe2:	a817      	add	r0, sp, #92	; 0x5c
   d7fe4:	f003 f8a4 	bl	db130 <_ZN6StringC1ERKS_>
   d7fe8:	aa17      	add	r2, sp, #92	; 0x5c
   d7fea:	2106      	movs	r1, #6
   d7fec:	4820      	ldr	r0, [pc, #128]	; (d8070 <_Z11readSensorsv+0x9d0>)
   d7fee:	f7fe fc2d 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7ff2:	a817      	add	r0, sp, #92	; 0x5c
   d7ff4:	e040      	b.n	d8078 <_Z11readSensorsv+0x9d8>
   d7ff6:	bf00      	nop
   d7ff8:	d2c10294 	.word	0xd2c10294
   d7ffc:	3f5263af 	.word	0x3f5263af
   d8000:	dab9f55a 	.word	0xdab9f55a
   d8004:	40143d8a 	.word	0x40143d8a
   d8008:	9abcaf48 	.word	0x9abcaf48
   d800c:	3e7ad7f2 	.word	0x3e7ad7f2
   d8010:	2003e21c 	.word	0x2003e21c
   d8014:	000e767a 	.word	0x000e767a
   d8018:	2003d788 	.word	0x2003d788
   d801c:	2003d798 	.word	0x2003d798
   d8020:	2003d7a8 	.word	0x2003d7a8
   d8024:	2003e268 	.word	0x2003e268
   d8028:	2003d7b8 	.word	0x2003d7b8
   d802c:	000e7680 	.word	0x000e7680
   d8030:	2003ded0 	.word	0x2003ded0
   d8034:	000e7682 	.word	0x000e7682
   d8038:	000e768a 	.word	0x000e768a
   d803c:	000e7691 	.word	0x000e7691
   d8040:	2003e15c 	.word	0x2003e15c
   d8044:	000e7a7e 	.word	0x000e7a7e
   d8048:	2003d7c8 	.word	0x2003d7c8
   d804c:	2003deb0 	.word	0x2003deb0
   d8050:	2003e180 	.word	0x2003e180
   d8054:	42c80000 	.word	0x42c80000
   d8058:	000e7698 	.word	0x000e7698
   d805c:	2003d7e8 	.word	0x2003d7e8
   d8060:	2003e5e8 	.word	0x2003e5e8
   d8064:	000e8214 	.word	0x000e8214
   d8068:	2003d6b8 	.word	0x2003d6b8
   d806c:	000e71d3 	.word	0x000e71d3
   d8070:	2003e234 	.word	0x2003e234
   d8074:	2003da45 	.word	0x2003da45
   d8078:	f002 ffd4 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d807c:	4977      	ldr	r1, [pc, #476]	; (d825c <_Z11readSensorsv+0xbbc>)
   d807e:	a817      	add	r0, sp, #92	; 0x5c
   d8080:	f003 f856 	bl	db130 <_ZN6StringC1ERKS_>
   d8084:	aa17      	add	r2, sp, #92	; 0x5c
   d8086:	2107      	movs	r1, #7
   d8088:	4875      	ldr	r0, [pc, #468]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d808a:	f7fe fbdf 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d808e:	a817      	add	r0, sp, #92	; 0x5c
   d8090:	f002 ffc8 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d8094:	4973      	ldr	r1, [pc, #460]	; (d8264 <_Z11readSensorsv+0xbc4>)
   d8096:	a817      	add	r0, sp, #92	; 0x5c
   d8098:	f003 f84a 	bl	db130 <_ZN6StringC1ERKS_>
   d809c:	aa17      	add	r2, sp, #92	; 0x5c
   d809e:	2108      	movs	r1, #8
   d80a0:	486f      	ldr	r0, [pc, #444]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d80a2:	f7fe fbd3 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d80a6:	a817      	add	r0, sp, #92	; 0x5c
   d80a8:	f002 ffbc 	bl	db024 <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
   d80ac:	f004 f9fc 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d80b0:	6821      	ldr	r1, [r4, #0]
   d80b2:	4c6d      	ldr	r4, [pc, #436]	; (d8268 <_Z11readSensorsv+0xbc8>)
   d80b4:	f003 f98b 	bl	db3ce <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d80b8:	4b6c      	ldr	r3, [pc, #432]	; (d826c <_Z11readSensorsv+0xbcc>)
    String statusMessage;
   d80ba:	496d      	ldr	r1, [pc, #436]	; (d8270 <_Z11readSensorsv+0xbd0>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d80bc:	2601      	movs	r6, #1
    String statusMessage;
   d80be:	a803      	add	r0, sp, #12
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d80c0:	701e      	strb	r6, [r3, #0]
    String statusMessage;
   d80c2:	f002 fff6 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
    String alertMessage;
   d80c6:	496a      	ldr	r1, [pc, #424]	; (d8270 <_Z11readSensorsv+0xbd0>)
   d80c8:	a807      	add	r0, sp, #28
   d80ca:	f002 fff2 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d80ce:	4869      	ldr	r0, [pc, #420]	; (d8274 <_Z11readSensorsv+0xbd4>)
   d80d0:	f7fe ffaa 	bl	d7028 <_Z13runExpressionPc>
   d80d4:	4602      	mov	r2, r0
   d80d6:	2800      	cmp	r0, #0
   d80d8:	f000 8083 	beq.w	d81e2 <_Z11readSensorsv+0xb42>
    {
      currentAlert = true;
      Blynk.virtualWrite(V9,alertGreenImage);
   d80dc:	2200      	movs	r2, #0
   d80de:	2109      	movs	r1, #9
   d80e0:	485f      	ldr	r0, [pc, #380]	; (d8260 <_Z11readSensorsv+0xbc0>)
    String statusMessage;
    String alertMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d80e2:	703e      	strb	r6, [r7, #0]
      Blynk.virtualWrite(V9,alertGreenImage);
   d80e4:	f7fe fb88 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,alertRedImage);
   d80e8:	4632      	mov	r2, r6
   d80ea:	2109      	movs	r1, #9
   d80ec:	485c      	ldr	r0, [pc, #368]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d80ee:	f7fe fb83 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d80f2:	7823      	ldrb	r3, [r4, #0]
   d80f4:	b31b      	cbz	r3, d813e <_Z11readSensorsv+0xa9e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d80f6:	4960      	ldr	r1, [pc, #384]	; (d8278 <_Z11readSensorsv+0xbd8>)
   d80f8:	a817      	add	r0, sp, #92	; 0x5c
   d80fa:	f002 ffda 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
      {
        // statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = "ALRT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d80fe:	485f      	ldr	r0, [pc, #380]	; (d827c <_Z11readSensorsv+0xbdc>)
   d8100:	f001 fb0f 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d8104:	4b5e      	ldr	r3, [pc, #376]	; (d8280 <_Z11readSensorsv+0xbe0>)
   d8106:	495f      	ldr	r1, [pc, #380]	; (d8284 <_Z11readSensorsv+0xbe4>)
   d8108:	681a      	ldr	r2, [r3, #0]
   d810a:	4b5f      	ldr	r3, [pc, #380]	; (d8288 <_Z11readSensorsv+0xbe8>)
   d810c:	4402      	add	r2, r0
   d810e:	a813      	add	r0, sp, #76	; 0x4c
   d8110:	f003 fbdc 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d8114:	a913      	add	r1, sp, #76	; 0x4c
   d8116:	a817      	add	r0, sp, #92	; 0x5c
   d8118:	f003 f86a 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d811c:	495b      	ldr	r1, [pc, #364]	; (d828c <_Z11readSensorsv+0xbec>)
   d811e:	f003 f873 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d8122:	494e      	ldr	r1, [pc, #312]	; (d825c <_Z11readSensorsv+0xbbc>)
   d8124:	f003 f864 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d8128:	4959      	ldr	r1, [pc, #356]	; (d8290 <_Z11readSensorsv+0xbf0>)
   d812a:	f003 f86d 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d812e:	4601      	mov	r1, r0
   d8130:	a803      	add	r0, sp, #12
   d8132:	f002 ffee 	bl	db112 <_ZN6StringaSERKS_>
   d8136:	a813      	add	r0, sp, #76	; 0x4c
   d8138:	f002 ff74 	bl	db024 <_ZN6StringD1Ev>
   d813c:	e00e      	b.n	d815c <_Z11readSensorsv+0xabc>
   d813e:	4955      	ldr	r1, [pc, #340]	; (d8294 <_Z11readSensorsv+0xbf4>)
   d8140:	a817      	add	r0, sp, #92	; 0x5c
   d8142:	f002 ffb6 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d8146:	4945      	ldr	r1, [pc, #276]	; (d825c <_Z11readSensorsv+0xbbc>)
   d8148:	a817      	add	r0, sp, #92	; 0x5c
   d814a:	f003 f851 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d814e:	4950      	ldr	r1, [pc, #320]	; (d8290 <_Z11readSensorsv+0xbf0>)
   d8150:	f003 f85a 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d8154:	4601      	mov	r1, r0
   d8156:	a803      	add	r0, sp, #12
   d8158:	f002 ffdb 	bl	db112 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d815c:	a817      	add	r0, sp, #92	; 0x5c
   d815e:	f002 ff61 	bl	db024 <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d8162:	a903      	add	r1, sp, #12
   d8164:	a817      	add	r0, sp, #92	; 0x5c
   d8166:	f002 ffe3 	bl	db130 <_ZN6StringC1ERKS_>
   d816a:	aa17      	add	r2, sp, #92	; 0x5c
   d816c:	211e      	movs	r1, #30
   d816e:	483c      	ldr	r0, [pc, #240]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d8170:	f7fe fb6c 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8174:	a817      	add	r0, sp, #92	; 0x5c
   d8176:	f002 ff55 	bl	db024 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d817a:	f898 3000 	ldrb.w	r3, [r8]
   d817e:	2b00      	cmp	r3, #0
   d8180:	f000 80fe 	beq.w	d8380 <_Z11readSensorsv+0xce0>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d8184:	f003 fbf5 	bl	db972 <_ZN9TimeClass3nowEv>
   d8188:	4601      	mov	r1, r0
   d818a:	a80b      	add	r0, sp, #44	; 0x2c
   d818c:	f003 fb1a 	bl	db7c4 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8190:	a90b      	add	r1, sp, #44	; 0x2c
   d8192:	a80f      	add	r0, sp, #60	; 0x3c
   d8194:	f002 ffcc 	bl	db130 <_ZN6StringC1ERKS_>
   d8198:	493f      	ldr	r1, [pc, #252]	; (d8298 <_Z11readSensorsv+0xbf8>)
   d819a:	a80f      	add	r0, sp, #60	; 0x3c
   d819c:	f003 f834 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d81a0:	4b37      	ldr	r3, [pc, #220]	; (d8280 <_Z11readSensorsv+0xbe0>)
   d81a2:	220a      	movs	r2, #10
   d81a4:	6819      	ldr	r1, [r3, #0]
   d81a6:	4604      	mov	r4, r0
   d81a8:	a813      	add	r0, sp, #76	; 0x4c
   d81aa:	f002 fff7 	bl	db19c <_ZN6StringC1Eih>
   d81ae:	a913      	add	r1, sp, #76	; 0x4c
   d81b0:	4620      	mov	r0, r4
   d81b2:	f003 f81d 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d81b6:	4601      	mov	r1, r0
   d81b8:	a817      	add	r0, sp, #92	; 0x5c
   d81ba:	f002 ffb9 	bl	db130 <_ZN6StringC1ERKS_>
   d81be:	aa17      	add	r2, sp, #92	; 0x5c
   d81c0:	2115      	movs	r1, #21
   d81c2:	4827      	ldr	r0, [pc, #156]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d81c4:	f7fe fc66 	bl	d6a94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d81c8:	a817      	add	r0, sp, #92	; 0x5c
   d81ca:	f002 ff2b 	bl	db024 <_ZN6StringD1Ev>
   d81ce:	a813      	add	r0, sp, #76	; 0x4c
   d81d0:	f002 ff28 	bl	db024 <_ZN6StringD1Ev>
   d81d4:	a80f      	add	r0, sp, #60	; 0x3c
   d81d6:	f002 ff25 	bl	db024 <_ZN6StringD1Ev>
   d81da:	a80b      	add	r0, sp, #44	; 0x2c
   d81dc:	f002 ff22 	bl	db024 <_ZN6StringD1Ev>
   d81e0:	e0ce      	b.n	d8380 <_Z11readSensorsv+0xce0>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d81e2:	4601      	mov	r1, r0
   d81e4:	481e      	ldr	r0, [pc, #120]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d81e6:	f7fe fb07 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (tamperCurrentAlert){
   d81ea:	4b2c      	ldr	r3, [pc, #176]	; (d829c <_Z11readSensorsv+0xbfc>)
   d81ec:	781a      	ldrb	r2, [r3, #0]
   d81ee:	b122      	cbz	r2, d81fa <_Z11readSensorsv+0xb5a>
        StateString="ALRT!";
   d81f0:	492b      	ldr	r1, [pc, #172]	; (d82a0 <_Z11readSensorsv+0xc00>)
   d81f2:	482c      	ldr	r0, [pc, #176]	; (d82a4 <_Z11readSensorsv+0xc04>)
   d81f4:	f002 ffaf 	bl	db156 <_ZN6StringaSEPKc>
        Blynk.virtualWrite(V9,alertRedImage);
   d81f8:	4632      	mov	r2, r6
      }
      else
        Blynk.virtualWrite(V9,alertGreenImage);
   d81fa:	2109      	movs	r1, #9
   d81fc:	4818      	ldr	r0, [pc, #96]	; (d8260 <_Z11readSensorsv+0xbc0>)
   d81fe:	f7fe fafb 	bl	d67f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (timeSynced)
   d8202:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8204:	4927      	ldr	r1, [pc, #156]	; (d82a4 <_Z11readSensorsv+0xc04>)
   d8206:	2b00      	cmp	r3, #0
   d8208:	d04e      	beq.n	d82a8 <_Z11readSensorsv+0xc08>
   d820a:	a813      	add	r0, sp, #76	; 0x4c
   d820c:	f002 ff90 	bl	db130 <_ZN6StringC1ERKS_>
      {
        // statusMessage = "OK "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d8210:	491e      	ldr	r1, [pc, #120]	; (d828c <_Z11readSensorsv+0xbec>)
   d8212:	a813      	add	r0, sp, #76	; 0x4c
   d8214:	f002 fff8 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d8218:	4604      	mov	r4, r0
   d821a:	4818      	ldr	r0, [pc, #96]	; (d827c <_Z11readSensorsv+0xbdc>)
   d821c:	f001 fa81 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d8220:	4b17      	ldr	r3, [pc, #92]	; (d8280 <_Z11readSensorsv+0xbe0>)
   d8222:	4918      	ldr	r1, [pc, #96]	; (d8284 <_Z11readSensorsv+0xbe4>)
   d8224:	681a      	ldr	r2, [r3, #0]
   d8226:	4b18      	ldr	r3, [pc, #96]	; (d8288 <_Z11readSensorsv+0xbe8>)
   d8228:	4402      	add	r2, r0
   d822a:	a817      	add	r0, sp, #92	; 0x5c
   d822c:	f003 fb4e 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d8230:	a917      	add	r1, sp, #92	; 0x5c
   d8232:	4620      	mov	r0, r4
   d8234:	f002 ffdc 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d8238:	4914      	ldr	r1, [pc, #80]	; (d828c <_Z11readSensorsv+0xbec>)
   d823a:	f002 ffe5 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d823e:	4907      	ldr	r1, [pc, #28]	; (d825c <_Z11readSensorsv+0xbbc>)
   d8240:	f002 ffd6 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d8244:	4912      	ldr	r1, [pc, #72]	; (d8290 <_Z11readSensorsv+0xbf0>)
   d8246:	f002 ffdf 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d824a:	4601      	mov	r1, r0
   d824c:	a803      	add	r0, sp, #12
   d824e:	f002 ff60 	bl	db112 <_ZN6StringaSERKS_>
   d8252:	a817      	add	r0, sp, #92	; 0x5c
   d8254:	f002 fee6 	bl	db024 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8258:	a813      	add	r0, sp, #76	; 0x4c
   d825a:	e037      	b.n	d82cc <_Z11readSensorsv+0xc2c>
   d825c:	2003d7e8 	.word	0x2003d7e8
   d8260:	2003e234 	.word	0x2003e234
   d8264:	2003d6b8 	.word	0x2003d6b8
   d8268:	2003dead 	.word	0x2003dead
   d826c:	2003e17c 	.word	0x2003e17c
   d8270:	000e6ff6 	.word	0x000e6ff6
   d8274:	2003da90 	.word	0x2003da90
   d8278:	000e769e 	.word	0x000e769e
   d827c:	2003e174 	.word	0x2003e174
   d8280:	2003d5a4 	.word	0x2003d5a4
   d8284:	2003e2c0 	.word	0x2003e2c0
   d8288:	000e7233 	.word	0x000e7233
   d828c:	000e724c 	.word	0x000e724c
   d8290:	000e723b 	.word	0x000e723b
   d8294:	000e76a5 	.word	0x000e76a5
   d8298:	000e76b9 	.word	0x000e76b9
   d829c:	2003decc 	.word	0x2003decc
   d82a0:	000e76bb 	.word	0x000e76bb
   d82a4:	2003d7d8 	.word	0x2003d7d8
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d82a8:	a817      	add	r0, sp, #92	; 0x5c
   d82aa:	f002 ff41 	bl	db130 <_ZN6StringC1ERKS_>
      }
      else
      {
        statusMessage = StateString+"                "+field7+"%";
   d82ae:	49b4      	ldr	r1, [pc, #720]	; (d8580 <_Z11readSensorsv+0xee0>)
   d82b0:	a817      	add	r0, sp, #92	; 0x5c
   d82b2:	f002 ffa9 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d82b6:	49b3      	ldr	r1, [pc, #716]	; (d8584 <_Z11readSensorsv+0xee4>)
   d82b8:	f002 ff9a 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>
   d82bc:	49b2      	ldr	r1, [pc, #712]	; (d8588 <_Z11readSensorsv+0xee8>)
   d82be:	f002 ffa3 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d82c2:	4601      	mov	r1, r0
   d82c4:	a803      	add	r0, sp, #12
   d82c6:	f002 ff24 	bl	db112 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d82ca:	a817      	add	r0, sp, #92	; 0x5c
   d82cc:	f002 feaa 	bl	db024 <_ZN6StringD1Ev>
      }
      int messagesize=statusMessage.length();
      if (messagesize<5){
   d82d0:	9b05      	ldr	r3, [sp, #20]
   d82d2:	2b04      	cmp	r3, #4
   d82d4:	dc15      	bgt.n	d8302 <_Z11readSensorsv+0xc62>
        statusMessage=String::format("Updating");
   d82d6:	49ad      	ldr	r1, [pc, #692]	; (d858c <_Z11readSensorsv+0xeec>)
   d82d8:	a817      	add	r0, sp, #92	; 0x5c
   d82da:	f002 fff3 	bl	db2c4 <_ZN6String6formatEPKcz>
   d82de:	a917      	add	r1, sp, #92	; 0x5c
   d82e0:	a803      	add	r0, sp, #12
   d82e2:	f002 ff30 	bl	db146 <_ZN6StringaSEOS_>
   d82e6:	a817      	add	r0, sp, #92	; 0x5c
   d82e8:	f002 fe9c 	bl	db024 <_ZN6StringD1Ev>
        DEBUG_PRINTLN(statusMessage);
   d82ec:	f004 f8dc 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d82f0:	9903      	ldr	r1, [sp, #12]
   d82f2:	f003 f86c 	bl	db3ce <_ZN5Print7printlnEPKc>
        delay(1000);
   d82f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d82fa:	f003 fb4b 	bl	db994 <delay>
        System.reset();
   d82fe:	f002 fda7 	bl	dae50 <_ZN11SystemClass5resetEv>
      }
        
      Blynk.virtualWrite(V30,statusMessage);
   d8302:	a903      	add	r1, sp, #12
   d8304:	a817      	add	r0, sp, #92	; 0x5c
   d8306:	f002 ff13 	bl	db130 <_ZN6StringC1ERKS_>
   d830a:	aa17      	add	r2, sp, #92	; 0x5c
   d830c:	211e      	movs	r1, #30
   d830e:	48a0      	ldr	r0, [pc, #640]	; (d8590 <_Z11readSensorsv+0xef0>)
   d8310:	f7fe fa9c 	bl	d684c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8314:	a817      	add	r0, sp, #92	; 0x5c
   d8316:	f002 fe85 	bl	db024 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d831a:	f898 3000 	ldrb.w	r3, [r8]
   d831e:	b36b      	cbz	r3, d837c <_Z11readSensorsv+0xcdc>
   d8320:	f003 fb27 	bl	db972 <_ZN9TimeClass3nowEv>
   d8324:	4601      	mov	r1, r0
   d8326:	a80b      	add	r0, sp, #44	; 0x2c
   d8328:	f003 fa4c 	bl	db7c4 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d832c:	a90b      	add	r1, sp, #44	; 0x2c
   d832e:	a80f      	add	r0, sp, #60	; 0x3c
   d8330:	f002 fefe 	bl	db130 <_ZN6StringC1ERKS_>
   d8334:	4997      	ldr	r1, [pc, #604]	; (d8594 <_Z11readSensorsv+0xef4>)
   d8336:	a80f      	add	r0, sp, #60	; 0x3c
   d8338:	f002 ff66 	bl	db208 <_ZplRK15StringSumHelperPKc>
   d833c:	4b96      	ldr	r3, [pc, #600]	; (d8598 <_Z11readSensorsv+0xef8>)
   d833e:	220a      	movs	r2, #10
   d8340:	6819      	ldr	r1, [r3, #0]
   d8342:	4604      	mov	r4, r0
   d8344:	a813      	add	r0, sp, #76	; 0x4c
   d8346:	f002 ff29 	bl	db19c <_ZN6StringC1Eih>
   d834a:	a913      	add	r1, sp, #76	; 0x4c
   d834c:	4620      	mov	r0, r4
   d834e:	f002 ff4f 	bl	db1f0 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8352:	4601      	mov	r1, r0
   d8354:	a817      	add	r0, sp, #92	; 0x5c
   d8356:	f002 feeb 	bl	db130 <_ZN6StringC1ERKS_>
   d835a:	aa17      	add	r2, sp, #92	; 0x5c
   d835c:	2115      	movs	r1, #21
   d835e:	488c      	ldr	r0, [pc, #560]	; (d8590 <_Z11readSensorsv+0xef0>)
   d8360:	f7fe fb98 	bl	d6a94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d8364:	a817      	add	r0, sp, #92	; 0x5c
   d8366:	f002 fe5d 	bl	db024 <_ZN6StringD1Ev>
   d836a:	a813      	add	r0, sp, #76	; 0x4c
   d836c:	f002 fe5a 	bl	db024 <_ZN6StringD1Ev>
   d8370:	a80f      	add	r0, sp, #60	; 0x3c
   d8372:	f002 fe57 	bl	db024 <_ZN6StringD1Ev>
   d8376:	a80b      	add	r0, sp, #44	; 0x2c
   d8378:	f002 fe54 	bl	db024 <_ZN6StringD1Ev>
      currentAlert = false;
   d837c:	2300      	movs	r3, #0
   d837e:	703b      	strb	r3, [r7, #0]
    }
     if (VapeBuzzerOn)
   d8380:	4c86      	ldr	r4, [pc, #536]	; (d859c <_Z11readSensorsv+0xefc>)
   d8382:	7823      	ldrb	r3, [r4, #0]
   d8384:	b1fb      	cbz	r3, d83c6 <_Z11readSensorsv+0xd26>
   d8386:	f002 f961 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d838a:	4b85      	ldr	r3, [pc, #532]	; (d85a0 <_Z11readSensorsv+0xf00>)
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d838c:	4985      	ldr	r1, [pc, #532]	; (d85a4 <_Z11readSensorsv+0xf04>)
      currentAlert = false;
    }
     if (VapeBuzzerOn)
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d838e:	681e      	ldr	r6, [r3, #0]
   d8390:	1b86      	subs	r6, r0, r6
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d8392:	4632      	mov	r2, r6
   d8394:	a817      	add	r0, sp, #92	; 0x5c
   d8396:	f002 ff95 	bl	db2c4 <_ZN6String6formatEPKcz>
   d839a:	a917      	add	r1, sp, #92	; 0x5c
   d839c:	a807      	add	r0, sp, #28
   d839e:	f002 fed2 	bl	db146 <_ZN6StringaSEOS_>
   d83a2:	a817      	add	r0, sp, #92	; 0x5c
   d83a4:	f002 fe3e 	bl	db024 <_ZN6StringD1Ev>
         DEBUG_PRINTLN(alertMessage);
   d83a8:	f004 f87e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d83ac:	9907      	ldr	r1, [sp, #28]
   d83ae:	f003 f80e 	bl	db3ce <_ZN5Print7printlnEPKc>
         if (vape_elapsed_buzzer>8000){
   d83b2:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
   d83b6:	d906      	bls.n	d83c6 <_Z11readSensorsv+0xd26>
           digitalWrite(buzzer, LOW);
   d83b8:	4b7b      	ldr	r3, [pc, #492]	; (d85a8 <_Z11readSensorsv+0xf08>)
   d83ba:	2100      	movs	r1, #0
   d83bc:	8818      	ldrh	r0, [r3, #0]
   d83be:	f004 fe9e 	bl	dd0fe <digitalWrite>
	         VapeBuzzerOn=false;
   d83c2:	2300      	movs	r3, #0
   d83c4:	7023      	strb	r3, [r4, #0]
	       }
     }

    if (alertChanged())
   d83c6:	f7fd f9b5 	bl	d5734 <_Z12alertChangedv>
   d83ca:	2800      	cmp	r0, #0
   d83cc:	d044      	beq.n	d8458 <_Z11readSensorsv+0xdb8>
    {
      if (currentAlert)
   d83ce:	783b      	ldrb	r3, [r7, #0]
   d83d0:	b353      	cbz	r3, d8428 <_Z11readSensorsv+0xd88>
      {
          
        if (state.buzzerVapor==true)
   d83d2:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
   d83d6:	b1db      	cbz	r3, d8410 <_Z11readSensorsv+0xd70>
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
   d83d8:	4b73      	ldr	r3, [pc, #460]	; (d85a8 <_Z11readSensorsv+0xf08>)
   d83da:	2101      	movs	r1, #1
   d83dc:	8818      	ldrh	r0, [r3, #0]
   d83de:	f004 fe8e 	bl	dd0fe <digitalWrite>
   d83e2:	f002 f933 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
            VapeAlertBuzzerTime = millis();
   d83e6:	4b6e      	ldr	r3, [pc, #440]	; (d85a0 <_Z11readSensorsv+0xf00>)
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d83e8:	4970      	ldr	r1, [pc, #448]	; (d85ac <_Z11readSensorsv+0xf0c>)
          
        if (state.buzzerVapor==true)
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
            VapeAlertBuzzerTime = millis();
   d83ea:	6018      	str	r0, [r3, #0]
   d83ec:	4602      	mov	r2, r0
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d83ee:	a817      	add	r0, sp, #92	; 0x5c
   d83f0:	f002 ff68 	bl	db2c4 <_ZN6String6formatEPKcz>
   d83f4:	a917      	add	r1, sp, #92	; 0x5c
   d83f6:	a807      	add	r0, sp, #28
   d83f8:	f002 fea5 	bl	db146 <_ZN6StringaSEOS_>
   d83fc:	a817      	add	r0, sp, #92	; 0x5c
   d83fe:	f002 fe11 	bl	db024 <_ZN6StringD1Ev>
            DEBUG_PRINTLN(alertMessage);
   d8402:	f004 f851 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8406:	9907      	ldr	r1, [sp, #28]
   d8408:	f002 ffe1 	bl	db3ce <_ZN5Print7printlnEPKc>
	          VapeBuzzerOn=true;
   d840c:	2301      	movs	r3, #1
   d840e:	7023      	strb	r3, [r4, #0]
            //delay(8000);
        }
        if (state.notifyVapor==true)
   d8410:	f895 3419 	ldrb.w	r3, [r5, #1049]	; 0x419
   d8414:	b303      	cbz	r3, d8458 <_Z11readSensorsv+0xdb8>
        {
          #ifdef Version_2
          Blynk.logEvent("vape_alert");
   d8416:	4966      	ldr	r1, [pc, #408]	; (d85b0 <_Z11readSensorsv+0xf10>)
   d8418:	485d      	ldr	r0, [pc, #372]	; (d8590 <_Z11readSensorsv+0xef0>)
   d841a:	f7fe ff53 	bl	d72c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
   d841e:	f002 f915 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
          VapeAlertTime = millis();
   d8422:	4b64      	ldr	r3, [pc, #400]	; (d85b4 <_Z11readSensorsv+0xf14>)
   d8424:	6018      	str	r0, [r3, #0]
   d8426:	e017      	b.n	d8458 <_Z11readSensorsv+0xdb8>
   d8428:	f002 f910 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
          #endif
        }
      }
      else
      {
       unsigned long elapsed = millis() - VapeAlertTime;
   d842c:	4b61      	ldr	r3, [pc, #388]	; (d85b4 <_Z11readSensorsv+0xf14>)
  	   alertMessage=String::format("Vape Alert total time %ul milliseconds", elapsed/10);
   d842e:	4962      	ldr	r1, [pc, #392]	; (d85b8 <_Z11readSensorsv+0xf18>)
   d8430:	681a      	ldr	r2, [r3, #0]
   d8432:	230a      	movs	r3, #10
   d8434:	1a82      	subs	r2, r0, r2
   d8436:	a817      	add	r0, sp, #92	; 0x5c
   d8438:	fbb2 f2f3 	udiv	r2, r2, r3
   d843c:	f002 ff42 	bl	db2c4 <_ZN6String6formatEPKcz>
   d8440:	a917      	add	r1, sp, #92	; 0x5c
   d8442:	a807      	add	r0, sp, #28
   d8444:	f002 fe7f 	bl	db146 <_ZN6StringaSEOS_>
   d8448:	a817      	add	r0, sp, #92	; 0x5c
   d844a:	f002 fdeb 	bl	db024 <_ZN6StringD1Ev>
       DEBUG_PRINTLN(alertMessage);
   d844e:	f004 f82b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8452:	9907      	ldr	r1, [sp, #28]
   d8454:	f002 ffbb 	bl	db3ce <_ZN5Print7printlnEPKc>
        }
      }
      
    }

    if (batCharge<state.batThreshold)
   d8458:	4b58      	ldr	r3, [pc, #352]	; (d85bc <_Z11readSensorsv+0xf1c>)
   d845a:	4c59      	ldr	r4, [pc, #356]	; (d85c0 <_Z11readSensorsv+0xf20>)
   d845c:	edd3 7a00 	vldr	s15, [r3]
   d8460:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d8464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d8468:	bf4c      	ite	mi
   d846a:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d846c:	2300      	movpl	r3, #0
   d846e:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d8470:	f7fd f974 	bl	d575c <_Z15batAlertChangedv>
   d8474:	b140      	cbz	r0, d8488 <_Z11readSensorsv+0xde8>
    {
      if (batCurrentAlert)
   d8476:	7823      	ldrb	r3, [r4, #0]
   d8478:	b133      	cbz	r3, d8488 <_Z11readSensorsv+0xde8>
      {
       if (state.notifyBattery==true)
   d847a:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   d847e:	b11b      	cbz	r3, d8488 <_Z11readSensorsv+0xde8>
        {
          #ifdef Version_2
          Blynk.logEvent("low_battery_alert_20");
   d8480:	4950      	ldr	r1, [pc, #320]	; (d85c4 <_Z11readSensorsv+0xf24>)
   d8482:	4843      	ldr	r0, [pc, #268]	; (d8590 <_Z11readSensorsv+0xef0>)
   d8484:	f7fe ff1e 	bl	d72c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
    String alertMessage;
   d8488:	a807      	add	r0, sp, #28
   d848a:	f002 fdcb 	bl	db024 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
   d848e:	a803      	add	r0, sp, #12
   d8490:	f002 fdc8 	bl	db024 <_ZN6StringD1Ev>
   d8494:	e00e      	b.n	d84b4 <_Z11readSensorsv+0xe14>
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d8496:	4620      	mov	r0, r4
   d8498:	f001 ff3b 	bl	da312 <_ZN5SPS3014beginMeasuringEv>
   d849c:	b950      	cbnz	r0, d84b4 <_Z11readSensorsv+0xe14>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device 1");
   d849e:	f004 f803 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d84a2:	4949      	ldr	r1, [pc, #292]	; (d85c8 <_Z11readSensorsv+0xf28>)
   d84a4:	f002 ff93 	bl	db3ce <_ZN5Print7printlnEPKc>
      delay(1000);
   d84a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d84ac:	f003 fa72 	bl	db994 <delay>
      System.reset();
   d84b0:	f002 fcce 	bl	dae50 <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d84b4:	4b45      	ldr	r3, [pc, #276]	; (d85cc <_Z11readSensorsv+0xf2c>)
   d84b6:	4c46      	ldr	r4, [pc, #280]	; (d85d0 <_Z11readSensorsv+0xf30>)
   d84b8:	781b      	ldrb	r3, [r3, #0]
   d84ba:	b1f3      	cbz	r3, d84fa <_Z11readSensorsv+0xe5a>
   d84bc:	220a      	movs	r2, #10
   d84be:	6821      	ldr	r1, [r4, #0]
   d84c0:	a813      	add	r0, sp, #76	; 0x4c
   d84c2:	f002 fe6b 	bl	db19c <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d84c6:	a913      	add	r1, sp, #76	; 0x4c
   d84c8:	a817      	add	r0, sp, #92	; 0x5c
   d84ca:	f002 fe31 	bl	db130 <_ZN6StringC1ERKS_>
   d84ce:	4941      	ldr	r1, [pc, #260]	; (d85d4 <_Z11readSensorsv+0xf34>)
   d84d0:	a817      	add	r0, sp, #92	; 0x5c
   d84d2:	f002 fe99 	bl	db208 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d84d6:	4601      	mov	r1, r0
   d84d8:	a81b      	add	r0, sp, #108	; 0x6c
   d84da:	f002 fe29 	bl	db130 <_ZN6StringC1ERKS_>
   d84de:	aa1b      	add	r2, sp, #108	; 0x6c
   d84e0:	2115      	movs	r1, #21
   d84e2:	482b      	ldr	r0, [pc, #172]	; (d8590 <_Z11readSensorsv+0xef0>)
   d84e4:	f7fe fad6 	bl	d6a94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d84e8:	a81b      	add	r0, sp, #108	; 0x6c
   d84ea:	f002 fd9b 	bl	db024 <_ZN6StringD1Ev>
   d84ee:	a817      	add	r0, sp, #92	; 0x5c
   d84f0:	f002 fd98 	bl	db024 <_ZN6StringD1Ev>
   d84f4:	a813      	add	r0, sp, #76	; 0x4c
   d84f6:	f002 fd95 	bl	db024 <_ZN6StringD1Ev>
  DEBUG_PRINT(millis());
   d84fa:	f003 ffd5 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d84fe:	4605      	mov	r5, r0
   d8500:	f002 f8a4 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
   d8504:	220a      	movs	r2, #10
   d8506:	4601      	mov	r1, r0
   d8508:	4628      	mov	r0, r5
   d850a:	f7fd fa29 	bl	d5960 <_ZN5Print5printIjLi0EEEjT_i>
  DEBUG_PRINT(": ");
   d850e:	f003 ffcb 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8512:	4931      	ldr	r1, [pc, #196]	; (d85d8 <_Z11readSensorsv+0xf38>)
   d8514:	f002 ff48 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(readingCount);
   d8518:	f003 ffc6 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d851c:	220a      	movs	r2, #10
   d851e:	6821      	ldr	r1, [r4, #0]
   d8520:	f7fd fb3d 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
  DEBUG_PRINTLN();
   d8524:	f003 ffc0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8528:	f002 ff45 	bl	db3b6 <_ZN5Print7printlnEv>
  readingCount++;
   d852c:	6823      	ldr	r3, [r4, #0]
   d852e:	3301      	adds	r3, #1
   d8530:	6023      	str	r3, [r4, #0]
}
   d8532:	b025      	add	sp, #148	; 0x94
   d8534:	ecbd 8b02 	vpop	{d8}
   d8538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d853c:	f004 fe82 	bl	dd244 <_Z19__fetch_global_Wirev>
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
    {
      if (!Sensor.begin())
   d8540:	4601      	mov	r1, r0
   d8542:	4826      	ldr	r0, [pc, #152]	; (d85dc <_Z11readSensorsv+0xf3c>)
   d8544:	f001 feea 	bl	da31c <_ZN5SPS305beginER7TwoWire>
   d8548:	2800      	cmp	r0, #0
   d854a:	f47f aaf1 	bne.w	d7b30 <_Z11readSensorsv+0x490>
      {
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d854e:	f003 ffab 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8552:	4923      	ldr	r1, [pc, #140]	; (d85e0 <_Z11readSensorsv+0xf40>)
   d8554:	f002 ff3b 	bl	db3ce <_ZN5Print7printlnEPKc>
        delay(1000);
   d8558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d855c:	f003 fa1a 	bl	db994 <delay>
   d8560:	f7ff badd 	b.w	d7b1e <_Z11readSensorsv+0x47e>
   d8564:	f002 f872 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8568:	1b00      	subs	r0, r0, r4
   d856a:	42b0      	cmp	r0, r6
   d856c:	f63f aaf0 	bhi.w	d7b50 <_Z11readSensorsv+0x4b0>
    {
      delay(100);
   d8570:	2064      	movs	r0, #100	; 0x64
   d8572:	f003 fa0f 	bl	db994 <delay>
      checkAccel();
   d8576:	f7fe fec1 	bl	d72fc <_Z10checkAccelv>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d857a:	f7ff bae3 	b.w	d7b44 <_Z11readSensorsv+0x4a4>
   d857e:	bf00      	nop
   d8580:	000e723d 	.word	0x000e723d
   d8584:	2003d7e8 	.word	0x2003d7e8
   d8588:	000e723b 	.word	0x000e723b
   d858c:	000e76c1 	.word	0x000e76c1
   d8590:	2003e234 	.word	0x2003e234
   d8594:	000e76b9 	.word	0x000e76b9
   d8598:	2003d5a4 	.word	0x2003d5a4
   d859c:	2003d7f8 	.word	0x2003d7f8
   d85a0:	2003da40 	.word	0x2003da40
   d85a4:	000e76ca 	.word	0x000e76ca
   d85a8:	2003d570 	.word	0x2003d570
   d85ac:	000e76e5 	.word	0x000e76e5
   d85b0:	000e770e 	.word	0x000e770e
   d85b4:	2003e1a0 	.word	0x2003e1a0
   d85b8:	000e7719 	.word	0x000e7719
   d85bc:	2003de90 	.word	0x2003de90
   d85c0:	2003decd 	.word	0x2003decd
   d85c4:	000e7740 	.word	0x000e7740
   d85c8:	000e7755 	.word	0x000e7755
   d85cc:	2003da45 	.word	0x2003da45
   d85d0:	2003e230 	.word	0x2003e230
   d85d4:	000e6ff5 	.word	0x000e6ff5
   d85d8:	000e803c 	.word	0x000e803c
   d85dc:	2003e1ec 	.word	0x2003e1ec
   d85e0:	000e75f2 	.word	0x000e75f2
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d85e4:	480a      	ldr	r0, [pc, #40]	; (d8610 <_Z11readSensorsv+0xf70>)
   d85e6:	f001 f89c 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d85ea:	4604      	mov	r4, r0
   d85ec:	f003 f9c1 	bl	db972 <_ZN9TimeClass3nowEv>
   d85f0:	f7ff bad5 	b.w	d7b9e <_Z11readSensorsv+0x4fe>
      }
    }
    
    if (!sps30OK)
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d85f4:	f003 ff58 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d85f8:	4906      	ldr	r1, [pc, #24]	; (d8614 <_Z11readSensorsv+0xf74>)
   d85fa:	f002 fee8 	bl	db3ce <_ZN5Print7printlnEPKc>
      delay(1000);
   d85fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8602:	f003 f9c7 	bl	db994 <delay>
      System.reset();    
   d8606:	f002 fc23 	bl	dae50 <_ZN11SystemClass5resetEv>
   d860a:	f7ff ba96 	b.w	d7b3a <_Z11readSensorsv+0x49a>
   d860e:	bf00      	nop
   d8610:	2003e174 	.word	0x2003e174
   d8614:	000e777f 	.word	0x000e777f

000d8618 <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d8618:	b5f0      	push	{r4, r5, r6, r7, lr}
   d861a:	b08b      	sub	sp, #44	; 0x2c
   d861c:	f002 f816 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  CycleOnTime = millis();
   d8620:	4b84      	ldr	r3, [pc, #528]	; (d8834 <setup+0x21c>)
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d8622:	4c85      	ldr	r4, [pc, #532]	; (d8838 <setup+0x220>)
  }
}

void setup()
{
  CycleOnTime = millis();
   d8624:	6018      	str	r0, [r3, #0]
  Wire.setSpeed(20000);
   d8626:	f004 fe0d 	bl	dd244 <_Z19__fetch_global_Wirev>
   d862a:	f644 6120 	movw	r1, #20000	; 0x4e20
   d862e:	f003 ffb3 	bl	dc598 <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d8632:	2103      	movs	r1, #3
   d8634:	2008      	movs	r0, #8
   d8636:	f004 fd51 	bl	dd0dc <pinMode>
  Serial.begin(115200);
   d863a:	f003 fe83 	bl	dc344 <_Z16_fetch_usbserialv>
   d863e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d8642:	f003 fe73 	bl	dc32c <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d8646:	f003 ff2f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d864a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d864e:	f003 ff25 	bl	dc49c <_ZN11USARTSerial5beginEm>
  delay(100);
   d8652:	2064      	movs	r0, #100	; 0x64
   d8654:	f003 f99e 	bl	db994 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d8658:	2101      	movs	r1, #1
   d865a:	8820      	ldrh	r0, [r4, #0]
   d865c:	f004 fd3e 	bl	dd0dc <pinMode>
  digitalWrite(buzzer, LOW);
   d8660:	2100      	movs	r1, #0
   d8662:	8820      	ldrh	r0, [r4, #0]
   d8664:	f004 fd4b 	bl	dd0fe <digitalWrite>

  Wire.begin();
   d8668:	f004 fdec 	bl	dd244 <_Z19__fetch_global_Wirev>
   d866c:	f003 ff98 	bl	dc5a0 <_ZN7TwoWire5beginEv>
  delay(100);
   d8670:	2064      	movs	r0, #100	; 0x64
   d8672:	f003 f98f 	bl	db994 <delay>
  DEBUG_PRINTLN("Start Setup() function");
   d8676:	f003 ff17 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d867a:	4970      	ldr	r1, [pc, #448]	; (d883c <setup+0x224>)
   d867c:	f002 fea7 	bl	db3ce <_ZN5Print7printlnEPKc>
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  byte expandererror, expanderaddress;

  expanderaddress = 0x20; // MCP23017 address
  Wire.beginTransmission(expanderaddress);
   d8680:	f004 fde0 	bl	dd244 <_Z19__fetch_global_Wirev>
   d8684:	2120      	movs	r1, #32
   d8686:	f003 ffc6 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
  expandererror = Wire.endTransmission();
   d868a:	f004 fddb 	bl	dd244 <_Z19__fetch_global_Wirev>
   d868e:	f003 ffcd 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!expandererror==0)
   d8692:	2800      	cmp	r0, #0
   d8694:	d041      	beq.n	d871a <setup+0x102>
  {
    Wire.reset();
   d8696:	f004 fdd5 	bl	dd244 <_Z19__fetch_global_Wirev>
   d869a:	f003 ffce 	bl	dc63a <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(expanderaddress);
   d869e:	f004 fdd1 	bl	dd244 <_Z19__fetch_global_Wirev>
   d86a2:	2120      	movs	r1, #32
   d86a4:	f003 ffb7 	bl	dc616 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d86a8:	f004 fdcc 	bl	dd244 <_Z19__fetch_global_Wirev>
   d86ac:	f003 ffbe 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
  }

  // Blink LED and reset if there is an error
  if (!expandererror == 0)
   d86b0:	b398      	cbz	r0, d871a <setup+0x102>
  {
    DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d86b2:	f003 fef9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d86b6:	4962      	ldr	r1, [pc, #392]	; (d8840 <setup+0x228>)
   d86b8:	f002 fe89 	bl	db3ce <_ZN5Print7printlnEPKc>
   d86bc:	4b61      	ldr	r3, [pc, #388]	; (d8844 <setup+0x22c>)
    Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d86be:	4a60      	ldr	r2, [pc, #384]	; (d8840 <setup+0x228>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d86c0:	781b      	ldrb	r3, [r3, #0]
   d86c2:	4961      	ldr	r1, [pc, #388]	; (d8848 <setup+0x230>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d86c4:	2400      	movs	r4, #0
   d86c6:	a806      	add	r0, sp, #24
   d86c8:	f88d 4000 	strb.w	r4, [sp]
   d86cc:	f7fc fe28 	bl	d5320 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.39>
   d86d0:	a807      	add	r0, sp, #28
   d86d2:	f7fd f86b 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    blinkRed.setActive(true);
   d86d6:	2101      	movs	r1, #1
   d86d8:	485c      	ldr	r0, [pc, #368]	; (d884c <setup+0x234>)
   d86da:	f7fc fe85 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d86de:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d86e2:	f003 f957 	bl	db994 <delay>
    blinkRed.setActive(false);
   d86e6:	4621      	mov	r1, r4
   d86e8:	4858      	ldr	r0, [pc, #352]	; (d884c <setup+0x234>)
   d86ea:	f7fc fe7d 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
    blinkYellow.setActive(true);
   d86ee:	2101      	movs	r1, #1
   d86f0:	4857      	ldr	r0, [pc, #348]	; (d8850 <setup+0x238>)
   d86f2:	f7fc fe79 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d86f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d86fa:	f003 f94b 	bl	db994 <delay>
    blinkYellow.setActive(false);
   d86fe:	4621      	mov	r1, r4
   d8700:	4853      	ldr	r0, [pc, #332]	; (d8850 <setup+0x238>)
   d8702:	f7fc fe71 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
    blinkRed.setActive(true);
   d8706:	2101      	movs	r1, #1
   d8708:	4850      	ldr	r0, [pc, #320]	; (d884c <setup+0x234>)
   d870a:	f7fc fe6d 	bl	d53e8 <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d870e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8712:	f003 f93f 	bl	db994 <delay>
    System.reset();
   d8716:	f002 fb9b 	bl	dae50 <_ZN11SystemClass5resetEv>
  }
  // END CHECK
  //////////////////////////////////////////////////////////

  // Need this to switch on the power
  power.begin();
   d871a:	484e      	ldr	r0, [pc, #312]	; (d8854 <setup+0x23c>)
   d871c:	f001 f8e2 	bl	d98e4 <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d8720:	2201      	movs	r2, #1
   d8722:	2102      	movs	r1, #2
   d8724:	484b      	ldr	r0, [pc, #300]	; (d8854 <setup+0x23c>)
   d8726:	f001 f987 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d872a:	2201      	movs	r2, #1
   d872c:	2103      	movs	r1, #3
   d872e:	4849      	ldr	r0, [pc, #292]	; (d8854 <setup+0x23c>)
   d8730:	f001 f982 	bl	d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d8734:	2064      	movs	r0, #100	; 0x64
   d8736:	f003 f92d 	bl	db994 <delay>

  uint32_t d1=0;
   d873a:	aa0a      	add	r2, sp, #40	; 0x28
   d873c:	2100      	movs	r1, #0
   d873e:	f842 1d1c 	str.w	r1, [r2, #-28]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d8742:	2304      	movs	r3, #4
   d8744:	4844      	ldr	r0, [pc, #272]	; (d8858 <setup+0x240>)
   d8746:	f001 f831 	bl	d97ac <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d874a:	f003 fead 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d874e:	9b03      	ldr	r3, [sp, #12]
   d8750:	4a42      	ldr	r2, [pc, #264]	; (d885c <setup+0x244>)
   d8752:	2101      	movs	r1, #1
   d8754:	f002 ff4d 	bl	db5f2 <_ZN5Print11printf_implEbPKcz>

  SleepResult result = System.sleepResult();
   d8758:	a804      	add	r0, sp, #16
   d875a:	4941      	ldr	r1, [pc, #260]	; (d8860 <setup+0x248>)
   d875c:	f7fc fdf8 	bl	d5350 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d8760:	a804      	add	r0, sp, #16
   d8762:	f002 fbef 	bl	daf44 <_ZNK11SleepResult6reasonEv>
   d8766:	2803      	cmp	r0, #3
   d8768:	d814      	bhi.n	d8794 <setup+0x17c>
   d876a:	e8df f000 	tbb	[pc, r0]
   d876e:	0602      	.short	0x0602
   d8770:	0e0a      	.short	0x0e0a
    case WAKEUP_REASON_NONE: {
      DEBUG_PRINTLN("Device did not wake up from Particle sleep");
   d8772:	f003 fe99 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8776:	493b      	ldr	r1, [pc, #236]	; (d8864 <setup+0x24c>)
   d8778:	e00a      	b.n	d8790 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN: {
      DEBUG_PRINTLN("Device was woken up by a pin");
   d877a:	f003 fe95 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d877e:	493a      	ldr	r1, [pc, #232]	; (d8868 <setup+0x250>)
   d8780:	e006      	b.n	d8790 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after a specified number of seconds)");
   d8782:	f003 fe91 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8786:	4939      	ldr	r1, [pc, #228]	; (d886c <setup+0x254>)
   d8788:	e002      	b.n	d8790 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
   d878a:	f003 fe8d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d878e:	4938      	ldr	r1, [pc, #224]	; (d8870 <setup+0x258>)
   d8790:	f002 fe1d 	bl	db3ce <_ZN5Print7printlnEPKc>
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d8794:	f003 fe88 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8798:	4936      	ldr	r1, [pc, #216]	; (d8874 <setup+0x25c>)
   d879a:	4f37      	ldr	r7, [pc, #220]	; (d8878 <setup+0x260>)

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d879c:	4e37      	ldr	r6, [pc, #220]	; (d887c <setup+0x264>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d879e:	f002 fe16 	bl	db3ce <_ZN5Print7printlnEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d87a2:	4b36      	ldr	r3, [pc, #216]	; (d887c <setup+0x264>)
   d87a4:	4936      	ldr	r1, [pc, #216]	; (d8880 <setup+0x268>)
   d87a6:	4834      	ldr	r0, [pc, #208]	; (d8878 <setup+0x260>)
   d87a8:	2207      	movs	r2, #7
   d87aa:	f7fc fe91 	bl	d54d0 <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d87ae:	2500      	movs	r5, #0
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d87b0:	4604      	mov	r4, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
   d87b2:	f003 fe79 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d87b6:	012b      	lsls	r3, r5, #4
   d87b8:	59d9      	ldr	r1, [r3, r7]
   d87ba:	f002 fdf5 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(": ");
   d87be:	f003 fe73 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d87c2:	4930      	ldr	r1, [pc, #192]	; (d8884 <setup+0x26c>)
   d87c4:	f002 fdf0 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(i2cExists[x]);
   d87c8:	f003 fe6e 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d87cc:	5d71      	ldrb	r1, [r6, r5]
   d87ce:	220a      	movs	r2, #10
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d87d0:	3501      	adds	r5, #1
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d87d2:	f7fd f81e 	bl	d5812 <_ZN5Print7printlnIbLi0EEEjT_i>
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d87d6:	2d07      	cmp	r5, #7
   d87d8:	d1eb      	bne.n	d87b2 <setup+0x19a>
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
  }
  if (!i2cOK)
   d87da:	2c00      	cmp	r4, #0
   d87dc:	d15a      	bne.n	d8894 <setup+0x27c>
  {
    StateString = "ERR";
   d87de:	492a      	ldr	r1, [pc, #168]	; (d8888 <setup+0x270>)
   d87e0:	482a      	ldr	r0, [pc, #168]	; (d888c <setup+0x274>)
   d87e2:	f002 fcb8 	bl	db156 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C Issue");
   d87e6:	f003 fe5f 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d87ea:	4929      	ldr	r1, [pc, #164]	; (d8890 <setup+0x278>)
   d87ec:	f002 fdef 	bl	db3ce <_ZN5Print7printlnEPKc>
    RGB.control(true);
   d87f0:	2001      	movs	r0, #1
   d87f2:	f003 f90c 	bl	dba0e <_ZN8RGBClass7controlEb>
    // the following sets the RGB LED to red
    RGB.color(255, 0, 0);
   d87f6:	4622      	mov	r2, r4
   d87f8:	4621      	mov	r1, r4
   d87fa:	20ff      	movs	r0, #255	; 0xff
   d87fc:	f003 f917 	bl	dba2e <_ZN8RGBClass5colorEiii>
    delay(3000);
   d8800:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8804:	f003 f8c6 	bl	db994 <delay>
    // resume normal operation
    RGB.control(false);    
   d8808:	4620      	mov	r0, r4
   d880a:	f003 f900 	bl	dba0e <_ZN8RGBClass7controlEb>
    digitalWrite(buzzer, HIGH);
    delay(100);
    digitalWrite(buzzer, LOW);
#endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d880e:	f004 fd19 	bl	dd244 <_Z19__fetch_global_Wirev>
   d8812:	f003 ff12 	bl	dc63a <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d8816:	f004 fd15 	bl	dd244 <_Z19__fetch_global_Wirev>
   d881a:	f003 ff0a 	bl	dc632 <_ZN7TwoWire9isEnabledEv>
   d881e:	b918      	cbnz	r0, d8828 <setup+0x210>
      Wire.begin();
   d8820:	f004 fd10 	bl	dd244 <_Z19__fetch_global_Wirev>
   d8824:	f003 febc 	bl	dc5a0 <_ZN7TwoWire5beginEv>
    }
    Wire.end();
   d8828:	f004 fd0c 	bl	dd244 <_Z19__fetch_global_Wirev>
   d882c:	f003 febe 	bl	dc5ac <_ZN7TwoWire3endEv>
   d8830:	e039      	b.n	d88a6 <setup+0x28e>
   d8832:	bf00      	nop
   d8834:	2003e178 	.word	0x2003e178
   d8838:	2003d570 	.word	0x2003d570
   d883c:	000e77a7 	.word	0x000e77a7
   d8840:	000e7569 	.word	0x000e7569
   d8844:	2003d714 	.word	0x2003d714
   d8848:	000e759a 	.word	0x000e759a
   d884c:	2003d6c8 	.word	0x2003d6c8
   d8850:	2003d6f4 	.word	0x2003d6f4
   d8854:	2003deac 	.word	0x2003deac
   d8858:	2003d6e8 	.word	0x2003d6e8
   d885c:	000e75a0 	.word	0x000e75a0
   d8860:	2003e278 	.word	0x2003e278
   d8864:	000e77be 	.word	0x000e77be
   d8868:	000e77e9 	.word	0x000e77e9
   d886c:	000e7806 	.word	0x000e7806
   d8870:	000e7854 	.word	0x000e7854
   d8874:	000e75a6 	.word	0x000e75a6
   d8878:	2003d718 	.word	0x2003d718
   d887c:	2003df10 	.word	0x2003df10
   d8880:	2003d5a8 	.word	0x2003d5a8
   d8884:	000e803c 	.word	0x000e803c
   d8888:	000e75be 	.word	0x000e75be
   d888c:	2003d7d8 	.word	0x2003d7d8
   d8890:	000e75c2 	.word	0x000e75c2
  }
  else
  {
    StateString = "RDY";
   d8894:	49c4      	ldr	r1, [pc, #784]	; (d8ba8 <setup+0x590>)
   d8896:	48c5      	ldr	r0, [pc, #788]	; (d8bac <setup+0x594>)
   d8898:	f002 fc5d 	bl	db156 <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C OK");
   d889c:	f003 fe04 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d88a0:	49c3      	ldr	r1, [pc, #780]	; (d8bb0 <setup+0x598>)
   d88a2:	f002 fd94 	bl	db3ce <_ZN5Print7printlnEPKc>
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
  }
  delay(200);
   d88a6:	20c8      	movs	r0, #200	; 0xc8
   d88a8:	f003 f874 	bl	db994 <delay>
  if (!i2cOK)
   d88ac:	b90c      	cbnz	r4, d88b2 <setup+0x29a>
  {
    System.reset();
   d88ae:	f002 facf 	bl	dae50 <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d88b2:	48c0      	ldr	r0, [pc, #768]	; (d8bb4 <setup+0x59c>)
  DEBUG_PRINTLN("Before");
  DEBUG_PRINT(clockTime);
  DEBUG_PRINTLN(": ");
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d88b4:	4dc0      	ldr	r5, [pc, #768]	; (d8bb8 <setup+0x5a0>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d88b6:	f000 ff34 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d88ba:	4604      	mov	r4, r0
  DEBUG_PRINTLN("Before");
   d88bc:	f003 fdf4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d88c0:	49be      	ldr	r1, [pc, #760]	; (d8bbc <setup+0x5a4>)
   d88c2:	f002 fd84 	bl	db3ce <_ZN5Print7printlnEPKc>
  DEBUG_PRINT(clockTime);
   d88c6:	f003 fdef 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d88ca:	220a      	movs	r2, #10
   d88cc:	4621      	mov	r1, r4
   d88ce:	f7fd f947 	bl	d5b60 <_ZN5Print5printIiLi0EEEjT_i>
  DEBUG_PRINTLN(": ");
   d88d2:	f003 fde9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d88d6:	49ba      	ldr	r1, [pc, #744]	; (d8bc0 <setup+0x5a8>)
   d88d8:	f002 fd79 	bl	db3ce <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d88dc:	f003 fde4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d88e0:	682b      	ldr	r3, [r5, #0]
   d88e2:	49b8      	ldr	r1, [pc, #736]	; (d8bc4 <setup+0x5ac>)
   d88e4:	4622      	mov	r2, r4
   d88e6:	4606      	mov	r6, r0
   d88e8:	a806      	add	r0, sp, #24
   d88ea:	f002 ffef 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d88ee:	9906      	ldr	r1, [sp, #24]
   d88f0:	4630      	mov	r0, r6
   d88f2:	f002 fd6c 	bl	db3ce <_ZN5Print7printlnEPKc>
   d88f6:	a806      	add	r0, sp, #24
   d88f8:	f002 fb94 	bl	db024 <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d88fc:	4bb2      	ldr	r3, [pc, #712]	; (d8bc8 <setup+0x5b0>)
   d88fe:	429c      	cmp	r4, r3
   d8900:	dc27      	bgt.n	d8952 <setup+0x33a>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d8902:	49b2      	ldr	r1, [pc, #712]	; (d8bcc <setup+0x5b4>)
   d8904:	48ab      	ldr	r0, [pc, #684]	; (d8bb4 <setup+0x59c>)
   d8906:	f000 fec3 	bl	d9690 <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d890a:	48aa      	ldr	r0, [pc, #680]	; (d8bb4 <setup+0x59c>)
   d890c:	f000 ff09 	bl	d9722 <_ZN8MCP7941x6rtcNowEv>
   d8910:	4604      	mov	r4, r0
    DEBUG_PRINTLN("After");
   d8912:	f003 fdc9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8916:	49ae      	ldr	r1, [pc, #696]	; (d8bd0 <setup+0x5b8>)
   d8918:	f002 fd59 	bl	db3ce <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d891c:	f003 fdc4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8920:	220a      	movs	r2, #10
   d8922:	4621      	mov	r1, r4
   d8924:	f7fd f91c 	bl	d5b60 <_ZN5Print5printIiLi0EEEjT_i>
    DEBUG_PRINTLN(": ");
   d8928:	f003 fdbe 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d892c:	49a4      	ldr	r1, [pc, #656]	; (d8bc0 <setup+0x5a8>)
   d892e:	f002 fd4e 	bl	db3ce <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d8932:	f003 fdb9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8936:	682b      	ldr	r3, [r5, #0]
   d8938:	49a2      	ldr	r1, [pc, #648]	; (d8bc4 <setup+0x5ac>)
   d893a:	4606      	mov	r6, r0
   d893c:	4622      	mov	r2, r4
   d893e:	a806      	add	r0, sp, #24
   d8940:	f002 ffc4 	bl	db8cc <_ZN9TimeClass6formatElPKc>
   d8944:	9906      	ldr	r1, [sp, #24]
   d8946:	4630      	mov	r0, r6
   d8948:	f002 fd41 	bl	db3ce <_ZN5Print7printlnEPKc>
   d894c:	a806      	add	r0, sp, #24
   d894e:	f002 fb69 	bl	db024 <_ZN6StringD1Ev>
   d8952:	f004 fc77 	bl	dd244 <_Z19__fetch_global_Wirev>

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d8956:	4c9f      	ldr	r4, [pc, #636]	; (d8bd4 <setup+0x5bc>)
   d8958:	4d9f      	ldr	r5, [pc, #636]	; (d8bd8 <setup+0x5c0>)
    DEBUG_PRINTLN("After");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
  }
  Sensor.begin();
   d895a:	4601      	mov	r1, r0
   d895c:	489f      	ldr	r0, [pc, #636]	; (d8bdc <setup+0x5c4>)
   d895e:	f001 fcdd 	bl	da31c <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d8962:	489f      	ldr	r0, [pc, #636]	; (d8be0 <setup+0x5c8>)
   d8964:	f001 f90f 	bl	d9b86 <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d8968:	f7fc fe5e 	bl	d5628 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d896c:	6822      	ldr	r2, [r4, #0]
   d896e:	682b      	ldr	r3, [r5, #0]
   d8970:	429a      	cmp	r2, r3
   d8972:	d052      	beq.n	d8a1a <setup+0x402>
  {
    // Then this is the first time running so set defaults
    DEBUG_PRINT("state.firstRunCheck = ");
   d8974:	f003 fd98 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8978:	499a      	ldr	r1, [pc, #616]	; (d8be4 <setup+0x5cc>)
   d897a:	f002 fd15 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.firstRunCheck);
   d897e:	f003 fd93 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8982:	220a      	movs	r2, #10
   d8984:	6821      	ldr	r1, [r4, #0]
   d8986:	f7fd f90a 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
    DEBUG_PRINT("firstRunValue = ");
   d898a:	f003 fd8d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d898e:	4996      	ldr	r1, [pc, #600]	; (d8be8 <setup+0x5d0>)
   d8990:	f002 fd0a 	bl	db3a8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(firstRunValue);    
   d8994:	f003 fd88 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8998:	220a      	movs	r2, #10
   d899a:	6829      	ldr	r1, [r5, #0]
   d899c:	f7fd f8ff 	bl	d5b9e <_ZN5Print7printlnIiLi0EEEjT_i>
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
   d89a0:	2318      	movs	r3, #24
   d89a2:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d89a4:	2305      	movs	r3, #5
   d89a6:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d89a8:	4990      	ldr	r1, [pc, #576]	; (d8bec <setup+0x5d4>)
    DEBUG_PRINT("firstRunValue = ");
    DEBUG_PRINTLN(firstRunValue);    
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d89aa:	4b91      	ldr	r3, [pc, #580]	; (d8bf0 <setup+0x5d8>)
   d89ac:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d89ae:	f104 0010 	add.w	r0, r4, #16
   d89b2:	f00b f9bb 	bl	e3d2c <strcpy>
    strcpy(state.email,"bistany@comcast.net");
   d89b6:	498f      	ldr	r1, [pc, #572]	; (d8bf4 <setup+0x5dc>)
   d89b8:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d89bc:	f00b f9b6 	bl	e3d2c <strcpy>
    strcpy(state.batEmail,"bistany@comcast.net");
   d89c0:	498c      	ldr	r1, [pc, #560]	; (d8bf4 <setup+0x5dc>)
   d89c2:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d89c6:	f00b f9b1 	bl	e3d2c <strcpy>
    strcpy(state.tamperEmail,"bistany@comcast.net");
   d89ca:	498a      	ldr	r1, [pc, #552]	; (d8bf4 <setup+0x5dc>)
   d89cc:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d89d0:	f00b f9ac 	bl	e3d2c <strcpy>
    state.batThreshold = 20.0;
   d89d4:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d89d8:	4a87      	ldr	r2, [pc, #540]	; (d8bf8 <setup+0x5e0>)
   d89da:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d89dc:	2264      	movs	r2, #100	; 0x64
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d89de:	2300      	movs	r3, #0
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d89e0:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
    state.buzzerTamper=true;  // Buzzer Tamper
   d89e4:	2201      	movs	r2, #1
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d89e6:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d89ea:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d89ee:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d89f2:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d89f6:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d89fa:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d89fe:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d8a02:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    // firstRun = true;
    state.deviceZone=0; //America/New_York
   d8a06:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    // Save state
    // saveState(); // Move this to the initializeAppWidget() function
    DEBUG_PRINTLN("First run.");
   d8a0a:	f003 fd4d 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8a0e:	497b      	ldr	r1, [pc, #492]	; (d8bfc <setup+0x5e4>)
   d8a10:	f002 fcdd 	bl	db3ce <_ZN5Print7printlnEPKc>
    // Force a connect here for the first time the device runs
    connect();
   d8a14:	f7fe fd06 	bl	d7424 <_Z7connectv>
   d8a18:	e004      	b.n	d8a24 <setup+0x40c>
  }
  else
  {
    DEBUG_PRINTLN("Not first run.");
   d8a1a:	f003 fd45 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8a1e:	4978      	ldr	r1, [pc, #480]	; (d8c00 <setup+0x5e8>)
   d8a20:	f002 fcd5 	bl	db3ce <_ZN5Print7printlnEPKc>
  }


/////////////
// Setup ADXL345
  DEBUG_PRINT("ADXL345 Setup");
   d8a24:	f003 fd40 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8a28:	4976      	ldr	r1, [pc, #472]	; (d8c04 <setup+0x5ec>)
   d8a2a:	f002 fcbd 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN();
   d8a2e:	f003 fd3b 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8a32:	f002 fcc0 	bl	db3b6 <_ZN5Print7printlnEv>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d8a36:	486a      	ldr	r0, [pc, #424]	; (d8be0 <setup+0x5c8>)
   d8a38:	f001 f8a5 	bl	d9b86 <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d8a3c:	2104      	movs	r1, #4
   d8a3e:	4868      	ldr	r0, [pc, #416]	; (d8be0 <setup+0x5c8>)
   d8a40:	f001 f8ec 	bl	d9c1c <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d8a44:	2301      	movs	r3, #1
   d8a46:	461a      	mov	r2, r3
   d8a48:	4619      	mov	r1, r3
   d8a4a:	4865      	ldr	r0, [pc, #404]	; (d8be0 <setup+0x5c8>)
   d8a4c:	f001 f955 	bl	d9cfa <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d8a50:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d8a54:	4862      	ldr	r0, [pc, #392]	; (d8be0 <setup+0x5c8>)
   d8a56:	f001 f901 	bl	d9c5c <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d8a5a:	2301      	movs	r3, #1
   d8a5c:	461a      	mov	r2, r3
   d8a5e:	4619      	mov	r1, r3
   d8a60:	485f      	ldr	r0, [pc, #380]	; (d8be0 <setup+0x5c8>)
   d8a62:	f001 f969 	bl	d9d38 <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d8a66:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d8a6a:	485d      	ldr	r0, [pc, #372]	; (d8be0 <setup+0x5c8>)
   d8a6c:	f001 f8fc 	bl	d9c68 <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d8a70:	210a      	movs	r1, #10
   d8a72:	485b      	ldr	r0, [pc, #364]	; (d8be0 <setup+0x5c8>)
   d8a74:	f001 f8fe 	bl	d9c74 <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d8a78:	2501      	movs	r5, #1
   d8a7a:	2300      	movs	r3, #0
   d8a7c:	461a      	mov	r2, r3
   d8a7e:	4619      	mov	r1, r3
   d8a80:	9501      	str	r5, [sp, #4]
   d8a82:	9500      	str	r5, [sp, #0]
   d8a84:	4856      	ldr	r0, [pc, #344]	; (d8be0 <setup+0x5c8>)
   d8a86:	f001 f96c 	bl	d9d62 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d8a8a:	4629      	mov	r1, r5
   d8a8c:	4854      	ldr	r0, [pc, #336]	; (d8be0 <setup+0x5c8>)
   d8a8e:	f001 f9b7 	bl	d9e00 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d8a92:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d8a94:	4d5c      	ldr	r5, [pc, #368]	; (d8c08 <setup+0x5f0>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d8a96:	4852      	ldr	r0, [pc, #328]	; (d8be0 <setup+0x5c8>)
   d8a98:	f001 f9ac 	bl	d9df4 <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d8a9c:	8828      	ldrh	r0, [r5, #0]
   d8a9e:	2100      	movs	r1, #0
   d8aa0:	f004 fb1c 	bl	dd0dc <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d8aa4:	2200      	movs	r2, #0
   d8aa6:	f04f 33ff 	mov.w	r3, #4294967295
   d8aaa:	4958      	ldr	r1, [pc, #352]	; (d8c0c <setup+0x5f4>)
   d8aac:	8828      	ldrh	r0, [r5, #0]
   d8aae:	9200      	str	r2, [sp, #0]
   d8ab0:	f003 fc70 	bl	dc394 <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  DEBUG_PRINTLN();
   d8ab4:	f003 fcf8 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8ab8:	f002 fc7d 	bl	db3b6 <_ZN5Print7printlnEv>


/////////////
  DEBUG_PRINTLN();
   d8abc:	f003 fcf4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8ac0:	f002 fc79 	bl	db3b6 <_ZN5Print7printlnEv>
  DEBUG_PRINTLN("Setting Up");
   d8ac4:	f003 fcf0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8ac8:	4951      	ldr	r1, [pc, #324]	; (d8c10 <setup+0x5f8>)
  DEBUG_PRINT("Vsup for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vsup);
  DEBUG_PRINT("Vcc for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vcc);
  DEBUG_PRINT("Vref for sensor 1 = ");
  DEBUG_PRINTLN(sensor1._Vref);
   d8aca:	4d52      	ldr	r5, [pc, #328]	; (d8c14 <setup+0x5fc>)
  DEBUG_PRINTLN();


/////////////
  DEBUG_PRINTLN();
  DEBUG_PRINTLN("Setting Up");
   d8acc:	f002 fc7f 	bl	db3ce <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(iSoftwareVersion);
   d8ad0:	f003 fcea 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8ad4:	4b50      	ldr	r3, [pc, #320]	; (d8c18 <setup+0x600>)
   d8ad6:	6819      	ldr	r1, [r3, #0]
   d8ad8:	f002 fc79 	bl	db3ce <_ZN5Print7printlnEPKc>
  DEBUG_PRINT("Vsup for all sensors = ");
   d8adc:	f003 fce4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8ae0:	494e      	ldr	r1, [pc, #312]	; (d8c1c <setup+0x604>)
   d8ae2:	f002 fc61 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vsup);
   d8ae6:	f003 fcdf 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8aea:	4b4d      	ldr	r3, [pc, #308]	; (d8c20 <setup+0x608>)
   d8aec:	2102      	movs	r1, #2
   d8aee:	ed93 0a00 	vldr	s0, [r3]
   d8af2:	f002 fd6f 	bl	db5d4 <_ZN5Print7printlnEfi>
  DEBUG_PRINT("Vcc for all sensors = ");
   d8af6:	f003 fcd7 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8afa:	494a      	ldr	r1, [pc, #296]	; (d8c24 <setup+0x60c>)
   d8afc:	f002 fc54 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vcc);
   d8b00:	f003 fcd2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b04:	4b48      	ldr	r3, [pc, #288]	; (d8c28 <setup+0x610>)
   d8b06:	2102      	movs	r1, #2
   d8b08:	ed93 0a00 	vldr	s0, [r3]
   d8b0c:	f002 fd62 	bl	db5d4 <_ZN5Print7printlnEfi>
  DEBUG_PRINT("Vref for sensor 1 = ");
   d8b10:	f003 fcca 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b14:	4945      	ldr	r1, [pc, #276]	; (d8c2c <setup+0x614>)
   d8b16:	f002 fc47 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Vref);
   d8b1a:	f003 fcc5 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b1e:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
   d8b22:	2102      	movs	r1, #2
   d8b24:	f002 fd56 	bl	db5d4 <_ZN5Print7printlnEfi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  DEBUG_PRINTLN(sensor1._Voff = state.zeroOff);
   d8b28:	f003 fcbe 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b2c:	ed94 0a03 	vldr	s0, [r4, #12]
   d8b30:	2102      	movs	r1, #2
   d8b32:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
   d8b36:	f002 fd4d 	bl	db5d4 <_ZN5Print7printlnEfi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   DEBUG_PRINT("Vzero = ");
  //   DEBUG_PRINTLN(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  DEBUG_PRINT("Tzero = ");
   d8b3a:	f003 fcb5 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b3e:	493c      	ldr	r1, [pc, #240]	; (d8c30 <setup+0x618>)
   d8b40:	f002 fc32 	bl	db3a8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Tz);
   d8b44:	f003 fcb0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b48:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
   d8b4c:	2102      	movs	r1, #2
   d8b4e:	f002 fd41 	bl	db5d4 <_ZN5Print7printlnEfi>
  //sensor1.setXSpan();                                
  //Must have previously zeroed in clean air, returns new span factor.
  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  DEBUG_PRINTLN("Finished Setting Up");
   d8b52:	f003 fca9 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b56:	4937      	ldr	r1, [pc, #220]	; (d8c34 <setup+0x61c>)
   d8b58:	f002 fc39 	bl	db3ce <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN("T1, mV1, C1");
   d8b5c:	f003 fca4 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b60:	4935      	ldr	r1, [pc, #212]	; (d8c38 <setup+0x620>)
   d8b62:	f002 fc34 	bl	db3ce <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d8b66:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d8b6a:	f002 ff13 	bl	db994 <delay>
   d8b6e:	f001 fd6d 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
   d8b72:	4605      	mov	r5, r0
   d8b74:	f001 fd6a 	bl	da64c <HAL_Timer_Get_Milli_Seconds>

  // SPS30 checks
  bool sps30OK = false;
  uint32_t sps30start = millis();

  while (!sps30OK && millis()-sps30start<8000)
   d8b78:	1b40      	subs	r0, r0, r5
   d8b7a:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d8b7e:	f080 80b3 	bcs.w	d8ce8 <setup+0x6d0>
   d8b82:	f004 fb5f 	bl	dd244 <_Z19__fetch_global_Wirev>
  {
    if (!Sensor.begin())
   d8b86:	4601      	mov	r1, r0
   d8b88:	4814      	ldr	r0, [pc, #80]	; (d8bdc <setup+0x5c4>)
   d8b8a:	f001 fbc7 	bl	da31c <_ZN5SPS305beginER7TwoWire>
   d8b8e:	2800      	cmp	r0, #0
   d8b90:	d156      	bne.n	d8c40 <setup+0x628>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d8b92:	f003 fc89 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8b96:	4929      	ldr	r1, [pc, #164]	; (d8c3c <setup+0x624>)
   d8b98:	f002 fc19 	bl	db3ce <_ZN5Print7printlnEPKc>
      delay(1000);
   d8b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8ba0:	f002 fef8 	bl	db994 <delay>
   d8ba4:	e7e6      	b.n	d8b74 <setup+0x55c>
   d8ba6:	bf00      	nop
   d8ba8:	000e75cc 	.word	0x000e75cc
   d8bac:	2003d7d8 	.word	0x2003d7d8
   d8bb0:	000e75d0 	.word	0x000e75d0
   d8bb4:	2003e174 	.word	0x2003e174
   d8bb8:	2003d5b8 	.word	0x2003d5b8
   d8bbc:	000e75d7 	.word	0x000e75d7
   d8bc0:	000e803c 	.word	0x000e803c
   d8bc4:	2003e2c0 	.word	0x2003e2c0
   d8bc8:	386d437f 	.word	0x386d437f
   d8bcc:	4b3d3b00 	.word	0x4b3d3b00
   d8bd0:	000e75de 	.word	0x000e75de
   d8bd4:	2003da80 	.word	0x2003da80
   d8bd8:	2003d578 	.word	0x2003d578
   d8bdc:	2003e1ec 	.word	0x2003e1ec
   d8be0:	2003da48 	.word	0x2003da48
   d8be4:	000e78b2 	.word	0x000e78b2
   d8be8:	000e78c9 	.word	0x000e78c9
   d8bec:	000e78da 	.word	0x000e78da
   d8bf0:	c31c0000 	.word	0xc31c0000
   d8bf4:	000e7912 	.word	0x000e7912
   d8bf8:	41a00000 	.word	0x41a00000
   d8bfc:	000e7926 	.word	0x000e7926
   d8c00:	000e7931 	.word	0x000e7931
   d8c04:	000e75e4 	.word	0x000e75e4
   d8c08:	2003d57c 	.word	0x2003d57c
   d8c0c:	000d52f5 	.word	0x000d52f5
   d8c10:	000e7996 	.word	0x000e7996
   d8c14:	2003ded0 	.word	0x2003ded0
   d8c18:	2003e220 	.word	0x2003e220
   d8c1c:	000e7940 	.word	0x000e7940
   d8c20:	2003d5b4 	.word	0x2003d5b4
   d8c24:	000e7958 	.word	0x000e7958
   d8c28:	2003d5b0 	.word	0x2003d5b0
   d8c2c:	000e796f 	.word	0x000e796f
   d8c30:	000e7984 	.word	0x000e7984
   d8c34:	000e798d 	.word	0x000e798d
   d8c38:	000e79a1 	.word	0x000e79a1
   d8c3c:	000e75f2 	.word	0x000e75f2
    }
    else
    {
      DEBUG_PRINTLN("Read SPS30");
   d8c40:	f003 fc32 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8c44:	492e      	ldr	r1, [pc, #184]	; (d8d00 <setup+0x6e8>)
   d8c46:	f002 fbc2 	bl	db3ce <_ZN5Print7printlnEPKc>
    delay(1000);
    System.reset();    
  }

  #ifdef Version_2
  Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d8c4a:	4b2e      	ldr	r3, [pc, #184]	; (d8d04 <setup+0x6ec>)
   d8c4c:	4a2e      	ldr	r2, [pc, #184]	; (d8d08 <setup+0x6f0>)
   d8c4e:	881b      	ldrh	r3, [r3, #0]
   d8c50:	492e      	ldr	r1, [pc, #184]	; (d8d0c <setup+0x6f4>)
   d8c52:	482f      	ldr	r0, [pc, #188]	; (d8d10 <setup+0x6f8>)
   d8c54:	f7fc ff60 	bl	d5b18 <_ZN13BlynkParticle6configEPKcS1_t>
  #else
  Blynk.config(auth, "zeptosense.blynk.cc");
  #endif

  connectWithoutWaiting();
   d8c58:	f7fe fcae 	bl	d75b8 <_Z21connectWithoutWaitingv>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d8c5c:	2300      	movs	r3, #0
   d8c5e:	9301      	str	r3, [sp, #4]
   d8c60:	9300      	str	r3, [sp, #0]
   d8c62:	461a      	mov	r2, r3
   d8c64:	492b      	ldr	r1, [pc, #172]	; (d8d14 <setup+0x6fc>)
   d8c66:	482c      	ldr	r0, [pc, #176]	; (d8d18 <setup+0x700>)
   d8c68:	f001 ffa0 	bl	dabac <spark_subscribe>
  //*** Commented out for testing without particle connected ***
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d8c6c:	4b2b      	ldr	r3, [pc, #172]	; (d8d1c <setup+0x704>)
   d8c6e:	781b      	ldrb	r3, [r3, #0]
   d8c70:	b90b      	cbnz	r3, d8c76 <setup+0x65e>
  {
    publishGMTOffsetRequest();
   d8c72:	f7fd f823 	bl	d5cbc <_Z23publishGMTOffsetRequestv>
   d8c76:	f001 fce9 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8c7a:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d8c7e:	4605      	mov	r5, r0
   d8c80:	4827      	ldr	r0, [pc, #156]	; (d8d20 <setup+0x708>)
   d8c82:	f001 f9b8 	bl	d9ff6 <_ZN5SPS3013dataAvailableEv>
   d8c86:	b950      	cbnz	r0, d8c9e <setup+0x686>
   d8c88:	f001 fce0 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
   d8c8c:	1b40      	subs	r0, r0, r5
   d8c8e:	42b0      	cmp	r0, r6
   d8c90:	d805      	bhi.n	d8c9e <setup+0x686>
  {
    delay(100);
   d8c92:	2064      	movs	r0, #100	; 0x64
   d8c94:	f002 fe7e 	bl	db994 <delay>
    checkAccel();
   d8c98:	f7fe fb30 	bl	d72fc <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8c9c:	e7f0      	b.n	d8c80 <setup+0x668>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d8c9e:	68a3      	ldr	r3, [r4, #8]
   d8ca0:	4a20      	ldr	r2, [pc, #128]	; (d8d24 <setup+0x70c>)
   d8ca2:	4821      	ldr	r0, [pc, #132]	; (d8d28 <setup+0x710>)
   d8ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d8ca8:	4359      	muls	r1, r3
   d8caa:	f001 fb9f 	bl	da3ec <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d8cae:	481e      	ldr	r0, [pc, #120]	; (d8d28 <setup+0x710>)
   d8cb0:	f001 fbbe 	bl	da430 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d8cb4:	4a1d      	ldr	r2, [pc, #116]	; (d8d2c <setup+0x714>)
   d8cb6:	481e      	ldr	r0, [pc, #120]	; (d8d30 <setup+0x718>)
   d8cb8:	216f      	movs	r1, #111	; 0x6f
   d8cba:	f001 fb97 	bl	da3ec <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d8cbe:	481c      	ldr	r0, [pc, #112]	; (d8d30 <setup+0x718>)
   d8cc0:	f001 fbb6 	bl	da430 <_ZN10BlynkTimer3runEv>

  DEBUG_PRINTLN("Setup complete");
   d8cc4:	f003 fbf0 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8cc8:	491a      	ldr	r1, [pc, #104]	; (d8d34 <setup+0x71c>)
   d8cca:	f002 fb80 	bl	db3ce <_ZN5Print7printlnEPKc>
  StateString = "RDY";
   d8cce:	491a      	ldr	r1, [pc, #104]	; (d8d38 <setup+0x720>)
   d8cd0:	481a      	ldr	r0, [pc, #104]	; (d8d3c <setup+0x724>)
   d8cd2:	f002 fa40 	bl	db156 <_ZN6StringaSEPKc>
  readSensors(); 
   d8cd6:	f7fe fce3 	bl	d76a0 <_Z11readSensorsv>
  DEBUG_PRINTLN("End Setup() function");
   d8cda:	f003 fbe5 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8cde:	4918      	ldr	r1, [pc, #96]	; (d8d40 <setup+0x728>)
   d8ce0:	f002 fb75 	bl	db3ce <_ZN5Print7printlnEPKc>
}
   d8ce4:	b00b      	add	sp, #44	; 0x2c
   d8ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
  
  if (!sps30OK)
  {
    DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d8ce8:	f003 fbde 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8cec:	4915      	ldr	r1, [pc, #84]	; (d8d44 <setup+0x72c>)
   d8cee:	f002 fb6e 	bl	db3ce <_ZN5Print7printlnEPKc>
    delay(1000);
   d8cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8cf6:	f002 fe4d 	bl	db994 <delay>
    System.reset();    
   d8cfa:	f002 f8a9 	bl	dae50 <_ZN11SystemClass5resetEv>
   d8cfe:	e7a4      	b.n	d8c4a <setup+0x632>
   d8d00:	000e7616 	.word	0x000e7616
   d8d04:	2003d574 	.word	0x2003d574
   d8d08:	000e7493 	.word	0x000e7493
   d8d0c:	2003d580 	.word	0x2003d580
   d8d10:	2003e234 	.word	0x2003e234
   d8d14:	000d5c85 	.word	0x000d5c85
   d8d18:	000e79ad 	.word	0x000e79ad
   d8d1c:	2003e1ac 	.word	0x2003e1ac
   d8d20:	2003e1ec 	.word	0x2003e1ec
   d8d24:	000d76a1 	.word	0x000d76a1
   d8d28:	2003d7fc 	.word	0x2003d7fc
   d8d2c:	000d72fd 	.word	0x000d72fd
   d8d30:	2003df18 	.word	0x2003df18
   d8d34:	000e79c5 	.word	0x000e79c5
   d8d38:	000e75cc 	.word	0x000e75cc
   d8d3c:	2003d7d8 	.word	0x2003d7d8
   d8d40:	000e79d4 	.word	0x000e79d4
   d8d44:	000e777f 	.word	0x000e777f

000d8d48 <loop>:
  readSensors(); 
  DEBUG_PRINTLN("End Setup() function");
}

void loop()
{
   d8d48:	b513      	push	{r0, r1, r4, lr}
   //If woken up by a RTC Sleep then was in Standby so go into Deep Sleep now
  SleepResult result = System.sleepResult();
   d8d4a:	491c      	ldr	r1, [pc, #112]	; (d8dbc <loop+0x74>)
   d8d4c:	4c1c      	ldr	r4, [pc, #112]	; (d8dc0 <loop+0x78>)
   d8d4e:	4668      	mov	r0, sp
   d8d50:	f7fc fafe 	bl	d5350 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d8d54:	4668      	mov	r0, sp
   d8d56:	f002 f8f5 	bl	daf44 <_ZNK11SleepResult6reasonEv>
   d8d5a:	2802      	cmp	r0, #2
   d8d5c:	d111      	bne.n	d8d82 <loop+0x3a>
    }
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
   d8d5e:	f003 fba3 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   d8d62:	4918      	ldr	r1, [pc, #96]	; (d8dc4 <loop+0x7c>)
   d8d64:	f002 fb33 	bl	db3ce <_ZN5Print7printlnEPKc>
      state.bSleepModeStandby=false;
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8d68:	4b17      	ldr	r3, [pc, #92]	; (d8dc8 <loop+0x80>)
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8d6a:	2100      	movs	r1, #0
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8d6c:	8818      	ldrh	r0, [r3, #0]
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8d6e:	f884 1424 	strb.w	r1, [r4, #1060]	; 0x424
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8d72:	f004 f9c4 	bl	dd0fe <digitalWrite>
      delay(2000);
   d8d76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8d7a:	f002 fe0b 	bl	db994 <delay>
      deepSleep();
   d8d7e:	f7fd fd95 	bl	d68ac <_Z9deepSleepv>
    case WAKEUP_REASON_PIN_OR_RTC: {
      break;
    }
  }

  Blynk.run();
   d8d82:	2100      	movs	r1, #0
   d8d84:	4811      	ldr	r0, [pc, #68]	; (d8dcc <loop+0x84>)
   d8d86:	f7fd fb6f 	bl	d6468 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d8d8a:	4811      	ldr	r0, [pc, #68]	; (d8dd0 <loop+0x88>)
   d8d8c:	f001 fb50 	bl	da430 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d8d90:	4810      	ldr	r0, [pc, #64]	; (d8dd4 <loop+0x8c>)
   d8d92:	f001 fb4d 	bl	da430 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d8d96:	4b10      	ldr	r3, [pc, #64]	; (d8dd8 <loop+0x90>)
   d8d98:	6862      	ldr	r2, [r4, #4]
   d8d9a:	681b      	ldr	r3, [r3, #0]
   d8d9c:	429a      	cmp	r2, r3
   d8d9e:	dc0a      	bgt.n	d8db6 <loop+0x6e>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d8da0:	4b09      	ldr	r3, [pc, #36]	; (d8dc8 <loop+0x80>)
   d8da2:	2100      	movs	r1, #0
   d8da4:	8818      	ldrh	r0, [r3, #0]
   d8da6:	f004 f9aa 	bl	dd0fe <digitalWrite>
    delay(2000);
   d8daa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8dae:	f002 fdf1 	bl	db994 <delay>
    deepSleep();
   d8db2:	f7fd fd7b 	bl	d68ac <_Z9deepSleepv>
  }

}
   d8db6:	b002      	add	sp, #8
   d8db8:	bd10      	pop	{r4, pc}
   d8dba:	bf00      	nop
   d8dbc:	2003e278 	.word	0x2003e278
   d8dc0:	2003da80 	.word	0x2003da80
   d8dc4:	000e79e9 	.word	0x000e79e9
   d8dc8:	2003d570 	.word	0x2003d570
   d8dcc:	2003e234 	.word	0x2003e234
   d8dd0:	2003d7fc 	.word	0x2003d7fc
   d8dd4:	2003df18 	.word	0x2003df18
   d8dd8:	2003e230 	.word	0x2003e230

000d8ddc <_GLOBAL__sub_I_CycleOnTime>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8ddc:	4b98      	ldr	r3, [pc, #608]	; (d9040 <_GLOBAL__sub_I_CycleOnTime+0x264>)
   d8dde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8de2:	2500      	movs	r5, #0
   d8de4:	601d      	str	r5, [r3, #0]
   d8de6:	4b97      	ldr	r3, [pc, #604]	; (d9044 <_GLOBAL__sub_I_CycleOnTime+0x268>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d8de8:	4e97      	ldr	r6, [pc, #604]	; (d9048 <_GLOBAL__sub_I_CycleOnTime+0x26c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d8dea:	4c98      	ldr	r4, [pc, #608]	; (d904c <_GLOBAL__sub_I_CycleOnTime+0x270>)

// SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8dec:	f8df 82ec 	ldr.w	r8, [pc, #748]	; d90dc <_GLOBAL__sub_I_CycleOnTime+0x300>
   d8df0:	2701      	movs	r7, #1
   d8df2:	601f      	str	r7, [r3, #0]
   d8df4:	4b96      	ldr	r3, [pc, #600]	; (d9050 <_GLOBAL__sub_I_CycleOnTime+0x274>)
   d8df6:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d8df8:	f001 fb98 	bl	da52c <HAL_Pin_Map>
   d8dfc:	4630      	mov	r0, r6
   d8dfe:	f003 ff9b 	bl	dcd38 <_ZN9TCPClientC1Ev>
   d8e02:	f106 001c 	add.w	r0, r6, #28
   d8e06:	f003 f9ed 	bl	dc1e4 <_ZN9IPAddressC1Ev>
   d8e0a:	4622      	mov	r2, r4
   d8e0c:	4991      	ldr	r1, [pc, #580]	; (d9054 <_GLOBAL__sub_I_CycleOnTime+0x278>)
   d8e0e:	6375      	str	r5, [r6, #52]	; 0x34
   d8e10:	4630      	mov	r0, r6
   d8e12:	8735      	strh	r5, [r6, #56]	; 0x38
   d8e14:	f004 fa3c 	bl	dd290 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d8e18:	4b8f      	ldr	r3, [pc, #572]	; (d9058 <_GLOBAL__sub_I_CycleOnTime+0x27c>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d8e1a:	462a      	mov	r2, r5
   d8e1c:	601e      	str	r6, [r3, #0]
   d8e1e:	605d      	str	r5, [r3, #4]
   d8e20:	609d      	str	r5, [r3, #8]
   d8e22:	60dd      	str	r5, [r3, #12]
   d8e24:	611d      	str	r5, [r3, #16]
   d8e26:	615d      	str	r5, [r3, #20]
   d8e28:	831d      	strh	r5, [r3, #24]
   d8e2a:	835d      	strh	r5, [r3, #26]
   d8e2c:	771d      	strb	r5, [r3, #28]
   d8e2e:	775d      	strb	r5, [r3, #29]
   d8e30:	2114      	movs	r1, #20
   d8e32:	2002      	movs	r0, #2
   d8e34:	f001 fe24 	bl	daa80 <led_pattern_period>
   d8e38:	4e88      	ldr	r6, [pc, #544]	; (d905c <_GLOBAL__sub_I_CycleOnTime+0x280>)
   d8e3a:	9701      	str	r7, [sp, #4]
   d8e3c:	f04f 091e 	mov.w	r9, #30
   d8e40:	4603      	mov	r3, r0
   d8e42:	f8cd 9000 	str.w	r9, [sp]
   d8e46:	2202      	movs	r2, #2
   d8e48:	4985      	ldr	r1, [pc, #532]	; (d9060 <_GLOBAL__sub_I_CycleOnTime+0x284>)
   d8e4a:	4630      	mov	r0, r6
   d8e4c:	f001 ff62 	bl	dad14 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d8e50:	4622      	mov	r2, r4
   d8e52:	4641      	mov	r1, r8
   d8e54:	4630      	mov	r0, r6
   d8e56:	f004 fa1b 	bl	dd290 <__aeabi_atexit>
   d8e5a:	462a      	mov	r2, r5
   d8e5c:	2114      	movs	r1, #20
   d8e5e:	2002      	movs	r0, #2
   d8e60:	f001 fe0e 	bl	daa80 <led_pattern_period>
   d8e64:	4e7f      	ldr	r6, [pc, #508]	; (d9064 <_GLOBAL__sub_I_CycleOnTime+0x288>)
   d8e66:	9701      	str	r7, [sp, #4]
   d8e68:	4603      	mov	r3, r0
   d8e6a:	f8cd 9000 	str.w	r9, [sp]
   d8e6e:	2202      	movs	r2, #2
   d8e70:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d8e74:	4630      	mov	r0, r6
   d8e76:	f001 ff4d 	bl	dad14 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8e7a:	4622      	mov	r2, r4
   d8e7c:	4641      	mov	r1, r8
   d8e7e:	4630      	mov	r0, r6
   d8e80:	f004 fa06 	bl	dd290 <__aeabi_atexit>

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8e84:	4878      	ldr	r0, [pc, #480]	; (d9068 <_GLOBAL__sub_I_CycleOnTime+0x28c>)

MB85RC256V fram(Wire, 0);
   d8e86:	4e79      	ldr	r6, [pc, #484]	; (d906c <_GLOBAL__sub_I_CycleOnTime+0x290>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8e88:	4f79      	ldr	r7, [pc, #484]	; (d9070 <_GLOBAL__sub_I_CycleOnTime+0x294>)
   d8e8a:	f8df 8254 	ldr.w	r8, [pc, #596]	; d90e0 <_GLOBAL__sub_I_CycleOnTime+0x304>
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8e8e:	f000 fddb 	bl	d9a48 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d8e92:	f004 f9d7 	bl	dd244 <_Z19__fetch_global_Wirev>
   d8e96:	462a      	mov	r2, r5
   d8e98:	4601      	mov	r1, r0
   d8e9a:	4630      	mov	r0, r6
   d8e9c:	f000 fc7e 	bl	d979c <_ZN10MB85RC256VC1ER7TwoWirei>
   d8ea0:	4622      	mov	r2, r4
   d8ea2:	4974      	ldr	r1, [pc, #464]	; (d9074 <_GLOBAL__sub_I_CycleOnTime+0x298>)
   d8ea4:	4630      	mov	r0, r6
   d8ea6:	f004 f9f3 	bl	dd290 <__aeabi_atexit>

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8eaa:	4873      	ldr	r0, [pc, #460]	; (d9078 <_GLOBAL__sub_I_CycleOnTime+0x29c>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d8eac:	4e73      	ldr	r6, [pc, #460]	; (d907c <_GLOBAL__sub_I_CycleOnTime+0x2a0>)

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8eae:	f000 fadd 	bl	d946c <_ZN8MCP7941xC1Ev>
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d8eb2:	4873      	ldr	r0, [pc, #460]	; (d9080 <_GLOBAL__sub_I_CycleOnTime+0x2a4>)
   d8eb4:	f000 fd15 	bl	d98e2 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d8eb8:	4872      	ldr	r0, [pc, #456]	; (d9084 <_GLOBAL__sub_I_CycleOnTime+0x2a8>)
   d8eba:	f001 f85a 	bl	d9f72 <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d8ebe:	4629      	mov	r1, r5
   d8ec0:	4630      	mov	r0, r6
   d8ec2:	f002 fdf1 	bl	dbaa8 <_ZN9FuelGaugeC1Eb>
   d8ec6:	4622      	mov	r2, r4
   d8ec8:	496f      	ldr	r1, [pc, #444]	; (d9088 <_GLOBAL__sub_I_CycleOnTime+0x2ac>)
   d8eca:	4630      	mov	r0, r6
   d8ecc:	f004 f9e0 	bl	dd290 <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8ed0:	4e6e      	ldr	r6, [pc, #440]	; (d908c <_GLOBAL__sub_I_CycleOnTime+0x2b0>)
   d8ed2:	4639      	mov	r1, r7
   d8ed4:	4640      	mov	r0, r8
   d8ed6:	f002 f8ec 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8eda:	4640      	mov	r0, r8
   d8edc:	f8df 8204 	ldr.w	r8, [pc, #516]	; d90e4 <_GLOBAL__sub_I_CycleOnTime+0x308>
   d8ee0:	4622      	mov	r2, r4
   d8ee2:	4631      	mov	r1, r6
   d8ee4:	f004 f9d4 	bl	dd290 <__aeabi_atexit>
   d8ee8:	4639      	mov	r1, r7
   d8eea:	4640      	mov	r0, r8
   d8eec:	f002 f8e1 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8ef0:	4640      	mov	r0, r8
   d8ef2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d90e8 <_GLOBAL__sub_I_CycleOnTime+0x30c>
   d8ef6:	4622      	mov	r2, r4
   d8ef8:	4631      	mov	r1, r6
   d8efa:	f004 f9c9 	bl	dd290 <__aeabi_atexit>
   d8efe:	4639      	mov	r1, r7
   d8f00:	4640      	mov	r0, r8
   d8f02:	f002 f8d6 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f06:	4640      	mov	r0, r8
   d8f08:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d90ec <_GLOBAL__sub_I_CycleOnTime+0x310>
   d8f0c:	4622      	mov	r2, r4
   d8f0e:	4631      	mov	r1, r6
   d8f10:	f004 f9be 	bl	dd290 <__aeabi_atexit>
   d8f14:	4639      	mov	r1, r7
   d8f16:	4640      	mov	r0, r8
   d8f18:	f002 f8cb 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f1c:	4640      	mov	r0, r8
   d8f1e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d90f0 <_GLOBAL__sub_I_CycleOnTime+0x314>
   d8f22:	4622      	mov	r2, r4
   d8f24:	4631      	mov	r1, r6
   d8f26:	f004 f9b3 	bl	dd290 <__aeabi_atexit>
   d8f2a:	4639      	mov	r1, r7
   d8f2c:	4640      	mov	r0, r8
   d8f2e:	f002 f8c0 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f32:	4640      	mov	r0, r8
   d8f34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d90f4 <_GLOBAL__sub_I_CycleOnTime+0x318>
   d8f38:	4622      	mov	r2, r4
   d8f3a:	4631      	mov	r1, r6
   d8f3c:	f004 f9a8 	bl	dd290 <__aeabi_atexit>
   d8f40:	4639      	mov	r1, r7
   d8f42:	4640      	mov	r0, r8
   d8f44:	f002 f8b5 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f48:	4640      	mov	r0, r8
   d8f4a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d90f8 <_GLOBAL__sub_I_CycleOnTime+0x31c>
   d8f4e:	4622      	mov	r2, r4
   d8f50:	4631      	mov	r1, r6
   d8f52:	f004 f99d 	bl	dd290 <__aeabi_atexit>
   d8f56:	4639      	mov	r1, r7
   d8f58:	4640      	mov	r0, r8
   d8f5a:	f002 f8aa 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f5e:	4640      	mov	r0, r8
   d8f60:	f8df 8198 	ldr.w	r8, [pc, #408]	; d90fc <_GLOBAL__sub_I_CycleOnTime+0x320>
   d8f64:	4622      	mov	r2, r4
   d8f66:	4631      	mov	r1, r6
   d8f68:	f004 f992 	bl	dd290 <__aeabi_atexit>
   d8f6c:	4639      	mov	r1, r7
   d8f6e:	4640      	mov	r0, r8
   d8f70:	f002 f89f 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f74:	4640      	mov	r0, r8
String datastring;
   d8f76:	f8df 8188 	ldr.w	r8, [pc, #392]	; d9100 <_GLOBAL__sub_I_CycleOnTime+0x324>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8f7a:	4622      	mov	r2, r4
   d8f7c:	4631      	mov	r1, r6
   d8f7e:	f004 f987 	bl	dd290 <__aeabi_atexit>
String datastring;
   d8f82:	4639      	mov	r1, r7
   d8f84:	4640      	mov	r0, r8
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8f86:	4f42      	ldr	r7, [pc, #264]	; (d9090 <_GLOBAL__sub_I_CycleOnTime+0x2b4>)
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
String datastring;
   d8f88:	f002 f893 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f8c:	4622      	mov	r2, r4
   d8f8e:	4631      	mov	r1, r6
   d8f90:	4640      	mov	r0, r8
   d8f92:	f004 f97d 	bl	dd290 <__aeabi_atexit>
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8f96:	493f      	ldr	r1, [pc, #252]	; (d9094 <_GLOBAL__sub_I_CycleOnTime+0x2b8>)
   d8f98:	4638      	mov	r0, r7
   d8f9a:	f002 f88a 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8f9e:	4638      	mov	r0, r7
String InstallLocation = " Loc = Test Unit ";
   d8fa0:	4f3d      	ldr	r7, [pc, #244]	; (d9098 <_GLOBAL__sub_I_CycleOnTime+0x2bc>)
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8fa2:	4622      	mov	r2, r4
   d8fa4:	4631      	mov	r1, r6
   d8fa6:	f004 f973 	bl	dd290 <__aeabi_atexit>
String InstallLocation = " Loc = Test Unit ";
   d8faa:	493c      	ldr	r1, [pc, #240]	; (d909c <_GLOBAL__sub_I_CycleOnTime+0x2c0>)
   d8fac:	4638      	mov	r0, r7
   d8fae:	f002 f880 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8fb2:	4638      	mov	r0, r7
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8fb4:	4f3a      	ldr	r7, [pc, #232]	; (d90a0 <_GLOBAL__sub_I_CycleOnTime+0x2c4>)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
String InstallLocation = " Loc = Test Unit ";
   d8fb6:	4622      	mov	r2, r4
   d8fb8:	4631      	mov	r1, r6
   d8fba:	f004 f969 	bl	dd290 <__aeabi_atexit>
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8fbe:	4939      	ldr	r1, [pc, #228]	; (d90a4 <_GLOBAL__sub_I_CycleOnTime+0x2c8>)
   d8fc0:	4638      	mov	r0, r7
   d8fc2:	f002 f876 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8fc6:	4622      	mov	r2, r4
   d8fc8:	4631      	mov	r1, r6
   d8fca:	4638      	mov	r0, r7
   d8fcc:	f004 f960 	bl	dd290 <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8fd0:	4e35      	ldr	r6, [pc, #212]	; (d90a8 <_GLOBAL__sub_I_CycleOnTime+0x2cc>)
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d8fd2:	4836      	ldr	r0, [pc, #216]	; (d90ac <_GLOBAL__sub_I_CycleOnTime+0x2d0>)
   d8fd4:	f001 f9af 	bl	da336 <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d8fd8:	4835      	ldr	r0, [pc, #212]	; (d90b0 <_GLOBAL__sub_I_CycleOnTime+0x2d4>)
   d8fda:	f001 f9ac 	bl	da336 <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8fde:	4935      	ldr	r1, [pc, #212]	; (d90b4 <_GLOBAL__sub_I_CycleOnTime+0x2d8>)
   d8fe0:	4630      	mov	r0, r6
   d8fe2:	f002 f866 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8fe6:	4934      	ldr	r1, [pc, #208]	; (d90b8 <_GLOBAL__sub_I_CycleOnTime+0x2dc>)
   d8fe8:	f106 0010 	add.w	r0, r6, #16
   d8fec:	f002 f861 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8ff0:	4932      	ldr	r1, [pc, #200]	; (d90bc <_GLOBAL__sub_I_CycleOnTime+0x2e0>)
   d8ff2:	f106 0020 	add.w	r0, r6, #32
   d8ff6:	f002 f85c 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d8ffa:	4931      	ldr	r1, [pc, #196]	; (d90c0 <_GLOBAL__sub_I_CycleOnTime+0x2e4>)
   d8ffc:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d9000:	f002 f857 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d9004:	492f      	ldr	r1, [pc, #188]	; (d90c4 <_GLOBAL__sub_I_CycleOnTime+0x2e8>)
   d9006:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d900a:	f002 f852 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d900e:	492e      	ldr	r1, [pc, #184]	; (d90c8 <_GLOBAL__sub_I_CycleOnTime+0x2ec>)
   d9010:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d9014:	f002 f84d 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
   d9018:	492c      	ldr	r1, [pc, #176]	; (d90cc <_GLOBAL__sub_I_CycleOnTime+0x2f0>)
   d901a:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d901e:	f002 f848 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d9022:	4622      	mov	r2, r4
   d9024:	492a      	ldr	r1, [pc, #168]	; (d90d0 <_GLOBAL__sub_I_CycleOnTime+0x2f4>)
   d9026:	4628      	mov	r0, r5
   d9028:	f004 f932 	bl	dd290 <__aeabi_atexit>

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d902c:	ed9f 0a29 	vldr	s0, [pc, #164]	; d90d4 <_GLOBAL__sub_I_CycleOnTime+0x2f8>
   d9030:	4829      	ldr	r0, [pc, #164]	; (d90d8 <_GLOBAL__sub_I_CycleOnTime+0x2fc>)
   d9032:	220f      	movs	r2, #15
   d9034:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d9036:	b003      	add	sp, #12
   d9038:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d903c:	f000 b9e2 	b.w	d9404 <_ZN3IAQC1Eiif>
   d9040:	2003e170 	.word	0x2003e170
   d9044:	2003dec8 	.word	0x2003dec8
   d9048:	2003e1b0 	.word	0x2003e1b0
   d904c:	2003d6b0 	.word	0x2003d6b0
   d9050:	2003d714 	.word	0x2003d714
   d9054:	000d57d9 	.word	0x000d57d9
   d9058:	2003e234 	.word	0x2003e234
   d905c:	2003d6f4 	.word	0x2003d6f4
   d9060:	00ffff00 	.word	0x00ffff00
   d9064:	2003d6c8 	.word	0x2003d6c8
   d9068:	2003da48 	.word	0x2003da48
   d906c:	2003d6e8 	.word	0x2003d6e8
   d9070:	000e6ff6 	.word	0x000e6ff6
   d9074:	000d9785 	.word	0x000d9785
   d9078:	2003e174 	.word	0x2003e174
   d907c:	2003e1a4 	.word	0x2003e1a4
   d9080:	2003deac 	.word	0x2003deac
   d9084:	2003e1ec 	.word	0x2003e1ec
   d9088:	000dbac7 	.word	0x000dbac7
   d908c:	000db025 	.word	0x000db025
   d9090:	2003e220 	.word	0x2003e220
   d9094:	000e7a38 	.word	0x000e7a38
   d9098:	2003e190 	.word	0x2003e190
   d909c:	000e7a57 	.word	0x000e7a57
   d90a0:	2003d7d8 	.word	0x2003d7d8
   d90a4:	000e75cc 	.word	0x000e75cc
   d90a8:	2003d718 	.word	0x2003d718
   d90ac:	2003d7fc 	.word	0x2003d7fc
   d90b0:	2003df18 	.word	0x2003df18
   d90b4:	000e7a69 	.word	0x000e7a69
   d90b8:	000e7a6d 	.word	0x000e7a6d
   d90bc:	000e7a71 	.word	0x000e7a71
   d90c0:	000e7a7c 	.word	0x000e7a7c
   d90c4:	000e7a80 	.word	0x000e7a80
   d90c8:	000e7a85 	.word	0x000e7a85
   d90cc:	000e761b 	.word	0x000e761b
   d90d0:	000d5301 	.word	0x000d5301
   d90d4:	4081999a 	.word	0x4081999a
   d90d8:	2003ded0 	.word	0x2003ded0
   d90dc:	000d53f1 	.word	0x000d53f1
   d90e0:	2003d788 	.word	0x2003d788
   d90e4:	2003d798 	.word	0x2003d798
   d90e8:	2003d7a8 	.word	0x2003d7a8
   d90ec:	2003d7b8 	.word	0x2003d7b8
   d90f0:	2003d7c8 	.word	0x2003d7c8
   d90f4:	2003e180 	.word	0x2003e180
   d90f8:	2003d7e8 	.word	0x2003d7e8
   d90fc:	2003d6b8 	.word	0x2003d6b8
   d9100:	2003deb0 	.word	0x2003deb0

000d9104 <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d9104:	e880 0006 	stmia.w	r0, {r1, r2}
   d9108:	4a10      	ldr	r2, [pc, #64]	; (d914c <_ZN3ULPC1Eiif+0x48>)
   d910a:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d910c:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d910e:	4a10      	ldr	r2, [pc, #64]	; (d9150 <_ZN3ULPC1Eiif+0x4c>)
   d9110:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9112:	4a10      	ldr	r2, [pc, #64]	; (d9154 <_ZN3ULPC1Eiif+0x50>)
   d9114:	eddf 6a10 	vldr	s13, [pc, #64]	; d9158 <_ZN3ULPC1Eiif+0x54>
   d9118:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d911c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d915c <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d9120:	490f      	ldr	r1, [pc, #60]	; (d9160 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d9122:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9126:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d912a:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d912c:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d9130:	eddf 6a0c 	vldr	s13, [pc, #48]	; d9164 <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d9134:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d9138:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d913c:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d9140:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9144:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d9148:	4770      	bx	lr
   d914a:	bf00      	nop
   d914c:	41a00000 	.word	0x41a00000
   d9150:	41900000 	.word	0x41900000
   d9154:	2003d5b4 	.word	0x2003d5b4
   d9158:	42680000 	.word	0x42680000
   d915c:	42ae0000 	.word	0x42ae0000
   d9160:	42200000 	.word	0x42200000
   d9164:	42180000 	.word	0x42180000

000d9168 <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d9168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d916c:	460c      	mov	r4, r1
   d916e:	4606      	mov	r6, r0
   d9170:	4690      	mov	r8, r2
   d9172:	f001 fa6b 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d9176:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d917a:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d917e:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d9180:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d9182:	88b0      	ldrh	r0, [r6, #4]
   d9184:	f003 ffe7 	bl	dd156 <analogRead>
   d9188:	4404      	add	r4, r0
    delay(1);
   d918a:	2001      	movs	r0, #1
   d918c:	f002 fc02 	bl	db994 <delay>
   d9190:	f001 fa5c 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d9194:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d9196:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d919a:	d3f2      	bcc.n	d9182 <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d919c:	ee07 5a10 	vmov	s14, r5
   d91a0:	ee07 4a90 	vmov	s15, r4
   d91a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d91a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d91ac:	4b18      	ldr	r3, [pc, #96]	; (d9210 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d91ae:	edd6 5a08 	vldr	s11, [r6, #32]
   d91b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d91b6:	edd3 7a00 	vldr	s15, [r3]
   d91ba:	4b16      	ldr	r3, [pc, #88]	; (d9214 <_ZN3ULP7getTempEiPc+0xac>)
   d91bc:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d91c0:	4b15      	ldr	r3, [pc, #84]	; (d9218 <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d91c2:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d91c6:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d91c8:	ee67 7a27 	vmul.f32	s15, s14, s15
   d91cc:	ed9f 7a13 	vldr	s14, [pc, #76]	; d921c <_ZN3ULP7getTempEiPc+0xb4>
   d91d0:	ee27 7a87 	vmul.f32	s14, s15, s14
   d91d4:	edd6 7a07 	vldr	s15, [r6, #28]
   d91d8:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d91dc:	d10c      	bne.n	d91f8 <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d91de:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d91e2:	ee67 7a87 	vmul.f32	s15, s15, s14
   d91e6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d91ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d91ee:	eddf 7a0c 	vldr	s15, [pc, #48]	; d9220 <_ZN3ULP7getTempEiPc+0xb8>
   d91f2:	ee77 7a27 	vadd.f32	s15, s14, s15
   d91f6:	e002      	b.n	d91fe <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d91f8:	4b0a      	ldr	r3, [pc, #40]	; (d9224 <_ZN3ULP7getTempEiPc+0xbc>)
   d91fa:	4598      	cmp	r8, r3
   d91fc:	d102      	bne.n	d9204 <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d91fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d9202:	e001      	b.n	d9208 <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d9204:	eddf 7a08 	vldr	s15, [pc, #32]	; d9228 <_ZN3ULP7getTempEiPc+0xc0>
}
   d9208:	ee17 0a90 	vmov	r0, s15
   d920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9210:	2003d5b0 	.word	0x2003d5b0
   d9214:	2003d5b4 	.word	0x2003d5b4
   d9218:	000e7680 	.word	0x000e7680
   d921c:	39800000 	.word	0x39800000
   d9220:	42000000 	.word	0x42000000
   d9224:	000e7a7e 	.word	0x000e7a7e
   d9228:	00000000 	.word	0x00000000

000d922c <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d922e:	4604      	mov	r4, r0
   d9230:	f001 fa0c 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d9234:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d9236:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d923a:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d923c:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d923e:	8820      	ldrh	r0, [r4, #0]
   d9240:	f003 ff89 	bl	dd156 <analogRead>
   d9244:	4405      	add	r5, r0
    delay(1);
   d9246:	2001      	movs	r0, #1
   d9248:	f002 fba4 	bl	db994 <delay>
   d924c:	f001 f9fe 	bl	da64c <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d9250:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d9252:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d9256:	d3f2      	bcc.n	d923e <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d9258:	ee07 5a90 	vmov	s15, r5
   d925c:	ee07 6a10 	vmov	s14, r6
   d9260:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9264:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d9268:	4b15      	ldr	r3, [pc, #84]	; (d92c0 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d926a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d926e:	edd3 7a00 	vldr	s15, [r3]
   d9272:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d9276:	ee17 0a90 	vmov	r0, s15
   d927a:	f009 fdd5 	bl	e2e28 <__aeabi_f2d>
   d927e:	2200      	movs	r2, #0
   d9280:	4b10      	ldr	r3, [pc, #64]	; (d92c4 <_ZN3ULP4zeroEv+0x98>)
   d9282:	f009 fe25 	bl	e2ed0 <__aeabi_dmul>
   d9286:	4b10      	ldr	r3, [pc, #64]	; (d92c8 <_ZN3ULP4zeroEv+0x9c>)
   d9288:	2200      	movs	r2, #0
   d928a:	f009 fe21 	bl	e2ed0 <__aeabi_dmul>
   d928e:	f00a f917 	bl	e34c0 <__aeabi_d2f>
   d9292:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d9296:	4a0d      	ldr	r2, [pc, #52]	; (d92cc <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d9298:	ee07 0a10 	vmov	s14, r0
   d929c:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d92a0:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d92a2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d92a6:	4620      	mov	r0, r4
   d92a8:	f7ff ff5e 	bl	d9168 <_ZN3ULP7getTempEiPc>
   d92ac:	ee07 0a90 	vmov	s15, r0
   d92b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d92b4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d92b8:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d92bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d92be:	bf00      	nop
   d92c0:	2003d5b0 	.word	0x2003d5b0
   d92c4:	408f4000 	.word	0x408f4000
   d92c8:	3f300000 	.word	0x3f300000
   d92cc:	000e7a7e 	.word	0x000e7a7e

000d92d0 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d92d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d92d2:	460c      	mov	r4, r1
   d92d4:	4607      	mov	r7, r0
   d92d6:	f001 f9b9 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d92da:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d92de:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d92e2:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d92e4:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d92e6:	8838      	ldrh	r0, [r7, #0]
   d92e8:	f003 ff35 	bl	dd156 <analogRead>
   d92ec:	4404      	add	r4, r0
    delay(1);
   d92ee:	2001      	movs	r0, #1
   d92f0:	f002 fb50 	bl	db994 <delay>
   d92f4:	f001 f9aa 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d92f8:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d92fa:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d92fe:	d3f2      	bcc.n	d92e6 <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d9300:	ee07 4a90 	vmov	s15, r4
   d9304:	ee07 5a10 	vmov	s14, r5
   d9308:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d930c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d9310:	4b0b      	ldr	r3, [pc, #44]	; (d9340 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d9312:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9316:	edd3 7a00 	vldr	s15, [r3]
   d931a:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d931e:	ee17 0a90 	vmov	r0, s15
   d9322:	f009 fd81 	bl	e2e28 <__aeabi_f2d>
   d9326:	2200      	movs	r2, #0
   d9328:	4b06      	ldr	r3, [pc, #24]	; (d9344 <_ZN3ULP7getVgasEi+0x74>)
   d932a:	f009 fdd1 	bl	e2ed0 <__aeabi_dmul>
   d932e:	2200      	movs	r2, #0
   d9330:	4b05      	ldr	r3, [pc, #20]	; (d9348 <_ZN3ULP7getVgasEi+0x78>)
   d9332:	f009 fdcd 	bl	e2ed0 <__aeabi_dmul>
   d9336:	f00a f8c3 	bl	e34c0 <__aeabi_d2f>
} //returns voltage at zero concentration
   d933a:	ee00 0a10 	vmov	s0, r0
   d933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9340:	2003d5b0 	.word	0x2003d5b0
   d9344:	408f4000 	.word	0x408f4000
   d9348:	3f300000 	.word	0x3f300000
   d934c:	00000000 	.word	0x00000000

000d9350 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d9350:	b5d0      	push	{r4, r6, r7, lr}
   d9352:	ed2d 8b02 	vpush	{d8}
   d9356:	4604      	mov	r4, r0
   d9358:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d935c:	f7ff ffb8 	bl	d92d0 <_ZN3ULP7getVgasEi>
   d9360:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d9364:	ee30 0a67 	vsub.f32	s0, s0, s15
   d9368:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d936c:	ee70 7a67 	vsub.f32	s15, s0, s15
   d9370:	ee17 0a90 	vmov	r0, s15
   d9374:	f009 fd58 	bl	e2e28 <__aeabi_f2d>
   d9378:	2200      	movs	r2, #0
   d937a:	4b21      	ldr	r3, [pc, #132]	; (d9400 <_ZN3ULP7getConcEif+0xb0>)
   d937c:	f009 fed2 	bl	e3124 <__aeabi_ddiv>
   d9380:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d9384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9388:	4606      	mov	r6, r0
   d938a:	ee17 0a90 	vmov	r0, s15
   d938e:	460f      	mov	r7, r1
   d9390:	f009 fd4a 	bl	e2e28 <__aeabi_f2d>
   d9394:	4602      	mov	r2, r0
   d9396:	460b      	mov	r3, r1
   d9398:	4630      	mov	r0, r6
   d939a:	4639      	mov	r1, r7
   d939c:	f009 fec2 	bl	e3124 <__aeabi_ddiv>
   d93a0:	a315      	add	r3, pc, #84	; (adr r3, d93f8 <_ZN3ULP7getConcEif+0xa8>)
   d93a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93a6:	f009 fd93 	bl	e2ed0 <__aeabi_dmul>
   d93aa:	f00a f889 	bl	e34c0 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d93ae:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d93b2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d93b6:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d93ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d93be:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d93c2:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d93c6:	bfcc      	ite	gt
   d93c8:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d93cc:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d93d0:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d93d4:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d93d8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d93dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d93e0:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d93e4:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d93e8:	edd4 6a02 	vldr	s13, [r4, #8]
   d93ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d93f0:	ee20 0a07 	vmul.f32	s0, s0, s14
   d93f4:	bdd0      	pop	{r4, r6, r7, pc}
   d93f6:	bf00      	nop
   d93f8:	00000000 	.word	0x00000000
   d93fc:	41cdcd65 	.word	0x41cdcd65
   d9400:	408f4000 	.word	0x408f4000

000d9404 <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d9404:	b508      	push	{r3, lr}
   d9406:	4603      	mov	r3, r0
   d9408:	f7ff fe7c 	bl	d9104 <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d940c:	4a0d      	ldr	r2, [pc, #52]	; (d9444 <_ZN3IAQC1Eiif+0x40>)
   d940e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d9448 <_ZN3IAQC1Eiif+0x44>
   d9412:	edd2 7a00 	vldr	s15, [r2]
   d9416:	eddf 6a0d 	vldr	s13, [pc, #52]	; d944c <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d941a:	4a0d      	ldr	r2, [pc, #52]	; (d9450 <_ZN3IAQC1Eiif+0x4c>)
   d941c:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d941e:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d9422:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d9426:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d942a:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d942c:	4a09      	ldr	r2, [pc, #36]	; (d9454 <_ZN3IAQC1Eiif+0x50>)
   d942e:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d9430:	4a09      	ldr	r2, [pc, #36]	; (d9458 <_ZN3IAQC1Eiif+0x54>)
   d9432:	635a      	str	r2, [r3, #52]	; 0x34
}
   d9434:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d9436:	ed9f 7a09 	vldr	s14, [pc, #36]	; d945c <_ZN3IAQC1Eiif+0x58>
   d943a:	ee67 7a87 	vmul.f32	s15, s15, s14
   d943e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d9442:	bd08      	pop	{r3, pc}
   d9444:	2003d5b4 	.word	0x2003d5b4
   d9448:	4986e340 	.word	0x4986e340
   d944c:	4a007aa0 	.word	0x4a007aa0
   d9450:	000186a0 	.word	0x000186a0
   d9454:	4181999a 	.word	0x4181999a
   d9458:	4093851f 	.word	0x4093851f
   d945c:	447a0000 	.word	0x447a0000

000d9460 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d9460:	f001 b864 	b.w	da52c <HAL_Pin_Map>

000d9464 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d9464:	6803      	ldr	r3, [r0, #0]
   d9466:	b2c9      	uxtb	r1, r1
   d9468:	689b      	ldr	r3, [r3, #8]
   d946a:	4718      	bx	r3

000d946c <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   d946c:	b510      	push	{r4, lr}
   d946e:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   d9470:	f003 fee8 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9474:	f003 f8dd 	bl	dc632 <_ZN7TwoWire9isEnabledEv>
   d9478:	b918      	cbnz	r0, d9482 <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   d947a:	f003 fee3 	bl	dd244 <_Z19__fetch_global_Wirev>
   d947e:	f003 f88f 	bl	dc5a0 <_ZN7TwoWire5beginEv>
  }
}
   d9482:	4620      	mov	r0, r4
   d9484:	bd10      	pop	{r4, pc}

000d9486 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d9486:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d948a:	4692      	mov	sl, r2
   d948c:	4698      	mov	r8, r3
   d948e:	460d      	mov	r5, r1
   d9490:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d9494:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d9498:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   d949c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d94a0:	f003 fed0 	bl	dd244 <_Z19__fetch_global_Wirev>
   d94a4:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d94a6:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d94a8:	f003 f8b9 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d94ac:	f003 feca 	bl	dd244 <_Z19__fetch_global_Wirev>
   d94b0:	2100      	movs	r1, #0
   d94b2:	f7ff ffd7 	bl	d9464 <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d94b6:	f003 fec5 	bl	dd244 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d94ba:	fbb5 f3f4 	udiv	r3, r5, r4
   d94be:	fb04 5513 	mls	r5, r4, r3, r5
   d94c2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   d94c6:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d94c8:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d94cc:	f7ff ffca 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d94d0:	f003 feb8 	bl	dd244 <_Z19__fetch_global_Wirev>
   d94d4:	fbba f1f4 	udiv	r1, sl, r4
   d94d8:	fb04 aa11 	mls	sl, r4, r1, sl
   d94dc:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d94e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d94e4:	f7ff ffbe 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d94e8:	f003 feac 	bl	dd244 <_Z19__fetch_global_Wirev>
   d94ec:	fbb8 f1f4 	udiv	r1, r8, r4
   d94f0:	fb04 8811 	mls	r8, r4, r1, r8
   d94f4:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   d94f8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d94fc:	f7ff ffb2 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d9500:	f003 fea0 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9504:	fbbb f1f4 	udiv	r1, fp, r4
   d9508:	fb04 b111 	mls	r1, r4, r1, fp
   d950c:	f001 0107 	and.w	r1, r1, #7
   d9510:	f041 0108 	orr.w	r1, r1, #8
   d9514:	f7ff ffa6 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d9518:	f003 fe94 	bl	dd244 <_Z19__fetch_global_Wirev>
   d951c:	fbb7 f1f4 	udiv	r1, r7, r4
   d9520:	fb04 7711 	mls	r7, r4, r1, r7
   d9524:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d9528:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d952c:	f7ff ff9a 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d9530:	f003 fe88 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9534:	fbb6 f1f4 	udiv	r1, r6, r4
   d9538:	fb04 6611 	mls	r6, r4, r1, r6
   d953c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d9540:	f001 011f 	and.w	r1, r1, #31
   d9544:	f7ff ff8e 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   d9548:	f003 fe7c 	bl	dd244 <_Z19__fetch_global_Wirev>
   d954c:	fbb9 f1f4 	udiv	r1, r9, r4
   d9550:	6803      	ldr	r3, [r0, #0]
   d9552:	fb04 9411 	mls	r4, r4, r1, r9
   d9556:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d955a:	689b      	ldr	r3, [r3, #8]
   d955c:	b2c9      	uxtb	r1, r1
   d955e:	4798      	blx	r3

  Wire.endTransmission();
   d9560:	f003 fe70 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9564:	f003 f862 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d9568:	f003 fe6c 	bl	dd244 <_Z19__fetch_global_Wirev>
   d956c:	216f      	movs	r1, #111	; 0x6f
   d956e:	f003 f856 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d9572:	f003 fe67 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9576:	2100      	movs	r1, #0
   d9578:	f7ff ff74 	bl	d9464 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d957c:	f003 fe62 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9580:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d9584:	f7ff ff6e 	bl	d9464 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d9588:	f003 fe5c 	bl	dd244 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d958c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   d9590:	f003 b84c 	b.w	dc62c <_ZN7TwoWire15endTransmissionEv>

000d9594 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d9594:	b570      	push	{r4, r5, r6, lr}
   d9596:	461c      	mov	r4, r3
   d9598:	4615      	mov	r5, r2
   d959a:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d959c:	f003 fe52 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95a0:	216f      	movs	r1, #111	; 0x6f
   d95a2:	f003 f83c 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d95a6:	f003 fe4d 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95aa:	2100      	movs	r1, #0
   d95ac:	f7ff ff5a 	bl	d9464 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d95b0:	f003 fe48 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95b4:	f003 f83a 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d95b8:	f003 fe44 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95bc:	216f      	movs	r1, #111	; 0x6f
   d95be:	2207      	movs	r2, #7
   d95c0:	f003 f826 	bl	dc610 <_ZN7TwoWire11requestFromEhj>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d95c4:	f003 fe3e 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95c8:	6803      	ldr	r3, [r0, #0]
   d95ca:	695b      	ldr	r3, [r3, #20]
   d95cc:	4798      	blx	r3
   d95ce:	b2c0      	uxtb	r0, r0
   d95d0:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d95d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d95d8:	f000 000f 	and.w	r0, r0, #15
   d95dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d95e0:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d95e2:	f003 fe2f 	bl	dd244 <_Z19__fetch_global_Wirev>
   d95e6:	6803      	ldr	r3, [r0, #0]
   d95e8:	695b      	ldr	r3, [r3, #20]
   d95ea:	4798      	blx	r3
   d95ec:	b2c0      	uxtb	r0, r0
   d95ee:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d95f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d95f6:	f000 000f 	and.w	r0, r0, #15
   d95fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d95fe:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d9600:	f003 fe20 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9604:	6803      	ldr	r3, [r0, #0]
   d9606:	695b      	ldr	r3, [r3, #20]
   d9608:	4798      	blx	r3
   d960a:	b2c0      	uxtb	r0, r0
   d960c:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d9610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9614:	f000 000f 	and.w	r0, r0, #15
   d9618:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d961c:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d961e:	f003 fe11 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9622:	6803      	ldr	r3, [r0, #0]
   d9624:	695b      	ldr	r3, [r3, #20]
   d9626:	4798      	blx	r3
   d9628:	9b04      	ldr	r3, [sp, #16]
   d962a:	f000 0007 	and.w	r0, r0, #7
   d962e:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d9630:	f003 fe08 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9634:	6803      	ldr	r3, [r0, #0]
   d9636:	695b      	ldr	r3, [r3, #20]
   d9638:	4798      	blx	r3
   d963a:	b2c0      	uxtb	r0, r0
   d963c:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d9640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9644:	f000 000f 	and.w	r0, r0, #15
   d9648:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d964c:	9b05      	ldr	r3, [sp, #20]
   d964e:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d9650:	f003 fdf8 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9654:	6803      	ldr	r3, [r0, #0]
   d9656:	695b      	ldr	r3, [r3, #20]
   d9658:	4798      	blx	r3
   d965a:	b2c0      	uxtb	r0, r0
   d965c:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d9660:	0093      	lsls	r3, r2, #2
   d9662:	4413      	add	r3, r2
   d9664:	f000 000f 	and.w	r0, r0, #15
   d9668:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d966c:	9b06      	ldr	r3, [sp, #24]
   d966e:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   d9670:	f003 fde8 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9674:	6803      	ldr	r3, [r0, #0]
   d9676:	695b      	ldr	r3, [r3, #20]
   d9678:	4798      	blx	r3
   d967a:	b2c0      	uxtb	r0, r0
   d967c:	0903      	lsrs	r3, r0, #4
   d967e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9682:	f000 000f 	and.w	r0, r0, #15
   d9686:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d968a:	9b07      	ldr	r3, [sp, #28]
   d968c:	7018      	strb	r0, [r3, #0]
   d968e:	bd70      	pop	{r4, r5, r6, pc}

000d9690 <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d9690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9694:	4607      	mov	r7, r0
   d9696:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d9698:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d969a:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d969c:	f002 f866 	bl	db76c <_ZN9TimeClass6secondEl>
   d96a0:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d96a2:	4620      	mov	r0, r4
   d96a4:	f002 f85a 	bl	db75c <_ZN9TimeClass6minuteEl>
   d96a8:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d96aa:	4620      	mov	r0, r4
   d96ac:	f002 f84e 	bl	db74c <_ZN9TimeClass4hourEl>
   d96b0:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d96b2:	4620      	mov	r0, r4
   d96b4:	f002 f86a 	bl	db78c <_ZN9TimeClass7weekdayEl>
   d96b8:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d96ba:	4620      	mov	r0, r4
   d96bc:	f002 f85e 	bl	db77c <_ZN9TimeClass3dayEl>
   d96c0:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d96c2:	4620      	mov	r0, r4
   d96c4:	f002 f86c 	bl	db7a0 <_ZN9TimeClass5monthEl>
   d96c8:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d96ca:	4620      	mov	r0, r4
   d96cc:	f002 f872 	bl	db7b4 <_ZN9TimeClass4yearEl>
   d96d0:	220a      	movs	r2, #10
   d96d2:	4601      	mov	r1, r0
   d96d4:	a804      	add	r0, sp, #16
   d96d6:	f001 fd61 	bl	db19c <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d96da:	a904      	add	r1, sp, #16
   d96dc:	2202      	movs	r2, #2
   d96de:	a808      	add	r0, sp, #32
   d96e0:	f001 fdd6 	bl	db290 <_ZNK6String9substringEj>
   d96e4:	a808      	add	r0, sp, #32
   d96e6:	f001 fde7 	bl	db2b8 <_ZNK6String5toIntEv>
   d96ea:	4604      	mov	r4, r0
   d96ec:	a808      	add	r0, sp, #32
   d96ee:	f001 fc99 	bl	db024 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d96f2:	b2e4      	uxtb	r4, r4
   d96f4:	fa5f f38b 	uxtb.w	r3, fp
   d96f8:	b2f6      	uxtb	r6, r6
   d96fa:	b2ed      	uxtb	r5, r5
   d96fc:	9302      	str	r3, [sp, #8]
   d96fe:	fa5f f289 	uxtb.w	r2, r9
   d9702:	fa5f f38a 	uxtb.w	r3, sl
   d9706:	fa5f f188 	uxtb.w	r1, r8
   d970a:	4638      	mov	r0, r7
   d970c:	9403      	str	r4, [sp, #12]
   d970e:	9601      	str	r6, [sp, #4]
   d9710:	9500      	str	r5, [sp, #0]
   d9712:	f7ff feb8 	bl	d9486 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d9716:	a804      	add	r0, sp, #16
   d9718:	f001 fc84 	bl	db024 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d971c:	b00d      	add	sp, #52	; 0x34
   d971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9722 <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   d9722:	b500      	push	{lr}
   d9724:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d9726:	f10d 031b 	add.w	r3, sp, #27
   d972a:	9303      	str	r3, [sp, #12]
   d972c:	f10d 031a 	add.w	r3, sp, #26
   d9730:	9302      	str	r3, [sp, #8]
   d9732:	f10d 0319 	add.w	r3, sp, #25
   d9736:	9301      	str	r3, [sp, #4]
   d9738:	ab06      	add	r3, sp, #24
   d973a:	9300      	str	r3, [sp, #0]
   d973c:	f10d 0216 	add.w	r2, sp, #22
   d9740:	f10d 0317 	add.w	r3, sp, #23
   d9744:	f10d 0115 	add.w	r1, sp, #21
   d9748:	f7ff ff24 	bl	d9594 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d974c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9750:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d9752:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d9756:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d9758:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d975c:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d975e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d9762:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d9764:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d9768:	3b01      	subs	r3, #1
   d976a:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d976c:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d9770:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d9772:	3364      	adds	r3, #100	; 0x64
   d9774:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d9776:	f00a f935 	bl	e39e4 <mktime>

  return uint32_t(moment);
}
   d977a:	b011      	add	sp, #68	; 0x44
   d977c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9780 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d9780:	f000 bed4 	b.w	da52c <HAL_Pin_Map>

000d9784 <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d9784:	4770      	bx	lr

000d9786 <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d9786:	b510      	push	{r4, lr}
}
   d9788:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d978a:	4604      	mov	r4, r0
}
   d978c:	f003 fd8e 	bl	dd2ac <_ZdlPvj>
   d9790:	4620      	mov	r0, r4
   d9792:	bd10      	pop	{r4, pc}

000d9794 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d9794:	6803      	ldr	r3, [r0, #0]
   d9796:	b2c9      	uxtb	r1, r1
   d9798:	689b      	ldr	r3, [r3, #8]
   d979a:	4718      	bx	r3

000d979c <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d979c:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d979e:	4c02      	ldr	r4, [pc, #8]	; (d97a8 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d97a0:	6004      	str	r4, [r0, #0]
   d97a2:	6041      	str	r1, [r0, #4]
   d97a4:	6082      	str	r2, [r0, #8]
}
   d97a6:	bd10      	pop	{r4, pc}
   d97a8:	000e7b54 	.word	0x000e7b54

000d97ac <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d97ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d97b0:	4604      	mov	r4, r0
   d97b2:	460d      	mov	r5, r1
   d97b4:	4617      	mov	r7, r2
   d97b6:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d97b8:	f1b8 0f00 	cmp.w	r8, #0
   d97bc:	d040      	beq.n	d9840 <_ZN10MB85RC256V8readDataEjPhj+0x94>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d97be:	68a1      	ldr	r1, [r4, #8]
   d97c0:	6860      	ldr	r0, [r4, #4]
   d97c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d97c6:	f002 ff2a 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d97ca:	0a29      	lsrs	r1, r5, #8
   d97cc:	6860      	ldr	r0, [r4, #4]
   d97ce:	f7ff ffe1 	bl	d9794 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d97d2:	4629      	mov	r1, r5
   d97d4:	6860      	ldr	r0, [r4, #4]
   d97d6:	f7ff ffdd 	bl	d9794 <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d97da:	2100      	movs	r1, #0
   d97dc:	6860      	ldr	r0, [r4, #4]
   d97de:	f002 ff21 	bl	dc624 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d97e2:	b110      	cbz	r0, d97ea <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d97e4:	2000      	movs	r0, #0
   d97e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d97ea:	68a1      	ldr	r1, [r4, #8]
   d97ec:	6860      	ldr	r0, [r4, #4]
   d97ee:	f1b8 0f20 	cmp.w	r8, #32
   d97f2:	46c1      	mov	r9, r8
   d97f4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d97f8:	bf28      	it	cs
   d97fa:	f04f 0920 	movcs.w	r9, #32
   d97fe:	2301      	movs	r3, #1
   d9800:	464a      	mov	r2, r9
   d9802:	b2c9      	uxtb	r1, r1
   d9804:	f002 fef2 	bl	dc5ec <_ZN7TwoWire11requestFromEhjh>

		if (Wire.available() < (int) bytesToRead) {
   d9808:	f003 fd1c 	bl	dd244 <_Z19__fetch_global_Wirev>
   d980c:	6803      	ldr	r3, [r0, #0]
   d980e:	691b      	ldr	r3, [r3, #16]
   d9810:	4798      	blx	r3
   d9812:	4548      	cmp	r0, r9
   d9814:	dbe6      	blt.n	d97e4 <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d9816:	463e      	mov	r6, r7
   d9818:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d981c:	f003 fd12 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9820:	6803      	ldr	r3, [r0, #0]
   d9822:	695b      	ldr	r3, [r3, #20]
   d9824:	4798      	blx	r3
   d9826:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d982a:	1bf2      	subs	r2, r6, r7
   d982c:	ebc6 0308 	rsb	r3, r6, r8
   d9830:	4591      	cmp	r9, r2
   d9832:	eb06 050a 	add.w	r5, r6, sl
   d9836:	443b      	add	r3, r7
   d9838:	d8f0      	bhi.n	d981c <_ZN10MB85RC256V8readDataEjPhj+0x70>
   d983a:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d983c:	4637      	mov	r7, r6
   d983e:	e7bb      	b.n	d97b8 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d9840:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d9842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9846 <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d9846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d984a:	4604      	mov	r4, r0
   d984c:	460d      	mov	r5, r1
   d984e:	4690      	mov	r8, r2
   d9850:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d9852:	b357      	cbz	r7, d98aa <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d9854:	68a1      	ldr	r1, [r4, #8]
   d9856:	6860      	ldr	r0, [r4, #4]
   d9858:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d985c:	f002 fedf 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d9860:	0a29      	lsrs	r1, r5, #8
   d9862:	6860      	ldr	r0, [r4, #4]
   d9864:	f7ff ff96 	bl	d9794 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d9868:	4629      	mov	r1, r5
   d986a:	6860      	ldr	r0, [r4, #4]
   d986c:	f7ff ff92 	bl	d9794 <_ZN7TwoWire5writeEj>
   d9870:	f108 091e 	add.w	r9, r8, #30
   d9874:	4646      	mov	r6, r8
   d9876:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d987a:	6860      	ldr	r0, [r4, #4]
   d987c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d9880:	6803      	ldr	r3, [r0, #0]
   d9882:	689b      	ldr	r3, [r3, #8]
   d9884:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9886:	454e      	cmp	r6, r9
   d9888:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d988c:	46b0      	mov	r8, r6
			dataLen--;
   d988e:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9892:	d001      	beq.n	d9898 <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d9894:	2f00      	cmp	r7, #0
   d9896:	d1f0      	bne.n	d987a <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d9898:	2101      	movs	r1, #1
   d989a:	6860      	ldr	r0, [r4, #4]
   d989c:	f002 fec2 	bl	dc624 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d98a0:	2800      	cmp	r0, #0
   d98a2:	d0d6      	beq.n	d9852 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d98a4:	2000      	movs	r0, #0
   d98a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d98aa:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d98ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d98b0 <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d98b0:	b530      	push	{r4, r5, lr}
   d98b2:	b089      	sub	sp, #36	; 0x24
   d98b4:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d98b6:	2220      	movs	r2, #32
   d98b8:	2100      	movs	r1, #0
   d98ba:	4668      	mov	r0, sp
   d98bc:	f009 ffad 	bl	e381a <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d98c0:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d98c2:	2320      	movs	r3, #32
   d98c4:	466a      	mov	r2, sp
   d98c6:	4621      	mov	r1, r4
   d98c8:	4628      	mov	r0, r5
   d98ca:	f7ff ffbc 	bl	d9846 <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d98ce:	b120      	cbz	r0, d98da <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d98d0:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d98d2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d98d6:	d1f4      	bne.n	d98c2 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d98d8:	2001      	movs	r0, #1
}
   d98da:	b009      	add	sp, #36	; 0x24
   d98dc:	bd30      	pop	{r4, r5, pc}

000d98de <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d98de:	f000 be25 	b.w	da52c <HAL_Pin_Map>

000d98e2 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d98e2:	4770      	bx	lr

000d98e4 <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d98e4:	b510      	push	{r4, lr}

      IOexp.begin();
   d98e6:	4c53      	ldr	r4, [pc, #332]	; (d9a34 <_ZN12IoTNodePower5beginEv+0x150>)
   d98e8:	4620      	mov	r0, r4
   d98ea:	f000 fb0b 	bl	d9f04 <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d98ee:	4620      	mov	r0, r4
   d98f0:	2201      	movs	r2, #1
   d98f2:	2100      	movs	r1, #0
   d98f4:	f000 fb09 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d98f8:	2201      	movs	r2, #1
   d98fa:	4611      	mov	r1, r2
   d98fc:	4620      	mov	r0, r4
   d98fe:	f000 fb04 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d9902:	4620      	mov	r0, r4
   d9904:	2201      	movs	r2, #1
   d9906:	2102      	movs	r1, #2
   d9908:	f000 faff 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d990c:	4620      	mov	r0, r4
   d990e:	2201      	movs	r2, #1
   d9910:	2103      	movs	r1, #3
   d9912:	f000 fafa 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d9916:	4620      	mov	r0, r4
   d9918:	2201      	movs	r2, #1
   d991a:	2104      	movs	r1, #4
   d991c:	f000 faf5 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d9920:	4620      	mov	r0, r4
   d9922:	2201      	movs	r2, #1
   d9924:	2105      	movs	r1, #5
   d9926:	f000 faf0 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d992a:	4620      	mov	r0, r4
   d992c:	2200      	movs	r2, #0
   d992e:	2106      	movs	r1, #6
   d9930:	f000 faeb 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d9934:	4620      	mov	r0, r4
   d9936:	2201      	movs	r2, #1
   d9938:	2107      	movs	r1, #7
   d993a:	f000 fae6 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d993e:	4620      	mov	r0, r4
   d9940:	2200      	movs	r2, #0
   d9942:	2108      	movs	r1, #8
   d9944:	f000 fae1 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d9948:	4620      	mov	r0, r4
   d994a:	2200      	movs	r2, #0
   d994c:	2109      	movs	r1, #9
   d994e:	f000 fadc 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d9952:	4620      	mov	r0, r4
   d9954:	2200      	movs	r2, #0
   d9956:	210a      	movs	r1, #10
   d9958:	f000 fad7 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d995c:	4620      	mov	r0, r4
   d995e:	2200      	movs	r2, #0
   d9960:	210b      	movs	r1, #11
   d9962:	f000 fad2 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d9966:	4620      	mov	r0, r4
   d9968:	2200      	movs	r2, #0
   d996a:	210c      	movs	r1, #12
   d996c:	f000 facd 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d9970:	4620      	mov	r0, r4
   d9972:	2200      	movs	r2, #0
   d9974:	210d      	movs	r1, #13
   d9976:	f000 fac8 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d997a:	4620      	mov	r0, r4
   d997c:	2200      	movs	r2, #0
   d997e:	210e      	movs	r1, #14
   d9980:	f000 fac3 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d9984:	4620      	mov	r0, r4
   d9986:	2200      	movs	r2, #0
   d9988:	210f      	movs	r1, #15
   d998a:	f000 fabe 	bl	d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d998e:	4620      	mov	r0, r4
   d9990:	2201      	movs	r2, #1
   d9992:	2100      	movs	r1, #0
   d9994:	f000 fae2 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d9998:	2201      	movs	r2, #1
   d999a:	4611      	mov	r1, r2
   d999c:	4620      	mov	r0, r4
   d999e:	f000 fadd 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d99a2:	4620      	mov	r0, r4
   d99a4:	2201      	movs	r2, #1
   d99a6:	2102      	movs	r1, #2
   d99a8:	f000 fad8 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d99ac:	4620      	mov	r0, r4
   d99ae:	2201      	movs	r2, #1
   d99b0:	2103      	movs	r1, #3
   d99b2:	f000 fad3 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d99b6:	4620      	mov	r0, r4
   d99b8:	2201      	movs	r2, #1
   d99ba:	2104      	movs	r1, #4
   d99bc:	f000 face 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d99c0:	4620      	mov	r0, r4
   d99c2:	2201      	movs	r2, #1
   d99c4:	2105      	movs	r1, #5
   d99c6:	f000 fac9 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d99ca:	4620      	mov	r0, r4
   d99cc:	2201      	movs	r2, #1
   d99ce:	2106      	movs	r1, #6
   d99d0:	f000 fac4 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d99d4:	4620      	mov	r0, r4
   d99d6:	2201      	movs	r2, #1
   d99d8:	2107      	movs	r1, #7
   d99da:	f000 fabf 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d99de:	4620      	mov	r0, r4
   d99e0:	2201      	movs	r2, #1
   d99e2:	2108      	movs	r1, #8
   d99e4:	f000 faba 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d99e8:	4620      	mov	r0, r4
   d99ea:	2201      	movs	r2, #1
   d99ec:	2109      	movs	r1, #9
   d99ee:	f000 fab5 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d99f2:	4620      	mov	r0, r4
   d99f4:	2201      	movs	r2, #1
   d99f6:	210a      	movs	r1, #10
   d99f8:	f000 fab0 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d99fc:	4620      	mov	r0, r4
   d99fe:	2201      	movs	r2, #1
   d9a00:	210b      	movs	r1, #11
   d9a02:	f000 faab 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d9a06:	4620      	mov	r0, r4
   d9a08:	2201      	movs	r2, #1
   d9a0a:	210c      	movs	r1, #12
   d9a0c:	f000 faa6 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d9a10:	4620      	mov	r0, r4
   d9a12:	2201      	movs	r2, #1
   d9a14:	210d      	movs	r1, #13
   d9a16:	f000 faa1 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d9a1a:	4620      	mov	r0, r4
   d9a1c:	2201      	movs	r2, #1
   d9a1e:	210e      	movs	r1, #14
   d9a20:	f000 fa9c 	bl	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d9a24:	4620      	mov	r0, r4
   d9a26:	2201      	movs	r2, #1
   d9a28:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d9a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d9a2e:	f000 ba95 	b.w	d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>
   d9a32:	bf00      	nop
   d9a34:	2003e26c 	.word	0x2003e26c

000d9a38 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d9a38:	4801      	ldr	r0, [pc, #4]	; (d9a40 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d9a3a:	f000 ba72 	b.w	d9f22 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d9a3e:	bf00      	nop
   d9a40:	2003e26c 	.word	0x2003e26c

000d9a44 <_GLOBAL__sub_I_IOexp>:
   d9a44:	f000 bd72 	b.w	da52c <HAL_Pin_Map>

000d9a48 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9a48:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d9a4a:	a50e      	add	r5, pc, #56	; (adr r5, d9a84 <_ZN7ADXL345C1Ev+0x3c>)
   d9a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
   d9a50:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9a54:	a50d      	add	r5, pc, #52	; (adr r5, d9a8c <_ZN7ADXL345C1Ev+0x44>)
   d9a56:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9a5a:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9a5c:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9a60:	a50c      	add	r5, pc, #48	; (adr r5, d9a94 <_ZN7ADXL345C1Ev+0x4c>)
   d9a62:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9a66:	6282      	str	r2, [r0, #40]	; 0x28
   d9a68:	2201      	movs	r2, #1
   d9a6a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d9a6e:	4904      	ldr	r1, [pc, #16]	; (d9a80 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d9a70:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d9a72:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9a74:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d9a76:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9a78:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d9a7c:	bd30      	pop	{r4, r5, pc}
   d9a7e:	bf00      	nop
   d9a80:	004c4b40 	.word	0x004c4b40
   d9a84:	6cf9279f 	.word	0x6cf9279f
   d9a88:	3f6ed578 	.word	0x3f6ed578
   d9a8c:	f28f7f0e 	.word	0xf28f7f0e
   d9a90:	3f6ecd7a 	.word	0x3f6ecd7a
   d9a94:	30d80f20 	.word	0x30d80f20
   d9a98:	3f6c9c9e 	.word	0x3f6c9c9e

000d9a9c <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d9a9c:	b538      	push	{r3, r4, r5, lr}
   d9a9e:	4614      	mov	r4, r2
   d9aa0:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9aa2:	f003 fbcf 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9aa6:	2153      	movs	r1, #83	; 0x53
   d9aa8:	f002 fdb9 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d9aac:	f003 fbca 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9ab0:	6803      	ldr	r3, [r0, #0]
   d9ab2:	4629      	mov	r1, r5
   d9ab4:	689b      	ldr	r3, [r3, #8]
   d9ab6:	4798      	blx	r3
	Wire.write(_val);                 
   d9ab8:	f003 fbc4 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9abc:	6803      	ldr	r3, [r0, #0]
   d9abe:	4621      	mov	r1, r4
   d9ac0:	689b      	ldr	r3, [r3, #8]
   d9ac2:	4798      	blx	r3
	Wire.endTransmission();         
   d9ac4:	f003 fbbe 	bl	dd244 <_Z19__fetch_global_Wirev>
}
   d9ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d9acc:	f002 bdae 	b.w	dc62c <_ZN7TwoWire15endTransmissionEv>

000d9ad0 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d9ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ad4:	4616      	mov	r6, r2
   d9ad6:	461f      	mov	r7, r3
   d9ad8:	460c      	mov	r4, r1
   d9ada:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d9adc:	f003 fbb2 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9ae0:	2153      	movs	r1, #83	; 0x53
   d9ae2:	f002 fd9c 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d9ae6:	f003 fbad 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9aea:	6803      	ldr	r3, [r0, #0]
   d9aec:	4621      	mov	r1, r4
   d9aee:	689b      	ldr	r3, [r3, #8]
   d9af0:	4798      	blx	r3
	Wire.endTransmission();         
   d9af2:	f003 fba7 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9af6:	f002 fd99 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9afa:	f003 fba3 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9afe:	2153      	movs	r1, #83	; 0x53
   d9b00:	f002 fd8d 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d9b04:	f003 fb9e 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9b08:	4632      	mov	r2, r6
   d9b0a:	2153      	movs	r1, #83	; 0x53
   d9b0c:	f002 fd80 	bl	dc610 <_ZN7TwoWire11requestFromEhj>
   d9b10:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d9b12:	f003 fb97 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9b16:	6803      	ldr	r3, [r0, #0]
   d9b18:	691b      	ldr	r3, [r3, #16]
   d9b1a:	ebc7 0804 	rsb	r8, r7, r4
   d9b1e:	4798      	blx	r3
   d9b20:	b138      	cbz	r0, d9b32 <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d9b22:	f003 fb8f 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9b26:	6803      	ldr	r3, [r0, #0]
   d9b28:	695b      	ldr	r3, [r3, #20]
   d9b2a:	4798      	blx	r3
   d9b2c:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d9b30:	e7ef      	b.n	d9b12 <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d9b32:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d9b34:	bf1e      	ittt	ne
   d9b36:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d9b38:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d9b3a:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d9b3c:	f003 fb82 	bl	dd244 <_Z19__fetch_global_Wirev>
}
   d9b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d9b44:	f002 bd72 	b.w	dc62c <_ZN7TwoWire15endTransmissionEv>

000d9b48 <_ZN7ADXL34510writeToSPIEhh>:
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9b48:	b570      	push	{r4, r5, r6, lr}
   d9b4a:	4604      	mov	r4, r0
   d9b4c:	460e      	mov	r6, r1
  digitalWrite(_CS, LOW);
   d9b4e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   d9b50:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9b52:	4615      	mov	r5, r2
  digitalWrite(_CS, LOW);
   d9b54:	f003 fad3 	bl	dd0fe <digitalWrite>
  SPI.transfer(__reg_address); 
   d9b58:	f003 fb3a 	bl	dd1d0 <_ZN8particle7globals11instanceSpiEv>
   d9b5c:	4631      	mov	r1, r6
   d9b5e:	f001 f917 	bl	dad90 <_ZN8SPIClass8transferEh>
  SPI.transfer(__val); 
   d9b62:	f003 fb35 	bl	dd1d0 <_ZN8particle7globals11instanceSpiEv>
   d9b66:	4629      	mov	r1, r5
   d9b68:	f001 f912 	bl	dad90 <_ZN8SPIClass8transferEh>
  digitalWrite(_CS, HIGH); 
   d9b6c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   d9b6e:	2101      	movs	r1, #1
}
   d9b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   d9b74:	f003 bac3 	b.w	dd0fe <digitalWrite>

000d9b78 <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   d9b78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d9b7c:	b10b      	cbz	r3, d9b82 <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   d9b7e:	f7ff bf8d 	b.w	d9a9c <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   d9b82:	f7ff bfe1 	b.w	d9b48 <_ZN7ADXL34510writeToSPIEhh>

000d9b86 <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9b86:	b510      	push	{r4, lr}
	if(I2C) {
   d9b88:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9b8c:	4604      	mov	r4, r0
	if(I2C) {
   d9b8e:	b11b      	cbz	r3, d9b98 <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   d9b90:	f003 fb58 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9b94:	f002 fd04 	bl	dc5a0 <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   d9b98:	4620      	mov	r0, r4
   d9b9a:	2200      	movs	r2, #0
   d9b9c:	212d      	movs	r1, #45	; 0x2d
   d9b9e:	f7ff ffeb 	bl	d9b78 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	2210      	movs	r2, #16
   d9ba6:	212d      	movs	r1, #45	; 0x2d
   d9ba8:	f7ff ffe6 	bl	d9b78 <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9bac:	4620      	mov	r0, r4
   d9bae:	2208      	movs	r2, #8
   d9bb0:	212d      	movs	r1, #45	; 0x2d
}
   d9bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9bb6:	f7ff bfdf 	b.w	d9b78 <_ZN7ADXL3457writeToEhh>

000d9bba <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   d9bbc:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   d9bbe:	bfd4      	ite	le
   d9bc0:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   d9bc4:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9bc8:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9bca:	2100      	movs	r1, #0
   d9bcc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9bce:	461f      	mov	r7, r3
   d9bd0:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9bd2:	f003 fa94 	bl	dd0fe <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   d9bd6:	f003 fafb 	bl	dd1d0 <_ZN8particle7globals11instanceSpiEv>
   d9bda:	4621      	mov	r1, r4
   d9bdc:	f001 f8d8 	bl	dad90 <_ZN8SPIClass8transferEh>
   d9be0:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   d9be2:	1be3      	subs	r3, r4, r7
   d9be4:	429e      	cmp	r6, r3
   d9be6:	dd07      	ble.n	d9bf8 <_ZN7ADXL34511readFromSPIEhiPh+0x3e>
    _buff[i] = SPI.transfer(0x00);
   d9be8:	f003 faf2 	bl	dd1d0 <_ZN8particle7globals11instanceSpiEv>
   d9bec:	2100      	movs	r1, #0
   d9bee:	f001 f8cf 	bl	dad90 <_ZN8SPIClass8transferEh>
   d9bf2:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   d9bf6:	e7f4      	b.n	d9be2 <_ZN7ADXL34511readFromSPIEhiPh+0x28>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9bf8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   d9bfa:	2101      	movs	r1, #1
}
   d9bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9c00:	f003 ba7d 	b.w	dd0fe <digitalWrite>

000d9c04 <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d9c04:	b410      	push	{r4}
	if(I2C) {
   d9c06:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   d9c0a:	b11c      	cbz	r4, d9c14 <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9c0c:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   d9c10:	f7ff bf5e 	b.w	d9ad0 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9c14:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   d9c18:	f7ff bfcf 	b.w	d9bba <_ZN7ADXL34511readFromSPIEhiPh>

000d9c1c <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9c1e:	3904      	subs	r1, #4
   d9c20:	290c      	cmp	r1, #12
   d9c22:	bf98      	it	ls
   d9c24:	4b0c      	ldrls	r3, [pc, #48]	; (d9c58 <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9c26:	f04f 0201 	mov.w	r2, #1
   d9c2a:	bf98      	it	ls
   d9c2c:	5c5d      	ldrbls	r5, [r3, r1]
   d9c2e:	f10d 0307 	add.w	r3, sp, #7
   d9c32:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   d9c36:	bf88      	it	hi
   d9c38:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9c3a:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9c3c:	f7ff ffe2 	bl	d9c04 <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   d9c40:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9c44:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   d9c48:	432a      	orrs	r2, r5
   d9c4a:	2131      	movs	r1, #49	; 0x31
   d9c4c:	4620      	mov	r0, r4
   d9c4e:	f7ff ff93 	bl	d9b78 <_ZN7ADXL3457writeToEhh>
}
   d9c52:	b003      	add	sp, #12
   d9c54:	bd30      	pop	{r4, r5, pc}
   d9c56:	bf00      	nop
   d9c58:	000e7b5c 	.word	0x000e7b5c

000d9c5c <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   d9c5c:	f381 0208 	usat	r2, #8, r1
   d9c60:	b2d2      	uxtb	r2, r2
   d9c62:	2124      	movs	r1, #36	; 0x24
   d9c64:	f7ff bf88 	b.w	d9b78 <_ZN7ADXL3457writeToEhh>

000d9c68 <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   d9c68:	f381 0208 	usat	r2, #8, r1
   d9c6c:	b2d2      	uxtb	r2, r2
   d9c6e:	2125      	movs	r1, #37	; 0x25
   d9c70:	f7ff bf82 	b.w	d9b78 <_ZN7ADXL3457writeToEhh>

000d9c74 <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   d9c74:	f381 0208 	usat	r2, #8, r1
   d9c78:	b2d2      	uxtb	r2, r2
   d9c7a:	2126      	movs	r1, #38	; 0x26
   d9c7c:	f7ff bf7c 	b.w	d9b78 <_ZN7ADXL3457writeToEhh>

000d9c80 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d9c80:	fa41 f202 	asr.w	r2, r1, r2
}
   d9c84:	f002 0001 	and.w	r0, r2, #1
   d9c88:	4770      	bx	lr

000d9c8a <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   d9c8a:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d9c8c:	2201      	movs	r2, #1
   d9c8e:	f10d 0307 	add.w	r3, sp, #7
   d9c92:	2130      	movs	r1, #48	; 0x30
   d9c94:	f7ff ffb6 	bl	d9c04 <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   d9c98:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9c9c:	b003      	add	sp, #12
   d9c9e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9ca2 <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9ca4:	4616      	mov	r6, r2
   d9ca6:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9ca8:	2201      	movs	r2, #1
   d9caa:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9cae:	4604      	mov	r4, r0
   d9cb0:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9cb2:	f7ff ffa7 	bl	d9c04 <_ZN7ADXL3458readFromEhiPh>
   d9cb6:	2201      	movs	r2, #1
   d9cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9cbc:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   d9cbe:	b10f      	cbz	r7, d9cc4 <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9cc0:	4313      	orrs	r3, r2
   d9cc2:	e001      	b.n	d9cc8 <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   d9cc4:	ea23 0302 	bic.w	r3, r3, r2
   d9cc8:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   d9ccc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9cd0:	4629      	mov	r1, r5
   d9cd2:	4620      	mov	r0, r4
   d9cd4:	f7ff ff50 	bl	d9b78 <_ZN7ADXL3457writeToEhh>
}
   d9cd8:	b003      	add	sp, #12
   d9cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9cdc <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d9cdc:	460b      	mov	r3, r1
   d9cde:	2206      	movs	r2, #6
   d9ce0:	2127      	movs	r1, #39	; 0x27
   d9ce2:	f7ff bfde 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9ce6 <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d9ce6:	460b      	mov	r3, r1
   d9ce8:	2205      	movs	r2, #5
   d9cea:	2127      	movs	r1, #39	; 0x27
   d9cec:	f7ff bfd9 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9cf0 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d9cf0:	460b      	mov	r3, r1
   d9cf2:	2204      	movs	r2, #4
   d9cf4:	2127      	movs	r1, #39	; 0x27
   d9cf6:	f7ff bfd4 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9cfa <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9cfa:	b570      	push	{r4, r5, r6, lr}
   d9cfc:	4604      	mov	r4, r0
   d9cfe:	4616      	mov	r6, r2
   d9d00:	461d      	mov	r5, r3
	setActivityX(stateX);
   d9d02:	f7ff ffeb 	bl	d9cdc <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   d9d06:	4631      	mov	r1, r6
   d9d08:	4620      	mov	r0, r4
   d9d0a:	f7ff ffec 	bl	d9ce6 <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   d9d0e:	4629      	mov	r1, r5
   d9d10:	4620      	mov	r0, r4
}
   d9d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   d9d16:	f7ff bfeb 	b.w	d9cf0 <_ZN7ADXL34512setActivityZEb>

000d9d1a <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d9d1a:	460b      	mov	r3, r1
   d9d1c:	2202      	movs	r2, #2
   d9d1e:	2127      	movs	r1, #39	; 0x27
   d9d20:	f7ff bfbf 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9d24 <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d9d24:	460b      	mov	r3, r1
   d9d26:	2201      	movs	r2, #1
   d9d28:	2127      	movs	r1, #39	; 0x27
   d9d2a:	f7ff bfba 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9d2e <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d9d2e:	460b      	mov	r3, r1
   d9d30:	2200      	movs	r2, #0
   d9d32:	2127      	movs	r1, #39	; 0x27
   d9d34:	f7ff bfb5 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9d38 <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9d38:	b570      	push	{r4, r5, r6, lr}
   d9d3a:	4604      	mov	r4, r0
   d9d3c:	4616      	mov	r6, r2
   d9d3e:	461d      	mov	r5, r3
	setInactivityX(stateX);
   d9d40:	f7ff ffeb 	bl	d9d1a <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   d9d44:	4631      	mov	r1, r6
   d9d46:	4620      	mov	r0, r4
   d9d48:	f7ff ffec 	bl	d9d24 <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   d9d4c:	4629      	mov	r1, r5
   d9d4e:	4620      	mov	r0, r4
}
   d9d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   d9d54:	f7ff bfeb 	b.w	d9d2e <_ZN7ADXL34514setInactivityZEb>

000d9d58 <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d9d58:	4613      	mov	r3, r2
   d9d5a:	460a      	mov	r2, r1
   d9d5c:	212f      	movs	r1, #47	; 0x2f
   d9d5e:	f7ff bfa0 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9d62 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   d9d66:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9d68:	4604      	mov	r4, r0
   d9d6a:	4690      	mov	r8, r2
   d9d6c:	461d      	mov	r5, r3
   d9d6e:	9f06      	ldr	r7, [sp, #24]
   d9d70:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   d9d72:	d101      	bne.n	d9d78 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9d74:	2200      	movs	r2, #0
   d9d76:	e002      	b.n	d9d7e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   d9d78:	2902      	cmp	r1, #2
   d9d7a:	d103      	bne.n	d9d84 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9d7c:	2201      	movs	r2, #1
   d9d7e:	2106      	movs	r1, #6
   d9d80:	f7ff ffea 	bl	d9d58 <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   d9d84:	f1b8 0f01 	cmp.w	r8, #1
   d9d88:	d101      	bne.n	d9d8e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9d8a:	2200      	movs	r2, #0
   d9d8c:	e003      	b.n	d9d96 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   d9d8e:	f1b8 0f02 	cmp.w	r8, #2
   d9d92:	d104      	bne.n	d9d9e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9d94:	2201      	movs	r2, #1
   d9d96:	2105      	movs	r1, #5
   d9d98:	4620      	mov	r0, r4
   d9d9a:	f7ff ffdd 	bl	d9d58 <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   d9d9e:	2d01      	cmp	r5, #1
   d9da0:	d102      	bne.n	d9da8 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   d9da2:	2200      	movs	r2, #0
   d9da4:	2102      	movs	r1, #2
   d9da6:	e003      	b.n	d9db0 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   d9da8:	2d02      	cmp	r5, #2
   d9daa:	d104      	bne.n	d9db6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   d9dac:	2201      	movs	r2, #1
   d9dae:	4629      	mov	r1, r5
   d9db0:	4620      	mov	r0, r4
   d9db2:	f7ff ffd1 	bl	d9d58 <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   d9db6:	2f01      	cmp	r7, #1
   d9db8:	d101      	bne.n	d9dbe <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9dba:	2200      	movs	r2, #0
   d9dbc:	e002      	b.n	d9dc4 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   d9dbe:	2f02      	cmp	r7, #2
   d9dc0:	d104      	bne.n	d9dcc <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9dc2:	2201      	movs	r2, #1
   d9dc4:	2104      	movs	r1, #4
   d9dc6:	4620      	mov	r0, r4
   d9dc8:	f7ff ffc6 	bl	d9d58 <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   d9dcc:	2e01      	cmp	r6, #1
   d9dce:	d101      	bne.n	d9dd4 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9dd0:	2200      	movs	r2, #0
   d9dd2:	e002      	b.n	d9dda <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   d9dd4:	2e02      	cmp	r6, #2
   d9dd6:	d106      	bne.n	d9de6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9dd8:	2201      	movs	r2, #1
   d9dda:	4620      	mov	r0, r4
   d9ddc:	2103      	movs	r1, #3
}
   d9dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9de2:	f7ff bfb9 	b.w	d9d58 <_ZN7ADXL34519setInterruptMappingEhb>
   d9de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9dea <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d9dea:	4613      	mov	r3, r2
   d9dec:	460a      	mov	r2, r1
   d9dee:	212e      	movs	r1, #46	; 0x2e
   d9df0:	f7ff bf57 	b.w	d9ca2 <_ZN7ADXL34514setRegisterBitEhib>

000d9df4 <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   d9df4:	460a      	mov	r2, r1
   d9df6:	b101      	cbz	r1, d9dfa <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   d9df8:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   d9dfa:	2104      	movs	r1, #4
   d9dfc:	f7ff bff5 	b.w	d9dea <_ZN7ADXL34512setInterruptEhb>

000d9e00 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   d9e00:	460a      	mov	r2, r1
   d9e02:	b101      	cbz	r1, d9e06 <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   d9e04:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   d9e06:	2103      	movs	r1, #3
   d9e08:	f7ff bfef 	b.w	d9dea <_ZN7ADXL34512setInterruptEhb>

000d9e0c <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d9e0c:	f000 bb8e 	b.w	da52c <HAL_Pin_Map>

000d9e10 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d9e10:	b510      	push	{r4, lr}
   d9e12:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9e14:	f003 fa16 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e18:	6803      	ldr	r3, [r0, #0]
   d9e1a:	4621      	mov	r1, r4
   d9e1c:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d9e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9e22:	4718      	bx	r3

000d9e24 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d9e24:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d9e26:	f003 fa0d 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e2a:	6803      	ldr	r3, [r0, #0]
   d9e2c:	695b      	ldr	r3, [r3, #20]
   d9e2e:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d9e30:	b2c0      	uxtb	r0, r0
   d9e32:	bd08      	pop	{r3, pc}

000d9e34 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d9e34:	b538      	push	{r3, r4, r5, lr}
   d9e36:	4604      	mov	r4, r0
   d9e38:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9e3a:	f003 fa03 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e3e:	7821      	ldrb	r1, [r4, #0]
   d9e40:	f041 0120 	orr.w	r1, r1, #32
   d9e44:	f002 fbeb 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d9e48:	4628      	mov	r0, r5
   d9e4a:	f7ff ffe1 	bl	d9e10 <_ZL8wiresendh>
	Wire.endTransmission();
   d9e4e:	f003 f9f9 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e52:	f002 fbeb 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d9e56:	f003 f9f5 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e5a:	7821      	ldrb	r1, [r4, #0]
   d9e5c:	2201      	movs	r2, #1
   d9e5e:	f041 0120 	orr.w	r1, r1, #32
   d9e62:	f002 fbd5 	bl	dc610 <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d9e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d9e6a:	f7ff bfdb 	b.w	d9e24 <_ZL8wirerecvv>

000d9e6e <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d9e6e:	b570      	push	{r4, r5, r6, lr}
   d9e70:	4606      	mov	r6, r0
   d9e72:	4614      	mov	r4, r2
   d9e74:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9e76:	f003 f9e5 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9e7a:	7831      	ldrb	r1, [r6, #0]
   d9e7c:	f041 0120 	orr.w	r1, r1, #32
   d9e80:	f002 fbcd 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d9e84:	4628      	mov	r0, r5
   d9e86:	f7ff ffc3 	bl	d9e10 <_ZL8wiresendh>
	wiresend(regValue);
   d9e8a:	4620      	mov	r0, r4
   d9e8c:	f7ff ffc0 	bl	d9e10 <_ZL8wiresendh>
	Wire.endTransmission();
   d9e90:	f003 f9d8 	bl	dd244 <_Z19__fetch_global_Wirev>
}
   d9e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d9e98:	f002 bbc8 	b.w	dc62c <_ZN7TwoWire15endTransmissionEv>

000d9e9c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9ea0:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9ea4:	2907      	cmp	r1, #7
   d9ea6:	bf98      	it	ls
   d9ea8:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9eaa:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9eae:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9eb0:	4631      	mov	r1, r6
   d9eb2:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9eb4:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9eb6:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9eb8:	f7ff ffbc 	bl	d9e34 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9ebc:	f1b8 0f00 	cmp.w	r8, #0
   d9ec0:	d001      	beq.n	d9ec6 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d9ec2:	4304      	orrs	r4, r0
   d9ec4:	e001      	b.n	d9eca <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d9ec6:	ea20 0404 	bic.w	r4, r0, r4
   d9eca:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d9ecc:	4631      	mov	r1, r6
   d9ece:	4628      	mov	r0, r5
}
   d9ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d9ed4:	f7ff bfcb 	b.w	d9e6e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9ed8 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9ed8:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d9eda:	2907      	cmp	r1, #7
   d9edc:	bf28      	it	cs
   d9ede:	2107      	movcs	r1, #7
   d9ee0:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9ee2:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d9ee4:	f003 f9ae 	bl	dd244 <_Z19__fetch_global_Wirev>
   d9ee8:	f002 fb5a 	bl	dc5a0 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d9eec:	4620      	mov	r0, r4
   d9eee:	22ff      	movs	r2, #255	; 0xff
   d9ef0:	2100      	movs	r1, #0
   d9ef2:	f7ff ffbc 	bl	d9e6e <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d9ef6:	4620      	mov	r0, r4
   d9ef8:	22ff      	movs	r2, #255	; 0xff
   d9efa:	2101      	movs	r1, #1
}
   d9efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d9f00:	f7ff bfb5 	b.w	d9e6e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9f04 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d9f04:	2100      	movs	r1, #0
   d9f06:	f7ff bfe7 	b.w	d9ed8 <_ZN17Adafruit_MCP230175beginEh>

000d9f0a <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d9f0a:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d9f0c:	2301      	movs	r3, #1
   d9f0e:	fab2 f282 	clz	r2, r2
   d9f12:	9300      	str	r3, [sp, #0]
   d9f14:	0952      	lsrs	r2, r2, #5
   d9f16:	2300      	movs	r3, #0
   d9f18:	f7ff ffc0 	bl	d9e9c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9f1c:	b003      	add	sp, #12
   d9f1e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9f22 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9f22:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9f26:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9f2a:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9f2c:	bf34      	ite	cc
   d9f2e:	2114      	movcc	r1, #20
   d9f30:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9f32:	4605      	mov	r5, r0
   d9f34:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9f36:	f7ff ff7d 	bl	d9e34 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d9f3a:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9f3c:	40b3      	lsls	r3, r6
   d9f3e:	b10f      	cbz	r7, d9f44 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d9f40:	4303      	orrs	r3, r0
   d9f42:	e001      	b.n	d9f48 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d9f44:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9f48:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9f4a:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9f4c:	4628      	mov	r0, r5
   d9f4e:	bf34      	ite	cc
   d9f50:	2112      	movcc	r1, #18
   d9f52:	2113      	movcs	r1, #19
}
   d9f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9f58:	f7ff bf89 	b.w	d9e6e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9f5c <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d9f5c:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d9f5e:	230d      	movs	r3, #13
   d9f60:	9300      	str	r3, [sp, #0]
   d9f62:	230c      	movs	r3, #12
   d9f64:	f7ff ff9a 	bl	d9e9c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9f68:	b003      	add	sp, #12
   d9f6a:	f85d fb04 	ldr.w	pc, [sp], #4

000d9f6e <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d9f6e:	f000 badd 	b.w	da52c <HAL_Pin_Map>

000d9f72 <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d9f72:	2200      	movs	r2, #0
   d9f74:	6042      	str	r2, [r0, #4]
   d9f76:	6082      	str	r2, [r0, #8]
   d9f78:	60c2      	str	r2, [r0, #12]
   d9f7a:	6102      	str	r2, [r0, #16]
   d9f7c:	6142      	str	r2, [r0, #20]
   d9f7e:	6182      	str	r2, [r0, #24]
   d9f80:	61c2      	str	r2, [r0, #28]
   d9f82:	6202      	str	r2, [r0, #32]
   d9f84:	6242      	str	r2, [r0, #36]	; 0x24
   d9f86:	6282      	str	r2, [r0, #40]	; 0x28
   d9f88:	2201      	movs	r2, #1
   d9f8a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d9f8e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d9f92:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d9f96:	4770      	bx	lr

000d9f98 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d9f98:	b538      	push	{r3, r4, r5, lr}
   d9f9a:	4605      	mov	r5, r0
   d9f9c:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9f9e:	6800      	ldr	r0, [r0, #0]
   d9fa0:	2169      	movs	r1, #105	; 0x69
   d9fa2:	f002 fb3c 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d9fa6:	0a21      	lsrs	r1, r4, #8
   d9fa8:	6828      	ldr	r0, [r5, #0]
   d9faa:	f7ff fa5b 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d9fae:	b2e1      	uxtb	r1, r4
   d9fb0:	6828      	ldr	r0, [r5, #0]
   d9fb2:	f7ff fa57 	bl	d9464 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9fb6:	6828      	ldr	r0, [r5, #0]
   d9fb8:	f002 fb38 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
   d9fbc:	b108      	cbz	r0, d9fc2 <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d9fbe:	2000      	movs	r0, #0
   d9fc0:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d9fc2:	2202      	movs	r2, #2
   d9fc4:	2169      	movs	r1, #105	; 0x69
   d9fc6:	6828      	ldr	r0, [r5, #0]
   d9fc8:	f002 fb22 	bl	dc610 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d9fcc:	6828      	ldr	r0, [r5, #0]
   d9fce:	6803      	ldr	r3, [r0, #0]
   d9fd0:	691b      	ldr	r3, [r3, #16]
   d9fd2:	4798      	blx	r3
   d9fd4:	2800      	cmp	r0, #0
   d9fd6:	d0f2      	beq.n	d9fbe <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d9fd8:	6828      	ldr	r0, [r5, #0]
   d9fda:	6803      	ldr	r3, [r0, #0]
   d9fdc:	695b      	ldr	r3, [r3, #20]
   d9fde:	4798      	blx	r3
   d9fe0:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d9fe2:	6828      	ldr	r0, [r5, #0]
   d9fe4:	6803      	ldr	r3, [r0, #0]
   d9fe6:	695b      	ldr	r3, [r3, #20]
   d9fe8:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d9fea:	0224      	lsls	r4, r4, #8
   d9fec:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d9ff0:	b2c0      	uxtb	r0, r0
   d9ff2:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d9ff4:	bd38      	pop	{r3, r4, r5, pc}

000d9ff6 <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d9ff6:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d9ff8:	f240 2102 	movw	r1, #514	; 0x202
   d9ffc:	f7ff ffcc 	bl	d9f98 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   da000:	1e43      	subs	r3, r0, #1
   da002:	4258      	negs	r0, r3
   da004:	4158      	adcs	r0, r3
   da006:	bd08      	pop	{r3, pc}

000da008 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   da008:	b5f0      	push	{r4, r5, r6, r7, lr}
   da00a:	b08b      	sub	sp, #44	; 0x2c
   da00c:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   da00e:	f7ff fff2 	bl	d9ff6 <_ZN5SPS3013dataAvailableEv>
   da012:	4604      	mov	r4, r0
   da014:	2800      	cmp	r0, #0
   da016:	f000 8104 	beq.w	da222 <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   da01a:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da01c:	2169      	movs	r1, #105	; 0x69
   da01e:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   da020:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   da022:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   da024:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   da026:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   da028:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   da02a:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   da02c:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   da02e:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   da030:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   da032:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da034:	f002 faf3 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   da038:	2103      	movs	r1, #3
   da03a:	6828      	ldr	r0, [r5, #0]
   da03c:	f7ff fa12 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   da040:	4639      	mov	r1, r7
   da042:	6828      	ldr	r0, [r5, #0]
   da044:	f7ff fa0e 	bl	d9464 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   da048:	6828      	ldr	r0, [r5, #0]
   da04a:	f002 faef 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
   da04e:	4606      	mov	r6, r0
   da050:	2800      	cmp	r0, #0
   da052:	f040 80e5 	bne.w	da220 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   da056:	223c      	movs	r2, #60	; 0x3c
   da058:	2169      	movs	r1, #105	; 0x69
   da05a:	6828      	ldr	r0, [r5, #0]
   da05c:	f002 fad8 	bl	dc610 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   da060:	6828      	ldr	r0, [r5, #0]
   da062:	6803      	ldr	r3, [r0, #0]
   da064:	691b      	ldr	r3, [r3, #16]
   da066:	4798      	blx	r3
   da068:	bb18      	cbnz	r0, da0b2 <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   da06a:	9800      	ldr	r0, [sp, #0]
   da06c:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   da06e:	9801      	ldr	r0, [sp, #4]
   da070:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   da072:	9802      	ldr	r0, [sp, #8]
   da074:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   da076:	9803      	ldr	r0, [sp, #12]
   da078:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   da07a:	9804      	ldr	r0, [sp, #16]
   da07c:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   da07e:	9805      	ldr	r0, [sp, #20]
   da080:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   da082:	9806      	ldr	r0, [sp, #24]
   da084:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   da086:	9807      	ldr	r0, [sp, #28]
   da088:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   da08a:	9808      	ldr	r0, [sp, #32]
   da08c:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   da08e:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   da090:	9809      	ldr	r0, [sp, #36]	; 0x24
   da092:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   da094:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   da098:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   da09c:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   da0a0:	e0bf      	b.n	da222 <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   da0a2:	9b00      	ldr	r3, [sp, #0]
   da0a4:	b2c0      	uxtb	r0, r0
   da0a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da0aa:	9000      	str	r0, [sp, #0]
   da0ac:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   da0ae:	2e3c      	cmp	r6, #60	; 0x3c
   da0b0:	d0db      	beq.n	da06a <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   da0b2:	6828      	ldr	r0, [r5, #0]
   da0b4:	6803      	ldr	r3, [r0, #0]
   da0b6:	695b      	ldr	r3, [r3, #20]
   da0b8:	4798      	blx	r3

      switch (x)
   da0ba:	b2f3      	uxtb	r3, r6
   da0bc:	2b3a      	cmp	r3, #58	; 0x3a
   da0be:	d8f5      	bhi.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
   da0c0:	a201      	add	r2, pc, #4	; (adr r2, da0c8 <_ZN5SPS3015readMeasurementEv+0xc0>)
   da0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   da0c6:	bf00      	nop
   da0c8:	000da0a3 	.word	0x000da0a3
   da0cc:	000da0a3 	.word	0x000da0a3
   da0d0:	000da0ad 	.word	0x000da0ad
   da0d4:	000da0a3 	.word	0x000da0a3
   da0d8:	000da0a3 	.word	0x000da0a3
   da0dc:	000da0ad 	.word	0x000da0ad
   da0e0:	000da1b5 	.word	0x000da1b5
   da0e4:	000da1b5 	.word	0x000da1b5
   da0e8:	000da0ad 	.word	0x000da0ad
   da0ec:	000da1b5 	.word	0x000da1b5
   da0f0:	000da1b5 	.word	0x000da1b5
   da0f4:	000da0ad 	.word	0x000da0ad
   da0f8:	000da1c1 	.word	0x000da1c1
   da0fc:	000da1c1 	.word	0x000da1c1
   da100:	000da0ad 	.word	0x000da0ad
   da104:	000da1c1 	.word	0x000da1c1
   da108:	000da1c1 	.word	0x000da1c1
   da10c:	000da0ad 	.word	0x000da0ad
   da110:	000da1cd 	.word	0x000da1cd
   da114:	000da1cd 	.word	0x000da1cd
   da118:	000da0ad 	.word	0x000da0ad
   da11c:	000da1cd 	.word	0x000da1cd
   da120:	000da1cd 	.word	0x000da1cd
   da124:	000da0ad 	.word	0x000da0ad
   da128:	000da1d9 	.word	0x000da1d9
   da12c:	000da1d9 	.word	0x000da1d9
   da130:	000da0ad 	.word	0x000da0ad
   da134:	000da1d9 	.word	0x000da1d9
   da138:	000da1d9 	.word	0x000da1d9
   da13c:	000da0ad 	.word	0x000da0ad
   da140:	000da1e5 	.word	0x000da1e5
   da144:	000da1e5 	.word	0x000da1e5
   da148:	000da0ad 	.word	0x000da0ad
   da14c:	000da1e5 	.word	0x000da1e5
   da150:	000da1e5 	.word	0x000da1e5
   da154:	000da0ad 	.word	0x000da0ad
   da158:	000da1f1 	.word	0x000da1f1
   da15c:	000da1f1 	.word	0x000da1f1
   da160:	000da0ad 	.word	0x000da0ad
   da164:	000da1f1 	.word	0x000da1f1
   da168:	000da1f1 	.word	0x000da1f1
   da16c:	000da0ad 	.word	0x000da0ad
   da170:	000da1fd 	.word	0x000da1fd
   da174:	000da1fd 	.word	0x000da1fd
   da178:	000da0ad 	.word	0x000da0ad
   da17c:	000da1fd 	.word	0x000da1fd
   da180:	000da1fd 	.word	0x000da1fd
   da184:	000da0ad 	.word	0x000da0ad
   da188:	000da209 	.word	0x000da209
   da18c:	000da209 	.word	0x000da209
   da190:	000da0ad 	.word	0x000da0ad
   da194:	000da209 	.word	0x000da209
   da198:	000da209 	.word	0x000da209
   da19c:	000da0ad 	.word	0x000da0ad
   da1a0:	000da215 	.word	0x000da215
   da1a4:	000da215 	.word	0x000da215
   da1a8:	000da0ad 	.word	0x000da0ad
   da1ac:	000da215 	.word	0x000da215
   da1b0:	000da215 	.word	0x000da215
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   da1b4:	9b01      	ldr	r3, [sp, #4]
   da1b6:	b2c0      	uxtb	r0, r0
   da1b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da1bc:	9001      	str	r0, [sp, #4]
   da1be:	e775      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   da1c0:	9b02      	ldr	r3, [sp, #8]
   da1c2:	b2c0      	uxtb	r0, r0
   da1c4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da1c8:	9002      	str	r0, [sp, #8]
   da1ca:	e76f      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   da1cc:	9b03      	ldr	r3, [sp, #12]
   da1ce:	b2c0      	uxtb	r0, r0
   da1d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da1d4:	9003      	str	r0, [sp, #12]
   da1d6:	e769      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   da1d8:	9b04      	ldr	r3, [sp, #16]
   da1da:	b2c0      	uxtb	r0, r0
   da1dc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da1e0:	9004      	str	r0, [sp, #16]
   da1e2:	e763      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   da1e4:	9b05      	ldr	r3, [sp, #20]
   da1e6:	b2c0      	uxtb	r0, r0
   da1e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da1ec:	9005      	str	r0, [sp, #20]
   da1ee:	e75d      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   da1f0:	9b06      	ldr	r3, [sp, #24]
   da1f2:	b2c0      	uxtb	r0, r0
   da1f4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   da1f8:	9306      	str	r3, [sp, #24]
   da1fa:	e757      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   da1fc:	b2c3      	uxtb	r3, r0
   da1fe:	9807      	ldr	r0, [sp, #28]
   da200:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da204:	9307      	str	r3, [sp, #28]
   da206:	e751      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   da208:	b2c3      	uxtb	r3, r0
   da20a:	9808      	ldr	r0, [sp, #32]
   da20c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da210:	9308      	str	r3, [sp, #32]
   da212:	e74b      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   da214:	b2c3      	uxtb	r3, r0
   da216:	9809      	ldr	r0, [sp, #36]	; 0x24
   da218:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da21c:	9309      	str	r3, [sp, #36]	; 0x24
   da21e:	e745      	b.n	da0ac <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   da220:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   da222:	4620      	mov	r0, r4
   da224:	b00b      	add	sp, #44	; 0x2c
   da226:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da228 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da228:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   da22a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da22e:	4604      	mov	r4, r0
   da230:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   da232:	b10b      	cbz	r3, da238 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   da234:	f7ff fee8 	bl	da008 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   da238:	2301      	movs	r3, #1
   da23a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   da23e:	6863      	ldr	r3, [r4, #4]
   da240:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   da242:	68a3      	ldr	r3, [r4, #8]
   da244:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   da246:	68e3      	ldr	r3, [r4, #12]
   da248:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   da24a:	6923      	ldr	r3, [r4, #16]
   da24c:	60eb      	str	r3, [r5, #12]
}
   da24e:	bd38      	pop	{r3, r4, r5, pc}

000da250 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   da250:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   da252:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   da256:	4604      	mov	r4, r0
   da258:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   da25a:	b10b      	cbz	r3, da260 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   da25c:	f7ff fed4 	bl	da008 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   da260:	2301      	movs	r3, #1
   da262:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   da266:	6963      	ldr	r3, [r4, #20]
   da268:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   da26a:	69a3      	ldr	r3, [r4, #24]
   da26c:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   da26e:	69e3      	ldr	r3, [r4, #28]
   da270:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   da272:	6a23      	ldr	r3, [r4, #32]
   da274:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   da276:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da278:	612b      	str	r3, [r5, #16]
}
   da27a:	bd38      	pop	{r3, r4, r5, pc}

000da27c <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da27c:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   da27e:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da280:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   da282:	1a63      	subs	r3, r4, r1
   da284:	b2db      	uxtb	r3, r3
   da286:	429a      	cmp	r2, r3
   da288:	d911      	bls.n	da2ae <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   da28a:	f814 3b01 	ldrb.w	r3, [r4], #1
   da28e:	4058      	eors	r0, r3
   da290:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   da292:	f010 0f80 	tst.w	r0, #128	; 0x80
   da296:	f103 33ff 	add.w	r3, r3, #4294967295
   da29a:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   da29e:	bf18      	it	ne
   da2a0:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da2a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   da2a8:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da2aa:	d1f2      	bne.n	da292 <_ZN5SPS3011computeCRC8EPhh+0x16>
   da2ac:	e7e9      	b.n	da282 <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   da2ae:	bd10      	pop	{r4, pc}

000da2b0 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da2b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da2b4:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   da2b6:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da2b8:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   da2ba:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da2be:	a901      	add	r1, sp, #4
   da2c0:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da2c2:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   da2c4:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da2c8:	f7ff ffd8 	bl	da27c <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da2cc:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da2ce:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da2d0:	6820      	ldr	r0, [r4, #0]
   da2d2:	f002 f9a4 	bl	dc61e <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   da2d6:	0a39      	lsrs	r1, r7, #8
   da2d8:	6820      	ldr	r0, [r4, #0]
   da2da:	f7ff f8c3 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   da2de:	b2f9      	uxtb	r1, r7
   da2e0:	6820      	ldr	r0, [r4, #0]
   da2e2:	f7ff f8bf 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   da2e6:	4631      	mov	r1, r6
   da2e8:	6820      	ldr	r0, [r4, #0]
   da2ea:	f7ff f8bb 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   da2ee:	b2e9      	uxtb	r1, r5
   da2f0:	6820      	ldr	r0, [r4, #0]
   da2f2:	f7ff f8b7 	bl	d9464 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   da2f6:	6820      	ldr	r0, [r4, #0]
   da2f8:	6803      	ldr	r3, [r0, #0]
   da2fa:	4641      	mov	r1, r8
   da2fc:	689b      	ldr	r3, [r3, #8]
   da2fe:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   da300:	6820      	ldr	r0, [r4, #0]
   da302:	f002 f993 	bl	dc62c <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   da306:	fab0 f080 	clz	r0, r0
   da30a:	0940      	lsrs	r0, r0, #5
   da30c:	b002      	add	sp, #8
   da30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da312 <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   da312:	f44f 7240 	mov.w	r2, #768	; 0x300
   da316:	2110      	movs	r1, #16
   da318:	f7ff bfca 	b.w	da2b0 <_ZN5SPS3011sendCommandEtt>

000da31c <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   da31c:	b510      	push	{r4, lr}
   da31e:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   da320:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   da322:	4608      	mov	r0, r1
   da324:	f002 f93c 	bl	dc5a0 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da328:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   da32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da32e:	f7ff bff0 	b.w	da312 <_ZN5SPS3014beginMeasuringEv>

000da332 <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   da332:	f000 b8fb 	b.w	da52c <HAL_Pin_Map>

000da336 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   da336:	f04f 33ff 	mov.w	r3, #4294967295
   da33a:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   da33e:	4770      	bx	lr

000da340 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   da340:	b570      	push	{r4, r5, r6, lr}
   da342:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da344:	f000 f8c2 	bl	da4cc <_Z11BlynkMillisv>
   da348:	2400      	movs	r4, #0
   da34a:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   da34c:	1928      	adds	r0, r5, r4
   da34e:	2224      	movs	r2, #36	; 0x24
   da350:	2100      	movs	r1, #0
   da352:	f009 fa62 	bl	e381a <memset>
        timer[i].prev_millis = current_millis;
   da356:	512e      	str	r6, [r5, r4]
   da358:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   da35a:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   da35e:	d1f5      	bne.n	da34c <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   da360:	2300      	movs	r3, #0
   da362:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   da366:	bd70      	pop	{r4, r5, r6, pc}

000da368 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   da368:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da36c:	2b0f      	cmp	r3, #15
   da36e:	dc08      	bgt.n	da382 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   da370:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   da372:	2224      	movs	r2, #36	; 0x24
   da374:	fb02 0103 	mla	r1, r2, r3, r0
   da378:	6849      	ldr	r1, [r1, #4]
   da37a:	b129      	cbz	r1, da388 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   da37c:	3301      	adds	r3, #1
   da37e:	2b10      	cmp	r3, #16
   da380:	d1f8      	bne.n	da374 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   da382:	f04f 30ff 	mov.w	r0, #4294967295
   da386:	4770      	bx	lr
   da388:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   da38a:	4770      	bx	lr

000da38c <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da390:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   da392:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da396:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da398:	4605      	mov	r5, r0
   da39a:	4689      	mov	r9, r1
   da39c:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   da39e:	da01      	bge.n	da3a4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   da3a0:	f7ff ffce 	bl	da340 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   da3a4:	4628      	mov	r0, r5
   da3a6:	f7ff ffdf 	bl	da368 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   da3aa:	1e04      	subs	r4, r0, #0
   da3ac:	db1a      	blt.n	da3e4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   da3ae:	b1cf      	cbz	r7, da3e4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   da3b0:	2624      	movs	r6, #36	; 0x24
   da3b2:	4366      	muls	r6, r4
   da3b4:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   da3b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   da3ba:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   da3bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da3be:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   da3c0:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   da3c2:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   da3c6:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   da3c8:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   da3cc:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da3ce:	f000 f87d 	bl	da4cc <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   da3d2:	51a8      	str	r0, [r5, r6]

    numTimers++;
   da3d4:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   da3d8:	3301      	adds	r3, #1
   da3da:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   da3de:	4620      	mov	r0, r4
   da3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   da3e4:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   da3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da3ec <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   da3ec:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   da3ee:	2300      	movs	r3, #0
   da3f0:	9301      	str	r3, [sp, #4]
   da3f2:	9300      	str	r3, [sp, #0]
   da3f4:	f7ff ffca 	bl	da38c <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   da3f8:	b003      	add	sp, #12
   da3fa:	f85d fb04 	ldr.w	pc, [sp], #4

000da3fe <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   da3fe:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   da400:	b538      	push	{r3, r4, r5, lr}
   da402:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   da404:	d813      	bhi.n	da42e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   da406:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da40a:	b183      	cbz	r3, da42e <_ZN10BlynkTimer11deleteTimerEj+0x30>
   da40c:	2224      	movs	r2, #36	; 0x24
   da40e:	fb02 f501 	mul.w	r5, r2, r1
   da412:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   da414:	6843      	ldr	r3, [r0, #4]
   da416:	b153      	cbz	r3, da42e <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   da418:	2100      	movs	r1, #0
   da41a:	f009 f9fe 	bl	e381a <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da41e:	f000 f855 	bl	da4cc <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   da422:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   da424:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   da428:	3b01      	subs	r3, #1
   da42a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   da42e:	bd38      	pop	{r3, r4, r5, pc}

000da430 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   da430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da434:	4605      	mov	r5, r0
   da436:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da43a:	f000 f847 	bl	da4cc <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da43e:	2601      	movs	r6, #1
   da440:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da442:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da446:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da44a:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da44c:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da450:	b1e2      	cbz	r2, da48c <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   da452:	f853 8c04 	ldr.w	r8, [r3, #-4]
   da456:	68dc      	ldr	r4, [r3, #12]
   da458:	ebc8 0200 	rsb	r2, r8, r0
   da45c:	42a2      	cmp	r2, r4
   da45e:	d315      	bcc.n	da48c <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   da460:	fbb2 f1f4 	udiv	r1, r2, r4
   da464:	fb04 8201 	mla	r2, r4, r1, r8
   da468:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   da46c:	7e1a      	ldrb	r2, [r3, #24]
   da46e:	b16a      	cbz	r2, da48c <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   da470:	6919      	ldr	r1, [r3, #16]
   da472:	b909      	cbnz	r1, da478 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da474:	61de      	str	r6, [r3, #28]
   da476:	e009      	b.n	da48c <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   da478:	695a      	ldr	r2, [r3, #20]
   da47a:	4291      	cmp	r1, r2
   da47c:	d906      	bls.n	da48c <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   da47e:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   da480:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da482:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   da484:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da486:	bf98      	it	ls
   da488:	f8c3 c01c 	strls.w	ip, [r3, #28]
   da48c:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   da48e:	42bb      	cmp	r3, r7
   da490:	d1db      	bne.n	da44a <_ZN10BlynkTimer3runEv+0x1a>
   da492:	462c      	mov	r4, r5
   da494:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   da496:	6a23      	ldr	r3, [r4, #32]
   da498:	b16b      	cbz	r3, da4b6 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   da49a:	7b22      	ldrb	r2, [r4, #12]
   da49c:	6863      	ldr	r3, [r4, #4]
   da49e:	b112      	cbz	r2, da4a6 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   da4a0:	68a0      	ldr	r0, [r4, #8]
   da4a2:	4798      	blx	r3
   da4a4:	e000      	b.n	da4a8 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   da4a6:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   da4a8:	6a23      	ldr	r3, [r4, #32]
   da4aa:	2b02      	cmp	r3, #2
   da4ac:	d103      	bne.n	da4b6 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   da4ae:	4631      	mov	r1, r6
   da4b0:	4628      	mov	r0, r5
   da4b2:	f7ff ffa4 	bl	da3fe <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   da4b6:	3601      	adds	r6, #1
   da4b8:	2e10      	cmp	r6, #16
   da4ba:	f104 0424 	add.w	r4, r4, #36	; 0x24
   da4be:	d1ea      	bne.n	da496 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   da4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da4c4 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   da4c4:	f000 b832 	b.w	da52c <HAL_Pin_Map>

000da4c8 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   da4c8:	f001 ba64 	b.w	db994 <delay>

000da4cc <_Z11BlynkMillisv>:
   da4cc:	f000 b8be 	b.w	da64c <HAL_Timer_Get_Milli_Seconds>

000da4d0 <_Z12BlynkFreeRamv>:

#ifdef _BLYNK_USE_DEFAULT_FREE_RAM
    size_t BlynkFreeRam()
    {
        return 0;
    }
   da4d0:	2000      	movs	r0, #0
   da4d2:	4770      	bx	lr

000da4d4 <_GLOBAL__sub_I__Z10BlynkResetv>:
   da4d4:	f000 b82a 	b.w	da52c <HAL_Pin_Map>

000da4d8 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   da4d8:	4770      	bx	lr

000da4da <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   da4da:	4770      	bx	lr

000da4dc <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   da4dc:	4770      	bx	lr
	...

000da4e0 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   da4e0:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   da4e2:	bf9a      	itte	ls
   da4e4:	4b02      	ldrls	r3, [pc, #8]	; (da4f0 <GetReadHandler+0x10>)
   da4e6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   da4ea:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   da4ec:	4770      	bx	lr
   da4ee:	bf00      	nop
   da4f0:	000e7d6c 	.word	0x000e7d6c

000da4f4 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   da4f4:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   da4f6:	bf9a      	itte	ls
   da4f8:	4b02      	ldrls	r3, [pc, #8]	; (da504 <GetWriteHandler+0x10>)
   da4fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   da4fe:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   da500:	4770      	bx	lr
   da502:	bf00      	nop
   da504:	000e7b6c 	.word	0x000e7b6c

000da508 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   da508:	f000 b810 	b.w	da52c <HAL_Pin_Map>

000da50c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da50c:	b508      	push	{r3, lr}
   da50e:	4b02      	ldr	r3, [pc, #8]	; (da518 <netdb_freeaddrinfo+0xc>)
   da510:	681b      	ldr	r3, [r3, #0]
   da512:	689b      	ldr	r3, [r3, #8]
   da514:	9301      	str	r3, [sp, #4]
   da516:	bd08      	pop	{r3, pc}
   da518:	00030268 	.word	0x00030268

000da51c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da51c:	b508      	push	{r3, lr}
   da51e:	4b02      	ldr	r3, [pc, #8]	; (da528 <netdb_getaddrinfo+0xc>)
   da520:	681b      	ldr	r3, [r3, #0]
   da522:	68db      	ldr	r3, [r3, #12]
   da524:	9301      	str	r3, [sp, #4]
   da526:	bd08      	pop	{r3, pc}
   da528:	00030268 	.word	0x00030268

000da52c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   da52c:	b508      	push	{r3, lr}
   da52e:	4b02      	ldr	r3, [pc, #8]	; (da538 <HAL_Pin_Map+0xc>)
   da530:	681b      	ldr	r3, [r3, #0]
   da532:	681b      	ldr	r3, [r3, #0]
   da534:	9301      	str	r3, [sp, #4]
   da536:	bd08      	pop	{r3, pc}
   da538:	0003022c 	.word	0x0003022c

000da53c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da53c:	b508      	push	{r3, lr}
   da53e:	4b02      	ldr	r3, [pc, #8]	; (da548 <HAL_Validate_Pin_Function+0xc>)
   da540:	681b      	ldr	r3, [r3, #0]
   da542:	685b      	ldr	r3, [r3, #4]
   da544:	9301      	str	r3, [sp, #4]
   da546:	bd08      	pop	{r3, pc}
   da548:	0003022c 	.word	0x0003022c

000da54c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da54c:	b508      	push	{r3, lr}
   da54e:	4b02      	ldr	r3, [pc, #8]	; (da558 <HAL_Pin_Mode+0xc>)
   da550:	681b      	ldr	r3, [r3, #0]
   da552:	689b      	ldr	r3, [r3, #8]
   da554:	9301      	str	r3, [sp, #4]
   da556:	bd08      	pop	{r3, pc}
   da558:	0003022c 	.word	0x0003022c

000da55c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da55c:	b508      	push	{r3, lr}
   da55e:	4b02      	ldr	r3, [pc, #8]	; (da568 <HAL_Get_Pin_Mode+0xc>)
   da560:	681b      	ldr	r3, [r3, #0]
   da562:	68db      	ldr	r3, [r3, #12]
   da564:	9301      	str	r3, [sp, #4]
   da566:	bd08      	pop	{r3, pc}
   da568:	0003022c 	.word	0x0003022c

000da56c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da56c:	b508      	push	{r3, lr}
   da56e:	4b02      	ldr	r3, [pc, #8]	; (da578 <HAL_GPIO_Write+0xc>)
   da570:	681b      	ldr	r3, [r3, #0]
   da572:	691b      	ldr	r3, [r3, #16]
   da574:	9301      	str	r3, [sp, #4]
   da576:	bd08      	pop	{r3, pc}
   da578:	0003022c 	.word	0x0003022c

000da57c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da57c:	b508      	push	{r3, lr}
   da57e:	4b02      	ldr	r3, [pc, #8]	; (da588 <HAL_GPIO_Read+0xc>)
   da580:	681b      	ldr	r3, [r3, #0]
   da582:	695b      	ldr	r3, [r3, #20]
   da584:	9301      	str	r3, [sp, #4]
   da586:	bd08      	pop	{r3, pc}
   da588:	0003022c 	.word	0x0003022c

000da58c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da58c:	b508      	push	{r3, lr}
   da58e:	4b02      	ldr	r3, [pc, #8]	; (da598 <HAL_Interrupts_Attach+0xc>)
   da590:	681b      	ldr	r3, [r3, #0]
   da592:	699b      	ldr	r3, [r3, #24]
   da594:	9301      	str	r3, [sp, #4]
   da596:	bd08      	pop	{r3, pc}
   da598:	0003022c 	.word	0x0003022c

000da59c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da59c:	b508      	push	{r3, lr}
   da59e:	4b02      	ldr	r3, [pc, #8]	; (da5a8 <HAL_Interrupts_Detach+0xc>)
   da5a0:	681b      	ldr	r3, [r3, #0]
   da5a2:	69db      	ldr	r3, [r3, #28]
   da5a4:	9301      	str	r3, [sp, #4]
   da5a6:	bd08      	pop	{r3, pc}
   da5a8:	0003022c 	.word	0x0003022c

000da5ac <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   da5ac:	b508      	push	{r3, lr}
   da5ae:	4b02      	ldr	r3, [pc, #8]	; (da5b8 <HAL_DAC_Write+0xc>)
   da5b0:	681b      	ldr	r3, [r3, #0]
   da5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da5b4:	9301      	str	r3, [sp, #4]
   da5b6:	bd08      	pop	{r3, pc}
   da5b8:	0003022c 	.word	0x0003022c

000da5bc <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   da5bc:	b508      	push	{r3, lr}
   da5be:	4b02      	ldr	r3, [pc, #8]	; (da5c8 <HAL_ADC_Read+0xc>)
   da5c0:	681b      	ldr	r3, [r3, #0]
   da5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da5c4:	9301      	str	r3, [sp, #4]
   da5c6:	bd08      	pop	{r3, pc}
   da5c8:	0003022c 	.word	0x0003022c

000da5cc <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   da5cc:	b508      	push	{r3, lr}
   da5ce:	4b02      	ldr	r3, [pc, #8]	; (da5d8 <HAL_PWM_Write_Ext+0xc>)
   da5d0:	681b      	ldr	r3, [r3, #0]
   da5d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   da5d4:	9301      	str	r3, [sp, #4]
   da5d6:	bd08      	pop	{r3, pc}
   da5d8:	0003022c 	.word	0x0003022c

000da5dc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   da5dc:	b508      	push	{r3, lr}
   da5de:	4b02      	ldr	r3, [pc, #8]	; (da5e8 <HAL_SPI_Send_Receive_Data+0xc>)
   da5e0:	681b      	ldr	r3, [r3, #0]
   da5e2:	695b      	ldr	r3, [r3, #20]
   da5e4:	9301      	str	r3, [sp, #4]
   da5e6:	bd08      	pop	{r3, pc}
   da5e8:	00030230 	.word	0x00030230

000da5ec <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   da5ec:	b508      	push	{r3, lr}
   da5ee:	4b02      	ldr	r3, [pc, #8]	; (da5f8 <HAL_SPI_Init+0xc>)
   da5f0:	681b      	ldr	r3, [r3, #0]
   da5f2:	69db      	ldr	r3, [r3, #28]
   da5f4:	9301      	str	r3, [sp, #4]
   da5f6:	bd08      	pop	{r3, pc}
   da5f8:	00030230 	.word	0x00030230

000da5fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   da5fc:	b508      	push	{r3, lr}
   da5fe:	4b02      	ldr	r3, [pc, #8]	; (da608 <HAL_SPI_Is_Enabled+0xc>)
   da600:	681b      	ldr	r3, [r3, #0]
   da602:	6a1b      	ldr	r3, [r3, #32]
   da604:	9301      	str	r3, [sp, #4]
   da606:	bd08      	pop	{r3, pc}
   da608:	00030230 	.word	0x00030230

000da60c <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   da60c:	b508      	push	{r3, lr}
   da60e:	4b02      	ldr	r3, [pc, #8]	; (da618 <HAL_SPI_Acquire+0xc>)
   da610:	681b      	ldr	r3, [r3, #0]
   da612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da614:	9301      	str	r3, [sp, #4]
   da616:	bd08      	pop	{r3, pc}
   da618:	00030230 	.word	0x00030230

000da61c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   da61c:	b508      	push	{r3, lr}
   da61e:	4b02      	ldr	r3, [pc, #8]	; (da628 <HAL_SPI_Release+0xc>)
   da620:	681b      	ldr	r3, [r3, #0]
   da622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da624:	9301      	str	r3, [sp, #4]
   da626:	bd08      	pop	{r3, pc}
   da628:	00030230 	.word	0x00030230

000da62c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   da62c:	b508      	push	{r3, lr}
   da62e:	4b02      	ldr	r3, [pc, #8]	; (da638 <if_index_to_name+0xc>)
   da630:	681b      	ldr	r3, [r3, #0]
   da632:	695b      	ldr	r3, [r3, #20]
   da634:	9301      	str	r3, [sp, #4]
   da636:	bd08      	pop	{r3, pc}
   da638:	0003026c 	.word	0x0003026c

000da63c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da63c:	b508      	push	{r3, lr}
   da63e:	4b02      	ldr	r3, [pc, #8]	; (da648 <HAL_RNG_GetRandomNumber+0xc>)
   da640:	681b      	ldr	r3, [r3, #0]
   da642:	685b      	ldr	r3, [r3, #4]
   da644:	9301      	str	r3, [sp, #4]
   da646:	bd08      	pop	{r3, pc}
   da648:	00030218 	.word	0x00030218

000da64c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da64c:	b508      	push	{r3, lr}
   da64e:	4b02      	ldr	r3, [pc, #8]	; (da658 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da650:	681b      	ldr	r3, [r3, #0]
   da652:	695b      	ldr	r3, [r3, #20]
   da654:	9301      	str	r3, [sp, #4]
   da656:	bd08      	pop	{r3, pc}
   da658:	00030218 	.word	0x00030218

000da65c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   da65c:	b508      	push	{r3, lr}
   da65e:	4b02      	ldr	r3, [pc, #8]	; (da668 <HAL_RTC_Get_UnixTime+0xc>)
   da660:	681b      	ldr	r3, [r3, #0]
   da662:	69db      	ldr	r3, [r3, #28]
   da664:	9301      	str	r3, [sp, #4]
   da666:	bd08      	pop	{r3, pc}
   da668:	00030218 	.word	0x00030218

000da66c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   da66c:	b508      	push	{r3, lr}
   da66e:	4b02      	ldr	r3, [pc, #8]	; (da678 <HAL_RTC_Time_Is_Valid+0xc>)
   da670:	681b      	ldr	r3, [r3, #0]
   da672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da674:	9301      	str	r3, [sp, #4]
   da676:	bd08      	pop	{r3, pc}
   da678:	00030218 	.word	0x00030218

000da67c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da67c:	b508      	push	{r3, lr}
   da67e:	4b02      	ldr	r3, [pc, #8]	; (da688 <hal_timer_millis+0xc>)
   da680:	681b      	ldr	r3, [r3, #0]
   da682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da684:	9301      	str	r3, [sp, #4]
   da686:	bd08      	pop	{r3, pc}
   da688:	00030218 	.word	0x00030218

000da68c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   da68c:	b508      	push	{r3, lr}
   da68e:	4b02      	ldr	r3, [pc, #8]	; (da698 <HAL_Core_System_Reset_Ex+0xc>)
   da690:	681b      	ldr	r3, [r3, #0]
   da692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da694:	9301      	str	r3, [sp, #4]
   da696:	bd08      	pop	{r3, pc}
   da698:	00030234 	.word	0x00030234

000da69c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   da69c:	b508      	push	{r3, lr}
   da69e:	4b02      	ldr	r3, [pc, #8]	; (da6a8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   da6a0:	681b      	ldr	r3, [r3, #0]
   da6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da6a4:	9301      	str	r3, [sp, #4]
   da6a6:	bd08      	pop	{r3, pc}
   da6a8:	00030234 	.word	0x00030234

000da6ac <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da6ac:	b508      	push	{r3, lr}
   da6ae:	4b02      	ldr	r3, [pc, #8]	; (da6b8 <os_thread_is_current+0xc>)
   da6b0:	681b      	ldr	r3, [r3, #0]
   da6b2:	689b      	ldr	r3, [r3, #8]
   da6b4:	9301      	str	r3, [sp, #4]
   da6b6:	bd08      	pop	{r3, pc}
   da6b8:	00030248 	.word	0x00030248

000da6bc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da6bc:	b508      	push	{r3, lr}
   da6be:	4b02      	ldr	r3, [pc, #8]	; (da6c8 <os_thread_join+0xc>)
   da6c0:	681b      	ldr	r3, [r3, #0]
   da6c2:	691b      	ldr	r3, [r3, #16]
   da6c4:	9301      	str	r3, [sp, #4]
   da6c6:	bd08      	pop	{r3, pc}
   da6c8:	00030248 	.word	0x00030248

000da6cc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da6cc:	b508      	push	{r3, lr}
   da6ce:	4b02      	ldr	r3, [pc, #8]	; (da6d8 <os_thread_cleanup+0xc>)
   da6d0:	681b      	ldr	r3, [r3, #0]
   da6d2:	695b      	ldr	r3, [r3, #20]
   da6d4:	9301      	str	r3, [sp, #4]
   da6d6:	bd08      	pop	{r3, pc}
   da6d8:	00030248 	.word	0x00030248

000da6dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da6dc:	b508      	push	{r3, lr}
   da6de:	4b02      	ldr	r3, [pc, #8]	; (da6e8 <os_mutex_recursive_create+0xc>)
   da6e0:	681b      	ldr	r3, [r3, #0]
   da6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da6e4:	9301      	str	r3, [sp, #4]
   da6e6:	bd08      	pop	{r3, pc}
   da6e8:	00030248 	.word	0x00030248

000da6ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   da6ec:	b508      	push	{r3, lr}
   da6ee:	4b02      	ldr	r3, [pc, #8]	; (da6f8 <os_mutex_recursive_destroy+0xc>)
   da6f0:	681b      	ldr	r3, [r3, #0]
   da6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da6f4:	9301      	str	r3, [sp, #4]
   da6f6:	bd08      	pop	{r3, pc}
   da6f8:	00030248 	.word	0x00030248

000da6fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da6fc:	b508      	push	{r3, lr}
   da6fe:	4b02      	ldr	r3, [pc, #8]	; (da708 <inet_inet_ntop+0xc>)
   da700:	681b      	ldr	r3, [r3, #0]
   da702:	695b      	ldr	r3, [r3, #20]
   da704:	9301      	str	r3, [sp, #4]
   da706:	bd08      	pop	{r3, pc}
   da708:	00030264 	.word	0x00030264

000da70c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   da70c:	b508      	push	{r3, lr}
   da70e:	4b02      	ldr	r3, [pc, #8]	; (da718 <inet_htonl+0xc>)
   da710:	681b      	ldr	r3, [r3, #0]
   da712:	6a1b      	ldr	r3, [r3, #32]
   da714:	9301      	str	r3, [sp, #4]
   da716:	bd08      	pop	{r3, pc}
   da718:	00030264 	.word	0x00030264

000da71c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   da71c:	b508      	push	{r3, lr}
   da71e:	4b02      	ldr	r3, [pc, #8]	; (da728 <inet_htons+0xc>)
   da720:	681b      	ldr	r3, [r3, #0]
   da722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da724:	9301      	str	r3, [sp, #4]
   da726:	bd08      	pop	{r3, pc}
   da728:	00030264 	.word	0x00030264

000da72c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   da72c:	b508      	push	{r3, lr}
   da72e:	4b02      	ldr	r3, [pc, #8]	; (da738 <HAL_USART_Init+0xc>)
   da730:	681b      	ldr	r3, [r3, #0]
   da732:	681b      	ldr	r3, [r3, #0]
   da734:	9301      	str	r3, [sp, #4]
   da736:	bd08      	pop	{r3, pc}
   da738:	0003023c 	.word	0x0003023c

000da73c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   da73c:	b508      	push	{r3, lr}
   da73e:	4b02      	ldr	r3, [pc, #8]	; (da748 <HAL_USART_Write_Data+0xc>)
   da740:	681b      	ldr	r3, [r3, #0]
   da742:	68db      	ldr	r3, [r3, #12]
   da744:	9301      	str	r3, [sp, #4]
   da746:	bd08      	pop	{r3, pc}
   da748:	0003023c 	.word	0x0003023c

000da74c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   da74c:	b508      	push	{r3, lr}
   da74e:	4b02      	ldr	r3, [pc, #8]	; (da758 <HAL_USART_Available_Data+0xc>)
   da750:	681b      	ldr	r3, [r3, #0]
   da752:	691b      	ldr	r3, [r3, #16]
   da754:	9301      	str	r3, [sp, #4]
   da756:	bd08      	pop	{r3, pc}
   da758:	0003023c 	.word	0x0003023c

000da75c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   da75c:	b508      	push	{r3, lr}
   da75e:	4b02      	ldr	r3, [pc, #8]	; (da768 <HAL_USART_Read_Data+0xc>)
   da760:	681b      	ldr	r3, [r3, #0]
   da762:	695b      	ldr	r3, [r3, #20]
   da764:	9301      	str	r3, [sp, #4]
   da766:	bd08      	pop	{r3, pc}
   da768:	0003023c 	.word	0x0003023c

000da76c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   da76c:	b508      	push	{r3, lr}
   da76e:	4b02      	ldr	r3, [pc, #8]	; (da778 <HAL_USART_Peek_Data+0xc>)
   da770:	681b      	ldr	r3, [r3, #0]
   da772:	699b      	ldr	r3, [r3, #24]
   da774:	9301      	str	r3, [sp, #4]
   da776:	bd08      	pop	{r3, pc}
   da778:	0003023c 	.word	0x0003023c

000da77c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   da77c:	b508      	push	{r3, lr}
   da77e:	4b02      	ldr	r3, [pc, #8]	; (da788 <HAL_USART_Flush_Data+0xc>)
   da780:	681b      	ldr	r3, [r3, #0]
   da782:	69db      	ldr	r3, [r3, #28]
   da784:	9301      	str	r3, [sp, #4]
   da786:	bd08      	pop	{r3, pc}
   da788:	0003023c 	.word	0x0003023c

000da78c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   da78c:	b508      	push	{r3, lr}
   da78e:	4b02      	ldr	r3, [pc, #8]	; (da798 <HAL_USART_Is_Enabled+0xc>)
   da790:	681b      	ldr	r3, [r3, #0]
   da792:	6a1b      	ldr	r3, [r3, #32]
   da794:	9301      	str	r3, [sp, #4]
   da796:	bd08      	pop	{r3, pc}
   da798:	0003023c 	.word	0x0003023c

000da79c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   da79c:	b508      	push	{r3, lr}
   da79e:	4b02      	ldr	r3, [pc, #8]	; (da7a8 <HAL_USART_Available_Data_For_Write+0xc>)
   da7a0:	681b      	ldr	r3, [r3, #0]
   da7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da7a4:	9301      	str	r3, [sp, #4]
   da7a6:	bd08      	pop	{r3, pc}
   da7a8:	0003023c 	.word	0x0003023c

000da7ac <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   da7ac:	b508      	push	{r3, lr}
   da7ae:	4b02      	ldr	r3, [pc, #8]	; (da7b8 <HAL_USART_BeginConfig+0xc>)
   da7b0:	681b      	ldr	r3, [r3, #0]
   da7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da7b4:	9301      	str	r3, [sp, #4]
   da7b6:	bd08      	pop	{r3, pc}
   da7b8:	0003023c 	.word	0x0003023c

000da7bc <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   da7bc:	b508      	push	{r3, lr}
   da7be:	4b02      	ldr	r3, [pc, #8]	; (da7c8 <HAL_I2C_Set_Speed+0xc>)
   da7c0:	681b      	ldr	r3, [r3, #0]
   da7c2:	681b      	ldr	r3, [r3, #0]
   da7c4:	9301      	str	r3, [sp, #4]
   da7c6:	bd08      	pop	{r3, pc}
   da7c8:	00030228 	.word	0x00030228

000da7cc <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   da7cc:	b508      	push	{r3, lr}
   da7ce:	4b02      	ldr	r3, [pc, #8]	; (da7d8 <HAL_I2C_Begin+0xc>)
   da7d0:	681b      	ldr	r3, [r3, #0]
   da7d2:	68db      	ldr	r3, [r3, #12]
   da7d4:	9301      	str	r3, [sp, #4]
   da7d6:	bd08      	pop	{r3, pc}
   da7d8:	00030228 	.word	0x00030228

000da7dc <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   da7dc:	b508      	push	{r3, lr}
   da7de:	4b02      	ldr	r3, [pc, #8]	; (da7e8 <HAL_I2C_End+0xc>)
   da7e0:	681b      	ldr	r3, [r3, #0]
   da7e2:	691b      	ldr	r3, [r3, #16]
   da7e4:	9301      	str	r3, [sp, #4]
   da7e6:	bd08      	pop	{r3, pc}
   da7e8:	00030228 	.word	0x00030228

000da7ec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   da7ec:	b508      	push	{r3, lr}
   da7ee:	4b02      	ldr	r3, [pc, #8]	; (da7f8 <HAL_I2C_Begin_Transmission+0xc>)
   da7f0:	681b      	ldr	r3, [r3, #0]
   da7f2:	699b      	ldr	r3, [r3, #24]
   da7f4:	9301      	str	r3, [sp, #4]
   da7f6:	bd08      	pop	{r3, pc}
   da7f8:	00030228 	.word	0x00030228

000da7fc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   da7fc:	b508      	push	{r3, lr}
   da7fe:	4b02      	ldr	r3, [pc, #8]	; (da808 <HAL_I2C_End_Transmission+0xc>)
   da800:	681b      	ldr	r3, [r3, #0]
   da802:	69db      	ldr	r3, [r3, #28]
   da804:	9301      	str	r3, [sp, #4]
   da806:	bd08      	pop	{r3, pc}
   da808:	00030228 	.word	0x00030228

000da80c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   da80c:	b508      	push	{r3, lr}
   da80e:	4b02      	ldr	r3, [pc, #8]	; (da818 <HAL_I2C_Write_Data+0xc>)
   da810:	681b      	ldr	r3, [r3, #0]
   da812:	6a1b      	ldr	r3, [r3, #32]
   da814:	9301      	str	r3, [sp, #4]
   da816:	bd08      	pop	{r3, pc}
   da818:	00030228 	.word	0x00030228

000da81c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   da81c:	b508      	push	{r3, lr}
   da81e:	4b02      	ldr	r3, [pc, #8]	; (da828 <HAL_I2C_Available_Data+0xc>)
   da820:	681b      	ldr	r3, [r3, #0]
   da822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da824:	9301      	str	r3, [sp, #4]
   da826:	bd08      	pop	{r3, pc}
   da828:	00030228 	.word	0x00030228

000da82c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   da82c:	b508      	push	{r3, lr}
   da82e:	4b02      	ldr	r3, [pc, #8]	; (da838 <HAL_I2C_Read_Data+0xc>)
   da830:	681b      	ldr	r3, [r3, #0]
   da832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da834:	9301      	str	r3, [sp, #4]
   da836:	bd08      	pop	{r3, pc}
   da838:	00030228 	.word	0x00030228

000da83c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   da83c:	b508      	push	{r3, lr}
   da83e:	4b02      	ldr	r3, [pc, #8]	; (da848 <HAL_I2C_Peek_Data+0xc>)
   da840:	681b      	ldr	r3, [r3, #0]
   da842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da844:	9301      	str	r3, [sp, #4]
   da846:	bd08      	pop	{r3, pc}
   da848:	00030228 	.word	0x00030228

000da84c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   da84c:	b508      	push	{r3, lr}
   da84e:	4b02      	ldr	r3, [pc, #8]	; (da858 <HAL_I2C_Flush_Data+0xc>)
   da850:	681b      	ldr	r3, [r3, #0]
   da852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da854:	9301      	str	r3, [sp, #4]
   da856:	bd08      	pop	{r3, pc}
   da858:	00030228 	.word	0x00030228

000da85c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   da85c:	b508      	push	{r3, lr}
   da85e:	4b02      	ldr	r3, [pc, #8]	; (da868 <HAL_I2C_Is_Enabled+0xc>)
   da860:	681b      	ldr	r3, [r3, #0]
   da862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da864:	9301      	str	r3, [sp, #4]
   da866:	bd08      	pop	{r3, pc}
   da868:	00030228 	.word	0x00030228

000da86c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   da86c:	b508      	push	{r3, lr}
   da86e:	4b02      	ldr	r3, [pc, #8]	; (da878 <HAL_I2C_Init+0xc>)
   da870:	681b      	ldr	r3, [r3, #0]
   da872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da874:	9301      	str	r3, [sp, #4]
   da876:	bd08      	pop	{r3, pc}
   da878:	00030228 	.word	0x00030228

000da87c <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   da87c:	b508      	push	{r3, lr}
   da87e:	4b02      	ldr	r3, [pc, #8]	; (da888 <HAL_I2C_Reset+0xc>)
   da880:	681b      	ldr	r3, [r3, #0]
   da882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da884:	9301      	str	r3, [sp, #4]
   da886:	bd08      	pop	{r3, pc}
   da888:	00030228 	.word	0x00030228

000da88c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   da88c:	b508      	push	{r3, lr}
   da88e:	4b02      	ldr	r3, [pc, #8]	; (da898 <HAL_I2C_Acquire+0xc>)
   da890:	681b      	ldr	r3, [r3, #0]
   da892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da894:	9301      	str	r3, [sp, #4]
   da896:	bd08      	pop	{r3, pc}
   da898:	00030228 	.word	0x00030228

000da89c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   da89c:	b508      	push	{r3, lr}
   da89e:	4b02      	ldr	r3, [pc, #8]	; (da8a8 <HAL_I2C_Release+0xc>)
   da8a0:	681b      	ldr	r3, [r3, #0]
   da8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da8a4:	9301      	str	r3, [sp, #4]
   da8a6:	bd08      	pop	{r3, pc}
   da8a8:	00030228 	.word	0x00030228

000da8ac <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   da8ac:	b508      	push	{r3, lr}
   da8ae:	4b02      	ldr	r3, [pc, #8]	; (da8b8 <HAL_I2C_Request_Data_Ex+0xc>)
   da8b0:	681b      	ldr	r3, [r3, #0]
   da8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da8b4:	9301      	str	r3, [sp, #4]
   da8b6:	bd08      	pop	{r3, pc}
   da8b8:	00030228 	.word	0x00030228

000da8bc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   da8bc:	b508      	push	{r3, lr}
   da8be:	4b02      	ldr	r3, [pc, #8]	; (da8c8 <sock_setsockopt+0xc>)
   da8c0:	681b      	ldr	r3, [r3, #0]
   da8c2:	699b      	ldr	r3, [r3, #24]
   da8c4:	9301      	str	r3, [sp, #4]
   da8c6:	bd08      	pop	{r3, pc}
   da8c8:	00030238 	.word	0x00030238

000da8cc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   da8cc:	b508      	push	{r3, lr}
   da8ce:	4b02      	ldr	r3, [pc, #8]	; (da8d8 <sock_close+0xc>)
   da8d0:	681b      	ldr	r3, [r3, #0]
   da8d2:	69db      	ldr	r3, [r3, #28]
   da8d4:	9301      	str	r3, [sp, #4]
   da8d6:	bd08      	pop	{r3, pc}
   da8d8:	00030238 	.word	0x00030238

000da8dc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   da8dc:	b508      	push	{r3, lr}
   da8de:	4b02      	ldr	r3, [pc, #8]	; (da8e8 <sock_connect+0xc>)
   da8e0:	681b      	ldr	r3, [r3, #0]
   da8e2:	6a1b      	ldr	r3, [r3, #32]
   da8e4:	9301      	str	r3, [sp, #4]
   da8e6:	bd08      	pop	{r3, pc}
   da8e8:	00030238 	.word	0x00030238

000da8ec <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   da8ec:	b508      	push	{r3, lr}
   da8ee:	4b02      	ldr	r3, [pc, #8]	; (da8f8 <sock_recv+0xc>)
   da8f0:	681b      	ldr	r3, [r3, #0]
   da8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da8f4:	9301      	str	r3, [sp, #4]
   da8f6:	bd08      	pop	{r3, pc}
   da8f8:	00030238 	.word	0x00030238

000da8fc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   da8fc:	b508      	push	{r3, lr}
   da8fe:	4b02      	ldr	r3, [pc, #8]	; (da908 <sock_send+0xc>)
   da900:	681b      	ldr	r3, [r3, #0]
   da902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da904:	9301      	str	r3, [sp, #4]
   da906:	bd08      	pop	{r3, pc}
   da908:	00030238 	.word	0x00030238

000da90c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   da90c:	b508      	push	{r3, lr}
   da90e:	4b02      	ldr	r3, [pc, #8]	; (da918 <sock_socket+0xc>)
   da910:	681b      	ldr	r3, [r3, #0]
   da912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da914:	9301      	str	r3, [sp, #4]
   da916:	bd08      	pop	{r3, pc}
   da918:	00030238 	.word	0x00030238

000da91c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da91c:	b508      	push	{r3, lr}
   da91e:	4b02      	ldr	r3, [pc, #8]	; (da928 <HAL_USB_USART_Init+0xc>)
   da920:	681b      	ldr	r3, [r3, #0]
   da922:	681b      	ldr	r3, [r3, #0]
   da924:	9301      	str	r3, [sp, #4]
   da926:	bd08      	pop	{r3, pc}
   da928:	0003024c 	.word	0x0003024c

000da92c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da92c:	b508      	push	{r3, lr}
   da92e:	4b02      	ldr	r3, [pc, #8]	; (da938 <HAL_USB_USART_Begin+0xc>)
   da930:	681b      	ldr	r3, [r3, #0]
   da932:	685b      	ldr	r3, [r3, #4]
   da934:	9301      	str	r3, [sp, #4]
   da936:	bd08      	pop	{r3, pc}
   da938:	0003024c 	.word	0x0003024c

000da93c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da93c:	b508      	push	{r3, lr}
   da93e:	4b02      	ldr	r3, [pc, #8]	; (da948 <HAL_USB_USART_Available_Data+0xc>)
   da940:	681b      	ldr	r3, [r3, #0]
   da942:	691b      	ldr	r3, [r3, #16]
   da944:	9301      	str	r3, [sp, #4]
   da946:	bd08      	pop	{r3, pc}
   da948:	0003024c 	.word	0x0003024c

000da94c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da94c:	b508      	push	{r3, lr}
   da94e:	4b02      	ldr	r3, [pc, #8]	; (da958 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da950:	681b      	ldr	r3, [r3, #0]
   da952:	695b      	ldr	r3, [r3, #20]
   da954:	9301      	str	r3, [sp, #4]
   da956:	bd08      	pop	{r3, pc}
   da958:	0003024c 	.word	0x0003024c

000da95c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da95c:	b508      	push	{r3, lr}
   da95e:	4b02      	ldr	r3, [pc, #8]	; (da968 <HAL_USB_USART_Receive_Data+0xc>)
   da960:	681b      	ldr	r3, [r3, #0]
   da962:	699b      	ldr	r3, [r3, #24]
   da964:	9301      	str	r3, [sp, #4]
   da966:	bd08      	pop	{r3, pc}
   da968:	0003024c 	.word	0x0003024c

000da96c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da96c:	b508      	push	{r3, lr}
   da96e:	4b02      	ldr	r3, [pc, #8]	; (da978 <HAL_USB_USART_Send_Data+0xc>)
   da970:	681b      	ldr	r3, [r3, #0]
   da972:	69db      	ldr	r3, [r3, #28]
   da974:	9301      	str	r3, [sp, #4]
   da976:	bd08      	pop	{r3, pc}
   da978:	0003024c 	.word	0x0003024c

000da97c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da97c:	b508      	push	{r3, lr}
   da97e:	4b02      	ldr	r3, [pc, #8]	; (da988 <HAL_USB_USART_Flush_Data+0xc>)
   da980:	681b      	ldr	r3, [r3, #0]
   da982:	6a1b      	ldr	r3, [r3, #32]
   da984:	9301      	str	r3, [sp, #4]
   da986:	bd08      	pop	{r3, pc}
   da988:	0003024c 	.word	0x0003024c

000da98c <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   da98c:	b508      	push	{r3, lr}
   da98e:	4b02      	ldr	r3, [pc, #8]	; (da998 <wlan_connected_info+0xc>)
   da990:	681b      	ldr	r3, [r3, #0]
   da992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   da994:	9301      	str	r3, [sp, #4]
   da996:	bd08      	pop	{r3, pc}
   da998:	00030274 	.word	0x00030274

000da99c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   da99c:	b508      	push	{r3, lr}
   da99e:	4b02      	ldr	r3, [pc, #8]	; (da9a8 <LED_SetSignalingColor+0xc>)
   da9a0:	681b      	ldr	r3, [r3, #0]
   da9a2:	685b      	ldr	r3, [r3, #4]
   da9a4:	9301      	str	r3, [sp, #4]
   da9a6:	bd08      	pop	{r3, pc}
   da9a8:	00030260 	.word	0x00030260

000da9ac <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   da9ac:	b508      	push	{r3, lr}
   da9ae:	4b02      	ldr	r3, [pc, #8]	; (da9b8 <LED_Signaling_Start+0xc>)
   da9b0:	681b      	ldr	r3, [r3, #0]
   da9b2:	689b      	ldr	r3, [r3, #8]
   da9b4:	9301      	str	r3, [sp, #4]
   da9b6:	bd08      	pop	{r3, pc}
   da9b8:	00030260 	.word	0x00030260

000da9bc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   da9bc:	b508      	push	{r3, lr}
   da9be:	4b02      	ldr	r3, [pc, #8]	; (da9c8 <LED_Signaling_Stop+0xc>)
   da9c0:	681b      	ldr	r3, [r3, #0]
   da9c2:	68db      	ldr	r3, [r3, #12]
   da9c4:	9301      	str	r3, [sp, #4]
   da9c6:	bd08      	pop	{r3, pc}
   da9c8:	00030260 	.word	0x00030260

000da9cc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   da9cc:	b508      	push	{r3, lr}
   da9ce:	4b02      	ldr	r3, [pc, #8]	; (da9d8 <LED_RGB_IsOverRidden+0xc>)
   da9d0:	681b      	ldr	r3, [r3, #0]
   da9d2:	699b      	ldr	r3, [r3, #24]
   da9d4:	9301      	str	r3, [sp, #4]
   da9d6:	bd08      	pop	{r3, pc}
   da9d8:	00030260 	.word	0x00030260

000da9dc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   da9dc:	b508      	push	{r3, lr}
   da9de:	4b02      	ldr	r3, [pc, #8]	; (da9e8 <LED_On+0xc>)
   da9e0:	681b      	ldr	r3, [r3, #0]
   da9e2:	69db      	ldr	r3, [r3, #28]
   da9e4:	9301      	str	r3, [sp, #4]
   da9e6:	bd08      	pop	{r3, pc}
   da9e8:	00030260 	.word	0x00030260

000da9ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da9ec:	b508      	push	{r3, lr}
   da9ee:	4b02      	ldr	r3, [pc, #8]	; (da9f8 <log_message+0xc>)
   da9f0:	681b      	ldr	r3, [r3, #0]
   da9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da9f4:	9301      	str	r3, [sp, #4]
   da9f6:	bd08      	pop	{r3, pc}
   da9f8:	00030260 	.word	0x00030260

000da9fc <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   da9fc:	b508      	push	{r3, lr}
   da9fe:	4b03      	ldr	r3, [pc, #12]	; (daa0c <led_set_status_active+0x10>)
   daa00:	681b      	ldr	r3, [r3, #0]
   daa02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   daa06:	9301      	str	r3, [sp, #4]
   daa08:	bd08      	pop	{r3, pc}
   daa0a:	0000      	.short	0x0000
   daa0c:	00030260 	.word	0x00030260

000daa10 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   daa10:	b508      	push	{r3, lr}
   daa12:	4b02      	ldr	r3, [pc, #8]	; (daa1c <system_mode+0xc>)
   daa14:	681b      	ldr	r3, [r3, #0]
   daa16:	681b      	ldr	r3, [r3, #0]
   daa18:	9301      	str	r3, [sp, #4]
   daa1a:	bd08      	pop	{r3, pc}
   daa1c:	00030220 	.word	0x00030220

000daa20 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   daa20:	b508      	push	{r3, lr}
   daa22:	4b02      	ldr	r3, [pc, #8]	; (daa2c <set_system_mode+0xc>)
   daa24:	681b      	ldr	r3, [r3, #0]
   daa26:	685b      	ldr	r3, [r3, #4]
   daa28:	9301      	str	r3, [sp, #4]
   daa2a:	bd08      	pop	{r3, pc}
   daa2c:	00030220 	.word	0x00030220

000daa30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   daa30:	b508      	push	{r3, lr}
   daa32:	4b02      	ldr	r3, [pc, #8]	; (daa3c <system_delay_ms+0xc>)
   daa34:	681b      	ldr	r3, [r3, #0]
   daa36:	695b      	ldr	r3, [r3, #20]
   daa38:	9301      	str	r3, [sp, #4]
   daa3a:	bd08      	pop	{r3, pc}
   daa3c:	00030220 	.word	0x00030220

000daa40 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   daa40:	b508      	push	{r3, lr}
   daa42:	4b02      	ldr	r3, [pc, #8]	; (daa4c <system_sleep+0xc>)
   daa44:	681b      	ldr	r3, [r3, #0]
   daa46:	699b      	ldr	r3, [r3, #24]
   daa48:	9301      	str	r3, [sp, #4]
   daa4a:	bd08      	pop	{r3, pc}
   daa4c:	00030220 	.word	0x00030220

000daa50 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   daa50:	b508      	push	{r3, lr}
   daa52:	4b02      	ldr	r3, [pc, #8]	; (daa5c <application_thread_current+0xc>)
   daa54:	681b      	ldr	r3, [r3, #0]
   daa56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   daa58:	9301      	str	r3, [sp, #4]
   daa5a:	bd08      	pop	{r3, pc}
   daa5c:	00030220 	.word	0x00030220

000daa60 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   daa60:	b508      	push	{r3, lr}
   daa62:	4b02      	ldr	r3, [pc, #8]	; (daa6c <application_thread_invoke+0xc>)
   daa64:	681b      	ldr	r3, [r3, #0]
   daa66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daa68:	9301      	str	r3, [sp, #4]
   daa6a:	bd08      	pop	{r3, pc}
   daa6c:	00030220 	.word	0x00030220

000daa70 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   daa70:	b508      	push	{r3, lr}
   daa72:	4b02      	ldr	r3, [pc, #8]	; (daa7c <system_thread_get_state+0xc>)
   daa74:	681b      	ldr	r3, [r3, #0]
   daa76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   daa78:	9301      	str	r3, [sp, #4]
   daa7a:	bd08      	pop	{r3, pc}
   daa7c:	00030220 	.word	0x00030220

000daa80 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   daa80:	b508      	push	{r3, lr}
   daa82:	4b02      	ldr	r3, [pc, #8]	; (daa8c <led_pattern_period+0xc>)
   daa84:	681b      	ldr	r3, [r3, #0]
   daa86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   daa88:	9301      	str	r3, [sp, #4]
   daa8a:	bd08      	pop	{r3, pc}
   daa8c:	00030220 	.word	0x00030220

000daa90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   daa90:	b508      	push	{r3, lr}
   daa92:	4b03      	ldr	r3, [pc, #12]	; (daaa0 <system_ctrl_set_app_request_handler+0x10>)
   daa94:	681b      	ldr	r3, [r3, #0]
   daa96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   daa9a:	9301      	str	r3, [sp, #4]
   daa9c:	bd08      	pop	{r3, pc}
   daa9e:	0000      	.short	0x0000
   daaa0:	00030220 	.word	0x00030220

000daaa4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   daaa4:	b508      	push	{r3, lr}
   daaa6:	4b03      	ldr	r3, [pc, #12]	; (daab4 <system_ctrl_set_result+0x10>)
   daaa8:	681b      	ldr	r3, [r3, #0]
   daaaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   daaae:	9301      	str	r3, [sp, #4]
   daab0:	bd08      	pop	{r3, pc}
   daab2:	0000      	.short	0x0000
   daab4:	00030220 	.word	0x00030220

000daab8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   daab8:	b508      	push	{r3, lr}
   daaba:	4b03      	ldr	r3, [pc, #12]	; (daac8 <system_sleep_pins+0x10>)
   daabc:	681b      	ldr	r3, [r3, #0]
   daabe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   daac2:	9301      	str	r3, [sp, #4]
   daac4:	bd08      	pop	{r3, pc}
   daac6:	0000      	.short	0x0000
   daac8:	00030220 	.word	0x00030220

000daacc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   daacc:	b508      	push	{r3, lr}
   daace:	4b02      	ldr	r3, [pc, #8]	; (daad8 <network_connect+0xc>)
   daad0:	681b      	ldr	r3, [r3, #0]
   daad2:	685b      	ldr	r3, [r3, #4]
   daad4:	9301      	str	r3, [sp, #4]
   daad6:	bd08      	pop	{r3, pc}
   daad8:	00030240 	.word	0x00030240

000daadc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   daadc:	b508      	push	{r3, lr}
   daade:	4b02      	ldr	r3, [pc, #8]	; (daae8 <network_connecting+0xc>)
   daae0:	681b      	ldr	r3, [r3, #0]
   daae2:	689b      	ldr	r3, [r3, #8]
   daae4:	9301      	str	r3, [sp, #4]
   daae6:	bd08      	pop	{r3, pc}
   daae8:	00030240 	.word	0x00030240

000daaec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   daaec:	b508      	push	{r3, lr}
   daaee:	4b02      	ldr	r3, [pc, #8]	; (daaf8 <network_disconnect+0xc>)
   daaf0:	681b      	ldr	r3, [r3, #0]
   daaf2:	68db      	ldr	r3, [r3, #12]
   daaf4:	9301      	str	r3, [sp, #4]
   daaf6:	bd08      	pop	{r3, pc}
   daaf8:	00030240 	.word	0x00030240

000daafc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   daafc:	b508      	push	{r3, lr}
   daafe:	4b02      	ldr	r3, [pc, #8]	; (dab08 <network_ready+0xc>)
   dab00:	681b      	ldr	r3, [r3, #0]
   dab02:	691b      	ldr	r3, [r3, #16]
   dab04:	9301      	str	r3, [sp, #4]
   dab06:	bd08      	pop	{r3, pc}
   dab08:	00030240 	.word	0x00030240

000dab0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dab0c:	b508      	push	{r3, lr}
   dab0e:	4b02      	ldr	r3, [pc, #8]	; (dab18 <network_on+0xc>)
   dab10:	681b      	ldr	r3, [r3, #0]
   dab12:	695b      	ldr	r3, [r3, #20]
   dab14:	9301      	str	r3, [sp, #4]
   dab16:	bd08      	pop	{r3, pc}
   dab18:	00030240 	.word	0x00030240

000dab1c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dab1c:	b508      	push	{r3, lr}
   dab1e:	4b02      	ldr	r3, [pc, #8]	; (dab28 <network_off+0xc>)
   dab20:	681b      	ldr	r3, [r3, #0]
   dab22:	699b      	ldr	r3, [r3, #24]
   dab24:	9301      	str	r3, [sp, #4]
   dab26:	bd08      	pop	{r3, pc}
   dab28:	00030240 	.word	0x00030240

000dab2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dab2c:	b508      	push	{r3, lr}
   dab2e:	4b02      	ldr	r3, [pc, #8]	; (dab38 <network_listen+0xc>)
   dab30:	681b      	ldr	r3, [r3, #0]
   dab32:	69db      	ldr	r3, [r3, #28]
   dab34:	9301      	str	r3, [sp, #4]
   dab36:	bd08      	pop	{r3, pc}
   dab38:	00030240 	.word	0x00030240

000dab3c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dab3c:	b508      	push	{r3, lr}
   dab3e:	4b02      	ldr	r3, [pc, #8]	; (dab48 <network_listening+0xc>)
   dab40:	681b      	ldr	r3, [r3, #0]
   dab42:	6a1b      	ldr	r3, [r3, #32]
   dab44:	9301      	str	r3, [sp, #4]
   dab46:	bd08      	pop	{r3, pc}
   dab48:	00030240 	.word	0x00030240

000dab4c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dab4c:	b508      	push	{r3, lr}
   dab4e:	4b02      	ldr	r3, [pc, #8]	; (dab58 <network_set_listen_timeout+0xc>)
   dab50:	681b      	ldr	r3, [r3, #0]
   dab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dab54:	9301      	str	r3, [sp, #4]
   dab56:	bd08      	pop	{r3, pc}
   dab58:	00030240 	.word	0x00030240

000dab5c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dab5c:	b508      	push	{r3, lr}
   dab5e:	4b02      	ldr	r3, [pc, #8]	; (dab68 <network_get_listen_timeout+0xc>)
   dab60:	681b      	ldr	r3, [r3, #0]
   dab62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dab64:	9301      	str	r3, [sp, #4]
   dab66:	bd08      	pop	{r3, pc}
   dab68:	00030240 	.word	0x00030240

000dab6c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dab6c:	b508      	push	{r3, lr}
   dab6e:	4b02      	ldr	r3, [pc, #8]	; (dab78 <spark_process+0xc>)
   dab70:	681b      	ldr	r3, [r3, #0]
   dab72:	689b      	ldr	r3, [r3, #8]
   dab74:	9301      	str	r3, [sp, #4]
   dab76:	bd08      	pop	{r3, pc}
   dab78:	00030244 	.word	0x00030244

000dab7c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dab7c:	b508      	push	{r3, lr}
   dab7e:	4b02      	ldr	r3, [pc, #8]	; (dab88 <spark_cloud_flag_connect+0xc>)
   dab80:	681b      	ldr	r3, [r3, #0]
   dab82:	68db      	ldr	r3, [r3, #12]
   dab84:	9301      	str	r3, [sp, #4]
   dab86:	bd08      	pop	{r3, pc}
   dab88:	00030244 	.word	0x00030244

000dab8c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dab8c:	b508      	push	{r3, lr}
   dab8e:	4b02      	ldr	r3, [pc, #8]	; (dab98 <spark_cloud_flag_connected+0xc>)
   dab90:	681b      	ldr	r3, [r3, #0]
   dab92:	695b      	ldr	r3, [r3, #20]
   dab94:	9301      	str	r3, [sp, #4]
   dab96:	bd08      	pop	{r3, pc}
   dab98:	00030244 	.word	0x00030244

000dab9c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dab9c:	b508      	push	{r3, lr}
   dab9e:	4b02      	ldr	r3, [pc, #8]	; (daba8 <spark_send_event+0xc>)
   daba0:	681b      	ldr	r3, [r3, #0]
   daba2:	6a1b      	ldr	r3, [r3, #32]
   daba4:	9301      	str	r3, [sp, #4]
   daba6:	bd08      	pop	{r3, pc}
   daba8:	00030244 	.word	0x00030244

000dabac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   dabac:	b508      	push	{r3, lr}
   dabae:	4b02      	ldr	r3, [pc, #8]	; (dabb8 <spark_subscribe+0xc>)
   dabb0:	681b      	ldr	r3, [r3, #0]
   dabb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dabb4:	9301      	str	r3, [sp, #4]
   dabb6:	bd08      	pop	{r3, pc}
   dabb8:	00030244 	.word	0x00030244

000dabbc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dabbc:	b508      	push	{r3, lr}
   dabbe:	4b02      	ldr	r3, [pc, #8]	; (dabc8 <spark_sync_time_pending+0xc>)
   dabc0:	681b      	ldr	r3, [r3, #0]
   dabc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dabc4:	9301      	str	r3, [sp, #4]
   dabc6:	bd08      	pop	{r3, pc}
   dabc8:	00030244 	.word	0x00030244

000dabcc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dabcc:	b508      	push	{r3, lr}
   dabce:	4b02      	ldr	r3, [pc, #8]	; (dabd8 <spark_set_random_seed_from_cloud_handler+0xc>)
   dabd0:	681b      	ldr	r3, [r3, #0]
   dabd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dabd4:	9301      	str	r3, [sp, #4]
   dabd6:	bd08      	pop	{r3, pc}
   dabd8:	00030244 	.word	0x00030244

000dabdc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dabdc:	b508      	push	{r3, lr}
   dabde:	4b02      	ldr	r3, [pc, #8]	; (dabe8 <malloc+0xc>)
   dabe0:	681b      	ldr	r3, [r3, #0]
   dabe2:	681b      	ldr	r3, [r3, #0]
   dabe4:	9301      	str	r3, [sp, #4]
   dabe6:	bd08      	pop	{r3, pc}
   dabe8:	0003021c 	.word	0x0003021c

000dabec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dabec:	b508      	push	{r3, lr}
   dabee:	4b02      	ldr	r3, [pc, #8]	; (dabf8 <free+0xc>)
   dabf0:	681b      	ldr	r3, [r3, #0]
   dabf2:	685b      	ldr	r3, [r3, #4]
   dabf4:	9301      	str	r3, [sp, #4]
   dabf6:	bd08      	pop	{r3, pc}
   dabf8:	0003021c 	.word	0x0003021c

000dabfc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dabfc:	b508      	push	{r3, lr}
   dabfe:	4b02      	ldr	r3, [pc, #8]	; (dac08 <realloc+0xc>)
   dac00:	681b      	ldr	r3, [r3, #0]
   dac02:	689b      	ldr	r3, [r3, #8]
   dac04:	9301      	str	r3, [sp, #4]
   dac06:	bd08      	pop	{r3, pc}
   dac08:	0003021c 	.word	0x0003021c

000dac0c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dac0c:	b508      	push	{r3, lr}
   dac0e:	4b02      	ldr	r3, [pc, #8]	; (dac18 <siprintf+0xc>)
   dac10:	681b      	ldr	r3, [r3, #0]
   dac12:	691b      	ldr	r3, [r3, #16]
   dac14:	9301      	str	r3, [sp, #4]
   dac16:	bd08      	pop	{r3, pc}
   dac18:	0003021c 	.word	0x0003021c

000dac1c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   dac1c:	b508      	push	{r3, lr}
   dac1e:	4b02      	ldr	r3, [pc, #8]	; (dac28 <siscanf+0xc>)
   dac20:	681b      	ldr	r3, [r3, #0]
   dac22:	699b      	ldr	r3, [r3, #24]
   dac24:	9301      	str	r3, [sp, #4]
   dac26:	bd08      	pop	{r3, pc}
   dac28:	0003021c 	.word	0x0003021c

000dac2c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dac2c:	b508      	push	{r3, lr}
   dac2e:	4b02      	ldr	r3, [pc, #8]	; (dac38 <snprintf+0xc>)
   dac30:	681b      	ldr	r3, [r3, #0]
   dac32:	69db      	ldr	r3, [r3, #28]
   dac34:	9301      	str	r3, [sp, #4]
   dac36:	bd08      	pop	{r3, pc}
   dac38:	0003021c 	.word	0x0003021c

000dac3c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   dac3c:	b508      	push	{r3, lr}
   dac3e:	4b02      	ldr	r3, [pc, #8]	; (dac48 <sniprintf+0xc>)
   dac40:	681b      	ldr	r3, [r3, #0]
   dac42:	6a1b      	ldr	r3, [r3, #32]
   dac44:	9301      	str	r3, [sp, #4]
   dac46:	bd08      	pop	{r3, pc}
   dac48:	0003021c 	.word	0x0003021c

000dac4c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dac4c:	b508      	push	{r3, lr}
   dac4e:	4b02      	ldr	r3, [pc, #8]	; (dac58 <vsnprintf+0xc>)
   dac50:	681b      	ldr	r3, [r3, #0]
   dac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dac54:	9301      	str	r3, [sp, #4]
   dac56:	bd08      	pop	{r3, pc}
   dac58:	0003021c 	.word	0x0003021c

000dac5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dac5c:	b508      	push	{r3, lr}
   dac5e:	4b02      	ldr	r3, [pc, #8]	; (dac68 <abort+0xc>)
   dac60:	681b      	ldr	r3, [r3, #0]
   dac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dac64:	9301      	str	r3, [sp, #4]
   dac66:	bd08      	pop	{r3, pc}
   dac68:	0003021c 	.word	0x0003021c

000dac6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dac6c:	b508      	push	{r3, lr}
   dac6e:	4b02      	ldr	r3, [pc, #8]	; (dac78 <_malloc_r+0xc>)
   dac70:	681b      	ldr	r3, [r3, #0]
   dac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dac74:	9301      	str	r3, [sp, #4]
   dac76:	bd08      	pop	{r3, pc}
   dac78:	0003021c 	.word	0x0003021c

000dac7c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dac7c:	b508      	push	{r3, lr}
   dac7e:	4b02      	ldr	r3, [pc, #8]	; (dac88 <__errno+0xc>)
   dac80:	681b      	ldr	r3, [r3, #0]
   dac82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dac84:	9301      	str	r3, [sp, #4]
   dac86:	bd08      	pop	{r3, pc}
   dac88:	0003021c 	.word	0x0003021c

000dac8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dac8c:	2200      	movs	r2, #0
   dac8e:	4611      	mov	r1, r2
   dac90:	6840      	ldr	r0, [r0, #4]
   dac92:	f7ff bf53 	b.w	dab3c <network_listening>

000dac96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dac96:	2200      	movs	r2, #0
   dac98:	4611      	mov	r1, r2
   dac9a:	6840      	ldr	r0, [r0, #4]
   dac9c:	f7ff bf5e 	b.w	dab5c <network_get_listen_timeout>

000daca0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   daca0:	2200      	movs	r2, #0
   daca2:	6840      	ldr	r0, [r0, #4]
   daca4:	f7ff bf52 	b.w	dab4c <network_set_listen_timeout>

000daca8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   daca8:	2200      	movs	r2, #0
   dacaa:	f081 0101 	eor.w	r1, r1, #1
   dacae:	6840      	ldr	r0, [r0, #4]
   dacb0:	f7ff bf3c 	b.w	dab2c <network_listen>

000dacb4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   dacb4:	2300      	movs	r3, #0
   dacb6:	461a      	mov	r2, r3
   dacb8:	4619      	mov	r1, r3
   dacba:	6840      	ldr	r0, [r0, #4]
   dacbc:	f7ff bf2e 	b.w	dab1c <network_off>

000dacc0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dacc0:	2300      	movs	r3, #0
   dacc2:	461a      	mov	r2, r3
   dacc4:	4619      	mov	r1, r3
   dacc6:	6840      	ldr	r0, [r0, #4]
   dacc8:	f7ff bf20 	b.w	dab0c <network_on>

000daccc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   daccc:	2200      	movs	r2, #0
   dacce:	4611      	mov	r1, r2
   dacd0:	6840      	ldr	r0, [r0, #4]
   dacd2:	f7ff bf13 	b.w	daafc <network_ready>

000dacd6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dacd6:	2200      	movs	r2, #0
   dacd8:	4611      	mov	r1, r2
   dacda:	6840      	ldr	r0, [r0, #4]
   dacdc:	f7ff befe 	b.w	daadc <network_connecting>

000dace0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dace0:	2200      	movs	r2, #0
   dace2:	2102      	movs	r1, #2
   dace4:	6840      	ldr	r0, [r0, #4]
   dace6:	f7ff bf01 	b.w	daaec <network_disconnect>

000dacea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dacea:	2300      	movs	r3, #0
   dacec:	461a      	mov	r2, r3
   dacee:	6840      	ldr	r0, [r0, #4]
   dacf0:	f7ff beec 	b.w	daacc <network_connect>

000dacf4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dacf4:	4b02      	ldr	r3, [pc, #8]	; (dad00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dacf6:	2203      	movs	r2, #3
   dacf8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dacfa:	4a02      	ldr	r2, [pc, #8]	; (dad04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dacfc:	601a      	str	r2, [r3, #0]
   dacfe:	4770      	bx	lr
   dad00:	2003e270 	.word	0x2003e270
   dad04:	000e7f74 	.word	0x000e7f74

000dad08 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dad08:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   dad0a:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dad0c:	6892      	ldr	r2, [r2, #8]
   dad0e:	4601      	mov	r1, r0
   dad10:	4618      	mov	r0, r3
   dad12:	4710      	bx	r2

000dad14 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   dad14:	b570      	push	{r4, r5, r6, lr}
   dad16:	4c0e      	ldr	r4, [pc, #56]	; (dad50 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   dad18:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   dad1a:	241c      	movs	r4, #28
   dad1c:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dad1e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dad22:	f89d 6010 	ldrb.w	r6, [sp, #16]
   dad26:	f004 0403 	and.w	r4, r4, #3
   dad2a:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dad2e:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dad30:	b2e4      	uxtb	r4, r4
   dad32:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   dad34:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   dad36:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   dad38:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dad3a:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dad3c:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dad3e:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   dad40:	bf08      	it	eq
   dad42:	4b04      	ldreq	r3, [pc, #16]	; (dad54 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   dad44:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   dad46:	bf06      	itte	eq
   dad48:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   dad4a:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   dad4c:	8303      	strhne	r3, [r0, #24]
    }
}
   dad4e:	bd70      	pop	{r4, r5, r6, pc}
   dad50:	000e6d64 	.word	0x000e6d64
   dad54:	000dad09 	.word	0x000dad09

000dad58 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   dad58:	4770      	bx	lr

000dad5a <_ZN8SPIClassD0Ev>:
   dad5a:	b510      	push	{r4, lr}
   dad5c:	210c      	movs	r1, #12
   dad5e:	4604      	mov	r4, r0
   dad60:	f002 faa4 	bl	dd2ac <_ZdlPvj>
   dad64:	4620      	mov	r0, r4
   dad66:	bd10      	pop	{r4, pc}

000dad68 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   dad68:	2100      	movs	r1, #0
   dad6a:	f7ff bc4f 	b.w	da60c <HAL_SPI_Acquire>

000dad6e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   dad6e:	2100      	movs	r1, #0
   dad70:	f7ff bc54 	b.w	da61c <HAL_SPI_Release>

000dad74 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   dad74:	b510      	push	{r4, lr}
   dad76:	4b05      	ldr	r3, [pc, #20]	; (dad8c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   dad78:	6003      	str	r3, [r0, #0]
   dad7a:	4604      	mov	r4, r0
{
    _spi = spi;
   dad7c:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   dad7e:	4608      	mov	r0, r1
   dad80:	f7ff fc34 	bl	da5ec <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dad84:	2300      	movs	r3, #0
   dad86:	60a3      	str	r3, [r4, #8]
}
   dad88:	4620      	mov	r0, r4
   dad8a:	bd10      	pop	{r4, pc}
   dad8c:	000e7fa8 	.word	0x000e7fa8

000dad90 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dad90:	b538      	push	{r3, r4, r5, lr}
   dad92:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   dad94:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dad96:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   dad98:	f7ff ffe6 	bl	dad68 <_ZN8SPIClass4lockEv.isra.0>
   dad9c:	b940      	cbnz	r0, dadb0 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   dad9e:	4629      	mov	r1, r5
   dada0:	7920      	ldrb	r0, [r4, #4]
   dada2:	f7ff fc1b 	bl	da5dc <HAL_SPI_Send_Receive_Data>
   dada6:	4605      	mov	r5, r0
        unlock();
   dada8:	7920      	ldrb	r0, [r4, #4]
   dadaa:	f7ff ffe0 	bl	dad6e <_ZN8SPIClass6unlockEv.isra.1>
   dadae:	e000      	b.n	dadb2 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   dadb0:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   dadb2:	b2e8      	uxtb	r0, r5
   dadb4:	bd38      	pop	{r3, r4, r5, pc}

000dadb6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   dadb6:	7900      	ldrb	r0, [r0, #4]
   dadb8:	f7ff bc20 	b.w	da5fc <HAL_SPI_Is_Enabled>

000dadbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dadbc:	b510      	push	{r4, lr}
   dadbe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dadc0:	6800      	ldr	r0, [r0, #0]
   dadc2:	b118      	cbz	r0, dadcc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   dadc4:	f7ff ff12 	bl	dabec <free>
            wakeupSource_ = nullptr;
   dadc8:	2300      	movs	r3, #0
   dadca:	6023      	str	r3, [r4, #0]
   dadcc:	bd10      	pop	{r4, pc}

000dadce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dadce:	b510      	push	{r4, lr}
   dadd0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dadd2:	f7ff fff3 	bl	dadbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dadd6:	4620      	mov	r0, r4
   dadd8:	bd10      	pop	{r4, pc}

000dadda <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dadda:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   daddc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dade0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dade2:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dade4:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   dade6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dadea:	f8c0 2006 	str.w	r2, [r0, #6]
   dadee:	889b      	ldrh	r3, [r3, #4]
   dadf0:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dadf2:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   dadf4:	f7ff ffe2 	bl	dadbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   dadf8:	682b      	ldr	r3, [r5, #0]
   dadfa:	b113      	cbz	r3, dae02 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dadfc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dadfe:	2300      	movs	r3, #0
   dae00:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   dae02:	4620      	mov	r0, r4
   dae04:	bd38      	pop	{r3, r4, r5, pc}

000dae06 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   dae06:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   dae0a:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   dae0c:	b90b      	cbnz	r3, dae12 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   dae0e:	680a      	ldr	r2, [r1, #0]
   dae10:	b19a      	cbz	r2, dae3a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   dae12:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   dae14:	b15c      	cbz	r4, dae2e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   dae16:	88a2      	ldrh	r2, [r4, #4]
   dae18:	2a01      	cmp	r2, #1
   dae1a:	d003      	beq.n	dae24 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   dae1c:	2a04      	cmp	r2, #4
   dae1e:	d106      	bne.n	dae2e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   dae20:	2202      	movs	r2, #2
   dae22:	e005      	b.n	dae30 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   dae24:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   dae26:	814c      	strh	r4, [r1, #10]
   dae28:	718a      	strb	r2, [r1, #6]
   dae2a:	810b      	strh	r3, [r1, #8]
                    break;
   dae2c:	e005      	b.n	dae3a <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   dae2e:	2204      	movs	r2, #4
   dae30:	810b      	strh	r3, [r1, #8]
   dae32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dae36:	718a      	strb	r2, [r1, #6]
   dae38:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   dae3a:	f851 3f06 	ldr.w	r3, [r1, #6]!
   dae3e:	6003      	str	r3, [r0, #0]
   dae40:	888b      	ldrh	r3, [r1, #4]
   dae42:	8083      	strh	r3, [r0, #4]
    }
   dae44:	bd10      	pop	{r4, pc}

000dae46 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   dae46:	4601      	mov	r1, r0
   dae48:	2200      	movs	r2, #0
   dae4a:	208c      	movs	r0, #140	; 0x8c
   dae4c:	f7ff bc1e 	b.w	da68c <HAL_Core_System_Reset_Ex>

000dae50 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   dae50:	2000      	movs	r0, #0
   dae52:	f7ff bff8 	b.w	dae46 <_ZN11SystemClass5resetEm>
	...

000dae58 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   dae58:	b530      	push	{r4, r5, lr}
   dae5a:	4604      	mov	r4, r0
   dae5c:	b085      	sub	sp, #20
   dae5e:	4608      	mov	r0, r1
   dae60:	4611      	mov	r1, r2
   dae62:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   dae64:	2300      	movs	r3, #0
   dae66:	f7ff fdeb 	bl	daa40 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   dae6a:	4d0d      	ldr	r5, [pc, #52]	; (daea0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   dae6c:	f8ad 000c 	strh.w	r0, [sp, #12]
   dae70:	2300      	movs	r3, #0
   dae72:	a901      	add	r1, sp, #4
   dae74:	9301      	str	r3, [sp, #4]
   dae76:	f8ad 3008 	strh.w	r3, [sp, #8]
   dae7a:	f88d 300a 	strb.w	r3, [sp, #10]
   dae7e:	4628      	mov	r0, r5
   dae80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dae84:	f8ad 300e 	strh.w	r3, [sp, #14]
   dae88:	f7ff ffa7 	bl	dadda <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dae8c:	a801      	add	r0, sp, #4
   dae8e:	f7ff ff95 	bl	dadbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   dae92:	4620      	mov	r0, r4
   dae94:	4629      	mov	r1, r5
   dae96:	f7ff ffb6 	bl	dae06 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   dae9a:	4620      	mov	r0, r4
   dae9c:	b005      	add	sp, #20
   dae9e:	bd30      	pop	{r4, r5, pc}
   daea0:	2003e278 	.word	0x2003e278

000daea4 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   daea4:	b510      	push	{r4, lr}
   daea6:	2400      	movs	r4, #0
   daea8:	7004      	strb	r4, [r0, #0]
   daeaa:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   daeac:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   daeae:	f64f 74ff 	movw	r4, #65535	; 0xffff
   daeb2:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   daeb4:	dd07      	ble.n	daec6 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   daeb6:	3901      	subs	r1, #1
   daeb8:	4299      	cmp	r1, r3
   daeba:	d209      	bcs.n	daed0 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   daebc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   daec0:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   daec2:	2301      	movs	r3, #1
   daec4:	e001      	b.n	daeca <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   daec6:	d102      	bne.n	daece <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   daec8:	2302      	movs	r3, #2
   daeca:	7003      	strb	r3, [r0, #0]
   daecc:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   daece:	8041      	strh	r1, [r0, #2]
    }
}
   daed0:	bd10      	pop	{r4, pc}
	...

000daed4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   daed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   daed6:	b08b      	sub	sp, #44	; 0x2c
   daed8:	4617      	mov	r7, r2
   daeda:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   daedc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   daede:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   daee0:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   daee2:	2400      	movs	r4, #0
   daee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   daee6:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   daee8:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   daeea:	9300      	str	r3, [sp, #0]
   daeec:	4639      	mov	r1, r7
   daeee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   daef0:	4630      	mov	r0, r6
   daef2:	f7ff fde1 	bl	daab8 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   daef6:	463b      	mov	r3, r7
   daef8:	4632      	mov	r2, r6
   daefa:	4601      	mov	r1, r0
   daefc:	a805      	add	r0, sp, #20
   daefe:	f7ff ffd1 	bl	daea4 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   daf02:	9407      	str	r4, [sp, #28]
   daf04:	f8ad 4020 	strh.w	r4, [sp, #32]
   daf08:	4c0d      	ldr	r4, [pc, #52]	; (daf40 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   daf0a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   daf0e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   daf12:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   daf16:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   daf1a:	4620      	mov	r0, r4
   daf1c:	a907      	add	r1, sp, #28
   daf1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   daf22:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   daf26:	f7ff ff58 	bl	dadda <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   daf2a:	a807      	add	r0, sp, #28
   daf2c:	f7ff ff46 	bl	dadbc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   daf30:	4628      	mov	r0, r5
   daf32:	4621      	mov	r1, r4
   daf34:	f7ff ff67 	bl	dae06 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   daf38:	4628      	mov	r0, r5
   daf3a:	b00b      	add	sp, #44	; 0x2c
   daf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daf3e:	bf00      	nop
   daf40:	2003e278 	.word	0x2003e278

000daf44 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   daf44:	7800      	ldrb	r0, [r0, #0]
   daf46:	4770      	bx	lr

000daf48 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   daf48:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   daf4a:	4c09      	ldr	r4, [pc, #36]	; (daf70 <_GLOBAL__sub_I_System+0x28>)
   daf4c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   daf4e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   daf52:	6020      	str	r0, [r4, #0]
   daf54:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   daf56:	71a0      	strb	r0, [r4, #6]
   daf58:	8120      	strh	r0, [r4, #8]
   daf5a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   daf5c:	f7ff fd60 	bl	daa20 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   daf60:	4620      	mov	r0, r4
   daf62:	4a04      	ldr	r2, [pc, #16]	; (daf74 <_GLOBAL__sub_I_System+0x2c>)
   daf64:	4904      	ldr	r1, [pc, #16]	; (daf78 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   daf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   daf6a:	f002 b991 	b.w	dd290 <__aeabi_atexit>
   daf6e:	bf00      	nop
   daf70:	2003e278 	.word	0x2003e278
   daf74:	2003d6b0 	.word	0x2003d6b0
   daf78:	000dadcf 	.word	0x000dadcf

000daf7c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   daf7c:	b510      	push	{r4, lr}
   daf7e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   daf80:	f009 fc0c 	bl	e479c <strlen>
   daf84:	3801      	subs	r0, #1
   daf86:	1823      	adds	r3, r4, r0
   daf88:	4620      	mov	r0, r4
	while(i<j){
   daf8a:	4298      	cmp	r0, r3
   daf8c:	d206      	bcs.n	daf9c <_Z11str_reversePc+0x20>
		c = *i;
   daf8e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   daf90:	7819      	ldrb	r1, [r3, #0]
   daf92:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   daf96:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   daf9a:	e7f6      	b.n	daf8a <_Z11str_reversePc+0xe>
   daf9c:	bd10      	pop	{r4, pc}

000daf9e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   daf9e:	b570      	push	{r4, r5, r6, lr}
   dafa0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   dafa2:	1e91      	subs	r1, r2, #2
   dafa4:	2922      	cmp	r1, #34	; 0x22
   dafa6:	d820      	bhi.n	dafea <ultoa+0x4c>
   dafa8:	4625      	mov	r5, r4
   dafaa:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dafac:	b910      	cbnz	r0, dafb4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dafae:	4423      	add	r3, r4
            *ptr++ = '0';
   dafb0:	2230      	movs	r2, #48	; 0x30
   dafb2:	e00e      	b.n	dafd2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   dafb4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   dafb8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   dafbc:	b2c1      	uxtb	r1, r0
   dafbe:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   dafc2:	2809      	cmp	r0, #9
                *ptr += '0';
   dafc4:	bf94      	ite	ls
   dafc6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   dafc8:	3157      	addhi	r1, #87	; 0x57
   dafca:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   dafce:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dafd0:	e7eb      	b.n	dafaa <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dafd2:	4299      	cmp	r1, r3
   dafd4:	d202      	bcs.n	dafdc <ultoa+0x3e>
            *ptr++ = '0';
   dafd6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dafda:	e7fa      	b.n	dafd2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   dafdc:	2300      	movs	r3, #0
	str_reverse(buffer);
   dafde:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   dafe0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   dafe2:	f7ff ffcb 	bl	daf7c <_Z11str_reversePc>
	return buffer;
   dafe6:	4620      	mov	r0, r4
   dafe8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   dafea:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   dafec:	bd70      	pop	{r4, r5, r6, pc}

000dafee <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dafee:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   daff0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   daff2:	460c      	mov	r4, r1
   daff4:	4615      	mov	r5, r2
	if(a<0){
   daff6:	da0b      	bge.n	db010 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   daff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   daffc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   db000:	bf14      	ite	ne
   db002:	4258      	negne	r0, r3
   db004:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   db006:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   db008:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   db00a:	462a      	mov	r2, r5
   db00c:	4419      	add	r1, r3
   db00e:	e000      	b.n	db012 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   db010:	2301      	movs	r3, #1
   db012:	f7ff ffc4 	bl	daf9e <ultoa>
	}
	return buffer;
}
   db016:	4620      	mov	r0, r4
   db018:	bd38      	pop	{r3, r4, r5, pc}

000db01a <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   db01a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   db01c:	2301      	movs	r3, #1
   db01e:	f7ff ffbe 	bl	daf9e <ultoa>
}
   db022:	bd08      	pop	{r3, pc}

000db024 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   db024:	b510      	push	{r4, lr}
   db026:	4604      	mov	r4, r0
{
	free(buffer);
   db028:	6800      	ldr	r0, [r0, #0]
   db02a:	f7ff fddf 	bl	dabec <free>
}
   db02e:	4620      	mov	r0, r4
   db030:	bd10      	pop	{r4, pc}

000db032 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   db032:	b510      	push	{r4, lr}
   db034:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   db036:	6800      	ldr	r0, [r0, #0]
   db038:	b108      	cbz	r0, db03e <_ZN6String10invalidateEv+0xc>
   db03a:	f7ff fdd7 	bl	dabec <free>
	buffer = NULL;
   db03e:	2300      	movs	r3, #0
   db040:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   db042:	60a3      	str	r3, [r4, #8]
   db044:	6063      	str	r3, [r4, #4]
   db046:	bd10      	pop	{r4, pc}

000db048 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   db048:	b538      	push	{r3, r4, r5, lr}
   db04a:	4604      	mov	r4, r0
   db04c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   db04e:	6800      	ldr	r0, [r0, #0]
   db050:	3101      	adds	r1, #1
   db052:	f7ff fdd3 	bl	dabfc <realloc>
	if (newbuffer) {
   db056:	b110      	cbz	r0, db05e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   db058:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   db05c:	2001      	movs	r0, #1
	}
	return 0;
}
   db05e:	bd38      	pop	{r3, r4, r5, pc}

000db060 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   db060:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   db062:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   db064:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   db066:	b113      	cbz	r3, db06e <_ZN6String7reserveEj+0xe>
   db068:	6843      	ldr	r3, [r0, #4]
   db06a:	428b      	cmp	r3, r1
   db06c:	d207      	bcs.n	db07e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   db06e:	4620      	mov	r0, r4
   db070:	f7ff ffea 	bl	db048 <_ZN6String12changeBufferEj>
   db074:	b120      	cbz	r0, db080 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   db076:	68a3      	ldr	r3, [r4, #8]
   db078:	b90b      	cbnz	r3, db07e <_ZN6String7reserveEj+0x1e>
   db07a:	6822      	ldr	r2, [r4, #0]
   db07c:	7013      	strb	r3, [r2, #0]
   db07e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   db080:	bd10      	pop	{r4, pc}

000db082 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db082:	b570      	push	{r4, r5, r6, lr}
   db084:	460e      	mov	r6, r1
	if (!reserve(length)) {
   db086:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db088:	4604      	mov	r4, r0
   db08a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   db08c:	f7ff ffe8 	bl	db060 <_ZN6String7reserveEj>
   db090:	b918      	cbnz	r0, db09a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   db092:	4620      	mov	r0, r4
   db094:	f7ff ffcd 	bl	db032 <_ZN6String10invalidateEv>
		return *this;
   db098:	e009      	b.n	db0ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   db09a:	462a      	mov	r2, r5
   db09c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   db09e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   db0a0:	6820      	ldr	r0, [r4, #0]
   db0a2:	f008 fbaf 	bl	e3804 <memcpy>
	buffer[len] = 0;
   db0a6:	6822      	ldr	r2, [r4, #0]
   db0a8:	68a3      	ldr	r3, [r4, #8]
   db0aa:	2100      	movs	r1, #0
   db0ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   db0ae:	4620      	mov	r0, r4
   db0b0:	bd70      	pop	{r4, r5, r6, pc}

000db0b2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   db0b2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db0b4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   db0b6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db0b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db0ba:	6043      	str	r3, [r0, #4]
	len = 0;
   db0bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   db0be:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   db0c0:	460d      	mov	r5, r1
   db0c2:	b139      	cbz	r1, db0d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   db0c4:	4608      	mov	r0, r1
   db0c6:	f009 fb69 	bl	e479c <strlen>
   db0ca:	4629      	mov	r1, r5
   db0cc:	4602      	mov	r2, r0
   db0ce:	4620      	mov	r0, r4
   db0d0:	f7ff ffd7 	bl	db082 <_ZN6String4copyEPKcj>
}
   db0d4:	4620      	mov	r0, r4
   db0d6:	bd38      	pop	{r3, r4, r5, pc}

000db0d8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   db0d8:	b538      	push	{r3, r4, r5, lr}
   db0da:	4605      	mov	r5, r0
	if (buffer) {
   db0dc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   db0de:	460c      	mov	r4, r1
	if (buffer) {
   db0e0:	b160      	cbz	r0, db0fc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   db0e2:	686a      	ldr	r2, [r5, #4]
   db0e4:	688b      	ldr	r3, [r1, #8]
   db0e6:	429a      	cmp	r2, r3
   db0e8:	d306      	bcc.n	db0f8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   db0ea:	6809      	ldr	r1, [r1, #0]
   db0ec:	f008 fe1e 	bl	e3d2c <strcpy>
			len = rhs.len;
   db0f0:	68a3      	ldr	r3, [r4, #8]
   db0f2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   db0f4:	2300      	movs	r3, #0
   db0f6:	e00a      	b.n	db10e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   db0f8:	f7ff fd78 	bl	dabec <free>
		}
	}
	buffer = rhs.buffer;
   db0fc:	6823      	ldr	r3, [r4, #0]
   db0fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   db100:	6863      	ldr	r3, [r4, #4]
   db102:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   db104:	68a3      	ldr	r3, [r4, #8]
   db106:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   db108:	2300      	movs	r3, #0
   db10a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   db10c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   db10e:	60a3      	str	r3, [r4, #8]
   db110:	bd38      	pop	{r3, r4, r5, pc}

000db112 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db112:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   db114:	b510      	push	{r4, lr}
   db116:	460b      	mov	r3, r1
   db118:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db11a:	d007      	beq.n	db12c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db11c:	6809      	ldr	r1, [r1, #0]
   db11e:	b119      	cbz	r1, db128 <_ZN6StringaSERKS_+0x16>
   db120:	689a      	ldr	r2, [r3, #8]
   db122:	f7ff ffae 	bl	db082 <_ZN6String4copyEPKcj>
   db126:	e001      	b.n	db12c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   db128:	f7ff ff83 	bl	db032 <_ZN6String10invalidateEv>

	return *this;
}
   db12c:	4620      	mov	r0, r4
   db12e:	bd10      	pop	{r4, pc}

000db130 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db130:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db132:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   db134:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db136:	6003      	str	r3, [r0, #0]
	capacity = 0;
   db138:	6043      	str	r3, [r0, #4]
	len = 0;
   db13a:	6083      	str	r3, [r0, #8]
	flags = 0;
   db13c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   db13e:	f7ff ffe8 	bl	db112 <_ZN6StringaSERKS_>
}
   db142:	4620      	mov	r0, r4
   db144:	bd10      	pop	{r4, pc}

000db146 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   db146:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   db148:	b510      	push	{r4, lr}
   db14a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   db14c:	d001      	beq.n	db152 <_ZN6StringaSEOS_+0xc>
   db14e:	f7ff ffc3 	bl	db0d8 <_ZN6String4moveERS_>
	return *this;
}
   db152:	4620      	mov	r0, r4
   db154:	bd10      	pop	{r4, pc}

000db156 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db156:	b538      	push	{r3, r4, r5, lr}
   db158:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   db15a:	460c      	mov	r4, r1
   db15c:	b141      	cbz	r1, db170 <_ZN6StringaSEPKc+0x1a>
   db15e:	4608      	mov	r0, r1
   db160:	f009 fb1c 	bl	e479c <strlen>
   db164:	4621      	mov	r1, r4
   db166:	4602      	mov	r2, r0
   db168:	4628      	mov	r0, r5
   db16a:	f7ff ff8a 	bl	db082 <_ZN6String4copyEPKcj>
   db16e:	e001      	b.n	db174 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   db170:	f7ff ff5f 	bl	db032 <_ZN6String10invalidateEv>

	return *this;
}
   db174:	4628      	mov	r0, r5
   db176:	bd38      	pop	{r3, r4, r5, pc}

000db178 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   db178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   db17a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db17c:	2300      	movs	r3, #0
   db17e:	6023      	str	r3, [r4, #0]
	capacity = 0;
   db180:	6063      	str	r3, [r4, #4]
	len = 0;
   db182:	60a3      	str	r3, [r4, #8]
	flags = 0;
   db184:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   db186:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   db188:	a901      	add	r1, sp, #4
   db18a:	f7ff ff46 	bl	db01a <utoa>
	*this = buf;
   db18e:	a901      	add	r1, sp, #4
   db190:	4620      	mov	r0, r4
   db192:	f7ff ffe0 	bl	db156 <_ZN6StringaSEPKc>
}
   db196:	4620      	mov	r0, r4
   db198:	b004      	add	sp, #16
   db19a:	bd10      	pop	{r4, pc}

000db19c <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   db19c:	b510      	push	{r4, lr}
   db19e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db1a0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   db1a2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   db1a4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   db1a6:	6063      	str	r3, [r4, #4]
	len = 0;
   db1a8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   db1aa:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   db1ac:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   db1ae:	a901      	add	r1, sp, #4
   db1b0:	f7ff ff1d 	bl	dafee <itoa>
	*this = buf;
   db1b4:	a901      	add	r1, sp, #4
   db1b6:	4620      	mov	r0, r4
   db1b8:	f7ff ffcd 	bl	db156 <_ZN6StringaSEPKc>
}
   db1bc:	4620      	mov	r0, r4
   db1be:	b00a      	add	sp, #40	; 0x28
   db1c0:	bd10      	pop	{r4, pc}

000db1c2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   db1c2:	b570      	push	{r4, r5, r6, lr}
   db1c4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   db1c6:	460e      	mov	r6, r1
   db1c8:	b909      	cbnz	r1, db1ce <_ZN6String6concatEPKcj+0xc>
   db1ca:	2000      	movs	r0, #0
   db1cc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   db1ce:	b16a      	cbz	r2, db1ec <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   db1d0:	6883      	ldr	r3, [r0, #8]
   db1d2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   db1d4:	4629      	mov	r1, r5
   db1d6:	f7ff ff43 	bl	db060 <_ZN6String7reserveEj>
   db1da:	2800      	cmp	r0, #0
   db1dc:	d0f5      	beq.n	db1ca <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   db1de:	6820      	ldr	r0, [r4, #0]
   db1e0:	68a3      	ldr	r3, [r4, #8]
   db1e2:	4631      	mov	r1, r6
   db1e4:	4418      	add	r0, r3
   db1e6:	f008 fda1 	bl	e3d2c <strcpy>
	len = newlen;
   db1ea:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   db1ec:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   db1ee:	bd70      	pop	{r4, r5, r6, pc}

000db1f0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db1f0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db1f2:	688a      	ldr	r2, [r1, #8]
   db1f4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   db1f6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   db1f8:	f7ff ffe3 	bl	db1c2 <_ZN6String6concatEPKcj>
   db1fc:	b910      	cbnz	r0, db204 <_ZplRK15StringSumHelperRK6String+0x14>
   db1fe:	4620      	mov	r0, r4
   db200:	f7ff ff17 	bl	db032 <_ZN6String10invalidateEv>
	return a;
}
   db204:	4620      	mov	r0, r4
   db206:	bd10      	pop	{r4, pc}

000db208 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   db208:	b538      	push	{r3, r4, r5, lr}
   db20a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   db20c:	460d      	mov	r5, r1
   db20e:	b141      	cbz	r1, db222 <_ZplRK15StringSumHelperPKc+0x1a>
   db210:	4608      	mov	r0, r1
   db212:	f009 fac3 	bl	e479c <strlen>
   db216:	4629      	mov	r1, r5
   db218:	4602      	mov	r2, r0
   db21a:	4620      	mov	r0, r4
   db21c:	f7ff ffd1 	bl	db1c2 <_ZN6String6concatEPKcj>
   db220:	b910      	cbnz	r0, db228 <_ZplRK15StringSumHelperPKc+0x20>
   db222:	4620      	mov	r0, r4
   db224:	f7ff ff05 	bl	db032 <_ZN6String10invalidateEv>
	return a;
}
   db228:	4620      	mov	r0, r4
   db22a:	bd38      	pop	{r3, r4, r5, pc}

000db22c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db22c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db22e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db230:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db232:	b912      	cbnz	r2, db23a <_ZNK6String6equalsEPKc+0xe>
   db234:	b919      	cbnz	r1, db23e <_ZNK6String6equalsEPKc+0x12>
   db236:	2001      	movs	r0, #1
   db238:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   db23a:	b911      	cbnz	r1, db242 <_ZNK6String6equalsEPKc+0x16>
   db23c:	6803      	ldr	r3, [r0, #0]
   db23e:	7818      	ldrb	r0, [r3, #0]
   db240:	e002      	b.n	db248 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   db242:	6800      	ldr	r0, [r0, #0]
   db244:	f008 fd68 	bl	e3d18 <strcmp>
   db248:	fab0 f080 	clz	r0, r0
   db24c:	0940      	lsrs	r0, r0, #5
}
   db24e:	bd08      	pop	{r3, pc}

000db250 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   db252:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db254:	460f      	mov	r7, r1
   db256:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db258:	490c      	ldr	r1, [pc, #48]	; (db28c <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   db25a:	bf88      	it	hi
   db25c:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db25e:	4614      	mov	r4, r2
   db260:	4606      	mov	r6, r0
	if (left > right) {
   db262:	bf84      	itt	hi
   db264:	462c      	movhi	r4, r5
   db266:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db268:	f7ff ff23 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   db26c:	68ba      	ldr	r2, [r7, #8]
   db26e:	4294      	cmp	r4, r2
   db270:	d80a      	bhi.n	db288 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   db272:	6839      	ldr	r1, [r7, #0]
   db274:	4295      	cmp	r5, r2
   db276:	bf94      	ite	ls
   db278:	ebc4 0205 	rsbls	r2, r4, r5
   db27c:	ebc4 0202 	rsbhi	r2, r4, r2
   db280:	4421      	add	r1, r4
   db282:	4630      	mov	r0, r6
   db284:	f7ff fefd 	bl	db082 <_ZN6String4copyEPKcj>
	return out;
}
   db288:	4630      	mov	r0, r6
   db28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db28c:	000e6ff6 	.word	0x000e6ff6

000db290 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   db290:	b510      	push	{r4, lr}
   db292:	4604      	mov	r4, r0
	return substring(left, len);
   db294:	688b      	ldr	r3, [r1, #8]
   db296:	f7ff ffdb 	bl	db250 <_ZNK6String9substringEjj>
}
   db29a:	4620      	mov	r0, r4
   db29c:	bd10      	pop	{r4, pc}

000db29e <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db29e:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   db2a0:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db2a2:	4605      	mov	r5, r0
	if (buffer) {
   db2a4:	b134      	cbz	r4, db2b4 <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   db2a6:	7820      	ldrb	r0, [r4, #0]
   db2a8:	b120      	cbz	r0, db2b4 <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   db2aa:	f00a f9f5 	bl	e5698 <tolower>
   db2ae:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   db2b2:	e7f8      	b.n	db2a6 <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   db2b4:	4628      	mov	r0, r5
   db2b6:	bd38      	pop	{r3, r4, r5, pc}

000db2b8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   db2b8:	6800      	ldr	r0, [r0, #0]
   db2ba:	b108      	cbz	r0, db2c0 <_ZNK6String5toIntEv+0x8>
   db2bc:	f008 b993 	b.w	e35e6 <atol>
	return 0;
}
   db2c0:	4770      	bx	lr
	...

000db2c4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db2c4:	b40e      	push	{r1, r2, r3}
   db2c6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   db2c8:	ac09      	add	r4, sp, #36	; 0x24
   db2ca:	4605      	mov	r5, r0
   db2cc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   db2d0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db2d2:	4623      	mov	r3, r4
   db2d4:	463a      	mov	r2, r7
   db2d6:	2105      	movs	r1, #5
   db2d8:	a802      	add	r0, sp, #8
   db2da:	f7ff fcb7 	bl	dac4c <vsnprintf>
    va_end(marker);

    String result;
   db2de:	490c      	ldr	r1, [pc, #48]	; (db310 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db2e0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   db2e2:	4628      	mov	r0, r5
   db2e4:	f7ff fee5 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   db2e8:	4631      	mov	r1, r6
   db2ea:	4628      	mov	r0, r5
   db2ec:	f7ff feb8 	bl	db060 <_ZN6String7reserveEj>
    if (result.buffer) {
   db2f0:	6828      	ldr	r0, [r5, #0]
   db2f2:	b130      	cbz	r0, db302 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db2f4:	4623      	mov	r3, r4
   db2f6:	463a      	mov	r2, r7
   db2f8:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   db2fa:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db2fc:	f7ff fca6 	bl	dac4c <vsnprintf>
        va_end(marker);
        result.len = n;
   db300:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   db302:	4628      	mov	r0, r5
   db304:	b004      	add	sp, #16
   db306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db30a:	b003      	add	sp, #12
   db30c:	4770      	bx	lr
   db30e:	bf00      	nop
   db310:	000e6ff6 	.word	0x000e6ff6

000db314 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   db314:	b510      	push	{r4, lr}
   db316:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db318:	6800      	ldr	r0, [r0, #0]
   db31a:	b108      	cbz	r0, db320 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   db31c:	f7ff f9e6 	bl	da6ec <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   db320:	4620      	mov	r0, r4
   db322:	bd10      	pop	{r4, pc}

000db324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   db324:	680b      	ldr	r3, [r1, #0]
   db326:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   db328:	b113      	cbz	r3, db330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   db32a:	685a      	ldr	r2, [r3, #4]
   db32c:	3201      	adds	r2, #1
   db32e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   db330:	4770      	bx	lr
	...

000db334 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   db334:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db336:	4c06      	ldr	r4, [pc, #24]	; (db350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   db338:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   db33a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db33c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   db33e:	f7ff f9cd 	bl	da6dc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   db342:	4620      	mov	r0, r4
   db344:	4a03      	ldr	r2, [pc, #12]	; (db354 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   db346:	4904      	ldr	r1, [pc, #16]	; (db358 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   db348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   db34c:	f001 bfa0 	b.w	dd290 <__aeabi_atexit>
   db350:	2003e284 	.word	0x2003e284
   db354:	2003d6b0 	.word	0x2003d6b0
   db358:	000db315 	.word	0x000db315

000db35c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db35e:	4606      	mov	r6, r0
   db360:	460d      	mov	r5, r1
   db362:	188f      	adds	r7, r1, r2
  size_t n = 0;
   db364:	2400      	movs	r4, #0
  while (size--) {
   db366:	42bd      	cmp	r5, r7
   db368:	d00c      	beq.n	db384 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db36a:	6833      	ldr	r3, [r6, #0]
   db36c:	f815 1b01 	ldrb.w	r1, [r5], #1
   db370:	689b      	ldr	r3, [r3, #8]
   db372:	4630      	mov	r0, r6
   db374:	4798      	blx	r3
     if (chunk>=0)
   db376:	2800      	cmp	r0, #0
   db378:	db01      	blt.n	db37e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db37a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   db37c:	e7f3      	b.n	db366 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db37e:	2c00      	cmp	r4, #0
   db380:	bf08      	it	eq
   db382:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   db384:	4620      	mov	r0, r4
   db386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db388 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   db388:	b570      	push	{r4, r5, r6, lr}
   db38a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   db38c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   db38e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   db390:	b149      	cbz	r1, db3a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   db392:	f009 fa03 	bl	e479c <strlen>
   db396:	682b      	ldr	r3, [r5, #0]
   db398:	4602      	mov	r2, r0
   db39a:	4621      	mov	r1, r4
   db39c:	4628      	mov	r0, r5
   db39e:	68db      	ldr	r3, [r3, #12]
    }
   db3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   db3a4:	4718      	bx	r3
    }
   db3a6:	bd70      	pop	{r4, r5, r6, pc}

000db3a8 <_ZN5Print5printEPKc>:
   db3a8:	b508      	push	{r3, lr}
   db3aa:	f7ff ffed 	bl	db388 <_ZN5Print5writeEPKc>
   db3ae:	bd08      	pop	{r3, pc}

000db3b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   db3b0:	6803      	ldr	r3, [r0, #0]
   db3b2:	689b      	ldr	r3, [r3, #8]
   db3b4:	4718      	bx	r3

000db3b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db3b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db3b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db3ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   db3bc:	f7ff fff8 	bl	db3b0 <_ZN5Print5printEc>
  n += print('\n');
   db3c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   db3c2:	4604      	mov	r4, r0
  n += print('\n');
   db3c4:	4628      	mov	r0, r5
   db3c6:	f7ff fff3 	bl	db3b0 <_ZN5Print5printEc>
  return n;
}
   db3ca:	4420      	add	r0, r4
   db3cc:	bd38      	pop	{r3, r4, r5, pc}

000db3ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   db3ce:	b538      	push	{r3, r4, r5, lr}
   db3d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db3d2:	f7ff ffd9 	bl	db388 <_ZN5Print5writeEPKc>
   db3d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   db3d8:	4628      	mov	r0, r5
   db3da:	f7ff ffec 	bl	db3b6 <_ZN5Print7printlnEv>
  return n;
}
   db3de:	4420      	add	r0, r4
   db3e0:	bd38      	pop	{r3, r4, r5, pc}

000db3e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db3e2:	b530      	push	{r4, r5, lr}
   db3e4:	b08b      	sub	sp, #44	; 0x2c
   db3e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db3e8:	2100      	movs	r1, #0
   db3ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db3ee:	2a01      	cmp	r2, #1
   db3f0:	bf98      	it	ls
   db3f2:	220a      	movls	r2, #10
   db3f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   db3f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   db3fc:	fb05 3312 	mls	r3, r5, r2, r3
   db400:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db404:	2b09      	cmp	r3, #9
   db406:	bf94      	ite	ls
   db408:	3330      	addls	r3, #48	; 0x30
   db40a:	3337      	addhi	r3, #55	; 0x37
   db40c:	b2db      	uxtb	r3, r3
   db40e:	4621      	mov	r1, r4
   db410:	f804 3901 	strb.w	r3, [r4], #-1
   db414:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   db416:	2d00      	cmp	r5, #0
   db418:	d1ee      	bne.n	db3f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   db41a:	f7ff ffb5 	bl	db388 <_ZN5Print5writeEPKc>
}
   db41e:	b00b      	add	sp, #44	; 0x2c
   db420:	bd30      	pop	{r4, r5, pc}
	...

000db424 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   db424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db428:	ec57 6b10 	vmov	r6, r7, d0
   db42c:	4682      	mov	sl, r0
   db42e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   db430:	ee10 2a10 	vmov	r2, s0
   db434:	463b      	mov	r3, r7
   db436:	ee10 0a10 	vmov	r0, s0
   db43a:	4639      	mov	r1, r7
   db43c:	f007 ffe2 	bl	e3404 <__aeabi_dcmpun>
   db440:	b108      	cbz	r0, db446 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db442:	494e      	ldr	r1, [pc, #312]	; (db57c <_ZN5Print10printFloatEdh+0x158>)
   db444:	e012      	b.n	db46c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db446:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   db44a:	f04f 32ff 	mov.w	r2, #4294967295
   db44e:	4b4c      	ldr	r3, [pc, #304]	; (db580 <_ZN5Print10printFloatEdh+0x15c>)
   db450:	4630      	mov	r0, r6
   db452:	4649      	mov	r1, r9
   db454:	f007 ffd6 	bl	e3404 <__aeabi_dcmpun>
   db458:	b968      	cbnz	r0, db476 <_ZN5Print10printFloatEdh+0x52>
   db45a:	f04f 32ff 	mov.w	r2, #4294967295
   db45e:	4b48      	ldr	r3, [pc, #288]	; (db580 <_ZN5Print10printFloatEdh+0x15c>)
   db460:	4630      	mov	r0, r6
   db462:	4649      	mov	r1, r9
   db464:	f007 ffb0 	bl	e33c8 <__aeabi_dcmple>
   db468:	b928      	cbnz	r0, db476 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db46a:	4946      	ldr	r1, [pc, #280]	; (db584 <_ZN5Print10printFloatEdh+0x160>)
   db46c:	4650      	mov	r0, sl
   db46e:	f7ff ff8b 	bl	db388 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   db476:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db47a:	4b43      	ldr	r3, [pc, #268]	; (db588 <_ZN5Print10printFloatEdh+0x164>)
   db47c:	4630      	mov	r0, r6
   db47e:	4639      	mov	r1, r7
   db480:	f007 ffb6 	bl	e33f0 <__aeabi_dcmpgt>
   db484:	b108      	cbz	r0, db48a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db486:	4941      	ldr	r1, [pc, #260]	; (db58c <_ZN5Print10printFloatEdh+0x168>)
   db488:	e7f0      	b.n	db46c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   db48a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db48e:	4b40      	ldr	r3, [pc, #256]	; (db590 <_ZN5Print10printFloatEdh+0x16c>)
   db490:	4630      	mov	r0, r6
   db492:	4639      	mov	r1, r7
   db494:	f007 ff8e 	bl	e33b4 <__aeabi_dcmplt>
   db498:	2800      	cmp	r0, #0
   db49a:	d1f4      	bne.n	db486 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   db49c:	2200      	movs	r2, #0
   db49e:	2300      	movs	r3, #0
   db4a0:	4630      	mov	r0, r6
   db4a2:	4639      	mov	r1, r7
   db4a4:	f007 ff86 	bl	e33b4 <__aeabi_dcmplt>
   db4a8:	b140      	cbz	r0, db4bc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   db4aa:	212d      	movs	r1, #45	; 0x2d
   db4ac:	4650      	mov	r0, sl
   db4ae:	f7ff ff7f 	bl	db3b0 <_ZN5Print5printEc>
     number = -number;
   db4b2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   db4b6:	4604      	mov	r4, r0
     number = -number;
   db4b8:	461f      	mov	r7, r3
   db4ba:	e000      	b.n	db4be <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db4bc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db4be:	4935      	ldr	r1, [pc, #212]	; (db594 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db4c0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db4c4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   db4c6:	fa5f f388 	uxtb.w	r3, r8
   db4ca:	429d      	cmp	r5, r3
   db4cc:	d906      	bls.n	db4dc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   db4ce:	2200      	movs	r2, #0
   db4d0:	4b31      	ldr	r3, [pc, #196]	; (db598 <_ZN5Print10printFloatEdh+0x174>)
   db4d2:	f007 fe27 	bl	e3124 <__aeabi_ddiv>
   db4d6:	f108 0801 	add.w	r8, r8, #1
   db4da:	e7f4      	b.n	db4c6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   db4dc:	4632      	mov	r2, r6
   db4de:	463b      	mov	r3, r7
   db4e0:	f007 fb44 	bl	e2b6c <__adddf3>
   db4e4:	460f      	mov	r7, r1
   db4e6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   db4e8:	f007 ffca 	bl	e3480 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   db4ec:	220a      	movs	r2, #10
   db4ee:	4601      	mov	r1, r0
   db4f0:	4680      	mov	r8, r0
   db4f2:	4650      	mov	r0, sl
   db4f4:	f7ff ff75 	bl	db3e2 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   db4f8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   db4fa:	b3e5      	cbz	r5, db576 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   db4fc:	4640      	mov	r0, r8
   db4fe:	f007 fc71 	bl	e2de4 <__aeabi_ui2d>
   db502:	4602      	mov	r2, r0
   db504:	460b      	mov	r3, r1
   db506:	4630      	mov	r0, r6
   db508:	4639      	mov	r1, r7
   db50a:	f007 fb2d 	bl	e2b68 <__aeabi_dsub>
   db50e:	4606      	mov	r6, r0
   db510:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db512:	4650      	mov	r0, sl
   db514:	4921      	ldr	r1, [pc, #132]	; (db59c <_ZN5Print10printFloatEdh+0x178>)
   db516:	f7ff ff37 	bl	db388 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   db51a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   db51c:	2200      	movs	r2, #0
   db51e:	4b1e      	ldr	r3, [pc, #120]	; (db598 <_ZN5Print10printFloatEdh+0x174>)
   db520:	4630      	mov	r0, r6
   db522:	4639      	mov	r1, r7
   db524:	f007 fcd4 	bl	e2ed0 <__aeabi_dmul>
   db528:	4606      	mov	r6, r0
   db52a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   db52c:	f007 ff80 	bl	e3430 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   db530:	f1b0 0900 	subs.w	r9, r0, #0
   db534:	da07      	bge.n	db546 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   db536:	212d      	movs	r1, #45	; 0x2d
   db538:	4650      	mov	r0, sl
   db53a:	f7ff ff39 	bl	db3b0 <_ZN5Print5printEc>
            val = -n;
   db53e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   db542:	4680      	mov	r8, r0
   db544:	e002      	b.n	db54c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   db546:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   db548:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   db54c:	220a      	movs	r2, #10
   db54e:	4650      	mov	r0, sl
   db550:	f7ff ff47 	bl	db3e2 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   db554:	4440      	add	r0, r8
   db556:	4404      	add	r4, r0
    remainder -= toPrint;
   db558:	4648      	mov	r0, r9
   db55a:	f007 fc53 	bl	e2e04 <__aeabi_i2d>
   db55e:	4602      	mov	r2, r0
   db560:	460b      	mov	r3, r1
   db562:	4630      	mov	r0, r6
   db564:	4639      	mov	r1, r7
   db566:	f007 faff 	bl	e2b68 <__aeabi_dsub>
   db56a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db56c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   db570:	4606      	mov	r6, r0
   db572:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db574:	d1d2      	bne.n	db51c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   db576:	4620      	mov	r0, r4
   db578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db57c:	000e7fb0 	.word	0x000e7fb0
   db580:	7fefffff 	.word	0x7fefffff
   db584:	000e7fb8 	.word	0x000e7fb8
   db588:	41efffff 	.word	0x41efffff
   db58c:	000e7fb4 	.word	0x000e7fb4
   db590:	c1efffff 	.word	0xc1efffff
   db594:	3fe00000 	.word	0x3fe00000
   db598:	40240000 	.word	0x40240000
   db59c:	000e7151 	.word	0x000e7151

000db5a0 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   db5a0:	b538      	push	{r3, r4, r5, lr}
   db5a2:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   db5a4:	ee10 0a10 	vmov	r0, s0
   db5a8:	b2cd      	uxtb	r5, r1
   db5aa:	f007 fc3d 	bl	e2e28 <__aeabi_f2d>
   db5ae:	ec41 0b10 	vmov	d0, r0, r1
   db5b2:	4629      	mov	r1, r5
   db5b4:	4620      	mov	r0, r4
}
   db5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   db5ba:	f7ff bf33 	b.w	db424 <_ZN5Print10printFloatEdh>

000db5be <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   db5be:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db5c0:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   db5c2:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db5c4:	f7ff ff2e 	bl	db424 <_ZN5Print10printFloatEdh>
   db5c8:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   db5ca:	4628      	mov	r0, r5
   db5cc:	f7ff fef3 	bl	db3b6 <_ZN5Print7printlnEv>
  return n;
}
   db5d0:	4420      	add	r0, r4
   db5d2:	bd38      	pop	{r3, r4, r5, pc}

000db5d4 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   db5d4:	b538      	push	{r3, r4, r5, lr}
   db5d6:	4604      	mov	r4, r0
    return println((double)num, digits);
   db5d8:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   db5dc:	460d      	mov	r5, r1
    return println((double)num, digits);
   db5de:	f007 fc23 	bl	e2e28 <__aeabi_f2d>
   db5e2:	ec41 0b10 	vmov	d0, r0, r1
   db5e6:	4629      	mov	r1, r5
   db5e8:	4620      	mov	r0, r4
}
   db5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   db5ee:	f7ff bfe6 	b.w	db5be <_ZN5Print7printlnEdi>

000db5f2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db5f2:	b40c      	push	{r2, r3}
   db5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db5f8:	b087      	sub	sp, #28
   db5fa:	af00      	add	r7, sp, #0
   db5fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   db600:	4605      	mov	r5, r0
   db602:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   db606:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db608:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   db60a:	4623      	mov	r3, r4
   db60c:	464a      	mov	r2, r9
   db60e:	2114      	movs	r1, #20
   db610:	1d38      	adds	r0, r7, #4
   db612:	f7ff fb1b 	bl	dac4c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   db616:	2813      	cmp	r0, #19
   db618:	d805      	bhi.n	db626 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db61a:	1d39      	adds	r1, r7, #4
   db61c:	4628      	mov	r0, r5
   db61e:	f7ff feb3 	bl	db388 <_ZN5Print5writeEPKc>
   db622:	4604      	mov	r4, r0
   db624:	e013      	b.n	db64e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db626:	f100 0308 	add.w	r3, r0, #8
   db62a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   db62e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db630:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   db634:	1c41      	adds	r1, r0, #1
   db636:	4623      	mov	r3, r4
   db638:	464a      	mov	r2, r9
   db63a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   db63c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   db63e:	f7ff fb05 	bl	dac4c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db642:	4669      	mov	r1, sp
   db644:	4628      	mov	r0, r5
   db646:	f7ff fe9f 	bl	db388 <_ZN5Print5writeEPKc>
   db64a:	4604      	mov	r4, r0
   db64c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   db64e:	b11e      	cbz	r6, db658 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   db650:	4628      	mov	r0, r5
   db652:	f7ff feb0 	bl	db3b6 <_ZN5Print7printlnEv>
   db656:	4404      	add	r4, r0
    return n;
}
   db658:	4620      	mov	r0, r4
   db65a:	371c      	adds	r7, #28
   db65c:	46bd      	mov	sp, r7
   db65e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db662:	b002      	add	sp, #8
   db664:	4770      	bx	lr

000db666 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   db666:	b510      	push	{r4, lr}
   db668:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   db66a:	f7fe ffef 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   db66e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   db670:	6823      	ldr	r3, [r4, #0]
   db672:	4620      	mov	r0, r4
   db674:	695b      	ldr	r3, [r3, #20]
   db676:	4798      	blx	r3
    if (c >= 0) return c;
   db678:	2800      	cmp	r0, #0
   db67a:	da08      	bge.n	db68e <_ZN6Stream9timedReadEv+0x28>
   db67c:	f7fe ffe6 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   db680:	68e3      	ldr	r3, [r4, #12]
   db682:	1ac0      	subs	r0, r0, r3
   db684:	68a3      	ldr	r3, [r4, #8]
   db686:	4298      	cmp	r0, r3
   db688:	d3f2      	bcc.n	db670 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   db68a:	f04f 30ff 	mov.w	r0, #4294967295
}
   db68e:	bd10      	pop	{r4, pc}

000db690 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   db690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db694:	4680      	mov	r8, r0
   db696:	460d      	mov	r5, r1
   db698:	188f      	adds	r7, r1, r2
   db69a:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   db69c:	42bc      	cmp	r4, r7
   db69e:	eba4 0605 	sub.w	r6, r4, r5
   db6a2:	d007      	beq.n	db6b4 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   db6a4:	4640      	mov	r0, r8
   db6a6:	f7ff ffde 	bl	db666 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   db6aa:	2800      	cmp	r0, #0
   db6ac:	db02      	blt.n	db6b4 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   db6ae:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   db6b2:	e7f3      	b.n	db69c <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   db6b4:	4630      	mov	r0, r6
   db6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000db6bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   db6bc:	4b01      	ldr	r3, [pc, #4]	; (db6c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   db6be:	4a02      	ldr	r2, [pc, #8]	; (db6c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   db6c0:	601a      	str	r2, [r3, #0]
   db6c2:	4770      	bx	lr
   db6c4:	2003e288 	.word	0x2003e288
   db6c8:	000e802f 	.word	0x000e802f

000db6cc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   db6ce:	4b14      	ldr	r3, [pc, #80]	; (db720 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db6d0:	4f14      	ldr	r7, [pc, #80]	; (db724 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db6d2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   db6d4:	4b14      	ldr	r3, [pc, #80]	; (db728 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db6d6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   db6d8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   db6da:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   db6dc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   db6de:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db6e0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db6e2:	d01b      	beq.n	db71c <_ZL22Refresh_UnixTime_Cachel+0x50>
   db6e4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   db6e6:	ad01      	add	r5, sp, #4
   db6e8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   db6ec:	f007 ff8e 	bl	e360c <localtime>
	calendar_time->tm_year += 1900;
   db6f0:	6943      	ldr	r3, [r0, #20]
   db6f2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db6f6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   db6f8:	4604      	mov	r4, r0
   db6fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db6fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db6fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db702:	f8d4 e000 	ldr.w	lr, [r4]
   db706:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db70a:	ad01      	add	r5, sp, #4
   db70c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db70e:	4c07      	ldr	r4, [pc, #28]	; (db72c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   db710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db716:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db718:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   db71c:	b00b      	add	sp, #44	; 0x2c
   db71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db720:	2003e2bc 	.word	0x2003e2bc
   db724:	2003e2b8 	.word	0x2003e2b8
   db728:	2003e2b4 	.word	0x2003e2b4
   db72c:	2003e28c 	.word	0x2003e28c

000db730 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   db730:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   db732:	2000      	movs	r0, #0
   db734:	f7ff fa42 	bl	dabbc <spark_sync_time_pending>
   db738:	b128      	cbz	r0, db746 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db73a:	f7ff fa27 	bl	dab8c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   db73e:	f080 0001 	eor.w	r0, r0, #1
   db742:	b2c0      	uxtb	r0, r0
   db744:	bd08      	pop	{r3, pc}
   db746:	2001      	movs	r0, #1
    }
   db748:	bd08      	pop	{r3, pc}
	...

000db74c <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   db74c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db74e:	f7ff ffbd 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   db752:	4b01      	ldr	r3, [pc, #4]	; (db758 <_ZN9TimeClass4hourEl+0xc>)
   db754:	6898      	ldr	r0, [r3, #8]
   db756:	bd08      	pop	{r3, pc}
   db758:	2003e28c 	.word	0x2003e28c

000db75c <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   db75c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db75e:	f7ff ffb5 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   db762:	4b01      	ldr	r3, [pc, #4]	; (db768 <_ZN9TimeClass6minuteEl+0xc>)
   db764:	6858      	ldr	r0, [r3, #4]
   db766:	bd08      	pop	{r3, pc}
   db768:	2003e28c 	.word	0x2003e28c

000db76c <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   db76c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db76e:	f7ff ffad 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   db772:	4b01      	ldr	r3, [pc, #4]	; (db778 <_ZN9TimeClass6secondEl+0xc>)
   db774:	6818      	ldr	r0, [r3, #0]
   db776:	bd08      	pop	{r3, pc}
   db778:	2003e28c 	.word	0x2003e28c

000db77c <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   db77c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db77e:	f7ff ffa5 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   db782:	4b01      	ldr	r3, [pc, #4]	; (db788 <_ZN9TimeClass3dayEl+0xc>)
   db784:	68d8      	ldr	r0, [r3, #12]
   db786:	bd08      	pop	{r3, pc}
   db788:	2003e28c 	.word	0x2003e28c

000db78c <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   db78c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db78e:	f7ff ff9d 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   db792:	4b02      	ldr	r3, [pc, #8]	; (db79c <_ZN9TimeClass7weekdayEl+0x10>)
   db794:	6998      	ldr	r0, [r3, #24]
}
   db796:	3001      	adds	r0, #1
   db798:	bd08      	pop	{r3, pc}
   db79a:	bf00      	nop
   db79c:	2003e28c 	.word	0x2003e28c

000db7a0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db7a0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db7a2:	f7ff ff93 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db7a6:	4b02      	ldr	r3, [pc, #8]	; (db7b0 <_ZN9TimeClass5monthEl+0x10>)
   db7a8:	6918      	ldr	r0, [r3, #16]
}
   db7aa:	3001      	adds	r0, #1
   db7ac:	bd08      	pop	{r3, pc}
   db7ae:	bf00      	nop
   db7b0:	2003e28c 	.word	0x2003e28c

000db7b4 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   db7b4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db7b6:	f7ff ff89 	bl	db6cc <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   db7ba:	4b01      	ldr	r3, [pc, #4]	; (db7c0 <_ZN9TimeClass4yearEl+0xc>)
   db7bc:	6958      	ldr	r0, [r3, #20]
   db7be:	bd08      	pop	{r3, pc}
   db7c0:	2003e28c 	.word	0x2003e28c

000db7c4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   db7c6:	4b0e      	ldr	r3, [pc, #56]	; (db800 <_ZN9TimeClass7timeStrEl+0x3c>)
   db7c8:	681b      	ldr	r3, [r3, #0]
   db7ca:	4419      	add	r1, r3
   db7cc:	4b0d      	ldr	r3, [pc, #52]	; (db804 <_ZN9TimeClass7timeStrEl+0x40>)
   db7ce:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db7d0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   db7d2:	a802      	add	r0, sp, #8
   db7d4:	4419      	add	r1, r3
   db7d6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   db7da:	f007 ff17 	bl	e360c <localtime>
        char* ascstr = asctime(calendar_time);
   db7de:	f007 febf 	bl	e3560 <asctime>
   db7e2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   db7e4:	f008 ffda 	bl	e479c <strlen>
        ascstr[len-1] = 0; // remove final newline
   db7e8:	4428      	add	r0, r5
   db7ea:	2300      	movs	r3, #0
   db7ec:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   db7f0:	4629      	mov	r1, r5
   db7f2:	4620      	mov	r0, r4
   db7f4:	f7ff fc5d 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   db7f8:	4620      	mov	r0, r4
   db7fa:	b003      	add	sp, #12
   db7fc:	bd30      	pop	{r4, r5, pc}
   db7fe:	bf00      	nop
   db800:	2003e2bc 	.word	0x2003e2bc
   db804:	2003e2b4 	.word	0x2003e2b4

000db808 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db80c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db80e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db810:	4607      	mov	r7, r0
   db812:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db814:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db816:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db818:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db81a:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db81c:	f008 ffdb 	bl	e47d6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db820:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db822:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db824:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db828:	f008 ffb8 	bl	e479c <strlen>
   db82c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   db82e:	b925      	cbnz	r5, db83a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   db830:	4924      	ldr	r1, [pc, #144]	; (db8c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   db832:	a803      	add	r0, sp, #12
   db834:	f008 fa7a 	bl	e3d2c <strcpy>
   db838:	e013      	b.n	db862 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   db83a:	213c      	movs	r1, #60	; 0x3c
   db83c:	fb95 f2f1 	sdiv	r2, r5, r1
   db840:	2a00      	cmp	r2, #0
   db842:	bfb8      	it	lt
   db844:	4252      	neglt	r2, r2
   db846:	fb92 f3f1 	sdiv	r3, r2, r1
   db84a:	fb01 2213 	mls	r2, r1, r3, r2
   db84e:	9200      	str	r2, [sp, #0]
   db850:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db854:	4a1c      	ldr	r2, [pc, #112]	; (db8c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   db856:	fb95 f3f3 	sdiv	r3, r5, r3
   db85a:	2110      	movs	r1, #16
   db85c:	a803      	add	r0, sp, #12
   db85e:	f7ff f9e5 	bl	dac2c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db862:	4625      	mov	r5, r4
   db864:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db866:	f108 3aff 	add.w	sl, r8, #4294967295
   db86a:	45b2      	cmp	sl, r6
   db86c:	d91b      	bls.n	db8a6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   db86e:	782b      	ldrb	r3, [r5, #0]
   db870:	2b25      	cmp	r3, #37	; 0x25
   db872:	d116      	bne.n	db8a2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   db874:	786b      	ldrb	r3, [r5, #1]
   db876:	2b7a      	cmp	r3, #122	; 0x7a
   db878:	d113      	bne.n	db8a2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   db87a:	a803      	add	r0, sp, #12
   db87c:	f008 ff8e 	bl	e479c <strlen>
   db880:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db882:	4430      	add	r0, r6
   db884:	ebc6 020a 	rsb	r2, r6, sl
   db888:	1ca9      	adds	r1, r5, #2
   db88a:	4420      	add	r0, r4
   db88c:	f007 ffba 	bl	e3804 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   db890:	4642      	mov	r2, r8
   db892:	a903      	add	r1, sp, #12
   db894:	4628      	mov	r0, r5
   db896:	f007 ffb5 	bl	e3804 <memcpy>
            len = strlen(format_str);
   db89a:	4620      	mov	r0, r4
   db89c:	f008 ff7e 	bl	e479c <strlen>
   db8a0:	4680      	mov	r8, r0
   db8a2:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db8a4:	e7de      	b.n	db864 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   db8a6:	464b      	mov	r3, r9
   db8a8:	4622      	mov	r2, r4
   db8aa:	2132      	movs	r1, #50	; 0x32
   db8ac:	a807      	add	r0, sp, #28
   db8ae:	f008 fac1 	bl	e3e34 <strftime>
    return String(buf);
   db8b2:	a907      	add	r1, sp, #28
   db8b4:	4638      	mov	r0, r7
   db8b6:	f7ff fbfc 	bl	db0b2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   db8ba:	4638      	mov	r0, r7
   db8bc:	b024      	add	sp, #144	; 0x90
   db8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db8c2:	bf00      	nop
   db8c4:	000e8abd 	.word	0x000e8abd
   db8c8:	000e8083 	.word	0x000e8083

000db8cc <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   db8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db8ce:	4605      	mov	r5, r0
   db8d0:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   db8d2:	461c      	mov	r4, r3
   db8d4:	b913      	cbnz	r3, db8dc <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   db8d6:	4b12      	ldr	r3, [pc, #72]	; (db920 <_ZN9TimeClass6formatElPKc+0x54>)
   db8d8:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   db8da:	b12c      	cbz	r4, db8e8 <_ZN9TimeClass6formatElPKc+0x1c>
   db8dc:	4b11      	ldr	r3, [pc, #68]	; (db924 <_ZN9TimeClass6formatElPKc+0x58>)
   db8de:	4620      	mov	r0, r4
   db8e0:	6819      	ldr	r1, [r3, #0]
   db8e2:	f008 fa19 	bl	e3d18 <strcmp>
   db8e6:	b920      	cbnz	r0, db8f2 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   db8e8:	9901      	ldr	r1, [sp, #4]
   db8ea:	4628      	mov	r0, r5
   db8ec:	f7ff ff6a 	bl	db7c4 <_ZN9TimeClass7timeStrEl>
   db8f0:	e013      	b.n	db91a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   db8f2:	4f0d      	ldr	r7, [pc, #52]	; (db928 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   db8f4:	9a01      	ldr	r2, [sp, #4]
   db8f6:	683b      	ldr	r3, [r7, #0]
   db8f8:	4e0c      	ldr	r6, [pc, #48]	; (db92c <_ZN9TimeClass6formatElPKc+0x60>)
   db8fa:	441a      	add	r2, r3
   db8fc:	6833      	ldr	r3, [r6, #0]
   db8fe:	a802      	add	r0, sp, #8
   db900:	4413      	add	r3, r2
   db902:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   db906:	f007 fe81 	bl	e360c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db90a:	683a      	ldr	r2, [r7, #0]
   db90c:	6833      	ldr	r3, [r6, #0]
   db90e:	4601      	mov	r1, r0
   db910:	4413      	add	r3, r2
   db912:	4628      	mov	r0, r5
   db914:	4622      	mov	r2, r4
   db916:	f7ff ff77 	bl	db808 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   db91a:	4628      	mov	r0, r5
   db91c:	b003      	add	sp, #12
   db91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db920:	2003e2b0 	.word	0x2003e2b0
   db924:	2003d5bc 	.word	0x2003d5bc
   db928:	2003e2bc 	.word	0x2003e2bc
   db92c:	2003e2b4 	.word	0x2003e2b4

000db930 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db930:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   db932:	2000      	movs	r0, #0
   db934:	f7fe fe9a 	bl	da66c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   db938:	4604      	mov	r4, r0
   db93a:	b968      	cbnz	r0, db958 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db93c:	f7ff f868 	bl	daa10 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db940:	2801      	cmp	r0, #1
   db942:	d10b      	bne.n	db95c <_ZN9TimeClass7isValidEv+0x2c>
   db944:	4620      	mov	r0, r4
   db946:	f7ff f893 	bl	daa70 <system_thread_get_state>
   db94a:	b938      	cbnz	r0, db95c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   db94c:	f7ff fef0 	bl	db730 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db950:	b930      	cbnz	r0, db960 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   db952:	f7ff f90b 	bl	dab6c <spark_process>
   db956:	e7f9      	b.n	db94c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   db958:	2001      	movs	r0, #1
   db95a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   db95c:	2000      	movs	r0, #0
   db95e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   db960:	f7ff fee6 	bl	db730 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   db964:	2000      	movs	r0, #0
   db966:	f7fe fe81 	bl	da66c <HAL_RTC_Time_Is_Valid>
   db96a:	3000      	adds	r0, #0
   db96c:	bf18      	it	ne
   db96e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   db970:	bd10      	pop	{r4, pc}

000db972 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   db972:	b508      	push	{r3, lr}
    (void)isValid();
   db974:	f7ff ffdc 	bl	db930 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   db978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   db97c:	f7fe be6e 	b.w	da65c <HAL_RTC_Get_UnixTime>

000db980 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db980:	4b02      	ldr	r3, [pc, #8]	; (db98c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db982:	681a      	ldr	r2, [r3, #0]
   db984:	4b02      	ldr	r3, [pc, #8]	; (db990 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db986:	601a      	str	r2, [r3, #0]
   db988:	4770      	bx	lr
   db98a:	bf00      	nop
   db98c:	2003d5bc 	.word	0x2003d5bc
   db990:	2003e2b0 	.word	0x2003e2b0

000db994 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   db994:	2100      	movs	r1, #0
   db996:	f7ff b84b 	b.w	daa30 <system_delay_ms>

000db99a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db99a:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db99c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db99e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db9a0:	689b      	ldr	r3, [r3, #8]
   db9a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db9a4:	68a3      	ldr	r3, [r4, #8]
   db9a6:	3b01      	subs	r3, #1
   db9a8:	60a3      	str	r3, [r4, #8]
   db9aa:	b92b      	cbnz	r3, db9b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   db9ac:	6823      	ldr	r3, [r4, #0]
   db9ae:	4620      	mov	r0, r4
   db9b0:	68db      	ldr	r3, [r3, #12]
        }
    }
   db9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db9b6:	4718      	bx	r3
   db9b8:	bd10      	pop	{r4, pc}
	...

000db9bc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   db9bc:	b510      	push	{r4, lr}
   db9be:	4b06      	ldr	r3, [pc, #24]	; (db9d8 <_ZN9TCPClientD1Ev+0x1c>)
   db9c0:	6003      	str	r3, [r0, #0]
   db9c2:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   db9c4:	6980      	ldr	r0, [r0, #24]
   db9c6:	b128      	cbz	r0, db9d4 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   db9c8:	6843      	ldr	r3, [r0, #4]
   db9ca:	3b01      	subs	r3, #1
   db9cc:	6043      	str	r3, [r0, #4]
   db9ce:	b90b      	cbnz	r3, db9d4 <_ZN9TCPClientD1Ev+0x18>
   db9d0:	f7ff ffe3 	bl	db99a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   db9d4:	4620      	mov	r0, r4
   db9d6:	bd10      	pop	{r4, pc}
   db9d8:	000e81bc 	.word	0x000e81bc

000db9dc <_ZN9TCPClientD0Ev>:
   db9dc:	b510      	push	{r4, lr}
   db9de:	4604      	mov	r4, r0
   db9e0:	f7ff ffec 	bl	db9bc <_ZN9TCPClientD1Ev>
   db9e4:	4620      	mov	r0, r4
   db9e6:	211c      	movs	r1, #28
   db9e8:	f001 fc60 	bl	dd2ac <_ZdlPvj>
   db9ec:	4620      	mov	r0, r4
   db9ee:	bd10      	pop	{r4, pc}

000db9f0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db9f0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   db9f2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db9f4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   db9f6:	b113      	cbz	r3, db9fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db9f8:	2203      	movs	r2, #3
   db9fa:	4601      	mov	r1, r0
   db9fc:	4798      	blx	r3
    }
   db9fe:	4620      	mov	r0, r4
   dba00:	bd10      	pop	{r4, pc}

000dba02 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dba02:	b510      	push	{r4, lr}
   dba04:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dba06:	f7ff fff3 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
   dba0a:	4620      	mov	r0, r4
   dba0c:	bd10      	pop	{r4, pc}

000dba0e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   dba0e:	b510      	push	{r4, lr}
   dba10:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dba12:	f7fe ffdb 	bl	da9cc <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   dba16:	4284      	cmp	r4, r0
   dba18:	d008      	beq.n	dba2c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   dba1a:	b11c      	cbz	r4, dba24 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   dba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   dba20:	f7fe bfc4 	b.w	da9ac <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   dba24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   dba28:	f7fe bfc8 	b.w	da9bc <LED_Signaling_Stop>
   dba2c:	bd10      	pop	{r4, pc}

000dba2e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   dba2e:	b570      	push	{r4, r5, r6, lr}
   dba30:	4605      	mov	r5, r0
   dba32:	460e      	mov	r6, r1
   dba34:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dba36:	f7fe ffc9 	bl	da9cc <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   dba3a:	b150      	cbz	r0, dba52 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   dba3c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   dba40:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   dba44:	f7fe ffaa 	bl	da99c <LED_SetSignalingColor>
    LED_On(LED_RGB);
   dba48:	20e7      	movs	r0, #231	; 0xe7
}
   dba4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   dba4e:	f7fe bfc5 	b.w	da9dc <LED_On>
   dba52:	bd70      	pop	{r4, r5, r6, pc}

000dba54 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dba54:	b513      	push	{r0, r1, r4, lr}
   dba56:	460b      	mov	r3, r1
   dba58:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dba5a:	c803      	ldmia	r0, {r0, r1}
   dba5c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dba60:	e893 0003 	ldmia.w	r3, {r0, r1}
   dba64:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dba68:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dba6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dba70:	b002      	add	sp, #8
   dba72:	bd10      	pop	{r4, pc}

000dba74 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dba74:	4803      	ldr	r0, [pc, #12]	; (dba84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dba76:	4a04      	ldr	r2, [pc, #16]	; (dba88 <_GLOBAL__sub_I_RGB+0x14>)
   dba78:	4904      	ldr	r1, [pc, #16]	; (dba8c <_GLOBAL__sub_I_RGB+0x18>)
   dba7a:	2300      	movs	r3, #0
   dba7c:	6083      	str	r3, [r0, #8]
   dba7e:	f001 bc07 	b.w	dd290 <__aeabi_atexit>
   dba82:	bf00      	nop
   dba84:	2003e2c4 	.word	0x2003e2c4
   dba88:	2003d6b0 	.word	0x2003d6b0
   dba8c:	000dba03 	.word	0x000dba03

000dba90 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   dba90:	6800      	ldr	r0, [r0, #0]
   dba92:	f000 bdd7 	b.w	dc644 <_ZN7TwoWire4lockEv>

000dba96 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   dba96:	b510      	push	{r4, lr}
   dba98:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   dba9a:	6001      	str	r1, [r0, #0]
   dba9c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   dba9e:	b10a      	cbz	r2, dbaa4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   dbaa0:	f7ff fff6 	bl	dba90 <_ZN9FuelGauge4lockEv>
    }
}
   dbaa4:	4620      	mov	r0, r4
   dbaa6:	bd10      	pop	{r4, pc}

000dbaa8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   dbaa8:	b538      	push	{r3, r4, r5, lr}
   dbaaa:	4604      	mov	r4, r0
   dbaac:	460d      	mov	r5, r1
        }
#endif // Wiring_Wire3
    }
#endif // HAL_PLATFORM_FUELGAUGE_MAX17043

    return &Wire;
   dbaae:	f001 fbc9 	bl	dd244 <_Z19__fetch_global_Wirev>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   dbab2:	462a      	mov	r2, r5
   dbab4:	4601      	mov	r1, r0
   dbab6:	4620      	mov	r0, r4
   dbab8:	f7ff ffed 	bl	dba96 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   dbabc:	4620      	mov	r0, r4
   dbabe:	bd38      	pop	{r3, r4, r5, pc}

000dbac0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   dbac0:	6800      	ldr	r0, [r0, #0]
   dbac2:	f000 bdc8 	b.w	dc656 <_ZN7TwoWire6unlockEv>

000dbac6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   dbac6:	b510      	push	{r4, lr}
{
    if (lock_) {
   dbac8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   dbaca:	4604      	mov	r4, r0
{
    if (lock_) {
   dbacc:	b10b      	cbz	r3, dbad2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   dbace:	f7ff fff7 	bl	dbac0 <_ZN9FuelGauge6unlockEv>
    }
}
   dbad2:	4620      	mov	r0, r4
   dbad4:	bd10      	pop	{r4, pc}
	...

000dbad8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dbad8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dbada:	4b0c      	ldr	r3, [pc, #48]	; (dbb0c <serialEventRun+0x34>)
   dbadc:	b133      	cbz	r3, dbaec <serialEventRun+0x14>
   dbade:	f000 fc31 	bl	dc344 <_Z16_fetch_usbserialv>
   dbae2:	6803      	ldr	r3, [r0, #0]
   dbae4:	691b      	ldr	r3, [r3, #16]
   dbae6:	4798      	blx	r3
   dbae8:	2800      	cmp	r0, #0
   dbaea:	dc09      	bgt.n	dbb00 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dbaec:	4b08      	ldr	r3, [pc, #32]	; (dbb10 <serialEventRun+0x38>)
   dbaee:	b163      	cbz	r3, dbb0a <serialEventRun+0x32>
   dbaf0:	f000 fcda 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   dbaf4:	6803      	ldr	r3, [r0, #0]
   dbaf6:	691b      	ldr	r3, [r3, #16]
   dbaf8:	4798      	blx	r3
   dbafa:	2800      	cmp	r0, #0
   dbafc:	dc03      	bgt.n	dbb06 <serialEventRun+0x2e>
   dbafe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dbb00:	f3af 8000 	nop.w
   dbb04:	e7f2      	b.n	dbaec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dbb06:	f3af 8000 	nop.w
   dbb0a:	bd08      	pop	{r3, pc}
	...

000dbb14 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dbb14:	b508      	push	{r3, lr}
	serialEventRun();
   dbb16:	f7ff ffdf 	bl	dbad8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dbb1a:	f7fe fd97 	bl	da64c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dbb1e:	4b01      	ldr	r3, [pc, #4]	; (dbb24 <_post_loop+0x10>)
   dbb20:	6018      	str	r0, [r3, #0]
   dbb22:	bd08      	pop	{r3, pc}
   dbb24:	2003e608 	.word	0x2003e608

000dbb28 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dbb28:	4802      	ldr	r0, [pc, #8]	; (dbb34 <_Z33system_initialize_user_backup_ramv+0xc>)
   dbb2a:	4a03      	ldr	r2, [pc, #12]	; (dbb38 <_Z33system_initialize_user_backup_ramv+0x10>)
   dbb2c:	4903      	ldr	r1, [pc, #12]	; (dbb3c <_Z33system_initialize_user_backup_ramv+0x14>)
   dbb2e:	1a12      	subs	r2, r2, r0
   dbb30:	f007 be68 	b.w	e3804 <memcpy>
   dbb34:	2003f400 	.word	0x2003f400
   dbb38:	2003f404 	.word	0x2003f404
   dbb3c:	000e8c60 	.word	0x000e8c60

000dbb40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dbb40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbb42:	2300      	movs	r3, #0
   dbb44:	9300      	str	r3, [sp, #0]
   dbb46:	461a      	mov	r2, r3
   dbb48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbb4c:	f7fe ffaa 	bl	daaa4 <system_ctrl_set_result>
}
   dbb50:	b003      	add	sp, #12
   dbb52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbb58 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dbb58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dbb5a:	8843      	ldrh	r3, [r0, #2]
   dbb5c:	2b0a      	cmp	r3, #10
   dbb5e:	d008      	beq.n	dbb72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dbb60:	2b50      	cmp	r3, #80	; 0x50
   dbb62:	d109      	bne.n	dbb78 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dbb64:	4b09      	ldr	r3, [pc, #36]	; (dbb8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dbb66:	681b      	ldr	r3, [r3, #0]
   dbb68:	b13b      	cbz	r3, dbb7a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dbb6a:	b003      	add	sp, #12
   dbb6c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dbb70:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dbb72:	f7ff ffe5 	bl	dbb40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dbb76:	e006      	b.n	dbb86 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbb78:	2300      	movs	r3, #0
   dbb7a:	9300      	str	r3, [sp, #0]
   dbb7c:	461a      	mov	r2, r3
   dbb7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbb82:	f7fe ff8f 	bl	daaa4 <system_ctrl_set_result>
        break;
    }
}
   dbb86:	b003      	add	sp, #12
   dbb88:	f85d fb04 	ldr.w	pc, [sp], #4
   dbb8c:	2003e2d4 	.word	0x2003e2d4

000dbb90 <module_user_init_hook>:

void module_user_init_hook()
{
   dbb90:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dbb92:	4c10      	ldr	r4, [pc, #64]	; (dbbd4 <module_user_init_hook+0x44>)
   dbb94:	4d10      	ldr	r5, [pc, #64]	; (dbbd8 <module_user_init_hook+0x48>)
   dbb96:	6823      	ldr	r3, [r4, #0]
   dbb98:	42ab      	cmp	r3, r5
   dbb9a:	4b10      	ldr	r3, [pc, #64]	; (dbbdc <module_user_init_hook+0x4c>)
   dbb9c:	bf0c      	ite	eq
   dbb9e:	2201      	moveq	r2, #1
   dbba0:	2200      	movne	r2, #0
   dbba2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dbba4:	d002      	beq.n	dbbac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dbba6:	f7ff ffbf 	bl	dbb28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dbbaa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dbbac:	f7fe fd46 	bl	da63c <HAL_RNG_GetRandomNumber>
   dbbb0:	4604      	mov	r4, r0
    srand(seed);
   dbbb2:	f008 f889 	bl	e3cc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dbbb6:	4b0a      	ldr	r3, [pc, #40]	; (dbbe0 <module_user_init_hook+0x50>)
   dbbb8:	b113      	cbz	r3, dbbc0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dbbba:	4620      	mov	r0, r4
   dbbbc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dbbc0:	2100      	movs	r1, #0
   dbbc2:	4807      	ldr	r0, [pc, #28]	; (dbbe0 <module_user_init_hook+0x50>)
   dbbc4:	f7ff f802 	bl	dabcc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbbc8:	2100      	movs	r1, #0
   dbbca:	4806      	ldr	r0, [pc, #24]	; (dbbe4 <module_user_init_hook+0x54>)
}
   dbbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbbd0:	f7fe bf5e 	b.w	daa90 <system_ctrl_set_app_request_handler>
   dbbd4:	2003f400 	.word	0x2003f400
   dbbd8:	9a271c1e 	.word	0x9a271c1e
   dbbdc:	2003e2d8 	.word	0x2003e2d8
   dbbe0:	00000000 	.word	0x00000000
   dbbe4:	000dbb59 	.word	0x000dbb59

000dbbe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbbe8:	4770      	bx	lr

000dbbea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dbbea:	2000      	movs	r0, #0
   dbbec:	4770      	bx	lr

000dbbee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbbee:	b510      	push	{r4, lr}
   dbbf0:	2110      	movs	r1, #16
   dbbf2:	4604      	mov	r4, r0
   dbbf4:	f001 fb5a 	bl	dd2ac <_ZdlPvj>
   dbbf8:	4620      	mov	r0, r4
   dbbfa:	bd10      	pop	{r4, pc}

000dbbfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dbbfc:	b508      	push	{r3, lr}
      { delete this; }
   dbbfe:	b108      	cbz	r0, dbc04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dbc00:	f7ff fff5 	bl	dbbee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dbc04:	bd08      	pop	{r3, pc}

000dbc06 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbc06:	2200      	movs	r2, #0
   dbc08:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dbc0a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbc0c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dbc10:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbc12:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dbc16:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc18:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbc1a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dbc1c:	680c      	ldr	r4, [r1, #0]
   dbc1e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dbc20:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dbc22:	bd10      	pop	{r4, pc}

000dbc24 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dbc24:	b510      	push	{r4, lr}
   dbc26:	4604      	mov	r4, r0
    free((void*)msg_);
   dbc28:	6800      	ldr	r0, [r0, #0]
   dbc2a:	f7fe ffdf 	bl	dabec <free>
}
   dbc2e:	4620      	mov	r0, r4
   dbc30:	bd10      	pop	{r4, pc}

000dbc32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dbc32:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dbc34:	68c4      	ldr	r4, [r0, #12]
   dbc36:	b1f4      	cbz	r4, dbc76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dbc38:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dbc3a:	2b02      	cmp	r3, #2
   dbc3c:	d103      	bne.n	dbc46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dbc3e:	f104 000c 	add.w	r0, r4, #12
   dbc42:	f7ff ffef 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dbc46:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dbc48:	b135      	cbz	r5, dbc58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbc4a:	4628      	mov	r0, r5
   dbc4c:	f7ff fed0 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
   dbc50:	2110      	movs	r1, #16
   dbc52:	4628      	mov	r0, r5
   dbc54:	f001 fb2a 	bl	dd2ac <_ZdlPvj>
   dbc58:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dbc5a:	b135      	cbz	r5, dbc6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dbc5c:	4628      	mov	r0, r5
   dbc5e:	f7ff fec7 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
   dbc62:	2110      	movs	r1, #16
   dbc64:	4628      	mov	r0, r5
   dbc66:	f001 fb21 	bl	dd2ac <_ZdlPvj>
   dbc6a:	4620      	mov	r0, r4
   dbc6c:	2114      	movs	r1, #20
   dbc6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbc72:	f001 bb1b 	b.w	dd2ac <_ZdlPvj>
   dbc76:	bd38      	pop	{r3, r4, r5, pc}

000dbc78 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dbc78:	b513      	push	{r0, r1, r4, lr}
   dbc7a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dbc7c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dbc80:	2300      	movs	r3, #0
   dbc82:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbc84:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dbc86:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbc88:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbc8a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbc8c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbc8e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbc90:	f7f9 fd8c 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbc94:	4620      	mov	r0, r4
   dbc96:	b002      	add	sp, #8
   dbc98:	bd10      	pop	{r4, pc}

000dbc9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dbc9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbc9c:	460c      	mov	r4, r1
   dbc9e:	ad02      	add	r5, sp, #8
   dbca0:	f854 3b04 	ldr.w	r3, [r4], #4
   dbca4:	f845 3d08 	str.w	r3, [r5, #-8]!
   dbca8:	4606      	mov	r6, r0
   dbcaa:	460f      	mov	r7, r1
   dbcac:	a801      	add	r0, sp, #4
   dbcae:	4621      	mov	r1, r4
   dbcb0:	f7ff fb38 	bl	db324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dbcb4:	4629      	mov	r1, r5
   dbcb6:	4630      	mov	r0, r6
   dbcb8:	f7ff ffde 	bl	dbc78 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbcbc:	a801      	add	r0, sp, #4
   dbcbe:	f7f9 fd75 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbcc2:	4620      	mov	r0, r4
   dbcc4:	f7f9 fd72 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dbcc8:	4638      	mov	r0, r7
   dbcca:	2108      	movs	r1, #8
   dbccc:	f001 faee 	bl	dd2ac <_ZdlPvj>
        return p;
    }
   dbcd0:	4630      	mov	r0, r6
   dbcd2:	b003      	add	sp, #12
   dbcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dbcd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbcd8:	b538      	push	{r3, r4, r5, lr}
   dbcda:	2300      	movs	r3, #0
   dbcdc:	4604      	mov	r4, r0
   dbcde:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbce0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbce2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbce4:	f7f8 f9d9 	bl	d409a <_Znwj>
   dbce8:	b128      	cbz	r0, dbcf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbcea:	2301      	movs	r3, #1
   dbcec:	6043      	str	r3, [r0, #4]
   dbcee:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dbcf0:	4b02      	ldr	r3, [pc, #8]	; (dbcfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dbcf2:	6003      	str	r3, [r0, #0]
   dbcf4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbcf6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dbcf8:	4620      	mov	r0, r4
   dbcfa:	bd38      	pop	{r3, r4, r5, pc}
   dbcfc:	000e80b4 	.word	0x000e80b4

000dbd00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbd00:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbd02:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbd04:	b90a      	cbnz	r2, dbd0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dbd06:	f001 fae4 	bl	dd2d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd0a:	68c3      	ldr	r3, [r0, #12]
    }
   dbd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd10:	4718      	bx	r3

000dbd12 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbd12:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbd14:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbd16:	f100 0110 	add.w	r1, r0, #16
   dbd1a:	f7ff fff1 	bl	dbd00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbd1e:	bd08      	pop	{r3, pc}

000dbd20 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbd20:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbd22:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbd24:	b90a      	cbnz	r2, dbd2a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dbd26:	f001 fad4 	bl	dd2d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd2a:	68c3      	ldr	r3, [r0, #12]
    }
   dbd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd30:	4718      	bx	r3

000dbd32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbd32:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbd34:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbd36:	f100 0110 	add.w	r1, r0, #16
   dbd3a:	f7ff fff1 	bl	dbd20 <_ZNKSt8functionIFvRKbEEclES1_>
   dbd3e:	bd08      	pop	{r3, pc}

000dbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbd40:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbd42:	2300      	movs	r3, #0
   dbd44:	6083      	str	r3, [r0, #8]
   dbd46:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbd48:	4604      	mov	r4, r0
   dbd4a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbd4c:	b12b      	cbz	r3, dbd5a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbd4e:	2202      	movs	r2, #2
   dbd50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbd52:	68eb      	ldr	r3, [r5, #12]
   dbd54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbd56:	68ab      	ldr	r3, [r5, #8]
   dbd58:	60a3      	str	r3, [r4, #8]
	}
    }
   dbd5a:	4620      	mov	r0, r4
   dbd5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dbd60:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbd62:	b089      	sub	sp, #36	; 0x24
   dbd64:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dbd66:	4668      	mov	r0, sp
   dbd68:	f7ff ff4d 	bl	dbc06 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dbd6c:	2300      	movs	r3, #0
   dbd6e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dbd72:	f04f 0202 	mov.w	r2, #2
   dbd76:	e8d4 3f4f 	ldrexb	r3, [r4]
   dbd7a:	2b00      	cmp	r3, #0
   dbd7c:	d103      	bne.n	dbd86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dbd7e:	e8c4 2f41 	strexb	r1, r2, [r4]
   dbd82:	2900      	cmp	r1, #0
   dbd84:	d1f7      	bne.n	dbd76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dbd86:	d002      	beq.n	dbd8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dbd88:	f88d 3008 	strb.w	r3, [sp, #8]
   dbd8c:	e063      	b.n	dbe56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dbd8e:	f114 050c 	adds.w	r5, r4, #12
   dbd92:	d003      	beq.n	dbd9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dbd94:	4669      	mov	r1, sp
   dbd96:	4628      	mov	r0, r5
   dbd98:	f7ff ff35 	bl	dbc06 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dbd9c:	f3bf 8f5f 	dmb	sy
   dbda0:	2301      	movs	r3, #1
   dbda2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dbda4:	2000      	movs	r0, #0
   dbda6:	f104 0308 	add.w	r3, r4, #8
   dbdaa:	f3bf 8f5f 	dmb	sy
   dbdae:	e853 6f00 	ldrex	r6, [r3]
   dbdb2:	e843 0200 	strex	r2, r0, [r3]
   dbdb6:	2a00      	cmp	r2, #0
   dbdb8:	d1f9      	bne.n	dbdae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dbdba:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dbdbe:	2e00      	cmp	r6, #0
   dbdc0:	d049      	beq.n	dbe56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dbdc2:	f7fe fe45 	bl	daa50 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dbdc6:	b120      	cbz	r0, dbdd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dbdc8:	4629      	mov	r1, r5
   dbdca:	4630      	mov	r0, r6
   dbdcc:	f7ff ff98 	bl	dbd00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbdd0:	e03a      	b.n	dbe48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dbdd2:	4631      	mov	r1, r6
   dbdd4:	a802      	add	r0, sp, #8
   dbdd6:	f7ff ffb3 	bl	dbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbdda:	68e0      	ldr	r0, [r4, #12]
   dbddc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbde0:	b108      	cbz	r0, dbde6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dbde2:	f007 ffab 	bl	e3d3c <strdup>
   dbde6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dbde8:	2010      	movs	r0, #16
   dbdea:	f8ad 501c 	strh.w	r5, [sp, #28]
   dbdee:	f7f8 f954 	bl	d409a <_Znwj>
   dbdf2:	4605      	mov	r5, r0
   dbdf4:	b1e8      	cbz	r0, dbe32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbdf6:	2700      	movs	r7, #0
   dbdf8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbdfa:	2018      	movs	r0, #24
   dbdfc:	f7f8 f94d 	bl	d409a <_Znwj>
   dbe00:	4604      	mov	r4, r0
   dbe02:	b188      	cbz	r0, dbe28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbe04:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbe06:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbe08:	a802      	add	r0, sp, #8
   dbe0a:	f7ff fe23 	bl	dba54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe0e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbe10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe14:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dbe16:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dbe18:	a906      	add	r1, sp, #24
   dbe1a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe1c:	60e3      	str	r3, [r4, #12]
   dbe1e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbe22:	9205      	str	r2, [sp, #20]
   dbe24:	f7ff feef 	bl	dbc06 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dbe28:	4b0d      	ldr	r3, [pc, #52]	; (dbe60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dbe2a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dbe2c:	4b0d      	ldr	r3, [pc, #52]	; (dbe64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbe2e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dbe30:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dbe32:	a806      	add	r0, sp, #24
   dbe34:	f7ff fef6 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbe38:	a802      	add	r0, sp, #8
   dbe3a:	f7ff fdd9 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dbe3e:	2200      	movs	r2, #0
   dbe40:	4629      	mov	r1, r5
   dbe42:	4809      	ldr	r0, [pc, #36]	; (dbe68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dbe44:	f7fe fe0c 	bl	daa60 <application_thread_invoke>
   dbe48:	4630      	mov	r0, r6
   dbe4a:	f7ff fdd1 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dbe4e:	2110      	movs	r1, #16
   dbe50:	4630      	mov	r0, r6
   dbe52:	f001 fa2b 	bl	dd2ac <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dbe56:	4668      	mov	r0, sp
   dbe58:	f7ff fee4 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
    }
   dbe5c:	b009      	add	sp, #36	; 0x24
   dbe5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbe60:	000dbd13 	.word	0x000dbd13
   dbe64:	000dbf89 	.word	0x000dbf89
   dbe68:	000dc4f5 	.word	0x000dc4f5

000dbe6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dbe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe70:	b08b      	sub	sp, #44	; 0x2c
   dbe72:	4606      	mov	r6, r0
   dbe74:	460f      	mov	r7, r1
   dbe76:	4690      	mov	r8, r2
   dbe78:	4699      	mov	r9, r3
   dbe7a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dbe7e:	f7fe fe85 	bl	dab8c <spark_cloud_flag_connected>
   dbe82:	ad07      	add	r5, sp, #28
    if (!connected()) {
   dbe84:	4683      	mov	fp, r0
   dbe86:	bb30      	cbnz	r0, dbed6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbe88:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dbe8c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbe8e:	a905      	add	r1, sp, #20
   dbe90:	4628      	mov	r0, r5
   dbe92:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbe96:	f7ff feb6 	bl	dbc06 <_ZN8particle5ErrorC1EOS0_>
   dbe9a:	2014      	movs	r0, #20
   dbe9c:	f7f8 f8fd 	bl	d409a <_Znwj>
   dbea0:	4604      	mov	r4, r0
   dbea2:	b158      	cbz	r0, dbebc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dbea4:	2302      	movs	r3, #2
   dbea6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbea8:	2301      	movs	r3, #1
   dbeaa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbeac:	f8c0 b004 	str.w	fp, [r0, #4]
   dbeb0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dbeb4:	4629      	mov	r1, r5
   dbeb6:	300c      	adds	r0, #12
   dbeb8:	f7ff fea5 	bl	dbc06 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dbebc:	4630      	mov	r0, r6
   dbebe:	4621      	mov	r1, r4
   dbec0:	f840 4b04 	str.w	r4, [r0], #4
   dbec4:	f7ff ff08 	bl	dbcd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbec8:	4628      	mov	r0, r5
   dbeca:	f7ff feab 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dbece:	a805      	add	r0, sp, #20
   dbed0:	f7ff fea8 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
   dbed4:	e052      	b.n	dbf7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dbed6:	2400      	movs	r4, #0
   dbed8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dbeda:	2014      	movs	r0, #20
   dbedc:	606c      	str	r4, [r5, #4]
   dbede:	60ac      	str	r4, [r5, #8]
   dbee0:	9307      	str	r3, [sp, #28]
   dbee2:	f7f8 f8da 	bl	d409a <_Znwj>
   dbee6:	4601      	mov	r1, r0
   dbee8:	b118      	cbz	r0, dbef2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dbeea:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbeec:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbeee:	6044      	str	r4, [r0, #4]
   dbef0:	6084      	str	r4, [r0, #8]
   dbef2:	a804      	add	r0, sp, #16
   dbef4:	9103      	str	r1, [sp, #12]
   dbef6:	f7ff feef 	bl	dbcd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dbefa:	4b22      	ldr	r3, [pc, #136]	; (dbf84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dbefc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dbefe:	2008      	movs	r0, #8
   dbf00:	f7f8 f8cb 	bl	d409a <_Znwj>
   dbf04:	4604      	mov	r4, r0
   dbf06:	b128      	cbz	r0, dbf14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbf08:	9b03      	ldr	r3, [sp, #12]
   dbf0a:	f840 3b04 	str.w	r3, [r0], #4
   dbf0e:	a904      	add	r1, sp, #16
   dbf10:	f7ff fa08 	bl	db324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbf14:	9500      	str	r5, [sp, #0]
   dbf16:	fa5f f38a 	uxtb.w	r3, sl
   dbf1a:	464a      	mov	r2, r9
   dbf1c:	4641      	mov	r1, r8
   dbf1e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dbf20:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbf22:	f7fe fe3b 	bl	dab9c <spark_send_event>
   dbf26:	b920      	cbnz	r0, dbf32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dbf28:	9b03      	ldr	r3, [sp, #12]
   dbf2a:	785b      	ldrb	r3, [r3, #1]
   dbf2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dbf30:	b183      	cbz	r3, dbf54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dbf32:	9b03      	ldr	r3, [sp, #12]
   dbf34:	9305      	str	r3, [sp, #20]
   dbf36:	a904      	add	r1, sp, #16
   dbf38:	a806      	add	r0, sp, #24
   dbf3a:	f7ff f9f3 	bl	db324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dbf3e:	a905      	add	r1, sp, #20
   dbf40:	4630      	mov	r0, r6
   dbf42:	f7ff fe99 	bl	dbc78 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbf46:	a806      	add	r0, sp, #24
   dbf48:	f7f9 fc30 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbf4c:	a804      	add	r0, sp, #16
   dbf4e:	f7f9 fc2d 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbf52:	e013      	b.n	dbf7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dbf54:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dbf58:	a905      	add	r1, sp, #20
   dbf5a:	a803      	add	r0, sp, #12
   dbf5c:	9205      	str	r2, [sp, #20]
   dbf5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbf62:	f7ff fefd 	bl	dbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dbf66:	a805      	add	r0, sp, #20
   dbf68:	f7ff fe5c 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dbf6c:	a805      	add	r0, sp, #20
   dbf6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbf70:	f7ff fe93 	bl	dbc9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dbf74:	a806      	add	r0, sp, #24
   dbf76:	f7f9 fc19 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbf7a:	e7da      	b.n	dbf32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dbf7c:	4630      	mov	r0, r6
   dbf7e:	b00b      	add	sp, #44	; 0x2c
   dbf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf84:	000dc0f9 	.word	0x000dc0f9

000dbf88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dbf88:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dbf8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbf8c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dbf8e:	d006      	beq.n	dbf9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dbf90:	2a03      	cmp	r2, #3
   dbf92:	d017      	beq.n	dbfc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dbf94:	2a01      	cmp	r2, #1
   dbf96:	d122      	bne.n	dbfde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbf98:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dbf9a:	6003      	str	r3, [r0, #0]
	      break;
   dbf9c:	e01f      	b.n	dbfde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbf9e:	2018      	movs	r0, #24
   dbfa0:	680e      	ldr	r6, [r1, #0]
   dbfa2:	f7f8 f87a 	bl	d409a <_Znwj>
   dbfa6:	4605      	mov	r5, r0
   dbfa8:	b150      	cbz	r0, dbfc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dbfaa:	4631      	mov	r1, r6
   dbfac:	f7ff fec8 	bl	dbd40 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbfb0:	6930      	ldr	r0, [r6, #16]
   dbfb2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbfb6:	b108      	cbz	r0, dbfbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dbfb8:	f007 fec0 	bl	e3d3c <strdup>
   dbfbc:	6128      	str	r0, [r5, #16]
   dbfbe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbfc0:	6025      	str	r5, [r4, #0]
   dbfc2:	e00c      	b.n	dbfde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbfc4:	6804      	ldr	r4, [r0, #0]
   dbfc6:	b154      	cbz	r4, dbfde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dbfc8:	f104 0010 	add.w	r0, r4, #16
   dbfcc:	f7ff fe2a 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbfd0:	4620      	mov	r0, r4
   dbfd2:	f7ff fd0d 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbfd6:	2118      	movs	r1, #24
   dbfd8:	4620      	mov	r0, r4
   dbfda:	f001 f967 	bl	dd2ac <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dbfde:	2000      	movs	r0, #0
   dbfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbfe2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbfe2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbfe4:	2300      	movs	r3, #0
   dbfe6:	6083      	str	r3, [r0, #8]
   dbfe8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbfea:	4604      	mov	r4, r0
   dbfec:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbfee:	b12b      	cbz	r3, dbffc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbff0:	2202      	movs	r2, #2
   dbff2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbff4:	68eb      	ldr	r3, [r5, #12]
   dbff6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbff8:	68ab      	ldr	r3, [r5, #8]
   dbffa:	60a3      	str	r3, [r4, #8]
	}
    }
   dbffc:	4620      	mov	r0, r4
   dbffe:	bd38      	pop	{r3, r4, r5, pc}

000dc000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dc000:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc002:	b570      	push	{r4, r5, r6, lr}
   dc004:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dc006:	d006      	beq.n	dc016 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dc008:	2a03      	cmp	r2, #3
   dc00a:	d011      	beq.n	dc030 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dc00c:	2a01      	cmp	r2, #1
   dc00e:	d118      	bne.n	dc042 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dc010:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dc012:	6003      	str	r3, [r0, #0]
	      break;
   dc014:	e015      	b.n	dc042 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc016:	2014      	movs	r0, #20
   dc018:	680e      	ldr	r6, [r1, #0]
   dc01a:	f7f8 f83e 	bl	d409a <_Znwj>
   dc01e:	4605      	mov	r5, r0
   dc020:	b120      	cbz	r0, dc02c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dc022:	4631      	mov	r1, r6
   dc024:	f7ff ffdd 	bl	dbfe2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dc028:	7c33      	ldrb	r3, [r6, #16]
   dc02a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc02c:	6025      	str	r5, [r4, #0]
   dc02e:	e008      	b.n	dc042 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc030:	6804      	ldr	r4, [r0, #0]
   dc032:	b134      	cbz	r4, dc042 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc034:	4620      	mov	r0, r4
   dc036:	f7ff fcdb 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc03a:	2114      	movs	r1, #20
   dc03c:	4620      	mov	r0, r4
   dc03e:	f001 f935 	bl	dd2ac <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dc042:	2000      	movs	r0, #0
   dc044:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc048 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dc048:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dc04a:	2300      	movs	r3, #0
   dc04c:	b087      	sub	sp, #28
   dc04e:	460c      	mov	r4, r1
   dc050:	f3bf 8f5f 	dmb	sy
   dc054:	e850 6f00 	ldrex	r6, [r0]
   dc058:	e840 3200 	strex	r2, r3, [r0]
   dc05c:	2a00      	cmp	r2, #0
   dc05e:	d1f9      	bne.n	dc054 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dc060:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dc064:	2e00      	cmp	r6, #0
   dc066:	d03f      	beq.n	dc0e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dc068:	4618      	mov	r0, r3
   dc06a:	f7fe fcf1 	bl	daa50 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dc06e:	4607      	mov	r7, r0
   dc070:	b120      	cbz	r0, dc07c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dc072:	4621      	mov	r1, r4
   dc074:	4630      	mov	r0, r6
   dc076:	f7ff fe53 	bl	dbd20 <_ZNKSt8functionIFvRKbEEclES1_>
   dc07a:	e02e      	b.n	dc0da <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dc07c:	4631      	mov	r1, r6
   dc07e:	a801      	add	r0, sp, #4
   dc080:	f7ff ffaf 	bl	dbfe2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dc084:	7823      	ldrb	r3, [r4, #0]
   dc086:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dc08a:	2010      	movs	r0, #16
   dc08c:	f7f8 f805 	bl	d409a <_Znwj>
   dc090:	4605      	mov	r5, r0
   dc092:	b1d0      	cbz	r0, dc0ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc094:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc096:	2014      	movs	r0, #20
   dc098:	f7f7 ffff 	bl	d409a <_Znwj>
   dc09c:	4604      	mov	r4, r0
   dc09e:	b178      	cbz	r0, dc0c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc0a0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dc0a2:	4601      	mov	r1, r0
   dc0a4:	a801      	add	r0, sp, #4
   dc0a6:	f7ff fcd5 	bl	dba54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc0aa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc0ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc0ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc0b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc0b2:	9203      	str	r2, [sp, #12]
   dc0b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc0b6:	60e3      	str	r3, [r4, #12]
   dc0b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dc0bc:	9204      	str	r2, [sp, #16]
   dc0be:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dc0c0:	4b0a      	ldr	r3, [pc, #40]	; (dc0ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dc0c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc0c4:	4b0a      	ldr	r3, [pc, #40]	; (dc0f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc0c6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dc0c8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc0ca:	a801      	add	r0, sp, #4
   dc0cc:	f7ff fc90 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc0d0:	2200      	movs	r2, #0
   dc0d2:	4629      	mov	r1, r5
   dc0d4:	4807      	ldr	r0, [pc, #28]	; (dc0f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dc0d6:	f7fe fcc3 	bl	daa60 <application_thread_invoke>
   dc0da:	4630      	mov	r0, r6
   dc0dc:	f7ff fc88 	bl	db9f0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dc0e0:	2110      	movs	r1, #16
   dc0e2:	4630      	mov	r0, r6
   dc0e4:	f001 f8e2 	bl	dd2ac <_ZdlPvj>
        }
    }
   dc0e8:	b007      	add	sp, #28
   dc0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc0ec:	000dbd33 	.word	0x000dbd33
   dc0f0:	000dc001 	.word	0x000dc001
   dc0f4:	000dc4f5 	.word	0x000dc4f5

000dc0f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dc0f8:	b530      	push	{r4, r5, lr}
   dc0fa:	b085      	sub	sp, #20
   dc0fc:	4604      	mov	r4, r0
   dc0fe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dc100:	4668      	mov	r0, sp
   dc102:	4611      	mov	r1, r2
   dc104:	f7ff fdc9 	bl	dbc9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dc108:	b17c      	cbz	r4, dc12a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dc10a:	b224      	sxth	r4, r4
   dc10c:	4628      	mov	r0, r5
   dc10e:	b10d      	cbz	r5, dc114 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dc110:	f007 fe14 	bl	e3d3c <strdup>
   dc114:	9002      	str	r0, [sp, #8]
   dc116:	a902      	add	r1, sp, #8
   dc118:	4668      	mov	r0, sp
   dc11a:	f8ad 400c 	strh.w	r4, [sp, #12]
   dc11e:	f7ff fe1f 	bl	dbd60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc122:	a802      	add	r0, sp, #8
   dc124:	f7ff fd7e 	bl	dbc24 <_ZN8particle5ErrorD1Ev>
   dc128:	e01d      	b.n	dc166 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dc12a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dc12c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dc130:	f04f 0201 	mov.w	r2, #1
   dc134:	e8d0 3f4f 	ldrexb	r3, [r0]
   dc138:	42a3      	cmp	r3, r4
   dc13a:	d103      	bne.n	dc144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dc13c:	e8c0 2f41 	strexb	r1, r2, [r0]
   dc140:	2900      	cmp	r1, #0
   dc142:	d1f7      	bne.n	dc134 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dc144:	d002      	beq.n	dc14c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dc146:	f88d 3008 	strb.w	r3, [sp, #8]
   dc14a:	e00c      	b.n	dc166 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dc14c:	f110 010c 	adds.w	r1, r0, #12
   dc150:	f04f 0301 	mov.w	r3, #1
   dc154:	bf18      	it	ne
   dc156:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dc158:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dc15c:	3004      	adds	r0, #4
   dc15e:	f800 3c03 	strb.w	r3, [r0, #-3]
   dc162:	f7ff ff71 	bl	dc048 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dc166:	a801      	add	r0, sp, #4
   dc168:	f7f9 fb20 	bl	d57ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dc16c:	b005      	add	sp, #20
   dc16e:	bd30      	pop	{r4, r5, pc}

000dc170 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dc170:	4770      	bx	lr

000dc172 <_ZN9IPAddressD0Ev>:
   dc172:	b510      	push	{r4, lr}
   dc174:	2118      	movs	r1, #24
   dc176:	4604      	mov	r4, r0
   dc178:	f001 f898 	bl	dd2ac <_ZdlPvj>
   dc17c:	4620      	mov	r0, r4
   dc17e:	bd10      	pop	{r4, pc}

000dc180 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dc180:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dc182:	7d03      	ldrb	r3, [r0, #20]
   dc184:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dc186:	b08d      	sub	sp, #52	; 0x34
   dc188:	460e      	mov	r6, r1
   dc18a:	f100 0704 	add.w	r7, r0, #4
   dc18e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dc192:	d002      	beq.n	dc19a <_ZNK9IPAddress7printToER5Print+0x1a>
   dc194:	f100 0508 	add.w	r5, r0, #8
   dc198:	e018      	b.n	dc1cc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dc19a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dc19c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dc19e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dc1a2:	232f      	movs	r3, #47	; 0x2f
   dc1a4:	462a      	mov	r2, r5
   dc1a6:	200a      	movs	r0, #10
   dc1a8:	f7fe faa8 	bl	da6fc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dc1ac:	4628      	mov	r0, r5
   dc1ae:	f008 faf5 	bl	e479c <strlen>
   dc1b2:	6833      	ldr	r3, [r6, #0]
   dc1b4:	4602      	mov	r2, r0
   dc1b6:	68db      	ldr	r3, [r3, #12]
   dc1b8:	4629      	mov	r1, r5
   dc1ba:	4630      	mov	r0, r6
   dc1bc:	4798      	blx	r3
   dc1be:	e00f      	b.n	dc1e0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dc1c0:	b124      	cbz	r4, dc1cc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dc1c2:	212e      	movs	r1, #46	; 0x2e
   dc1c4:	4630      	mov	r0, r6
   dc1c6:	f7ff f8f3 	bl	db3b0 <_ZN5Print5printEc>
   dc1ca:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dc1cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dc1d0:	220a      	movs	r2, #10
   dc1d2:	4630      	mov	r0, r6
   dc1d4:	f7ff f905 	bl	db3e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc1d8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc1da:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc1dc:	d1f0      	bne.n	dc1c0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc1de:	4620      	mov	r0, r4
    }
    return n;
}
   dc1e0:	b00d      	add	sp, #52	; 0x34
   dc1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc1e4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dc1e4:	b510      	push	{r4, lr}
   dc1e6:	4b05      	ldr	r3, [pc, #20]	; (dc1fc <_ZN9IPAddressC1Ev+0x18>)
   dc1e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dc1ea:	2211      	movs	r2, #17
   dc1ec:	f840 3b04 	str.w	r3, [r0], #4
   dc1f0:	2100      	movs	r1, #0
   dc1f2:	f007 fb12 	bl	e381a <memset>
{
    clear();
}
   dc1f6:	4620      	mov	r0, r4
   dc1f8:	bd10      	pop	{r4, pc}
   dc1fa:	bf00      	nop
   dc1fc:	000e80d0 	.word	0x000e80d0

000dc200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dc200:	4603      	mov	r3, r0
   dc202:	4a07      	ldr	r2, [pc, #28]	; (dc220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dc204:	b510      	push	{r4, lr}
   dc206:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dc20a:	f101 0210 	add.w	r2, r1, #16
   dc20e:	f851 4b04 	ldr.w	r4, [r1], #4
   dc212:	f843 4b04 	str.w	r4, [r3], #4
   dc216:	4291      	cmp	r1, r2
   dc218:	d1f9      	bne.n	dc20e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dc21a:	780a      	ldrb	r2, [r1, #0]
   dc21c:	701a      	strb	r2, [r3, #0]
}
   dc21e:	bd10      	pop	{r4, pc}
   dc220:	000e80d0 	.word	0x000e80d0

000dc224 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dc224:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dc226:	2b04      	cmp	r3, #4
   dc228:	d101      	bne.n	dc22e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dc22a:	6840      	ldr	r0, [r0, #4]
   dc22c:	e008      	b.n	dc240 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dc22e:	2b06      	cmp	r3, #6
   dc230:	d10a      	bne.n	dc248 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc232:	6843      	ldr	r3, [r0, #4]
   dc234:	b953      	cbnz	r3, dc24c <_ZNK9IPAddresscvbEv+0x28>
   dc236:	6883      	ldr	r3, [r0, #8]
   dc238:	b943      	cbnz	r3, dc24c <_ZNK9IPAddresscvbEv+0x28>
   dc23a:	68c3      	ldr	r3, [r0, #12]
   dc23c:	b933      	cbnz	r3, dc24c <_ZNK9IPAddresscvbEv+0x28>
   dc23e:	6900      	ldr	r0, [r0, #16]
   dc240:	3000      	adds	r0, #0
   dc242:	bf18      	it	ne
   dc244:	2001      	movne	r0, #1
   dc246:	4770      	bx	lr
    } else {
        return false;
   dc248:	2000      	movs	r0, #0
   dc24a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc24c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dc24e:	4770      	bx	lr

000dc250 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dc250:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dc252:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dc256:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dc25a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dc25e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dc262:	2304      	movs	r3, #4
   dc264:	6041      	str	r1, [r0, #4]
   dc266:	7503      	strb	r3, [r0, #20]
   dc268:	bd10      	pop	{r4, pc}

000dc26a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dc26a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dc26c:	780d      	ldrb	r5, [r1, #0]
   dc26e:	788b      	ldrb	r3, [r1, #2]
   dc270:	784a      	ldrb	r2, [r1, #1]
   dc272:	78c9      	ldrb	r1, [r1, #3]
   dc274:	9100      	str	r1, [sp, #0]
   dc276:	4629      	mov	r1, r5
   dc278:	f7ff ffea 	bl	dc250 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dc27c:	b003      	add	sp, #12
   dc27e:	bd30      	pop	{r4, r5, pc}

000dc280 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc280:	7441      	strb	r1, [r0, #17]
   dc282:	4770      	bx	lr

000dc284 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dc284:	4770      	bx	lr

000dc286 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dc286:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dc288:	2100      	movs	r1, #0
   dc28a:	7c00      	ldrb	r0, [r0, #16]
   dc28c:	f7fe fb66 	bl	da95c <HAL_USB_USART_Receive_Data>
}
   dc290:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc294:	bf28      	it	cs
   dc296:	f04f 30ff 	movcs.w	r0, #4294967295
   dc29a:	bd08      	pop	{r3, pc}

000dc29c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dc29c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dc29e:	2101      	movs	r1, #1
   dc2a0:	7c00      	ldrb	r0, [r0, #16]
   dc2a2:	f7fe fb5b 	bl	da95c <HAL_USB_USART_Receive_Data>
}
   dc2a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc2aa:	bf28      	it	cs
   dc2ac:	f04f 30ff 	movcs.w	r0, #4294967295
   dc2b0:	bd08      	pop	{r3, pc}

000dc2b2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dc2b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dc2b4:	7c00      	ldrb	r0, [r0, #16]
   dc2b6:	f7fe fb49 	bl	da94c <HAL_USB_USART_Available_Data_For_Write>
}
   dc2ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc2be:	bd08      	pop	{r3, pc}

000dc2c0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dc2c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dc2c2:	7c00      	ldrb	r0, [r0, #16]
   dc2c4:	f7fe fb3a 	bl	da93c <HAL_USB_USART_Available_Data>
}
   dc2c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc2cc:	bd08      	pop	{r3, pc}

000dc2ce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dc2ce:	7c00      	ldrb	r0, [r0, #16]
   dc2d0:	f7fe bb54 	b.w	da97c <HAL_USB_USART_Flush_Data>

000dc2d4 <_ZN9USBSerialD0Ev>:
   dc2d4:	b510      	push	{r4, lr}
   dc2d6:	2114      	movs	r1, #20
   dc2d8:	4604      	mov	r4, r0
   dc2da:	f000 ffe7 	bl	dd2ac <_ZdlPvj>
   dc2de:	4620      	mov	r0, r4
   dc2e0:	bd10      	pop	{r4, pc}

000dc2e2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc2e2:	b538      	push	{r3, r4, r5, lr}
   dc2e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc2e6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc2e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc2ea:	f7fe fb2f 	bl	da94c <HAL_USB_USART_Available_Data_For_Write>
   dc2ee:	2800      	cmp	r0, #0
   dc2f0:	dc01      	bgt.n	dc2f6 <_ZN9USBSerial5writeEh+0x14>
   dc2f2:	7c60      	ldrb	r0, [r4, #17]
   dc2f4:	b128      	cbz	r0, dc302 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dc2f6:	4629      	mov	r1, r5
   dc2f8:	7c20      	ldrb	r0, [r4, #16]
   dc2fa:	f7fe fb37 	bl	da96c <HAL_USB_USART_Send_Data>
   dc2fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dc302:	bd38      	pop	{r3, r4, r5, pc}

000dc304 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc304:	b510      	push	{r4, lr}
   dc306:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dc308:	2300      	movs	r3, #0
   dc30a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dc30c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc310:	60a3      	str	r3, [r4, #8]
   dc312:	4b05      	ldr	r3, [pc, #20]	; (dc328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dc314:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dc316:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc318:	4608      	mov	r0, r1
{
  _serial = serial;
   dc31a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dc31c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dc31e:	4611      	mov	r1, r2
   dc320:	f7fe fafc 	bl	da91c <HAL_USB_USART_Init>
}
   dc324:	4620      	mov	r0, r4
   dc326:	bd10      	pop	{r4, pc}
   dc328:	000e80e4 	.word	0x000e80e4

000dc32c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dc32c:	2200      	movs	r2, #0
   dc32e:	7c00      	ldrb	r0, [r0, #16]
   dc330:	f7fe bafc 	b.w	da92c <HAL_USB_USART_Begin>

000dc334 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc334:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dc336:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc338:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dc33a:	2100      	movs	r1, #0
   dc33c:	f007 fa6d 	bl	e381a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dc340:	4620      	mov	r0, r4
   dc342:	bd10      	pop	{r4, pc}

000dc344 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dc344:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc346:	4d0e      	ldr	r5, [pc, #56]	; (dc380 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dc348:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dc34a:	a801      	add	r0, sp, #4
   dc34c:	f7ff fff2 	bl	dc334 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc350:	6829      	ldr	r1, [r5, #0]
   dc352:	f011 0401 	ands.w	r4, r1, #1
   dc356:	d110      	bne.n	dc37a <_Z16_fetch_usbserialv+0x36>
   dc358:	4628      	mov	r0, r5
   dc35a:	f7f7 fea4 	bl	d40a6 <__cxa_guard_acquire>
   dc35e:	b160      	cbz	r0, dc37a <_Z16_fetch_usbserialv+0x36>
   dc360:	aa01      	add	r2, sp, #4
   dc362:	4621      	mov	r1, r4
   dc364:	4807      	ldr	r0, [pc, #28]	; (dc384 <_Z16_fetch_usbserialv+0x40>)
   dc366:	f7ff ffcd 	bl	dc304 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dc36a:	4628      	mov	r0, r5
   dc36c:	f7f7 fea0 	bl	d40b0 <__cxa_guard_release>
   dc370:	4a05      	ldr	r2, [pc, #20]	; (dc388 <_Z16_fetch_usbserialv+0x44>)
   dc372:	4906      	ldr	r1, [pc, #24]	; (dc38c <_Z16_fetch_usbserialv+0x48>)
   dc374:	4803      	ldr	r0, [pc, #12]	; (dc384 <_Z16_fetch_usbserialv+0x40>)
   dc376:	f000 ff8b 	bl	dd290 <__aeabi_atexit>
	return _usbserial;
}
   dc37a:	4802      	ldr	r0, [pc, #8]	; (dc384 <_Z16_fetch_usbserialv+0x40>)
   dc37c:	b007      	add	sp, #28
   dc37e:	bd30      	pop	{r4, r5, pc}
   dc380:	2003e2dc 	.word	0x2003e2dc
   dc384:	2003e2e0 	.word	0x2003e2e0
   dc388:	2003d6b0 	.word	0x2003d6b0
   dc38c:	000dc285 	.word	0x000dc285

000dc390 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dc390:	4700      	bx	r0
	...

000dc394 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dc394:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc396:	b085      	sub	sp, #20
   dc398:	461c      	mov	r4, r3
   dc39a:	460e      	mov	r6, r1
   dc39c:	4617      	mov	r7, r2
   dc39e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   dc3a0:	f7fe f8fc 	bl	da59c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   dc3a4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   dc3a6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc3a8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dc3ac:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc3ae:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dc3b2:	bfa5      	ittet	ge
   dc3b4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dc3b8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dc3bc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dc3be:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc3c0:	9300      	str	r3, [sp, #0]
   dc3c2:	4632      	mov	r2, r6
   dc3c4:	463b      	mov	r3, r7
   dc3c6:	4906      	ldr	r1, [pc, #24]	; (dc3e0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dc3c8:	bfa8      	it	ge
   dc3ca:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc3ce:	4628      	mov	r0, r5
   dc3d0:	f7fe f8dc 	bl	da58c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dc3d4:	fab0 f080 	clz	r0, r0
   dc3d8:	0940      	lsrs	r0, r0, #5
   dc3da:	b005      	add	sp, #20
   dc3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc3de:	bf00      	nop
   dc3e0:	000dc391 	.word	0x000dc391

000dc3e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dc3e4:	4770      	bx	lr

000dc3e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc3e6:	7441      	strb	r1, [r0, #17]
   dc3e8:	4770      	bx	lr

000dc3ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dc3ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dc3ec:	7c00      	ldrb	r0, [r0, #16]
   dc3ee:	f7fe f9d5 	bl	da79c <HAL_USART_Available_Data_For_Write>
}
   dc3f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc3f6:	bd08      	pop	{r3, pc}

000dc3f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dc3f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dc3fa:	7c00      	ldrb	r0, [r0, #16]
   dc3fc:	f7fe f9a6 	bl	da74c <HAL_USART_Available_Data>
}
   dc400:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc404:	bd08      	pop	{r3, pc}

000dc406 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dc406:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dc408:	7c00      	ldrb	r0, [r0, #16]
   dc40a:	f7fe f9af 	bl	da76c <HAL_USART_Peek_Data>
}
   dc40e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc412:	bf28      	it	cs
   dc414:	f04f 30ff 	movcs.w	r0, #4294967295
   dc418:	bd08      	pop	{r3, pc}

000dc41a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dc41a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dc41c:	7c00      	ldrb	r0, [r0, #16]
   dc41e:	f7fe f99d 	bl	da75c <HAL_USART_Read_Data>
}
   dc422:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc426:	bf28      	it	cs
   dc428:	f04f 30ff 	movcs.w	r0, #4294967295
   dc42c:	bd08      	pop	{r3, pc}

000dc42e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dc42e:	7c00      	ldrb	r0, [r0, #16]
   dc430:	f7fe b9a4 	b.w	da77c <HAL_USART_Flush_Data>

000dc434 <_ZN11USARTSerialD0Ev>:
   dc434:	b510      	push	{r4, lr}
   dc436:	2114      	movs	r1, #20
   dc438:	4604      	mov	r4, r0
   dc43a:	f000 ff37 	bl	dd2ac <_ZdlPvj>
   dc43e:	4620      	mov	r0, r4
   dc440:	bd10      	pop	{r4, pc}

000dc442 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dc442:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc444:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dc446:	4604      	mov	r4, r0
   dc448:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc44a:	b925      	cbnz	r5, dc456 <_ZN11USARTSerial5writeEh+0x14>
   dc44c:	7c00      	ldrb	r0, [r0, #16]
   dc44e:	f7fe f9a5 	bl	da79c <HAL_USART_Available_Data_For_Write>
   dc452:	2800      	cmp	r0, #0
   dc454:	dd05      	ble.n	dc462 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc456:	4631      	mov	r1, r6
   dc458:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dc45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc45e:	f7fe b96d 	b.w	da73c <HAL_USART_Write_Data>
  }
  return 0;
}
   dc462:	4628      	mov	r0, r5
   dc464:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dc468:	b510      	push	{r4, lr}
   dc46a:	4604      	mov	r4, r0
   dc46c:	4608      	mov	r0, r1
   dc46e:	4611      	mov	r1, r2
   dc470:	2200      	movs	r2, #0
   dc472:	6062      	str	r2, [r4, #4]
   dc474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc478:	60a2      	str	r2, [r4, #8]
   dc47a:	4a05      	ldr	r2, [pc, #20]	; (dc490 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dc47c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dc47e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dc480:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dc482:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dc484:	461a      	mov	r2, r3
   dc486:	f7fe f951 	bl	da72c <HAL_USART_Init>
}
   dc48a:	4620      	mov	r0, r4
   dc48c:	bd10      	pop	{r4, pc}
   dc48e:	bf00      	nop
   dc490:	000e8114 	.word	0x000e8114

000dc494 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dc494:	2300      	movs	r3, #0
   dc496:	7c00      	ldrb	r0, [r0, #16]
   dc498:	f7fe b988 	b.w	da7ac <HAL_USART_BeginConfig>

000dc49c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dc49c:	2200      	movs	r2, #0
   dc49e:	f7ff bff9 	b.w	dc494 <_ZN11USARTSerial5beginEmm>

000dc4a2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dc4a2:	7c00      	ldrb	r0, [r0, #16]
   dc4a4:	f7fe b972 	b.w	da78c <HAL_USART_Is_Enabled>

000dc4a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dc4a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dc4aa:	4d0c      	ldr	r5, [pc, #48]	; (dc4dc <_Z22__fetch_global_Serial1v+0x34>)
   dc4ac:	6829      	ldr	r1, [r5, #0]
   dc4ae:	f011 0401 	ands.w	r4, r1, #1
   dc4b2:	d111      	bne.n	dc4d8 <_Z22__fetch_global_Serial1v+0x30>
   dc4b4:	4628      	mov	r0, r5
   dc4b6:	f7f7 fdf6 	bl	d40a6 <__cxa_guard_acquire>
   dc4ba:	b168      	cbz	r0, dc4d8 <_Z22__fetch_global_Serial1v+0x30>
   dc4bc:	4a08      	ldr	r2, [pc, #32]	; (dc4e0 <_Z22__fetch_global_Serial1v+0x38>)
   dc4be:	4b09      	ldr	r3, [pc, #36]	; (dc4e4 <_Z22__fetch_global_Serial1v+0x3c>)
   dc4c0:	4809      	ldr	r0, [pc, #36]	; (dc4e8 <_Z22__fetch_global_Serial1v+0x40>)
   dc4c2:	4621      	mov	r1, r4
   dc4c4:	f7ff ffd0 	bl	dc468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dc4c8:	4628      	mov	r0, r5
   dc4ca:	f7f7 fdf1 	bl	d40b0 <__cxa_guard_release>
   dc4ce:	4a07      	ldr	r2, [pc, #28]	; (dc4ec <_Z22__fetch_global_Serial1v+0x44>)
   dc4d0:	4907      	ldr	r1, [pc, #28]	; (dc4f0 <_Z22__fetch_global_Serial1v+0x48>)
   dc4d2:	4805      	ldr	r0, [pc, #20]	; (dc4e8 <_Z22__fetch_global_Serial1v+0x40>)
   dc4d4:	f000 fedc 	bl	dd290 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dc4d8:	4803      	ldr	r0, [pc, #12]	; (dc4e8 <_Z22__fetch_global_Serial1v+0x40>)
   dc4da:	bd38      	pop	{r3, r4, r5, pc}
   dc4dc:	2003e38c 	.word	0x2003e38c
   dc4e0:	2003e390 	.word	0x2003e390
   dc4e4:	2003e308 	.word	0x2003e308
   dc4e8:	2003e2f4 	.word	0x2003e2f4
   dc4ec:	2003d6b0 	.word	0x2003d6b0
   dc4f0:	000dc3e5 	.word	0x000dc3e5

000dc4f4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dc4f4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc4f6:	6883      	ldr	r3, [r0, #8]
   dc4f8:	4604      	mov	r4, r0
   dc4fa:	b90b      	cbnz	r3, dc500 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dc4fc:	f000 fee9 	bl	dd2d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc500:	68c3      	ldr	r3, [r0, #12]
   dc502:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc504:	68a3      	ldr	r3, [r4, #8]
   dc506:	b11b      	cbz	r3, dc510 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc508:	2203      	movs	r2, #3
   dc50a:	4621      	mov	r1, r4
   dc50c:	4620      	mov	r0, r4
   dc50e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc510:	4620      	mov	r0, r4
   dc512:	2110      	movs	r1, #16
}
   dc514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc518:	f000 bec8 	b.w	dd2ac <_ZdlPvj>

000dc51c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   dc51c:	4770      	bx	lr

000dc51e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dc51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc520:	4606      	mov	r6, r0
   dc522:	4615      	mov	r5, r2
   dc524:	460c      	mov	r4, r1
   dc526:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc528:	42bc      	cmp	r4, r7
   dc52a:	d006      	beq.n	dc53a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dc52c:	6833      	ldr	r3, [r6, #0]
   dc52e:	f814 1b01 	ldrb.w	r1, [r4], #1
   dc532:	689b      	ldr	r3, [r3, #8]
   dc534:	4630      	mov	r0, r6
   dc536:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc538:	e7f6      	b.n	dc528 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dc53a:	4628      	mov	r0, r5
   dc53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc53e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dc53e:	2200      	movs	r2, #0
   dc540:	7c00      	ldrb	r0, [r0, #16]
   dc542:	f7fe b963 	b.w	da80c <HAL_I2C_Write_Data>

000dc546 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dc546:	2100      	movs	r1, #0
   dc548:	7c00      	ldrb	r0, [r0, #16]
   dc54a:	f7fe b967 	b.w	da81c <HAL_I2C_Available_Data>

000dc54e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dc54e:	2100      	movs	r1, #0
   dc550:	7c00      	ldrb	r0, [r0, #16]
   dc552:	f7fe b96b 	b.w	da82c <HAL_I2C_Read_Data>

000dc556 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dc556:	2100      	movs	r1, #0
   dc558:	7c00      	ldrb	r0, [r0, #16]
   dc55a:	f7fe b96f 	b.w	da83c <HAL_I2C_Peek_Data>

000dc55e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dc55e:	2100      	movs	r1, #0
   dc560:	7c00      	ldrb	r0, [r0, #16]
   dc562:	f7fe b973 	b.w	da84c <HAL_I2C_Flush_Data>

000dc566 <_ZN7TwoWireD0Ev>:
   dc566:	b510      	push	{r4, lr}
   dc568:	2114      	movs	r1, #20
   dc56a:	4604      	mov	r4, r0
   dc56c:	f000 fe9e 	bl	dd2ac <_ZdlPvj>
   dc570:	4620      	mov	r0, r4
   dc572:	bd10      	pop	{r4, pc}

000dc574 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dc574:	b510      	push	{r4, lr}
   dc576:	4604      	mov	r4, r0
   dc578:	2300      	movs	r3, #0
   dc57a:	6063      	str	r3, [r4, #4]
   dc57c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc580:	60a3      	str	r3, [r4, #8]
   dc582:	4b04      	ldr	r3, [pc, #16]	; (dc594 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   dc584:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dc586:	4608      	mov	r0, r1
   dc588:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   dc58a:	4611      	mov	r1, r2
   dc58c:	f7fe f96e 	bl	da86c <HAL_I2C_Init>
}
   dc590:	4620      	mov	r0, r4
   dc592:	bd10      	pop	{r4, pc}
   dc594:	000e8144 	.word	0x000e8144

000dc598 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   dc598:	2200      	movs	r2, #0
   dc59a:	7c00      	ldrb	r0, [r0, #16]
   dc59c:	f7fe b90e 	b.w	da7bc <HAL_I2C_Set_Speed>

000dc5a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dc5a0:	2300      	movs	r3, #0
   dc5a2:	461a      	mov	r2, r3
   dc5a4:	4619      	mov	r1, r3
   dc5a6:	7c00      	ldrb	r0, [r0, #16]
   dc5a8:	f7fe b910 	b.w	da7cc <HAL_I2C_Begin>

000dc5ac <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   dc5ac:	2100      	movs	r1, #0
   dc5ae:	7c00      	ldrb	r0, [r0, #16]
   dc5b0:	f7fe b914 	b.w	da7dc <HAL_I2C_End>

000dc5b4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dc5b4:	b570      	push	{r4, r5, r6, lr}
   dc5b6:	460c      	mov	r4, r1
   dc5b8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   dc5ba:	2514      	movs	r5, #20
   dc5bc:	4606      	mov	r6, r0
   dc5be:	462a      	mov	r2, r5
   dc5c0:	2100      	movs	r1, #0
   dc5c2:	a801      	add	r0, sp, #4
   dc5c4:	f007 f929 	bl	e381a <memset>
   dc5c8:	7823      	ldrb	r3, [r4, #0]
   dc5ca:	f88d 3008 	strb.w	r3, [sp, #8]
   dc5ce:	6863      	ldr	r3, [r4, #4]
   dc5d0:	9303      	str	r3, [sp, #12]
   dc5d2:	68e3      	ldr	r3, [r4, #12]
   dc5d4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   dc5d6:	2200      	movs	r2, #0
   dc5d8:	7a23      	ldrb	r3, [r4, #8]
   dc5da:	7c30      	ldrb	r0, [r6, #16]
   dc5dc:	f8ad 5004 	strh.w	r5, [sp, #4]
   dc5e0:	a901      	add	r1, sp, #4
   dc5e2:	9305      	str	r3, [sp, #20]
   dc5e4:	f7fe f962 	bl	da8ac <HAL_I2C_Request_Data_Ex>
}
   dc5e8:	b006      	add	sp, #24
   dc5ea:	bd70      	pop	{r4, r5, r6, pc}

000dc5ec <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   dc5ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dc5ee:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dc5f0:	f88d 1000 	strb.w	r1, [sp]
   dc5f4:	f04f 0164 	mov.w	r1, #100	; 0x64
   dc5f8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dc5fa:	bf18      	it	ne
   dc5fc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dc5fe:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   dc600:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dc602:	f88d 3008 	strb.w	r3, [sp, #8]
   dc606:	f7ff ffd5 	bl	dc5b4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dc60a:	b005      	add	sp, #20
   dc60c:	f85d fb04 	ldr.w	pc, [sp], #4

000dc610 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   dc610:	2301      	movs	r3, #1
   dc612:	f7ff bfeb 	b.w	dc5ec <_ZN7TwoWire11requestFromEhjh>

000dc616 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   dc616:	2200      	movs	r2, #0
   dc618:	7c00      	ldrb	r0, [r0, #16]
   dc61a:	f7fe b8e7 	b.w	da7ec <HAL_I2C_Begin_Transmission>

000dc61e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   dc61e:	b2c9      	uxtb	r1, r1
   dc620:	f7ff bff9 	b.w	dc616 <_ZN7TwoWire17beginTransmissionEh>

000dc624 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   dc624:	2200      	movs	r2, #0
   dc626:	7c00      	ldrb	r0, [r0, #16]
   dc628:	f7fe b8e8 	b.w	da7fc <HAL_I2C_End_Transmission>

000dc62c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   dc62c:	2101      	movs	r1, #1
   dc62e:	f7ff bff9 	b.w	dc624 <_ZN7TwoWire15endTransmissionEh>

000dc632 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dc632:	2100      	movs	r1, #0
   dc634:	7c00      	ldrb	r0, [r0, #16]
   dc636:	f7fe b911 	b.w	da85c <HAL_I2C_Is_Enabled>

000dc63a <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   dc63a:	2200      	movs	r2, #0
   dc63c:	4611      	mov	r1, r2
   dc63e:	7c00      	ldrb	r0, [r0, #16]
   dc640:	f7fe b91c 	b.w	da87c <HAL_I2C_Reset>

000dc644 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   dc644:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   dc646:	2100      	movs	r1, #0
   dc648:	7c00      	ldrb	r0, [r0, #16]
   dc64a:	f7fe f91f 	bl	da88c <HAL_I2C_Acquire>
}
   dc64e:	fab0 f080 	clz	r0, r0
   dc652:	0940      	lsrs	r0, r0, #5
   dc654:	bd08      	pop	{r3, pc}

000dc656 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dc656:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   dc658:	2100      	movs	r1, #0
   dc65a:	7c00      	ldrb	r0, [r0, #16]
   dc65c:	f7fe f91e 	bl	da89c <HAL_I2C_Release>
}
   dc660:	fab0 f080 	clz	r0, r0
   dc664:	0940      	lsrs	r0, r0, #5
   dc666:	bd08      	pop	{r3, pc}

000dc668 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dc668:	2200      	movs	r2, #0
   dc66a:	4611      	mov	r1, r2
   dc66c:	6840      	ldr	r0, [r0, #4]
   dc66e:	f7fe ba65 	b.w	dab3c <network_listening>

000dc672 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dc672:	2200      	movs	r2, #0
   dc674:	4611      	mov	r1, r2
   dc676:	6840      	ldr	r0, [r0, #4]
   dc678:	f7fe ba70 	b.w	dab5c <network_get_listen_timeout>

000dc67c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dc67c:	2200      	movs	r2, #0
   dc67e:	6840      	ldr	r0, [r0, #4]
   dc680:	f7fe ba64 	b.w	dab4c <network_set_listen_timeout>

000dc684 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dc684:	2200      	movs	r2, #0
   dc686:	f081 0101 	eor.w	r1, r1, #1
   dc68a:	6840      	ldr	r0, [r0, #4]
   dc68c:	f7fe ba4e 	b.w	dab2c <network_listen>

000dc690 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   dc690:	2300      	movs	r3, #0
   dc692:	461a      	mov	r2, r3
   dc694:	2101      	movs	r1, #1
   dc696:	6840      	ldr	r0, [r0, #4]
   dc698:	f7fe ba40 	b.w	dab1c <network_off>

000dc69c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dc69c:	2300      	movs	r3, #0
   dc69e:	461a      	mov	r2, r3
   dc6a0:	4619      	mov	r1, r3
   dc6a2:	6840      	ldr	r0, [r0, #4]
   dc6a4:	f7fe ba32 	b.w	dab0c <network_on>

000dc6a8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dc6a8:	2200      	movs	r2, #0
   dc6aa:	4611      	mov	r1, r2
   dc6ac:	6840      	ldr	r0, [r0, #4]
   dc6ae:	f7fe ba25 	b.w	daafc <network_ready>

000dc6b2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dc6b2:	2200      	movs	r2, #0
   dc6b4:	4611      	mov	r1, r2
   dc6b6:	6840      	ldr	r0, [r0, #4]
   dc6b8:	f7fe ba10 	b.w	daadc <network_connecting>

000dc6bc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc6bc:	2200      	movs	r2, #0
   dc6be:	2102      	movs	r1, #2
   dc6c0:	6840      	ldr	r0, [r0, #4]
   dc6c2:	f7fe ba13 	b.w	daaec <network_disconnect>

000dc6c6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dc6c6:	2300      	movs	r3, #0
   dc6c8:	461a      	mov	r2, r3
   dc6ca:	6840      	ldr	r0, [r0, #4]
   dc6cc:	f7fe b9fe 	b.w	daacc <network_connect>

000dc6d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   dc6d0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc6d2:	4605      	mov	r5, r0
   dc6d4:	b188      	cbz	r0, dc6fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc6d6:	6804      	ldr	r4, [r0, #0]
   dc6d8:	b14c      	cbz	r4, dc6ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc6da:	68a3      	ldr	r3, [r4, #8]
   dc6dc:	b11b      	cbz	r3, dc6e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc6de:	2203      	movs	r2, #3
   dc6e0:	4621      	mov	r1, r4
   dc6e2:	4620      	mov	r0, r4
   dc6e4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc6e6:	2110      	movs	r1, #16
   dc6e8:	4620      	mov	r0, r4
   dc6ea:	f000 fddf 	bl	dd2ac <_ZdlPvj>
   dc6ee:	4628      	mov	r0, r5
   dc6f0:	2114      	movs	r1, #20
      }
   dc6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc6f6:	f000 bdd9 	b.w	dd2ac <_ZdlPvj>
   dc6fa:	bd38      	pop	{r3, r4, r5, pc}

000dc6fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   dc6fc:	b110      	cbz	r0, dc704 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   dc6fe:	6803      	ldr	r3, [r0, #0]
   dc700:	685b      	ldr	r3, [r3, #4]
   dc702:	4718      	bx	r3
   dc704:	4770      	bx	lr

000dc706 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   dc706:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dc708:	6803      	ldr	r3, [r0, #0]
   dc70a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   dc70c:	b1bb      	cbz	r3, dc73e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   dc70e:	6858      	ldr	r0, [r3, #4]
   dc710:	f7fd ffcc 	bl	da6ac <os_thread_is_current>
   dc714:	b978      	cbnz	r0, dc736 <_ZN6ThreadD1Ev+0x30>
   dc716:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   dc718:	7c5a      	ldrb	r2, [r3, #17]
   dc71a:	b912      	cbnz	r2, dc722 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   dc71c:	6858      	ldr	r0, [r3, #4]
   dc71e:	f7fd ffcd 	bl	da6bc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   dc722:	6823      	ldr	r3, [r4, #0]
   dc724:	6858      	ldr	r0, [r3, #4]
   dc726:	f7fd ffd1 	bl	da6cc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc72a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc72c:	2300      	movs	r3, #0
   dc72e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   dc730:	b128      	cbz	r0, dc73e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   dc732:	f7ff ffcd 	bl	dc6d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc736:	6820      	ldr	r0, [r4, #0]
   dc738:	b108      	cbz	r0, dc73e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   dc73a:	f7ff ffc9 	bl	dc6d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   dc73e:	4620      	mov	r0, r4
   dc740:	bd10      	pop	{r4, pc}

000dc742 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   dc742:	b538      	push	{r3, r4, r5, lr}
   dc744:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc746:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   dc74a:	b108      	cbz	r0, dc750 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   dc74c:	f7f7 fca9 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dc750:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   dc754:	b108      	cbz	r0, dc75a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   dc756:	f7fd ffc9 	bl	da6ec <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc75a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   dc75e:	b135      	cbz	r5, dc76e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc760:	4628      	mov	r0, r5
   dc762:	f7ff ffd0 	bl	dc706 <_ZN6ThreadD1Ev>
   dc766:	2104      	movs	r1, #4
   dc768:	4628      	mov	r0, r5
   dc76a:	f000 fd9f 	bl	dd2ac <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc76e:	6820      	ldr	r0, [r4, #0]
   dc770:	b108      	cbz	r0, dc776 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   dc772:	f7ff ffc3 	bl	dc6fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   dc776:	4620      	mov	r0, r4
   dc778:	bd38      	pop	{r3, r4, r5, pc}
	...

000dc77c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   dc77c:	b510      	push	{r4, lr}
   dc77e:	4b04      	ldr	r3, [pc, #16]	; (dc790 <_ZN5spark9MeshClassD1Ev+0x14>)
   dc780:	4604      	mov	r4, r0
   dc782:	f840 3b08 	str.w	r3, [r0], #8
   dc786:	f7ff ffdc 	bl	dc742 <_ZN5spark11MeshPublishD1Ev>
   dc78a:	4620      	mov	r0, r4
   dc78c:	bd10      	pop	{r4, pc}
   dc78e:	bf00      	nop
   dc790:	000e816c 	.word	0x000e816c

000dc794 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   dc794:	b538      	push	{r3, r4, r5, lr}
   dc796:	4c0e      	ldr	r4, [pc, #56]	; (dc7d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   dc798:	4b0e      	ldr	r3, [pc, #56]	; (dc7d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   dc79a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   dc79c:	2500      	movs	r5, #0
   dc79e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   dc7a0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   dc7a4:	6063      	str	r3, [r4, #4]
   dc7a6:	60a5      	str	r5, [r4, #8]
   dc7a8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc7ac:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   dc7b0:	f7fd ff94 	bl	da6dc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   dc7b4:	4b08      	ldr	r3, [pc, #32]	; (dc7d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   dc7b6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc7ba:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   dc7be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   dc7c0:	4620      	mov	r0, r4
   dc7c2:	4a06      	ldr	r2, [pc, #24]	; (dc7dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   dc7c4:	4906      	ldr	r1, [pc, #24]	; (dc7e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   dc7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   dc7ca:	f000 bd61 	b.w	dd290 <__aeabi_atexit>
   dc7ce:	bf00      	nop
   dc7d0:	2003e414 	.word	0x2003e414
   dc7d4:	000e8278 	.word	0x000e8278
   dc7d8:	000e816c 	.word	0x000e816c
   dc7dc:	2003d6b0 	.word	0x2003d6b0
   dc7e0:	000dc77d 	.word	0x000dc77d

000dc7e4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc7e6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc7e8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc7ea:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc7ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc7f0:	2201      	movs	r2, #1
   dc7f2:	f04f 33ff 	mov.w	r3, #4294967295
   dc7f6:	4621      	mov	r1, r4
   dc7f8:	47a8      	blx	r5
}
   dc7fa:	b003      	add	sp, #12
   dc7fc:	bd30      	pop	{r4, r5, pc}

000dc7fe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   dc7fe:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc800:	6803      	ldr	r3, [r0, #0]
   dc802:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   dc804:	f04f 33ff 	mov.w	r3, #4294967295
   dc808:	46a4      	mov	ip, r4
}
   dc80a:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc80e:	4760      	bx	ip

000dc810 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc810:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc812:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   dc814:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc816:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   dc81a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc81c:	4621      	mov	r1, r4
   dc81e:	4613      	mov	r3, r2
   dc820:	2201      	movs	r2, #1
   dc822:	47a8      	blx	r5
}
   dc824:	b003      	add	sp, #12
   dc826:	bd30      	pop	{r4, r5, pc}

000dc828 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   dc828:	4770      	bx	lr

000dc82a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc82a:	b538      	push	{r3, r4, r5, lr}
   dc82c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   dc82e:	681a      	ldr	r2, [r3, #0]
   dc830:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc832:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   dc834:	da05      	bge.n	dc842 <_ZN9TCPClient9connectedEv+0x18>
   dc836:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc83a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc83e:	429a      	cmp	r2, r3
   dc840:	d001      	beq.n	dc846 <_ZN9TCPClient9connectedEv+0x1c>
   dc842:	2501      	movs	r5, #1
   dc844:	e00b      	b.n	dc85e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   dc846:	6803      	ldr	r3, [r0, #0]
   dc848:	691b      	ldr	r3, [r3, #16]
   dc84a:	4798      	blx	r3
   dc84c:	2800      	cmp	r0, #0
   dc84e:	bf14      	ite	ne
   dc850:	2501      	movne	r5, #1
   dc852:	2500      	moveq	r5, #0
        if (!rv) {
   dc854:	d103      	bne.n	dc85e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   dc856:	6823      	ldr	r3, [r4, #0]
   dc858:	4620      	mov	r0, r4
   dc85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc85c:	4798      	blx	r3
        }
    }
    return rv;
}
   dc85e:	4628      	mov	r0, r5
   dc860:	bd38      	pop	{r3, r4, r5, pc}

000dc862 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dc862:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   dc864:	6818      	ldr	r0, [r3, #0]
}
   dc866:	43c0      	mvns	r0, r0
   dc868:	0fc0      	lsrs	r0, r0, #31
   dc86a:	4770      	bx	lr

000dc86c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc86c:	4770      	bx	lr

000dc86e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   dc86e:	2000      	movs	r0, #0
   dc870:	4770      	bx	lr

000dc872 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc872:	b510      	push	{r4, lr}
   dc874:	2114      	movs	r1, #20
   dc876:	4604      	mov	r4, r0
   dc878:	f000 fd18 	bl	dd2ac <_ZdlPvj>
   dc87c:	4620      	mov	r0, r4
   dc87e:	bd10      	pop	{r4, pc}

000dc880 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dc880:	f7f7 bc0d 	b.w	d409e <_ZdlPv>

000dc884 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dc886:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   dc888:	2200      	movs	r2, #0
   dc88a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   dc88c:	9202      	str	r2, [sp, #8]
   dc88e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc890:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc892:	4604      	mov	r4, r0
   dc894:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc896:	d008      	beq.n	dc8aa <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   dc898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc89c:	fbb3 f1f2 	udiv	r1, r3, r2
   dc8a0:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   dc8a2:	fb02 3111 	mls	r1, r2, r1, r3
   dc8a6:	434a      	muls	r2, r1
   dc8a8:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   dc8aa:	6960      	ldr	r0, [r4, #20]
   dc8ac:	2308      	movs	r3, #8
   dc8ae:	9300      	str	r3, [sp, #0]
   dc8b0:	f241 0205 	movw	r2, #4101	; 0x1005
   dc8b4:	446b      	add	r3, sp
   dc8b6:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc8ba:	6800      	ldr	r0, [r0, #0]
   dc8bc:	f7fd fffe 	bl	da8bc <sock_setsockopt>
    if (ret < 0) {
   dc8c0:	2800      	cmp	r0, #0
   dc8c2:	db08      	blt.n	dc8d6 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   dc8c4:	6960      	ldr	r0, [r4, #20]
   dc8c6:	2300      	movs	r3, #0
   dc8c8:	4632      	mov	r2, r6
   dc8ca:	4629      	mov	r1, r5
   dc8cc:	6800      	ldr	r0, [r0, #0]
   dc8ce:	f7fe f815 	bl	da8fc <sock_send>
    if (ret < 0) {
   dc8d2:	2800      	cmp	r0, #0
   dc8d4:	da04      	bge.n	dc8e0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   dc8d6:	f7fe f9d1 	bl	dac7c <__errno>
   dc8da:	6803      	ldr	r3, [r0, #0]
   dc8dc:	6063      	str	r3, [r4, #4]
   dc8de:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   dc8e0:	b004      	add	sp, #16
   dc8e2:	bd70      	pop	{r4, r5, r6, pc}

000dc8e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc8e4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc8e6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc8e8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc8ea:	689b      	ldr	r3, [r3, #8]
   dc8ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dc8ee:	68a3      	ldr	r3, [r4, #8]
   dc8f0:	3b01      	subs	r3, #1
   dc8f2:	60a3      	str	r3, [r4, #8]
   dc8f4:	b92b      	cbnz	r3, dc902 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   dc8f6:	6823      	ldr	r3, [r4, #0]
   dc8f8:	4620      	mov	r0, r4
   dc8fa:	68db      	ldr	r3, [r3, #12]
        }
    }
   dc8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   dc900:	4718      	bx	r3
   dc902:	bd10      	pop	{r4, pc}

000dc904 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   dc904:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc906:	4604      	mov	r4, r0
   dc908:	694d      	ldr	r5, [r1, #20]
   dc90a:	4b05      	ldr	r3, [pc, #20]	; (dc920 <_ZN9TCPClient8remoteIPEv+0x1c>)
   dc90c:	f844 3b04 	str.w	r3, [r4], #4
   dc910:	358c      	adds	r5, #140	; 0x8c
   dc912:	4606      	mov	r6, r0
   dc914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc918:	682b      	ldr	r3, [r5, #0]
   dc91a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   dc91c:	4630      	mov	r0, r6
   dc91e:	bd70      	pop	{r4, r5, r6, pc}
   dc920:	000e80d0 	.word	0x000e80d0

000dc924 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc924:	b510      	push	{r4, lr}
   dc926:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc928:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc92c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc930:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc932:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc934:	d005      	beq.n	dc942 <_ZN9TCPClient4peekEv+0x1e>
   dc936:	6962      	ldr	r2, [r4, #20]
   dc938:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc93c:	4413      	add	r3, r2
   dc93e:	7918      	ldrb	r0, [r3, #4]
   dc940:	bd10      	pop	{r4, pc}
   dc942:	6803      	ldr	r3, [r0, #0]
   dc944:	691b      	ldr	r3, [r3, #16]
   dc946:	4798      	blx	r3
   dc948:	2800      	cmp	r0, #0
   dc94a:	d1f4      	bne.n	dc936 <_ZN9TCPClient4peekEv+0x12>
   dc94c:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc950:	bd10      	pop	{r4, pc}

000dc952 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc952:	b510      	push	{r4, lr}
   dc954:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc956:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc95a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc95e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc960:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc962:	d008      	beq.n	dc976 <_ZN9TCPClient4readEv+0x24>
   dc964:	6962      	ldr	r2, [r4, #20]
   dc966:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc96a:	1c59      	adds	r1, r3, #1
   dc96c:	4413      	add	r3, r2
   dc96e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   dc972:	7918      	ldrb	r0, [r3, #4]
   dc974:	bd10      	pop	{r4, pc}
   dc976:	6803      	ldr	r3, [r0, #0]
   dc978:	691b      	ldr	r3, [r3, #16]
   dc97a:	4798      	blx	r3
   dc97c:	2800      	cmp	r0, #0
   dc97e:	d1f1      	bne.n	dc964 <_ZN9TCPClient4readEv+0x12>
   dc980:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc984:	bd10      	pop	{r4, pc}

000dc986 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc988:	6943      	ldr	r3, [r0, #20]
   dc98a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   dc98c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc990:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc994:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc996:	4605      	mov	r5, r0
   dc998:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   dc99a:	d106      	bne.n	dc9aa <_ZN9TCPClient4readEPhj+0x24>
   dc99c:	6803      	ldr	r3, [r0, #0]
   dc99e:	691b      	ldr	r3, [r3, #16]
   dc9a0:	4798      	blx	r3
   dc9a2:	b910      	cbnz	r0, dc9aa <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   dc9a4:	f04f 34ff 	mov.w	r4, #4294967295
   dc9a8:	e014      	b.n	dc9d4 <_ZN9TCPClient4readEPhj+0x4e>
   dc9aa:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   dc9ac:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   dc9b0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   dc9b4:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   dc9b6:	42bc      	cmp	r4, r7
   dc9b8:	bf28      	it	cs
   dc9ba:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   dc9bc:	4419      	add	r1, r3
   dc9be:	4622      	mov	r2, r4
   dc9c0:	3104      	adds	r1, #4
   dc9c2:	4630      	mov	r0, r6
   dc9c4:	f006 ff1e 	bl	e3804 <memcpy>
   dc9c8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   dc9ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc9ce:	4423      	add	r3, r4
   dc9d0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   dc9d4:	4620      	mov	r0, r4
   dc9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc9d8 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc9dc:	4698      	mov	r8, r3
    stop();
   dc9de:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9e0:	b093      	sub	sp, #76	; 0x4c
    stop();
   dc9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9e4:	460d      	mov	r5, r1
   dc9e6:	4606      	mov	r6, r0
   dc9e8:	4617      	mov	r7, r2
    stop();
   dc9ea:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   dc9ec:	ab12      	add	r3, sp, #72	; 0x48
   dc9ee:	2400      	movs	r4, #0
   dc9f0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dc9f4:	4622      	mov	r2, r4
   dc9f6:	4621      	mov	r1, r4
   dc9f8:	4628      	mov	r0, r5
   dc9fa:	f7fd fd8f 	bl	da51c <netdb_getaddrinfo>
   dc9fe:	4681      	mov	r9, r0
   dca00:	2800      	cmp	r0, #0
   dca02:	d13d      	bne.n	dca80 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dca04:	9b00      	ldr	r3, [sp, #0]
   dca06:	2b00      	cmp	r3, #0
   dca08:	d056      	beq.n	dcab8 <_ZN9TCPClient7connectEPKctm+0xe0>
   dca0a:	695b      	ldr	r3, [r3, #20]
   dca0c:	2b00      	cmp	r3, #0
   dca0e:	d053      	beq.n	dcab8 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   dca10:	a806      	add	r0, sp, #24
   dca12:	f7ff fbe7 	bl	dc1e4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dca16:	9b00      	ldr	r3, [sp, #0]
   dca18:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   dca1a:	7863      	ldrb	r3, [r4, #1]
   dca1c:	2b02      	cmp	r3, #2
   dca1e:	d101      	bne.n	dca24 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dca20:	1d21      	adds	r1, r4, #4
   dca22:	e013      	b.n	dca4c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   dca24:	2b0a      	cmp	r3, #10
   dca26:	d114      	bne.n	dca52 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   dca28:	2211      	movs	r2, #17
   dca2a:	4649      	mov	r1, r9
   dca2c:	a801      	add	r0, sp, #4
   dca2e:	f006 fef4 	bl	e381a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dca32:	68a3      	ldr	r3, [r4, #8]
   dca34:	bb33      	cbnz	r3, dca84 <_ZN9TCPClient7connectEPKctm+0xac>
   dca36:	68e3      	ldr	r3, [r4, #12]
   dca38:	bb23      	cbnz	r3, dca84 <_ZN9TCPClient7connectEPKctm+0xac>
   dca3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dca3e:	6925      	ldr	r5, [r4, #16]
   dca40:	f7fd fe64 	bl	da70c <inet_htonl>
   dca44:	4285      	cmp	r5, r0
   dca46:	d11d      	bne.n	dca84 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   dca48:	f104 0114 	add.w	r1, r4, #20
   dca4c:	a806      	add	r0, sp, #24
   dca4e:	f7ff fc0c 	bl	dc26a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dca52:	a806      	add	r0, sp, #24
   dca54:	f7ff fbe6 	bl	dc224 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dca58:	2800      	cmp	r0, #0
   dca5a:	d02d      	beq.n	dcab8 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   dca5c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dca5e:	ad07      	add	r5, sp, #28
   dca60:	f8d3 9020 	ldr.w	r9, [r3, #32]
   dca64:	4b18      	ldr	r3, [pc, #96]	; (dcac8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   dca66:	930c      	str	r3, [sp, #48]	; 0x30
   dca68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dca6a:	ac0d      	add	r4, sp, #52	; 0x34
   dca6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dca6e:	682b      	ldr	r3, [r5, #0]
   dca70:	7023      	strb	r3, [r4, #0]
   dca72:	463a      	mov	r2, r7
   dca74:	4643      	mov	r3, r8
   dca76:	a90c      	add	r1, sp, #48	; 0x30
   dca78:	4630      	mov	r0, r6
   dca7a:	47c8      	blx	r9
   dca7c:	4681      	mov	r9, r0
   dca7e:	e01b      	b.n	dcab8 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dca80:	46a1      	mov	r9, r4
   dca82:	e019      	b.n	dcab8 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dca84:	f104 0308 	add.w	r3, r4, #8
   dca88:	ad01      	add	r5, sp, #4
   dca8a:	3418      	adds	r4, #24
   dca8c:	6818      	ldr	r0, [r3, #0]
   dca8e:	6859      	ldr	r1, [r3, #4]
   dca90:	462a      	mov	r2, r5
   dca92:	c203      	stmia	r2!, {r0, r1}
   dca94:	3308      	adds	r3, #8
   dca96:	42a3      	cmp	r3, r4
   dca98:	4615      	mov	r5, r2
   dca9a:	d1f7      	bne.n	dca8c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   dca9c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dca9e:	a901      	add	r1, sp, #4
   dcaa0:	a80c      	add	r0, sp, #48	; 0x30
   dcaa2:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   dcaa4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dcaa8:	f7ff fbaa 	bl	dc200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dcaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcaae:	ac07      	add	r4, sp, #28
   dcab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcab2:	682b      	ldr	r3, [r5, #0]
   dcab4:	7023      	strb	r3, [r4, #0]
   dcab6:	e7cc      	b.n	dca52 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dcab8:	9800      	ldr	r0, [sp, #0]
   dcaba:	f7fd fd27 	bl	da50c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   dcabe:	4648      	mov	r0, r9
   dcac0:	b013      	add	sp, #76	; 0x4c
   dcac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcac6:	bf00      	nop
   dcac8:	000e80d0 	.word	0x000e80d0

000dcacc <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   dcacc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   dcace:	2300      	movs	r3, #0
   dcad0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dcad4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   dcad6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   dcada:	4770      	bx	lr

000dcadc <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcae0:	461e      	mov	r6, r3
    stop();
   dcae2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcae4:	460c      	mov	r4, r1
   dcae6:	b08a      	sub	sp, #40	; 0x28
    stop();
   dcae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcaea:	4605      	mov	r5, r0
   dcaec:	4617      	mov	r7, r2
    stop();
   dcaee:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   dcaf0:	7d23      	ldrb	r3, [r4, #20]
   dcaf2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   dcaf6:	2b04      	cmp	r3, #4
   dcaf8:	bf0c      	ite	eq
   dcafa:	2002      	moveq	r0, #2
   dcafc:	200a      	movne	r0, #10
   dcafe:	2206      	movs	r2, #6
   dcb00:	2101      	movs	r1, #1
   dcb02:	f7fd ff03 	bl	da90c <sock_socket>
   dcb06:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   dcb0a:	696b      	ldr	r3, [r5, #20]
   dcb0c:	681b      	ldr	r3, [r3, #0]
   dcb0e:	2b00      	cmp	r3, #0
   dcb10:	db18      	blt.n	dcb44 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   dcb12:	4628      	mov	r0, r5
   dcb14:	f7ff ffda 	bl	dcacc <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   dcb18:	b1d6      	cbz	r6, dcb50 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   dcb1a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb1c:	a903      	add	r1, sp, #12
   dcb1e:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   dcb20:	9303      	str	r3, [sp, #12]
   dcb22:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb26:	f7fd fd81 	bl	da62c <if_index_to_name>
   dcb2a:	b958      	cbnz	r0, dcb44 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   dcb2c:	6968      	ldr	r0, [r5, #20]
   dcb2e:	2306      	movs	r3, #6
   dcb30:	9300      	str	r3, [sp, #0]
   dcb32:	f241 020b 	movw	r2, #4107	; 0x100b
   dcb36:	ab03      	add	r3, sp, #12
   dcb38:	f640 71ff 	movw	r1, #4095	; 0xfff
   dcb3c:	6800      	ldr	r0, [r0, #0]
   dcb3e:	f7fd febd 	bl	da8bc <sock_setsockopt>
   dcb42:	b128      	cbz	r0, dcb50 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dcb44:	682b      	ldr	r3, [r5, #0]
   dcb46:	4628      	mov	r0, r5
   dcb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb4a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dcb4c:	4798      	blx	r3
   dcb4e:	e03b      	b.n	dcbc8 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   dcb50:	261c      	movs	r6, #28
   dcb52:	4632      	mov	r2, r6
   dcb54:	2100      	movs	r1, #0
   dcb56:	a803      	add	r0, sp, #12
   dcb58:	f006 fe5f 	bl	e381a <memset>
    if (ip.version() == 4) {
   dcb5c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   dcb5e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   dcb62:	2b04      	cmp	r3, #4
   dcb64:	d10c      	bne.n	dcb80 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dcb66:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   dcb68:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dcb6a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   dcb6e:	f7fd fdd5 	bl	da71c <inet_htons>
   dcb72:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   dcb76:	6860      	ldr	r0, [r4, #4]
   dcb78:	f7fd fdc8 	bl	da70c <inet_htonl>
   dcb7c:	9004      	str	r0, [sp, #16]
   dcb7e:	e013      	b.n	dcba8 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dcb80:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   dcb82:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dcb84:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   dcb88:	f7fd fdc8 	bl	da71c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dcb8c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   dcb8e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dcb92:	1d23      	adds	r3, r4, #4
   dcb94:	f104 0714 	add.w	r7, r4, #20
   dcb98:	6818      	ldr	r0, [r3, #0]
   dcb9a:	6859      	ldr	r1, [r3, #4]
   dcb9c:	4632      	mov	r2, r6
   dcb9e:	c203      	stmia	r2!, {r0, r1}
   dcba0:	3308      	adds	r3, #8
   dcba2:	42bb      	cmp	r3, r7
   dcba4:	4616      	mov	r6, r2
   dcba6:	d1f7      	bne.n	dcb98 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   dcba8:	696b      	ldr	r3, [r5, #20]
   dcbaa:	221c      	movs	r2, #28
   dcbac:	a903      	add	r1, sp, #12
   dcbae:	6818      	ldr	r0, [r3, #0]
   dcbb0:	f7fd fe94 	bl	da8dc <sock_connect>
   dcbb4:	2800      	cmp	r0, #0
   dcbb6:	d1c5      	bne.n	dcb44 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   dcbb8:	3404      	adds	r4, #4
   dcbba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dcbbc:	696d      	ldr	r5, [r5, #20]
   dcbbe:	358c      	adds	r5, #140	; 0x8c
   dcbc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dcbc2:	6823      	ldr	r3, [r4, #0]
   dcbc4:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   dcbc6:	2401      	movs	r4, #1
}
   dcbc8:	4620      	mov	r0, r4
   dcbca:	b00a      	add	sp, #40	; 0x28
   dcbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcbd0 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dcbd0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   dcbd2:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dcbd4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   dcbd6:	6818      	ldr	r0, [r3, #0]
   dcbd8:	2800      	cmp	r0, #0
   dcbda:	db01      	blt.n	dcbe0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   dcbdc:	f7fd fe76 	bl	da8cc <sock_close>
   dcbe0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   dcbe2:	f04f 32ff 	mov.w	r2, #4294967295
   dcbe6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dcbe8:	6960      	ldr	r0, [r4, #20]
   dcbea:	2211      	movs	r2, #17
   dcbec:	2100      	movs	r1, #0
   dcbee:	308c      	adds	r0, #140	; 0x8c
   dcbf0:	f006 fe13 	bl	e381a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   dcbf4:	4620      	mov	r0, r4
}
   dcbf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   dcbfa:	f7ff bf67 	b.w	dcacc <_ZN9TCPClient12flush_bufferEv>
	...

000dcc00 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dcc00:	b530      	push	{r4, r5, lr}
   dcc02:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dcc04:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dcc08:	b08b      	sub	sp, #44	; 0x2c
   dcc0a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dcc0c:	b11b      	cbz	r3, dcc16 <_ZN9TCPClient9availableEv+0x16>
   dcc0e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   dcc12:	429a      	cmp	r2, r3
   dcc14:	d040      	beq.n	dcc98 <_ZN9TCPClient9availableEv+0x98>
   dcc16:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   dcc18:	6818      	ldr	r0, [r3, #0]
   dcc1a:	2800      	cmp	r0, #0
   dcc1c:	db3f      	blt.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   dcc1e:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   dcc22:	2d7f      	cmp	r5, #127	; 0x7f
   dcc24:	d83b      	bhi.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   dcc26:	1d19      	adds	r1, r3, #4
   dcc28:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   dcc2c:	2308      	movs	r3, #8
   dcc2e:	4429      	add	r1, r5
   dcc30:	f7fd fe5c 	bl	da8ec <sock_recv>
            if (ret > 0) {
   dcc34:	2800      	cmp	r0, #0
   dcc36:	dd0c      	ble.n	dcc52 <_ZN9TCPClient9availableEv+0x52>
   dcc38:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dcc3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dcc3e:	b90a      	cbnz	r2, dcc44 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dcc40:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dcc44:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dcc46:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dcc4a:	4418      	add	r0, r3
   dcc4c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dcc50:	e025      	b.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dcc52:	f7fe f813 	bl	dac7c <__errno>
   dcc56:	6803      	ldr	r3, [r0, #0]
   dcc58:	2b0b      	cmp	r3, #11
   dcc5a:	d020      	beq.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
   dcc5c:	f7fe f80e 	bl	dac7c <__errno>
   dcc60:	6803      	ldr	r3, [r0, #0]
   dcc62:	2b0b      	cmp	r3, #11
   dcc64:	d01b      	beq.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dcc66:	2320      	movs	r3, #32
   dcc68:	2500      	movs	r5, #0
   dcc6a:	9302      	str	r3, [sp, #8]
   dcc6c:	9503      	str	r5, [sp, #12]
   dcc6e:	f7fe f805 	bl	dac7c <__errno>
   dcc72:	6803      	ldr	r3, [r0, #0]
   dcc74:	9301      	str	r3, [sp, #4]
   dcc76:	4b0e      	ldr	r3, [pc, #56]	; (dccb0 <_ZN9TCPClient9availableEv+0xb0>)
   dcc78:	9300      	str	r3, [sp, #0]
   dcc7a:	aa02      	add	r2, sp, #8
   dcc7c:	462b      	mov	r3, r5
   dcc7e:	490d      	ldr	r1, [pc, #52]	; (dccb4 <_ZN9TCPClient9availableEv+0xb4>)
   dcc80:	2032      	movs	r0, #50	; 0x32
   dcc82:	f7fd feb3 	bl	da9ec <log_message>
                    sock_close(d_->sock);
   dcc86:	6963      	ldr	r3, [r4, #20]
   dcc88:	6818      	ldr	r0, [r3, #0]
   dcc8a:	f7fd fe1f 	bl	da8cc <sock_close>
   dcc8e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dcc90:	f04f 32ff 	mov.w	r2, #4294967295
   dcc94:	601a      	str	r2, [r3, #0]
   dcc96:	e002      	b.n	dcc9e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dcc98:	f7ff ff18 	bl	dcacc <_ZN9TCPClient12flush_bufferEv>
   dcc9c:	e7bb      	b.n	dcc16 <_ZN9TCPClient9availableEv+0x16>
   dcc9e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dcca0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dcca4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dcca8:	1a18      	subs	r0, r3, r0
}
   dccaa:	b00b      	add	sp, #44	; 0x2c
   dccac:	bd30      	pop	{r4, r5, pc}
   dccae:	bf00      	nop
   dccb0:	000e8207 	.word	0x000e8207
   dccb4:	000e8200 	.word	0x000e8200

000dccb8 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dccb8:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dccba:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dccbc:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dccbe:	6001      	str	r1, [r0, #0]
   dccc0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dccc4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dccc8:	3088      	adds	r0, #136	; 0x88
   dccca:	f7ff fa8b 	bl	dc1e4 <_ZN9IPAddressC1Ev>
}
   dccce:	4620      	mov	r0, r4
   dccd0:	bd10      	pop	{r4, pc}
	...

000dccd4 <_ZN9TCPClientC1Ei>:
   dccd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dccd8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dccda:	2300      	movs	r3, #0
   dccdc:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dccde:	4a14      	ldr	r2, [pc, #80]	; (dcd30 <_ZN9TCPClientC1Ei+0x5c>)
   dcce0:	6043      	str	r3, [r0, #4]
   dcce2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dcce4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dcce6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dcce8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dccea:	20a0      	movs	r0, #160	; 0xa0
   dccec:	460e      	mov	r6, r1
   dccee:	f7f7 f9d4 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dccf2:	4605      	mov	r5, r0
   dccf4:	b110      	cbz	r0, dccfc <_ZN9TCPClientC1Ei+0x28>
   dccf6:	4631      	mov	r1, r6
   dccf8:	f7ff ffde 	bl	dccb8 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dccfc:	2014      	movs	r0, #20
   dccfe:	f7f7 f9cc 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   dcd02:	4603      	mov	r3, r0
   dcd04:	b128      	cbz	r0, dcd12 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dcd06:	2201      	movs	r2, #1
   dcd08:	6042      	str	r2, [r0, #4]
   dcd0a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   dcd0c:	4a09      	ldr	r2, [pc, #36]	; (dcd34 <_ZN9TCPClientC1Ei+0x60>)
   dcd0e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   dcd10:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dcd12:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   dcd14:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dcd16:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   dcd18:	b128      	cbz	r0, dcd26 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dcd1a:	6843      	ldr	r3, [r0, #4]
   dcd1c:	3b01      	subs	r3, #1
   dcd1e:	6043      	str	r3, [r0, #4]
   dcd20:	b90b      	cbnz	r3, dcd26 <_ZN9TCPClientC1Ei+0x52>
   dcd22:	f7ff fddf 	bl	dc8e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   dcd26:	4620      	mov	r0, r4
   dcd28:	f7ff fed0 	bl	dcacc <_ZN9TCPClient12flush_bufferEv>
}
   dcd2c:	4620      	mov	r0, r4
   dcd2e:	bd70      	pop	{r4, r5, r6, pc}
   dcd30:	000e81bc 	.word	0x000e81bc
   dcd34:	000e81a0 	.word	0x000e81a0

000dcd38 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcd38:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   dcd3a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcd3e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   dcd40:	f7ff ffc8 	bl	dccd4 <_ZN9TCPClientC1Ei>
}
   dcd44:	4620      	mov	r0, r4
   dcd46:	bd10      	pop	{r4, pc}

000dcd48 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   dcd48:	b510      	push	{r4, lr}
   dcd4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   dcd4c:	6800      	ldr	r0, [r0, #0]
   dcd4e:	2800      	cmp	r0, #0
   dcd50:	db01      	blt.n	dcd56 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   dcd52:	f7fd fdbb 	bl	da8cc <sock_close>
    }
}
   dcd56:	4620      	mov	r0, r4
   dcd58:	bd10      	pop	{r4, pc}

000dcd5a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   dcd5a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   dcd5c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   dcd5e:	4620      	mov	r0, r4
   dcd60:	f7ff fff2 	bl	dcd48 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   dcd64:	b124      	cbz	r4, dcd70 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dcd66:	4620      	mov	r0, r4
   dcd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dcd6c:	f7f7 b997 	b.w	d409e <_ZdlPv>
   dcd70:	bd10      	pop	{r4, pc}

000dcd72 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   dcd72:	4770      	bx	lr

000dcd74 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   dcd74:	2001      	movs	r0, #1
   dcd76:	4770      	bx	lr

000dcd78 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   dcd78:	8983      	ldrh	r3, [r0, #12]
   dcd7a:	b11b      	cbz	r3, dcd84 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   dcd7c:	6903      	ldr	r3, [r0, #16]
   dcd7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcd82:	d102      	bne.n	dcd8a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   dcd84:	ed9f 0a05 	vldr	s0, [pc, #20]	; dcd9c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   dcd88:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   dcd8a:	ee07 3a90 	vmov	s15, r3
   dcd8e:	ed9f 7a04 	vldr	s14, [pc, #16]	; dcda0 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   dcd92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dcd96:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dcd9a:	4770      	bx	lr
   dcd9c:	00000000 	.word	0x00000000
   dcda0:	42c80000 	.word	0x42c80000

000dcda4 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   dcda4:	8983      	ldrh	r3, [r0, #12]
   dcda6:	b11b      	cbz	r3, dcdb0 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   dcda8:	6983      	ldr	r3, [r0, #24]
   dcdaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcdae:	d102      	bne.n	dcdb6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   dcdb0:	ed9f 0a05 	vldr	s0, [pc, #20]	; dcdc8 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   dcdb4:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   dcdb6:	ee07 3a90 	vmov	s15, r3
   dcdba:	ed9f 7a04 	vldr	s14, [pc, #16]	; dcdcc <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   dcdbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dcdc2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dcdc6:	4770      	bx	lr
   dcdc8:	00000000 	.word	0x00000000
   dcdcc:	42c80000 	.word	0x42c80000

000dcdd0 <_ZN10WiFiSignalD0Ev>:
   dcdd0:	b510      	push	{r4, lr}
   dcdd2:	2124      	movs	r1, #36	; 0x24
   dcdd4:	4604      	mov	r4, r0
   dcdd6:	f000 fa69 	bl	dd2ac <_ZdlPvj>
   dcdda:	4620      	mov	r0, r4
   dcddc:	bd10      	pop	{r4, pc}

000dcdde <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dcdde:	2200      	movs	r2, #0
   dcde0:	4611      	mov	r1, r2
   dcde2:	6840      	ldr	r0, [r0, #4]
   dcde4:	f7fd beaa 	b.w	dab3c <network_listening>

000dcde8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dcde8:	2200      	movs	r2, #0
   dcdea:	4611      	mov	r1, r2
   dcdec:	6840      	ldr	r0, [r0, #4]
   dcdee:	f7fd beb5 	b.w	dab5c <network_get_listen_timeout>

000dcdf2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dcdf2:	2200      	movs	r2, #0
   dcdf4:	6840      	ldr	r0, [r0, #4]
   dcdf6:	f7fd bea9 	b.w	dab4c <network_set_listen_timeout>

000dcdfa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dcdfa:	2200      	movs	r2, #0
   dcdfc:	f081 0101 	eor.w	r1, r1, #1
   dce00:	6840      	ldr	r0, [r0, #4]
   dce02:	f7fd be93 	b.w	dab2c <network_listen>

000dce06 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   dce06:	2300      	movs	r3, #0
   dce08:	461a      	mov	r2, r3
   dce0a:	4619      	mov	r1, r3
   dce0c:	6840      	ldr	r0, [r0, #4]
   dce0e:	f7fd be85 	b.w	dab1c <network_off>

000dce12 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dce12:	2200      	movs	r2, #0
   dce14:	4611      	mov	r1, r2
   dce16:	6840      	ldr	r0, [r0, #4]
   dce18:	f7fd be60 	b.w	daadc <network_connecting>

000dce1c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dce1c:	2200      	movs	r2, #0
   dce1e:	2102      	movs	r1, #2
   dce20:	6840      	ldr	r0, [r0, #4]
   dce22:	f7fd be63 	b.w	daaec <network_disconnect>

000dce26 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dce26:	2300      	movs	r3, #0
   dce28:	461a      	mov	r2, r3
   dce2a:	6840      	ldr	r0, [r0, #4]
   dce2c:	f7fd be4e 	b.w	daacc <network_connect>

000dce30 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   dce30:	8983      	ldrh	r3, [r0, #12]
   dce32:	b17b      	cbz	r3, dce54 <_ZNK10WiFiSignal10getQualityEv+0x24>
   dce34:	6a03      	ldr	r3, [r0, #32]
   dce36:	2b00      	cmp	r3, #0
   dce38:	db0c      	blt.n	dce54 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   dce3a:	ee07 3a90 	vmov	s15, r3
   dce3e:	eddf 6a07 	vldr	s13, [pc, #28]	; dce5c <_ZNK10WiFiSignal10getQualityEv+0x2c>
   dce42:	ed9f 0a07 	vldr	s0, [pc, #28]	; dce60 <_ZNK10WiFiSignal10getQualityEv+0x30>
   dce46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dce4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dce4e:	ee27 0a80 	vmul.f32	s0, s15, s0
   dce52:	4770      	bx	lr
    }
    return -1.0f;
   dce54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dce58:	4770      	bx	lr
   dce5a:	bf00      	nop
   dce5c:	477fff00 	.word	0x477fff00
   dce60:	42c80000 	.word	0x42c80000

000dce64 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   dce64:	8983      	ldrh	r3, [r0, #12]
   dce66:	b17b      	cbz	r3, dce88 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   dce68:	6943      	ldr	r3, [r0, #20]
   dce6a:	2b00      	cmp	r3, #0
   dce6c:	db0c      	blt.n	dce88 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   dce6e:	ee07 3a90 	vmov	s15, r3
   dce72:	eddf 6a07 	vldr	s13, [pc, #28]	; dce90 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   dce76:	ed9f 0a07 	vldr	s0, [pc, #28]	; dce94 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   dce7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dce7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dce82:	ee27 0a80 	vmul.f32	s0, s15, s0
   dce86:	4770      	bx	lr
    }
    return -1.0f;
   dce88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dce8c:	4770      	bx	lr
   dce8e:	bf00      	nop
   dce90:	477fff00 	.word	0x477fff00
   dce94:	42c80000 	.word	0x42c80000

000dce98 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dce98:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   dce9a:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dce9c:	4606      	mov	r6, r0
    inf_ = inf;
   dce9e:	f100 040c 	add.w	r4, r0, #12
   dcea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcea6:	e895 0003 	ldmia.w	r5, {r0, r1}
   dceaa:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   dceae:	6933      	ldr	r3, [r6, #16]
   dceb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dceb4:	bf0e      	itee	eq
   dceb6:	2302      	moveq	r3, #2
   dceb8:	2264      	movne	r2, #100	; 0x64
   dceba:	fb93 f3f2 	sdivne	r3, r3, r2
   dcebe:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   dcec0:	69b3      	ldr	r3, [r6, #24]
   dcec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dcec6:	bf0e      	itee	eq
   dcec8:	2300      	moveq	r3, #0
   dceca:	2264      	movne	r2, #100	; 0x64
   dcecc:	fb93 f3f2 	sdivne	r3, r3, r2
   dced0:	60b3      	str	r3, [r6, #8]
    return true;
}
   dced2:	2001      	movs	r0, #1
   dced4:	bd70      	pop	{r4, r5, r6, pc}
	...

000dced8 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   dced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   dcedc:	4b16      	ldr	r3, [pc, #88]	; (dcf38 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   dcede:	6003      	str	r3, [r0, #0]
   dcee0:	2500      	movs	r5, #0
   dcee2:	4688      	mov	r8, r1
   dcee4:	2702      	movs	r7, #2
   dcee6:	2618      	movs	r6, #24
   dcee8:	b086      	sub	sp, #24
   dceea:	6047      	str	r7, [r0, #4]
   dceec:	6085      	str	r5, [r0, #8]
   dceee:	4632      	mov	r2, r6
   dcef0:	4629      	mov	r1, r5
   dcef2:	4604      	mov	r4, r0
   dcef4:	300c      	adds	r0, #12
   dcef6:	f006 fc90 	bl	e381a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dcefa:	462a      	mov	r2, r5
   dcefc:	4629      	mov	r1, r5
   dcefe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dcf02:	f7fd fdfb 	bl	daafc <network_ready>
   dcf06:	b190      	cbz	r0, dcf2e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   dcf08:	4632      	mov	r2, r6
   dcf0a:	4629      	mov	r1, r5
   dcf0c:	4668      	mov	r0, sp
   dcf0e:	f006 fc84 	bl	e381a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dcf12:	462a      	mov	r2, r5
   dcf14:	4669      	mov	r1, sp
   dcf16:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   dcf18:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dcf1c:	f7fd fd36 	bl	da98c <wlan_connected_info>
        if (r == 0) {
   dcf20:	b920      	cbnz	r0, dcf2c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   dcf22:	4669      	mov	r1, sp
   dcf24:	4620      	mov	r0, r4
   dcf26:	f7ff ffb7 	bl	dce98 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   dcf2a:	e000      	b.n	dcf2e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   dcf2c:	6067      	str	r7, [r4, #4]
        return sig;
    }
   dcf2e:	4620      	mov	r0, r4
   dcf30:	b006      	add	sp, #24
   dcf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcf36:	bf00      	nop
   dcf38:	000e8254 	.word	0x000e8254

000dcf3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   dcf3c:	4b02      	ldr	r3, [pc, #8]	; (dcf48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   dcf3e:	2204      	movs	r2, #4
   dcf40:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   dcf42:	4a02      	ldr	r2, [pc, #8]	; (dcf4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   dcf44:	601a      	str	r2, [r3, #0]
   dcf46:	4770      	bx	lr
   dcf48:	2003e5e8 	.word	0x2003e5e8
   dcf4c:	000e8220 	.word	0x000e8220

000dcf50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dcf50:	2300      	movs	r3, #0
   dcf52:	461a      	mov	r2, r3
   dcf54:	6840      	ldr	r0, [r0, #4]
   dcf56:	f7fd bdb9 	b.w	daacc <network_connect>

000dcf5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dcf5a:	2200      	movs	r2, #0
   dcf5c:	2102      	movs	r1, #2
   dcf5e:	6840      	ldr	r0, [r0, #4]
   dcf60:	f7fd bdc4 	b.w	daaec <network_disconnect>

000dcf64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dcf64:	2200      	movs	r2, #0
   dcf66:	4611      	mov	r1, r2
   dcf68:	6840      	ldr	r0, [r0, #4]
   dcf6a:	f7fd bdb7 	b.w	daadc <network_connecting>

000dcf6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dcf6e:	2200      	movs	r2, #0
   dcf70:	4611      	mov	r1, r2
   dcf72:	6840      	ldr	r0, [r0, #4]
   dcf74:	f7fd bdc2 	b.w	daafc <network_ready>

000dcf78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dcf78:	2300      	movs	r3, #0
   dcf7a:	461a      	mov	r2, r3
   dcf7c:	4619      	mov	r1, r3
   dcf7e:	6840      	ldr	r0, [r0, #4]
   dcf80:	f7fd bdc4 	b.w	dab0c <network_on>

000dcf84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dcf84:	2300      	movs	r3, #0
   dcf86:	461a      	mov	r2, r3
   dcf88:	4619      	mov	r1, r3
   dcf8a:	6840      	ldr	r0, [r0, #4]
   dcf8c:	f7fd bdc6 	b.w	dab1c <network_off>

000dcf90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dcf90:	2200      	movs	r2, #0
   dcf92:	f081 0101 	eor.w	r1, r1, #1
   dcf96:	6840      	ldr	r0, [r0, #4]
   dcf98:	f7fd bdc8 	b.w	dab2c <network_listen>

000dcf9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dcf9c:	2200      	movs	r2, #0
   dcf9e:	6840      	ldr	r0, [r0, #4]
   dcfa0:	f7fd bdd4 	b.w	dab4c <network_set_listen_timeout>

000dcfa4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dcfa4:	2200      	movs	r2, #0
   dcfa6:	4611      	mov	r1, r2
   dcfa8:	6840      	ldr	r0, [r0, #4]
   dcfaa:	f7fd bdd7 	b.w	dab5c <network_get_listen_timeout>

000dcfae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dcfae:	2200      	movs	r2, #0
   dcfb0:	4611      	mov	r1, r2
   dcfb2:	6840      	ldr	r0, [r0, #4]
   dcfb4:	f7fd bdc2 	b.w	dab3c <network_listening>

000dcfb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dcfb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcfbc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   dcfbe:	b095      	sub	sp, #84	; 0x54
   dcfc0:	4616      	mov	r6, r2
   dcfc2:	460d      	mov	r5, r1
   dcfc4:	4607      	mov	r7, r0
    IPAddress addr;
   dcfc6:	f7ff f90d 	bl	dc1e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   dcfca:	4621      	mov	r1, r4
   dcfcc:	2220      	movs	r2, #32
   dcfce:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcfd0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dcfd2:	f006 fc22 	bl	e381a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dcfd6:	2340      	movs	r3, #64	; 0x40
   dcfd8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dcfda:	4621      	mov	r1, r4
   dcfdc:	466b      	mov	r3, sp
   dcfde:	aa0c      	add	r2, sp, #48	; 0x30
   dcfe0:	4630      	mov	r0, r6
   dcfe2:	f7fd fa9b 	bl	da51c <netdb_getaddrinfo>
    if (!r) {
   dcfe6:	4604      	mov	r4, r0
   dcfe8:	2800      	cmp	r0, #0
   dcfea:	d144      	bne.n	dd076 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcfec:	4602      	mov	r2, r0
   dcfee:	2101      	movs	r1, #1
   dcff0:	6868      	ldr	r0, [r5, #4]
   dcff2:	f7fd fd83 	bl	daafc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcff6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dcff8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dcffa:	4622      	mov	r2, r4
   dcffc:	6868      	ldr	r0, [r5, #4]
   dcffe:	f7fd fd7d 	bl	daafc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd002:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dd004:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   dd006:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd008:	2e00      	cmp	r6, #0
   dd00a:	d034      	beq.n	dd076 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   dd00c:	2900      	cmp	r1, #0
   dd00e:	d132      	bne.n	dd076 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dd010:	6873      	ldr	r3, [r6, #4]
   dd012:	2b02      	cmp	r3, #2
   dd014:	d002      	beq.n	dd01c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   dd016:	2b0a      	cmp	r3, #10
   dd018:	d009      	beq.n	dd02e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   dd01a:	e02a      	b.n	dd072 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   dd01c:	f1b8 0f00 	cmp.w	r8, #0
   dd020:	d027      	beq.n	dd072 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dd022:	6971      	ldr	r1, [r6, #20]
   dd024:	4638      	mov	r0, r7
   dd026:	3104      	adds	r1, #4
   dd028:	f7ff f91f 	bl	dc26a <_ZN9IPAddressaSEPKh>
   dd02c:	e020      	b.n	dd070 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   dd02e:	f1b9 0f00 	cmp.w	r9, #0
   dd032:	d01e      	beq.n	dd072 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dd034:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dd036:	2211      	movs	r2, #17
   dd038:	a801      	add	r0, sp, #4
   dd03a:	f006 fbee 	bl	e381a <memset>
                    a.v = 6;
   dd03e:	2306      	movs	r3, #6
   dd040:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dd044:	ad01      	add	r5, sp, #4
   dd046:	f104 0308 	add.w	r3, r4, #8
   dd04a:	3418      	adds	r4, #24
   dd04c:	6818      	ldr	r0, [r3, #0]
   dd04e:	6859      	ldr	r1, [r3, #4]
   dd050:	462a      	mov	r2, r5
   dd052:	c203      	stmia	r2!, {r0, r1}
   dd054:	3308      	adds	r3, #8
   dd056:	42a3      	cmp	r3, r4
   dd058:	4615      	mov	r5, r2
   dd05a:	d1f7      	bne.n	dd04c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dd05c:	a901      	add	r1, sp, #4
   dd05e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dd060:	ad07      	add	r5, sp, #28
   dd062:	f7ff f8cd 	bl	dc200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dd066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd068:	1d3c      	adds	r4, r7, #4
   dd06a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd06c:	682b      	ldr	r3, [r5, #0]
   dd06e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dd070:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dd072:	69f6      	ldr	r6, [r6, #28]
   dd074:	e7c8      	b.n	dd008 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dd076:	9800      	ldr	r0, [sp, #0]
   dd078:	f7fd fa48 	bl	da50c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dd07c:	4638      	mov	r0, r7
   dd07e:	b015      	add	sp, #84	; 0x54
   dd080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd084 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dd084:	4b02      	ldr	r3, [pc, #8]	; (dd090 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dd086:	4a03      	ldr	r2, [pc, #12]	; (dd094 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dd088:	601a      	str	r2, [r3, #0]
   dd08a:	2200      	movs	r2, #0
   dd08c:	605a      	str	r2, [r3, #4]
   dd08e:	4770      	bx	lr
   dd090:	2003e5f0 	.word	0x2003e5f0
   dd094:	000e8278 	.word	0x000e8278

000dd098 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dd098:	b510      	push	{r4, lr}
   dd09a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dd09c:	f000 f898 	bl	dd1d0 <_ZN8particle7globals11instanceSpiEv>
   dd0a0:	f7fd fe89 	bl	dadb6 <_ZN8SPIClass9isEnabledEv>
   dd0a4:	b128      	cbz	r0, dd0b2 <pinAvailable+0x1a>
   dd0a6:	f1a4 030b 	sub.w	r3, r4, #11
   dd0aa:	2b02      	cmp	r3, #2
   dd0ac:	d801      	bhi.n	dd0b2 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   dd0ae:	2000      	movs	r0, #0
   dd0b0:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dd0b2:	f000 f8c7 	bl	dd244 <_Z19__fetch_global_Wirev>
   dd0b6:	f7ff fabc 	bl	dc632 <_ZN7TwoWire9isEnabledEv>
   dd0ba:	b108      	cbz	r0, dd0c0 <pinAvailable+0x28>
   dd0bc:	2c01      	cmp	r4, #1
   dd0be:	d9f6      	bls.n	dd0ae <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dd0c0:	f7ff f9f2 	bl	dc4a8 <_Z22__fetch_global_Serial1v>
   dd0c4:	f7ff f9ed 	bl	dc4a2 <_ZN11USARTSerial9isEnabledEv>
   dd0c8:	b118      	cbz	r0, dd0d2 <pinAvailable+0x3a>
   dd0ca:	f1a4 0309 	sub.w	r3, r4, #9
   dd0ce:	2b01      	cmp	r3, #1
   dd0d0:	d9ed      	bls.n	dd0ae <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dd0d2:	2c23      	cmp	r4, #35	; 0x23
   dd0d4:	bf8c      	ite	hi
   dd0d6:	2000      	movhi	r0, #0
   dd0d8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dd0da:	bd10      	pop	{r4, pc}

000dd0dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd0dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dd0de:	b538      	push	{r3, r4, r5, lr}
   dd0e0:	4604      	mov	r4, r0
   dd0e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd0e4:	d80a      	bhi.n	dd0fc <pinMode+0x20>
   dd0e6:	29ff      	cmp	r1, #255	; 0xff
   dd0e8:	d008      	beq.n	dd0fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dd0ea:	f7ff ffd5 	bl	dd098 <pinAvailable>
   dd0ee:	b128      	cbz	r0, dd0fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dd0f0:	4629      	mov	r1, r5
   dd0f2:	4620      	mov	r0, r4
}
   dd0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dd0f8:	f7fd ba28 	b.w	da54c <HAL_Pin_Mode>
   dd0fc:	bd38      	pop	{r3, r4, r5, pc}

000dd0fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dd0fe:	b538      	push	{r3, r4, r5, lr}
   dd100:	4604      	mov	r4, r0
   dd102:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd104:	f7fd fa2a 	bl	da55c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dd108:	28ff      	cmp	r0, #255	; 0xff
   dd10a:	d010      	beq.n	dd12e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dd10c:	2806      	cmp	r0, #6
   dd10e:	d804      	bhi.n	dd11a <digitalWrite+0x1c>
   dd110:	234d      	movs	r3, #77	; 0x4d
   dd112:	fa23 f000 	lsr.w	r0, r3, r0
   dd116:	07c3      	lsls	r3, r0, #31
   dd118:	d409      	bmi.n	dd12e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dd11a:	4620      	mov	r0, r4
   dd11c:	f7ff ffbc 	bl	dd098 <pinAvailable>
   dd120:	b128      	cbz	r0, dd12e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dd122:	4629      	mov	r1, r5
   dd124:	4620      	mov	r0, r4
}
   dd126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dd12a:	f7fd ba1f 	b.w	da56c <HAL_GPIO_Write>
   dd12e:	bd38      	pop	{r3, r4, r5, pc}

000dd130 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dd130:	b510      	push	{r4, lr}
   dd132:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd134:	f7fd fa12 	bl	da55c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dd138:	3804      	subs	r0, #4
   dd13a:	b2c0      	uxtb	r0, r0
   dd13c:	2801      	cmp	r0, #1
   dd13e:	d908      	bls.n	dd152 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dd140:	4620      	mov	r0, r4
   dd142:	f7ff ffa9 	bl	dd098 <pinAvailable>
   dd146:	b120      	cbz	r0, dd152 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dd148:	4620      	mov	r0, r4
}
   dd14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dd14e:	f7fd ba15 	b.w	da57c <HAL_GPIO_Read>
}
   dd152:	2000      	movs	r0, #0
   dd154:	bd10      	pop	{r4, pc}

000dd156 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dd156:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dd158:	b510      	push	{r4, lr}
   dd15a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dd15c:	bf9c      	itt	ls
   dd15e:	340e      	addls	r4, #14
   dd160:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dd162:	4620      	mov	r0, r4
   dd164:	f7ff ff98 	bl	dd098 <pinAvailable>
   dd168:	b150      	cbz	r0, dd180 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dd16a:	2103      	movs	r1, #3
   dd16c:	4620      	mov	r0, r4
   dd16e:	f7fd f9e5 	bl	da53c <HAL_Validate_Pin_Function>
   dd172:	2803      	cmp	r0, #3
   dd174:	d104      	bne.n	dd180 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dd176:	4620      	mov	r0, r4
}
   dd178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dd17c:	f7fd ba1e 	b.w	da5bc <HAL_ADC_Read>
}
   dd180:	2000      	movs	r0, #0
   dd182:	bd10      	pop	{r4, pc}

000dd184 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dd184:	b538      	push	{r3, r4, r5, lr}
   dd186:	4604      	mov	r4, r0
   dd188:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dd18a:	f7ff ff85 	bl	dd098 <pinAvailable>
   dd18e:	b1f0      	cbz	r0, dd1ce <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dd190:	2104      	movs	r1, #4
   dd192:	4620      	mov	r0, r4
   dd194:	f7fd f9d2 	bl	da53c <HAL_Validate_Pin_Function>
   dd198:	2804      	cmp	r0, #4
   dd19a:	d105      	bne.n	dd1a8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dd19c:	b2a9      	uxth	r1, r5
   dd19e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dd1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dd1a4:	f7fd ba02 	b.w	da5ac <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dd1a8:	2102      	movs	r1, #2
   dd1aa:	4620      	mov	r0, r4
   dd1ac:	f7fd f9c6 	bl	da53c <HAL_Validate_Pin_Function>
   dd1b0:	2802      	cmp	r0, #2
   dd1b2:	d10c      	bne.n	dd1ce <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dd1b4:	4620      	mov	r0, r4
   dd1b6:	f7fd f9d1 	bl	da55c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dd1ba:	2801      	cmp	r0, #1
   dd1bc:	d001      	beq.n	dd1c2 <_Z11analogWritetm+0x3e>
   dd1be:	2804      	cmp	r0, #4
   dd1c0:	d105      	bne.n	dd1ce <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd1c2:	4629      	mov	r1, r5
   dd1c4:	4620      	mov	r0, r4
    }
}
   dd1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd1ca:	f7fd b9ff 	b.w	da5cc <HAL_PWM_Write_Ext>
   dd1ce:	bd38      	pop	{r3, r4, r5, pc}

000dd1d0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   dd1d0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   dd1d2:	4d0b      	ldr	r5, [pc, #44]	; (dd200 <_ZN8particle7globals11instanceSpiEv+0x30>)
   dd1d4:	6829      	ldr	r1, [r5, #0]
   dd1d6:	f011 0401 	ands.w	r4, r1, #1
   dd1da:	d10f      	bne.n	dd1fc <_ZN8particle7globals11instanceSpiEv+0x2c>
   dd1dc:	4628      	mov	r0, r5
   dd1de:	f7f6 ff62 	bl	d40a6 <__cxa_guard_acquire>
   dd1e2:	b158      	cbz	r0, dd1fc <_ZN8particle7globals11instanceSpiEv+0x2c>
   dd1e4:	4621      	mov	r1, r4
   dd1e6:	4807      	ldr	r0, [pc, #28]	; (dd204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   dd1e8:	f7fd fdc4 	bl	dad74 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dd1ec:	4628      	mov	r0, r5
   dd1ee:	f7f6 ff5f 	bl	d40b0 <__cxa_guard_release>
   dd1f2:	4a05      	ldr	r2, [pc, #20]	; (dd208 <_ZN8particle7globals11instanceSpiEv+0x38>)
   dd1f4:	4905      	ldr	r1, [pc, #20]	; (dd20c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   dd1f6:	4803      	ldr	r0, [pc, #12]	; (dd204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   dd1f8:	f000 f84a 	bl	dd290 <__aeabi_atexit>
    return instance;
}
   dd1fc:	4801      	ldr	r0, [pc, #4]	; (dd204 <_ZN8particle7globals11instanceSpiEv+0x34>)
   dd1fe:	bd38      	pop	{r3, r4, r5, pc}
   dd200:	2003e604 	.word	0x2003e604
   dd204:	2003e5f8 	.word	0x2003e5f8
   dd208:	2003d6b0 	.word	0x2003d6b0
   dd20c:	000dad59 	.word	0x000dad59

000dd210 <_Z17acquireWireBufferv>:
   dd210:	b570      	push	{r4, r5, r6, lr}
   dd212:	4604      	mov	r4, r0
   dd214:	2514      	movs	r5, #20
   dd216:	462a      	mov	r2, r5
   dd218:	4e09      	ldr	r6, [pc, #36]	; (dd240 <_Z17acquireWireBufferv+0x30>)
   dd21a:	2100      	movs	r1, #0
   dd21c:	f006 fafd 	bl	e381a <memset>
   dd220:	8025      	strh	r5, [r4, #0]
   dd222:	2520      	movs	r5, #32
   dd224:	4631      	mov	r1, r6
   dd226:	60a5      	str	r5, [r4, #8]
   dd228:	6125      	str	r5, [r4, #16]
   dd22a:	4628      	mov	r0, r5
   dd22c:	f000 f840 	bl	dd2b0 <_ZnajRKSt9nothrow_t>
   dd230:	4631      	mov	r1, r6
   dd232:	6060      	str	r0, [r4, #4]
   dd234:	4628      	mov	r0, r5
   dd236:	f000 f83b 	bl	dd2b0 <_ZnajRKSt9nothrow_t>
   dd23a:	60e0      	str	r0, [r4, #12]
   dd23c:	4620      	mov	r0, r4
   dd23e:	bd70      	pop	{r4, r5, r6, pc}
   dd240:	000e82a4 	.word	0x000e82a4

000dd244 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dd244:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd246:	4d0e      	ldr	r5, [pc, #56]	; (dd280 <_Z19__fetch_global_Wirev+0x3c>)
   dd248:	6829      	ldr	r1, [r5, #0]
   dd24a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dd24e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd250:	d113      	bne.n	dd27a <_Z19__fetch_global_Wirev+0x36>
   dd252:	4628      	mov	r0, r5
   dd254:	f7f6 ff27 	bl	d40a6 <__cxa_guard_acquire>
   dd258:	b178      	cbz	r0, dd27a <_Z19__fetch_global_Wirev+0x36>
   dd25a:	a801      	add	r0, sp, #4
   dd25c:	f7ff ffd8 	bl	dd210 <_Z17acquireWireBufferv>
   dd260:	aa01      	add	r2, sp, #4
   dd262:	4621      	mov	r1, r4
   dd264:	4807      	ldr	r0, [pc, #28]	; (dd284 <_Z19__fetch_global_Wirev+0x40>)
   dd266:	f7ff f985 	bl	dc574 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dd26a:	4628      	mov	r0, r5
   dd26c:	f7f6 ff20 	bl	d40b0 <__cxa_guard_release>
   dd270:	4a05      	ldr	r2, [pc, #20]	; (dd288 <_Z19__fetch_global_Wirev+0x44>)
   dd272:	4906      	ldr	r1, [pc, #24]	; (dd28c <_Z19__fetch_global_Wirev+0x48>)
   dd274:	4803      	ldr	r0, [pc, #12]	; (dd284 <_Z19__fetch_global_Wirev+0x40>)
   dd276:	f000 f80b 	bl	dd290 <__aeabi_atexit>
	return wire;
}
   dd27a:	4802      	ldr	r0, [pc, #8]	; (dd284 <_Z19__fetch_global_Wirev+0x40>)
   dd27c:	b007      	add	sp, #28
   dd27e:	bd30      	pop	{r4, r5, pc}
   dd280:	2003e60c 	.word	0x2003e60c
   dd284:	2003e610 	.word	0x2003e610
   dd288:	2003d6b0 	.word	0x2003d6b0
   dd28c:	000dc51d 	.word	0x000dc51d

000dd290 <__aeabi_atexit>:
   dd290:	460b      	mov	r3, r1
   dd292:	4601      	mov	r1, r0
   dd294:	4618      	mov	r0, r3
   dd296:	f006 b9ab 	b.w	e35f0 <__cxa_atexit>
	...

000dd29c <_ZSt15get_new_handlerv>:
   dd29c:	4b02      	ldr	r3, [pc, #8]	; (dd2a8 <_ZSt15get_new_handlerv+0xc>)
   dd29e:	6818      	ldr	r0, [r3, #0]
   dd2a0:	f3bf 8f5f 	dmb	sy
   dd2a4:	4770      	bx	lr
   dd2a6:	bf00      	nop
   dd2a8:	2003e624 	.word	0x2003e624

000dd2ac <_ZdlPvj>:
   dd2ac:	f7f6 bef7 	b.w	d409e <_ZdlPv>

000dd2b0 <_ZnajRKSt9nothrow_t>:
   dd2b0:	f000 b800 	b.w	dd2b4 <_ZnwjRKSt9nothrow_t>

000dd2b4 <_ZnwjRKSt9nothrow_t>:
   dd2b4:	b510      	push	{r4, lr}
   dd2b6:	2800      	cmp	r0, #0
   dd2b8:	bf14      	ite	ne
   dd2ba:	4604      	movne	r4, r0
   dd2bc:	2401      	moveq	r4, #1
   dd2be:	4620      	mov	r0, r4
   dd2c0:	f7fd fc8c 	bl	dabdc <malloc>
   dd2c4:	b920      	cbnz	r0, dd2d0 <_ZnwjRKSt9nothrow_t+0x1c>
   dd2c6:	f7ff ffe9 	bl	dd29c <_ZSt15get_new_handlerv>
   dd2ca:	b108      	cbz	r0, dd2d0 <_ZnwjRKSt9nothrow_t+0x1c>
   dd2cc:	4780      	blx	r0
   dd2ce:	e7f6      	b.n	dd2be <_ZnwjRKSt9nothrow_t+0xa>
   dd2d0:	bd10      	pop	{r4, pc}

000dd2d2 <_ZSt25__throw_bad_function_callv>:
   dd2d2:	b508      	push	{r3, lr}
   dd2d4:	f7fd fcc2 	bl	dac5c <abort>

000dd2d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd2d8:	4b18      	ldr	r3, [pc, #96]	; (dd33c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd2da:	681a      	ldr	r2, [r3, #0]
   dd2dc:	07d1      	lsls	r1, r2, #31
   dd2de:	bf5c      	itt	pl
   dd2e0:	2201      	movpl	r2, #1
   dd2e2:	601a      	strpl	r2, [r3, #0]
   dd2e4:	4b16      	ldr	r3, [pc, #88]	; (dd340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd2e6:	681a      	ldr	r2, [r3, #0]
   dd2e8:	07d2      	lsls	r2, r2, #31
   dd2ea:	bf5c      	itt	pl
   dd2ec:	2201      	movpl	r2, #1
   dd2ee:	601a      	strpl	r2, [r3, #0]
   dd2f0:	4b14      	ldr	r3, [pc, #80]	; (dd344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd2f2:	681a      	ldr	r2, [r3, #0]
   dd2f4:	07d0      	lsls	r0, r2, #31
   dd2f6:	bf5c      	itt	pl
   dd2f8:	2201      	movpl	r2, #1
   dd2fa:	601a      	strpl	r2, [r3, #0]
   dd2fc:	4b12      	ldr	r3, [pc, #72]	; (dd348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd2fe:	681a      	ldr	r2, [r3, #0]
   dd300:	07d1      	lsls	r1, r2, #31
   dd302:	bf5c      	itt	pl
   dd304:	2201      	movpl	r2, #1
   dd306:	601a      	strpl	r2, [r3, #0]
   dd308:	4b10      	ldr	r3, [pc, #64]	; (dd34c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd30a:	681a      	ldr	r2, [r3, #0]
   dd30c:	07d2      	lsls	r2, r2, #31
   dd30e:	bf5c      	itt	pl
   dd310:	2201      	movpl	r2, #1
   dd312:	601a      	strpl	r2, [r3, #0]
   dd314:	4b0e      	ldr	r3, [pc, #56]	; (dd350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd316:	681a      	ldr	r2, [r3, #0]
   dd318:	07d0      	lsls	r0, r2, #31
   dd31a:	bf5c      	itt	pl
   dd31c:	2201      	movpl	r2, #1
   dd31e:	601a      	strpl	r2, [r3, #0]
   dd320:	4b0c      	ldr	r3, [pc, #48]	; (dd354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd322:	681a      	ldr	r2, [r3, #0]
   dd324:	07d1      	lsls	r1, r2, #31
   dd326:	bf5c      	itt	pl
   dd328:	2201      	movpl	r2, #1
   dd32a:	601a      	strpl	r2, [r3, #0]
   dd32c:	4b0a      	ldr	r3, [pc, #40]	; (dd358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd32e:	681a      	ldr	r2, [r3, #0]
   dd330:	07d2      	lsls	r2, r2, #31
   dd332:	bf5c      	itt	pl
   dd334:	2201      	movpl	r2, #1
   dd336:	601a      	strpl	r2, [r3, #0]
   dd338:	4770      	bx	lr
   dd33a:	bf00      	nop
   dd33c:	2003e644 	.word	0x2003e644
   dd340:	2003e640 	.word	0x2003e640
   dd344:	2003e63c 	.word	0x2003e63c
   dd348:	2003e638 	.word	0x2003e638
   dd34c:	2003e634 	.word	0x2003e634
   dd350:	2003e630 	.word	0x2003e630
   dd354:	2003e62c 	.word	0x2003e62c
   dd358:	2003e628 	.word	0x2003e628

000dd35c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dd35c:	4b24      	ldr	r3, [pc, #144]	; (dd3f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dd35e:	681a      	ldr	r2, [r3, #0]
   dd360:	07d0      	lsls	r0, r2, #31
   dd362:	bf5c      	itt	pl
   dd364:	2201      	movpl	r2, #1
   dd366:	601a      	strpl	r2, [r3, #0]
   dd368:	4b22      	ldr	r3, [pc, #136]	; (dd3f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dd36a:	681a      	ldr	r2, [r3, #0]
   dd36c:	07d1      	lsls	r1, r2, #31
   dd36e:	bf5c      	itt	pl
   dd370:	2201      	movpl	r2, #1
   dd372:	601a      	strpl	r2, [r3, #0]
   dd374:	4b20      	ldr	r3, [pc, #128]	; (dd3f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dd376:	681a      	ldr	r2, [r3, #0]
   dd378:	07d2      	lsls	r2, r2, #31
   dd37a:	bf5c      	itt	pl
   dd37c:	2201      	movpl	r2, #1
   dd37e:	601a      	strpl	r2, [r3, #0]
   dd380:	4b1e      	ldr	r3, [pc, #120]	; (dd3fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dd382:	681a      	ldr	r2, [r3, #0]
   dd384:	07d0      	lsls	r0, r2, #31
   dd386:	bf5c      	itt	pl
   dd388:	2201      	movpl	r2, #1
   dd38a:	601a      	strpl	r2, [r3, #0]
   dd38c:	4b1c      	ldr	r3, [pc, #112]	; (dd400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dd38e:	681a      	ldr	r2, [r3, #0]
   dd390:	07d1      	lsls	r1, r2, #31
   dd392:	bf5c      	itt	pl
   dd394:	2201      	movpl	r2, #1
   dd396:	601a      	strpl	r2, [r3, #0]
   dd398:	4b1a      	ldr	r3, [pc, #104]	; (dd404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dd39a:	681a      	ldr	r2, [r3, #0]
   dd39c:	07d2      	lsls	r2, r2, #31
   dd39e:	bf5c      	itt	pl
   dd3a0:	2201      	movpl	r2, #1
   dd3a2:	601a      	strpl	r2, [r3, #0]
   dd3a4:	4b18      	ldr	r3, [pc, #96]	; (dd408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dd3a6:	681a      	ldr	r2, [r3, #0]
   dd3a8:	07d0      	lsls	r0, r2, #31
   dd3aa:	bf5c      	itt	pl
   dd3ac:	2201      	movpl	r2, #1
   dd3ae:	601a      	strpl	r2, [r3, #0]
   dd3b0:	4b16      	ldr	r3, [pc, #88]	; (dd40c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dd3b2:	681a      	ldr	r2, [r3, #0]
   dd3b4:	07d1      	lsls	r1, r2, #31
   dd3b6:	bf5c      	itt	pl
   dd3b8:	2201      	movpl	r2, #1
   dd3ba:	601a      	strpl	r2, [r3, #0]
   dd3bc:	4b14      	ldr	r3, [pc, #80]	; (dd410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dd3be:	681a      	ldr	r2, [r3, #0]
   dd3c0:	07d2      	lsls	r2, r2, #31
   dd3c2:	bf5c      	itt	pl
   dd3c4:	2201      	movpl	r2, #1
   dd3c6:	601a      	strpl	r2, [r3, #0]
   dd3c8:	4b12      	ldr	r3, [pc, #72]	; (dd414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dd3ca:	681a      	ldr	r2, [r3, #0]
   dd3cc:	07d0      	lsls	r0, r2, #31
   dd3ce:	bf5c      	itt	pl
   dd3d0:	2201      	movpl	r2, #1
   dd3d2:	601a      	strpl	r2, [r3, #0]
   dd3d4:	4b10      	ldr	r3, [pc, #64]	; (dd418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dd3d6:	681a      	ldr	r2, [r3, #0]
   dd3d8:	07d1      	lsls	r1, r2, #31
   dd3da:	bf5c      	itt	pl
   dd3dc:	2201      	movpl	r2, #1
   dd3de:	601a      	strpl	r2, [r3, #0]
   dd3e0:	4b0e      	ldr	r3, [pc, #56]	; (dd41c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dd3e2:	681a      	ldr	r2, [r3, #0]
   dd3e4:	07d2      	lsls	r2, r2, #31
   dd3e6:	bf5c      	itt	pl
   dd3e8:	2201      	movpl	r2, #1
   dd3ea:	601a      	strpl	r2, [r3, #0]
   dd3ec:	4770      	bx	lr
   dd3ee:	bf00      	nop
   dd3f0:	2003e674 	.word	0x2003e674
   dd3f4:	2003e670 	.word	0x2003e670
   dd3f8:	2003e66c 	.word	0x2003e66c
   dd3fc:	2003e668 	.word	0x2003e668
   dd400:	2003e664 	.word	0x2003e664
   dd404:	2003e660 	.word	0x2003e660
   dd408:	2003e65c 	.word	0x2003e65c
   dd40c:	2003e658 	.word	0x2003e658
   dd410:	2003e654 	.word	0x2003e654
   dd414:	2003e650 	.word	0x2003e650
   dd418:	2003e64c 	.word	0x2003e64c
   dd41c:	2003e648 	.word	0x2003e648

000dd420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dd420:	4b24      	ldr	r3, [pc, #144]	; (dd4b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dd422:	681a      	ldr	r2, [r3, #0]
   dd424:	07d0      	lsls	r0, r2, #31
   dd426:	bf5c      	itt	pl
   dd428:	2201      	movpl	r2, #1
   dd42a:	601a      	strpl	r2, [r3, #0]
   dd42c:	4b22      	ldr	r3, [pc, #136]	; (dd4b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dd42e:	681a      	ldr	r2, [r3, #0]
   dd430:	07d1      	lsls	r1, r2, #31
   dd432:	bf5c      	itt	pl
   dd434:	2201      	movpl	r2, #1
   dd436:	601a      	strpl	r2, [r3, #0]
   dd438:	4b20      	ldr	r3, [pc, #128]	; (dd4bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dd43a:	681a      	ldr	r2, [r3, #0]
   dd43c:	07d2      	lsls	r2, r2, #31
   dd43e:	bf5c      	itt	pl
   dd440:	2201      	movpl	r2, #1
   dd442:	601a      	strpl	r2, [r3, #0]
   dd444:	4b1e      	ldr	r3, [pc, #120]	; (dd4c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dd446:	681a      	ldr	r2, [r3, #0]
   dd448:	07d0      	lsls	r0, r2, #31
   dd44a:	bf5c      	itt	pl
   dd44c:	2201      	movpl	r2, #1
   dd44e:	601a      	strpl	r2, [r3, #0]
   dd450:	4b1c      	ldr	r3, [pc, #112]	; (dd4c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dd452:	681a      	ldr	r2, [r3, #0]
   dd454:	07d1      	lsls	r1, r2, #31
   dd456:	bf5c      	itt	pl
   dd458:	2201      	movpl	r2, #1
   dd45a:	601a      	strpl	r2, [r3, #0]
   dd45c:	4b1a      	ldr	r3, [pc, #104]	; (dd4c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dd45e:	681a      	ldr	r2, [r3, #0]
   dd460:	07d2      	lsls	r2, r2, #31
   dd462:	bf5c      	itt	pl
   dd464:	2201      	movpl	r2, #1
   dd466:	601a      	strpl	r2, [r3, #0]
   dd468:	4b18      	ldr	r3, [pc, #96]	; (dd4cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dd46a:	681a      	ldr	r2, [r3, #0]
   dd46c:	07d0      	lsls	r0, r2, #31
   dd46e:	bf5c      	itt	pl
   dd470:	2201      	movpl	r2, #1
   dd472:	601a      	strpl	r2, [r3, #0]
   dd474:	4b16      	ldr	r3, [pc, #88]	; (dd4d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dd476:	681a      	ldr	r2, [r3, #0]
   dd478:	07d1      	lsls	r1, r2, #31
   dd47a:	bf5c      	itt	pl
   dd47c:	2201      	movpl	r2, #1
   dd47e:	601a      	strpl	r2, [r3, #0]
   dd480:	4b14      	ldr	r3, [pc, #80]	; (dd4d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dd482:	681a      	ldr	r2, [r3, #0]
   dd484:	07d2      	lsls	r2, r2, #31
   dd486:	bf5c      	itt	pl
   dd488:	2201      	movpl	r2, #1
   dd48a:	601a      	strpl	r2, [r3, #0]
   dd48c:	4b12      	ldr	r3, [pc, #72]	; (dd4d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dd48e:	681a      	ldr	r2, [r3, #0]
   dd490:	07d0      	lsls	r0, r2, #31
   dd492:	bf5c      	itt	pl
   dd494:	2201      	movpl	r2, #1
   dd496:	601a      	strpl	r2, [r3, #0]
   dd498:	4b10      	ldr	r3, [pc, #64]	; (dd4dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dd49a:	681a      	ldr	r2, [r3, #0]
   dd49c:	07d1      	lsls	r1, r2, #31
   dd49e:	bf5c      	itt	pl
   dd4a0:	2201      	movpl	r2, #1
   dd4a2:	601a      	strpl	r2, [r3, #0]
   dd4a4:	4b0e      	ldr	r3, [pc, #56]	; (dd4e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dd4a6:	681a      	ldr	r2, [r3, #0]
   dd4a8:	07d2      	lsls	r2, r2, #31
   dd4aa:	bf5c      	itt	pl
   dd4ac:	2201      	movpl	r2, #1
   dd4ae:	601a      	strpl	r2, [r3, #0]
   dd4b0:	4770      	bx	lr
   dd4b2:	bf00      	nop
   dd4b4:	2003e6a4 	.word	0x2003e6a4
   dd4b8:	2003e6a0 	.word	0x2003e6a0
   dd4bc:	2003e69c 	.word	0x2003e69c
   dd4c0:	2003e698 	.word	0x2003e698
   dd4c4:	2003e694 	.word	0x2003e694
   dd4c8:	2003e690 	.word	0x2003e690
   dd4cc:	2003e68c 	.word	0x2003e68c
   dd4d0:	2003e688 	.word	0x2003e688
   dd4d4:	2003e684 	.word	0x2003e684
   dd4d8:	2003e680 	.word	0x2003e680
   dd4dc:	2003e67c 	.word	0x2003e67c
   dd4e0:	2003e678 	.word	0x2003e678

000dd4e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd4e4:	4b18      	ldr	r3, [pc, #96]	; (dd548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd4e6:	681a      	ldr	r2, [r3, #0]
   dd4e8:	07d1      	lsls	r1, r2, #31
   dd4ea:	bf5c      	itt	pl
   dd4ec:	2201      	movpl	r2, #1
   dd4ee:	601a      	strpl	r2, [r3, #0]
   dd4f0:	4b16      	ldr	r3, [pc, #88]	; (dd54c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd4f2:	681a      	ldr	r2, [r3, #0]
   dd4f4:	07d2      	lsls	r2, r2, #31
   dd4f6:	bf5c      	itt	pl
   dd4f8:	2201      	movpl	r2, #1
   dd4fa:	601a      	strpl	r2, [r3, #0]
   dd4fc:	4b14      	ldr	r3, [pc, #80]	; (dd550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd4fe:	681a      	ldr	r2, [r3, #0]
   dd500:	07d0      	lsls	r0, r2, #31
   dd502:	bf5c      	itt	pl
   dd504:	2201      	movpl	r2, #1
   dd506:	601a      	strpl	r2, [r3, #0]
   dd508:	4b12      	ldr	r3, [pc, #72]	; (dd554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd50a:	681a      	ldr	r2, [r3, #0]
   dd50c:	07d1      	lsls	r1, r2, #31
   dd50e:	bf5c      	itt	pl
   dd510:	2201      	movpl	r2, #1
   dd512:	601a      	strpl	r2, [r3, #0]
   dd514:	4b10      	ldr	r3, [pc, #64]	; (dd558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd516:	681a      	ldr	r2, [r3, #0]
   dd518:	07d2      	lsls	r2, r2, #31
   dd51a:	bf5c      	itt	pl
   dd51c:	2201      	movpl	r2, #1
   dd51e:	601a      	strpl	r2, [r3, #0]
   dd520:	4b0e      	ldr	r3, [pc, #56]	; (dd55c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd522:	681a      	ldr	r2, [r3, #0]
   dd524:	07d0      	lsls	r0, r2, #31
   dd526:	bf5c      	itt	pl
   dd528:	2201      	movpl	r2, #1
   dd52a:	601a      	strpl	r2, [r3, #0]
   dd52c:	4b0c      	ldr	r3, [pc, #48]	; (dd560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd52e:	681a      	ldr	r2, [r3, #0]
   dd530:	07d1      	lsls	r1, r2, #31
   dd532:	bf5c      	itt	pl
   dd534:	2201      	movpl	r2, #1
   dd536:	601a      	strpl	r2, [r3, #0]
   dd538:	4b0a      	ldr	r3, [pc, #40]	; (dd564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd53a:	681a      	ldr	r2, [r3, #0]
   dd53c:	07d2      	lsls	r2, r2, #31
   dd53e:	bf5c      	itt	pl
   dd540:	2201      	movpl	r2, #1
   dd542:	601a      	strpl	r2, [r3, #0]
   dd544:	4770      	bx	lr
   dd546:	bf00      	nop
   dd548:	2003e6c4 	.word	0x2003e6c4
   dd54c:	2003e6c0 	.word	0x2003e6c0
   dd550:	2003e6bc 	.word	0x2003e6bc
   dd554:	2003e6b8 	.word	0x2003e6b8
   dd558:	2003e6b4 	.word	0x2003e6b4
   dd55c:	2003e6b0 	.word	0x2003e6b0
   dd560:	2003e6ac 	.word	0x2003e6ac
   dd564:	2003e6a8 	.word	0x2003e6a8

000dd568 <atan>:
   dd568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd56c:	ec55 4b10 	vmov	r4, r5, d0
   dd570:	4bd1      	ldr	r3, [pc, #836]	; (dd8b8 <atan+0x350>)
   dd572:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dd576:	429e      	cmp	r6, r3
   dd578:	46ab      	mov	fp, r5
   dd57a:	dd10      	ble.n	dd59e <atan+0x36>
   dd57c:	4bcf      	ldr	r3, [pc, #828]	; (dd8bc <atan+0x354>)
   dd57e:	429e      	cmp	r6, r3
   dd580:	f300 80b2 	bgt.w	dd6e8 <atan+0x180>
   dd584:	f000 80ad 	beq.w	dd6e2 <atan+0x17a>
   dd588:	f1bb 0f00 	cmp.w	fp, #0
   dd58c:	f340 80fd 	ble.w	dd78a <atan+0x222>
   dd590:	a5ad      	add	r5, pc, #692	; (adr r5, dd848 <atan+0x2e0>)
   dd592:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd596:	ec45 4b10 	vmov	d0, r4, r5
   dd59a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd59e:	4bc8      	ldr	r3, [pc, #800]	; (dd8c0 <atan+0x358>)
   dd5a0:	429e      	cmp	r6, r3
   dd5a2:	f300 80c0 	bgt.w	dd726 <atan+0x1be>
   dd5a6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dd5aa:	429e      	cmp	r6, r3
   dd5ac:	f340 80a8 	ble.w	dd700 <atan+0x198>
   dd5b0:	f04f 3aff 	mov.w	sl, #4294967295
   dd5b4:	4622      	mov	r2, r4
   dd5b6:	462b      	mov	r3, r5
   dd5b8:	4620      	mov	r0, r4
   dd5ba:	4629      	mov	r1, r5
   dd5bc:	f005 fc88 	bl	e2ed0 <__aeabi_dmul>
   dd5c0:	4602      	mov	r2, r0
   dd5c2:	460b      	mov	r3, r1
   dd5c4:	4680      	mov	r8, r0
   dd5c6:	4689      	mov	r9, r1
   dd5c8:	f005 fc82 	bl	e2ed0 <__aeabi_dmul>
   dd5cc:	a3a0      	add	r3, pc, #640	; (adr r3, dd850 <atan+0x2e8>)
   dd5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5d2:	4606      	mov	r6, r0
   dd5d4:	460f      	mov	r7, r1
   dd5d6:	f005 fc7b 	bl	e2ed0 <__aeabi_dmul>
   dd5da:	a39f      	add	r3, pc, #636	; (adr r3, dd858 <atan+0x2f0>)
   dd5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5e0:	f005 fac4 	bl	e2b6c <__adddf3>
   dd5e4:	4632      	mov	r2, r6
   dd5e6:	463b      	mov	r3, r7
   dd5e8:	f005 fc72 	bl	e2ed0 <__aeabi_dmul>
   dd5ec:	a39c      	add	r3, pc, #624	; (adr r3, dd860 <atan+0x2f8>)
   dd5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5f2:	f005 fabb 	bl	e2b6c <__adddf3>
   dd5f6:	4632      	mov	r2, r6
   dd5f8:	463b      	mov	r3, r7
   dd5fa:	f005 fc69 	bl	e2ed0 <__aeabi_dmul>
   dd5fe:	a39a      	add	r3, pc, #616	; (adr r3, dd868 <atan+0x300>)
   dd600:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd604:	f005 fab2 	bl	e2b6c <__adddf3>
   dd608:	4632      	mov	r2, r6
   dd60a:	463b      	mov	r3, r7
   dd60c:	f005 fc60 	bl	e2ed0 <__aeabi_dmul>
   dd610:	a397      	add	r3, pc, #604	; (adr r3, dd870 <atan+0x308>)
   dd612:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd616:	f005 faa9 	bl	e2b6c <__adddf3>
   dd61a:	4632      	mov	r2, r6
   dd61c:	463b      	mov	r3, r7
   dd61e:	f005 fc57 	bl	e2ed0 <__aeabi_dmul>
   dd622:	a395      	add	r3, pc, #596	; (adr r3, dd878 <atan+0x310>)
   dd624:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd628:	f005 faa0 	bl	e2b6c <__adddf3>
   dd62c:	4642      	mov	r2, r8
   dd62e:	464b      	mov	r3, r9
   dd630:	f005 fc4e 	bl	e2ed0 <__aeabi_dmul>
   dd634:	a392      	add	r3, pc, #584	; (adr r3, dd880 <atan+0x318>)
   dd636:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd63a:	4680      	mov	r8, r0
   dd63c:	4689      	mov	r9, r1
   dd63e:	4630      	mov	r0, r6
   dd640:	4639      	mov	r1, r7
   dd642:	f005 fc45 	bl	e2ed0 <__aeabi_dmul>
   dd646:	a390      	add	r3, pc, #576	; (adr r3, dd888 <atan+0x320>)
   dd648:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd64c:	f005 fa8c 	bl	e2b68 <__aeabi_dsub>
   dd650:	4632      	mov	r2, r6
   dd652:	463b      	mov	r3, r7
   dd654:	f005 fc3c 	bl	e2ed0 <__aeabi_dmul>
   dd658:	a38d      	add	r3, pc, #564	; (adr r3, dd890 <atan+0x328>)
   dd65a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd65e:	f005 fa83 	bl	e2b68 <__aeabi_dsub>
   dd662:	4632      	mov	r2, r6
   dd664:	463b      	mov	r3, r7
   dd666:	f005 fc33 	bl	e2ed0 <__aeabi_dmul>
   dd66a:	a38b      	add	r3, pc, #556	; (adr r3, dd898 <atan+0x330>)
   dd66c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd670:	f005 fa7a 	bl	e2b68 <__aeabi_dsub>
   dd674:	4632      	mov	r2, r6
   dd676:	463b      	mov	r3, r7
   dd678:	f005 fc2a 	bl	e2ed0 <__aeabi_dmul>
   dd67c:	a388      	add	r3, pc, #544	; (adr r3, dd8a0 <atan+0x338>)
   dd67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd682:	f005 fa71 	bl	e2b68 <__aeabi_dsub>
   dd686:	4632      	mov	r2, r6
   dd688:	463b      	mov	r3, r7
   dd68a:	f005 fc21 	bl	e2ed0 <__aeabi_dmul>
   dd68e:	f1ba 3fff 	cmp.w	sl, #4294967295
   dd692:	4602      	mov	r2, r0
   dd694:	460b      	mov	r3, r1
   dd696:	d07c      	beq.n	dd792 <atan+0x22a>
   dd698:	4640      	mov	r0, r8
   dd69a:	4649      	mov	r1, r9
   dd69c:	f005 fa66 	bl	e2b6c <__adddf3>
   dd6a0:	4622      	mov	r2, r4
   dd6a2:	462b      	mov	r3, r5
   dd6a4:	f005 fc14 	bl	e2ed0 <__aeabi_dmul>
   dd6a8:	4e86      	ldr	r6, [pc, #536]	; (dd8c4 <atan+0x35c>)
   dd6aa:	4b87      	ldr	r3, [pc, #540]	; (dd8c8 <atan+0x360>)
   dd6ac:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dd6b0:	4456      	add	r6, sl
   dd6b2:	449a      	add	sl, r3
   dd6b4:	e9da 2300 	ldrd	r2, r3, [sl]
   dd6b8:	f005 fa56 	bl	e2b68 <__aeabi_dsub>
   dd6bc:	4622      	mov	r2, r4
   dd6be:	462b      	mov	r3, r5
   dd6c0:	f005 fa52 	bl	e2b68 <__aeabi_dsub>
   dd6c4:	4602      	mov	r2, r0
   dd6c6:	460b      	mov	r3, r1
   dd6c8:	e9d6 0100 	ldrd	r0, r1, [r6]
   dd6cc:	f005 fa4c 	bl	e2b68 <__aeabi_dsub>
   dd6d0:	f1bb 0f00 	cmp.w	fp, #0
   dd6d4:	db52      	blt.n	dd77c <atan+0x214>
   dd6d6:	4604      	mov	r4, r0
   dd6d8:	460d      	mov	r5, r1
   dd6da:	ec45 4b10 	vmov	d0, r4, r5
   dd6de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd6e2:	2c00      	cmp	r4, #0
   dd6e4:	f43f af50 	beq.w	dd588 <atan+0x20>
   dd6e8:	4622      	mov	r2, r4
   dd6ea:	462b      	mov	r3, r5
   dd6ec:	4620      	mov	r0, r4
   dd6ee:	4629      	mov	r1, r5
   dd6f0:	f005 fa3c 	bl	e2b6c <__adddf3>
   dd6f4:	4604      	mov	r4, r0
   dd6f6:	460d      	mov	r5, r1
   dd6f8:	ec45 4b10 	vmov	d0, r4, r5
   dd6fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd700:	a369      	add	r3, pc, #420	; (adr r3, dd8a8 <atan+0x340>)
   dd702:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd706:	ee10 0a10 	vmov	r0, s0
   dd70a:	4629      	mov	r1, r5
   dd70c:	f005 fa2e 	bl	e2b6c <__adddf3>
   dd710:	2200      	movs	r2, #0
   dd712:	4b6e      	ldr	r3, [pc, #440]	; (dd8cc <atan+0x364>)
   dd714:	f005 fe6c 	bl	e33f0 <__aeabi_dcmpgt>
   dd718:	2800      	cmp	r0, #0
   dd71a:	f43f af49 	beq.w	dd5b0 <atan+0x48>
   dd71e:	ec45 4b10 	vmov	d0, r4, r5
   dd722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd726:	f000 f9cb 	bl	ddac0 <fabs>
   dd72a:	4b69      	ldr	r3, [pc, #420]	; (dd8d0 <atan+0x368>)
   dd72c:	429e      	cmp	r6, r3
   dd72e:	ec55 4b10 	vmov	r4, r5, d0
   dd732:	dc3f      	bgt.n	dd7b4 <atan+0x24c>
   dd734:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dd738:	429e      	cmp	r6, r3
   dd73a:	dc68      	bgt.n	dd80e <atan+0x2a6>
   dd73c:	ee10 2a10 	vmov	r2, s0
   dd740:	ee10 0a10 	vmov	r0, s0
   dd744:	462b      	mov	r3, r5
   dd746:	4629      	mov	r1, r5
   dd748:	f005 fa10 	bl	e2b6c <__adddf3>
   dd74c:	2200      	movs	r2, #0
   dd74e:	4b5f      	ldr	r3, [pc, #380]	; (dd8cc <atan+0x364>)
   dd750:	f005 fa0a 	bl	e2b68 <__aeabi_dsub>
   dd754:	2200      	movs	r2, #0
   dd756:	4606      	mov	r6, r0
   dd758:	460f      	mov	r7, r1
   dd75a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd75e:	4620      	mov	r0, r4
   dd760:	4629      	mov	r1, r5
   dd762:	f005 fa03 	bl	e2b6c <__adddf3>
   dd766:	4602      	mov	r2, r0
   dd768:	460b      	mov	r3, r1
   dd76a:	4630      	mov	r0, r6
   dd76c:	4639      	mov	r1, r7
   dd76e:	f005 fcd9 	bl	e3124 <__aeabi_ddiv>
   dd772:	f04f 0a00 	mov.w	sl, #0
   dd776:	4604      	mov	r4, r0
   dd778:	460d      	mov	r5, r1
   dd77a:	e71b      	b.n	dd5b4 <atan+0x4c>
   dd77c:	4604      	mov	r4, r0
   dd77e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dd782:	ec45 4b10 	vmov	d0, r4, r5
   dd786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd78a:	a549      	add	r5, pc, #292	; (adr r5, dd8b0 <atan+0x348>)
   dd78c:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd790:	e7b2      	b.n	dd6f8 <atan+0x190>
   dd792:	4640      	mov	r0, r8
   dd794:	4649      	mov	r1, r9
   dd796:	f005 f9e9 	bl	e2b6c <__adddf3>
   dd79a:	4622      	mov	r2, r4
   dd79c:	462b      	mov	r3, r5
   dd79e:	f005 fb97 	bl	e2ed0 <__aeabi_dmul>
   dd7a2:	4602      	mov	r2, r0
   dd7a4:	460b      	mov	r3, r1
   dd7a6:	4620      	mov	r0, r4
   dd7a8:	4629      	mov	r1, r5
   dd7aa:	f005 f9dd 	bl	e2b68 <__aeabi_dsub>
   dd7ae:	4604      	mov	r4, r0
   dd7b0:	460d      	mov	r5, r1
   dd7b2:	e7a1      	b.n	dd6f8 <atan+0x190>
   dd7b4:	4b47      	ldr	r3, [pc, #284]	; (dd8d4 <atan+0x36c>)
   dd7b6:	429e      	cmp	r6, r3
   dd7b8:	dc1d      	bgt.n	dd7f6 <atan+0x28e>
   dd7ba:	ee10 0a10 	vmov	r0, s0
   dd7be:	2200      	movs	r2, #0
   dd7c0:	4b45      	ldr	r3, [pc, #276]	; (dd8d8 <atan+0x370>)
   dd7c2:	4629      	mov	r1, r5
   dd7c4:	f005 f9d0 	bl	e2b68 <__aeabi_dsub>
   dd7c8:	2200      	movs	r2, #0
   dd7ca:	4606      	mov	r6, r0
   dd7cc:	460f      	mov	r7, r1
   dd7ce:	4b42      	ldr	r3, [pc, #264]	; (dd8d8 <atan+0x370>)
   dd7d0:	4620      	mov	r0, r4
   dd7d2:	4629      	mov	r1, r5
   dd7d4:	f005 fb7c 	bl	e2ed0 <__aeabi_dmul>
   dd7d8:	2200      	movs	r2, #0
   dd7da:	4b3c      	ldr	r3, [pc, #240]	; (dd8cc <atan+0x364>)
   dd7dc:	f005 f9c6 	bl	e2b6c <__adddf3>
   dd7e0:	4602      	mov	r2, r0
   dd7e2:	460b      	mov	r3, r1
   dd7e4:	4630      	mov	r0, r6
   dd7e6:	4639      	mov	r1, r7
   dd7e8:	f005 fc9c 	bl	e3124 <__aeabi_ddiv>
   dd7ec:	f04f 0a02 	mov.w	sl, #2
   dd7f0:	4604      	mov	r4, r0
   dd7f2:	460d      	mov	r5, r1
   dd7f4:	e6de      	b.n	dd5b4 <atan+0x4c>
   dd7f6:	462b      	mov	r3, r5
   dd7f8:	ee10 2a10 	vmov	r2, s0
   dd7fc:	2000      	movs	r0, #0
   dd7fe:	4937      	ldr	r1, [pc, #220]	; (dd8dc <atan+0x374>)
   dd800:	f005 fc90 	bl	e3124 <__aeabi_ddiv>
   dd804:	f04f 0a03 	mov.w	sl, #3
   dd808:	4604      	mov	r4, r0
   dd80a:	460d      	mov	r5, r1
   dd80c:	e6d2      	b.n	dd5b4 <atan+0x4c>
   dd80e:	ee10 0a10 	vmov	r0, s0
   dd812:	2200      	movs	r2, #0
   dd814:	4b2d      	ldr	r3, [pc, #180]	; (dd8cc <atan+0x364>)
   dd816:	4629      	mov	r1, r5
   dd818:	f005 f9a6 	bl	e2b68 <__aeabi_dsub>
   dd81c:	2200      	movs	r2, #0
   dd81e:	4606      	mov	r6, r0
   dd820:	460f      	mov	r7, r1
   dd822:	4b2a      	ldr	r3, [pc, #168]	; (dd8cc <atan+0x364>)
   dd824:	4620      	mov	r0, r4
   dd826:	4629      	mov	r1, r5
   dd828:	f005 f9a0 	bl	e2b6c <__adddf3>
   dd82c:	4602      	mov	r2, r0
   dd82e:	460b      	mov	r3, r1
   dd830:	4630      	mov	r0, r6
   dd832:	4639      	mov	r1, r7
   dd834:	f005 fc76 	bl	e3124 <__aeabi_ddiv>
   dd838:	f04f 0a01 	mov.w	sl, #1
   dd83c:	4604      	mov	r4, r0
   dd83e:	460d      	mov	r5, r1
   dd840:	e6b8      	b.n	dd5b4 <atan+0x4c>
   dd842:	bf00      	nop
   dd844:	f3af 8000 	nop.w
   dd848:	54442d18 	.word	0x54442d18
   dd84c:	3ff921fb 	.word	0x3ff921fb
   dd850:	e322da11 	.word	0xe322da11
   dd854:	3f90ad3a 	.word	0x3f90ad3a
   dd858:	24760deb 	.word	0x24760deb
   dd85c:	3fa97b4b 	.word	0x3fa97b4b
   dd860:	a0d03d51 	.word	0xa0d03d51
   dd864:	3fb10d66 	.word	0x3fb10d66
   dd868:	c54c206e 	.word	0xc54c206e
   dd86c:	3fb745cd 	.word	0x3fb745cd
   dd870:	920083ff 	.word	0x920083ff
   dd874:	3fc24924 	.word	0x3fc24924
   dd878:	5555550d 	.word	0x5555550d
   dd87c:	3fd55555 	.word	0x3fd55555
   dd880:	2c6a6c2f 	.word	0x2c6a6c2f
   dd884:	bfa2b444 	.word	0xbfa2b444
   dd888:	52defd9a 	.word	0x52defd9a
   dd88c:	3fadde2d 	.word	0x3fadde2d
   dd890:	af749a6d 	.word	0xaf749a6d
   dd894:	3fb3b0f2 	.word	0x3fb3b0f2
   dd898:	fe231671 	.word	0xfe231671
   dd89c:	3fbc71c6 	.word	0x3fbc71c6
   dd8a0:	9998ebc4 	.word	0x9998ebc4
   dd8a4:	3fc99999 	.word	0x3fc99999
   dd8a8:	8800759c 	.word	0x8800759c
   dd8ac:	7e37e43c 	.word	0x7e37e43c
   dd8b0:	54442d18 	.word	0x54442d18
   dd8b4:	bff921fb 	.word	0xbff921fb
   dd8b8:	440fffff 	.word	0x440fffff
   dd8bc:	7ff00000 	.word	0x7ff00000
   dd8c0:	3fdbffff 	.word	0x3fdbffff
   dd8c4:	000e82c8 	.word	0x000e82c8
   dd8c8:	000e82a8 	.word	0x000e82a8
   dd8cc:	3ff00000 	.word	0x3ff00000
   dd8d0:	3ff2ffff 	.word	0x3ff2ffff
   dd8d4:	40037fff 	.word	0x40037fff
   dd8d8:	3ff80000 	.word	0x3ff80000
   dd8dc:	bff00000 	.word	0xbff00000

000dd8e0 <ceil>:
   dd8e0:	ec51 0b10 	vmov	r0, r1, d0
   dd8e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd8ec:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd8f0:	2d13      	cmp	r5, #19
   dd8f2:	460c      	mov	r4, r1
   dd8f4:	460f      	mov	r7, r1
   dd8f6:	ee10 6a10 	vmov	r6, s0
   dd8fa:	dc22      	bgt.n	dd942 <ceil+0x62>
   dd8fc:	2d00      	cmp	r5, #0
   dd8fe:	db52      	blt.n	dd9a6 <ceil+0xc6>
   dd900:	4b3d      	ldr	r3, [pc, #244]	; (dd9f8 <ceil+0x118>)
   dd902:	fa43 f805 	asr.w	r8, r3, r5
   dd906:	ea01 0308 	and.w	r3, r1, r8
   dd90a:	4303      	orrs	r3, r0
   dd90c:	d01e      	beq.n	dd94c <ceil+0x6c>
   dd90e:	a338      	add	r3, pc, #224	; (adr r3, dd9f0 <ceil+0x110>)
   dd910:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd914:	f005 f92a 	bl	e2b6c <__adddf3>
   dd918:	2200      	movs	r2, #0
   dd91a:	2300      	movs	r3, #0
   dd91c:	f005 fd68 	bl	e33f0 <__aeabi_dcmpgt>
   dd920:	b148      	cbz	r0, dd936 <ceil+0x56>
   dd922:	2c00      	cmp	r4, #0
   dd924:	dd04      	ble.n	dd930 <ceil+0x50>
   dd926:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd92a:	fa43 f505 	asr.w	r5, r3, r5
   dd92e:	442f      	add	r7, r5
   dd930:	ea27 0408 	bic.w	r4, r7, r8
   dd934:	2600      	movs	r6, #0
   dd936:	4623      	mov	r3, r4
   dd938:	4632      	mov	r2, r6
   dd93a:	ec43 2b10 	vmov	d0, r2, r3
   dd93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd942:	2d33      	cmp	r5, #51	; 0x33
   dd944:	dd06      	ble.n	dd954 <ceil+0x74>
   dd946:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd94a:	d03e      	beq.n	dd9ca <ceil+0xea>
   dd94c:	ec41 0b10 	vmov	d0, r0, r1
   dd950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd954:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd958:	f04f 38ff 	mov.w	r8, #4294967295
   dd95c:	fa28 f803 	lsr.w	r8, r8, r3
   dd960:	ea10 0f08 	tst.w	r0, r8
   dd964:	d0f2      	beq.n	dd94c <ceil+0x6c>
   dd966:	a322      	add	r3, pc, #136	; (adr r3, dd9f0 <ceil+0x110>)
   dd968:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd96c:	f005 f8fe 	bl	e2b6c <__adddf3>
   dd970:	2200      	movs	r2, #0
   dd972:	2300      	movs	r3, #0
   dd974:	f005 fd3c 	bl	e33f0 <__aeabi_dcmpgt>
   dd978:	2800      	cmp	r0, #0
   dd97a:	d0dc      	beq.n	dd936 <ceil+0x56>
   dd97c:	2c00      	cmp	r4, #0
   dd97e:	dd09      	ble.n	dd994 <ceil+0xb4>
   dd980:	2d14      	cmp	r5, #20
   dd982:	d031      	beq.n	dd9e8 <ceil+0x108>
   dd984:	2301      	movs	r3, #1
   dd986:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd98a:	fa03 f505 	lsl.w	r5, r3, r5
   dd98e:	19ae      	adds	r6, r5, r6
   dd990:	bf28      	it	cs
   dd992:	18ff      	addcs	r7, r7, r3
   dd994:	463c      	mov	r4, r7
   dd996:	ea26 0608 	bic.w	r6, r6, r8
   dd99a:	4623      	mov	r3, r4
   dd99c:	4632      	mov	r2, r6
   dd99e:	ec43 2b10 	vmov	d0, r2, r3
   dd9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd9a6:	a312      	add	r3, pc, #72	; (adr r3, dd9f0 <ceil+0x110>)
   dd9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9ac:	f005 f8de 	bl	e2b6c <__adddf3>
   dd9b0:	2200      	movs	r2, #0
   dd9b2:	2300      	movs	r3, #0
   dd9b4:	f005 fd1c 	bl	e33f0 <__aeabi_dcmpgt>
   dd9b8:	2800      	cmp	r0, #0
   dd9ba:	d0bc      	beq.n	dd936 <ceil+0x56>
   dd9bc:	2c00      	cmp	r4, #0
   dd9be:	db0f      	blt.n	dd9e0 <ceil+0x100>
   dd9c0:	4326      	orrs	r6, r4
   dd9c2:	d00b      	beq.n	dd9dc <ceil+0xfc>
   dd9c4:	2600      	movs	r6, #0
   dd9c6:	4c0d      	ldr	r4, [pc, #52]	; (dd9fc <ceil+0x11c>)
   dd9c8:	e7b5      	b.n	dd936 <ceil+0x56>
   dd9ca:	ee10 2a10 	vmov	r2, s0
   dd9ce:	460b      	mov	r3, r1
   dd9d0:	f005 f8cc 	bl	e2b6c <__adddf3>
   dd9d4:	ec41 0b10 	vmov	d0, r0, r1
   dd9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd9dc:	4634      	mov	r4, r6
   dd9de:	e7aa      	b.n	dd936 <ceil+0x56>
   dd9e0:	2600      	movs	r6, #0
   dd9e2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dd9e6:	e7a6      	b.n	dd936 <ceil+0x56>
   dd9e8:	3701      	adds	r7, #1
   dd9ea:	e7d3      	b.n	dd994 <ceil+0xb4>
   dd9ec:	f3af 8000 	nop.w
   dd9f0:	8800759c 	.word	0x8800759c
   dd9f4:	7e37e43c 	.word	0x7e37e43c
   dd9f8:	000fffff 	.word	0x000fffff
   dd9fc:	3ff00000 	.word	0x3ff00000

000dda00 <cos>:
   dda00:	b500      	push	{lr}
   dda02:	ec51 0b10 	vmov	r0, r1, d0
   dda06:	4a2c      	ldr	r2, [pc, #176]	; (ddab8 <cos+0xb8>)
   dda08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dda0c:	4293      	cmp	r3, r2
   dda0e:	b085      	sub	sp, #20
   dda10:	dd20      	ble.n	dda54 <cos+0x54>
   dda12:	4a2a      	ldr	r2, [pc, #168]	; (ddabc <cos+0xbc>)
   dda14:	4293      	cmp	r3, r2
   dda16:	dd09      	ble.n	dda2c <cos+0x2c>
   dda18:	ee10 2a10 	vmov	r2, s0
   dda1c:	460b      	mov	r3, r1
   dda1e:	f005 f8a3 	bl	e2b68 <__aeabi_dsub>
   dda22:	ec41 0b10 	vmov	d0, r0, r1
   dda26:	b005      	add	sp, #20
   dda28:	f85d fb04 	ldr.w	pc, [sp], #4
   dda2c:	4668      	mov	r0, sp
   dda2e:	f003 f91b 	bl	e0c68 <__ieee754_rem_pio2>
   dda32:	f000 0003 	and.w	r0, r0, #3
   dda36:	2801      	cmp	r0, #1
   dda38:	d028      	beq.n	dda8c <cos+0x8c>
   dda3a:	2802      	cmp	r0, #2
   dda3c:	d015      	beq.n	dda6a <cos+0x6a>
   dda3e:	b360      	cbz	r0, dda9a <cos+0x9a>
   dda40:	2001      	movs	r0, #1
   dda42:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda46:	ed9d 0b00 	vldr	d0, [sp]
   dda4a:	f004 fa3d 	bl	e1ec8 <__kernel_sin>
   dda4e:	ec51 0b10 	vmov	r0, r1, d0
   dda52:	e7e6      	b.n	dda22 <cos+0x22>
   dda54:	ed9f 1b16 	vldr	d1, [pc, #88]	; ddab0 <cos+0xb0>
   dda58:	f003 fce2 	bl	e1420 <__kernel_cos>
   dda5c:	ec51 0b10 	vmov	r0, r1, d0
   dda60:	ec41 0b10 	vmov	d0, r0, r1
   dda64:	b005      	add	sp, #20
   dda66:	f85d fb04 	ldr.w	pc, [sp], #4
   dda6a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda6e:	ed9d 0b00 	vldr	d0, [sp]
   dda72:	f003 fcd5 	bl	e1420 <__kernel_cos>
   dda76:	ec53 2b10 	vmov	r2, r3, d0
   dda7a:	ee10 0a10 	vmov	r0, s0
   dda7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dda82:	ec41 0b10 	vmov	d0, r0, r1
   dda86:	b005      	add	sp, #20
   dda88:	f85d fb04 	ldr.w	pc, [sp], #4
   dda8c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda90:	ed9d 0b00 	vldr	d0, [sp]
   dda94:	f004 fa18 	bl	e1ec8 <__kernel_sin>
   dda98:	e7ed      	b.n	dda76 <cos+0x76>
   dda9a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda9e:	ed9d 0b00 	vldr	d0, [sp]
   ddaa2:	f003 fcbd 	bl	e1420 <__kernel_cos>
   ddaa6:	ec51 0b10 	vmov	r0, r1, d0
   ddaaa:	e7ba      	b.n	dda22 <cos+0x22>
   ddaac:	f3af 8000 	nop.w
	...
   ddab8:	3fe921fb 	.word	0x3fe921fb
   ddabc:	7fefffff 	.word	0x7fefffff

000ddac0 <fabs>:
   ddac0:	ec53 2b10 	vmov	r2, r3, d0
   ddac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   ddac8:	ec43 2b10 	vmov	d0, r2, r3
   ddacc:	4770      	bx	lr
   ddace:	bf00      	nop

000ddad0 <floor>:
   ddad0:	ec51 0b10 	vmov	r0, r1, d0
   ddad4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ddad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddadc:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   ddae0:	2d13      	cmp	r5, #19
   ddae2:	460c      	mov	r4, r1
   ddae4:	460f      	mov	r7, r1
   ddae6:	ee10 6a10 	vmov	r6, s0
   ddaea:	dc1d      	bgt.n	ddb28 <floor+0x58>
   ddaec:	2d00      	cmp	r5, #0
   ddaee:	db43      	blt.n	ddb78 <floor+0xa8>
   ddaf0:	4b3d      	ldr	r3, [pc, #244]	; (ddbe8 <floor+0x118>)
   ddaf2:	fa43 f805 	asr.w	r8, r3, r5
   ddaf6:	ea01 0308 	and.w	r3, r1, r8
   ddafa:	4303      	orrs	r3, r0
   ddafc:	d019      	beq.n	ddb32 <floor+0x62>
   ddafe:	a338      	add	r3, pc, #224	; (adr r3, ddbe0 <floor+0x110>)
   ddb00:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb04:	f005 f832 	bl	e2b6c <__adddf3>
   ddb08:	2200      	movs	r2, #0
   ddb0a:	2300      	movs	r3, #0
   ddb0c:	f005 fc70 	bl	e33f0 <__aeabi_dcmpgt>
   ddb10:	b120      	cbz	r0, ddb1c <floor+0x4c>
   ddb12:	2c00      	cmp	r4, #0
   ddb14:	db49      	blt.n	ddbaa <floor+0xda>
   ddb16:	ea27 0408 	bic.w	r4, r7, r8
   ddb1a:	2600      	movs	r6, #0
   ddb1c:	4623      	mov	r3, r4
   ddb1e:	4632      	mov	r2, r6
   ddb20:	ec43 2b10 	vmov	d0, r2, r3
   ddb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddb28:	2d33      	cmp	r5, #51	; 0x33
   ddb2a:	dd06      	ble.n	ddb3a <floor+0x6a>
   ddb2c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   ddb30:	d032      	beq.n	ddb98 <floor+0xc8>
   ddb32:	ec41 0b10 	vmov	d0, r0, r1
   ddb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddb3a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   ddb3e:	f04f 38ff 	mov.w	r8, #4294967295
   ddb42:	fa28 f803 	lsr.w	r8, r8, r3
   ddb46:	ea10 0f08 	tst.w	r0, r8
   ddb4a:	d0f2      	beq.n	ddb32 <floor+0x62>
   ddb4c:	a324      	add	r3, pc, #144	; (adr r3, ddbe0 <floor+0x110>)
   ddb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb52:	f005 f80b 	bl	e2b6c <__adddf3>
   ddb56:	2200      	movs	r2, #0
   ddb58:	2300      	movs	r3, #0
   ddb5a:	f005 fc49 	bl	e33f0 <__aeabi_dcmpgt>
   ddb5e:	2800      	cmp	r0, #0
   ddb60:	d0dc      	beq.n	ddb1c <floor+0x4c>
   ddb62:	2c00      	cmp	r4, #0
   ddb64:	db27      	blt.n	ddbb6 <floor+0xe6>
   ddb66:	463c      	mov	r4, r7
   ddb68:	ea26 0608 	bic.w	r6, r6, r8
   ddb6c:	4623      	mov	r3, r4
   ddb6e:	4632      	mov	r2, r6
   ddb70:	ec43 2b10 	vmov	d0, r2, r3
   ddb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddb78:	a319      	add	r3, pc, #100	; (adr r3, ddbe0 <floor+0x110>)
   ddb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb7e:	f004 fff5 	bl	e2b6c <__adddf3>
   ddb82:	2200      	movs	r2, #0
   ddb84:	2300      	movs	r3, #0
   ddb86:	f005 fc33 	bl	e33f0 <__aeabi_dcmpgt>
   ddb8a:	2800      	cmp	r0, #0
   ddb8c:	d0c6      	beq.n	ddb1c <floor+0x4c>
   ddb8e:	2c00      	cmp	r4, #0
   ddb90:	db1c      	blt.n	ddbcc <floor+0xfc>
   ddb92:	2600      	movs	r6, #0
   ddb94:	4634      	mov	r4, r6
   ddb96:	e7c1      	b.n	ddb1c <floor+0x4c>
   ddb98:	ee10 2a10 	vmov	r2, s0
   ddb9c:	460b      	mov	r3, r1
   ddb9e:	f004 ffe5 	bl	e2b6c <__adddf3>
   ddba2:	ec41 0b10 	vmov	d0, r0, r1
   ddba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddbaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   ddbae:	fa43 f505 	asr.w	r5, r3, r5
   ddbb2:	442f      	add	r7, r5
   ddbb4:	e7af      	b.n	ddb16 <floor+0x46>
   ddbb6:	2d14      	cmp	r5, #20
   ddbb8:	d010      	beq.n	ddbdc <floor+0x10c>
   ddbba:	2301      	movs	r3, #1
   ddbbc:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   ddbc0:	fa03 f505 	lsl.w	r5, r3, r5
   ddbc4:	19ae      	adds	r6, r5, r6
   ddbc6:	bf28      	it	cs
   ddbc8:	18ff      	addcs	r7, r7, r3
   ddbca:	e7cc      	b.n	ddb66 <floor+0x96>
   ddbcc:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   ddbd0:	4b06      	ldr	r3, [pc, #24]	; (ddbec <floor+0x11c>)
   ddbd2:	4332      	orrs	r2, r6
   ddbd4:	bf18      	it	ne
   ddbd6:	461c      	movne	r4, r3
   ddbd8:	2600      	movs	r6, #0
   ddbda:	e79f      	b.n	ddb1c <floor+0x4c>
   ddbdc:	3701      	adds	r7, #1
   ddbde:	e7c2      	b.n	ddb66 <floor+0x96>
   ddbe0:	8800759c 	.word	0x8800759c
   ddbe4:	7e37e43c 	.word	0x7e37e43c
   ddbe8:	000fffff 	.word	0x000fffff
   ddbec:	bff00000 	.word	0xbff00000

000ddbf0 <sin>:
   ddbf0:	b500      	push	{lr}
   ddbf2:	ec51 0b10 	vmov	r0, r1, d0
   ddbf6:	4a2c      	ldr	r2, [pc, #176]	; (ddca8 <sin+0xb8>)
   ddbf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ddbfc:	4293      	cmp	r3, r2
   ddbfe:	b085      	sub	sp, #20
   ddc00:	dd27      	ble.n	ddc52 <sin+0x62>
   ddc02:	4a2a      	ldr	r2, [pc, #168]	; (ddcac <sin+0xbc>)
   ddc04:	4293      	cmp	r3, r2
   ddc06:	dd09      	ble.n	ddc1c <sin+0x2c>
   ddc08:	ee10 2a10 	vmov	r2, s0
   ddc0c:	460b      	mov	r3, r1
   ddc0e:	f004 ffab 	bl	e2b68 <__aeabi_dsub>
   ddc12:	ec41 0b10 	vmov	d0, r0, r1
   ddc16:	b005      	add	sp, #20
   ddc18:	f85d fb04 	ldr.w	pc, [sp], #4
   ddc1c:	4668      	mov	r0, sp
   ddc1e:	f003 f823 	bl	e0c68 <__ieee754_rem_pio2>
   ddc22:	f000 0003 	and.w	r0, r0, #3
   ddc26:	2801      	cmp	r0, #1
   ddc28:	d027      	beq.n	ddc7a <sin+0x8a>
   ddc2a:	2802      	cmp	r0, #2
   ddc2c:	d01d      	beq.n	ddc6a <sin+0x7a>
   ddc2e:	b368      	cbz	r0, ddc8c <sin+0x9c>
   ddc30:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddc34:	ed9d 0b00 	vldr	d0, [sp]
   ddc38:	f003 fbf2 	bl	e1420 <__kernel_cos>
   ddc3c:	ec53 2b10 	vmov	r2, r3, d0
   ddc40:	ee10 0a10 	vmov	r0, s0
   ddc44:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   ddc48:	ec41 0b10 	vmov	d0, r0, r1
   ddc4c:	b005      	add	sp, #20
   ddc4e:	f85d fb04 	ldr.w	pc, [sp], #4
   ddc52:	2000      	movs	r0, #0
   ddc54:	ed9f 1b12 	vldr	d1, [pc, #72]	; ddca0 <sin+0xb0>
   ddc58:	f004 f936 	bl	e1ec8 <__kernel_sin>
   ddc5c:	ec51 0b10 	vmov	r0, r1, d0
   ddc60:	ec41 0b10 	vmov	d0, r0, r1
   ddc64:	b005      	add	sp, #20
   ddc66:	f85d fb04 	ldr.w	pc, [sp], #4
   ddc6a:	2001      	movs	r0, #1
   ddc6c:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddc70:	ed9d 0b00 	vldr	d0, [sp]
   ddc74:	f004 f928 	bl	e1ec8 <__kernel_sin>
   ddc78:	e7e0      	b.n	ddc3c <sin+0x4c>
   ddc7a:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddc7e:	ed9d 0b00 	vldr	d0, [sp]
   ddc82:	f003 fbcd 	bl	e1420 <__kernel_cos>
   ddc86:	ec51 0b10 	vmov	r0, r1, d0
   ddc8a:	e7c2      	b.n	ddc12 <sin+0x22>
   ddc8c:	2001      	movs	r0, #1
   ddc8e:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddc92:	ed9d 0b00 	vldr	d0, [sp]
   ddc96:	f004 f917 	bl	e1ec8 <__kernel_sin>
   ddc9a:	ec51 0b10 	vmov	r0, r1, d0
   ddc9e:	e7b8      	b.n	ddc12 <sin+0x22>
	...
   ddca8:	3fe921fb 	.word	0x3fe921fb
   ddcac:	7fefffff 	.word	0x7fefffff

000ddcb0 <tan>:
   ddcb0:	b500      	push	{lr}
   ddcb2:	ec51 0b10 	vmov	r0, r1, d0
   ddcb6:	4a18      	ldr	r2, [pc, #96]	; (ddd18 <tan+0x68>)
   ddcb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ddcbc:	4293      	cmp	r3, r2
   ddcbe:	b085      	sub	sp, #20
   ddcc0:	dd1d      	ble.n	ddcfe <tan+0x4e>
   ddcc2:	4a16      	ldr	r2, [pc, #88]	; (ddd1c <tan+0x6c>)
   ddcc4:	4293      	cmp	r3, r2
   ddcc6:	dd09      	ble.n	ddcdc <tan+0x2c>
   ddcc8:	ee10 2a10 	vmov	r2, s0
   ddccc:	460b      	mov	r3, r1
   ddcce:	f004 ff4b 	bl	e2b68 <__aeabi_dsub>
   ddcd2:	ec41 0b10 	vmov	d0, r0, r1
   ddcd6:	b005      	add	sp, #20
   ddcd8:	f85d fb04 	ldr.w	pc, [sp], #4
   ddcdc:	4668      	mov	r0, sp
   ddcde:	f002 ffc3 	bl	e0c68 <__ieee754_rem_pio2>
   ddce2:	0040      	lsls	r0, r0, #1
   ddce4:	f000 0002 	and.w	r0, r0, #2
   ddce8:	f1c0 0001 	rsb	r0, r0, #1
   ddcec:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddcf0:	ed9d 0b00 	vldr	d0, [sp]
   ddcf4:	f004 f9b4 	bl	e2060 <__kernel_tan>
   ddcf8:	b005      	add	sp, #20
   ddcfa:	f85d fb04 	ldr.w	pc, [sp], #4
   ddcfe:	2001      	movs	r0, #1
   ddd00:	ed9f 1b03 	vldr	d1, [pc, #12]	; ddd10 <tan+0x60>
   ddd04:	f004 f9ac 	bl	e2060 <__kernel_tan>
   ddd08:	b005      	add	sp, #20
   ddd0a:	f85d fb04 	ldr.w	pc, [sp], #4
   ddd0e:	bf00      	nop
	...
   ddd18:	3fe921fb 	.word	0x3fe921fb
   ddd1c:	7fefffff 	.word	0x7fefffff

000ddd20 <tanh>:
   ddd20:	b5d0      	push	{r4, r6, r7, lr}
   ddd22:	ec57 6b10 	vmov	r6, r7, d0
   ddd26:	4a42      	ldr	r2, [pc, #264]	; (dde30 <tanh+0x110>)
   ddd28:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   ddd2c:	4293      	cmp	r3, r2
   ddd2e:	463c      	mov	r4, r7
   ddd30:	dd10      	ble.n	ddd54 <tanh+0x34>
   ddd32:	2f00      	cmp	r7, #0
   ddd34:	ee10 2a10 	vmov	r2, s0
   ddd38:	463b      	mov	r3, r7
   ddd3a:	f04f 0000 	mov.w	r0, #0
   ddd3e:	493d      	ldr	r1, [pc, #244]	; (dde34 <tanh+0x114>)
   ddd40:	db40      	blt.n	dddc4 <tanh+0xa4>
   ddd42:	f005 f9ef 	bl	e3124 <__aeabi_ddiv>
   ddd46:	2200      	movs	r2, #0
   ddd48:	4b3a      	ldr	r3, [pc, #232]	; (dde34 <tanh+0x114>)
   ddd4a:	f004 ff0f 	bl	e2b6c <__adddf3>
   ddd4e:	ec41 0b10 	vmov	d0, r0, r1
   ddd52:	bdd0      	pop	{r4, r6, r7, pc}
   ddd54:	4a38      	ldr	r2, [pc, #224]	; (dde38 <tanh+0x118>)
   ddd56:	4293      	cmp	r3, r2
   ddd58:	dd0a      	ble.n	ddd70 <tanh+0x50>
   ddd5a:	4b36      	ldr	r3, [pc, #216]	; (dde34 <tanh+0x114>)
   ddd5c:	2200      	movs	r2, #0
   ddd5e:	2c00      	cmp	r4, #0
   ddd60:	4610      	mov	r0, r2
   ddd62:	bfb4      	ite	lt
   ddd64:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   ddd68:	4619      	movge	r1, r3
   ddd6a:	ec41 0b10 	vmov	d0, r0, r1
   ddd6e:	bdd0      	pop	{r4, r6, r7, pc}
   ddd70:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   ddd74:	db2f      	blt.n	dddd6 <tanh+0xb6>
   ddd76:	4a31      	ldr	r2, [pc, #196]	; (dde3c <tanh+0x11c>)
   ddd78:	4293      	cmp	r3, r2
   ddd7a:	dd38      	ble.n	dddee <tanh+0xce>
   ddd7c:	f7ff fea0 	bl	ddac0 <fabs>
   ddd80:	ec53 2b10 	vmov	r2, r3, d0
   ddd84:	ee10 0a10 	vmov	r0, s0
   ddd88:	4619      	mov	r1, r3
   ddd8a:	f004 feef 	bl	e2b6c <__adddf3>
   ddd8e:	ec41 0b10 	vmov	d0, r0, r1
   ddd92:	f004 fb49 	bl	e2428 <expm1>
   ddd96:	2200      	movs	r2, #0
   ddd98:	ec51 0b10 	vmov	r0, r1, d0
   ddd9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddda0:	f004 fee4 	bl	e2b6c <__adddf3>
   ddda4:	4602      	mov	r2, r0
   ddda6:	460b      	mov	r3, r1
   ddda8:	2000      	movs	r0, #0
   dddaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   dddae:	f005 f9b9 	bl	e3124 <__aeabi_ddiv>
   dddb2:	4602      	mov	r2, r0
   dddb4:	460b      	mov	r3, r1
   dddb6:	2000      	movs	r0, #0
   dddb8:	491e      	ldr	r1, [pc, #120]	; (dde34 <tanh+0x114>)
   dddba:	f004 fed5 	bl	e2b68 <__aeabi_dsub>
   dddbe:	4602      	mov	r2, r0
   dddc0:	460b      	mov	r3, r1
   dddc2:	e7cc      	b.n	ddd5e <tanh+0x3e>
   dddc4:	f005 f9ae 	bl	e3124 <__aeabi_ddiv>
   dddc8:	2200      	movs	r2, #0
   dddca:	4b1a      	ldr	r3, [pc, #104]	; (dde34 <tanh+0x114>)
   dddcc:	f004 fecc 	bl	e2b68 <__aeabi_dsub>
   dddd0:	ec41 0b10 	vmov	d0, r0, r1
   dddd4:	bdd0      	pop	{r4, r6, r7, pc}
   dddd6:	2200      	movs	r2, #0
   dddd8:	4b16      	ldr	r3, [pc, #88]	; (dde34 <tanh+0x114>)
   dddda:	ee10 0a10 	vmov	r0, s0
   dddde:	4639      	mov	r1, r7
   ddde0:	f004 fec4 	bl	e2b6c <__adddf3>
   ddde4:	4632      	mov	r2, r6
   ddde6:	463b      	mov	r3, r7
   ddde8:	f005 f872 	bl	e2ed0 <__aeabi_dmul>
   dddec:	e7af      	b.n	ddd4e <tanh+0x2e>
   dddee:	f7ff fe67 	bl	ddac0 <fabs>
   dddf2:	2200      	movs	r2, #0
   dddf4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   dddf8:	ec51 0b10 	vmov	r0, r1, d0
   dddfc:	f005 f868 	bl	e2ed0 <__aeabi_dmul>
   dde00:	ec41 0b10 	vmov	d0, r0, r1
   dde04:	f004 fb10 	bl	e2428 <expm1>
   dde08:	ec51 0b10 	vmov	r0, r1, d0
   dde0c:	2200      	movs	r2, #0
   dde0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dde12:	ee10 6a10 	vmov	r6, s0
   dde16:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   dde1a:	f004 fea7 	bl	e2b6c <__adddf3>
   dde1e:	4602      	mov	r2, r0
   dde20:	460b      	mov	r3, r1
   dde22:	4630      	mov	r0, r6
   dde24:	4639      	mov	r1, r7
   dde26:	f005 f97d 	bl	e3124 <__aeabi_ddiv>
   dde2a:	4602      	mov	r2, r0
   dde2c:	460b      	mov	r3, r1
   dde2e:	e796      	b.n	ddd5e <tanh+0x3e>
   dde30:	7fefffff 	.word	0x7fefffff
   dde34:	3ff00000 	.word	0x3ff00000
   dde38:	4035ffff 	.word	0x4035ffff
   dde3c:	3fefffff 	.word	0x3fefffff

000dde40 <acos>:
   dde40:	b530      	push	{r4, r5, lr}
   dde42:	ed2d 8b04 	vpush	{d8-d9}
   dde46:	eeb0 8a40 	vmov.f32	s16, s0
   dde4a:	eef0 8a60 	vmov.f32	s17, s1
   dde4e:	4c29      	ldr	r4, [pc, #164]	; (ddef4 <acos+0xb4>)
   dde50:	b08b      	sub	sp, #44	; 0x2c
   dde52:	f000 fd99 	bl	de988 <__ieee754_acos>
   dde56:	f994 3000 	ldrsb.w	r3, [r4]
   dde5a:	eeb0 9a40 	vmov.f32	s18, s0
   dde5e:	eef0 9a60 	vmov.f32	s19, s1
   dde62:	3301      	adds	r3, #1
   dde64:	d032      	beq.n	ddecc <acos+0x8c>
   dde66:	ec53 2b18 	vmov	r2, r3, d8
   dde6a:	ec51 0b18 	vmov	r0, r1, d8
   dde6e:	f005 fac9 	bl	e3404 <__aeabi_dcmpun>
   dde72:	4605      	mov	r5, r0
   dde74:	bb50      	cbnz	r0, ddecc <acos+0x8c>
   dde76:	eeb0 0a48 	vmov.f32	s0, s16
   dde7a:	eef0 0a68 	vmov.f32	s1, s17
   dde7e:	f7ff fe1f 	bl	ddac0 <fabs>
   dde82:	2200      	movs	r2, #0
   dde84:	4b1c      	ldr	r3, [pc, #112]	; (ddef8 <acos+0xb8>)
   dde86:	ec51 0b10 	vmov	r0, r1, d0
   dde8a:	f005 fab1 	bl	e33f0 <__aeabi_dcmpgt>
   dde8e:	b1e8      	cbz	r0, ddecc <acos+0x8c>
   dde90:	4b1a      	ldr	r3, [pc, #104]	; (ddefc <acos+0xbc>)
   dde92:	481b      	ldr	r0, [pc, #108]	; (ddf00 <acos+0xc0>)
   dde94:	9508      	str	r5, [sp, #32]
   dde96:	2201      	movs	r2, #1
   dde98:	e88d 000c 	stmia.w	sp, {r2, r3}
   dde9c:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddea0:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddea4:	f004 fd2c 	bl	e2900 <nan>
   ddea8:	f994 3000 	ldrsb.w	r3, [r4]
   ddeac:	2b02      	cmp	r3, #2
   ddeae:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddeb2:	d013      	beq.n	ddedc <acos+0x9c>
   ddeb4:	4668      	mov	r0, sp
   ddeb6:	f004 fd21 	bl	e28fc <matherr>
   ddeba:	b178      	cbz	r0, ddedc <acos+0x9c>
   ddebc:	9b08      	ldr	r3, [sp, #32]
   ddebe:	b9a3      	cbnz	r3, ddeea <acos+0xaa>
   ddec0:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddec4:	b00b      	add	sp, #44	; 0x2c
   ddec6:	ecbd 8b04 	vpop	{d8-d9}
   ddeca:	bd30      	pop	{r4, r5, pc}
   ddecc:	eeb0 0a49 	vmov.f32	s0, s18
   dded0:	eef0 0a69 	vmov.f32	s1, s19
   dded4:	b00b      	add	sp, #44	; 0x2c
   dded6:	ecbd 8b04 	vpop	{d8-d9}
   ddeda:	bd30      	pop	{r4, r5, pc}
   ddedc:	f7fc fece 	bl	dac7c <__errno>
   ddee0:	2321      	movs	r3, #33	; 0x21
   ddee2:	6003      	str	r3, [r0, #0]
   ddee4:	9b08      	ldr	r3, [sp, #32]
   ddee6:	2b00      	cmp	r3, #0
   ddee8:	d0ea      	beq.n	ddec0 <acos+0x80>
   ddeea:	f7fc fec7 	bl	dac7c <__errno>
   ddeee:	9b08      	ldr	r3, [sp, #32]
   ddef0:	6003      	str	r3, [r0, #0]
   ddef2:	e7e5      	b.n	ddec0 <acos+0x80>
   ddef4:	2003d5c0 	.word	0x2003d5c0
   ddef8:	3ff00000 	.word	0x3ff00000
   ddefc:	000e82e8 	.word	0x000e82e8
   ddf00:	000e8308 	.word	0x000e8308

000ddf04 <asin>:
   ddf04:	b530      	push	{r4, r5, lr}
   ddf06:	ed2d 8b04 	vpush	{d8-d9}
   ddf0a:	eeb0 8a40 	vmov.f32	s16, s0
   ddf0e:	eef0 8a60 	vmov.f32	s17, s1
   ddf12:	4c29      	ldr	r4, [pc, #164]	; (ddfb8 <asin+0xb4>)
   ddf14:	b08b      	sub	sp, #44	; 0x2c
   ddf16:	f000 ffa7 	bl	dee68 <__ieee754_asin>
   ddf1a:	f994 3000 	ldrsb.w	r3, [r4]
   ddf1e:	eeb0 9a40 	vmov.f32	s18, s0
   ddf22:	eef0 9a60 	vmov.f32	s19, s1
   ddf26:	3301      	adds	r3, #1
   ddf28:	d032      	beq.n	ddf90 <asin+0x8c>
   ddf2a:	ec53 2b18 	vmov	r2, r3, d8
   ddf2e:	ec51 0b18 	vmov	r0, r1, d8
   ddf32:	f005 fa67 	bl	e3404 <__aeabi_dcmpun>
   ddf36:	4605      	mov	r5, r0
   ddf38:	bb50      	cbnz	r0, ddf90 <asin+0x8c>
   ddf3a:	eeb0 0a48 	vmov.f32	s0, s16
   ddf3e:	eef0 0a68 	vmov.f32	s1, s17
   ddf42:	f7ff fdbd 	bl	ddac0 <fabs>
   ddf46:	2200      	movs	r2, #0
   ddf48:	4b1c      	ldr	r3, [pc, #112]	; (ddfbc <asin+0xb8>)
   ddf4a:	ec51 0b10 	vmov	r0, r1, d0
   ddf4e:	f005 fa4f 	bl	e33f0 <__aeabi_dcmpgt>
   ddf52:	b1e8      	cbz	r0, ddf90 <asin+0x8c>
   ddf54:	4b1a      	ldr	r3, [pc, #104]	; (ddfc0 <asin+0xbc>)
   ddf56:	481b      	ldr	r0, [pc, #108]	; (ddfc4 <asin+0xc0>)
   ddf58:	9508      	str	r5, [sp, #32]
   ddf5a:	2201      	movs	r2, #1
   ddf5c:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddf60:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddf64:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddf68:	f004 fcca 	bl	e2900 <nan>
   ddf6c:	f994 3000 	ldrsb.w	r3, [r4]
   ddf70:	2b02      	cmp	r3, #2
   ddf72:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddf76:	d013      	beq.n	ddfa0 <asin+0x9c>
   ddf78:	4668      	mov	r0, sp
   ddf7a:	f004 fcbf 	bl	e28fc <matherr>
   ddf7e:	b178      	cbz	r0, ddfa0 <asin+0x9c>
   ddf80:	9b08      	ldr	r3, [sp, #32]
   ddf82:	b9a3      	cbnz	r3, ddfae <asin+0xaa>
   ddf84:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddf88:	b00b      	add	sp, #44	; 0x2c
   ddf8a:	ecbd 8b04 	vpop	{d8-d9}
   ddf8e:	bd30      	pop	{r4, r5, pc}
   ddf90:	eeb0 0a49 	vmov.f32	s0, s18
   ddf94:	eef0 0a69 	vmov.f32	s1, s19
   ddf98:	b00b      	add	sp, #44	; 0x2c
   ddf9a:	ecbd 8b04 	vpop	{d8-d9}
   ddf9e:	bd30      	pop	{r4, r5, pc}
   ddfa0:	f7fc fe6c 	bl	dac7c <__errno>
   ddfa4:	2321      	movs	r3, #33	; 0x21
   ddfa6:	6003      	str	r3, [r0, #0]
   ddfa8:	9b08      	ldr	r3, [sp, #32]
   ddfaa:	2b00      	cmp	r3, #0
   ddfac:	d0ea      	beq.n	ddf84 <asin+0x80>
   ddfae:	f7fc fe65 	bl	dac7c <__errno>
   ddfb2:	9b08      	ldr	r3, [sp, #32]
   ddfb4:	6003      	str	r3, [r0, #0]
   ddfb6:	e7e5      	b.n	ddf84 <asin+0x80>
   ddfb8:	2003d5c0 	.word	0x2003d5c0
   ddfbc:	3ff00000 	.word	0x3ff00000
   ddfc0:	000e82f0 	.word	0x000e82f0
   ddfc4:	000e8308 	.word	0x000e8308

000ddfc8 <atan2>:
   ddfc8:	f001 b99e 	b.w	df308 <__ieee754_atan2>
   ddfcc:	0000      	movs	r0, r0
	...

000ddfd0 <cosh>:
   ddfd0:	b530      	push	{r4, r5, lr}
   ddfd2:	ed2d 8b04 	vpush	{d8-d9}
   ddfd6:	eeb0 8a40 	vmov.f32	s16, s0
   ddfda:	eef0 8a60 	vmov.f32	s17, s1
   ddfde:	4c2e      	ldr	r4, [pc, #184]	; (de098 <cosh+0xc8>)
   ddfe0:	b08b      	sub	sp, #44	; 0x2c
   ddfe2:	f001 fa89 	bl	df4f8 <__ieee754_cosh>
   ddfe6:	f994 3000 	ldrsb.w	r3, [r4]
   ddfea:	eeb0 9a40 	vmov.f32	s18, s0
   ddfee:	eef0 9a60 	vmov.f32	s19, s1
   ddff2:	3301      	adds	r3, #1
   ddff4:	d032      	beq.n	de05c <cosh+0x8c>
   ddff6:	ec53 2b18 	vmov	r2, r3, d8
   ddffa:	ec51 0b18 	vmov	r0, r1, d8
   ddffe:	f005 fa01 	bl	e3404 <__aeabi_dcmpun>
   de002:	4605      	mov	r5, r0
   de004:	bb50      	cbnz	r0, de05c <cosh+0x8c>
   de006:	eeb0 0a48 	vmov.f32	s0, s16
   de00a:	eef0 0a68 	vmov.f32	s1, s17
   de00e:	f7ff fd57 	bl	ddac0 <fabs>
   de012:	a31f      	add	r3, pc, #124	; (adr r3, de090 <cosh+0xc0>)
   de014:	e9d3 2300 	ldrd	r2, r3, [r3]
   de018:	ec51 0b10 	vmov	r0, r1, d0
   de01c:	f005 f9e8 	bl	e33f0 <__aeabi_dcmpgt>
   de020:	b1e0      	cbz	r0, de05c <cosh+0x8c>
   de022:	4a1e      	ldr	r2, [pc, #120]	; (de09c <cosh+0xcc>)
   de024:	f994 3000 	ldrsb.w	r3, [r4]
   de028:	9508      	str	r5, [sp, #32]
   de02a:	2103      	movs	r1, #3
   de02c:	ed8d 8b04 	vstr	d8, [sp, #16]
   de030:	ed8d 8b02 	vstr	d8, [sp, #8]
   de034:	e88d 0006 	stmia.w	sp, {r1, r2}
   de038:	b9c3      	cbnz	r3, de06c <cosh+0x9c>
   de03a:	4b19      	ldr	r3, [pc, #100]	; (de0a0 <cosh+0xd0>)
   de03c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de040:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de044:	4668      	mov	r0, sp
   de046:	f004 fc59 	bl	e28fc <matherr>
   de04a:	b1a8      	cbz	r0, de078 <cosh+0xa8>
   de04c:	9b08      	ldr	r3, [sp, #32]
   de04e:	b9d3      	cbnz	r3, de086 <cosh+0xb6>
   de050:	ed9d 0b06 	vldr	d0, [sp, #24]
   de054:	b00b      	add	sp, #44	; 0x2c
   de056:	ecbd 8b04 	vpop	{d8-d9}
   de05a:	bd30      	pop	{r4, r5, pc}
   de05c:	eeb0 0a49 	vmov.f32	s0, s18
   de060:	eef0 0a69 	vmov.f32	s1, s19
   de064:	b00b      	add	sp, #44	; 0x2c
   de066:	ecbd 8b04 	vpop	{d8-d9}
   de06a:	bd30      	pop	{r4, r5, pc}
   de06c:	490d      	ldr	r1, [pc, #52]	; (de0a4 <cosh+0xd4>)
   de06e:	2000      	movs	r0, #0
   de070:	2b02      	cmp	r3, #2
   de072:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de076:	d1e5      	bne.n	de044 <cosh+0x74>
   de078:	f7fc fe00 	bl	dac7c <__errno>
   de07c:	2322      	movs	r3, #34	; 0x22
   de07e:	6003      	str	r3, [r0, #0]
   de080:	9b08      	ldr	r3, [sp, #32]
   de082:	2b00      	cmp	r3, #0
   de084:	d0e4      	beq.n	de050 <cosh+0x80>
   de086:	f7fc fdf9 	bl	dac7c <__errno>
   de08a:	9b08      	ldr	r3, [sp, #32]
   de08c:	6003      	str	r3, [r0, #0]
   de08e:	e7df      	b.n	de050 <cosh+0x80>
   de090:	8fb9f87d 	.word	0x8fb9f87d
   de094:	408633ce 	.word	0x408633ce
   de098:	2003d5c0 	.word	0x2003d5c0
   de09c:	000e82f8 	.word	0x000e82f8
   de0a0:	47efffff 	.word	0x47efffff
   de0a4:	7ff00000 	.word	0x7ff00000

000de0a8 <exp>:
   de0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   de0aa:	ed2d 8b04 	vpush	{d8-d9}
   de0ae:	eeb0 9a40 	vmov.f32	s18, s0
   de0b2:	eef0 9a60 	vmov.f32	s19, s1
   de0b6:	4c3a      	ldr	r4, [pc, #232]	; (de1a0 <exp+0xf8>)
   de0b8:	b08b      	sub	sp, #44	; 0x2c
   de0ba:	f001 fad9 	bl	df670 <__ieee754_exp>
   de0be:	f994 3000 	ldrsb.w	r3, [r4]
   de0c2:	eeb0 8a40 	vmov.f32	s16, s0
   de0c6:	eef0 8a60 	vmov.f32	s17, s1
   de0ca:	3301      	adds	r3, #1
   de0cc:	d038      	beq.n	de140 <exp+0x98>
   de0ce:	eeb0 0a49 	vmov.f32	s0, s18
   de0d2:	eef0 0a69 	vmov.f32	s1, s19
   de0d6:	f004 fc09 	bl	e28ec <finite>
   de0da:	b388      	cbz	r0, de140 <exp+0x98>
   de0dc:	a32c      	add	r3, pc, #176	; (adr r3, de190 <exp+0xe8>)
   de0de:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0e2:	ec51 0b19 	vmov	r0, r1, d9
   de0e6:	f005 f983 	bl	e33f0 <__aeabi_dcmpgt>
   de0ea:	4605      	mov	r5, r0
   de0ec:	bb80      	cbnz	r0, de150 <exp+0xa8>
   de0ee:	a32a      	add	r3, pc, #168	; (adr r3, de198 <exp+0xf0>)
   de0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0f4:	ec51 0b19 	vmov	r0, r1, d9
   de0f8:	f005 f95c 	bl	e33b4 <__aeabi_dcmplt>
   de0fc:	b300      	cbz	r0, de140 <exp+0x98>
   de0fe:	f994 3000 	ldrsb.w	r3, [r4]
   de102:	4a28      	ldr	r2, [pc, #160]	; (de1a4 <exp+0xfc>)
   de104:	9508      	str	r5, [sp, #32]
   de106:	2600      	movs	r6, #0
   de108:	2700      	movs	r7, #0
   de10a:	2104      	movs	r1, #4
   de10c:	2b02      	cmp	r3, #2
   de10e:	ed8d 9b04 	vstr	d9, [sp, #16]
   de112:	ed8d 9b02 	vstr	d9, [sp, #8]
   de116:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de11a:	e88d 0006 	stmia.w	sp, {r1, r2}
   de11e:	d030      	beq.n	de182 <exp+0xda>
   de120:	4668      	mov	r0, sp
   de122:	f004 fbeb 	bl	e28fc <matherr>
   de126:	b360      	cbz	r0, de182 <exp+0xda>
   de128:	9b08      	ldr	r3, [sp, #32]
   de12a:	b11b      	cbz	r3, de134 <exp+0x8c>
   de12c:	f7fc fda6 	bl	dac7c <__errno>
   de130:	9b08      	ldr	r3, [sp, #32]
   de132:	6003      	str	r3, [r0, #0]
   de134:	ed9d 0b06 	vldr	d0, [sp, #24]
   de138:	b00b      	add	sp, #44	; 0x2c
   de13a:	ecbd 8b04 	vpop	{d8-d9}
   de13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de140:	eeb0 0a48 	vmov.f32	s0, s16
   de144:	eef0 0a68 	vmov.f32	s1, s17
   de148:	b00b      	add	sp, #44	; 0x2c
   de14a:	ecbd 8b04 	vpop	{d8-d9}
   de14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de150:	4a14      	ldr	r2, [pc, #80]	; (de1a4 <exp+0xfc>)
   de152:	f994 3000 	ldrsb.w	r3, [r4]
   de156:	9201      	str	r2, [sp, #4]
   de158:	2103      	movs	r1, #3
   de15a:	2200      	movs	r2, #0
   de15c:	ed8d 9b04 	vstr	d9, [sp, #16]
   de160:	ed8d 9b02 	vstr	d9, [sp, #8]
   de164:	9100      	str	r1, [sp, #0]
   de166:	9208      	str	r2, [sp, #32]
   de168:	b92b      	cbnz	r3, de176 <exp+0xce>
   de16a:	4b0f      	ldr	r3, [pc, #60]	; (de1a8 <exp+0x100>)
   de16c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de170:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de174:	e7d4      	b.n	de120 <exp+0x78>
   de176:	490d      	ldr	r1, [pc, #52]	; (de1ac <exp+0x104>)
   de178:	2000      	movs	r0, #0
   de17a:	2b02      	cmp	r3, #2
   de17c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de180:	d1ce      	bne.n	de120 <exp+0x78>
   de182:	f7fc fd7b 	bl	dac7c <__errno>
   de186:	2322      	movs	r3, #34	; 0x22
   de188:	6003      	str	r3, [r0, #0]
   de18a:	e7cd      	b.n	de128 <exp+0x80>
   de18c:	f3af 8000 	nop.w
   de190:	fefa39ef 	.word	0xfefa39ef
   de194:	40862e42 	.word	0x40862e42
   de198:	d52d3051 	.word	0xd52d3051
   de19c:	c0874910 	.word	0xc0874910
   de1a0:	2003d5c0 	.word	0x2003d5c0
   de1a4:	000e8300 	.word	0x000e8300
   de1a8:	47efffff 	.word	0x47efffff
   de1ac:	7ff00000 	.word	0x7ff00000

000de1b0 <fmod>:
   de1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de1b4:	ed2d 8b02 	vpush	{d8}
   de1b8:	b08b      	sub	sp, #44	; 0x2c
   de1ba:	ec57 6b10 	vmov	r6, r7, d0
   de1be:	ec55 4b11 	vmov	r4, r5, d1
   de1c2:	f001 fbe7 	bl	df994 <__ieee754_fmod>
   de1c6:	4b2e      	ldr	r3, [pc, #184]	; (de280 <fmod+0xd0>)
   de1c8:	eeb0 8a40 	vmov.f32	s16, s0
   de1cc:	eef0 8a60 	vmov.f32	s17, s1
   de1d0:	f993 8000 	ldrsb.w	r8, [r3]
   de1d4:	f1b8 3fff 	cmp.w	r8, #4294967295
   de1d8:	d031      	beq.n	de23e <fmod+0x8e>
   de1da:	4622      	mov	r2, r4
   de1dc:	462b      	mov	r3, r5
   de1de:	4620      	mov	r0, r4
   de1e0:	4629      	mov	r1, r5
   de1e2:	f005 f90f 	bl	e3404 <__aeabi_dcmpun>
   de1e6:	bb50      	cbnz	r0, de23e <fmod+0x8e>
   de1e8:	4632      	mov	r2, r6
   de1ea:	463b      	mov	r3, r7
   de1ec:	4630      	mov	r0, r6
   de1ee:	4639      	mov	r1, r7
   de1f0:	f005 f908 	bl	e3404 <__aeabi_dcmpun>
   de1f4:	4681      	mov	r9, r0
   de1f6:	bb10      	cbnz	r0, de23e <fmod+0x8e>
   de1f8:	2200      	movs	r2, #0
   de1fa:	2300      	movs	r3, #0
   de1fc:	4620      	mov	r0, r4
   de1fe:	4629      	mov	r1, r5
   de200:	f005 f8ce 	bl	e33a0 <__aeabi_dcmpeq>
   de204:	b1d8      	cbz	r0, de23e <fmod+0x8e>
   de206:	4b1f      	ldr	r3, [pc, #124]	; (de284 <fmod+0xd4>)
   de208:	f8cd 9020 	str.w	r9, [sp, #32]
   de20c:	2201      	movs	r2, #1
   de20e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de212:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de216:	e88d 000c 	stmia.w	sp, {r2, r3}
   de21a:	f1b8 0f00 	cmp.w	r8, #0
   de21e:	d117      	bne.n	de250 <fmod+0xa0>
   de220:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de224:	4668      	mov	r0, sp
   de226:	f004 fb69 	bl	e28fc <matherr>
   de22a:	b1e0      	cbz	r0, de266 <fmod+0xb6>
   de22c:	9b08      	ldr	r3, [sp, #32]
   de22e:	bb0b      	cbnz	r3, de274 <fmod+0xc4>
   de230:	ed9d 0b06 	vldr	d0, [sp, #24]
   de234:	b00b      	add	sp, #44	; 0x2c
   de236:	ecbd 8b02 	vpop	{d8}
   de23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de23e:	eeb0 0a48 	vmov.f32	s0, s16
   de242:	eef0 0a68 	vmov.f32	s1, s17
   de246:	b00b      	add	sp, #44	; 0x2c
   de248:	ecbd 8b02 	vpop	{d8}
   de24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de250:	2200      	movs	r2, #0
   de252:	2300      	movs	r3, #0
   de254:	4610      	mov	r0, r2
   de256:	4619      	mov	r1, r3
   de258:	f004 ff64 	bl	e3124 <__aeabi_ddiv>
   de25c:	f1b8 0f02 	cmp.w	r8, #2
   de260:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de264:	d1de      	bne.n	de224 <fmod+0x74>
   de266:	f7fc fd09 	bl	dac7c <__errno>
   de26a:	2321      	movs	r3, #33	; 0x21
   de26c:	6003      	str	r3, [r0, #0]
   de26e:	9b08      	ldr	r3, [sp, #32]
   de270:	2b00      	cmp	r3, #0
   de272:	d0dd      	beq.n	de230 <fmod+0x80>
   de274:	f7fc fd02 	bl	dac7c <__errno>
   de278:	9b08      	ldr	r3, [sp, #32]
   de27a:	6003      	str	r3, [r0, #0]
   de27c:	e7d8      	b.n	de230 <fmod+0x80>
   de27e:	bf00      	nop
   de280:	2003d5c0 	.word	0x2003d5c0
   de284:	000e8304 	.word	0x000e8304

000de288 <log>:
   de288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de28c:	ed2d 8b02 	vpush	{d8}
   de290:	b08b      	sub	sp, #44	; 0x2c
   de292:	ec55 4b10 	vmov	r4, r5, d0
   de296:	f001 fcb7 	bl	dfc08 <__ieee754_log>
   de29a:	4b3a      	ldr	r3, [pc, #232]	; (de384 <log+0xfc>)
   de29c:	eeb0 8a40 	vmov.f32	s16, s0
   de2a0:	eef0 8a60 	vmov.f32	s17, s1
   de2a4:	f993 6000 	ldrsb.w	r6, [r3]
   de2a8:	1c73      	adds	r3, r6, #1
   de2aa:	d00d      	beq.n	de2c8 <log+0x40>
   de2ac:	4622      	mov	r2, r4
   de2ae:	462b      	mov	r3, r5
   de2b0:	4620      	mov	r0, r4
   de2b2:	4629      	mov	r1, r5
   de2b4:	f005 f8a6 	bl	e3404 <__aeabi_dcmpun>
   de2b8:	b930      	cbnz	r0, de2c8 <log+0x40>
   de2ba:	2200      	movs	r2, #0
   de2bc:	2300      	movs	r3, #0
   de2be:	4620      	mov	r0, r4
   de2c0:	4629      	mov	r1, r5
   de2c2:	f005 f895 	bl	e33f0 <__aeabi_dcmpgt>
   de2c6:	b140      	cbz	r0, de2da <log+0x52>
   de2c8:	eeb0 0a48 	vmov.f32	s0, s16
   de2cc:	eef0 0a68 	vmov.f32	s1, s17
   de2d0:	b00b      	add	sp, #44	; 0x2c
   de2d2:	ecbd 8b02 	vpop	{d8}
   de2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de2da:	4b2b      	ldr	r3, [pc, #172]	; (de388 <log+0x100>)
   de2dc:	9008      	str	r0, [sp, #32]
   de2de:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de2e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de2e6:	9301      	str	r3, [sp, #4]
   de2e8:	b9de      	cbnz	r6, de322 <log+0x9a>
   de2ea:	4f28      	ldr	r7, [pc, #160]	; (de38c <log+0x104>)
   de2ec:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de2f0:	4620      	mov	r0, r4
   de2f2:	4629      	mov	r1, r5
   de2f4:	2200      	movs	r2, #0
   de2f6:	2300      	movs	r3, #0
   de2f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de2fc:	f005 f850 	bl	e33a0 <__aeabi_dcmpeq>
   de300:	2800      	cmp	r0, #0
   de302:	d037      	beq.n	de374 <log+0xec>
   de304:	2302      	movs	r3, #2
   de306:	9300      	str	r3, [sp, #0]
   de308:	4668      	mov	r0, sp
   de30a:	f004 faf7 	bl	e28fc <matherr>
   de30e:	b1c8      	cbz	r0, de344 <log+0xbc>
   de310:	9b08      	ldr	r3, [sp, #32]
   de312:	b9e3      	cbnz	r3, de34e <log+0xc6>
   de314:	ed9d 0b06 	vldr	d0, [sp, #24]
   de318:	b00b      	add	sp, #44	; 0x2c
   de31a:	ecbd 8b02 	vpop	{d8}
   de31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de322:	f8df 9070 	ldr.w	r9, [pc, #112]	; de394 <log+0x10c>
   de326:	f04f 0800 	mov.w	r8, #0
   de32a:	4620      	mov	r0, r4
   de32c:	4629      	mov	r1, r5
   de32e:	2200      	movs	r2, #0
   de330:	2300      	movs	r3, #0
   de332:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de336:	f005 f833 	bl	e33a0 <__aeabi_dcmpeq>
   de33a:	b168      	cbz	r0, de358 <log+0xd0>
   de33c:	2302      	movs	r3, #2
   de33e:	429e      	cmp	r6, r3
   de340:	9300      	str	r3, [sp, #0]
   de342:	d1e1      	bne.n	de308 <log+0x80>
   de344:	f7fc fc9a 	bl	dac7c <__errno>
   de348:	2322      	movs	r3, #34	; 0x22
   de34a:	6003      	str	r3, [r0, #0]
   de34c:	e7e0      	b.n	de310 <log+0x88>
   de34e:	f7fc fc95 	bl	dac7c <__errno>
   de352:	9b08      	ldr	r3, [sp, #32]
   de354:	6003      	str	r3, [r0, #0]
   de356:	e7dd      	b.n	de314 <log+0x8c>
   de358:	2301      	movs	r3, #1
   de35a:	2e02      	cmp	r6, #2
   de35c:	9300      	str	r3, [sp, #0]
   de35e:	d10b      	bne.n	de378 <log+0xf0>
   de360:	f7fc fc8c 	bl	dac7c <__errno>
   de364:	2321      	movs	r3, #33	; 0x21
   de366:	6003      	str	r3, [r0, #0]
   de368:	4809      	ldr	r0, [pc, #36]	; (de390 <log+0x108>)
   de36a:	f004 fac9 	bl	e2900 <nan>
   de36e:	ed8d 0b06 	vstr	d0, [sp, #24]
   de372:	e7cd      	b.n	de310 <log+0x88>
   de374:	2301      	movs	r3, #1
   de376:	9300      	str	r3, [sp, #0]
   de378:	4668      	mov	r0, sp
   de37a:	f004 fabf 	bl	e28fc <matherr>
   de37e:	2800      	cmp	r0, #0
   de380:	d1f2      	bne.n	de368 <log+0xe0>
   de382:	e7ed      	b.n	de360 <log+0xd8>
   de384:	2003d5c0 	.word	0x2003d5c0
   de388:	000e830c 	.word	0x000e830c
   de38c:	c7efffff 	.word	0xc7efffff
   de390:	000e8308 	.word	0x000e8308
   de394:	fff00000 	.word	0xfff00000

000de398 <log10>:
   de398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de39c:	ed2d 8b02 	vpush	{d8}
   de3a0:	b08b      	sub	sp, #44	; 0x2c
   de3a2:	ec55 4b10 	vmov	r4, r5, d0
   de3a6:	f001 fe33 	bl	e0010 <__ieee754_log10>
   de3aa:	4b3b      	ldr	r3, [pc, #236]	; (de498 <log10+0x100>)
   de3ac:	eeb0 8a40 	vmov.f32	s16, s0
   de3b0:	eef0 8a60 	vmov.f32	s17, s1
   de3b4:	f993 6000 	ldrsb.w	r6, [r3]
   de3b8:	1c73      	adds	r3, r6, #1
   de3ba:	d00e      	beq.n	de3da <log10+0x42>
   de3bc:	4622      	mov	r2, r4
   de3be:	462b      	mov	r3, r5
   de3c0:	4620      	mov	r0, r4
   de3c2:	4629      	mov	r1, r5
   de3c4:	f005 f81e 	bl	e3404 <__aeabi_dcmpun>
   de3c8:	4607      	mov	r7, r0
   de3ca:	b930      	cbnz	r0, de3da <log10+0x42>
   de3cc:	2200      	movs	r2, #0
   de3ce:	2300      	movs	r3, #0
   de3d0:	4620      	mov	r0, r4
   de3d2:	4629      	mov	r1, r5
   de3d4:	f004 fff8 	bl	e33c8 <__aeabi_dcmple>
   de3d8:	b940      	cbnz	r0, de3ec <log10+0x54>
   de3da:	eeb0 0a48 	vmov.f32	s0, s16
   de3de:	eef0 0a68 	vmov.f32	s1, s17
   de3e2:	b00b      	add	sp, #44	; 0x2c
   de3e4:	ecbd 8b02 	vpop	{d8}
   de3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de3ec:	4b2b      	ldr	r3, [pc, #172]	; (de49c <log10+0x104>)
   de3ee:	9708      	str	r7, [sp, #32]
   de3f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de3f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de3f8:	9301      	str	r3, [sp, #4]
   de3fa:	b9de      	cbnz	r6, de434 <log10+0x9c>
   de3fc:	4f28      	ldr	r7, [pc, #160]	; (de4a0 <log10+0x108>)
   de3fe:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de402:	4620      	mov	r0, r4
   de404:	4629      	mov	r1, r5
   de406:	2200      	movs	r2, #0
   de408:	2300      	movs	r3, #0
   de40a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de40e:	f004 ffc7 	bl	e33a0 <__aeabi_dcmpeq>
   de412:	2800      	cmp	r0, #0
   de414:	d037      	beq.n	de486 <log10+0xee>
   de416:	2302      	movs	r3, #2
   de418:	9300      	str	r3, [sp, #0]
   de41a:	4668      	mov	r0, sp
   de41c:	f004 fa6e 	bl	e28fc <matherr>
   de420:	b1c8      	cbz	r0, de456 <log10+0xbe>
   de422:	9b08      	ldr	r3, [sp, #32]
   de424:	b9e3      	cbnz	r3, de460 <log10+0xc8>
   de426:	ed9d 0b06 	vldr	d0, [sp, #24]
   de42a:	b00b      	add	sp, #44	; 0x2c
   de42c:	ecbd 8b02 	vpop	{d8}
   de430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de434:	f8df 9070 	ldr.w	r9, [pc, #112]	; de4a8 <log10+0x110>
   de438:	f04f 0800 	mov.w	r8, #0
   de43c:	4620      	mov	r0, r4
   de43e:	4629      	mov	r1, r5
   de440:	2200      	movs	r2, #0
   de442:	2300      	movs	r3, #0
   de444:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de448:	f004 ffaa 	bl	e33a0 <__aeabi_dcmpeq>
   de44c:	b168      	cbz	r0, de46a <log10+0xd2>
   de44e:	2302      	movs	r3, #2
   de450:	429e      	cmp	r6, r3
   de452:	9300      	str	r3, [sp, #0]
   de454:	d1e1      	bne.n	de41a <log10+0x82>
   de456:	f7fc fc11 	bl	dac7c <__errno>
   de45a:	2322      	movs	r3, #34	; 0x22
   de45c:	6003      	str	r3, [r0, #0]
   de45e:	e7e0      	b.n	de422 <log10+0x8a>
   de460:	f7fc fc0c 	bl	dac7c <__errno>
   de464:	9b08      	ldr	r3, [sp, #32]
   de466:	6003      	str	r3, [r0, #0]
   de468:	e7dd      	b.n	de426 <log10+0x8e>
   de46a:	2301      	movs	r3, #1
   de46c:	2e02      	cmp	r6, #2
   de46e:	9300      	str	r3, [sp, #0]
   de470:	d10b      	bne.n	de48a <log10+0xf2>
   de472:	f7fc fc03 	bl	dac7c <__errno>
   de476:	2321      	movs	r3, #33	; 0x21
   de478:	6003      	str	r3, [r0, #0]
   de47a:	480a      	ldr	r0, [pc, #40]	; (de4a4 <log10+0x10c>)
   de47c:	f004 fa40 	bl	e2900 <nan>
   de480:	ed8d 0b06 	vstr	d0, [sp, #24]
   de484:	e7cd      	b.n	de422 <log10+0x8a>
   de486:	2301      	movs	r3, #1
   de488:	9300      	str	r3, [sp, #0]
   de48a:	4668      	mov	r0, sp
   de48c:	f004 fa36 	bl	e28fc <matherr>
   de490:	2800      	cmp	r0, #0
   de492:	d1f2      	bne.n	de47a <log10+0xe2>
   de494:	e7ed      	b.n	de472 <log10+0xda>
   de496:	bf00      	nop
   de498:	2003d5c0 	.word	0x2003d5c0
   de49c:	000e8310 	.word	0x000e8310
   de4a0:	c7efffff 	.word	0xc7efffff
   de4a4:	000e8308 	.word	0x000e8308
   de4a8:	fff00000 	.word	0xfff00000
   de4ac:	00000000 	.word	0x00000000

000de4b0 <pow>:
   de4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de4b4:	ed2d 8b02 	vpush	{d8}
   de4b8:	f8df a324 	ldr.w	sl, [pc, #804]	; de7e0 <pow+0x330>
   de4bc:	b08b      	sub	sp, #44	; 0x2c
   de4be:	ec57 6b10 	vmov	r6, r7, d0
   de4c2:	ec55 4b11 	vmov	r4, r5, d1
   de4c6:	f001 fe47 	bl	e0158 <__ieee754_pow>
   de4ca:	f99a 8000 	ldrsb.w	r8, [sl]
   de4ce:	eeb0 8a40 	vmov.f32	s16, s0
   de4d2:	eef0 8a60 	vmov.f32	s17, s1
   de4d6:	f1b8 3fff 	cmp.w	r8, #4294967295
   de4da:	d048      	beq.n	de56e <pow+0xbe>
   de4dc:	4622      	mov	r2, r4
   de4de:	462b      	mov	r3, r5
   de4e0:	4620      	mov	r0, r4
   de4e2:	4629      	mov	r1, r5
   de4e4:	f004 ff8e 	bl	e3404 <__aeabi_dcmpun>
   de4e8:	4683      	mov	fp, r0
   de4ea:	2800      	cmp	r0, #0
   de4ec:	d13f      	bne.n	de56e <pow+0xbe>
   de4ee:	4632      	mov	r2, r6
   de4f0:	463b      	mov	r3, r7
   de4f2:	4630      	mov	r0, r6
   de4f4:	4639      	mov	r1, r7
   de4f6:	f004 ff85 	bl	e3404 <__aeabi_dcmpun>
   de4fa:	4681      	mov	r9, r0
   de4fc:	2800      	cmp	r0, #0
   de4fe:	f040 8090 	bne.w	de622 <pow+0x172>
   de502:	4630      	mov	r0, r6
   de504:	4639      	mov	r1, r7
   de506:	2200      	movs	r2, #0
   de508:	2300      	movs	r3, #0
   de50a:	f004 ff49 	bl	e33a0 <__aeabi_dcmpeq>
   de50e:	2800      	cmp	r0, #0
   de510:	d036      	beq.n	de580 <pow+0xd0>
   de512:	2200      	movs	r2, #0
   de514:	2300      	movs	r3, #0
   de516:	4620      	mov	r0, r4
   de518:	4629      	mov	r1, r5
   de51a:	f004 ff41 	bl	e33a0 <__aeabi_dcmpeq>
   de51e:	4683      	mov	fp, r0
   de520:	b1b8      	cbz	r0, de552 <pow+0xa2>
   de522:	ed9f 7ba5 	vldr	d7, [pc, #660]	; de7b8 <pow+0x308>
   de526:	2201      	movs	r2, #1
   de528:	4ba9      	ldr	r3, [pc, #676]	; (de7d0 <pow+0x320>)
   de52a:	f8cd 9020 	str.w	r9, [sp, #32]
   de52e:	9200      	str	r2, [sp, #0]
   de530:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de534:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de538:	ed8d 7b06 	vstr	d7, [sp, #24]
   de53c:	9301      	str	r3, [sp, #4]
   de53e:	f1b8 0f00 	cmp.w	r8, #0
   de542:	d05b      	beq.n	de5fc <pow+0x14c>
   de544:	ed9f 0b9e 	vldr	d0, [pc, #632]	; de7c0 <pow+0x310>
   de548:	b00b      	add	sp, #44	; 0x2c
   de54a:	ecbd 8b02 	vpop	{d8}
   de54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de552:	ec45 4b10 	vmov	d0, r4, r5
   de556:	f004 f9c9 	bl	e28ec <finite>
   de55a:	b140      	cbz	r0, de56e <pow+0xbe>
   de55c:	2200      	movs	r2, #0
   de55e:	2300      	movs	r3, #0
   de560:	4620      	mov	r0, r4
   de562:	4629      	mov	r1, r5
   de564:	f004 ff26 	bl	e33b4 <__aeabi_dcmplt>
   de568:	2800      	cmp	r0, #0
   de56a:	f040 80c5 	bne.w	de6f8 <pow+0x248>
   de56e:	eeb0 0a48 	vmov.f32	s0, s16
   de572:	eef0 0a68 	vmov.f32	s1, s17
   de576:	b00b      	add	sp, #44	; 0x2c
   de578:	ecbd 8b02 	vpop	{d8}
   de57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de580:	eeb0 0a48 	vmov.f32	s0, s16
   de584:	eef0 0a68 	vmov.f32	s1, s17
   de588:	f004 f9b0 	bl	e28ec <finite>
   de58c:	4680      	mov	r8, r0
   de58e:	2800      	cmp	r0, #0
   de590:	d061      	beq.n	de656 <pow+0x1a6>
   de592:	f04f 0800 	mov.w	r8, #0
   de596:	f04f 0900 	mov.w	r9, #0
   de59a:	ec51 0b18 	vmov	r0, r1, d8
   de59e:	4642      	mov	r2, r8
   de5a0:	464b      	mov	r3, r9
   de5a2:	f004 fefd 	bl	e33a0 <__aeabi_dcmpeq>
   de5a6:	2800      	cmp	r0, #0
   de5a8:	d0e1      	beq.n	de56e <pow+0xbe>
   de5aa:	ec47 6b10 	vmov	d0, r6, r7
   de5ae:	f004 f99d 	bl	e28ec <finite>
   de5b2:	2800      	cmp	r0, #0
   de5b4:	d0db      	beq.n	de56e <pow+0xbe>
   de5b6:	ec45 4b10 	vmov	d0, r4, r5
   de5ba:	f004 f997 	bl	e28ec <finite>
   de5be:	2800      	cmp	r0, #0
   de5c0:	d0d5      	beq.n	de56e <pow+0xbe>
   de5c2:	f99a 3000 	ldrsb.w	r3, [sl]
   de5c6:	4a82      	ldr	r2, [pc, #520]	; (de7d0 <pow+0x320>)
   de5c8:	9201      	str	r2, [sp, #4]
   de5ca:	2104      	movs	r1, #4
   de5cc:	2200      	movs	r2, #0
   de5ce:	2b02      	cmp	r3, #2
   de5d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de5d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de5d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de5dc:	9100      	str	r1, [sp, #0]
   de5de:	9208      	str	r2, [sp, #32]
   de5e0:	d003      	beq.n	de5ea <pow+0x13a>
   de5e2:	4668      	mov	r0, sp
   de5e4:	f004 f98a 	bl	e28fc <matherr>
   de5e8:	b970      	cbnz	r0, de608 <pow+0x158>
   de5ea:	f7fc fb47 	bl	dac7c <__errno>
   de5ee:	2322      	movs	r3, #34	; 0x22
   de5f0:	6003      	str	r3, [r0, #0]
   de5f2:	e009      	b.n	de608 <pow+0x158>
   de5f4:	ed9f 7b70 	vldr	d7, [pc, #448]	; de7b8 <pow+0x308>
   de5f8:	ed8d 7b06 	vstr	d7, [sp, #24]
   de5fc:	4668      	mov	r0, sp
   de5fe:	f004 f97d 	bl	e28fc <matherr>
   de602:	2800      	cmp	r0, #0
   de604:	f000 808e 	beq.w	de724 <pow+0x274>
   de608:	9b08      	ldr	r3, [sp, #32]
   de60a:	b11b      	cbz	r3, de614 <pow+0x164>
   de60c:	f7fc fb36 	bl	dac7c <__errno>
   de610:	9b08      	ldr	r3, [sp, #32]
   de612:	6003      	str	r3, [r0, #0]
   de614:	ed9d 0b06 	vldr	d0, [sp, #24]
   de618:	b00b      	add	sp, #44	; 0x2c
   de61a:	ecbd 8b02 	vpop	{d8}
   de61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de622:	2200      	movs	r2, #0
   de624:	2300      	movs	r3, #0
   de626:	4620      	mov	r0, r4
   de628:	4629      	mov	r1, r5
   de62a:	f004 feb9 	bl	e33a0 <__aeabi_dcmpeq>
   de62e:	2800      	cmp	r0, #0
   de630:	d09d      	beq.n	de56e <pow+0xbe>
   de632:	ed9f 0b63 	vldr	d0, [pc, #396]	; de7c0 <pow+0x310>
   de636:	4b66      	ldr	r3, [pc, #408]	; (de7d0 <pow+0x320>)
   de638:	f8cd b020 	str.w	fp, [sp, #32]
   de63c:	2201      	movs	r2, #1
   de63e:	f1b8 0f02 	cmp.w	r8, #2
   de642:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de646:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de64a:	ed8d 0b06 	vstr	d0, [sp, #24]
   de64e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de652:	d1d3      	bne.n	de5fc <pow+0x14c>
   de654:	e78f      	b.n	de576 <pow+0xc6>
   de656:	ec47 6b10 	vmov	d0, r6, r7
   de65a:	f004 f947 	bl	e28ec <finite>
   de65e:	2800      	cmp	r0, #0
   de660:	d097      	beq.n	de592 <pow+0xe2>
   de662:	ec45 4b10 	vmov	d0, r4, r5
   de666:	f004 f941 	bl	e28ec <finite>
   de66a:	2800      	cmp	r0, #0
   de66c:	d091      	beq.n	de592 <pow+0xe2>
   de66e:	ec53 2b18 	vmov	r2, r3, d8
   de672:	ee18 0a10 	vmov	r0, s16
   de676:	4619      	mov	r1, r3
   de678:	f004 fec4 	bl	e3404 <__aeabi_dcmpun>
   de67c:	2800      	cmp	r0, #0
   de67e:	d17c      	bne.n	de77a <pow+0x2ca>
   de680:	2303      	movs	r3, #3
   de682:	f99a 8000 	ldrsb.w	r8, [sl]
   de686:	9300      	str	r3, [sp, #0]
   de688:	4b51      	ldr	r3, [pc, #324]	; (de7d0 <pow+0x320>)
   de68a:	9008      	str	r0, [sp, #32]
   de68c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de690:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de694:	9301      	str	r3, [sp, #4]
   de696:	f1b8 0f00 	cmp.w	r8, #0
   de69a:	d148      	bne.n	de72e <pow+0x27e>
   de69c:	f8df 9144 	ldr.w	r9, [pc, #324]	; de7e4 <pow+0x334>
   de6a0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   de6a4:	2200      	movs	r2, #0
   de6a6:	2300      	movs	r3, #0
   de6a8:	4630      	mov	r0, r6
   de6aa:	4639      	mov	r1, r7
   de6ac:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de6b0:	f004 fe80 	bl	e33b4 <__aeabi_dcmplt>
   de6b4:	2800      	cmp	r0, #0
   de6b6:	d094      	beq.n	de5e2 <pow+0x132>
   de6b8:	2200      	movs	r2, #0
   de6ba:	4b46      	ldr	r3, [pc, #280]	; (de7d4 <pow+0x324>)
   de6bc:	4620      	mov	r0, r4
   de6be:	4629      	mov	r1, r5
   de6c0:	f004 fc06 	bl	e2ed0 <__aeabi_dmul>
   de6c4:	4604      	mov	r4, r0
   de6c6:	460d      	mov	r5, r1
   de6c8:	ec45 4b10 	vmov	d0, r4, r5
   de6cc:	f004 f920 	bl	e2910 <rint>
   de6d0:	4620      	mov	r0, r4
   de6d2:	ec53 2b10 	vmov	r2, r3, d0
   de6d6:	4629      	mov	r1, r5
   de6d8:	f004 fe62 	bl	e33a0 <__aeabi_dcmpeq>
   de6dc:	2800      	cmp	r0, #0
   de6de:	d149      	bne.n	de774 <pow+0x2c4>
   de6e0:	4b3d      	ldr	r3, [pc, #244]	; (de7d8 <pow+0x328>)
   de6e2:	f99a 8000 	ldrsb.w	r8, [sl]
   de6e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de6ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de6ee:	f1b8 0f02 	cmp.w	r8, #2
   de6f2:	f47f af76 	bne.w	de5e2 <pow+0x132>
   de6f6:	e778      	b.n	de5ea <pow+0x13a>
   de6f8:	4a35      	ldr	r2, [pc, #212]	; (de7d0 <pow+0x320>)
   de6fa:	f99a 3000 	ldrsb.w	r3, [sl]
   de6fe:	f8cd b020 	str.w	fp, [sp, #32]
   de702:	2101      	movs	r1, #1
   de704:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de708:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de70c:	e88d 0006 	stmia.w	sp, {r1, r2}
   de710:	2b00      	cmp	r3, #0
   de712:	f43f af6f 	beq.w	de5f4 <pow+0x144>
   de716:	4931      	ldr	r1, [pc, #196]	; (de7dc <pow+0x32c>)
   de718:	2000      	movs	r0, #0
   de71a:	2b02      	cmp	r3, #2
   de71c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de720:	f47f af6c 	bne.w	de5fc <pow+0x14c>
   de724:	f7fc faaa 	bl	dac7c <__errno>
   de728:	2321      	movs	r3, #33	; 0x21
   de72a:	6003      	str	r3, [r0, #0]
   de72c:	e76c      	b.n	de608 <pow+0x158>
   de72e:	ed9f 7b26 	vldr	d7, [pc, #152]	; de7c8 <pow+0x318>
   de732:	2200      	movs	r2, #0
   de734:	2300      	movs	r3, #0
   de736:	4630      	mov	r0, r6
   de738:	4639      	mov	r1, r7
   de73a:	ed8d 7b06 	vstr	d7, [sp, #24]
   de73e:	f004 fe39 	bl	e33b4 <__aeabi_dcmplt>
   de742:	2800      	cmp	r0, #0
   de744:	d0d3      	beq.n	de6ee <pow+0x23e>
   de746:	2200      	movs	r2, #0
   de748:	4b22      	ldr	r3, [pc, #136]	; (de7d4 <pow+0x324>)
   de74a:	4620      	mov	r0, r4
   de74c:	4629      	mov	r1, r5
   de74e:	f004 fbbf 	bl	e2ed0 <__aeabi_dmul>
   de752:	4604      	mov	r4, r0
   de754:	460d      	mov	r5, r1
   de756:	ec45 4b10 	vmov	d0, r4, r5
   de75a:	f004 f8d9 	bl	e2910 <rint>
   de75e:	4620      	mov	r0, r4
   de760:	ec53 2b10 	vmov	r2, r3, d0
   de764:	4629      	mov	r1, r5
   de766:	f004 fe1b 	bl	e33a0 <__aeabi_dcmpeq>
   de76a:	b918      	cbnz	r0, de774 <pow+0x2c4>
   de76c:	4b1b      	ldr	r3, [pc, #108]	; (de7dc <pow+0x32c>)
   de76e:	2200      	movs	r2, #0
   de770:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de774:	f99a 8000 	ldrsb.w	r8, [sl]
   de778:	e7b9      	b.n	de6ee <pow+0x23e>
   de77a:	4b15      	ldr	r3, [pc, #84]	; (de7d0 <pow+0x320>)
   de77c:	f99a 9000 	ldrsb.w	r9, [sl]
   de780:	f8cd 8020 	str.w	r8, [sp, #32]
   de784:	2201      	movs	r2, #1
   de786:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de78a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de78e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de792:	f1b9 0f00 	cmp.w	r9, #0
   de796:	f43f af2d 	beq.w	de5f4 <pow+0x144>
   de79a:	2200      	movs	r2, #0
   de79c:	2300      	movs	r3, #0
   de79e:	4610      	mov	r0, r2
   de7a0:	4619      	mov	r1, r3
   de7a2:	f004 fcbf 	bl	e3124 <__aeabi_ddiv>
   de7a6:	f1b9 0f02 	cmp.w	r9, #2
   de7aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de7ae:	d0b9      	beq.n	de724 <pow+0x274>
   de7b0:	e724      	b.n	de5fc <pow+0x14c>
   de7b2:	bf00      	nop
   de7b4:	f3af 8000 	nop.w
	...
   de7c4:	3ff00000 	.word	0x3ff00000
   de7c8:	00000000 	.word	0x00000000
   de7cc:	7ff00000 	.word	0x7ff00000
   de7d0:	000e8318 	.word	0x000e8318
   de7d4:	3fe00000 	.word	0x3fe00000
   de7d8:	c7efffff 	.word	0xc7efffff
   de7dc:	fff00000 	.word	0xfff00000
   de7e0:	2003d5c0 	.word	0x2003d5c0
   de7e4:	47efffff 	.word	0x47efffff

000de7e8 <sinh>:
   de7e8:	b530      	push	{r4, r5, lr}
   de7ea:	ed2d 8b04 	vpush	{d8-d9}
   de7ee:	eeb0 9a40 	vmov.f32	s18, s0
   de7f2:	eef0 9a60 	vmov.f32	s19, s1
   de7f6:	4c2d      	ldr	r4, [pc, #180]	; (de8ac <sinh+0xc4>)
   de7f8:	b08b      	sub	sp, #44	; 0x2c
   de7fa:	f002 fc5d 	bl	e10b8 <__ieee754_sinh>
   de7fe:	f994 3000 	ldrsb.w	r3, [r4]
   de802:	eeb0 8a40 	vmov.f32	s16, s0
   de806:	eef0 8a60 	vmov.f32	s17, s1
   de80a:	3301      	adds	r3, #1
   de80c:	d003      	beq.n	de816 <sinh+0x2e>
   de80e:	f004 f86d 	bl	e28ec <finite>
   de812:	4605      	mov	r5, r0
   de814:	b138      	cbz	r0, de826 <sinh+0x3e>
   de816:	eeb0 0a48 	vmov.f32	s0, s16
   de81a:	eef0 0a68 	vmov.f32	s1, s17
   de81e:	b00b      	add	sp, #44	; 0x2c
   de820:	ecbd 8b04 	vpop	{d8-d9}
   de824:	bd30      	pop	{r4, r5, pc}
   de826:	eeb0 0a49 	vmov.f32	s0, s18
   de82a:	eef0 0a69 	vmov.f32	s1, s19
   de82e:	f004 f85d 	bl	e28ec <finite>
   de832:	2800      	cmp	r0, #0
   de834:	d0ef      	beq.n	de816 <sinh+0x2e>
   de836:	4b1e      	ldr	r3, [pc, #120]	; (de8b0 <sinh+0xc8>)
   de838:	f994 4000 	ldrsb.w	r4, [r4]
   de83c:	9508      	str	r5, [sp, #32]
   de83e:	2203      	movs	r2, #3
   de840:	e88d 000c 	stmia.w	sp, {r2, r3}
   de844:	ed8d 9b04 	vstr	d9, [sp, #16]
   de848:	ed8d 9b02 	vstr	d9, [sp, #8]
   de84c:	2200      	movs	r2, #0
   de84e:	2300      	movs	r3, #0
   de850:	ec51 0b19 	vmov	r0, r1, d9
   de854:	b99c      	cbnz	r4, de87e <sinh+0x96>
   de856:	f004 fdcb 	bl	e33f0 <__aeabi_dcmpgt>
   de85a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de85e:	b308      	cbz	r0, de8a4 <sinh+0xbc>
   de860:	4b14      	ldr	r3, [pc, #80]	; (de8b4 <sinh+0xcc>)
   de862:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de866:	4668      	mov	r0, sp
   de868:	f004 f848 	bl	e28fc <matherr>
   de86c:	b180      	cbz	r0, de890 <sinh+0xa8>
   de86e:	9b08      	ldr	r3, [sp, #32]
   de870:	b99b      	cbnz	r3, de89a <sinh+0xb2>
   de872:	ed9d 0b06 	vldr	d0, [sp, #24]
   de876:	b00b      	add	sp, #44	; 0x2c
   de878:	ecbd 8b04 	vpop	{d8-d9}
   de87c:	bd30      	pop	{r4, r5, pc}
   de87e:	f004 fdb7 	bl	e33f0 <__aeabi_dcmpgt>
   de882:	2200      	movs	r2, #0
   de884:	b180      	cbz	r0, de8a8 <sinh+0xc0>
   de886:	4b0c      	ldr	r3, [pc, #48]	; (de8b8 <sinh+0xd0>)
   de888:	2c02      	cmp	r4, #2
   de88a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de88e:	d1ea      	bne.n	de866 <sinh+0x7e>
   de890:	f7fc f9f4 	bl	dac7c <__errno>
   de894:	2322      	movs	r3, #34	; 0x22
   de896:	6003      	str	r3, [r0, #0]
   de898:	e7e9      	b.n	de86e <sinh+0x86>
   de89a:	f7fc f9ef 	bl	dac7c <__errno>
   de89e:	9b08      	ldr	r3, [sp, #32]
   de8a0:	6003      	str	r3, [r0, #0]
   de8a2:	e7e6      	b.n	de872 <sinh+0x8a>
   de8a4:	4b05      	ldr	r3, [pc, #20]	; (de8bc <sinh+0xd4>)
   de8a6:	e7dc      	b.n	de862 <sinh+0x7a>
   de8a8:	4b05      	ldr	r3, [pc, #20]	; (de8c0 <sinh+0xd8>)
   de8aa:	e7ed      	b.n	de888 <sinh+0xa0>
   de8ac:	2003d5c0 	.word	0x2003d5c0
   de8b0:	000e831c 	.word	0x000e831c
   de8b4:	47efffff 	.word	0x47efffff
   de8b8:	7ff00000 	.word	0x7ff00000
   de8bc:	c7efffff 	.word	0xc7efffff
   de8c0:	fff00000 	.word	0xfff00000

000de8c4 <sqrt>:
   de8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de8c8:	ed2d 8b02 	vpush	{d8}
   de8cc:	b08b      	sub	sp, #44	; 0x2c
   de8ce:	ec55 4b10 	vmov	r4, r5, d0
   de8d2:	f002 fcd5 	bl	e1280 <__ieee754_sqrt>
   de8d6:	4b29      	ldr	r3, [pc, #164]	; (de97c <sqrt+0xb8>)
   de8d8:	eeb0 8a40 	vmov.f32	s16, s0
   de8dc:	eef0 8a60 	vmov.f32	s17, s1
   de8e0:	f993 6000 	ldrsb.w	r6, [r3]
   de8e4:	1c73      	adds	r3, r6, #1
   de8e6:	d012      	beq.n	de90e <sqrt+0x4a>
   de8e8:	4622      	mov	r2, r4
   de8ea:	462b      	mov	r3, r5
   de8ec:	4620      	mov	r0, r4
   de8ee:	4629      	mov	r1, r5
   de8f0:	f004 fd88 	bl	e3404 <__aeabi_dcmpun>
   de8f4:	4607      	mov	r7, r0
   de8f6:	b950      	cbnz	r0, de90e <sqrt+0x4a>
   de8f8:	f04f 0800 	mov.w	r8, #0
   de8fc:	f04f 0900 	mov.w	r9, #0
   de900:	4620      	mov	r0, r4
   de902:	4629      	mov	r1, r5
   de904:	4642      	mov	r2, r8
   de906:	464b      	mov	r3, r9
   de908:	f004 fd54 	bl	e33b4 <__aeabi_dcmplt>
   de90c:	b940      	cbnz	r0, de920 <sqrt+0x5c>
   de90e:	eeb0 0a48 	vmov.f32	s0, s16
   de912:	eef0 0a68 	vmov.f32	s1, s17
   de916:	b00b      	add	sp, #44	; 0x2c
   de918:	ecbd 8b02 	vpop	{d8}
   de91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de920:	4b17      	ldr	r3, [pc, #92]	; (de980 <sqrt+0xbc>)
   de922:	9708      	str	r7, [sp, #32]
   de924:	2201      	movs	r2, #1
   de926:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de92a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de92e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de932:	b1b6      	cbz	r6, de962 <sqrt+0x9e>
   de934:	4642      	mov	r2, r8
   de936:	464b      	mov	r3, r9
   de938:	4640      	mov	r0, r8
   de93a:	4649      	mov	r1, r9
   de93c:	f004 fbf2 	bl	e3124 <__aeabi_ddiv>
   de940:	2e02      	cmp	r6, #2
   de942:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de946:	d10e      	bne.n	de966 <sqrt+0xa2>
   de948:	f7fc f998 	bl	dac7c <__errno>
   de94c:	2321      	movs	r3, #33	; 0x21
   de94e:	6003      	str	r3, [r0, #0]
   de950:	9b08      	ldr	r3, [sp, #32]
   de952:	b973      	cbnz	r3, de972 <sqrt+0xae>
   de954:	ed9d 0b06 	vldr	d0, [sp, #24]
   de958:	b00b      	add	sp, #44	; 0x2c
   de95a:	ecbd 8b02 	vpop	{d8}
   de95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de962:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de966:	4668      	mov	r0, sp
   de968:	f003 ffc8 	bl	e28fc <matherr>
   de96c:	2800      	cmp	r0, #0
   de96e:	d1ef      	bne.n	de950 <sqrt+0x8c>
   de970:	e7ea      	b.n	de948 <sqrt+0x84>
   de972:	f7fc f983 	bl	dac7c <__errno>
   de976:	9b08      	ldr	r3, [sp, #32]
   de978:	6003      	str	r3, [r0, #0]
   de97a:	e7eb      	b.n	de954 <sqrt+0x90>
   de97c:	2003d5c0 	.word	0x2003d5c0
   de980:	000e8324 	.word	0x000e8324
   de984:	00000000 	.word	0x00000000

000de988 <__ieee754_acos>:
   de988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de98c:	ec55 4b10 	vmov	r4, r5, d0
   de990:	49cd      	ldr	r1, [pc, #820]	; (decc8 <__ieee754_acos+0x340>)
   de992:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   de996:	428b      	cmp	r3, r1
   de998:	dd0d      	ble.n	de9b6 <__ieee754_acos+0x2e>
   de99a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   de99e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   de9a2:	4323      	orrs	r3, r4
   de9a4:	f040 80bd 	bne.w	deb22 <__ieee754_acos+0x19a>
   de9a8:	2d00      	cmp	r5, #0
   de9aa:	f340 814f 	ble.w	dec4c <__ieee754_acos+0x2c4>
   de9ae:	ed9f 0baa 	vldr	d0, [pc, #680]	; dec58 <__ieee754_acos+0x2d0>
   de9b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9b6:	49c5      	ldr	r1, [pc, #788]	; (deccc <__ieee754_acos+0x344>)
   de9b8:	428b      	cmp	r3, r1
   de9ba:	f340 80ab 	ble.w	deb14 <__ieee754_acos+0x18c>
   de9be:	2d00      	cmp	r5, #0
   de9c0:	f2c0 818c 	blt.w	decdc <__ieee754_acos+0x354>
   de9c4:	ee10 2a10 	vmov	r2, s0
   de9c8:	462b      	mov	r3, r5
   de9ca:	2000      	movs	r0, #0
   de9cc:	49c0      	ldr	r1, [pc, #768]	; (decd0 <__ieee754_acos+0x348>)
   de9ce:	f004 f8cb 	bl	e2b68 <__aeabi_dsub>
   de9d2:	2200      	movs	r2, #0
   de9d4:	4bbf      	ldr	r3, [pc, #764]	; (decd4 <__ieee754_acos+0x34c>)
   de9d6:	f004 fa7b 	bl	e2ed0 <__aeabi_dmul>
   de9da:	4604      	mov	r4, r0
   de9dc:	460d      	mov	r5, r1
   de9de:	ec45 4b10 	vmov	d0, r4, r5
   de9e2:	f002 fc4d 	bl	e1280 <__ieee754_sqrt>
   de9e6:	4620      	mov	r0, r4
   de9e8:	4629      	mov	r1, r5
   de9ea:	a39d      	add	r3, pc, #628	; (adr r3, dec60 <__ieee754_acos+0x2d8>)
   de9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9f0:	ec59 8b10 	vmov	r8, r9, d0
   de9f4:	f004 fa6c 	bl	e2ed0 <__aeabi_dmul>
   de9f8:	a39b      	add	r3, pc, #620	; (adr r3, dec68 <__ieee754_acos+0x2e0>)
   de9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9fe:	f004 f8b5 	bl	e2b6c <__adddf3>
   dea02:	4622      	mov	r2, r4
   dea04:	462b      	mov	r3, r5
   dea06:	f004 fa63 	bl	e2ed0 <__aeabi_dmul>
   dea0a:	a399      	add	r3, pc, #612	; (adr r3, dec70 <__ieee754_acos+0x2e8>)
   dea0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea10:	f004 f8aa 	bl	e2b68 <__aeabi_dsub>
   dea14:	4622      	mov	r2, r4
   dea16:	462b      	mov	r3, r5
   dea18:	f004 fa5a 	bl	e2ed0 <__aeabi_dmul>
   dea1c:	a396      	add	r3, pc, #600	; (adr r3, dec78 <__ieee754_acos+0x2f0>)
   dea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea22:	f004 f8a3 	bl	e2b6c <__adddf3>
   dea26:	4622      	mov	r2, r4
   dea28:	462b      	mov	r3, r5
   dea2a:	f004 fa51 	bl	e2ed0 <__aeabi_dmul>
   dea2e:	a394      	add	r3, pc, #592	; (adr r3, dec80 <__ieee754_acos+0x2f8>)
   dea30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea34:	f004 f898 	bl	e2b68 <__aeabi_dsub>
   dea38:	4622      	mov	r2, r4
   dea3a:	462b      	mov	r3, r5
   dea3c:	f004 fa48 	bl	e2ed0 <__aeabi_dmul>
   dea40:	a391      	add	r3, pc, #580	; (adr r3, dec88 <__ieee754_acos+0x300>)
   dea42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea46:	f004 f891 	bl	e2b6c <__adddf3>
   dea4a:	4622      	mov	r2, r4
   dea4c:	462b      	mov	r3, r5
   dea4e:	f004 fa3f 	bl	e2ed0 <__aeabi_dmul>
   dea52:	a38f      	add	r3, pc, #572	; (adr r3, dec90 <__ieee754_acos+0x308>)
   dea54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea58:	4682      	mov	sl, r0
   dea5a:	468b      	mov	fp, r1
   dea5c:	4620      	mov	r0, r4
   dea5e:	4629      	mov	r1, r5
   dea60:	f004 fa36 	bl	e2ed0 <__aeabi_dmul>
   dea64:	a38c      	add	r3, pc, #560	; (adr r3, dec98 <__ieee754_acos+0x310>)
   dea66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea6a:	f004 f87d 	bl	e2b68 <__aeabi_dsub>
   dea6e:	4622      	mov	r2, r4
   dea70:	462b      	mov	r3, r5
   dea72:	f004 fa2d 	bl	e2ed0 <__aeabi_dmul>
   dea76:	a38a      	add	r3, pc, #552	; (adr r3, deca0 <__ieee754_acos+0x318>)
   dea78:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea7c:	f004 f876 	bl	e2b6c <__adddf3>
   dea80:	4622      	mov	r2, r4
   dea82:	462b      	mov	r3, r5
   dea84:	f004 fa24 	bl	e2ed0 <__aeabi_dmul>
   dea88:	a387      	add	r3, pc, #540	; (adr r3, deca8 <__ieee754_acos+0x320>)
   dea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea8e:	f004 f86b 	bl	e2b68 <__aeabi_dsub>
   dea92:	4622      	mov	r2, r4
   dea94:	462b      	mov	r3, r5
   dea96:	f004 fa1b 	bl	e2ed0 <__aeabi_dmul>
   dea9a:	2200      	movs	r2, #0
   dea9c:	4b8c      	ldr	r3, [pc, #560]	; (decd0 <__ieee754_acos+0x348>)
   dea9e:	f004 f865 	bl	e2b6c <__adddf3>
   deaa2:	4602      	mov	r2, r0
   deaa4:	460b      	mov	r3, r1
   deaa6:	4650      	mov	r0, sl
   deaa8:	4659      	mov	r1, fp
   deaaa:	f004 fb3b 	bl	e3124 <__aeabi_ddiv>
   deaae:	4642      	mov	r2, r8
   deab0:	464b      	mov	r3, r9
   deab2:	f004 fa0d 	bl	e2ed0 <__aeabi_dmul>
   deab6:	2600      	movs	r6, #0
   deab8:	4682      	mov	sl, r0
   deaba:	468b      	mov	fp, r1
   deabc:	4632      	mov	r2, r6
   deabe:	464b      	mov	r3, r9
   deac0:	4630      	mov	r0, r6
   deac2:	4649      	mov	r1, r9
   deac4:	f004 fa04 	bl	e2ed0 <__aeabi_dmul>
   deac8:	4602      	mov	r2, r0
   deaca:	460b      	mov	r3, r1
   deacc:	4620      	mov	r0, r4
   deace:	4629      	mov	r1, r5
   dead0:	f004 f84a 	bl	e2b68 <__aeabi_dsub>
   dead4:	4632      	mov	r2, r6
   dead6:	4604      	mov	r4, r0
   dead8:	460d      	mov	r5, r1
   deada:	464b      	mov	r3, r9
   deadc:	4640      	mov	r0, r8
   deade:	4649      	mov	r1, r9
   deae0:	f004 f844 	bl	e2b6c <__adddf3>
   deae4:	4602      	mov	r2, r0
   deae6:	460b      	mov	r3, r1
   deae8:	4620      	mov	r0, r4
   deaea:	4629      	mov	r1, r5
   deaec:	f004 fb1a 	bl	e3124 <__aeabi_ddiv>
   deaf0:	4602      	mov	r2, r0
   deaf2:	460b      	mov	r3, r1
   deaf4:	4650      	mov	r0, sl
   deaf6:	4659      	mov	r1, fp
   deaf8:	f004 f838 	bl	e2b6c <__adddf3>
   deafc:	4632      	mov	r2, r6
   deafe:	464b      	mov	r3, r9
   deb00:	f004 f834 	bl	e2b6c <__adddf3>
   deb04:	4602      	mov	r2, r0
   deb06:	460b      	mov	r3, r1
   deb08:	f004 f830 	bl	e2b6c <__adddf3>
   deb0c:	ec41 0b10 	vmov	d0, r0, r1
   deb10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb14:	4a70      	ldr	r2, [pc, #448]	; (decd8 <__ieee754_acos+0x350>)
   deb16:	4293      	cmp	r3, r2
   deb18:	dc12      	bgt.n	deb40 <__ieee754_acos+0x1b8>
   deb1a:	ed9f 0b65 	vldr	d0, [pc, #404]	; decb0 <__ieee754_acos+0x328>
   deb1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb22:	ee10 2a10 	vmov	r2, s0
   deb26:	462b      	mov	r3, r5
   deb28:	4620      	mov	r0, r4
   deb2a:	4629      	mov	r1, r5
   deb2c:	f004 f81c 	bl	e2b68 <__aeabi_dsub>
   deb30:	4602      	mov	r2, r0
   deb32:	460b      	mov	r3, r1
   deb34:	f004 faf6 	bl	e3124 <__aeabi_ddiv>
   deb38:	ec41 0b10 	vmov	d0, r0, r1
   deb3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb40:	ee10 2a10 	vmov	r2, s0
   deb44:	ee10 0a10 	vmov	r0, s0
   deb48:	462b      	mov	r3, r5
   deb4a:	4629      	mov	r1, r5
   deb4c:	f004 f9c0 	bl	e2ed0 <__aeabi_dmul>
   deb50:	a343      	add	r3, pc, #268	; (adr r3, dec60 <__ieee754_acos+0x2d8>)
   deb52:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb56:	4606      	mov	r6, r0
   deb58:	460f      	mov	r7, r1
   deb5a:	f004 f9b9 	bl	e2ed0 <__aeabi_dmul>
   deb5e:	a342      	add	r3, pc, #264	; (adr r3, dec68 <__ieee754_acos+0x2e0>)
   deb60:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb64:	f004 f802 	bl	e2b6c <__adddf3>
   deb68:	4632      	mov	r2, r6
   deb6a:	463b      	mov	r3, r7
   deb6c:	f004 f9b0 	bl	e2ed0 <__aeabi_dmul>
   deb70:	a33f      	add	r3, pc, #252	; (adr r3, dec70 <__ieee754_acos+0x2e8>)
   deb72:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb76:	f003 fff7 	bl	e2b68 <__aeabi_dsub>
   deb7a:	4632      	mov	r2, r6
   deb7c:	463b      	mov	r3, r7
   deb7e:	f004 f9a7 	bl	e2ed0 <__aeabi_dmul>
   deb82:	a33d      	add	r3, pc, #244	; (adr r3, dec78 <__ieee754_acos+0x2f0>)
   deb84:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb88:	f003 fff0 	bl	e2b6c <__adddf3>
   deb8c:	4632      	mov	r2, r6
   deb8e:	463b      	mov	r3, r7
   deb90:	f004 f99e 	bl	e2ed0 <__aeabi_dmul>
   deb94:	a33a      	add	r3, pc, #232	; (adr r3, dec80 <__ieee754_acos+0x2f8>)
   deb96:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb9a:	f003 ffe5 	bl	e2b68 <__aeabi_dsub>
   deb9e:	4632      	mov	r2, r6
   deba0:	463b      	mov	r3, r7
   deba2:	f004 f995 	bl	e2ed0 <__aeabi_dmul>
   deba6:	a338      	add	r3, pc, #224	; (adr r3, dec88 <__ieee754_acos+0x300>)
   deba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   debac:	f003 ffde 	bl	e2b6c <__adddf3>
   debb0:	4632      	mov	r2, r6
   debb2:	463b      	mov	r3, r7
   debb4:	f004 f98c 	bl	e2ed0 <__aeabi_dmul>
   debb8:	a335      	add	r3, pc, #212	; (adr r3, dec90 <__ieee754_acos+0x308>)
   debba:	e9d3 2300 	ldrd	r2, r3, [r3]
   debbe:	4680      	mov	r8, r0
   debc0:	4689      	mov	r9, r1
   debc2:	4630      	mov	r0, r6
   debc4:	4639      	mov	r1, r7
   debc6:	f004 f983 	bl	e2ed0 <__aeabi_dmul>
   debca:	a333      	add	r3, pc, #204	; (adr r3, dec98 <__ieee754_acos+0x310>)
   debcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   debd0:	f003 ffca 	bl	e2b68 <__aeabi_dsub>
   debd4:	4632      	mov	r2, r6
   debd6:	463b      	mov	r3, r7
   debd8:	f004 f97a 	bl	e2ed0 <__aeabi_dmul>
   debdc:	a330      	add	r3, pc, #192	; (adr r3, deca0 <__ieee754_acos+0x318>)
   debde:	e9d3 2300 	ldrd	r2, r3, [r3]
   debe2:	f003 ffc3 	bl	e2b6c <__adddf3>
   debe6:	4632      	mov	r2, r6
   debe8:	463b      	mov	r3, r7
   debea:	f004 f971 	bl	e2ed0 <__aeabi_dmul>
   debee:	a32e      	add	r3, pc, #184	; (adr r3, deca8 <__ieee754_acos+0x320>)
   debf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   debf4:	f003 ffb8 	bl	e2b68 <__aeabi_dsub>
   debf8:	4632      	mov	r2, r6
   debfa:	463b      	mov	r3, r7
   debfc:	f004 f968 	bl	e2ed0 <__aeabi_dmul>
   dec00:	2200      	movs	r2, #0
   dec02:	4b33      	ldr	r3, [pc, #204]	; (decd0 <__ieee754_acos+0x348>)
   dec04:	f003 ffb2 	bl	e2b6c <__adddf3>
   dec08:	4602      	mov	r2, r0
   dec0a:	460b      	mov	r3, r1
   dec0c:	4640      	mov	r0, r8
   dec0e:	4649      	mov	r1, r9
   dec10:	f004 fa88 	bl	e3124 <__aeabi_ddiv>
   dec14:	4622      	mov	r2, r4
   dec16:	462b      	mov	r3, r5
   dec18:	f004 f95a 	bl	e2ed0 <__aeabi_dmul>
   dec1c:	4602      	mov	r2, r0
   dec1e:	460b      	mov	r3, r1
   dec20:	a125      	add	r1, pc, #148	; (adr r1, decb8 <__ieee754_acos+0x330>)
   dec22:	e9d1 0100 	ldrd	r0, r1, [r1]
   dec26:	f003 ff9f 	bl	e2b68 <__aeabi_dsub>
   dec2a:	4602      	mov	r2, r0
   dec2c:	460b      	mov	r3, r1
   dec2e:	4620      	mov	r0, r4
   dec30:	4629      	mov	r1, r5
   dec32:	f003 ff99 	bl	e2b68 <__aeabi_dsub>
   dec36:	4602      	mov	r2, r0
   dec38:	460b      	mov	r3, r1
   dec3a:	a11d      	add	r1, pc, #116	; (adr r1, decb0 <__ieee754_acos+0x328>)
   dec3c:	e9d1 0100 	ldrd	r0, r1, [r1]
   dec40:	f003 ff92 	bl	e2b68 <__aeabi_dsub>
   dec44:	ec41 0b10 	vmov	d0, r0, r1
   dec48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec4c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; decc0 <__ieee754_acos+0x338>
   dec50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec54:	f3af 8000 	nop.w
	...
   dec60:	0dfdf709 	.word	0x0dfdf709
   dec64:	3f023de1 	.word	0x3f023de1
   dec68:	7501b288 	.word	0x7501b288
   dec6c:	3f49efe0 	.word	0x3f49efe0
   dec70:	b5688f3b 	.word	0xb5688f3b
   dec74:	3fa48228 	.word	0x3fa48228
   dec78:	0e884455 	.word	0x0e884455
   dec7c:	3fc9c155 	.word	0x3fc9c155
   dec80:	03eb6f7d 	.word	0x03eb6f7d
   dec84:	3fd4d612 	.word	0x3fd4d612
   dec88:	55555555 	.word	0x55555555
   dec8c:	3fc55555 	.word	0x3fc55555
   dec90:	b12e9282 	.word	0xb12e9282
   dec94:	3fb3b8c5 	.word	0x3fb3b8c5
   dec98:	1b8d0159 	.word	0x1b8d0159
   dec9c:	3fe6066c 	.word	0x3fe6066c
   deca0:	9c598ac8 	.word	0x9c598ac8
   deca4:	40002ae5 	.word	0x40002ae5
   deca8:	1c8a2d4b 	.word	0x1c8a2d4b
   decac:	40033a27 	.word	0x40033a27
   decb0:	54442d18 	.word	0x54442d18
   decb4:	3ff921fb 	.word	0x3ff921fb
   decb8:	33145c07 	.word	0x33145c07
   decbc:	3c91a626 	.word	0x3c91a626
   decc0:	54442d18 	.word	0x54442d18
   decc4:	400921fb 	.word	0x400921fb
   decc8:	3fefffff 	.word	0x3fefffff
   deccc:	3fdfffff 	.word	0x3fdfffff
   decd0:	3ff00000 	.word	0x3ff00000
   decd4:	3fe00000 	.word	0x3fe00000
   decd8:	3c600000 	.word	0x3c600000
   decdc:	ee10 0a10 	vmov	r0, s0
   dece0:	4629      	mov	r1, r5
   dece2:	2200      	movs	r2, #0
   dece4:	4b5e      	ldr	r3, [pc, #376]	; (dee60 <__ieee754_acos+0x4d8>)
   dece6:	f003 ff41 	bl	e2b6c <__adddf3>
   decea:	2200      	movs	r2, #0
   decec:	4b5d      	ldr	r3, [pc, #372]	; (dee64 <__ieee754_acos+0x4dc>)
   decee:	f004 f8ef 	bl	e2ed0 <__aeabi_dmul>
   decf2:	a343      	add	r3, pc, #268	; (adr r3, dee00 <__ieee754_acos+0x478>)
   decf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   decf8:	4604      	mov	r4, r0
   decfa:	460d      	mov	r5, r1
   decfc:	f004 f8e8 	bl	e2ed0 <__aeabi_dmul>
   ded00:	a341      	add	r3, pc, #260	; (adr r3, dee08 <__ieee754_acos+0x480>)
   ded02:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded06:	f003 ff31 	bl	e2b6c <__adddf3>
   ded0a:	4622      	mov	r2, r4
   ded0c:	462b      	mov	r3, r5
   ded0e:	f004 f8df 	bl	e2ed0 <__aeabi_dmul>
   ded12:	a33f      	add	r3, pc, #252	; (adr r3, dee10 <__ieee754_acos+0x488>)
   ded14:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded18:	f003 ff26 	bl	e2b68 <__aeabi_dsub>
   ded1c:	4622      	mov	r2, r4
   ded1e:	462b      	mov	r3, r5
   ded20:	f004 f8d6 	bl	e2ed0 <__aeabi_dmul>
   ded24:	a33c      	add	r3, pc, #240	; (adr r3, dee18 <__ieee754_acos+0x490>)
   ded26:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded2a:	f003 ff1f 	bl	e2b6c <__adddf3>
   ded2e:	4622      	mov	r2, r4
   ded30:	462b      	mov	r3, r5
   ded32:	f004 f8cd 	bl	e2ed0 <__aeabi_dmul>
   ded36:	a33a      	add	r3, pc, #232	; (adr r3, dee20 <__ieee754_acos+0x498>)
   ded38:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded3c:	f003 ff14 	bl	e2b68 <__aeabi_dsub>
   ded40:	4622      	mov	r2, r4
   ded42:	462b      	mov	r3, r5
   ded44:	f004 f8c4 	bl	e2ed0 <__aeabi_dmul>
   ded48:	a337      	add	r3, pc, #220	; (adr r3, dee28 <__ieee754_acos+0x4a0>)
   ded4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded4e:	f003 ff0d 	bl	e2b6c <__adddf3>
   ded52:	4622      	mov	r2, r4
   ded54:	462b      	mov	r3, r5
   ded56:	f004 f8bb 	bl	e2ed0 <__aeabi_dmul>
   ded5a:	ec45 4b10 	vmov	d0, r4, r5
   ded5e:	4680      	mov	r8, r0
   ded60:	4689      	mov	r9, r1
   ded62:	f002 fa8d 	bl	e1280 <__ieee754_sqrt>
   ded66:	4620      	mov	r0, r4
   ded68:	4629      	mov	r1, r5
   ded6a:	a331      	add	r3, pc, #196	; (adr r3, dee30 <__ieee754_acos+0x4a8>)
   ded6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded70:	ec57 6b10 	vmov	r6, r7, d0
   ded74:	f004 f8ac 	bl	e2ed0 <__aeabi_dmul>
   ded78:	a32f      	add	r3, pc, #188	; (adr r3, dee38 <__ieee754_acos+0x4b0>)
   ded7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded7e:	f003 fef3 	bl	e2b68 <__aeabi_dsub>
   ded82:	4622      	mov	r2, r4
   ded84:	462b      	mov	r3, r5
   ded86:	f004 f8a3 	bl	e2ed0 <__aeabi_dmul>
   ded8a:	a32d      	add	r3, pc, #180	; (adr r3, dee40 <__ieee754_acos+0x4b8>)
   ded8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded90:	f003 feec 	bl	e2b6c <__adddf3>
   ded94:	4622      	mov	r2, r4
   ded96:	462b      	mov	r3, r5
   ded98:	f004 f89a 	bl	e2ed0 <__aeabi_dmul>
   ded9c:	a32a      	add	r3, pc, #168	; (adr r3, dee48 <__ieee754_acos+0x4c0>)
   ded9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   deda2:	f003 fee1 	bl	e2b68 <__aeabi_dsub>
   deda6:	4622      	mov	r2, r4
   deda8:	462b      	mov	r3, r5
   dedaa:	f004 f891 	bl	e2ed0 <__aeabi_dmul>
   dedae:	2200      	movs	r2, #0
   dedb0:	4b2b      	ldr	r3, [pc, #172]	; (dee60 <__ieee754_acos+0x4d8>)
   dedb2:	f003 fedb 	bl	e2b6c <__adddf3>
   dedb6:	4602      	mov	r2, r0
   dedb8:	460b      	mov	r3, r1
   dedba:	4640      	mov	r0, r8
   dedbc:	4649      	mov	r1, r9
   dedbe:	f004 f9b1 	bl	e3124 <__aeabi_ddiv>
   dedc2:	4632      	mov	r2, r6
   dedc4:	463b      	mov	r3, r7
   dedc6:	f004 f883 	bl	e2ed0 <__aeabi_dmul>
   dedca:	a321      	add	r3, pc, #132	; (adr r3, dee50 <__ieee754_acos+0x4c8>)
   dedcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedd0:	f003 feca 	bl	e2b68 <__aeabi_dsub>
   dedd4:	4632      	mov	r2, r6
   dedd6:	463b      	mov	r3, r7
   dedd8:	f003 fec8 	bl	e2b6c <__adddf3>
   deddc:	4602      	mov	r2, r0
   dedde:	460b      	mov	r3, r1
   dede0:	f003 fec4 	bl	e2b6c <__adddf3>
   dede4:	4602      	mov	r2, r0
   dede6:	460b      	mov	r3, r1
   dede8:	a11b      	add	r1, pc, #108	; (adr r1, dee58 <__ieee754_acos+0x4d0>)
   dedea:	e9d1 0100 	ldrd	r0, r1, [r1]
   dedee:	f003 febb 	bl	e2b68 <__aeabi_dsub>
   dedf2:	ec41 0b10 	vmov	d0, r0, r1
   dedf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dedfa:	bf00      	nop
   dedfc:	f3af 8000 	nop.w
   dee00:	0dfdf709 	.word	0x0dfdf709
   dee04:	3f023de1 	.word	0x3f023de1
   dee08:	7501b288 	.word	0x7501b288
   dee0c:	3f49efe0 	.word	0x3f49efe0
   dee10:	b5688f3b 	.word	0xb5688f3b
   dee14:	3fa48228 	.word	0x3fa48228
   dee18:	0e884455 	.word	0x0e884455
   dee1c:	3fc9c155 	.word	0x3fc9c155
   dee20:	03eb6f7d 	.word	0x03eb6f7d
   dee24:	3fd4d612 	.word	0x3fd4d612
   dee28:	55555555 	.word	0x55555555
   dee2c:	3fc55555 	.word	0x3fc55555
   dee30:	b12e9282 	.word	0xb12e9282
   dee34:	3fb3b8c5 	.word	0x3fb3b8c5
   dee38:	1b8d0159 	.word	0x1b8d0159
   dee3c:	3fe6066c 	.word	0x3fe6066c
   dee40:	9c598ac8 	.word	0x9c598ac8
   dee44:	40002ae5 	.word	0x40002ae5
   dee48:	1c8a2d4b 	.word	0x1c8a2d4b
   dee4c:	40033a27 	.word	0x40033a27
   dee50:	33145c07 	.word	0x33145c07
   dee54:	3c91a626 	.word	0x3c91a626
   dee58:	54442d18 	.word	0x54442d18
   dee5c:	400921fb 	.word	0x400921fb
   dee60:	3ff00000 	.word	0x3ff00000
   dee64:	3fe00000 	.word	0x3fe00000

000dee68 <__ieee754_asin>:
   dee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dee6c:	ec57 6b10 	vmov	r6, r7, d0
   dee70:	4bcb      	ldr	r3, [pc, #812]	; (df1a0 <__ieee754_asin+0x338>)
   dee72:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   dee76:	429d      	cmp	r5, r3
   dee78:	b083      	sub	sp, #12
   dee7a:	dd17      	ble.n	deeac <__ieee754_asin+0x44>
   dee7c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   dee80:	ee10 3a10 	vmov	r3, s0
   dee84:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   dee88:	432b      	orrs	r3, r5
   dee8a:	d02b      	beq.n	deee4 <__ieee754_asin+0x7c>
   dee8c:	ee10 2a10 	vmov	r2, s0
   dee90:	463b      	mov	r3, r7
   dee92:	4630      	mov	r0, r6
   dee94:	4639      	mov	r1, r7
   dee96:	f003 fe67 	bl	e2b68 <__aeabi_dsub>
   dee9a:	4602      	mov	r2, r0
   dee9c:	460b      	mov	r3, r1
   dee9e:	f004 f941 	bl	e3124 <__aeabi_ddiv>
   deea2:	ec41 0b10 	vmov	d0, r0, r1
   deea6:	b003      	add	sp, #12
   deea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deeac:	4bbd      	ldr	r3, [pc, #756]	; (df1a4 <__ieee754_asin+0x33c>)
   deeae:	429d      	cmp	r5, r3
   deeb0:	463c      	mov	r4, r7
   deeb2:	dc33      	bgt.n	def1c <__ieee754_asin+0xb4>
   deeb4:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   deeb8:	f280 817c 	bge.w	df1b4 <__ieee754_asin+0x34c>
   deebc:	a39c      	add	r3, pc, #624	; (adr r3, df130 <__ieee754_asin+0x2c8>)
   deebe:	e9d3 2300 	ldrd	r2, r3, [r3]
   deec2:	ee10 0a10 	vmov	r0, s0
   deec6:	4639      	mov	r1, r7
   deec8:	f003 fe50 	bl	e2b6c <__adddf3>
   deecc:	2200      	movs	r2, #0
   deece:	4bb6      	ldr	r3, [pc, #728]	; (df1a8 <__ieee754_asin+0x340>)
   deed0:	f004 fa8e 	bl	e33f0 <__aeabi_dcmpgt>
   deed4:	b310      	cbz	r0, def1c <__ieee754_asin+0xb4>
   deed6:	4630      	mov	r0, r6
   deed8:	4639      	mov	r1, r7
   deeda:	ec41 0b10 	vmov	d0, r0, r1
   deede:	b003      	add	sp, #12
   deee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deee4:	ee10 0a10 	vmov	r0, s0
   deee8:	a393      	add	r3, pc, #588	; (adr r3, df138 <__ieee754_asin+0x2d0>)
   deeea:	e9d3 2300 	ldrd	r2, r3, [r3]
   deeee:	4639      	mov	r1, r7
   deef0:	f003 ffee 	bl	e2ed0 <__aeabi_dmul>
   deef4:	a392      	add	r3, pc, #584	; (adr r3, df140 <__ieee754_asin+0x2d8>)
   deef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   deefa:	4604      	mov	r4, r0
   deefc:	460d      	mov	r5, r1
   deefe:	4630      	mov	r0, r6
   def00:	4639      	mov	r1, r7
   def02:	f003 ffe5 	bl	e2ed0 <__aeabi_dmul>
   def06:	4602      	mov	r2, r0
   def08:	460b      	mov	r3, r1
   def0a:	4620      	mov	r0, r4
   def0c:	4629      	mov	r1, r5
   def0e:	f003 fe2d 	bl	e2b6c <__adddf3>
   def12:	ec41 0b10 	vmov	d0, r0, r1
   def16:	b003      	add	sp, #12
   def18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def1c:	ec47 6b10 	vmov	d0, r6, r7
   def20:	f7fe fdce 	bl	ddac0 <fabs>
   def24:	2000      	movs	r0, #0
   def26:	ec53 2b10 	vmov	r2, r3, d0
   def2a:	499f      	ldr	r1, [pc, #636]	; (df1a8 <__ieee754_asin+0x340>)
   def2c:	f003 fe1c 	bl	e2b68 <__aeabi_dsub>
   def30:	2200      	movs	r2, #0
   def32:	4b9e      	ldr	r3, [pc, #632]	; (df1ac <__ieee754_asin+0x344>)
   def34:	f003 ffcc 	bl	e2ed0 <__aeabi_dmul>
   def38:	a383      	add	r3, pc, #524	; (adr r3, df148 <__ieee754_asin+0x2e0>)
   def3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   def3e:	4606      	mov	r6, r0
   def40:	460f      	mov	r7, r1
   def42:	f003 ffc5 	bl	e2ed0 <__aeabi_dmul>
   def46:	a382      	add	r3, pc, #520	; (adr r3, df150 <__ieee754_asin+0x2e8>)
   def48:	e9d3 2300 	ldrd	r2, r3, [r3]
   def4c:	f003 fe0e 	bl	e2b6c <__adddf3>
   def50:	4632      	mov	r2, r6
   def52:	463b      	mov	r3, r7
   def54:	f003 ffbc 	bl	e2ed0 <__aeabi_dmul>
   def58:	a37f      	add	r3, pc, #508	; (adr r3, df158 <__ieee754_asin+0x2f0>)
   def5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   def5e:	f003 fe03 	bl	e2b68 <__aeabi_dsub>
   def62:	4632      	mov	r2, r6
   def64:	463b      	mov	r3, r7
   def66:	f003 ffb3 	bl	e2ed0 <__aeabi_dmul>
   def6a:	a37d      	add	r3, pc, #500	; (adr r3, df160 <__ieee754_asin+0x2f8>)
   def6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   def70:	f003 fdfc 	bl	e2b6c <__adddf3>
   def74:	4632      	mov	r2, r6
   def76:	463b      	mov	r3, r7
   def78:	f003 ffaa 	bl	e2ed0 <__aeabi_dmul>
   def7c:	a37a      	add	r3, pc, #488	; (adr r3, df168 <__ieee754_asin+0x300>)
   def7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   def82:	f003 fdf1 	bl	e2b68 <__aeabi_dsub>
   def86:	4632      	mov	r2, r6
   def88:	463b      	mov	r3, r7
   def8a:	f003 ffa1 	bl	e2ed0 <__aeabi_dmul>
   def8e:	a378      	add	r3, pc, #480	; (adr r3, df170 <__ieee754_asin+0x308>)
   def90:	e9d3 2300 	ldrd	r2, r3, [r3]
   def94:	f003 fdea 	bl	e2b6c <__adddf3>
   def98:	4632      	mov	r2, r6
   def9a:	463b      	mov	r3, r7
   def9c:	f003 ff98 	bl	e2ed0 <__aeabi_dmul>
   defa0:	a375      	add	r3, pc, #468	; (adr r3, df178 <__ieee754_asin+0x310>)
   defa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   defa6:	4680      	mov	r8, r0
   defa8:	4689      	mov	r9, r1
   defaa:	4630      	mov	r0, r6
   defac:	4639      	mov	r1, r7
   defae:	f003 ff8f 	bl	e2ed0 <__aeabi_dmul>
   defb2:	a373      	add	r3, pc, #460	; (adr r3, df180 <__ieee754_asin+0x318>)
   defb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   defb8:	f003 fdd6 	bl	e2b68 <__aeabi_dsub>
   defbc:	4632      	mov	r2, r6
   defbe:	463b      	mov	r3, r7
   defc0:	f003 ff86 	bl	e2ed0 <__aeabi_dmul>
   defc4:	a370      	add	r3, pc, #448	; (adr r3, df188 <__ieee754_asin+0x320>)
   defc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   defca:	f003 fdcf 	bl	e2b6c <__adddf3>
   defce:	4632      	mov	r2, r6
   defd0:	463b      	mov	r3, r7
   defd2:	f003 ff7d 	bl	e2ed0 <__aeabi_dmul>
   defd6:	a36e      	add	r3, pc, #440	; (adr r3, df190 <__ieee754_asin+0x328>)
   defd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   defdc:	f003 fdc4 	bl	e2b68 <__aeabi_dsub>
   defe0:	4632      	mov	r2, r6
   defe2:	463b      	mov	r3, r7
   defe4:	f003 ff74 	bl	e2ed0 <__aeabi_dmul>
   defe8:	4b6f      	ldr	r3, [pc, #444]	; (df1a8 <__ieee754_asin+0x340>)
   defea:	2200      	movs	r2, #0
   defec:	f003 fdbe 	bl	e2b6c <__adddf3>
   deff0:	ec47 6b10 	vmov	d0, r6, r7
   deff4:	e9cd 0100 	strd	r0, r1, [sp]
   deff8:	f002 f942 	bl	e1280 <__ieee754_sqrt>
   deffc:	4b6c      	ldr	r3, [pc, #432]	; (df1b0 <__ieee754_asin+0x348>)
   deffe:	429d      	cmp	r5, r3
   df000:	ec5b ab10 	vmov	sl, fp, d0
   df004:	e9dd 0100 	ldrd	r0, r1, [sp]
   df008:	dc6e      	bgt.n	df0e8 <__ieee754_asin+0x280>
   df00a:	4602      	mov	r2, r0
   df00c:	460b      	mov	r3, r1
   df00e:	4640      	mov	r0, r8
   df010:	4649      	mov	r1, r9
   df012:	2500      	movs	r5, #0
   df014:	e9cd ab00 	strd	sl, fp, [sp]
   df018:	9500      	str	r5, [sp, #0]
   df01a:	f004 f883 	bl	e3124 <__aeabi_ddiv>
   df01e:	e9dd 8900 	ldrd	r8, r9, [sp]
   df022:	4652      	mov	r2, sl
   df024:	e9cd 0100 	strd	r0, r1, [sp]
   df028:	465b      	mov	r3, fp
   df02a:	4650      	mov	r0, sl
   df02c:	4659      	mov	r1, fp
   df02e:	f003 fd9d 	bl	e2b6c <__adddf3>
   df032:	4602      	mov	r2, r0
   df034:	460b      	mov	r3, r1
   df036:	e9dd 0100 	ldrd	r0, r1, [sp]
   df03a:	f003 ff49 	bl	e2ed0 <__aeabi_dmul>
   df03e:	4642      	mov	r2, r8
   df040:	e9cd 0100 	strd	r0, r1, [sp]
   df044:	464b      	mov	r3, r9
   df046:	4640      	mov	r0, r8
   df048:	4649      	mov	r1, r9
   df04a:	f003 ff41 	bl	e2ed0 <__aeabi_dmul>
   df04e:	4602      	mov	r2, r0
   df050:	460b      	mov	r3, r1
   df052:	4630      	mov	r0, r6
   df054:	4639      	mov	r1, r7
   df056:	f003 fd87 	bl	e2b68 <__aeabi_dsub>
   df05a:	4642      	mov	r2, r8
   df05c:	4606      	mov	r6, r0
   df05e:	460f      	mov	r7, r1
   df060:	464b      	mov	r3, r9
   df062:	4650      	mov	r0, sl
   df064:	4659      	mov	r1, fp
   df066:	f003 fd81 	bl	e2b6c <__adddf3>
   df06a:	4602      	mov	r2, r0
   df06c:	460b      	mov	r3, r1
   df06e:	4630      	mov	r0, r6
   df070:	4639      	mov	r1, r7
   df072:	f004 f857 	bl	e3124 <__aeabi_ddiv>
   df076:	4602      	mov	r2, r0
   df078:	460b      	mov	r3, r1
   df07a:	f003 fd77 	bl	e2b6c <__adddf3>
   df07e:	4602      	mov	r2, r0
   df080:	460b      	mov	r3, r1
   df082:	a12f      	add	r1, pc, #188	; (adr r1, df140 <__ieee754_asin+0x2d8>)
   df084:	e9d1 0100 	ldrd	r0, r1, [r1]
   df088:	f003 fd6e 	bl	e2b68 <__aeabi_dsub>
   df08c:	4602      	mov	r2, r0
   df08e:	460b      	mov	r3, r1
   df090:	e9dd 0100 	ldrd	r0, r1, [sp]
   df094:	f003 fd68 	bl	e2b68 <__aeabi_dsub>
   df098:	4642      	mov	r2, r8
   df09a:	4606      	mov	r6, r0
   df09c:	460f      	mov	r7, r1
   df09e:	464b      	mov	r3, r9
   df0a0:	4640      	mov	r0, r8
   df0a2:	4649      	mov	r1, r9
   df0a4:	f003 fd62 	bl	e2b6c <__adddf3>
   df0a8:	4602      	mov	r2, r0
   df0aa:	460b      	mov	r3, r1
   df0ac:	a13a      	add	r1, pc, #232	; (adr r1, df198 <__ieee754_asin+0x330>)
   df0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   df0b2:	f003 fd59 	bl	e2b68 <__aeabi_dsub>
   df0b6:	4602      	mov	r2, r0
   df0b8:	460b      	mov	r3, r1
   df0ba:	4630      	mov	r0, r6
   df0bc:	4639      	mov	r1, r7
   df0be:	f003 fd53 	bl	e2b68 <__aeabi_dsub>
   df0c2:	4602      	mov	r2, r0
   df0c4:	460b      	mov	r3, r1
   df0c6:	a134      	add	r1, pc, #208	; (adr r1, df198 <__ieee754_asin+0x330>)
   df0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   df0cc:	f003 fd4c 	bl	e2b68 <__aeabi_dsub>
   df0d0:	4602      	mov	r2, r0
   df0d2:	460b      	mov	r3, r1
   df0d4:	2c00      	cmp	r4, #0
   df0d6:	f340 80e4 	ble.w	df2a2 <__ieee754_asin+0x43a>
   df0da:	4610      	mov	r0, r2
   df0dc:	4619      	mov	r1, r3
   df0de:	ec41 0b10 	vmov	d0, r0, r1
   df0e2:	b003      	add	sp, #12
   df0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df0e8:	4602      	mov	r2, r0
   df0ea:	460b      	mov	r3, r1
   df0ec:	4640      	mov	r0, r8
   df0ee:	4649      	mov	r1, r9
   df0f0:	f004 f818 	bl	e3124 <__aeabi_ddiv>
   df0f4:	4652      	mov	r2, sl
   df0f6:	465b      	mov	r3, fp
   df0f8:	f003 feea 	bl	e2ed0 <__aeabi_dmul>
   df0fc:	4652      	mov	r2, sl
   df0fe:	465b      	mov	r3, fp
   df100:	f003 fd34 	bl	e2b6c <__adddf3>
   df104:	4602      	mov	r2, r0
   df106:	460b      	mov	r3, r1
   df108:	f003 fd30 	bl	e2b6c <__adddf3>
   df10c:	a30c      	add	r3, pc, #48	; (adr r3, df140 <__ieee754_asin+0x2d8>)
   df10e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df112:	f003 fd29 	bl	e2b68 <__aeabi_dsub>
   df116:	4602      	mov	r2, r0
   df118:	460b      	mov	r3, r1
   df11a:	a107      	add	r1, pc, #28	; (adr r1, df138 <__ieee754_asin+0x2d0>)
   df11c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df120:	f003 fd22 	bl	e2b68 <__aeabi_dsub>
   df124:	4602      	mov	r2, r0
   df126:	460b      	mov	r3, r1
   df128:	e7d4      	b.n	df0d4 <__ieee754_asin+0x26c>
   df12a:	bf00      	nop
   df12c:	f3af 8000 	nop.w
   df130:	8800759c 	.word	0x8800759c
   df134:	7e37e43c 	.word	0x7e37e43c
   df138:	54442d18 	.word	0x54442d18
   df13c:	3ff921fb 	.word	0x3ff921fb
   df140:	33145c07 	.word	0x33145c07
   df144:	3c91a626 	.word	0x3c91a626
   df148:	0dfdf709 	.word	0x0dfdf709
   df14c:	3f023de1 	.word	0x3f023de1
   df150:	7501b288 	.word	0x7501b288
   df154:	3f49efe0 	.word	0x3f49efe0
   df158:	b5688f3b 	.word	0xb5688f3b
   df15c:	3fa48228 	.word	0x3fa48228
   df160:	0e884455 	.word	0x0e884455
   df164:	3fc9c155 	.word	0x3fc9c155
   df168:	03eb6f7d 	.word	0x03eb6f7d
   df16c:	3fd4d612 	.word	0x3fd4d612
   df170:	55555555 	.word	0x55555555
   df174:	3fc55555 	.word	0x3fc55555
   df178:	b12e9282 	.word	0xb12e9282
   df17c:	3fb3b8c5 	.word	0x3fb3b8c5
   df180:	1b8d0159 	.word	0x1b8d0159
   df184:	3fe6066c 	.word	0x3fe6066c
   df188:	9c598ac8 	.word	0x9c598ac8
   df18c:	40002ae5 	.word	0x40002ae5
   df190:	1c8a2d4b 	.word	0x1c8a2d4b
   df194:	40033a27 	.word	0x40033a27
   df198:	54442d18 	.word	0x54442d18
   df19c:	3fe921fb 	.word	0x3fe921fb
   df1a0:	3fefffff 	.word	0x3fefffff
   df1a4:	3fdfffff 	.word	0x3fdfffff
   df1a8:	3ff00000 	.word	0x3ff00000
   df1ac:	3fe00000 	.word	0x3fe00000
   df1b0:	3fef3332 	.word	0x3fef3332
   df1b4:	ee10 2a10 	vmov	r2, s0
   df1b8:	ee10 0a10 	vmov	r0, s0
   df1bc:	463b      	mov	r3, r7
   df1be:	4639      	mov	r1, r7
   df1c0:	f003 fe86 	bl	e2ed0 <__aeabi_dmul>
   df1c4:	a33b      	add	r3, pc, #236	; (adr r3, df2b4 <__ieee754_asin+0x44c>)
   df1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1ca:	4604      	mov	r4, r0
   df1cc:	460d      	mov	r5, r1
   df1ce:	f003 fe7f 	bl	e2ed0 <__aeabi_dmul>
   df1d2:	a33a      	add	r3, pc, #232	; (adr r3, df2bc <__ieee754_asin+0x454>)
   df1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1d8:	f003 fcc8 	bl	e2b6c <__adddf3>
   df1dc:	4622      	mov	r2, r4
   df1de:	462b      	mov	r3, r5
   df1e0:	f003 fe76 	bl	e2ed0 <__aeabi_dmul>
   df1e4:	a337      	add	r3, pc, #220	; (adr r3, df2c4 <__ieee754_asin+0x45c>)
   df1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1ea:	f003 fcbd 	bl	e2b68 <__aeabi_dsub>
   df1ee:	4622      	mov	r2, r4
   df1f0:	462b      	mov	r3, r5
   df1f2:	f003 fe6d 	bl	e2ed0 <__aeabi_dmul>
   df1f6:	a335      	add	r3, pc, #212	; (adr r3, df2cc <__ieee754_asin+0x464>)
   df1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1fc:	f003 fcb6 	bl	e2b6c <__adddf3>
   df200:	4622      	mov	r2, r4
   df202:	462b      	mov	r3, r5
   df204:	f003 fe64 	bl	e2ed0 <__aeabi_dmul>
   df208:	a332      	add	r3, pc, #200	; (adr r3, df2d4 <__ieee754_asin+0x46c>)
   df20a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df20e:	f003 fcab 	bl	e2b68 <__aeabi_dsub>
   df212:	4622      	mov	r2, r4
   df214:	462b      	mov	r3, r5
   df216:	f003 fe5b 	bl	e2ed0 <__aeabi_dmul>
   df21a:	a330      	add	r3, pc, #192	; (adr r3, df2dc <__ieee754_asin+0x474>)
   df21c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df220:	f003 fca4 	bl	e2b6c <__adddf3>
   df224:	4622      	mov	r2, r4
   df226:	462b      	mov	r3, r5
   df228:	f003 fe52 	bl	e2ed0 <__aeabi_dmul>
   df22c:	a32d      	add	r3, pc, #180	; (adr r3, df2e4 <__ieee754_asin+0x47c>)
   df22e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df232:	4680      	mov	r8, r0
   df234:	4689      	mov	r9, r1
   df236:	4620      	mov	r0, r4
   df238:	4629      	mov	r1, r5
   df23a:	f003 fe49 	bl	e2ed0 <__aeabi_dmul>
   df23e:	a32b      	add	r3, pc, #172	; (adr r3, df2ec <__ieee754_asin+0x484>)
   df240:	e9d3 2300 	ldrd	r2, r3, [r3]
   df244:	f003 fc90 	bl	e2b68 <__aeabi_dsub>
   df248:	4622      	mov	r2, r4
   df24a:	462b      	mov	r3, r5
   df24c:	f003 fe40 	bl	e2ed0 <__aeabi_dmul>
   df250:	a328      	add	r3, pc, #160	; (adr r3, df2f4 <__ieee754_asin+0x48c>)
   df252:	e9d3 2300 	ldrd	r2, r3, [r3]
   df256:	f003 fc89 	bl	e2b6c <__adddf3>
   df25a:	4622      	mov	r2, r4
   df25c:	462b      	mov	r3, r5
   df25e:	f003 fe37 	bl	e2ed0 <__aeabi_dmul>
   df262:	a326      	add	r3, pc, #152	; (adr r3, df2fc <__ieee754_asin+0x494>)
   df264:	e9d3 2300 	ldrd	r2, r3, [r3]
   df268:	f003 fc7e 	bl	e2b68 <__aeabi_dsub>
   df26c:	4622      	mov	r2, r4
   df26e:	462b      	mov	r3, r5
   df270:	f003 fe2e 	bl	e2ed0 <__aeabi_dmul>
   df274:	2200      	movs	r2, #0
   df276:	4b0e      	ldr	r3, [pc, #56]	; (df2b0 <__ieee754_asin+0x448>)
   df278:	f003 fc78 	bl	e2b6c <__adddf3>
   df27c:	4602      	mov	r2, r0
   df27e:	460b      	mov	r3, r1
   df280:	4640      	mov	r0, r8
   df282:	4649      	mov	r1, r9
   df284:	f003 ff4e 	bl	e3124 <__aeabi_ddiv>
   df288:	4632      	mov	r2, r6
   df28a:	463b      	mov	r3, r7
   df28c:	f003 fe20 	bl	e2ed0 <__aeabi_dmul>
   df290:	4632      	mov	r2, r6
   df292:	463b      	mov	r3, r7
   df294:	f003 fc6a 	bl	e2b6c <__adddf3>
   df298:	ec41 0b10 	vmov	d0, r0, r1
   df29c:	b003      	add	sp, #12
   df29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df2a2:	4610      	mov	r0, r2
   df2a4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df2a8:	e5fb      	b.n	deea2 <__ieee754_asin+0x3a>
   df2aa:	bf00      	nop
   df2ac:	f3af 8000 	nop.w
   df2b0:	3ff00000 	.word	0x3ff00000
   df2b4:	0dfdf709 	.word	0x0dfdf709
   df2b8:	3f023de1 	.word	0x3f023de1
   df2bc:	7501b288 	.word	0x7501b288
   df2c0:	3f49efe0 	.word	0x3f49efe0
   df2c4:	b5688f3b 	.word	0xb5688f3b
   df2c8:	3fa48228 	.word	0x3fa48228
   df2cc:	0e884455 	.word	0x0e884455
   df2d0:	3fc9c155 	.word	0x3fc9c155
   df2d4:	03eb6f7d 	.word	0x03eb6f7d
   df2d8:	3fd4d612 	.word	0x3fd4d612
   df2dc:	55555555 	.word	0x55555555
   df2e0:	3fc55555 	.word	0x3fc55555
   df2e4:	b12e9282 	.word	0xb12e9282
   df2e8:	3fb3b8c5 	.word	0x3fb3b8c5
   df2ec:	1b8d0159 	.word	0x1b8d0159
   df2f0:	3fe6066c 	.word	0x3fe6066c
   df2f4:	9c598ac8 	.word	0x9c598ac8
   df2f8:	40002ae5 	.word	0x40002ae5
   df2fc:	1c8a2d4b 	.word	0x1c8a2d4b
   df300:	40033a27 	.word	0x40033a27
   df304:	00000000 	.word	0x00000000

000df308 <__ieee754_atan2>:
   df308:	ec51 0b11 	vmov	r0, r1, d1
   df30c:	4243      	negs	r3, r0
   df30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df312:	4303      	orrs	r3, r0
   df314:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df318:	4f75      	ldr	r7, [pc, #468]	; (df4f0 <__ieee754_atan2+0x1e8>)
   df31a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   df31e:	42bb      	cmp	r3, r7
   df320:	ec55 4b10 	vmov	r4, r5, d0
   df324:	d849      	bhi.n	df3ba <__ieee754_atan2+0xb2>
   df326:	4263      	negs	r3, r4
   df328:	4323      	orrs	r3, r4
   df32a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   df32e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   df332:	42bb      	cmp	r3, r7
   df334:	46a9      	mov	r9, r5
   df336:	d840      	bhi.n	df3ba <__ieee754_atan2+0xb2>
   df338:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   df33c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   df340:	4303      	orrs	r3, r0
   df342:	468e      	mov	lr, r1
   df344:	d050      	beq.n	df3e8 <__ieee754_atan2+0xe0>
   df346:	178e      	asrs	r6, r1, #30
   df348:	f006 0602 	and.w	r6, r6, #2
   df34c:	ea54 030a 	orrs.w	r3, r4, sl
   df350:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   df354:	d039      	beq.n	df3ca <__ieee754_atan2+0xc2>
   df356:	ea50 0308 	orrs.w	r3, r0, r8
   df35a:	d03e      	beq.n	df3da <__ieee754_atan2+0xd2>
   df35c:	45b8      	cmp	r8, r7
   df35e:	d055      	beq.n	df40c <__ieee754_atan2+0x104>
   df360:	45ba      	cmp	sl, r7
   df362:	d03a      	beq.n	df3da <__ieee754_atan2+0xd2>
   df364:	ebc8 080a 	rsb	r8, r8, sl
   df368:	ea4f 5828 	mov.w	r8, r8, asr #20
   df36c:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   df370:	dc40      	bgt.n	df3f4 <__ieee754_atan2+0xec>
   df372:	2900      	cmp	r1, #0
   df374:	db70      	blt.n	df458 <__ieee754_atan2+0x150>
   df376:	4602      	mov	r2, r0
   df378:	460b      	mov	r3, r1
   df37a:	4620      	mov	r0, r4
   df37c:	4629      	mov	r1, r5
   df37e:	f003 fed1 	bl	e3124 <__aeabi_ddiv>
   df382:	ec41 0b10 	vmov	d0, r0, r1
   df386:	f7fe fb9b 	bl	ddac0 <fabs>
   df38a:	f7fe f8ed 	bl	dd568 <atan>
   df38e:	ec51 0b10 	vmov	r0, r1, d0
   df392:	2e01      	cmp	r6, #1
   df394:	d05a      	beq.n	df44c <__ieee754_atan2+0x144>
   df396:	2e02      	cmp	r6, #2
   df398:	d048      	beq.n	df42c <__ieee754_atan2+0x124>
   df39a:	2e00      	cmp	r6, #0
   df39c:	d042      	beq.n	df424 <__ieee754_atan2+0x11c>
   df39e:	a33e      	add	r3, pc, #248	; (adr r3, df498 <__ieee754_atan2+0x190>)
   df3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3a4:	f003 fbe0 	bl	e2b68 <__aeabi_dsub>
   df3a8:	a33d      	add	r3, pc, #244	; (adr r3, df4a0 <__ieee754_atan2+0x198>)
   df3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3ae:	f003 fbdb 	bl	e2b68 <__aeabi_dsub>
   df3b2:	ec41 0b10 	vmov	d0, r0, r1
   df3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df3ba:	4622      	mov	r2, r4
   df3bc:	462b      	mov	r3, r5
   df3be:	f003 fbd5 	bl	e2b6c <__adddf3>
   df3c2:	ec41 0b10 	vmov	d0, r0, r1
   df3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df3ca:	2e02      	cmp	r6, #2
   df3cc:	d016      	beq.n	df3fc <__ieee754_atan2+0xf4>
   df3ce:	2e03      	cmp	r6, #3
   df3d0:	d10e      	bne.n	df3f0 <__ieee754_atan2+0xe8>
   df3d2:	ed9f 0b35 	vldr	d0, [pc, #212]	; df4a8 <__ieee754_atan2+0x1a0>
   df3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df3da:	f1b9 0f00 	cmp.w	r9, #0
   df3de:	db11      	blt.n	df404 <__ieee754_atan2+0xfc>
   df3e0:	ed9f 0b33 	vldr	d0, [pc, #204]	; df4b0 <__ieee754_atan2+0x1a8>
   df3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df3e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df3ec:	f7fe b8bc 	b.w	dd568 <atan>
   df3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df3f4:	a12e      	add	r1, pc, #184	; (adr r1, df4b0 <__ieee754_atan2+0x1a8>)
   df3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   df3fa:	e7ca      	b.n	df392 <__ieee754_atan2+0x8a>
   df3fc:	ed9f 0b28 	vldr	d0, [pc, #160]	; df4a0 <__ieee754_atan2+0x198>
   df400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df404:	ed9f 0b2c 	vldr	d0, [pc, #176]	; df4b8 <__ieee754_atan2+0x1b0>
   df408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df40c:	45c2      	cmp	sl, r8
   df40e:	d029      	beq.n	df464 <__ieee754_atan2+0x15c>
   df410:	2e02      	cmp	r6, #2
   df412:	d0f3      	beq.n	df3fc <__ieee754_atan2+0xf4>
   df414:	2e03      	cmp	r6, #3
   df416:	d0dc      	beq.n	df3d2 <__ieee754_atan2+0xca>
   df418:	2e01      	cmp	r6, #1
   df41a:	d02d      	beq.n	df478 <__ieee754_atan2+0x170>
   df41c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df4c0 <__ieee754_atan2+0x1b8>
   df420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df424:	ec41 0b10 	vmov	d0, r0, r1
   df428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df42c:	a31a      	add	r3, pc, #104	; (adr r3, df498 <__ieee754_atan2+0x190>)
   df42e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df432:	f003 fb99 	bl	e2b68 <__aeabi_dsub>
   df436:	4602      	mov	r2, r0
   df438:	460b      	mov	r3, r1
   df43a:	a119      	add	r1, pc, #100	; (adr r1, df4a0 <__ieee754_atan2+0x198>)
   df43c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df440:	f003 fb92 	bl	e2b68 <__aeabi_dsub>
   df444:	ec41 0b10 	vmov	d0, r0, r1
   df448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df44c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   df450:	ec41 0b10 	vmov	d0, r0, r1
   df454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df458:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   df45c:	da8b      	bge.n	df376 <__ieee754_atan2+0x6e>
   df45e:	2000      	movs	r0, #0
   df460:	2100      	movs	r1, #0
   df462:	e796      	b.n	df392 <__ieee754_atan2+0x8a>
   df464:	2e02      	cmp	r6, #2
   df466:	d013      	beq.n	df490 <__ieee754_atan2+0x188>
   df468:	2e03      	cmp	r6, #3
   df46a:	d00d      	beq.n	df488 <__ieee754_atan2+0x180>
   df46c:	2e01      	cmp	r6, #1
   df46e:	d007      	beq.n	df480 <__ieee754_atan2+0x178>
   df470:	ed9f 0b15 	vldr	d0, [pc, #84]	; df4c8 <__ieee754_atan2+0x1c0>
   df474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df478:	ed9f 0b15 	vldr	d0, [pc, #84]	; df4d0 <__ieee754_atan2+0x1c8>
   df47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df480:	ed9f 0b15 	vldr	d0, [pc, #84]	; df4d8 <__ieee754_atan2+0x1d0>
   df484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df488:	ed9f 0b15 	vldr	d0, [pc, #84]	; df4e0 <__ieee754_atan2+0x1d8>
   df48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df490:	ed9f 0b15 	vldr	d0, [pc, #84]	; df4e8 <__ieee754_atan2+0x1e0>
   df494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df498:	33145c07 	.word	0x33145c07
   df49c:	3ca1a626 	.word	0x3ca1a626
   df4a0:	54442d18 	.word	0x54442d18
   df4a4:	400921fb 	.word	0x400921fb
   df4a8:	54442d18 	.word	0x54442d18
   df4ac:	c00921fb 	.word	0xc00921fb
   df4b0:	54442d18 	.word	0x54442d18
   df4b4:	3ff921fb 	.word	0x3ff921fb
   df4b8:	54442d18 	.word	0x54442d18
   df4bc:	bff921fb 	.word	0xbff921fb
	...
   df4c8:	54442d18 	.word	0x54442d18
   df4cc:	3fe921fb 	.word	0x3fe921fb
   df4d0:	00000000 	.word	0x00000000
   df4d4:	80000000 	.word	0x80000000
   df4d8:	54442d18 	.word	0x54442d18
   df4dc:	bfe921fb 	.word	0xbfe921fb
   df4e0:	7f3321d2 	.word	0x7f3321d2
   df4e4:	c002d97c 	.word	0xc002d97c
   df4e8:	7f3321d2 	.word	0x7f3321d2
   df4ec:	4002d97c 	.word	0x4002d97c
   df4f0:	7ff00000 	.word	0x7ff00000
   df4f4:	00000000 	.word	0x00000000

000df4f8 <__ieee754_cosh>:
   df4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df4fc:	ec53 2b10 	vmov	r2, r3, d0
   df500:	4953      	ldr	r1, [pc, #332]	; (df650 <__ieee754_cosh+0x158>)
   df502:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   df506:	428c      	cmp	r4, r1
   df508:	dc12      	bgt.n	df530 <__ieee754_cosh+0x38>
   df50a:	4952      	ldr	r1, [pc, #328]	; (df654 <__ieee754_cosh+0x15c>)
   df50c:	428c      	cmp	r4, r1
   df50e:	dd17      	ble.n	df540 <__ieee754_cosh+0x48>
   df510:	4951      	ldr	r1, [pc, #324]	; (df658 <__ieee754_cosh+0x160>)
   df512:	428c      	cmp	r4, r1
   df514:	dd64      	ble.n	df5e0 <__ieee754_cosh+0xe8>
   df516:	4951      	ldr	r1, [pc, #324]	; (df65c <__ieee754_cosh+0x164>)
   df518:	428c      	cmp	r4, r1
   df51a:	f340 8084 	ble.w	df626 <__ieee754_cosh+0x12e>
   df51e:	4950      	ldr	r1, [pc, #320]	; (df660 <__ieee754_cosh+0x168>)
   df520:	428c      	cmp	r4, r1
   df522:	dd3e      	ble.n	df5a2 <__ieee754_cosh+0xaa>
   df524:	3101      	adds	r1, #1
   df526:	428c      	cmp	r4, r1
   df528:	d038      	beq.n	df59c <__ieee754_cosh+0xa4>
   df52a:	a347      	add	r3, pc, #284	; (adr r3, df648 <__ieee754_cosh+0x150>)
   df52c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df530:	4610      	mov	r0, r2
   df532:	4619      	mov	r1, r3
   df534:	f003 fccc 	bl	e2ed0 <__aeabi_dmul>
   df538:	ec41 0b10 	vmov	d0, r0, r1
   df53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df540:	f7fe fabe 	bl	ddac0 <fabs>
   df544:	f002 ff70 	bl	e2428 <expm1>
   df548:	ec59 8b10 	vmov	r8, r9, d0
   df54c:	2200      	movs	r2, #0
   df54e:	4b45      	ldr	r3, [pc, #276]	; (df664 <__ieee754_cosh+0x16c>)
   df550:	ee10 0a10 	vmov	r0, s0
   df554:	4649      	mov	r1, r9
   df556:	f003 fb09 	bl	e2b6c <__adddf3>
   df55a:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   df55e:	4606      	mov	r6, r0
   df560:	460f      	mov	r7, r1
   df562:	db5c      	blt.n	df61e <__ieee754_cosh+0x126>
   df564:	4642      	mov	r2, r8
   df566:	464b      	mov	r3, r9
   df568:	4640      	mov	r0, r8
   df56a:	4649      	mov	r1, r9
   df56c:	f003 fcb0 	bl	e2ed0 <__aeabi_dmul>
   df570:	4632      	mov	r2, r6
   df572:	4604      	mov	r4, r0
   df574:	460d      	mov	r5, r1
   df576:	463b      	mov	r3, r7
   df578:	4630      	mov	r0, r6
   df57a:	4639      	mov	r1, r7
   df57c:	f003 faf6 	bl	e2b6c <__adddf3>
   df580:	4602      	mov	r2, r0
   df582:	460b      	mov	r3, r1
   df584:	4620      	mov	r0, r4
   df586:	4629      	mov	r1, r5
   df588:	f003 fdcc 	bl	e3124 <__aeabi_ddiv>
   df58c:	2200      	movs	r2, #0
   df58e:	4b35      	ldr	r3, [pc, #212]	; (df664 <__ieee754_cosh+0x16c>)
   df590:	f003 faec 	bl	e2b6c <__adddf3>
   df594:	ec41 0b10 	vmov	d0, r0, r1
   df598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df59c:	4932      	ldr	r1, [pc, #200]	; (df668 <__ieee754_cosh+0x170>)
   df59e:	428a      	cmp	r2, r1
   df5a0:	d8c3      	bhi.n	df52a <__ieee754_cosh+0x32>
   df5a2:	ec43 2b10 	vmov	d0, r2, r3
   df5a6:	f7fe fa8b 	bl	ddac0 <fabs>
   df5aa:	2200      	movs	r2, #0
   df5ac:	4b2f      	ldr	r3, [pc, #188]	; (df66c <__ieee754_cosh+0x174>)
   df5ae:	ec51 0b10 	vmov	r0, r1, d0
   df5b2:	f003 fc8d 	bl	e2ed0 <__aeabi_dmul>
   df5b6:	ec41 0b10 	vmov	d0, r0, r1
   df5ba:	f000 f859 	bl	df670 <__ieee754_exp>
   df5be:	ec55 4b10 	vmov	r4, r5, d0
   df5c2:	ee10 0a10 	vmov	r0, s0
   df5c6:	2200      	movs	r2, #0
   df5c8:	4b28      	ldr	r3, [pc, #160]	; (df66c <__ieee754_cosh+0x174>)
   df5ca:	4629      	mov	r1, r5
   df5cc:	f003 fc80 	bl	e2ed0 <__aeabi_dmul>
   df5d0:	4622      	mov	r2, r4
   df5d2:	462b      	mov	r3, r5
   df5d4:	f003 fc7c 	bl	e2ed0 <__aeabi_dmul>
   df5d8:	ec41 0b10 	vmov	d0, r0, r1
   df5dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df5e0:	f7fe fa6e 	bl	ddac0 <fabs>
   df5e4:	f000 f844 	bl	df670 <__ieee754_exp>
   df5e8:	ec55 4b10 	vmov	r4, r5, d0
   df5ec:	ee10 0a10 	vmov	r0, s0
   df5f0:	2200      	movs	r2, #0
   df5f2:	4b1e      	ldr	r3, [pc, #120]	; (df66c <__ieee754_cosh+0x174>)
   df5f4:	4629      	mov	r1, r5
   df5f6:	f003 fc6b 	bl	e2ed0 <__aeabi_dmul>
   df5fa:	4622      	mov	r2, r4
   df5fc:	4606      	mov	r6, r0
   df5fe:	460f      	mov	r7, r1
   df600:	462b      	mov	r3, r5
   df602:	2000      	movs	r0, #0
   df604:	4919      	ldr	r1, [pc, #100]	; (df66c <__ieee754_cosh+0x174>)
   df606:	f003 fd8d 	bl	e3124 <__aeabi_ddiv>
   df60a:	4602      	mov	r2, r0
   df60c:	460b      	mov	r3, r1
   df60e:	4630      	mov	r0, r6
   df610:	4639      	mov	r1, r7
   df612:	f003 faab 	bl	e2b6c <__adddf3>
   df616:	ec41 0b10 	vmov	d0, r0, r1
   df61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df61e:	ec47 6b10 	vmov	d0, r6, r7
   df622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df626:	f7fe fa4b 	bl	ddac0 <fabs>
   df62a:	f000 f821 	bl	df670 <__ieee754_exp>
   df62e:	2200      	movs	r2, #0
   df630:	4b0e      	ldr	r3, [pc, #56]	; (df66c <__ieee754_cosh+0x174>)
   df632:	ec51 0b10 	vmov	r0, r1, d0
   df636:	f003 fc4b 	bl	e2ed0 <__aeabi_dmul>
   df63a:	ec41 0b10 	vmov	d0, r0, r1
   df63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df642:	bf00      	nop
   df644:	f3af 8000 	nop.w
   df648:	8800759c 	.word	0x8800759c
   df64c:	7e37e43c 	.word	0x7e37e43c
   df650:	7fefffff 	.word	0x7fefffff
   df654:	3fd62e42 	.word	0x3fd62e42
   df658:	4035ffff 	.word	0x4035ffff
   df65c:	40862e41 	.word	0x40862e41
   df660:	408633cd 	.word	0x408633cd
   df664:	3ff00000 	.word	0x3ff00000
   df668:	8fb9f87d 	.word	0x8fb9f87d
   df66c:	3fe00000 	.word	0x3fe00000

000df670 <__ieee754_exp>:
   df670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df674:	ec55 4b10 	vmov	r4, r5, d0
   df678:	49bd      	ldr	r1, [pc, #756]	; (df970 <__ieee754_exp+0x300>)
   df67a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   df67e:	428a      	cmp	r2, r1
   df680:	b083      	sub	sp, #12
   df682:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   df686:	d90d      	bls.n	df6a4 <__ieee754_exp+0x34>
   df688:	49ba      	ldr	r1, [pc, #744]	; (df974 <__ieee754_exp+0x304>)
   df68a:	428a      	cmp	r2, r1
   df68c:	d92a      	bls.n	df6e4 <__ieee754_exp+0x74>
   df68e:	f3c5 0313 	ubfx	r3, r5, #0, #20
   df692:	4323      	orrs	r3, r4
   df694:	f040 80fa 	bne.w	df88c <__ieee754_exp+0x21c>
   df698:	b10f      	cbz	r7, df69e <__ieee754_exp+0x2e>
   df69a:	ed9f 0b9d 	vldr	d0, [pc, #628]	; df910 <__ieee754_exp+0x2a0>
   df69e:	b003      	add	sp, #12
   df6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df6a4:	4bb4      	ldr	r3, [pc, #720]	; (df978 <__ieee754_exp+0x308>)
   df6a6:	429a      	cmp	r2, r3
   df6a8:	f200 80d5 	bhi.w	df856 <__ieee754_exp+0x1e6>
   df6ac:	4bb3      	ldr	r3, [pc, #716]	; (df97c <__ieee754_exp+0x30c>)
   df6ae:	429a      	cmp	r2, r3
   df6b0:	f200 80ea 	bhi.w	df888 <__ieee754_exp+0x218>
   df6b4:	a398      	add	r3, pc, #608	; (adr r3, df918 <__ieee754_exp+0x2a8>)
   df6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6ba:	ee10 0a10 	vmov	r0, s0
   df6be:	4629      	mov	r1, r5
   df6c0:	f003 fa54 	bl	e2b6c <__adddf3>
   df6c4:	2200      	movs	r2, #0
   df6c6:	4bae      	ldr	r3, [pc, #696]	; (df980 <__ieee754_exp+0x310>)
   df6c8:	f003 fe92 	bl	e33f0 <__aeabi_dcmpgt>
   df6cc:	2800      	cmp	r0, #0
   df6ce:	f000 811c 	beq.w	df90a <__ieee754_exp+0x29a>
   df6d2:	4620      	mov	r0, r4
   df6d4:	4629      	mov	r1, r5
   df6d6:	2200      	movs	r2, #0
   df6d8:	4ba9      	ldr	r3, [pc, #676]	; (df980 <__ieee754_exp+0x310>)
   df6da:	f003 fa47 	bl	e2b6c <__adddf3>
   df6de:	ec41 0b10 	vmov	d0, r0, r1
   df6e2:	e7dc      	b.n	df69e <__ieee754_exp+0x2e>
   df6e4:	a38e      	add	r3, pc, #568	; (adr r3, df920 <__ieee754_exp+0x2b0>)
   df6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6ea:	ee10 0a10 	vmov	r0, s0
   df6ee:	4629      	mov	r1, r5
   df6f0:	f003 fe7e 	bl	e33f0 <__aeabi_dcmpgt>
   df6f4:	2800      	cmp	r0, #0
   df6f6:	f040 80d3 	bne.w	df8a0 <__ieee754_exp+0x230>
   df6fa:	a38b      	add	r3, pc, #556	; (adr r3, df928 <__ieee754_exp+0x2b8>)
   df6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df700:	4620      	mov	r0, r4
   df702:	4629      	mov	r1, r5
   df704:	f003 fe56 	bl	e33b4 <__aeabi_dcmplt>
   df708:	2800      	cmp	r0, #0
   df70a:	d1c6      	bne.n	df69a <__ieee754_exp+0x2a>
   df70c:	4e9d      	ldr	r6, [pc, #628]	; (df984 <__ieee754_exp+0x314>)
   df70e:	a388      	add	r3, pc, #544	; (adr r3, df930 <__ieee754_exp+0x2c0>)
   df710:	e9d3 2300 	ldrd	r2, r3, [r3]
   df714:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   df718:	4620      	mov	r0, r4
   df71a:	4629      	mov	r1, r5
   df71c:	f003 fbd8 	bl	e2ed0 <__aeabi_dmul>
   df720:	e9d6 2300 	ldrd	r2, r3, [r6]
   df724:	f003 fa22 	bl	e2b6c <__adddf3>
   df728:	f003 fe82 	bl	e3430 <__aeabi_d2iz>
   df72c:	4606      	mov	r6, r0
   df72e:	f003 fb69 	bl	e2e04 <__aeabi_i2d>
   df732:	a381      	add	r3, pc, #516	; (adr r3, df938 <__ieee754_exp+0x2c8>)
   df734:	e9d3 2300 	ldrd	r2, r3, [r3]
   df738:	4680      	mov	r8, r0
   df73a:	4689      	mov	r9, r1
   df73c:	f003 fbc8 	bl	e2ed0 <__aeabi_dmul>
   df740:	4602      	mov	r2, r0
   df742:	460b      	mov	r3, r1
   df744:	4620      	mov	r0, r4
   df746:	4629      	mov	r1, r5
   df748:	f003 fa0e 	bl	e2b68 <__aeabi_dsub>
   df74c:	a37c      	add	r3, pc, #496	; (adr r3, df940 <__ieee754_exp+0x2d0>)
   df74e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df752:	e9cd 0100 	strd	r0, r1, [sp]
   df756:	4640      	mov	r0, r8
   df758:	4649      	mov	r1, r9
   df75a:	f003 fbb9 	bl	e2ed0 <__aeabi_dmul>
   df75e:	4682      	mov	sl, r0
   df760:	468b      	mov	fp, r1
   df762:	4652      	mov	r2, sl
   df764:	465b      	mov	r3, fp
   df766:	e9dd 0100 	ldrd	r0, r1, [sp]
   df76a:	f003 f9fd 	bl	e2b68 <__aeabi_dsub>
   df76e:	4604      	mov	r4, r0
   df770:	460d      	mov	r5, r1
   df772:	4622      	mov	r2, r4
   df774:	462b      	mov	r3, r5
   df776:	4620      	mov	r0, r4
   df778:	4629      	mov	r1, r5
   df77a:	f003 fba9 	bl	e2ed0 <__aeabi_dmul>
   df77e:	a372      	add	r3, pc, #456	; (adr r3, df948 <__ieee754_exp+0x2d8>)
   df780:	e9d3 2300 	ldrd	r2, r3, [r3]
   df784:	4680      	mov	r8, r0
   df786:	4689      	mov	r9, r1
   df788:	f003 fba2 	bl	e2ed0 <__aeabi_dmul>
   df78c:	a370      	add	r3, pc, #448	; (adr r3, df950 <__ieee754_exp+0x2e0>)
   df78e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df792:	f003 f9e9 	bl	e2b68 <__aeabi_dsub>
   df796:	4642      	mov	r2, r8
   df798:	464b      	mov	r3, r9
   df79a:	f003 fb99 	bl	e2ed0 <__aeabi_dmul>
   df79e:	a36e      	add	r3, pc, #440	; (adr r3, df958 <__ieee754_exp+0x2e8>)
   df7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7a4:	f003 f9e2 	bl	e2b6c <__adddf3>
   df7a8:	4642      	mov	r2, r8
   df7aa:	464b      	mov	r3, r9
   df7ac:	f003 fb90 	bl	e2ed0 <__aeabi_dmul>
   df7b0:	a36b      	add	r3, pc, #428	; (adr r3, df960 <__ieee754_exp+0x2f0>)
   df7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7b6:	f003 f9d7 	bl	e2b68 <__aeabi_dsub>
   df7ba:	4642      	mov	r2, r8
   df7bc:	464b      	mov	r3, r9
   df7be:	f003 fb87 	bl	e2ed0 <__aeabi_dmul>
   df7c2:	a369      	add	r3, pc, #420	; (adr r3, df968 <__ieee754_exp+0x2f8>)
   df7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7c8:	f003 f9d0 	bl	e2b6c <__adddf3>
   df7cc:	4642      	mov	r2, r8
   df7ce:	464b      	mov	r3, r9
   df7d0:	f003 fb7e 	bl	e2ed0 <__aeabi_dmul>
   df7d4:	4602      	mov	r2, r0
   df7d6:	460b      	mov	r3, r1
   df7d8:	4620      	mov	r0, r4
   df7da:	4629      	mov	r1, r5
   df7dc:	f003 f9c4 	bl	e2b68 <__aeabi_dsub>
   df7e0:	4680      	mov	r8, r0
   df7e2:	4689      	mov	r9, r1
   df7e4:	2e00      	cmp	r6, #0
   df7e6:	d065      	beq.n	df8b4 <__ieee754_exp+0x244>
   df7e8:	4620      	mov	r0, r4
   df7ea:	4629      	mov	r1, r5
   df7ec:	4642      	mov	r2, r8
   df7ee:	464b      	mov	r3, r9
   df7f0:	f003 fb6e 	bl	e2ed0 <__aeabi_dmul>
   df7f4:	4642      	mov	r2, r8
   df7f6:	4604      	mov	r4, r0
   df7f8:	460d      	mov	r5, r1
   df7fa:	464b      	mov	r3, r9
   df7fc:	2000      	movs	r0, #0
   df7fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   df802:	f003 f9b1 	bl	e2b68 <__aeabi_dsub>
   df806:	4602      	mov	r2, r0
   df808:	460b      	mov	r3, r1
   df80a:	4620      	mov	r0, r4
   df80c:	4629      	mov	r1, r5
   df80e:	f003 fc89 	bl	e3124 <__aeabi_ddiv>
   df812:	4602      	mov	r2, r0
   df814:	460b      	mov	r3, r1
   df816:	4650      	mov	r0, sl
   df818:	4659      	mov	r1, fp
   df81a:	f003 f9a5 	bl	e2b68 <__aeabi_dsub>
   df81e:	e9dd 2300 	ldrd	r2, r3, [sp]
   df822:	f003 f9a1 	bl	e2b68 <__aeabi_dsub>
   df826:	460b      	mov	r3, r1
   df828:	4602      	mov	r2, r0
   df82a:	4955      	ldr	r1, [pc, #340]	; (df980 <__ieee754_exp+0x310>)
   df82c:	2000      	movs	r0, #0
   df82e:	f003 f99b 	bl	e2b68 <__aeabi_dsub>
   df832:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   df836:	429e      	cmp	r6, r3
   df838:	da60      	bge.n	df8fc <__ieee754_exp+0x28c>
   df83a:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   df83e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df842:	2200      	movs	r2, #0
   df844:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   df848:	f003 fb42 	bl	e2ed0 <__aeabi_dmul>
   df84c:	ec41 0b10 	vmov	d0, r0, r1
   df850:	b003      	add	sp, #12
   df852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df856:	4b4c      	ldr	r3, [pc, #304]	; (df988 <__ieee754_exp+0x318>)
   df858:	429a      	cmp	r2, r3
   df85a:	f63f af57 	bhi.w	df70c <__ieee754_exp+0x9c>
   df85e:	4b4b      	ldr	r3, [pc, #300]	; (df98c <__ieee754_exp+0x31c>)
   df860:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   df864:	4443      	add	r3, r8
   df866:	e9d3 2300 	ldrd	r2, r3, [r3]
   df86a:	ee10 0a10 	vmov	r0, s0
   df86e:	4629      	mov	r1, r5
   df870:	f003 f97a 	bl	e2b68 <__aeabi_dsub>
   df874:	4b46      	ldr	r3, [pc, #280]	; (df990 <__ieee754_exp+0x320>)
   df876:	f1c7 0601 	rsb	r6, r7, #1
   df87a:	4498      	add	r8, r3
   df87c:	e9cd 0100 	strd	r0, r1, [sp]
   df880:	e9d8 ab00 	ldrd	sl, fp, [r8]
   df884:	1bf6      	subs	r6, r6, r7
   df886:	e76c      	b.n	df762 <__ieee754_exp+0xf2>
   df888:	2600      	movs	r6, #0
   df88a:	e772      	b.n	df772 <__ieee754_exp+0x102>
   df88c:	ee10 2a10 	vmov	r2, s0
   df890:	462b      	mov	r3, r5
   df892:	4620      	mov	r0, r4
   df894:	4629      	mov	r1, r5
   df896:	f003 f969 	bl	e2b6c <__adddf3>
   df89a:	ec41 0b10 	vmov	d0, r0, r1
   df89e:	e6fe      	b.n	df69e <__ieee754_exp+0x2e>
   df8a0:	a31d      	add	r3, pc, #116	; (adr r3, df918 <__ieee754_exp+0x2a8>)
   df8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df8a6:	4610      	mov	r0, r2
   df8a8:	4619      	mov	r1, r3
   df8aa:	f003 fb11 	bl	e2ed0 <__aeabi_dmul>
   df8ae:	ec41 0b10 	vmov	d0, r0, r1
   df8b2:	e6f4      	b.n	df69e <__ieee754_exp+0x2e>
   df8b4:	4602      	mov	r2, r0
   df8b6:	460b      	mov	r3, r1
   df8b8:	4620      	mov	r0, r4
   df8ba:	4629      	mov	r1, r5
   df8bc:	f003 fb08 	bl	e2ed0 <__aeabi_dmul>
   df8c0:	2200      	movs	r2, #0
   df8c2:	4606      	mov	r6, r0
   df8c4:	460f      	mov	r7, r1
   df8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df8ca:	4640      	mov	r0, r8
   df8cc:	4649      	mov	r1, r9
   df8ce:	f003 f94b 	bl	e2b68 <__aeabi_dsub>
   df8d2:	4602      	mov	r2, r0
   df8d4:	460b      	mov	r3, r1
   df8d6:	4630      	mov	r0, r6
   df8d8:	4639      	mov	r1, r7
   df8da:	f003 fc23 	bl	e3124 <__aeabi_ddiv>
   df8de:	4622      	mov	r2, r4
   df8e0:	462b      	mov	r3, r5
   df8e2:	f003 f941 	bl	e2b68 <__aeabi_dsub>
   df8e6:	4602      	mov	r2, r0
   df8e8:	460b      	mov	r3, r1
   df8ea:	2000      	movs	r0, #0
   df8ec:	4924      	ldr	r1, [pc, #144]	; (df980 <__ieee754_exp+0x310>)
   df8ee:	f003 f93b 	bl	e2b68 <__aeabi_dsub>
   df8f2:	ec41 0b10 	vmov	d0, r0, r1
   df8f6:	b003      	add	sp, #12
   df8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df8fc:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df900:	ec41 0b10 	vmov	d0, r0, r1
   df904:	b003      	add	sp, #12
   df906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df90a:	4606      	mov	r6, r0
   df90c:	e731      	b.n	df772 <__ieee754_exp+0x102>
   df90e:	bf00      	nop
	...
   df918:	8800759c 	.word	0x8800759c
   df91c:	7e37e43c 	.word	0x7e37e43c
   df920:	fefa39ef 	.word	0xfefa39ef
   df924:	40862e42 	.word	0x40862e42
   df928:	d52d3051 	.word	0xd52d3051
   df92c:	c0874910 	.word	0xc0874910
   df930:	652b82fe 	.word	0x652b82fe
   df934:	3ff71547 	.word	0x3ff71547
   df938:	fee00000 	.word	0xfee00000
   df93c:	3fe62e42 	.word	0x3fe62e42
   df940:	35793c76 	.word	0x35793c76
   df944:	3dea39ef 	.word	0x3dea39ef
   df948:	72bea4d0 	.word	0x72bea4d0
   df94c:	3e663769 	.word	0x3e663769
   df950:	c5d26bf1 	.word	0xc5d26bf1
   df954:	3ebbbd41 	.word	0x3ebbbd41
   df958:	af25de2c 	.word	0xaf25de2c
   df95c:	3f11566a 	.word	0x3f11566a
   df960:	16bebd93 	.word	0x16bebd93
   df964:	3f66c16c 	.word	0x3f66c16c
   df968:	5555553e 	.word	0x5555553e
   df96c:	3fc55555 	.word	0x3fc55555
   df970:	40862e41 	.word	0x40862e41
   df974:	7fefffff 	.word	0x7fefffff
   df978:	3fd62e42 	.word	0x3fd62e42
   df97c:	3e2fffff 	.word	0x3e2fffff
   df980:	3ff00000 	.word	0x3ff00000
   df984:	000e8330 	.word	0x000e8330
   df988:	3ff0a2b1 	.word	0x3ff0a2b1
   df98c:	000e8350 	.word	0x000e8350
   df990:	000e8340 	.word	0x000e8340

000df994 <__ieee754_fmod>:
   df994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df998:	ec53 2b11 	vmov	r2, r3, d1
   df99c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   df9a0:	ea52 0009 	orrs.w	r0, r2, r9
   df9a4:	ec55 4b10 	vmov	r4, r5, d0
   df9a8:	d025      	beq.n	df9f6 <__ieee754_fmod+0x62>
   df9aa:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   df9ae:	488f      	ldr	r0, [pc, #572]	; (dfbec <__ieee754_fmod+0x258>)
   df9b0:	ea85 0b06 	eor.w	fp, r5, r6
   df9b4:	4583      	cmp	fp, r0
   df9b6:	dc1e      	bgt.n	df9f6 <__ieee754_fmod+0x62>
   df9b8:	4250      	negs	r0, r2
   df9ba:	4310      	orrs	r0, r2
   df9bc:	f8df c244 	ldr.w	ip, [pc, #580]	; dfc04 <__ieee754_fmod+0x270>
   df9c0:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   df9c4:	4560      	cmp	r0, ip
   df9c6:	ee11 8a10 	vmov	r8, s2
   df9ca:	d814      	bhi.n	df9f6 <__ieee754_fmod+0x62>
   df9cc:	45cb      	cmp	fp, r9
   df9ce:	461f      	mov	r7, r3
   df9d0:	ee10 aa10 	vmov	sl, s0
   df9d4:	ee11 ea10 	vmov	lr, s2
   df9d8:	ee10 1a10 	vmov	r1, s0
   df9dc:	dc17      	bgt.n	dfa0e <__ieee754_fmod+0x7a>
   df9de:	db28      	blt.n	dfa32 <__ieee754_fmod+0x9e>
   df9e0:	4294      	cmp	r4, r2
   df9e2:	d326      	bcc.n	dfa32 <__ieee754_fmod+0x9e>
   df9e4:	d113      	bne.n	dfa0e <__ieee754_fmod+0x7a>
   df9e6:	4b82      	ldr	r3, [pc, #520]	; (dfbf0 <__ieee754_fmod+0x25c>)
   df9e8:	0ff6      	lsrs	r6, r6, #31
   df9ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   df9ee:	ed93 0b00 	vldr	d0, [r3]
   df9f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df9f6:	4620      	mov	r0, r4
   df9f8:	4629      	mov	r1, r5
   df9fa:	f003 fa69 	bl	e2ed0 <__aeabi_dmul>
   df9fe:	4602      	mov	r2, r0
   dfa00:	460b      	mov	r3, r1
   dfa02:	f003 fb8f 	bl	e3124 <__aeabi_ddiv>
   dfa06:	ec41 0b10 	vmov	d0, r0, r1
   dfa0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa0e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   dfa12:	da12      	bge.n	dfa3a <__ieee754_fmod+0xa6>
   dfa14:	f1bb 0f00 	cmp.w	fp, #0
   dfa18:	f040 80a7 	bne.w	dfb6a <__ieee754_fmod+0x1d6>
   dfa1c:	f1ba 0f00 	cmp.w	sl, #0
   dfa20:	4653      	mov	r3, sl
   dfa22:	4874      	ldr	r0, [pc, #464]	; (dfbf4 <__ieee754_fmod+0x260>)
   dfa24:	dd0d      	ble.n	dfa42 <__ieee754_fmod+0xae>
   dfa26:	005b      	lsls	r3, r3, #1
   dfa28:	2b00      	cmp	r3, #0
   dfa2a:	f100 30ff 	add.w	r0, r0, #4294967295
   dfa2e:	dcfa      	bgt.n	dfa26 <__ieee754_fmod+0x92>
   dfa30:	e007      	b.n	dfa42 <__ieee754_fmod+0xae>
   dfa32:	ec45 4b10 	vmov	d0, r4, r5
   dfa36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa3a:	ea4f 502b 	mov.w	r0, fp, asr #20
   dfa3e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dfa42:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   dfa46:	da0f      	bge.n	dfa68 <__ieee754_fmod+0xd4>
   dfa48:	f1b9 0f00 	cmp.w	r9, #0
   dfa4c:	f040 80a7 	bne.w	dfb9e <__ieee754_fmod+0x20a>
   dfa50:	f1b8 0f00 	cmp.w	r8, #0
   dfa54:	4643      	mov	r3, r8
   dfa56:	f8df c19c 	ldr.w	ip, [pc, #412]	; dfbf4 <__ieee754_fmod+0x260>
   dfa5a:	dd09      	ble.n	dfa70 <__ieee754_fmod+0xdc>
   dfa5c:	005b      	lsls	r3, r3, #1
   dfa5e:	2b00      	cmp	r3, #0
   dfa60:	f10c 3cff 	add.w	ip, ip, #4294967295
   dfa64:	dcfa      	bgt.n	dfa5c <__ieee754_fmod+0xc8>
   dfa66:	e003      	b.n	dfa70 <__ieee754_fmod+0xdc>
   dfa68:	ea4f 5c29 	mov.w	ip, r9, asr #20
   dfa6c:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   dfa70:	4b61      	ldr	r3, [pc, #388]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfa72:	4298      	cmp	r0, r3
   dfa74:	db5b      	blt.n	dfb2e <__ieee754_fmod+0x19a>
   dfa76:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dfa7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dfa7e:	4a5e      	ldr	r2, [pc, #376]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfa80:	4594      	cmp	ip, r2
   dfa82:	db63      	blt.n	dfb4c <__ieee754_fmod+0x1b8>
   dfa84:	f3c7 0513 	ubfx	r5, r7, #0, #20
   dfa88:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dfa8c:	ebcc 0000 	rsb	r0, ip, r0
   dfa90:	e007      	b.n	dfaa2 <__ieee754_fmod+0x10e>
   dfa92:	ea52 0304 	orrs.w	r3, r2, r4
   dfa96:	d013      	beq.n	dfac0 <__ieee754_fmod+0x12c>
   dfa98:	0fe3      	lsrs	r3, r4, #31
   dfa9a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   dfa9e:	0061      	lsls	r1, r4, #1
   dfaa0:	3801      	subs	r0, #1
   dfaa2:	ebce 0401 	rsb	r4, lr, r1
   dfaa6:	1b5a      	subs	r2, r3, r5
   dfaa8:	b190      	cbz	r0, dfad0 <__ieee754_fmod+0x13c>
   dfaaa:	4571      	cmp	r1, lr
   dfaac:	bf38      	it	cc
   dfaae:	f102 32ff 	addcc.w	r2, r2, #4294967295
   dfab2:	2a00      	cmp	r2, #0
   dfab4:	daed      	bge.n	dfa92 <__ieee754_fmod+0xfe>
   dfab6:	0fca      	lsrs	r2, r1, #31
   dfab8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dfabc:	0049      	lsls	r1, r1, #1
   dfabe:	e7ef      	b.n	dfaa0 <__ieee754_fmod+0x10c>
   dfac0:	4b4b      	ldr	r3, [pc, #300]	; (dfbf0 <__ieee754_fmod+0x25c>)
   dfac2:	0ff6      	lsrs	r6, r6, #31
   dfac4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   dfac8:	ed96 0b00 	vldr	d0, [r6]
   dfacc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfad0:	4571      	cmp	r1, lr
   dfad2:	4615      	mov	r5, r2
   dfad4:	bf38      	it	cc
   dfad6:	f102 35ff 	addcc.w	r5, r2, #4294967295
   dfada:	2d00      	cmp	r5, #0
   dfadc:	bfac      	ite	ge
   dfade:	ebce 0101 	rsbge	r1, lr, r1
   dfae2:	461d      	movlt	r5, r3
   dfae4:	ea55 0301 	orrs.w	r3, r5, r1
   dfae8:	d0ea      	beq.n	dfac0 <__ieee754_fmod+0x12c>
   dfaea:	4a44      	ldr	r2, [pc, #272]	; (dfbfc <__ieee754_fmod+0x268>)
   dfaec:	4295      	cmp	r5, r2
   dfaee:	dc08      	bgt.n	dfb02 <__ieee754_fmod+0x16e>
   dfaf0:	0fcb      	lsrs	r3, r1, #31
   dfaf2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   dfaf6:	4295      	cmp	r5, r2
   dfaf8:	f10c 3cff 	add.w	ip, ip, #4294967295
   dfafc:	ea4f 0141 	mov.w	r1, r1, lsl #1
   dfb00:	ddf6      	ble.n	dfaf0 <__ieee754_fmod+0x15c>
   dfb02:	4b3d      	ldr	r3, [pc, #244]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfb04:	459c      	cmp	ip, r3
   dfb06:	da54      	bge.n	dfbb2 <__ieee754_fmod+0x21e>
   dfb08:	4a3b      	ldr	r2, [pc, #236]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfb0a:	ebcc 0202 	rsb	r2, ip, r2
   dfb0e:	2a14      	cmp	r2, #20
   dfb10:	dc5b      	bgt.n	dfbca <__ieee754_fmod+0x236>
   dfb12:	f1c2 0320 	rsb	r3, r2, #32
   dfb16:	fa05 f303 	lsl.w	r3, r5, r3
   dfb1a:	40d1      	lsrs	r1, r2
   dfb1c:	430b      	orrs	r3, r1
   dfb1e:	4115      	asrs	r5, r2
   dfb20:	ea45 0106 	orr.w	r1, r5, r6
   dfb24:	4618      	mov	r0, r3
   dfb26:	ec41 0b10 	vmov	d0, r0, r1
   dfb2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfb2e:	4932      	ldr	r1, [pc, #200]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfb30:	1a09      	subs	r1, r1, r0
   dfb32:	291f      	cmp	r1, #31
   dfb34:	dc2d      	bgt.n	dfb92 <__ieee754_fmod+0x1fe>
   dfb36:	f1c1 0320 	rsb	r3, r1, #32
   dfb3a:	fa0b fb01 	lsl.w	fp, fp, r1
   dfb3e:	fa2a f303 	lsr.w	r3, sl, r3
   dfb42:	ea43 030b 	orr.w	r3, r3, fp
   dfb46:	fa0a f101 	lsl.w	r1, sl, r1
   dfb4a:	e798      	b.n	dfa7e <__ieee754_fmod+0xea>
   dfb4c:	4c2a      	ldr	r4, [pc, #168]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfb4e:	ebcc 0404 	rsb	r4, ip, r4
   dfb52:	2c1f      	cmp	r4, #31
   dfb54:	dc15      	bgt.n	dfb82 <__ieee754_fmod+0x1ee>
   dfb56:	f1c4 0220 	rsb	r2, r4, #32
   dfb5a:	fa09 f504 	lsl.w	r5, r9, r4
   dfb5e:	fa28 f202 	lsr.w	r2, r8, r2
   dfb62:	4315      	orrs	r5, r2
   dfb64:	fa08 fe04 	lsl.w	lr, r8, r4
   dfb68:	e790      	b.n	dfa8c <__ieee754_fmod+0xf8>
   dfb6a:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   dfb6e:	2b00      	cmp	r3, #0
   dfb70:	4821      	ldr	r0, [pc, #132]	; (dfbf8 <__ieee754_fmod+0x264>)
   dfb72:	f77f af66 	ble.w	dfa42 <__ieee754_fmod+0xae>
   dfb76:	005b      	lsls	r3, r3, #1
   dfb78:	2b00      	cmp	r3, #0
   dfb7a:	f100 30ff 	add.w	r0, r0, #4294967295
   dfb7e:	dcfa      	bgt.n	dfb76 <__ieee754_fmod+0x1e2>
   dfb80:	e75f      	b.n	dfa42 <__ieee754_fmod+0xae>
   dfb82:	4d1f      	ldr	r5, [pc, #124]	; (dfc00 <__ieee754_fmod+0x26c>)
   dfb84:	ebcc 0505 	rsb	r5, ip, r5
   dfb88:	fa08 f505 	lsl.w	r5, r8, r5
   dfb8c:	f04f 0e00 	mov.w	lr, #0
   dfb90:	e77c      	b.n	dfa8c <__ieee754_fmod+0xf8>
   dfb92:	4b1b      	ldr	r3, [pc, #108]	; (dfc00 <__ieee754_fmod+0x26c>)
   dfb94:	1a1b      	subs	r3, r3, r0
   dfb96:	fa0a f303 	lsl.w	r3, sl, r3
   dfb9a:	2100      	movs	r1, #0
   dfb9c:	e76f      	b.n	dfa7e <__ieee754_fmod+0xea>
   dfb9e:	f8df c058 	ldr.w	ip, [pc, #88]	; dfbf8 <__ieee754_fmod+0x264>
   dfba2:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   dfba6:	005b      	lsls	r3, r3, #1
   dfba8:	2b00      	cmp	r3, #0
   dfbaa:	f10c 3cff 	add.w	ip, ip, #4294967295
   dfbae:	dcfa      	bgt.n	dfba6 <__ieee754_fmod+0x212>
   dfbb0:	e75e      	b.n	dfa70 <__ieee754_fmod+0xdc>
   dfbb2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   dfbb6:	432e      	orrs	r6, r5
   dfbb8:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   dfbbc:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   dfbc0:	460a      	mov	r2, r1
   dfbc2:	ec43 2b10 	vmov	d0, r2, r3
   dfbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfbca:	2a1f      	cmp	r2, #31
   dfbcc:	dc07      	bgt.n	dfbde <__ieee754_fmod+0x24a>
   dfbce:	f1c2 0320 	rsb	r3, r2, #32
   dfbd2:	409d      	lsls	r5, r3
   dfbd4:	40d1      	lsrs	r1, r2
   dfbd6:	ea45 0301 	orr.w	r3, r5, r1
   dfbda:	4635      	mov	r5, r6
   dfbdc:	e7a0      	b.n	dfb20 <__ieee754_fmod+0x18c>
   dfbde:	4b08      	ldr	r3, [pc, #32]	; (dfc00 <__ieee754_fmod+0x26c>)
   dfbe0:	ebcc 0303 	rsb	r3, ip, r3
   dfbe4:	fa45 f303 	asr.w	r3, r5, r3
   dfbe8:	4635      	mov	r5, r6
   dfbea:	e799      	b.n	dfb20 <__ieee754_fmod+0x18c>
   dfbec:	7fefffff 	.word	0x7fefffff
   dfbf0:	000e8360 	.word	0x000e8360
   dfbf4:	fffffbed 	.word	0xfffffbed
   dfbf8:	fffffc02 	.word	0xfffffc02
   dfbfc:	000fffff 	.word	0x000fffff
   dfc00:	fffffbe2 	.word	0xfffffbe2
   dfc04:	7ff00000 	.word	0x7ff00000

000dfc08 <__ieee754_log>:
   dfc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfc0c:	ec51 0b10 	vmov	r0, r1, d0
   dfc10:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dfc14:	b085      	sub	sp, #20
   dfc16:	460b      	mov	r3, r1
   dfc18:	da59      	bge.n	dfcce <__ieee754_log+0xc6>
   dfc1a:	ee10 2a10 	vmov	r2, s0
   dfc1e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   dfc22:	4322      	orrs	r2, r4
   dfc24:	f000 80f8 	beq.w	dfe18 <__ieee754_log+0x210>
   dfc28:	2900      	cmp	r1, #0
   dfc2a:	f2c0 8180 	blt.w	dff2e <__ieee754_log+0x326>
   dfc2e:	2200      	movs	r2, #0
   dfc30:	4bdd      	ldr	r3, [pc, #884]	; (dffa8 <__ieee754_log+0x3a0>)
   dfc32:	4cde      	ldr	r4, [pc, #888]	; (dffac <__ieee754_log+0x3a4>)
   dfc34:	f003 f94c 	bl	e2ed0 <__aeabi_dmul>
   dfc38:	460b      	mov	r3, r1
   dfc3a:	42a3      	cmp	r3, r4
   dfc3c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dfc40:	dc4a      	bgt.n	dfcd8 <__ieee754_log+0xd0>
   dfc42:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dfc46:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   dfc4a:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   dfc4e:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   dfc52:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   dfc56:	151b      	asrs	r3, r3, #20
   dfc58:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   dfc5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dfc60:	ea44 0105 	orr.w	r1, r4, r5
   dfc64:	189c      	adds	r4, r3, r2
   dfc66:	2200      	movs	r2, #0
   dfc68:	4bd1      	ldr	r3, [pc, #836]	; (dffb0 <__ieee754_log+0x3a8>)
   dfc6a:	f002 ff7d 	bl	e2b68 <__aeabi_dsub>
   dfc6e:	1cab      	adds	r3, r5, #2
   dfc70:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dfc74:	2b02      	cmp	r3, #2
   dfc76:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   dfc7a:	4682      	mov	sl, r0
   dfc7c:	468b      	mov	fp, r1
   dfc7e:	f04f 0200 	mov.w	r2, #0
   dfc82:	dc32      	bgt.n	dfcea <__ieee754_log+0xe2>
   dfc84:	2300      	movs	r3, #0
   dfc86:	f003 fb8b 	bl	e33a0 <__aeabi_dcmpeq>
   dfc8a:	2800      	cmp	r0, #0
   dfc8c:	f000 80cf 	beq.w	dfe2e <__ieee754_log+0x226>
   dfc90:	2c00      	cmp	r4, #0
   dfc92:	f000 8158 	beq.w	dff46 <__ieee754_log+0x33e>
   dfc96:	4620      	mov	r0, r4
   dfc98:	f003 f8b4 	bl	e2e04 <__aeabi_i2d>
   dfc9c:	a3ac      	add	r3, pc, #688	; (adr r3, dff50 <__ieee754_log+0x348>)
   dfc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfca2:	4606      	mov	r6, r0
   dfca4:	460f      	mov	r7, r1
   dfca6:	f003 f913 	bl	e2ed0 <__aeabi_dmul>
   dfcaa:	a3ab      	add	r3, pc, #684	; (adr r3, dff58 <__ieee754_log+0x350>)
   dfcac:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcb0:	4604      	mov	r4, r0
   dfcb2:	460d      	mov	r5, r1
   dfcb4:	4630      	mov	r0, r6
   dfcb6:	4639      	mov	r1, r7
   dfcb8:	f003 f90a 	bl	e2ed0 <__aeabi_dmul>
   dfcbc:	4602      	mov	r2, r0
   dfcbe:	460b      	mov	r3, r1
   dfcc0:	4620      	mov	r0, r4
   dfcc2:	4629      	mov	r1, r5
   dfcc4:	f002 ff52 	bl	e2b6c <__adddf3>
   dfcc8:	ec41 0b10 	vmov	d0, r0, r1
   dfccc:	e00a      	b.n	dfce4 <__ieee754_log+0xdc>
   dfcce:	4cb7      	ldr	r4, [pc, #732]	; (dffac <__ieee754_log+0x3a4>)
   dfcd0:	42a3      	cmp	r3, r4
   dfcd2:	f04f 0200 	mov.w	r2, #0
   dfcd6:	ddb4      	ble.n	dfc42 <__ieee754_log+0x3a>
   dfcd8:	4602      	mov	r2, r0
   dfcda:	460b      	mov	r3, r1
   dfcdc:	f002 ff46 	bl	e2b6c <__adddf3>
   dfce0:	ec41 0b10 	vmov	d0, r0, r1
   dfce4:	b005      	add	sp, #20
   dfce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfcea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dfcee:	f002 ff3d 	bl	e2b6c <__adddf3>
   dfcf2:	4602      	mov	r2, r0
   dfcf4:	460b      	mov	r3, r1
   dfcf6:	4650      	mov	r0, sl
   dfcf8:	4659      	mov	r1, fp
   dfcfa:	f003 fa13 	bl	e3124 <__aeabi_ddiv>
   dfcfe:	4606      	mov	r6, r0
   dfd00:	4620      	mov	r0, r4
   dfd02:	460f      	mov	r7, r1
   dfd04:	f003 f87e 	bl	e2e04 <__aeabi_i2d>
   dfd08:	4632      	mov	r2, r6
   dfd0a:	e9cd 0100 	strd	r0, r1, [sp]
   dfd0e:	463b      	mov	r3, r7
   dfd10:	4630      	mov	r0, r6
   dfd12:	4639      	mov	r1, r7
   dfd14:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dfd18:	f003 f8da 	bl	e2ed0 <__aeabi_dmul>
   dfd1c:	4602      	mov	r2, r0
   dfd1e:	460b      	mov	r3, r1
   dfd20:	4680      	mov	r8, r0
   dfd22:	4689      	mov	r9, r1
   dfd24:	f003 f8d4 	bl	e2ed0 <__aeabi_dmul>
   dfd28:	a38d      	add	r3, pc, #564	; (adr r3, dff60 <__ieee754_log+0x358>)
   dfd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd2e:	4606      	mov	r6, r0
   dfd30:	460f      	mov	r7, r1
   dfd32:	f003 f8cd 	bl	e2ed0 <__aeabi_dmul>
   dfd36:	a38c      	add	r3, pc, #560	; (adr r3, dff68 <__ieee754_log+0x360>)
   dfd38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd3c:	f002 ff16 	bl	e2b6c <__adddf3>
   dfd40:	4632      	mov	r2, r6
   dfd42:	463b      	mov	r3, r7
   dfd44:	f003 f8c4 	bl	e2ed0 <__aeabi_dmul>
   dfd48:	a389      	add	r3, pc, #548	; (adr r3, dff70 <__ieee754_log+0x368>)
   dfd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd4e:	f002 ff0d 	bl	e2b6c <__adddf3>
   dfd52:	4632      	mov	r2, r6
   dfd54:	463b      	mov	r3, r7
   dfd56:	f003 f8bb 	bl	e2ed0 <__aeabi_dmul>
   dfd5a:	a387      	add	r3, pc, #540	; (adr r3, dff78 <__ieee754_log+0x370>)
   dfd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd60:	f002 ff04 	bl	e2b6c <__adddf3>
   dfd64:	4642      	mov	r2, r8
   dfd66:	464b      	mov	r3, r9
   dfd68:	f003 f8b2 	bl	e2ed0 <__aeabi_dmul>
   dfd6c:	a384      	add	r3, pc, #528	; (adr r3, dff80 <__ieee754_log+0x378>)
   dfd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd72:	4680      	mov	r8, r0
   dfd74:	4689      	mov	r9, r1
   dfd76:	4630      	mov	r0, r6
   dfd78:	4639      	mov	r1, r7
   dfd7a:	f003 f8a9 	bl	e2ed0 <__aeabi_dmul>
   dfd7e:	a382      	add	r3, pc, #520	; (adr r3, dff88 <__ieee754_log+0x380>)
   dfd80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd84:	f002 fef2 	bl	e2b6c <__adddf3>
   dfd88:	4632      	mov	r2, r6
   dfd8a:	463b      	mov	r3, r7
   dfd8c:	f003 f8a0 	bl	e2ed0 <__aeabi_dmul>
   dfd90:	a37f      	add	r3, pc, #508	; (adr r3, dff90 <__ieee754_log+0x388>)
   dfd92:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd96:	f002 fee9 	bl	e2b6c <__adddf3>
   dfd9a:	4632      	mov	r2, r6
   dfd9c:	463b      	mov	r3, r7
   dfd9e:	f003 f897 	bl	e2ed0 <__aeabi_dmul>
   dfda2:	460b      	mov	r3, r1
   dfda4:	4602      	mov	r2, r0
   dfda6:	4649      	mov	r1, r9
   dfda8:	4640      	mov	r0, r8
   dfdaa:	f002 fedf 	bl	e2b6c <__adddf3>
   dfdae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   dfdb2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   dfdb6:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   dfdba:	3551      	adds	r5, #81	; 0x51
   dfdbc:	431d      	orrs	r5, r3
   dfdbe:	2d00      	cmp	r5, #0
   dfdc0:	4680      	mov	r8, r0
   dfdc2:	4689      	mov	r9, r1
   dfdc4:	dd5c      	ble.n	dfe80 <__ieee754_log+0x278>
   dfdc6:	2200      	movs	r2, #0
   dfdc8:	4b7a      	ldr	r3, [pc, #488]	; (dffb4 <__ieee754_log+0x3ac>)
   dfdca:	4650      	mov	r0, sl
   dfdcc:	4659      	mov	r1, fp
   dfdce:	f003 f87f 	bl	e2ed0 <__aeabi_dmul>
   dfdd2:	4652      	mov	r2, sl
   dfdd4:	465b      	mov	r3, fp
   dfdd6:	f003 f87b 	bl	e2ed0 <__aeabi_dmul>
   dfdda:	4606      	mov	r6, r0
   dfddc:	460f      	mov	r7, r1
   dfdde:	2c00      	cmp	r4, #0
   dfde0:	d16e      	bne.n	dfec0 <__ieee754_log+0x2b8>
   dfde2:	4632      	mov	r2, r6
   dfde4:	463b      	mov	r3, r7
   dfde6:	4640      	mov	r0, r8
   dfde8:	4649      	mov	r1, r9
   dfdea:	f002 febf 	bl	e2b6c <__adddf3>
   dfdee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfdf2:	f003 f86d 	bl	e2ed0 <__aeabi_dmul>
   dfdf6:	4602      	mov	r2, r0
   dfdf8:	460b      	mov	r3, r1
   dfdfa:	4630      	mov	r0, r6
   dfdfc:	4639      	mov	r1, r7
   dfdfe:	f002 feb3 	bl	e2b68 <__aeabi_dsub>
   dfe02:	4602      	mov	r2, r0
   dfe04:	460b      	mov	r3, r1
   dfe06:	4650      	mov	r0, sl
   dfe08:	4659      	mov	r1, fp
   dfe0a:	f002 fead 	bl	e2b68 <__aeabi_dsub>
   dfe0e:	ec41 0b10 	vmov	d0, r0, r1
   dfe12:	b005      	add	sp, #20
   dfe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe18:	2200      	movs	r2, #0
   dfe1a:	2300      	movs	r3, #0
   dfe1c:	2000      	movs	r0, #0
   dfe1e:	4966      	ldr	r1, [pc, #408]	; (dffb8 <__ieee754_log+0x3b0>)
   dfe20:	f003 f980 	bl	e3124 <__aeabi_ddiv>
   dfe24:	ec41 0b10 	vmov	d0, r0, r1
   dfe28:	b005      	add	sp, #20
   dfe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe2e:	a35a      	add	r3, pc, #360	; (adr r3, dff98 <__ieee754_log+0x390>)
   dfe30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe34:	4650      	mov	r0, sl
   dfe36:	4659      	mov	r1, fp
   dfe38:	f003 f84a 	bl	e2ed0 <__aeabi_dmul>
   dfe3c:	4602      	mov	r2, r0
   dfe3e:	460b      	mov	r3, r1
   dfe40:	2000      	movs	r0, #0
   dfe42:	495c      	ldr	r1, [pc, #368]	; (dffb4 <__ieee754_log+0x3ac>)
   dfe44:	f002 fe90 	bl	e2b68 <__aeabi_dsub>
   dfe48:	4652      	mov	r2, sl
   dfe4a:	4606      	mov	r6, r0
   dfe4c:	460f      	mov	r7, r1
   dfe4e:	465b      	mov	r3, fp
   dfe50:	4650      	mov	r0, sl
   dfe52:	4659      	mov	r1, fp
   dfe54:	f003 f83c 	bl	e2ed0 <__aeabi_dmul>
   dfe58:	4602      	mov	r2, r0
   dfe5a:	460b      	mov	r3, r1
   dfe5c:	4630      	mov	r0, r6
   dfe5e:	4639      	mov	r1, r7
   dfe60:	f003 f836 	bl	e2ed0 <__aeabi_dmul>
   dfe64:	4606      	mov	r6, r0
   dfe66:	460f      	mov	r7, r1
   dfe68:	2c00      	cmp	r4, #0
   dfe6a:	f040 80a7 	bne.w	dffbc <__ieee754_log+0x3b4>
   dfe6e:	4602      	mov	r2, r0
   dfe70:	460b      	mov	r3, r1
   dfe72:	4650      	mov	r0, sl
   dfe74:	4659      	mov	r1, fp
   dfe76:	f002 fe77 	bl	e2b68 <__aeabi_dsub>
   dfe7a:	ec41 0b10 	vmov	d0, r0, r1
   dfe7e:	e731      	b.n	dfce4 <__ieee754_log+0xdc>
   dfe80:	2c00      	cmp	r4, #0
   dfe82:	f000 80af 	beq.w	dffe4 <__ieee754_log+0x3dc>
   dfe86:	a332      	add	r3, pc, #200	; (adr r3, dff50 <__ieee754_log+0x348>)
   dfe88:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe8c:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfe90:	f003 f81e 	bl	e2ed0 <__aeabi_dmul>
   dfe94:	4642      	mov	r2, r8
   dfe96:	464b      	mov	r3, r9
   dfe98:	4604      	mov	r4, r0
   dfe9a:	460d      	mov	r5, r1
   dfe9c:	4650      	mov	r0, sl
   dfe9e:	4659      	mov	r1, fp
   dfea0:	f002 fe62 	bl	e2b68 <__aeabi_dsub>
   dfea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfea8:	f003 f812 	bl	e2ed0 <__aeabi_dmul>
   dfeac:	a32a      	add	r3, pc, #168	; (adr r3, dff58 <__ieee754_log+0x350>)
   dfeae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfeb2:	4606      	mov	r6, r0
   dfeb4:	460f      	mov	r7, r1
   dfeb6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfeba:	f003 f809 	bl	e2ed0 <__aeabi_dmul>
   dfebe:	e021      	b.n	dff04 <__ieee754_log+0x2fc>
   dfec0:	a323      	add	r3, pc, #140	; (adr r3, dff50 <__ieee754_log+0x348>)
   dfec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfec6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfeca:	f003 f801 	bl	e2ed0 <__aeabi_dmul>
   dfece:	4632      	mov	r2, r6
   dfed0:	463b      	mov	r3, r7
   dfed2:	4604      	mov	r4, r0
   dfed4:	460d      	mov	r5, r1
   dfed6:	4640      	mov	r0, r8
   dfed8:	4649      	mov	r1, r9
   dfeda:	f002 fe47 	bl	e2b6c <__adddf3>
   dfede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfee2:	f002 fff5 	bl	e2ed0 <__aeabi_dmul>
   dfee6:	a31c      	add	r3, pc, #112	; (adr r3, dff58 <__ieee754_log+0x350>)
   dfee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfeec:	4680      	mov	r8, r0
   dfeee:	4689      	mov	r9, r1
   dfef0:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfef4:	f002 ffec 	bl	e2ed0 <__aeabi_dmul>
   dfef8:	4602      	mov	r2, r0
   dfefa:	460b      	mov	r3, r1
   dfefc:	4640      	mov	r0, r8
   dfefe:	4649      	mov	r1, r9
   dff00:	f002 fe34 	bl	e2b6c <__adddf3>
   dff04:	4602      	mov	r2, r0
   dff06:	460b      	mov	r3, r1
   dff08:	4630      	mov	r0, r6
   dff0a:	4639      	mov	r1, r7
   dff0c:	f002 fe2c 	bl	e2b68 <__aeabi_dsub>
   dff10:	4652      	mov	r2, sl
   dff12:	465b      	mov	r3, fp
   dff14:	f002 fe28 	bl	e2b68 <__aeabi_dsub>
   dff18:	4602      	mov	r2, r0
   dff1a:	460b      	mov	r3, r1
   dff1c:	4620      	mov	r0, r4
   dff1e:	4629      	mov	r1, r5
   dff20:	f002 fe22 	bl	e2b68 <__aeabi_dsub>
   dff24:	ec41 0b10 	vmov	d0, r0, r1
   dff28:	b005      	add	sp, #20
   dff2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff2e:	ee10 2a10 	vmov	r2, s0
   dff32:	460b      	mov	r3, r1
   dff34:	f002 fe18 	bl	e2b68 <__aeabi_dsub>
   dff38:	2200      	movs	r2, #0
   dff3a:	2300      	movs	r3, #0
   dff3c:	f003 f8f2 	bl	e3124 <__aeabi_ddiv>
   dff40:	ec41 0b10 	vmov	d0, r0, r1
   dff44:	e6ce      	b.n	dfce4 <__ieee754_log+0xdc>
   dff46:	ed9f 0b16 	vldr	d0, [pc, #88]	; dffa0 <__ieee754_log+0x398>
   dff4a:	e6cb      	b.n	dfce4 <__ieee754_log+0xdc>
   dff4c:	f3af 8000 	nop.w
   dff50:	fee00000 	.word	0xfee00000
   dff54:	3fe62e42 	.word	0x3fe62e42
   dff58:	35793c76 	.word	0x35793c76
   dff5c:	3dea39ef 	.word	0x3dea39ef
   dff60:	df3e5244 	.word	0xdf3e5244
   dff64:	3fc2f112 	.word	0x3fc2f112
   dff68:	96cb03de 	.word	0x96cb03de
   dff6c:	3fc74664 	.word	0x3fc74664
   dff70:	94229359 	.word	0x94229359
   dff74:	3fd24924 	.word	0x3fd24924
   dff78:	55555593 	.word	0x55555593
   dff7c:	3fe55555 	.word	0x3fe55555
   dff80:	d078c69f 	.word	0xd078c69f
   dff84:	3fc39a09 	.word	0x3fc39a09
   dff88:	1d8e78af 	.word	0x1d8e78af
   dff8c:	3fcc71c5 	.word	0x3fcc71c5
   dff90:	9997fa04 	.word	0x9997fa04
   dff94:	3fd99999 	.word	0x3fd99999
   dff98:	55555555 	.word	0x55555555
   dff9c:	3fd55555 	.word	0x3fd55555
	...
   dffa8:	43500000 	.word	0x43500000
   dffac:	7fefffff 	.word	0x7fefffff
   dffb0:	3ff00000 	.word	0x3ff00000
   dffb4:	3fe00000 	.word	0x3fe00000
   dffb8:	c3500000 	.word	0xc3500000
   dffbc:	4620      	mov	r0, r4
   dffbe:	f002 ff21 	bl	e2e04 <__aeabi_i2d>
   dffc2:	a30f      	add	r3, pc, #60	; (adr r3, e0000 <__ieee754_log+0x3f8>)
   dffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dffc8:	4680      	mov	r8, r0
   dffca:	4689      	mov	r9, r1
   dffcc:	f002 ff80 	bl	e2ed0 <__aeabi_dmul>
   dffd0:	a30d      	add	r3, pc, #52	; (adr r3, e0008 <__ieee754_log+0x400>)
   dffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dffd6:	4604      	mov	r4, r0
   dffd8:	460d      	mov	r5, r1
   dffda:	4640      	mov	r0, r8
   dffdc:	4649      	mov	r1, r9
   dffde:	f002 ff77 	bl	e2ed0 <__aeabi_dmul>
   dffe2:	e78f      	b.n	dff04 <__ieee754_log+0x2fc>
   dffe4:	4602      	mov	r2, r0
   dffe6:	460b      	mov	r3, r1
   dffe8:	4650      	mov	r0, sl
   dffea:	4659      	mov	r1, fp
   dffec:	f002 fdbc 	bl	e2b68 <__aeabi_dsub>
   dfff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfff4:	f002 ff6c 	bl	e2ed0 <__aeabi_dmul>
   dfff8:	e703      	b.n	dfe02 <__ieee754_log+0x1fa>
   dfffa:	bf00      	nop
   dfffc:	f3af 8000 	nop.w
   e0000:	fee00000 	.word	0xfee00000
   e0004:	3fe62e42 	.word	0x3fe62e42
   e0008:	35793c76 	.word	0x35793c76
   e000c:	3dea39ef 	.word	0x3dea39ef

000e0010 <__ieee754_log10>:
   e0010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e0014:	ec55 4b10 	vmov	r4, r5, d0
   e0018:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   e001c:	b083      	sub	sp, #12
   e001e:	462b      	mov	r3, r5
   e0020:	da21      	bge.n	e0066 <__ieee754_log10+0x56>
   e0022:	ee10 2a10 	vmov	r2, s0
   e0026:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e002a:	430a      	orrs	r2, r1
   e002c:	d064      	beq.n	e00f8 <__ieee754_log10+0xe8>
   e002e:	2d00      	cmp	r5, #0
   e0030:	db6d      	blt.n	e010e <__ieee754_log10+0xfe>
   e0032:	4629      	mov	r1, r5
   e0034:	2200      	movs	r2, #0
   e0036:	4b44      	ldr	r3, [pc, #272]	; (e0148 <__ieee754_log10+0x138>)
   e0038:	ee10 0a10 	vmov	r0, s0
   e003c:	f002 ff48 	bl	e2ed0 <__aeabi_dmul>
   e0040:	460b      	mov	r3, r1
   e0042:	460d      	mov	r5, r1
   e0044:	4941      	ldr	r1, [pc, #260]	; (e014c <__ieee754_log10+0x13c>)
   e0046:	428b      	cmp	r3, r1
   e0048:	4604      	mov	r4, r0
   e004a:	f06f 0235 	mvn.w	r2, #53	; 0x35
   e004e:	dd0f      	ble.n	e0070 <__ieee754_log10+0x60>
   e0050:	4622      	mov	r2, r4
   e0052:	462b      	mov	r3, r5
   e0054:	4620      	mov	r0, r4
   e0056:	4629      	mov	r1, r5
   e0058:	f002 fd88 	bl	e2b6c <__adddf3>
   e005c:	ec41 0b10 	vmov	d0, r0, r1
   e0060:	b003      	add	sp, #12
   e0062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e0066:	4939      	ldr	r1, [pc, #228]	; (e014c <__ieee754_log10+0x13c>)
   e0068:	428b      	cmp	r3, r1
   e006a:	f04f 0200 	mov.w	r2, #0
   e006e:	dcef      	bgt.n	e0050 <__ieee754_log10+0x40>
   e0070:	1518      	asrs	r0, r3, #20
   e0072:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   e0076:	4410      	add	r0, r2
   e0078:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   e007c:	4448      	add	r0, r9
   e007e:	f3c3 0813 	ubfx	r8, r3, #0, #20
   e0082:	f002 febf 	bl	e2e04 <__aeabi_i2d>
   e0086:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   e008a:	3303      	adds	r3, #3
   e008c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   e0090:	ec45 4b10 	vmov	d0, r4, r5
   e0094:	4606      	mov	r6, r0
   e0096:	460f      	mov	r7, r1
   e0098:	f7ff fdb6 	bl	dfc08 <__ieee754_log>
   e009c:	4630      	mov	r0, r6
   e009e:	4639      	mov	r1, r7
   e00a0:	a323      	add	r3, pc, #140	; (adr r3, e0130 <__ieee754_log10+0x120>)
   e00a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e00a6:	ed8d 0b00 	vstr	d0, [sp]
   e00aa:	f002 ff11 	bl	e2ed0 <__aeabi_dmul>
   e00ae:	ed9d 0b00 	vldr	d0, [sp]
   e00b2:	4604      	mov	r4, r0
   e00b4:	460d      	mov	r5, r1
   e00b6:	a320      	add	r3, pc, #128	; (adr r3, e0138 <__ieee754_log10+0x128>)
   e00b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e00bc:	ec51 0b10 	vmov	r0, r1, d0
   e00c0:	f002 ff06 	bl	e2ed0 <__aeabi_dmul>
   e00c4:	4602      	mov	r2, r0
   e00c6:	460b      	mov	r3, r1
   e00c8:	4620      	mov	r0, r4
   e00ca:	4629      	mov	r1, r5
   e00cc:	f002 fd4e 	bl	e2b6c <__adddf3>
   e00d0:	a31b      	add	r3, pc, #108	; (adr r3, e0140 <__ieee754_log10+0x130>)
   e00d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e00d6:	4604      	mov	r4, r0
   e00d8:	460d      	mov	r5, r1
   e00da:	4630      	mov	r0, r6
   e00dc:	4639      	mov	r1, r7
   e00de:	f002 fef7 	bl	e2ed0 <__aeabi_dmul>
   e00e2:	4602      	mov	r2, r0
   e00e4:	460b      	mov	r3, r1
   e00e6:	4620      	mov	r0, r4
   e00e8:	4629      	mov	r1, r5
   e00ea:	f002 fd3f 	bl	e2b6c <__adddf3>
   e00ee:	ec41 0b10 	vmov	d0, r0, r1
   e00f2:	b003      	add	sp, #12
   e00f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e00f8:	2200      	movs	r2, #0
   e00fa:	2300      	movs	r3, #0
   e00fc:	2000      	movs	r0, #0
   e00fe:	4914      	ldr	r1, [pc, #80]	; (e0150 <__ieee754_log10+0x140>)
   e0100:	f003 f810 	bl	e3124 <__aeabi_ddiv>
   e0104:	ec41 0b10 	vmov	d0, r0, r1
   e0108:	b003      	add	sp, #12
   e010a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e010e:	ee10 2a10 	vmov	r2, s0
   e0112:	462b      	mov	r3, r5
   e0114:	4620      	mov	r0, r4
   e0116:	4629      	mov	r1, r5
   e0118:	f002 fd26 	bl	e2b68 <__aeabi_dsub>
   e011c:	2200      	movs	r2, #0
   e011e:	2300      	movs	r3, #0
   e0120:	f003 f800 	bl	e3124 <__aeabi_ddiv>
   e0124:	ec41 0b10 	vmov	d0, r0, r1
   e0128:	e79a      	b.n	e0060 <__ieee754_log10+0x50>
   e012a:	bf00      	nop
   e012c:	f3af 8000 	nop.w
   e0130:	11f12b36 	.word	0x11f12b36
   e0134:	3d59fef3 	.word	0x3d59fef3
   e0138:	1526e50e 	.word	0x1526e50e
   e013c:	3fdbcb7b 	.word	0x3fdbcb7b
   e0140:	509f6000 	.word	0x509f6000
   e0144:	3fd34413 	.word	0x3fd34413
   e0148:	43500000 	.word	0x43500000
   e014c:	7fefffff 	.word	0x7fefffff
   e0150:	c3500000 	.word	0xc3500000
   e0154:	00000000 	.word	0x00000000

000e0158 <__ieee754_pow>:
   e0158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e015c:	ec51 0b11 	vmov	r0, r1, d1
   e0160:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e0164:	ea58 0400 	orrs.w	r4, r8, r0
   e0168:	b093      	sub	sp, #76	; 0x4c
   e016a:	d03c      	beq.n	e01e6 <__ieee754_pow+0x8e>
   e016c:	ec53 2b10 	vmov	r2, r3, d0
   e0170:	4e6d      	ldr	r6, [pc, #436]	; (e0328 <__ieee754_pow+0x1d0>)
   e0172:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   e0176:	42b4      	cmp	r4, r6
   e0178:	ee10 aa10 	vmov	sl, s0
   e017c:	461d      	mov	r5, r3
   e017e:	dc2b      	bgt.n	e01d8 <__ieee754_pow+0x80>
   e0180:	4689      	mov	r9, r1
   e0182:	ee11 ea10 	vmov	lr, s2
   e0186:	d026      	beq.n	e01d6 <__ieee754_pow+0x7e>
   e0188:	45b0      	cmp	r8, r6
   e018a:	dc25      	bgt.n	e01d8 <__ieee754_pow+0x80>
   e018c:	4e66      	ldr	r6, [pc, #408]	; (e0328 <__ieee754_pow+0x1d0>)
   e018e:	45b0      	cmp	r8, r6
   e0190:	d077      	beq.n	e0282 <__ieee754_pow+0x12a>
   e0192:	2d00      	cmp	r5, #0
   e0194:	4616      	mov	r6, r2
   e0196:	461f      	mov	r7, r3
   e0198:	e9cd 0100 	strd	r0, r1, [sp]
   e019c:	db75      	blt.n	e028a <__ieee754_pow+0x132>
   e019e:	f04f 0b00 	mov.w	fp, #0
   e01a2:	f1be 0f00 	cmp.w	lr, #0
   e01a6:	d12d      	bne.n	e0204 <__ieee754_pow+0xac>
   e01a8:	4b5f      	ldr	r3, [pc, #380]	; (e0328 <__ieee754_pow+0x1d0>)
   e01aa:	4598      	cmp	r8, r3
   e01ac:	f000 8089 	beq.w	e02c2 <__ieee754_pow+0x16a>
   e01b0:	4b5e      	ldr	r3, [pc, #376]	; (e032c <__ieee754_pow+0x1d4>)
   e01b2:	4598      	cmp	r8, r3
   e01b4:	d05e      	beq.n	e0274 <__ieee754_pow+0x11c>
   e01b6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   e01ba:	f000 83de 	beq.w	e097a <__ieee754_pow+0x822>
   e01be:	4b5c      	ldr	r3, [pc, #368]	; (e0330 <__ieee754_pow+0x1d8>)
   e01c0:	4599      	cmp	r9, r3
   e01c2:	d11f      	bne.n	e0204 <__ieee754_pow+0xac>
   e01c4:	2d00      	cmp	r5, #0
   e01c6:	db1d      	blt.n	e0204 <__ieee754_pow+0xac>
   e01c8:	ec47 6b10 	vmov	d0, r6, r7
   e01cc:	b013      	add	sp, #76	; 0x4c
   e01ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e01d2:	f001 b855 	b.w	e1280 <__ieee754_sqrt>
   e01d6:	b15a      	cbz	r2, e01f0 <__ieee754_pow+0x98>
   e01d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e01dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e01e0:	ea54 030a 	orrs.w	r3, r4, sl
   e01e4:	d106      	bne.n	e01f4 <__ieee754_pow+0x9c>
   e01e6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; e0310 <__ieee754_pow+0x1b8>
   e01ea:	b013      	add	sp, #76	; 0x4c
   e01ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e01f0:	45a0      	cmp	r8, r4
   e01f2:	ddcb      	ble.n	e018c <__ieee754_pow+0x34>
   e01f4:	484f      	ldr	r0, [pc, #316]	; (e0334 <__ieee754_pow+0x1dc>)
   e01f6:	b013      	add	sp, #76	; 0x4c
   e01f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e01fc:	f002 bb80 	b.w	e2900 <nan>
   e0200:	f04f 0b00 	mov.w	fp, #0
   e0204:	ec47 6b10 	vmov	d0, r6, r7
   e0208:	f7fd fc5a 	bl	ddac0 <fabs>
   e020c:	ec51 0b10 	vmov	r0, r1, d0
   e0210:	f1ba 0f00 	cmp.w	sl, #0
   e0214:	d01e      	beq.n	e0254 <__ieee754_pow+0xfc>
   e0216:	0fed      	lsrs	r5, r5, #31
   e0218:	f105 3aff 	add.w	sl, r5, #4294967295
   e021c:	ea5b 030a 	orrs.w	r3, fp, sl
   e0220:	d063      	beq.n	e02ea <__ieee754_pow+0x192>
   e0222:	4b45      	ldr	r3, [pc, #276]	; (e0338 <__ieee754_pow+0x1e0>)
   e0224:	4598      	cmp	r8, r3
   e0226:	f340 808d 	ble.w	e0344 <__ieee754_pow+0x1ec>
   e022a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   e022e:	4598      	cmp	r8, r3
   e0230:	f340 8438 	ble.w	e0aa4 <__ieee754_pow+0x94c>
   e0234:	4b41      	ldr	r3, [pc, #260]	; (e033c <__ieee754_pow+0x1e4>)
   e0236:	429c      	cmp	r4, r3
   e0238:	dd62      	ble.n	e0300 <__ieee754_pow+0x1a8>
   e023a:	f1b9 0f00 	cmp.w	r9, #0
   e023e:	dd62      	ble.n	e0306 <__ieee754_pow+0x1ae>
   e0240:	a335      	add	r3, pc, #212	; (adr r3, e0318 <__ieee754_pow+0x1c0>)
   e0242:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0246:	4610      	mov	r0, r2
   e0248:	4619      	mov	r1, r3
   e024a:	f002 fe41 	bl	e2ed0 <__aeabi_dmul>
   e024e:	ec41 0b10 	vmov	d0, r0, r1
   e0252:	e7ca      	b.n	e01ea <__ieee754_pow+0x92>
   e0254:	b124      	cbz	r4, e0260 <__ieee754_pow+0x108>
   e0256:	4b35      	ldr	r3, [pc, #212]	; (e032c <__ieee754_pow+0x1d4>)
   e0258:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   e025c:	429a      	cmp	r2, r3
   e025e:	d1da      	bne.n	e0216 <__ieee754_pow+0xbe>
   e0260:	f1b9 0f00 	cmp.w	r9, #0
   e0264:	f2c0 83cb 	blt.w	e09fe <__ieee754_pow+0x8a6>
   e0268:	2d00      	cmp	r5, #0
   e026a:	f2c0 8374 	blt.w	e0956 <__ieee754_pow+0x7fe>
   e026e:	ec41 0b10 	vmov	d0, r0, r1
   e0272:	e7ba      	b.n	e01ea <__ieee754_pow+0x92>
   e0274:	f1b9 0f00 	cmp.w	r9, #0
   e0278:	f2c0 847a 	blt.w	e0b70 <__ieee754_pow+0xa18>
   e027c:	ec47 6b10 	vmov	d0, r6, r7
   e0280:	e7b3      	b.n	e01ea <__ieee754_pow+0x92>
   e0282:	f1be 0f00 	cmp.w	lr, #0
   e0286:	d084      	beq.n	e0192 <__ieee754_pow+0x3a>
   e0288:	e7a6      	b.n	e01d8 <__ieee754_pow+0x80>
   e028a:	4b2d      	ldr	r3, [pc, #180]	; (e0340 <__ieee754_pow+0x1e8>)
   e028c:	4598      	cmp	r8, r3
   e028e:	dc29      	bgt.n	e02e4 <__ieee754_pow+0x18c>
   e0290:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   e0294:	4598      	cmp	r8, r3
   e0296:	dd82      	ble.n	e019e <__ieee754_pow+0x46>
   e0298:	ea4f 5328 	mov.w	r3, r8, asr #20
   e029c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e02a0:	2b14      	cmp	r3, #20
   e02a2:	f340 847f 	ble.w	e0ba4 <__ieee754_pow+0xa4c>
   e02a6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   e02aa:	fa2e f203 	lsr.w	r2, lr, r3
   e02ae:	fa02 f303 	lsl.w	r3, r2, r3
   e02b2:	459e      	cmp	lr, r3
   e02b4:	f47f af73 	bne.w	e019e <__ieee754_pow+0x46>
   e02b8:	f002 0201 	and.w	r2, r2, #1
   e02bc:	f1c2 0b02 	rsb	fp, r2, #2
   e02c0:	e76f      	b.n	e01a2 <__ieee754_pow+0x4a>
   e02c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   e02c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   e02ca:	ea53 030a 	orrs.w	r3, r3, sl
   e02ce:	d08a      	beq.n	e01e6 <__ieee754_pow+0x8e>
   e02d0:	4b1a      	ldr	r3, [pc, #104]	; (e033c <__ieee754_pow+0x1e4>)
   e02d2:	429c      	cmp	r4, r3
   e02d4:	f340 8385 	ble.w	e09e2 <__ieee754_pow+0x88a>
   e02d8:	f1b9 0f00 	cmp.w	r9, #0
   e02dc:	db13      	blt.n	e0306 <__ieee754_pow+0x1ae>
   e02de:	ed9d 0b00 	vldr	d0, [sp]
   e02e2:	e782      	b.n	e01ea <__ieee754_pow+0x92>
   e02e4:	f04f 0b02 	mov.w	fp, #2
   e02e8:	e75b      	b.n	e01a2 <__ieee754_pow+0x4a>
   e02ea:	4632      	mov	r2, r6
   e02ec:	463b      	mov	r3, r7
   e02ee:	4610      	mov	r0, r2
   e02f0:	4619      	mov	r1, r3
   e02f2:	f002 fc39 	bl	e2b68 <__aeabi_dsub>
   e02f6:	4602      	mov	r2, r0
   e02f8:	460b      	mov	r3, r1
   e02fa:	f002 ff13 	bl	e3124 <__aeabi_ddiv>
   e02fe:	e7b6      	b.n	e026e <__ieee754_pow+0x116>
   e0300:	f1b9 0f00 	cmp.w	r9, #0
   e0304:	db9c      	blt.n	e0240 <__ieee754_pow+0xe8>
   e0306:	ed9f 0b06 	vldr	d0, [pc, #24]	; e0320 <__ieee754_pow+0x1c8>
   e030a:	e76e      	b.n	e01ea <__ieee754_pow+0x92>
   e030c:	f3af 8000 	nop.w
   e0310:	00000000 	.word	0x00000000
   e0314:	3ff00000 	.word	0x3ff00000
   e0318:	8800759c 	.word	0x8800759c
   e031c:	7e37e43c 	.word	0x7e37e43c
	...
   e0328:	7ff00000 	.word	0x7ff00000
   e032c:	3ff00000 	.word	0x3ff00000
   e0330:	3fe00000 	.word	0x3fe00000
   e0334:	000e8308 	.word	0x000e8308
   e0338:	41e00000 	.word	0x41e00000
   e033c:	3fefffff 	.word	0x3fefffff
   e0340:	433fffff 	.word	0x433fffff
   e0344:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   e0348:	f04f 0200 	mov.w	r2, #0
   e034c:	da05      	bge.n	e035a <__ieee754_pow+0x202>
   e034e:	4bd6      	ldr	r3, [pc, #856]	; (e06a8 <__ieee754_pow+0x550>)
   e0350:	f002 fdbe 	bl	e2ed0 <__aeabi_dmul>
   e0354:	f06f 0234 	mvn.w	r2, #52	; 0x34
   e0358:	460c      	mov	r4, r1
   e035a:	1523      	asrs	r3, r4, #20
   e035c:	4ed3      	ldr	r6, [pc, #844]	; (e06ac <__ieee754_pow+0x554>)
   e035e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   e0362:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e0366:	4413      	add	r3, r2
   e0368:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   e036c:	42b4      	cmp	r4, r6
   e036e:	461a      	mov	r2, r3
   e0370:	930d      	str	r3, [sp, #52]	; 0x34
   e0372:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   e0376:	f340 8349 	ble.w	e0a0c <__ieee754_pow+0x8b4>
   e037a:	4bcd      	ldr	r3, [pc, #820]	; (e06b0 <__ieee754_pow+0x558>)
   e037c:	429c      	cmp	r4, r3
   e037e:	f340 842d 	ble.w	e0bdc <__ieee754_pow+0xa84>
   e0382:	ed9f 7bb3 	vldr	d7, [pc, #716]	; e0650 <__ieee754_pow+0x4f8>
   e0386:	ed8d 7b08 	vstr	d7, [sp, #32]
   e038a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e038e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; e0658 <__ieee754_pow+0x500>
   e0392:	4613      	mov	r3, r2
   e0394:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0398:	3301      	adds	r3, #1
   e039a:	930d      	str	r3, [sp, #52]	; 0x34
   e039c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   e03a0:	f04f 0800 	mov.w	r8, #0
   e03a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e03a8:	4629      	mov	r1, r5
   e03aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e03ae:	f002 fbdb 	bl	e2b68 <__aeabi_dsub>
   e03b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e03b6:	4606      	mov	r6, r0
   e03b8:	460f      	mov	r7, r1
   e03ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e03be:	f002 fbd5 	bl	e2b6c <__adddf3>
   e03c2:	4602      	mov	r2, r0
   e03c4:	460b      	mov	r3, r1
   e03c6:	2000      	movs	r0, #0
   e03c8:	49ba      	ldr	r1, [pc, #744]	; (e06b4 <__ieee754_pow+0x55c>)
   e03ca:	f002 feab 	bl	e3124 <__aeabi_ddiv>
   e03ce:	4603      	mov	r3, r0
   e03d0:	460c      	mov	r4, r1
   e03d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   e03d6:	4602      	mov	r2, r0
   e03d8:	460b      	mov	r3, r1
   e03da:	4630      	mov	r0, r6
   e03dc:	4639      	mov	r1, r7
   e03de:	f002 fd77 	bl	e2ed0 <__aeabi_dmul>
   e03e2:	106b      	asrs	r3, r5, #1
   e03e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   e03e8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   e03ec:	eb03 0508 	add.w	r5, r3, r8
   e03f0:	460a      	mov	r2, r1
   e03f2:	2300      	movs	r3, #0
   e03f4:	4601      	mov	r1, r0
   e03f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   e03fa:	9302      	str	r3, [sp, #8]
   e03fc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   e0400:	2400      	movs	r4, #0
   e0402:	e9cd 1204 	strd	r1, r2, [sp, #16]
   e0406:	462b      	mov	r3, r5
   e0408:	4622      	mov	r2, r4
   e040a:	4640      	mov	r0, r8
   e040c:	4649      	mov	r1, r9
   e040e:	f002 fd5f 	bl	e2ed0 <__aeabi_dmul>
   e0412:	4602      	mov	r2, r0
   e0414:	460b      	mov	r3, r1
   e0416:	4630      	mov	r0, r6
   e0418:	4639      	mov	r1, r7
   e041a:	f002 fba5 	bl	e2b68 <__aeabi_dsub>
   e041e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0422:	4606      	mov	r6, r0
   e0424:	460f      	mov	r7, r1
   e0426:	4620      	mov	r0, r4
   e0428:	4629      	mov	r1, r5
   e042a:	f002 fb9d 	bl	e2b68 <__aeabi_dsub>
   e042e:	4602      	mov	r2, r0
   e0430:	460b      	mov	r3, r1
   e0432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0436:	f002 fb97 	bl	e2b68 <__aeabi_dsub>
   e043a:	4642      	mov	r2, r8
   e043c:	464b      	mov	r3, r9
   e043e:	f002 fd47 	bl	e2ed0 <__aeabi_dmul>
   e0442:	4602      	mov	r2, r0
   e0444:	460b      	mov	r3, r1
   e0446:	4630      	mov	r0, r6
   e0448:	4639      	mov	r1, r7
   e044a:	f002 fb8d 	bl	e2b68 <__aeabi_dsub>
   e044e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   e0452:	f002 fd3d 	bl	e2ed0 <__aeabi_dmul>
   e0456:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e045a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e045e:	4622      	mov	r2, r4
   e0460:	462b      	mov	r3, r5
   e0462:	4620      	mov	r0, r4
   e0464:	4629      	mov	r1, r5
   e0466:	f002 fd33 	bl	e2ed0 <__aeabi_dmul>
   e046a:	a37d      	add	r3, pc, #500	; (adr r3, e0660 <__ieee754_pow+0x508>)
   e046c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0470:	4604      	mov	r4, r0
   e0472:	460d      	mov	r5, r1
   e0474:	f002 fd2c 	bl	e2ed0 <__aeabi_dmul>
   e0478:	a37b      	add	r3, pc, #492	; (adr r3, e0668 <__ieee754_pow+0x510>)
   e047a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e047e:	f002 fb75 	bl	e2b6c <__adddf3>
   e0482:	4622      	mov	r2, r4
   e0484:	462b      	mov	r3, r5
   e0486:	f002 fd23 	bl	e2ed0 <__aeabi_dmul>
   e048a:	a379      	add	r3, pc, #484	; (adr r3, e0670 <__ieee754_pow+0x518>)
   e048c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0490:	f002 fb6c 	bl	e2b6c <__adddf3>
   e0494:	4622      	mov	r2, r4
   e0496:	462b      	mov	r3, r5
   e0498:	f002 fd1a 	bl	e2ed0 <__aeabi_dmul>
   e049c:	a376      	add	r3, pc, #472	; (adr r3, e0678 <__ieee754_pow+0x520>)
   e049e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04a2:	f002 fb63 	bl	e2b6c <__adddf3>
   e04a6:	4622      	mov	r2, r4
   e04a8:	462b      	mov	r3, r5
   e04aa:	f002 fd11 	bl	e2ed0 <__aeabi_dmul>
   e04ae:	a374      	add	r3, pc, #464	; (adr r3, e0680 <__ieee754_pow+0x528>)
   e04b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04b4:	f002 fb5a 	bl	e2b6c <__adddf3>
   e04b8:	4622      	mov	r2, r4
   e04ba:	462b      	mov	r3, r5
   e04bc:	f002 fd08 	bl	e2ed0 <__aeabi_dmul>
   e04c0:	a371      	add	r3, pc, #452	; (adr r3, e0688 <__ieee754_pow+0x530>)
   e04c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04c6:	f002 fb51 	bl	e2b6c <__adddf3>
   e04ca:	4622      	mov	r2, r4
   e04cc:	4606      	mov	r6, r0
   e04ce:	460f      	mov	r7, r1
   e04d0:	462b      	mov	r3, r5
   e04d2:	4620      	mov	r0, r4
   e04d4:	4629      	mov	r1, r5
   e04d6:	f002 fcfb 	bl	e2ed0 <__aeabi_dmul>
   e04da:	4602      	mov	r2, r0
   e04dc:	460b      	mov	r3, r1
   e04de:	4630      	mov	r0, r6
   e04e0:	4639      	mov	r1, r7
   e04e2:	f002 fcf5 	bl	e2ed0 <__aeabi_dmul>
   e04e6:	4642      	mov	r2, r8
   e04e8:	4604      	mov	r4, r0
   e04ea:	460d      	mov	r5, r1
   e04ec:	464b      	mov	r3, r9
   e04ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e04f2:	f002 fb3b 	bl	e2b6c <__adddf3>
   e04f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e04fa:	f002 fce9 	bl	e2ed0 <__aeabi_dmul>
   e04fe:	4622      	mov	r2, r4
   e0500:	462b      	mov	r3, r5
   e0502:	f002 fb33 	bl	e2b6c <__adddf3>
   e0506:	4642      	mov	r2, r8
   e0508:	4606      	mov	r6, r0
   e050a:	460f      	mov	r7, r1
   e050c:	464b      	mov	r3, r9
   e050e:	4640      	mov	r0, r8
   e0510:	4649      	mov	r1, r9
   e0512:	f002 fcdd 	bl	e2ed0 <__aeabi_dmul>
   e0516:	2200      	movs	r2, #0
   e0518:	4b67      	ldr	r3, [pc, #412]	; (e06b8 <__ieee754_pow+0x560>)
   e051a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e051e:	f002 fb25 	bl	e2b6c <__adddf3>
   e0522:	4632      	mov	r2, r6
   e0524:	463b      	mov	r3, r7
   e0526:	f002 fb21 	bl	e2b6c <__adddf3>
   e052a:	9802      	ldr	r0, [sp, #8]
   e052c:	460d      	mov	r5, r1
   e052e:	4604      	mov	r4, r0
   e0530:	4622      	mov	r2, r4
   e0532:	462b      	mov	r3, r5
   e0534:	4640      	mov	r0, r8
   e0536:	4649      	mov	r1, r9
   e0538:	f002 fcca 	bl	e2ed0 <__aeabi_dmul>
   e053c:	2200      	movs	r2, #0
   e053e:	4680      	mov	r8, r0
   e0540:	4689      	mov	r9, r1
   e0542:	4b5d      	ldr	r3, [pc, #372]	; (e06b8 <__ieee754_pow+0x560>)
   e0544:	4620      	mov	r0, r4
   e0546:	4629      	mov	r1, r5
   e0548:	f002 fb0e 	bl	e2b68 <__aeabi_dsub>
   e054c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0550:	f002 fb0a 	bl	e2b68 <__aeabi_dsub>
   e0554:	4602      	mov	r2, r0
   e0556:	460b      	mov	r3, r1
   e0558:	4630      	mov	r0, r6
   e055a:	4639      	mov	r1, r7
   e055c:	f002 fb04 	bl	e2b68 <__aeabi_dsub>
   e0560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e0564:	f002 fcb4 	bl	e2ed0 <__aeabi_dmul>
   e0568:	4622      	mov	r2, r4
   e056a:	4606      	mov	r6, r0
   e056c:	460f      	mov	r7, r1
   e056e:	462b      	mov	r3, r5
   e0570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0574:	f002 fcac 	bl	e2ed0 <__aeabi_dmul>
   e0578:	4602      	mov	r2, r0
   e057a:	460b      	mov	r3, r1
   e057c:	4630      	mov	r0, r6
   e057e:	4639      	mov	r1, r7
   e0580:	f002 faf4 	bl	e2b6c <__adddf3>
   e0584:	4606      	mov	r6, r0
   e0586:	460f      	mov	r7, r1
   e0588:	4602      	mov	r2, r0
   e058a:	460b      	mov	r3, r1
   e058c:	4640      	mov	r0, r8
   e058e:	4649      	mov	r1, r9
   e0590:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0594:	f002 faea 	bl	e2b6c <__adddf3>
   e0598:	9802      	ldr	r0, [sp, #8]
   e059a:	a33d      	add	r3, pc, #244	; (adr r3, e0690 <__ieee754_pow+0x538>)
   e059c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05a0:	4604      	mov	r4, r0
   e05a2:	460d      	mov	r5, r1
   e05a4:	f002 fc94 	bl	e2ed0 <__aeabi_dmul>
   e05a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e05ac:	4680      	mov	r8, r0
   e05ae:	4689      	mov	r9, r1
   e05b0:	4620      	mov	r0, r4
   e05b2:	4629      	mov	r1, r5
   e05b4:	f002 fad8 	bl	e2b68 <__aeabi_dsub>
   e05b8:	4602      	mov	r2, r0
   e05ba:	460b      	mov	r3, r1
   e05bc:	4630      	mov	r0, r6
   e05be:	4639      	mov	r1, r7
   e05c0:	f002 fad2 	bl	e2b68 <__aeabi_dsub>
   e05c4:	a334      	add	r3, pc, #208	; (adr r3, e0698 <__ieee754_pow+0x540>)
   e05c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05ca:	f002 fc81 	bl	e2ed0 <__aeabi_dmul>
   e05ce:	a334      	add	r3, pc, #208	; (adr r3, e06a0 <__ieee754_pow+0x548>)
   e05d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05d4:	4606      	mov	r6, r0
   e05d6:	460f      	mov	r7, r1
   e05d8:	4620      	mov	r0, r4
   e05da:	4629      	mov	r1, r5
   e05dc:	f002 fc78 	bl	e2ed0 <__aeabi_dmul>
   e05e0:	4602      	mov	r2, r0
   e05e2:	460b      	mov	r3, r1
   e05e4:	4630      	mov	r0, r6
   e05e6:	4639      	mov	r1, r7
   e05e8:	f002 fac0 	bl	e2b6c <__adddf3>
   e05ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   e05f0:	f002 fabc 	bl	e2b6c <__adddf3>
   e05f4:	4606      	mov	r6, r0
   e05f6:	980d      	ldr	r0, [sp, #52]	; 0x34
   e05f8:	460f      	mov	r7, r1
   e05fa:	f002 fc03 	bl	e2e04 <__aeabi_i2d>
   e05fe:	4632      	mov	r2, r6
   e0600:	4604      	mov	r4, r0
   e0602:	460d      	mov	r5, r1
   e0604:	463b      	mov	r3, r7
   e0606:	4640      	mov	r0, r8
   e0608:	4649      	mov	r1, r9
   e060a:	f002 faaf 	bl	e2b6c <__adddf3>
   e060e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0612:	f002 faab 	bl	e2b6c <__adddf3>
   e0616:	4622      	mov	r2, r4
   e0618:	462b      	mov	r3, r5
   e061a:	f002 faa7 	bl	e2b6c <__adddf3>
   e061e:	9802      	ldr	r0, [sp, #8]
   e0620:	4622      	mov	r2, r4
   e0622:	462b      	mov	r3, r5
   e0624:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0628:	f002 fa9e 	bl	e2b68 <__aeabi_dsub>
   e062c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0630:	f002 fa9a 	bl	e2b68 <__aeabi_dsub>
   e0634:	4642      	mov	r2, r8
   e0636:	464b      	mov	r3, r9
   e0638:	f002 fa96 	bl	e2b68 <__aeabi_dsub>
   e063c:	4602      	mov	r2, r0
   e063e:	460b      	mov	r3, r1
   e0640:	4630      	mov	r0, r6
   e0642:	4639      	mov	r1, r7
   e0644:	f002 fa90 	bl	e2b68 <__aeabi_dsub>
   e0648:	4680      	mov	r8, r0
   e064a:	4689      	mov	r9, r1
   e064c:	e036      	b.n	e06bc <__ieee754_pow+0x564>
   e064e:	bf00      	nop
	...
   e065c:	3ff00000 	.word	0x3ff00000
   e0660:	4a454eef 	.word	0x4a454eef
   e0664:	3fca7e28 	.word	0x3fca7e28
   e0668:	93c9db65 	.word	0x93c9db65
   e066c:	3fcd864a 	.word	0x3fcd864a
   e0670:	a91d4101 	.word	0xa91d4101
   e0674:	3fd17460 	.word	0x3fd17460
   e0678:	518f264d 	.word	0x518f264d
   e067c:	3fd55555 	.word	0x3fd55555
   e0680:	db6fabff 	.word	0xdb6fabff
   e0684:	3fdb6db6 	.word	0x3fdb6db6
   e0688:	33333303 	.word	0x33333303
   e068c:	3fe33333 	.word	0x3fe33333
   e0690:	e0000000 	.word	0xe0000000
   e0694:	3feec709 	.word	0x3feec709
   e0698:	dc3a03fd 	.word	0xdc3a03fd
   e069c:	3feec709 	.word	0x3feec709
   e06a0:	145b01f5 	.word	0x145b01f5
   e06a4:	be3e2fe0 	.word	0xbe3e2fe0
   e06a8:	43400000 	.word	0x43400000
   e06ac:	0003988e 	.word	0x0003988e
   e06b0:	000bb679 	.word	0x000bb679
   e06b4:	3ff00000 	.word	0x3ff00000
   e06b8:	40080000 	.word	0x40080000
   e06bc:	f10b 33ff 	add.w	r3, fp, #4294967295
   e06c0:	ea53 030a 	orrs.w	r3, r3, sl
   e06c4:	f000 8188 	beq.w	e09d8 <__ieee754_pow+0x880>
   e06c8:	ed9f 7bd7 	vldr	d7, [pc, #860]	; e0a28 <__ieee754_pow+0x8d0>
   e06cc:	ed8d 7b06 	vstr	d7, [sp, #24]
   e06d0:	e9dd ab00 	ldrd	sl, fp, [sp]
   e06d4:	4653      	mov	r3, sl
   e06d6:	465c      	mov	r4, fp
   e06d8:	e9cd 3400 	strd	r3, r4, [sp]
   e06dc:	2300      	movs	r3, #0
   e06de:	9300      	str	r3, [sp, #0]
   e06e0:	e9dd 4500 	ldrd	r4, r5, [sp]
   e06e4:	4650      	mov	r0, sl
   e06e6:	4622      	mov	r2, r4
   e06e8:	462b      	mov	r3, r5
   e06ea:	4659      	mov	r1, fp
   e06ec:	f002 fa3c 	bl	e2b68 <__aeabi_dsub>
   e06f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e06f4:	f002 fbec 	bl	e2ed0 <__aeabi_dmul>
   e06f8:	4652      	mov	r2, sl
   e06fa:	4606      	mov	r6, r0
   e06fc:	460f      	mov	r7, r1
   e06fe:	465b      	mov	r3, fp
   e0700:	4640      	mov	r0, r8
   e0702:	4649      	mov	r1, r9
   e0704:	f002 fbe4 	bl	e2ed0 <__aeabi_dmul>
   e0708:	4602      	mov	r2, r0
   e070a:	460b      	mov	r3, r1
   e070c:	4630      	mov	r0, r6
   e070e:	4639      	mov	r1, r7
   e0710:	f002 fa2c 	bl	e2b6c <__adddf3>
   e0714:	4622      	mov	r2, r4
   e0716:	4680      	mov	r8, r0
   e0718:	4689      	mov	r9, r1
   e071a:	462b      	mov	r3, r5
   e071c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0720:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0724:	f002 fbd4 	bl	e2ed0 <__aeabi_dmul>
   e0728:	460b      	mov	r3, r1
   e072a:	4602      	mov	r2, r0
   e072c:	4606      	mov	r6, r0
   e072e:	460f      	mov	r7, r1
   e0730:	4640      	mov	r0, r8
   e0732:	4649      	mov	r1, r9
   e0734:	f002 fa1a 	bl	e2b6c <__adddf3>
   e0738:	4bd5      	ldr	r3, [pc, #852]	; (e0a90 <__ieee754_pow+0x938>)
   e073a:	4299      	cmp	r1, r3
   e073c:	4604      	mov	r4, r0
   e073e:	460d      	mov	r5, r1
   e0740:	468a      	mov	sl, r1
   e0742:	f340 8123 	ble.w	e098c <__ieee754_pow+0x834>
   e0746:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   e074a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   e074e:	4303      	orrs	r3, r0
   e0750:	f040 8218 	bne.w	e0b84 <__ieee754_pow+0xa2c>
   e0754:	a3b6      	add	r3, pc, #728	; (adr r3, e0a30 <__ieee754_pow+0x8d8>)
   e0756:	e9d3 2300 	ldrd	r2, r3, [r3]
   e075a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e075e:	f002 fa05 	bl	e2b6c <__adddf3>
   e0762:	4632      	mov	r2, r6
   e0764:	4680      	mov	r8, r0
   e0766:	4689      	mov	r9, r1
   e0768:	463b      	mov	r3, r7
   e076a:	4620      	mov	r0, r4
   e076c:	4629      	mov	r1, r5
   e076e:	f002 f9fb 	bl	e2b68 <__aeabi_dsub>
   e0772:	4602      	mov	r2, r0
   e0774:	460b      	mov	r3, r1
   e0776:	4640      	mov	r0, r8
   e0778:	4649      	mov	r1, r9
   e077a:	f002 fe39 	bl	e33f0 <__aeabi_dcmpgt>
   e077e:	2800      	cmp	r0, #0
   e0780:	f040 8200 	bne.w	e0b84 <__ieee754_pow+0xa2c>
   e0784:	46a8      	mov	r8, r5
   e0786:	ea4f 5328 	mov.w	r3, r8, asr #20
   e078a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   e078e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   e0792:	fa42 f303 	asr.w	r3, r2, r3
   e0796:	4453      	add	r3, sl
   e0798:	f3c3 520a 	ubfx	r2, r3, #20, #11
   e079c:	4dbd      	ldr	r5, [pc, #756]	; (e0a94 <__ieee754_pow+0x93c>)
   e079e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   e07a2:	4115      	asrs	r5, r2
   e07a4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   e07a8:	2000      	movs	r0, #0
   e07aa:	f1c2 0414 	rsb	r4, r2, #20
   e07ae:	ea23 0105 	bic.w	r1, r3, r5
   e07b2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   e07b6:	f1ba 0f00 	cmp.w	sl, #0
   e07ba:	4602      	mov	r2, r0
   e07bc:	460b      	mov	r3, r1
   e07be:	fa4b fb04 	asr.w	fp, fp, r4
   e07c2:	4630      	mov	r0, r6
   e07c4:	4639      	mov	r1, r7
   e07c6:	bfb8      	it	lt
   e07c8:	f1cb 0b00 	rsblt	fp, fp, #0
   e07cc:	f002 f9cc 	bl	e2b68 <__aeabi_dsub>
   e07d0:	4602      	mov	r2, r0
   e07d2:	460b      	mov	r3, r1
   e07d4:	4606      	mov	r6, r0
   e07d6:	460f      	mov	r7, r1
   e07d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e07dc:	f002 f9c6 	bl	e2b6c <__adddf3>
   e07e0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   e07e4:	2400      	movs	r4, #0
   e07e6:	a394      	add	r3, pc, #592	; (adr r3, e0a38 <__ieee754_pow+0x8e0>)
   e07e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e07ec:	4620      	mov	r0, r4
   e07ee:	460d      	mov	r5, r1
   e07f0:	f002 fb6e 	bl	e2ed0 <__aeabi_dmul>
   e07f4:	4632      	mov	r2, r6
   e07f6:	4680      	mov	r8, r0
   e07f8:	4689      	mov	r9, r1
   e07fa:	463b      	mov	r3, r7
   e07fc:	4620      	mov	r0, r4
   e07fe:	4629      	mov	r1, r5
   e0800:	f002 f9b2 	bl	e2b68 <__aeabi_dsub>
   e0804:	4602      	mov	r2, r0
   e0806:	460b      	mov	r3, r1
   e0808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e080c:	f002 f9ac 	bl	e2b68 <__aeabi_dsub>
   e0810:	a38b      	add	r3, pc, #556	; (adr r3, e0a40 <__ieee754_pow+0x8e8>)
   e0812:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0816:	f002 fb5b 	bl	e2ed0 <__aeabi_dmul>
   e081a:	a38b      	add	r3, pc, #556	; (adr r3, e0a48 <__ieee754_pow+0x8f0>)
   e081c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0820:	4606      	mov	r6, r0
   e0822:	460f      	mov	r7, r1
   e0824:	4620      	mov	r0, r4
   e0826:	4629      	mov	r1, r5
   e0828:	f002 fb52 	bl	e2ed0 <__aeabi_dmul>
   e082c:	4602      	mov	r2, r0
   e082e:	460b      	mov	r3, r1
   e0830:	4630      	mov	r0, r6
   e0832:	4639      	mov	r1, r7
   e0834:	f002 f99a 	bl	e2b6c <__adddf3>
   e0838:	4606      	mov	r6, r0
   e083a:	460f      	mov	r7, r1
   e083c:	4602      	mov	r2, r0
   e083e:	460b      	mov	r3, r1
   e0840:	4640      	mov	r0, r8
   e0842:	4649      	mov	r1, r9
   e0844:	f002 f992 	bl	e2b6c <__adddf3>
   e0848:	4642      	mov	r2, r8
   e084a:	464b      	mov	r3, r9
   e084c:	4604      	mov	r4, r0
   e084e:	460d      	mov	r5, r1
   e0850:	f002 f98a 	bl	e2b68 <__aeabi_dsub>
   e0854:	4602      	mov	r2, r0
   e0856:	460b      	mov	r3, r1
   e0858:	4630      	mov	r0, r6
   e085a:	4639      	mov	r1, r7
   e085c:	f002 f984 	bl	e2b68 <__aeabi_dsub>
   e0860:	4622      	mov	r2, r4
   e0862:	4680      	mov	r8, r0
   e0864:	4689      	mov	r9, r1
   e0866:	462b      	mov	r3, r5
   e0868:	4620      	mov	r0, r4
   e086a:	4629      	mov	r1, r5
   e086c:	f002 fb30 	bl	e2ed0 <__aeabi_dmul>
   e0870:	a377      	add	r3, pc, #476	; (adr r3, e0a50 <__ieee754_pow+0x8f8>)
   e0872:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0876:	4606      	mov	r6, r0
   e0878:	460f      	mov	r7, r1
   e087a:	f002 fb29 	bl	e2ed0 <__aeabi_dmul>
   e087e:	a376      	add	r3, pc, #472	; (adr r3, e0a58 <__ieee754_pow+0x900>)
   e0880:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0884:	f002 f970 	bl	e2b68 <__aeabi_dsub>
   e0888:	4632      	mov	r2, r6
   e088a:	463b      	mov	r3, r7
   e088c:	f002 fb20 	bl	e2ed0 <__aeabi_dmul>
   e0890:	a373      	add	r3, pc, #460	; (adr r3, e0a60 <__ieee754_pow+0x908>)
   e0892:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0896:	f002 f969 	bl	e2b6c <__adddf3>
   e089a:	4632      	mov	r2, r6
   e089c:	463b      	mov	r3, r7
   e089e:	f002 fb17 	bl	e2ed0 <__aeabi_dmul>
   e08a2:	a371      	add	r3, pc, #452	; (adr r3, e0a68 <__ieee754_pow+0x910>)
   e08a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08a8:	f002 f95e 	bl	e2b68 <__aeabi_dsub>
   e08ac:	4632      	mov	r2, r6
   e08ae:	463b      	mov	r3, r7
   e08b0:	f002 fb0e 	bl	e2ed0 <__aeabi_dmul>
   e08b4:	a36e      	add	r3, pc, #440	; (adr r3, e0a70 <__ieee754_pow+0x918>)
   e08b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08ba:	f002 f957 	bl	e2b6c <__adddf3>
   e08be:	4632      	mov	r2, r6
   e08c0:	463b      	mov	r3, r7
   e08c2:	f002 fb05 	bl	e2ed0 <__aeabi_dmul>
   e08c6:	4602      	mov	r2, r0
   e08c8:	460b      	mov	r3, r1
   e08ca:	4620      	mov	r0, r4
   e08cc:	4629      	mov	r1, r5
   e08ce:	f002 f94b 	bl	e2b68 <__aeabi_dsub>
   e08d2:	4606      	mov	r6, r0
   e08d4:	460f      	mov	r7, r1
   e08d6:	4602      	mov	r2, r0
   e08d8:	460b      	mov	r3, r1
   e08da:	4620      	mov	r0, r4
   e08dc:	4629      	mov	r1, r5
   e08de:	f002 faf7 	bl	e2ed0 <__aeabi_dmul>
   e08e2:	2200      	movs	r2, #0
   e08e4:	e9cd 0100 	strd	r0, r1, [sp]
   e08e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e08ec:	4630      	mov	r0, r6
   e08ee:	4639      	mov	r1, r7
   e08f0:	f002 f93a 	bl	e2b68 <__aeabi_dsub>
   e08f4:	4602      	mov	r2, r0
   e08f6:	460b      	mov	r3, r1
   e08f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   e08fc:	f002 fc12 	bl	e3124 <__aeabi_ddiv>
   e0900:	4642      	mov	r2, r8
   e0902:	4606      	mov	r6, r0
   e0904:	460f      	mov	r7, r1
   e0906:	464b      	mov	r3, r9
   e0908:	4620      	mov	r0, r4
   e090a:	4629      	mov	r1, r5
   e090c:	f002 fae0 	bl	e2ed0 <__aeabi_dmul>
   e0910:	4642      	mov	r2, r8
   e0912:	464b      	mov	r3, r9
   e0914:	f002 f92a 	bl	e2b6c <__adddf3>
   e0918:	4602      	mov	r2, r0
   e091a:	460b      	mov	r3, r1
   e091c:	4630      	mov	r0, r6
   e091e:	4639      	mov	r1, r7
   e0920:	f002 f922 	bl	e2b68 <__aeabi_dsub>
   e0924:	4622      	mov	r2, r4
   e0926:	462b      	mov	r3, r5
   e0928:	f002 f91e 	bl	e2b68 <__aeabi_dsub>
   e092c:	4602      	mov	r2, r0
   e092e:	460b      	mov	r3, r1
   e0930:	2000      	movs	r0, #0
   e0932:	4959      	ldr	r1, [pc, #356]	; (e0a98 <__ieee754_pow+0x940>)
   e0934:	f002 f918 	bl	e2b68 <__aeabi_dsub>
   e0938:	448a      	add	sl, r1
   e093a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   e093e:	4602      	mov	r2, r0
   e0940:	460b      	mov	r3, r1
   e0942:	f2c0 815b 	blt.w	e0bfc <__ieee754_pow+0xaa4>
   e0946:	4651      	mov	r1, sl
   e0948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e094c:	f002 fac0 	bl	e2ed0 <__aeabi_dmul>
   e0950:	ec41 0b10 	vmov	d0, r0, r1
   e0954:	e449      	b.n	e01ea <__ieee754_pow+0x92>
   e0956:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e095a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e095e:	ea54 030b 	orrs.w	r3, r4, fp
   e0962:	f000 8137 	beq.w	e0bd4 <__ieee754_pow+0xa7c>
   e0966:	f1bb 0f01 	cmp.w	fp, #1
   e096a:	f47f ac80 	bne.w	e026e <__ieee754_pow+0x116>
   e096e:	4602      	mov	r2, r0
   e0970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0974:	ec43 2b10 	vmov	d0, r2, r3
   e0978:	e437      	b.n	e01ea <__ieee754_pow+0x92>
   e097a:	4632      	mov	r2, r6
   e097c:	463b      	mov	r3, r7
   e097e:	4630      	mov	r0, r6
   e0980:	4639      	mov	r1, r7
   e0982:	f002 faa5 	bl	e2ed0 <__aeabi_dmul>
   e0986:	ec41 0b10 	vmov	d0, r0, r1
   e098a:	e42e      	b.n	e01ea <__ieee754_pow+0x92>
   e098c:	4b43      	ldr	r3, [pc, #268]	; (e0a9c <__ieee754_pow+0x944>)
   e098e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e0992:	4598      	cmp	r8, r3
   e0994:	f340 8115 	ble.w	e0bc2 <__ieee754_pow+0xa6a>
   e0998:	4b41      	ldr	r3, [pc, #260]	; (e0aa0 <__ieee754_pow+0x948>)
   e099a:	440b      	add	r3, r1
   e099c:	4303      	orrs	r3, r0
   e099e:	d10c      	bne.n	e09ba <__ieee754_pow+0x862>
   e09a0:	4632      	mov	r2, r6
   e09a2:	463b      	mov	r3, r7
   e09a4:	f002 f8e0 	bl	e2b68 <__aeabi_dsub>
   e09a8:	4602      	mov	r2, r0
   e09aa:	460b      	mov	r3, r1
   e09ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e09b0:	f002 fd0a 	bl	e33c8 <__aeabi_dcmple>
   e09b4:	2800      	cmp	r0, #0
   e09b6:	f43f aee6 	beq.w	e0786 <__ieee754_pow+0x62e>
   e09ba:	a32f      	add	r3, pc, #188	; (adr r3, e0a78 <__ieee754_pow+0x920>)
   e09bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e09c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e09c4:	f002 fa84 	bl	e2ed0 <__aeabi_dmul>
   e09c8:	a32b      	add	r3, pc, #172	; (adr r3, e0a78 <__ieee754_pow+0x920>)
   e09ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e09ce:	f002 fa7f 	bl	e2ed0 <__aeabi_dmul>
   e09d2:	ec41 0b10 	vmov	d0, r0, r1
   e09d6:	e408      	b.n	e01ea <__ieee754_pow+0x92>
   e09d8:	ed9f 7b29 	vldr	d7, [pc, #164]	; e0a80 <__ieee754_pow+0x928>
   e09dc:	ed8d 7b06 	vstr	d7, [sp, #24]
   e09e0:	e676      	b.n	e06d0 <__ieee754_pow+0x578>
   e09e2:	f1b9 0f00 	cmp.w	r9, #0
   e09e6:	f6bf ac8e 	bge.w	e0306 <__ieee754_pow+0x1ae>
   e09ea:	e9dd 3400 	ldrd	r3, r4, [sp]
   e09ee:	ee00 3a10 	vmov	s0, r3
   e09f2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   e09f6:	ee00 3a90 	vmov	s1, r3
   e09fa:	f7ff bbf6 	b.w	e01ea <__ieee754_pow+0x92>
   e09fe:	4602      	mov	r2, r0
   e0a00:	460b      	mov	r3, r1
   e0a02:	2000      	movs	r0, #0
   e0a04:	4924      	ldr	r1, [pc, #144]	; (e0a98 <__ieee754_pow+0x940>)
   e0a06:	f002 fb8d 	bl	e3124 <__aeabi_ddiv>
   e0a0a:	e42d      	b.n	e0268 <__ieee754_pow+0x110>
   e0a0c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; e0a88 <__ieee754_pow+0x930>
   e0a10:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e0a18:	ed9f 7b03 	vldr	d7, [pc, #12]	; e0a28 <__ieee754_pow+0x8d0>
   e0a1c:	f04f 0800 	mov.w	r8, #0
   e0a20:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0a24:	e4be      	b.n	e03a4 <__ieee754_pow+0x24c>
   e0a26:	bf00      	nop
   e0a28:	00000000 	.word	0x00000000
   e0a2c:	3ff00000 	.word	0x3ff00000
   e0a30:	652b82fe 	.word	0x652b82fe
   e0a34:	3c971547 	.word	0x3c971547
   e0a38:	00000000 	.word	0x00000000
   e0a3c:	3fe62e43 	.word	0x3fe62e43
   e0a40:	fefa39ef 	.word	0xfefa39ef
   e0a44:	3fe62e42 	.word	0x3fe62e42
   e0a48:	0ca86c39 	.word	0x0ca86c39
   e0a4c:	be205c61 	.word	0xbe205c61
   e0a50:	72bea4d0 	.word	0x72bea4d0
   e0a54:	3e663769 	.word	0x3e663769
   e0a58:	c5d26bf1 	.word	0xc5d26bf1
   e0a5c:	3ebbbd41 	.word	0x3ebbbd41
   e0a60:	af25de2c 	.word	0xaf25de2c
   e0a64:	3f11566a 	.word	0x3f11566a
   e0a68:	16bebd93 	.word	0x16bebd93
   e0a6c:	3f66c16c 	.word	0x3f66c16c
   e0a70:	5555553e 	.word	0x5555553e
   e0a74:	3fc55555 	.word	0x3fc55555
   e0a78:	c2f8f359 	.word	0xc2f8f359
   e0a7c:	01a56e1f 	.word	0x01a56e1f
   e0a80:	00000000 	.word	0x00000000
   e0a84:	bff00000 	.word	0xbff00000
	...
   e0a90:	408fffff 	.word	0x408fffff
   e0a94:	000fffff 	.word	0x000fffff
   e0a98:	3ff00000 	.word	0x3ff00000
   e0a9c:	4090cbff 	.word	0x4090cbff
   e0aa0:	3f6f3400 	.word	0x3f6f3400
   e0aa4:	4b6c      	ldr	r3, [pc, #432]	; (e0c58 <__ieee754_pow+0xb00>)
   e0aa6:	429c      	cmp	r4, r3
   e0aa8:	f77f ac2a 	ble.w	e0300 <__ieee754_pow+0x1a8>
   e0aac:	4b6b      	ldr	r3, [pc, #428]	; (e0c5c <__ieee754_pow+0xb04>)
   e0aae:	429c      	cmp	r4, r3
   e0ab0:	f73f abc3 	bgt.w	e023a <__ieee754_pow+0xe2>
   e0ab4:	2200      	movs	r2, #0
   e0ab6:	4b69      	ldr	r3, [pc, #420]	; (e0c5c <__ieee754_pow+0xb04>)
   e0ab8:	f002 f856 	bl	e2b68 <__aeabi_dsub>
   e0abc:	a356      	add	r3, pc, #344	; (adr r3, e0c18 <__ieee754_pow+0xac0>)
   e0abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ac2:	4604      	mov	r4, r0
   e0ac4:	460d      	mov	r5, r1
   e0ac6:	f002 fa03 	bl	e2ed0 <__aeabi_dmul>
   e0aca:	a355      	add	r3, pc, #340	; (adr r3, e0c20 <__ieee754_pow+0xac8>)
   e0acc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ad0:	4680      	mov	r8, r0
   e0ad2:	4689      	mov	r9, r1
   e0ad4:	4620      	mov	r0, r4
   e0ad6:	4629      	mov	r1, r5
   e0ad8:	f002 f9fa 	bl	e2ed0 <__aeabi_dmul>
   e0adc:	2200      	movs	r2, #0
   e0ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0ae2:	4b5f      	ldr	r3, [pc, #380]	; (e0c60 <__ieee754_pow+0xb08>)
   e0ae4:	4620      	mov	r0, r4
   e0ae6:	4629      	mov	r1, r5
   e0ae8:	f002 f9f2 	bl	e2ed0 <__aeabi_dmul>
   e0aec:	4602      	mov	r2, r0
   e0aee:	460b      	mov	r3, r1
   e0af0:	a14d      	add	r1, pc, #308	; (adr r1, e0c28 <__ieee754_pow+0xad0>)
   e0af2:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0af6:	f002 f837 	bl	e2b68 <__aeabi_dsub>
   e0afa:	4622      	mov	r2, r4
   e0afc:	462b      	mov	r3, r5
   e0afe:	f002 f9e7 	bl	e2ed0 <__aeabi_dmul>
   e0b02:	4602      	mov	r2, r0
   e0b04:	460b      	mov	r3, r1
   e0b06:	2000      	movs	r0, #0
   e0b08:	4956      	ldr	r1, [pc, #344]	; (e0c64 <__ieee754_pow+0xb0c>)
   e0b0a:	f002 f82d 	bl	e2b68 <__aeabi_dsub>
   e0b0e:	4622      	mov	r2, r4
   e0b10:	462b      	mov	r3, r5
   e0b12:	4606      	mov	r6, r0
   e0b14:	460f      	mov	r7, r1
   e0b16:	4620      	mov	r0, r4
   e0b18:	4629      	mov	r1, r5
   e0b1a:	f002 f9d9 	bl	e2ed0 <__aeabi_dmul>
   e0b1e:	4602      	mov	r2, r0
   e0b20:	460b      	mov	r3, r1
   e0b22:	4630      	mov	r0, r6
   e0b24:	4639      	mov	r1, r7
   e0b26:	f002 f9d3 	bl	e2ed0 <__aeabi_dmul>
   e0b2a:	a341      	add	r3, pc, #260	; (adr r3, e0c30 <__ieee754_pow+0xad8>)
   e0b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b30:	f002 f9ce 	bl	e2ed0 <__aeabi_dmul>
   e0b34:	4602      	mov	r2, r0
   e0b36:	460b      	mov	r3, r1
   e0b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0b3c:	f002 f814 	bl	e2b68 <__aeabi_dsub>
   e0b40:	4602      	mov	r2, r0
   e0b42:	460b      	mov	r3, r1
   e0b44:	4604      	mov	r4, r0
   e0b46:	460d      	mov	r5, r1
   e0b48:	4640      	mov	r0, r8
   e0b4a:	4649      	mov	r1, r9
   e0b4c:	f002 f80e 	bl	e2b6c <__adddf3>
   e0b50:	4642      	mov	r2, r8
   e0b52:	464b      	mov	r3, r9
   e0b54:	2000      	movs	r0, #0
   e0b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0b5a:	f002 f805 	bl	e2b68 <__aeabi_dsub>
   e0b5e:	4602      	mov	r2, r0
   e0b60:	460b      	mov	r3, r1
   e0b62:	4620      	mov	r0, r4
   e0b64:	4629      	mov	r1, r5
   e0b66:	f001 ffff 	bl	e2b68 <__aeabi_dsub>
   e0b6a:	4680      	mov	r8, r0
   e0b6c:	4689      	mov	r9, r1
   e0b6e:	e5a5      	b.n	e06bc <__ieee754_pow+0x564>
   e0b70:	4632      	mov	r2, r6
   e0b72:	463b      	mov	r3, r7
   e0b74:	2000      	movs	r0, #0
   e0b76:	4939      	ldr	r1, [pc, #228]	; (e0c5c <__ieee754_pow+0xb04>)
   e0b78:	f002 fad4 	bl	e3124 <__aeabi_ddiv>
   e0b7c:	ec41 0b10 	vmov	d0, r0, r1
   e0b80:	f7ff bb33 	b.w	e01ea <__ieee754_pow+0x92>
   e0b84:	a32c      	add	r3, pc, #176	; (adr r3, e0c38 <__ieee754_pow+0xae0>)
   e0b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0b8e:	f002 f99f 	bl	e2ed0 <__aeabi_dmul>
   e0b92:	a329      	add	r3, pc, #164	; (adr r3, e0c38 <__ieee754_pow+0xae0>)
   e0b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0b98:	f002 f99a 	bl	e2ed0 <__aeabi_dmul>
   e0b9c:	ec41 0b10 	vmov	d0, r0, r1
   e0ba0:	f7ff bb23 	b.w	e01ea <__ieee754_pow+0x92>
   e0ba4:	f1be 0f00 	cmp.w	lr, #0
   e0ba8:	f47f ab2a 	bne.w	e0200 <__ieee754_pow+0xa8>
   e0bac:	f1c3 0314 	rsb	r3, r3, #20
   e0bb0:	fa48 f203 	asr.w	r2, r8, r3
   e0bb4:	fa02 f303 	lsl.w	r3, r2, r3
   e0bb8:	4598      	cmp	r8, r3
   e0bba:	d027      	beq.n	e0c0c <__ieee754_pow+0xab4>
   e0bbc:	46f3      	mov	fp, lr
   e0bbe:	f7ff baf7 	b.w	e01b0 <__ieee754_pow+0x58>
   e0bc2:	4b28      	ldr	r3, [pc, #160]	; (e0c64 <__ieee754_pow+0xb0c>)
   e0bc4:	4598      	cmp	r8, r3
   e0bc6:	f73f adde 	bgt.w	e0786 <__ieee754_pow+0x62e>
   e0bca:	e9dd 3400 	ldrd	r3, r4, [sp]
   e0bce:	469a      	mov	sl, r3
   e0bd0:	469b      	mov	fp, r3
   e0bd2:	e607      	b.n	e07e4 <__ieee754_pow+0x68c>
   e0bd4:	4602      	mov	r2, r0
   e0bd6:	460b      	mov	r3, r1
   e0bd8:	f7ff bb89 	b.w	e02ee <__ieee754_pow+0x196>
   e0bdc:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0c40 <__ieee754_pow+0xae8>
   e0be0:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0be4:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0c48 <__ieee754_pow+0xaf0>
   e0be8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e0bec:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0c50 <__ieee754_pow+0xaf8>
   e0bf0:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   e0bf4:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0bf8:	f7ff bbd4 	b.w	e03a4 <__ieee754_pow+0x24c>
   e0bfc:	4658      	mov	r0, fp
   e0bfe:	ec43 2b10 	vmov	d0, r2, r3
   e0c02:	f001 ff19 	bl	e2a38 <scalbn>
   e0c06:	ec51 0b10 	vmov	r0, r1, d0
   e0c0a:	e69d      	b.n	e0948 <__ieee754_pow+0x7f0>
   e0c0c:	f002 0201 	and.w	r2, r2, #1
   e0c10:	f1c2 0b02 	rsb	fp, r2, #2
   e0c14:	f7ff bacc 	b.w	e01b0 <__ieee754_pow+0x58>
   e0c18:	60000000 	.word	0x60000000
   e0c1c:	3ff71547 	.word	0x3ff71547
   e0c20:	f85ddf44 	.word	0xf85ddf44
   e0c24:	3e54ae0b 	.word	0x3e54ae0b
   e0c28:	55555555 	.word	0x55555555
   e0c2c:	3fd55555 	.word	0x3fd55555
   e0c30:	652b82fe 	.word	0x652b82fe
   e0c34:	3ff71547 	.word	0x3ff71547
   e0c38:	8800759c 	.word	0x8800759c
   e0c3c:	7e37e43c 	.word	0x7e37e43c
   e0c40:	40000000 	.word	0x40000000
   e0c44:	3fe2b803 	.word	0x3fe2b803
   e0c48:	43cfd006 	.word	0x43cfd006
   e0c4c:	3e4cfdeb 	.word	0x3e4cfdeb
   e0c50:	00000000 	.word	0x00000000
   e0c54:	3ff80000 	.word	0x3ff80000
   e0c58:	3feffffe 	.word	0x3feffffe
   e0c5c:	3ff00000 	.word	0x3ff00000
   e0c60:	3fd00000 	.word	0x3fd00000
   e0c64:	3fe00000 	.word	0x3fe00000

000e0c68 <__ieee754_rem_pio2>:
   e0c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0c6c:	ec53 2b10 	vmov	r2, r3, d0
   e0c70:	4997      	ldr	r1, [pc, #604]	; (e0ed0 <__ieee754_rem_pio2+0x268>)
   e0c72:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   e0c76:	458b      	cmp	fp, r1
   e0c78:	b08f      	sub	sp, #60	; 0x3c
   e0c7a:	f340 8087 	ble.w	e0d8c <__ieee754_rem_pio2+0x124>
   e0c7e:	4995      	ldr	r1, [pc, #596]	; (e0ed4 <__ieee754_rem_pio2+0x26c>)
   e0c80:	458b      	cmp	fp, r1
   e0c82:	461c      	mov	r4, r3
   e0c84:	4682      	mov	sl, r0
   e0c86:	dc29      	bgt.n	e0cdc <__ieee754_rem_pio2+0x74>
   e0c88:	2c00      	cmp	r4, #0
   e0c8a:	4619      	mov	r1, r3
   e0c8c:	ee10 0a10 	vmov	r0, s0
   e0c90:	a385      	add	r3, pc, #532	; (adr r3, e0ea8 <__ieee754_rem_pio2+0x240>)
   e0c92:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c96:	f340 81a5 	ble.w	e0fe4 <__ieee754_rem_pio2+0x37c>
   e0c9a:	f001 ff65 	bl	e2b68 <__aeabi_dsub>
   e0c9e:	4b8e      	ldr	r3, [pc, #568]	; (e0ed8 <__ieee754_rem_pio2+0x270>)
   e0ca0:	459b      	cmp	fp, r3
   e0ca2:	4604      	mov	r4, r0
   e0ca4:	460d      	mov	r5, r1
   e0ca6:	f000 8087 	beq.w	e0db8 <__ieee754_rem_pio2+0x150>
   e0caa:	a381      	add	r3, pc, #516	; (adr r3, e0eb0 <__ieee754_rem_pio2+0x248>)
   e0cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cb0:	f001 ff5a 	bl	e2b68 <__aeabi_dsub>
   e0cb4:	4602      	mov	r2, r0
   e0cb6:	460b      	mov	r3, r1
   e0cb8:	e9ca 2300 	strd	r2, r3, [sl]
   e0cbc:	4620      	mov	r0, r4
   e0cbe:	4629      	mov	r1, r5
   e0cc0:	f001 ff52 	bl	e2b68 <__aeabi_dsub>
   e0cc4:	a37a      	add	r3, pc, #488	; (adr r3, e0eb0 <__ieee754_rem_pio2+0x248>)
   e0cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cca:	f001 ff4d 	bl	e2b68 <__aeabi_dsub>
   e0cce:	2501      	movs	r5, #1
   e0cd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0cd4:	4628      	mov	r0, r5
   e0cd6:	b00f      	add	sp, #60	; 0x3c
   e0cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0cdc:	497f      	ldr	r1, [pc, #508]	; (e0edc <__ieee754_rem_pio2+0x274>)
   e0cde:	458b      	cmp	fp, r1
   e0ce0:	f340 8087 	ble.w	e0df2 <__ieee754_rem_pio2+0x18a>
   e0ce4:	497e      	ldr	r1, [pc, #504]	; (e0ee0 <__ieee754_rem_pio2+0x278>)
   e0ce6:	458b      	cmp	fp, r1
   e0ce8:	dc5b      	bgt.n	e0da2 <__ieee754_rem_pio2+0x13a>
   e0cea:	ea4f 552b 	mov.w	r5, fp, asr #20
   e0cee:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   e0cf2:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   e0cf6:	4610      	mov	r0, r2
   e0cf8:	4639      	mov	r1, r7
   e0cfa:	ee10 6a10 	vmov	r6, s0
   e0cfe:	f002 fb97 	bl	e3430 <__aeabi_d2iz>
   e0d02:	f002 f87f 	bl	e2e04 <__aeabi_i2d>
   e0d06:	4680      	mov	r8, r0
   e0d08:	4689      	mov	r9, r1
   e0d0a:	4642      	mov	r2, r8
   e0d0c:	464b      	mov	r3, r9
   e0d0e:	4630      	mov	r0, r6
   e0d10:	4639      	mov	r1, r7
   e0d12:	e9cd 8908 	strd	r8, r9, [sp, #32]
   e0d16:	f001 ff27 	bl	e2b68 <__aeabi_dsub>
   e0d1a:	2200      	movs	r2, #0
   e0d1c:	4b71      	ldr	r3, [pc, #452]	; (e0ee4 <__ieee754_rem_pio2+0x27c>)
   e0d1e:	f002 f8d7 	bl	e2ed0 <__aeabi_dmul>
   e0d22:	4689      	mov	r9, r1
   e0d24:	4680      	mov	r8, r0
   e0d26:	f002 fb83 	bl	e3430 <__aeabi_d2iz>
   e0d2a:	f002 f86b 	bl	e2e04 <__aeabi_i2d>
   e0d2e:	4606      	mov	r6, r0
   e0d30:	460f      	mov	r7, r1
   e0d32:	4632      	mov	r2, r6
   e0d34:	463b      	mov	r3, r7
   e0d36:	4640      	mov	r0, r8
   e0d38:	4649      	mov	r1, r9
   e0d3a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   e0d3e:	f001 ff13 	bl	e2b68 <__aeabi_dsub>
   e0d42:	2200      	movs	r2, #0
   e0d44:	4b67      	ldr	r3, [pc, #412]	; (e0ee4 <__ieee754_rem_pio2+0x27c>)
   e0d46:	f002 f8c3 	bl	e2ed0 <__aeabi_dmul>
   e0d4a:	2200      	movs	r2, #0
   e0d4c:	2300      	movs	r3, #0
   e0d4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0d52:	f002 fb25 	bl	e33a0 <__aeabi_dcmpeq>
   e0d56:	2800      	cmp	r0, #0
   e0d58:	f000 8170 	beq.w	e103c <__ieee754_rem_pio2+0x3d4>
   e0d5c:	2300      	movs	r3, #0
   e0d5e:	4630      	mov	r0, r6
   e0d60:	4639      	mov	r1, r7
   e0d62:	2200      	movs	r2, #0
   e0d64:	f002 fb1c 	bl	e33a0 <__aeabi_dcmpeq>
   e0d68:	2800      	cmp	r0, #0
   e0d6a:	bf14      	ite	ne
   e0d6c:	2301      	movne	r3, #1
   e0d6e:	2302      	moveq	r3, #2
   e0d70:	4a5d      	ldr	r2, [pc, #372]	; (e0ee8 <__ieee754_rem_pio2+0x280>)
   e0d72:	9201      	str	r2, [sp, #4]
   e0d74:	2102      	movs	r1, #2
   e0d76:	9100      	str	r1, [sp, #0]
   e0d78:	462a      	mov	r2, r5
   e0d7a:	4651      	mov	r1, sl
   e0d7c:	a808      	add	r0, sp, #32
   e0d7e:	f000 fc93 	bl	e16a8 <__kernel_rem_pio2>
   e0d82:	2c00      	cmp	r4, #0
   e0d84:	f2c0 814c 	blt.w	e1020 <__ieee754_rem_pio2+0x3b8>
   e0d88:	4605      	mov	r5, r0
   e0d8a:	e006      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e0d8c:	ed80 0b00 	vstr	d0, [r0]
   e0d90:	2500      	movs	r5, #0
   e0d92:	2400      	movs	r4, #0
   e0d94:	e9c0 4502 	strd	r4, r5, [r0, #8]
   e0d98:	2500      	movs	r5, #0
   e0d9a:	4628      	mov	r0, r5
   e0d9c:	b00f      	add	sp, #60	; 0x3c
   e0d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0da2:	ee10 0a10 	vmov	r0, s0
   e0da6:	4619      	mov	r1, r3
   e0da8:	f001 fede 	bl	e2b68 <__aeabi_dsub>
   e0dac:	2500      	movs	r5, #0
   e0dae:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0db2:	e9ca 0100 	strd	r0, r1, [sl]
   e0db6:	e7f0      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e0db8:	a33f      	add	r3, pc, #252	; (adr r3, e0eb8 <__ieee754_rem_pio2+0x250>)
   e0dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dbe:	f001 fed3 	bl	e2b68 <__aeabi_dsub>
   e0dc2:	a33f      	add	r3, pc, #252	; (adr r3, e0ec0 <__ieee754_rem_pio2+0x258>)
   e0dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dc8:	460d      	mov	r5, r1
   e0dca:	4604      	mov	r4, r0
   e0dcc:	f001 fecc 	bl	e2b68 <__aeabi_dsub>
   e0dd0:	4602      	mov	r2, r0
   e0dd2:	460b      	mov	r3, r1
   e0dd4:	e9ca 2300 	strd	r2, r3, [sl]
   e0dd8:	4629      	mov	r1, r5
   e0dda:	4620      	mov	r0, r4
   e0ddc:	f001 fec4 	bl	e2b68 <__aeabi_dsub>
   e0de0:	a337      	add	r3, pc, #220	; (adr r3, e0ec0 <__ieee754_rem_pio2+0x258>)
   e0de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0de6:	f001 febf 	bl	e2b68 <__aeabi_dsub>
   e0dea:	2501      	movs	r5, #1
   e0dec:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0df0:	e7d3      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e0df2:	f7fc fe65 	bl	ddac0 <fabs>
   e0df6:	ec57 6b10 	vmov	r6, r7, d0
   e0dfa:	ee10 0a10 	vmov	r0, s0
   e0dfe:	a332      	add	r3, pc, #200	; (adr r3, e0ec8 <__ieee754_rem_pio2+0x260>)
   e0e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e04:	4639      	mov	r1, r7
   e0e06:	f002 f863 	bl	e2ed0 <__aeabi_dmul>
   e0e0a:	2200      	movs	r2, #0
   e0e0c:	4b37      	ldr	r3, [pc, #220]	; (e0eec <__ieee754_rem_pio2+0x284>)
   e0e0e:	f001 fead 	bl	e2b6c <__adddf3>
   e0e12:	f002 fb0d 	bl	e3430 <__aeabi_d2iz>
   e0e16:	4605      	mov	r5, r0
   e0e18:	f001 fff4 	bl	e2e04 <__aeabi_i2d>
   e0e1c:	a322      	add	r3, pc, #136	; (adr r3, e0ea8 <__ieee754_rem_pio2+0x240>)
   e0e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e22:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e0e26:	f002 f853 	bl	e2ed0 <__aeabi_dmul>
   e0e2a:	4602      	mov	r2, r0
   e0e2c:	460b      	mov	r3, r1
   e0e2e:	4630      	mov	r0, r6
   e0e30:	4639      	mov	r1, r7
   e0e32:	f001 fe99 	bl	e2b68 <__aeabi_dsub>
   e0e36:	a31e      	add	r3, pc, #120	; (adr r3, e0eb0 <__ieee754_rem_pio2+0x248>)
   e0e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e3c:	4680      	mov	r8, r0
   e0e3e:	4689      	mov	r9, r1
   e0e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0e44:	f002 f844 	bl	e2ed0 <__aeabi_dmul>
   e0e48:	2d1f      	cmp	r5, #31
   e0e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0e4e:	dc51      	bgt.n	e0ef4 <__ieee754_rem_pio2+0x28c>
   e0e50:	4b27      	ldr	r3, [pc, #156]	; (e0ef0 <__ieee754_rem_pio2+0x288>)
   e0e52:	1e6a      	subs	r2, r5, #1
   e0e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e0e58:	459b      	cmp	fp, r3
   e0e5a:	d04b      	beq.n	e0ef4 <__ieee754_rem_pio2+0x28c>
   e0e5c:	4602      	mov	r2, r0
   e0e5e:	460b      	mov	r3, r1
   e0e60:	4640      	mov	r0, r8
   e0e62:	4649      	mov	r1, r9
   e0e64:	f001 fe80 	bl	e2b68 <__aeabi_dsub>
   e0e68:	4606      	mov	r6, r0
   e0e6a:	460f      	mov	r7, r1
   e0e6c:	e9ca 6700 	strd	r6, r7, [sl]
   e0e70:	4632      	mov	r2, r6
   e0e72:	463b      	mov	r3, r7
   e0e74:	4640      	mov	r0, r8
   e0e76:	4649      	mov	r1, r9
   e0e78:	f001 fe76 	bl	e2b68 <__aeabi_dsub>
   e0e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0e80:	f001 fe72 	bl	e2b68 <__aeabi_dsub>
   e0e84:	2c00      	cmp	r4, #0
   e0e86:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0e8a:	da86      	bge.n	e0d9a <__ieee754_rem_pio2+0x132>
   e0e8c:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   e0e90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0e94:	426d      	negs	r5, r5
   e0e96:	f8ca 6000 	str.w	r6, [sl]
   e0e9a:	f8ca 4004 	str.w	r4, [sl, #4]
   e0e9e:	f8ca 0008 	str.w	r0, [sl, #8]
   e0ea2:	f8ca 300c 	str.w	r3, [sl, #12]
   e0ea6:	e778      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e0ea8:	54400000 	.word	0x54400000
   e0eac:	3ff921fb 	.word	0x3ff921fb
   e0eb0:	1a626331 	.word	0x1a626331
   e0eb4:	3dd0b461 	.word	0x3dd0b461
   e0eb8:	1a600000 	.word	0x1a600000
   e0ebc:	3dd0b461 	.word	0x3dd0b461
   e0ec0:	2e037073 	.word	0x2e037073
   e0ec4:	3ba3198a 	.word	0x3ba3198a
   e0ec8:	6dc9c883 	.word	0x6dc9c883
   e0ecc:	3fe45f30 	.word	0x3fe45f30
   e0ed0:	3fe921fb 	.word	0x3fe921fb
   e0ed4:	4002d97b 	.word	0x4002d97b
   e0ed8:	3ff921fb 	.word	0x3ff921fb
   e0edc:	413921fb 	.word	0x413921fb
   e0ee0:	7fefffff 	.word	0x7fefffff
   e0ee4:	41700000 	.word	0x41700000
   e0ee8:	000e83f0 	.word	0x000e83f0
   e0eec:	3fe00000 	.word	0x3fe00000
   e0ef0:	000e8370 	.word	0x000e8370
   e0ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0ef8:	4640      	mov	r0, r8
   e0efa:	4649      	mov	r1, r9
   e0efc:	f001 fe34 	bl	e2b68 <__aeabi_dsub>
   e0f00:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   e0f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0f08:	ebc3 030b 	rsb	r3, r3, fp
   e0f0c:	4606      	mov	r6, r0
   e0f0e:	460f      	mov	r7, r1
   e0f10:	2b10      	cmp	r3, #16
   e0f12:	e9ca 6700 	strd	r6, r7, [sl]
   e0f16:	ddab      	ble.n	e0e70 <__ieee754_rem_pio2+0x208>
   e0f18:	a35d      	add	r3, pc, #372	; (adr r3, e1090 <__ieee754_rem_pio2+0x428>)
   e0f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0f22:	f001 ffd5 	bl	e2ed0 <__aeabi_dmul>
   e0f26:	4606      	mov	r6, r0
   e0f28:	460f      	mov	r7, r1
   e0f2a:	4602      	mov	r2, r0
   e0f2c:	460b      	mov	r3, r1
   e0f2e:	4640      	mov	r0, r8
   e0f30:	4649      	mov	r1, r9
   e0f32:	f001 fe19 	bl	e2b68 <__aeabi_dsub>
   e0f36:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0f3a:	4602      	mov	r2, r0
   e0f3c:	460b      	mov	r3, r1
   e0f3e:	4640      	mov	r0, r8
   e0f40:	4649      	mov	r1, r9
   e0f42:	f001 fe11 	bl	e2b68 <__aeabi_dsub>
   e0f46:	4632      	mov	r2, r6
   e0f48:	463b      	mov	r3, r7
   e0f4a:	f001 fe0d 	bl	e2b68 <__aeabi_dsub>
   e0f4e:	a352      	add	r3, pc, #328	; (adr r3, e1098 <__ieee754_rem_pio2+0x430>)
   e0f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f54:	4606      	mov	r6, r0
   e0f56:	460f      	mov	r7, r1
   e0f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0f5c:	f001 ffb8 	bl	e2ed0 <__aeabi_dmul>
   e0f60:	4632      	mov	r2, r6
   e0f62:	463b      	mov	r3, r7
   e0f64:	f001 fe00 	bl	e2b68 <__aeabi_dsub>
   e0f68:	460b      	mov	r3, r1
   e0f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0f6e:	4602      	mov	r2, r0
   e0f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0f74:	f001 fdf8 	bl	e2b68 <__aeabi_dsub>
   e0f78:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0f7c:	ebc3 0b0b 	rsb	fp, r3, fp
   e0f80:	4606      	mov	r6, r0
   e0f82:	460f      	mov	r7, r1
   e0f84:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   e0f88:	e9ca 6700 	strd	r6, r7, [sl]
   e0f8c:	dd76      	ble.n	e107c <__ieee754_rem_pio2+0x414>
   e0f8e:	a345      	add	r3, pc, #276	; (adr r3, e10a4 <__ieee754_rem_pio2+0x43c>)
   e0f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0f98:	f001 ff9a 	bl	e2ed0 <__aeabi_dmul>
   e0f9c:	4606      	mov	r6, r0
   e0f9e:	460f      	mov	r7, r1
   e0fa0:	4602      	mov	r2, r0
   e0fa2:	460b      	mov	r3, r1
   e0fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0fa8:	f001 fdde 	bl	e2b68 <__aeabi_dsub>
   e0fac:	4602      	mov	r2, r0
   e0fae:	460b      	mov	r3, r1
   e0fb0:	4680      	mov	r8, r0
   e0fb2:	4689      	mov	r9, r1
   e0fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0fb8:	f001 fdd6 	bl	e2b68 <__aeabi_dsub>
   e0fbc:	4632      	mov	r2, r6
   e0fbe:	463b      	mov	r3, r7
   e0fc0:	f001 fdd2 	bl	e2b68 <__aeabi_dsub>
   e0fc4:	a339      	add	r3, pc, #228	; (adr r3, e10ac <__ieee754_rem_pio2+0x444>)
   e0fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fca:	4606      	mov	r6, r0
   e0fcc:	460f      	mov	r7, r1
   e0fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0fd2:	f001 ff7d 	bl	e2ed0 <__aeabi_dmul>
   e0fd6:	4632      	mov	r2, r6
   e0fd8:	463b      	mov	r3, r7
   e0fda:	f001 fdc5 	bl	e2b68 <__aeabi_dsub>
   e0fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0fe2:	e73b      	b.n	e0e5c <__ieee754_rem_pio2+0x1f4>
   e0fe4:	f001 fdc2 	bl	e2b6c <__adddf3>
   e0fe8:	4b2d      	ldr	r3, [pc, #180]	; (e10a0 <__ieee754_rem_pio2+0x438>)
   e0fea:	459b      	cmp	fp, r3
   e0fec:	4604      	mov	r4, r0
   e0fee:	460d      	mov	r5, r1
   e0ff0:	d026      	beq.n	e1040 <__ieee754_rem_pio2+0x3d8>
   e0ff2:	a325      	add	r3, pc, #148	; (adr r3, e1088 <__ieee754_rem_pio2+0x420>)
   e0ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ff8:	f001 fdb8 	bl	e2b6c <__adddf3>
   e0ffc:	4602      	mov	r2, r0
   e0ffe:	460b      	mov	r3, r1
   e1000:	e9ca 2300 	strd	r2, r3, [sl]
   e1004:	4629      	mov	r1, r5
   e1006:	4620      	mov	r0, r4
   e1008:	f001 fdae 	bl	e2b68 <__aeabi_dsub>
   e100c:	a31e      	add	r3, pc, #120	; (adr r3, e1088 <__ieee754_rem_pio2+0x420>)
   e100e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1012:	f001 fdab 	bl	e2b6c <__adddf3>
   e1016:	f04f 35ff 	mov.w	r5, #4294967295
   e101a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e101e:	e6bc      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e1020:	f8da 2004 	ldr.w	r2, [sl, #4]
   e1024:	f8da 300c 	ldr.w	r3, [sl, #12]
   e1028:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e102c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e1030:	4245      	negs	r5, r0
   e1032:	f8ca 2004 	str.w	r2, [sl, #4]
   e1036:	f8ca 300c 	str.w	r3, [sl, #12]
   e103a:	e6ae      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e103c:	2303      	movs	r3, #3
   e103e:	e697      	b.n	e0d70 <__ieee754_rem_pio2+0x108>
   e1040:	a313      	add	r3, pc, #76	; (adr r3, e1090 <__ieee754_rem_pio2+0x428>)
   e1042:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1046:	f001 fd91 	bl	e2b6c <__adddf3>
   e104a:	a313      	add	r3, pc, #76	; (adr r3, e1098 <__ieee754_rem_pio2+0x430>)
   e104c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1050:	460d      	mov	r5, r1
   e1052:	4604      	mov	r4, r0
   e1054:	f001 fd8a 	bl	e2b6c <__adddf3>
   e1058:	4602      	mov	r2, r0
   e105a:	460b      	mov	r3, r1
   e105c:	e9ca 2300 	strd	r2, r3, [sl]
   e1060:	4629      	mov	r1, r5
   e1062:	4620      	mov	r0, r4
   e1064:	f001 fd80 	bl	e2b68 <__aeabi_dsub>
   e1068:	a30b      	add	r3, pc, #44	; (adr r3, e1098 <__ieee754_rem_pio2+0x430>)
   e106a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e106e:	f001 fd7d 	bl	e2b6c <__adddf3>
   e1072:	f04f 35ff 	mov.w	r5, #4294967295
   e1076:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e107a:	e68e      	b.n	e0d9a <__ieee754_rem_pio2+0x132>
   e107c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   e1080:	e6f6      	b.n	e0e70 <__ieee754_rem_pio2+0x208>
   e1082:	bf00      	nop
   e1084:	f3af 8000 	nop.w
   e1088:	1a626331 	.word	0x1a626331
   e108c:	3dd0b461 	.word	0x3dd0b461
   e1090:	1a600000 	.word	0x1a600000
   e1094:	3dd0b461 	.word	0x3dd0b461
   e1098:	2e037073 	.word	0x2e037073
   e109c:	3ba3198a 	.word	0x3ba3198a
   e10a0:	3ff921fb 	.word	0x3ff921fb
   e10a4:	2e000000 	.word	0x2e000000
   e10a8:	3ba3198a 	.word	0x3ba3198a
   e10ac:	252049c1 	.word	0x252049c1
   e10b0:	397b839a 	.word	0x397b839a
   e10b4:	00000000 	.word	0x00000000

000e10b8 <__ieee754_sinh>:
   e10b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e10bc:	ec57 6b10 	vmov	r6, r7, d0
   e10c0:	4a65      	ldr	r2, [pc, #404]	; (e1258 <__ieee754_sinh+0x1a0>)
   e10c2:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   e10c6:	4590      	cmp	r8, r2
   e10c8:	dc32      	bgt.n	e1130 <__ieee754_sinh+0x78>
   e10ca:	4b64      	ldr	r3, [pc, #400]	; (e125c <__ieee754_sinh+0x1a4>)
   e10cc:	2f00      	cmp	r7, #0
   e10ce:	bfb4      	ite	lt
   e10d0:	4d63      	ldrlt	r5, [pc, #396]	; (e1260 <__ieee754_sinh+0x1a8>)
   e10d2:	4d64      	ldrge	r5, [pc, #400]	; (e1264 <__ieee754_sinh+0x1ac>)
   e10d4:	4598      	cmp	r8, r3
   e10d6:	f04f 0400 	mov.w	r4, #0
   e10da:	dc14      	bgt.n	e1106 <__ieee754_sinh+0x4e>
   e10dc:	4b62      	ldr	r3, [pc, #392]	; (e1268 <__ieee754_sinh+0x1b0>)
   e10de:	4598      	cmp	r8, r3
   e10e0:	f300 8085 	bgt.w	e11ee <__ieee754_sinh+0x136>
   e10e4:	a35a      	add	r3, pc, #360	; (adr r3, e1250 <__ieee754_sinh+0x198>)
   e10e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e10ea:	ee10 0a10 	vmov	r0, s0
   e10ee:	4639      	mov	r1, r7
   e10f0:	f001 fd3c 	bl	e2b6c <__adddf3>
   e10f4:	2200      	movs	r2, #0
   e10f6:	4b5d      	ldr	r3, [pc, #372]	; (e126c <__ieee754_sinh+0x1b4>)
   e10f8:	f002 f97a 	bl	e33f0 <__aeabi_dcmpgt>
   e10fc:	b318      	cbz	r0, e1146 <__ieee754_sinh+0x8e>
   e10fe:	ec47 6b10 	vmov	d0, r6, r7
   e1102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1106:	4b5a      	ldr	r3, [pc, #360]	; (e1270 <__ieee754_sinh+0x1b8>)
   e1108:	4598      	cmp	r8, r3
   e110a:	f340 8092 	ble.w	e1232 <__ieee754_sinh+0x17a>
   e110e:	4b59      	ldr	r3, [pc, #356]	; (e1274 <__ieee754_sinh+0x1bc>)
   e1110:	4598      	cmp	r8, r3
   e1112:	dd4d      	ble.n	e11b0 <__ieee754_sinh+0xf8>
   e1114:	3301      	adds	r3, #1
   e1116:	4598      	cmp	r8, r3
   e1118:	d047      	beq.n	e11aa <__ieee754_sinh+0xf2>
   e111a:	4630      	mov	r0, r6
   e111c:	4639      	mov	r1, r7
   e111e:	a34c      	add	r3, pc, #304	; (adr r3, e1250 <__ieee754_sinh+0x198>)
   e1120:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1124:	f001 fed4 	bl	e2ed0 <__aeabi_dmul>
   e1128:	ec41 0b10 	vmov	d0, r0, r1
   e112c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1130:	ee10 2a10 	vmov	r2, s0
   e1134:	463b      	mov	r3, r7
   e1136:	4630      	mov	r0, r6
   e1138:	4639      	mov	r1, r7
   e113a:	f001 fd17 	bl	e2b6c <__adddf3>
   e113e:	ec41 0b10 	vmov	d0, r0, r1
   e1142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1146:	ec47 6b10 	vmov	d0, r6, r7
   e114a:	f7fc fcb9 	bl	ddac0 <fabs>
   e114e:	f001 f96b 	bl	e2428 <expm1>
   e1152:	ec57 6b10 	vmov	r6, r7, d0
   e1156:	4632      	mov	r2, r6
   e1158:	463b      	mov	r3, r7
   e115a:	4630      	mov	r0, r6
   e115c:	4639      	mov	r1, r7
   e115e:	f001 fd05 	bl	e2b6c <__adddf3>
   e1162:	4632      	mov	r2, r6
   e1164:	4682      	mov	sl, r0
   e1166:	468b      	mov	fp, r1
   e1168:	463b      	mov	r3, r7
   e116a:	4630      	mov	r0, r6
   e116c:	4639      	mov	r1, r7
   e116e:	f001 feaf 	bl	e2ed0 <__aeabi_dmul>
   e1172:	2200      	movs	r2, #0
   e1174:	4680      	mov	r8, r0
   e1176:	4689      	mov	r9, r1
   e1178:	4b3c      	ldr	r3, [pc, #240]	; (e126c <__ieee754_sinh+0x1b4>)
   e117a:	4630      	mov	r0, r6
   e117c:	4639      	mov	r1, r7
   e117e:	f001 fcf5 	bl	e2b6c <__adddf3>
   e1182:	4602      	mov	r2, r0
   e1184:	460b      	mov	r3, r1
   e1186:	4640      	mov	r0, r8
   e1188:	4649      	mov	r1, r9
   e118a:	f001 ffcb 	bl	e3124 <__aeabi_ddiv>
   e118e:	4602      	mov	r2, r0
   e1190:	460b      	mov	r3, r1
   e1192:	4650      	mov	r0, sl
   e1194:	4659      	mov	r1, fp
   e1196:	f001 fce7 	bl	e2b68 <__aeabi_dsub>
   e119a:	4622      	mov	r2, r4
   e119c:	462b      	mov	r3, r5
   e119e:	f001 fe97 	bl	e2ed0 <__aeabi_dmul>
   e11a2:	ec41 0b10 	vmov	d0, r0, r1
   e11a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e11aa:	4b33      	ldr	r3, [pc, #204]	; (e1278 <__ieee754_sinh+0x1c0>)
   e11ac:	429e      	cmp	r6, r3
   e11ae:	d8b4      	bhi.n	e111a <__ieee754_sinh+0x62>
   e11b0:	ec47 6b10 	vmov	d0, r6, r7
   e11b4:	f7fc fc84 	bl	ddac0 <fabs>
   e11b8:	2200      	movs	r2, #0
   e11ba:	4b2a      	ldr	r3, [pc, #168]	; (e1264 <__ieee754_sinh+0x1ac>)
   e11bc:	ec51 0b10 	vmov	r0, r1, d0
   e11c0:	f001 fe86 	bl	e2ed0 <__aeabi_dmul>
   e11c4:	ec41 0b10 	vmov	d0, r0, r1
   e11c8:	f7fe fa52 	bl	df670 <__ieee754_exp>
   e11cc:	ec57 6b10 	vmov	r6, r7, d0
   e11d0:	ee10 2a10 	vmov	r2, s0
   e11d4:	463b      	mov	r3, r7
   e11d6:	4620      	mov	r0, r4
   e11d8:	4629      	mov	r1, r5
   e11da:	f001 fe79 	bl	e2ed0 <__aeabi_dmul>
   e11de:	4632      	mov	r2, r6
   e11e0:	463b      	mov	r3, r7
   e11e2:	f001 fe75 	bl	e2ed0 <__aeabi_dmul>
   e11e6:	ec41 0b10 	vmov	d0, r0, r1
   e11ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e11ee:	f7fc fc67 	bl	ddac0 <fabs>
   e11f2:	f001 f919 	bl	e2428 <expm1>
   e11f6:	4b21      	ldr	r3, [pc, #132]	; (e127c <__ieee754_sinh+0x1c4>)
   e11f8:	4598      	cmp	r8, r3
   e11fa:	ec57 6b10 	vmov	r6, r7, d0
   e11fe:	ddaa      	ble.n	e1156 <__ieee754_sinh+0x9e>
   e1200:	ee10 0a10 	vmov	r0, s0
   e1204:	2200      	movs	r2, #0
   e1206:	4b19      	ldr	r3, [pc, #100]	; (e126c <__ieee754_sinh+0x1b4>)
   e1208:	4639      	mov	r1, r7
   e120a:	f001 fcaf 	bl	e2b6c <__adddf3>
   e120e:	4602      	mov	r2, r0
   e1210:	460b      	mov	r3, r1
   e1212:	4630      	mov	r0, r6
   e1214:	4639      	mov	r1, r7
   e1216:	f001 ff85 	bl	e3124 <__aeabi_ddiv>
   e121a:	4632      	mov	r2, r6
   e121c:	463b      	mov	r3, r7
   e121e:	f001 fca5 	bl	e2b6c <__adddf3>
   e1222:	4622      	mov	r2, r4
   e1224:	462b      	mov	r3, r5
   e1226:	f001 fe53 	bl	e2ed0 <__aeabi_dmul>
   e122a:	ec41 0b10 	vmov	d0, r0, r1
   e122e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1232:	f7fc fc45 	bl	ddac0 <fabs>
   e1236:	f7fe fa1b 	bl	df670 <__ieee754_exp>
   e123a:	4620      	mov	r0, r4
   e123c:	ec53 2b10 	vmov	r2, r3, d0
   e1240:	4629      	mov	r1, r5
   e1242:	f001 fe45 	bl	e2ed0 <__aeabi_dmul>
   e1246:	ec41 0b10 	vmov	d0, r0, r1
   e124a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e124e:	bf00      	nop
   e1250:	3cac7433 	.word	0x3cac7433
   e1254:	7fac7b1f 	.word	0x7fac7b1f
   e1258:	7fefffff 	.word	0x7fefffff
   e125c:	4035ffff 	.word	0x4035ffff
   e1260:	bfe00000 	.word	0xbfe00000
   e1264:	3fe00000 	.word	0x3fe00000
   e1268:	3e2fffff 	.word	0x3e2fffff
   e126c:	3ff00000 	.word	0x3ff00000
   e1270:	40862e41 	.word	0x40862e41
   e1274:	408633cd 	.word	0x408633cd
   e1278:	8fb9f87d 	.word	0x8fb9f87d
   e127c:	3fefffff 	.word	0x3fefffff

000e1280 <__ieee754_sqrt>:
   e1280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1284:	4965      	ldr	r1, [pc, #404]	; (e141c <__ieee754_sqrt+0x19c>)
   e1286:	ec55 4b10 	vmov	r4, r5, d0
   e128a:	460e      	mov	r6, r1
   e128c:	4029      	ands	r1, r5
   e128e:	42b1      	cmp	r1, r6
   e1290:	f000 8097 	beq.w	e13c2 <__ieee754_sqrt+0x142>
   e1294:	2d00      	cmp	r5, #0
   e1296:	462b      	mov	r3, r5
   e1298:	ee10 2a10 	vmov	r2, s0
   e129c:	dd74      	ble.n	e1388 <__ieee754_sqrt+0x108>
   e129e:	152f      	asrs	r7, r5, #20
   e12a0:	d07f      	beq.n	e13a2 <__ieee754_sqrt+0x122>
   e12a2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   e12a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e12aa:	07f9      	lsls	r1, r7, #31
   e12ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e12b0:	d465      	bmi.n	e137e <__ieee754_sqrt+0xfe>
   e12b2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   e12b6:	2600      	movs	r6, #0
   e12b8:	440b      	add	r3, r1
   e12ba:	107f      	asrs	r7, r7, #1
   e12bc:	0052      	lsls	r2, r2, #1
   e12be:	46b6      	mov	lr, r6
   e12c0:	2016      	movs	r0, #22
   e12c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   e12c6:	eb0e 0401 	add.w	r4, lr, r1
   e12ca:	429c      	cmp	r4, r3
   e12cc:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   e12d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e12d4:	dc03      	bgt.n	e12de <__ieee754_sqrt+0x5e>
   e12d6:	1b1b      	subs	r3, r3, r4
   e12d8:	eb04 0e01 	add.w	lr, r4, r1
   e12dc:	440e      	add	r6, r1
   e12de:	3801      	subs	r0, #1
   e12e0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   e12e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e12e8:	d1ed      	bne.n	e12c6 <__ieee754_sqrt+0x46>
   e12ea:	4684      	mov	ip, r0
   e12ec:	2420      	movs	r4, #32
   e12ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   e12f2:	e009      	b.n	e1308 <__ieee754_sqrt+0x88>
   e12f4:	d020      	beq.n	e1338 <__ieee754_sqrt+0xb8>
   e12f6:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   e12fa:	3c01      	subs	r4, #1
   e12fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1300:	442b      	add	r3, r5
   e1302:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1306:	d020      	beq.n	e134a <__ieee754_sqrt+0xca>
   e1308:	459e      	cmp	lr, r3
   e130a:	eb01 050c 	add.w	r5, r1, ip
   e130e:	daf1      	bge.n	e12f4 <__ieee754_sqrt+0x74>
   e1310:	2d00      	cmp	r5, #0
   e1312:	eb05 0c01 	add.w	ip, r5, r1
   e1316:	db09      	blt.n	e132c <__ieee754_sqrt+0xac>
   e1318:	46f0      	mov	r8, lr
   e131a:	4295      	cmp	r5, r2
   e131c:	ebce 0303 	rsb	r3, lr, r3
   e1320:	d900      	bls.n	e1324 <__ieee754_sqrt+0xa4>
   e1322:	3b01      	subs	r3, #1
   e1324:	1b52      	subs	r2, r2, r5
   e1326:	4408      	add	r0, r1
   e1328:	46c6      	mov	lr, r8
   e132a:	e7e4      	b.n	e12f6 <__ieee754_sqrt+0x76>
   e132c:	f1bc 0f00 	cmp.w	ip, #0
   e1330:	dbf2      	blt.n	e1318 <__ieee754_sqrt+0x98>
   e1332:	f10e 0801 	add.w	r8, lr, #1
   e1336:	e7f0      	b.n	e131a <__ieee754_sqrt+0x9a>
   e1338:	4295      	cmp	r5, r2
   e133a:	d81e      	bhi.n	e137a <__ieee754_sqrt+0xfa>
   e133c:	2d00      	cmp	r5, #0
   e133e:	eb05 0c01 	add.w	ip, r5, r1
   e1342:	db50      	blt.n	e13e6 <__ieee754_sqrt+0x166>
   e1344:	4698      	mov	r8, r3
   e1346:	2300      	movs	r3, #0
   e1348:	e7ec      	b.n	e1324 <__ieee754_sqrt+0xa4>
   e134a:	4313      	orrs	r3, r2
   e134c:	d004      	beq.n	e1358 <__ieee754_sqrt+0xd8>
   e134e:	1c42      	adds	r2, r0, #1
   e1350:	d04d      	beq.n	e13ee <__ieee754_sqrt+0x16e>
   e1352:	f000 0301 	and.w	r3, r0, #1
   e1356:	4418      	add	r0, r3
   e1358:	0840      	lsrs	r0, r0, #1
   e135a:	1071      	asrs	r1, r6, #1
   e135c:	07f3      	lsls	r3, r6, #31
   e135e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   e1362:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   e1366:	bf48      	it	mi
   e1368:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   e136c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   e1370:	4602      	mov	r2, r0
   e1372:	ec43 2b10 	vmov	d0, r2, r3
   e1376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e137a:	4673      	mov	r3, lr
   e137c:	e7bb      	b.n	e12f6 <__ieee754_sqrt+0x76>
   e137e:	005b      	lsls	r3, r3, #1
   e1380:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   e1384:	0052      	lsls	r2, r2, #1
   e1386:	e794      	b.n	e12b2 <__ieee754_sqrt+0x32>
   e1388:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e138c:	4321      	orrs	r1, r4
   e138e:	d028      	beq.n	e13e2 <__ieee754_sqrt+0x162>
   e1390:	bbad      	cbnz	r5, e13fe <__ieee754_sqrt+0x17e>
   e1392:	462f      	mov	r7, r5
   e1394:	0ad3      	lsrs	r3, r2, #11
   e1396:	3f15      	subs	r7, #21
   e1398:	0552      	lsls	r2, r2, #21
   e139a:	2b00      	cmp	r3, #0
   e139c:	d0fa      	beq.n	e1394 <__ieee754_sqrt+0x114>
   e139e:	02dd      	lsls	r5, r3, #11
   e13a0:	d428      	bmi.n	e13f4 <__ieee754_sqrt+0x174>
   e13a2:	2100      	movs	r1, #0
   e13a4:	e000      	b.n	e13a8 <__ieee754_sqrt+0x128>
   e13a6:	4601      	mov	r1, r0
   e13a8:	005b      	lsls	r3, r3, #1
   e13aa:	02dc      	lsls	r4, r3, #11
   e13ac:	f101 0001 	add.w	r0, r1, #1
   e13b0:	d5f9      	bpl.n	e13a6 <__ieee754_sqrt+0x126>
   e13b2:	f1c0 0420 	rsb	r4, r0, #32
   e13b6:	fa22 f404 	lsr.w	r4, r2, r4
   e13ba:	4323      	orrs	r3, r4
   e13bc:	1a7f      	subs	r7, r7, r1
   e13be:	4082      	lsls	r2, r0
   e13c0:	e76f      	b.n	e12a2 <__ieee754_sqrt+0x22>
   e13c2:	ee10 2a10 	vmov	r2, s0
   e13c6:	462b      	mov	r3, r5
   e13c8:	ee10 0a10 	vmov	r0, s0
   e13cc:	4629      	mov	r1, r5
   e13ce:	f001 fd7f 	bl	e2ed0 <__aeabi_dmul>
   e13d2:	4622      	mov	r2, r4
   e13d4:	462b      	mov	r3, r5
   e13d6:	f001 fbc9 	bl	e2b6c <__adddf3>
   e13da:	ec41 0b10 	vmov	d0, r0, r1
   e13de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e13e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e13e6:	f1bc 0f00 	cmp.w	ip, #0
   e13ea:	daa2      	bge.n	e1332 <__ieee754_sqrt+0xb2>
   e13ec:	e7aa      	b.n	e1344 <__ieee754_sqrt+0xc4>
   e13ee:	3601      	adds	r6, #1
   e13f0:	4620      	mov	r0, r4
   e13f2:	e7b2      	b.n	e135a <__ieee754_sqrt+0xda>
   e13f4:	2420      	movs	r4, #32
   e13f6:	f04f 31ff 	mov.w	r1, #4294967295
   e13fa:	2000      	movs	r0, #0
   e13fc:	e7db      	b.n	e13b6 <__ieee754_sqrt+0x136>
   e13fe:	ee10 2a10 	vmov	r2, s0
   e1402:	462b      	mov	r3, r5
   e1404:	4620      	mov	r0, r4
   e1406:	4629      	mov	r1, r5
   e1408:	f001 fbae 	bl	e2b68 <__aeabi_dsub>
   e140c:	4602      	mov	r2, r0
   e140e:	460b      	mov	r3, r1
   e1410:	f001 fe88 	bl	e3124 <__aeabi_ddiv>
   e1414:	ec41 0b10 	vmov	d0, r0, r1
   e1418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e141c:	7ff00000 	.word	0x7ff00000

000e1420 <__kernel_cos>:
   e1420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1424:	ec57 6b10 	vmov	r6, r7, d0
   e1428:	ed2d 8b02 	vpush	{d8}
   e142c:	eeb0 8a41 	vmov.f32	s16, s2
   e1430:	eef0 8a61 	vmov.f32	s17, s3
   e1434:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e1438:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   e143c:	b083      	sub	sp, #12
   e143e:	da72      	bge.n	e1526 <__kernel_cos+0x106>
   e1440:	ee10 0a10 	vmov	r0, s0
   e1444:	4639      	mov	r1, r7
   e1446:	f001 fff3 	bl	e3430 <__aeabi_d2iz>
   e144a:	2800      	cmp	r0, #0
   e144c:	f000 80f6 	beq.w	e163c <__kernel_cos+0x21c>
   e1450:	4632      	mov	r2, r6
   e1452:	463b      	mov	r3, r7
   e1454:	4630      	mov	r0, r6
   e1456:	4639      	mov	r1, r7
   e1458:	f001 fd3a 	bl	e2ed0 <__aeabi_dmul>
   e145c:	a37c      	add	r3, pc, #496	; (adr r3, e1650 <__kernel_cos+0x230>)
   e145e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1462:	4604      	mov	r4, r0
   e1464:	460d      	mov	r5, r1
   e1466:	f001 fd33 	bl	e2ed0 <__aeabi_dmul>
   e146a:	a37b      	add	r3, pc, #492	; (adr r3, e1658 <__kernel_cos+0x238>)
   e146c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1470:	f001 fb7c 	bl	e2b6c <__adddf3>
   e1474:	4622      	mov	r2, r4
   e1476:	462b      	mov	r3, r5
   e1478:	f001 fd2a 	bl	e2ed0 <__aeabi_dmul>
   e147c:	a378      	add	r3, pc, #480	; (adr r3, e1660 <__kernel_cos+0x240>)
   e147e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1482:	f001 fb71 	bl	e2b68 <__aeabi_dsub>
   e1486:	4622      	mov	r2, r4
   e1488:	462b      	mov	r3, r5
   e148a:	f001 fd21 	bl	e2ed0 <__aeabi_dmul>
   e148e:	a376      	add	r3, pc, #472	; (adr r3, e1668 <__kernel_cos+0x248>)
   e1490:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1494:	f001 fb6a 	bl	e2b6c <__adddf3>
   e1498:	4622      	mov	r2, r4
   e149a:	462b      	mov	r3, r5
   e149c:	f001 fd18 	bl	e2ed0 <__aeabi_dmul>
   e14a0:	a373      	add	r3, pc, #460	; (adr r3, e1670 <__kernel_cos+0x250>)
   e14a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e14a6:	f001 fb5f 	bl	e2b68 <__aeabi_dsub>
   e14aa:	4622      	mov	r2, r4
   e14ac:	462b      	mov	r3, r5
   e14ae:	f001 fd0f 	bl	e2ed0 <__aeabi_dmul>
   e14b2:	a371      	add	r3, pc, #452	; (adr r3, e1678 <__kernel_cos+0x258>)
   e14b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e14b8:	f001 fb58 	bl	e2b6c <__adddf3>
   e14bc:	4622      	mov	r2, r4
   e14be:	462b      	mov	r3, r5
   e14c0:	f001 fd06 	bl	e2ed0 <__aeabi_dmul>
   e14c4:	4682      	mov	sl, r0
   e14c6:	468b      	mov	fp, r1
   e14c8:	2200      	movs	r2, #0
   e14ca:	4b71      	ldr	r3, [pc, #452]	; (e1690 <__kernel_cos+0x270>)
   e14cc:	4620      	mov	r0, r4
   e14ce:	4629      	mov	r1, r5
   e14d0:	f001 fcfe 	bl	e2ed0 <__aeabi_dmul>
   e14d4:	4652      	mov	r2, sl
   e14d6:	4680      	mov	r8, r0
   e14d8:	4689      	mov	r9, r1
   e14da:	465b      	mov	r3, fp
   e14dc:	4620      	mov	r0, r4
   e14de:	4629      	mov	r1, r5
   e14e0:	f001 fcf6 	bl	e2ed0 <__aeabi_dmul>
   e14e4:	ec53 2b18 	vmov	r2, r3, d8
   e14e8:	4604      	mov	r4, r0
   e14ea:	460d      	mov	r5, r1
   e14ec:	4630      	mov	r0, r6
   e14ee:	4639      	mov	r1, r7
   e14f0:	f001 fcee 	bl	e2ed0 <__aeabi_dmul>
   e14f4:	4602      	mov	r2, r0
   e14f6:	460b      	mov	r3, r1
   e14f8:	4620      	mov	r0, r4
   e14fa:	4629      	mov	r1, r5
   e14fc:	f001 fb34 	bl	e2b68 <__aeabi_dsub>
   e1500:	4602      	mov	r2, r0
   e1502:	460b      	mov	r3, r1
   e1504:	4640      	mov	r0, r8
   e1506:	4649      	mov	r1, r9
   e1508:	f001 fb2e 	bl	e2b68 <__aeabi_dsub>
   e150c:	4602      	mov	r2, r0
   e150e:	460b      	mov	r3, r1
   e1510:	2000      	movs	r0, #0
   e1512:	4960      	ldr	r1, [pc, #384]	; (e1694 <__kernel_cos+0x274>)
   e1514:	f001 fb28 	bl	e2b68 <__aeabi_dsub>
   e1518:	ec41 0b10 	vmov	d0, r0, r1
   e151c:	b003      	add	sp, #12
   e151e:	ecbd 8b02 	vpop	{d8}
   e1522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1526:	ee10 2a10 	vmov	r2, s0
   e152a:	ee10 0a10 	vmov	r0, s0
   e152e:	463b      	mov	r3, r7
   e1530:	4639      	mov	r1, r7
   e1532:	f001 fccd 	bl	e2ed0 <__aeabi_dmul>
   e1536:	a346      	add	r3, pc, #280	; (adr r3, e1650 <__kernel_cos+0x230>)
   e1538:	e9d3 2300 	ldrd	r2, r3, [r3]
   e153c:	4604      	mov	r4, r0
   e153e:	460d      	mov	r5, r1
   e1540:	f001 fcc6 	bl	e2ed0 <__aeabi_dmul>
   e1544:	a344      	add	r3, pc, #272	; (adr r3, e1658 <__kernel_cos+0x238>)
   e1546:	e9d3 2300 	ldrd	r2, r3, [r3]
   e154a:	f001 fb0f 	bl	e2b6c <__adddf3>
   e154e:	4622      	mov	r2, r4
   e1550:	462b      	mov	r3, r5
   e1552:	f001 fcbd 	bl	e2ed0 <__aeabi_dmul>
   e1556:	a342      	add	r3, pc, #264	; (adr r3, e1660 <__kernel_cos+0x240>)
   e1558:	e9d3 2300 	ldrd	r2, r3, [r3]
   e155c:	f001 fb04 	bl	e2b68 <__aeabi_dsub>
   e1560:	4622      	mov	r2, r4
   e1562:	462b      	mov	r3, r5
   e1564:	f001 fcb4 	bl	e2ed0 <__aeabi_dmul>
   e1568:	a33f      	add	r3, pc, #252	; (adr r3, e1668 <__kernel_cos+0x248>)
   e156a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e156e:	f001 fafd 	bl	e2b6c <__adddf3>
   e1572:	4622      	mov	r2, r4
   e1574:	462b      	mov	r3, r5
   e1576:	f001 fcab 	bl	e2ed0 <__aeabi_dmul>
   e157a:	a33d      	add	r3, pc, #244	; (adr r3, e1670 <__kernel_cos+0x250>)
   e157c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1580:	f001 faf2 	bl	e2b68 <__aeabi_dsub>
   e1584:	4622      	mov	r2, r4
   e1586:	462b      	mov	r3, r5
   e1588:	f001 fca2 	bl	e2ed0 <__aeabi_dmul>
   e158c:	a33a      	add	r3, pc, #232	; (adr r3, e1678 <__kernel_cos+0x258>)
   e158e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1592:	f001 faeb 	bl	e2b6c <__adddf3>
   e1596:	462b      	mov	r3, r5
   e1598:	4622      	mov	r2, r4
   e159a:	f001 fc99 	bl	e2ed0 <__aeabi_dmul>
   e159e:	4b3e      	ldr	r3, [pc, #248]	; (e1698 <__kernel_cos+0x278>)
   e15a0:	4599      	cmp	r9, r3
   e15a2:	4682      	mov	sl, r0
   e15a4:	468b      	mov	fp, r1
   e15a6:	dd8f      	ble.n	e14c8 <__kernel_cos+0xa8>
   e15a8:	4b3c      	ldr	r3, [pc, #240]	; (e169c <__kernel_cos+0x27c>)
   e15aa:	4599      	cmp	r9, r3
   e15ac:	dc3d      	bgt.n	e162a <__kernel_cos+0x20a>
   e15ae:	2200      	movs	r2, #0
   e15b0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e15b4:	2000      	movs	r0, #0
   e15b6:	4937      	ldr	r1, [pc, #220]	; (e1694 <__kernel_cos+0x274>)
   e15b8:	4690      	mov	r8, r2
   e15ba:	4699      	mov	r9, r3
   e15bc:	f001 fad4 	bl	e2b68 <__aeabi_dsub>
   e15c0:	e9cd 0100 	strd	r0, r1, [sp]
   e15c4:	2200      	movs	r2, #0
   e15c6:	4b32      	ldr	r3, [pc, #200]	; (e1690 <__kernel_cos+0x270>)
   e15c8:	4620      	mov	r0, r4
   e15ca:	4629      	mov	r1, r5
   e15cc:	f001 fc80 	bl	e2ed0 <__aeabi_dmul>
   e15d0:	4642      	mov	r2, r8
   e15d2:	464b      	mov	r3, r9
   e15d4:	f001 fac8 	bl	e2b68 <__aeabi_dsub>
   e15d8:	4652      	mov	r2, sl
   e15da:	4680      	mov	r8, r0
   e15dc:	4689      	mov	r9, r1
   e15de:	465b      	mov	r3, fp
   e15e0:	4620      	mov	r0, r4
   e15e2:	4629      	mov	r1, r5
   e15e4:	f001 fc74 	bl	e2ed0 <__aeabi_dmul>
   e15e8:	ec53 2b18 	vmov	r2, r3, d8
   e15ec:	4604      	mov	r4, r0
   e15ee:	460d      	mov	r5, r1
   e15f0:	4630      	mov	r0, r6
   e15f2:	4639      	mov	r1, r7
   e15f4:	f001 fc6c 	bl	e2ed0 <__aeabi_dmul>
   e15f8:	4602      	mov	r2, r0
   e15fa:	460b      	mov	r3, r1
   e15fc:	4620      	mov	r0, r4
   e15fe:	4629      	mov	r1, r5
   e1600:	f001 fab2 	bl	e2b68 <__aeabi_dsub>
   e1604:	4602      	mov	r2, r0
   e1606:	460b      	mov	r3, r1
   e1608:	4640      	mov	r0, r8
   e160a:	4649      	mov	r1, r9
   e160c:	f001 faac 	bl	e2b68 <__aeabi_dsub>
   e1610:	4602      	mov	r2, r0
   e1612:	460b      	mov	r3, r1
   e1614:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1618:	f001 faa6 	bl	e2b68 <__aeabi_dsub>
   e161c:	ec41 0b10 	vmov	d0, r0, r1
   e1620:	b003      	add	sp, #12
   e1622:	ecbd 8b02 	vpop	{d8}
   e1626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e162a:	ed9f 7b15 	vldr	d7, [pc, #84]	; e1680 <__kernel_cos+0x260>
   e162e:	f04f 0800 	mov.w	r8, #0
   e1632:	ed8d 7b00 	vstr	d7, [sp]
   e1636:	f8df 9068 	ldr.w	r9, [pc, #104]	; e16a0 <__kernel_cos+0x280>
   e163a:	e7c3      	b.n	e15c4 <__kernel_cos+0x1a4>
   e163c:	ed9f 0b12 	vldr	d0, [pc, #72]	; e1688 <__kernel_cos+0x268>
   e1640:	b003      	add	sp, #12
   e1642:	ecbd 8b02 	vpop	{d8}
   e1646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e164a:	bf00      	nop
   e164c:	f3af 8000 	nop.w
   e1650:	be8838d4 	.word	0xbe8838d4
   e1654:	bda8fae9 	.word	0xbda8fae9
   e1658:	bdb4b1c4 	.word	0xbdb4b1c4
   e165c:	3e21ee9e 	.word	0x3e21ee9e
   e1660:	809c52ad 	.word	0x809c52ad
   e1664:	3e927e4f 	.word	0x3e927e4f
   e1668:	19cb1590 	.word	0x19cb1590
   e166c:	3efa01a0 	.word	0x3efa01a0
   e1670:	16c15177 	.word	0x16c15177
   e1674:	3f56c16c 	.word	0x3f56c16c
   e1678:	5555554c 	.word	0x5555554c
   e167c:	3fa55555 	.word	0x3fa55555
   e1680:	00000000 	.word	0x00000000
   e1684:	3fe70000 	.word	0x3fe70000
   e1688:	00000000 	.word	0x00000000
   e168c:	3ff00000 	.word	0x3ff00000
   e1690:	3fe00000 	.word	0x3fe00000
   e1694:	3ff00000 	.word	0x3ff00000
   e1698:	3fd33332 	.word	0x3fd33332
   e169c:	3fe90000 	.word	0x3fe90000
   e16a0:	3fd20000 	.word	0x3fd20000
   e16a4:	00000000 	.word	0x00000000

000e16a8 <__kernel_rem_pio2>:
   e16a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e16ac:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e16b0:	4c81      	ldr	r4, [pc, #516]	; (e18b8 <__kernel_rem_pio2+0x210>)
   e16b2:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e16b4:	4d81      	ldr	r5, [pc, #516]	; (e18bc <__kernel_rem_pio2+0x214>)
   e16b6:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e16ba:	9407      	str	r4, [sp, #28]
   e16bc:	4626      	mov	r6, r4
   e16be:	1ed4      	subs	r4, r2, #3
   e16c0:	fb85 7504 	smull	r7, r5, r5, r4
   e16c4:	17e4      	asrs	r4, r4, #31
   e16c6:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e16ca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e16ce:	461d      	mov	r5, r3
   e16d0:	930a      	str	r3, [sp, #40]	; 0x28
   e16d2:	1c63      	adds	r3, r4, #1
   e16d4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e16d8:	3d01      	subs	r5, #1
   e16da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e16de:	9306      	str	r3, [sp, #24]
   e16e0:	462b      	mov	r3, r5
   e16e2:	940b      	str	r4, [sp, #44]	; 0x2c
   e16e4:	9500      	str	r5, [sp, #0]
   e16e6:	1b65      	subs	r5, r4, r5
   e16e8:	18f4      	adds	r4, r6, r3
   e16ea:	9003      	str	r0, [sp, #12]
   e16ec:	9108      	str	r1, [sp, #32]
   e16ee:	d416      	bmi.n	e171e <__kernel_rem_pio2+0x76>
   e16f0:	442c      	add	r4, r5
   e16f2:	3401      	adds	r4, #1
   e16f4:	ae22      	add	r6, sp, #136	; 0x88
   e16f6:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e16f8:	e008      	b.n	e170c <__kernel_rem_pio2+0x64>
   e16fa:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e16fe:	f001 fb81 	bl	e2e04 <__aeabi_i2d>
   e1702:	3501      	adds	r5, #1
   e1704:	42a5      	cmp	r5, r4
   e1706:	e8e6 0102 	strd	r0, r1, [r6], #8
   e170a:	d008      	beq.n	e171e <__kernel_rem_pio2+0x76>
   e170c:	2d00      	cmp	r5, #0
   e170e:	daf4      	bge.n	e16fa <__kernel_rem_pio2+0x52>
   e1710:	3501      	adds	r5, #1
   e1712:	2000      	movs	r0, #0
   e1714:	2100      	movs	r1, #0
   e1716:	42a5      	cmp	r5, r4
   e1718:	e8e6 0102 	strd	r0, r1, [r6], #8
   e171c:	d1f6      	bne.n	e170c <__kernel_rem_pio2+0x64>
   e171e:	9b07      	ldr	r3, [sp, #28]
   e1720:	2b00      	cmp	r3, #0
   e1722:	f2c0 83c2 	blt.w	e1eaa <__kernel_rem_pio2+0x802>
   e1726:	9b07      	ldr	r3, [sp, #28]
   e1728:	f103 0b01 	add.w	fp, r3, #1
   e172c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e172e:	a922      	add	r1, sp, #136	; 0x88
   e1730:	00db      	lsls	r3, r3, #3
   e1732:	461a      	mov	r2, r3
   e1734:	eb01 0903 	add.w	r9, r1, r3
   e1738:	9304      	str	r3, [sp, #16]
   e173a:	9b03      	ldr	r3, [sp, #12]
   e173c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e1740:	4619      	mov	r1, r3
   e1742:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e1746:	eb01 0802 	add.w	r8, r1, r2
   e174a:	9b00      	ldr	r3, [sp, #0]
   e174c:	2b00      	cmp	r3, #0
   e174e:	f2c0 818f 	blt.w	e1a70 <__kernel_rem_pio2+0x3c8>
   e1752:	9c03      	ldr	r4, [sp, #12]
   e1754:	464d      	mov	r5, r9
   e1756:	2600      	movs	r6, #0
   e1758:	2700      	movs	r7, #0
   e175a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e175e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e1762:	f001 fbb5 	bl	e2ed0 <__aeabi_dmul>
   e1766:	4602      	mov	r2, r0
   e1768:	460b      	mov	r3, r1
   e176a:	4630      	mov	r0, r6
   e176c:	4639      	mov	r1, r7
   e176e:	f001 f9fd 	bl	e2b6c <__adddf3>
   e1772:	4544      	cmp	r4, r8
   e1774:	4606      	mov	r6, r0
   e1776:	460f      	mov	r7, r1
   e1778:	d1ef      	bne.n	e175a <__kernel_rem_pio2+0xb2>
   e177a:	e8ea 6702 	strd	r6, r7, [sl], #8
   e177e:	45da      	cmp	sl, fp
   e1780:	f109 0908 	add.w	r9, r9, #8
   e1784:	d1e1      	bne.n	e174a <__kernel_rem_pio2+0xa2>
   e1786:	9907      	ldr	r1, [sp, #28]
   e1788:	9804      	ldr	r0, [sp, #16]
   e178a:	9c03      	ldr	r4, [sp, #12]
   e178c:	9104      	str	r1, [sp, #16]
   e178e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e1792:	3b02      	subs	r3, #2
   e1794:	009b      	lsls	r3, r3, #2
   e1796:	4420      	add	r0, r4
   e1798:	1d1a      	adds	r2, r3, #4
   e179a:	4683      	mov	fp, r0
   e179c:	a80e      	add	r0, sp, #56	; 0x38
   e179e:	4402      	add	r2, r0
   e17a0:	4403      	add	r3, r0
   e17a2:	920d      	str	r2, [sp, #52]	; 0x34
   e17a4:	930c      	str	r3, [sp, #48]	; 0x30
   e17a6:	9a04      	ldr	r2, [sp, #16]
   e17a8:	a99a      	add	r1, sp, #616	; 0x268
   e17aa:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e17ae:	2a00      	cmp	r2, #0
   e17b0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e17b4:	dd29      	ble.n	e180a <__kernel_rem_pio2+0x162>
   e17b6:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e17ba:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e17be:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e17c2:	2200      	movs	r2, #0
   e17c4:	4b3e      	ldr	r3, [pc, #248]	; (e18c0 <__kernel_rem_pio2+0x218>)
   e17c6:	4620      	mov	r0, r4
   e17c8:	4629      	mov	r1, r5
   e17ca:	f001 fb81 	bl	e2ed0 <__aeabi_dmul>
   e17ce:	f001 fe2f 	bl	e3430 <__aeabi_d2iz>
   e17d2:	f001 fb17 	bl	e2e04 <__aeabi_i2d>
   e17d6:	2200      	movs	r2, #0
   e17d8:	4b3a      	ldr	r3, [pc, #232]	; (e18c4 <__kernel_rem_pio2+0x21c>)
   e17da:	4606      	mov	r6, r0
   e17dc:	460f      	mov	r7, r1
   e17de:	f001 fb77 	bl	e2ed0 <__aeabi_dmul>
   e17e2:	4602      	mov	r2, r0
   e17e4:	460b      	mov	r3, r1
   e17e6:	4620      	mov	r0, r4
   e17e8:	4629      	mov	r1, r5
   e17ea:	f001 f9bd 	bl	e2b68 <__aeabi_dsub>
   e17ee:	f001 fe1f 	bl	e3430 <__aeabi_d2iz>
   e17f2:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e17f6:	f849 0f04 	str.w	r0, [r9, #4]!
   e17fa:	4639      	mov	r1, r7
   e17fc:	4630      	mov	r0, r6
   e17fe:	f001 f9b5 	bl	e2b6c <__adddf3>
   e1802:	45d0      	cmp	r8, sl
   e1804:	4604      	mov	r4, r0
   e1806:	460d      	mov	r5, r1
   e1808:	d1db      	bne.n	e17c2 <__kernel_rem_pio2+0x11a>
   e180a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e180e:	ec45 4b10 	vmov	d0, r4, r5
   e1812:	4648      	mov	r0, r9
   e1814:	f001 f910 	bl	e2a38 <scalbn>
   e1818:	ec55 4b10 	vmov	r4, r5, d0
   e181c:	2200      	movs	r2, #0
   e181e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e1822:	ee10 0a10 	vmov	r0, s0
   e1826:	4629      	mov	r1, r5
   e1828:	f001 fb52 	bl	e2ed0 <__aeabi_dmul>
   e182c:	ec41 0b10 	vmov	d0, r0, r1
   e1830:	f7fc f94e 	bl	ddad0 <floor>
   e1834:	2200      	movs	r2, #0
   e1836:	ec51 0b10 	vmov	r0, r1, d0
   e183a:	4b23      	ldr	r3, [pc, #140]	; (e18c8 <__kernel_rem_pio2+0x220>)
   e183c:	f001 fb48 	bl	e2ed0 <__aeabi_dmul>
   e1840:	4602      	mov	r2, r0
   e1842:	460b      	mov	r3, r1
   e1844:	4620      	mov	r0, r4
   e1846:	4629      	mov	r1, r5
   e1848:	f001 f98e 	bl	e2b68 <__aeabi_dsub>
   e184c:	460d      	mov	r5, r1
   e184e:	4604      	mov	r4, r0
   e1850:	f001 fdee 	bl	e3430 <__aeabi_d2iz>
   e1854:	4680      	mov	r8, r0
   e1856:	f001 fad5 	bl	e2e04 <__aeabi_i2d>
   e185a:	460b      	mov	r3, r1
   e185c:	4602      	mov	r2, r0
   e185e:	4629      	mov	r1, r5
   e1860:	4620      	mov	r0, r4
   e1862:	f001 f981 	bl	e2b68 <__aeabi_dsub>
   e1866:	464b      	mov	r3, r9
   e1868:	2b00      	cmp	r3, #0
   e186a:	4606      	mov	r6, r0
   e186c:	460f      	mov	r7, r1
   e186e:	f340 80e5 	ble.w	e1a3c <__kernel_rem_pio2+0x394>
   e1872:	9a04      	ldr	r2, [sp, #16]
   e1874:	a90e      	add	r1, sp, #56	; 0x38
   e1876:	3a01      	subs	r2, #1
   e1878:	f1c9 0318 	rsb	r3, r9, #24
   e187c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e1880:	fa45 f103 	asr.w	r1, r5, r3
   e1884:	fa01 f303 	lsl.w	r3, r1, r3
   e1888:	a80e      	add	r0, sp, #56	; 0x38
   e188a:	1aeb      	subs	r3, r5, r3
   e188c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e1890:	f1c9 0517 	rsb	r5, r9, #23
   e1894:	4488      	add	r8, r1
   e1896:	fa43 f505 	asr.w	r5, r3, r5
   e189a:	2d00      	cmp	r5, #0
   e189c:	dd41      	ble.n	e1922 <__kernel_rem_pio2+0x27a>
   e189e:	9b04      	ldr	r3, [sp, #16]
   e18a0:	2b00      	cmp	r3, #0
   e18a2:	f108 0801 	add.w	r8, r8, #1
   e18a6:	f340 82c9 	ble.w	e1e3c <__kernel_rem_pio2+0x794>
   e18aa:	2200      	movs	r2, #0
   e18ac:	4614      	mov	r4, r2
   e18ae:	a90d      	add	r1, sp, #52	; 0x34
   e18b0:	9804      	ldr	r0, [sp, #16]
   e18b2:	46ae      	mov	lr, r5
   e18b4:	e012      	b.n	e18dc <__kernel_rem_pio2+0x234>
   e18b6:	bf00      	nop
   e18b8:	000e84f8 	.word	0x000e84f8
   e18bc:	2aaaaaab 	.word	0x2aaaaaab
   e18c0:	3e700000 	.word	0x3e700000
   e18c4:	41700000 	.word	0x41700000
   e18c8:	40200000 	.word	0x40200000
   e18cc:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e18d0:	b10b      	cbz	r3, e18d6 <__kernel_rem_pio2+0x22e>
   e18d2:	600d      	str	r5, [r1, #0]
   e18d4:	2401      	movs	r4, #1
   e18d6:	3201      	adds	r2, #1
   e18d8:	4290      	cmp	r0, r2
   e18da:	dd0d      	ble.n	e18f8 <__kernel_rem_pio2+0x250>
   e18dc:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e18e0:	2c00      	cmp	r4, #0
   e18e2:	d0f3      	beq.n	e18cc <__kernel_rem_pio2+0x224>
   e18e4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e18e8:	3201      	adds	r2, #1
   e18ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e18ee:	4290      	cmp	r0, r2
   e18f0:	600b      	str	r3, [r1, #0]
   e18f2:	f04f 0401 	mov.w	r4, #1
   e18f6:	dcf1      	bgt.n	e18dc <__kernel_rem_pio2+0x234>
   e18f8:	4675      	mov	r5, lr
   e18fa:	9b06      	ldr	r3, [sp, #24]
   e18fc:	2b00      	cmp	r3, #0
   e18fe:	dd0e      	ble.n	e191e <__kernel_rem_pio2+0x276>
   e1900:	2b01      	cmp	r3, #1
   e1902:	f000 80a3 	beq.w	e1a4c <__kernel_rem_pio2+0x3a4>
   e1906:	2b02      	cmp	r3, #2
   e1908:	d109      	bne.n	e191e <__kernel_rem_pio2+0x276>
   e190a:	9b04      	ldr	r3, [sp, #16]
   e190c:	1e5a      	subs	r2, r3, #1
   e190e:	ab0e      	add	r3, sp, #56	; 0x38
   e1910:	a90e      	add	r1, sp, #56	; 0x38
   e1912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1916:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e191a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e191e:	2d02      	cmp	r5, #2
   e1920:	d074      	beq.n	e1a0c <__kernel_rem_pio2+0x364>
   e1922:	2200      	movs	r2, #0
   e1924:	2300      	movs	r3, #0
   e1926:	4630      	mov	r0, r6
   e1928:	4639      	mov	r1, r7
   e192a:	f001 fd39 	bl	e33a0 <__aeabi_dcmpeq>
   e192e:	2800      	cmp	r0, #0
   e1930:	f000 8249 	beq.w	e1dc6 <__kernel_rem_pio2+0x71e>
   e1934:	9a04      	ldr	r2, [sp, #16]
   e1936:	9b07      	ldr	r3, [sp, #28]
   e1938:	1e50      	subs	r0, r2, #1
   e193a:	4283      	cmp	r3, r0
   e193c:	dc10      	bgt.n	e1960 <__kernel_rem_pio2+0x2b8>
   e193e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e1942:	3b01      	subs	r3, #1
   e1944:	aa0e      	add	r2, sp, #56	; 0x38
   e1946:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e1948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e194c:	2200      	movs	r2, #0
   e194e:	f853 1904 	ldr.w	r1, [r3], #-4
   e1952:	42a3      	cmp	r3, r4
   e1954:	ea42 0201 	orr.w	r2, r2, r1
   e1958:	d1f9      	bne.n	e194e <__kernel_rem_pio2+0x2a6>
   e195a:	2a00      	cmp	r2, #0
   e195c:	f040 80a4 	bne.w	e1aa8 <__kernel_rem_pio2+0x400>
   e1960:	9b07      	ldr	r3, [sp, #28]
   e1962:	aa0e      	add	r2, sp, #56	; 0x38
   e1964:	3b01      	subs	r3, #1
   e1966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e196a:	2b00      	cmp	r3, #0
   e196c:	f040 8264 	bne.w	e1e38 <__kernel_rem_pio2+0x790>
   e1970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e1972:	2301      	movs	r3, #1
   e1974:	f852 1904 	ldr.w	r1, [r2], #-4
   e1978:	3301      	adds	r3, #1
   e197a:	2900      	cmp	r1, #0
   e197c:	d0fa      	beq.n	e1974 <__kernel_rem_pio2+0x2cc>
   e197e:	9a04      	ldr	r2, [sp, #16]
   e1980:	18d3      	adds	r3, r2, r3
   e1982:	f102 0a01 	add.w	sl, r2, #1
   e1986:	459a      	cmp	sl, r3
   e1988:	9309      	str	r3, [sp, #36]	; 0x24
   e198a:	dc3c      	bgt.n	e1a06 <__kernel_rem_pio2+0x35e>
   e198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e198e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e1990:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1992:	eb0a 0903 	add.w	r9, sl, r3
   e1996:	9b04      	ldr	r3, [sp, #16]
   e1998:	4698      	mov	r8, r3
   e199a:	4490      	add	r8, r2
   e199c:	188b      	adds	r3, r1, r2
   e199e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e19a2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e19a4:	f109 39ff 	add.w	r9, r9, #4294967295
   e19a8:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e19ac:	aa22      	add	r2, sp, #136	; 0x88
   e19ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e19b2:	9304      	str	r3, [sp, #16]
   e19b4:	ab72      	add	r3, sp, #456	; 0x1c8
   e19b6:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e19ba:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e19be:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e19c2:	f001 fa1f 	bl	e2e04 <__aeabi_i2d>
   e19c6:	9b00      	ldr	r3, [sp, #0]
   e19c8:	2b00      	cmp	r3, #0
   e19ca:	e8e8 0102 	strd	r0, r1, [r8], #8
   e19ce:	f04f 0600 	mov.w	r6, #0
   e19d2:	f04f 0700 	mov.w	r7, #0
   e19d6:	db11      	blt.n	e19fc <__kernel_rem_pio2+0x354>
   e19d8:	9c03      	ldr	r4, [sp, #12]
   e19da:	4645      	mov	r5, r8
   e19dc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e19e0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e19e4:	f001 fa74 	bl	e2ed0 <__aeabi_dmul>
   e19e8:	4602      	mov	r2, r0
   e19ea:	460b      	mov	r3, r1
   e19ec:	4630      	mov	r0, r6
   e19ee:	4639      	mov	r1, r7
   e19f0:	f001 f8bc 	bl	e2b6c <__adddf3>
   e19f4:	455c      	cmp	r4, fp
   e19f6:	4606      	mov	r6, r0
   e19f8:	460f      	mov	r7, r1
   e19fa:	d1ef      	bne.n	e19dc <__kernel_rem_pio2+0x334>
   e19fc:	9b04      	ldr	r3, [sp, #16]
   e19fe:	4598      	cmp	r8, r3
   e1a00:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1a04:	d1db      	bne.n	e19be <__kernel_rem_pio2+0x316>
   e1a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1a08:	9304      	str	r3, [sp, #16]
   e1a0a:	e6cc      	b.n	e17a6 <__kernel_rem_pio2+0xfe>
   e1a0c:	4632      	mov	r2, r6
   e1a0e:	463b      	mov	r3, r7
   e1a10:	2000      	movs	r0, #0
   e1a12:	49b3      	ldr	r1, [pc, #716]	; (e1ce0 <__kernel_rem_pio2+0x638>)
   e1a14:	f001 f8a8 	bl	e2b68 <__aeabi_dsub>
   e1a18:	4606      	mov	r6, r0
   e1a1a:	460f      	mov	r7, r1
   e1a1c:	2c00      	cmp	r4, #0
   e1a1e:	d080      	beq.n	e1922 <__kernel_rem_pio2+0x27a>
   e1a20:	9806      	ldr	r0, [sp, #24]
   e1a22:	ed9f 0bab 	vldr	d0, [pc, #684]	; e1cd0 <__kernel_rem_pio2+0x628>
   e1a26:	f001 f807 	bl	e2a38 <scalbn>
   e1a2a:	4630      	mov	r0, r6
   e1a2c:	4639      	mov	r1, r7
   e1a2e:	ec53 2b10 	vmov	r2, r3, d0
   e1a32:	f001 f899 	bl	e2b68 <__aeabi_dsub>
   e1a36:	4606      	mov	r6, r0
   e1a38:	460f      	mov	r7, r1
   e1a3a:	e772      	b.n	e1922 <__kernel_rem_pio2+0x27a>
   e1a3c:	d111      	bne.n	e1a62 <__kernel_rem_pio2+0x3ba>
   e1a3e:	9b04      	ldr	r3, [sp, #16]
   e1a40:	aa0e      	add	r2, sp, #56	; 0x38
   e1a42:	3b01      	subs	r3, #1
   e1a44:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e1a48:	15ed      	asrs	r5, r5, #23
   e1a4a:	e726      	b.n	e189a <__kernel_rem_pio2+0x1f2>
   e1a4c:	9b04      	ldr	r3, [sp, #16]
   e1a4e:	1e5a      	subs	r2, r3, #1
   e1a50:	ab0e      	add	r3, sp, #56	; 0x38
   e1a52:	a90e      	add	r1, sp, #56	; 0x38
   e1a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1a58:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e1a5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e1a60:	e75d      	b.n	e191e <__kernel_rem_pio2+0x276>
   e1a62:	2200      	movs	r2, #0
   e1a64:	4b9f      	ldr	r3, [pc, #636]	; (e1ce4 <__kernel_rem_pio2+0x63c>)
   e1a66:	f001 fcb9 	bl	e33dc <__aeabi_dcmpge>
   e1a6a:	b958      	cbnz	r0, e1a84 <__kernel_rem_pio2+0x3dc>
   e1a6c:	4605      	mov	r5, r0
   e1a6e:	e758      	b.n	e1922 <__kernel_rem_pio2+0x27a>
   e1a70:	2600      	movs	r6, #0
   e1a72:	2700      	movs	r7, #0
   e1a74:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1a78:	45da      	cmp	sl, fp
   e1a7a:	f109 0908 	add.w	r9, r9, #8
   e1a7e:	f47f ae64 	bne.w	e174a <__kernel_rem_pio2+0xa2>
   e1a82:	e680      	b.n	e1786 <__kernel_rem_pio2+0xde>
   e1a84:	9b04      	ldr	r3, [sp, #16]
   e1a86:	2b00      	cmp	r3, #0
   e1a88:	f108 0801 	add.w	r8, r8, #1
   e1a8c:	bfc8      	it	gt
   e1a8e:	2502      	movgt	r5, #2
   e1a90:	f73f af0b 	bgt.w	e18aa <__kernel_rem_pio2+0x202>
   e1a94:	4632      	mov	r2, r6
   e1a96:	463b      	mov	r3, r7
   e1a98:	2000      	movs	r0, #0
   e1a9a:	4991      	ldr	r1, [pc, #580]	; (e1ce0 <__kernel_rem_pio2+0x638>)
   e1a9c:	f001 f864 	bl	e2b68 <__aeabi_dsub>
   e1aa0:	2502      	movs	r5, #2
   e1aa2:	4606      	mov	r6, r0
   e1aa4:	460f      	mov	r7, r1
   e1aa6:	e73c      	b.n	e1922 <__kernel_rem_pio2+0x27a>
   e1aa8:	a90e      	add	r1, sp, #56	; 0x38
   e1aaa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e1aae:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e1ab2:	9906      	ldr	r1, [sp, #24]
   e1ab4:	9000      	str	r0, [sp, #0]
   e1ab6:	3918      	subs	r1, #24
   e1ab8:	4602      	mov	r2, r0
   e1aba:	9503      	str	r5, [sp, #12]
   e1abc:	9106      	str	r1, [sp, #24]
   e1abe:	b96b      	cbnz	r3, e1adc <__kernel_rem_pio2+0x434>
   e1ac0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e1ac4:	3b01      	subs	r3, #1
   e1ac6:	a80e      	add	r0, sp, #56	; 0x38
   e1ac8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e1acc:	f853 0904 	ldr.w	r0, [r3], #-4
   e1ad0:	3a01      	subs	r2, #1
   e1ad2:	3918      	subs	r1, #24
   e1ad4:	2800      	cmp	r0, #0
   e1ad6:	d0f9      	beq.n	e1acc <__kernel_rem_pio2+0x424>
   e1ad8:	9200      	str	r2, [sp, #0]
   e1ada:	9106      	str	r1, [sp, #24]
   e1adc:	9806      	ldr	r0, [sp, #24]
   e1ade:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e1cd0 <__kernel_rem_pio2+0x628>
   e1ae2:	f000 ffa9 	bl	e2a38 <scalbn>
   e1ae6:	9b00      	ldr	r3, [sp, #0]
   e1ae8:	2b00      	cmp	r3, #0
   e1aea:	ec55 4b10 	vmov	r4, r5, d0
   e1aee:	f2c0 81c1 	blt.w	e1e74 <__kernel_rem_pio2+0x7cc>
   e1af2:	00da      	lsls	r2, r3, #3
   e1af4:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e1af8:	a90e      	add	r1, sp, #56	; 0x38
   e1afa:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e1afe:	eb08 0b02 	add.w	fp, r8, r2
   e1b02:	9206      	str	r2, [sp, #24]
   e1b04:	3604      	adds	r6, #4
   e1b06:	f10b 0708 	add.w	r7, fp, #8
   e1b0a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e1b0e:	f001 f979 	bl	e2e04 <__aeabi_i2d>
   e1b12:	4622      	mov	r2, r4
   e1b14:	462b      	mov	r3, r5
   e1b16:	f001 f9db 	bl	e2ed0 <__aeabi_dmul>
   e1b1a:	2200      	movs	r2, #0
   e1b1c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e1b20:	4b71      	ldr	r3, [pc, #452]	; (e1ce8 <__kernel_rem_pio2+0x640>)
   e1b22:	4620      	mov	r0, r4
   e1b24:	4629      	mov	r1, r5
   e1b26:	f001 f9d3 	bl	e2ed0 <__aeabi_dmul>
   e1b2a:	4547      	cmp	r7, r8
   e1b2c:	4604      	mov	r4, r0
   e1b2e:	460d      	mov	r5, r1
   e1b30:	d1eb      	bne.n	e1b0a <__kernel_rem_pio2+0x462>
   e1b32:	ac4a      	add	r4, sp, #296	; 0x128
   e1b34:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e1b38:	9404      	str	r4, [sp, #16]
   e1b3a:	f04f 0a00 	mov.w	sl, #0
   e1b3e:	f1b9 0f00 	cmp.w	r9, #0
   e1b42:	f2c0 812b 	blt.w	e1d9c <__kernel_rem_pio2+0x6f4>
   e1b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e1cec <__kernel_rem_pio2+0x644>
   e1b4a:	465d      	mov	r5, fp
   e1b4c:	a362      	add	r3, pc, #392	; (adr r3, e1cd8 <__kernel_rem_pio2+0x630>)
   e1b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1b52:	2600      	movs	r6, #0
   e1b54:	2700      	movs	r7, #0
   e1b56:	2400      	movs	r4, #0
   e1b58:	e003      	b.n	e1b62 <__kernel_rem_pio2+0x4ba>
   e1b5a:	45a2      	cmp	sl, r4
   e1b5c:	db10      	blt.n	e1b80 <__kernel_rem_pio2+0x4d8>
   e1b5e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e1b62:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e1b66:	f001 f9b3 	bl	e2ed0 <__aeabi_dmul>
   e1b6a:	4602      	mov	r2, r0
   e1b6c:	460b      	mov	r3, r1
   e1b6e:	4630      	mov	r0, r6
   e1b70:	4639      	mov	r1, r7
   e1b72:	f000 fffb 	bl	e2b6c <__adddf3>
   e1b76:	3401      	adds	r4, #1
   e1b78:	45a1      	cmp	r9, r4
   e1b7a:	4606      	mov	r6, r0
   e1b7c:	460f      	mov	r7, r1
   e1b7e:	daec      	bge.n	e1b5a <__kernel_rem_pio2+0x4b2>
   e1b80:	9b04      	ldr	r3, [sp, #16]
   e1b82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e1b86:	f1ab 0b08 	sub.w	fp, fp, #8
   e1b8a:	e9c3 6700 	strd	r6, r7, [r3]
   e1b8e:	ab70      	add	r3, sp, #448	; 0x1c0
   e1b90:	459b      	cmp	fp, r3
   e1b92:	f10a 0a01 	add.w	sl, sl, #1
   e1b96:	d1d2      	bne.n	e1b3e <__kernel_rem_pio2+0x496>
   e1b98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e1b9a:	9c04      	ldr	r4, [sp, #16]
   e1b9c:	2b03      	cmp	r3, #3
   e1b9e:	f200 808d 	bhi.w	e1cbc <__kernel_rem_pio2+0x614>
   e1ba2:	e8df f013 	tbh	[pc, r3, lsl #1]
   e1ba6:	00dd      	.short	0x00dd
   e1ba8:	00a500a5 	.word	0x00a500a5
   e1bac:	0004      	.short	0x0004
   e1bae:	9b00      	ldr	r3, [sp, #0]
   e1bb0:	2b00      	cmp	r3, #0
   e1bb2:	f340 815c 	ble.w	e1e6e <__kernel_rem_pio2+0x7c6>
   e1bb6:	9b00      	ldr	r3, [sp, #0]
   e1bb8:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e1bbc:	9b06      	ldr	r3, [sp, #24]
   e1bbe:	f10b 3bff 	add.w	fp, fp, #4294967295
   e1bc2:	18e2      	adds	r2, r4, r3
   e1bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e1bc8:	e9d2 8900 	ldrd	r8, r9, [r2]
   e1bcc:	f103 0208 	add.w	r2, r3, #8
   e1bd0:	3310      	adds	r3, #16
   e1bd2:	eb04 0a02 	add.w	sl, r4, r2
   e1bd6:	18e5      	adds	r5, r4, r3
   e1bd8:	ed3a 7b02 	vldmdb	sl!, {d7}
   e1bdc:	4642      	mov	r2, r8
   e1bde:	464b      	mov	r3, r9
   e1be0:	ec51 0b17 	vmov	r0, r1, d7
   e1be4:	ed8d 7b04 	vstr	d7, [sp, #16]
   e1be8:	f000 ffc0 	bl	e2b6c <__adddf3>
   e1bec:	4606      	mov	r6, r0
   e1bee:	460f      	mov	r7, r1
   e1bf0:	4602      	mov	r2, r0
   e1bf2:	460b      	mov	r3, r1
   e1bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1bf8:	f000 ffb6 	bl	e2b68 <__aeabi_dsub>
   e1bfc:	464b      	mov	r3, r9
   e1bfe:	4642      	mov	r2, r8
   e1c00:	f000 ffb4 	bl	e2b6c <__adddf3>
   e1c04:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e1c08:	ab4c      	add	r3, sp, #304	; 0x130
   e1c0a:	429d      	cmp	r5, r3
   e1c0c:	46b0      	mov	r8, r6
   e1c0e:	46b9      	mov	r9, r7
   e1c10:	e9ca 6700 	strd	r6, r7, [sl]
   e1c14:	d1e0      	bne.n	e1bd8 <__kernel_rem_pio2+0x530>
   e1c16:	9b00      	ldr	r3, [sp, #0]
   e1c18:	2b01      	cmp	r3, #1
   e1c1a:	f340 8128 	ble.w	e1e6e <__kernel_rem_pio2+0x7c6>
   e1c1e:	9b06      	ldr	r3, [sp, #24]
   e1c20:	4423      	add	r3, r4
   e1c22:	ed93 7b00 	vldr	d7, [r3]
   e1c26:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e1c2a:	f10b 0a10 	add.w	sl, fp, #16
   e1c2e:	ed8d 7b00 	vstr	d7, [sp]
   e1c32:	44a2      	add	sl, r4
   e1c34:	f10b 0b08 	add.w	fp, fp, #8
   e1c38:	eb04 050b 	add.w	r5, r4, fp
   e1c3c:	46d0      	mov	r8, sl
   e1c3e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e1c42:	f8cd a010 	str.w	sl, [sp, #16]
   e1c46:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e1c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1c4e:	464a      	mov	r2, r9
   e1c50:	4653      	mov	r3, sl
   e1c52:	f000 ff8b 	bl	e2b6c <__adddf3>
   e1c56:	4606      	mov	r6, r0
   e1c58:	460f      	mov	r7, r1
   e1c5a:	4602      	mov	r2, r0
   e1c5c:	460b      	mov	r3, r1
   e1c5e:	4648      	mov	r0, r9
   e1c60:	4651      	mov	r1, sl
   e1c62:	f000 ff81 	bl	e2b68 <__aeabi_dsub>
   e1c66:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1c6a:	f000 ff7f 	bl	e2b6c <__adddf3>
   e1c6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e1c72:	45c3      	cmp	fp, r8
   e1c74:	e9cd 6700 	strd	r6, r7, [sp]
   e1c78:	e9c5 6700 	strd	r6, r7, [r5]
   e1c7c:	d1e3      	bne.n	e1c46 <__kernel_rem_pio2+0x59e>
   e1c7e:	f8dd a010 	ldr.w	sl, [sp, #16]
   e1c82:	2000      	movs	r0, #0
   e1c84:	2100      	movs	r1, #0
   e1c86:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e1c8a:	f000 ff6f 	bl	e2b6c <__adddf3>
   e1c8e:	45d3      	cmp	fp, sl
   e1c90:	d1f9      	bne.n	e1c86 <__kernel_rem_pio2+0x5de>
   e1c92:	9b03      	ldr	r3, [sp, #12]
   e1c94:	2b00      	cmp	r3, #0
   e1c96:	f000 80d3 	beq.w	e1e40 <__kernel_rem_pio2+0x798>
   e1c9a:	6862      	ldr	r2, [r4, #4]
   e1c9c:	68e3      	ldr	r3, [r4, #12]
   e1c9e:	9f08      	ldr	r7, [sp, #32]
   e1ca0:	6825      	ldr	r5, [r4, #0]
   e1ca2:	68a4      	ldr	r4, [r4, #8]
   e1ca4:	603d      	str	r5, [r7, #0]
   e1ca6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e1caa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e1cae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e1cb2:	607a      	str	r2, [r7, #4]
   e1cb4:	60fb      	str	r3, [r7, #12]
   e1cb6:	60bc      	str	r4, [r7, #8]
   e1cb8:	6138      	str	r0, [r7, #16]
   e1cba:	6179      	str	r1, [r7, #20]
   e1cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1cbe:	f003 0007 	and.w	r0, r3, #7
   e1cc2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1cca:	bf00      	nop
   e1ccc:	f3af 8000 	nop.w
   e1cd0:	00000000 	.word	0x00000000
   e1cd4:	3ff00000 	.word	0x3ff00000
   e1cd8:	40000000 	.word	0x40000000
   e1cdc:	3ff921fb 	.word	0x3ff921fb
   e1ce0:	3ff00000 	.word	0x3ff00000
   e1ce4:	3fe00000 	.word	0x3fe00000
   e1ce8:	3e700000 	.word	0x3e700000
   e1cec:	000e8510 	.word	0x000e8510
   e1cf0:	9d06      	ldr	r5, [sp, #24]
   e1cf2:	3508      	adds	r5, #8
   e1cf4:	4425      	add	r5, r4
   e1cf6:	2000      	movs	r0, #0
   e1cf8:	2100      	movs	r1, #0
   e1cfa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1cfe:	f000 ff35 	bl	e2b6c <__adddf3>
   e1d02:	42a5      	cmp	r5, r4
   e1d04:	d1f9      	bne.n	e1cfa <__kernel_rem_pio2+0x652>
   e1d06:	9b03      	ldr	r3, [sp, #12]
   e1d08:	2b00      	cmp	r3, #0
   e1d0a:	d04a      	beq.n	e1da2 <__kernel_rem_pio2+0x6fa>
   e1d0c:	9e08      	ldr	r6, [sp, #32]
   e1d0e:	4602      	mov	r2, r0
   e1d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1d14:	e886 000c 	stmia.w	r6, {r2, r3}
   e1d18:	460b      	mov	r3, r1
   e1d1a:	4602      	mov	r2, r0
   e1d1c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1d20:	f000 ff22 	bl	e2b68 <__aeabi_dsub>
   e1d24:	9b00      	ldr	r3, [sp, #0]
   e1d26:	2b00      	cmp	r3, #0
   e1d28:	dd0d      	ble.n	e1d46 <__kernel_rem_pio2+0x69e>
   e1d2a:	ad4c      	add	r5, sp, #304	; 0x130
   e1d2c:	2401      	movs	r4, #1
   e1d2e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e1d32:	f000 ff1b 	bl	e2b6c <__adddf3>
   e1d36:	9b00      	ldr	r3, [sp, #0]
   e1d38:	3401      	adds	r4, #1
   e1d3a:	42a3      	cmp	r3, r4
   e1d3c:	daf7      	bge.n	e1d2e <__kernel_rem_pio2+0x686>
   e1d3e:	9b03      	ldr	r3, [sp, #12]
   e1d40:	2b00      	cmp	r3, #0
   e1d42:	f000 80a7 	beq.w	e1e94 <__kernel_rem_pio2+0x7ec>
   e1d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1d4a:	9908      	ldr	r1, [sp, #32]
   e1d4c:	4602      	mov	r2, r0
   e1d4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1d54:	f003 0007 	and.w	r0, r3, #7
   e1d58:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d60:	9b06      	ldr	r3, [sp, #24]
   e1d62:	9d00      	ldr	r5, [sp, #0]
   e1d64:	3308      	adds	r3, #8
   e1d66:	2000      	movs	r0, #0
   e1d68:	2100      	movs	r1, #0
   e1d6a:	441c      	add	r4, r3
   e1d6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e1d70:	3d01      	subs	r5, #1
   e1d72:	f000 fefb 	bl	e2b6c <__adddf3>
   e1d76:	1c6b      	adds	r3, r5, #1
   e1d78:	d1f8      	bne.n	e1d6c <__kernel_rem_pio2+0x6c4>
   e1d7a:	9b03      	ldr	r3, [sp, #12]
   e1d7c:	4602      	mov	r2, r0
   e1d7e:	2b00      	cmp	r3, #0
   e1d80:	f000 808e 	beq.w	e1ea0 <__kernel_rem_pio2+0x7f8>
   e1d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1d88:	9908      	ldr	r1, [sp, #32]
   e1d8a:	e9c1 2300 	strd	r2, r3, [r1]
   e1d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1d90:	f003 0007 	and.w	r0, r3, #7
   e1d94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1d9c:	2600      	movs	r6, #0
   e1d9e:	2700      	movs	r7, #0
   e1da0:	e6ee      	b.n	e1b80 <__kernel_rem_pio2+0x4d8>
   e1da2:	9b08      	ldr	r3, [sp, #32]
   e1da4:	4602      	mov	r2, r0
   e1da6:	e9c3 0100 	strd	r0, r1, [r3]
   e1daa:	460b      	mov	r3, r1
   e1dac:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1db0:	f000 feda 	bl	e2b68 <__aeabi_dsub>
   e1db4:	9c00      	ldr	r4, [sp, #0]
   e1db6:	2c00      	cmp	r4, #0
   e1db8:	4602      	mov	r2, r0
   e1dba:	460b      	mov	r3, r1
   e1dbc:	dcb5      	bgt.n	e1d2a <__kernel_rem_pio2+0x682>
   e1dbe:	9908      	ldr	r1, [sp, #32]
   e1dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1dc4:	e7c5      	b.n	e1d52 <__kernel_rem_pio2+0x6aa>
   e1dc6:	9b06      	ldr	r3, [sp, #24]
   e1dc8:	9503      	str	r5, [sp, #12]
   e1dca:	4258      	negs	r0, r3
   e1dcc:	ec47 6b10 	vmov	d0, r6, r7
   e1dd0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e1dd4:	f000 fe30 	bl	e2a38 <scalbn>
   e1dd8:	ec55 4b10 	vmov	r4, r5, d0
   e1ddc:	2200      	movs	r2, #0
   e1dde:	4b38      	ldr	r3, [pc, #224]	; (e1ec0 <__kernel_rem_pio2+0x818>)
   e1de0:	ee10 0a10 	vmov	r0, s0
   e1de4:	4629      	mov	r1, r5
   e1de6:	f001 faf9 	bl	e33dc <__aeabi_dcmpge>
   e1dea:	2800      	cmp	r0, #0
   e1dec:	d034      	beq.n	e1e58 <__kernel_rem_pio2+0x7b0>
   e1dee:	2200      	movs	r2, #0
   e1df0:	4b34      	ldr	r3, [pc, #208]	; (e1ec4 <__kernel_rem_pio2+0x81c>)
   e1df2:	4620      	mov	r0, r4
   e1df4:	4629      	mov	r1, r5
   e1df6:	f001 f86b 	bl	e2ed0 <__aeabi_dmul>
   e1dfa:	f001 fb19 	bl	e3430 <__aeabi_d2iz>
   e1dfe:	4606      	mov	r6, r0
   e1e00:	f001 f800 	bl	e2e04 <__aeabi_i2d>
   e1e04:	2200      	movs	r2, #0
   e1e06:	4b2e      	ldr	r3, [pc, #184]	; (e1ec0 <__kernel_rem_pio2+0x818>)
   e1e08:	f001 f862 	bl	e2ed0 <__aeabi_dmul>
   e1e0c:	4602      	mov	r2, r0
   e1e0e:	460b      	mov	r3, r1
   e1e10:	4620      	mov	r0, r4
   e1e12:	4629      	mov	r1, r5
   e1e14:	f000 fea8 	bl	e2b68 <__aeabi_dsub>
   e1e18:	f001 fb0a 	bl	e3430 <__aeabi_d2iz>
   e1e1c:	9904      	ldr	r1, [sp, #16]
   e1e1e:	9b06      	ldr	r3, [sp, #24]
   e1e20:	460a      	mov	r2, r1
   e1e22:	3318      	adds	r3, #24
   e1e24:	3201      	adds	r2, #1
   e1e26:	9306      	str	r3, [sp, #24]
   e1e28:	460b      	mov	r3, r1
   e1e2a:	a90e      	add	r1, sp, #56	; 0x38
   e1e2c:	9200      	str	r2, [sp, #0]
   e1e2e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e1e32:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e1e36:	e651      	b.n	e1adc <__kernel_rem_pio2+0x434>
   e1e38:	2301      	movs	r3, #1
   e1e3a:	e5a0      	b.n	e197e <__kernel_rem_pio2+0x2d6>
   e1e3c:	2400      	movs	r4, #0
   e1e3e:	e55c      	b.n	e18fa <__kernel_rem_pio2+0x252>
   e1e40:	e9d4 6700 	ldrd	r6, r7, [r4]
   e1e44:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e1e48:	9d08      	ldr	r5, [sp, #32]
   e1e4a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e1e4e:	e9c5 6700 	strd	r6, r7, [r5]
   e1e52:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e1e56:	e731      	b.n	e1cbc <__kernel_rem_pio2+0x614>
   e1e58:	4629      	mov	r1, r5
   e1e5a:	4620      	mov	r0, r4
   e1e5c:	f001 fae8 	bl	e3430 <__aeabi_d2iz>
   e1e60:	9a04      	ldr	r2, [sp, #16]
   e1e62:	9200      	str	r2, [sp, #0]
   e1e64:	a90e      	add	r1, sp, #56	; 0x38
   e1e66:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e1e6a:	e637      	b.n	e1adc <__kernel_rem_pio2+0x434>
   e1e6c:	ac4a      	add	r4, sp, #296	; 0x128
   e1e6e:	2000      	movs	r0, #0
   e1e70:	2100      	movs	r1, #0
   e1e72:	e70e      	b.n	e1c92 <__kernel_rem_pio2+0x5ea>
   e1e74:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e1e76:	2b03      	cmp	r3, #3
   e1e78:	f63f af20 	bhi.w	e1cbc <__kernel_rem_pio2+0x614>
   e1e7c:	a201      	add	r2, pc, #4	; (adr r2, e1e84 <__kernel_rem_pio2+0x7dc>)
   e1e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e1e82:	bf00      	nop
   e1e84:	000e1ebb 	.word	0x000e1ebb
   e1e88:	000e1eb3 	.word	0x000e1eb3
   e1e8c:	000e1eb3 	.word	0x000e1eb3
   e1e90:	000e1e6d 	.word	0x000e1e6d
   e1e94:	460b      	mov	r3, r1
   e1e96:	9908      	ldr	r1, [sp, #32]
   e1e98:	4602      	mov	r2, r0
   e1e9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1e9e:	e758      	b.n	e1d52 <__kernel_rem_pio2+0x6aa>
   e1ea0:	460b      	mov	r3, r1
   e1ea2:	9908      	ldr	r1, [sp, #32]
   e1ea4:	e9c1 2300 	strd	r2, r3, [r1]
   e1ea8:	e771      	b.n	e1d8e <__kernel_rem_pio2+0x6e6>
   e1eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1eac:	00db      	lsls	r3, r3, #3
   e1eae:	9304      	str	r3, [sp, #16]
   e1eb0:	e469      	b.n	e1786 <__kernel_rem_pio2+0xde>
   e1eb2:	2000      	movs	r0, #0
   e1eb4:	2100      	movs	r1, #0
   e1eb6:	ac4a      	add	r4, sp, #296	; 0x128
   e1eb8:	e725      	b.n	e1d06 <__kernel_rem_pio2+0x65e>
   e1eba:	2000      	movs	r0, #0
   e1ebc:	2100      	movs	r1, #0
   e1ebe:	e75c      	b.n	e1d7a <__kernel_rem_pio2+0x6d2>
   e1ec0:	41700000 	.word	0x41700000
   e1ec4:	3e700000 	.word	0x3e700000

000e1ec8 <__kernel_sin>:
   e1ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1ecc:	ec55 4b10 	vmov	r4, r5, d0
   e1ed0:	ed2d 8b02 	vpush	{d8}
   e1ed4:	eeb0 8a41 	vmov.f32	s16, s2
   e1ed8:	eef0 8a61 	vmov.f32	s17, s3
   e1edc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e1ee0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e1ee4:	b083      	sub	sp, #12
   e1ee6:	4682      	mov	sl, r0
   e1ee8:	da07      	bge.n	e1efa <__kernel_sin+0x32>
   e1eea:	ee10 0a10 	vmov	r0, s0
   e1eee:	4629      	mov	r1, r5
   e1ef0:	f001 fa9e 	bl	e3430 <__aeabi_d2iz>
   e1ef4:	2800      	cmp	r0, #0
   e1ef6:	f000 808e 	beq.w	e2016 <__kernel_sin+0x14e>
   e1efa:	4622      	mov	r2, r4
   e1efc:	462b      	mov	r3, r5
   e1efe:	4620      	mov	r0, r4
   e1f00:	4629      	mov	r1, r5
   e1f02:	f000 ffe5 	bl	e2ed0 <__aeabi_dmul>
   e1f06:	4606      	mov	r6, r0
   e1f08:	460f      	mov	r7, r1
   e1f0a:	4602      	mov	r2, r0
   e1f0c:	460b      	mov	r3, r1
   e1f0e:	4620      	mov	r0, r4
   e1f10:	4629      	mov	r1, r5
   e1f12:	f000 ffdd 	bl	e2ed0 <__aeabi_dmul>
   e1f16:	a347      	add	r3, pc, #284	; (adr r3, e2034 <__kernel_sin+0x16c>)
   e1f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f1c:	4680      	mov	r8, r0
   e1f1e:	4689      	mov	r9, r1
   e1f20:	4630      	mov	r0, r6
   e1f22:	4639      	mov	r1, r7
   e1f24:	f000 ffd4 	bl	e2ed0 <__aeabi_dmul>
   e1f28:	a344      	add	r3, pc, #272	; (adr r3, e203c <__kernel_sin+0x174>)
   e1f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f2e:	f000 fe1b 	bl	e2b68 <__aeabi_dsub>
   e1f32:	4632      	mov	r2, r6
   e1f34:	463b      	mov	r3, r7
   e1f36:	f000 ffcb 	bl	e2ed0 <__aeabi_dmul>
   e1f3a:	a342      	add	r3, pc, #264	; (adr r3, e2044 <__kernel_sin+0x17c>)
   e1f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f40:	f000 fe14 	bl	e2b6c <__adddf3>
   e1f44:	4632      	mov	r2, r6
   e1f46:	463b      	mov	r3, r7
   e1f48:	f000 ffc2 	bl	e2ed0 <__aeabi_dmul>
   e1f4c:	a33f      	add	r3, pc, #252	; (adr r3, e204c <__kernel_sin+0x184>)
   e1f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f52:	f000 fe09 	bl	e2b68 <__aeabi_dsub>
   e1f56:	4632      	mov	r2, r6
   e1f58:	463b      	mov	r3, r7
   e1f5a:	f000 ffb9 	bl	e2ed0 <__aeabi_dmul>
   e1f5e:	a33d      	add	r3, pc, #244	; (adr r3, e2054 <__kernel_sin+0x18c>)
   e1f60:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f64:	f000 fe02 	bl	e2b6c <__adddf3>
   e1f68:	e9cd 0100 	strd	r0, r1, [sp]
   e1f6c:	f1ba 0f00 	cmp.w	sl, #0
   e1f70:	d037      	beq.n	e1fe2 <__kernel_sin+0x11a>
   e1f72:	2200      	movs	r2, #0
   e1f74:	4b2e      	ldr	r3, [pc, #184]	; (e2030 <__kernel_sin+0x168>)
   e1f76:	ec51 0b18 	vmov	r0, r1, d8
   e1f7a:	f000 ffa9 	bl	e2ed0 <__aeabi_dmul>
   e1f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1f82:	4682      	mov	sl, r0
   e1f84:	468b      	mov	fp, r1
   e1f86:	4640      	mov	r0, r8
   e1f88:	4649      	mov	r1, r9
   e1f8a:	f000 ffa1 	bl	e2ed0 <__aeabi_dmul>
   e1f8e:	4602      	mov	r2, r0
   e1f90:	460b      	mov	r3, r1
   e1f92:	4650      	mov	r0, sl
   e1f94:	4659      	mov	r1, fp
   e1f96:	f000 fde7 	bl	e2b68 <__aeabi_dsub>
   e1f9a:	4632      	mov	r2, r6
   e1f9c:	463b      	mov	r3, r7
   e1f9e:	f000 ff97 	bl	e2ed0 <__aeabi_dmul>
   e1fa2:	ec53 2b18 	vmov	r2, r3, d8
   e1fa6:	f000 fddf 	bl	e2b68 <__aeabi_dsub>
   e1faa:	a31f      	add	r3, pc, #124	; (adr r3, e2028 <__kernel_sin+0x160>)
   e1fac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fb0:	4606      	mov	r6, r0
   e1fb2:	460f      	mov	r7, r1
   e1fb4:	4640      	mov	r0, r8
   e1fb6:	4649      	mov	r1, r9
   e1fb8:	f000 ff8a 	bl	e2ed0 <__aeabi_dmul>
   e1fbc:	4602      	mov	r2, r0
   e1fbe:	460b      	mov	r3, r1
   e1fc0:	4630      	mov	r0, r6
   e1fc2:	4639      	mov	r1, r7
   e1fc4:	f000 fdd2 	bl	e2b6c <__adddf3>
   e1fc8:	4602      	mov	r2, r0
   e1fca:	460b      	mov	r3, r1
   e1fcc:	4620      	mov	r0, r4
   e1fce:	4629      	mov	r1, r5
   e1fd0:	f000 fdca 	bl	e2b68 <__aeabi_dsub>
   e1fd4:	ec41 0b10 	vmov	d0, r0, r1
   e1fd8:	b003      	add	sp, #12
   e1fda:	ecbd 8b02 	vpop	{d8}
   e1fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1fe2:	4602      	mov	r2, r0
   e1fe4:	460b      	mov	r3, r1
   e1fe6:	4630      	mov	r0, r6
   e1fe8:	4639      	mov	r1, r7
   e1fea:	f000 ff71 	bl	e2ed0 <__aeabi_dmul>
   e1fee:	a30e      	add	r3, pc, #56	; (adr r3, e2028 <__kernel_sin+0x160>)
   e1ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1ff4:	f000 fdb8 	bl	e2b68 <__aeabi_dsub>
   e1ff8:	4642      	mov	r2, r8
   e1ffa:	464b      	mov	r3, r9
   e1ffc:	f000 ff68 	bl	e2ed0 <__aeabi_dmul>
   e2000:	4622      	mov	r2, r4
   e2002:	462b      	mov	r3, r5
   e2004:	f000 fdb2 	bl	e2b6c <__adddf3>
   e2008:	ec41 0b10 	vmov	d0, r0, r1
   e200c:	b003      	add	sp, #12
   e200e:	ecbd 8b02 	vpop	{d8}
   e2012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2016:	ec45 4b10 	vmov	d0, r4, r5
   e201a:	b003      	add	sp, #12
   e201c:	ecbd 8b02 	vpop	{d8}
   e2020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2024:	f3af 8000 	nop.w
   e2028:	55555549 	.word	0x55555549
   e202c:	3fc55555 	.word	0x3fc55555
   e2030:	3fe00000 	.word	0x3fe00000
   e2034:	5acfd57c 	.word	0x5acfd57c
   e2038:	3de5d93a 	.word	0x3de5d93a
   e203c:	8a2b9ceb 	.word	0x8a2b9ceb
   e2040:	3e5ae5e6 	.word	0x3e5ae5e6
   e2044:	57b1fe7d 	.word	0x57b1fe7d
   e2048:	3ec71de3 	.word	0x3ec71de3
   e204c:	19c161d5 	.word	0x19c161d5
   e2050:	3f2a01a0 	.word	0x3f2a01a0
   e2054:	1110f8a6 	.word	0x1110f8a6
   e2058:	3f811111 	.word	0x3f811111
   e205c:	00000000 	.word	0x00000000

000e2060 <__kernel_tan>:
   e2060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2064:	ec59 8b10 	vmov	r8, r9, d0
   e2068:	4be1      	ldr	r3, [pc, #900]	; (e23f0 <__kernel_tan+0x390>)
   e206a:	b089      	sub	sp, #36	; 0x24
   e206c:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e2070:	429e      	cmp	r6, r3
   e2072:	f8cd 9014 	str.w	r9, [sp, #20]
   e2076:	4607      	mov	r7, r0
   e2078:	ed8d 1b00 	vstr	d1, [sp]
   e207c:	dc19      	bgt.n	e20b2 <__kernel_tan+0x52>
   e207e:	ee10 0a10 	vmov	r0, s0
   e2082:	4649      	mov	r1, r9
   e2084:	f001 f9d4 	bl	e3430 <__aeabi_d2iz>
   e2088:	bba0      	cbnz	r0, e20f4 <__kernel_tan+0x94>
   e208a:	4643      	mov	r3, r8
   e208c:	431e      	orrs	r6, r3
   e208e:	1c7b      	adds	r3, r7, #1
   e2090:	4333      	orrs	r3, r6
   e2092:	f000 815e 	beq.w	e2352 <__kernel_tan+0x2f2>
   e2096:	2f01      	cmp	r7, #1
   e2098:	f000 81c2 	beq.w	e2420 <__kernel_tan+0x3c0>
   e209c:	4642      	mov	r2, r8
   e209e:	464b      	mov	r3, r9
   e20a0:	2000      	movs	r0, #0
   e20a2:	49d4      	ldr	r1, [pc, #848]	; (e23f4 <__kernel_tan+0x394>)
   e20a4:	f001 f83e 	bl	e3124 <__aeabi_ddiv>
   e20a8:	ec41 0b10 	vmov	d0, r0, r1
   e20ac:	b009      	add	sp, #36	; 0x24
   e20ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e20b2:	4bd1      	ldr	r3, [pc, #836]	; (e23f8 <__kernel_tan+0x398>)
   e20b4:	429e      	cmp	r6, r3
   e20b6:	dd1d      	ble.n	e20f4 <__kernel_tan+0x94>
   e20b8:	9b05      	ldr	r3, [sp, #20]
   e20ba:	2b00      	cmp	r3, #0
   e20bc:	f2c0 81a0 	blt.w	e2400 <__kernel_tan+0x3a0>
   e20c0:	4642      	mov	r2, r8
   e20c2:	464b      	mov	r3, r9
   e20c4:	a1aa      	add	r1, pc, #680	; (adr r1, e2370 <__kernel_tan+0x310>)
   e20c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   e20ca:	f000 fd4d 	bl	e2b68 <__aeabi_dsub>
   e20ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   e20d2:	4604      	mov	r4, r0
   e20d4:	460d      	mov	r5, r1
   e20d6:	a1a8      	add	r1, pc, #672	; (adr r1, e2378 <__kernel_tan+0x318>)
   e20d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   e20dc:	f000 fd44 	bl	e2b68 <__aeabi_dsub>
   e20e0:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e2380 <__kernel_tan+0x320>
   e20e4:	4622      	mov	r2, r4
   e20e6:	462b      	mov	r3, r5
   e20e8:	ed8d 7b00 	vstr	d7, [sp]
   e20ec:	f000 fd3e 	bl	e2b6c <__adddf3>
   e20f0:	4680      	mov	r8, r0
   e20f2:	4689      	mov	r9, r1
   e20f4:	4642      	mov	r2, r8
   e20f6:	464b      	mov	r3, r9
   e20f8:	4640      	mov	r0, r8
   e20fa:	4649      	mov	r1, r9
   e20fc:	f000 fee8 	bl	e2ed0 <__aeabi_dmul>
   e2100:	4602      	mov	r2, r0
   e2102:	460b      	mov	r3, r1
   e2104:	4682      	mov	sl, r0
   e2106:	468b      	mov	fp, r1
   e2108:	f000 fee2 	bl	e2ed0 <__aeabi_dmul>
   e210c:	4652      	mov	r2, sl
   e210e:	4604      	mov	r4, r0
   e2110:	460d      	mov	r5, r1
   e2112:	465b      	mov	r3, fp
   e2114:	4640      	mov	r0, r8
   e2116:	4649      	mov	r1, r9
   e2118:	f000 feda 	bl	e2ed0 <__aeabi_dmul>
   e211c:	a39a      	add	r3, pc, #616	; (adr r3, e2388 <__kernel_tan+0x328>)
   e211e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2122:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e2126:	4620      	mov	r0, r4
   e2128:	4629      	mov	r1, r5
   e212a:	f000 fed1 	bl	e2ed0 <__aeabi_dmul>
   e212e:	a398      	add	r3, pc, #608	; (adr r3, e2390 <__kernel_tan+0x330>)
   e2130:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2134:	f000 fd1a 	bl	e2b6c <__adddf3>
   e2138:	4622      	mov	r2, r4
   e213a:	462b      	mov	r3, r5
   e213c:	f000 fec8 	bl	e2ed0 <__aeabi_dmul>
   e2140:	a395      	add	r3, pc, #596	; (adr r3, e2398 <__kernel_tan+0x338>)
   e2142:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2146:	f000 fd11 	bl	e2b6c <__adddf3>
   e214a:	4622      	mov	r2, r4
   e214c:	462b      	mov	r3, r5
   e214e:	f000 febf 	bl	e2ed0 <__aeabi_dmul>
   e2152:	a393      	add	r3, pc, #588	; (adr r3, e23a0 <__kernel_tan+0x340>)
   e2154:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2158:	f000 fd08 	bl	e2b6c <__adddf3>
   e215c:	4622      	mov	r2, r4
   e215e:	462b      	mov	r3, r5
   e2160:	f000 feb6 	bl	e2ed0 <__aeabi_dmul>
   e2164:	a390      	add	r3, pc, #576	; (adr r3, e23a8 <__kernel_tan+0x348>)
   e2166:	e9d3 2300 	ldrd	r2, r3, [r3]
   e216a:	f000 fcff 	bl	e2b6c <__adddf3>
   e216e:	4622      	mov	r2, r4
   e2170:	462b      	mov	r3, r5
   e2172:	f000 fead 	bl	e2ed0 <__aeabi_dmul>
   e2176:	a38e      	add	r3, pc, #568	; (adr r3, e23b0 <__kernel_tan+0x350>)
   e2178:	e9d3 2300 	ldrd	r2, r3, [r3]
   e217c:	f000 fcf6 	bl	e2b6c <__adddf3>
   e2180:	4652      	mov	r2, sl
   e2182:	465b      	mov	r3, fp
   e2184:	f000 fea4 	bl	e2ed0 <__aeabi_dmul>
   e2188:	a38b      	add	r3, pc, #556	; (adr r3, e23b8 <__kernel_tan+0x358>)
   e218a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e218e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e2192:	4620      	mov	r0, r4
   e2194:	4629      	mov	r1, r5
   e2196:	f000 fe9b 	bl	e2ed0 <__aeabi_dmul>
   e219a:	a389      	add	r3, pc, #548	; (adr r3, e23c0 <__kernel_tan+0x360>)
   e219c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21a0:	f000 fce4 	bl	e2b6c <__adddf3>
   e21a4:	4622      	mov	r2, r4
   e21a6:	462b      	mov	r3, r5
   e21a8:	f000 fe92 	bl	e2ed0 <__aeabi_dmul>
   e21ac:	a386      	add	r3, pc, #536	; (adr r3, e23c8 <__kernel_tan+0x368>)
   e21ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21b2:	f000 fcdb 	bl	e2b6c <__adddf3>
   e21b6:	4622      	mov	r2, r4
   e21b8:	462b      	mov	r3, r5
   e21ba:	f000 fe89 	bl	e2ed0 <__aeabi_dmul>
   e21be:	a384      	add	r3, pc, #528	; (adr r3, e23d0 <__kernel_tan+0x370>)
   e21c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21c4:	f000 fcd2 	bl	e2b6c <__adddf3>
   e21c8:	4622      	mov	r2, r4
   e21ca:	462b      	mov	r3, r5
   e21cc:	f000 fe80 	bl	e2ed0 <__aeabi_dmul>
   e21d0:	a381      	add	r3, pc, #516	; (adr r3, e23d8 <__kernel_tan+0x378>)
   e21d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21d6:	f000 fcc9 	bl	e2b6c <__adddf3>
   e21da:	4622      	mov	r2, r4
   e21dc:	462b      	mov	r3, r5
   e21de:	f000 fe77 	bl	e2ed0 <__aeabi_dmul>
   e21e2:	a37f      	add	r3, pc, #508	; (adr r3, e23e0 <__kernel_tan+0x380>)
   e21e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e21e8:	f000 fcc0 	bl	e2b6c <__adddf3>
   e21ec:	4602      	mov	r2, r0
   e21ee:	460b      	mov	r3, r1
   e21f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e21f4:	f000 fcba 	bl	e2b6c <__adddf3>
   e21f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e21fc:	f000 fe68 	bl	e2ed0 <__aeabi_dmul>
   e2200:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2204:	4622      	mov	r2, r4
   e2206:	462b      	mov	r3, r5
   e2208:	f000 fcb0 	bl	e2b6c <__adddf3>
   e220c:	4652      	mov	r2, sl
   e220e:	465b      	mov	r3, fp
   e2210:	f000 fe5e 	bl	e2ed0 <__aeabi_dmul>
   e2214:	4602      	mov	r2, r0
   e2216:	460b      	mov	r3, r1
   e2218:	4620      	mov	r0, r4
   e221a:	4629      	mov	r1, r5
   e221c:	f000 fca6 	bl	e2b6c <__adddf3>
   e2220:	a371      	add	r3, pc, #452	; (adr r3, e23e8 <__kernel_tan+0x388>)
   e2222:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2226:	4604      	mov	r4, r0
   e2228:	460d      	mov	r5, r1
   e222a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e222e:	f000 fe4f 	bl	e2ed0 <__aeabi_dmul>
   e2232:	4622      	mov	r2, r4
   e2234:	462b      	mov	r3, r5
   e2236:	f000 fc99 	bl	e2b6c <__adddf3>
   e223a:	460b      	mov	r3, r1
   e223c:	4602      	mov	r2, r0
   e223e:	4649      	mov	r1, r9
   e2240:	4640      	mov	r0, r8
   e2242:	e9cd 2300 	strd	r2, r3, [sp]
   e2246:	f000 fc91 	bl	e2b6c <__adddf3>
   e224a:	4b6b      	ldr	r3, [pc, #428]	; (e23f8 <__kernel_tan+0x398>)
   e224c:	429e      	cmp	r6, r3
   e224e:	4604      	mov	r4, r0
   e2250:	460d      	mov	r5, r1
   e2252:	dc3c      	bgt.n	e22ce <__kernel_tan+0x26e>
   e2254:	2f01      	cmp	r7, #1
   e2256:	f000 80e0 	beq.w	e241a <__kernel_tan+0x3ba>
   e225a:	4602      	mov	r2, r0
   e225c:	460b      	mov	r3, r1
   e225e:	2000      	movs	r0, #0
   e2260:	4964      	ldr	r1, [pc, #400]	; (e23f4 <__kernel_tan+0x394>)
   e2262:	f000 ff5f 	bl	e3124 <__aeabi_ddiv>
   e2266:	2400      	movs	r4, #0
   e2268:	460f      	mov	r7, r1
   e226a:	464b      	mov	r3, r9
   e226c:	4606      	mov	r6, r0
   e226e:	4629      	mov	r1, r5
   e2270:	4620      	mov	r0, r4
   e2272:	4642      	mov	r2, r8
   e2274:	f000 fc78 	bl	e2b68 <__aeabi_dsub>
   e2278:	4602      	mov	r2, r0
   e227a:	460b      	mov	r3, r1
   e227c:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2280:	f000 fc72 	bl	e2b68 <__aeabi_dsub>
   e2284:	4622      	mov	r2, r4
   e2286:	463b      	mov	r3, r7
   e2288:	f000 fe22 	bl	e2ed0 <__aeabi_dmul>
   e228c:	46a2      	mov	sl, r4
   e228e:	46a9      	mov	r9, r5
   e2290:	4604      	mov	r4, r0
   e2292:	460d      	mov	r5, r1
   e2294:	4652      	mov	r2, sl
   e2296:	463b      	mov	r3, r7
   e2298:	4650      	mov	r0, sl
   e229a:	4649      	mov	r1, r9
   e229c:	f000 fe18 	bl	e2ed0 <__aeabi_dmul>
   e22a0:	2200      	movs	r2, #0
   e22a2:	4b56      	ldr	r3, [pc, #344]	; (e23fc <__kernel_tan+0x39c>)
   e22a4:	f000 fc62 	bl	e2b6c <__adddf3>
   e22a8:	4602      	mov	r2, r0
   e22aa:	460b      	mov	r3, r1
   e22ac:	4620      	mov	r0, r4
   e22ae:	4629      	mov	r1, r5
   e22b0:	f000 fc5c 	bl	e2b6c <__adddf3>
   e22b4:	4632      	mov	r2, r6
   e22b6:	463b      	mov	r3, r7
   e22b8:	f000 fe0a 	bl	e2ed0 <__aeabi_dmul>
   e22bc:	4652      	mov	r2, sl
   e22be:	463b      	mov	r3, r7
   e22c0:	f000 fc54 	bl	e2b6c <__adddf3>
   e22c4:	ec41 0b10 	vmov	d0, r0, r1
   e22c8:	b009      	add	sp, #36	; 0x24
   e22ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e22ce:	4638      	mov	r0, r7
   e22d0:	f000 fd98 	bl	e2e04 <__aeabi_i2d>
   e22d4:	4622      	mov	r2, r4
   e22d6:	4606      	mov	r6, r0
   e22d8:	460f      	mov	r7, r1
   e22da:	462b      	mov	r3, r5
   e22dc:	4620      	mov	r0, r4
   e22de:	4629      	mov	r1, r5
   e22e0:	f000 fdf6 	bl	e2ed0 <__aeabi_dmul>
   e22e4:	4632      	mov	r2, r6
   e22e6:	4682      	mov	sl, r0
   e22e8:	468b      	mov	fp, r1
   e22ea:	463b      	mov	r3, r7
   e22ec:	4620      	mov	r0, r4
   e22ee:	4629      	mov	r1, r5
   e22f0:	f000 fc3c 	bl	e2b6c <__adddf3>
   e22f4:	4602      	mov	r2, r0
   e22f6:	460b      	mov	r3, r1
   e22f8:	4650      	mov	r0, sl
   e22fa:	4659      	mov	r1, fp
   e22fc:	f000 ff12 	bl	e3124 <__aeabi_ddiv>
   e2300:	e9dd 2300 	ldrd	r2, r3, [sp]
   e2304:	f000 fc30 	bl	e2b68 <__aeabi_dsub>
   e2308:	4602      	mov	r2, r0
   e230a:	460b      	mov	r3, r1
   e230c:	4640      	mov	r0, r8
   e230e:	4649      	mov	r1, r9
   e2310:	f000 fc2a 	bl	e2b68 <__aeabi_dsub>
   e2314:	4602      	mov	r2, r0
   e2316:	460b      	mov	r3, r1
   e2318:	f000 fc28 	bl	e2b6c <__adddf3>
   e231c:	4602      	mov	r2, r0
   e231e:	460b      	mov	r3, r1
   e2320:	4630      	mov	r0, r6
   e2322:	4639      	mov	r1, r7
   e2324:	f000 fc20 	bl	e2b68 <__aeabi_dsub>
   e2328:	9b05      	ldr	r3, [sp, #20]
   e232a:	4604      	mov	r4, r0
   e232c:	1798      	asrs	r0, r3, #30
   e232e:	f000 0002 	and.w	r0, r0, #2
   e2332:	f1c0 0001 	rsb	r0, r0, #1
   e2336:	460d      	mov	r5, r1
   e2338:	f000 fd64 	bl	e2e04 <__aeabi_i2d>
   e233c:	4602      	mov	r2, r0
   e233e:	460b      	mov	r3, r1
   e2340:	4620      	mov	r0, r4
   e2342:	4629      	mov	r1, r5
   e2344:	f000 fdc4 	bl	e2ed0 <__aeabi_dmul>
   e2348:	ec41 0b10 	vmov	d0, r0, r1
   e234c:	b009      	add	sp, #36	; 0x24
   e234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2352:	ec49 8b10 	vmov	d0, r8, r9
   e2356:	f7fb fbb3 	bl	ddac0 <fabs>
   e235a:	2000      	movs	r0, #0
   e235c:	ec53 2b10 	vmov	r2, r3, d0
   e2360:	4926      	ldr	r1, [pc, #152]	; (e23fc <__kernel_tan+0x39c>)
   e2362:	f000 fedf 	bl	e3124 <__aeabi_ddiv>
   e2366:	ec41 0b10 	vmov	d0, r0, r1
   e236a:	e7ad      	b.n	e22c8 <__kernel_tan+0x268>
   e236c:	f3af 8000 	nop.w
   e2370:	54442d18 	.word	0x54442d18
   e2374:	3fe921fb 	.word	0x3fe921fb
   e2378:	33145c07 	.word	0x33145c07
   e237c:	3c81a626 	.word	0x3c81a626
	...
   e2388:	74bf7ad4 	.word	0x74bf7ad4
   e238c:	3efb2a70 	.word	0x3efb2a70
   e2390:	32f0a7e9 	.word	0x32f0a7e9
   e2394:	3f12b80f 	.word	0x3f12b80f
   e2398:	1a8d1068 	.word	0x1a8d1068
   e239c:	3f3026f7 	.word	0x3f3026f7
   e23a0:	fee08315 	.word	0xfee08315
   e23a4:	3f57dbc8 	.word	0x3f57dbc8
   e23a8:	e96e8493 	.word	0xe96e8493
   e23ac:	3f8226e3 	.word	0x3f8226e3
   e23b0:	1bb341fe 	.word	0x1bb341fe
   e23b4:	3faba1ba 	.word	0x3faba1ba
   e23b8:	db605373 	.word	0xdb605373
   e23bc:	bef375cb 	.word	0xbef375cb
   e23c0:	a03792a6 	.word	0xa03792a6
   e23c4:	3f147e88 	.word	0x3f147e88
   e23c8:	f2f26501 	.word	0xf2f26501
   e23cc:	3f4344d8 	.word	0x3f4344d8
   e23d0:	c9560328 	.word	0xc9560328
   e23d4:	3f6d6d22 	.word	0x3f6d6d22
   e23d8:	8406d637 	.word	0x8406d637
   e23dc:	3f9664f4 	.word	0x3f9664f4
   e23e0:	1110fe7a 	.word	0x1110fe7a
   e23e4:	3fc11111 	.word	0x3fc11111
   e23e8:	55555563 	.word	0x55555563
   e23ec:	3fd55555 	.word	0x3fd55555
   e23f0:	3e2fffff 	.word	0x3e2fffff
   e23f4:	bff00000 	.word	0xbff00000
   e23f8:	3fe59427 	.word	0x3fe59427
   e23fc:	3ff00000 	.word	0x3ff00000
   e2400:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2404:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e2408:	4622      	mov	r2, r4
   e240a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e240e:	ee10 8a10 	vmov	r8, s0
   e2412:	4689      	mov	r9, r1
   e2414:	e9cd 2300 	strd	r2, r3, [sp]
   e2418:	e652      	b.n	e20c0 <__kernel_tan+0x60>
   e241a:	ec45 4b10 	vmov	d0, r4, r5
   e241e:	e753      	b.n	e22c8 <__kernel_tan+0x268>
   e2420:	ec49 8b10 	vmov	d0, r8, r9
   e2424:	e750      	b.n	e22c8 <__kernel_tan+0x268>
   e2426:	bf00      	nop

000e2428 <expm1>:
   e2428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e242c:	ec5b ab10 	vmov	sl, fp, d0
   e2430:	49d7      	ldr	r1, [pc, #860]	; (e2790 <expm1+0x368>)
   e2432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2436:	428b      	cmp	r3, r1
   e2438:	b085      	sub	sp, #20
   e243a:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e243e:	d953      	bls.n	e24e8 <expm1+0xc0>
   e2440:	49d4      	ldr	r1, [pc, #848]	; (e2794 <expm1+0x36c>)
   e2442:	428b      	cmp	r3, r1
   e2444:	f200 8105 	bhi.w	e2652 <expm1+0x22a>
   e2448:	2c00      	cmp	r4, #0
   e244a:	f000 81de 	beq.w	e280a <expm1+0x3e2>
   e244e:	a3b6      	add	r3, pc, #728	; (adr r3, e2728 <expm1+0x300>)
   e2450:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2454:	4650      	mov	r0, sl
   e2456:	4659      	mov	r1, fp
   e2458:	f000 fb88 	bl	e2b6c <__adddf3>
   e245c:	2200      	movs	r2, #0
   e245e:	2300      	movs	r3, #0
   e2460:	f000 ffa8 	bl	e33b4 <__aeabi_dcmplt>
   e2464:	2800      	cmp	r0, #0
   e2466:	f040 80ff 	bne.w	e2668 <expm1+0x240>
   e246a:	a3b1      	add	r3, pc, #708	; (adr r3, e2730 <expm1+0x308>)
   e246c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2470:	4650      	mov	r0, sl
   e2472:	4659      	mov	r1, fp
   e2474:	f000 fd2c 	bl	e2ed0 <__aeabi_dmul>
   e2478:	4602      	mov	r2, r0
   e247a:	460b      	mov	r3, r1
   e247c:	2000      	movs	r0, #0
   e247e:	49c6      	ldr	r1, [pc, #792]	; (e2798 <expm1+0x370>)
   e2480:	f000 fb74 	bl	e2b6c <__adddf3>
   e2484:	f000 ffd4 	bl	e3430 <__aeabi_d2iz>
   e2488:	9001      	str	r0, [sp, #4]
   e248a:	f000 fcbb 	bl	e2e04 <__aeabi_i2d>
   e248e:	a3aa      	add	r3, pc, #680	; (adr r3, e2738 <expm1+0x310>)
   e2490:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2494:	4606      	mov	r6, r0
   e2496:	460f      	mov	r7, r1
   e2498:	f000 fd1a 	bl	e2ed0 <__aeabi_dmul>
   e249c:	4602      	mov	r2, r0
   e249e:	460b      	mov	r3, r1
   e24a0:	4650      	mov	r0, sl
   e24a2:	4659      	mov	r1, fp
   e24a4:	f000 fb60 	bl	e2b68 <__aeabi_dsub>
   e24a8:	a3a5      	add	r3, pc, #660	; (adr r3, e2740 <expm1+0x318>)
   e24aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e24ae:	4680      	mov	r8, r0
   e24b0:	4689      	mov	r9, r1
   e24b2:	4630      	mov	r0, r6
   e24b4:	4639      	mov	r1, r7
   e24b6:	f000 fd0b 	bl	e2ed0 <__aeabi_dmul>
   e24ba:	4606      	mov	r6, r0
   e24bc:	460f      	mov	r7, r1
   e24be:	4632      	mov	r2, r6
   e24c0:	463b      	mov	r3, r7
   e24c2:	4640      	mov	r0, r8
   e24c4:	4649      	mov	r1, r9
   e24c6:	f000 fb4f 	bl	e2b68 <__aeabi_dsub>
   e24ca:	4602      	mov	r2, r0
   e24cc:	460b      	mov	r3, r1
   e24ce:	4682      	mov	sl, r0
   e24d0:	468b      	mov	fp, r1
   e24d2:	4640      	mov	r0, r8
   e24d4:	4649      	mov	r1, r9
   e24d6:	f000 fb47 	bl	e2b68 <__aeabi_dsub>
   e24da:	4632      	mov	r2, r6
   e24dc:	463b      	mov	r3, r7
   e24de:	f000 fb43 	bl	e2b68 <__aeabi_dsub>
   e24e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e24e6:	e009      	b.n	e24fc <expm1+0xd4>
   e24e8:	4aac      	ldr	r2, [pc, #688]	; (e279c <expm1+0x374>)
   e24ea:	4293      	cmp	r3, r2
   e24ec:	f200 80e7 	bhi.w	e26be <expm1+0x296>
   e24f0:	4aab      	ldr	r2, [pc, #684]	; (e27a0 <expm1+0x378>)
   e24f2:	4293      	cmp	r3, r2
   e24f4:	f240 8162 	bls.w	e27bc <expm1+0x394>
   e24f8:	2300      	movs	r3, #0
   e24fa:	9301      	str	r3, [sp, #4]
   e24fc:	2200      	movs	r2, #0
   e24fe:	4ba9      	ldr	r3, [pc, #676]	; (e27a4 <expm1+0x37c>)
   e2500:	4650      	mov	r0, sl
   e2502:	4659      	mov	r1, fp
   e2504:	f000 fce4 	bl	e2ed0 <__aeabi_dmul>
   e2508:	4606      	mov	r6, r0
   e250a:	460f      	mov	r7, r1
   e250c:	4602      	mov	r2, r0
   e250e:	460b      	mov	r3, r1
   e2510:	4650      	mov	r0, sl
   e2512:	4659      	mov	r1, fp
   e2514:	f000 fcdc 	bl	e2ed0 <__aeabi_dmul>
   e2518:	a38b      	add	r3, pc, #556	; (adr r3, e2748 <expm1+0x320>)
   e251a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e251e:	4604      	mov	r4, r0
   e2520:	460d      	mov	r5, r1
   e2522:	f000 fcd5 	bl	e2ed0 <__aeabi_dmul>
   e2526:	a38a      	add	r3, pc, #552	; (adr r3, e2750 <expm1+0x328>)
   e2528:	e9d3 2300 	ldrd	r2, r3, [r3]
   e252c:	f000 fb1e 	bl	e2b6c <__adddf3>
   e2530:	4622      	mov	r2, r4
   e2532:	462b      	mov	r3, r5
   e2534:	f000 fccc 	bl	e2ed0 <__aeabi_dmul>
   e2538:	a387      	add	r3, pc, #540	; (adr r3, e2758 <expm1+0x330>)
   e253a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e253e:	f000 fb13 	bl	e2b68 <__aeabi_dsub>
   e2542:	4622      	mov	r2, r4
   e2544:	462b      	mov	r3, r5
   e2546:	f000 fcc3 	bl	e2ed0 <__aeabi_dmul>
   e254a:	a385      	add	r3, pc, #532	; (adr r3, e2760 <expm1+0x338>)
   e254c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2550:	f000 fb0c 	bl	e2b6c <__adddf3>
   e2554:	4622      	mov	r2, r4
   e2556:	462b      	mov	r3, r5
   e2558:	f000 fcba 	bl	e2ed0 <__aeabi_dmul>
   e255c:	a382      	add	r3, pc, #520	; (adr r3, e2768 <expm1+0x340>)
   e255e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2562:	f000 fb01 	bl	e2b68 <__aeabi_dsub>
   e2566:	4622      	mov	r2, r4
   e2568:	462b      	mov	r3, r5
   e256a:	f000 fcb1 	bl	e2ed0 <__aeabi_dmul>
   e256e:	2200      	movs	r2, #0
   e2570:	4b8d      	ldr	r3, [pc, #564]	; (e27a8 <expm1+0x380>)
   e2572:	f000 fafb 	bl	e2b6c <__adddf3>
   e2576:	4680      	mov	r8, r0
   e2578:	4689      	mov	r9, r1
   e257a:	4602      	mov	r2, r0
   e257c:	460b      	mov	r3, r1
   e257e:	4630      	mov	r0, r6
   e2580:	4639      	mov	r1, r7
   e2582:	f000 fca5 	bl	e2ed0 <__aeabi_dmul>
   e2586:	4602      	mov	r2, r0
   e2588:	460b      	mov	r3, r1
   e258a:	2000      	movs	r0, #0
   e258c:	4987      	ldr	r1, [pc, #540]	; (e27ac <expm1+0x384>)
   e258e:	f000 faeb 	bl	e2b68 <__aeabi_dsub>
   e2592:	4606      	mov	r6, r0
   e2594:	4602      	mov	r2, r0
   e2596:	460b      	mov	r3, r1
   e2598:	460f      	mov	r7, r1
   e259a:	4640      	mov	r0, r8
   e259c:	4649      	mov	r1, r9
   e259e:	f000 fae3 	bl	e2b68 <__aeabi_dsub>
   e25a2:	4632      	mov	r2, r6
   e25a4:	4680      	mov	r8, r0
   e25a6:	4689      	mov	r9, r1
   e25a8:	463b      	mov	r3, r7
   e25aa:	4650      	mov	r0, sl
   e25ac:	4659      	mov	r1, fp
   e25ae:	f000 fc8f 	bl	e2ed0 <__aeabi_dmul>
   e25b2:	4602      	mov	r2, r0
   e25b4:	460b      	mov	r3, r1
   e25b6:	2000      	movs	r0, #0
   e25b8:	497d      	ldr	r1, [pc, #500]	; (e27b0 <expm1+0x388>)
   e25ba:	f000 fad5 	bl	e2b68 <__aeabi_dsub>
   e25be:	4602      	mov	r2, r0
   e25c0:	460b      	mov	r3, r1
   e25c2:	4640      	mov	r0, r8
   e25c4:	4649      	mov	r1, r9
   e25c6:	f000 fdad 	bl	e3124 <__aeabi_ddiv>
   e25ca:	4622      	mov	r2, r4
   e25cc:	462b      	mov	r3, r5
   e25ce:	f000 fc7f 	bl	e2ed0 <__aeabi_dmul>
   e25d2:	9e01      	ldr	r6, [sp, #4]
   e25d4:	4602      	mov	r2, r0
   e25d6:	460b      	mov	r3, r1
   e25d8:	2e00      	cmp	r6, #0
   e25da:	d048      	beq.n	e266e <expm1+0x246>
   e25dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e25e0:	4632      	mov	r2, r6
   e25e2:	463b      	mov	r3, r7
   e25e4:	f000 fac0 	bl	e2b68 <__aeabi_dsub>
   e25e8:	4652      	mov	r2, sl
   e25ea:	465b      	mov	r3, fp
   e25ec:	f000 fc70 	bl	e2ed0 <__aeabi_dmul>
   e25f0:	4632      	mov	r2, r6
   e25f2:	463b      	mov	r3, r7
   e25f4:	f000 fab8 	bl	e2b68 <__aeabi_dsub>
   e25f8:	462b      	mov	r3, r5
   e25fa:	4622      	mov	r2, r4
   e25fc:	f000 fab4 	bl	e2b68 <__aeabi_dsub>
   e2600:	9b01      	ldr	r3, [sp, #4]
   e2602:	3301      	adds	r3, #1
   e2604:	4606      	mov	r6, r0
   e2606:	460f      	mov	r7, r1
   e2608:	f000 810b 	beq.w	e2822 <expm1+0x3fa>
   e260c:	9b01      	ldr	r3, [sp, #4]
   e260e:	2b01      	cmp	r3, #1
   e2610:	f000 80df 	beq.w	e27d2 <expm1+0x3aa>
   e2614:	9b01      	ldr	r3, [sp, #4]
   e2616:	3301      	adds	r3, #1
   e2618:	2b39      	cmp	r3, #57	; 0x39
   e261a:	d866      	bhi.n	e26ea <expm1+0x2c2>
   e261c:	9b01      	ldr	r3, [sp, #4]
   e261e:	2b13      	cmp	r3, #19
   e2620:	f340 8110 	ble.w	e2844 <expm1+0x41c>
   e2624:	9c01      	ldr	r4, [sp, #4]
   e2626:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e262a:	3503      	adds	r5, #3
   e262c:	2200      	movs	r2, #0
   e262e:	052b      	lsls	r3, r5, #20
   e2630:	f000 fa9c 	bl	e2b6c <__adddf3>
   e2634:	4602      	mov	r2, r0
   e2636:	460b      	mov	r3, r1
   e2638:	4650      	mov	r0, sl
   e263a:	4659      	mov	r1, fp
   e263c:	f000 fa94 	bl	e2b68 <__aeabi_dsub>
   e2640:	2200      	movs	r2, #0
   e2642:	4b59      	ldr	r3, [pc, #356]	; (e27a8 <expm1+0x380>)
   e2644:	f000 fa92 	bl	e2b6c <__adddf3>
   e2648:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e264c:	ec41 0b10 	vmov	d0, r0, r1
   e2650:	e01d      	b.n	e268e <expm1+0x266>
   e2652:	4958      	ldr	r1, [pc, #352]	; (e27b4 <expm1+0x38c>)
   e2654:	428b      	cmp	r3, r1
   e2656:	d91d      	bls.n	e2694 <expm1+0x26c>
   e2658:	ee10 3a10 	vmov	r3, s0
   e265c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e2660:	4313      	orrs	r3, r2
   e2662:	f040 8128 	bne.w	e28b6 <expm1+0x48e>
   e2666:	b194      	cbz	r4, e268e <expm1+0x266>
   e2668:	ed9f 0b41 	vldr	d0, [pc, #260]	; e2770 <expm1+0x348>
   e266c:	e00f      	b.n	e268e <expm1+0x266>
   e266e:	4650      	mov	r0, sl
   e2670:	4659      	mov	r1, fp
   e2672:	f000 fc2d 	bl	e2ed0 <__aeabi_dmul>
   e2676:	4622      	mov	r2, r4
   e2678:	462b      	mov	r3, r5
   e267a:	f000 fa75 	bl	e2b68 <__aeabi_dsub>
   e267e:	4602      	mov	r2, r0
   e2680:	460b      	mov	r3, r1
   e2682:	4650      	mov	r0, sl
   e2684:	4659      	mov	r1, fp
   e2686:	f000 fa6f 	bl	e2b68 <__aeabi_dsub>
   e268a:	ec41 0b10 	vmov	d0, r0, r1
   e268e:	b005      	add	sp, #20
   e2690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2694:	a338      	add	r3, pc, #224	; (adr r3, e2778 <expm1+0x350>)
   e2696:	e9d3 2300 	ldrd	r2, r3, [r3]
   e269a:	ee10 0a10 	vmov	r0, s0
   e269e:	4659      	mov	r1, fp
   e26a0:	f000 fea6 	bl	e33f0 <__aeabi_dcmpgt>
   e26a4:	2800      	cmp	r0, #0
   e26a6:	f43f aecf 	beq.w	e2448 <expm1+0x20>
   e26aa:	a335      	add	r3, pc, #212	; (adr r3, e2780 <expm1+0x358>)
   e26ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26b0:	4610      	mov	r0, r2
   e26b2:	4619      	mov	r1, r3
   e26b4:	f000 fc0c 	bl	e2ed0 <__aeabi_dmul>
   e26b8:	ec41 0b10 	vmov	d0, r0, r1
   e26bc:	e7e7      	b.n	e268e <expm1+0x266>
   e26be:	4a3e      	ldr	r2, [pc, #248]	; (e27b8 <expm1+0x390>)
   e26c0:	4293      	cmp	r3, r2
   e26c2:	f200 80d7 	bhi.w	e2874 <expm1+0x44c>
   e26c6:	ee10 0a10 	vmov	r0, s0
   e26ca:	4659      	mov	r1, fp
   e26cc:	a31a      	add	r3, pc, #104	; (adr r3, e2738 <expm1+0x310>)
   e26ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26d2:	b1f4      	cbz	r4, e2712 <expm1+0x2ea>
   e26d4:	f000 fa4a 	bl	e2b6c <__adddf3>
   e26d8:	f04f 33ff 	mov.w	r3, #4294967295
   e26dc:	4680      	mov	r8, r0
   e26de:	4689      	mov	r9, r1
   e26e0:	9301      	str	r3, [sp, #4]
   e26e2:	a729      	add	r7, pc, #164	; (adr r7, e2788 <expm1+0x360>)
   e26e4:	e9d7 6700 	ldrd	r6, r7, [r7]
   e26e8:	e6e9      	b.n	e24be <expm1+0x96>
   e26ea:	4652      	mov	r2, sl
   e26ec:	465b      	mov	r3, fp
   e26ee:	f000 fa3b 	bl	e2b68 <__aeabi_dsub>
   e26f2:	4602      	mov	r2, r0
   e26f4:	460b      	mov	r3, r1
   e26f6:	2000      	movs	r0, #0
   e26f8:	492b      	ldr	r1, [pc, #172]	; (e27a8 <expm1+0x380>)
   e26fa:	f000 fa35 	bl	e2b68 <__aeabi_dsub>
   e26fe:	9a01      	ldr	r2, [sp, #4]
   e2700:	4b29      	ldr	r3, [pc, #164]	; (e27a8 <expm1+0x380>)
   e2702:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e2706:	2200      	movs	r2, #0
   e2708:	f000 fa2e 	bl	e2b68 <__aeabi_dsub>
   e270c:	ec41 0b10 	vmov	d0, r0, r1
   e2710:	e7bd      	b.n	e268e <expm1+0x266>
   e2712:	f000 fa29 	bl	e2b68 <__aeabi_dsub>
   e2716:	2301      	movs	r3, #1
   e2718:	4680      	mov	r8, r0
   e271a:	4689      	mov	r9, r1
   e271c:	9301      	str	r3, [sp, #4]
   e271e:	a708      	add	r7, pc, #32	; (adr r7, e2740 <expm1+0x318>)
   e2720:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2724:	e6cb      	b.n	e24be <expm1+0x96>
   e2726:	bf00      	nop
   e2728:	c2f8f359 	.word	0xc2f8f359
   e272c:	01a56e1f 	.word	0x01a56e1f
   e2730:	652b82fe 	.word	0x652b82fe
   e2734:	3ff71547 	.word	0x3ff71547
   e2738:	fee00000 	.word	0xfee00000
   e273c:	3fe62e42 	.word	0x3fe62e42
   e2740:	35793c76 	.word	0x35793c76
   e2744:	3dea39ef 	.word	0x3dea39ef
   e2748:	6e09c32d 	.word	0x6e09c32d
   e274c:	be8afdb7 	.word	0xbe8afdb7
   e2750:	86e65239 	.word	0x86e65239
   e2754:	3ed0cfca 	.word	0x3ed0cfca
   e2758:	9eaadbb7 	.word	0x9eaadbb7
   e275c:	3f14ce19 	.word	0x3f14ce19
   e2760:	19fe5585 	.word	0x19fe5585
   e2764:	3f5a01a0 	.word	0x3f5a01a0
   e2768:	111110f4 	.word	0x111110f4
   e276c:	3fa11111 	.word	0x3fa11111
   e2770:	00000000 	.word	0x00000000
   e2774:	bff00000 	.word	0xbff00000
   e2778:	fefa39ef 	.word	0xfefa39ef
   e277c:	40862e42 	.word	0x40862e42
   e2780:	8800759c 	.word	0x8800759c
   e2784:	7e37e43c 	.word	0x7e37e43c
   e2788:	35793c76 	.word	0x35793c76
   e278c:	bdea39ef 	.word	0xbdea39ef
   e2790:	40436879 	.word	0x40436879
   e2794:	40862e41 	.word	0x40862e41
   e2798:	bfe00000 	.word	0xbfe00000
   e279c:	3fd62e42 	.word	0x3fd62e42
   e27a0:	3c8fffff 	.word	0x3c8fffff
   e27a4:	3fe00000 	.word	0x3fe00000
   e27a8:	3ff00000 	.word	0x3ff00000
   e27ac:	40080000 	.word	0x40080000
   e27b0:	40180000 	.word	0x40180000
   e27b4:	7fefffff 	.word	0x7fefffff
   e27b8:	3ff0a2b1 	.word	0x3ff0a2b1
   e27bc:	a349      	add	r3, pc, #292	; (adr r3, e28e4 <expm1+0x4bc>)
   e27be:	e9d3 2300 	ldrd	r2, r3, [r3]
   e27c2:	ee10 0a10 	vmov	r0, s0
   e27c6:	4659      	mov	r1, fp
   e27c8:	f000 f9d0 	bl	e2b6c <__adddf3>
   e27cc:	4602      	mov	r2, r0
   e27ce:	460b      	mov	r3, r1
   e27d0:	e753      	b.n	e267a <expm1+0x252>
   e27d2:	2200      	movs	r2, #0
   e27d4:	4b40      	ldr	r3, [pc, #256]	; (e28d8 <expm1+0x4b0>)
   e27d6:	4650      	mov	r0, sl
   e27d8:	4659      	mov	r1, fp
   e27da:	f000 fdeb 	bl	e33b4 <__aeabi_dcmplt>
   e27de:	2800      	cmp	r0, #0
   e27e0:	d058      	beq.n	e2894 <expm1+0x46c>
   e27e2:	2200      	movs	r2, #0
   e27e4:	4b3d      	ldr	r3, [pc, #244]	; (e28dc <expm1+0x4b4>)
   e27e6:	4650      	mov	r0, sl
   e27e8:	4659      	mov	r1, fp
   e27ea:	f000 f9bf 	bl	e2b6c <__adddf3>
   e27ee:	4602      	mov	r2, r0
   e27f0:	460b      	mov	r3, r1
   e27f2:	4630      	mov	r0, r6
   e27f4:	4639      	mov	r1, r7
   e27f6:	f000 f9b7 	bl	e2b68 <__aeabi_dsub>
   e27fa:	2200      	movs	r2, #0
   e27fc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e2800:	f000 fb66 	bl	e2ed0 <__aeabi_dmul>
   e2804:	ec41 0b10 	vmov	d0, r0, r1
   e2808:	e741      	b.n	e268e <expm1+0x266>
   e280a:	a331      	add	r3, pc, #196	; (adr r3, e28d0 <expm1+0x4a8>)
   e280c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2810:	4650      	mov	r0, sl
   e2812:	4659      	mov	r1, fp
   e2814:	f000 fb5c 	bl	e2ed0 <__aeabi_dmul>
   e2818:	4602      	mov	r2, r0
   e281a:	460b      	mov	r3, r1
   e281c:	2000      	movs	r0, #0
   e281e:	492f      	ldr	r1, [pc, #188]	; (e28dc <expm1+0x4b4>)
   e2820:	e62e      	b.n	e2480 <expm1+0x58>
   e2822:	4602      	mov	r2, r0
   e2824:	460b      	mov	r3, r1
   e2826:	4650      	mov	r0, sl
   e2828:	4659      	mov	r1, fp
   e282a:	f000 f99d 	bl	e2b68 <__aeabi_dsub>
   e282e:	2200      	movs	r2, #0
   e2830:	4b2a      	ldr	r3, [pc, #168]	; (e28dc <expm1+0x4b4>)
   e2832:	f000 fb4d 	bl	e2ed0 <__aeabi_dmul>
   e2836:	2200      	movs	r2, #0
   e2838:	4b28      	ldr	r3, [pc, #160]	; (e28dc <expm1+0x4b4>)
   e283a:	f000 f995 	bl	e2b68 <__aeabi_dsub>
   e283e:	ec41 0b10 	vmov	d0, r0, r1
   e2842:	e724      	b.n	e268e <expm1+0x266>
   e2844:	9c01      	ldr	r4, [sp, #4]
   e2846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e284a:	4123      	asrs	r3, r4
   e284c:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e2850:	4652      	mov	r2, sl
   e2852:	465b      	mov	r3, fp
   e2854:	f000 f988 	bl	e2b68 <__aeabi_dsub>
   e2858:	2600      	movs	r6, #0
   e285a:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e285e:	4602      	mov	r2, r0
   e2860:	460b      	mov	r3, r1
   e2862:	4630      	mov	r0, r6
   e2864:	4639      	mov	r1, r7
   e2866:	f000 f97f 	bl	e2b68 <__aeabi_dsub>
   e286a:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e286e:	ec41 0b10 	vmov	d0, r0, r1
   e2872:	e70c      	b.n	e268e <expm1+0x266>
   e2874:	a316      	add	r3, pc, #88	; (adr r3, e28d0 <expm1+0x4a8>)
   e2876:	e9d3 2300 	ldrd	r2, r3, [r3]
   e287a:	ee10 0a10 	vmov	r0, s0
   e287e:	4659      	mov	r1, fp
   e2880:	f000 fb26 	bl	e2ed0 <__aeabi_dmul>
   e2884:	4602      	mov	r2, r0
   e2886:	460b      	mov	r3, r1
   e2888:	2000      	movs	r0, #0
   e288a:	2c00      	cmp	r4, #0
   e288c:	f47f adf7 	bne.w	e247e <expm1+0x56>
   e2890:	4912      	ldr	r1, [pc, #72]	; (e28dc <expm1+0x4b4>)
   e2892:	e5f5      	b.n	e2480 <expm1+0x58>
   e2894:	4632      	mov	r2, r6
   e2896:	463b      	mov	r3, r7
   e2898:	4650      	mov	r0, sl
   e289a:	4659      	mov	r1, fp
   e289c:	f000 f964 	bl	e2b68 <__aeabi_dsub>
   e28a0:	4602      	mov	r2, r0
   e28a2:	460b      	mov	r3, r1
   e28a4:	f000 f962 	bl	e2b6c <__adddf3>
   e28a8:	2200      	movs	r2, #0
   e28aa:	4b0d      	ldr	r3, [pc, #52]	; (e28e0 <expm1+0x4b8>)
   e28ac:	f000 f95e 	bl	e2b6c <__adddf3>
   e28b0:	ec41 0b10 	vmov	d0, r0, r1
   e28b4:	e6eb      	b.n	e268e <expm1+0x266>
   e28b6:	ee10 2a10 	vmov	r2, s0
   e28ba:	ee10 0a10 	vmov	r0, s0
   e28be:	465b      	mov	r3, fp
   e28c0:	4659      	mov	r1, fp
   e28c2:	f000 f953 	bl	e2b6c <__adddf3>
   e28c6:	ec41 0b10 	vmov	d0, r0, r1
   e28ca:	e6e0      	b.n	e268e <expm1+0x266>
   e28cc:	f3af 8000 	nop.w
   e28d0:	652b82fe 	.word	0x652b82fe
   e28d4:	3ff71547 	.word	0x3ff71547
   e28d8:	bfd00000 	.word	0xbfd00000
   e28dc:	3fe00000 	.word	0x3fe00000
   e28e0:	3ff00000 	.word	0x3ff00000
   e28e4:	8800759c 	.word	0x8800759c
   e28e8:	7e37e43c 	.word	0x7e37e43c

000e28ec <finite>:
   e28ec:	ee10 3a90 	vmov	r3, s1
   e28f0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e28f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e28f8:	0fc0      	lsrs	r0, r0, #31
   e28fa:	4770      	bx	lr

000e28fc <matherr>:
   e28fc:	2000      	movs	r0, #0
   e28fe:	4770      	bx	lr

000e2900 <nan>:
   e2900:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2908 <nan+0x8>
   e2904:	4770      	bx	lr
   e2906:	bf00      	nop
   e2908:	00000000 	.word	0x00000000
   e290c:	7ff80000 	.word	0x7ff80000

000e2910 <rint>:
   e2910:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2912:	ec53 2b10 	vmov	r2, r3, d0
   e2916:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e291a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e291e:	2813      	cmp	r0, #19
   e2920:	b083      	sub	sp, #12
   e2922:	4619      	mov	r1, r3
   e2924:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e2928:	ee10 5a10 	vmov	r5, s0
   e292c:	dc2f      	bgt.n	e298e <rint+0x7e>
   e292e:	2800      	cmp	r0, #0
   e2930:	db49      	blt.n	e29c6 <rint+0xb6>
   e2932:	4e3f      	ldr	r6, [pc, #252]	; (e2a30 <rint+0x120>)
   e2934:	4106      	asrs	r6, r0
   e2936:	ea03 0706 	and.w	r7, r3, r6
   e293a:	4317      	orrs	r7, r2
   e293c:	d02c      	beq.n	e2998 <rint+0x88>
   e293e:	0876      	lsrs	r6, r6, #1
   e2940:	4033      	ands	r3, r6
   e2942:	431d      	orrs	r5, r3
   e2944:	d00c      	beq.n	e2960 <rint+0x50>
   e2946:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e294a:	2813      	cmp	r0, #19
   e294c:	ea21 0606 	bic.w	r6, r1, r6
   e2950:	fa43 f100 	asr.w	r1, r3, r0
   e2954:	ea41 0106 	orr.w	r1, r1, r6
   e2958:	bf0c      	ite	eq
   e295a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e295e:	2500      	movne	r5, #0
   e2960:	4834      	ldr	r0, [pc, #208]	; (e2a34 <rint+0x124>)
   e2962:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e2966:	462a      	mov	r2, r5
   e2968:	e9d4 4500 	ldrd	r4, r5, [r4]
   e296c:	4610      	mov	r0, r2
   e296e:	462b      	mov	r3, r5
   e2970:	4622      	mov	r2, r4
   e2972:	f000 f8fb 	bl	e2b6c <__adddf3>
   e2976:	e9cd 0100 	strd	r0, r1, [sp]
   e297a:	4622      	mov	r2, r4
   e297c:	462b      	mov	r3, r5
   e297e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2982:	f000 f8f1 	bl	e2b68 <__aeabi_dsub>
   e2986:	ec41 0b10 	vmov	d0, r0, r1
   e298a:	b003      	add	sp, #12
   e298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e298e:	2833      	cmp	r0, #51	; 0x33
   e2990:	dd06      	ble.n	e29a0 <rint+0x90>
   e2992:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e2996:	d042      	beq.n	e2a1e <rint+0x10e>
   e2998:	ec43 2b10 	vmov	d0, r2, r3
   e299c:	b003      	add	sp, #12
   e299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e29a0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e29a4:	f04f 30ff 	mov.w	r0, #4294967295
   e29a8:	40f0      	lsrs	r0, r6
   e29aa:	4202      	tst	r2, r0
   e29ac:	d0f4      	beq.n	e2998 <rint+0x88>
   e29ae:	0840      	lsrs	r0, r0, #1
   e29b0:	4202      	tst	r2, r0
   e29b2:	d0d5      	beq.n	e2960 <rint+0x50>
   e29b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e29b8:	ea25 0000 	bic.w	r0, r5, r0
   e29bc:	fa43 f606 	asr.w	r6, r3, r6
   e29c0:	ea46 0500 	orr.w	r5, r6, r0
   e29c4:	e7cc      	b.n	e2960 <rint+0x50>
   e29c6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e29ca:	4310      	orrs	r0, r2
   e29cc:	ee10 7a10 	vmov	r7, s0
   e29d0:	d0e2      	beq.n	e2998 <rint+0x88>
   e29d2:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e29d6:	4307      	orrs	r7, r0
   e29d8:	4278      	negs	r0, r7
   e29da:	4307      	orrs	r7, r0
   e29dc:	4815      	ldr	r0, [pc, #84]	; (e2a34 <rint+0x124>)
   e29de:	0c59      	lsrs	r1, r3, #17
   e29e0:	0b3f      	lsrs	r7, r7, #12
   e29e2:	0449      	lsls	r1, r1, #17
   e29e4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e29e8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e29ec:	ea47 0301 	orr.w	r3, r7, r1
   e29f0:	e9d0 6700 	ldrd	r6, r7, [r0]
   e29f4:	4619      	mov	r1, r3
   e29f6:	4610      	mov	r0, r2
   e29f8:	463b      	mov	r3, r7
   e29fa:	4632      	mov	r2, r6
   e29fc:	f000 f8b6 	bl	e2b6c <__adddf3>
   e2a00:	e9cd 0100 	strd	r0, r1, [sp]
   e2a04:	463b      	mov	r3, r7
   e2a06:	4632      	mov	r2, r6
   e2a08:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2a0c:	f000 f8ac 	bl	e2b68 <__aeabi_dsub>
   e2a10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2a14:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e2a18:	ec41 0b10 	vmov	d0, r0, r1
   e2a1c:	e7be      	b.n	e299c <rint+0x8c>
   e2a1e:	ee10 0a10 	vmov	r0, s0
   e2a22:	4619      	mov	r1, r3
   e2a24:	f000 f8a2 	bl	e2b6c <__adddf3>
   e2a28:	ec41 0b10 	vmov	d0, r0, r1
   e2a2c:	e7b6      	b.n	e299c <rint+0x8c>
   e2a2e:	bf00      	nop
   e2a30:	000fffff 	.word	0x000fffff
   e2a34:	000e8548 	.word	0x000e8548

000e2a38 <scalbn>:
   e2a38:	ec53 2b10 	vmov	r2, r3, d0
   e2a3c:	b570      	push	{r4, r5, r6, lr}
   e2a3e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e2a42:	4619      	mov	r1, r3
   e2a44:	4605      	mov	r5, r0
   e2a46:	bb14      	cbnz	r4, e2a8e <scalbn+0x56>
   e2a48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e2a4c:	4311      	orrs	r1, r2
   e2a4e:	d02a      	beq.n	e2aa6 <scalbn+0x6e>
   e2a50:	4619      	mov	r1, r3
   e2a52:	2200      	movs	r2, #0
   e2a54:	4b38      	ldr	r3, [pc, #224]	; (e2b38 <scalbn+0x100>)
   e2a56:	4e39      	ldr	r6, [pc, #228]	; (e2b3c <scalbn+0x104>)
   e2a58:	ee10 0a10 	vmov	r0, s0
   e2a5c:	f000 fa38 	bl	e2ed0 <__aeabi_dmul>
   e2a60:	42b5      	cmp	r5, r6
   e2a62:	4602      	mov	r2, r0
   e2a64:	460b      	mov	r3, r1
   e2a66:	db1f      	blt.n	e2aa8 <scalbn+0x70>
   e2a68:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e2a6c:	3c36      	subs	r4, #54	; 0x36
   e2a6e:	442c      	add	r4, r5
   e2a70:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e2a74:	4284      	cmp	r4, r0
   e2a76:	dc1f      	bgt.n	e2ab8 <scalbn+0x80>
   e2a78:	2c00      	cmp	r4, #0
   e2a7a:	dd2d      	ble.n	e2ad8 <scalbn+0xa0>
   e2a7c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e2a80:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e2a84:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2a88:	ec43 2b10 	vmov	d0, r2, r3
   e2a8c:	bd70      	pop	{r4, r5, r6, pc}
   e2a8e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e2a92:	4284      	cmp	r4, r0
   e2a94:	d1eb      	bne.n	e2a6e <scalbn+0x36>
   e2a96:	ee10 0a10 	vmov	r0, s0
   e2a9a:	4619      	mov	r1, r3
   e2a9c:	f000 f866 	bl	e2b6c <__adddf3>
   e2aa0:	ec41 0b10 	vmov	d0, r0, r1
   e2aa4:	bd70      	pop	{r4, r5, r6, pc}
   e2aa6:	bd70      	pop	{r4, r5, r6, pc}
   e2aa8:	a31f      	add	r3, pc, #124	; (adr r3, e2b28 <scalbn+0xf0>)
   e2aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2aae:	f000 fa0f 	bl	e2ed0 <__aeabi_dmul>
   e2ab2:	ec41 0b10 	vmov	d0, r0, r1
   e2ab6:	bd70      	pop	{r4, r5, r6, pc}
   e2ab8:	ec43 2b11 	vmov	d1, r2, r3
   e2abc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e2b30 <scalbn+0xf8>
   e2ac0:	f000 f840 	bl	e2b44 <copysign>
   e2ac4:	a31a      	add	r3, pc, #104	; (adr r3, e2b30 <scalbn+0xf8>)
   e2ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2aca:	ec51 0b10 	vmov	r0, r1, d0
   e2ace:	f000 f9ff 	bl	e2ed0 <__aeabi_dmul>
   e2ad2:	ec41 0b10 	vmov	d0, r0, r1
   e2ad6:	bd70      	pop	{r4, r5, r6, pc}
   e2ad8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e2adc:	da13      	bge.n	e2b06 <scalbn+0xce>
   e2ade:	f24c 3150 	movw	r1, #50000	; 0xc350
   e2ae2:	428d      	cmp	r5, r1
   e2ae4:	ec43 2b11 	vmov	d1, r2, r3
   e2ae8:	dce8      	bgt.n	e2abc <scalbn+0x84>
   e2aea:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e2b28 <scalbn+0xf0>
   e2aee:	f000 f829 	bl	e2b44 <copysign>
   e2af2:	a30d      	add	r3, pc, #52	; (adr r3, e2b28 <scalbn+0xf0>)
   e2af4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2af8:	ec51 0b10 	vmov	r0, r1, d0
   e2afc:	f000 f9e8 	bl	e2ed0 <__aeabi_dmul>
   e2b00:	ec41 0b10 	vmov	d0, r0, r1
   e2b04:	bd70      	pop	{r4, r5, r6, pc}
   e2b06:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e2b0a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e2b0e:	3436      	adds	r4, #54	; 0x36
   e2b10:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2b14:	4610      	mov	r0, r2
   e2b16:	4619      	mov	r1, r3
   e2b18:	2200      	movs	r2, #0
   e2b1a:	4b09      	ldr	r3, [pc, #36]	; (e2b40 <scalbn+0x108>)
   e2b1c:	f000 f9d8 	bl	e2ed0 <__aeabi_dmul>
   e2b20:	ec41 0b10 	vmov	d0, r0, r1
   e2b24:	bd70      	pop	{r4, r5, r6, pc}
   e2b26:	bf00      	nop
   e2b28:	c2f8f359 	.word	0xc2f8f359
   e2b2c:	01a56e1f 	.word	0x01a56e1f
   e2b30:	8800759c 	.word	0x8800759c
   e2b34:	7e37e43c 	.word	0x7e37e43c
   e2b38:	43500000 	.word	0x43500000
   e2b3c:	ffff3cb0 	.word	0xffff3cb0
   e2b40:	3c900000 	.word	0x3c900000

000e2b44 <copysign>:
   e2b44:	ec53 2b10 	vmov	r2, r3, d0
   e2b48:	ee11 0a90 	vmov	r0, s3
   e2b4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e2b50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e2b54:	ea41 0300 	orr.w	r3, r1, r0
   e2b58:	ec43 2b10 	vmov	d0, r2, r3
   e2b5c:	4770      	bx	lr
   e2b5e:	bf00      	nop

000e2b60 <__aeabi_drsub>:
   e2b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e2b64:	e002      	b.n	e2b6c <__adddf3>
   e2b66:	bf00      	nop

000e2b68 <__aeabi_dsub>:
   e2b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e2b6c <__adddf3>:
   e2b6c:	b530      	push	{r4, r5, lr}
   e2b6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e2b72:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e2b76:	ea94 0f05 	teq	r4, r5
   e2b7a:	bf08      	it	eq
   e2b7c:	ea90 0f02 	teqeq	r0, r2
   e2b80:	bf1f      	itttt	ne
   e2b82:	ea54 0c00 	orrsne.w	ip, r4, r0
   e2b86:	ea55 0c02 	orrsne.w	ip, r5, r2
   e2b8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e2b8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2b92:	f000 80e2 	beq.w	e2d5a <__adddf3+0x1ee>
   e2b96:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e2b9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e2b9e:	bfb8      	it	lt
   e2ba0:	426d      	neglt	r5, r5
   e2ba2:	dd0c      	ble.n	e2bbe <__adddf3+0x52>
   e2ba4:	442c      	add	r4, r5
   e2ba6:	ea80 0202 	eor.w	r2, r0, r2
   e2baa:	ea81 0303 	eor.w	r3, r1, r3
   e2bae:	ea82 0000 	eor.w	r0, r2, r0
   e2bb2:	ea83 0101 	eor.w	r1, r3, r1
   e2bb6:	ea80 0202 	eor.w	r2, r0, r2
   e2bba:	ea81 0303 	eor.w	r3, r1, r3
   e2bbe:	2d36      	cmp	r5, #54	; 0x36
   e2bc0:	bf88      	it	hi
   e2bc2:	bd30      	pophi	{r4, r5, pc}
   e2bc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e2bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e2bcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e2bd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e2bd4:	d002      	beq.n	e2bdc <__adddf3+0x70>
   e2bd6:	4240      	negs	r0, r0
   e2bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2bdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e2be0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e2be4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e2be8:	d002      	beq.n	e2bf0 <__adddf3+0x84>
   e2bea:	4252      	negs	r2, r2
   e2bec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e2bf0:	ea94 0f05 	teq	r4, r5
   e2bf4:	f000 80a7 	beq.w	e2d46 <__adddf3+0x1da>
   e2bf8:	f1a4 0401 	sub.w	r4, r4, #1
   e2bfc:	f1d5 0e20 	rsbs	lr, r5, #32
   e2c00:	db0d      	blt.n	e2c1e <__adddf3+0xb2>
   e2c02:	fa02 fc0e 	lsl.w	ip, r2, lr
   e2c06:	fa22 f205 	lsr.w	r2, r2, r5
   e2c0a:	1880      	adds	r0, r0, r2
   e2c0c:	f141 0100 	adc.w	r1, r1, #0
   e2c10:	fa03 f20e 	lsl.w	r2, r3, lr
   e2c14:	1880      	adds	r0, r0, r2
   e2c16:	fa43 f305 	asr.w	r3, r3, r5
   e2c1a:	4159      	adcs	r1, r3
   e2c1c:	e00e      	b.n	e2c3c <__adddf3+0xd0>
   e2c1e:	f1a5 0520 	sub.w	r5, r5, #32
   e2c22:	f10e 0e20 	add.w	lr, lr, #32
   e2c26:	2a01      	cmp	r2, #1
   e2c28:	fa03 fc0e 	lsl.w	ip, r3, lr
   e2c2c:	bf28      	it	cs
   e2c2e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e2c32:	fa43 f305 	asr.w	r3, r3, r5
   e2c36:	18c0      	adds	r0, r0, r3
   e2c38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e2c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2c40:	d507      	bpl.n	e2c52 <__adddf3+0xe6>
   e2c42:	f04f 0e00 	mov.w	lr, #0
   e2c46:	f1dc 0c00 	rsbs	ip, ip, #0
   e2c4a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e2c4e:	eb6e 0101 	sbc.w	r1, lr, r1
   e2c52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e2c56:	d31b      	bcc.n	e2c90 <__adddf3+0x124>
   e2c58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e2c5c:	d30c      	bcc.n	e2c78 <__adddf3+0x10c>
   e2c5e:	0849      	lsrs	r1, r1, #1
   e2c60:	ea5f 0030 	movs.w	r0, r0, rrx
   e2c64:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e2c68:	f104 0401 	add.w	r4, r4, #1
   e2c6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e2c70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e2c74:	f080 809a 	bcs.w	e2dac <__adddf3+0x240>
   e2c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e2c7c:	bf08      	it	eq
   e2c7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e2c82:	f150 0000 	adcs.w	r0, r0, #0
   e2c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2c8a:	ea41 0105 	orr.w	r1, r1, r5
   e2c8e:	bd30      	pop	{r4, r5, pc}
   e2c90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e2c94:	4140      	adcs	r0, r0
   e2c96:	eb41 0101 	adc.w	r1, r1, r1
   e2c9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2c9e:	f1a4 0401 	sub.w	r4, r4, #1
   e2ca2:	d1e9      	bne.n	e2c78 <__adddf3+0x10c>
   e2ca4:	f091 0f00 	teq	r1, #0
   e2ca8:	bf04      	itt	eq
   e2caa:	4601      	moveq	r1, r0
   e2cac:	2000      	moveq	r0, #0
   e2cae:	fab1 f381 	clz	r3, r1
   e2cb2:	bf08      	it	eq
   e2cb4:	3320      	addeq	r3, #32
   e2cb6:	f1a3 030b 	sub.w	r3, r3, #11
   e2cba:	f1b3 0220 	subs.w	r2, r3, #32
   e2cbe:	da0c      	bge.n	e2cda <__adddf3+0x16e>
   e2cc0:	320c      	adds	r2, #12
   e2cc2:	dd08      	ble.n	e2cd6 <__adddf3+0x16a>
   e2cc4:	f102 0c14 	add.w	ip, r2, #20
   e2cc8:	f1c2 020c 	rsb	r2, r2, #12
   e2ccc:	fa01 f00c 	lsl.w	r0, r1, ip
   e2cd0:	fa21 f102 	lsr.w	r1, r1, r2
   e2cd4:	e00c      	b.n	e2cf0 <__adddf3+0x184>
   e2cd6:	f102 0214 	add.w	r2, r2, #20
   e2cda:	bfd8      	it	le
   e2cdc:	f1c2 0c20 	rsble	ip, r2, #32
   e2ce0:	fa01 f102 	lsl.w	r1, r1, r2
   e2ce4:	fa20 fc0c 	lsr.w	ip, r0, ip
   e2ce8:	bfdc      	itt	le
   e2cea:	ea41 010c 	orrle.w	r1, r1, ip
   e2cee:	4090      	lslle	r0, r2
   e2cf0:	1ae4      	subs	r4, r4, r3
   e2cf2:	bfa2      	ittt	ge
   e2cf4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e2cf8:	4329      	orrge	r1, r5
   e2cfa:	bd30      	popge	{r4, r5, pc}
   e2cfc:	ea6f 0404 	mvn.w	r4, r4
   e2d00:	3c1f      	subs	r4, #31
   e2d02:	da1c      	bge.n	e2d3e <__adddf3+0x1d2>
   e2d04:	340c      	adds	r4, #12
   e2d06:	dc0e      	bgt.n	e2d26 <__adddf3+0x1ba>
   e2d08:	f104 0414 	add.w	r4, r4, #20
   e2d0c:	f1c4 0220 	rsb	r2, r4, #32
   e2d10:	fa20 f004 	lsr.w	r0, r0, r4
   e2d14:	fa01 f302 	lsl.w	r3, r1, r2
   e2d18:	ea40 0003 	orr.w	r0, r0, r3
   e2d1c:	fa21 f304 	lsr.w	r3, r1, r4
   e2d20:	ea45 0103 	orr.w	r1, r5, r3
   e2d24:	bd30      	pop	{r4, r5, pc}
   e2d26:	f1c4 040c 	rsb	r4, r4, #12
   e2d2a:	f1c4 0220 	rsb	r2, r4, #32
   e2d2e:	fa20 f002 	lsr.w	r0, r0, r2
   e2d32:	fa01 f304 	lsl.w	r3, r1, r4
   e2d36:	ea40 0003 	orr.w	r0, r0, r3
   e2d3a:	4629      	mov	r1, r5
   e2d3c:	bd30      	pop	{r4, r5, pc}
   e2d3e:	fa21 f004 	lsr.w	r0, r1, r4
   e2d42:	4629      	mov	r1, r5
   e2d44:	bd30      	pop	{r4, r5, pc}
   e2d46:	f094 0f00 	teq	r4, #0
   e2d4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e2d4e:	bf06      	itte	eq
   e2d50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e2d54:	3401      	addeq	r4, #1
   e2d56:	3d01      	subne	r5, #1
   e2d58:	e74e      	b.n	e2bf8 <__adddf3+0x8c>
   e2d5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2d5e:	bf18      	it	ne
   e2d60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2d64:	d029      	beq.n	e2dba <__adddf3+0x24e>
   e2d66:	ea94 0f05 	teq	r4, r5
   e2d6a:	bf08      	it	eq
   e2d6c:	ea90 0f02 	teqeq	r0, r2
   e2d70:	d005      	beq.n	e2d7e <__adddf3+0x212>
   e2d72:	ea54 0c00 	orrs.w	ip, r4, r0
   e2d76:	bf04      	itt	eq
   e2d78:	4619      	moveq	r1, r3
   e2d7a:	4610      	moveq	r0, r2
   e2d7c:	bd30      	pop	{r4, r5, pc}
   e2d7e:	ea91 0f03 	teq	r1, r3
   e2d82:	bf1e      	ittt	ne
   e2d84:	2100      	movne	r1, #0
   e2d86:	2000      	movne	r0, #0
   e2d88:	bd30      	popne	{r4, r5, pc}
   e2d8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e2d8e:	d105      	bne.n	e2d9c <__adddf3+0x230>
   e2d90:	0040      	lsls	r0, r0, #1
   e2d92:	4149      	adcs	r1, r1
   e2d94:	bf28      	it	cs
   e2d96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e2d9a:	bd30      	pop	{r4, r5, pc}
   e2d9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e2da0:	bf3c      	itt	cc
   e2da2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e2da6:	bd30      	popcc	{r4, r5, pc}
   e2da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2dac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e2db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e2db4:	f04f 0000 	mov.w	r0, #0
   e2db8:	bd30      	pop	{r4, r5, pc}
   e2dba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2dbe:	bf1a      	itte	ne
   e2dc0:	4619      	movne	r1, r3
   e2dc2:	4610      	movne	r0, r2
   e2dc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e2dc8:	bf1c      	itt	ne
   e2dca:	460b      	movne	r3, r1
   e2dcc:	4602      	movne	r2, r0
   e2dce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e2dd2:	bf06      	itte	eq
   e2dd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e2dd8:	ea91 0f03 	teqeq	r1, r3
   e2ddc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e2de0:	bd30      	pop	{r4, r5, pc}
   e2de2:	bf00      	nop

000e2de4 <__aeabi_ui2d>:
   e2de4:	f090 0f00 	teq	r0, #0
   e2de8:	bf04      	itt	eq
   e2dea:	2100      	moveq	r1, #0
   e2dec:	4770      	bxeq	lr
   e2dee:	b530      	push	{r4, r5, lr}
   e2df0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2df4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2df8:	f04f 0500 	mov.w	r5, #0
   e2dfc:	f04f 0100 	mov.w	r1, #0
   e2e00:	e750      	b.n	e2ca4 <__adddf3+0x138>
   e2e02:	bf00      	nop

000e2e04 <__aeabi_i2d>:
   e2e04:	f090 0f00 	teq	r0, #0
   e2e08:	bf04      	itt	eq
   e2e0a:	2100      	moveq	r1, #0
   e2e0c:	4770      	bxeq	lr
   e2e0e:	b530      	push	{r4, r5, lr}
   e2e10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2e14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2e18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e2e1c:	bf48      	it	mi
   e2e1e:	4240      	negmi	r0, r0
   e2e20:	f04f 0100 	mov.w	r1, #0
   e2e24:	e73e      	b.n	e2ca4 <__adddf3+0x138>
   e2e26:	bf00      	nop

000e2e28 <__aeabi_f2d>:
   e2e28:	0042      	lsls	r2, r0, #1
   e2e2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e2e2e:	ea4f 0131 	mov.w	r1, r1, rrx
   e2e32:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e2e36:	bf1f      	itttt	ne
   e2e38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e2e3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2e40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e2e44:	4770      	bxne	lr
   e2e46:	f092 0f00 	teq	r2, #0
   e2e4a:	bf14      	ite	ne
   e2e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2e50:	4770      	bxeq	lr
   e2e52:	b530      	push	{r4, r5, lr}
   e2e54:	f44f 7460 	mov.w	r4, #896	; 0x380
   e2e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2e60:	e720      	b.n	e2ca4 <__adddf3+0x138>
   e2e62:	bf00      	nop

000e2e64 <__aeabi_ul2d>:
   e2e64:	ea50 0201 	orrs.w	r2, r0, r1
   e2e68:	bf08      	it	eq
   e2e6a:	4770      	bxeq	lr
   e2e6c:	b530      	push	{r4, r5, lr}
   e2e6e:	f04f 0500 	mov.w	r5, #0
   e2e72:	e00a      	b.n	e2e8a <__aeabi_l2d+0x16>

000e2e74 <__aeabi_l2d>:
   e2e74:	ea50 0201 	orrs.w	r2, r0, r1
   e2e78:	bf08      	it	eq
   e2e7a:	4770      	bxeq	lr
   e2e7c:	b530      	push	{r4, r5, lr}
   e2e7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e2e82:	d502      	bpl.n	e2e8a <__aeabi_l2d+0x16>
   e2e84:	4240      	negs	r0, r0
   e2e86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2e8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2e8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2e92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e2e96:	f43f aedc 	beq.w	e2c52 <__adddf3+0xe6>
   e2e9a:	f04f 0203 	mov.w	r2, #3
   e2e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2ea2:	bf18      	it	ne
   e2ea4:	3203      	addne	r2, #3
   e2ea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2eaa:	bf18      	it	ne
   e2eac:	3203      	addne	r2, #3
   e2eae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e2eb2:	f1c2 0320 	rsb	r3, r2, #32
   e2eb6:	fa00 fc03 	lsl.w	ip, r0, r3
   e2eba:	fa20 f002 	lsr.w	r0, r0, r2
   e2ebe:	fa01 fe03 	lsl.w	lr, r1, r3
   e2ec2:	ea40 000e 	orr.w	r0, r0, lr
   e2ec6:	fa21 f102 	lsr.w	r1, r1, r2
   e2eca:	4414      	add	r4, r2
   e2ecc:	e6c1      	b.n	e2c52 <__adddf3+0xe6>
   e2ece:	bf00      	nop

000e2ed0 <__aeabi_dmul>:
   e2ed0:	b570      	push	{r4, r5, r6, lr}
   e2ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e2ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e2eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e2ede:	bf1d      	ittte	ne
   e2ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e2ee4:	ea94 0f0c 	teqne	r4, ip
   e2ee8:	ea95 0f0c 	teqne	r5, ip
   e2eec:	f000 f8de 	bleq	e30ac <__aeabi_dmul+0x1dc>
   e2ef0:	442c      	add	r4, r5
   e2ef2:	ea81 0603 	eor.w	r6, r1, r3
   e2ef6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e2efa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e2efe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e2f02:	bf18      	it	ne
   e2f04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e2f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e2f10:	d038      	beq.n	e2f84 <__aeabi_dmul+0xb4>
   e2f12:	fba0 ce02 	umull	ip, lr, r0, r2
   e2f16:	f04f 0500 	mov.w	r5, #0
   e2f1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e2f1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e2f22:	fbe0 e503 	umlal	lr, r5, r0, r3
   e2f26:	f04f 0600 	mov.w	r6, #0
   e2f2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e2f2e:	f09c 0f00 	teq	ip, #0
   e2f32:	bf18      	it	ne
   e2f34:	f04e 0e01 	orrne.w	lr, lr, #1
   e2f38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e2f3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e2f40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e2f44:	d204      	bcs.n	e2f50 <__aeabi_dmul+0x80>
   e2f46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e2f4a:	416d      	adcs	r5, r5
   e2f4c:	eb46 0606 	adc.w	r6, r6, r6
   e2f50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e2f54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e2f58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e2f5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e2f60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e2f64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e2f68:	bf88      	it	hi
   e2f6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e2f6e:	d81e      	bhi.n	e2fae <__aeabi_dmul+0xde>
   e2f70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e2f74:	bf08      	it	eq
   e2f76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e2f7a:	f150 0000 	adcs.w	r0, r0, #0
   e2f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2f82:	bd70      	pop	{r4, r5, r6, pc}
   e2f84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e2f88:	ea46 0101 	orr.w	r1, r6, r1
   e2f8c:	ea40 0002 	orr.w	r0, r0, r2
   e2f90:	ea81 0103 	eor.w	r1, r1, r3
   e2f94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e2f98:	bfc2      	ittt	gt
   e2f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e2f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e2fa2:	bd70      	popgt	{r4, r5, r6, pc}
   e2fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2fa8:	f04f 0e00 	mov.w	lr, #0
   e2fac:	3c01      	subs	r4, #1
   e2fae:	f300 80ab 	bgt.w	e3108 <__aeabi_dmul+0x238>
   e2fb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e2fb6:	bfde      	ittt	le
   e2fb8:	2000      	movle	r0, #0
   e2fba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e2fbe:	bd70      	pople	{r4, r5, r6, pc}
   e2fc0:	f1c4 0400 	rsb	r4, r4, #0
   e2fc4:	3c20      	subs	r4, #32
   e2fc6:	da35      	bge.n	e3034 <__aeabi_dmul+0x164>
   e2fc8:	340c      	adds	r4, #12
   e2fca:	dc1b      	bgt.n	e3004 <__aeabi_dmul+0x134>
   e2fcc:	f104 0414 	add.w	r4, r4, #20
   e2fd0:	f1c4 0520 	rsb	r5, r4, #32
   e2fd4:	fa00 f305 	lsl.w	r3, r0, r5
   e2fd8:	fa20 f004 	lsr.w	r0, r0, r4
   e2fdc:	fa01 f205 	lsl.w	r2, r1, r5
   e2fe0:	ea40 0002 	orr.w	r0, r0, r2
   e2fe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e2fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e2ff0:	fa21 f604 	lsr.w	r6, r1, r4
   e2ff4:	eb42 0106 	adc.w	r1, r2, r6
   e2ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2ffc:	bf08      	it	eq
   e2ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e3002:	bd70      	pop	{r4, r5, r6, pc}
   e3004:	f1c4 040c 	rsb	r4, r4, #12
   e3008:	f1c4 0520 	rsb	r5, r4, #32
   e300c:	fa00 f304 	lsl.w	r3, r0, r4
   e3010:	fa20 f005 	lsr.w	r0, r0, r5
   e3014:	fa01 f204 	lsl.w	r2, r1, r4
   e3018:	ea40 0002 	orr.w	r0, r0, r2
   e301c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e3020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e3024:	f141 0100 	adc.w	r1, r1, #0
   e3028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e302c:	bf08      	it	eq
   e302e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e3032:	bd70      	pop	{r4, r5, r6, pc}
   e3034:	f1c4 0520 	rsb	r5, r4, #32
   e3038:	fa00 f205 	lsl.w	r2, r0, r5
   e303c:	ea4e 0e02 	orr.w	lr, lr, r2
   e3040:	fa20 f304 	lsr.w	r3, r0, r4
   e3044:	fa01 f205 	lsl.w	r2, r1, r5
   e3048:	ea43 0302 	orr.w	r3, r3, r2
   e304c:	fa21 f004 	lsr.w	r0, r1, r4
   e3050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e3054:	fa21 f204 	lsr.w	r2, r1, r4
   e3058:	ea20 0002 	bic.w	r0, r0, r2
   e305c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e3060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e3064:	bf08      	it	eq
   e3066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e306a:	bd70      	pop	{r4, r5, r6, pc}
   e306c:	f094 0f00 	teq	r4, #0
   e3070:	d10f      	bne.n	e3092 <__aeabi_dmul+0x1c2>
   e3072:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e3076:	0040      	lsls	r0, r0, #1
   e3078:	eb41 0101 	adc.w	r1, r1, r1
   e307c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e3080:	bf08      	it	eq
   e3082:	3c01      	subeq	r4, #1
   e3084:	d0f7      	beq.n	e3076 <__aeabi_dmul+0x1a6>
   e3086:	ea41 0106 	orr.w	r1, r1, r6
   e308a:	f095 0f00 	teq	r5, #0
   e308e:	bf18      	it	ne
   e3090:	4770      	bxne	lr
   e3092:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e3096:	0052      	lsls	r2, r2, #1
   e3098:	eb43 0303 	adc.w	r3, r3, r3
   e309c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e30a0:	bf08      	it	eq
   e30a2:	3d01      	subeq	r5, #1
   e30a4:	d0f7      	beq.n	e3096 <__aeabi_dmul+0x1c6>
   e30a6:	ea43 0306 	orr.w	r3, r3, r6
   e30aa:	4770      	bx	lr
   e30ac:	ea94 0f0c 	teq	r4, ip
   e30b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e30b4:	bf18      	it	ne
   e30b6:	ea95 0f0c 	teqne	r5, ip
   e30ba:	d00c      	beq.n	e30d6 <__aeabi_dmul+0x206>
   e30bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e30c0:	bf18      	it	ne
   e30c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e30c6:	d1d1      	bne.n	e306c <__aeabi_dmul+0x19c>
   e30c8:	ea81 0103 	eor.w	r1, r1, r3
   e30cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e30d0:	f04f 0000 	mov.w	r0, #0
   e30d4:	bd70      	pop	{r4, r5, r6, pc}
   e30d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e30da:	bf06      	itte	eq
   e30dc:	4610      	moveq	r0, r2
   e30de:	4619      	moveq	r1, r3
   e30e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e30e4:	d019      	beq.n	e311a <__aeabi_dmul+0x24a>
   e30e6:	ea94 0f0c 	teq	r4, ip
   e30ea:	d102      	bne.n	e30f2 <__aeabi_dmul+0x222>
   e30ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e30f0:	d113      	bne.n	e311a <__aeabi_dmul+0x24a>
   e30f2:	ea95 0f0c 	teq	r5, ip
   e30f6:	d105      	bne.n	e3104 <__aeabi_dmul+0x234>
   e30f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e30fc:	bf1c      	itt	ne
   e30fe:	4610      	movne	r0, r2
   e3100:	4619      	movne	r1, r3
   e3102:	d10a      	bne.n	e311a <__aeabi_dmul+0x24a>
   e3104:	ea81 0103 	eor.w	r1, r1, r3
   e3108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e310c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e3110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e3114:	f04f 0000 	mov.w	r0, #0
   e3118:	bd70      	pop	{r4, r5, r6, pc}
   e311a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e311e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e3122:	bd70      	pop	{r4, r5, r6, pc}

000e3124 <__aeabi_ddiv>:
   e3124:	b570      	push	{r4, r5, r6, lr}
   e3126:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e312a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e312e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e3132:	bf1d      	ittte	ne
   e3134:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e3138:	ea94 0f0c 	teqne	r4, ip
   e313c:	ea95 0f0c 	teqne	r5, ip
   e3140:	f000 f8a7 	bleq	e3292 <__aeabi_ddiv+0x16e>
   e3144:	eba4 0405 	sub.w	r4, r4, r5
   e3148:	ea81 0e03 	eor.w	lr, r1, r3
   e314c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e3150:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e3154:	f000 8088 	beq.w	e3268 <__aeabi_ddiv+0x144>
   e3158:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e315c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e3160:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e3164:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e3168:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e316c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e3170:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e3174:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e3178:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e317c:	429d      	cmp	r5, r3
   e317e:	bf08      	it	eq
   e3180:	4296      	cmpeq	r6, r2
   e3182:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e3186:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e318a:	d202      	bcs.n	e3192 <__aeabi_ddiv+0x6e>
   e318c:	085b      	lsrs	r3, r3, #1
   e318e:	ea4f 0232 	mov.w	r2, r2, rrx
   e3192:	1ab6      	subs	r6, r6, r2
   e3194:	eb65 0503 	sbc.w	r5, r5, r3
   e3198:	085b      	lsrs	r3, r3, #1
   e319a:	ea4f 0232 	mov.w	r2, r2, rrx
   e319e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e31a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e31a6:	ebb6 0e02 	subs.w	lr, r6, r2
   e31aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e31ae:	bf22      	ittt	cs
   e31b0:	1ab6      	subcs	r6, r6, r2
   e31b2:	4675      	movcs	r5, lr
   e31b4:	ea40 000c 	orrcs.w	r0, r0, ip
   e31b8:	085b      	lsrs	r3, r3, #1
   e31ba:	ea4f 0232 	mov.w	r2, r2, rrx
   e31be:	ebb6 0e02 	subs.w	lr, r6, r2
   e31c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e31c6:	bf22      	ittt	cs
   e31c8:	1ab6      	subcs	r6, r6, r2
   e31ca:	4675      	movcs	r5, lr
   e31cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e31d0:	085b      	lsrs	r3, r3, #1
   e31d2:	ea4f 0232 	mov.w	r2, r2, rrx
   e31d6:	ebb6 0e02 	subs.w	lr, r6, r2
   e31da:	eb75 0e03 	sbcs.w	lr, r5, r3
   e31de:	bf22      	ittt	cs
   e31e0:	1ab6      	subcs	r6, r6, r2
   e31e2:	4675      	movcs	r5, lr
   e31e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e31e8:	085b      	lsrs	r3, r3, #1
   e31ea:	ea4f 0232 	mov.w	r2, r2, rrx
   e31ee:	ebb6 0e02 	subs.w	lr, r6, r2
   e31f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e31f6:	bf22      	ittt	cs
   e31f8:	1ab6      	subcs	r6, r6, r2
   e31fa:	4675      	movcs	r5, lr
   e31fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e3200:	ea55 0e06 	orrs.w	lr, r5, r6
   e3204:	d018      	beq.n	e3238 <__aeabi_ddiv+0x114>
   e3206:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e320a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e320e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e3212:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e3216:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e321a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e321e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e3222:	d1c0      	bne.n	e31a6 <__aeabi_ddiv+0x82>
   e3224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e3228:	d10b      	bne.n	e3242 <__aeabi_ddiv+0x11e>
   e322a:	ea41 0100 	orr.w	r1, r1, r0
   e322e:	f04f 0000 	mov.w	r0, #0
   e3232:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e3236:	e7b6      	b.n	e31a6 <__aeabi_ddiv+0x82>
   e3238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e323c:	bf04      	itt	eq
   e323e:	4301      	orreq	r1, r0
   e3240:	2000      	moveq	r0, #0
   e3242:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e3246:	bf88      	it	hi
   e3248:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e324c:	f63f aeaf 	bhi.w	e2fae <__aeabi_dmul+0xde>
   e3250:	ebb5 0c03 	subs.w	ip, r5, r3
   e3254:	bf04      	itt	eq
   e3256:	ebb6 0c02 	subseq.w	ip, r6, r2
   e325a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e325e:	f150 0000 	adcs.w	r0, r0, #0
   e3262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e3266:	bd70      	pop	{r4, r5, r6, pc}
   e3268:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e326c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e3270:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e3274:	bfc2      	ittt	gt
   e3276:	ebd4 050c 	rsbsgt	r5, r4, ip
   e327a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e327e:	bd70      	popgt	{r4, r5, r6, pc}
   e3280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3284:	f04f 0e00 	mov.w	lr, #0
   e3288:	3c01      	subs	r4, #1
   e328a:	e690      	b.n	e2fae <__aeabi_dmul+0xde>
   e328c:	ea45 0e06 	orr.w	lr, r5, r6
   e3290:	e68d      	b.n	e2fae <__aeabi_dmul+0xde>
   e3292:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e3296:	ea94 0f0c 	teq	r4, ip
   e329a:	bf08      	it	eq
   e329c:	ea95 0f0c 	teqeq	r5, ip
   e32a0:	f43f af3b 	beq.w	e311a <__aeabi_dmul+0x24a>
   e32a4:	ea94 0f0c 	teq	r4, ip
   e32a8:	d10a      	bne.n	e32c0 <__aeabi_ddiv+0x19c>
   e32aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e32ae:	f47f af34 	bne.w	e311a <__aeabi_dmul+0x24a>
   e32b2:	ea95 0f0c 	teq	r5, ip
   e32b6:	f47f af25 	bne.w	e3104 <__aeabi_dmul+0x234>
   e32ba:	4610      	mov	r0, r2
   e32bc:	4619      	mov	r1, r3
   e32be:	e72c      	b.n	e311a <__aeabi_dmul+0x24a>
   e32c0:	ea95 0f0c 	teq	r5, ip
   e32c4:	d106      	bne.n	e32d4 <__aeabi_ddiv+0x1b0>
   e32c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e32ca:	f43f aefd 	beq.w	e30c8 <__aeabi_dmul+0x1f8>
   e32ce:	4610      	mov	r0, r2
   e32d0:	4619      	mov	r1, r3
   e32d2:	e722      	b.n	e311a <__aeabi_dmul+0x24a>
   e32d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e32d8:	bf18      	it	ne
   e32da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e32de:	f47f aec5 	bne.w	e306c <__aeabi_dmul+0x19c>
   e32e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e32e6:	f47f af0d 	bne.w	e3104 <__aeabi_dmul+0x234>
   e32ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e32ee:	f47f aeeb 	bne.w	e30c8 <__aeabi_dmul+0x1f8>
   e32f2:	e712      	b.n	e311a <__aeabi_dmul+0x24a>

000e32f4 <__gedf2>:
   e32f4:	f04f 3cff 	mov.w	ip, #4294967295
   e32f8:	e006      	b.n	e3308 <__cmpdf2+0x4>
   e32fa:	bf00      	nop

000e32fc <__ledf2>:
   e32fc:	f04f 0c01 	mov.w	ip, #1
   e3300:	e002      	b.n	e3308 <__cmpdf2+0x4>
   e3302:	bf00      	nop

000e3304 <__cmpdf2>:
   e3304:	f04f 0c01 	mov.w	ip, #1
   e3308:	f84d cd04 	str.w	ip, [sp, #-4]!
   e330c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3318:	bf18      	it	ne
   e331a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e331e:	d01b      	beq.n	e3358 <__cmpdf2+0x54>
   e3320:	b001      	add	sp, #4
   e3322:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e3326:	bf0c      	ite	eq
   e3328:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e332c:	ea91 0f03 	teqne	r1, r3
   e3330:	bf02      	ittt	eq
   e3332:	ea90 0f02 	teqeq	r0, r2
   e3336:	2000      	moveq	r0, #0
   e3338:	4770      	bxeq	lr
   e333a:	f110 0f00 	cmn.w	r0, #0
   e333e:	ea91 0f03 	teq	r1, r3
   e3342:	bf58      	it	pl
   e3344:	4299      	cmppl	r1, r3
   e3346:	bf08      	it	eq
   e3348:	4290      	cmpeq	r0, r2
   e334a:	bf2c      	ite	cs
   e334c:	17d8      	asrcs	r0, r3, #31
   e334e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e3352:	f040 0001 	orr.w	r0, r0, #1
   e3356:	4770      	bx	lr
   e3358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e335c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3360:	d102      	bne.n	e3368 <__cmpdf2+0x64>
   e3362:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3366:	d107      	bne.n	e3378 <__cmpdf2+0x74>
   e3368:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e336c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3370:	d1d6      	bne.n	e3320 <__cmpdf2+0x1c>
   e3372:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3376:	d0d3      	beq.n	e3320 <__cmpdf2+0x1c>
   e3378:	f85d 0b04 	ldr.w	r0, [sp], #4
   e337c:	4770      	bx	lr
   e337e:	bf00      	nop

000e3380 <__aeabi_cdrcmple>:
   e3380:	4684      	mov	ip, r0
   e3382:	4610      	mov	r0, r2
   e3384:	4662      	mov	r2, ip
   e3386:	468c      	mov	ip, r1
   e3388:	4619      	mov	r1, r3
   e338a:	4663      	mov	r3, ip
   e338c:	e000      	b.n	e3390 <__aeabi_cdcmpeq>
   e338e:	bf00      	nop

000e3390 <__aeabi_cdcmpeq>:
   e3390:	b501      	push	{r0, lr}
   e3392:	f7ff ffb7 	bl	e3304 <__cmpdf2>
   e3396:	2800      	cmp	r0, #0
   e3398:	bf48      	it	mi
   e339a:	f110 0f00 	cmnmi.w	r0, #0
   e339e:	bd01      	pop	{r0, pc}

000e33a0 <__aeabi_dcmpeq>:
   e33a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e33a4:	f7ff fff4 	bl	e3390 <__aeabi_cdcmpeq>
   e33a8:	bf0c      	ite	eq
   e33aa:	2001      	moveq	r0, #1
   e33ac:	2000      	movne	r0, #0
   e33ae:	f85d fb08 	ldr.w	pc, [sp], #8
   e33b2:	bf00      	nop

000e33b4 <__aeabi_dcmplt>:
   e33b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e33b8:	f7ff ffea 	bl	e3390 <__aeabi_cdcmpeq>
   e33bc:	bf34      	ite	cc
   e33be:	2001      	movcc	r0, #1
   e33c0:	2000      	movcs	r0, #0
   e33c2:	f85d fb08 	ldr.w	pc, [sp], #8
   e33c6:	bf00      	nop

000e33c8 <__aeabi_dcmple>:
   e33c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e33cc:	f7ff ffe0 	bl	e3390 <__aeabi_cdcmpeq>
   e33d0:	bf94      	ite	ls
   e33d2:	2001      	movls	r0, #1
   e33d4:	2000      	movhi	r0, #0
   e33d6:	f85d fb08 	ldr.w	pc, [sp], #8
   e33da:	bf00      	nop

000e33dc <__aeabi_dcmpge>:
   e33dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   e33e0:	f7ff ffce 	bl	e3380 <__aeabi_cdrcmple>
   e33e4:	bf94      	ite	ls
   e33e6:	2001      	movls	r0, #1
   e33e8:	2000      	movhi	r0, #0
   e33ea:	f85d fb08 	ldr.w	pc, [sp], #8
   e33ee:	bf00      	nop

000e33f0 <__aeabi_dcmpgt>:
   e33f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e33f4:	f7ff ffc4 	bl	e3380 <__aeabi_cdrcmple>
   e33f8:	bf34      	ite	cc
   e33fa:	2001      	movcc	r0, #1
   e33fc:	2000      	movcs	r0, #0
   e33fe:	f85d fb08 	ldr.w	pc, [sp], #8
   e3402:	bf00      	nop

000e3404 <__aeabi_dcmpun>:
   e3404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e340c:	d102      	bne.n	e3414 <__aeabi_dcmpun+0x10>
   e340e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3412:	d10a      	bne.n	e342a <__aeabi_dcmpun+0x26>
   e3414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e341c:	d102      	bne.n	e3424 <__aeabi_dcmpun+0x20>
   e341e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3422:	d102      	bne.n	e342a <__aeabi_dcmpun+0x26>
   e3424:	f04f 0000 	mov.w	r0, #0
   e3428:	4770      	bx	lr
   e342a:	f04f 0001 	mov.w	r0, #1
   e342e:	4770      	bx	lr

000e3430 <__aeabi_d2iz>:
   e3430:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e3434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e3438:	d215      	bcs.n	e3466 <__aeabi_d2iz+0x36>
   e343a:	d511      	bpl.n	e3460 <__aeabi_d2iz+0x30>
   e343c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e3440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e3444:	d912      	bls.n	e346c <__aeabi_d2iz+0x3c>
   e3446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e344a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e344e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e3452:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e3456:	fa23 f002 	lsr.w	r0, r3, r2
   e345a:	bf18      	it	ne
   e345c:	4240      	negne	r0, r0
   e345e:	4770      	bx	lr
   e3460:	f04f 0000 	mov.w	r0, #0
   e3464:	4770      	bx	lr
   e3466:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e346a:	d105      	bne.n	e3478 <__aeabi_d2iz+0x48>
   e346c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e3470:	bf08      	it	eq
   e3472:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e3476:	4770      	bx	lr
   e3478:	f04f 0000 	mov.w	r0, #0
   e347c:	4770      	bx	lr
   e347e:	bf00      	nop

000e3480 <__aeabi_d2uiz>:
   e3480:	004a      	lsls	r2, r1, #1
   e3482:	d211      	bcs.n	e34a8 <__aeabi_d2uiz+0x28>
   e3484:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e3488:	d211      	bcs.n	e34ae <__aeabi_d2uiz+0x2e>
   e348a:	d50d      	bpl.n	e34a8 <__aeabi_d2uiz+0x28>
   e348c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e3490:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e3494:	d40e      	bmi.n	e34b4 <__aeabi_d2uiz+0x34>
   e3496:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e349a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e349e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e34a2:	fa23 f002 	lsr.w	r0, r3, r2
   e34a6:	4770      	bx	lr
   e34a8:	f04f 0000 	mov.w	r0, #0
   e34ac:	4770      	bx	lr
   e34ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e34b2:	d102      	bne.n	e34ba <__aeabi_d2uiz+0x3a>
   e34b4:	f04f 30ff 	mov.w	r0, #4294967295
   e34b8:	4770      	bx	lr
   e34ba:	f04f 0000 	mov.w	r0, #0
   e34be:	4770      	bx	lr

000e34c0 <__aeabi_d2f>:
   e34c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e34c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e34c8:	bf24      	itt	cs
   e34ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e34ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e34d2:	d90d      	bls.n	e34f0 <__aeabi_d2f+0x30>
   e34d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e34d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e34dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e34e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e34e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e34e8:	bf08      	it	eq
   e34ea:	f020 0001 	biceq.w	r0, r0, #1
   e34ee:	4770      	bx	lr
   e34f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e34f4:	d121      	bne.n	e353a <__aeabi_d2f+0x7a>
   e34f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e34fa:	bfbc      	itt	lt
   e34fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e3500:	4770      	bxlt	lr
   e3502:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3506:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e350a:	f1c2 0218 	rsb	r2, r2, #24
   e350e:	f1c2 0c20 	rsb	ip, r2, #32
   e3512:	fa10 f30c 	lsls.w	r3, r0, ip
   e3516:	fa20 f002 	lsr.w	r0, r0, r2
   e351a:	bf18      	it	ne
   e351c:	f040 0001 	orrne.w	r0, r0, #1
   e3520:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e3524:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e3528:	fa03 fc0c 	lsl.w	ip, r3, ip
   e352c:	ea40 000c 	orr.w	r0, r0, ip
   e3530:	fa23 f302 	lsr.w	r3, r3, r2
   e3534:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e3538:	e7cc      	b.n	e34d4 <__aeabi_d2f+0x14>
   e353a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e353e:	d107      	bne.n	e3550 <__aeabi_d2f+0x90>
   e3540:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e3544:	bf1e      	ittt	ne
   e3546:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e354a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e354e:	4770      	bxne	lr
   e3550:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e3554:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e3558:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e355c:	4770      	bx	lr
   e355e:	bf00      	nop

000e3560 <asctime>:
   e3560:	4b09      	ldr	r3, [pc, #36]	; (e3588 <asctime+0x28>)
   e3562:	b570      	push	{r4, r5, r6, lr}
   e3564:	681c      	ldr	r4, [r3, #0]
   e3566:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e3568:	4606      	mov	r6, r0
   e356a:	b93d      	cbnz	r5, e357c <asctime+0x1c>
   e356c:	201a      	movs	r0, #26
   e356e:	f7f7 fb35 	bl	dabdc <malloc>
   e3572:	221a      	movs	r2, #26
   e3574:	6420      	str	r0, [r4, #64]	; 0x40
   e3576:	4629      	mov	r1, r5
   e3578:	f000 f94f 	bl	e381a <memset>
   e357c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e357e:	4630      	mov	r0, r6
   e3580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e3584:	f000 b802 	b.w	e358c <asctime_r>
   e3588:	2003d628 	.word	0x2003d628

000e358c <asctime_r>:
   e358c:	b510      	push	{r4, lr}
   e358e:	460c      	mov	r4, r1
   e3590:	6941      	ldr	r1, [r0, #20]
   e3592:	6903      	ldr	r3, [r0, #16]
   e3594:	6982      	ldr	r2, [r0, #24]
   e3596:	b086      	sub	sp, #24
   e3598:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e359c:	9104      	str	r1, [sp, #16]
   e359e:	6801      	ldr	r1, [r0, #0]
   e35a0:	9103      	str	r1, [sp, #12]
   e35a2:	6841      	ldr	r1, [r0, #4]
   e35a4:	9102      	str	r1, [sp, #8]
   e35a6:	6881      	ldr	r1, [r0, #8]
   e35a8:	9101      	str	r1, [sp, #4]
   e35aa:	68c1      	ldr	r1, [r0, #12]
   e35ac:	9100      	str	r1, [sp, #0]
   e35ae:	4907      	ldr	r1, [pc, #28]	; (e35cc <asctime_r+0x40>)
   e35b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e35b4:	440b      	add	r3, r1
   e35b6:	4906      	ldr	r1, [pc, #24]	; (e35d0 <asctime_r+0x44>)
   e35b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e35bc:	440a      	add	r2, r1
   e35be:	4620      	mov	r0, r4
   e35c0:	4904      	ldr	r1, [pc, #16]	; (e35d4 <asctime_r+0x48>)
   e35c2:	f7f7 fb23 	bl	dac0c <siprintf>
   e35c6:	4620      	mov	r0, r4
   e35c8:	b006      	add	sp, #24
   e35ca:	bd10      	pop	{r4, pc}
   e35cc:	000e856d 	.word	0x000e856d
   e35d0:	000e8558 	.word	0x000e8558
   e35d4:	000e8591 	.word	0x000e8591

000e35d8 <atof>:
   e35d8:	2100      	movs	r1, #0
   e35da:	f001 bf2d 	b.w	e5438 <strtod>

000e35de <atoi>:
   e35de:	220a      	movs	r2, #10
   e35e0:	2100      	movs	r1, #0
   e35e2:	f001 bfb7 	b.w	e5554 <strtol>

000e35e6 <atol>:
   e35e6:	220a      	movs	r2, #10
   e35e8:	2100      	movs	r1, #0
   e35ea:	f001 bfb3 	b.w	e5554 <strtol>
	...

000e35f0 <__cxa_atexit>:
   e35f0:	b510      	push	{r4, lr}
   e35f2:	4c05      	ldr	r4, [pc, #20]	; (e3608 <__cxa_atexit+0x18>)
   e35f4:	4613      	mov	r3, r2
   e35f6:	b12c      	cbz	r4, e3604 <__cxa_atexit+0x14>
   e35f8:	460a      	mov	r2, r1
   e35fa:	4601      	mov	r1, r0
   e35fc:	2002      	movs	r0, #2
   e35fe:	f3af 8000 	nop.w
   e3602:	bd10      	pop	{r4, pc}
   e3604:	4620      	mov	r0, r4
   e3606:	bd10      	pop	{r4, pc}
   e3608:	00000000 	.word	0x00000000

000e360c <localtime>:
   e360c:	b538      	push	{r3, r4, r5, lr}
   e360e:	4b07      	ldr	r3, [pc, #28]	; (e362c <localtime+0x20>)
   e3610:	681c      	ldr	r4, [r3, #0]
   e3612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3614:	4605      	mov	r5, r0
   e3616:	b91b      	cbnz	r3, e3620 <localtime+0x14>
   e3618:	2024      	movs	r0, #36	; 0x24
   e361a:	f7f7 fadf 	bl	dabdc <malloc>
   e361e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e3620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e3622:	4628      	mov	r0, r5
   e3624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e3628:	f000 b802 	b.w	e3630 <localtime_r>
   e362c:	2003d628 	.word	0x2003d628

000e3630 <localtime_r>:
   e3630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3634:	460c      	mov	r4, r1
   e3636:	4680      	mov	r8, r0
   e3638:	f002 fde4 	bl	e6204 <__gettzinfo>
   e363c:	4621      	mov	r1, r4
   e363e:	4607      	mov	r7, r0
   e3640:	4640      	mov	r0, r8
   e3642:	f002 fde3 	bl	e620c <gmtime_r>
   e3646:	6946      	ldr	r6, [r0, #20]
   e3648:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e364c:	07b3      	lsls	r3, r6, #30
   e364e:	4604      	mov	r4, r0
   e3650:	d105      	bne.n	e365e <localtime_r+0x2e>
   e3652:	2264      	movs	r2, #100	; 0x64
   e3654:	fb96 f3f2 	sdiv	r3, r6, r2
   e3658:	fb02 6313 	mls	r3, r2, r3, r6
   e365c:	b94b      	cbnz	r3, e3672 <localtime_r+0x42>
   e365e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3662:	fb96 f3f5 	sdiv	r3, r6, r5
   e3666:	fb05 6513 	mls	r5, r5, r3, r6
   e366a:	fab5 f385 	clz	r3, r5
   e366e:	095b      	lsrs	r3, r3, #5
   e3670:	e000      	b.n	e3674 <localtime_r+0x44>
   e3672:	2301      	movs	r3, #1
   e3674:	4a5f      	ldr	r2, [pc, #380]	; (e37f4 <localtime_r+0x1c4>)
   e3676:	2530      	movs	r5, #48	; 0x30
   e3678:	fb05 2503 	mla	r5, r5, r3, r2
   e367c:	f002 f8c0 	bl	e5800 <__tz_lock>
   e3680:	f002 f8c0 	bl	e5804 <_tzset_unlocked>
   e3684:	4b5c      	ldr	r3, [pc, #368]	; (e37f8 <localtime_r+0x1c8>)
   e3686:	681b      	ldr	r3, [r3, #0]
   e3688:	b1f3      	cbz	r3, e36c8 <localtime_r+0x98>
   e368a:	687b      	ldr	r3, [r7, #4]
   e368c:	429e      	cmp	r6, r3
   e368e:	d105      	bne.n	e369c <localtime_r+0x6c>
   e3690:	6839      	ldr	r1, [r7, #0]
   e3692:	f8d8 3000 	ldr.w	r3, [r8]
   e3696:	69fa      	ldr	r2, [r7, #28]
   e3698:	b941      	cbnz	r1, e36ac <localtime_r+0x7c>
   e369a:	e00a      	b.n	e36b2 <localtime_r+0x82>
   e369c:	4630      	mov	r0, r6
   e369e:	f002 f807 	bl	e56b0 <__tzcalc_limits>
   e36a2:	2800      	cmp	r0, #0
   e36a4:	d1f4      	bne.n	e3690 <localtime_r+0x60>
   e36a6:	f04f 33ff 	mov.w	r3, #4294967295
   e36aa:	e00d      	b.n	e36c8 <localtime_r+0x98>
   e36ac:	4293      	cmp	r3, r2
   e36ae:	db08      	blt.n	e36c2 <localtime_r+0x92>
   e36b0:	e001      	b.n	e36b6 <localtime_r+0x86>
   e36b2:	4293      	cmp	r3, r2
   e36b4:	da07      	bge.n	e36c6 <localtime_r+0x96>
   e36b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e36b8:	4293      	cmp	r3, r2
   e36ba:	bfac      	ite	ge
   e36bc:	2300      	movge	r3, #0
   e36be:	2301      	movlt	r3, #1
   e36c0:	e002      	b.n	e36c8 <localtime_r+0x98>
   e36c2:	2300      	movs	r3, #0
   e36c4:	e000      	b.n	e36c8 <localtime_r+0x98>
   e36c6:	2301      	movs	r3, #1
   e36c8:	6223      	str	r3, [r4, #32]
   e36ca:	6a23      	ldr	r3, [r4, #32]
   e36cc:	2b01      	cmp	r3, #1
   e36ce:	bf0c      	ite	eq
   e36d0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e36d2:	6a39      	ldrne	r1, [r7, #32]
   e36d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e36d8:	203c      	movs	r0, #60	; 0x3c
   e36da:	fb91 f6f3 	sdiv	r6, r1, r3
   e36de:	fb03 1316 	mls	r3, r3, r6, r1
   e36e2:	6861      	ldr	r1, [r4, #4]
   e36e4:	fb93 f2f0 	sdiv	r2, r3, r0
   e36e8:	fb00 3012 	mls	r0, r0, r2, r3
   e36ec:	6823      	ldr	r3, [r4, #0]
   e36ee:	1a89      	subs	r1, r1, r2
   e36f0:	68a2      	ldr	r2, [r4, #8]
   e36f2:	6061      	str	r1, [r4, #4]
   e36f4:	1a1b      	subs	r3, r3, r0
   e36f6:	1b92      	subs	r2, r2, r6
   e36f8:	2b3b      	cmp	r3, #59	; 0x3b
   e36fa:	6023      	str	r3, [r4, #0]
   e36fc:	60a2      	str	r2, [r4, #8]
   e36fe:	dd03      	ble.n	e3708 <localtime_r+0xd8>
   e3700:	3101      	adds	r1, #1
   e3702:	6061      	str	r1, [r4, #4]
   e3704:	3b3c      	subs	r3, #60	; 0x3c
   e3706:	e004      	b.n	e3712 <localtime_r+0xe2>
   e3708:	2b00      	cmp	r3, #0
   e370a:	da03      	bge.n	e3714 <localtime_r+0xe4>
   e370c:	3901      	subs	r1, #1
   e370e:	6061      	str	r1, [r4, #4]
   e3710:	333c      	adds	r3, #60	; 0x3c
   e3712:	6023      	str	r3, [r4, #0]
   e3714:	6863      	ldr	r3, [r4, #4]
   e3716:	2b3b      	cmp	r3, #59	; 0x3b
   e3718:	dd03      	ble.n	e3722 <localtime_r+0xf2>
   e371a:	3201      	adds	r2, #1
   e371c:	60a2      	str	r2, [r4, #8]
   e371e:	3b3c      	subs	r3, #60	; 0x3c
   e3720:	e004      	b.n	e372c <localtime_r+0xfc>
   e3722:	2b00      	cmp	r3, #0
   e3724:	da03      	bge.n	e372e <localtime_r+0xfe>
   e3726:	3a01      	subs	r2, #1
   e3728:	60a2      	str	r2, [r4, #8]
   e372a:	333c      	adds	r3, #60	; 0x3c
   e372c:	6063      	str	r3, [r4, #4]
   e372e:	68a3      	ldr	r3, [r4, #8]
   e3730:	2b17      	cmp	r3, #23
   e3732:	dd22      	ble.n	e377a <localtime_r+0x14a>
   e3734:	69e2      	ldr	r2, [r4, #28]
   e3736:	3201      	adds	r2, #1
   e3738:	61e2      	str	r2, [r4, #28]
   e373a:	69a2      	ldr	r2, [r4, #24]
   e373c:	3201      	adds	r2, #1
   e373e:	2a06      	cmp	r2, #6
   e3740:	bfc8      	it	gt
   e3742:	2200      	movgt	r2, #0
   e3744:	61a2      	str	r2, [r4, #24]
   e3746:	68e2      	ldr	r2, [r4, #12]
   e3748:	3b18      	subs	r3, #24
   e374a:	3201      	adds	r2, #1
   e374c:	60a3      	str	r3, [r4, #8]
   e374e:	6923      	ldr	r3, [r4, #16]
   e3750:	60e2      	str	r2, [r4, #12]
   e3752:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e3756:	428a      	cmp	r2, r1
   e3758:	dd46      	ble.n	e37e8 <localtime_r+0x1b8>
   e375a:	3301      	adds	r3, #1
   e375c:	2b0c      	cmp	r3, #12
   e375e:	bf0c      	ite	eq
   e3760:	6963      	ldreq	r3, [r4, #20]
   e3762:	6123      	strne	r3, [r4, #16]
   e3764:	eba2 0201 	sub.w	r2, r2, r1
   e3768:	60e2      	str	r2, [r4, #12]
   e376a:	bf01      	itttt	eq
   e376c:	3301      	addeq	r3, #1
   e376e:	2200      	moveq	r2, #0
   e3770:	6122      	streq	r2, [r4, #16]
   e3772:	6163      	streq	r3, [r4, #20]
   e3774:	bf08      	it	eq
   e3776:	61e2      	streq	r2, [r4, #28]
   e3778:	e036      	b.n	e37e8 <localtime_r+0x1b8>
   e377a:	2b00      	cmp	r3, #0
   e377c:	da34      	bge.n	e37e8 <localtime_r+0x1b8>
   e377e:	69e2      	ldr	r2, [r4, #28]
   e3780:	3a01      	subs	r2, #1
   e3782:	61e2      	str	r2, [r4, #28]
   e3784:	69a2      	ldr	r2, [r4, #24]
   e3786:	3a01      	subs	r2, #1
   e3788:	bf48      	it	mi
   e378a:	2206      	movmi	r2, #6
   e378c:	61a2      	str	r2, [r4, #24]
   e378e:	68e2      	ldr	r2, [r4, #12]
   e3790:	3318      	adds	r3, #24
   e3792:	3a01      	subs	r2, #1
   e3794:	60e2      	str	r2, [r4, #12]
   e3796:	60a3      	str	r3, [r4, #8]
   e3798:	bb32      	cbnz	r2, e37e8 <localtime_r+0x1b8>
   e379a:	6923      	ldr	r3, [r4, #16]
   e379c:	3b01      	subs	r3, #1
   e379e:	d401      	bmi.n	e37a4 <localtime_r+0x174>
   e37a0:	6123      	str	r3, [r4, #16]
   e37a2:	e01d      	b.n	e37e0 <localtime_r+0x1b0>
   e37a4:	230b      	movs	r3, #11
   e37a6:	6123      	str	r3, [r4, #16]
   e37a8:	6963      	ldr	r3, [r4, #20]
   e37aa:	1e5a      	subs	r2, r3, #1
   e37ac:	f012 0f03 	tst.w	r2, #3
   e37b0:	6162      	str	r2, [r4, #20]
   e37b2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e37b6:	d105      	bne.n	e37c4 <localtime_r+0x194>
   e37b8:	2164      	movs	r1, #100	; 0x64
   e37ba:	fb93 f2f1 	sdiv	r2, r3, r1
   e37be:	fb01 3212 	mls	r2, r1, r2, r3
   e37c2:	b94a      	cbnz	r2, e37d8 <localtime_r+0x1a8>
   e37c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e37c8:	fb93 f2f1 	sdiv	r2, r3, r1
   e37cc:	fb01 3312 	mls	r3, r1, r2, r3
   e37d0:	fab3 f383 	clz	r3, r3
   e37d4:	095b      	lsrs	r3, r3, #5
   e37d6:	e000      	b.n	e37da <localtime_r+0x1aa>
   e37d8:	2301      	movs	r3, #1
   e37da:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e37de:	61e3      	str	r3, [r4, #28]
   e37e0:	6923      	ldr	r3, [r4, #16]
   e37e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e37e6:	60e3      	str	r3, [r4, #12]
   e37e8:	f002 f80b 	bl	e5802 <__tz_unlock>
   e37ec:	4620      	mov	r0, r4
   e37ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e37f2:	bf00      	nop
   e37f4:	000e877c 	.word	0x000e877c
   e37f8:	2003e7e4 	.word	0x2003e7e4

000e37fc <_localeconv_r>:
   e37fc:	4800      	ldr	r0, [pc, #0]	; (e3800 <_localeconv_r+0x4>)
   e37fe:	4770      	bx	lr
   e3800:	2003d62c 	.word	0x2003d62c

000e3804 <memcpy>:
   e3804:	b510      	push	{r4, lr}
   e3806:	1e43      	subs	r3, r0, #1
   e3808:	440a      	add	r2, r1
   e380a:	4291      	cmp	r1, r2
   e380c:	d004      	beq.n	e3818 <memcpy+0x14>
   e380e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3812:	f803 4f01 	strb.w	r4, [r3, #1]!
   e3816:	e7f8      	b.n	e380a <memcpy+0x6>
   e3818:	bd10      	pop	{r4, pc}

000e381a <memset>:
   e381a:	4402      	add	r2, r0
   e381c:	4603      	mov	r3, r0
   e381e:	4293      	cmp	r3, r2
   e3820:	d002      	beq.n	e3828 <memset+0xe>
   e3822:	f803 1b01 	strb.w	r1, [r3], #1
   e3826:	e7fa      	b.n	e381e <memset+0x4>
   e3828:	4770      	bx	lr
	...

000e382c <validate_structure>:
   e382c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e382e:	6801      	ldr	r1, [r0, #0]
   e3830:	293b      	cmp	r1, #59	; 0x3b
   e3832:	4604      	mov	r4, r0
   e3834:	d911      	bls.n	e385a <validate_structure+0x2e>
   e3836:	223c      	movs	r2, #60	; 0x3c
   e3838:	4668      	mov	r0, sp
   e383a:	f002 f96d 	bl	e5b18 <div>
   e383e:	9a01      	ldr	r2, [sp, #4]
   e3840:	6863      	ldr	r3, [r4, #4]
   e3842:	9900      	ldr	r1, [sp, #0]
   e3844:	2a00      	cmp	r2, #0
   e3846:	440b      	add	r3, r1
   e3848:	6063      	str	r3, [r4, #4]
   e384a:	bfbb      	ittet	lt
   e384c:	323c      	addlt	r2, #60	; 0x3c
   e384e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e3852:	6022      	strge	r2, [r4, #0]
   e3854:	6022      	strlt	r2, [r4, #0]
   e3856:	bfb8      	it	lt
   e3858:	6063      	strlt	r3, [r4, #4]
   e385a:	6861      	ldr	r1, [r4, #4]
   e385c:	293b      	cmp	r1, #59	; 0x3b
   e385e:	d911      	bls.n	e3884 <validate_structure+0x58>
   e3860:	223c      	movs	r2, #60	; 0x3c
   e3862:	4668      	mov	r0, sp
   e3864:	f002 f958 	bl	e5b18 <div>
   e3868:	9a01      	ldr	r2, [sp, #4]
   e386a:	68a1      	ldr	r1, [r4, #8]
   e386c:	9b00      	ldr	r3, [sp, #0]
   e386e:	2a00      	cmp	r2, #0
   e3870:	440b      	add	r3, r1
   e3872:	60a3      	str	r3, [r4, #8]
   e3874:	bfbb      	ittet	lt
   e3876:	323c      	addlt	r2, #60	; 0x3c
   e3878:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e387c:	6062      	strge	r2, [r4, #4]
   e387e:	6062      	strlt	r2, [r4, #4]
   e3880:	bfb8      	it	lt
   e3882:	60a3      	strlt	r3, [r4, #8]
   e3884:	68a1      	ldr	r1, [r4, #8]
   e3886:	2917      	cmp	r1, #23
   e3888:	d911      	bls.n	e38ae <validate_structure+0x82>
   e388a:	2218      	movs	r2, #24
   e388c:	4668      	mov	r0, sp
   e388e:	f002 f943 	bl	e5b18 <div>
   e3892:	9a01      	ldr	r2, [sp, #4]
   e3894:	68e1      	ldr	r1, [r4, #12]
   e3896:	9b00      	ldr	r3, [sp, #0]
   e3898:	2a00      	cmp	r2, #0
   e389a:	440b      	add	r3, r1
   e389c:	60e3      	str	r3, [r4, #12]
   e389e:	bfbb      	ittet	lt
   e38a0:	3218      	addlt	r2, #24
   e38a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e38a6:	60a2      	strge	r2, [r4, #8]
   e38a8:	60a2      	strlt	r2, [r4, #8]
   e38aa:	bfb8      	it	lt
   e38ac:	60e3      	strlt	r3, [r4, #12]
   e38ae:	6921      	ldr	r1, [r4, #16]
   e38b0:	290b      	cmp	r1, #11
   e38b2:	d911      	bls.n	e38d8 <validate_structure+0xac>
   e38b4:	220c      	movs	r2, #12
   e38b6:	4668      	mov	r0, sp
   e38b8:	f002 f92e 	bl	e5b18 <div>
   e38bc:	9a01      	ldr	r2, [sp, #4]
   e38be:	6961      	ldr	r1, [r4, #20]
   e38c0:	9b00      	ldr	r3, [sp, #0]
   e38c2:	2a00      	cmp	r2, #0
   e38c4:	440b      	add	r3, r1
   e38c6:	6163      	str	r3, [r4, #20]
   e38c8:	bfbb      	ittet	lt
   e38ca:	320c      	addlt	r2, #12
   e38cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e38d0:	6122      	strge	r2, [r4, #16]
   e38d2:	6122      	strlt	r2, [r4, #16]
   e38d4:	bfb8      	it	lt
   e38d6:	6163      	strlt	r3, [r4, #20]
   e38d8:	6963      	ldr	r3, [r4, #20]
   e38da:	0799      	lsls	r1, r3, #30
   e38dc:	d112      	bne.n	e3904 <validate_structure+0xd8>
   e38de:	2164      	movs	r1, #100	; 0x64
   e38e0:	fb93 f2f1 	sdiv	r2, r3, r1
   e38e4:	fb01 3212 	mls	r2, r1, r2, r3
   e38e8:	b972      	cbnz	r2, e3908 <validate_structure+0xdc>
   e38ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e38ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e38f2:	fb93 f2f1 	sdiv	r2, r3, r1
   e38f6:	fb01 3312 	mls	r3, r1, r2, r3
   e38fa:	2b00      	cmp	r3, #0
   e38fc:	bf14      	ite	ne
   e38fe:	231c      	movne	r3, #28
   e3900:	231d      	moveq	r3, #29
   e3902:	e002      	b.n	e390a <validate_structure+0xde>
   e3904:	231c      	movs	r3, #28
   e3906:	e000      	b.n	e390a <validate_structure+0xde>
   e3908:	231d      	movs	r3, #29
   e390a:	68e2      	ldr	r2, [r4, #12]
   e390c:	2a00      	cmp	r2, #0
   e390e:	dd06      	ble.n	e391e <validate_structure+0xf2>
   e3910:	4f33      	ldr	r7, [pc, #204]	; (e39e0 <validate_structure+0x1b4>)
   e3912:	f04f 0e00 	mov.w	lr, #0
   e3916:	2564      	movs	r5, #100	; 0x64
   e3918:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e391c:	e039      	b.n	e3992 <validate_structure+0x166>
   e391e:	4f30      	ldr	r7, [pc, #192]	; (e39e0 <validate_structure+0x1b4>)
   e3920:	260b      	movs	r6, #11
   e3922:	2064      	movs	r0, #100	; 0x64
   e3924:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3928:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e392c:	f1be 0f00 	cmp.w	lr, #0
   e3930:	dc53      	bgt.n	e39da <validate_structure+0x1ae>
   e3932:	6921      	ldr	r1, [r4, #16]
   e3934:	3901      	subs	r1, #1
   e3936:	6121      	str	r1, [r4, #16]
   e3938:	3101      	adds	r1, #1
   e393a:	d118      	bne.n	e396e <validate_structure+0x142>
   e393c:	6963      	ldr	r3, [r4, #20]
   e393e:	6126      	str	r6, [r4, #16]
   e3940:	1e59      	subs	r1, r3, #1
   e3942:	078a      	lsls	r2, r1, #30
   e3944:	6161      	str	r1, [r4, #20]
   e3946:	d10f      	bne.n	e3968 <validate_structure+0x13c>
   e3948:	fb91 f2f0 	sdiv	r2, r1, r0
   e394c:	fb00 1112 	mls	r1, r0, r2, r1
   e3950:	b961      	cbnz	r1, e396c <validate_structure+0x140>
   e3952:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e3956:	fb93 f2f5 	sdiv	r2, r3, r5
   e395a:	fb05 3312 	mls	r3, r5, r2, r3
   e395e:	2b00      	cmp	r3, #0
   e3960:	bf14      	ite	ne
   e3962:	231c      	movne	r3, #28
   e3964:	231d      	moveq	r3, #29
   e3966:	e002      	b.n	e396e <validate_structure+0x142>
   e3968:	231c      	movs	r3, #28
   e396a:	e000      	b.n	e396e <validate_structure+0x142>
   e396c:	231d      	movs	r3, #29
   e396e:	6922      	ldr	r2, [r4, #16]
   e3970:	2a01      	cmp	r2, #1
   e3972:	bf14      	ite	ne
   e3974:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e3978:	461a      	moveq	r2, r3
   e397a:	4472      	add	r2, lr
   e397c:	60e2      	str	r2, [r4, #12]
   e397e:	e7d3      	b.n	e3928 <validate_structure+0xfc>
   e3980:	428b      	cmp	r3, r1
   e3982:	da2a      	bge.n	e39da <validate_structure+0x1ae>
   e3984:	4618      	mov	r0, r3
   e3986:	3201      	adds	r2, #1
   e3988:	1a09      	subs	r1, r1, r0
   e398a:	2a0c      	cmp	r2, #12
   e398c:	60e1      	str	r1, [r4, #12]
   e398e:	6122      	str	r2, [r4, #16]
   e3990:	d008      	beq.n	e39a4 <validate_structure+0x178>
   e3992:	6922      	ldr	r2, [r4, #16]
   e3994:	68e1      	ldr	r1, [r4, #12]
   e3996:	2a01      	cmp	r2, #1
   e3998:	d0f2      	beq.n	e3980 <validate_structure+0x154>
   e399a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e399e:	4281      	cmp	r1, r0
   e39a0:	dcf1      	bgt.n	e3986 <validate_structure+0x15a>
   e39a2:	e01a      	b.n	e39da <validate_structure+0x1ae>
   e39a4:	6963      	ldr	r3, [r4, #20]
   e39a6:	f8c4 e010 	str.w	lr, [r4, #16]
   e39aa:	1c5a      	adds	r2, r3, #1
   e39ac:	0791      	lsls	r1, r2, #30
   e39ae:	6162      	str	r2, [r4, #20]
   e39b0:	d10f      	bne.n	e39d2 <validate_structure+0x1a6>
   e39b2:	fb92 f1f5 	sdiv	r1, r2, r5
   e39b6:	fb05 2211 	mls	r2, r5, r1, r2
   e39ba:	b962      	cbnz	r2, e39d6 <validate_structure+0x1aa>
   e39bc:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e39c0:	fb93 f2f6 	sdiv	r2, r3, r6
   e39c4:	fb06 3312 	mls	r3, r6, r2, r3
   e39c8:	2b00      	cmp	r3, #0
   e39ca:	bf14      	ite	ne
   e39cc:	231c      	movne	r3, #28
   e39ce:	231d      	moveq	r3, #29
   e39d0:	e7df      	b.n	e3992 <validate_structure+0x166>
   e39d2:	231c      	movs	r3, #28
   e39d4:	e7dd      	b.n	e3992 <validate_structure+0x166>
   e39d6:	231d      	movs	r3, #29
   e39d8:	e7db      	b.n	e3992 <validate_structure+0x166>
   e39da:	b003      	add	sp, #12
   e39dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e39de:	bf00      	nop
   e39e0:	000e874c 	.word	0x000e874c

000e39e4 <mktime>:
   e39e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e39e8:	4605      	mov	r5, r0
   e39ea:	f002 fc0b 	bl	e6204 <__gettzinfo>
   e39ee:	4681      	mov	r9, r0
   e39f0:	4628      	mov	r0, r5
   e39f2:	f7ff ff1b 	bl	e382c <validate_structure>
   e39f6:	e895 000c 	ldmia.w	r5, {r2, r3}
   e39fa:	213c      	movs	r1, #60	; 0x3c
   e39fc:	fb01 2303 	mla	r3, r1, r3, r2
   e3a00:	68aa      	ldr	r2, [r5, #8]
   e3a02:	68ec      	ldr	r4, [r5, #12]
   e3a04:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e3a08:	fb08 3102 	mla	r1, r8, r2, r3
   e3a0c:	692b      	ldr	r3, [r5, #16]
   e3a0e:	4aab      	ldr	r2, [pc, #684]	; (e3cbc <mktime+0x2d8>)
   e3a10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e3a14:	3c01      	subs	r4, #1
   e3a16:	2b01      	cmp	r3, #1
   e3a18:	4414      	add	r4, r2
   e3a1a:	696b      	ldr	r3, [r5, #20]
   e3a1c:	dd11      	ble.n	e3a42 <mktime+0x5e>
   e3a1e:	079e      	lsls	r6, r3, #30
   e3a20:	d10f      	bne.n	e3a42 <mktime+0x5e>
   e3a22:	2064      	movs	r0, #100	; 0x64
   e3a24:	fb93 f2f0 	sdiv	r2, r3, r0
   e3a28:	fb00 3212 	mls	r2, r0, r2, r3
   e3a2c:	b942      	cbnz	r2, e3a40 <mktime+0x5c>
   e3a2e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e3a32:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3a36:	fb96 f0f2 	sdiv	r0, r6, r2
   e3a3a:	fb02 6210 	mls	r2, r2, r0, r6
   e3a3e:	b902      	cbnz	r2, e3a42 <mktime+0x5e>
   e3a40:	3401      	adds	r4, #1
   e3a42:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e3a46:	3210      	adds	r2, #16
   e3a48:	f644 6020 	movw	r0, #20000	; 0x4e20
   e3a4c:	4282      	cmp	r2, r0
   e3a4e:	61ec      	str	r4, [r5, #28]
   e3a50:	461f      	mov	r7, r3
   e3a52:	f200 812e 	bhi.w	e3cb2 <mktime+0x2ce>
   e3a56:	2b46      	cmp	r3, #70	; 0x46
   e3a58:	dd22      	ble.n	e3aa0 <mktime+0xbc>
   e3a5a:	2246      	movs	r2, #70	; 0x46
   e3a5c:	f240 1c6d 	movw	ip, #365	; 0x16d
   e3a60:	2664      	movs	r6, #100	; 0x64
   e3a62:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e3a66:	0790      	lsls	r0, r2, #30
   e3a68:	d110      	bne.n	e3a8c <mktime+0xa8>
   e3a6a:	fb92 f0f6 	sdiv	r0, r2, r6
   e3a6e:	fb06 2010 	mls	r0, r6, r0, r2
   e3a72:	b970      	cbnz	r0, e3a92 <mktime+0xae>
   e3a74:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e3a78:	fb98 f0fe 	sdiv	r0, r8, lr
   e3a7c:	fb0e 8010 	mls	r0, lr, r0, r8
   e3a80:	2800      	cmp	r0, #0
   e3a82:	bf14      	ite	ne
   e3a84:	4660      	movne	r0, ip
   e3a86:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e3a8a:	e004      	b.n	e3a96 <mktime+0xb2>
   e3a8c:	f240 106d 	movw	r0, #365	; 0x16d
   e3a90:	e001      	b.n	e3a96 <mktime+0xb2>
   e3a92:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e3a96:	3201      	adds	r2, #1
   e3a98:	4293      	cmp	r3, r2
   e3a9a:	4404      	add	r4, r0
   e3a9c:	d1e3      	bne.n	e3a66 <mktime+0x82>
   e3a9e:	e044      	b.n	e3b2a <mktime+0x146>
   e3aa0:	d043      	beq.n	e3b2a <mktime+0x146>
   e3aa2:	2245      	movs	r2, #69	; 0x45
   e3aa4:	f240 1e6d 	movw	lr, #365	; 0x16d
   e3aa8:	2664      	movs	r6, #100	; 0x64
   e3aaa:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e3aae:	429a      	cmp	r2, r3
   e3ab0:	dd1a      	ble.n	e3ae8 <mktime+0x104>
   e3ab2:	0790      	lsls	r0, r2, #30
   e3ab4:	d110      	bne.n	e3ad8 <mktime+0xf4>
   e3ab6:	fb92 f0f6 	sdiv	r0, r2, r6
   e3aba:	fb06 2010 	mls	r0, r6, r0, r2
   e3abe:	b970      	cbnz	r0, e3ade <mktime+0xfa>
   e3ac0:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e3ac4:	fb9c f0f7 	sdiv	r0, ip, r7
   e3ac8:	fb07 c010 	mls	r0, r7, r0, ip
   e3acc:	2800      	cmp	r0, #0
   e3ace:	bf14      	ite	ne
   e3ad0:	4670      	movne	r0, lr
   e3ad2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e3ad6:	e004      	b.n	e3ae2 <mktime+0xfe>
   e3ad8:	f240 106d 	movw	r0, #365	; 0x16d
   e3adc:	e001      	b.n	e3ae2 <mktime+0xfe>
   e3ade:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e3ae2:	1a24      	subs	r4, r4, r0
   e3ae4:	3a01      	subs	r2, #1
   e3ae6:	e7e2      	b.n	e3aae <mktime+0xca>
   e3ae8:	2b45      	cmp	r3, #69	; 0x45
   e3aea:	bfa8      	it	ge
   e3aec:	2345      	movge	r3, #69	; 0x45
   e3aee:	079e      	lsls	r6, r3, #30
   e3af0:	461f      	mov	r7, r3
   e3af2:	d114      	bne.n	e3b1e <mktime+0x13a>
   e3af4:	2264      	movs	r2, #100	; 0x64
   e3af6:	fb93 f3f2 	sdiv	r3, r3, r2
   e3afa:	fb02 7313 	mls	r3, r2, r3, r7
   e3afe:	b98b      	cbnz	r3, e3b24 <mktime+0x140>
   e3b00:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e3b04:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e3b08:	fb90 f2f3 	sdiv	r2, r0, r3
   e3b0c:	fb03 0312 	mls	r3, r3, r2, r0
   e3b10:	2b00      	cmp	r3, #0
   e3b12:	f240 136d 	movw	r3, #365	; 0x16d
   e3b16:	bf08      	it	eq
   e3b18:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e3b1c:	e004      	b.n	e3b28 <mktime+0x144>
   e3b1e:	f240 136d 	movw	r3, #365	; 0x16d
   e3b22:	e001      	b.n	e3b28 <mktime+0x144>
   e3b24:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e3b28:	1ae4      	subs	r4, r4, r3
   e3b2a:	4865      	ldr	r0, [pc, #404]	; (e3cc0 <mktime+0x2dc>)
   e3b2c:	fb00 1804 	mla	r8, r0, r4, r1
   e3b30:	f001 fe66 	bl	e5800 <__tz_lock>
   e3b34:	f001 fe66 	bl	e5804 <_tzset_unlocked>
   e3b38:	4b62      	ldr	r3, [pc, #392]	; (e3cc4 <mktime+0x2e0>)
   e3b3a:	681e      	ldr	r6, [r3, #0]
   e3b3c:	2e00      	cmp	r6, #0
   e3b3e:	f000 80a4 	beq.w	e3c8a <mktime+0x2a6>
   e3b42:	6a2b      	ldr	r3, [r5, #32]
   e3b44:	6968      	ldr	r0, [r5, #20]
   e3b46:	2b01      	cmp	r3, #1
   e3b48:	bfa8      	it	ge
   e3b4a:	2301      	movge	r3, #1
   e3b4c:	469a      	mov	sl, r3
   e3b4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e3b52:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3b56:	4298      	cmp	r0, r3
   e3b58:	d10d      	bne.n	e3b76 <mktime+0x192>
   e3b5a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e3b5e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e3b62:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e3b66:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e3b6a:	1ad6      	subs	r6, r2, r3
   e3b6c:	45b0      	cmp	r8, r6
   e3b6e:	eba1 0100 	sub.w	r1, r1, r0
   e3b72:	da05      	bge.n	e3b80 <mktime+0x19c>
   e3b74:	e007      	b.n	e3b86 <mktime+0x1a2>
   e3b76:	f001 fd9b 	bl	e56b0 <__tzcalc_limits>
   e3b7a:	2800      	cmp	r0, #0
   e3b7c:	d1ed      	bne.n	e3b5a <mktime+0x176>
   e3b7e:	e076      	b.n	e3c6e <mktime+0x28a>
   e3b80:	1a12      	subs	r2, r2, r0
   e3b82:	4590      	cmp	r8, r2
   e3b84:	db73      	blt.n	e3c6e <mktime+0x28a>
   e3b86:	f8d9 2000 	ldr.w	r2, [r9]
   e3b8a:	b112      	cbz	r2, e3b92 <mktime+0x1ae>
   e3b8c:	4588      	cmp	r8, r1
   e3b8e:	db77      	blt.n	e3c80 <mktime+0x29c>
   e3b90:	e001      	b.n	e3b96 <mktime+0x1b2>
   e3b92:	4588      	cmp	r8, r1
   e3b94:	da07      	bge.n	e3ba6 <mktime+0x1c2>
   e3b96:	45b0      	cmp	r8, r6
   e3b98:	bfac      	ite	ge
   e3b9a:	2600      	movge	r6, #0
   e3b9c:	2601      	movlt	r6, #1
   e3b9e:	f1ba 0f00 	cmp.w	sl, #0
   e3ba2:	da04      	bge.n	e3bae <mktime+0x1ca>
   e3ba4:	e064      	b.n	e3c70 <mktime+0x28c>
   e3ba6:	f1ba 0f00 	cmp.w	sl, #0
   e3baa:	db63      	blt.n	e3c74 <mktime+0x290>
   e3bac:	2601      	movs	r6, #1
   e3bae:	ea8a 0a06 	eor.w	sl, sl, r6
   e3bb2:	f1ba 0f01 	cmp.w	sl, #1
   e3bb6:	d15b      	bne.n	e3c70 <mktime+0x28c>
   e3bb8:	1a1b      	subs	r3, r3, r0
   e3bba:	b906      	cbnz	r6, e3bbe <mktime+0x1da>
   e3bbc:	425b      	negs	r3, r3
   e3bbe:	682a      	ldr	r2, [r5, #0]
   e3bc0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e3bc4:	441a      	add	r2, r3
   e3bc6:	602a      	str	r2, [r5, #0]
   e3bc8:	4628      	mov	r0, r5
   e3bca:	4498      	add	r8, r3
   e3bcc:	f7ff fe2e 	bl	e382c <validate_structure>
   e3bd0:	68eb      	ldr	r3, [r5, #12]
   e3bd2:	ebb3 030a 	subs.w	r3, r3, sl
   e3bd6:	d04b      	beq.n	e3c70 <mktime+0x28c>
   e3bd8:	2b01      	cmp	r3, #1
   e3bda:	dc03      	bgt.n	e3be4 <mktime+0x200>
   e3bdc:	1c98      	adds	r0, r3, #2
   e3bde:	bfd8      	it	le
   e3be0:	2301      	movle	r3, #1
   e3be2:	e001      	b.n	e3be8 <mktime+0x204>
   e3be4:	f04f 33ff 	mov.w	r3, #4294967295
   e3be8:	69ea      	ldr	r2, [r5, #28]
   e3bea:	441c      	add	r4, r3
   e3bec:	189b      	adds	r3, r3, r2
   e3bee:	d51d      	bpl.n	e3c2c <mktime+0x248>
   e3bf0:	1e7b      	subs	r3, r7, #1
   e3bf2:	0799      	lsls	r1, r3, #30
   e3bf4:	d114      	bne.n	e3c20 <mktime+0x23c>
   e3bf6:	2164      	movs	r1, #100	; 0x64
   e3bf8:	fb93 f2f1 	sdiv	r2, r3, r1
   e3bfc:	fb01 3312 	mls	r3, r1, r2, r3
   e3c00:	b98b      	cbnz	r3, e3c26 <mktime+0x242>
   e3c02:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e3c06:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3c0a:	fb97 f3f2 	sdiv	r3, r7, r2
   e3c0e:	fb02 7713 	mls	r7, r2, r3, r7
   e3c12:	2f00      	cmp	r7, #0
   e3c14:	f240 136d 	movw	r3, #365	; 0x16d
   e3c18:	bf18      	it	ne
   e3c1a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e3c1e:	e024      	b.n	e3c6a <mktime+0x286>
   e3c20:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e3c24:	e021      	b.n	e3c6a <mktime+0x286>
   e3c26:	f240 136d 	movw	r3, #365	; 0x16d
   e3c2a:	e01e      	b.n	e3c6a <mktime+0x286>
   e3c2c:	07ba      	lsls	r2, r7, #30
   e3c2e:	d114      	bne.n	e3c5a <mktime+0x276>
   e3c30:	2164      	movs	r1, #100	; 0x64
   e3c32:	fb97 f2f1 	sdiv	r2, r7, r1
   e3c36:	fb01 7212 	mls	r2, r1, r2, r7
   e3c3a:	b98a      	cbnz	r2, e3c60 <mktime+0x27c>
   e3c3c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e3c40:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3c44:	fb97 f2f1 	sdiv	r2, r7, r1
   e3c48:	fb01 7712 	mls	r7, r1, r2, r7
   e3c4c:	2f00      	cmp	r7, #0
   e3c4e:	f240 126d 	movw	r2, #365	; 0x16d
   e3c52:	bf08      	it	eq
   e3c54:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e3c58:	e004      	b.n	e3c64 <mktime+0x280>
   e3c5a:	f240 126d 	movw	r2, #365	; 0x16d
   e3c5e:	e001      	b.n	e3c64 <mktime+0x280>
   e3c60:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e3c64:	429a      	cmp	r2, r3
   e3c66:	bfd8      	it	le
   e3c68:	1a9b      	suble	r3, r3, r2
   e3c6a:	61eb      	str	r3, [r5, #28]
   e3c6c:	e000      	b.n	e3c70 <mktime+0x28c>
   e3c6e:	4656      	mov	r6, sl
   e3c70:	2e01      	cmp	r6, #1
   e3c72:	d10a      	bne.n	e3c8a <mktime+0x2a6>
   e3c74:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e3c78:	2601      	movs	r6, #1
   e3c7a:	eb08 0700 	add.w	r7, r8, r0
   e3c7e:	e008      	b.n	e3c92 <mktime+0x2ae>
   e3c80:	f1ba 0f00 	cmp.w	sl, #0
   e3c84:	f04f 0600 	mov.w	r6, #0
   e3c88:	da91      	bge.n	e3bae <mktime+0x1ca>
   e3c8a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e3c8e:	eb08 0700 	add.w	r7, r8, r0
   e3c92:	f001 fdb6 	bl	e5802 <__tz_unlock>
   e3c96:	3404      	adds	r4, #4
   e3c98:	2307      	movs	r3, #7
   e3c9a:	fb94 f3f3 	sdiv	r3, r4, r3
   e3c9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3ca2:	1ae4      	subs	r4, r4, r3
   e3ca4:	bf48      	it	mi
   e3ca6:	3407      	addmi	r4, #7
   e3ca8:	622e      	str	r6, [r5, #32]
   e3caa:	61ac      	str	r4, [r5, #24]
   e3cac:	4638      	mov	r0, r7
   e3cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3cb2:	f04f 30ff 	mov.w	r0, #4294967295
   e3cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3cba:	bf00      	nop
   e3cbc:	000e871c 	.word	0x000e871c
   e3cc0:	00015180 	.word	0x00015180
   e3cc4:	2003e7e4 	.word	0x2003e7e4

000e3cc8 <srand>:
   e3cc8:	b538      	push	{r3, r4, r5, lr}
   e3cca:	4b12      	ldr	r3, [pc, #72]	; (e3d14 <srand+0x4c>)
   e3ccc:	681c      	ldr	r4, [r3, #0]
   e3cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3cd0:	4605      	mov	r5, r0
   e3cd2:	b9d3      	cbnz	r3, e3d0a <srand+0x42>
   e3cd4:	2018      	movs	r0, #24
   e3cd6:	f7f6 ff81 	bl	dabdc <malloc>
   e3cda:	f243 330e 	movw	r3, #13070	; 0x330e
   e3cde:	63a0      	str	r0, [r4, #56]	; 0x38
   e3ce0:	8003      	strh	r3, [r0, #0]
   e3ce2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e3ce6:	8043      	strh	r3, [r0, #2]
   e3ce8:	f241 2334 	movw	r3, #4660	; 0x1234
   e3cec:	8083      	strh	r3, [r0, #4]
   e3cee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e3cf2:	80c3      	strh	r3, [r0, #6]
   e3cf4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e3cf8:	8103      	strh	r3, [r0, #8]
   e3cfa:	2305      	movs	r3, #5
   e3cfc:	8143      	strh	r3, [r0, #10]
   e3cfe:	230b      	movs	r3, #11
   e3d00:	8183      	strh	r3, [r0, #12]
   e3d02:	2201      	movs	r2, #1
   e3d04:	2300      	movs	r3, #0
   e3d06:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e3d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3d0c:	2200      	movs	r2, #0
   e3d0e:	611d      	str	r5, [r3, #16]
   e3d10:	615a      	str	r2, [r3, #20]
   e3d12:	bd38      	pop	{r3, r4, r5, pc}
   e3d14:	2003d628 	.word	0x2003d628

000e3d18 <strcmp>:
   e3d18:	f810 2b01 	ldrb.w	r2, [r0], #1
   e3d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
   e3d20:	2a01      	cmp	r2, #1
   e3d22:	bf28      	it	cs
   e3d24:	429a      	cmpcs	r2, r3
   e3d26:	d0f7      	beq.n	e3d18 <strcmp>
   e3d28:	1ad0      	subs	r0, r2, r3
   e3d2a:	4770      	bx	lr

000e3d2c <strcpy>:
   e3d2c:	4603      	mov	r3, r0
   e3d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e3d32:	f803 2b01 	strb.w	r2, [r3], #1
   e3d36:	2a00      	cmp	r2, #0
   e3d38:	d1f9      	bne.n	e3d2e <strcpy+0x2>
   e3d3a:	4770      	bx	lr

000e3d3c <strdup>:
   e3d3c:	4b02      	ldr	r3, [pc, #8]	; (e3d48 <strdup+0xc>)
   e3d3e:	4601      	mov	r1, r0
   e3d40:	6818      	ldr	r0, [r3, #0]
   e3d42:	f000 b803 	b.w	e3d4c <_strdup_r>
   e3d46:	bf00      	nop
   e3d48:	2003d628 	.word	0x2003d628

000e3d4c <_strdup_r>:
   e3d4c:	b570      	push	{r4, r5, r6, lr}
   e3d4e:	4606      	mov	r6, r0
   e3d50:	4608      	mov	r0, r1
   e3d52:	460c      	mov	r4, r1
   e3d54:	f000 fd22 	bl	e479c <strlen>
   e3d58:	1c45      	adds	r5, r0, #1
   e3d5a:	4629      	mov	r1, r5
   e3d5c:	4630      	mov	r0, r6
   e3d5e:	f7f6 ff85 	bl	dac6c <_malloc_r>
   e3d62:	4606      	mov	r6, r0
   e3d64:	b118      	cbz	r0, e3d6e <_strdup_r+0x22>
   e3d66:	462a      	mov	r2, r5
   e3d68:	4621      	mov	r1, r4
   e3d6a:	f7ff fd4b 	bl	e3804 <memcpy>
   e3d6e:	4630      	mov	r0, r6
   e3d70:	bd70      	pop	{r4, r5, r6, pc}

000e3d72 <iso_year_adjust>:
   e3d72:	6941      	ldr	r1, [r0, #20]
   e3d74:	078b      	lsls	r3, r1, #30
   e3d76:	b510      	push	{r4, lr}
   e3d78:	d10c      	bne.n	e3d94 <iso_year_adjust+0x22>
   e3d7a:	2900      	cmp	r1, #0
   e3d7c:	f240 736c 	movw	r3, #1900	; 0x76c
   e3d80:	bfa8      	it	ge
   e3d82:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3d86:	440b      	add	r3, r1
   e3d88:	2464      	movs	r4, #100	; 0x64
   e3d8a:	fb93 f2f4 	sdiv	r2, r3, r4
   e3d8e:	fb04 3312 	mls	r3, r4, r2, r3
   e3d92:	b983      	cbnz	r3, e3db6 <iso_year_adjust+0x44>
   e3d94:	2900      	cmp	r1, #0
   e3d96:	f240 736c 	movw	r3, #1900	; 0x76c
   e3d9a:	bfa8      	it	ge
   e3d9c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3da0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3da4:	440b      	add	r3, r1
   e3da6:	fb93 f1f2 	sdiv	r1, r3, r2
   e3daa:	fb02 3311 	mls	r3, r2, r1, r3
   e3dae:	fab3 f283 	clz	r2, r3
   e3db2:	0952      	lsrs	r2, r2, #5
   e3db4:	e000      	b.n	e3db8 <iso_year_adjust+0x46>
   e3db6:	2201      	movs	r2, #1
   e3db8:	6983      	ldr	r3, [r0, #24]
   e3dba:	69c1      	ldr	r1, [r0, #28]
   e3dbc:	005b      	lsls	r3, r3, #1
   e3dbe:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e3dc2:	4413      	add	r3, r2
   e3dc4:	2b21      	cmp	r3, #33	; 0x21
   e3dc6:	dc0e      	bgt.n	e3de6 <iso_year_adjust+0x74>
   e3dc8:	2b20      	cmp	r3, #32
   e3dca:	da2f      	bge.n	e3e2c <iso_year_adjust+0xba>
   e3dcc:	2b0d      	cmp	r3, #13
   e3dce:	dc02      	bgt.n	e3dd6 <iso_year_adjust+0x64>
   e3dd0:	2b0a      	cmp	r3, #10
   e3dd2:	db05      	blt.n	e3de0 <iso_year_adjust+0x6e>
   e3dd4:	e02a      	b.n	e3e2c <iso_year_adjust+0xba>
   e3dd6:	2b10      	cmp	r3, #16
   e3dd8:	db26      	blt.n	e3e28 <iso_year_adjust+0xb6>
   e3dda:	2b11      	cmp	r3, #17
   e3ddc:	dd26      	ble.n	e3e2c <iso_year_adjust+0xba>
   e3dde:	3b1c      	subs	r3, #28
   e3de0:	2b01      	cmp	r3, #1
   e3de2:	d923      	bls.n	e3e2c <iso_year_adjust+0xba>
   e3de4:	e020      	b.n	e3e28 <iso_year_adjust+0xb6>
   e3de6:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e3dea:	4293      	cmp	r3, r2
   e3dec:	dc0e      	bgt.n	e3e0c <iso_year_adjust+0x9a>
   e3dee:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e3df2:	4293      	cmp	r3, r2
   e3df4:	da16      	bge.n	e3e24 <iso_year_adjust+0xb2>
   e3df6:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e3dfa:	4293      	cmp	r3, r2
   e3dfc:	d012      	beq.n	e3e24 <iso_year_adjust+0xb2>
   e3dfe:	db13      	blt.n	e3e28 <iso_year_adjust+0xb6>
   e3e00:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e3e04:	3b12      	subs	r3, #18
   e3e06:	2b02      	cmp	r3, #2
   e3e08:	d90c      	bls.n	e3e24 <iso_year_adjust+0xb2>
   e3e0a:	e00d      	b.n	e3e28 <iso_year_adjust+0xb6>
   e3e0c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e3e10:	4293      	cmp	r3, r2
   e3e12:	d007      	beq.n	e3e24 <iso_year_adjust+0xb2>
   e3e14:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e3e18:	4293      	cmp	r3, r2
   e3e1a:	d003      	beq.n	e3e24 <iso_year_adjust+0xb2>
   e3e1c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e3e20:	4293      	cmp	r3, r2
   e3e22:	d101      	bne.n	e3e28 <iso_year_adjust+0xb6>
   e3e24:	2001      	movs	r0, #1
   e3e26:	bd10      	pop	{r4, pc}
   e3e28:	2000      	movs	r0, #0
   e3e2a:	bd10      	pop	{r4, pc}
   e3e2c:	f04f 30ff 	mov.w	r0, #4294967295
   e3e30:	bd10      	pop	{r4, pc}
	...

000e3e34 <strftime>:
   e3e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3e38:	b093      	sub	sp, #76	; 0x4c
   e3e3a:	460e      	mov	r6, r1
   e3e3c:	461d      	mov	r5, r3
   e3e3e:	4607      	mov	r7, r0
   e3e40:	4691      	mov	r9, r2
   e3e42:	f001 fc19 	bl	e5678 <__get_current_time_locale>
   e3e46:	2300      	movs	r3, #0
   e3e48:	9306      	str	r3, [sp, #24]
   e3e4a:	461c      	mov	r4, r3
   e3e4c:	1e73      	subs	r3, r6, #1
   e3e4e:	9003      	str	r0, [sp, #12]
   e3e50:	9302      	str	r3, [sp, #8]
   e3e52:	f899 3000 	ldrb.w	r3, [r9]
   e3e56:	2b00      	cmp	r3, #0
   e3e58:	f000 8492 	beq.w	e4780 <strftime+0x94c>
   e3e5c:	2b25      	cmp	r3, #37	; 0x25
   e3e5e:	d008      	beq.n	e3e72 <strftime+0x3e>
   e3e60:	9a02      	ldr	r2, [sp, #8]
   e3e62:	4294      	cmp	r4, r2
   e3e64:	f080 8490 	bcs.w	e4788 <strftime+0x954>
   e3e68:	553b      	strb	r3, [r7, r4]
   e3e6a:	f109 0901 	add.w	r9, r9, #1
   e3e6e:	3401      	adds	r4, #1
   e3e70:	e7ef      	b.n	e3e52 <strftime+0x1e>
   e3e72:	f899 a001 	ldrb.w	sl, [r9, #1]
   e3e76:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e3e7a:	d007      	beq.n	e3e8c <strftime+0x58>
   e3e7c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3e80:	d004      	beq.n	e3e8c <strftime+0x58>
   e3e82:	f109 0901 	add.w	r9, r9, #1
   e3e86:	f04f 0a00 	mov.w	sl, #0
   e3e8a:	e001      	b.n	e3e90 <strftime+0x5c>
   e3e8c:	f109 0902 	add.w	r9, r9, #2
   e3e90:	f899 3000 	ldrb.w	r3, [r9]
   e3e94:	3b31      	subs	r3, #49	; 0x31
   e3e96:	2b08      	cmp	r3, #8
   e3e98:	d808      	bhi.n	e3eac <strftime+0x78>
   e3e9a:	4648      	mov	r0, r9
   e3e9c:	220a      	movs	r2, #10
   e3e9e:	a90a      	add	r1, sp, #40	; 0x28
   e3ea0:	f001 fbe0 	bl	e5664 <strtoul>
   e3ea4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e3ea8:	4680      	mov	r8, r0
   e3eaa:	e001      	b.n	e3eb0 <strftime+0x7c>
   e3eac:	f04f 0800 	mov.w	r8, #0
   e3eb0:	f899 3000 	ldrb.w	r3, [r9]
   e3eb4:	2b45      	cmp	r3, #69	; 0x45
   e3eb6:	d001      	beq.n	e3ebc <strftime+0x88>
   e3eb8:	2b4f      	cmp	r3, #79	; 0x4f
   e3eba:	d101      	bne.n	e3ec0 <strftime+0x8c>
   e3ebc:	f109 0901 	add.w	r9, r9, #1
   e3ec0:	f899 0000 	ldrb.w	r0, [r9]
   e3ec4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e3ec8:	2b55      	cmp	r3, #85	; 0x55
   e3eca:	f200 845d 	bhi.w	e4788 <strftime+0x954>
   e3ece:	e8df f013 	tbh	[pc, r3, lsl #1]
   e3ed2:	044a      	.short	0x044a
   e3ed4:	045b045b 	.word	0x045b045b
   e3ed8:	045b045b 	.word	0x045b045b
   e3edc:	045b045b 	.word	0x045b045b
   e3ee0:	045b045b 	.word	0x045b045b
   e3ee4:	045b045b 	.word	0x045b045b
   e3ee8:	045b045b 	.word	0x045b045b
   e3eec:	045b045b 	.word	0x045b045b
   e3ef0:	045b045b 	.word	0x045b045b
   e3ef4:	045b045b 	.word	0x045b045b
   e3ef8:	045b045b 	.word	0x045b045b
   e3efc:	045b045b 	.word	0x045b045b
   e3f00:	045b045b 	.word	0x045b045b
   e3f04:	045b045b 	.word	0x045b045b
   e3f08:	006f045b 	.word	0x006f045b
   e3f0c:	00d400a1 	.word	0x00d400a1
   e3f10:	045b011a 	.word	0x045b011a
   e3f14:	01a0013f 	.word	0x01a0013f
   e3f18:	022d0226 	.word	0x022d0226
   e3f1c:	045b045b 	.word	0x045b045b
   e3f20:	0260045b 	.word	0x0260045b
   e3f24:	045b045b 	.word	0x045b045b
   e3f28:	045b0268 	.word	0x045b0268
   e3f2c:	031d0297 	.word	0x031d0297
   e3f30:	033b0325 	.word	0x033b0325
   e3f34:	03860343 	.word	0x03860343
   e3f38:	03a000c6 	.word	0x03a000c6
   e3f3c:	045b041f 	.word	0x045b041f
   e3f40:	045b045b 	.word	0x045b045b
   e3f44:	045b045b 	.word	0x045b045b
   e3f48:	0056045b 	.word	0x0056045b
   e3f4c:	00ba0089 	.word	0x00ba0089
   e3f50:	010c010c 	.word	0x010c010c
   e3f54:	0171045b 	.word	0x0171045b
   e3f58:	045b0089 	.word	0x045b0089
   e3f5c:	0226023d 	.word	0x0226023d
   e3f60:	025d022d 	.word	0x025d022d
   e3f64:	045b0262 	.word	0x045b0262
   e3f68:	045b0268 	.word	0x045b0268
   e3f6c:	029c00be 	.word	0x029c00be
   e3f70:	032e031f 	.word	0x032e031f
   e3f74:	037f045b 	.word	0x037f045b
   e3f78:	039200c2 	.word	0x039200c2
   e3f7c:	03e7      	.short	0x03e7
   e3f7e:	69ab      	ldr	r3, [r5, #24]
   e3f80:	9a03      	ldr	r2, [sp, #12]
   e3f82:	3318      	adds	r3, #24
   e3f84:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3f88:	4640      	mov	r0, r8
   e3f8a:	f000 fc07 	bl	e479c <strlen>
   e3f8e:	f108 38ff 	add.w	r8, r8, #4294967295
   e3f92:	193b      	adds	r3, r7, r4
   e3f94:	4420      	add	r0, r4
   e3f96:	4284      	cmp	r4, r0
   e3f98:	f000 83eb 	beq.w	e4772 <strftime+0x93e>
   e3f9c:	9a02      	ldr	r2, [sp, #8]
   e3f9e:	4294      	cmp	r4, r2
   e3fa0:	f080 83f2 	bcs.w	e4788 <strftime+0x954>
   e3fa4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3fa8:	f803 2b01 	strb.w	r2, [r3], #1
   e3fac:	3401      	adds	r4, #1
   e3fae:	e7f2      	b.n	e3f96 <strftime+0x162>
   e3fb0:	69ab      	ldr	r3, [r5, #24]
   e3fb2:	9a03      	ldr	r2, [sp, #12]
   e3fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e3fb8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e3fbc:	4640      	mov	r0, r8
   e3fbe:	f000 fbed 	bl	e479c <strlen>
   e3fc2:	f108 38ff 	add.w	r8, r8, #4294967295
   e3fc6:	193b      	adds	r3, r7, r4
   e3fc8:	4420      	add	r0, r4
   e3fca:	4284      	cmp	r4, r0
   e3fcc:	f000 83d1 	beq.w	e4772 <strftime+0x93e>
   e3fd0:	9a02      	ldr	r2, [sp, #8]
   e3fd2:	4294      	cmp	r4, r2
   e3fd4:	f080 83d8 	bcs.w	e4788 <strftime+0x954>
   e3fd8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3fdc:	f803 2b01 	strb.w	r2, [r3], #1
   e3fe0:	3401      	adds	r4, #1
   e3fe2:	e7f2      	b.n	e3fca <strftime+0x196>
   e3fe4:	692b      	ldr	r3, [r5, #16]
   e3fe6:	9a03      	ldr	r2, [sp, #12]
   e3fe8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3fec:	4640      	mov	r0, r8
   e3fee:	f000 fbd5 	bl	e479c <strlen>
   e3ff2:	f108 38ff 	add.w	r8, r8, #4294967295
   e3ff6:	193b      	adds	r3, r7, r4
   e3ff8:	4420      	add	r0, r4
   e3ffa:	4284      	cmp	r4, r0
   e3ffc:	f000 83b9 	beq.w	e4772 <strftime+0x93e>
   e4000:	9a02      	ldr	r2, [sp, #8]
   e4002:	4294      	cmp	r4, r2
   e4004:	f080 83c0 	bcs.w	e4788 <strftime+0x954>
   e4008:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e400c:	f803 2b01 	strb.w	r2, [r3], #1
   e4010:	3401      	adds	r4, #1
   e4012:	e7f2      	b.n	e3ffa <strftime+0x1c6>
   e4014:	692b      	ldr	r3, [r5, #16]
   e4016:	9a03      	ldr	r2, [sp, #12]
   e4018:	330c      	adds	r3, #12
   e401a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e401e:	4640      	mov	r0, r8
   e4020:	f000 fbbc 	bl	e479c <strlen>
   e4024:	f108 38ff 	add.w	r8, r8, #4294967295
   e4028:	193b      	adds	r3, r7, r4
   e402a:	4420      	add	r0, r4
   e402c:	4284      	cmp	r4, r0
   e402e:	f000 83a0 	beq.w	e4772 <strftime+0x93e>
   e4032:	9a02      	ldr	r2, [sp, #8]
   e4034:	4294      	cmp	r4, r2
   e4036:	f080 83a7 	bcs.w	e4788 <strftime+0x954>
   e403a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e403e:	f803 2b01 	strb.w	r2, [r3], #1
   e4042:	3401      	adds	r4, #1
   e4044:	e7f2      	b.n	e402c <strftime+0x1f8>
   e4046:	9b03      	ldr	r3, [sp, #12]
   e4048:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e404c:	e00a      	b.n	e4064 <strftime+0x230>
   e404e:	9b03      	ldr	r3, [sp, #12]
   e4050:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e4054:	e006      	b.n	e4064 <strftime+0x230>
   e4056:	9b03      	ldr	r3, [sp, #12]
   e4058:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e405c:	e002      	b.n	e4064 <strftime+0x230>
   e405e:	9b03      	ldr	r3, [sp, #12]
   e4060:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e4064:	4640      	mov	r0, r8
   e4066:	f000 fb99 	bl	e479c <strlen>
   e406a:	f898 3000 	ldrb.w	r3, [r8]
   e406e:	2b00      	cmp	r3, #0
   e4070:	f000 837f 	beq.w	e4772 <strftime+0x93e>
   e4074:	462b      	mov	r3, r5
   e4076:	4642      	mov	r2, r8
   e4078:	e093      	b.n	e41a2 <strftime+0x36e>
   e407a:	49b6      	ldr	r1, [pc, #728]	; (e4354 <strftime+0x520>)
   e407c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e4080:	458b      	cmp	fp, r1
   e4082:	bfac      	ite	ge
   e4084:	2100      	movge	r1, #0
   e4086:	2101      	movlt	r1, #1
   e4088:	f1bb 0f00 	cmp.w	fp, #0
   e408c:	db04      	blt.n	e4098 <strftime+0x264>
   e408e:	2064      	movs	r0, #100	; 0x64
   e4090:	fb9b f0f0 	sdiv	r0, fp, r0
   e4094:	3013      	adds	r0, #19
   e4096:	e008      	b.n	e40aa <strftime+0x276>
   e4098:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e409c:	9107      	str	r1, [sp, #28]
   e409e:	f001 fd37 	bl	e5b10 <abs>
   e40a2:	9907      	ldr	r1, [sp, #28]
   e40a4:	2364      	movs	r3, #100	; 0x64
   e40a6:	fb90 f0f3 	sdiv	r0, r0, r3
   e40aa:	f1ba 0f00 	cmp.w	sl, #0
   e40ae:	d008      	beq.n	e40c2 <strftime+0x28e>
   e40b0:	2863      	cmp	r0, #99	; 0x63
   e40b2:	dd09      	ble.n	e40c8 <strftime+0x294>
   e40b4:	4ba8      	ldr	r3, [pc, #672]	; (e4358 <strftime+0x524>)
   e40b6:	4aa9      	ldr	r2, [pc, #676]	; (e435c <strftime+0x528>)
   e40b8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e40bc:	bf18      	it	ne
   e40be:	4613      	movne	r3, r2
   e40c0:	e003      	b.n	e40ca <strftime+0x296>
   e40c2:	4ba6      	ldr	r3, [pc, #664]	; (e435c <strftime+0x528>)
   e40c4:	4aa6      	ldr	r2, [pc, #664]	; (e4360 <strftime+0x52c>)
   e40c6:	e001      	b.n	e40cc <strftime+0x298>
   e40c8:	4ba4      	ldr	r3, [pc, #656]	; (e435c <strftime+0x528>)
   e40ca:	4aa6      	ldr	r2, [pc, #664]	; (e4364 <strftime+0x530>)
   e40cc:	9001      	str	r0, [sp, #4]
   e40ce:	f1b8 0f01 	cmp.w	r8, #1
   e40d2:	bf98      	it	ls
   e40d4:	f04f 0802 	movls.w	r8, #2
   e40d8:	ebc1 0108 	rsb	r1, r1, r8
   e40dc:	9100      	str	r1, [sp, #0]
   e40de:	489d      	ldr	r0, [pc, #628]	; (e4354 <strftime+0x520>)
   e40e0:	49a1      	ldr	r1, [pc, #644]	; (e4368 <strftime+0x534>)
   e40e2:	4583      	cmp	fp, r0
   e40e4:	bfb8      	it	lt
   e40e6:	460b      	movlt	r3, r1
   e40e8:	e21e      	b.n	e4528 <strftime+0x6f4>
   e40ea:	4aa0      	ldr	r2, [pc, #640]	; (e436c <strftime+0x538>)
   e40ec:	49a0      	ldr	r1, [pc, #640]	; (e4370 <strftime+0x53c>)
   e40ee:	68eb      	ldr	r3, [r5, #12]
   e40f0:	2864      	cmp	r0, #100	; 0x64
   e40f2:	bf08      	it	eq
   e40f4:	460a      	moveq	r2, r1
   e40f6:	1b31      	subs	r1, r6, r4
   e40f8:	1938      	adds	r0, r7, r4
   e40fa:	f7f6 fd9f 	bl	dac3c <sniprintf>
   e40fe:	2800      	cmp	r0, #0
   e4100:	f280 8302 	bge.w	e4708 <strftime+0x8d4>
   e4104:	e340      	b.n	e4788 <strftime+0x954>
   e4106:	6968      	ldr	r0, [r5, #20]
   e4108:	692b      	ldr	r3, [r5, #16]
   e410a:	2800      	cmp	r0, #0
   e410c:	f103 0b01 	add.w	fp, r3, #1
   e4110:	eb07 0804 	add.w	r8, r7, r4
   e4114:	ebc4 0a06 	rsb	sl, r4, r6
   e4118:	68eb      	ldr	r3, [r5, #12]
   e411a:	db05      	blt.n	e4128 <strftime+0x2f4>
   e411c:	2264      	movs	r2, #100	; 0x64
   e411e:	fb90 f1f2 	sdiv	r1, r0, r2
   e4122:	fb02 0011 	mls	r0, r2, r1, r0
   e4126:	e00a      	b.n	e413e <strftime+0x30a>
   e4128:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e412c:	9307      	str	r3, [sp, #28]
   e412e:	f001 fcef 	bl	e5b10 <abs>
   e4132:	2264      	movs	r2, #100	; 0x64
   e4134:	9b07      	ldr	r3, [sp, #28]
   e4136:	fb90 f1f2 	sdiv	r1, r0, r2
   e413a:	fb01 0012 	mls	r0, r1, r2, r0
   e413e:	4a8d      	ldr	r2, [pc, #564]	; (e4374 <strftime+0x540>)
   e4140:	9001      	str	r0, [sp, #4]
   e4142:	9300      	str	r3, [sp, #0]
   e4144:	4651      	mov	r1, sl
   e4146:	465b      	mov	r3, fp
   e4148:	4640      	mov	r0, r8
   e414a:	f7f6 fd77 	bl	dac3c <sniprintf>
   e414e:	e7d6      	b.n	e40fe <strftime+0x2ca>
   e4150:	2325      	movs	r3, #37	; 0x25
   e4152:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4156:	f1ba 0f00 	cmp.w	sl, #0
   e415a:	d007      	beq.n	e416c <strftime+0x338>
   e415c:	f1b8 0f05 	cmp.w	r8, #5
   e4160:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e4164:	bf98      	it	ls
   e4166:	f04f 0806 	movls.w	r8, #6
   e416a:	e004      	b.n	e4176 <strftime+0x342>
   e416c:	232b      	movs	r3, #43	; 0x2b
   e416e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e4172:	f04f 080a 	mov.w	r8, #10
   e4176:	f1b8 0306 	subs.w	r3, r8, #6
   e417a:	d102      	bne.n	e4182 <strftime+0x34e>
   e417c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e4180:	e00a      	b.n	e4198 <strftime+0x364>
   e4182:	4a7d      	ldr	r2, [pc, #500]	; (e4378 <strftime+0x544>)
   e4184:	211e      	movs	r1, #30
   e4186:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e418a:	f7f6 fd57 	bl	dac3c <sniprintf>
   e418e:	2800      	cmp	r0, #0
   e4190:	ddf4      	ble.n	e417c <strftime+0x348>
   e4192:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e4196:	4418      	add	r0, r3
   e4198:	4978      	ldr	r1, [pc, #480]	; (e437c <strftime+0x548>)
   e419a:	f7ff fdc7 	bl	e3d2c <strcpy>
   e419e:	462b      	mov	r3, r5
   e41a0:	aa0a      	add	r2, sp, #40	; 0x28
   e41a2:	1b31      	subs	r1, r6, r4
   e41a4:	1938      	adds	r0, r7, r4
   e41a6:	f7ff fe45 	bl	e3e34 <strftime>
   e41aa:	2800      	cmp	r0, #0
   e41ac:	f340 82ec 	ble.w	e4788 <strftime+0x954>
   e41b0:	4404      	add	r4, r0
   e41b2:	e2de      	b.n	e4772 <strftime+0x93e>
   e41b4:	4628      	mov	r0, r5
   e41b6:	f7ff fddc 	bl	e3d72 <iso_year_adjust>
   e41ba:	4680      	mov	r8, r0
   e41bc:	6968      	ldr	r0, [r5, #20]
   e41be:	2800      	cmp	r0, #0
   e41c0:	db05      	blt.n	e41ce <strftime+0x39a>
   e41c2:	2264      	movs	r2, #100	; 0x64
   e41c4:	fb90 f1f2 	sdiv	r1, r0, r2
   e41c8:	fb02 0011 	mls	r0, r2, r1, r0
   e41cc:	e008      	b.n	e41e0 <strftime+0x3ac>
   e41ce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e41d2:	f001 fc9d 	bl	e5b10 <abs>
   e41d6:	2264      	movs	r2, #100	; 0x64
   e41d8:	fb90 f3f2 	sdiv	r3, r0, r2
   e41dc:	fb03 0012 	mls	r0, r3, r2, r0
   e41e0:	f1b8 0f00 	cmp.w	r8, #0
   e41e4:	da06      	bge.n	e41f4 <strftime+0x3c0>
   e41e6:	696a      	ldr	r2, [r5, #20]
   e41e8:	4b65      	ldr	r3, [pc, #404]	; (e4380 <strftime+0x54c>)
   e41ea:	429a      	cmp	r2, r3
   e41ec:	bfb8      	it	lt
   e41ee:	f04f 0801 	movlt.w	r8, #1
   e41f2:	e006      	b.n	e4202 <strftime+0x3ce>
   e41f4:	d005      	beq.n	e4202 <strftime+0x3ce>
   e41f6:	696a      	ldr	r2, [r5, #20]
   e41f8:	4b56      	ldr	r3, [pc, #344]	; (e4354 <strftime+0x520>)
   e41fa:	429a      	cmp	r2, r3
   e41fc:	bfb8      	it	lt
   e41fe:	f04f 38ff 	movlt.w	r8, #4294967295
   e4202:	2364      	movs	r3, #100	; 0x64
   e4204:	4440      	add	r0, r8
   e4206:	fb90 f2f3 	sdiv	r2, r0, r3
   e420a:	fb03 0012 	mls	r0, r3, r2, r0
   e420e:	4418      	add	r0, r3
   e4210:	e1f9      	b.n	e4606 <strftime+0x7d2>
   e4212:	4b50      	ldr	r3, [pc, #320]	; (e4354 <strftime+0x520>)
   e4214:	6969      	ldr	r1, [r5, #20]
   e4216:	9108      	str	r1, [sp, #32]
   e4218:	4299      	cmp	r1, r3
   e421a:	bfac      	ite	ge
   e421c:	2300      	movge	r3, #0
   e421e:	2301      	movlt	r3, #1
   e4220:	4628      	mov	r0, r5
   e4222:	9307      	str	r3, [sp, #28]
   e4224:	f7ff fda5 	bl	e3d72 <iso_year_adjust>
   e4228:	9908      	ldr	r1, [sp, #32]
   e422a:	2900      	cmp	r1, #0
   e422c:	4683      	mov	fp, r0
   e422e:	db04      	blt.n	e423a <strftime+0x406>
   e4230:	2364      	movs	r3, #100	; 0x64
   e4232:	fb91 f3f3 	sdiv	r3, r1, r3
   e4236:	3313      	adds	r3, #19
   e4238:	e008      	b.n	e424c <strftime+0x418>
   e423a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e423e:	9108      	str	r1, [sp, #32]
   e4240:	f001 fc66 	bl	e5b10 <abs>
   e4244:	9908      	ldr	r1, [sp, #32]
   e4246:	2364      	movs	r3, #100	; 0x64
   e4248:	fb90 f3f3 	sdiv	r3, r0, r3
   e424c:	6968      	ldr	r0, [r5, #20]
   e424e:	2800      	cmp	r0, #0
   e4250:	db06      	blt.n	e4260 <strftime+0x42c>
   e4252:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4256:	fb90 fcfe 	sdiv	ip, r0, lr
   e425a:	fb0e 001c 	mls	r0, lr, ip, r0
   e425e:	e00d      	b.n	e427c <strftime+0x448>
   e4260:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4264:	9109      	str	r1, [sp, #36]	; 0x24
   e4266:	9308      	str	r3, [sp, #32]
   e4268:	f001 fc52 	bl	e5b10 <abs>
   e426c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4270:	9909      	ldr	r1, [sp, #36]	; 0x24
   e4272:	9b08      	ldr	r3, [sp, #32]
   e4274:	fb90 fcfe 	sdiv	ip, r0, lr
   e4278:	fb0c 001e 	mls	r0, ip, lr, r0
   e427c:	f1bb 0f00 	cmp.w	fp, #0
   e4280:	da08      	bge.n	e4294 <strftime+0x460>
   e4282:	6969      	ldr	r1, [r5, #20]
   e4284:	4a3e      	ldr	r2, [pc, #248]	; (e4380 <strftime+0x54c>)
   e4286:	4291      	cmp	r1, r2
   e4288:	da0a      	bge.n	e42a0 <strftime+0x46c>
   e428a:	f04f 0b01 	mov.w	fp, #1
   e428e:	f8cd b01c 	str.w	fp, [sp, #28]
   e4292:	e005      	b.n	e42a0 <strftime+0x46c>
   e4294:	d004      	beq.n	e42a0 <strftime+0x46c>
   e4296:	4a2f      	ldr	r2, [pc, #188]	; (e4354 <strftime+0x520>)
   e4298:	4291      	cmp	r1, r2
   e429a:	bfb8      	it	lt
   e429c:	f04f 3bff 	movlt.w	fp, #4294967295
   e42a0:	eb0b 0200 	add.w	r2, fp, r0
   e42a4:	1c50      	adds	r0, r2, #1
   e42a6:	d102      	bne.n	e42ae <strftime+0x47a>
   e42a8:	3b01      	subs	r3, #1
   e42aa:	2263      	movs	r2, #99	; 0x63
   e42ac:	e003      	b.n	e42b6 <strftime+0x482>
   e42ae:	2a64      	cmp	r2, #100	; 0x64
   e42b0:	bf04      	itt	eq
   e42b2:	3301      	addeq	r3, #1
   e42b4:	2200      	moveq	r2, #0
   e42b6:	2064      	movs	r0, #100	; 0x64
   e42b8:	fb00 2303 	mla	r3, r0, r3, r2
   e42bc:	9a07      	ldr	r2, [sp, #28]
   e42be:	b142      	cbz	r2, e42d2 <strftime+0x49e>
   e42c0:	222d      	movs	r2, #45	; 0x2d
   e42c2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e42c6:	f1b8 0f00 	cmp.w	r8, #0
   e42ca:	d013      	beq.n	e42f4 <strftime+0x4c0>
   e42cc:	f108 38ff 	add.w	r8, r8, #4294967295
   e42d0:	e010      	b.n	e42f4 <strftime+0x4c0>
   e42d2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e42d6:	d110      	bne.n	e42fa <strftime+0x4c6>
   e42d8:	f242 720f 	movw	r2, #9999	; 0x270f
   e42dc:	4293      	cmp	r3, r2
   e42de:	d90c      	bls.n	e42fa <strftime+0x4c6>
   e42e0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e42e4:	f1b8 0f00 	cmp.w	r8, #0
   e42e8:	d1f0      	bne.n	e42cc <strftime+0x498>
   e42ea:	aa12      	add	r2, sp, #72	; 0x48
   e42ec:	2125      	movs	r1, #37	; 0x25
   e42ee:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e42f2:	e00a      	b.n	e430a <strftime+0x4d6>
   e42f4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e42f8:	e000      	b.n	e42fc <strftime+0x4c8>
   e42fa:	aa0a      	add	r2, sp, #40	; 0x28
   e42fc:	2125      	movs	r1, #37	; 0x25
   e42fe:	7011      	strb	r1, [r2, #0]
   e4300:	f1ba 0f00 	cmp.w	sl, #0
   e4304:	d101      	bne.n	e430a <strftime+0x4d6>
   e4306:	1c50      	adds	r0, r2, #1
   e4308:	e002      	b.n	e4310 <strftime+0x4dc>
   e430a:	2130      	movs	r1, #48	; 0x30
   e430c:	1c90      	adds	r0, r2, #2
   e430e:	7051      	strb	r1, [r2, #1]
   e4310:	491c      	ldr	r1, [pc, #112]	; (e4384 <strftime+0x550>)
   e4312:	9307      	str	r3, [sp, #28]
   e4314:	f7ff fd0a 	bl	e3d2c <strcpy>
   e4318:	9b07      	ldr	r3, [sp, #28]
   e431a:	9300      	str	r3, [sp, #0]
   e431c:	e1ad      	b.n	e467a <strftime+0x846>
   e431e:	4a14      	ldr	r2, [pc, #80]	; (e4370 <strftime+0x53c>)
   e4320:	4912      	ldr	r1, [pc, #72]	; (e436c <strftime+0x538>)
   e4322:	68ab      	ldr	r3, [r5, #8]
   e4324:	286b      	cmp	r0, #107	; 0x6b
   e4326:	bf08      	it	eq
   e4328:	460a      	moveq	r2, r1
   e432a:	e6e4      	b.n	e40f6 <strftime+0x2c2>
   e432c:	68a9      	ldr	r1, [r5, #8]
   e432e:	230c      	movs	r3, #12
   e4330:	b131      	cbz	r1, e4340 <strftime+0x50c>
   e4332:	4299      	cmp	r1, r3
   e4334:	bf0e      	itee	eq
   e4336:	460b      	moveq	r3, r1
   e4338:	fb91 f2f3 	sdivne	r2, r1, r3
   e433c:	fb03 1312 	mlsne	r3, r3, r2, r1
   e4340:	4a0a      	ldr	r2, [pc, #40]	; (e436c <strftime+0x538>)
   e4342:	490b      	ldr	r1, [pc, #44]	; (e4370 <strftime+0x53c>)
   e4344:	2849      	cmp	r0, #73	; 0x49
   e4346:	bf08      	it	eq
   e4348:	460a      	moveq	r2, r1
   e434a:	e6d4      	b.n	e40f6 <strftime+0x2c2>
   e434c:	69eb      	ldr	r3, [r5, #28]
   e434e:	4a0e      	ldr	r2, [pc, #56]	; (e4388 <strftime+0x554>)
   e4350:	3301      	adds	r3, #1
   e4352:	e6d0      	b.n	e40f6 <strftime+0x2c2>
   e4354:	fffff894 	.word	0xfffff894
   e4358:	000e87eb 	.word	0x000e87eb
   e435c:	000e6ff6 	.word	0x000e6ff6
   e4360:	000e87dc 	.word	0x000e87dc
   e4364:	000e87e3 	.word	0x000e87e3
   e4368:	000e7678 	.word	0x000e7678
   e436c:	000e87ed 	.word	0x000e87ed
   e4370:	000e87fb 	.word	0x000e87fb
   e4374:	000e87f1 	.word	0x000e87f1
   e4378:	000e8800 	.word	0x000e8800
   e437c:	000e8804 	.word	0x000e8804
   e4380:	fffff895 	.word	0xfffff895
   e4384:	000e880c 	.word	0x000e880c
   e4388:	000e8810 	.word	0x000e8810
   e438c:	692b      	ldr	r3, [r5, #16]
   e438e:	3301      	adds	r3, #1
   e4390:	e13d      	b.n	e460e <strftime+0x7da>
   e4392:	686b      	ldr	r3, [r5, #4]
   e4394:	e13b      	b.n	e460e <strftime+0x7da>
   e4396:	9b02      	ldr	r3, [sp, #8]
   e4398:	429c      	cmp	r4, r3
   e439a:	f080 81f5 	bcs.w	e4788 <strftime+0x954>
   e439e:	230a      	movs	r3, #10
   e43a0:	e1e5      	b.n	e476e <strftime+0x93a>
   e43a2:	68ab      	ldr	r3, [r5, #8]
   e43a4:	9a03      	ldr	r2, [sp, #12]
   e43a6:	2b0b      	cmp	r3, #11
   e43a8:	bfcc      	ite	gt
   e43aa:	23a4      	movgt	r3, #164	; 0xa4
   e43ac:	23a0      	movle	r3, #160	; 0xa0
   e43ae:	4413      	add	r3, r2
   e43b0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e43b4:	4640      	mov	r0, r8
   e43b6:	f000 f9f1 	bl	e479c <strlen>
   e43ba:	4bb2      	ldr	r3, [pc, #712]	; (e4684 <strftime+0x850>)
   e43bc:	f8d3 e000 	ldr.w	lr, [r3]
   e43c0:	1939      	adds	r1, r7, r4
   e43c2:	4642      	mov	r2, r8
   e43c4:	4420      	add	r0, r4
   e43c6:	4284      	cmp	r4, r0
   e43c8:	f000 81d3 	beq.w	e4772 <strftime+0x93e>
   e43cc:	9b02      	ldr	r3, [sp, #8]
   e43ce:	429c      	cmp	r4, r3
   e43d0:	f080 81da 	bcs.w	e4788 <strftime+0x954>
   e43d4:	f899 3000 	ldrb.w	r3, [r9]
   e43d8:	2b50      	cmp	r3, #80	; 0x50
   e43da:	f104 0401 	add.w	r4, r4, #1
   e43de:	7813      	ldrb	r3, [r2, #0]
   e43e0:	d10a      	bne.n	e43f8 <strftime+0x5c4>
   e43e2:	eb0e 0c03 	add.w	ip, lr, r3
   e43e6:	f89c c001 	ldrb.w	ip, [ip, #1]
   e43ea:	f00c 0c03 	and.w	ip, ip, #3
   e43ee:	f1bc 0f01 	cmp.w	ip, #1
   e43f2:	bf08      	it	eq
   e43f4:	3320      	addeq	r3, #32
   e43f6:	b2db      	uxtb	r3, r3
   e43f8:	f801 3b01 	strb.w	r3, [r1], #1
   e43fc:	3201      	adds	r2, #1
   e43fe:	e7e2      	b.n	e43c6 <strftime+0x592>
   e4400:	686b      	ldr	r3, [r5, #4]
   e4402:	9300      	str	r3, [sp, #0]
   e4404:	4aa0      	ldr	r2, [pc, #640]	; (e4688 <strftime+0x854>)
   e4406:	68ab      	ldr	r3, [r5, #8]
   e4408:	e139      	b.n	e467e <strftime+0x84a>
   e440a:	6a2b      	ldr	r3, [r5, #32]
   e440c:	2b00      	cmp	r3, #0
   e440e:	db17      	blt.n	e4440 <strftime+0x60c>
   e4410:	f001 f9f6 	bl	e5800 <__tz_lock>
   e4414:	9b06      	ldr	r3, [sp, #24]
   e4416:	b91b      	cbnz	r3, e4420 <strftime+0x5ec>
   e4418:	f001 f9f4 	bl	e5804 <_tzset_unlocked>
   e441c:	2301      	movs	r3, #1
   e441e:	9306      	str	r3, [sp, #24]
   e4420:	f001 fef0 	bl	e6204 <__gettzinfo>
   e4424:	6a2b      	ldr	r3, [r5, #32]
   e4426:	2b00      	cmp	r3, #0
   e4428:	bfd4      	ite	le
   e442a:	2300      	movle	r3, #0
   e442c:	2301      	movgt	r3, #1
   e442e:	221c      	movs	r2, #28
   e4430:	fb02 0003 	mla	r0, r2, r3, r0
   e4434:	6a03      	ldr	r3, [r0, #32]
   e4436:	f1c3 0800 	rsb	r8, r3, #0
   e443a:	f001 f9e2 	bl	e5802 <__tz_unlock>
   e443e:	e001      	b.n	e4444 <strftime+0x610>
   e4440:	f04f 0800 	mov.w	r8, #0
   e4444:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e4448:	4670      	mov	r0, lr
   e444a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e444e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e4452:	f141 33ff 	adc.w	r3, r1, #4294967295
   e4456:	2a00      	cmp	r2, #0
   e4458:	f173 0b00 	sbcs.w	fp, r3, #0
   e445c:	ebc4 0c06 	rsb	ip, r4, r6
   e4460:	eb07 0a04 	add.w	sl, r7, r4
   e4464:	da03      	bge.n	e446e <strftime+0x63a>
   e4466:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e446a:	f141 33ff 	adc.w	r3, r1, #4294967295
   e446e:	0891      	lsrs	r1, r2, #2
   e4470:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e4474:	109b      	asrs	r3, r3, #2
   e4476:	9104      	str	r1, [sp, #16]
   e4478:	9305      	str	r3, [sp, #20]
   e447a:	f10e 31ff 	add.w	r1, lr, #4294967295
   e447e:	2364      	movs	r3, #100	; 0x64
   e4480:	fb91 f1f3 	sdiv	r1, r1, r3
   e4484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e4488:	1a52      	subs	r2, r2, r1
   e448a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e448e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e4492:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e4496:	fb90 f1f1 	sdiv	r1, r0, r1
   e449a:	1852      	adds	r2, r2, r1
   e449c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e44a0:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e44a4:	f240 116d 	movw	r1, #365	; 0x16d
   e44a8:	fb01 fe0e 	mul.w	lr, r1, lr
   e44ac:	69e9      	ldr	r1, [r5, #28]
   e44ae:	eb12 020e 	adds.w	r2, r2, lr
   e44b2:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e44b6:	1852      	adds	r2, r2, r1
   e44b8:	f04f 0e18 	mov.w	lr, #24
   e44bc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e44c0:	fba2 010e 	umull	r0, r1, r2, lr
   e44c4:	fb0e 1103 	mla	r1, lr, r3, r1
   e44c8:	68ab      	ldr	r3, [r5, #8]
   e44ca:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e44ce:	18c0      	adds	r0, r0, r3
   e44d0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e44d4:	fba0 230e 	umull	r2, r3, r0, lr
   e44d8:	fb0e 3301 	mla	r3, lr, r1, r3
   e44dc:	6869      	ldr	r1, [r5, #4]
   e44de:	1852      	adds	r2, r2, r1
   e44e0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e44e4:	fba2 010e 	umull	r0, r1, r2, lr
   e44e8:	fb0e 1103 	mla	r1, lr, r3, r1
   e44ec:	682b      	ldr	r3, [r5, #0]
   e44ee:	4a67      	ldr	r2, [pc, #412]	; (e468c <strftime+0x858>)
   e44f0:	18c0      	adds	r0, r0, r3
   e44f2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e44f6:	ebb0 0008 	subs.w	r0, r0, r8
   e44fa:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e44fe:	e9cd 0100 	strd	r0, r1, [sp]
   e4502:	4661      	mov	r1, ip
   e4504:	4650      	mov	r0, sl
   e4506:	f7f6 fb99 	bl	dac3c <sniprintf>
   e450a:	e5f8      	b.n	e40fe <strftime+0x2ca>
   e450c:	682b      	ldr	r3, [r5, #0]
   e450e:	e07e      	b.n	e460e <strftime+0x7da>
   e4510:	9b02      	ldr	r3, [sp, #8]
   e4512:	429c      	cmp	r4, r3
   e4514:	f080 8138 	bcs.w	e4788 <strftime+0x954>
   e4518:	2309      	movs	r3, #9
   e451a:	e128      	b.n	e476e <strftime+0x93a>
   e451c:	682b      	ldr	r3, [r5, #0]
   e451e:	9301      	str	r3, [sp, #4]
   e4520:	686b      	ldr	r3, [r5, #4]
   e4522:	9300      	str	r3, [sp, #0]
   e4524:	4a5a      	ldr	r2, [pc, #360]	; (e4690 <strftime+0x85c>)
   e4526:	68ab      	ldr	r3, [r5, #8]
   e4528:	1b31      	subs	r1, r6, r4
   e452a:	1938      	adds	r0, r7, r4
   e452c:	e60d      	b.n	e414a <strftime+0x316>
   e452e:	9b02      	ldr	r3, [sp, #8]
   e4530:	429c      	cmp	r4, r3
   e4532:	f080 8129 	bcs.w	e4788 <strftime+0x954>
   e4536:	69ab      	ldr	r3, [r5, #24]
   e4538:	1c62      	adds	r2, r4, #1
   e453a:	b90b      	cbnz	r3, e4540 <strftime+0x70c>
   e453c:	2337      	movs	r3, #55	; 0x37
   e453e:	e000      	b.n	e4542 <strftime+0x70e>
   e4540:	3330      	adds	r3, #48	; 0x30
   e4542:	553b      	strb	r3, [r7, r4]
   e4544:	4614      	mov	r4, r2
   e4546:	e114      	b.n	e4772 <strftime+0x93e>
   e4548:	69eb      	ldr	r3, [r5, #28]
   e454a:	69aa      	ldr	r2, [r5, #24]
   e454c:	3307      	adds	r3, #7
   e454e:	1a9b      	subs	r3, r3, r2
   e4550:	2207      	movs	r2, #7
   e4552:	fb93 f3f2 	sdiv	r3, r3, r2
   e4556:	e05a      	b.n	e460e <strftime+0x7da>
   e4558:	4628      	mov	r0, r5
   e455a:	f7ff fc0a 	bl	e3d72 <iso_year_adjust>
   e455e:	69aa      	ldr	r2, [r5, #24]
   e4560:	b10a      	cbz	r2, e4566 <strftime+0x732>
   e4562:	1e53      	subs	r3, r2, #1
   e4564:	e000      	b.n	e4568 <strftime+0x734>
   e4566:	2306      	movs	r3, #6
   e4568:	2800      	cmp	r0, #0
   e456a:	dc2f      	bgt.n	e45cc <strftime+0x798>
   e456c:	69ea      	ldr	r2, [r5, #28]
   e456e:	d101      	bne.n	e4574 <strftime+0x740>
   e4570:	320a      	adds	r2, #10
   e4572:	e03b      	b.n	e45ec <strftime+0x7b8>
   e4574:	1a9a      	subs	r2, r3, r2
   e4576:	696b      	ldr	r3, [r5, #20]
   e4578:	f240 716b 	movw	r1, #1899	; 0x76b
   e457c:	2b00      	cmp	r3, #0
   e457e:	bfb4      	ite	lt
   e4580:	4608      	movlt	r0, r1
   e4582:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e4586:	4418      	add	r0, r3
   e4588:	0781      	lsls	r1, r0, #30
   e458a:	d107      	bne.n	e459c <strftime+0x768>
   e458c:	4601      	mov	r1, r0
   e458e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4592:	fb90 f0fe 	sdiv	r0, r0, lr
   e4596:	fb0e 1110 	mls	r1, lr, r0, r1
   e459a:	b981      	cbnz	r1, e45be <strftime+0x78a>
   e459c:	2b00      	cmp	r3, #0
   e459e:	f240 716b 	movw	r1, #1899	; 0x76b
   e45a2:	bfa8      	it	ge
   e45a4:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e45a8:	4419      	add	r1, r3
   e45aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e45ae:	fb91 f0f3 	sdiv	r0, r1, r3
   e45b2:	fb03 1110 	mls	r1, r3, r0, r1
   e45b6:	fab1 f181 	clz	r1, r1
   e45ba:	0949      	lsrs	r1, r1, #5
   e45bc:	e000      	b.n	e45c0 <strftime+0x78c>
   e45be:	2101      	movs	r1, #1
   e45c0:	1a52      	subs	r2, r2, r1
   e45c2:	2a05      	cmp	r2, #5
   e45c4:	bfb4      	ite	lt
   e45c6:	2335      	movlt	r3, #53	; 0x35
   e45c8:	2334      	movge	r3, #52	; 0x34
   e45ca:	e020      	b.n	e460e <strftime+0x7da>
   e45cc:	2301      	movs	r3, #1
   e45ce:	e01e      	b.n	e460e <strftime+0x7da>
   e45d0:	9b02      	ldr	r3, [sp, #8]
   e45d2:	429c      	cmp	r4, r3
   e45d4:	f080 80d8 	bcs.w	e4788 <strftime+0x954>
   e45d8:	69ab      	ldr	r3, [r5, #24]
   e45da:	3330      	adds	r3, #48	; 0x30
   e45dc:	e0c7      	b.n	e476e <strftime+0x93a>
   e45de:	69aa      	ldr	r2, [r5, #24]
   e45e0:	b10a      	cbz	r2, e45e6 <strftime+0x7b2>
   e45e2:	1e53      	subs	r3, r2, #1
   e45e4:	e000      	b.n	e45e8 <strftime+0x7b4>
   e45e6:	2306      	movs	r3, #6
   e45e8:	69ea      	ldr	r2, [r5, #28]
   e45ea:	3207      	adds	r2, #7
   e45ec:	1ad2      	subs	r2, r2, r3
   e45ee:	2307      	movs	r3, #7
   e45f0:	fb92 f3f3 	sdiv	r3, r2, r3
   e45f4:	e00b      	b.n	e460e <strftime+0x7da>
   e45f6:	6968      	ldr	r0, [r5, #20]
   e45f8:	2800      	cmp	r0, #0
   e45fa:	da03      	bge.n	e4604 <strftime+0x7d0>
   e45fc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4600:	f001 fa86 	bl	e5b10 <abs>
   e4604:	2364      	movs	r3, #100	; 0x64
   e4606:	fb90 f2f3 	sdiv	r2, r0, r3
   e460a:	fb02 0313 	mls	r3, r2, r3, r0
   e460e:	4a21      	ldr	r2, [pc, #132]	; (e4694 <strftime+0x860>)
   e4610:	e571      	b.n	e40f6 <strftime+0x2c2>
   e4612:	696b      	ldr	r3, [r5, #20]
   e4614:	4a20      	ldr	r2, [pc, #128]	; (e4698 <strftime+0x864>)
   e4616:	4293      	cmp	r3, r2
   e4618:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e461c:	da05      	bge.n	e462a <strftime+0x7f6>
   e461e:	232d      	movs	r3, #45	; 0x2d
   e4620:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4624:	f1cb 0b00 	rsb	fp, fp, #0
   e4628:	e008      	b.n	e463c <strftime+0x808>
   e462a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e462e:	d10d      	bne.n	e464c <strftime+0x818>
   e4630:	f242 730f 	movw	r3, #9999	; 0x270f
   e4634:	459b      	cmp	fp, r3
   e4636:	d911      	bls.n	e465c <strftime+0x828>
   e4638:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e463c:	f1b8 0f00 	cmp.w	r8, #0
   e4640:	d001      	beq.n	e4646 <strftime+0x812>
   e4642:	f108 38ff 	add.w	r8, r8, #4294967295
   e4646:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e464a:	e000      	b.n	e464e <strftime+0x81a>
   e464c:	ab0a      	add	r3, sp, #40	; 0x28
   e464e:	2225      	movs	r2, #37	; 0x25
   e4650:	701a      	strb	r2, [r3, #0]
   e4652:	f1ba 0f00 	cmp.w	sl, #0
   e4656:	d108      	bne.n	e466a <strftime+0x836>
   e4658:	1c58      	adds	r0, r3, #1
   e465a:	e009      	b.n	e4670 <strftime+0x83c>
   e465c:	f1b8 0f00 	cmp.w	r8, #0
   e4660:	d1f4      	bne.n	e464c <strftime+0x818>
   e4662:	2325      	movs	r3, #37	; 0x25
   e4664:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4668:	ab0a      	add	r3, sp, #40	; 0x28
   e466a:	2230      	movs	r2, #48	; 0x30
   e466c:	1c98      	adds	r0, r3, #2
   e466e:	705a      	strb	r2, [r3, #1]
   e4670:	490a      	ldr	r1, [pc, #40]	; (e469c <strftime+0x868>)
   e4672:	f7ff fb5b 	bl	e3d2c <strcpy>
   e4676:	f8cd b000 	str.w	fp, [sp]
   e467a:	4643      	mov	r3, r8
   e467c:	aa0a      	add	r2, sp, #40	; 0x28
   e467e:	1b31      	subs	r1, r6, r4
   e4680:	1938      	adds	r0, r7, r4
   e4682:	e03e      	b.n	e4702 <strftime+0x8ce>
   e4684:	2003d5c4 	.word	0x2003d5c4
   e4688:	000e881f 	.word	0x000e881f
   e468c:	000e8815 	.word	0x000e8815
   e4690:	000e881a 	.word	0x000e881a
   e4694:	000e87fb 	.word	0x000e87fb
   e4698:	fffff894 	.word	0xfffff894
   e469c:	000e880c 	.word	0x000e880c
   e46a0:	6a2b      	ldr	r3, [r5, #32]
   e46a2:	2b00      	cmp	r3, #0
   e46a4:	db65      	blt.n	e4772 <strftime+0x93e>
   e46a6:	f001 f8ab 	bl	e5800 <__tz_lock>
   e46aa:	9b06      	ldr	r3, [sp, #24]
   e46ac:	b91b      	cbnz	r3, e46b6 <strftime+0x882>
   e46ae:	f001 f8a9 	bl	e5804 <_tzset_unlocked>
   e46b2:	2301      	movs	r3, #1
   e46b4:	9306      	str	r3, [sp, #24]
   e46b6:	f001 fda5 	bl	e6204 <__gettzinfo>
   e46ba:	6a2b      	ldr	r3, [r5, #32]
   e46bc:	2b00      	cmp	r3, #0
   e46be:	bfd4      	ite	le
   e46c0:	2300      	movle	r3, #0
   e46c2:	2301      	movgt	r3, #1
   e46c4:	221c      	movs	r2, #28
   e46c6:	fb02 0003 	mla	r0, r2, r3, r0
   e46ca:	eb07 0a04 	add.w	sl, r7, r4
   e46ce:	6a03      	ldr	r3, [r0, #32]
   e46d0:	f1c3 0800 	rsb	r8, r3, #0
   e46d4:	f001 f895 	bl	e5802 <__tz_unlock>
   e46d8:	233c      	movs	r3, #60	; 0x3c
   e46da:	fb98 f0f3 	sdiv	r0, r8, r3
   e46de:	9307      	str	r3, [sp, #28]
   e46e0:	f001 fe2c 	bl	e633c <labs>
   e46e4:	9b07      	ldr	r3, [sp, #28]
   e46e6:	fb90 f2f3 	sdiv	r2, r0, r3
   e46ea:	ebc4 0b06 	rsb	fp, r4, r6
   e46ee:	fb02 0013 	mls	r0, r2, r3, r0
   e46f2:	4a28      	ldr	r2, [pc, #160]	; (e4794 <strftime+0x960>)
   e46f4:	9000      	str	r0, [sp, #0]
   e46f6:	4659      	mov	r1, fp
   e46f8:	4650      	mov	r0, sl
   e46fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e46fe:	fb98 f3f3 	sdiv	r3, r8, r3
   e4702:	f7f6 fa9b 	bl	dac3c <sniprintf>
   e4706:	e4fa      	b.n	e40fe <strftime+0x2ca>
   e4708:	4404      	add	r4, r0
   e470a:	42a6      	cmp	r6, r4
   e470c:	d831      	bhi.n	e4772 <strftime+0x93e>
   e470e:	e03b      	b.n	e4788 <strftime+0x954>
   e4710:	6a2b      	ldr	r3, [r5, #32]
   e4712:	2b00      	cmp	r3, #0
   e4714:	db2d      	blt.n	e4772 <strftime+0x93e>
   e4716:	f001 f873 	bl	e5800 <__tz_lock>
   e471a:	9b06      	ldr	r3, [sp, #24]
   e471c:	b91b      	cbnz	r3, e4726 <strftime+0x8f2>
   e471e:	f001 f871 	bl	e5804 <_tzset_unlocked>
   e4722:	2301      	movs	r3, #1
   e4724:	9306      	str	r3, [sp, #24]
   e4726:	6a2b      	ldr	r3, [r5, #32]
   e4728:	4a1b      	ldr	r2, [pc, #108]	; (e4798 <strftime+0x964>)
   e472a:	2b00      	cmp	r3, #0
   e472c:	bfd4      	ite	le
   e472e:	2300      	movle	r3, #0
   e4730:	2301      	movgt	r3, #1
   e4732:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e4736:	4640      	mov	r0, r8
   e4738:	f000 f830 	bl	e479c <strlen>
   e473c:	f108 38ff 	add.w	r8, r8, #4294967295
   e4740:	193b      	adds	r3, r7, r4
   e4742:	4420      	add	r0, r4
   e4744:	4284      	cmp	r4, r0
   e4746:	d00b      	beq.n	e4760 <strftime+0x92c>
   e4748:	9a02      	ldr	r2, [sp, #8]
   e474a:	4294      	cmp	r4, r2
   e474c:	d205      	bcs.n	e475a <strftime+0x926>
   e474e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e4752:	f803 2b01 	strb.w	r2, [r3], #1
   e4756:	3401      	adds	r4, #1
   e4758:	e7f4      	b.n	e4744 <strftime+0x910>
   e475a:	f001 f852 	bl	e5802 <__tz_unlock>
   e475e:	e013      	b.n	e4788 <strftime+0x954>
   e4760:	f001 f84f 	bl	e5802 <__tz_unlock>
   e4764:	e005      	b.n	e4772 <strftime+0x93e>
   e4766:	9b02      	ldr	r3, [sp, #8]
   e4768:	429c      	cmp	r4, r3
   e476a:	d20d      	bcs.n	e4788 <strftime+0x954>
   e476c:	2325      	movs	r3, #37	; 0x25
   e476e:	553b      	strb	r3, [r7, r4]
   e4770:	3401      	adds	r4, #1
   e4772:	f899 3000 	ldrb.w	r3, [r9]
   e4776:	b11b      	cbz	r3, e4780 <strftime+0x94c>
   e4778:	f109 0901 	add.w	r9, r9, #1
   e477c:	f7ff bb69 	b.w	e3e52 <strftime+0x1e>
   e4780:	b126      	cbz	r6, e478c <strftime+0x958>
   e4782:	2300      	movs	r3, #0
   e4784:	553b      	strb	r3, [r7, r4]
   e4786:	e001      	b.n	e478c <strftime+0x958>
   e4788:	2000      	movs	r0, #0
   e478a:	e000      	b.n	e478e <strftime+0x95a>
   e478c:	4620      	mov	r0, r4
   e478e:	b013      	add	sp, #76	; 0x4c
   e4790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4794:	000e8829 	.word	0x000e8829
   e4798:	2003d664 	.word	0x2003d664

000e479c <strlen>:
   e479c:	4603      	mov	r3, r0
   e479e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e47a2:	2a00      	cmp	r2, #0
   e47a4:	d1fb      	bne.n	e479e <strlen+0x2>
   e47a6:	1a18      	subs	r0, r3, r0
   e47a8:	3801      	subs	r0, #1
   e47aa:	4770      	bx	lr

000e47ac <strncmp>:
   e47ac:	b530      	push	{r4, r5, lr}
   e47ae:	b182      	cbz	r2, e47d2 <strncmp+0x26>
   e47b0:	1e45      	subs	r5, r0, #1
   e47b2:	3901      	subs	r1, #1
   e47b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e47b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e47bc:	42a3      	cmp	r3, r4
   e47be:	d106      	bne.n	e47ce <strncmp+0x22>
   e47c0:	43ec      	mvns	r4, r5
   e47c2:	4414      	add	r4, r2
   e47c4:	42e0      	cmn	r0, r4
   e47c6:	d001      	beq.n	e47cc <strncmp+0x20>
   e47c8:	2b00      	cmp	r3, #0
   e47ca:	d1f3      	bne.n	e47b4 <strncmp+0x8>
   e47cc:	461c      	mov	r4, r3
   e47ce:	1b18      	subs	r0, r3, r4
   e47d0:	bd30      	pop	{r4, r5, pc}
   e47d2:	4610      	mov	r0, r2
   e47d4:	bd30      	pop	{r4, r5, pc}

000e47d6 <strncpy>:
   e47d6:	b510      	push	{r4, lr}
   e47d8:	4603      	mov	r3, r0
   e47da:	b142      	cbz	r2, e47ee <strncpy+0x18>
   e47dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   e47e0:	f803 4b01 	strb.w	r4, [r3], #1
   e47e4:	3a01      	subs	r2, #1
   e47e6:	2c00      	cmp	r4, #0
   e47e8:	d1f7      	bne.n	e47da <strncpy+0x4>
   e47ea:	441a      	add	r2, r3
   e47ec:	e000      	b.n	e47f0 <strncpy+0x1a>
   e47ee:	bd10      	pop	{r4, pc}
   e47f0:	4293      	cmp	r3, r2
   e47f2:	d002      	beq.n	e47fa <strncpy+0x24>
   e47f4:	f803 4b01 	strb.w	r4, [r3], #1
   e47f8:	e7fa      	b.n	e47f0 <strncpy+0x1a>
   e47fa:	bd10      	pop	{r4, pc}

000e47fc <sulp>:
   e47fc:	b570      	push	{r4, r5, r6, lr}
   e47fe:	4604      	mov	r4, r0
   e4800:	460d      	mov	r5, r1
   e4802:	ec45 4b10 	vmov	d0, r4, r5
   e4806:	4616      	mov	r6, r2
   e4808:	f002 f862 	bl	e68d0 <__ulp>
   e480c:	ec51 0b10 	vmov	r0, r1, d0
   e4810:	b17e      	cbz	r6, e4832 <sulp+0x36>
   e4812:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e4816:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e481a:	2b00      	cmp	r3, #0
   e481c:	dd09      	ble.n	e4832 <sulp+0x36>
   e481e:	051b      	lsls	r3, r3, #20
   e4820:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e4824:	2400      	movs	r4, #0
   e4826:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e482a:	4622      	mov	r2, r4
   e482c:	462b      	mov	r3, r5
   e482e:	f7fe fb4f 	bl	e2ed0 <__aeabi_dmul>
   e4832:	bd70      	pop	{r4, r5, r6, pc}
   e4834:	0000      	movs	r0, r0
	...

000e4838 <_strtod_r>:
   e4838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e483c:	b09d      	sub	sp, #116	; 0x74
   e483e:	2300      	movs	r3, #0
   e4840:	9002      	str	r0, [sp, #8]
   e4842:	460c      	mov	r4, r1
   e4844:	9213      	str	r2, [sp, #76]	; 0x4c
   e4846:	9318      	str	r3, [sp, #96]	; 0x60
   e4848:	f04f 0a00 	mov.w	sl, #0
   e484c:	f04f 0b00 	mov.w	fp, #0
   e4850:	9117      	str	r1, [sp, #92]	; 0x5c
   e4852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4854:	781a      	ldrb	r2, [r3, #0]
   e4856:	2a0d      	cmp	r2, #13
   e4858:	d805      	bhi.n	e4866 <_strtod_r+0x2e>
   e485a:	2a09      	cmp	r2, #9
   e485c:	d213      	bcs.n	e4886 <_strtod_r+0x4e>
   e485e:	2a00      	cmp	r2, #0
   e4860:	f000 81ac 	beq.w	e4bbc <_strtod_r+0x384>
   e4864:	e012      	b.n	e488c <_strtod_r+0x54>
   e4866:	2a2b      	cmp	r2, #43	; 0x2b
   e4868:	d004      	beq.n	e4874 <_strtod_r+0x3c>
   e486a:	2a2d      	cmp	r2, #45	; 0x2d
   e486c:	d004      	beq.n	e4878 <_strtod_r+0x40>
   e486e:	2a20      	cmp	r2, #32
   e4870:	d10c      	bne.n	e488c <_strtod_r+0x54>
   e4872:	e008      	b.n	e4886 <_strtod_r+0x4e>
   e4874:	2200      	movs	r2, #0
   e4876:	e000      	b.n	e487a <_strtod_r+0x42>
   e4878:	2201      	movs	r2, #1
   e487a:	920c      	str	r2, [sp, #48]	; 0x30
   e487c:	1c5a      	adds	r2, r3, #1
   e487e:	9217      	str	r2, [sp, #92]	; 0x5c
   e4880:	785b      	ldrb	r3, [r3, #1]
   e4882:	b92b      	cbnz	r3, e4890 <_strtod_r+0x58>
   e4884:	e19a      	b.n	e4bbc <_strtod_r+0x384>
   e4886:	3301      	adds	r3, #1
   e4888:	9317      	str	r3, [sp, #92]	; 0x5c
   e488a:	e7e2      	b.n	e4852 <_strtod_r+0x1a>
   e488c:	2300      	movs	r3, #0
   e488e:	930c      	str	r3, [sp, #48]	; 0x30
   e4890:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e4892:	782b      	ldrb	r3, [r5, #0]
   e4894:	2b30      	cmp	r3, #48	; 0x30
   e4896:	d15c      	bne.n	e4952 <_strtod_r+0x11a>
   e4898:	786b      	ldrb	r3, [r5, #1]
   e489a:	2b58      	cmp	r3, #88	; 0x58
   e489c:	d001      	beq.n	e48a2 <_strtod_r+0x6a>
   e489e:	2b78      	cmp	r3, #120	; 0x78
   e48a0:	d14c      	bne.n	e493c <_strtod_r+0x104>
   e48a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e48a4:	9301      	str	r3, [sp, #4]
   e48a6:	ab18      	add	r3, sp, #96	; 0x60
   e48a8:	9300      	str	r3, [sp, #0]
   e48aa:	4aa9      	ldr	r2, [pc, #676]	; (e4b50 <_strtod_r+0x318>)
   e48ac:	9802      	ldr	r0, [sp, #8]
   e48ae:	ab19      	add	r3, sp, #100	; 0x64
   e48b0:	a917      	add	r1, sp, #92	; 0x5c
   e48b2:	f001 f990 	bl	e5bd6 <__gethex>
   e48b6:	f010 0607 	ands.w	r6, r0, #7
   e48ba:	4604      	mov	r4, r0
   e48bc:	f000 8587 	beq.w	e53ce <_strtod_r+0xb96>
   e48c0:	2e06      	cmp	r6, #6
   e48c2:	d105      	bne.n	e48d0 <_strtod_r+0x98>
   e48c4:	3501      	adds	r5, #1
   e48c6:	2300      	movs	r3, #0
   e48c8:	9517      	str	r5, [sp, #92]	; 0x5c
   e48ca:	930c      	str	r3, [sp, #48]	; 0x30
   e48cc:	f000 bd7f 	b.w	e53ce <_strtod_r+0xb96>
   e48d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e48d2:	b13a      	cbz	r2, e48e4 <_strtod_r+0xac>
   e48d4:	2135      	movs	r1, #53	; 0x35
   e48d6:	a81a      	add	r0, sp, #104	; 0x68
   e48d8:	f002 f8e7 	bl	e6aaa <__copybits>
   e48dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e48de:	9802      	ldr	r0, [sp, #8]
   e48e0:	f001 fd65 	bl	e63ae <_Bfree>
   e48e4:	2e06      	cmp	r6, #6
   e48e6:	d822      	bhi.n	e492e <_strtod_r+0xf6>
   e48e8:	e8df f006 	tbb	[pc, r6]
   e48ec:	18080d04 	.word	0x18080d04
   e48f0:	0d1d      	.short	0x0d1d
   e48f2:	04          	.byte	0x04
   e48f3:	00          	.byte	0x00
   e48f4:	f04f 0b00 	mov.w	fp, #0
   e48f8:	46da      	mov	sl, fp
   e48fa:	e018      	b.n	e492e <_strtod_r+0xf6>
   e48fc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e4900:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e4904:	e013      	b.n	e492e <_strtod_r+0xf6>
   e4906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e4908:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e490a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e490e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e4912:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e4916:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e491a:	e008      	b.n	e492e <_strtod_r+0xf6>
   e491c:	f8df b234 	ldr.w	fp, [pc, #564]	; e4b54 <_strtod_r+0x31c>
   e4920:	f04f 0a00 	mov.w	sl, #0
   e4924:	e003      	b.n	e492e <_strtod_r+0xf6>
   e4926:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e492a:	f04f 3aff 	mov.w	sl, #4294967295
   e492e:	0721      	lsls	r1, r4, #28
   e4930:	f140 854d 	bpl.w	e53ce <_strtod_r+0xb96>
   e4934:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e4938:	f000 bd49 	b.w	e53ce <_strtod_r+0xb96>
   e493c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e493e:	1c5a      	adds	r2, r3, #1
   e4940:	9217      	str	r2, [sp, #92]	; 0x5c
   e4942:	785b      	ldrb	r3, [r3, #1]
   e4944:	2b30      	cmp	r3, #48	; 0x30
   e4946:	d0f9      	beq.n	e493c <_strtod_r+0x104>
   e4948:	2b00      	cmp	r3, #0
   e494a:	f000 8540 	beq.w	e53ce <_strtod_r+0xb96>
   e494e:	2301      	movs	r3, #1
   e4950:	e000      	b.n	e4954 <_strtod_r+0x11c>
   e4952:	2300      	movs	r3, #0
   e4954:	f04f 0800 	mov.w	r8, #0
   e4958:	9306      	str	r3, [sp, #24]
   e495a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e495c:	9307      	str	r3, [sp, #28]
   e495e:	f8cd 8014 	str.w	r8, [sp, #20]
   e4962:	f8cd 8010 	str.w	r8, [sp, #16]
   e4966:	220a      	movs	r2, #10
   e4968:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e496a:	782e      	ldrb	r6, [r5, #0]
   e496c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e4970:	b2d9      	uxtb	r1, r3
   e4972:	2909      	cmp	r1, #9
   e4974:	d80e      	bhi.n	e4994 <_strtod_r+0x15c>
   e4976:	9904      	ldr	r1, [sp, #16]
   e4978:	2908      	cmp	r1, #8
   e497a:	bfdd      	ittte	le
   e497c:	9905      	ldrle	r1, [sp, #20]
   e497e:	fb02 3301 	mlale	r3, r2, r1, r3
   e4982:	9305      	strle	r3, [sp, #20]
   e4984:	fb02 3808 	mlagt	r8, r2, r8, r3
   e4988:	9b04      	ldr	r3, [sp, #16]
   e498a:	3501      	adds	r5, #1
   e498c:	3301      	adds	r3, #1
   e498e:	9304      	str	r3, [sp, #16]
   e4990:	9517      	str	r5, [sp, #92]	; 0x5c
   e4992:	e7e9      	b.n	e4968 <_strtod_r+0x130>
   e4994:	9802      	ldr	r0, [sp, #8]
   e4996:	f7fe ff31 	bl	e37fc <_localeconv_r>
   e499a:	6807      	ldr	r7, [r0, #0]
   e499c:	9802      	ldr	r0, [sp, #8]
   e499e:	f7fe ff2d 	bl	e37fc <_localeconv_r>
   e49a2:	6800      	ldr	r0, [r0, #0]
   e49a4:	f7ff fefa 	bl	e479c <strlen>
   e49a8:	4639      	mov	r1, r7
   e49aa:	4602      	mov	r2, r0
   e49ac:	4628      	mov	r0, r5
   e49ae:	f7ff fefd 	bl	e47ac <strncmp>
   e49b2:	4607      	mov	r7, r0
   e49b4:	b128      	cbz	r0, e49c2 <_strtod_r+0x18a>
   e49b6:	2000      	movs	r0, #0
   e49b8:	4633      	mov	r3, r6
   e49ba:	9d04      	ldr	r5, [sp, #16]
   e49bc:	4602      	mov	r2, r0
   e49be:	4601      	mov	r1, r0
   e49c0:	e057      	b.n	e4a72 <_strtod_r+0x23a>
   e49c2:	9802      	ldr	r0, [sp, #8]
   e49c4:	f7fe ff1a 	bl	e37fc <_localeconv_r>
   e49c8:	6800      	ldr	r0, [r0, #0]
   e49ca:	f7ff fee7 	bl	e479c <strlen>
   e49ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e49d0:	181a      	adds	r2, r3, r0
   e49d2:	9217      	str	r2, [sp, #92]	; 0x5c
   e49d4:	9a04      	ldr	r2, [sp, #16]
   e49d6:	5c1b      	ldrb	r3, [r3, r0]
   e49d8:	2a00      	cmp	r2, #0
   e49da:	d142      	bne.n	e4a62 <_strtod_r+0x22a>
   e49dc:	4610      	mov	r0, r2
   e49de:	2b30      	cmp	r3, #48	; 0x30
   e49e0:	d105      	bne.n	e49ee <_strtod_r+0x1b6>
   e49e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e49e4:	1c5a      	adds	r2, r3, #1
   e49e6:	9217      	str	r2, [sp, #92]	; 0x5c
   e49e8:	3001      	adds	r0, #1
   e49ea:	785b      	ldrb	r3, [r3, #1]
   e49ec:	e7f7      	b.n	e49de <_strtod_r+0x1a6>
   e49ee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e49f2:	2a08      	cmp	r2, #8
   e49f4:	d843      	bhi.n	e4a7e <_strtod_r+0x246>
   e49f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e49f8:	9207      	str	r2, [sp, #28]
   e49fa:	4602      	mov	r2, r0
   e49fc:	2000      	movs	r0, #0
   e49fe:	4605      	mov	r5, r0
   e4a00:	3b30      	subs	r3, #48	; 0x30
   e4a02:	f100 0101 	add.w	r1, r0, #1
   e4a06:	d026      	beq.n	e4a56 <_strtod_r+0x21e>
   e4a08:	440a      	add	r2, r1
   e4a0a:	eb05 0c00 	add.w	ip, r5, r0
   e4a0e:	4629      	mov	r1, r5
   e4a10:	260a      	movs	r6, #10
   e4a12:	4561      	cmp	r1, ip
   e4a14:	d00e      	beq.n	e4a34 <_strtod_r+0x1fc>
   e4a16:	3101      	adds	r1, #1
   e4a18:	f101 3eff 	add.w	lr, r1, #4294967295
   e4a1c:	f1be 0f08 	cmp.w	lr, #8
   e4a20:	dc03      	bgt.n	e4a2a <_strtod_r+0x1f2>
   e4a22:	9f05      	ldr	r7, [sp, #20]
   e4a24:	4377      	muls	r7, r6
   e4a26:	9705      	str	r7, [sp, #20]
   e4a28:	e7f3      	b.n	e4a12 <_strtod_r+0x1da>
   e4a2a:	2910      	cmp	r1, #16
   e4a2c:	bfd8      	it	le
   e4a2e:	fb06 f808 	mulle.w	r8, r6, r8
   e4a32:	e7ee      	b.n	e4a12 <_strtod_r+0x1da>
   e4a34:	4428      	add	r0, r5
   e4a36:	2808      	cmp	r0, #8
   e4a38:	f100 0501 	add.w	r5, r0, #1
   e4a3c:	dc05      	bgt.n	e4a4a <_strtod_r+0x212>
   e4a3e:	9805      	ldr	r0, [sp, #20]
   e4a40:	210a      	movs	r1, #10
   e4a42:	fb01 3300 	mla	r3, r1, r0, r3
   e4a46:	9305      	str	r3, [sp, #20]
   e4a48:	e004      	b.n	e4a54 <_strtod_r+0x21c>
   e4a4a:	2d10      	cmp	r5, #16
   e4a4c:	bfdc      	itt	le
   e4a4e:	210a      	movle	r1, #10
   e4a50:	fb01 3808 	mlale	r8, r1, r8, r3
   e4a54:	2100      	movs	r1, #0
   e4a56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4a58:	1c58      	adds	r0, r3, #1
   e4a5a:	9017      	str	r0, [sp, #92]	; 0x5c
   e4a5c:	785b      	ldrb	r3, [r3, #1]
   e4a5e:	4608      	mov	r0, r1
   e4a60:	e002      	b.n	e4a68 <_strtod_r+0x230>
   e4a62:	9d04      	ldr	r5, [sp, #16]
   e4a64:	4638      	mov	r0, r7
   e4a66:	463a      	mov	r2, r7
   e4a68:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e4a6c:	2909      	cmp	r1, #9
   e4a6e:	d9c7      	bls.n	e4a00 <_strtod_r+0x1c8>
   e4a70:	2101      	movs	r1, #1
   e4a72:	2b65      	cmp	r3, #101	; 0x65
   e4a74:	d001      	beq.n	e4a7a <_strtod_r+0x242>
   e4a76:	2b45      	cmp	r3, #69	; 0x45
   e4a78:	d151      	bne.n	e4b1e <_strtod_r+0x2e6>
   e4a7a:	b96d      	cbnz	r5, e4a98 <_strtod_r+0x260>
   e4a7c:	e004      	b.n	e4a88 <_strtod_r+0x250>
   e4a7e:	2b65      	cmp	r3, #101	; 0x65
   e4a80:	f040 84b3 	bne.w	e53ea <_strtod_r+0xbb2>
   e4a84:	2200      	movs	r2, #0
   e4a86:	2101      	movs	r1, #1
   e4a88:	b928      	cbnz	r0, e4a96 <_strtod_r+0x25e>
   e4a8a:	9b06      	ldr	r3, [sp, #24]
   e4a8c:	2b00      	cmp	r3, #0
   e4a8e:	f000 8095 	beq.w	e4bbc <_strtod_r+0x384>
   e4a92:	4605      	mov	r5, r0
   e4a94:	e000      	b.n	e4a98 <_strtod_r+0x260>
   e4a96:	2500      	movs	r5, #0
   e4a98:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e4a9a:	1c63      	adds	r3, r4, #1
   e4a9c:	9317      	str	r3, [sp, #92]	; 0x5c
   e4a9e:	7863      	ldrb	r3, [r4, #1]
   e4aa0:	2b2b      	cmp	r3, #43	; 0x2b
   e4aa2:	d006      	beq.n	e4ab2 <_strtod_r+0x27a>
   e4aa4:	2b2d      	cmp	r3, #45	; 0x2d
   e4aa6:	d002      	beq.n	e4aae <_strtod_r+0x276>
   e4aa8:	2600      	movs	r6, #0
   e4aaa:	9603      	str	r6, [sp, #12]
   e4aac:	e006      	b.n	e4abc <_strtod_r+0x284>
   e4aae:	2301      	movs	r3, #1
   e4ab0:	e000      	b.n	e4ab4 <_strtod_r+0x27c>
   e4ab2:	2300      	movs	r3, #0
   e4ab4:	9303      	str	r3, [sp, #12]
   e4ab6:	1ca3      	adds	r3, r4, #2
   e4ab8:	9317      	str	r3, [sp, #92]	; 0x5c
   e4aba:	78a3      	ldrb	r3, [r4, #2]
   e4abc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e4ac0:	2e09      	cmp	r6, #9
   e4ac2:	d82b      	bhi.n	e4b1c <_strtod_r+0x2e4>
   e4ac4:	2b30      	cmp	r3, #48	; 0x30
   e4ac6:	d104      	bne.n	e4ad2 <_strtod_r+0x29a>
   e4ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4aca:	1c5e      	adds	r6, r3, #1
   e4acc:	9617      	str	r6, [sp, #92]	; 0x5c
   e4ace:	785b      	ldrb	r3, [r3, #1]
   e4ad0:	e7f8      	b.n	e4ac4 <_strtod_r+0x28c>
   e4ad2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e4ad6:	2e08      	cmp	r6, #8
   e4ad8:	d821      	bhi.n	e4b1e <_strtod_r+0x2e6>
   e4ada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e4ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4ae0:	f04f 0c0a 	mov.w	ip, #10
   e4ae4:	461f      	mov	r7, r3
   e4ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4ae8:	1c5e      	adds	r6, r3, #1
   e4aea:	9617      	str	r6, [sp, #92]	; 0x5c
   e4aec:	785b      	ldrb	r3, [r3, #1]
   e4aee:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e4af2:	f1b9 0f09 	cmp.w	r9, #9
   e4af6:	d804      	bhi.n	e4b02 <_strtod_r+0x2ca>
   e4af8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e4afc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e4b00:	e7f1      	b.n	e4ae6 <_strtod_r+0x2ae>
   e4b02:	1bf6      	subs	r6, r6, r7
   e4b04:	2e08      	cmp	r6, #8
   e4b06:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e4b0a:	dc02      	bgt.n	e4b12 <_strtod_r+0x2da>
   e4b0c:	45f1      	cmp	r9, lr
   e4b0e:	bfa8      	it	ge
   e4b10:	46f1      	movge	r9, lr
   e4b12:	9e03      	ldr	r6, [sp, #12]
   e4b14:	b12e      	cbz	r6, e4b22 <_strtod_r+0x2ea>
   e4b16:	f1c9 0900 	rsb	r9, r9, #0
   e4b1a:	e002      	b.n	e4b22 <_strtod_r+0x2ea>
   e4b1c:	9417      	str	r4, [sp, #92]	; 0x5c
   e4b1e:	f04f 0900 	mov.w	r9, #0
   e4b22:	2d00      	cmp	r5, #0
   e4b24:	d153      	bne.n	e4bce <_strtod_r+0x396>
   e4b26:	2800      	cmp	r0, #0
   e4b28:	f040 8451 	bne.w	e53ce <_strtod_r+0xb96>
   e4b2c:	9a06      	ldr	r2, [sp, #24]
   e4b2e:	2a00      	cmp	r2, #0
   e4b30:	f040 844d 	bne.w	e53ce <_strtod_r+0xb96>
   e4b34:	2900      	cmp	r1, #0
   e4b36:	d141      	bne.n	e4bbc <_strtod_r+0x384>
   e4b38:	2b4e      	cmp	r3, #78	; 0x4e
   e4b3a:	d020      	beq.n	e4b7e <_strtod_r+0x346>
   e4b3c:	dc02      	bgt.n	e4b44 <_strtod_r+0x30c>
   e4b3e:	2b49      	cmp	r3, #73	; 0x49
   e4b40:	d00a      	beq.n	e4b58 <_strtod_r+0x320>
   e4b42:	e03b      	b.n	e4bbc <_strtod_r+0x384>
   e4b44:	2b69      	cmp	r3, #105	; 0x69
   e4b46:	d007      	beq.n	e4b58 <_strtod_r+0x320>
   e4b48:	2b6e      	cmp	r3, #110	; 0x6e
   e4b4a:	d018      	beq.n	e4b7e <_strtod_r+0x346>
   e4b4c:	e036      	b.n	e4bbc <_strtod_r+0x384>
   e4b4e:	bf00      	nop
   e4b50:	000e8838 	.word	0x000e8838
   e4b54:	7ff00000 	.word	0x7ff00000
   e4b58:	49a8      	ldr	r1, [pc, #672]	; (e4dfc <_strtod_r+0x5c4>)
   e4b5a:	a817      	add	r0, sp, #92	; 0x5c
   e4b5c:	f001 fa6c 	bl	e6038 <__match>
   e4b60:	b360      	cbz	r0, e4bbc <_strtod_r+0x384>
   e4b62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4b64:	49a6      	ldr	r1, [pc, #664]	; (e4e00 <_strtod_r+0x5c8>)
   e4b66:	3b01      	subs	r3, #1
   e4b68:	a817      	add	r0, sp, #92	; 0x5c
   e4b6a:	9317      	str	r3, [sp, #92]	; 0x5c
   e4b6c:	f001 fa64 	bl	e6038 <__match>
   e4b70:	b910      	cbnz	r0, e4b78 <_strtod_r+0x340>
   e4b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4b74:	3301      	adds	r3, #1
   e4b76:	9317      	str	r3, [sp, #92]	; 0x5c
   e4b78:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e4e1c <_strtod_r+0x5e4>
   e4b7c:	e01a      	b.n	e4bb4 <_strtod_r+0x37c>
   e4b7e:	49a1      	ldr	r1, [pc, #644]	; (e4e04 <_strtod_r+0x5cc>)
   e4b80:	a817      	add	r0, sp, #92	; 0x5c
   e4b82:	f001 fa59 	bl	e6038 <__match>
   e4b86:	b1c8      	cbz	r0, e4bbc <_strtod_r+0x384>
   e4b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4b8a:	781b      	ldrb	r3, [r3, #0]
   e4b8c:	2b28      	cmp	r3, #40	; 0x28
   e4b8e:	d10f      	bne.n	e4bb0 <_strtod_r+0x378>
   e4b90:	aa1a      	add	r2, sp, #104	; 0x68
   e4b92:	499d      	ldr	r1, [pc, #628]	; (e4e08 <_strtod_r+0x5d0>)
   e4b94:	a817      	add	r0, sp, #92	; 0x5c
   e4b96:	f001 fa62 	bl	e605e <__hexnan>
   e4b9a:	2805      	cmp	r0, #5
   e4b9c:	d108      	bne.n	e4bb0 <_strtod_r+0x378>
   e4b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e4ba0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e4ba4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e4ba8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e4bac:	f000 bc0f 	b.w	e53ce <_strtod_r+0xb96>
   e4bb0:	f8df b26c 	ldr.w	fp, [pc, #620]	; e4e20 <_strtod_r+0x5e8>
   e4bb4:	f04f 0a00 	mov.w	sl, #0
   e4bb8:	f000 bc09 	b.w	e53ce <_strtod_r+0xb96>
   e4bbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e4bbe:	9417      	str	r4, [sp, #92]	; 0x5c
   e4bc0:	2b00      	cmp	r3, #0
   e4bc2:	f000 840f 	beq.w	e53e4 <_strtod_r+0xbac>
   e4bc6:	2300      	movs	r3, #0
   e4bc8:	930c      	str	r3, [sp, #48]	; 0x30
   e4bca:	f000 bc02 	b.w	e53d2 <_strtod_r+0xb9a>
   e4bce:	9b04      	ldr	r3, [sp, #16]
   e4bd0:	9805      	ldr	r0, [sp, #20]
   e4bd2:	2b00      	cmp	r3, #0
   e4bd4:	bf08      	it	eq
   e4bd6:	462b      	moveq	r3, r5
   e4bd8:	2d10      	cmp	r5, #16
   e4bda:	462c      	mov	r4, r5
   e4bdc:	ebc2 0909 	rsb	r9, r2, r9
   e4be0:	bfa8      	it	ge
   e4be2:	2410      	movge	r4, #16
   e4be4:	9304      	str	r3, [sp, #16]
   e4be6:	f7fe f8fd 	bl	e2de4 <__aeabi_ui2d>
   e4bea:	2c09      	cmp	r4, #9
   e4bec:	4682      	mov	sl, r0
   e4bee:	468b      	mov	fp, r1
   e4bf0:	dd13      	ble.n	e4c1a <_strtod_r+0x3e2>
   e4bf2:	4b86      	ldr	r3, [pc, #536]	; (e4e0c <_strtod_r+0x5d4>)
   e4bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e4bf8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e4bfc:	f7fe f968 	bl	e2ed0 <__aeabi_dmul>
   e4c00:	4606      	mov	r6, r0
   e4c02:	4640      	mov	r0, r8
   e4c04:	460f      	mov	r7, r1
   e4c06:	f7fe f8ed 	bl	e2de4 <__aeabi_ui2d>
   e4c0a:	4602      	mov	r2, r0
   e4c0c:	460b      	mov	r3, r1
   e4c0e:	4630      	mov	r0, r6
   e4c10:	4639      	mov	r1, r7
   e4c12:	f7fd ffab 	bl	e2b6c <__adddf3>
   e4c16:	4682      	mov	sl, r0
   e4c18:	468b      	mov	fp, r1
   e4c1a:	2d0f      	cmp	r5, #15
   e4c1c:	dc36      	bgt.n	e4c8c <_strtod_r+0x454>
   e4c1e:	f1b9 0f00 	cmp.w	r9, #0
   e4c22:	f000 83d4 	beq.w	e53ce <_strtod_r+0xb96>
   e4c26:	dd24      	ble.n	e4c72 <_strtod_r+0x43a>
   e4c28:	f1b9 0f16 	cmp.w	r9, #22
   e4c2c:	dc07      	bgt.n	e4c3e <_strtod_r+0x406>
   e4c2e:	4d77      	ldr	r5, [pc, #476]	; (e4e0c <_strtod_r+0x5d4>)
   e4c30:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e4c34:	4652      	mov	r2, sl
   e4c36:	465b      	mov	r3, fp
   e4c38:	e9d9 0100 	ldrd	r0, r1, [r9]
   e4c3c:	e014      	b.n	e4c68 <_strtod_r+0x430>
   e4c3e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e4c42:	4599      	cmp	r9, r3
   e4c44:	dc22      	bgt.n	e4c8c <_strtod_r+0x454>
   e4c46:	4c71      	ldr	r4, [pc, #452]	; (e4e0c <_strtod_r+0x5d4>)
   e4c48:	f1c5 050f 	rsb	r5, r5, #15
   e4c4c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e4c50:	ebc5 0509 	rsb	r5, r5, r9
   e4c54:	4652      	mov	r2, sl
   e4c56:	465b      	mov	r3, fp
   e4c58:	e9d1 0100 	ldrd	r0, r1, [r1]
   e4c5c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e4c60:	f7fe f936 	bl	e2ed0 <__aeabi_dmul>
   e4c64:	e9d4 2300 	ldrd	r2, r3, [r4]
   e4c68:	f7fe f932 	bl	e2ed0 <__aeabi_dmul>
   e4c6c:	4682      	mov	sl, r0
   e4c6e:	468b      	mov	fp, r1
   e4c70:	e3ad      	b.n	e53ce <_strtod_r+0xb96>
   e4c72:	f119 0f16 	cmn.w	r9, #22
   e4c76:	db09      	blt.n	e4c8c <_strtod_r+0x454>
   e4c78:	4d64      	ldr	r5, [pc, #400]	; (e4e0c <_strtod_r+0x5d4>)
   e4c7a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e4c7e:	e9d9 2300 	ldrd	r2, r3, [r9]
   e4c82:	4650      	mov	r0, sl
   e4c84:	4659      	mov	r1, fp
   e4c86:	f7fe fa4d 	bl	e3124 <__aeabi_ddiv>
   e4c8a:	e7ef      	b.n	e4c6c <_strtod_r+0x434>
   e4c8c:	1b2c      	subs	r4, r5, r4
   e4c8e:	444c      	add	r4, r9
   e4c90:	2c00      	cmp	r4, #0
   e4c92:	dd57      	ble.n	e4d44 <_strtod_r+0x50c>
   e4c94:	f014 010f 	ands.w	r1, r4, #15
   e4c98:	d00a      	beq.n	e4cb0 <_strtod_r+0x478>
   e4c9a:	4b5c      	ldr	r3, [pc, #368]	; (e4e0c <_strtod_r+0x5d4>)
   e4c9c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e4ca0:	4652      	mov	r2, sl
   e4ca2:	465b      	mov	r3, fp
   e4ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
   e4ca8:	f7fe f912 	bl	e2ed0 <__aeabi_dmul>
   e4cac:	4682      	mov	sl, r0
   e4cae:	468b      	mov	fp, r1
   e4cb0:	f034 040f 	bics.w	r4, r4, #15
   e4cb4:	f000 80b8 	beq.w	e4e28 <_strtod_r+0x5f0>
   e4cb8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e4cbc:	dd0b      	ble.n	e4cd6 <_strtod_r+0x49e>
   e4cbe:	2400      	movs	r4, #0
   e4cc0:	4625      	mov	r5, r4
   e4cc2:	9405      	str	r4, [sp, #20]
   e4cc4:	9404      	str	r4, [sp, #16]
   e4cc6:	9a02      	ldr	r2, [sp, #8]
   e4cc8:	f8df b150 	ldr.w	fp, [pc, #336]	; e4e1c <_strtod_r+0x5e4>
   e4ccc:	2322      	movs	r3, #34	; 0x22
   e4cce:	6013      	str	r3, [r2, #0]
   e4cd0:	f04f 0a00 	mov.w	sl, #0
   e4cd4:	e187      	b.n	e4fe6 <_strtod_r+0x7ae>
   e4cd6:	4e4e      	ldr	r6, [pc, #312]	; (e4e10 <_strtod_r+0x5d8>)
   e4cd8:	2300      	movs	r3, #0
   e4cda:	1124      	asrs	r4, r4, #4
   e4cdc:	4650      	mov	r0, sl
   e4cde:	4659      	mov	r1, fp
   e4ce0:	4698      	mov	r8, r3
   e4ce2:	4637      	mov	r7, r6
   e4ce4:	2c01      	cmp	r4, #1
   e4ce6:	dd0b      	ble.n	e4d00 <_strtod_r+0x4c8>
   e4ce8:	07e2      	lsls	r2, r4, #31
   e4cea:	d504      	bpl.n	e4cf6 <_strtod_r+0x4be>
   e4cec:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4cf0:	f7fe f8ee 	bl	e2ed0 <__aeabi_dmul>
   e4cf4:	2301      	movs	r3, #1
   e4cf6:	f108 0801 	add.w	r8, r8, #1
   e4cfa:	1064      	asrs	r4, r4, #1
   e4cfc:	3608      	adds	r6, #8
   e4cfe:	e7f1      	b.n	e4ce4 <_strtod_r+0x4ac>
   e4d00:	b10b      	cbz	r3, e4d06 <_strtod_r+0x4ce>
   e4d02:	4682      	mov	sl, r0
   e4d04:	468b      	mov	fp, r1
   e4d06:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e4d0a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e4d0e:	4652      	mov	r2, sl
   e4d10:	465b      	mov	r3, fp
   e4d12:	e9d7 0100 	ldrd	r0, r1, [r7]
   e4d16:	f7fe f8db 	bl	e2ed0 <__aeabi_dmul>
   e4d1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e4d1e:	468b      	mov	fp, r1
   e4d20:	460a      	mov	r2, r1
   e4d22:	0d1b      	lsrs	r3, r3, #20
   e4d24:	493b      	ldr	r1, [pc, #236]	; (e4e14 <_strtod_r+0x5dc>)
   e4d26:	051b      	lsls	r3, r3, #20
   e4d28:	428b      	cmp	r3, r1
   e4d2a:	4682      	mov	sl, r0
   e4d2c:	d8c7      	bhi.n	e4cbe <_strtod_r+0x486>
   e4d2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e4d32:	428b      	cmp	r3, r1
   e4d34:	bf86      	itte	hi
   e4d36:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e4e24 <_strtod_r+0x5ec>
   e4d3a:	f04f 3aff 	movhi.w	sl, #4294967295
   e4d3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e4d42:	e071      	b.n	e4e28 <_strtod_r+0x5f0>
   e4d44:	d070      	beq.n	e4e28 <_strtod_r+0x5f0>
   e4d46:	4264      	negs	r4, r4
   e4d48:	f014 020f 	ands.w	r2, r4, #15
   e4d4c:	d00a      	beq.n	e4d64 <_strtod_r+0x52c>
   e4d4e:	4b2f      	ldr	r3, [pc, #188]	; (e4e0c <_strtod_r+0x5d4>)
   e4d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e4d54:	4650      	mov	r0, sl
   e4d56:	4659      	mov	r1, fp
   e4d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   e4d5c:	f7fe f9e2 	bl	e3124 <__aeabi_ddiv>
   e4d60:	4682      	mov	sl, r0
   e4d62:	468b      	mov	fp, r1
   e4d64:	1124      	asrs	r4, r4, #4
   e4d66:	d05f      	beq.n	e4e28 <_strtod_r+0x5f0>
   e4d68:	2c1f      	cmp	r4, #31
   e4d6a:	dd04      	ble.n	e4d76 <_strtod_r+0x53e>
   e4d6c:	2400      	movs	r4, #0
   e4d6e:	4625      	mov	r5, r4
   e4d70:	9405      	str	r4, [sp, #20]
   e4d72:	9404      	str	r4, [sp, #16]
   e4d74:	e130      	b.n	e4fd8 <_strtod_r+0x7a0>
   e4d76:	f014 0f10 	tst.w	r4, #16
   e4d7a:	bf0c      	ite	eq
   e4d7c:	2300      	moveq	r3, #0
   e4d7e:	236a      	movne	r3, #106	; 0x6a
   e4d80:	4e25      	ldr	r6, [pc, #148]	; (e4e18 <_strtod_r+0x5e0>)
   e4d82:	9303      	str	r3, [sp, #12]
   e4d84:	4650      	mov	r0, sl
   e4d86:	4659      	mov	r1, fp
   e4d88:	2300      	movs	r3, #0
   e4d8a:	2c00      	cmp	r4, #0
   e4d8c:	dd09      	ble.n	e4da2 <_strtod_r+0x56a>
   e4d8e:	07e2      	lsls	r2, r4, #31
   e4d90:	d504      	bpl.n	e4d9c <_strtod_r+0x564>
   e4d92:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4d96:	f7fe f89b 	bl	e2ed0 <__aeabi_dmul>
   e4d9a:	2301      	movs	r3, #1
   e4d9c:	1064      	asrs	r4, r4, #1
   e4d9e:	3608      	adds	r6, #8
   e4da0:	e7f3      	b.n	e4d8a <_strtod_r+0x552>
   e4da2:	b10b      	cbz	r3, e4da8 <_strtod_r+0x570>
   e4da4:	4682      	mov	sl, r0
   e4da6:	468b      	mov	fp, r1
   e4da8:	9b03      	ldr	r3, [sp, #12]
   e4daa:	b1eb      	cbz	r3, e4de8 <_strtod_r+0x5b0>
   e4dac:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e4db0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4db4:	2b00      	cmp	r3, #0
   e4db6:	4659      	mov	r1, fp
   e4db8:	dd16      	ble.n	e4de8 <_strtod_r+0x5b0>
   e4dba:	2b1f      	cmp	r3, #31
   e4dbc:	dd0e      	ble.n	e4ddc <_strtod_r+0x5a4>
   e4dbe:	2b34      	cmp	r3, #52	; 0x34
   e4dc0:	bfde      	ittt	le
   e4dc2:	3b20      	suble	r3, #32
   e4dc4:	f04f 32ff 	movle.w	r2, #4294967295
   e4dc8:	fa02 f303 	lslle.w	r3, r2, r3
   e4dcc:	f04f 0a00 	mov.w	sl, #0
   e4dd0:	bfcc      	ite	gt
   e4dd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e4dd6:	ea03 0b01 	andle.w	fp, r3, r1
   e4dda:	e005      	b.n	e4de8 <_strtod_r+0x5b0>
   e4ddc:	f04f 32ff 	mov.w	r2, #4294967295
   e4de0:	fa02 f303 	lsl.w	r3, r2, r3
   e4de4:	ea03 0a0a 	and.w	sl, r3, sl
   e4de8:	2200      	movs	r2, #0
   e4dea:	2300      	movs	r3, #0
   e4dec:	4650      	mov	r0, sl
   e4dee:	4659      	mov	r1, fp
   e4df0:	f7fe fad6 	bl	e33a0 <__aeabi_dcmpeq>
   e4df4:	2800      	cmp	r0, #0
   e4df6:	d1b9      	bne.n	e4d6c <_strtod_r+0x534>
   e4df8:	e018      	b.n	e4e2c <_strtod_r+0x5f4>
   e4dfa:	bf00      	nop
   e4dfc:	000e7fb9 	.word	0x000e7fb9
   e4e00:	000e8860 	.word	0x000e8860
   e4e04:	000e8899 	.word	0x000e8899
   e4e08:	000e884c 	.word	0x000e884c
   e4e0c:	000e8af8 	.word	0x000e8af8
   e4e10:	000e8bc0 	.word	0x000e8bc0
   e4e14:	7ca00000 	.word	0x7ca00000
   e4e18:	000e8868 	.word	0x000e8868
   e4e1c:	7ff00000 	.word	0x7ff00000
   e4e20:	fff80000 	.word	0xfff80000
   e4e24:	7fefffff 	.word	0x7fefffff
   e4e28:	2300      	movs	r3, #0
   e4e2a:	9303      	str	r3, [sp, #12]
   e4e2c:	9b05      	ldr	r3, [sp, #20]
   e4e2e:	9300      	str	r3, [sp, #0]
   e4e30:	9a04      	ldr	r2, [sp, #16]
   e4e32:	9907      	ldr	r1, [sp, #28]
   e4e34:	9802      	ldr	r0, [sp, #8]
   e4e36:	462b      	mov	r3, r5
   e4e38:	f001 fb0b 	bl	e6452 <__s2b>
   e4e3c:	9005      	str	r0, [sp, #20]
   e4e3e:	2800      	cmp	r0, #0
   e4e40:	f43f af3d 	beq.w	e4cbe <_strtod_r+0x486>
   e4e44:	f1b9 0f00 	cmp.w	r9, #0
   e4e48:	f1c9 0300 	rsb	r3, r9, #0
   e4e4c:	bfa8      	it	ge
   e4e4e:	2300      	movge	r3, #0
   e4e50:	930d      	str	r3, [sp, #52]	; 0x34
   e4e52:	2400      	movs	r4, #0
   e4e54:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e4e58:	9312      	str	r3, [sp, #72]	; 0x48
   e4e5a:	4625      	mov	r5, r4
   e4e5c:	9b05      	ldr	r3, [sp, #20]
   e4e5e:	9802      	ldr	r0, [sp, #8]
   e4e60:	6859      	ldr	r1, [r3, #4]
   e4e62:	f001 fa6f 	bl	e6344 <_Balloc>
   e4e66:	9004      	str	r0, [sp, #16]
   e4e68:	2800      	cmp	r0, #0
   e4e6a:	f43f af2c 	beq.w	e4cc6 <_strtod_r+0x48e>
   e4e6e:	9b05      	ldr	r3, [sp, #20]
   e4e70:	691a      	ldr	r2, [r3, #16]
   e4e72:	3202      	adds	r2, #2
   e4e74:	f103 010c 	add.w	r1, r3, #12
   e4e78:	0092      	lsls	r2, r2, #2
   e4e7a:	300c      	adds	r0, #12
   e4e7c:	f7fe fcc2 	bl	e3804 <memcpy>
   e4e80:	aa1a      	add	r2, sp, #104	; 0x68
   e4e82:	a919      	add	r1, sp, #100	; 0x64
   e4e84:	ec4b ab10 	vmov	d0, sl, fp
   e4e88:	9802      	ldr	r0, [sp, #8]
   e4e8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e4e8e:	f001 fd94 	bl	e69ba <__d2b>
   e4e92:	9018      	str	r0, [sp, #96]	; 0x60
   e4e94:	2800      	cmp	r0, #0
   e4e96:	f43f af16 	beq.w	e4cc6 <_strtod_r+0x48e>
   e4e9a:	2101      	movs	r1, #1
   e4e9c:	9802      	ldr	r0, [sp, #8]
   e4e9e:	f001 fb63 	bl	e6568 <__i2b>
   e4ea2:	4605      	mov	r5, r0
   e4ea4:	2800      	cmp	r0, #0
   e4ea6:	f43f af0e 	beq.w	e4cc6 <_strtod_r+0x48e>
   e4eaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e4eac:	9903      	ldr	r1, [sp, #12]
   e4eae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e4eb0:	2b00      	cmp	r3, #0
   e4eb2:	bfad      	iteet	ge
   e4eb4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e4eb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e4eb8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e4ebc:	eb02 0803 	addge.w	r8, r2, r3
   e4ec0:	bfb8      	it	lt
   e4ec2:	1ad2      	sublt	r2, r2, r3
   e4ec4:	eba3 0301 	sub.w	r3, r3, r1
   e4ec8:	4433      	add	r3, r6
   e4eca:	49b5      	ldr	r1, [pc, #724]	; (e51a0 <_strtod_r+0x968>)
   e4ecc:	bfa8      	it	ge
   e4ece:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e4ed0:	3b01      	subs	r3, #1
   e4ed2:	428b      	cmp	r3, r1
   e4ed4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e4ed8:	f280 808a 	bge.w	e4ff0 <_strtod_r+0x7b8>
   e4edc:	1ac9      	subs	r1, r1, r3
   e4ede:	291f      	cmp	r1, #31
   e4ee0:	bfc8      	it	gt
   e4ee2:	4fb0      	ldrgt	r7, [pc, #704]	; (e51a4 <_strtod_r+0x96c>)
   e4ee4:	f04f 0901 	mov.w	r9, #1
   e4ee8:	bfd4      	ite	le
   e4eea:	fa09 f301 	lslle.w	r3, r9, r1
   e4eee:	1aff      	subgt	r7, r7, r3
   e4ef0:	eba6 0601 	sub.w	r6, r6, r1
   e4ef4:	bfd9      	ittee	le
   e4ef6:	9306      	strle	r3, [sp, #24]
   e4ef8:	2700      	movle	r7, #0
   e4efa:	fa09 f707 	lslgt.w	r7, r9, r7
   e4efe:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e4f02:	eb08 0906 	add.w	r9, r8, r6
   e4f06:	9b03      	ldr	r3, [sp, #12]
   e4f08:	45c8      	cmp	r8, r9
   e4f0a:	4416      	add	r6, r2
   e4f0c:	441e      	add	r6, r3
   e4f0e:	4643      	mov	r3, r8
   e4f10:	bfa8      	it	ge
   e4f12:	464b      	movge	r3, r9
   e4f14:	42b3      	cmp	r3, r6
   e4f16:	bfa8      	it	ge
   e4f18:	4633      	movge	r3, r6
   e4f1a:	2b00      	cmp	r3, #0
   e4f1c:	bfc2      	ittt	gt
   e4f1e:	ebc3 0909 	rsbgt	r9, r3, r9
   e4f22:	1af6      	subgt	r6, r6, r3
   e4f24:	ebc3 0808 	rsbgt	r8, r3, r8
   e4f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e4f2a:	2b00      	cmp	r3, #0
   e4f2c:	d164      	bne.n	e4ff8 <_strtod_r+0x7c0>
   e4f2e:	f1b9 0f00 	cmp.w	r9, #0
   e4f32:	dc7a      	bgt.n	e502a <_strtod_r+0x7f2>
   e4f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e4f36:	2b00      	cmp	r3, #0
   e4f38:	f040 8081 	bne.w	e503e <_strtod_r+0x806>
   e4f3c:	2e00      	cmp	r6, #0
   e4f3e:	f300 8088 	bgt.w	e5052 <_strtod_r+0x81a>
   e4f42:	f1b8 0f00 	cmp.w	r8, #0
   e4f46:	f300 808e 	bgt.w	e5066 <_strtod_r+0x82e>
   e4f4a:	9a04      	ldr	r2, [sp, #16]
   e4f4c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4f4e:	9802      	ldr	r0, [sp, #8]
   e4f50:	f001 fc5f 	bl	e6812 <__mdiff>
   e4f54:	4604      	mov	r4, r0
   e4f56:	2800      	cmp	r0, #0
   e4f58:	f43f aeb5 	beq.w	e4cc6 <_strtod_r+0x48e>
   e4f5c:	68c3      	ldr	r3, [r0, #12]
   e4f5e:	9307      	str	r3, [sp, #28]
   e4f60:	2300      	movs	r3, #0
   e4f62:	60c3      	str	r3, [r0, #12]
   e4f64:	4629      	mov	r1, r5
   e4f66:	f001 fc38 	bl	e67da <__mcmp>
   e4f6a:	2800      	cmp	r0, #0
   e4f6c:	f280 8089 	bge.w	e5082 <_strtod_r+0x84a>
   e4f70:	9b07      	ldr	r3, [sp, #28]
   e4f72:	2b00      	cmp	r3, #0
   e4f74:	f040 8204 	bne.w	e5380 <_strtod_r+0xb48>
   e4f78:	f1ba 0f00 	cmp.w	sl, #0
   e4f7c:	f040 8200 	bne.w	e5380 <_strtod_r+0xb48>
   e4f80:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4f84:	2b00      	cmp	r3, #0
   e4f86:	f040 81fb 	bne.w	e5380 <_strtod_r+0xb48>
   e4f8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4f8e:	0d1b      	lsrs	r3, r3, #20
   e4f90:	051b      	lsls	r3, r3, #20
   e4f92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4f96:	f240 81f3 	bls.w	e5380 <_strtod_r+0xb48>
   e4f9a:	6963      	ldr	r3, [r4, #20]
   e4f9c:	2b00      	cmp	r3, #0
   e4f9e:	d06c      	beq.n	e507a <_strtod_r+0x842>
   e4fa0:	4621      	mov	r1, r4
   e4fa2:	2201      	movs	r2, #1
   e4fa4:	9802      	ldr	r0, [sp, #8]
   e4fa6:	f001 fbc7 	bl	e6738 <__lshift>
   e4faa:	4629      	mov	r1, r5
   e4fac:	4604      	mov	r4, r0
   e4fae:	f001 fc14 	bl	e67da <__mcmp>
   e4fb2:	2800      	cmp	r0, #0
   e4fb4:	f340 81e4 	ble.w	e5380 <_strtod_r+0xb48>
   e4fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4fbc:	9a03      	ldr	r2, [sp, #12]
   e4fbe:	0d1b      	lsrs	r3, r3, #20
   e4fc0:	051b      	lsls	r3, r3, #20
   e4fc2:	2a00      	cmp	r2, #0
   e4fc4:	f000 808c 	beq.w	e50e0 <_strtod_r+0x8a8>
   e4fc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4fcc:	f300 8088 	bgt.w	e50e0 <_strtod_r+0x8a8>
   e4fd0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e4fd4:	f300 81d6 	bgt.w	e5384 <_strtod_r+0xb4c>
   e4fd8:	9a02      	ldr	r2, [sp, #8]
   e4fda:	2322      	movs	r3, #34	; 0x22
   e4fdc:	f04f 0a00 	mov.w	sl, #0
   e4fe0:	f04f 0b00 	mov.w	fp, #0
   e4fe4:	6013      	str	r3, [r2, #0]
   e4fe6:	9b05      	ldr	r3, [sp, #20]
   e4fe8:	2b00      	cmp	r3, #0
   e4fea:	f040 81dc 	bne.w	e53a6 <_strtod_r+0xb6e>
   e4fee:	e1ee      	b.n	e53ce <_strtod_r+0xb96>
   e4ff0:	2301      	movs	r3, #1
   e4ff2:	2700      	movs	r7, #0
   e4ff4:	9306      	str	r3, [sp, #24]
   e4ff6:	e784      	b.n	e4f02 <_strtod_r+0x6ca>
   e4ff8:	4629      	mov	r1, r5
   e4ffa:	461a      	mov	r2, r3
   e4ffc:	9802      	ldr	r0, [sp, #8]
   e4ffe:	f001 fb4d 	bl	e669c <__pow5mult>
   e5002:	4605      	mov	r5, r0
   e5004:	2800      	cmp	r0, #0
   e5006:	f43f ae5e 	beq.w	e4cc6 <_strtod_r+0x48e>
   e500a:	4601      	mov	r1, r0
   e500c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e500e:	9802      	ldr	r0, [sp, #8]
   e5010:	f001 fab3 	bl	e657a <__multiply>
   e5014:	9007      	str	r0, [sp, #28]
   e5016:	2800      	cmp	r0, #0
   e5018:	f43f ae55 	beq.w	e4cc6 <_strtod_r+0x48e>
   e501c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e501e:	9802      	ldr	r0, [sp, #8]
   e5020:	f001 f9c5 	bl	e63ae <_Bfree>
   e5024:	9b07      	ldr	r3, [sp, #28]
   e5026:	9318      	str	r3, [sp, #96]	; 0x60
   e5028:	e781      	b.n	e4f2e <_strtod_r+0x6f6>
   e502a:	464a      	mov	r2, r9
   e502c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e502e:	9802      	ldr	r0, [sp, #8]
   e5030:	f001 fb82 	bl	e6738 <__lshift>
   e5034:	9018      	str	r0, [sp, #96]	; 0x60
   e5036:	2800      	cmp	r0, #0
   e5038:	f47f af7c 	bne.w	e4f34 <_strtod_r+0x6fc>
   e503c:	e643      	b.n	e4cc6 <_strtod_r+0x48e>
   e503e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e5040:	9904      	ldr	r1, [sp, #16]
   e5042:	9802      	ldr	r0, [sp, #8]
   e5044:	f001 fb2a 	bl	e669c <__pow5mult>
   e5048:	9004      	str	r0, [sp, #16]
   e504a:	2800      	cmp	r0, #0
   e504c:	f47f af76 	bne.w	e4f3c <_strtod_r+0x704>
   e5050:	e639      	b.n	e4cc6 <_strtod_r+0x48e>
   e5052:	4632      	mov	r2, r6
   e5054:	9904      	ldr	r1, [sp, #16]
   e5056:	9802      	ldr	r0, [sp, #8]
   e5058:	f001 fb6e 	bl	e6738 <__lshift>
   e505c:	9004      	str	r0, [sp, #16]
   e505e:	2800      	cmp	r0, #0
   e5060:	f47f af6f 	bne.w	e4f42 <_strtod_r+0x70a>
   e5064:	e62f      	b.n	e4cc6 <_strtod_r+0x48e>
   e5066:	4629      	mov	r1, r5
   e5068:	4642      	mov	r2, r8
   e506a:	9802      	ldr	r0, [sp, #8]
   e506c:	f001 fb64 	bl	e6738 <__lshift>
   e5070:	4605      	mov	r5, r0
   e5072:	2800      	cmp	r0, #0
   e5074:	f47f af69 	bne.w	e4f4a <_strtod_r+0x712>
   e5078:	e625      	b.n	e4cc6 <_strtod_r+0x48e>
   e507a:	6923      	ldr	r3, [r4, #16]
   e507c:	2b01      	cmp	r3, #1
   e507e:	dc8f      	bgt.n	e4fa0 <_strtod_r+0x768>
   e5080:	e17e      	b.n	e5380 <_strtod_r+0xb48>
   e5082:	d161      	bne.n	e5148 <_strtod_r+0x910>
   e5084:	9a07      	ldr	r2, [sp, #28]
   e5086:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e508a:	b322      	cbz	r2, e50d6 <_strtod_r+0x89e>
   e508c:	4946      	ldr	r1, [pc, #280]	; (e51a8 <_strtod_r+0x970>)
   e508e:	428b      	cmp	r3, r1
   e5090:	465a      	mov	r2, fp
   e5092:	d12e      	bne.n	e50f2 <_strtod_r+0x8ba>
   e5094:	9b03      	ldr	r3, [sp, #12]
   e5096:	4651      	mov	r1, sl
   e5098:	b163      	cbz	r3, e50b4 <_strtod_r+0x87c>
   e509a:	4b44      	ldr	r3, [pc, #272]	; (e51ac <_strtod_r+0x974>)
   e509c:	4013      	ands	r3, r2
   e509e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e50a2:	d807      	bhi.n	e50b4 <_strtod_r+0x87c>
   e50a4:	0d1b      	lsrs	r3, r3, #20
   e50a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e50aa:	f04f 30ff 	mov.w	r0, #4294967295
   e50ae:	fa00 f303 	lsl.w	r3, r0, r3
   e50b2:	e001      	b.n	e50b8 <_strtod_r+0x880>
   e50b4:	f04f 33ff 	mov.w	r3, #4294967295
   e50b8:	428b      	cmp	r3, r1
   e50ba:	d11a      	bne.n	e50f2 <_strtod_r+0x8ba>
   e50bc:	493c      	ldr	r1, [pc, #240]	; (e51b0 <_strtod_r+0x978>)
   e50be:	428a      	cmp	r2, r1
   e50c0:	d102      	bne.n	e50c8 <_strtod_r+0x890>
   e50c2:	3301      	adds	r3, #1
   e50c4:	f43f adff 	beq.w	e4cc6 <_strtod_r+0x48e>
   e50c8:	4b38      	ldr	r3, [pc, #224]	; (e51ac <_strtod_r+0x974>)
   e50ca:	4013      	ands	r3, r2
   e50cc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e50d0:	f04f 0a00 	mov.w	sl, #0
   e50d4:	e154      	b.n	e5380 <_strtod_r+0xb48>
   e50d6:	b963      	cbnz	r3, e50f2 <_strtod_r+0x8ba>
   e50d8:	f1ba 0f00 	cmp.w	sl, #0
   e50dc:	d109      	bne.n	e50f2 <_strtod_r+0x8ba>
   e50de:	e76b      	b.n	e4fb8 <_strtod_r+0x780>
   e50e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e50e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e50e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e50ec:	f04f 3aff 	mov.w	sl, #4294967295
   e50f0:	e146      	b.n	e5380 <_strtod_r+0xb48>
   e50f2:	b117      	cbz	r7, e50fa <_strtod_r+0x8c2>
   e50f4:	ea17 0f0b 	tst.w	r7, fp
   e50f8:	e002      	b.n	e5100 <_strtod_r+0x8c8>
   e50fa:	9b06      	ldr	r3, [sp, #24]
   e50fc:	ea13 0f0a 	tst.w	r3, sl
   e5100:	f000 813e 	beq.w	e5380 <_strtod_r+0xb48>
   e5104:	9b07      	ldr	r3, [sp, #28]
   e5106:	9a03      	ldr	r2, [sp, #12]
   e5108:	4650      	mov	r0, sl
   e510a:	4659      	mov	r1, fp
   e510c:	b153      	cbz	r3, e5124 <_strtod_r+0x8ec>
   e510e:	f7ff fb75 	bl	e47fc <sulp>
   e5112:	4602      	mov	r2, r0
   e5114:	460b      	mov	r3, r1
   e5116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e511a:	f7fd fd27 	bl	e2b6c <__adddf3>
   e511e:	4682      	mov	sl, r0
   e5120:	468b      	mov	fp, r1
   e5122:	e12d      	b.n	e5380 <_strtod_r+0xb48>
   e5124:	f7ff fb6a 	bl	e47fc <sulp>
   e5128:	4602      	mov	r2, r0
   e512a:	460b      	mov	r3, r1
   e512c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e5130:	f7fd fd1a 	bl	e2b68 <__aeabi_dsub>
   e5134:	2200      	movs	r2, #0
   e5136:	2300      	movs	r3, #0
   e5138:	4682      	mov	sl, r0
   e513a:	468b      	mov	fp, r1
   e513c:	f7fe f930 	bl	e33a0 <__aeabi_dcmpeq>
   e5140:	2800      	cmp	r0, #0
   e5142:	f47f af49 	bne.w	e4fd8 <_strtod_r+0x7a0>
   e5146:	e11b      	b.n	e5380 <_strtod_r+0xb48>
   e5148:	4629      	mov	r1, r5
   e514a:	4620      	mov	r0, r4
   e514c:	f001 fc83 	bl	e6a56 <__ratio>
   e5150:	ec57 6b10 	vmov	r6, r7, d0
   e5154:	2200      	movs	r2, #0
   e5156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e515a:	ee10 0a10 	vmov	r0, s0
   e515e:	4639      	mov	r1, r7
   e5160:	f7fe f932 	bl	e33c8 <__aeabi_dcmple>
   e5164:	2800      	cmp	r0, #0
   e5166:	d042      	beq.n	e51ee <_strtod_r+0x9b6>
   e5168:	9b07      	ldr	r3, [sp, #28]
   e516a:	b123      	cbz	r3, e5176 <_strtod_r+0x93e>
   e516c:	f04f 0800 	mov.w	r8, #0
   e5170:	f8df 9040 	ldr.w	r9, [pc, #64]	; e51b4 <_strtod_r+0x97c>
   e5174:	e011      	b.n	e519a <_strtod_r+0x962>
   e5176:	f1ba 0f00 	cmp.w	sl, #0
   e517a:	d103      	bne.n	e5184 <_strtod_r+0x94c>
   e517c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e5180:	b93b      	cbnz	r3, e5192 <_strtod_r+0x95a>
   e5182:	e01b      	b.n	e51bc <_strtod_r+0x984>
   e5184:	f1ba 0f01 	cmp.w	sl, #1
   e5188:	d103      	bne.n	e5192 <_strtod_r+0x95a>
   e518a:	f1bb 0f00 	cmp.w	fp, #0
   e518e:	f43f af23 	beq.w	e4fd8 <_strtod_r+0x7a0>
   e5192:	f8df 9024 	ldr.w	r9, [pc, #36]	; e51b8 <_strtod_r+0x980>
   e5196:	f04f 0800 	mov.w	r8, #0
   e519a:	2600      	movs	r6, #0
   e519c:	4f05      	ldr	r7, [pc, #20]	; (e51b4 <_strtod_r+0x97c>)
   e519e:	e039      	b.n	e5214 <_strtod_r+0x9dc>
   e51a0:	fffffc02 	.word	0xfffffc02
   e51a4:	fffffbe2 	.word	0xfffffbe2
   e51a8:	000fffff 	.word	0x000fffff
   e51ac:	7ff00000 	.word	0x7ff00000
   e51b0:	7fefffff 	.word	0x7fefffff
   e51b4:	3ff00000 	.word	0x3ff00000
   e51b8:	bff00000 	.word	0xbff00000
   e51bc:	2200      	movs	r2, #0
   e51be:	4b98      	ldr	r3, [pc, #608]	; (e5420 <_strtod_r+0xbe8>)
   e51c0:	4630      	mov	r0, r6
   e51c2:	4639      	mov	r1, r7
   e51c4:	f7fe f8f6 	bl	e33b4 <__aeabi_dcmplt>
   e51c8:	b940      	cbnz	r0, e51dc <_strtod_r+0x9a4>
   e51ca:	4630      	mov	r0, r6
   e51cc:	4639      	mov	r1, r7
   e51ce:	2200      	movs	r2, #0
   e51d0:	4b94      	ldr	r3, [pc, #592]	; (e5424 <_strtod_r+0xbec>)
   e51d2:	f7fd fe7d 	bl	e2ed0 <__aeabi_dmul>
   e51d6:	4606      	mov	r6, r0
   e51d8:	460f      	mov	r7, r1
   e51da:	e001      	b.n	e51e0 <_strtod_r+0x9a8>
   e51dc:	4f91      	ldr	r7, [pc, #580]	; (e5424 <_strtod_r+0xbec>)
   e51de:	2600      	movs	r6, #0
   e51e0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e51e4:	9614      	str	r6, [sp, #80]	; 0x50
   e51e6:	9315      	str	r3, [sp, #84]	; 0x54
   e51e8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e51ec:	e012      	b.n	e5214 <_strtod_r+0x9dc>
   e51ee:	4b8d      	ldr	r3, [pc, #564]	; (e5424 <_strtod_r+0xbec>)
   e51f0:	4630      	mov	r0, r6
   e51f2:	4639      	mov	r1, r7
   e51f4:	2200      	movs	r2, #0
   e51f6:	f7fd fe6b 	bl	e2ed0 <__aeabi_dmul>
   e51fa:	9b07      	ldr	r3, [sp, #28]
   e51fc:	4606      	mov	r6, r0
   e51fe:	460f      	mov	r7, r1
   e5200:	b923      	cbnz	r3, e520c <_strtod_r+0x9d4>
   e5202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e5206:	900e      	str	r0, [sp, #56]	; 0x38
   e5208:	930f      	str	r3, [sp, #60]	; 0x3c
   e520a:	e001      	b.n	e5210 <_strtod_r+0x9d8>
   e520c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e5210:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e5214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e5218:	0d1b      	lsrs	r3, r3, #20
   e521a:	051b      	lsls	r3, r3, #20
   e521c:	9306      	str	r3, [sp, #24]
   e521e:	9a06      	ldr	r2, [sp, #24]
   e5220:	4b81      	ldr	r3, [pc, #516]	; (e5428 <_strtod_r+0xbf0>)
   e5222:	429a      	cmp	r2, r3
   e5224:	d12b      	bne.n	e527e <_strtod_r+0xa46>
   e5226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e522a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e522e:	ec4b ab10 	vmov	d0, sl, fp
   e5232:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e5236:	f001 fb4b 	bl	e68d0 <__ulp>
   e523a:	4640      	mov	r0, r8
   e523c:	ec53 2b10 	vmov	r2, r3, d0
   e5240:	4649      	mov	r1, r9
   e5242:	f7fd fe45 	bl	e2ed0 <__aeabi_dmul>
   e5246:	4652      	mov	r2, sl
   e5248:	465b      	mov	r3, fp
   e524a:	f7fd fc8f 	bl	e2b6c <__adddf3>
   e524e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e5252:	0d1b      	lsrs	r3, r3, #20
   e5254:	4a75      	ldr	r2, [pc, #468]	; (e542c <_strtod_r+0xbf4>)
   e5256:	051b      	lsls	r3, r3, #20
   e5258:	4293      	cmp	r3, r2
   e525a:	4682      	mov	sl, r0
   e525c:	d90c      	bls.n	e5278 <_strtod_r+0xa40>
   e525e:	4b74      	ldr	r3, [pc, #464]	; (e5430 <_strtod_r+0xbf8>)
   e5260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e5262:	429a      	cmp	r2, r3
   e5264:	d103      	bne.n	e526e <_strtod_r+0xa36>
   e5266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5268:	3301      	adds	r3, #1
   e526a:	f43f ad2c 	beq.w	e4cc6 <_strtod_r+0x48e>
   e526e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e5430 <_strtod_r+0xbf8>
   e5272:	f04f 3aff 	mov.w	sl, #4294967295
   e5276:	e072      	b.n	e535e <_strtod_r+0xb26>
   e5278:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e527c:	e038      	b.n	e52f0 <_strtod_r+0xab8>
   e527e:	9b03      	ldr	r3, [sp, #12]
   e5280:	b333      	cbz	r3, e52d0 <_strtod_r+0xa98>
   e5282:	9b06      	ldr	r3, [sp, #24]
   e5284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e5288:	d822      	bhi.n	e52d0 <_strtod_r+0xa98>
   e528a:	a35d      	add	r3, pc, #372	; (adr r3, e5400 <_strtod_r+0xbc8>)
   e528c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5290:	4630      	mov	r0, r6
   e5292:	4639      	mov	r1, r7
   e5294:	f7fe f898 	bl	e33c8 <__aeabi_dcmple>
   e5298:	b1a8      	cbz	r0, e52c6 <_strtod_r+0xa8e>
   e529a:	4639      	mov	r1, r7
   e529c:	4630      	mov	r0, r6
   e529e:	f7fe f8ef 	bl	e3480 <__aeabi_d2uiz>
   e52a2:	2800      	cmp	r0, #0
   e52a4:	bf08      	it	eq
   e52a6:	2001      	moveq	r0, #1
   e52a8:	f7fd fd9c 	bl	e2de4 <__aeabi_ui2d>
   e52ac:	9b07      	ldr	r3, [sp, #28]
   e52ae:	4606      	mov	r6, r0
   e52b0:	460f      	mov	r7, r1
   e52b2:	b923      	cbnz	r3, e52be <_strtod_r+0xa86>
   e52b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e52b8:	9010      	str	r0, [sp, #64]	; 0x40
   e52ba:	9311      	str	r3, [sp, #68]	; 0x44
   e52bc:	e001      	b.n	e52c2 <_strtod_r+0xa8a>
   e52be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e52c2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e52c6:	9a06      	ldr	r2, [sp, #24]
   e52c8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e52cc:	ebc2 0903 	rsb	r9, r2, r3
   e52d0:	ed9d 0b08 	vldr	d0, [sp, #32]
   e52d4:	f001 fafc 	bl	e68d0 <__ulp>
   e52d8:	4640      	mov	r0, r8
   e52da:	ec53 2b10 	vmov	r2, r3, d0
   e52de:	4649      	mov	r1, r9
   e52e0:	f7fd fdf6 	bl	e2ed0 <__aeabi_dmul>
   e52e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e52e8:	f7fd fc40 	bl	e2b6c <__adddf3>
   e52ec:	4682      	mov	sl, r0
   e52ee:	468b      	mov	fp, r1
   e52f0:	9b03      	ldr	r3, [sp, #12]
   e52f2:	bba3      	cbnz	r3, e535e <_strtod_r+0xb26>
   e52f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e52f8:	0d1b      	lsrs	r3, r3, #20
   e52fa:	9a06      	ldr	r2, [sp, #24]
   e52fc:	051b      	lsls	r3, r3, #20
   e52fe:	429a      	cmp	r2, r3
   e5300:	46d8      	mov	r8, fp
   e5302:	d12c      	bne.n	e535e <_strtod_r+0xb26>
   e5304:	4639      	mov	r1, r7
   e5306:	4630      	mov	r0, r6
   e5308:	f7fe f892 	bl	e3430 <__aeabi_d2iz>
   e530c:	f7fd fd7a 	bl	e2e04 <__aeabi_i2d>
   e5310:	460b      	mov	r3, r1
   e5312:	4602      	mov	r2, r0
   e5314:	4639      	mov	r1, r7
   e5316:	4630      	mov	r0, r6
   e5318:	f7fd fc26 	bl	e2b68 <__aeabi_dsub>
   e531c:	9b07      	ldr	r3, [sp, #28]
   e531e:	4606      	mov	r6, r0
   e5320:	460f      	mov	r7, r1
   e5322:	b92b      	cbnz	r3, e5330 <_strtod_r+0xaf8>
   e5324:	f1ba 0f00 	cmp.w	sl, #0
   e5328:	d102      	bne.n	e5330 <_strtod_r+0xaf8>
   e532a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e532e:	b183      	cbz	r3, e5352 <_strtod_r+0xb1a>
   e5330:	a335      	add	r3, pc, #212	; (adr r3, e5408 <_strtod_r+0xbd0>)
   e5332:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5336:	4630      	mov	r0, r6
   e5338:	4639      	mov	r1, r7
   e533a:	f7fe f83b 	bl	e33b4 <__aeabi_dcmplt>
   e533e:	2800      	cmp	r0, #0
   e5340:	d131      	bne.n	e53a6 <_strtod_r+0xb6e>
   e5342:	a333      	add	r3, pc, #204	; (adr r3, e5410 <_strtod_r+0xbd8>)
   e5344:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5348:	4630      	mov	r0, r6
   e534a:	4639      	mov	r1, r7
   e534c:	f7fe f850 	bl	e33f0 <__aeabi_dcmpgt>
   e5350:	e004      	b.n	e535c <_strtod_r+0xb24>
   e5352:	a331      	add	r3, pc, #196	; (adr r3, e5418 <_strtod_r+0xbe0>)
   e5354:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5358:	f7fe f82c 	bl	e33b4 <__aeabi_dcmplt>
   e535c:	bb18      	cbnz	r0, e53a6 <_strtod_r+0xb6e>
   e535e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e5360:	9802      	ldr	r0, [sp, #8]
   e5362:	f001 f824 	bl	e63ae <_Bfree>
   e5366:	9904      	ldr	r1, [sp, #16]
   e5368:	9802      	ldr	r0, [sp, #8]
   e536a:	f001 f820 	bl	e63ae <_Bfree>
   e536e:	4629      	mov	r1, r5
   e5370:	9802      	ldr	r0, [sp, #8]
   e5372:	f001 f81c 	bl	e63ae <_Bfree>
   e5376:	4621      	mov	r1, r4
   e5378:	9802      	ldr	r0, [sp, #8]
   e537a:	f001 f818 	bl	e63ae <_Bfree>
   e537e:	e56d      	b.n	e4e5c <_strtod_r+0x624>
   e5380:	9b03      	ldr	r3, [sp, #12]
   e5382:	b183      	cbz	r3, e53a6 <_strtod_r+0xb6e>
   e5384:	4b2b      	ldr	r3, [pc, #172]	; (e5434 <_strtod_r+0xbfc>)
   e5386:	930b      	str	r3, [sp, #44]	; 0x2c
   e5388:	2300      	movs	r3, #0
   e538a:	930a      	str	r3, [sp, #40]	; 0x28
   e538c:	4650      	mov	r0, sl
   e538e:	4659      	mov	r1, fp
   e5390:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e5394:	f7fd fd9c 	bl	e2ed0 <__aeabi_dmul>
   e5398:	4682      	mov	sl, r0
   e539a:	468b      	mov	fp, r1
   e539c:	b919      	cbnz	r1, e53a6 <_strtod_r+0xb6e>
   e539e:	b910      	cbnz	r0, e53a6 <_strtod_r+0xb6e>
   e53a0:	9a02      	ldr	r2, [sp, #8]
   e53a2:	2322      	movs	r3, #34	; 0x22
   e53a4:	6013      	str	r3, [r2, #0]
   e53a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e53a8:	9802      	ldr	r0, [sp, #8]
   e53aa:	f001 f800 	bl	e63ae <_Bfree>
   e53ae:	9904      	ldr	r1, [sp, #16]
   e53b0:	9802      	ldr	r0, [sp, #8]
   e53b2:	f000 fffc 	bl	e63ae <_Bfree>
   e53b6:	4629      	mov	r1, r5
   e53b8:	9802      	ldr	r0, [sp, #8]
   e53ba:	f000 fff8 	bl	e63ae <_Bfree>
   e53be:	9905      	ldr	r1, [sp, #20]
   e53c0:	9802      	ldr	r0, [sp, #8]
   e53c2:	f000 fff4 	bl	e63ae <_Bfree>
   e53c6:	4621      	mov	r1, r4
   e53c8:	9802      	ldr	r0, [sp, #8]
   e53ca:	f000 fff0 	bl	e63ae <_Bfree>
   e53ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e53d0:	b113      	cbz	r3, e53d8 <_strtod_r+0xba0>
   e53d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e53d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e53d6:	6013      	str	r3, [r2, #0]
   e53d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e53da:	b11b      	cbz	r3, e53e4 <_strtod_r+0xbac>
   e53dc:	4652      	mov	r2, sl
   e53de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e53e2:	e007      	b.n	e53f4 <_strtod_r+0xbbc>
   e53e4:	4652      	mov	r2, sl
   e53e6:	465b      	mov	r3, fp
   e53e8:	e004      	b.n	e53f4 <_strtod_r+0xbbc>
   e53ea:	2500      	movs	r5, #0
   e53ec:	462a      	mov	r2, r5
   e53ee:	2101      	movs	r1, #1
   e53f0:	f7ff bb41 	b.w	e4a76 <_strtod_r+0x23e>
   e53f4:	ec43 2b10 	vmov	d0, r2, r3
   e53f8:	b01d      	add	sp, #116	; 0x74
   e53fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e53fe:	bf00      	nop
   e5400:	ffc00000 	.word	0xffc00000
   e5404:	41dfffff 	.word	0x41dfffff
   e5408:	94a03595 	.word	0x94a03595
   e540c:	3fdfffff 	.word	0x3fdfffff
   e5410:	35afe535 	.word	0x35afe535
   e5414:	3fe00000 	.word	0x3fe00000
   e5418:	94a03595 	.word	0x94a03595
   e541c:	3fcfffff 	.word	0x3fcfffff
   e5420:	3ff00000 	.word	0x3ff00000
   e5424:	3fe00000 	.word	0x3fe00000
   e5428:	7fe00000 	.word	0x7fe00000
   e542c:	7c9fffff 	.word	0x7c9fffff
   e5430:	7fefffff 	.word	0x7fefffff
   e5434:	39500000 	.word	0x39500000

000e5438 <strtod>:
   e5438:	4b02      	ldr	r3, [pc, #8]	; (e5444 <strtod+0xc>)
   e543a:	460a      	mov	r2, r1
   e543c:	4601      	mov	r1, r0
   e543e:	6818      	ldr	r0, [r3, #0]
   e5440:	f7ff b9fa 	b.w	e4838 <_strtod_r>
   e5444:	2003d628 	.word	0x2003d628

000e5448 <_strtol_r>:
   e5448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e544c:	4680      	mov	r8, r0
   e544e:	4840      	ldr	r0, [pc, #256]	; (e5550 <_strtol_r+0x108>)
   e5450:	f8d0 9000 	ldr.w	r9, [r0]
   e5454:	460f      	mov	r7, r1
   e5456:	463d      	mov	r5, r7
   e5458:	f815 4b01 	ldrb.w	r4, [r5], #1
   e545c:	eb09 0004 	add.w	r0, r9, r4
   e5460:	7840      	ldrb	r0, [r0, #1]
   e5462:	f000 0008 	and.w	r0, r0, #8
   e5466:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e546a:	b108      	cbz	r0, e5470 <_strtol_r+0x28>
   e546c:	462f      	mov	r7, r5
   e546e:	e7f2      	b.n	e5456 <_strtol_r+0xe>
   e5470:	2c2d      	cmp	r4, #45	; 0x2d
   e5472:	d103      	bne.n	e547c <_strtol_r+0x34>
   e5474:	1cbd      	adds	r5, r7, #2
   e5476:	787c      	ldrb	r4, [r7, #1]
   e5478:	2601      	movs	r6, #1
   e547a:	e003      	b.n	e5484 <_strtol_r+0x3c>
   e547c:	2c2b      	cmp	r4, #43	; 0x2b
   e547e:	bf04      	itt	eq
   e5480:	787c      	ldrbeq	r4, [r7, #1]
   e5482:	1cbd      	addeq	r5, r7, #2
   e5484:	b113      	cbz	r3, e548c <_strtol_r+0x44>
   e5486:	2b10      	cmp	r3, #16
   e5488:	d10a      	bne.n	e54a0 <_strtol_r+0x58>
   e548a:	e05b      	b.n	e5544 <_strtol_r+0xfc>
   e548c:	2c30      	cmp	r4, #48	; 0x30
   e548e:	d157      	bne.n	e5540 <_strtol_r+0xf8>
   e5490:	7828      	ldrb	r0, [r5, #0]
   e5492:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5496:	2858      	cmp	r0, #88	; 0x58
   e5498:	d14d      	bne.n	e5536 <_strtol_r+0xee>
   e549a:	786c      	ldrb	r4, [r5, #1]
   e549c:	2310      	movs	r3, #16
   e549e:	3502      	adds	r5, #2
   e54a0:	2e00      	cmp	r6, #0
   e54a2:	bf14      	ite	ne
   e54a4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e54a8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e54ac:	2700      	movs	r7, #0
   e54ae:	fbbc faf3 	udiv	sl, ip, r3
   e54b2:	4638      	mov	r0, r7
   e54b4:	fb03 cc1a 	mls	ip, r3, sl, ip
   e54b8:	eb09 0e04 	add.w	lr, r9, r4
   e54bc:	f89e e001 	ldrb.w	lr, [lr, #1]
   e54c0:	f01e 0f04 	tst.w	lr, #4
   e54c4:	d001      	beq.n	e54ca <_strtol_r+0x82>
   e54c6:	3c30      	subs	r4, #48	; 0x30
   e54c8:	e00b      	b.n	e54e2 <_strtol_r+0x9a>
   e54ca:	f01e 0e03 	ands.w	lr, lr, #3
   e54ce:	d01b      	beq.n	e5508 <_strtol_r+0xc0>
   e54d0:	f1be 0f01 	cmp.w	lr, #1
   e54d4:	bf0c      	ite	eq
   e54d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e54da:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e54de:	ebce 0404 	rsb	r4, lr, r4
   e54e2:	42a3      	cmp	r3, r4
   e54e4:	dd10      	ble.n	e5508 <_strtol_r+0xc0>
   e54e6:	f1b7 3fff 	cmp.w	r7, #4294967295
   e54ea:	d00a      	beq.n	e5502 <_strtol_r+0xba>
   e54ec:	4550      	cmp	r0, sl
   e54ee:	d806      	bhi.n	e54fe <_strtol_r+0xb6>
   e54f0:	d101      	bne.n	e54f6 <_strtol_r+0xae>
   e54f2:	4564      	cmp	r4, ip
   e54f4:	dc03      	bgt.n	e54fe <_strtol_r+0xb6>
   e54f6:	fb03 4000 	mla	r0, r3, r0, r4
   e54fa:	2701      	movs	r7, #1
   e54fc:	e001      	b.n	e5502 <_strtol_r+0xba>
   e54fe:	f04f 37ff 	mov.w	r7, #4294967295
   e5502:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5506:	e7d7      	b.n	e54b8 <_strtol_r+0x70>
   e5508:	1c7b      	adds	r3, r7, #1
   e550a:	d10c      	bne.n	e5526 <_strtol_r+0xde>
   e550c:	2e00      	cmp	r6, #0
   e550e:	f04f 0322 	mov.w	r3, #34	; 0x22
   e5512:	bf14      	ite	ne
   e5514:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e5518:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e551c:	f8c8 3000 	str.w	r3, [r8]
   e5520:	b92a      	cbnz	r2, e552e <_strtol_r+0xe6>
   e5522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5526:	b106      	cbz	r6, e552a <_strtol_r+0xe2>
   e5528:	4240      	negs	r0, r0
   e552a:	b172      	cbz	r2, e554a <_strtol_r+0x102>
   e552c:	b107      	cbz	r7, e5530 <_strtol_r+0xe8>
   e552e:	1e69      	subs	r1, r5, #1
   e5530:	6011      	str	r1, [r2, #0]
   e5532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5536:	2430      	movs	r4, #48	; 0x30
   e5538:	2b00      	cmp	r3, #0
   e553a:	d1b1      	bne.n	e54a0 <_strtol_r+0x58>
   e553c:	2308      	movs	r3, #8
   e553e:	e7af      	b.n	e54a0 <_strtol_r+0x58>
   e5540:	230a      	movs	r3, #10
   e5542:	e7ad      	b.n	e54a0 <_strtol_r+0x58>
   e5544:	2c30      	cmp	r4, #48	; 0x30
   e5546:	d0a3      	beq.n	e5490 <_strtol_r+0x48>
   e5548:	e7aa      	b.n	e54a0 <_strtol_r+0x58>
   e554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e554e:	bf00      	nop
   e5550:	2003d5c4 	.word	0x2003d5c4

000e5554 <strtol>:
   e5554:	4613      	mov	r3, r2
   e5556:	460a      	mov	r2, r1
   e5558:	4601      	mov	r1, r0
   e555a:	4802      	ldr	r0, [pc, #8]	; (e5564 <strtol+0x10>)
   e555c:	6800      	ldr	r0, [r0, #0]
   e555e:	f7ff bf73 	b.w	e5448 <_strtol_r>
   e5562:	bf00      	nop
   e5564:	2003d628 	.word	0x2003d628

000e5568 <_strtoul_r>:
   e5568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e556c:	4680      	mov	r8, r0
   e556e:	483c      	ldr	r0, [pc, #240]	; (e5660 <_strtoul_r+0xf8>)
   e5570:	f8d0 9000 	ldr.w	r9, [r0]
   e5574:	460e      	mov	r6, r1
   e5576:	4635      	mov	r5, r6
   e5578:	f815 4b01 	ldrb.w	r4, [r5], #1
   e557c:	eb09 0004 	add.w	r0, r9, r4
   e5580:	7840      	ldrb	r0, [r0, #1]
   e5582:	f000 0008 	and.w	r0, r0, #8
   e5586:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e558a:	b108      	cbz	r0, e5590 <_strtoul_r+0x28>
   e558c:	462e      	mov	r6, r5
   e558e:	e7f2      	b.n	e5576 <_strtoul_r+0xe>
   e5590:	2c2d      	cmp	r4, #45	; 0x2d
   e5592:	d103      	bne.n	e559c <_strtoul_r+0x34>
   e5594:	1cb5      	adds	r5, r6, #2
   e5596:	7874      	ldrb	r4, [r6, #1]
   e5598:	2701      	movs	r7, #1
   e559a:	e003      	b.n	e55a4 <_strtoul_r+0x3c>
   e559c:	2c2b      	cmp	r4, #43	; 0x2b
   e559e:	bf04      	itt	eq
   e55a0:	7874      	ldrbeq	r4, [r6, #1]
   e55a2:	1cb5      	addeq	r5, r6, #2
   e55a4:	b113      	cbz	r3, e55ac <_strtoul_r+0x44>
   e55a6:	2b10      	cmp	r3, #16
   e55a8:	d10a      	bne.n	e55c0 <_strtoul_r+0x58>
   e55aa:	e053      	b.n	e5654 <_strtoul_r+0xec>
   e55ac:	2c30      	cmp	r4, #48	; 0x30
   e55ae:	d14f      	bne.n	e5650 <_strtoul_r+0xe8>
   e55b0:	7828      	ldrb	r0, [r5, #0]
   e55b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e55b6:	2858      	cmp	r0, #88	; 0x58
   e55b8:	d145      	bne.n	e5646 <_strtoul_r+0xde>
   e55ba:	786c      	ldrb	r4, [r5, #1]
   e55bc:	2310      	movs	r3, #16
   e55be:	3502      	adds	r5, #2
   e55c0:	f04f 3cff 	mov.w	ip, #4294967295
   e55c4:	2600      	movs	r6, #0
   e55c6:	fbbc fcf3 	udiv	ip, ip, r3
   e55ca:	fb03 fa0c 	mul.w	sl, r3, ip
   e55ce:	ea6f 0a0a 	mvn.w	sl, sl
   e55d2:	4630      	mov	r0, r6
   e55d4:	eb09 0e04 	add.w	lr, r9, r4
   e55d8:	f89e e001 	ldrb.w	lr, [lr, #1]
   e55dc:	f01e 0f04 	tst.w	lr, #4
   e55e0:	d001      	beq.n	e55e6 <_strtoul_r+0x7e>
   e55e2:	3c30      	subs	r4, #48	; 0x30
   e55e4:	e00b      	b.n	e55fe <_strtoul_r+0x96>
   e55e6:	f01e 0e03 	ands.w	lr, lr, #3
   e55ea:	d01a      	beq.n	e5622 <_strtoul_r+0xba>
   e55ec:	f1be 0f01 	cmp.w	lr, #1
   e55f0:	bf0c      	ite	eq
   e55f2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e55f6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e55fa:	ebce 0404 	rsb	r4, lr, r4
   e55fe:	42a3      	cmp	r3, r4
   e5600:	dd0f      	ble.n	e5622 <_strtoul_r+0xba>
   e5602:	2e00      	cmp	r6, #0
   e5604:	db08      	blt.n	e5618 <_strtoul_r+0xb0>
   e5606:	4560      	cmp	r0, ip
   e5608:	d806      	bhi.n	e5618 <_strtoul_r+0xb0>
   e560a:	d101      	bne.n	e5610 <_strtoul_r+0xa8>
   e560c:	4554      	cmp	r4, sl
   e560e:	dc03      	bgt.n	e5618 <_strtoul_r+0xb0>
   e5610:	fb03 4000 	mla	r0, r3, r0, r4
   e5614:	2601      	movs	r6, #1
   e5616:	e001      	b.n	e561c <_strtoul_r+0xb4>
   e5618:	f04f 36ff 	mov.w	r6, #4294967295
   e561c:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5620:	e7d8      	b.n	e55d4 <_strtoul_r+0x6c>
   e5622:	2e00      	cmp	r6, #0
   e5624:	da07      	bge.n	e5636 <_strtoul_r+0xce>
   e5626:	2322      	movs	r3, #34	; 0x22
   e5628:	f8c8 3000 	str.w	r3, [r8]
   e562c:	f04f 30ff 	mov.w	r0, #4294967295
   e5630:	b92a      	cbnz	r2, e563e <_strtoul_r+0xd6>
   e5632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5636:	b107      	cbz	r7, e563a <_strtoul_r+0xd2>
   e5638:	4240      	negs	r0, r0
   e563a:	b172      	cbz	r2, e565a <_strtoul_r+0xf2>
   e563c:	b106      	cbz	r6, e5640 <_strtoul_r+0xd8>
   e563e:	1e69      	subs	r1, r5, #1
   e5640:	6011      	str	r1, [r2, #0]
   e5642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5646:	2430      	movs	r4, #48	; 0x30
   e5648:	2b00      	cmp	r3, #0
   e564a:	d1b9      	bne.n	e55c0 <_strtoul_r+0x58>
   e564c:	2308      	movs	r3, #8
   e564e:	e7b7      	b.n	e55c0 <_strtoul_r+0x58>
   e5650:	230a      	movs	r3, #10
   e5652:	e7b5      	b.n	e55c0 <_strtoul_r+0x58>
   e5654:	2c30      	cmp	r4, #48	; 0x30
   e5656:	d0ab      	beq.n	e55b0 <_strtoul_r+0x48>
   e5658:	e7b2      	b.n	e55c0 <_strtoul_r+0x58>
   e565a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e565e:	bf00      	nop
   e5660:	2003d5c4 	.word	0x2003d5c4

000e5664 <strtoul>:
   e5664:	4613      	mov	r3, r2
   e5666:	460a      	mov	r2, r1
   e5668:	4601      	mov	r1, r0
   e566a:	4802      	ldr	r0, [pc, #8]	; (e5674 <strtoul+0x10>)
   e566c:	6800      	ldr	r0, [r0, #0]
   e566e:	f7ff bf7b 	b.w	e5568 <_strtoul_r>
   e5672:	bf00      	nop
   e5674:	2003d628 	.word	0x2003d628

000e5678 <__get_current_time_locale>:
   e5678:	4b04      	ldr	r3, [pc, #16]	; (e568c <__get_current_time_locale+0x14>)
   e567a:	4a05      	ldr	r2, [pc, #20]	; (e5690 <__get_current_time_locale+0x18>)
   e567c:	6818      	ldr	r0, [r3, #0]
   e567e:	4b05      	ldr	r3, [pc, #20]	; (e5694 <__get_current_time_locale+0x1c>)
   e5680:	2800      	cmp	r0, #0
   e5682:	bf14      	ite	ne
   e5684:	4610      	movne	r0, r2
   e5686:	4618      	moveq	r0, r3
   e5688:	4770      	bx	lr
   e568a:	bf00      	nop
   e568c:	2003e6c8 	.word	0x2003e6c8
   e5690:	2003e6cc 	.word	0x2003e6cc
   e5694:	000e89c0 	.word	0x000e89c0

000e5698 <tolower>:
   e5698:	4b04      	ldr	r3, [pc, #16]	; (e56ac <tolower+0x14>)
   e569a:	681b      	ldr	r3, [r3, #0]
   e569c:	4403      	add	r3, r0
   e569e:	785b      	ldrb	r3, [r3, #1]
   e56a0:	f003 0303 	and.w	r3, r3, #3
   e56a4:	2b01      	cmp	r3, #1
   e56a6:	bf08      	it	eq
   e56a8:	3020      	addeq	r0, #32
   e56aa:	4770      	bx	lr
   e56ac:	2003d5c4 	.word	0x2003d5c4

000e56b0 <__tzcalc_limits>:
   e56b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e56b4:	4604      	mov	r4, r0
   e56b6:	f000 fda5 	bl	e6204 <__gettzinfo>
   e56ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e56be:	429c      	cmp	r4, r3
   e56c0:	f340 8096 	ble.w	e57f0 <__tzcalc_limits+0x140>
   e56c4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e56c8:	18e3      	adds	r3, r4, r3
   e56ca:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e56ce:	109b      	asrs	r3, r3, #2
   e56d0:	f240 156d 	movw	r5, #365	; 0x16d
   e56d4:	fb05 3502 	mla	r5, r5, r2, r3
   e56d8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e56dc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e56e0:	fb92 f3f3 	sdiv	r3, r2, r3
   e56e4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e56e8:	442b      	add	r3, r5
   e56ea:	18a5      	adds	r5, r4, r2
   e56ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e56f0:	fb95 f5f2 	sdiv	r5, r5, r2
   e56f4:	441d      	add	r5, r3
   e56f6:	2364      	movs	r3, #100	; 0x64
   e56f8:	fb94 f7f2 	sdiv	r7, r4, r2
   e56fc:	fb94 f6f3 	sdiv	r6, r4, r3
   e5700:	fb02 4717 	mls	r7, r2, r7, r4
   e5704:	fb03 4616 	mls	r6, r3, r6, r4
   e5708:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e570c:	fab7 fe87 	clz	lr, r7
   e5710:	9301      	str	r3, [sp, #4]
   e5712:	f004 0303 	and.w	r3, r4, #3
   e5716:	6044      	str	r4, [r0, #4]
   e5718:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e571c:	4601      	mov	r1, r0
   e571e:	9300      	str	r3, [sp, #0]
   e5720:	f04f 0c07 	mov.w	ip, #7
   e5724:	7a0b      	ldrb	r3, [r1, #8]
   e5726:	2b4a      	cmp	r3, #74	; 0x4a
   e5728:	d10e      	bne.n	e5748 <__tzcalc_limits+0x98>
   e572a:	694b      	ldr	r3, [r1, #20]
   e572c:	9a00      	ldr	r2, [sp, #0]
   e572e:	18ec      	adds	r4, r5, r3
   e5730:	b902      	cbnz	r2, e5734 <__tzcalc_limits+0x84>
   e5732:	b906      	cbnz	r6, e5736 <__tzcalc_limits+0x86>
   e5734:	b927      	cbnz	r7, e5740 <__tzcalc_limits+0x90>
   e5736:	2b3b      	cmp	r3, #59	; 0x3b
   e5738:	bfd4      	ite	le
   e573a:	2300      	movle	r3, #0
   e573c:	2301      	movgt	r3, #1
   e573e:	e000      	b.n	e5742 <__tzcalc_limits+0x92>
   e5740:	2300      	movs	r3, #0
   e5742:	4423      	add	r3, r4
   e5744:	3b01      	subs	r3, #1
   e5746:	e03f      	b.n	e57c8 <__tzcalc_limits+0x118>
   e5748:	2b44      	cmp	r3, #68	; 0x44
   e574a:	d102      	bne.n	e5752 <__tzcalc_limits+0xa2>
   e574c:	694b      	ldr	r3, [r1, #20]
   e574e:	442b      	add	r3, r5
   e5750:	e03a      	b.n	e57c8 <__tzcalc_limits+0x118>
   e5752:	9b00      	ldr	r3, [sp, #0]
   e5754:	b92b      	cbnz	r3, e5762 <__tzcalc_limits+0xb2>
   e5756:	2e00      	cmp	r6, #0
   e5758:	bf0c      	ite	eq
   e575a:	46f0      	moveq	r8, lr
   e575c:	f04f 0801 	movne.w	r8, #1
   e5760:	e000      	b.n	e5764 <__tzcalc_limits+0xb4>
   e5762:	46f0      	mov	r8, lr
   e5764:	4b24      	ldr	r3, [pc, #144]	; (e57f8 <__tzcalc_limits+0x148>)
   e5766:	68cc      	ldr	r4, [r1, #12]
   e5768:	2230      	movs	r2, #48	; 0x30
   e576a:	fb02 3808 	mla	r8, r2, r8, r3
   e576e:	f1a8 0a04 	sub.w	sl, r8, #4
   e5772:	46a9      	mov	r9, r5
   e5774:	2301      	movs	r3, #1
   e5776:	42a3      	cmp	r3, r4
   e5778:	da04      	bge.n	e5784 <__tzcalc_limits+0xd4>
   e577a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e577e:	3301      	adds	r3, #1
   e5780:	44d9      	add	r9, fp
   e5782:	e7f8      	b.n	e5776 <__tzcalc_limits+0xc6>
   e5784:	f109 0304 	add.w	r3, r9, #4
   e5788:	fb93 fbfc 	sdiv	fp, r3, ip
   e578c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e5790:	2c01      	cmp	r4, #1
   e5792:	ebca 0a03 	rsb	sl, sl, r3
   e5796:	694b      	ldr	r3, [r1, #20]
   e5798:	bfb8      	it	lt
   e579a:	2401      	movlt	r4, #1
   e579c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e57a0:	ebb3 0a0a 	subs.w	sl, r3, sl
   e57a4:	690b      	ldr	r3, [r1, #16]
   e57a6:	f104 34ff 	add.w	r4, r4, #4294967295
   e57aa:	f103 33ff 	add.w	r3, r3, #4294967295
   e57ae:	bf48      	it	mi
   e57b0:	f10a 0a07 	addmi.w	sl, sl, #7
   e57b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e57b8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e57bc:	4453      	add	r3, sl
   e57be:	42a3      	cmp	r3, r4
   e57c0:	db01      	blt.n	e57c6 <__tzcalc_limits+0x116>
   e57c2:	3b07      	subs	r3, #7
   e57c4:	e7fb      	b.n	e57be <__tzcalc_limits+0x10e>
   e57c6:	444b      	add	r3, r9
   e57c8:	698c      	ldr	r4, [r1, #24]
   e57ca:	4a0c      	ldr	r2, [pc, #48]	; (e57fc <__tzcalc_limits+0x14c>)
   e57cc:	fb02 4303 	mla	r3, r2, r3, r4
   e57d0:	6a0c      	ldr	r4, [r1, #32]
   e57d2:	4423      	add	r3, r4
   e57d4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e57d8:	9b01      	ldr	r3, [sp, #4]
   e57da:	4299      	cmp	r1, r3
   e57dc:	d1a2      	bne.n	e5724 <__tzcalc_limits+0x74>
   e57de:	69c3      	ldr	r3, [r0, #28]
   e57e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e57e2:	4293      	cmp	r3, r2
   e57e4:	bfac      	ite	ge
   e57e6:	2300      	movge	r3, #0
   e57e8:	2301      	movlt	r3, #1
   e57ea:	6003      	str	r3, [r0, #0]
   e57ec:	2001      	movs	r0, #1
   e57ee:	e000      	b.n	e57f2 <__tzcalc_limits+0x142>
   e57f0:	2000      	movs	r0, #0
   e57f2:	b003      	add	sp, #12
   e57f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e57f8:	000e877c 	.word	0x000e877c
   e57fc:	00015180 	.word	0x00015180

000e5800 <__tz_lock>:
   e5800:	4770      	bx	lr

000e5802 <__tz_unlock>:
   e5802:	4770      	bx	lr

000e5804 <_tzset_unlocked>:
   e5804:	4b01      	ldr	r3, [pc, #4]	; (e580c <_tzset_unlocked+0x8>)
   e5806:	6818      	ldr	r0, [r3, #0]
   e5808:	f000 b802 	b.w	e5810 <_tzset_unlocked_r>
   e580c:	2003d628 	.word	0x2003d628

000e5810 <_tzset_unlocked_r>:
   e5810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5814:	b08d      	sub	sp, #52	; 0x34
   e5816:	4607      	mov	r7, r0
   e5818:	f000 fcf4 	bl	e6204 <__gettzinfo>
   e581c:	49b0      	ldr	r1, [pc, #704]	; (e5ae0 <_tzset_unlocked_r+0x2d0>)
   e581e:	4eb1      	ldr	r6, [pc, #708]	; (e5ae4 <_tzset_unlocked_r+0x2d4>)
   e5820:	4604      	mov	r4, r0
   e5822:	4638      	mov	r0, r7
   e5824:	f000 fce6 	bl	e61f4 <_getenv_r>
   e5828:	4605      	mov	r5, r0
   e582a:	b960      	cbnz	r0, e5846 <_tzset_unlocked_r+0x36>
   e582c:	4bae      	ldr	r3, [pc, #696]	; (e5ae8 <_tzset_unlocked_r+0x2d8>)
   e582e:	4aaf      	ldr	r2, [pc, #700]	; (e5aec <_tzset_unlocked_r+0x2dc>)
   e5830:	6018      	str	r0, [r3, #0]
   e5832:	4baf      	ldr	r3, [pc, #700]	; (e5af0 <_tzset_unlocked_r+0x2e0>)
   e5834:	6018      	str	r0, [r3, #0]
   e5836:	4baf      	ldr	r3, [pc, #700]	; (e5af4 <_tzset_unlocked_r+0x2e4>)
   e5838:	6830      	ldr	r0, [r6, #0]
   e583a:	601a      	str	r2, [r3, #0]
   e583c:	605a      	str	r2, [r3, #4]
   e583e:	f7f5 f9d5 	bl	dabec <free>
   e5842:	6035      	str	r5, [r6, #0]
   e5844:	e148      	b.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e5846:	6831      	ldr	r1, [r6, #0]
   e5848:	b979      	cbnz	r1, e586a <_tzset_unlocked_r+0x5a>
   e584a:	6830      	ldr	r0, [r6, #0]
   e584c:	f7f5 f9ce 	bl	dabec <free>
   e5850:	4628      	mov	r0, r5
   e5852:	f7fe ffa3 	bl	e479c <strlen>
   e5856:	1c41      	adds	r1, r0, #1
   e5858:	4638      	mov	r0, r7
   e585a:	f7f5 fa07 	bl	dac6c <_malloc_r>
   e585e:	6030      	str	r0, [r6, #0]
   e5860:	b148      	cbz	r0, e5876 <_tzset_unlocked_r+0x66>
   e5862:	4629      	mov	r1, r5
   e5864:	f7fe fa62 	bl	e3d2c <strcpy>
   e5868:	e005      	b.n	e5876 <_tzset_unlocked_r+0x66>
   e586a:	f7fe fa55 	bl	e3d18 <strcmp>
   e586e:	2800      	cmp	r0, #0
   e5870:	f000 8132 	beq.w	e5ad8 <_tzset_unlocked_r+0x2c8>
   e5874:	e7e9      	b.n	e584a <_tzset_unlocked_r+0x3a>
   e5876:	782b      	ldrb	r3, [r5, #0]
   e5878:	4a9f      	ldr	r2, [pc, #636]	; (e5af8 <_tzset_unlocked_r+0x2e8>)
   e587a:	49a0      	ldr	r1, [pc, #640]	; (e5afc <_tzset_unlocked_r+0x2ec>)
   e587c:	2b3a      	cmp	r3, #58	; 0x3a
   e587e:	bf08      	it	eq
   e5880:	3501      	addeq	r5, #1
   e5882:	ae0a      	add	r6, sp, #40	; 0x28
   e5884:	4633      	mov	r3, r6
   e5886:	4628      	mov	r0, r5
   e5888:	f7f5 f9c8 	bl	dac1c <siscanf>
   e588c:	2800      	cmp	r0, #0
   e588e:	f340 8123 	ble.w	e5ad8 <_tzset_unlocked_r+0x2c8>
   e5892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5894:	18ef      	adds	r7, r5, r3
   e5896:	5ceb      	ldrb	r3, [r5, r3]
   e5898:	2b2d      	cmp	r3, #45	; 0x2d
   e589a:	d103      	bne.n	e58a4 <_tzset_unlocked_r+0x94>
   e589c:	3701      	adds	r7, #1
   e589e:	f04f 35ff 	mov.w	r5, #4294967295
   e58a2:	e003      	b.n	e58ac <_tzset_unlocked_r+0x9c>
   e58a4:	2b2b      	cmp	r3, #43	; 0x2b
   e58a6:	bf08      	it	eq
   e58a8:	3701      	addeq	r7, #1
   e58aa:	2501      	movs	r5, #1
   e58ac:	f10d 0a20 	add.w	sl, sp, #32
   e58b0:	f10d 0b1e 	add.w	fp, sp, #30
   e58b4:	f04f 0800 	mov.w	r8, #0
   e58b8:	9603      	str	r6, [sp, #12]
   e58ba:	f8cd a008 	str.w	sl, [sp, #8]
   e58be:	9601      	str	r6, [sp, #4]
   e58c0:	f8cd b000 	str.w	fp, [sp]
   e58c4:	4633      	mov	r3, r6
   e58c6:	aa07      	add	r2, sp, #28
   e58c8:	498d      	ldr	r1, [pc, #564]	; (e5b00 <_tzset_unlocked_r+0x2f0>)
   e58ca:	f8ad 801e 	strh.w	r8, [sp, #30]
   e58ce:	4638      	mov	r0, r7
   e58d0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e58d4:	f7f5 f9a2 	bl	dac1c <siscanf>
   e58d8:	4540      	cmp	r0, r8
   e58da:	f340 80fd 	ble.w	e5ad8 <_tzset_unlocked_r+0x2c8>
   e58de:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e58e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e58e6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e5b0c <_tzset_unlocked_r+0x2fc>
   e58ea:	213c      	movs	r1, #60	; 0x3c
   e58ec:	fb01 3302 	mla	r3, r1, r2, r3
   e58f0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e58f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e58f8:	fb01 3302 	mla	r3, r1, r2, r3
   e58fc:	435d      	muls	r5, r3
   e58fe:	6225      	str	r5, [r4, #32]
   e5900:	4d7c      	ldr	r5, [pc, #496]	; (e5af4 <_tzset_unlocked_r+0x2e4>)
   e5902:	4b7d      	ldr	r3, [pc, #500]	; (e5af8 <_tzset_unlocked_r+0x2e8>)
   e5904:	602b      	str	r3, [r5, #0]
   e5906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5908:	497c      	ldr	r1, [pc, #496]	; (e5afc <_tzset_unlocked_r+0x2ec>)
   e590a:	441f      	add	r7, r3
   e590c:	464a      	mov	r2, r9
   e590e:	4633      	mov	r3, r6
   e5910:	4638      	mov	r0, r7
   e5912:	f7f5 f983 	bl	dac1c <siscanf>
   e5916:	4540      	cmp	r0, r8
   e5918:	dc08      	bgt.n	e592c <_tzset_unlocked_r+0x11c>
   e591a:	682b      	ldr	r3, [r5, #0]
   e591c:	606b      	str	r3, [r5, #4]
   e591e:	4b72      	ldr	r3, [pc, #456]	; (e5ae8 <_tzset_unlocked_r+0x2d8>)
   e5920:	6a22      	ldr	r2, [r4, #32]
   e5922:	601a      	str	r2, [r3, #0]
   e5924:	4b72      	ldr	r3, [pc, #456]	; (e5af0 <_tzset_unlocked_r+0x2e0>)
   e5926:	f8c3 8000 	str.w	r8, [r3]
   e592a:	e0d5      	b.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e592c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e592e:	f8c5 9004 	str.w	r9, [r5, #4]
   e5932:	18fd      	adds	r5, r7, r3
   e5934:	5cfb      	ldrb	r3, [r7, r3]
   e5936:	2b2d      	cmp	r3, #45	; 0x2d
   e5938:	d103      	bne.n	e5942 <_tzset_unlocked_r+0x132>
   e593a:	3501      	adds	r5, #1
   e593c:	f04f 37ff 	mov.w	r7, #4294967295
   e5940:	e003      	b.n	e594a <_tzset_unlocked_r+0x13a>
   e5942:	2b2b      	cmp	r3, #43	; 0x2b
   e5944:	bf08      	it	eq
   e5946:	3501      	addeq	r5, #1
   e5948:	2701      	movs	r7, #1
   e594a:	2300      	movs	r3, #0
   e594c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e5950:	f8ad 301e 	strh.w	r3, [sp, #30]
   e5954:	f8ad 3020 	strh.w	r3, [sp, #32]
   e5958:	930a      	str	r3, [sp, #40]	; 0x28
   e595a:	9603      	str	r6, [sp, #12]
   e595c:	f8cd a008 	str.w	sl, [sp, #8]
   e5960:	9601      	str	r6, [sp, #4]
   e5962:	f8cd b000 	str.w	fp, [sp]
   e5966:	4633      	mov	r3, r6
   e5968:	aa07      	add	r2, sp, #28
   e596a:	4965      	ldr	r1, [pc, #404]	; (e5b00 <_tzset_unlocked_r+0x2f0>)
   e596c:	4628      	mov	r0, r5
   e596e:	f7f5 f955 	bl	dac1c <siscanf>
   e5972:	2800      	cmp	r0, #0
   e5974:	dc04      	bgt.n	e5980 <_tzset_unlocked_r+0x170>
   e5976:	6a23      	ldr	r3, [r4, #32]
   e5978:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e597c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e597e:	e00e      	b.n	e599e <_tzset_unlocked_r+0x18e>
   e5980:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e5984:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e5988:	213c      	movs	r1, #60	; 0x3c
   e598a:	fb01 3302 	mla	r3, r1, r2, r3
   e598e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5992:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5996:	fb01 3302 	mla	r3, r1, r2, r3
   e599a:	435f      	muls	r7, r3
   e599c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e59a0:	4627      	mov	r7, r4
   e59a2:	441d      	add	r5, r3
   e59a4:	f04f 0900 	mov.w	r9, #0
   e59a8:	782b      	ldrb	r3, [r5, #0]
   e59aa:	2b2c      	cmp	r3, #44	; 0x2c
   e59ac:	bf08      	it	eq
   e59ae:	3501      	addeq	r5, #1
   e59b0:	f895 8000 	ldrb.w	r8, [r5]
   e59b4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e59b8:	d126      	bne.n	e5a08 <_tzset_unlocked_r+0x1f8>
   e59ba:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e59be:	9302      	str	r3, [sp, #8]
   e59c0:	ab09      	add	r3, sp, #36	; 0x24
   e59c2:	9300      	str	r3, [sp, #0]
   e59c4:	9603      	str	r6, [sp, #12]
   e59c6:	9601      	str	r6, [sp, #4]
   e59c8:	4633      	mov	r3, r6
   e59ca:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e59ce:	494d      	ldr	r1, [pc, #308]	; (e5b04 <_tzset_unlocked_r+0x2f4>)
   e59d0:	4628      	mov	r0, r5
   e59d2:	f7f5 f923 	bl	dac1c <siscanf>
   e59d6:	2803      	cmp	r0, #3
   e59d8:	d17e      	bne.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e59da:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e59de:	1e4b      	subs	r3, r1, #1
   e59e0:	2b0b      	cmp	r3, #11
   e59e2:	d879      	bhi.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e59e4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e59e8:	1e53      	subs	r3, r2, #1
   e59ea:	2b04      	cmp	r3, #4
   e59ec:	d874      	bhi.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e59ee:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e59f2:	2b06      	cmp	r3, #6
   e59f4:	d870      	bhi.n	e5ad8 <_tzset_unlocked_r+0x2c8>
   e59f6:	f887 8008 	strb.w	r8, [r7, #8]
   e59fa:	60f9      	str	r1, [r7, #12]
   e59fc:	613a      	str	r2, [r7, #16]
   e59fe:	617b      	str	r3, [r7, #20]
   e5a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5a02:	eb05 0803 	add.w	r8, r5, r3
   e5a06:	e02a      	b.n	e5a5e <_tzset_unlocked_r+0x24e>
   e5a08:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e5a0c:	bf06      	itte	eq
   e5a0e:	3501      	addeq	r5, #1
   e5a10:	4643      	moveq	r3, r8
   e5a12:	2344      	movne	r3, #68	; 0x44
   e5a14:	220a      	movs	r2, #10
   e5a16:	a90b      	add	r1, sp, #44	; 0x2c
   e5a18:	4628      	mov	r0, r5
   e5a1a:	9305      	str	r3, [sp, #20]
   e5a1c:	f7ff fe22 	bl	e5664 <strtoul>
   e5a20:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e5a24:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e5a28:	4545      	cmp	r5, r8
   e5a2a:	9b05      	ldr	r3, [sp, #20]
   e5a2c:	d114      	bne.n	e5a58 <_tzset_unlocked_r+0x248>
   e5a2e:	234d      	movs	r3, #77	; 0x4d
   e5a30:	f1b9 0f00 	cmp.w	r9, #0
   e5a34:	d107      	bne.n	e5a46 <_tzset_unlocked_r+0x236>
   e5a36:	7223      	strb	r3, [r4, #8]
   e5a38:	2303      	movs	r3, #3
   e5a3a:	60e3      	str	r3, [r4, #12]
   e5a3c:	2302      	movs	r3, #2
   e5a3e:	6123      	str	r3, [r4, #16]
   e5a40:	f8c4 9014 	str.w	r9, [r4, #20]
   e5a44:	e00b      	b.n	e5a5e <_tzset_unlocked_r+0x24e>
   e5a46:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e5a4a:	230b      	movs	r3, #11
   e5a4c:	62a3      	str	r3, [r4, #40]	; 0x28
   e5a4e:	2301      	movs	r3, #1
   e5a50:	62e3      	str	r3, [r4, #44]	; 0x2c
   e5a52:	2300      	movs	r3, #0
   e5a54:	6323      	str	r3, [r4, #48]	; 0x30
   e5a56:	e002      	b.n	e5a5e <_tzset_unlocked_r+0x24e>
   e5a58:	b280      	uxth	r0, r0
   e5a5a:	723b      	strb	r3, [r7, #8]
   e5a5c:	6178      	str	r0, [r7, #20]
   e5a5e:	2302      	movs	r3, #2
   e5a60:	f8ad 301c 	strh.w	r3, [sp, #28]
   e5a64:	2300      	movs	r3, #0
   e5a66:	f8ad 301e 	strh.w	r3, [sp, #30]
   e5a6a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e5a6e:	930a      	str	r3, [sp, #40]	; 0x28
   e5a70:	f898 3000 	ldrb.w	r3, [r8]
   e5a74:	2b2f      	cmp	r3, #47	; 0x2f
   e5a76:	d10b      	bne.n	e5a90 <_tzset_unlocked_r+0x280>
   e5a78:	9603      	str	r6, [sp, #12]
   e5a7a:	f8cd a008 	str.w	sl, [sp, #8]
   e5a7e:	9601      	str	r6, [sp, #4]
   e5a80:	f8cd b000 	str.w	fp, [sp]
   e5a84:	4633      	mov	r3, r6
   e5a86:	aa07      	add	r2, sp, #28
   e5a88:	491f      	ldr	r1, [pc, #124]	; (e5b08 <_tzset_unlocked_r+0x2f8>)
   e5a8a:	4640      	mov	r0, r8
   e5a8c:	f7f5 f8c6 	bl	dac1c <siscanf>
   e5a90:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e5a94:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e5a98:	213c      	movs	r1, #60	; 0x3c
   e5a9a:	fb01 3302 	mla	r3, r1, r2, r3
   e5a9e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5aa2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5aa6:	fb01 3302 	mla	r3, r1, r2, r3
   e5aaa:	61bb      	str	r3, [r7, #24]
   e5aac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e5aae:	f109 0901 	add.w	r9, r9, #1
   e5ab2:	f1b9 0f02 	cmp.w	r9, #2
   e5ab6:	4445      	add	r5, r8
   e5ab8:	f107 071c 	add.w	r7, r7, #28
   e5abc:	f47f af74 	bne.w	e59a8 <_tzset_unlocked_r+0x198>
   e5ac0:	6860      	ldr	r0, [r4, #4]
   e5ac2:	f7ff fdf5 	bl	e56b0 <__tzcalc_limits>
   e5ac6:	4b08      	ldr	r3, [pc, #32]	; (e5ae8 <_tzset_unlocked_r+0x2d8>)
   e5ac8:	6a22      	ldr	r2, [r4, #32]
   e5aca:	601a      	str	r2, [r3, #0]
   e5acc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e5ace:	1a9b      	subs	r3, r3, r2
   e5ad0:	4a07      	ldr	r2, [pc, #28]	; (e5af0 <_tzset_unlocked_r+0x2e0>)
   e5ad2:	bf18      	it	ne
   e5ad4:	2301      	movne	r3, #1
   e5ad6:	6013      	str	r3, [r2, #0]
   e5ad8:	b00d      	add	sp, #52	; 0x34
   e5ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5ade:	bf00      	nop
   e5ae0:	000e8abc 	.word	0x000e8abc
   e5ae4:	2003e7e0 	.word	0x2003e7e0
   e5ae8:	2003e7e8 	.word	0x2003e7e8
   e5aec:	000e8abf 	.word	0x000e8abf
   e5af0:	2003e7e4 	.word	0x2003e7e4
   e5af4:	2003d664 	.word	0x2003d664
   e5af8:	2003e7d3 	.word	0x2003e7d3
   e5afc:	000e8ac3 	.word	0x000e8ac3
   e5b00:	000e8ae6 	.word	0x000e8ae6
   e5b04:	000e8ad2 	.word	0x000e8ad2
   e5b08:	000e8ae5 	.word	0x000e8ae5
   e5b0c:	2003e7c8 	.word	0x2003e7c8

000e5b10 <abs>:
   e5b10:	2800      	cmp	r0, #0
   e5b12:	bfb8      	it	lt
   e5b14:	4240      	neglt	r0, r0
   e5b16:	4770      	bx	lr

000e5b18 <div>:
   e5b18:	2900      	cmp	r1, #0
   e5b1a:	b510      	push	{r4, lr}
   e5b1c:	fb91 f4f2 	sdiv	r4, r1, r2
   e5b20:	fb02 1314 	mls	r3, r2, r4, r1
   e5b24:	db04      	blt.n	e5b30 <div+0x18>
   e5b26:	2b00      	cmp	r3, #0
   e5b28:	da07      	bge.n	e5b3a <div+0x22>
   e5b2a:	3401      	adds	r4, #1
   e5b2c:	1a9b      	subs	r3, r3, r2
   e5b2e:	e004      	b.n	e5b3a <div+0x22>
   e5b30:	2b00      	cmp	r3, #0
   e5b32:	bfc4      	itt	gt
   e5b34:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e5b38:	189b      	addgt	r3, r3, r2
   e5b3a:	6004      	str	r4, [r0, #0]
   e5b3c:	6043      	str	r3, [r0, #4]
   e5b3e:	bd10      	pop	{r4, pc}

000e5b40 <rshift>:
   e5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5b42:	6906      	ldr	r6, [r0, #16]
   e5b44:	114b      	asrs	r3, r1, #5
   e5b46:	42b3      	cmp	r3, r6
   e5b48:	f100 0514 	add.w	r5, r0, #20
   e5b4c:	da27      	bge.n	e5b9e <rshift+0x5e>
   e5b4e:	f011 011f 	ands.w	r1, r1, #31
   e5b52:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e5b56:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e5b5a:	d101      	bne.n	e5b60 <rshift+0x20>
   e5b5c:	4629      	mov	r1, r5
   e5b5e:	e016      	b.n	e5b8e <rshift+0x4e>
   e5b60:	1d14      	adds	r4, r2, #4
   e5b62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e5b66:	f1c1 0e20 	rsb	lr, r1, #32
   e5b6a:	40ca      	lsrs	r2, r1
   e5b6c:	462b      	mov	r3, r5
   e5b6e:	42b4      	cmp	r4, r6
   e5b70:	d209      	bcs.n	e5b86 <rshift+0x46>
   e5b72:	6827      	ldr	r7, [r4, #0]
   e5b74:	fa07 f70e 	lsl.w	r7, r7, lr
   e5b78:	433a      	orrs	r2, r7
   e5b7a:	f843 2b04 	str.w	r2, [r3], #4
   e5b7e:	f854 2b04 	ldr.w	r2, [r4], #4
   e5b82:	40ca      	lsrs	r2, r1
   e5b84:	e7f3      	b.n	e5b6e <rshift+0x2e>
   e5b86:	601a      	str	r2, [r3, #0]
   e5b88:	b152      	cbz	r2, e5ba0 <rshift+0x60>
   e5b8a:	3304      	adds	r3, #4
   e5b8c:	e008      	b.n	e5ba0 <rshift+0x60>
   e5b8e:	42b2      	cmp	r2, r6
   e5b90:	460b      	mov	r3, r1
   e5b92:	d205      	bcs.n	e5ba0 <rshift+0x60>
   e5b94:	f852 3b04 	ldr.w	r3, [r2], #4
   e5b98:	f841 3b04 	str.w	r3, [r1], #4
   e5b9c:	e7f7      	b.n	e5b8e <rshift+0x4e>
   e5b9e:	462b      	mov	r3, r5
   e5ba0:	1b5b      	subs	r3, r3, r5
   e5ba2:	109b      	asrs	r3, r3, #2
   e5ba4:	6103      	str	r3, [r0, #16]
   e5ba6:	b903      	cbnz	r3, e5baa <rshift+0x6a>
   e5ba8:	6143      	str	r3, [r0, #20]
   e5baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e5bac <__hexdig_fun>:
   e5bac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e5bb0:	2b09      	cmp	r3, #9
   e5bb2:	d801      	bhi.n	e5bb8 <__hexdig_fun+0xc>
   e5bb4:	3820      	subs	r0, #32
   e5bb6:	e00a      	b.n	e5bce <__hexdig_fun+0x22>
   e5bb8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e5bbc:	2b05      	cmp	r3, #5
   e5bbe:	d801      	bhi.n	e5bc4 <__hexdig_fun+0x18>
   e5bc0:	3847      	subs	r0, #71	; 0x47
   e5bc2:	e004      	b.n	e5bce <__hexdig_fun+0x22>
   e5bc4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e5bc8:	2b05      	cmp	r3, #5
   e5bca:	d802      	bhi.n	e5bd2 <__hexdig_fun+0x26>
   e5bcc:	3827      	subs	r0, #39	; 0x27
   e5bce:	b2c0      	uxtb	r0, r0
   e5bd0:	4770      	bx	lr
   e5bd2:	2000      	movs	r0, #0
   e5bd4:	4770      	bx	lr

000e5bd6 <__gethex>:
   e5bd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5bda:	b08b      	sub	sp, #44	; 0x2c
   e5bdc:	468a      	mov	sl, r1
   e5bde:	4690      	mov	r8, r2
   e5be0:	9306      	str	r3, [sp, #24]
   e5be2:	9002      	str	r0, [sp, #8]
   e5be4:	f7fd fe0a 	bl	e37fc <_localeconv_r>
   e5be8:	6803      	ldr	r3, [r0, #0]
   e5bea:	9303      	str	r3, [sp, #12]
   e5bec:	4618      	mov	r0, r3
   e5bee:	f7fe fdd5 	bl	e479c <strlen>
   e5bf2:	9b03      	ldr	r3, [sp, #12]
   e5bf4:	9001      	str	r0, [sp, #4]
   e5bf6:	4403      	add	r3, r0
   e5bf8:	f04f 0b00 	mov.w	fp, #0
   e5bfc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e5c00:	9307      	str	r3, [sp, #28]
   e5c02:	f8da 3000 	ldr.w	r3, [sl]
   e5c06:	3302      	adds	r3, #2
   e5c08:	461f      	mov	r7, r3
   e5c0a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e5c0e:	2830      	cmp	r0, #48	; 0x30
   e5c10:	d102      	bne.n	e5c18 <__gethex+0x42>
   e5c12:	f10b 0b01 	add.w	fp, fp, #1
   e5c16:	e7f7      	b.n	e5c08 <__gethex+0x32>
   e5c18:	f7ff ffc8 	bl	e5bac <__hexdig_fun>
   e5c1c:	4604      	mov	r4, r0
   e5c1e:	b9e0      	cbnz	r0, e5c5a <__gethex+0x84>
   e5c20:	9a01      	ldr	r2, [sp, #4]
   e5c22:	9903      	ldr	r1, [sp, #12]
   e5c24:	4638      	mov	r0, r7
   e5c26:	f7fe fdc1 	bl	e47ac <strncmp>
   e5c2a:	2800      	cmp	r0, #0
   e5c2c:	d134      	bne.n	e5c98 <__gethex+0xc2>
   e5c2e:	9b01      	ldr	r3, [sp, #4]
   e5c30:	5cf8      	ldrb	r0, [r7, r3]
   e5c32:	18fe      	adds	r6, r7, r3
   e5c34:	f7ff ffba 	bl	e5bac <__hexdig_fun>
   e5c38:	b380      	cbz	r0, e5c9c <__gethex+0xc6>
   e5c3a:	4633      	mov	r3, r6
   e5c3c:	7818      	ldrb	r0, [r3, #0]
   e5c3e:	2830      	cmp	r0, #48	; 0x30
   e5c40:	461f      	mov	r7, r3
   e5c42:	f103 0301 	add.w	r3, r3, #1
   e5c46:	d0f9      	beq.n	e5c3c <__gethex+0x66>
   e5c48:	f7ff ffb0 	bl	e5bac <__hexdig_fun>
   e5c4c:	fab0 f580 	clz	r5, r0
   e5c50:	096d      	lsrs	r5, r5, #5
   e5c52:	4634      	mov	r4, r6
   e5c54:	f04f 0b01 	mov.w	fp, #1
   e5c58:	e001      	b.n	e5c5e <__gethex+0x88>
   e5c5a:	2500      	movs	r5, #0
   e5c5c:	462c      	mov	r4, r5
   e5c5e:	463a      	mov	r2, r7
   e5c60:	4616      	mov	r6, r2
   e5c62:	3201      	adds	r2, #1
   e5c64:	7830      	ldrb	r0, [r6, #0]
   e5c66:	f7ff ffa1 	bl	e5bac <__hexdig_fun>
   e5c6a:	2800      	cmp	r0, #0
   e5c6c:	d1f8      	bne.n	e5c60 <__gethex+0x8a>
   e5c6e:	9a01      	ldr	r2, [sp, #4]
   e5c70:	9903      	ldr	r1, [sp, #12]
   e5c72:	4630      	mov	r0, r6
   e5c74:	f7fe fd9a 	bl	e47ac <strncmp>
   e5c78:	b950      	cbnz	r0, e5c90 <__gethex+0xba>
   e5c7a:	b954      	cbnz	r4, e5c92 <__gethex+0xbc>
   e5c7c:	9b01      	ldr	r3, [sp, #4]
   e5c7e:	18f4      	adds	r4, r6, r3
   e5c80:	4622      	mov	r2, r4
   e5c82:	4616      	mov	r6, r2
   e5c84:	3201      	adds	r2, #1
   e5c86:	7830      	ldrb	r0, [r6, #0]
   e5c88:	f7ff ff90 	bl	e5bac <__hexdig_fun>
   e5c8c:	2800      	cmp	r0, #0
   e5c8e:	d1f8      	bne.n	e5c82 <__gethex+0xac>
   e5c90:	b134      	cbz	r4, e5ca0 <__gethex+0xca>
   e5c92:	1ba4      	subs	r4, r4, r6
   e5c94:	00a4      	lsls	r4, r4, #2
   e5c96:	e003      	b.n	e5ca0 <__gethex+0xca>
   e5c98:	463e      	mov	r6, r7
   e5c9a:	e000      	b.n	e5c9e <__gethex+0xc8>
   e5c9c:	4604      	mov	r4, r0
   e5c9e:	2501      	movs	r5, #1
   e5ca0:	7833      	ldrb	r3, [r6, #0]
   e5ca2:	2b50      	cmp	r3, #80	; 0x50
   e5ca4:	d001      	beq.n	e5caa <__gethex+0xd4>
   e5ca6:	2b70      	cmp	r3, #112	; 0x70
   e5ca8:	d12a      	bne.n	e5d00 <__gethex+0x12a>
   e5caa:	7873      	ldrb	r3, [r6, #1]
   e5cac:	2b2b      	cmp	r3, #43	; 0x2b
   e5cae:	d008      	beq.n	e5cc2 <__gethex+0xec>
   e5cb0:	2b2d      	cmp	r3, #45	; 0x2d
   e5cb2:	d003      	beq.n	e5cbc <__gethex+0xe6>
   e5cb4:	1c71      	adds	r1, r6, #1
   e5cb6:	f04f 0900 	mov.w	r9, #0
   e5cba:	e005      	b.n	e5cc8 <__gethex+0xf2>
   e5cbc:	f04f 0901 	mov.w	r9, #1
   e5cc0:	e001      	b.n	e5cc6 <__gethex+0xf0>
   e5cc2:	f04f 0900 	mov.w	r9, #0
   e5cc6:	1cb1      	adds	r1, r6, #2
   e5cc8:	7808      	ldrb	r0, [r1, #0]
   e5cca:	f7ff ff6f 	bl	e5bac <__hexdig_fun>
   e5cce:	1e43      	subs	r3, r0, #1
   e5cd0:	b2db      	uxtb	r3, r3
   e5cd2:	2b18      	cmp	r3, #24
   e5cd4:	d814      	bhi.n	e5d00 <__gethex+0x12a>
   e5cd6:	f1a0 0210 	sub.w	r2, r0, #16
   e5cda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e5cde:	f7ff ff65 	bl	e5bac <__hexdig_fun>
   e5ce2:	1e43      	subs	r3, r0, #1
   e5ce4:	b2db      	uxtb	r3, r3
   e5ce6:	2b18      	cmp	r3, #24
   e5ce8:	d804      	bhi.n	e5cf4 <__gethex+0x11e>
   e5cea:	230a      	movs	r3, #10
   e5cec:	fb03 0202 	mla	r2, r3, r2, r0
   e5cf0:	3a10      	subs	r2, #16
   e5cf2:	e7f2      	b.n	e5cda <__gethex+0x104>
   e5cf4:	f1b9 0f00 	cmp.w	r9, #0
   e5cf8:	d000      	beq.n	e5cfc <__gethex+0x126>
   e5cfa:	4252      	negs	r2, r2
   e5cfc:	4414      	add	r4, r2
   e5cfe:	e000      	b.n	e5d02 <__gethex+0x12c>
   e5d00:	4631      	mov	r1, r6
   e5d02:	f8ca 1000 	str.w	r1, [sl]
   e5d06:	b12d      	cbz	r5, e5d14 <__gethex+0x13e>
   e5d08:	f1bb 0f00 	cmp.w	fp, #0
   e5d0c:	bf14      	ite	ne
   e5d0e:	2000      	movne	r0, #0
   e5d10:	2006      	moveq	r0, #6
   e5d12:	e17c      	b.n	e600e <__gethex+0x438>
   e5d14:	1bf3      	subs	r3, r6, r7
   e5d16:	3b01      	subs	r3, #1
   e5d18:	4629      	mov	r1, r5
   e5d1a:	2b07      	cmp	r3, #7
   e5d1c:	dd02      	ble.n	e5d24 <__gethex+0x14e>
   e5d1e:	3101      	adds	r1, #1
   e5d20:	105b      	asrs	r3, r3, #1
   e5d22:	e7fa      	b.n	e5d1a <__gethex+0x144>
   e5d24:	9802      	ldr	r0, [sp, #8]
   e5d26:	f000 fb0d 	bl	e6344 <_Balloc>
   e5d2a:	9b01      	ldr	r3, [sp, #4]
   e5d2c:	f100 0a14 	add.w	sl, r0, #20
   e5d30:	f04f 0900 	mov.w	r9, #0
   e5d34:	f1c3 0301 	rsb	r3, r3, #1
   e5d38:	4605      	mov	r5, r0
   e5d3a:	f8cd a010 	str.w	sl, [sp, #16]
   e5d3e:	46cb      	mov	fp, r9
   e5d40:	9308      	str	r3, [sp, #32]
   e5d42:	42b7      	cmp	r7, r6
   e5d44:	d22f      	bcs.n	e5da6 <__gethex+0x1d0>
   e5d46:	1e73      	subs	r3, r6, #1
   e5d48:	9305      	str	r3, [sp, #20]
   e5d4a:	9a07      	ldr	r2, [sp, #28]
   e5d4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e5d50:	4293      	cmp	r3, r2
   e5d52:	d00b      	beq.n	e5d6c <__gethex+0x196>
   e5d54:	f1bb 0f20 	cmp.w	fp, #32
   e5d58:	d116      	bne.n	e5d88 <__gethex+0x1b2>
   e5d5a:	9b04      	ldr	r3, [sp, #16]
   e5d5c:	f8c3 9000 	str.w	r9, [r3]
   e5d60:	3304      	adds	r3, #4
   e5d62:	f04f 0900 	mov.w	r9, #0
   e5d66:	9304      	str	r3, [sp, #16]
   e5d68:	46cb      	mov	fp, r9
   e5d6a:	e00d      	b.n	e5d88 <__gethex+0x1b2>
   e5d6c:	9b05      	ldr	r3, [sp, #20]
   e5d6e:	9a08      	ldr	r2, [sp, #32]
   e5d70:	4413      	add	r3, r2
   e5d72:	429f      	cmp	r7, r3
   e5d74:	d8ee      	bhi.n	e5d54 <__gethex+0x17e>
   e5d76:	4618      	mov	r0, r3
   e5d78:	9a01      	ldr	r2, [sp, #4]
   e5d7a:	9903      	ldr	r1, [sp, #12]
   e5d7c:	9309      	str	r3, [sp, #36]	; 0x24
   e5d7e:	f7fe fd15 	bl	e47ac <strncmp>
   e5d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e5d84:	b168      	cbz	r0, e5da2 <__gethex+0x1cc>
   e5d86:	e7e5      	b.n	e5d54 <__gethex+0x17e>
   e5d88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e5d8c:	f7ff ff0e 	bl	e5bac <__hexdig_fun>
   e5d90:	f000 000f 	and.w	r0, r0, #15
   e5d94:	fa00 f00b 	lsl.w	r0, r0, fp
   e5d98:	9b05      	ldr	r3, [sp, #20]
   e5d9a:	ea49 0900 	orr.w	r9, r9, r0
   e5d9e:	f10b 0b04 	add.w	fp, fp, #4
   e5da2:	461e      	mov	r6, r3
   e5da4:	e7cd      	b.n	e5d42 <__gethex+0x16c>
   e5da6:	9804      	ldr	r0, [sp, #16]
   e5da8:	f840 9b04 	str.w	r9, [r0], #4
   e5dac:	ebca 0000 	rsb	r0, sl, r0
   e5db0:	1080      	asrs	r0, r0, #2
   e5db2:	6128      	str	r0, [r5, #16]
   e5db4:	0147      	lsls	r7, r0, #5
   e5db6:	4648      	mov	r0, r9
   e5db8:	f000 fb89 	bl	e64ce <__hi0bits>
   e5dbc:	f8d8 6000 	ldr.w	r6, [r8]
   e5dc0:	1a38      	subs	r0, r7, r0
   e5dc2:	42b0      	cmp	r0, r6
   e5dc4:	dd26      	ble.n	e5e14 <__gethex+0x23e>
   e5dc6:	1b87      	subs	r7, r0, r6
   e5dc8:	4639      	mov	r1, r7
   e5dca:	4628      	mov	r0, r5
   e5dcc:	f000 fe87 	bl	e6ade <__any_on>
   e5dd0:	b1c8      	cbz	r0, e5e06 <__gethex+0x230>
   e5dd2:	1e7b      	subs	r3, r7, #1
   e5dd4:	1159      	asrs	r1, r3, #5
   e5dd6:	f003 021f 	and.w	r2, r3, #31
   e5dda:	f04f 0901 	mov.w	r9, #1
   e5dde:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e5de2:	fa09 f202 	lsl.w	r2, r9, r2
   e5de6:	420a      	tst	r2, r1
   e5de8:	d00e      	beq.n	e5e08 <__gethex+0x232>
   e5dea:	454b      	cmp	r3, r9
   e5dec:	dc02      	bgt.n	e5df4 <__gethex+0x21e>
   e5dee:	f04f 0902 	mov.w	r9, #2
   e5df2:	e009      	b.n	e5e08 <__gethex+0x232>
   e5df4:	1eb9      	subs	r1, r7, #2
   e5df6:	4628      	mov	r0, r5
   e5df8:	f000 fe71 	bl	e6ade <__any_on>
   e5dfc:	2800      	cmp	r0, #0
   e5dfe:	d0f6      	beq.n	e5dee <__gethex+0x218>
   e5e00:	f04f 0903 	mov.w	r9, #3
   e5e04:	e000      	b.n	e5e08 <__gethex+0x232>
   e5e06:	4681      	mov	r9, r0
   e5e08:	4639      	mov	r1, r7
   e5e0a:	4628      	mov	r0, r5
   e5e0c:	f7ff fe98 	bl	e5b40 <rshift>
   e5e10:	443c      	add	r4, r7
   e5e12:	e00c      	b.n	e5e2e <__gethex+0x258>
   e5e14:	da09      	bge.n	e5e2a <__gethex+0x254>
   e5e16:	1a37      	subs	r7, r6, r0
   e5e18:	4629      	mov	r1, r5
   e5e1a:	463a      	mov	r2, r7
   e5e1c:	9802      	ldr	r0, [sp, #8]
   e5e1e:	f000 fc8b 	bl	e6738 <__lshift>
   e5e22:	1be4      	subs	r4, r4, r7
   e5e24:	4605      	mov	r5, r0
   e5e26:	f100 0a14 	add.w	sl, r0, #20
   e5e2a:	f04f 0900 	mov.w	r9, #0
   e5e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5e32:	429c      	cmp	r4, r3
   e5e34:	dd08      	ble.n	e5e48 <__gethex+0x272>
   e5e36:	9802      	ldr	r0, [sp, #8]
   e5e38:	4629      	mov	r1, r5
   e5e3a:	f000 fab8 	bl	e63ae <_Bfree>
   e5e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5e40:	2300      	movs	r3, #0
   e5e42:	6013      	str	r3, [r2, #0]
   e5e44:	20a3      	movs	r0, #163	; 0xa3
   e5e46:	e0e2      	b.n	e600e <__gethex+0x438>
   e5e48:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e5e4c:	4284      	cmp	r4, r0
   e5e4e:	da53      	bge.n	e5ef8 <__gethex+0x322>
   e5e50:	1b04      	subs	r4, r0, r4
   e5e52:	42a6      	cmp	r6, r4
   e5e54:	dc2e      	bgt.n	e5eb4 <__gethex+0x2de>
   e5e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5e5a:	2b02      	cmp	r3, #2
   e5e5c:	d01a      	beq.n	e5e94 <__gethex+0x2be>
   e5e5e:	2b03      	cmp	r3, #3
   e5e60:	d01c      	beq.n	e5e9c <__gethex+0x2c6>
   e5e62:	2b01      	cmp	r3, #1
   e5e64:	d11d      	bne.n	e5ea2 <__gethex+0x2cc>
   e5e66:	42a6      	cmp	r6, r4
   e5e68:	d11b      	bne.n	e5ea2 <__gethex+0x2cc>
   e5e6a:	2e01      	cmp	r6, #1
   e5e6c:	dc0b      	bgt.n	e5e86 <__gethex+0x2b0>
   e5e6e:	9a06      	ldr	r2, [sp, #24]
   e5e70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e5e74:	6013      	str	r3, [r2, #0]
   e5e76:	2301      	movs	r3, #1
   e5e78:	612b      	str	r3, [r5, #16]
   e5e7a:	f8ca 3000 	str.w	r3, [sl]
   e5e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e5e80:	2062      	movs	r0, #98	; 0x62
   e5e82:	601d      	str	r5, [r3, #0]
   e5e84:	e0c3      	b.n	e600e <__gethex+0x438>
   e5e86:	1e71      	subs	r1, r6, #1
   e5e88:	4628      	mov	r0, r5
   e5e8a:	f000 fe28 	bl	e6ade <__any_on>
   e5e8e:	2800      	cmp	r0, #0
   e5e90:	d1ed      	bne.n	e5e6e <__gethex+0x298>
   e5e92:	e006      	b.n	e5ea2 <__gethex+0x2cc>
   e5e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5e96:	2b00      	cmp	r3, #0
   e5e98:	d0e9      	beq.n	e5e6e <__gethex+0x298>
   e5e9a:	e002      	b.n	e5ea2 <__gethex+0x2cc>
   e5e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5e9e:	2b00      	cmp	r3, #0
   e5ea0:	d1e5      	bne.n	e5e6e <__gethex+0x298>
   e5ea2:	9802      	ldr	r0, [sp, #8]
   e5ea4:	4629      	mov	r1, r5
   e5ea6:	f000 fa82 	bl	e63ae <_Bfree>
   e5eaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5eac:	2300      	movs	r3, #0
   e5eae:	6013      	str	r3, [r2, #0]
   e5eb0:	2050      	movs	r0, #80	; 0x50
   e5eb2:	e0ac      	b.n	e600e <__gethex+0x438>
   e5eb4:	1e67      	subs	r7, r4, #1
   e5eb6:	f1b9 0f00 	cmp.w	r9, #0
   e5eba:	d106      	bne.n	e5eca <__gethex+0x2f4>
   e5ebc:	b13f      	cbz	r7, e5ece <__gethex+0x2f8>
   e5ebe:	4639      	mov	r1, r7
   e5ec0:	4628      	mov	r0, r5
   e5ec2:	f000 fe0c 	bl	e6ade <__any_on>
   e5ec6:	4681      	mov	r9, r0
   e5ec8:	e001      	b.n	e5ece <__gethex+0x2f8>
   e5eca:	f04f 0901 	mov.w	r9, #1
   e5ece:	117a      	asrs	r2, r7, #5
   e5ed0:	2301      	movs	r3, #1
   e5ed2:	f007 071f 	and.w	r7, r7, #31
   e5ed6:	fa03 f707 	lsl.w	r7, r3, r7
   e5eda:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e5ede:	4621      	mov	r1, r4
   e5ee0:	421f      	tst	r7, r3
   e5ee2:	4628      	mov	r0, r5
   e5ee4:	bf18      	it	ne
   e5ee6:	f049 0902 	orrne.w	r9, r9, #2
   e5eea:	1b36      	subs	r6, r6, r4
   e5eec:	f7ff fe28 	bl	e5b40 <rshift>
   e5ef0:	2702      	movs	r7, #2
   e5ef2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e5ef6:	e000      	b.n	e5efa <__gethex+0x324>
   e5ef8:	2701      	movs	r7, #1
   e5efa:	f1b9 0f00 	cmp.w	r9, #0
   e5efe:	f000 8081 	beq.w	e6004 <__gethex+0x42e>
   e5f02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5f06:	2b02      	cmp	r3, #2
   e5f08:	d00e      	beq.n	e5f28 <__gethex+0x352>
   e5f0a:	2b03      	cmp	r3, #3
   e5f0c:	d010      	beq.n	e5f30 <__gethex+0x35a>
   e5f0e:	2b01      	cmp	r3, #1
   e5f10:	d176      	bne.n	e6000 <__gethex+0x42a>
   e5f12:	f019 0f02 	tst.w	r9, #2
   e5f16:	d073      	beq.n	e6000 <__gethex+0x42a>
   e5f18:	f8da 0000 	ldr.w	r0, [sl]
   e5f1c:	ea49 0900 	orr.w	r9, r9, r0
   e5f20:	f019 0f01 	tst.w	r9, #1
   e5f24:	d107      	bne.n	e5f36 <__gethex+0x360>
   e5f26:	e06b      	b.n	e6000 <__gethex+0x42a>
   e5f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5f2a:	f1c3 0301 	rsb	r3, r3, #1
   e5f2e:	9315      	str	r3, [sp, #84]	; 0x54
   e5f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5f32:	2b00      	cmp	r3, #0
   e5f34:	d064      	beq.n	e6000 <__gethex+0x42a>
   e5f36:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e5f3a:	f105 0314 	add.w	r3, r5, #20
   e5f3e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e5f42:	eb03 0109 	add.w	r1, r3, r9
   e5f46:	2000      	movs	r0, #0
   e5f48:	681a      	ldr	r2, [r3, #0]
   e5f4a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e5f4e:	d002      	beq.n	e5f56 <__gethex+0x380>
   e5f50:	3201      	adds	r2, #1
   e5f52:	601a      	str	r2, [r3, #0]
   e5f54:	e020      	b.n	e5f98 <__gethex+0x3c2>
   e5f56:	f843 0b04 	str.w	r0, [r3], #4
   e5f5a:	4299      	cmp	r1, r3
   e5f5c:	d8f4      	bhi.n	e5f48 <__gethex+0x372>
   e5f5e:	68ab      	ldr	r3, [r5, #8]
   e5f60:	459a      	cmp	sl, r3
   e5f62:	db12      	blt.n	e5f8a <__gethex+0x3b4>
   e5f64:	6869      	ldr	r1, [r5, #4]
   e5f66:	9802      	ldr	r0, [sp, #8]
   e5f68:	3101      	adds	r1, #1
   e5f6a:	f000 f9eb 	bl	e6344 <_Balloc>
   e5f6e:	692a      	ldr	r2, [r5, #16]
   e5f70:	3202      	adds	r2, #2
   e5f72:	f105 010c 	add.w	r1, r5, #12
   e5f76:	4683      	mov	fp, r0
   e5f78:	0092      	lsls	r2, r2, #2
   e5f7a:	300c      	adds	r0, #12
   e5f7c:	f7fd fc42 	bl	e3804 <memcpy>
   e5f80:	4629      	mov	r1, r5
   e5f82:	9802      	ldr	r0, [sp, #8]
   e5f84:	f000 fa13 	bl	e63ae <_Bfree>
   e5f88:	465d      	mov	r5, fp
   e5f8a:	692b      	ldr	r3, [r5, #16]
   e5f8c:	1c5a      	adds	r2, r3, #1
   e5f8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e5f92:	612a      	str	r2, [r5, #16]
   e5f94:	2201      	movs	r2, #1
   e5f96:	615a      	str	r2, [r3, #20]
   e5f98:	2f02      	cmp	r7, #2
   e5f9a:	f105 0214 	add.w	r2, r5, #20
   e5f9e:	d111      	bne.n	e5fc4 <__gethex+0x3ee>
   e5fa0:	f8d8 3000 	ldr.w	r3, [r8]
   e5fa4:	3b01      	subs	r3, #1
   e5fa6:	429e      	cmp	r6, r3
   e5fa8:	d127      	bne.n	e5ffa <__gethex+0x424>
   e5faa:	1171      	asrs	r1, r6, #5
   e5fac:	2301      	movs	r3, #1
   e5fae:	f006 061f 	and.w	r6, r6, #31
   e5fb2:	fa03 f606 	lsl.w	r6, r3, r6
   e5fb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e5fba:	421e      	tst	r6, r3
   e5fbc:	bf0c      	ite	eq
   e5fbe:	2702      	moveq	r7, #2
   e5fc0:	2701      	movne	r7, #1
   e5fc2:	e01a      	b.n	e5ffa <__gethex+0x424>
   e5fc4:	692b      	ldr	r3, [r5, #16]
   e5fc6:	459a      	cmp	sl, r3
   e5fc8:	da0a      	bge.n	e5fe0 <__gethex+0x40a>
   e5fca:	2101      	movs	r1, #1
   e5fcc:	4628      	mov	r0, r5
   e5fce:	f7ff fdb7 	bl	e5b40 <rshift>
   e5fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5fd6:	3401      	adds	r4, #1
   e5fd8:	429c      	cmp	r4, r3
   e5fda:	f73f af2c 	bgt.w	e5e36 <__gethex+0x260>
   e5fde:	e00b      	b.n	e5ff8 <__gethex+0x422>
   e5fe0:	f016 061f 	ands.w	r6, r6, #31
   e5fe4:	d008      	beq.n	e5ff8 <__gethex+0x422>
   e5fe6:	4491      	add	r9, r2
   e5fe8:	f1c6 0620 	rsb	r6, r6, #32
   e5fec:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e5ff0:	f000 fa6d 	bl	e64ce <__hi0bits>
   e5ff4:	42b0      	cmp	r0, r6
   e5ff6:	dbe8      	blt.n	e5fca <__gethex+0x3f4>
   e5ff8:	2701      	movs	r7, #1
   e5ffa:	f047 0720 	orr.w	r7, r7, #32
   e5ffe:	e001      	b.n	e6004 <__gethex+0x42e>
   e6000:	f047 0710 	orr.w	r7, r7, #16
   e6004:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e6006:	601d      	str	r5, [r3, #0]
   e6008:	9b06      	ldr	r3, [sp, #24]
   e600a:	4638      	mov	r0, r7
   e600c:	601c      	str	r4, [r3, #0]
   e600e:	b00b      	add	sp, #44	; 0x2c
   e6010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e6014 <L_shift>:
   e6014:	f1c2 0208 	rsb	r2, r2, #8
   e6018:	0092      	lsls	r2, r2, #2
   e601a:	b570      	push	{r4, r5, r6, lr}
   e601c:	f1c2 0620 	rsb	r6, r2, #32
   e6020:	6843      	ldr	r3, [r0, #4]
   e6022:	6805      	ldr	r5, [r0, #0]
   e6024:	fa03 f406 	lsl.w	r4, r3, r6
   e6028:	432c      	orrs	r4, r5
   e602a:	40d3      	lsrs	r3, r2
   e602c:	6004      	str	r4, [r0, #0]
   e602e:	f840 3f04 	str.w	r3, [r0, #4]!
   e6032:	4288      	cmp	r0, r1
   e6034:	d3f4      	bcc.n	e6020 <L_shift+0xc>
   e6036:	bd70      	pop	{r4, r5, r6, pc}

000e6038 <__match>:
   e6038:	b530      	push	{r4, r5, lr}
   e603a:	6803      	ldr	r3, [r0, #0]
   e603c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e6040:	3301      	adds	r3, #1
   e6042:	b14c      	cbz	r4, e6058 <__match+0x20>
   e6044:	781a      	ldrb	r2, [r3, #0]
   e6046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e604a:	2d19      	cmp	r5, #25
   e604c:	bf98      	it	ls
   e604e:	3220      	addls	r2, #32
   e6050:	42a2      	cmp	r2, r4
   e6052:	d0f3      	beq.n	e603c <__match+0x4>
   e6054:	2000      	movs	r0, #0
   e6056:	bd30      	pop	{r4, r5, pc}
   e6058:	6003      	str	r3, [r0, #0]
   e605a:	2001      	movs	r0, #1
   e605c:	bd30      	pop	{r4, r5, pc}

000e605e <__hexnan>:
   e605e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e6062:	680b      	ldr	r3, [r1, #0]
   e6064:	f8d0 b000 	ldr.w	fp, [r0]
   e6068:	115e      	asrs	r6, r3, #5
   e606a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e606e:	f013 031f 	ands.w	r3, r3, #31
   e6072:	b085      	sub	sp, #20
   e6074:	bf18      	it	ne
   e6076:	3604      	addne	r6, #4
   e6078:	1f35      	subs	r5, r6, #4
   e607a:	4617      	mov	r7, r2
   e607c:	2200      	movs	r2, #0
   e607e:	4682      	mov	sl, r0
   e6080:	9301      	str	r3, [sp, #4]
   e6082:	f846 2c04 	str.w	r2, [r6, #-4]
   e6086:	46a8      	mov	r8, r5
   e6088:	462c      	mov	r4, r5
   e608a:	9200      	str	r2, [sp, #0]
   e608c:	4691      	mov	r9, r2
   e608e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e6092:	2900      	cmp	r1, #0
   e6094:	d03c      	beq.n	e6110 <__hexnan+0xb2>
   e6096:	4608      	mov	r0, r1
   e6098:	9203      	str	r2, [sp, #12]
   e609a:	9102      	str	r1, [sp, #8]
   e609c:	f7ff fd86 	bl	e5bac <__hexdig_fun>
   e60a0:	9a03      	ldr	r2, [sp, #12]
   e60a2:	bb00      	cbnz	r0, e60e6 <__hexnan+0x88>
   e60a4:	9902      	ldr	r1, [sp, #8]
   e60a6:	2920      	cmp	r1, #32
   e60a8:	d816      	bhi.n	e60d8 <__hexnan+0x7a>
   e60aa:	9b00      	ldr	r3, [sp, #0]
   e60ac:	4599      	cmp	r9, r3
   e60ae:	ddee      	ble.n	e608e <__hexnan+0x30>
   e60b0:	4544      	cmp	r4, r8
   e60b2:	d205      	bcs.n	e60c0 <__hexnan+0x62>
   e60b4:	2a07      	cmp	r2, #7
   e60b6:	dc03      	bgt.n	e60c0 <__hexnan+0x62>
   e60b8:	4641      	mov	r1, r8
   e60ba:	4620      	mov	r0, r4
   e60bc:	f7ff ffaa 	bl	e6014 <L_shift>
   e60c0:	42bc      	cmp	r4, r7
   e60c2:	d923      	bls.n	e610c <__hexnan+0xae>
   e60c4:	2300      	movs	r3, #0
   e60c6:	f1a4 0804 	sub.w	r8, r4, #4
   e60ca:	f844 3c04 	str.w	r3, [r4, #-4]
   e60ce:	f8cd 9000 	str.w	r9, [sp]
   e60d2:	4644      	mov	r4, r8
   e60d4:	461a      	mov	r2, r3
   e60d6:	e7da      	b.n	e608e <__hexnan+0x30>
   e60d8:	2929      	cmp	r1, #41	; 0x29
   e60da:	d148      	bne.n	e616e <__hexnan+0x110>
   e60dc:	f10b 0301 	add.w	r3, fp, #1
   e60e0:	f8ca 3000 	str.w	r3, [sl]
   e60e4:	e014      	b.n	e6110 <__hexnan+0xb2>
   e60e6:	3201      	adds	r2, #1
   e60e8:	2a08      	cmp	r2, #8
   e60ea:	f109 0901 	add.w	r9, r9, #1
   e60ee:	dd06      	ble.n	e60fe <__hexnan+0xa0>
   e60f0:	42bc      	cmp	r4, r7
   e60f2:	d9cc      	bls.n	e608e <__hexnan+0x30>
   e60f4:	2300      	movs	r3, #0
   e60f6:	f844 3c04 	str.w	r3, [r4, #-4]
   e60fa:	2201      	movs	r2, #1
   e60fc:	3c04      	subs	r4, #4
   e60fe:	6821      	ldr	r1, [r4, #0]
   e6100:	f000 000f 	and.w	r0, r0, #15
   e6104:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e6108:	6020      	str	r0, [r4, #0]
   e610a:	e7c0      	b.n	e608e <__hexnan+0x30>
   e610c:	2208      	movs	r2, #8
   e610e:	e7be      	b.n	e608e <__hexnan+0x30>
   e6110:	f1b9 0f00 	cmp.w	r9, #0
   e6114:	d02b      	beq.n	e616e <__hexnan+0x110>
   e6116:	4544      	cmp	r4, r8
   e6118:	d205      	bcs.n	e6126 <__hexnan+0xc8>
   e611a:	2a07      	cmp	r2, #7
   e611c:	dc03      	bgt.n	e6126 <__hexnan+0xc8>
   e611e:	4641      	mov	r1, r8
   e6120:	4620      	mov	r0, r4
   e6122:	f7ff ff77 	bl	e6014 <L_shift>
   e6126:	42bc      	cmp	r4, r7
   e6128:	d90c      	bls.n	e6144 <__hexnan+0xe6>
   e612a:	463b      	mov	r3, r7
   e612c:	f854 2b04 	ldr.w	r2, [r4], #4
   e6130:	f843 2b04 	str.w	r2, [r3], #4
   e6134:	42a5      	cmp	r5, r4
   e6136:	d2f9      	bcs.n	e612c <__hexnan+0xce>
   e6138:	2200      	movs	r2, #0
   e613a:	f843 2b04 	str.w	r2, [r3], #4
   e613e:	429d      	cmp	r5, r3
   e6140:	d2fb      	bcs.n	e613a <__hexnan+0xdc>
   e6142:	e00b      	b.n	e615c <__hexnan+0xfe>
   e6144:	9b01      	ldr	r3, [sp, #4]
   e6146:	b14b      	cbz	r3, e615c <__hexnan+0xfe>
   e6148:	f1c3 0220 	rsb	r2, r3, #32
   e614c:	f04f 33ff 	mov.w	r3, #4294967295
   e6150:	40d3      	lsrs	r3, r2
   e6152:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e6156:	4013      	ands	r3, r2
   e6158:	f846 3c04 	str.w	r3, [r6, #-4]
   e615c:	682b      	ldr	r3, [r5, #0]
   e615e:	b943      	cbnz	r3, e6172 <__hexnan+0x114>
   e6160:	42bd      	cmp	r5, r7
   e6162:	d102      	bne.n	e616a <__hexnan+0x10c>
   e6164:	2301      	movs	r3, #1
   e6166:	602b      	str	r3, [r5, #0]
   e6168:	e003      	b.n	e6172 <__hexnan+0x114>
   e616a:	3d04      	subs	r5, #4
   e616c:	e7f6      	b.n	e615c <__hexnan+0xfe>
   e616e:	2004      	movs	r0, #4
   e6170:	e000      	b.n	e6174 <__hexnan+0x116>
   e6172:	2005      	movs	r0, #5
   e6174:	b005      	add	sp, #20
   e6176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e617c <_findenv_r>:
   e617c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e6180:	4607      	mov	r7, r0
   e6182:	468b      	mov	fp, r1
   e6184:	4690      	mov	r8, r2
   e6186:	f000 fcda 	bl	e6b3e <__env_lock>
   e618a:	4b19      	ldr	r3, [pc, #100]	; (e61f0 <_findenv_r+0x74>)
   e618c:	681d      	ldr	r5, [r3, #0]
   e618e:	469a      	mov	sl, r3
   e6190:	b13d      	cbz	r5, e61a2 <_findenv_r+0x26>
   e6192:	465c      	mov	r4, fp
   e6194:	4623      	mov	r3, r4
   e6196:	f813 2b01 	ldrb.w	r2, [r3], #1
   e619a:	b142      	cbz	r2, e61ae <_findenv_r+0x32>
   e619c:	2a3d      	cmp	r2, #61	; 0x3d
   e619e:	461c      	mov	r4, r3
   e61a0:	d1f8      	bne.n	e6194 <_findenv_r+0x18>
   e61a2:	4638      	mov	r0, r7
   e61a4:	f000 fccc 	bl	e6b40 <__env_unlock>
   e61a8:	2000      	movs	r0, #0
   e61aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e61ae:	ebcb 0404 	rsb	r4, fp, r4
   e61b2:	46a9      	mov	r9, r5
   e61b4:	f859 0b04 	ldr.w	r0, [r9], #4
   e61b8:	2800      	cmp	r0, #0
   e61ba:	d0f2      	beq.n	e61a2 <_findenv_r+0x26>
   e61bc:	4622      	mov	r2, r4
   e61be:	4659      	mov	r1, fp
   e61c0:	f7fe faf4 	bl	e47ac <strncmp>
   e61c4:	b988      	cbnz	r0, e61ea <_findenv_r+0x6e>
   e61c6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e61ca:	191e      	adds	r6, r3, r4
   e61cc:	5d1b      	ldrb	r3, [r3, r4]
   e61ce:	2b3d      	cmp	r3, #61	; 0x3d
   e61d0:	d10b      	bne.n	e61ea <_findenv_r+0x6e>
   e61d2:	f8da 3000 	ldr.w	r3, [sl]
   e61d6:	1aed      	subs	r5, r5, r3
   e61d8:	10ad      	asrs	r5, r5, #2
   e61da:	4638      	mov	r0, r7
   e61dc:	f8c8 5000 	str.w	r5, [r8]
   e61e0:	f000 fcae 	bl	e6b40 <__env_unlock>
   e61e4:	1c70      	adds	r0, r6, #1
   e61e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e61ea:	464d      	mov	r5, r9
   e61ec:	e7e1      	b.n	e61b2 <_findenv_r+0x36>
   e61ee:	bf00      	nop
   e61f0:	2003d6ac 	.word	0x2003d6ac

000e61f4 <_getenv_r>:
   e61f4:	b507      	push	{r0, r1, r2, lr}
   e61f6:	aa01      	add	r2, sp, #4
   e61f8:	f7ff ffc0 	bl	e617c <_findenv_r>
   e61fc:	b003      	add	sp, #12
   e61fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e6204 <__gettzinfo>:
   e6204:	4800      	ldr	r0, [pc, #0]	; (e6208 <__gettzinfo+0x4>)
   e6206:	4770      	bx	lr
   e6208:	2003d66c 	.word	0x2003d66c

000e620c <gmtime_r>:
   e620c:	6802      	ldr	r2, [r0, #0]
   e620e:	4b47      	ldr	r3, [pc, #284]	; (e632c <gmtime_r+0x120>)
   e6210:	b5f0      	push	{r4, r5, r6, r7, lr}
   e6212:	fb92 f4f3 	sdiv	r4, r2, r3
   e6216:	fb03 2214 	mls	r2, r3, r4, r2
   e621a:	2a00      	cmp	r2, #0
   e621c:	bfbc      	itt	lt
   e621e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e6222:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e6226:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e622a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e622e:	fb92 f3f0 	sdiv	r3, r2, r0
   e6232:	fb00 2213 	mls	r2, r0, r3, r2
   e6236:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e623a:	bfac      	ite	ge
   e623c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e6240:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e6244:	608b      	str	r3, [r1, #8]
   e6246:	fb92 f3f0 	sdiv	r3, r2, r0
   e624a:	fb00 2213 	mls	r2, r0, r3, r2
   e624e:	604b      	str	r3, [r1, #4]
   e6250:	600a      	str	r2, [r1, #0]
   e6252:	2307      	movs	r3, #7
   e6254:	1ce2      	adds	r2, r4, #3
   e6256:	fb92 f3f3 	sdiv	r3, r2, r3
   e625a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e625e:	1ad3      	subs	r3, r2, r3
   e6260:	618b      	str	r3, [r1, #24]
   e6262:	4b33      	ldr	r3, [pc, #204]	; (e6330 <gmtime_r+0x124>)
   e6264:	4d33      	ldr	r5, [pc, #204]	; (e6334 <gmtime_r+0x128>)
   e6266:	fb94 f5f5 	sdiv	r5, r4, r5
   e626a:	fb03 4405 	mla	r4, r3, r5, r4
   e626e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e6272:	fbb4 f2f2 	udiv	r2, r4, r2
   e6276:	4422      	add	r2, r4
   e6278:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e627c:	fbb4 f3f7 	udiv	r3, r4, r7
   e6280:	1ad2      	subs	r2, r2, r3
   e6282:	482d      	ldr	r0, [pc, #180]	; (e6338 <gmtime_r+0x12c>)
   e6284:	fbb4 f0f0 	udiv	r0, r4, r0
   e6288:	f648 6694 	movw	r6, #36500	; 0x8e94
   e628c:	1a13      	subs	r3, r2, r0
   e628e:	fbb3 f6f6 	udiv	r6, r3, r6
   e6292:	4434      	add	r4, r6
   e6294:	f240 126d 	movw	r2, #365	; 0x16d
   e6298:	fbb3 f0f2 	udiv	r0, r3, r2
   e629c:	fbb3 f3f7 	udiv	r3, r3, r7
   e62a0:	1ae3      	subs	r3, r4, r3
   e62a2:	fb02 3310 	mls	r3, r2, r0, r3
   e62a6:	2499      	movs	r4, #153	; 0x99
   e62a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e62ac:	3202      	adds	r2, #2
   e62ae:	fbb2 f2f4 	udiv	r2, r2, r4
   e62b2:	2a0a      	cmp	r2, #10
   e62b4:	fb04 f402 	mul.w	r4, r4, r2
   e62b8:	f104 0602 	add.w	r6, r4, #2
   e62bc:	f04f 0405 	mov.w	r4, #5
   e62c0:	fbb6 f4f4 	udiv	r4, r6, r4
   e62c4:	bf34      	ite	cc
   e62c6:	2602      	movcc	r6, #2
   e62c8:	f06f 0609 	mvncs.w	r6, #9
   e62cc:	4416      	add	r6, r2
   e62ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e62d2:	fb02 0505 	mla	r5, r2, r5, r0
   e62d6:	1c5f      	adds	r7, r3, #1
   e62d8:	2e01      	cmp	r6, #1
   e62da:	bf98      	it	ls
   e62dc:	3501      	addls	r5, #1
   e62de:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e62e2:	eba7 0704 	sub.w	r7, r7, r4
   e62e6:	d302      	bcc.n	e62ee <gmtime_r+0xe2>
   e62e8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e62ec:	e014      	b.n	e6318 <gmtime_r+0x10c>
   e62ee:	0782      	lsls	r2, r0, #30
   e62f0:	d105      	bne.n	e62fe <gmtime_r+0xf2>
   e62f2:	2464      	movs	r4, #100	; 0x64
   e62f4:	fbb0 f2f4 	udiv	r2, r0, r4
   e62f8:	fb04 0212 	mls	r2, r4, r2, r0
   e62fc:	b94a      	cbnz	r2, e6312 <gmtime_r+0x106>
   e62fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6302:	fbb0 f4f2 	udiv	r4, r0, r2
   e6306:	fb02 0014 	mls	r0, r2, r4, r0
   e630a:	fab0 f280 	clz	r2, r0
   e630e:	0952      	lsrs	r2, r2, #5
   e6310:	e000      	b.n	e6314 <gmtime_r+0x108>
   e6312:	2201      	movs	r2, #1
   e6314:	333b      	adds	r3, #59	; 0x3b
   e6316:	441a      	add	r2, r3
   e6318:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e631c:	2300      	movs	r3, #0
   e631e:	61ca      	str	r2, [r1, #28]
   e6320:	614d      	str	r5, [r1, #20]
   e6322:	610e      	str	r6, [r1, #16]
   e6324:	60cf      	str	r7, [r1, #12]
   e6326:	620b      	str	r3, [r1, #32]
   e6328:	4608      	mov	r0, r1
   e632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e632c:	00015180 	.word	0x00015180
   e6330:	fffdc54f 	.word	0xfffdc54f
   e6334:	00023ab1 	.word	0x00023ab1
   e6338:	00023ab0 	.word	0x00023ab0

000e633c <labs>:
   e633c:	2800      	cmp	r0, #0
   e633e:	bfb8      	it	lt
   e6340:	4240      	neglt	r0, r0
   e6342:	4770      	bx	lr

000e6344 <_Balloc>:
   e6344:	b570      	push	{r4, r5, r6, lr}
   e6346:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e6348:	4604      	mov	r4, r0
   e634a:	460e      	mov	r6, r1
   e634c:	b93d      	cbnz	r5, e635e <_Balloc+0x1a>
   e634e:	2010      	movs	r0, #16
   e6350:	f7f4 fc44 	bl	dabdc <malloc>
   e6354:	6260      	str	r0, [r4, #36]	; 0x24
   e6356:	6045      	str	r5, [r0, #4]
   e6358:	6085      	str	r5, [r0, #8]
   e635a:	6005      	str	r5, [r0, #0]
   e635c:	60c5      	str	r5, [r0, #12]
   e635e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e6360:	68eb      	ldr	r3, [r5, #12]
   e6362:	b143      	cbz	r3, e6376 <_Balloc+0x32>
   e6364:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6366:	68db      	ldr	r3, [r3, #12]
   e6368:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e636c:	b178      	cbz	r0, e638e <_Balloc+0x4a>
   e636e:	6802      	ldr	r2, [r0, #0]
   e6370:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e6374:	e017      	b.n	e63a6 <_Balloc+0x62>
   e6376:	2221      	movs	r2, #33	; 0x21
   e6378:	2104      	movs	r1, #4
   e637a:	4620      	mov	r0, r4
   e637c:	f000 fbd1 	bl	e6b22 <_calloc_r>
   e6380:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6382:	60e8      	str	r0, [r5, #12]
   e6384:	68db      	ldr	r3, [r3, #12]
   e6386:	2b00      	cmp	r3, #0
   e6388:	d1ec      	bne.n	e6364 <_Balloc+0x20>
   e638a:	2000      	movs	r0, #0
   e638c:	bd70      	pop	{r4, r5, r6, pc}
   e638e:	2101      	movs	r1, #1
   e6390:	fa01 f506 	lsl.w	r5, r1, r6
   e6394:	1d6a      	adds	r2, r5, #5
   e6396:	0092      	lsls	r2, r2, #2
   e6398:	4620      	mov	r0, r4
   e639a:	f000 fbc2 	bl	e6b22 <_calloc_r>
   e639e:	2800      	cmp	r0, #0
   e63a0:	d0f3      	beq.n	e638a <_Balloc+0x46>
   e63a2:	6046      	str	r6, [r0, #4]
   e63a4:	6085      	str	r5, [r0, #8]
   e63a6:	2300      	movs	r3, #0
   e63a8:	6103      	str	r3, [r0, #16]
   e63aa:	60c3      	str	r3, [r0, #12]
   e63ac:	bd70      	pop	{r4, r5, r6, pc}

000e63ae <_Bfree>:
   e63ae:	b570      	push	{r4, r5, r6, lr}
   e63b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e63b2:	4606      	mov	r6, r0
   e63b4:	460d      	mov	r5, r1
   e63b6:	b93c      	cbnz	r4, e63c8 <_Bfree+0x1a>
   e63b8:	2010      	movs	r0, #16
   e63ba:	f7f4 fc0f 	bl	dabdc <malloc>
   e63be:	6270      	str	r0, [r6, #36]	; 0x24
   e63c0:	6044      	str	r4, [r0, #4]
   e63c2:	6084      	str	r4, [r0, #8]
   e63c4:	6004      	str	r4, [r0, #0]
   e63c6:	60c4      	str	r4, [r0, #12]
   e63c8:	b13d      	cbz	r5, e63da <_Bfree+0x2c>
   e63ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e63cc:	686a      	ldr	r2, [r5, #4]
   e63ce:	68db      	ldr	r3, [r3, #12]
   e63d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e63d4:	6029      	str	r1, [r5, #0]
   e63d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e63da:	bd70      	pop	{r4, r5, r6, pc}

000e63dc <__multadd>:
   e63dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e63e0:	690d      	ldr	r5, [r1, #16]
   e63e2:	461f      	mov	r7, r3
   e63e4:	4606      	mov	r6, r0
   e63e6:	460c      	mov	r4, r1
   e63e8:	f101 0e14 	add.w	lr, r1, #20
   e63ec:	2300      	movs	r3, #0
   e63ee:	f8de 0000 	ldr.w	r0, [lr]
   e63f2:	b281      	uxth	r1, r0
   e63f4:	fb02 7101 	mla	r1, r2, r1, r7
   e63f8:	0c0f      	lsrs	r7, r1, #16
   e63fa:	0c00      	lsrs	r0, r0, #16
   e63fc:	fb02 7000 	mla	r0, r2, r0, r7
   e6400:	b289      	uxth	r1, r1
   e6402:	3301      	adds	r3, #1
   e6404:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e6408:	429d      	cmp	r5, r3
   e640a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e640e:	f84e 1b04 	str.w	r1, [lr], #4
   e6412:	dcec      	bgt.n	e63ee <__multadd+0x12>
   e6414:	b1d7      	cbz	r7, e644c <__multadd+0x70>
   e6416:	68a3      	ldr	r3, [r4, #8]
   e6418:	429d      	cmp	r5, r3
   e641a:	db12      	blt.n	e6442 <__multadd+0x66>
   e641c:	6861      	ldr	r1, [r4, #4]
   e641e:	4630      	mov	r0, r6
   e6420:	3101      	adds	r1, #1
   e6422:	f7ff ff8f 	bl	e6344 <_Balloc>
   e6426:	6922      	ldr	r2, [r4, #16]
   e6428:	3202      	adds	r2, #2
   e642a:	f104 010c 	add.w	r1, r4, #12
   e642e:	4680      	mov	r8, r0
   e6430:	0092      	lsls	r2, r2, #2
   e6432:	300c      	adds	r0, #12
   e6434:	f7fd f9e6 	bl	e3804 <memcpy>
   e6438:	4621      	mov	r1, r4
   e643a:	4630      	mov	r0, r6
   e643c:	f7ff ffb7 	bl	e63ae <_Bfree>
   e6440:	4644      	mov	r4, r8
   e6442:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e6446:	3501      	adds	r5, #1
   e6448:	615f      	str	r7, [r3, #20]
   e644a:	6125      	str	r5, [r4, #16]
   e644c:	4620      	mov	r0, r4
   e644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e6452 <__s2b>:
   e6452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6456:	460c      	mov	r4, r1
   e6458:	4615      	mov	r5, r2
   e645a:	461f      	mov	r7, r3
   e645c:	2209      	movs	r2, #9
   e645e:	3308      	adds	r3, #8
   e6460:	4606      	mov	r6, r0
   e6462:	fb93 f3f2 	sdiv	r3, r3, r2
   e6466:	2100      	movs	r1, #0
   e6468:	2201      	movs	r2, #1
   e646a:	429a      	cmp	r2, r3
   e646c:	da02      	bge.n	e6474 <__s2b+0x22>
   e646e:	0052      	lsls	r2, r2, #1
   e6470:	3101      	adds	r1, #1
   e6472:	e7fa      	b.n	e646a <__s2b+0x18>
   e6474:	4630      	mov	r0, r6
   e6476:	f7ff ff65 	bl	e6344 <_Balloc>
   e647a:	9b08      	ldr	r3, [sp, #32]
   e647c:	6143      	str	r3, [r0, #20]
   e647e:	2d09      	cmp	r5, #9
   e6480:	f04f 0301 	mov.w	r3, #1
   e6484:	6103      	str	r3, [r0, #16]
   e6486:	dd11      	ble.n	e64ac <__s2b+0x5a>
   e6488:	f104 0809 	add.w	r8, r4, #9
   e648c:	46c1      	mov	r9, r8
   e648e:	442c      	add	r4, r5
   e6490:	f819 3b01 	ldrb.w	r3, [r9], #1
   e6494:	4601      	mov	r1, r0
   e6496:	3b30      	subs	r3, #48	; 0x30
   e6498:	220a      	movs	r2, #10
   e649a:	4630      	mov	r0, r6
   e649c:	f7ff ff9e 	bl	e63dc <__multadd>
   e64a0:	45a1      	cmp	r9, r4
   e64a2:	d1f5      	bne.n	e6490 <__s2b+0x3e>
   e64a4:	eb08 0405 	add.w	r4, r8, r5
   e64a8:	3c08      	subs	r4, #8
   e64aa:	e001      	b.n	e64b0 <__s2b+0x5e>
   e64ac:	340a      	adds	r4, #10
   e64ae:	2509      	movs	r5, #9
   e64b0:	1b2d      	subs	r5, r5, r4
   e64b2:	1963      	adds	r3, r4, r5
   e64b4:	429f      	cmp	r7, r3
   e64b6:	dd08      	ble.n	e64ca <__s2b+0x78>
   e64b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   e64bc:	4601      	mov	r1, r0
   e64be:	3b30      	subs	r3, #48	; 0x30
   e64c0:	220a      	movs	r2, #10
   e64c2:	4630      	mov	r0, r6
   e64c4:	f7ff ff8a 	bl	e63dc <__multadd>
   e64c8:	e7f3      	b.n	e64b2 <__s2b+0x60>
   e64ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e64ce <__hi0bits>:
   e64ce:	0c03      	lsrs	r3, r0, #16
   e64d0:	041b      	lsls	r3, r3, #16
   e64d2:	b913      	cbnz	r3, e64da <__hi0bits+0xc>
   e64d4:	0400      	lsls	r0, r0, #16
   e64d6:	2310      	movs	r3, #16
   e64d8:	e000      	b.n	e64dc <__hi0bits+0xe>
   e64da:	2300      	movs	r3, #0
   e64dc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e64e0:	bf04      	itt	eq
   e64e2:	0200      	lsleq	r0, r0, #8
   e64e4:	3308      	addeq	r3, #8
   e64e6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e64ea:	bf04      	itt	eq
   e64ec:	0100      	lsleq	r0, r0, #4
   e64ee:	3304      	addeq	r3, #4
   e64f0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e64f4:	bf04      	itt	eq
   e64f6:	0080      	lsleq	r0, r0, #2
   e64f8:	3302      	addeq	r3, #2
   e64fa:	2800      	cmp	r0, #0
   e64fc:	db03      	blt.n	e6506 <__hi0bits+0x38>
   e64fe:	0042      	lsls	r2, r0, #1
   e6500:	d503      	bpl.n	e650a <__hi0bits+0x3c>
   e6502:	1c58      	adds	r0, r3, #1
   e6504:	4770      	bx	lr
   e6506:	4618      	mov	r0, r3
   e6508:	4770      	bx	lr
   e650a:	2020      	movs	r0, #32
   e650c:	4770      	bx	lr

000e650e <__lo0bits>:
   e650e:	6803      	ldr	r3, [r0, #0]
   e6510:	f013 0207 	ands.w	r2, r3, #7
   e6514:	d00b      	beq.n	e652e <__lo0bits+0x20>
   e6516:	07d9      	lsls	r1, r3, #31
   e6518:	d422      	bmi.n	e6560 <__lo0bits+0x52>
   e651a:	079a      	lsls	r2, r3, #30
   e651c:	bf4b      	itete	mi
   e651e:	085b      	lsrmi	r3, r3, #1
   e6520:	089b      	lsrpl	r3, r3, #2
   e6522:	6003      	strmi	r3, [r0, #0]
   e6524:	6003      	strpl	r3, [r0, #0]
   e6526:	bf4c      	ite	mi
   e6528:	2001      	movmi	r0, #1
   e652a:	2002      	movpl	r0, #2
   e652c:	4770      	bx	lr
   e652e:	b299      	uxth	r1, r3
   e6530:	b909      	cbnz	r1, e6536 <__lo0bits+0x28>
   e6532:	0c1b      	lsrs	r3, r3, #16
   e6534:	2210      	movs	r2, #16
   e6536:	f013 0fff 	tst.w	r3, #255	; 0xff
   e653a:	bf04      	itt	eq
   e653c:	0a1b      	lsreq	r3, r3, #8
   e653e:	3208      	addeq	r2, #8
   e6540:	0719      	lsls	r1, r3, #28
   e6542:	bf04      	itt	eq
   e6544:	091b      	lsreq	r3, r3, #4
   e6546:	3204      	addeq	r2, #4
   e6548:	0799      	lsls	r1, r3, #30
   e654a:	bf04      	itt	eq
   e654c:	089b      	lsreq	r3, r3, #2
   e654e:	3202      	addeq	r2, #2
   e6550:	07d9      	lsls	r1, r3, #31
   e6552:	d402      	bmi.n	e655a <__lo0bits+0x4c>
   e6554:	085b      	lsrs	r3, r3, #1
   e6556:	d005      	beq.n	e6564 <__lo0bits+0x56>
   e6558:	3201      	adds	r2, #1
   e655a:	6003      	str	r3, [r0, #0]
   e655c:	4610      	mov	r0, r2
   e655e:	4770      	bx	lr
   e6560:	2000      	movs	r0, #0
   e6562:	4770      	bx	lr
   e6564:	2020      	movs	r0, #32
   e6566:	4770      	bx	lr

000e6568 <__i2b>:
   e6568:	b510      	push	{r4, lr}
   e656a:	460c      	mov	r4, r1
   e656c:	2101      	movs	r1, #1
   e656e:	f7ff fee9 	bl	e6344 <_Balloc>
   e6572:	2201      	movs	r2, #1
   e6574:	6144      	str	r4, [r0, #20]
   e6576:	6102      	str	r2, [r0, #16]
   e6578:	bd10      	pop	{r4, pc}

000e657a <__multiply>:
   e657a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e657e:	4614      	mov	r4, r2
   e6580:	690a      	ldr	r2, [r1, #16]
   e6582:	6923      	ldr	r3, [r4, #16]
   e6584:	429a      	cmp	r2, r3
   e6586:	bfb8      	it	lt
   e6588:	460b      	movlt	r3, r1
   e658a:	4688      	mov	r8, r1
   e658c:	bfbc      	itt	lt
   e658e:	46a0      	movlt	r8, r4
   e6590:	461c      	movlt	r4, r3
   e6592:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e6596:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e659a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e659e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e65a2:	eb07 0609 	add.w	r6, r7, r9
   e65a6:	429e      	cmp	r6, r3
   e65a8:	bfc8      	it	gt
   e65aa:	3101      	addgt	r1, #1
   e65ac:	f7ff feca 	bl	e6344 <_Balloc>
   e65b0:	f100 0514 	add.w	r5, r0, #20
   e65b4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e65b8:	462b      	mov	r3, r5
   e65ba:	2200      	movs	r2, #0
   e65bc:	4563      	cmp	r3, ip
   e65be:	d202      	bcs.n	e65c6 <__multiply+0x4c>
   e65c0:	f843 2b04 	str.w	r2, [r3], #4
   e65c4:	e7fa      	b.n	e65bc <__multiply+0x42>
   e65c6:	f104 0214 	add.w	r2, r4, #20
   e65ca:	f108 0114 	add.w	r1, r8, #20
   e65ce:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e65d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e65d6:	9300      	str	r3, [sp, #0]
   e65d8:	9b00      	ldr	r3, [sp, #0]
   e65da:	9201      	str	r2, [sp, #4]
   e65dc:	4293      	cmp	r3, r2
   e65de:	d957      	bls.n	e6690 <__multiply+0x116>
   e65e0:	f8b2 b000 	ldrh.w	fp, [r2]
   e65e4:	f1bb 0f00 	cmp.w	fp, #0
   e65e8:	d023      	beq.n	e6632 <__multiply+0xb8>
   e65ea:	4689      	mov	r9, r1
   e65ec:	46ae      	mov	lr, r5
   e65ee:	f04f 0800 	mov.w	r8, #0
   e65f2:	f859 4b04 	ldr.w	r4, [r9], #4
   e65f6:	f8be a000 	ldrh.w	sl, [lr]
   e65fa:	b2a3      	uxth	r3, r4
   e65fc:	fb0b a303 	mla	r3, fp, r3, sl
   e6600:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e6604:	f8de 4000 	ldr.w	r4, [lr]
   e6608:	4443      	add	r3, r8
   e660a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e660e:	fb0b 840a 	mla	r4, fp, sl, r8
   e6612:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e6616:	46f2      	mov	sl, lr
   e6618:	b29b      	uxth	r3, r3
   e661a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e661e:	454f      	cmp	r7, r9
   e6620:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e6624:	f84a 3b04 	str.w	r3, [sl], #4
   e6628:	d901      	bls.n	e662e <__multiply+0xb4>
   e662a:	46d6      	mov	lr, sl
   e662c:	e7e1      	b.n	e65f2 <__multiply+0x78>
   e662e:	f8ce 8004 	str.w	r8, [lr, #4]
   e6632:	9b01      	ldr	r3, [sp, #4]
   e6634:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e6638:	3204      	adds	r2, #4
   e663a:	f1ba 0f00 	cmp.w	sl, #0
   e663e:	d021      	beq.n	e6684 <__multiply+0x10a>
   e6640:	682b      	ldr	r3, [r5, #0]
   e6642:	462c      	mov	r4, r5
   e6644:	4689      	mov	r9, r1
   e6646:	f04f 0800 	mov.w	r8, #0
   e664a:	f8b9 e000 	ldrh.w	lr, [r9]
   e664e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e6652:	fb0a be0e 	mla	lr, sl, lr, fp
   e6656:	44f0      	add	r8, lr
   e6658:	46a3      	mov	fp, r4
   e665a:	b29b      	uxth	r3, r3
   e665c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e6660:	f84b 3b04 	str.w	r3, [fp], #4
   e6664:	f859 3b04 	ldr.w	r3, [r9], #4
   e6668:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e666c:	0c1b      	lsrs	r3, r3, #16
   e666e:	fb0a e303 	mla	r3, sl, r3, lr
   e6672:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e6676:	454f      	cmp	r7, r9
   e6678:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e667c:	d901      	bls.n	e6682 <__multiply+0x108>
   e667e:	465c      	mov	r4, fp
   e6680:	e7e3      	b.n	e664a <__multiply+0xd0>
   e6682:	6063      	str	r3, [r4, #4]
   e6684:	3504      	adds	r5, #4
   e6686:	e7a7      	b.n	e65d8 <__multiply+0x5e>
   e6688:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e668c:	b913      	cbnz	r3, e6694 <__multiply+0x11a>
   e668e:	3e01      	subs	r6, #1
   e6690:	2e00      	cmp	r6, #0
   e6692:	dcf9      	bgt.n	e6688 <__multiply+0x10e>
   e6694:	6106      	str	r6, [r0, #16]
   e6696:	b003      	add	sp, #12
   e6698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e669c <__pow5mult>:
   e669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e66a0:	4615      	mov	r5, r2
   e66a2:	f012 0203 	ands.w	r2, r2, #3
   e66a6:	4606      	mov	r6, r0
   e66a8:	460f      	mov	r7, r1
   e66aa:	d007      	beq.n	e66bc <__pow5mult+0x20>
   e66ac:	3a01      	subs	r2, #1
   e66ae:	4c21      	ldr	r4, [pc, #132]	; (e6734 <__pow5mult+0x98>)
   e66b0:	2300      	movs	r3, #0
   e66b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e66b6:	f7ff fe91 	bl	e63dc <__multadd>
   e66ba:	4607      	mov	r7, r0
   e66bc:	10ad      	asrs	r5, r5, #2
   e66be:	d036      	beq.n	e672e <__pow5mult+0x92>
   e66c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e66c2:	b93c      	cbnz	r4, e66d4 <__pow5mult+0x38>
   e66c4:	2010      	movs	r0, #16
   e66c6:	f7f4 fa89 	bl	dabdc <malloc>
   e66ca:	6270      	str	r0, [r6, #36]	; 0x24
   e66cc:	6044      	str	r4, [r0, #4]
   e66ce:	6084      	str	r4, [r0, #8]
   e66d0:	6004      	str	r4, [r0, #0]
   e66d2:	60c4      	str	r4, [r0, #12]
   e66d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e66d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e66dc:	b94c      	cbnz	r4, e66f2 <__pow5mult+0x56>
   e66de:	f240 2171 	movw	r1, #625	; 0x271
   e66e2:	4630      	mov	r0, r6
   e66e4:	f7ff ff40 	bl	e6568 <__i2b>
   e66e8:	2300      	movs	r3, #0
   e66ea:	f8c8 0008 	str.w	r0, [r8, #8]
   e66ee:	4604      	mov	r4, r0
   e66f0:	6003      	str	r3, [r0, #0]
   e66f2:	f04f 0800 	mov.w	r8, #0
   e66f6:	07eb      	lsls	r3, r5, #31
   e66f8:	d50a      	bpl.n	e6710 <__pow5mult+0x74>
   e66fa:	4639      	mov	r1, r7
   e66fc:	4622      	mov	r2, r4
   e66fe:	4630      	mov	r0, r6
   e6700:	f7ff ff3b 	bl	e657a <__multiply>
   e6704:	4639      	mov	r1, r7
   e6706:	4681      	mov	r9, r0
   e6708:	4630      	mov	r0, r6
   e670a:	f7ff fe50 	bl	e63ae <_Bfree>
   e670e:	464f      	mov	r7, r9
   e6710:	106d      	asrs	r5, r5, #1
   e6712:	d00c      	beq.n	e672e <__pow5mult+0x92>
   e6714:	6820      	ldr	r0, [r4, #0]
   e6716:	b108      	cbz	r0, e671c <__pow5mult+0x80>
   e6718:	4604      	mov	r4, r0
   e671a:	e7ec      	b.n	e66f6 <__pow5mult+0x5a>
   e671c:	4622      	mov	r2, r4
   e671e:	4621      	mov	r1, r4
   e6720:	4630      	mov	r0, r6
   e6722:	f7ff ff2a 	bl	e657a <__multiply>
   e6726:	6020      	str	r0, [r4, #0]
   e6728:	f8c0 8000 	str.w	r8, [r0]
   e672c:	e7f4      	b.n	e6718 <__pow5mult+0x7c>
   e672e:	4638      	mov	r0, r7
   e6730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e6734:	000e8be8 	.word	0x000e8be8

000e6738 <__lshift>:
   e6738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e673c:	460c      	mov	r4, r1
   e673e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e6742:	6926      	ldr	r6, [r4, #16]
   e6744:	6849      	ldr	r1, [r1, #4]
   e6746:	68a3      	ldr	r3, [r4, #8]
   e6748:	4456      	add	r6, sl
   e674a:	4607      	mov	r7, r0
   e674c:	4691      	mov	r9, r2
   e674e:	1c75      	adds	r5, r6, #1
   e6750:	42ab      	cmp	r3, r5
   e6752:	da02      	bge.n	e675a <__lshift+0x22>
   e6754:	3101      	adds	r1, #1
   e6756:	005b      	lsls	r3, r3, #1
   e6758:	e7fa      	b.n	e6750 <__lshift+0x18>
   e675a:	4638      	mov	r0, r7
   e675c:	f7ff fdf2 	bl	e6344 <_Balloc>
   e6760:	2300      	movs	r3, #0
   e6762:	4680      	mov	r8, r0
   e6764:	f100 0114 	add.w	r1, r0, #20
   e6768:	461a      	mov	r2, r3
   e676a:	4553      	cmp	r3, sl
   e676c:	da03      	bge.n	e6776 <__lshift+0x3e>
   e676e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e6772:	3301      	adds	r3, #1
   e6774:	e7f9      	b.n	e676a <__lshift+0x32>
   e6776:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e677a:	6920      	ldr	r0, [r4, #16]
   e677c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e6780:	f019 091f 	ands.w	r9, r9, #31
   e6784:	f104 0114 	add.w	r1, r4, #20
   e6788:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e678c:	d014      	beq.n	e67b8 <__lshift+0x80>
   e678e:	f1c9 0c20 	rsb	ip, r9, #32
   e6792:	2200      	movs	r2, #0
   e6794:	6808      	ldr	r0, [r1, #0]
   e6796:	fa00 f009 	lsl.w	r0, r0, r9
   e679a:	4302      	orrs	r2, r0
   e679c:	469a      	mov	sl, r3
   e679e:	f843 2b04 	str.w	r2, [r3], #4
   e67a2:	f851 2b04 	ldr.w	r2, [r1], #4
   e67a6:	458e      	cmp	lr, r1
   e67a8:	fa22 f20c 	lsr.w	r2, r2, ip
   e67ac:	d8f2      	bhi.n	e6794 <__lshift+0x5c>
   e67ae:	f8ca 2004 	str.w	r2, [sl, #4]
   e67b2:	b142      	cbz	r2, e67c6 <__lshift+0x8e>
   e67b4:	1cb5      	adds	r5, r6, #2
   e67b6:	e006      	b.n	e67c6 <__lshift+0x8e>
   e67b8:	3b04      	subs	r3, #4
   e67ba:	f851 2b04 	ldr.w	r2, [r1], #4
   e67be:	f843 2f04 	str.w	r2, [r3, #4]!
   e67c2:	458e      	cmp	lr, r1
   e67c4:	d8f9      	bhi.n	e67ba <__lshift+0x82>
   e67c6:	3d01      	subs	r5, #1
   e67c8:	4638      	mov	r0, r7
   e67ca:	f8c8 5010 	str.w	r5, [r8, #16]
   e67ce:	4621      	mov	r1, r4
   e67d0:	f7ff fded 	bl	e63ae <_Bfree>
   e67d4:	4640      	mov	r0, r8
   e67d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e67da <__mcmp>:
   e67da:	6903      	ldr	r3, [r0, #16]
   e67dc:	690a      	ldr	r2, [r1, #16]
   e67de:	1a9b      	subs	r3, r3, r2
   e67e0:	b510      	push	{r4, lr}
   e67e2:	d111      	bne.n	e6808 <__mcmp+0x2e>
   e67e4:	0092      	lsls	r2, r2, #2
   e67e6:	3014      	adds	r0, #20
   e67e8:	3114      	adds	r1, #20
   e67ea:	1883      	adds	r3, r0, r2
   e67ec:	440a      	add	r2, r1
   e67ee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e67f2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e67f6:	428c      	cmp	r4, r1
   e67f8:	d002      	beq.n	e6800 <__mcmp+0x26>
   e67fa:	d307      	bcc.n	e680c <__mcmp+0x32>
   e67fc:	2001      	movs	r0, #1
   e67fe:	bd10      	pop	{r4, pc}
   e6800:	4298      	cmp	r0, r3
   e6802:	d3f4      	bcc.n	e67ee <__mcmp+0x14>
   e6804:	2000      	movs	r0, #0
   e6806:	bd10      	pop	{r4, pc}
   e6808:	4618      	mov	r0, r3
   e680a:	bd10      	pop	{r4, pc}
   e680c:	f04f 30ff 	mov.w	r0, #4294967295
   e6810:	bd10      	pop	{r4, pc}

000e6812 <__mdiff>:
   e6812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6816:	460c      	mov	r4, r1
   e6818:	4607      	mov	r7, r0
   e681a:	4611      	mov	r1, r2
   e681c:	4620      	mov	r0, r4
   e681e:	4615      	mov	r5, r2
   e6820:	f7ff ffdb 	bl	e67da <__mcmp>
   e6824:	1e06      	subs	r6, r0, #0
   e6826:	d108      	bne.n	e683a <__mdiff+0x28>
   e6828:	4631      	mov	r1, r6
   e682a:	4638      	mov	r0, r7
   e682c:	f7ff fd8a 	bl	e6344 <_Balloc>
   e6830:	2301      	movs	r3, #1
   e6832:	6103      	str	r3, [r0, #16]
   e6834:	6146      	str	r6, [r0, #20]
   e6836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e683a:	bfbc      	itt	lt
   e683c:	4623      	movlt	r3, r4
   e683e:	462c      	movlt	r4, r5
   e6840:	4638      	mov	r0, r7
   e6842:	6861      	ldr	r1, [r4, #4]
   e6844:	bfba      	itte	lt
   e6846:	461d      	movlt	r5, r3
   e6848:	2601      	movlt	r6, #1
   e684a:	2600      	movge	r6, #0
   e684c:	f7ff fd7a 	bl	e6344 <_Balloc>
   e6850:	692b      	ldr	r3, [r5, #16]
   e6852:	60c6      	str	r6, [r0, #12]
   e6854:	6926      	ldr	r6, [r4, #16]
   e6856:	f105 0914 	add.w	r9, r5, #20
   e685a:	3414      	adds	r4, #20
   e685c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e6860:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e6864:	f100 0514 	add.w	r5, r0, #20
   e6868:	f04f 0c00 	mov.w	ip, #0
   e686c:	f854 3b04 	ldr.w	r3, [r4], #4
   e6870:	f859 2b04 	ldr.w	r2, [r9], #4
   e6874:	fa1c f183 	uxtah	r1, ip, r3
   e6878:	fa1f fe82 	uxth.w	lr, r2
   e687c:	0c12      	lsrs	r2, r2, #16
   e687e:	ebce 0101 	rsb	r1, lr, r1
   e6882:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e6886:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e688a:	b289      	uxth	r1, r1
   e688c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e6890:	45c8      	cmp	r8, r9
   e6892:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e6896:	46a6      	mov	lr, r4
   e6898:	f845 3b04 	str.w	r3, [r5], #4
   e689c:	d8e6      	bhi.n	e686c <__mdiff+0x5a>
   e689e:	45be      	cmp	lr, r7
   e68a0:	d20e      	bcs.n	e68c0 <__mdiff+0xae>
   e68a2:	f85e 1b04 	ldr.w	r1, [lr], #4
   e68a6:	fa1c f281 	uxtah	r2, ip, r1
   e68aa:	1413      	asrs	r3, r2, #16
   e68ac:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e68b0:	b292      	uxth	r2, r2
   e68b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e68b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e68ba:	f845 2b04 	str.w	r2, [r5], #4
   e68be:	e7ee      	b.n	e689e <__mdiff+0x8c>
   e68c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e68c4:	b90b      	cbnz	r3, e68ca <__mdiff+0xb8>
   e68c6:	3e01      	subs	r6, #1
   e68c8:	e7fa      	b.n	e68c0 <__mdiff+0xae>
   e68ca:	6106      	str	r6, [r0, #16]
   e68cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e68d0 <__ulp>:
   e68d0:	4b12      	ldr	r3, [pc, #72]	; (e691c <__ulp+0x4c>)
   e68d2:	ee10 2a90 	vmov	r2, s1
   e68d6:	401a      	ands	r2, r3
   e68d8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e68dc:	2b00      	cmp	r3, #0
   e68de:	dd02      	ble.n	e68e6 <__ulp+0x16>
   e68e0:	2000      	movs	r0, #0
   e68e2:	4619      	mov	r1, r3
   e68e4:	e017      	b.n	e6916 <__ulp+0x46>
   e68e6:	425b      	negs	r3, r3
   e68e8:	151b      	asrs	r3, r3, #20
   e68ea:	2b13      	cmp	r3, #19
   e68ec:	f04f 0000 	mov.w	r0, #0
   e68f0:	f04f 0100 	mov.w	r1, #0
   e68f4:	dc04      	bgt.n	e6900 <__ulp+0x30>
   e68f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e68fa:	fa42 f103 	asr.w	r1, r2, r3
   e68fe:	e00a      	b.n	e6916 <__ulp+0x46>
   e6900:	3b14      	subs	r3, #20
   e6902:	2b1e      	cmp	r3, #30
   e6904:	f04f 0201 	mov.w	r2, #1
   e6908:	bfda      	itte	le
   e690a:	f1c3 031f 	rsble	r3, r3, #31
   e690e:	fa02 f303 	lslle.w	r3, r2, r3
   e6912:	4613      	movgt	r3, r2
   e6914:	4618      	mov	r0, r3
   e6916:	ec41 0b10 	vmov	d0, r0, r1
   e691a:	4770      	bx	lr
   e691c:	7ff00000 	.word	0x7ff00000

000e6920 <__b2d>:
   e6920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6922:	6905      	ldr	r5, [r0, #16]
   e6924:	f100 0614 	add.w	r6, r0, #20
   e6928:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e692c:	1f2f      	subs	r7, r5, #4
   e692e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e6932:	4620      	mov	r0, r4
   e6934:	f7ff fdcb 	bl	e64ce <__hi0bits>
   e6938:	f1c0 0320 	rsb	r3, r0, #32
   e693c:	280a      	cmp	r0, #10
   e693e:	600b      	str	r3, [r1, #0]
   e6940:	dc14      	bgt.n	e696c <__b2d+0x4c>
   e6942:	f1c0 0e0b 	rsb	lr, r0, #11
   e6946:	fa24 f10e 	lsr.w	r1, r4, lr
   e694a:	42be      	cmp	r6, r7
   e694c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e6950:	bf34      	ite	cc
   e6952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e6956:	2100      	movcs	r1, #0
   e6958:	3015      	adds	r0, #21
   e695a:	fa04 f000 	lsl.w	r0, r4, r0
   e695e:	fa21 f10e 	lsr.w	r1, r1, lr
   e6962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e6966:	ea40 0201 	orr.w	r2, r0, r1
   e696a:	e023      	b.n	e69b4 <__b2d+0x94>
   e696c:	42be      	cmp	r6, r7
   e696e:	bf3a      	itte	cc
   e6970:	f1a5 0708 	subcc.w	r7, r5, #8
   e6974:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e6978:	2100      	movcs	r1, #0
   e697a:	380b      	subs	r0, #11
   e697c:	d015      	beq.n	e69aa <__b2d+0x8a>
   e697e:	4084      	lsls	r4, r0
   e6980:	f1c0 0520 	rsb	r5, r0, #32
   e6984:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e6988:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e698c:	42b7      	cmp	r7, r6
   e698e:	fa21 fe05 	lsr.w	lr, r1, r5
   e6992:	ea44 030e 	orr.w	r3, r4, lr
   e6996:	bf8c      	ite	hi
   e6998:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e699c:	2400      	movls	r4, #0
   e699e:	fa01 f000 	lsl.w	r0, r1, r0
   e69a2:	40ec      	lsrs	r4, r5
   e69a4:	ea40 0204 	orr.w	r2, r0, r4
   e69a8:	e004      	b.n	e69b4 <__b2d+0x94>
   e69aa:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e69ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e69b2:	460a      	mov	r2, r1
   e69b4:	ec43 2b10 	vmov	d0, r2, r3
   e69b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e69ba <__d2b>:
   e69ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e69be:	460e      	mov	r6, r1
   e69c0:	2101      	movs	r1, #1
   e69c2:	ec59 8b10 	vmov	r8, r9, d0
   e69c6:	4615      	mov	r5, r2
   e69c8:	f7ff fcbc 	bl	e6344 <_Balloc>
   e69cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e69d0:	4607      	mov	r7, r0
   e69d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e69d6:	b10c      	cbz	r4, e69dc <__d2b+0x22>
   e69d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e69dc:	9301      	str	r3, [sp, #4]
   e69de:	f1b8 0f00 	cmp.w	r8, #0
   e69e2:	d019      	beq.n	e6a18 <__d2b+0x5e>
   e69e4:	a802      	add	r0, sp, #8
   e69e6:	f840 8d08 	str.w	r8, [r0, #-8]!
   e69ea:	f7ff fd90 	bl	e650e <__lo0bits>
   e69ee:	9b00      	ldr	r3, [sp, #0]
   e69f0:	b148      	cbz	r0, e6a06 <__d2b+0x4c>
   e69f2:	9a01      	ldr	r2, [sp, #4]
   e69f4:	f1c0 0120 	rsb	r1, r0, #32
   e69f8:	fa02 f101 	lsl.w	r1, r2, r1
   e69fc:	430b      	orrs	r3, r1
   e69fe:	40c2      	lsrs	r2, r0
   e6a00:	617b      	str	r3, [r7, #20]
   e6a02:	9201      	str	r2, [sp, #4]
   e6a04:	e000      	b.n	e6a08 <__d2b+0x4e>
   e6a06:	617b      	str	r3, [r7, #20]
   e6a08:	9b01      	ldr	r3, [sp, #4]
   e6a0a:	61bb      	str	r3, [r7, #24]
   e6a0c:	2b00      	cmp	r3, #0
   e6a0e:	bf14      	ite	ne
   e6a10:	2102      	movne	r1, #2
   e6a12:	2101      	moveq	r1, #1
   e6a14:	6139      	str	r1, [r7, #16]
   e6a16:	e007      	b.n	e6a28 <__d2b+0x6e>
   e6a18:	a801      	add	r0, sp, #4
   e6a1a:	f7ff fd78 	bl	e650e <__lo0bits>
   e6a1e:	9b01      	ldr	r3, [sp, #4]
   e6a20:	617b      	str	r3, [r7, #20]
   e6a22:	2101      	movs	r1, #1
   e6a24:	6139      	str	r1, [r7, #16]
   e6a26:	3020      	adds	r0, #32
   e6a28:	b134      	cbz	r4, e6a38 <__d2b+0x7e>
   e6a2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e6a2e:	4404      	add	r4, r0
   e6a30:	6034      	str	r4, [r6, #0]
   e6a32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e6a36:	e009      	b.n	e6a4c <__d2b+0x92>
   e6a38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e6a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e6a40:	6030      	str	r0, [r6, #0]
   e6a42:	6918      	ldr	r0, [r3, #16]
   e6a44:	f7ff fd43 	bl	e64ce <__hi0bits>
   e6a48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e6a4c:	6028      	str	r0, [r5, #0]
   e6a4e:	4638      	mov	r0, r7
   e6a50:	b003      	add	sp, #12
   e6a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e6a56 <__ratio>:
   e6a56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e6a5a:	4688      	mov	r8, r1
   e6a5c:	4669      	mov	r1, sp
   e6a5e:	4681      	mov	r9, r0
   e6a60:	f7ff ff5e 	bl	e6920 <__b2d>
   e6a64:	a901      	add	r1, sp, #4
   e6a66:	4640      	mov	r0, r8
   e6a68:	ec55 4b10 	vmov	r4, r5, d0
   e6a6c:	f7ff ff58 	bl	e6920 <__b2d>
   e6a70:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e6a74:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e6a78:	1a9a      	subs	r2, r3, r2
   e6a7a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e6a7e:	1ac9      	subs	r1, r1, r3
   e6a80:	ec57 6b10 	vmov	r6, r7, d0
   e6a84:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e6a88:	2b00      	cmp	r3, #0
   e6a8a:	bfcc      	ite	gt
   e6a8c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e6a90:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e6a94:	4632      	mov	r2, r6
   e6a96:	463b      	mov	r3, r7
   e6a98:	4620      	mov	r0, r4
   e6a9a:	4629      	mov	r1, r5
   e6a9c:	f7fc fb42 	bl	e3124 <__aeabi_ddiv>
   e6aa0:	ec41 0b10 	vmov	d0, r0, r1
   e6aa4:	b003      	add	sp, #12
   e6aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e6aaa <__copybits>:
   e6aaa:	3901      	subs	r1, #1
   e6aac:	b510      	push	{r4, lr}
   e6aae:	1149      	asrs	r1, r1, #5
   e6ab0:	6914      	ldr	r4, [r2, #16]
   e6ab2:	3101      	adds	r1, #1
   e6ab4:	f102 0314 	add.w	r3, r2, #20
   e6ab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e6abc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e6ac0:	42a3      	cmp	r3, r4
   e6ac2:	4602      	mov	r2, r0
   e6ac4:	d204      	bcs.n	e6ad0 <__copybits+0x26>
   e6ac6:	f853 2b04 	ldr.w	r2, [r3], #4
   e6aca:	f840 2b04 	str.w	r2, [r0], #4
   e6ace:	e7f7      	b.n	e6ac0 <__copybits+0x16>
   e6ad0:	2300      	movs	r3, #0
   e6ad2:	428a      	cmp	r2, r1
   e6ad4:	d202      	bcs.n	e6adc <__copybits+0x32>
   e6ad6:	f842 3b04 	str.w	r3, [r2], #4
   e6ada:	e7fa      	b.n	e6ad2 <__copybits+0x28>
   e6adc:	bd10      	pop	{r4, pc}

000e6ade <__any_on>:
   e6ade:	f100 0214 	add.w	r2, r0, #20
   e6ae2:	6900      	ldr	r0, [r0, #16]
   e6ae4:	114b      	asrs	r3, r1, #5
   e6ae6:	4298      	cmp	r0, r3
   e6ae8:	b510      	push	{r4, lr}
   e6aea:	db0c      	blt.n	e6b06 <__any_on+0x28>
   e6aec:	dd0c      	ble.n	e6b08 <__any_on+0x2a>
   e6aee:	f011 011f 	ands.w	r1, r1, #31
   e6af2:	d009      	beq.n	e6b08 <__any_on+0x2a>
   e6af4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e6af8:	fa24 f001 	lsr.w	r0, r4, r1
   e6afc:	fa00 f101 	lsl.w	r1, r0, r1
   e6b00:	428c      	cmp	r4, r1
   e6b02:	d10c      	bne.n	e6b1e <__any_on+0x40>
   e6b04:	e000      	b.n	e6b08 <__any_on+0x2a>
   e6b06:	4603      	mov	r3, r0
   e6b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e6b0c:	4293      	cmp	r3, r2
   e6b0e:	d904      	bls.n	e6b1a <__any_on+0x3c>
   e6b10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e6b14:	2900      	cmp	r1, #0
   e6b16:	d0f9      	beq.n	e6b0c <__any_on+0x2e>
   e6b18:	e001      	b.n	e6b1e <__any_on+0x40>
   e6b1a:	2000      	movs	r0, #0
   e6b1c:	bd10      	pop	{r4, pc}
   e6b1e:	2001      	movs	r0, #1
   e6b20:	bd10      	pop	{r4, pc}

000e6b22 <_calloc_r>:
   e6b22:	b538      	push	{r3, r4, r5, lr}
   e6b24:	fb02 f401 	mul.w	r4, r2, r1
   e6b28:	4621      	mov	r1, r4
   e6b2a:	f7f4 f89f 	bl	dac6c <_malloc_r>
   e6b2e:	4605      	mov	r5, r0
   e6b30:	b118      	cbz	r0, e6b3a <_calloc_r+0x18>
   e6b32:	4622      	mov	r2, r4
   e6b34:	2100      	movs	r1, #0
   e6b36:	f7fc fe70 	bl	e381a <memset>
   e6b3a:	4628      	mov	r0, r5
   e6b3c:	bd38      	pop	{r3, r4, r5, pc}

000e6b3e <__env_lock>:
   e6b3e:	4770      	bx	lr

000e6b40 <__env_unlock>:
   e6b40:	4770      	bx	lr

000e6b42 <link_code_end>:
	...

000e6b44 <dynalib_user>:
   e6b44:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e6b54:	0000 0000                                   ....

000e6b58 <functions>:
   e6b58:	6cfe 000e dac1 000d 0029 0000 0000 0000     .l......).......
   e6b68:	6d02 000e de41 000d 0029 0000 0000 0000     .m..A...).......
   e6b78:	6d07 000e df05 000d 0029 0000 0000 0000     .m......).......
   e6b88:	6d0c 000e d569 000d 0029 0000 0000 0000     .m..i...).......
   e6b98:	6d11 000e dfc9 000d 002a 0000 0000 0000     .m......*.......
   e6ba8:	6d17 000e d8e1 000d 0029 0000 0000 0000     .m......).......
   e6bb8:	6d03 000e da01 000d 0029 0000 0000 0000     .m......).......
   e6bc8:	6d1c 000e dfd1 000d 0029 0000 0000 0000     .m......).......
   e6bd8:	806d 000e 40c9 000d 0028 0000 0000 0000     m....@..(.......
   e6be8:	6d21 000e e0a9 000d 0029 0000 0000 0000     !m......).......
   e6bf8:	6d25 000e 43d9 000d 0029 0000 0000 0000     %m...C..).......
   e6c08:	6d29 000e dad1 000d 0029 0000 0000 0000     )m......).......
   e6c18:	6d2f 000e e289 000d 0029 0000 0000 0000     /m......).......
   e6c28:	6d32 000e e399 000d 0029 0000 0000 0000     2m......).......
   e6c38:	6d36 000e e399 000d 0029 0000 0000 0000     6m......).......
   e6c48:	6d3c 000e 4449 000d 002a 0000 0000 0000     <m..ID..*.......
   e6c58:	6d40 000e 4509 000d 002a 0000 0000 0000     @m...E..*.......
   e6c68:	6d44 000e 40b9 000d 0028 0000 0000 0000     Dm...@..(.......
   e6c78:	6d47 000e e4b1 000d 002a 0000 0000 0000     Gm......*.......
   e6c88:	6d08 000e dbf1 000d 0029 0000 0000 0000     .m......).......
   e6c98:	6d4b 000e e7e9 000d 0029 0000 0000 0000     Km......).......
   e6ca8:	6d50 000e e8c5 000d 0029 0000 0000 0000     Pm......).......
   e6cb8:	6d0d 000e dcb1 000d 0029 0000 0000 0000     .m......).......
   e6cc8:	6d55 000e dd21 000d 0029 0000 0000 0000     Um..!...).......
	...
   e6ce8:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e6cf8:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e6d08:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e6d18:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e6d28:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e6d38:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e6d48:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e6d58:	0068 0000                                   h...

000e6d5c <_ZTVN8particle9LEDStatusE>:
	...
   e6d64:	53f1 000d 5409 000d 52f3 000d               .S...T...R..

000e6d70 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e6d70:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   e6d80:	0033 2d68 6562 7461 3600 0030 7562 6666     3.h-beat.60.buff
   e6d90:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e6da0:	6974 6c63 0065 7562 6c69 0064 7041 2072     ticle.build.Apr 
   e6db0:	3932 3220 3230 2030 3831 353a 3a33 3835     29 2020 18:53:58
   e6dc0:	0000 2500 0069 6c25 0069 6544 6976 6563     ...%i.%li.Device
   e6dd0:	0020 6120 6464 6572 7373 303a 0078 4e20      . address:0x. N
   e6de0:	544f 6120 0074 6353 6e61 696e 676e 2e2e     OT at.Scanning..
   e6df0:	002e 6e55 6e6b 776f 206e 7265 6f72 2072     ..Unknown error 
   e6e00:	7461 6120 6464 6572 7373 3020 0078 6f4e     at address 0x.No
   e6e10:	4920 4332 6420 7665 6369 7365 6620 756f      I2C devices fou
   e6e20:	646e 000a 6f64 656e 000a 6153 6976 676e     nd..done..Saving
   e6e30:	5320 6174 6574 4c00 616f 6964 676e 5320      State.Loading S
   e6e40:	6174 6574 4400 7369 6f63 6e6e 6365 6574     tate.Disconnecte
   e6e50:	0064 6e49 7469 6169 696c 697a 676e 6120     d.Initializing a
   e6e60:	616c 6d72 5300 6365 6e6f 7364 5700 4669     larm.Seconds.WiF
   e6e70:	2069 6f6e 2074 6572 6461 0079 6c42 6e79     i not ready.Blyn
   e6e80:	206b 6f6e 2074 6f63 6e6e 6365 6574 0064     k not connected.
   e6e90:	2a2a 2a2a 552a 6470 7461 2065 7562 7a7a     *****Update buzz
   e6ea0:	7265 6154 706d 7265 6620 616c 2067 6176     erTamper flag va
   e6eb0:	756c 2065 7369 203a 2a00 2a2a 2a2a 7055     lue is: .*****Up
   e6ec0:	6164 6574 6220 7a75 657a 5672 7061 726f     date buzzerVapor
   e6ed0:	6620 616c 2067 6176 756c 2065 7369 203a      flag value is: 
   e6ee0:	2a00 2a2a 2a2a 7055 6164 6574 6e20 746f     .*****Update not
   e6ef0:	6669 5679 7061 726f 6620 616c 2067 6176     ifyVapor flag va
   e6f00:	756c 2065 7369 203a 2a00 2a2a 2a2a 7055     lue is: .*****Up
   e6f10:	6164 6574 6e20 746f 6669 5479 6d61 6570     date notifyTampe
   e6f20:	2072 6c66 6761 7620 6c61 6575 6920 3a73     r flag value is:
   e6f30:	0020 7055 6164 6574 6e20 746f 6669 4279      .Update notifyB
   e6f40:	7461 6574 7972 6620 616c 2067 6176 756c     attery flag valu
   e6f50:	2065 7369 203a 5d00 0020 6f43 6e6e 6365     e is: .] .Connec
   e6f60:	6974 676e 7420 206f 0d00 200a 2020 5f20     ting to ...    _
   e6f70:	5f5f 2020 5f5f 2020 2020 2020 2020 2020     __  __          
   e6f80:	5f5f 0a0d 2020 2f20 5f20 2920 202f 5f2f     __..   / _ )/ /_
   e6f90:	5f20 5f5f 5f5f 2020 202f 5f2f 0d5f 200a      _____  / /__.. 
   e6fa0:	2f20 5f20 2020 202f 202f 2f2f 2f20 5f20      / _  / / // / _
   e6fb0:	5c20 202f 2720 2f5f 0a0d 2f20 5f5f 5f5f      \/  '_/.. /____
   e6fc0:	5f2f 5c2f 2c5f 2f20 2f5f 5f2f 5f2f 5c2f     /_/\_, /_//_/_/\
   e6fd0:	5c5f 0a0d 2020 2020 2020 2020 5f2f 5f5f     _\..        /___
   e6fe0:	202f 3076 362e 332e 6f20 206e 6150 7472     / v0.6.3 on Part
   e6ff0:	6369 656c 0a0d 2a00 2a2a 2a2a 6544 6976     icle...*****Devi
   e7000:	6563 5a20 6e6f 2065 6176 756c 2065 7369     ce Zone value is
   e7010:	203a 2a00 2a2a 2a2a 7055 6164 6574 4120     : .*****Update A
   e7020:	6363 6c65 7265 6d6f 7465 7265 7420 7268     ccelerometer thr
   e7030:	7365 6f68 646c 7620 6c61 6575 6920 3a73     eshold value is:
   e7040:	0020 7055 6164 6574 4120 6363 6c65 7265      .Update Acceler
   e7050:	6d6f 7465 7265 7620 6c61 6575 6920 3a73     ometer value is:
   e7060:	0020 6957 6c6c 7220 7365 7465 7320 7379      .Will reset sys
   e7070:	6574 206d 4700 544d 7320 6365 6e6f 7364     tem .GMT seconds
   e7080:	6f20 6666 6573 2074 7369 203a 7000 6275      offset is: .pub
   e7090:	696c 6873 4d47 4f54 6666 6573 5274 7165     lishGMTOffsetReq
   e70a0:	6575 7473 4420 7665 6369 2065 6f5a 656e     uest Device Zone
   e70b0:	7620 6c61 6575 6920 3a73 0020 6d41 7265      value is: .Amer
   e70c0:	6369 2f61 654e 5f77 6f59 6b72 4100 656d     ica/New_York.Ame
   e70d0:	6972 6163 432f 6968 6163 6f67 4100 656d     rica/Chicago.Ame
   e70e0:	6972 6163 502f 6f68 6e65 7869 4100 656d     rica/Phoenix.Ame
   e70f0:	6972 6163 4c2f 736f 415f 676e 6c65 7365     rica/Los_Angeles
   e7100:	7000 6d77 6400 0077 7761 4900 766e 6c61     .pwm.dw.aw.Inval
   e7110:	6469 4820 2057 6d63 3a64 0020 6e49 6176     id HW cmd: .Inva
   e7120:	696c 2064 6970 206e 2000 6f6d 6564 0020     lid pin . mode .
   e7130:	003e 6142 2064 6468 2072 656c 3a6e 0020     >.Bad hdr len: .
   e7140:	6552 6461 2079 7028 6e69 3a67 0020 736d     Ready (ping: .ms
   e7150:	2e29 4600 6572 2065 4152 3a4d 0020 6e49     )..Free RAM: .In
   e7160:	6176 696c 2064 7561 6874 7420 6b6f 6e65     valid auth token
   e7170:	4300 6e6f 656e 7463 6620 6961 656c 2e64     .Connect failed.
   e7180:	6320 646f 3a65 0020 6150 6b63 7465 7420      code: .Packet t
   e7190:	6f6f 6220 6769 203a 4300 6e61 7427 7220     oo big: .Can't r
   e71a0:	6165 2064 6f62 7964 5200 6165 7964 5200     ead body.Ready.R
   e71b0:	6465 7269 6365 6974 676e 7420 206f 4900     edirecting to .I
   e71c0:	766e 6c61 6469 6920 746e 7265 616e 206c     nvalid internal 
   e71d0:	6d63 3a64 5300 7265 6576 3a72 0020 6e49     cmd:.Server: .In
   e71e0:	6176 696c 2064 6568 6461 7265 7420 7079     valid header typ
   e71f0:	3a65 0020 6548 7261 6274 6165 2074 6974     e: .Heartbeat ti
   e7200:	656d 756f 3a74 0020 202c 4c00 676f 6e69     meout: ., .Login
   e7210:	7420 6d69 6f65 7475 3c00 4300 646d 6520      timeout.<.Cmd e
   e7220:	7272 726f 5300 6e65 2074 7600 0077 5453     rror.Sent .vw.ST
   e7230:	5942 2500 2568 2065 5225 2500 2000 2020     BY.%h%e %R.%.   
   e7240:	2020 2020 2020 2020 2020 2020 0020 6f47                  .Go
   e7250:	6e69 2067 6f74 7320 656c 7065 4700 696f     ing to sleep.Goi
   e7260:	676e 7420 206f 7473 6e61 6264 2079 6c73     ng to standby sl
   e7270:	6565 0070 6f47 6e69 2067 6f74 6420 6565     eep.Going to dee
   e7280:	2070 6c73 6565 0070 2b20 0020 3225 332e     p sleep. + .%2.3
   e7290:	0066 6f43 6e6e 6365 6574 0064 6e45 6574     f.Connected.Ente
   e72a0:	2072 6f63 6564 7420 206f 6572 6573 0074     r code to reset.
   e72b0:	6e49 7469 6169 696c 657a 2064 6564 6166     Initialized defa
   e72c0:	6c75 2074 6176 756c 7365 4600 6e69 7369     ult values.Finis
   e72d0:	6568 2064 6e49 7469 6169 696c 617a 6974     hed Initializati
   e72e0:	6e6f 7200 7365 7465 656d 4500 746e 7265     on.resetme.Enter
   e72f0:	6520 7078 6572 7373 6f69 206e 6568 6572      expression here
   e7300:	4500 746e 7265 6520 616d 6c69 6820 7265     .Enter email her
   e7310:	0065 6148 6472 5220 7365 7465 6974 676e     e.Hard Resetting
   e7320:	4200 796c 6b6e 6920 2073 6f6e 2077 6f63     .Blynk is now co
   e7330:	6e6e 6365 6574 2064 202d 7973 636e 6e69     nnected - syncin
   e7340:	2067 6c61 206c 6970 736e 002e 6d70 0031     g all pins..pm1.
   e7350:	6d70 0032 6d70 0034 6d70 3031 6300 6e6f     pm2.pm4.pm10.con
   e7360:	0063 6574 706d 2500 2e32 6637 5400 6568     c.temp.%2.7f.The
   e7370:	6520 7078 6572 7373 6f69 206e 7369 5420      expression is T
   e7380:	7572 0065 6854 2065 7865 7270 7365 6973     rue.The expressi
   e7390:	6e6f 6920 2073 6146 736c 0065 7245 6f72     on is False.Erro
   e73a0:	2072 656e 7261 6320 6168 3a72 0020 2a2a     r near char: .**
   e73b0:	202a 4341 4543 204c 4e49 4554 5252 5055     * ACCEL INTERRUP
   e73c0:	4554 2044 2a2a 002a 2a2a 202a 4e49 4341     TED ***.*** INAC
   e73d0:	4954 4956 5954 2a20 2a2a 2a00 2a2a 4120     TIVITY ***.*** A
   e73e0:	5443 5649 5449 2059 2a2a 002a 6174 706d     CTIVITY ***.tamp
   e73f0:	7265 615f 656c 7472 4100 7474 6d65 7470     er_alert.Attempt
   e7400:	6e69 2067 6f74 6320 6e6f 656e 7463 5720     ing to connect W
   e7410:	4669 2e69 2e2e 5700 4669 2069 6572 6461     iFi....WiFi read
   e7420:	0079 7441 6574 706d 6974 676e 7420 206f     y.Attempting to 
   e7430:	6f63 6e6e 6365 2074 6f74 5020 7261 6974     connect to Parti
   e7440:	6c63 2e65 2e2e 5000 7261 6974 6c63 2065     cle....Particle 
   e7450:	6f6e 2074 6f63 6e6e 6365 6574 0064 6150     not connected.Pa
   e7460:	7472 6369 656c 6320 6e6f 656e 7463 6465     rticle connected
   e7470:	4100 7474 6d65 7470 6e69 2067 6f74 6320     .Attempting to c
   e7480:	6e6f 656e 7463 7420 206f 6c42 6e79 2e6b     onnect to Blynk.
   e7490:	2e2e 7a00 7065 6f74 6573 736e 3265 622e     ...zeptosense2.b
   e74a0:	796c 6b6e 632e 0063 6c42 6e79 206b 6f63     lynk.cc.Blynk co
   e74b0:	6e6e 6365 6574 0064 7473 7261 2074 6572     nnected.start re
   e74c0:	6461 6553 736e 726f 0073 7453 7461 2065     adSensors.State 
   e74d0:	6176 756c 7365 6120 6572 203a 7542 7a7a     values are: Buzz
   e74e0:	7265 5420 6d61 6570 2072 4200 7a75 657a     er Tamper .Buzze
   e74f0:	2072 6156 6f70 2072 4e00 746f 6669 2079     r Vapor .Notify 
   e7500:	6156 6f70 2072 4e00 746f 6669 2079 6154     Vapor .Notify Ta
   e7510:	706d 7265 0020 6f4e 6974 7966 4220 7461     mper .Notify Bat
   e7520:	6574 7972 0020 6341 6974 6976 7974 5420     tery .Activity T
   e7530:	7268 7365 6f68 646c 0020 6544 6976 6563     hreshold .Device
   e7540:	5a20 6e6f 2065 5300 6174 7472 5320 7465      Zone .Start Set
   e7550:	7075 7320 6365 6974 6e6f 6120 7466 7265     up section after
   e7560:	6120 7320 656c 7065 5500 616e 6c62 2065      a sleep.Unable 
   e7570:	6f74 7220 6165 2064 7845 6170 646e 7265     to read Expander
   e7580:	2d20 7220 7365 7465 6974 676e 6920 206e      - resetting in 
   e7590:	2039 6573 6f63 646e 0073 7245 6f72 0072     9 seconds.Error.
   e75a0:	3164 253d 0075 6843 6365 696b 676e 6920     d1=%u.Checking i
   e75b0:	6332 6420 7665 6369 7365 2e2e 002e 5245     2c devices....ER
   e75c0:	0052 3249 2043 7349 7573 0065 4452 0059     R.I2C Issue.RDY.
   e75d0:	3249 2043 4b4f 4200 6665 726f 0065 6641     I2C OK.Before.Af
   e75e0:	6574 0072 4441 4c58 3433 2035 6553 7574     ter.ADXL345 Setu
   e75f0:	0070 6e55 6261 656c 7420 206f 6572 6461     p.Unable to read
   e7600:	5320 5350 3033 2d20 7420 7972 6e69 2067      SPS30 - trying 
   e7610:	6761 6961 006e 6552 6461 5320 5350 3033     again.Read SPS30
   e7620:	5400 6d69 2065 7369 7320 6e79 2763 6465     .Time is sync'ed
   e7630:	7420 206f 6874 2065 6c63 756f 0064 2d2d      to the cloud.--
   e7640:	614d 7373 4320 6e6f 6563 746e 6172 6974     Mass Concentrati
   e7650:	6e6f 2d2d 2500 3a73 2520 2e30 6632 0a0d     on--.%s: %0.2f..
   e7660:	2d00 4e2d 6d75 6562 2072 6f43 636e 6e65     .--Number Concen
   e7670:	7274 7461 6f69 2d6e 002d 3025 312e 0066     tration--.%0.1f.
   e7680:	0046 6574 706d 3a31 0020 6756 7361 203a     F.temp1: .Vgas: 
   e7690:	4300 6e6f 3a63 0020 3025 302e 0066 4c41     .Conc: .%0.0f.AL
   e76a0:	5452 2021 4100 454c 5452 2021 2020 2020     RT! .ALERT!     
   e76b0:	2020 2020 2020 2020 7c00 4100 524c 2154             .|.ALRT!
   e76c0:	5500 6470 7461 6e69 0067 7562 7a7a 7265     .Updating.buzzer
   e76d0:	7420 746f 6c61 7420 6d69 2065 7525 206c      total time %ul 
   e76e0:	2a2a 2a2a 5600 7061 2065 6c61 7265 2074     ****.Vape alert 
   e76f0:	7562 7a7a 7265 7420 6d69 2065 6572 6573     buzzer time rese
   e7700:	2074 7461 2520 6c75 2a20 2a2a 002a 6176     t at %ul ****.va
   e7710:	6570 615f 656c 7472 5600 7061 2065 6c41     pe_alert.Vape Al
   e7720:	7265 2074 6f74 6174 206c 6974 656d 2520     ert total time %
   e7730:	6c75 6d20 6c69 696c 6573 6f63 646e 0073     ul milliseconds.
   e7740:	6f6c 5f77 6162 7474 7265 5f79 6c61 7265     low_battery_aler
   e7750:	5f74 3032 5500 616e 6c62 2065 6f74 7220     t_20.Unable to r
   e7760:	6165 2064 5053 3353 2030 202d 6572 6573     ead SPS30 - rese
   e7770:	7474 6e69 2067 6564 6976 6563 3120 5500     tting device 1.U
   e7780:	616e 6c62 2065 6f74 7220 6165 2064 5053     nable to read SP
   e7790:	3353 2030 202d 6572 6573 7474 6e69 2067     S30 - resetting 
   e77a0:	6564 6976 6563 5300 6174 7472 5320 7465     device.Start Set
   e77b0:	7075 2928 6620 6e75 7463 6f69 006e 6544     up() function.De
   e77c0:	6976 6563 6420 6469 6e20 746f 7720 6b61     vice did not wak
   e77d0:	2065 7075 6620 6f72 206d 6150 7472 6369     e up from Partic
   e77e0:	656c 7320 656c 7065 4400 7665 6369 2065     le sleep.Device 
   e77f0:	6177 2073 6f77 656b 206e 7075 6220 2079     was woken up by 
   e7800:	2061 6970 006e 6544 6976 6563 7720 7361     a pin.Device was
   e7810:	7720 6b6f 6e65 7520 2070 7962 7420 6568      woken up by the
   e7820:	5020 7261 6974 6c63 2065 5452 2043 6128      Particle RTC (a
   e7830:	7466 7265 6120 7320 6570 6963 6966 6465     fter a specified
   e7840:	6e20 6d75 6562 2072 666f 7320 6365 6e6f      number of secon
   e7850:	7364 0029 6544 6976 6563 7720 7361 7720     ds).Device was w
   e7860:	6b6f 6e65 7520 2070 7962 6520 7469 6568     oken up by eithe
   e7870:	2072 2061 6970 206e 726f 7420 6568 5020     r a pin or the P
   e7880:	7261 6974 6c63 2065 5452 2043 6128 7466     article RTC (aft
   e7890:	7265 6120 7320 6570 6963 6966 6465 6e20     er a specified n
   e78a0:	6d75 6562 2072 666f 7320 6365 6e6f 7364     umber of seconds
   e78b0:	0029 7473 7461 2e65 6966 7372 5274 6e75     ).state.firstRun
   e78c0:	6843 6365 206b 203d 6600 7269 7473 7552     Check = .firstRu
   e78d0:	566e 6c61 6575 3d20 0020 6d70 3e31 3033     nValue = .pm1>30
   e78e0:	7c30 707c 326d 333e 3030 7c7c 6d70 3e34     0||pm2>300||pm4>
   e78f0:	3033 7c30 707c 316d 3e30 3033 2630 6326     300||pm10>300&&c
   e7900:	6e6f 3e63 3031 7c30 747c 6d65 3e70 3531     onc>100||temp>15
   e7910:	0030 6962 7473 6e61 4079 6f63 636d 7361     0.bistany@comcas
   e7920:	2e74 656e 0074 6946 7372 2074 7572 2e6e     t.net.First run.
   e7930:	4e00 746f 6620 7269 7473 7220 6e75 002e     .Not first run..
   e7940:	7356 7075 6620 726f 6120 6c6c 7320 6e65     Vsup for all sen
   e7950:	6f73 7372 3d20 0020 6356 2063 6f66 2072     sors = .Vcc for 
   e7960:	6c61 206c 6573 736e 726f 2073 203d 5600     all sensors = .V
   e7970:	6572 2066 6f66 2072 6573 736e 726f 3120     ref for sensor 1
   e7980:	3d20 0020 7a54 7265 206f 203d 4600 6e69      = .Tzero = .Fin
   e7990:	7369 6568 2064 6553 7474 6e69 2067 7055     ished Setting Up
   e79a0:	5400 2c31 6d20 3156 202c 3143 6800 6f6f     .T1, mV1, C1.hoo
   e79b0:	2d6b 6572 7073 6e6f 6573 672f 746d 664f     k-response/gmtOf
   e79c0:	7366 7465 5300 7465 7075 6320 6d6f 6c70     fset.Setup compl
   e79d0:	7465 0065 6e45 2064 6553 7574 2870 2029     ete.End Setup() 
   e79e0:	7566 636e 6974 6e6f 4400 7665 6369 2065     function.Device 
   e79f0:	6177 2073 6f77 656b 206e 7075 6220 2079     was woken up by 
   e7a00:	6874 2065 6150 7472 6369 656c 5220 4354     the Particle RTC
   e7a10:	2820 6661 6574 2072 3531 6d20 6e69 7475      (after 15 minut
   e7a20:	7365 2c29 6720 206f 6e69 6f74 4420 6565     es), go into Dee
   e7a30:	2070 6c53 6565 0070 5320 2057 6556 2072     p Sleep. SW Ver 
   e7a40:	203d 3032 3931 3131 2036 2f53 204e 203d     = 2019116 S/N = 
   e7a50:	655a 3270 2057 2000 6f4c 2063 203d 6554     Zep2W . Loc = Te
   e7a60:	7473 5520 696e 2074 5200 4354 4500 7078     st Unit .RTC.Exp
   e7a70:	5200 4354 4520 5045 4f52 004d 4441 0043     .RTC EEPROM.ADC.
   e7a80:	5246 4d41 4100 5844 334c 3534 5000 304d     FRAM.ADXL345.PM0
   e7a90:	352e 5000 314d 302e 5000 324d 352e 5000     .5.PM1.0.PM2.5.P
   e7aa0:	344d 302e 5000 314d 0030 6c4f 2064 6574     M4.0.PM10.Old te
   e7ab0:	706d 202e 7073 6e61 6120 646e 6f20 6666     mp. span and off
   e7ac0:	6573 3a74 0020 4948 4847 4c00 574f 4e00     set: .HIGH.LOW.N
   e7ad0:	7765 7420 6d65 2e70 7320 6170 206e 6e61     ew temp. span an
   e7ae0:	2064 666f 7366 7465 203a 5700 6568 206e     d offset: .When 
   e7af0:	6167 2073 6f63 636e 6e65 7274 7461 6f69     gas concentratio
   e7b00:	206e 7473 6165 7964 202c 6e65 6574 2072     n steady, enter 
   e7b10:	6f43 636e 6e65 7274 7461 6f69 206e 6e69     Concentration in
   e7b20:	7020 6d70 6620 6c6f 6f6c 6577 2064 7962      ppm followed by
   e7b30:	2720 7263 2027 203d 4500 7272 726f 5320      'cr' = .Error S
   e7b40:	7465 6974 676e 5320 6170 006e               etting Span.

000e7b4c <_ZTV10MB85RC256V>:
	...
   e7b54:	9785 000d 9787 000d                         ........

000e7b5c <CSWTCH.53>:
   e7b5c:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e7b6c <_ZL23BlynkWriteHandlerVector>:
   e7b6c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7b7c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7b8c:	a4db 000d a4db 000d 6ba1 000d a4db 000d     .........k......
   e7b9c:	6bbd 000d a4db 000d 6bfd 000d a4db 000d     .k.......k......
   e7bac:	5675 000d 5719 000d 56a1 000d a4db 000d     uV...W...V......
   e7bbc:	7289 000d a4db 000d 6e2d 000d 5bb5 000d     .r......-n...[..
   e7bcc:	5835 000d 56f9 000d 56cd 000d 5871 000d     5X...V...V..qX..
   e7bdc:	58ad 000d 58e9 000d a4db 000d 5bf5 000d     .X...X.......[..
   e7bec:	5925 000d a4db 000d a4db 000d a4db 000d     %Y..............
   e7bfc:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c0c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c1c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c2c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c3c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c4c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c5c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c6c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c7c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c8c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7c9c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7cac:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7cbc:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7ccc:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7cdc:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7cec:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7cfc:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d0c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d1c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d2c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d3c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d4c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................
   e7d5c:	a4db 000d a4db 000d a4db 000d a4db 000d     ................

000e7d6c <_ZL22BlynkReadHandlerVector>:
   e7d6c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7d7c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7d8c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7d9c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7dac:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7dbc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7dcc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7ddc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7dec:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7dfc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e0c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e1c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e2c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e3c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e4c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e5c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e6c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e7c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e8c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7e9c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7eac:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7ebc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7ecc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7edc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7eec:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7efc:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f0c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f1c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f2c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f3c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f4c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................
   e7f5c:	a4d9 000d a4d9 000d a4d9 000d a4d9 000d     ................

000e7f6c <_ZTVN5spark13EthernetClassE>:
	...
   e7f74:	aceb 000d ace1 000d acd7 000d accd 000d     ................
   e7f84:	acc1 000d acb5 000d aca9 000d aca1 000d     ................
   e7f94:	ac97 000d ac8d 000d cfb9 000d               ............

000e7fa0 <_ZTV8SPIClass>:
	...
   e7fa8:	ad59 000d ad5b 000d 616e 006e 766f 0066     Y...[...nan.ovf.
   e7fb8:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e7fc8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e7fd8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e7fe8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e7ff8:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e8008:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e8018:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e8028:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e8038:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   e8048:	0020 6564 6174 6c69 2073 203d 6600 006e      .details = .fn.
   e8058:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   e8068:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   e8078:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   e8088:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   e8098:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   e80a8:	0065 0000                                   e...

000e80ac <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e80b4:	bbe9 000d bbef 000d bc33 000d bbfd 000d     ........3.......
   e80c4:	bbeb 000d                                   ....

000e80c8 <_ZTV9IPAddress>:
	...
   e80d0:	c181 000d c171 000d c173 000d               ....q...s...

000e80dc <_ZTV9USBSerial>:
	...
   e80e4:	c285 000d c2d5 000d c2e3 000d b35d 000d     ............]...
   e80f4:	c2c1 000d c287 000d c29d 000d c2cf 000d     ................
   e8104:	c2b3 000d c281 000d                         ........

000e810c <_ZTV11USARTSerial>:
	...
   e8114:	c3e5 000d c435 000d c443 000d b35d 000d     ....5...C...]...
   e8124:	c3f9 000d c41b 000d c407 000d c42f 000d     ............/...
   e8134:	c3e7 000d c3eb 000d                         ........

000e813c <_ZTV7TwoWire>:
	...
   e8144:	c51d 000d c567 000d c53f 000d c51f 000d     ....g...?.......
   e8154:	c547 000d c54f 000d c557 000d c55f 000d     G...O...W..._...

000e8164 <_ZTVN5spark9MeshClassE>:
	...
   e816c:	c6c7 000d c6bd 000d c6b3 000d c6a9 000d     ................
   e817c:	c69d 000d c691 000d c685 000d c67d 000d     ............}...
   e818c:	c673 000d c669 000d cfb9 000d               s...i.......

000e8198 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e81a0:	c86d 000d c873 000d cd5b 000d c881 000d     m...s...[.......
   e81b0:	c86f 000d                                   o...

000e81b4 <_ZTV9TCPClient>:
	...
   e81bc:	b9bd 000d b9dd 000d c7e5 000d c7ff 000d     ................
   e81cc:	cc01 000d c953 000d c925 000d c829 000d     ....S...%...)...
   e81dc:	cadd 000d c9d9 000d c987 000d cbd1 000d     ................
   e81ec:	c82b 000d c863 000d c811 000d c885 000d     +...c...........
   e81fc:	c905 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e820c:	7265 6f72 2072 203d 6425 0000               error = %d..

000e8218 <_ZTVN5spark9WiFiClassE>:
	...
   e8220:	ce27 000d ce1d 000d ce13 000d 533b 000d     '...........;S..
   e8230:	5345 000d ce07 000d cdfb 000d cdf3 000d     ES..............
   e8240:	cde9 000d cddf 000d cfb9 000d               ............

000e824c <_ZTV10WiFiSignal>:
	...
   e8254:	cd73 000d cdd1 000d cd75 000d ce65 000d     s.......u...e...
   e8264:	cd79 000d ce31 000d cda5 000d               y...1.......

000e8270 <_ZTVN5spark12NetworkClassE>:
	...
   e8278:	cf51 000d cf5b 000d cf65 000d cf6f 000d     Q...[...e...o...
   e8288:	cf79 000d cf85 000d cf91 000d cf9d 000d     y...............
   e8298:	cfa5 000d cfaf 000d cfb9 000d               ............

000e82a4 <_ZSt7nothrow>:
   e82a4:	0000 0000                                   ....

000e82a8 <atanlo>:
   e82a8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e82b8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e82c8 <atanhi>:
   e82c8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e82d8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e82e8:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e82f8:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e8308:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e8318:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e8330 <halF>:
   e8330:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e8340 <ln2LO>:
   e8340:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e8350 <ln2HI>:
   e8350:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e8360 <Zero>:
	...
   e836c:	0000 8000                                   ....

000e8370 <npio2_hw>:
   e8370:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e8380:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e8390:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e83a0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e83b0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e83c0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e83d0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e83e0:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e83f0 <two_over_pi>:
   e83f0:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e8400:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e8410:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e8420:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e8430:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e8440:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e8450:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e8460:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e8470:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e8480:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e8490:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e84a0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e84b0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e84c0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e84d0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e84e0:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e84f0:	e27b 0060 8c6b 00c0                         {.`.k...

000e84f8 <init_jk>:
   e84f8:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e8508 <PIo2>:
   e8508:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e8518:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e8528:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e8538:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e8548 <TWO52>:
   e8548:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e8558 <day_name.4725>:
   e8558:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e8568:	6972 6153 4a74                                   riSat

000e856d <mon_name.4726>:
   e856d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e857d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e858d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e859d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e85ad:	6425 000a                                   %d..

000e85b1 <_ctype_>:
   e85b1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e85c1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e85d1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e85e1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e85f1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e8601:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e8611:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e8621:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e8631:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e86b4 <__sf_fake_stdin>:
	...

000e86d4 <__sf_fake_stdout>:
	...

000e86f4 <__sf_fake_stderr>:
	...
   e8714:	4f50 4953 0058 0000                         POSIX...

000e871c <_DAYS_BEFORE_MONTH>:
   e871c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e872c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e873c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e874c <DAYS_IN_MONTH>:
   e874c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e875c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e876c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e877c <__month_lengths>:
   e877c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e878c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e879c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e87ac:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e87bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e87cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e87dc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e87ec:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e87fc:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e880c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e881c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e882c:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e8838 <fpi.5344>:
   e8838:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e8848:	0000 0000                                   ....

000e884c <fpinan.5380>:
   e884c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e885c:	0000 0000 6e69 7469 0079 0000               ....inity...

000e8868 <tinytens>:
   e8868:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e8878:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e8888:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e8898:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e88a8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e88b8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e88c8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e88d8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e88e8:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e88f8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e8908:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e8918:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e8928:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e8938:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e8948:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e8958:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e8968:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e8978:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e8988:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e8998:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e89a8:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e89b8:	2053 7025 0000 0000                         S %p....

000e89c0 <_C_time_locale>:
   e89c0:	8898 000e 889c 000e 88a0 000e 88a4 000e     ................
   e89d0:	88a8 000e 88ac 000e 88b0 000e 88b4 000e     ................
   e89e0:	88b8 000e 88bc 000e 88c0 000e 88c4 000e     ................
   e89f0:	88c8 000e 88d0 000e 88d9 000e 88df 000e     ................
   e8a00:	88a8 000e 88e5 000e 88ea 000e 88ef 000e     ................
   e8a10:	88f6 000e 8900 000e 8908 000e 8911 000e     ................
   e8a20:	891a 000e 891e 000e 8922 000e 8926 000e     ........"...&...
   e8a30:	892a 000e 892e 000e 8932 000e 8936 000e     *.......2...6...
   e8a40:	893d 000e 8944 000e 894c 000e 8956 000e     =...D...L...V...
   e8a50:	895f 000e 8966 000e 896f 000e 8978 000e     _...f...o...x...
   e8a60:	8981 000e 7a82 000e 8996 000e 8999 000e     .....z..........
   e8a70:	88c8 000e 88d0 000e 88d9 000e 88df 000e     ................
   e8a80:	88a8 000e 88e5 000e 88ea 000e 88ef 000e     ................
   e8a90:	88f6 000e 8900 000e 8908 000e 8911 000e     ................
   e8aa0:	7fdc 000e 89b1 000e 6ff6 000e 6ff6 000e     .........o...o..
   e8ab0:	6ff6 000e 6ff6 000e 6ff6 000e 5a54 4700     .o...o...o..TZ.G
   e8ac0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e8ad0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e8ae0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e8af0:	3a6e 6825 2575 006e                         n:%hu%n.

000e8af8 <__mprec_tens>:
   e8af8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e8b08:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e8b18:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e8b28:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e8b38:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e8b48:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e8b58:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e8b68:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e8b78:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e8b88:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e8b98:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e8ba8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e8bb8:	9db4 79d9 7843 44ea                         ...yCx.D

000e8bc0 <__mprec_bigtens>:
   e8bc0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e8bd0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e8be0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e8be8 <p05.5387>:
   e8be8:	0005 0000 0019 0000 007d 0000               ........}...

000e8bf4 <link_const_variable_data_end>:
   e8bf4:	000d8ddd 	.word	0x000d8ddd
   e8bf8:	000d9461 	.word	0x000d9461
   e8bfc:	000d9781 	.word	0x000d9781
   e8c00:	000d98df 	.word	0x000d98df
   e8c04:	000d9a45 	.word	0x000d9a45
   e8c08:	000d9e0d 	.word	0x000d9e0d
   e8c0c:	000d9f6f 	.word	0x000d9f6f
   e8c10:	000da333 	.word	0x000da333
   e8c14:	000da4c5 	.word	0x000da4c5
   e8c18:	000da4d5 	.word	0x000da4d5
   e8c1c:	000da509 	.word	0x000da509
   e8c20:	000dacf5 	.word	0x000dacf5
   e8c24:	000daf49 	.word	0x000daf49
   e8c28:	000db335 	.word	0x000db335
   e8c2c:	000db6bd 	.word	0x000db6bd
   e8c30:	000db981 	.word	0x000db981
   e8c34:	000dba75 	.word	0x000dba75
   e8c38:	000dc795 	.word	0x000dc795
   e8c3c:	000dcf3d 	.word	0x000dcf3d
   e8c40:	000dd085 	.word	0x000dd085
   e8c44:	000dd2d9 	.word	0x000dd2d9
   e8c48:	000dd35d 	.word	0x000dd35d
   e8c4c:	000dd421 	.word	0x000dd421
   e8c50:	000dd4e5 	.word	0x000dd4e5

000e8c54 <link_constructors_end>:
	...
