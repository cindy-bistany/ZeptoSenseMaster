
c:/Code/ZeptoSensorBlynk-master/zeptologger/target/1.4.3/boron/zeptologger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014a60  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00028c00  2**0
                  CONTENTS
  4 .data         00000154  2003d518  000e8a80  0001d518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001184  2003d670  2003d670  0002d670  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e8bd4  000e8bd4  00028bd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e8bfc  000e8bfc  00028bfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00154ce6  00000000  00000000  00028c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001c9e5  00000000  00000000  0017d8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000300ef  00000000  00000000  0019a2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003bd0  00000000  00000000  001ca3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006ad0  00000000  00000000  001cdf8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004bf1d  00000000  00000000  001d4a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d112  00000000  00000000  00220977  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114630  00000000  00000000  0026da89  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000123fc  00000000  00000000  003820bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00f faef 	bl	e3614 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00f faf4 	bl	e362a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d518 	.word	0x2003d518
   d404c:	000e8a80 	.word	0x000e8a80
   d4050:	2003d66c 	.word	0x2003d66c
   d4054:	2003d670 	.word	0x2003d670
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f007 fd61 	bl	dbb24 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e8a80 	.word	0x000e8a80
   d4084:	000e8a1c 	.word	0x000e8a1c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f004 ba10 	b.w	d84ac <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f004 fdbd 	bl	d8c0c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f007 bd13 	b.w	dbac0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f006 bcf3 	b.w	daa84 <malloc>

000d409e <_ZdlPv>:
   d409e:	f006 bcf9 	b.w	daa94 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f006 bcf7 	b.w	daa94 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00e fc4b 	bl	e297c <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00e fc3f 	bl	e2978 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00e fde9 	bl	e2ce0 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00e ff09 	bl	e2f34 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00f f855 	bl	e3200 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00f f833 	bl	e31ec <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00f f807 	bl	e31c4 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00e fff9 	bl	e31d8 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00e ffcd 	bl	e31b0 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00e ffb5 	bl	e31b0 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00e ff9b 	bl	e31b0 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00e ff92 	bl	e31b0 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00e fcbd 	bl	e2c14 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00e ff7d 	bl	e31b0 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00e ff74 	bl	e31b0 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00e fc9f 	bl	e2c14 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00e ff61 	bl	e31b0 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00e ff49 	bl	e31b0 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00e ff31 	bl	e31b0 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00e fc5d 	bl	e2c14 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00e ff21 	bl	e31b0 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00e fc4d 	bl	e2c14 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f006 fb6c 	bl	daa84 <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00f f93a 	bl	e362a <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00f f925 	bl	e3614 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00e feec 	bl	e31c4 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00e ff02 	bl	e3200 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00e ff45 	bl	e3290 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00e fbe7 	bl	e2bf4 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00e feb2 	bl	e31c4 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00e feaa 	bl	e31c4 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00e fea3 	bl	e31c4 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00e feb9 	bl	e3200 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00e feb1 	bl	e3200 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00e fef4 	bl	e3290 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00e feef 	bl	e3290 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00e fb89 	bl	e2bf4 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00e fbd2 	bl	e2ce0 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f006 ba9b 	b.w	daa94 <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f010 fe31 	bl	e5248 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f00f ffc8 	bl	e45bc <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f00f ffae 	bl	e45bc <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000ddfc1 	.word	0x000ddfc1
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000de2c1 	.word	0x000de2c1
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e6968 	.word	0x000e6968

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000de2c1 	.word	0x000de2c1

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000ddfc1 	.word	0x000ddfc1
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}

000d52f2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d52f2:	4770      	bx	lr

000d52f4 <_Z8ADXL_ISRv>:

//******************** ISR *********************
// Look for Interrupts and Triggered Action    
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d52f4:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_Z8ADXL_ISRv+0x8>)
   d52f6:	2201      	movs	r2, #1
   d52f8:	701a      	strb	r2, [r3, #0]
   d52fa:	4770      	bx	lr
   d52fc:	2003de84 	.word	0x2003de84

000d5300 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
   d5300:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
   d5302:	f007 f905 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5306:	215b      	movs	r1, #91	; 0x5b
   d5308:	f005 ff1a 	bl	db140 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
   d530c:	f007 f900 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5310:	4604      	mov	r4, r0
   d5312:	f005 f83f 	bl	da394 <_Z11BlynkMillisv>
   d5316:	220a      	movs	r2, #10
   d5318:	4601      	mov	r1, r0
   d531a:	4620      	mov	r0, r4
   d531c:	f005 ff49 	bl	db1b2 <_ZN5Print5printEmi>
            BLYNK_PRINT.print(BLYNK_F("] "));
   d5320:	f007 f8f6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5324:	4902      	ldr	r1, [pc, #8]	; (d5330 <_ZL14BLYNK_LOG_TIMEv+0x30>)
        }
   d5326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
   d532a:	f005 bf05 	b.w	db138 <_ZN5Print5printEPKc>
   d532e:	bf00      	nop
   d5330:	000e6bd3 	.word	0x000e6bd3

000d5334 <__tcf_0>:
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d5334:	b538      	push	{r3, r4, r5, lr}
   d5336:	4d06      	ldr	r5, [pc, #24]	; (d5350 <__tcf_0+0x1c>)
   d5338:	2400      	movs	r4, #0
   d533a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d533e:	4428      	add	r0, r5
   d5340:	3c10      	subs	r4, #16
   d5342:	f005 fd43 	bl	dadcc <_ZN6StringD1Ev>
   d5346:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d534a:	d1f6      	bne.n	d533a <__tcf_0+0x6>
   d534c:	bd38      	pop	{r3, r4, r5, pc}
   d534e:	bf00      	nop
   d5350:	2003d6d8 	.word	0x2003d6d8

000d5354 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5354:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5356:	4608      	mov	r0, r1
   d5358:	f00e f849 	bl	e33ee <atoi>
   d535c:	4c08      	ldr	r4, [pc, #32]	; (d5380 <_Z16gmtOffsetHandlerPKcS0_+0x2c>)
  gmtOffsetValid = true;
   d535e:	4b09      	ldr	r3, [pc, #36]	; (d5384 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5360:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d5362:	2201      	movs	r2, #1
   d5364:	701a      	strb	r2, [r3, #0]
  DEBUG_PRINT("GMT seconds offset is: ");
   d5366:	f007 f8d3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d536a:	4907      	ldr	r1, [pc, #28]	; (d5388 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
   d536c:	f005 fee4 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d5370:	f007 f8ce 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5374:	6821      	ldr	r1, [r4, #0]
   d5376:	220a      	movs	r2, #10
}
   d5378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
  gmtOffsetValid = true;
  DEBUG_PRINT("GMT seconds offset is: ");
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d537c:	f005 bf6c 	b.w	db258 <_ZN5Print7printlnEii>
   d5380:	2003d560 	.word	0x2003d560
   d5384:	2003e16c 	.word	0x2003e16c
   d5388:	000e6bd6 	.word	0x000e6bd6

000d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>:
        #include <ctype.h>
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
   d538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d538e:	4604      	mov	r4, r0
   d5390:	460e      	mov	r6, r1
   d5392:	4617      	mov	r7, r2
            if (len) {
                BLYNK_LOG_TIME();
   d5394:	f7ff ffb4 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
                BLYNK_PRINT.print(msg);
   d5398:	f007 f8ba 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d539c:	4621      	mov	r1, r4
   d539e:	f005 fecb 	bl	db138 <_ZN5Print5printEPKc>
   d53a2:	4437      	add	r7, r6
                int l2 = len;
                const uint8_t* octets = (const uint8_t*)addr;
                bool prev_print = true;
   d53a4:	2401      	movs	r4, #1
                while (l2--) {
   d53a6:	42be      	cmp	r6, r7
   d53a8:	d028      	beq.n	d53fc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x70>
                    const uint8_t c = *octets++ & 0xFF;
   d53aa:	f816 5b01 	ldrb.w	r5, [r6], #1
                    if (c >= 32 && c < 127) {
   d53ae:	f1a5 0320 	sub.w	r3, r5, #32
   d53b2:	2b5e      	cmp	r3, #94	; 0x5e
   d53b4:	d80b      	bhi.n	d53ce <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x42>
                        if (!prev_print) { BLYNK_PRINT.print(']'); }
   d53b6:	b924      	cbnz	r4, d53c2 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x36>
   d53b8:	f007 f8aa 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d53bc:	215d      	movs	r1, #93	; 0x5d
   d53be:	f005 febf 	bl	db140 <_ZN5Print5printEc>
                        BLYNK_PRINT.print((char)c);
   d53c2:	f007 f8a5 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d53c6:	4629      	mov	r1, r5
   d53c8:	f005 feba 	bl	db140 <_ZN5Print5printEc>
   d53cc:	e7ea      	b.n	d53a4 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x18>
                        prev_print = true;
                    } else {
                        BLYNK_PRINT.print(prev_print?'[':'|');
   d53ce:	f007 f89f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d53d2:	2c00      	cmp	r4, #0
   d53d4:	bf14      	ite	ne
   d53d6:	215b      	movne	r1, #91	; 0x5b
   d53d8:	217c      	moveq	r1, #124	; 0x7c
   d53da:	f005 feb1 	bl	db140 <_ZN5Print5printEc>
                        if (c < 0x10) { BLYNK_PRINT.print('0'); }
   d53de:	2d0f      	cmp	r5, #15
   d53e0:	d804      	bhi.n	d53ec <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x60>
   d53e2:	f007 f895 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d53e6:	2130      	movs	r1, #48	; 0x30
   d53e8:	f005 feaa 	bl	db140 <_ZN5Print5printEc>
                        BLYNK_PRINT.print(c, HEX);
   d53ec:	f007 f890 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d53f0:	2210      	movs	r2, #16
   d53f2:	4629      	mov	r1, r5
   d53f4:	f005 feea 	bl	db1cc <_ZN5Print5printEhi>
                        prev_print = false;
   d53f8:	2400      	movs	r4, #0
   d53fa:	e7d4      	b.n	d53a6 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x1a>
                    }
                }
                if (!prev_print) {
   d53fc:	b924      	cbnz	r4, d5408 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x7c>
                    BLYNK_PRINT.print(']');
   d53fe:	f007 f887 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5402:	215d      	movs	r1, #93	; 0x5d
   d5404:	f005 fe9c 	bl	db140 <_ZN5Print5printEc>
                }
                BLYNK_PRINT.println();
   d5408:	f007 f882 	bl	dc510 <_Z22__fetch_global_Serial1v>
            }
        }
   d540c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    }
                }
                if (!prev_print) {
                    BLYNK_PRINT.print(']');
                }
                BLYNK_PRINT.println();
   d5410:	f005 be99 	b.w	db146 <_ZN5Print7printlnEv>

000d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d5414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5416:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d541a:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d541c:	f88d 3000 	strb.w	r3, [sp]
   d5420:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d5422:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5424:	f006 fcda 	bl	dbddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d5428:	4628      	mov	r0, r5
   d542a:	b003      	add	sp, #12
   d542c:	bd30      	pop	{r4, r5, pc}

000d542e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d542e:	2300      	movs	r3, #0
   d5430:	461a      	mov	r2, r3
   d5432:	4619      	mov	r1, r3
   d5434:	6840      	ldr	r0, [r0, #4]
   d5436:	f005 babd 	b.w	da9b4 <network_on>

000d543a <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d543a:	2200      	movs	r2, #0
   d543c:	4611      	mov	r1, r2
   d543e:	6840      	ldr	r0, [r0, #4]
   d5440:	f005 bab0 	b.w	da9a4 <network_ready>

000d5444 <_ZN11SystemClass11sleepResultEv>:

    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    SleepResult sleepResult() {
   d5444:	b573      	push	{r0, r1, r4, r5, r6, lr}
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d5446:	4b0e      	ldr	r3, [pc, #56]	; (d5480 <_ZN11SystemClass11sleepResultEv+0x3c>)
   d5448:	781d      	ldrb	r5, [r3, #0]

    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    SleepResult sleepResult() {
   d544a:	4606      	mov	r6, r0
   d544c:	460c      	mov	r4, r1
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d544e:	b985      	cbnz	r5, d5472 <_ZN11SystemClass11sleepResultEv+0x2e>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5450:	a802      	add	r0, sp, #8
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d5452:	2201      	movs	r2, #1
   d5454:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5456:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d545a:	462a      	mov	r2, r5
   d545c:	4629      	mov	r1, r5
   d545e:	f005 f871 	bl	da544 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5462:	9b01      	ldr	r3, [sp, #4]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d5464:	2b1e      	cmp	r3, #30
   d5466:	d104      	bne.n	d5472 <_ZN11SystemClass11sleepResultEv+0x2e>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d5468:	2303      	movs	r3, #3
   d546a:	7023      	strb	r3, [r4, #0]
   d546c:	2308      	movs	r3, #8
   d546e:	8065      	strh	r5, [r4, #2]
   d5470:	80a3      	strh	r3, [r4, #4]
            }
        }
        return sleepResult_;
   d5472:	6823      	ldr	r3, [r4, #0]
   d5474:	6033      	str	r3, [r6, #0]
   d5476:	88a3      	ldrh	r3, [r4, #4]
   d5478:	80b3      	strh	r3, [r6, #4]
    }
   d547a:	4630      	mov	r0, r6
   d547c:	b002      	add	sp, #8
   d547e:	bd70      	pop	{r4, r5, r6, pc}
   d5480:	2003d674 	.word	0x2003d674

000d5484 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d5484:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5486:	f005 f835 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d548a:	4b03      	ldr	r3, [pc, #12]	; (d5498 <_ZN10CloudClass7processEv+0x14>)
   d548c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d548e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5492:	f005 babf 	b.w	daa14 <spark_process>
   d5496:	bf00      	nop
   d5498:	2003e5f8 	.word	0x2003e5f8

000d549c <_ZN8particle9LEDStatus9setActiveEb>:
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d549c:	2200      	movs	r2, #0
   d549e:	3004      	adds	r0, #4
   d54a0:	f005 ba00 	b.w	da8a4 <led_set_status_active>

000d54a4 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d54a4:	b510      	push	{r4, lr}
   d54a6:	4b04      	ldr	r3, [pc, #16]	; (d54b8 <_ZN8particle9LEDStatusD1Ev+0x14>)
   d54a8:	6003      	str	r3, [r0, #0]
   d54aa:	4604      	mov	r4, r0
    setActive(false);
   d54ac:	2100      	movs	r1, #0
   d54ae:	f7ff fff5 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
}
   d54b2:	4620      	mov	r0, r4
   d54b4:	bd10      	pop	{r4, pc}
   d54b6:	bf00      	nop
   d54b8:	000e6b74 	.word	0x000e6b74

000d54bc <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d54bc:	b510      	push	{r4, lr}
   d54be:	4604      	mov	r4, r0
    setActive(false);
}
   d54c0:	f7ff fff0 	bl	d54a4 <_ZN8particle9LEDStatusD1Ev>
   d54c4:	4620      	mov	r0, r4
   d54c6:	2120      	movs	r1, #32
   d54c8:	f007 fe09 	bl	dd0de <_ZdlPvj>
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd10      	pop	{r4, pc}

000d54d0 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54d0:	6803      	ldr	r3, [r0, #0]
   d54d2:	b12b      	cbz	r3, d54e0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d54d4:	6842      	ldr	r2, [r0, #4]
   d54d6:	4293      	cmp	r3, r2
   d54d8:	d202      	bcs.n	d54e0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d54da:	4618      	mov	r0, r3
   d54dc:	f00d bf87 	b.w	e33ee <atoi>
   d54e0:	2000      	movs	r0, #0
   d54e2:	4770      	bx	lr

000d54e4 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d54e4:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54e6:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d54e8:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d54ea:	b145      	cbz	r5, d54fe <_ZN10BlynkParam8iteratorppEv+0x1a>
   d54ec:	6843      	ldr	r3, [r0, #4]
   d54ee:	429d      	cmp	r5, r3
   d54f0:	d205      	bcs.n	d54fe <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d54f2:	4628      	mov	r0, r5
   d54f4:	f00f f85a 	bl	e45ac <strlen>
   d54f8:	3001      	adds	r0, #1
   d54fa:	4405      	add	r5, r0
   d54fc:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d54fe:	4620      	mov	r0, r4
   d5500:	bd38      	pop	{r3, r4, r5, pc}

000d5502 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d5502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5504:	4604      	mov	r4, r0
    if (str == NULL) {
   d5506:	460f      	mov	r7, r1
   d5508:	6846      	ldr	r6, [r0, #4]
   d550a:	b921      	cbnz	r1, d5516 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d550c:	6803      	ldr	r3, [r0, #0]
   d550e:	1c72      	adds	r2, r6, #1
   d5510:	6042      	str	r2, [r0, #4]
   d5512:	5599      	strb	r1, [r3, r6]
        return;
   d5514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d5516:	4608      	mov	r0, r1
   d5518:	f00f f848 	bl	e45ac <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d551c:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d551e:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5520:	19aa      	adds	r2, r5, r6
   d5522:	429a      	cmp	r2, r3
   d5524:	d808      	bhi.n	d5538 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d5526:	6820      	ldr	r0, [r4, #0]
   d5528:	462a      	mov	r2, r5
   d552a:	4639      	mov	r1, r7
   d552c:	4430      	add	r0, r6
   d552e:	f00e f871 	bl	e3614 <memcpy>
    len += l;
   d5532:	6863      	ldr	r3, [r4, #4]
   d5534:	441d      	add	r5, r3
   d5536:	6065      	str	r5, [r4, #4]
   d5538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d553c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d553c:	b570      	push	{r4, r5, r6, lr}
   d553e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	68a6      	ldr	r6, [r4, #8]
   d5544:	6825      	ldr	r5, [r4, #0]
   d5546:	4a05      	ldr	r2, [pc, #20]	; (d555c <_ZN10BlynkParam3addEi+0x20>)
   d5548:	460b      	mov	r3, r1
   d554a:	1a31      	subs	r1, r6, r0
   d554c:	4428      	add	r0, r5
   d554e:	f005 fac1 	bl	daad4 <snprintf>
   d5552:	6863      	ldr	r3, [r4, #4]
   d5554:	3001      	adds	r0, #1
   d5556:	4418      	add	r0, r3
   d5558:	6060      	str	r0, [r4, #4]
   d555a:	bd70      	pop	{r4, r5, r6, pc}
   d555c:	000e6bee 	.word	0x000e6bee

000d5560 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d5560:	b570      	push	{r4, r5, r6, lr}
   d5562:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	68a6      	ldr	r6, [r4, #8]
   d5568:	6825      	ldr	r5, [r4, #0]
   d556a:	4a05      	ldr	r2, [pc, #20]	; (d5580 <_ZN10BlynkParam3addEl+0x20>)
   d556c:	460b      	mov	r3, r1
   d556e:	1a31      	subs	r1, r6, r0
   d5570:	4428      	add	r0, r5
   d5572:	f005 faaf 	bl	daad4 <snprintf>
   d5576:	6863      	ldr	r3, [r4, #4]
   d5578:	3001      	adds	r0, #1
   d557a:	4418      	add	r0, r3
   d557c:	6060      	str	r0, [r4, #4]
   d557e:	bd70      	pop	{r4, r5, r6, pc}
   d5580:	000e6bf1 	.word	0x000e6bf1

000d5584 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5584:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
   d5586:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5588:	b087      	sub	sp, #28
   d558a:	4604      	mov	r4, r0
        if (domain) {
   d558c:	b1ef      	cbz	r7, d55ca <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
   d558e:	f7ff feb7 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5592:	f006 ffbd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5596:	492f      	ldr	r1, [pc, #188]	; (d5654 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d5598:	f005 fdce 	bl	db138 <_ZN5Print5printEPKc>
   d559c:	f006 ffb8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d55a2:	f005 fdc9 	bl	db138 <_ZN5Print5printEPKc>
   d55a6:	f006 ffb3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55aa:	213a      	movs	r1, #58	; 0x3a
   d55ac:	f005 fdc8 	bl	db140 <_ZN5Print5printEc>
   d55b0:	f006 ffae 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55b4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d55b6:	220a      	movs	r2, #10
   d55b8:	f005 fe4e 	bl	db258 <_ZN5Print7printlnEii>
            return (1 == client.connect(domain, port));
   d55bc:	2300      	movs	r3, #0
   d55be:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d55c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d55c2:	4620      	mov	r0, r4
   d55c4:	f007 fa14 	bl	dc9f0 <_ZN9TCPClient7connectEPKctm>
   d55c8:	e03f      	b.n	d564a <_ZN22BlynkTransportParticle7connectEv+0xc6>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
   d55ca:	f7ff fe99 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d55ce:	f006 ff9f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55d2:	4920      	ldr	r1, [pc, #128]	; (d5654 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d55d4:	f005 fdb0 	bl	db138 <_ZN5Print5printEPKc>
   d55d8:	f006 ff9a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55dc:	220a      	movs	r2, #10
   d55de:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d55e2:	f005 fdf3 	bl	db1cc <_ZN5Print5printEhi>
   d55e6:	f006 ff93 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55ea:	212e      	movs	r1, #46	; 0x2e
   d55ec:	f005 fda8 	bl	db140 <_ZN5Print5printEc>
   d55f0:	f006 ff8e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d55f4:	220a      	movs	r2, #10
   d55f6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d55fa:	f005 fde7 	bl	db1cc <_ZN5Print5printEhi>
   d55fe:	f006 ff87 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5602:	212e      	movs	r1, #46	; 0x2e
   d5604:	f005 fd9c 	bl	db140 <_ZN5Print5printEc>
   d5608:	4625      	mov	r5, r4
   d560a:	f006 ff81 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d560e:	220a      	movs	r2, #10
   d5610:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d5614:	f005 fdda 	bl	db1cc <_ZN5Print5printEhi>
   d5618:	f006 ff7a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d561c:	212e      	movs	r1, #46	; 0x2e
   d561e:	f005 fd8f 	bl	db140 <_ZN5Print5printEc>
   d5622:	f006 ff75 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5626:	220a      	movs	r2, #10
   d5628:	f815 1f20 	ldrb.w	r1, [r5, #32]!
   d562c:	f005 fdd0 	bl	db1d0 <_ZN5Print7printlnEhi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5630:	4b09      	ldr	r3, [pc, #36]	; (d5658 <_ZN22BlynkTransportParticle7connectEv+0xd4>)
   d5632:	9300      	str	r3, [sp, #0]
   d5634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5636:	ae01      	add	r6, sp, #4
   d5638:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d563a:	682b      	ldr	r3, [r5, #0]
   d563c:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   d563e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d5640:	463b      	mov	r3, r7
   d5642:	4669      	mov	r1, sp
   d5644:	4620      	mov	r0, r4
   d5646:	f007 fa55 	bl	dcaf4 <_ZN9TCPClient7connectE9IPAddresstm>
   d564a:	1e43      	subs	r3, r0, #1
   d564c:	4258      	negs	r0, r3
   d564e:	4158      	adcs	r0, r3
        }
        return 0;
    }
   d5650:	b007      	add	sp, #28
   d5652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5654:	000e6bf5 	.word	0x000e6bf5
   d5658:	000e7f20 	.word	0x000e7f20

000d565c <_ZN13BlynkParticle6configEPKcS1_t>:
public:
    BlynkParticle(BlynkTransportParticle& transp)
        : Base(transp)
    {}

    void config(const char* auth,
   d565c:	b570      	push	{r4, r5, r6, lr}
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d565e:	6041      	str	r1, [r0, #4]
   d5660:	4604      	mov	r4, r0
   d5662:	4616      	mov	r6, r2
   d5664:	461d      	mov	r5, r3
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d5666:	f004 fe95 	bl	da394 <_Z11BlynkMillisv>
   d566a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d566e:	3808      	subs	r0, #8
   d5670:	6120      	str	r0, [r4, #16]
   d5672:	60e0      	str	r0, [r4, #12]
   d5674:	6160      	str	r0, [r4, #20]

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
        BLYNK_LOG1(BLYNK_F("Blynk v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE));
#else
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
   d5676:	f7ff fe43 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d567a:	f006 ff49 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d567e:	4903      	ldr	r1, [pc, #12]	; (d568c <_ZN13BlynkParticle6configEPKcS1_t+0x30>)
   d5680:	f005 fd6d 	bl	db15e <_ZN5Print7printlnEPKc>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d5684:	6821      	ldr	r1, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d5686:	634e      	str	r6, [r1, #52]	; 0x34
        port = p;
   d5688:	870d      	strh	r5, [r1, #56]	; 0x38
   d568a:	bd70      	pop	{r4, r5, r6, pc}
   d568c:	000e6c04 	.word	0x000e6c04

000d5690 <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d5690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5694:	4692      	mov	sl, r2
   d5696:	b08f      	sub	sp, #60	; 0x3c
   d5698:	4699      	mov	r9, r3
   d569a:	4606      	mov	r6, r0
   d569c:	461d      	mov	r5, r3
   d569e:	4688      	mov	r8, r1
  byte error, address;
  bool result = true;
   d56a0:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d56a2:	ebc9 0305 	rsb	r3, r9, r5
   d56a6:	459a      	cmp	sl, r3
   d56a8:	d97b      	bls.n	d57a2 <_Z15checkI2CDevicesP6StringPhjPb+0x112>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d56aa:	f818 7b01 	ldrb.w	r7, [r8], #1
    Wire.beginTransmission(address);
   d56ae:	f007 fcd1 	bl	dd054 <_Z19__fetch_global_Wirev>
   d56b2:	4639      	mov	r1, r7
   d56b4:	f006 ffc8 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d56b8:	f007 fccc 	bl	dd054 <_Z19__fetch_global_Wirev>
   d56bc:	f006 ffcf 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d56c0:	bb78      	cbnz	r0, d5722 <_Z15checkI2CDevicesP6StringPhjPb+0x92>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d56c2:	f006 ff25 	bl	dc510 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d56c6:	4939      	ldr	r1, [pc, #228]	; (d57ac <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d56c8:	4683      	mov	fp, r0
   d56ca:	a802      	add	r0, sp, #8
   d56cc:	f005 fbc5 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d56d0:	4631      	mov	r1, r6
   d56d2:	a802      	add	r0, sp, #8
   d56d4:	f005 fc60 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d56d8:	4935      	ldr	r1, [pc, #212]	; (d57b0 <_Z15checkI2CDevicesP6StringPhjPb+0x120>)
   d56da:	f005 fc69 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d56de:	4935      	ldr	r1, [pc, #212]	; (d57b4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d56e0:	f005 fc66 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d56e4:	2210      	movs	r2, #16
   d56e6:	9001      	str	r0, [sp, #4]
   d56e8:	4639      	mov	r1, r7
   d56ea:	a806      	add	r0, sp, #24
   d56ec:	f005 fc18 	bl	daf20 <_ZN6StringC1Ehh>
   d56f0:	9b01      	ldr	r3, [sp, #4]
   d56f2:	a906      	add	r1, sp, #24
   d56f4:	4618      	mov	r0, r3
   d56f6:	f005 fc4f 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d56fa:	4601      	mov	r1, r0
   d56fc:	a80a      	add	r0, sp, #40	; 0x28
   d56fe:	f005 fbeb 	bl	daed8 <_ZN6StringC1ERKS_>
   d5702:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5704:	4658      	mov	r0, fp
   d5706:	f005 fd2a 	bl	db15e <_ZN5Print7printlnEPKc>
   d570a:	a80a      	add	r0, sp, #40	; 0x28
   d570c:	f005 fb5e 	bl	dadcc <_ZN6StringD1Ev>
   d5710:	a806      	add	r0, sp, #24
   d5712:	f005 fb5b 	bl	dadcc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5716:	a802      	add	r0, sp, #8
   d5718:	f005 fb58 	bl	dadcc <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d571c:	2301      	movs	r3, #1
   d571e:	702b      	strb	r3, [r5, #0]
   d5720:	e03c      	b.n	d579c <_Z15checkI2CDevicesP6StringPhjPb+0x10c>
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (!error==0)
    {
      Wire.reset();
   d5722:	f007 fc97 	bl	dd054 <_Z19__fetch_global_Wirev>
   d5726:	f006 ffa1 	bl	dc66c <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d572a:	f007 fc93 	bl	dd054 <_Z19__fetch_global_Wirev>
   d572e:	4639      	mov	r1, r7
   d5730:	f006 ff8a 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d5734:	f007 fc8e 	bl	dd054 <_Z19__fetch_global_Wirev>
   d5738:	f006 ff91 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d573c:	2800      	cmp	r0, #0
   d573e:	d0c0      	beq.n	d56c2 <_Z15checkI2CDevicesP6StringPhjPb+0x32>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d5740:	f006 fee6 	bl	dc510 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5744:	4919      	ldr	r1, [pc, #100]	; (d57ac <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d5746:	4604      	mov	r4, r0
   d5748:	a802      	add	r0, sp, #8
   d574a:	f005 fb86 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d574e:	4631      	mov	r1, r6
   d5750:	a802      	add	r0, sp, #8
   d5752:	f005 fc21 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d5756:	4918      	ldr	r1, [pc, #96]	; (d57b8 <_Z15checkI2CDevicesP6StringPhjPb+0x128>)
   d5758:	f005 fc2a 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d575c:	4915      	ldr	r1, [pc, #84]	; (d57b4 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d575e:	f005 fc27 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d5762:	2210      	movs	r2, #16
   d5764:	4683      	mov	fp, r0
   d5766:	4639      	mov	r1, r7
   d5768:	a806      	add	r0, sp, #24
   d576a:	f005 fbd9 	bl	daf20 <_ZN6StringC1Ehh>
   d576e:	a906      	add	r1, sp, #24
   d5770:	4658      	mov	r0, fp
   d5772:	f005 fc11 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d5776:	4601      	mov	r1, r0
   d5778:	a80a      	add	r0, sp, #40	; 0x28
   d577a:	f005 fbad 	bl	daed8 <_ZN6StringC1ERKS_>
   d577e:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5780:	4620      	mov	r0, r4
   d5782:	f005 fcec 	bl	db15e <_ZN5Print7printlnEPKc>
   d5786:	a80a      	add	r0, sp, #40	; 0x28
   d5788:	f005 fb20 	bl	dadcc <_ZN6StringD1Ev>
   d578c:	a806      	add	r0, sp, #24
   d578e:	f005 fb1d 	bl	dadcc <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d5792:	2400      	movs	r4, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5794:	a802      	add	r0, sp, #8
   d5796:	f005 fb19 	bl	dadcc <_ZN6StringD1Ev>
   d579a:	702c      	strb	r4, [r5, #0]
   d579c:	3610      	adds	r6, #16
   d579e:	3501      	adds	r5, #1
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d57a0:	e77f      	b.n	d56a2 <_Z15checkI2CDevicesP6StringPhjPb+0x12>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d57a2:	4620      	mov	r0, r4
   d57a4:	b00f      	add	sp, #60	; 0x3c
   d57a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57aa:	bf00      	nop
   d57ac:	000e6c92 	.word	0x000e6c92
   d57b0:	000e6caa 	.word	0x000e6caa
   d57b4:	000e6c9a 	.word	0x000e6c9a
   d57b8:	000e6ca6 	.word	0x000e6ca6

000d57bc <_Z9saveStatev>:
  DEBUG_PRINTLN();
  readingCount++;
}

void saveState()
{
   d57bc:	b510      	push	{r4, lr}
  // EEPROM.put(0, state);
  DEBUG_PRINTLN("Saving State");
   d57be:	f006 fea7 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d57c2:	4906      	ldr	r1, [pc, #24]	; (d57dc <_Z9saveStatev+0x20>)
   d57c4:	f005 fccb 	bl	db15e <_ZN5Print7printlnEPKc>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d57c8:	f240 432c 	movw	r3, #1068	; 0x42c
   d57cc:	4a04      	ldr	r2, [pc, #16]	; (d57e0 <_Z9saveStatev+0x24>)
   d57ce:	4805      	ldr	r0, [pc, #20]	; (d57e4 <_Z9saveStatev+0x28>)
   d57d0:	2100      	movs	r1, #0
  fram.put(0,state);
}
   d57d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d57d6:	f003 bf95 	b.w	d9704 <_ZN10MB85RC256V9writeDataEjPKhj>
   d57da:	bf00      	nop
   d57dc:	000e6cf2 	.word	0x000e6cf2
   d57e0:	2003da40 	.word	0x2003da40
   d57e4:	2003d6a8 	.word	0x2003d6a8

000d57e8 <_Z9loadStatev>:

void loadState()
{
   d57e8:	b510      	push	{r4, lr}
  // EEPROM.get(0, state);
  DEBUG_PRINTLN("Loading State");
   d57ea:	f006 fe91 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d57ee:	4906      	ldr	r1, [pc, #24]	; (d5808 <_Z9loadStatev+0x20>)
   d57f0:	f005 fcb5 	bl	db15e <_ZN5Print7printlnEPKc>
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d57f4:	f240 432c 	movw	r3, #1068	; 0x42c
   d57f8:	4a04      	ldr	r2, [pc, #16]	; (d580c <_Z9loadStatev+0x24>)
   d57fa:	4805      	ldr	r0, [pc, #20]	; (d5810 <_Z9loadStatev+0x28>)
   d57fc:	2100      	movs	r1, #0
  fram.get(0,state);
}
   d57fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5802:	f003 bf33 	b.w	d966c <_ZN10MB85RC256V8readDataEjPhj>
   d5806:	bf00      	nop
   d5808:	000e6cff 	.word	0x000e6cff
   d580c:	2003da40 	.word	0x2003da40
   d5810:	2003d6a8 	.word	0x2003d6a8

000d5814 <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d5814:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d5816:	4b05      	ldr	r3, [pc, #20]	; (d582c <BlynkWidgetWriteInternalPinADIS+0x18>)
   d5818:	2200      	movs	r2, #0
   d581a:	701a      	strb	r2, [r3, #0]
 DEBUG_PRINTLN("Disconnected");
   d581c:	f006 fe78 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5820:	4903      	ldr	r1, [pc, #12]	; (d5830 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d5822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 DEBUG_PRINTLN("Disconnected");
   d5826:	f005 bc9a 	b.w	db15e <_ZN5Print7printlnEPKc>
   d582a:	bf00      	nop
   d582c:	2003da04 	.word	0x2003da04
   d5830:	000e6d0d 	.word	0x000e6d0d

000d5834 <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d5834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5836:	6809      	ldr	r1, [r1, #0]
   d5838:	4668      	mov	r0, sp
   d583a:	f005 fb0e 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d583e:	4668      	mov	r0, sp
   d5840:	f005 fc09 	bl	db056 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d5844:	9900      	ldr	r1, [sp, #0]
   d5846:	4805      	ldr	r0, [pc, #20]	; (d585c <BlynkWidgetWrite16+0x28>)
   d5848:	f00e f978 	bl	e3b3c <strcpy>
    saveState();
   d584c:	f7ff ffb6 	bl	d57bc <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d5850:	4668      	mov	r0, sp
   d5852:	f005 fabb 	bl	dadcc <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d5856:	b005      	add	sp, #20
   d5858:	f85d fb04 	ldr.w	pc, [sp], #4
   d585c:	2003db50 	.word	0x2003db50

000d5860 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d5860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5862:	6809      	ldr	r1, [r1, #0]
   d5864:	4668      	mov	r0, sp
   d5866:	f005 faf8 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d586a:	4668      	mov	r0, sp
   d586c:	f005 fbf3 	bl	db056 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d5870:	9900      	ldr	r1, [sp, #0]
   d5872:	4805      	ldr	r0, [pc, #20]	; (d5888 <BlynkWidgetWrite18+0x28>)
   d5874:	f00e f962 	bl	e3b3c <strcpy>
    saveState();
   d5878:	f7ff ffa0 	bl	d57bc <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d587c:	4668      	mov	r0, sp
   d587e:	f005 faa5 	bl	dadcc <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d5882:	b005      	add	sp, #20
   d5884:	f85d fb04 	ldr.w	pc, [sp], #4
   d5888:	2003dc50 	.word	0x2003dc50

000d588c <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d588c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d588e:	6809      	ldr	r1, [r1, #0]
   d5890:	4668      	mov	r0, sp
   d5892:	f005 fae2 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d5896:	4668      	mov	r0, sp
   d5898:	f005 fbdd 	bl	db056 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d589c:	9900      	ldr	r1, [sp, #0]
   d589e:	4805      	ldr	r0, [pc, #20]	; (d58b4 <BlynkWidgetWrite26+0x28>)
   d58a0:	f00e f94c 	bl	e3b3c <strcpy>
    saveState();
   d58a4:	f7ff ff8a 	bl	d57bc <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d58a8:	4668      	mov	r0, sp
   d58aa:	f005 fa8f 	bl	dadcc <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d58ae:	b005      	add	sp, #20
   d58b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d58b4:	2003dd50 	.word	0x2003dd50

000d58b8 <BlynkWidgetWrite25>:
  System.reset();
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d58b8:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d58ba:	6808      	ldr	r0, [r1, #0]
   d58bc:	f00d fd94 	bl	e33e8 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d58c0:	ec51 0b10 	vmov	r0, r1, d0
   d58c4:	f00d fd04 	bl	e32d0 <__aeabi_d2f>
   d58c8:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <BlynkWidgetWrite25+0x1c>)
   d58ca:	6018      	str	r0, [r3, #0]
  saveState();
}
   d58cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d58d0:	f7ff bf74 	b.w	d57bc <_Z9saveStatev>
   d58d4:	2003de50 	.word	0x2003de50

000d58d8 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d58d8:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d58da:	6808      	ldr	r0, [r1, #0]
   d58dc:	f00d fd87 	bl	e33ee <atoi>
   d58e0:	4b03      	ldr	r3, [pc, #12]	; (d58f0 <BlynkWidgetWrite17+0x18>)
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
  #endif
  if (param.asInt()==1)
   d58e2:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d58e4:	bf0c      	ite	eq
   d58e6:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d58e8:	2201      	movne	r2, #1
   d58ea:	701a      	strb	r2, [r3, #0]
   d58ec:	bd08      	pop	{r3, pc}
   d58ee:	bf00      	nop
   d58f0:	2003da05 	.word	0x2003da05

000d58f4 <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d58f4:	b510      	push	{r4, lr}
   d58f6:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.deviceZone=param.asInt();
   d58f8:	4c0b      	ldr	r4, [pc, #44]	; (d5928 <BlynkWidgetWrite23+0x34>)
   d58fa:	f00d fd78 	bl	e33ee <atoi>
   d58fe:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
   d5902:	f006 fe05 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5906:	4909      	ldr	r1, [pc, #36]	; (d592c <BlynkWidgetWrite23+0x38>)
   d5908:	f005 fc16 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.deviceZone);
   d590c:	f006 fe00 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5910:	220a      	movs	r2, #10
   d5912:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5916:	f005 fc9f 	bl	db258 <_ZN5Print7printlnEii>
#endif
    gmtOffsetValid=false;
   d591a:	4b05      	ldr	r3, [pc, #20]	; (d5930 <BlynkWidgetWrite23+0x3c>)
   d591c:	2200      	movs	r2, #0
   d591e:	701a      	strb	r2, [r3, #0]
  saveState();
}
   d5920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Device Zone value is: ");
    DEBUG_PRINTLN(state.deviceZone);
#endif
    gmtOffsetValid=false;
  saveState();
   d5924:	f7ff bf4a 	b.w	d57bc <_Z9saveStatev>
   d5928:	2003da40 	.word	0x2003da40
   d592c:	000e6d1a 	.word	0x000e6d1a
   d5930:	2003e16c 	.word	0x2003e16c

000d5934 <BlynkWidgetWrite24>:
}
// Update buzzerTamper flag
BLYNK_WRITE(V24) 
{
   d5934:	b510      	push	{r4, lr}
   d5936:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerTamper=param.asInt();
   d5938:	4c0b      	ldr	r4, [pc, #44]	; (d5968 <BlynkWidgetWrite24+0x34>)
   d593a:	f00d fd58 	bl	e33ee <atoi>
   d593e:	3000      	adds	r0, #0
   d5940:	bf18      	it	ne
   d5942:	2001      	movne	r0, #1
   d5944:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
  saveState();
   d5948:	f7ff ff38 	bl	d57bc <_Z9saveStatev>

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerTamper flag value is: ");
   d594c:	f006 fde0 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5950:	4906      	ldr	r1, [pc, #24]	; (d596c <BlynkWidgetWrite24+0x38>)
   d5952:	f005 fbf1 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerTamper);
   d5956:	f006 fddb 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d595a:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d595e:	220a      	movs	r2, #10
#endif
}
   d5960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    state.buzzerTamper=param.asInt();
  saveState();

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerTamper flag value is: ");
    DEBUG_PRINTLN(state.buzzerTamper);
   d5964:	f005 bc78 	b.w	db258 <_ZN5Print7printlnEii>
   d5968:	2003da40 	.word	0x2003da40
   d596c:	000e6d36 	.word	0x000e6d36

000d5970 <BlynkWidgetWrite27>:
#endif
}
// Update buzzerVapor flag
BLYNK_WRITE(V27) 
{
   d5970:	b510      	push	{r4, lr}
   d5972:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.buzzerVapor=param.asInt();
   d5974:	4c0b      	ldr	r4, [pc, #44]	; (d59a4 <BlynkWidgetWrite27+0x34>)
   d5976:	f00d fd3a 	bl	e33ee <atoi>
   d597a:	3000      	adds	r0, #0
   d597c:	bf18      	it	ne
   d597e:	2001      	movne	r0, #1
   d5980:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
  saveState();
   d5984:	f7ff ff1a 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerVapor flag value is: ");
   d5988:	f006 fdc2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d598c:	4906      	ldr	r1, [pc, #24]	; (d59a8 <BlynkWidgetWrite27+0x38>)
   d598e:	f005 fbd3 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.buzzerVapor);
   d5992:	f006 fdbd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5996:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d599a:	220a      	movs	r2, #10
#endif
}
   d599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.buzzerVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update buzzerVapor flag value is: ");
    DEBUG_PRINTLN(state.buzzerVapor);
   d59a0:	f005 bc5a 	b.w	db258 <_ZN5Print7printlnEii>
   d59a4:	2003da40 	.word	0x2003da40
   d59a8:	000e6d5f 	.word	0x000e6d5f

000d59ac <BlynkWidgetWrite28>:
#endif
}
// Update notifyVapor flag
BLYNK_WRITE(V28) 
{
   d59ac:	b510      	push	{r4, lr}
   d59ae:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyVapor=param.asInt();
   d59b0:	4c0b      	ldr	r4, [pc, #44]	; (d59e0 <BlynkWidgetWrite28+0x34>)
   d59b2:	f00d fd1c 	bl	e33ee <atoi>
   d59b6:	3000      	adds	r0, #0
   d59b8:	bf18      	it	ne
   d59ba:	2001      	movne	r0, #1
   d59bc:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
  saveState();
   d59c0:	f7ff fefc 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyVapor flag value is: ");
   d59c4:	f006 fda4 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d59c8:	4906      	ldr	r1, [pc, #24]	; (d59e4 <BlynkWidgetWrite28+0x38>)
   d59ca:	f005 fbb5 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyVapor);
   d59ce:	f006 fd9f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d59d2:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d59d6:	220a      	movs	r2, #10
#endif
}
   d59d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyVapor flag value is: ");
    DEBUG_PRINTLN(state.notifyVapor);
   d59dc:	f005 bc3c 	b.w	db258 <_ZN5Print7printlnEii>
   d59e0:	2003da40 	.word	0x2003da40
   d59e4:	000e6d87 	.word	0x000e6d87

000d59e8 <BlynkWidgetWrite29>:
#endif
}
// Update notifyTamper flag
BLYNK_WRITE(V29) 
{
   d59e8:	b510      	push	{r4, lr}
   d59ea:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyTamper=param.asInt();
   d59ec:	4c0b      	ldr	r4, [pc, #44]	; (d5a1c <BlynkWidgetWrite29+0x34>)
   d59ee:	f00d fcfe 	bl	e33ee <atoi>
   d59f2:	3000      	adds	r0, #0
   d59f4:	bf18      	it	ne
   d59f6:	2001      	movne	r0, #1
   d59f8:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
  saveState();
   d59fc:	f7ff fede 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyTamper flag value is: ");
   d5a00:	f006 fd86 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a04:	4906      	ldr	r1, [pc, #24]	; (d5a20 <BlynkWidgetWrite29+0x38>)
   d5a06:	f005 fb97 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyTamper);
   d5a0a:	f006 fd81 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a0e:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d5a12:	220a      	movs	r2, #10
#endif
}
   d5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyTamper=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update notifyTamper flag value is: ");
    DEBUG_PRINTLN(state.notifyTamper);
   d5a18:	f005 bc1e 	b.w	db258 <_ZN5Print7printlnEii>
   d5a1c:	2003da40 	.word	0x2003da40
   d5a20:	000e6daf 	.word	0x000e6daf

000d5a24 <BlynkWidgetWrite31>:
#endif
}

//Accelerometer threshold
BLYNK_WRITE(V31) 
{
   d5a24:	b570      	push	{r4, r5, r6, lr}
   d5a26:	6808      	ldr	r0, [r1, #0]
  int thresh = param.asInt();
  int oldvalue=state.ActivityThreshold;
   d5a28:	4c1e      	ldr	r4, [pc, #120]	; (d5aa4 <BlynkWidgetWrite31+0x80>)
   d5a2a:	f00d fce0 	bl	e33ee <atoi>
   d5a2e:	f8d4 641c 	ldr.w	r6, [r4, #1052]	; 0x41c
   d5a32:	4605      	mov	r5, r0

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
   d5a34:	f006 fd6c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a38:	491b      	ldr	r1, [pc, #108]	; (d5aa8 <BlynkWidgetWrite31+0x84>)
   d5a3a:	f005 fb7d 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(thresh);
   d5a3e:	f006 fd67 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a42:	220a      	movs	r2, #10
   d5a44:	4629      	mov	r1, r5
   d5a46:	f005 fc07 	bl	db258 <_ZN5Print7printlnEii>
#endif
  state.ActivityThreshold=100;
  if (thresh==3)
   d5a4a:	2d03      	cmp	r5, #3
   d5a4c:	4623      	mov	r3, r4
   d5a4e:	d101      	bne.n	d5a54 <BlynkWidgetWrite31+0x30>
  	state.ActivityThreshold=144;
   d5a50:	2290      	movs	r2, #144	; 0x90
   d5a52:	e003      	b.n	d5a5c <BlynkWidgetWrite31+0x38>
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
   d5a54:	2d01      	cmp	r5, #1

#ifdef KURTDEBUG
    DEBUG_PRINT("*****Update Accelerometer threshold value is: ");
    DEBUG_PRINTLN(thresh);
#endif
  state.ActivityThreshold=100;
   d5a56:	bf14      	ite	ne
   d5a58:	2264      	movne	r2, #100	; 0x64
  if (thresh==3)
  	state.ActivityThreshold=144;
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
  	state.ActivityThreshold=72;
   d5a5a:	2248      	moveq	r2, #72	; 0x48
   d5a5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  // If value changed since the acceleromter will need to be reinitalized save the new value and reset
  if (state.ActivityThreshold != oldvalue)
   d5a60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   d5a64:	429e      	cmp	r6, r3
   d5a66:	d01b      	beq.n	d5aa0 <BlynkWidgetWrite31+0x7c>
  {
#ifdef KURTDEBUG
    DEBUG_PRINT("Update Accelerometer value is: ");
   d5a68:	f006 fd52 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a6c:	490f      	ldr	r1, [pc, #60]	; (d5aac <BlynkWidgetWrite31+0x88>)
   d5a6e:	f005 fb63 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.ActivityThreshold);
   d5a72:	f006 fd4d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a76:	4b0b      	ldr	r3, [pc, #44]	; (d5aa4 <BlynkWidgetWrite31+0x80>)
   d5a78:	220a      	movs	r2, #10
   d5a7a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   d5a7e:	f005 fbeb 	bl	db258 <_ZN5Print7printlnEii>
    DEBUG_PRINT("Will reset system ");
   d5a82:	f006 fd45 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5a86:	490a      	ldr	r1, [pc, #40]	; (d5ab0 <BlynkWidgetWrite31+0x8c>)
   d5a88:	f005 fb56 	bl	db138 <_ZN5Print5printEPKc>
#endif
    saveState();
   d5a8c:	f7ff fe96 	bl	d57bc <_Z9saveStatev>
    delay(4000);
   d5a90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d5a94:	f005 fe76 	bl	db784 <delay>
    System.reset();
  }
}
   d5a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    DEBUG_PRINTLN(state.ActivityThreshold);
    DEBUG_PRINT("Will reset system ");
#endif
    saveState();
    delay(4000);
    System.reset();
   d5a9c:	f005 b8da 	b.w	dac54 <_ZN11SystemClass5resetEv>
   d5aa0:	bd70      	pop	{r4, r5, r6, pc}
   d5aa2:	bf00      	nop
   d5aa4:	2003da40 	.word	0x2003da40
   d5aa8:	000e6dd8 	.word	0x000e6dd8
   d5aac:	000e6e07 	.word	0x000e6e07
   d5ab0:	000e6e27 	.word	0x000e6e27

000d5ab4 <BlynkWidgetWrite32>:
  }
}

// Update notifyBattery flag
BLYNK_WRITE(V32) 
{
   d5ab4:	b510      	push	{r4, lr}
   d5ab6:	6808      	ldr	r0, [r1, #0]
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
    state.notifyBattery=param.asInt();
   d5ab8:	4c0b      	ldr	r4, [pc, #44]	; (d5ae8 <BlynkWidgetWrite32+0x34>)
   d5aba:	f00d fc98 	bl	e33ee <atoi>
   d5abe:	3000      	adds	r0, #0
   d5ac0:	bf18      	it	ne
   d5ac2:	2001      	movne	r0, #1
   d5ac4:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
  saveState();
   d5ac8:	f7ff fe78 	bl	d57bc <_Z9saveStatev>
#ifdef KURTDEBUG
    DEBUG_PRINT("Update notifyBattery flag value is: ");
   d5acc:	f006 fd20 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ad0:	4906      	ldr	r1, [pc, #24]	; (d5aec <BlynkWidgetWrite32+0x38>)
   d5ad2:	f005 fb31 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.notifyBattery);
   d5ad6:	f006 fd1b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ada:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d5ade:	220a      	movs	r2, #10
#endif
}
   d5ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    #endif
    state.notifyBattery=param.asInt();
  saveState();
#ifdef KURTDEBUG
    DEBUG_PRINT("Update notifyBattery flag value is: ");
    DEBUG_PRINTLN(state.notifyBattery);
   d5ae4:	f005 bbb8 	b.w	db258 <_ZN5Print7printlnEii>
   d5ae8:	2003da40 	.word	0x2003da40
   d5aec:	000e6e3a 	.word	0x000e6e3a

000d5af0 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5af0:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5af2:	4b07      	ldr	r3, [pc, #28]	; (d5b10 <_Z12alertChangedv+0x20>)
   d5af4:	781a      	ldrb	r2, [r3, #0]
   d5af6:	4b07      	ldr	r3, [pc, #28]	; (d5b14 <_Z12alertChangedv+0x24>)
   d5af8:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d5afc:	4291      	cmp	r1, r2
   d5afe:	d005      	beq.n	d5b0c <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5b00:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d5b04:	f7ff fe5a 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b08:	2001      	movs	r0, #1
   d5b0a:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5b0c:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	2003e1dc 	.word	0x2003e1dc
   d5b14:	2003da40 	.word	0x2003da40

000d5b18 <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d5b18:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d5b1a:	4b07      	ldr	r3, [pc, #28]	; (d5b38 <_Z15batAlertChangedv+0x20>)
   d5b1c:	781a      	ldrb	r2, [r3, #0]
   d5b1e:	4b07      	ldr	r3, [pc, #28]	; (d5b3c <_Z15batAlertChangedv+0x24>)
   d5b20:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d5b24:	4291      	cmp	r1, r2
   d5b26:	d005      	beq.n	d5b34 <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d5b28:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d5b2c:	f7ff fe46 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b30:	2001      	movs	r0, #1
   d5b32:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5b34:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	2003de8d 	.word	0x2003de8d
   d5b3c:	2003da40 	.word	0x2003da40

000d5b40 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5b40:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d5b42:	4b07      	ldr	r3, [pc, #28]	; (d5b60 <_Z18tamperAlertChangedv+0x20>)
   d5b44:	781a      	ldrb	r2, [r3, #0]
   d5b46:	4b07      	ldr	r3, [pc, #28]	; (d5b64 <_Z18tamperAlertChangedv+0x24>)
   d5b48:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d5b4c:	4291      	cmp	r1, r2
   d5b4e:	d005      	beq.n	d5b5c <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5b50:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d5b54:	f7ff fe32 	bl	d57bc <_Z9saveStatev>
    return true;
   d5b58:	2001      	movs	r0, #1
   d5b5a:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d5b5c:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	2003de8c 	.word	0x2003de8c
   d5b64:	2003da40 	.word	0x2003da40

000d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b68:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5b6a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b6c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5b6e:	b17c      	cbz	r4, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b70:	6863      	ldr	r3, [r4, #4]
   d5b72:	3b01      	subs	r3, #1
   d5b74:	6063      	str	r3, [r4, #4]
   d5b76:	b95b      	cbnz	r3, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5b78:	6823      	ldr	r3, [r4, #0]
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	689b      	ldr	r3, [r3, #8]
   d5b7e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b80:	68a3      	ldr	r3, [r4, #8]
   d5b82:	3b01      	subs	r3, #1
   d5b84:	60a3      	str	r3, [r4, #8]
   d5b86:	b91b      	cbnz	r3, d5b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5b88:	6823      	ldr	r3, [r4, #0]
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	68db      	ldr	r3, [r3, #12]
   d5b8e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5b90:	4628      	mov	r0, r5
   d5b92:	bd38      	pop	{r3, r4, r5, pc}

000d5b94 <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d5b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
  DEBUG_PRINTLN(state.deviceZone);
   d5b96:	4c19      	ldr	r4, [pc, #100]	; (d5bfc <_Z23publishGMTOffsetRequestv+0x68>)
}

void publishGMTOffsetRequest()
{
  // Send to https://timezonedb.com webhook for gmtOffset
  DEBUG_PRINT("publishGMTOffsetRequest Device Zone value is: ");
   d5b98:	f006 fcba 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5b9c:	4918      	ldr	r1, [pc, #96]	; (d5c00 <_Z23publishGMTOffsetRequestv+0x6c>)
   d5b9e:	f005 facb 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d5ba2:	f006 fcb5 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ba6:	220a      	movs	r2, #10
   d5ba8:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5bac:	f005 fb54 	bl	db258 <_ZN5Print7printlnEii>
  switch (state.deviceZone)
   d5bb0:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5bb4:	4b13      	ldr	r3, [pc, #76]	; (d5c04 <_Z23publishGMTOffsetRequestv+0x70>)
   d5bb6:	2200      	movs	r2, #0
   d5bb8:	2903      	cmp	r1, #3
   d5bba:	d812      	bhi.n	d5be2 <_Z23publishGMTOffsetRequestv+0x4e>
   d5bbc:	e8df f001 	tbb	[pc, r1]
   d5bc0:	0c070211 	.word	0x0c070211
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5bc4:	781b      	ldrb	r3, [r3, #0]
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);
      break;
    case 1:
      // America/Chicago
      Particle.publish("gmtOffset", "America/Chicago", PRIVATE);
   d5bc6:	f88d 2000 	strb.w	r2, [sp]
   d5bca:	4a0f      	ldr	r2, [pc, #60]	; (d5c08 <_Z23publishGMTOffsetRequestv+0x74>)
   d5bcc:	e00d      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5bce:	781b      	ldrb	r3, [r3, #0]
      break;
    case 2:
      // America/Phoenix
      Particle.publish("gmtOffset", "America/Phoenix", PRIVATE);
   d5bd0:	f88d 2000 	strb.w	r2, [sp]
   d5bd4:	4a0d      	ldr	r2, [pc, #52]	; (d5c0c <_Z23publishGMTOffsetRequestv+0x78>)
   d5bd6:	e008      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5bd8:	781b      	ldrb	r3, [r3, #0]
      break;
    case 3:
      // America/Los_Angeles
      Particle.publish("gmtOffset", "America/Los_Angeles", PRIVATE);
   d5bda:	f88d 2000 	strb.w	r2, [sp]
   d5bde:	4a0c      	ldr	r2, [pc, #48]	; (d5c10 <_Z23publishGMTOffsetRequestv+0x7c>)
   d5be0:	e003      	b.n	d5bea <_Z23publishGMTOffsetRequestv+0x56>
   d5be2:	781b      	ldrb	r3, [r3, #0]
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
   d5be4:	f88d 2000 	strb.w	r2, [sp]
   d5be8:	4a0a      	ldr	r2, [pc, #40]	; (d5c14 <_Z23publishGMTOffsetRequestv+0x80>)
   d5bea:	490b      	ldr	r1, [pc, #44]	; (d5c18 <_Z23publishGMTOffsetRequestv+0x84>)
   d5bec:	a802      	add	r0, sp, #8
   d5bee:	f7ff fc11 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bf2:	a803      	add	r0, sp, #12
   d5bf4:	f7ff ffb8 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d5bf8:	b004      	add	sp, #16
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	2003da40 	.word	0x2003da40
   d5c00:	000e6ea1 	.word	0x000e6ea1
   d5c04:	2003d6d4 	.word	0x2003d6d4
   d5c08:	000e6ee1 	.word	0x000e6ee1
   d5c0c:	000e6ef1 	.word	0x000e6ef1
   d5c10:	000e6f01 	.word	0x000e6f01
   d5c14:	000e6ed0 	.word	0x000e6ed0
   d5c18:	000e77d7 	.word	0x000e77d7

000d5c1c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d5c1c:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5c1e:	4b04      	ldr	r3, [pc, #16]	; (d5c30 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d5c20:	4604      	mov	r4, r0
   d5c22:	f840 3b18 	str.w	r3, [r0], #24
   d5c26:	f7ff ff9f 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	bd10      	pop	{r4, pc}
   d5c2e:	bf00      	nop
   d5c30:	000e8040 	.word	0x000e8040

000d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d5c34:	b508      	push	{r3, lr}
        state = CONNECTING;
   d5c36:	2300      	movs	r3, #0
   d5c38:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5c3a:	6800      	ldr	r0, [r0, #0]
   d5c3c:	f006 ffd4 	bl	dcbe8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d5c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d5c44:	f004 bbae 	b.w	da3a4 <BlynkNoOpCbk>

000d5c48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5c4c:	188e      	adds	r6, r1, r2
   d5c4e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5c50:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5c52:	4680      	mov	r8, r0
   d5c54:	460d      	mov	r5, r1
   d5c56:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5c58:	9105      	str	r1, [sp, #20]
   d5c5a:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d5c5c:	f080 813d 	bcs.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d5c60:	880b      	ldrh	r3, [r1, #0]
   d5c62:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d5c66:	a805      	add	r0, sp, #20
   d5c68:	f7ff fc3c 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5c6c:	6803      	ldr	r3, [r0, #0]
   d5c6e:	429e      	cmp	r6, r3
   d5c70:	f240 8133 	bls.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5c74:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5c76:	7803      	ldrb	r3, [r0, #0]
   d5c78:	2b41      	cmp	r3, #65	; 0x41
   d5c7a:	d112      	bne.n	d5ca2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d5c7c:	3001      	adds	r0, #1
   d5c7e:	f00d fbb6 	bl	e33ee <atoi>
   d5c82:	2805      	cmp	r0, #5
   d5c84:	dd01      	ble.n	d5c8a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d5c86:	24ff      	movs	r4, #255	; 0xff
   d5c88:	e00f      	b.n	d5caa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d5c8a:	9805      	ldr	r0, [sp, #20]
   d5c8c:	3001      	adds	r0, #1
   d5c8e:	f00d fbae 	bl	e33ee <atoi>
   d5c92:	2800      	cmp	r0, #0
   d5c94:	dbf7      	blt.n	d5c86 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d5c96:	9805      	ldr	r0, [sp, #20]
   d5c98:	3001      	adds	r0, #1
   d5c9a:	f00d fba8 	bl	e33ee <atoi>
   d5c9e:	300e      	adds	r0, #14
   d5ca0:	e002      	b.n	d5ca8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d5ca2:	a805      	add	r0, sp, #20
   d5ca4:	f7ff fc14 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5ca8:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d5caa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d5cae:	f247 2276 	movw	r2, #29302	; 0x7276
   d5cb2:	4293      	cmp	r3, r2
   d5cb4:	f000 80b7 	beq.w	d5e26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1de>
   d5cb8:	d80d      	bhi.n	d5cd6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d5cba:	f247 2261 	movw	r2, #29281	; 0x7261
   d5cbe:	4293      	cmp	r3, r2
   d5cc0:	d07d      	beq.n	d5dbe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x176>
   d5cc2:	f247 2264 	movw	r2, #29284	; 0x7264
   d5cc6:	4293      	cmp	r3, r2
   d5cc8:	d051      	beq.n	d5d6e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d5cca:	f646 5270 	movw	r2, #28016	; 0x6d70
   d5cce:	4293      	cmp	r3, r2
   d5cd0:	f040 80d4 	bne.w	d5e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5cd4:	e027      	b.n	d5d26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xde>
   d5cd6:	f247 7264 	movw	r2, #30564	; 0x7764
   d5cda:	4293      	cmp	r3, r2
   d5cdc:	d059      	beq.n	d5d92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d5cde:	f247 7276 	movw	r2, #30582	; 0x7776
   d5ce2:	4293      	cmp	r3, r2
   d5ce4:	f000 80b0 	beq.w	d5e48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
   d5ce8:	f247 7261 	movw	r2, #30561	; 0x7761
   d5cec:	4293      	cmp	r3, r2
   d5cee:	f040 80c5 	bne.w	d5e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5cf2:	e085      	b.n	d5e00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b8>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5cf4:	7803      	ldrb	r3, [r0, #0]
   d5cf6:	2b41      	cmp	r3, #65	; 0x41
   d5cf8:	d125      	bne.n	d5d46 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfe>
   d5cfa:	3001      	adds	r0, #1
   d5cfc:	f00d fb77 	bl	e33ee <atoi>
   d5d00:	2805      	cmp	r0, #5
   d5d02:	dd14      	ble.n	d5d2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>
   d5d04:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d5d06:	a805      	add	r0, sp, #20
   d5d08:	f7ff fbec 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d0c:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d5d0e:	4974      	ldr	r1, [pc, #464]	; (d5ee0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x298>)
   d5d10:	4628      	mov	r0, r5
   d5d12:	f00d ff09 	bl	e3b28 <strcmp>
   d5d16:	4601      	mov	r1, r0
   d5d18:	b9d0      	cbnz	r0, d5d50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x108>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	f007 f8fe 	bl	dcf1c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d5d20:	a805      	add	r0, sp, #20
   d5d22:	f7ff fbdf 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d26:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d5d28:	4286      	cmp	r6, r0
   d5d2a:	d8e3      	bhi.n	d5cf4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d5d2c:	e0d5      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5d2e:	9805      	ldr	r0, [sp, #20]
   d5d30:	3001      	adds	r0, #1
   d5d32:	f00d fb5c 	bl	e33ee <atoi>
   d5d36:	2800      	cmp	r0, #0
   d5d38:	dbe4      	blt.n	d5d04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d5d3a:	9805      	ldr	r0, [sp, #20]
   d5d3c:	3001      	adds	r0, #1
   d5d3e:	f00d fb56 	bl	e33ee <atoi>
   d5d42:	300e      	adds	r0, #14
   d5d44:	e002      	b.n	d5d4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x104>
   d5d46:	a805      	add	r0, sp, #20
   d5d48:	f7ff fbc2 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5d4c:	b2c4      	uxtb	r4, r0
   d5d4e:	e7da      	b.n	d5d06 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d5d50:	4964      	ldr	r1, [pc, #400]	; (d5ee4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x29c>)
   d5d52:	4628      	mov	r0, r5
   d5d54:	f00d fee8 	bl	e3b28 <strcmp>
   d5d58:	2800      	cmp	r0, #0
   d5d5a:	f000 80a4 	beq.w	d5ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5d5e:	4962      	ldr	r1, [pc, #392]	; (d5ee8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a0>)
   d5d60:	4628      	mov	r0, r5
   d5d62:	f00d fee1 	bl	e3b28 <strcmp>
   d5d66:	2800      	cmp	r0, #0
   d5d68:	f000 809d 	beq.w	d5ea6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5d6c:	e09d      	b.n	d5eaa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x262>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5d6e:	ab0a      	add	r3, sp, #40	; 0x28
   d5d70:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d5d72:	a807      	add	r0, sp, #28
   d5d74:	2310      	movs	r3, #16
   d5d76:	2500      	movs	r5, #0
   d5d78:	495c      	ldr	r1, [pc, #368]	; (d5eec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a4>)
   d5d7a:	9309      	str	r3, [sp, #36]	; 0x24
   d5d7c:	9508      	str	r5, [sp, #32]
   d5d7e:	f7ff fbc0 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5d82:	a807      	add	r0, sp, #28
   d5d84:	4621      	mov	r1, r4
   d5d86:	f7ff fbd9 	bl	d553c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	f007 f8f0 	bl	dcf70 <digitalRead>
   d5d90:	e026      	b.n	d5de0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5d92:	a805      	add	r0, sp, #20
   d5d94:	f7ff fba6 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5d98:	6803      	ldr	r3, [r0, #0]
   d5d9a:	429e      	cmp	r6, r3
   d5d9c:	f240 809d 	bls.w	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5da0:	b2a4      	uxth	r4, r4
   d5da2:	2101      	movs	r1, #1
   d5da4:	4620      	mov	r0, r4
   d5da6:	f007 f8b9 	bl	dcf1c <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d5daa:	a805      	add	r0, sp, #20
   d5dac:	f7ff fb90 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5db0:	1c01      	adds	r1, r0, #0
   d5db2:	bf18      	it	ne
   d5db4:	2101      	movne	r1, #1
   d5db6:	4620      	mov	r0, r4
   d5db8:	f007 f8c1 	bl	dcf3e <digitalWrite>
    } break;
   d5dbc:	e08d      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5dbe:	ab0a      	add	r3, sp, #40	; 0x28
   d5dc0:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d5dc2:	494b      	ldr	r1, [pc, #300]	; (d5ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a8>)
   d5dc4:	2310      	movs	r3, #16
   d5dc6:	a807      	add	r0, sp, #28
   d5dc8:	2500      	movs	r5, #0
   d5dca:	9309      	str	r3, [sp, #36]	; 0x24
   d5dcc:	9508      	str	r5, [sp, #32]
   d5dce:	f7ff fb98 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d5dd2:	a807      	add	r0, sp, #28
   d5dd4:	4621      	mov	r1, r4
   d5dd6:	f7ff fbb1 	bl	d553c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d5dda:	4620      	mov	r0, r4
   d5ddc:	f007 f8db 	bl	dcf96 <analogRead>
   d5de0:	4601      	mov	r1, r0
   d5de2:	a807      	add	r0, sp, #28
   d5de4:	f7ff fbbc 	bl	d5560 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d5de8:	9b08      	ldr	r3, [sp, #32]
   d5dea:	9502      	str	r5, [sp, #8]
   d5dec:	3b01      	subs	r3, #1
   d5dee:	9300      	str	r3, [sp, #0]
   d5df0:	9b07      	ldr	r3, [sp, #28]
   d5df2:	9501      	str	r5, [sp, #4]
   d5df4:	462a      	mov	r2, r5
   d5df6:	2114      	movs	r1, #20
   d5df8:	4640      	mov	r0, r8
   d5dfa:	f000 fb73 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d5dfe:	e06c      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d5e00:	a805      	add	r0, sp, #20
   d5e02:	f7ff fb6f 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5e06:	6803      	ldr	r3, [r0, #0]
   d5e08:	429e      	cmp	r6, r3
   d5e0a:	d966      	bls.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d5e0c:	b2a4      	uxth	r4, r4
   d5e0e:	2101      	movs	r1, #1
   d5e10:	4620      	mov	r0, r4
   d5e12:	f007 f883 	bl	dcf1c <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d5e16:	a805      	add	r0, sp, #20
   d5e18:	f7ff fb5a 	bl	d54d0 <_ZNK10BlynkParam8iterator5asIntEv>
   d5e1c:	4601      	mov	r1, r0
   d5e1e:	4620      	mov	r0, r4
   d5e20:	f007 f8d0 	bl	dcfc4 <_Z11analogWritetm>
    } break;
   d5e24:	e059      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5e26:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d5e28:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5e2a:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d5e2e:	f004 fabb 	bl	da3a8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d5e32:	4603      	mov	r3, r0
            handler(req);
   d5e34:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d5e36:	b123      	cbz	r3, d5e42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5e38:	4a2e      	ldr	r2, [pc, #184]	; (d5ef4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2ac>)
   d5e3a:	4293      	cmp	r3, r2
   d5e3c:	d001      	beq.n	d5e42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
            handler(req);
   d5e3e:	4798      	blx	r3
   d5e40:	e04b      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetReadDefault(req);
   d5e42:	f004 faad 	bl	da3a0 <BlynkWidgetRead>
        }
    } break;
   d5e46:	e048      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_VW: {
        ++it;
   d5e48:	a805      	add	r0, sp, #20
   d5e4a:	f7ff fb4b 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d5e4e:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5e50:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d5e52:	1b5d      	subs	r5, r3, r5
   d5e54:	1b7f      	subs	r7, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5e56:	4620      	mov	r0, r4
   d5e58:	970b      	str	r7, [sp, #44]	; 0x2c
   d5e5a:	970c      	str	r7, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d5e5c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5e60:	f004 faac 	bl	da3bc <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d5e64:	4603      	mov	r3, r0
            handler(req, param2);
   d5e66:	a90a      	add	r1, sp, #40	; 0x28
   d5e68:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d5e6a:	b123      	cbz	r3, d5e76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5e6c:	4a22      	ldr	r2, [pc, #136]	; (d5ef8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b0>)
   d5e6e:	4293      	cmp	r3, r2
   d5e70:	d001      	beq.n	d5e76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
            handler(req, param2);
   d5e72:	4798      	blx	r3
   d5e74:	e031      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d5e76:	f004 fa94 	bl	da3a2 <BlynkWidgetWrite>
        }
    } break;
   d5e7a:	e02e      	b.n	d5eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
   d5e7c:	f7ff fa40 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e80:	f006 fb46 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5e84:	491d      	ldr	r1, [pc, #116]	; (d5efc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b4>)
   d5e86:	f005 f957 	bl	db138 <_ZN5Print5printEPKc>
   d5e8a:	f006 fb41 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5e8e:	4629      	mov	r1, r5
   d5e90:	f005 f965 	bl	db15e <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d5e94:	2300      	movs	r3, #0
   d5e96:	2102      	movs	r1, #2
   d5e98:	9100      	str	r1, [sp, #0]
   d5e9a:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d5e9e:	9302      	str	r3, [sp, #8]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	4619      	mov	r1, r3
   d5ea4:	e7a8      	b.n	d5df8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b0>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d5ea6:	2101      	movs	r1, #1
   d5ea8:	e737      	b.n	d5d1a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
            } else if (!strcmp(it.asStr(), "pd")) {
                pinMode(pin, INPUT_PULLDOWN);
#endif
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
   d5eaa:	f7ff fa29 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5eae:	f006 fb2f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5eb2:	4913      	ldr	r1, [pc, #76]	; (d5f00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b8>)
   d5eb4:	f005 f940 	bl	db138 <_ZN5Print5printEPKc>
   d5eb8:	f006 fb2a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ebc:	220a      	movs	r2, #10
   d5ebe:	4621      	mov	r1, r4
   d5ec0:	f005 f984 	bl	db1cc <_ZN5Print5printEhi>
   d5ec4:	f006 fb24 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ec8:	490e      	ldr	r1, [pc, #56]	; (d5f04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2bc>)
   d5eca:	f005 f935 	bl	db138 <_ZN5Print5printEPKc>
   d5ece:	f006 fb1f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ed2:	9905      	ldr	r1, [sp, #20]
   d5ed4:	f005 f943 	bl	db15e <_ZN5Print7printlnEPKc>
   d5ed8:	e722      	b.n	d5d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd8>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d5eda:	b00e      	add	sp, #56	; 0x38
   d5edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ee0:	000e742f 	.word	0x000e742f
   d5ee4:	000e7029 	.word	0x000e7029
   d5ee8:	000e6f15 	.word	0x000e6f15
   d5eec:	000e6f19 	.word	0x000e6f19
   d5ef0:	000e6f1c 	.word	0x000e6f1c
   d5ef4:	000da3a1 	.word	0x000da3a1
   d5ef8:	000da3a3 	.word	0x000da3a3
   d5efc:	000e6f1f 	.word	0x000e6f1f
   d5f00:	000e6f30 	.word	0x000e6f30
   d5f04:	000e6f3d 	.word	0x000e6f3d

000d5f08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d5f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f0c:	b08e      	sub	sp, #56	; 0x38
   d5f0e:	af04      	add	r7, sp, #16
   d5f10:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d5f12:	2205      	movs	r2, #5
   d5f14:	f107 010c 	add.w	r1, r7, #12
   d5f18:	6800      	ldr	r0, [r0, #0]
   d5f1a:	f005 fab6 	bl	db48a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d5f1e:	4605      	mov	r5, r0
   d5f20:	2800      	cmp	r0, #0
   d5f22:	f000 81fd 	beq.w	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d5f26:	2805      	cmp	r0, #5
   d5f28:	d11a      	bne.n	d5f60 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x58>
   d5f2a:	4602      	mov	r2, r0
   d5f2c:	f107 010c 	add.w	r1, r7, #12
   d5f30:	48b5      	ldr	r0, [pc, #724]	; (d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x300>)
   d5f32:	f7ff fa2b 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f36:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5f3a:	f8b7 800f 	ldrh.w	r8, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f3e:	0a13      	lsrs	r3, r2, #8
   d5f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d5f44:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d5f48:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f4c:	b29b      	uxth	r3, r3
    hdr.length = ntohs(hdr.length);
   d5f4e:	fa1f f888 	uxth.w	r8, r8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d5f52:	f8a7 300d 	strh.w	r3, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d5f56:	f8a7 800f 	strh.w	r8, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d5f5a:	b993      	cbnz	r3, d5f82 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7a>
    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
    hdr.length = ntohs(hdr.length);

    return rlen;
   d5f5c:	462c      	mov	r4, r5
   d5f5e:	e001      	b.n	d5f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x5c>
    if (rlen == 0) {
        return 0;
    }

    if (sizeof(hdr) != rlen) {
        return -1;
   d5f60:	f04f 34ff 	mov.w	r4, #4294967295
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
   d5f64:	f7ff f9cc 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5f68:	f006 fad2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5f6c:	49a7      	ldr	r1, [pc, #668]	; (d620c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x304>)
   d5f6e:	f005 f8e3 	bl	db138 <_ZN5Print5printEPKc>
   d5f72:	f006 facd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5f76:	220a      	movs	r2, #10
   d5f78:	4621      	mov	r1, r4
   d5f7a:	f005 f96d 	bl	db258 <_ZN5Print7printlnEii>
#endif
        return false;
   d5f7e:	2000      	movs	r0, #0
   d5f80:	e1d3      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d5f82:	7b3b      	ldrb	r3, [r7, #12]
   d5f84:	2b00      	cmp	r3, #0
   d5f86:	d15d      	bne.n	d6044 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13c>
        lastActivityIn = BlynkMillis();
   d5f88:	f004 fa04 	bl	da394 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5f8c:	7f65      	ldrb	r5, [r4, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d5f8e:	60e0      	str	r0, [r4, #12]
   d5f90:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5f94:	2d00      	cmp	r5, #0
   d5f96:	d151      	bne.n	d603c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x134>
   d5f98:	f8b7 300d 	ldrh.w	r3, [r7, #13]
   d5f9c:	2b01      	cmp	r3, #1
   d5f9e:	d14d      	bne.n	d603c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x134>
            switch (hdr.length) {
   d5fa0:	2809      	cmp	r0, #9
   d5fa2:	d034      	beq.n	d600e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
   d5fa4:	28c8      	cmp	r0, #200	; 0xc8
   d5fa6:	d001      	beq.n	d5fac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
   d5fa8:	2804      	cmp	r0, #4
   d5faa:	d13a      	bne.n	d6022 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x11a>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
   d5fac:	f7ff f9a8 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5fb0:	f006 faae 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5fb4:	4996      	ldr	r1, [pc, #600]	; (d6210 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x308>)
   d5fb6:	f005 f8bf 	bl	db138 <_ZN5Print5printEPKc>
   d5fba:	f006 faa9 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5fbe:	6963      	ldr	r3, [r4, #20]
   d5fc0:	68e1      	ldr	r1, [r4, #12]
   d5fc2:	220a      	movs	r2, #10
   d5fc4:	1ac9      	subs	r1, r1, r3
   d5fc6:	f005 f8f4 	bl	db1b2 <_ZN5Print5printEmi>
   d5fca:	f006 faa1 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5fce:	4991      	ldr	r1, [pc, #580]	; (d6214 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d5fd0:	f005 f8c5 	bl	db15e <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
   d5fd4:	68e3      	ldr	r3, [r4, #12]
   d5fd6:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
   d5fd8:	2301      	movs	r3, #1
   d5fda:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
   d5fdc:	f004 f9dc 	bl	da398 <_Z12BlynkFreeRamv>
   d5fe0:	4605      	mov	r5, r0
   d5fe2:	b160      	cbz	r0, d5ffe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d5fe4:	f7ff f98c 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5fe8:	f006 fa92 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5fec:	498a      	ldr	r1, [pc, #552]	; (d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d5fee:	f005 f8a3 	bl	db138 <_ZN5Print5printEPKc>
   d5ff2:	f006 fa8d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d5ff6:	220a      	movs	r2, #10
   d5ff8:	4629      	mov	r1, r5
   d5ffa:	f005 f8f5 	bl	db1e8 <_ZN5Print7printlnEji>
                }
#endif
                this->sendInfo();
   d5ffe:	4620      	mov	r0, r4
   d6000:	f000 fb84 	bl	d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d6004:	f7ff fa3e 	bl	d5484 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d6008:	f000 ff5c 	bl	d6ec4 <BlynkOnConnected>
   d600c:	e188      	b.n	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
   d600e:	f7ff f977 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6012:	f006 fa7d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6016:	4981      	ldr	r1, [pc, #516]	; (d621c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d6018:	f005 f8a1 	bl	db15e <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
   d601c:	2303      	movs	r3, #3
   d601e:	7763      	strb	r3, [r4, #29]
   d6020:	e7ad      	b.n	d5f7e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
   d6022:	f7ff f96d 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6026:	f006 fa73 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d602a:	497d      	ldr	r1, [pc, #500]	; (d6220 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>)
   d602c:	f005 f884 	bl	db138 <_ZN5Print5printEPKc>
   d6030:	f006 fa6e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6034:	220a      	movs	r2, #10
   d6036:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d603a:	e79e      	b.n	d5f7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d603c:	3805      	subs	r0, #5
   d603e:	bf18      	it	ne
   d6040:	2001      	movne	r0, #1
   d6042:	e172      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d6044:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6048:	d911      	bls.n	d606e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x166>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
   d604a:	f7ff f959 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d604e:	f006 fa5f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6052:	4974      	ldr	r1, [pc, #464]	; (d6224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>)
   d6054:	f005 f870 	bl	db138 <_ZN5Print5printEPKc>
   d6058:	f006 fa5a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d605c:	220a      	movs	r2, #10
   d605e:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d6062:	f005 f8f9 	bl	db258 <_ZN5Print7printlnEii>
        // TODO: Flush
        internalReconnect();
   d6066:	4620      	mov	r0, r4
   d6068:	f7ff fde4 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d606c:	e158      	b.n	d6320 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d606e:	f108 0308 	add.w	r3, r8, #8
   d6072:	f023 0307 	bic.w	r3, r3, #7
   d6076:	466e      	mov	r6, sp
   d6078:	ebad 0d03 	sub.w	sp, sp, r3
   d607c:	ad04      	add	r5, sp, #16
   d607e:	4642      	mov	r2, r8
   d6080:	4629      	mov	r1, r5
   d6082:	6820      	ldr	r0, [r4, #0]
   d6084:	f005 fa01 	bl	db48a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d6088:	4580      	cmp	r8, r0
   d608a:	d007      	beq.n	d609c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x194>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
   d608c:	f7ff f938 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6090:	f006 fa3e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6094:	4964      	ldr	r1, [pc, #400]	; (d6228 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x320>)
   d6096:	f005 f862 	bl	db15e <_ZN5Print7printlnEPKc>
   d609a:	e063      	b.n	d6164 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d609c:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d60a0:	2300      	movs	r3, #0
   d60a2:	54ab      	strb	r3, [r5, r2]
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
            if (len) {
   d60a4:	b11a      	cbz	r2, d60ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a6>
   d60a6:	4629      	mov	r1, r5
   d60a8:	4857      	ldr	r0, [pc, #348]	; (d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x300>)
   d60aa:	f7ff f96f 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d60ae:	f004 f971 	bl	da394 <_Z11BlynkMillisv>

    switch (hdr.type)
   d60b2:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d60b4:	60e0      	str	r0, [r4, #12]

    switch (hdr.type)
   d60b6:	2b11      	cmp	r3, #17
   d60b8:	f000 80bc 	beq.w	d6234 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32c>
   d60bc:	d808      	bhi.n	d60d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
   d60be:	2b06      	cmp	r3, #6
   d60c0:	d036      	beq.n	d6130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d60c2:	2b0f      	cmp	r3, #15
   d60c4:	f000 8092 	beq.w	d61ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
   d60c8:	2b02      	cmp	r3, #2
   d60ca:	f040 8116 	bne.w	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
   d60ce:	e00c      	b.n	d60ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e2>
   d60d0:	2b1d      	cmp	r3, #29
   d60d2:	d00a      	beq.n	d60ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e2>
   d60d4:	d803      	bhi.n	d60de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d6>
   d60d6:	2b14      	cmp	r3, #20
   d60d8:	f000 8088 	beq.w	d61ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2e4>
   d60dc:	e10d      	b.n	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
   d60de:	2b29      	cmp	r3, #41	; 0x29
   d60e0:	d032      	beq.n	d6148 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x240>
   d60e2:	2b37      	cmp	r3, #55	; 0x37
   d60e4:	f000 80f9 	beq.w	d62da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3d2>
   d60e8:	e107      	b.n	d62fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f2>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d60ea:	7f63      	ldrb	r3, [r4, #29]
   d60ec:	bb03      	cbnz	r3, d6130 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
            BLYNK_LOG1(BLYNK_F("Ready"));
   d60ee:	f7ff f907 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d60f2:	f006 fa0d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d60f6:	494d      	ldr	r1, [pc, #308]	; (d622c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x324>)
   d60f8:	f005 f831 	bl	db15e <_ZN5Print7printlnEPKc>
            state = CONNECTED;
   d60fc:	2301      	movs	r3, #1
   d60fe:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
   d6100:	f004 f94a 	bl	da398 <_Z12BlynkFreeRamv>
   d6104:	4605      	mov	r5, r0
   d6106:	b160      	cbz	r0, d6122 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d6108:	f7ff f8fa 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d610c:	f006 fa00 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6110:	4941      	ldr	r1, [pc, #260]	; (d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d6112:	f005 f811 	bl	db138 <_ZN5Print5printEPKc>
   d6116:	f006 f9fb 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d611a:	220a      	movs	r2, #10
   d611c:	4629      	mov	r1, r5
   d611e:	f005 f863 	bl	db1e8 <_ZN5Print7printlnEji>
            }
#endif
            this->sendInfo();
   d6122:	4620      	mov	r0, r4
   d6124:	f000 faf2 	bl	d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d6128:	f7ff f9ac 	bl	d5484 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d612c:	f000 feca 	bl	d6ec4 <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d6130:	2300      	movs	r3, #0
   d6132:	21c8      	movs	r1, #200	; 0xc8
   d6134:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d6138:	9100      	str	r1, [sp, #0]
   d613a:	9302      	str	r3, [sp, #8]
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	4619      	mov	r1, r3
   d6140:	4620      	mov	r0, r4
   d6142:	f000 f9cf 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d6146:	e0e8      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d6148:	68a3      	ldr	r3, [r4, #8]
   d614a:	b91b      	cbnz	r3, d6154 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
             redir_serv = (char*)malloc(32);
   d614c:	2020      	movs	r0, #32
   d614e:	f004 fc99 	bl	daa84 <malloc>
   d6152:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6154:	f8b7 800f 	ldrh.w	r8, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6158:	61fd      	str	r5, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d615a:	44a8      	add	r8, r5
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d615c:	4545      	cmp	r5, r8
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d615e:	f8c7 8020 	str.w	r8, [r7, #32]
   d6162:	d301      	bcc.n	d6168 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>
            return false;
   d6164:	2000      	movs	r0, #0
   d6166:	e0d9      	b.n	d631c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x414>

        strncpy(redir_serv, it.asStr(), 32);
   d6168:	4629      	mov	r1, r5
   d616a:	2220      	movs	r2, #32
   d616c:	68a0      	ldr	r0, [r4, #8]
   d616e:	f00e fa3a 	bl	e45e6 <strncpy>
        redir_serv[31] = '\0';
   d6172:	68a3      	ldr	r3, [r4, #8]
   d6174:	2500      	movs	r5, #0
   d6176:	77dd      	strb	r5, [r3, #31]

        if (++it < param.end())
   d6178:	f107 001c 	add.w	r0, r7, #28
   d617c:	f7ff f9b2 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d6180:	6803      	ldr	r3, [r0, #0]
   d6182:	4543      	cmp	r3, r8
   d6184:	d208      	bcs.n	d6198 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d6186:	69f8      	ldr	r0, [r7, #28]
   d6188:	b120      	cbz	r0, d6194 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28c>
   d618a:	6a3b      	ldr	r3, [r7, #32]
   d618c:	4298      	cmp	r0, r3
   d618e:	f0c0 80c9 	bcc.w	d6324 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x41c>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6192:	4628      	mov	r0, r5
            redir_port = it.asLong();
   d6194:	b285      	uxth	r5, r0
   d6196:	e000      	b.n	d619a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d6198:	2550      	movs	r5, #80	; 0x50
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
   d619a:	f7ff f8b1 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d619e:	f006 f9b7 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d61a2:	4923      	ldr	r1, [pc, #140]	; (d6230 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x328>)
   d61a4:	f004 ffc8 	bl	db138 <_ZN5Print5printEPKc>
   d61a8:	f006 f9b2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d61ac:	68a1      	ldr	r1, [r4, #8]
   d61ae:	f004 ffc3 	bl	db138 <_ZN5Print5printEPKc>
   d61b2:	f006 f9ad 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d61b6:	213a      	movs	r1, #58	; 0x3a
   d61b8:	f004 ffc2 	bl	db140 <_ZN5Print5printEc>
   d61bc:	f006 f9a8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d61c0:	220a      	movs	r2, #10
   d61c2:	4629      	mov	r1, r5
   d61c4:	f005 f848 	bl	db258 <_ZN5Print7printlnEii>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d61c8:	6820      	ldr	r0, [r4, #0]
   d61ca:	f006 fd0d 	bl	dcbe8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d61ce:	6823      	ldr	r3, [r4, #0]
   d61d0:	68a2      	ldr	r2, [r4, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d61d2:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d61d4:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d61d6:	2300      	movs	r3, #0
   d61d8:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d61da:	f004 f8db 	bl	da394 <_Z11BlynkMillisv>
   d61de:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d61e2:	3808      	subs	r0, #8
   d61e4:	6120      	str	r0, [r4, #16]
   d61e6:	60e0      	str	r0, [r4, #12]
   d61e8:	6160      	str	r0, [r4, #20]
   d61ea:	e096      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d61ec:	68fb      	ldr	r3, [r7, #12]
   d61ee:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d61f2:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d61f4:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d61f8:	4629      	mov	r1, r5
   d61fa:	4620      	mov	r0, r4
   d61fc:	f7ff fd24 	bl	d5c48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d6200:	2300      	movs	r3, #0
   d6202:	8363      	strh	r3, [r4, #26]
   d6204:	e089      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
   d6206:	bf00      	nop
   d6208:	000e6f44 	.word	0x000e6f44
   d620c:	000e6f46 	.word	0x000e6f46
   d6210:	000e6f54 	.word	0x000e6f54
   d6214:	000e6f62 	.word	0x000e6f62
   d6218:	000e6f67 	.word	0x000e6f67
   d621c:	000e6f72 	.word	0x000e6f72
   d6220:	000e6f85 	.word	0x000e6f85
   d6224:	000e6f9c 	.word	0x000e6f9c
   d6228:	000e6fad 	.word	0x000e6fad
   d622c:	000e6fbd 	.word	0x000e6fbd
   d6230:	000e6fc3 	.word	0x000e6fc3
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d6234:	2300      	movs	r3, #0
   d6236:	713b      	strb	r3, [r7, #4]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6238:	f8b7 300f 	ldrh.w	r3, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d623c:	617d      	str	r5, [r7, #20]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d623e:	442b      	add	r3, r5
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d6240:	429d      	cmp	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6242:	61bb      	str	r3, [r7, #24]
   d6244:	d269      	bcs.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d6246:	6828      	ldr	r0, [r5, #0]
   d6248:	60b8      	str	r0, [r7, #8]

        ++it;
   d624a:	f107 0014 	add.w	r0, r7, #20
   d624e:	f7ff f949 	bl	d54e4 <_ZN10BlynkParam8iteratorppEv>
   d6252:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d6254:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d6258:	61fa      	str	r2, [r7, #28]
   d625a:	1b51      	subs	r1, r2, r5
   d625c:	1a5b      	subs	r3, r3, r1
   d625e:	623b      	str	r3, [r7, #32]
   d6260:	627b      	str	r3, [r7, #36]	; 0x24
        BlynkParam param2(start, length);

        switch (cmd32) {
   d6262:	4a34      	ldr	r2, [pc, #208]	; (d6334 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42c>)
   d6264:	68bb      	ldr	r3, [r7, #8]
   d6266:	4293      	cmp	r3, r2
   d6268:	d02b      	beq.n	d62c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ba>
   d626a:	d80d      	bhi.n	d6288 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x380>
   d626c:	4a32      	ldr	r2, [pc, #200]	; (d6338 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x430>)
   d626e:	4293      	cmp	r3, r2
   d6270:	d01b      	beq.n	d62aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3a2>
   d6272:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6276:	3203      	adds	r2, #3
   d6278:	4293      	cmp	r3, r2
   d627a:	d128      	bne.n	d62ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3c6>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d627c:	f107 011c 	add.w	r1, r7, #28
   d6280:	1d38      	adds	r0, r7, #4
   d6282:	f004 f88e 	bl	da3a2 <BlynkWidgetWrite>
   d6286:	e048      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d6288:	4a2c      	ldr	r2, [pc, #176]	; (d633c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x434>)
   d628a:	4293      	cmp	r3, r2
   d628c:	d013      	beq.n	d62b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ae>
   d628e:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d6292:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6296:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d629a:	4293      	cmp	r3, r2
   d629c:	d117      	bne.n	d62ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3c6>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d629e:	f107 011c 	add.w	r1, r7, #28
   d62a2:	1d38      	adds	r0, r7, #4
   d62a4:	f7ff fab6 	bl	d5814 <BlynkWidgetWriteInternalPinADIS>
   d62a8:	e037      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d62aa:	f107 011c 	add.w	r1, r7, #28
   d62ae:	1d38      	adds	r0, r7, #4
   d62b0:	f004 f877 	bl	da3a2 <BlynkWidgetWrite>
   d62b4:	e031      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d62b6:	f107 011c 	add.w	r1, r7, #28
   d62ba:	1d38      	adds	r0, r7, #4
   d62bc:	f000 fbfc 	bl	d6ab8 <BlynkWidgetWriteInternalPinACON>
   d62c0:	e02b      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d62c2:	f107 011c 	add.w	r1, r7, #28
   d62c6:	1d38      	adds	r0, r7, #4
   d62c8:	f004 f86b 	bl	da3a2 <BlynkWidgetWrite>
   d62cc:	e025      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
#ifdef BLYNK_DEBUG
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
   d62ce:	f7ff f817 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62d2:	f006 f91d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d62d6:	491a      	ldr	r1, [pc, #104]	; (d6340 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x438>)
   d62d8:	e007      	b.n	d62ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3e2>
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
   d62da:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d62de:	b1e3      	cbz	r3, d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
   d62e0:	f7ff f80e 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62e4:	f006 f914 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d62e8:	4916      	ldr	r1, [pc, #88]	; (d6344 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x43c>)
   d62ea:	f004 ff25 	bl	db138 <_ZN5Print5printEPKc>
   d62ee:	f006 f90f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d62f2:	4629      	mov	r1, r5
   d62f4:	f004 ff33 	bl	db15e <_ZN5Print7printlnEPKc>
   d62f8:	e00f      	b.n	d631a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x412>
        }
    } break;
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
   d62fa:	f7ff f801 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d62fe:	f006 f907 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6302:	4911      	ldr	r1, [pc, #68]	; (d6348 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x440>)
   d6304:	f004 ff18 	bl	db138 <_ZN5Print5printEPKc>
   d6308:	f006 f902 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d630c:	220a      	movs	r2, #10
   d630e:	7b39      	ldrb	r1, [r7, #12]
   d6310:	f004 ff5e 	bl	db1d0 <_ZN5Print7printlnEhi>
#endif
        // TODO: Flush
        internalReconnect();
   d6314:	4620      	mov	r0, r4
   d6316:	f7ff fc8d 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    } break;
    }

    return true;
   d631a:	2001      	movs	r0, #1
   d631c:	46b5      	mov	sp, r6
   d631e:	e004      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d6320:	2001      	movs	r0, #1
   d6322:	e002      	b.n	d632a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x422>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6324:	f00d f867 	bl	e33f6 <atol>
   d6328:	e734      	b.n	d6194 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28c>
        internalReconnect();
    } break;
    }

    return true;
}
   d632a:	3728      	adds	r7, #40	; 0x28
   d632c:	46bd      	mov	sp, r7
   d632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6332:	bf00      	nop
   d6334:	6174656d 	.word	0x6174656d
   d6338:	0061746f 	.word	0x0061746f
   d633c:	6e6f6361 	.word	0x6e6f6361
   d6340:	000e6fd3 	.word	0x000e6fd3
   d6344:	000e6fe9 	.word	0x000e6fe9
   d6348:	000e6ff2 	.word	0x000e6ff2

000d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d634c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6350:	4604      	mov	r4, r0
   d6352:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d6354:	f7ff f896 	bl	d5484 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d6358:	7f63      	ldrb	r3, [r4, #29]
   d635a:	2b02      	cmp	r3, #2
   d635c:	f000 80a7 	beq.w	d64ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x162>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d6360:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d6362:	8b62      	ldrh	r2, [r4, #26]
   d6364:	3301      	adds	r3, #1
   d6366:	b2db      	uxtb	r3, r3
   d6368:	7723      	strb	r3, [r4, #28]
   d636a:	2a00      	cmp	r2, #0
   d636c:	d164      	bne.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d636e:	2b02      	cmp	r3, #2
   d6370:	d862      	bhi.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6372:	6820      	ldr	r0, [r4, #0]
   d6374:	f006 fa65 	bl	dc842 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d6378:	b140      	cbz	r0, d638c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x40>
        while (avail || conn.available() > 0) {
   d637a:	2d00      	cmp	r5, #0
   d637c:	f040 8099 	bne.w	d64b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
    int available() { return client.available(); }
   d6380:	6820      	ldr	r0, [r4, #0]
   d6382:	f006 fc49 	bl	dcc18 <_ZN9TCPClient9availableEv>
   d6386:	2800      	cmp	r0, #0
   d6388:	f300 8093 	bgt.w	d64b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d638c:	f004 f802 	bl	da394 <_Z11BlynkMillisv>
   d6390:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6392:	6820      	ldr	r0, [r4, #0]
   d6394:	f006 fa55 	bl	dc842 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d6398:	7f65      	ldrb	r5, [r4, #29]
   d639a:	2d01      	cmp	r5, #1
   d639c:	4606      	mov	r6, r0
   d639e:	d14d      	bne.n	d643c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf0>
        if (!tconn) {
   d63a0:	b928      	cbnz	r0, d63ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d63a2:	6167      	str	r7, [r4, #20]
            internalReconnect();
   d63a4:	4620      	mov	r0, r4
   d63a6:	f7ff fc45 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d63aa:	4635      	mov	r5, r6
   d63ac:	e07b      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d63ae:	68e3      	ldr	r3, [r4, #12]
   d63b0:	4a48      	ldr	r2, [pc, #288]	; (d64d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x188>)
   d63b2:	1afb      	subs	r3, r7, r3
   d63b4:	4293      	cmp	r3, r2
   d63b6:	d927      	bls.n	d6408 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xbc>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
   d63b8:	f7fe ffa2 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d63bc:	f006 f8a8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63c0:	4945      	ldr	r1, [pc, #276]	; (d64d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x18c>)
   d63c2:	f004 feb9 	bl	db138 <_ZN5Print5printEPKc>
   d63c6:	f006 f8a3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63ca:	220a      	movs	r2, #10
   d63cc:	4639      	mov	r1, r7
   d63ce:	f004 fef0 	bl	db1b2 <_ZN5Print5printEmi>
   d63d2:	f006 f89d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63d6:	4941      	ldr	r1, [pc, #260]	; (d64dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d63d8:	f004 feae 	bl	db138 <_ZN5Print5printEPKc>
   d63dc:	f006 f898 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63e0:	220a      	movs	r2, #10
   d63e2:	68e1      	ldr	r1, [r4, #12]
   d63e4:	f004 fee5 	bl	db1b2 <_ZN5Print5printEmi>
   d63e8:	f006 f892 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63ec:	493b      	ldr	r1, [pc, #236]	; (d64dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d63ee:	f004 fea3 	bl	db138 <_ZN5Print5printEPKc>
   d63f2:	f006 f88d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d63f6:	220a      	movs	r2, #10
   d63f8:	6961      	ldr	r1, [r4, #20]
   d63fa:	f004 feff 	bl	db1fc <_ZN5Print7printlnEmi>
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d63fe:	4620      	mov	r0, r4
   d6400:	f7ff fc18 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d6404:	2500      	movs	r5, #0
   d6406:	e04e      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d6408:	f64e 2260 	movw	r2, #60000	; 0xea60
   d640c:	4293      	cmp	r3, r2
   d640e:	d803      	bhi.n	d6418 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xcc>
   d6410:	6923      	ldr	r3, [r4, #16]
   d6412:	1afb      	subs	r3, r7, r3
   d6414:	4293      	cmp	r3, r2
   d6416:	d90f      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6418:	6963      	ldr	r3, [r4, #20]
   d641a:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d641e:	1afb      	subs	r3, r7, r3
   d6420:	4293      	cmp	r3, r2
   d6422:	d909      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d6424:	2300      	movs	r3, #0
   d6426:	9302      	str	r3, [sp, #8]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	9300      	str	r3, [sp, #0]
   d642c:	461a      	mov	r2, r3
   d642e:	2106      	movs	r1, #6
   d6430:	4620      	mov	r0, r4
   d6432:	f000 f857 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d6436:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d6438:	2501      	movs	r5, #1
   d643a:	e034      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d643c:	2d00      	cmp	r5, #0
   d643e:	d1fb      	bne.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6440:	6961      	ldr	r1, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d6442:	1a79      	subs	r1, r7, r1
   d6444:	b178      	cbz	r0, d6466 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
   d6446:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d644a:	4299      	cmp	r1, r3
   d644c:	d9f4      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
   d644e:	f7fe ff57 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6452:	f006 f85d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6456:	4922      	ldr	r1, [pc, #136]	; (d64e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x194>)
   d6458:	f004 fe81 	bl	db15e <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d645c:	6820      	ldr	r0, [r4, #0]
   d645e:	f006 fbc3 	bl	dcbe8 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
   d6462:	7765      	strb	r5, [r4, #29]
            return false;
   d6464:	e01f      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d6466:	f241 3388 	movw	r3, #5000	; 0x1388
   d646a:	4299      	cmp	r1, r3
   d646c:	d9e4      	bls.n	d6438 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d646e:	6820      	ldr	r0, [r4, #0]
   d6470:	f006 fbba 	bl	dcbe8 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d6474:	6820      	ldr	r0, [r4, #0]
   d6476:	f7ff f885 	bl	d5584 <_ZN22BlynkTransportParticle7connectEv>
   d647a:	4605      	mov	r5, r0
   d647c:	b908      	cbnz	r0, d6482 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x136>
                lastLogin = t;
   d647e:	6167      	str	r7, [r4, #20]
                return false;
   d6480:	e011      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d6482:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d6486:	2701      	movs	r7, #1
   d6488:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d648a:	4640      	mov	r0, r8
   d648c:	f00e f88e 	bl	e45ac <strlen>
   d6490:	4643      	mov	r3, r8
   d6492:	e88d 0041 	stmia.w	sp, {r0, r6}
   d6496:	9602      	str	r6, [sp, #8]
   d6498:	463a      	mov	r2, r7
   d649a:	211d      	movs	r1, #29
   d649c:	4620      	mov	r0, r4
   d649e:	f000 f821 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d64a2:	6923      	ldr	r3, [r4, #16]
   d64a4:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d64a6:	7f23      	ldrb	r3, [r4, #28]
   d64a8:	3b01      	subs	r3, #1
   d64aa:	7723      	strb	r3, [r4, #28]
   d64ac:	e00e      	b.n	d64cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d64ae:	2500      	movs	r5, #0
   d64b0:	e00c      	b.n	d64cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d64b2:	4620      	mov	r0, r4
   d64b4:	f7ff fd28 	bl	d5f08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d64b8:	4605      	mov	r5, r0
   d64ba:	2800      	cmp	r0, #0
   d64bc:	f47f af60 	bne.w	d6380 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
   d64c0:	6820      	ldr	r0, [r4, #0]
   d64c2:	f006 fb91 	bl	dcbe8 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d64c6:	f003 ff6d 	bl	da3a4 <BlynkNoOpCbk>
                return false;
   d64ca:	e7ec      	b.n	d64a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            return true;
        }
#endif
    }
    return true;
}
   d64cc:	4628      	mov	r0, r5
   d64ce:	b004      	add	sp, #16
   d64d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64d4:	00010d88 	.word	0x00010d88
   d64d8:	000e7008 	.word	0x000e7008
   d64dc:	000e701c 	.word	0x000e701c
   d64e0:	000e701f 	.word	0x000e701f

000d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d64e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64e8:	b083      	sub	sp, #12
   d64ea:	af00      	add	r7, sp, #0
   d64ec:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d64ee:	6800      	ldr	r0, [r0, #0]
   d64f0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d64f2:	4689      	mov	r9, r1
   d64f4:	4616      	mov	r6, r2
   d64f6:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d64f8:	46ea      	mov	sl, sp
   d64fa:	f006 f9a2 	bl	dc842 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d64fe:	2800      	cmp	r0, #0
   d6500:	d071      	beq.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
   d6502:	f1b9 0f1d 	cmp.w	r9, #29
   d6506:	d805      	bhi.n	d6514 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   d6508:	4b67      	ldr	r3, [pc, #412]	; (d66a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c4>)
   d650a:	fa23 f309 	lsr.w	r3, r3, r9
   d650e:	07db      	lsls	r3, r3, #31
   d6510:	f100 80c5 	bmi.w	d669e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ba>
   d6514:	7f63      	ldrb	r3, [r4, #29]
   d6516:	2b01      	cmp	r3, #1
   d6518:	d165      	bne.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d651a:	b916      	cbnz	r6, d6522 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d651c:	8b66      	ldrh	r6, [r4, #26]
   d651e:	2e00      	cmp	r6, #0
   d6520:	d066      	beq.n	d65f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10c>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d6522:	f1a9 030c 	sub.w	r3, r9, #12
   d6526:	2b08      	cmp	r3, #8
   d6528:	d96a      	bls.n	d6600 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11c>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d652a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d652c:	f1bb 0f00 	cmp.w	fp, #0
   d6530:	bf14      	ite	ne
   d6532:	46a8      	movne	r8, r5
   d6534:	f04f 0800 	moveq.w	r8, #0
   d6538:	2a00      	cmp	r2, #0
   d653a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d653c:	f108 0305 	add.w	r3, r8, #5
   d6540:	bf14      	ite	ne
   d6542:	4690      	movne	r8, r2
   d6544:	f04f 0800 	moveq.w	r8, #0
   d6548:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d654a:	f108 0307 	add.w	r3, r8, #7
   d654e:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6552:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6554:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6558:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d655c:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d655e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6562:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d6566:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d656a:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d656e:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d6572:	f1bb 0f00 	cmp.w	fp, #0
   d6576:	d063      	beq.n	d6640 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
   d6578:	2d00      	cmp	r5, #0
   d657a:	d061      	beq.n	d6640 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
        memcpy(buff + pos, data, length);
   d657c:	462a      	mov	r2, r5
   d657e:	4659      	mov	r1, fp
   d6580:	f10d 0005 	add.w	r0, sp, #5
   d6584:	f00d f846 	bl	e3614 <memcpy>
        pos += length;
   d6588:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d658c:	2b00      	cmp	r3, #0
   d658e:	d159      	bne.n	d6644 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d6590:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d6592:	4545      	cmp	r5, r8
   d6594:	d262      	bcs.n	d665c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x178>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d6596:	ebc5 0608 	rsb	r6, r5, r8
#define BlynkUtility_h

template<class T>
const T& BlynkMin(const T& a, const T& b)
{
    return (b < a) ? b : a;
   d659a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
   d659e:	687b      	ldr	r3, [r7, #4]
   d65a0:	bf28      	it	cs
   d65a2:	f44f 6680 	movcs.w	r6, #1024	; 0x400
   d65a6:	eb03 0905 	add.w	r9, r3, r5
   d65aa:	b126      	cbz	r6, d65b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd2>
   d65ac:	4632      	mov	r2, r6
   d65ae:	4649      	mov	r1, r9
   d65b0:	483e      	ldr	r0, [pc, #248]	; (d66ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c8>)
   d65b2:	f7fe feeb 	bl	d538c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d65b6:	4632      	mov	r2, r6
   d65b8:	4649      	mov	r1, r9
   d65ba:	6820      	ldr	r0, [r4, #0]
   d65bc:	f006 f92b 	bl	dc816 <_ZN9TCPClient5writeEPKhj>
   d65c0:	4606      	mov	r6, r0
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d65c2:	2000      	movs	r0, #0
   d65c4:	f003 fee4 	bl	da390 <_Z10BlynkDelaym>
        if (w == 0) {
   d65c8:	2e00      	cmp	r6, #0
   d65ca:	d145      	bne.n	d6658 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x174>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
   d65cc:	f7fe fe98 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d65d0:	f005 ff9e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d65d4:	4936      	ldr	r1, [pc, #216]	; (d66b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1cc>)
   d65d6:	f004 fdc2 	bl	db15e <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d65da:	6820      	ldr	r0, [r4, #0]
   d65dc:	f006 fb04 	bl	dcbe8 <_ZN9TCPClient4stopEv>
#endif
            conn.disconnect();
            state = CONNECTING;
   d65e0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d65e2:	f003 fedf 	bl	da3a4 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d65e6:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d65e8:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d65ea:	46bd      	mov	sp, r7
   d65ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d65f0:	8b23      	ldrh	r3, [r4, #24]
   d65f2:	3301      	adds	r3, #1
   d65f4:	b29b      	uxth	r3, r3
   d65f6:	b903      	cbnz	r3, d65fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
        msgIdOut = 1;
   d65f8:	2301      	movs	r3, #1
   d65fa:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d65fc:	8b26      	ldrh	r6, [r4, #24]
   d65fe:	e790      	b.n	d6522 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d6600:	68e3      	ldr	r3, [r4, #12]
   d6602:	6922      	ldr	r2, [r4, #16]
   d6604:	4293      	cmp	r3, r2
   d6606:	bf38      	it	cc
   d6608:	4613      	movcc	r3, r2
   d660a:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d660e:	f003 fec1 	bl	da394 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d6612:	ebc0 0008 	rsb	r0, r0, r8
   d6616:	2800      	cmp	r0, #0
   d6618:	db0a      	blt.n	d6630 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d661a:	2100      	movs	r1, #0
   d661c:	4620      	mov	r0, r4
   d661e:	f7ff fe95 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d6622:	f003 feb7 	bl	da394 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d6626:	ebc0 0008 	rsb	r0, r0, r8
   d662a:	2800      	cmp	r0, #0
   d662c:	daf5      	bge.n	d661a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x136>
   d662e:	e77c      	b.n	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d6630:	7f21      	ldrb	r1, [r4, #28]
   d6632:	2900      	cmp	r1, #0
   d6634:	f47f af79 	bne.w	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
            run();
   d6638:	4620      	mov	r0, r4
   d663a:	f7ff fe87 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d663e:	e774      	b.n	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d6640:	2005      	movs	r0, #5
   d6642:	e7a2      	b.n	d658a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d6644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d6646:	2b00      	cmp	r3, #0
   d6648:	d0a2      	beq.n	d6590 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
   d664a:	461a      	mov	r2, r3
   d664c:	687b      	ldr	r3, [r7, #4]
   d664e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d6650:	4418      	add	r0, r3
   d6652:	f00c ffdf 	bl	e3614 <memcpy>
   d6656:	e79b      	b.n	d6590 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d6658:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d665a:	e79a      	b.n	d6592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
   d665c:	d01b      	beq.n	d6696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b2>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
   d665e:	f7fe fe4f 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6662:	f005 ff55 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6666:	4913      	ldr	r1, [pc, #76]	; (d66b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>)
   d6668:	f004 fd66 	bl	db138 <_ZN5Print5printEPKc>
   d666c:	f005 ff50 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6670:	220a      	movs	r2, #10
   d6672:	4629      	mov	r1, r5
   d6674:	f004 fdb6 	bl	db1e4 <_ZN5Print5printEji>
   d6678:	f005 ff4a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d667c:	212f      	movs	r1, #47	; 0x2f
   d667e:	f004 fd5f 	bl	db140 <_ZN5Print5printEc>
   d6682:	f005 ff45 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6686:	220a      	movs	r2, #10
   d6688:	4641      	mov	r1, r8
   d668a:	f004 fdad 	bl	db1e8 <_ZN5Print7printlnEji>
#endif
        internalReconnect();
   d668e:	4620      	mov	r0, r4
   d6690:	f7ff fad0 	bl	d5c34 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d6694:	e7a7      	b.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
    }

    lastActivityOut = BlynkMillis();
   d6696:	f003 fe7d 	bl	da394 <_Z11BlynkMillisv>
   d669a:	6120      	str	r0, [r4, #16]
   d669c:	e7a3      	b.n	d65e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d669e:	2e00      	cmp	r6, #0
   d66a0:	f47f af43 	bne.w	d652a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
   d66a4:	e73a      	b.n	d651c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x38>
   d66a6:	bf00      	nop
   d66a8:	20000045 	.word	0x20000045
   d66ac:	000e702d 	.word	0x000e702d
   d66b0:	000e702f 	.word	0x000e702f
   d66b4:	000e7039 	.word	0x000e7039

000d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d66b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ba:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d66be:	ab08      	add	r3, sp, #32
   d66c0:	2400      	movs	r4, #0
   d66c2:	4605      	mov	r5, r0
   d66c4:	460f      	mov	r7, r1
   d66c6:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d66c8:	a805      	add	r0, sp, #20
   d66ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d66ce:	490e      	ldr	r1, [pc, #56]	; (d6708 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d66d0:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d66d2:	4616      	mov	r6, r2
   d66d4:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d66d6:	f7fe ff14 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d66da:	4639      	mov	r1, r7
   d66dc:	a805      	add	r0, sp, #20
   d66de:	f7fe ff2d 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d66e2:	4631      	mov	r1, r6
   d66e4:	a805      	add	r0, sp, #20
   d66e6:	f7fe ff29 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d66ea:	9b06      	ldr	r3, [sp, #24]
   d66ec:	9402      	str	r4, [sp, #8]
   d66ee:	3b01      	subs	r3, #1
   d66f0:	9300      	str	r3, [sp, #0]
   d66f2:	9401      	str	r4, [sp, #4]
   d66f4:	9b05      	ldr	r3, [sp, #20]
   d66f6:	4622      	mov	r2, r4
   d66f8:	2114      	movs	r1, #20
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7ff fef2 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6700:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6706:	bf00      	nop
   d6708:	000e703f 	.word	0x000e703f

000d670c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d670c:	b500      	push	{lr}
   d670e:	b095      	sub	sp, #84	; 0x54
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d6710:	ab04      	add	r3, sp, #16
   d6712:	2200      	movs	r2, #0
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	2349      	movs	r3, #73	; 0x49
   d6718:	9300      	str	r3, [sp, #0]
   d671a:	9202      	str	r2, [sp, #8]
   d671c:	4b03      	ldr	r3, [pc, #12]	; (d672c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d671e:	2111      	movs	r1, #17
   d6720:	f7ff fee0 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d6724:	b015      	add	sp, #84	; 0x54
   d6726:	f85d fb04 	ldr.w	pc, [sp], #4
   d672a:	bf00      	nop
   d672c:	000e6b88 	.word	0x000e6b88

000d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6730:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6732:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6736:	ab0c      	add	r3, sp, #48	; 0x30
   d6738:	2400      	movs	r4, #0
   d673a:	4605      	mov	r5, r0
   d673c:	460f      	mov	r7, r1
   d673e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6740:	a805      	add	r0, sp, #20
   d6742:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6746:	4911      	ldr	r1, [pc, #68]	; (d678c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d6748:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d674a:	4616      	mov	r6, r2
   d674c:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d674e:	f7fe fed8 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6752:	4639      	mov	r1, r7
   d6754:	a805      	add	r0, sp, #20
   d6756:	f7fe fef1 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d675a:	4631      	mov	r1, r6
   d675c:	a808      	add	r0, sp, #32
   d675e:	f004 fbbb 	bl	daed8 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6762:	9908      	ldr	r1, [sp, #32]
   d6764:	a805      	add	r0, sp, #20
   d6766:	f7fe fecc 	bl	d5502 <_ZN10BlynkParam3addEPKc>
   d676a:	a808      	add	r0, sp, #32
   d676c:	f004 fb2e 	bl	dadcc <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6770:	9b06      	ldr	r3, [sp, #24]
   d6772:	9402      	str	r4, [sp, #8]
   d6774:	3b01      	subs	r3, #1
   d6776:	9300      	str	r3, [sp, #0]
   d6778:	9401      	str	r4, [sp, #4]
   d677a:	9b05      	ldr	r3, [sp, #20]
   d677c:	4622      	mov	r2, r4
   d677e:	2114      	movs	r1, #20
   d6780:	4628      	mov	r0, r5
   d6782:	f7ff feaf 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6786:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d678c:	000e703f 	.word	0x000e703f

000d6790 <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d6790:	b570      	push	{r4, r5, r6, lr}
   d6792:	b092      	sub	sp, #72	; 0x48
  String statusMessage;
   d6794:	4961      	ldr	r1, [pc, #388]	; (d691c <_Z9deepSleepv+0x18c>)
  StateString = "STBY";
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d6796:	4c62      	ldr	r4, [pc, #392]	; (d6920 <_Z9deepSleepv+0x190>)
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6798:	a806      	add	r0, sp, #24
   d679a:	f004 fb5e 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  StateString = "STBY";
   d679e:	4961      	ldr	r1, [pc, #388]	; (d6924 <_Z9deepSleepv+0x194>)
   d67a0:	4861      	ldr	r0, [pc, #388]	; (d6928 <_Z9deepSleepv+0x198>)
   d67a2:	f004 fbac 	bl	daefe <_ZN6StringaSEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d67a6:	f003 fea5 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d67aa:	4a60      	ldr	r2, [pc, #384]	; (d692c <_Z9deepSleepv+0x19c>)
   d67ac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
   d67b0:	6812      	ldr	r2, [r2, #0]
   d67b2:	1a9b      	subs	r3, r3, r2
   d67b4:	4418      	add	r0, r3
   d67b6:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
  //Save
  saveState();
   d67ba:	f7fe ffff 	bl	d57bc <_Z9saveStatev>

  if (timeSynced)
   d67be:	4b5c      	ldr	r3, [pc, #368]	; (d6930 <_Z9deepSleepv+0x1a0>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d67c0:	4959      	ldr	r1, [pc, #356]	; (d6928 <_Z9deepSleepv+0x198>)
   d67c2:	781b      	ldrb	r3, [r3, #0]
   d67c4:	b343      	cbz	r3, d6818 <_Z9deepSleepv+0x88>
   d67c6:	a80a      	add	r0, sp, #40	; 0x28
   d67c8:	f004 fb86 	bl	daed8 <_ZN6StringC1ERKS_>
  {
       statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d67cc:	4959      	ldr	r1, [pc, #356]	; (d6934 <_Z9deepSleepv+0x1a4>)
   d67ce:	a80a      	add	r0, sp, #40	; 0x28
   d67d0:	f004 fbee 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d67d4:	4605      	mov	r5, r0
   d67d6:	4858      	ldr	r0, [pc, #352]	; (d6938 <_Z9deepSleepv+0x1a8>)
   d67d8:	f002 ff03 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d67dc:	4b57      	ldr	r3, [pc, #348]	; (d693c <_Z9deepSleepv+0x1ac>)
   d67de:	4958      	ldr	r1, [pc, #352]	; (d6940 <_Z9deepSleepv+0x1b0>)
   d67e0:	681a      	ldr	r2, [r3, #0]
   d67e2:	4b58      	ldr	r3, [pc, #352]	; (d6944 <_Z9deepSleepv+0x1b4>)
   d67e4:	4402      	add	r2, r0
   d67e6:	a80e      	add	r0, sp, #56	; 0x38
   d67e8:	f004 ff68 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d67ec:	a90e      	add	r1, sp, #56	; 0x38
   d67ee:	4628      	mov	r0, r5
   d67f0:	f004 fbd2 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d67f4:	494f      	ldr	r1, [pc, #316]	; (d6934 <_Z9deepSleepv+0x1a4>)
   d67f6:	f004 fbdb 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d67fa:	4953      	ldr	r1, [pc, #332]	; (d6948 <_Z9deepSleepv+0x1b8>)
   d67fc:	f004 fbcc 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d6800:	4952      	ldr	r1, [pc, #328]	; (d694c <_Z9deepSleepv+0x1bc>)
   d6802:	f004 fbd5 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d6806:	4601      	mov	r1, r0
   d6808:	a806      	add	r0, sp, #24
   d680a:	f004 fb56 	bl	daeba <_ZN6StringaSERKS_>
   d680e:	a80e      	add	r0, sp, #56	; 0x38
   d6810:	f004 fadc 	bl	dadcc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6814:	a80a      	add	r0, sp, #40	; 0x28
   d6816:	e011      	b.n	d683c <_Z9deepSleepv+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6818:	a80e      	add	r0, sp, #56	; 0x38
   d681a:	f004 fb5d 	bl	daed8 <_ZN6StringC1ERKS_>

  }
  else
  {
       statusMessage = StateString+"                "+field7+"%";
   d681e:	494c      	ldr	r1, [pc, #304]	; (d6950 <_Z9deepSleepv+0x1c0>)
   d6820:	a80e      	add	r0, sp, #56	; 0x38
   d6822:	f004 fbc5 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d6826:	4948      	ldr	r1, [pc, #288]	; (d6948 <_Z9deepSleepv+0x1b8>)
   d6828:	f004 fbb6 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d682c:	4947      	ldr	r1, [pc, #284]	; (d694c <_Z9deepSleepv+0x1bc>)
   d682e:	f004 fbbf 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d6832:	4601      	mov	r1, r0
   d6834:	a806      	add	r0, sp, #24
   d6836:	f004 fb40 	bl	daeba <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d683a:	a80e      	add	r0, sp, #56	; 0x38
   d683c:	f004 fac6 	bl	dadcc <_ZN6StringD1Ev>
  }
  Blynk.virtualWrite(V30,statusMessage);
   d6840:	a906      	add	r1, sp, #24
   d6842:	a80e      	add	r0, sp, #56	; 0x38
   d6844:	f004 fb48 	bl	daed8 <_ZN6StringC1ERKS_>
   d6848:	aa0e      	add	r2, sp, #56	; 0x38
   d684a:	211e      	movs	r1, #30
   d684c:	4841      	ldr	r0, [pc, #260]	; (d6954 <_Z9deepSleepv+0x1c4>)
   d684e:	f7ff ff6f 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6852:	a80e      	add	r0, sp, #56	; 0x38
   d6854:	f004 faba 	bl	dadcc <_ZN6StringD1Ev>
  delay(3000);
   d6858:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d685c:	f004 ff92 	bl	db784 <delay>
  power.setPowerON(EXT3V3,false);
   d6860:	2200      	movs	r2, #0
   d6862:	2102      	movs	r1, #2
   d6864:	483c      	ldr	r0, [pc, #240]	; (d6958 <_Z9deepSleepv+0x1c8>)
   d6866:	f003 f847 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d686a:	2200      	movs	r2, #0
   d686c:	2103      	movs	r1, #3
   d686e:	483a      	ldr	r0, [pc, #232]	; (d6958 <_Z9deepSleepv+0x1c8>)
   d6870:	f003 f842 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d6874:	f006 fbee 	bl	dd054 <_Z19__fetch_global_Wirev>
   d6878:	f005 fef4 	bl	dc664 <_ZN7TwoWire9isEnabledEv>
   d687c:	b918      	cbnz	r0, d6886 <_Z9deepSleepv+0xf6>
    Wire.end();
   d687e:	f006 fbe9 	bl	dd054 <_Z19__fetch_global_Wirev>
   d6882:	f005 fec7 	bl	dc614 <_ZN7TwoWire3endEv>
  }  

  DEBUG_PRINTLN("Going to sleep");
   d6886:	f005 fe43 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d688a:	4934      	ldr	r1, [pc, #208]	; (d695c <_Z9deepSleepv+0x1cc>)
   d688c:	f004 fc67 	bl	db15e <_ZN5Print7printlnEPKc>
  #if Wiring_Cellular
  if (!state.bSleepModeStandby)
   d6890:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
   d6894:	b92b      	cbnz	r3, d68a2 <_Z9deepSleepv+0x112>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6896:	4832      	ldr	r0, [pc, #200]	; (d6960 <_Z9deepSleepv+0x1d0>)
   d6898:	461a      	mov	r2, r3
   d689a:	4619      	mov	r1, r3
   d689c:	6840      	ldr	r0, [r0, #4]
   d689e:	f004 f891 	bl	da9c4 <network_off>
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
  state.bInSleepMode=false;
  #endif  

  delay(1000);
   d68a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d68a6:	f004 ff6d 	bl	db784 <delay>
  if (state.bSleepModeStandby){
   d68aa:	f894 4424 	ldrb.w	r4, [r4, #1060]	; 0x424
   d68ae:	4d1c      	ldr	r5, [pc, #112]	; (d6920 <_Z9deepSleepv+0x190>)
   d68b0:	b1cc      	cbz	r4, d68e6 <_Z9deepSleepv+0x156>
    DEBUG_PRINTLN("Going to standby sleep");
   d68b2:	f005 fe2d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d68b6:	492b      	ldr	r1, [pc, #172]	; (d6964 <_Z9deepSleepv+0x1d4>)
   d68b8:	f004 fc51 	bl	db15e <_ZN5Print7printlnEPKc>
   d68bc:	4b2a      	ldr	r3, [pc, #168]	; (d6968 <_Z9deepSleepv+0x1d8>)
   d68be:	6819      	ldr	r1, [r3, #0]
   d68c0:	2308      	movs	r3, #8
   d68c2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   d68c6:	ab12      	add	r3, sp, #72	; 0x48
    state.bInSleepMode=true;
   d68c8:	2201      	movs	r2, #1
   d68ca:	f885 2425 	strb.w	r2, [r5, #1061]	; 0x425
   d68ce:	f803 2d31 	strb.w	r2, [r3, #-49]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d68d2:	9102      	str	r1, [sp, #8]
   d68d4:	f44f 7161 	mov.w	r1, #900	; 0x384
   d68d8:	9101      	str	r1, [sp, #4]
   d68da:	9200      	str	r2, [sp, #0]
   d68dc:	a90a      	add	r1, sp, #40	; 0x28
   d68de:	a80e      	add	r0, sp, #56	; 0x38
   d68e0:	f004 f9ec 	bl	dacbc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d68e4:	e014      	b.n	d6910 <_Z9deepSleepv+0x180>
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
   d68e6:	f005 fe13 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d68ea:	4920      	ldr	r1, [pc, #128]	; (d696c <_Z9deepSleepv+0x1dc>)
   d68ec:	f004 fc37 	bl	db15e <_ZN5Print7printlnEPKc>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
   d68f0:	2601      	movs	r6, #1
    delay(2000);
   d68f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    DEBUG_PRINTLN("Going to deep sleep");
    state.bSleepModeStandby=false;
   d68f6:	f885 4424 	strb.w	r4, [r5, #1060]	; 0x424
    state.bInSleepMode=true;
   d68fa:	f885 6425 	strb.w	r6, [r5, #1061]	; 0x425
    delay(2000);
   d68fe:	f004 ff41 	bl	db784 <delay>
    System.sleep(SLEEP_MODE_DEEP); 
   d6902:	4b1b      	ldr	r3, [pc, #108]	; (d6970 <_Z9deepSleepv+0x1e0>)
   d6904:	4622      	mov	r2, r4
   d6906:	681b      	ldr	r3, [r3, #0]
   d6908:	4631      	mov	r1, r6
   d690a:	a80e      	add	r0, sp, #56	; 0x38
   d690c:	f004 f9a6 	bl	dac5c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6910:	a806      	add	r0, sp, #24
   d6912:	f004 fa5b 	bl	dadcc <_ZN6StringD1Ev>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
    delay(2000);
    System.sleep(SLEEP_MODE_DEEP); 
    }
}
   d6916:	b012      	add	sp, #72	; 0x48
   d6918:	bd70      	pop	{r4, r5, r6, pc}
   d691a:	bf00      	nop
   d691c:	000e6c91 	.word	0x000e6c91
   d6920:	2003da40 	.word	0x2003da40
   d6924:	000e7042 	.word	0x000e7042
   d6928:	2003d798 	.word	0x2003d798
   d692c:	2003e138 	.word	0x2003e138
   d6930:	2003de6d 	.word	0x2003de6d
   d6934:	000e7060 	.word	0x000e7060
   d6938:	2003e134 	.word	0x2003e134
   d693c:	2003d560 	.word	0x2003d560
   d6940:	2003e26c 	.word	0x2003e26c
   d6944:	000e7047 	.word	0x000e7047
   d6948:	2003d7a8 	.word	0x2003d7a8
   d694c:	000e704f 	.word	0x000e704f
   d6950:	000e7051 	.word	0x000e7051
   d6954:	2003e1f4 	.word	0x2003e1f4
   d6958:	2003de6c 	.word	0x2003de6c
   d695c:	000e7062 	.word	0x000e7062
   d6960:	2003e2ac 	.word	0x2003e2ac
   d6964:	000e7071 	.word	0x000e7071
   d6968:	2003de88 	.word	0x2003de88
   d696c:	000e7088 	.word	0x000e7088
   d6970:	2003e130 	.word	0x2003e130

000d6974 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6974:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6976:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d697a:	ab0c      	add	r3, sp, #48	; 0x30
   d697c:	2400      	movs	r4, #0
   d697e:	4605      	mov	r5, r0
   d6980:	460f      	mov	r7, r1
   d6982:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6984:	a805      	add	r0, sp, #20
   d6986:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d698a:	4911      	ldr	r1, [pc, #68]	; (d69d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d698c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d698e:	4616      	mov	r6, r2
   d6990:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6992:	f7fe fdb6 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6996:	4639      	mov	r1, r7
   d6998:	a805      	add	r0, sp, #20
   d699a:	f7fe fdcf 	bl	d553c <_ZN10BlynkParam3addEi>
   d699e:	4631      	mov	r1, r6
   d69a0:	a808      	add	r0, sp, #32
   d69a2:	f004 fa99 	bl	daed8 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d69a6:	9908      	ldr	r1, [sp, #32]
   d69a8:	a805      	add	r0, sp, #20
   d69aa:	f7fe fdaa 	bl	d5502 <_ZN10BlynkParam3addEPKc>
   d69ae:	a808      	add	r0, sp, #32
   d69b0:	f004 fa0c 	bl	dadcc <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d69b4:	9b06      	ldr	r3, [sp, #24]
   d69b6:	9402      	str	r4, [sp, #8]
   d69b8:	3b01      	subs	r3, #1
   d69ba:	9300      	str	r3, [sp, #0]
   d69bc:	9401      	str	r4, [sp, #4]
   d69be:	9b05      	ldr	r3, [sp, #20]
   d69c0:	4622      	mov	r2, r4
   d69c2:	2114      	movs	r1, #20
   d69c4:	4628      	mov	r0, r5
   d69c6:	f7ff fd8d 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d69ca:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d69ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69d0:	000e703f 	.word	0x000e703f

000d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d69d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69d6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d69da:	ab0a      	add	r3, sp, #40	; 0x28
   d69dc:	2400      	movs	r4, #0
   d69de:	4606      	mov	r6, r0
   d69e0:	460d      	mov	r5, r1
   d69e2:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d69e4:	a807      	add	r0, sp, #28
   d69e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d69ea:	4917      	ldr	r1, [pc, #92]	; (d6a48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d69ec:	ed8d 0a05 	vstr	s0, [sp, #20]
   d69f0:	9309      	str	r3, [sp, #36]	; 0x24
   d69f2:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d69f4:	f7fe fd85 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d69f8:	4629      	mov	r1, r5
   d69fa:	a807      	add	r0, sp, #28
   d69fc:	f7fe fd9e 	bl	d553c <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d6a00:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6a04:	9b08      	ldr	r3, [sp, #32]
   d6a06:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6a08:	9d07      	ldr	r5, [sp, #28]
   d6a0a:	ee10 0a10 	vmov	r0, s0
   d6a0e:	1acf      	subs	r7, r1, r3
   d6a10:	441d      	add	r5, r3
   d6a12:	f00c f911 	bl	e2c38 <__aeabi_f2d>
   d6a16:	4a0d      	ldr	r2, [pc, #52]	; (d6a4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d6a18:	e9cd 0100 	strd	r0, r1, [sp]
   d6a1c:	4639      	mov	r1, r7
   d6a1e:	4628      	mov	r0, r5
   d6a20:	f004 f858 	bl	daad4 <snprintf>
   d6a24:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6a26:	9402      	str	r4, [sp, #8]
   d6a28:	3001      	adds	r0, #1
   d6a2a:	4418      	add	r0, r3
   d6a2c:	9008      	str	r0, [sp, #32]
   d6a2e:	3801      	subs	r0, #1
   d6a30:	9000      	str	r0, [sp, #0]
   d6a32:	9401      	str	r4, [sp, #4]
   d6a34:	9b07      	ldr	r3, [sp, #28]
   d6a36:	4622      	mov	r2, r4
   d6a38:	2114      	movs	r1, #20
   d6a3a:	4630      	mov	r0, r6
   d6a3c:	f7ff fd52 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6a40:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d6a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a46:	bf00      	nop
   d6a48:	000e703f 	.word	0x000e703f
   d6a4c:	000e70a0 	.word	0x000e70a0

000d6a50 <_Z13setAppWidgetsv>:
 DEBUG_PRINTLN("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d6a50:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6a52:	4d09      	ldr	r5, [pc, #36]	; (d6a78 <_Z13setAppWidgetsv+0x28>)
   d6a54:	4c09      	ldr	r4, [pc, #36]	; (d6a7c <_Z13setAppWidgetsv+0x2c>)
   d6a56:	686a      	ldr	r2, [r5, #4]
   d6a58:	4620      	mov	r0, r4
   d6a5a:	210b      	movs	r1, #11
   d6a5c:	f7ff fe2c 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6a60:	4620      	mov	r0, r4
   d6a62:	68aa      	ldr	r2, [r5, #8]
   d6a64:	210d      	movs	r1, #13
   d6a66:	f7ff fe27 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6a6a:	ed95 0a03 	vldr	s0, [r5, #12]
   d6a6e:	210f      	movs	r1, #15
   d6a70:	4620      	mov	r0, r4
   d6a72:	f7ff ffaf 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d6a76:	bd38      	pop	{r3, r4, r5, pc}
   d6a78:	2003da40 	.word	0x2003da40
   d6a7c:	2003e1f4 	.word	0x2003e1f4

000d6a80 <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d6a80:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d6a82:	6808      	ldr	r0, [r1, #0]
   d6a84:	f00c fcb3 	bl	e33ee <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d6a88:	4b03      	ldr	r3, [pc, #12]	; (d6a98 <BlynkWidgetWrite10+0x18>)
   d6a8a:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d6a8c:	f7fe fe96 	bl	d57bc <_Z9saveStatev>
  setAppWidgets();
}
   d6a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d6a94:	f7ff bfdc 	b.w	d6a50 <_Z13setAppWidgetsv>
   d6a98:	2003da40 	.word	0x2003da40

000d6a9c <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	6808      	ldr	r0, [r1, #0]
   d6aa0:	f00c fca5 	bl	e33ee <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d6aa4:	4b03      	ldr	r3, [pc, #12]	; (d6ab4 <BlynkWidgetWrite12+0x18>)
   d6aa6:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d6aa8:	f7fe fe88 	bl	d57bc <_Z9saveStatev>
  setAppWidgets();
}
   d6aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d6ab0:	f7ff bfce 	b.w	d6a50 <_Z13setAppWidgetsv>
   d6ab4:	2003da40 	.word	0x2003da40

000d6ab8 <BlynkWidgetWriteInternalPinACON>:
    System.sleep(SLEEP_MODE_DEEP); 
    }
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d6ab8:	b508      	push	{r3, lr}
  appConnected = true;
   d6aba:	4b06      	ldr	r3, [pc, #24]	; (d6ad4 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d6abc:	2201      	movs	r2, #1
   d6abe:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d6ac0:	f7ff ffc6 	bl	d6a50 <_Z13setAppWidgetsv>
  DEBUG_PRINTLN("Connected");
   d6ac4:	f005 fd24 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6ac8:	4903      	ldr	r1, [pc, #12]	; (d6ad8 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d6aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
   d6ace:	f004 bb46 	b.w	db15e <_ZN5Print7printlnEPKc>
   d6ad2:	bf00      	nop
   d6ad4:	2003da04 	.word	0x2003da04
   d6ad8:	000e70a6 	.word	0x000e70a6

000d6adc <BlynkWidgetWrite14>:
  }
  
}
// Calibration
BLYNK_WRITE(V14) 
{
   d6adc:	b510      	push	{r4, lr}
   d6ade:	6808      	ldr	r0, [r1, #0]
   d6ae0:	f00c fc85 	bl	e33ee <atoi>
  if (param.asInt()==1)
   d6ae4:	2801      	cmp	r0, #1
   d6ae6:	d10d      	bne.n	d6b04 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d6ae8:	480d      	ldr	r0, [pc, #52]	; (d6b20 <BlynkWidgetWrite14+0x44>)
   d6aea:	4c0e      	ldr	r4, [pc, #56]	; (d6b24 <BlynkWidgetWrite14+0x48>)
   d6aec:	f002 fb00 	bl	d90f0 <_ZN3ULP4zeroEv>
   d6af0:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6af4:	f7fe fe62 	bl	d57bc <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6af8:	ed94 0a03 	vldr	s0, [r4, #12]
   d6afc:	480a      	ldr	r0, [pc, #40]	; (d6b28 <BlynkWidgetWrite14+0x4c>)
   d6afe:	210f      	movs	r1, #15
   d6b00:	f7ff ff68 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6b04:	2200      	movs	r2, #0
   d6b06:	210e      	movs	r1, #14
   d6b08:	4807      	ldr	r0, [pc, #28]	; (d6b28 <BlynkWidgetWrite14+0x4c>)
   d6b0a:	f7ff fdd5 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  // Since data will be invalid save the new calibration and reset
  delay(4000);
   d6b0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d6b12:	f004 fe37 	bl	db784 <delay>
  System.reset();
}
   d6b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Blynk.virtualWrite(V15, state.zeroOff);
  }
  Blynk.virtualWrite(V14, 0);
  // Since data will be invalid save the new calibration and reset
  delay(4000);
  System.reset();
   d6b1a:	f004 b89b 	b.w	dac54 <_ZN11SystemClass5resetEv>
   d6b1e:	bf00      	nop
   d6b20:	2003de90 	.word	0x2003de90
   d6b24:	2003da40 	.word	0x2003da40
   d6b28:	2003e1f4 	.word	0x2003e1f4

000d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b2e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6b32:	ab08      	add	r3, sp, #32
   d6b34:	2400      	movs	r4, #0
   d6b36:	4605      	mov	r5, r0
   d6b38:	460f      	mov	r7, r1
   d6b3a:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b3c:	a805      	add	r0, sp, #20
   d6b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6b42:	490e      	ldr	r1, [pc, #56]	; (d6b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6b44:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b46:	4616      	mov	r6, r2
   d6b48:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b4a:	f7fe fcda 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6b4e:	4639      	mov	r1, r7
   d6b50:	a805      	add	r0, sp, #20
   d6b52:	f7fe fcf3 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6b56:	4631      	mov	r1, r6
   d6b58:	a805      	add	r0, sp, #20
   d6b5a:	f7fe fcd2 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6b5e:	9b06      	ldr	r3, [sp, #24]
   d6b60:	9402      	str	r4, [sp, #8]
   d6b62:	3b01      	subs	r3, #1
   d6b64:	9300      	str	r3, [sp, #0]
   d6b66:	9401      	str	r4, [sp, #4]
   d6b68:	9b05      	ldr	r3, [sp, #20]
   d6b6a:	4622      	mov	r2, r4
   d6b6c:	2114      	movs	r1, #20
   d6b6e:	4628      	mov	r0, r5
   d6b70:	f7ff fcb8 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6b74:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b7a:	bf00      	nop
   d6b7c:	000e703f 	.word	0x000e703f

000d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b82:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6b86:	ab08      	add	r3, sp, #32
   d6b88:	2400      	movs	r4, #0
   d6b8a:	4605      	mov	r5, r0
   d6b8c:	460f      	mov	r7, r1
   d6b8e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b90:	a805      	add	r0, sp, #20
   d6b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6b96:	490e      	ldr	r1, [pc, #56]	; (d6bd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_+0x50>)
   d6b98:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6b9a:	4616      	mov	r6, r2
   d6b9c:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6b9e:	f7fe fcb0 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6ba2:	4639      	mov	r1, r7
   d6ba4:	a805      	add	r0, sp, #20
   d6ba6:	f7fe fcc9 	bl	d553c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6baa:	4631      	mov	r1, r6
   d6bac:	a805      	add	r0, sp, #20
   d6bae:	f7fe fcc5 	bl	d553c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6bb2:	9b06      	ldr	r3, [sp, #24]
   d6bb4:	9402      	str	r4, [sp, #8]
   d6bb6:	3b01      	subs	r3, #1
   d6bb8:	9300      	str	r3, [sp, #0]
   d6bba:	9401      	str	r4, [sp, #4]
   d6bbc:	9b05      	ldr	r3, [sp, #20]
   d6bbe:	4622      	mov	r2, r4
   d6bc0:	2114      	movs	r1, #20
   d6bc2:	4628      	mov	r0, r5
   d6bc4:	f7ff fc8e 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6bc8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bce:	bf00      	nop
   d6bd0:	000e703f 	.word	0x000e703f

000d6bd4 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d6bd4:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d6bd6:	4c46      	ldr	r4, [pc, #280]	; (d6cf0 <_Z20initializeAppWidgetsv+0x11c>)
   d6bd8:	4846      	ldr	r0, [pc, #280]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6bda:	6862      	ldr	r2, [r4, #4]
   d6bdc:	210a      	movs	r1, #10
   d6bde:	f7ff fd6b 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6be2:	68a2      	ldr	r2, [r4, #8]
   d6be4:	4843      	ldr	r0, [pc, #268]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6be6:	210c      	movs	r1, #12
   d6be8:	f7ff fd66 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d6bec:	6862      	ldr	r2, [r4, #4]
   d6bee:	4841      	ldr	r0, [pc, #260]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6bf0:	210b      	movs	r1, #11
   d6bf2:	f7ff fd61 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6bf6:	68a2      	ldr	r2, [r4, #8]
   d6bf8:	483e      	ldr	r0, [pc, #248]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6bfa:	210d      	movs	r1, #13
   d6bfc:	f7ff fd5c 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d6c00:	f104 0210 	add.w	r2, r4, #16
   d6c04:	2114      	movs	r1, #20
   d6c06:	483b      	ldr	r0, [pc, #236]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c08:	f7ff ff90 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d6c0c:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6c10:	2110      	movs	r1, #16
   d6c12:	4838      	ldr	r0, [pc, #224]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c14:	f7ff ff8a 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d6c18:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6c1c:	2112      	movs	r1, #18
   d6c1e:	4835      	ldr	r0, [pc, #212]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c20:	f7ff ff84 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d6c24:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6c28:	211a      	movs	r1, #26
   d6c2a:	4832      	ldr	r0, [pc, #200]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c2c:	f7ff ff7e 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6c30:	ed94 0a03 	vldr	s0, [r4, #12]
   d6c34:	482f      	ldr	r0, [pc, #188]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c36:	210f      	movs	r1, #15
   d6c38:	f7ff fecc 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d6c3c:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d6c40:	ed93 0a00 	vldr	s0, [r3]
   d6c44:	482b      	ldr	r0, [pc, #172]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c46:	2119      	movs	r1, #25
   d6c48:	f7ff fec4 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d6c4c:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6c50:	4828      	ldr	r0, [pc, #160]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c52:	2117      	movs	r1, #23
   d6c54:	f7ff fd30 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 // Blynk.virtualWrite(V24, state.buzzerActivated);
  Blynk.virtualWrite(V22,"Enter code to reset");
   d6c58:	4a27      	ldr	r2, [pc, #156]	; (d6cf8 <_Z20initializeAppWidgetsv+0x124>)
   d6c5a:	4826      	ldr	r0, [pc, #152]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c5c:	2116      	movs	r1, #22
   d6c5e:	f7ff ff65 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  // New Pins
  Blynk.virtualWrite(V24, state.buzzerTamper); // Buzzer Tamper
   d6c62:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6c66:	4823      	ldr	r0, [pc, #140]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c68:	2118      	movs	r1, #24
   d6c6a:	f7ff ff89 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6c6e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6c72:	4820      	ldr	r0, [pc, #128]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c74:	211b      	movs	r1, #27
   d6c76:	f7ff ff83 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6c7a:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6c7e:	481d      	ldr	r0, [pc, #116]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c80:	211c      	movs	r1, #28
   d6c82:	f7ff ff7d 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6c86:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6c8a:	481a      	ldr	r0, [pc, #104]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c8c:	211d      	movs	r1, #29
   d6c8e:	f7ff ff77 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6c92:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6c96:	4817      	ldr	r0, [pc, #92]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6c98:	2120      	movs	r1, #32
   d6c9a:	f7ff ff71 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  if (state.ActivityThreshold==144)
   d6c9e:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   d6ca2:	2b90      	cmp	r3, #144	; 0x90
   d6ca4:	d101      	bne.n	d6caa <_Z20initializeAppWidgetsv+0xd6>
  	Blynk.virtualWrite(V31, 3); // Tamper Setting Hammer
   d6ca6:	2203      	movs	r2, #3
   d6ca8:	e003      	b.n	d6cb2 <_Z20initializeAppWidgetsv+0xde>
  else  if (state.ActivityThreshold==72)
   d6caa:	2b48      	cmp	r3, #72	; 0x48
  	Blynk.virtualWrite(V31, 1); // Tamper Setting feather
   d6cac:	bf0c      	ite	eq
   d6cae:	2201      	moveq	r2, #1
  else
  	Blynk.virtualWrite(V31, 2); // Tamper Setting default
   d6cb0:	2202      	movne	r2, #2
   d6cb2:	211f      	movs	r1, #31
   d6cb4:	480f      	ldr	r0, [pc, #60]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6cb6:	f7ff fcff 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>

  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d6cba:	4b10      	ldr	r3, [pc, #64]	; (d6cfc <_Z20initializeAppWidgetsv+0x128>)
   d6cbc:	781b      	ldrb	r3, [r3, #0]
   d6cbe:	b123      	cbz	r3, d6cca <_Z20initializeAppWidgetsv+0xf6>
   d6cc0:	4a0f      	ldr	r2, [pc, #60]	; (d6d00 <_Z20initializeAppWidgetsv+0x12c>)
   d6cc2:	480c      	ldr	r0, [pc, #48]	; (d6cf4 <_Z20initializeAppWidgetsv+0x120>)
   d6cc4:	2115      	movs	r1, #21
   d6cc6:	f7ff ff31 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  state.firstRunCheck = firstRunValue;
   d6cca:	4b0e      	ldr	r3, [pc, #56]	; (d6d04 <_Z20initializeAppWidgetsv+0x130>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	6023      	str	r3, [r4, #0]
  state.bSleepModeStandby=true;
   d6cd0:	2301      	movs	r3, #1
   d6cd2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d6cd6:	2300      	movs	r3, #0
   d6cd8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  DEBUG_PRINTLN("Finished Initialization");
   d6cdc:	f005 fc18 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6ce0:	4909      	ldr	r1, [pc, #36]	; (d6d08 <_Z20initializeAppWidgetsv+0x134>)
   d6ce2:	f004 fa3c 	bl	db15e <_ZN5Print7printlnEPKc>
  saveState();
}
   d6ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
  state.firstRunCheck = firstRunValue;
  state.bSleepModeStandby=true;
  state.bInSleepMode=false;
  DEBUG_PRINTLN("Finished Initialization");
  saveState();
   d6cea:	f7fe bd67 	b.w	d57bc <_Z9saveStatev>
   d6cee:	bf00      	nop
   d6cf0:	2003da40 	.word	0x2003da40
   d6cf4:	2003e1f4 	.word	0x2003e1f4
   d6cf8:	000e70b0 	.word	0x000e70b0
   d6cfc:	2003da05 	.word	0x2003da05
   d6d00:	000e70c4 	.word	0x000e70c4
   d6d04:	2003d534 	.word	0x2003d534
   d6d08:	000e70df 	.word	0x000e70df

000d6d0c <BlynkWidgetWrite22>:
}

BLYNK_WRITE(V22) //Reset Expression
{
   d6d0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d6d10:	6809      	ldr	r1, [r1, #0]
   d6d12:	4668      	mov	r0, sp
   d6d14:	f004 f8a1 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d6d18:	4961      	ldr	r1, [pc, #388]	; (d6ea0 <BlynkWidgetWrite22+0x194>)
   d6d1a:	4668      	mov	r0, sp
   d6d1c:	f004 f95a 	bl	dafd4 <_ZNK6String6equalsEPKc>
   d6d20:	2800      	cmp	r0, #0
   d6d22:	f000 80b6 	beq.w	d6e92 <BlynkWidgetWrite22+0x186>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d26:	4c5f      	ldr	r4, [pc, #380]	; (d6ea4 <BlynkWidgetWrite22+0x198>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d6d28:	4a5f      	ldr	r2, [pc, #380]	; (d6ea8 <BlynkWidgetWrite22+0x19c>)
   d6d2a:	4860      	ldr	r0, [pc, #384]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6d2c:	2116      	movs	r1, #22
   d6d2e:	f7ff fefd 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d6d32:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d6d34:	2500      	movs	r5, #0
    state.bSleepModeStandby=true;
   d6d36:	2701      	movs	r7, #1
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d38:	f04f 080f 	mov.w	r8, #15
    state.secondsBetweenReadings=5;
   d6d3c:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6d3e:	495c      	ldr	r1, [pc, #368]	; (d6eb0 <BlynkWidgetWrite22+0x1a4>)
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d6d40:	f8c4 8004 	str.w	r8, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6d44:	2300      	movs	r3, #0
    strcpy(state.expression,"Enter expression here");
   d6d46:	f104 0010 	add.w	r0, r4, #16
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d6d4a:	60e3      	str	r3, [r4, #12]
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d6d4c:	6025      	str	r5, [r4, #0]
    state.bSleepModeStandby=true;
   d6d4e:	f884 7424 	strb.w	r7, [r4, #1060]	; 0x424
    state.bInSleepMode=false;
   d6d52:	f884 5425 	strb.w	r5, [r4, #1061]	; 0x425
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d6d56:	f00c fef1 	bl	e3b3c <strcpy>
    strcpy(state.email,"Enter email here");
   d6d5a:	4956      	ldr	r1, [pc, #344]	; (d6eb4 <BlynkWidgetWrite22+0x1a8>)
   d6d5c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6d60:	f00c feec 	bl	e3b3c <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d6d64:	4953      	ldr	r1, [pc, #332]	; (d6eb4 <BlynkWidgetWrite22+0x1a8>)
   d6d66:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d6d6a:	f00c fee7 	bl	e3b3c <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
   d6d6e:	f504 6682 	add.w	r6, r4, #1040	; 0x410
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d6d72:	4950      	ldr	r1, [pc, #320]	; (d6eb4 <BlynkWidgetWrite22+0x1a8>)
   d6d74:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d6d78:	f00c fee0 	bl	e3b3c <strcpy>
    state.deviceZone=0;
    state.batThreshold = 20;
   d6d7c:	4b4e      	ldr	r3, [pc, #312]	; (d6eb8 <BlynkWidgetWrite22+0x1ac>)
   d6d7e:	6033      	str	r3, [r6, #0]
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6d80:	4642      	mov	r2, r8
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6d82:	2364      	movs	r3, #100	; 0x64
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6d84:	210a      	movs	r1, #10
   d6d86:	4849      	ldr	r0, [pc, #292]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d6d88:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
   d6d8c:	f8c4 5420 	str.w	r5, [r4, #1056]	; 0x420
    state.batThreshold = 20;
    state.lastAlert=false;
   d6d90:	f884 5414 	strb.w	r5, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d6d94:	f884 5415 	strb.w	r5, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d6d98:	f884 7417 	strb.w	r7, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d6d9c:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d6da0:	f884 7419 	strb.w	r7, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d6da4:	f884 741a 	strb.w	r7, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d6da8:	f884 741b 	strb.w	r7, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d6dac:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6db0:	f7ff fc82 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d6db4:	68a2      	ldr	r2, [r4, #8]
   d6db6:	483d      	ldr	r0, [pc, #244]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6db8:	210c      	movs	r1, #12
   d6dba:	f7ff fc7d 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d6dbe:	6862      	ldr	r2, [r4, #4]
   d6dc0:	483a      	ldr	r0, [pc, #232]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6dc2:	210b      	movs	r1, #11
   d6dc4:	f7ff fc78 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6dc8:	68a2      	ldr	r2, [r4, #8]
   d6dca:	4838      	ldr	r0, [pc, #224]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6dcc:	210d      	movs	r1, #13
   d6dce:	f7ff fc73 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d6dd2:	f104 0210 	add.w	r2, r4, #16
   d6dd6:	2114      	movs	r1, #20
   d6dd8:	4834      	ldr	r0, [pc, #208]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6dda:	f7ff fea7 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6dde:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d6de2:	2110      	movs	r1, #16
   d6de4:	4831      	ldr	r0, [pc, #196]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6de6:	f7ff fea1 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d6dea:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6dee:	2112      	movs	r1, #18
   d6df0:	482e      	ldr	r0, [pc, #184]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6df2:	f7ff fe9b 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d6df6:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6dfa:	211a      	movs	r1, #26
   d6dfc:	482b      	ldr	r0, [pc, #172]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6dfe:	f7ff fe95 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6e02:	ed94 0a03 	vldr	s0, [r4, #12]
   d6e06:	4829      	ldr	r0, [pc, #164]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e08:	4641      	mov	r1, r8
   d6e0a:	f7ff fde3 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d6e0e:	ed96 0a00 	vldr	s0, [r6]
   d6e12:	4826      	ldr	r0, [pc, #152]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e14:	2119      	movs	r1, #25
   d6e16:	f7ff fddd 	bl	d69d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d6e1a:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d6e1e:	4823      	ldr	r0, [pc, #140]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e20:	2117      	movs	r1, #23
   d6e22:	f7ff fc49 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V24, state.buzzerTamper);  // Buzzer Tamper
   d6e26:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d6e2a:	4820      	ldr	r0, [pc, #128]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e2c:	2118      	movs	r1, #24
   d6e2e:	f7ff fea7 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d6e32:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d6e36:	481d      	ldr	r0, [pc, #116]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e38:	211b      	movs	r1, #27
   d6e3a:	f7ff fea1 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d6e3e:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d6e42:	481a      	ldr	r0, [pc, #104]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e44:	211c      	movs	r1, #28
   d6e46:	f7ff fe9b 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d6e4a:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d6e4e:	4817      	ldr	r0, [pc, #92]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e50:	211d      	movs	r1, #29
   d6e52:	f7ff fe95 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V31, 2); // Which is 100 for the accelerometer
   d6e56:	2202      	movs	r2, #2
   d6e58:	211f      	movs	r1, #31
   d6e5a:	4814      	ldr	r0, [pc, #80]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e5c:	f7ff fc2c 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d6e60:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d6e64:	4811      	ldr	r0, [pc, #68]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e66:	2120      	movs	r1, #32
   d6e68:	f7ff fe8a 	bl	d6b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d6e6c:	4813      	ldr	r0, [pc, #76]	; (d6ebc <BlynkWidgetWrite22+0x1b0>)
   d6e6e:	f002 fc7e 	bl	d976e <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d6e72:	4a13      	ldr	r2, [pc, #76]	; (d6ec0 <BlynkWidgetWrite22+0x1b4>)
   d6e74:	480d      	ldr	r0, [pc, #52]	; (d6eac <BlynkWidgetWrite22+0x1a0>)
   d6e76:	2115      	movs	r1, #21
   d6e78:	f7ff fe58 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    DEBUG_PRINTLN("Hard Resetting");
   d6e7c:	f005 fb48 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6e80:	490f      	ldr	r1, [pc, #60]	; (d6ec0 <BlynkWidgetWrite22+0x1b4>)
   d6e82:	f004 f96c 	bl	db15e <_ZN5Print7printlnEPKc>
    delay(500);
   d6e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6e8a:	f004 fc7b 	bl	db784 <delay>
    System.reset();
   d6e8e:	f003 fee1 	bl	dac54 <_ZN11SystemClass5resetEv>
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d6e92:	4668      	mov	r0, sp
   d6e94:	f003 ff9a 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    DEBUG_PRINTLN("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d6e98:	b004      	add	sp, #16
   d6e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e9e:	bf00      	nop
   d6ea0:	000e70f7 	.word	0x000e70f7
   d6ea4:	2003da40 	.word	0x2003da40
   d6ea8:	000e70b0 	.word	0x000e70b0
   d6eac:	2003e1f4 	.word	0x2003e1f4
   d6eb0:	000e70ff 	.word	0x000e70ff
   d6eb4:	000e7115 	.word	0x000e7115
   d6eb8:	41a00000 	.word	0x41a00000
   d6ebc:	2003d6a8 	.word	0x2003d6a8
   d6ec0:	000e7126 	.word	0x000e7126

000d6ec4 <BlynkOnConnected>:

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d6ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  DEBUG_PRINTLN("Blynk is now connected - syncing all pins.");
   d6ec6:	f005 fb23 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d6eca:	490b      	ldr	r1, [pc, #44]	; (d6ef8 <BlynkOnConnected+0x34>)
   d6ecc:	f004 f947 	bl	db15e <_ZN5Print7printlnEPKc>
  if (state.firstRunCheck != firstRunValue)
   d6ed0:	4b0a      	ldr	r3, [pc, #40]	; (d6efc <BlynkOnConnected+0x38>)
   d6ed2:	681a      	ldr	r2, [r3, #0]
   d6ed4:	4b0a      	ldr	r3, [pc, #40]	; (d6f00 <BlynkOnConnected+0x3c>)
   d6ed6:	681b      	ldr	r3, [r3, #0]
   d6ed8:	429a      	cmp	r2, r3
   d6eda:	d001      	beq.n	d6ee0 <BlynkOnConnected+0x1c>
  {
    initializeAppWidgets();
   d6edc:	f7ff fe7a 	bl	d6bd4 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d6ee0:	2300      	movs	r3, #0
   d6ee2:	9302      	str	r3, [sp, #8]
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	9300      	str	r3, [sp, #0]
   d6ee8:	461a      	mov	r2, r3
   d6eea:	2110      	movs	r1, #16
   d6eec:	4805      	ldr	r0, [pc, #20]	; (d6f04 <BlynkOnConnected+0x40>)
   d6eee:	f7ff faf9 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d6ef2:	b005      	add	sp, #20
   d6ef4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6ef8:	000e7135 	.word	0x000e7135
   d6efc:	2003da40 	.word	0x2003da40
   d6f00:	2003d534 	.word	0x2003d534
   d6f04:	2003e1f4 	.word	0x2003e1f4

000d6f08 <_Z13runExpressionPc>:
    DEBUG_PRINT("Update notifyBattery flag value is: ");
    DEBUG_PRINTLN(state.notifyBattery);
#endif
}
bool runExpression(char *expression)
{   
   d6f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f0c:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
   d6f10:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f12:	2260      	movs	r2, #96	; 0x60
   d6f14:	2100      	movs	r1, #0
   d6f16:	a81c      	add	r0, sp, #112	; 0x70
   d6f18:	f00c fb87 	bl	e362a <memset>
   d6f1c:	4b7e      	ldr	r3, [pc, #504]	; (d7118 <_Z13runExpressionPc+0x210>)
   d6f1e:	931c      	str	r3, [sp, #112]	; 0x70
   d6f20:	4b7e      	ldr	r3, [pc, #504]	; (d711c <_Z13runExpressionPc+0x214>)
   d6f22:	9320      	str	r3, [sp, #128]	; 0x80
   d6f24:	4b7e      	ldr	r3, [pc, #504]	; (d7120 <_Z13runExpressionPc+0x218>)
   d6f26:	9324      	str	r3, [sp, #144]	; 0x90
   d6f28:	4b7e      	ldr	r3, [pc, #504]	; (d7124 <_Z13runExpressionPc+0x21c>)
   d6f2a:	9328      	str	r3, [sp, #160]	; 0xa0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f2c:	4c7e      	ldr	r4, [pc, #504]	; (d7128 <_Z13runExpressionPc+0x220>)
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f2e:	4b7f      	ldr	r3, [pc, #508]	; (d712c <_Z13runExpressionPc+0x224>)
   d6f30:	932c      	str	r3, [sp, #176]	; 0xb0
   d6f32:	4b7f      	ldr	r3, [pc, #508]	; (d7130 <_Z13runExpressionPc+0x228>)
   d6f34:	9330      	str	r3, [sp, #192]	; 0xc0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f36:	7823      	ldrb	r3, [r4, #0]
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6f38:	f10d 0b20 	add.w	fp, sp, #32
   d6f3c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   d6f40:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   d6f44:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   d6f48:	af10      	add	r7, sp, #64	; 0x40
   d6f4a:	ae12      	add	r6, sp, #72	; 0x48
   d6f4c:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   d6f50:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
   d6f54:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   d6f58:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
   d6f5c:	972d      	str	r7, [sp, #180]	; 0xb4
   d6f5e:	9631      	str	r6, [sp, #196]	; 0xc4
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d6f60:	b123      	cbz	r3, d6f6c <_Z13runExpressionPc+0x64>
   d6f62:	462a      	mov	r2, r5
   d6f64:	2115      	movs	r1, #21
   d6f66:	4873      	ldr	r0, [pc, #460]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d6f68:	f7ff fde0 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  // Compile the expression with variables.
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d6f6c:	ab07      	add	r3, sp, #28
   d6f6e:	2206      	movs	r2, #6
   d6f70:	a91c      	add	r1, sp, #112	; 0x70
   d6f72:	4628      	mov	r0, r5
   d6f74:	f7fe f996 	bl	d52a4 <te_compile>

  if (expr) {
   d6f78:	9005      	str	r0, [sp, #20]
   d6f7a:	2800      	cmp	r0, #0
   d6f7c:	f000 809d 	beq.w	d70ba <_Z13runExpressionPc+0x1b2>

      pm1 = (double)Sensor.massPM1;
   d6f80:	4d6d      	ldr	r5, [pc, #436]	; (d7138 <_Z13runExpressionPc+0x230>)
   d6f82:	6868      	ldr	r0, [r5, #4]
   d6f84:	f00b fe58 	bl	e2c38 <__aeabi_f2d>
   d6f88:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d6f8c:	68a8      	ldr	r0, [r5, #8]
   d6f8e:	f00b fe53 	bl	e2c38 <__aeabi_f2d>
   d6f92:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d6f96:	68e8      	ldr	r0, [r5, #12]
   d6f98:	f00b fe4e 	bl	e2c38 <__aeabi_f2d>
   d6f9c:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d6fa0:	6928      	ldr	r0, [r5, #16]
   d6fa2:	f00b fe49 	bl	e2c38 <__aeabi_f2d>
      conc = (double)conc1;
   d6fa6:	4a65      	ldr	r2, [pc, #404]	; (d713c <_Z13runExpressionPc+0x234>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d6fa8:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc1;
   d6fac:	6810      	ldr	r0, [r2, #0]
   d6fae:	f00b fe43 	bl	e2c38 <__aeabi_f2d>
      temp = (double)temp1;
   d6fb2:	4a63      	ldr	r2, [pc, #396]	; (d7140 <_Z13runExpressionPc+0x238>)

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
   d6fb4:	e9c7 0100 	strd	r0, r1, [r7]
      temp = (double)temp1;
   d6fb8:	6810      	ldr	r0, [r2, #0]
   d6fba:	f00b fe3d 	bl	e2c38 <__aeabi_f2d>
      const double h2 = te_eval(expr);
   d6fbe:	9b05      	ldr	r3, [sp, #20]
      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
   d6fc0:	e9c6 0100 	strd	r0, r1, [r6]
      const double h2 = te_eval(expr);
   d6fc4:	4618      	mov	r0, r3
   d6fc6:	f7fd fe57 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6fca:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d6fcc:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6fd0:	b15b      	cbz	r3, d6fea <_Z13runExpressionPc+0xe2>
   d6fd2:	495c      	ldr	r1, [pc, #368]	; (d7144 <_Z13runExpressionPc+0x23c>)
   d6fd4:	a834      	add	r0, sp, #208	; 0xd0
   d6fd6:	f003 ff7f 	bl	daed8 <_ZN6StringC1ERKS_>
   d6fda:	4856      	ldr	r0, [pc, #344]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d6fdc:	aa34      	add	r2, sp, #208	; 0xd0
   d6fde:	2115      	movs	r1, #21
   d6fe0:	f7ff fba6 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6fe4:	a834      	add	r0, sp, #208	; 0xd0
   d6fe6:	f003 fef1 	bl	dadcc <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d6fea:	7823      	ldrb	r3, [r4, #0]
   d6fec:	b333      	cbz	r3, d703c <_Z13runExpressionPc+0x134>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6fee:	ab34      	add	r3, sp, #208	; 0xd0
   d6ff0:	2500      	movs	r5, #0
   d6ff2:	9318      	str	r3, [sp, #96]	; 0x60
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6ff4:	4954      	ldr	r1, [pc, #336]	; (d7148 <_Z13runExpressionPc+0x240>)
   d6ff6:	9519      	str	r5, [sp, #100]	; 0x64
   d6ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6ffc:	a818      	add	r0, sp, #96	; 0x60
   d6ffe:	931a      	str	r3, [sp, #104]	; 0x68
   d7000:	f7fe fa7f 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d7004:	2115      	movs	r1, #21
   d7006:	a818      	add	r0, sp, #96	; 0x60
   d7008:	f7fe fa98 	bl	d553c <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d700c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d700e:	991a      	ldr	r1, [sp, #104]	; 0x68
   d7010:	9818      	ldr	r0, [sp, #96]	; 0x60
   d7012:	4a4e      	ldr	r2, [pc, #312]	; (d714c <_Z13runExpressionPc+0x244>)
   d7014:	1ac9      	subs	r1, r1, r3
   d7016:	4418      	add	r0, r3
   d7018:	e9cd 6700 	strd	r6, r7, [sp]
   d701c:	f003 fd5a 	bl	daad4 <snprintf>
   d7020:	9b19      	ldr	r3, [sp, #100]	; 0x64
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d7022:	9502      	str	r5, [sp, #8]
   d7024:	3001      	adds	r0, #1
   d7026:	4418      	add	r0, r3
   d7028:	9019      	str	r0, [sp, #100]	; 0x64
   d702a:	3801      	subs	r0, #1
   d702c:	9000      	str	r0, [sp, #0]
   d702e:	9501      	str	r5, [sp, #4]
   d7030:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d7032:	4840      	ldr	r0, [pc, #256]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d7034:	462a      	mov	r2, r5
   d7036:	2114      	movs	r1, #20
   d7038:	f7ff fa54 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
   d703c:	7823      	ldrb	r3, [r4, #0]
   d703e:	b15b      	cbz	r3, d7058 <_Z13runExpressionPc+0x150>
   d7040:	4943      	ldr	r1, [pc, #268]	; (d7150 <_Z13runExpressionPc+0x248>)
   d7042:	a834      	add	r0, sp, #208	; 0xd0
   d7044:	f003 ff48 	bl	daed8 <_ZN6StringC1ERKS_>
   d7048:	483a      	ldr	r0, [pc, #232]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d704a:	aa34      	add	r2, sp, #208	; 0xd0
   d704c:	2115      	movs	r1, #21
   d704e:	f7ff fb6f 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7052:	a834      	add	r0, sp, #208	; 0xd0
   d7054:	f003 feba 	bl	dadcc <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);
   d7058:	7823      	ldrb	r3, [r4, #0]
   d705a:	b1eb      	cbz	r3, d7098 <_Z13runExpressionPc+0x190>
   d705c:	493d      	ldr	r1, [pc, #244]	; (d7154 <_Z13runExpressionPc+0x24c>)
   d705e:	a834      	add	r0, sp, #208	; 0xd0
   d7060:	f003 ff3a 	bl	daed8 <_ZN6StringC1ERKS_>
   d7064:	aa34      	add	r2, sp, #208	; 0xd0
   d7066:	2115      	movs	r1, #21
   d7068:	4832      	ldr	r0, [pc, #200]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d706a:	f7ff fb61 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d706e:	a834      	add	r0, sp, #208	; 0xd0
   d7070:	f003 feac 	bl	dadcc <_ZN6StringD1Ev>

      if (h2==1.0)
   d7074:	2200      	movs	r2, #0
   d7076:	4b38      	ldr	r3, [pc, #224]	; (d7158 <_Z13runExpressionPc+0x250>)
   d7078:	4630      	mov	r0, r6
   d707a:	4639      	mov	r1, r7
   d707c:	f00c f898 	bl	e31b0 <__aeabi_dcmpeq>
   d7080:	b190      	cbz	r0, d70a8 <_Z13runExpressionPc+0x1a0>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d7082:	4b29      	ldr	r3, [pc, #164]	; (d7128 <_Z13runExpressionPc+0x220>)
   d7084:	781c      	ldrb	r4, [r3, #0]
   d7086:	b90c      	cbnz	r4, d708c <_Z13runExpressionPc+0x184>
        return true;
   d7088:	2401      	movs	r4, #1
   d708a:	e03f      	b.n	d710c <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d708c:	4a33      	ldr	r2, [pc, #204]	; (d715c <_Z13runExpressionPc+0x254>)
   d708e:	4829      	ldr	r0, [pc, #164]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d7090:	2115      	movs	r1, #21
   d7092:	f7ff fd4b 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d7096:	e039      	b.n	d710c <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
   d7098:	2200      	movs	r2, #0
   d709a:	4b2f      	ldr	r3, [pc, #188]	; (d7158 <_Z13runExpressionPc+0x250>)
   d709c:	4630      	mov	r0, r6
   d709e:	4639      	mov	r1, r7
   d70a0:	f00c f886 	bl	e31b0 <__aeabi_dcmpeq>
   d70a4:	2800      	cmp	r0, #0
   d70a6:	d1ef      	bne.n	d7088 <_Z13runExpressionPc+0x180>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d70a8:	7824      	ldrb	r4, [r4, #0]
   d70aa:	2c00      	cmp	r4, #0
   d70ac:	d02e      	beq.n	d710c <_Z13runExpressionPc+0x204>
   d70ae:	4a2c      	ldr	r2, [pc, #176]	; (d7160 <_Z13runExpressionPc+0x258>)
   d70b0:	4820      	ldr	r0, [pc, #128]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d70b2:	2115      	movs	r1, #21
   d70b4:	f7ff fd3a 	bl	d6b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d70b8:	e027      	b.n	d710a <_Z13runExpressionPc+0x202>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d70ba:	492a      	ldr	r1, [pc, #168]	; (d7164 <_Z13runExpressionPc+0x25c>)
   d70bc:	a834      	add	r0, sp, #208	; 0xd0
   d70be:	f003 fecc 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d70c2:	220a      	movs	r2, #10
   d70c4:	9907      	ldr	r1, [sp, #28]
   d70c6:	a818      	add	r0, sp, #96	; 0x60
   d70c8:	f003 ff3c 	bl	daf44 <_ZN6StringC1Eih>
   d70cc:	a918      	add	r1, sp, #96	; 0x60
   d70ce:	a834      	add	r0, sp, #208	; 0xd0
   d70d0:	f003 ff62 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d70d4:	4601      	mov	r1, r0
   d70d6:	a814      	add	r0, sp, #80	; 0x50
   d70d8:	f003 fefe 	bl	daed8 <_ZN6StringC1ERKS_>
   d70dc:	a818      	add	r0, sp, #96	; 0x60
   d70de:	f003 fe75 	bl	dadcc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d70e2:	a834      	add	r0, sp, #208	; 0xd0
   d70e4:	f003 fe72 	bl	dadcc <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d70e8:	7823      	ldrb	r3, [r4, #0]
   d70ea:	b15b      	cbz	r3, d7104 <_Z13runExpressionPc+0x1fc>
   d70ec:	a914      	add	r1, sp, #80	; 0x50
   d70ee:	a834      	add	r0, sp, #208	; 0xd0
   d70f0:	f003 fef2 	bl	daed8 <_ZN6StringC1ERKS_>
   d70f4:	480f      	ldr	r0, [pc, #60]	; (d7134 <_Z13runExpressionPc+0x22c>)
   d70f6:	aa34      	add	r2, sp, #208	; 0xd0
   d70f8:	2115      	movs	r1, #21
   d70fa:	f7ff fb19 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d70fe:	a834      	add	r0, sp, #208	; 0xd0
   d7100:	f003 fe64 	bl	dadcc <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d7104:	a814      	add	r0, sp, #80	; 0x50
   d7106:	f003 fe61 	bl	dadcc <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d710a:	2400      	movs	r4, #0
  } 
}
   d710c:	4620      	mov	r0, r4
   d710e:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
   d7112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7116:	bf00      	nop
   d7118:	000e7160 	.word	0x000e7160
   d711c:	000e7164 	.word	0x000e7164
   d7120:	000e7168 	.word	0x000e7168
   d7124:	000e716c 	.word	0x000e716c
   d7128:	2003da05 	.word	0x2003da05
   d712c:	000e7171 	.word	0x000e7171
   d7130:	000e7176 	.word	0x000e7176
   d7134:	2003e1f4 	.word	0x2003e1f4
   d7138:	2003e1ac 	.word	0x2003e1ac
   d713c:	2003e11c 	.word	0x2003e11c
   d7140:	2003e228 	.word	0x2003e228
   d7144:	2003de70 	.word	0x2003de70
   d7148:	000e703f 	.word	0x000e703f
   d714c:	000e717b 	.word	0x000e717b
   d7150:	2003e150 	.word	0x2003e150
   d7154:	2003e1e0 	.word	0x2003e1e0
   d7158:	3ff00000 	.word	0x3ff00000
   d715c:	000e7181 	.word	0x000e7181
   d7160:	000e7198 	.word	0x000e7198
   d7164:	000e71b0 	.word	0x000e71b0

000d7168 <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d7168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d716a:	6809      	ldr	r1, [r1, #0]
   d716c:	4668      	mov	r0, sp
   d716e:	f003 fe74 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d7172:	4668      	mov	r0, sp
   d7174:	f003 ff6f 	bl	db056 <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d7178:	9900      	ldr	r1, [sp, #0]
   d717a:	4808      	ldr	r0, [pc, #32]	; (d719c <BlynkWidgetWrite20+0x34>)
   d717c:	f00c fcde 	bl	e3b3c <strcpy>
  saveState();
   d7180:	f7fe fb1c 	bl	d57bc <_Z9saveStatev>
  if (sensorValid)
   d7184:	4b06      	ldr	r3, [pc, #24]	; (d71a0 <BlynkWidgetWrite20+0x38>)
   d7186:	781b      	ldrb	r3, [r3, #0]
   d7188:	b113      	cbz	r3, d7190 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d718a:	4804      	ldr	r0, [pc, #16]	; (d719c <BlynkWidgetWrite20+0x34>)
   d718c:	f7ff febc 	bl	d6f08 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d7190:	4668      	mov	r0, sp
   d7192:	f003 fe1b 	bl	dadcc <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d7196:	b005      	add	sp, #20
   d7198:	f85d fb04 	ldr.w	pc, [sp], #4
   d719c:	2003da50 	.word	0x2003da50
   d71a0:	2003e13c 	.word	0x2003e13c

000d71a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   d71a4:	b530      	push	{r4, r5, lr}
   d71a6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d71aa:	ab08      	add	r3, sp, #32
   d71ac:	2400      	movs	r4, #0
   d71ae:	4605      	mov	r5, r0
   d71b0:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   d71b2:	a805      	add	r0, sp, #20
   d71b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d71b8:	9307      	str	r3, [sp, #28]
   d71ba:	9406      	str	r4, [sp, #24]
   d71bc:	f7fe f9a1 	bl	d5502 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   d71c0:	9b06      	ldr	r3, [sp, #24]
   d71c2:	9402      	str	r4, [sp, #8]
   d71c4:	3b01      	subs	r3, #1
   d71c6:	9300      	str	r3, [sp, #0]
   d71c8:	9401      	str	r4, [sp, #4]
   d71ca:	9b05      	ldr	r3, [sp, #20]
   d71cc:	4622      	mov	r2, r4
   d71ce:	2140      	movs	r1, #64	; 0x40
   d71d0:	4628      	mov	r0, r5
   d71d2:	f7ff f987 	bl	d64e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d71d6:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d71da:	bd30      	pop	{r4, r5, pc}

000d71dc <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d71dc:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d71de:	4b2f      	ldr	r3, [pc, #188]	; (d729c <_Z10checkAccelv+0xc0>)
   d71e0:	4c2f      	ldr	r4, [pc, #188]	; (d72a0 <_Z10checkAccelv+0xc4>)
   d71e2:	781a      	ldrb	r2, [r3, #0]
   d71e4:	461e      	mov	r6, r3
   d71e6:	2a00      	cmp	r2, #0
   d71e8:	d041      	beq.n	d726e <_Z10checkAccelv+0x92>
  {
    DEBUG_PRINTLN("*** ACCEL INTERRUPTED ***");
   d71ea:	f005 f991 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d71ee:	492d      	ldr	r1, [pc, #180]	; (d72a4 <_Z10checkAccelv+0xc8>)
   d71f0:	f003 ffb5 	bl	db15e <_ZN5Print7printlnEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d71f4:	2100      	movs	r1, #0
   d71f6:	482c      	ldr	r0, [pc, #176]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d71f8:	f002 fd66 	bl	d9cc8 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d71fc:	2100      	movs	r1, #0
   d71fe:	482a      	ldr	r0, [pc, #168]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d7200:	f002 fd5c 	bl	d9cbc <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d7204:	4828      	ldr	r0, [pc, #160]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d7206:	f002 fca4 	bl	d9b52 <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d720a:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d720c:	4605      	mov	r5, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d720e:	4601      	mov	r1, r0
   d7210:	4825      	ldr	r0, [pc, #148]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d7212:	f002 fc99 	bl	d9b48 <_ZN7ADXL3459triggeredEhi>
   d7216:	b160      	cbz	r0, d7232 <_Z10checkAccelv+0x56>
      DEBUG_PRINTLN("*** INACTIVITY ***");
   d7218:	f005 f97a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d721c:	4923      	ldr	r1, [pc, #140]	; (d72ac <_Z10checkAccelv+0xd0>)
   d721e:	f003 ff9e 	bl	db15e <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d7222:	2300      	movs	r3, #0
   d7224:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d7226:	f7fe fc8b 	bl	d5b40 <_Z18tamperAlertChangedv>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");
        #endif  */   
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d722a:	2101      	movs	r1, #1
   d722c:	481e      	ldr	r0, [pc, #120]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d722e:	f002 fd45 	bl	d9cbc <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d7232:	2204      	movs	r2, #4
   d7234:	4629      	mov	r1, r5
   d7236:	481c      	ldr	r0, [pc, #112]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d7238:	f002 fc86 	bl	d9b48 <_ZN7ADXL3459triggeredEhi>
   d723c:	b1a8      	cbz	r0, d726a <_Z10checkAccelv+0x8e>
      DEBUG_PRINTLN("*** ACTIVITY ***"); 
   d723e:	f005 f967 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7242:	491b      	ldr	r1, [pc, #108]	; (d72b0 <_Z10checkAccelv+0xd4>)
   d7244:	f003 ff8b 	bl	db15e <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d7248:	2301      	movs	r3, #1
   d724a:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d724c:	f7fe fc78 	bl	d5b40 <_Z18tamperAlertChangedv>
   d7250:	b138      	cbz	r0, d7262 <_Z10checkAccelv+0x86>
      {
        #ifdef Version_2
        if (state.notifyTamper==true)
   d7252:	4b18      	ldr	r3, [pc, #96]	; (d72b4 <_Z10checkAccelv+0xd8>)
   d7254:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
   d7258:	b11b      	cbz	r3, d7262 <_Z10checkAccelv+0x86>
          Blynk.logEvent("tamper_alert");
   d725a:	4917      	ldr	r1, [pc, #92]	; (d72b8 <_Z10checkAccelv+0xdc>)
   d725c:	4817      	ldr	r0, [pc, #92]	; (d72bc <_Z10checkAccelv+0xe0>)
   d725e:	f7ff ffa1 	bl	d71a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");
        #endif      
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d7262:	2101      	movs	r1, #1
   d7264:	4810      	ldr	r0, [pc, #64]	; (d72a8 <_Z10checkAccelv+0xcc>)
   d7266:	f002 fd2f 	bl	d9cc8 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d726a:	2300      	movs	r3, #0
   d726c:	7033      	strb	r3, [r6, #0]
  }

// Only buzzer for tamper 
  if ((tamperCurrentAlert==false)&&(!VapeBuzzerOn))
   d726e:	7823      	ldrb	r3, [r4, #0]
   d7270:	b933      	cbnz	r3, d7280 <_Z10checkAccelv+0xa4>
   d7272:	4b13      	ldr	r3, [pc, #76]	; (d72c0 <_Z10checkAccelv+0xe4>)
   d7274:	7819      	ldrb	r1, [r3, #0]
   d7276:	b919      	cbnz	r1, d7280 <_Z10checkAccelv+0xa4>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d7278:	4b12      	ldr	r3, [pc, #72]	; (d72c4 <_Z10checkAccelv+0xe8>)
   d727a:	8818      	ldrh	r0, [r3, #0]
   d727c:	f005 fe5f 	bl	dcf3e <digitalWrite>
  }

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
   d7280:	7823      	ldrb	r3, [r4, #0]
   d7282:	b153      	cbz	r3, d729a <_Z10checkAccelv+0xbe>
   d7284:	4b0b      	ldr	r3, [pc, #44]	; (d72b4 <_Z10checkAccelv+0xd8>)
   d7286:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
   d728a:	b133      	cbz	r3, d729a <_Z10checkAccelv+0xbe>
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d728c:	4b0d      	ldr	r3, [pc, #52]	; (d72c4 <_Z10checkAccelv+0xe8>)
   d728e:	2101      	movs	r1, #1
   d7290:	8818      	ldrh	r0, [r3, #0]
  }

}
   d7292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d7296:	f005 be52 	b.w	dcf3e <digitalWrite>
   d729a:	bd70      	pop	{r4, r5, r6, pc}
   d729c:	2003de84 	.word	0x2003de84
   d72a0:	2003de8c 	.word	0x2003de8c
   d72a4:	000e71c2 	.word	0x000e71c2
   d72a8:	2003da08 	.word	0x2003da08
   d72ac:	000e71dc 	.word	0x000e71dc
   d72b0:	000e71ef 	.word	0x000e71ef
   d72b4:	2003da40 	.word	0x2003da40
   d72b8:	000e7200 	.word	0x000e7200
   d72bc:	2003e1f4 	.word	0x2003e1f4
   d72c0:	2003d7b8 	.word	0x2003d7b8
   d72c4:	2003d52c 	.word	0x2003d52c

000d72c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:

    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d72c8:	b570      	push	{r4, r5, r6, lr}
   d72ca:	4604      	mov	r4, r0
   d72cc:	6800      	ldr	r0, [r0, #0]
   d72ce:	460e      	mov	r6, r1
   d72d0:	f005 fc8a 	bl	dcbe8 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        state = CONNECTING;
   d72d4:	2300      	movs	r3, #0
   d72d6:	7763      	strb	r3, [r4, #29]
        millis_time_t started = BlynkMillis();
   d72d8:	f003 f85c 	bl	da394 <_Z11BlynkMillisv>
   d72dc:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d72de:	7f63      	ldrb	r3, [r4, #29]
   d72e0:	2b01      	cmp	r3, #1
   d72e2:	d009      	beq.n	d72f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
   d72e4:	f003 f856 	bl	da394 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d72e8:	1b40      	subs	r0, r0, r5
   d72ea:	42b0      	cmp	r0, r6
   d72ec:	d204      	bcs.n	d72f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
        {
            run();
   d72ee:	2100      	movs	r1, #0
   d72f0:	4620      	mov	r0, r4
   d72f2:	f7ff f82b 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d72f6:	e7f2      	b.n	d72de <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
               (BlynkMillis() - started < timeout))
        {
            run();
        }
        return state == CONNECTED;
   d72f8:	7f60      	ldrb	r0, [r4, #29]
    }
   d72fa:	1e43      	subs	r3, r0, #1
   d72fc:	4258      	negs	r0, r3
   d72fe:	4158      	adcs	r0, r3
   d7300:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7304 <_Z7connectv>:
    
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d7304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  #if Wiring_Cellular
  bool cellready=Cellular.ready();
   d7306:	4d55      	ldr	r5, [pc, #340]	; (d745c <_Z7connectv+0x158>)
   d7308:	4628      	mov	r0, r5
   d730a:	f7fe f896 	bl	d543a <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d730e:	4604      	mov	r4, r0
   d7310:	bb30      	cbnz	r0, d7360 <_Z7connectv+0x5c>
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
   d7312:	f005 f8fd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7316:	4952      	ldr	r1, [pc, #328]	; (d7460 <_Z7connectv+0x15c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7318:	4e52      	ldr	r6, [pc, #328]	; (d7464 <_Z7connectv+0x160>)
   d731a:	f003 ff20 	bl	db15e <_ZN5Print7printlnEPKc>
    Cellular.on();
   d731e:	4628      	mov	r0, r5
   d7320:	f7fe f885 	bl	d542e <_ZN5spark13CellularClass2onEv>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7324:	4623      	mov	r3, r4
   d7326:	4622      	mov	r2, r4
   d7328:	4621      	mov	r1, r4
   d732a:	6868      	ldr	r0, [r5, #4]
   d732c:	f003 fb22 	bl	da974 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7330:	4620      	mov	r0, r4
   d7332:	f003 f8f7 	bl	da524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7336:	2500      	movs	r5, #0
   d7338:	4604      	mov	r4, r0
   d733a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d733c:	2000      	movs	r0, #0
   d733e:	f003 f8f1 	bl	da524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7342:	1b00      	subs	r0, r0, r4
   d7344:	eb61 0105 	sbc.w	r1, r1, r5
   d7348:	428f      	cmp	r7, r1
   d734a:	bf08      	it	eq
   d734c:	4286      	cmpeq	r6, r0
   d734e:	d35f      	bcc.n	d7410 <_Z7connectv+0x10c>
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d7350:	4842      	ldr	r0, [pc, #264]	; (d745c <_Z7connectv+0x158>)
   d7352:	f7fe f872 	bl	d543a <_ZN5spark13CellularClass5readyEv>
   d7356:	2800      	cmp	r0, #0
   d7358:	d15a      	bne.n	d7410 <_Z7connectv+0x10c>
            spark_process();
   d735a:	f003 fb5b 	bl	daa14 <spark_process>
   d735e:	e7ed      	b.n	d733c <_Z7connectv+0x38>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d7360:	f005 f8d6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7364:	4940      	ldr	r1, [pc, #256]	; (d7468 <_Z7connectv+0x164>)
   d7366:	f003 fefa 	bl	db15e <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d736a:	f003 fb63 	bl	daa34 <spark_cloud_flag_connected>
    DEBUG_PRINTLN("WiFi ready");
  }
  #endif  
//*** Commented out for testing without particle connected ***
  bool partconnected=Particle.connected();
  if (!partconnected)
   d736e:	4604      	mov	r4, r0
   d7370:	b9f8      	cbnz	r0, d73b2 <_Z7connectv+0xae>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d7372:	f005 f8cd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7376:	493d      	ldr	r1, [pc, #244]	; (d746c <_Z7connectv+0x168>)
   d7378:	f003 fef1 	bl	db15e <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d737c:	f003 fb52 	bl	daa24 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7380:	4620      	mov	r0, r4
   d7382:	f003 f8cf 	bl	da524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7386:	2500      	movs	r5, #0
   d7388:	4604      	mov	r4, r0
   d738a:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d738e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7390:	2000      	movs	r0, #0
   d7392:	f003 f8c7 	bl	da524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7396:	1b00      	subs	r0, r0, r4
   d7398:	eb61 0105 	sbc.w	r1, r1, r5
   d739c:	428f      	cmp	r7, r1
   d739e:	bf08      	it	eq
   d73a0:	4286      	cmpeq	r6, r0
   d73a2:	d348      	bcc.n	d7436 <_Z7connectv+0x132>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73a4:	f003 fb46 	bl	daa34 <spark_cloud_flag_connected>
   d73a8:	2800      	cmp	r0, #0
   d73aa:	d144      	bne.n	d7436 <_Z7connectv+0x132>
            spark_process();
   d73ac:	f003 fb32 	bl	daa14 <spark_process>
   d73b0:	e7ee      	b.n	d7390 <_Z7connectv+0x8c>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d73b2:	f005 f8ad 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d73b6:	492e      	ldr	r1, [pc, #184]	; (d7470 <_Z7connectv+0x16c>)
   d73b8:	f003 fed1 	bl	db15e <_ZN5Print7printlnEPKc>
   d73bc:	4c2d      	ldr	r4, [pc, #180]	; (d7474 <_Z7connectv+0x170>)
  }
//*** Commented out for testing without particle connected ***
  bool blynkconnected=Blynk.connected();
  if (!blynkconnected)
   d73be:	7f63      	ldrb	r3, [r4, #29]
   d73c0:	2b01      	cmp	r3, #1
   d73c2:	d01e      	beq.n	d7402 <_Z7connectv+0xfe>
  {
    DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d73c4:	f005 f8a4 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d73c8:	492b      	ldr	r1, [pc, #172]	; (d7478 <_Z7connectv+0x174>)
   d73ca:	f003 fec8 	bl	db15e <_ZN5Print7printlnEPKc>
    #ifdef Version_2
    Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d73ce:	4b2b      	ldr	r3, [pc, #172]	; (d747c <_Z7connectv+0x178>)
   d73d0:	492b      	ldr	r1, [pc, #172]	; (d7480 <_Z7connectv+0x17c>)
   d73d2:	881b      	ldrh	r3, [r3, #0]
   d73d4:	4a2b      	ldr	r2, [pc, #172]	; (d7484 <_Z7connectv+0x180>)
   d73d6:	4620      	mov	r0, r4
   d73d8:	f7fe f940 	bl	d565c <_ZN13BlynkParticle6configEPKcS1_t>
    #else
    Blynk.config(auth, "zeptosense.blynk.cc");
    #endif
    if (!Blynk.connect())
   d73dc:	f242 3128 	movw	r1, #9000	; 0x2328
   d73e0:	4620      	mov	r0, r4
   d73e2:	f7ff ff71 	bl	d72c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d73e6:	2800      	cmp	r0, #0
   d73e8:	d136      	bne.n	d7458 <_Z7connectv+0x154>
    {
      DEBUG_PRINTLN("Blynk not connected");
   d73ea:	f005 f891 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d73ee:	4926      	ldr	r1, [pc, #152]	; (d7488 <_Z7connectv+0x184>)
   d73f0:	f003 feb5 	bl	db15e <_ZN5Print7printlnEPKc>
      delay(200);
   d73f4:	20c8      	movs	r0, #200	; 0xc8
   d73f6:	f004 f9c5 	bl	db784 <delay>
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
  }
}
   d73fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!Blynk.connect())
    {
      DEBUG_PRINTLN("Blynk not connected");
      delay(200);
      // timerSleep(3);
      System.reset();      
   d73fe:	f003 bc29 	b.w	dac54 <_ZN11SystemClass5resetEv>
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d7402:	f005 f885 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7406:	4921      	ldr	r1, [pc, #132]	; (d748c <_Z7connectv+0x188>)
  }
}
   d7408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();      
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d740c:	f003 bea7 	b.w	db15e <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d7410:	4812      	ldr	r0, [pc, #72]	; (d745c <_Z7connectv+0x158>)
   d7412:	f7fe f812 	bl	d543a <_ZN5spark13CellularClass5readyEv>
    if (!Cellular.ready())
   d7416:	4811      	ldr	r0, [pc, #68]	; (d745c <_Z7connectv+0x158>)
   d7418:	f7fe f80f 	bl	d543a <_ZN5spark13CellularClass5readyEv>
   d741c:	2800      	cmp	r0, #0
   d741e:	d1a4      	bne.n	d736a <_Z7connectv+0x66>
    {
    DEBUG_PRINTLN("Cellular not ready");
   d7420:	f005 f876 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7424:	491a      	ldr	r1, [pc, #104]	; (d7490 <_Z7connectv+0x18c>)
   d7426:	f003 fe9a 	bl	db15e <_ZN5Print7printlnEPKc>
    delay(200);
   d742a:	20c8      	movs	r0, #200	; 0xc8
   d742c:	f004 f9aa 	bl	db784 <delay>
    // timerSleep(3);
    System.reset();
   d7430:	f003 fc10 	bl	dac54 <_ZN11SystemClass5resetEv>
   d7434:	e799      	b.n	d736a <_Z7connectv+0x66>
   d7436:	f003 fafd 	bl	daa34 <spark_cloud_flag_connected>
   d743a:	f003 fafb 	bl	daa34 <spark_cloud_flag_connected>
  if (!partconnected)
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d743e:	2800      	cmp	r0, #0
   d7440:	d1bc      	bne.n	d73bc <_Z7connectv+0xb8>
    {
      DEBUG_PRINTLN("Particle not connected");
   d7442:	f005 f865 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7446:	4913      	ldr	r1, [pc, #76]	; (d7494 <_Z7connectv+0x190>)
   d7448:	f003 fe89 	bl	db15e <_ZN5Print7printlnEPKc>
      delay(200);
   d744c:	20c8      	movs	r0, #200	; 0xc8
   d744e:	f004 f999 	bl	db784 <delay>
      // timerSleep(3);
      System.reset();
   d7452:	f003 fbff 	bl	dac54 <_ZN11SystemClass5resetEv>
   d7456:	e7b1      	b.n	d73bc <_Z7connectv+0xb8>
   d7458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d745a:	bf00      	nop
   d745c:	2003e2ac 	.word	0x2003e2ac
   d7460:	000e720d 	.word	0x000e720d
   d7464:	0002bf1f 	.word	0x0002bf1f
   d7468:	000e722f 	.word	0x000e722f
   d746c:	000e723e 	.word	0x000e723e
   d7470:	000e727a 	.word	0x000e727a
   d7474:	2003e1f4 	.word	0x2003e1f4
   d7478:	000e728d 	.word	0x000e728d
   d747c:	2003d530 	.word	0x2003d530
   d7480:	2003d53c 	.word	0x2003d53c
   d7484:	000e72af 	.word	0x000e72af
   d7488:	000e6e8d 	.word	0x000e6e8d
   d748c:	000e72c4 	.word	0x000e72c4
   d7490:	000e6e7a 	.word	0x000e6e7a
   d7494:	000e7263 	.word	0x000e7263

000d7498 <_Z21connectWithoutWaitingv>:
    DEBUG_PRINTLN("Blynk connected");
  }
}

void connectWithoutWaiting()
{
   d7498:	b570      	push	{r4, r5, r6, lr}
  #if Wiring_Cellular
  bool cellready=Cellular.ready();
   d749a:	4c2e      	ldr	r4, [pc, #184]	; (d7554 <_Z21connectWithoutWaitingv+0xbc>)
   d749c:	4620      	mov	r0, r4
   d749e:	f7fd ffcc 	bl	d543a <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d74a2:	4605      	mov	r5, r0
   d74a4:	b9e0      	cbnz	r0, d74e0 <_Z21connectWithoutWaitingv+0x48>
  {
    DEBUG_PRINTLN("Cellular not ready");
   d74a6:	f005 f833 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d74aa:	492b      	ldr	r1, [pc, #172]	; (d7558 <_Z21connectWithoutWaitingv+0xc0>)
   d74ac:	f003 fe57 	bl	db15e <_ZN5Print7printlnEPKc>
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d74b0:	462a      	mov	r2, r5
   d74b2:	4629      	mov	r1, r5
   d74b4:	6860      	ldr	r0, [r4, #4]
   d74b6:	f003 fa65 	bl	da984 <network_connecting>
    if (!Cellular.connecting())
   d74ba:	4605      	mov	r5, r0
   d74bc:	2800      	cmp	r0, #0
   d74be:	d148      	bne.n	d7552 <_Z21connectWithoutWaitingv+0xba>
    {
      DEBUG_PRINTLN("Attempting to connect cellular...");
   d74c0:	f005 f826 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d74c4:	4925      	ldr	r1, [pc, #148]	; (d755c <_Z21connectWithoutWaitingv+0xc4>)
   d74c6:	f003 fe4a 	bl	db15e <_ZN5Print7printlnEPKc>
      Cellular.on();
   d74ca:	4620      	mov	r0, r4
   d74cc:	f7fd ffaf 	bl	d542e <_ZN5spark13CellularClass2onEv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d74d0:	462b      	mov	r3, r5
   d74d2:	462a      	mov	r2, r5
   d74d4:	4629      	mov	r1, r5
   d74d6:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d74d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d74dc:	f003 ba4a 	b.w	da974 <network_connect>
   d74e0:	4c1f      	ldr	r4, [pc, #124]	; (d7560 <_Z21connectWithoutWaitingv+0xc8>)
  }
  #endif
  else
  {
    #if Wiring_Cellular
    DEBUG_PRINTLN("Cellular ready");
   d74e2:	f005 f815 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d74e6:	491f      	ldr	r1, [pc, #124]	; (d7564 <_Z21connectWithoutWaitingv+0xcc>)
   d74e8:	f003 fe39 	bl	db15e <_ZN5Print7printlnEPKc>
    #endif
    #if Wiring_WiFi
    DEBUG_PRINTLN("WiFi ready");
    #endif    
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d74ec:	7f63      	ldrb	r3, [r4, #29]
   d74ee:	2b01      	cmp	r3, #1
   d74f0:	d012      	beq.n	d7518 <_Z21connectWithoutWaitingv+0x80>
    {
      DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d74f2:	f005 f80d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d74f6:	491c      	ldr	r1, [pc, #112]	; (d7568 <_Z21connectWithoutWaitingv+0xd0>)
   d74f8:	f003 fe31 	bl	db15e <_ZN5Print7printlnEPKc>

      Blynk.run();
   d74fc:	2100      	movs	r1, #0
   d74fe:	4620      	mov	r0, r4
   d7500:	f7fe ff24 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
      if (!Blynk.connect())
   d7504:	f242 3128 	movw	r1, #9000	; 0x2328
   d7508:	4620      	mov	r0, r4
   d750a:	f7ff fedd 	bl	d72c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d750e:	b940      	cbnz	r0, d7522 <_Z21connectWithoutWaitingv+0x8a>
      {
        DEBUG_PRINTLN("Blynk not connected");
   d7510:	f004 fffe 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7514:	4915      	ldr	r1, [pc, #84]	; (d756c <_Z21connectWithoutWaitingv+0xd4>)
   d7516:	e002      	b.n	d751e <_Z21connectWithoutWaitingv+0x86>
      }
    }
    else
    {
      DEBUG_PRINTLN("Blynk connected");
   d7518:	f004 fffa 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d751c:	4914      	ldr	r1, [pc, #80]	; (d7570 <_Z21connectWithoutWaitingv+0xd8>)
   d751e:	f003 fe1e 	bl	db15e <_ZN5Print7printlnEPKc>
   d7522:	f003 fa87 	bl	daa34 <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***
    bool partconnected=Particle.connected();
    if (!partconnected)
   d7526:	b968      	cbnz	r0, d7544 <_Z21connectWithoutWaitingv+0xac>
    {
      DEBUG_PRINTLN("Attempting to connect to Particle...");
   d7528:	f004 fff2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d752c:	4911      	ldr	r1, [pc, #68]	; (d7574 <_Z21connectWithoutWaitingv+0xdc>)
   d752e:	f003 fe16 	bl	db15e <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7532:	f003 fa77 	bl	daa24 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7536:	f003 fa7d 	bl	daa34 <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d753a:	b950      	cbnz	r0, d7552 <_Z21connectWithoutWaitingv+0xba>
      {
        DEBUG_PRINTLN("Particle not connected");
   d753c:	f004 ffe8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7540:	490d      	ldr	r1, [pc, #52]	; (d7578 <_Z21connectWithoutWaitingv+0xe0>)
   d7542:	e002      	b.n	d754a <_Z21connectWithoutWaitingv+0xb2>
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d7544:	f004 ffe4 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7548:	490c      	ldr	r1, [pc, #48]	; (d757c <_Z21connectWithoutWaitingv+0xe4>)
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d754a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DEBUG_PRINTLN("Particle not connected");
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d754e:	f003 be06 	b.w	db15e <_ZN5Print7printlnEPKc>
   d7552:	bd70      	pop	{r4, r5, r6, pc}
   d7554:	2003e2ac 	.word	0x2003e2ac
   d7558:	000e6e7a 	.word	0x000e6e7a
   d755c:	000e720d 	.word	0x000e720d
   d7560:	2003e1f4 	.word	0x2003e1f4
   d7564:	000e722f 	.word	0x000e722f
   d7568:	000e728d 	.word	0x000e728d
   d756c:	000e6e8d 	.word	0x000e6e8d
   d7570:	000e72c4 	.word	0x000e72c4
   d7574:	000e723e 	.word	0x000e723e
   d7578:	000e7263 	.word	0x000e7263
   d757c:	000e727a 	.word	0x000e727a

000d7580 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d7580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7584:	ed2d 8b02 	vpush	{d8}
   d7588:	b0a5      	sub	sp, #148	; 0x94
  DEBUG_PRINTLN("start readSensors");
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
  DEBUG_PRINTLN(state.buzzerTamper);
   d758a:	4ca5      	ldr	r4, [pc, #660]	; (d7820 <_Z11readSensorsv+0x2a0>)

///////////////////////

void readSensors()
{
  DEBUG_PRINTLN("start readSensors");
   d758c:	f004 ffc0 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7590:	49a4      	ldr	r1, [pc, #656]	; (d7824 <_Z11readSensorsv+0x2a4>)
   d7592:	f003 fde4 	bl	db15e <_ZN5Print7printlnEPKc>
#ifdef KURTDEBUG
  DEBUG_PRINT("State values are: Buzzer Tamper ");
   d7596:	f004 ffbb 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d759a:	49a3      	ldr	r1, [pc, #652]	; (d7828 <_Z11readSensorsv+0x2a8>)
   d759c:	f003 fdcc 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerTamper);
   d75a0:	f004 ffb6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75a4:	220a      	movs	r2, #10
   d75a6:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d75aa:	f003 fe55 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Buzzer Vapor ");
   d75ae:	f004 ffaf 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75b2:	499e      	ldr	r1, [pc, #632]	; (d782c <_Z11readSensorsv+0x2ac>)
   d75b4:	f003 fdc0 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.buzzerVapor);
   d75b8:	f004 ffaa 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75bc:	220a      	movs	r2, #10
   d75be:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d75c2:	f003 fe49 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Vapor ");
   d75c6:	f004 ffa3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75ca:	4999      	ldr	r1, [pc, #612]	; (d7830 <_Z11readSensorsv+0x2b0>)
   d75cc:	f003 fdb4 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyVapor);
   d75d0:	f004 ff9e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75d4:	220a      	movs	r2, #10
   d75d6:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d75da:	f003 fe3d 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Tamper ");
   d75de:	f004 ff97 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75e2:	4994      	ldr	r1, [pc, #592]	; (d7834 <_Z11readSensorsv+0x2b4>)
   d75e4:	f003 fda8 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyTamper);
   d75e8:	f004 ff92 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75ec:	220a      	movs	r2, #10
   d75ee:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d75f2:	f003 fe31 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Notify Battery ");
   d75f6:	f004 ff8b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d75fa:	498f      	ldr	r1, [pc, #572]	; (d7838 <_Z11readSensorsv+0x2b8>)
   d75fc:	f003 fd9c 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.notifyBattery);
   d7600:	f004 ff86 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7604:	220a      	movs	r2, #10
   d7606:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d760a:	f003 fe25 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Activity Threshold ");
   d760e:	f004 ff7f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7612:	498a      	ldr	r1, [pc, #552]	; (d783c <_Z11readSensorsv+0x2bc>)
   d7614:	f003 fd90 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.ActivityThreshold);
   d7618:	f004 ff7a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d761c:	220a      	movs	r2, #10
   d761e:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d7622:	f003 fe19 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINT("Device Zone ");
   d7626:	f004 ff73 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d762a:	4985      	ldr	r1, [pc, #532]	; (d7840 <_Z11readSensorsv+0x2c0>)
   d762c:	f003 fd84 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(state.deviceZone);
   d7630:	f004 ff6e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7634:	220a      	movs	r2, #10
   d7636:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d763a:	f003 fe0d 	bl	db258 <_ZN5Print7printlnEii>
#endif 
  // Woke up out of a sleep - setup the HW
  if (state.bInSleepMode){
   d763e:	f894 3425 	ldrb.w	r3, [r4, #1061]	; 0x425
   d7642:	4625      	mov	r5, r4
   d7644:	2b00      	cmp	r3, #0
   d7646:	f000 81f8 	beq.w	d7a3a <_Z11readSensorsv+0x4ba>
    
    Wire.setSpeed(20000);
   d764a:	f005 fd03 	bl	dd054 <_Z19__fetch_global_Wirev>
   d764e:	f644 6120 	movw	r1, #20000	; 0x4e20
   d7652:	f004 ffd5 	bl	dc600 <_ZN7TwoWire8setSpeedEm>
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
   d7656:	2103      	movs	r1, #3
   d7658:	2008      	movs	r0, #8
   d765a:	f005 fc5f 	bl	dcf1c <pinMode>
    Serial.begin(115200);
   d765e:	f004 fe29 	bl	dc2b4 <_Z16_fetch_usbserialv>
   d7662:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7666:	f004 fe19 	bl	dc29c <_ZN9USBSerial5beginEl>
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
    delay(100);

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d766a:	4c76      	ldr	r4, [pc, #472]	; (d7844 <_Z11readSensorsv+0x2c4>)
    Wire.setSpeed(20000);
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
    Serial.begin(115200);
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
   d766c:	f004 ff50 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7670:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7674:	f004 ff46 	bl	dc504 <_ZN11USARTSerial5beginEm>
    delay(100);
   d7678:	2064      	movs	r0, #100	; 0x64
   d767a:	f004 f883 	bl	db784 <delay>

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d767e:	2101      	movs	r1, #1
   d7680:	8820      	ldrh	r0, [r4, #0]
   d7682:	f005 fc4b 	bl	dcf1c <pinMode>
    digitalWrite(buzzer, LOW);
   d7686:	2100      	movs	r1, #0
   d7688:	8820      	ldrh	r0, [r4, #0]
   d768a:	f005 fc58 	bl	dcf3e <digitalWrite>

    Wire.begin();
   d768e:	f005 fce1 	bl	dd054 <_Z19__fetch_global_Wirev>
   d7692:	f004 ffb9 	bl	dc608 <_ZN7TwoWire5beginEv>
    delay(100);
   d7696:	2064      	movs	r0, #100	; 0x64
   d7698:	f004 f874 	bl	db784 <delay>
    DEBUG_PRINTLN("Start Setup section after a sleep");
   d769c:	f004 ff38 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d76a0:	4969      	ldr	r1, [pc, #420]	; (d7848 <_Z11readSensorsv+0x2c8>)
   d76a2:	f003 fd5c 	bl	db15e <_ZN5Print7printlnEPKc>
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    byte expandererror, expanderaddress;

    expanderaddress = 0x20; // MCP23017 address
    Wire.beginTransmission(expanderaddress);
   d76a6:	f005 fcd5 	bl	dd054 <_Z19__fetch_global_Wirev>
   d76aa:	2120      	movs	r1, #32
   d76ac:	f004 ffcc 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d76b0:	f005 fcd0 	bl	dd054 <_Z19__fetch_global_Wirev>
   d76b4:	f004 ffd3 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!expandererror==0)
   d76b8:	2800      	cmp	r0, #0
   d76ba:	d041      	beq.n	d7740 <_Z11readSensorsv+0x1c0>
    {
      Wire.reset();
   d76bc:	f005 fcca 	bl	dd054 <_Z19__fetch_global_Wirev>
   d76c0:	f004 ffd4 	bl	dc66c <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(expanderaddress);
   d76c4:	f005 fcc6 	bl	dd054 <_Z19__fetch_global_Wirev>
   d76c8:	2120      	movs	r1, #32
   d76ca:	f004 ffbd 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
      expandererror = Wire.endTransmission();
   d76ce:	f005 fcc1 	bl	dd054 <_Z19__fetch_global_Wirev>
   d76d2:	f004 ffc4 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
    }

    // Blink LED and reset if there is an error
    if (!expandererror == 0)
   d76d6:	b398      	cbz	r0, d7740 <_Z11readSensorsv+0x1c0>
    {
      DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d76d8:	f004 ff1a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d76dc:	495b      	ldr	r1, [pc, #364]	; (d784c <_Z11readSensorsv+0x2cc>)
   d76de:	f003 fd3e 	bl	db15e <_ZN5Print7printlnEPKc>
   d76e2:	4b5b      	ldr	r3, [pc, #364]	; (d7850 <_Z11readSensorsv+0x2d0>)
      Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d76e4:	4a59      	ldr	r2, [pc, #356]	; (d784c <_Z11readSensorsv+0x2cc>)
   d76e6:	781b      	ldrb	r3, [r3, #0]
   d76e8:	495a      	ldr	r1, [pc, #360]	; (d7854 <_Z11readSensorsv+0x2d4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d76ea:	2400      	movs	r4, #0
   d76ec:	a81a      	add	r0, sp, #104	; 0x68
   d76ee:	f88d 4000 	strb.w	r4, [sp]
   d76f2:	f7fd fe8f 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
   d76f6:	a81b      	add	r0, sp, #108	; 0x6c
   d76f8:	f7fe fa36 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      blinkRed.setActive(true);
   d76fc:	2101      	movs	r1, #1
   d76fe:	4856      	ldr	r0, [pc, #344]	; (d7858 <_Z11readSensorsv+0x2d8>)
   d7700:	f7fd fecc 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7704:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7708:	f004 f83c 	bl	db784 <delay>
      blinkRed.setActive(false);
   d770c:	4621      	mov	r1, r4
   d770e:	4852      	ldr	r0, [pc, #328]	; (d7858 <_Z11readSensorsv+0x2d8>)
   d7710:	f7fd fec4 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      blinkYellow.setActive(true);
   d7714:	2101      	movs	r1, #1
   d7716:	4851      	ldr	r0, [pc, #324]	; (d785c <_Z11readSensorsv+0x2dc>)
   d7718:	f7fd fec0 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d771c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7720:	f004 f830 	bl	db784 <delay>
      blinkYellow.setActive(false);
   d7724:	4621      	mov	r1, r4
   d7726:	484d      	ldr	r0, [pc, #308]	; (d785c <_Z11readSensorsv+0x2dc>)
   d7728:	f7fd feb8 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      blinkRed.setActive(true);
   d772c:	2101      	movs	r1, #1
   d772e:	484a      	ldr	r0, [pc, #296]	; (d7858 <_Z11readSensorsv+0x2d8>)
   d7730:	f7fd feb4 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7734:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7738:	f004 f824 	bl	db784 <delay>
      System.reset();
   d773c:	f003 fa8a 	bl	dac54 <_ZN11SystemClass5resetEv>
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7740:	4847      	ldr	r0, [pc, #284]	; (d7860 <_Z11readSensorsv+0x2e0>)
   d7742:	f8df 8134 	ldr.w	r8, [pc, #308]	; d7878 <_Z11readSensorsv+0x2f8>

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d7746:	4f47      	ldr	r7, [pc, #284]	; (d7864 <_Z11readSensorsv+0x2e4>)
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7748:	f002 f82c 	bl	d97a4 <_ZN12IoTNodePower5beginEv>
    power.setPowerON(EXT3V3,true);
   d774c:	2201      	movs	r2, #1
   d774e:	2102      	movs	r1, #2
   d7750:	4843      	ldr	r0, [pc, #268]	; (d7860 <_Z11readSensorsv+0x2e0>)
   d7752:	f002 f8d1 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    power.setPowerON(EXT5V,true);
   d7756:	2201      	movs	r2, #1
   d7758:	2103      	movs	r1, #3
   d775a:	4841      	ldr	r0, [pc, #260]	; (d7860 <_Z11readSensorsv+0x2e0>)
   d775c:	f002 f8cc 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
    // Allow time to settle
    delay(100);
   d7760:	2064      	movs	r0, #100	; 0x64
   d7762:	f004 f80f 	bl	db784 <delay>

    uint32_t d1=0;
   d7766:	aa24      	add	r2, sp, #144	; 0x90
   d7768:	2400      	movs	r4, #0
   d776a:	f842 4d38 	str.w	r4, [r2, #-56]!
    fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d776e:	2304      	movs	r3, #4
   d7770:	4621      	mov	r1, r4
   d7772:	483d      	ldr	r0, [pc, #244]	; (d7868 <_Z11readSensorsv+0x2e8>)
   d7774:	f001 ff7a 	bl	d966c <_ZN10MB85RC256V8readDataEjPhj>
    Serial1.printlnf("d1=%u", d1);
   d7778:	f004 feca 	bl	dc510 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d777c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d777e:	4a3b      	ldr	r2, [pc, #236]	; (d786c <_Z11readSensorsv+0x2ec>)
   d7780:	2101      	movs	r1, #1
   d7782:	f003 fe33 	bl	db3ec <_ZN5Print11printf_implEbPKcz>

    DEBUG_PRINTLN("Checking i2c devices...");
   d7786:	f004 fec3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d778a:	4939      	ldr	r1, [pc, #228]	; (d7870 <_Z11readSensorsv+0x2f0>)
   d778c:	f003 fce7 	bl	db15e <_ZN5Print7printlnEPKc>

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d7790:	4b34      	ldr	r3, [pc, #208]	; (d7864 <_Z11readSensorsv+0x2e4>)
   d7792:	4938      	ldr	r1, [pc, #224]	; (d7874 <_Z11readSensorsv+0x2f4>)
   d7794:	4838      	ldr	r0, [pc, #224]	; (d7878 <_Z11readSensorsv+0x2f8>)
   d7796:	2207      	movs	r2, #7
   d7798:	f7fd ff7a 	bl	d5690 <_Z15checkI2CDevicesP6StringPhjPb>
   d779c:	4606      	mov	r6, r0

    for (size_t x=0; x<i2cLength;++x)
    {
      DEBUG_PRINT(i2cNames[x]);
   d779e:	f004 feb7 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d77a2:	0123      	lsls	r3, r4, #4
   d77a4:	f853 1008 	ldr.w	r1, [r3, r8]
   d77a8:	f003 fcc6 	bl	db138 <_ZN5Print5printEPKc>
      DEBUG_PRINT(": ");
   d77ac:	f004 feb0 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d77b0:	4932      	ldr	r1, [pc, #200]	; (d787c <_Z11readSensorsv+0x2fc>)
   d77b2:	f003 fcc1 	bl	db138 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(i2cExists[x]);
   d77b6:	f004 feab 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d77ba:	5d39      	ldrb	r1, [r7, r4]
   d77bc:	220a      	movs	r2, #10

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d77be:	3401      	adds	r4, #1
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
   d77c0:	f003 fd4a 	bl	db258 <_ZN5Print7printlnEii>

    DEBUG_PRINTLN("Checking i2c devices...");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d77c4:	2c07      	cmp	r4, #7
   d77c6:	d1ea      	bne.n	d779e <_Z11readSensorsv+0x21e>
    {
      DEBUG_PRINT(i2cNames[x]);
      DEBUG_PRINT(": ");
      DEBUG_PRINTLN(i2cExists[x]);
    }
    if (!i2cOK)
   d77c8:	2e00      	cmp	r6, #0
   d77ca:	d15f      	bne.n	d788c <_Z11readSensorsv+0x30c>
    {
      StateString = "ERR";
   d77cc:	492c      	ldr	r1, [pc, #176]	; (d7880 <_Z11readSensorsv+0x300>)
   d77ce:	482d      	ldr	r0, [pc, #180]	; (d7884 <_Z11readSensorsv+0x304>)
   d77d0:	f003 fb95 	bl	daefe <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C Issue");
   d77d4:	f004 fe9c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d77d8:	492b      	ldr	r1, [pc, #172]	; (d7888 <_Z11readSensorsv+0x308>)
   d77da:	f003 fcc0 	bl	db15e <_ZN5Print7printlnEPKc>
      RGB.control(true);
   d77de:	2001      	movs	r0, #1
   d77e0:	f004 f80d 	bl	db7fe <_ZN8RGBClass7controlEb>
      // the following sets the RGB LED to red
      RGB.color(255, 0, 0);
   d77e4:	4632      	mov	r2, r6
   d77e6:	4631      	mov	r1, r6
   d77e8:	20ff      	movs	r0, #255	; 0xff
   d77ea:	f004 f818 	bl	db81e <_ZN8RGBClass5colorEiii>
      delay(3000);
   d77ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d77f2:	f003 ffc7 	bl	db784 <delay>
      // resume normal operation
      RGB.control(false);    
   d77f6:	4630      	mov	r0, r6
   d77f8:	f004 f801 	bl	db7fe <_ZN8RGBClass7controlEb>
      digitalWrite(buzzer, HIGH);
      delay(100);
      digitalWrite(buzzer, LOW);
  #endif
      //Generate 9 pulses on SCL to tell slave to release the bus 
      Wire.reset();     
   d77fc:	f005 fc2a 	bl	dd054 <_Z19__fetch_global_Wirev>
   d7800:	f004 ff34 	bl	dc66c <_ZN7TwoWire5resetEv>
      if (!Wire.isEnabled()) {
   d7804:	f005 fc26 	bl	dd054 <_Z19__fetch_global_Wirev>
   d7808:	f004 ff2c 	bl	dc664 <_ZN7TwoWire9isEnabledEv>
   d780c:	b918      	cbnz	r0, d7816 <_Z11readSensorsv+0x296>
        Wire.begin();
   d780e:	f005 fc21 	bl	dd054 <_Z19__fetch_global_Wirev>
   d7812:	f004 fef9 	bl	dc608 <_ZN7TwoWire5beginEv>
      }
      Wire.end();
   d7816:	f005 fc1d 	bl	dd054 <_Z19__fetch_global_Wirev>
   d781a:	f004 fefb 	bl	dc614 <_ZN7TwoWire3endEv>
   d781e:	e03e      	b.n	d789e <_Z11readSensorsv+0x31e>
   d7820:	2003da40 	.word	0x2003da40
   d7824:	000e72d4 	.word	0x000e72d4
   d7828:	000e72e6 	.word	0x000e72e6
   d782c:	000e7307 	.word	0x000e7307
   d7830:	000e7315 	.word	0x000e7315
   d7834:	000e7323 	.word	0x000e7323
   d7838:	000e7332 	.word	0x000e7332
   d783c:	000e7342 	.word	0x000e7342
   d7840:	000e7356 	.word	0x000e7356
   d7844:	2003d52c 	.word	0x2003d52c
   d7848:	000e7363 	.word	0x000e7363
   d784c:	000e7385 	.word	0x000e7385
   d7850:	2003d6d4 	.word	0x2003d6d4
   d7854:	000e73b6 	.word	0x000e73b6
   d7858:	2003d688 	.word	0x2003d688
   d785c:	2003d6b4 	.word	0x2003d6b4
   d7860:	2003de6c 	.word	0x2003de6c
   d7864:	2003ded0 	.word	0x2003ded0
   d7868:	2003d6a8 	.word	0x2003d6a8
   d786c:	000e73bc 	.word	0x000e73bc
   d7870:	000e73c2 	.word	0x000e73c2
   d7874:	2003d564 	.word	0x2003d564
   d7878:	2003d6d8 	.word	0x2003d6d8
   d787c:	000e7e58 	.word	0x000e7e58
   d7880:	000e73da 	.word	0x000e73da
   d7884:	2003d798 	.word	0x2003d798
   d7888:	000e73de 	.word	0x000e73de
    }
    else
    {
      StateString = "RDY";
   d788c:	49b6      	ldr	r1, [pc, #728]	; (d7b68 <_Z11readSensorsv+0x5e8>)
   d788e:	48b7      	ldr	r0, [pc, #732]	; (d7b6c <_Z11readSensorsv+0x5ec>)
   d7890:	f003 fb35 	bl	daefe <_ZN6StringaSEPKc>
      DEBUG_PRINTLN("I2C OK");
   d7894:	f004 fe3c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7898:	49b5      	ldr	r1, [pc, #724]	; (d7b70 <_Z11readSensorsv+0x5f0>)
   d789a:	f003 fc60 	bl	db15e <_ZN5Print7printlnEPKc>
      digitalWrite(buzzer, HIGH);
      delay(5);
      digitalWrite(buzzer, LOW);
      #endif
    }
    delay(200);
   d789e:	20c8      	movs	r0, #200	; 0xc8
   d78a0:	f003 ff70 	bl	db784 <delay>
    if (!i2cOK)
   d78a4:	b90e      	cbnz	r6, d78aa <_Z11readSensorsv+0x32a>
    {
      System.reset();
   d78a6:	f003 f9d5 	bl	dac54 <_ZN11SystemClass5resetEv>
    }

    long int clockTime = rtc.rtcNow();
   d78aa:	48b2      	ldr	r0, [pc, #712]	; (d7b74 <_Z11readSensorsv+0x5f4>)
    DEBUG_PRINTLN("Before");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d78ac:	4eb2      	ldr	r6, [pc, #712]	; (d7b78 <_Z11readSensorsv+0x5f8>)
    if (!i2cOK)
    {
      System.reset();
    }

    long int clockTime = rtc.rtcNow();
   d78ae:	f001 fe98 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d78b2:	4604      	mov	r4, r0
    DEBUG_PRINTLN("Before");
   d78b4:	f004 fe2c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d78b8:	49b0      	ldr	r1, [pc, #704]	; (d7b7c <_Z11readSensorsv+0x5fc>)
   d78ba:	f003 fc50 	bl	db15e <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d78be:	f004 fe27 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d78c2:	220a      	movs	r2, #10
   d78c4:	4621      	mov	r1, r4
   d78c6:	f003 fca3 	bl	db210 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d78ca:	f004 fe21 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d78ce:	49ac      	ldr	r1, [pc, #688]	; (d7b80 <_Z11readSensorsv+0x600>)
   d78d0:	f003 fc45 	bl	db15e <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d78d4:	f004 fe1c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d78d8:	6833      	ldr	r3, [r6, #0]
   d78da:	49aa      	ldr	r1, [pc, #680]	; (d7b84 <_Z11readSensorsv+0x604>)
   d78dc:	4622      	mov	r2, r4
   d78de:	4607      	mov	r7, r0
   d78e0:	a81a      	add	r0, sp, #104	; 0x68
   d78e2:	f003 feeb 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d78e6:	991a      	ldr	r1, [sp, #104]	; 0x68
   d78e8:	4638      	mov	r0, r7
   d78ea:	f003 fc38 	bl	db15e <_ZN5Print7printlnEPKc>
   d78ee:	a81a      	add	r0, sp, #104	; 0x68
   d78f0:	f003 fa6c 	bl	dadcc <_ZN6StringD1Ev>
    if (clockTime<946684800||clockTime>4102444799)
   d78f4:	4ba4      	ldr	r3, [pc, #656]	; (d7b88 <_Z11readSensorsv+0x608>)
   d78f6:	429c      	cmp	r4, r3
   d78f8:	dc27      	bgt.n	d794a <_Z11readSensorsv+0x3ca>
    {
      // 2019-01-01T00:00:00+00:00 in ISO 8601
      // Actual time is not important for rtc reset but needs to be a positive unix time
      rtc.setUnixTime(1262304000);
   d78fa:	49a4      	ldr	r1, [pc, #656]	; (d7b8c <_Z11readSensorsv+0x60c>)
   d78fc:	489d      	ldr	r0, [pc, #628]	; (d7b74 <_Z11readSensorsv+0x5f4>)
   d78fe:	f001 fe27 	bl	d9550 <_ZN8MCP7941x11setUnixTimeEm>
      long int clockTime = rtc.rtcNow();
   d7902:	489c      	ldr	r0, [pc, #624]	; (d7b74 <_Z11readSensorsv+0x5f4>)
   d7904:	f001 fe6d 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d7908:	4604      	mov	r4, r0
      DEBUG_PRINTLN("After");
   d790a:	f004 fe01 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d790e:	49a0      	ldr	r1, [pc, #640]	; (d7b90 <_Z11readSensorsv+0x610>)
   d7910:	f003 fc25 	bl	db15e <_ZN5Print7printlnEPKc>
      DEBUG_PRINT(clockTime);
   d7914:	f004 fdfc 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7918:	220a      	movs	r2, #10
   d791a:	4621      	mov	r1, r4
   d791c:	f003 fc78 	bl	db210 <_ZN5Print5printEli>
      DEBUG_PRINTLN(": ");
   d7920:	f004 fdf6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7924:	4996      	ldr	r1, [pc, #600]	; (d7b80 <_Z11readSensorsv+0x600>)
   d7926:	f003 fc1a 	bl	db15e <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d792a:	f004 fdf1 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d792e:	6833      	ldr	r3, [r6, #0]
   d7930:	4994      	ldr	r1, [pc, #592]	; (d7b84 <_Z11readSensorsv+0x604>)
   d7932:	4607      	mov	r7, r0
   d7934:	4622      	mov	r2, r4
   d7936:	a81a      	add	r0, sp, #104	; 0x68
   d7938:	f003 fec0 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d793c:	991a      	ldr	r1, [sp, #104]	; 0x68
   d793e:	4638      	mov	r0, r7
   d7940:	f003 fc0d 	bl	db15e <_ZN5Print7printlnEPKc>
   d7944:	a81a      	add	r0, sp, #104	; 0x68
   d7946:	f003 fa41 	bl	dadcc <_ZN6StringD1Ev>
    }
    timeSynced=false;
   d794a:	4b92      	ldr	r3, [pc, #584]	; (d7b94 <_Z11readSensorsv+0x614>)
   d794c:	2400      	movs	r4, #0
   d794e:	701c      	strb	r4, [r3, #0]
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d7950:	f005 fb80 	bl	dd054 <_Z19__fetch_global_Wirev>
    Sensor.begin();
   d7954:	4601      	mov	r1, r0
   d7956:	4890      	ldr	r0, [pc, #576]	; (d7b98 <_Z11readSensorsv+0x618>)
   d7958:	f002 fc44 	bl	da1e4 <_ZN5SPS305beginER7TwoWire>

    // Load state
    loadState();
   d795c:	f7fd ff44 	bl	d57e8 <_Z9loadStatev>
 
   /////////////
  // Setup ADXL345
    DEBUG_PRINT("ADXL345 Setup");
   d7960:	f004 fdd6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7964:	498d      	ldr	r1, [pc, #564]	; (d7b9c <_Z11readSensorsv+0x61c>)
   d7966:	f003 fbe7 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN();
   d796a:	f004 fdd1 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d796e:	f003 fbea 	bl	db146 <_ZN5Print7printlnEv>
    // // *Temp Debug* Set the pin mode to output, so you may control it.
    // pinMode(ledPin, OUTPUT);
    // Power on the ADXL345
    adxl.powerOn();
   d7972:	488b      	ldr	r0, [pc, #556]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d7974:	f002 f869 	bl	d9a4a <_ZN7ADXL3457powerOnEv>

  // Configure Chip
    adxl.setRangeSetting(4);            // Give the range settings
   d7978:	2104      	movs	r1, #4
   d797a:	4889      	ldr	r0, [pc, #548]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d797c:	f002 f8b2 	bl	d9ae4 <_ZN7ADXL34515setRangeSettingEi>
                                        // Accepted values are 2g, 4g, 8g or 16g
                                        // Higher Values = Wider Measurement Range
                                        // Lower Values = Greater Sensitivity

    // No TAP or Freefall detection only Activity
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7980:	2301      	movs	r3, #1
   d7982:	461a      	mov	r2, r3
   d7984:	4619      	mov	r1, r3
   d7986:	4886      	ldr	r0, [pc, #536]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d7988:	f002 f91b 	bl	d9bc2 <_ZN7ADXL34514setActivityXYZEbbb>
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
   d798c:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d7990:	4883      	ldr	r0, [pc, #524]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d7992:	f002 f8c7 	bl	d9b24 <_ZN7ADXL34520setActivityThresholdEi>
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7996:	2301      	movs	r3, #1
   d7998:	461a      	mov	r2, r3
   d799a:	4619      	mov	r1, r3
   d799c:	4880      	ldr	r0, [pc, #512]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d799e:	f002 f92f 	bl	d9c00 <_ZN7ADXL34516setInactivityXYZEbbb>
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d79a2:	f8d5 141c 	ldr.w	r1, [r5, #1052]	; 0x41c
   d79a6:	487e      	ldr	r0, [pc, #504]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d79a8:	f002 f8c2 	bl	d9b30 <_ZN7ADXL34522setInactivityThresholdEi>
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d79ac:	2601      	movs	r6, #1
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d79ae:	210a      	movs	r1, #10
   d79b0:	487b      	ldr	r0, [pc, #492]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d79b2:	f002 f8c3 	bl	d9b3c <_ZN7ADXL34517setTimeInactivityEi>

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d79b6:	4623      	mov	r3, r4
   d79b8:	4622      	mov	r2, r4
   d79ba:	4621      	mov	r1, r4
   d79bc:	9601      	str	r6, [sp, #4]
   d79be:	9600      	str	r6, [sp, #0]
   d79c0:	4877      	ldr	r0, [pc, #476]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d79c2:	f002 f932 	bl	d9c2a <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
   d79c6:	4631      	mov	r1, r6
   d79c8:	4875      	ldr	r0, [pc, #468]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d79ca:	f002 f97d 	bl	d9cc8 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(1);
   d79ce:	4631      	mov	r1, r6

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d79d0:	4e74      	ldr	r6, [pc, #464]	; (d7ba4 <_Z11readSensorsv+0x624>)
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
    adxl.ActivityINT(1);
   d79d2:	4873      	ldr	r0, [pc, #460]	; (d7ba0 <_Z11readSensorsv+0x620>)
   d79d4:	f002 f972 	bl	d9cbc <_ZN7ADXL34511ActivityINTEb>

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d79d8:	4621      	mov	r1, r4
   d79da:	8830      	ldrh	r0, [r6, #0]
   d79dc:	f005 fa9e 	bl	dcf1c <pinMode>
    attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d79e0:	4622      	mov	r2, r4
   d79e2:	f04f 33ff 	mov.w	r3, #4294967295
   d79e6:	4970      	ldr	r1, [pc, #448]	; (d7ba8 <_Z11readSensorsv+0x628>)
   d79e8:	8830      	ldrh	r0, [r6, #0]
   d79ea:	9400      	str	r4, [sp, #0]
   d79ec:	f004 fc8a 	bl	dc304 <_Z15attachInterrupttPFvvE13InterruptModeah>
 
    delay(300);  
   d79f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d79f4:	f003 fec6 	bl	db784 <delay>
   d79f8:	f002 fd7c 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
   d79fc:	4604      	mov	r4, r0
   d79fe:	f002 fd79 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>

    // SPS30 checks
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
   d7a02:	1b00      	subs	r0, r0, r4
   d7a04:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d7a08:	f0c0 84e2 	bcc.w	d83d0 <_Z11readSensorsv+0xe50>
   d7a0c:	f000 bd3e 	b.w	d848c <_Z11readSensorsv+0xf0c>
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
        delay(1000);
      }
      else
      {
        DEBUG_PRINTLN("Read SPS30");
   d7a10:	f004 fd7e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7a14:	4965      	ldr	r1, [pc, #404]	; (d7bac <_Z11readSensorsv+0x62c>)
   d7a16:	f003 fba2 	bl	db15e <_ZN5Print7printlnEPKc>
   d7a1a:	f002 fd6b 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7a1e:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d7a22:	4604      	mov	r4, r0
   d7a24:	485c      	ldr	r0, [pc, #368]	; (d7b98 <_Z11readSensorsv+0x618>)
   d7a26:	f002 fa4a 	bl	d9ebe <_ZN5SPS3013dataAvailableEv>
   d7a2a:	2800      	cmp	r0, #0
   d7a2c:	f000 84e4 	beq.w	d83f8 <_Z11readSensorsv+0xe78>
    {
      delay(100);
      checkAccel();
    }

    readingCount=0;
   d7a30:	4a5f      	ldr	r2, [pc, #380]	; (d7bb0 <_Z11readSensorsv+0x630>)
   d7a32:	2300      	movs	r3, #0
   d7a34:	6013      	str	r3, [r2, #0]
    state.bInSleepMode=false;
   d7a36:	f885 3425 	strb.w	r3, [r5, #1061]	; 0x425
  }
  StateString = "RDY";
   d7a3a:	494b      	ldr	r1, [pc, #300]	; (d7b68 <_Z11readSensorsv+0x5e8>)
   d7a3c:	484b      	ldr	r0, [pc, #300]	; (d7b6c <_Z11readSensorsv+0x5ec>)
   d7a3e:	f003 fa5e 	bl	daefe <_ZN6StringaSEPKc>
  connectWithoutWaiting();
   d7a42:	f7ff fd29 	bl	d7498 <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d7a46:	f003 fe6b 	bl	db720 <_ZN9TimeClass7isValidEv>
   d7a4a:	b328      	cbz	r0, d7a98 <_Z11readSensorsv+0x518>
   d7a4c:	4b51      	ldr	r3, [pc, #324]	; (d7b94 <_Z11readSensorsv+0x614>)
   d7a4e:	781a      	ldrb	r2, [r3, #0]
   d7a50:	461e      	mov	r6, r3
   d7a52:	bb0a      	cbnz	r2, d7a98 <_Z11readSensorsv+0x518>
  {
    rtc.setUnixTime(Time.now());
   d7a54:	f003 fe85 	bl	db762 <_ZN9TimeClass3nowEv>
   d7a58:	4601      	mov	r1, r0
   d7a5a:	4846      	ldr	r0, [pc, #280]	; (d7b74 <_Z11readSensorsv+0x5f4>)
   d7a5c:	f001 fd78 	bl	d9550 <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7a60:	f003 fe7f 	bl	db762 <_ZN9TimeClass3nowEv>
   d7a64:	4604      	mov	r4, r0
   d7a66:	4843      	ldr	r0, [pc, #268]	; (d7b74 <_Z11readSensorsv+0x5f4>)
   d7a68:	f001 fdbb 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d7a6c:	4284      	cmp	r4, r0
   d7a6e:	f000 84d0 	beq.w	d8412 <_Z11readSensorsv+0xe92>
   d7a72:	f003 fe76 	bl	db762 <_ZN9TimeClass3nowEv>
   d7a76:	4604      	mov	r4, r0
   d7a78:	483e      	ldr	r0, [pc, #248]	; (d7b74 <_Z11readSensorsv+0x5f4>)
   d7a7a:	f001 fdb2 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d7a7e:	1a20      	subs	r0, r4, r0
   d7a80:	2809      	cmp	r0, #9
   d7a82:	bf8c      	ite	hi
   d7a84:	2000      	movhi	r0, #0
   d7a86:	2001      	movls	r0, #1
   d7a88:	b130      	cbz	r0, d7a98 <_Z11readSensorsv+0x518>
    {
      timeSynced=true;
   d7a8a:	2301      	movs	r3, #1
   d7a8c:	7033      	strb	r3, [r6, #0]
      DEBUG_PRINTLN("Time is sync'ed to the cloud"); 
   d7a8e:	f004 fd3f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7a92:	4948      	ldr	r1, [pc, #288]	; (d7bb4 <_Z11readSensorsv+0x634>)
   d7a94:	f003 fb63 	bl	db15e <_ZN5Print7printlnEPKc>
      DEBUG_PRINTLN(TimeMsg);*/

    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7a98:	4b47      	ldr	r3, [pc, #284]	; (d7bb8 <_Z11readSensorsv+0x638>)
   d7a9a:	781b      	ldrb	r3, [r3, #0]
   d7a9c:	b90b      	cbnz	r3, d7aa2 <_Z11readSensorsv+0x522>
  {
    publishGMTOffsetRequest();
   d7a9e:	f7fe f879 	bl	d5b94 <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d7aa2:	f7ff fb9b 	bl	d71dc <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d7aa6:	483c      	ldr	r0, [pc, #240]	; (d7b98 <_Z11readSensorsv+0x618>)
   d7aa8:	4c3b      	ldr	r4, [pc, #236]	; (d7b98 <_Z11readSensorsv+0x618>)
   d7aaa:	f002 fa08 	bl	d9ebe <_ZN5SPS3013dataAvailableEv>
   d7aae:	2800      	cmp	r0, #0
   d7ab0:	f000 843b 	beq.w	d832a <_Z11readSensorsv+0xdaa>
    Sensor.getMass(mass_concen);
   d7ab4:	4941      	ldr	r1, [pc, #260]	; (d7bbc <_Z11readSensorsv+0x63c>)
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7ab6:	4f42      	ldr	r7, [pc, #264]	; (d7bc0 <_Z11readSensorsv+0x640>)
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7ab8:	f8df 9118 	ldr.w	r9, [pc, #280]	; d7bd4 <_Z11readSensorsv+0x654>
   d7abc:	f8df a0fc 	ldr.w	sl, [pc, #252]	; d7bbc <_Z11readSensorsv+0x63c>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	f002 fb15 	bl	da0f0 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d7ac6:	493f      	ldr	r1, [pc, #252]	; (d7bc4 <_Z11readSensorsv+0x644>)
   d7ac8:	4620      	mov	r0, r4
   d7aca:	f002 fb25 	bl	da118 <_ZN5SPS306getNumEPf>

    DEBUG_PRINTLN("--Mass Concentration--");
   d7ace:	f004 fd1f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7ad2:	493d      	ldr	r1, [pc, #244]	; (d7bc8 <_Z11readSensorsv+0x648>)
   d7ad4:	f003 fb43 	bl	db15e <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d7ad8:	2300      	movs	r3, #0
   d7ada:	603b      	str	r3, [r7, #0]
   d7adc:	46b8      	mov	r8, r7
   d7ade:	683b      	ldr	r3, [r7, #0]
   d7ae0:	4e37      	ldr	r6, [pc, #220]	; (d7bc0 <_Z11readSensorsv+0x640>)
   d7ae2:	2b03      	cmp	r3, #3
   d7ae4:	dc1a      	bgt.n	d7b1c <_Z11readSensorsv+0x59c>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d7ae6:	f004 fd13 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7aea:	f8d8 3000 	ldr.w	r3, [r8]
   d7aee:	f103 0b01 	add.w	fp, r3, #1
   d7af2:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   d7af6:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7af8:	6818      	ldr	r0, [r3, #0]
   d7afa:	f00b f89d 	bl	e2c38 <__aeabi_f2d>
   d7afe:	e9cd 0100 	strd	r0, r1, [sp]
   d7b02:	4a32      	ldr	r2, [pc, #200]	; (d7bcc <_Z11readSensorsv+0x64c>)
   d7b04:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
   d7b08:	2100      	movs	r1, #0
   d7b0a:	4630      	mov	r0, r6
   d7b0c:	f003 fc6e 	bl	db3ec <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d7b10:	f8d8 3000 	ldr.w	r3, [r8]
   d7b14:	3301      	adds	r3, #1
   d7b16:	f8c8 3000 	str.w	r3, [r8]
   d7b1a:	e7e0      	b.n	d7ade <_Z11readSensorsv+0x55e>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7b1c:	f004 fcf8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7b20:	492b      	ldr	r1, [pc, #172]	; (d7bd0 <_Z11readSensorsv+0x650>)
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7b22:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d7bd4 <_Z11readSensorsv+0x654>
   d7b26:	f8df 909c 	ldr.w	r9, [pc, #156]	; d7bc4 <_Z11readSensorsv+0x644>
    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7b2a:	f003 fb18 	bl	db15e <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d7b2e:	2300      	movs	r3, #0
   d7b30:	6033      	str	r3, [r6, #0]
   d7b32:	683b      	ldr	r3, [r7, #0]
   d7b34:	2b04      	cmp	r3, #4
   d7b36:	dc4f      	bgt.n	d7bd8 <_Z11readSensorsv+0x658>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7b38:	f004 fcea 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7b3c:	f8d6 a000 	ldr.w	sl, [r6]
   d7b40:	eb09 038a 	add.w	r3, r9, sl, lsl #2
   d7b44:	4683      	mov	fp, r0
   d7b46:	6818      	ldr	r0, [r3, #0]
   d7b48:	f00b f876 	bl	e2c38 <__aeabi_f2d>
   d7b4c:	e9cd 0100 	strd	r0, r1, [sp]
   d7b50:	4a1e      	ldr	r2, [pc, #120]	; (d7bcc <_Z11readSensorsv+0x64c>)
   d7b52:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   d7b56:	2100      	movs	r1, #0
   d7b58:	4658      	mov	r0, fp
   d7b5a:	f003 fc47 	bl	db3ec <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d7b5e:	6833      	ldr	r3, [r6, #0]
   d7b60:	3301      	adds	r3, #1
   d7b62:	6033      	str	r3, [r6, #0]
   d7b64:	e7e5      	b.n	d7b32 <_Z11readSensorsv+0x5b2>
   d7b66:	bf00      	nop
   d7b68:	000e73e8 	.word	0x000e73e8
   d7b6c:	2003d798 	.word	0x2003d798
   d7b70:	000e73ec 	.word	0x000e73ec
   d7b74:	2003e134 	.word	0x2003e134
   d7b78:	2003d574 	.word	0x2003d574
   d7b7c:	000e73f3 	.word	0x000e73f3
   d7b80:	000e7e58 	.word	0x000e7e58
   d7b84:	2003e26c 	.word	0x2003e26c
   d7b88:	386d437f 	.word	0x386d437f
   d7b8c:	4b3d3b00 	.word	0x4b3d3b00
   d7b90:	000e73fa 	.word	0x000e73fa
   d7b94:	2003de6d 	.word	0x2003de6d
   d7b98:	2003e1ac 	.word	0x2003e1ac
   d7b9c:	000e7400 	.word	0x000e7400
   d7ba0:	2003da08 	.word	0x2003da08
   d7ba4:	2003d538 	.word	0x2003d538
   d7ba8:	000d52f5 	.word	0x000d52f5
   d7bac:	000e7432 	.word	0x000e7432
   d7bb0:	2003e1f0 	.word	0x2003e1f0
   d7bb4:	000e743d 	.word	0x000e743d
   d7bb8:	2003e16c 	.word	0x2003e16c
   d7bbc:	2003e120 	.word	0x2003e120
   d7bc0:	2003de80 	.word	0x2003de80
   d7bc4:	2003e214 	.word	0x2003e214
   d7bc8:	000e745a 	.word	0x000e745a
   d7bcc:	000e7471 	.word	0x000e7471
   d7bd0:	000e747d 	.word	0x000e747d
   d7bd4:	2003d518 	.word	0x2003d518
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7bd8:	6860      	ldr	r0, [r4, #4]
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7bda:	4ec1      	ldr	r6, [pc, #772]	; (d7ee0 <_Z11readSensorsv+0x960>)
   d7bdc:	f8df 8364 	ldr.w	r8, [pc, #868]	; d7f44 <_Z11readSensorsv+0x9c4>
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7be0:	f00b f82a 	bl	e2c38 <__aeabi_f2d>
   d7be4:	4602      	mov	r2, r0
   d7be6:	460b      	mov	r3, r1
   d7be8:	a81a      	add	r0, sp, #104	; 0x68
   d7bea:	49be      	ldr	r1, [pc, #760]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7bec:	f003 fa46 	bl	db07c <_ZN6String6formatEPKcz>
   d7bf0:	a91a      	add	r1, sp, #104	; 0x68
   d7bf2:	48bd      	ldr	r0, [pc, #756]	; (d7ee8 <_Z11readSensorsv+0x968>)
   d7bf4:	f003 f97b 	bl	daeee <_ZN6StringaSEOS_>
   d7bf8:	a81a      	add	r0, sp, #104	; 0x68
   d7bfa:	f003 f8e7 	bl	dadcc <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d7bfe:	68a0      	ldr	r0, [r4, #8]
   d7c00:	f00b f81a 	bl	e2c38 <__aeabi_f2d>
   d7c04:	4602      	mov	r2, r0
   d7c06:	460b      	mov	r3, r1
   d7c08:	a81a      	add	r0, sp, #104	; 0x68
   d7c0a:	49b6      	ldr	r1, [pc, #728]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7c0c:	f003 fa36 	bl	db07c <_ZN6String6formatEPKcz>
   d7c10:	a91a      	add	r1, sp, #104	; 0x68
   d7c12:	48b6      	ldr	r0, [pc, #728]	; (d7eec <_Z11readSensorsv+0x96c>)
   d7c14:	f003 f96b 	bl	daeee <_ZN6StringaSEOS_>
   d7c18:	a81a      	add	r0, sp, #104	; 0x68
   d7c1a:	f003 f8d7 	bl	dadcc <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d7c1e:	68e0      	ldr	r0, [r4, #12]
   d7c20:	f00b f80a 	bl	e2c38 <__aeabi_f2d>
   d7c24:	4602      	mov	r2, r0
   d7c26:	460b      	mov	r3, r1
   d7c28:	a81a      	add	r0, sp, #104	; 0x68
   d7c2a:	49ae      	ldr	r1, [pc, #696]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7c2c:	f003 fa26 	bl	db07c <_ZN6String6formatEPKcz>
   d7c30:	a91a      	add	r1, sp, #104	; 0x68
   d7c32:	48af      	ldr	r0, [pc, #700]	; (d7ef0 <_Z11readSensorsv+0x970>)
   d7c34:	f003 f95b 	bl	daeee <_ZN6StringaSEOS_>
   d7c38:	a81a      	add	r0, sp, #104	; 0x68
   d7c3a:	f003 f8c7 	bl	dadcc <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d7c3e:	6920      	ldr	r0, [r4, #16]
   d7c40:	f00a fffa 	bl	e2c38 <__aeabi_f2d>
   d7c44:	460b      	mov	r3, r1
   d7c46:	4602      	mov	r2, r0
   d7c48:	49a6      	ldr	r1, [pc, #664]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7c4a:	a81a      	add	r0, sp, #104	; 0x68
   d7c4c:	f003 fa16 	bl	db07c <_ZN6String6formatEPKcz>
   d7c50:	a91a      	add	r1, sp, #104	; 0x68
   d7c52:	48a8      	ldr	r0, [pc, #672]	; (d7ef4 <_Z11readSensorsv+0x974>)
   d7c54:	f003 f94b 	bl	daeee <_ZN6StringaSEOS_>
   d7c58:	a81a      	add	r0, sp, #104	; 0x68
   d7c5a:	f003 f8b7 	bl	dadcc <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7c5e:	4aa6      	ldr	r2, [pc, #664]	; (d7ef8 <_Z11readSensorsv+0x978>)
   d7c60:	48a6      	ldr	r0, [pc, #664]	; (d7efc <_Z11readSensorsv+0x97c>)
   d7c62:	2101      	movs	r1, #1
   d7c64:	f001 f9e2 	bl	d902c <_ZN3ULP7getTempEiPc>
   d7c68:	ee07 0a90 	vmov	s15, r0
   d7c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c70:	edc6 7a00 	vstr	s15, [r6]
    
    DEBUG_PRINT("temp1: ");
   d7c74:	f004 fc4c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7c78:	49a1      	ldr	r1, [pc, #644]	; (d7f00 <_Z11readSensorsv+0x980>)
   d7c7a:	f003 fa5d 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINT(temp1);
   d7c7e:	f004 fc47 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7c82:	4604      	mov	r4, r0
   d7c84:	6830      	ldr	r0, [r6, #0]
   d7c86:	f00a ffd7 	bl	e2c38 <__aeabi_f2d>
   d7c8a:	ec41 0b10 	vmov	d0, r0, r1
   d7c8e:	2102      	movs	r1, #2
   d7c90:	4620      	mov	r0, r4
   d7c92:	f003 fb9d 	bl	db3d0 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7c96:	f004 fc3b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7c9a:	f003 fa54 	bl	db146 <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    DEBUG_PRINT("Vgas: ");
   d7c9e:	f004 fc37 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7ca2:	4998      	ldr	r1, [pc, #608]	; (d7f04 <_Z11readSensorsv+0x984>)
   d7ca4:	f003 fa48 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINT(sensor1.getVgas(1));
   d7ca8:	f004 fc32 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7cac:	2101      	movs	r1, #1
   d7cae:	4604      	mov	r4, r0
   d7cb0:	4892      	ldr	r0, [pc, #584]	; (d7efc <_Z11readSensorsv+0x97c>)
   d7cb2:	f001 fa6f 	bl	d9194 <_ZN3ULP7getVgasEi>
   d7cb6:	ee10 0a10 	vmov	r0, s0
   d7cba:	f00a ffbd 	bl	e2c38 <__aeabi_f2d>
   d7cbe:	ec41 0b10 	vmov	d0, r0, r1
   d7cc2:	2102      	movs	r1, #2
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	f003 fb83 	bl	db3d0 <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7cca:	f004 fc21 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7cce:	f003 fa3a 	bl	db146 <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7cd2:	f004 fc1d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7cd6:	498c      	ldr	r1, [pc, #560]	; (d7f08 <_Z11readSensorsv+0x988>)
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7cd8:	4c8c      	ldr	r4, [pc, #560]	; (d7f0c <_Z11readSensorsv+0x98c>)
    DEBUG_PRINT("Vgas: ");
    DEBUG_PRINT(sensor1.getVgas(1));
    DEBUG_PRINTLN();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7cda:	f003 fa2d 	bl	db138 <_ZN5Print5printEPKc>
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d7cde:	4a8c      	ldr	r2, [pc, #560]	; (d7f10 <_Z11readSensorsv+0x990>)
   d7ce0:	4886      	ldr	r0, [pc, #536]	; (d7efc <_Z11readSensorsv+0x97c>)
   d7ce2:	2101      	movs	r1, #1
   d7ce4:	f001 f9a2 	bl	d902c <_ZN3ULP7getTempEiPc>
   d7ce8:	ee07 0a90 	vmov	s15, r0
   d7cec:	2101      	movs	r1, #1
   d7cee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d7cf2:	4882      	ldr	r0, [pc, #520]	; (d7efc <_Z11readSensorsv+0x97c>)
   d7cf4:	f001 fa8c 	bl	d9210 <_ZN3ULP7getConcEif>
   d7cf8:	ed84 0a00 	vstr	s0, [r4]
    DEBUG_PRINTLN(conc1);
   d7cfc:	f004 fc08 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7d00:	4607      	mov	r7, r0
   d7d02:	6820      	ldr	r0, [r4, #0]
   d7d04:	f00a ff98 	bl	e2c38 <__aeabi_f2d>
   d7d08:	ec41 0b10 	vmov	d0, r0, r1
   d7d0c:	2102      	movs	r1, #2
   d7d0e:	4638      	mov	r0, r7
   d7d10:	f003 fb61 	bl	db3d6 <_ZN5Print7printlnEdi>

    field5 = String::format("%0.1f", conc1);
   d7d14:	6820      	ldr	r0, [r4, #0]
    field7 = String::format("%0.0f", batCharge);
    WiFiSignal sig = WiFi.RSSI();
    field8 = String::format("%d", (int)sig.getQuality());
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7d16:	4c7f      	ldr	r4, [pc, #508]	; (d7f14 <_Z11readSensorsv+0x994>)
   d7d18:	4f7f      	ldr	r7, [pc, #508]	; (d7f18 <_Z11readSensorsv+0x998>)
    DEBUG_PRINT("Conc: ");
    //  DEBUG_PRINT(", ");
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
    DEBUG_PRINTLN(conc1);

    field5 = String::format("%0.1f", conc1);
   d7d1a:	f00a ff8d 	bl	e2c38 <__aeabi_f2d>
   d7d1e:	4602      	mov	r2, r0
   d7d20:	460b      	mov	r3, r1
   d7d22:	a81a      	add	r0, sp, #104	; 0x68
   d7d24:	496f      	ldr	r1, [pc, #444]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7d26:	f003 f9a9 	bl	db07c <_ZN6String6formatEPKcz>
   d7d2a:	a91a      	add	r1, sp, #104	; 0x68
   d7d2c:	487b      	ldr	r0, [pc, #492]	; (d7f1c <_Z11readSensorsv+0x99c>)
   d7d2e:	f003 f8de 	bl	daeee <_ZN6StringaSEOS_>
   d7d32:	a81a      	add	r0, sp, #104	; 0x68
   d7d34:	f003 f84a 	bl	dadcc <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d7d38:	6830      	ldr	r0, [r6, #0]
   d7d3a:	f00a ff7d 	bl	e2c38 <__aeabi_f2d>
   d7d3e:	4602      	mov	r2, r0
   d7d40:	460b      	mov	r3, r1
   d7d42:	a81a      	add	r0, sp, #104	; 0x68
   d7d44:	4967      	ldr	r1, [pc, #412]	; (d7ee4 <_Z11readSensorsv+0x964>)
   d7d46:	f003 f999 	bl	db07c <_ZN6String6formatEPKcz>
   d7d4a:	a91a      	add	r1, sp, #104	; 0x68
   d7d4c:	4874      	ldr	r0, [pc, #464]	; (d7f20 <_Z11readSensorsv+0x9a0>)
   d7d4e:	f003 f8ce 	bl	daeee <_ZN6StringaSEOS_>
   d7d52:	a81a      	add	r0, sp, #104	; 0x68
   d7d54:	f003 f83a 	bl	dadcc <_ZN6StringD1Ev>

    /////////

    #if Wiring_Cellular
    float batCharge = fuel.getSoC();
   d7d58:	4872      	ldr	r0, [pc, #456]	; (d7f24 <_Z11readSensorsv+0x9a4>)
   d7d5a:	f003 fe6d 	bl	dba38 <_ZN9FuelGauge6getSoCEv>
    field7 = String::format("%0.0f", batCharge);
   d7d5e:	ee10 0a10 	vmov	r0, s0
    field6 = String::format("%0.1f", temp1);

    /////////

    #if Wiring_Cellular
    float batCharge = fuel.getSoC();
   d7d62:	eeb0 8a40 	vmov.f32	s16, s0
    field7 = String::format("%0.0f", batCharge);
   d7d66:	f00a ff67 	bl	e2c38 <__aeabi_f2d>
   d7d6a:	4602      	mov	r2, r0
   d7d6c:	460b      	mov	r3, r1
   d7d6e:	a81a      	add	r0, sp, #104	; 0x68
   d7d70:	496d      	ldr	r1, [pc, #436]	; (d7f28 <_Z11readSensorsv+0x9a8>)
   d7d72:	f003 f983 	bl	db07c <_ZN6String6formatEPKcz>
   d7d76:	a91a      	add	r1, sp, #104	; 0x68
   d7d78:	486c      	ldr	r0, [pc, #432]	; (d7f2c <_Z11readSensorsv+0x9ac>)
   d7d7a:	f003 f8b8 	bl	daeee <_ZN6StringaSEOS_>
   d7d7e:	a81a      	add	r0, sp, #104	; 0x68
   d7d80:	f003 f824 	bl	dadcc <_ZN6StringD1Ev>
    CellularSignal sig = Cellular.RSSI();
   d7d84:	496a      	ldr	r1, [pc, #424]	; (d7f30 <_Z11readSensorsv+0x9b0>)
   d7d86:	a81a      	add	r0, sp, #104	; 0x68
   d7d88:	f004 fb0e 	bl	dc3a8 <_ZN5spark13CellularClass4RSSIEv>
    field8 = String::format("%d", 100*sig.qual/49);
   d7d8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d7d8e:	4969      	ldr	r1, [pc, #420]	; (d7f34 <_Z11readSensorsv+0x9b4>)
   d7d90:	2364      	movs	r3, #100	; 0x64
   d7d92:	4353      	muls	r3, r2
   d7d94:	a816      	add	r0, sp, #88	; 0x58
   d7d96:	2231      	movs	r2, #49	; 0x31
   d7d98:	fb93 f2f2 	sdiv	r2, r3, r2
   d7d9c:	f003 f96e 	bl	db07c <_ZN6String6formatEPKcz>
   d7da0:	a916      	add	r1, sp, #88	; 0x58
   d7da2:	4865      	ldr	r0, [pc, #404]	; (d7f38 <_Z11readSensorsv+0x9b8>)
   d7da4:	f003 f8a3 	bl	daeee <_ZN6StringaSEOS_>
   d7da8:	a816      	add	r0, sp, #88	; 0x58
   d7daa:	f003 f80f 	bl	dadcc <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7dae:	494e      	ldr	r1, [pc, #312]	; (d7ee8 <_Z11readSensorsv+0x968>)
   d7db0:	a816      	add	r0, sp, #88	; 0x58
   d7db2:	f003 f891 	bl	daed8 <_ZN6StringC1ERKS_>
    field7 = String::format("%0.0f", batCharge);
    WiFiSignal sig = WiFi.RSSI();
    field8 = String::format("%d", (int)sig.getQuality());
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d7db6:	4961      	ldr	r1, [pc, #388]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7db8:	a816      	add	r0, sp, #88	; 0x58
   d7dba:	f003 f8f9 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7dbe:	494b      	ldr	r1, [pc, #300]	; (d7eec <_Z11readSensorsv+0x96c>)
   d7dc0:	f003 f8ea 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7dc4:	495d      	ldr	r1, [pc, #372]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7dc6:	f003 f8f3 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7dca:	4949      	ldr	r1, [pc, #292]	; (d7ef0 <_Z11readSensorsv+0x970>)
   d7dcc:	f003 f8e4 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7dd0:	495a      	ldr	r1, [pc, #360]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7dd2:	f003 f8ed 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7dd6:	4947      	ldr	r1, [pc, #284]	; (d7ef4 <_Z11readSensorsv+0x974>)
   d7dd8:	f003 f8de 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7ddc:	4957      	ldr	r1, [pc, #348]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7dde:	f003 f8e7 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7de2:	494e      	ldr	r1, [pc, #312]	; (d7f1c <_Z11readSensorsv+0x99c>)
   d7de4:	f003 f8d8 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7de8:	4954      	ldr	r1, [pc, #336]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7dea:	f003 f8e1 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7dee:	494c      	ldr	r1, [pc, #304]	; (d7f20 <_Z11readSensorsv+0x9a0>)
   d7df0:	f003 f8d2 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7df4:	4951      	ldr	r1, [pc, #324]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7df6:	f003 f8db 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7dfa:	494c      	ldr	r1, [pc, #304]	; (d7f2c <_Z11readSensorsv+0x9ac>)
   d7dfc:	f003 f8cc 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7e00:	494e      	ldr	r1, [pc, #312]	; (d7f3c <_Z11readSensorsv+0x9bc>)
   d7e02:	f003 f8d5 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7e06:	494c      	ldr	r1, [pc, #304]	; (d7f38 <_Z11readSensorsv+0x9b8>)
   d7e08:	f003 f8c6 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7e0c:	4601      	mov	r1, r0
   d7e0e:	4620      	mov	r0, r4
   d7e10:	f003 f853 	bl	daeba <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7e14:	a816      	add	r0, sp, #88	; 0x58
   d7e16:	f002 ffd9 	bl	dadcc <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d7e1a:	4933      	ldr	r1, [pc, #204]	; (d7ee8 <_Z11readSensorsv+0x968>)
   d7e1c:	a816      	add	r0, sp, #88	; 0x58
   d7e1e:	f003 f85b 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e22:	aa16      	add	r2, sp, #88	; 0x58
   d7e24:	2101      	movs	r1, #1
   d7e26:	4846      	ldr	r0, [pc, #280]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7e28:	f7fe fc82 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e2c:	a816      	add	r0, sp, #88	; 0x58
   d7e2e:	f002 ffcd 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d7e32:	492e      	ldr	r1, [pc, #184]	; (d7eec <_Z11readSensorsv+0x96c>)
   d7e34:	a816      	add	r0, sp, #88	; 0x58
   d7e36:	f003 f84f 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e3a:	aa16      	add	r2, sp, #88	; 0x58
   d7e3c:	2102      	movs	r1, #2
   d7e3e:	4840      	ldr	r0, [pc, #256]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7e40:	f7fe fc76 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e44:	a816      	add	r0, sp, #88	; 0x58
   d7e46:	f002 ffc1 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d7e4a:	4929      	ldr	r1, [pc, #164]	; (d7ef0 <_Z11readSensorsv+0x970>)
   d7e4c:	a816      	add	r0, sp, #88	; 0x58
   d7e4e:	f003 f843 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e52:	aa16      	add	r2, sp, #88	; 0x58
   d7e54:	2103      	movs	r1, #3
   d7e56:	483a      	ldr	r0, [pc, #232]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7e58:	f7fe fc6a 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e5c:	a816      	add	r0, sp, #88	; 0x58
   d7e5e:	f002 ffb5 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d7e62:	4924      	ldr	r1, [pc, #144]	; (d7ef4 <_Z11readSensorsv+0x974>)
   d7e64:	a816      	add	r0, sp, #88	; 0x58
   d7e66:	f003 f837 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e6a:	aa16      	add	r2, sp, #88	; 0x58
   d7e6c:	2104      	movs	r1, #4
   d7e6e:	4834      	ldr	r0, [pc, #208]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7e70:	f7fe fc5e 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e74:	a816      	add	r0, sp, #88	; 0x58
   d7e76:	f002 ffa9 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d7e7a:	4928      	ldr	r1, [pc, #160]	; (d7f1c <_Z11readSensorsv+0x99c>)
   d7e7c:	a816      	add	r0, sp, #88	; 0x58
   d7e7e:	f003 f82b 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e82:	aa16      	add	r2, sp, #88	; 0x58
   d7e84:	2105      	movs	r1, #5
   d7e86:	482e      	ldr	r0, [pc, #184]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7e88:	f7fe fc52 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7e8c:	a816      	add	r0, sp, #88	; 0x58
   d7e8e:	f002 ff9d 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d7e92:	4923      	ldr	r1, [pc, #140]	; (d7f20 <_Z11readSensorsv+0x9a0>)
   d7e94:	a816      	add	r0, sp, #88	; 0x58
   d7e96:	f003 f81f 	bl	daed8 <_ZN6StringC1ERKS_>
   d7e9a:	aa16      	add	r2, sp, #88	; 0x58
   d7e9c:	2106      	movs	r1, #6
   d7e9e:	4828      	ldr	r0, [pc, #160]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7ea0:	f7fe fc46 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7ea4:	a816      	add	r0, sp, #88	; 0x58
   d7ea6:	f002 ff91 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d7eaa:	4920      	ldr	r1, [pc, #128]	; (d7f2c <_Z11readSensorsv+0x9ac>)
   d7eac:	a816      	add	r0, sp, #88	; 0x58
   d7eae:	f003 f813 	bl	daed8 <_ZN6StringC1ERKS_>
   d7eb2:	aa16      	add	r2, sp, #88	; 0x58
   d7eb4:	2107      	movs	r1, #7
   d7eb6:	4822      	ldr	r0, [pc, #136]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7eb8:	f7fe fc3a 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7ebc:	a816      	add	r0, sp, #88	; 0x58
   d7ebe:	f002 ff85 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d7ec2:	491d      	ldr	r1, [pc, #116]	; (d7f38 <_Z11readSensorsv+0x9b8>)
   d7ec4:	a816      	add	r0, sp, #88	; 0x58
   d7ec6:	f003 f807 	bl	daed8 <_ZN6StringC1ERKS_>
   d7eca:	aa16      	add	r2, sp, #88	; 0x58
   d7ecc:	2108      	movs	r1, #8
   d7ece:	481c      	ldr	r0, [pc, #112]	; (d7f40 <_Z11readSensorsv+0x9c0>)
   d7ed0:	f7fe fc2e 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7ed4:	a816      	add	r0, sp, #88	; 0x58
   d7ed6:	f002 ff79 	bl	dadcc <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
   d7eda:	f004 fb19 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d7ede:	e033      	b.n	d7f48 <_Z11readSensorsv+0x9c8>
   d7ee0:	2003e228 	.word	0x2003e228
   d7ee4:	000e7496 	.word	0x000e7496
   d7ee8:	2003d748 	.word	0x2003d748
   d7eec:	2003d758 	.word	0x2003d758
   d7ef0:	2003d768 	.word	0x2003d768
   d7ef4:	2003d778 	.word	0x2003d778
   d7ef8:	000e749c 	.word	0x000e749c
   d7efc:	2003de90 	.word	0x2003de90
   d7f00:	000e749e 	.word	0x000e749e
   d7f04:	000e74a6 	.word	0x000e74a6
   d7f08:	000e74ad 	.word	0x000e74ad
   d7f0c:	2003e11c 	.word	0x2003e11c
   d7f10:	000e789a 	.word	0x000e789a
   d7f14:	2003de70 	.word	0x2003de70
   d7f18:	2003e1dc 	.word	0x2003e1dc
   d7f1c:	2003d788 	.word	0x2003d788
   d7f20:	2003e140 	.word	0x2003e140
   d7f24:	2003e164 	.word	0x2003e164
   d7f28:	000e74b4 	.word	0x000e74b4
   d7f2c:	2003d7a8 	.word	0x2003d7a8
   d7f30:	2003e2ac 	.word	0x2003e2ac
   d7f34:	000e8098 	.word	0x000e8098
   d7f38:	2003d678 	.word	0x2003d678
   d7f3c:	000e6fe7 	.word	0x000e6fe7
   d7f40:	2003e1f4 	.word	0x2003e1f4
   d7f44:	2003da05 	.word	0x2003da05
   d7f48:	6821      	ldr	r1, [r4, #0]
   d7f4a:	4c6a      	ldr	r4, [pc, #424]	; (d80f4 <_Z11readSensorsv+0xb74>)
   d7f4c:	f003 f907 	bl	db15e <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d7f50:	4b69      	ldr	r3, [pc, #420]	; (d80f8 <_Z11readSensorsv+0xb78>)
    String statusMessage;
   d7f52:	496a      	ldr	r1, [pc, #424]	; (d80fc <_Z11readSensorsv+0xb7c>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7f54:	2601      	movs	r6, #1
    String statusMessage;
   d7f56:	a802      	add	r0, sp, #8
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7f58:	701e      	strb	r6, [r3, #0]
    String statusMessage;
   d7f5a:	f002 ff7e 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
    String alertMessage;
   d7f5e:	4967      	ldr	r1, [pc, #412]	; (d80fc <_Z11readSensorsv+0xb7c>)
   d7f60:	a806      	add	r0, sp, #24
   d7f62:	f002 ff7a 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d7f66:	4866      	ldr	r0, [pc, #408]	; (d8100 <_Z11readSensorsv+0xb80>)
   d7f68:	f7fe ffce 	bl	d6f08 <_Z13runExpressionPc>
   d7f6c:	4602      	mov	r2, r0
   d7f6e:	2800      	cmp	r0, #0
   d7f70:	f000 8083 	beq.w	d807a <_Z11readSensorsv+0xafa>
    {
      currentAlert = true;
      Blynk.virtualWrite(V9,alertGreenImage);
   d7f74:	2200      	movs	r2, #0
   d7f76:	2109      	movs	r1, #9
   d7f78:	4862      	ldr	r0, [pc, #392]	; (d8104 <_Z11readSensorsv+0xb84>)
    String statusMessage;
    String alertMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d7f7a:	703e      	strb	r6, [r7, #0]
      Blynk.virtualWrite(V9,alertGreenImage);
   d7f7c:	f7fe fb9c 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,alertRedImage);
   d7f80:	4632      	mov	r2, r6
   d7f82:	2109      	movs	r1, #9
   d7f84:	485f      	ldr	r0, [pc, #380]	; (d8104 <_Z11readSensorsv+0xb84>)
   d7f86:	f7fe fb97 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d7f8a:	7823      	ldrb	r3, [r4, #0]
   d7f8c:	b31b      	cbz	r3, d7fd6 <_Z11readSensorsv+0xa56>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d7f8e:	495e      	ldr	r1, [pc, #376]	; (d8108 <_Z11readSensorsv+0xb88>)
   d7f90:	a816      	add	r0, sp, #88	; 0x58
   d7f92:	f002 ff62 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
      {
        // statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = "ALRT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d7f96:	485d      	ldr	r0, [pc, #372]	; (d810c <_Z11readSensorsv+0xb8c>)
   d7f98:	f001 fb23 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d7f9c:	4b5c      	ldr	r3, [pc, #368]	; (d8110 <_Z11readSensorsv+0xb90>)
   d7f9e:	495d      	ldr	r1, [pc, #372]	; (d8114 <_Z11readSensorsv+0xb94>)
   d7fa0:	681a      	ldr	r2, [r3, #0]
   d7fa2:	4b5d      	ldr	r3, [pc, #372]	; (d8118 <_Z11readSensorsv+0xb98>)
   d7fa4:	4402      	add	r2, r0
   d7fa6:	a812      	add	r0, sp, #72	; 0x48
   d7fa8:	f003 fb88 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d7fac:	a912      	add	r1, sp, #72	; 0x48
   d7fae:	a816      	add	r0, sp, #88	; 0x58
   d7fb0:	f002 fff2 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7fb4:	4959      	ldr	r1, [pc, #356]	; (d811c <_Z11readSensorsv+0xb9c>)
   d7fb6:	f002 fffb 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7fba:	4959      	ldr	r1, [pc, #356]	; (d8120 <_Z11readSensorsv+0xba0>)
   d7fbc:	f002 ffec 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7fc0:	4958      	ldr	r1, [pc, #352]	; (d8124 <_Z11readSensorsv+0xba4>)
   d7fc2:	f002 fff5 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7fc6:	4601      	mov	r1, r0
   d7fc8:	a802      	add	r0, sp, #8
   d7fca:	f002 ff76 	bl	daeba <_ZN6StringaSERKS_>
   d7fce:	a812      	add	r0, sp, #72	; 0x48
   d7fd0:	f002 fefc 	bl	dadcc <_ZN6StringD1Ev>
   d7fd4:	e00e      	b.n	d7ff4 <_Z11readSensorsv+0xa74>
   d7fd6:	4954      	ldr	r1, [pc, #336]	; (d8128 <_Z11readSensorsv+0xba8>)
   d7fd8:	a816      	add	r0, sp, #88	; 0x58
   d7fda:	f002 ff3e 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d7fde:	4950      	ldr	r1, [pc, #320]	; (d8120 <_Z11readSensorsv+0xba0>)
   d7fe0:	a816      	add	r0, sp, #88	; 0x58
   d7fe2:	f002 ffd9 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d7fe6:	494f      	ldr	r1, [pc, #316]	; (d8124 <_Z11readSensorsv+0xba4>)
   d7fe8:	f002 ffe2 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d7fec:	4601      	mov	r1, r0
   d7fee:	a802      	add	r0, sp, #8
   d7ff0:	f002 ff63 	bl	daeba <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7ff4:	a816      	add	r0, sp, #88	; 0x58
   d7ff6:	f002 fee9 	bl	dadcc <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d7ffa:	a902      	add	r1, sp, #8
   d7ffc:	a816      	add	r0, sp, #88	; 0x58
   d7ffe:	f002 ff6b 	bl	daed8 <_ZN6StringC1ERKS_>
   d8002:	aa16      	add	r2, sp, #88	; 0x58
   d8004:	211e      	movs	r1, #30
   d8006:	483f      	ldr	r0, [pc, #252]	; (d8104 <_Z11readSensorsv+0xb84>)
   d8008:	f7fe fb92 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d800c:	a816      	add	r0, sp, #88	; 0x58
   d800e:	f002 fedd 	bl	dadcc <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d8012:	f898 3000 	ldrb.w	r3, [r8]
   d8016:	2b00      	cmp	r3, #0
   d8018:	f000 80fc 	beq.w	d8214 <_Z11readSensorsv+0xc94>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d801c:	f003 fba1 	bl	db762 <_ZN9TimeClass3nowEv>
   d8020:	4601      	mov	r1, r0
   d8022:	a80a      	add	r0, sp, #40	; 0x28
   d8024:	f003 faca 	bl	db5bc <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8028:	a90a      	add	r1, sp, #40	; 0x28
   d802a:	a80e      	add	r0, sp, #56	; 0x38
   d802c:	f002 ff54 	bl	daed8 <_ZN6StringC1ERKS_>
   d8030:	493e      	ldr	r1, [pc, #248]	; (d812c <_Z11readSensorsv+0xbac>)
   d8032:	a80e      	add	r0, sp, #56	; 0x38
   d8034:	f002 ffbc 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d8038:	4b35      	ldr	r3, [pc, #212]	; (d8110 <_Z11readSensorsv+0xb90>)
   d803a:	220a      	movs	r2, #10
   d803c:	6819      	ldr	r1, [r3, #0]
   d803e:	4604      	mov	r4, r0
   d8040:	a812      	add	r0, sp, #72	; 0x48
   d8042:	f002 ff7f 	bl	daf44 <_ZN6StringC1Eih>
   d8046:	a912      	add	r1, sp, #72	; 0x48
   d8048:	4620      	mov	r0, r4
   d804a:	f002 ffa5 	bl	daf98 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d804e:	4601      	mov	r1, r0
   d8050:	a816      	add	r0, sp, #88	; 0x58
   d8052:	f002 ff41 	bl	daed8 <_ZN6StringC1ERKS_>
   d8056:	aa16      	add	r2, sp, #88	; 0x58
   d8058:	2115      	movs	r1, #21
   d805a:	482a      	ldr	r0, [pc, #168]	; (d8104 <_Z11readSensorsv+0xb84>)
   d805c:	f7fe fc8a 	bl	d6974 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d8060:	a816      	add	r0, sp, #88	; 0x58
   d8062:	f002 feb3 	bl	dadcc <_ZN6StringD1Ev>
   d8066:	a812      	add	r0, sp, #72	; 0x48
   d8068:	f002 feb0 	bl	dadcc <_ZN6StringD1Ev>
   d806c:	a80e      	add	r0, sp, #56	; 0x38
   d806e:	f002 fead 	bl	dadcc <_ZN6StringD1Ev>
   d8072:	a80a      	add	r0, sp, #40	; 0x28
   d8074:	f002 feaa 	bl	dadcc <_ZN6StringD1Ev>
   d8078:	e0cc      	b.n	d8214 <_Z11readSensorsv+0xc94>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d807a:	4601      	mov	r1, r0
   d807c:	4821      	ldr	r0, [pc, #132]	; (d8104 <_Z11readSensorsv+0xb84>)
   d807e:	f7fe fb1b 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (tamperCurrentAlert){
   d8082:	4b2b      	ldr	r3, [pc, #172]	; (d8130 <_Z11readSensorsv+0xbb0>)
   d8084:	781a      	ldrb	r2, [r3, #0]
   d8086:	b122      	cbz	r2, d8092 <_Z11readSensorsv+0xb12>
        StateString="ALRT!";
   d8088:	492a      	ldr	r1, [pc, #168]	; (d8134 <_Z11readSensorsv+0xbb4>)
   d808a:	482b      	ldr	r0, [pc, #172]	; (d8138 <_Z11readSensorsv+0xbb8>)
   d808c:	f002 ff37 	bl	daefe <_ZN6StringaSEPKc>
        Blynk.virtualWrite(V9,alertRedImage);
   d8090:	4632      	mov	r2, r6
      }
      else
        Blynk.virtualWrite(V9,alertGreenImage);
   d8092:	2109      	movs	r1, #9
   d8094:	481b      	ldr	r0, [pc, #108]	; (d8104 <_Z11readSensorsv+0xb84>)
   d8096:	f7fe fb0f 	bl	d66b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (timeSynced)
   d809a:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d809c:	4926      	ldr	r1, [pc, #152]	; (d8138 <_Z11readSensorsv+0xbb8>)
   d809e:	2b00      	cmp	r3, #0
   d80a0:	d04c      	beq.n	d813c <_Z11readSensorsv+0xbbc>
   d80a2:	a812      	add	r0, sp, #72	; 0x48
   d80a4:	f002 ff18 	bl	daed8 <_ZN6StringC1ERKS_>
      {
        // statusMessage = "OK "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d80a8:	491c      	ldr	r1, [pc, #112]	; (d811c <_Z11readSensorsv+0xb9c>)
   d80aa:	a812      	add	r0, sp, #72	; 0x48
   d80ac:	f002 ff80 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d80b0:	4604      	mov	r4, r0
   d80b2:	4816      	ldr	r0, [pc, #88]	; (d810c <_Z11readSensorsv+0xb8c>)
   d80b4:	f001 fa95 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d80b8:	4b15      	ldr	r3, [pc, #84]	; (d8110 <_Z11readSensorsv+0xb90>)
   d80ba:	4916      	ldr	r1, [pc, #88]	; (d8114 <_Z11readSensorsv+0xb94>)
   d80bc:	681a      	ldr	r2, [r3, #0]
   d80be:	4b16      	ldr	r3, [pc, #88]	; (d8118 <_Z11readSensorsv+0xb98>)
   d80c0:	4402      	add	r2, r0
   d80c2:	a816      	add	r0, sp, #88	; 0x58
   d80c4:	f003 fafa 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d80c8:	a916      	add	r1, sp, #88	; 0x58
   d80ca:	4620      	mov	r0, r4
   d80cc:	f002 ff64 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d80d0:	4912      	ldr	r1, [pc, #72]	; (d811c <_Z11readSensorsv+0xb9c>)
   d80d2:	f002 ff6d 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d80d6:	4912      	ldr	r1, [pc, #72]	; (d8120 <_Z11readSensorsv+0xba0>)
   d80d8:	f002 ff5e 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d80dc:	4911      	ldr	r1, [pc, #68]	; (d8124 <_Z11readSensorsv+0xba4>)
   d80de:	f002 ff67 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d80e2:	4601      	mov	r1, r0
   d80e4:	a802      	add	r0, sp, #8
   d80e6:	f002 fee8 	bl	daeba <_ZN6StringaSERKS_>
   d80ea:	a816      	add	r0, sp, #88	; 0x58
   d80ec:	f002 fe6e 	bl	dadcc <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d80f0:	a812      	add	r0, sp, #72	; 0x48
   d80f2:	e035      	b.n	d8160 <_Z11readSensorsv+0xbe0>
   d80f4:	2003de6d 	.word	0x2003de6d
   d80f8:	2003e13c 	.word	0x2003e13c
   d80fc:	000e6c91 	.word	0x000e6c91
   d8100:	2003da50 	.word	0x2003da50
   d8104:	2003e1f4 	.word	0x2003e1f4
   d8108:	000e74ba 	.word	0x000e74ba
   d810c:	2003e134 	.word	0x2003e134
   d8110:	2003d560 	.word	0x2003d560
   d8114:	2003e26c 	.word	0x2003e26c
   d8118:	000e7047 	.word	0x000e7047
   d811c:	000e7060 	.word	0x000e7060
   d8120:	2003d7a8 	.word	0x2003d7a8
   d8124:	000e704f 	.word	0x000e704f
   d8128:	000e74c1 	.word	0x000e74c1
   d812c:	000e74d5 	.word	0x000e74d5
   d8130:	2003de8c 	.word	0x2003de8c
   d8134:	000e74d7 	.word	0x000e74d7
   d8138:	2003d798 	.word	0x2003d798
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d813c:	a816      	add	r0, sp, #88	; 0x58
   d813e:	f002 fecb 	bl	daed8 <_ZN6StringC1ERKS_>
      }
      else
      {
        statusMessage = StateString+"                "+field7+"%";
   d8142:	49b8      	ldr	r1, [pc, #736]	; (d8424 <_Z11readSensorsv+0xea4>)
   d8144:	a816      	add	r0, sp, #88	; 0x58
   d8146:	f002 ff33 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d814a:	49b7      	ldr	r1, [pc, #732]	; (d8428 <_Z11readSensorsv+0xea8>)
   d814c:	f002 ff24 	bl	daf98 <_ZplRK15StringSumHelperRK6String>
   d8150:	49b6      	ldr	r1, [pc, #728]	; (d842c <_Z11readSensorsv+0xeac>)
   d8152:	f002 ff2d 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d8156:	4601      	mov	r1, r0
   d8158:	a802      	add	r0, sp, #8
   d815a:	f002 feae 	bl	daeba <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d815e:	a816      	add	r0, sp, #88	; 0x58
   d8160:	f002 fe34 	bl	dadcc <_ZN6StringD1Ev>
      }
      int messagesize=statusMessage.length();
      if (messagesize<5){
   d8164:	9b04      	ldr	r3, [sp, #16]
   d8166:	2b04      	cmp	r3, #4
   d8168:	dc15      	bgt.n	d8196 <_Z11readSensorsv+0xc16>
        statusMessage=String::format("Updating");
   d816a:	49b1      	ldr	r1, [pc, #708]	; (d8430 <_Z11readSensorsv+0xeb0>)
   d816c:	a816      	add	r0, sp, #88	; 0x58
   d816e:	f002 ff85 	bl	db07c <_ZN6String6formatEPKcz>
   d8172:	a916      	add	r1, sp, #88	; 0x58
   d8174:	a802      	add	r0, sp, #8
   d8176:	f002 feba 	bl	daeee <_ZN6StringaSEOS_>
   d817a:	a816      	add	r0, sp, #88	; 0x58
   d817c:	f002 fe26 	bl	dadcc <_ZN6StringD1Ev>
        DEBUG_PRINTLN(statusMessage);
   d8180:	f004 f9c6 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8184:	9902      	ldr	r1, [sp, #8]
   d8186:	f002 ffea 	bl	db15e <_ZN5Print7printlnEPKc>
        delay(1000);
   d818a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d818e:	f003 faf9 	bl	db784 <delay>
        System.reset();
   d8192:	f002 fd5f 	bl	dac54 <_ZN11SystemClass5resetEv>
      }
        
      Blynk.virtualWrite(V30,statusMessage);
   d8196:	a902      	add	r1, sp, #8
   d8198:	a816      	add	r0, sp, #88	; 0x58
   d819a:	f002 fe9d 	bl	daed8 <_ZN6StringC1ERKS_>
   d819e:	aa16      	add	r2, sp, #88	; 0x58
   d81a0:	211e      	movs	r1, #30
   d81a2:	48a4      	ldr	r0, [pc, #656]	; (d8434 <_Z11readSensorsv+0xeb4>)
   d81a4:	f7fe fac4 	bl	d6730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d81a8:	a816      	add	r0, sp, #88	; 0x58
   d81aa:	f002 fe0f 	bl	dadcc <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d81ae:	f898 3000 	ldrb.w	r3, [r8]
   d81b2:	b36b      	cbz	r3, d8210 <_Z11readSensorsv+0xc90>
   d81b4:	f003 fad5 	bl	db762 <_ZN9TimeClass3nowEv>
   d81b8:	4601      	mov	r1, r0
   d81ba:	a80a      	add	r0, sp, #40	; 0x28
   d81bc:	f003 f9fe 	bl	db5bc <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d81c0:	a90a      	add	r1, sp, #40	; 0x28
   d81c2:	a80e      	add	r0, sp, #56	; 0x38
   d81c4:	f002 fe88 	bl	daed8 <_ZN6StringC1ERKS_>
   d81c8:	499b      	ldr	r1, [pc, #620]	; (d8438 <_Z11readSensorsv+0xeb8>)
   d81ca:	a80e      	add	r0, sp, #56	; 0x38
   d81cc:	f002 fef0 	bl	dafb0 <_ZplRK15StringSumHelperPKc>
   d81d0:	4b9a      	ldr	r3, [pc, #616]	; (d843c <_Z11readSensorsv+0xebc>)
   d81d2:	220a      	movs	r2, #10
   d81d4:	6819      	ldr	r1, [r3, #0]
   d81d6:	4604      	mov	r4, r0
   d81d8:	a812      	add	r0, sp, #72	; 0x48
   d81da:	f002 feb3 	bl	daf44 <_ZN6StringC1Eih>
   d81de:	a912      	add	r1, sp, #72	; 0x48
   d81e0:	4620      	mov	r0, r4
   d81e2:	f002 fed9 	bl	daf98 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d81e6:	4601      	mov	r1, r0
   d81e8:	a816      	add	r0, sp, #88	; 0x58
   d81ea:	f002 fe75 	bl	daed8 <_ZN6StringC1ERKS_>
   d81ee:	aa16      	add	r2, sp, #88	; 0x58
   d81f0:	2115      	movs	r1, #21
   d81f2:	4890      	ldr	r0, [pc, #576]	; (d8434 <_Z11readSensorsv+0xeb4>)
   d81f4:	f7fe fbbe 	bl	d6974 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d81f8:	a816      	add	r0, sp, #88	; 0x58
   d81fa:	f002 fde7 	bl	dadcc <_ZN6StringD1Ev>
   d81fe:	a812      	add	r0, sp, #72	; 0x48
   d8200:	f002 fde4 	bl	dadcc <_ZN6StringD1Ev>
   d8204:	a80e      	add	r0, sp, #56	; 0x38
   d8206:	f002 fde1 	bl	dadcc <_ZN6StringD1Ev>
   d820a:	a80a      	add	r0, sp, #40	; 0x28
   d820c:	f002 fdde 	bl	dadcc <_ZN6StringD1Ev>
      currentAlert = false;
   d8210:	2300      	movs	r3, #0
   d8212:	703b      	strb	r3, [r7, #0]
    }
     if (VapeBuzzerOn)
   d8214:	4c8a      	ldr	r4, [pc, #552]	; (d8440 <_Z11readSensorsv+0xec0>)
   d8216:	7823      	ldrb	r3, [r4, #0]
   d8218:	b1fb      	cbz	r3, d825a <_Z11readSensorsv+0xcda>
   d821a:	f002 f96b 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d821e:	4b89      	ldr	r3, [pc, #548]	; (d8444 <_Z11readSensorsv+0xec4>)
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d8220:	4989      	ldr	r1, [pc, #548]	; (d8448 <_Z11readSensorsv+0xec8>)
      currentAlert = false;
    }
     if (VapeBuzzerOn)
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d8222:	681e      	ldr	r6, [r3, #0]
   d8224:	1b86      	subs	r6, r0, r6
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d8226:	4632      	mov	r2, r6
   d8228:	a816      	add	r0, sp, #88	; 0x58
   d822a:	f002 ff27 	bl	db07c <_ZN6String6formatEPKcz>
   d822e:	a916      	add	r1, sp, #88	; 0x58
   d8230:	a806      	add	r0, sp, #24
   d8232:	f002 fe5c 	bl	daeee <_ZN6StringaSEOS_>
   d8236:	a816      	add	r0, sp, #88	; 0x58
   d8238:	f002 fdc8 	bl	dadcc <_ZN6StringD1Ev>
         DEBUG_PRINTLN(alertMessage);
   d823c:	f004 f968 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8240:	9906      	ldr	r1, [sp, #24]
   d8242:	f002 ff8c 	bl	db15e <_ZN5Print7printlnEPKc>
         if (vape_elapsed_buzzer>8000){
   d8246:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
   d824a:	d906      	bls.n	d825a <_Z11readSensorsv+0xcda>
           digitalWrite(buzzer, LOW);
   d824c:	4b7f      	ldr	r3, [pc, #508]	; (d844c <_Z11readSensorsv+0xecc>)
   d824e:	2100      	movs	r1, #0
   d8250:	8818      	ldrh	r0, [r3, #0]
   d8252:	f004 fe74 	bl	dcf3e <digitalWrite>
	         VapeBuzzerOn=false;
   d8256:	2300      	movs	r3, #0
   d8258:	7023      	strb	r3, [r4, #0]
	       }
     }

    if (alertChanged())
   d825a:	f7fd fc49 	bl	d5af0 <_Z12alertChangedv>
   d825e:	2800      	cmp	r0, #0
   d8260:	d044      	beq.n	d82ec <_Z11readSensorsv+0xd6c>
    {
      if (currentAlert)
   d8262:	783b      	ldrb	r3, [r7, #0]
   d8264:	b353      	cbz	r3, d82bc <_Z11readSensorsv+0xd3c>
      {
          
        if (state.buzzerVapor==true)
   d8266:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
   d826a:	b1db      	cbz	r3, d82a4 <_Z11readSensorsv+0xd24>
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
   d826c:	4b77      	ldr	r3, [pc, #476]	; (d844c <_Z11readSensorsv+0xecc>)
   d826e:	2101      	movs	r1, #1
   d8270:	8818      	ldrh	r0, [r3, #0]
   d8272:	f004 fe64 	bl	dcf3e <digitalWrite>
   d8276:	f002 f93d 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
            VapeAlertBuzzerTime = millis();
   d827a:	4b72      	ldr	r3, [pc, #456]	; (d8444 <_Z11readSensorsv+0xec4>)
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d827c:	4974      	ldr	r1, [pc, #464]	; (d8450 <_Z11readSensorsv+0xed0>)
          
        if (state.buzzerVapor==true)
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
            VapeAlertBuzzerTime = millis();
   d827e:	6018      	str	r0, [r3, #0]
   d8280:	4602      	mov	r2, r0
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d8282:	a816      	add	r0, sp, #88	; 0x58
   d8284:	f002 fefa 	bl	db07c <_ZN6String6formatEPKcz>
   d8288:	a916      	add	r1, sp, #88	; 0x58
   d828a:	a806      	add	r0, sp, #24
   d828c:	f002 fe2f 	bl	daeee <_ZN6StringaSEOS_>
   d8290:	a816      	add	r0, sp, #88	; 0x58
   d8292:	f002 fd9b 	bl	dadcc <_ZN6StringD1Ev>
            DEBUG_PRINTLN(alertMessage);
   d8296:	f004 f93b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d829a:	9906      	ldr	r1, [sp, #24]
   d829c:	f002 ff5f 	bl	db15e <_ZN5Print7printlnEPKc>
	          VapeBuzzerOn=true;
   d82a0:	2301      	movs	r3, #1
   d82a2:	7023      	strb	r3, [r4, #0]
            //delay(8000);
        }
        if (state.notifyVapor==true)
   d82a4:	f895 3419 	ldrb.w	r3, [r5, #1049]	; 0x419
   d82a8:	b303      	cbz	r3, d82ec <_Z11readSensorsv+0xd6c>
        {
          #ifdef Version_2
          Blynk.logEvent("vape_alert");
   d82aa:	496a      	ldr	r1, [pc, #424]	; (d8454 <_Z11readSensorsv+0xed4>)
   d82ac:	4861      	ldr	r0, [pc, #388]	; (d8434 <_Z11readSensorsv+0xeb4>)
   d82ae:	f7fe ff79 	bl	d71a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
   d82b2:	f002 f91f 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
          VapeAlertTime = millis();
   d82b6:	4b68      	ldr	r3, [pc, #416]	; (d8458 <_Z11readSensorsv+0xed8>)
   d82b8:	6018      	str	r0, [r3, #0]
   d82ba:	e017      	b.n	d82ec <_Z11readSensorsv+0xd6c>
   d82bc:	f002 f91a 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
          #endif
        }
      }
      else
      {
       unsigned long elapsed = millis() - VapeAlertTime;
   d82c0:	4b65      	ldr	r3, [pc, #404]	; (d8458 <_Z11readSensorsv+0xed8>)
  	   alertMessage=String::format("Vape Alert total time %ul milliseconds", elapsed/10);
   d82c2:	4966      	ldr	r1, [pc, #408]	; (d845c <_Z11readSensorsv+0xedc>)
   d82c4:	681a      	ldr	r2, [r3, #0]
   d82c6:	230a      	movs	r3, #10
   d82c8:	1a82      	subs	r2, r0, r2
   d82ca:	a816      	add	r0, sp, #88	; 0x58
   d82cc:	fbb2 f2f3 	udiv	r2, r2, r3
   d82d0:	f002 fed4 	bl	db07c <_ZN6String6formatEPKcz>
   d82d4:	a916      	add	r1, sp, #88	; 0x58
   d82d6:	a806      	add	r0, sp, #24
   d82d8:	f002 fe09 	bl	daeee <_ZN6StringaSEOS_>
   d82dc:	a816      	add	r0, sp, #88	; 0x58
   d82de:	f002 fd75 	bl	dadcc <_ZN6StringD1Ev>
       DEBUG_PRINTLN(alertMessage);
   d82e2:	f004 f915 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d82e6:	9906      	ldr	r1, [sp, #24]
   d82e8:	f002 ff39 	bl	db15e <_ZN5Print7printlnEPKc>
        }
      }
      
    }

    if (batCharge<state.batThreshold)
   d82ec:	4b5c      	ldr	r3, [pc, #368]	; (d8460 <_Z11readSensorsv+0xee0>)
   d82ee:	4c5d      	ldr	r4, [pc, #372]	; (d8464 <_Z11readSensorsv+0xee4>)
   d82f0:	edd3 7a00 	vldr	s15, [r3]
   d82f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d82f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d82fc:	bf4c      	ite	mi
   d82fe:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d8300:	2300      	movpl	r3, #0
   d8302:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d8304:	f7fd fc08 	bl	d5b18 <_Z15batAlertChangedv>
   d8308:	b140      	cbz	r0, d831c <_Z11readSensorsv+0xd9c>
    {
      if (batCurrentAlert)
   d830a:	7823      	ldrb	r3, [r4, #0]
   d830c:	b133      	cbz	r3, d831c <_Z11readSensorsv+0xd9c>
      {
       if (state.notifyBattery==true)
   d830e:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   d8312:	b11b      	cbz	r3, d831c <_Z11readSensorsv+0xd9c>
        {
          #ifdef Version_2
          Blynk.logEvent("low_battery_alert_20");
   d8314:	4954      	ldr	r1, [pc, #336]	; (d8468 <_Z11readSensorsv+0xee8>)
   d8316:	4847      	ldr	r0, [pc, #284]	; (d8434 <_Z11readSensorsv+0xeb4>)
   d8318:	f7fe ff44 	bl	d71a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
    String alertMessage;
   d831c:	a806      	add	r0, sp, #24
   d831e:	f002 fd55 	bl	dadcc <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
   d8322:	a802      	add	r0, sp, #8
   d8324:	f002 fd52 	bl	dadcc <_ZN6StringD1Ev>
   d8328:	e00e      	b.n	d8348 <_Z11readSensorsv+0xdc8>
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d832a:	4620      	mov	r0, r4
   d832c:	f001 ff55 	bl	da1da <_ZN5SPS3014beginMeasuringEv>
   d8330:	b950      	cbnz	r0, d8348 <_Z11readSensorsv+0xdc8>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device 1");
   d8332:	f004 f8ed 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8336:	494d      	ldr	r1, [pc, #308]	; (d846c <_Z11readSensorsv+0xeec>)
   d8338:	f002 ff11 	bl	db15e <_ZN5Print7printlnEPKc>
      delay(1000);
   d833c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8340:	f003 fa20 	bl	db784 <delay>
      System.reset();
   d8344:	f002 fc86 	bl	dac54 <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d8348:	4b49      	ldr	r3, [pc, #292]	; (d8470 <_Z11readSensorsv+0xef0>)
   d834a:	4c4a      	ldr	r4, [pc, #296]	; (d8474 <_Z11readSensorsv+0xef4>)
   d834c:	781b      	ldrb	r3, [r3, #0]
   d834e:	b1f3      	cbz	r3, d838e <_Z11readSensorsv+0xe0e>
   d8350:	220a      	movs	r2, #10
   d8352:	6821      	ldr	r1, [r4, #0]
   d8354:	a812      	add	r0, sp, #72	; 0x48
   d8356:	f002 fdf5 	bl	daf44 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d835a:	a912      	add	r1, sp, #72	; 0x48
   d835c:	a816      	add	r0, sp, #88	; 0x58
   d835e:	f002 fdbb 	bl	daed8 <_ZN6StringC1ERKS_>
   d8362:	4945      	ldr	r1, [pc, #276]	; (d8478 <_Z11readSensorsv+0xef8>)
   d8364:	a816      	add	r0, sp, #88	; 0x58
   d8366:	f002 fe23 	bl	dafb0 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d836a:	4601      	mov	r1, r0
   d836c:	a81a      	add	r0, sp, #104	; 0x68
   d836e:	f002 fdb3 	bl	daed8 <_ZN6StringC1ERKS_>
   d8372:	aa1a      	add	r2, sp, #104	; 0x68
   d8374:	2115      	movs	r1, #21
   d8376:	482f      	ldr	r0, [pc, #188]	; (d8434 <_Z11readSensorsv+0xeb4>)
   d8378:	f7fe fafc 	bl	d6974 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d837c:	a81a      	add	r0, sp, #104	; 0x68
   d837e:	f002 fd25 	bl	dadcc <_ZN6StringD1Ev>
   d8382:	a816      	add	r0, sp, #88	; 0x58
   d8384:	f002 fd22 	bl	dadcc <_ZN6StringD1Ev>
   d8388:	a812      	add	r0, sp, #72	; 0x48
   d838a:	f002 fd1f 	bl	dadcc <_ZN6StringD1Ev>
  DEBUG_PRINT(millis());
   d838e:	f004 f8bf 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8392:	4605      	mov	r5, r0
   d8394:	f002 f8ae 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
   d8398:	220a      	movs	r2, #10
   d839a:	4601      	mov	r1, r0
   d839c:	4628      	mov	r0, r5
   d839e:	f002 ff08 	bl	db1b2 <_ZN5Print5printEmi>
  DEBUG_PRINT(": ");
   d83a2:	f004 f8b5 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d83a6:	4935      	ldr	r1, [pc, #212]	; (d847c <_Z11readSensorsv+0xefc>)
   d83a8:	f002 fec6 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(readingCount);
   d83ac:	f004 f8b0 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d83b0:	220a      	movs	r2, #10
   d83b2:	6821      	ldr	r1, [r4, #0]
   d83b4:	f002 ff50 	bl	db258 <_ZN5Print7printlnEii>
  DEBUG_PRINTLN();
   d83b8:	f004 f8aa 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d83bc:	f002 fec3 	bl	db146 <_ZN5Print7printlnEv>
  readingCount++;
   d83c0:	6823      	ldr	r3, [r4, #0]
   d83c2:	3301      	adds	r3, #1
   d83c4:	6023      	str	r3, [r4, #0]
}
   d83c6:	b025      	add	sp, #148	; 0x94
   d83c8:	ecbd 8b02 	vpop	{d8}
   d83cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d83d0:	f004 fe40 	bl	dd054 <_Z19__fetch_global_Wirev>
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
    {
      if (!Sensor.begin())
   d83d4:	4601      	mov	r1, r0
   d83d6:	482a      	ldr	r0, [pc, #168]	; (d8480 <_Z11readSensorsv+0xf00>)
   d83d8:	f001 ff04 	bl	da1e4 <_ZN5SPS305beginER7TwoWire>
   d83dc:	2800      	cmp	r0, #0
   d83de:	f47f ab17 	bne.w	d7a10 <_Z11readSensorsv+0x490>
      {
        DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d83e2:	f004 f895 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d83e6:	4927      	ldr	r1, [pc, #156]	; (d8484 <_Z11readSensorsv+0xf04>)
   d83e8:	f002 feb9 	bl	db15e <_ZN5Print7printlnEPKc>
        delay(1000);
   d83ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d83f0:	f003 f9c8 	bl	db784 <delay>
   d83f4:	f7ff bb03 	b.w	d79fe <_Z11readSensorsv+0x47e>
   d83f8:	f002 f87c 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d83fc:	1b00      	subs	r0, r0, r4
   d83fe:	42b0      	cmp	r0, r6
   d8400:	f63f ab16 	bhi.w	d7a30 <_Z11readSensorsv+0x4b0>
    {
      delay(100);
   d8404:	2064      	movs	r0, #100	; 0x64
   d8406:	f003 f9bd 	bl	db784 <delay>
      checkAccel();
   d840a:	f7fe fee7 	bl	d71dc <_Z10checkAccelv>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d840e:	f7ff bb09 	b.w	d7a24 <_Z11readSensorsv+0x4a4>
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d8412:	481d      	ldr	r0, [pc, #116]	; (d8488 <_Z11readSensorsv+0xf08>)
   d8414:	f001 f8e5 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d8418:	4604      	mov	r4, r0
   d841a:	f003 f9a2 	bl	db762 <_ZN9TimeClass3nowEv>
   d841e:	f7ff bb2e 	b.w	d7a7e <_Z11readSensorsv+0x4fe>
   d8422:	bf00      	nop
   d8424:	000e7051 	.word	0x000e7051
   d8428:	2003d7a8 	.word	0x2003d7a8
   d842c:	000e704f 	.word	0x000e704f
   d8430:	000e74dd 	.word	0x000e74dd
   d8434:	2003e1f4 	.word	0x2003e1f4
   d8438:	000e74d5 	.word	0x000e74d5
   d843c:	2003d560 	.word	0x2003d560
   d8440:	2003d7b8 	.word	0x2003d7b8
   d8444:	2003da00 	.word	0x2003da00
   d8448:	000e74e6 	.word	0x000e74e6
   d844c:	2003d52c 	.word	0x2003d52c
   d8450:	000e7501 	.word	0x000e7501
   d8454:	000e752a 	.word	0x000e752a
   d8458:	2003e160 	.word	0x2003e160
   d845c:	000e7535 	.word	0x000e7535
   d8460:	2003de50 	.word	0x2003de50
   d8464:	2003de8d 	.word	0x2003de8d
   d8468:	000e755c 	.word	0x000e755c
   d846c:	000e7571 	.word	0x000e7571
   d8470:	2003da05 	.word	0x2003da05
   d8474:	2003e1f0 	.word	0x2003e1f0
   d8478:	000e6c90 	.word	0x000e6c90
   d847c:	000e7e58 	.word	0x000e7e58
   d8480:	2003e1ac 	.word	0x2003e1ac
   d8484:	000e740e 	.word	0x000e740e
   d8488:	2003e134 	.word	0x2003e134
      }
    }
    
    if (!sps30OK)
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d848c:	f004 f840 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8490:	4905      	ldr	r1, [pc, #20]	; (d84a8 <_Z11readSensorsv+0xf28>)
   d8492:	f002 fe64 	bl	db15e <_ZN5Print7printlnEPKc>
      delay(1000);
   d8496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d849a:	f003 f973 	bl	db784 <delay>
      System.reset();    
   d849e:	f002 fbd9 	bl	dac54 <_ZN11SystemClass5resetEv>
   d84a2:	f7ff baba 	b.w	d7a1a <_Z11readSensorsv+0x49a>
   d84a6:	bf00      	nop
   d84a8:	000e759b 	.word	0x000e759b

000d84ac <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d84ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d84ae:	b08b      	sub	sp, #44	; 0x2c
   d84b0:	f002 f820 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  CycleOnTime = millis();
   d84b4:	4b84      	ldr	r3, [pc, #528]	; (d86c8 <setup+0x21c>)
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d84b6:	4c85      	ldr	r4, [pc, #532]	; (d86cc <setup+0x220>)
  }
}

void setup()
{
  CycleOnTime = millis();
   d84b8:	6018      	str	r0, [r3, #0]
  Wire.setSpeed(20000);
   d84ba:	f004 fdcb 	bl	dd054 <_Z19__fetch_global_Wirev>
   d84be:	f644 6120 	movw	r1, #20000	; 0x4e20
   d84c2:	f004 f89d 	bl	dc600 <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d84c6:	2103      	movs	r1, #3
   d84c8:	2008      	movs	r0, #8
   d84ca:	f004 fd27 	bl	dcf1c <pinMode>
  Serial.begin(115200);
   d84ce:	f003 fef1 	bl	dc2b4 <_Z16_fetch_usbserialv>
   d84d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d84d6:	f003 fee1 	bl	dc29c <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d84da:	f004 f819 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d84de:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d84e2:	f004 f80f 	bl	dc504 <_ZN11USARTSerial5beginEm>
  delay(100);
   d84e6:	2064      	movs	r0, #100	; 0x64
   d84e8:	f003 f94c 	bl	db784 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d84ec:	2101      	movs	r1, #1
   d84ee:	8820      	ldrh	r0, [r4, #0]
   d84f0:	f004 fd14 	bl	dcf1c <pinMode>
  digitalWrite(buzzer, LOW);
   d84f4:	2100      	movs	r1, #0
   d84f6:	8820      	ldrh	r0, [r4, #0]
   d84f8:	f004 fd21 	bl	dcf3e <digitalWrite>

  Wire.begin();
   d84fc:	f004 fdaa 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8500:	f004 f882 	bl	dc608 <_ZN7TwoWire5beginEv>
  delay(100);
   d8504:	2064      	movs	r0, #100	; 0x64
   d8506:	f003 f93d 	bl	db784 <delay>
  DEBUG_PRINTLN("Start Setup() function");
   d850a:	f004 f801 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d850e:	4970      	ldr	r1, [pc, #448]	; (d86d0 <setup+0x224>)
   d8510:	f002 fe25 	bl	db15e <_ZN5Print7printlnEPKc>
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  byte expandererror, expanderaddress;

  expanderaddress = 0x20; // MCP23017 address
  Wire.beginTransmission(expanderaddress);
   d8514:	f004 fd9e 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8518:	2120      	movs	r1, #32
   d851a:	f004 f895 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
  expandererror = Wire.endTransmission();
   d851e:	f004 fd99 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8522:	f004 f89c 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!expandererror==0)
   d8526:	2800      	cmp	r0, #0
   d8528:	d041      	beq.n	d85ae <setup+0x102>
  {
    Wire.reset();
   d852a:	f004 fd93 	bl	dd054 <_Z19__fetch_global_Wirev>
   d852e:	f004 f89d 	bl	dc66c <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(expanderaddress);
   d8532:	f004 fd8f 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8536:	2120      	movs	r1, #32
   d8538:	f004 f886 	bl	dc648 <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d853c:	f004 fd8a 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8540:	f004 f88d 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
  }

  // Blink LED and reset if there is an error
  if (!expandererror == 0)
   d8544:	b398      	cbz	r0, d85ae <setup+0x102>
  {
    DEBUG_PRINTLN("Unable to read Expander - resetting in 9 seconds");
   d8546:	f003 ffe3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d854a:	4962      	ldr	r1, [pc, #392]	; (d86d4 <setup+0x228>)
   d854c:	f002 fe07 	bl	db15e <_ZN5Print7printlnEPKc>
   d8550:	4b61      	ldr	r3, [pc, #388]	; (d86d8 <setup+0x22c>)
    Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d8552:	4a60      	ldr	r2, [pc, #384]	; (d86d4 <setup+0x228>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d8554:	781b      	ldrb	r3, [r3, #0]
   d8556:	4961      	ldr	r1, [pc, #388]	; (d86dc <setup+0x230>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d8558:	2400      	movs	r4, #0
   d855a:	a806      	add	r0, sp, #24
   d855c:	f88d 4000 	strb.w	r4, [sp]
   d8560:	f7fc ff58 	bl	d5414 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.24.constprop.29>
   d8564:	a807      	add	r0, sp, #28
   d8566:	f7fd faff 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    blinkRed.setActive(true);
   d856a:	2101      	movs	r1, #1
   d856c:	485c      	ldr	r0, [pc, #368]	; (d86e0 <setup+0x234>)
   d856e:	f7fc ff95 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d8572:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8576:	f003 f905 	bl	db784 <delay>
    blinkRed.setActive(false);
   d857a:	4621      	mov	r1, r4
   d857c:	4858      	ldr	r0, [pc, #352]	; (d86e0 <setup+0x234>)
   d857e:	f7fc ff8d 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    blinkYellow.setActive(true);
   d8582:	2101      	movs	r1, #1
   d8584:	4857      	ldr	r0, [pc, #348]	; (d86e4 <setup+0x238>)
   d8586:	f7fc ff89 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d858a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d858e:	f003 f8f9 	bl	db784 <delay>
    blinkYellow.setActive(false);
   d8592:	4621      	mov	r1, r4
   d8594:	4853      	ldr	r0, [pc, #332]	; (d86e4 <setup+0x238>)
   d8596:	f7fc ff81 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    blinkRed.setActive(true);
   d859a:	2101      	movs	r1, #1
   d859c:	4850      	ldr	r0, [pc, #320]	; (d86e0 <setup+0x234>)
   d859e:	f7fc ff7d 	bl	d549c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d85a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d85a6:	f003 f8ed 	bl	db784 <delay>
    System.reset();
   d85aa:	f002 fb53 	bl	dac54 <_ZN11SystemClass5resetEv>
  }
  // END CHECK
  //////////////////////////////////////////////////////////

  // Need this to switch on the power
  power.begin();
   d85ae:	484e      	ldr	r0, [pc, #312]	; (d86e8 <setup+0x23c>)
   d85b0:	f001 f8f8 	bl	d97a4 <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d85b4:	2201      	movs	r2, #1
   d85b6:	2102      	movs	r1, #2
   d85b8:	484b      	ldr	r0, [pc, #300]	; (d86e8 <setup+0x23c>)
   d85ba:	f001 f99d 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d85be:	2201      	movs	r2, #1
   d85c0:	2103      	movs	r1, #3
   d85c2:	4849      	ldr	r0, [pc, #292]	; (d86e8 <setup+0x23c>)
   d85c4:	f001 f998 	bl	d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d85c8:	2064      	movs	r0, #100	; 0x64
   d85ca:	f003 f8db 	bl	db784 <delay>

  uint32_t d1=0;
   d85ce:	aa0a      	add	r2, sp, #40	; 0x28
   d85d0:	2100      	movs	r1, #0
   d85d2:	f842 1d1c 	str.w	r1, [r2, #-28]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d85d6:	2304      	movs	r3, #4
   d85d8:	4844      	ldr	r0, [pc, #272]	; (d86ec <setup+0x240>)
   d85da:	f001 f847 	bl	d966c <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d85de:	f003 ff97 	bl	dc510 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d85e2:	9b03      	ldr	r3, [sp, #12]
   d85e4:	4a42      	ldr	r2, [pc, #264]	; (d86f0 <setup+0x244>)
   d85e6:	2101      	movs	r1, #1
   d85e8:	f002 ff00 	bl	db3ec <_ZN5Print11printf_implEbPKcz>

  SleepResult result = System.sleepResult();
   d85ec:	a804      	add	r0, sp, #16
   d85ee:	4941      	ldr	r1, [pc, #260]	; (d86f4 <setup+0x248>)
   d85f0:	f7fc ff28 	bl	d5444 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d85f4:	a804      	add	r0, sp, #16
   d85f6:	f002 fb87 	bl	dad08 <_ZNK11SleepResult6reasonEv>
   d85fa:	2803      	cmp	r0, #3
   d85fc:	d814      	bhi.n	d8628 <setup+0x17c>
   d85fe:	e8df f000 	tbb	[pc, r0]
   d8602:	0602      	.short	0x0602
   d8604:	0e0a      	.short	0x0e0a
    case WAKEUP_REASON_NONE: {
      DEBUG_PRINTLN("Device did not wake up from Particle sleep");
   d8606:	f003 ff83 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d860a:	493b      	ldr	r1, [pc, #236]	; (d86f8 <setup+0x24c>)
   d860c:	e00a      	b.n	d8624 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN: {
      DEBUG_PRINTLN("Device was woken up by a pin");
   d860e:	f003 ff7f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8612:	493a      	ldr	r1, [pc, #232]	; (d86fc <setup+0x250>)
   d8614:	e006      	b.n	d8624 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after a specified number of seconds)");
   d8616:	f003 ff7b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d861a:	4939      	ldr	r1, [pc, #228]	; (d8700 <setup+0x254>)
   d861c:	e002      	b.n	d8624 <setup+0x178>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
   d861e:	f003 ff77 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8622:	4938      	ldr	r1, [pc, #224]	; (d8704 <setup+0x258>)
   d8624:	f002 fd9b 	bl	db15e <_ZN5Print7printlnEPKc>
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d8628:	f003 ff72 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d862c:	4936      	ldr	r1, [pc, #216]	; (d8708 <setup+0x25c>)
   d862e:	4f37      	ldr	r7, [pc, #220]	; (d870c <setup+0x260>)

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d8630:	4e37      	ldr	r6, [pc, #220]	; (d8710 <setup+0x264>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d8632:	f002 fd94 	bl	db15e <_ZN5Print7printlnEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d8636:	4b36      	ldr	r3, [pc, #216]	; (d8710 <setup+0x264>)
   d8638:	4936      	ldr	r1, [pc, #216]	; (d8714 <setup+0x268>)
   d863a:	4834      	ldr	r0, [pc, #208]	; (d870c <setup+0x260>)
   d863c:	2207      	movs	r2, #7
   d863e:	f7fd f827 	bl	d5690 <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d8642:	2500      	movs	r5, #0
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d8644:	4604      	mov	r4, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
   d8646:	f003 ff63 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d864a:	012b      	lsls	r3, r5, #4
   d864c:	59d9      	ldr	r1, [r3, r7]
   d864e:	f002 fd73 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINT(": ");
   d8652:	f003 ff5d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8656:	4930      	ldr	r1, [pc, #192]	; (d8718 <setup+0x26c>)
   d8658:	f002 fd6e 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(i2cExists[x]);
   d865c:	f003 ff58 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8660:	5d71      	ldrb	r1, [r6, r5]
   d8662:	220a      	movs	r2, #10
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d8664:	3501      	adds	r5, #1
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d8666:	f002 fdf7 	bl	db258 <_ZN5Print7printlnEii>
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d866a:	2d07      	cmp	r5, #7
   d866c:	d1eb      	bne.n	d8646 <setup+0x19a>
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
  }
  if (!i2cOK)
   d866e:	2c00      	cmp	r4, #0
   d8670:	d15a      	bne.n	d8728 <setup+0x27c>
  {
    StateString = "ERR";
   d8672:	492a      	ldr	r1, [pc, #168]	; (d871c <setup+0x270>)
   d8674:	482a      	ldr	r0, [pc, #168]	; (d8720 <setup+0x274>)
   d8676:	f002 fc42 	bl	daefe <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C Issue");
   d867a:	f003 ff49 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d867e:	4929      	ldr	r1, [pc, #164]	; (d8724 <setup+0x278>)
   d8680:	f002 fd6d 	bl	db15e <_ZN5Print7printlnEPKc>
    RGB.control(true);
   d8684:	2001      	movs	r0, #1
   d8686:	f003 f8ba 	bl	db7fe <_ZN8RGBClass7controlEb>
    // the following sets the RGB LED to red
    RGB.color(255, 0, 0);
   d868a:	4622      	mov	r2, r4
   d868c:	4621      	mov	r1, r4
   d868e:	20ff      	movs	r0, #255	; 0xff
   d8690:	f003 f8c5 	bl	db81e <_ZN8RGBClass5colorEiii>
    delay(3000);
   d8694:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8698:	f003 f874 	bl	db784 <delay>
    // resume normal operation
    RGB.control(false);    
   d869c:	4620      	mov	r0, r4
   d869e:	f003 f8ae 	bl	db7fe <_ZN8RGBClass7controlEb>
    digitalWrite(buzzer, HIGH);
    delay(100);
    digitalWrite(buzzer, LOW);
#endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d86a2:	f004 fcd7 	bl	dd054 <_Z19__fetch_global_Wirev>
   d86a6:	f003 ffe1 	bl	dc66c <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d86aa:	f004 fcd3 	bl	dd054 <_Z19__fetch_global_Wirev>
   d86ae:	f003 ffd9 	bl	dc664 <_ZN7TwoWire9isEnabledEv>
   d86b2:	b918      	cbnz	r0, d86bc <setup+0x210>
      Wire.begin();
   d86b4:	f004 fcce 	bl	dd054 <_Z19__fetch_global_Wirev>
   d86b8:	f003 ffa6 	bl	dc608 <_ZN7TwoWire5beginEv>
    }
    Wire.end();
   d86bc:	f004 fcca 	bl	dd054 <_Z19__fetch_global_Wirev>
   d86c0:	f003 ffa8 	bl	dc614 <_ZN7TwoWire3endEv>
   d86c4:	e039      	b.n	d873a <setup+0x28e>
   d86c6:	bf00      	nop
   d86c8:	2003e138 	.word	0x2003e138
   d86cc:	2003d52c 	.word	0x2003d52c
   d86d0:	000e75c3 	.word	0x000e75c3
   d86d4:	000e7385 	.word	0x000e7385
   d86d8:	2003d6d4 	.word	0x2003d6d4
   d86dc:	000e73b6 	.word	0x000e73b6
   d86e0:	2003d688 	.word	0x2003d688
   d86e4:	2003d6b4 	.word	0x2003d6b4
   d86e8:	2003de6c 	.word	0x2003de6c
   d86ec:	2003d6a8 	.word	0x2003d6a8
   d86f0:	000e73bc 	.word	0x000e73bc
   d86f4:	2003e238 	.word	0x2003e238
   d86f8:	000e75da 	.word	0x000e75da
   d86fc:	000e7605 	.word	0x000e7605
   d8700:	000e7622 	.word	0x000e7622
   d8704:	000e7670 	.word	0x000e7670
   d8708:	000e73c2 	.word	0x000e73c2
   d870c:	2003d6d8 	.word	0x2003d6d8
   d8710:	2003ded0 	.word	0x2003ded0
   d8714:	2003d564 	.word	0x2003d564
   d8718:	000e7e58 	.word	0x000e7e58
   d871c:	000e73da 	.word	0x000e73da
   d8720:	2003d798 	.word	0x2003d798
   d8724:	000e73de 	.word	0x000e73de
  }
  else
  {
    StateString = "RDY";
   d8728:	4961      	ldr	r1, [pc, #388]	; (d88b0 <setup+0x404>)
   d872a:	4862      	ldr	r0, [pc, #392]	; (d88b4 <setup+0x408>)
   d872c:	f002 fbe7 	bl	daefe <_ZN6StringaSEPKc>
    DEBUG_PRINTLN("I2C OK");
   d8730:	f003 feee 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8734:	4960      	ldr	r1, [pc, #384]	; (d88b8 <setup+0x40c>)
   d8736:	f002 fd12 	bl	db15e <_ZN5Print7printlnEPKc>
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
    #endif
  }
  delay(200);
   d873a:	20c8      	movs	r0, #200	; 0xc8
   d873c:	f003 f822 	bl	db784 <delay>
  if (!i2cOK)
   d8740:	b90c      	cbnz	r4, d8746 <setup+0x29a>
  {
    System.reset();
   d8742:	f002 fa87 	bl	dac54 <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d8746:	485d      	ldr	r0, [pc, #372]	; (d88bc <setup+0x410>)
  DEBUG_PRINTLN("Before");
  DEBUG_PRINT(clockTime);
  DEBUG_PRINTLN(": ");
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d8748:	4d5d      	ldr	r5, [pc, #372]	; (d88c0 <setup+0x414>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d874a:	f000 ff4a 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d874e:	4604      	mov	r4, r0
  DEBUG_PRINTLN("Before");
   d8750:	f003 fede 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8754:	495b      	ldr	r1, [pc, #364]	; (d88c4 <setup+0x418>)
   d8756:	f002 fd02 	bl	db15e <_ZN5Print7printlnEPKc>
  DEBUG_PRINT(clockTime);
   d875a:	f003 fed9 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d875e:	220a      	movs	r2, #10
   d8760:	4621      	mov	r1, r4
   d8762:	f002 fd55 	bl	db210 <_ZN5Print5printEli>
  DEBUG_PRINTLN(": ");
   d8766:	f003 fed3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d876a:	4957      	ldr	r1, [pc, #348]	; (d88c8 <setup+0x41c>)
   d876c:	f002 fcf7 	bl	db15e <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d8770:	f003 fece 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8774:	682b      	ldr	r3, [r5, #0]
   d8776:	4955      	ldr	r1, [pc, #340]	; (d88cc <setup+0x420>)
   d8778:	4622      	mov	r2, r4
   d877a:	4606      	mov	r6, r0
   d877c:	a806      	add	r0, sp, #24
   d877e:	f002 ff9d 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d8782:	9906      	ldr	r1, [sp, #24]
   d8784:	4630      	mov	r0, r6
   d8786:	f002 fcea 	bl	db15e <_ZN5Print7printlnEPKc>
   d878a:	a806      	add	r0, sp, #24
   d878c:	f002 fb1e 	bl	dadcc <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d8790:	4b4f      	ldr	r3, [pc, #316]	; (d88d0 <setup+0x424>)
   d8792:	429c      	cmp	r4, r3
   d8794:	dc27      	bgt.n	d87e6 <setup+0x33a>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d8796:	494f      	ldr	r1, [pc, #316]	; (d88d4 <setup+0x428>)
   d8798:	4848      	ldr	r0, [pc, #288]	; (d88bc <setup+0x410>)
   d879a:	f000 fed9 	bl	d9550 <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d879e:	4847      	ldr	r0, [pc, #284]	; (d88bc <setup+0x410>)
   d87a0:	f000 ff1f 	bl	d95e2 <_ZN8MCP7941x6rtcNowEv>
   d87a4:	4604      	mov	r4, r0
    DEBUG_PRINTLN("After");
   d87a6:	f003 feb3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d87aa:	494b      	ldr	r1, [pc, #300]	; (d88d8 <setup+0x42c>)
   d87ac:	f002 fcd7 	bl	db15e <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d87b0:	f003 feae 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d87b4:	220a      	movs	r2, #10
   d87b6:	4621      	mov	r1, r4
   d87b8:	f002 fd2a 	bl	db210 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d87bc:	f003 fea8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d87c0:	4941      	ldr	r1, [pc, #260]	; (d88c8 <setup+0x41c>)
   d87c2:	f002 fccc 	bl	db15e <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d87c6:	f003 fea3 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d87ca:	682b      	ldr	r3, [r5, #0]
   d87cc:	493f      	ldr	r1, [pc, #252]	; (d88cc <setup+0x420>)
   d87ce:	4606      	mov	r6, r0
   d87d0:	4622      	mov	r2, r4
   d87d2:	a806      	add	r0, sp, #24
   d87d4:	f002 ff72 	bl	db6bc <_ZN9TimeClass6formatElPKc>
   d87d8:	9906      	ldr	r1, [sp, #24]
   d87da:	4630      	mov	r0, r6
   d87dc:	f002 fcbf 	bl	db15e <_ZN5Print7printlnEPKc>
   d87e0:	a806      	add	r0, sp, #24
   d87e2:	f002 faf3 	bl	dadcc <_ZN6StringD1Ev>
   d87e6:	f004 fc35 	bl	dd054 <_Z19__fetch_global_Wirev>

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d87ea:	4c3c      	ldr	r4, [pc, #240]	; (d88dc <setup+0x430>)
   d87ec:	4d3c      	ldr	r5, [pc, #240]	; (d88e0 <setup+0x434>)
    DEBUG_PRINTLN("After");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
  }
  Sensor.begin();
   d87ee:	4601      	mov	r1, r0
   d87f0:	483c      	ldr	r0, [pc, #240]	; (d88e4 <setup+0x438>)
   d87f2:	f001 fcf7 	bl	da1e4 <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d87f6:	483c      	ldr	r0, [pc, #240]	; (d88e8 <setup+0x43c>)
   d87f8:	f001 f927 	bl	d9a4a <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d87fc:	f7fc fff4 	bl	d57e8 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d8800:	6822      	ldr	r2, [r4, #0]
   d8802:	682b      	ldr	r3, [r5, #0]
   d8804:	429a      	cmp	r2, r3
   d8806:	d07f      	beq.n	d8908 <setup+0x45c>
  {
    // Then this is the first time running so set defaults
    DEBUG_PRINT("state.firstRunCheck = ");
   d8808:	f003 fe82 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d880c:	4937      	ldr	r1, [pc, #220]	; (d88ec <setup+0x440>)
   d880e:	f002 fc93 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(state.firstRunCheck);
   d8812:	f003 fe7d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8816:	220a      	movs	r2, #10
   d8818:	6821      	ldr	r1, [r4, #0]
   d881a:	f002 fd1d 	bl	db258 <_ZN5Print7printlnEii>
    DEBUG_PRINT("firstRunValue = ");
   d881e:	f003 fe77 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8822:	4933      	ldr	r1, [pc, #204]	; (d88f0 <setup+0x444>)
   d8824:	f002 fc88 	bl	db138 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(firstRunValue);    
   d8828:	f003 fe72 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d882c:	220a      	movs	r2, #10
   d882e:	6829      	ldr	r1, [r5, #0]
   d8830:	f002 fd12 	bl	db258 <_ZN5Print7printlnEii>
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
   d8834:	2318      	movs	r3, #24
   d8836:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d8838:	2305      	movs	r3, #5
   d883a:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d883c:	492d      	ldr	r1, [pc, #180]	; (d88f4 <setup+0x448>)
    DEBUG_PRINT("firstRunValue = ");
    DEBUG_PRINTLN(firstRunValue);    
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d883e:	4b2e      	ldr	r3, [pc, #184]	; (d88f8 <setup+0x44c>)
   d8840:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d8842:	f104 0010 	add.w	r0, r4, #16
   d8846:	f00b f979 	bl	e3b3c <strcpy>
    strcpy(state.email,"bistany@comcast.net");
   d884a:	492c      	ldr	r1, [pc, #176]	; (d88fc <setup+0x450>)
   d884c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d8850:	f00b f974 	bl	e3b3c <strcpy>
    strcpy(state.batEmail,"bistany@comcast.net");
   d8854:	4929      	ldr	r1, [pc, #164]	; (d88fc <setup+0x450>)
   d8856:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d885a:	f00b f96f 	bl	e3b3c <strcpy>
    strcpy(state.tamperEmail,"bistany@comcast.net");
   d885e:	4927      	ldr	r1, [pc, #156]	; (d88fc <setup+0x450>)
   d8860:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d8864:	f00b f96a 	bl	e3b3c <strcpy>
    state.batThreshold = 20.0;
   d8868:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d886c:	4a24      	ldr	r2, [pc, #144]	; (d8900 <setup+0x454>)
   d886e:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d8870:	2264      	movs	r2, #100	; 0x64
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d8872:	2300      	movs	r3, #0
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d8874:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
    state.buzzerTamper=true;  // Buzzer Tamper
   d8878:	2201      	movs	r2, #1
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d887a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d887e:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d8882:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d8886:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d888a:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d888e:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d8892:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d8896:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    // firstRun = true;
    state.deviceZone=0; //America/New_York
   d889a:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    // Save state
    // saveState(); // Move this to the initializeAppWidget() function
    DEBUG_PRINTLN("First run.");
   d889e:	f003 fe37 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d88a2:	4918      	ldr	r1, [pc, #96]	; (d8904 <setup+0x458>)
   d88a4:	f002 fc5b 	bl	db15e <_ZN5Print7printlnEPKc>
    // Force a connect here for the first time the device runs
    connect();
   d88a8:	f7fe fd2c 	bl	d7304 <_Z7connectv>
   d88ac:	e031      	b.n	d8912 <setup+0x466>
   d88ae:	bf00      	nop
   d88b0:	000e73e8 	.word	0x000e73e8
   d88b4:	2003d798 	.word	0x2003d798
   d88b8:	000e73ec 	.word	0x000e73ec
   d88bc:	2003e134 	.word	0x2003e134
   d88c0:	2003d574 	.word	0x2003d574
   d88c4:	000e73f3 	.word	0x000e73f3
   d88c8:	000e7e58 	.word	0x000e7e58
   d88cc:	2003e26c 	.word	0x2003e26c
   d88d0:	386d437f 	.word	0x386d437f
   d88d4:	4b3d3b00 	.word	0x4b3d3b00
   d88d8:	000e73fa 	.word	0x000e73fa
   d88dc:	2003da40 	.word	0x2003da40
   d88e0:	2003d534 	.word	0x2003d534
   d88e4:	2003e1ac 	.word	0x2003e1ac
   d88e8:	2003da08 	.word	0x2003da08
   d88ec:	000e76ce 	.word	0x000e76ce
   d88f0:	000e76e5 	.word	0x000e76e5
   d88f4:	000e76f6 	.word	0x000e76f6
   d88f8:	c31c0000 	.word	0xc31c0000
   d88fc:	000e772e 	.word	0x000e772e
   d8900:	41a00000 	.word	0x41a00000
   d8904:	000e7742 	.word	0x000e7742
  }
  else
  {
    DEBUG_PRINTLN("Not first run.");
   d8908:	f003 fe02 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d890c:	499c      	ldr	r1, [pc, #624]	; (d8b80 <setup+0x6d4>)
   d890e:	f002 fc26 	bl	db15e <_ZN5Print7printlnEPKc>
  }


/////////////
// Setup ADXL345
  DEBUG_PRINT("ADXL345 Setup");
   d8912:	f003 fdfd 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8916:	499b      	ldr	r1, [pc, #620]	; (d8b84 <setup+0x6d8>)
   d8918:	f002 fc0e 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN();
   d891c:	f003 fdf8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8920:	f002 fc11 	bl	db146 <_ZN5Print7printlnEv>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d8924:	4898      	ldr	r0, [pc, #608]	; (d8b88 <setup+0x6dc>)
   d8926:	f001 f890 	bl	d9a4a <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d892a:	2104      	movs	r1, #4
   d892c:	4896      	ldr	r0, [pc, #600]	; (d8b88 <setup+0x6dc>)
   d892e:	f001 f8d9 	bl	d9ae4 <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d8932:	2301      	movs	r3, #1
   d8934:	461a      	mov	r2, r3
   d8936:	4619      	mov	r1, r3
   d8938:	4893      	ldr	r0, [pc, #588]	; (d8b88 <setup+0x6dc>)
   d893a:	f001 f942 	bl	d9bc2 <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d893e:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d8942:	4891      	ldr	r0, [pc, #580]	; (d8b88 <setup+0x6dc>)
   d8944:	f001 f8ee 	bl	d9b24 <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d8948:	2301      	movs	r3, #1
   d894a:	461a      	mov	r2, r3
   d894c:	4619      	mov	r1, r3
   d894e:	488e      	ldr	r0, [pc, #568]	; (d8b88 <setup+0x6dc>)
   d8950:	f001 f956 	bl	d9c00 <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d8954:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d8958:	488b      	ldr	r0, [pc, #556]	; (d8b88 <setup+0x6dc>)
   d895a:	f001 f8e9 	bl	d9b30 <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d895e:	210a      	movs	r1, #10
   d8960:	4889      	ldr	r0, [pc, #548]	; (d8b88 <setup+0x6dc>)
   d8962:	f001 f8eb 	bl	d9b3c <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d8966:	2501      	movs	r5, #1
   d8968:	2300      	movs	r3, #0
   d896a:	461a      	mov	r2, r3
   d896c:	4619      	mov	r1, r3
   d896e:	9501      	str	r5, [sp, #4]
   d8970:	9500      	str	r5, [sp, #0]
   d8972:	4885      	ldr	r0, [pc, #532]	; (d8b88 <setup+0x6dc>)
   d8974:	f001 f959 	bl	d9c2a <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d8978:	4629      	mov	r1, r5
   d897a:	4883      	ldr	r0, [pc, #524]	; (d8b88 <setup+0x6dc>)
   d897c:	f001 f9a4 	bl	d9cc8 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d8980:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d8982:	4d82      	ldr	r5, [pc, #520]	; (d8b8c <setup+0x6e0>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d8984:	4880      	ldr	r0, [pc, #512]	; (d8b88 <setup+0x6dc>)
   d8986:	f001 f999 	bl	d9cbc <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d898a:	8828      	ldrh	r0, [r5, #0]
   d898c:	2100      	movs	r1, #0
   d898e:	f004 fac5 	bl	dcf1c <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d8992:	2200      	movs	r2, #0
   d8994:	f04f 33ff 	mov.w	r3, #4294967295
   d8998:	497d      	ldr	r1, [pc, #500]	; (d8b90 <setup+0x6e4>)
   d899a:	8828      	ldrh	r0, [r5, #0]
   d899c:	9200      	str	r2, [sp, #0]
   d899e:	f003 fcb1 	bl	dc304 <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  DEBUG_PRINTLN();
   d89a2:	f003 fdb5 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89a6:	f002 fbce 	bl	db146 <_ZN5Print7printlnEv>


/////////////
  DEBUG_PRINTLN();
   d89aa:	f003 fdb1 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89ae:	f002 fbca 	bl	db146 <_ZN5Print7printlnEv>
  DEBUG_PRINTLN("Setting Up");
   d89b2:	f003 fdad 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89b6:	4977      	ldr	r1, [pc, #476]	; (d8b94 <setup+0x6e8>)
   d89b8:	f002 fbd1 	bl	db15e <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(iSoftwareVersion);
   d89bc:	f003 fda8 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89c0:	4b75      	ldr	r3, [pc, #468]	; (d8b98 <setup+0x6ec>)
   d89c2:	6819      	ldr	r1, [r3, #0]
   d89c4:	f002 fbcb 	bl	db15e <_ZN5Print7printlnEPKc>
  DEBUG_PRINT("Vsup for all sensors = ");
   d89c8:	f003 fda2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89cc:	4973      	ldr	r1, [pc, #460]	; (d8b9c <setup+0x6f0>)
   d89ce:	f002 fbb3 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vsup);
   d89d2:	f003 fd9d 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89d6:	4b72      	ldr	r3, [pc, #456]	; (d8ba0 <setup+0x6f4>)
   d89d8:	4605      	mov	r5, r0
   d89da:	6818      	ldr	r0, [r3, #0]
   d89dc:	f00a f92c 	bl	e2c38 <__aeabi_f2d>
   d89e0:	ec41 0b10 	vmov	d0, r0, r1
   d89e4:	2102      	movs	r1, #2
   d89e6:	4628      	mov	r0, r5
   d89e8:	f002 fcf5 	bl	db3d6 <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vcc for all sensors = ");
   d89ec:	f003 fd90 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89f0:	496c      	ldr	r1, [pc, #432]	; (d8ba4 <setup+0x6f8>)
   d89f2:	f002 fba1 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vcc);
   d89f6:	f003 fd8b 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d89fa:	4b6b      	ldr	r3, [pc, #428]	; (d8ba8 <setup+0x6fc>)
   d89fc:	4605      	mov	r5, r0
   d89fe:	6818      	ldr	r0, [r3, #0]
   d8a00:	f00a f91a 	bl	e2c38 <__aeabi_f2d>
   d8a04:	ec41 0b10 	vmov	d0, r0, r1
   d8a08:	2102      	movs	r1, #2
   d8a0a:	4628      	mov	r0, r5
   d8a0c:	f002 fce3 	bl	db3d6 <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vref for sensor 1 = ");
   d8a10:	f003 fd7e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a14:	4965      	ldr	r1, [pc, #404]	; (d8bac <setup+0x700>)
  DEBUG_PRINTLN(sensor1._Vref);
   d8a16:	4d66      	ldr	r5, [pc, #408]	; (d8bb0 <setup+0x704>)
  DEBUG_PRINTLN(iSoftwareVersion);
  DEBUG_PRINT("Vsup for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vsup);
  DEBUG_PRINT("Vcc for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vcc);
  DEBUG_PRINT("Vref for sensor 1 = ");
   d8a18:	f002 fb8e 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Vref);
   d8a1c:	f003 fd78 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a20:	4606      	mov	r6, r0
   d8a22:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d8a24:	f00a f908 	bl	e2c38 <__aeabi_f2d>
   d8a28:	ec41 0b10 	vmov	d0, r0, r1
   d8a2c:	2102      	movs	r1, #2
   d8a2e:	4630      	mov	r0, r6
   d8a30:	f002 fcd1 	bl	db3d6 <_ZN5Print7printlnEdi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  DEBUG_PRINTLN(sensor1._Voff = state.zeroOff);
   d8a34:	f003 fd6c 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a38:	4606      	mov	r6, r0
   d8a3a:	68e0      	ldr	r0, [r4, #12]
   d8a3c:	6268      	str	r0, [r5, #36]	; 0x24
   d8a3e:	f00a f8fb 	bl	e2c38 <__aeabi_f2d>
   d8a42:	ec41 0b10 	vmov	d0, r0, r1
   d8a46:	2102      	movs	r1, #2
   d8a48:	4630      	mov	r0, r6
   d8a4a:	f002 fcc4 	bl	db3d6 <_ZN5Print7printlnEdi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   DEBUG_PRINT("Vzero = ");
  //   DEBUG_PRINTLN(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  DEBUG_PRINT("Tzero = ");
   d8a4e:	f003 fd5f 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a52:	4958      	ldr	r1, [pc, #352]	; (d8bb4 <setup+0x708>)
   d8a54:	f002 fb70 	bl	db138 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Tz);
   d8a58:	f003 fd5a 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a5c:	4606      	mov	r6, r0
   d8a5e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d8a60:	f00a f8ea 	bl	e2c38 <__aeabi_f2d>
   d8a64:	ec41 0b10 	vmov	d0, r0, r1
   d8a68:	2102      	movs	r1, #2
   d8a6a:	4630      	mov	r0, r6
   d8a6c:	f002 fcb3 	bl	db3d6 <_ZN5Print7printlnEdi>
  //sensor1.setXSpan();                                
  //Must have previously zeroed in clean air, returns new span factor.
  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  DEBUG_PRINTLN("Finished Setting Up");
   d8a70:	f003 fd4e 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a74:	4950      	ldr	r1, [pc, #320]	; (d8bb8 <setup+0x70c>)
   d8a76:	f002 fb72 	bl	db15e <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN("T1, mV1, C1");
   d8a7a:	f003 fd49 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8a7e:	494f      	ldr	r1, [pc, #316]	; (d8bbc <setup+0x710>)
   d8a80:	f002 fb6d 	bl	db15e <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d8a84:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d8a88:	f002 fe7c 	bl	db784 <delay>
   d8a8c:	f001 fd32 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
   d8a90:	4605      	mov	r5, r0
   d8a92:	f001 fd2f 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>

  // SPS30 checks
  bool sps30OK = false;
  uint32_t sps30start = millis();

  while (!sps30OK && millis()-sps30start<8000)
   d8a96:	1b40      	subs	r0, r0, r5
   d8a98:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d8a9c:	d264      	bcs.n	d8b68 <setup+0x6bc>
   d8a9e:	f004 fad9 	bl	dd054 <_Z19__fetch_global_Wirev>
  {
    if (!Sensor.begin())
   d8aa2:	4601      	mov	r1, r0
   d8aa4:	4846      	ldr	r0, [pc, #280]	; (d8bc0 <setup+0x714>)
   d8aa6:	f001 fb9d 	bl	da1e4 <_ZN5SPS305beginER7TwoWire>
   d8aaa:	b948      	cbnz	r0, d8ac0 <setup+0x614>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - trying again");
   d8aac:	f003 fd30 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8ab0:	4944      	ldr	r1, [pc, #272]	; (d8bc4 <setup+0x718>)
   d8ab2:	f002 fb54 	bl	db15e <_ZN5Print7printlnEPKc>
      delay(1000);
   d8ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8aba:	f002 fe63 	bl	db784 <delay>
   d8abe:	e7e8      	b.n	d8a92 <setup+0x5e6>
    }
    else
    {
      DEBUG_PRINTLN("Read SPS30");
   d8ac0:	f003 fd26 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8ac4:	4940      	ldr	r1, [pc, #256]	; (d8bc8 <setup+0x71c>)
   d8ac6:	f002 fb4a 	bl	db15e <_ZN5Print7printlnEPKc>
    delay(1000);
    System.reset();    
  }

  #ifdef Version_2
  Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d8aca:	4b40      	ldr	r3, [pc, #256]	; (d8bcc <setup+0x720>)
   d8acc:	4a40      	ldr	r2, [pc, #256]	; (d8bd0 <setup+0x724>)
   d8ace:	881b      	ldrh	r3, [r3, #0]
   d8ad0:	4940      	ldr	r1, [pc, #256]	; (d8bd4 <setup+0x728>)
   d8ad2:	4841      	ldr	r0, [pc, #260]	; (d8bd8 <setup+0x72c>)
   d8ad4:	f7fc fdc2 	bl	d565c <_ZN13BlynkParticle6configEPKcS1_t>
  #else
  Blynk.config(auth, "zeptosense.blynk.cc");
  #endif

  connectWithoutWaiting();
   d8ad8:	f7fe fcde 	bl	d7498 <_Z21connectWithoutWaitingv>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d8adc:	2300      	movs	r3, #0
   d8ade:	9301      	str	r3, [sp, #4]
   d8ae0:	9300      	str	r3, [sp, #0]
   d8ae2:	461a      	mov	r2, r3
   d8ae4:	493d      	ldr	r1, [pc, #244]	; (d8bdc <setup+0x730>)
   d8ae6:	483e      	ldr	r0, [pc, #248]	; (d8be0 <setup+0x734>)
   d8ae8:	f001 ffb4 	bl	daa54 <spark_subscribe>
  //*** Commented out for testing without particle connected ***
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d8aec:	4b3d      	ldr	r3, [pc, #244]	; (d8be4 <setup+0x738>)
   d8aee:	781b      	ldrb	r3, [r3, #0]
   d8af0:	b90b      	cbnz	r3, d8af6 <setup+0x64a>
  {
    publishGMTOffsetRequest();
   d8af2:	f7fd f84f 	bl	d5b94 <_Z23publishGMTOffsetRequestv>
   d8af6:	f001 fcfd 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8afa:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d8afe:	4605      	mov	r5, r0
   d8b00:	482f      	ldr	r0, [pc, #188]	; (d8bc0 <setup+0x714>)
   d8b02:	f001 f9dc 	bl	d9ebe <_ZN5SPS3013dataAvailableEv>
   d8b06:	b950      	cbnz	r0, d8b1e <setup+0x672>
   d8b08:	f001 fcf4 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
   d8b0c:	1b40      	subs	r0, r0, r5
   d8b0e:	42b0      	cmp	r0, r6
   d8b10:	d805      	bhi.n	d8b1e <setup+0x672>
  {
    delay(100);
   d8b12:	2064      	movs	r0, #100	; 0x64
   d8b14:	f002 fe36 	bl	db784 <delay>
    checkAccel();
   d8b18:	f7fe fb60 	bl	d71dc <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8b1c:	e7f0      	b.n	d8b00 <setup+0x654>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d8b1e:	68a3      	ldr	r3, [r4, #8]
   d8b20:	4a31      	ldr	r2, [pc, #196]	; (d8be8 <setup+0x73c>)
   d8b22:	4832      	ldr	r0, [pc, #200]	; (d8bec <setup+0x740>)
   d8b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d8b28:	4359      	muls	r1, r3
   d8b2a:	f001 fbc3 	bl	da2b4 <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d8b2e:	482f      	ldr	r0, [pc, #188]	; (d8bec <setup+0x740>)
   d8b30:	f001 fbe2 	bl	da2f8 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d8b34:	4a2e      	ldr	r2, [pc, #184]	; (d8bf0 <setup+0x744>)
   d8b36:	482f      	ldr	r0, [pc, #188]	; (d8bf4 <setup+0x748>)
   d8b38:	216f      	movs	r1, #111	; 0x6f
   d8b3a:	f001 fbbb 	bl	da2b4 <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d8b3e:	482d      	ldr	r0, [pc, #180]	; (d8bf4 <setup+0x748>)
   d8b40:	f001 fbda 	bl	da2f8 <_ZN10BlynkTimer3runEv>

  DEBUG_PRINTLN("Setup complete");
   d8b44:	f003 fce4 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8b48:	492b      	ldr	r1, [pc, #172]	; (d8bf8 <setup+0x74c>)
   d8b4a:	f002 fb08 	bl	db15e <_ZN5Print7printlnEPKc>
  StateString = "RDY";
   d8b4e:	492b      	ldr	r1, [pc, #172]	; (d8bfc <setup+0x750>)
   d8b50:	482b      	ldr	r0, [pc, #172]	; (d8c00 <setup+0x754>)
   d8b52:	f002 f9d4 	bl	daefe <_ZN6StringaSEPKc>
  readSensors(); 
   d8b56:	f7fe fd13 	bl	d7580 <_Z11readSensorsv>
  DEBUG_PRINTLN("End Setup() function");
   d8b5a:	f003 fcd9 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8b5e:	4929      	ldr	r1, [pc, #164]	; (d8c04 <setup+0x758>)
   d8b60:	f002 fafd 	bl	db15e <_ZN5Print7printlnEPKc>
}
   d8b64:	b00b      	add	sp, #44	; 0x2c
   d8b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
  }
  
  if (!sps30OK)
  {
    DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d8b68:	f003 fcd2 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8b6c:	4926      	ldr	r1, [pc, #152]	; (d8c08 <setup+0x75c>)
   d8b6e:	f002 faf6 	bl	db15e <_ZN5Print7printlnEPKc>
    delay(1000);
   d8b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8b76:	f002 fe05 	bl	db784 <delay>
    System.reset();    
   d8b7a:	f002 f86b 	bl	dac54 <_ZN11SystemClass5resetEv>
   d8b7e:	e7a4      	b.n	d8aca <setup+0x61e>
   d8b80:	000e774d 	.word	0x000e774d
   d8b84:	000e7400 	.word	0x000e7400
   d8b88:	2003da08 	.word	0x2003da08
   d8b8c:	2003d538 	.word	0x2003d538
   d8b90:	000d52f5 	.word	0x000d52f5
   d8b94:	000e77b2 	.word	0x000e77b2
   d8b98:	2003e1e0 	.word	0x2003e1e0
   d8b9c:	000e775c 	.word	0x000e775c
   d8ba0:	2003d570 	.word	0x2003d570
   d8ba4:	000e7774 	.word	0x000e7774
   d8ba8:	2003d56c 	.word	0x2003d56c
   d8bac:	000e778b 	.word	0x000e778b
   d8bb0:	2003de90 	.word	0x2003de90
   d8bb4:	000e77a0 	.word	0x000e77a0
   d8bb8:	000e77a9 	.word	0x000e77a9
   d8bbc:	000e77bd 	.word	0x000e77bd
   d8bc0:	2003e1ac 	.word	0x2003e1ac
   d8bc4:	000e740e 	.word	0x000e740e
   d8bc8:	000e7432 	.word	0x000e7432
   d8bcc:	2003d530 	.word	0x2003d530
   d8bd0:	000e72af 	.word	0x000e72af
   d8bd4:	2003d53c 	.word	0x2003d53c
   d8bd8:	2003e1f4 	.word	0x2003e1f4
   d8bdc:	000d5355 	.word	0x000d5355
   d8be0:	000e77c9 	.word	0x000e77c9
   d8be4:	2003e16c 	.word	0x2003e16c
   d8be8:	000d7581 	.word	0x000d7581
   d8bec:	2003d7bc 	.word	0x2003d7bc
   d8bf0:	000d71dd 	.word	0x000d71dd
   d8bf4:	2003ded8 	.word	0x2003ded8
   d8bf8:	000e77e1 	.word	0x000e77e1
   d8bfc:	000e73e8 	.word	0x000e73e8
   d8c00:	2003d798 	.word	0x2003d798
   d8c04:	000e77f0 	.word	0x000e77f0
   d8c08:	000e759b 	.word	0x000e759b

000d8c0c <loop>:
  readSensors(); 
  DEBUG_PRINTLN("End Setup() function");
}

void loop()
{
   d8c0c:	b513      	push	{r0, r1, r4, lr}
   //If woken up by a RTC Sleep then was in Standby so go into Deep Sleep now
  SleepResult result = System.sleepResult();
   d8c0e:	491c      	ldr	r1, [pc, #112]	; (d8c80 <loop+0x74>)
   d8c10:	4c1c      	ldr	r4, [pc, #112]	; (d8c84 <loop+0x78>)
   d8c12:	4668      	mov	r0, sp
   d8c14:	f7fc fc16 	bl	d5444 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d8c18:	4668      	mov	r0, sp
   d8c1a:	f002 f875 	bl	dad08 <_ZNK11SleepResult6reasonEv>
   d8c1e:	2802      	cmp	r0, #2
   d8c20:	d111      	bne.n	d8c46 <loop+0x3a>
    }
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
   d8c22:	f003 fc75 	bl	dc510 <_Z22__fetch_global_Serial1v>
   d8c26:	4918      	ldr	r1, [pc, #96]	; (d8c88 <loop+0x7c>)
   d8c28:	f002 fa99 	bl	db15e <_ZN5Print7printlnEPKc>
      state.bSleepModeStandby=false;
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8c2c:	4b17      	ldr	r3, [pc, #92]	; (d8c8c <loop+0x80>)
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8c2e:	2100      	movs	r1, #0
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8c30:	8818      	ldrh	r0, [r3, #0]
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep");
      state.bSleepModeStandby=false;
   d8c32:	f884 1424 	strb.w	r1, [r4, #1060]	; 0x424
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d8c36:	f004 f982 	bl	dcf3e <digitalWrite>
      delay(2000);
   d8c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8c3e:	f002 fda1 	bl	db784 <delay>
      deepSleep();
   d8c42:	f7fd fda5 	bl	d6790 <_Z9deepSleepv>
    case WAKEUP_REASON_PIN_OR_RTC: {
      break;
    }
  }

  Blynk.run();
   d8c46:	2100      	movs	r1, #0
   d8c48:	4811      	ldr	r0, [pc, #68]	; (d8c90 <loop+0x84>)
   d8c4a:	f7fd fb7f 	bl	d634c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d8c4e:	4811      	ldr	r0, [pc, #68]	; (d8c94 <loop+0x88>)
   d8c50:	f001 fb52 	bl	da2f8 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d8c54:	4810      	ldr	r0, [pc, #64]	; (d8c98 <loop+0x8c>)
   d8c56:	f001 fb4f 	bl	da2f8 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d8c5a:	4b10      	ldr	r3, [pc, #64]	; (d8c9c <loop+0x90>)
   d8c5c:	6862      	ldr	r2, [r4, #4]
   d8c5e:	681b      	ldr	r3, [r3, #0]
   d8c60:	429a      	cmp	r2, r3
   d8c62:	dc0a      	bgt.n	d8c7a <loop+0x6e>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d8c64:	4b09      	ldr	r3, [pc, #36]	; (d8c8c <loop+0x80>)
   d8c66:	2100      	movs	r1, #0
   d8c68:	8818      	ldrh	r0, [r3, #0]
   d8c6a:	f004 f968 	bl	dcf3e <digitalWrite>
    delay(2000);
   d8c6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d8c72:	f002 fd87 	bl	db784 <delay>
    deepSleep();
   d8c76:	f7fd fd8b 	bl	d6790 <_Z9deepSleepv>
  }

}
   d8c7a:	b002      	add	sp, #8
   d8c7c:	bd10      	pop	{r4, pc}
   d8c7e:	bf00      	nop
   d8c80:	2003e238 	.word	0x2003e238
   d8c84:	2003da40 	.word	0x2003da40
   d8c88:	000e7805 	.word	0x000e7805
   d8c8c:	2003d52c 	.word	0x2003d52c
   d8c90:	2003e1f4 	.word	0x2003e1f4
   d8c94:	2003d7bc 	.word	0x2003d7bc
   d8c98:	2003ded8 	.word	0x2003ded8
   d8c9c:	2003e1f0 	.word	0x2003e1f0

000d8ca0 <_GLOBAL__sub_I_CycleOnTime>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8ca0:	4b98      	ldr	r3, [pc, #608]	; (d8f04 <_GLOBAL__sub_I_CycleOnTime+0x264>)
   d8ca2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8ca6:	2500      	movs	r5, #0
   d8ca8:	601d      	str	r5, [r3, #0]
   d8caa:	4b97      	ldr	r3, [pc, #604]	; (d8f08 <_GLOBAL__sub_I_CycleOnTime+0x268>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d8cac:	4e97      	ldr	r6, [pc, #604]	; (d8f0c <_GLOBAL__sub_I_CycleOnTime+0x26c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d8cae:	4c98      	ldr	r4, [pc, #608]	; (d8f10 <_GLOBAL__sub_I_CycleOnTime+0x270>)

// SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8cb0:	f8df 82ec 	ldr.w	r8, [pc, #748]	; d8fa0 <_GLOBAL__sub_I_CycleOnTime+0x300>
   d8cb4:	2701      	movs	r7, #1
   d8cb6:	601f      	str	r7, [r3, #0]
   d8cb8:	4b96      	ldr	r3, [pc, #600]	; (d8f14 <_GLOBAL__sub_I_CycleOnTime+0x274>)
   d8cba:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d8cbc:	f001 fb9a 	bl	da3f4 <HAL_Pin_Map>
   d8cc0:	4630      	mov	r0, r6
   d8cc2:	f004 f845 	bl	dcd50 <_ZN9TCPClientC1Ev>
   d8cc6:	f106 001c 	add.w	r0, r6, #28
   d8cca:	f003 fa43 	bl	dc154 <_ZN9IPAddressC1Ev>
   d8cce:	4622      	mov	r2, r4
   d8cd0:	4991      	ldr	r1, [pc, #580]	; (d8f18 <_GLOBAL__sub_I_CycleOnTime+0x278>)
   d8cd2:	6375      	str	r5, [r6, #52]	; 0x34
   d8cd4:	4630      	mov	r0, r6
   d8cd6:	8735      	strh	r5, [r6, #56]	; 0x38
   d8cd8:	f004 f9fc 	bl	dd0d4 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d8cdc:	4b8f      	ldr	r3, [pc, #572]	; (d8f1c <_GLOBAL__sub_I_CycleOnTime+0x27c>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d8cde:	462a      	mov	r2, r5
   d8ce0:	601e      	str	r6, [r3, #0]
   d8ce2:	605d      	str	r5, [r3, #4]
   d8ce4:	609d      	str	r5, [r3, #8]
   d8ce6:	60dd      	str	r5, [r3, #12]
   d8ce8:	611d      	str	r5, [r3, #16]
   d8cea:	615d      	str	r5, [r3, #20]
   d8cec:	831d      	strh	r5, [r3, #24]
   d8cee:	835d      	strh	r5, [r3, #26]
   d8cf0:	771d      	strb	r5, [r3, #28]
   d8cf2:	775d      	strb	r5, [r3, #29]
   d8cf4:	2114      	movs	r1, #20
   d8cf6:	2002      	movs	r0, #2
   d8cf8:	f001 fe16 	bl	da928 <led_pattern_period>
   d8cfc:	4e88      	ldr	r6, [pc, #544]	; (d8f20 <_GLOBAL__sub_I_CycleOnTime+0x280>)
   d8cfe:	9701      	str	r7, [sp, #4]
   d8d00:	f04f 091e 	mov.w	r9, #30
   d8d04:	4603      	mov	r3, r0
   d8d06:	f8cd 9000 	str.w	r9, [sp]
   d8d0a:	2202      	movs	r2, #2
   d8d0c:	4985      	ldr	r1, [pc, #532]	; (d8f24 <_GLOBAL__sub_I_CycleOnTime+0x284>)
   d8d0e:	4630      	mov	r0, r6
   d8d10:	f001 ff54 	bl	dabbc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d8d14:	4622      	mov	r2, r4
   d8d16:	4641      	mov	r1, r8
   d8d18:	4630      	mov	r0, r6
   d8d1a:	f004 f9db 	bl	dd0d4 <__aeabi_atexit>
   d8d1e:	462a      	mov	r2, r5
   d8d20:	2114      	movs	r1, #20
   d8d22:	2002      	movs	r0, #2
   d8d24:	f001 fe00 	bl	da928 <led_pattern_period>
   d8d28:	4e7f      	ldr	r6, [pc, #508]	; (d8f28 <_GLOBAL__sub_I_CycleOnTime+0x288>)
   d8d2a:	9701      	str	r7, [sp, #4]
   d8d2c:	4603      	mov	r3, r0
   d8d2e:	f8cd 9000 	str.w	r9, [sp]
   d8d32:	2202      	movs	r2, #2
   d8d34:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d8d38:	4630      	mov	r0, r6
   d8d3a:	f001 ff3f 	bl	dabbc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d8d3e:	4622      	mov	r2, r4
   d8d40:	4641      	mov	r1, r8
   d8d42:	4630      	mov	r0, r6
   d8d44:	f004 f9c6 	bl	dd0d4 <__aeabi_atexit>

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8d48:	4878      	ldr	r0, [pc, #480]	; (d8f2c <_GLOBAL__sub_I_CycleOnTime+0x28c>)

MB85RC256V fram(Wire, 0);
   d8d4a:	4e79      	ldr	r6, [pc, #484]	; (d8f30 <_GLOBAL__sub_I_CycleOnTime+0x290>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8d4c:	4f79      	ldr	r7, [pc, #484]	; (d8f34 <_GLOBAL__sub_I_CycleOnTime+0x294>)
   d8d4e:	f8df 8254 	ldr.w	r8, [pc, #596]	; d8fa4 <_GLOBAL__sub_I_CycleOnTime+0x304>
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8d52:	f000 fdd9 	bl	d9908 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d8d56:	f004 f97d 	bl	dd054 <_Z19__fetch_global_Wirev>
   d8d5a:	462a      	mov	r2, r5
   d8d5c:	4601      	mov	r1, r0
   d8d5e:	4630      	mov	r0, r6
   d8d60:	f000 fc7c 	bl	d965c <_ZN10MB85RC256VC1ER7TwoWirei>
   d8d64:	4622      	mov	r2, r4
   d8d66:	4974      	ldr	r1, [pc, #464]	; (d8f38 <_GLOBAL__sub_I_CycleOnTime+0x298>)
   d8d68:	4630      	mov	r0, r6
   d8d6a:	f004 f9b3 	bl	dd0d4 <__aeabi_atexit>

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8d6e:	4873      	ldr	r0, [pc, #460]	; (d8f3c <_GLOBAL__sub_I_CycleOnTime+0x29c>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d8d70:	4e73      	ldr	r6, [pc, #460]	; (d8f40 <_GLOBAL__sub_I_CycleOnTime+0x2a0>)

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8d72:	f000 fadb 	bl	d932c <_ZN8MCP7941xC1Ev>
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d8d76:	4873      	ldr	r0, [pc, #460]	; (d8f44 <_GLOBAL__sub_I_CycleOnTime+0x2a4>)
   d8d78:	f000 fd12 	bl	d97a0 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d8d7c:	4872      	ldr	r0, [pc, #456]	; (d8f48 <_GLOBAL__sub_I_CycleOnTime+0x2a8>)
   d8d7e:	f001 f85c 	bl	d9e3a <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d8d82:	4629      	mov	r1, r5
   d8d84:	4630      	mov	r0, r6
   d8d86:	f002 fe17 	bl	db9b8 <_ZN9FuelGaugeC1Eb>
   d8d8a:	4622      	mov	r2, r4
   d8d8c:	496f      	ldr	r1, [pc, #444]	; (d8f4c <_GLOBAL__sub_I_CycleOnTime+0x2ac>)
   d8d8e:	4630      	mov	r0, r6
   d8d90:	f004 f9a0 	bl	dd0d4 <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8d94:	4e6e      	ldr	r6, [pc, #440]	; (d8f50 <_GLOBAL__sub_I_CycleOnTime+0x2b0>)
   d8d96:	4639      	mov	r1, r7
   d8d98:	4640      	mov	r0, r8
   d8d9a:	f002 f85e 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8d9e:	4640      	mov	r0, r8
   d8da0:	f8df 8204 	ldr.w	r8, [pc, #516]	; d8fa8 <_GLOBAL__sub_I_CycleOnTime+0x308>
   d8da4:	4622      	mov	r2, r4
   d8da6:	4631      	mov	r1, r6
   d8da8:	f004 f994 	bl	dd0d4 <__aeabi_atexit>
   d8dac:	4639      	mov	r1, r7
   d8dae:	4640      	mov	r0, r8
   d8db0:	f002 f853 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8db4:	4640      	mov	r0, r8
   d8db6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d8fac <_GLOBAL__sub_I_CycleOnTime+0x30c>
   d8dba:	4622      	mov	r2, r4
   d8dbc:	4631      	mov	r1, r6
   d8dbe:	f004 f989 	bl	dd0d4 <__aeabi_atexit>
   d8dc2:	4639      	mov	r1, r7
   d8dc4:	4640      	mov	r0, r8
   d8dc6:	f002 f848 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8dca:	4640      	mov	r0, r8
   d8dcc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d8fb0 <_GLOBAL__sub_I_CycleOnTime+0x310>
   d8dd0:	4622      	mov	r2, r4
   d8dd2:	4631      	mov	r1, r6
   d8dd4:	f004 f97e 	bl	dd0d4 <__aeabi_atexit>
   d8dd8:	4639      	mov	r1, r7
   d8dda:	4640      	mov	r0, r8
   d8ddc:	f002 f83d 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8de0:	4640      	mov	r0, r8
   d8de2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d8fb4 <_GLOBAL__sub_I_CycleOnTime+0x314>
   d8de6:	4622      	mov	r2, r4
   d8de8:	4631      	mov	r1, r6
   d8dea:	f004 f973 	bl	dd0d4 <__aeabi_atexit>
   d8dee:	4639      	mov	r1, r7
   d8df0:	4640      	mov	r0, r8
   d8df2:	f002 f832 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8df6:	4640      	mov	r0, r8
   d8df8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d8fb8 <_GLOBAL__sub_I_CycleOnTime+0x318>
   d8dfc:	4622      	mov	r2, r4
   d8dfe:	4631      	mov	r1, r6
   d8e00:	f004 f968 	bl	dd0d4 <__aeabi_atexit>
   d8e04:	4639      	mov	r1, r7
   d8e06:	4640      	mov	r0, r8
   d8e08:	f002 f827 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e0c:	4640      	mov	r0, r8
   d8e0e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d8fbc <_GLOBAL__sub_I_CycleOnTime+0x31c>
   d8e12:	4622      	mov	r2, r4
   d8e14:	4631      	mov	r1, r6
   d8e16:	f004 f95d 	bl	dd0d4 <__aeabi_atexit>
   d8e1a:	4639      	mov	r1, r7
   d8e1c:	4640      	mov	r0, r8
   d8e1e:	f002 f81c 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e22:	4640      	mov	r0, r8
   d8e24:	f8df 8198 	ldr.w	r8, [pc, #408]	; d8fc0 <_GLOBAL__sub_I_CycleOnTime+0x320>
   d8e28:	4622      	mov	r2, r4
   d8e2a:	4631      	mov	r1, r6
   d8e2c:	f004 f952 	bl	dd0d4 <__aeabi_atexit>
   d8e30:	4639      	mov	r1, r7
   d8e32:	4640      	mov	r0, r8
   d8e34:	f002 f811 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e38:	4640      	mov	r0, r8
String datastring;
   d8e3a:	f8df 8188 	ldr.w	r8, [pc, #392]	; d8fc4 <_GLOBAL__sub_I_CycleOnTime+0x324>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8e3e:	4622      	mov	r2, r4
   d8e40:	4631      	mov	r1, r6
   d8e42:	f004 f947 	bl	dd0d4 <__aeabi_atexit>
String datastring;
   d8e46:	4639      	mov	r1, r7
   d8e48:	4640      	mov	r0, r8
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8e4a:	4f42      	ldr	r7, [pc, #264]	; (d8f54 <_GLOBAL__sub_I_CycleOnTime+0x2b4>)
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
String datastring;
   d8e4c:	f002 f805 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e50:	4622      	mov	r2, r4
   d8e52:	4631      	mov	r1, r6
   d8e54:	4640      	mov	r0, r8
   d8e56:	f004 f93d 	bl	dd0d4 <__aeabi_atexit>
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8e5a:	493f      	ldr	r1, [pc, #252]	; (d8f58 <_GLOBAL__sub_I_CycleOnTime+0x2b8>)
   d8e5c:	4638      	mov	r0, r7
   d8e5e:	f001 fffc 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e62:	4638      	mov	r0, r7
String InstallLocation = " Loc = Test Unit ";
   d8e64:	4f3d      	ldr	r7, [pc, #244]	; (d8f5c <_GLOBAL__sub_I_CycleOnTime+0x2bc>)
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d8e66:	4622      	mov	r2, r4
   d8e68:	4631      	mov	r1, r6
   d8e6a:	f004 f933 	bl	dd0d4 <__aeabi_atexit>
String InstallLocation = " Loc = Test Unit ";
   d8e6e:	493c      	ldr	r1, [pc, #240]	; (d8f60 <_GLOBAL__sub_I_CycleOnTime+0x2c0>)
   d8e70:	4638      	mov	r0, r7
   d8e72:	f001 fff2 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e76:	4638      	mov	r0, r7
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8e78:	4f3a      	ldr	r7, [pc, #232]	; (d8f64 <_GLOBAL__sub_I_CycleOnTime+0x2c4>)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
String InstallLocation = " Loc = Test Unit ";
   d8e7a:	4622      	mov	r2, r4
   d8e7c:	4631      	mov	r1, r6
   d8e7e:	f004 f929 	bl	dd0d4 <__aeabi_atexit>
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d8e82:	4939      	ldr	r1, [pc, #228]	; (d8f68 <_GLOBAL__sub_I_CycleOnTime+0x2c8>)
   d8e84:	4638      	mov	r0, r7
   d8e86:	f001 ffe8 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8e8a:	4622      	mov	r2, r4
   d8e8c:	4631      	mov	r1, r6
   d8e8e:	4638      	mov	r0, r7
   d8e90:	f004 f920 	bl	dd0d4 <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8e94:	4e35      	ldr	r6, [pc, #212]	; (d8f6c <_GLOBAL__sub_I_CycleOnTime+0x2cc>)
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d8e96:	4836      	ldr	r0, [pc, #216]	; (d8f70 <_GLOBAL__sub_I_CycleOnTime+0x2d0>)
   d8e98:	f001 f9b1 	bl	da1fe <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d8e9c:	4835      	ldr	r0, [pc, #212]	; (d8f74 <_GLOBAL__sub_I_CycleOnTime+0x2d4>)
   d8e9e:	f001 f9ae 	bl	da1fe <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8ea2:	4935      	ldr	r1, [pc, #212]	; (d8f78 <_GLOBAL__sub_I_CycleOnTime+0x2d8>)
   d8ea4:	4630      	mov	r0, r6
   d8ea6:	f001 ffd8 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8eaa:	4934      	ldr	r1, [pc, #208]	; (d8f7c <_GLOBAL__sub_I_CycleOnTime+0x2dc>)
   d8eac:	f106 0010 	add.w	r0, r6, #16
   d8eb0:	f001 ffd3 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8eb4:	4932      	ldr	r1, [pc, #200]	; (d8f80 <_GLOBAL__sub_I_CycleOnTime+0x2e0>)
   d8eb6:	f106 0020 	add.w	r0, r6, #32
   d8eba:	f001 ffce 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8ebe:	4931      	ldr	r1, [pc, #196]	; (d8f84 <_GLOBAL__sub_I_CycleOnTime+0x2e4>)
   d8ec0:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d8ec4:	f001 ffc9 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8ec8:	492f      	ldr	r1, [pc, #188]	; (d8f88 <_GLOBAL__sub_I_CycleOnTime+0x2e8>)
   d8eca:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d8ece:	f001 ffc4 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8ed2:	492e      	ldr	r1, [pc, #184]	; (d8f8c <_GLOBAL__sub_I_CycleOnTime+0x2ec>)
   d8ed4:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d8ed8:	f001 ffbf 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
   d8edc:	492c      	ldr	r1, [pc, #176]	; (d8f90 <_GLOBAL__sub_I_CycleOnTime+0x2f0>)
   d8ede:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d8ee2:	f001 ffba 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d8ee6:	4622      	mov	r2, r4
   d8ee8:	492a      	ldr	r1, [pc, #168]	; (d8f94 <_GLOBAL__sub_I_CycleOnTime+0x2f4>)
   d8eea:	4628      	mov	r0, r5
   d8eec:	f004 f8f2 	bl	dd0d4 <__aeabi_atexit>

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d8ef0:	ed9f 0a29 	vldr	s0, [pc, #164]	; d8f98 <_GLOBAL__sub_I_CycleOnTime+0x2f8>
   d8ef4:	4829      	ldr	r0, [pc, #164]	; (d8f9c <_GLOBAL__sub_I_CycleOnTime+0x2fc>)
   d8ef6:	220f      	movs	r2, #15
   d8ef8:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d8efa:	b003      	add	sp, #12
   d8efc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d8f00:	f000 b9e0 	b.w	d92c4 <_ZN3IAQC1Eiif>
   d8f04:	2003e130 	.word	0x2003e130
   d8f08:	2003de88 	.word	0x2003de88
   d8f0c:	2003e170 	.word	0x2003e170
   d8f10:	2003d670 	.word	0x2003d670
   d8f14:	2003d6d4 	.word	0x2003d6d4
   d8f18:	000d5c1d 	.word	0x000d5c1d
   d8f1c:	2003e1f4 	.word	0x2003e1f4
   d8f20:	2003d6b4 	.word	0x2003d6b4
   d8f24:	00ffff00 	.word	0x00ffff00
   d8f28:	2003d688 	.word	0x2003d688
   d8f2c:	2003da08 	.word	0x2003da08
   d8f30:	2003d6a8 	.word	0x2003d6a8
   d8f34:	000e6c91 	.word	0x000e6c91
   d8f38:	000d9645 	.word	0x000d9645
   d8f3c:	2003e134 	.word	0x2003e134
   d8f40:	2003e164 	.word	0x2003e164
   d8f44:	2003de6c 	.word	0x2003de6c
   d8f48:	2003e1ac 	.word	0x2003e1ac
   d8f4c:	000db9d7 	.word	0x000db9d7
   d8f50:	000dadcd 	.word	0x000dadcd
   d8f54:	2003e1e0 	.word	0x2003e1e0
   d8f58:	000e7854 	.word	0x000e7854
   d8f5c:	2003e150 	.word	0x2003e150
   d8f60:	000e7873 	.word	0x000e7873
   d8f64:	2003d798 	.word	0x2003d798
   d8f68:	000e73e8 	.word	0x000e73e8
   d8f6c:	2003d6d8 	.word	0x2003d6d8
   d8f70:	2003d7bc 	.word	0x2003d7bc
   d8f74:	2003ded8 	.word	0x2003ded8
   d8f78:	000e7885 	.word	0x000e7885
   d8f7c:	000e7889 	.word	0x000e7889
   d8f80:	000e788d 	.word	0x000e788d
   d8f84:	000e7898 	.word	0x000e7898
   d8f88:	000e789c 	.word	0x000e789c
   d8f8c:	000e78a1 	.word	0x000e78a1
   d8f90:	000e7437 	.word	0x000e7437
   d8f94:	000d5335 	.word	0x000d5335
   d8f98:	4081999a 	.word	0x4081999a
   d8f9c:	2003de90 	.word	0x2003de90
   d8fa0:	000d54a5 	.word	0x000d54a5
   d8fa4:	2003d748 	.word	0x2003d748
   d8fa8:	2003d758 	.word	0x2003d758
   d8fac:	2003d768 	.word	0x2003d768
   d8fb0:	2003d778 	.word	0x2003d778
   d8fb4:	2003d788 	.word	0x2003d788
   d8fb8:	2003e140 	.word	0x2003e140
   d8fbc:	2003d7a8 	.word	0x2003d7a8
   d8fc0:	2003d678 	.word	0x2003d678
   d8fc4:	2003de70 	.word	0x2003de70

000d8fc8 <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d8fc8:	e880 0006 	stmia.w	r0, {r1, r2}
   d8fcc:	4a10      	ldr	r2, [pc, #64]	; (d9010 <_ZN3ULPC1Eiif+0x48>)
   d8fce:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d8fd0:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d8fd2:	4a10      	ldr	r2, [pc, #64]	; (d9014 <_ZN3ULPC1Eiif+0x4c>)
   d8fd4:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8fd6:	4a10      	ldr	r2, [pc, #64]	; (d9018 <_ZN3ULPC1Eiif+0x50>)
   d8fd8:	eddf 6a10 	vldr	s13, [pc, #64]	; d901c <_ZN3ULPC1Eiif+0x54>
   d8fdc:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d8fe0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d9020 <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d8fe4:	490f      	ldr	r1, [pc, #60]	; (d9024 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d8fe6:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8fea:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d8fee:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8ff0:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d8ff4:	eddf 6a0c 	vldr	s13, [pc, #48]	; d9028 <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d8ff8:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d8ffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d9000:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d9004:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9008:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d900c:	4770      	bx	lr
   d900e:	bf00      	nop
   d9010:	41a00000 	.word	0x41a00000
   d9014:	41900000 	.word	0x41900000
   d9018:	2003d570 	.word	0x2003d570
   d901c:	42680000 	.word	0x42680000
   d9020:	42ae0000 	.word	0x42ae0000
   d9024:	42200000 	.word	0x42200000
   d9028:	42180000 	.word	0x42180000

000d902c <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9030:	460c      	mov	r4, r1
   d9032:	4606      	mov	r6, r0
   d9034:	4690      	mov	r8, r2
   d9036:	f001 fa5d 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d903a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d903e:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d9042:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d9044:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d9046:	88b0      	ldrh	r0, [r6, #4]
   d9048:	f003 ffa5 	bl	dcf96 <analogRead>
   d904c:	4404      	add	r4, r0
    delay(1);
   d904e:	2001      	movs	r0, #1
   d9050:	f002 fb98 	bl	db784 <delay>
   d9054:	f001 fa4e 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d9058:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d905a:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d905e:	d3f2      	bcc.n	d9046 <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d9060:	ee07 5a10 	vmov	s14, r5
   d9064:	ee07 4a90 	vmov	s15, r4
   d9068:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d906c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d9070:	4b18      	ldr	r3, [pc, #96]	; (d90d4 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d9072:	edd6 5a08 	vldr	s11, [r6, #32]
   d9076:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d907a:	edd3 7a00 	vldr	s15, [r3]
   d907e:	4b16      	ldr	r3, [pc, #88]	; (d90d8 <_ZN3ULP7getTempEiPc+0xac>)
   d9080:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d9084:	4b15      	ldr	r3, [pc, #84]	; (d90dc <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d9086:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d908a:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d908c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d9090:	ed9f 7a13 	vldr	s14, [pc, #76]	; d90e0 <_ZN3ULP7getTempEiPc+0xb4>
   d9094:	ee27 7a87 	vmul.f32	s14, s15, s14
   d9098:	edd6 7a07 	vldr	s15, [r6, #28]
   d909c:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d90a0:	d10c      	bne.n	d90bc <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d90a2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d90a6:	ee67 7a87 	vmul.f32	s15, s15, s14
   d90aa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d90ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d90b2:	eddf 7a0c 	vldr	s15, [pc, #48]	; d90e4 <_ZN3ULP7getTempEiPc+0xb8>
   d90b6:	ee77 7a27 	vadd.f32	s15, s14, s15
   d90ba:	e002      	b.n	d90c2 <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d90bc:	4b0a      	ldr	r3, [pc, #40]	; (d90e8 <_ZN3ULP7getTempEiPc+0xbc>)
   d90be:	4598      	cmp	r8, r3
   d90c0:	d102      	bne.n	d90c8 <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d90c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d90c6:	e001      	b.n	d90cc <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d90c8:	eddf 7a08 	vldr	s15, [pc, #32]	; d90ec <_ZN3ULP7getTempEiPc+0xc0>
}
   d90cc:	ee17 0a90 	vmov	r0, s15
   d90d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d90d4:	2003d56c 	.word	0x2003d56c
   d90d8:	2003d570 	.word	0x2003d570
   d90dc:	000e749c 	.word	0x000e749c
   d90e0:	39800000 	.word	0x39800000
   d90e4:	42000000 	.word	0x42000000
   d90e8:	000e789a 	.word	0x000e789a
   d90ec:	00000000 	.word	0x00000000

000d90f0 <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d90f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d90f2:	4604      	mov	r4, r0
   d90f4:	f001 f9fe 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d90f8:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d90fa:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d90fe:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d9100:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d9102:	8820      	ldrh	r0, [r4, #0]
   d9104:	f003 ff47 	bl	dcf96 <analogRead>
   d9108:	4405      	add	r5, r0
    delay(1);
   d910a:	2001      	movs	r0, #1
   d910c:	f002 fb3a 	bl	db784 <delay>
   d9110:	f001 f9f0 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d9114:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d9116:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d911a:	d3f2      	bcc.n	d9102 <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d911c:	ee07 5a90 	vmov	s15, r5
   d9120:	ee07 6a10 	vmov	s14, r6
   d9124:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9128:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d912c:	4b15      	ldr	r3, [pc, #84]	; (d9184 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d912e:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d9132:	edd3 7a00 	vldr	s15, [r3]
   d9136:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d913a:	ee17 0a90 	vmov	r0, s15
   d913e:	f009 fd7b 	bl	e2c38 <__aeabi_f2d>
   d9142:	2200      	movs	r2, #0
   d9144:	4b10      	ldr	r3, [pc, #64]	; (d9188 <_ZN3ULP4zeroEv+0x98>)
   d9146:	f009 fdcb 	bl	e2ce0 <__aeabi_dmul>
   d914a:	4b10      	ldr	r3, [pc, #64]	; (d918c <_ZN3ULP4zeroEv+0x9c>)
   d914c:	2200      	movs	r2, #0
   d914e:	f009 fdc7 	bl	e2ce0 <__aeabi_dmul>
   d9152:	f00a f8bd 	bl	e32d0 <__aeabi_d2f>
   d9156:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d915a:	4a0d      	ldr	r2, [pc, #52]	; (d9190 <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d915c:	ee07 0a10 	vmov	s14, r0
   d9160:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d9164:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d9166:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d916a:	4620      	mov	r0, r4
   d916c:	f7ff ff5e 	bl	d902c <_ZN3ULP7getTempEiPc>
   d9170:	ee07 0a90 	vmov	s15, r0
   d9174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d9178:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d917c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d9180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9182:	bf00      	nop
   d9184:	2003d56c 	.word	0x2003d56c
   d9188:	408f4000 	.word	0x408f4000
   d918c:	3f300000 	.word	0x3f300000
   d9190:	000e789a 	.word	0x000e789a

000d9194 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d9194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9196:	460c      	mov	r4, r1
   d9198:	4607      	mov	r7, r0
   d919a:	f001 f9ab 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d919e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d91a2:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d91a6:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d91a8:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d91aa:	8838      	ldrh	r0, [r7, #0]
   d91ac:	f003 fef3 	bl	dcf96 <analogRead>
   d91b0:	4404      	add	r4, r0
    delay(1);
   d91b2:	2001      	movs	r0, #1
   d91b4:	f002 fae6 	bl	db784 <delay>
   d91b8:	f001 f99c 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d91bc:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d91be:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d91c2:	d3f2      	bcc.n	d91aa <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d91c4:	ee07 4a90 	vmov	s15, r4
   d91c8:	ee07 5a10 	vmov	s14, r5
   d91cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d91d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d91d4:	4b0b      	ldr	r3, [pc, #44]	; (d9204 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d91d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d91da:	edd3 7a00 	vldr	s15, [r3]
   d91de:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d91e2:	ee17 0a90 	vmov	r0, s15
   d91e6:	f009 fd27 	bl	e2c38 <__aeabi_f2d>
   d91ea:	2200      	movs	r2, #0
   d91ec:	4b06      	ldr	r3, [pc, #24]	; (d9208 <_ZN3ULP7getVgasEi+0x74>)
   d91ee:	f009 fd77 	bl	e2ce0 <__aeabi_dmul>
   d91f2:	2200      	movs	r2, #0
   d91f4:	4b05      	ldr	r3, [pc, #20]	; (d920c <_ZN3ULP7getVgasEi+0x78>)
   d91f6:	f009 fd73 	bl	e2ce0 <__aeabi_dmul>
   d91fa:	f00a f869 	bl	e32d0 <__aeabi_d2f>
} //returns voltage at zero concentration
   d91fe:	ee00 0a10 	vmov	s0, r0
   d9202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9204:	2003d56c 	.word	0x2003d56c
   d9208:	408f4000 	.word	0x408f4000
   d920c:	3f300000 	.word	0x3f300000

000d9210 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d9210:	b5d0      	push	{r4, r6, r7, lr}
   d9212:	ed2d 8b02 	vpush	{d8}
   d9216:	4604      	mov	r4, r0
   d9218:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d921c:	f7ff ffba 	bl	d9194 <_ZN3ULP7getVgasEi>
   d9220:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d9224:	ee30 0a67 	vsub.f32	s0, s0, s15
   d9228:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d922c:	ee70 7a67 	vsub.f32	s15, s0, s15
   d9230:	ee17 0a90 	vmov	r0, s15
   d9234:	f009 fd00 	bl	e2c38 <__aeabi_f2d>
   d9238:	2200      	movs	r2, #0
   d923a:	4b21      	ldr	r3, [pc, #132]	; (d92c0 <_ZN3ULP7getConcEif+0xb0>)
   d923c:	f009 fe7a 	bl	e2f34 <__aeabi_ddiv>
   d9240:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d9244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9248:	4606      	mov	r6, r0
   d924a:	ee17 0a90 	vmov	r0, s15
   d924e:	460f      	mov	r7, r1
   d9250:	f009 fcf2 	bl	e2c38 <__aeabi_f2d>
   d9254:	4602      	mov	r2, r0
   d9256:	460b      	mov	r3, r1
   d9258:	4630      	mov	r0, r6
   d925a:	4639      	mov	r1, r7
   d925c:	f009 fe6a 	bl	e2f34 <__aeabi_ddiv>
   d9260:	a315      	add	r3, pc, #84	; (adr r3, d92b8 <_ZN3ULP7getConcEif+0xa8>)
   d9262:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9266:	f009 fd3b 	bl	e2ce0 <__aeabi_dmul>
   d926a:	f00a f831 	bl	e32d0 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d926e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d9272:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d9276:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d927a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d927e:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d9282:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d9286:	bfcc      	ite	gt
   d9288:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d928c:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d9290:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d9294:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d9298:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d929c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d92a0:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d92a4:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d92a8:	edd4 6a02 	vldr	s13, [r4, #8]
   d92ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d92b0:	ee20 0a07 	vmul.f32	s0, s0, s14
   d92b4:	bdd0      	pop	{r4, r6, r7, pc}
   d92b6:	bf00      	nop
   d92b8:	00000000 	.word	0x00000000
   d92bc:	41cdcd65 	.word	0x41cdcd65
   d92c0:	408f4000 	.word	0x408f4000

000d92c4 <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d92c4:	b508      	push	{r3, lr}
   d92c6:	4603      	mov	r3, r0
   d92c8:	f7ff fe7e 	bl	d8fc8 <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d92cc:	4a0d      	ldr	r2, [pc, #52]	; (d9304 <_ZN3IAQC1Eiif+0x40>)
   d92ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d9308 <_ZN3IAQC1Eiif+0x44>
   d92d2:	edd2 7a00 	vldr	s15, [r2]
   d92d6:	eddf 6a0d 	vldr	s13, [pc, #52]	; d930c <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d92da:	4a0d      	ldr	r2, [pc, #52]	; (d9310 <_ZN3IAQC1Eiif+0x4c>)
   d92dc:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d92de:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d92e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d92e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d92ea:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d92ec:	4a09      	ldr	r2, [pc, #36]	; (d9314 <_ZN3IAQC1Eiif+0x50>)
   d92ee:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d92f0:	4a09      	ldr	r2, [pc, #36]	; (d9318 <_ZN3IAQC1Eiif+0x54>)
   d92f2:	635a      	str	r2, [r3, #52]	; 0x34
}
   d92f4:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d92f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; d931c <_ZN3IAQC1Eiif+0x58>
   d92fa:	ee67 7a87 	vmul.f32	s15, s15, s14
   d92fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d9302:	bd08      	pop	{r3, pc}
   d9304:	2003d570 	.word	0x2003d570
   d9308:	4986e340 	.word	0x4986e340
   d930c:	4a007aa0 	.word	0x4a007aa0
   d9310:	000186a0 	.word	0x000186a0
   d9314:	4181999a 	.word	0x4181999a
   d9318:	4093851f 	.word	0x4093851f
   d931c:	447a0000 	.word	0x447a0000

000d9320 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d9320:	f001 b868 	b.w	da3f4 <HAL_Pin_Map>

000d9324 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d9324:	6803      	ldr	r3, [r0, #0]
   d9326:	b2c9      	uxtb	r1, r1
   d9328:	689b      	ldr	r3, [r3, #8]
   d932a:	4718      	bx	r3

000d932c <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   d932c:	b510      	push	{r4, lr}
   d932e:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   d9330:	f003 fe90 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9334:	f003 f996 	bl	dc664 <_ZN7TwoWire9isEnabledEv>
   d9338:	b918      	cbnz	r0, d9342 <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   d933a:	f003 fe8b 	bl	dd054 <_Z19__fetch_global_Wirev>
   d933e:	f003 f963 	bl	dc608 <_ZN7TwoWire5beginEv>
  }
}
   d9342:	4620      	mov	r0, r4
   d9344:	bd10      	pop	{r4, pc}

000d9346 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d9346:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d934a:	4692      	mov	sl, r2
   d934c:	4698      	mov	r8, r3
   d934e:	460d      	mov	r5, r1
   d9350:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d9354:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d9358:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   d935c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d9360:	f003 fe78 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9364:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d9366:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d9368:	f003 f972 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d936c:	f003 fe72 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9370:	2100      	movs	r1, #0
   d9372:	f7ff ffd7 	bl	d9324 <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d9376:	f003 fe6d 	bl	dd054 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d937a:	fbb5 f3f4 	udiv	r3, r5, r4
   d937e:	fb04 5513 	mls	r5, r4, r3, r5
   d9382:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   d9386:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d9388:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d938c:	f7ff ffca 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d9390:	f003 fe60 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9394:	fbba f1f4 	udiv	r1, sl, r4
   d9398:	fb04 aa11 	mls	sl, r4, r1, sl
   d939c:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d93a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d93a4:	f7ff ffbe 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d93a8:	f003 fe54 	bl	dd054 <_Z19__fetch_global_Wirev>
   d93ac:	fbb8 f1f4 	udiv	r1, r8, r4
   d93b0:	fb04 8811 	mls	r8, r4, r1, r8
   d93b4:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   d93b8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d93bc:	f7ff ffb2 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d93c0:	f003 fe48 	bl	dd054 <_Z19__fetch_global_Wirev>
   d93c4:	fbbb f1f4 	udiv	r1, fp, r4
   d93c8:	fb04 b111 	mls	r1, r4, r1, fp
   d93cc:	f001 0107 	and.w	r1, r1, #7
   d93d0:	f041 0108 	orr.w	r1, r1, #8
   d93d4:	f7ff ffa6 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d93d8:	f003 fe3c 	bl	dd054 <_Z19__fetch_global_Wirev>
   d93dc:	fbb7 f1f4 	udiv	r1, r7, r4
   d93e0:	fb04 7711 	mls	r7, r4, r1, r7
   d93e4:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d93e8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d93ec:	f7ff ff9a 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d93f0:	f003 fe30 	bl	dd054 <_Z19__fetch_global_Wirev>
   d93f4:	fbb6 f1f4 	udiv	r1, r6, r4
   d93f8:	fb04 6611 	mls	r6, r4, r1, r6
   d93fc:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d9400:	f001 011f 	and.w	r1, r1, #31
   d9404:	f7ff ff8e 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   d9408:	f003 fe24 	bl	dd054 <_Z19__fetch_global_Wirev>
   d940c:	fbb9 f1f4 	udiv	r1, r9, r4
   d9410:	6803      	ldr	r3, [r0, #0]
   d9412:	fb04 9411 	mls	r4, r4, r1, r9
   d9416:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d941a:	689b      	ldr	r3, [r3, #8]
   d941c:	b2c9      	uxtb	r1, r1
   d941e:	4798      	blx	r3

  Wire.endTransmission();
   d9420:	f003 fe18 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9424:	f003 f91b 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d9428:	f003 fe14 	bl	dd054 <_Z19__fetch_global_Wirev>
   d942c:	216f      	movs	r1, #111	; 0x6f
   d942e:	f003 f90f 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d9432:	f003 fe0f 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9436:	2100      	movs	r1, #0
   d9438:	f7ff ff74 	bl	d9324 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d943c:	f003 fe0a 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9440:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d9444:	f7ff ff6e 	bl	d9324 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d9448:	f003 fe04 	bl	dd054 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d944c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   d9450:	f003 b905 	b.w	dc65e <_ZN7TwoWire15endTransmissionEv>

000d9454 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d9454:	b570      	push	{r4, r5, r6, lr}
   d9456:	461c      	mov	r4, r3
   d9458:	4615      	mov	r5, r2
   d945a:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d945c:	f003 fdfa 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9460:	216f      	movs	r1, #111	; 0x6f
   d9462:	f003 f8f5 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d9466:	f003 fdf5 	bl	dd054 <_Z19__fetch_global_Wirev>
   d946a:	2100      	movs	r1, #0
   d946c:	f7ff ff5a 	bl	d9324 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d9470:	f003 fdf0 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9474:	f003 f8f3 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d9478:	f003 fdec 	bl	dd054 <_Z19__fetch_global_Wirev>
   d947c:	216f      	movs	r1, #111	; 0x6f
   d947e:	2207      	movs	r2, #7
   d9480:	f003 f8d8 	bl	dc634 <_ZN7TwoWire11requestFromEii>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d9484:	f003 fde6 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9488:	6803      	ldr	r3, [r0, #0]
   d948a:	695b      	ldr	r3, [r3, #20]
   d948c:	4798      	blx	r3
   d948e:	b2c0      	uxtb	r0, r0
   d9490:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d9494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9498:	f000 000f 	and.w	r0, r0, #15
   d949c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d94a0:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d94a2:	f003 fdd7 	bl	dd054 <_Z19__fetch_global_Wirev>
   d94a6:	6803      	ldr	r3, [r0, #0]
   d94a8:	695b      	ldr	r3, [r3, #20]
   d94aa:	4798      	blx	r3
   d94ac:	b2c0      	uxtb	r0, r0
   d94ae:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d94b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d94b6:	f000 000f 	and.w	r0, r0, #15
   d94ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d94be:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d94c0:	f003 fdc8 	bl	dd054 <_Z19__fetch_global_Wirev>
   d94c4:	6803      	ldr	r3, [r0, #0]
   d94c6:	695b      	ldr	r3, [r3, #20]
   d94c8:	4798      	blx	r3
   d94ca:	b2c0      	uxtb	r0, r0
   d94cc:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d94d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d94d4:	f000 000f 	and.w	r0, r0, #15
   d94d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d94dc:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d94de:	f003 fdb9 	bl	dd054 <_Z19__fetch_global_Wirev>
   d94e2:	6803      	ldr	r3, [r0, #0]
   d94e4:	695b      	ldr	r3, [r3, #20]
   d94e6:	4798      	blx	r3
   d94e8:	9b04      	ldr	r3, [sp, #16]
   d94ea:	f000 0007 	and.w	r0, r0, #7
   d94ee:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d94f0:	f003 fdb0 	bl	dd054 <_Z19__fetch_global_Wirev>
   d94f4:	6803      	ldr	r3, [r0, #0]
   d94f6:	695b      	ldr	r3, [r3, #20]
   d94f8:	4798      	blx	r3
   d94fa:	b2c0      	uxtb	r0, r0
   d94fc:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d9500:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9504:	f000 000f 	and.w	r0, r0, #15
   d9508:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d950c:	9b05      	ldr	r3, [sp, #20]
   d950e:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d9510:	f003 fda0 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9514:	6803      	ldr	r3, [r0, #0]
   d9516:	695b      	ldr	r3, [r3, #20]
   d9518:	4798      	blx	r3
   d951a:	b2c0      	uxtb	r0, r0
   d951c:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d9520:	0093      	lsls	r3, r2, #2
   d9522:	4413      	add	r3, r2
   d9524:	f000 000f 	and.w	r0, r0, #15
   d9528:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d952c:	9b06      	ldr	r3, [sp, #24]
   d952e:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   d9530:	f003 fd90 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9534:	6803      	ldr	r3, [r0, #0]
   d9536:	695b      	ldr	r3, [r3, #20]
   d9538:	4798      	blx	r3
   d953a:	b2c0      	uxtb	r0, r0
   d953c:	0903      	lsrs	r3, r0, #4
   d953e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d9542:	f000 000f 	and.w	r0, r0, #15
   d9546:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d954a:	9b07      	ldr	r3, [sp, #28]
   d954c:	7018      	strb	r0, [r3, #0]
   d954e:	bd70      	pop	{r4, r5, r6, pc}

000d9550 <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d9550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9554:	4607      	mov	r7, r0
   d9556:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d9558:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d955a:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d955c:	f002 f802 	bl	db564 <_ZN9TimeClass6secondEl>
   d9560:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d9562:	4620      	mov	r0, r4
   d9564:	f001 fff6 	bl	db554 <_ZN9TimeClass6minuteEl>
   d9568:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d956a:	4620      	mov	r0, r4
   d956c:	f001 ffea 	bl	db544 <_ZN9TimeClass4hourEl>
   d9570:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d9572:	4620      	mov	r0, r4
   d9574:	f002 f806 	bl	db584 <_ZN9TimeClass7weekdayEl>
   d9578:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d957a:	4620      	mov	r0, r4
   d957c:	f001 fffa 	bl	db574 <_ZN9TimeClass3dayEl>
   d9580:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d9582:	4620      	mov	r0, r4
   d9584:	f002 f808 	bl	db598 <_ZN9TimeClass5monthEl>
   d9588:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d958a:	4620      	mov	r0, r4
   d958c:	f002 f80e 	bl	db5ac <_ZN9TimeClass4yearEl>
   d9590:	220a      	movs	r2, #10
   d9592:	4601      	mov	r1, r0
   d9594:	a804      	add	r0, sp, #16
   d9596:	f001 fcd5 	bl	daf44 <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d959a:	a904      	add	r1, sp, #16
   d959c:	2202      	movs	r2, #2
   d959e:	a808      	add	r0, sp, #32
   d95a0:	f001 fd52 	bl	db048 <_ZNK6String9substringEj>
   d95a4:	a808      	add	r0, sp, #32
   d95a6:	f001 fd63 	bl	db070 <_ZNK6String5toIntEv>
   d95aa:	4604      	mov	r4, r0
   d95ac:	a808      	add	r0, sp, #32
   d95ae:	f001 fc0d 	bl	dadcc <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d95b2:	b2e4      	uxtb	r4, r4
   d95b4:	fa5f f38b 	uxtb.w	r3, fp
   d95b8:	b2f6      	uxtb	r6, r6
   d95ba:	b2ed      	uxtb	r5, r5
   d95bc:	9302      	str	r3, [sp, #8]
   d95be:	fa5f f289 	uxtb.w	r2, r9
   d95c2:	fa5f f38a 	uxtb.w	r3, sl
   d95c6:	fa5f f188 	uxtb.w	r1, r8
   d95ca:	4638      	mov	r0, r7
   d95cc:	9403      	str	r4, [sp, #12]
   d95ce:	9601      	str	r6, [sp, #4]
   d95d0:	9500      	str	r5, [sp, #0]
   d95d2:	f7ff feb8 	bl	d9346 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d95d6:	a804      	add	r0, sp, #16
   d95d8:	f001 fbf8 	bl	dadcc <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d95dc:	b00d      	add	sp, #52	; 0x34
   d95de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d95e2 <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   d95e2:	b500      	push	{lr}
   d95e4:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d95e6:	f10d 031b 	add.w	r3, sp, #27
   d95ea:	9303      	str	r3, [sp, #12]
   d95ec:	f10d 031a 	add.w	r3, sp, #26
   d95f0:	9302      	str	r3, [sp, #8]
   d95f2:	f10d 0319 	add.w	r3, sp, #25
   d95f6:	9301      	str	r3, [sp, #4]
   d95f8:	ab06      	add	r3, sp, #24
   d95fa:	9300      	str	r3, [sp, #0]
   d95fc:	f10d 0216 	add.w	r2, sp, #22
   d9600:	f10d 0317 	add.w	r3, sp, #23
   d9604:	f10d 0115 	add.w	r1, sp, #21
   d9608:	f7ff ff24 	bl	d9454 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d960c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d9610:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d9612:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d9616:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d9618:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d961c:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d961e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d9622:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d9624:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d9628:	3b01      	subs	r3, #1
   d962a:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d962c:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d9630:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d9632:	3364      	adds	r3, #100	; 0x64
   d9634:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d9636:	f00a f8dd 	bl	e37f4 <mktime>

  return uint32_t(moment);
}
   d963a:	b011      	add	sp, #68	; 0x44
   d963c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9640 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d9640:	f000 bed8 	b.w	da3f4 <HAL_Pin_Map>

000d9644 <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d9644:	4770      	bx	lr

000d9646 <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d9646:	b510      	push	{r4, lr}
}
   d9648:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d964a:	4604      	mov	r4, r0
}
   d964c:	f003 fd47 	bl	dd0de <_ZdlPvj>
   d9650:	4620      	mov	r0, r4
   d9652:	bd10      	pop	{r4, pc}

000d9654 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d9654:	6803      	ldr	r3, [r0, #0]
   d9656:	b2c9      	uxtb	r1, r1
   d9658:	689b      	ldr	r3, [r3, #8]
   d965a:	4718      	bx	r3

000d965c <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d965c:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d965e:	4c02      	ldr	r4, [pc, #8]	; (d9668 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d9660:	6004      	str	r4, [r0, #0]
   d9662:	6041      	str	r1, [r0, #4]
   d9664:	6082      	str	r2, [r0, #8]
}
   d9666:	bd10      	pop	{r4, pc}
   d9668:	000e7970 	.word	0x000e7970

000d966c <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9670:	4604      	mov	r4, r0
   d9672:	460d      	mov	r5, r1
   d9674:	4617      	mov	r7, r2
   d9676:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d9678:	f1b8 0f00 	cmp.w	r8, #0
   d967c:	d03f      	beq.n	d96fe <_ZN10MB85RC256V8readDataEjPhj+0x92>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d967e:	68a1      	ldr	r1, [r4, #8]
   d9680:	6860      	ldr	r0, [r4, #4]
   d9682:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d9686:	f002 ffe3 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d968a:	0a29      	lsrs	r1, r5, #8
   d968c:	6860      	ldr	r0, [r4, #4]
   d968e:	f7ff ffe1 	bl	d9654 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d9692:	4629      	mov	r1, r5
   d9694:	6860      	ldr	r0, [r4, #4]
   d9696:	f7ff ffdd 	bl	d9654 <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d969a:	2100      	movs	r1, #0
   d969c:	6860      	ldr	r0, [r4, #4]
   d969e:	f002 ffda 	bl	dc656 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d96a2:	b110      	cbz	r0, d96aa <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d96a4:	2000      	movs	r0, #0
   d96a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d96aa:	f1b8 0f20 	cmp.w	r8, #32
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d96ae:	68a1      	ldr	r1, [r4, #8]
   d96b0:	6860      	ldr	r0, [r4, #4]
   d96b2:	46c1      	mov	r9, r8
   d96b4:	bf28      	it	cs
   d96b6:	f04f 0920 	movcs.w	r9, #32
   d96ba:	2301      	movs	r3, #1
   d96bc:	464a      	mov	r2, r9
   d96be:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d96c2:	f002 ffbc 	bl	dc63e <_ZN7TwoWire11requestFromEiii>

		if (Wire.available() < (int) bytesToRead) {
   d96c6:	f003 fcc5 	bl	dd054 <_Z19__fetch_global_Wirev>
   d96ca:	6803      	ldr	r3, [r0, #0]
   d96cc:	691b      	ldr	r3, [r3, #16]
   d96ce:	4798      	blx	r3
   d96d0:	4581      	cmp	r9, r0
   d96d2:	dce7      	bgt.n	d96a4 <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d96d4:	463e      	mov	r6, r7
   d96d6:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d96da:	f003 fcbb 	bl	dd054 <_Z19__fetch_global_Wirev>
   d96de:	6803      	ldr	r3, [r0, #0]
   d96e0:	695b      	ldr	r3, [r3, #20]
   d96e2:	4798      	blx	r3
   d96e4:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d96e8:	1bf2      	subs	r2, r6, r7
   d96ea:	ebc6 0308 	rsb	r3, r6, r8
   d96ee:	4591      	cmp	r9, r2
   d96f0:	eb06 050a 	add.w	r5, r6, sl
   d96f4:	443b      	add	r3, r7
   d96f6:	d8f0      	bhi.n	d96da <_ZN10MB85RC256V8readDataEjPhj+0x6e>
   d96f8:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d96fa:	4637      	mov	r7, r6
   d96fc:	e7bc      	b.n	d9678 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d96fe:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d9700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9704 <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d9704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9708:	4604      	mov	r4, r0
   d970a:	460d      	mov	r5, r1
   d970c:	4690      	mov	r8, r2
   d970e:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d9710:	b357      	cbz	r7, d9768 <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d9712:	68a1      	ldr	r1, [r4, #8]
   d9714:	6860      	ldr	r0, [r4, #4]
   d9716:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d971a:	f002 ff99 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d971e:	0a29      	lsrs	r1, r5, #8
   d9720:	6860      	ldr	r0, [r4, #4]
   d9722:	f7ff ff97 	bl	d9654 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d9726:	4629      	mov	r1, r5
   d9728:	6860      	ldr	r0, [r4, #4]
   d972a:	f7ff ff93 	bl	d9654 <_ZN7TwoWire5writeEj>
   d972e:	f108 091e 	add.w	r9, r8, #30
   d9732:	4646      	mov	r6, r8
   d9734:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d9738:	6860      	ldr	r0, [r4, #4]
   d973a:	f816 1b01 	ldrb.w	r1, [r6], #1
   d973e:	6803      	ldr	r3, [r0, #0]
   d9740:	689b      	ldr	r3, [r3, #8]
   d9742:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9744:	454e      	cmp	r6, r9
   d9746:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d974a:	46b0      	mov	r8, r6
			dataLen--;
   d974c:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d9750:	d001      	beq.n	d9756 <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d9752:	2f00      	cmp	r7, #0
   d9754:	d1f0      	bne.n	d9738 <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d9756:	2101      	movs	r1, #1
   d9758:	6860      	ldr	r0, [r4, #4]
   d975a:	f002 ff7c 	bl	dc656 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d975e:	2800      	cmp	r0, #0
   d9760:	d0d6      	beq.n	d9710 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d9762:	2000      	movs	r0, #0
   d9764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d9768:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d976a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d976e <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d976e:	b530      	push	{r4, r5, lr}
   d9770:	b089      	sub	sp, #36	; 0x24
   d9772:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d9774:	2220      	movs	r2, #32
   d9776:	2100      	movs	r1, #0
   d9778:	4668      	mov	r0, sp
   d977a:	f009 ff56 	bl	e362a <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d977e:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d9780:	2320      	movs	r3, #32
   d9782:	466a      	mov	r2, sp
   d9784:	4621      	mov	r1, r4
   d9786:	4628      	mov	r0, r5
   d9788:	f7ff ffbc 	bl	d9704 <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d978c:	b120      	cbz	r0, d9798 <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d978e:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d9790:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d9794:	d1f4      	bne.n	d9780 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d9796:	2001      	movs	r0, #1
}
   d9798:	b009      	add	sp, #36	; 0x24
   d979a:	bd30      	pop	{r4, r5, pc}

000d979c <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d979c:	f000 be2a 	b.w	da3f4 <HAL_Pin_Map>

000d97a0 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d97a0:	4770      	bx	lr
	...

000d97a4 <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d97a4:	b510      	push	{r4, lr}

      IOexp.begin();
   d97a6:	4c53      	ldr	r4, [pc, #332]	; (d98f4 <_ZN12IoTNodePower5beginEv+0x150>)
   d97a8:	4620      	mov	r0, r4
   d97aa:	f000 fb0f 	bl	d9dcc <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d97ae:	4620      	mov	r0, r4
   d97b0:	2201      	movs	r2, #1
   d97b2:	2100      	movs	r1, #0
   d97b4:	f000 fb0d 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d97b8:	2201      	movs	r2, #1
   d97ba:	4611      	mov	r1, r2
   d97bc:	4620      	mov	r0, r4
   d97be:	f000 fb08 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d97c2:	4620      	mov	r0, r4
   d97c4:	2201      	movs	r2, #1
   d97c6:	2102      	movs	r1, #2
   d97c8:	f000 fb03 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d97cc:	4620      	mov	r0, r4
   d97ce:	2201      	movs	r2, #1
   d97d0:	2103      	movs	r1, #3
   d97d2:	f000 fafe 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d97d6:	4620      	mov	r0, r4
   d97d8:	2201      	movs	r2, #1
   d97da:	2104      	movs	r1, #4
   d97dc:	f000 faf9 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d97e0:	4620      	mov	r0, r4
   d97e2:	2201      	movs	r2, #1
   d97e4:	2105      	movs	r1, #5
   d97e6:	f000 faf4 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d97ea:	4620      	mov	r0, r4
   d97ec:	2200      	movs	r2, #0
   d97ee:	2106      	movs	r1, #6
   d97f0:	f000 faef 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d97f4:	4620      	mov	r0, r4
   d97f6:	2201      	movs	r2, #1
   d97f8:	2107      	movs	r1, #7
   d97fa:	f000 faea 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d97fe:	4620      	mov	r0, r4
   d9800:	2200      	movs	r2, #0
   d9802:	2108      	movs	r1, #8
   d9804:	f000 fae5 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d9808:	4620      	mov	r0, r4
   d980a:	2200      	movs	r2, #0
   d980c:	2109      	movs	r1, #9
   d980e:	f000 fae0 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d9812:	4620      	mov	r0, r4
   d9814:	2200      	movs	r2, #0
   d9816:	210a      	movs	r1, #10
   d9818:	f000 fadb 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d981c:	4620      	mov	r0, r4
   d981e:	2200      	movs	r2, #0
   d9820:	210b      	movs	r1, #11
   d9822:	f000 fad6 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d9826:	4620      	mov	r0, r4
   d9828:	2200      	movs	r2, #0
   d982a:	210c      	movs	r1, #12
   d982c:	f000 fad1 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d9830:	4620      	mov	r0, r4
   d9832:	2200      	movs	r2, #0
   d9834:	210d      	movs	r1, #13
   d9836:	f000 facc 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d983a:	4620      	mov	r0, r4
   d983c:	2200      	movs	r2, #0
   d983e:	210e      	movs	r1, #14
   d9840:	f000 fac7 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d9844:	4620      	mov	r0, r4
   d9846:	2200      	movs	r2, #0
   d9848:	210f      	movs	r1, #15
   d984a:	f000 fac2 	bl	d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d984e:	4620      	mov	r0, r4
   d9850:	2201      	movs	r2, #1
   d9852:	2100      	movs	r1, #0
   d9854:	f000 fae6 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d9858:	2201      	movs	r2, #1
   d985a:	4611      	mov	r1, r2
   d985c:	4620      	mov	r0, r4
   d985e:	f000 fae1 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d9862:	4620      	mov	r0, r4
   d9864:	2201      	movs	r2, #1
   d9866:	2102      	movs	r1, #2
   d9868:	f000 fadc 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d986c:	4620      	mov	r0, r4
   d986e:	2201      	movs	r2, #1
   d9870:	2103      	movs	r1, #3
   d9872:	f000 fad7 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d9876:	4620      	mov	r0, r4
   d9878:	2201      	movs	r2, #1
   d987a:	2104      	movs	r1, #4
   d987c:	f000 fad2 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d9880:	4620      	mov	r0, r4
   d9882:	2201      	movs	r2, #1
   d9884:	2105      	movs	r1, #5
   d9886:	f000 facd 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d988a:	4620      	mov	r0, r4
   d988c:	2201      	movs	r2, #1
   d988e:	2106      	movs	r1, #6
   d9890:	f000 fac8 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d9894:	4620      	mov	r0, r4
   d9896:	2201      	movs	r2, #1
   d9898:	2107      	movs	r1, #7
   d989a:	f000 fac3 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d989e:	4620      	mov	r0, r4
   d98a0:	2201      	movs	r2, #1
   d98a2:	2108      	movs	r1, #8
   d98a4:	f000 fabe 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d98a8:	4620      	mov	r0, r4
   d98aa:	2201      	movs	r2, #1
   d98ac:	2109      	movs	r1, #9
   d98ae:	f000 fab9 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d98b2:	4620      	mov	r0, r4
   d98b4:	2201      	movs	r2, #1
   d98b6:	210a      	movs	r1, #10
   d98b8:	f000 fab4 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d98bc:	4620      	mov	r0, r4
   d98be:	2201      	movs	r2, #1
   d98c0:	210b      	movs	r1, #11
   d98c2:	f000 faaf 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d98c6:	4620      	mov	r0, r4
   d98c8:	2201      	movs	r2, #1
   d98ca:	210c      	movs	r1, #12
   d98cc:	f000 faaa 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d98d0:	4620      	mov	r0, r4
   d98d2:	2201      	movs	r2, #1
   d98d4:	210d      	movs	r1, #13
   d98d6:	f000 faa5 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d98da:	4620      	mov	r0, r4
   d98dc:	2201      	movs	r2, #1
   d98de:	210e      	movs	r1, #14
   d98e0:	f000 faa0 	bl	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d98e4:	4620      	mov	r0, r4
   d98e6:	2201      	movs	r2, #1
   d98e8:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d98ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d98ee:	f000 ba99 	b.w	d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>
   d98f2:	bf00      	nop
   d98f4:	2003e22c 	.word	0x2003e22c

000d98f8 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d98f8:	4801      	ldr	r0, [pc, #4]	; (d9900 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d98fa:	f000 ba76 	b.w	d9dea <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d98fe:	bf00      	nop
   d9900:	2003e22c 	.word	0x2003e22c

000d9904 <_GLOBAL__sub_I_IOexp>:
   d9904:	f000 bd76 	b.w	da3f4 <HAL_Pin_Map>

000d9908 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9908:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d990a:	a50e      	add	r5, pc, #56	; (adr r5, d9944 <_ZN7ADXL345C1Ev+0x3c>)
   d990c:	e9d5 4500 	ldrd	r4, r5, [r5]
   d9910:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9914:	a50d      	add	r5, pc, #52	; (adr r5, d994c <_ZN7ADXL345C1Ev+0x44>)
   d9916:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d991a:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d991c:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9920:	a50c      	add	r5, pc, #48	; (adr r5, d9954 <_ZN7ADXL345C1Ev+0x4c>)
   d9922:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9926:	6282      	str	r2, [r0, #40]	; 0x28
   d9928:	2201      	movs	r2, #1
   d992a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d992e:	4904      	ldr	r1, [pc, #16]	; (d9940 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d9930:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d9932:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9934:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d9936:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9938:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d993c:	bd30      	pop	{r4, r5, pc}
   d993e:	bf00      	nop
   d9940:	004c4b40 	.word	0x004c4b40
   d9944:	6cf9279f 	.word	0x6cf9279f
   d9948:	3f6ed578 	.word	0x3f6ed578
   d994c:	f28f7f0e 	.word	0xf28f7f0e
   d9950:	3f6ecd7a 	.word	0x3f6ecd7a
   d9954:	30d80f20 	.word	0x30d80f20
   d9958:	3f6c9c9e 	.word	0x3f6c9c9e

000d995c <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d995c:	b538      	push	{r3, r4, r5, lr}
   d995e:	4614      	mov	r4, r2
   d9960:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9962:	f003 fb77 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9966:	2153      	movs	r1, #83	; 0x53
   d9968:	f002 fe72 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d996c:	f003 fb72 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9970:	6803      	ldr	r3, [r0, #0]
   d9972:	4629      	mov	r1, r5
   d9974:	689b      	ldr	r3, [r3, #8]
   d9976:	4798      	blx	r3
	Wire.write(_val);                 
   d9978:	f003 fb6c 	bl	dd054 <_Z19__fetch_global_Wirev>
   d997c:	6803      	ldr	r3, [r0, #0]
   d997e:	4621      	mov	r1, r4
   d9980:	689b      	ldr	r3, [r3, #8]
   d9982:	4798      	blx	r3
	Wire.endTransmission();         
   d9984:	f003 fb66 	bl	dd054 <_Z19__fetch_global_Wirev>
}
   d9988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d998c:	f002 be67 	b.w	dc65e <_ZN7TwoWire15endTransmissionEv>

000d9990 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d9990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9994:	4616      	mov	r6, r2
   d9996:	461f      	mov	r7, r3
   d9998:	460c      	mov	r4, r1
   d999a:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d999c:	f003 fb5a 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99a0:	2153      	movs	r1, #83	; 0x53
   d99a2:	f002 fe55 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d99a6:	f003 fb55 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99aa:	6803      	ldr	r3, [r0, #0]
   d99ac:	4621      	mov	r1, r4
   d99ae:	689b      	ldr	r3, [r3, #8]
   d99b0:	4798      	blx	r3
	Wire.endTransmission();         
   d99b2:	f003 fb4f 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99b6:	f002 fe52 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d99ba:	f003 fb4b 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99be:	2153      	movs	r1, #83	; 0x53
   d99c0:	f002 fe46 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d99c4:	f003 fb46 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99c8:	4632      	mov	r2, r6
   d99ca:	2153      	movs	r1, #83	; 0x53
   d99cc:	f002 fe32 	bl	dc634 <_ZN7TwoWire11requestFromEii>
   d99d0:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d99d2:	f003 fb3f 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99d6:	6803      	ldr	r3, [r0, #0]
   d99d8:	691b      	ldr	r3, [r3, #16]
   d99da:	ebc7 0804 	rsb	r8, r7, r4
   d99de:	4798      	blx	r3
   d99e0:	b138      	cbz	r0, d99f2 <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d99e2:	f003 fb37 	bl	dd054 <_Z19__fetch_global_Wirev>
   d99e6:	6803      	ldr	r3, [r0, #0]
   d99e8:	695b      	ldr	r3, [r3, #20]
   d99ea:	4798      	blx	r3
   d99ec:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d99f0:	e7ef      	b.n	d99d2 <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d99f2:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d99f4:	bf1e      	ittt	ne
   d99f6:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d99f8:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d99fa:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d99fc:	f003 fb2a 	bl	dd054 <_Z19__fetch_global_Wirev>
}
   d9a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d9a04:	f002 be2b 	b.w	dc65e <_ZN7TwoWire15endTransmissionEv>

000d9a08 <_ZN7ADXL34510writeToSPIEhh>:
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
   d9a0a:	4d0b      	ldr	r5, [pc, #44]	; (d9a38 <_ZN7ADXL34510writeToSPIEhh+0x30>)
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a0c:	4604      	mov	r4, r0
   d9a0e:	460f      	mov	r7, r1
  digitalWrite(_CS, LOW);
   d9a10:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   d9a12:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d9a14:	4616      	mov	r6, r2
  digitalWrite(_CS, LOW);
   d9a16:	f003 fa92 	bl	dcf3e <digitalWrite>
  SPI.transfer(__reg_address); 
   d9a1a:	4639      	mov	r1, r7
   d9a1c:	4628      	mov	r0, r5
   d9a1e:	f001 f90b 	bl	dac38 <_ZN8SPIClass8transferEh>
  SPI.transfer(__val); 
   d9a22:	4631      	mov	r1, r6
   d9a24:	4628      	mov	r0, r5
   d9a26:	f001 f907 	bl	dac38 <_ZN8SPIClass8transferEh>
  digitalWrite(_CS, HIGH); 
   d9a2a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   d9a2c:	2101      	movs	r1, #1
}
   d9a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   d9a32:	f003 ba84 	b.w	dcf3e <digitalWrite>
   d9a36:	bf00      	nop
   d9a38:	2003e5d8 	.word	0x2003e5d8

000d9a3c <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   d9a3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d9a40:	b10b      	cbz	r3, d9a46 <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   d9a42:	f7ff bf8b 	b.w	d995c <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   d9a46:	f7ff bfdf 	b.w	d9a08 <_ZN7ADXL34510writeToSPIEhh>

000d9a4a <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9a4a:	b510      	push	{r4, lr}
	if(I2C) {
   d9a4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d9a50:	4604      	mov	r4, r0
	if(I2C) {
   d9a52:	b11b      	cbz	r3, d9a5c <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   d9a54:	f003 fafe 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9a58:	f002 fdd6 	bl	dc608 <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   d9a5c:	4620      	mov	r0, r4
   d9a5e:	2200      	movs	r2, #0
   d9a60:	212d      	movs	r1, #45	; 0x2d
   d9a62:	f7ff ffeb 	bl	d9a3c <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   d9a66:	4620      	mov	r0, r4
   d9a68:	2210      	movs	r2, #16
   d9a6a:	212d      	movs	r1, #45	; 0x2d
   d9a6c:	f7ff ffe6 	bl	d9a3c <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9a70:	4620      	mov	r0, r4
   d9a72:	2208      	movs	r2, #8
   d9a74:	212d      	movs	r1, #45	; 0x2d
}
   d9a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d9a7a:	f7ff bfdf 	b.w	d9a3c <_ZN7ADXL3457writeToEhh>
	...

000d9a80 <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   d9a82:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   d9a84:	bfd4      	ite	le
   d9a86:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   d9a8a:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9a8e:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9a90:	2100      	movs	r1, #0
   d9a92:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d9a94:	461f      	mov	r7, r3
   d9a96:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d9a98:	f003 fa51 	bl	dcf3e <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   d9a9c:	4621      	mov	r1, r4
   d9a9e:	480a      	ldr	r0, [pc, #40]	; (d9ac8 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d9aa0:	f001 f8ca 	bl	dac38 <_ZN8SPIClass8transferEh>
   d9aa4:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   d9aa6:	1be3      	subs	r3, r4, r7
   d9aa8:	429e      	cmp	r6, r3
   d9aaa:	dd06      	ble.n	d9aba <_ZN7ADXL34511readFromSPIEhiPh+0x3a>
    _buff[i] = SPI.transfer(0x00);
   d9aac:	2100      	movs	r1, #0
   d9aae:	4806      	ldr	r0, [pc, #24]	; (d9ac8 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d9ab0:	f001 f8c2 	bl	dac38 <_ZN8SPIClass8transferEh>
   d9ab4:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   d9ab8:	e7f5      	b.n	d9aa6 <_ZN7ADXL34511readFromSPIEhiPh+0x26>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9aba:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   d9abc:	2101      	movs	r1, #1
}
   d9abe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d9ac2:	f003 ba3c 	b.w	dcf3e <digitalWrite>
   d9ac6:	bf00      	nop
   d9ac8:	2003e5d8 	.word	0x2003e5d8

000d9acc <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d9acc:	b410      	push	{r4}
	if(I2C) {
   d9ace:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   d9ad2:	b11c      	cbz	r4, d9adc <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9ad4:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   d9ad8:	f7ff bf5a 	b.w	d9990 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d9adc:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   d9ae0:	f7ff bfce 	b.w	d9a80 <_ZN7ADXL34511readFromSPIEhiPh>

000d9ae4 <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9ae6:	3904      	subs	r1, #4
   d9ae8:	290c      	cmp	r1, #12
   d9aea:	bf98      	it	ls
   d9aec:	4b0c      	ldrls	r3, [pc, #48]	; (d9b20 <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9aee:	f04f 0201 	mov.w	r2, #1
   d9af2:	bf98      	it	ls
   d9af4:	5c5d      	ldrbls	r5, [r3, r1]
   d9af6:	f10d 0307 	add.w	r3, sp, #7
   d9afa:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   d9afe:	bf88      	it	hi
   d9b00:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d9b02:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d9b04:	f7ff ffe2 	bl	d9acc <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   d9b08:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9b0c:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   d9b10:	432a      	orrs	r2, r5
   d9b12:	2131      	movs	r1, #49	; 0x31
   d9b14:	4620      	mov	r0, r4
   d9b16:	f7ff ff91 	bl	d9a3c <_ZN7ADXL3457writeToEhh>
}
   d9b1a:	b003      	add	sp, #12
   d9b1c:	bd30      	pop	{r4, r5, pc}
   d9b1e:	bf00      	nop
   d9b20:	000e7978 	.word	0x000e7978

000d9b24 <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   d9b24:	f381 0208 	usat	r2, #8, r1
   d9b28:	b2d2      	uxtb	r2, r2
   d9b2a:	2124      	movs	r1, #36	; 0x24
   d9b2c:	f7ff bf86 	b.w	d9a3c <_ZN7ADXL3457writeToEhh>

000d9b30 <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   d9b30:	f381 0208 	usat	r2, #8, r1
   d9b34:	b2d2      	uxtb	r2, r2
   d9b36:	2125      	movs	r1, #37	; 0x25
   d9b38:	f7ff bf80 	b.w	d9a3c <_ZN7ADXL3457writeToEhh>

000d9b3c <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   d9b3c:	f381 0208 	usat	r2, #8, r1
   d9b40:	b2d2      	uxtb	r2, r2
   d9b42:	2126      	movs	r1, #38	; 0x26
   d9b44:	f7ff bf7a 	b.w	d9a3c <_ZN7ADXL3457writeToEhh>

000d9b48 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d9b48:	fa41 f202 	asr.w	r2, r1, r2
}
   d9b4c:	f002 0001 	and.w	r0, r2, #1
   d9b50:	4770      	bx	lr

000d9b52 <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   d9b52:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d9b54:	2201      	movs	r2, #1
   d9b56:	f10d 0307 	add.w	r3, sp, #7
   d9b5a:	2130      	movs	r1, #48	; 0x30
   d9b5c:	f7ff ffb6 	bl	d9acc <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   d9b60:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9b64:	b003      	add	sp, #12
   d9b66:	f85d fb04 	ldr.w	pc, [sp], #4

000d9b6a <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9b6c:	4616      	mov	r6, r2
   d9b6e:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9b70:	2201      	movs	r2, #1
   d9b72:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d9b76:	4604      	mov	r4, r0
   d9b78:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   d9b7a:	f7ff ffa7 	bl	d9acc <_ZN7ADXL3458readFromEhiPh>
   d9b7e:	2201      	movs	r2, #1
   d9b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9b84:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   d9b86:	b10f      	cbz	r7, d9b8c <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d9b88:	4313      	orrs	r3, r2
   d9b8a:	e001      	b.n	d9b90 <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   d9b8c:	ea23 0302 	bic.w	r3, r3, r2
   d9b90:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   d9b94:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d9b98:	4629      	mov	r1, r5
   d9b9a:	4620      	mov	r0, r4
   d9b9c:	f7ff ff4e 	bl	d9a3c <_ZN7ADXL3457writeToEhh>
}
   d9ba0:	b003      	add	sp, #12
   d9ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9ba4 <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d9ba4:	460b      	mov	r3, r1
   d9ba6:	2206      	movs	r2, #6
   d9ba8:	2127      	movs	r1, #39	; 0x27
   d9baa:	f7ff bfde 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9bae <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d9bae:	460b      	mov	r3, r1
   d9bb0:	2205      	movs	r2, #5
   d9bb2:	2127      	movs	r1, #39	; 0x27
   d9bb4:	f7ff bfd9 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9bb8 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d9bb8:	460b      	mov	r3, r1
   d9bba:	2204      	movs	r2, #4
   d9bbc:	2127      	movs	r1, #39	; 0x27
   d9bbe:	f7ff bfd4 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9bc2 <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9bc2:	b570      	push	{r4, r5, r6, lr}
   d9bc4:	4604      	mov	r4, r0
   d9bc6:	4616      	mov	r6, r2
   d9bc8:	461d      	mov	r5, r3
	setActivityX(stateX);
   d9bca:	f7ff ffeb 	bl	d9ba4 <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   d9bce:	4631      	mov	r1, r6
   d9bd0:	4620      	mov	r0, r4
   d9bd2:	f7ff ffec 	bl	d9bae <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   d9bd6:	4629      	mov	r1, r5
   d9bd8:	4620      	mov	r0, r4
}
   d9bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   d9bde:	f7ff bfeb 	b.w	d9bb8 <_ZN7ADXL34512setActivityZEb>

000d9be2 <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d9be2:	460b      	mov	r3, r1
   d9be4:	2202      	movs	r2, #2
   d9be6:	2127      	movs	r1, #39	; 0x27
   d9be8:	f7ff bfbf 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9bec <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d9bec:	460b      	mov	r3, r1
   d9bee:	2201      	movs	r2, #1
   d9bf0:	2127      	movs	r1, #39	; 0x27
   d9bf2:	f7ff bfba 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9bf6 <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d9bf6:	460b      	mov	r3, r1
   d9bf8:	2200      	movs	r2, #0
   d9bfa:	2127      	movs	r1, #39	; 0x27
   d9bfc:	f7ff bfb5 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9c00 <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d9c00:	b570      	push	{r4, r5, r6, lr}
   d9c02:	4604      	mov	r4, r0
   d9c04:	4616      	mov	r6, r2
   d9c06:	461d      	mov	r5, r3
	setInactivityX(stateX);
   d9c08:	f7ff ffeb 	bl	d9be2 <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   d9c0c:	4631      	mov	r1, r6
   d9c0e:	4620      	mov	r0, r4
   d9c10:	f7ff ffec 	bl	d9bec <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   d9c14:	4629      	mov	r1, r5
   d9c16:	4620      	mov	r0, r4
}
   d9c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   d9c1c:	f7ff bfeb 	b.w	d9bf6 <_ZN7ADXL34514setInactivityZEb>

000d9c20 <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d9c20:	4613      	mov	r3, r2
   d9c22:	460a      	mov	r2, r1
   d9c24:	212f      	movs	r1, #47	; 0x2f
   d9c26:	f7ff bfa0 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9c2a <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   d9c2e:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d9c30:	4604      	mov	r4, r0
   d9c32:	4690      	mov	r8, r2
   d9c34:	461d      	mov	r5, r3
   d9c36:	9f06      	ldr	r7, [sp, #24]
   d9c38:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   d9c3a:	d101      	bne.n	d9c40 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9c3c:	2200      	movs	r2, #0
   d9c3e:	e002      	b.n	d9c46 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   d9c40:	2902      	cmp	r1, #2
   d9c42:	d103      	bne.n	d9c4c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9c44:	2201      	movs	r2, #1
   d9c46:	2106      	movs	r1, #6
   d9c48:	f7ff ffea 	bl	d9c20 <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   d9c4c:	f1b8 0f01 	cmp.w	r8, #1
   d9c50:	d101      	bne.n	d9c56 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d9c52:	2200      	movs	r2, #0
   d9c54:	e003      	b.n	d9c5e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   d9c56:	f1b8 0f02 	cmp.w	r8, #2
   d9c5a:	d104      	bne.n	d9c66 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d9c5c:	2201      	movs	r2, #1
   d9c5e:	2105      	movs	r1, #5
   d9c60:	4620      	mov	r0, r4
   d9c62:	f7ff ffdd 	bl	d9c20 <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   d9c66:	2d01      	cmp	r5, #1
   d9c68:	d102      	bne.n	d9c70 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   d9c6a:	2200      	movs	r2, #0
   d9c6c:	2102      	movs	r1, #2
   d9c6e:	e003      	b.n	d9c78 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   d9c70:	2d02      	cmp	r5, #2
   d9c72:	d104      	bne.n	d9c7e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   d9c74:	2201      	movs	r2, #1
   d9c76:	4629      	mov	r1, r5
   d9c78:	4620      	mov	r0, r4
   d9c7a:	f7ff ffd1 	bl	d9c20 <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   d9c7e:	2f01      	cmp	r7, #1
   d9c80:	d101      	bne.n	d9c86 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9c82:	2200      	movs	r2, #0
   d9c84:	e002      	b.n	d9c8c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   d9c86:	2f02      	cmp	r7, #2
   d9c88:	d104      	bne.n	d9c94 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9c8a:	2201      	movs	r2, #1
   d9c8c:	2104      	movs	r1, #4
   d9c8e:	4620      	mov	r0, r4
   d9c90:	f7ff ffc6 	bl	d9c20 <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   d9c94:	2e01      	cmp	r6, #1
   d9c96:	d101      	bne.n	d9c9c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d9c98:	2200      	movs	r2, #0
   d9c9a:	e002      	b.n	d9ca2 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   d9c9c:	2e02      	cmp	r6, #2
   d9c9e:	d106      	bne.n	d9cae <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9ca0:	2201      	movs	r2, #1
   d9ca2:	4620      	mov	r0, r4
   d9ca4:	2103      	movs	r1, #3
}
   d9ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d9caa:	f7ff bfb9 	b.w	d9c20 <_ZN7ADXL34519setInterruptMappingEhb>
   d9cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9cb2 <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d9cb2:	4613      	mov	r3, r2
   d9cb4:	460a      	mov	r2, r1
   d9cb6:	212e      	movs	r1, #46	; 0x2e
   d9cb8:	f7ff bf57 	b.w	d9b6a <_ZN7ADXL34514setRegisterBitEhib>

000d9cbc <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   d9cbc:	460a      	mov	r2, r1
   d9cbe:	b101      	cbz	r1, d9cc2 <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   d9cc0:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   d9cc2:	2104      	movs	r1, #4
   d9cc4:	f7ff bff5 	b.w	d9cb2 <_ZN7ADXL34512setInterruptEhb>

000d9cc8 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   d9cc8:	460a      	mov	r2, r1
   d9cca:	b101      	cbz	r1, d9cce <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   d9ccc:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   d9cce:	2103      	movs	r1, #3
   d9cd0:	f7ff bfef 	b.w	d9cb2 <_ZN7ADXL34512setInterruptEhb>

000d9cd4 <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d9cd4:	f000 bb8e 	b.w	da3f4 <HAL_Pin_Map>

000d9cd8 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d9cd8:	b510      	push	{r4, lr}
   d9cda:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9cdc:	f003 f9ba 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9ce0:	6803      	ldr	r3, [r0, #0]
   d9ce2:	4621      	mov	r1, r4
   d9ce4:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d9ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9cea:	4718      	bx	r3

000d9cec <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d9cec:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d9cee:	f003 f9b1 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9cf2:	6803      	ldr	r3, [r0, #0]
   d9cf4:	695b      	ldr	r3, [r3, #20]
   d9cf6:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d9cf8:	b2c0      	uxtb	r0, r0
   d9cfa:	bd08      	pop	{r3, pc}

000d9cfc <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d9cfc:	b538      	push	{r3, r4, r5, lr}
   d9cfe:	4604      	mov	r4, r0
   d9d00:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9d02:	f003 f9a7 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9d06:	7821      	ldrb	r1, [r4, #0]
   d9d08:	f041 0120 	orr.w	r1, r1, #32
   d9d0c:	f002 fca0 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d9d10:	4628      	mov	r0, r5
   d9d12:	f7ff ffe1 	bl	d9cd8 <_ZL8wiresendh>
	Wire.endTransmission();
   d9d16:	f003 f99d 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9d1a:	f002 fca0 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d9d1e:	f003 f999 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9d22:	7821      	ldrb	r1, [r4, #0]
   d9d24:	2201      	movs	r2, #1
   d9d26:	f041 0120 	orr.w	r1, r1, #32
   d9d2a:	f002 fc83 	bl	dc634 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d9d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d9d32:	f7ff bfdb 	b.w	d9cec <_ZL8wirerecvv>

000d9d36 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d9d36:	b570      	push	{r4, r5, r6, lr}
   d9d38:	4606      	mov	r6, r0
   d9d3a:	4614      	mov	r4, r2
   d9d3c:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9d3e:	f003 f989 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9d42:	7831      	ldrb	r1, [r6, #0]
   d9d44:	f041 0120 	orr.w	r1, r1, #32
   d9d48:	f002 fc82 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d9d4c:	4628      	mov	r0, r5
   d9d4e:	f7ff ffc3 	bl	d9cd8 <_ZL8wiresendh>
	wiresend(regValue);
   d9d52:	4620      	mov	r0, r4
   d9d54:	f7ff ffc0 	bl	d9cd8 <_ZL8wiresendh>
	Wire.endTransmission();
   d9d58:	f003 f97c 	bl	dd054 <_Z19__fetch_global_Wirev>
}
   d9d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d9d60:	f002 bc7d 	b.w	dc65e <_ZN7TwoWire15endTransmissionEv>

000d9d64 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9d68:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9d6c:	2907      	cmp	r1, #7
   d9d6e:	bf98      	it	ls
   d9d70:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9d72:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9d76:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9d78:	4631      	mov	r1, r6
   d9d7a:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9d7c:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9d7e:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9d80:	f7ff ffbc 	bl	d9cfc <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9d84:	f1b8 0f00 	cmp.w	r8, #0
   d9d88:	d001      	beq.n	d9d8e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d9d8a:	4304      	orrs	r4, r0
   d9d8c:	e001      	b.n	d9d92 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d9d8e:	ea20 0404 	bic.w	r4, r0, r4
   d9d92:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d9d94:	4631      	mov	r1, r6
   d9d96:	4628      	mov	r0, r5
}
   d9d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d9d9c:	f7ff bfcb 	b.w	d9d36 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9da0 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9da0:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d9da2:	2907      	cmp	r1, #7
   d9da4:	bf28      	it	cs
   d9da6:	2107      	movcs	r1, #7
   d9da8:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9daa:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d9dac:	f003 f952 	bl	dd054 <_Z19__fetch_global_Wirev>
   d9db0:	f002 fc2a 	bl	dc608 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d9db4:	4620      	mov	r0, r4
   d9db6:	22ff      	movs	r2, #255	; 0xff
   d9db8:	2100      	movs	r1, #0
   d9dba:	f7ff ffbc 	bl	d9d36 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d9dbe:	4620      	mov	r0, r4
   d9dc0:	22ff      	movs	r2, #255	; 0xff
   d9dc2:	2101      	movs	r1, #1
}
   d9dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d9dc8:	f7ff bfb5 	b.w	d9d36 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9dcc <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d9dcc:	2100      	movs	r1, #0
   d9dce:	f7ff bfe7 	b.w	d9da0 <_ZN17Adafruit_MCP230175beginEh>

000d9dd2 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d9dd2:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d9dd4:	2301      	movs	r3, #1
   d9dd6:	fab2 f282 	clz	r2, r2
   d9dda:	9300      	str	r3, [sp, #0]
   d9ddc:	0952      	lsrs	r2, r2, #5
   d9dde:	2300      	movs	r3, #0
   d9de0:	f7ff ffc0 	bl	d9d64 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9de4:	b003      	add	sp, #12
   d9de6:	f85d fb04 	ldr.w	pc, [sp], #4

000d9dea <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9dea:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9dee:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9df2:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9df4:	bf34      	ite	cc
   d9df6:	2114      	movcc	r1, #20
   d9df8:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9dfa:	4605      	mov	r5, r0
   d9dfc:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9dfe:	f7ff ff7d 	bl	d9cfc <_ZN17Adafruit_MCP2301712readRegisterEh>
   d9e02:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e04:	40b3      	lsls	r3, r6
   d9e06:	b10f      	cbz	r7, d9e0c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d9e08:	4303      	orrs	r3, r0
   d9e0a:	e001      	b.n	d9e10 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d9e0c:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9e10:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e12:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e14:	4628      	mov	r0, r5
   d9e16:	bf34      	ite	cc
   d9e18:	2112      	movcc	r1, #18
   d9e1a:	2113      	movcs	r1, #19
}
   d9e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e20:	f7ff bf89 	b.w	d9d36 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e24 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d9e24:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d9e26:	230d      	movs	r3, #13
   d9e28:	9300      	str	r3, [sp, #0]
   d9e2a:	230c      	movs	r3, #12
   d9e2c:	f7ff ff9a 	bl	d9d64 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9e30:	b003      	add	sp, #12
   d9e32:	f85d fb04 	ldr.w	pc, [sp], #4

000d9e36 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d9e36:	f000 badd 	b.w	da3f4 <HAL_Pin_Map>

000d9e3a <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d9e3a:	2200      	movs	r2, #0
   d9e3c:	6042      	str	r2, [r0, #4]
   d9e3e:	6082      	str	r2, [r0, #8]
   d9e40:	60c2      	str	r2, [r0, #12]
   d9e42:	6102      	str	r2, [r0, #16]
   d9e44:	6142      	str	r2, [r0, #20]
   d9e46:	6182      	str	r2, [r0, #24]
   d9e48:	61c2      	str	r2, [r0, #28]
   d9e4a:	6202      	str	r2, [r0, #32]
   d9e4c:	6242      	str	r2, [r0, #36]	; 0x24
   d9e4e:	6282      	str	r2, [r0, #40]	; 0x28
   d9e50:	2201      	movs	r2, #1
   d9e52:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d9e56:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d9e5a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d9e5e:	4770      	bx	lr

000d9e60 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d9e60:	b538      	push	{r3, r4, r5, lr}
   d9e62:	4605      	mov	r5, r0
   d9e64:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9e66:	6800      	ldr	r0, [r0, #0]
   d9e68:	2169      	movs	r1, #105	; 0x69
   d9e6a:	f002 fbf1 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d9e6e:	0a21      	lsrs	r1, r4, #8
   d9e70:	6828      	ldr	r0, [r5, #0]
   d9e72:	f7ff fa57 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d9e76:	b2e1      	uxtb	r1, r4
   d9e78:	6828      	ldr	r0, [r5, #0]
   d9e7a:	f7ff fa53 	bl	d9324 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9e7e:	6828      	ldr	r0, [r5, #0]
   d9e80:	f002 fbed 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
   d9e84:	b108      	cbz	r0, d9e8a <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d9e86:	2000      	movs	r0, #0
   d9e88:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d9e8a:	2202      	movs	r2, #2
   d9e8c:	2169      	movs	r1, #105	; 0x69
   d9e8e:	6828      	ldr	r0, [r5, #0]
   d9e90:	f002 fbcd 	bl	dc62e <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d9e94:	6828      	ldr	r0, [r5, #0]
   d9e96:	6803      	ldr	r3, [r0, #0]
   d9e98:	691b      	ldr	r3, [r3, #16]
   d9e9a:	4798      	blx	r3
   d9e9c:	2800      	cmp	r0, #0
   d9e9e:	d0f2      	beq.n	d9e86 <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d9ea0:	6828      	ldr	r0, [r5, #0]
   d9ea2:	6803      	ldr	r3, [r0, #0]
   d9ea4:	695b      	ldr	r3, [r3, #20]
   d9ea6:	4798      	blx	r3
   d9ea8:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d9eaa:	6828      	ldr	r0, [r5, #0]
   d9eac:	6803      	ldr	r3, [r0, #0]
   d9eae:	695b      	ldr	r3, [r3, #20]
   d9eb0:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d9eb2:	0224      	lsls	r4, r4, #8
   d9eb4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d9eb8:	b2c0      	uxtb	r0, r0
   d9eba:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d9ebc:	bd38      	pop	{r3, r4, r5, pc}

000d9ebe <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d9ebe:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d9ec0:	f240 2102 	movw	r1, #514	; 0x202
   d9ec4:	f7ff ffcc 	bl	d9e60 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d9ec8:	1e43      	subs	r3, r0, #1
   d9eca:	4258      	negs	r0, r3
   d9ecc:	4158      	adcs	r0, r3
   d9ece:	bd08      	pop	{r3, pc}

000d9ed0 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d9ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ed2:	b08b      	sub	sp, #44	; 0x2c
   d9ed4:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d9ed6:	f7ff fff2 	bl	d9ebe <_ZN5SPS3013dataAvailableEv>
   d9eda:	4604      	mov	r4, r0
   d9edc:	2800      	cmp	r0, #0
   d9ede:	f000 8104 	beq.w	da0ea <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9ee2:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9ee4:	2169      	movs	r1, #105	; 0x69
   d9ee6:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9ee8:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d9eea:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d9eec:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d9eee:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d9ef0:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d9ef2:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d9ef4:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d9ef6:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d9ef8:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d9efa:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9efc:	f002 fba8 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d9f00:	2103      	movs	r1, #3
   d9f02:	6828      	ldr	r0, [r5, #0]
   d9f04:	f7ff fa0e 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d9f08:	4639      	mov	r1, r7
   d9f0a:	6828      	ldr	r0, [r5, #0]
   d9f0c:	f7ff fa0a 	bl	d9324 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9f10:	6828      	ldr	r0, [r5, #0]
   d9f12:	f002 fba4 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
   d9f16:	4606      	mov	r6, r0
   d9f18:	2800      	cmp	r0, #0
   d9f1a:	f040 80e5 	bne.w	da0e8 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d9f1e:	223c      	movs	r2, #60	; 0x3c
   d9f20:	2169      	movs	r1, #105	; 0x69
   d9f22:	6828      	ldr	r0, [r5, #0]
   d9f24:	f002 fb83 	bl	dc62e <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d9f28:	6828      	ldr	r0, [r5, #0]
   d9f2a:	6803      	ldr	r3, [r0, #0]
   d9f2c:	691b      	ldr	r3, [r3, #16]
   d9f2e:	4798      	blx	r3
   d9f30:	bb18      	cbnz	r0, d9f7a <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d9f32:	9800      	ldr	r0, [sp, #0]
   d9f34:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d9f36:	9801      	ldr	r0, [sp, #4]
   d9f38:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d9f3a:	9802      	ldr	r0, [sp, #8]
   d9f3c:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d9f3e:	9803      	ldr	r0, [sp, #12]
   d9f40:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d9f42:	9804      	ldr	r0, [sp, #16]
   d9f44:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d9f46:	9805      	ldr	r0, [sp, #20]
   d9f48:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d9f4a:	9806      	ldr	r0, [sp, #24]
   d9f4c:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d9f4e:	9807      	ldr	r0, [sp, #28]
   d9f50:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d9f52:	9808      	ldr	r0, [sp, #32]
   d9f54:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9f56:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d9f58:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9f5a:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9f5c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d9f60:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d9f64:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d9f68:	e0bf      	b.n	da0ea <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d9f6a:	9b00      	ldr	r3, [sp, #0]
   d9f6c:	b2c0      	uxtb	r0, r0
   d9f6e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9f72:	9000      	str	r0, [sp, #0]
   d9f74:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d9f76:	2e3c      	cmp	r6, #60	; 0x3c
   d9f78:	d0db      	beq.n	d9f32 <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d9f7a:	6828      	ldr	r0, [r5, #0]
   d9f7c:	6803      	ldr	r3, [r0, #0]
   d9f7e:	695b      	ldr	r3, [r3, #20]
   d9f80:	4798      	blx	r3

      switch (x)
   d9f82:	b2f3      	uxtb	r3, r6
   d9f84:	2b3a      	cmp	r3, #58	; 0x3a
   d9f86:	d8f5      	bhi.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
   d9f88:	a201      	add	r2, pc, #4	; (adr r2, d9f90 <_ZN5SPS3015readMeasurementEv+0xc0>)
   d9f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d9f8e:	bf00      	nop
   d9f90:	000d9f6b 	.word	0x000d9f6b
   d9f94:	000d9f6b 	.word	0x000d9f6b
   d9f98:	000d9f75 	.word	0x000d9f75
   d9f9c:	000d9f6b 	.word	0x000d9f6b
   d9fa0:	000d9f6b 	.word	0x000d9f6b
   d9fa4:	000d9f75 	.word	0x000d9f75
   d9fa8:	000da07d 	.word	0x000da07d
   d9fac:	000da07d 	.word	0x000da07d
   d9fb0:	000d9f75 	.word	0x000d9f75
   d9fb4:	000da07d 	.word	0x000da07d
   d9fb8:	000da07d 	.word	0x000da07d
   d9fbc:	000d9f75 	.word	0x000d9f75
   d9fc0:	000da089 	.word	0x000da089
   d9fc4:	000da089 	.word	0x000da089
   d9fc8:	000d9f75 	.word	0x000d9f75
   d9fcc:	000da089 	.word	0x000da089
   d9fd0:	000da089 	.word	0x000da089
   d9fd4:	000d9f75 	.word	0x000d9f75
   d9fd8:	000da095 	.word	0x000da095
   d9fdc:	000da095 	.word	0x000da095
   d9fe0:	000d9f75 	.word	0x000d9f75
   d9fe4:	000da095 	.word	0x000da095
   d9fe8:	000da095 	.word	0x000da095
   d9fec:	000d9f75 	.word	0x000d9f75
   d9ff0:	000da0a1 	.word	0x000da0a1
   d9ff4:	000da0a1 	.word	0x000da0a1
   d9ff8:	000d9f75 	.word	0x000d9f75
   d9ffc:	000da0a1 	.word	0x000da0a1
   da000:	000da0a1 	.word	0x000da0a1
   da004:	000d9f75 	.word	0x000d9f75
   da008:	000da0ad 	.word	0x000da0ad
   da00c:	000da0ad 	.word	0x000da0ad
   da010:	000d9f75 	.word	0x000d9f75
   da014:	000da0ad 	.word	0x000da0ad
   da018:	000da0ad 	.word	0x000da0ad
   da01c:	000d9f75 	.word	0x000d9f75
   da020:	000da0b9 	.word	0x000da0b9
   da024:	000da0b9 	.word	0x000da0b9
   da028:	000d9f75 	.word	0x000d9f75
   da02c:	000da0b9 	.word	0x000da0b9
   da030:	000da0b9 	.word	0x000da0b9
   da034:	000d9f75 	.word	0x000d9f75
   da038:	000da0c5 	.word	0x000da0c5
   da03c:	000da0c5 	.word	0x000da0c5
   da040:	000d9f75 	.word	0x000d9f75
   da044:	000da0c5 	.word	0x000da0c5
   da048:	000da0c5 	.word	0x000da0c5
   da04c:	000d9f75 	.word	0x000d9f75
   da050:	000da0d1 	.word	0x000da0d1
   da054:	000da0d1 	.word	0x000da0d1
   da058:	000d9f75 	.word	0x000d9f75
   da05c:	000da0d1 	.word	0x000da0d1
   da060:	000da0d1 	.word	0x000da0d1
   da064:	000d9f75 	.word	0x000d9f75
   da068:	000da0dd 	.word	0x000da0dd
   da06c:	000da0dd 	.word	0x000da0dd
   da070:	000d9f75 	.word	0x000d9f75
   da074:	000da0dd 	.word	0x000da0dd
   da078:	000da0dd 	.word	0x000da0dd
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   da07c:	9b01      	ldr	r3, [sp, #4]
   da07e:	b2c0      	uxtb	r0, r0
   da080:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da084:	9001      	str	r0, [sp, #4]
   da086:	e775      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   da088:	9b02      	ldr	r3, [sp, #8]
   da08a:	b2c0      	uxtb	r0, r0
   da08c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da090:	9002      	str	r0, [sp, #8]
   da092:	e76f      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   da094:	9b03      	ldr	r3, [sp, #12]
   da096:	b2c0      	uxtb	r0, r0
   da098:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da09c:	9003      	str	r0, [sp, #12]
   da09e:	e769      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   da0a0:	9b04      	ldr	r3, [sp, #16]
   da0a2:	b2c0      	uxtb	r0, r0
   da0a4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da0a8:	9004      	str	r0, [sp, #16]
   da0aa:	e763      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   da0ac:	9b05      	ldr	r3, [sp, #20]
   da0ae:	b2c0      	uxtb	r0, r0
   da0b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   da0b4:	9005      	str	r0, [sp, #20]
   da0b6:	e75d      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   da0b8:	9b06      	ldr	r3, [sp, #24]
   da0ba:	b2c0      	uxtb	r0, r0
   da0bc:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   da0c0:	9306      	str	r3, [sp, #24]
   da0c2:	e757      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   da0c4:	b2c3      	uxtb	r3, r0
   da0c6:	9807      	ldr	r0, [sp, #28]
   da0c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da0cc:	9307      	str	r3, [sp, #28]
   da0ce:	e751      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   da0d0:	b2c3      	uxtb	r3, r0
   da0d2:	9808      	ldr	r0, [sp, #32]
   da0d4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da0d8:	9308      	str	r3, [sp, #32]
   da0da:	e74b      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   da0dc:	b2c3      	uxtb	r3, r0
   da0de:	9809      	ldr	r0, [sp, #36]	; 0x24
   da0e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   da0e4:	9309      	str	r3, [sp, #36]	; 0x24
   da0e6:	e745      	b.n	d9f74 <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   da0e8:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   da0ea:	4620      	mov	r0, r4
   da0ec:	b00b      	add	sp, #44	; 0x2c
   da0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da0f0 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da0f0:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   da0f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   da0f6:	4604      	mov	r4, r0
   da0f8:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   da0fa:	b10b      	cbz	r3, da100 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   da0fc:	f7ff fee8 	bl	d9ed0 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   da100:	2301      	movs	r3, #1
   da102:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   da106:	6863      	ldr	r3, [r4, #4]
   da108:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   da10a:	68a3      	ldr	r3, [r4, #8]
   da10c:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   da10e:	68e3      	ldr	r3, [r4, #12]
   da110:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   da112:	6923      	ldr	r3, [r4, #16]
   da114:	60eb      	str	r3, [r5, #12]
}
   da116:	bd38      	pop	{r3, r4, r5, pc}

000da118 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   da118:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   da11a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   da11e:	4604      	mov	r4, r0
   da120:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   da122:	b10b      	cbz	r3, da128 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   da124:	f7ff fed4 	bl	d9ed0 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   da128:	2301      	movs	r3, #1
   da12a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   da12e:	6963      	ldr	r3, [r4, #20]
   da130:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   da132:	69a3      	ldr	r3, [r4, #24]
   da134:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   da136:	69e3      	ldr	r3, [r4, #28]
   da138:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   da13a:	6a23      	ldr	r3, [r4, #32]
   da13c:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   da13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da140:	612b      	str	r3, [r5, #16]
}
   da142:	bd38      	pop	{r3, r4, r5, pc}

000da144 <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da144:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   da146:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   da148:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   da14a:	1a63      	subs	r3, r4, r1
   da14c:	b2db      	uxtb	r3, r3
   da14e:	429a      	cmp	r2, r3
   da150:	d911      	bls.n	da176 <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   da152:	f814 3b01 	ldrb.w	r3, [r4], #1
   da156:	4058      	eors	r0, r3
   da158:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   da15a:	f010 0f80 	tst.w	r0, #128	; 0x80
   da15e:	f103 33ff 	add.w	r3, r3, #4294967295
   da162:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   da166:	bf18      	it	ne
   da168:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da16c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   da170:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   da172:	d1f2      	bne.n	da15a <_ZN5SPS3011computeCRC8EPhh+0x16>
   da174:	e7e9      	b.n	da14a <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   da176:	bd10      	pop	{r4, pc}

000da178 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da17c:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   da17e:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da180:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   da182:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da186:	a901      	add	r1, sp, #4
   da188:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   da18a:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   da18c:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da190:	f7ff ffd8 	bl	da144 <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da194:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   da196:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   da198:	6820      	ldr	r0, [r4, #0]
   da19a:	f002 fa59 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   da19e:	0a39      	lsrs	r1, r7, #8
   da1a0:	6820      	ldr	r0, [r4, #0]
   da1a2:	f7ff f8bf 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   da1a6:	b2f9      	uxtb	r1, r7
   da1a8:	6820      	ldr	r0, [r4, #0]
   da1aa:	f7ff f8bb 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   da1ae:	4631      	mov	r1, r6
   da1b0:	6820      	ldr	r0, [r4, #0]
   da1b2:	f7ff f8b7 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   da1b6:	b2e9      	uxtb	r1, r5
   da1b8:	6820      	ldr	r0, [r4, #0]
   da1ba:	f7ff f8b3 	bl	d9324 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   da1be:	6820      	ldr	r0, [r4, #0]
   da1c0:	6803      	ldr	r3, [r0, #0]
   da1c2:	4641      	mov	r1, r8
   da1c4:	689b      	ldr	r3, [r3, #8]
   da1c6:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   da1c8:	6820      	ldr	r0, [r4, #0]
   da1ca:	f002 fa48 	bl	dc65e <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   da1ce:	fab0 f080 	clz	r0, r0
   da1d2:	0940      	lsrs	r0, r0, #5
   da1d4:	b002      	add	sp, #8
   da1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da1da <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   da1da:	f44f 7240 	mov.w	r2, #768	; 0x300
   da1de:	2110      	movs	r1, #16
   da1e0:	f7ff bfca 	b.w	da178 <_ZN5SPS3011sendCommandEtt>

000da1e4 <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   da1e4:	b510      	push	{r4, lr}
   da1e6:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   da1e8:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   da1ea:	4608      	mov	r0, r1
   da1ec:	f002 fa0c 	bl	dc608 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da1f0:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   da1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   da1f6:	f7ff bff0 	b.w	da1da <_ZN5SPS3014beginMeasuringEv>

000da1fa <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   da1fa:	f000 b8fb 	b.w	da3f4 <HAL_Pin_Map>

000da1fe <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   da1fe:	f04f 33ff 	mov.w	r3, #4294967295
   da202:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   da206:	4770      	bx	lr

000da208 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   da208:	b570      	push	{r4, r5, r6, lr}
   da20a:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da20c:	f000 f8c2 	bl	da394 <_Z11BlynkMillisv>
   da210:	2400      	movs	r4, #0
   da212:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   da214:	1928      	adds	r0, r5, r4
   da216:	2224      	movs	r2, #36	; 0x24
   da218:	2100      	movs	r1, #0
   da21a:	f009 fa06 	bl	e362a <memset>
        timer[i].prev_millis = current_millis;
   da21e:	512e      	str	r6, [r5, r4]
   da220:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   da222:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   da226:	d1f5      	bne.n	da214 <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   da228:	2300      	movs	r3, #0
   da22a:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   da22e:	bd70      	pop	{r4, r5, r6, pc}

000da230 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   da230:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da234:	2b0f      	cmp	r3, #15
   da236:	dc08      	bgt.n	da24a <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   da238:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   da23a:	2224      	movs	r2, #36	; 0x24
   da23c:	fb02 0103 	mla	r1, r2, r3, r0
   da240:	6849      	ldr	r1, [r1, #4]
   da242:	b129      	cbz	r1, da250 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   da244:	3301      	adds	r3, #1
   da246:	2b10      	cmp	r3, #16
   da248:	d1f8      	bne.n	da23c <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   da24a:	f04f 30ff 	mov.w	r0, #4294967295
   da24e:	4770      	bx	lr
   da250:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   da252:	4770      	bx	lr

000da254 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da258:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   da25a:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da25e:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   da260:	4605      	mov	r5, r0
   da262:	4689      	mov	r9, r1
   da264:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   da266:	da01      	bge.n	da26c <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   da268:	f7ff ffce 	bl	da208 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   da26c:	4628      	mov	r0, r5
   da26e:	f7ff ffdf 	bl	da230 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   da272:	1e04      	subs	r4, r0, #0
   da274:	db1a      	blt.n	da2ac <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   da276:	b1cf      	cbz	r7, da2ac <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   da278:	2624      	movs	r6, #36	; 0x24
   da27a:	4366      	muls	r6, r4
   da27c:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   da27e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   da282:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   da284:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da286:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   da288:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   da28a:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   da28e:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   da290:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   da294:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da296:	f000 f87d 	bl	da394 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   da29a:	51a8      	str	r0, [r5, r6]

    numTimers++;
   da29c:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   da2a0:	3301      	adds	r3, #1
   da2a2:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   da2a6:	4620      	mov	r0, r4
   da2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   da2ac:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   da2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da2b4 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   da2b4:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   da2b6:	2300      	movs	r3, #0
   da2b8:	9301      	str	r3, [sp, #4]
   da2ba:	9300      	str	r3, [sp, #0]
   da2bc:	f7ff ffca 	bl	da254 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   da2c0:	b003      	add	sp, #12
   da2c2:	f85d fb04 	ldr.w	pc, [sp], #4

000da2c6 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   da2c6:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   da2c8:	b538      	push	{r3, r4, r5, lr}
   da2ca:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   da2cc:	d813      	bhi.n	da2f6 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   da2ce:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   da2d2:	b183      	cbz	r3, da2f6 <_ZN10BlynkTimer11deleteTimerEj+0x30>
   da2d4:	2224      	movs	r2, #36	; 0x24
   da2d6:	fb02 f501 	mul.w	r5, r2, r1
   da2da:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   da2dc:	6843      	ldr	r3, [r0, #4]
   da2de:	b153      	cbz	r3, da2f6 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   da2e0:	2100      	movs	r1, #0
   da2e2:	f009 f9a2 	bl	e362a <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da2e6:	f000 f855 	bl	da394 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   da2ea:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   da2ec:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   da2f0:	3b01      	subs	r3, #1
   da2f2:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   da2f6:	bd38      	pop	{r3, r4, r5, pc}

000da2f8 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   da2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2fc:	4605      	mov	r5, r0
   da2fe:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   da302:	f000 f847 	bl	da394 <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da306:	2601      	movs	r6, #1
   da308:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da30a:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da30e:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da312:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   da314:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   da318:	b1e2      	cbz	r2, da354 <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   da31a:	f853 8c04 	ldr.w	r8, [r3, #-4]
   da31e:	68dc      	ldr	r4, [r3, #12]
   da320:	ebc8 0200 	rsb	r2, r8, r0
   da324:	42a2      	cmp	r2, r4
   da326:	d315      	bcc.n	da354 <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   da328:	fbb2 f1f4 	udiv	r1, r2, r4
   da32c:	fb04 8201 	mla	r2, r4, r1, r8
   da330:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   da334:	7e1a      	ldrb	r2, [r3, #24]
   da336:	b16a      	cbz	r2, da354 <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   da338:	6919      	ldr	r1, [r3, #16]
   da33a:	b909      	cbnz	r1, da340 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da33c:	61de      	str	r6, [r3, #28]
   da33e:	e009      	b.n	da354 <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   da340:	695a      	ldr	r2, [r3, #20]
   da342:	4291      	cmp	r1, r2
   da344:	d906      	bls.n	da354 <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   da346:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   da348:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   da34a:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   da34c:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   da34e:	bf98      	it	ls
   da350:	f8c3 c01c 	strls.w	ip, [r3, #28]
   da354:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   da356:	42bb      	cmp	r3, r7
   da358:	d1db      	bne.n	da312 <_ZN10BlynkTimer3runEv+0x1a>
   da35a:	462c      	mov	r4, r5
   da35c:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   da35e:	6a23      	ldr	r3, [r4, #32]
   da360:	b16b      	cbz	r3, da37e <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   da362:	7b22      	ldrb	r2, [r4, #12]
   da364:	6863      	ldr	r3, [r4, #4]
   da366:	b112      	cbz	r2, da36e <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   da368:	68a0      	ldr	r0, [r4, #8]
   da36a:	4798      	blx	r3
   da36c:	e000      	b.n	da370 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   da36e:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   da370:	6a23      	ldr	r3, [r4, #32]
   da372:	2b02      	cmp	r3, #2
   da374:	d103      	bne.n	da37e <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   da376:	4631      	mov	r1, r6
   da378:	4628      	mov	r0, r5
   da37a:	f7ff ffa4 	bl	da2c6 <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   da37e:	3601      	adds	r6, #1
   da380:	2e10      	cmp	r6, #16
   da382:	f104 0424 	add.w	r4, r4, #36	; 0x24
   da386:	d1ea      	bne.n	da35e <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   da388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da38c <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   da38c:	f000 b832 	b.w	da3f4 <HAL_Pin_Map>

000da390 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   da390:	f001 b9f8 	b.w	db784 <delay>

000da394 <_Z11BlynkMillisv>:
   da394:	f000 b8ae 	b.w	da4f4 <HAL_Timer_Get_Milli_Seconds>

000da398 <_Z12BlynkFreeRamv>:

#ifdef _BLYNK_USE_DEFAULT_FREE_RAM
    size_t BlynkFreeRam()
    {
        return 0;
    }
   da398:	2000      	movs	r0, #0
   da39a:	4770      	bx	lr

000da39c <_GLOBAL__sub_I__Z10BlynkResetv>:
   da39c:	f000 b82a 	b.w	da3f4 <HAL_Pin_Map>

000da3a0 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   da3a0:	4770      	bx	lr

000da3a2 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   da3a2:	4770      	bx	lr

000da3a4 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   da3a4:	4770      	bx	lr
	...

000da3a8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   da3a8:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   da3aa:	bf9a      	itte	ls
   da3ac:	4b02      	ldrls	r3, [pc, #8]	; (da3b8 <GetReadHandler+0x10>)
   da3ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   da3b2:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   da3b4:	4770      	bx	lr
   da3b6:	bf00      	nop
   da3b8:	000e7b88 	.word	0x000e7b88

000da3bc <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   da3bc:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   da3be:	bf9a      	itte	ls
   da3c0:	4b02      	ldrls	r3, [pc, #8]	; (da3cc <GetWriteHandler+0x10>)
   da3c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   da3c6:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   da3c8:	4770      	bx	lr
   da3ca:	bf00      	nop
   da3cc:	000e7988 	.word	0x000e7988

000da3d0 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   da3d0:	f000 b810 	b.w	da3f4 <HAL_Pin_Map>

000da3d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   da3d4:	b508      	push	{r3, lr}
   da3d6:	4b02      	ldr	r3, [pc, #8]	; (da3e0 <netdb_freeaddrinfo+0xc>)
   da3d8:	681b      	ldr	r3, [r3, #0]
   da3da:	689b      	ldr	r3, [r3, #8]
   da3dc:	9301      	str	r3, [sp, #4]
   da3de:	bd08      	pop	{r3, pc}
   da3e0:	00030268 	.word	0x00030268

000da3e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   da3e4:	b508      	push	{r3, lr}
   da3e6:	4b02      	ldr	r3, [pc, #8]	; (da3f0 <netdb_getaddrinfo+0xc>)
   da3e8:	681b      	ldr	r3, [r3, #0]
   da3ea:	68db      	ldr	r3, [r3, #12]
   da3ec:	9301      	str	r3, [sp, #4]
   da3ee:	bd08      	pop	{r3, pc}
   da3f0:	00030268 	.word	0x00030268

000da3f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   da3f4:	b508      	push	{r3, lr}
   da3f6:	4b02      	ldr	r3, [pc, #8]	; (da400 <HAL_Pin_Map+0xc>)
   da3f8:	681b      	ldr	r3, [r3, #0]
   da3fa:	681b      	ldr	r3, [r3, #0]
   da3fc:	9301      	str	r3, [sp, #4]
   da3fe:	bd08      	pop	{r3, pc}
   da400:	0003022c 	.word	0x0003022c

000da404 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   da404:	b508      	push	{r3, lr}
   da406:	4b02      	ldr	r3, [pc, #8]	; (da410 <HAL_Validate_Pin_Function+0xc>)
   da408:	681b      	ldr	r3, [r3, #0]
   da40a:	685b      	ldr	r3, [r3, #4]
   da40c:	9301      	str	r3, [sp, #4]
   da40e:	bd08      	pop	{r3, pc}
   da410:	0003022c 	.word	0x0003022c

000da414 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   da414:	b508      	push	{r3, lr}
   da416:	4b02      	ldr	r3, [pc, #8]	; (da420 <HAL_Pin_Mode+0xc>)
   da418:	681b      	ldr	r3, [r3, #0]
   da41a:	689b      	ldr	r3, [r3, #8]
   da41c:	9301      	str	r3, [sp, #4]
   da41e:	bd08      	pop	{r3, pc}
   da420:	0003022c 	.word	0x0003022c

000da424 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   da424:	b508      	push	{r3, lr}
   da426:	4b02      	ldr	r3, [pc, #8]	; (da430 <HAL_Get_Pin_Mode+0xc>)
   da428:	681b      	ldr	r3, [r3, #0]
   da42a:	68db      	ldr	r3, [r3, #12]
   da42c:	9301      	str	r3, [sp, #4]
   da42e:	bd08      	pop	{r3, pc}
   da430:	0003022c 	.word	0x0003022c

000da434 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   da434:	b508      	push	{r3, lr}
   da436:	4b02      	ldr	r3, [pc, #8]	; (da440 <HAL_GPIO_Write+0xc>)
   da438:	681b      	ldr	r3, [r3, #0]
   da43a:	691b      	ldr	r3, [r3, #16]
   da43c:	9301      	str	r3, [sp, #4]
   da43e:	bd08      	pop	{r3, pc}
   da440:	0003022c 	.word	0x0003022c

000da444 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   da444:	b508      	push	{r3, lr}
   da446:	4b02      	ldr	r3, [pc, #8]	; (da450 <HAL_GPIO_Read+0xc>)
   da448:	681b      	ldr	r3, [r3, #0]
   da44a:	695b      	ldr	r3, [r3, #20]
   da44c:	9301      	str	r3, [sp, #4]
   da44e:	bd08      	pop	{r3, pc}
   da450:	0003022c 	.word	0x0003022c

000da454 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   da454:	b508      	push	{r3, lr}
   da456:	4b02      	ldr	r3, [pc, #8]	; (da460 <HAL_Interrupts_Attach+0xc>)
   da458:	681b      	ldr	r3, [r3, #0]
   da45a:	699b      	ldr	r3, [r3, #24]
   da45c:	9301      	str	r3, [sp, #4]
   da45e:	bd08      	pop	{r3, pc}
   da460:	0003022c 	.word	0x0003022c

000da464 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   da464:	b508      	push	{r3, lr}
   da466:	4b02      	ldr	r3, [pc, #8]	; (da470 <HAL_Interrupts_Detach+0xc>)
   da468:	681b      	ldr	r3, [r3, #0]
   da46a:	69db      	ldr	r3, [r3, #28]
   da46c:	9301      	str	r3, [sp, #4]
   da46e:	bd08      	pop	{r3, pc}
   da470:	0003022c 	.word	0x0003022c

000da474 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   da474:	b508      	push	{r3, lr}
   da476:	4b02      	ldr	r3, [pc, #8]	; (da480 <HAL_DAC_Write+0xc>)
   da478:	681b      	ldr	r3, [r3, #0]
   da47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da47c:	9301      	str	r3, [sp, #4]
   da47e:	bd08      	pop	{r3, pc}
   da480:	0003022c 	.word	0x0003022c

000da484 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   da484:	b508      	push	{r3, lr}
   da486:	4b02      	ldr	r3, [pc, #8]	; (da490 <HAL_ADC_Read+0xc>)
   da488:	681b      	ldr	r3, [r3, #0]
   da48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da48c:	9301      	str	r3, [sp, #4]
   da48e:	bd08      	pop	{r3, pc}
   da490:	0003022c 	.word	0x0003022c

000da494 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   da494:	b508      	push	{r3, lr}
   da496:	4b02      	ldr	r3, [pc, #8]	; (da4a0 <HAL_PWM_Write_Ext+0xc>)
   da498:	681b      	ldr	r3, [r3, #0]
   da49a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   da49c:	9301      	str	r3, [sp, #4]
   da49e:	bd08      	pop	{r3, pc}
   da4a0:	0003022c 	.word	0x0003022c

000da4a4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   da4a4:	b508      	push	{r3, lr}
   da4a6:	4b02      	ldr	r3, [pc, #8]	; (da4b0 <HAL_SPI_Send_Receive_Data+0xc>)
   da4a8:	681b      	ldr	r3, [r3, #0]
   da4aa:	695b      	ldr	r3, [r3, #20]
   da4ac:	9301      	str	r3, [sp, #4]
   da4ae:	bd08      	pop	{r3, pc}
   da4b0:	00030230 	.word	0x00030230

000da4b4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   da4b4:	b508      	push	{r3, lr}
   da4b6:	4b02      	ldr	r3, [pc, #8]	; (da4c0 <HAL_SPI_Init+0xc>)
   da4b8:	681b      	ldr	r3, [r3, #0]
   da4ba:	69db      	ldr	r3, [r3, #28]
   da4bc:	9301      	str	r3, [sp, #4]
   da4be:	bd08      	pop	{r3, pc}
   da4c0:	00030230 	.word	0x00030230

000da4c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   da4c4:	b508      	push	{r3, lr}
   da4c6:	4b02      	ldr	r3, [pc, #8]	; (da4d0 <HAL_SPI_Is_Enabled+0xc>)
   da4c8:	681b      	ldr	r3, [r3, #0]
   da4ca:	6a1b      	ldr	r3, [r3, #32]
   da4cc:	9301      	str	r3, [sp, #4]
   da4ce:	bd08      	pop	{r3, pc}
   da4d0:	00030230 	.word	0x00030230

000da4d4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   da4d4:	b508      	push	{r3, lr}
   da4d6:	4b02      	ldr	r3, [pc, #8]	; (da4e0 <if_index_to_name+0xc>)
   da4d8:	681b      	ldr	r3, [r3, #0]
   da4da:	695b      	ldr	r3, [r3, #20]
   da4dc:	9301      	str	r3, [sp, #4]
   da4de:	bd08      	pop	{r3, pc}
   da4e0:	0003026c 	.word	0x0003026c

000da4e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   da4e4:	b508      	push	{r3, lr}
   da4e6:	4b02      	ldr	r3, [pc, #8]	; (da4f0 <HAL_RNG_GetRandomNumber+0xc>)
   da4e8:	681b      	ldr	r3, [r3, #0]
   da4ea:	685b      	ldr	r3, [r3, #4]
   da4ec:	9301      	str	r3, [sp, #4]
   da4ee:	bd08      	pop	{r3, pc}
   da4f0:	00030218 	.word	0x00030218

000da4f4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   da4f4:	b508      	push	{r3, lr}
   da4f6:	4b02      	ldr	r3, [pc, #8]	; (da500 <HAL_Timer_Get_Milli_Seconds+0xc>)
   da4f8:	681b      	ldr	r3, [r3, #0]
   da4fa:	695b      	ldr	r3, [r3, #20]
   da4fc:	9301      	str	r3, [sp, #4]
   da4fe:	bd08      	pop	{r3, pc}
   da500:	00030218 	.word	0x00030218

000da504 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   da504:	b508      	push	{r3, lr}
   da506:	4b02      	ldr	r3, [pc, #8]	; (da510 <HAL_RTC_Get_UnixTime+0xc>)
   da508:	681b      	ldr	r3, [r3, #0]
   da50a:	69db      	ldr	r3, [r3, #28]
   da50c:	9301      	str	r3, [sp, #4]
   da50e:	bd08      	pop	{r3, pc}
   da510:	00030218 	.word	0x00030218

000da514 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   da514:	b508      	push	{r3, lr}
   da516:	4b02      	ldr	r3, [pc, #8]	; (da520 <HAL_RTC_Time_Is_Valid+0xc>)
   da518:	681b      	ldr	r3, [r3, #0]
   da51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da51c:	9301      	str	r3, [sp, #4]
   da51e:	bd08      	pop	{r3, pc}
   da520:	00030218 	.word	0x00030218

000da524 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   da524:	b508      	push	{r3, lr}
   da526:	4b02      	ldr	r3, [pc, #8]	; (da530 <hal_timer_millis+0xc>)
   da528:	681b      	ldr	r3, [r3, #0]
   da52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   da52c:	9301      	str	r3, [sp, #4]
   da52e:	bd08      	pop	{r3, pc}
   da530:	00030218 	.word	0x00030218

000da534 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   da534:	b508      	push	{r3, lr}
   da536:	4b02      	ldr	r3, [pc, #8]	; (da540 <HAL_Core_System_Reset_Ex+0xc>)
   da538:	681b      	ldr	r3, [r3, #0]
   da53a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   da53c:	9301      	str	r3, [sp, #4]
   da53e:	bd08      	pop	{r3, pc}
   da540:	00030234 	.word	0x00030234

000da544 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   da544:	b508      	push	{r3, lr}
   da546:	4b02      	ldr	r3, [pc, #8]	; (da550 <HAL_Core_Get_Last_Reset_Info+0xc>)
   da548:	681b      	ldr	r3, [r3, #0]
   da54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   da54c:	9301      	str	r3, [sp, #4]
   da54e:	bd08      	pop	{r3, pc}
   da550:	00030234 	.word	0x00030234

000da554 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   da554:	b508      	push	{r3, lr}
   da556:	4b02      	ldr	r3, [pc, #8]	; (da560 <os_thread_is_current+0xc>)
   da558:	681b      	ldr	r3, [r3, #0]
   da55a:	689b      	ldr	r3, [r3, #8]
   da55c:	9301      	str	r3, [sp, #4]
   da55e:	bd08      	pop	{r3, pc}
   da560:	00030248 	.word	0x00030248

000da564 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   da564:	b508      	push	{r3, lr}
   da566:	4b02      	ldr	r3, [pc, #8]	; (da570 <os_thread_join+0xc>)
   da568:	681b      	ldr	r3, [r3, #0]
   da56a:	691b      	ldr	r3, [r3, #16]
   da56c:	9301      	str	r3, [sp, #4]
   da56e:	bd08      	pop	{r3, pc}
   da570:	00030248 	.word	0x00030248

000da574 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   da574:	b508      	push	{r3, lr}
   da576:	4b02      	ldr	r3, [pc, #8]	; (da580 <os_thread_cleanup+0xc>)
   da578:	681b      	ldr	r3, [r3, #0]
   da57a:	695b      	ldr	r3, [r3, #20]
   da57c:	9301      	str	r3, [sp, #4]
   da57e:	bd08      	pop	{r3, pc}
   da580:	00030248 	.word	0x00030248

000da584 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   da584:	b508      	push	{r3, lr}
   da586:	4b02      	ldr	r3, [pc, #8]	; (da590 <os_mutex_create+0xc>)
   da588:	681b      	ldr	r3, [r3, #0]
   da58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da58c:	9301      	str	r3, [sp, #4]
   da58e:	bd08      	pop	{r3, pc}
   da590:	00030248 	.word	0x00030248

000da594 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   da594:	b508      	push	{r3, lr}
   da596:	4b02      	ldr	r3, [pc, #8]	; (da5a0 <os_mutex_recursive_create+0xc>)
   da598:	681b      	ldr	r3, [r3, #0]
   da59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da59c:	9301      	str	r3, [sp, #4]
   da59e:	bd08      	pop	{r3, pc}
   da5a0:	00030248 	.word	0x00030248

000da5a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   da5a4:	b508      	push	{r3, lr}
   da5a6:	4b02      	ldr	r3, [pc, #8]	; (da5b0 <inet_inet_ntop+0xc>)
   da5a8:	681b      	ldr	r3, [r3, #0]
   da5aa:	695b      	ldr	r3, [r3, #20]
   da5ac:	9301      	str	r3, [sp, #4]
   da5ae:	bd08      	pop	{r3, pc}
   da5b0:	00030264 	.word	0x00030264

000da5b4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   da5b4:	b508      	push	{r3, lr}
   da5b6:	4b02      	ldr	r3, [pc, #8]	; (da5c0 <inet_htonl+0xc>)
   da5b8:	681b      	ldr	r3, [r3, #0]
   da5ba:	6a1b      	ldr	r3, [r3, #32]
   da5bc:	9301      	str	r3, [sp, #4]
   da5be:	bd08      	pop	{r3, pc}
   da5c0:	00030264 	.word	0x00030264

000da5c4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   da5c4:	b508      	push	{r3, lr}
   da5c6:	4b02      	ldr	r3, [pc, #8]	; (da5d0 <inet_htons+0xc>)
   da5c8:	681b      	ldr	r3, [r3, #0]
   da5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da5cc:	9301      	str	r3, [sp, #4]
   da5ce:	bd08      	pop	{r3, pc}
   da5d0:	00030264 	.word	0x00030264

000da5d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   da5d4:	b508      	push	{r3, lr}
   da5d6:	4b02      	ldr	r3, [pc, #8]	; (da5e0 <HAL_USART_Init+0xc>)
   da5d8:	681b      	ldr	r3, [r3, #0]
   da5da:	681b      	ldr	r3, [r3, #0]
   da5dc:	9301      	str	r3, [sp, #4]
   da5de:	bd08      	pop	{r3, pc}
   da5e0:	0003023c 	.word	0x0003023c

000da5e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   da5e4:	b508      	push	{r3, lr}
   da5e6:	4b02      	ldr	r3, [pc, #8]	; (da5f0 <HAL_USART_Write_Data+0xc>)
   da5e8:	681b      	ldr	r3, [r3, #0]
   da5ea:	68db      	ldr	r3, [r3, #12]
   da5ec:	9301      	str	r3, [sp, #4]
   da5ee:	bd08      	pop	{r3, pc}
   da5f0:	0003023c 	.word	0x0003023c

000da5f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   da5f4:	b508      	push	{r3, lr}
   da5f6:	4b02      	ldr	r3, [pc, #8]	; (da600 <HAL_USART_Available_Data+0xc>)
   da5f8:	681b      	ldr	r3, [r3, #0]
   da5fa:	691b      	ldr	r3, [r3, #16]
   da5fc:	9301      	str	r3, [sp, #4]
   da5fe:	bd08      	pop	{r3, pc}
   da600:	0003023c 	.word	0x0003023c

000da604 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   da604:	b508      	push	{r3, lr}
   da606:	4b02      	ldr	r3, [pc, #8]	; (da610 <HAL_USART_Read_Data+0xc>)
   da608:	681b      	ldr	r3, [r3, #0]
   da60a:	695b      	ldr	r3, [r3, #20]
   da60c:	9301      	str	r3, [sp, #4]
   da60e:	bd08      	pop	{r3, pc}
   da610:	0003023c 	.word	0x0003023c

000da614 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   da614:	b508      	push	{r3, lr}
   da616:	4b02      	ldr	r3, [pc, #8]	; (da620 <HAL_USART_Peek_Data+0xc>)
   da618:	681b      	ldr	r3, [r3, #0]
   da61a:	699b      	ldr	r3, [r3, #24]
   da61c:	9301      	str	r3, [sp, #4]
   da61e:	bd08      	pop	{r3, pc}
   da620:	0003023c 	.word	0x0003023c

000da624 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   da624:	b508      	push	{r3, lr}
   da626:	4b02      	ldr	r3, [pc, #8]	; (da630 <HAL_USART_Flush_Data+0xc>)
   da628:	681b      	ldr	r3, [r3, #0]
   da62a:	69db      	ldr	r3, [r3, #28]
   da62c:	9301      	str	r3, [sp, #4]
   da62e:	bd08      	pop	{r3, pc}
   da630:	0003023c 	.word	0x0003023c

000da634 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   da634:	b508      	push	{r3, lr}
   da636:	4b02      	ldr	r3, [pc, #8]	; (da640 <HAL_USART_Is_Enabled+0xc>)
   da638:	681b      	ldr	r3, [r3, #0]
   da63a:	6a1b      	ldr	r3, [r3, #32]
   da63c:	9301      	str	r3, [sp, #4]
   da63e:	bd08      	pop	{r3, pc}
   da640:	0003023c 	.word	0x0003023c

000da644 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   da644:	b508      	push	{r3, lr}
   da646:	4b02      	ldr	r3, [pc, #8]	; (da650 <HAL_USART_Available_Data_For_Write+0xc>)
   da648:	681b      	ldr	r3, [r3, #0]
   da64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da64c:	9301      	str	r3, [sp, #4]
   da64e:	bd08      	pop	{r3, pc}
   da650:	0003023c 	.word	0x0003023c

000da654 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   da654:	b508      	push	{r3, lr}
   da656:	4b02      	ldr	r3, [pc, #8]	; (da660 <HAL_USART_BeginConfig+0xc>)
   da658:	681b      	ldr	r3, [r3, #0]
   da65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da65c:	9301      	str	r3, [sp, #4]
   da65e:	bd08      	pop	{r3, pc}
   da660:	0003023c 	.word	0x0003023c

000da664 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   da664:	b508      	push	{r3, lr}
   da666:	4b02      	ldr	r3, [pc, #8]	; (da670 <HAL_I2C_Set_Speed+0xc>)
   da668:	681b      	ldr	r3, [r3, #0]
   da66a:	681b      	ldr	r3, [r3, #0]
   da66c:	9301      	str	r3, [sp, #4]
   da66e:	bd08      	pop	{r3, pc}
   da670:	00030228 	.word	0x00030228

000da674 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   da674:	b508      	push	{r3, lr}
   da676:	4b02      	ldr	r3, [pc, #8]	; (da680 <HAL_I2C_Begin+0xc>)
   da678:	681b      	ldr	r3, [r3, #0]
   da67a:	68db      	ldr	r3, [r3, #12]
   da67c:	9301      	str	r3, [sp, #4]
   da67e:	bd08      	pop	{r3, pc}
   da680:	00030228 	.word	0x00030228

000da684 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   da684:	b508      	push	{r3, lr}
   da686:	4b02      	ldr	r3, [pc, #8]	; (da690 <HAL_I2C_End+0xc>)
   da688:	681b      	ldr	r3, [r3, #0]
   da68a:	691b      	ldr	r3, [r3, #16]
   da68c:	9301      	str	r3, [sp, #4]
   da68e:	bd08      	pop	{r3, pc}
   da690:	00030228 	.word	0x00030228

000da694 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   da694:	b508      	push	{r3, lr}
   da696:	4b02      	ldr	r3, [pc, #8]	; (da6a0 <HAL_I2C_Request_Data+0xc>)
   da698:	681b      	ldr	r3, [r3, #0]
   da69a:	695b      	ldr	r3, [r3, #20]
   da69c:	9301      	str	r3, [sp, #4]
   da69e:	bd08      	pop	{r3, pc}
   da6a0:	00030228 	.word	0x00030228

000da6a4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   da6a4:	b508      	push	{r3, lr}
   da6a6:	4b02      	ldr	r3, [pc, #8]	; (da6b0 <HAL_I2C_Begin_Transmission+0xc>)
   da6a8:	681b      	ldr	r3, [r3, #0]
   da6aa:	699b      	ldr	r3, [r3, #24]
   da6ac:	9301      	str	r3, [sp, #4]
   da6ae:	bd08      	pop	{r3, pc}
   da6b0:	00030228 	.word	0x00030228

000da6b4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   da6b4:	b508      	push	{r3, lr}
   da6b6:	4b02      	ldr	r3, [pc, #8]	; (da6c0 <HAL_I2C_End_Transmission+0xc>)
   da6b8:	681b      	ldr	r3, [r3, #0]
   da6ba:	69db      	ldr	r3, [r3, #28]
   da6bc:	9301      	str	r3, [sp, #4]
   da6be:	bd08      	pop	{r3, pc}
   da6c0:	00030228 	.word	0x00030228

000da6c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   da6c4:	b508      	push	{r3, lr}
   da6c6:	4b02      	ldr	r3, [pc, #8]	; (da6d0 <HAL_I2C_Write_Data+0xc>)
   da6c8:	681b      	ldr	r3, [r3, #0]
   da6ca:	6a1b      	ldr	r3, [r3, #32]
   da6cc:	9301      	str	r3, [sp, #4]
   da6ce:	bd08      	pop	{r3, pc}
   da6d0:	00030228 	.word	0x00030228

000da6d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   da6d4:	b508      	push	{r3, lr}
   da6d6:	4b02      	ldr	r3, [pc, #8]	; (da6e0 <HAL_I2C_Available_Data+0xc>)
   da6d8:	681b      	ldr	r3, [r3, #0]
   da6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da6dc:	9301      	str	r3, [sp, #4]
   da6de:	bd08      	pop	{r3, pc}
   da6e0:	00030228 	.word	0x00030228

000da6e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   da6e4:	b508      	push	{r3, lr}
   da6e6:	4b02      	ldr	r3, [pc, #8]	; (da6f0 <HAL_I2C_Read_Data+0xc>)
   da6e8:	681b      	ldr	r3, [r3, #0]
   da6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da6ec:	9301      	str	r3, [sp, #4]
   da6ee:	bd08      	pop	{r3, pc}
   da6f0:	00030228 	.word	0x00030228

000da6f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   da6f4:	b508      	push	{r3, lr}
   da6f6:	4b02      	ldr	r3, [pc, #8]	; (da700 <HAL_I2C_Peek_Data+0xc>)
   da6f8:	681b      	ldr	r3, [r3, #0]
   da6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da6fc:	9301      	str	r3, [sp, #4]
   da6fe:	bd08      	pop	{r3, pc}
   da700:	00030228 	.word	0x00030228

000da704 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   da704:	b508      	push	{r3, lr}
   da706:	4b02      	ldr	r3, [pc, #8]	; (da710 <HAL_I2C_Flush_Data+0xc>)
   da708:	681b      	ldr	r3, [r3, #0]
   da70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da70c:	9301      	str	r3, [sp, #4]
   da70e:	bd08      	pop	{r3, pc}
   da710:	00030228 	.word	0x00030228

000da714 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   da714:	b508      	push	{r3, lr}
   da716:	4b02      	ldr	r3, [pc, #8]	; (da720 <HAL_I2C_Is_Enabled+0xc>)
   da718:	681b      	ldr	r3, [r3, #0]
   da71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da71c:	9301      	str	r3, [sp, #4]
   da71e:	bd08      	pop	{r3, pc}
   da720:	00030228 	.word	0x00030228

000da724 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   da724:	b508      	push	{r3, lr}
   da726:	4b02      	ldr	r3, [pc, #8]	; (da730 <HAL_I2C_Init+0xc>)
   da728:	681b      	ldr	r3, [r3, #0]
   da72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da72c:	9301      	str	r3, [sp, #4]
   da72e:	bd08      	pop	{r3, pc}
   da730:	00030228 	.word	0x00030228

000da734 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   da734:	b508      	push	{r3, lr}
   da736:	4b02      	ldr	r3, [pc, #8]	; (da740 <HAL_I2C_Reset+0xc>)
   da738:	681b      	ldr	r3, [r3, #0]
   da73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da73c:	9301      	str	r3, [sp, #4]
   da73e:	bd08      	pop	{r3, pc}
   da740:	00030228 	.word	0x00030228

000da744 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   da744:	b508      	push	{r3, lr}
   da746:	4b02      	ldr	r3, [pc, #8]	; (da750 <HAL_I2C_Acquire+0xc>)
   da748:	681b      	ldr	r3, [r3, #0]
   da74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da74c:	9301      	str	r3, [sp, #4]
   da74e:	bd08      	pop	{r3, pc}
   da750:	00030228 	.word	0x00030228

000da754 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   da754:	b508      	push	{r3, lr}
   da756:	4b02      	ldr	r3, [pc, #8]	; (da760 <HAL_I2C_Release+0xc>)
   da758:	681b      	ldr	r3, [r3, #0]
   da75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da75c:	9301      	str	r3, [sp, #4]
   da75e:	bd08      	pop	{r3, pc}
   da760:	00030228 	.word	0x00030228

000da764 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   da764:	b508      	push	{r3, lr}
   da766:	4b02      	ldr	r3, [pc, #8]	; (da770 <sock_setsockopt+0xc>)
   da768:	681b      	ldr	r3, [r3, #0]
   da76a:	699b      	ldr	r3, [r3, #24]
   da76c:	9301      	str	r3, [sp, #4]
   da76e:	bd08      	pop	{r3, pc}
   da770:	00030238 	.word	0x00030238

000da774 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   da774:	b508      	push	{r3, lr}
   da776:	4b02      	ldr	r3, [pc, #8]	; (da780 <sock_close+0xc>)
   da778:	681b      	ldr	r3, [r3, #0]
   da77a:	69db      	ldr	r3, [r3, #28]
   da77c:	9301      	str	r3, [sp, #4]
   da77e:	bd08      	pop	{r3, pc}
   da780:	00030238 	.word	0x00030238

000da784 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   da784:	b508      	push	{r3, lr}
   da786:	4b02      	ldr	r3, [pc, #8]	; (da790 <sock_connect+0xc>)
   da788:	681b      	ldr	r3, [r3, #0]
   da78a:	6a1b      	ldr	r3, [r3, #32]
   da78c:	9301      	str	r3, [sp, #4]
   da78e:	bd08      	pop	{r3, pc}
   da790:	00030238 	.word	0x00030238

000da794 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   da794:	b508      	push	{r3, lr}
   da796:	4b02      	ldr	r3, [pc, #8]	; (da7a0 <sock_recv+0xc>)
   da798:	681b      	ldr	r3, [r3, #0]
   da79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da79c:	9301      	str	r3, [sp, #4]
   da79e:	bd08      	pop	{r3, pc}
   da7a0:	00030238 	.word	0x00030238

000da7a4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   da7a4:	b508      	push	{r3, lr}
   da7a6:	4b02      	ldr	r3, [pc, #8]	; (da7b0 <sock_send+0xc>)
   da7a8:	681b      	ldr	r3, [r3, #0]
   da7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da7ac:	9301      	str	r3, [sp, #4]
   da7ae:	bd08      	pop	{r3, pc}
   da7b0:	00030238 	.word	0x00030238

000da7b4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   da7b4:	b508      	push	{r3, lr}
   da7b6:	4b02      	ldr	r3, [pc, #8]	; (da7c0 <sock_socket+0xc>)
   da7b8:	681b      	ldr	r3, [r3, #0]
   da7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   da7bc:	9301      	str	r3, [sp, #4]
   da7be:	bd08      	pop	{r3, pc}
   da7c0:	00030238 	.word	0x00030238

000da7c4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   da7c4:	b508      	push	{r3, lr}
   da7c6:	4b02      	ldr	r3, [pc, #8]	; (da7d0 <cellular_signal+0xc>)
   da7c8:	681b      	ldr	r3, [r3, #0]
   da7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da7cc:	9301      	str	r3, [sp, #4]
   da7ce:	bd08      	pop	{r3, pc}
   da7d0:	00030274 	.word	0x00030274

000da7d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da7d4:	b508      	push	{r3, lr}
   da7d6:	4b02      	ldr	r3, [pc, #8]	; (da7e0 <HAL_USB_USART_Init+0xc>)
   da7d8:	681b      	ldr	r3, [r3, #0]
   da7da:	681b      	ldr	r3, [r3, #0]
   da7dc:	9301      	str	r3, [sp, #4]
   da7de:	bd08      	pop	{r3, pc}
   da7e0:	0003024c 	.word	0x0003024c

000da7e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da7e4:	b508      	push	{r3, lr}
   da7e6:	4b02      	ldr	r3, [pc, #8]	; (da7f0 <HAL_USB_USART_Begin+0xc>)
   da7e8:	681b      	ldr	r3, [r3, #0]
   da7ea:	685b      	ldr	r3, [r3, #4]
   da7ec:	9301      	str	r3, [sp, #4]
   da7ee:	bd08      	pop	{r3, pc}
   da7f0:	0003024c 	.word	0x0003024c

000da7f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da7f4:	b508      	push	{r3, lr}
   da7f6:	4b02      	ldr	r3, [pc, #8]	; (da800 <HAL_USB_USART_Available_Data+0xc>)
   da7f8:	681b      	ldr	r3, [r3, #0]
   da7fa:	691b      	ldr	r3, [r3, #16]
   da7fc:	9301      	str	r3, [sp, #4]
   da7fe:	bd08      	pop	{r3, pc}
   da800:	0003024c 	.word	0x0003024c

000da804 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da804:	b508      	push	{r3, lr}
   da806:	4b02      	ldr	r3, [pc, #8]	; (da810 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da808:	681b      	ldr	r3, [r3, #0]
   da80a:	695b      	ldr	r3, [r3, #20]
   da80c:	9301      	str	r3, [sp, #4]
   da80e:	bd08      	pop	{r3, pc}
   da810:	0003024c 	.word	0x0003024c

000da814 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da814:	b508      	push	{r3, lr}
   da816:	4b02      	ldr	r3, [pc, #8]	; (da820 <HAL_USB_USART_Receive_Data+0xc>)
   da818:	681b      	ldr	r3, [r3, #0]
   da81a:	699b      	ldr	r3, [r3, #24]
   da81c:	9301      	str	r3, [sp, #4]
   da81e:	bd08      	pop	{r3, pc}
   da820:	0003024c 	.word	0x0003024c

000da824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da824:	b508      	push	{r3, lr}
   da826:	4b02      	ldr	r3, [pc, #8]	; (da830 <HAL_USB_USART_Send_Data+0xc>)
   da828:	681b      	ldr	r3, [r3, #0]
   da82a:	69db      	ldr	r3, [r3, #28]
   da82c:	9301      	str	r3, [sp, #4]
   da82e:	bd08      	pop	{r3, pc}
   da830:	0003024c 	.word	0x0003024c

000da834 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da834:	b508      	push	{r3, lr}
   da836:	4b02      	ldr	r3, [pc, #8]	; (da840 <HAL_USB_USART_Flush_Data+0xc>)
   da838:	681b      	ldr	r3, [r3, #0]
   da83a:	6a1b      	ldr	r3, [r3, #32]
   da83c:	9301      	str	r3, [sp, #4]
   da83e:	bd08      	pop	{r3, pc}
   da840:	0003024c 	.word	0x0003024c

000da844 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   da844:	b508      	push	{r3, lr}
   da846:	4b02      	ldr	r3, [pc, #8]	; (da850 <LED_SetSignalingColor+0xc>)
   da848:	681b      	ldr	r3, [r3, #0]
   da84a:	685b      	ldr	r3, [r3, #4]
   da84c:	9301      	str	r3, [sp, #4]
   da84e:	bd08      	pop	{r3, pc}
   da850:	00030260 	.word	0x00030260

000da854 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   da854:	b508      	push	{r3, lr}
   da856:	4b02      	ldr	r3, [pc, #8]	; (da860 <LED_Signaling_Start+0xc>)
   da858:	681b      	ldr	r3, [r3, #0]
   da85a:	689b      	ldr	r3, [r3, #8]
   da85c:	9301      	str	r3, [sp, #4]
   da85e:	bd08      	pop	{r3, pc}
   da860:	00030260 	.word	0x00030260

000da864 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   da864:	b508      	push	{r3, lr}
   da866:	4b02      	ldr	r3, [pc, #8]	; (da870 <LED_Signaling_Stop+0xc>)
   da868:	681b      	ldr	r3, [r3, #0]
   da86a:	68db      	ldr	r3, [r3, #12]
   da86c:	9301      	str	r3, [sp, #4]
   da86e:	bd08      	pop	{r3, pc}
   da870:	00030260 	.word	0x00030260

000da874 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   da874:	b508      	push	{r3, lr}
   da876:	4b02      	ldr	r3, [pc, #8]	; (da880 <LED_RGB_IsOverRidden+0xc>)
   da878:	681b      	ldr	r3, [r3, #0]
   da87a:	699b      	ldr	r3, [r3, #24]
   da87c:	9301      	str	r3, [sp, #4]
   da87e:	bd08      	pop	{r3, pc}
   da880:	00030260 	.word	0x00030260

000da884 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   da884:	b508      	push	{r3, lr}
   da886:	4b02      	ldr	r3, [pc, #8]	; (da890 <LED_On+0xc>)
   da888:	681b      	ldr	r3, [r3, #0]
   da88a:	69db      	ldr	r3, [r3, #28]
   da88c:	9301      	str	r3, [sp, #4]
   da88e:	bd08      	pop	{r3, pc}
   da890:	00030260 	.word	0x00030260

000da894 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   da894:	b508      	push	{r3, lr}
   da896:	4b02      	ldr	r3, [pc, #8]	; (da8a0 <log_message+0xc>)
   da898:	681b      	ldr	r3, [r3, #0]
   da89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   da89c:	9301      	str	r3, [sp, #4]
   da89e:	bd08      	pop	{r3, pc}
   da8a0:	00030260 	.word	0x00030260

000da8a4 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   da8a4:	b508      	push	{r3, lr}
   da8a6:	4b03      	ldr	r3, [pc, #12]	; (da8b4 <led_set_status_active+0x10>)
   da8a8:	681b      	ldr	r3, [r3, #0]
   da8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   da8ae:	9301      	str	r3, [sp, #4]
   da8b0:	bd08      	pop	{r3, pc}
   da8b2:	0000      	.short	0x0000
   da8b4:	00030260 	.word	0x00030260

000da8b8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   da8b8:	b508      	push	{r3, lr}
   da8ba:	4b02      	ldr	r3, [pc, #8]	; (da8c4 <system_mode+0xc>)
   da8bc:	681b      	ldr	r3, [r3, #0]
   da8be:	681b      	ldr	r3, [r3, #0]
   da8c0:	9301      	str	r3, [sp, #4]
   da8c2:	bd08      	pop	{r3, pc}
   da8c4:	00030220 	.word	0x00030220

000da8c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   da8c8:	b508      	push	{r3, lr}
   da8ca:	4b02      	ldr	r3, [pc, #8]	; (da8d4 <set_system_mode+0xc>)
   da8cc:	681b      	ldr	r3, [r3, #0]
   da8ce:	685b      	ldr	r3, [r3, #4]
   da8d0:	9301      	str	r3, [sp, #4]
   da8d2:	bd08      	pop	{r3, pc}
   da8d4:	00030220 	.word	0x00030220

000da8d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   da8d8:	b508      	push	{r3, lr}
   da8da:	4b02      	ldr	r3, [pc, #8]	; (da8e4 <system_delay_ms+0xc>)
   da8dc:	681b      	ldr	r3, [r3, #0]
   da8de:	695b      	ldr	r3, [r3, #20]
   da8e0:	9301      	str	r3, [sp, #4]
   da8e2:	bd08      	pop	{r3, pc}
   da8e4:	00030220 	.word	0x00030220

000da8e8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   da8e8:	b508      	push	{r3, lr}
   da8ea:	4b02      	ldr	r3, [pc, #8]	; (da8f4 <system_sleep+0xc>)
   da8ec:	681b      	ldr	r3, [r3, #0]
   da8ee:	699b      	ldr	r3, [r3, #24]
   da8f0:	9301      	str	r3, [sp, #4]
   da8f2:	bd08      	pop	{r3, pc}
   da8f4:	00030220 	.word	0x00030220

000da8f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   da8f8:	b508      	push	{r3, lr}
   da8fa:	4b02      	ldr	r3, [pc, #8]	; (da904 <application_thread_current+0xc>)
   da8fc:	681b      	ldr	r3, [r3, #0]
   da8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da900:	9301      	str	r3, [sp, #4]
   da902:	bd08      	pop	{r3, pc}
   da904:	00030220 	.word	0x00030220

000da908 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   da908:	b508      	push	{r3, lr}
   da90a:	4b02      	ldr	r3, [pc, #8]	; (da914 <application_thread_invoke+0xc>)
   da90c:	681b      	ldr	r3, [r3, #0]
   da90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   da910:	9301      	str	r3, [sp, #4]
   da912:	bd08      	pop	{r3, pc}
   da914:	00030220 	.word	0x00030220

000da918 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   da918:	b508      	push	{r3, lr}
   da91a:	4b02      	ldr	r3, [pc, #8]	; (da924 <system_thread_get_state+0xc>)
   da91c:	681b      	ldr	r3, [r3, #0]
   da91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   da920:	9301      	str	r3, [sp, #4]
   da922:	bd08      	pop	{r3, pc}
   da924:	00030220 	.word	0x00030220

000da928 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   da928:	b508      	push	{r3, lr}
   da92a:	4b02      	ldr	r3, [pc, #8]	; (da934 <led_pattern_period+0xc>)
   da92c:	681b      	ldr	r3, [r3, #0]
   da92e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   da930:	9301      	str	r3, [sp, #4]
   da932:	bd08      	pop	{r3, pc}
   da934:	00030220 	.word	0x00030220

000da938 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   da938:	b508      	push	{r3, lr}
   da93a:	4b03      	ldr	r3, [pc, #12]	; (da948 <system_ctrl_set_app_request_handler+0x10>)
   da93c:	681b      	ldr	r3, [r3, #0]
   da93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   da942:	9301      	str	r3, [sp, #4]
   da944:	bd08      	pop	{r3, pc}
   da946:	0000      	.short	0x0000
   da948:	00030220 	.word	0x00030220

000da94c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   da94c:	b508      	push	{r3, lr}
   da94e:	4b03      	ldr	r3, [pc, #12]	; (da95c <system_ctrl_set_result+0x10>)
   da950:	681b      	ldr	r3, [r3, #0]
   da952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   da956:	9301      	str	r3, [sp, #4]
   da958:	bd08      	pop	{r3, pc}
   da95a:	0000      	.short	0x0000
   da95c:	00030220 	.word	0x00030220

000da960 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   da960:	b508      	push	{r3, lr}
   da962:	4b03      	ldr	r3, [pc, #12]	; (da970 <system_sleep_pins+0x10>)
   da964:	681b      	ldr	r3, [r3, #0]
   da966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   da96a:	9301      	str	r3, [sp, #4]
   da96c:	bd08      	pop	{r3, pc}
   da96e:	0000      	.short	0x0000
   da970:	00030220 	.word	0x00030220

000da974 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   da974:	b508      	push	{r3, lr}
   da976:	4b02      	ldr	r3, [pc, #8]	; (da980 <network_connect+0xc>)
   da978:	681b      	ldr	r3, [r3, #0]
   da97a:	685b      	ldr	r3, [r3, #4]
   da97c:	9301      	str	r3, [sp, #4]
   da97e:	bd08      	pop	{r3, pc}
   da980:	00030240 	.word	0x00030240

000da984 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   da984:	b508      	push	{r3, lr}
   da986:	4b02      	ldr	r3, [pc, #8]	; (da990 <network_connecting+0xc>)
   da988:	681b      	ldr	r3, [r3, #0]
   da98a:	689b      	ldr	r3, [r3, #8]
   da98c:	9301      	str	r3, [sp, #4]
   da98e:	bd08      	pop	{r3, pc}
   da990:	00030240 	.word	0x00030240

000da994 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   da994:	b508      	push	{r3, lr}
   da996:	4b02      	ldr	r3, [pc, #8]	; (da9a0 <network_disconnect+0xc>)
   da998:	681b      	ldr	r3, [r3, #0]
   da99a:	68db      	ldr	r3, [r3, #12]
   da99c:	9301      	str	r3, [sp, #4]
   da99e:	bd08      	pop	{r3, pc}
   da9a0:	00030240 	.word	0x00030240

000da9a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   da9a4:	b508      	push	{r3, lr}
   da9a6:	4b02      	ldr	r3, [pc, #8]	; (da9b0 <network_ready+0xc>)
   da9a8:	681b      	ldr	r3, [r3, #0]
   da9aa:	691b      	ldr	r3, [r3, #16]
   da9ac:	9301      	str	r3, [sp, #4]
   da9ae:	bd08      	pop	{r3, pc}
   da9b0:	00030240 	.word	0x00030240

000da9b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   da9b4:	b508      	push	{r3, lr}
   da9b6:	4b02      	ldr	r3, [pc, #8]	; (da9c0 <network_on+0xc>)
   da9b8:	681b      	ldr	r3, [r3, #0]
   da9ba:	695b      	ldr	r3, [r3, #20]
   da9bc:	9301      	str	r3, [sp, #4]
   da9be:	bd08      	pop	{r3, pc}
   da9c0:	00030240 	.word	0x00030240

000da9c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b02      	ldr	r3, [pc, #8]	; (da9d0 <network_off+0xc>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	699b      	ldr	r3, [r3, #24]
   da9cc:	9301      	str	r3, [sp, #4]
   da9ce:	bd08      	pop	{r3, pc}
   da9d0:	00030240 	.word	0x00030240

000da9d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   da9d4:	b508      	push	{r3, lr}
   da9d6:	4b02      	ldr	r3, [pc, #8]	; (da9e0 <network_listen+0xc>)
   da9d8:	681b      	ldr	r3, [r3, #0]
   da9da:	69db      	ldr	r3, [r3, #28]
   da9dc:	9301      	str	r3, [sp, #4]
   da9de:	bd08      	pop	{r3, pc}
   da9e0:	00030240 	.word	0x00030240

000da9e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   da9e4:	b508      	push	{r3, lr}
   da9e6:	4b02      	ldr	r3, [pc, #8]	; (da9f0 <network_listening+0xc>)
   da9e8:	681b      	ldr	r3, [r3, #0]
   da9ea:	6a1b      	ldr	r3, [r3, #32]
   da9ec:	9301      	str	r3, [sp, #4]
   da9ee:	bd08      	pop	{r3, pc}
   da9f0:	00030240 	.word	0x00030240

000da9f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   da9f4:	b508      	push	{r3, lr}
   da9f6:	4b02      	ldr	r3, [pc, #8]	; (daa00 <network_set_listen_timeout+0xc>)
   da9f8:	681b      	ldr	r3, [r3, #0]
   da9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da9fc:	9301      	str	r3, [sp, #4]
   da9fe:	bd08      	pop	{r3, pc}
   daa00:	00030240 	.word	0x00030240

000daa04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   daa04:	b508      	push	{r3, lr}
   daa06:	4b02      	ldr	r3, [pc, #8]	; (daa10 <network_get_listen_timeout+0xc>)
   daa08:	681b      	ldr	r3, [r3, #0]
   daa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   daa0c:	9301      	str	r3, [sp, #4]
   daa0e:	bd08      	pop	{r3, pc}
   daa10:	00030240 	.word	0x00030240

000daa14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   daa14:	b508      	push	{r3, lr}
   daa16:	4b02      	ldr	r3, [pc, #8]	; (daa20 <spark_process+0xc>)
   daa18:	681b      	ldr	r3, [r3, #0]
   daa1a:	689b      	ldr	r3, [r3, #8]
   daa1c:	9301      	str	r3, [sp, #4]
   daa1e:	bd08      	pop	{r3, pc}
   daa20:	00030244 	.word	0x00030244

000daa24 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   daa24:	b508      	push	{r3, lr}
   daa26:	4b02      	ldr	r3, [pc, #8]	; (daa30 <spark_cloud_flag_connect+0xc>)
   daa28:	681b      	ldr	r3, [r3, #0]
   daa2a:	68db      	ldr	r3, [r3, #12]
   daa2c:	9301      	str	r3, [sp, #4]
   daa2e:	bd08      	pop	{r3, pc}
   daa30:	00030244 	.word	0x00030244

000daa34 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   daa34:	b508      	push	{r3, lr}
   daa36:	4b02      	ldr	r3, [pc, #8]	; (daa40 <spark_cloud_flag_connected+0xc>)
   daa38:	681b      	ldr	r3, [r3, #0]
   daa3a:	695b      	ldr	r3, [r3, #20]
   daa3c:	9301      	str	r3, [sp, #4]
   daa3e:	bd08      	pop	{r3, pc}
   daa40:	00030244 	.word	0x00030244

000daa44 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   daa44:	b508      	push	{r3, lr}
   daa46:	4b02      	ldr	r3, [pc, #8]	; (daa50 <spark_send_event+0xc>)
   daa48:	681b      	ldr	r3, [r3, #0]
   daa4a:	6a1b      	ldr	r3, [r3, #32]
   daa4c:	9301      	str	r3, [sp, #4]
   daa4e:	bd08      	pop	{r3, pc}
   daa50:	00030244 	.word	0x00030244

000daa54 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   daa54:	b508      	push	{r3, lr}
   daa56:	4b02      	ldr	r3, [pc, #8]	; (daa60 <spark_subscribe+0xc>)
   daa58:	681b      	ldr	r3, [r3, #0]
   daa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daa5c:	9301      	str	r3, [sp, #4]
   daa5e:	bd08      	pop	{r3, pc}
   daa60:	00030244 	.word	0x00030244

000daa64 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   daa64:	b508      	push	{r3, lr}
   daa66:	4b02      	ldr	r3, [pc, #8]	; (daa70 <spark_sync_time_pending+0xc>)
   daa68:	681b      	ldr	r3, [r3, #0]
   daa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daa6c:	9301      	str	r3, [sp, #4]
   daa6e:	bd08      	pop	{r3, pc}
   daa70:	00030244 	.word	0x00030244

000daa74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   daa74:	b508      	push	{r3, lr}
   daa76:	4b02      	ldr	r3, [pc, #8]	; (daa80 <spark_set_random_seed_from_cloud_handler+0xc>)
   daa78:	681b      	ldr	r3, [r3, #0]
   daa7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   daa7c:	9301      	str	r3, [sp, #4]
   daa7e:	bd08      	pop	{r3, pc}
   daa80:	00030244 	.word	0x00030244

000daa84 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   daa84:	b508      	push	{r3, lr}
   daa86:	4b02      	ldr	r3, [pc, #8]	; (daa90 <malloc+0xc>)
   daa88:	681b      	ldr	r3, [r3, #0]
   daa8a:	681b      	ldr	r3, [r3, #0]
   daa8c:	9301      	str	r3, [sp, #4]
   daa8e:	bd08      	pop	{r3, pc}
   daa90:	0003021c 	.word	0x0003021c

000daa94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   daa94:	b508      	push	{r3, lr}
   daa96:	4b02      	ldr	r3, [pc, #8]	; (daaa0 <free+0xc>)
   daa98:	681b      	ldr	r3, [r3, #0]
   daa9a:	685b      	ldr	r3, [r3, #4]
   daa9c:	9301      	str	r3, [sp, #4]
   daa9e:	bd08      	pop	{r3, pc}
   daaa0:	0003021c 	.word	0x0003021c

000daaa4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   daaa4:	b508      	push	{r3, lr}
   daaa6:	4b02      	ldr	r3, [pc, #8]	; (daab0 <realloc+0xc>)
   daaa8:	681b      	ldr	r3, [r3, #0]
   daaaa:	689b      	ldr	r3, [r3, #8]
   daaac:	9301      	str	r3, [sp, #4]
   daaae:	bd08      	pop	{r3, pc}
   daab0:	0003021c 	.word	0x0003021c

000daab4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   daab4:	b508      	push	{r3, lr}
   daab6:	4b02      	ldr	r3, [pc, #8]	; (daac0 <siprintf+0xc>)
   daab8:	681b      	ldr	r3, [r3, #0]
   daaba:	691b      	ldr	r3, [r3, #16]
   daabc:	9301      	str	r3, [sp, #4]
   daabe:	bd08      	pop	{r3, pc}
   daac0:	0003021c 	.word	0x0003021c

000daac4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   daac4:	b508      	push	{r3, lr}
   daac6:	4b02      	ldr	r3, [pc, #8]	; (daad0 <siscanf+0xc>)
   daac8:	681b      	ldr	r3, [r3, #0]
   daaca:	699b      	ldr	r3, [r3, #24]
   daacc:	9301      	str	r3, [sp, #4]
   daace:	bd08      	pop	{r3, pc}
   daad0:	0003021c 	.word	0x0003021c

000daad4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   daad4:	b508      	push	{r3, lr}
   daad6:	4b02      	ldr	r3, [pc, #8]	; (daae0 <snprintf+0xc>)
   daad8:	681b      	ldr	r3, [r3, #0]
   daada:	69db      	ldr	r3, [r3, #28]
   daadc:	9301      	str	r3, [sp, #4]
   daade:	bd08      	pop	{r3, pc}
   daae0:	0003021c 	.word	0x0003021c

000daae4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   daae4:	b508      	push	{r3, lr}
   daae6:	4b02      	ldr	r3, [pc, #8]	; (daaf0 <sniprintf+0xc>)
   daae8:	681b      	ldr	r3, [r3, #0]
   daaea:	6a1b      	ldr	r3, [r3, #32]
   daaec:	9301      	str	r3, [sp, #4]
   daaee:	bd08      	pop	{r3, pc}
   daaf0:	0003021c 	.word	0x0003021c

000daaf4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   daaf4:	b508      	push	{r3, lr}
   daaf6:	4b02      	ldr	r3, [pc, #8]	; (dab00 <vsnprintf+0xc>)
   daaf8:	681b      	ldr	r3, [r3, #0]
   daafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daafc:	9301      	str	r3, [sp, #4]
   daafe:	bd08      	pop	{r3, pc}
   dab00:	0003021c 	.word	0x0003021c

000dab04 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dab04:	b508      	push	{r3, lr}
   dab06:	4b02      	ldr	r3, [pc, #8]	; (dab10 <abort+0xc>)
   dab08:	681b      	ldr	r3, [r3, #0]
   dab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dab0c:	9301      	str	r3, [sp, #4]
   dab0e:	bd08      	pop	{r3, pc}
   dab10:	0003021c 	.word	0x0003021c

000dab14 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dab14:	b508      	push	{r3, lr}
   dab16:	4b02      	ldr	r3, [pc, #8]	; (dab20 <_malloc_r+0xc>)
   dab18:	681b      	ldr	r3, [r3, #0]
   dab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dab1c:	9301      	str	r3, [sp, #4]
   dab1e:	bd08      	pop	{r3, pc}
   dab20:	0003021c 	.word	0x0003021c

000dab24 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dab24:	b508      	push	{r3, lr}
   dab26:	4b02      	ldr	r3, [pc, #8]	; (dab30 <__errno+0xc>)
   dab28:	681b      	ldr	r3, [r3, #0]
   dab2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dab2c:	9301      	str	r3, [sp, #4]
   dab2e:	bd08      	pop	{r3, pc}
   dab30:	0003021c 	.word	0x0003021c

000dab34 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dab34:	2200      	movs	r2, #0
   dab36:	4611      	mov	r1, r2
   dab38:	6840      	ldr	r0, [r0, #4]
   dab3a:	f7ff bf53 	b.w	da9e4 <network_listening>

000dab3e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dab3e:	2200      	movs	r2, #0
   dab40:	4611      	mov	r1, r2
   dab42:	6840      	ldr	r0, [r0, #4]
   dab44:	f7ff bf5e 	b.w	daa04 <network_get_listen_timeout>

000dab48 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dab48:	2200      	movs	r2, #0
   dab4a:	6840      	ldr	r0, [r0, #4]
   dab4c:	f7ff bf52 	b.w	da9f4 <network_set_listen_timeout>

000dab50 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dab50:	2200      	movs	r2, #0
   dab52:	f081 0101 	eor.w	r1, r1, #1
   dab56:	6840      	ldr	r0, [r0, #4]
   dab58:	f7ff bf3c 	b.w	da9d4 <network_listen>

000dab5c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   dab5c:	2300      	movs	r3, #0
   dab5e:	461a      	mov	r2, r3
   dab60:	4619      	mov	r1, r3
   dab62:	6840      	ldr	r0, [r0, #4]
   dab64:	f7ff bf2e 	b.w	da9c4 <network_off>

000dab68 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dab68:	2300      	movs	r3, #0
   dab6a:	461a      	mov	r2, r3
   dab6c:	4619      	mov	r1, r3
   dab6e:	6840      	ldr	r0, [r0, #4]
   dab70:	f7ff bf20 	b.w	da9b4 <network_on>

000dab74 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dab74:	2200      	movs	r2, #0
   dab76:	4611      	mov	r1, r2
   dab78:	6840      	ldr	r0, [r0, #4]
   dab7a:	f7ff bf13 	b.w	da9a4 <network_ready>

000dab7e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dab7e:	2200      	movs	r2, #0
   dab80:	4611      	mov	r1, r2
   dab82:	6840      	ldr	r0, [r0, #4]
   dab84:	f7ff befe 	b.w	da984 <network_connecting>

000dab88 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dab88:	2200      	movs	r2, #0
   dab8a:	2102      	movs	r1, #2
   dab8c:	6840      	ldr	r0, [r0, #4]
   dab8e:	f7ff bf01 	b.w	da994 <network_disconnect>

000dab92 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dab92:	2300      	movs	r3, #0
   dab94:	461a      	mov	r2, r3
   dab96:	6840      	ldr	r0, [r0, #4]
   dab98:	f7ff beec 	b.w	da974 <network_connect>

000dab9c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dab9c:	4b02      	ldr	r3, [pc, #8]	; (daba8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dab9e:	2203      	movs	r2, #3
   daba0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   daba2:	4a02      	ldr	r2, [pc, #8]	; (dabac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   daba4:	601a      	str	r2, [r3, #0]
   daba6:	4770      	bx	lr
   daba8:	2003e230 	.word	0x2003e230
   dabac:	000e7d90 	.word	0x000e7d90

000dabb0 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dabb0:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   dabb2:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dabb4:	6892      	ldr	r2, [r2, #8]
   dabb6:	4601      	mov	r1, r0
   dabb8:	4618      	mov	r0, r3
   dabba:	4710      	bx	r2

000dabbc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   dabbc:	b570      	push	{r4, r5, r6, lr}
   dabbe:	4c0e      	ldr	r4, [pc, #56]	; (dabf8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   dabc0:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   dabc2:	241c      	movs	r4, #28
   dabc4:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dabc6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dabca:	f89d 6010 	ldrb.w	r6, [sp, #16]
   dabce:	f004 0403 	and.w	r4, r4, #3
   dabd2:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dabd6:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dabd8:	b2e4      	uxtb	r4, r4
   dabda:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   dabdc:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   dabde:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   dabe0:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dabe2:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dabe4:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dabe6:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   dabe8:	bf08      	it	eq
   dabea:	4b04      	ldreq	r3, [pc, #16]	; (dabfc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   dabec:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   dabee:	bf06      	itte	eq
   dabf0:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   dabf2:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   dabf4:	8303      	strhne	r3, [r0, #24]
    }
}
   dabf6:	bd70      	pop	{r4, r5, r6, pc}
   dabf8:	000e6b74 	.word	0x000e6b74
   dabfc:	000dabb1 	.word	0x000dabb1

000dac00 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   dac00:	4770      	bx	lr

000dac02 <_ZN8SPIClassD0Ev>:
   dac02:	b510      	push	{r4, lr}
   dac04:	2110      	movs	r1, #16
   dac06:	4604      	mov	r4, r0
   dac08:	f002 fa69 	bl	dd0de <_ZdlPvj>
   dac0c:	4620      	mov	r0, r4
   dac0e:	bd10      	pop	{r4, pc}

000dac10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   dac10:	b570      	push	{r4, r5, r6, lr}
   dac12:	4b08      	ldr	r3, [pc, #32]	; (dac34 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   dac14:	6003      	str	r3, [r0, #0]
   dac16:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   dac18:	2500      	movs	r5, #0
   dac1a:	460e      	mov	r6, r1
   dac1c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   dac20:	f7ff fcb0 	bl	da584 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   dac24:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   dac26:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   dac28:	f7ff fc44 	bl	da4b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   dac2c:	60a5      	str	r5, [r4, #8]
}
   dac2e:	4620      	mov	r0, r4
   dac30:	bd70      	pop	{r4, r5, r6, pc}
   dac32:	bf00      	nop
   dac34:	000e7dc4 	.word	0x000e7dc4

000dac38 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dac38:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   dac3a:	7900      	ldrb	r0, [r0, #4]
   dac3c:	f7ff fc32 	bl	da4a4 <HAL_SPI_Send_Receive_Data>
}
   dac40:	b2c0      	uxtb	r0, r0
   dac42:	bd08      	pop	{r3, pc}

000dac44 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   dac44:	7900      	ldrb	r0, [r0, #4]
   dac46:	f7ff bc3d 	b.w	da4c4 <HAL_SPI_Is_Enabled>

000dac4a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   dac4a:	4601      	mov	r1, r0
   dac4c:	2200      	movs	r2, #0
   dac4e:	208c      	movs	r0, #140	; 0x8c
   dac50:	f7ff bc70 	b.w	da534 <HAL_Core_System_Reset_Ex>

000dac54 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   dac54:	2000      	movs	r0, #0
   dac56:	f7ff bff8 	b.w	dac4a <_ZN11SystemClass5resetEm>
	...

000dac5c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   dac5c:	b510      	push	{r4, lr}
   dac5e:	4604      	mov	r4, r0
   dac60:	4608      	mov	r0, r1
   dac62:	4611      	mov	r1, r2
   dac64:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   dac66:	2300      	movs	r3, #0
   dac68:	f7ff fe3e 	bl	da8e8 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   dac6c:	4b06      	ldr	r3, [pc, #24]	; (dac88 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   dac6e:	2200      	movs	r2, #0
   dac70:	701a      	strb	r2, [r3, #0]
   dac72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   dac76:	8058      	strh	r0, [r3, #2]
   dac78:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   dac7a:	681a      	ldr	r2, [r3, #0]
   dac7c:	889b      	ldrh	r3, [r3, #4]
   dac7e:	6022      	str	r2, [r4, #0]
   dac80:	80a3      	strh	r3, [r4, #4]
}
   dac82:	4620      	mov	r0, r4
   dac84:	bd10      	pop	{r4, pc}
   dac86:	bf00      	nop
   dac88:	2003e238 	.word	0x2003e238

000dac8c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dac8c:	b510      	push	{r4, lr}
   dac8e:	2400      	movs	r4, #0
   dac90:	7004      	strb	r4, [r0, #0]
   dac92:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   dac94:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dac96:	f64f 74ff 	movw	r4, #65535	; 0xffff
   dac9a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   dac9c:	dd07      	ble.n	dacae <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   dac9e:	3901      	subs	r1, #1
   daca0:	4299      	cmp	r1, r3
   daca2:	d209      	bcs.n	dacb8 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   daca4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   daca8:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   dacaa:	2301      	movs	r3, #1
   dacac:	e001      	b.n	dacb2 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   dacae:	d102      	bne.n	dacb6 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   dacb0:	2302      	movs	r3, #2
   dacb2:	7003      	strb	r3, [r0, #0]
   dacb4:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   dacb6:	8041      	strh	r1, [r0, #2]
    }
}
   dacb8:	bd10      	pop	{r4, pc}
	...

000dacbc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dacbc:	b570      	push	{r4, r5, r6, lr}
   dacbe:	b086      	sub	sp, #24
   dacc0:	4616      	mov	r6, r2
   dacc2:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dacc4:	2300      	movs	r3, #0
   dacc6:	9302      	str	r3, [sp, #8]
   dacc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dacca:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   daccc:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dacce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dacd0:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dacd2:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dacd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dacd6:	4631      	mov	r1, r6
   dacd8:	4628      	mov	r0, r5
   dacda:	f7ff fe41 	bl	da960 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   dacde:	4633      	mov	r3, r6
   dace0:	462a      	mov	r2, r5
   dace2:	4601      	mov	r1, r0
   dace4:	a804      	add	r0, sp, #16
   dace6:	f7ff ffd1 	bl	dac8c <_ZN11SleepResultC1EiPKtj>
   dacea:	4b06      	ldr	r3, [pc, #24]	; (dad04 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   dacec:	9804      	ldr	r0, [sp, #16]
   dacee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   dacf2:	6018      	str	r0, [r3, #0]
   dacf4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   dacf6:	681a      	ldr	r2, [r3, #0]
   dacf8:	889b      	ldrh	r3, [r3, #4]
   dacfa:	6022      	str	r2, [r4, #0]
}
   dacfc:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   dacfe:	80a3      	strh	r3, [r4, #4]
}
   dad00:	b006      	add	sp, #24
   dad02:	bd70      	pop	{r4, r5, r6, pc}
   dad04:	2003e238 	.word	0x2003e238

000dad08 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   dad08:	7800      	ldrb	r0, [r0, #0]
   dad0a:	4770      	bx	lr

000dad0c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   dad0c:	4b04      	ldr	r3, [pc, #16]	; (dad20 <_GLOBAL__sub_I_System+0x14>)
   dad0e:	2000      	movs	r0, #0
   dad10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   dad14:	7018      	strb	r0, [r3, #0]
   dad16:	8058      	strh	r0, [r3, #2]
   dad18:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dad1a:	f7ff bdd5 	b.w	da8c8 <set_system_mode>
   dad1e:	bf00      	nop
   dad20:	2003e238 	.word	0x2003e238

000dad24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   dad24:	b510      	push	{r4, lr}
   dad26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   dad28:	f009 fc40 	bl	e45ac <strlen>
   dad2c:	3801      	subs	r0, #1
   dad2e:	1823      	adds	r3, r4, r0
   dad30:	4620      	mov	r0, r4
	while(i<j){
   dad32:	4298      	cmp	r0, r3
   dad34:	d206      	bcs.n	dad44 <_Z11str_reversePc+0x20>
		c = *i;
   dad36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   dad38:	7819      	ldrb	r1, [r3, #0]
   dad3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   dad3e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   dad42:	e7f6      	b.n	dad32 <_Z11str_reversePc+0xe>
   dad44:	bd10      	pop	{r4, pc}

000dad46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   dad46:	b570      	push	{r4, r5, r6, lr}
   dad48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   dad4a:	1e91      	subs	r1, r2, #2
   dad4c:	2922      	cmp	r1, #34	; 0x22
   dad4e:	d820      	bhi.n	dad92 <ultoa+0x4c>
   dad50:	4625      	mov	r5, r4
   dad52:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dad54:	b910      	cbnz	r0, dad5c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dad56:	4423      	add	r3, r4
            *ptr++ = '0';
   dad58:	2230      	movs	r2, #48	; 0x30
   dad5a:	e00e      	b.n	dad7a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   dad5c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   dad60:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   dad64:	b2c1      	uxtb	r1, r0
   dad66:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   dad6a:	2809      	cmp	r0, #9
                *ptr += '0';
   dad6c:	bf94      	ite	ls
   dad6e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   dad70:	3157      	addhi	r1, #87	; 0x57
   dad72:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   dad76:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dad78:	e7eb      	b.n	dad52 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dad7a:	4299      	cmp	r1, r3
   dad7c:	d202      	bcs.n	dad84 <ultoa+0x3e>
            *ptr++ = '0';
   dad7e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dad82:	e7fa      	b.n	dad7a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   dad84:	2300      	movs	r3, #0
	str_reverse(buffer);
   dad86:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   dad88:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   dad8a:	f7ff ffcb 	bl	dad24 <_Z11str_reversePc>
	return buffer;
   dad8e:	4620      	mov	r0, r4
   dad90:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   dad92:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   dad94:	bd70      	pop	{r4, r5, r6, pc}

000dad96 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dad96:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   dad98:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dad9a:	460c      	mov	r4, r1
   dad9c:	4615      	mov	r5, r2
	if(a<0){
   dad9e:	da0b      	bge.n	dadb8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dada0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dada4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dada8:	bf14      	ite	ne
   dadaa:	4258      	negne	r0, r3
   dadac:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   dadae:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dadb0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   dadb2:	462a      	mov	r2, r5
   dadb4:	4419      	add	r1, r3
   dadb6:	e000      	b.n	dadba <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   dadb8:	2301      	movs	r3, #1
   dadba:	f7ff ffc4 	bl	dad46 <ultoa>
	}
	return buffer;
}
   dadbe:	4620      	mov	r0, r4
   dadc0:	bd38      	pop	{r3, r4, r5, pc}

000dadc2 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   dadc2:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   dadc4:	2301      	movs	r3, #1
   dadc6:	f7ff ffbe 	bl	dad46 <ultoa>
}
   dadca:	bd08      	pop	{r3, pc}

000dadcc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dadcc:	b510      	push	{r4, lr}
   dadce:	4604      	mov	r4, r0
{
	free(buffer);
   dadd0:	6800      	ldr	r0, [r0, #0]
   dadd2:	f7ff fe5f 	bl	daa94 <free>
}
   dadd6:	4620      	mov	r0, r4
   dadd8:	bd10      	pop	{r4, pc}

000dadda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dadda:	b510      	push	{r4, lr}
   daddc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dadde:	6800      	ldr	r0, [r0, #0]
   dade0:	b108      	cbz	r0, dade6 <_ZN6String10invalidateEv+0xc>
   dade2:	f7ff fe57 	bl	daa94 <free>
	buffer = NULL;
   dade6:	2300      	movs	r3, #0
   dade8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dadea:	60a3      	str	r3, [r4, #8]
   dadec:	6063      	str	r3, [r4, #4]
   dadee:	bd10      	pop	{r4, pc}

000dadf0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dadf0:	b538      	push	{r3, r4, r5, lr}
   dadf2:	4604      	mov	r4, r0
   dadf4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dadf6:	6800      	ldr	r0, [r0, #0]
   dadf8:	3101      	adds	r1, #1
   dadfa:	f7ff fe53 	bl	daaa4 <realloc>
	if (newbuffer) {
   dadfe:	b110      	cbz	r0, dae06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dae00:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dae04:	2001      	movs	r0, #1
	}
	return 0;
}
   dae06:	bd38      	pop	{r3, r4, r5, pc}

000dae08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dae08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dae0a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dae0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dae0e:	b113      	cbz	r3, dae16 <_ZN6String7reserveEj+0xe>
   dae10:	6843      	ldr	r3, [r0, #4]
   dae12:	428b      	cmp	r3, r1
   dae14:	d207      	bcs.n	dae26 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dae16:	4620      	mov	r0, r4
   dae18:	f7ff ffea 	bl	dadf0 <_ZN6String12changeBufferEj>
   dae1c:	b120      	cbz	r0, dae28 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dae1e:	68a3      	ldr	r3, [r4, #8]
   dae20:	b90b      	cbnz	r3, dae26 <_ZN6String7reserveEj+0x1e>
   dae22:	6822      	ldr	r2, [r4, #0]
   dae24:	7013      	strb	r3, [r2, #0]
   dae26:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dae28:	bd10      	pop	{r4, pc}

000dae2a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dae2a:	b570      	push	{r4, r5, r6, lr}
   dae2c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dae2e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dae30:	4604      	mov	r4, r0
   dae32:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dae34:	f7ff ffe8 	bl	dae08 <_ZN6String7reserveEj>
   dae38:	b918      	cbnz	r0, dae42 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dae3a:	4620      	mov	r0, r4
   dae3c:	f7ff ffcd 	bl	dadda <_ZN6String10invalidateEv>
		return *this;
   dae40:	e009      	b.n	dae56 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dae42:	462a      	mov	r2, r5
   dae44:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dae46:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dae48:	6820      	ldr	r0, [r4, #0]
   dae4a:	f008 fbe3 	bl	e3614 <memcpy>
	buffer[len] = 0;
   dae4e:	6822      	ldr	r2, [r4, #0]
   dae50:	68a3      	ldr	r3, [r4, #8]
   dae52:	2100      	movs	r1, #0
   dae54:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   dae56:	4620      	mov	r0, r4
   dae58:	bd70      	pop	{r4, r5, r6, pc}

000dae5a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dae5a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dae5c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dae5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dae60:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dae62:	6043      	str	r3, [r0, #4]
	len = 0;
   dae64:	6083      	str	r3, [r0, #8]
	flags = 0;
   dae66:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   dae68:	460d      	mov	r5, r1
   dae6a:	b139      	cbz	r1, dae7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   dae6c:	4608      	mov	r0, r1
   dae6e:	f009 fb9d 	bl	e45ac <strlen>
   dae72:	4629      	mov	r1, r5
   dae74:	4602      	mov	r2, r0
   dae76:	4620      	mov	r0, r4
   dae78:	f7ff ffd7 	bl	dae2a <_ZN6String4copyEPKcj>
}
   dae7c:	4620      	mov	r0, r4
   dae7e:	bd38      	pop	{r3, r4, r5, pc}

000dae80 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dae80:	b538      	push	{r3, r4, r5, lr}
   dae82:	4605      	mov	r5, r0
	if (buffer) {
   dae84:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dae86:	460c      	mov	r4, r1
	if (buffer) {
   dae88:	b160      	cbz	r0, daea4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   dae8a:	686a      	ldr	r2, [r5, #4]
   dae8c:	688b      	ldr	r3, [r1, #8]
   dae8e:	429a      	cmp	r2, r3
   dae90:	d306      	bcc.n	daea0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   dae92:	6809      	ldr	r1, [r1, #0]
   dae94:	f008 fe52 	bl	e3b3c <strcpy>
			len = rhs.len;
   dae98:	68a3      	ldr	r3, [r4, #8]
   dae9a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dae9c:	2300      	movs	r3, #0
   dae9e:	e00a      	b.n	daeb6 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   daea0:	f7ff fdf8 	bl	daa94 <free>
		}
	}
	buffer = rhs.buffer;
   daea4:	6823      	ldr	r3, [r4, #0]
   daea6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   daea8:	6863      	ldr	r3, [r4, #4]
   daeaa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   daeac:	68a3      	ldr	r3, [r4, #8]
   daeae:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   daeb0:	2300      	movs	r3, #0
   daeb2:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   daeb4:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   daeb6:	60a3      	str	r3, [r4, #8]
   daeb8:	bd38      	pop	{r3, r4, r5, pc}

000daeba <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   daeba:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   daebc:	b510      	push	{r4, lr}
   daebe:	460b      	mov	r3, r1
   daec0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   daec2:	d007      	beq.n	daed4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   daec4:	6809      	ldr	r1, [r1, #0]
   daec6:	b119      	cbz	r1, daed0 <_ZN6StringaSERKS_+0x16>
   daec8:	689a      	ldr	r2, [r3, #8]
   daeca:	f7ff ffae 	bl	dae2a <_ZN6String4copyEPKcj>
   daece:	e001      	b.n	daed4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   daed0:	f7ff ff83 	bl	dadda <_ZN6String10invalidateEv>

	return *this;
}
   daed4:	4620      	mov	r0, r4
   daed6:	bd10      	pop	{r4, pc}

000daed8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   daed8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daeda:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   daedc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daede:	6003      	str	r3, [r0, #0]
	capacity = 0;
   daee0:	6043      	str	r3, [r0, #4]
	len = 0;
   daee2:	6083      	str	r3, [r0, #8]
	flags = 0;
   daee4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   daee6:	f7ff ffe8 	bl	daeba <_ZN6StringaSERKS_>
}
   daeea:	4620      	mov	r0, r4
   daeec:	bd10      	pop	{r4, pc}

000daeee <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   daeee:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   daef0:	b510      	push	{r4, lr}
   daef2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   daef4:	d001      	beq.n	daefa <_ZN6StringaSEOS_+0xc>
   daef6:	f7ff ffc3 	bl	dae80 <_ZN6String4moveERS_>
	return *this;
}
   daefa:	4620      	mov	r0, r4
   daefc:	bd10      	pop	{r4, pc}

000daefe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   daefe:	b538      	push	{r3, r4, r5, lr}
   daf00:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   daf02:	460c      	mov	r4, r1
   daf04:	b141      	cbz	r1, daf18 <_ZN6StringaSEPKc+0x1a>
   daf06:	4608      	mov	r0, r1
   daf08:	f009 fb50 	bl	e45ac <strlen>
   daf0c:	4621      	mov	r1, r4
   daf0e:	4602      	mov	r2, r0
   daf10:	4628      	mov	r0, r5
   daf12:	f7ff ff8a 	bl	dae2a <_ZN6String4copyEPKcj>
   daf16:	e001      	b.n	daf1c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   daf18:	f7ff ff5f 	bl	dadda <_ZN6String10invalidateEv>

	return *this;
}
   daf1c:	4628      	mov	r0, r5
   daf1e:	bd38      	pop	{r3, r4, r5, pc}

000daf20 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   daf20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   daf22:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf24:	2300      	movs	r3, #0
   daf26:	6023      	str	r3, [r4, #0]
	capacity = 0;
   daf28:	6063      	str	r3, [r4, #4]
	len = 0;
   daf2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   daf2c:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   daf2e:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   daf30:	a901      	add	r1, sp, #4
   daf32:	f7ff ff46 	bl	dadc2 <utoa>
	*this = buf;
   daf36:	a901      	add	r1, sp, #4
   daf38:	4620      	mov	r0, r4
   daf3a:	f7ff ffe0 	bl	daefe <_ZN6StringaSEPKc>
}
   daf3e:	4620      	mov	r0, r4
   daf40:	b004      	add	sp, #16
   daf42:	bd10      	pop	{r4, pc}

000daf44 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   daf44:	b510      	push	{r4, lr}
   daf46:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf48:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   daf4a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   daf4c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   daf4e:	6063      	str	r3, [r4, #4]
	len = 0;
   daf50:	60a3      	str	r3, [r4, #8]
	flags = 0;
   daf52:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   daf54:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   daf56:	a901      	add	r1, sp, #4
   daf58:	f7ff ff1d 	bl	dad96 <itoa>
	*this = buf;
   daf5c:	a901      	add	r1, sp, #4
   daf5e:	4620      	mov	r0, r4
   daf60:	f7ff ffcd 	bl	daefe <_ZN6StringaSEPKc>
}
   daf64:	4620      	mov	r0, r4
   daf66:	b00a      	add	sp, #40	; 0x28
   daf68:	bd10      	pop	{r4, pc}

000daf6a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   daf6a:	b570      	push	{r4, r5, r6, lr}
   daf6c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   daf6e:	460e      	mov	r6, r1
   daf70:	b909      	cbnz	r1, daf76 <_ZN6String6concatEPKcj+0xc>
   daf72:	2000      	movs	r0, #0
   daf74:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   daf76:	b16a      	cbz	r2, daf94 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   daf78:	6883      	ldr	r3, [r0, #8]
   daf7a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   daf7c:	4629      	mov	r1, r5
   daf7e:	f7ff ff43 	bl	dae08 <_ZN6String7reserveEj>
   daf82:	2800      	cmp	r0, #0
   daf84:	d0f5      	beq.n	daf72 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   daf86:	6820      	ldr	r0, [r4, #0]
   daf88:	68a3      	ldr	r3, [r4, #8]
   daf8a:	4631      	mov	r1, r6
   daf8c:	4418      	add	r0, r3
   daf8e:	f008 fdd5 	bl	e3b3c <strcpy>
	len = newlen;
   daf92:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   daf94:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   daf96:	bd70      	pop	{r4, r5, r6, pc}

000daf98 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   daf98:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   daf9a:	688a      	ldr	r2, [r1, #8]
   daf9c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   daf9e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dafa0:	f7ff ffe3 	bl	daf6a <_ZN6String6concatEPKcj>
   dafa4:	b910      	cbnz	r0, dafac <_ZplRK15StringSumHelperRK6String+0x14>
   dafa6:	4620      	mov	r0, r4
   dafa8:	f7ff ff17 	bl	dadda <_ZN6String10invalidateEv>
	return a;
}
   dafac:	4620      	mov	r0, r4
   dafae:	bd10      	pop	{r4, pc}

000dafb0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dafb0:	b538      	push	{r3, r4, r5, lr}
   dafb2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dafb4:	460d      	mov	r5, r1
   dafb6:	b141      	cbz	r1, dafca <_ZplRK15StringSumHelperPKc+0x1a>
   dafb8:	4608      	mov	r0, r1
   dafba:	f009 faf7 	bl	e45ac <strlen>
   dafbe:	4629      	mov	r1, r5
   dafc0:	4602      	mov	r2, r0
   dafc2:	4620      	mov	r0, r4
   dafc4:	f7ff ffd1 	bl	daf6a <_ZN6String6concatEPKcj>
   dafc8:	b910      	cbnz	r0, dafd0 <_ZplRK15StringSumHelperPKc+0x20>
   dafca:	4620      	mov	r0, r4
   dafcc:	f7ff ff05 	bl	dadda <_ZN6String10invalidateEv>
	return a;
}
   dafd0:	4620      	mov	r0, r4
   dafd2:	bd38      	pop	{r3, r4, r5, pc}

000dafd4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dafd4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dafd6:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dafd8:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dafda:	b912      	cbnz	r2, dafe2 <_ZNK6String6equalsEPKc+0xe>
   dafdc:	b919      	cbnz	r1, dafe6 <_ZNK6String6equalsEPKc+0x12>
   dafde:	2001      	movs	r0, #1
   dafe0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dafe2:	b911      	cbnz	r1, dafea <_ZNK6String6equalsEPKc+0x16>
   dafe4:	6803      	ldr	r3, [r0, #0]
   dafe6:	7818      	ldrb	r0, [r3, #0]
   dafe8:	e002      	b.n	daff0 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   dafea:	6800      	ldr	r0, [r0, #0]
   dafec:	f008 fd9c 	bl	e3b28 <strcmp>
   daff0:	fab0 f080 	clz	r0, r0
   daff4:	0940      	lsrs	r0, r0, #5
}
   daff6:	bd08      	pop	{r3, pc}

000daff8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   daff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   daffc:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   daffe:	460e      	mov	r6, r1
   db000:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db002:	4910      	ldr	r1, [pc, #64]	; (db044 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   db004:	bf88      	it	hi
   db006:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   db008:	4615      	mov	r5, r2
   db00a:	4607      	mov	r7, r0
	if (left > right) {
   db00c:	bf84      	itt	hi
   db00e:	4625      	movhi	r5, r4
   db010:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   db012:	f7ff ff22 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   db016:	68b1      	ldr	r1, [r6, #8]
   db018:	428d      	cmp	r5, r1
   db01a:	d80f      	bhi.n	db03c <_ZNK6String9substringEjj+0x44>
   db01c:	428c      	cmp	r4, r1
   db01e:	bf28      	it	cs
   db020:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   db022:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   db024:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   db026:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   db02a:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   db02c:	6831      	ldr	r1, [r6, #0]
   db02e:	4638      	mov	r0, r7
   db030:	4429      	add	r1, r5
   db032:	f7ff ff64 	bl	daefe <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   db036:	6833      	ldr	r3, [r6, #0]
   db038:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   db03c:	4638      	mov	r0, r7
   db03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db042:	bf00      	nop
   db044:	000e6c91 	.word	0x000e6c91

000db048 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   db048:	b510      	push	{r4, lr}
   db04a:	4604      	mov	r4, r0
	return substring(left, len);
   db04c:	688b      	ldr	r3, [r1, #8]
   db04e:	f7ff ffd3 	bl	daff8 <_ZNK6String9substringEjj>
}
   db052:	4620      	mov	r0, r4
   db054:	bd10      	pop	{r4, pc}

000db056 <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db056:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   db058:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   db05a:	4605      	mov	r5, r0
	if (buffer) {
   db05c:	b134      	cbz	r4, db06c <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   db05e:	7820      	ldrb	r0, [r4, #0]
   db060:	b120      	cbz	r0, db06c <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   db062:	f00a fa21 	bl	e54a8 <tolower>
   db066:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   db06a:	e7f8      	b.n	db05e <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   db06c:	4628      	mov	r0, r5
   db06e:	bd38      	pop	{r3, r4, r5, pc}

000db070 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   db070:	6800      	ldr	r0, [r0, #0]
   db072:	b108      	cbz	r0, db078 <_ZNK6String5toIntEv+0x8>
   db074:	f008 b9bf 	b.w	e33f6 <atol>
	return 0;
}
   db078:	4770      	bx	lr
	...

000db07c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db07c:	b40e      	push	{r1, r2, r3}
   db07e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   db080:	ac09      	add	r4, sp, #36	; 0x24
   db082:	4605      	mov	r5, r0
   db084:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   db088:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db08a:	4623      	mov	r3, r4
   db08c:	463a      	mov	r2, r7
   db08e:	2105      	movs	r1, #5
   db090:	a802      	add	r0, sp, #8
   db092:	f7ff fd2f 	bl	daaf4 <vsnprintf>
    va_end(marker);

    String result;
   db096:	490c      	ldr	r1, [pc, #48]	; (db0c8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db098:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   db09a:	4628      	mov	r0, r5
   db09c:	f7ff fedd 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   db0a0:	4631      	mov	r1, r6
   db0a2:	4628      	mov	r0, r5
   db0a4:	f7ff feb0 	bl	dae08 <_ZN6String7reserveEj>
    if (result.buffer) {
   db0a8:	6828      	ldr	r0, [r5, #0]
   db0aa:	b130      	cbz	r0, db0ba <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db0ac:	4623      	mov	r3, r4
   db0ae:	463a      	mov	r2, r7
   db0b0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   db0b2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db0b4:	f7ff fd1e 	bl	daaf4 <vsnprintf>
        va_end(marker);
        result.len = n;
   db0b8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   db0ba:	4628      	mov	r0, r5
   db0bc:	b004      	add	sp, #16
   db0be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db0c2:	b003      	add	sp, #12
   db0c4:	4770      	bx	lr
   db0c6:	bf00      	nop
   db0c8:	000e6c91 	.word	0x000e6c91

000db0cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   db0cc:	680b      	ldr	r3, [r1, #0]
   db0ce:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   db0d0:	b113      	cbz	r3, db0d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   db0d2:	685a      	ldr	r2, [r3, #4]
   db0d4:	3201      	adds	r2, #1
   db0d6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   db0d8:	4770      	bx	lr
	...

000db0dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db0dc:	4802      	ldr	r0, [pc, #8]	; (db0e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   db0de:	2300      	movs	r3, #0
   db0e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   db0e2:	f7ff ba57 	b.w	da594 <os_mutex_recursive_create>
   db0e6:	bf00      	nop
   db0e8:	2003e240 	.word	0x2003e240

000db0ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db0ee:	4606      	mov	r6, r0
   db0f0:	460d      	mov	r5, r1
   db0f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   db0f4:	2400      	movs	r4, #0
  while (size--) {
   db0f6:	42bd      	cmp	r5, r7
   db0f8:	d00c      	beq.n	db114 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db0fa:	6833      	ldr	r3, [r6, #0]
   db0fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   db100:	689b      	ldr	r3, [r3, #8]
   db102:	4630      	mov	r0, r6
   db104:	4798      	blx	r3
     if (chunk>=0)
   db106:	2800      	cmp	r0, #0
   db108:	db01      	blt.n	db10e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db10a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   db10c:	e7f3      	b.n	db0f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db10e:	2c00      	cmp	r4, #0
   db110:	bf08      	it	eq
   db112:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   db114:	4620      	mov	r0, r4
   db116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db118 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   db118:	b570      	push	{r4, r5, r6, lr}
   db11a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   db11c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   db11e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   db120:	b149      	cbz	r1, db136 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   db122:	f009 fa43 	bl	e45ac <strlen>
   db126:	682b      	ldr	r3, [r5, #0]
   db128:	4602      	mov	r2, r0
   db12a:	4621      	mov	r1, r4
   db12c:	4628      	mov	r0, r5
   db12e:	68db      	ldr	r3, [r3, #12]
    }
   db130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   db134:	4718      	bx	r3
    }
   db136:	bd70      	pop	{r4, r5, r6, pc}

000db138 <_ZN5Print5printEPKc>:
   db138:	b508      	push	{r3, lr}
   db13a:	f7ff ffed 	bl	db118 <_ZN5Print5writeEPKc>
   db13e:	bd08      	pop	{r3, pc}

000db140 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   db140:	6803      	ldr	r3, [r0, #0]
   db142:	689b      	ldr	r3, [r3, #8]
   db144:	4718      	bx	r3

000db146 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db146:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db148:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db14a:	4605      	mov	r5, r0
  size_t n = print('\r');
   db14c:	f7ff fff8 	bl	db140 <_ZN5Print5printEc>
  n += print('\n');
   db150:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   db152:	4604      	mov	r4, r0
  n += print('\n');
   db154:	4628      	mov	r0, r5
   db156:	f7ff fff3 	bl	db140 <_ZN5Print5printEc>
  return n;
}
   db15a:	4420      	add	r0, r4
   db15c:	bd38      	pop	{r3, r4, r5, pc}

000db15e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   db15e:	b538      	push	{r3, r4, r5, lr}
   db160:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db162:	f7ff ffd9 	bl	db118 <_ZN5Print5writeEPKc>
   db166:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   db168:	4628      	mov	r0, r5
   db16a:	f7ff ffec 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db16e:	4420      	add	r0, r4
   db170:	bd38      	pop	{r3, r4, r5, pc}

000db172 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db172:	b530      	push	{r4, r5, lr}
   db174:	b08b      	sub	sp, #44	; 0x2c
   db176:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db178:	2100      	movs	r1, #0
   db17a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db17e:	2a01      	cmp	r2, #1
   db180:	bf98      	it	ls
   db182:	220a      	movls	r2, #10
   db184:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   db188:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   db18c:	fb05 3312 	mls	r3, r5, r2, r3
   db190:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db194:	2b09      	cmp	r3, #9
   db196:	bf94      	ite	ls
   db198:	3330      	addls	r3, #48	; 0x30
   db19a:	3337      	addhi	r3, #55	; 0x37
   db19c:	b2db      	uxtb	r3, r3
   db19e:	4621      	mov	r1, r4
   db1a0:	f804 3901 	strb.w	r3, [r4], #-1
   db1a4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   db1a6:	2d00      	cmp	r5, #0
   db1a8:	d1ee      	bne.n	db188 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   db1aa:	f7ff ffb5 	bl	db118 <_ZN5Print5writeEPKc>
}
   db1ae:	b00b      	add	sp, #44	; 0x2c
   db1b0:	bd30      	pop	{r4, r5, pc}

000db1b2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   db1b2:	b410      	push	{r4}
  if (base == 0) return write(n);
   db1b4:	b92a      	cbnz	r2, db1c2 <_ZN5Print5printEmi+0x10>
   db1b6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   db1b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   db1bc:	689b      	ldr	r3, [r3, #8]
   db1be:	b2c9      	uxtb	r1, r1
   db1c0:	4718      	bx	r3
  else return printNumber(n, base);
   db1c2:	b2d2      	uxtb	r2, r2
}
   db1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db1c8:	f7ff bfd3 	b.w	db172 <_ZN5Print11printNumberEmh>

000db1cc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   db1cc:	f7ff bff1 	b.w	db1b2 <_ZN5Print5printEmi>

000db1d0 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   db1d0:	b538      	push	{r3, r4, r5, lr}
   db1d2:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   db1d4:	f7ff ffed 	bl	db1b2 <_ZN5Print5printEmi>
   db1d8:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   db1da:	4628      	mov	r0, r5
   db1dc:	f7ff ffb3 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db1e0:	4420      	add	r0, r4
   db1e2:	bd38      	pop	{r3, r4, r5, pc}

000db1e4 <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   db1e4:	f7ff bfe5 	b.w	db1b2 <_ZN5Print5printEmi>

000db1e8 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
   db1e8:	b538      	push	{r3, r4, r5, lr}
   db1ea:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   db1ec:	f7ff ffe1 	bl	db1b2 <_ZN5Print5printEmi>
   db1f0:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
   db1f2:	4628      	mov	r0, r5
   db1f4:	f7ff ffa7 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db1f8:	4420      	add	r0, r4
   db1fa:	bd38      	pop	{r3, r4, r5, pc}

000db1fc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   db1fc:	b538      	push	{r3, r4, r5, lr}
   db1fe:	4605      	mov	r5, r0
  size_t n = print(num, base);
   db200:	f7ff ffd7 	bl	db1b2 <_ZN5Print5printEmi>
   db204:	4604      	mov	r4, r0
  n += println();
   db206:	4628      	mov	r0, r5
   db208:	f7ff ff9d 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db20c:	4420      	add	r0, r4
   db20e:	bd38      	pop	{r3, r4, r5, pc}

000db210 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   db210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db214:	4607      	mov	r7, r0
   db216:	460e      	mov	r6, r1
  if (base == 0) {
   db218:	4615      	mov	r5, r2
   db21a:	b92a      	cbnz	r2, db228 <_ZN5Print5printEli+0x18>
    return write(n);
   db21c:	6803      	ldr	r3, [r0, #0]
   db21e:	b2c9      	uxtb	r1, r1
   db220:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   db222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   db226:	4718      	bx	r3
  } else if (base == 10) {
   db228:	2a0a      	cmp	r2, #10
   db22a:	d102      	bne.n	db232 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   db22c:	2900      	cmp	r1, #0
   db22e:	da01      	bge.n	db234 <_ZN5Print5printEli+0x24>
   db230:	e004      	b.n	db23c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   db232:	b2d2      	uxtb	r2, r2
  }
}
   db234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   db238:	f7ff bf9b 	b.w	db172 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   db23c:	212d      	movs	r1, #45	; 0x2d
   db23e:	f7ff ff7f 	bl	db140 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   db242:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   db244:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   db246:	4271      	negs	r1, r6
   db248:	4638      	mov	r0, r7
   db24a:	f7ff ff92 	bl	db172 <_ZN5Print11printNumberEmh>
   db24e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   db250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db254 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db254:	f7ff bfdc 	b.w	db210 <_ZN5Print5printEli>

000db258 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   db258:	b538      	push	{r3, r4, r5, lr}
   db25a:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db25c:	f7ff ffd8 	bl	db210 <_ZN5Print5printEli>
   db260:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   db262:	4628      	mov	r0, r5
   db264:	f7ff ff6f 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db268:	4420      	add	r0, r4
   db26a:	bd38      	pop	{r3, r4, r5, pc}

000db26c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   db26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db270:	ec57 6b10 	vmov	r6, r7, d0
   db274:	4682      	mov	sl, r0
   db276:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   db278:	ee10 2a10 	vmov	r2, s0
   db27c:	463b      	mov	r3, r7
   db27e:	ee10 0a10 	vmov	r0, s0
   db282:	4639      	mov	r1, r7
   db284:	f007 ffc6 	bl	e3214 <__aeabi_dcmpun>
   db288:	b108      	cbz	r0, db28e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db28a:	4948      	ldr	r1, [pc, #288]	; (db3ac <_ZN5Print10printFloatEdh+0x140>)
   db28c:	e012      	b.n	db2b4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db28e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   db292:	f04f 32ff 	mov.w	r2, #4294967295
   db296:	4b46      	ldr	r3, [pc, #280]	; (db3b0 <_ZN5Print10printFloatEdh+0x144>)
   db298:	4630      	mov	r0, r6
   db29a:	4649      	mov	r1, r9
   db29c:	f007 ffba 	bl	e3214 <__aeabi_dcmpun>
   db2a0:	b968      	cbnz	r0, db2be <_ZN5Print10printFloatEdh+0x52>
   db2a2:	f04f 32ff 	mov.w	r2, #4294967295
   db2a6:	4b42      	ldr	r3, [pc, #264]	; (db3b0 <_ZN5Print10printFloatEdh+0x144>)
   db2a8:	4630      	mov	r0, r6
   db2aa:	4649      	mov	r1, r9
   db2ac:	f007 ff94 	bl	e31d8 <__aeabi_dcmple>
   db2b0:	b928      	cbnz	r0, db2be <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db2b2:	4940      	ldr	r1, [pc, #256]	; (db3b4 <_ZN5Print10printFloatEdh+0x148>)
   db2b4:	4650      	mov	r0, sl
   db2b6:	f7ff ff2f 	bl	db118 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   db2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   db2be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db2c2:	4b3d      	ldr	r3, [pc, #244]	; (db3b8 <_ZN5Print10printFloatEdh+0x14c>)
   db2c4:	4630      	mov	r0, r6
   db2c6:	4639      	mov	r1, r7
   db2c8:	f007 ff9a 	bl	e3200 <__aeabi_dcmpgt>
   db2cc:	b108      	cbz	r0, db2d2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db2ce:	493b      	ldr	r1, [pc, #236]	; (db3bc <_ZN5Print10printFloatEdh+0x150>)
   db2d0:	e7f0      	b.n	db2b4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   db2d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   db2d6:	4b3a      	ldr	r3, [pc, #232]	; (db3c0 <_ZN5Print10printFloatEdh+0x154>)
   db2d8:	4630      	mov	r0, r6
   db2da:	4639      	mov	r1, r7
   db2dc:	f007 ff72 	bl	e31c4 <__aeabi_dcmplt>
   db2e0:	2800      	cmp	r0, #0
   db2e2:	d1f4      	bne.n	db2ce <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   db2e4:	2200      	movs	r2, #0
   db2e6:	2300      	movs	r3, #0
   db2e8:	4630      	mov	r0, r6
   db2ea:	4639      	mov	r1, r7
   db2ec:	f007 ff6a 	bl	e31c4 <__aeabi_dcmplt>
   db2f0:	b140      	cbz	r0, db304 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   db2f2:	212d      	movs	r1, #45	; 0x2d
   db2f4:	4650      	mov	r0, sl
   db2f6:	f7ff ff23 	bl	db140 <_ZN5Print5printEc>
     number = -number;
   db2fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   db2fe:	4604      	mov	r4, r0
     number = -number;
   db300:	461f      	mov	r7, r3
   db302:	e000      	b.n	db306 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db304:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db306:	492f      	ldr	r1, [pc, #188]	; (db3c4 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   db308:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   db30c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   db30e:	fa5f f388 	uxtb.w	r3, r8
   db312:	429d      	cmp	r5, r3
   db314:	d906      	bls.n	db324 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   db316:	2200      	movs	r2, #0
   db318:	4b2b      	ldr	r3, [pc, #172]	; (db3c8 <_ZN5Print10printFloatEdh+0x15c>)
   db31a:	f007 fe0b 	bl	e2f34 <__aeabi_ddiv>
   db31e:	f108 0801 	add.w	r8, r8, #1
   db322:	e7f4      	b.n	db30e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   db324:	4632      	mov	r2, r6
   db326:	463b      	mov	r3, r7
   db328:	f007 fb28 	bl	e297c <__adddf3>
   db32c:	460f      	mov	r7, r1
   db32e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   db330:	f007 ffae 	bl	e3290 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db334:	220a      	movs	r2, #10
   db336:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   db338:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   db33a:	4650      	mov	r0, sl
   db33c:	f7ff ff19 	bl	db172 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   db340:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   db342:	b37d      	cbz	r5, db3a4 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   db344:	4640      	mov	r0, r8
   db346:	f007 fc55 	bl	e2bf4 <__aeabi_ui2d>
   db34a:	4602      	mov	r2, r0
   db34c:	460b      	mov	r3, r1
   db34e:	4630      	mov	r0, r6
   db350:	4639      	mov	r1, r7
   db352:	f007 fb11 	bl	e2978 <__aeabi_dsub>
   db356:	4606      	mov	r6, r0
   db358:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db35a:	4650      	mov	r0, sl
   db35c:	491b      	ldr	r1, [pc, #108]	; (db3cc <_ZN5Print10printFloatEdh+0x160>)
   db35e:	f7ff fedb 	bl	db118 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   db362:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   db364:	4b18      	ldr	r3, [pc, #96]	; (db3c8 <_ZN5Print10printFloatEdh+0x15c>)
   db366:	2200      	movs	r2, #0
   db368:	4630      	mov	r0, r6
   db36a:	4639      	mov	r1, r7
   db36c:	f007 fcb8 	bl	e2ce0 <__aeabi_dmul>
   db370:	460f      	mov	r7, r1
   db372:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   db374:	f007 ff64 	bl	e3240 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db378:	220a      	movs	r2, #10
   db37a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   db37c:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   db37e:	4650      	mov	r0, sl
   db380:	f7ff ff46 	bl	db210 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   db384:	4404      	add	r4, r0
    remainder -= toPrint;
   db386:	4640      	mov	r0, r8
   db388:	f007 fc44 	bl	e2c14 <__aeabi_i2d>
   db38c:	4602      	mov	r2, r0
   db38e:	460b      	mov	r3, r1
   db390:	4630      	mov	r0, r6
   db392:	4639      	mov	r1, r7
   db394:	f007 faf0 	bl	e2978 <__aeabi_dsub>
   db398:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db39a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   db39e:	4606      	mov	r6, r0
   db3a0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   db3a2:	d1df      	bne.n	db364 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   db3a4:	4620      	mov	r0, r4
   db3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db3aa:	bf00      	nop
   db3ac:	000e7dcc 	.word	0x000e7dcc
   db3b0:	7fefffff 	.word	0x7fefffff
   db3b4:	000e7dd4 	.word	0x000e7dd4
   db3b8:	41efffff 	.word	0x41efffff
   db3bc:	000e7dd0 	.word	0x000e7dd0
   db3c0:	c1efffff 	.word	0xc1efffff
   db3c4:	3fe00000 	.word	0x3fe00000
   db3c8:	40240000 	.word	0x40240000
   db3cc:	000e6f65 	.word	0x000e6f65

000db3d0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db3d0:	b2c9      	uxtb	r1, r1
   db3d2:	f7ff bf4b 	b.w	db26c <_ZN5Print10printFloatEdh>

000db3d6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   db3d6:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db3d8:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   db3da:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   db3dc:	f7ff ff46 	bl	db26c <_ZN5Print10printFloatEdh>
   db3e0:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   db3e2:	4628      	mov	r0, r5
   db3e4:	f7ff feaf 	bl	db146 <_ZN5Print7printlnEv>
  return n;
}
   db3e8:	4420      	add	r0, r4
   db3ea:	bd38      	pop	{r3, r4, r5, pc}

000db3ec <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db3ec:	b40c      	push	{r2, r3}
   db3ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db3f2:	b087      	sub	sp, #28
   db3f4:	af00      	add	r7, sp, #0
   db3f6:	f107 0438 	add.w	r4, r7, #56	; 0x38
   db3fa:	4605      	mov	r5, r0
   db3fc:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   db400:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   db402:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   db404:	4623      	mov	r3, r4
   db406:	464a      	mov	r2, r9
   db408:	2114      	movs	r1, #20
   db40a:	1d38      	adds	r0, r7, #4
   db40c:	f7ff fb72 	bl	daaf4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   db410:	2813      	cmp	r0, #19
   db412:	d805      	bhi.n	db420 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db414:	1d39      	adds	r1, r7, #4
   db416:	4628      	mov	r0, r5
   db418:	f7ff fe7e 	bl	db118 <_ZN5Print5writeEPKc>
   db41c:	4604      	mov	r4, r0
   db41e:	e013      	b.n	db448 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db420:	f100 0308 	add.w	r3, r0, #8
   db424:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   db428:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   db42a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   db42e:	1c41      	adds	r1, r0, #1
   db430:	4623      	mov	r3, r4
   db432:	464a      	mov	r2, r9
   db434:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   db436:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   db438:	f7ff fb5c 	bl	daaf4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   db43c:	4669      	mov	r1, sp
   db43e:	4628      	mov	r0, r5
   db440:	f7ff fe6a 	bl	db118 <_ZN5Print5writeEPKc>
   db444:	4604      	mov	r4, r0
   db446:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   db448:	b11e      	cbz	r6, db452 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   db44a:	4628      	mov	r0, r5
   db44c:	f7ff fe7b 	bl	db146 <_ZN5Print7printlnEv>
   db450:	4404      	add	r4, r0
    return n;
}
   db452:	4620      	mov	r0, r4
   db454:	371c      	adds	r7, #28
   db456:	46bd      	mov	sp, r7
   db458:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db45c:	b002      	add	sp, #8
   db45e:	4770      	bx	lr

000db460 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   db460:	b510      	push	{r4, lr}
   db462:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   db464:	f7ff f846 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   db468:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   db46a:	6823      	ldr	r3, [r4, #0]
   db46c:	4620      	mov	r0, r4
   db46e:	695b      	ldr	r3, [r3, #20]
   db470:	4798      	blx	r3
    if (c >= 0) return c;
   db472:	2800      	cmp	r0, #0
   db474:	da08      	bge.n	db488 <_ZN6Stream9timedReadEv+0x28>
   db476:	f7ff f83d 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   db47a:	68e3      	ldr	r3, [r4, #12]
   db47c:	1ac0      	subs	r0, r0, r3
   db47e:	68a3      	ldr	r3, [r4, #8]
   db480:	4298      	cmp	r0, r3
   db482:	d3f2      	bcc.n	db46a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   db484:	f04f 30ff 	mov.w	r0, #4294967295
}
   db488:	bd10      	pop	{r4, pc}

000db48a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   db48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db48e:	4680      	mov	r8, r0
   db490:	460d      	mov	r5, r1
   db492:	188f      	adds	r7, r1, r2
   db494:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   db496:	42bc      	cmp	r4, r7
   db498:	eba4 0605 	sub.w	r6, r4, r5
   db49c:	d007      	beq.n	db4ae <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   db49e:	4640      	mov	r0, r8
   db4a0:	f7ff ffde 	bl	db460 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   db4a4:	2800      	cmp	r0, #0
   db4a6:	db02      	blt.n	db4ae <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   db4a8:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   db4ac:	e7f3      	b.n	db496 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   db4ae:	4630      	mov	r0, r6
   db4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db4b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   db4b4:	4b01      	ldr	r3, [pc, #4]	; (db4bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   db4b6:	4a02      	ldr	r2, [pc, #8]	; (db4c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   db4b8:	601a      	str	r2, [r3, #0]
   db4ba:	4770      	bx	lr
   db4bc:	2003e244 	.word	0x2003e244
   db4c0:	000e7e4b 	.word	0x000e7e4b

000db4c4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   db4c6:	4b14      	ldr	r3, [pc, #80]	; (db518 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db4c8:	4f14      	ldr	r7, [pc, #80]	; (db51c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db4ca:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   db4cc:	4b14      	ldr	r3, [pc, #80]	; (db520 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   db4ce:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   db4d0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   db4d2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   db4d4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   db4d6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db4d8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db4da:	d01b      	beq.n	db514 <_ZL22Refresh_UnixTime_Cachel+0x50>
   db4dc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   db4de:	ad01      	add	r5, sp, #4
   db4e0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   db4e4:	f007 ff9a 	bl	e341c <localtime>
	calendar_time->tm_year += 1900;
   db4e8:	6943      	ldr	r3, [r0, #20]
   db4ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db4ee:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   db4f0:	4604      	mov	r4, r0
   db4f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db4f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db4f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db4f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db4fa:	f8d4 e000 	ldr.w	lr, [r4]
   db4fe:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db502:	ad01      	add	r5, sp, #4
   db504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db506:	4c07      	ldr	r4, [pc, #28]	; (db524 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   db508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db50e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db510:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   db514:	b00b      	add	sp, #44	; 0x2c
   db516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db518:	2003e27c 	.word	0x2003e27c
   db51c:	2003e278 	.word	0x2003e278
   db520:	2003e274 	.word	0x2003e274
   db524:	2003e248 	.word	0x2003e248

000db528 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   db528:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   db52a:	2000      	movs	r0, #0
   db52c:	f7ff fa9a 	bl	daa64 <spark_sync_time_pending>
   db530:	b128      	cbz	r0, db53e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   db532:	f7ff fa7f 	bl	daa34 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   db536:	f080 0001 	eor.w	r0, r0, #1
   db53a:	b2c0      	uxtb	r0, r0
   db53c:	bd08      	pop	{r3, pc}
   db53e:	2001      	movs	r0, #1
    }
   db540:	bd08      	pop	{r3, pc}
	...

000db544 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   db544:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db546:	f7ff ffbd 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   db54a:	4b01      	ldr	r3, [pc, #4]	; (db550 <_ZN9TimeClass4hourEl+0xc>)
   db54c:	6898      	ldr	r0, [r3, #8]
   db54e:	bd08      	pop	{r3, pc}
   db550:	2003e248 	.word	0x2003e248

000db554 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   db554:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db556:	f7ff ffb5 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   db55a:	4b01      	ldr	r3, [pc, #4]	; (db560 <_ZN9TimeClass6minuteEl+0xc>)
   db55c:	6858      	ldr	r0, [r3, #4]
   db55e:	bd08      	pop	{r3, pc}
   db560:	2003e248 	.word	0x2003e248

000db564 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   db564:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db566:	f7ff ffad 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   db56a:	4b01      	ldr	r3, [pc, #4]	; (db570 <_ZN9TimeClass6secondEl+0xc>)
   db56c:	6818      	ldr	r0, [r3, #0]
   db56e:	bd08      	pop	{r3, pc}
   db570:	2003e248 	.word	0x2003e248

000db574 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   db574:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db576:	f7ff ffa5 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   db57a:	4b01      	ldr	r3, [pc, #4]	; (db580 <_ZN9TimeClass3dayEl+0xc>)
   db57c:	68d8      	ldr	r0, [r3, #12]
   db57e:	bd08      	pop	{r3, pc}
   db580:	2003e248 	.word	0x2003e248

000db584 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   db584:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db586:	f7ff ff9d 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   db58a:	4b02      	ldr	r3, [pc, #8]	; (db594 <_ZN9TimeClass7weekdayEl+0x10>)
   db58c:	6998      	ldr	r0, [r3, #24]
}
   db58e:	3001      	adds	r0, #1
   db590:	bd08      	pop	{r3, pc}
   db592:	bf00      	nop
   db594:	2003e248 	.word	0x2003e248

000db598 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db598:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db59a:	f7ff ff93 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db59e:	4b02      	ldr	r3, [pc, #8]	; (db5a8 <_ZN9TimeClass5monthEl+0x10>)
   db5a0:	6918      	ldr	r0, [r3, #16]
}
   db5a2:	3001      	adds	r0, #1
   db5a4:	bd08      	pop	{r3, pc}
   db5a6:	bf00      	nop
   db5a8:	2003e248 	.word	0x2003e248

000db5ac <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   db5ac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db5ae:	f7ff ff89 	bl	db4c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   db5b2:	4b01      	ldr	r3, [pc, #4]	; (db5b8 <_ZN9TimeClass4yearEl+0xc>)
   db5b4:	6958      	ldr	r0, [r3, #20]
   db5b6:	bd08      	pop	{r3, pc}
   db5b8:	2003e248 	.word	0x2003e248

000db5bc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   db5be:	4b0e      	ldr	r3, [pc, #56]	; (db5f8 <_ZN9TimeClass7timeStrEl+0x3c>)
   db5c0:	681b      	ldr	r3, [r3, #0]
   db5c2:	4419      	add	r1, r3
   db5c4:	4b0d      	ldr	r3, [pc, #52]	; (db5fc <_ZN9TimeClass7timeStrEl+0x40>)
   db5c6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db5c8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   db5ca:	a802      	add	r0, sp, #8
   db5cc:	4419      	add	r1, r3
   db5ce:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   db5d2:	f007 ff23 	bl	e341c <localtime>
        char* ascstr = asctime(calendar_time);
   db5d6:	f007 fecb 	bl	e3370 <asctime>
   db5da:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   db5dc:	f008 ffe6 	bl	e45ac <strlen>
        ascstr[len-1] = 0; // remove final newline
   db5e0:	4428      	add	r0, r5
   db5e2:	2300      	movs	r3, #0
   db5e4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   db5e8:	4629      	mov	r1, r5
   db5ea:	4620      	mov	r0, r4
   db5ec:	f7ff fc35 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
}
   db5f0:	4620      	mov	r0, r4
   db5f2:	b003      	add	sp, #12
   db5f4:	bd30      	pop	{r4, r5, pc}
   db5f6:	bf00      	nop
   db5f8:	2003e27c 	.word	0x2003e27c
   db5fc:	2003e274 	.word	0x2003e274

000db600 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db604:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   db606:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db608:	4607      	mov	r7, r0
   db60a:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   db60c:	4620      	mov	r0, r4
   db60e:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db610:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   db612:	f008 fa93 	bl	e3b3c <strcpy>
    size_t len = strlen(format_str);
   db616:	4620      	mov	r0, r4
   db618:	f008 ffc8 	bl	e45ac <strlen>
   db61c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   db61e:	b925      	cbnz	r5, db62a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   db620:	4924      	ldr	r1, [pc, #144]	; (db6b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   db622:	a803      	add	r0, sp, #12
   db624:	f008 fa8a 	bl	e3b3c <strcpy>
   db628:	e013      	b.n	db652 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   db62a:	213c      	movs	r1, #60	; 0x3c
   db62c:	fb95 f2f1 	sdiv	r2, r5, r1
   db630:	2a00      	cmp	r2, #0
   db632:	bfb8      	it	lt
   db634:	4252      	neglt	r2, r2
   db636:	fb92 f3f1 	sdiv	r3, r2, r1
   db63a:	fb01 2213 	mls	r2, r1, r3, r2
   db63e:	9200      	str	r2, [sp, #0]
   db640:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db644:	4a1c      	ldr	r2, [pc, #112]	; (db6b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   db646:	fb95 f3f3 	sdiv	r3, r5, r3
   db64a:	2110      	movs	r1, #16
   db64c:	a803      	add	r0, sp, #12
   db64e:	f7ff fa41 	bl	daad4 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db652:	4625      	mov	r5, r4
   db654:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db656:	f108 3aff 	add.w	sl, r8, #4294967295
   db65a:	45b2      	cmp	sl, r6
   db65c:	d91b      	bls.n	db696 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   db65e:	782b      	ldrb	r3, [r5, #0]
   db660:	2b25      	cmp	r3, #37	; 0x25
   db662:	d116      	bne.n	db692 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   db664:	786b      	ldrb	r3, [r5, #1]
   db666:	2b7a      	cmp	r3, #122	; 0x7a
   db668:	d113      	bne.n	db692 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   db66a:	a803      	add	r0, sp, #12
   db66c:	f008 ff9e 	bl	e45ac <strlen>
   db670:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db672:	4430      	add	r0, r6
   db674:	ebc6 020a 	rsb	r2, r6, sl
   db678:	1ca9      	adds	r1, r5, #2
   db67a:	4420      	add	r0, r4
   db67c:	f007 ffca 	bl	e3614 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   db680:	4642      	mov	r2, r8
   db682:	a903      	add	r1, sp, #12
   db684:	4628      	mov	r0, r5
   db686:	f007 ffc5 	bl	e3614 <memcpy>
            len = strlen(format_str);
   db68a:	4620      	mov	r0, r4
   db68c:	f008 ff8e 	bl	e45ac <strlen>
   db690:	4680      	mov	r8, r0
   db692:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db694:	e7de      	b.n	db654 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   db696:	464b      	mov	r3, r9
   db698:	4622      	mov	r2, r4
   db69a:	2132      	movs	r1, #50	; 0x32
   db69c:	a807      	add	r0, sp, #28
   db69e:	f008 fad1 	bl	e3c44 <strftime>
    return String(buf);
   db6a2:	a907      	add	r1, sp, #28
   db6a4:	4638      	mov	r0, r7
   db6a6:	f7ff fbd8 	bl	dae5a <_ZN6StringC1EPK19__FlashStringHelper>
}
   db6aa:	4638      	mov	r0, r7
   db6ac:	b024      	add	sp, #144	; 0x90
   db6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db6b2:	bf00      	nop
   db6b4:	000e88e5 	.word	0x000e88e5
   db6b8:	000e7e9f 	.word	0x000e7e9f

000db6bc <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   db6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db6be:	4605      	mov	r5, r0
   db6c0:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   db6c2:	461c      	mov	r4, r3
   db6c4:	b913      	cbnz	r3, db6cc <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   db6c6:	4b12      	ldr	r3, [pc, #72]	; (db710 <_ZN9TimeClass6formatElPKc+0x54>)
   db6c8:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   db6ca:	b12c      	cbz	r4, db6d8 <_ZN9TimeClass6formatElPKc+0x1c>
   db6cc:	4b11      	ldr	r3, [pc, #68]	; (db714 <_ZN9TimeClass6formatElPKc+0x58>)
   db6ce:	4620      	mov	r0, r4
   db6d0:	6819      	ldr	r1, [r3, #0]
   db6d2:	f008 fa29 	bl	e3b28 <strcmp>
   db6d6:	b920      	cbnz	r0, db6e2 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   db6d8:	9901      	ldr	r1, [sp, #4]
   db6da:	4628      	mov	r0, r5
   db6dc:	f7ff ff6e 	bl	db5bc <_ZN9TimeClass7timeStrEl>
   db6e0:	e013      	b.n	db70a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   db6e2:	4f0d      	ldr	r7, [pc, #52]	; (db718 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   db6e4:	9a01      	ldr	r2, [sp, #4]
   db6e6:	683b      	ldr	r3, [r7, #0]
   db6e8:	4e0c      	ldr	r6, [pc, #48]	; (db71c <_ZN9TimeClass6formatElPKc+0x60>)
   db6ea:	441a      	add	r2, r3
   db6ec:	6833      	ldr	r3, [r6, #0]
   db6ee:	a802      	add	r0, sp, #8
   db6f0:	4413      	add	r3, r2
   db6f2:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   db6f6:	f007 fe91 	bl	e341c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db6fa:	683a      	ldr	r2, [r7, #0]
   db6fc:	6833      	ldr	r3, [r6, #0]
   db6fe:	4601      	mov	r1, r0
   db700:	4413      	add	r3, r2
   db702:	4628      	mov	r0, r5
   db704:	4622      	mov	r2, r4
   db706:	f7ff ff7b 	bl	db600 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   db70a:	4628      	mov	r0, r5
   db70c:	b003      	add	sp, #12
   db70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db710:	2003e270 	.word	0x2003e270
   db714:	2003d578 	.word	0x2003d578
   db718:	2003e27c 	.word	0x2003e27c
   db71c:	2003e274 	.word	0x2003e274

000db720 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   db720:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   db722:	2000      	movs	r0, #0
   db724:	f7fe fef6 	bl	da514 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   db728:	4604      	mov	r4, r0
   db72a:	b968      	cbnz	r0, db748 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db72c:	f7ff f8c4 	bl	da8b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db730:	2801      	cmp	r0, #1
   db732:	d10b      	bne.n	db74c <_ZN9TimeClass7isValidEv+0x2c>
   db734:	4620      	mov	r0, r4
   db736:	f7ff f8ef 	bl	da918 <system_thread_get_state>
   db73a:	b938      	cbnz	r0, db74c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   db73c:	f7ff fef4 	bl	db528 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db740:	b930      	cbnz	r0, db750 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   db742:	f7ff f967 	bl	daa14 <spark_process>
   db746:	e7f9      	b.n	db73c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   db748:	2001      	movs	r0, #1
   db74a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   db74c:	2000      	movs	r0, #0
   db74e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   db750:	f7ff feea 	bl	db528 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   db754:	2000      	movs	r0, #0
   db756:	f7fe fedd 	bl	da514 <HAL_RTC_Time_Is_Valid>
   db75a:	3000      	adds	r0, #0
   db75c:	bf18      	it	ne
   db75e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   db760:	bd10      	pop	{r4, pc}

000db762 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   db762:	b508      	push	{r3, lr}
    (void)isValid();
   db764:	f7ff ffdc 	bl	db720 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   db768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   db76c:	f7fe beca 	b.w	da504 <HAL_RTC_Get_UnixTime>

000db770 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db770:	4b02      	ldr	r3, [pc, #8]	; (db77c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db772:	681a      	ldr	r2, [r3, #0]
   db774:	4b02      	ldr	r3, [pc, #8]	; (db780 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db776:	601a      	str	r2, [r3, #0]
   db778:	4770      	bx	lr
   db77a:	bf00      	nop
   db77c:	2003d578 	.word	0x2003d578
   db780:	2003e270 	.word	0x2003e270

000db784 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   db784:	2100      	movs	r1, #0
   db786:	f7ff b8a7 	b.w	da8d8 <system_delay_ms>

000db78a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db78a:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db78c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db78e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db790:	689b      	ldr	r3, [r3, #8]
   db792:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db794:	68a3      	ldr	r3, [r4, #8]
   db796:	3b01      	subs	r3, #1
   db798:	60a3      	str	r3, [r4, #8]
   db79a:	b92b      	cbnz	r3, db7a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   db79c:	6823      	ldr	r3, [r4, #0]
   db79e:	4620      	mov	r0, r4
   db7a0:	68db      	ldr	r3, [r3, #12]
        }
    }
   db7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db7a6:	4718      	bx	r3
   db7a8:	bd10      	pop	{r4, pc}
	...

000db7ac <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   db7ac:	b510      	push	{r4, lr}
   db7ae:	4b06      	ldr	r3, [pc, #24]	; (db7c8 <_ZN9TCPClientD1Ev+0x1c>)
   db7b0:	6003      	str	r3, [r0, #0]
   db7b2:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   db7b4:	6980      	ldr	r0, [r0, #24]
   db7b6:	b128      	cbz	r0, db7c4 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   db7b8:	6843      	ldr	r3, [r0, #4]
   db7ba:	3b01      	subs	r3, #1
   db7bc:	6043      	str	r3, [r0, #4]
   db7be:	b90b      	cbnz	r3, db7c4 <_ZN9TCPClientD1Ev+0x18>
   db7c0:	f7ff ffe3 	bl	db78a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   db7c4:	4620      	mov	r0, r4
   db7c6:	bd10      	pop	{r4, pc}
   db7c8:	000e8040 	.word	0x000e8040

000db7cc <_ZN9TCPClientD0Ev>:
   db7cc:	b510      	push	{r4, lr}
   db7ce:	4604      	mov	r4, r0
   db7d0:	f7ff ffec 	bl	db7ac <_ZN9TCPClientD1Ev>
   db7d4:	4620      	mov	r0, r4
   db7d6:	211c      	movs	r1, #28
   db7d8:	f001 fc81 	bl	dd0de <_ZdlPvj>
   db7dc:	4620      	mov	r0, r4
   db7de:	bd10      	pop	{r4, pc}

000db7e0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db7e0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   db7e2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   db7e4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   db7e6:	b113      	cbz	r3, db7ee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db7e8:	2203      	movs	r2, #3
   db7ea:	4601      	mov	r1, r0
   db7ec:	4798      	blx	r3
    }
   db7ee:	4620      	mov	r0, r4
   db7f0:	bd10      	pop	{r4, pc}

000db7f2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   db7f2:	b510      	push	{r4, lr}
   db7f4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db7f6:	f7ff fff3 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
   db7fa:	4620      	mov	r0, r4
   db7fc:	bd10      	pop	{r4, pc}

000db7fe <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   db7fe:	b510      	push	{r4, lr}
   db800:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   db802:	f7ff f837 	bl	da874 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   db806:	4284      	cmp	r4, r0
   db808:	d008      	beq.n	db81c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   db80a:	b11c      	cbz	r4, db814 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   db80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   db810:	f7ff b820 	b.w	da854 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   db814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   db818:	f7ff b824 	b.w	da864 <LED_Signaling_Stop>
   db81c:	bd10      	pop	{r4, pc}

000db81e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   db81e:	b570      	push	{r4, r5, r6, lr}
   db820:	4605      	mov	r5, r0
   db822:	460e      	mov	r6, r1
   db824:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   db826:	f7ff f825 	bl	da874 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   db82a:	b150      	cbz	r0, db842 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   db82c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   db830:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   db834:	f7ff f806 	bl	da844 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   db838:	20e7      	movs	r0, #231	; 0xe7
}
   db83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   db83e:	f7ff b821 	b.w	da884 <LED_On>
   db842:	bd70      	pop	{r4, r5, r6, pc}

000db844 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   db844:	b513      	push	{r0, r1, r4, lr}
   db846:	460b      	mov	r3, r1
   db848:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db84a:	c803      	ldmia	r0, {r0, r1}
   db84c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   db850:	e893 0003 	ldmia.w	r3, {r0, r1}
   db854:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   db858:	e89d 0003 	ldmia.w	sp, {r0, r1}
   db85c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   db860:	b002      	add	sp, #8
   db862:	bd10      	pop	{r4, pc}

000db864 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db864:	4803      	ldr	r0, [pc, #12]	; (db874 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   db866:	4a04      	ldr	r2, [pc, #16]	; (db878 <_GLOBAL__sub_I_RGB+0x14>)
   db868:	4904      	ldr	r1, [pc, #16]	; (db87c <_GLOBAL__sub_I_RGB+0x18>)
   db86a:	2300      	movs	r3, #0
   db86c:	6083      	str	r3, [r0, #8]
   db86e:	f001 bc31 	b.w	dd0d4 <__aeabi_atexit>
   db872:	bf00      	nop
   db874:	2003e280 	.word	0x2003e280
   db878:	2003d670 	.word	0x2003d670
   db87c:	000db7f3 	.word	0x000db7f3

000db880 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   db880:	4770      	bx	lr

000db882 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   db882:	7d00      	ldrb	r0, [r0, #20]
   db884:	4770      	bx	lr
	...

000db888 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   db888:	7d03      	ldrb	r3, [r0, #20]
   db88a:	b11b      	cbz	r3, db894 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   db88c:	6983      	ldr	r3, [r0, #24]
   db88e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db892:	d102      	bne.n	db89a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   db894:	ed9f 0a05 	vldr	s0, [pc, #20]	; db8ac <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   db898:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   db89a:	ee07 3a90 	vmov	s15, r3
   db89e:	ed9f 7a04 	vldr	s14, [pc, #16]	; db8b0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   db8a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db8a6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   db8aa:	4770      	bx	lr
   db8ac:	00000000 	.word	0x00000000
   db8b0:	42c80000 	.word	0x42c80000

000db8b4 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   db8b4:	7d03      	ldrb	r3, [r0, #20]
   db8b6:	b11b      	cbz	r3, db8c0 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   db8b8:	6a03      	ldr	r3, [r0, #32]
   db8ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db8be:	d102      	bne.n	db8c6 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   db8c0:	ed9f 0a05 	vldr	s0, [pc, #20]	; db8d8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   db8c4:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   db8c6:	ee07 3a90 	vmov	s15, r3
   db8ca:	ed9f 7a04 	vldr	s14, [pc, #16]	; db8dc <_ZNK14CellularSignal15getQualityValueEv+0x28>
   db8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db8d2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   db8d6:	4770      	bx	lr
   db8d8:	00000000 	.word	0x00000000
   db8dc:	42c80000 	.word	0x42c80000

000db8e0 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   db8e0:	b570      	push	{r4, r5, r6, lr}
   db8e2:	460d      	mov	r5, r1
   db8e4:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   db8e6:	220a      	movs	r2, #10
   db8e8:	6881      	ldr	r1, [r0, #8]
   db8ea:	4628      	mov	r0, r5
   db8ec:	f7ff fcb2 	bl	db254 <_ZN5Print5printEii>
    n += p.print(',');
   db8f0:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   db8f2:	4604      	mov	r4, r0
    n += p.print(',');
   db8f4:	4628      	mov	r0, r5
   db8f6:	f7ff fc23 	bl	db140 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   db8fa:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   db8fc:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   db8fe:	68f1      	ldr	r1, [r6, #12]
   db900:	4628      	mov	r0, r5
   db902:	f7ff fca7 	bl	db254 <_ZN5Print5printEii>
    return n;
}
   db906:	4420      	add	r0, r4
   db908:	bd70      	pop	{r4, r5, r6, pc}

000db90a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   db90a:	f1a0 0004 	sub.w	r0, r0, #4
   db90e:	f7ff bfe7 	b.w	db8e0 <_ZNK14CellularSignal7printToER5Print>

000db912 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   db912:	b510      	push	{r4, lr}
   db914:	2128      	movs	r1, #40	; 0x28
   db916:	4604      	mov	r4, r0
   db918:	f001 fbe1 	bl	dd0de <_ZdlPvj>
   db91c:	4620      	mov	r0, r4
   db91e:	bd10      	pop	{r4, pc}

000db920 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   db920:	7d03      	ldrb	r3, [r0, #20]
   db922:	b17b      	cbz	r3, db944 <_ZNK14CellularSignal10getQualityEv+0x24>
   db924:	6a43      	ldr	r3, [r0, #36]	; 0x24
   db926:	2b00      	cmp	r3, #0
   db928:	db0c      	blt.n	db944 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   db92a:	ee07 3a90 	vmov	s15, r3
   db92e:	eddf 6a07 	vldr	s13, [pc, #28]	; db94c <_ZNK14CellularSignal10getQualityEv+0x2c>
   db932:	ed9f 0a07 	vldr	s0, [pc, #28]	; db950 <_ZNK14CellularSignal10getQualityEv+0x30>
   db936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   db93a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   db93e:	ee27 0a80 	vmul.f32	s0, s15, s0
   db942:	4770      	bx	lr
    }

    return -1.0f;
   db944:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db948:	4770      	bx	lr
   db94a:	bf00      	nop
   db94c:	477fff00 	.word	0x477fff00
   db950:	42c80000 	.word	0x42c80000

000db954 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   db954:	7d03      	ldrb	r3, [r0, #20]
   db956:	b17b      	cbz	r3, db978 <_ZNK14CellularSignal11getStrengthEv+0x24>
   db958:	69c3      	ldr	r3, [r0, #28]
   db95a:	2b00      	cmp	r3, #0
   db95c:	db0c      	blt.n	db978 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   db95e:	ee07 3a90 	vmov	s15, r3
   db962:	eddf 6a07 	vldr	s13, [pc, #28]	; db980 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   db966:	ed9f 0a07 	vldr	s0, [pc, #28]	; db984 <_ZNK14CellularSignal11getStrengthEv+0x30>
   db96a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   db96e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   db972:	ee27 0a80 	vmul.f32	s0, s15, s0
   db976:	4770      	bx	lr
    }

    return -1.0f;
   db978:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db97c:	4770      	bx	lr
   db97e:	bf00      	nop
   db980:	477fff00 	.word	0x477fff00
   db984:	42c80000 	.word	0x42c80000

000db988 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   db988:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   db98a:	460d      	mov	r5, r1
   db98c:	f100 0410 	add.w	r4, r0, #16
   db990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db994:	e895 0003 	ldmia.w	r5, {r0, r1}
   db998:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   db99c:	2001      	movs	r0, #1
   db99e:	bd30      	pop	{r4, r5, pc}

000db9a0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   db9a0:	6800      	ldr	r0, [r0, #0]
   db9a2:	f000 be68 	b.w	dc676 <_ZN7TwoWire4lockEv>

000db9a6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   db9a6:	b510      	push	{r4, lr}
   db9a8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   db9aa:	6001      	str	r1, [r0, #0]
   db9ac:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   db9ae:	b10a      	cbz	r2, db9b4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   db9b0:	f7ff fff6 	bl	db9a0 <_ZN9FuelGauge4lockEv>
    }
}
   db9b4:	4620      	mov	r0, r4
   db9b6:	bd10      	pop	{r4, pc}

000db9b8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   db9b8:	b538      	push	{r3, r4, r5, lr}
   db9ba:	4604      	mov	r4, r0
   db9bc:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   db9be:	f001 fb69 	bl	dd094 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   db9c2:	462a      	mov	r2, r5
   db9c4:	4601      	mov	r1, r0
   db9c6:	4620      	mov	r0, r4
   db9c8:	f7ff ffed 	bl	db9a6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   db9cc:	4620      	mov	r0, r4
   db9ce:	bd38      	pop	{r3, r4, r5, pc}

000db9d0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   db9d0:	6800      	ldr	r0, [r0, #0]
   db9d2:	f000 be59 	b.w	dc688 <_ZN7TwoWire6unlockEv>

000db9d6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   db9d6:	b510      	push	{r4, lr}
{
    if (lock_) {
   db9d8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   db9da:	4604      	mov	r4, r0
{
    if (lock_) {
   db9dc:	b10b      	cbz	r3, db9e2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   db9de:	f7ff fff7 	bl	db9d0 <_ZN9FuelGauge6unlockEv>
    }
}
   db9e2:	4620      	mov	r0, r4
   db9e4:	bd10      	pop	{r4, pc}

000db9e6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   db9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db9e8:	4604      	mov	r4, r0
   db9ea:	4616      	mov	r6, r2
   db9ec:	461d      	mov	r5, r3
   db9ee:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   db9f0:	f7ff ffd6 	bl	db9a0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   db9f4:	6820      	ldr	r0, [r4, #0]
   db9f6:	2136      	movs	r1, #54	; 0x36
   db9f8:	f000 fe2a 	bl	dc650 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   db9fc:	6820      	ldr	r0, [r4, #0]
   db9fe:	6803      	ldr	r3, [r0, #0]
   dba00:	4639      	mov	r1, r7
   dba02:	689b      	ldr	r3, [r3, #8]
   dba04:	4798      	blx	r3
    i2c_.endTransmission(true);
   dba06:	2101      	movs	r1, #1
   dba08:	6820      	ldr	r0, [r4, #0]
   dba0a:	f000 fe24 	bl	dc656 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   dba0e:	2202      	movs	r2, #2
   dba10:	2136      	movs	r1, #54	; 0x36
   dba12:	2301      	movs	r3, #1
   dba14:	6820      	ldr	r0, [r4, #0]
   dba16:	f000 fe12 	bl	dc63e <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   dba1a:	6820      	ldr	r0, [r4, #0]
   dba1c:	6803      	ldr	r3, [r0, #0]
   dba1e:	695b      	ldr	r3, [r3, #20]
   dba20:	4798      	blx	r3
   dba22:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   dba24:	6820      	ldr	r0, [r4, #0]
   dba26:	6803      	ldr	r3, [r0, #0]
   dba28:	695b      	ldr	r3, [r3, #20]
   dba2a:	4798      	blx	r3
   dba2c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   dba2e:	4620      	mov	r0, r4
}
   dba30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   dba34:	f7ff bfcc 	b.w	db9d0 <_ZN9FuelGauge6unlockEv>

000dba38 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   dba38:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   dba3a:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   dba3c:	2200      	movs	r2, #0
	byte LSB = 0;
   dba3e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   dba42:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   dba46:	2104      	movs	r1, #4
   dba48:	f10d 0206 	add.w	r2, sp, #6
   dba4c:	f7ff ffcb 	bl	db9e6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   dba50:	f89d 0007 	ldrb.w	r0, [sp, #7]
   dba54:	f007 f8de 	bl	e2c14 <__aeabi_i2d>
   dba58:	2200      	movs	r2, #0
   dba5a:	4b09      	ldr	r3, [pc, #36]	; (dba80 <_ZN9FuelGauge6getSoCEv+0x48>)
   dba5c:	f007 f940 	bl	e2ce0 <__aeabi_dmul>
   dba60:	f007 fc36 	bl	e32d0 <__aeabi_d2f>
   dba64:	f89d 3006 	ldrb.w	r3, [sp, #6]
   dba68:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   dba6c:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   dba70:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   dba74:	ee37 0a80 	vadd.f32	s0, s15, s0
   dba78:	b003      	add	sp, #12
   dba7a:	f85d fb04 	ldr.w	pc, [sp], #4
   dba7e:	bf00      	nop
   dba80:	3f700000 	.word	0x3f700000

000dba84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dba84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dba86:	4b0c      	ldr	r3, [pc, #48]	; (dbab8 <serialEventRun+0x34>)
   dba88:	b133      	cbz	r3, dba98 <serialEventRun+0x14>
   dba8a:	f000 fc13 	bl	dc2b4 <_Z16_fetch_usbserialv>
   dba8e:	6803      	ldr	r3, [r0, #0]
   dba90:	691b      	ldr	r3, [r3, #16]
   dba92:	4798      	blx	r3
   dba94:	2800      	cmp	r0, #0
   dba96:	dc09      	bgt.n	dbaac <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dba98:	4b08      	ldr	r3, [pc, #32]	; (dbabc <serialEventRun+0x38>)
   dba9a:	b163      	cbz	r3, dbab6 <serialEventRun+0x32>
   dba9c:	f000 fd38 	bl	dc510 <_Z22__fetch_global_Serial1v>
   dbaa0:	6803      	ldr	r3, [r0, #0]
   dbaa2:	691b      	ldr	r3, [r3, #16]
   dbaa4:	4798      	blx	r3
   dbaa6:	2800      	cmp	r0, #0
   dbaa8:	dc03      	bgt.n	dbab2 <serialEventRun+0x2e>
   dbaaa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dbaac:	f3af 8000 	nop.w
   dbab0:	e7f2      	b.n	dba98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dbab2:	f3af 8000 	nop.w
   dbab6:	bd08      	pop	{r3, pc}
	...

000dbac0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dbac0:	b508      	push	{r3, lr}
	serialEventRun();
   dbac2:	f7ff ffdf 	bl	dba84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dbac6:	f7fe fd15 	bl	da4f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dbaca:	4b01      	ldr	r3, [pc, #4]	; (dbad0 <_post_loop+0x10>)
   dbacc:	6018      	str	r0, [r3, #0]
   dbace:	bd08      	pop	{r3, pc}
   dbad0:	2003e5f8 	.word	0x2003e5f8

000dbad4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dbad4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbad6:	2300      	movs	r3, #0
   dbad8:	9300      	str	r3, [sp, #0]
   dbada:	461a      	mov	r2, r3
   dbadc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbae0:	f7fe ff34 	bl	da94c <system_ctrl_set_result>
}
   dbae4:	b003      	add	sp, #12
   dbae6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbaec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dbaec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dbaee:	8843      	ldrh	r3, [r0, #2]
   dbaf0:	2b0a      	cmp	r3, #10
   dbaf2:	d008      	beq.n	dbb06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dbaf4:	2b50      	cmp	r3, #80	; 0x50
   dbaf6:	d109      	bne.n	dbb0c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dbaf8:	4b09      	ldr	r3, [pc, #36]	; (dbb20 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dbafa:	681b      	ldr	r3, [r3, #0]
   dbafc:	b13b      	cbz	r3, dbb0e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dbafe:	b003      	add	sp, #12
   dbb00:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dbb04:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dbb06:	f7ff ffe5 	bl	dbad4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dbb0a:	e006      	b.n	dbb1a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbb0c:	2300      	movs	r3, #0
   dbb0e:	9300      	str	r3, [sp, #0]
   dbb10:	461a      	mov	r2, r3
   dbb12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbb16:	f7fe ff19 	bl	da94c <system_ctrl_set_result>
        break;
    }
}
   dbb1a:	b003      	add	sp, #12
   dbb1c:	f85d fb04 	ldr.w	pc, [sp], #4
   dbb20:	2003e290 	.word	0x2003e290

000dbb24 <module_user_init_hook>:

void module_user_init_hook()
{
   dbb24:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dbb26:	f7fe fcdd 	bl	da4e4 <HAL_RNG_GetRandomNumber>
   dbb2a:	4604      	mov	r4, r0
    srand(seed);
   dbb2c:	f007 ffd4 	bl	e3ad8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dbb30:	4b07      	ldr	r3, [pc, #28]	; (dbb50 <module_user_init_hook+0x2c>)
   dbb32:	b113      	cbz	r3, dbb3a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   dbb34:	4620      	mov	r0, r4
   dbb36:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dbb3a:	2100      	movs	r1, #0
   dbb3c:	4804      	ldr	r0, [pc, #16]	; (dbb50 <module_user_init_hook+0x2c>)
   dbb3e:	f7fe ff99 	bl	daa74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbb42:	2100      	movs	r1, #0
   dbb44:	4803      	ldr	r0, [pc, #12]	; (dbb54 <module_user_init_hook+0x30>)
}
   dbb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbb4a:	f7fe bef5 	b.w	da938 <system_ctrl_set_app_request_handler>
   dbb4e:	bf00      	nop
   dbb50:	00000000 	.word	0x00000000
   dbb54:	000dbaed 	.word	0x000dbaed

000dbb58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbb58:	4770      	bx	lr

000dbb5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dbb5a:	2000      	movs	r0, #0
   dbb5c:	4770      	bx	lr

000dbb5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbb5e:	b510      	push	{r4, lr}
   dbb60:	2110      	movs	r1, #16
   dbb62:	4604      	mov	r4, r0
   dbb64:	f001 fabb 	bl	dd0de <_ZdlPvj>
   dbb68:	4620      	mov	r0, r4
   dbb6a:	bd10      	pop	{r4, pc}

000dbb6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dbb6c:	b508      	push	{r3, lr}
      { delete this; }
   dbb6e:	b108      	cbz	r0, dbb74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dbb70:	f7ff fff5 	bl	dbb5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dbb74:	bd08      	pop	{r3, pc}

000dbb76 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbb76:	2200      	movs	r2, #0
   dbb78:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dbb7a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbb7c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dbb80:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbb82:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dbb86:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dbb88:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbb8a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dbb8c:	680c      	ldr	r4, [r1, #0]
   dbb8e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dbb90:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dbb92:	bd10      	pop	{r4, pc}

000dbb94 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dbb94:	b510      	push	{r4, lr}
   dbb96:	4604      	mov	r4, r0
    free((void*)msg_);
   dbb98:	6800      	ldr	r0, [r0, #0]
   dbb9a:	f7fe ff7b 	bl	daa94 <free>
}
   dbb9e:	4620      	mov	r0, r4
   dbba0:	bd10      	pop	{r4, pc}

000dbba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dbba2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dbba4:	68c4      	ldr	r4, [r0, #12]
   dbba6:	b1f4      	cbz	r4, dbbe6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dbba8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dbbaa:	2b02      	cmp	r3, #2
   dbbac:	d103      	bne.n	dbbb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dbbae:	f104 000c 	add.w	r0, r4, #12
   dbbb2:	f7ff ffef 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dbbb6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dbbb8:	b135      	cbz	r5, dbbc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbbba:	4628      	mov	r0, r5
   dbbbc:	f7ff fe10 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
   dbbc0:	2110      	movs	r1, #16
   dbbc2:	4628      	mov	r0, r5
   dbbc4:	f001 fa8b 	bl	dd0de <_ZdlPvj>
   dbbc8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dbbca:	b135      	cbz	r5, dbbda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dbbcc:	4628      	mov	r0, r5
   dbbce:	f7ff fe07 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
   dbbd2:	2110      	movs	r1, #16
   dbbd4:	4628      	mov	r0, r5
   dbbd6:	f001 fa82 	bl	dd0de <_ZdlPvj>
   dbbda:	4620      	mov	r0, r4
   dbbdc:	2114      	movs	r1, #20
   dbbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbbe2:	f001 ba7c 	b.w	dd0de <_ZdlPvj>
   dbbe6:	bd38      	pop	{r3, r4, r5, pc}

000dbbe8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dbbe8:	b513      	push	{r0, r1, r4, lr}
   dbbea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dbbec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dbbf0:	2300      	movs	r3, #0
   dbbf2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbbf4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dbbf6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbbf8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbbfa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbbfc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbbfe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbc00:	f7f9 ffb2 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbc04:	4620      	mov	r0, r4
   dbc06:	b002      	add	sp, #8
   dbc08:	bd10      	pop	{r4, pc}

000dbc0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dbc0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbc0c:	460c      	mov	r4, r1
   dbc0e:	ad02      	add	r5, sp, #8
   dbc10:	f854 3b04 	ldr.w	r3, [r4], #4
   dbc14:	f845 3d08 	str.w	r3, [r5, #-8]!
   dbc18:	4606      	mov	r6, r0
   dbc1a:	460f      	mov	r7, r1
   dbc1c:	a801      	add	r0, sp, #4
   dbc1e:	4621      	mov	r1, r4
   dbc20:	f7ff fa54 	bl	db0cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dbc24:	4629      	mov	r1, r5
   dbc26:	4630      	mov	r0, r6
   dbc28:	f7ff ffde 	bl	dbbe8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbc2c:	a801      	add	r0, sp, #4
   dbc2e:	f7f9 ff9b 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbc32:	4620      	mov	r0, r4
   dbc34:	f7f9 ff98 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dbc38:	4638      	mov	r0, r7
   dbc3a:	2108      	movs	r1, #8
   dbc3c:	f001 fa4f 	bl	dd0de <_ZdlPvj>
        return p;
    }
   dbc40:	4630      	mov	r0, r6
   dbc42:	b003      	add	sp, #12
   dbc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dbc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbc48:	b538      	push	{r3, r4, r5, lr}
   dbc4a:	2300      	movs	r3, #0
   dbc4c:	4604      	mov	r4, r0
   dbc4e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbc50:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbc52:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbc54:	f7f8 fa21 	bl	d409a <_Znwj>
   dbc58:	b128      	cbz	r0, dbc66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbc5a:	2301      	movs	r3, #1
   dbc5c:	6043      	str	r3, [r0, #4]
   dbc5e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dbc60:	4b02      	ldr	r3, [pc, #8]	; (dbc6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dbc62:	6003      	str	r3, [r0, #0]
   dbc64:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbc66:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dbc68:	4620      	mov	r0, r4
   dbc6a:	bd38      	pop	{r3, r4, r5, pc}
   dbc6c:	000e7f04 	.word	0x000e7f04

000dbc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbc70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbc72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbc74:	b90a      	cbnz	r2, dbc7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dbc76:	f001 fa34 	bl	dd0e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbc7a:	68c3      	ldr	r3, [r0, #12]
    }
   dbc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbc80:	4718      	bx	r3

000dbc82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbc82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbc84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbc86:	f100 0110 	add.w	r1, r0, #16
   dbc8a:	f7ff fff1 	bl	dbc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbc8e:	bd08      	pop	{r3, pc}

000dbc90 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbc90:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbc92:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbc94:	b90a      	cbnz	r2, dbc9a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dbc96:	f001 fa24 	bl	dd0e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbc9a:	68c3      	ldr	r3, [r0, #12]
    }
   dbc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbca0:	4718      	bx	r3

000dbca2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbca2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbca4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbca6:	f100 0110 	add.w	r1, r0, #16
   dbcaa:	f7ff fff1 	bl	dbc90 <_ZNKSt8functionIFvRKbEEclES1_>
   dbcae:	bd08      	pop	{r3, pc}

000dbcb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbcb0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbcb2:	2300      	movs	r3, #0
   dbcb4:	6083      	str	r3, [r0, #8]
   dbcb6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbcb8:	4604      	mov	r4, r0
   dbcba:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbcbc:	b12b      	cbz	r3, dbcca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbcbe:	2202      	movs	r2, #2
   dbcc0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbcc2:	68eb      	ldr	r3, [r5, #12]
   dbcc4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbcc6:	68ab      	ldr	r3, [r5, #8]
   dbcc8:	60a3      	str	r3, [r4, #8]
	}
    }
   dbcca:	4620      	mov	r0, r4
   dbccc:	bd38      	pop	{r3, r4, r5, pc}
	...

000dbcd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dbcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbcd2:	b089      	sub	sp, #36	; 0x24
   dbcd4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dbcd6:	4668      	mov	r0, sp
   dbcd8:	f7ff ff4d 	bl	dbb76 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dbcdc:	2300      	movs	r3, #0
   dbcde:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dbce2:	f04f 0202 	mov.w	r2, #2
   dbce6:	e8d4 3f4f 	ldrexb	r3, [r4]
   dbcea:	2b00      	cmp	r3, #0
   dbcec:	d103      	bne.n	dbcf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dbcee:	e8c4 2f41 	strexb	r1, r2, [r4]
   dbcf2:	2900      	cmp	r1, #0
   dbcf4:	d1f7      	bne.n	dbce6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dbcf6:	d002      	beq.n	dbcfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dbcf8:	f88d 3008 	strb.w	r3, [sp, #8]
   dbcfc:	e063      	b.n	dbdc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dbcfe:	f114 050c 	adds.w	r5, r4, #12
   dbd02:	d003      	beq.n	dbd0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dbd04:	4669      	mov	r1, sp
   dbd06:	4628      	mov	r0, r5
   dbd08:	f7ff ff35 	bl	dbb76 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dbd0c:	f3bf 8f5f 	dmb	sy
   dbd10:	2301      	movs	r3, #1
   dbd12:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dbd14:	2000      	movs	r0, #0
   dbd16:	f104 0308 	add.w	r3, r4, #8
   dbd1a:	f3bf 8f5f 	dmb	sy
   dbd1e:	e853 6f00 	ldrex	r6, [r3]
   dbd22:	e843 0200 	strex	r2, r0, [r3]
   dbd26:	2a00      	cmp	r2, #0
   dbd28:	d1f9      	bne.n	dbd1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dbd2a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dbd2e:	2e00      	cmp	r6, #0
   dbd30:	d049      	beq.n	dbdc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dbd32:	f7fe fde1 	bl	da8f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dbd36:	b120      	cbz	r0, dbd42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dbd38:	4629      	mov	r1, r5
   dbd3a:	4630      	mov	r0, r6
   dbd3c:	f7ff ff98 	bl	dbc70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbd40:	e03a      	b.n	dbdb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dbd42:	4631      	mov	r1, r6
   dbd44:	a802      	add	r0, sp, #8
   dbd46:	f7ff ffb3 	bl	dbcb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbd4a:	68e0      	ldr	r0, [r4, #12]
   dbd4c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbd50:	b108      	cbz	r0, dbd56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dbd52:	f007 fefb 	bl	e3b4c <strdup>
   dbd56:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dbd58:	2010      	movs	r0, #16
   dbd5a:	f8ad 501c 	strh.w	r5, [sp, #28]
   dbd5e:	f7f8 f99c 	bl	d409a <_Znwj>
   dbd62:	4605      	mov	r5, r0
   dbd64:	b1e8      	cbz	r0, dbda2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbd66:	2700      	movs	r7, #0
   dbd68:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbd6a:	2018      	movs	r0, #24
   dbd6c:	f7f8 f995 	bl	d409a <_Znwj>
   dbd70:	4604      	mov	r4, r0
   dbd72:	b188      	cbz	r0, dbd98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbd74:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbd76:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dbd78:	a802      	add	r0, sp, #8
   dbd7a:	f7ff fd63 	bl	db844 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbd7e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dbd80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dbd82:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbd84:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dbd86:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dbd88:	a906      	add	r1, sp, #24
   dbd8a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dbd8c:	60e3      	str	r3, [r4, #12]
   dbd8e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dbd92:	9205      	str	r2, [sp, #20]
   dbd94:	f7ff feef 	bl	dbb76 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dbd98:	4b0d      	ldr	r3, [pc, #52]	; (dbdd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dbd9a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dbd9c:	4b0d      	ldr	r3, [pc, #52]	; (dbdd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dbd9e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dbda0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dbda2:	a806      	add	r0, sp, #24
   dbda4:	f7ff fef6 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbda8:	a802      	add	r0, sp, #8
   dbdaa:	f7ff fd19 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dbdae:	2200      	movs	r2, #0
   dbdb0:	4629      	mov	r1, r5
   dbdb2:	4809      	ldr	r0, [pc, #36]	; (dbdd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dbdb4:	f7fe fda8 	bl	da908 <application_thread_invoke>
   dbdb8:	4630      	mov	r0, r6
   dbdba:	f7ff fd11 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dbdbe:	2110      	movs	r1, #16
   dbdc0:	4630      	mov	r0, r6
   dbdc2:	f001 f98c 	bl	dd0de <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dbdc6:	4668      	mov	r0, sp
   dbdc8:	f7ff fee4 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
    }
   dbdcc:	b009      	add	sp, #36	; 0x24
   dbdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbdd0:	000dbc83 	.word	0x000dbc83
   dbdd4:	000dbef9 	.word	0x000dbef9
   dbdd8:	000dc55d 	.word	0x000dc55d

000dbddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dbddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbde0:	b08b      	sub	sp, #44	; 0x2c
   dbde2:	4606      	mov	r6, r0
   dbde4:	460f      	mov	r7, r1
   dbde6:	4690      	mov	r8, r2
   dbde8:	4699      	mov	r9, r3
   dbdea:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dbdee:	f7fe fe21 	bl	daa34 <spark_cloud_flag_connected>
   dbdf2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   dbdf4:	4683      	mov	fp, r0
   dbdf6:	bb30      	cbnz	r0, dbe46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbdf8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dbdfc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbdfe:	a905      	add	r1, sp, #20
   dbe00:	4628      	mov	r0, r5
   dbe02:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbe06:	f7ff feb6 	bl	dbb76 <_ZN8particle5ErrorC1EOS0_>
   dbe0a:	2014      	movs	r0, #20
   dbe0c:	f7f8 f945 	bl	d409a <_Znwj>
   dbe10:	4604      	mov	r4, r0
   dbe12:	b158      	cbz	r0, dbe2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dbe14:	2302      	movs	r3, #2
   dbe16:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbe18:	2301      	movs	r3, #1
   dbe1a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbe1c:	f8c0 b004 	str.w	fp, [r0, #4]
   dbe20:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dbe24:	4629      	mov	r1, r5
   dbe26:	300c      	adds	r0, #12
   dbe28:	f7ff fea5 	bl	dbb76 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dbe2c:	4630      	mov	r0, r6
   dbe2e:	4621      	mov	r1, r4
   dbe30:	f840 4b04 	str.w	r4, [r0], #4
   dbe34:	f7ff ff08 	bl	dbc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dbe38:	4628      	mov	r0, r5
   dbe3a:	f7ff feab 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dbe3e:	a805      	add	r0, sp, #20
   dbe40:	f7ff fea8 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
   dbe44:	e052      	b.n	dbeec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dbe46:	2400      	movs	r4, #0
   dbe48:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dbe4a:	2014      	movs	r0, #20
   dbe4c:	606c      	str	r4, [r5, #4]
   dbe4e:	60ac      	str	r4, [r5, #8]
   dbe50:	9307      	str	r3, [sp, #28]
   dbe52:	f7f8 f922 	bl	d409a <_Znwj>
   dbe56:	4601      	mov	r1, r0
   dbe58:	b118      	cbz	r0, dbe62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dbe5a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dbe5c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dbe5e:	6044      	str	r4, [r0, #4]
   dbe60:	6084      	str	r4, [r0, #8]
   dbe62:	a804      	add	r0, sp, #16
   dbe64:	9103      	str	r1, [sp, #12]
   dbe66:	f7ff feef 	bl	dbc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dbe6a:	4b22      	ldr	r3, [pc, #136]	; (dbef4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dbe6c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dbe6e:	2008      	movs	r0, #8
   dbe70:	f7f8 f913 	bl	d409a <_Znwj>
   dbe74:	4604      	mov	r4, r0
   dbe76:	b128      	cbz	r0, dbe84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbe78:	9b03      	ldr	r3, [sp, #12]
   dbe7a:	f840 3b04 	str.w	r3, [r0], #4
   dbe7e:	a904      	add	r1, sp, #16
   dbe80:	f7ff f924 	bl	db0cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbe84:	9500      	str	r5, [sp, #0]
   dbe86:	fa5f f38a 	uxtb.w	r3, sl
   dbe8a:	464a      	mov	r2, r9
   dbe8c:	4641      	mov	r1, r8
   dbe8e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dbe90:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dbe92:	f7fe fdd7 	bl	daa44 <spark_send_event>
   dbe96:	b920      	cbnz	r0, dbea2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dbe98:	9b03      	ldr	r3, [sp, #12]
   dbe9a:	785b      	ldrb	r3, [r3, #1]
   dbe9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dbea0:	b183      	cbz	r3, dbec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dbea2:	9b03      	ldr	r3, [sp, #12]
   dbea4:	9305      	str	r3, [sp, #20]
   dbea6:	a904      	add	r1, sp, #16
   dbea8:	a806      	add	r0, sp, #24
   dbeaa:	f7ff f90f 	bl	db0cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dbeae:	a905      	add	r1, sp, #20
   dbeb0:	4630      	mov	r0, r6
   dbeb2:	f7ff fe99 	bl	dbbe8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbeb6:	a806      	add	r0, sp, #24
   dbeb8:	f7f9 fe56 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbebc:	a804      	add	r0, sp, #16
   dbebe:	f7f9 fe53 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbec2:	e013      	b.n	dbeec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dbec4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dbec8:	a905      	add	r1, sp, #20
   dbeca:	a803      	add	r0, sp, #12
   dbecc:	9205      	str	r2, [sp, #20]
   dbece:	f8ad 3018 	strh.w	r3, [sp, #24]
   dbed2:	f7ff fefd 	bl	dbcd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dbed6:	a805      	add	r0, sp, #20
   dbed8:	f7ff fe5c 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dbedc:	a805      	add	r0, sp, #20
   dbede:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbee0:	f7ff fe93 	bl	dbc0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dbee4:	a806      	add	r0, sp, #24
   dbee6:	f7f9 fe3f 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbeea:	e7da      	b.n	dbea2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   dbeec:	4630      	mov	r0, r6
   dbeee:	b00b      	add	sp, #44	; 0x2c
   dbef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbef4:	000dc069 	.word	0x000dc069

000dbef8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dbef8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dbefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbefc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dbefe:	d006      	beq.n	dbf0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dbf00:	2a03      	cmp	r2, #3
   dbf02:	d017      	beq.n	dbf34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dbf04:	2a01      	cmp	r2, #1
   dbf06:	d122      	bne.n	dbf4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbf08:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dbf0a:	6003      	str	r3, [r0, #0]
	      break;
   dbf0c:	e01f      	b.n	dbf4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbf0e:	2018      	movs	r0, #24
   dbf10:	680e      	ldr	r6, [r1, #0]
   dbf12:	f7f8 f8c2 	bl	d409a <_Znwj>
   dbf16:	4605      	mov	r5, r0
   dbf18:	b150      	cbz	r0, dbf30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dbf1a:	4631      	mov	r1, r6
   dbf1c:	f7ff fec8 	bl	dbcb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dbf20:	6930      	ldr	r0, [r6, #16]
   dbf22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dbf26:	b108      	cbz	r0, dbf2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dbf28:	f007 fe10 	bl	e3b4c <strdup>
   dbf2c:	6128      	str	r0, [r5, #16]
   dbf2e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbf30:	6025      	str	r5, [r4, #0]
   dbf32:	e00c      	b.n	dbf4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbf34:	6804      	ldr	r4, [r0, #0]
   dbf36:	b154      	cbz	r4, dbf4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dbf38:	f104 0010 	add.w	r0, r4, #16
   dbf3c:	f7ff fe2a 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbf40:	4620      	mov	r0, r4
   dbf42:	f7ff fc4d 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbf46:	2118      	movs	r1, #24
   dbf48:	4620      	mov	r0, r4
   dbf4a:	f001 f8c8 	bl	dd0de <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dbf4e:	2000      	movs	r0, #0
   dbf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbf52 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbf52:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbf54:	2300      	movs	r3, #0
   dbf56:	6083      	str	r3, [r0, #8]
   dbf58:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbf5a:	4604      	mov	r4, r0
   dbf5c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbf5e:	b12b      	cbz	r3, dbf6c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbf60:	2202      	movs	r2, #2
   dbf62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbf64:	68eb      	ldr	r3, [r5, #12]
   dbf66:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbf68:	68ab      	ldr	r3, [r5, #8]
   dbf6a:	60a3      	str	r3, [r4, #8]
	}
    }
   dbf6c:	4620      	mov	r0, r4
   dbf6e:	bd38      	pop	{r3, r4, r5, pc}

000dbf70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dbf70:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dbf72:	b570      	push	{r4, r5, r6, lr}
   dbf74:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dbf76:	d006      	beq.n	dbf86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dbf78:	2a03      	cmp	r2, #3
   dbf7a:	d011      	beq.n	dbfa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dbf7c:	2a01      	cmp	r2, #1
   dbf7e:	d118      	bne.n	dbfb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbf80:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dbf82:	6003      	str	r3, [r0, #0]
	      break;
   dbf84:	e015      	b.n	dbfb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbf86:	2014      	movs	r0, #20
   dbf88:	680e      	ldr	r6, [r1, #0]
   dbf8a:	f7f8 f886 	bl	d409a <_Znwj>
   dbf8e:	4605      	mov	r5, r0
   dbf90:	b120      	cbz	r0, dbf9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dbf92:	4631      	mov	r1, r6
   dbf94:	f7ff ffdd 	bl	dbf52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dbf98:	7c33      	ldrb	r3, [r6, #16]
   dbf9a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dbf9c:	6025      	str	r5, [r4, #0]
   dbf9e:	e008      	b.n	dbfb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbfa0:	6804      	ldr	r4, [r0, #0]
   dbfa2:	b134      	cbz	r4, dbfb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbfa4:	4620      	mov	r0, r4
   dbfa6:	f7ff fc1b 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dbfaa:	2114      	movs	r1, #20
   dbfac:	4620      	mov	r0, r4
   dbfae:	f001 f896 	bl	dd0de <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dbfb2:	2000      	movs	r0, #0
   dbfb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbfb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dbfb8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dbfba:	2300      	movs	r3, #0
   dbfbc:	b087      	sub	sp, #28
   dbfbe:	460c      	mov	r4, r1
   dbfc0:	f3bf 8f5f 	dmb	sy
   dbfc4:	e850 6f00 	ldrex	r6, [r0]
   dbfc8:	e840 3200 	strex	r2, r3, [r0]
   dbfcc:	2a00      	cmp	r2, #0
   dbfce:	d1f9      	bne.n	dbfc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dbfd0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dbfd4:	2e00      	cmp	r6, #0
   dbfd6:	d03f      	beq.n	dc058 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dbfd8:	4618      	mov	r0, r3
   dbfda:	f7fe fc8d 	bl	da8f8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dbfde:	4607      	mov	r7, r0
   dbfe0:	b120      	cbz	r0, dbfec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dbfe2:	4621      	mov	r1, r4
   dbfe4:	4630      	mov	r0, r6
   dbfe6:	f7ff fe53 	bl	dbc90 <_ZNKSt8functionIFvRKbEEclES1_>
   dbfea:	e02e      	b.n	dc04a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dbfec:	4631      	mov	r1, r6
   dbfee:	a801      	add	r0, sp, #4
   dbff0:	f7ff ffaf 	bl	dbf52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dbff4:	7823      	ldrb	r3, [r4, #0]
   dbff6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dbffa:	2010      	movs	r0, #16
   dbffc:	f7f8 f84d 	bl	d409a <_Znwj>
   dc000:	4605      	mov	r5, r0
   dc002:	b1d0      	cbz	r0, dc03a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc004:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc006:	2014      	movs	r0, #20
   dc008:	f7f8 f847 	bl	d409a <_Znwj>
   dc00c:	4604      	mov	r4, r0
   dc00e:	b178      	cbz	r0, dc030 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc010:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dc012:	4601      	mov	r1, r0
   dc014:	a801      	add	r0, sp, #4
   dc016:	f7ff fc15 	bl	db844 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc01a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc01c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc01e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc020:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc022:	9203      	str	r2, [sp, #12]
   dc024:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc026:	60e3      	str	r3, [r4, #12]
   dc028:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dc02c:	9204      	str	r2, [sp, #16]
   dc02e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dc030:	4b0a      	ldr	r3, [pc, #40]	; (dc05c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dc032:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc034:	4b0a      	ldr	r3, [pc, #40]	; (dc060 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc036:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dc038:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc03a:	a801      	add	r0, sp, #4
   dc03c:	f7ff fbd0 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc040:	2200      	movs	r2, #0
   dc042:	4629      	mov	r1, r5
   dc044:	4807      	ldr	r0, [pc, #28]	; (dc064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dc046:	f7fe fc5f 	bl	da908 <application_thread_invoke>
   dc04a:	4630      	mov	r0, r6
   dc04c:	f7ff fbc8 	bl	db7e0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dc050:	2110      	movs	r1, #16
   dc052:	4630      	mov	r0, r6
   dc054:	f001 f843 	bl	dd0de <_ZdlPvj>
        }
    }
   dc058:	b007      	add	sp, #28
   dc05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc05c:	000dbca3 	.word	0x000dbca3
   dc060:	000dbf71 	.word	0x000dbf71
   dc064:	000dc55d 	.word	0x000dc55d

000dc068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dc068:	b530      	push	{r4, r5, lr}
   dc06a:	b085      	sub	sp, #20
   dc06c:	4604      	mov	r4, r0
   dc06e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dc070:	4668      	mov	r0, sp
   dc072:	4611      	mov	r1, r2
   dc074:	f7ff fdc9 	bl	dbc0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dc078:	b17c      	cbz	r4, dc09a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dc07a:	b224      	sxth	r4, r4
   dc07c:	4628      	mov	r0, r5
   dc07e:	b10d      	cbz	r5, dc084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dc080:	f007 fd64 	bl	e3b4c <strdup>
   dc084:	9002      	str	r0, [sp, #8]
   dc086:	a902      	add	r1, sp, #8
   dc088:	4668      	mov	r0, sp
   dc08a:	f8ad 400c 	strh.w	r4, [sp, #12]
   dc08e:	f7ff fe1f 	bl	dbcd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc092:	a802      	add	r0, sp, #8
   dc094:	f7ff fd7e 	bl	dbb94 <_ZN8particle5ErrorD1Ev>
   dc098:	e01d      	b.n	dc0d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dc09a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dc09c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dc0a0:	f04f 0201 	mov.w	r2, #1
   dc0a4:	e8d0 3f4f 	ldrexb	r3, [r0]
   dc0a8:	42a3      	cmp	r3, r4
   dc0aa:	d103      	bne.n	dc0b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dc0ac:	e8c0 2f41 	strexb	r1, r2, [r0]
   dc0b0:	2900      	cmp	r1, #0
   dc0b2:	d1f7      	bne.n	dc0a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dc0b4:	d002      	beq.n	dc0bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dc0b6:	f88d 3008 	strb.w	r3, [sp, #8]
   dc0ba:	e00c      	b.n	dc0d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dc0bc:	f110 010c 	adds.w	r1, r0, #12
   dc0c0:	f04f 0301 	mov.w	r3, #1
   dc0c4:	bf18      	it	ne
   dc0c6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dc0c8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dc0cc:	3004      	adds	r0, #4
   dc0ce:	f800 3c03 	strb.w	r3, [r0, #-3]
   dc0d2:	f7ff ff71 	bl	dbfb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dc0d6:	a801      	add	r0, sp, #4
   dc0d8:	f7f9 fd46 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dc0dc:	b005      	add	sp, #20
   dc0de:	bd30      	pop	{r4, r5, pc}

000dc0e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dc0e0:	4770      	bx	lr

000dc0e2 <_ZN9IPAddressD0Ev>:
   dc0e2:	b510      	push	{r4, lr}
   dc0e4:	2118      	movs	r1, #24
   dc0e6:	4604      	mov	r4, r0
   dc0e8:	f000 fff9 	bl	dd0de <_ZdlPvj>
   dc0ec:	4620      	mov	r0, r4
   dc0ee:	bd10      	pop	{r4, pc}

000dc0f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dc0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dc0f2:	7d03      	ldrb	r3, [r0, #20]
   dc0f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dc0f6:	b08d      	sub	sp, #52	; 0x34
   dc0f8:	460e      	mov	r6, r1
   dc0fa:	f100 0704 	add.w	r7, r0, #4
   dc0fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dc102:	d002      	beq.n	dc10a <_ZNK9IPAddress7printToER5Print+0x1a>
   dc104:	f100 0508 	add.w	r5, r0, #8
   dc108:	e018      	b.n	dc13c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dc10a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dc10c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dc10e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dc112:	232f      	movs	r3, #47	; 0x2f
   dc114:	462a      	mov	r2, r5
   dc116:	200a      	movs	r0, #10
   dc118:	f7fe fa44 	bl	da5a4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dc11c:	4628      	mov	r0, r5
   dc11e:	f008 fa45 	bl	e45ac <strlen>
   dc122:	6833      	ldr	r3, [r6, #0]
   dc124:	4602      	mov	r2, r0
   dc126:	68db      	ldr	r3, [r3, #12]
   dc128:	4629      	mov	r1, r5
   dc12a:	4630      	mov	r0, r6
   dc12c:	4798      	blx	r3
   dc12e:	e00f      	b.n	dc150 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dc130:	b124      	cbz	r4, dc13c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dc132:	212e      	movs	r1, #46	; 0x2e
   dc134:	4630      	mov	r0, r6
   dc136:	f7ff f803 	bl	db140 <_ZN5Print5printEc>
   dc13a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   dc13c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dc140:	220a      	movs	r2, #10
   dc142:	4630      	mov	r0, r6
   dc144:	f7ff f842 	bl	db1cc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc148:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc14a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dc14c:	d1f0      	bne.n	dc130 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dc14e:	4620      	mov	r0, r4
    }
    return n;
}
   dc150:	b00d      	add	sp, #52	; 0x34
   dc152:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc154 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dc154:	b510      	push	{r4, lr}
   dc156:	4b05      	ldr	r3, [pc, #20]	; (dc16c <_ZN9IPAddressC1Ev+0x18>)
   dc158:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dc15a:	2211      	movs	r2, #17
   dc15c:	f840 3b04 	str.w	r3, [r0], #4
   dc160:	2100      	movs	r1, #0
   dc162:	f007 fa62 	bl	e362a <memset>
{
    clear();
}
   dc166:	4620      	mov	r0, r4
   dc168:	bd10      	pop	{r4, pc}
   dc16a:	bf00      	nop
   dc16c:	000e7f20 	.word	0x000e7f20

000dc170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dc170:	4603      	mov	r3, r0
   dc172:	4a07      	ldr	r2, [pc, #28]	; (dc190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dc174:	b510      	push	{r4, lr}
   dc176:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dc17a:	f101 0210 	add.w	r2, r1, #16
   dc17e:	f851 4b04 	ldr.w	r4, [r1], #4
   dc182:	f843 4b04 	str.w	r4, [r3], #4
   dc186:	4291      	cmp	r1, r2
   dc188:	d1f9      	bne.n	dc17e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dc18a:	780a      	ldrb	r2, [r1, #0]
   dc18c:	701a      	strb	r2, [r3, #0]
}
   dc18e:	bd10      	pop	{r4, pc}
   dc190:	000e7f20 	.word	0x000e7f20

000dc194 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dc194:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dc196:	2b04      	cmp	r3, #4
   dc198:	d101      	bne.n	dc19e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dc19a:	6840      	ldr	r0, [r0, #4]
   dc19c:	e008      	b.n	dc1b0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dc19e:	2b06      	cmp	r3, #6
   dc1a0:	d10a      	bne.n	dc1b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc1a2:	6843      	ldr	r3, [r0, #4]
   dc1a4:	b953      	cbnz	r3, dc1bc <_ZNK9IPAddresscvbEv+0x28>
   dc1a6:	6883      	ldr	r3, [r0, #8]
   dc1a8:	b943      	cbnz	r3, dc1bc <_ZNK9IPAddresscvbEv+0x28>
   dc1aa:	68c3      	ldr	r3, [r0, #12]
   dc1ac:	b933      	cbnz	r3, dc1bc <_ZNK9IPAddresscvbEv+0x28>
   dc1ae:	6900      	ldr	r0, [r0, #16]
   dc1b0:	3000      	adds	r0, #0
   dc1b2:	bf18      	it	ne
   dc1b4:	2001      	movne	r0, #1
   dc1b6:	4770      	bx	lr
    } else {
        return false;
   dc1b8:	2000      	movs	r0, #0
   dc1ba:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dc1bc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dc1be:	4770      	bx	lr

000dc1c0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dc1c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dc1c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dc1c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dc1ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dc1ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dc1d2:	2304      	movs	r3, #4
   dc1d4:	6041      	str	r1, [r0, #4]
   dc1d6:	7503      	strb	r3, [r0, #20]
   dc1d8:	bd10      	pop	{r4, pc}

000dc1da <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dc1da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dc1dc:	780d      	ldrb	r5, [r1, #0]
   dc1de:	788b      	ldrb	r3, [r1, #2]
   dc1e0:	784a      	ldrb	r2, [r1, #1]
   dc1e2:	78c9      	ldrb	r1, [r1, #3]
   dc1e4:	9100      	str	r1, [sp, #0]
   dc1e6:	4629      	mov	r1, r5
   dc1e8:	f7ff ffea 	bl	dc1c0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dc1ec:	b003      	add	sp, #12
   dc1ee:	bd30      	pop	{r4, r5, pc}

000dc1f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc1f0:	7441      	strb	r1, [r0, #17]
   dc1f2:	4770      	bx	lr

000dc1f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dc1f4:	4770      	bx	lr

000dc1f6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dc1f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dc1f8:	2100      	movs	r1, #0
   dc1fa:	7c00      	ldrb	r0, [r0, #16]
   dc1fc:	f7fe fb0a 	bl	da814 <HAL_USB_USART_Receive_Data>
}
   dc200:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc204:	bf28      	it	cs
   dc206:	f04f 30ff 	movcs.w	r0, #4294967295
   dc20a:	bd08      	pop	{r3, pc}

000dc20c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dc20c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dc20e:	2101      	movs	r1, #1
   dc210:	7c00      	ldrb	r0, [r0, #16]
   dc212:	f7fe faff 	bl	da814 <HAL_USB_USART_Receive_Data>
}
   dc216:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc21a:	bf28      	it	cs
   dc21c:	f04f 30ff 	movcs.w	r0, #4294967295
   dc220:	bd08      	pop	{r3, pc}

000dc222 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dc222:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dc224:	7c00      	ldrb	r0, [r0, #16]
   dc226:	f7fe faed 	bl	da804 <HAL_USB_USART_Available_Data_For_Write>
}
   dc22a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc22e:	bd08      	pop	{r3, pc}

000dc230 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dc230:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dc232:	7c00      	ldrb	r0, [r0, #16]
   dc234:	f7fe fade 	bl	da7f4 <HAL_USB_USART_Available_Data>
}
   dc238:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc23c:	bd08      	pop	{r3, pc}

000dc23e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dc23e:	7c00      	ldrb	r0, [r0, #16]
   dc240:	f7fe baf8 	b.w	da834 <HAL_USB_USART_Flush_Data>

000dc244 <_ZN9USBSerialD0Ev>:
   dc244:	b510      	push	{r4, lr}
   dc246:	2114      	movs	r1, #20
   dc248:	4604      	mov	r4, r0
   dc24a:	f000 ff48 	bl	dd0de <_ZdlPvj>
   dc24e:	4620      	mov	r0, r4
   dc250:	bd10      	pop	{r4, pc}

000dc252 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc252:	b538      	push	{r3, r4, r5, lr}
   dc254:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc256:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dc258:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dc25a:	f7fe fad3 	bl	da804 <HAL_USB_USART_Available_Data_For_Write>
   dc25e:	2800      	cmp	r0, #0
   dc260:	dc01      	bgt.n	dc266 <_ZN9USBSerial5writeEh+0x14>
   dc262:	7c60      	ldrb	r0, [r4, #17]
   dc264:	b128      	cbz	r0, dc272 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dc266:	4629      	mov	r1, r5
   dc268:	7c20      	ldrb	r0, [r4, #16]
   dc26a:	f7fe fadb 	bl	da824 <HAL_USB_USART_Send_Data>
   dc26e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dc272:	bd38      	pop	{r3, r4, r5, pc}

000dc274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc274:	b510      	push	{r4, lr}
   dc276:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dc278:	2300      	movs	r3, #0
   dc27a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dc27c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc280:	60a3      	str	r3, [r4, #8]
   dc282:	4b05      	ldr	r3, [pc, #20]	; (dc298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dc284:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dc286:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dc288:	4608      	mov	r0, r1
{
  _serial = serial;
   dc28a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dc28c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dc28e:	4611      	mov	r1, r2
   dc290:	f7fe faa0 	bl	da7d4 <HAL_USB_USART_Init>
}
   dc294:	4620      	mov	r0, r4
   dc296:	bd10      	pop	{r4, pc}
   dc298:	000e7f34 	.word	0x000e7f34

000dc29c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dc29c:	2200      	movs	r2, #0
   dc29e:	7c00      	ldrb	r0, [r0, #16]
   dc2a0:	f7fe baa0 	b.w	da7e4 <HAL_USB_USART_Begin>

000dc2a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc2a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dc2a6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dc2a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dc2aa:	2100      	movs	r1, #0
   dc2ac:	f007 f9bd 	bl	e362a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dc2b0:	4620      	mov	r0, r4
   dc2b2:	bd10      	pop	{r4, pc}

000dc2b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dc2b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc2b6:	4d0e      	ldr	r5, [pc, #56]	; (dc2f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dc2b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dc2ba:	a801      	add	r0, sp, #4
   dc2bc:	f7ff fff2 	bl	dc2a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dc2c0:	6829      	ldr	r1, [r5, #0]
   dc2c2:	f011 0401 	ands.w	r4, r1, #1
   dc2c6:	d110      	bne.n	dc2ea <_Z16_fetch_usbserialv+0x36>
   dc2c8:	4628      	mov	r0, r5
   dc2ca:	f7f7 feec 	bl	d40a6 <__cxa_guard_acquire>
   dc2ce:	b160      	cbz	r0, dc2ea <_Z16_fetch_usbserialv+0x36>
   dc2d0:	aa01      	add	r2, sp, #4
   dc2d2:	4621      	mov	r1, r4
   dc2d4:	4807      	ldr	r0, [pc, #28]	; (dc2f4 <_Z16_fetch_usbserialv+0x40>)
   dc2d6:	f7ff ffcd 	bl	dc274 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dc2da:	4628      	mov	r0, r5
   dc2dc:	f7f7 fee8 	bl	d40b0 <__cxa_guard_release>
   dc2e0:	4a05      	ldr	r2, [pc, #20]	; (dc2f8 <_Z16_fetch_usbserialv+0x44>)
   dc2e2:	4906      	ldr	r1, [pc, #24]	; (dc2fc <_Z16_fetch_usbserialv+0x48>)
   dc2e4:	4803      	ldr	r0, [pc, #12]	; (dc2f4 <_Z16_fetch_usbserialv+0x40>)
   dc2e6:	f000 fef5 	bl	dd0d4 <__aeabi_atexit>
	return _usbserial;
}
   dc2ea:	4802      	ldr	r0, [pc, #8]	; (dc2f4 <_Z16_fetch_usbserialv+0x40>)
   dc2ec:	b007      	add	sp, #28
   dc2ee:	bd30      	pop	{r4, r5, pc}
   dc2f0:	2003e294 	.word	0x2003e294
   dc2f4:	2003e298 	.word	0x2003e298
   dc2f8:	2003d670 	.word	0x2003d670
   dc2fc:	000dc1f5 	.word	0x000dc1f5

000dc300 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dc300:	4700      	bx	r0
	...

000dc304 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dc304:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc306:	b085      	sub	sp, #20
   dc308:	461c      	mov	r4, r3
   dc30a:	460e      	mov	r6, r1
   dc30c:	4617      	mov	r7, r2
   dc30e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   dc310:	f7fe f8a8 	bl	da464 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   dc314:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   dc316:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc318:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dc31c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc31e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dc322:	bfa5      	ittet	ge
   dc324:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dc328:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dc32c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dc32e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc330:	9300      	str	r3, [sp, #0]
   dc332:	4632      	mov	r2, r6
   dc334:	463b      	mov	r3, r7
   dc336:	4906      	ldr	r1, [pc, #24]	; (dc350 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dc338:	bfa8      	it	ge
   dc33a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc33e:	4628      	mov	r0, r5
   dc340:	f7fe f888 	bl	da454 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dc344:	fab0 f080 	clz	r0, r0
   dc348:	0940      	lsrs	r0, r0, #5
   dc34a:	b005      	add	sp, #20
   dc34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc34e:	bf00      	nop
   dc350:	000dc301 	.word	0x000dc301

000dc354 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dc354:	2200      	movs	r2, #0
   dc356:	4611      	mov	r1, r2
   dc358:	6840      	ldr	r0, [r0, #4]
   dc35a:	f7fe bb43 	b.w	da9e4 <network_listening>

000dc35e <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dc35e:	2200      	movs	r2, #0
   dc360:	4611      	mov	r1, r2
   dc362:	6840      	ldr	r0, [r0, #4]
   dc364:	f7fe bb4e 	b.w	daa04 <network_get_listen_timeout>

000dc368 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dc368:	2200      	movs	r2, #0
   dc36a:	6840      	ldr	r0, [r0, #4]
   dc36c:	f7fe bb42 	b.w	da9f4 <network_set_listen_timeout>

000dc370 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dc370:	2200      	movs	r2, #0
   dc372:	f081 0101 	eor.w	r1, r1, #1
   dc376:	6840      	ldr	r0, [r0, #4]
   dc378:	f7fe bb2c 	b.w	da9d4 <network_listen>

000dc37c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   dc37c:	2300      	movs	r3, #0
   dc37e:	461a      	mov	r2, r3
   dc380:	4619      	mov	r1, r3
   dc382:	6840      	ldr	r0, [r0, #4]
   dc384:	f7fe bb1e 	b.w	da9c4 <network_off>

000dc388 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dc388:	2200      	movs	r2, #0
   dc38a:	4611      	mov	r1, r2
   dc38c:	6840      	ldr	r0, [r0, #4]
   dc38e:	f7fe baf9 	b.w	da984 <network_connecting>

000dc392 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc392:	2200      	movs	r2, #0
   dc394:	2102      	movs	r1, #2
   dc396:	6840      	ldr	r0, [r0, #4]
   dc398:	f7fe bafc 	b.w	da994 <network_disconnect>

000dc39c <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dc39c:	2300      	movs	r3, #0
   dc39e:	461a      	mov	r2, r3
   dc3a0:	6840      	ldr	r0, [r0, #4]
   dc3a2:	f7fe bae7 	b.w	da974 <network_connect>
	...

000dc3a8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   dc3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   dc3aa:	4b1b      	ldr	r3, [pc, #108]	; (dc418 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   dc3ac:	6003      	str	r3, [r0, #0]
   dc3ae:	2500      	movs	r5, #0
   dc3b0:	460f      	mov	r7, r1
   dc3b2:	3328      	adds	r3, #40	; 0x28
   dc3b4:	2618      	movs	r6, #24
   dc3b6:	b089      	sub	sp, #36	; 0x24
   dc3b8:	6043      	str	r3, [r0, #4]
   dc3ba:	6085      	str	r5, [r0, #8]
   dc3bc:	60c5      	str	r5, [r0, #12]
   dc3be:	4632      	mov	r2, r6
   dc3c0:	4629      	mov	r1, r5
   dc3c2:	4604      	mov	r4, r0
   dc3c4:	3010      	adds	r0, #16
   dc3c6:	f007 f930 	bl	e362a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dc3ca:	462a      	mov	r2, r5
   dc3cc:	4629      	mov	r1, r5
   dc3ce:	6878      	ldr	r0, [r7, #4]
   dc3d0:	f7fe fae8 	bl	da9a4 <network_ready>
   dc3d4:	b908      	cbnz	r0, dc3da <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   dc3d6:	60a0      	str	r0, [r4, #8]
            return sig;
   dc3d8:	e01b      	b.n	dc412 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   dc3da:	4629      	mov	r1, r5
   dc3dc:	4632      	mov	r2, r6
   dc3de:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   dc3e0:	9500      	str	r5, [sp, #0]
   dc3e2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   dc3e4:	f007 f921 	bl	e362a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dc3e8:	a902      	add	r1, sp, #8
   dc3ea:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   dc3ec:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dc3f0:	f7fe f9e8 	bl	da7c4 <cellular_signal>
   dc3f4:	b110      	cbz	r0, dc3fc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   dc3f6:	2301      	movs	r3, #1
   dc3f8:	60a3      	str	r3, [r4, #8]
            return sig;
   dc3fa:	e00a      	b.n	dc412 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   dc3fc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   dc3fe:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   dc400:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   dc402:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   dc404:	b90b      	cbnz	r3, dc40a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   dc406:	2302      	movs	r3, #2
   dc408:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   dc40a:	a902      	add	r1, sp, #8
   dc40c:	4620      	mov	r0, r4
   dc40e:	f7ff fabb 	bl	db988 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   dc412:	4620      	mov	r0, r4
   dc414:	b009      	add	sp, #36	; 0x24
   dc416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc418:	000e7ed0 	.word	0x000e7ed0

000dc41c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dc41c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dc41e:	4c08      	ldr	r4, [pc, #32]	; (dc440 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   dc420:	2528      	movs	r5, #40	; 0x28
   dc422:	462a      	mov	r2, r5
   dc424:	2100      	movs	r1, #0
   dc426:	4620      	mov	r0, r4
   dc428:	f007 f8ff 	bl	e362a <memset>
        cid = -1;
   dc42c:	f04f 33ff 	mov.w	r3, #4294967295
   dc430:	6063      	str	r3, [r4, #4]
   dc432:	4b04      	ldr	r3, [pc, #16]	; (dc444 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   dc434:	8025      	strh	r5, [r4, #0]
   dc436:	2204      	movs	r2, #4
   dc438:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dc43a:	4a03      	ldr	r2, [pc, #12]	; (dc448 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dc43c:	601a      	str	r2, [r3, #0]
   dc43e:	bd38      	pop	{r3, r4, r5, pc}
   dc440:	2003e2b4 	.word	0x2003e2b4
   dc444:	2003e2ac 	.word	0x2003e2ac
   dc448:	000e7f64 	.word	0x000e7f64

000dc44c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dc44c:	4770      	bx	lr

000dc44e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dc44e:	7441      	strb	r1, [r0, #17]
   dc450:	4770      	bx	lr

000dc452 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dc452:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dc454:	7c00      	ldrb	r0, [r0, #16]
   dc456:	f7fe f8f5 	bl	da644 <HAL_USART_Available_Data_For_Write>
}
   dc45a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc45e:	bd08      	pop	{r3, pc}

000dc460 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dc460:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dc462:	7c00      	ldrb	r0, [r0, #16]
   dc464:	f7fe f8c6 	bl	da5f4 <HAL_USART_Available_Data>
}
   dc468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dc46c:	bd08      	pop	{r3, pc}

000dc46e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dc46e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dc470:	7c00      	ldrb	r0, [r0, #16]
   dc472:	f7fe f8cf 	bl	da614 <HAL_USART_Peek_Data>
}
   dc476:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc47a:	bf28      	it	cs
   dc47c:	f04f 30ff 	movcs.w	r0, #4294967295
   dc480:	bd08      	pop	{r3, pc}

000dc482 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dc482:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dc484:	7c00      	ldrb	r0, [r0, #16]
   dc486:	f7fe f8bd 	bl	da604 <HAL_USART_Read_Data>
}
   dc48a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dc48e:	bf28      	it	cs
   dc490:	f04f 30ff 	movcs.w	r0, #4294967295
   dc494:	bd08      	pop	{r3, pc}

000dc496 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dc496:	7c00      	ldrb	r0, [r0, #16]
   dc498:	f7fe b8c4 	b.w	da624 <HAL_USART_Flush_Data>

000dc49c <_ZN11USARTSerialD0Ev>:
   dc49c:	b510      	push	{r4, lr}
   dc49e:	2114      	movs	r1, #20
   dc4a0:	4604      	mov	r4, r0
   dc4a2:	f000 fe1c 	bl	dd0de <_ZdlPvj>
   dc4a6:	4620      	mov	r0, r4
   dc4a8:	bd10      	pop	{r4, pc}

000dc4aa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dc4aa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc4ac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dc4ae:	4604      	mov	r4, r0
   dc4b0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dc4b2:	b925      	cbnz	r5, dc4be <_ZN11USARTSerial5writeEh+0x14>
   dc4b4:	7c00      	ldrb	r0, [r0, #16]
   dc4b6:	f7fe f8c5 	bl	da644 <HAL_USART_Available_Data_For_Write>
   dc4ba:	2800      	cmp	r0, #0
   dc4bc:	dd05      	ble.n	dc4ca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc4be:	4631      	mov	r1, r6
   dc4c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dc4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dc4c6:	f7fe b88d 	b.w	da5e4 <HAL_USART_Write_Data>
  }
  return 0;
}
   dc4ca:	4628      	mov	r0, r5
   dc4cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc4d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dc4d0:	b510      	push	{r4, lr}
   dc4d2:	4604      	mov	r4, r0
   dc4d4:	4608      	mov	r0, r1
   dc4d6:	4611      	mov	r1, r2
   dc4d8:	2200      	movs	r2, #0
   dc4da:	6062      	str	r2, [r4, #4]
   dc4dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc4e0:	60a2      	str	r2, [r4, #8]
   dc4e2:	4a05      	ldr	r2, [pc, #20]	; (dc4f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dc4e4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dc4e6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dc4e8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dc4ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dc4ec:	461a      	mov	r2, r3
   dc4ee:	f7fe f871 	bl	da5d4 <HAL_USART_Init>
}
   dc4f2:	4620      	mov	r0, r4
   dc4f4:	bd10      	pop	{r4, pc}
   dc4f6:	bf00      	nop
   dc4f8:	000e7f98 	.word	0x000e7f98

000dc4fc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dc4fc:	2300      	movs	r3, #0
   dc4fe:	7c00      	ldrb	r0, [r0, #16]
   dc500:	f7fe b8a8 	b.w	da654 <HAL_USART_BeginConfig>

000dc504 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dc504:	2200      	movs	r2, #0
   dc506:	f7ff bff9 	b.w	dc4fc <_ZN11USARTSerial5beginEmm>

000dc50a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dc50a:	7c00      	ldrb	r0, [r0, #16]
   dc50c:	f7fe b892 	b.w	da634 <HAL_USART_Is_Enabled>

000dc510 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dc510:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dc512:	4d0c      	ldr	r5, [pc, #48]	; (dc544 <_Z22__fetch_global_Serial1v+0x34>)
   dc514:	6829      	ldr	r1, [r5, #0]
   dc516:	f011 0401 	ands.w	r4, r1, #1
   dc51a:	d111      	bne.n	dc540 <_Z22__fetch_global_Serial1v+0x30>
   dc51c:	4628      	mov	r0, r5
   dc51e:	f7f7 fdc2 	bl	d40a6 <__cxa_guard_acquire>
   dc522:	b168      	cbz	r0, dc540 <_Z22__fetch_global_Serial1v+0x30>
   dc524:	4a08      	ldr	r2, [pc, #32]	; (dc548 <_Z22__fetch_global_Serial1v+0x38>)
   dc526:	4b09      	ldr	r3, [pc, #36]	; (dc54c <_Z22__fetch_global_Serial1v+0x3c>)
   dc528:	4809      	ldr	r0, [pc, #36]	; (dc550 <_Z22__fetch_global_Serial1v+0x40>)
   dc52a:	4621      	mov	r1, r4
   dc52c:	f7ff ffd0 	bl	dc4d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dc530:	4628      	mov	r0, r5
   dc532:	f7f7 fdbd 	bl	d40b0 <__cxa_guard_release>
   dc536:	4a07      	ldr	r2, [pc, #28]	; (dc554 <_Z22__fetch_global_Serial1v+0x44>)
   dc538:	4907      	ldr	r1, [pc, #28]	; (dc558 <_Z22__fetch_global_Serial1v+0x48>)
   dc53a:	4805      	ldr	r0, [pc, #20]	; (dc550 <_Z22__fetch_global_Serial1v+0x40>)
   dc53c:	f000 fdca 	bl	dd0d4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dc540:	4803      	ldr	r0, [pc, #12]	; (dc550 <_Z22__fetch_global_Serial1v+0x40>)
   dc542:	bd38      	pop	{r3, r4, r5, pc}
   dc544:	2003e374 	.word	0x2003e374
   dc548:	2003e378 	.word	0x2003e378
   dc54c:	2003e2f0 	.word	0x2003e2f0
   dc550:	2003e2dc 	.word	0x2003e2dc
   dc554:	2003d670 	.word	0x2003d670
   dc558:	000dc44d 	.word	0x000dc44d

000dc55c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dc55c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc55e:	6883      	ldr	r3, [r0, #8]
   dc560:	4604      	mov	r4, r0
   dc562:	b90b      	cbnz	r3, dc568 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dc564:	f000 fdbd 	bl	dd0e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc568:	68c3      	ldr	r3, [r0, #12]
   dc56a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc56c:	68a3      	ldr	r3, [r4, #8]
   dc56e:	b11b      	cbz	r3, dc578 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc570:	2203      	movs	r2, #3
   dc572:	4621      	mov	r1, r4
   dc574:	4620      	mov	r0, r4
   dc576:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc578:	4620      	mov	r0, r4
   dc57a:	2110      	movs	r1, #16
}
   dc57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dc580:	f000 bdad 	b.w	dd0de <_ZdlPvj>

000dc584 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   dc584:	4770      	bx	lr

000dc586 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dc586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc588:	4606      	mov	r6, r0
   dc58a:	4615      	mov	r5, r2
   dc58c:	460c      	mov	r4, r1
   dc58e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc590:	42bc      	cmp	r4, r7
   dc592:	d006      	beq.n	dc5a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dc594:	6833      	ldr	r3, [r6, #0]
   dc596:	f814 1b01 	ldrb.w	r1, [r4], #1
   dc59a:	689b      	ldr	r3, [r3, #8]
   dc59c:	4630      	mov	r0, r6
   dc59e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dc5a0:	e7f6      	b.n	dc590 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dc5a2:	4628      	mov	r0, r5
   dc5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc5a6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dc5a6:	2200      	movs	r2, #0
   dc5a8:	7c00      	ldrb	r0, [r0, #16]
   dc5aa:	f7fe b88b 	b.w	da6c4 <HAL_I2C_Write_Data>

000dc5ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dc5ae:	2100      	movs	r1, #0
   dc5b0:	7c00      	ldrb	r0, [r0, #16]
   dc5b2:	f7fe b88f 	b.w	da6d4 <HAL_I2C_Available_Data>

000dc5b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dc5b6:	2100      	movs	r1, #0
   dc5b8:	7c00      	ldrb	r0, [r0, #16]
   dc5ba:	f7fe b893 	b.w	da6e4 <HAL_I2C_Read_Data>

000dc5be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dc5be:	2100      	movs	r1, #0
   dc5c0:	7c00      	ldrb	r0, [r0, #16]
   dc5c2:	f7fe b897 	b.w	da6f4 <HAL_I2C_Peek_Data>

000dc5c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dc5c6:	2100      	movs	r1, #0
   dc5c8:	7c00      	ldrb	r0, [r0, #16]
   dc5ca:	f7fe b89b 	b.w	da704 <HAL_I2C_Flush_Data>

000dc5ce <_ZN7TwoWireD0Ev>:
   dc5ce:	b510      	push	{r4, lr}
   dc5d0:	2114      	movs	r1, #20
   dc5d2:	4604      	mov	r4, r0
   dc5d4:	f000 fd83 	bl	dd0de <_ZdlPvj>
   dc5d8:	4620      	mov	r0, r4
   dc5da:	bd10      	pop	{r4, pc}

000dc5dc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   dc5dc:	b510      	push	{r4, lr}
   dc5de:	4604      	mov	r4, r0
   dc5e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc5e4:	4608      	mov	r0, r1
   dc5e6:	60a3      	str	r3, [r4, #8]
   dc5e8:	2100      	movs	r1, #0
   dc5ea:	4b04      	ldr	r3, [pc, #16]	; (dc5fc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   dc5ec:	7420      	strb	r0, [r4, #16]
   dc5ee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   dc5f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   dc5f2:	f7fe f897 	bl	da724 <HAL_I2C_Init>

}
   dc5f6:	4620      	mov	r0, r4
   dc5f8:	bd10      	pop	{r4, pc}
   dc5fa:	bf00      	nop
   dc5fc:	000e7fc8 	.word	0x000e7fc8

000dc600 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   dc600:	2200      	movs	r2, #0
   dc602:	7c00      	ldrb	r0, [r0, #16]
   dc604:	f7fe b82e 	b.w	da664 <HAL_I2C_Set_Speed>

000dc608 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dc608:	2300      	movs	r3, #0
   dc60a:	461a      	mov	r2, r3
   dc60c:	4619      	mov	r1, r3
   dc60e:	7c00      	ldrb	r0, [r0, #16]
   dc610:	f7fe b830 	b.w	da674 <HAL_I2C_Begin>

000dc614 <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   dc614:	2100      	movs	r1, #0
   dc616:	7c00      	ldrb	r0, [r0, #16]
   dc618:	f7fe b834 	b.w	da684 <HAL_I2C_End>

000dc61c <_ZN7TwoWire11requestFromEhhh>:
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   dc61c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   dc61e:	2400      	movs	r4, #0
   dc620:	7c00      	ldrb	r0, [r0, #16]
   dc622:	9400      	str	r4, [sp, #0]
   dc624:	f7fe f836 	bl	da694 <HAL_I2C_Request_Data>
  return result;
}
   dc628:	b2c0      	uxtb	r0, r0
   dc62a:	b002      	add	sp, #8
   dc62c:	bd10      	pop	{r4, pc}

000dc62e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   dc62e:	2301      	movs	r3, #1
   dc630:	f7ff bff4 	b.w	dc61c <_ZN7TwoWire11requestFromEhhh>

000dc634 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   dc634:	2301      	movs	r3, #1
   dc636:	b2d2      	uxtb	r2, r2
   dc638:	b2c9      	uxtb	r1, r1
   dc63a:	f7ff bfef 	b.w	dc61c <_ZN7TwoWire11requestFromEhhh>

000dc63e <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   dc63e:	b2db      	uxtb	r3, r3
   dc640:	b2d2      	uxtb	r2, r2
   dc642:	b2c9      	uxtb	r1, r1
   dc644:	f7ff bfea 	b.w	dc61c <_ZN7TwoWire11requestFromEhhh>

000dc648 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   dc648:	2200      	movs	r2, #0
   dc64a:	7c00      	ldrb	r0, [r0, #16]
   dc64c:	f7fe b82a 	b.w	da6a4 <HAL_I2C_Begin_Transmission>

000dc650 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   dc650:	b2c9      	uxtb	r1, r1
   dc652:	f7ff bff9 	b.w	dc648 <_ZN7TwoWire17beginTransmissionEh>

000dc656 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   dc656:	2200      	movs	r2, #0
   dc658:	7c00      	ldrb	r0, [r0, #16]
   dc65a:	f7fe b82b 	b.w	da6b4 <HAL_I2C_End_Transmission>

000dc65e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   dc65e:	2101      	movs	r1, #1
   dc660:	f7ff bff9 	b.w	dc656 <_ZN7TwoWire15endTransmissionEh>

000dc664 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dc664:	2100      	movs	r1, #0
   dc666:	7c00      	ldrb	r0, [r0, #16]
   dc668:	f7fe b854 	b.w	da714 <HAL_I2C_Is_Enabled>

000dc66c <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   dc66c:	2200      	movs	r2, #0
   dc66e:	4611      	mov	r1, r2
   dc670:	7c00      	ldrb	r0, [r0, #16]
   dc672:	f7fe b85f 	b.w	da734 <HAL_I2C_Reset>

000dc676 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   dc676:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   dc678:	2100      	movs	r1, #0
   dc67a:	7c00      	ldrb	r0, [r0, #16]
   dc67c:	f7fe f862 	bl	da744 <HAL_I2C_Acquire>
}
   dc680:	fab0 f080 	clz	r0, r0
   dc684:	0940      	lsrs	r0, r0, #5
   dc686:	bd08      	pop	{r3, pc}

000dc688 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dc688:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   dc68a:	2100      	movs	r1, #0
   dc68c:	7c00      	ldrb	r0, [r0, #16]
   dc68e:	f7fe f861 	bl	da754 <HAL_I2C_Release>
}
   dc692:	fab0 f080 	clz	r0, r0
   dc696:	0940      	lsrs	r0, r0, #5
   dc698:	bd08      	pop	{r3, pc}

000dc69a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dc69a:	2200      	movs	r2, #0
   dc69c:	4611      	mov	r1, r2
   dc69e:	6840      	ldr	r0, [r0, #4]
   dc6a0:	f7fe b9a0 	b.w	da9e4 <network_listening>

000dc6a4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dc6a4:	2200      	movs	r2, #0
   dc6a6:	4611      	mov	r1, r2
   dc6a8:	6840      	ldr	r0, [r0, #4]
   dc6aa:	f7fe b9ab 	b.w	daa04 <network_get_listen_timeout>

000dc6ae <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dc6ae:	2200      	movs	r2, #0
   dc6b0:	6840      	ldr	r0, [r0, #4]
   dc6b2:	f7fe b99f 	b.w	da9f4 <network_set_listen_timeout>

000dc6b6 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dc6b6:	2200      	movs	r2, #0
   dc6b8:	f081 0101 	eor.w	r1, r1, #1
   dc6bc:	6840      	ldr	r0, [r0, #4]
   dc6be:	f7fe b989 	b.w	da9d4 <network_listen>

000dc6c2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   dc6c2:	2300      	movs	r3, #0
   dc6c4:	461a      	mov	r2, r3
   dc6c6:	2101      	movs	r1, #1
   dc6c8:	6840      	ldr	r0, [r0, #4]
   dc6ca:	f7fe b97b 	b.w	da9c4 <network_off>

000dc6ce <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dc6ce:	2300      	movs	r3, #0
   dc6d0:	461a      	mov	r2, r3
   dc6d2:	4619      	mov	r1, r3
   dc6d4:	6840      	ldr	r0, [r0, #4]
   dc6d6:	f7fe b96d 	b.w	da9b4 <network_on>

000dc6da <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dc6da:	2200      	movs	r2, #0
   dc6dc:	4611      	mov	r1, r2
   dc6de:	6840      	ldr	r0, [r0, #4]
   dc6e0:	f7fe b960 	b.w	da9a4 <network_ready>

000dc6e4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dc6e4:	2200      	movs	r2, #0
   dc6e6:	4611      	mov	r1, r2
   dc6e8:	6840      	ldr	r0, [r0, #4]
   dc6ea:	f7fe b94b 	b.w	da984 <network_connecting>

000dc6ee <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dc6ee:	2200      	movs	r2, #0
   dc6f0:	2102      	movs	r1, #2
   dc6f2:	6840      	ldr	r0, [r0, #4]
   dc6f4:	f7fe b94e 	b.w	da994 <network_disconnect>

000dc6f8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dc6f8:	2300      	movs	r3, #0
   dc6fa:	461a      	mov	r2, r3
   dc6fc:	6840      	ldr	r0, [r0, #4]
   dc6fe:	f7fe b939 	b.w	da974 <network_connect>

000dc702 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   dc702:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc704:	4605      	mov	r5, r0
   dc706:	b188      	cbz	r0, dc72c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc708:	6804      	ldr	r4, [r0, #0]
   dc70a:	b14c      	cbz	r4, dc720 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dc70c:	68a3      	ldr	r3, [r4, #8]
   dc70e:	b11b      	cbz	r3, dc718 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dc710:	2203      	movs	r2, #3
   dc712:	4621      	mov	r1, r4
   dc714:	4620      	mov	r0, r4
   dc716:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc718:	2110      	movs	r1, #16
   dc71a:	4620      	mov	r0, r4
   dc71c:	f000 fcdf 	bl	dd0de <_ZdlPvj>
   dc720:	4628      	mov	r0, r5
   dc722:	2114      	movs	r1, #20
      }
   dc724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc728:	f000 bcd9 	b.w	dd0de <_ZdlPvj>
   dc72c:	bd38      	pop	{r3, r4, r5, pc}

000dc72e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   dc72e:	b110      	cbz	r0, dc736 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   dc730:	6803      	ldr	r3, [r0, #0]
   dc732:	685b      	ldr	r3, [r3, #4]
   dc734:	4718      	bx	r3
   dc736:	4770      	bx	lr

000dc738 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   dc738:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dc73a:	6803      	ldr	r3, [r0, #0]
   dc73c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   dc73e:	b1bb      	cbz	r3, dc770 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   dc740:	6858      	ldr	r0, [r3, #4]
   dc742:	f7fd ff07 	bl	da554 <os_thread_is_current>
   dc746:	b978      	cbnz	r0, dc768 <_ZN6ThreadD1Ev+0x30>
   dc748:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   dc74a:	7c5a      	ldrb	r2, [r3, #17]
   dc74c:	b912      	cbnz	r2, dc754 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   dc74e:	6858      	ldr	r0, [r3, #4]
   dc750:	f7fd ff08 	bl	da564 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   dc754:	6823      	ldr	r3, [r4, #0]
   dc756:	6858      	ldr	r0, [r3, #4]
   dc758:	f7fd ff0c 	bl	da574 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc75c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc75e:	2300      	movs	r3, #0
   dc760:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   dc762:	b128      	cbz	r0, dc770 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   dc764:	f7ff ffcd 	bl	dc702 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc768:	6820      	ldr	r0, [r4, #0]
   dc76a:	b108      	cbz	r0, dc770 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   dc76c:	f7ff ffc9 	bl	dc702 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   dc770:	4620      	mov	r0, r4
   dc772:	bd10      	pop	{r4, pc}

000dc774 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   dc774:	b538      	push	{r3, r4, r5, lr}
   dc776:	4b0c      	ldr	r3, [pc, #48]	; (dc7a8 <_ZN5spark9MeshClassD1Ev+0x34>)
   dc778:	6003      	str	r3, [r0, #0]
   dc77a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc77c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   dc780:	b108      	cbz	r0, dc786 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   dc782:	f7f7 fc8e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc786:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   dc78a:	b135      	cbz	r5, dc79a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dc78c:	4628      	mov	r0, r5
   dc78e:	f7ff ffd3 	bl	dc738 <_ZN6ThreadD1Ev>
   dc792:	2104      	movs	r1, #4
   dc794:	4628      	mov	r0, r5
   dc796:	f000 fca2 	bl	dd0de <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dc79a:	68a0      	ldr	r0, [r4, #8]
   dc79c:	b108      	cbz	r0, dc7a2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   dc79e:	f7ff ffc6 	bl	dc72e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   dc7a2:	4620      	mov	r0, r4
   dc7a4:	bd38      	pop	{r3, r4, r5, pc}
   dc7a6:	bf00      	nop
   dc7a8:	000e7ff0 	.word	0x000e7ff0

000dc7ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   dc7ac:	b538      	push	{r3, r4, r5, lr}
   dc7ae:	4c0e      	ldr	r4, [pc, #56]	; (dc7e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   dc7b0:	4b0e      	ldr	r3, [pc, #56]	; (dc7ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   dc7b2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   dc7b4:	2500      	movs	r5, #0
   dc7b6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   dc7b8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   dc7bc:	6063      	str	r3, [r4, #4]
   dc7be:	60a5      	str	r5, [r4, #8]
   dc7c0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc7c4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   dc7c8:	f7fd fee4 	bl	da594 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   dc7cc:	4b08      	ldr	r3, [pc, #32]	; (dc7f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   dc7ce:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc7d2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   dc7d6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   dc7d8:	4620      	mov	r0, r4
   dc7da:	4a06      	ldr	r2, [pc, #24]	; (dc7f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   dc7dc:	4906      	ldr	r1, [pc, #24]	; (dc7f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   dc7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   dc7e2:	f000 bc77 	b.w	dd0d4 <__aeabi_atexit>
   dc7e6:	bf00      	nop
   dc7e8:	2003e3fc 	.word	0x2003e3fc
   dc7ec:	000e80a4 	.word	0x000e80a4
   dc7f0:	000e7ff0 	.word	0x000e7ff0
   dc7f4:	2003d670 	.word	0x2003d670
   dc7f8:	000dc775 	.word	0x000dc775

000dc7fc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc7fe:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc800:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dc802:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dc806:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc808:	2201      	movs	r2, #1
   dc80a:	f04f 33ff 	mov.w	r3, #4294967295
   dc80e:	4621      	mov	r1, r4
   dc810:	47a8      	blx	r5
}
   dc812:	b003      	add	sp, #12
   dc814:	bd30      	pop	{r4, r5, pc}

000dc816 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   dc816:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc818:	6803      	ldr	r3, [r0, #0]
   dc81a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   dc81c:	f04f 33ff 	mov.w	r3, #4294967295
   dc820:	46a4      	mov	ip, r4
}
   dc822:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dc826:	4760      	bx	ip

000dc828 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc828:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc82a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   dc82c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dc82e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   dc832:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dc834:	4621      	mov	r1, r4
   dc836:	4613      	mov	r3, r2
   dc838:	2201      	movs	r2, #1
   dc83a:	47a8      	blx	r5
}
   dc83c:	b003      	add	sp, #12
   dc83e:	bd30      	pop	{r4, r5, pc}

000dc840 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   dc840:	4770      	bx	lr

000dc842 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc842:	b538      	push	{r3, r4, r5, lr}
   dc844:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   dc846:	681a      	ldr	r2, [r3, #0]
   dc848:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dc84a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   dc84c:	da05      	bge.n	dc85a <_ZN9TCPClient9connectedEv+0x18>
   dc84e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc852:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc856:	429a      	cmp	r2, r3
   dc858:	d001      	beq.n	dc85e <_ZN9TCPClient9connectedEv+0x1c>
   dc85a:	2501      	movs	r5, #1
   dc85c:	e00b      	b.n	dc876 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   dc85e:	6803      	ldr	r3, [r0, #0]
   dc860:	691b      	ldr	r3, [r3, #16]
   dc862:	4798      	blx	r3
   dc864:	2800      	cmp	r0, #0
   dc866:	bf14      	ite	ne
   dc868:	2501      	movne	r5, #1
   dc86a:	2500      	moveq	r5, #0
        if (!rv) {
   dc86c:	d103      	bne.n	dc876 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   dc86e:	6823      	ldr	r3, [r4, #0]
   dc870:	4620      	mov	r0, r4
   dc872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dc874:	4798      	blx	r3
        }
    }
    return rv;
}
   dc876:	4628      	mov	r0, r5
   dc878:	bd38      	pop	{r3, r4, r5, pc}

000dc87a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dc87a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   dc87c:	6818      	ldr	r0, [r3, #0]
}
   dc87e:	43c0      	mvns	r0, r0
   dc880:	0fc0      	lsrs	r0, r0, #31
   dc882:	4770      	bx	lr

000dc884 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc884:	4770      	bx	lr

000dc886 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   dc886:	2000      	movs	r0, #0
   dc888:	4770      	bx	lr

000dc88a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dc88a:	b510      	push	{r4, lr}
   dc88c:	2114      	movs	r1, #20
   dc88e:	4604      	mov	r4, r0
   dc890:	f000 fc25 	bl	dd0de <_ZdlPvj>
   dc894:	4620      	mov	r0, r4
   dc896:	bd10      	pop	{r4, pc}

000dc898 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dc898:	f7f7 bc01 	b.w	d409e <_ZdlPv>

000dc89c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc89c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dc89e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   dc8a0:	2200      	movs	r2, #0
   dc8a2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   dc8a4:	9202      	str	r2, [sp, #8]
   dc8a6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc8a8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dc8aa:	4604      	mov	r4, r0
   dc8ac:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   dc8ae:	d008      	beq.n	dc8c2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   dc8b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc8b4:	fbb3 f1f2 	udiv	r1, r3, r2
   dc8b8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   dc8ba:	fb02 3111 	mls	r1, r2, r1, r3
   dc8be:	434a      	muls	r2, r1
   dc8c0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   dc8c2:	6960      	ldr	r0, [r4, #20]
   dc8c4:	2308      	movs	r3, #8
   dc8c6:	9300      	str	r3, [sp, #0]
   dc8c8:	f241 0205 	movw	r2, #4101	; 0x1005
   dc8cc:	446b      	add	r3, sp
   dc8ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc8d2:	6800      	ldr	r0, [r0, #0]
   dc8d4:	f7fd ff46 	bl	da764 <sock_setsockopt>
    if (ret < 0) {
   dc8d8:	2800      	cmp	r0, #0
   dc8da:	db08      	blt.n	dc8ee <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   dc8dc:	6960      	ldr	r0, [r4, #20]
   dc8de:	2300      	movs	r3, #0
   dc8e0:	4632      	mov	r2, r6
   dc8e2:	4629      	mov	r1, r5
   dc8e4:	6800      	ldr	r0, [r0, #0]
   dc8e6:	f7fd ff5d 	bl	da7a4 <sock_send>
    if (ret < 0) {
   dc8ea:	2800      	cmp	r0, #0
   dc8ec:	da04      	bge.n	dc8f8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   dc8ee:	f7fe f919 	bl	dab24 <__errno>
   dc8f2:	6803      	ldr	r3, [r0, #0]
   dc8f4:	6063      	str	r3, [r4, #4]
   dc8f6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   dc8f8:	b004      	add	sp, #16
   dc8fa:	bd70      	pop	{r4, r5, r6, pc}

000dc8fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc8fc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc8fe:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dc900:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dc902:	689b      	ldr	r3, [r3, #8]
   dc904:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dc906:	68a3      	ldr	r3, [r4, #8]
   dc908:	3b01      	subs	r3, #1
   dc90a:	60a3      	str	r3, [r4, #8]
   dc90c:	b92b      	cbnz	r3, dc91a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   dc90e:	6823      	ldr	r3, [r4, #0]
   dc910:	4620      	mov	r0, r4
   dc912:	68db      	ldr	r3, [r3, #12]
        }
    }
   dc914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   dc918:	4718      	bx	r3
   dc91a:	bd10      	pop	{r4, pc}

000dc91c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   dc91c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc91e:	4604      	mov	r4, r0
   dc920:	694d      	ldr	r5, [r1, #20]
   dc922:	4b05      	ldr	r3, [pc, #20]	; (dc938 <_ZN9TCPClient8remoteIPEv+0x1c>)
   dc924:	f844 3b04 	str.w	r3, [r4], #4
   dc928:	358c      	adds	r5, #140	; 0x8c
   dc92a:	4606      	mov	r6, r0
   dc92c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc92e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc930:	682b      	ldr	r3, [r5, #0]
   dc932:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   dc934:	4630      	mov	r0, r6
   dc936:	bd70      	pop	{r4, r5, r6, pc}
   dc938:	000e7f20 	.word	0x000e7f20

000dc93c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc93c:	b510      	push	{r4, lr}
   dc93e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc940:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc944:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc948:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dc94a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dc94c:	d005      	beq.n	dc95a <_ZN9TCPClient4peekEv+0x1e>
   dc94e:	6962      	ldr	r2, [r4, #20]
   dc950:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc954:	4413      	add	r3, r2
   dc956:	7918      	ldrb	r0, [r3, #4]
   dc958:	bd10      	pop	{r4, pc}
   dc95a:	6803      	ldr	r3, [r0, #0]
   dc95c:	691b      	ldr	r3, [r3, #16]
   dc95e:	4798      	blx	r3
   dc960:	2800      	cmp	r0, #0
   dc962:	d1f4      	bne.n	dc94e <_ZN9TCPClient4peekEv+0x12>
   dc964:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc968:	bd10      	pop	{r4, pc}

000dc96a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc96a:	b510      	push	{r4, lr}
   dc96c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc96e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc972:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc976:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dc978:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dc97a:	d008      	beq.n	dc98e <_ZN9TCPClient4readEv+0x24>
   dc97c:	6962      	ldr	r2, [r4, #20]
   dc97e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc982:	1c59      	adds	r1, r3, #1
   dc984:	4413      	add	r3, r2
   dc986:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   dc98a:	7918      	ldrb	r0, [r3, #4]
   dc98c:	bd10      	pop	{r4, pc}
   dc98e:	6803      	ldr	r3, [r0, #0]
   dc990:	691b      	ldr	r3, [r3, #16]
   dc992:	4798      	blx	r3
   dc994:	2800      	cmp	r0, #0
   dc996:	d1f1      	bne.n	dc97c <_ZN9TCPClient4readEv+0x12>
   dc998:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc99c:	bd10      	pop	{r4, pc}

000dc99e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc9a0:	6943      	ldr	r3, [r0, #20]
   dc9a2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   dc9a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dc9a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dc9ac:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   dc9ae:	4605      	mov	r5, r0
   dc9b0:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   dc9b2:	d106      	bne.n	dc9c2 <_ZN9TCPClient4readEPhj+0x24>
   dc9b4:	6803      	ldr	r3, [r0, #0]
   dc9b6:	691b      	ldr	r3, [r3, #16]
   dc9b8:	4798      	blx	r3
   dc9ba:	b910      	cbnz	r0, dc9c2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   dc9bc:	f04f 34ff 	mov.w	r4, #4294967295
   dc9c0:	e014      	b.n	dc9ec <_ZN9TCPClient4readEPhj+0x4e>
   dc9c2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   dc9c4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   dc9c8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   dc9cc:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   dc9ce:	42bc      	cmp	r4, r7
   dc9d0:	bf28      	it	cs
   dc9d2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   dc9d4:	4419      	add	r1, r3
   dc9d6:	4622      	mov	r2, r4
   dc9d8:	3104      	adds	r1, #4
   dc9da:	4630      	mov	r0, r6
   dc9dc:	f006 fe1a 	bl	e3614 <memcpy>
   dc9e0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   dc9e2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dc9e6:	4423      	add	r3, r4
   dc9e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   dc9ec:	4620      	mov	r0, r4
   dc9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc9f0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc9f4:	4698      	mov	r8, r3
    stop();
   dc9f6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9f8:	b093      	sub	sp, #76	; 0x4c
    stop();
   dc9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dc9fc:	460d      	mov	r5, r1
   dc9fe:	4606      	mov	r6, r0
   dca00:	4617      	mov	r7, r2
    stop();
   dca02:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   dca04:	ab12      	add	r3, sp, #72	; 0x48
   dca06:	2400      	movs	r4, #0
   dca08:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dca0c:	4622      	mov	r2, r4
   dca0e:	4621      	mov	r1, r4
   dca10:	4628      	mov	r0, r5
   dca12:	f7fd fce7 	bl	da3e4 <netdb_getaddrinfo>
   dca16:	4681      	mov	r9, r0
   dca18:	2800      	cmp	r0, #0
   dca1a:	d13d      	bne.n	dca98 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dca1c:	9b00      	ldr	r3, [sp, #0]
   dca1e:	2b00      	cmp	r3, #0
   dca20:	d056      	beq.n	dcad0 <_ZN9TCPClient7connectEPKctm+0xe0>
   dca22:	695b      	ldr	r3, [r3, #20]
   dca24:	2b00      	cmp	r3, #0
   dca26:	d053      	beq.n	dcad0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   dca28:	a806      	add	r0, sp, #24
   dca2a:	f7ff fb93 	bl	dc154 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dca2e:	9b00      	ldr	r3, [sp, #0]
   dca30:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   dca32:	7863      	ldrb	r3, [r4, #1]
   dca34:	2b02      	cmp	r3, #2
   dca36:	d101      	bne.n	dca3c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dca38:	1d21      	adds	r1, r4, #4
   dca3a:	e013      	b.n	dca64 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   dca3c:	2b0a      	cmp	r3, #10
   dca3e:	d114      	bne.n	dca6a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   dca40:	2211      	movs	r2, #17
   dca42:	4649      	mov	r1, r9
   dca44:	a801      	add	r0, sp, #4
   dca46:	f006 fdf0 	bl	e362a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dca4a:	68a3      	ldr	r3, [r4, #8]
   dca4c:	bb33      	cbnz	r3, dca9c <_ZN9TCPClient7connectEPKctm+0xac>
   dca4e:	68e3      	ldr	r3, [r4, #12]
   dca50:	bb23      	cbnz	r3, dca9c <_ZN9TCPClient7connectEPKctm+0xac>
   dca52:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dca56:	6925      	ldr	r5, [r4, #16]
   dca58:	f7fd fdac 	bl	da5b4 <inet_htonl>
   dca5c:	4285      	cmp	r5, r0
   dca5e:	d11d      	bne.n	dca9c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   dca60:	f104 0114 	add.w	r1, r4, #20
   dca64:	a806      	add	r0, sp, #24
   dca66:	f7ff fbb8 	bl	dc1da <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dca6a:	a806      	add	r0, sp, #24
   dca6c:	f7ff fb92 	bl	dc194 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dca70:	2800      	cmp	r0, #0
   dca72:	d02d      	beq.n	dcad0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   dca74:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dca76:	ad07      	add	r5, sp, #28
   dca78:	f8d3 9020 	ldr.w	r9, [r3, #32]
   dca7c:	4b18      	ldr	r3, [pc, #96]	; (dcae0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   dca7e:	930c      	str	r3, [sp, #48]	; 0x30
   dca80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dca82:	ac0d      	add	r4, sp, #52	; 0x34
   dca84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dca86:	682b      	ldr	r3, [r5, #0]
   dca88:	7023      	strb	r3, [r4, #0]
   dca8a:	463a      	mov	r2, r7
   dca8c:	4643      	mov	r3, r8
   dca8e:	a90c      	add	r1, sp, #48	; 0x30
   dca90:	4630      	mov	r0, r6
   dca92:	47c8      	blx	r9
   dca94:	4681      	mov	r9, r0
   dca96:	e01b      	b.n	dcad0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dca98:	46a1      	mov	r9, r4
   dca9a:	e019      	b.n	dcad0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dca9c:	f104 0308 	add.w	r3, r4, #8
   dcaa0:	ad01      	add	r5, sp, #4
   dcaa2:	3418      	adds	r4, #24
   dcaa4:	6818      	ldr	r0, [r3, #0]
   dcaa6:	6859      	ldr	r1, [r3, #4]
   dcaa8:	462a      	mov	r2, r5
   dcaaa:	c203      	stmia	r2!, {r0, r1}
   dcaac:	3308      	adds	r3, #8
   dcaae:	42a3      	cmp	r3, r4
   dcab0:	4615      	mov	r5, r2
   dcab2:	d1f7      	bne.n	dcaa4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   dcab4:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dcab6:	a901      	add	r1, sp, #4
   dcab8:	a80c      	add	r0, sp, #48	; 0x30
   dcaba:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   dcabc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dcac0:	f7ff fb56 	bl	dc170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dcac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcac6:	ac07      	add	r4, sp, #28
   dcac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcaca:	682b      	ldr	r3, [r5, #0]
   dcacc:	7023      	strb	r3, [r4, #0]
   dcace:	e7cc      	b.n	dca6a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dcad0:	9800      	ldr	r0, [sp, #0]
   dcad2:	f7fd fc7f 	bl	da3d4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   dcad6:	4648      	mov	r0, r9
   dcad8:	b013      	add	sp, #76	; 0x4c
   dcada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcade:	bf00      	nop
   dcae0:	000e7f20 	.word	0x000e7f20

000dcae4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   dcae4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   dcae6:	2300      	movs	r3, #0
   dcae8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dcaec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   dcaee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   dcaf2:	4770      	bx	lr

000dcaf4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcaf8:	461e      	mov	r6, r3
    stop();
   dcafa:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcafc:	460c      	mov	r4, r1
   dcafe:	b08a      	sub	sp, #40	; 0x28
    stop();
   dcb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dcb02:	4605      	mov	r5, r0
   dcb04:	4617      	mov	r7, r2
    stop();
   dcb06:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   dcb08:	7d23      	ldrb	r3, [r4, #20]
   dcb0a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   dcb0e:	2b04      	cmp	r3, #4
   dcb10:	bf0c      	ite	eq
   dcb12:	2002      	moveq	r0, #2
   dcb14:	200a      	movne	r0, #10
   dcb16:	2206      	movs	r2, #6
   dcb18:	2101      	movs	r1, #1
   dcb1a:	f7fd fe4b 	bl	da7b4 <sock_socket>
   dcb1e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   dcb22:	696b      	ldr	r3, [r5, #20]
   dcb24:	681b      	ldr	r3, [r3, #0]
   dcb26:	2b00      	cmp	r3, #0
   dcb28:	db18      	blt.n	dcb5c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   dcb2a:	4628      	mov	r0, r5
   dcb2c:	f7ff ffda 	bl	dcae4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   dcb30:	b1d6      	cbz	r6, dcb68 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   dcb32:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb34:	a903      	add	r1, sp, #12
   dcb36:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   dcb38:	9303      	str	r3, [sp, #12]
   dcb3a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb3e:	f7fd fcc9 	bl	da4d4 <if_index_to_name>
   dcb42:	b958      	cbnz	r0, dcb5c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   dcb44:	6968      	ldr	r0, [r5, #20]
   dcb46:	2306      	movs	r3, #6
   dcb48:	9300      	str	r3, [sp, #0]
   dcb4a:	f241 020b 	movw	r2, #4107	; 0x100b
   dcb4e:	ab03      	add	r3, sp, #12
   dcb50:	f640 71ff 	movw	r1, #4095	; 0xfff
   dcb54:	6800      	ldr	r0, [r0, #0]
   dcb56:	f7fd fe05 	bl	da764 <sock_setsockopt>
   dcb5a:	b128      	cbz	r0, dcb68 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dcb5c:	682b      	ldr	r3, [r5, #0]
   dcb5e:	4628      	mov	r0, r5
   dcb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dcb62:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dcb64:	4798      	blx	r3
   dcb66:	e03b      	b.n	dcbe0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   dcb68:	261c      	movs	r6, #28
   dcb6a:	4632      	mov	r2, r6
   dcb6c:	2100      	movs	r1, #0
   dcb6e:	a803      	add	r0, sp, #12
   dcb70:	f006 fd5b 	bl	e362a <memset>
    if (ip.version() == 4) {
   dcb74:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   dcb76:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   dcb7a:	2b04      	cmp	r3, #4
   dcb7c:	d10c      	bne.n	dcb98 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dcb7e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   dcb80:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dcb82:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   dcb86:	f7fd fd1d 	bl	da5c4 <inet_htons>
   dcb8a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   dcb8e:	6860      	ldr	r0, [r4, #4]
   dcb90:	f7fd fd10 	bl	da5b4 <inet_htonl>
   dcb94:	9004      	str	r0, [sp, #16]
   dcb96:	e013      	b.n	dcbc0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dcb98:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   dcb9a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dcb9c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   dcba0:	f7fd fd10 	bl	da5c4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dcba4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   dcba6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dcbaa:	1d23      	adds	r3, r4, #4
   dcbac:	f104 0714 	add.w	r7, r4, #20
   dcbb0:	6818      	ldr	r0, [r3, #0]
   dcbb2:	6859      	ldr	r1, [r3, #4]
   dcbb4:	4632      	mov	r2, r6
   dcbb6:	c203      	stmia	r2!, {r0, r1}
   dcbb8:	3308      	adds	r3, #8
   dcbba:	42bb      	cmp	r3, r7
   dcbbc:	4616      	mov	r6, r2
   dcbbe:	d1f7      	bne.n	dcbb0 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   dcbc0:	696b      	ldr	r3, [r5, #20]
   dcbc2:	221c      	movs	r2, #28
   dcbc4:	a903      	add	r1, sp, #12
   dcbc6:	6818      	ldr	r0, [r3, #0]
   dcbc8:	f7fd fddc 	bl	da784 <sock_connect>
   dcbcc:	2800      	cmp	r0, #0
   dcbce:	d1c5      	bne.n	dcb5c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   dcbd0:	3404      	adds	r4, #4
   dcbd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dcbd4:	696d      	ldr	r5, [r5, #20]
   dcbd6:	358c      	adds	r5, #140	; 0x8c
   dcbd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dcbda:	6823      	ldr	r3, [r4, #0]
   dcbdc:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   dcbde:	2401      	movs	r4, #1
}
   dcbe0:	4620      	mov	r0, r4
   dcbe2:	b00a      	add	sp, #40	; 0x28
   dcbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dcbe8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dcbe8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   dcbea:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dcbec:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   dcbee:	6818      	ldr	r0, [r3, #0]
   dcbf0:	2800      	cmp	r0, #0
   dcbf2:	db01      	blt.n	dcbf8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   dcbf4:	f7fd fdbe 	bl	da774 <sock_close>
   dcbf8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   dcbfa:	f04f 32ff 	mov.w	r2, #4294967295
   dcbfe:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dcc00:	6960      	ldr	r0, [r4, #20]
   dcc02:	2211      	movs	r2, #17
   dcc04:	2100      	movs	r1, #0
   dcc06:	308c      	adds	r0, #140	; 0x8c
   dcc08:	f006 fd0f 	bl	e362a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   dcc0c:	4620      	mov	r0, r4
}
   dcc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   dcc12:	f7ff bf67 	b.w	dcae4 <_ZN9TCPClient12flush_bufferEv>
	...

000dcc18 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dcc18:	b530      	push	{r4, r5, lr}
   dcc1a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dcc1c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dcc20:	b08b      	sub	sp, #44	; 0x2c
   dcc22:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dcc24:	b11b      	cbz	r3, dcc2e <_ZN9TCPClient9availableEv+0x16>
   dcc26:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   dcc2a:	429a      	cmp	r2, r3
   dcc2c:	d040      	beq.n	dccb0 <_ZN9TCPClient9availableEv+0x98>
   dcc2e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   dcc30:	6818      	ldr	r0, [r3, #0]
   dcc32:	2800      	cmp	r0, #0
   dcc34:	db3f      	blt.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   dcc36:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   dcc3a:	2d7f      	cmp	r5, #127	; 0x7f
   dcc3c:	d83b      	bhi.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   dcc3e:	1d19      	adds	r1, r3, #4
   dcc40:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   dcc44:	2308      	movs	r3, #8
   dcc46:	4429      	add	r1, r5
   dcc48:	f7fd fda4 	bl	da794 <sock_recv>
            if (ret > 0) {
   dcc4c:	2800      	cmp	r0, #0
   dcc4e:	dd0c      	ble.n	dcc6a <_ZN9TCPClient9availableEv+0x52>
   dcc50:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dcc52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dcc56:	b90a      	cbnz	r2, dcc5c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dcc58:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dcc5c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dcc5e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dcc62:	4418      	add	r0, r3
   dcc64:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dcc68:	e025      	b.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dcc6a:	f7fd ff5b 	bl	dab24 <__errno>
   dcc6e:	6803      	ldr	r3, [r0, #0]
   dcc70:	2b0b      	cmp	r3, #11
   dcc72:	d020      	beq.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
   dcc74:	f7fd ff56 	bl	dab24 <__errno>
   dcc78:	6803      	ldr	r3, [r0, #0]
   dcc7a:	2b0b      	cmp	r3, #11
   dcc7c:	d01b      	beq.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dcc7e:	2320      	movs	r3, #32
   dcc80:	2500      	movs	r5, #0
   dcc82:	9302      	str	r3, [sp, #8]
   dcc84:	9503      	str	r5, [sp, #12]
   dcc86:	f7fd ff4d 	bl	dab24 <__errno>
   dcc8a:	6803      	ldr	r3, [r0, #0]
   dcc8c:	9301      	str	r3, [sp, #4]
   dcc8e:	4b0e      	ldr	r3, [pc, #56]	; (dccc8 <_ZN9TCPClient9availableEv+0xb0>)
   dcc90:	9300      	str	r3, [sp, #0]
   dcc92:	aa02      	add	r2, sp, #8
   dcc94:	462b      	mov	r3, r5
   dcc96:	490d      	ldr	r1, [pc, #52]	; (dcccc <_ZN9TCPClient9availableEv+0xb4>)
   dcc98:	2032      	movs	r0, #50	; 0x32
   dcc9a:	f7fd fdfb 	bl	da894 <log_message>
                    sock_close(d_->sock);
   dcc9e:	6963      	ldr	r3, [r4, #20]
   dcca0:	6818      	ldr	r0, [r3, #0]
   dcca2:	f7fd fd67 	bl	da774 <sock_close>
   dcca6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dcca8:	f04f 32ff 	mov.w	r2, #4294967295
   dccac:	601a      	str	r2, [r3, #0]
   dccae:	e002      	b.n	dccb6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dccb0:	f7ff ff18 	bl	dcae4 <_ZN9TCPClient12flush_bufferEv>
   dccb4:	e7bb      	b.n	dcc2e <_ZN9TCPClient9availableEv+0x16>
   dccb6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dccb8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dccbc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dccc0:	1a18      	subs	r0, r3, r0
}
   dccc2:	b00b      	add	sp, #44	; 0x2c
   dccc4:	bd30      	pop	{r4, r5, pc}
   dccc6:	bf00      	nop
   dccc8:	000e808b 	.word	0x000e808b
   dcccc:	000e8084 	.word	0x000e8084

000dccd0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dccd0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dccd2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dccd4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dccd6:	6001      	str	r1, [r0, #0]
   dccd8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dccdc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dcce0:	3088      	adds	r0, #136	; 0x88
   dcce2:	f7ff fa37 	bl	dc154 <_ZN9IPAddressC1Ev>
}
   dcce6:	4620      	mov	r0, r4
   dcce8:	bd10      	pop	{r4, pc}
	...

000dccec <_ZN9TCPClientC1Ei>:
   dccec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dccf0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dccf2:	2300      	movs	r3, #0
   dccf4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dccf6:	4a14      	ldr	r2, [pc, #80]	; (dcd48 <_ZN9TCPClientC1Ei+0x5c>)
   dccf8:	6043      	str	r3, [r0, #4]
   dccfa:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dccfc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dccfe:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dcd00:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dcd02:	20a0      	movs	r0, #160	; 0xa0
   dcd04:	460e      	mov	r6, r1
   dcd06:	f7f7 f9c8 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dcd0a:	4605      	mov	r5, r0
   dcd0c:	b110      	cbz	r0, dcd14 <_ZN9TCPClientC1Ei+0x28>
   dcd0e:	4631      	mov	r1, r6
   dcd10:	f7ff ffde 	bl	dccd0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dcd14:	2014      	movs	r0, #20
   dcd16:	f7f7 f9c0 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   dcd1a:	4603      	mov	r3, r0
   dcd1c:	b128      	cbz	r0, dcd2a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dcd1e:	2201      	movs	r2, #1
   dcd20:	6042      	str	r2, [r0, #4]
   dcd22:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   dcd24:	4a09      	ldr	r2, [pc, #36]	; (dcd4c <_ZN9TCPClientC1Ei+0x60>)
   dcd26:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   dcd28:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dcd2a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   dcd2c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dcd2e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   dcd30:	b128      	cbz	r0, dcd3e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dcd32:	6843      	ldr	r3, [r0, #4]
   dcd34:	3b01      	subs	r3, #1
   dcd36:	6043      	str	r3, [r0, #4]
   dcd38:	b90b      	cbnz	r3, dcd3e <_ZN9TCPClientC1Ei+0x52>
   dcd3a:	f7ff fddf 	bl	dc8fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   dcd3e:	4620      	mov	r0, r4
   dcd40:	f7ff fed0 	bl	dcae4 <_ZN9TCPClient12flush_bufferEv>
}
   dcd44:	4620      	mov	r0, r4
   dcd46:	bd70      	pop	{r4, r5, r6, pc}
   dcd48:	000e8040 	.word	0x000e8040
   dcd4c:	000e8024 	.word	0x000e8024

000dcd50 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcd50:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   dcd52:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dcd56:	4604      	mov	r4, r0
        : TCPClient(-1) {
   dcd58:	f7ff ffc8 	bl	dccec <_ZN9TCPClientC1Ei>
}
   dcd5c:	4620      	mov	r0, r4
   dcd5e:	bd10      	pop	{r4, pc}

000dcd60 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   dcd60:	b510      	push	{r4, lr}
   dcd62:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   dcd64:	6800      	ldr	r0, [r0, #0]
   dcd66:	2800      	cmp	r0, #0
   dcd68:	db01      	blt.n	dcd6e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   dcd6a:	f7fd fd03 	bl	da774 <sock_close>
    }
}
   dcd6e:	4620      	mov	r0, r4
   dcd70:	bd10      	pop	{r4, pc}

000dcd72 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   dcd72:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   dcd74:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   dcd76:	4620      	mov	r0, r4
   dcd78:	f7ff fff2 	bl	dcd60 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   dcd7c:	b124      	cbz	r4, dcd88 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dcd7e:	4620      	mov	r0, r4
   dcd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dcd84:	f7f7 b98b 	b.w	d409e <_ZdlPv>
   dcd88:	bd10      	pop	{r4, pc}

000dcd8a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dcd8a:	2300      	movs	r3, #0
   dcd8c:	461a      	mov	r2, r3
   dcd8e:	6840      	ldr	r0, [r0, #4]
   dcd90:	f7fd bdf0 	b.w	da974 <network_connect>

000dcd94 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dcd94:	2200      	movs	r2, #0
   dcd96:	2102      	movs	r1, #2
   dcd98:	6840      	ldr	r0, [r0, #4]
   dcd9a:	f7fd bdfb 	b.w	da994 <network_disconnect>

000dcd9e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dcd9e:	2200      	movs	r2, #0
   dcda0:	4611      	mov	r1, r2
   dcda2:	6840      	ldr	r0, [r0, #4]
   dcda4:	f7fd bdee 	b.w	da984 <network_connecting>

000dcda8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dcda8:	2200      	movs	r2, #0
   dcdaa:	4611      	mov	r1, r2
   dcdac:	6840      	ldr	r0, [r0, #4]
   dcdae:	f7fd bdf9 	b.w	da9a4 <network_ready>

000dcdb2 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dcdb2:	2300      	movs	r3, #0
   dcdb4:	461a      	mov	r2, r3
   dcdb6:	4619      	mov	r1, r3
   dcdb8:	6840      	ldr	r0, [r0, #4]
   dcdba:	f7fd bdfb 	b.w	da9b4 <network_on>

000dcdbe <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dcdbe:	2300      	movs	r3, #0
   dcdc0:	461a      	mov	r2, r3
   dcdc2:	4619      	mov	r1, r3
   dcdc4:	6840      	ldr	r0, [r0, #4]
   dcdc6:	f7fd bdfd 	b.w	da9c4 <network_off>

000dcdca <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dcdca:	2200      	movs	r2, #0
   dcdcc:	f081 0101 	eor.w	r1, r1, #1
   dcdd0:	6840      	ldr	r0, [r0, #4]
   dcdd2:	f7fd bdff 	b.w	da9d4 <network_listen>

000dcdd6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dcdd6:	2200      	movs	r2, #0
   dcdd8:	6840      	ldr	r0, [r0, #4]
   dcdda:	f7fd be0b 	b.w	da9f4 <network_set_listen_timeout>

000dcdde <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dcdde:	2200      	movs	r2, #0
   dcde0:	4611      	mov	r1, r2
   dcde2:	6840      	ldr	r0, [r0, #4]
   dcde4:	f7fd be0e 	b.w	daa04 <network_get_listen_timeout>

000dcde8 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dcde8:	2200      	movs	r2, #0
   dcdea:	4611      	mov	r1, r2
   dcdec:	6840      	ldr	r0, [r0, #4]
   dcdee:	f7fd bdf9 	b.w	da9e4 <network_listening>

000dcdf2 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dcdf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dcdf6:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   dcdf8:	b095      	sub	sp, #84	; 0x54
   dcdfa:	4616      	mov	r6, r2
   dcdfc:	460d      	mov	r5, r1
   dcdfe:	4607      	mov	r7, r0
    IPAddress addr;
   dce00:	f7ff f9a8 	bl	dc154 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   dce04:	4621      	mov	r1, r4
   dce06:	2220      	movs	r2, #32
   dce08:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dce0a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dce0c:	f006 fc0d 	bl	e362a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dce10:	2340      	movs	r3, #64	; 0x40
   dce12:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dce14:	4621      	mov	r1, r4
   dce16:	466b      	mov	r3, sp
   dce18:	aa0c      	add	r2, sp, #48	; 0x30
   dce1a:	4630      	mov	r0, r6
   dce1c:	f7fd fae2 	bl	da3e4 <netdb_getaddrinfo>
    if (!r) {
   dce20:	4604      	mov	r4, r0
   dce22:	2800      	cmp	r0, #0
   dce24:	d144      	bne.n	dceb0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dce26:	4602      	mov	r2, r0
   dce28:	2101      	movs	r1, #1
   dce2a:	6868      	ldr	r0, [r5, #4]
   dce2c:	f7fd fdba 	bl	da9a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dce30:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dce32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dce34:	4622      	mov	r2, r4
   dce36:	6868      	ldr	r0, [r5, #4]
   dce38:	f7fd fdb4 	bl	da9a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dce3c:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dce3e:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   dce40:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dce42:	2e00      	cmp	r6, #0
   dce44:	d034      	beq.n	dceb0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   dce46:	2900      	cmp	r1, #0
   dce48:	d132      	bne.n	dceb0 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dce4a:	6873      	ldr	r3, [r6, #4]
   dce4c:	2b02      	cmp	r3, #2
   dce4e:	d002      	beq.n	dce56 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   dce50:	2b0a      	cmp	r3, #10
   dce52:	d009      	beq.n	dce68 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   dce54:	e02a      	b.n	dceac <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   dce56:	f1b8 0f00 	cmp.w	r8, #0
   dce5a:	d027      	beq.n	dceac <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dce5c:	6971      	ldr	r1, [r6, #20]
   dce5e:	4638      	mov	r0, r7
   dce60:	3104      	adds	r1, #4
   dce62:	f7ff f9ba 	bl	dc1da <_ZN9IPAddressaSEPKh>
   dce66:	e020      	b.n	dceaa <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   dce68:	f1b9 0f00 	cmp.w	r9, #0
   dce6c:	d01e      	beq.n	dceac <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dce6e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dce70:	2211      	movs	r2, #17
   dce72:	a801      	add	r0, sp, #4
   dce74:	f006 fbd9 	bl	e362a <memset>
                    a.v = 6;
   dce78:	2306      	movs	r3, #6
   dce7a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dce7e:	ad01      	add	r5, sp, #4
   dce80:	f104 0308 	add.w	r3, r4, #8
   dce84:	3418      	adds	r4, #24
   dce86:	6818      	ldr	r0, [r3, #0]
   dce88:	6859      	ldr	r1, [r3, #4]
   dce8a:	462a      	mov	r2, r5
   dce8c:	c203      	stmia	r2!, {r0, r1}
   dce8e:	3308      	adds	r3, #8
   dce90:	42a3      	cmp	r3, r4
   dce92:	4615      	mov	r5, r2
   dce94:	d1f7      	bne.n	dce86 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dce96:	a901      	add	r1, sp, #4
   dce98:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dce9a:	ad07      	add	r5, sp, #28
   dce9c:	f7ff f968 	bl	dc170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dcea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcea2:	1d3c      	adds	r4, r7, #4
   dcea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcea6:	682b      	ldr	r3, [r5, #0]
   dcea8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dceaa:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dceac:	69f6      	ldr	r6, [r6, #28]
   dceae:	e7c8      	b.n	dce42 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dceb0:	9800      	ldr	r0, [sp, #0]
   dceb2:	f7fd fa8f 	bl	da3d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dceb6:	4638      	mov	r0, r7
   dceb8:	b015      	add	sp, #84	; 0x54
   dceba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dcec0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dcec0:	4b02      	ldr	r3, [pc, #8]	; (dcecc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dcec2:	4a03      	ldr	r2, [pc, #12]	; (dced0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dcec4:	601a      	str	r2, [r3, #0]
   dcec6:	2200      	movs	r2, #0
   dcec8:	605a      	str	r2, [r3, #4]
   dceca:	4770      	bx	lr
   dcecc:	2003e5d0 	.word	0x2003e5d0
   dced0:	000e80a4 	.word	0x000e80a4

000dced4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dced4:	b510      	push	{r4, lr}
   dced6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dced8:	480f      	ldr	r0, [pc, #60]	; (dcf18 <pinAvailable+0x44>)
   dceda:	f7fd feb3 	bl	dac44 <_ZN8SPIClass9isEnabledEv>
   dcede:	b128      	cbz	r0, dceec <pinAvailable+0x18>
   dcee0:	f1a4 030b 	sub.w	r3, r4, #11
   dcee4:	2b02      	cmp	r3, #2
   dcee6:	d801      	bhi.n	dceec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   dcee8:	2000      	movs	r0, #0
   dceea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dceec:	f000 f8b2 	bl	dd054 <_Z19__fetch_global_Wirev>
   dcef0:	f7ff fbb8 	bl	dc664 <_ZN7TwoWire9isEnabledEv>
   dcef4:	b108      	cbz	r0, dcefa <pinAvailable+0x26>
   dcef6:	2c01      	cmp	r4, #1
   dcef8:	d9f6      	bls.n	dcee8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dcefa:	f7ff fb09 	bl	dc510 <_Z22__fetch_global_Serial1v>
   dcefe:	f7ff fb04 	bl	dc50a <_ZN11USARTSerial9isEnabledEv>
   dcf02:	b118      	cbz	r0, dcf0c <pinAvailable+0x38>
   dcf04:	f1a4 0309 	sub.w	r3, r4, #9
   dcf08:	2b01      	cmp	r3, #1
   dcf0a:	d9ed      	bls.n	dcee8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dcf0c:	2c23      	cmp	r4, #35	; 0x23
   dcf0e:	bf8c      	ite	hi
   dcf10:	2000      	movhi	r0, #0
   dcf12:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dcf14:	bd10      	pop	{r4, pc}
   dcf16:	bf00      	nop
   dcf18:	2003e5d8 	.word	0x2003e5d8

000dcf1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dcf1c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dcf1e:	b538      	push	{r3, r4, r5, lr}
   dcf20:	4604      	mov	r4, r0
   dcf22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dcf24:	d80a      	bhi.n	dcf3c <pinMode+0x20>
   dcf26:	29ff      	cmp	r1, #255	; 0xff
   dcf28:	d008      	beq.n	dcf3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dcf2a:	f7ff ffd3 	bl	dced4 <pinAvailable>
   dcf2e:	b128      	cbz	r0, dcf3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dcf30:	4629      	mov	r1, r5
   dcf32:	4620      	mov	r0, r4
}
   dcf34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dcf38:	f7fd ba6c 	b.w	da414 <HAL_Pin_Mode>
   dcf3c:	bd38      	pop	{r3, r4, r5, pc}

000dcf3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dcf3e:	b538      	push	{r3, r4, r5, lr}
   dcf40:	4604      	mov	r4, r0
   dcf42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcf44:	f7fd fa6e 	bl	da424 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dcf48:	28ff      	cmp	r0, #255	; 0xff
   dcf4a:	d010      	beq.n	dcf6e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dcf4c:	2806      	cmp	r0, #6
   dcf4e:	d804      	bhi.n	dcf5a <digitalWrite+0x1c>
   dcf50:	234d      	movs	r3, #77	; 0x4d
   dcf52:	fa23 f000 	lsr.w	r0, r3, r0
   dcf56:	07c3      	lsls	r3, r0, #31
   dcf58:	d409      	bmi.n	dcf6e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dcf5a:	4620      	mov	r0, r4
   dcf5c:	f7ff ffba 	bl	dced4 <pinAvailable>
   dcf60:	b128      	cbz	r0, dcf6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dcf62:	4629      	mov	r1, r5
   dcf64:	4620      	mov	r0, r4
}
   dcf66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dcf6a:	f7fd ba63 	b.w	da434 <HAL_GPIO_Write>
   dcf6e:	bd38      	pop	{r3, r4, r5, pc}

000dcf70 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dcf70:	b510      	push	{r4, lr}
   dcf72:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dcf74:	f7fd fa56 	bl	da424 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dcf78:	3804      	subs	r0, #4
   dcf7a:	b2c0      	uxtb	r0, r0
   dcf7c:	2801      	cmp	r0, #1
   dcf7e:	d908      	bls.n	dcf92 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dcf80:	4620      	mov	r0, r4
   dcf82:	f7ff ffa7 	bl	dced4 <pinAvailable>
   dcf86:	b120      	cbz	r0, dcf92 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dcf88:	4620      	mov	r0, r4
}
   dcf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dcf8e:	f7fd ba59 	b.w	da444 <HAL_GPIO_Read>
}
   dcf92:	2000      	movs	r0, #0
   dcf94:	bd10      	pop	{r4, pc}

000dcf96 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dcf96:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dcf98:	b510      	push	{r4, lr}
   dcf9a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dcf9c:	bf9c      	itt	ls
   dcf9e:	340e      	addls	r4, #14
   dcfa0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dcfa2:	4620      	mov	r0, r4
   dcfa4:	f7ff ff96 	bl	dced4 <pinAvailable>
   dcfa8:	b150      	cbz	r0, dcfc0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dcfaa:	2103      	movs	r1, #3
   dcfac:	4620      	mov	r0, r4
   dcfae:	f7fd fa29 	bl	da404 <HAL_Validate_Pin_Function>
   dcfb2:	2803      	cmp	r0, #3
   dcfb4:	d104      	bne.n	dcfc0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dcfb6:	4620      	mov	r0, r4
}
   dcfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dcfbc:	f7fd ba62 	b.w	da484 <HAL_ADC_Read>
}
   dcfc0:	2000      	movs	r0, #0
   dcfc2:	bd10      	pop	{r4, pc}

000dcfc4 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dcfc4:	b538      	push	{r3, r4, r5, lr}
   dcfc6:	4604      	mov	r4, r0
   dcfc8:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dcfca:	f7ff ff83 	bl	dced4 <pinAvailable>
   dcfce:	b1f0      	cbz	r0, dd00e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dcfd0:	2104      	movs	r1, #4
   dcfd2:	4620      	mov	r0, r4
   dcfd4:	f7fd fa16 	bl	da404 <HAL_Validate_Pin_Function>
   dcfd8:	2804      	cmp	r0, #4
   dcfda:	d105      	bne.n	dcfe8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dcfdc:	b2a9      	uxth	r1, r5
   dcfde:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dcfe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dcfe4:	f7fd ba46 	b.w	da474 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dcfe8:	2102      	movs	r1, #2
   dcfea:	4620      	mov	r0, r4
   dcfec:	f7fd fa0a 	bl	da404 <HAL_Validate_Pin_Function>
   dcff0:	2802      	cmp	r0, #2
   dcff2:	d10c      	bne.n	dd00e <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dcff4:	4620      	mov	r0, r4
   dcff6:	f7fd fa15 	bl	da424 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dcffa:	2801      	cmp	r0, #1
   dcffc:	d001      	beq.n	dd002 <_Z11analogWritetm+0x3e>
   dcffe:	2804      	cmp	r0, #4
   dd000:	d105      	bne.n	dd00e <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd002:	4629      	mov	r1, r5
   dd004:	4620      	mov	r0, r4
    }
}
   dd006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd00a:	f7fd ba43 	b.w	da494 <HAL_PWM_Write_Ext>
   dd00e:	bd38      	pop	{r3, r4, r5, pc}

000dd010 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dd010:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dd012:	4c0c      	ldr	r4, [pc, #48]	; (dd044 <_GLOBAL__sub_I_SPI+0x34>)
   dd014:	4e0c      	ldr	r6, [pc, #48]	; (dd048 <_GLOBAL__sub_I_SPI+0x38>)
   dd016:	4d0d      	ldr	r5, [pc, #52]	; (dd04c <_GLOBAL__sub_I_SPI+0x3c>)
   dd018:	2100      	movs	r1, #0
   dd01a:	4620      	mov	r0, r4
   dd01c:	f7fd fdf8 	bl	dac10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dd020:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dd022:	4c0b      	ldr	r4, [pc, #44]	; (dd050 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dd024:	4632      	mov	r2, r6
   dd026:	4629      	mov	r1, r5
   dd028:	f000 f854 	bl	dd0d4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dd02c:	2101      	movs	r1, #1
   dd02e:	4620      	mov	r0, r4
   dd030:	f7fd fdee 	bl	dac10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dd034:	4632      	mov	r2, r6
   dd036:	4629      	mov	r1, r5
   dd038:	4620      	mov	r0, r4
   dd03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd03e:	f000 b849 	b.w	dd0d4 <__aeabi_atexit>
   dd042:	bf00      	nop
   dd044:	2003e5d8 	.word	0x2003e5d8
   dd048:	2003d670 	.word	0x2003d670
   dd04c:	000dac01 	.word	0x000dac01
   dd050:	2003e5e8 	.word	0x2003e5e8

000dd054 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   dd054:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   dd056:	4d0b      	ldr	r5, [pc, #44]	; (dd084 <_Z19__fetch_global_Wirev+0x30>)
   dd058:	6829      	ldr	r1, [r5, #0]
   dd05a:	f011 0401 	ands.w	r4, r1, #1
   dd05e:	d10f      	bne.n	dd080 <_Z19__fetch_global_Wirev+0x2c>
   dd060:	4628      	mov	r0, r5
   dd062:	f7f7 f820 	bl	d40a6 <__cxa_guard_acquire>
   dd066:	b158      	cbz	r0, dd080 <_Z19__fetch_global_Wirev+0x2c>
   dd068:	4621      	mov	r1, r4
   dd06a:	4807      	ldr	r0, [pc, #28]	; (dd088 <_Z19__fetch_global_Wirev+0x34>)
   dd06c:	f7ff fab6 	bl	dc5dc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dd070:	4628      	mov	r0, r5
   dd072:	f7f7 f81d 	bl	d40b0 <__cxa_guard_release>
   dd076:	4a05      	ldr	r2, [pc, #20]	; (dd08c <_Z19__fetch_global_Wirev+0x38>)
   dd078:	4905      	ldr	r1, [pc, #20]	; (dd090 <_Z19__fetch_global_Wirev+0x3c>)
   dd07a:	4803      	ldr	r0, [pc, #12]	; (dd088 <_Z19__fetch_global_Wirev+0x34>)
   dd07c:	f000 f82a 	bl	dd0d4 <__aeabi_atexit>
	return wire;
}
   dd080:	4801      	ldr	r0, [pc, #4]	; (dd088 <_Z19__fetch_global_Wirev+0x34>)
   dd082:	bd38      	pop	{r3, r4, r5, pc}
   dd084:	2003e5fc 	.word	0x2003e5fc
   dd088:	2003e614 	.word	0x2003e614
   dd08c:	2003d670 	.word	0x2003d670
   dd090:	000dc585 	.word	0x000dc585

000dd094 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dd094:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   dd096:	4c0b      	ldr	r4, [pc, #44]	; (dd0c4 <_Z20__fetch_global_Wire1v+0x30>)
   dd098:	6823      	ldr	r3, [r4, #0]
   dd09a:	07db      	lsls	r3, r3, #31
   dd09c:	d40f      	bmi.n	dd0be <_Z20__fetch_global_Wire1v+0x2a>
   dd09e:	4620      	mov	r0, r4
   dd0a0:	f7f7 f801 	bl	d40a6 <__cxa_guard_acquire>
   dd0a4:	b158      	cbz	r0, dd0be <_Z20__fetch_global_Wire1v+0x2a>
   dd0a6:	2101      	movs	r1, #1
   dd0a8:	4807      	ldr	r0, [pc, #28]	; (dd0c8 <_Z20__fetch_global_Wire1v+0x34>)
   dd0aa:	f7ff fa97 	bl	dc5dc <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dd0ae:	4620      	mov	r0, r4
   dd0b0:	f7f6 fffe 	bl	d40b0 <__cxa_guard_release>
   dd0b4:	4a05      	ldr	r2, [pc, #20]	; (dd0cc <_Z20__fetch_global_Wire1v+0x38>)
   dd0b6:	4906      	ldr	r1, [pc, #24]	; (dd0d0 <_Z20__fetch_global_Wire1v+0x3c>)
   dd0b8:	4803      	ldr	r0, [pc, #12]	; (dd0c8 <_Z20__fetch_global_Wire1v+0x34>)
   dd0ba:	f000 f80b 	bl	dd0d4 <__aeabi_atexit>
	return wire;
}
   dd0be:	4802      	ldr	r0, [pc, #8]	; (dd0c8 <_Z20__fetch_global_Wire1v+0x34>)
   dd0c0:	bd10      	pop	{r4, pc}
   dd0c2:	bf00      	nop
   dd0c4:	2003e628 	.word	0x2003e628
   dd0c8:	2003e600 	.word	0x2003e600
   dd0cc:	2003d670 	.word	0x2003d670
   dd0d0:	000dc585 	.word	0x000dc585

000dd0d4 <__aeabi_atexit>:
   dd0d4:	460b      	mov	r3, r1
   dd0d6:	4601      	mov	r1, r0
   dd0d8:	4618      	mov	r0, r3
   dd0da:	f006 b991 	b.w	e3400 <__cxa_atexit>

000dd0de <_ZdlPvj>:
   dd0de:	f7f6 bfde 	b.w	d409e <_ZdlPv>

000dd0e2 <_ZSt25__throw_bad_function_callv>:
   dd0e2:	b508      	push	{r3, lr}
   dd0e4:	f7fd fd0e 	bl	dab04 <abort>

000dd0e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd0e8:	4b18      	ldr	r3, [pc, #96]	; (dd14c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd0ea:	681a      	ldr	r2, [r3, #0]
   dd0ec:	07d1      	lsls	r1, r2, #31
   dd0ee:	bf5c      	itt	pl
   dd0f0:	2201      	movpl	r2, #1
   dd0f2:	601a      	strpl	r2, [r3, #0]
   dd0f4:	4b16      	ldr	r3, [pc, #88]	; (dd150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd0f6:	681a      	ldr	r2, [r3, #0]
   dd0f8:	07d2      	lsls	r2, r2, #31
   dd0fa:	bf5c      	itt	pl
   dd0fc:	2201      	movpl	r2, #1
   dd0fe:	601a      	strpl	r2, [r3, #0]
   dd100:	4b14      	ldr	r3, [pc, #80]	; (dd154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd102:	681a      	ldr	r2, [r3, #0]
   dd104:	07d0      	lsls	r0, r2, #31
   dd106:	bf5c      	itt	pl
   dd108:	2201      	movpl	r2, #1
   dd10a:	601a      	strpl	r2, [r3, #0]
   dd10c:	4b12      	ldr	r3, [pc, #72]	; (dd158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd10e:	681a      	ldr	r2, [r3, #0]
   dd110:	07d1      	lsls	r1, r2, #31
   dd112:	bf5c      	itt	pl
   dd114:	2201      	movpl	r2, #1
   dd116:	601a      	strpl	r2, [r3, #0]
   dd118:	4b10      	ldr	r3, [pc, #64]	; (dd15c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd11a:	681a      	ldr	r2, [r3, #0]
   dd11c:	07d2      	lsls	r2, r2, #31
   dd11e:	bf5c      	itt	pl
   dd120:	2201      	movpl	r2, #1
   dd122:	601a      	strpl	r2, [r3, #0]
   dd124:	4b0e      	ldr	r3, [pc, #56]	; (dd160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd126:	681a      	ldr	r2, [r3, #0]
   dd128:	07d0      	lsls	r0, r2, #31
   dd12a:	bf5c      	itt	pl
   dd12c:	2201      	movpl	r2, #1
   dd12e:	601a      	strpl	r2, [r3, #0]
   dd130:	4b0c      	ldr	r3, [pc, #48]	; (dd164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd132:	681a      	ldr	r2, [r3, #0]
   dd134:	07d1      	lsls	r1, r2, #31
   dd136:	bf5c      	itt	pl
   dd138:	2201      	movpl	r2, #1
   dd13a:	601a      	strpl	r2, [r3, #0]
   dd13c:	4b0a      	ldr	r3, [pc, #40]	; (dd168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd13e:	681a      	ldr	r2, [r3, #0]
   dd140:	07d2      	lsls	r2, r2, #31
   dd142:	bf5c      	itt	pl
   dd144:	2201      	movpl	r2, #1
   dd146:	601a      	strpl	r2, [r3, #0]
   dd148:	4770      	bx	lr
   dd14a:	bf00      	nop
   dd14c:	2003e648 	.word	0x2003e648
   dd150:	2003e644 	.word	0x2003e644
   dd154:	2003e640 	.word	0x2003e640
   dd158:	2003e63c 	.word	0x2003e63c
   dd15c:	2003e638 	.word	0x2003e638
   dd160:	2003e634 	.word	0x2003e634
   dd164:	2003e630 	.word	0x2003e630
   dd168:	2003e62c 	.word	0x2003e62c

000dd16c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dd16c:	4b24      	ldr	r3, [pc, #144]	; (dd200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dd16e:	681a      	ldr	r2, [r3, #0]
   dd170:	07d0      	lsls	r0, r2, #31
   dd172:	bf5c      	itt	pl
   dd174:	2201      	movpl	r2, #1
   dd176:	601a      	strpl	r2, [r3, #0]
   dd178:	4b22      	ldr	r3, [pc, #136]	; (dd204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dd17a:	681a      	ldr	r2, [r3, #0]
   dd17c:	07d1      	lsls	r1, r2, #31
   dd17e:	bf5c      	itt	pl
   dd180:	2201      	movpl	r2, #1
   dd182:	601a      	strpl	r2, [r3, #0]
   dd184:	4b20      	ldr	r3, [pc, #128]	; (dd208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dd186:	681a      	ldr	r2, [r3, #0]
   dd188:	07d2      	lsls	r2, r2, #31
   dd18a:	bf5c      	itt	pl
   dd18c:	2201      	movpl	r2, #1
   dd18e:	601a      	strpl	r2, [r3, #0]
   dd190:	4b1e      	ldr	r3, [pc, #120]	; (dd20c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dd192:	681a      	ldr	r2, [r3, #0]
   dd194:	07d0      	lsls	r0, r2, #31
   dd196:	bf5c      	itt	pl
   dd198:	2201      	movpl	r2, #1
   dd19a:	601a      	strpl	r2, [r3, #0]
   dd19c:	4b1c      	ldr	r3, [pc, #112]	; (dd210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dd19e:	681a      	ldr	r2, [r3, #0]
   dd1a0:	07d1      	lsls	r1, r2, #31
   dd1a2:	bf5c      	itt	pl
   dd1a4:	2201      	movpl	r2, #1
   dd1a6:	601a      	strpl	r2, [r3, #0]
   dd1a8:	4b1a      	ldr	r3, [pc, #104]	; (dd214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dd1aa:	681a      	ldr	r2, [r3, #0]
   dd1ac:	07d2      	lsls	r2, r2, #31
   dd1ae:	bf5c      	itt	pl
   dd1b0:	2201      	movpl	r2, #1
   dd1b2:	601a      	strpl	r2, [r3, #0]
   dd1b4:	4b18      	ldr	r3, [pc, #96]	; (dd218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dd1b6:	681a      	ldr	r2, [r3, #0]
   dd1b8:	07d0      	lsls	r0, r2, #31
   dd1ba:	bf5c      	itt	pl
   dd1bc:	2201      	movpl	r2, #1
   dd1be:	601a      	strpl	r2, [r3, #0]
   dd1c0:	4b16      	ldr	r3, [pc, #88]	; (dd21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dd1c2:	681a      	ldr	r2, [r3, #0]
   dd1c4:	07d1      	lsls	r1, r2, #31
   dd1c6:	bf5c      	itt	pl
   dd1c8:	2201      	movpl	r2, #1
   dd1ca:	601a      	strpl	r2, [r3, #0]
   dd1cc:	4b14      	ldr	r3, [pc, #80]	; (dd220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dd1ce:	681a      	ldr	r2, [r3, #0]
   dd1d0:	07d2      	lsls	r2, r2, #31
   dd1d2:	bf5c      	itt	pl
   dd1d4:	2201      	movpl	r2, #1
   dd1d6:	601a      	strpl	r2, [r3, #0]
   dd1d8:	4b12      	ldr	r3, [pc, #72]	; (dd224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dd1da:	681a      	ldr	r2, [r3, #0]
   dd1dc:	07d0      	lsls	r0, r2, #31
   dd1de:	bf5c      	itt	pl
   dd1e0:	2201      	movpl	r2, #1
   dd1e2:	601a      	strpl	r2, [r3, #0]
   dd1e4:	4b10      	ldr	r3, [pc, #64]	; (dd228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dd1e6:	681a      	ldr	r2, [r3, #0]
   dd1e8:	07d1      	lsls	r1, r2, #31
   dd1ea:	bf5c      	itt	pl
   dd1ec:	2201      	movpl	r2, #1
   dd1ee:	601a      	strpl	r2, [r3, #0]
   dd1f0:	4b0e      	ldr	r3, [pc, #56]	; (dd22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dd1f2:	681a      	ldr	r2, [r3, #0]
   dd1f4:	07d2      	lsls	r2, r2, #31
   dd1f6:	bf5c      	itt	pl
   dd1f8:	2201      	movpl	r2, #1
   dd1fa:	601a      	strpl	r2, [r3, #0]
   dd1fc:	4770      	bx	lr
   dd1fe:	bf00      	nop
   dd200:	2003e678 	.word	0x2003e678
   dd204:	2003e674 	.word	0x2003e674
   dd208:	2003e670 	.word	0x2003e670
   dd20c:	2003e66c 	.word	0x2003e66c
   dd210:	2003e668 	.word	0x2003e668
   dd214:	2003e664 	.word	0x2003e664
   dd218:	2003e660 	.word	0x2003e660
   dd21c:	2003e65c 	.word	0x2003e65c
   dd220:	2003e658 	.word	0x2003e658
   dd224:	2003e654 	.word	0x2003e654
   dd228:	2003e650 	.word	0x2003e650
   dd22c:	2003e64c 	.word	0x2003e64c

000dd230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dd230:	4b24      	ldr	r3, [pc, #144]	; (dd2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dd232:	681a      	ldr	r2, [r3, #0]
   dd234:	07d0      	lsls	r0, r2, #31
   dd236:	bf5c      	itt	pl
   dd238:	2201      	movpl	r2, #1
   dd23a:	601a      	strpl	r2, [r3, #0]
   dd23c:	4b22      	ldr	r3, [pc, #136]	; (dd2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dd23e:	681a      	ldr	r2, [r3, #0]
   dd240:	07d1      	lsls	r1, r2, #31
   dd242:	bf5c      	itt	pl
   dd244:	2201      	movpl	r2, #1
   dd246:	601a      	strpl	r2, [r3, #0]
   dd248:	4b20      	ldr	r3, [pc, #128]	; (dd2cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dd24a:	681a      	ldr	r2, [r3, #0]
   dd24c:	07d2      	lsls	r2, r2, #31
   dd24e:	bf5c      	itt	pl
   dd250:	2201      	movpl	r2, #1
   dd252:	601a      	strpl	r2, [r3, #0]
   dd254:	4b1e      	ldr	r3, [pc, #120]	; (dd2d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dd256:	681a      	ldr	r2, [r3, #0]
   dd258:	07d0      	lsls	r0, r2, #31
   dd25a:	bf5c      	itt	pl
   dd25c:	2201      	movpl	r2, #1
   dd25e:	601a      	strpl	r2, [r3, #0]
   dd260:	4b1c      	ldr	r3, [pc, #112]	; (dd2d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dd262:	681a      	ldr	r2, [r3, #0]
   dd264:	07d1      	lsls	r1, r2, #31
   dd266:	bf5c      	itt	pl
   dd268:	2201      	movpl	r2, #1
   dd26a:	601a      	strpl	r2, [r3, #0]
   dd26c:	4b1a      	ldr	r3, [pc, #104]	; (dd2d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dd26e:	681a      	ldr	r2, [r3, #0]
   dd270:	07d2      	lsls	r2, r2, #31
   dd272:	bf5c      	itt	pl
   dd274:	2201      	movpl	r2, #1
   dd276:	601a      	strpl	r2, [r3, #0]
   dd278:	4b18      	ldr	r3, [pc, #96]	; (dd2dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dd27a:	681a      	ldr	r2, [r3, #0]
   dd27c:	07d0      	lsls	r0, r2, #31
   dd27e:	bf5c      	itt	pl
   dd280:	2201      	movpl	r2, #1
   dd282:	601a      	strpl	r2, [r3, #0]
   dd284:	4b16      	ldr	r3, [pc, #88]	; (dd2e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dd286:	681a      	ldr	r2, [r3, #0]
   dd288:	07d1      	lsls	r1, r2, #31
   dd28a:	bf5c      	itt	pl
   dd28c:	2201      	movpl	r2, #1
   dd28e:	601a      	strpl	r2, [r3, #0]
   dd290:	4b14      	ldr	r3, [pc, #80]	; (dd2e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dd292:	681a      	ldr	r2, [r3, #0]
   dd294:	07d2      	lsls	r2, r2, #31
   dd296:	bf5c      	itt	pl
   dd298:	2201      	movpl	r2, #1
   dd29a:	601a      	strpl	r2, [r3, #0]
   dd29c:	4b12      	ldr	r3, [pc, #72]	; (dd2e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dd29e:	681a      	ldr	r2, [r3, #0]
   dd2a0:	07d0      	lsls	r0, r2, #31
   dd2a2:	bf5c      	itt	pl
   dd2a4:	2201      	movpl	r2, #1
   dd2a6:	601a      	strpl	r2, [r3, #0]
   dd2a8:	4b10      	ldr	r3, [pc, #64]	; (dd2ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dd2aa:	681a      	ldr	r2, [r3, #0]
   dd2ac:	07d1      	lsls	r1, r2, #31
   dd2ae:	bf5c      	itt	pl
   dd2b0:	2201      	movpl	r2, #1
   dd2b2:	601a      	strpl	r2, [r3, #0]
   dd2b4:	4b0e      	ldr	r3, [pc, #56]	; (dd2f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dd2b6:	681a      	ldr	r2, [r3, #0]
   dd2b8:	07d2      	lsls	r2, r2, #31
   dd2ba:	bf5c      	itt	pl
   dd2bc:	2201      	movpl	r2, #1
   dd2be:	601a      	strpl	r2, [r3, #0]
   dd2c0:	4770      	bx	lr
   dd2c2:	bf00      	nop
   dd2c4:	2003e6a8 	.word	0x2003e6a8
   dd2c8:	2003e6a4 	.word	0x2003e6a4
   dd2cc:	2003e6a0 	.word	0x2003e6a0
   dd2d0:	2003e69c 	.word	0x2003e69c
   dd2d4:	2003e698 	.word	0x2003e698
   dd2d8:	2003e694 	.word	0x2003e694
   dd2dc:	2003e690 	.word	0x2003e690
   dd2e0:	2003e68c 	.word	0x2003e68c
   dd2e4:	2003e688 	.word	0x2003e688
   dd2e8:	2003e684 	.word	0x2003e684
   dd2ec:	2003e680 	.word	0x2003e680
   dd2f0:	2003e67c 	.word	0x2003e67c

000dd2f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd2f4:	4b18      	ldr	r3, [pc, #96]	; (dd358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd2f6:	681a      	ldr	r2, [r3, #0]
   dd2f8:	07d1      	lsls	r1, r2, #31
   dd2fa:	bf5c      	itt	pl
   dd2fc:	2201      	movpl	r2, #1
   dd2fe:	601a      	strpl	r2, [r3, #0]
   dd300:	4b16      	ldr	r3, [pc, #88]	; (dd35c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd302:	681a      	ldr	r2, [r3, #0]
   dd304:	07d2      	lsls	r2, r2, #31
   dd306:	bf5c      	itt	pl
   dd308:	2201      	movpl	r2, #1
   dd30a:	601a      	strpl	r2, [r3, #0]
   dd30c:	4b14      	ldr	r3, [pc, #80]	; (dd360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd30e:	681a      	ldr	r2, [r3, #0]
   dd310:	07d0      	lsls	r0, r2, #31
   dd312:	bf5c      	itt	pl
   dd314:	2201      	movpl	r2, #1
   dd316:	601a      	strpl	r2, [r3, #0]
   dd318:	4b12      	ldr	r3, [pc, #72]	; (dd364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd31a:	681a      	ldr	r2, [r3, #0]
   dd31c:	07d1      	lsls	r1, r2, #31
   dd31e:	bf5c      	itt	pl
   dd320:	2201      	movpl	r2, #1
   dd322:	601a      	strpl	r2, [r3, #0]
   dd324:	4b10      	ldr	r3, [pc, #64]	; (dd368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd326:	681a      	ldr	r2, [r3, #0]
   dd328:	07d2      	lsls	r2, r2, #31
   dd32a:	bf5c      	itt	pl
   dd32c:	2201      	movpl	r2, #1
   dd32e:	601a      	strpl	r2, [r3, #0]
   dd330:	4b0e      	ldr	r3, [pc, #56]	; (dd36c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd332:	681a      	ldr	r2, [r3, #0]
   dd334:	07d0      	lsls	r0, r2, #31
   dd336:	bf5c      	itt	pl
   dd338:	2201      	movpl	r2, #1
   dd33a:	601a      	strpl	r2, [r3, #0]
   dd33c:	4b0c      	ldr	r3, [pc, #48]	; (dd370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd33e:	681a      	ldr	r2, [r3, #0]
   dd340:	07d1      	lsls	r1, r2, #31
   dd342:	bf5c      	itt	pl
   dd344:	2201      	movpl	r2, #1
   dd346:	601a      	strpl	r2, [r3, #0]
   dd348:	4b0a      	ldr	r3, [pc, #40]	; (dd374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd34a:	681a      	ldr	r2, [r3, #0]
   dd34c:	07d2      	lsls	r2, r2, #31
   dd34e:	bf5c      	itt	pl
   dd350:	2201      	movpl	r2, #1
   dd352:	601a      	strpl	r2, [r3, #0]
   dd354:	4770      	bx	lr
   dd356:	bf00      	nop
   dd358:	2003e6c8 	.word	0x2003e6c8
   dd35c:	2003e6c4 	.word	0x2003e6c4
   dd360:	2003e6c0 	.word	0x2003e6c0
   dd364:	2003e6bc 	.word	0x2003e6bc
   dd368:	2003e6b8 	.word	0x2003e6b8
   dd36c:	2003e6b4 	.word	0x2003e6b4
   dd370:	2003e6b0 	.word	0x2003e6b0
   dd374:	2003e6ac 	.word	0x2003e6ac

000dd378 <atan>:
   dd378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd37c:	ec55 4b10 	vmov	r4, r5, d0
   dd380:	4bd1      	ldr	r3, [pc, #836]	; (dd6c8 <atan+0x350>)
   dd382:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dd386:	429e      	cmp	r6, r3
   dd388:	46ab      	mov	fp, r5
   dd38a:	dd10      	ble.n	dd3ae <atan+0x36>
   dd38c:	4bcf      	ldr	r3, [pc, #828]	; (dd6cc <atan+0x354>)
   dd38e:	429e      	cmp	r6, r3
   dd390:	f300 80b2 	bgt.w	dd4f8 <atan+0x180>
   dd394:	f000 80ad 	beq.w	dd4f2 <atan+0x17a>
   dd398:	f1bb 0f00 	cmp.w	fp, #0
   dd39c:	f340 80fd 	ble.w	dd59a <atan+0x222>
   dd3a0:	a5ad      	add	r5, pc, #692	; (adr r5, dd658 <atan+0x2e0>)
   dd3a2:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd3a6:	ec45 4b10 	vmov	d0, r4, r5
   dd3aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3ae:	4bc8      	ldr	r3, [pc, #800]	; (dd6d0 <atan+0x358>)
   dd3b0:	429e      	cmp	r6, r3
   dd3b2:	f300 80c0 	bgt.w	dd536 <atan+0x1be>
   dd3b6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dd3ba:	429e      	cmp	r6, r3
   dd3bc:	f340 80a8 	ble.w	dd510 <atan+0x198>
   dd3c0:	f04f 3aff 	mov.w	sl, #4294967295
   dd3c4:	4622      	mov	r2, r4
   dd3c6:	462b      	mov	r3, r5
   dd3c8:	4620      	mov	r0, r4
   dd3ca:	4629      	mov	r1, r5
   dd3cc:	f005 fc88 	bl	e2ce0 <__aeabi_dmul>
   dd3d0:	4602      	mov	r2, r0
   dd3d2:	460b      	mov	r3, r1
   dd3d4:	4680      	mov	r8, r0
   dd3d6:	4689      	mov	r9, r1
   dd3d8:	f005 fc82 	bl	e2ce0 <__aeabi_dmul>
   dd3dc:	a3a0      	add	r3, pc, #640	; (adr r3, dd660 <atan+0x2e8>)
   dd3de:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3e2:	4606      	mov	r6, r0
   dd3e4:	460f      	mov	r7, r1
   dd3e6:	f005 fc7b 	bl	e2ce0 <__aeabi_dmul>
   dd3ea:	a39f      	add	r3, pc, #636	; (adr r3, dd668 <atan+0x2f0>)
   dd3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3f0:	f005 fac4 	bl	e297c <__adddf3>
   dd3f4:	4632      	mov	r2, r6
   dd3f6:	463b      	mov	r3, r7
   dd3f8:	f005 fc72 	bl	e2ce0 <__aeabi_dmul>
   dd3fc:	a39c      	add	r3, pc, #624	; (adr r3, dd670 <atan+0x2f8>)
   dd3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd402:	f005 fabb 	bl	e297c <__adddf3>
   dd406:	4632      	mov	r2, r6
   dd408:	463b      	mov	r3, r7
   dd40a:	f005 fc69 	bl	e2ce0 <__aeabi_dmul>
   dd40e:	a39a      	add	r3, pc, #616	; (adr r3, dd678 <atan+0x300>)
   dd410:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd414:	f005 fab2 	bl	e297c <__adddf3>
   dd418:	4632      	mov	r2, r6
   dd41a:	463b      	mov	r3, r7
   dd41c:	f005 fc60 	bl	e2ce0 <__aeabi_dmul>
   dd420:	a397      	add	r3, pc, #604	; (adr r3, dd680 <atan+0x308>)
   dd422:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd426:	f005 faa9 	bl	e297c <__adddf3>
   dd42a:	4632      	mov	r2, r6
   dd42c:	463b      	mov	r3, r7
   dd42e:	f005 fc57 	bl	e2ce0 <__aeabi_dmul>
   dd432:	a395      	add	r3, pc, #596	; (adr r3, dd688 <atan+0x310>)
   dd434:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd438:	f005 faa0 	bl	e297c <__adddf3>
   dd43c:	4642      	mov	r2, r8
   dd43e:	464b      	mov	r3, r9
   dd440:	f005 fc4e 	bl	e2ce0 <__aeabi_dmul>
   dd444:	a392      	add	r3, pc, #584	; (adr r3, dd690 <atan+0x318>)
   dd446:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd44a:	4680      	mov	r8, r0
   dd44c:	4689      	mov	r9, r1
   dd44e:	4630      	mov	r0, r6
   dd450:	4639      	mov	r1, r7
   dd452:	f005 fc45 	bl	e2ce0 <__aeabi_dmul>
   dd456:	a390      	add	r3, pc, #576	; (adr r3, dd698 <atan+0x320>)
   dd458:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd45c:	f005 fa8c 	bl	e2978 <__aeabi_dsub>
   dd460:	4632      	mov	r2, r6
   dd462:	463b      	mov	r3, r7
   dd464:	f005 fc3c 	bl	e2ce0 <__aeabi_dmul>
   dd468:	a38d      	add	r3, pc, #564	; (adr r3, dd6a0 <atan+0x328>)
   dd46a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd46e:	f005 fa83 	bl	e2978 <__aeabi_dsub>
   dd472:	4632      	mov	r2, r6
   dd474:	463b      	mov	r3, r7
   dd476:	f005 fc33 	bl	e2ce0 <__aeabi_dmul>
   dd47a:	a38b      	add	r3, pc, #556	; (adr r3, dd6a8 <atan+0x330>)
   dd47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd480:	f005 fa7a 	bl	e2978 <__aeabi_dsub>
   dd484:	4632      	mov	r2, r6
   dd486:	463b      	mov	r3, r7
   dd488:	f005 fc2a 	bl	e2ce0 <__aeabi_dmul>
   dd48c:	a388      	add	r3, pc, #544	; (adr r3, dd6b0 <atan+0x338>)
   dd48e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd492:	f005 fa71 	bl	e2978 <__aeabi_dsub>
   dd496:	4632      	mov	r2, r6
   dd498:	463b      	mov	r3, r7
   dd49a:	f005 fc21 	bl	e2ce0 <__aeabi_dmul>
   dd49e:	f1ba 3fff 	cmp.w	sl, #4294967295
   dd4a2:	4602      	mov	r2, r0
   dd4a4:	460b      	mov	r3, r1
   dd4a6:	d07c      	beq.n	dd5a2 <atan+0x22a>
   dd4a8:	4640      	mov	r0, r8
   dd4aa:	4649      	mov	r1, r9
   dd4ac:	f005 fa66 	bl	e297c <__adddf3>
   dd4b0:	4622      	mov	r2, r4
   dd4b2:	462b      	mov	r3, r5
   dd4b4:	f005 fc14 	bl	e2ce0 <__aeabi_dmul>
   dd4b8:	4e86      	ldr	r6, [pc, #536]	; (dd6d4 <atan+0x35c>)
   dd4ba:	4b87      	ldr	r3, [pc, #540]	; (dd6d8 <atan+0x360>)
   dd4bc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dd4c0:	4456      	add	r6, sl
   dd4c2:	449a      	add	sl, r3
   dd4c4:	e9da 2300 	ldrd	r2, r3, [sl]
   dd4c8:	f005 fa56 	bl	e2978 <__aeabi_dsub>
   dd4cc:	4622      	mov	r2, r4
   dd4ce:	462b      	mov	r3, r5
   dd4d0:	f005 fa52 	bl	e2978 <__aeabi_dsub>
   dd4d4:	4602      	mov	r2, r0
   dd4d6:	460b      	mov	r3, r1
   dd4d8:	e9d6 0100 	ldrd	r0, r1, [r6]
   dd4dc:	f005 fa4c 	bl	e2978 <__aeabi_dsub>
   dd4e0:	f1bb 0f00 	cmp.w	fp, #0
   dd4e4:	db52      	blt.n	dd58c <atan+0x214>
   dd4e6:	4604      	mov	r4, r0
   dd4e8:	460d      	mov	r5, r1
   dd4ea:	ec45 4b10 	vmov	d0, r4, r5
   dd4ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4f2:	2c00      	cmp	r4, #0
   dd4f4:	f43f af50 	beq.w	dd398 <atan+0x20>
   dd4f8:	4622      	mov	r2, r4
   dd4fa:	462b      	mov	r3, r5
   dd4fc:	4620      	mov	r0, r4
   dd4fe:	4629      	mov	r1, r5
   dd500:	f005 fa3c 	bl	e297c <__adddf3>
   dd504:	4604      	mov	r4, r0
   dd506:	460d      	mov	r5, r1
   dd508:	ec45 4b10 	vmov	d0, r4, r5
   dd50c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd510:	a369      	add	r3, pc, #420	; (adr r3, dd6b8 <atan+0x340>)
   dd512:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd516:	ee10 0a10 	vmov	r0, s0
   dd51a:	4629      	mov	r1, r5
   dd51c:	f005 fa2e 	bl	e297c <__adddf3>
   dd520:	2200      	movs	r2, #0
   dd522:	4b6e      	ldr	r3, [pc, #440]	; (dd6dc <atan+0x364>)
   dd524:	f005 fe6c 	bl	e3200 <__aeabi_dcmpgt>
   dd528:	2800      	cmp	r0, #0
   dd52a:	f43f af49 	beq.w	dd3c0 <atan+0x48>
   dd52e:	ec45 4b10 	vmov	d0, r4, r5
   dd532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd536:	f000 f9cb 	bl	dd8d0 <fabs>
   dd53a:	4b69      	ldr	r3, [pc, #420]	; (dd6e0 <atan+0x368>)
   dd53c:	429e      	cmp	r6, r3
   dd53e:	ec55 4b10 	vmov	r4, r5, d0
   dd542:	dc3f      	bgt.n	dd5c4 <atan+0x24c>
   dd544:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dd548:	429e      	cmp	r6, r3
   dd54a:	dc68      	bgt.n	dd61e <atan+0x2a6>
   dd54c:	ee10 2a10 	vmov	r2, s0
   dd550:	ee10 0a10 	vmov	r0, s0
   dd554:	462b      	mov	r3, r5
   dd556:	4629      	mov	r1, r5
   dd558:	f005 fa10 	bl	e297c <__adddf3>
   dd55c:	2200      	movs	r2, #0
   dd55e:	4b5f      	ldr	r3, [pc, #380]	; (dd6dc <atan+0x364>)
   dd560:	f005 fa0a 	bl	e2978 <__aeabi_dsub>
   dd564:	2200      	movs	r2, #0
   dd566:	4606      	mov	r6, r0
   dd568:	460f      	mov	r7, r1
   dd56a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd56e:	4620      	mov	r0, r4
   dd570:	4629      	mov	r1, r5
   dd572:	f005 fa03 	bl	e297c <__adddf3>
   dd576:	4602      	mov	r2, r0
   dd578:	460b      	mov	r3, r1
   dd57a:	4630      	mov	r0, r6
   dd57c:	4639      	mov	r1, r7
   dd57e:	f005 fcd9 	bl	e2f34 <__aeabi_ddiv>
   dd582:	f04f 0a00 	mov.w	sl, #0
   dd586:	4604      	mov	r4, r0
   dd588:	460d      	mov	r5, r1
   dd58a:	e71b      	b.n	dd3c4 <atan+0x4c>
   dd58c:	4604      	mov	r4, r0
   dd58e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dd592:	ec45 4b10 	vmov	d0, r4, r5
   dd596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd59a:	a549      	add	r5, pc, #292	; (adr r5, dd6c0 <atan+0x348>)
   dd59c:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd5a0:	e7b2      	b.n	dd508 <atan+0x190>
   dd5a2:	4640      	mov	r0, r8
   dd5a4:	4649      	mov	r1, r9
   dd5a6:	f005 f9e9 	bl	e297c <__adddf3>
   dd5aa:	4622      	mov	r2, r4
   dd5ac:	462b      	mov	r3, r5
   dd5ae:	f005 fb97 	bl	e2ce0 <__aeabi_dmul>
   dd5b2:	4602      	mov	r2, r0
   dd5b4:	460b      	mov	r3, r1
   dd5b6:	4620      	mov	r0, r4
   dd5b8:	4629      	mov	r1, r5
   dd5ba:	f005 f9dd 	bl	e2978 <__aeabi_dsub>
   dd5be:	4604      	mov	r4, r0
   dd5c0:	460d      	mov	r5, r1
   dd5c2:	e7a1      	b.n	dd508 <atan+0x190>
   dd5c4:	4b47      	ldr	r3, [pc, #284]	; (dd6e4 <atan+0x36c>)
   dd5c6:	429e      	cmp	r6, r3
   dd5c8:	dc1d      	bgt.n	dd606 <atan+0x28e>
   dd5ca:	ee10 0a10 	vmov	r0, s0
   dd5ce:	2200      	movs	r2, #0
   dd5d0:	4b45      	ldr	r3, [pc, #276]	; (dd6e8 <atan+0x370>)
   dd5d2:	4629      	mov	r1, r5
   dd5d4:	f005 f9d0 	bl	e2978 <__aeabi_dsub>
   dd5d8:	2200      	movs	r2, #0
   dd5da:	4606      	mov	r6, r0
   dd5dc:	460f      	mov	r7, r1
   dd5de:	4b42      	ldr	r3, [pc, #264]	; (dd6e8 <atan+0x370>)
   dd5e0:	4620      	mov	r0, r4
   dd5e2:	4629      	mov	r1, r5
   dd5e4:	f005 fb7c 	bl	e2ce0 <__aeabi_dmul>
   dd5e8:	2200      	movs	r2, #0
   dd5ea:	4b3c      	ldr	r3, [pc, #240]	; (dd6dc <atan+0x364>)
   dd5ec:	f005 f9c6 	bl	e297c <__adddf3>
   dd5f0:	4602      	mov	r2, r0
   dd5f2:	460b      	mov	r3, r1
   dd5f4:	4630      	mov	r0, r6
   dd5f6:	4639      	mov	r1, r7
   dd5f8:	f005 fc9c 	bl	e2f34 <__aeabi_ddiv>
   dd5fc:	f04f 0a02 	mov.w	sl, #2
   dd600:	4604      	mov	r4, r0
   dd602:	460d      	mov	r5, r1
   dd604:	e6de      	b.n	dd3c4 <atan+0x4c>
   dd606:	462b      	mov	r3, r5
   dd608:	ee10 2a10 	vmov	r2, s0
   dd60c:	2000      	movs	r0, #0
   dd60e:	4937      	ldr	r1, [pc, #220]	; (dd6ec <atan+0x374>)
   dd610:	f005 fc90 	bl	e2f34 <__aeabi_ddiv>
   dd614:	f04f 0a03 	mov.w	sl, #3
   dd618:	4604      	mov	r4, r0
   dd61a:	460d      	mov	r5, r1
   dd61c:	e6d2      	b.n	dd3c4 <atan+0x4c>
   dd61e:	ee10 0a10 	vmov	r0, s0
   dd622:	2200      	movs	r2, #0
   dd624:	4b2d      	ldr	r3, [pc, #180]	; (dd6dc <atan+0x364>)
   dd626:	4629      	mov	r1, r5
   dd628:	f005 f9a6 	bl	e2978 <__aeabi_dsub>
   dd62c:	2200      	movs	r2, #0
   dd62e:	4606      	mov	r6, r0
   dd630:	460f      	mov	r7, r1
   dd632:	4b2a      	ldr	r3, [pc, #168]	; (dd6dc <atan+0x364>)
   dd634:	4620      	mov	r0, r4
   dd636:	4629      	mov	r1, r5
   dd638:	f005 f9a0 	bl	e297c <__adddf3>
   dd63c:	4602      	mov	r2, r0
   dd63e:	460b      	mov	r3, r1
   dd640:	4630      	mov	r0, r6
   dd642:	4639      	mov	r1, r7
   dd644:	f005 fc76 	bl	e2f34 <__aeabi_ddiv>
   dd648:	f04f 0a01 	mov.w	sl, #1
   dd64c:	4604      	mov	r4, r0
   dd64e:	460d      	mov	r5, r1
   dd650:	e6b8      	b.n	dd3c4 <atan+0x4c>
   dd652:	bf00      	nop
   dd654:	f3af 8000 	nop.w
   dd658:	54442d18 	.word	0x54442d18
   dd65c:	3ff921fb 	.word	0x3ff921fb
   dd660:	e322da11 	.word	0xe322da11
   dd664:	3f90ad3a 	.word	0x3f90ad3a
   dd668:	24760deb 	.word	0x24760deb
   dd66c:	3fa97b4b 	.word	0x3fa97b4b
   dd670:	a0d03d51 	.word	0xa0d03d51
   dd674:	3fb10d66 	.word	0x3fb10d66
   dd678:	c54c206e 	.word	0xc54c206e
   dd67c:	3fb745cd 	.word	0x3fb745cd
   dd680:	920083ff 	.word	0x920083ff
   dd684:	3fc24924 	.word	0x3fc24924
   dd688:	5555550d 	.word	0x5555550d
   dd68c:	3fd55555 	.word	0x3fd55555
   dd690:	2c6a6c2f 	.word	0x2c6a6c2f
   dd694:	bfa2b444 	.word	0xbfa2b444
   dd698:	52defd9a 	.word	0x52defd9a
   dd69c:	3fadde2d 	.word	0x3fadde2d
   dd6a0:	af749a6d 	.word	0xaf749a6d
   dd6a4:	3fb3b0f2 	.word	0x3fb3b0f2
   dd6a8:	fe231671 	.word	0xfe231671
   dd6ac:	3fbc71c6 	.word	0x3fbc71c6
   dd6b0:	9998ebc4 	.word	0x9998ebc4
   dd6b4:	3fc99999 	.word	0x3fc99999
   dd6b8:	8800759c 	.word	0x8800759c
   dd6bc:	7e37e43c 	.word	0x7e37e43c
   dd6c0:	54442d18 	.word	0x54442d18
   dd6c4:	bff921fb 	.word	0xbff921fb
   dd6c8:	440fffff 	.word	0x440fffff
   dd6cc:	7ff00000 	.word	0x7ff00000
   dd6d0:	3fdbffff 	.word	0x3fdbffff
   dd6d4:	000e80f0 	.word	0x000e80f0
   dd6d8:	000e80d0 	.word	0x000e80d0
   dd6dc:	3ff00000 	.word	0x3ff00000
   dd6e0:	3ff2ffff 	.word	0x3ff2ffff
   dd6e4:	40037fff 	.word	0x40037fff
   dd6e8:	3ff80000 	.word	0x3ff80000
   dd6ec:	bff00000 	.word	0xbff00000

000dd6f0 <ceil>:
   dd6f0:	ec51 0b10 	vmov	r0, r1, d0
   dd6f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd6fc:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd700:	2d13      	cmp	r5, #19
   dd702:	460c      	mov	r4, r1
   dd704:	460f      	mov	r7, r1
   dd706:	ee10 6a10 	vmov	r6, s0
   dd70a:	dc22      	bgt.n	dd752 <ceil+0x62>
   dd70c:	2d00      	cmp	r5, #0
   dd70e:	db52      	blt.n	dd7b6 <ceil+0xc6>
   dd710:	4b3d      	ldr	r3, [pc, #244]	; (dd808 <ceil+0x118>)
   dd712:	fa43 f805 	asr.w	r8, r3, r5
   dd716:	ea01 0308 	and.w	r3, r1, r8
   dd71a:	4303      	orrs	r3, r0
   dd71c:	d01e      	beq.n	dd75c <ceil+0x6c>
   dd71e:	a338      	add	r3, pc, #224	; (adr r3, dd800 <ceil+0x110>)
   dd720:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd724:	f005 f92a 	bl	e297c <__adddf3>
   dd728:	2200      	movs	r2, #0
   dd72a:	2300      	movs	r3, #0
   dd72c:	f005 fd68 	bl	e3200 <__aeabi_dcmpgt>
   dd730:	b148      	cbz	r0, dd746 <ceil+0x56>
   dd732:	2c00      	cmp	r4, #0
   dd734:	dd04      	ble.n	dd740 <ceil+0x50>
   dd736:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd73a:	fa43 f505 	asr.w	r5, r3, r5
   dd73e:	442f      	add	r7, r5
   dd740:	ea27 0408 	bic.w	r4, r7, r8
   dd744:	2600      	movs	r6, #0
   dd746:	4623      	mov	r3, r4
   dd748:	4632      	mov	r2, r6
   dd74a:	ec43 2b10 	vmov	d0, r2, r3
   dd74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd752:	2d33      	cmp	r5, #51	; 0x33
   dd754:	dd06      	ble.n	dd764 <ceil+0x74>
   dd756:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd75a:	d03e      	beq.n	dd7da <ceil+0xea>
   dd75c:	ec41 0b10 	vmov	d0, r0, r1
   dd760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd764:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd768:	f04f 38ff 	mov.w	r8, #4294967295
   dd76c:	fa28 f803 	lsr.w	r8, r8, r3
   dd770:	ea10 0f08 	tst.w	r0, r8
   dd774:	d0f2      	beq.n	dd75c <ceil+0x6c>
   dd776:	a322      	add	r3, pc, #136	; (adr r3, dd800 <ceil+0x110>)
   dd778:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd77c:	f005 f8fe 	bl	e297c <__adddf3>
   dd780:	2200      	movs	r2, #0
   dd782:	2300      	movs	r3, #0
   dd784:	f005 fd3c 	bl	e3200 <__aeabi_dcmpgt>
   dd788:	2800      	cmp	r0, #0
   dd78a:	d0dc      	beq.n	dd746 <ceil+0x56>
   dd78c:	2c00      	cmp	r4, #0
   dd78e:	dd09      	ble.n	dd7a4 <ceil+0xb4>
   dd790:	2d14      	cmp	r5, #20
   dd792:	d031      	beq.n	dd7f8 <ceil+0x108>
   dd794:	2301      	movs	r3, #1
   dd796:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd79a:	fa03 f505 	lsl.w	r5, r3, r5
   dd79e:	19ae      	adds	r6, r5, r6
   dd7a0:	bf28      	it	cs
   dd7a2:	18ff      	addcs	r7, r7, r3
   dd7a4:	463c      	mov	r4, r7
   dd7a6:	ea26 0608 	bic.w	r6, r6, r8
   dd7aa:	4623      	mov	r3, r4
   dd7ac:	4632      	mov	r2, r6
   dd7ae:	ec43 2b10 	vmov	d0, r2, r3
   dd7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd7b6:	a312      	add	r3, pc, #72	; (adr r3, dd800 <ceil+0x110>)
   dd7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd7bc:	f005 f8de 	bl	e297c <__adddf3>
   dd7c0:	2200      	movs	r2, #0
   dd7c2:	2300      	movs	r3, #0
   dd7c4:	f005 fd1c 	bl	e3200 <__aeabi_dcmpgt>
   dd7c8:	2800      	cmp	r0, #0
   dd7ca:	d0bc      	beq.n	dd746 <ceil+0x56>
   dd7cc:	2c00      	cmp	r4, #0
   dd7ce:	db0f      	blt.n	dd7f0 <ceil+0x100>
   dd7d0:	4326      	orrs	r6, r4
   dd7d2:	d00b      	beq.n	dd7ec <ceil+0xfc>
   dd7d4:	2600      	movs	r6, #0
   dd7d6:	4c0d      	ldr	r4, [pc, #52]	; (dd80c <ceil+0x11c>)
   dd7d8:	e7b5      	b.n	dd746 <ceil+0x56>
   dd7da:	ee10 2a10 	vmov	r2, s0
   dd7de:	460b      	mov	r3, r1
   dd7e0:	f005 f8cc 	bl	e297c <__adddf3>
   dd7e4:	ec41 0b10 	vmov	d0, r0, r1
   dd7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd7ec:	4634      	mov	r4, r6
   dd7ee:	e7aa      	b.n	dd746 <ceil+0x56>
   dd7f0:	2600      	movs	r6, #0
   dd7f2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dd7f6:	e7a6      	b.n	dd746 <ceil+0x56>
   dd7f8:	3701      	adds	r7, #1
   dd7fa:	e7d3      	b.n	dd7a4 <ceil+0xb4>
   dd7fc:	f3af 8000 	nop.w
   dd800:	8800759c 	.word	0x8800759c
   dd804:	7e37e43c 	.word	0x7e37e43c
   dd808:	000fffff 	.word	0x000fffff
   dd80c:	3ff00000 	.word	0x3ff00000

000dd810 <cos>:
   dd810:	b500      	push	{lr}
   dd812:	ec51 0b10 	vmov	r0, r1, d0
   dd816:	4a2c      	ldr	r2, [pc, #176]	; (dd8c8 <cos+0xb8>)
   dd818:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dd81c:	4293      	cmp	r3, r2
   dd81e:	b085      	sub	sp, #20
   dd820:	dd20      	ble.n	dd864 <cos+0x54>
   dd822:	4a2a      	ldr	r2, [pc, #168]	; (dd8cc <cos+0xbc>)
   dd824:	4293      	cmp	r3, r2
   dd826:	dd09      	ble.n	dd83c <cos+0x2c>
   dd828:	ee10 2a10 	vmov	r2, s0
   dd82c:	460b      	mov	r3, r1
   dd82e:	f005 f8a3 	bl	e2978 <__aeabi_dsub>
   dd832:	ec41 0b10 	vmov	d0, r0, r1
   dd836:	b005      	add	sp, #20
   dd838:	f85d fb04 	ldr.w	pc, [sp], #4
   dd83c:	4668      	mov	r0, sp
   dd83e:	f003 f91b 	bl	e0a78 <__ieee754_rem_pio2>
   dd842:	f000 0003 	and.w	r0, r0, #3
   dd846:	2801      	cmp	r0, #1
   dd848:	d028      	beq.n	dd89c <cos+0x8c>
   dd84a:	2802      	cmp	r0, #2
   dd84c:	d015      	beq.n	dd87a <cos+0x6a>
   dd84e:	b360      	cbz	r0, dd8aa <cos+0x9a>
   dd850:	2001      	movs	r0, #1
   dd852:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd856:	ed9d 0b00 	vldr	d0, [sp]
   dd85a:	f004 fa3d 	bl	e1cd8 <__kernel_sin>
   dd85e:	ec51 0b10 	vmov	r0, r1, d0
   dd862:	e7e6      	b.n	dd832 <cos+0x22>
   dd864:	ed9f 1b16 	vldr	d1, [pc, #88]	; dd8c0 <cos+0xb0>
   dd868:	f003 fce2 	bl	e1230 <__kernel_cos>
   dd86c:	ec51 0b10 	vmov	r0, r1, d0
   dd870:	ec41 0b10 	vmov	d0, r0, r1
   dd874:	b005      	add	sp, #20
   dd876:	f85d fb04 	ldr.w	pc, [sp], #4
   dd87a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd87e:	ed9d 0b00 	vldr	d0, [sp]
   dd882:	f003 fcd5 	bl	e1230 <__kernel_cos>
   dd886:	ec53 2b10 	vmov	r2, r3, d0
   dd88a:	ee10 0a10 	vmov	r0, s0
   dd88e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dd892:	ec41 0b10 	vmov	d0, r0, r1
   dd896:	b005      	add	sp, #20
   dd898:	f85d fb04 	ldr.w	pc, [sp], #4
   dd89c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd8a0:	ed9d 0b00 	vldr	d0, [sp]
   dd8a4:	f004 fa18 	bl	e1cd8 <__kernel_sin>
   dd8a8:	e7ed      	b.n	dd886 <cos+0x76>
   dd8aa:	ed9d 1b02 	vldr	d1, [sp, #8]
   dd8ae:	ed9d 0b00 	vldr	d0, [sp]
   dd8b2:	f003 fcbd 	bl	e1230 <__kernel_cos>
   dd8b6:	ec51 0b10 	vmov	r0, r1, d0
   dd8ba:	e7ba      	b.n	dd832 <cos+0x22>
   dd8bc:	f3af 8000 	nop.w
	...
   dd8c8:	3fe921fb 	.word	0x3fe921fb
   dd8cc:	7fefffff 	.word	0x7fefffff

000dd8d0 <fabs>:
   dd8d0:	ec53 2b10 	vmov	r2, r3, d0
   dd8d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dd8d8:	ec43 2b10 	vmov	d0, r2, r3
   dd8dc:	4770      	bx	lr
   dd8de:	bf00      	nop

000dd8e0 <floor>:
   dd8e0:	ec51 0b10 	vmov	r0, r1, d0
   dd8e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd8ec:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd8f0:	2d13      	cmp	r5, #19
   dd8f2:	460c      	mov	r4, r1
   dd8f4:	460f      	mov	r7, r1
   dd8f6:	ee10 6a10 	vmov	r6, s0
   dd8fa:	dc1d      	bgt.n	dd938 <floor+0x58>
   dd8fc:	2d00      	cmp	r5, #0
   dd8fe:	db43      	blt.n	dd988 <floor+0xa8>
   dd900:	4b3d      	ldr	r3, [pc, #244]	; (dd9f8 <floor+0x118>)
   dd902:	fa43 f805 	asr.w	r8, r3, r5
   dd906:	ea01 0308 	and.w	r3, r1, r8
   dd90a:	4303      	orrs	r3, r0
   dd90c:	d019      	beq.n	dd942 <floor+0x62>
   dd90e:	a338      	add	r3, pc, #224	; (adr r3, dd9f0 <floor+0x110>)
   dd910:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd914:	f005 f832 	bl	e297c <__adddf3>
   dd918:	2200      	movs	r2, #0
   dd91a:	2300      	movs	r3, #0
   dd91c:	f005 fc70 	bl	e3200 <__aeabi_dcmpgt>
   dd920:	b120      	cbz	r0, dd92c <floor+0x4c>
   dd922:	2c00      	cmp	r4, #0
   dd924:	db49      	blt.n	dd9ba <floor+0xda>
   dd926:	ea27 0408 	bic.w	r4, r7, r8
   dd92a:	2600      	movs	r6, #0
   dd92c:	4623      	mov	r3, r4
   dd92e:	4632      	mov	r2, r6
   dd930:	ec43 2b10 	vmov	d0, r2, r3
   dd934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd938:	2d33      	cmp	r5, #51	; 0x33
   dd93a:	dd06      	ble.n	dd94a <floor+0x6a>
   dd93c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd940:	d032      	beq.n	dd9a8 <floor+0xc8>
   dd942:	ec41 0b10 	vmov	d0, r0, r1
   dd946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd94a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd94e:	f04f 38ff 	mov.w	r8, #4294967295
   dd952:	fa28 f803 	lsr.w	r8, r8, r3
   dd956:	ea10 0f08 	tst.w	r0, r8
   dd95a:	d0f2      	beq.n	dd942 <floor+0x62>
   dd95c:	a324      	add	r3, pc, #144	; (adr r3, dd9f0 <floor+0x110>)
   dd95e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd962:	f005 f80b 	bl	e297c <__adddf3>
   dd966:	2200      	movs	r2, #0
   dd968:	2300      	movs	r3, #0
   dd96a:	f005 fc49 	bl	e3200 <__aeabi_dcmpgt>
   dd96e:	2800      	cmp	r0, #0
   dd970:	d0dc      	beq.n	dd92c <floor+0x4c>
   dd972:	2c00      	cmp	r4, #0
   dd974:	db27      	blt.n	dd9c6 <floor+0xe6>
   dd976:	463c      	mov	r4, r7
   dd978:	ea26 0608 	bic.w	r6, r6, r8
   dd97c:	4623      	mov	r3, r4
   dd97e:	4632      	mov	r2, r6
   dd980:	ec43 2b10 	vmov	d0, r2, r3
   dd984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd988:	a319      	add	r3, pc, #100	; (adr r3, dd9f0 <floor+0x110>)
   dd98a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd98e:	f004 fff5 	bl	e297c <__adddf3>
   dd992:	2200      	movs	r2, #0
   dd994:	2300      	movs	r3, #0
   dd996:	f005 fc33 	bl	e3200 <__aeabi_dcmpgt>
   dd99a:	2800      	cmp	r0, #0
   dd99c:	d0c6      	beq.n	dd92c <floor+0x4c>
   dd99e:	2c00      	cmp	r4, #0
   dd9a0:	db1c      	blt.n	dd9dc <floor+0xfc>
   dd9a2:	2600      	movs	r6, #0
   dd9a4:	4634      	mov	r4, r6
   dd9a6:	e7c1      	b.n	dd92c <floor+0x4c>
   dd9a8:	ee10 2a10 	vmov	r2, s0
   dd9ac:	460b      	mov	r3, r1
   dd9ae:	f004 ffe5 	bl	e297c <__adddf3>
   dd9b2:	ec41 0b10 	vmov	d0, r0, r1
   dd9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd9ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd9be:	fa43 f505 	asr.w	r5, r3, r5
   dd9c2:	442f      	add	r7, r5
   dd9c4:	e7af      	b.n	dd926 <floor+0x46>
   dd9c6:	2d14      	cmp	r5, #20
   dd9c8:	d010      	beq.n	dd9ec <floor+0x10c>
   dd9ca:	2301      	movs	r3, #1
   dd9cc:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd9d0:	fa03 f505 	lsl.w	r5, r3, r5
   dd9d4:	19ae      	adds	r6, r5, r6
   dd9d6:	bf28      	it	cs
   dd9d8:	18ff      	addcs	r7, r7, r3
   dd9da:	e7cc      	b.n	dd976 <floor+0x96>
   dd9dc:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dd9e0:	4b06      	ldr	r3, [pc, #24]	; (dd9fc <floor+0x11c>)
   dd9e2:	4332      	orrs	r2, r6
   dd9e4:	bf18      	it	ne
   dd9e6:	461c      	movne	r4, r3
   dd9e8:	2600      	movs	r6, #0
   dd9ea:	e79f      	b.n	dd92c <floor+0x4c>
   dd9ec:	3701      	adds	r7, #1
   dd9ee:	e7c2      	b.n	dd976 <floor+0x96>
   dd9f0:	8800759c 	.word	0x8800759c
   dd9f4:	7e37e43c 	.word	0x7e37e43c
   dd9f8:	000fffff 	.word	0x000fffff
   dd9fc:	bff00000 	.word	0xbff00000

000dda00 <sin>:
   dda00:	b500      	push	{lr}
   dda02:	ec51 0b10 	vmov	r0, r1, d0
   dda06:	4a2c      	ldr	r2, [pc, #176]	; (ddab8 <sin+0xb8>)
   dda08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dda0c:	4293      	cmp	r3, r2
   dda0e:	b085      	sub	sp, #20
   dda10:	dd27      	ble.n	dda62 <sin+0x62>
   dda12:	4a2a      	ldr	r2, [pc, #168]	; (ddabc <sin+0xbc>)
   dda14:	4293      	cmp	r3, r2
   dda16:	dd09      	ble.n	dda2c <sin+0x2c>
   dda18:	ee10 2a10 	vmov	r2, s0
   dda1c:	460b      	mov	r3, r1
   dda1e:	f004 ffab 	bl	e2978 <__aeabi_dsub>
   dda22:	ec41 0b10 	vmov	d0, r0, r1
   dda26:	b005      	add	sp, #20
   dda28:	f85d fb04 	ldr.w	pc, [sp], #4
   dda2c:	4668      	mov	r0, sp
   dda2e:	f003 f823 	bl	e0a78 <__ieee754_rem_pio2>
   dda32:	f000 0003 	and.w	r0, r0, #3
   dda36:	2801      	cmp	r0, #1
   dda38:	d027      	beq.n	dda8a <sin+0x8a>
   dda3a:	2802      	cmp	r0, #2
   dda3c:	d01d      	beq.n	dda7a <sin+0x7a>
   dda3e:	b368      	cbz	r0, dda9c <sin+0x9c>
   dda40:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda44:	ed9d 0b00 	vldr	d0, [sp]
   dda48:	f003 fbf2 	bl	e1230 <__kernel_cos>
   dda4c:	ec53 2b10 	vmov	r2, r3, d0
   dda50:	ee10 0a10 	vmov	r0, s0
   dda54:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dda58:	ec41 0b10 	vmov	d0, r0, r1
   dda5c:	b005      	add	sp, #20
   dda5e:	f85d fb04 	ldr.w	pc, [sp], #4
   dda62:	2000      	movs	r0, #0
   dda64:	ed9f 1b12 	vldr	d1, [pc, #72]	; ddab0 <sin+0xb0>
   dda68:	f004 f936 	bl	e1cd8 <__kernel_sin>
   dda6c:	ec51 0b10 	vmov	r0, r1, d0
   dda70:	ec41 0b10 	vmov	d0, r0, r1
   dda74:	b005      	add	sp, #20
   dda76:	f85d fb04 	ldr.w	pc, [sp], #4
   dda7a:	2001      	movs	r0, #1
   dda7c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda80:	ed9d 0b00 	vldr	d0, [sp]
   dda84:	f004 f928 	bl	e1cd8 <__kernel_sin>
   dda88:	e7e0      	b.n	dda4c <sin+0x4c>
   dda8a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dda8e:	ed9d 0b00 	vldr	d0, [sp]
   dda92:	f003 fbcd 	bl	e1230 <__kernel_cos>
   dda96:	ec51 0b10 	vmov	r0, r1, d0
   dda9a:	e7c2      	b.n	dda22 <sin+0x22>
   dda9c:	2001      	movs	r0, #1
   dda9e:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddaa2:	ed9d 0b00 	vldr	d0, [sp]
   ddaa6:	f004 f917 	bl	e1cd8 <__kernel_sin>
   ddaaa:	ec51 0b10 	vmov	r0, r1, d0
   ddaae:	e7b8      	b.n	dda22 <sin+0x22>
	...
   ddab8:	3fe921fb 	.word	0x3fe921fb
   ddabc:	7fefffff 	.word	0x7fefffff

000ddac0 <tan>:
   ddac0:	b500      	push	{lr}
   ddac2:	ec51 0b10 	vmov	r0, r1, d0
   ddac6:	4a18      	ldr	r2, [pc, #96]	; (ddb28 <tan+0x68>)
   ddac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ddacc:	4293      	cmp	r3, r2
   ddace:	b085      	sub	sp, #20
   ddad0:	dd1d      	ble.n	ddb0e <tan+0x4e>
   ddad2:	4a16      	ldr	r2, [pc, #88]	; (ddb2c <tan+0x6c>)
   ddad4:	4293      	cmp	r3, r2
   ddad6:	dd09      	ble.n	ddaec <tan+0x2c>
   ddad8:	ee10 2a10 	vmov	r2, s0
   ddadc:	460b      	mov	r3, r1
   ddade:	f004 ff4b 	bl	e2978 <__aeabi_dsub>
   ddae2:	ec41 0b10 	vmov	d0, r0, r1
   ddae6:	b005      	add	sp, #20
   ddae8:	f85d fb04 	ldr.w	pc, [sp], #4
   ddaec:	4668      	mov	r0, sp
   ddaee:	f002 ffc3 	bl	e0a78 <__ieee754_rem_pio2>
   ddaf2:	0040      	lsls	r0, r0, #1
   ddaf4:	f000 0002 	and.w	r0, r0, #2
   ddaf8:	f1c0 0001 	rsb	r0, r0, #1
   ddafc:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddb00:	ed9d 0b00 	vldr	d0, [sp]
   ddb04:	f004 f9b4 	bl	e1e70 <__kernel_tan>
   ddb08:	b005      	add	sp, #20
   ddb0a:	f85d fb04 	ldr.w	pc, [sp], #4
   ddb0e:	2001      	movs	r0, #1
   ddb10:	ed9f 1b03 	vldr	d1, [pc, #12]	; ddb20 <tan+0x60>
   ddb14:	f004 f9ac 	bl	e1e70 <__kernel_tan>
   ddb18:	b005      	add	sp, #20
   ddb1a:	f85d fb04 	ldr.w	pc, [sp], #4
   ddb1e:	bf00      	nop
	...
   ddb28:	3fe921fb 	.word	0x3fe921fb
   ddb2c:	7fefffff 	.word	0x7fefffff

000ddb30 <tanh>:
   ddb30:	b5d0      	push	{r4, r6, r7, lr}
   ddb32:	ec57 6b10 	vmov	r6, r7, d0
   ddb36:	4a42      	ldr	r2, [pc, #264]	; (ddc40 <tanh+0x110>)
   ddb38:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   ddb3c:	4293      	cmp	r3, r2
   ddb3e:	463c      	mov	r4, r7
   ddb40:	dd10      	ble.n	ddb64 <tanh+0x34>
   ddb42:	2f00      	cmp	r7, #0
   ddb44:	ee10 2a10 	vmov	r2, s0
   ddb48:	463b      	mov	r3, r7
   ddb4a:	f04f 0000 	mov.w	r0, #0
   ddb4e:	493d      	ldr	r1, [pc, #244]	; (ddc44 <tanh+0x114>)
   ddb50:	db40      	blt.n	ddbd4 <tanh+0xa4>
   ddb52:	f005 f9ef 	bl	e2f34 <__aeabi_ddiv>
   ddb56:	2200      	movs	r2, #0
   ddb58:	4b3a      	ldr	r3, [pc, #232]	; (ddc44 <tanh+0x114>)
   ddb5a:	f004 ff0f 	bl	e297c <__adddf3>
   ddb5e:	ec41 0b10 	vmov	d0, r0, r1
   ddb62:	bdd0      	pop	{r4, r6, r7, pc}
   ddb64:	4a38      	ldr	r2, [pc, #224]	; (ddc48 <tanh+0x118>)
   ddb66:	4293      	cmp	r3, r2
   ddb68:	dd0a      	ble.n	ddb80 <tanh+0x50>
   ddb6a:	4b36      	ldr	r3, [pc, #216]	; (ddc44 <tanh+0x114>)
   ddb6c:	2200      	movs	r2, #0
   ddb6e:	2c00      	cmp	r4, #0
   ddb70:	4610      	mov	r0, r2
   ddb72:	bfb4      	ite	lt
   ddb74:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   ddb78:	4619      	movge	r1, r3
   ddb7a:	ec41 0b10 	vmov	d0, r0, r1
   ddb7e:	bdd0      	pop	{r4, r6, r7, pc}
   ddb80:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   ddb84:	db2f      	blt.n	ddbe6 <tanh+0xb6>
   ddb86:	4a31      	ldr	r2, [pc, #196]	; (ddc4c <tanh+0x11c>)
   ddb88:	4293      	cmp	r3, r2
   ddb8a:	dd38      	ble.n	ddbfe <tanh+0xce>
   ddb8c:	f7ff fea0 	bl	dd8d0 <fabs>
   ddb90:	ec53 2b10 	vmov	r2, r3, d0
   ddb94:	ee10 0a10 	vmov	r0, s0
   ddb98:	4619      	mov	r1, r3
   ddb9a:	f004 feef 	bl	e297c <__adddf3>
   ddb9e:	ec41 0b10 	vmov	d0, r0, r1
   ddba2:	f004 fb49 	bl	e2238 <expm1>
   ddba6:	2200      	movs	r2, #0
   ddba8:	ec51 0b10 	vmov	r0, r1, d0
   ddbac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddbb0:	f004 fee4 	bl	e297c <__adddf3>
   ddbb4:	4602      	mov	r2, r0
   ddbb6:	460b      	mov	r3, r1
   ddbb8:	2000      	movs	r0, #0
   ddbba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   ddbbe:	f005 f9b9 	bl	e2f34 <__aeabi_ddiv>
   ddbc2:	4602      	mov	r2, r0
   ddbc4:	460b      	mov	r3, r1
   ddbc6:	2000      	movs	r0, #0
   ddbc8:	491e      	ldr	r1, [pc, #120]	; (ddc44 <tanh+0x114>)
   ddbca:	f004 fed5 	bl	e2978 <__aeabi_dsub>
   ddbce:	4602      	mov	r2, r0
   ddbd0:	460b      	mov	r3, r1
   ddbd2:	e7cc      	b.n	ddb6e <tanh+0x3e>
   ddbd4:	f005 f9ae 	bl	e2f34 <__aeabi_ddiv>
   ddbd8:	2200      	movs	r2, #0
   ddbda:	4b1a      	ldr	r3, [pc, #104]	; (ddc44 <tanh+0x114>)
   ddbdc:	f004 fecc 	bl	e2978 <__aeabi_dsub>
   ddbe0:	ec41 0b10 	vmov	d0, r0, r1
   ddbe4:	bdd0      	pop	{r4, r6, r7, pc}
   ddbe6:	2200      	movs	r2, #0
   ddbe8:	4b16      	ldr	r3, [pc, #88]	; (ddc44 <tanh+0x114>)
   ddbea:	ee10 0a10 	vmov	r0, s0
   ddbee:	4639      	mov	r1, r7
   ddbf0:	f004 fec4 	bl	e297c <__adddf3>
   ddbf4:	4632      	mov	r2, r6
   ddbf6:	463b      	mov	r3, r7
   ddbf8:	f005 f872 	bl	e2ce0 <__aeabi_dmul>
   ddbfc:	e7af      	b.n	ddb5e <tanh+0x2e>
   ddbfe:	f7ff fe67 	bl	dd8d0 <fabs>
   ddc02:	2200      	movs	r2, #0
   ddc04:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   ddc08:	ec51 0b10 	vmov	r0, r1, d0
   ddc0c:	f005 f868 	bl	e2ce0 <__aeabi_dmul>
   ddc10:	ec41 0b10 	vmov	d0, r0, r1
   ddc14:	f004 fb10 	bl	e2238 <expm1>
   ddc18:	ec51 0b10 	vmov	r0, r1, d0
   ddc1c:	2200      	movs	r2, #0
   ddc1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddc22:	ee10 6a10 	vmov	r6, s0
   ddc26:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   ddc2a:	f004 fea7 	bl	e297c <__adddf3>
   ddc2e:	4602      	mov	r2, r0
   ddc30:	460b      	mov	r3, r1
   ddc32:	4630      	mov	r0, r6
   ddc34:	4639      	mov	r1, r7
   ddc36:	f005 f97d 	bl	e2f34 <__aeabi_ddiv>
   ddc3a:	4602      	mov	r2, r0
   ddc3c:	460b      	mov	r3, r1
   ddc3e:	e796      	b.n	ddb6e <tanh+0x3e>
   ddc40:	7fefffff 	.word	0x7fefffff
   ddc44:	3ff00000 	.word	0x3ff00000
   ddc48:	4035ffff 	.word	0x4035ffff
   ddc4c:	3fefffff 	.word	0x3fefffff

000ddc50 <acos>:
   ddc50:	b530      	push	{r4, r5, lr}
   ddc52:	ed2d 8b04 	vpush	{d8-d9}
   ddc56:	eeb0 8a40 	vmov.f32	s16, s0
   ddc5a:	eef0 8a60 	vmov.f32	s17, s1
   ddc5e:	4c29      	ldr	r4, [pc, #164]	; (ddd04 <acos+0xb4>)
   ddc60:	b08b      	sub	sp, #44	; 0x2c
   ddc62:	f000 fd99 	bl	de798 <__ieee754_acos>
   ddc66:	f994 3000 	ldrsb.w	r3, [r4]
   ddc6a:	eeb0 9a40 	vmov.f32	s18, s0
   ddc6e:	eef0 9a60 	vmov.f32	s19, s1
   ddc72:	3301      	adds	r3, #1
   ddc74:	d032      	beq.n	ddcdc <acos+0x8c>
   ddc76:	ec53 2b18 	vmov	r2, r3, d8
   ddc7a:	ec51 0b18 	vmov	r0, r1, d8
   ddc7e:	f005 fac9 	bl	e3214 <__aeabi_dcmpun>
   ddc82:	4605      	mov	r5, r0
   ddc84:	bb50      	cbnz	r0, ddcdc <acos+0x8c>
   ddc86:	eeb0 0a48 	vmov.f32	s0, s16
   ddc8a:	eef0 0a68 	vmov.f32	s1, s17
   ddc8e:	f7ff fe1f 	bl	dd8d0 <fabs>
   ddc92:	2200      	movs	r2, #0
   ddc94:	4b1c      	ldr	r3, [pc, #112]	; (ddd08 <acos+0xb8>)
   ddc96:	ec51 0b10 	vmov	r0, r1, d0
   ddc9a:	f005 fab1 	bl	e3200 <__aeabi_dcmpgt>
   ddc9e:	b1e8      	cbz	r0, ddcdc <acos+0x8c>
   ddca0:	4b1a      	ldr	r3, [pc, #104]	; (ddd0c <acos+0xbc>)
   ddca2:	481b      	ldr	r0, [pc, #108]	; (ddd10 <acos+0xc0>)
   ddca4:	9508      	str	r5, [sp, #32]
   ddca6:	2201      	movs	r2, #1
   ddca8:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddcac:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddcb0:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddcb4:	f004 fd2c 	bl	e2710 <nan>
   ddcb8:	f994 3000 	ldrsb.w	r3, [r4]
   ddcbc:	2b02      	cmp	r3, #2
   ddcbe:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddcc2:	d013      	beq.n	ddcec <acos+0x9c>
   ddcc4:	4668      	mov	r0, sp
   ddcc6:	f004 fd21 	bl	e270c <matherr>
   ddcca:	b178      	cbz	r0, ddcec <acos+0x9c>
   ddccc:	9b08      	ldr	r3, [sp, #32]
   ddcce:	b9a3      	cbnz	r3, ddcfa <acos+0xaa>
   ddcd0:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddcd4:	b00b      	add	sp, #44	; 0x2c
   ddcd6:	ecbd 8b04 	vpop	{d8-d9}
   ddcda:	bd30      	pop	{r4, r5, pc}
   ddcdc:	eeb0 0a49 	vmov.f32	s0, s18
   ddce0:	eef0 0a69 	vmov.f32	s1, s19
   ddce4:	b00b      	add	sp, #44	; 0x2c
   ddce6:	ecbd 8b04 	vpop	{d8-d9}
   ddcea:	bd30      	pop	{r4, r5, pc}
   ddcec:	f7fc ff1a 	bl	dab24 <__errno>
   ddcf0:	2321      	movs	r3, #33	; 0x21
   ddcf2:	6003      	str	r3, [r0, #0]
   ddcf4:	9b08      	ldr	r3, [sp, #32]
   ddcf6:	2b00      	cmp	r3, #0
   ddcf8:	d0ea      	beq.n	ddcd0 <acos+0x80>
   ddcfa:	f7fc ff13 	bl	dab24 <__errno>
   ddcfe:	9b08      	ldr	r3, [sp, #32]
   ddd00:	6003      	str	r3, [r0, #0]
   ddd02:	e7e5      	b.n	ddcd0 <acos+0x80>
   ddd04:	2003d57c 	.word	0x2003d57c
   ddd08:	3ff00000 	.word	0x3ff00000
   ddd0c:	000e8110 	.word	0x000e8110
   ddd10:	000e8130 	.word	0x000e8130

000ddd14 <asin>:
   ddd14:	b530      	push	{r4, r5, lr}
   ddd16:	ed2d 8b04 	vpush	{d8-d9}
   ddd1a:	eeb0 8a40 	vmov.f32	s16, s0
   ddd1e:	eef0 8a60 	vmov.f32	s17, s1
   ddd22:	4c29      	ldr	r4, [pc, #164]	; (dddc8 <asin+0xb4>)
   ddd24:	b08b      	sub	sp, #44	; 0x2c
   ddd26:	f000 ffa7 	bl	dec78 <__ieee754_asin>
   ddd2a:	f994 3000 	ldrsb.w	r3, [r4]
   ddd2e:	eeb0 9a40 	vmov.f32	s18, s0
   ddd32:	eef0 9a60 	vmov.f32	s19, s1
   ddd36:	3301      	adds	r3, #1
   ddd38:	d032      	beq.n	ddda0 <asin+0x8c>
   ddd3a:	ec53 2b18 	vmov	r2, r3, d8
   ddd3e:	ec51 0b18 	vmov	r0, r1, d8
   ddd42:	f005 fa67 	bl	e3214 <__aeabi_dcmpun>
   ddd46:	4605      	mov	r5, r0
   ddd48:	bb50      	cbnz	r0, ddda0 <asin+0x8c>
   ddd4a:	eeb0 0a48 	vmov.f32	s0, s16
   ddd4e:	eef0 0a68 	vmov.f32	s1, s17
   ddd52:	f7ff fdbd 	bl	dd8d0 <fabs>
   ddd56:	2200      	movs	r2, #0
   ddd58:	4b1c      	ldr	r3, [pc, #112]	; (dddcc <asin+0xb8>)
   ddd5a:	ec51 0b10 	vmov	r0, r1, d0
   ddd5e:	f005 fa4f 	bl	e3200 <__aeabi_dcmpgt>
   ddd62:	b1e8      	cbz	r0, ddda0 <asin+0x8c>
   ddd64:	4b1a      	ldr	r3, [pc, #104]	; (dddd0 <asin+0xbc>)
   ddd66:	481b      	ldr	r0, [pc, #108]	; (dddd4 <asin+0xc0>)
   ddd68:	9508      	str	r5, [sp, #32]
   ddd6a:	2201      	movs	r2, #1
   ddd6c:	e88d 000c 	stmia.w	sp, {r2, r3}
   ddd70:	ed8d 8b04 	vstr	d8, [sp, #16]
   ddd74:	ed8d 8b02 	vstr	d8, [sp, #8]
   ddd78:	f004 fcca 	bl	e2710 <nan>
   ddd7c:	f994 3000 	ldrsb.w	r3, [r4]
   ddd80:	2b02      	cmp	r3, #2
   ddd82:	ed8d 0b06 	vstr	d0, [sp, #24]
   ddd86:	d013      	beq.n	dddb0 <asin+0x9c>
   ddd88:	4668      	mov	r0, sp
   ddd8a:	f004 fcbf 	bl	e270c <matherr>
   ddd8e:	b178      	cbz	r0, dddb0 <asin+0x9c>
   ddd90:	9b08      	ldr	r3, [sp, #32]
   ddd92:	b9a3      	cbnz	r3, dddbe <asin+0xaa>
   ddd94:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddd98:	b00b      	add	sp, #44	; 0x2c
   ddd9a:	ecbd 8b04 	vpop	{d8-d9}
   ddd9e:	bd30      	pop	{r4, r5, pc}
   ddda0:	eeb0 0a49 	vmov.f32	s0, s18
   ddda4:	eef0 0a69 	vmov.f32	s1, s19
   ddda8:	b00b      	add	sp, #44	; 0x2c
   dddaa:	ecbd 8b04 	vpop	{d8-d9}
   dddae:	bd30      	pop	{r4, r5, pc}
   dddb0:	f7fc feb8 	bl	dab24 <__errno>
   dddb4:	2321      	movs	r3, #33	; 0x21
   dddb6:	6003      	str	r3, [r0, #0]
   dddb8:	9b08      	ldr	r3, [sp, #32]
   dddba:	2b00      	cmp	r3, #0
   dddbc:	d0ea      	beq.n	ddd94 <asin+0x80>
   dddbe:	f7fc feb1 	bl	dab24 <__errno>
   dddc2:	9b08      	ldr	r3, [sp, #32]
   dddc4:	6003      	str	r3, [r0, #0]
   dddc6:	e7e5      	b.n	ddd94 <asin+0x80>
   dddc8:	2003d57c 	.word	0x2003d57c
   dddcc:	3ff00000 	.word	0x3ff00000
   dddd0:	000e8118 	.word	0x000e8118
   dddd4:	000e8130 	.word	0x000e8130

000dddd8 <atan2>:
   dddd8:	f001 b99e 	b.w	df118 <__ieee754_atan2>
   ddddc:	0000      	movs	r0, r0
	...

000ddde0 <cosh>:
   ddde0:	b530      	push	{r4, r5, lr}
   ddde2:	ed2d 8b04 	vpush	{d8-d9}
   ddde6:	eeb0 8a40 	vmov.f32	s16, s0
   dddea:	eef0 8a60 	vmov.f32	s17, s1
   dddee:	4c2e      	ldr	r4, [pc, #184]	; (ddea8 <cosh+0xc8>)
   dddf0:	b08b      	sub	sp, #44	; 0x2c
   dddf2:	f001 fa89 	bl	df308 <__ieee754_cosh>
   dddf6:	f994 3000 	ldrsb.w	r3, [r4]
   dddfa:	eeb0 9a40 	vmov.f32	s18, s0
   dddfe:	eef0 9a60 	vmov.f32	s19, s1
   dde02:	3301      	adds	r3, #1
   dde04:	d032      	beq.n	dde6c <cosh+0x8c>
   dde06:	ec53 2b18 	vmov	r2, r3, d8
   dde0a:	ec51 0b18 	vmov	r0, r1, d8
   dde0e:	f005 fa01 	bl	e3214 <__aeabi_dcmpun>
   dde12:	4605      	mov	r5, r0
   dde14:	bb50      	cbnz	r0, dde6c <cosh+0x8c>
   dde16:	eeb0 0a48 	vmov.f32	s0, s16
   dde1a:	eef0 0a68 	vmov.f32	s1, s17
   dde1e:	f7ff fd57 	bl	dd8d0 <fabs>
   dde22:	a31f      	add	r3, pc, #124	; (adr r3, ddea0 <cosh+0xc0>)
   dde24:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde28:	ec51 0b10 	vmov	r0, r1, d0
   dde2c:	f005 f9e8 	bl	e3200 <__aeabi_dcmpgt>
   dde30:	b1e0      	cbz	r0, dde6c <cosh+0x8c>
   dde32:	4a1e      	ldr	r2, [pc, #120]	; (ddeac <cosh+0xcc>)
   dde34:	f994 3000 	ldrsb.w	r3, [r4]
   dde38:	9508      	str	r5, [sp, #32]
   dde3a:	2103      	movs	r1, #3
   dde3c:	ed8d 8b04 	vstr	d8, [sp, #16]
   dde40:	ed8d 8b02 	vstr	d8, [sp, #8]
   dde44:	e88d 0006 	stmia.w	sp, {r1, r2}
   dde48:	b9c3      	cbnz	r3, dde7c <cosh+0x9c>
   dde4a:	4b19      	ldr	r3, [pc, #100]	; (ddeb0 <cosh+0xd0>)
   dde4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dde50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dde54:	4668      	mov	r0, sp
   dde56:	f004 fc59 	bl	e270c <matherr>
   dde5a:	b1a8      	cbz	r0, dde88 <cosh+0xa8>
   dde5c:	9b08      	ldr	r3, [sp, #32]
   dde5e:	b9d3      	cbnz	r3, dde96 <cosh+0xb6>
   dde60:	ed9d 0b06 	vldr	d0, [sp, #24]
   dde64:	b00b      	add	sp, #44	; 0x2c
   dde66:	ecbd 8b04 	vpop	{d8-d9}
   dde6a:	bd30      	pop	{r4, r5, pc}
   dde6c:	eeb0 0a49 	vmov.f32	s0, s18
   dde70:	eef0 0a69 	vmov.f32	s1, s19
   dde74:	b00b      	add	sp, #44	; 0x2c
   dde76:	ecbd 8b04 	vpop	{d8-d9}
   dde7a:	bd30      	pop	{r4, r5, pc}
   dde7c:	490d      	ldr	r1, [pc, #52]	; (ddeb4 <cosh+0xd4>)
   dde7e:	2000      	movs	r0, #0
   dde80:	2b02      	cmp	r3, #2
   dde82:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dde86:	d1e5      	bne.n	dde54 <cosh+0x74>
   dde88:	f7fc fe4c 	bl	dab24 <__errno>
   dde8c:	2322      	movs	r3, #34	; 0x22
   dde8e:	6003      	str	r3, [r0, #0]
   dde90:	9b08      	ldr	r3, [sp, #32]
   dde92:	2b00      	cmp	r3, #0
   dde94:	d0e4      	beq.n	dde60 <cosh+0x80>
   dde96:	f7fc fe45 	bl	dab24 <__errno>
   dde9a:	9b08      	ldr	r3, [sp, #32]
   dde9c:	6003      	str	r3, [r0, #0]
   dde9e:	e7df      	b.n	dde60 <cosh+0x80>
   ddea0:	8fb9f87d 	.word	0x8fb9f87d
   ddea4:	408633ce 	.word	0x408633ce
   ddea8:	2003d57c 	.word	0x2003d57c
   ddeac:	000e8120 	.word	0x000e8120
   ddeb0:	47efffff 	.word	0x47efffff
   ddeb4:	7ff00000 	.word	0x7ff00000

000ddeb8 <exp>:
   ddeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddeba:	ed2d 8b04 	vpush	{d8-d9}
   ddebe:	eeb0 9a40 	vmov.f32	s18, s0
   ddec2:	eef0 9a60 	vmov.f32	s19, s1
   ddec6:	4c3a      	ldr	r4, [pc, #232]	; (ddfb0 <exp+0xf8>)
   ddec8:	b08b      	sub	sp, #44	; 0x2c
   ddeca:	f001 fad9 	bl	df480 <__ieee754_exp>
   ddece:	f994 3000 	ldrsb.w	r3, [r4]
   dded2:	eeb0 8a40 	vmov.f32	s16, s0
   dded6:	eef0 8a60 	vmov.f32	s17, s1
   ddeda:	3301      	adds	r3, #1
   ddedc:	d038      	beq.n	ddf50 <exp+0x98>
   ddede:	eeb0 0a49 	vmov.f32	s0, s18
   ddee2:	eef0 0a69 	vmov.f32	s1, s19
   ddee6:	f004 fc09 	bl	e26fc <finite>
   ddeea:	b388      	cbz	r0, ddf50 <exp+0x98>
   ddeec:	a32c      	add	r3, pc, #176	; (adr r3, ddfa0 <exp+0xe8>)
   ddeee:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddef2:	ec51 0b19 	vmov	r0, r1, d9
   ddef6:	f005 f983 	bl	e3200 <__aeabi_dcmpgt>
   ddefa:	4605      	mov	r5, r0
   ddefc:	bb80      	cbnz	r0, ddf60 <exp+0xa8>
   ddefe:	a32a      	add	r3, pc, #168	; (adr r3, ddfa8 <exp+0xf0>)
   ddf00:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddf04:	ec51 0b19 	vmov	r0, r1, d9
   ddf08:	f005 f95c 	bl	e31c4 <__aeabi_dcmplt>
   ddf0c:	b300      	cbz	r0, ddf50 <exp+0x98>
   ddf0e:	f994 3000 	ldrsb.w	r3, [r4]
   ddf12:	4a28      	ldr	r2, [pc, #160]	; (ddfb4 <exp+0xfc>)
   ddf14:	9508      	str	r5, [sp, #32]
   ddf16:	2600      	movs	r6, #0
   ddf18:	2700      	movs	r7, #0
   ddf1a:	2104      	movs	r1, #4
   ddf1c:	2b02      	cmp	r3, #2
   ddf1e:	ed8d 9b04 	vstr	d9, [sp, #16]
   ddf22:	ed8d 9b02 	vstr	d9, [sp, #8]
   ddf26:	e9cd 6706 	strd	r6, r7, [sp, #24]
   ddf2a:	e88d 0006 	stmia.w	sp, {r1, r2}
   ddf2e:	d030      	beq.n	ddf92 <exp+0xda>
   ddf30:	4668      	mov	r0, sp
   ddf32:	f004 fbeb 	bl	e270c <matherr>
   ddf36:	b360      	cbz	r0, ddf92 <exp+0xda>
   ddf38:	9b08      	ldr	r3, [sp, #32]
   ddf3a:	b11b      	cbz	r3, ddf44 <exp+0x8c>
   ddf3c:	f7fc fdf2 	bl	dab24 <__errno>
   ddf40:	9b08      	ldr	r3, [sp, #32]
   ddf42:	6003      	str	r3, [r0, #0]
   ddf44:	ed9d 0b06 	vldr	d0, [sp, #24]
   ddf48:	b00b      	add	sp, #44	; 0x2c
   ddf4a:	ecbd 8b04 	vpop	{d8-d9}
   ddf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddf50:	eeb0 0a48 	vmov.f32	s0, s16
   ddf54:	eef0 0a68 	vmov.f32	s1, s17
   ddf58:	b00b      	add	sp, #44	; 0x2c
   ddf5a:	ecbd 8b04 	vpop	{d8-d9}
   ddf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddf60:	4a14      	ldr	r2, [pc, #80]	; (ddfb4 <exp+0xfc>)
   ddf62:	f994 3000 	ldrsb.w	r3, [r4]
   ddf66:	9201      	str	r2, [sp, #4]
   ddf68:	2103      	movs	r1, #3
   ddf6a:	2200      	movs	r2, #0
   ddf6c:	ed8d 9b04 	vstr	d9, [sp, #16]
   ddf70:	ed8d 9b02 	vstr	d9, [sp, #8]
   ddf74:	9100      	str	r1, [sp, #0]
   ddf76:	9208      	str	r2, [sp, #32]
   ddf78:	b92b      	cbnz	r3, ddf86 <exp+0xce>
   ddf7a:	4b0f      	ldr	r3, [pc, #60]	; (ddfb8 <exp+0x100>)
   ddf7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ddf80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ddf84:	e7d4      	b.n	ddf30 <exp+0x78>
   ddf86:	490d      	ldr	r1, [pc, #52]	; (ddfbc <exp+0x104>)
   ddf88:	2000      	movs	r0, #0
   ddf8a:	2b02      	cmp	r3, #2
   ddf8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddf90:	d1ce      	bne.n	ddf30 <exp+0x78>
   ddf92:	f7fc fdc7 	bl	dab24 <__errno>
   ddf96:	2322      	movs	r3, #34	; 0x22
   ddf98:	6003      	str	r3, [r0, #0]
   ddf9a:	e7cd      	b.n	ddf38 <exp+0x80>
   ddf9c:	f3af 8000 	nop.w
   ddfa0:	fefa39ef 	.word	0xfefa39ef
   ddfa4:	40862e42 	.word	0x40862e42
   ddfa8:	d52d3051 	.word	0xd52d3051
   ddfac:	c0874910 	.word	0xc0874910
   ddfb0:	2003d57c 	.word	0x2003d57c
   ddfb4:	000e8128 	.word	0x000e8128
   ddfb8:	47efffff 	.word	0x47efffff
   ddfbc:	7ff00000 	.word	0x7ff00000

000ddfc0 <fmod>:
   ddfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddfc4:	ed2d 8b02 	vpush	{d8}
   ddfc8:	b08b      	sub	sp, #44	; 0x2c
   ddfca:	ec57 6b10 	vmov	r6, r7, d0
   ddfce:	ec55 4b11 	vmov	r4, r5, d1
   ddfd2:	f001 fbe7 	bl	df7a4 <__ieee754_fmod>
   ddfd6:	4b2e      	ldr	r3, [pc, #184]	; (de090 <fmod+0xd0>)
   ddfd8:	eeb0 8a40 	vmov.f32	s16, s0
   ddfdc:	eef0 8a60 	vmov.f32	s17, s1
   ddfe0:	f993 8000 	ldrsb.w	r8, [r3]
   ddfe4:	f1b8 3fff 	cmp.w	r8, #4294967295
   ddfe8:	d031      	beq.n	de04e <fmod+0x8e>
   ddfea:	4622      	mov	r2, r4
   ddfec:	462b      	mov	r3, r5
   ddfee:	4620      	mov	r0, r4
   ddff0:	4629      	mov	r1, r5
   ddff2:	f005 f90f 	bl	e3214 <__aeabi_dcmpun>
   ddff6:	bb50      	cbnz	r0, de04e <fmod+0x8e>
   ddff8:	4632      	mov	r2, r6
   ddffa:	463b      	mov	r3, r7
   ddffc:	4630      	mov	r0, r6
   ddffe:	4639      	mov	r1, r7
   de000:	f005 f908 	bl	e3214 <__aeabi_dcmpun>
   de004:	4681      	mov	r9, r0
   de006:	bb10      	cbnz	r0, de04e <fmod+0x8e>
   de008:	2200      	movs	r2, #0
   de00a:	2300      	movs	r3, #0
   de00c:	4620      	mov	r0, r4
   de00e:	4629      	mov	r1, r5
   de010:	f005 f8ce 	bl	e31b0 <__aeabi_dcmpeq>
   de014:	b1d8      	cbz	r0, de04e <fmod+0x8e>
   de016:	4b1f      	ldr	r3, [pc, #124]	; (de094 <fmod+0xd4>)
   de018:	f8cd 9020 	str.w	r9, [sp, #32]
   de01c:	2201      	movs	r2, #1
   de01e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de022:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de026:	e88d 000c 	stmia.w	sp, {r2, r3}
   de02a:	f1b8 0f00 	cmp.w	r8, #0
   de02e:	d117      	bne.n	de060 <fmod+0xa0>
   de030:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de034:	4668      	mov	r0, sp
   de036:	f004 fb69 	bl	e270c <matherr>
   de03a:	b1e0      	cbz	r0, de076 <fmod+0xb6>
   de03c:	9b08      	ldr	r3, [sp, #32]
   de03e:	bb0b      	cbnz	r3, de084 <fmod+0xc4>
   de040:	ed9d 0b06 	vldr	d0, [sp, #24]
   de044:	b00b      	add	sp, #44	; 0x2c
   de046:	ecbd 8b02 	vpop	{d8}
   de04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de04e:	eeb0 0a48 	vmov.f32	s0, s16
   de052:	eef0 0a68 	vmov.f32	s1, s17
   de056:	b00b      	add	sp, #44	; 0x2c
   de058:	ecbd 8b02 	vpop	{d8}
   de05c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de060:	2200      	movs	r2, #0
   de062:	2300      	movs	r3, #0
   de064:	4610      	mov	r0, r2
   de066:	4619      	mov	r1, r3
   de068:	f004 ff64 	bl	e2f34 <__aeabi_ddiv>
   de06c:	f1b8 0f02 	cmp.w	r8, #2
   de070:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de074:	d1de      	bne.n	de034 <fmod+0x74>
   de076:	f7fc fd55 	bl	dab24 <__errno>
   de07a:	2321      	movs	r3, #33	; 0x21
   de07c:	6003      	str	r3, [r0, #0]
   de07e:	9b08      	ldr	r3, [sp, #32]
   de080:	2b00      	cmp	r3, #0
   de082:	d0dd      	beq.n	de040 <fmod+0x80>
   de084:	f7fc fd4e 	bl	dab24 <__errno>
   de088:	9b08      	ldr	r3, [sp, #32]
   de08a:	6003      	str	r3, [r0, #0]
   de08c:	e7d8      	b.n	de040 <fmod+0x80>
   de08e:	bf00      	nop
   de090:	2003d57c 	.word	0x2003d57c
   de094:	000e812c 	.word	0x000e812c

000de098 <log>:
   de098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de09c:	ed2d 8b02 	vpush	{d8}
   de0a0:	b08b      	sub	sp, #44	; 0x2c
   de0a2:	ec55 4b10 	vmov	r4, r5, d0
   de0a6:	f001 fcb7 	bl	dfa18 <__ieee754_log>
   de0aa:	4b3a      	ldr	r3, [pc, #232]	; (de194 <log+0xfc>)
   de0ac:	eeb0 8a40 	vmov.f32	s16, s0
   de0b0:	eef0 8a60 	vmov.f32	s17, s1
   de0b4:	f993 6000 	ldrsb.w	r6, [r3]
   de0b8:	1c73      	adds	r3, r6, #1
   de0ba:	d00d      	beq.n	de0d8 <log+0x40>
   de0bc:	4622      	mov	r2, r4
   de0be:	462b      	mov	r3, r5
   de0c0:	4620      	mov	r0, r4
   de0c2:	4629      	mov	r1, r5
   de0c4:	f005 f8a6 	bl	e3214 <__aeabi_dcmpun>
   de0c8:	b930      	cbnz	r0, de0d8 <log+0x40>
   de0ca:	2200      	movs	r2, #0
   de0cc:	2300      	movs	r3, #0
   de0ce:	4620      	mov	r0, r4
   de0d0:	4629      	mov	r1, r5
   de0d2:	f005 f895 	bl	e3200 <__aeabi_dcmpgt>
   de0d6:	b140      	cbz	r0, de0ea <log+0x52>
   de0d8:	eeb0 0a48 	vmov.f32	s0, s16
   de0dc:	eef0 0a68 	vmov.f32	s1, s17
   de0e0:	b00b      	add	sp, #44	; 0x2c
   de0e2:	ecbd 8b02 	vpop	{d8}
   de0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de0ea:	4b2b      	ldr	r3, [pc, #172]	; (de198 <log+0x100>)
   de0ec:	9008      	str	r0, [sp, #32]
   de0ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de0f2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de0f6:	9301      	str	r3, [sp, #4]
   de0f8:	b9de      	cbnz	r6, de132 <log+0x9a>
   de0fa:	4f28      	ldr	r7, [pc, #160]	; (de19c <log+0x104>)
   de0fc:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de100:	4620      	mov	r0, r4
   de102:	4629      	mov	r1, r5
   de104:	2200      	movs	r2, #0
   de106:	2300      	movs	r3, #0
   de108:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de10c:	f005 f850 	bl	e31b0 <__aeabi_dcmpeq>
   de110:	2800      	cmp	r0, #0
   de112:	d037      	beq.n	de184 <log+0xec>
   de114:	2302      	movs	r3, #2
   de116:	9300      	str	r3, [sp, #0]
   de118:	4668      	mov	r0, sp
   de11a:	f004 faf7 	bl	e270c <matherr>
   de11e:	b1c8      	cbz	r0, de154 <log+0xbc>
   de120:	9b08      	ldr	r3, [sp, #32]
   de122:	b9e3      	cbnz	r3, de15e <log+0xc6>
   de124:	ed9d 0b06 	vldr	d0, [sp, #24]
   de128:	b00b      	add	sp, #44	; 0x2c
   de12a:	ecbd 8b02 	vpop	{d8}
   de12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de132:	f8df 9070 	ldr.w	r9, [pc, #112]	; de1a4 <log+0x10c>
   de136:	f04f 0800 	mov.w	r8, #0
   de13a:	4620      	mov	r0, r4
   de13c:	4629      	mov	r1, r5
   de13e:	2200      	movs	r2, #0
   de140:	2300      	movs	r3, #0
   de142:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de146:	f005 f833 	bl	e31b0 <__aeabi_dcmpeq>
   de14a:	b168      	cbz	r0, de168 <log+0xd0>
   de14c:	2302      	movs	r3, #2
   de14e:	429e      	cmp	r6, r3
   de150:	9300      	str	r3, [sp, #0]
   de152:	d1e1      	bne.n	de118 <log+0x80>
   de154:	f7fc fce6 	bl	dab24 <__errno>
   de158:	2322      	movs	r3, #34	; 0x22
   de15a:	6003      	str	r3, [r0, #0]
   de15c:	e7e0      	b.n	de120 <log+0x88>
   de15e:	f7fc fce1 	bl	dab24 <__errno>
   de162:	9b08      	ldr	r3, [sp, #32]
   de164:	6003      	str	r3, [r0, #0]
   de166:	e7dd      	b.n	de124 <log+0x8c>
   de168:	2301      	movs	r3, #1
   de16a:	2e02      	cmp	r6, #2
   de16c:	9300      	str	r3, [sp, #0]
   de16e:	d10b      	bne.n	de188 <log+0xf0>
   de170:	f7fc fcd8 	bl	dab24 <__errno>
   de174:	2321      	movs	r3, #33	; 0x21
   de176:	6003      	str	r3, [r0, #0]
   de178:	4809      	ldr	r0, [pc, #36]	; (de1a0 <log+0x108>)
   de17a:	f004 fac9 	bl	e2710 <nan>
   de17e:	ed8d 0b06 	vstr	d0, [sp, #24]
   de182:	e7cd      	b.n	de120 <log+0x88>
   de184:	2301      	movs	r3, #1
   de186:	9300      	str	r3, [sp, #0]
   de188:	4668      	mov	r0, sp
   de18a:	f004 fabf 	bl	e270c <matherr>
   de18e:	2800      	cmp	r0, #0
   de190:	d1f2      	bne.n	de178 <log+0xe0>
   de192:	e7ed      	b.n	de170 <log+0xd8>
   de194:	2003d57c 	.word	0x2003d57c
   de198:	000e8134 	.word	0x000e8134
   de19c:	c7efffff 	.word	0xc7efffff
   de1a0:	000e8130 	.word	0x000e8130
   de1a4:	fff00000 	.word	0xfff00000

000de1a8 <log10>:
   de1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de1ac:	ed2d 8b02 	vpush	{d8}
   de1b0:	b08b      	sub	sp, #44	; 0x2c
   de1b2:	ec55 4b10 	vmov	r4, r5, d0
   de1b6:	f001 fe33 	bl	dfe20 <__ieee754_log10>
   de1ba:	4b3b      	ldr	r3, [pc, #236]	; (de2a8 <log10+0x100>)
   de1bc:	eeb0 8a40 	vmov.f32	s16, s0
   de1c0:	eef0 8a60 	vmov.f32	s17, s1
   de1c4:	f993 6000 	ldrsb.w	r6, [r3]
   de1c8:	1c73      	adds	r3, r6, #1
   de1ca:	d00e      	beq.n	de1ea <log10+0x42>
   de1cc:	4622      	mov	r2, r4
   de1ce:	462b      	mov	r3, r5
   de1d0:	4620      	mov	r0, r4
   de1d2:	4629      	mov	r1, r5
   de1d4:	f005 f81e 	bl	e3214 <__aeabi_dcmpun>
   de1d8:	4607      	mov	r7, r0
   de1da:	b930      	cbnz	r0, de1ea <log10+0x42>
   de1dc:	2200      	movs	r2, #0
   de1de:	2300      	movs	r3, #0
   de1e0:	4620      	mov	r0, r4
   de1e2:	4629      	mov	r1, r5
   de1e4:	f004 fff8 	bl	e31d8 <__aeabi_dcmple>
   de1e8:	b940      	cbnz	r0, de1fc <log10+0x54>
   de1ea:	eeb0 0a48 	vmov.f32	s0, s16
   de1ee:	eef0 0a68 	vmov.f32	s1, s17
   de1f2:	b00b      	add	sp, #44	; 0x2c
   de1f4:	ecbd 8b02 	vpop	{d8}
   de1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de1fc:	4b2b      	ldr	r3, [pc, #172]	; (de2ac <log10+0x104>)
   de1fe:	9708      	str	r7, [sp, #32]
   de200:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de204:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de208:	9301      	str	r3, [sp, #4]
   de20a:	b9de      	cbnz	r6, de244 <log10+0x9c>
   de20c:	4f28      	ldr	r7, [pc, #160]	; (de2b0 <log10+0x108>)
   de20e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de212:	4620      	mov	r0, r4
   de214:	4629      	mov	r1, r5
   de216:	2200      	movs	r2, #0
   de218:	2300      	movs	r3, #0
   de21a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de21e:	f004 ffc7 	bl	e31b0 <__aeabi_dcmpeq>
   de222:	2800      	cmp	r0, #0
   de224:	d037      	beq.n	de296 <log10+0xee>
   de226:	2302      	movs	r3, #2
   de228:	9300      	str	r3, [sp, #0]
   de22a:	4668      	mov	r0, sp
   de22c:	f004 fa6e 	bl	e270c <matherr>
   de230:	b1c8      	cbz	r0, de266 <log10+0xbe>
   de232:	9b08      	ldr	r3, [sp, #32]
   de234:	b9e3      	cbnz	r3, de270 <log10+0xc8>
   de236:	ed9d 0b06 	vldr	d0, [sp, #24]
   de23a:	b00b      	add	sp, #44	; 0x2c
   de23c:	ecbd 8b02 	vpop	{d8}
   de240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de244:	f8df 9070 	ldr.w	r9, [pc, #112]	; de2b8 <log10+0x110>
   de248:	f04f 0800 	mov.w	r8, #0
   de24c:	4620      	mov	r0, r4
   de24e:	4629      	mov	r1, r5
   de250:	2200      	movs	r2, #0
   de252:	2300      	movs	r3, #0
   de254:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de258:	f004 ffaa 	bl	e31b0 <__aeabi_dcmpeq>
   de25c:	b168      	cbz	r0, de27a <log10+0xd2>
   de25e:	2302      	movs	r3, #2
   de260:	429e      	cmp	r6, r3
   de262:	9300      	str	r3, [sp, #0]
   de264:	d1e1      	bne.n	de22a <log10+0x82>
   de266:	f7fc fc5d 	bl	dab24 <__errno>
   de26a:	2322      	movs	r3, #34	; 0x22
   de26c:	6003      	str	r3, [r0, #0]
   de26e:	e7e0      	b.n	de232 <log10+0x8a>
   de270:	f7fc fc58 	bl	dab24 <__errno>
   de274:	9b08      	ldr	r3, [sp, #32]
   de276:	6003      	str	r3, [r0, #0]
   de278:	e7dd      	b.n	de236 <log10+0x8e>
   de27a:	2301      	movs	r3, #1
   de27c:	2e02      	cmp	r6, #2
   de27e:	9300      	str	r3, [sp, #0]
   de280:	d10b      	bne.n	de29a <log10+0xf2>
   de282:	f7fc fc4f 	bl	dab24 <__errno>
   de286:	2321      	movs	r3, #33	; 0x21
   de288:	6003      	str	r3, [r0, #0]
   de28a:	480a      	ldr	r0, [pc, #40]	; (de2b4 <log10+0x10c>)
   de28c:	f004 fa40 	bl	e2710 <nan>
   de290:	ed8d 0b06 	vstr	d0, [sp, #24]
   de294:	e7cd      	b.n	de232 <log10+0x8a>
   de296:	2301      	movs	r3, #1
   de298:	9300      	str	r3, [sp, #0]
   de29a:	4668      	mov	r0, sp
   de29c:	f004 fa36 	bl	e270c <matherr>
   de2a0:	2800      	cmp	r0, #0
   de2a2:	d1f2      	bne.n	de28a <log10+0xe2>
   de2a4:	e7ed      	b.n	de282 <log10+0xda>
   de2a6:	bf00      	nop
   de2a8:	2003d57c 	.word	0x2003d57c
   de2ac:	000e8138 	.word	0x000e8138
   de2b0:	c7efffff 	.word	0xc7efffff
   de2b4:	000e8130 	.word	0x000e8130
   de2b8:	fff00000 	.word	0xfff00000
   de2bc:	00000000 	.word	0x00000000

000de2c0 <pow>:
   de2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de2c4:	ed2d 8b02 	vpush	{d8}
   de2c8:	f8df a324 	ldr.w	sl, [pc, #804]	; de5f0 <pow+0x330>
   de2cc:	b08b      	sub	sp, #44	; 0x2c
   de2ce:	ec57 6b10 	vmov	r6, r7, d0
   de2d2:	ec55 4b11 	vmov	r4, r5, d1
   de2d6:	f001 fe47 	bl	dff68 <__ieee754_pow>
   de2da:	f99a 8000 	ldrsb.w	r8, [sl]
   de2de:	eeb0 8a40 	vmov.f32	s16, s0
   de2e2:	eef0 8a60 	vmov.f32	s17, s1
   de2e6:	f1b8 3fff 	cmp.w	r8, #4294967295
   de2ea:	d048      	beq.n	de37e <pow+0xbe>
   de2ec:	4622      	mov	r2, r4
   de2ee:	462b      	mov	r3, r5
   de2f0:	4620      	mov	r0, r4
   de2f2:	4629      	mov	r1, r5
   de2f4:	f004 ff8e 	bl	e3214 <__aeabi_dcmpun>
   de2f8:	4683      	mov	fp, r0
   de2fa:	2800      	cmp	r0, #0
   de2fc:	d13f      	bne.n	de37e <pow+0xbe>
   de2fe:	4632      	mov	r2, r6
   de300:	463b      	mov	r3, r7
   de302:	4630      	mov	r0, r6
   de304:	4639      	mov	r1, r7
   de306:	f004 ff85 	bl	e3214 <__aeabi_dcmpun>
   de30a:	4681      	mov	r9, r0
   de30c:	2800      	cmp	r0, #0
   de30e:	f040 8090 	bne.w	de432 <pow+0x172>
   de312:	4630      	mov	r0, r6
   de314:	4639      	mov	r1, r7
   de316:	2200      	movs	r2, #0
   de318:	2300      	movs	r3, #0
   de31a:	f004 ff49 	bl	e31b0 <__aeabi_dcmpeq>
   de31e:	2800      	cmp	r0, #0
   de320:	d036      	beq.n	de390 <pow+0xd0>
   de322:	2200      	movs	r2, #0
   de324:	2300      	movs	r3, #0
   de326:	4620      	mov	r0, r4
   de328:	4629      	mov	r1, r5
   de32a:	f004 ff41 	bl	e31b0 <__aeabi_dcmpeq>
   de32e:	4683      	mov	fp, r0
   de330:	b1b8      	cbz	r0, de362 <pow+0xa2>
   de332:	ed9f 7ba5 	vldr	d7, [pc, #660]	; de5c8 <pow+0x308>
   de336:	2201      	movs	r2, #1
   de338:	4ba9      	ldr	r3, [pc, #676]	; (de5e0 <pow+0x320>)
   de33a:	f8cd 9020 	str.w	r9, [sp, #32]
   de33e:	9200      	str	r2, [sp, #0]
   de340:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de344:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de348:	ed8d 7b06 	vstr	d7, [sp, #24]
   de34c:	9301      	str	r3, [sp, #4]
   de34e:	f1b8 0f00 	cmp.w	r8, #0
   de352:	d05b      	beq.n	de40c <pow+0x14c>
   de354:	ed9f 0b9e 	vldr	d0, [pc, #632]	; de5d0 <pow+0x310>
   de358:	b00b      	add	sp, #44	; 0x2c
   de35a:	ecbd 8b02 	vpop	{d8}
   de35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de362:	ec45 4b10 	vmov	d0, r4, r5
   de366:	f004 f9c9 	bl	e26fc <finite>
   de36a:	b140      	cbz	r0, de37e <pow+0xbe>
   de36c:	2200      	movs	r2, #0
   de36e:	2300      	movs	r3, #0
   de370:	4620      	mov	r0, r4
   de372:	4629      	mov	r1, r5
   de374:	f004 ff26 	bl	e31c4 <__aeabi_dcmplt>
   de378:	2800      	cmp	r0, #0
   de37a:	f040 80c5 	bne.w	de508 <pow+0x248>
   de37e:	eeb0 0a48 	vmov.f32	s0, s16
   de382:	eef0 0a68 	vmov.f32	s1, s17
   de386:	b00b      	add	sp, #44	; 0x2c
   de388:	ecbd 8b02 	vpop	{d8}
   de38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de390:	eeb0 0a48 	vmov.f32	s0, s16
   de394:	eef0 0a68 	vmov.f32	s1, s17
   de398:	f004 f9b0 	bl	e26fc <finite>
   de39c:	4680      	mov	r8, r0
   de39e:	2800      	cmp	r0, #0
   de3a0:	d061      	beq.n	de466 <pow+0x1a6>
   de3a2:	f04f 0800 	mov.w	r8, #0
   de3a6:	f04f 0900 	mov.w	r9, #0
   de3aa:	ec51 0b18 	vmov	r0, r1, d8
   de3ae:	4642      	mov	r2, r8
   de3b0:	464b      	mov	r3, r9
   de3b2:	f004 fefd 	bl	e31b0 <__aeabi_dcmpeq>
   de3b6:	2800      	cmp	r0, #0
   de3b8:	d0e1      	beq.n	de37e <pow+0xbe>
   de3ba:	ec47 6b10 	vmov	d0, r6, r7
   de3be:	f004 f99d 	bl	e26fc <finite>
   de3c2:	2800      	cmp	r0, #0
   de3c4:	d0db      	beq.n	de37e <pow+0xbe>
   de3c6:	ec45 4b10 	vmov	d0, r4, r5
   de3ca:	f004 f997 	bl	e26fc <finite>
   de3ce:	2800      	cmp	r0, #0
   de3d0:	d0d5      	beq.n	de37e <pow+0xbe>
   de3d2:	f99a 3000 	ldrsb.w	r3, [sl]
   de3d6:	4a82      	ldr	r2, [pc, #520]	; (de5e0 <pow+0x320>)
   de3d8:	9201      	str	r2, [sp, #4]
   de3da:	2104      	movs	r1, #4
   de3dc:	2200      	movs	r2, #0
   de3de:	2b02      	cmp	r3, #2
   de3e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de3e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de3e8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de3ec:	9100      	str	r1, [sp, #0]
   de3ee:	9208      	str	r2, [sp, #32]
   de3f0:	d003      	beq.n	de3fa <pow+0x13a>
   de3f2:	4668      	mov	r0, sp
   de3f4:	f004 f98a 	bl	e270c <matherr>
   de3f8:	b970      	cbnz	r0, de418 <pow+0x158>
   de3fa:	f7fc fb93 	bl	dab24 <__errno>
   de3fe:	2322      	movs	r3, #34	; 0x22
   de400:	6003      	str	r3, [r0, #0]
   de402:	e009      	b.n	de418 <pow+0x158>
   de404:	ed9f 7b70 	vldr	d7, [pc, #448]	; de5c8 <pow+0x308>
   de408:	ed8d 7b06 	vstr	d7, [sp, #24]
   de40c:	4668      	mov	r0, sp
   de40e:	f004 f97d 	bl	e270c <matherr>
   de412:	2800      	cmp	r0, #0
   de414:	f000 808e 	beq.w	de534 <pow+0x274>
   de418:	9b08      	ldr	r3, [sp, #32]
   de41a:	b11b      	cbz	r3, de424 <pow+0x164>
   de41c:	f7fc fb82 	bl	dab24 <__errno>
   de420:	9b08      	ldr	r3, [sp, #32]
   de422:	6003      	str	r3, [r0, #0]
   de424:	ed9d 0b06 	vldr	d0, [sp, #24]
   de428:	b00b      	add	sp, #44	; 0x2c
   de42a:	ecbd 8b02 	vpop	{d8}
   de42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de432:	2200      	movs	r2, #0
   de434:	2300      	movs	r3, #0
   de436:	4620      	mov	r0, r4
   de438:	4629      	mov	r1, r5
   de43a:	f004 feb9 	bl	e31b0 <__aeabi_dcmpeq>
   de43e:	2800      	cmp	r0, #0
   de440:	d09d      	beq.n	de37e <pow+0xbe>
   de442:	ed9f 0b63 	vldr	d0, [pc, #396]	; de5d0 <pow+0x310>
   de446:	4b66      	ldr	r3, [pc, #408]	; (de5e0 <pow+0x320>)
   de448:	f8cd b020 	str.w	fp, [sp, #32]
   de44c:	2201      	movs	r2, #1
   de44e:	f1b8 0f02 	cmp.w	r8, #2
   de452:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de456:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de45a:	ed8d 0b06 	vstr	d0, [sp, #24]
   de45e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de462:	d1d3      	bne.n	de40c <pow+0x14c>
   de464:	e78f      	b.n	de386 <pow+0xc6>
   de466:	ec47 6b10 	vmov	d0, r6, r7
   de46a:	f004 f947 	bl	e26fc <finite>
   de46e:	2800      	cmp	r0, #0
   de470:	d097      	beq.n	de3a2 <pow+0xe2>
   de472:	ec45 4b10 	vmov	d0, r4, r5
   de476:	f004 f941 	bl	e26fc <finite>
   de47a:	2800      	cmp	r0, #0
   de47c:	d091      	beq.n	de3a2 <pow+0xe2>
   de47e:	ec53 2b18 	vmov	r2, r3, d8
   de482:	ee18 0a10 	vmov	r0, s16
   de486:	4619      	mov	r1, r3
   de488:	f004 fec4 	bl	e3214 <__aeabi_dcmpun>
   de48c:	2800      	cmp	r0, #0
   de48e:	d17c      	bne.n	de58a <pow+0x2ca>
   de490:	2303      	movs	r3, #3
   de492:	f99a 8000 	ldrsb.w	r8, [sl]
   de496:	9300      	str	r3, [sp, #0]
   de498:	4b51      	ldr	r3, [pc, #324]	; (de5e0 <pow+0x320>)
   de49a:	9008      	str	r0, [sp, #32]
   de49c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de4a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de4a4:	9301      	str	r3, [sp, #4]
   de4a6:	f1b8 0f00 	cmp.w	r8, #0
   de4aa:	d148      	bne.n	de53e <pow+0x27e>
   de4ac:	f8df 9144 	ldr.w	r9, [pc, #324]	; de5f4 <pow+0x334>
   de4b0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   de4b4:	2200      	movs	r2, #0
   de4b6:	2300      	movs	r3, #0
   de4b8:	4630      	mov	r0, r6
   de4ba:	4639      	mov	r1, r7
   de4bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de4c0:	f004 fe80 	bl	e31c4 <__aeabi_dcmplt>
   de4c4:	2800      	cmp	r0, #0
   de4c6:	d094      	beq.n	de3f2 <pow+0x132>
   de4c8:	2200      	movs	r2, #0
   de4ca:	4b46      	ldr	r3, [pc, #280]	; (de5e4 <pow+0x324>)
   de4cc:	4620      	mov	r0, r4
   de4ce:	4629      	mov	r1, r5
   de4d0:	f004 fc06 	bl	e2ce0 <__aeabi_dmul>
   de4d4:	4604      	mov	r4, r0
   de4d6:	460d      	mov	r5, r1
   de4d8:	ec45 4b10 	vmov	d0, r4, r5
   de4dc:	f004 f920 	bl	e2720 <rint>
   de4e0:	4620      	mov	r0, r4
   de4e2:	ec53 2b10 	vmov	r2, r3, d0
   de4e6:	4629      	mov	r1, r5
   de4e8:	f004 fe62 	bl	e31b0 <__aeabi_dcmpeq>
   de4ec:	2800      	cmp	r0, #0
   de4ee:	d149      	bne.n	de584 <pow+0x2c4>
   de4f0:	4b3d      	ldr	r3, [pc, #244]	; (de5e8 <pow+0x328>)
   de4f2:	f99a 8000 	ldrsb.w	r8, [sl]
   de4f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de4fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de4fe:	f1b8 0f02 	cmp.w	r8, #2
   de502:	f47f af76 	bne.w	de3f2 <pow+0x132>
   de506:	e778      	b.n	de3fa <pow+0x13a>
   de508:	4a35      	ldr	r2, [pc, #212]	; (de5e0 <pow+0x320>)
   de50a:	f99a 3000 	ldrsb.w	r3, [sl]
   de50e:	f8cd b020 	str.w	fp, [sp, #32]
   de512:	2101      	movs	r1, #1
   de514:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de518:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de51c:	e88d 0006 	stmia.w	sp, {r1, r2}
   de520:	2b00      	cmp	r3, #0
   de522:	f43f af6f 	beq.w	de404 <pow+0x144>
   de526:	4931      	ldr	r1, [pc, #196]	; (de5ec <pow+0x32c>)
   de528:	2000      	movs	r0, #0
   de52a:	2b02      	cmp	r3, #2
   de52c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de530:	f47f af6c 	bne.w	de40c <pow+0x14c>
   de534:	f7fc faf6 	bl	dab24 <__errno>
   de538:	2321      	movs	r3, #33	; 0x21
   de53a:	6003      	str	r3, [r0, #0]
   de53c:	e76c      	b.n	de418 <pow+0x158>
   de53e:	ed9f 7b26 	vldr	d7, [pc, #152]	; de5d8 <pow+0x318>
   de542:	2200      	movs	r2, #0
   de544:	2300      	movs	r3, #0
   de546:	4630      	mov	r0, r6
   de548:	4639      	mov	r1, r7
   de54a:	ed8d 7b06 	vstr	d7, [sp, #24]
   de54e:	f004 fe39 	bl	e31c4 <__aeabi_dcmplt>
   de552:	2800      	cmp	r0, #0
   de554:	d0d3      	beq.n	de4fe <pow+0x23e>
   de556:	2200      	movs	r2, #0
   de558:	4b22      	ldr	r3, [pc, #136]	; (de5e4 <pow+0x324>)
   de55a:	4620      	mov	r0, r4
   de55c:	4629      	mov	r1, r5
   de55e:	f004 fbbf 	bl	e2ce0 <__aeabi_dmul>
   de562:	4604      	mov	r4, r0
   de564:	460d      	mov	r5, r1
   de566:	ec45 4b10 	vmov	d0, r4, r5
   de56a:	f004 f8d9 	bl	e2720 <rint>
   de56e:	4620      	mov	r0, r4
   de570:	ec53 2b10 	vmov	r2, r3, d0
   de574:	4629      	mov	r1, r5
   de576:	f004 fe1b 	bl	e31b0 <__aeabi_dcmpeq>
   de57a:	b918      	cbnz	r0, de584 <pow+0x2c4>
   de57c:	4b1b      	ldr	r3, [pc, #108]	; (de5ec <pow+0x32c>)
   de57e:	2200      	movs	r2, #0
   de580:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de584:	f99a 8000 	ldrsb.w	r8, [sl]
   de588:	e7b9      	b.n	de4fe <pow+0x23e>
   de58a:	4b15      	ldr	r3, [pc, #84]	; (de5e0 <pow+0x320>)
   de58c:	f99a 9000 	ldrsb.w	r9, [sl]
   de590:	f8cd 8020 	str.w	r8, [sp, #32]
   de594:	2201      	movs	r2, #1
   de596:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de59a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de59e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de5a2:	f1b9 0f00 	cmp.w	r9, #0
   de5a6:	f43f af2d 	beq.w	de404 <pow+0x144>
   de5aa:	2200      	movs	r2, #0
   de5ac:	2300      	movs	r3, #0
   de5ae:	4610      	mov	r0, r2
   de5b0:	4619      	mov	r1, r3
   de5b2:	f004 fcbf 	bl	e2f34 <__aeabi_ddiv>
   de5b6:	f1b9 0f02 	cmp.w	r9, #2
   de5ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de5be:	d0b9      	beq.n	de534 <pow+0x274>
   de5c0:	e724      	b.n	de40c <pow+0x14c>
   de5c2:	bf00      	nop
   de5c4:	f3af 8000 	nop.w
	...
   de5d4:	3ff00000 	.word	0x3ff00000
   de5d8:	00000000 	.word	0x00000000
   de5dc:	7ff00000 	.word	0x7ff00000
   de5e0:	000e8140 	.word	0x000e8140
   de5e4:	3fe00000 	.word	0x3fe00000
   de5e8:	c7efffff 	.word	0xc7efffff
   de5ec:	fff00000 	.word	0xfff00000
   de5f0:	2003d57c 	.word	0x2003d57c
   de5f4:	47efffff 	.word	0x47efffff

000de5f8 <sinh>:
   de5f8:	b530      	push	{r4, r5, lr}
   de5fa:	ed2d 8b04 	vpush	{d8-d9}
   de5fe:	eeb0 9a40 	vmov.f32	s18, s0
   de602:	eef0 9a60 	vmov.f32	s19, s1
   de606:	4c2d      	ldr	r4, [pc, #180]	; (de6bc <sinh+0xc4>)
   de608:	b08b      	sub	sp, #44	; 0x2c
   de60a:	f002 fc5d 	bl	e0ec8 <__ieee754_sinh>
   de60e:	f994 3000 	ldrsb.w	r3, [r4]
   de612:	eeb0 8a40 	vmov.f32	s16, s0
   de616:	eef0 8a60 	vmov.f32	s17, s1
   de61a:	3301      	adds	r3, #1
   de61c:	d003      	beq.n	de626 <sinh+0x2e>
   de61e:	f004 f86d 	bl	e26fc <finite>
   de622:	4605      	mov	r5, r0
   de624:	b138      	cbz	r0, de636 <sinh+0x3e>
   de626:	eeb0 0a48 	vmov.f32	s0, s16
   de62a:	eef0 0a68 	vmov.f32	s1, s17
   de62e:	b00b      	add	sp, #44	; 0x2c
   de630:	ecbd 8b04 	vpop	{d8-d9}
   de634:	bd30      	pop	{r4, r5, pc}
   de636:	eeb0 0a49 	vmov.f32	s0, s18
   de63a:	eef0 0a69 	vmov.f32	s1, s19
   de63e:	f004 f85d 	bl	e26fc <finite>
   de642:	2800      	cmp	r0, #0
   de644:	d0ef      	beq.n	de626 <sinh+0x2e>
   de646:	4b1e      	ldr	r3, [pc, #120]	; (de6c0 <sinh+0xc8>)
   de648:	f994 4000 	ldrsb.w	r4, [r4]
   de64c:	9508      	str	r5, [sp, #32]
   de64e:	2203      	movs	r2, #3
   de650:	e88d 000c 	stmia.w	sp, {r2, r3}
   de654:	ed8d 9b04 	vstr	d9, [sp, #16]
   de658:	ed8d 9b02 	vstr	d9, [sp, #8]
   de65c:	2200      	movs	r2, #0
   de65e:	2300      	movs	r3, #0
   de660:	ec51 0b19 	vmov	r0, r1, d9
   de664:	b99c      	cbnz	r4, de68e <sinh+0x96>
   de666:	f004 fdcb 	bl	e3200 <__aeabi_dcmpgt>
   de66a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de66e:	b308      	cbz	r0, de6b4 <sinh+0xbc>
   de670:	4b14      	ldr	r3, [pc, #80]	; (de6c4 <sinh+0xcc>)
   de672:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de676:	4668      	mov	r0, sp
   de678:	f004 f848 	bl	e270c <matherr>
   de67c:	b180      	cbz	r0, de6a0 <sinh+0xa8>
   de67e:	9b08      	ldr	r3, [sp, #32]
   de680:	b99b      	cbnz	r3, de6aa <sinh+0xb2>
   de682:	ed9d 0b06 	vldr	d0, [sp, #24]
   de686:	b00b      	add	sp, #44	; 0x2c
   de688:	ecbd 8b04 	vpop	{d8-d9}
   de68c:	bd30      	pop	{r4, r5, pc}
   de68e:	f004 fdb7 	bl	e3200 <__aeabi_dcmpgt>
   de692:	2200      	movs	r2, #0
   de694:	b180      	cbz	r0, de6b8 <sinh+0xc0>
   de696:	4b0c      	ldr	r3, [pc, #48]	; (de6c8 <sinh+0xd0>)
   de698:	2c02      	cmp	r4, #2
   de69a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de69e:	d1ea      	bne.n	de676 <sinh+0x7e>
   de6a0:	f7fc fa40 	bl	dab24 <__errno>
   de6a4:	2322      	movs	r3, #34	; 0x22
   de6a6:	6003      	str	r3, [r0, #0]
   de6a8:	e7e9      	b.n	de67e <sinh+0x86>
   de6aa:	f7fc fa3b 	bl	dab24 <__errno>
   de6ae:	9b08      	ldr	r3, [sp, #32]
   de6b0:	6003      	str	r3, [r0, #0]
   de6b2:	e7e6      	b.n	de682 <sinh+0x8a>
   de6b4:	4b05      	ldr	r3, [pc, #20]	; (de6cc <sinh+0xd4>)
   de6b6:	e7dc      	b.n	de672 <sinh+0x7a>
   de6b8:	4b05      	ldr	r3, [pc, #20]	; (de6d0 <sinh+0xd8>)
   de6ba:	e7ed      	b.n	de698 <sinh+0xa0>
   de6bc:	2003d57c 	.word	0x2003d57c
   de6c0:	000e8144 	.word	0x000e8144
   de6c4:	47efffff 	.word	0x47efffff
   de6c8:	7ff00000 	.word	0x7ff00000
   de6cc:	c7efffff 	.word	0xc7efffff
   de6d0:	fff00000 	.word	0xfff00000

000de6d4 <sqrt>:
   de6d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de6d8:	ed2d 8b02 	vpush	{d8}
   de6dc:	b08b      	sub	sp, #44	; 0x2c
   de6de:	ec55 4b10 	vmov	r4, r5, d0
   de6e2:	f002 fcd5 	bl	e1090 <__ieee754_sqrt>
   de6e6:	4b29      	ldr	r3, [pc, #164]	; (de78c <sqrt+0xb8>)
   de6e8:	eeb0 8a40 	vmov.f32	s16, s0
   de6ec:	eef0 8a60 	vmov.f32	s17, s1
   de6f0:	f993 6000 	ldrsb.w	r6, [r3]
   de6f4:	1c73      	adds	r3, r6, #1
   de6f6:	d012      	beq.n	de71e <sqrt+0x4a>
   de6f8:	4622      	mov	r2, r4
   de6fa:	462b      	mov	r3, r5
   de6fc:	4620      	mov	r0, r4
   de6fe:	4629      	mov	r1, r5
   de700:	f004 fd88 	bl	e3214 <__aeabi_dcmpun>
   de704:	4607      	mov	r7, r0
   de706:	b950      	cbnz	r0, de71e <sqrt+0x4a>
   de708:	f04f 0800 	mov.w	r8, #0
   de70c:	f04f 0900 	mov.w	r9, #0
   de710:	4620      	mov	r0, r4
   de712:	4629      	mov	r1, r5
   de714:	4642      	mov	r2, r8
   de716:	464b      	mov	r3, r9
   de718:	f004 fd54 	bl	e31c4 <__aeabi_dcmplt>
   de71c:	b940      	cbnz	r0, de730 <sqrt+0x5c>
   de71e:	eeb0 0a48 	vmov.f32	s0, s16
   de722:	eef0 0a68 	vmov.f32	s1, s17
   de726:	b00b      	add	sp, #44	; 0x2c
   de728:	ecbd 8b02 	vpop	{d8}
   de72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de730:	4b17      	ldr	r3, [pc, #92]	; (de790 <sqrt+0xbc>)
   de732:	9708      	str	r7, [sp, #32]
   de734:	2201      	movs	r2, #1
   de736:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de73a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de73e:	e88d 000c 	stmia.w	sp, {r2, r3}
   de742:	b1b6      	cbz	r6, de772 <sqrt+0x9e>
   de744:	4642      	mov	r2, r8
   de746:	464b      	mov	r3, r9
   de748:	4640      	mov	r0, r8
   de74a:	4649      	mov	r1, r9
   de74c:	f004 fbf2 	bl	e2f34 <__aeabi_ddiv>
   de750:	2e02      	cmp	r6, #2
   de752:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de756:	d10e      	bne.n	de776 <sqrt+0xa2>
   de758:	f7fc f9e4 	bl	dab24 <__errno>
   de75c:	2321      	movs	r3, #33	; 0x21
   de75e:	6003      	str	r3, [r0, #0]
   de760:	9b08      	ldr	r3, [sp, #32]
   de762:	b973      	cbnz	r3, de782 <sqrt+0xae>
   de764:	ed9d 0b06 	vldr	d0, [sp, #24]
   de768:	b00b      	add	sp, #44	; 0x2c
   de76a:	ecbd 8b02 	vpop	{d8}
   de76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de772:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de776:	4668      	mov	r0, sp
   de778:	f003 ffc8 	bl	e270c <matherr>
   de77c:	2800      	cmp	r0, #0
   de77e:	d1ef      	bne.n	de760 <sqrt+0x8c>
   de780:	e7ea      	b.n	de758 <sqrt+0x84>
   de782:	f7fc f9cf 	bl	dab24 <__errno>
   de786:	9b08      	ldr	r3, [sp, #32]
   de788:	6003      	str	r3, [r0, #0]
   de78a:	e7eb      	b.n	de764 <sqrt+0x90>
   de78c:	2003d57c 	.word	0x2003d57c
   de790:	000e814c 	.word	0x000e814c
   de794:	00000000 	.word	0x00000000

000de798 <__ieee754_acos>:
   de798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de79c:	ec55 4b10 	vmov	r4, r5, d0
   de7a0:	49cd      	ldr	r1, [pc, #820]	; (dead8 <__ieee754_acos+0x340>)
   de7a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   de7a6:	428b      	cmp	r3, r1
   de7a8:	dd0d      	ble.n	de7c6 <__ieee754_acos+0x2e>
   de7aa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   de7ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   de7b2:	4323      	orrs	r3, r4
   de7b4:	f040 80bd 	bne.w	de932 <__ieee754_acos+0x19a>
   de7b8:	2d00      	cmp	r5, #0
   de7ba:	f340 814f 	ble.w	dea5c <__ieee754_acos+0x2c4>
   de7be:	ed9f 0baa 	vldr	d0, [pc, #680]	; dea68 <__ieee754_acos+0x2d0>
   de7c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de7c6:	49c5      	ldr	r1, [pc, #788]	; (deadc <__ieee754_acos+0x344>)
   de7c8:	428b      	cmp	r3, r1
   de7ca:	f340 80ab 	ble.w	de924 <__ieee754_acos+0x18c>
   de7ce:	2d00      	cmp	r5, #0
   de7d0:	f2c0 818c 	blt.w	deaec <__ieee754_acos+0x354>
   de7d4:	ee10 2a10 	vmov	r2, s0
   de7d8:	462b      	mov	r3, r5
   de7da:	2000      	movs	r0, #0
   de7dc:	49c0      	ldr	r1, [pc, #768]	; (deae0 <__ieee754_acos+0x348>)
   de7de:	f004 f8cb 	bl	e2978 <__aeabi_dsub>
   de7e2:	2200      	movs	r2, #0
   de7e4:	4bbf      	ldr	r3, [pc, #764]	; (deae4 <__ieee754_acos+0x34c>)
   de7e6:	f004 fa7b 	bl	e2ce0 <__aeabi_dmul>
   de7ea:	4604      	mov	r4, r0
   de7ec:	460d      	mov	r5, r1
   de7ee:	ec45 4b10 	vmov	d0, r4, r5
   de7f2:	f002 fc4d 	bl	e1090 <__ieee754_sqrt>
   de7f6:	4620      	mov	r0, r4
   de7f8:	4629      	mov	r1, r5
   de7fa:	a39d      	add	r3, pc, #628	; (adr r3, dea70 <__ieee754_acos+0x2d8>)
   de7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   de800:	ec59 8b10 	vmov	r8, r9, d0
   de804:	f004 fa6c 	bl	e2ce0 <__aeabi_dmul>
   de808:	a39b      	add	r3, pc, #620	; (adr r3, dea78 <__ieee754_acos+0x2e0>)
   de80a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de80e:	f004 f8b5 	bl	e297c <__adddf3>
   de812:	4622      	mov	r2, r4
   de814:	462b      	mov	r3, r5
   de816:	f004 fa63 	bl	e2ce0 <__aeabi_dmul>
   de81a:	a399      	add	r3, pc, #612	; (adr r3, dea80 <__ieee754_acos+0x2e8>)
   de81c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de820:	f004 f8aa 	bl	e2978 <__aeabi_dsub>
   de824:	4622      	mov	r2, r4
   de826:	462b      	mov	r3, r5
   de828:	f004 fa5a 	bl	e2ce0 <__aeabi_dmul>
   de82c:	a396      	add	r3, pc, #600	; (adr r3, dea88 <__ieee754_acos+0x2f0>)
   de82e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de832:	f004 f8a3 	bl	e297c <__adddf3>
   de836:	4622      	mov	r2, r4
   de838:	462b      	mov	r3, r5
   de83a:	f004 fa51 	bl	e2ce0 <__aeabi_dmul>
   de83e:	a394      	add	r3, pc, #592	; (adr r3, dea90 <__ieee754_acos+0x2f8>)
   de840:	e9d3 2300 	ldrd	r2, r3, [r3]
   de844:	f004 f898 	bl	e2978 <__aeabi_dsub>
   de848:	4622      	mov	r2, r4
   de84a:	462b      	mov	r3, r5
   de84c:	f004 fa48 	bl	e2ce0 <__aeabi_dmul>
   de850:	a391      	add	r3, pc, #580	; (adr r3, dea98 <__ieee754_acos+0x300>)
   de852:	e9d3 2300 	ldrd	r2, r3, [r3]
   de856:	f004 f891 	bl	e297c <__adddf3>
   de85a:	4622      	mov	r2, r4
   de85c:	462b      	mov	r3, r5
   de85e:	f004 fa3f 	bl	e2ce0 <__aeabi_dmul>
   de862:	a38f      	add	r3, pc, #572	; (adr r3, deaa0 <__ieee754_acos+0x308>)
   de864:	e9d3 2300 	ldrd	r2, r3, [r3]
   de868:	4682      	mov	sl, r0
   de86a:	468b      	mov	fp, r1
   de86c:	4620      	mov	r0, r4
   de86e:	4629      	mov	r1, r5
   de870:	f004 fa36 	bl	e2ce0 <__aeabi_dmul>
   de874:	a38c      	add	r3, pc, #560	; (adr r3, deaa8 <__ieee754_acos+0x310>)
   de876:	e9d3 2300 	ldrd	r2, r3, [r3]
   de87a:	f004 f87d 	bl	e2978 <__aeabi_dsub>
   de87e:	4622      	mov	r2, r4
   de880:	462b      	mov	r3, r5
   de882:	f004 fa2d 	bl	e2ce0 <__aeabi_dmul>
   de886:	a38a      	add	r3, pc, #552	; (adr r3, deab0 <__ieee754_acos+0x318>)
   de888:	e9d3 2300 	ldrd	r2, r3, [r3]
   de88c:	f004 f876 	bl	e297c <__adddf3>
   de890:	4622      	mov	r2, r4
   de892:	462b      	mov	r3, r5
   de894:	f004 fa24 	bl	e2ce0 <__aeabi_dmul>
   de898:	a387      	add	r3, pc, #540	; (adr r3, deab8 <__ieee754_acos+0x320>)
   de89a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de89e:	f004 f86b 	bl	e2978 <__aeabi_dsub>
   de8a2:	4622      	mov	r2, r4
   de8a4:	462b      	mov	r3, r5
   de8a6:	f004 fa1b 	bl	e2ce0 <__aeabi_dmul>
   de8aa:	2200      	movs	r2, #0
   de8ac:	4b8c      	ldr	r3, [pc, #560]	; (deae0 <__ieee754_acos+0x348>)
   de8ae:	f004 f865 	bl	e297c <__adddf3>
   de8b2:	4602      	mov	r2, r0
   de8b4:	460b      	mov	r3, r1
   de8b6:	4650      	mov	r0, sl
   de8b8:	4659      	mov	r1, fp
   de8ba:	f004 fb3b 	bl	e2f34 <__aeabi_ddiv>
   de8be:	4642      	mov	r2, r8
   de8c0:	464b      	mov	r3, r9
   de8c2:	f004 fa0d 	bl	e2ce0 <__aeabi_dmul>
   de8c6:	2600      	movs	r6, #0
   de8c8:	4682      	mov	sl, r0
   de8ca:	468b      	mov	fp, r1
   de8cc:	4632      	mov	r2, r6
   de8ce:	464b      	mov	r3, r9
   de8d0:	4630      	mov	r0, r6
   de8d2:	4649      	mov	r1, r9
   de8d4:	f004 fa04 	bl	e2ce0 <__aeabi_dmul>
   de8d8:	4602      	mov	r2, r0
   de8da:	460b      	mov	r3, r1
   de8dc:	4620      	mov	r0, r4
   de8de:	4629      	mov	r1, r5
   de8e0:	f004 f84a 	bl	e2978 <__aeabi_dsub>
   de8e4:	4632      	mov	r2, r6
   de8e6:	4604      	mov	r4, r0
   de8e8:	460d      	mov	r5, r1
   de8ea:	464b      	mov	r3, r9
   de8ec:	4640      	mov	r0, r8
   de8ee:	4649      	mov	r1, r9
   de8f0:	f004 f844 	bl	e297c <__adddf3>
   de8f4:	4602      	mov	r2, r0
   de8f6:	460b      	mov	r3, r1
   de8f8:	4620      	mov	r0, r4
   de8fa:	4629      	mov	r1, r5
   de8fc:	f004 fb1a 	bl	e2f34 <__aeabi_ddiv>
   de900:	4602      	mov	r2, r0
   de902:	460b      	mov	r3, r1
   de904:	4650      	mov	r0, sl
   de906:	4659      	mov	r1, fp
   de908:	f004 f838 	bl	e297c <__adddf3>
   de90c:	4632      	mov	r2, r6
   de90e:	464b      	mov	r3, r9
   de910:	f004 f834 	bl	e297c <__adddf3>
   de914:	4602      	mov	r2, r0
   de916:	460b      	mov	r3, r1
   de918:	f004 f830 	bl	e297c <__adddf3>
   de91c:	ec41 0b10 	vmov	d0, r0, r1
   de920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de924:	4a70      	ldr	r2, [pc, #448]	; (deae8 <__ieee754_acos+0x350>)
   de926:	4293      	cmp	r3, r2
   de928:	dc12      	bgt.n	de950 <__ieee754_acos+0x1b8>
   de92a:	ed9f 0b65 	vldr	d0, [pc, #404]	; deac0 <__ieee754_acos+0x328>
   de92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de932:	ee10 2a10 	vmov	r2, s0
   de936:	462b      	mov	r3, r5
   de938:	4620      	mov	r0, r4
   de93a:	4629      	mov	r1, r5
   de93c:	f004 f81c 	bl	e2978 <__aeabi_dsub>
   de940:	4602      	mov	r2, r0
   de942:	460b      	mov	r3, r1
   de944:	f004 faf6 	bl	e2f34 <__aeabi_ddiv>
   de948:	ec41 0b10 	vmov	d0, r0, r1
   de94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de950:	ee10 2a10 	vmov	r2, s0
   de954:	ee10 0a10 	vmov	r0, s0
   de958:	462b      	mov	r3, r5
   de95a:	4629      	mov	r1, r5
   de95c:	f004 f9c0 	bl	e2ce0 <__aeabi_dmul>
   de960:	a343      	add	r3, pc, #268	; (adr r3, dea70 <__ieee754_acos+0x2d8>)
   de962:	e9d3 2300 	ldrd	r2, r3, [r3]
   de966:	4606      	mov	r6, r0
   de968:	460f      	mov	r7, r1
   de96a:	f004 f9b9 	bl	e2ce0 <__aeabi_dmul>
   de96e:	a342      	add	r3, pc, #264	; (adr r3, dea78 <__ieee754_acos+0x2e0>)
   de970:	e9d3 2300 	ldrd	r2, r3, [r3]
   de974:	f004 f802 	bl	e297c <__adddf3>
   de978:	4632      	mov	r2, r6
   de97a:	463b      	mov	r3, r7
   de97c:	f004 f9b0 	bl	e2ce0 <__aeabi_dmul>
   de980:	a33f      	add	r3, pc, #252	; (adr r3, dea80 <__ieee754_acos+0x2e8>)
   de982:	e9d3 2300 	ldrd	r2, r3, [r3]
   de986:	f003 fff7 	bl	e2978 <__aeabi_dsub>
   de98a:	4632      	mov	r2, r6
   de98c:	463b      	mov	r3, r7
   de98e:	f004 f9a7 	bl	e2ce0 <__aeabi_dmul>
   de992:	a33d      	add	r3, pc, #244	; (adr r3, dea88 <__ieee754_acos+0x2f0>)
   de994:	e9d3 2300 	ldrd	r2, r3, [r3]
   de998:	f003 fff0 	bl	e297c <__adddf3>
   de99c:	4632      	mov	r2, r6
   de99e:	463b      	mov	r3, r7
   de9a0:	f004 f99e 	bl	e2ce0 <__aeabi_dmul>
   de9a4:	a33a      	add	r3, pc, #232	; (adr r3, dea90 <__ieee754_acos+0x2f8>)
   de9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9aa:	f003 ffe5 	bl	e2978 <__aeabi_dsub>
   de9ae:	4632      	mov	r2, r6
   de9b0:	463b      	mov	r3, r7
   de9b2:	f004 f995 	bl	e2ce0 <__aeabi_dmul>
   de9b6:	a338      	add	r3, pc, #224	; (adr r3, dea98 <__ieee754_acos+0x300>)
   de9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9bc:	f003 ffde 	bl	e297c <__adddf3>
   de9c0:	4632      	mov	r2, r6
   de9c2:	463b      	mov	r3, r7
   de9c4:	f004 f98c 	bl	e2ce0 <__aeabi_dmul>
   de9c8:	a335      	add	r3, pc, #212	; (adr r3, deaa0 <__ieee754_acos+0x308>)
   de9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9ce:	4680      	mov	r8, r0
   de9d0:	4689      	mov	r9, r1
   de9d2:	4630      	mov	r0, r6
   de9d4:	4639      	mov	r1, r7
   de9d6:	f004 f983 	bl	e2ce0 <__aeabi_dmul>
   de9da:	a333      	add	r3, pc, #204	; (adr r3, deaa8 <__ieee754_acos+0x310>)
   de9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9e0:	f003 ffca 	bl	e2978 <__aeabi_dsub>
   de9e4:	4632      	mov	r2, r6
   de9e6:	463b      	mov	r3, r7
   de9e8:	f004 f97a 	bl	e2ce0 <__aeabi_dmul>
   de9ec:	a330      	add	r3, pc, #192	; (adr r3, deab0 <__ieee754_acos+0x318>)
   de9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   de9f2:	f003 ffc3 	bl	e297c <__adddf3>
   de9f6:	4632      	mov	r2, r6
   de9f8:	463b      	mov	r3, r7
   de9fa:	f004 f971 	bl	e2ce0 <__aeabi_dmul>
   de9fe:	a32e      	add	r3, pc, #184	; (adr r3, deab8 <__ieee754_acos+0x320>)
   dea00:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea04:	f003 ffb8 	bl	e2978 <__aeabi_dsub>
   dea08:	4632      	mov	r2, r6
   dea0a:	463b      	mov	r3, r7
   dea0c:	f004 f968 	bl	e2ce0 <__aeabi_dmul>
   dea10:	2200      	movs	r2, #0
   dea12:	4b33      	ldr	r3, [pc, #204]	; (deae0 <__ieee754_acos+0x348>)
   dea14:	f003 ffb2 	bl	e297c <__adddf3>
   dea18:	4602      	mov	r2, r0
   dea1a:	460b      	mov	r3, r1
   dea1c:	4640      	mov	r0, r8
   dea1e:	4649      	mov	r1, r9
   dea20:	f004 fa88 	bl	e2f34 <__aeabi_ddiv>
   dea24:	4622      	mov	r2, r4
   dea26:	462b      	mov	r3, r5
   dea28:	f004 f95a 	bl	e2ce0 <__aeabi_dmul>
   dea2c:	4602      	mov	r2, r0
   dea2e:	460b      	mov	r3, r1
   dea30:	a125      	add	r1, pc, #148	; (adr r1, deac8 <__ieee754_acos+0x330>)
   dea32:	e9d1 0100 	ldrd	r0, r1, [r1]
   dea36:	f003 ff9f 	bl	e2978 <__aeabi_dsub>
   dea3a:	4602      	mov	r2, r0
   dea3c:	460b      	mov	r3, r1
   dea3e:	4620      	mov	r0, r4
   dea40:	4629      	mov	r1, r5
   dea42:	f003 ff99 	bl	e2978 <__aeabi_dsub>
   dea46:	4602      	mov	r2, r0
   dea48:	460b      	mov	r3, r1
   dea4a:	a11d      	add	r1, pc, #116	; (adr r1, deac0 <__ieee754_acos+0x328>)
   dea4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   dea50:	f003 ff92 	bl	e2978 <__aeabi_dsub>
   dea54:	ec41 0b10 	vmov	d0, r0, r1
   dea58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea5c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dead0 <__ieee754_acos+0x338>
   dea60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea64:	f3af 8000 	nop.w
	...
   dea70:	0dfdf709 	.word	0x0dfdf709
   dea74:	3f023de1 	.word	0x3f023de1
   dea78:	7501b288 	.word	0x7501b288
   dea7c:	3f49efe0 	.word	0x3f49efe0
   dea80:	b5688f3b 	.word	0xb5688f3b
   dea84:	3fa48228 	.word	0x3fa48228
   dea88:	0e884455 	.word	0x0e884455
   dea8c:	3fc9c155 	.word	0x3fc9c155
   dea90:	03eb6f7d 	.word	0x03eb6f7d
   dea94:	3fd4d612 	.word	0x3fd4d612
   dea98:	55555555 	.word	0x55555555
   dea9c:	3fc55555 	.word	0x3fc55555
   deaa0:	b12e9282 	.word	0xb12e9282
   deaa4:	3fb3b8c5 	.word	0x3fb3b8c5
   deaa8:	1b8d0159 	.word	0x1b8d0159
   deaac:	3fe6066c 	.word	0x3fe6066c
   deab0:	9c598ac8 	.word	0x9c598ac8
   deab4:	40002ae5 	.word	0x40002ae5
   deab8:	1c8a2d4b 	.word	0x1c8a2d4b
   deabc:	40033a27 	.word	0x40033a27
   deac0:	54442d18 	.word	0x54442d18
   deac4:	3ff921fb 	.word	0x3ff921fb
   deac8:	33145c07 	.word	0x33145c07
   deacc:	3c91a626 	.word	0x3c91a626
   dead0:	54442d18 	.word	0x54442d18
   dead4:	400921fb 	.word	0x400921fb
   dead8:	3fefffff 	.word	0x3fefffff
   deadc:	3fdfffff 	.word	0x3fdfffff
   deae0:	3ff00000 	.word	0x3ff00000
   deae4:	3fe00000 	.word	0x3fe00000
   deae8:	3c600000 	.word	0x3c600000
   deaec:	ee10 0a10 	vmov	r0, s0
   deaf0:	4629      	mov	r1, r5
   deaf2:	2200      	movs	r2, #0
   deaf4:	4b5e      	ldr	r3, [pc, #376]	; (dec70 <__ieee754_acos+0x4d8>)
   deaf6:	f003 ff41 	bl	e297c <__adddf3>
   deafa:	2200      	movs	r2, #0
   deafc:	4b5d      	ldr	r3, [pc, #372]	; (dec74 <__ieee754_acos+0x4dc>)
   deafe:	f004 f8ef 	bl	e2ce0 <__aeabi_dmul>
   deb02:	a343      	add	r3, pc, #268	; (adr r3, dec10 <__ieee754_acos+0x478>)
   deb04:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb08:	4604      	mov	r4, r0
   deb0a:	460d      	mov	r5, r1
   deb0c:	f004 f8e8 	bl	e2ce0 <__aeabi_dmul>
   deb10:	a341      	add	r3, pc, #260	; (adr r3, dec18 <__ieee754_acos+0x480>)
   deb12:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb16:	f003 ff31 	bl	e297c <__adddf3>
   deb1a:	4622      	mov	r2, r4
   deb1c:	462b      	mov	r3, r5
   deb1e:	f004 f8df 	bl	e2ce0 <__aeabi_dmul>
   deb22:	a33f      	add	r3, pc, #252	; (adr r3, dec20 <__ieee754_acos+0x488>)
   deb24:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb28:	f003 ff26 	bl	e2978 <__aeabi_dsub>
   deb2c:	4622      	mov	r2, r4
   deb2e:	462b      	mov	r3, r5
   deb30:	f004 f8d6 	bl	e2ce0 <__aeabi_dmul>
   deb34:	a33c      	add	r3, pc, #240	; (adr r3, dec28 <__ieee754_acos+0x490>)
   deb36:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb3a:	f003 ff1f 	bl	e297c <__adddf3>
   deb3e:	4622      	mov	r2, r4
   deb40:	462b      	mov	r3, r5
   deb42:	f004 f8cd 	bl	e2ce0 <__aeabi_dmul>
   deb46:	a33a      	add	r3, pc, #232	; (adr r3, dec30 <__ieee754_acos+0x498>)
   deb48:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb4c:	f003 ff14 	bl	e2978 <__aeabi_dsub>
   deb50:	4622      	mov	r2, r4
   deb52:	462b      	mov	r3, r5
   deb54:	f004 f8c4 	bl	e2ce0 <__aeabi_dmul>
   deb58:	a337      	add	r3, pc, #220	; (adr r3, dec38 <__ieee754_acos+0x4a0>)
   deb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb5e:	f003 ff0d 	bl	e297c <__adddf3>
   deb62:	4622      	mov	r2, r4
   deb64:	462b      	mov	r3, r5
   deb66:	f004 f8bb 	bl	e2ce0 <__aeabi_dmul>
   deb6a:	ec45 4b10 	vmov	d0, r4, r5
   deb6e:	4680      	mov	r8, r0
   deb70:	4689      	mov	r9, r1
   deb72:	f002 fa8d 	bl	e1090 <__ieee754_sqrt>
   deb76:	4620      	mov	r0, r4
   deb78:	4629      	mov	r1, r5
   deb7a:	a331      	add	r3, pc, #196	; (adr r3, dec40 <__ieee754_acos+0x4a8>)
   deb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb80:	ec57 6b10 	vmov	r6, r7, d0
   deb84:	f004 f8ac 	bl	e2ce0 <__aeabi_dmul>
   deb88:	a32f      	add	r3, pc, #188	; (adr r3, dec48 <__ieee754_acos+0x4b0>)
   deb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb8e:	f003 fef3 	bl	e2978 <__aeabi_dsub>
   deb92:	4622      	mov	r2, r4
   deb94:	462b      	mov	r3, r5
   deb96:	f004 f8a3 	bl	e2ce0 <__aeabi_dmul>
   deb9a:	a32d      	add	r3, pc, #180	; (adr r3, dec50 <__ieee754_acos+0x4b8>)
   deb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   deba0:	f003 feec 	bl	e297c <__adddf3>
   deba4:	4622      	mov	r2, r4
   deba6:	462b      	mov	r3, r5
   deba8:	f004 f89a 	bl	e2ce0 <__aeabi_dmul>
   debac:	a32a      	add	r3, pc, #168	; (adr r3, dec58 <__ieee754_acos+0x4c0>)
   debae:	e9d3 2300 	ldrd	r2, r3, [r3]
   debb2:	f003 fee1 	bl	e2978 <__aeabi_dsub>
   debb6:	4622      	mov	r2, r4
   debb8:	462b      	mov	r3, r5
   debba:	f004 f891 	bl	e2ce0 <__aeabi_dmul>
   debbe:	2200      	movs	r2, #0
   debc0:	4b2b      	ldr	r3, [pc, #172]	; (dec70 <__ieee754_acos+0x4d8>)
   debc2:	f003 fedb 	bl	e297c <__adddf3>
   debc6:	4602      	mov	r2, r0
   debc8:	460b      	mov	r3, r1
   debca:	4640      	mov	r0, r8
   debcc:	4649      	mov	r1, r9
   debce:	f004 f9b1 	bl	e2f34 <__aeabi_ddiv>
   debd2:	4632      	mov	r2, r6
   debd4:	463b      	mov	r3, r7
   debd6:	f004 f883 	bl	e2ce0 <__aeabi_dmul>
   debda:	a321      	add	r3, pc, #132	; (adr r3, dec60 <__ieee754_acos+0x4c8>)
   debdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   debe0:	f003 feca 	bl	e2978 <__aeabi_dsub>
   debe4:	4632      	mov	r2, r6
   debe6:	463b      	mov	r3, r7
   debe8:	f003 fec8 	bl	e297c <__adddf3>
   debec:	4602      	mov	r2, r0
   debee:	460b      	mov	r3, r1
   debf0:	f003 fec4 	bl	e297c <__adddf3>
   debf4:	4602      	mov	r2, r0
   debf6:	460b      	mov	r3, r1
   debf8:	a11b      	add	r1, pc, #108	; (adr r1, dec68 <__ieee754_acos+0x4d0>)
   debfa:	e9d1 0100 	ldrd	r0, r1, [r1]
   debfe:	f003 febb 	bl	e2978 <__aeabi_dsub>
   dec02:	ec41 0b10 	vmov	d0, r0, r1
   dec06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec0a:	bf00      	nop
   dec0c:	f3af 8000 	nop.w
   dec10:	0dfdf709 	.word	0x0dfdf709
   dec14:	3f023de1 	.word	0x3f023de1
   dec18:	7501b288 	.word	0x7501b288
   dec1c:	3f49efe0 	.word	0x3f49efe0
   dec20:	b5688f3b 	.word	0xb5688f3b
   dec24:	3fa48228 	.word	0x3fa48228
   dec28:	0e884455 	.word	0x0e884455
   dec2c:	3fc9c155 	.word	0x3fc9c155
   dec30:	03eb6f7d 	.word	0x03eb6f7d
   dec34:	3fd4d612 	.word	0x3fd4d612
   dec38:	55555555 	.word	0x55555555
   dec3c:	3fc55555 	.word	0x3fc55555
   dec40:	b12e9282 	.word	0xb12e9282
   dec44:	3fb3b8c5 	.word	0x3fb3b8c5
   dec48:	1b8d0159 	.word	0x1b8d0159
   dec4c:	3fe6066c 	.word	0x3fe6066c
   dec50:	9c598ac8 	.word	0x9c598ac8
   dec54:	40002ae5 	.word	0x40002ae5
   dec58:	1c8a2d4b 	.word	0x1c8a2d4b
   dec5c:	40033a27 	.word	0x40033a27
   dec60:	33145c07 	.word	0x33145c07
   dec64:	3c91a626 	.word	0x3c91a626
   dec68:	54442d18 	.word	0x54442d18
   dec6c:	400921fb 	.word	0x400921fb
   dec70:	3ff00000 	.word	0x3ff00000
   dec74:	3fe00000 	.word	0x3fe00000

000dec78 <__ieee754_asin>:
   dec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dec7c:	ec57 6b10 	vmov	r6, r7, d0
   dec80:	4bcb      	ldr	r3, [pc, #812]	; (defb0 <__ieee754_asin+0x338>)
   dec82:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   dec86:	429d      	cmp	r5, r3
   dec88:	b083      	sub	sp, #12
   dec8a:	dd17      	ble.n	decbc <__ieee754_asin+0x44>
   dec8c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   dec90:	ee10 3a10 	vmov	r3, s0
   dec94:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   dec98:	432b      	orrs	r3, r5
   dec9a:	d02b      	beq.n	decf4 <__ieee754_asin+0x7c>
   dec9c:	ee10 2a10 	vmov	r2, s0
   deca0:	463b      	mov	r3, r7
   deca2:	4630      	mov	r0, r6
   deca4:	4639      	mov	r1, r7
   deca6:	f003 fe67 	bl	e2978 <__aeabi_dsub>
   decaa:	4602      	mov	r2, r0
   decac:	460b      	mov	r3, r1
   decae:	f004 f941 	bl	e2f34 <__aeabi_ddiv>
   decb2:	ec41 0b10 	vmov	d0, r0, r1
   decb6:	b003      	add	sp, #12
   decb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   decbc:	4bbd      	ldr	r3, [pc, #756]	; (defb4 <__ieee754_asin+0x33c>)
   decbe:	429d      	cmp	r5, r3
   decc0:	463c      	mov	r4, r7
   decc2:	dc33      	bgt.n	ded2c <__ieee754_asin+0xb4>
   decc4:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   decc8:	f280 817c 	bge.w	defc4 <__ieee754_asin+0x34c>
   deccc:	a39c      	add	r3, pc, #624	; (adr r3, def40 <__ieee754_asin+0x2c8>)
   decce:	e9d3 2300 	ldrd	r2, r3, [r3]
   decd2:	ee10 0a10 	vmov	r0, s0
   decd6:	4639      	mov	r1, r7
   decd8:	f003 fe50 	bl	e297c <__adddf3>
   decdc:	2200      	movs	r2, #0
   decde:	4bb6      	ldr	r3, [pc, #728]	; (defb8 <__ieee754_asin+0x340>)
   dece0:	f004 fa8e 	bl	e3200 <__aeabi_dcmpgt>
   dece4:	b310      	cbz	r0, ded2c <__ieee754_asin+0xb4>
   dece6:	4630      	mov	r0, r6
   dece8:	4639      	mov	r1, r7
   decea:	ec41 0b10 	vmov	d0, r0, r1
   decee:	b003      	add	sp, #12
   decf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   decf4:	ee10 0a10 	vmov	r0, s0
   decf8:	a393      	add	r3, pc, #588	; (adr r3, def48 <__ieee754_asin+0x2d0>)
   decfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   decfe:	4639      	mov	r1, r7
   ded00:	f003 ffee 	bl	e2ce0 <__aeabi_dmul>
   ded04:	a392      	add	r3, pc, #584	; (adr r3, def50 <__ieee754_asin+0x2d8>)
   ded06:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded0a:	4604      	mov	r4, r0
   ded0c:	460d      	mov	r5, r1
   ded0e:	4630      	mov	r0, r6
   ded10:	4639      	mov	r1, r7
   ded12:	f003 ffe5 	bl	e2ce0 <__aeabi_dmul>
   ded16:	4602      	mov	r2, r0
   ded18:	460b      	mov	r3, r1
   ded1a:	4620      	mov	r0, r4
   ded1c:	4629      	mov	r1, r5
   ded1e:	f003 fe2d 	bl	e297c <__adddf3>
   ded22:	ec41 0b10 	vmov	d0, r0, r1
   ded26:	b003      	add	sp, #12
   ded28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ded2c:	ec47 6b10 	vmov	d0, r6, r7
   ded30:	f7fe fdce 	bl	dd8d0 <fabs>
   ded34:	2000      	movs	r0, #0
   ded36:	ec53 2b10 	vmov	r2, r3, d0
   ded3a:	499f      	ldr	r1, [pc, #636]	; (defb8 <__ieee754_asin+0x340>)
   ded3c:	f003 fe1c 	bl	e2978 <__aeabi_dsub>
   ded40:	2200      	movs	r2, #0
   ded42:	4b9e      	ldr	r3, [pc, #632]	; (defbc <__ieee754_asin+0x344>)
   ded44:	f003 ffcc 	bl	e2ce0 <__aeabi_dmul>
   ded48:	a383      	add	r3, pc, #524	; (adr r3, def58 <__ieee754_asin+0x2e0>)
   ded4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded4e:	4606      	mov	r6, r0
   ded50:	460f      	mov	r7, r1
   ded52:	f003 ffc5 	bl	e2ce0 <__aeabi_dmul>
   ded56:	a382      	add	r3, pc, #520	; (adr r3, def60 <__ieee754_asin+0x2e8>)
   ded58:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded5c:	f003 fe0e 	bl	e297c <__adddf3>
   ded60:	4632      	mov	r2, r6
   ded62:	463b      	mov	r3, r7
   ded64:	f003 ffbc 	bl	e2ce0 <__aeabi_dmul>
   ded68:	a37f      	add	r3, pc, #508	; (adr r3, def68 <__ieee754_asin+0x2f0>)
   ded6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded6e:	f003 fe03 	bl	e2978 <__aeabi_dsub>
   ded72:	4632      	mov	r2, r6
   ded74:	463b      	mov	r3, r7
   ded76:	f003 ffb3 	bl	e2ce0 <__aeabi_dmul>
   ded7a:	a37d      	add	r3, pc, #500	; (adr r3, def70 <__ieee754_asin+0x2f8>)
   ded7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded80:	f003 fdfc 	bl	e297c <__adddf3>
   ded84:	4632      	mov	r2, r6
   ded86:	463b      	mov	r3, r7
   ded88:	f003 ffaa 	bl	e2ce0 <__aeabi_dmul>
   ded8c:	a37a      	add	r3, pc, #488	; (adr r3, def78 <__ieee754_asin+0x300>)
   ded8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded92:	f003 fdf1 	bl	e2978 <__aeabi_dsub>
   ded96:	4632      	mov	r2, r6
   ded98:	463b      	mov	r3, r7
   ded9a:	f003 ffa1 	bl	e2ce0 <__aeabi_dmul>
   ded9e:	a378      	add	r3, pc, #480	; (adr r3, def80 <__ieee754_asin+0x308>)
   deda0:	e9d3 2300 	ldrd	r2, r3, [r3]
   deda4:	f003 fdea 	bl	e297c <__adddf3>
   deda8:	4632      	mov	r2, r6
   dedaa:	463b      	mov	r3, r7
   dedac:	f003 ff98 	bl	e2ce0 <__aeabi_dmul>
   dedb0:	a375      	add	r3, pc, #468	; (adr r3, def88 <__ieee754_asin+0x310>)
   dedb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedb6:	4680      	mov	r8, r0
   dedb8:	4689      	mov	r9, r1
   dedba:	4630      	mov	r0, r6
   dedbc:	4639      	mov	r1, r7
   dedbe:	f003 ff8f 	bl	e2ce0 <__aeabi_dmul>
   dedc2:	a373      	add	r3, pc, #460	; (adr r3, def90 <__ieee754_asin+0x318>)
   dedc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedc8:	f003 fdd6 	bl	e2978 <__aeabi_dsub>
   dedcc:	4632      	mov	r2, r6
   dedce:	463b      	mov	r3, r7
   dedd0:	f003 ff86 	bl	e2ce0 <__aeabi_dmul>
   dedd4:	a370      	add	r3, pc, #448	; (adr r3, def98 <__ieee754_asin+0x320>)
   dedd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedda:	f003 fdcf 	bl	e297c <__adddf3>
   dedde:	4632      	mov	r2, r6
   dede0:	463b      	mov	r3, r7
   dede2:	f003 ff7d 	bl	e2ce0 <__aeabi_dmul>
   dede6:	a36e      	add	r3, pc, #440	; (adr r3, defa0 <__ieee754_asin+0x328>)
   dede8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedec:	f003 fdc4 	bl	e2978 <__aeabi_dsub>
   dedf0:	4632      	mov	r2, r6
   dedf2:	463b      	mov	r3, r7
   dedf4:	f003 ff74 	bl	e2ce0 <__aeabi_dmul>
   dedf8:	4b6f      	ldr	r3, [pc, #444]	; (defb8 <__ieee754_asin+0x340>)
   dedfa:	2200      	movs	r2, #0
   dedfc:	f003 fdbe 	bl	e297c <__adddf3>
   dee00:	ec47 6b10 	vmov	d0, r6, r7
   dee04:	e9cd 0100 	strd	r0, r1, [sp]
   dee08:	f002 f942 	bl	e1090 <__ieee754_sqrt>
   dee0c:	4b6c      	ldr	r3, [pc, #432]	; (defc0 <__ieee754_asin+0x348>)
   dee0e:	429d      	cmp	r5, r3
   dee10:	ec5b ab10 	vmov	sl, fp, d0
   dee14:	e9dd 0100 	ldrd	r0, r1, [sp]
   dee18:	dc6e      	bgt.n	deef8 <__ieee754_asin+0x280>
   dee1a:	4602      	mov	r2, r0
   dee1c:	460b      	mov	r3, r1
   dee1e:	4640      	mov	r0, r8
   dee20:	4649      	mov	r1, r9
   dee22:	2500      	movs	r5, #0
   dee24:	e9cd ab00 	strd	sl, fp, [sp]
   dee28:	9500      	str	r5, [sp, #0]
   dee2a:	f004 f883 	bl	e2f34 <__aeabi_ddiv>
   dee2e:	e9dd 8900 	ldrd	r8, r9, [sp]
   dee32:	4652      	mov	r2, sl
   dee34:	e9cd 0100 	strd	r0, r1, [sp]
   dee38:	465b      	mov	r3, fp
   dee3a:	4650      	mov	r0, sl
   dee3c:	4659      	mov	r1, fp
   dee3e:	f003 fd9d 	bl	e297c <__adddf3>
   dee42:	4602      	mov	r2, r0
   dee44:	460b      	mov	r3, r1
   dee46:	e9dd 0100 	ldrd	r0, r1, [sp]
   dee4a:	f003 ff49 	bl	e2ce0 <__aeabi_dmul>
   dee4e:	4642      	mov	r2, r8
   dee50:	e9cd 0100 	strd	r0, r1, [sp]
   dee54:	464b      	mov	r3, r9
   dee56:	4640      	mov	r0, r8
   dee58:	4649      	mov	r1, r9
   dee5a:	f003 ff41 	bl	e2ce0 <__aeabi_dmul>
   dee5e:	4602      	mov	r2, r0
   dee60:	460b      	mov	r3, r1
   dee62:	4630      	mov	r0, r6
   dee64:	4639      	mov	r1, r7
   dee66:	f003 fd87 	bl	e2978 <__aeabi_dsub>
   dee6a:	4642      	mov	r2, r8
   dee6c:	4606      	mov	r6, r0
   dee6e:	460f      	mov	r7, r1
   dee70:	464b      	mov	r3, r9
   dee72:	4650      	mov	r0, sl
   dee74:	4659      	mov	r1, fp
   dee76:	f003 fd81 	bl	e297c <__adddf3>
   dee7a:	4602      	mov	r2, r0
   dee7c:	460b      	mov	r3, r1
   dee7e:	4630      	mov	r0, r6
   dee80:	4639      	mov	r1, r7
   dee82:	f004 f857 	bl	e2f34 <__aeabi_ddiv>
   dee86:	4602      	mov	r2, r0
   dee88:	460b      	mov	r3, r1
   dee8a:	f003 fd77 	bl	e297c <__adddf3>
   dee8e:	4602      	mov	r2, r0
   dee90:	460b      	mov	r3, r1
   dee92:	a12f      	add	r1, pc, #188	; (adr r1, def50 <__ieee754_asin+0x2d8>)
   dee94:	e9d1 0100 	ldrd	r0, r1, [r1]
   dee98:	f003 fd6e 	bl	e2978 <__aeabi_dsub>
   dee9c:	4602      	mov	r2, r0
   dee9e:	460b      	mov	r3, r1
   deea0:	e9dd 0100 	ldrd	r0, r1, [sp]
   deea4:	f003 fd68 	bl	e2978 <__aeabi_dsub>
   deea8:	4642      	mov	r2, r8
   deeaa:	4606      	mov	r6, r0
   deeac:	460f      	mov	r7, r1
   deeae:	464b      	mov	r3, r9
   deeb0:	4640      	mov	r0, r8
   deeb2:	4649      	mov	r1, r9
   deeb4:	f003 fd62 	bl	e297c <__adddf3>
   deeb8:	4602      	mov	r2, r0
   deeba:	460b      	mov	r3, r1
   deebc:	a13a      	add	r1, pc, #232	; (adr r1, defa8 <__ieee754_asin+0x330>)
   deebe:	e9d1 0100 	ldrd	r0, r1, [r1]
   deec2:	f003 fd59 	bl	e2978 <__aeabi_dsub>
   deec6:	4602      	mov	r2, r0
   deec8:	460b      	mov	r3, r1
   deeca:	4630      	mov	r0, r6
   deecc:	4639      	mov	r1, r7
   deece:	f003 fd53 	bl	e2978 <__aeabi_dsub>
   deed2:	4602      	mov	r2, r0
   deed4:	460b      	mov	r3, r1
   deed6:	a134      	add	r1, pc, #208	; (adr r1, defa8 <__ieee754_asin+0x330>)
   deed8:	e9d1 0100 	ldrd	r0, r1, [r1]
   deedc:	f003 fd4c 	bl	e2978 <__aeabi_dsub>
   deee0:	4602      	mov	r2, r0
   deee2:	460b      	mov	r3, r1
   deee4:	2c00      	cmp	r4, #0
   deee6:	f340 80e4 	ble.w	df0b2 <__ieee754_asin+0x43a>
   deeea:	4610      	mov	r0, r2
   deeec:	4619      	mov	r1, r3
   deeee:	ec41 0b10 	vmov	d0, r0, r1
   deef2:	b003      	add	sp, #12
   deef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deef8:	4602      	mov	r2, r0
   deefa:	460b      	mov	r3, r1
   deefc:	4640      	mov	r0, r8
   deefe:	4649      	mov	r1, r9
   def00:	f004 f818 	bl	e2f34 <__aeabi_ddiv>
   def04:	4652      	mov	r2, sl
   def06:	465b      	mov	r3, fp
   def08:	f003 feea 	bl	e2ce0 <__aeabi_dmul>
   def0c:	4652      	mov	r2, sl
   def0e:	465b      	mov	r3, fp
   def10:	f003 fd34 	bl	e297c <__adddf3>
   def14:	4602      	mov	r2, r0
   def16:	460b      	mov	r3, r1
   def18:	f003 fd30 	bl	e297c <__adddf3>
   def1c:	a30c      	add	r3, pc, #48	; (adr r3, def50 <__ieee754_asin+0x2d8>)
   def1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   def22:	f003 fd29 	bl	e2978 <__aeabi_dsub>
   def26:	4602      	mov	r2, r0
   def28:	460b      	mov	r3, r1
   def2a:	a107      	add	r1, pc, #28	; (adr r1, def48 <__ieee754_asin+0x2d0>)
   def2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   def30:	f003 fd22 	bl	e2978 <__aeabi_dsub>
   def34:	4602      	mov	r2, r0
   def36:	460b      	mov	r3, r1
   def38:	e7d4      	b.n	deee4 <__ieee754_asin+0x26c>
   def3a:	bf00      	nop
   def3c:	f3af 8000 	nop.w
   def40:	8800759c 	.word	0x8800759c
   def44:	7e37e43c 	.word	0x7e37e43c
   def48:	54442d18 	.word	0x54442d18
   def4c:	3ff921fb 	.word	0x3ff921fb
   def50:	33145c07 	.word	0x33145c07
   def54:	3c91a626 	.word	0x3c91a626
   def58:	0dfdf709 	.word	0x0dfdf709
   def5c:	3f023de1 	.word	0x3f023de1
   def60:	7501b288 	.word	0x7501b288
   def64:	3f49efe0 	.word	0x3f49efe0
   def68:	b5688f3b 	.word	0xb5688f3b
   def6c:	3fa48228 	.word	0x3fa48228
   def70:	0e884455 	.word	0x0e884455
   def74:	3fc9c155 	.word	0x3fc9c155
   def78:	03eb6f7d 	.word	0x03eb6f7d
   def7c:	3fd4d612 	.word	0x3fd4d612
   def80:	55555555 	.word	0x55555555
   def84:	3fc55555 	.word	0x3fc55555
   def88:	b12e9282 	.word	0xb12e9282
   def8c:	3fb3b8c5 	.word	0x3fb3b8c5
   def90:	1b8d0159 	.word	0x1b8d0159
   def94:	3fe6066c 	.word	0x3fe6066c
   def98:	9c598ac8 	.word	0x9c598ac8
   def9c:	40002ae5 	.word	0x40002ae5
   defa0:	1c8a2d4b 	.word	0x1c8a2d4b
   defa4:	40033a27 	.word	0x40033a27
   defa8:	54442d18 	.word	0x54442d18
   defac:	3fe921fb 	.word	0x3fe921fb
   defb0:	3fefffff 	.word	0x3fefffff
   defb4:	3fdfffff 	.word	0x3fdfffff
   defb8:	3ff00000 	.word	0x3ff00000
   defbc:	3fe00000 	.word	0x3fe00000
   defc0:	3fef3332 	.word	0x3fef3332
   defc4:	ee10 2a10 	vmov	r2, s0
   defc8:	ee10 0a10 	vmov	r0, s0
   defcc:	463b      	mov	r3, r7
   defce:	4639      	mov	r1, r7
   defd0:	f003 fe86 	bl	e2ce0 <__aeabi_dmul>
   defd4:	a33b      	add	r3, pc, #236	; (adr r3, df0c4 <__ieee754_asin+0x44c>)
   defd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   defda:	4604      	mov	r4, r0
   defdc:	460d      	mov	r5, r1
   defde:	f003 fe7f 	bl	e2ce0 <__aeabi_dmul>
   defe2:	a33a      	add	r3, pc, #232	; (adr r3, df0cc <__ieee754_asin+0x454>)
   defe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   defe8:	f003 fcc8 	bl	e297c <__adddf3>
   defec:	4622      	mov	r2, r4
   defee:	462b      	mov	r3, r5
   deff0:	f003 fe76 	bl	e2ce0 <__aeabi_dmul>
   deff4:	a337      	add	r3, pc, #220	; (adr r3, df0d4 <__ieee754_asin+0x45c>)
   deff6:	e9d3 2300 	ldrd	r2, r3, [r3]
   deffa:	f003 fcbd 	bl	e2978 <__aeabi_dsub>
   deffe:	4622      	mov	r2, r4
   df000:	462b      	mov	r3, r5
   df002:	f003 fe6d 	bl	e2ce0 <__aeabi_dmul>
   df006:	a335      	add	r3, pc, #212	; (adr r3, df0dc <__ieee754_asin+0x464>)
   df008:	e9d3 2300 	ldrd	r2, r3, [r3]
   df00c:	f003 fcb6 	bl	e297c <__adddf3>
   df010:	4622      	mov	r2, r4
   df012:	462b      	mov	r3, r5
   df014:	f003 fe64 	bl	e2ce0 <__aeabi_dmul>
   df018:	a332      	add	r3, pc, #200	; (adr r3, df0e4 <__ieee754_asin+0x46c>)
   df01a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df01e:	f003 fcab 	bl	e2978 <__aeabi_dsub>
   df022:	4622      	mov	r2, r4
   df024:	462b      	mov	r3, r5
   df026:	f003 fe5b 	bl	e2ce0 <__aeabi_dmul>
   df02a:	a330      	add	r3, pc, #192	; (adr r3, df0ec <__ieee754_asin+0x474>)
   df02c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df030:	f003 fca4 	bl	e297c <__adddf3>
   df034:	4622      	mov	r2, r4
   df036:	462b      	mov	r3, r5
   df038:	f003 fe52 	bl	e2ce0 <__aeabi_dmul>
   df03c:	a32d      	add	r3, pc, #180	; (adr r3, df0f4 <__ieee754_asin+0x47c>)
   df03e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df042:	4680      	mov	r8, r0
   df044:	4689      	mov	r9, r1
   df046:	4620      	mov	r0, r4
   df048:	4629      	mov	r1, r5
   df04a:	f003 fe49 	bl	e2ce0 <__aeabi_dmul>
   df04e:	a32b      	add	r3, pc, #172	; (adr r3, df0fc <__ieee754_asin+0x484>)
   df050:	e9d3 2300 	ldrd	r2, r3, [r3]
   df054:	f003 fc90 	bl	e2978 <__aeabi_dsub>
   df058:	4622      	mov	r2, r4
   df05a:	462b      	mov	r3, r5
   df05c:	f003 fe40 	bl	e2ce0 <__aeabi_dmul>
   df060:	a328      	add	r3, pc, #160	; (adr r3, df104 <__ieee754_asin+0x48c>)
   df062:	e9d3 2300 	ldrd	r2, r3, [r3]
   df066:	f003 fc89 	bl	e297c <__adddf3>
   df06a:	4622      	mov	r2, r4
   df06c:	462b      	mov	r3, r5
   df06e:	f003 fe37 	bl	e2ce0 <__aeabi_dmul>
   df072:	a326      	add	r3, pc, #152	; (adr r3, df10c <__ieee754_asin+0x494>)
   df074:	e9d3 2300 	ldrd	r2, r3, [r3]
   df078:	f003 fc7e 	bl	e2978 <__aeabi_dsub>
   df07c:	4622      	mov	r2, r4
   df07e:	462b      	mov	r3, r5
   df080:	f003 fe2e 	bl	e2ce0 <__aeabi_dmul>
   df084:	2200      	movs	r2, #0
   df086:	4b0e      	ldr	r3, [pc, #56]	; (df0c0 <__ieee754_asin+0x448>)
   df088:	f003 fc78 	bl	e297c <__adddf3>
   df08c:	4602      	mov	r2, r0
   df08e:	460b      	mov	r3, r1
   df090:	4640      	mov	r0, r8
   df092:	4649      	mov	r1, r9
   df094:	f003 ff4e 	bl	e2f34 <__aeabi_ddiv>
   df098:	4632      	mov	r2, r6
   df09a:	463b      	mov	r3, r7
   df09c:	f003 fe20 	bl	e2ce0 <__aeabi_dmul>
   df0a0:	4632      	mov	r2, r6
   df0a2:	463b      	mov	r3, r7
   df0a4:	f003 fc6a 	bl	e297c <__adddf3>
   df0a8:	ec41 0b10 	vmov	d0, r0, r1
   df0ac:	b003      	add	sp, #12
   df0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df0b2:	4610      	mov	r0, r2
   df0b4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df0b8:	e5fb      	b.n	decb2 <__ieee754_asin+0x3a>
   df0ba:	bf00      	nop
   df0bc:	f3af 8000 	nop.w
   df0c0:	3ff00000 	.word	0x3ff00000
   df0c4:	0dfdf709 	.word	0x0dfdf709
   df0c8:	3f023de1 	.word	0x3f023de1
   df0cc:	7501b288 	.word	0x7501b288
   df0d0:	3f49efe0 	.word	0x3f49efe0
   df0d4:	b5688f3b 	.word	0xb5688f3b
   df0d8:	3fa48228 	.word	0x3fa48228
   df0dc:	0e884455 	.word	0x0e884455
   df0e0:	3fc9c155 	.word	0x3fc9c155
   df0e4:	03eb6f7d 	.word	0x03eb6f7d
   df0e8:	3fd4d612 	.word	0x3fd4d612
   df0ec:	55555555 	.word	0x55555555
   df0f0:	3fc55555 	.word	0x3fc55555
   df0f4:	b12e9282 	.word	0xb12e9282
   df0f8:	3fb3b8c5 	.word	0x3fb3b8c5
   df0fc:	1b8d0159 	.word	0x1b8d0159
   df100:	3fe6066c 	.word	0x3fe6066c
   df104:	9c598ac8 	.word	0x9c598ac8
   df108:	40002ae5 	.word	0x40002ae5
   df10c:	1c8a2d4b 	.word	0x1c8a2d4b
   df110:	40033a27 	.word	0x40033a27
   df114:	00000000 	.word	0x00000000

000df118 <__ieee754_atan2>:
   df118:	ec51 0b11 	vmov	r0, r1, d1
   df11c:	4243      	negs	r3, r0
   df11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df122:	4303      	orrs	r3, r0
   df124:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df128:	4f75      	ldr	r7, [pc, #468]	; (df300 <__ieee754_atan2+0x1e8>)
   df12a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   df12e:	42bb      	cmp	r3, r7
   df130:	ec55 4b10 	vmov	r4, r5, d0
   df134:	d849      	bhi.n	df1ca <__ieee754_atan2+0xb2>
   df136:	4263      	negs	r3, r4
   df138:	4323      	orrs	r3, r4
   df13a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   df13e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   df142:	42bb      	cmp	r3, r7
   df144:	46a9      	mov	r9, r5
   df146:	d840      	bhi.n	df1ca <__ieee754_atan2+0xb2>
   df148:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   df14c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   df150:	4303      	orrs	r3, r0
   df152:	468e      	mov	lr, r1
   df154:	d050      	beq.n	df1f8 <__ieee754_atan2+0xe0>
   df156:	178e      	asrs	r6, r1, #30
   df158:	f006 0602 	and.w	r6, r6, #2
   df15c:	ea54 030a 	orrs.w	r3, r4, sl
   df160:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   df164:	d039      	beq.n	df1da <__ieee754_atan2+0xc2>
   df166:	ea50 0308 	orrs.w	r3, r0, r8
   df16a:	d03e      	beq.n	df1ea <__ieee754_atan2+0xd2>
   df16c:	45b8      	cmp	r8, r7
   df16e:	d055      	beq.n	df21c <__ieee754_atan2+0x104>
   df170:	45ba      	cmp	sl, r7
   df172:	d03a      	beq.n	df1ea <__ieee754_atan2+0xd2>
   df174:	ebc8 080a 	rsb	r8, r8, sl
   df178:	ea4f 5828 	mov.w	r8, r8, asr #20
   df17c:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   df180:	dc40      	bgt.n	df204 <__ieee754_atan2+0xec>
   df182:	2900      	cmp	r1, #0
   df184:	db70      	blt.n	df268 <__ieee754_atan2+0x150>
   df186:	4602      	mov	r2, r0
   df188:	460b      	mov	r3, r1
   df18a:	4620      	mov	r0, r4
   df18c:	4629      	mov	r1, r5
   df18e:	f003 fed1 	bl	e2f34 <__aeabi_ddiv>
   df192:	ec41 0b10 	vmov	d0, r0, r1
   df196:	f7fe fb9b 	bl	dd8d0 <fabs>
   df19a:	f7fe f8ed 	bl	dd378 <atan>
   df19e:	ec51 0b10 	vmov	r0, r1, d0
   df1a2:	2e01      	cmp	r6, #1
   df1a4:	d05a      	beq.n	df25c <__ieee754_atan2+0x144>
   df1a6:	2e02      	cmp	r6, #2
   df1a8:	d048      	beq.n	df23c <__ieee754_atan2+0x124>
   df1aa:	2e00      	cmp	r6, #0
   df1ac:	d042      	beq.n	df234 <__ieee754_atan2+0x11c>
   df1ae:	a33e      	add	r3, pc, #248	; (adr r3, df2a8 <__ieee754_atan2+0x190>)
   df1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1b4:	f003 fbe0 	bl	e2978 <__aeabi_dsub>
   df1b8:	a33d      	add	r3, pc, #244	; (adr r3, df2b0 <__ieee754_atan2+0x198>)
   df1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1be:	f003 fbdb 	bl	e2978 <__aeabi_dsub>
   df1c2:	ec41 0b10 	vmov	d0, r0, r1
   df1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1ca:	4622      	mov	r2, r4
   df1cc:	462b      	mov	r3, r5
   df1ce:	f003 fbd5 	bl	e297c <__adddf3>
   df1d2:	ec41 0b10 	vmov	d0, r0, r1
   df1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1da:	2e02      	cmp	r6, #2
   df1dc:	d016      	beq.n	df20c <__ieee754_atan2+0xf4>
   df1de:	2e03      	cmp	r6, #3
   df1e0:	d10e      	bne.n	df200 <__ieee754_atan2+0xe8>
   df1e2:	ed9f 0b35 	vldr	d0, [pc, #212]	; df2b8 <__ieee754_atan2+0x1a0>
   df1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1ea:	f1b9 0f00 	cmp.w	r9, #0
   df1ee:	db11      	blt.n	df214 <__ieee754_atan2+0xfc>
   df1f0:	ed9f 0b33 	vldr	d0, [pc, #204]	; df2c0 <__ieee754_atan2+0x1a8>
   df1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df1f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df1fc:	f7fe b8bc 	b.w	dd378 <atan>
   df200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df204:	a12e      	add	r1, pc, #184	; (adr r1, df2c0 <__ieee754_atan2+0x1a8>)
   df206:	e9d1 0100 	ldrd	r0, r1, [r1]
   df20a:	e7ca      	b.n	df1a2 <__ieee754_atan2+0x8a>
   df20c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df2b0 <__ieee754_atan2+0x198>
   df210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df214:	ed9f 0b2c 	vldr	d0, [pc, #176]	; df2c8 <__ieee754_atan2+0x1b0>
   df218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df21c:	45c2      	cmp	sl, r8
   df21e:	d029      	beq.n	df274 <__ieee754_atan2+0x15c>
   df220:	2e02      	cmp	r6, #2
   df222:	d0f3      	beq.n	df20c <__ieee754_atan2+0xf4>
   df224:	2e03      	cmp	r6, #3
   df226:	d0dc      	beq.n	df1e2 <__ieee754_atan2+0xca>
   df228:	2e01      	cmp	r6, #1
   df22a:	d02d      	beq.n	df288 <__ieee754_atan2+0x170>
   df22c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df2d0 <__ieee754_atan2+0x1b8>
   df230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df234:	ec41 0b10 	vmov	d0, r0, r1
   df238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df23c:	a31a      	add	r3, pc, #104	; (adr r3, df2a8 <__ieee754_atan2+0x190>)
   df23e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df242:	f003 fb99 	bl	e2978 <__aeabi_dsub>
   df246:	4602      	mov	r2, r0
   df248:	460b      	mov	r3, r1
   df24a:	a119      	add	r1, pc, #100	; (adr r1, df2b0 <__ieee754_atan2+0x198>)
   df24c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df250:	f003 fb92 	bl	e2978 <__aeabi_dsub>
   df254:	ec41 0b10 	vmov	d0, r0, r1
   df258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df25c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   df260:	ec41 0b10 	vmov	d0, r0, r1
   df264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df268:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   df26c:	da8b      	bge.n	df186 <__ieee754_atan2+0x6e>
   df26e:	2000      	movs	r0, #0
   df270:	2100      	movs	r1, #0
   df272:	e796      	b.n	df1a2 <__ieee754_atan2+0x8a>
   df274:	2e02      	cmp	r6, #2
   df276:	d013      	beq.n	df2a0 <__ieee754_atan2+0x188>
   df278:	2e03      	cmp	r6, #3
   df27a:	d00d      	beq.n	df298 <__ieee754_atan2+0x180>
   df27c:	2e01      	cmp	r6, #1
   df27e:	d007      	beq.n	df290 <__ieee754_atan2+0x178>
   df280:	ed9f 0b15 	vldr	d0, [pc, #84]	; df2d8 <__ieee754_atan2+0x1c0>
   df284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df288:	ed9f 0b15 	vldr	d0, [pc, #84]	; df2e0 <__ieee754_atan2+0x1c8>
   df28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df290:	ed9f 0b15 	vldr	d0, [pc, #84]	; df2e8 <__ieee754_atan2+0x1d0>
   df294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df298:	ed9f 0b15 	vldr	d0, [pc, #84]	; df2f0 <__ieee754_atan2+0x1d8>
   df29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df2a0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df2f8 <__ieee754_atan2+0x1e0>
   df2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df2a8:	33145c07 	.word	0x33145c07
   df2ac:	3ca1a626 	.word	0x3ca1a626
   df2b0:	54442d18 	.word	0x54442d18
   df2b4:	400921fb 	.word	0x400921fb
   df2b8:	54442d18 	.word	0x54442d18
   df2bc:	c00921fb 	.word	0xc00921fb
   df2c0:	54442d18 	.word	0x54442d18
   df2c4:	3ff921fb 	.word	0x3ff921fb
   df2c8:	54442d18 	.word	0x54442d18
   df2cc:	bff921fb 	.word	0xbff921fb
	...
   df2d8:	54442d18 	.word	0x54442d18
   df2dc:	3fe921fb 	.word	0x3fe921fb
   df2e0:	00000000 	.word	0x00000000
   df2e4:	80000000 	.word	0x80000000
   df2e8:	54442d18 	.word	0x54442d18
   df2ec:	bfe921fb 	.word	0xbfe921fb
   df2f0:	7f3321d2 	.word	0x7f3321d2
   df2f4:	c002d97c 	.word	0xc002d97c
   df2f8:	7f3321d2 	.word	0x7f3321d2
   df2fc:	4002d97c 	.word	0x4002d97c
   df300:	7ff00000 	.word	0x7ff00000
   df304:	00000000 	.word	0x00000000

000df308 <__ieee754_cosh>:
   df308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df30c:	ec53 2b10 	vmov	r2, r3, d0
   df310:	4953      	ldr	r1, [pc, #332]	; (df460 <__ieee754_cosh+0x158>)
   df312:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   df316:	428c      	cmp	r4, r1
   df318:	dc12      	bgt.n	df340 <__ieee754_cosh+0x38>
   df31a:	4952      	ldr	r1, [pc, #328]	; (df464 <__ieee754_cosh+0x15c>)
   df31c:	428c      	cmp	r4, r1
   df31e:	dd17      	ble.n	df350 <__ieee754_cosh+0x48>
   df320:	4951      	ldr	r1, [pc, #324]	; (df468 <__ieee754_cosh+0x160>)
   df322:	428c      	cmp	r4, r1
   df324:	dd64      	ble.n	df3f0 <__ieee754_cosh+0xe8>
   df326:	4951      	ldr	r1, [pc, #324]	; (df46c <__ieee754_cosh+0x164>)
   df328:	428c      	cmp	r4, r1
   df32a:	f340 8084 	ble.w	df436 <__ieee754_cosh+0x12e>
   df32e:	4950      	ldr	r1, [pc, #320]	; (df470 <__ieee754_cosh+0x168>)
   df330:	428c      	cmp	r4, r1
   df332:	dd3e      	ble.n	df3b2 <__ieee754_cosh+0xaa>
   df334:	3101      	adds	r1, #1
   df336:	428c      	cmp	r4, r1
   df338:	d038      	beq.n	df3ac <__ieee754_cosh+0xa4>
   df33a:	a347      	add	r3, pc, #284	; (adr r3, df458 <__ieee754_cosh+0x150>)
   df33c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df340:	4610      	mov	r0, r2
   df342:	4619      	mov	r1, r3
   df344:	f003 fccc 	bl	e2ce0 <__aeabi_dmul>
   df348:	ec41 0b10 	vmov	d0, r0, r1
   df34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df350:	f7fe fabe 	bl	dd8d0 <fabs>
   df354:	f002 ff70 	bl	e2238 <expm1>
   df358:	ec59 8b10 	vmov	r8, r9, d0
   df35c:	2200      	movs	r2, #0
   df35e:	4b45      	ldr	r3, [pc, #276]	; (df474 <__ieee754_cosh+0x16c>)
   df360:	ee10 0a10 	vmov	r0, s0
   df364:	4649      	mov	r1, r9
   df366:	f003 fb09 	bl	e297c <__adddf3>
   df36a:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   df36e:	4606      	mov	r6, r0
   df370:	460f      	mov	r7, r1
   df372:	db5c      	blt.n	df42e <__ieee754_cosh+0x126>
   df374:	4642      	mov	r2, r8
   df376:	464b      	mov	r3, r9
   df378:	4640      	mov	r0, r8
   df37a:	4649      	mov	r1, r9
   df37c:	f003 fcb0 	bl	e2ce0 <__aeabi_dmul>
   df380:	4632      	mov	r2, r6
   df382:	4604      	mov	r4, r0
   df384:	460d      	mov	r5, r1
   df386:	463b      	mov	r3, r7
   df388:	4630      	mov	r0, r6
   df38a:	4639      	mov	r1, r7
   df38c:	f003 faf6 	bl	e297c <__adddf3>
   df390:	4602      	mov	r2, r0
   df392:	460b      	mov	r3, r1
   df394:	4620      	mov	r0, r4
   df396:	4629      	mov	r1, r5
   df398:	f003 fdcc 	bl	e2f34 <__aeabi_ddiv>
   df39c:	2200      	movs	r2, #0
   df39e:	4b35      	ldr	r3, [pc, #212]	; (df474 <__ieee754_cosh+0x16c>)
   df3a0:	f003 faec 	bl	e297c <__adddf3>
   df3a4:	ec41 0b10 	vmov	d0, r0, r1
   df3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df3ac:	4932      	ldr	r1, [pc, #200]	; (df478 <__ieee754_cosh+0x170>)
   df3ae:	428a      	cmp	r2, r1
   df3b0:	d8c3      	bhi.n	df33a <__ieee754_cosh+0x32>
   df3b2:	ec43 2b10 	vmov	d0, r2, r3
   df3b6:	f7fe fa8b 	bl	dd8d0 <fabs>
   df3ba:	2200      	movs	r2, #0
   df3bc:	4b2f      	ldr	r3, [pc, #188]	; (df47c <__ieee754_cosh+0x174>)
   df3be:	ec51 0b10 	vmov	r0, r1, d0
   df3c2:	f003 fc8d 	bl	e2ce0 <__aeabi_dmul>
   df3c6:	ec41 0b10 	vmov	d0, r0, r1
   df3ca:	f000 f859 	bl	df480 <__ieee754_exp>
   df3ce:	ec55 4b10 	vmov	r4, r5, d0
   df3d2:	ee10 0a10 	vmov	r0, s0
   df3d6:	2200      	movs	r2, #0
   df3d8:	4b28      	ldr	r3, [pc, #160]	; (df47c <__ieee754_cosh+0x174>)
   df3da:	4629      	mov	r1, r5
   df3dc:	f003 fc80 	bl	e2ce0 <__aeabi_dmul>
   df3e0:	4622      	mov	r2, r4
   df3e2:	462b      	mov	r3, r5
   df3e4:	f003 fc7c 	bl	e2ce0 <__aeabi_dmul>
   df3e8:	ec41 0b10 	vmov	d0, r0, r1
   df3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df3f0:	f7fe fa6e 	bl	dd8d0 <fabs>
   df3f4:	f000 f844 	bl	df480 <__ieee754_exp>
   df3f8:	ec55 4b10 	vmov	r4, r5, d0
   df3fc:	ee10 0a10 	vmov	r0, s0
   df400:	2200      	movs	r2, #0
   df402:	4b1e      	ldr	r3, [pc, #120]	; (df47c <__ieee754_cosh+0x174>)
   df404:	4629      	mov	r1, r5
   df406:	f003 fc6b 	bl	e2ce0 <__aeabi_dmul>
   df40a:	4622      	mov	r2, r4
   df40c:	4606      	mov	r6, r0
   df40e:	460f      	mov	r7, r1
   df410:	462b      	mov	r3, r5
   df412:	2000      	movs	r0, #0
   df414:	4919      	ldr	r1, [pc, #100]	; (df47c <__ieee754_cosh+0x174>)
   df416:	f003 fd8d 	bl	e2f34 <__aeabi_ddiv>
   df41a:	4602      	mov	r2, r0
   df41c:	460b      	mov	r3, r1
   df41e:	4630      	mov	r0, r6
   df420:	4639      	mov	r1, r7
   df422:	f003 faab 	bl	e297c <__adddf3>
   df426:	ec41 0b10 	vmov	d0, r0, r1
   df42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df42e:	ec47 6b10 	vmov	d0, r6, r7
   df432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df436:	f7fe fa4b 	bl	dd8d0 <fabs>
   df43a:	f000 f821 	bl	df480 <__ieee754_exp>
   df43e:	2200      	movs	r2, #0
   df440:	4b0e      	ldr	r3, [pc, #56]	; (df47c <__ieee754_cosh+0x174>)
   df442:	ec51 0b10 	vmov	r0, r1, d0
   df446:	f003 fc4b 	bl	e2ce0 <__aeabi_dmul>
   df44a:	ec41 0b10 	vmov	d0, r0, r1
   df44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df452:	bf00      	nop
   df454:	f3af 8000 	nop.w
   df458:	8800759c 	.word	0x8800759c
   df45c:	7e37e43c 	.word	0x7e37e43c
   df460:	7fefffff 	.word	0x7fefffff
   df464:	3fd62e42 	.word	0x3fd62e42
   df468:	4035ffff 	.word	0x4035ffff
   df46c:	40862e41 	.word	0x40862e41
   df470:	408633cd 	.word	0x408633cd
   df474:	3ff00000 	.word	0x3ff00000
   df478:	8fb9f87d 	.word	0x8fb9f87d
   df47c:	3fe00000 	.word	0x3fe00000

000df480 <__ieee754_exp>:
   df480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df484:	ec55 4b10 	vmov	r4, r5, d0
   df488:	49bd      	ldr	r1, [pc, #756]	; (df780 <__ieee754_exp+0x300>)
   df48a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   df48e:	428a      	cmp	r2, r1
   df490:	b083      	sub	sp, #12
   df492:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   df496:	d90d      	bls.n	df4b4 <__ieee754_exp+0x34>
   df498:	49ba      	ldr	r1, [pc, #744]	; (df784 <__ieee754_exp+0x304>)
   df49a:	428a      	cmp	r2, r1
   df49c:	d92a      	bls.n	df4f4 <__ieee754_exp+0x74>
   df49e:	f3c5 0313 	ubfx	r3, r5, #0, #20
   df4a2:	4323      	orrs	r3, r4
   df4a4:	f040 80fa 	bne.w	df69c <__ieee754_exp+0x21c>
   df4a8:	b10f      	cbz	r7, df4ae <__ieee754_exp+0x2e>
   df4aa:	ed9f 0b9d 	vldr	d0, [pc, #628]	; df720 <__ieee754_exp+0x2a0>
   df4ae:	b003      	add	sp, #12
   df4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df4b4:	4bb4      	ldr	r3, [pc, #720]	; (df788 <__ieee754_exp+0x308>)
   df4b6:	429a      	cmp	r2, r3
   df4b8:	f200 80d5 	bhi.w	df666 <__ieee754_exp+0x1e6>
   df4bc:	4bb3      	ldr	r3, [pc, #716]	; (df78c <__ieee754_exp+0x30c>)
   df4be:	429a      	cmp	r2, r3
   df4c0:	f200 80ea 	bhi.w	df698 <__ieee754_exp+0x218>
   df4c4:	a398      	add	r3, pc, #608	; (adr r3, df728 <__ieee754_exp+0x2a8>)
   df4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4ca:	ee10 0a10 	vmov	r0, s0
   df4ce:	4629      	mov	r1, r5
   df4d0:	f003 fa54 	bl	e297c <__adddf3>
   df4d4:	2200      	movs	r2, #0
   df4d6:	4bae      	ldr	r3, [pc, #696]	; (df790 <__ieee754_exp+0x310>)
   df4d8:	f003 fe92 	bl	e3200 <__aeabi_dcmpgt>
   df4dc:	2800      	cmp	r0, #0
   df4de:	f000 811c 	beq.w	df71a <__ieee754_exp+0x29a>
   df4e2:	4620      	mov	r0, r4
   df4e4:	4629      	mov	r1, r5
   df4e6:	2200      	movs	r2, #0
   df4e8:	4ba9      	ldr	r3, [pc, #676]	; (df790 <__ieee754_exp+0x310>)
   df4ea:	f003 fa47 	bl	e297c <__adddf3>
   df4ee:	ec41 0b10 	vmov	d0, r0, r1
   df4f2:	e7dc      	b.n	df4ae <__ieee754_exp+0x2e>
   df4f4:	a38e      	add	r3, pc, #568	; (adr r3, df730 <__ieee754_exp+0x2b0>)
   df4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df4fa:	ee10 0a10 	vmov	r0, s0
   df4fe:	4629      	mov	r1, r5
   df500:	f003 fe7e 	bl	e3200 <__aeabi_dcmpgt>
   df504:	2800      	cmp	r0, #0
   df506:	f040 80d3 	bne.w	df6b0 <__ieee754_exp+0x230>
   df50a:	a38b      	add	r3, pc, #556	; (adr r3, df738 <__ieee754_exp+0x2b8>)
   df50c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df510:	4620      	mov	r0, r4
   df512:	4629      	mov	r1, r5
   df514:	f003 fe56 	bl	e31c4 <__aeabi_dcmplt>
   df518:	2800      	cmp	r0, #0
   df51a:	d1c6      	bne.n	df4aa <__ieee754_exp+0x2a>
   df51c:	4e9d      	ldr	r6, [pc, #628]	; (df794 <__ieee754_exp+0x314>)
   df51e:	a388      	add	r3, pc, #544	; (adr r3, df740 <__ieee754_exp+0x2c0>)
   df520:	e9d3 2300 	ldrd	r2, r3, [r3]
   df524:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   df528:	4620      	mov	r0, r4
   df52a:	4629      	mov	r1, r5
   df52c:	f003 fbd8 	bl	e2ce0 <__aeabi_dmul>
   df530:	e9d6 2300 	ldrd	r2, r3, [r6]
   df534:	f003 fa22 	bl	e297c <__adddf3>
   df538:	f003 fe82 	bl	e3240 <__aeabi_d2iz>
   df53c:	4606      	mov	r6, r0
   df53e:	f003 fb69 	bl	e2c14 <__aeabi_i2d>
   df542:	a381      	add	r3, pc, #516	; (adr r3, df748 <__ieee754_exp+0x2c8>)
   df544:	e9d3 2300 	ldrd	r2, r3, [r3]
   df548:	4680      	mov	r8, r0
   df54a:	4689      	mov	r9, r1
   df54c:	f003 fbc8 	bl	e2ce0 <__aeabi_dmul>
   df550:	4602      	mov	r2, r0
   df552:	460b      	mov	r3, r1
   df554:	4620      	mov	r0, r4
   df556:	4629      	mov	r1, r5
   df558:	f003 fa0e 	bl	e2978 <__aeabi_dsub>
   df55c:	a37c      	add	r3, pc, #496	; (adr r3, df750 <__ieee754_exp+0x2d0>)
   df55e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df562:	e9cd 0100 	strd	r0, r1, [sp]
   df566:	4640      	mov	r0, r8
   df568:	4649      	mov	r1, r9
   df56a:	f003 fbb9 	bl	e2ce0 <__aeabi_dmul>
   df56e:	4682      	mov	sl, r0
   df570:	468b      	mov	fp, r1
   df572:	4652      	mov	r2, sl
   df574:	465b      	mov	r3, fp
   df576:	e9dd 0100 	ldrd	r0, r1, [sp]
   df57a:	f003 f9fd 	bl	e2978 <__aeabi_dsub>
   df57e:	4604      	mov	r4, r0
   df580:	460d      	mov	r5, r1
   df582:	4622      	mov	r2, r4
   df584:	462b      	mov	r3, r5
   df586:	4620      	mov	r0, r4
   df588:	4629      	mov	r1, r5
   df58a:	f003 fba9 	bl	e2ce0 <__aeabi_dmul>
   df58e:	a372      	add	r3, pc, #456	; (adr r3, df758 <__ieee754_exp+0x2d8>)
   df590:	e9d3 2300 	ldrd	r2, r3, [r3]
   df594:	4680      	mov	r8, r0
   df596:	4689      	mov	r9, r1
   df598:	f003 fba2 	bl	e2ce0 <__aeabi_dmul>
   df59c:	a370      	add	r3, pc, #448	; (adr r3, df760 <__ieee754_exp+0x2e0>)
   df59e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5a2:	f003 f9e9 	bl	e2978 <__aeabi_dsub>
   df5a6:	4642      	mov	r2, r8
   df5a8:	464b      	mov	r3, r9
   df5aa:	f003 fb99 	bl	e2ce0 <__aeabi_dmul>
   df5ae:	a36e      	add	r3, pc, #440	; (adr r3, df768 <__ieee754_exp+0x2e8>)
   df5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5b4:	f003 f9e2 	bl	e297c <__adddf3>
   df5b8:	4642      	mov	r2, r8
   df5ba:	464b      	mov	r3, r9
   df5bc:	f003 fb90 	bl	e2ce0 <__aeabi_dmul>
   df5c0:	a36b      	add	r3, pc, #428	; (adr r3, df770 <__ieee754_exp+0x2f0>)
   df5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5c6:	f003 f9d7 	bl	e2978 <__aeabi_dsub>
   df5ca:	4642      	mov	r2, r8
   df5cc:	464b      	mov	r3, r9
   df5ce:	f003 fb87 	bl	e2ce0 <__aeabi_dmul>
   df5d2:	a369      	add	r3, pc, #420	; (adr r3, df778 <__ieee754_exp+0x2f8>)
   df5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5d8:	f003 f9d0 	bl	e297c <__adddf3>
   df5dc:	4642      	mov	r2, r8
   df5de:	464b      	mov	r3, r9
   df5e0:	f003 fb7e 	bl	e2ce0 <__aeabi_dmul>
   df5e4:	4602      	mov	r2, r0
   df5e6:	460b      	mov	r3, r1
   df5e8:	4620      	mov	r0, r4
   df5ea:	4629      	mov	r1, r5
   df5ec:	f003 f9c4 	bl	e2978 <__aeabi_dsub>
   df5f0:	4680      	mov	r8, r0
   df5f2:	4689      	mov	r9, r1
   df5f4:	2e00      	cmp	r6, #0
   df5f6:	d065      	beq.n	df6c4 <__ieee754_exp+0x244>
   df5f8:	4620      	mov	r0, r4
   df5fa:	4629      	mov	r1, r5
   df5fc:	4642      	mov	r2, r8
   df5fe:	464b      	mov	r3, r9
   df600:	f003 fb6e 	bl	e2ce0 <__aeabi_dmul>
   df604:	4642      	mov	r2, r8
   df606:	4604      	mov	r4, r0
   df608:	460d      	mov	r5, r1
   df60a:	464b      	mov	r3, r9
   df60c:	2000      	movs	r0, #0
   df60e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   df612:	f003 f9b1 	bl	e2978 <__aeabi_dsub>
   df616:	4602      	mov	r2, r0
   df618:	460b      	mov	r3, r1
   df61a:	4620      	mov	r0, r4
   df61c:	4629      	mov	r1, r5
   df61e:	f003 fc89 	bl	e2f34 <__aeabi_ddiv>
   df622:	4602      	mov	r2, r0
   df624:	460b      	mov	r3, r1
   df626:	4650      	mov	r0, sl
   df628:	4659      	mov	r1, fp
   df62a:	f003 f9a5 	bl	e2978 <__aeabi_dsub>
   df62e:	e9dd 2300 	ldrd	r2, r3, [sp]
   df632:	f003 f9a1 	bl	e2978 <__aeabi_dsub>
   df636:	460b      	mov	r3, r1
   df638:	4602      	mov	r2, r0
   df63a:	4955      	ldr	r1, [pc, #340]	; (df790 <__ieee754_exp+0x310>)
   df63c:	2000      	movs	r0, #0
   df63e:	f003 f99b 	bl	e2978 <__aeabi_dsub>
   df642:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   df646:	429e      	cmp	r6, r3
   df648:	da60      	bge.n	df70c <__ieee754_exp+0x28c>
   df64a:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   df64e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df652:	2200      	movs	r2, #0
   df654:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   df658:	f003 fb42 	bl	e2ce0 <__aeabi_dmul>
   df65c:	ec41 0b10 	vmov	d0, r0, r1
   df660:	b003      	add	sp, #12
   df662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df666:	4b4c      	ldr	r3, [pc, #304]	; (df798 <__ieee754_exp+0x318>)
   df668:	429a      	cmp	r2, r3
   df66a:	f63f af57 	bhi.w	df51c <__ieee754_exp+0x9c>
   df66e:	4b4b      	ldr	r3, [pc, #300]	; (df79c <__ieee754_exp+0x31c>)
   df670:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   df674:	4443      	add	r3, r8
   df676:	e9d3 2300 	ldrd	r2, r3, [r3]
   df67a:	ee10 0a10 	vmov	r0, s0
   df67e:	4629      	mov	r1, r5
   df680:	f003 f97a 	bl	e2978 <__aeabi_dsub>
   df684:	4b46      	ldr	r3, [pc, #280]	; (df7a0 <__ieee754_exp+0x320>)
   df686:	f1c7 0601 	rsb	r6, r7, #1
   df68a:	4498      	add	r8, r3
   df68c:	e9cd 0100 	strd	r0, r1, [sp]
   df690:	e9d8 ab00 	ldrd	sl, fp, [r8]
   df694:	1bf6      	subs	r6, r6, r7
   df696:	e76c      	b.n	df572 <__ieee754_exp+0xf2>
   df698:	2600      	movs	r6, #0
   df69a:	e772      	b.n	df582 <__ieee754_exp+0x102>
   df69c:	ee10 2a10 	vmov	r2, s0
   df6a0:	462b      	mov	r3, r5
   df6a2:	4620      	mov	r0, r4
   df6a4:	4629      	mov	r1, r5
   df6a6:	f003 f969 	bl	e297c <__adddf3>
   df6aa:	ec41 0b10 	vmov	d0, r0, r1
   df6ae:	e6fe      	b.n	df4ae <__ieee754_exp+0x2e>
   df6b0:	a31d      	add	r3, pc, #116	; (adr r3, df728 <__ieee754_exp+0x2a8>)
   df6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6b6:	4610      	mov	r0, r2
   df6b8:	4619      	mov	r1, r3
   df6ba:	f003 fb11 	bl	e2ce0 <__aeabi_dmul>
   df6be:	ec41 0b10 	vmov	d0, r0, r1
   df6c2:	e6f4      	b.n	df4ae <__ieee754_exp+0x2e>
   df6c4:	4602      	mov	r2, r0
   df6c6:	460b      	mov	r3, r1
   df6c8:	4620      	mov	r0, r4
   df6ca:	4629      	mov	r1, r5
   df6cc:	f003 fb08 	bl	e2ce0 <__aeabi_dmul>
   df6d0:	2200      	movs	r2, #0
   df6d2:	4606      	mov	r6, r0
   df6d4:	460f      	mov	r7, r1
   df6d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df6da:	4640      	mov	r0, r8
   df6dc:	4649      	mov	r1, r9
   df6de:	f003 f94b 	bl	e2978 <__aeabi_dsub>
   df6e2:	4602      	mov	r2, r0
   df6e4:	460b      	mov	r3, r1
   df6e6:	4630      	mov	r0, r6
   df6e8:	4639      	mov	r1, r7
   df6ea:	f003 fc23 	bl	e2f34 <__aeabi_ddiv>
   df6ee:	4622      	mov	r2, r4
   df6f0:	462b      	mov	r3, r5
   df6f2:	f003 f941 	bl	e2978 <__aeabi_dsub>
   df6f6:	4602      	mov	r2, r0
   df6f8:	460b      	mov	r3, r1
   df6fa:	2000      	movs	r0, #0
   df6fc:	4924      	ldr	r1, [pc, #144]	; (df790 <__ieee754_exp+0x310>)
   df6fe:	f003 f93b 	bl	e2978 <__aeabi_dsub>
   df702:	ec41 0b10 	vmov	d0, r0, r1
   df706:	b003      	add	sp, #12
   df708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df70c:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   df710:	ec41 0b10 	vmov	d0, r0, r1
   df714:	b003      	add	sp, #12
   df716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df71a:	4606      	mov	r6, r0
   df71c:	e731      	b.n	df582 <__ieee754_exp+0x102>
   df71e:	bf00      	nop
	...
   df728:	8800759c 	.word	0x8800759c
   df72c:	7e37e43c 	.word	0x7e37e43c
   df730:	fefa39ef 	.word	0xfefa39ef
   df734:	40862e42 	.word	0x40862e42
   df738:	d52d3051 	.word	0xd52d3051
   df73c:	c0874910 	.word	0xc0874910
   df740:	652b82fe 	.word	0x652b82fe
   df744:	3ff71547 	.word	0x3ff71547
   df748:	fee00000 	.word	0xfee00000
   df74c:	3fe62e42 	.word	0x3fe62e42
   df750:	35793c76 	.word	0x35793c76
   df754:	3dea39ef 	.word	0x3dea39ef
   df758:	72bea4d0 	.word	0x72bea4d0
   df75c:	3e663769 	.word	0x3e663769
   df760:	c5d26bf1 	.word	0xc5d26bf1
   df764:	3ebbbd41 	.word	0x3ebbbd41
   df768:	af25de2c 	.word	0xaf25de2c
   df76c:	3f11566a 	.word	0x3f11566a
   df770:	16bebd93 	.word	0x16bebd93
   df774:	3f66c16c 	.word	0x3f66c16c
   df778:	5555553e 	.word	0x5555553e
   df77c:	3fc55555 	.word	0x3fc55555
   df780:	40862e41 	.word	0x40862e41
   df784:	7fefffff 	.word	0x7fefffff
   df788:	3fd62e42 	.word	0x3fd62e42
   df78c:	3e2fffff 	.word	0x3e2fffff
   df790:	3ff00000 	.word	0x3ff00000
   df794:	000e8158 	.word	0x000e8158
   df798:	3ff0a2b1 	.word	0x3ff0a2b1
   df79c:	000e8178 	.word	0x000e8178
   df7a0:	000e8168 	.word	0x000e8168

000df7a4 <__ieee754_fmod>:
   df7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df7a8:	ec53 2b11 	vmov	r2, r3, d1
   df7ac:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   df7b0:	ea52 0009 	orrs.w	r0, r2, r9
   df7b4:	ec55 4b10 	vmov	r4, r5, d0
   df7b8:	d025      	beq.n	df806 <__ieee754_fmod+0x62>
   df7ba:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   df7be:	488f      	ldr	r0, [pc, #572]	; (df9fc <__ieee754_fmod+0x258>)
   df7c0:	ea85 0b06 	eor.w	fp, r5, r6
   df7c4:	4583      	cmp	fp, r0
   df7c6:	dc1e      	bgt.n	df806 <__ieee754_fmod+0x62>
   df7c8:	4250      	negs	r0, r2
   df7ca:	4310      	orrs	r0, r2
   df7cc:	f8df c244 	ldr.w	ip, [pc, #580]	; dfa14 <__ieee754_fmod+0x270>
   df7d0:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   df7d4:	4560      	cmp	r0, ip
   df7d6:	ee11 8a10 	vmov	r8, s2
   df7da:	d814      	bhi.n	df806 <__ieee754_fmod+0x62>
   df7dc:	45cb      	cmp	fp, r9
   df7de:	461f      	mov	r7, r3
   df7e0:	ee10 aa10 	vmov	sl, s0
   df7e4:	ee11 ea10 	vmov	lr, s2
   df7e8:	ee10 1a10 	vmov	r1, s0
   df7ec:	dc17      	bgt.n	df81e <__ieee754_fmod+0x7a>
   df7ee:	db28      	blt.n	df842 <__ieee754_fmod+0x9e>
   df7f0:	4294      	cmp	r4, r2
   df7f2:	d326      	bcc.n	df842 <__ieee754_fmod+0x9e>
   df7f4:	d113      	bne.n	df81e <__ieee754_fmod+0x7a>
   df7f6:	4b82      	ldr	r3, [pc, #520]	; (dfa00 <__ieee754_fmod+0x25c>)
   df7f8:	0ff6      	lsrs	r6, r6, #31
   df7fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   df7fe:	ed93 0b00 	vldr	d0, [r3]
   df802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df806:	4620      	mov	r0, r4
   df808:	4629      	mov	r1, r5
   df80a:	f003 fa69 	bl	e2ce0 <__aeabi_dmul>
   df80e:	4602      	mov	r2, r0
   df810:	460b      	mov	r3, r1
   df812:	f003 fb8f 	bl	e2f34 <__aeabi_ddiv>
   df816:	ec41 0b10 	vmov	d0, r0, r1
   df81a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df81e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   df822:	da12      	bge.n	df84a <__ieee754_fmod+0xa6>
   df824:	f1bb 0f00 	cmp.w	fp, #0
   df828:	f040 80a7 	bne.w	df97a <__ieee754_fmod+0x1d6>
   df82c:	f1ba 0f00 	cmp.w	sl, #0
   df830:	4653      	mov	r3, sl
   df832:	4874      	ldr	r0, [pc, #464]	; (dfa04 <__ieee754_fmod+0x260>)
   df834:	dd0d      	ble.n	df852 <__ieee754_fmod+0xae>
   df836:	005b      	lsls	r3, r3, #1
   df838:	2b00      	cmp	r3, #0
   df83a:	f100 30ff 	add.w	r0, r0, #4294967295
   df83e:	dcfa      	bgt.n	df836 <__ieee754_fmod+0x92>
   df840:	e007      	b.n	df852 <__ieee754_fmod+0xae>
   df842:	ec45 4b10 	vmov	d0, r4, r5
   df846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df84a:	ea4f 502b 	mov.w	r0, fp, asr #20
   df84e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   df852:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   df856:	da0f      	bge.n	df878 <__ieee754_fmod+0xd4>
   df858:	f1b9 0f00 	cmp.w	r9, #0
   df85c:	f040 80a7 	bne.w	df9ae <__ieee754_fmod+0x20a>
   df860:	f1b8 0f00 	cmp.w	r8, #0
   df864:	4643      	mov	r3, r8
   df866:	f8df c19c 	ldr.w	ip, [pc, #412]	; dfa04 <__ieee754_fmod+0x260>
   df86a:	dd09      	ble.n	df880 <__ieee754_fmod+0xdc>
   df86c:	005b      	lsls	r3, r3, #1
   df86e:	2b00      	cmp	r3, #0
   df870:	f10c 3cff 	add.w	ip, ip, #4294967295
   df874:	dcfa      	bgt.n	df86c <__ieee754_fmod+0xc8>
   df876:	e003      	b.n	df880 <__ieee754_fmod+0xdc>
   df878:	ea4f 5c29 	mov.w	ip, r9, asr #20
   df87c:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   df880:	4b61      	ldr	r3, [pc, #388]	; (dfa08 <__ieee754_fmod+0x264>)
   df882:	4298      	cmp	r0, r3
   df884:	db5b      	blt.n	df93e <__ieee754_fmod+0x19a>
   df886:	f3cb 0313 	ubfx	r3, fp, #0, #20
   df88a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   df88e:	4a5e      	ldr	r2, [pc, #376]	; (dfa08 <__ieee754_fmod+0x264>)
   df890:	4594      	cmp	ip, r2
   df892:	db63      	blt.n	df95c <__ieee754_fmod+0x1b8>
   df894:	f3c7 0513 	ubfx	r5, r7, #0, #20
   df898:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   df89c:	ebcc 0000 	rsb	r0, ip, r0
   df8a0:	e007      	b.n	df8b2 <__ieee754_fmod+0x10e>
   df8a2:	ea52 0304 	orrs.w	r3, r2, r4
   df8a6:	d013      	beq.n	df8d0 <__ieee754_fmod+0x12c>
   df8a8:	0fe3      	lsrs	r3, r4, #31
   df8aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   df8ae:	0061      	lsls	r1, r4, #1
   df8b0:	3801      	subs	r0, #1
   df8b2:	ebce 0401 	rsb	r4, lr, r1
   df8b6:	1b5a      	subs	r2, r3, r5
   df8b8:	b190      	cbz	r0, df8e0 <__ieee754_fmod+0x13c>
   df8ba:	4571      	cmp	r1, lr
   df8bc:	bf38      	it	cc
   df8be:	f102 32ff 	addcc.w	r2, r2, #4294967295
   df8c2:	2a00      	cmp	r2, #0
   df8c4:	daed      	bge.n	df8a2 <__ieee754_fmod+0xfe>
   df8c6:	0fca      	lsrs	r2, r1, #31
   df8c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   df8cc:	0049      	lsls	r1, r1, #1
   df8ce:	e7ef      	b.n	df8b0 <__ieee754_fmod+0x10c>
   df8d0:	4b4b      	ldr	r3, [pc, #300]	; (dfa00 <__ieee754_fmod+0x25c>)
   df8d2:	0ff6      	lsrs	r6, r6, #31
   df8d4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   df8d8:	ed96 0b00 	vldr	d0, [r6]
   df8dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df8e0:	4571      	cmp	r1, lr
   df8e2:	4615      	mov	r5, r2
   df8e4:	bf38      	it	cc
   df8e6:	f102 35ff 	addcc.w	r5, r2, #4294967295
   df8ea:	2d00      	cmp	r5, #0
   df8ec:	bfac      	ite	ge
   df8ee:	ebce 0101 	rsbge	r1, lr, r1
   df8f2:	461d      	movlt	r5, r3
   df8f4:	ea55 0301 	orrs.w	r3, r5, r1
   df8f8:	d0ea      	beq.n	df8d0 <__ieee754_fmod+0x12c>
   df8fa:	4a44      	ldr	r2, [pc, #272]	; (dfa0c <__ieee754_fmod+0x268>)
   df8fc:	4295      	cmp	r5, r2
   df8fe:	dc08      	bgt.n	df912 <__ieee754_fmod+0x16e>
   df900:	0fcb      	lsrs	r3, r1, #31
   df902:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   df906:	4295      	cmp	r5, r2
   df908:	f10c 3cff 	add.w	ip, ip, #4294967295
   df90c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   df910:	ddf6      	ble.n	df900 <__ieee754_fmod+0x15c>
   df912:	4b3d      	ldr	r3, [pc, #244]	; (dfa08 <__ieee754_fmod+0x264>)
   df914:	459c      	cmp	ip, r3
   df916:	da54      	bge.n	df9c2 <__ieee754_fmod+0x21e>
   df918:	4a3b      	ldr	r2, [pc, #236]	; (dfa08 <__ieee754_fmod+0x264>)
   df91a:	ebcc 0202 	rsb	r2, ip, r2
   df91e:	2a14      	cmp	r2, #20
   df920:	dc5b      	bgt.n	df9da <__ieee754_fmod+0x236>
   df922:	f1c2 0320 	rsb	r3, r2, #32
   df926:	fa05 f303 	lsl.w	r3, r5, r3
   df92a:	40d1      	lsrs	r1, r2
   df92c:	430b      	orrs	r3, r1
   df92e:	4115      	asrs	r5, r2
   df930:	ea45 0106 	orr.w	r1, r5, r6
   df934:	4618      	mov	r0, r3
   df936:	ec41 0b10 	vmov	d0, r0, r1
   df93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df93e:	4932      	ldr	r1, [pc, #200]	; (dfa08 <__ieee754_fmod+0x264>)
   df940:	1a09      	subs	r1, r1, r0
   df942:	291f      	cmp	r1, #31
   df944:	dc2d      	bgt.n	df9a2 <__ieee754_fmod+0x1fe>
   df946:	f1c1 0320 	rsb	r3, r1, #32
   df94a:	fa0b fb01 	lsl.w	fp, fp, r1
   df94e:	fa2a f303 	lsr.w	r3, sl, r3
   df952:	ea43 030b 	orr.w	r3, r3, fp
   df956:	fa0a f101 	lsl.w	r1, sl, r1
   df95a:	e798      	b.n	df88e <__ieee754_fmod+0xea>
   df95c:	4c2a      	ldr	r4, [pc, #168]	; (dfa08 <__ieee754_fmod+0x264>)
   df95e:	ebcc 0404 	rsb	r4, ip, r4
   df962:	2c1f      	cmp	r4, #31
   df964:	dc15      	bgt.n	df992 <__ieee754_fmod+0x1ee>
   df966:	f1c4 0220 	rsb	r2, r4, #32
   df96a:	fa09 f504 	lsl.w	r5, r9, r4
   df96e:	fa28 f202 	lsr.w	r2, r8, r2
   df972:	4315      	orrs	r5, r2
   df974:	fa08 fe04 	lsl.w	lr, r8, r4
   df978:	e790      	b.n	df89c <__ieee754_fmod+0xf8>
   df97a:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   df97e:	2b00      	cmp	r3, #0
   df980:	4821      	ldr	r0, [pc, #132]	; (dfa08 <__ieee754_fmod+0x264>)
   df982:	f77f af66 	ble.w	df852 <__ieee754_fmod+0xae>
   df986:	005b      	lsls	r3, r3, #1
   df988:	2b00      	cmp	r3, #0
   df98a:	f100 30ff 	add.w	r0, r0, #4294967295
   df98e:	dcfa      	bgt.n	df986 <__ieee754_fmod+0x1e2>
   df990:	e75f      	b.n	df852 <__ieee754_fmod+0xae>
   df992:	4d1f      	ldr	r5, [pc, #124]	; (dfa10 <__ieee754_fmod+0x26c>)
   df994:	ebcc 0505 	rsb	r5, ip, r5
   df998:	fa08 f505 	lsl.w	r5, r8, r5
   df99c:	f04f 0e00 	mov.w	lr, #0
   df9a0:	e77c      	b.n	df89c <__ieee754_fmod+0xf8>
   df9a2:	4b1b      	ldr	r3, [pc, #108]	; (dfa10 <__ieee754_fmod+0x26c>)
   df9a4:	1a1b      	subs	r3, r3, r0
   df9a6:	fa0a f303 	lsl.w	r3, sl, r3
   df9aa:	2100      	movs	r1, #0
   df9ac:	e76f      	b.n	df88e <__ieee754_fmod+0xea>
   df9ae:	f8df c058 	ldr.w	ip, [pc, #88]	; dfa08 <__ieee754_fmod+0x264>
   df9b2:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   df9b6:	005b      	lsls	r3, r3, #1
   df9b8:	2b00      	cmp	r3, #0
   df9ba:	f10c 3cff 	add.w	ip, ip, #4294967295
   df9be:	dcfa      	bgt.n	df9b6 <__ieee754_fmod+0x212>
   df9c0:	e75e      	b.n	df880 <__ieee754_fmod+0xdc>
   df9c2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   df9c6:	432e      	orrs	r6, r5
   df9c8:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   df9cc:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   df9d0:	460a      	mov	r2, r1
   df9d2:	ec43 2b10 	vmov	d0, r2, r3
   df9d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df9da:	2a1f      	cmp	r2, #31
   df9dc:	dc07      	bgt.n	df9ee <__ieee754_fmod+0x24a>
   df9de:	f1c2 0320 	rsb	r3, r2, #32
   df9e2:	409d      	lsls	r5, r3
   df9e4:	40d1      	lsrs	r1, r2
   df9e6:	ea45 0301 	orr.w	r3, r5, r1
   df9ea:	4635      	mov	r5, r6
   df9ec:	e7a0      	b.n	df930 <__ieee754_fmod+0x18c>
   df9ee:	4b08      	ldr	r3, [pc, #32]	; (dfa10 <__ieee754_fmod+0x26c>)
   df9f0:	ebcc 0303 	rsb	r3, ip, r3
   df9f4:	fa45 f303 	asr.w	r3, r5, r3
   df9f8:	4635      	mov	r5, r6
   df9fa:	e799      	b.n	df930 <__ieee754_fmod+0x18c>
   df9fc:	7fefffff 	.word	0x7fefffff
   dfa00:	000e8188 	.word	0x000e8188
   dfa04:	fffffbed 	.word	0xfffffbed
   dfa08:	fffffc02 	.word	0xfffffc02
   dfa0c:	000fffff 	.word	0x000fffff
   dfa10:	fffffbe2 	.word	0xfffffbe2
   dfa14:	7ff00000 	.word	0x7ff00000

000dfa18 <__ieee754_log>:
   dfa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfa1c:	ec51 0b10 	vmov	r0, r1, d0
   dfa20:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dfa24:	b085      	sub	sp, #20
   dfa26:	460b      	mov	r3, r1
   dfa28:	da59      	bge.n	dfade <__ieee754_log+0xc6>
   dfa2a:	ee10 2a10 	vmov	r2, s0
   dfa2e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   dfa32:	4322      	orrs	r2, r4
   dfa34:	f000 80f8 	beq.w	dfc28 <__ieee754_log+0x210>
   dfa38:	2900      	cmp	r1, #0
   dfa3a:	f2c0 8180 	blt.w	dfd3e <__ieee754_log+0x326>
   dfa3e:	2200      	movs	r2, #0
   dfa40:	4bdd      	ldr	r3, [pc, #884]	; (dfdb8 <__ieee754_log+0x3a0>)
   dfa42:	4cde      	ldr	r4, [pc, #888]	; (dfdbc <__ieee754_log+0x3a4>)
   dfa44:	f003 f94c 	bl	e2ce0 <__aeabi_dmul>
   dfa48:	460b      	mov	r3, r1
   dfa4a:	42a3      	cmp	r3, r4
   dfa4c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dfa50:	dc4a      	bgt.n	dfae8 <__ieee754_log+0xd0>
   dfa52:	f3c3 0513 	ubfx	r5, r3, #0, #20
   dfa56:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   dfa5a:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   dfa5e:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   dfa62:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   dfa66:	151b      	asrs	r3, r3, #20
   dfa68:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   dfa6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   dfa70:	ea44 0105 	orr.w	r1, r4, r5
   dfa74:	189c      	adds	r4, r3, r2
   dfa76:	2200      	movs	r2, #0
   dfa78:	4bd1      	ldr	r3, [pc, #836]	; (dfdc0 <__ieee754_log+0x3a8>)
   dfa7a:	f002 ff7d 	bl	e2978 <__aeabi_dsub>
   dfa7e:	1cab      	adds	r3, r5, #2
   dfa80:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dfa84:	2b02      	cmp	r3, #2
   dfa86:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   dfa8a:	4682      	mov	sl, r0
   dfa8c:	468b      	mov	fp, r1
   dfa8e:	f04f 0200 	mov.w	r2, #0
   dfa92:	dc32      	bgt.n	dfafa <__ieee754_log+0xe2>
   dfa94:	2300      	movs	r3, #0
   dfa96:	f003 fb8b 	bl	e31b0 <__aeabi_dcmpeq>
   dfa9a:	2800      	cmp	r0, #0
   dfa9c:	f000 80cf 	beq.w	dfc3e <__ieee754_log+0x226>
   dfaa0:	2c00      	cmp	r4, #0
   dfaa2:	f000 8158 	beq.w	dfd56 <__ieee754_log+0x33e>
   dfaa6:	4620      	mov	r0, r4
   dfaa8:	f003 f8b4 	bl	e2c14 <__aeabi_i2d>
   dfaac:	a3ac      	add	r3, pc, #688	; (adr r3, dfd60 <__ieee754_log+0x348>)
   dfaae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfab2:	4606      	mov	r6, r0
   dfab4:	460f      	mov	r7, r1
   dfab6:	f003 f913 	bl	e2ce0 <__aeabi_dmul>
   dfaba:	a3ab      	add	r3, pc, #684	; (adr r3, dfd68 <__ieee754_log+0x350>)
   dfabc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfac0:	4604      	mov	r4, r0
   dfac2:	460d      	mov	r5, r1
   dfac4:	4630      	mov	r0, r6
   dfac6:	4639      	mov	r1, r7
   dfac8:	f003 f90a 	bl	e2ce0 <__aeabi_dmul>
   dfacc:	4602      	mov	r2, r0
   dface:	460b      	mov	r3, r1
   dfad0:	4620      	mov	r0, r4
   dfad2:	4629      	mov	r1, r5
   dfad4:	f002 ff52 	bl	e297c <__adddf3>
   dfad8:	ec41 0b10 	vmov	d0, r0, r1
   dfadc:	e00a      	b.n	dfaf4 <__ieee754_log+0xdc>
   dfade:	4cb7      	ldr	r4, [pc, #732]	; (dfdbc <__ieee754_log+0x3a4>)
   dfae0:	42a3      	cmp	r3, r4
   dfae2:	f04f 0200 	mov.w	r2, #0
   dfae6:	ddb4      	ble.n	dfa52 <__ieee754_log+0x3a>
   dfae8:	4602      	mov	r2, r0
   dfaea:	460b      	mov	r3, r1
   dfaec:	f002 ff46 	bl	e297c <__adddf3>
   dfaf0:	ec41 0b10 	vmov	d0, r0, r1
   dfaf4:	b005      	add	sp, #20
   dfaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfafa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dfafe:	f002 ff3d 	bl	e297c <__adddf3>
   dfb02:	4602      	mov	r2, r0
   dfb04:	460b      	mov	r3, r1
   dfb06:	4650      	mov	r0, sl
   dfb08:	4659      	mov	r1, fp
   dfb0a:	f003 fa13 	bl	e2f34 <__aeabi_ddiv>
   dfb0e:	4606      	mov	r6, r0
   dfb10:	4620      	mov	r0, r4
   dfb12:	460f      	mov	r7, r1
   dfb14:	f003 f87e 	bl	e2c14 <__aeabi_i2d>
   dfb18:	4632      	mov	r2, r6
   dfb1a:	e9cd 0100 	strd	r0, r1, [sp]
   dfb1e:	463b      	mov	r3, r7
   dfb20:	4630      	mov	r0, r6
   dfb22:	4639      	mov	r1, r7
   dfb24:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dfb28:	f003 f8da 	bl	e2ce0 <__aeabi_dmul>
   dfb2c:	4602      	mov	r2, r0
   dfb2e:	460b      	mov	r3, r1
   dfb30:	4680      	mov	r8, r0
   dfb32:	4689      	mov	r9, r1
   dfb34:	f003 f8d4 	bl	e2ce0 <__aeabi_dmul>
   dfb38:	a38d      	add	r3, pc, #564	; (adr r3, dfd70 <__ieee754_log+0x358>)
   dfb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb3e:	4606      	mov	r6, r0
   dfb40:	460f      	mov	r7, r1
   dfb42:	f003 f8cd 	bl	e2ce0 <__aeabi_dmul>
   dfb46:	a38c      	add	r3, pc, #560	; (adr r3, dfd78 <__ieee754_log+0x360>)
   dfb48:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb4c:	f002 ff16 	bl	e297c <__adddf3>
   dfb50:	4632      	mov	r2, r6
   dfb52:	463b      	mov	r3, r7
   dfb54:	f003 f8c4 	bl	e2ce0 <__aeabi_dmul>
   dfb58:	a389      	add	r3, pc, #548	; (adr r3, dfd80 <__ieee754_log+0x368>)
   dfb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb5e:	f002 ff0d 	bl	e297c <__adddf3>
   dfb62:	4632      	mov	r2, r6
   dfb64:	463b      	mov	r3, r7
   dfb66:	f003 f8bb 	bl	e2ce0 <__aeabi_dmul>
   dfb6a:	a387      	add	r3, pc, #540	; (adr r3, dfd88 <__ieee754_log+0x370>)
   dfb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb70:	f002 ff04 	bl	e297c <__adddf3>
   dfb74:	4642      	mov	r2, r8
   dfb76:	464b      	mov	r3, r9
   dfb78:	f003 f8b2 	bl	e2ce0 <__aeabi_dmul>
   dfb7c:	a384      	add	r3, pc, #528	; (adr r3, dfd90 <__ieee754_log+0x378>)
   dfb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb82:	4680      	mov	r8, r0
   dfb84:	4689      	mov	r9, r1
   dfb86:	4630      	mov	r0, r6
   dfb88:	4639      	mov	r1, r7
   dfb8a:	f003 f8a9 	bl	e2ce0 <__aeabi_dmul>
   dfb8e:	a382      	add	r3, pc, #520	; (adr r3, dfd98 <__ieee754_log+0x380>)
   dfb90:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb94:	f002 fef2 	bl	e297c <__adddf3>
   dfb98:	4632      	mov	r2, r6
   dfb9a:	463b      	mov	r3, r7
   dfb9c:	f003 f8a0 	bl	e2ce0 <__aeabi_dmul>
   dfba0:	a37f      	add	r3, pc, #508	; (adr r3, dfda0 <__ieee754_log+0x388>)
   dfba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfba6:	f002 fee9 	bl	e297c <__adddf3>
   dfbaa:	4632      	mov	r2, r6
   dfbac:	463b      	mov	r3, r7
   dfbae:	f003 f897 	bl	e2ce0 <__aeabi_dmul>
   dfbb2:	460b      	mov	r3, r1
   dfbb4:	4602      	mov	r2, r0
   dfbb6:	4649      	mov	r1, r9
   dfbb8:	4640      	mov	r0, r8
   dfbba:	f002 fedf 	bl	e297c <__adddf3>
   dfbbe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   dfbc2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   dfbc6:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   dfbca:	3551      	adds	r5, #81	; 0x51
   dfbcc:	431d      	orrs	r5, r3
   dfbce:	2d00      	cmp	r5, #0
   dfbd0:	4680      	mov	r8, r0
   dfbd2:	4689      	mov	r9, r1
   dfbd4:	dd5c      	ble.n	dfc90 <__ieee754_log+0x278>
   dfbd6:	2200      	movs	r2, #0
   dfbd8:	4b7a      	ldr	r3, [pc, #488]	; (dfdc4 <__ieee754_log+0x3ac>)
   dfbda:	4650      	mov	r0, sl
   dfbdc:	4659      	mov	r1, fp
   dfbde:	f003 f87f 	bl	e2ce0 <__aeabi_dmul>
   dfbe2:	4652      	mov	r2, sl
   dfbe4:	465b      	mov	r3, fp
   dfbe6:	f003 f87b 	bl	e2ce0 <__aeabi_dmul>
   dfbea:	4606      	mov	r6, r0
   dfbec:	460f      	mov	r7, r1
   dfbee:	2c00      	cmp	r4, #0
   dfbf0:	d16e      	bne.n	dfcd0 <__ieee754_log+0x2b8>
   dfbf2:	4632      	mov	r2, r6
   dfbf4:	463b      	mov	r3, r7
   dfbf6:	4640      	mov	r0, r8
   dfbf8:	4649      	mov	r1, r9
   dfbfa:	f002 febf 	bl	e297c <__adddf3>
   dfbfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfc02:	f003 f86d 	bl	e2ce0 <__aeabi_dmul>
   dfc06:	4602      	mov	r2, r0
   dfc08:	460b      	mov	r3, r1
   dfc0a:	4630      	mov	r0, r6
   dfc0c:	4639      	mov	r1, r7
   dfc0e:	f002 feb3 	bl	e2978 <__aeabi_dsub>
   dfc12:	4602      	mov	r2, r0
   dfc14:	460b      	mov	r3, r1
   dfc16:	4650      	mov	r0, sl
   dfc18:	4659      	mov	r1, fp
   dfc1a:	f002 fead 	bl	e2978 <__aeabi_dsub>
   dfc1e:	ec41 0b10 	vmov	d0, r0, r1
   dfc22:	b005      	add	sp, #20
   dfc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfc28:	2200      	movs	r2, #0
   dfc2a:	2300      	movs	r3, #0
   dfc2c:	2000      	movs	r0, #0
   dfc2e:	4966      	ldr	r1, [pc, #408]	; (dfdc8 <__ieee754_log+0x3b0>)
   dfc30:	f003 f980 	bl	e2f34 <__aeabi_ddiv>
   dfc34:	ec41 0b10 	vmov	d0, r0, r1
   dfc38:	b005      	add	sp, #20
   dfc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfc3e:	a35a      	add	r3, pc, #360	; (adr r3, dfda8 <__ieee754_log+0x390>)
   dfc40:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc44:	4650      	mov	r0, sl
   dfc46:	4659      	mov	r1, fp
   dfc48:	f003 f84a 	bl	e2ce0 <__aeabi_dmul>
   dfc4c:	4602      	mov	r2, r0
   dfc4e:	460b      	mov	r3, r1
   dfc50:	2000      	movs	r0, #0
   dfc52:	495c      	ldr	r1, [pc, #368]	; (dfdc4 <__ieee754_log+0x3ac>)
   dfc54:	f002 fe90 	bl	e2978 <__aeabi_dsub>
   dfc58:	4652      	mov	r2, sl
   dfc5a:	4606      	mov	r6, r0
   dfc5c:	460f      	mov	r7, r1
   dfc5e:	465b      	mov	r3, fp
   dfc60:	4650      	mov	r0, sl
   dfc62:	4659      	mov	r1, fp
   dfc64:	f003 f83c 	bl	e2ce0 <__aeabi_dmul>
   dfc68:	4602      	mov	r2, r0
   dfc6a:	460b      	mov	r3, r1
   dfc6c:	4630      	mov	r0, r6
   dfc6e:	4639      	mov	r1, r7
   dfc70:	f003 f836 	bl	e2ce0 <__aeabi_dmul>
   dfc74:	4606      	mov	r6, r0
   dfc76:	460f      	mov	r7, r1
   dfc78:	2c00      	cmp	r4, #0
   dfc7a:	f040 80a7 	bne.w	dfdcc <__ieee754_log+0x3b4>
   dfc7e:	4602      	mov	r2, r0
   dfc80:	460b      	mov	r3, r1
   dfc82:	4650      	mov	r0, sl
   dfc84:	4659      	mov	r1, fp
   dfc86:	f002 fe77 	bl	e2978 <__aeabi_dsub>
   dfc8a:	ec41 0b10 	vmov	d0, r0, r1
   dfc8e:	e731      	b.n	dfaf4 <__ieee754_log+0xdc>
   dfc90:	2c00      	cmp	r4, #0
   dfc92:	f000 80af 	beq.w	dfdf4 <__ieee754_log+0x3dc>
   dfc96:	a332      	add	r3, pc, #200	; (adr r3, dfd60 <__ieee754_log+0x348>)
   dfc98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfca0:	f003 f81e 	bl	e2ce0 <__aeabi_dmul>
   dfca4:	4642      	mov	r2, r8
   dfca6:	464b      	mov	r3, r9
   dfca8:	4604      	mov	r4, r0
   dfcaa:	460d      	mov	r5, r1
   dfcac:	4650      	mov	r0, sl
   dfcae:	4659      	mov	r1, fp
   dfcb0:	f002 fe62 	bl	e2978 <__aeabi_dsub>
   dfcb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfcb8:	f003 f812 	bl	e2ce0 <__aeabi_dmul>
   dfcbc:	a32a      	add	r3, pc, #168	; (adr r3, dfd68 <__ieee754_log+0x350>)
   dfcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcc2:	4606      	mov	r6, r0
   dfcc4:	460f      	mov	r7, r1
   dfcc6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfcca:	f003 f809 	bl	e2ce0 <__aeabi_dmul>
   dfcce:	e021      	b.n	dfd14 <__ieee754_log+0x2fc>
   dfcd0:	a323      	add	r3, pc, #140	; (adr r3, dfd60 <__ieee754_log+0x348>)
   dfcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcd6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfcda:	f003 f801 	bl	e2ce0 <__aeabi_dmul>
   dfcde:	4632      	mov	r2, r6
   dfce0:	463b      	mov	r3, r7
   dfce2:	4604      	mov	r4, r0
   dfce4:	460d      	mov	r5, r1
   dfce6:	4640      	mov	r0, r8
   dfce8:	4649      	mov	r1, r9
   dfcea:	f002 fe47 	bl	e297c <__adddf3>
   dfcee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfcf2:	f002 fff5 	bl	e2ce0 <__aeabi_dmul>
   dfcf6:	a31c      	add	r3, pc, #112	; (adr r3, dfd68 <__ieee754_log+0x350>)
   dfcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcfc:	4680      	mov	r8, r0
   dfcfe:	4689      	mov	r9, r1
   dfd00:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfd04:	f002 ffec 	bl	e2ce0 <__aeabi_dmul>
   dfd08:	4602      	mov	r2, r0
   dfd0a:	460b      	mov	r3, r1
   dfd0c:	4640      	mov	r0, r8
   dfd0e:	4649      	mov	r1, r9
   dfd10:	f002 fe34 	bl	e297c <__adddf3>
   dfd14:	4602      	mov	r2, r0
   dfd16:	460b      	mov	r3, r1
   dfd18:	4630      	mov	r0, r6
   dfd1a:	4639      	mov	r1, r7
   dfd1c:	f002 fe2c 	bl	e2978 <__aeabi_dsub>
   dfd20:	4652      	mov	r2, sl
   dfd22:	465b      	mov	r3, fp
   dfd24:	f002 fe28 	bl	e2978 <__aeabi_dsub>
   dfd28:	4602      	mov	r2, r0
   dfd2a:	460b      	mov	r3, r1
   dfd2c:	4620      	mov	r0, r4
   dfd2e:	4629      	mov	r1, r5
   dfd30:	f002 fe22 	bl	e2978 <__aeabi_dsub>
   dfd34:	ec41 0b10 	vmov	d0, r0, r1
   dfd38:	b005      	add	sp, #20
   dfd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd3e:	ee10 2a10 	vmov	r2, s0
   dfd42:	460b      	mov	r3, r1
   dfd44:	f002 fe18 	bl	e2978 <__aeabi_dsub>
   dfd48:	2200      	movs	r2, #0
   dfd4a:	2300      	movs	r3, #0
   dfd4c:	f003 f8f2 	bl	e2f34 <__aeabi_ddiv>
   dfd50:	ec41 0b10 	vmov	d0, r0, r1
   dfd54:	e6ce      	b.n	dfaf4 <__ieee754_log+0xdc>
   dfd56:	ed9f 0b16 	vldr	d0, [pc, #88]	; dfdb0 <__ieee754_log+0x398>
   dfd5a:	e6cb      	b.n	dfaf4 <__ieee754_log+0xdc>
   dfd5c:	f3af 8000 	nop.w
   dfd60:	fee00000 	.word	0xfee00000
   dfd64:	3fe62e42 	.word	0x3fe62e42
   dfd68:	35793c76 	.word	0x35793c76
   dfd6c:	3dea39ef 	.word	0x3dea39ef
   dfd70:	df3e5244 	.word	0xdf3e5244
   dfd74:	3fc2f112 	.word	0x3fc2f112
   dfd78:	96cb03de 	.word	0x96cb03de
   dfd7c:	3fc74664 	.word	0x3fc74664
   dfd80:	94229359 	.word	0x94229359
   dfd84:	3fd24924 	.word	0x3fd24924
   dfd88:	55555593 	.word	0x55555593
   dfd8c:	3fe55555 	.word	0x3fe55555
   dfd90:	d078c69f 	.word	0xd078c69f
   dfd94:	3fc39a09 	.word	0x3fc39a09
   dfd98:	1d8e78af 	.word	0x1d8e78af
   dfd9c:	3fcc71c5 	.word	0x3fcc71c5
   dfda0:	9997fa04 	.word	0x9997fa04
   dfda4:	3fd99999 	.word	0x3fd99999
   dfda8:	55555555 	.word	0x55555555
   dfdac:	3fd55555 	.word	0x3fd55555
	...
   dfdb8:	43500000 	.word	0x43500000
   dfdbc:	7fefffff 	.word	0x7fefffff
   dfdc0:	3ff00000 	.word	0x3ff00000
   dfdc4:	3fe00000 	.word	0x3fe00000
   dfdc8:	c3500000 	.word	0xc3500000
   dfdcc:	4620      	mov	r0, r4
   dfdce:	f002 ff21 	bl	e2c14 <__aeabi_i2d>
   dfdd2:	a30f      	add	r3, pc, #60	; (adr r3, dfe10 <__ieee754_log+0x3f8>)
   dfdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfdd8:	4680      	mov	r8, r0
   dfdda:	4689      	mov	r9, r1
   dfddc:	f002 ff80 	bl	e2ce0 <__aeabi_dmul>
   dfde0:	a30d      	add	r3, pc, #52	; (adr r3, dfe18 <__ieee754_log+0x400>)
   dfde2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfde6:	4604      	mov	r4, r0
   dfde8:	460d      	mov	r5, r1
   dfdea:	4640      	mov	r0, r8
   dfdec:	4649      	mov	r1, r9
   dfdee:	f002 ff77 	bl	e2ce0 <__aeabi_dmul>
   dfdf2:	e78f      	b.n	dfd14 <__ieee754_log+0x2fc>
   dfdf4:	4602      	mov	r2, r0
   dfdf6:	460b      	mov	r3, r1
   dfdf8:	4650      	mov	r0, sl
   dfdfa:	4659      	mov	r1, fp
   dfdfc:	f002 fdbc 	bl	e2978 <__aeabi_dsub>
   dfe00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfe04:	f002 ff6c 	bl	e2ce0 <__aeabi_dmul>
   dfe08:	e703      	b.n	dfc12 <__ieee754_log+0x1fa>
   dfe0a:	bf00      	nop
   dfe0c:	f3af 8000 	nop.w
   dfe10:	fee00000 	.word	0xfee00000
   dfe14:	3fe62e42 	.word	0x3fe62e42
   dfe18:	35793c76 	.word	0x35793c76
   dfe1c:	3dea39ef 	.word	0x3dea39ef

000dfe20 <__ieee754_log10>:
   dfe20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dfe24:	ec55 4b10 	vmov	r4, r5, d0
   dfe28:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   dfe2c:	b083      	sub	sp, #12
   dfe2e:	462b      	mov	r3, r5
   dfe30:	da21      	bge.n	dfe76 <__ieee754_log10+0x56>
   dfe32:	ee10 2a10 	vmov	r2, s0
   dfe36:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   dfe3a:	430a      	orrs	r2, r1
   dfe3c:	d064      	beq.n	dff08 <__ieee754_log10+0xe8>
   dfe3e:	2d00      	cmp	r5, #0
   dfe40:	db6d      	blt.n	dff1e <__ieee754_log10+0xfe>
   dfe42:	4629      	mov	r1, r5
   dfe44:	2200      	movs	r2, #0
   dfe46:	4b44      	ldr	r3, [pc, #272]	; (dff58 <__ieee754_log10+0x138>)
   dfe48:	ee10 0a10 	vmov	r0, s0
   dfe4c:	f002 ff48 	bl	e2ce0 <__aeabi_dmul>
   dfe50:	460b      	mov	r3, r1
   dfe52:	460d      	mov	r5, r1
   dfe54:	4941      	ldr	r1, [pc, #260]	; (dff5c <__ieee754_log10+0x13c>)
   dfe56:	428b      	cmp	r3, r1
   dfe58:	4604      	mov	r4, r0
   dfe5a:	f06f 0235 	mvn.w	r2, #53	; 0x35
   dfe5e:	dd0f      	ble.n	dfe80 <__ieee754_log10+0x60>
   dfe60:	4622      	mov	r2, r4
   dfe62:	462b      	mov	r3, r5
   dfe64:	4620      	mov	r0, r4
   dfe66:	4629      	mov	r1, r5
   dfe68:	f002 fd88 	bl	e297c <__adddf3>
   dfe6c:	ec41 0b10 	vmov	d0, r0, r1
   dfe70:	b003      	add	sp, #12
   dfe72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dfe76:	4939      	ldr	r1, [pc, #228]	; (dff5c <__ieee754_log10+0x13c>)
   dfe78:	428b      	cmp	r3, r1
   dfe7a:	f04f 0200 	mov.w	r2, #0
   dfe7e:	dcef      	bgt.n	dfe60 <__ieee754_log10+0x40>
   dfe80:	1518      	asrs	r0, r3, #20
   dfe82:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dfe86:	4410      	add	r0, r2
   dfe88:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   dfe8c:	4448      	add	r0, r9
   dfe8e:	f3c3 0813 	ubfx	r8, r3, #0, #20
   dfe92:	f002 febf 	bl	e2c14 <__aeabi_i2d>
   dfe96:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   dfe9a:	3303      	adds	r3, #3
   dfe9c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   dfea0:	ec45 4b10 	vmov	d0, r4, r5
   dfea4:	4606      	mov	r6, r0
   dfea6:	460f      	mov	r7, r1
   dfea8:	f7ff fdb6 	bl	dfa18 <__ieee754_log>
   dfeac:	4630      	mov	r0, r6
   dfeae:	4639      	mov	r1, r7
   dfeb0:	a323      	add	r3, pc, #140	; (adr r3, dff40 <__ieee754_log10+0x120>)
   dfeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfeb6:	ed8d 0b00 	vstr	d0, [sp]
   dfeba:	f002 ff11 	bl	e2ce0 <__aeabi_dmul>
   dfebe:	ed9d 0b00 	vldr	d0, [sp]
   dfec2:	4604      	mov	r4, r0
   dfec4:	460d      	mov	r5, r1
   dfec6:	a320      	add	r3, pc, #128	; (adr r3, dff48 <__ieee754_log10+0x128>)
   dfec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfecc:	ec51 0b10 	vmov	r0, r1, d0
   dfed0:	f002 ff06 	bl	e2ce0 <__aeabi_dmul>
   dfed4:	4602      	mov	r2, r0
   dfed6:	460b      	mov	r3, r1
   dfed8:	4620      	mov	r0, r4
   dfeda:	4629      	mov	r1, r5
   dfedc:	f002 fd4e 	bl	e297c <__adddf3>
   dfee0:	a31b      	add	r3, pc, #108	; (adr r3, dff50 <__ieee754_log10+0x130>)
   dfee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfee6:	4604      	mov	r4, r0
   dfee8:	460d      	mov	r5, r1
   dfeea:	4630      	mov	r0, r6
   dfeec:	4639      	mov	r1, r7
   dfeee:	f002 fef7 	bl	e2ce0 <__aeabi_dmul>
   dfef2:	4602      	mov	r2, r0
   dfef4:	460b      	mov	r3, r1
   dfef6:	4620      	mov	r0, r4
   dfef8:	4629      	mov	r1, r5
   dfefa:	f002 fd3f 	bl	e297c <__adddf3>
   dfefe:	ec41 0b10 	vmov	d0, r0, r1
   dff02:	b003      	add	sp, #12
   dff04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dff08:	2200      	movs	r2, #0
   dff0a:	2300      	movs	r3, #0
   dff0c:	2000      	movs	r0, #0
   dff0e:	4914      	ldr	r1, [pc, #80]	; (dff60 <__ieee754_log10+0x140>)
   dff10:	f003 f810 	bl	e2f34 <__aeabi_ddiv>
   dff14:	ec41 0b10 	vmov	d0, r0, r1
   dff18:	b003      	add	sp, #12
   dff1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dff1e:	ee10 2a10 	vmov	r2, s0
   dff22:	462b      	mov	r3, r5
   dff24:	4620      	mov	r0, r4
   dff26:	4629      	mov	r1, r5
   dff28:	f002 fd26 	bl	e2978 <__aeabi_dsub>
   dff2c:	2200      	movs	r2, #0
   dff2e:	2300      	movs	r3, #0
   dff30:	f003 f800 	bl	e2f34 <__aeabi_ddiv>
   dff34:	ec41 0b10 	vmov	d0, r0, r1
   dff38:	e79a      	b.n	dfe70 <__ieee754_log10+0x50>
   dff3a:	bf00      	nop
   dff3c:	f3af 8000 	nop.w
   dff40:	11f12b36 	.word	0x11f12b36
   dff44:	3d59fef3 	.word	0x3d59fef3
   dff48:	1526e50e 	.word	0x1526e50e
   dff4c:	3fdbcb7b 	.word	0x3fdbcb7b
   dff50:	509f6000 	.word	0x509f6000
   dff54:	3fd34413 	.word	0x3fd34413
   dff58:	43500000 	.word	0x43500000
   dff5c:	7fefffff 	.word	0x7fefffff
   dff60:	c3500000 	.word	0xc3500000
   dff64:	00000000 	.word	0x00000000

000dff68 <__ieee754_pow>:
   dff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dff6c:	ec51 0b11 	vmov	r0, r1, d1
   dff70:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   dff74:	ea58 0400 	orrs.w	r4, r8, r0
   dff78:	b093      	sub	sp, #76	; 0x4c
   dff7a:	d03c      	beq.n	dfff6 <__ieee754_pow+0x8e>
   dff7c:	ec53 2b10 	vmov	r2, r3, d0
   dff80:	4e6d      	ldr	r6, [pc, #436]	; (e0138 <__ieee754_pow+0x1d0>)
   dff82:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dff86:	42b4      	cmp	r4, r6
   dff88:	ee10 aa10 	vmov	sl, s0
   dff8c:	461d      	mov	r5, r3
   dff8e:	dc2b      	bgt.n	dffe8 <__ieee754_pow+0x80>
   dff90:	4689      	mov	r9, r1
   dff92:	ee11 ea10 	vmov	lr, s2
   dff96:	d026      	beq.n	dffe6 <__ieee754_pow+0x7e>
   dff98:	45b0      	cmp	r8, r6
   dff9a:	dc25      	bgt.n	dffe8 <__ieee754_pow+0x80>
   dff9c:	4e66      	ldr	r6, [pc, #408]	; (e0138 <__ieee754_pow+0x1d0>)
   dff9e:	45b0      	cmp	r8, r6
   dffa0:	d077      	beq.n	e0092 <__ieee754_pow+0x12a>
   dffa2:	2d00      	cmp	r5, #0
   dffa4:	4616      	mov	r6, r2
   dffa6:	461f      	mov	r7, r3
   dffa8:	e9cd 0100 	strd	r0, r1, [sp]
   dffac:	db75      	blt.n	e009a <__ieee754_pow+0x132>
   dffae:	f04f 0b00 	mov.w	fp, #0
   dffb2:	f1be 0f00 	cmp.w	lr, #0
   dffb6:	d12d      	bne.n	e0014 <__ieee754_pow+0xac>
   dffb8:	4b5f      	ldr	r3, [pc, #380]	; (e0138 <__ieee754_pow+0x1d0>)
   dffba:	4598      	cmp	r8, r3
   dffbc:	f000 8089 	beq.w	e00d2 <__ieee754_pow+0x16a>
   dffc0:	4b5e      	ldr	r3, [pc, #376]	; (e013c <__ieee754_pow+0x1d4>)
   dffc2:	4598      	cmp	r8, r3
   dffc4:	d05e      	beq.n	e0084 <__ieee754_pow+0x11c>
   dffc6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   dffca:	f000 83de 	beq.w	e078a <__ieee754_pow+0x822>
   dffce:	4b5c      	ldr	r3, [pc, #368]	; (e0140 <__ieee754_pow+0x1d8>)
   dffd0:	4599      	cmp	r9, r3
   dffd2:	d11f      	bne.n	e0014 <__ieee754_pow+0xac>
   dffd4:	2d00      	cmp	r5, #0
   dffd6:	db1d      	blt.n	e0014 <__ieee754_pow+0xac>
   dffd8:	ec47 6b10 	vmov	d0, r6, r7
   dffdc:	b013      	add	sp, #76	; 0x4c
   dffde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dffe2:	f001 b855 	b.w	e1090 <__ieee754_sqrt>
   dffe6:	b15a      	cbz	r2, e0000 <__ieee754_pow+0x98>
   dffe8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   dffec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   dfff0:	ea54 030a 	orrs.w	r3, r4, sl
   dfff4:	d106      	bne.n	e0004 <__ieee754_pow+0x9c>
   dfff6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; e0120 <__ieee754_pow+0x1b8>
   dfffa:	b013      	add	sp, #76	; 0x4c
   dfffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0000:	45a0      	cmp	r8, r4
   e0002:	ddcb      	ble.n	dff9c <__ieee754_pow+0x34>
   e0004:	484f      	ldr	r0, [pc, #316]	; (e0144 <__ieee754_pow+0x1dc>)
   e0006:	b013      	add	sp, #76	; 0x4c
   e0008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e000c:	f002 bb80 	b.w	e2710 <nan>
   e0010:	f04f 0b00 	mov.w	fp, #0
   e0014:	ec47 6b10 	vmov	d0, r6, r7
   e0018:	f7fd fc5a 	bl	dd8d0 <fabs>
   e001c:	ec51 0b10 	vmov	r0, r1, d0
   e0020:	f1ba 0f00 	cmp.w	sl, #0
   e0024:	d01e      	beq.n	e0064 <__ieee754_pow+0xfc>
   e0026:	0fed      	lsrs	r5, r5, #31
   e0028:	f105 3aff 	add.w	sl, r5, #4294967295
   e002c:	ea5b 030a 	orrs.w	r3, fp, sl
   e0030:	d063      	beq.n	e00fa <__ieee754_pow+0x192>
   e0032:	4b45      	ldr	r3, [pc, #276]	; (e0148 <__ieee754_pow+0x1e0>)
   e0034:	4598      	cmp	r8, r3
   e0036:	f340 808d 	ble.w	e0154 <__ieee754_pow+0x1ec>
   e003a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   e003e:	4598      	cmp	r8, r3
   e0040:	f340 8438 	ble.w	e08b4 <__ieee754_pow+0x94c>
   e0044:	4b41      	ldr	r3, [pc, #260]	; (e014c <__ieee754_pow+0x1e4>)
   e0046:	429c      	cmp	r4, r3
   e0048:	dd62      	ble.n	e0110 <__ieee754_pow+0x1a8>
   e004a:	f1b9 0f00 	cmp.w	r9, #0
   e004e:	dd62      	ble.n	e0116 <__ieee754_pow+0x1ae>
   e0050:	a335      	add	r3, pc, #212	; (adr r3, e0128 <__ieee754_pow+0x1c0>)
   e0052:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0056:	4610      	mov	r0, r2
   e0058:	4619      	mov	r1, r3
   e005a:	f002 fe41 	bl	e2ce0 <__aeabi_dmul>
   e005e:	ec41 0b10 	vmov	d0, r0, r1
   e0062:	e7ca      	b.n	dfffa <__ieee754_pow+0x92>
   e0064:	b124      	cbz	r4, e0070 <__ieee754_pow+0x108>
   e0066:	4b35      	ldr	r3, [pc, #212]	; (e013c <__ieee754_pow+0x1d4>)
   e0068:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   e006c:	429a      	cmp	r2, r3
   e006e:	d1da      	bne.n	e0026 <__ieee754_pow+0xbe>
   e0070:	f1b9 0f00 	cmp.w	r9, #0
   e0074:	f2c0 83cb 	blt.w	e080e <__ieee754_pow+0x8a6>
   e0078:	2d00      	cmp	r5, #0
   e007a:	f2c0 8374 	blt.w	e0766 <__ieee754_pow+0x7fe>
   e007e:	ec41 0b10 	vmov	d0, r0, r1
   e0082:	e7ba      	b.n	dfffa <__ieee754_pow+0x92>
   e0084:	f1b9 0f00 	cmp.w	r9, #0
   e0088:	f2c0 847a 	blt.w	e0980 <__ieee754_pow+0xa18>
   e008c:	ec47 6b10 	vmov	d0, r6, r7
   e0090:	e7b3      	b.n	dfffa <__ieee754_pow+0x92>
   e0092:	f1be 0f00 	cmp.w	lr, #0
   e0096:	d084      	beq.n	dffa2 <__ieee754_pow+0x3a>
   e0098:	e7a6      	b.n	dffe8 <__ieee754_pow+0x80>
   e009a:	4b2d      	ldr	r3, [pc, #180]	; (e0150 <__ieee754_pow+0x1e8>)
   e009c:	4598      	cmp	r8, r3
   e009e:	dc29      	bgt.n	e00f4 <__ieee754_pow+0x18c>
   e00a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   e00a4:	4598      	cmp	r8, r3
   e00a6:	dd82      	ble.n	dffae <__ieee754_pow+0x46>
   e00a8:	ea4f 5328 	mov.w	r3, r8, asr #20
   e00ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e00b0:	2b14      	cmp	r3, #20
   e00b2:	f340 847f 	ble.w	e09b4 <__ieee754_pow+0xa4c>
   e00b6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   e00ba:	fa2e f203 	lsr.w	r2, lr, r3
   e00be:	fa02 f303 	lsl.w	r3, r2, r3
   e00c2:	459e      	cmp	lr, r3
   e00c4:	f47f af73 	bne.w	dffae <__ieee754_pow+0x46>
   e00c8:	f002 0201 	and.w	r2, r2, #1
   e00cc:	f1c2 0b02 	rsb	fp, r2, #2
   e00d0:	e76f      	b.n	dffb2 <__ieee754_pow+0x4a>
   e00d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   e00d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   e00da:	ea53 030a 	orrs.w	r3, r3, sl
   e00de:	d08a      	beq.n	dfff6 <__ieee754_pow+0x8e>
   e00e0:	4b1a      	ldr	r3, [pc, #104]	; (e014c <__ieee754_pow+0x1e4>)
   e00e2:	429c      	cmp	r4, r3
   e00e4:	f340 8385 	ble.w	e07f2 <__ieee754_pow+0x88a>
   e00e8:	f1b9 0f00 	cmp.w	r9, #0
   e00ec:	db13      	blt.n	e0116 <__ieee754_pow+0x1ae>
   e00ee:	ed9d 0b00 	vldr	d0, [sp]
   e00f2:	e782      	b.n	dfffa <__ieee754_pow+0x92>
   e00f4:	f04f 0b02 	mov.w	fp, #2
   e00f8:	e75b      	b.n	dffb2 <__ieee754_pow+0x4a>
   e00fa:	4632      	mov	r2, r6
   e00fc:	463b      	mov	r3, r7
   e00fe:	4610      	mov	r0, r2
   e0100:	4619      	mov	r1, r3
   e0102:	f002 fc39 	bl	e2978 <__aeabi_dsub>
   e0106:	4602      	mov	r2, r0
   e0108:	460b      	mov	r3, r1
   e010a:	f002 ff13 	bl	e2f34 <__aeabi_ddiv>
   e010e:	e7b6      	b.n	e007e <__ieee754_pow+0x116>
   e0110:	f1b9 0f00 	cmp.w	r9, #0
   e0114:	db9c      	blt.n	e0050 <__ieee754_pow+0xe8>
   e0116:	ed9f 0b06 	vldr	d0, [pc, #24]	; e0130 <__ieee754_pow+0x1c8>
   e011a:	e76e      	b.n	dfffa <__ieee754_pow+0x92>
   e011c:	f3af 8000 	nop.w
   e0120:	00000000 	.word	0x00000000
   e0124:	3ff00000 	.word	0x3ff00000
   e0128:	8800759c 	.word	0x8800759c
   e012c:	7e37e43c 	.word	0x7e37e43c
	...
   e0138:	7ff00000 	.word	0x7ff00000
   e013c:	3ff00000 	.word	0x3ff00000
   e0140:	3fe00000 	.word	0x3fe00000
   e0144:	000e8130 	.word	0x000e8130
   e0148:	41e00000 	.word	0x41e00000
   e014c:	3fefffff 	.word	0x3fefffff
   e0150:	433fffff 	.word	0x433fffff
   e0154:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   e0158:	f04f 0200 	mov.w	r2, #0
   e015c:	da05      	bge.n	e016a <__ieee754_pow+0x202>
   e015e:	4bd6      	ldr	r3, [pc, #856]	; (e04b8 <__ieee754_pow+0x550>)
   e0160:	f002 fdbe 	bl	e2ce0 <__aeabi_dmul>
   e0164:	f06f 0234 	mvn.w	r2, #52	; 0x34
   e0168:	460c      	mov	r4, r1
   e016a:	1523      	asrs	r3, r4, #20
   e016c:	4ed3      	ldr	r6, [pc, #844]	; (e04bc <__ieee754_pow+0x554>)
   e016e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   e0172:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e0176:	4413      	add	r3, r2
   e0178:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   e017c:	42b4      	cmp	r4, r6
   e017e:	461a      	mov	r2, r3
   e0180:	930d      	str	r3, [sp, #52]	; 0x34
   e0182:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   e0186:	f340 8349 	ble.w	e081c <__ieee754_pow+0x8b4>
   e018a:	4bcd      	ldr	r3, [pc, #820]	; (e04c0 <__ieee754_pow+0x558>)
   e018c:	429c      	cmp	r4, r3
   e018e:	f340 842d 	ble.w	e09ec <__ieee754_pow+0xa84>
   e0192:	ed9f 7bb3 	vldr	d7, [pc, #716]	; e0460 <__ieee754_pow+0x4f8>
   e0196:	ed8d 7b08 	vstr	d7, [sp, #32]
   e019a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e019e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; e0468 <__ieee754_pow+0x500>
   e01a2:	4613      	mov	r3, r2
   e01a4:	ed8d 7b06 	vstr	d7, [sp, #24]
   e01a8:	3301      	adds	r3, #1
   e01aa:	930d      	str	r3, [sp, #52]	; 0x34
   e01ac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   e01b0:	f04f 0800 	mov.w	r8, #0
   e01b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e01b8:	4629      	mov	r1, r5
   e01ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e01be:	f002 fbdb 	bl	e2978 <__aeabi_dsub>
   e01c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e01c6:	4606      	mov	r6, r0
   e01c8:	460f      	mov	r7, r1
   e01ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e01ce:	f002 fbd5 	bl	e297c <__adddf3>
   e01d2:	4602      	mov	r2, r0
   e01d4:	460b      	mov	r3, r1
   e01d6:	2000      	movs	r0, #0
   e01d8:	49ba      	ldr	r1, [pc, #744]	; (e04c4 <__ieee754_pow+0x55c>)
   e01da:	f002 feab 	bl	e2f34 <__aeabi_ddiv>
   e01de:	4603      	mov	r3, r0
   e01e0:	460c      	mov	r4, r1
   e01e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   e01e6:	4602      	mov	r2, r0
   e01e8:	460b      	mov	r3, r1
   e01ea:	4630      	mov	r0, r6
   e01ec:	4639      	mov	r1, r7
   e01ee:	f002 fd77 	bl	e2ce0 <__aeabi_dmul>
   e01f2:	106b      	asrs	r3, r5, #1
   e01f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   e01f8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   e01fc:	eb03 0508 	add.w	r5, r3, r8
   e0200:	460a      	mov	r2, r1
   e0202:	2300      	movs	r3, #0
   e0204:	4601      	mov	r1, r0
   e0206:	e9cd 1202 	strd	r1, r2, [sp, #8]
   e020a:	9302      	str	r3, [sp, #8]
   e020c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   e0210:	2400      	movs	r4, #0
   e0212:	e9cd 1204 	strd	r1, r2, [sp, #16]
   e0216:	462b      	mov	r3, r5
   e0218:	4622      	mov	r2, r4
   e021a:	4640      	mov	r0, r8
   e021c:	4649      	mov	r1, r9
   e021e:	f002 fd5f 	bl	e2ce0 <__aeabi_dmul>
   e0222:	4602      	mov	r2, r0
   e0224:	460b      	mov	r3, r1
   e0226:	4630      	mov	r0, r6
   e0228:	4639      	mov	r1, r7
   e022a:	f002 fba5 	bl	e2978 <__aeabi_dsub>
   e022e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0232:	4606      	mov	r6, r0
   e0234:	460f      	mov	r7, r1
   e0236:	4620      	mov	r0, r4
   e0238:	4629      	mov	r1, r5
   e023a:	f002 fb9d 	bl	e2978 <__aeabi_dsub>
   e023e:	4602      	mov	r2, r0
   e0240:	460b      	mov	r3, r1
   e0242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0246:	f002 fb97 	bl	e2978 <__aeabi_dsub>
   e024a:	4642      	mov	r2, r8
   e024c:	464b      	mov	r3, r9
   e024e:	f002 fd47 	bl	e2ce0 <__aeabi_dmul>
   e0252:	4602      	mov	r2, r0
   e0254:	460b      	mov	r3, r1
   e0256:	4630      	mov	r0, r6
   e0258:	4639      	mov	r1, r7
   e025a:	f002 fb8d 	bl	e2978 <__aeabi_dsub>
   e025e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   e0262:	f002 fd3d 	bl	e2ce0 <__aeabi_dmul>
   e0266:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e026a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e026e:	4622      	mov	r2, r4
   e0270:	462b      	mov	r3, r5
   e0272:	4620      	mov	r0, r4
   e0274:	4629      	mov	r1, r5
   e0276:	f002 fd33 	bl	e2ce0 <__aeabi_dmul>
   e027a:	a37d      	add	r3, pc, #500	; (adr r3, e0470 <__ieee754_pow+0x508>)
   e027c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0280:	4604      	mov	r4, r0
   e0282:	460d      	mov	r5, r1
   e0284:	f002 fd2c 	bl	e2ce0 <__aeabi_dmul>
   e0288:	a37b      	add	r3, pc, #492	; (adr r3, e0478 <__ieee754_pow+0x510>)
   e028a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e028e:	f002 fb75 	bl	e297c <__adddf3>
   e0292:	4622      	mov	r2, r4
   e0294:	462b      	mov	r3, r5
   e0296:	f002 fd23 	bl	e2ce0 <__aeabi_dmul>
   e029a:	a379      	add	r3, pc, #484	; (adr r3, e0480 <__ieee754_pow+0x518>)
   e029c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02a0:	f002 fb6c 	bl	e297c <__adddf3>
   e02a4:	4622      	mov	r2, r4
   e02a6:	462b      	mov	r3, r5
   e02a8:	f002 fd1a 	bl	e2ce0 <__aeabi_dmul>
   e02ac:	a376      	add	r3, pc, #472	; (adr r3, e0488 <__ieee754_pow+0x520>)
   e02ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02b2:	f002 fb63 	bl	e297c <__adddf3>
   e02b6:	4622      	mov	r2, r4
   e02b8:	462b      	mov	r3, r5
   e02ba:	f002 fd11 	bl	e2ce0 <__aeabi_dmul>
   e02be:	a374      	add	r3, pc, #464	; (adr r3, e0490 <__ieee754_pow+0x528>)
   e02c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02c4:	f002 fb5a 	bl	e297c <__adddf3>
   e02c8:	4622      	mov	r2, r4
   e02ca:	462b      	mov	r3, r5
   e02cc:	f002 fd08 	bl	e2ce0 <__aeabi_dmul>
   e02d0:	a371      	add	r3, pc, #452	; (adr r3, e0498 <__ieee754_pow+0x530>)
   e02d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02d6:	f002 fb51 	bl	e297c <__adddf3>
   e02da:	4622      	mov	r2, r4
   e02dc:	4606      	mov	r6, r0
   e02de:	460f      	mov	r7, r1
   e02e0:	462b      	mov	r3, r5
   e02e2:	4620      	mov	r0, r4
   e02e4:	4629      	mov	r1, r5
   e02e6:	f002 fcfb 	bl	e2ce0 <__aeabi_dmul>
   e02ea:	4602      	mov	r2, r0
   e02ec:	460b      	mov	r3, r1
   e02ee:	4630      	mov	r0, r6
   e02f0:	4639      	mov	r1, r7
   e02f2:	f002 fcf5 	bl	e2ce0 <__aeabi_dmul>
   e02f6:	4642      	mov	r2, r8
   e02f8:	4604      	mov	r4, r0
   e02fa:	460d      	mov	r5, r1
   e02fc:	464b      	mov	r3, r9
   e02fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0302:	f002 fb3b 	bl	e297c <__adddf3>
   e0306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e030a:	f002 fce9 	bl	e2ce0 <__aeabi_dmul>
   e030e:	4622      	mov	r2, r4
   e0310:	462b      	mov	r3, r5
   e0312:	f002 fb33 	bl	e297c <__adddf3>
   e0316:	4642      	mov	r2, r8
   e0318:	4606      	mov	r6, r0
   e031a:	460f      	mov	r7, r1
   e031c:	464b      	mov	r3, r9
   e031e:	4640      	mov	r0, r8
   e0320:	4649      	mov	r1, r9
   e0322:	f002 fcdd 	bl	e2ce0 <__aeabi_dmul>
   e0326:	2200      	movs	r2, #0
   e0328:	4b67      	ldr	r3, [pc, #412]	; (e04c8 <__ieee754_pow+0x560>)
   e032a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e032e:	f002 fb25 	bl	e297c <__adddf3>
   e0332:	4632      	mov	r2, r6
   e0334:	463b      	mov	r3, r7
   e0336:	f002 fb21 	bl	e297c <__adddf3>
   e033a:	9802      	ldr	r0, [sp, #8]
   e033c:	460d      	mov	r5, r1
   e033e:	4604      	mov	r4, r0
   e0340:	4622      	mov	r2, r4
   e0342:	462b      	mov	r3, r5
   e0344:	4640      	mov	r0, r8
   e0346:	4649      	mov	r1, r9
   e0348:	f002 fcca 	bl	e2ce0 <__aeabi_dmul>
   e034c:	2200      	movs	r2, #0
   e034e:	4680      	mov	r8, r0
   e0350:	4689      	mov	r9, r1
   e0352:	4b5d      	ldr	r3, [pc, #372]	; (e04c8 <__ieee754_pow+0x560>)
   e0354:	4620      	mov	r0, r4
   e0356:	4629      	mov	r1, r5
   e0358:	f002 fb0e 	bl	e2978 <__aeabi_dsub>
   e035c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e0360:	f002 fb0a 	bl	e2978 <__aeabi_dsub>
   e0364:	4602      	mov	r2, r0
   e0366:	460b      	mov	r3, r1
   e0368:	4630      	mov	r0, r6
   e036a:	4639      	mov	r1, r7
   e036c:	f002 fb04 	bl	e2978 <__aeabi_dsub>
   e0370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e0374:	f002 fcb4 	bl	e2ce0 <__aeabi_dmul>
   e0378:	4622      	mov	r2, r4
   e037a:	4606      	mov	r6, r0
   e037c:	460f      	mov	r7, r1
   e037e:	462b      	mov	r3, r5
   e0380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0384:	f002 fcac 	bl	e2ce0 <__aeabi_dmul>
   e0388:	4602      	mov	r2, r0
   e038a:	460b      	mov	r3, r1
   e038c:	4630      	mov	r0, r6
   e038e:	4639      	mov	r1, r7
   e0390:	f002 faf4 	bl	e297c <__adddf3>
   e0394:	4606      	mov	r6, r0
   e0396:	460f      	mov	r7, r1
   e0398:	4602      	mov	r2, r0
   e039a:	460b      	mov	r3, r1
   e039c:	4640      	mov	r0, r8
   e039e:	4649      	mov	r1, r9
   e03a0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e03a4:	f002 faea 	bl	e297c <__adddf3>
   e03a8:	9802      	ldr	r0, [sp, #8]
   e03aa:	a33d      	add	r3, pc, #244	; (adr r3, e04a0 <__ieee754_pow+0x538>)
   e03ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03b0:	4604      	mov	r4, r0
   e03b2:	460d      	mov	r5, r1
   e03b4:	f002 fc94 	bl	e2ce0 <__aeabi_dmul>
   e03b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e03bc:	4680      	mov	r8, r0
   e03be:	4689      	mov	r9, r1
   e03c0:	4620      	mov	r0, r4
   e03c2:	4629      	mov	r1, r5
   e03c4:	f002 fad8 	bl	e2978 <__aeabi_dsub>
   e03c8:	4602      	mov	r2, r0
   e03ca:	460b      	mov	r3, r1
   e03cc:	4630      	mov	r0, r6
   e03ce:	4639      	mov	r1, r7
   e03d0:	f002 fad2 	bl	e2978 <__aeabi_dsub>
   e03d4:	a334      	add	r3, pc, #208	; (adr r3, e04a8 <__ieee754_pow+0x540>)
   e03d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03da:	f002 fc81 	bl	e2ce0 <__aeabi_dmul>
   e03de:	a334      	add	r3, pc, #208	; (adr r3, e04b0 <__ieee754_pow+0x548>)
   e03e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03e4:	4606      	mov	r6, r0
   e03e6:	460f      	mov	r7, r1
   e03e8:	4620      	mov	r0, r4
   e03ea:	4629      	mov	r1, r5
   e03ec:	f002 fc78 	bl	e2ce0 <__aeabi_dmul>
   e03f0:	4602      	mov	r2, r0
   e03f2:	460b      	mov	r3, r1
   e03f4:	4630      	mov	r0, r6
   e03f6:	4639      	mov	r1, r7
   e03f8:	f002 fac0 	bl	e297c <__adddf3>
   e03fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   e0400:	f002 fabc 	bl	e297c <__adddf3>
   e0404:	4606      	mov	r6, r0
   e0406:	980d      	ldr	r0, [sp, #52]	; 0x34
   e0408:	460f      	mov	r7, r1
   e040a:	f002 fc03 	bl	e2c14 <__aeabi_i2d>
   e040e:	4632      	mov	r2, r6
   e0410:	4604      	mov	r4, r0
   e0412:	460d      	mov	r5, r1
   e0414:	463b      	mov	r3, r7
   e0416:	4640      	mov	r0, r8
   e0418:	4649      	mov	r1, r9
   e041a:	f002 faaf 	bl	e297c <__adddf3>
   e041e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0422:	f002 faab 	bl	e297c <__adddf3>
   e0426:	4622      	mov	r2, r4
   e0428:	462b      	mov	r3, r5
   e042a:	f002 faa7 	bl	e297c <__adddf3>
   e042e:	9802      	ldr	r0, [sp, #8]
   e0430:	4622      	mov	r2, r4
   e0432:	462b      	mov	r3, r5
   e0434:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0438:	f002 fa9e 	bl	e2978 <__aeabi_dsub>
   e043c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0440:	f002 fa9a 	bl	e2978 <__aeabi_dsub>
   e0444:	4642      	mov	r2, r8
   e0446:	464b      	mov	r3, r9
   e0448:	f002 fa96 	bl	e2978 <__aeabi_dsub>
   e044c:	4602      	mov	r2, r0
   e044e:	460b      	mov	r3, r1
   e0450:	4630      	mov	r0, r6
   e0452:	4639      	mov	r1, r7
   e0454:	f002 fa90 	bl	e2978 <__aeabi_dsub>
   e0458:	4680      	mov	r8, r0
   e045a:	4689      	mov	r9, r1
   e045c:	e036      	b.n	e04cc <__ieee754_pow+0x564>
   e045e:	bf00      	nop
	...
   e046c:	3ff00000 	.word	0x3ff00000
   e0470:	4a454eef 	.word	0x4a454eef
   e0474:	3fca7e28 	.word	0x3fca7e28
   e0478:	93c9db65 	.word	0x93c9db65
   e047c:	3fcd864a 	.word	0x3fcd864a
   e0480:	a91d4101 	.word	0xa91d4101
   e0484:	3fd17460 	.word	0x3fd17460
   e0488:	518f264d 	.word	0x518f264d
   e048c:	3fd55555 	.word	0x3fd55555
   e0490:	db6fabff 	.word	0xdb6fabff
   e0494:	3fdb6db6 	.word	0x3fdb6db6
   e0498:	33333303 	.word	0x33333303
   e049c:	3fe33333 	.word	0x3fe33333
   e04a0:	e0000000 	.word	0xe0000000
   e04a4:	3feec709 	.word	0x3feec709
   e04a8:	dc3a03fd 	.word	0xdc3a03fd
   e04ac:	3feec709 	.word	0x3feec709
   e04b0:	145b01f5 	.word	0x145b01f5
   e04b4:	be3e2fe0 	.word	0xbe3e2fe0
   e04b8:	43400000 	.word	0x43400000
   e04bc:	0003988e 	.word	0x0003988e
   e04c0:	000bb679 	.word	0x000bb679
   e04c4:	3ff00000 	.word	0x3ff00000
   e04c8:	40080000 	.word	0x40080000
   e04cc:	f10b 33ff 	add.w	r3, fp, #4294967295
   e04d0:	ea53 030a 	orrs.w	r3, r3, sl
   e04d4:	f000 8188 	beq.w	e07e8 <__ieee754_pow+0x880>
   e04d8:	ed9f 7bd7 	vldr	d7, [pc, #860]	; e0838 <__ieee754_pow+0x8d0>
   e04dc:	ed8d 7b06 	vstr	d7, [sp, #24]
   e04e0:	e9dd ab00 	ldrd	sl, fp, [sp]
   e04e4:	4653      	mov	r3, sl
   e04e6:	465c      	mov	r4, fp
   e04e8:	e9cd 3400 	strd	r3, r4, [sp]
   e04ec:	2300      	movs	r3, #0
   e04ee:	9300      	str	r3, [sp, #0]
   e04f0:	e9dd 4500 	ldrd	r4, r5, [sp]
   e04f4:	4650      	mov	r0, sl
   e04f6:	4622      	mov	r2, r4
   e04f8:	462b      	mov	r3, r5
   e04fa:	4659      	mov	r1, fp
   e04fc:	f002 fa3c 	bl	e2978 <__aeabi_dsub>
   e0500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0504:	f002 fbec 	bl	e2ce0 <__aeabi_dmul>
   e0508:	4652      	mov	r2, sl
   e050a:	4606      	mov	r6, r0
   e050c:	460f      	mov	r7, r1
   e050e:	465b      	mov	r3, fp
   e0510:	4640      	mov	r0, r8
   e0512:	4649      	mov	r1, r9
   e0514:	f002 fbe4 	bl	e2ce0 <__aeabi_dmul>
   e0518:	4602      	mov	r2, r0
   e051a:	460b      	mov	r3, r1
   e051c:	4630      	mov	r0, r6
   e051e:	4639      	mov	r1, r7
   e0520:	f002 fa2c 	bl	e297c <__adddf3>
   e0524:	4622      	mov	r2, r4
   e0526:	4680      	mov	r8, r0
   e0528:	4689      	mov	r9, r1
   e052a:	462b      	mov	r3, r5
   e052c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0530:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0534:	f002 fbd4 	bl	e2ce0 <__aeabi_dmul>
   e0538:	460b      	mov	r3, r1
   e053a:	4602      	mov	r2, r0
   e053c:	4606      	mov	r6, r0
   e053e:	460f      	mov	r7, r1
   e0540:	4640      	mov	r0, r8
   e0542:	4649      	mov	r1, r9
   e0544:	f002 fa1a 	bl	e297c <__adddf3>
   e0548:	4bd5      	ldr	r3, [pc, #852]	; (e08a0 <__ieee754_pow+0x938>)
   e054a:	4299      	cmp	r1, r3
   e054c:	4604      	mov	r4, r0
   e054e:	460d      	mov	r5, r1
   e0550:	468a      	mov	sl, r1
   e0552:	f340 8123 	ble.w	e079c <__ieee754_pow+0x834>
   e0556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   e055a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   e055e:	4303      	orrs	r3, r0
   e0560:	f040 8218 	bne.w	e0994 <__ieee754_pow+0xa2c>
   e0564:	a3b6      	add	r3, pc, #728	; (adr r3, e0840 <__ieee754_pow+0x8d8>)
   e0566:	e9d3 2300 	ldrd	r2, r3, [r3]
   e056a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e056e:	f002 fa05 	bl	e297c <__adddf3>
   e0572:	4632      	mov	r2, r6
   e0574:	4680      	mov	r8, r0
   e0576:	4689      	mov	r9, r1
   e0578:	463b      	mov	r3, r7
   e057a:	4620      	mov	r0, r4
   e057c:	4629      	mov	r1, r5
   e057e:	f002 f9fb 	bl	e2978 <__aeabi_dsub>
   e0582:	4602      	mov	r2, r0
   e0584:	460b      	mov	r3, r1
   e0586:	4640      	mov	r0, r8
   e0588:	4649      	mov	r1, r9
   e058a:	f002 fe39 	bl	e3200 <__aeabi_dcmpgt>
   e058e:	2800      	cmp	r0, #0
   e0590:	f040 8200 	bne.w	e0994 <__ieee754_pow+0xa2c>
   e0594:	46a8      	mov	r8, r5
   e0596:	ea4f 5328 	mov.w	r3, r8, asr #20
   e059a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   e059e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   e05a2:	fa42 f303 	asr.w	r3, r2, r3
   e05a6:	4453      	add	r3, sl
   e05a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   e05ac:	4dbd      	ldr	r5, [pc, #756]	; (e08a4 <__ieee754_pow+0x93c>)
   e05ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   e05b2:	4115      	asrs	r5, r2
   e05b4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   e05b8:	2000      	movs	r0, #0
   e05ba:	f1c2 0414 	rsb	r4, r2, #20
   e05be:	ea23 0105 	bic.w	r1, r3, r5
   e05c2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   e05c6:	f1ba 0f00 	cmp.w	sl, #0
   e05ca:	4602      	mov	r2, r0
   e05cc:	460b      	mov	r3, r1
   e05ce:	fa4b fb04 	asr.w	fp, fp, r4
   e05d2:	4630      	mov	r0, r6
   e05d4:	4639      	mov	r1, r7
   e05d6:	bfb8      	it	lt
   e05d8:	f1cb 0b00 	rsblt	fp, fp, #0
   e05dc:	f002 f9cc 	bl	e2978 <__aeabi_dsub>
   e05e0:	4602      	mov	r2, r0
   e05e2:	460b      	mov	r3, r1
   e05e4:	4606      	mov	r6, r0
   e05e6:	460f      	mov	r7, r1
   e05e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e05ec:	f002 f9c6 	bl	e297c <__adddf3>
   e05f0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   e05f4:	2400      	movs	r4, #0
   e05f6:	a394      	add	r3, pc, #592	; (adr r3, e0848 <__ieee754_pow+0x8e0>)
   e05f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e05fc:	4620      	mov	r0, r4
   e05fe:	460d      	mov	r5, r1
   e0600:	f002 fb6e 	bl	e2ce0 <__aeabi_dmul>
   e0604:	4632      	mov	r2, r6
   e0606:	4680      	mov	r8, r0
   e0608:	4689      	mov	r9, r1
   e060a:	463b      	mov	r3, r7
   e060c:	4620      	mov	r0, r4
   e060e:	4629      	mov	r1, r5
   e0610:	f002 f9b2 	bl	e2978 <__aeabi_dsub>
   e0614:	4602      	mov	r2, r0
   e0616:	460b      	mov	r3, r1
   e0618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e061c:	f002 f9ac 	bl	e2978 <__aeabi_dsub>
   e0620:	a38b      	add	r3, pc, #556	; (adr r3, e0850 <__ieee754_pow+0x8e8>)
   e0622:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0626:	f002 fb5b 	bl	e2ce0 <__aeabi_dmul>
   e062a:	a38b      	add	r3, pc, #556	; (adr r3, e0858 <__ieee754_pow+0x8f0>)
   e062c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0630:	4606      	mov	r6, r0
   e0632:	460f      	mov	r7, r1
   e0634:	4620      	mov	r0, r4
   e0636:	4629      	mov	r1, r5
   e0638:	f002 fb52 	bl	e2ce0 <__aeabi_dmul>
   e063c:	4602      	mov	r2, r0
   e063e:	460b      	mov	r3, r1
   e0640:	4630      	mov	r0, r6
   e0642:	4639      	mov	r1, r7
   e0644:	f002 f99a 	bl	e297c <__adddf3>
   e0648:	4606      	mov	r6, r0
   e064a:	460f      	mov	r7, r1
   e064c:	4602      	mov	r2, r0
   e064e:	460b      	mov	r3, r1
   e0650:	4640      	mov	r0, r8
   e0652:	4649      	mov	r1, r9
   e0654:	f002 f992 	bl	e297c <__adddf3>
   e0658:	4642      	mov	r2, r8
   e065a:	464b      	mov	r3, r9
   e065c:	4604      	mov	r4, r0
   e065e:	460d      	mov	r5, r1
   e0660:	f002 f98a 	bl	e2978 <__aeabi_dsub>
   e0664:	4602      	mov	r2, r0
   e0666:	460b      	mov	r3, r1
   e0668:	4630      	mov	r0, r6
   e066a:	4639      	mov	r1, r7
   e066c:	f002 f984 	bl	e2978 <__aeabi_dsub>
   e0670:	4622      	mov	r2, r4
   e0672:	4680      	mov	r8, r0
   e0674:	4689      	mov	r9, r1
   e0676:	462b      	mov	r3, r5
   e0678:	4620      	mov	r0, r4
   e067a:	4629      	mov	r1, r5
   e067c:	f002 fb30 	bl	e2ce0 <__aeabi_dmul>
   e0680:	a377      	add	r3, pc, #476	; (adr r3, e0860 <__ieee754_pow+0x8f8>)
   e0682:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0686:	4606      	mov	r6, r0
   e0688:	460f      	mov	r7, r1
   e068a:	f002 fb29 	bl	e2ce0 <__aeabi_dmul>
   e068e:	a376      	add	r3, pc, #472	; (adr r3, e0868 <__ieee754_pow+0x900>)
   e0690:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0694:	f002 f970 	bl	e2978 <__aeabi_dsub>
   e0698:	4632      	mov	r2, r6
   e069a:	463b      	mov	r3, r7
   e069c:	f002 fb20 	bl	e2ce0 <__aeabi_dmul>
   e06a0:	a373      	add	r3, pc, #460	; (adr r3, e0870 <__ieee754_pow+0x908>)
   e06a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e06a6:	f002 f969 	bl	e297c <__adddf3>
   e06aa:	4632      	mov	r2, r6
   e06ac:	463b      	mov	r3, r7
   e06ae:	f002 fb17 	bl	e2ce0 <__aeabi_dmul>
   e06b2:	a371      	add	r3, pc, #452	; (adr r3, e0878 <__ieee754_pow+0x910>)
   e06b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e06b8:	f002 f95e 	bl	e2978 <__aeabi_dsub>
   e06bc:	4632      	mov	r2, r6
   e06be:	463b      	mov	r3, r7
   e06c0:	f002 fb0e 	bl	e2ce0 <__aeabi_dmul>
   e06c4:	a36e      	add	r3, pc, #440	; (adr r3, e0880 <__ieee754_pow+0x918>)
   e06c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e06ca:	f002 f957 	bl	e297c <__adddf3>
   e06ce:	4632      	mov	r2, r6
   e06d0:	463b      	mov	r3, r7
   e06d2:	f002 fb05 	bl	e2ce0 <__aeabi_dmul>
   e06d6:	4602      	mov	r2, r0
   e06d8:	460b      	mov	r3, r1
   e06da:	4620      	mov	r0, r4
   e06dc:	4629      	mov	r1, r5
   e06de:	f002 f94b 	bl	e2978 <__aeabi_dsub>
   e06e2:	4606      	mov	r6, r0
   e06e4:	460f      	mov	r7, r1
   e06e6:	4602      	mov	r2, r0
   e06e8:	460b      	mov	r3, r1
   e06ea:	4620      	mov	r0, r4
   e06ec:	4629      	mov	r1, r5
   e06ee:	f002 faf7 	bl	e2ce0 <__aeabi_dmul>
   e06f2:	2200      	movs	r2, #0
   e06f4:	e9cd 0100 	strd	r0, r1, [sp]
   e06f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e06fc:	4630      	mov	r0, r6
   e06fe:	4639      	mov	r1, r7
   e0700:	f002 f93a 	bl	e2978 <__aeabi_dsub>
   e0704:	4602      	mov	r2, r0
   e0706:	460b      	mov	r3, r1
   e0708:	e9dd 0100 	ldrd	r0, r1, [sp]
   e070c:	f002 fc12 	bl	e2f34 <__aeabi_ddiv>
   e0710:	4642      	mov	r2, r8
   e0712:	4606      	mov	r6, r0
   e0714:	460f      	mov	r7, r1
   e0716:	464b      	mov	r3, r9
   e0718:	4620      	mov	r0, r4
   e071a:	4629      	mov	r1, r5
   e071c:	f002 fae0 	bl	e2ce0 <__aeabi_dmul>
   e0720:	4642      	mov	r2, r8
   e0722:	464b      	mov	r3, r9
   e0724:	f002 f92a 	bl	e297c <__adddf3>
   e0728:	4602      	mov	r2, r0
   e072a:	460b      	mov	r3, r1
   e072c:	4630      	mov	r0, r6
   e072e:	4639      	mov	r1, r7
   e0730:	f002 f922 	bl	e2978 <__aeabi_dsub>
   e0734:	4622      	mov	r2, r4
   e0736:	462b      	mov	r3, r5
   e0738:	f002 f91e 	bl	e2978 <__aeabi_dsub>
   e073c:	4602      	mov	r2, r0
   e073e:	460b      	mov	r3, r1
   e0740:	2000      	movs	r0, #0
   e0742:	4959      	ldr	r1, [pc, #356]	; (e08a8 <__ieee754_pow+0x940>)
   e0744:	f002 f918 	bl	e2978 <__aeabi_dsub>
   e0748:	448a      	add	sl, r1
   e074a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   e074e:	4602      	mov	r2, r0
   e0750:	460b      	mov	r3, r1
   e0752:	f2c0 815b 	blt.w	e0a0c <__ieee754_pow+0xaa4>
   e0756:	4651      	mov	r1, sl
   e0758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e075c:	f002 fac0 	bl	e2ce0 <__aeabi_dmul>
   e0760:	ec41 0b10 	vmov	d0, r0, r1
   e0764:	e449      	b.n	dfffa <__ieee754_pow+0x92>
   e0766:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e076a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e076e:	ea54 030b 	orrs.w	r3, r4, fp
   e0772:	f000 8137 	beq.w	e09e4 <__ieee754_pow+0xa7c>
   e0776:	f1bb 0f01 	cmp.w	fp, #1
   e077a:	f47f ac80 	bne.w	e007e <__ieee754_pow+0x116>
   e077e:	4602      	mov	r2, r0
   e0780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0784:	ec43 2b10 	vmov	d0, r2, r3
   e0788:	e437      	b.n	dfffa <__ieee754_pow+0x92>
   e078a:	4632      	mov	r2, r6
   e078c:	463b      	mov	r3, r7
   e078e:	4630      	mov	r0, r6
   e0790:	4639      	mov	r1, r7
   e0792:	f002 faa5 	bl	e2ce0 <__aeabi_dmul>
   e0796:	ec41 0b10 	vmov	d0, r0, r1
   e079a:	e42e      	b.n	dfffa <__ieee754_pow+0x92>
   e079c:	4b43      	ldr	r3, [pc, #268]	; (e08ac <__ieee754_pow+0x944>)
   e079e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e07a2:	4598      	cmp	r8, r3
   e07a4:	f340 8115 	ble.w	e09d2 <__ieee754_pow+0xa6a>
   e07a8:	4b41      	ldr	r3, [pc, #260]	; (e08b0 <__ieee754_pow+0x948>)
   e07aa:	440b      	add	r3, r1
   e07ac:	4303      	orrs	r3, r0
   e07ae:	d10c      	bne.n	e07ca <__ieee754_pow+0x862>
   e07b0:	4632      	mov	r2, r6
   e07b2:	463b      	mov	r3, r7
   e07b4:	f002 f8e0 	bl	e2978 <__aeabi_dsub>
   e07b8:	4602      	mov	r2, r0
   e07ba:	460b      	mov	r3, r1
   e07bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e07c0:	f002 fd0a 	bl	e31d8 <__aeabi_dcmple>
   e07c4:	2800      	cmp	r0, #0
   e07c6:	f43f aee6 	beq.w	e0596 <__ieee754_pow+0x62e>
   e07ca:	a32f      	add	r3, pc, #188	; (adr r3, e0888 <__ieee754_pow+0x920>)
   e07cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e07d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e07d4:	f002 fa84 	bl	e2ce0 <__aeabi_dmul>
   e07d8:	a32b      	add	r3, pc, #172	; (adr r3, e0888 <__ieee754_pow+0x920>)
   e07da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e07de:	f002 fa7f 	bl	e2ce0 <__aeabi_dmul>
   e07e2:	ec41 0b10 	vmov	d0, r0, r1
   e07e6:	e408      	b.n	dfffa <__ieee754_pow+0x92>
   e07e8:	ed9f 7b29 	vldr	d7, [pc, #164]	; e0890 <__ieee754_pow+0x928>
   e07ec:	ed8d 7b06 	vstr	d7, [sp, #24]
   e07f0:	e676      	b.n	e04e0 <__ieee754_pow+0x578>
   e07f2:	f1b9 0f00 	cmp.w	r9, #0
   e07f6:	f6bf ac8e 	bge.w	e0116 <__ieee754_pow+0x1ae>
   e07fa:	e9dd 3400 	ldrd	r3, r4, [sp]
   e07fe:	ee00 3a10 	vmov	s0, r3
   e0802:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   e0806:	ee00 3a90 	vmov	s1, r3
   e080a:	f7ff bbf6 	b.w	dfffa <__ieee754_pow+0x92>
   e080e:	4602      	mov	r2, r0
   e0810:	460b      	mov	r3, r1
   e0812:	2000      	movs	r0, #0
   e0814:	4924      	ldr	r1, [pc, #144]	; (e08a8 <__ieee754_pow+0x940>)
   e0816:	f002 fb8d 	bl	e2f34 <__aeabi_ddiv>
   e081a:	e42d      	b.n	e0078 <__ieee754_pow+0x110>
   e081c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; e0898 <__ieee754_pow+0x930>
   e0820:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0824:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e0828:	ed9f 7b03 	vldr	d7, [pc, #12]	; e0838 <__ieee754_pow+0x8d0>
   e082c:	f04f 0800 	mov.w	r8, #0
   e0830:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0834:	e4be      	b.n	e01b4 <__ieee754_pow+0x24c>
   e0836:	bf00      	nop
   e0838:	00000000 	.word	0x00000000
   e083c:	3ff00000 	.word	0x3ff00000
   e0840:	652b82fe 	.word	0x652b82fe
   e0844:	3c971547 	.word	0x3c971547
   e0848:	00000000 	.word	0x00000000
   e084c:	3fe62e43 	.word	0x3fe62e43
   e0850:	fefa39ef 	.word	0xfefa39ef
   e0854:	3fe62e42 	.word	0x3fe62e42
   e0858:	0ca86c39 	.word	0x0ca86c39
   e085c:	be205c61 	.word	0xbe205c61
   e0860:	72bea4d0 	.word	0x72bea4d0
   e0864:	3e663769 	.word	0x3e663769
   e0868:	c5d26bf1 	.word	0xc5d26bf1
   e086c:	3ebbbd41 	.word	0x3ebbbd41
   e0870:	af25de2c 	.word	0xaf25de2c
   e0874:	3f11566a 	.word	0x3f11566a
   e0878:	16bebd93 	.word	0x16bebd93
   e087c:	3f66c16c 	.word	0x3f66c16c
   e0880:	5555553e 	.word	0x5555553e
   e0884:	3fc55555 	.word	0x3fc55555
   e0888:	c2f8f359 	.word	0xc2f8f359
   e088c:	01a56e1f 	.word	0x01a56e1f
   e0890:	00000000 	.word	0x00000000
   e0894:	bff00000 	.word	0xbff00000
	...
   e08a0:	408fffff 	.word	0x408fffff
   e08a4:	000fffff 	.word	0x000fffff
   e08a8:	3ff00000 	.word	0x3ff00000
   e08ac:	4090cbff 	.word	0x4090cbff
   e08b0:	3f6f3400 	.word	0x3f6f3400
   e08b4:	4b6c      	ldr	r3, [pc, #432]	; (e0a68 <__ieee754_pow+0xb00>)
   e08b6:	429c      	cmp	r4, r3
   e08b8:	f77f ac2a 	ble.w	e0110 <__ieee754_pow+0x1a8>
   e08bc:	4b6b      	ldr	r3, [pc, #428]	; (e0a6c <__ieee754_pow+0xb04>)
   e08be:	429c      	cmp	r4, r3
   e08c0:	f73f abc3 	bgt.w	e004a <__ieee754_pow+0xe2>
   e08c4:	2200      	movs	r2, #0
   e08c6:	4b69      	ldr	r3, [pc, #420]	; (e0a6c <__ieee754_pow+0xb04>)
   e08c8:	f002 f856 	bl	e2978 <__aeabi_dsub>
   e08cc:	a356      	add	r3, pc, #344	; (adr r3, e0a28 <__ieee754_pow+0xac0>)
   e08ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08d2:	4604      	mov	r4, r0
   e08d4:	460d      	mov	r5, r1
   e08d6:	f002 fa03 	bl	e2ce0 <__aeabi_dmul>
   e08da:	a355      	add	r3, pc, #340	; (adr r3, e0a30 <__ieee754_pow+0xac8>)
   e08dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08e0:	4680      	mov	r8, r0
   e08e2:	4689      	mov	r9, r1
   e08e4:	4620      	mov	r0, r4
   e08e6:	4629      	mov	r1, r5
   e08e8:	f002 f9fa 	bl	e2ce0 <__aeabi_dmul>
   e08ec:	2200      	movs	r2, #0
   e08ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e08f2:	4b5f      	ldr	r3, [pc, #380]	; (e0a70 <__ieee754_pow+0xb08>)
   e08f4:	4620      	mov	r0, r4
   e08f6:	4629      	mov	r1, r5
   e08f8:	f002 f9f2 	bl	e2ce0 <__aeabi_dmul>
   e08fc:	4602      	mov	r2, r0
   e08fe:	460b      	mov	r3, r1
   e0900:	a14d      	add	r1, pc, #308	; (adr r1, e0a38 <__ieee754_pow+0xad0>)
   e0902:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0906:	f002 f837 	bl	e2978 <__aeabi_dsub>
   e090a:	4622      	mov	r2, r4
   e090c:	462b      	mov	r3, r5
   e090e:	f002 f9e7 	bl	e2ce0 <__aeabi_dmul>
   e0912:	4602      	mov	r2, r0
   e0914:	460b      	mov	r3, r1
   e0916:	2000      	movs	r0, #0
   e0918:	4956      	ldr	r1, [pc, #344]	; (e0a74 <__ieee754_pow+0xb0c>)
   e091a:	f002 f82d 	bl	e2978 <__aeabi_dsub>
   e091e:	4622      	mov	r2, r4
   e0920:	462b      	mov	r3, r5
   e0922:	4606      	mov	r6, r0
   e0924:	460f      	mov	r7, r1
   e0926:	4620      	mov	r0, r4
   e0928:	4629      	mov	r1, r5
   e092a:	f002 f9d9 	bl	e2ce0 <__aeabi_dmul>
   e092e:	4602      	mov	r2, r0
   e0930:	460b      	mov	r3, r1
   e0932:	4630      	mov	r0, r6
   e0934:	4639      	mov	r1, r7
   e0936:	f002 f9d3 	bl	e2ce0 <__aeabi_dmul>
   e093a:	a341      	add	r3, pc, #260	; (adr r3, e0a40 <__ieee754_pow+0xad8>)
   e093c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0940:	f002 f9ce 	bl	e2ce0 <__aeabi_dmul>
   e0944:	4602      	mov	r2, r0
   e0946:	460b      	mov	r3, r1
   e0948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e094c:	f002 f814 	bl	e2978 <__aeabi_dsub>
   e0950:	4602      	mov	r2, r0
   e0952:	460b      	mov	r3, r1
   e0954:	4604      	mov	r4, r0
   e0956:	460d      	mov	r5, r1
   e0958:	4640      	mov	r0, r8
   e095a:	4649      	mov	r1, r9
   e095c:	f002 f80e 	bl	e297c <__adddf3>
   e0960:	4642      	mov	r2, r8
   e0962:	464b      	mov	r3, r9
   e0964:	2000      	movs	r0, #0
   e0966:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e096a:	f002 f805 	bl	e2978 <__aeabi_dsub>
   e096e:	4602      	mov	r2, r0
   e0970:	460b      	mov	r3, r1
   e0972:	4620      	mov	r0, r4
   e0974:	4629      	mov	r1, r5
   e0976:	f001 ffff 	bl	e2978 <__aeabi_dsub>
   e097a:	4680      	mov	r8, r0
   e097c:	4689      	mov	r9, r1
   e097e:	e5a5      	b.n	e04cc <__ieee754_pow+0x564>
   e0980:	4632      	mov	r2, r6
   e0982:	463b      	mov	r3, r7
   e0984:	2000      	movs	r0, #0
   e0986:	4939      	ldr	r1, [pc, #228]	; (e0a6c <__ieee754_pow+0xb04>)
   e0988:	f002 fad4 	bl	e2f34 <__aeabi_ddiv>
   e098c:	ec41 0b10 	vmov	d0, r0, r1
   e0990:	f7ff bb33 	b.w	dfffa <__ieee754_pow+0x92>
   e0994:	a32c      	add	r3, pc, #176	; (adr r3, e0a48 <__ieee754_pow+0xae0>)
   e0996:	e9d3 2300 	ldrd	r2, r3, [r3]
   e099a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e099e:	f002 f99f 	bl	e2ce0 <__aeabi_dmul>
   e09a2:	a329      	add	r3, pc, #164	; (adr r3, e0a48 <__ieee754_pow+0xae0>)
   e09a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e09a8:	f002 f99a 	bl	e2ce0 <__aeabi_dmul>
   e09ac:	ec41 0b10 	vmov	d0, r0, r1
   e09b0:	f7ff bb23 	b.w	dfffa <__ieee754_pow+0x92>
   e09b4:	f1be 0f00 	cmp.w	lr, #0
   e09b8:	f47f ab2a 	bne.w	e0010 <__ieee754_pow+0xa8>
   e09bc:	f1c3 0314 	rsb	r3, r3, #20
   e09c0:	fa48 f203 	asr.w	r2, r8, r3
   e09c4:	fa02 f303 	lsl.w	r3, r2, r3
   e09c8:	4598      	cmp	r8, r3
   e09ca:	d027      	beq.n	e0a1c <__ieee754_pow+0xab4>
   e09cc:	46f3      	mov	fp, lr
   e09ce:	f7ff baf7 	b.w	dffc0 <__ieee754_pow+0x58>
   e09d2:	4b28      	ldr	r3, [pc, #160]	; (e0a74 <__ieee754_pow+0xb0c>)
   e09d4:	4598      	cmp	r8, r3
   e09d6:	f73f adde 	bgt.w	e0596 <__ieee754_pow+0x62e>
   e09da:	e9dd 3400 	ldrd	r3, r4, [sp]
   e09de:	469a      	mov	sl, r3
   e09e0:	469b      	mov	fp, r3
   e09e2:	e607      	b.n	e05f4 <__ieee754_pow+0x68c>
   e09e4:	4602      	mov	r2, r0
   e09e6:	460b      	mov	r3, r1
   e09e8:	f7ff bb89 	b.w	e00fe <__ieee754_pow+0x196>
   e09ec:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0a50 <__ieee754_pow+0xae8>
   e09f0:	ed8d 7b08 	vstr	d7, [sp, #32]
   e09f4:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0a58 <__ieee754_pow+0xaf0>
   e09f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e09fc:	ed9f 7b18 	vldr	d7, [pc, #96]	; e0a60 <__ieee754_pow+0xaf8>
   e0a00:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   e0a04:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0a08:	f7ff bbd4 	b.w	e01b4 <__ieee754_pow+0x24c>
   e0a0c:	4658      	mov	r0, fp
   e0a0e:	ec43 2b10 	vmov	d0, r2, r3
   e0a12:	f001 ff19 	bl	e2848 <scalbn>
   e0a16:	ec51 0b10 	vmov	r0, r1, d0
   e0a1a:	e69d      	b.n	e0758 <__ieee754_pow+0x7f0>
   e0a1c:	f002 0201 	and.w	r2, r2, #1
   e0a20:	f1c2 0b02 	rsb	fp, r2, #2
   e0a24:	f7ff bacc 	b.w	dffc0 <__ieee754_pow+0x58>
   e0a28:	60000000 	.word	0x60000000
   e0a2c:	3ff71547 	.word	0x3ff71547
   e0a30:	f85ddf44 	.word	0xf85ddf44
   e0a34:	3e54ae0b 	.word	0x3e54ae0b
   e0a38:	55555555 	.word	0x55555555
   e0a3c:	3fd55555 	.word	0x3fd55555
   e0a40:	652b82fe 	.word	0x652b82fe
   e0a44:	3ff71547 	.word	0x3ff71547
   e0a48:	8800759c 	.word	0x8800759c
   e0a4c:	7e37e43c 	.word	0x7e37e43c
   e0a50:	40000000 	.word	0x40000000
   e0a54:	3fe2b803 	.word	0x3fe2b803
   e0a58:	43cfd006 	.word	0x43cfd006
   e0a5c:	3e4cfdeb 	.word	0x3e4cfdeb
   e0a60:	00000000 	.word	0x00000000
   e0a64:	3ff80000 	.word	0x3ff80000
   e0a68:	3feffffe 	.word	0x3feffffe
   e0a6c:	3ff00000 	.word	0x3ff00000
   e0a70:	3fd00000 	.word	0x3fd00000
   e0a74:	3fe00000 	.word	0x3fe00000

000e0a78 <__ieee754_rem_pio2>:
   e0a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0a7c:	ec53 2b10 	vmov	r2, r3, d0
   e0a80:	4997      	ldr	r1, [pc, #604]	; (e0ce0 <__ieee754_rem_pio2+0x268>)
   e0a82:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   e0a86:	458b      	cmp	fp, r1
   e0a88:	b08f      	sub	sp, #60	; 0x3c
   e0a8a:	f340 8087 	ble.w	e0b9c <__ieee754_rem_pio2+0x124>
   e0a8e:	4995      	ldr	r1, [pc, #596]	; (e0ce4 <__ieee754_rem_pio2+0x26c>)
   e0a90:	458b      	cmp	fp, r1
   e0a92:	461c      	mov	r4, r3
   e0a94:	4682      	mov	sl, r0
   e0a96:	dc29      	bgt.n	e0aec <__ieee754_rem_pio2+0x74>
   e0a98:	2c00      	cmp	r4, #0
   e0a9a:	4619      	mov	r1, r3
   e0a9c:	ee10 0a10 	vmov	r0, s0
   e0aa0:	a385      	add	r3, pc, #532	; (adr r3, e0cb8 <__ieee754_rem_pio2+0x240>)
   e0aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0aa6:	f340 81a5 	ble.w	e0df4 <__ieee754_rem_pio2+0x37c>
   e0aaa:	f001 ff65 	bl	e2978 <__aeabi_dsub>
   e0aae:	4b8e      	ldr	r3, [pc, #568]	; (e0ce8 <__ieee754_rem_pio2+0x270>)
   e0ab0:	459b      	cmp	fp, r3
   e0ab2:	4604      	mov	r4, r0
   e0ab4:	460d      	mov	r5, r1
   e0ab6:	f000 8087 	beq.w	e0bc8 <__ieee754_rem_pio2+0x150>
   e0aba:	a381      	add	r3, pc, #516	; (adr r3, e0cc0 <__ieee754_rem_pio2+0x248>)
   e0abc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ac0:	f001 ff5a 	bl	e2978 <__aeabi_dsub>
   e0ac4:	4602      	mov	r2, r0
   e0ac6:	460b      	mov	r3, r1
   e0ac8:	e9ca 2300 	strd	r2, r3, [sl]
   e0acc:	4620      	mov	r0, r4
   e0ace:	4629      	mov	r1, r5
   e0ad0:	f001 ff52 	bl	e2978 <__aeabi_dsub>
   e0ad4:	a37a      	add	r3, pc, #488	; (adr r3, e0cc0 <__ieee754_rem_pio2+0x248>)
   e0ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ada:	f001 ff4d 	bl	e2978 <__aeabi_dsub>
   e0ade:	2501      	movs	r5, #1
   e0ae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0ae4:	4628      	mov	r0, r5
   e0ae6:	b00f      	add	sp, #60	; 0x3c
   e0ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0aec:	497f      	ldr	r1, [pc, #508]	; (e0cec <__ieee754_rem_pio2+0x274>)
   e0aee:	458b      	cmp	fp, r1
   e0af0:	f340 8087 	ble.w	e0c02 <__ieee754_rem_pio2+0x18a>
   e0af4:	497e      	ldr	r1, [pc, #504]	; (e0cf0 <__ieee754_rem_pio2+0x278>)
   e0af6:	458b      	cmp	fp, r1
   e0af8:	dc5b      	bgt.n	e0bb2 <__ieee754_rem_pio2+0x13a>
   e0afa:	ea4f 552b 	mov.w	r5, fp, asr #20
   e0afe:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   e0b02:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   e0b06:	4610      	mov	r0, r2
   e0b08:	4639      	mov	r1, r7
   e0b0a:	ee10 6a10 	vmov	r6, s0
   e0b0e:	f002 fb97 	bl	e3240 <__aeabi_d2iz>
   e0b12:	f002 f87f 	bl	e2c14 <__aeabi_i2d>
   e0b16:	4680      	mov	r8, r0
   e0b18:	4689      	mov	r9, r1
   e0b1a:	4642      	mov	r2, r8
   e0b1c:	464b      	mov	r3, r9
   e0b1e:	4630      	mov	r0, r6
   e0b20:	4639      	mov	r1, r7
   e0b22:	e9cd 8908 	strd	r8, r9, [sp, #32]
   e0b26:	f001 ff27 	bl	e2978 <__aeabi_dsub>
   e0b2a:	2200      	movs	r2, #0
   e0b2c:	4b71      	ldr	r3, [pc, #452]	; (e0cf4 <__ieee754_rem_pio2+0x27c>)
   e0b2e:	f002 f8d7 	bl	e2ce0 <__aeabi_dmul>
   e0b32:	4689      	mov	r9, r1
   e0b34:	4680      	mov	r8, r0
   e0b36:	f002 fb83 	bl	e3240 <__aeabi_d2iz>
   e0b3a:	f002 f86b 	bl	e2c14 <__aeabi_i2d>
   e0b3e:	4606      	mov	r6, r0
   e0b40:	460f      	mov	r7, r1
   e0b42:	4632      	mov	r2, r6
   e0b44:	463b      	mov	r3, r7
   e0b46:	4640      	mov	r0, r8
   e0b48:	4649      	mov	r1, r9
   e0b4a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   e0b4e:	f001 ff13 	bl	e2978 <__aeabi_dsub>
   e0b52:	2200      	movs	r2, #0
   e0b54:	4b67      	ldr	r3, [pc, #412]	; (e0cf4 <__ieee754_rem_pio2+0x27c>)
   e0b56:	f002 f8c3 	bl	e2ce0 <__aeabi_dmul>
   e0b5a:	2200      	movs	r2, #0
   e0b5c:	2300      	movs	r3, #0
   e0b5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e0b62:	f002 fb25 	bl	e31b0 <__aeabi_dcmpeq>
   e0b66:	2800      	cmp	r0, #0
   e0b68:	f000 8170 	beq.w	e0e4c <__ieee754_rem_pio2+0x3d4>
   e0b6c:	2300      	movs	r3, #0
   e0b6e:	4630      	mov	r0, r6
   e0b70:	4639      	mov	r1, r7
   e0b72:	2200      	movs	r2, #0
   e0b74:	f002 fb1c 	bl	e31b0 <__aeabi_dcmpeq>
   e0b78:	2800      	cmp	r0, #0
   e0b7a:	bf14      	ite	ne
   e0b7c:	2301      	movne	r3, #1
   e0b7e:	2302      	moveq	r3, #2
   e0b80:	4a5d      	ldr	r2, [pc, #372]	; (e0cf8 <__ieee754_rem_pio2+0x280>)
   e0b82:	9201      	str	r2, [sp, #4]
   e0b84:	2102      	movs	r1, #2
   e0b86:	9100      	str	r1, [sp, #0]
   e0b88:	462a      	mov	r2, r5
   e0b8a:	4651      	mov	r1, sl
   e0b8c:	a808      	add	r0, sp, #32
   e0b8e:	f000 fc93 	bl	e14b8 <__kernel_rem_pio2>
   e0b92:	2c00      	cmp	r4, #0
   e0b94:	f2c0 814c 	blt.w	e0e30 <__ieee754_rem_pio2+0x3b8>
   e0b98:	4605      	mov	r5, r0
   e0b9a:	e006      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0b9c:	ed80 0b00 	vstr	d0, [r0]
   e0ba0:	2500      	movs	r5, #0
   e0ba2:	2400      	movs	r4, #0
   e0ba4:	e9c0 4502 	strd	r4, r5, [r0, #8]
   e0ba8:	2500      	movs	r5, #0
   e0baa:	4628      	mov	r0, r5
   e0bac:	b00f      	add	sp, #60	; 0x3c
   e0bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0bb2:	ee10 0a10 	vmov	r0, s0
   e0bb6:	4619      	mov	r1, r3
   e0bb8:	f001 fede 	bl	e2978 <__aeabi_dsub>
   e0bbc:	2500      	movs	r5, #0
   e0bbe:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0bc2:	e9ca 0100 	strd	r0, r1, [sl]
   e0bc6:	e7f0      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0bc8:	a33f      	add	r3, pc, #252	; (adr r3, e0cc8 <__ieee754_rem_pio2+0x250>)
   e0bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0bce:	f001 fed3 	bl	e2978 <__aeabi_dsub>
   e0bd2:	a33f      	add	r3, pc, #252	; (adr r3, e0cd0 <__ieee754_rem_pio2+0x258>)
   e0bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0bd8:	460d      	mov	r5, r1
   e0bda:	4604      	mov	r4, r0
   e0bdc:	f001 fecc 	bl	e2978 <__aeabi_dsub>
   e0be0:	4602      	mov	r2, r0
   e0be2:	460b      	mov	r3, r1
   e0be4:	e9ca 2300 	strd	r2, r3, [sl]
   e0be8:	4629      	mov	r1, r5
   e0bea:	4620      	mov	r0, r4
   e0bec:	f001 fec4 	bl	e2978 <__aeabi_dsub>
   e0bf0:	a337      	add	r3, pc, #220	; (adr r3, e0cd0 <__ieee754_rem_pio2+0x258>)
   e0bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0bf6:	f001 febf 	bl	e2978 <__aeabi_dsub>
   e0bfa:	2501      	movs	r5, #1
   e0bfc:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0c00:	e7d3      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0c02:	f7fc fe65 	bl	dd8d0 <fabs>
   e0c06:	ec57 6b10 	vmov	r6, r7, d0
   e0c0a:	ee10 0a10 	vmov	r0, s0
   e0c0e:	a332      	add	r3, pc, #200	; (adr r3, e0cd8 <__ieee754_rem_pio2+0x260>)
   e0c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c14:	4639      	mov	r1, r7
   e0c16:	f002 f863 	bl	e2ce0 <__aeabi_dmul>
   e0c1a:	2200      	movs	r2, #0
   e0c1c:	4b37      	ldr	r3, [pc, #220]	; (e0cfc <__ieee754_rem_pio2+0x284>)
   e0c1e:	f001 fead 	bl	e297c <__adddf3>
   e0c22:	f002 fb0d 	bl	e3240 <__aeabi_d2iz>
   e0c26:	4605      	mov	r5, r0
   e0c28:	f001 fff4 	bl	e2c14 <__aeabi_i2d>
   e0c2c:	a322      	add	r3, pc, #136	; (adr r3, e0cb8 <__ieee754_rem_pio2+0x240>)
   e0c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c32:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e0c36:	f002 f853 	bl	e2ce0 <__aeabi_dmul>
   e0c3a:	4602      	mov	r2, r0
   e0c3c:	460b      	mov	r3, r1
   e0c3e:	4630      	mov	r0, r6
   e0c40:	4639      	mov	r1, r7
   e0c42:	f001 fe99 	bl	e2978 <__aeabi_dsub>
   e0c46:	a31e      	add	r3, pc, #120	; (adr r3, e0cc0 <__ieee754_rem_pio2+0x248>)
   e0c48:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c4c:	4680      	mov	r8, r0
   e0c4e:	4689      	mov	r9, r1
   e0c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0c54:	f002 f844 	bl	e2ce0 <__aeabi_dmul>
   e0c58:	2d1f      	cmp	r5, #31
   e0c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0c5e:	dc51      	bgt.n	e0d04 <__ieee754_rem_pio2+0x28c>
   e0c60:	4b27      	ldr	r3, [pc, #156]	; (e0d00 <__ieee754_rem_pio2+0x288>)
   e0c62:	1e6a      	subs	r2, r5, #1
   e0c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e0c68:	459b      	cmp	fp, r3
   e0c6a:	d04b      	beq.n	e0d04 <__ieee754_rem_pio2+0x28c>
   e0c6c:	4602      	mov	r2, r0
   e0c6e:	460b      	mov	r3, r1
   e0c70:	4640      	mov	r0, r8
   e0c72:	4649      	mov	r1, r9
   e0c74:	f001 fe80 	bl	e2978 <__aeabi_dsub>
   e0c78:	4606      	mov	r6, r0
   e0c7a:	460f      	mov	r7, r1
   e0c7c:	e9ca 6700 	strd	r6, r7, [sl]
   e0c80:	4632      	mov	r2, r6
   e0c82:	463b      	mov	r3, r7
   e0c84:	4640      	mov	r0, r8
   e0c86:	4649      	mov	r1, r9
   e0c88:	f001 fe76 	bl	e2978 <__aeabi_dsub>
   e0c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0c90:	f001 fe72 	bl	e2978 <__aeabi_dsub>
   e0c94:	2c00      	cmp	r4, #0
   e0c96:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0c9a:	da86      	bge.n	e0baa <__ieee754_rem_pio2+0x132>
   e0c9c:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   e0ca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0ca4:	426d      	negs	r5, r5
   e0ca6:	f8ca 6000 	str.w	r6, [sl]
   e0caa:	f8ca 4004 	str.w	r4, [sl, #4]
   e0cae:	f8ca 0008 	str.w	r0, [sl, #8]
   e0cb2:	f8ca 300c 	str.w	r3, [sl, #12]
   e0cb6:	e778      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0cb8:	54400000 	.word	0x54400000
   e0cbc:	3ff921fb 	.word	0x3ff921fb
   e0cc0:	1a626331 	.word	0x1a626331
   e0cc4:	3dd0b461 	.word	0x3dd0b461
   e0cc8:	1a600000 	.word	0x1a600000
   e0ccc:	3dd0b461 	.word	0x3dd0b461
   e0cd0:	2e037073 	.word	0x2e037073
   e0cd4:	3ba3198a 	.word	0x3ba3198a
   e0cd8:	6dc9c883 	.word	0x6dc9c883
   e0cdc:	3fe45f30 	.word	0x3fe45f30
   e0ce0:	3fe921fb 	.word	0x3fe921fb
   e0ce4:	4002d97b 	.word	0x4002d97b
   e0ce8:	3ff921fb 	.word	0x3ff921fb
   e0cec:	413921fb 	.word	0x413921fb
   e0cf0:	7fefffff 	.word	0x7fefffff
   e0cf4:	41700000 	.word	0x41700000
   e0cf8:	000e8218 	.word	0x000e8218
   e0cfc:	3fe00000 	.word	0x3fe00000
   e0d00:	000e8198 	.word	0x000e8198
   e0d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0d08:	4640      	mov	r0, r8
   e0d0a:	4649      	mov	r1, r9
   e0d0c:	f001 fe34 	bl	e2978 <__aeabi_dsub>
   e0d10:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   e0d14:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0d18:	ebc3 030b 	rsb	r3, r3, fp
   e0d1c:	4606      	mov	r6, r0
   e0d1e:	460f      	mov	r7, r1
   e0d20:	2b10      	cmp	r3, #16
   e0d22:	e9ca 6700 	strd	r6, r7, [sl]
   e0d26:	ddab      	ble.n	e0c80 <__ieee754_rem_pio2+0x208>
   e0d28:	a35d      	add	r3, pc, #372	; (adr r3, e0ea0 <__ieee754_rem_pio2+0x428>)
   e0d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0d32:	f001 ffd5 	bl	e2ce0 <__aeabi_dmul>
   e0d36:	4606      	mov	r6, r0
   e0d38:	460f      	mov	r7, r1
   e0d3a:	4602      	mov	r2, r0
   e0d3c:	460b      	mov	r3, r1
   e0d3e:	4640      	mov	r0, r8
   e0d40:	4649      	mov	r1, r9
   e0d42:	f001 fe19 	bl	e2978 <__aeabi_dsub>
   e0d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0d4a:	4602      	mov	r2, r0
   e0d4c:	460b      	mov	r3, r1
   e0d4e:	4640      	mov	r0, r8
   e0d50:	4649      	mov	r1, r9
   e0d52:	f001 fe11 	bl	e2978 <__aeabi_dsub>
   e0d56:	4632      	mov	r2, r6
   e0d58:	463b      	mov	r3, r7
   e0d5a:	f001 fe0d 	bl	e2978 <__aeabi_dsub>
   e0d5e:	a352      	add	r3, pc, #328	; (adr r3, e0ea8 <__ieee754_rem_pio2+0x430>)
   e0d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d64:	4606      	mov	r6, r0
   e0d66:	460f      	mov	r7, r1
   e0d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0d6c:	f001 ffb8 	bl	e2ce0 <__aeabi_dmul>
   e0d70:	4632      	mov	r2, r6
   e0d72:	463b      	mov	r3, r7
   e0d74:	f001 fe00 	bl	e2978 <__aeabi_dsub>
   e0d78:	460b      	mov	r3, r1
   e0d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0d7e:	4602      	mov	r2, r0
   e0d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0d84:	f001 fdf8 	bl	e2978 <__aeabi_dsub>
   e0d88:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0d8c:	ebc3 0b0b 	rsb	fp, r3, fp
   e0d90:	4606      	mov	r6, r0
   e0d92:	460f      	mov	r7, r1
   e0d94:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   e0d98:	e9ca 6700 	strd	r6, r7, [sl]
   e0d9c:	dd76      	ble.n	e0e8c <__ieee754_rem_pio2+0x414>
   e0d9e:	a345      	add	r3, pc, #276	; (adr r3, e0eb4 <__ieee754_rem_pio2+0x43c>)
   e0da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0da8:	f001 ff9a 	bl	e2ce0 <__aeabi_dmul>
   e0dac:	4606      	mov	r6, r0
   e0dae:	460f      	mov	r7, r1
   e0db0:	4602      	mov	r2, r0
   e0db2:	460b      	mov	r3, r1
   e0db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0db8:	f001 fdde 	bl	e2978 <__aeabi_dsub>
   e0dbc:	4602      	mov	r2, r0
   e0dbe:	460b      	mov	r3, r1
   e0dc0:	4680      	mov	r8, r0
   e0dc2:	4689      	mov	r9, r1
   e0dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0dc8:	f001 fdd6 	bl	e2978 <__aeabi_dsub>
   e0dcc:	4632      	mov	r2, r6
   e0dce:	463b      	mov	r3, r7
   e0dd0:	f001 fdd2 	bl	e2978 <__aeabi_dsub>
   e0dd4:	a339      	add	r3, pc, #228	; (adr r3, e0ebc <__ieee754_rem_pio2+0x444>)
   e0dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dda:	4606      	mov	r6, r0
   e0ddc:	460f      	mov	r7, r1
   e0dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0de2:	f001 ff7d 	bl	e2ce0 <__aeabi_dmul>
   e0de6:	4632      	mov	r2, r6
   e0de8:	463b      	mov	r3, r7
   e0dea:	f001 fdc5 	bl	e2978 <__aeabi_dsub>
   e0dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0df2:	e73b      	b.n	e0c6c <__ieee754_rem_pio2+0x1f4>
   e0df4:	f001 fdc2 	bl	e297c <__adddf3>
   e0df8:	4b2d      	ldr	r3, [pc, #180]	; (e0eb0 <__ieee754_rem_pio2+0x438>)
   e0dfa:	459b      	cmp	fp, r3
   e0dfc:	4604      	mov	r4, r0
   e0dfe:	460d      	mov	r5, r1
   e0e00:	d026      	beq.n	e0e50 <__ieee754_rem_pio2+0x3d8>
   e0e02:	a325      	add	r3, pc, #148	; (adr r3, e0e98 <__ieee754_rem_pio2+0x420>)
   e0e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e08:	f001 fdb8 	bl	e297c <__adddf3>
   e0e0c:	4602      	mov	r2, r0
   e0e0e:	460b      	mov	r3, r1
   e0e10:	e9ca 2300 	strd	r2, r3, [sl]
   e0e14:	4629      	mov	r1, r5
   e0e16:	4620      	mov	r0, r4
   e0e18:	f001 fdae 	bl	e2978 <__aeabi_dsub>
   e0e1c:	a31e      	add	r3, pc, #120	; (adr r3, e0e98 <__ieee754_rem_pio2+0x420>)
   e0e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e22:	f001 fdab 	bl	e297c <__adddf3>
   e0e26:	f04f 35ff 	mov.w	r5, #4294967295
   e0e2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0e2e:	e6bc      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0e30:	f8da 2004 	ldr.w	r2, [sl, #4]
   e0e34:	f8da 300c 	ldr.w	r3, [sl, #12]
   e0e38:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e0e3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e0e40:	4245      	negs	r5, r0
   e0e42:	f8ca 2004 	str.w	r2, [sl, #4]
   e0e46:	f8ca 300c 	str.w	r3, [sl, #12]
   e0e4a:	e6ae      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0e4c:	2303      	movs	r3, #3
   e0e4e:	e697      	b.n	e0b80 <__ieee754_rem_pio2+0x108>
   e0e50:	a313      	add	r3, pc, #76	; (adr r3, e0ea0 <__ieee754_rem_pio2+0x428>)
   e0e52:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e56:	f001 fd91 	bl	e297c <__adddf3>
   e0e5a:	a313      	add	r3, pc, #76	; (adr r3, e0ea8 <__ieee754_rem_pio2+0x430>)
   e0e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e60:	460d      	mov	r5, r1
   e0e62:	4604      	mov	r4, r0
   e0e64:	f001 fd8a 	bl	e297c <__adddf3>
   e0e68:	4602      	mov	r2, r0
   e0e6a:	460b      	mov	r3, r1
   e0e6c:	e9ca 2300 	strd	r2, r3, [sl]
   e0e70:	4629      	mov	r1, r5
   e0e72:	4620      	mov	r0, r4
   e0e74:	f001 fd80 	bl	e2978 <__aeabi_dsub>
   e0e78:	a30b      	add	r3, pc, #44	; (adr r3, e0ea8 <__ieee754_rem_pio2+0x430>)
   e0e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e7e:	f001 fd7d 	bl	e297c <__adddf3>
   e0e82:	f04f 35ff 	mov.w	r5, #4294967295
   e0e86:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e0e8a:	e68e      	b.n	e0baa <__ieee754_rem_pio2+0x132>
   e0e8c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   e0e90:	e6f6      	b.n	e0c80 <__ieee754_rem_pio2+0x208>
   e0e92:	bf00      	nop
   e0e94:	f3af 8000 	nop.w
   e0e98:	1a626331 	.word	0x1a626331
   e0e9c:	3dd0b461 	.word	0x3dd0b461
   e0ea0:	1a600000 	.word	0x1a600000
   e0ea4:	3dd0b461 	.word	0x3dd0b461
   e0ea8:	2e037073 	.word	0x2e037073
   e0eac:	3ba3198a 	.word	0x3ba3198a
   e0eb0:	3ff921fb 	.word	0x3ff921fb
   e0eb4:	2e000000 	.word	0x2e000000
   e0eb8:	3ba3198a 	.word	0x3ba3198a
   e0ebc:	252049c1 	.word	0x252049c1
   e0ec0:	397b839a 	.word	0x397b839a
   e0ec4:	00000000 	.word	0x00000000

000e0ec8 <__ieee754_sinh>:
   e0ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0ecc:	ec57 6b10 	vmov	r6, r7, d0
   e0ed0:	4a65      	ldr	r2, [pc, #404]	; (e1068 <__ieee754_sinh+0x1a0>)
   e0ed2:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   e0ed6:	4590      	cmp	r8, r2
   e0ed8:	dc32      	bgt.n	e0f40 <__ieee754_sinh+0x78>
   e0eda:	4b64      	ldr	r3, [pc, #400]	; (e106c <__ieee754_sinh+0x1a4>)
   e0edc:	2f00      	cmp	r7, #0
   e0ede:	bfb4      	ite	lt
   e0ee0:	4d63      	ldrlt	r5, [pc, #396]	; (e1070 <__ieee754_sinh+0x1a8>)
   e0ee2:	4d64      	ldrge	r5, [pc, #400]	; (e1074 <__ieee754_sinh+0x1ac>)
   e0ee4:	4598      	cmp	r8, r3
   e0ee6:	f04f 0400 	mov.w	r4, #0
   e0eea:	dc14      	bgt.n	e0f16 <__ieee754_sinh+0x4e>
   e0eec:	4b62      	ldr	r3, [pc, #392]	; (e1078 <__ieee754_sinh+0x1b0>)
   e0eee:	4598      	cmp	r8, r3
   e0ef0:	f300 8085 	bgt.w	e0ffe <__ieee754_sinh+0x136>
   e0ef4:	a35a      	add	r3, pc, #360	; (adr r3, e1060 <__ieee754_sinh+0x198>)
   e0ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0efa:	ee10 0a10 	vmov	r0, s0
   e0efe:	4639      	mov	r1, r7
   e0f00:	f001 fd3c 	bl	e297c <__adddf3>
   e0f04:	2200      	movs	r2, #0
   e0f06:	4b5d      	ldr	r3, [pc, #372]	; (e107c <__ieee754_sinh+0x1b4>)
   e0f08:	f002 f97a 	bl	e3200 <__aeabi_dcmpgt>
   e0f0c:	b318      	cbz	r0, e0f56 <__ieee754_sinh+0x8e>
   e0f0e:	ec47 6b10 	vmov	d0, r6, r7
   e0f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f16:	4b5a      	ldr	r3, [pc, #360]	; (e1080 <__ieee754_sinh+0x1b8>)
   e0f18:	4598      	cmp	r8, r3
   e0f1a:	f340 8092 	ble.w	e1042 <__ieee754_sinh+0x17a>
   e0f1e:	4b59      	ldr	r3, [pc, #356]	; (e1084 <__ieee754_sinh+0x1bc>)
   e0f20:	4598      	cmp	r8, r3
   e0f22:	dd4d      	ble.n	e0fc0 <__ieee754_sinh+0xf8>
   e0f24:	3301      	adds	r3, #1
   e0f26:	4598      	cmp	r8, r3
   e0f28:	d047      	beq.n	e0fba <__ieee754_sinh+0xf2>
   e0f2a:	4630      	mov	r0, r6
   e0f2c:	4639      	mov	r1, r7
   e0f2e:	a34c      	add	r3, pc, #304	; (adr r3, e1060 <__ieee754_sinh+0x198>)
   e0f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f34:	f001 fed4 	bl	e2ce0 <__aeabi_dmul>
   e0f38:	ec41 0b10 	vmov	d0, r0, r1
   e0f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f40:	ee10 2a10 	vmov	r2, s0
   e0f44:	463b      	mov	r3, r7
   e0f46:	4630      	mov	r0, r6
   e0f48:	4639      	mov	r1, r7
   e0f4a:	f001 fd17 	bl	e297c <__adddf3>
   e0f4e:	ec41 0b10 	vmov	d0, r0, r1
   e0f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f56:	ec47 6b10 	vmov	d0, r6, r7
   e0f5a:	f7fc fcb9 	bl	dd8d0 <fabs>
   e0f5e:	f001 f96b 	bl	e2238 <expm1>
   e0f62:	ec57 6b10 	vmov	r6, r7, d0
   e0f66:	4632      	mov	r2, r6
   e0f68:	463b      	mov	r3, r7
   e0f6a:	4630      	mov	r0, r6
   e0f6c:	4639      	mov	r1, r7
   e0f6e:	f001 fd05 	bl	e297c <__adddf3>
   e0f72:	4632      	mov	r2, r6
   e0f74:	4682      	mov	sl, r0
   e0f76:	468b      	mov	fp, r1
   e0f78:	463b      	mov	r3, r7
   e0f7a:	4630      	mov	r0, r6
   e0f7c:	4639      	mov	r1, r7
   e0f7e:	f001 feaf 	bl	e2ce0 <__aeabi_dmul>
   e0f82:	2200      	movs	r2, #0
   e0f84:	4680      	mov	r8, r0
   e0f86:	4689      	mov	r9, r1
   e0f88:	4b3c      	ldr	r3, [pc, #240]	; (e107c <__ieee754_sinh+0x1b4>)
   e0f8a:	4630      	mov	r0, r6
   e0f8c:	4639      	mov	r1, r7
   e0f8e:	f001 fcf5 	bl	e297c <__adddf3>
   e0f92:	4602      	mov	r2, r0
   e0f94:	460b      	mov	r3, r1
   e0f96:	4640      	mov	r0, r8
   e0f98:	4649      	mov	r1, r9
   e0f9a:	f001 ffcb 	bl	e2f34 <__aeabi_ddiv>
   e0f9e:	4602      	mov	r2, r0
   e0fa0:	460b      	mov	r3, r1
   e0fa2:	4650      	mov	r0, sl
   e0fa4:	4659      	mov	r1, fp
   e0fa6:	f001 fce7 	bl	e2978 <__aeabi_dsub>
   e0faa:	4622      	mov	r2, r4
   e0fac:	462b      	mov	r3, r5
   e0fae:	f001 fe97 	bl	e2ce0 <__aeabi_dmul>
   e0fb2:	ec41 0b10 	vmov	d0, r0, r1
   e0fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0fba:	4b33      	ldr	r3, [pc, #204]	; (e1088 <__ieee754_sinh+0x1c0>)
   e0fbc:	429e      	cmp	r6, r3
   e0fbe:	d8b4      	bhi.n	e0f2a <__ieee754_sinh+0x62>
   e0fc0:	ec47 6b10 	vmov	d0, r6, r7
   e0fc4:	f7fc fc84 	bl	dd8d0 <fabs>
   e0fc8:	2200      	movs	r2, #0
   e0fca:	4b2a      	ldr	r3, [pc, #168]	; (e1074 <__ieee754_sinh+0x1ac>)
   e0fcc:	ec51 0b10 	vmov	r0, r1, d0
   e0fd0:	f001 fe86 	bl	e2ce0 <__aeabi_dmul>
   e0fd4:	ec41 0b10 	vmov	d0, r0, r1
   e0fd8:	f7fe fa52 	bl	df480 <__ieee754_exp>
   e0fdc:	ec57 6b10 	vmov	r6, r7, d0
   e0fe0:	ee10 2a10 	vmov	r2, s0
   e0fe4:	463b      	mov	r3, r7
   e0fe6:	4620      	mov	r0, r4
   e0fe8:	4629      	mov	r1, r5
   e0fea:	f001 fe79 	bl	e2ce0 <__aeabi_dmul>
   e0fee:	4632      	mov	r2, r6
   e0ff0:	463b      	mov	r3, r7
   e0ff2:	f001 fe75 	bl	e2ce0 <__aeabi_dmul>
   e0ff6:	ec41 0b10 	vmov	d0, r0, r1
   e0ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0ffe:	f7fc fc67 	bl	dd8d0 <fabs>
   e1002:	f001 f919 	bl	e2238 <expm1>
   e1006:	4b21      	ldr	r3, [pc, #132]	; (e108c <__ieee754_sinh+0x1c4>)
   e1008:	4598      	cmp	r8, r3
   e100a:	ec57 6b10 	vmov	r6, r7, d0
   e100e:	ddaa      	ble.n	e0f66 <__ieee754_sinh+0x9e>
   e1010:	ee10 0a10 	vmov	r0, s0
   e1014:	2200      	movs	r2, #0
   e1016:	4b19      	ldr	r3, [pc, #100]	; (e107c <__ieee754_sinh+0x1b4>)
   e1018:	4639      	mov	r1, r7
   e101a:	f001 fcaf 	bl	e297c <__adddf3>
   e101e:	4602      	mov	r2, r0
   e1020:	460b      	mov	r3, r1
   e1022:	4630      	mov	r0, r6
   e1024:	4639      	mov	r1, r7
   e1026:	f001 ff85 	bl	e2f34 <__aeabi_ddiv>
   e102a:	4632      	mov	r2, r6
   e102c:	463b      	mov	r3, r7
   e102e:	f001 fca5 	bl	e297c <__adddf3>
   e1032:	4622      	mov	r2, r4
   e1034:	462b      	mov	r3, r5
   e1036:	f001 fe53 	bl	e2ce0 <__aeabi_dmul>
   e103a:	ec41 0b10 	vmov	d0, r0, r1
   e103e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1042:	f7fc fc45 	bl	dd8d0 <fabs>
   e1046:	f7fe fa1b 	bl	df480 <__ieee754_exp>
   e104a:	4620      	mov	r0, r4
   e104c:	ec53 2b10 	vmov	r2, r3, d0
   e1050:	4629      	mov	r1, r5
   e1052:	f001 fe45 	bl	e2ce0 <__aeabi_dmul>
   e1056:	ec41 0b10 	vmov	d0, r0, r1
   e105a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e105e:	bf00      	nop
   e1060:	3cac7433 	.word	0x3cac7433
   e1064:	7fac7b1f 	.word	0x7fac7b1f
   e1068:	7fefffff 	.word	0x7fefffff
   e106c:	4035ffff 	.word	0x4035ffff
   e1070:	bfe00000 	.word	0xbfe00000
   e1074:	3fe00000 	.word	0x3fe00000
   e1078:	3e2fffff 	.word	0x3e2fffff
   e107c:	3ff00000 	.word	0x3ff00000
   e1080:	40862e41 	.word	0x40862e41
   e1084:	408633cd 	.word	0x408633cd
   e1088:	8fb9f87d 	.word	0x8fb9f87d
   e108c:	3fefffff 	.word	0x3fefffff

000e1090 <__ieee754_sqrt>:
   e1090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1094:	4965      	ldr	r1, [pc, #404]	; (e122c <__ieee754_sqrt+0x19c>)
   e1096:	ec55 4b10 	vmov	r4, r5, d0
   e109a:	460e      	mov	r6, r1
   e109c:	4029      	ands	r1, r5
   e109e:	42b1      	cmp	r1, r6
   e10a0:	f000 8097 	beq.w	e11d2 <__ieee754_sqrt+0x142>
   e10a4:	2d00      	cmp	r5, #0
   e10a6:	462b      	mov	r3, r5
   e10a8:	ee10 2a10 	vmov	r2, s0
   e10ac:	dd74      	ble.n	e1198 <__ieee754_sqrt+0x108>
   e10ae:	152f      	asrs	r7, r5, #20
   e10b0:	d07f      	beq.n	e11b2 <__ieee754_sqrt+0x122>
   e10b2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   e10b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e10ba:	07f9      	lsls	r1, r7, #31
   e10bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e10c0:	d465      	bmi.n	e118e <__ieee754_sqrt+0xfe>
   e10c2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   e10c6:	2600      	movs	r6, #0
   e10c8:	440b      	add	r3, r1
   e10ca:	107f      	asrs	r7, r7, #1
   e10cc:	0052      	lsls	r2, r2, #1
   e10ce:	46b6      	mov	lr, r6
   e10d0:	2016      	movs	r0, #22
   e10d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   e10d6:	eb0e 0401 	add.w	r4, lr, r1
   e10da:	429c      	cmp	r4, r3
   e10dc:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   e10e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e10e4:	dc03      	bgt.n	e10ee <__ieee754_sqrt+0x5e>
   e10e6:	1b1b      	subs	r3, r3, r4
   e10e8:	eb04 0e01 	add.w	lr, r4, r1
   e10ec:	440e      	add	r6, r1
   e10ee:	3801      	subs	r0, #1
   e10f0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   e10f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e10f8:	d1ed      	bne.n	e10d6 <__ieee754_sqrt+0x46>
   e10fa:	4684      	mov	ip, r0
   e10fc:	2420      	movs	r4, #32
   e10fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   e1102:	e009      	b.n	e1118 <__ieee754_sqrt+0x88>
   e1104:	d020      	beq.n	e1148 <__ieee754_sqrt+0xb8>
   e1106:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   e110a:	3c01      	subs	r4, #1
   e110c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1110:	442b      	add	r3, r5
   e1112:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1116:	d020      	beq.n	e115a <__ieee754_sqrt+0xca>
   e1118:	459e      	cmp	lr, r3
   e111a:	eb01 050c 	add.w	r5, r1, ip
   e111e:	daf1      	bge.n	e1104 <__ieee754_sqrt+0x74>
   e1120:	2d00      	cmp	r5, #0
   e1122:	eb05 0c01 	add.w	ip, r5, r1
   e1126:	db09      	blt.n	e113c <__ieee754_sqrt+0xac>
   e1128:	46f0      	mov	r8, lr
   e112a:	4295      	cmp	r5, r2
   e112c:	ebce 0303 	rsb	r3, lr, r3
   e1130:	d900      	bls.n	e1134 <__ieee754_sqrt+0xa4>
   e1132:	3b01      	subs	r3, #1
   e1134:	1b52      	subs	r2, r2, r5
   e1136:	4408      	add	r0, r1
   e1138:	46c6      	mov	lr, r8
   e113a:	e7e4      	b.n	e1106 <__ieee754_sqrt+0x76>
   e113c:	f1bc 0f00 	cmp.w	ip, #0
   e1140:	dbf2      	blt.n	e1128 <__ieee754_sqrt+0x98>
   e1142:	f10e 0801 	add.w	r8, lr, #1
   e1146:	e7f0      	b.n	e112a <__ieee754_sqrt+0x9a>
   e1148:	4295      	cmp	r5, r2
   e114a:	d81e      	bhi.n	e118a <__ieee754_sqrt+0xfa>
   e114c:	2d00      	cmp	r5, #0
   e114e:	eb05 0c01 	add.w	ip, r5, r1
   e1152:	db50      	blt.n	e11f6 <__ieee754_sqrt+0x166>
   e1154:	4698      	mov	r8, r3
   e1156:	2300      	movs	r3, #0
   e1158:	e7ec      	b.n	e1134 <__ieee754_sqrt+0xa4>
   e115a:	4313      	orrs	r3, r2
   e115c:	d004      	beq.n	e1168 <__ieee754_sqrt+0xd8>
   e115e:	1c42      	adds	r2, r0, #1
   e1160:	d04d      	beq.n	e11fe <__ieee754_sqrt+0x16e>
   e1162:	f000 0301 	and.w	r3, r0, #1
   e1166:	4418      	add	r0, r3
   e1168:	0840      	lsrs	r0, r0, #1
   e116a:	1071      	asrs	r1, r6, #1
   e116c:	07f3      	lsls	r3, r6, #31
   e116e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   e1172:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   e1176:	bf48      	it	mi
   e1178:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   e117c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   e1180:	4602      	mov	r2, r0
   e1182:	ec43 2b10 	vmov	d0, r2, r3
   e1186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e118a:	4673      	mov	r3, lr
   e118c:	e7bb      	b.n	e1106 <__ieee754_sqrt+0x76>
   e118e:	005b      	lsls	r3, r3, #1
   e1190:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   e1194:	0052      	lsls	r2, r2, #1
   e1196:	e794      	b.n	e10c2 <__ieee754_sqrt+0x32>
   e1198:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e119c:	4321      	orrs	r1, r4
   e119e:	d028      	beq.n	e11f2 <__ieee754_sqrt+0x162>
   e11a0:	bbad      	cbnz	r5, e120e <__ieee754_sqrt+0x17e>
   e11a2:	462f      	mov	r7, r5
   e11a4:	0ad3      	lsrs	r3, r2, #11
   e11a6:	3f15      	subs	r7, #21
   e11a8:	0552      	lsls	r2, r2, #21
   e11aa:	2b00      	cmp	r3, #0
   e11ac:	d0fa      	beq.n	e11a4 <__ieee754_sqrt+0x114>
   e11ae:	02dd      	lsls	r5, r3, #11
   e11b0:	d428      	bmi.n	e1204 <__ieee754_sqrt+0x174>
   e11b2:	2100      	movs	r1, #0
   e11b4:	e000      	b.n	e11b8 <__ieee754_sqrt+0x128>
   e11b6:	4601      	mov	r1, r0
   e11b8:	005b      	lsls	r3, r3, #1
   e11ba:	02dc      	lsls	r4, r3, #11
   e11bc:	f101 0001 	add.w	r0, r1, #1
   e11c0:	d5f9      	bpl.n	e11b6 <__ieee754_sqrt+0x126>
   e11c2:	f1c0 0420 	rsb	r4, r0, #32
   e11c6:	fa22 f404 	lsr.w	r4, r2, r4
   e11ca:	4323      	orrs	r3, r4
   e11cc:	1a7f      	subs	r7, r7, r1
   e11ce:	4082      	lsls	r2, r0
   e11d0:	e76f      	b.n	e10b2 <__ieee754_sqrt+0x22>
   e11d2:	ee10 2a10 	vmov	r2, s0
   e11d6:	462b      	mov	r3, r5
   e11d8:	ee10 0a10 	vmov	r0, s0
   e11dc:	4629      	mov	r1, r5
   e11de:	f001 fd7f 	bl	e2ce0 <__aeabi_dmul>
   e11e2:	4622      	mov	r2, r4
   e11e4:	462b      	mov	r3, r5
   e11e6:	f001 fbc9 	bl	e297c <__adddf3>
   e11ea:	ec41 0b10 	vmov	d0, r0, r1
   e11ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e11f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e11f6:	f1bc 0f00 	cmp.w	ip, #0
   e11fa:	daa2      	bge.n	e1142 <__ieee754_sqrt+0xb2>
   e11fc:	e7aa      	b.n	e1154 <__ieee754_sqrt+0xc4>
   e11fe:	3601      	adds	r6, #1
   e1200:	4620      	mov	r0, r4
   e1202:	e7b2      	b.n	e116a <__ieee754_sqrt+0xda>
   e1204:	2420      	movs	r4, #32
   e1206:	f04f 31ff 	mov.w	r1, #4294967295
   e120a:	2000      	movs	r0, #0
   e120c:	e7db      	b.n	e11c6 <__ieee754_sqrt+0x136>
   e120e:	ee10 2a10 	vmov	r2, s0
   e1212:	462b      	mov	r3, r5
   e1214:	4620      	mov	r0, r4
   e1216:	4629      	mov	r1, r5
   e1218:	f001 fbae 	bl	e2978 <__aeabi_dsub>
   e121c:	4602      	mov	r2, r0
   e121e:	460b      	mov	r3, r1
   e1220:	f001 fe88 	bl	e2f34 <__aeabi_ddiv>
   e1224:	ec41 0b10 	vmov	d0, r0, r1
   e1228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e122c:	7ff00000 	.word	0x7ff00000

000e1230 <__kernel_cos>:
   e1230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1234:	ec57 6b10 	vmov	r6, r7, d0
   e1238:	ed2d 8b02 	vpush	{d8}
   e123c:	eeb0 8a41 	vmov.f32	s16, s2
   e1240:	eef0 8a61 	vmov.f32	s17, s3
   e1244:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e1248:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   e124c:	b083      	sub	sp, #12
   e124e:	da72      	bge.n	e1336 <__kernel_cos+0x106>
   e1250:	ee10 0a10 	vmov	r0, s0
   e1254:	4639      	mov	r1, r7
   e1256:	f001 fff3 	bl	e3240 <__aeabi_d2iz>
   e125a:	2800      	cmp	r0, #0
   e125c:	f000 80f6 	beq.w	e144c <__kernel_cos+0x21c>
   e1260:	4632      	mov	r2, r6
   e1262:	463b      	mov	r3, r7
   e1264:	4630      	mov	r0, r6
   e1266:	4639      	mov	r1, r7
   e1268:	f001 fd3a 	bl	e2ce0 <__aeabi_dmul>
   e126c:	a37c      	add	r3, pc, #496	; (adr r3, e1460 <__kernel_cos+0x230>)
   e126e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1272:	4604      	mov	r4, r0
   e1274:	460d      	mov	r5, r1
   e1276:	f001 fd33 	bl	e2ce0 <__aeabi_dmul>
   e127a:	a37b      	add	r3, pc, #492	; (adr r3, e1468 <__kernel_cos+0x238>)
   e127c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1280:	f001 fb7c 	bl	e297c <__adddf3>
   e1284:	4622      	mov	r2, r4
   e1286:	462b      	mov	r3, r5
   e1288:	f001 fd2a 	bl	e2ce0 <__aeabi_dmul>
   e128c:	a378      	add	r3, pc, #480	; (adr r3, e1470 <__kernel_cos+0x240>)
   e128e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1292:	f001 fb71 	bl	e2978 <__aeabi_dsub>
   e1296:	4622      	mov	r2, r4
   e1298:	462b      	mov	r3, r5
   e129a:	f001 fd21 	bl	e2ce0 <__aeabi_dmul>
   e129e:	a376      	add	r3, pc, #472	; (adr r3, e1478 <__kernel_cos+0x248>)
   e12a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12a4:	f001 fb6a 	bl	e297c <__adddf3>
   e12a8:	4622      	mov	r2, r4
   e12aa:	462b      	mov	r3, r5
   e12ac:	f001 fd18 	bl	e2ce0 <__aeabi_dmul>
   e12b0:	a373      	add	r3, pc, #460	; (adr r3, e1480 <__kernel_cos+0x250>)
   e12b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12b6:	f001 fb5f 	bl	e2978 <__aeabi_dsub>
   e12ba:	4622      	mov	r2, r4
   e12bc:	462b      	mov	r3, r5
   e12be:	f001 fd0f 	bl	e2ce0 <__aeabi_dmul>
   e12c2:	a371      	add	r3, pc, #452	; (adr r3, e1488 <__kernel_cos+0x258>)
   e12c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12c8:	f001 fb58 	bl	e297c <__adddf3>
   e12cc:	4622      	mov	r2, r4
   e12ce:	462b      	mov	r3, r5
   e12d0:	f001 fd06 	bl	e2ce0 <__aeabi_dmul>
   e12d4:	4682      	mov	sl, r0
   e12d6:	468b      	mov	fp, r1
   e12d8:	2200      	movs	r2, #0
   e12da:	4b71      	ldr	r3, [pc, #452]	; (e14a0 <__kernel_cos+0x270>)
   e12dc:	4620      	mov	r0, r4
   e12de:	4629      	mov	r1, r5
   e12e0:	f001 fcfe 	bl	e2ce0 <__aeabi_dmul>
   e12e4:	4652      	mov	r2, sl
   e12e6:	4680      	mov	r8, r0
   e12e8:	4689      	mov	r9, r1
   e12ea:	465b      	mov	r3, fp
   e12ec:	4620      	mov	r0, r4
   e12ee:	4629      	mov	r1, r5
   e12f0:	f001 fcf6 	bl	e2ce0 <__aeabi_dmul>
   e12f4:	ec53 2b18 	vmov	r2, r3, d8
   e12f8:	4604      	mov	r4, r0
   e12fa:	460d      	mov	r5, r1
   e12fc:	4630      	mov	r0, r6
   e12fe:	4639      	mov	r1, r7
   e1300:	f001 fcee 	bl	e2ce0 <__aeabi_dmul>
   e1304:	4602      	mov	r2, r0
   e1306:	460b      	mov	r3, r1
   e1308:	4620      	mov	r0, r4
   e130a:	4629      	mov	r1, r5
   e130c:	f001 fb34 	bl	e2978 <__aeabi_dsub>
   e1310:	4602      	mov	r2, r0
   e1312:	460b      	mov	r3, r1
   e1314:	4640      	mov	r0, r8
   e1316:	4649      	mov	r1, r9
   e1318:	f001 fb2e 	bl	e2978 <__aeabi_dsub>
   e131c:	4602      	mov	r2, r0
   e131e:	460b      	mov	r3, r1
   e1320:	2000      	movs	r0, #0
   e1322:	4960      	ldr	r1, [pc, #384]	; (e14a4 <__kernel_cos+0x274>)
   e1324:	f001 fb28 	bl	e2978 <__aeabi_dsub>
   e1328:	ec41 0b10 	vmov	d0, r0, r1
   e132c:	b003      	add	sp, #12
   e132e:	ecbd 8b02 	vpop	{d8}
   e1332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1336:	ee10 2a10 	vmov	r2, s0
   e133a:	ee10 0a10 	vmov	r0, s0
   e133e:	463b      	mov	r3, r7
   e1340:	4639      	mov	r1, r7
   e1342:	f001 fccd 	bl	e2ce0 <__aeabi_dmul>
   e1346:	a346      	add	r3, pc, #280	; (adr r3, e1460 <__kernel_cos+0x230>)
   e1348:	e9d3 2300 	ldrd	r2, r3, [r3]
   e134c:	4604      	mov	r4, r0
   e134e:	460d      	mov	r5, r1
   e1350:	f001 fcc6 	bl	e2ce0 <__aeabi_dmul>
   e1354:	a344      	add	r3, pc, #272	; (adr r3, e1468 <__kernel_cos+0x238>)
   e1356:	e9d3 2300 	ldrd	r2, r3, [r3]
   e135a:	f001 fb0f 	bl	e297c <__adddf3>
   e135e:	4622      	mov	r2, r4
   e1360:	462b      	mov	r3, r5
   e1362:	f001 fcbd 	bl	e2ce0 <__aeabi_dmul>
   e1366:	a342      	add	r3, pc, #264	; (adr r3, e1470 <__kernel_cos+0x240>)
   e1368:	e9d3 2300 	ldrd	r2, r3, [r3]
   e136c:	f001 fb04 	bl	e2978 <__aeabi_dsub>
   e1370:	4622      	mov	r2, r4
   e1372:	462b      	mov	r3, r5
   e1374:	f001 fcb4 	bl	e2ce0 <__aeabi_dmul>
   e1378:	a33f      	add	r3, pc, #252	; (adr r3, e1478 <__kernel_cos+0x248>)
   e137a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e137e:	f001 fafd 	bl	e297c <__adddf3>
   e1382:	4622      	mov	r2, r4
   e1384:	462b      	mov	r3, r5
   e1386:	f001 fcab 	bl	e2ce0 <__aeabi_dmul>
   e138a:	a33d      	add	r3, pc, #244	; (adr r3, e1480 <__kernel_cos+0x250>)
   e138c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1390:	f001 faf2 	bl	e2978 <__aeabi_dsub>
   e1394:	4622      	mov	r2, r4
   e1396:	462b      	mov	r3, r5
   e1398:	f001 fca2 	bl	e2ce0 <__aeabi_dmul>
   e139c:	a33a      	add	r3, pc, #232	; (adr r3, e1488 <__kernel_cos+0x258>)
   e139e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13a2:	f001 faeb 	bl	e297c <__adddf3>
   e13a6:	462b      	mov	r3, r5
   e13a8:	4622      	mov	r2, r4
   e13aa:	f001 fc99 	bl	e2ce0 <__aeabi_dmul>
   e13ae:	4b3e      	ldr	r3, [pc, #248]	; (e14a8 <__kernel_cos+0x278>)
   e13b0:	4599      	cmp	r9, r3
   e13b2:	4682      	mov	sl, r0
   e13b4:	468b      	mov	fp, r1
   e13b6:	dd8f      	ble.n	e12d8 <__kernel_cos+0xa8>
   e13b8:	4b3c      	ldr	r3, [pc, #240]	; (e14ac <__kernel_cos+0x27c>)
   e13ba:	4599      	cmp	r9, r3
   e13bc:	dc3d      	bgt.n	e143a <__kernel_cos+0x20a>
   e13be:	2200      	movs	r2, #0
   e13c0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e13c4:	2000      	movs	r0, #0
   e13c6:	4937      	ldr	r1, [pc, #220]	; (e14a4 <__kernel_cos+0x274>)
   e13c8:	4690      	mov	r8, r2
   e13ca:	4699      	mov	r9, r3
   e13cc:	f001 fad4 	bl	e2978 <__aeabi_dsub>
   e13d0:	e9cd 0100 	strd	r0, r1, [sp]
   e13d4:	2200      	movs	r2, #0
   e13d6:	4b32      	ldr	r3, [pc, #200]	; (e14a0 <__kernel_cos+0x270>)
   e13d8:	4620      	mov	r0, r4
   e13da:	4629      	mov	r1, r5
   e13dc:	f001 fc80 	bl	e2ce0 <__aeabi_dmul>
   e13e0:	4642      	mov	r2, r8
   e13e2:	464b      	mov	r3, r9
   e13e4:	f001 fac8 	bl	e2978 <__aeabi_dsub>
   e13e8:	4652      	mov	r2, sl
   e13ea:	4680      	mov	r8, r0
   e13ec:	4689      	mov	r9, r1
   e13ee:	465b      	mov	r3, fp
   e13f0:	4620      	mov	r0, r4
   e13f2:	4629      	mov	r1, r5
   e13f4:	f001 fc74 	bl	e2ce0 <__aeabi_dmul>
   e13f8:	ec53 2b18 	vmov	r2, r3, d8
   e13fc:	4604      	mov	r4, r0
   e13fe:	460d      	mov	r5, r1
   e1400:	4630      	mov	r0, r6
   e1402:	4639      	mov	r1, r7
   e1404:	f001 fc6c 	bl	e2ce0 <__aeabi_dmul>
   e1408:	4602      	mov	r2, r0
   e140a:	460b      	mov	r3, r1
   e140c:	4620      	mov	r0, r4
   e140e:	4629      	mov	r1, r5
   e1410:	f001 fab2 	bl	e2978 <__aeabi_dsub>
   e1414:	4602      	mov	r2, r0
   e1416:	460b      	mov	r3, r1
   e1418:	4640      	mov	r0, r8
   e141a:	4649      	mov	r1, r9
   e141c:	f001 faac 	bl	e2978 <__aeabi_dsub>
   e1420:	4602      	mov	r2, r0
   e1422:	460b      	mov	r3, r1
   e1424:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1428:	f001 faa6 	bl	e2978 <__aeabi_dsub>
   e142c:	ec41 0b10 	vmov	d0, r0, r1
   e1430:	b003      	add	sp, #12
   e1432:	ecbd 8b02 	vpop	{d8}
   e1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e143a:	ed9f 7b15 	vldr	d7, [pc, #84]	; e1490 <__kernel_cos+0x260>
   e143e:	f04f 0800 	mov.w	r8, #0
   e1442:	ed8d 7b00 	vstr	d7, [sp]
   e1446:	f8df 9068 	ldr.w	r9, [pc, #104]	; e14b0 <__kernel_cos+0x280>
   e144a:	e7c3      	b.n	e13d4 <__kernel_cos+0x1a4>
   e144c:	ed9f 0b12 	vldr	d0, [pc, #72]	; e1498 <__kernel_cos+0x268>
   e1450:	b003      	add	sp, #12
   e1452:	ecbd 8b02 	vpop	{d8}
   e1456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e145a:	bf00      	nop
   e145c:	f3af 8000 	nop.w
   e1460:	be8838d4 	.word	0xbe8838d4
   e1464:	bda8fae9 	.word	0xbda8fae9
   e1468:	bdb4b1c4 	.word	0xbdb4b1c4
   e146c:	3e21ee9e 	.word	0x3e21ee9e
   e1470:	809c52ad 	.word	0x809c52ad
   e1474:	3e927e4f 	.word	0x3e927e4f
   e1478:	19cb1590 	.word	0x19cb1590
   e147c:	3efa01a0 	.word	0x3efa01a0
   e1480:	16c15177 	.word	0x16c15177
   e1484:	3f56c16c 	.word	0x3f56c16c
   e1488:	5555554c 	.word	0x5555554c
   e148c:	3fa55555 	.word	0x3fa55555
   e1490:	00000000 	.word	0x00000000
   e1494:	3fe70000 	.word	0x3fe70000
   e1498:	00000000 	.word	0x00000000
   e149c:	3ff00000 	.word	0x3ff00000
   e14a0:	3fe00000 	.word	0x3fe00000
   e14a4:	3ff00000 	.word	0x3ff00000
   e14a8:	3fd33332 	.word	0x3fd33332
   e14ac:	3fe90000 	.word	0x3fe90000
   e14b0:	3fd20000 	.word	0x3fd20000
   e14b4:	00000000 	.word	0x00000000

000e14b8 <__kernel_rem_pio2>:
   e14b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e14bc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e14c0:	4c81      	ldr	r4, [pc, #516]	; (e16c8 <__kernel_rem_pio2+0x210>)
   e14c2:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e14c4:	4d81      	ldr	r5, [pc, #516]	; (e16cc <__kernel_rem_pio2+0x214>)
   e14c6:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e14ca:	9407      	str	r4, [sp, #28]
   e14cc:	4626      	mov	r6, r4
   e14ce:	1ed4      	subs	r4, r2, #3
   e14d0:	fb85 7504 	smull	r7, r5, r5, r4
   e14d4:	17e4      	asrs	r4, r4, #31
   e14d6:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e14da:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e14de:	461d      	mov	r5, r3
   e14e0:	930a      	str	r3, [sp, #40]	; 0x28
   e14e2:	1c63      	adds	r3, r4, #1
   e14e4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e14e8:	3d01      	subs	r5, #1
   e14ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e14ee:	9306      	str	r3, [sp, #24]
   e14f0:	462b      	mov	r3, r5
   e14f2:	940b      	str	r4, [sp, #44]	; 0x2c
   e14f4:	9500      	str	r5, [sp, #0]
   e14f6:	1b65      	subs	r5, r4, r5
   e14f8:	18f4      	adds	r4, r6, r3
   e14fa:	9003      	str	r0, [sp, #12]
   e14fc:	9108      	str	r1, [sp, #32]
   e14fe:	d416      	bmi.n	e152e <__kernel_rem_pio2+0x76>
   e1500:	442c      	add	r4, r5
   e1502:	3401      	adds	r4, #1
   e1504:	ae22      	add	r6, sp, #136	; 0x88
   e1506:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e1508:	e008      	b.n	e151c <__kernel_rem_pio2+0x64>
   e150a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e150e:	f001 fb81 	bl	e2c14 <__aeabi_i2d>
   e1512:	3501      	adds	r5, #1
   e1514:	42a5      	cmp	r5, r4
   e1516:	e8e6 0102 	strd	r0, r1, [r6], #8
   e151a:	d008      	beq.n	e152e <__kernel_rem_pio2+0x76>
   e151c:	2d00      	cmp	r5, #0
   e151e:	daf4      	bge.n	e150a <__kernel_rem_pio2+0x52>
   e1520:	3501      	adds	r5, #1
   e1522:	2000      	movs	r0, #0
   e1524:	2100      	movs	r1, #0
   e1526:	42a5      	cmp	r5, r4
   e1528:	e8e6 0102 	strd	r0, r1, [r6], #8
   e152c:	d1f6      	bne.n	e151c <__kernel_rem_pio2+0x64>
   e152e:	9b07      	ldr	r3, [sp, #28]
   e1530:	2b00      	cmp	r3, #0
   e1532:	f2c0 83c2 	blt.w	e1cba <__kernel_rem_pio2+0x802>
   e1536:	9b07      	ldr	r3, [sp, #28]
   e1538:	f103 0b01 	add.w	fp, r3, #1
   e153c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e153e:	a922      	add	r1, sp, #136	; 0x88
   e1540:	00db      	lsls	r3, r3, #3
   e1542:	461a      	mov	r2, r3
   e1544:	eb01 0903 	add.w	r9, r1, r3
   e1548:	9304      	str	r3, [sp, #16]
   e154a:	9b03      	ldr	r3, [sp, #12]
   e154c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e1550:	4619      	mov	r1, r3
   e1552:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e1556:	eb01 0802 	add.w	r8, r1, r2
   e155a:	9b00      	ldr	r3, [sp, #0]
   e155c:	2b00      	cmp	r3, #0
   e155e:	f2c0 818f 	blt.w	e1880 <__kernel_rem_pio2+0x3c8>
   e1562:	9c03      	ldr	r4, [sp, #12]
   e1564:	464d      	mov	r5, r9
   e1566:	2600      	movs	r6, #0
   e1568:	2700      	movs	r7, #0
   e156a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e156e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e1572:	f001 fbb5 	bl	e2ce0 <__aeabi_dmul>
   e1576:	4602      	mov	r2, r0
   e1578:	460b      	mov	r3, r1
   e157a:	4630      	mov	r0, r6
   e157c:	4639      	mov	r1, r7
   e157e:	f001 f9fd 	bl	e297c <__adddf3>
   e1582:	4544      	cmp	r4, r8
   e1584:	4606      	mov	r6, r0
   e1586:	460f      	mov	r7, r1
   e1588:	d1ef      	bne.n	e156a <__kernel_rem_pio2+0xb2>
   e158a:	e8ea 6702 	strd	r6, r7, [sl], #8
   e158e:	45da      	cmp	sl, fp
   e1590:	f109 0908 	add.w	r9, r9, #8
   e1594:	d1e1      	bne.n	e155a <__kernel_rem_pio2+0xa2>
   e1596:	9907      	ldr	r1, [sp, #28]
   e1598:	9804      	ldr	r0, [sp, #16]
   e159a:	9c03      	ldr	r4, [sp, #12]
   e159c:	9104      	str	r1, [sp, #16]
   e159e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e15a2:	3b02      	subs	r3, #2
   e15a4:	009b      	lsls	r3, r3, #2
   e15a6:	4420      	add	r0, r4
   e15a8:	1d1a      	adds	r2, r3, #4
   e15aa:	4683      	mov	fp, r0
   e15ac:	a80e      	add	r0, sp, #56	; 0x38
   e15ae:	4402      	add	r2, r0
   e15b0:	4403      	add	r3, r0
   e15b2:	920d      	str	r2, [sp, #52]	; 0x34
   e15b4:	930c      	str	r3, [sp, #48]	; 0x30
   e15b6:	9a04      	ldr	r2, [sp, #16]
   e15b8:	a99a      	add	r1, sp, #616	; 0x268
   e15ba:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e15be:	2a00      	cmp	r2, #0
   e15c0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e15c4:	dd29      	ble.n	e161a <__kernel_rem_pio2+0x162>
   e15c6:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e15ca:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e15ce:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e15d2:	2200      	movs	r2, #0
   e15d4:	4b3e      	ldr	r3, [pc, #248]	; (e16d0 <__kernel_rem_pio2+0x218>)
   e15d6:	4620      	mov	r0, r4
   e15d8:	4629      	mov	r1, r5
   e15da:	f001 fb81 	bl	e2ce0 <__aeabi_dmul>
   e15de:	f001 fe2f 	bl	e3240 <__aeabi_d2iz>
   e15e2:	f001 fb17 	bl	e2c14 <__aeabi_i2d>
   e15e6:	2200      	movs	r2, #0
   e15e8:	4b3a      	ldr	r3, [pc, #232]	; (e16d4 <__kernel_rem_pio2+0x21c>)
   e15ea:	4606      	mov	r6, r0
   e15ec:	460f      	mov	r7, r1
   e15ee:	f001 fb77 	bl	e2ce0 <__aeabi_dmul>
   e15f2:	4602      	mov	r2, r0
   e15f4:	460b      	mov	r3, r1
   e15f6:	4620      	mov	r0, r4
   e15f8:	4629      	mov	r1, r5
   e15fa:	f001 f9bd 	bl	e2978 <__aeabi_dsub>
   e15fe:	f001 fe1f 	bl	e3240 <__aeabi_d2iz>
   e1602:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e1606:	f849 0f04 	str.w	r0, [r9, #4]!
   e160a:	4639      	mov	r1, r7
   e160c:	4630      	mov	r0, r6
   e160e:	f001 f9b5 	bl	e297c <__adddf3>
   e1612:	45d0      	cmp	r8, sl
   e1614:	4604      	mov	r4, r0
   e1616:	460d      	mov	r5, r1
   e1618:	d1db      	bne.n	e15d2 <__kernel_rem_pio2+0x11a>
   e161a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e161e:	ec45 4b10 	vmov	d0, r4, r5
   e1622:	4648      	mov	r0, r9
   e1624:	f001 f910 	bl	e2848 <scalbn>
   e1628:	ec55 4b10 	vmov	r4, r5, d0
   e162c:	2200      	movs	r2, #0
   e162e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e1632:	ee10 0a10 	vmov	r0, s0
   e1636:	4629      	mov	r1, r5
   e1638:	f001 fb52 	bl	e2ce0 <__aeabi_dmul>
   e163c:	ec41 0b10 	vmov	d0, r0, r1
   e1640:	f7fc f94e 	bl	dd8e0 <floor>
   e1644:	2200      	movs	r2, #0
   e1646:	ec51 0b10 	vmov	r0, r1, d0
   e164a:	4b23      	ldr	r3, [pc, #140]	; (e16d8 <__kernel_rem_pio2+0x220>)
   e164c:	f001 fb48 	bl	e2ce0 <__aeabi_dmul>
   e1650:	4602      	mov	r2, r0
   e1652:	460b      	mov	r3, r1
   e1654:	4620      	mov	r0, r4
   e1656:	4629      	mov	r1, r5
   e1658:	f001 f98e 	bl	e2978 <__aeabi_dsub>
   e165c:	460d      	mov	r5, r1
   e165e:	4604      	mov	r4, r0
   e1660:	f001 fdee 	bl	e3240 <__aeabi_d2iz>
   e1664:	4680      	mov	r8, r0
   e1666:	f001 fad5 	bl	e2c14 <__aeabi_i2d>
   e166a:	460b      	mov	r3, r1
   e166c:	4602      	mov	r2, r0
   e166e:	4629      	mov	r1, r5
   e1670:	4620      	mov	r0, r4
   e1672:	f001 f981 	bl	e2978 <__aeabi_dsub>
   e1676:	464b      	mov	r3, r9
   e1678:	2b00      	cmp	r3, #0
   e167a:	4606      	mov	r6, r0
   e167c:	460f      	mov	r7, r1
   e167e:	f340 80e5 	ble.w	e184c <__kernel_rem_pio2+0x394>
   e1682:	9a04      	ldr	r2, [sp, #16]
   e1684:	a90e      	add	r1, sp, #56	; 0x38
   e1686:	3a01      	subs	r2, #1
   e1688:	f1c9 0318 	rsb	r3, r9, #24
   e168c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e1690:	fa45 f103 	asr.w	r1, r5, r3
   e1694:	fa01 f303 	lsl.w	r3, r1, r3
   e1698:	a80e      	add	r0, sp, #56	; 0x38
   e169a:	1aeb      	subs	r3, r5, r3
   e169c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e16a0:	f1c9 0517 	rsb	r5, r9, #23
   e16a4:	4488      	add	r8, r1
   e16a6:	fa43 f505 	asr.w	r5, r3, r5
   e16aa:	2d00      	cmp	r5, #0
   e16ac:	dd41      	ble.n	e1732 <__kernel_rem_pio2+0x27a>
   e16ae:	9b04      	ldr	r3, [sp, #16]
   e16b0:	2b00      	cmp	r3, #0
   e16b2:	f108 0801 	add.w	r8, r8, #1
   e16b6:	f340 82c9 	ble.w	e1c4c <__kernel_rem_pio2+0x794>
   e16ba:	2200      	movs	r2, #0
   e16bc:	4614      	mov	r4, r2
   e16be:	a90d      	add	r1, sp, #52	; 0x34
   e16c0:	9804      	ldr	r0, [sp, #16]
   e16c2:	46ae      	mov	lr, r5
   e16c4:	e012      	b.n	e16ec <__kernel_rem_pio2+0x234>
   e16c6:	bf00      	nop
   e16c8:	000e8320 	.word	0x000e8320
   e16cc:	2aaaaaab 	.word	0x2aaaaaab
   e16d0:	3e700000 	.word	0x3e700000
   e16d4:	41700000 	.word	0x41700000
   e16d8:	40200000 	.word	0x40200000
   e16dc:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e16e0:	b10b      	cbz	r3, e16e6 <__kernel_rem_pio2+0x22e>
   e16e2:	600d      	str	r5, [r1, #0]
   e16e4:	2401      	movs	r4, #1
   e16e6:	3201      	adds	r2, #1
   e16e8:	4290      	cmp	r0, r2
   e16ea:	dd0d      	ble.n	e1708 <__kernel_rem_pio2+0x250>
   e16ec:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e16f0:	2c00      	cmp	r4, #0
   e16f2:	d0f3      	beq.n	e16dc <__kernel_rem_pio2+0x224>
   e16f4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e16f8:	3201      	adds	r2, #1
   e16fa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e16fe:	4290      	cmp	r0, r2
   e1700:	600b      	str	r3, [r1, #0]
   e1702:	f04f 0401 	mov.w	r4, #1
   e1706:	dcf1      	bgt.n	e16ec <__kernel_rem_pio2+0x234>
   e1708:	4675      	mov	r5, lr
   e170a:	9b06      	ldr	r3, [sp, #24]
   e170c:	2b00      	cmp	r3, #0
   e170e:	dd0e      	ble.n	e172e <__kernel_rem_pio2+0x276>
   e1710:	2b01      	cmp	r3, #1
   e1712:	f000 80a3 	beq.w	e185c <__kernel_rem_pio2+0x3a4>
   e1716:	2b02      	cmp	r3, #2
   e1718:	d109      	bne.n	e172e <__kernel_rem_pio2+0x276>
   e171a:	9b04      	ldr	r3, [sp, #16]
   e171c:	1e5a      	subs	r2, r3, #1
   e171e:	ab0e      	add	r3, sp, #56	; 0x38
   e1720:	a90e      	add	r1, sp, #56	; 0x38
   e1722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1726:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e172a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e172e:	2d02      	cmp	r5, #2
   e1730:	d074      	beq.n	e181c <__kernel_rem_pio2+0x364>
   e1732:	2200      	movs	r2, #0
   e1734:	2300      	movs	r3, #0
   e1736:	4630      	mov	r0, r6
   e1738:	4639      	mov	r1, r7
   e173a:	f001 fd39 	bl	e31b0 <__aeabi_dcmpeq>
   e173e:	2800      	cmp	r0, #0
   e1740:	f000 8249 	beq.w	e1bd6 <__kernel_rem_pio2+0x71e>
   e1744:	9a04      	ldr	r2, [sp, #16]
   e1746:	9b07      	ldr	r3, [sp, #28]
   e1748:	1e50      	subs	r0, r2, #1
   e174a:	4283      	cmp	r3, r0
   e174c:	dc10      	bgt.n	e1770 <__kernel_rem_pio2+0x2b8>
   e174e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e1752:	3b01      	subs	r3, #1
   e1754:	aa0e      	add	r2, sp, #56	; 0x38
   e1756:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e1758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e175c:	2200      	movs	r2, #0
   e175e:	f853 1904 	ldr.w	r1, [r3], #-4
   e1762:	42a3      	cmp	r3, r4
   e1764:	ea42 0201 	orr.w	r2, r2, r1
   e1768:	d1f9      	bne.n	e175e <__kernel_rem_pio2+0x2a6>
   e176a:	2a00      	cmp	r2, #0
   e176c:	f040 80a4 	bne.w	e18b8 <__kernel_rem_pio2+0x400>
   e1770:	9b07      	ldr	r3, [sp, #28]
   e1772:	aa0e      	add	r2, sp, #56	; 0x38
   e1774:	3b01      	subs	r3, #1
   e1776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e177a:	2b00      	cmp	r3, #0
   e177c:	f040 8264 	bne.w	e1c48 <__kernel_rem_pio2+0x790>
   e1780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e1782:	2301      	movs	r3, #1
   e1784:	f852 1904 	ldr.w	r1, [r2], #-4
   e1788:	3301      	adds	r3, #1
   e178a:	2900      	cmp	r1, #0
   e178c:	d0fa      	beq.n	e1784 <__kernel_rem_pio2+0x2cc>
   e178e:	9a04      	ldr	r2, [sp, #16]
   e1790:	18d3      	adds	r3, r2, r3
   e1792:	f102 0a01 	add.w	sl, r2, #1
   e1796:	459a      	cmp	sl, r3
   e1798:	9309      	str	r3, [sp, #36]	; 0x24
   e179a:	dc3c      	bgt.n	e1816 <__kernel_rem_pio2+0x35e>
   e179c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e179e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e17a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   e17a2:	eb0a 0903 	add.w	r9, sl, r3
   e17a6:	9b04      	ldr	r3, [sp, #16]
   e17a8:	4698      	mov	r8, r3
   e17aa:	4490      	add	r8, r2
   e17ac:	188b      	adds	r3, r1, r2
   e17ae:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e17b2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e17b4:	f109 39ff 	add.w	r9, r9, #4294967295
   e17b8:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e17bc:	aa22      	add	r2, sp, #136	; 0x88
   e17be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e17c2:	9304      	str	r3, [sp, #16]
   e17c4:	ab72      	add	r3, sp, #456	; 0x1c8
   e17c6:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e17ca:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e17ce:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e17d2:	f001 fa1f 	bl	e2c14 <__aeabi_i2d>
   e17d6:	9b00      	ldr	r3, [sp, #0]
   e17d8:	2b00      	cmp	r3, #0
   e17da:	e8e8 0102 	strd	r0, r1, [r8], #8
   e17de:	f04f 0600 	mov.w	r6, #0
   e17e2:	f04f 0700 	mov.w	r7, #0
   e17e6:	db11      	blt.n	e180c <__kernel_rem_pio2+0x354>
   e17e8:	9c03      	ldr	r4, [sp, #12]
   e17ea:	4645      	mov	r5, r8
   e17ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e17f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e17f4:	f001 fa74 	bl	e2ce0 <__aeabi_dmul>
   e17f8:	4602      	mov	r2, r0
   e17fa:	460b      	mov	r3, r1
   e17fc:	4630      	mov	r0, r6
   e17fe:	4639      	mov	r1, r7
   e1800:	f001 f8bc 	bl	e297c <__adddf3>
   e1804:	455c      	cmp	r4, fp
   e1806:	4606      	mov	r6, r0
   e1808:	460f      	mov	r7, r1
   e180a:	d1ef      	bne.n	e17ec <__kernel_rem_pio2+0x334>
   e180c:	9b04      	ldr	r3, [sp, #16]
   e180e:	4598      	cmp	r8, r3
   e1810:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1814:	d1db      	bne.n	e17ce <__kernel_rem_pio2+0x316>
   e1816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1818:	9304      	str	r3, [sp, #16]
   e181a:	e6cc      	b.n	e15b6 <__kernel_rem_pio2+0xfe>
   e181c:	4632      	mov	r2, r6
   e181e:	463b      	mov	r3, r7
   e1820:	2000      	movs	r0, #0
   e1822:	49b3      	ldr	r1, [pc, #716]	; (e1af0 <__kernel_rem_pio2+0x638>)
   e1824:	f001 f8a8 	bl	e2978 <__aeabi_dsub>
   e1828:	4606      	mov	r6, r0
   e182a:	460f      	mov	r7, r1
   e182c:	2c00      	cmp	r4, #0
   e182e:	d080      	beq.n	e1732 <__kernel_rem_pio2+0x27a>
   e1830:	9806      	ldr	r0, [sp, #24]
   e1832:	ed9f 0bab 	vldr	d0, [pc, #684]	; e1ae0 <__kernel_rem_pio2+0x628>
   e1836:	f001 f807 	bl	e2848 <scalbn>
   e183a:	4630      	mov	r0, r6
   e183c:	4639      	mov	r1, r7
   e183e:	ec53 2b10 	vmov	r2, r3, d0
   e1842:	f001 f899 	bl	e2978 <__aeabi_dsub>
   e1846:	4606      	mov	r6, r0
   e1848:	460f      	mov	r7, r1
   e184a:	e772      	b.n	e1732 <__kernel_rem_pio2+0x27a>
   e184c:	d111      	bne.n	e1872 <__kernel_rem_pio2+0x3ba>
   e184e:	9b04      	ldr	r3, [sp, #16]
   e1850:	aa0e      	add	r2, sp, #56	; 0x38
   e1852:	3b01      	subs	r3, #1
   e1854:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e1858:	15ed      	asrs	r5, r5, #23
   e185a:	e726      	b.n	e16aa <__kernel_rem_pio2+0x1f2>
   e185c:	9b04      	ldr	r3, [sp, #16]
   e185e:	1e5a      	subs	r2, r3, #1
   e1860:	ab0e      	add	r3, sp, #56	; 0x38
   e1862:	a90e      	add	r1, sp, #56	; 0x38
   e1864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1868:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e186c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e1870:	e75d      	b.n	e172e <__kernel_rem_pio2+0x276>
   e1872:	2200      	movs	r2, #0
   e1874:	4b9f      	ldr	r3, [pc, #636]	; (e1af4 <__kernel_rem_pio2+0x63c>)
   e1876:	f001 fcb9 	bl	e31ec <__aeabi_dcmpge>
   e187a:	b958      	cbnz	r0, e1894 <__kernel_rem_pio2+0x3dc>
   e187c:	4605      	mov	r5, r0
   e187e:	e758      	b.n	e1732 <__kernel_rem_pio2+0x27a>
   e1880:	2600      	movs	r6, #0
   e1882:	2700      	movs	r7, #0
   e1884:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1888:	45da      	cmp	sl, fp
   e188a:	f109 0908 	add.w	r9, r9, #8
   e188e:	f47f ae64 	bne.w	e155a <__kernel_rem_pio2+0xa2>
   e1892:	e680      	b.n	e1596 <__kernel_rem_pio2+0xde>
   e1894:	9b04      	ldr	r3, [sp, #16]
   e1896:	2b00      	cmp	r3, #0
   e1898:	f108 0801 	add.w	r8, r8, #1
   e189c:	bfc8      	it	gt
   e189e:	2502      	movgt	r5, #2
   e18a0:	f73f af0b 	bgt.w	e16ba <__kernel_rem_pio2+0x202>
   e18a4:	4632      	mov	r2, r6
   e18a6:	463b      	mov	r3, r7
   e18a8:	2000      	movs	r0, #0
   e18aa:	4991      	ldr	r1, [pc, #580]	; (e1af0 <__kernel_rem_pio2+0x638>)
   e18ac:	f001 f864 	bl	e2978 <__aeabi_dsub>
   e18b0:	2502      	movs	r5, #2
   e18b2:	4606      	mov	r6, r0
   e18b4:	460f      	mov	r7, r1
   e18b6:	e73c      	b.n	e1732 <__kernel_rem_pio2+0x27a>
   e18b8:	a90e      	add	r1, sp, #56	; 0x38
   e18ba:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e18be:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e18c2:	9906      	ldr	r1, [sp, #24]
   e18c4:	9000      	str	r0, [sp, #0]
   e18c6:	3918      	subs	r1, #24
   e18c8:	4602      	mov	r2, r0
   e18ca:	9503      	str	r5, [sp, #12]
   e18cc:	9106      	str	r1, [sp, #24]
   e18ce:	b96b      	cbnz	r3, e18ec <__kernel_rem_pio2+0x434>
   e18d0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e18d4:	3b01      	subs	r3, #1
   e18d6:	a80e      	add	r0, sp, #56	; 0x38
   e18d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e18dc:	f853 0904 	ldr.w	r0, [r3], #-4
   e18e0:	3a01      	subs	r2, #1
   e18e2:	3918      	subs	r1, #24
   e18e4:	2800      	cmp	r0, #0
   e18e6:	d0f9      	beq.n	e18dc <__kernel_rem_pio2+0x424>
   e18e8:	9200      	str	r2, [sp, #0]
   e18ea:	9106      	str	r1, [sp, #24]
   e18ec:	9806      	ldr	r0, [sp, #24]
   e18ee:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e1ae0 <__kernel_rem_pio2+0x628>
   e18f2:	f000 ffa9 	bl	e2848 <scalbn>
   e18f6:	9b00      	ldr	r3, [sp, #0]
   e18f8:	2b00      	cmp	r3, #0
   e18fa:	ec55 4b10 	vmov	r4, r5, d0
   e18fe:	f2c0 81c1 	blt.w	e1c84 <__kernel_rem_pio2+0x7cc>
   e1902:	00da      	lsls	r2, r3, #3
   e1904:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e1908:	a90e      	add	r1, sp, #56	; 0x38
   e190a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e190e:	eb08 0b02 	add.w	fp, r8, r2
   e1912:	9206      	str	r2, [sp, #24]
   e1914:	3604      	adds	r6, #4
   e1916:	f10b 0708 	add.w	r7, fp, #8
   e191a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e191e:	f001 f979 	bl	e2c14 <__aeabi_i2d>
   e1922:	4622      	mov	r2, r4
   e1924:	462b      	mov	r3, r5
   e1926:	f001 f9db 	bl	e2ce0 <__aeabi_dmul>
   e192a:	2200      	movs	r2, #0
   e192c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e1930:	4b71      	ldr	r3, [pc, #452]	; (e1af8 <__kernel_rem_pio2+0x640>)
   e1932:	4620      	mov	r0, r4
   e1934:	4629      	mov	r1, r5
   e1936:	f001 f9d3 	bl	e2ce0 <__aeabi_dmul>
   e193a:	4547      	cmp	r7, r8
   e193c:	4604      	mov	r4, r0
   e193e:	460d      	mov	r5, r1
   e1940:	d1eb      	bne.n	e191a <__kernel_rem_pio2+0x462>
   e1942:	ac4a      	add	r4, sp, #296	; 0x128
   e1944:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e1948:	9404      	str	r4, [sp, #16]
   e194a:	f04f 0a00 	mov.w	sl, #0
   e194e:	f1b9 0f00 	cmp.w	r9, #0
   e1952:	f2c0 812b 	blt.w	e1bac <__kernel_rem_pio2+0x6f4>
   e1956:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e1afc <__kernel_rem_pio2+0x644>
   e195a:	465d      	mov	r5, fp
   e195c:	a362      	add	r3, pc, #392	; (adr r3, e1ae8 <__kernel_rem_pio2+0x630>)
   e195e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1962:	2600      	movs	r6, #0
   e1964:	2700      	movs	r7, #0
   e1966:	2400      	movs	r4, #0
   e1968:	e003      	b.n	e1972 <__kernel_rem_pio2+0x4ba>
   e196a:	45a2      	cmp	sl, r4
   e196c:	db10      	blt.n	e1990 <__kernel_rem_pio2+0x4d8>
   e196e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e1972:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e1976:	f001 f9b3 	bl	e2ce0 <__aeabi_dmul>
   e197a:	4602      	mov	r2, r0
   e197c:	460b      	mov	r3, r1
   e197e:	4630      	mov	r0, r6
   e1980:	4639      	mov	r1, r7
   e1982:	f000 fffb 	bl	e297c <__adddf3>
   e1986:	3401      	adds	r4, #1
   e1988:	45a1      	cmp	r9, r4
   e198a:	4606      	mov	r6, r0
   e198c:	460f      	mov	r7, r1
   e198e:	daec      	bge.n	e196a <__kernel_rem_pio2+0x4b2>
   e1990:	9b04      	ldr	r3, [sp, #16]
   e1992:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e1996:	f1ab 0b08 	sub.w	fp, fp, #8
   e199a:	e9c3 6700 	strd	r6, r7, [r3]
   e199e:	ab70      	add	r3, sp, #448	; 0x1c0
   e19a0:	459b      	cmp	fp, r3
   e19a2:	f10a 0a01 	add.w	sl, sl, #1
   e19a6:	d1d2      	bne.n	e194e <__kernel_rem_pio2+0x496>
   e19a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e19aa:	9c04      	ldr	r4, [sp, #16]
   e19ac:	2b03      	cmp	r3, #3
   e19ae:	f200 808d 	bhi.w	e1acc <__kernel_rem_pio2+0x614>
   e19b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   e19b6:	00dd      	.short	0x00dd
   e19b8:	00a500a5 	.word	0x00a500a5
   e19bc:	0004      	.short	0x0004
   e19be:	9b00      	ldr	r3, [sp, #0]
   e19c0:	2b00      	cmp	r3, #0
   e19c2:	f340 815c 	ble.w	e1c7e <__kernel_rem_pio2+0x7c6>
   e19c6:	9b00      	ldr	r3, [sp, #0]
   e19c8:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e19cc:	9b06      	ldr	r3, [sp, #24]
   e19ce:	f10b 3bff 	add.w	fp, fp, #4294967295
   e19d2:	18e2      	adds	r2, r4, r3
   e19d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e19d8:	e9d2 8900 	ldrd	r8, r9, [r2]
   e19dc:	f103 0208 	add.w	r2, r3, #8
   e19e0:	3310      	adds	r3, #16
   e19e2:	eb04 0a02 	add.w	sl, r4, r2
   e19e6:	18e5      	adds	r5, r4, r3
   e19e8:	ed3a 7b02 	vldmdb	sl!, {d7}
   e19ec:	4642      	mov	r2, r8
   e19ee:	464b      	mov	r3, r9
   e19f0:	ec51 0b17 	vmov	r0, r1, d7
   e19f4:	ed8d 7b04 	vstr	d7, [sp, #16]
   e19f8:	f000 ffc0 	bl	e297c <__adddf3>
   e19fc:	4606      	mov	r6, r0
   e19fe:	460f      	mov	r7, r1
   e1a00:	4602      	mov	r2, r0
   e1a02:	460b      	mov	r3, r1
   e1a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1a08:	f000 ffb6 	bl	e2978 <__aeabi_dsub>
   e1a0c:	464b      	mov	r3, r9
   e1a0e:	4642      	mov	r2, r8
   e1a10:	f000 ffb4 	bl	e297c <__adddf3>
   e1a14:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e1a18:	ab4c      	add	r3, sp, #304	; 0x130
   e1a1a:	429d      	cmp	r5, r3
   e1a1c:	46b0      	mov	r8, r6
   e1a1e:	46b9      	mov	r9, r7
   e1a20:	e9ca 6700 	strd	r6, r7, [sl]
   e1a24:	d1e0      	bne.n	e19e8 <__kernel_rem_pio2+0x530>
   e1a26:	9b00      	ldr	r3, [sp, #0]
   e1a28:	2b01      	cmp	r3, #1
   e1a2a:	f340 8128 	ble.w	e1c7e <__kernel_rem_pio2+0x7c6>
   e1a2e:	9b06      	ldr	r3, [sp, #24]
   e1a30:	4423      	add	r3, r4
   e1a32:	ed93 7b00 	vldr	d7, [r3]
   e1a36:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e1a3a:	f10b 0a10 	add.w	sl, fp, #16
   e1a3e:	ed8d 7b00 	vstr	d7, [sp]
   e1a42:	44a2      	add	sl, r4
   e1a44:	f10b 0b08 	add.w	fp, fp, #8
   e1a48:	eb04 050b 	add.w	r5, r4, fp
   e1a4c:	46d0      	mov	r8, sl
   e1a4e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e1a52:	f8cd a010 	str.w	sl, [sp, #16]
   e1a56:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e1a5a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1a5e:	464a      	mov	r2, r9
   e1a60:	4653      	mov	r3, sl
   e1a62:	f000 ff8b 	bl	e297c <__adddf3>
   e1a66:	4606      	mov	r6, r0
   e1a68:	460f      	mov	r7, r1
   e1a6a:	4602      	mov	r2, r0
   e1a6c:	460b      	mov	r3, r1
   e1a6e:	4648      	mov	r0, r9
   e1a70:	4651      	mov	r1, sl
   e1a72:	f000 ff81 	bl	e2978 <__aeabi_dsub>
   e1a76:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1a7a:	f000 ff7f 	bl	e297c <__adddf3>
   e1a7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e1a82:	45c3      	cmp	fp, r8
   e1a84:	e9cd 6700 	strd	r6, r7, [sp]
   e1a88:	e9c5 6700 	strd	r6, r7, [r5]
   e1a8c:	d1e3      	bne.n	e1a56 <__kernel_rem_pio2+0x59e>
   e1a8e:	f8dd a010 	ldr.w	sl, [sp, #16]
   e1a92:	2000      	movs	r0, #0
   e1a94:	2100      	movs	r1, #0
   e1a96:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e1a9a:	f000 ff6f 	bl	e297c <__adddf3>
   e1a9e:	45d3      	cmp	fp, sl
   e1aa0:	d1f9      	bne.n	e1a96 <__kernel_rem_pio2+0x5de>
   e1aa2:	9b03      	ldr	r3, [sp, #12]
   e1aa4:	2b00      	cmp	r3, #0
   e1aa6:	f000 80d3 	beq.w	e1c50 <__kernel_rem_pio2+0x798>
   e1aaa:	6862      	ldr	r2, [r4, #4]
   e1aac:	68e3      	ldr	r3, [r4, #12]
   e1aae:	9f08      	ldr	r7, [sp, #32]
   e1ab0:	6825      	ldr	r5, [r4, #0]
   e1ab2:	68a4      	ldr	r4, [r4, #8]
   e1ab4:	603d      	str	r5, [r7, #0]
   e1ab6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e1aba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e1abe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e1ac2:	607a      	str	r2, [r7, #4]
   e1ac4:	60fb      	str	r3, [r7, #12]
   e1ac6:	60bc      	str	r4, [r7, #8]
   e1ac8:	6138      	str	r0, [r7, #16]
   e1aca:	6179      	str	r1, [r7, #20]
   e1acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1ace:	f003 0007 	and.w	r0, r3, #7
   e1ad2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1ada:	bf00      	nop
   e1adc:	f3af 8000 	nop.w
   e1ae0:	00000000 	.word	0x00000000
   e1ae4:	3ff00000 	.word	0x3ff00000
   e1ae8:	40000000 	.word	0x40000000
   e1aec:	3ff921fb 	.word	0x3ff921fb
   e1af0:	3ff00000 	.word	0x3ff00000
   e1af4:	3fe00000 	.word	0x3fe00000
   e1af8:	3e700000 	.word	0x3e700000
   e1afc:	000e8338 	.word	0x000e8338
   e1b00:	9d06      	ldr	r5, [sp, #24]
   e1b02:	3508      	adds	r5, #8
   e1b04:	4425      	add	r5, r4
   e1b06:	2000      	movs	r0, #0
   e1b08:	2100      	movs	r1, #0
   e1b0a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1b0e:	f000 ff35 	bl	e297c <__adddf3>
   e1b12:	42a5      	cmp	r5, r4
   e1b14:	d1f9      	bne.n	e1b0a <__kernel_rem_pio2+0x652>
   e1b16:	9b03      	ldr	r3, [sp, #12]
   e1b18:	2b00      	cmp	r3, #0
   e1b1a:	d04a      	beq.n	e1bb2 <__kernel_rem_pio2+0x6fa>
   e1b1c:	9e08      	ldr	r6, [sp, #32]
   e1b1e:	4602      	mov	r2, r0
   e1b20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1b24:	e886 000c 	stmia.w	r6, {r2, r3}
   e1b28:	460b      	mov	r3, r1
   e1b2a:	4602      	mov	r2, r0
   e1b2c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1b30:	f000 ff22 	bl	e2978 <__aeabi_dsub>
   e1b34:	9b00      	ldr	r3, [sp, #0]
   e1b36:	2b00      	cmp	r3, #0
   e1b38:	dd0d      	ble.n	e1b56 <__kernel_rem_pio2+0x69e>
   e1b3a:	ad4c      	add	r5, sp, #304	; 0x130
   e1b3c:	2401      	movs	r4, #1
   e1b3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e1b42:	f000 ff1b 	bl	e297c <__adddf3>
   e1b46:	9b00      	ldr	r3, [sp, #0]
   e1b48:	3401      	adds	r4, #1
   e1b4a:	42a3      	cmp	r3, r4
   e1b4c:	daf7      	bge.n	e1b3e <__kernel_rem_pio2+0x686>
   e1b4e:	9b03      	ldr	r3, [sp, #12]
   e1b50:	2b00      	cmp	r3, #0
   e1b52:	f000 80a7 	beq.w	e1ca4 <__kernel_rem_pio2+0x7ec>
   e1b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1b5a:	9908      	ldr	r1, [sp, #32]
   e1b5c:	4602      	mov	r2, r0
   e1b5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1b64:	f003 0007 	and.w	r0, r3, #7
   e1b68:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1b70:	9b06      	ldr	r3, [sp, #24]
   e1b72:	9d00      	ldr	r5, [sp, #0]
   e1b74:	3308      	adds	r3, #8
   e1b76:	2000      	movs	r0, #0
   e1b78:	2100      	movs	r1, #0
   e1b7a:	441c      	add	r4, r3
   e1b7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e1b80:	3d01      	subs	r5, #1
   e1b82:	f000 fefb 	bl	e297c <__adddf3>
   e1b86:	1c6b      	adds	r3, r5, #1
   e1b88:	d1f8      	bne.n	e1b7c <__kernel_rem_pio2+0x6c4>
   e1b8a:	9b03      	ldr	r3, [sp, #12]
   e1b8c:	4602      	mov	r2, r0
   e1b8e:	2b00      	cmp	r3, #0
   e1b90:	f000 808e 	beq.w	e1cb0 <__kernel_rem_pio2+0x7f8>
   e1b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e1b98:	9908      	ldr	r1, [sp, #32]
   e1b9a:	e9c1 2300 	strd	r2, r3, [r1]
   e1b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1ba0:	f003 0007 	and.w	r0, r3, #7
   e1ba4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e1ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1bac:	2600      	movs	r6, #0
   e1bae:	2700      	movs	r7, #0
   e1bb0:	e6ee      	b.n	e1990 <__kernel_rem_pio2+0x4d8>
   e1bb2:	9b08      	ldr	r3, [sp, #32]
   e1bb4:	4602      	mov	r2, r0
   e1bb6:	e9c3 0100 	strd	r0, r1, [r3]
   e1bba:	460b      	mov	r3, r1
   e1bbc:	e9d4 0100 	ldrd	r0, r1, [r4]
   e1bc0:	f000 feda 	bl	e2978 <__aeabi_dsub>
   e1bc4:	9c00      	ldr	r4, [sp, #0]
   e1bc6:	2c00      	cmp	r4, #0
   e1bc8:	4602      	mov	r2, r0
   e1bca:	460b      	mov	r3, r1
   e1bcc:	dcb5      	bgt.n	e1b3a <__kernel_rem_pio2+0x682>
   e1bce:	9908      	ldr	r1, [sp, #32]
   e1bd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1bd4:	e7c5      	b.n	e1b62 <__kernel_rem_pio2+0x6aa>
   e1bd6:	9b06      	ldr	r3, [sp, #24]
   e1bd8:	9503      	str	r5, [sp, #12]
   e1bda:	4258      	negs	r0, r3
   e1bdc:	ec47 6b10 	vmov	d0, r6, r7
   e1be0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e1be4:	f000 fe30 	bl	e2848 <scalbn>
   e1be8:	ec55 4b10 	vmov	r4, r5, d0
   e1bec:	2200      	movs	r2, #0
   e1bee:	4b38      	ldr	r3, [pc, #224]	; (e1cd0 <__kernel_rem_pio2+0x818>)
   e1bf0:	ee10 0a10 	vmov	r0, s0
   e1bf4:	4629      	mov	r1, r5
   e1bf6:	f001 faf9 	bl	e31ec <__aeabi_dcmpge>
   e1bfa:	2800      	cmp	r0, #0
   e1bfc:	d034      	beq.n	e1c68 <__kernel_rem_pio2+0x7b0>
   e1bfe:	2200      	movs	r2, #0
   e1c00:	4b34      	ldr	r3, [pc, #208]	; (e1cd4 <__kernel_rem_pio2+0x81c>)
   e1c02:	4620      	mov	r0, r4
   e1c04:	4629      	mov	r1, r5
   e1c06:	f001 f86b 	bl	e2ce0 <__aeabi_dmul>
   e1c0a:	f001 fb19 	bl	e3240 <__aeabi_d2iz>
   e1c0e:	4606      	mov	r6, r0
   e1c10:	f001 f800 	bl	e2c14 <__aeabi_i2d>
   e1c14:	2200      	movs	r2, #0
   e1c16:	4b2e      	ldr	r3, [pc, #184]	; (e1cd0 <__kernel_rem_pio2+0x818>)
   e1c18:	f001 f862 	bl	e2ce0 <__aeabi_dmul>
   e1c1c:	4602      	mov	r2, r0
   e1c1e:	460b      	mov	r3, r1
   e1c20:	4620      	mov	r0, r4
   e1c22:	4629      	mov	r1, r5
   e1c24:	f000 fea8 	bl	e2978 <__aeabi_dsub>
   e1c28:	f001 fb0a 	bl	e3240 <__aeabi_d2iz>
   e1c2c:	9904      	ldr	r1, [sp, #16]
   e1c2e:	9b06      	ldr	r3, [sp, #24]
   e1c30:	460a      	mov	r2, r1
   e1c32:	3318      	adds	r3, #24
   e1c34:	3201      	adds	r2, #1
   e1c36:	9306      	str	r3, [sp, #24]
   e1c38:	460b      	mov	r3, r1
   e1c3a:	a90e      	add	r1, sp, #56	; 0x38
   e1c3c:	9200      	str	r2, [sp, #0]
   e1c3e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e1c42:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e1c46:	e651      	b.n	e18ec <__kernel_rem_pio2+0x434>
   e1c48:	2301      	movs	r3, #1
   e1c4a:	e5a0      	b.n	e178e <__kernel_rem_pio2+0x2d6>
   e1c4c:	2400      	movs	r4, #0
   e1c4e:	e55c      	b.n	e170a <__kernel_rem_pio2+0x252>
   e1c50:	e9d4 6700 	ldrd	r6, r7, [r4]
   e1c54:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e1c58:	9d08      	ldr	r5, [sp, #32]
   e1c5a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e1c5e:	e9c5 6700 	strd	r6, r7, [r5]
   e1c62:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e1c66:	e731      	b.n	e1acc <__kernel_rem_pio2+0x614>
   e1c68:	4629      	mov	r1, r5
   e1c6a:	4620      	mov	r0, r4
   e1c6c:	f001 fae8 	bl	e3240 <__aeabi_d2iz>
   e1c70:	9a04      	ldr	r2, [sp, #16]
   e1c72:	9200      	str	r2, [sp, #0]
   e1c74:	a90e      	add	r1, sp, #56	; 0x38
   e1c76:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e1c7a:	e637      	b.n	e18ec <__kernel_rem_pio2+0x434>
   e1c7c:	ac4a      	add	r4, sp, #296	; 0x128
   e1c7e:	2000      	movs	r0, #0
   e1c80:	2100      	movs	r1, #0
   e1c82:	e70e      	b.n	e1aa2 <__kernel_rem_pio2+0x5ea>
   e1c84:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e1c86:	2b03      	cmp	r3, #3
   e1c88:	f63f af20 	bhi.w	e1acc <__kernel_rem_pio2+0x614>
   e1c8c:	a201      	add	r2, pc, #4	; (adr r2, e1c94 <__kernel_rem_pio2+0x7dc>)
   e1c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e1c92:	bf00      	nop
   e1c94:	000e1ccb 	.word	0x000e1ccb
   e1c98:	000e1cc3 	.word	0x000e1cc3
   e1c9c:	000e1cc3 	.word	0x000e1cc3
   e1ca0:	000e1c7d 	.word	0x000e1c7d
   e1ca4:	460b      	mov	r3, r1
   e1ca6:	9908      	ldr	r1, [sp, #32]
   e1ca8:	4602      	mov	r2, r0
   e1caa:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e1cae:	e758      	b.n	e1b62 <__kernel_rem_pio2+0x6aa>
   e1cb0:	460b      	mov	r3, r1
   e1cb2:	9908      	ldr	r1, [sp, #32]
   e1cb4:	e9c1 2300 	strd	r2, r3, [r1]
   e1cb8:	e771      	b.n	e1b9e <__kernel_rem_pio2+0x6e6>
   e1cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1cbc:	00db      	lsls	r3, r3, #3
   e1cbe:	9304      	str	r3, [sp, #16]
   e1cc0:	e469      	b.n	e1596 <__kernel_rem_pio2+0xde>
   e1cc2:	2000      	movs	r0, #0
   e1cc4:	2100      	movs	r1, #0
   e1cc6:	ac4a      	add	r4, sp, #296	; 0x128
   e1cc8:	e725      	b.n	e1b16 <__kernel_rem_pio2+0x65e>
   e1cca:	2000      	movs	r0, #0
   e1ccc:	2100      	movs	r1, #0
   e1cce:	e75c      	b.n	e1b8a <__kernel_rem_pio2+0x6d2>
   e1cd0:	41700000 	.word	0x41700000
   e1cd4:	3e700000 	.word	0x3e700000

000e1cd8 <__kernel_sin>:
   e1cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1cdc:	ec55 4b10 	vmov	r4, r5, d0
   e1ce0:	ed2d 8b02 	vpush	{d8}
   e1ce4:	eeb0 8a41 	vmov.f32	s16, s2
   e1ce8:	eef0 8a61 	vmov.f32	s17, s3
   e1cec:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e1cf0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e1cf4:	b083      	sub	sp, #12
   e1cf6:	4682      	mov	sl, r0
   e1cf8:	da07      	bge.n	e1d0a <__kernel_sin+0x32>
   e1cfa:	ee10 0a10 	vmov	r0, s0
   e1cfe:	4629      	mov	r1, r5
   e1d00:	f001 fa9e 	bl	e3240 <__aeabi_d2iz>
   e1d04:	2800      	cmp	r0, #0
   e1d06:	f000 808e 	beq.w	e1e26 <__kernel_sin+0x14e>
   e1d0a:	4622      	mov	r2, r4
   e1d0c:	462b      	mov	r3, r5
   e1d0e:	4620      	mov	r0, r4
   e1d10:	4629      	mov	r1, r5
   e1d12:	f000 ffe5 	bl	e2ce0 <__aeabi_dmul>
   e1d16:	4606      	mov	r6, r0
   e1d18:	460f      	mov	r7, r1
   e1d1a:	4602      	mov	r2, r0
   e1d1c:	460b      	mov	r3, r1
   e1d1e:	4620      	mov	r0, r4
   e1d20:	4629      	mov	r1, r5
   e1d22:	f000 ffdd 	bl	e2ce0 <__aeabi_dmul>
   e1d26:	a347      	add	r3, pc, #284	; (adr r3, e1e44 <__kernel_sin+0x16c>)
   e1d28:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d2c:	4680      	mov	r8, r0
   e1d2e:	4689      	mov	r9, r1
   e1d30:	4630      	mov	r0, r6
   e1d32:	4639      	mov	r1, r7
   e1d34:	f000 ffd4 	bl	e2ce0 <__aeabi_dmul>
   e1d38:	a344      	add	r3, pc, #272	; (adr r3, e1e4c <__kernel_sin+0x174>)
   e1d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d3e:	f000 fe1b 	bl	e2978 <__aeabi_dsub>
   e1d42:	4632      	mov	r2, r6
   e1d44:	463b      	mov	r3, r7
   e1d46:	f000 ffcb 	bl	e2ce0 <__aeabi_dmul>
   e1d4a:	a342      	add	r3, pc, #264	; (adr r3, e1e54 <__kernel_sin+0x17c>)
   e1d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d50:	f000 fe14 	bl	e297c <__adddf3>
   e1d54:	4632      	mov	r2, r6
   e1d56:	463b      	mov	r3, r7
   e1d58:	f000 ffc2 	bl	e2ce0 <__aeabi_dmul>
   e1d5c:	a33f      	add	r3, pc, #252	; (adr r3, e1e5c <__kernel_sin+0x184>)
   e1d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d62:	f000 fe09 	bl	e2978 <__aeabi_dsub>
   e1d66:	4632      	mov	r2, r6
   e1d68:	463b      	mov	r3, r7
   e1d6a:	f000 ffb9 	bl	e2ce0 <__aeabi_dmul>
   e1d6e:	a33d      	add	r3, pc, #244	; (adr r3, e1e64 <__kernel_sin+0x18c>)
   e1d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1d74:	f000 fe02 	bl	e297c <__adddf3>
   e1d78:	e9cd 0100 	strd	r0, r1, [sp]
   e1d7c:	f1ba 0f00 	cmp.w	sl, #0
   e1d80:	d037      	beq.n	e1df2 <__kernel_sin+0x11a>
   e1d82:	2200      	movs	r2, #0
   e1d84:	4b2e      	ldr	r3, [pc, #184]	; (e1e40 <__kernel_sin+0x168>)
   e1d86:	ec51 0b18 	vmov	r0, r1, d8
   e1d8a:	f000 ffa9 	bl	e2ce0 <__aeabi_dmul>
   e1d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1d92:	4682      	mov	sl, r0
   e1d94:	468b      	mov	fp, r1
   e1d96:	4640      	mov	r0, r8
   e1d98:	4649      	mov	r1, r9
   e1d9a:	f000 ffa1 	bl	e2ce0 <__aeabi_dmul>
   e1d9e:	4602      	mov	r2, r0
   e1da0:	460b      	mov	r3, r1
   e1da2:	4650      	mov	r0, sl
   e1da4:	4659      	mov	r1, fp
   e1da6:	f000 fde7 	bl	e2978 <__aeabi_dsub>
   e1daa:	4632      	mov	r2, r6
   e1dac:	463b      	mov	r3, r7
   e1dae:	f000 ff97 	bl	e2ce0 <__aeabi_dmul>
   e1db2:	ec53 2b18 	vmov	r2, r3, d8
   e1db6:	f000 fddf 	bl	e2978 <__aeabi_dsub>
   e1dba:	a31f      	add	r3, pc, #124	; (adr r3, e1e38 <__kernel_sin+0x160>)
   e1dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1dc0:	4606      	mov	r6, r0
   e1dc2:	460f      	mov	r7, r1
   e1dc4:	4640      	mov	r0, r8
   e1dc6:	4649      	mov	r1, r9
   e1dc8:	f000 ff8a 	bl	e2ce0 <__aeabi_dmul>
   e1dcc:	4602      	mov	r2, r0
   e1dce:	460b      	mov	r3, r1
   e1dd0:	4630      	mov	r0, r6
   e1dd2:	4639      	mov	r1, r7
   e1dd4:	f000 fdd2 	bl	e297c <__adddf3>
   e1dd8:	4602      	mov	r2, r0
   e1dda:	460b      	mov	r3, r1
   e1ddc:	4620      	mov	r0, r4
   e1dde:	4629      	mov	r1, r5
   e1de0:	f000 fdca 	bl	e2978 <__aeabi_dsub>
   e1de4:	ec41 0b10 	vmov	d0, r0, r1
   e1de8:	b003      	add	sp, #12
   e1dea:	ecbd 8b02 	vpop	{d8}
   e1dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1df2:	4602      	mov	r2, r0
   e1df4:	460b      	mov	r3, r1
   e1df6:	4630      	mov	r0, r6
   e1df8:	4639      	mov	r1, r7
   e1dfa:	f000 ff71 	bl	e2ce0 <__aeabi_dmul>
   e1dfe:	a30e      	add	r3, pc, #56	; (adr r3, e1e38 <__kernel_sin+0x160>)
   e1e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1e04:	f000 fdb8 	bl	e2978 <__aeabi_dsub>
   e1e08:	4642      	mov	r2, r8
   e1e0a:	464b      	mov	r3, r9
   e1e0c:	f000 ff68 	bl	e2ce0 <__aeabi_dmul>
   e1e10:	4622      	mov	r2, r4
   e1e12:	462b      	mov	r3, r5
   e1e14:	f000 fdb2 	bl	e297c <__adddf3>
   e1e18:	ec41 0b10 	vmov	d0, r0, r1
   e1e1c:	b003      	add	sp, #12
   e1e1e:	ecbd 8b02 	vpop	{d8}
   e1e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1e26:	ec45 4b10 	vmov	d0, r4, r5
   e1e2a:	b003      	add	sp, #12
   e1e2c:	ecbd 8b02 	vpop	{d8}
   e1e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1e34:	f3af 8000 	nop.w
   e1e38:	55555549 	.word	0x55555549
   e1e3c:	3fc55555 	.word	0x3fc55555
   e1e40:	3fe00000 	.word	0x3fe00000
   e1e44:	5acfd57c 	.word	0x5acfd57c
   e1e48:	3de5d93a 	.word	0x3de5d93a
   e1e4c:	8a2b9ceb 	.word	0x8a2b9ceb
   e1e50:	3e5ae5e6 	.word	0x3e5ae5e6
   e1e54:	57b1fe7d 	.word	0x57b1fe7d
   e1e58:	3ec71de3 	.word	0x3ec71de3
   e1e5c:	19c161d5 	.word	0x19c161d5
   e1e60:	3f2a01a0 	.word	0x3f2a01a0
   e1e64:	1110f8a6 	.word	0x1110f8a6
   e1e68:	3f811111 	.word	0x3f811111
   e1e6c:	00000000 	.word	0x00000000

000e1e70 <__kernel_tan>:
   e1e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1e74:	ec59 8b10 	vmov	r8, r9, d0
   e1e78:	4be1      	ldr	r3, [pc, #900]	; (e2200 <__kernel_tan+0x390>)
   e1e7a:	b089      	sub	sp, #36	; 0x24
   e1e7c:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e1e80:	429e      	cmp	r6, r3
   e1e82:	f8cd 9014 	str.w	r9, [sp, #20]
   e1e86:	4607      	mov	r7, r0
   e1e88:	ed8d 1b00 	vstr	d1, [sp]
   e1e8c:	dc19      	bgt.n	e1ec2 <__kernel_tan+0x52>
   e1e8e:	ee10 0a10 	vmov	r0, s0
   e1e92:	4649      	mov	r1, r9
   e1e94:	f001 f9d4 	bl	e3240 <__aeabi_d2iz>
   e1e98:	bba0      	cbnz	r0, e1f04 <__kernel_tan+0x94>
   e1e9a:	4643      	mov	r3, r8
   e1e9c:	431e      	orrs	r6, r3
   e1e9e:	1c7b      	adds	r3, r7, #1
   e1ea0:	4333      	orrs	r3, r6
   e1ea2:	f000 815e 	beq.w	e2162 <__kernel_tan+0x2f2>
   e1ea6:	2f01      	cmp	r7, #1
   e1ea8:	f000 81c2 	beq.w	e2230 <__kernel_tan+0x3c0>
   e1eac:	4642      	mov	r2, r8
   e1eae:	464b      	mov	r3, r9
   e1eb0:	2000      	movs	r0, #0
   e1eb2:	49d4      	ldr	r1, [pc, #848]	; (e2204 <__kernel_tan+0x394>)
   e1eb4:	f001 f83e 	bl	e2f34 <__aeabi_ddiv>
   e1eb8:	ec41 0b10 	vmov	d0, r0, r1
   e1ebc:	b009      	add	sp, #36	; 0x24
   e1ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1ec2:	4bd1      	ldr	r3, [pc, #836]	; (e2208 <__kernel_tan+0x398>)
   e1ec4:	429e      	cmp	r6, r3
   e1ec6:	dd1d      	ble.n	e1f04 <__kernel_tan+0x94>
   e1ec8:	9b05      	ldr	r3, [sp, #20]
   e1eca:	2b00      	cmp	r3, #0
   e1ecc:	f2c0 81a0 	blt.w	e2210 <__kernel_tan+0x3a0>
   e1ed0:	4642      	mov	r2, r8
   e1ed2:	464b      	mov	r3, r9
   e1ed4:	a1aa      	add	r1, pc, #680	; (adr r1, e2180 <__kernel_tan+0x310>)
   e1ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1eda:	f000 fd4d 	bl	e2978 <__aeabi_dsub>
   e1ede:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1ee2:	4604      	mov	r4, r0
   e1ee4:	460d      	mov	r5, r1
   e1ee6:	a1a8      	add	r1, pc, #672	; (adr r1, e2188 <__kernel_tan+0x318>)
   e1ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1eec:	f000 fd44 	bl	e2978 <__aeabi_dsub>
   e1ef0:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e2190 <__kernel_tan+0x320>
   e1ef4:	4622      	mov	r2, r4
   e1ef6:	462b      	mov	r3, r5
   e1ef8:	ed8d 7b00 	vstr	d7, [sp]
   e1efc:	f000 fd3e 	bl	e297c <__adddf3>
   e1f00:	4680      	mov	r8, r0
   e1f02:	4689      	mov	r9, r1
   e1f04:	4642      	mov	r2, r8
   e1f06:	464b      	mov	r3, r9
   e1f08:	4640      	mov	r0, r8
   e1f0a:	4649      	mov	r1, r9
   e1f0c:	f000 fee8 	bl	e2ce0 <__aeabi_dmul>
   e1f10:	4602      	mov	r2, r0
   e1f12:	460b      	mov	r3, r1
   e1f14:	4682      	mov	sl, r0
   e1f16:	468b      	mov	fp, r1
   e1f18:	f000 fee2 	bl	e2ce0 <__aeabi_dmul>
   e1f1c:	4652      	mov	r2, sl
   e1f1e:	4604      	mov	r4, r0
   e1f20:	460d      	mov	r5, r1
   e1f22:	465b      	mov	r3, fp
   e1f24:	4640      	mov	r0, r8
   e1f26:	4649      	mov	r1, r9
   e1f28:	f000 feda 	bl	e2ce0 <__aeabi_dmul>
   e1f2c:	a39a      	add	r3, pc, #616	; (adr r3, e2198 <__kernel_tan+0x328>)
   e1f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e1f36:	4620      	mov	r0, r4
   e1f38:	4629      	mov	r1, r5
   e1f3a:	f000 fed1 	bl	e2ce0 <__aeabi_dmul>
   e1f3e:	a398      	add	r3, pc, #608	; (adr r3, e21a0 <__kernel_tan+0x330>)
   e1f40:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f44:	f000 fd1a 	bl	e297c <__adddf3>
   e1f48:	4622      	mov	r2, r4
   e1f4a:	462b      	mov	r3, r5
   e1f4c:	f000 fec8 	bl	e2ce0 <__aeabi_dmul>
   e1f50:	a395      	add	r3, pc, #596	; (adr r3, e21a8 <__kernel_tan+0x338>)
   e1f52:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f56:	f000 fd11 	bl	e297c <__adddf3>
   e1f5a:	4622      	mov	r2, r4
   e1f5c:	462b      	mov	r3, r5
   e1f5e:	f000 febf 	bl	e2ce0 <__aeabi_dmul>
   e1f62:	a393      	add	r3, pc, #588	; (adr r3, e21b0 <__kernel_tan+0x340>)
   e1f64:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f68:	f000 fd08 	bl	e297c <__adddf3>
   e1f6c:	4622      	mov	r2, r4
   e1f6e:	462b      	mov	r3, r5
   e1f70:	f000 feb6 	bl	e2ce0 <__aeabi_dmul>
   e1f74:	a390      	add	r3, pc, #576	; (adr r3, e21b8 <__kernel_tan+0x348>)
   e1f76:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f7a:	f000 fcff 	bl	e297c <__adddf3>
   e1f7e:	4622      	mov	r2, r4
   e1f80:	462b      	mov	r3, r5
   e1f82:	f000 fead 	bl	e2ce0 <__aeabi_dmul>
   e1f86:	a38e      	add	r3, pc, #568	; (adr r3, e21c0 <__kernel_tan+0x350>)
   e1f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f8c:	f000 fcf6 	bl	e297c <__adddf3>
   e1f90:	4652      	mov	r2, sl
   e1f92:	465b      	mov	r3, fp
   e1f94:	f000 fea4 	bl	e2ce0 <__aeabi_dmul>
   e1f98:	a38b      	add	r3, pc, #556	; (adr r3, e21c8 <__kernel_tan+0x358>)
   e1f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e1fa2:	4620      	mov	r0, r4
   e1fa4:	4629      	mov	r1, r5
   e1fa6:	f000 fe9b 	bl	e2ce0 <__aeabi_dmul>
   e1faa:	a389      	add	r3, pc, #548	; (adr r3, e21d0 <__kernel_tan+0x360>)
   e1fac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fb0:	f000 fce4 	bl	e297c <__adddf3>
   e1fb4:	4622      	mov	r2, r4
   e1fb6:	462b      	mov	r3, r5
   e1fb8:	f000 fe92 	bl	e2ce0 <__aeabi_dmul>
   e1fbc:	a386      	add	r3, pc, #536	; (adr r3, e21d8 <__kernel_tan+0x368>)
   e1fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fc2:	f000 fcdb 	bl	e297c <__adddf3>
   e1fc6:	4622      	mov	r2, r4
   e1fc8:	462b      	mov	r3, r5
   e1fca:	f000 fe89 	bl	e2ce0 <__aeabi_dmul>
   e1fce:	a384      	add	r3, pc, #528	; (adr r3, e21e0 <__kernel_tan+0x370>)
   e1fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fd4:	f000 fcd2 	bl	e297c <__adddf3>
   e1fd8:	4622      	mov	r2, r4
   e1fda:	462b      	mov	r3, r5
   e1fdc:	f000 fe80 	bl	e2ce0 <__aeabi_dmul>
   e1fe0:	a381      	add	r3, pc, #516	; (adr r3, e21e8 <__kernel_tan+0x378>)
   e1fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fe6:	f000 fcc9 	bl	e297c <__adddf3>
   e1fea:	4622      	mov	r2, r4
   e1fec:	462b      	mov	r3, r5
   e1fee:	f000 fe77 	bl	e2ce0 <__aeabi_dmul>
   e1ff2:	a37f      	add	r3, pc, #508	; (adr r3, e21f0 <__kernel_tan+0x380>)
   e1ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1ff8:	f000 fcc0 	bl	e297c <__adddf3>
   e1ffc:	4602      	mov	r2, r0
   e1ffe:	460b      	mov	r3, r1
   e2000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e2004:	f000 fcba 	bl	e297c <__adddf3>
   e2008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e200c:	f000 fe68 	bl	e2ce0 <__aeabi_dmul>
   e2010:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2014:	4622      	mov	r2, r4
   e2016:	462b      	mov	r3, r5
   e2018:	f000 fcb0 	bl	e297c <__adddf3>
   e201c:	4652      	mov	r2, sl
   e201e:	465b      	mov	r3, fp
   e2020:	f000 fe5e 	bl	e2ce0 <__aeabi_dmul>
   e2024:	4602      	mov	r2, r0
   e2026:	460b      	mov	r3, r1
   e2028:	4620      	mov	r0, r4
   e202a:	4629      	mov	r1, r5
   e202c:	f000 fca6 	bl	e297c <__adddf3>
   e2030:	a371      	add	r3, pc, #452	; (adr r3, e21f8 <__kernel_tan+0x388>)
   e2032:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2036:	4604      	mov	r4, r0
   e2038:	460d      	mov	r5, r1
   e203a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e203e:	f000 fe4f 	bl	e2ce0 <__aeabi_dmul>
   e2042:	4622      	mov	r2, r4
   e2044:	462b      	mov	r3, r5
   e2046:	f000 fc99 	bl	e297c <__adddf3>
   e204a:	460b      	mov	r3, r1
   e204c:	4602      	mov	r2, r0
   e204e:	4649      	mov	r1, r9
   e2050:	4640      	mov	r0, r8
   e2052:	e9cd 2300 	strd	r2, r3, [sp]
   e2056:	f000 fc91 	bl	e297c <__adddf3>
   e205a:	4b6b      	ldr	r3, [pc, #428]	; (e2208 <__kernel_tan+0x398>)
   e205c:	429e      	cmp	r6, r3
   e205e:	4604      	mov	r4, r0
   e2060:	460d      	mov	r5, r1
   e2062:	dc3c      	bgt.n	e20de <__kernel_tan+0x26e>
   e2064:	2f01      	cmp	r7, #1
   e2066:	f000 80e0 	beq.w	e222a <__kernel_tan+0x3ba>
   e206a:	4602      	mov	r2, r0
   e206c:	460b      	mov	r3, r1
   e206e:	2000      	movs	r0, #0
   e2070:	4964      	ldr	r1, [pc, #400]	; (e2204 <__kernel_tan+0x394>)
   e2072:	f000 ff5f 	bl	e2f34 <__aeabi_ddiv>
   e2076:	2400      	movs	r4, #0
   e2078:	460f      	mov	r7, r1
   e207a:	464b      	mov	r3, r9
   e207c:	4606      	mov	r6, r0
   e207e:	4629      	mov	r1, r5
   e2080:	4620      	mov	r0, r4
   e2082:	4642      	mov	r2, r8
   e2084:	f000 fc78 	bl	e2978 <__aeabi_dsub>
   e2088:	4602      	mov	r2, r0
   e208a:	460b      	mov	r3, r1
   e208c:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2090:	f000 fc72 	bl	e2978 <__aeabi_dsub>
   e2094:	4622      	mov	r2, r4
   e2096:	463b      	mov	r3, r7
   e2098:	f000 fe22 	bl	e2ce0 <__aeabi_dmul>
   e209c:	46a2      	mov	sl, r4
   e209e:	46a9      	mov	r9, r5
   e20a0:	4604      	mov	r4, r0
   e20a2:	460d      	mov	r5, r1
   e20a4:	4652      	mov	r2, sl
   e20a6:	463b      	mov	r3, r7
   e20a8:	4650      	mov	r0, sl
   e20aa:	4649      	mov	r1, r9
   e20ac:	f000 fe18 	bl	e2ce0 <__aeabi_dmul>
   e20b0:	2200      	movs	r2, #0
   e20b2:	4b56      	ldr	r3, [pc, #344]	; (e220c <__kernel_tan+0x39c>)
   e20b4:	f000 fc62 	bl	e297c <__adddf3>
   e20b8:	4602      	mov	r2, r0
   e20ba:	460b      	mov	r3, r1
   e20bc:	4620      	mov	r0, r4
   e20be:	4629      	mov	r1, r5
   e20c0:	f000 fc5c 	bl	e297c <__adddf3>
   e20c4:	4632      	mov	r2, r6
   e20c6:	463b      	mov	r3, r7
   e20c8:	f000 fe0a 	bl	e2ce0 <__aeabi_dmul>
   e20cc:	4652      	mov	r2, sl
   e20ce:	463b      	mov	r3, r7
   e20d0:	f000 fc54 	bl	e297c <__adddf3>
   e20d4:	ec41 0b10 	vmov	d0, r0, r1
   e20d8:	b009      	add	sp, #36	; 0x24
   e20da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e20de:	4638      	mov	r0, r7
   e20e0:	f000 fd98 	bl	e2c14 <__aeabi_i2d>
   e20e4:	4622      	mov	r2, r4
   e20e6:	4606      	mov	r6, r0
   e20e8:	460f      	mov	r7, r1
   e20ea:	462b      	mov	r3, r5
   e20ec:	4620      	mov	r0, r4
   e20ee:	4629      	mov	r1, r5
   e20f0:	f000 fdf6 	bl	e2ce0 <__aeabi_dmul>
   e20f4:	4632      	mov	r2, r6
   e20f6:	4682      	mov	sl, r0
   e20f8:	468b      	mov	fp, r1
   e20fa:	463b      	mov	r3, r7
   e20fc:	4620      	mov	r0, r4
   e20fe:	4629      	mov	r1, r5
   e2100:	f000 fc3c 	bl	e297c <__adddf3>
   e2104:	4602      	mov	r2, r0
   e2106:	460b      	mov	r3, r1
   e2108:	4650      	mov	r0, sl
   e210a:	4659      	mov	r1, fp
   e210c:	f000 ff12 	bl	e2f34 <__aeabi_ddiv>
   e2110:	e9dd 2300 	ldrd	r2, r3, [sp]
   e2114:	f000 fc30 	bl	e2978 <__aeabi_dsub>
   e2118:	4602      	mov	r2, r0
   e211a:	460b      	mov	r3, r1
   e211c:	4640      	mov	r0, r8
   e211e:	4649      	mov	r1, r9
   e2120:	f000 fc2a 	bl	e2978 <__aeabi_dsub>
   e2124:	4602      	mov	r2, r0
   e2126:	460b      	mov	r3, r1
   e2128:	f000 fc28 	bl	e297c <__adddf3>
   e212c:	4602      	mov	r2, r0
   e212e:	460b      	mov	r3, r1
   e2130:	4630      	mov	r0, r6
   e2132:	4639      	mov	r1, r7
   e2134:	f000 fc20 	bl	e2978 <__aeabi_dsub>
   e2138:	9b05      	ldr	r3, [sp, #20]
   e213a:	4604      	mov	r4, r0
   e213c:	1798      	asrs	r0, r3, #30
   e213e:	f000 0002 	and.w	r0, r0, #2
   e2142:	f1c0 0001 	rsb	r0, r0, #1
   e2146:	460d      	mov	r5, r1
   e2148:	f000 fd64 	bl	e2c14 <__aeabi_i2d>
   e214c:	4602      	mov	r2, r0
   e214e:	460b      	mov	r3, r1
   e2150:	4620      	mov	r0, r4
   e2152:	4629      	mov	r1, r5
   e2154:	f000 fdc4 	bl	e2ce0 <__aeabi_dmul>
   e2158:	ec41 0b10 	vmov	d0, r0, r1
   e215c:	b009      	add	sp, #36	; 0x24
   e215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2162:	ec49 8b10 	vmov	d0, r8, r9
   e2166:	f7fb fbb3 	bl	dd8d0 <fabs>
   e216a:	2000      	movs	r0, #0
   e216c:	ec53 2b10 	vmov	r2, r3, d0
   e2170:	4926      	ldr	r1, [pc, #152]	; (e220c <__kernel_tan+0x39c>)
   e2172:	f000 fedf 	bl	e2f34 <__aeabi_ddiv>
   e2176:	ec41 0b10 	vmov	d0, r0, r1
   e217a:	e7ad      	b.n	e20d8 <__kernel_tan+0x268>
   e217c:	f3af 8000 	nop.w
   e2180:	54442d18 	.word	0x54442d18
   e2184:	3fe921fb 	.word	0x3fe921fb
   e2188:	33145c07 	.word	0x33145c07
   e218c:	3c81a626 	.word	0x3c81a626
	...
   e2198:	74bf7ad4 	.word	0x74bf7ad4
   e219c:	3efb2a70 	.word	0x3efb2a70
   e21a0:	32f0a7e9 	.word	0x32f0a7e9
   e21a4:	3f12b80f 	.word	0x3f12b80f
   e21a8:	1a8d1068 	.word	0x1a8d1068
   e21ac:	3f3026f7 	.word	0x3f3026f7
   e21b0:	fee08315 	.word	0xfee08315
   e21b4:	3f57dbc8 	.word	0x3f57dbc8
   e21b8:	e96e8493 	.word	0xe96e8493
   e21bc:	3f8226e3 	.word	0x3f8226e3
   e21c0:	1bb341fe 	.word	0x1bb341fe
   e21c4:	3faba1ba 	.word	0x3faba1ba
   e21c8:	db605373 	.word	0xdb605373
   e21cc:	bef375cb 	.word	0xbef375cb
   e21d0:	a03792a6 	.word	0xa03792a6
   e21d4:	3f147e88 	.word	0x3f147e88
   e21d8:	f2f26501 	.word	0xf2f26501
   e21dc:	3f4344d8 	.word	0x3f4344d8
   e21e0:	c9560328 	.word	0xc9560328
   e21e4:	3f6d6d22 	.word	0x3f6d6d22
   e21e8:	8406d637 	.word	0x8406d637
   e21ec:	3f9664f4 	.word	0x3f9664f4
   e21f0:	1110fe7a 	.word	0x1110fe7a
   e21f4:	3fc11111 	.word	0x3fc11111
   e21f8:	55555563 	.word	0x55555563
   e21fc:	3fd55555 	.word	0x3fd55555
   e2200:	3e2fffff 	.word	0x3e2fffff
   e2204:	bff00000 	.word	0xbff00000
   e2208:	3fe59427 	.word	0x3fe59427
   e220c:	3ff00000 	.word	0x3ff00000
   e2210:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2214:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e2218:	4622      	mov	r2, r4
   e221a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e221e:	ee10 8a10 	vmov	r8, s0
   e2222:	4689      	mov	r9, r1
   e2224:	e9cd 2300 	strd	r2, r3, [sp]
   e2228:	e652      	b.n	e1ed0 <__kernel_tan+0x60>
   e222a:	ec45 4b10 	vmov	d0, r4, r5
   e222e:	e753      	b.n	e20d8 <__kernel_tan+0x268>
   e2230:	ec49 8b10 	vmov	d0, r8, r9
   e2234:	e750      	b.n	e20d8 <__kernel_tan+0x268>
   e2236:	bf00      	nop

000e2238 <expm1>:
   e2238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e223c:	ec5b ab10 	vmov	sl, fp, d0
   e2240:	49d7      	ldr	r1, [pc, #860]	; (e25a0 <expm1+0x368>)
   e2242:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2246:	428b      	cmp	r3, r1
   e2248:	b085      	sub	sp, #20
   e224a:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e224e:	d953      	bls.n	e22f8 <expm1+0xc0>
   e2250:	49d4      	ldr	r1, [pc, #848]	; (e25a4 <expm1+0x36c>)
   e2252:	428b      	cmp	r3, r1
   e2254:	f200 8105 	bhi.w	e2462 <expm1+0x22a>
   e2258:	2c00      	cmp	r4, #0
   e225a:	f000 81de 	beq.w	e261a <expm1+0x3e2>
   e225e:	a3b6      	add	r3, pc, #728	; (adr r3, e2538 <expm1+0x300>)
   e2260:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2264:	4650      	mov	r0, sl
   e2266:	4659      	mov	r1, fp
   e2268:	f000 fb88 	bl	e297c <__adddf3>
   e226c:	2200      	movs	r2, #0
   e226e:	2300      	movs	r3, #0
   e2270:	f000 ffa8 	bl	e31c4 <__aeabi_dcmplt>
   e2274:	2800      	cmp	r0, #0
   e2276:	f040 80ff 	bne.w	e2478 <expm1+0x240>
   e227a:	a3b1      	add	r3, pc, #708	; (adr r3, e2540 <expm1+0x308>)
   e227c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2280:	4650      	mov	r0, sl
   e2282:	4659      	mov	r1, fp
   e2284:	f000 fd2c 	bl	e2ce0 <__aeabi_dmul>
   e2288:	4602      	mov	r2, r0
   e228a:	460b      	mov	r3, r1
   e228c:	2000      	movs	r0, #0
   e228e:	49c6      	ldr	r1, [pc, #792]	; (e25a8 <expm1+0x370>)
   e2290:	f000 fb74 	bl	e297c <__adddf3>
   e2294:	f000 ffd4 	bl	e3240 <__aeabi_d2iz>
   e2298:	9001      	str	r0, [sp, #4]
   e229a:	f000 fcbb 	bl	e2c14 <__aeabi_i2d>
   e229e:	a3aa      	add	r3, pc, #680	; (adr r3, e2548 <expm1+0x310>)
   e22a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22a4:	4606      	mov	r6, r0
   e22a6:	460f      	mov	r7, r1
   e22a8:	f000 fd1a 	bl	e2ce0 <__aeabi_dmul>
   e22ac:	4602      	mov	r2, r0
   e22ae:	460b      	mov	r3, r1
   e22b0:	4650      	mov	r0, sl
   e22b2:	4659      	mov	r1, fp
   e22b4:	f000 fb60 	bl	e2978 <__aeabi_dsub>
   e22b8:	a3a5      	add	r3, pc, #660	; (adr r3, e2550 <expm1+0x318>)
   e22ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22be:	4680      	mov	r8, r0
   e22c0:	4689      	mov	r9, r1
   e22c2:	4630      	mov	r0, r6
   e22c4:	4639      	mov	r1, r7
   e22c6:	f000 fd0b 	bl	e2ce0 <__aeabi_dmul>
   e22ca:	4606      	mov	r6, r0
   e22cc:	460f      	mov	r7, r1
   e22ce:	4632      	mov	r2, r6
   e22d0:	463b      	mov	r3, r7
   e22d2:	4640      	mov	r0, r8
   e22d4:	4649      	mov	r1, r9
   e22d6:	f000 fb4f 	bl	e2978 <__aeabi_dsub>
   e22da:	4602      	mov	r2, r0
   e22dc:	460b      	mov	r3, r1
   e22de:	4682      	mov	sl, r0
   e22e0:	468b      	mov	fp, r1
   e22e2:	4640      	mov	r0, r8
   e22e4:	4649      	mov	r1, r9
   e22e6:	f000 fb47 	bl	e2978 <__aeabi_dsub>
   e22ea:	4632      	mov	r2, r6
   e22ec:	463b      	mov	r3, r7
   e22ee:	f000 fb43 	bl	e2978 <__aeabi_dsub>
   e22f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e22f6:	e009      	b.n	e230c <expm1+0xd4>
   e22f8:	4aac      	ldr	r2, [pc, #688]	; (e25ac <expm1+0x374>)
   e22fa:	4293      	cmp	r3, r2
   e22fc:	f200 80e7 	bhi.w	e24ce <expm1+0x296>
   e2300:	4aab      	ldr	r2, [pc, #684]	; (e25b0 <expm1+0x378>)
   e2302:	4293      	cmp	r3, r2
   e2304:	f240 8162 	bls.w	e25cc <expm1+0x394>
   e2308:	2300      	movs	r3, #0
   e230a:	9301      	str	r3, [sp, #4]
   e230c:	2200      	movs	r2, #0
   e230e:	4ba9      	ldr	r3, [pc, #676]	; (e25b4 <expm1+0x37c>)
   e2310:	4650      	mov	r0, sl
   e2312:	4659      	mov	r1, fp
   e2314:	f000 fce4 	bl	e2ce0 <__aeabi_dmul>
   e2318:	4606      	mov	r6, r0
   e231a:	460f      	mov	r7, r1
   e231c:	4602      	mov	r2, r0
   e231e:	460b      	mov	r3, r1
   e2320:	4650      	mov	r0, sl
   e2322:	4659      	mov	r1, fp
   e2324:	f000 fcdc 	bl	e2ce0 <__aeabi_dmul>
   e2328:	a38b      	add	r3, pc, #556	; (adr r3, e2558 <expm1+0x320>)
   e232a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e232e:	4604      	mov	r4, r0
   e2330:	460d      	mov	r5, r1
   e2332:	f000 fcd5 	bl	e2ce0 <__aeabi_dmul>
   e2336:	a38a      	add	r3, pc, #552	; (adr r3, e2560 <expm1+0x328>)
   e2338:	e9d3 2300 	ldrd	r2, r3, [r3]
   e233c:	f000 fb1e 	bl	e297c <__adddf3>
   e2340:	4622      	mov	r2, r4
   e2342:	462b      	mov	r3, r5
   e2344:	f000 fccc 	bl	e2ce0 <__aeabi_dmul>
   e2348:	a387      	add	r3, pc, #540	; (adr r3, e2568 <expm1+0x330>)
   e234a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e234e:	f000 fb13 	bl	e2978 <__aeabi_dsub>
   e2352:	4622      	mov	r2, r4
   e2354:	462b      	mov	r3, r5
   e2356:	f000 fcc3 	bl	e2ce0 <__aeabi_dmul>
   e235a:	a385      	add	r3, pc, #532	; (adr r3, e2570 <expm1+0x338>)
   e235c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2360:	f000 fb0c 	bl	e297c <__adddf3>
   e2364:	4622      	mov	r2, r4
   e2366:	462b      	mov	r3, r5
   e2368:	f000 fcba 	bl	e2ce0 <__aeabi_dmul>
   e236c:	a382      	add	r3, pc, #520	; (adr r3, e2578 <expm1+0x340>)
   e236e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2372:	f000 fb01 	bl	e2978 <__aeabi_dsub>
   e2376:	4622      	mov	r2, r4
   e2378:	462b      	mov	r3, r5
   e237a:	f000 fcb1 	bl	e2ce0 <__aeabi_dmul>
   e237e:	2200      	movs	r2, #0
   e2380:	4b8d      	ldr	r3, [pc, #564]	; (e25b8 <expm1+0x380>)
   e2382:	f000 fafb 	bl	e297c <__adddf3>
   e2386:	4680      	mov	r8, r0
   e2388:	4689      	mov	r9, r1
   e238a:	4602      	mov	r2, r0
   e238c:	460b      	mov	r3, r1
   e238e:	4630      	mov	r0, r6
   e2390:	4639      	mov	r1, r7
   e2392:	f000 fca5 	bl	e2ce0 <__aeabi_dmul>
   e2396:	4602      	mov	r2, r0
   e2398:	460b      	mov	r3, r1
   e239a:	2000      	movs	r0, #0
   e239c:	4987      	ldr	r1, [pc, #540]	; (e25bc <expm1+0x384>)
   e239e:	f000 faeb 	bl	e2978 <__aeabi_dsub>
   e23a2:	4606      	mov	r6, r0
   e23a4:	4602      	mov	r2, r0
   e23a6:	460b      	mov	r3, r1
   e23a8:	460f      	mov	r7, r1
   e23aa:	4640      	mov	r0, r8
   e23ac:	4649      	mov	r1, r9
   e23ae:	f000 fae3 	bl	e2978 <__aeabi_dsub>
   e23b2:	4632      	mov	r2, r6
   e23b4:	4680      	mov	r8, r0
   e23b6:	4689      	mov	r9, r1
   e23b8:	463b      	mov	r3, r7
   e23ba:	4650      	mov	r0, sl
   e23bc:	4659      	mov	r1, fp
   e23be:	f000 fc8f 	bl	e2ce0 <__aeabi_dmul>
   e23c2:	4602      	mov	r2, r0
   e23c4:	460b      	mov	r3, r1
   e23c6:	2000      	movs	r0, #0
   e23c8:	497d      	ldr	r1, [pc, #500]	; (e25c0 <expm1+0x388>)
   e23ca:	f000 fad5 	bl	e2978 <__aeabi_dsub>
   e23ce:	4602      	mov	r2, r0
   e23d0:	460b      	mov	r3, r1
   e23d2:	4640      	mov	r0, r8
   e23d4:	4649      	mov	r1, r9
   e23d6:	f000 fdad 	bl	e2f34 <__aeabi_ddiv>
   e23da:	4622      	mov	r2, r4
   e23dc:	462b      	mov	r3, r5
   e23de:	f000 fc7f 	bl	e2ce0 <__aeabi_dmul>
   e23e2:	9e01      	ldr	r6, [sp, #4]
   e23e4:	4602      	mov	r2, r0
   e23e6:	460b      	mov	r3, r1
   e23e8:	2e00      	cmp	r6, #0
   e23ea:	d048      	beq.n	e247e <expm1+0x246>
   e23ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e23f0:	4632      	mov	r2, r6
   e23f2:	463b      	mov	r3, r7
   e23f4:	f000 fac0 	bl	e2978 <__aeabi_dsub>
   e23f8:	4652      	mov	r2, sl
   e23fa:	465b      	mov	r3, fp
   e23fc:	f000 fc70 	bl	e2ce0 <__aeabi_dmul>
   e2400:	4632      	mov	r2, r6
   e2402:	463b      	mov	r3, r7
   e2404:	f000 fab8 	bl	e2978 <__aeabi_dsub>
   e2408:	462b      	mov	r3, r5
   e240a:	4622      	mov	r2, r4
   e240c:	f000 fab4 	bl	e2978 <__aeabi_dsub>
   e2410:	9b01      	ldr	r3, [sp, #4]
   e2412:	3301      	adds	r3, #1
   e2414:	4606      	mov	r6, r0
   e2416:	460f      	mov	r7, r1
   e2418:	f000 810b 	beq.w	e2632 <expm1+0x3fa>
   e241c:	9b01      	ldr	r3, [sp, #4]
   e241e:	2b01      	cmp	r3, #1
   e2420:	f000 80df 	beq.w	e25e2 <expm1+0x3aa>
   e2424:	9b01      	ldr	r3, [sp, #4]
   e2426:	3301      	adds	r3, #1
   e2428:	2b39      	cmp	r3, #57	; 0x39
   e242a:	d866      	bhi.n	e24fa <expm1+0x2c2>
   e242c:	9b01      	ldr	r3, [sp, #4]
   e242e:	2b13      	cmp	r3, #19
   e2430:	f340 8110 	ble.w	e2654 <expm1+0x41c>
   e2434:	9c01      	ldr	r4, [sp, #4]
   e2436:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e243a:	3503      	adds	r5, #3
   e243c:	2200      	movs	r2, #0
   e243e:	052b      	lsls	r3, r5, #20
   e2440:	f000 fa9c 	bl	e297c <__adddf3>
   e2444:	4602      	mov	r2, r0
   e2446:	460b      	mov	r3, r1
   e2448:	4650      	mov	r0, sl
   e244a:	4659      	mov	r1, fp
   e244c:	f000 fa94 	bl	e2978 <__aeabi_dsub>
   e2450:	2200      	movs	r2, #0
   e2452:	4b59      	ldr	r3, [pc, #356]	; (e25b8 <expm1+0x380>)
   e2454:	f000 fa92 	bl	e297c <__adddf3>
   e2458:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e245c:	ec41 0b10 	vmov	d0, r0, r1
   e2460:	e01d      	b.n	e249e <expm1+0x266>
   e2462:	4958      	ldr	r1, [pc, #352]	; (e25c4 <expm1+0x38c>)
   e2464:	428b      	cmp	r3, r1
   e2466:	d91d      	bls.n	e24a4 <expm1+0x26c>
   e2468:	ee10 3a10 	vmov	r3, s0
   e246c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e2470:	4313      	orrs	r3, r2
   e2472:	f040 8128 	bne.w	e26c6 <expm1+0x48e>
   e2476:	b194      	cbz	r4, e249e <expm1+0x266>
   e2478:	ed9f 0b41 	vldr	d0, [pc, #260]	; e2580 <expm1+0x348>
   e247c:	e00f      	b.n	e249e <expm1+0x266>
   e247e:	4650      	mov	r0, sl
   e2480:	4659      	mov	r1, fp
   e2482:	f000 fc2d 	bl	e2ce0 <__aeabi_dmul>
   e2486:	4622      	mov	r2, r4
   e2488:	462b      	mov	r3, r5
   e248a:	f000 fa75 	bl	e2978 <__aeabi_dsub>
   e248e:	4602      	mov	r2, r0
   e2490:	460b      	mov	r3, r1
   e2492:	4650      	mov	r0, sl
   e2494:	4659      	mov	r1, fp
   e2496:	f000 fa6f 	bl	e2978 <__aeabi_dsub>
   e249a:	ec41 0b10 	vmov	d0, r0, r1
   e249e:	b005      	add	sp, #20
   e24a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e24a4:	a338      	add	r3, pc, #224	; (adr r3, e2588 <expm1+0x350>)
   e24a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e24aa:	ee10 0a10 	vmov	r0, s0
   e24ae:	4659      	mov	r1, fp
   e24b0:	f000 fea6 	bl	e3200 <__aeabi_dcmpgt>
   e24b4:	2800      	cmp	r0, #0
   e24b6:	f43f aecf 	beq.w	e2258 <expm1+0x20>
   e24ba:	a335      	add	r3, pc, #212	; (adr r3, e2590 <expm1+0x358>)
   e24bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e24c0:	4610      	mov	r0, r2
   e24c2:	4619      	mov	r1, r3
   e24c4:	f000 fc0c 	bl	e2ce0 <__aeabi_dmul>
   e24c8:	ec41 0b10 	vmov	d0, r0, r1
   e24cc:	e7e7      	b.n	e249e <expm1+0x266>
   e24ce:	4a3e      	ldr	r2, [pc, #248]	; (e25c8 <expm1+0x390>)
   e24d0:	4293      	cmp	r3, r2
   e24d2:	f200 80d7 	bhi.w	e2684 <expm1+0x44c>
   e24d6:	ee10 0a10 	vmov	r0, s0
   e24da:	4659      	mov	r1, fp
   e24dc:	a31a      	add	r3, pc, #104	; (adr r3, e2548 <expm1+0x310>)
   e24de:	e9d3 2300 	ldrd	r2, r3, [r3]
   e24e2:	b1f4      	cbz	r4, e2522 <expm1+0x2ea>
   e24e4:	f000 fa4a 	bl	e297c <__adddf3>
   e24e8:	f04f 33ff 	mov.w	r3, #4294967295
   e24ec:	4680      	mov	r8, r0
   e24ee:	4689      	mov	r9, r1
   e24f0:	9301      	str	r3, [sp, #4]
   e24f2:	a729      	add	r7, pc, #164	; (adr r7, e2598 <expm1+0x360>)
   e24f4:	e9d7 6700 	ldrd	r6, r7, [r7]
   e24f8:	e6e9      	b.n	e22ce <expm1+0x96>
   e24fa:	4652      	mov	r2, sl
   e24fc:	465b      	mov	r3, fp
   e24fe:	f000 fa3b 	bl	e2978 <__aeabi_dsub>
   e2502:	4602      	mov	r2, r0
   e2504:	460b      	mov	r3, r1
   e2506:	2000      	movs	r0, #0
   e2508:	492b      	ldr	r1, [pc, #172]	; (e25b8 <expm1+0x380>)
   e250a:	f000 fa35 	bl	e2978 <__aeabi_dsub>
   e250e:	9a01      	ldr	r2, [sp, #4]
   e2510:	4b29      	ldr	r3, [pc, #164]	; (e25b8 <expm1+0x380>)
   e2512:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e2516:	2200      	movs	r2, #0
   e2518:	f000 fa2e 	bl	e2978 <__aeabi_dsub>
   e251c:	ec41 0b10 	vmov	d0, r0, r1
   e2520:	e7bd      	b.n	e249e <expm1+0x266>
   e2522:	f000 fa29 	bl	e2978 <__aeabi_dsub>
   e2526:	2301      	movs	r3, #1
   e2528:	4680      	mov	r8, r0
   e252a:	4689      	mov	r9, r1
   e252c:	9301      	str	r3, [sp, #4]
   e252e:	a708      	add	r7, pc, #32	; (adr r7, e2550 <expm1+0x318>)
   e2530:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2534:	e6cb      	b.n	e22ce <expm1+0x96>
   e2536:	bf00      	nop
   e2538:	c2f8f359 	.word	0xc2f8f359
   e253c:	01a56e1f 	.word	0x01a56e1f
   e2540:	652b82fe 	.word	0x652b82fe
   e2544:	3ff71547 	.word	0x3ff71547
   e2548:	fee00000 	.word	0xfee00000
   e254c:	3fe62e42 	.word	0x3fe62e42
   e2550:	35793c76 	.word	0x35793c76
   e2554:	3dea39ef 	.word	0x3dea39ef
   e2558:	6e09c32d 	.word	0x6e09c32d
   e255c:	be8afdb7 	.word	0xbe8afdb7
   e2560:	86e65239 	.word	0x86e65239
   e2564:	3ed0cfca 	.word	0x3ed0cfca
   e2568:	9eaadbb7 	.word	0x9eaadbb7
   e256c:	3f14ce19 	.word	0x3f14ce19
   e2570:	19fe5585 	.word	0x19fe5585
   e2574:	3f5a01a0 	.word	0x3f5a01a0
   e2578:	111110f4 	.word	0x111110f4
   e257c:	3fa11111 	.word	0x3fa11111
   e2580:	00000000 	.word	0x00000000
   e2584:	bff00000 	.word	0xbff00000
   e2588:	fefa39ef 	.word	0xfefa39ef
   e258c:	40862e42 	.word	0x40862e42
   e2590:	8800759c 	.word	0x8800759c
   e2594:	7e37e43c 	.word	0x7e37e43c
   e2598:	35793c76 	.word	0x35793c76
   e259c:	bdea39ef 	.word	0xbdea39ef
   e25a0:	40436879 	.word	0x40436879
   e25a4:	40862e41 	.word	0x40862e41
   e25a8:	bfe00000 	.word	0xbfe00000
   e25ac:	3fd62e42 	.word	0x3fd62e42
   e25b0:	3c8fffff 	.word	0x3c8fffff
   e25b4:	3fe00000 	.word	0x3fe00000
   e25b8:	3ff00000 	.word	0x3ff00000
   e25bc:	40080000 	.word	0x40080000
   e25c0:	40180000 	.word	0x40180000
   e25c4:	7fefffff 	.word	0x7fefffff
   e25c8:	3ff0a2b1 	.word	0x3ff0a2b1
   e25cc:	a349      	add	r3, pc, #292	; (adr r3, e26f4 <expm1+0x4bc>)
   e25ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25d2:	ee10 0a10 	vmov	r0, s0
   e25d6:	4659      	mov	r1, fp
   e25d8:	f000 f9d0 	bl	e297c <__adddf3>
   e25dc:	4602      	mov	r2, r0
   e25de:	460b      	mov	r3, r1
   e25e0:	e753      	b.n	e248a <expm1+0x252>
   e25e2:	2200      	movs	r2, #0
   e25e4:	4b40      	ldr	r3, [pc, #256]	; (e26e8 <expm1+0x4b0>)
   e25e6:	4650      	mov	r0, sl
   e25e8:	4659      	mov	r1, fp
   e25ea:	f000 fdeb 	bl	e31c4 <__aeabi_dcmplt>
   e25ee:	2800      	cmp	r0, #0
   e25f0:	d058      	beq.n	e26a4 <expm1+0x46c>
   e25f2:	2200      	movs	r2, #0
   e25f4:	4b3d      	ldr	r3, [pc, #244]	; (e26ec <expm1+0x4b4>)
   e25f6:	4650      	mov	r0, sl
   e25f8:	4659      	mov	r1, fp
   e25fa:	f000 f9bf 	bl	e297c <__adddf3>
   e25fe:	4602      	mov	r2, r0
   e2600:	460b      	mov	r3, r1
   e2602:	4630      	mov	r0, r6
   e2604:	4639      	mov	r1, r7
   e2606:	f000 f9b7 	bl	e2978 <__aeabi_dsub>
   e260a:	2200      	movs	r2, #0
   e260c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e2610:	f000 fb66 	bl	e2ce0 <__aeabi_dmul>
   e2614:	ec41 0b10 	vmov	d0, r0, r1
   e2618:	e741      	b.n	e249e <expm1+0x266>
   e261a:	a331      	add	r3, pc, #196	; (adr r3, e26e0 <expm1+0x4a8>)
   e261c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2620:	4650      	mov	r0, sl
   e2622:	4659      	mov	r1, fp
   e2624:	f000 fb5c 	bl	e2ce0 <__aeabi_dmul>
   e2628:	4602      	mov	r2, r0
   e262a:	460b      	mov	r3, r1
   e262c:	2000      	movs	r0, #0
   e262e:	492f      	ldr	r1, [pc, #188]	; (e26ec <expm1+0x4b4>)
   e2630:	e62e      	b.n	e2290 <expm1+0x58>
   e2632:	4602      	mov	r2, r0
   e2634:	460b      	mov	r3, r1
   e2636:	4650      	mov	r0, sl
   e2638:	4659      	mov	r1, fp
   e263a:	f000 f99d 	bl	e2978 <__aeabi_dsub>
   e263e:	2200      	movs	r2, #0
   e2640:	4b2a      	ldr	r3, [pc, #168]	; (e26ec <expm1+0x4b4>)
   e2642:	f000 fb4d 	bl	e2ce0 <__aeabi_dmul>
   e2646:	2200      	movs	r2, #0
   e2648:	4b28      	ldr	r3, [pc, #160]	; (e26ec <expm1+0x4b4>)
   e264a:	f000 f995 	bl	e2978 <__aeabi_dsub>
   e264e:	ec41 0b10 	vmov	d0, r0, r1
   e2652:	e724      	b.n	e249e <expm1+0x266>
   e2654:	9c01      	ldr	r4, [sp, #4]
   e2656:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e265a:	4123      	asrs	r3, r4
   e265c:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e2660:	4652      	mov	r2, sl
   e2662:	465b      	mov	r3, fp
   e2664:	f000 f988 	bl	e2978 <__aeabi_dsub>
   e2668:	2600      	movs	r6, #0
   e266a:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e266e:	4602      	mov	r2, r0
   e2670:	460b      	mov	r3, r1
   e2672:	4630      	mov	r0, r6
   e2674:	4639      	mov	r1, r7
   e2676:	f000 f97f 	bl	e2978 <__aeabi_dsub>
   e267a:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e267e:	ec41 0b10 	vmov	d0, r0, r1
   e2682:	e70c      	b.n	e249e <expm1+0x266>
   e2684:	a316      	add	r3, pc, #88	; (adr r3, e26e0 <expm1+0x4a8>)
   e2686:	e9d3 2300 	ldrd	r2, r3, [r3]
   e268a:	ee10 0a10 	vmov	r0, s0
   e268e:	4659      	mov	r1, fp
   e2690:	f000 fb26 	bl	e2ce0 <__aeabi_dmul>
   e2694:	4602      	mov	r2, r0
   e2696:	460b      	mov	r3, r1
   e2698:	2000      	movs	r0, #0
   e269a:	2c00      	cmp	r4, #0
   e269c:	f47f adf7 	bne.w	e228e <expm1+0x56>
   e26a0:	4912      	ldr	r1, [pc, #72]	; (e26ec <expm1+0x4b4>)
   e26a2:	e5f5      	b.n	e2290 <expm1+0x58>
   e26a4:	4632      	mov	r2, r6
   e26a6:	463b      	mov	r3, r7
   e26a8:	4650      	mov	r0, sl
   e26aa:	4659      	mov	r1, fp
   e26ac:	f000 f964 	bl	e2978 <__aeabi_dsub>
   e26b0:	4602      	mov	r2, r0
   e26b2:	460b      	mov	r3, r1
   e26b4:	f000 f962 	bl	e297c <__adddf3>
   e26b8:	2200      	movs	r2, #0
   e26ba:	4b0d      	ldr	r3, [pc, #52]	; (e26f0 <expm1+0x4b8>)
   e26bc:	f000 f95e 	bl	e297c <__adddf3>
   e26c0:	ec41 0b10 	vmov	d0, r0, r1
   e26c4:	e6eb      	b.n	e249e <expm1+0x266>
   e26c6:	ee10 2a10 	vmov	r2, s0
   e26ca:	ee10 0a10 	vmov	r0, s0
   e26ce:	465b      	mov	r3, fp
   e26d0:	4659      	mov	r1, fp
   e26d2:	f000 f953 	bl	e297c <__adddf3>
   e26d6:	ec41 0b10 	vmov	d0, r0, r1
   e26da:	e6e0      	b.n	e249e <expm1+0x266>
   e26dc:	f3af 8000 	nop.w
   e26e0:	652b82fe 	.word	0x652b82fe
   e26e4:	3ff71547 	.word	0x3ff71547
   e26e8:	bfd00000 	.word	0xbfd00000
   e26ec:	3fe00000 	.word	0x3fe00000
   e26f0:	3ff00000 	.word	0x3ff00000
   e26f4:	8800759c 	.word	0x8800759c
   e26f8:	7e37e43c 	.word	0x7e37e43c

000e26fc <finite>:
   e26fc:	ee10 3a90 	vmov	r3, s1
   e2700:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e2704:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e2708:	0fc0      	lsrs	r0, r0, #31
   e270a:	4770      	bx	lr

000e270c <matherr>:
   e270c:	2000      	movs	r0, #0
   e270e:	4770      	bx	lr

000e2710 <nan>:
   e2710:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2718 <nan+0x8>
   e2714:	4770      	bx	lr
   e2716:	bf00      	nop
   e2718:	00000000 	.word	0x00000000
   e271c:	7ff80000 	.word	0x7ff80000

000e2720 <rint>:
   e2720:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2722:	ec53 2b10 	vmov	r2, r3, d0
   e2726:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e272a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e272e:	2813      	cmp	r0, #19
   e2730:	b083      	sub	sp, #12
   e2732:	4619      	mov	r1, r3
   e2734:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e2738:	ee10 5a10 	vmov	r5, s0
   e273c:	dc2f      	bgt.n	e279e <rint+0x7e>
   e273e:	2800      	cmp	r0, #0
   e2740:	db49      	blt.n	e27d6 <rint+0xb6>
   e2742:	4e3f      	ldr	r6, [pc, #252]	; (e2840 <rint+0x120>)
   e2744:	4106      	asrs	r6, r0
   e2746:	ea03 0706 	and.w	r7, r3, r6
   e274a:	4317      	orrs	r7, r2
   e274c:	d02c      	beq.n	e27a8 <rint+0x88>
   e274e:	0876      	lsrs	r6, r6, #1
   e2750:	4033      	ands	r3, r6
   e2752:	431d      	orrs	r5, r3
   e2754:	d00c      	beq.n	e2770 <rint+0x50>
   e2756:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e275a:	2813      	cmp	r0, #19
   e275c:	ea21 0606 	bic.w	r6, r1, r6
   e2760:	fa43 f100 	asr.w	r1, r3, r0
   e2764:	ea41 0106 	orr.w	r1, r1, r6
   e2768:	bf0c      	ite	eq
   e276a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e276e:	2500      	movne	r5, #0
   e2770:	4834      	ldr	r0, [pc, #208]	; (e2844 <rint+0x124>)
   e2772:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e2776:	462a      	mov	r2, r5
   e2778:	e9d4 4500 	ldrd	r4, r5, [r4]
   e277c:	4610      	mov	r0, r2
   e277e:	462b      	mov	r3, r5
   e2780:	4622      	mov	r2, r4
   e2782:	f000 f8fb 	bl	e297c <__adddf3>
   e2786:	e9cd 0100 	strd	r0, r1, [sp]
   e278a:	4622      	mov	r2, r4
   e278c:	462b      	mov	r3, r5
   e278e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2792:	f000 f8f1 	bl	e2978 <__aeabi_dsub>
   e2796:	ec41 0b10 	vmov	d0, r0, r1
   e279a:	b003      	add	sp, #12
   e279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e279e:	2833      	cmp	r0, #51	; 0x33
   e27a0:	dd06      	ble.n	e27b0 <rint+0x90>
   e27a2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e27a6:	d042      	beq.n	e282e <rint+0x10e>
   e27a8:	ec43 2b10 	vmov	d0, r2, r3
   e27ac:	b003      	add	sp, #12
   e27ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e27b0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e27b4:	f04f 30ff 	mov.w	r0, #4294967295
   e27b8:	40f0      	lsrs	r0, r6
   e27ba:	4202      	tst	r2, r0
   e27bc:	d0f4      	beq.n	e27a8 <rint+0x88>
   e27be:	0840      	lsrs	r0, r0, #1
   e27c0:	4202      	tst	r2, r0
   e27c2:	d0d5      	beq.n	e2770 <rint+0x50>
   e27c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e27c8:	ea25 0000 	bic.w	r0, r5, r0
   e27cc:	fa43 f606 	asr.w	r6, r3, r6
   e27d0:	ea46 0500 	orr.w	r5, r6, r0
   e27d4:	e7cc      	b.n	e2770 <rint+0x50>
   e27d6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e27da:	4310      	orrs	r0, r2
   e27dc:	ee10 7a10 	vmov	r7, s0
   e27e0:	d0e2      	beq.n	e27a8 <rint+0x88>
   e27e2:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e27e6:	4307      	orrs	r7, r0
   e27e8:	4278      	negs	r0, r7
   e27ea:	4307      	orrs	r7, r0
   e27ec:	4815      	ldr	r0, [pc, #84]	; (e2844 <rint+0x124>)
   e27ee:	0c59      	lsrs	r1, r3, #17
   e27f0:	0b3f      	lsrs	r7, r7, #12
   e27f2:	0449      	lsls	r1, r1, #17
   e27f4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e27f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e27fc:	ea47 0301 	orr.w	r3, r7, r1
   e2800:	e9d0 6700 	ldrd	r6, r7, [r0]
   e2804:	4619      	mov	r1, r3
   e2806:	4610      	mov	r0, r2
   e2808:	463b      	mov	r3, r7
   e280a:	4632      	mov	r2, r6
   e280c:	f000 f8b6 	bl	e297c <__adddf3>
   e2810:	e9cd 0100 	strd	r0, r1, [sp]
   e2814:	463b      	mov	r3, r7
   e2816:	4632      	mov	r2, r6
   e2818:	e9dd 0100 	ldrd	r0, r1, [sp]
   e281c:	f000 f8ac 	bl	e2978 <__aeabi_dsub>
   e2820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2824:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e2828:	ec41 0b10 	vmov	d0, r0, r1
   e282c:	e7be      	b.n	e27ac <rint+0x8c>
   e282e:	ee10 0a10 	vmov	r0, s0
   e2832:	4619      	mov	r1, r3
   e2834:	f000 f8a2 	bl	e297c <__adddf3>
   e2838:	ec41 0b10 	vmov	d0, r0, r1
   e283c:	e7b6      	b.n	e27ac <rint+0x8c>
   e283e:	bf00      	nop
   e2840:	000fffff 	.word	0x000fffff
   e2844:	000e8370 	.word	0x000e8370

000e2848 <scalbn>:
   e2848:	ec53 2b10 	vmov	r2, r3, d0
   e284c:	b570      	push	{r4, r5, r6, lr}
   e284e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e2852:	4619      	mov	r1, r3
   e2854:	4605      	mov	r5, r0
   e2856:	bb14      	cbnz	r4, e289e <scalbn+0x56>
   e2858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e285c:	4311      	orrs	r1, r2
   e285e:	d02a      	beq.n	e28b6 <scalbn+0x6e>
   e2860:	4619      	mov	r1, r3
   e2862:	2200      	movs	r2, #0
   e2864:	4b38      	ldr	r3, [pc, #224]	; (e2948 <scalbn+0x100>)
   e2866:	4e39      	ldr	r6, [pc, #228]	; (e294c <scalbn+0x104>)
   e2868:	ee10 0a10 	vmov	r0, s0
   e286c:	f000 fa38 	bl	e2ce0 <__aeabi_dmul>
   e2870:	42b5      	cmp	r5, r6
   e2872:	4602      	mov	r2, r0
   e2874:	460b      	mov	r3, r1
   e2876:	db1f      	blt.n	e28b8 <scalbn+0x70>
   e2878:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e287c:	3c36      	subs	r4, #54	; 0x36
   e287e:	442c      	add	r4, r5
   e2880:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e2884:	4284      	cmp	r4, r0
   e2886:	dc1f      	bgt.n	e28c8 <scalbn+0x80>
   e2888:	2c00      	cmp	r4, #0
   e288a:	dd2d      	ble.n	e28e8 <scalbn+0xa0>
   e288c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e2890:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e2894:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2898:	ec43 2b10 	vmov	d0, r2, r3
   e289c:	bd70      	pop	{r4, r5, r6, pc}
   e289e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e28a2:	4284      	cmp	r4, r0
   e28a4:	d1eb      	bne.n	e287e <scalbn+0x36>
   e28a6:	ee10 0a10 	vmov	r0, s0
   e28aa:	4619      	mov	r1, r3
   e28ac:	f000 f866 	bl	e297c <__adddf3>
   e28b0:	ec41 0b10 	vmov	d0, r0, r1
   e28b4:	bd70      	pop	{r4, r5, r6, pc}
   e28b6:	bd70      	pop	{r4, r5, r6, pc}
   e28b8:	a31f      	add	r3, pc, #124	; (adr r3, e2938 <scalbn+0xf0>)
   e28ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28be:	f000 fa0f 	bl	e2ce0 <__aeabi_dmul>
   e28c2:	ec41 0b10 	vmov	d0, r0, r1
   e28c6:	bd70      	pop	{r4, r5, r6, pc}
   e28c8:	ec43 2b11 	vmov	d1, r2, r3
   e28cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e2940 <scalbn+0xf8>
   e28d0:	f000 f840 	bl	e2954 <copysign>
   e28d4:	a31a      	add	r3, pc, #104	; (adr r3, e2940 <scalbn+0xf8>)
   e28d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28da:	ec51 0b10 	vmov	r0, r1, d0
   e28de:	f000 f9ff 	bl	e2ce0 <__aeabi_dmul>
   e28e2:	ec41 0b10 	vmov	d0, r0, r1
   e28e6:	bd70      	pop	{r4, r5, r6, pc}
   e28e8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e28ec:	da13      	bge.n	e2916 <scalbn+0xce>
   e28ee:	f24c 3150 	movw	r1, #50000	; 0xc350
   e28f2:	428d      	cmp	r5, r1
   e28f4:	ec43 2b11 	vmov	d1, r2, r3
   e28f8:	dce8      	bgt.n	e28cc <scalbn+0x84>
   e28fa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e2938 <scalbn+0xf0>
   e28fe:	f000 f829 	bl	e2954 <copysign>
   e2902:	a30d      	add	r3, pc, #52	; (adr r3, e2938 <scalbn+0xf0>)
   e2904:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2908:	ec51 0b10 	vmov	r0, r1, d0
   e290c:	f000 f9e8 	bl	e2ce0 <__aeabi_dmul>
   e2910:	ec41 0b10 	vmov	d0, r0, r1
   e2914:	bd70      	pop	{r4, r5, r6, pc}
   e2916:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e291a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e291e:	3436      	adds	r4, #54	; 0x36
   e2920:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2924:	4610      	mov	r0, r2
   e2926:	4619      	mov	r1, r3
   e2928:	2200      	movs	r2, #0
   e292a:	4b09      	ldr	r3, [pc, #36]	; (e2950 <scalbn+0x108>)
   e292c:	f000 f9d8 	bl	e2ce0 <__aeabi_dmul>
   e2930:	ec41 0b10 	vmov	d0, r0, r1
   e2934:	bd70      	pop	{r4, r5, r6, pc}
   e2936:	bf00      	nop
   e2938:	c2f8f359 	.word	0xc2f8f359
   e293c:	01a56e1f 	.word	0x01a56e1f
   e2940:	8800759c 	.word	0x8800759c
   e2944:	7e37e43c 	.word	0x7e37e43c
   e2948:	43500000 	.word	0x43500000
   e294c:	ffff3cb0 	.word	0xffff3cb0
   e2950:	3c900000 	.word	0x3c900000

000e2954 <copysign>:
   e2954:	ec53 2b10 	vmov	r2, r3, d0
   e2958:	ee11 0a90 	vmov	r0, s3
   e295c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e2960:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e2964:	ea41 0300 	orr.w	r3, r1, r0
   e2968:	ec43 2b10 	vmov	d0, r2, r3
   e296c:	4770      	bx	lr
   e296e:	bf00      	nop

000e2970 <__aeabi_drsub>:
   e2970:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e2974:	e002      	b.n	e297c <__adddf3>
   e2976:	bf00      	nop

000e2978 <__aeabi_dsub>:
   e2978:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e297c <__adddf3>:
   e297c:	b530      	push	{r4, r5, lr}
   e297e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e2982:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e2986:	ea94 0f05 	teq	r4, r5
   e298a:	bf08      	it	eq
   e298c:	ea90 0f02 	teqeq	r0, r2
   e2990:	bf1f      	itttt	ne
   e2992:	ea54 0c00 	orrsne.w	ip, r4, r0
   e2996:	ea55 0c02 	orrsne.w	ip, r5, r2
   e299a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e299e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e29a2:	f000 80e2 	beq.w	e2b6a <__adddf3+0x1ee>
   e29a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e29aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e29ae:	bfb8      	it	lt
   e29b0:	426d      	neglt	r5, r5
   e29b2:	dd0c      	ble.n	e29ce <__adddf3+0x52>
   e29b4:	442c      	add	r4, r5
   e29b6:	ea80 0202 	eor.w	r2, r0, r2
   e29ba:	ea81 0303 	eor.w	r3, r1, r3
   e29be:	ea82 0000 	eor.w	r0, r2, r0
   e29c2:	ea83 0101 	eor.w	r1, r3, r1
   e29c6:	ea80 0202 	eor.w	r2, r0, r2
   e29ca:	ea81 0303 	eor.w	r3, r1, r3
   e29ce:	2d36      	cmp	r5, #54	; 0x36
   e29d0:	bf88      	it	hi
   e29d2:	bd30      	pophi	{r4, r5, pc}
   e29d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e29d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e29dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e29e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e29e4:	d002      	beq.n	e29ec <__adddf3+0x70>
   e29e6:	4240      	negs	r0, r0
   e29e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e29ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e29f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e29f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e29f8:	d002      	beq.n	e2a00 <__adddf3+0x84>
   e29fa:	4252      	negs	r2, r2
   e29fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e2a00:	ea94 0f05 	teq	r4, r5
   e2a04:	f000 80a7 	beq.w	e2b56 <__adddf3+0x1da>
   e2a08:	f1a4 0401 	sub.w	r4, r4, #1
   e2a0c:	f1d5 0e20 	rsbs	lr, r5, #32
   e2a10:	db0d      	blt.n	e2a2e <__adddf3+0xb2>
   e2a12:	fa02 fc0e 	lsl.w	ip, r2, lr
   e2a16:	fa22 f205 	lsr.w	r2, r2, r5
   e2a1a:	1880      	adds	r0, r0, r2
   e2a1c:	f141 0100 	adc.w	r1, r1, #0
   e2a20:	fa03 f20e 	lsl.w	r2, r3, lr
   e2a24:	1880      	adds	r0, r0, r2
   e2a26:	fa43 f305 	asr.w	r3, r3, r5
   e2a2a:	4159      	adcs	r1, r3
   e2a2c:	e00e      	b.n	e2a4c <__adddf3+0xd0>
   e2a2e:	f1a5 0520 	sub.w	r5, r5, #32
   e2a32:	f10e 0e20 	add.w	lr, lr, #32
   e2a36:	2a01      	cmp	r2, #1
   e2a38:	fa03 fc0e 	lsl.w	ip, r3, lr
   e2a3c:	bf28      	it	cs
   e2a3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e2a42:	fa43 f305 	asr.w	r3, r3, r5
   e2a46:	18c0      	adds	r0, r0, r3
   e2a48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e2a4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2a50:	d507      	bpl.n	e2a62 <__adddf3+0xe6>
   e2a52:	f04f 0e00 	mov.w	lr, #0
   e2a56:	f1dc 0c00 	rsbs	ip, ip, #0
   e2a5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e2a5e:	eb6e 0101 	sbc.w	r1, lr, r1
   e2a62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e2a66:	d31b      	bcc.n	e2aa0 <__adddf3+0x124>
   e2a68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e2a6c:	d30c      	bcc.n	e2a88 <__adddf3+0x10c>
   e2a6e:	0849      	lsrs	r1, r1, #1
   e2a70:	ea5f 0030 	movs.w	r0, r0, rrx
   e2a74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e2a78:	f104 0401 	add.w	r4, r4, #1
   e2a7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e2a80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e2a84:	f080 809a 	bcs.w	e2bbc <__adddf3+0x240>
   e2a88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e2a8c:	bf08      	it	eq
   e2a8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e2a92:	f150 0000 	adcs.w	r0, r0, #0
   e2a96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2a9a:	ea41 0105 	orr.w	r1, r1, r5
   e2a9e:	bd30      	pop	{r4, r5, pc}
   e2aa0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e2aa4:	4140      	adcs	r0, r0
   e2aa6:	eb41 0101 	adc.w	r1, r1, r1
   e2aaa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2aae:	f1a4 0401 	sub.w	r4, r4, #1
   e2ab2:	d1e9      	bne.n	e2a88 <__adddf3+0x10c>
   e2ab4:	f091 0f00 	teq	r1, #0
   e2ab8:	bf04      	itt	eq
   e2aba:	4601      	moveq	r1, r0
   e2abc:	2000      	moveq	r0, #0
   e2abe:	fab1 f381 	clz	r3, r1
   e2ac2:	bf08      	it	eq
   e2ac4:	3320      	addeq	r3, #32
   e2ac6:	f1a3 030b 	sub.w	r3, r3, #11
   e2aca:	f1b3 0220 	subs.w	r2, r3, #32
   e2ace:	da0c      	bge.n	e2aea <__adddf3+0x16e>
   e2ad0:	320c      	adds	r2, #12
   e2ad2:	dd08      	ble.n	e2ae6 <__adddf3+0x16a>
   e2ad4:	f102 0c14 	add.w	ip, r2, #20
   e2ad8:	f1c2 020c 	rsb	r2, r2, #12
   e2adc:	fa01 f00c 	lsl.w	r0, r1, ip
   e2ae0:	fa21 f102 	lsr.w	r1, r1, r2
   e2ae4:	e00c      	b.n	e2b00 <__adddf3+0x184>
   e2ae6:	f102 0214 	add.w	r2, r2, #20
   e2aea:	bfd8      	it	le
   e2aec:	f1c2 0c20 	rsble	ip, r2, #32
   e2af0:	fa01 f102 	lsl.w	r1, r1, r2
   e2af4:	fa20 fc0c 	lsr.w	ip, r0, ip
   e2af8:	bfdc      	itt	le
   e2afa:	ea41 010c 	orrle.w	r1, r1, ip
   e2afe:	4090      	lslle	r0, r2
   e2b00:	1ae4      	subs	r4, r4, r3
   e2b02:	bfa2      	ittt	ge
   e2b04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e2b08:	4329      	orrge	r1, r5
   e2b0a:	bd30      	popge	{r4, r5, pc}
   e2b0c:	ea6f 0404 	mvn.w	r4, r4
   e2b10:	3c1f      	subs	r4, #31
   e2b12:	da1c      	bge.n	e2b4e <__adddf3+0x1d2>
   e2b14:	340c      	adds	r4, #12
   e2b16:	dc0e      	bgt.n	e2b36 <__adddf3+0x1ba>
   e2b18:	f104 0414 	add.w	r4, r4, #20
   e2b1c:	f1c4 0220 	rsb	r2, r4, #32
   e2b20:	fa20 f004 	lsr.w	r0, r0, r4
   e2b24:	fa01 f302 	lsl.w	r3, r1, r2
   e2b28:	ea40 0003 	orr.w	r0, r0, r3
   e2b2c:	fa21 f304 	lsr.w	r3, r1, r4
   e2b30:	ea45 0103 	orr.w	r1, r5, r3
   e2b34:	bd30      	pop	{r4, r5, pc}
   e2b36:	f1c4 040c 	rsb	r4, r4, #12
   e2b3a:	f1c4 0220 	rsb	r2, r4, #32
   e2b3e:	fa20 f002 	lsr.w	r0, r0, r2
   e2b42:	fa01 f304 	lsl.w	r3, r1, r4
   e2b46:	ea40 0003 	orr.w	r0, r0, r3
   e2b4a:	4629      	mov	r1, r5
   e2b4c:	bd30      	pop	{r4, r5, pc}
   e2b4e:	fa21 f004 	lsr.w	r0, r1, r4
   e2b52:	4629      	mov	r1, r5
   e2b54:	bd30      	pop	{r4, r5, pc}
   e2b56:	f094 0f00 	teq	r4, #0
   e2b5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e2b5e:	bf06      	itte	eq
   e2b60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e2b64:	3401      	addeq	r4, #1
   e2b66:	3d01      	subne	r5, #1
   e2b68:	e74e      	b.n	e2a08 <__adddf3+0x8c>
   e2b6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2b6e:	bf18      	it	ne
   e2b70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2b74:	d029      	beq.n	e2bca <__adddf3+0x24e>
   e2b76:	ea94 0f05 	teq	r4, r5
   e2b7a:	bf08      	it	eq
   e2b7c:	ea90 0f02 	teqeq	r0, r2
   e2b80:	d005      	beq.n	e2b8e <__adddf3+0x212>
   e2b82:	ea54 0c00 	orrs.w	ip, r4, r0
   e2b86:	bf04      	itt	eq
   e2b88:	4619      	moveq	r1, r3
   e2b8a:	4610      	moveq	r0, r2
   e2b8c:	bd30      	pop	{r4, r5, pc}
   e2b8e:	ea91 0f03 	teq	r1, r3
   e2b92:	bf1e      	ittt	ne
   e2b94:	2100      	movne	r1, #0
   e2b96:	2000      	movne	r0, #0
   e2b98:	bd30      	popne	{r4, r5, pc}
   e2b9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e2b9e:	d105      	bne.n	e2bac <__adddf3+0x230>
   e2ba0:	0040      	lsls	r0, r0, #1
   e2ba2:	4149      	adcs	r1, r1
   e2ba4:	bf28      	it	cs
   e2ba6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e2baa:	bd30      	pop	{r4, r5, pc}
   e2bac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e2bb0:	bf3c      	itt	cc
   e2bb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e2bb6:	bd30      	popcc	{r4, r5, pc}
   e2bb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2bbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e2bc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e2bc4:	f04f 0000 	mov.w	r0, #0
   e2bc8:	bd30      	pop	{r4, r5, pc}
   e2bca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e2bce:	bf1a      	itte	ne
   e2bd0:	4619      	movne	r1, r3
   e2bd2:	4610      	movne	r0, r2
   e2bd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e2bd8:	bf1c      	itt	ne
   e2bda:	460b      	movne	r3, r1
   e2bdc:	4602      	movne	r2, r0
   e2bde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e2be2:	bf06      	itte	eq
   e2be4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e2be8:	ea91 0f03 	teqeq	r1, r3
   e2bec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e2bf0:	bd30      	pop	{r4, r5, pc}
   e2bf2:	bf00      	nop

000e2bf4 <__aeabi_ui2d>:
   e2bf4:	f090 0f00 	teq	r0, #0
   e2bf8:	bf04      	itt	eq
   e2bfa:	2100      	moveq	r1, #0
   e2bfc:	4770      	bxeq	lr
   e2bfe:	b530      	push	{r4, r5, lr}
   e2c00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2c04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2c08:	f04f 0500 	mov.w	r5, #0
   e2c0c:	f04f 0100 	mov.w	r1, #0
   e2c10:	e750      	b.n	e2ab4 <__adddf3+0x138>
   e2c12:	bf00      	nop

000e2c14 <__aeabi_i2d>:
   e2c14:	f090 0f00 	teq	r0, #0
   e2c18:	bf04      	itt	eq
   e2c1a:	2100      	moveq	r1, #0
   e2c1c:	4770      	bxeq	lr
   e2c1e:	b530      	push	{r4, r5, lr}
   e2c20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2c24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2c28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e2c2c:	bf48      	it	mi
   e2c2e:	4240      	negmi	r0, r0
   e2c30:	f04f 0100 	mov.w	r1, #0
   e2c34:	e73e      	b.n	e2ab4 <__adddf3+0x138>
   e2c36:	bf00      	nop

000e2c38 <__aeabi_f2d>:
   e2c38:	0042      	lsls	r2, r0, #1
   e2c3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e2c3e:	ea4f 0131 	mov.w	r1, r1, rrx
   e2c42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e2c46:	bf1f      	itttt	ne
   e2c48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e2c4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2c50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e2c54:	4770      	bxne	lr
   e2c56:	f092 0f00 	teq	r2, #0
   e2c5a:	bf14      	ite	ne
   e2c5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e2c60:	4770      	bxeq	lr
   e2c62:	b530      	push	{r4, r5, lr}
   e2c64:	f44f 7460 	mov.w	r4, #896	; 0x380
   e2c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e2c6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2c70:	e720      	b.n	e2ab4 <__adddf3+0x138>
   e2c72:	bf00      	nop

000e2c74 <__aeabi_ul2d>:
   e2c74:	ea50 0201 	orrs.w	r2, r0, r1
   e2c78:	bf08      	it	eq
   e2c7a:	4770      	bxeq	lr
   e2c7c:	b530      	push	{r4, r5, lr}
   e2c7e:	f04f 0500 	mov.w	r5, #0
   e2c82:	e00a      	b.n	e2c9a <__aeabi_l2d+0x16>

000e2c84 <__aeabi_l2d>:
   e2c84:	ea50 0201 	orrs.w	r2, r0, r1
   e2c88:	bf08      	it	eq
   e2c8a:	4770      	bxeq	lr
   e2c8c:	b530      	push	{r4, r5, lr}
   e2c8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e2c92:	d502      	bpl.n	e2c9a <__aeabi_l2d+0x16>
   e2c94:	4240      	negs	r0, r0
   e2c96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e2c9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e2c9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e2ca2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e2ca6:	f43f aedc 	beq.w	e2a62 <__adddf3+0xe6>
   e2caa:	f04f 0203 	mov.w	r2, #3
   e2cae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2cb2:	bf18      	it	ne
   e2cb4:	3203      	addne	r2, #3
   e2cb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e2cba:	bf18      	it	ne
   e2cbc:	3203      	addne	r2, #3
   e2cbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e2cc2:	f1c2 0320 	rsb	r3, r2, #32
   e2cc6:	fa00 fc03 	lsl.w	ip, r0, r3
   e2cca:	fa20 f002 	lsr.w	r0, r0, r2
   e2cce:	fa01 fe03 	lsl.w	lr, r1, r3
   e2cd2:	ea40 000e 	orr.w	r0, r0, lr
   e2cd6:	fa21 f102 	lsr.w	r1, r1, r2
   e2cda:	4414      	add	r4, r2
   e2cdc:	e6c1      	b.n	e2a62 <__adddf3+0xe6>
   e2cde:	bf00      	nop

000e2ce0 <__aeabi_dmul>:
   e2ce0:	b570      	push	{r4, r5, r6, lr}
   e2ce2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e2ce6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e2cea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e2cee:	bf1d      	ittte	ne
   e2cf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e2cf4:	ea94 0f0c 	teqne	r4, ip
   e2cf8:	ea95 0f0c 	teqne	r5, ip
   e2cfc:	f000 f8de 	bleq	e2ebc <__aeabi_dmul+0x1dc>
   e2d00:	442c      	add	r4, r5
   e2d02:	ea81 0603 	eor.w	r6, r1, r3
   e2d06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e2d0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e2d0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e2d12:	bf18      	it	ne
   e2d14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e2d18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e2d20:	d038      	beq.n	e2d94 <__aeabi_dmul+0xb4>
   e2d22:	fba0 ce02 	umull	ip, lr, r0, r2
   e2d26:	f04f 0500 	mov.w	r5, #0
   e2d2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e2d2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e2d32:	fbe0 e503 	umlal	lr, r5, r0, r3
   e2d36:	f04f 0600 	mov.w	r6, #0
   e2d3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e2d3e:	f09c 0f00 	teq	ip, #0
   e2d42:	bf18      	it	ne
   e2d44:	f04e 0e01 	orrne.w	lr, lr, #1
   e2d48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e2d4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e2d50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e2d54:	d204      	bcs.n	e2d60 <__aeabi_dmul+0x80>
   e2d56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e2d5a:	416d      	adcs	r5, r5
   e2d5c:	eb46 0606 	adc.w	r6, r6, r6
   e2d60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e2d64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e2d68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e2d6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e2d70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e2d74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e2d78:	bf88      	it	hi
   e2d7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e2d7e:	d81e      	bhi.n	e2dbe <__aeabi_dmul+0xde>
   e2d80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e2d84:	bf08      	it	eq
   e2d86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e2d8a:	f150 0000 	adcs.w	r0, r0, #0
   e2d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e2d92:	bd70      	pop	{r4, r5, r6, pc}
   e2d94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e2d98:	ea46 0101 	orr.w	r1, r6, r1
   e2d9c:	ea40 0002 	orr.w	r0, r0, r2
   e2da0:	ea81 0103 	eor.w	r1, r1, r3
   e2da4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e2da8:	bfc2      	ittt	gt
   e2daa:	ebd4 050c 	rsbsgt	r5, r4, ip
   e2dae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e2db2:	bd70      	popgt	{r4, r5, r6, pc}
   e2db4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2db8:	f04f 0e00 	mov.w	lr, #0
   e2dbc:	3c01      	subs	r4, #1
   e2dbe:	f300 80ab 	bgt.w	e2f18 <__aeabi_dmul+0x238>
   e2dc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e2dc6:	bfde      	ittt	le
   e2dc8:	2000      	movle	r0, #0
   e2dca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e2dce:	bd70      	pople	{r4, r5, r6, pc}
   e2dd0:	f1c4 0400 	rsb	r4, r4, #0
   e2dd4:	3c20      	subs	r4, #32
   e2dd6:	da35      	bge.n	e2e44 <__aeabi_dmul+0x164>
   e2dd8:	340c      	adds	r4, #12
   e2dda:	dc1b      	bgt.n	e2e14 <__aeabi_dmul+0x134>
   e2ddc:	f104 0414 	add.w	r4, r4, #20
   e2de0:	f1c4 0520 	rsb	r5, r4, #32
   e2de4:	fa00 f305 	lsl.w	r3, r0, r5
   e2de8:	fa20 f004 	lsr.w	r0, r0, r4
   e2dec:	fa01 f205 	lsl.w	r2, r1, r5
   e2df0:	ea40 0002 	orr.w	r0, r0, r2
   e2df4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e2df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e2dfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e2e00:	fa21 f604 	lsr.w	r6, r1, r4
   e2e04:	eb42 0106 	adc.w	r1, r2, r6
   e2e08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2e0c:	bf08      	it	eq
   e2e0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2e12:	bd70      	pop	{r4, r5, r6, pc}
   e2e14:	f1c4 040c 	rsb	r4, r4, #12
   e2e18:	f1c4 0520 	rsb	r5, r4, #32
   e2e1c:	fa00 f304 	lsl.w	r3, r0, r4
   e2e20:	fa20 f005 	lsr.w	r0, r0, r5
   e2e24:	fa01 f204 	lsl.w	r2, r1, r4
   e2e28:	ea40 0002 	orr.w	r0, r0, r2
   e2e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2e30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e2e34:	f141 0100 	adc.w	r1, r1, #0
   e2e38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2e3c:	bf08      	it	eq
   e2e3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2e42:	bd70      	pop	{r4, r5, r6, pc}
   e2e44:	f1c4 0520 	rsb	r5, r4, #32
   e2e48:	fa00 f205 	lsl.w	r2, r0, r5
   e2e4c:	ea4e 0e02 	orr.w	lr, lr, r2
   e2e50:	fa20 f304 	lsr.w	r3, r0, r4
   e2e54:	fa01 f205 	lsl.w	r2, r1, r5
   e2e58:	ea43 0302 	orr.w	r3, r3, r2
   e2e5c:	fa21 f004 	lsr.w	r0, r1, r4
   e2e60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2e64:	fa21 f204 	lsr.w	r2, r1, r4
   e2e68:	ea20 0002 	bic.w	r0, r0, r2
   e2e6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e2e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e2e74:	bf08      	it	eq
   e2e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e2e7a:	bd70      	pop	{r4, r5, r6, pc}
   e2e7c:	f094 0f00 	teq	r4, #0
   e2e80:	d10f      	bne.n	e2ea2 <__aeabi_dmul+0x1c2>
   e2e82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e2e86:	0040      	lsls	r0, r0, #1
   e2e88:	eb41 0101 	adc.w	r1, r1, r1
   e2e8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2e90:	bf08      	it	eq
   e2e92:	3c01      	subeq	r4, #1
   e2e94:	d0f7      	beq.n	e2e86 <__aeabi_dmul+0x1a6>
   e2e96:	ea41 0106 	orr.w	r1, r1, r6
   e2e9a:	f095 0f00 	teq	r5, #0
   e2e9e:	bf18      	it	ne
   e2ea0:	4770      	bxne	lr
   e2ea2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e2ea6:	0052      	lsls	r2, r2, #1
   e2ea8:	eb43 0303 	adc.w	r3, r3, r3
   e2eac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e2eb0:	bf08      	it	eq
   e2eb2:	3d01      	subeq	r5, #1
   e2eb4:	d0f7      	beq.n	e2ea6 <__aeabi_dmul+0x1c6>
   e2eb6:	ea43 0306 	orr.w	r3, r3, r6
   e2eba:	4770      	bx	lr
   e2ebc:	ea94 0f0c 	teq	r4, ip
   e2ec0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e2ec4:	bf18      	it	ne
   e2ec6:	ea95 0f0c 	teqne	r5, ip
   e2eca:	d00c      	beq.n	e2ee6 <__aeabi_dmul+0x206>
   e2ecc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e2ed0:	bf18      	it	ne
   e2ed2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e2ed6:	d1d1      	bne.n	e2e7c <__aeabi_dmul+0x19c>
   e2ed8:	ea81 0103 	eor.w	r1, r1, r3
   e2edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2ee0:	f04f 0000 	mov.w	r0, #0
   e2ee4:	bd70      	pop	{r4, r5, r6, pc}
   e2ee6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e2eea:	bf06      	itte	eq
   e2eec:	4610      	moveq	r0, r2
   e2eee:	4619      	moveq	r1, r3
   e2ef0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e2ef4:	d019      	beq.n	e2f2a <__aeabi_dmul+0x24a>
   e2ef6:	ea94 0f0c 	teq	r4, ip
   e2efa:	d102      	bne.n	e2f02 <__aeabi_dmul+0x222>
   e2efc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e2f00:	d113      	bne.n	e2f2a <__aeabi_dmul+0x24a>
   e2f02:	ea95 0f0c 	teq	r5, ip
   e2f06:	d105      	bne.n	e2f14 <__aeabi_dmul+0x234>
   e2f08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e2f0c:	bf1c      	itt	ne
   e2f0e:	4610      	movne	r0, r2
   e2f10:	4619      	movne	r1, r3
   e2f12:	d10a      	bne.n	e2f2a <__aeabi_dmul+0x24a>
   e2f14:	ea81 0103 	eor.w	r1, r1, r3
   e2f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e2f1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e2f20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e2f24:	f04f 0000 	mov.w	r0, #0
   e2f28:	bd70      	pop	{r4, r5, r6, pc}
   e2f2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e2f2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e2f32:	bd70      	pop	{r4, r5, r6, pc}

000e2f34 <__aeabi_ddiv>:
   e2f34:	b570      	push	{r4, r5, r6, lr}
   e2f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e2f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e2f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e2f42:	bf1d      	ittte	ne
   e2f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e2f48:	ea94 0f0c 	teqne	r4, ip
   e2f4c:	ea95 0f0c 	teqne	r5, ip
   e2f50:	f000 f8a7 	bleq	e30a2 <__aeabi_ddiv+0x16e>
   e2f54:	eba4 0405 	sub.w	r4, r4, r5
   e2f58:	ea81 0e03 	eor.w	lr, r1, r3
   e2f5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e2f60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e2f64:	f000 8088 	beq.w	e3078 <__aeabi_ddiv+0x144>
   e2f68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e2f6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e2f70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e2f74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e2f78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e2f7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e2f80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e2f84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e2f88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e2f8c:	429d      	cmp	r5, r3
   e2f8e:	bf08      	it	eq
   e2f90:	4296      	cmpeq	r6, r2
   e2f92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e2f96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e2f9a:	d202      	bcs.n	e2fa2 <__aeabi_ddiv+0x6e>
   e2f9c:	085b      	lsrs	r3, r3, #1
   e2f9e:	ea4f 0232 	mov.w	r2, r2, rrx
   e2fa2:	1ab6      	subs	r6, r6, r2
   e2fa4:	eb65 0503 	sbc.w	r5, r5, r3
   e2fa8:	085b      	lsrs	r3, r3, #1
   e2faa:	ea4f 0232 	mov.w	r2, r2, rrx
   e2fae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e2fb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e2fb6:	ebb6 0e02 	subs.w	lr, r6, r2
   e2fba:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2fbe:	bf22      	ittt	cs
   e2fc0:	1ab6      	subcs	r6, r6, r2
   e2fc2:	4675      	movcs	r5, lr
   e2fc4:	ea40 000c 	orrcs.w	r0, r0, ip
   e2fc8:	085b      	lsrs	r3, r3, #1
   e2fca:	ea4f 0232 	mov.w	r2, r2, rrx
   e2fce:	ebb6 0e02 	subs.w	lr, r6, r2
   e2fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2fd6:	bf22      	ittt	cs
   e2fd8:	1ab6      	subcs	r6, r6, r2
   e2fda:	4675      	movcs	r5, lr
   e2fdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e2fe0:	085b      	lsrs	r3, r3, #1
   e2fe2:	ea4f 0232 	mov.w	r2, r2, rrx
   e2fe6:	ebb6 0e02 	subs.w	lr, r6, r2
   e2fea:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2fee:	bf22      	ittt	cs
   e2ff0:	1ab6      	subcs	r6, r6, r2
   e2ff2:	4675      	movcs	r5, lr
   e2ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e2ff8:	085b      	lsrs	r3, r3, #1
   e2ffa:	ea4f 0232 	mov.w	r2, r2, rrx
   e2ffe:	ebb6 0e02 	subs.w	lr, r6, r2
   e3002:	eb75 0e03 	sbcs.w	lr, r5, r3
   e3006:	bf22      	ittt	cs
   e3008:	1ab6      	subcs	r6, r6, r2
   e300a:	4675      	movcs	r5, lr
   e300c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e3010:	ea55 0e06 	orrs.w	lr, r5, r6
   e3014:	d018      	beq.n	e3048 <__aeabi_ddiv+0x114>
   e3016:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e301a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e301e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e3022:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e3026:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e302a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e302e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e3032:	d1c0      	bne.n	e2fb6 <__aeabi_ddiv+0x82>
   e3034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e3038:	d10b      	bne.n	e3052 <__aeabi_ddiv+0x11e>
   e303a:	ea41 0100 	orr.w	r1, r1, r0
   e303e:	f04f 0000 	mov.w	r0, #0
   e3042:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e3046:	e7b6      	b.n	e2fb6 <__aeabi_ddiv+0x82>
   e3048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e304c:	bf04      	itt	eq
   e304e:	4301      	orreq	r1, r0
   e3050:	2000      	moveq	r0, #0
   e3052:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e3056:	bf88      	it	hi
   e3058:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e305c:	f63f aeaf 	bhi.w	e2dbe <__aeabi_dmul+0xde>
   e3060:	ebb5 0c03 	subs.w	ip, r5, r3
   e3064:	bf04      	itt	eq
   e3066:	ebb6 0c02 	subseq.w	ip, r6, r2
   e306a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e306e:	f150 0000 	adcs.w	r0, r0, #0
   e3072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e3076:	bd70      	pop	{r4, r5, r6, pc}
   e3078:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e307c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e3080:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e3084:	bfc2      	ittt	gt
   e3086:	ebd4 050c 	rsbsgt	r5, r4, ip
   e308a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e308e:	bd70      	popgt	{r4, r5, r6, pc}
   e3090:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3094:	f04f 0e00 	mov.w	lr, #0
   e3098:	3c01      	subs	r4, #1
   e309a:	e690      	b.n	e2dbe <__aeabi_dmul+0xde>
   e309c:	ea45 0e06 	orr.w	lr, r5, r6
   e30a0:	e68d      	b.n	e2dbe <__aeabi_dmul+0xde>
   e30a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e30a6:	ea94 0f0c 	teq	r4, ip
   e30aa:	bf08      	it	eq
   e30ac:	ea95 0f0c 	teqeq	r5, ip
   e30b0:	f43f af3b 	beq.w	e2f2a <__aeabi_dmul+0x24a>
   e30b4:	ea94 0f0c 	teq	r4, ip
   e30b8:	d10a      	bne.n	e30d0 <__aeabi_ddiv+0x19c>
   e30ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e30be:	f47f af34 	bne.w	e2f2a <__aeabi_dmul+0x24a>
   e30c2:	ea95 0f0c 	teq	r5, ip
   e30c6:	f47f af25 	bne.w	e2f14 <__aeabi_dmul+0x234>
   e30ca:	4610      	mov	r0, r2
   e30cc:	4619      	mov	r1, r3
   e30ce:	e72c      	b.n	e2f2a <__aeabi_dmul+0x24a>
   e30d0:	ea95 0f0c 	teq	r5, ip
   e30d4:	d106      	bne.n	e30e4 <__aeabi_ddiv+0x1b0>
   e30d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e30da:	f43f aefd 	beq.w	e2ed8 <__aeabi_dmul+0x1f8>
   e30de:	4610      	mov	r0, r2
   e30e0:	4619      	mov	r1, r3
   e30e2:	e722      	b.n	e2f2a <__aeabi_dmul+0x24a>
   e30e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e30e8:	bf18      	it	ne
   e30ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e30ee:	f47f aec5 	bne.w	e2e7c <__aeabi_dmul+0x19c>
   e30f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e30f6:	f47f af0d 	bne.w	e2f14 <__aeabi_dmul+0x234>
   e30fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e30fe:	f47f aeeb 	bne.w	e2ed8 <__aeabi_dmul+0x1f8>
   e3102:	e712      	b.n	e2f2a <__aeabi_dmul+0x24a>

000e3104 <__gedf2>:
   e3104:	f04f 3cff 	mov.w	ip, #4294967295
   e3108:	e006      	b.n	e3118 <__cmpdf2+0x4>
   e310a:	bf00      	nop

000e310c <__ledf2>:
   e310c:	f04f 0c01 	mov.w	ip, #1
   e3110:	e002      	b.n	e3118 <__cmpdf2+0x4>
   e3112:	bf00      	nop

000e3114 <__cmpdf2>:
   e3114:	f04f 0c01 	mov.w	ip, #1
   e3118:	f84d cd04 	str.w	ip, [sp, #-4]!
   e311c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3128:	bf18      	it	ne
   e312a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e312e:	d01b      	beq.n	e3168 <__cmpdf2+0x54>
   e3130:	b001      	add	sp, #4
   e3132:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e3136:	bf0c      	ite	eq
   e3138:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e313c:	ea91 0f03 	teqne	r1, r3
   e3140:	bf02      	ittt	eq
   e3142:	ea90 0f02 	teqeq	r0, r2
   e3146:	2000      	moveq	r0, #0
   e3148:	4770      	bxeq	lr
   e314a:	f110 0f00 	cmn.w	r0, #0
   e314e:	ea91 0f03 	teq	r1, r3
   e3152:	bf58      	it	pl
   e3154:	4299      	cmppl	r1, r3
   e3156:	bf08      	it	eq
   e3158:	4290      	cmpeq	r0, r2
   e315a:	bf2c      	ite	cs
   e315c:	17d8      	asrcs	r0, r3, #31
   e315e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e3162:	f040 0001 	orr.w	r0, r0, #1
   e3166:	4770      	bx	lr
   e3168:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e316c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3170:	d102      	bne.n	e3178 <__cmpdf2+0x64>
   e3172:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3176:	d107      	bne.n	e3188 <__cmpdf2+0x74>
   e3178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e317c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3180:	d1d6      	bne.n	e3130 <__cmpdf2+0x1c>
   e3182:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3186:	d0d3      	beq.n	e3130 <__cmpdf2+0x1c>
   e3188:	f85d 0b04 	ldr.w	r0, [sp], #4
   e318c:	4770      	bx	lr
   e318e:	bf00      	nop

000e3190 <__aeabi_cdrcmple>:
   e3190:	4684      	mov	ip, r0
   e3192:	4610      	mov	r0, r2
   e3194:	4662      	mov	r2, ip
   e3196:	468c      	mov	ip, r1
   e3198:	4619      	mov	r1, r3
   e319a:	4663      	mov	r3, ip
   e319c:	e000      	b.n	e31a0 <__aeabi_cdcmpeq>
   e319e:	bf00      	nop

000e31a0 <__aeabi_cdcmpeq>:
   e31a0:	b501      	push	{r0, lr}
   e31a2:	f7ff ffb7 	bl	e3114 <__cmpdf2>
   e31a6:	2800      	cmp	r0, #0
   e31a8:	bf48      	it	mi
   e31aa:	f110 0f00 	cmnmi.w	r0, #0
   e31ae:	bd01      	pop	{r0, pc}

000e31b0 <__aeabi_dcmpeq>:
   e31b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e31b4:	f7ff fff4 	bl	e31a0 <__aeabi_cdcmpeq>
   e31b8:	bf0c      	ite	eq
   e31ba:	2001      	moveq	r0, #1
   e31bc:	2000      	movne	r0, #0
   e31be:	f85d fb08 	ldr.w	pc, [sp], #8
   e31c2:	bf00      	nop

000e31c4 <__aeabi_dcmplt>:
   e31c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e31c8:	f7ff ffea 	bl	e31a0 <__aeabi_cdcmpeq>
   e31cc:	bf34      	ite	cc
   e31ce:	2001      	movcc	r0, #1
   e31d0:	2000      	movcs	r0, #0
   e31d2:	f85d fb08 	ldr.w	pc, [sp], #8
   e31d6:	bf00      	nop

000e31d8 <__aeabi_dcmple>:
   e31d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e31dc:	f7ff ffe0 	bl	e31a0 <__aeabi_cdcmpeq>
   e31e0:	bf94      	ite	ls
   e31e2:	2001      	movls	r0, #1
   e31e4:	2000      	movhi	r0, #0
   e31e6:	f85d fb08 	ldr.w	pc, [sp], #8
   e31ea:	bf00      	nop

000e31ec <__aeabi_dcmpge>:
   e31ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   e31f0:	f7ff ffce 	bl	e3190 <__aeabi_cdrcmple>
   e31f4:	bf94      	ite	ls
   e31f6:	2001      	movls	r0, #1
   e31f8:	2000      	movhi	r0, #0
   e31fa:	f85d fb08 	ldr.w	pc, [sp], #8
   e31fe:	bf00      	nop

000e3200 <__aeabi_dcmpgt>:
   e3200:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3204:	f7ff ffc4 	bl	e3190 <__aeabi_cdrcmple>
   e3208:	bf34      	ite	cc
   e320a:	2001      	movcc	r0, #1
   e320c:	2000      	movcs	r0, #0
   e320e:	f85d fb08 	ldr.w	pc, [sp], #8
   e3212:	bf00      	nop

000e3214 <__aeabi_dcmpun>:
   e3214:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e321c:	d102      	bne.n	e3224 <__aeabi_dcmpun+0x10>
   e321e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3222:	d10a      	bne.n	e323a <__aeabi_dcmpun+0x26>
   e3224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e322c:	d102      	bne.n	e3234 <__aeabi_dcmpun+0x20>
   e322e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3232:	d102      	bne.n	e323a <__aeabi_dcmpun+0x26>
   e3234:	f04f 0000 	mov.w	r0, #0
   e3238:	4770      	bx	lr
   e323a:	f04f 0001 	mov.w	r0, #1
   e323e:	4770      	bx	lr

000e3240 <__aeabi_d2iz>:
   e3240:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e3244:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e3248:	d215      	bcs.n	e3276 <__aeabi_d2iz+0x36>
   e324a:	d511      	bpl.n	e3270 <__aeabi_d2iz+0x30>
   e324c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e3250:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e3254:	d912      	bls.n	e327c <__aeabi_d2iz+0x3c>
   e3256:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e325a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e325e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e3262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e3266:	fa23 f002 	lsr.w	r0, r3, r2
   e326a:	bf18      	it	ne
   e326c:	4240      	negne	r0, r0
   e326e:	4770      	bx	lr
   e3270:	f04f 0000 	mov.w	r0, #0
   e3274:	4770      	bx	lr
   e3276:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e327a:	d105      	bne.n	e3288 <__aeabi_d2iz+0x48>
   e327c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e3280:	bf08      	it	eq
   e3282:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e3286:	4770      	bx	lr
   e3288:	f04f 0000 	mov.w	r0, #0
   e328c:	4770      	bx	lr
   e328e:	bf00      	nop

000e3290 <__aeabi_d2uiz>:
   e3290:	004a      	lsls	r2, r1, #1
   e3292:	d211      	bcs.n	e32b8 <__aeabi_d2uiz+0x28>
   e3294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e3298:	d211      	bcs.n	e32be <__aeabi_d2uiz+0x2e>
   e329a:	d50d      	bpl.n	e32b8 <__aeabi_d2uiz+0x28>
   e329c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e32a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e32a4:	d40e      	bmi.n	e32c4 <__aeabi_d2uiz+0x34>
   e32a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e32aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e32ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e32b2:	fa23 f002 	lsr.w	r0, r3, r2
   e32b6:	4770      	bx	lr
   e32b8:	f04f 0000 	mov.w	r0, #0
   e32bc:	4770      	bx	lr
   e32be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e32c2:	d102      	bne.n	e32ca <__aeabi_d2uiz+0x3a>
   e32c4:	f04f 30ff 	mov.w	r0, #4294967295
   e32c8:	4770      	bx	lr
   e32ca:	f04f 0000 	mov.w	r0, #0
   e32ce:	4770      	bx	lr

000e32d0 <__aeabi_d2f>:
   e32d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e32d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e32d8:	bf24      	itt	cs
   e32da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e32de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e32e2:	d90d      	bls.n	e3300 <__aeabi_d2f+0x30>
   e32e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e32e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e32ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e32f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e32f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e32f8:	bf08      	it	eq
   e32fa:	f020 0001 	biceq.w	r0, r0, #1
   e32fe:	4770      	bx	lr
   e3300:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e3304:	d121      	bne.n	e334a <__aeabi_d2f+0x7a>
   e3306:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e330a:	bfbc      	itt	lt
   e330c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e3310:	4770      	bxlt	lr
   e3312:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3316:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e331a:	f1c2 0218 	rsb	r2, r2, #24
   e331e:	f1c2 0c20 	rsb	ip, r2, #32
   e3322:	fa10 f30c 	lsls.w	r3, r0, ip
   e3326:	fa20 f002 	lsr.w	r0, r0, r2
   e332a:	bf18      	it	ne
   e332c:	f040 0001 	orrne.w	r0, r0, #1
   e3330:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e3334:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e3338:	fa03 fc0c 	lsl.w	ip, r3, ip
   e333c:	ea40 000c 	orr.w	r0, r0, ip
   e3340:	fa23 f302 	lsr.w	r3, r3, r2
   e3344:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e3348:	e7cc      	b.n	e32e4 <__aeabi_d2f+0x14>
   e334a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e334e:	d107      	bne.n	e3360 <__aeabi_d2f+0x90>
   e3350:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e3354:	bf1e      	ittt	ne
   e3356:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e335a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e335e:	4770      	bxne	lr
   e3360:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e3364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e3368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e336c:	4770      	bx	lr
   e336e:	bf00      	nop

000e3370 <asctime>:
   e3370:	4b09      	ldr	r3, [pc, #36]	; (e3398 <asctime+0x28>)
   e3372:	b570      	push	{r4, r5, r6, lr}
   e3374:	681c      	ldr	r4, [r3, #0]
   e3376:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e3378:	4606      	mov	r6, r0
   e337a:	b93d      	cbnz	r5, e338c <asctime+0x1c>
   e337c:	201a      	movs	r0, #26
   e337e:	f7f7 fb81 	bl	daa84 <malloc>
   e3382:	221a      	movs	r2, #26
   e3384:	6420      	str	r0, [r4, #64]	; 0x40
   e3386:	4629      	mov	r1, r5
   e3388:	f000 f94f 	bl	e362a <memset>
   e338c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e338e:	4630      	mov	r0, r6
   e3390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e3394:	f000 b802 	b.w	e339c <asctime_r>
   e3398:	2003d5e4 	.word	0x2003d5e4

000e339c <asctime_r>:
   e339c:	b510      	push	{r4, lr}
   e339e:	460c      	mov	r4, r1
   e33a0:	6941      	ldr	r1, [r0, #20]
   e33a2:	6903      	ldr	r3, [r0, #16]
   e33a4:	6982      	ldr	r2, [r0, #24]
   e33a6:	b086      	sub	sp, #24
   e33a8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e33ac:	9104      	str	r1, [sp, #16]
   e33ae:	6801      	ldr	r1, [r0, #0]
   e33b0:	9103      	str	r1, [sp, #12]
   e33b2:	6841      	ldr	r1, [r0, #4]
   e33b4:	9102      	str	r1, [sp, #8]
   e33b6:	6881      	ldr	r1, [r0, #8]
   e33b8:	9101      	str	r1, [sp, #4]
   e33ba:	68c1      	ldr	r1, [r0, #12]
   e33bc:	9100      	str	r1, [sp, #0]
   e33be:	4907      	ldr	r1, [pc, #28]	; (e33dc <asctime_r+0x40>)
   e33c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e33c4:	440b      	add	r3, r1
   e33c6:	4906      	ldr	r1, [pc, #24]	; (e33e0 <asctime_r+0x44>)
   e33c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e33cc:	440a      	add	r2, r1
   e33ce:	4620      	mov	r0, r4
   e33d0:	4904      	ldr	r1, [pc, #16]	; (e33e4 <asctime_r+0x48>)
   e33d2:	f7f7 fb6f 	bl	daab4 <siprintf>
   e33d6:	4620      	mov	r0, r4
   e33d8:	b006      	add	sp, #24
   e33da:	bd10      	pop	{r4, pc}
   e33dc:	000e8395 	.word	0x000e8395
   e33e0:	000e8380 	.word	0x000e8380
   e33e4:	000e83b9 	.word	0x000e83b9

000e33e8 <atof>:
   e33e8:	2100      	movs	r1, #0
   e33ea:	f001 bf2d 	b.w	e5248 <strtod>

000e33ee <atoi>:
   e33ee:	220a      	movs	r2, #10
   e33f0:	2100      	movs	r1, #0
   e33f2:	f001 bfb7 	b.w	e5364 <strtol>

000e33f6 <atol>:
   e33f6:	220a      	movs	r2, #10
   e33f8:	2100      	movs	r1, #0
   e33fa:	f001 bfb3 	b.w	e5364 <strtol>
	...

000e3400 <__cxa_atexit>:
   e3400:	b510      	push	{r4, lr}
   e3402:	4c05      	ldr	r4, [pc, #20]	; (e3418 <__cxa_atexit+0x18>)
   e3404:	4613      	mov	r3, r2
   e3406:	b12c      	cbz	r4, e3414 <__cxa_atexit+0x14>
   e3408:	460a      	mov	r2, r1
   e340a:	4601      	mov	r1, r0
   e340c:	2002      	movs	r0, #2
   e340e:	f3af 8000 	nop.w
   e3412:	bd10      	pop	{r4, pc}
   e3414:	4620      	mov	r0, r4
   e3416:	bd10      	pop	{r4, pc}
   e3418:	00000000 	.word	0x00000000

000e341c <localtime>:
   e341c:	b538      	push	{r3, r4, r5, lr}
   e341e:	4b07      	ldr	r3, [pc, #28]	; (e343c <localtime+0x20>)
   e3420:	681c      	ldr	r4, [r3, #0]
   e3422:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3424:	4605      	mov	r5, r0
   e3426:	b91b      	cbnz	r3, e3430 <localtime+0x14>
   e3428:	2024      	movs	r0, #36	; 0x24
   e342a:	f7f7 fb2b 	bl	daa84 <malloc>
   e342e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e3430:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e3432:	4628      	mov	r0, r5
   e3434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e3438:	f000 b802 	b.w	e3440 <localtime_r>
   e343c:	2003d5e4 	.word	0x2003d5e4

000e3440 <localtime_r>:
   e3440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3444:	460c      	mov	r4, r1
   e3446:	4680      	mov	r8, r0
   e3448:	f002 fde4 	bl	e6014 <__gettzinfo>
   e344c:	4621      	mov	r1, r4
   e344e:	4607      	mov	r7, r0
   e3450:	4640      	mov	r0, r8
   e3452:	f002 fde3 	bl	e601c <gmtime_r>
   e3456:	6946      	ldr	r6, [r0, #20]
   e3458:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e345c:	07b3      	lsls	r3, r6, #30
   e345e:	4604      	mov	r4, r0
   e3460:	d105      	bne.n	e346e <localtime_r+0x2e>
   e3462:	2264      	movs	r2, #100	; 0x64
   e3464:	fb96 f3f2 	sdiv	r3, r6, r2
   e3468:	fb02 6313 	mls	r3, r2, r3, r6
   e346c:	b94b      	cbnz	r3, e3482 <localtime_r+0x42>
   e346e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3472:	fb96 f3f5 	sdiv	r3, r6, r5
   e3476:	fb05 6513 	mls	r5, r5, r3, r6
   e347a:	fab5 f385 	clz	r3, r5
   e347e:	095b      	lsrs	r3, r3, #5
   e3480:	e000      	b.n	e3484 <localtime_r+0x44>
   e3482:	2301      	movs	r3, #1
   e3484:	4a5f      	ldr	r2, [pc, #380]	; (e3604 <localtime_r+0x1c4>)
   e3486:	2530      	movs	r5, #48	; 0x30
   e3488:	fb05 2503 	mla	r5, r5, r3, r2
   e348c:	f002 f8c0 	bl	e5610 <__tz_lock>
   e3490:	f002 f8c0 	bl	e5614 <_tzset_unlocked>
   e3494:	4b5c      	ldr	r3, [pc, #368]	; (e3608 <localtime_r+0x1c8>)
   e3496:	681b      	ldr	r3, [r3, #0]
   e3498:	b1f3      	cbz	r3, e34d8 <localtime_r+0x98>
   e349a:	687b      	ldr	r3, [r7, #4]
   e349c:	429e      	cmp	r6, r3
   e349e:	d105      	bne.n	e34ac <localtime_r+0x6c>
   e34a0:	6839      	ldr	r1, [r7, #0]
   e34a2:	f8d8 3000 	ldr.w	r3, [r8]
   e34a6:	69fa      	ldr	r2, [r7, #28]
   e34a8:	b941      	cbnz	r1, e34bc <localtime_r+0x7c>
   e34aa:	e00a      	b.n	e34c2 <localtime_r+0x82>
   e34ac:	4630      	mov	r0, r6
   e34ae:	f002 f807 	bl	e54c0 <__tzcalc_limits>
   e34b2:	2800      	cmp	r0, #0
   e34b4:	d1f4      	bne.n	e34a0 <localtime_r+0x60>
   e34b6:	f04f 33ff 	mov.w	r3, #4294967295
   e34ba:	e00d      	b.n	e34d8 <localtime_r+0x98>
   e34bc:	4293      	cmp	r3, r2
   e34be:	db08      	blt.n	e34d2 <localtime_r+0x92>
   e34c0:	e001      	b.n	e34c6 <localtime_r+0x86>
   e34c2:	4293      	cmp	r3, r2
   e34c4:	da07      	bge.n	e34d6 <localtime_r+0x96>
   e34c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e34c8:	4293      	cmp	r3, r2
   e34ca:	bfac      	ite	ge
   e34cc:	2300      	movge	r3, #0
   e34ce:	2301      	movlt	r3, #1
   e34d0:	e002      	b.n	e34d8 <localtime_r+0x98>
   e34d2:	2300      	movs	r3, #0
   e34d4:	e000      	b.n	e34d8 <localtime_r+0x98>
   e34d6:	2301      	movs	r3, #1
   e34d8:	6223      	str	r3, [r4, #32]
   e34da:	6a23      	ldr	r3, [r4, #32]
   e34dc:	2b01      	cmp	r3, #1
   e34de:	bf0c      	ite	eq
   e34e0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e34e2:	6a39      	ldrne	r1, [r7, #32]
   e34e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e34e8:	203c      	movs	r0, #60	; 0x3c
   e34ea:	fb91 f6f3 	sdiv	r6, r1, r3
   e34ee:	fb03 1316 	mls	r3, r3, r6, r1
   e34f2:	6861      	ldr	r1, [r4, #4]
   e34f4:	fb93 f2f0 	sdiv	r2, r3, r0
   e34f8:	fb00 3012 	mls	r0, r0, r2, r3
   e34fc:	6823      	ldr	r3, [r4, #0]
   e34fe:	1a89      	subs	r1, r1, r2
   e3500:	68a2      	ldr	r2, [r4, #8]
   e3502:	6061      	str	r1, [r4, #4]
   e3504:	1a1b      	subs	r3, r3, r0
   e3506:	1b92      	subs	r2, r2, r6
   e3508:	2b3b      	cmp	r3, #59	; 0x3b
   e350a:	6023      	str	r3, [r4, #0]
   e350c:	60a2      	str	r2, [r4, #8]
   e350e:	dd03      	ble.n	e3518 <localtime_r+0xd8>
   e3510:	3101      	adds	r1, #1
   e3512:	6061      	str	r1, [r4, #4]
   e3514:	3b3c      	subs	r3, #60	; 0x3c
   e3516:	e004      	b.n	e3522 <localtime_r+0xe2>
   e3518:	2b00      	cmp	r3, #0
   e351a:	da03      	bge.n	e3524 <localtime_r+0xe4>
   e351c:	3901      	subs	r1, #1
   e351e:	6061      	str	r1, [r4, #4]
   e3520:	333c      	adds	r3, #60	; 0x3c
   e3522:	6023      	str	r3, [r4, #0]
   e3524:	6863      	ldr	r3, [r4, #4]
   e3526:	2b3b      	cmp	r3, #59	; 0x3b
   e3528:	dd03      	ble.n	e3532 <localtime_r+0xf2>
   e352a:	3201      	adds	r2, #1
   e352c:	60a2      	str	r2, [r4, #8]
   e352e:	3b3c      	subs	r3, #60	; 0x3c
   e3530:	e004      	b.n	e353c <localtime_r+0xfc>
   e3532:	2b00      	cmp	r3, #0
   e3534:	da03      	bge.n	e353e <localtime_r+0xfe>
   e3536:	3a01      	subs	r2, #1
   e3538:	60a2      	str	r2, [r4, #8]
   e353a:	333c      	adds	r3, #60	; 0x3c
   e353c:	6063      	str	r3, [r4, #4]
   e353e:	68a3      	ldr	r3, [r4, #8]
   e3540:	2b17      	cmp	r3, #23
   e3542:	dd22      	ble.n	e358a <localtime_r+0x14a>
   e3544:	69e2      	ldr	r2, [r4, #28]
   e3546:	3201      	adds	r2, #1
   e3548:	61e2      	str	r2, [r4, #28]
   e354a:	69a2      	ldr	r2, [r4, #24]
   e354c:	3201      	adds	r2, #1
   e354e:	2a06      	cmp	r2, #6
   e3550:	bfc8      	it	gt
   e3552:	2200      	movgt	r2, #0
   e3554:	61a2      	str	r2, [r4, #24]
   e3556:	68e2      	ldr	r2, [r4, #12]
   e3558:	3b18      	subs	r3, #24
   e355a:	3201      	adds	r2, #1
   e355c:	60a3      	str	r3, [r4, #8]
   e355e:	6923      	ldr	r3, [r4, #16]
   e3560:	60e2      	str	r2, [r4, #12]
   e3562:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e3566:	428a      	cmp	r2, r1
   e3568:	dd46      	ble.n	e35f8 <localtime_r+0x1b8>
   e356a:	3301      	adds	r3, #1
   e356c:	2b0c      	cmp	r3, #12
   e356e:	bf0c      	ite	eq
   e3570:	6963      	ldreq	r3, [r4, #20]
   e3572:	6123      	strne	r3, [r4, #16]
   e3574:	eba2 0201 	sub.w	r2, r2, r1
   e3578:	60e2      	str	r2, [r4, #12]
   e357a:	bf01      	itttt	eq
   e357c:	3301      	addeq	r3, #1
   e357e:	2200      	moveq	r2, #0
   e3580:	6122      	streq	r2, [r4, #16]
   e3582:	6163      	streq	r3, [r4, #20]
   e3584:	bf08      	it	eq
   e3586:	61e2      	streq	r2, [r4, #28]
   e3588:	e036      	b.n	e35f8 <localtime_r+0x1b8>
   e358a:	2b00      	cmp	r3, #0
   e358c:	da34      	bge.n	e35f8 <localtime_r+0x1b8>
   e358e:	69e2      	ldr	r2, [r4, #28]
   e3590:	3a01      	subs	r2, #1
   e3592:	61e2      	str	r2, [r4, #28]
   e3594:	69a2      	ldr	r2, [r4, #24]
   e3596:	3a01      	subs	r2, #1
   e3598:	bf48      	it	mi
   e359a:	2206      	movmi	r2, #6
   e359c:	61a2      	str	r2, [r4, #24]
   e359e:	68e2      	ldr	r2, [r4, #12]
   e35a0:	3318      	adds	r3, #24
   e35a2:	3a01      	subs	r2, #1
   e35a4:	60e2      	str	r2, [r4, #12]
   e35a6:	60a3      	str	r3, [r4, #8]
   e35a8:	bb32      	cbnz	r2, e35f8 <localtime_r+0x1b8>
   e35aa:	6923      	ldr	r3, [r4, #16]
   e35ac:	3b01      	subs	r3, #1
   e35ae:	d401      	bmi.n	e35b4 <localtime_r+0x174>
   e35b0:	6123      	str	r3, [r4, #16]
   e35b2:	e01d      	b.n	e35f0 <localtime_r+0x1b0>
   e35b4:	230b      	movs	r3, #11
   e35b6:	6123      	str	r3, [r4, #16]
   e35b8:	6963      	ldr	r3, [r4, #20]
   e35ba:	1e5a      	subs	r2, r3, #1
   e35bc:	f012 0f03 	tst.w	r2, #3
   e35c0:	6162      	str	r2, [r4, #20]
   e35c2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e35c6:	d105      	bne.n	e35d4 <localtime_r+0x194>
   e35c8:	2164      	movs	r1, #100	; 0x64
   e35ca:	fb93 f2f1 	sdiv	r2, r3, r1
   e35ce:	fb01 3212 	mls	r2, r1, r2, r3
   e35d2:	b94a      	cbnz	r2, e35e8 <localtime_r+0x1a8>
   e35d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e35d8:	fb93 f2f1 	sdiv	r2, r3, r1
   e35dc:	fb01 3312 	mls	r3, r1, r2, r3
   e35e0:	fab3 f383 	clz	r3, r3
   e35e4:	095b      	lsrs	r3, r3, #5
   e35e6:	e000      	b.n	e35ea <localtime_r+0x1aa>
   e35e8:	2301      	movs	r3, #1
   e35ea:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e35ee:	61e3      	str	r3, [r4, #28]
   e35f0:	6923      	ldr	r3, [r4, #16]
   e35f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e35f6:	60e3      	str	r3, [r4, #12]
   e35f8:	f002 f80b 	bl	e5612 <__tz_unlock>
   e35fc:	4620      	mov	r0, r4
   e35fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e3602:	bf00      	nop
   e3604:	000e85a4 	.word	0x000e85a4
   e3608:	2003e7e8 	.word	0x2003e7e8

000e360c <_localeconv_r>:
   e360c:	4800      	ldr	r0, [pc, #0]	; (e3610 <_localeconv_r+0x4>)
   e360e:	4770      	bx	lr
   e3610:	2003d5e8 	.word	0x2003d5e8

000e3614 <memcpy>:
   e3614:	b510      	push	{r4, lr}
   e3616:	1e43      	subs	r3, r0, #1
   e3618:	440a      	add	r2, r1
   e361a:	4291      	cmp	r1, r2
   e361c:	d004      	beq.n	e3628 <memcpy+0x14>
   e361e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3622:	f803 4f01 	strb.w	r4, [r3, #1]!
   e3626:	e7f8      	b.n	e361a <memcpy+0x6>
   e3628:	bd10      	pop	{r4, pc}

000e362a <memset>:
   e362a:	4402      	add	r2, r0
   e362c:	4603      	mov	r3, r0
   e362e:	4293      	cmp	r3, r2
   e3630:	d002      	beq.n	e3638 <memset+0xe>
   e3632:	f803 1b01 	strb.w	r1, [r3], #1
   e3636:	e7fa      	b.n	e362e <memset+0x4>
   e3638:	4770      	bx	lr
	...

000e363c <validate_structure>:
   e363c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e363e:	6801      	ldr	r1, [r0, #0]
   e3640:	293b      	cmp	r1, #59	; 0x3b
   e3642:	4604      	mov	r4, r0
   e3644:	d911      	bls.n	e366a <validate_structure+0x2e>
   e3646:	223c      	movs	r2, #60	; 0x3c
   e3648:	4668      	mov	r0, sp
   e364a:	f002 f96d 	bl	e5928 <div>
   e364e:	9a01      	ldr	r2, [sp, #4]
   e3650:	6863      	ldr	r3, [r4, #4]
   e3652:	9900      	ldr	r1, [sp, #0]
   e3654:	2a00      	cmp	r2, #0
   e3656:	440b      	add	r3, r1
   e3658:	6063      	str	r3, [r4, #4]
   e365a:	bfbb      	ittet	lt
   e365c:	323c      	addlt	r2, #60	; 0x3c
   e365e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e3662:	6022      	strge	r2, [r4, #0]
   e3664:	6022      	strlt	r2, [r4, #0]
   e3666:	bfb8      	it	lt
   e3668:	6063      	strlt	r3, [r4, #4]
   e366a:	6861      	ldr	r1, [r4, #4]
   e366c:	293b      	cmp	r1, #59	; 0x3b
   e366e:	d911      	bls.n	e3694 <validate_structure+0x58>
   e3670:	223c      	movs	r2, #60	; 0x3c
   e3672:	4668      	mov	r0, sp
   e3674:	f002 f958 	bl	e5928 <div>
   e3678:	9a01      	ldr	r2, [sp, #4]
   e367a:	68a1      	ldr	r1, [r4, #8]
   e367c:	9b00      	ldr	r3, [sp, #0]
   e367e:	2a00      	cmp	r2, #0
   e3680:	440b      	add	r3, r1
   e3682:	60a3      	str	r3, [r4, #8]
   e3684:	bfbb      	ittet	lt
   e3686:	323c      	addlt	r2, #60	; 0x3c
   e3688:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e368c:	6062      	strge	r2, [r4, #4]
   e368e:	6062      	strlt	r2, [r4, #4]
   e3690:	bfb8      	it	lt
   e3692:	60a3      	strlt	r3, [r4, #8]
   e3694:	68a1      	ldr	r1, [r4, #8]
   e3696:	2917      	cmp	r1, #23
   e3698:	d911      	bls.n	e36be <validate_structure+0x82>
   e369a:	2218      	movs	r2, #24
   e369c:	4668      	mov	r0, sp
   e369e:	f002 f943 	bl	e5928 <div>
   e36a2:	9a01      	ldr	r2, [sp, #4]
   e36a4:	68e1      	ldr	r1, [r4, #12]
   e36a6:	9b00      	ldr	r3, [sp, #0]
   e36a8:	2a00      	cmp	r2, #0
   e36aa:	440b      	add	r3, r1
   e36ac:	60e3      	str	r3, [r4, #12]
   e36ae:	bfbb      	ittet	lt
   e36b0:	3218      	addlt	r2, #24
   e36b2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e36b6:	60a2      	strge	r2, [r4, #8]
   e36b8:	60a2      	strlt	r2, [r4, #8]
   e36ba:	bfb8      	it	lt
   e36bc:	60e3      	strlt	r3, [r4, #12]
   e36be:	6921      	ldr	r1, [r4, #16]
   e36c0:	290b      	cmp	r1, #11
   e36c2:	d911      	bls.n	e36e8 <validate_structure+0xac>
   e36c4:	220c      	movs	r2, #12
   e36c6:	4668      	mov	r0, sp
   e36c8:	f002 f92e 	bl	e5928 <div>
   e36cc:	9a01      	ldr	r2, [sp, #4]
   e36ce:	6961      	ldr	r1, [r4, #20]
   e36d0:	9b00      	ldr	r3, [sp, #0]
   e36d2:	2a00      	cmp	r2, #0
   e36d4:	440b      	add	r3, r1
   e36d6:	6163      	str	r3, [r4, #20]
   e36d8:	bfbb      	ittet	lt
   e36da:	320c      	addlt	r2, #12
   e36dc:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e36e0:	6122      	strge	r2, [r4, #16]
   e36e2:	6122      	strlt	r2, [r4, #16]
   e36e4:	bfb8      	it	lt
   e36e6:	6163      	strlt	r3, [r4, #20]
   e36e8:	6963      	ldr	r3, [r4, #20]
   e36ea:	0799      	lsls	r1, r3, #30
   e36ec:	d112      	bne.n	e3714 <validate_structure+0xd8>
   e36ee:	2164      	movs	r1, #100	; 0x64
   e36f0:	fb93 f2f1 	sdiv	r2, r3, r1
   e36f4:	fb01 3212 	mls	r2, r1, r2, r3
   e36f8:	b972      	cbnz	r2, e3718 <validate_structure+0xdc>
   e36fa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e36fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3702:	fb93 f2f1 	sdiv	r2, r3, r1
   e3706:	fb01 3312 	mls	r3, r1, r2, r3
   e370a:	2b00      	cmp	r3, #0
   e370c:	bf14      	ite	ne
   e370e:	231c      	movne	r3, #28
   e3710:	231d      	moveq	r3, #29
   e3712:	e002      	b.n	e371a <validate_structure+0xde>
   e3714:	231c      	movs	r3, #28
   e3716:	e000      	b.n	e371a <validate_structure+0xde>
   e3718:	231d      	movs	r3, #29
   e371a:	68e2      	ldr	r2, [r4, #12]
   e371c:	2a00      	cmp	r2, #0
   e371e:	dd06      	ble.n	e372e <validate_structure+0xf2>
   e3720:	4f33      	ldr	r7, [pc, #204]	; (e37f0 <validate_structure+0x1b4>)
   e3722:	f04f 0e00 	mov.w	lr, #0
   e3726:	2564      	movs	r5, #100	; 0x64
   e3728:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e372c:	e039      	b.n	e37a2 <validate_structure+0x166>
   e372e:	4f30      	ldr	r7, [pc, #192]	; (e37f0 <validate_structure+0x1b4>)
   e3730:	260b      	movs	r6, #11
   e3732:	2064      	movs	r0, #100	; 0x64
   e3734:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3738:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e373c:	f1be 0f00 	cmp.w	lr, #0
   e3740:	dc53      	bgt.n	e37ea <validate_structure+0x1ae>
   e3742:	6921      	ldr	r1, [r4, #16]
   e3744:	3901      	subs	r1, #1
   e3746:	6121      	str	r1, [r4, #16]
   e3748:	3101      	adds	r1, #1
   e374a:	d118      	bne.n	e377e <validate_structure+0x142>
   e374c:	6963      	ldr	r3, [r4, #20]
   e374e:	6126      	str	r6, [r4, #16]
   e3750:	1e59      	subs	r1, r3, #1
   e3752:	078a      	lsls	r2, r1, #30
   e3754:	6161      	str	r1, [r4, #20]
   e3756:	d10f      	bne.n	e3778 <validate_structure+0x13c>
   e3758:	fb91 f2f0 	sdiv	r2, r1, r0
   e375c:	fb00 1112 	mls	r1, r0, r2, r1
   e3760:	b961      	cbnz	r1, e377c <validate_structure+0x140>
   e3762:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e3766:	fb93 f2f5 	sdiv	r2, r3, r5
   e376a:	fb05 3312 	mls	r3, r5, r2, r3
   e376e:	2b00      	cmp	r3, #0
   e3770:	bf14      	ite	ne
   e3772:	231c      	movne	r3, #28
   e3774:	231d      	moveq	r3, #29
   e3776:	e002      	b.n	e377e <validate_structure+0x142>
   e3778:	231c      	movs	r3, #28
   e377a:	e000      	b.n	e377e <validate_structure+0x142>
   e377c:	231d      	movs	r3, #29
   e377e:	6922      	ldr	r2, [r4, #16]
   e3780:	2a01      	cmp	r2, #1
   e3782:	bf14      	ite	ne
   e3784:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e3788:	461a      	moveq	r2, r3
   e378a:	4472      	add	r2, lr
   e378c:	60e2      	str	r2, [r4, #12]
   e378e:	e7d3      	b.n	e3738 <validate_structure+0xfc>
   e3790:	428b      	cmp	r3, r1
   e3792:	da2a      	bge.n	e37ea <validate_structure+0x1ae>
   e3794:	4618      	mov	r0, r3
   e3796:	3201      	adds	r2, #1
   e3798:	1a09      	subs	r1, r1, r0
   e379a:	2a0c      	cmp	r2, #12
   e379c:	60e1      	str	r1, [r4, #12]
   e379e:	6122      	str	r2, [r4, #16]
   e37a0:	d008      	beq.n	e37b4 <validate_structure+0x178>
   e37a2:	6922      	ldr	r2, [r4, #16]
   e37a4:	68e1      	ldr	r1, [r4, #12]
   e37a6:	2a01      	cmp	r2, #1
   e37a8:	d0f2      	beq.n	e3790 <validate_structure+0x154>
   e37aa:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e37ae:	4281      	cmp	r1, r0
   e37b0:	dcf1      	bgt.n	e3796 <validate_structure+0x15a>
   e37b2:	e01a      	b.n	e37ea <validate_structure+0x1ae>
   e37b4:	6963      	ldr	r3, [r4, #20]
   e37b6:	f8c4 e010 	str.w	lr, [r4, #16]
   e37ba:	1c5a      	adds	r2, r3, #1
   e37bc:	0791      	lsls	r1, r2, #30
   e37be:	6162      	str	r2, [r4, #20]
   e37c0:	d10f      	bne.n	e37e2 <validate_structure+0x1a6>
   e37c2:	fb92 f1f5 	sdiv	r1, r2, r5
   e37c6:	fb05 2211 	mls	r2, r5, r1, r2
   e37ca:	b962      	cbnz	r2, e37e6 <validate_structure+0x1aa>
   e37cc:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e37d0:	fb93 f2f6 	sdiv	r2, r3, r6
   e37d4:	fb06 3312 	mls	r3, r6, r2, r3
   e37d8:	2b00      	cmp	r3, #0
   e37da:	bf14      	ite	ne
   e37dc:	231c      	movne	r3, #28
   e37de:	231d      	moveq	r3, #29
   e37e0:	e7df      	b.n	e37a2 <validate_structure+0x166>
   e37e2:	231c      	movs	r3, #28
   e37e4:	e7dd      	b.n	e37a2 <validate_structure+0x166>
   e37e6:	231d      	movs	r3, #29
   e37e8:	e7db      	b.n	e37a2 <validate_structure+0x166>
   e37ea:	b003      	add	sp, #12
   e37ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e37ee:	bf00      	nop
   e37f0:	000e8574 	.word	0x000e8574

000e37f4 <mktime>:
   e37f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e37f8:	4605      	mov	r5, r0
   e37fa:	f002 fc0b 	bl	e6014 <__gettzinfo>
   e37fe:	4681      	mov	r9, r0
   e3800:	4628      	mov	r0, r5
   e3802:	f7ff ff1b 	bl	e363c <validate_structure>
   e3806:	e895 000c 	ldmia.w	r5, {r2, r3}
   e380a:	213c      	movs	r1, #60	; 0x3c
   e380c:	fb01 2303 	mla	r3, r1, r3, r2
   e3810:	68aa      	ldr	r2, [r5, #8]
   e3812:	68ec      	ldr	r4, [r5, #12]
   e3814:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e3818:	fb08 3102 	mla	r1, r8, r2, r3
   e381c:	692b      	ldr	r3, [r5, #16]
   e381e:	4aab      	ldr	r2, [pc, #684]	; (e3acc <mktime+0x2d8>)
   e3820:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e3824:	3c01      	subs	r4, #1
   e3826:	2b01      	cmp	r3, #1
   e3828:	4414      	add	r4, r2
   e382a:	696b      	ldr	r3, [r5, #20]
   e382c:	dd11      	ble.n	e3852 <mktime+0x5e>
   e382e:	079e      	lsls	r6, r3, #30
   e3830:	d10f      	bne.n	e3852 <mktime+0x5e>
   e3832:	2064      	movs	r0, #100	; 0x64
   e3834:	fb93 f2f0 	sdiv	r2, r3, r0
   e3838:	fb00 3212 	mls	r2, r0, r2, r3
   e383c:	b942      	cbnz	r2, e3850 <mktime+0x5c>
   e383e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e3842:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3846:	fb96 f0f2 	sdiv	r0, r6, r2
   e384a:	fb02 6210 	mls	r2, r2, r0, r6
   e384e:	b902      	cbnz	r2, e3852 <mktime+0x5e>
   e3850:	3401      	adds	r4, #1
   e3852:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e3856:	3210      	adds	r2, #16
   e3858:	f644 6020 	movw	r0, #20000	; 0x4e20
   e385c:	4282      	cmp	r2, r0
   e385e:	61ec      	str	r4, [r5, #28]
   e3860:	461f      	mov	r7, r3
   e3862:	f200 812e 	bhi.w	e3ac2 <mktime+0x2ce>
   e3866:	2b46      	cmp	r3, #70	; 0x46
   e3868:	dd22      	ble.n	e38b0 <mktime+0xbc>
   e386a:	2246      	movs	r2, #70	; 0x46
   e386c:	f240 1c6d 	movw	ip, #365	; 0x16d
   e3870:	2664      	movs	r6, #100	; 0x64
   e3872:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e3876:	0790      	lsls	r0, r2, #30
   e3878:	d110      	bne.n	e389c <mktime+0xa8>
   e387a:	fb92 f0f6 	sdiv	r0, r2, r6
   e387e:	fb06 2010 	mls	r0, r6, r0, r2
   e3882:	b970      	cbnz	r0, e38a2 <mktime+0xae>
   e3884:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e3888:	fb98 f0fe 	sdiv	r0, r8, lr
   e388c:	fb0e 8010 	mls	r0, lr, r0, r8
   e3890:	2800      	cmp	r0, #0
   e3892:	bf14      	ite	ne
   e3894:	4660      	movne	r0, ip
   e3896:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e389a:	e004      	b.n	e38a6 <mktime+0xb2>
   e389c:	f240 106d 	movw	r0, #365	; 0x16d
   e38a0:	e001      	b.n	e38a6 <mktime+0xb2>
   e38a2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e38a6:	3201      	adds	r2, #1
   e38a8:	4293      	cmp	r3, r2
   e38aa:	4404      	add	r4, r0
   e38ac:	d1e3      	bne.n	e3876 <mktime+0x82>
   e38ae:	e044      	b.n	e393a <mktime+0x146>
   e38b0:	d043      	beq.n	e393a <mktime+0x146>
   e38b2:	2245      	movs	r2, #69	; 0x45
   e38b4:	f240 1e6d 	movw	lr, #365	; 0x16d
   e38b8:	2664      	movs	r6, #100	; 0x64
   e38ba:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e38be:	429a      	cmp	r2, r3
   e38c0:	dd1a      	ble.n	e38f8 <mktime+0x104>
   e38c2:	0790      	lsls	r0, r2, #30
   e38c4:	d110      	bne.n	e38e8 <mktime+0xf4>
   e38c6:	fb92 f0f6 	sdiv	r0, r2, r6
   e38ca:	fb06 2010 	mls	r0, r6, r0, r2
   e38ce:	b970      	cbnz	r0, e38ee <mktime+0xfa>
   e38d0:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e38d4:	fb9c f0f7 	sdiv	r0, ip, r7
   e38d8:	fb07 c010 	mls	r0, r7, r0, ip
   e38dc:	2800      	cmp	r0, #0
   e38de:	bf14      	ite	ne
   e38e0:	4670      	movne	r0, lr
   e38e2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e38e6:	e004      	b.n	e38f2 <mktime+0xfe>
   e38e8:	f240 106d 	movw	r0, #365	; 0x16d
   e38ec:	e001      	b.n	e38f2 <mktime+0xfe>
   e38ee:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e38f2:	1a24      	subs	r4, r4, r0
   e38f4:	3a01      	subs	r2, #1
   e38f6:	e7e2      	b.n	e38be <mktime+0xca>
   e38f8:	2b45      	cmp	r3, #69	; 0x45
   e38fa:	bfa8      	it	ge
   e38fc:	2345      	movge	r3, #69	; 0x45
   e38fe:	079e      	lsls	r6, r3, #30
   e3900:	461f      	mov	r7, r3
   e3902:	d114      	bne.n	e392e <mktime+0x13a>
   e3904:	2264      	movs	r2, #100	; 0x64
   e3906:	fb93 f3f2 	sdiv	r3, r3, r2
   e390a:	fb02 7313 	mls	r3, r2, r3, r7
   e390e:	b98b      	cbnz	r3, e3934 <mktime+0x140>
   e3910:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e3914:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e3918:	fb90 f2f3 	sdiv	r2, r0, r3
   e391c:	fb03 0312 	mls	r3, r3, r2, r0
   e3920:	2b00      	cmp	r3, #0
   e3922:	f240 136d 	movw	r3, #365	; 0x16d
   e3926:	bf08      	it	eq
   e3928:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e392c:	e004      	b.n	e3938 <mktime+0x144>
   e392e:	f240 136d 	movw	r3, #365	; 0x16d
   e3932:	e001      	b.n	e3938 <mktime+0x144>
   e3934:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e3938:	1ae4      	subs	r4, r4, r3
   e393a:	4865      	ldr	r0, [pc, #404]	; (e3ad0 <mktime+0x2dc>)
   e393c:	fb00 1804 	mla	r8, r0, r4, r1
   e3940:	f001 fe66 	bl	e5610 <__tz_lock>
   e3944:	f001 fe66 	bl	e5614 <_tzset_unlocked>
   e3948:	4b62      	ldr	r3, [pc, #392]	; (e3ad4 <mktime+0x2e0>)
   e394a:	681e      	ldr	r6, [r3, #0]
   e394c:	2e00      	cmp	r6, #0
   e394e:	f000 80a4 	beq.w	e3a9a <mktime+0x2a6>
   e3952:	6a2b      	ldr	r3, [r5, #32]
   e3954:	6968      	ldr	r0, [r5, #20]
   e3956:	2b01      	cmp	r3, #1
   e3958:	bfa8      	it	ge
   e395a:	2301      	movge	r3, #1
   e395c:	469a      	mov	sl, r3
   e395e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e3962:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3966:	4298      	cmp	r0, r3
   e3968:	d10d      	bne.n	e3986 <mktime+0x192>
   e396a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e396e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e3972:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e3976:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e397a:	1ad6      	subs	r6, r2, r3
   e397c:	45b0      	cmp	r8, r6
   e397e:	eba1 0100 	sub.w	r1, r1, r0
   e3982:	da05      	bge.n	e3990 <mktime+0x19c>
   e3984:	e007      	b.n	e3996 <mktime+0x1a2>
   e3986:	f001 fd9b 	bl	e54c0 <__tzcalc_limits>
   e398a:	2800      	cmp	r0, #0
   e398c:	d1ed      	bne.n	e396a <mktime+0x176>
   e398e:	e076      	b.n	e3a7e <mktime+0x28a>
   e3990:	1a12      	subs	r2, r2, r0
   e3992:	4590      	cmp	r8, r2
   e3994:	db73      	blt.n	e3a7e <mktime+0x28a>
   e3996:	f8d9 2000 	ldr.w	r2, [r9]
   e399a:	b112      	cbz	r2, e39a2 <mktime+0x1ae>
   e399c:	4588      	cmp	r8, r1
   e399e:	db77      	blt.n	e3a90 <mktime+0x29c>
   e39a0:	e001      	b.n	e39a6 <mktime+0x1b2>
   e39a2:	4588      	cmp	r8, r1
   e39a4:	da07      	bge.n	e39b6 <mktime+0x1c2>
   e39a6:	45b0      	cmp	r8, r6
   e39a8:	bfac      	ite	ge
   e39aa:	2600      	movge	r6, #0
   e39ac:	2601      	movlt	r6, #1
   e39ae:	f1ba 0f00 	cmp.w	sl, #0
   e39b2:	da04      	bge.n	e39be <mktime+0x1ca>
   e39b4:	e064      	b.n	e3a80 <mktime+0x28c>
   e39b6:	f1ba 0f00 	cmp.w	sl, #0
   e39ba:	db63      	blt.n	e3a84 <mktime+0x290>
   e39bc:	2601      	movs	r6, #1
   e39be:	ea8a 0a06 	eor.w	sl, sl, r6
   e39c2:	f1ba 0f01 	cmp.w	sl, #1
   e39c6:	d15b      	bne.n	e3a80 <mktime+0x28c>
   e39c8:	1a1b      	subs	r3, r3, r0
   e39ca:	b906      	cbnz	r6, e39ce <mktime+0x1da>
   e39cc:	425b      	negs	r3, r3
   e39ce:	682a      	ldr	r2, [r5, #0]
   e39d0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e39d4:	441a      	add	r2, r3
   e39d6:	602a      	str	r2, [r5, #0]
   e39d8:	4628      	mov	r0, r5
   e39da:	4498      	add	r8, r3
   e39dc:	f7ff fe2e 	bl	e363c <validate_structure>
   e39e0:	68eb      	ldr	r3, [r5, #12]
   e39e2:	ebb3 030a 	subs.w	r3, r3, sl
   e39e6:	d04b      	beq.n	e3a80 <mktime+0x28c>
   e39e8:	2b01      	cmp	r3, #1
   e39ea:	dc03      	bgt.n	e39f4 <mktime+0x200>
   e39ec:	1c98      	adds	r0, r3, #2
   e39ee:	bfd8      	it	le
   e39f0:	2301      	movle	r3, #1
   e39f2:	e001      	b.n	e39f8 <mktime+0x204>
   e39f4:	f04f 33ff 	mov.w	r3, #4294967295
   e39f8:	69ea      	ldr	r2, [r5, #28]
   e39fa:	441c      	add	r4, r3
   e39fc:	189b      	adds	r3, r3, r2
   e39fe:	d51d      	bpl.n	e3a3c <mktime+0x248>
   e3a00:	1e7b      	subs	r3, r7, #1
   e3a02:	0799      	lsls	r1, r3, #30
   e3a04:	d114      	bne.n	e3a30 <mktime+0x23c>
   e3a06:	2164      	movs	r1, #100	; 0x64
   e3a08:	fb93 f2f1 	sdiv	r2, r3, r1
   e3a0c:	fb01 3312 	mls	r3, r1, r2, r3
   e3a10:	b98b      	cbnz	r3, e3a36 <mktime+0x242>
   e3a12:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e3a16:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3a1a:	fb97 f3f2 	sdiv	r3, r7, r2
   e3a1e:	fb02 7713 	mls	r7, r2, r3, r7
   e3a22:	2f00      	cmp	r7, #0
   e3a24:	f240 136d 	movw	r3, #365	; 0x16d
   e3a28:	bf18      	it	ne
   e3a2a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e3a2e:	e024      	b.n	e3a7a <mktime+0x286>
   e3a30:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e3a34:	e021      	b.n	e3a7a <mktime+0x286>
   e3a36:	f240 136d 	movw	r3, #365	; 0x16d
   e3a3a:	e01e      	b.n	e3a7a <mktime+0x286>
   e3a3c:	07ba      	lsls	r2, r7, #30
   e3a3e:	d114      	bne.n	e3a6a <mktime+0x276>
   e3a40:	2164      	movs	r1, #100	; 0x64
   e3a42:	fb97 f2f1 	sdiv	r2, r7, r1
   e3a46:	fb01 7212 	mls	r2, r1, r2, r7
   e3a4a:	b98a      	cbnz	r2, e3a70 <mktime+0x27c>
   e3a4c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e3a50:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3a54:	fb97 f2f1 	sdiv	r2, r7, r1
   e3a58:	fb01 7712 	mls	r7, r1, r2, r7
   e3a5c:	2f00      	cmp	r7, #0
   e3a5e:	f240 126d 	movw	r2, #365	; 0x16d
   e3a62:	bf08      	it	eq
   e3a64:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e3a68:	e004      	b.n	e3a74 <mktime+0x280>
   e3a6a:	f240 126d 	movw	r2, #365	; 0x16d
   e3a6e:	e001      	b.n	e3a74 <mktime+0x280>
   e3a70:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e3a74:	429a      	cmp	r2, r3
   e3a76:	bfd8      	it	le
   e3a78:	1a9b      	suble	r3, r3, r2
   e3a7a:	61eb      	str	r3, [r5, #28]
   e3a7c:	e000      	b.n	e3a80 <mktime+0x28c>
   e3a7e:	4656      	mov	r6, sl
   e3a80:	2e01      	cmp	r6, #1
   e3a82:	d10a      	bne.n	e3a9a <mktime+0x2a6>
   e3a84:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e3a88:	2601      	movs	r6, #1
   e3a8a:	eb08 0700 	add.w	r7, r8, r0
   e3a8e:	e008      	b.n	e3aa2 <mktime+0x2ae>
   e3a90:	f1ba 0f00 	cmp.w	sl, #0
   e3a94:	f04f 0600 	mov.w	r6, #0
   e3a98:	da91      	bge.n	e39be <mktime+0x1ca>
   e3a9a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e3a9e:	eb08 0700 	add.w	r7, r8, r0
   e3aa2:	f001 fdb6 	bl	e5612 <__tz_unlock>
   e3aa6:	3404      	adds	r4, #4
   e3aa8:	2307      	movs	r3, #7
   e3aaa:	fb94 f3f3 	sdiv	r3, r4, r3
   e3aae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3ab2:	1ae4      	subs	r4, r4, r3
   e3ab4:	bf48      	it	mi
   e3ab6:	3407      	addmi	r4, #7
   e3ab8:	622e      	str	r6, [r5, #32]
   e3aba:	61ac      	str	r4, [r5, #24]
   e3abc:	4638      	mov	r0, r7
   e3abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3ac2:	f04f 30ff 	mov.w	r0, #4294967295
   e3ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3aca:	bf00      	nop
   e3acc:	000e8544 	.word	0x000e8544
   e3ad0:	00015180 	.word	0x00015180
   e3ad4:	2003e7e8 	.word	0x2003e7e8

000e3ad8 <srand>:
   e3ad8:	b538      	push	{r3, r4, r5, lr}
   e3ada:	4b12      	ldr	r3, [pc, #72]	; (e3b24 <srand+0x4c>)
   e3adc:	681c      	ldr	r4, [r3, #0]
   e3ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3ae0:	4605      	mov	r5, r0
   e3ae2:	b9d3      	cbnz	r3, e3b1a <srand+0x42>
   e3ae4:	2018      	movs	r0, #24
   e3ae6:	f7f6 ffcd 	bl	daa84 <malloc>
   e3aea:	f243 330e 	movw	r3, #13070	; 0x330e
   e3aee:	63a0      	str	r0, [r4, #56]	; 0x38
   e3af0:	8003      	strh	r3, [r0, #0]
   e3af2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e3af6:	8043      	strh	r3, [r0, #2]
   e3af8:	f241 2334 	movw	r3, #4660	; 0x1234
   e3afc:	8083      	strh	r3, [r0, #4]
   e3afe:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e3b02:	80c3      	strh	r3, [r0, #6]
   e3b04:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e3b08:	8103      	strh	r3, [r0, #8]
   e3b0a:	2305      	movs	r3, #5
   e3b0c:	8143      	strh	r3, [r0, #10]
   e3b0e:	230b      	movs	r3, #11
   e3b10:	8183      	strh	r3, [r0, #12]
   e3b12:	2201      	movs	r2, #1
   e3b14:	2300      	movs	r3, #0
   e3b16:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e3b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3b1c:	2200      	movs	r2, #0
   e3b1e:	611d      	str	r5, [r3, #16]
   e3b20:	615a      	str	r2, [r3, #20]
   e3b22:	bd38      	pop	{r3, r4, r5, pc}
   e3b24:	2003d5e4 	.word	0x2003d5e4

000e3b28 <strcmp>:
   e3b28:	f810 2b01 	ldrb.w	r2, [r0], #1
   e3b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   e3b30:	2a01      	cmp	r2, #1
   e3b32:	bf28      	it	cs
   e3b34:	429a      	cmpcs	r2, r3
   e3b36:	d0f7      	beq.n	e3b28 <strcmp>
   e3b38:	1ad0      	subs	r0, r2, r3
   e3b3a:	4770      	bx	lr

000e3b3c <strcpy>:
   e3b3c:	4603      	mov	r3, r0
   e3b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e3b42:	f803 2b01 	strb.w	r2, [r3], #1
   e3b46:	2a00      	cmp	r2, #0
   e3b48:	d1f9      	bne.n	e3b3e <strcpy+0x2>
   e3b4a:	4770      	bx	lr

000e3b4c <strdup>:
   e3b4c:	4b02      	ldr	r3, [pc, #8]	; (e3b58 <strdup+0xc>)
   e3b4e:	4601      	mov	r1, r0
   e3b50:	6818      	ldr	r0, [r3, #0]
   e3b52:	f000 b803 	b.w	e3b5c <_strdup_r>
   e3b56:	bf00      	nop
   e3b58:	2003d5e4 	.word	0x2003d5e4

000e3b5c <_strdup_r>:
   e3b5c:	b570      	push	{r4, r5, r6, lr}
   e3b5e:	4606      	mov	r6, r0
   e3b60:	4608      	mov	r0, r1
   e3b62:	460c      	mov	r4, r1
   e3b64:	f000 fd22 	bl	e45ac <strlen>
   e3b68:	1c45      	adds	r5, r0, #1
   e3b6a:	4629      	mov	r1, r5
   e3b6c:	4630      	mov	r0, r6
   e3b6e:	f7f6 ffd1 	bl	dab14 <_malloc_r>
   e3b72:	4606      	mov	r6, r0
   e3b74:	b118      	cbz	r0, e3b7e <_strdup_r+0x22>
   e3b76:	462a      	mov	r2, r5
   e3b78:	4621      	mov	r1, r4
   e3b7a:	f7ff fd4b 	bl	e3614 <memcpy>
   e3b7e:	4630      	mov	r0, r6
   e3b80:	bd70      	pop	{r4, r5, r6, pc}

000e3b82 <iso_year_adjust>:
   e3b82:	6941      	ldr	r1, [r0, #20]
   e3b84:	078b      	lsls	r3, r1, #30
   e3b86:	b510      	push	{r4, lr}
   e3b88:	d10c      	bne.n	e3ba4 <iso_year_adjust+0x22>
   e3b8a:	2900      	cmp	r1, #0
   e3b8c:	f240 736c 	movw	r3, #1900	; 0x76c
   e3b90:	bfa8      	it	ge
   e3b92:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3b96:	440b      	add	r3, r1
   e3b98:	2464      	movs	r4, #100	; 0x64
   e3b9a:	fb93 f2f4 	sdiv	r2, r3, r4
   e3b9e:	fb04 3312 	mls	r3, r4, r2, r3
   e3ba2:	b983      	cbnz	r3, e3bc6 <iso_year_adjust+0x44>
   e3ba4:	2900      	cmp	r1, #0
   e3ba6:	f240 736c 	movw	r3, #1900	; 0x76c
   e3baa:	bfa8      	it	ge
   e3bac:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e3bb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3bb4:	440b      	add	r3, r1
   e3bb6:	fb93 f1f2 	sdiv	r1, r3, r2
   e3bba:	fb02 3311 	mls	r3, r2, r1, r3
   e3bbe:	fab3 f283 	clz	r2, r3
   e3bc2:	0952      	lsrs	r2, r2, #5
   e3bc4:	e000      	b.n	e3bc8 <iso_year_adjust+0x46>
   e3bc6:	2201      	movs	r2, #1
   e3bc8:	6983      	ldr	r3, [r0, #24]
   e3bca:	69c1      	ldr	r1, [r0, #28]
   e3bcc:	005b      	lsls	r3, r3, #1
   e3bce:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e3bd2:	4413      	add	r3, r2
   e3bd4:	2b21      	cmp	r3, #33	; 0x21
   e3bd6:	dc0e      	bgt.n	e3bf6 <iso_year_adjust+0x74>
   e3bd8:	2b20      	cmp	r3, #32
   e3bda:	da2f      	bge.n	e3c3c <iso_year_adjust+0xba>
   e3bdc:	2b0d      	cmp	r3, #13
   e3bde:	dc02      	bgt.n	e3be6 <iso_year_adjust+0x64>
   e3be0:	2b0a      	cmp	r3, #10
   e3be2:	db05      	blt.n	e3bf0 <iso_year_adjust+0x6e>
   e3be4:	e02a      	b.n	e3c3c <iso_year_adjust+0xba>
   e3be6:	2b10      	cmp	r3, #16
   e3be8:	db26      	blt.n	e3c38 <iso_year_adjust+0xb6>
   e3bea:	2b11      	cmp	r3, #17
   e3bec:	dd26      	ble.n	e3c3c <iso_year_adjust+0xba>
   e3bee:	3b1c      	subs	r3, #28
   e3bf0:	2b01      	cmp	r3, #1
   e3bf2:	d923      	bls.n	e3c3c <iso_year_adjust+0xba>
   e3bf4:	e020      	b.n	e3c38 <iso_year_adjust+0xb6>
   e3bf6:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e3bfa:	4293      	cmp	r3, r2
   e3bfc:	dc0e      	bgt.n	e3c1c <iso_year_adjust+0x9a>
   e3bfe:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e3c02:	4293      	cmp	r3, r2
   e3c04:	da16      	bge.n	e3c34 <iso_year_adjust+0xb2>
   e3c06:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e3c0a:	4293      	cmp	r3, r2
   e3c0c:	d012      	beq.n	e3c34 <iso_year_adjust+0xb2>
   e3c0e:	db13      	blt.n	e3c38 <iso_year_adjust+0xb6>
   e3c10:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e3c14:	3b12      	subs	r3, #18
   e3c16:	2b02      	cmp	r3, #2
   e3c18:	d90c      	bls.n	e3c34 <iso_year_adjust+0xb2>
   e3c1a:	e00d      	b.n	e3c38 <iso_year_adjust+0xb6>
   e3c1c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e3c20:	4293      	cmp	r3, r2
   e3c22:	d007      	beq.n	e3c34 <iso_year_adjust+0xb2>
   e3c24:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e3c28:	4293      	cmp	r3, r2
   e3c2a:	d003      	beq.n	e3c34 <iso_year_adjust+0xb2>
   e3c2c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e3c30:	4293      	cmp	r3, r2
   e3c32:	d101      	bne.n	e3c38 <iso_year_adjust+0xb6>
   e3c34:	2001      	movs	r0, #1
   e3c36:	bd10      	pop	{r4, pc}
   e3c38:	2000      	movs	r0, #0
   e3c3a:	bd10      	pop	{r4, pc}
   e3c3c:	f04f 30ff 	mov.w	r0, #4294967295
   e3c40:	bd10      	pop	{r4, pc}
	...

000e3c44 <strftime>:
   e3c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3c48:	b093      	sub	sp, #76	; 0x4c
   e3c4a:	460e      	mov	r6, r1
   e3c4c:	461d      	mov	r5, r3
   e3c4e:	4607      	mov	r7, r0
   e3c50:	4691      	mov	r9, r2
   e3c52:	f001 fc19 	bl	e5488 <__get_current_time_locale>
   e3c56:	2300      	movs	r3, #0
   e3c58:	9306      	str	r3, [sp, #24]
   e3c5a:	461c      	mov	r4, r3
   e3c5c:	1e73      	subs	r3, r6, #1
   e3c5e:	9003      	str	r0, [sp, #12]
   e3c60:	9302      	str	r3, [sp, #8]
   e3c62:	f899 3000 	ldrb.w	r3, [r9]
   e3c66:	2b00      	cmp	r3, #0
   e3c68:	f000 8492 	beq.w	e4590 <strftime+0x94c>
   e3c6c:	2b25      	cmp	r3, #37	; 0x25
   e3c6e:	d008      	beq.n	e3c82 <strftime+0x3e>
   e3c70:	9a02      	ldr	r2, [sp, #8]
   e3c72:	4294      	cmp	r4, r2
   e3c74:	f080 8490 	bcs.w	e4598 <strftime+0x954>
   e3c78:	553b      	strb	r3, [r7, r4]
   e3c7a:	f109 0901 	add.w	r9, r9, #1
   e3c7e:	3401      	adds	r4, #1
   e3c80:	e7ef      	b.n	e3c62 <strftime+0x1e>
   e3c82:	f899 a001 	ldrb.w	sl, [r9, #1]
   e3c86:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e3c8a:	d007      	beq.n	e3c9c <strftime+0x58>
   e3c8c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3c90:	d004      	beq.n	e3c9c <strftime+0x58>
   e3c92:	f109 0901 	add.w	r9, r9, #1
   e3c96:	f04f 0a00 	mov.w	sl, #0
   e3c9a:	e001      	b.n	e3ca0 <strftime+0x5c>
   e3c9c:	f109 0902 	add.w	r9, r9, #2
   e3ca0:	f899 3000 	ldrb.w	r3, [r9]
   e3ca4:	3b31      	subs	r3, #49	; 0x31
   e3ca6:	2b08      	cmp	r3, #8
   e3ca8:	d808      	bhi.n	e3cbc <strftime+0x78>
   e3caa:	4648      	mov	r0, r9
   e3cac:	220a      	movs	r2, #10
   e3cae:	a90a      	add	r1, sp, #40	; 0x28
   e3cb0:	f001 fbe0 	bl	e5474 <strtoul>
   e3cb4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e3cb8:	4680      	mov	r8, r0
   e3cba:	e001      	b.n	e3cc0 <strftime+0x7c>
   e3cbc:	f04f 0800 	mov.w	r8, #0
   e3cc0:	f899 3000 	ldrb.w	r3, [r9]
   e3cc4:	2b45      	cmp	r3, #69	; 0x45
   e3cc6:	d001      	beq.n	e3ccc <strftime+0x88>
   e3cc8:	2b4f      	cmp	r3, #79	; 0x4f
   e3cca:	d101      	bne.n	e3cd0 <strftime+0x8c>
   e3ccc:	f109 0901 	add.w	r9, r9, #1
   e3cd0:	f899 0000 	ldrb.w	r0, [r9]
   e3cd4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e3cd8:	2b55      	cmp	r3, #85	; 0x55
   e3cda:	f200 845d 	bhi.w	e4598 <strftime+0x954>
   e3cde:	e8df f013 	tbh	[pc, r3, lsl #1]
   e3ce2:	044a      	.short	0x044a
   e3ce4:	045b045b 	.word	0x045b045b
   e3ce8:	045b045b 	.word	0x045b045b
   e3cec:	045b045b 	.word	0x045b045b
   e3cf0:	045b045b 	.word	0x045b045b
   e3cf4:	045b045b 	.word	0x045b045b
   e3cf8:	045b045b 	.word	0x045b045b
   e3cfc:	045b045b 	.word	0x045b045b
   e3d00:	045b045b 	.word	0x045b045b
   e3d04:	045b045b 	.word	0x045b045b
   e3d08:	045b045b 	.word	0x045b045b
   e3d0c:	045b045b 	.word	0x045b045b
   e3d10:	045b045b 	.word	0x045b045b
   e3d14:	045b045b 	.word	0x045b045b
   e3d18:	006f045b 	.word	0x006f045b
   e3d1c:	00d400a1 	.word	0x00d400a1
   e3d20:	045b011a 	.word	0x045b011a
   e3d24:	01a0013f 	.word	0x01a0013f
   e3d28:	022d0226 	.word	0x022d0226
   e3d2c:	045b045b 	.word	0x045b045b
   e3d30:	0260045b 	.word	0x0260045b
   e3d34:	045b045b 	.word	0x045b045b
   e3d38:	045b0268 	.word	0x045b0268
   e3d3c:	031d0297 	.word	0x031d0297
   e3d40:	033b0325 	.word	0x033b0325
   e3d44:	03860343 	.word	0x03860343
   e3d48:	03a000c6 	.word	0x03a000c6
   e3d4c:	045b041f 	.word	0x045b041f
   e3d50:	045b045b 	.word	0x045b045b
   e3d54:	045b045b 	.word	0x045b045b
   e3d58:	0056045b 	.word	0x0056045b
   e3d5c:	00ba0089 	.word	0x00ba0089
   e3d60:	010c010c 	.word	0x010c010c
   e3d64:	0171045b 	.word	0x0171045b
   e3d68:	045b0089 	.word	0x045b0089
   e3d6c:	0226023d 	.word	0x0226023d
   e3d70:	025d022d 	.word	0x025d022d
   e3d74:	045b0262 	.word	0x045b0262
   e3d78:	045b0268 	.word	0x045b0268
   e3d7c:	029c00be 	.word	0x029c00be
   e3d80:	032e031f 	.word	0x032e031f
   e3d84:	037f045b 	.word	0x037f045b
   e3d88:	039200c2 	.word	0x039200c2
   e3d8c:	03e7      	.short	0x03e7
   e3d8e:	69ab      	ldr	r3, [r5, #24]
   e3d90:	9a03      	ldr	r2, [sp, #12]
   e3d92:	3318      	adds	r3, #24
   e3d94:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3d98:	4640      	mov	r0, r8
   e3d9a:	f000 fc07 	bl	e45ac <strlen>
   e3d9e:	f108 38ff 	add.w	r8, r8, #4294967295
   e3da2:	193b      	adds	r3, r7, r4
   e3da4:	4420      	add	r0, r4
   e3da6:	4284      	cmp	r4, r0
   e3da8:	f000 83eb 	beq.w	e4582 <strftime+0x93e>
   e3dac:	9a02      	ldr	r2, [sp, #8]
   e3dae:	4294      	cmp	r4, r2
   e3db0:	f080 83f2 	bcs.w	e4598 <strftime+0x954>
   e3db4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3db8:	f803 2b01 	strb.w	r2, [r3], #1
   e3dbc:	3401      	adds	r4, #1
   e3dbe:	e7f2      	b.n	e3da6 <strftime+0x162>
   e3dc0:	69ab      	ldr	r3, [r5, #24]
   e3dc2:	9a03      	ldr	r2, [sp, #12]
   e3dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e3dc8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e3dcc:	4640      	mov	r0, r8
   e3dce:	f000 fbed 	bl	e45ac <strlen>
   e3dd2:	f108 38ff 	add.w	r8, r8, #4294967295
   e3dd6:	193b      	adds	r3, r7, r4
   e3dd8:	4420      	add	r0, r4
   e3dda:	4284      	cmp	r4, r0
   e3ddc:	f000 83d1 	beq.w	e4582 <strftime+0x93e>
   e3de0:	9a02      	ldr	r2, [sp, #8]
   e3de2:	4294      	cmp	r4, r2
   e3de4:	f080 83d8 	bcs.w	e4598 <strftime+0x954>
   e3de8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3dec:	f803 2b01 	strb.w	r2, [r3], #1
   e3df0:	3401      	adds	r4, #1
   e3df2:	e7f2      	b.n	e3dda <strftime+0x196>
   e3df4:	692b      	ldr	r3, [r5, #16]
   e3df6:	9a03      	ldr	r2, [sp, #12]
   e3df8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3dfc:	4640      	mov	r0, r8
   e3dfe:	f000 fbd5 	bl	e45ac <strlen>
   e3e02:	f108 38ff 	add.w	r8, r8, #4294967295
   e3e06:	193b      	adds	r3, r7, r4
   e3e08:	4420      	add	r0, r4
   e3e0a:	4284      	cmp	r4, r0
   e3e0c:	f000 83b9 	beq.w	e4582 <strftime+0x93e>
   e3e10:	9a02      	ldr	r2, [sp, #8]
   e3e12:	4294      	cmp	r4, r2
   e3e14:	f080 83c0 	bcs.w	e4598 <strftime+0x954>
   e3e18:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3e1c:	f803 2b01 	strb.w	r2, [r3], #1
   e3e20:	3401      	adds	r4, #1
   e3e22:	e7f2      	b.n	e3e0a <strftime+0x1c6>
   e3e24:	692b      	ldr	r3, [r5, #16]
   e3e26:	9a03      	ldr	r2, [sp, #12]
   e3e28:	330c      	adds	r3, #12
   e3e2a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3e2e:	4640      	mov	r0, r8
   e3e30:	f000 fbbc 	bl	e45ac <strlen>
   e3e34:	f108 38ff 	add.w	r8, r8, #4294967295
   e3e38:	193b      	adds	r3, r7, r4
   e3e3a:	4420      	add	r0, r4
   e3e3c:	4284      	cmp	r4, r0
   e3e3e:	f000 83a0 	beq.w	e4582 <strftime+0x93e>
   e3e42:	9a02      	ldr	r2, [sp, #8]
   e3e44:	4294      	cmp	r4, r2
   e3e46:	f080 83a7 	bcs.w	e4598 <strftime+0x954>
   e3e4a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e3e4e:	f803 2b01 	strb.w	r2, [r3], #1
   e3e52:	3401      	adds	r4, #1
   e3e54:	e7f2      	b.n	e3e3c <strftime+0x1f8>
   e3e56:	9b03      	ldr	r3, [sp, #12]
   e3e58:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e3e5c:	e00a      	b.n	e3e74 <strftime+0x230>
   e3e5e:	9b03      	ldr	r3, [sp, #12]
   e3e60:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e3e64:	e006      	b.n	e3e74 <strftime+0x230>
   e3e66:	9b03      	ldr	r3, [sp, #12]
   e3e68:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e3e6c:	e002      	b.n	e3e74 <strftime+0x230>
   e3e6e:	9b03      	ldr	r3, [sp, #12]
   e3e70:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e3e74:	4640      	mov	r0, r8
   e3e76:	f000 fb99 	bl	e45ac <strlen>
   e3e7a:	f898 3000 	ldrb.w	r3, [r8]
   e3e7e:	2b00      	cmp	r3, #0
   e3e80:	f000 837f 	beq.w	e4582 <strftime+0x93e>
   e3e84:	462b      	mov	r3, r5
   e3e86:	4642      	mov	r2, r8
   e3e88:	e093      	b.n	e3fb2 <strftime+0x36e>
   e3e8a:	49b6      	ldr	r1, [pc, #728]	; (e4164 <strftime+0x520>)
   e3e8c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e3e90:	458b      	cmp	fp, r1
   e3e92:	bfac      	ite	ge
   e3e94:	2100      	movge	r1, #0
   e3e96:	2101      	movlt	r1, #1
   e3e98:	f1bb 0f00 	cmp.w	fp, #0
   e3e9c:	db04      	blt.n	e3ea8 <strftime+0x264>
   e3e9e:	2064      	movs	r0, #100	; 0x64
   e3ea0:	fb9b f0f0 	sdiv	r0, fp, r0
   e3ea4:	3013      	adds	r0, #19
   e3ea6:	e008      	b.n	e3eba <strftime+0x276>
   e3ea8:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e3eac:	9107      	str	r1, [sp, #28]
   e3eae:	f001 fd37 	bl	e5920 <abs>
   e3eb2:	9907      	ldr	r1, [sp, #28]
   e3eb4:	2364      	movs	r3, #100	; 0x64
   e3eb6:	fb90 f0f3 	sdiv	r0, r0, r3
   e3eba:	f1ba 0f00 	cmp.w	sl, #0
   e3ebe:	d008      	beq.n	e3ed2 <strftime+0x28e>
   e3ec0:	2863      	cmp	r0, #99	; 0x63
   e3ec2:	dd09      	ble.n	e3ed8 <strftime+0x294>
   e3ec4:	4ba8      	ldr	r3, [pc, #672]	; (e4168 <strftime+0x524>)
   e3ec6:	4aa9      	ldr	r2, [pc, #676]	; (e416c <strftime+0x528>)
   e3ec8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3ecc:	bf18      	it	ne
   e3ece:	4613      	movne	r3, r2
   e3ed0:	e003      	b.n	e3eda <strftime+0x296>
   e3ed2:	4ba6      	ldr	r3, [pc, #664]	; (e416c <strftime+0x528>)
   e3ed4:	4aa6      	ldr	r2, [pc, #664]	; (e4170 <strftime+0x52c>)
   e3ed6:	e001      	b.n	e3edc <strftime+0x298>
   e3ed8:	4ba4      	ldr	r3, [pc, #656]	; (e416c <strftime+0x528>)
   e3eda:	4aa6      	ldr	r2, [pc, #664]	; (e4174 <strftime+0x530>)
   e3edc:	9001      	str	r0, [sp, #4]
   e3ede:	f1b8 0f01 	cmp.w	r8, #1
   e3ee2:	bf98      	it	ls
   e3ee4:	f04f 0802 	movls.w	r8, #2
   e3ee8:	ebc1 0108 	rsb	r1, r1, r8
   e3eec:	9100      	str	r1, [sp, #0]
   e3eee:	489d      	ldr	r0, [pc, #628]	; (e4164 <strftime+0x520>)
   e3ef0:	49a1      	ldr	r1, [pc, #644]	; (e4178 <strftime+0x534>)
   e3ef2:	4583      	cmp	fp, r0
   e3ef4:	bfb8      	it	lt
   e3ef6:	460b      	movlt	r3, r1
   e3ef8:	e21e      	b.n	e4338 <strftime+0x6f4>
   e3efa:	4aa0      	ldr	r2, [pc, #640]	; (e417c <strftime+0x538>)
   e3efc:	49a0      	ldr	r1, [pc, #640]	; (e4180 <strftime+0x53c>)
   e3efe:	68eb      	ldr	r3, [r5, #12]
   e3f00:	2864      	cmp	r0, #100	; 0x64
   e3f02:	bf08      	it	eq
   e3f04:	460a      	moveq	r2, r1
   e3f06:	1b31      	subs	r1, r6, r4
   e3f08:	1938      	adds	r0, r7, r4
   e3f0a:	f7f6 fdeb 	bl	daae4 <sniprintf>
   e3f0e:	2800      	cmp	r0, #0
   e3f10:	f280 8302 	bge.w	e4518 <strftime+0x8d4>
   e3f14:	e340      	b.n	e4598 <strftime+0x954>
   e3f16:	6968      	ldr	r0, [r5, #20]
   e3f18:	692b      	ldr	r3, [r5, #16]
   e3f1a:	2800      	cmp	r0, #0
   e3f1c:	f103 0b01 	add.w	fp, r3, #1
   e3f20:	eb07 0804 	add.w	r8, r7, r4
   e3f24:	ebc4 0a06 	rsb	sl, r4, r6
   e3f28:	68eb      	ldr	r3, [r5, #12]
   e3f2a:	db05      	blt.n	e3f38 <strftime+0x2f4>
   e3f2c:	2264      	movs	r2, #100	; 0x64
   e3f2e:	fb90 f1f2 	sdiv	r1, r0, r2
   e3f32:	fb02 0011 	mls	r0, r2, r1, r0
   e3f36:	e00a      	b.n	e3f4e <strftime+0x30a>
   e3f38:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3f3c:	9307      	str	r3, [sp, #28]
   e3f3e:	f001 fcef 	bl	e5920 <abs>
   e3f42:	2264      	movs	r2, #100	; 0x64
   e3f44:	9b07      	ldr	r3, [sp, #28]
   e3f46:	fb90 f1f2 	sdiv	r1, r0, r2
   e3f4a:	fb01 0012 	mls	r0, r1, r2, r0
   e3f4e:	4a8d      	ldr	r2, [pc, #564]	; (e4184 <strftime+0x540>)
   e3f50:	9001      	str	r0, [sp, #4]
   e3f52:	9300      	str	r3, [sp, #0]
   e3f54:	4651      	mov	r1, sl
   e3f56:	465b      	mov	r3, fp
   e3f58:	4640      	mov	r0, r8
   e3f5a:	f7f6 fdc3 	bl	daae4 <sniprintf>
   e3f5e:	e7d6      	b.n	e3f0e <strftime+0x2ca>
   e3f60:	2325      	movs	r3, #37	; 0x25
   e3f62:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e3f66:	f1ba 0f00 	cmp.w	sl, #0
   e3f6a:	d007      	beq.n	e3f7c <strftime+0x338>
   e3f6c:	f1b8 0f05 	cmp.w	r8, #5
   e3f70:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e3f74:	bf98      	it	ls
   e3f76:	f04f 0806 	movls.w	r8, #6
   e3f7a:	e004      	b.n	e3f86 <strftime+0x342>
   e3f7c:	232b      	movs	r3, #43	; 0x2b
   e3f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e3f82:	f04f 080a 	mov.w	r8, #10
   e3f86:	f1b8 0306 	subs.w	r3, r8, #6
   e3f8a:	d102      	bne.n	e3f92 <strftime+0x34e>
   e3f8c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e3f90:	e00a      	b.n	e3fa8 <strftime+0x364>
   e3f92:	4a7d      	ldr	r2, [pc, #500]	; (e4188 <strftime+0x544>)
   e3f94:	211e      	movs	r1, #30
   e3f96:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e3f9a:	f7f6 fda3 	bl	daae4 <sniprintf>
   e3f9e:	2800      	cmp	r0, #0
   e3fa0:	ddf4      	ble.n	e3f8c <strftime+0x348>
   e3fa2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e3fa6:	4418      	add	r0, r3
   e3fa8:	4978      	ldr	r1, [pc, #480]	; (e418c <strftime+0x548>)
   e3faa:	f7ff fdc7 	bl	e3b3c <strcpy>
   e3fae:	462b      	mov	r3, r5
   e3fb0:	aa0a      	add	r2, sp, #40	; 0x28
   e3fb2:	1b31      	subs	r1, r6, r4
   e3fb4:	1938      	adds	r0, r7, r4
   e3fb6:	f7ff fe45 	bl	e3c44 <strftime>
   e3fba:	2800      	cmp	r0, #0
   e3fbc:	f340 82ec 	ble.w	e4598 <strftime+0x954>
   e3fc0:	4404      	add	r4, r0
   e3fc2:	e2de      	b.n	e4582 <strftime+0x93e>
   e3fc4:	4628      	mov	r0, r5
   e3fc6:	f7ff fddc 	bl	e3b82 <iso_year_adjust>
   e3fca:	4680      	mov	r8, r0
   e3fcc:	6968      	ldr	r0, [r5, #20]
   e3fce:	2800      	cmp	r0, #0
   e3fd0:	db05      	blt.n	e3fde <strftime+0x39a>
   e3fd2:	2264      	movs	r2, #100	; 0x64
   e3fd4:	fb90 f1f2 	sdiv	r1, r0, r2
   e3fd8:	fb02 0011 	mls	r0, r2, r1, r0
   e3fdc:	e008      	b.n	e3ff0 <strftime+0x3ac>
   e3fde:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3fe2:	f001 fc9d 	bl	e5920 <abs>
   e3fe6:	2264      	movs	r2, #100	; 0x64
   e3fe8:	fb90 f3f2 	sdiv	r3, r0, r2
   e3fec:	fb03 0012 	mls	r0, r3, r2, r0
   e3ff0:	f1b8 0f00 	cmp.w	r8, #0
   e3ff4:	da06      	bge.n	e4004 <strftime+0x3c0>
   e3ff6:	696a      	ldr	r2, [r5, #20]
   e3ff8:	4b65      	ldr	r3, [pc, #404]	; (e4190 <strftime+0x54c>)
   e3ffa:	429a      	cmp	r2, r3
   e3ffc:	bfb8      	it	lt
   e3ffe:	f04f 0801 	movlt.w	r8, #1
   e4002:	e006      	b.n	e4012 <strftime+0x3ce>
   e4004:	d005      	beq.n	e4012 <strftime+0x3ce>
   e4006:	696a      	ldr	r2, [r5, #20]
   e4008:	4b56      	ldr	r3, [pc, #344]	; (e4164 <strftime+0x520>)
   e400a:	429a      	cmp	r2, r3
   e400c:	bfb8      	it	lt
   e400e:	f04f 38ff 	movlt.w	r8, #4294967295
   e4012:	2364      	movs	r3, #100	; 0x64
   e4014:	4440      	add	r0, r8
   e4016:	fb90 f2f3 	sdiv	r2, r0, r3
   e401a:	fb03 0012 	mls	r0, r3, r2, r0
   e401e:	4418      	add	r0, r3
   e4020:	e1f9      	b.n	e4416 <strftime+0x7d2>
   e4022:	4b50      	ldr	r3, [pc, #320]	; (e4164 <strftime+0x520>)
   e4024:	6969      	ldr	r1, [r5, #20]
   e4026:	9108      	str	r1, [sp, #32]
   e4028:	4299      	cmp	r1, r3
   e402a:	bfac      	ite	ge
   e402c:	2300      	movge	r3, #0
   e402e:	2301      	movlt	r3, #1
   e4030:	4628      	mov	r0, r5
   e4032:	9307      	str	r3, [sp, #28]
   e4034:	f7ff fda5 	bl	e3b82 <iso_year_adjust>
   e4038:	9908      	ldr	r1, [sp, #32]
   e403a:	2900      	cmp	r1, #0
   e403c:	4683      	mov	fp, r0
   e403e:	db04      	blt.n	e404a <strftime+0x406>
   e4040:	2364      	movs	r3, #100	; 0x64
   e4042:	fb91 f3f3 	sdiv	r3, r1, r3
   e4046:	3313      	adds	r3, #19
   e4048:	e008      	b.n	e405c <strftime+0x418>
   e404a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e404e:	9108      	str	r1, [sp, #32]
   e4050:	f001 fc66 	bl	e5920 <abs>
   e4054:	9908      	ldr	r1, [sp, #32]
   e4056:	2364      	movs	r3, #100	; 0x64
   e4058:	fb90 f3f3 	sdiv	r3, r0, r3
   e405c:	6968      	ldr	r0, [r5, #20]
   e405e:	2800      	cmp	r0, #0
   e4060:	db06      	blt.n	e4070 <strftime+0x42c>
   e4062:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4066:	fb90 fcfe 	sdiv	ip, r0, lr
   e406a:	fb0e 001c 	mls	r0, lr, ip, r0
   e406e:	e00d      	b.n	e408c <strftime+0x448>
   e4070:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4074:	9109      	str	r1, [sp, #36]	; 0x24
   e4076:	9308      	str	r3, [sp, #32]
   e4078:	f001 fc52 	bl	e5920 <abs>
   e407c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4080:	9909      	ldr	r1, [sp, #36]	; 0x24
   e4082:	9b08      	ldr	r3, [sp, #32]
   e4084:	fb90 fcfe 	sdiv	ip, r0, lr
   e4088:	fb0c 001e 	mls	r0, ip, lr, r0
   e408c:	f1bb 0f00 	cmp.w	fp, #0
   e4090:	da08      	bge.n	e40a4 <strftime+0x460>
   e4092:	6969      	ldr	r1, [r5, #20]
   e4094:	4a3e      	ldr	r2, [pc, #248]	; (e4190 <strftime+0x54c>)
   e4096:	4291      	cmp	r1, r2
   e4098:	da0a      	bge.n	e40b0 <strftime+0x46c>
   e409a:	f04f 0b01 	mov.w	fp, #1
   e409e:	f8cd b01c 	str.w	fp, [sp, #28]
   e40a2:	e005      	b.n	e40b0 <strftime+0x46c>
   e40a4:	d004      	beq.n	e40b0 <strftime+0x46c>
   e40a6:	4a2f      	ldr	r2, [pc, #188]	; (e4164 <strftime+0x520>)
   e40a8:	4291      	cmp	r1, r2
   e40aa:	bfb8      	it	lt
   e40ac:	f04f 3bff 	movlt.w	fp, #4294967295
   e40b0:	eb0b 0200 	add.w	r2, fp, r0
   e40b4:	1c50      	adds	r0, r2, #1
   e40b6:	d102      	bne.n	e40be <strftime+0x47a>
   e40b8:	3b01      	subs	r3, #1
   e40ba:	2263      	movs	r2, #99	; 0x63
   e40bc:	e003      	b.n	e40c6 <strftime+0x482>
   e40be:	2a64      	cmp	r2, #100	; 0x64
   e40c0:	bf04      	itt	eq
   e40c2:	3301      	addeq	r3, #1
   e40c4:	2200      	moveq	r2, #0
   e40c6:	2064      	movs	r0, #100	; 0x64
   e40c8:	fb00 2303 	mla	r3, r0, r3, r2
   e40cc:	9a07      	ldr	r2, [sp, #28]
   e40ce:	b142      	cbz	r2, e40e2 <strftime+0x49e>
   e40d0:	222d      	movs	r2, #45	; 0x2d
   e40d2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e40d6:	f1b8 0f00 	cmp.w	r8, #0
   e40da:	d013      	beq.n	e4104 <strftime+0x4c0>
   e40dc:	f108 38ff 	add.w	r8, r8, #4294967295
   e40e0:	e010      	b.n	e4104 <strftime+0x4c0>
   e40e2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e40e6:	d110      	bne.n	e410a <strftime+0x4c6>
   e40e8:	f242 720f 	movw	r2, #9999	; 0x270f
   e40ec:	4293      	cmp	r3, r2
   e40ee:	d90c      	bls.n	e410a <strftime+0x4c6>
   e40f0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e40f4:	f1b8 0f00 	cmp.w	r8, #0
   e40f8:	d1f0      	bne.n	e40dc <strftime+0x498>
   e40fa:	aa12      	add	r2, sp, #72	; 0x48
   e40fc:	2125      	movs	r1, #37	; 0x25
   e40fe:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e4102:	e00a      	b.n	e411a <strftime+0x4d6>
   e4104:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e4108:	e000      	b.n	e410c <strftime+0x4c8>
   e410a:	aa0a      	add	r2, sp, #40	; 0x28
   e410c:	2125      	movs	r1, #37	; 0x25
   e410e:	7011      	strb	r1, [r2, #0]
   e4110:	f1ba 0f00 	cmp.w	sl, #0
   e4114:	d101      	bne.n	e411a <strftime+0x4d6>
   e4116:	1c50      	adds	r0, r2, #1
   e4118:	e002      	b.n	e4120 <strftime+0x4dc>
   e411a:	2130      	movs	r1, #48	; 0x30
   e411c:	1c90      	adds	r0, r2, #2
   e411e:	7051      	strb	r1, [r2, #1]
   e4120:	491c      	ldr	r1, [pc, #112]	; (e4194 <strftime+0x550>)
   e4122:	9307      	str	r3, [sp, #28]
   e4124:	f7ff fd0a 	bl	e3b3c <strcpy>
   e4128:	9b07      	ldr	r3, [sp, #28]
   e412a:	9300      	str	r3, [sp, #0]
   e412c:	e1ad      	b.n	e448a <strftime+0x846>
   e412e:	4a14      	ldr	r2, [pc, #80]	; (e4180 <strftime+0x53c>)
   e4130:	4912      	ldr	r1, [pc, #72]	; (e417c <strftime+0x538>)
   e4132:	68ab      	ldr	r3, [r5, #8]
   e4134:	286b      	cmp	r0, #107	; 0x6b
   e4136:	bf08      	it	eq
   e4138:	460a      	moveq	r2, r1
   e413a:	e6e4      	b.n	e3f06 <strftime+0x2c2>
   e413c:	68a9      	ldr	r1, [r5, #8]
   e413e:	230c      	movs	r3, #12
   e4140:	b131      	cbz	r1, e4150 <strftime+0x50c>
   e4142:	4299      	cmp	r1, r3
   e4144:	bf0e      	itee	eq
   e4146:	460b      	moveq	r3, r1
   e4148:	fb91 f2f3 	sdivne	r2, r1, r3
   e414c:	fb03 1312 	mlsne	r3, r3, r2, r1
   e4150:	4a0a      	ldr	r2, [pc, #40]	; (e417c <strftime+0x538>)
   e4152:	490b      	ldr	r1, [pc, #44]	; (e4180 <strftime+0x53c>)
   e4154:	2849      	cmp	r0, #73	; 0x49
   e4156:	bf08      	it	eq
   e4158:	460a      	moveq	r2, r1
   e415a:	e6d4      	b.n	e3f06 <strftime+0x2c2>
   e415c:	69eb      	ldr	r3, [r5, #28]
   e415e:	4a0e      	ldr	r2, [pc, #56]	; (e4198 <strftime+0x554>)
   e4160:	3301      	adds	r3, #1
   e4162:	e6d0      	b.n	e3f06 <strftime+0x2c2>
   e4164:	fffff894 	.word	0xfffff894
   e4168:	000e8613 	.word	0x000e8613
   e416c:	000e6c91 	.word	0x000e6c91
   e4170:	000e8604 	.word	0x000e8604
   e4174:	000e860b 	.word	0x000e860b
   e4178:	000e7494 	.word	0x000e7494
   e417c:	000e8615 	.word	0x000e8615
   e4180:	000e8623 	.word	0x000e8623
   e4184:	000e8619 	.word	0x000e8619
   e4188:	000e8628 	.word	0x000e8628
   e418c:	000e862c 	.word	0x000e862c
   e4190:	fffff895 	.word	0xfffff895
   e4194:	000e8634 	.word	0x000e8634
   e4198:	000e8638 	.word	0x000e8638
   e419c:	692b      	ldr	r3, [r5, #16]
   e419e:	3301      	adds	r3, #1
   e41a0:	e13d      	b.n	e441e <strftime+0x7da>
   e41a2:	686b      	ldr	r3, [r5, #4]
   e41a4:	e13b      	b.n	e441e <strftime+0x7da>
   e41a6:	9b02      	ldr	r3, [sp, #8]
   e41a8:	429c      	cmp	r4, r3
   e41aa:	f080 81f5 	bcs.w	e4598 <strftime+0x954>
   e41ae:	230a      	movs	r3, #10
   e41b0:	e1e5      	b.n	e457e <strftime+0x93a>
   e41b2:	68ab      	ldr	r3, [r5, #8]
   e41b4:	9a03      	ldr	r2, [sp, #12]
   e41b6:	2b0b      	cmp	r3, #11
   e41b8:	bfcc      	ite	gt
   e41ba:	23a4      	movgt	r3, #164	; 0xa4
   e41bc:	23a0      	movle	r3, #160	; 0xa0
   e41be:	4413      	add	r3, r2
   e41c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e41c4:	4640      	mov	r0, r8
   e41c6:	f000 f9f1 	bl	e45ac <strlen>
   e41ca:	4bb2      	ldr	r3, [pc, #712]	; (e4494 <strftime+0x850>)
   e41cc:	f8d3 e000 	ldr.w	lr, [r3]
   e41d0:	1939      	adds	r1, r7, r4
   e41d2:	4642      	mov	r2, r8
   e41d4:	4420      	add	r0, r4
   e41d6:	4284      	cmp	r4, r0
   e41d8:	f000 81d3 	beq.w	e4582 <strftime+0x93e>
   e41dc:	9b02      	ldr	r3, [sp, #8]
   e41de:	429c      	cmp	r4, r3
   e41e0:	f080 81da 	bcs.w	e4598 <strftime+0x954>
   e41e4:	f899 3000 	ldrb.w	r3, [r9]
   e41e8:	2b50      	cmp	r3, #80	; 0x50
   e41ea:	f104 0401 	add.w	r4, r4, #1
   e41ee:	7813      	ldrb	r3, [r2, #0]
   e41f0:	d10a      	bne.n	e4208 <strftime+0x5c4>
   e41f2:	eb0e 0c03 	add.w	ip, lr, r3
   e41f6:	f89c c001 	ldrb.w	ip, [ip, #1]
   e41fa:	f00c 0c03 	and.w	ip, ip, #3
   e41fe:	f1bc 0f01 	cmp.w	ip, #1
   e4202:	bf08      	it	eq
   e4204:	3320      	addeq	r3, #32
   e4206:	b2db      	uxtb	r3, r3
   e4208:	f801 3b01 	strb.w	r3, [r1], #1
   e420c:	3201      	adds	r2, #1
   e420e:	e7e2      	b.n	e41d6 <strftime+0x592>
   e4210:	686b      	ldr	r3, [r5, #4]
   e4212:	9300      	str	r3, [sp, #0]
   e4214:	4aa0      	ldr	r2, [pc, #640]	; (e4498 <strftime+0x854>)
   e4216:	68ab      	ldr	r3, [r5, #8]
   e4218:	e139      	b.n	e448e <strftime+0x84a>
   e421a:	6a2b      	ldr	r3, [r5, #32]
   e421c:	2b00      	cmp	r3, #0
   e421e:	db17      	blt.n	e4250 <strftime+0x60c>
   e4220:	f001 f9f6 	bl	e5610 <__tz_lock>
   e4224:	9b06      	ldr	r3, [sp, #24]
   e4226:	b91b      	cbnz	r3, e4230 <strftime+0x5ec>
   e4228:	f001 f9f4 	bl	e5614 <_tzset_unlocked>
   e422c:	2301      	movs	r3, #1
   e422e:	9306      	str	r3, [sp, #24]
   e4230:	f001 fef0 	bl	e6014 <__gettzinfo>
   e4234:	6a2b      	ldr	r3, [r5, #32]
   e4236:	2b00      	cmp	r3, #0
   e4238:	bfd4      	ite	le
   e423a:	2300      	movle	r3, #0
   e423c:	2301      	movgt	r3, #1
   e423e:	221c      	movs	r2, #28
   e4240:	fb02 0003 	mla	r0, r2, r3, r0
   e4244:	6a03      	ldr	r3, [r0, #32]
   e4246:	f1c3 0800 	rsb	r8, r3, #0
   e424a:	f001 f9e2 	bl	e5612 <__tz_unlock>
   e424e:	e001      	b.n	e4254 <strftime+0x610>
   e4250:	f04f 0800 	mov.w	r8, #0
   e4254:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e4258:	4670      	mov	r0, lr
   e425a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e425e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e4262:	f141 33ff 	adc.w	r3, r1, #4294967295
   e4266:	2a00      	cmp	r2, #0
   e4268:	f173 0b00 	sbcs.w	fp, r3, #0
   e426c:	ebc4 0c06 	rsb	ip, r4, r6
   e4270:	eb07 0a04 	add.w	sl, r7, r4
   e4274:	da03      	bge.n	e427e <strftime+0x63a>
   e4276:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e427a:	f141 33ff 	adc.w	r3, r1, #4294967295
   e427e:	0891      	lsrs	r1, r2, #2
   e4280:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e4284:	109b      	asrs	r3, r3, #2
   e4286:	9104      	str	r1, [sp, #16]
   e4288:	9305      	str	r3, [sp, #20]
   e428a:	f10e 31ff 	add.w	r1, lr, #4294967295
   e428e:	2364      	movs	r3, #100	; 0x64
   e4290:	fb91 f1f3 	sdiv	r1, r1, r3
   e4294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e4298:	1a52      	subs	r2, r2, r1
   e429a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e429e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e42a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e42a6:	fb90 f1f1 	sdiv	r1, r0, r1
   e42aa:	1852      	adds	r2, r2, r1
   e42ac:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e42b0:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e42b4:	f240 116d 	movw	r1, #365	; 0x16d
   e42b8:	fb01 fe0e 	mul.w	lr, r1, lr
   e42bc:	69e9      	ldr	r1, [r5, #28]
   e42be:	eb12 020e 	adds.w	r2, r2, lr
   e42c2:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e42c6:	1852      	adds	r2, r2, r1
   e42c8:	f04f 0e18 	mov.w	lr, #24
   e42cc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e42d0:	fba2 010e 	umull	r0, r1, r2, lr
   e42d4:	fb0e 1103 	mla	r1, lr, r3, r1
   e42d8:	68ab      	ldr	r3, [r5, #8]
   e42da:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e42de:	18c0      	adds	r0, r0, r3
   e42e0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e42e4:	fba0 230e 	umull	r2, r3, r0, lr
   e42e8:	fb0e 3301 	mla	r3, lr, r1, r3
   e42ec:	6869      	ldr	r1, [r5, #4]
   e42ee:	1852      	adds	r2, r2, r1
   e42f0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e42f4:	fba2 010e 	umull	r0, r1, r2, lr
   e42f8:	fb0e 1103 	mla	r1, lr, r3, r1
   e42fc:	682b      	ldr	r3, [r5, #0]
   e42fe:	4a67      	ldr	r2, [pc, #412]	; (e449c <strftime+0x858>)
   e4300:	18c0      	adds	r0, r0, r3
   e4302:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e4306:	ebb0 0008 	subs.w	r0, r0, r8
   e430a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e430e:	e9cd 0100 	strd	r0, r1, [sp]
   e4312:	4661      	mov	r1, ip
   e4314:	4650      	mov	r0, sl
   e4316:	f7f6 fbe5 	bl	daae4 <sniprintf>
   e431a:	e5f8      	b.n	e3f0e <strftime+0x2ca>
   e431c:	682b      	ldr	r3, [r5, #0]
   e431e:	e07e      	b.n	e441e <strftime+0x7da>
   e4320:	9b02      	ldr	r3, [sp, #8]
   e4322:	429c      	cmp	r4, r3
   e4324:	f080 8138 	bcs.w	e4598 <strftime+0x954>
   e4328:	2309      	movs	r3, #9
   e432a:	e128      	b.n	e457e <strftime+0x93a>
   e432c:	682b      	ldr	r3, [r5, #0]
   e432e:	9301      	str	r3, [sp, #4]
   e4330:	686b      	ldr	r3, [r5, #4]
   e4332:	9300      	str	r3, [sp, #0]
   e4334:	4a5a      	ldr	r2, [pc, #360]	; (e44a0 <strftime+0x85c>)
   e4336:	68ab      	ldr	r3, [r5, #8]
   e4338:	1b31      	subs	r1, r6, r4
   e433a:	1938      	adds	r0, r7, r4
   e433c:	e60d      	b.n	e3f5a <strftime+0x316>
   e433e:	9b02      	ldr	r3, [sp, #8]
   e4340:	429c      	cmp	r4, r3
   e4342:	f080 8129 	bcs.w	e4598 <strftime+0x954>
   e4346:	69ab      	ldr	r3, [r5, #24]
   e4348:	1c62      	adds	r2, r4, #1
   e434a:	b90b      	cbnz	r3, e4350 <strftime+0x70c>
   e434c:	2337      	movs	r3, #55	; 0x37
   e434e:	e000      	b.n	e4352 <strftime+0x70e>
   e4350:	3330      	adds	r3, #48	; 0x30
   e4352:	553b      	strb	r3, [r7, r4]
   e4354:	4614      	mov	r4, r2
   e4356:	e114      	b.n	e4582 <strftime+0x93e>
   e4358:	69eb      	ldr	r3, [r5, #28]
   e435a:	69aa      	ldr	r2, [r5, #24]
   e435c:	3307      	adds	r3, #7
   e435e:	1a9b      	subs	r3, r3, r2
   e4360:	2207      	movs	r2, #7
   e4362:	fb93 f3f2 	sdiv	r3, r3, r2
   e4366:	e05a      	b.n	e441e <strftime+0x7da>
   e4368:	4628      	mov	r0, r5
   e436a:	f7ff fc0a 	bl	e3b82 <iso_year_adjust>
   e436e:	69aa      	ldr	r2, [r5, #24]
   e4370:	b10a      	cbz	r2, e4376 <strftime+0x732>
   e4372:	1e53      	subs	r3, r2, #1
   e4374:	e000      	b.n	e4378 <strftime+0x734>
   e4376:	2306      	movs	r3, #6
   e4378:	2800      	cmp	r0, #0
   e437a:	dc2f      	bgt.n	e43dc <strftime+0x798>
   e437c:	69ea      	ldr	r2, [r5, #28]
   e437e:	d101      	bne.n	e4384 <strftime+0x740>
   e4380:	320a      	adds	r2, #10
   e4382:	e03b      	b.n	e43fc <strftime+0x7b8>
   e4384:	1a9a      	subs	r2, r3, r2
   e4386:	696b      	ldr	r3, [r5, #20]
   e4388:	f240 716b 	movw	r1, #1899	; 0x76b
   e438c:	2b00      	cmp	r3, #0
   e438e:	bfb4      	ite	lt
   e4390:	4608      	movlt	r0, r1
   e4392:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e4396:	4418      	add	r0, r3
   e4398:	0781      	lsls	r1, r0, #30
   e439a:	d107      	bne.n	e43ac <strftime+0x768>
   e439c:	4601      	mov	r1, r0
   e439e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e43a2:	fb90 f0fe 	sdiv	r0, r0, lr
   e43a6:	fb0e 1110 	mls	r1, lr, r0, r1
   e43aa:	b981      	cbnz	r1, e43ce <strftime+0x78a>
   e43ac:	2b00      	cmp	r3, #0
   e43ae:	f240 716b 	movw	r1, #1899	; 0x76b
   e43b2:	bfa8      	it	ge
   e43b4:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e43b8:	4419      	add	r1, r3
   e43ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e43be:	fb91 f0f3 	sdiv	r0, r1, r3
   e43c2:	fb03 1110 	mls	r1, r3, r0, r1
   e43c6:	fab1 f181 	clz	r1, r1
   e43ca:	0949      	lsrs	r1, r1, #5
   e43cc:	e000      	b.n	e43d0 <strftime+0x78c>
   e43ce:	2101      	movs	r1, #1
   e43d0:	1a52      	subs	r2, r2, r1
   e43d2:	2a05      	cmp	r2, #5
   e43d4:	bfb4      	ite	lt
   e43d6:	2335      	movlt	r3, #53	; 0x35
   e43d8:	2334      	movge	r3, #52	; 0x34
   e43da:	e020      	b.n	e441e <strftime+0x7da>
   e43dc:	2301      	movs	r3, #1
   e43de:	e01e      	b.n	e441e <strftime+0x7da>
   e43e0:	9b02      	ldr	r3, [sp, #8]
   e43e2:	429c      	cmp	r4, r3
   e43e4:	f080 80d8 	bcs.w	e4598 <strftime+0x954>
   e43e8:	69ab      	ldr	r3, [r5, #24]
   e43ea:	3330      	adds	r3, #48	; 0x30
   e43ec:	e0c7      	b.n	e457e <strftime+0x93a>
   e43ee:	69aa      	ldr	r2, [r5, #24]
   e43f0:	b10a      	cbz	r2, e43f6 <strftime+0x7b2>
   e43f2:	1e53      	subs	r3, r2, #1
   e43f4:	e000      	b.n	e43f8 <strftime+0x7b4>
   e43f6:	2306      	movs	r3, #6
   e43f8:	69ea      	ldr	r2, [r5, #28]
   e43fa:	3207      	adds	r2, #7
   e43fc:	1ad2      	subs	r2, r2, r3
   e43fe:	2307      	movs	r3, #7
   e4400:	fb92 f3f3 	sdiv	r3, r2, r3
   e4404:	e00b      	b.n	e441e <strftime+0x7da>
   e4406:	6968      	ldr	r0, [r5, #20]
   e4408:	2800      	cmp	r0, #0
   e440a:	da03      	bge.n	e4414 <strftime+0x7d0>
   e440c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4410:	f001 fa86 	bl	e5920 <abs>
   e4414:	2364      	movs	r3, #100	; 0x64
   e4416:	fb90 f2f3 	sdiv	r2, r0, r3
   e441a:	fb02 0313 	mls	r3, r2, r3, r0
   e441e:	4a21      	ldr	r2, [pc, #132]	; (e44a4 <strftime+0x860>)
   e4420:	e571      	b.n	e3f06 <strftime+0x2c2>
   e4422:	696b      	ldr	r3, [r5, #20]
   e4424:	4a20      	ldr	r2, [pc, #128]	; (e44a8 <strftime+0x864>)
   e4426:	4293      	cmp	r3, r2
   e4428:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e442c:	da05      	bge.n	e443a <strftime+0x7f6>
   e442e:	232d      	movs	r3, #45	; 0x2d
   e4430:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4434:	f1cb 0b00 	rsb	fp, fp, #0
   e4438:	e008      	b.n	e444c <strftime+0x808>
   e443a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e443e:	d10d      	bne.n	e445c <strftime+0x818>
   e4440:	f242 730f 	movw	r3, #9999	; 0x270f
   e4444:	459b      	cmp	fp, r3
   e4446:	d911      	bls.n	e446c <strftime+0x828>
   e4448:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e444c:	f1b8 0f00 	cmp.w	r8, #0
   e4450:	d001      	beq.n	e4456 <strftime+0x812>
   e4452:	f108 38ff 	add.w	r8, r8, #4294967295
   e4456:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e445a:	e000      	b.n	e445e <strftime+0x81a>
   e445c:	ab0a      	add	r3, sp, #40	; 0x28
   e445e:	2225      	movs	r2, #37	; 0x25
   e4460:	701a      	strb	r2, [r3, #0]
   e4462:	f1ba 0f00 	cmp.w	sl, #0
   e4466:	d108      	bne.n	e447a <strftime+0x836>
   e4468:	1c58      	adds	r0, r3, #1
   e446a:	e009      	b.n	e4480 <strftime+0x83c>
   e446c:	f1b8 0f00 	cmp.w	r8, #0
   e4470:	d1f4      	bne.n	e445c <strftime+0x818>
   e4472:	2325      	movs	r3, #37	; 0x25
   e4474:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4478:	ab0a      	add	r3, sp, #40	; 0x28
   e447a:	2230      	movs	r2, #48	; 0x30
   e447c:	1c98      	adds	r0, r3, #2
   e447e:	705a      	strb	r2, [r3, #1]
   e4480:	490a      	ldr	r1, [pc, #40]	; (e44ac <strftime+0x868>)
   e4482:	f7ff fb5b 	bl	e3b3c <strcpy>
   e4486:	f8cd b000 	str.w	fp, [sp]
   e448a:	4643      	mov	r3, r8
   e448c:	aa0a      	add	r2, sp, #40	; 0x28
   e448e:	1b31      	subs	r1, r6, r4
   e4490:	1938      	adds	r0, r7, r4
   e4492:	e03e      	b.n	e4512 <strftime+0x8ce>
   e4494:	2003d580 	.word	0x2003d580
   e4498:	000e8647 	.word	0x000e8647
   e449c:	000e863d 	.word	0x000e863d
   e44a0:	000e8642 	.word	0x000e8642
   e44a4:	000e8623 	.word	0x000e8623
   e44a8:	fffff894 	.word	0xfffff894
   e44ac:	000e8634 	.word	0x000e8634
   e44b0:	6a2b      	ldr	r3, [r5, #32]
   e44b2:	2b00      	cmp	r3, #0
   e44b4:	db65      	blt.n	e4582 <strftime+0x93e>
   e44b6:	f001 f8ab 	bl	e5610 <__tz_lock>
   e44ba:	9b06      	ldr	r3, [sp, #24]
   e44bc:	b91b      	cbnz	r3, e44c6 <strftime+0x882>
   e44be:	f001 f8a9 	bl	e5614 <_tzset_unlocked>
   e44c2:	2301      	movs	r3, #1
   e44c4:	9306      	str	r3, [sp, #24]
   e44c6:	f001 fda5 	bl	e6014 <__gettzinfo>
   e44ca:	6a2b      	ldr	r3, [r5, #32]
   e44cc:	2b00      	cmp	r3, #0
   e44ce:	bfd4      	ite	le
   e44d0:	2300      	movle	r3, #0
   e44d2:	2301      	movgt	r3, #1
   e44d4:	221c      	movs	r2, #28
   e44d6:	fb02 0003 	mla	r0, r2, r3, r0
   e44da:	eb07 0a04 	add.w	sl, r7, r4
   e44de:	6a03      	ldr	r3, [r0, #32]
   e44e0:	f1c3 0800 	rsb	r8, r3, #0
   e44e4:	f001 f895 	bl	e5612 <__tz_unlock>
   e44e8:	233c      	movs	r3, #60	; 0x3c
   e44ea:	fb98 f0f3 	sdiv	r0, r8, r3
   e44ee:	9307      	str	r3, [sp, #28]
   e44f0:	f001 fe2c 	bl	e614c <labs>
   e44f4:	9b07      	ldr	r3, [sp, #28]
   e44f6:	fb90 f2f3 	sdiv	r2, r0, r3
   e44fa:	ebc4 0b06 	rsb	fp, r4, r6
   e44fe:	fb02 0013 	mls	r0, r2, r3, r0
   e4502:	4a28      	ldr	r2, [pc, #160]	; (e45a4 <strftime+0x960>)
   e4504:	9000      	str	r0, [sp, #0]
   e4506:	4659      	mov	r1, fp
   e4508:	4650      	mov	r0, sl
   e450a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e450e:	fb98 f3f3 	sdiv	r3, r8, r3
   e4512:	f7f6 fae7 	bl	daae4 <sniprintf>
   e4516:	e4fa      	b.n	e3f0e <strftime+0x2ca>
   e4518:	4404      	add	r4, r0
   e451a:	42a6      	cmp	r6, r4
   e451c:	d831      	bhi.n	e4582 <strftime+0x93e>
   e451e:	e03b      	b.n	e4598 <strftime+0x954>
   e4520:	6a2b      	ldr	r3, [r5, #32]
   e4522:	2b00      	cmp	r3, #0
   e4524:	db2d      	blt.n	e4582 <strftime+0x93e>
   e4526:	f001 f873 	bl	e5610 <__tz_lock>
   e452a:	9b06      	ldr	r3, [sp, #24]
   e452c:	b91b      	cbnz	r3, e4536 <strftime+0x8f2>
   e452e:	f001 f871 	bl	e5614 <_tzset_unlocked>
   e4532:	2301      	movs	r3, #1
   e4534:	9306      	str	r3, [sp, #24]
   e4536:	6a2b      	ldr	r3, [r5, #32]
   e4538:	4a1b      	ldr	r2, [pc, #108]	; (e45a8 <strftime+0x964>)
   e453a:	2b00      	cmp	r3, #0
   e453c:	bfd4      	ite	le
   e453e:	2300      	movle	r3, #0
   e4540:	2301      	movgt	r3, #1
   e4542:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e4546:	4640      	mov	r0, r8
   e4548:	f000 f830 	bl	e45ac <strlen>
   e454c:	f108 38ff 	add.w	r8, r8, #4294967295
   e4550:	193b      	adds	r3, r7, r4
   e4552:	4420      	add	r0, r4
   e4554:	4284      	cmp	r4, r0
   e4556:	d00b      	beq.n	e4570 <strftime+0x92c>
   e4558:	9a02      	ldr	r2, [sp, #8]
   e455a:	4294      	cmp	r4, r2
   e455c:	d205      	bcs.n	e456a <strftime+0x926>
   e455e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e4562:	f803 2b01 	strb.w	r2, [r3], #1
   e4566:	3401      	adds	r4, #1
   e4568:	e7f4      	b.n	e4554 <strftime+0x910>
   e456a:	f001 f852 	bl	e5612 <__tz_unlock>
   e456e:	e013      	b.n	e4598 <strftime+0x954>
   e4570:	f001 f84f 	bl	e5612 <__tz_unlock>
   e4574:	e005      	b.n	e4582 <strftime+0x93e>
   e4576:	9b02      	ldr	r3, [sp, #8]
   e4578:	429c      	cmp	r4, r3
   e457a:	d20d      	bcs.n	e4598 <strftime+0x954>
   e457c:	2325      	movs	r3, #37	; 0x25
   e457e:	553b      	strb	r3, [r7, r4]
   e4580:	3401      	adds	r4, #1
   e4582:	f899 3000 	ldrb.w	r3, [r9]
   e4586:	b11b      	cbz	r3, e4590 <strftime+0x94c>
   e4588:	f109 0901 	add.w	r9, r9, #1
   e458c:	f7ff bb69 	b.w	e3c62 <strftime+0x1e>
   e4590:	b126      	cbz	r6, e459c <strftime+0x958>
   e4592:	2300      	movs	r3, #0
   e4594:	553b      	strb	r3, [r7, r4]
   e4596:	e001      	b.n	e459c <strftime+0x958>
   e4598:	2000      	movs	r0, #0
   e459a:	e000      	b.n	e459e <strftime+0x95a>
   e459c:	4620      	mov	r0, r4
   e459e:	b013      	add	sp, #76	; 0x4c
   e45a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e45a4:	000e8651 	.word	0x000e8651
   e45a8:	2003d620 	.word	0x2003d620

000e45ac <strlen>:
   e45ac:	4603      	mov	r3, r0
   e45ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   e45b2:	2a00      	cmp	r2, #0
   e45b4:	d1fb      	bne.n	e45ae <strlen+0x2>
   e45b6:	1a18      	subs	r0, r3, r0
   e45b8:	3801      	subs	r0, #1
   e45ba:	4770      	bx	lr

000e45bc <strncmp>:
   e45bc:	b530      	push	{r4, r5, lr}
   e45be:	b182      	cbz	r2, e45e2 <strncmp+0x26>
   e45c0:	1e45      	subs	r5, r0, #1
   e45c2:	3901      	subs	r1, #1
   e45c4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e45c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e45cc:	42a3      	cmp	r3, r4
   e45ce:	d106      	bne.n	e45de <strncmp+0x22>
   e45d0:	43ec      	mvns	r4, r5
   e45d2:	4414      	add	r4, r2
   e45d4:	42e0      	cmn	r0, r4
   e45d6:	d001      	beq.n	e45dc <strncmp+0x20>
   e45d8:	2b00      	cmp	r3, #0
   e45da:	d1f3      	bne.n	e45c4 <strncmp+0x8>
   e45dc:	461c      	mov	r4, r3
   e45de:	1b18      	subs	r0, r3, r4
   e45e0:	bd30      	pop	{r4, r5, pc}
   e45e2:	4610      	mov	r0, r2
   e45e4:	bd30      	pop	{r4, r5, pc}

000e45e6 <strncpy>:
   e45e6:	b510      	push	{r4, lr}
   e45e8:	4603      	mov	r3, r0
   e45ea:	b142      	cbz	r2, e45fe <strncpy+0x18>
   e45ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   e45f0:	f803 4b01 	strb.w	r4, [r3], #1
   e45f4:	3a01      	subs	r2, #1
   e45f6:	2c00      	cmp	r4, #0
   e45f8:	d1f7      	bne.n	e45ea <strncpy+0x4>
   e45fa:	441a      	add	r2, r3
   e45fc:	e000      	b.n	e4600 <strncpy+0x1a>
   e45fe:	bd10      	pop	{r4, pc}
   e4600:	4293      	cmp	r3, r2
   e4602:	d002      	beq.n	e460a <strncpy+0x24>
   e4604:	f803 4b01 	strb.w	r4, [r3], #1
   e4608:	e7fa      	b.n	e4600 <strncpy+0x1a>
   e460a:	bd10      	pop	{r4, pc}

000e460c <sulp>:
   e460c:	b570      	push	{r4, r5, r6, lr}
   e460e:	4604      	mov	r4, r0
   e4610:	460d      	mov	r5, r1
   e4612:	ec45 4b10 	vmov	d0, r4, r5
   e4616:	4616      	mov	r6, r2
   e4618:	f002 f862 	bl	e66e0 <__ulp>
   e461c:	ec51 0b10 	vmov	r0, r1, d0
   e4620:	b17e      	cbz	r6, e4642 <sulp+0x36>
   e4622:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e4626:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e462a:	2b00      	cmp	r3, #0
   e462c:	dd09      	ble.n	e4642 <sulp+0x36>
   e462e:	051b      	lsls	r3, r3, #20
   e4630:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e4634:	2400      	movs	r4, #0
   e4636:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e463a:	4622      	mov	r2, r4
   e463c:	462b      	mov	r3, r5
   e463e:	f7fe fb4f 	bl	e2ce0 <__aeabi_dmul>
   e4642:	bd70      	pop	{r4, r5, r6, pc}
   e4644:	0000      	movs	r0, r0
	...

000e4648 <_strtod_r>:
   e4648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e464c:	b09d      	sub	sp, #116	; 0x74
   e464e:	2300      	movs	r3, #0
   e4650:	9002      	str	r0, [sp, #8]
   e4652:	460c      	mov	r4, r1
   e4654:	9213      	str	r2, [sp, #76]	; 0x4c
   e4656:	9318      	str	r3, [sp, #96]	; 0x60
   e4658:	f04f 0a00 	mov.w	sl, #0
   e465c:	f04f 0b00 	mov.w	fp, #0
   e4660:	9117      	str	r1, [sp, #92]	; 0x5c
   e4662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4664:	781a      	ldrb	r2, [r3, #0]
   e4666:	2a0d      	cmp	r2, #13
   e4668:	d805      	bhi.n	e4676 <_strtod_r+0x2e>
   e466a:	2a09      	cmp	r2, #9
   e466c:	d213      	bcs.n	e4696 <_strtod_r+0x4e>
   e466e:	2a00      	cmp	r2, #0
   e4670:	f000 81ac 	beq.w	e49cc <_strtod_r+0x384>
   e4674:	e012      	b.n	e469c <_strtod_r+0x54>
   e4676:	2a2b      	cmp	r2, #43	; 0x2b
   e4678:	d004      	beq.n	e4684 <_strtod_r+0x3c>
   e467a:	2a2d      	cmp	r2, #45	; 0x2d
   e467c:	d004      	beq.n	e4688 <_strtod_r+0x40>
   e467e:	2a20      	cmp	r2, #32
   e4680:	d10c      	bne.n	e469c <_strtod_r+0x54>
   e4682:	e008      	b.n	e4696 <_strtod_r+0x4e>
   e4684:	2200      	movs	r2, #0
   e4686:	e000      	b.n	e468a <_strtod_r+0x42>
   e4688:	2201      	movs	r2, #1
   e468a:	920c      	str	r2, [sp, #48]	; 0x30
   e468c:	1c5a      	adds	r2, r3, #1
   e468e:	9217      	str	r2, [sp, #92]	; 0x5c
   e4690:	785b      	ldrb	r3, [r3, #1]
   e4692:	b92b      	cbnz	r3, e46a0 <_strtod_r+0x58>
   e4694:	e19a      	b.n	e49cc <_strtod_r+0x384>
   e4696:	3301      	adds	r3, #1
   e4698:	9317      	str	r3, [sp, #92]	; 0x5c
   e469a:	e7e2      	b.n	e4662 <_strtod_r+0x1a>
   e469c:	2300      	movs	r3, #0
   e469e:	930c      	str	r3, [sp, #48]	; 0x30
   e46a0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e46a2:	782b      	ldrb	r3, [r5, #0]
   e46a4:	2b30      	cmp	r3, #48	; 0x30
   e46a6:	d15c      	bne.n	e4762 <_strtod_r+0x11a>
   e46a8:	786b      	ldrb	r3, [r5, #1]
   e46aa:	2b58      	cmp	r3, #88	; 0x58
   e46ac:	d001      	beq.n	e46b2 <_strtod_r+0x6a>
   e46ae:	2b78      	cmp	r3, #120	; 0x78
   e46b0:	d14c      	bne.n	e474c <_strtod_r+0x104>
   e46b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e46b4:	9301      	str	r3, [sp, #4]
   e46b6:	ab18      	add	r3, sp, #96	; 0x60
   e46b8:	9300      	str	r3, [sp, #0]
   e46ba:	4aa9      	ldr	r2, [pc, #676]	; (e4960 <_strtod_r+0x318>)
   e46bc:	9802      	ldr	r0, [sp, #8]
   e46be:	ab19      	add	r3, sp, #100	; 0x64
   e46c0:	a917      	add	r1, sp, #92	; 0x5c
   e46c2:	f001 f990 	bl	e59e6 <__gethex>
   e46c6:	f010 0607 	ands.w	r6, r0, #7
   e46ca:	4604      	mov	r4, r0
   e46cc:	f000 8587 	beq.w	e51de <_strtod_r+0xb96>
   e46d0:	2e06      	cmp	r6, #6
   e46d2:	d105      	bne.n	e46e0 <_strtod_r+0x98>
   e46d4:	3501      	adds	r5, #1
   e46d6:	2300      	movs	r3, #0
   e46d8:	9517      	str	r5, [sp, #92]	; 0x5c
   e46da:	930c      	str	r3, [sp, #48]	; 0x30
   e46dc:	f000 bd7f 	b.w	e51de <_strtod_r+0xb96>
   e46e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e46e2:	b13a      	cbz	r2, e46f4 <_strtod_r+0xac>
   e46e4:	2135      	movs	r1, #53	; 0x35
   e46e6:	a81a      	add	r0, sp, #104	; 0x68
   e46e8:	f002 f8e7 	bl	e68ba <__copybits>
   e46ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   e46ee:	9802      	ldr	r0, [sp, #8]
   e46f0:	f001 fd65 	bl	e61be <_Bfree>
   e46f4:	2e06      	cmp	r6, #6
   e46f6:	d822      	bhi.n	e473e <_strtod_r+0xf6>
   e46f8:	e8df f006 	tbb	[pc, r6]
   e46fc:	18080d04 	.word	0x18080d04
   e4700:	0d1d      	.short	0x0d1d
   e4702:	04          	.byte	0x04
   e4703:	00          	.byte	0x00
   e4704:	f04f 0b00 	mov.w	fp, #0
   e4708:	46da      	mov	sl, fp
   e470a:	e018      	b.n	e473e <_strtod_r+0xf6>
   e470c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e4710:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e4714:	e013      	b.n	e473e <_strtod_r+0xf6>
   e4716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e4718:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e471a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e471e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e4722:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e4726:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e472a:	e008      	b.n	e473e <_strtod_r+0xf6>
   e472c:	f8df b234 	ldr.w	fp, [pc, #564]	; e4964 <_strtod_r+0x31c>
   e4730:	f04f 0a00 	mov.w	sl, #0
   e4734:	e003      	b.n	e473e <_strtod_r+0xf6>
   e4736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e473a:	f04f 3aff 	mov.w	sl, #4294967295
   e473e:	0721      	lsls	r1, r4, #28
   e4740:	f140 854d 	bpl.w	e51de <_strtod_r+0xb96>
   e4744:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e4748:	f000 bd49 	b.w	e51de <_strtod_r+0xb96>
   e474c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e474e:	1c5a      	adds	r2, r3, #1
   e4750:	9217      	str	r2, [sp, #92]	; 0x5c
   e4752:	785b      	ldrb	r3, [r3, #1]
   e4754:	2b30      	cmp	r3, #48	; 0x30
   e4756:	d0f9      	beq.n	e474c <_strtod_r+0x104>
   e4758:	2b00      	cmp	r3, #0
   e475a:	f000 8540 	beq.w	e51de <_strtod_r+0xb96>
   e475e:	2301      	movs	r3, #1
   e4760:	e000      	b.n	e4764 <_strtod_r+0x11c>
   e4762:	2300      	movs	r3, #0
   e4764:	f04f 0800 	mov.w	r8, #0
   e4768:	9306      	str	r3, [sp, #24]
   e476a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e476c:	9307      	str	r3, [sp, #28]
   e476e:	f8cd 8014 	str.w	r8, [sp, #20]
   e4772:	f8cd 8010 	str.w	r8, [sp, #16]
   e4776:	220a      	movs	r2, #10
   e4778:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e477a:	782e      	ldrb	r6, [r5, #0]
   e477c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e4780:	b2d9      	uxtb	r1, r3
   e4782:	2909      	cmp	r1, #9
   e4784:	d80e      	bhi.n	e47a4 <_strtod_r+0x15c>
   e4786:	9904      	ldr	r1, [sp, #16]
   e4788:	2908      	cmp	r1, #8
   e478a:	bfdd      	ittte	le
   e478c:	9905      	ldrle	r1, [sp, #20]
   e478e:	fb02 3301 	mlale	r3, r2, r1, r3
   e4792:	9305      	strle	r3, [sp, #20]
   e4794:	fb02 3808 	mlagt	r8, r2, r8, r3
   e4798:	9b04      	ldr	r3, [sp, #16]
   e479a:	3501      	adds	r5, #1
   e479c:	3301      	adds	r3, #1
   e479e:	9304      	str	r3, [sp, #16]
   e47a0:	9517      	str	r5, [sp, #92]	; 0x5c
   e47a2:	e7e9      	b.n	e4778 <_strtod_r+0x130>
   e47a4:	9802      	ldr	r0, [sp, #8]
   e47a6:	f7fe ff31 	bl	e360c <_localeconv_r>
   e47aa:	6807      	ldr	r7, [r0, #0]
   e47ac:	9802      	ldr	r0, [sp, #8]
   e47ae:	f7fe ff2d 	bl	e360c <_localeconv_r>
   e47b2:	6800      	ldr	r0, [r0, #0]
   e47b4:	f7ff fefa 	bl	e45ac <strlen>
   e47b8:	4639      	mov	r1, r7
   e47ba:	4602      	mov	r2, r0
   e47bc:	4628      	mov	r0, r5
   e47be:	f7ff fefd 	bl	e45bc <strncmp>
   e47c2:	4607      	mov	r7, r0
   e47c4:	b128      	cbz	r0, e47d2 <_strtod_r+0x18a>
   e47c6:	2000      	movs	r0, #0
   e47c8:	4633      	mov	r3, r6
   e47ca:	9d04      	ldr	r5, [sp, #16]
   e47cc:	4602      	mov	r2, r0
   e47ce:	4601      	mov	r1, r0
   e47d0:	e057      	b.n	e4882 <_strtod_r+0x23a>
   e47d2:	9802      	ldr	r0, [sp, #8]
   e47d4:	f7fe ff1a 	bl	e360c <_localeconv_r>
   e47d8:	6800      	ldr	r0, [r0, #0]
   e47da:	f7ff fee7 	bl	e45ac <strlen>
   e47de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e47e0:	181a      	adds	r2, r3, r0
   e47e2:	9217      	str	r2, [sp, #92]	; 0x5c
   e47e4:	9a04      	ldr	r2, [sp, #16]
   e47e6:	5c1b      	ldrb	r3, [r3, r0]
   e47e8:	2a00      	cmp	r2, #0
   e47ea:	d142      	bne.n	e4872 <_strtod_r+0x22a>
   e47ec:	4610      	mov	r0, r2
   e47ee:	2b30      	cmp	r3, #48	; 0x30
   e47f0:	d105      	bne.n	e47fe <_strtod_r+0x1b6>
   e47f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e47f4:	1c5a      	adds	r2, r3, #1
   e47f6:	9217      	str	r2, [sp, #92]	; 0x5c
   e47f8:	3001      	adds	r0, #1
   e47fa:	785b      	ldrb	r3, [r3, #1]
   e47fc:	e7f7      	b.n	e47ee <_strtod_r+0x1a6>
   e47fe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e4802:	2a08      	cmp	r2, #8
   e4804:	d843      	bhi.n	e488e <_strtod_r+0x246>
   e4806:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e4808:	9207      	str	r2, [sp, #28]
   e480a:	4602      	mov	r2, r0
   e480c:	2000      	movs	r0, #0
   e480e:	4605      	mov	r5, r0
   e4810:	3b30      	subs	r3, #48	; 0x30
   e4812:	f100 0101 	add.w	r1, r0, #1
   e4816:	d026      	beq.n	e4866 <_strtod_r+0x21e>
   e4818:	440a      	add	r2, r1
   e481a:	eb05 0c00 	add.w	ip, r5, r0
   e481e:	4629      	mov	r1, r5
   e4820:	260a      	movs	r6, #10
   e4822:	4561      	cmp	r1, ip
   e4824:	d00e      	beq.n	e4844 <_strtod_r+0x1fc>
   e4826:	3101      	adds	r1, #1
   e4828:	f101 3eff 	add.w	lr, r1, #4294967295
   e482c:	f1be 0f08 	cmp.w	lr, #8
   e4830:	dc03      	bgt.n	e483a <_strtod_r+0x1f2>
   e4832:	9f05      	ldr	r7, [sp, #20]
   e4834:	4377      	muls	r7, r6
   e4836:	9705      	str	r7, [sp, #20]
   e4838:	e7f3      	b.n	e4822 <_strtod_r+0x1da>
   e483a:	2910      	cmp	r1, #16
   e483c:	bfd8      	it	le
   e483e:	fb06 f808 	mulle.w	r8, r6, r8
   e4842:	e7ee      	b.n	e4822 <_strtod_r+0x1da>
   e4844:	4428      	add	r0, r5
   e4846:	2808      	cmp	r0, #8
   e4848:	f100 0501 	add.w	r5, r0, #1
   e484c:	dc05      	bgt.n	e485a <_strtod_r+0x212>
   e484e:	9805      	ldr	r0, [sp, #20]
   e4850:	210a      	movs	r1, #10
   e4852:	fb01 3300 	mla	r3, r1, r0, r3
   e4856:	9305      	str	r3, [sp, #20]
   e4858:	e004      	b.n	e4864 <_strtod_r+0x21c>
   e485a:	2d10      	cmp	r5, #16
   e485c:	bfdc      	itt	le
   e485e:	210a      	movle	r1, #10
   e4860:	fb01 3808 	mlale	r8, r1, r8, r3
   e4864:	2100      	movs	r1, #0
   e4866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4868:	1c58      	adds	r0, r3, #1
   e486a:	9017      	str	r0, [sp, #92]	; 0x5c
   e486c:	785b      	ldrb	r3, [r3, #1]
   e486e:	4608      	mov	r0, r1
   e4870:	e002      	b.n	e4878 <_strtod_r+0x230>
   e4872:	9d04      	ldr	r5, [sp, #16]
   e4874:	4638      	mov	r0, r7
   e4876:	463a      	mov	r2, r7
   e4878:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e487c:	2909      	cmp	r1, #9
   e487e:	d9c7      	bls.n	e4810 <_strtod_r+0x1c8>
   e4880:	2101      	movs	r1, #1
   e4882:	2b65      	cmp	r3, #101	; 0x65
   e4884:	d001      	beq.n	e488a <_strtod_r+0x242>
   e4886:	2b45      	cmp	r3, #69	; 0x45
   e4888:	d151      	bne.n	e492e <_strtod_r+0x2e6>
   e488a:	b96d      	cbnz	r5, e48a8 <_strtod_r+0x260>
   e488c:	e004      	b.n	e4898 <_strtod_r+0x250>
   e488e:	2b65      	cmp	r3, #101	; 0x65
   e4890:	f040 84b3 	bne.w	e51fa <_strtod_r+0xbb2>
   e4894:	2200      	movs	r2, #0
   e4896:	2101      	movs	r1, #1
   e4898:	b928      	cbnz	r0, e48a6 <_strtod_r+0x25e>
   e489a:	9b06      	ldr	r3, [sp, #24]
   e489c:	2b00      	cmp	r3, #0
   e489e:	f000 8095 	beq.w	e49cc <_strtod_r+0x384>
   e48a2:	4605      	mov	r5, r0
   e48a4:	e000      	b.n	e48a8 <_strtod_r+0x260>
   e48a6:	2500      	movs	r5, #0
   e48a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e48aa:	1c63      	adds	r3, r4, #1
   e48ac:	9317      	str	r3, [sp, #92]	; 0x5c
   e48ae:	7863      	ldrb	r3, [r4, #1]
   e48b0:	2b2b      	cmp	r3, #43	; 0x2b
   e48b2:	d006      	beq.n	e48c2 <_strtod_r+0x27a>
   e48b4:	2b2d      	cmp	r3, #45	; 0x2d
   e48b6:	d002      	beq.n	e48be <_strtod_r+0x276>
   e48b8:	2600      	movs	r6, #0
   e48ba:	9603      	str	r6, [sp, #12]
   e48bc:	e006      	b.n	e48cc <_strtod_r+0x284>
   e48be:	2301      	movs	r3, #1
   e48c0:	e000      	b.n	e48c4 <_strtod_r+0x27c>
   e48c2:	2300      	movs	r3, #0
   e48c4:	9303      	str	r3, [sp, #12]
   e48c6:	1ca3      	adds	r3, r4, #2
   e48c8:	9317      	str	r3, [sp, #92]	; 0x5c
   e48ca:	78a3      	ldrb	r3, [r4, #2]
   e48cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e48d0:	2e09      	cmp	r6, #9
   e48d2:	d82b      	bhi.n	e492c <_strtod_r+0x2e4>
   e48d4:	2b30      	cmp	r3, #48	; 0x30
   e48d6:	d104      	bne.n	e48e2 <_strtod_r+0x29a>
   e48d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48da:	1c5e      	adds	r6, r3, #1
   e48dc:	9617      	str	r6, [sp, #92]	; 0x5c
   e48de:	785b      	ldrb	r3, [r3, #1]
   e48e0:	e7f8      	b.n	e48d4 <_strtod_r+0x28c>
   e48e2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e48e6:	2e08      	cmp	r6, #8
   e48e8:	d821      	bhi.n	e492e <_strtod_r+0x2e6>
   e48ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e48ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48f0:	f04f 0c0a 	mov.w	ip, #10
   e48f4:	461f      	mov	r7, r3
   e48f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e48f8:	1c5e      	adds	r6, r3, #1
   e48fa:	9617      	str	r6, [sp, #92]	; 0x5c
   e48fc:	785b      	ldrb	r3, [r3, #1]
   e48fe:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e4902:	f1b9 0f09 	cmp.w	r9, #9
   e4906:	d804      	bhi.n	e4912 <_strtod_r+0x2ca>
   e4908:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e490c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e4910:	e7f1      	b.n	e48f6 <_strtod_r+0x2ae>
   e4912:	1bf6      	subs	r6, r6, r7
   e4914:	2e08      	cmp	r6, #8
   e4916:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e491a:	dc02      	bgt.n	e4922 <_strtod_r+0x2da>
   e491c:	45f1      	cmp	r9, lr
   e491e:	bfa8      	it	ge
   e4920:	46f1      	movge	r9, lr
   e4922:	9e03      	ldr	r6, [sp, #12]
   e4924:	b12e      	cbz	r6, e4932 <_strtod_r+0x2ea>
   e4926:	f1c9 0900 	rsb	r9, r9, #0
   e492a:	e002      	b.n	e4932 <_strtod_r+0x2ea>
   e492c:	9417      	str	r4, [sp, #92]	; 0x5c
   e492e:	f04f 0900 	mov.w	r9, #0
   e4932:	2d00      	cmp	r5, #0
   e4934:	d153      	bne.n	e49de <_strtod_r+0x396>
   e4936:	2800      	cmp	r0, #0
   e4938:	f040 8451 	bne.w	e51de <_strtod_r+0xb96>
   e493c:	9a06      	ldr	r2, [sp, #24]
   e493e:	2a00      	cmp	r2, #0
   e4940:	f040 844d 	bne.w	e51de <_strtod_r+0xb96>
   e4944:	2900      	cmp	r1, #0
   e4946:	d141      	bne.n	e49cc <_strtod_r+0x384>
   e4948:	2b4e      	cmp	r3, #78	; 0x4e
   e494a:	d020      	beq.n	e498e <_strtod_r+0x346>
   e494c:	dc02      	bgt.n	e4954 <_strtod_r+0x30c>
   e494e:	2b49      	cmp	r3, #73	; 0x49
   e4950:	d00a      	beq.n	e4968 <_strtod_r+0x320>
   e4952:	e03b      	b.n	e49cc <_strtod_r+0x384>
   e4954:	2b69      	cmp	r3, #105	; 0x69
   e4956:	d007      	beq.n	e4968 <_strtod_r+0x320>
   e4958:	2b6e      	cmp	r3, #110	; 0x6e
   e495a:	d018      	beq.n	e498e <_strtod_r+0x346>
   e495c:	e036      	b.n	e49cc <_strtod_r+0x384>
   e495e:	bf00      	nop
   e4960:	000e8660 	.word	0x000e8660
   e4964:	7ff00000 	.word	0x7ff00000
   e4968:	49a8      	ldr	r1, [pc, #672]	; (e4c0c <_strtod_r+0x5c4>)
   e496a:	a817      	add	r0, sp, #92	; 0x5c
   e496c:	f001 fa6c 	bl	e5e48 <__match>
   e4970:	b360      	cbz	r0, e49cc <_strtod_r+0x384>
   e4972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4974:	49a6      	ldr	r1, [pc, #664]	; (e4c10 <_strtod_r+0x5c8>)
   e4976:	3b01      	subs	r3, #1
   e4978:	a817      	add	r0, sp, #92	; 0x5c
   e497a:	9317      	str	r3, [sp, #92]	; 0x5c
   e497c:	f001 fa64 	bl	e5e48 <__match>
   e4980:	b910      	cbnz	r0, e4988 <_strtod_r+0x340>
   e4982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4984:	3301      	adds	r3, #1
   e4986:	9317      	str	r3, [sp, #92]	; 0x5c
   e4988:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e4c2c <_strtod_r+0x5e4>
   e498c:	e01a      	b.n	e49c4 <_strtod_r+0x37c>
   e498e:	49a1      	ldr	r1, [pc, #644]	; (e4c14 <_strtod_r+0x5cc>)
   e4990:	a817      	add	r0, sp, #92	; 0x5c
   e4992:	f001 fa59 	bl	e5e48 <__match>
   e4996:	b1c8      	cbz	r0, e49cc <_strtod_r+0x384>
   e4998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e499a:	781b      	ldrb	r3, [r3, #0]
   e499c:	2b28      	cmp	r3, #40	; 0x28
   e499e:	d10f      	bne.n	e49c0 <_strtod_r+0x378>
   e49a0:	aa1a      	add	r2, sp, #104	; 0x68
   e49a2:	499d      	ldr	r1, [pc, #628]	; (e4c18 <_strtod_r+0x5d0>)
   e49a4:	a817      	add	r0, sp, #92	; 0x5c
   e49a6:	f001 fa62 	bl	e5e6e <__hexnan>
   e49aa:	2805      	cmp	r0, #5
   e49ac:	d108      	bne.n	e49c0 <_strtod_r+0x378>
   e49ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e49b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e49b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e49b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e49bc:	f000 bc0f 	b.w	e51de <_strtod_r+0xb96>
   e49c0:	f8df b26c 	ldr.w	fp, [pc, #620]	; e4c30 <_strtod_r+0x5e8>
   e49c4:	f04f 0a00 	mov.w	sl, #0
   e49c8:	f000 bc09 	b.w	e51de <_strtod_r+0xb96>
   e49cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e49ce:	9417      	str	r4, [sp, #92]	; 0x5c
   e49d0:	2b00      	cmp	r3, #0
   e49d2:	f000 840f 	beq.w	e51f4 <_strtod_r+0xbac>
   e49d6:	2300      	movs	r3, #0
   e49d8:	930c      	str	r3, [sp, #48]	; 0x30
   e49da:	f000 bc02 	b.w	e51e2 <_strtod_r+0xb9a>
   e49de:	9b04      	ldr	r3, [sp, #16]
   e49e0:	9805      	ldr	r0, [sp, #20]
   e49e2:	2b00      	cmp	r3, #0
   e49e4:	bf08      	it	eq
   e49e6:	462b      	moveq	r3, r5
   e49e8:	2d10      	cmp	r5, #16
   e49ea:	462c      	mov	r4, r5
   e49ec:	ebc2 0909 	rsb	r9, r2, r9
   e49f0:	bfa8      	it	ge
   e49f2:	2410      	movge	r4, #16
   e49f4:	9304      	str	r3, [sp, #16]
   e49f6:	f7fe f8fd 	bl	e2bf4 <__aeabi_ui2d>
   e49fa:	2c09      	cmp	r4, #9
   e49fc:	4682      	mov	sl, r0
   e49fe:	468b      	mov	fp, r1
   e4a00:	dd13      	ble.n	e4a2a <_strtod_r+0x3e2>
   e4a02:	4b86      	ldr	r3, [pc, #536]	; (e4c1c <_strtod_r+0x5d4>)
   e4a04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e4a08:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e4a0c:	f7fe f968 	bl	e2ce0 <__aeabi_dmul>
   e4a10:	4606      	mov	r6, r0
   e4a12:	4640      	mov	r0, r8
   e4a14:	460f      	mov	r7, r1
   e4a16:	f7fe f8ed 	bl	e2bf4 <__aeabi_ui2d>
   e4a1a:	4602      	mov	r2, r0
   e4a1c:	460b      	mov	r3, r1
   e4a1e:	4630      	mov	r0, r6
   e4a20:	4639      	mov	r1, r7
   e4a22:	f7fd ffab 	bl	e297c <__adddf3>
   e4a26:	4682      	mov	sl, r0
   e4a28:	468b      	mov	fp, r1
   e4a2a:	2d0f      	cmp	r5, #15
   e4a2c:	dc36      	bgt.n	e4a9c <_strtod_r+0x454>
   e4a2e:	f1b9 0f00 	cmp.w	r9, #0
   e4a32:	f000 83d4 	beq.w	e51de <_strtod_r+0xb96>
   e4a36:	dd24      	ble.n	e4a82 <_strtod_r+0x43a>
   e4a38:	f1b9 0f16 	cmp.w	r9, #22
   e4a3c:	dc07      	bgt.n	e4a4e <_strtod_r+0x406>
   e4a3e:	4d77      	ldr	r5, [pc, #476]	; (e4c1c <_strtod_r+0x5d4>)
   e4a40:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e4a44:	4652      	mov	r2, sl
   e4a46:	465b      	mov	r3, fp
   e4a48:	e9d9 0100 	ldrd	r0, r1, [r9]
   e4a4c:	e014      	b.n	e4a78 <_strtod_r+0x430>
   e4a4e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e4a52:	4599      	cmp	r9, r3
   e4a54:	dc22      	bgt.n	e4a9c <_strtod_r+0x454>
   e4a56:	4c71      	ldr	r4, [pc, #452]	; (e4c1c <_strtod_r+0x5d4>)
   e4a58:	f1c5 050f 	rsb	r5, r5, #15
   e4a5c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e4a60:	ebc5 0509 	rsb	r5, r5, r9
   e4a64:	4652      	mov	r2, sl
   e4a66:	465b      	mov	r3, fp
   e4a68:	e9d1 0100 	ldrd	r0, r1, [r1]
   e4a6c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e4a70:	f7fe f936 	bl	e2ce0 <__aeabi_dmul>
   e4a74:	e9d4 2300 	ldrd	r2, r3, [r4]
   e4a78:	f7fe f932 	bl	e2ce0 <__aeabi_dmul>
   e4a7c:	4682      	mov	sl, r0
   e4a7e:	468b      	mov	fp, r1
   e4a80:	e3ad      	b.n	e51de <_strtod_r+0xb96>
   e4a82:	f119 0f16 	cmn.w	r9, #22
   e4a86:	db09      	blt.n	e4a9c <_strtod_r+0x454>
   e4a88:	4d64      	ldr	r5, [pc, #400]	; (e4c1c <_strtod_r+0x5d4>)
   e4a8a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e4a8e:	e9d9 2300 	ldrd	r2, r3, [r9]
   e4a92:	4650      	mov	r0, sl
   e4a94:	4659      	mov	r1, fp
   e4a96:	f7fe fa4d 	bl	e2f34 <__aeabi_ddiv>
   e4a9a:	e7ef      	b.n	e4a7c <_strtod_r+0x434>
   e4a9c:	1b2c      	subs	r4, r5, r4
   e4a9e:	444c      	add	r4, r9
   e4aa0:	2c00      	cmp	r4, #0
   e4aa2:	dd57      	ble.n	e4b54 <_strtod_r+0x50c>
   e4aa4:	f014 010f 	ands.w	r1, r4, #15
   e4aa8:	d00a      	beq.n	e4ac0 <_strtod_r+0x478>
   e4aaa:	4b5c      	ldr	r3, [pc, #368]	; (e4c1c <_strtod_r+0x5d4>)
   e4aac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e4ab0:	4652      	mov	r2, sl
   e4ab2:	465b      	mov	r3, fp
   e4ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
   e4ab8:	f7fe f912 	bl	e2ce0 <__aeabi_dmul>
   e4abc:	4682      	mov	sl, r0
   e4abe:	468b      	mov	fp, r1
   e4ac0:	f034 040f 	bics.w	r4, r4, #15
   e4ac4:	f000 80b8 	beq.w	e4c38 <_strtod_r+0x5f0>
   e4ac8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e4acc:	dd0b      	ble.n	e4ae6 <_strtod_r+0x49e>
   e4ace:	2400      	movs	r4, #0
   e4ad0:	4625      	mov	r5, r4
   e4ad2:	9405      	str	r4, [sp, #20]
   e4ad4:	9404      	str	r4, [sp, #16]
   e4ad6:	9a02      	ldr	r2, [sp, #8]
   e4ad8:	f8df b150 	ldr.w	fp, [pc, #336]	; e4c2c <_strtod_r+0x5e4>
   e4adc:	2322      	movs	r3, #34	; 0x22
   e4ade:	6013      	str	r3, [r2, #0]
   e4ae0:	f04f 0a00 	mov.w	sl, #0
   e4ae4:	e187      	b.n	e4df6 <_strtod_r+0x7ae>
   e4ae6:	4e4e      	ldr	r6, [pc, #312]	; (e4c20 <_strtod_r+0x5d8>)
   e4ae8:	2300      	movs	r3, #0
   e4aea:	1124      	asrs	r4, r4, #4
   e4aec:	4650      	mov	r0, sl
   e4aee:	4659      	mov	r1, fp
   e4af0:	4698      	mov	r8, r3
   e4af2:	4637      	mov	r7, r6
   e4af4:	2c01      	cmp	r4, #1
   e4af6:	dd0b      	ble.n	e4b10 <_strtod_r+0x4c8>
   e4af8:	07e2      	lsls	r2, r4, #31
   e4afa:	d504      	bpl.n	e4b06 <_strtod_r+0x4be>
   e4afc:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4b00:	f7fe f8ee 	bl	e2ce0 <__aeabi_dmul>
   e4b04:	2301      	movs	r3, #1
   e4b06:	f108 0801 	add.w	r8, r8, #1
   e4b0a:	1064      	asrs	r4, r4, #1
   e4b0c:	3608      	adds	r6, #8
   e4b0e:	e7f1      	b.n	e4af4 <_strtod_r+0x4ac>
   e4b10:	b10b      	cbz	r3, e4b16 <_strtod_r+0x4ce>
   e4b12:	4682      	mov	sl, r0
   e4b14:	468b      	mov	fp, r1
   e4b16:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e4b1a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e4b1e:	4652      	mov	r2, sl
   e4b20:	465b      	mov	r3, fp
   e4b22:	e9d7 0100 	ldrd	r0, r1, [r7]
   e4b26:	f7fe f8db 	bl	e2ce0 <__aeabi_dmul>
   e4b2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e4b2e:	468b      	mov	fp, r1
   e4b30:	460a      	mov	r2, r1
   e4b32:	0d1b      	lsrs	r3, r3, #20
   e4b34:	493b      	ldr	r1, [pc, #236]	; (e4c24 <_strtod_r+0x5dc>)
   e4b36:	051b      	lsls	r3, r3, #20
   e4b38:	428b      	cmp	r3, r1
   e4b3a:	4682      	mov	sl, r0
   e4b3c:	d8c7      	bhi.n	e4ace <_strtod_r+0x486>
   e4b3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e4b42:	428b      	cmp	r3, r1
   e4b44:	bf86      	itte	hi
   e4b46:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e4c34 <_strtod_r+0x5ec>
   e4b4a:	f04f 3aff 	movhi.w	sl, #4294967295
   e4b4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e4b52:	e071      	b.n	e4c38 <_strtod_r+0x5f0>
   e4b54:	d070      	beq.n	e4c38 <_strtod_r+0x5f0>
   e4b56:	4264      	negs	r4, r4
   e4b58:	f014 020f 	ands.w	r2, r4, #15
   e4b5c:	d00a      	beq.n	e4b74 <_strtod_r+0x52c>
   e4b5e:	4b2f      	ldr	r3, [pc, #188]	; (e4c1c <_strtod_r+0x5d4>)
   e4b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e4b64:	4650      	mov	r0, sl
   e4b66:	4659      	mov	r1, fp
   e4b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   e4b6c:	f7fe f9e2 	bl	e2f34 <__aeabi_ddiv>
   e4b70:	4682      	mov	sl, r0
   e4b72:	468b      	mov	fp, r1
   e4b74:	1124      	asrs	r4, r4, #4
   e4b76:	d05f      	beq.n	e4c38 <_strtod_r+0x5f0>
   e4b78:	2c1f      	cmp	r4, #31
   e4b7a:	dd04      	ble.n	e4b86 <_strtod_r+0x53e>
   e4b7c:	2400      	movs	r4, #0
   e4b7e:	4625      	mov	r5, r4
   e4b80:	9405      	str	r4, [sp, #20]
   e4b82:	9404      	str	r4, [sp, #16]
   e4b84:	e130      	b.n	e4de8 <_strtod_r+0x7a0>
   e4b86:	f014 0f10 	tst.w	r4, #16
   e4b8a:	bf0c      	ite	eq
   e4b8c:	2300      	moveq	r3, #0
   e4b8e:	236a      	movne	r3, #106	; 0x6a
   e4b90:	4e25      	ldr	r6, [pc, #148]	; (e4c28 <_strtod_r+0x5e0>)
   e4b92:	9303      	str	r3, [sp, #12]
   e4b94:	4650      	mov	r0, sl
   e4b96:	4659      	mov	r1, fp
   e4b98:	2300      	movs	r3, #0
   e4b9a:	2c00      	cmp	r4, #0
   e4b9c:	dd09      	ble.n	e4bb2 <_strtod_r+0x56a>
   e4b9e:	07e2      	lsls	r2, r4, #31
   e4ba0:	d504      	bpl.n	e4bac <_strtod_r+0x564>
   e4ba2:	e9d6 2300 	ldrd	r2, r3, [r6]
   e4ba6:	f7fe f89b 	bl	e2ce0 <__aeabi_dmul>
   e4baa:	2301      	movs	r3, #1
   e4bac:	1064      	asrs	r4, r4, #1
   e4bae:	3608      	adds	r6, #8
   e4bb0:	e7f3      	b.n	e4b9a <_strtod_r+0x552>
   e4bb2:	b10b      	cbz	r3, e4bb8 <_strtod_r+0x570>
   e4bb4:	4682      	mov	sl, r0
   e4bb6:	468b      	mov	fp, r1
   e4bb8:	9b03      	ldr	r3, [sp, #12]
   e4bba:	b1eb      	cbz	r3, e4bf8 <_strtod_r+0x5b0>
   e4bbc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e4bc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4bc4:	2b00      	cmp	r3, #0
   e4bc6:	4659      	mov	r1, fp
   e4bc8:	dd16      	ble.n	e4bf8 <_strtod_r+0x5b0>
   e4bca:	2b1f      	cmp	r3, #31
   e4bcc:	dd0e      	ble.n	e4bec <_strtod_r+0x5a4>
   e4bce:	2b34      	cmp	r3, #52	; 0x34
   e4bd0:	bfde      	ittt	le
   e4bd2:	3b20      	suble	r3, #32
   e4bd4:	f04f 32ff 	movle.w	r2, #4294967295
   e4bd8:	fa02 f303 	lslle.w	r3, r2, r3
   e4bdc:	f04f 0a00 	mov.w	sl, #0
   e4be0:	bfcc      	ite	gt
   e4be2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e4be6:	ea03 0b01 	andle.w	fp, r3, r1
   e4bea:	e005      	b.n	e4bf8 <_strtod_r+0x5b0>
   e4bec:	f04f 32ff 	mov.w	r2, #4294967295
   e4bf0:	fa02 f303 	lsl.w	r3, r2, r3
   e4bf4:	ea03 0a0a 	and.w	sl, r3, sl
   e4bf8:	2200      	movs	r2, #0
   e4bfa:	2300      	movs	r3, #0
   e4bfc:	4650      	mov	r0, sl
   e4bfe:	4659      	mov	r1, fp
   e4c00:	f7fe fad6 	bl	e31b0 <__aeabi_dcmpeq>
   e4c04:	2800      	cmp	r0, #0
   e4c06:	d1b9      	bne.n	e4b7c <_strtod_r+0x534>
   e4c08:	e018      	b.n	e4c3c <_strtod_r+0x5f4>
   e4c0a:	bf00      	nop
   e4c0c:	000e7dd5 	.word	0x000e7dd5
   e4c10:	000e8688 	.word	0x000e8688
   e4c14:	000e86c1 	.word	0x000e86c1
   e4c18:	000e8674 	.word	0x000e8674
   e4c1c:	000e8920 	.word	0x000e8920
   e4c20:	000e89e8 	.word	0x000e89e8
   e4c24:	7ca00000 	.word	0x7ca00000
   e4c28:	000e8690 	.word	0x000e8690
   e4c2c:	7ff00000 	.word	0x7ff00000
   e4c30:	fff80000 	.word	0xfff80000
   e4c34:	7fefffff 	.word	0x7fefffff
   e4c38:	2300      	movs	r3, #0
   e4c3a:	9303      	str	r3, [sp, #12]
   e4c3c:	9b05      	ldr	r3, [sp, #20]
   e4c3e:	9300      	str	r3, [sp, #0]
   e4c40:	9a04      	ldr	r2, [sp, #16]
   e4c42:	9907      	ldr	r1, [sp, #28]
   e4c44:	9802      	ldr	r0, [sp, #8]
   e4c46:	462b      	mov	r3, r5
   e4c48:	f001 fb0b 	bl	e6262 <__s2b>
   e4c4c:	9005      	str	r0, [sp, #20]
   e4c4e:	2800      	cmp	r0, #0
   e4c50:	f43f af3d 	beq.w	e4ace <_strtod_r+0x486>
   e4c54:	f1b9 0f00 	cmp.w	r9, #0
   e4c58:	f1c9 0300 	rsb	r3, r9, #0
   e4c5c:	bfa8      	it	ge
   e4c5e:	2300      	movge	r3, #0
   e4c60:	930d      	str	r3, [sp, #52]	; 0x34
   e4c62:	2400      	movs	r4, #0
   e4c64:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e4c68:	9312      	str	r3, [sp, #72]	; 0x48
   e4c6a:	4625      	mov	r5, r4
   e4c6c:	9b05      	ldr	r3, [sp, #20]
   e4c6e:	9802      	ldr	r0, [sp, #8]
   e4c70:	6859      	ldr	r1, [r3, #4]
   e4c72:	f001 fa6f 	bl	e6154 <_Balloc>
   e4c76:	9004      	str	r0, [sp, #16]
   e4c78:	2800      	cmp	r0, #0
   e4c7a:	f43f af2c 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4c7e:	9b05      	ldr	r3, [sp, #20]
   e4c80:	691a      	ldr	r2, [r3, #16]
   e4c82:	3202      	adds	r2, #2
   e4c84:	f103 010c 	add.w	r1, r3, #12
   e4c88:	0092      	lsls	r2, r2, #2
   e4c8a:	300c      	adds	r0, #12
   e4c8c:	f7fe fcc2 	bl	e3614 <memcpy>
   e4c90:	aa1a      	add	r2, sp, #104	; 0x68
   e4c92:	a919      	add	r1, sp, #100	; 0x64
   e4c94:	ec4b ab10 	vmov	d0, sl, fp
   e4c98:	9802      	ldr	r0, [sp, #8]
   e4c9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e4c9e:	f001 fd94 	bl	e67ca <__d2b>
   e4ca2:	9018      	str	r0, [sp, #96]	; 0x60
   e4ca4:	2800      	cmp	r0, #0
   e4ca6:	f43f af16 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4caa:	2101      	movs	r1, #1
   e4cac:	9802      	ldr	r0, [sp, #8]
   e4cae:	f001 fb63 	bl	e6378 <__i2b>
   e4cb2:	4605      	mov	r5, r0
   e4cb4:	2800      	cmp	r0, #0
   e4cb6:	f43f af0e 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e4cbc:	9903      	ldr	r1, [sp, #12]
   e4cbe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e4cc0:	2b00      	cmp	r3, #0
   e4cc2:	bfad      	iteet	ge
   e4cc4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e4cc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e4cc8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e4ccc:	eb02 0803 	addge.w	r8, r2, r3
   e4cd0:	bfb8      	it	lt
   e4cd2:	1ad2      	sublt	r2, r2, r3
   e4cd4:	eba3 0301 	sub.w	r3, r3, r1
   e4cd8:	4433      	add	r3, r6
   e4cda:	49b5      	ldr	r1, [pc, #724]	; (e4fb0 <_strtod_r+0x968>)
   e4cdc:	bfa8      	it	ge
   e4cde:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e4ce0:	3b01      	subs	r3, #1
   e4ce2:	428b      	cmp	r3, r1
   e4ce4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e4ce8:	f280 808a 	bge.w	e4e00 <_strtod_r+0x7b8>
   e4cec:	1ac9      	subs	r1, r1, r3
   e4cee:	291f      	cmp	r1, #31
   e4cf0:	bfc8      	it	gt
   e4cf2:	4fb0      	ldrgt	r7, [pc, #704]	; (e4fb4 <_strtod_r+0x96c>)
   e4cf4:	f04f 0901 	mov.w	r9, #1
   e4cf8:	bfd4      	ite	le
   e4cfa:	fa09 f301 	lslle.w	r3, r9, r1
   e4cfe:	1aff      	subgt	r7, r7, r3
   e4d00:	eba6 0601 	sub.w	r6, r6, r1
   e4d04:	bfd9      	ittee	le
   e4d06:	9306      	strle	r3, [sp, #24]
   e4d08:	2700      	movle	r7, #0
   e4d0a:	fa09 f707 	lslgt.w	r7, r9, r7
   e4d0e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e4d12:	eb08 0906 	add.w	r9, r8, r6
   e4d16:	9b03      	ldr	r3, [sp, #12]
   e4d18:	45c8      	cmp	r8, r9
   e4d1a:	4416      	add	r6, r2
   e4d1c:	441e      	add	r6, r3
   e4d1e:	4643      	mov	r3, r8
   e4d20:	bfa8      	it	ge
   e4d22:	464b      	movge	r3, r9
   e4d24:	42b3      	cmp	r3, r6
   e4d26:	bfa8      	it	ge
   e4d28:	4633      	movge	r3, r6
   e4d2a:	2b00      	cmp	r3, #0
   e4d2c:	bfc2      	ittt	gt
   e4d2e:	ebc3 0909 	rsbgt	r9, r3, r9
   e4d32:	1af6      	subgt	r6, r6, r3
   e4d34:	ebc3 0808 	rsbgt	r8, r3, r8
   e4d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e4d3a:	2b00      	cmp	r3, #0
   e4d3c:	d164      	bne.n	e4e08 <_strtod_r+0x7c0>
   e4d3e:	f1b9 0f00 	cmp.w	r9, #0
   e4d42:	dc7a      	bgt.n	e4e3a <_strtod_r+0x7f2>
   e4d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e4d46:	2b00      	cmp	r3, #0
   e4d48:	f040 8081 	bne.w	e4e4e <_strtod_r+0x806>
   e4d4c:	2e00      	cmp	r6, #0
   e4d4e:	f300 8088 	bgt.w	e4e62 <_strtod_r+0x81a>
   e4d52:	f1b8 0f00 	cmp.w	r8, #0
   e4d56:	f300 808e 	bgt.w	e4e76 <_strtod_r+0x82e>
   e4d5a:	9a04      	ldr	r2, [sp, #16]
   e4d5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4d5e:	9802      	ldr	r0, [sp, #8]
   e4d60:	f001 fc5f 	bl	e6622 <__mdiff>
   e4d64:	4604      	mov	r4, r0
   e4d66:	2800      	cmp	r0, #0
   e4d68:	f43f aeb5 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4d6c:	68c3      	ldr	r3, [r0, #12]
   e4d6e:	9307      	str	r3, [sp, #28]
   e4d70:	2300      	movs	r3, #0
   e4d72:	60c3      	str	r3, [r0, #12]
   e4d74:	4629      	mov	r1, r5
   e4d76:	f001 fc38 	bl	e65ea <__mcmp>
   e4d7a:	2800      	cmp	r0, #0
   e4d7c:	f280 8089 	bge.w	e4e92 <_strtod_r+0x84a>
   e4d80:	9b07      	ldr	r3, [sp, #28]
   e4d82:	2b00      	cmp	r3, #0
   e4d84:	f040 8204 	bne.w	e5190 <_strtod_r+0xb48>
   e4d88:	f1ba 0f00 	cmp.w	sl, #0
   e4d8c:	f040 8200 	bne.w	e5190 <_strtod_r+0xb48>
   e4d90:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4d94:	2b00      	cmp	r3, #0
   e4d96:	f040 81fb 	bne.w	e5190 <_strtod_r+0xb48>
   e4d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4d9e:	0d1b      	lsrs	r3, r3, #20
   e4da0:	051b      	lsls	r3, r3, #20
   e4da2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4da6:	f240 81f3 	bls.w	e5190 <_strtod_r+0xb48>
   e4daa:	6963      	ldr	r3, [r4, #20]
   e4dac:	2b00      	cmp	r3, #0
   e4dae:	d06c      	beq.n	e4e8a <_strtod_r+0x842>
   e4db0:	4621      	mov	r1, r4
   e4db2:	2201      	movs	r2, #1
   e4db4:	9802      	ldr	r0, [sp, #8]
   e4db6:	f001 fbc7 	bl	e6548 <__lshift>
   e4dba:	4629      	mov	r1, r5
   e4dbc:	4604      	mov	r4, r0
   e4dbe:	f001 fc14 	bl	e65ea <__mcmp>
   e4dc2:	2800      	cmp	r0, #0
   e4dc4:	f340 81e4 	ble.w	e5190 <_strtod_r+0xb48>
   e4dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4dcc:	9a03      	ldr	r2, [sp, #12]
   e4dce:	0d1b      	lsrs	r3, r3, #20
   e4dd0:	051b      	lsls	r3, r3, #20
   e4dd2:	2a00      	cmp	r2, #0
   e4dd4:	f000 808c 	beq.w	e4ef0 <_strtod_r+0x8a8>
   e4dd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e4ddc:	f300 8088 	bgt.w	e4ef0 <_strtod_r+0x8a8>
   e4de0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e4de4:	f300 81d6 	bgt.w	e5194 <_strtod_r+0xb4c>
   e4de8:	9a02      	ldr	r2, [sp, #8]
   e4dea:	2322      	movs	r3, #34	; 0x22
   e4dec:	f04f 0a00 	mov.w	sl, #0
   e4df0:	f04f 0b00 	mov.w	fp, #0
   e4df4:	6013      	str	r3, [r2, #0]
   e4df6:	9b05      	ldr	r3, [sp, #20]
   e4df8:	2b00      	cmp	r3, #0
   e4dfa:	f040 81dc 	bne.w	e51b6 <_strtod_r+0xb6e>
   e4dfe:	e1ee      	b.n	e51de <_strtod_r+0xb96>
   e4e00:	2301      	movs	r3, #1
   e4e02:	2700      	movs	r7, #0
   e4e04:	9306      	str	r3, [sp, #24]
   e4e06:	e784      	b.n	e4d12 <_strtod_r+0x6ca>
   e4e08:	4629      	mov	r1, r5
   e4e0a:	461a      	mov	r2, r3
   e4e0c:	9802      	ldr	r0, [sp, #8]
   e4e0e:	f001 fb4d 	bl	e64ac <__pow5mult>
   e4e12:	4605      	mov	r5, r0
   e4e14:	2800      	cmp	r0, #0
   e4e16:	f43f ae5e 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4e1a:	4601      	mov	r1, r0
   e4e1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e4e1e:	9802      	ldr	r0, [sp, #8]
   e4e20:	f001 fab3 	bl	e638a <__multiply>
   e4e24:	9007      	str	r0, [sp, #28]
   e4e26:	2800      	cmp	r0, #0
   e4e28:	f43f ae55 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4e2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4e2e:	9802      	ldr	r0, [sp, #8]
   e4e30:	f001 f9c5 	bl	e61be <_Bfree>
   e4e34:	9b07      	ldr	r3, [sp, #28]
   e4e36:	9318      	str	r3, [sp, #96]	; 0x60
   e4e38:	e781      	b.n	e4d3e <_strtod_r+0x6f6>
   e4e3a:	464a      	mov	r2, r9
   e4e3c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4e3e:	9802      	ldr	r0, [sp, #8]
   e4e40:	f001 fb82 	bl	e6548 <__lshift>
   e4e44:	9018      	str	r0, [sp, #96]	; 0x60
   e4e46:	2800      	cmp	r0, #0
   e4e48:	f47f af7c 	bne.w	e4d44 <_strtod_r+0x6fc>
   e4e4c:	e643      	b.n	e4ad6 <_strtod_r+0x48e>
   e4e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e4e50:	9904      	ldr	r1, [sp, #16]
   e4e52:	9802      	ldr	r0, [sp, #8]
   e4e54:	f001 fb2a 	bl	e64ac <__pow5mult>
   e4e58:	9004      	str	r0, [sp, #16]
   e4e5a:	2800      	cmp	r0, #0
   e4e5c:	f47f af76 	bne.w	e4d4c <_strtod_r+0x704>
   e4e60:	e639      	b.n	e4ad6 <_strtod_r+0x48e>
   e4e62:	4632      	mov	r2, r6
   e4e64:	9904      	ldr	r1, [sp, #16]
   e4e66:	9802      	ldr	r0, [sp, #8]
   e4e68:	f001 fb6e 	bl	e6548 <__lshift>
   e4e6c:	9004      	str	r0, [sp, #16]
   e4e6e:	2800      	cmp	r0, #0
   e4e70:	f47f af6f 	bne.w	e4d52 <_strtod_r+0x70a>
   e4e74:	e62f      	b.n	e4ad6 <_strtod_r+0x48e>
   e4e76:	4629      	mov	r1, r5
   e4e78:	4642      	mov	r2, r8
   e4e7a:	9802      	ldr	r0, [sp, #8]
   e4e7c:	f001 fb64 	bl	e6548 <__lshift>
   e4e80:	4605      	mov	r5, r0
   e4e82:	2800      	cmp	r0, #0
   e4e84:	f47f af69 	bne.w	e4d5a <_strtod_r+0x712>
   e4e88:	e625      	b.n	e4ad6 <_strtod_r+0x48e>
   e4e8a:	6923      	ldr	r3, [r4, #16]
   e4e8c:	2b01      	cmp	r3, #1
   e4e8e:	dc8f      	bgt.n	e4db0 <_strtod_r+0x768>
   e4e90:	e17e      	b.n	e5190 <_strtod_r+0xb48>
   e4e92:	d161      	bne.n	e4f58 <_strtod_r+0x910>
   e4e94:	9a07      	ldr	r2, [sp, #28]
   e4e96:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4e9a:	b322      	cbz	r2, e4ee6 <_strtod_r+0x89e>
   e4e9c:	4946      	ldr	r1, [pc, #280]	; (e4fb8 <_strtod_r+0x970>)
   e4e9e:	428b      	cmp	r3, r1
   e4ea0:	465a      	mov	r2, fp
   e4ea2:	d12e      	bne.n	e4f02 <_strtod_r+0x8ba>
   e4ea4:	9b03      	ldr	r3, [sp, #12]
   e4ea6:	4651      	mov	r1, sl
   e4ea8:	b163      	cbz	r3, e4ec4 <_strtod_r+0x87c>
   e4eaa:	4b44      	ldr	r3, [pc, #272]	; (e4fbc <_strtod_r+0x974>)
   e4eac:	4013      	ands	r3, r2
   e4eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e4eb2:	d807      	bhi.n	e4ec4 <_strtod_r+0x87c>
   e4eb4:	0d1b      	lsrs	r3, r3, #20
   e4eb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4eba:	f04f 30ff 	mov.w	r0, #4294967295
   e4ebe:	fa00 f303 	lsl.w	r3, r0, r3
   e4ec2:	e001      	b.n	e4ec8 <_strtod_r+0x880>
   e4ec4:	f04f 33ff 	mov.w	r3, #4294967295
   e4ec8:	428b      	cmp	r3, r1
   e4eca:	d11a      	bne.n	e4f02 <_strtod_r+0x8ba>
   e4ecc:	493c      	ldr	r1, [pc, #240]	; (e4fc0 <_strtod_r+0x978>)
   e4ece:	428a      	cmp	r2, r1
   e4ed0:	d102      	bne.n	e4ed8 <_strtod_r+0x890>
   e4ed2:	3301      	adds	r3, #1
   e4ed4:	f43f adff 	beq.w	e4ad6 <_strtod_r+0x48e>
   e4ed8:	4b38      	ldr	r3, [pc, #224]	; (e4fbc <_strtod_r+0x974>)
   e4eda:	4013      	ands	r3, r2
   e4edc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e4ee0:	f04f 0a00 	mov.w	sl, #0
   e4ee4:	e154      	b.n	e5190 <_strtod_r+0xb48>
   e4ee6:	b963      	cbnz	r3, e4f02 <_strtod_r+0x8ba>
   e4ee8:	f1ba 0f00 	cmp.w	sl, #0
   e4eec:	d109      	bne.n	e4f02 <_strtod_r+0x8ba>
   e4eee:	e76b      	b.n	e4dc8 <_strtod_r+0x780>
   e4ef0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e4ef4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e4ef8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e4efc:	f04f 3aff 	mov.w	sl, #4294967295
   e4f00:	e146      	b.n	e5190 <_strtod_r+0xb48>
   e4f02:	b117      	cbz	r7, e4f0a <_strtod_r+0x8c2>
   e4f04:	ea17 0f0b 	tst.w	r7, fp
   e4f08:	e002      	b.n	e4f10 <_strtod_r+0x8c8>
   e4f0a:	9b06      	ldr	r3, [sp, #24]
   e4f0c:	ea13 0f0a 	tst.w	r3, sl
   e4f10:	f000 813e 	beq.w	e5190 <_strtod_r+0xb48>
   e4f14:	9b07      	ldr	r3, [sp, #28]
   e4f16:	9a03      	ldr	r2, [sp, #12]
   e4f18:	4650      	mov	r0, sl
   e4f1a:	4659      	mov	r1, fp
   e4f1c:	b153      	cbz	r3, e4f34 <_strtod_r+0x8ec>
   e4f1e:	f7ff fb75 	bl	e460c <sulp>
   e4f22:	4602      	mov	r2, r0
   e4f24:	460b      	mov	r3, r1
   e4f26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e4f2a:	f7fd fd27 	bl	e297c <__adddf3>
   e4f2e:	4682      	mov	sl, r0
   e4f30:	468b      	mov	fp, r1
   e4f32:	e12d      	b.n	e5190 <_strtod_r+0xb48>
   e4f34:	f7ff fb6a 	bl	e460c <sulp>
   e4f38:	4602      	mov	r2, r0
   e4f3a:	460b      	mov	r3, r1
   e4f3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e4f40:	f7fd fd1a 	bl	e2978 <__aeabi_dsub>
   e4f44:	2200      	movs	r2, #0
   e4f46:	2300      	movs	r3, #0
   e4f48:	4682      	mov	sl, r0
   e4f4a:	468b      	mov	fp, r1
   e4f4c:	f7fe f930 	bl	e31b0 <__aeabi_dcmpeq>
   e4f50:	2800      	cmp	r0, #0
   e4f52:	f47f af49 	bne.w	e4de8 <_strtod_r+0x7a0>
   e4f56:	e11b      	b.n	e5190 <_strtod_r+0xb48>
   e4f58:	4629      	mov	r1, r5
   e4f5a:	4620      	mov	r0, r4
   e4f5c:	f001 fc83 	bl	e6866 <__ratio>
   e4f60:	ec57 6b10 	vmov	r6, r7, d0
   e4f64:	2200      	movs	r2, #0
   e4f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e4f6a:	ee10 0a10 	vmov	r0, s0
   e4f6e:	4639      	mov	r1, r7
   e4f70:	f7fe f932 	bl	e31d8 <__aeabi_dcmple>
   e4f74:	2800      	cmp	r0, #0
   e4f76:	d042      	beq.n	e4ffe <_strtod_r+0x9b6>
   e4f78:	9b07      	ldr	r3, [sp, #28]
   e4f7a:	b123      	cbz	r3, e4f86 <_strtod_r+0x93e>
   e4f7c:	f04f 0800 	mov.w	r8, #0
   e4f80:	f8df 9040 	ldr.w	r9, [pc, #64]	; e4fc4 <_strtod_r+0x97c>
   e4f84:	e011      	b.n	e4faa <_strtod_r+0x962>
   e4f86:	f1ba 0f00 	cmp.w	sl, #0
   e4f8a:	d103      	bne.n	e4f94 <_strtod_r+0x94c>
   e4f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e4f90:	b93b      	cbnz	r3, e4fa2 <_strtod_r+0x95a>
   e4f92:	e01b      	b.n	e4fcc <_strtod_r+0x984>
   e4f94:	f1ba 0f01 	cmp.w	sl, #1
   e4f98:	d103      	bne.n	e4fa2 <_strtod_r+0x95a>
   e4f9a:	f1bb 0f00 	cmp.w	fp, #0
   e4f9e:	f43f af23 	beq.w	e4de8 <_strtod_r+0x7a0>
   e4fa2:	f8df 9024 	ldr.w	r9, [pc, #36]	; e4fc8 <_strtod_r+0x980>
   e4fa6:	f04f 0800 	mov.w	r8, #0
   e4faa:	2600      	movs	r6, #0
   e4fac:	4f05      	ldr	r7, [pc, #20]	; (e4fc4 <_strtod_r+0x97c>)
   e4fae:	e039      	b.n	e5024 <_strtod_r+0x9dc>
   e4fb0:	fffffc02 	.word	0xfffffc02
   e4fb4:	fffffbe2 	.word	0xfffffbe2
   e4fb8:	000fffff 	.word	0x000fffff
   e4fbc:	7ff00000 	.word	0x7ff00000
   e4fc0:	7fefffff 	.word	0x7fefffff
   e4fc4:	3ff00000 	.word	0x3ff00000
   e4fc8:	bff00000 	.word	0xbff00000
   e4fcc:	2200      	movs	r2, #0
   e4fce:	4b98      	ldr	r3, [pc, #608]	; (e5230 <_strtod_r+0xbe8>)
   e4fd0:	4630      	mov	r0, r6
   e4fd2:	4639      	mov	r1, r7
   e4fd4:	f7fe f8f6 	bl	e31c4 <__aeabi_dcmplt>
   e4fd8:	b940      	cbnz	r0, e4fec <_strtod_r+0x9a4>
   e4fda:	4630      	mov	r0, r6
   e4fdc:	4639      	mov	r1, r7
   e4fde:	2200      	movs	r2, #0
   e4fe0:	4b94      	ldr	r3, [pc, #592]	; (e5234 <_strtod_r+0xbec>)
   e4fe2:	f7fd fe7d 	bl	e2ce0 <__aeabi_dmul>
   e4fe6:	4606      	mov	r6, r0
   e4fe8:	460f      	mov	r7, r1
   e4fea:	e001      	b.n	e4ff0 <_strtod_r+0x9a8>
   e4fec:	4f91      	ldr	r7, [pc, #580]	; (e5234 <_strtod_r+0xbec>)
   e4fee:	2600      	movs	r6, #0
   e4ff0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e4ff4:	9614      	str	r6, [sp, #80]	; 0x50
   e4ff6:	9315      	str	r3, [sp, #84]	; 0x54
   e4ff8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e4ffc:	e012      	b.n	e5024 <_strtod_r+0x9dc>
   e4ffe:	4b8d      	ldr	r3, [pc, #564]	; (e5234 <_strtod_r+0xbec>)
   e5000:	4630      	mov	r0, r6
   e5002:	4639      	mov	r1, r7
   e5004:	2200      	movs	r2, #0
   e5006:	f7fd fe6b 	bl	e2ce0 <__aeabi_dmul>
   e500a:	9b07      	ldr	r3, [sp, #28]
   e500c:	4606      	mov	r6, r0
   e500e:	460f      	mov	r7, r1
   e5010:	b923      	cbnz	r3, e501c <_strtod_r+0x9d4>
   e5012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e5016:	900e      	str	r0, [sp, #56]	; 0x38
   e5018:	930f      	str	r3, [sp, #60]	; 0x3c
   e501a:	e001      	b.n	e5020 <_strtod_r+0x9d8>
   e501c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e5020:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e5024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e5028:	0d1b      	lsrs	r3, r3, #20
   e502a:	051b      	lsls	r3, r3, #20
   e502c:	9306      	str	r3, [sp, #24]
   e502e:	9a06      	ldr	r2, [sp, #24]
   e5030:	4b81      	ldr	r3, [pc, #516]	; (e5238 <_strtod_r+0xbf0>)
   e5032:	429a      	cmp	r2, r3
   e5034:	d12b      	bne.n	e508e <_strtod_r+0xa46>
   e5036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e503a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e503e:	ec4b ab10 	vmov	d0, sl, fp
   e5042:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e5046:	f001 fb4b 	bl	e66e0 <__ulp>
   e504a:	4640      	mov	r0, r8
   e504c:	ec53 2b10 	vmov	r2, r3, d0
   e5050:	4649      	mov	r1, r9
   e5052:	f7fd fe45 	bl	e2ce0 <__aeabi_dmul>
   e5056:	4652      	mov	r2, sl
   e5058:	465b      	mov	r3, fp
   e505a:	f7fd fc8f 	bl	e297c <__adddf3>
   e505e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e5062:	0d1b      	lsrs	r3, r3, #20
   e5064:	4a75      	ldr	r2, [pc, #468]	; (e523c <_strtod_r+0xbf4>)
   e5066:	051b      	lsls	r3, r3, #20
   e5068:	4293      	cmp	r3, r2
   e506a:	4682      	mov	sl, r0
   e506c:	d90c      	bls.n	e5088 <_strtod_r+0xa40>
   e506e:	4b74      	ldr	r3, [pc, #464]	; (e5240 <_strtod_r+0xbf8>)
   e5070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e5072:	429a      	cmp	r2, r3
   e5074:	d103      	bne.n	e507e <_strtod_r+0xa36>
   e5076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5078:	3301      	adds	r3, #1
   e507a:	f43f ad2c 	beq.w	e4ad6 <_strtod_r+0x48e>
   e507e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e5240 <_strtod_r+0xbf8>
   e5082:	f04f 3aff 	mov.w	sl, #4294967295
   e5086:	e072      	b.n	e516e <_strtod_r+0xb26>
   e5088:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e508c:	e038      	b.n	e5100 <_strtod_r+0xab8>
   e508e:	9b03      	ldr	r3, [sp, #12]
   e5090:	b333      	cbz	r3, e50e0 <_strtod_r+0xa98>
   e5092:	9b06      	ldr	r3, [sp, #24]
   e5094:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e5098:	d822      	bhi.n	e50e0 <_strtod_r+0xa98>
   e509a:	a35d      	add	r3, pc, #372	; (adr r3, e5210 <_strtod_r+0xbc8>)
   e509c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e50a0:	4630      	mov	r0, r6
   e50a2:	4639      	mov	r1, r7
   e50a4:	f7fe f898 	bl	e31d8 <__aeabi_dcmple>
   e50a8:	b1a8      	cbz	r0, e50d6 <_strtod_r+0xa8e>
   e50aa:	4639      	mov	r1, r7
   e50ac:	4630      	mov	r0, r6
   e50ae:	f7fe f8ef 	bl	e3290 <__aeabi_d2uiz>
   e50b2:	2800      	cmp	r0, #0
   e50b4:	bf08      	it	eq
   e50b6:	2001      	moveq	r0, #1
   e50b8:	f7fd fd9c 	bl	e2bf4 <__aeabi_ui2d>
   e50bc:	9b07      	ldr	r3, [sp, #28]
   e50be:	4606      	mov	r6, r0
   e50c0:	460f      	mov	r7, r1
   e50c2:	b923      	cbnz	r3, e50ce <_strtod_r+0xa86>
   e50c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e50c8:	9010      	str	r0, [sp, #64]	; 0x40
   e50ca:	9311      	str	r3, [sp, #68]	; 0x44
   e50cc:	e001      	b.n	e50d2 <_strtod_r+0xa8a>
   e50ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e50d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e50d6:	9a06      	ldr	r2, [sp, #24]
   e50d8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e50dc:	ebc2 0903 	rsb	r9, r2, r3
   e50e0:	ed9d 0b08 	vldr	d0, [sp, #32]
   e50e4:	f001 fafc 	bl	e66e0 <__ulp>
   e50e8:	4640      	mov	r0, r8
   e50ea:	ec53 2b10 	vmov	r2, r3, d0
   e50ee:	4649      	mov	r1, r9
   e50f0:	f7fd fdf6 	bl	e2ce0 <__aeabi_dmul>
   e50f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e50f8:	f7fd fc40 	bl	e297c <__adddf3>
   e50fc:	4682      	mov	sl, r0
   e50fe:	468b      	mov	fp, r1
   e5100:	9b03      	ldr	r3, [sp, #12]
   e5102:	bba3      	cbnz	r3, e516e <_strtod_r+0xb26>
   e5104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e5108:	0d1b      	lsrs	r3, r3, #20
   e510a:	9a06      	ldr	r2, [sp, #24]
   e510c:	051b      	lsls	r3, r3, #20
   e510e:	429a      	cmp	r2, r3
   e5110:	46d8      	mov	r8, fp
   e5112:	d12c      	bne.n	e516e <_strtod_r+0xb26>
   e5114:	4639      	mov	r1, r7
   e5116:	4630      	mov	r0, r6
   e5118:	f7fe f892 	bl	e3240 <__aeabi_d2iz>
   e511c:	f7fd fd7a 	bl	e2c14 <__aeabi_i2d>
   e5120:	460b      	mov	r3, r1
   e5122:	4602      	mov	r2, r0
   e5124:	4639      	mov	r1, r7
   e5126:	4630      	mov	r0, r6
   e5128:	f7fd fc26 	bl	e2978 <__aeabi_dsub>
   e512c:	9b07      	ldr	r3, [sp, #28]
   e512e:	4606      	mov	r6, r0
   e5130:	460f      	mov	r7, r1
   e5132:	b92b      	cbnz	r3, e5140 <_strtod_r+0xaf8>
   e5134:	f1ba 0f00 	cmp.w	sl, #0
   e5138:	d102      	bne.n	e5140 <_strtod_r+0xaf8>
   e513a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e513e:	b183      	cbz	r3, e5162 <_strtod_r+0xb1a>
   e5140:	a335      	add	r3, pc, #212	; (adr r3, e5218 <_strtod_r+0xbd0>)
   e5142:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5146:	4630      	mov	r0, r6
   e5148:	4639      	mov	r1, r7
   e514a:	f7fe f83b 	bl	e31c4 <__aeabi_dcmplt>
   e514e:	2800      	cmp	r0, #0
   e5150:	d131      	bne.n	e51b6 <_strtod_r+0xb6e>
   e5152:	a333      	add	r3, pc, #204	; (adr r3, e5220 <_strtod_r+0xbd8>)
   e5154:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5158:	4630      	mov	r0, r6
   e515a:	4639      	mov	r1, r7
   e515c:	f7fe f850 	bl	e3200 <__aeabi_dcmpgt>
   e5160:	e004      	b.n	e516c <_strtod_r+0xb24>
   e5162:	a331      	add	r3, pc, #196	; (adr r3, e5228 <_strtod_r+0xbe0>)
   e5164:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5168:	f7fe f82c 	bl	e31c4 <__aeabi_dcmplt>
   e516c:	bb18      	cbnz	r0, e51b6 <_strtod_r+0xb6e>
   e516e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e5170:	9802      	ldr	r0, [sp, #8]
   e5172:	f001 f824 	bl	e61be <_Bfree>
   e5176:	9904      	ldr	r1, [sp, #16]
   e5178:	9802      	ldr	r0, [sp, #8]
   e517a:	f001 f820 	bl	e61be <_Bfree>
   e517e:	4629      	mov	r1, r5
   e5180:	9802      	ldr	r0, [sp, #8]
   e5182:	f001 f81c 	bl	e61be <_Bfree>
   e5186:	4621      	mov	r1, r4
   e5188:	9802      	ldr	r0, [sp, #8]
   e518a:	f001 f818 	bl	e61be <_Bfree>
   e518e:	e56d      	b.n	e4c6c <_strtod_r+0x624>
   e5190:	9b03      	ldr	r3, [sp, #12]
   e5192:	b183      	cbz	r3, e51b6 <_strtod_r+0xb6e>
   e5194:	4b2b      	ldr	r3, [pc, #172]	; (e5244 <_strtod_r+0xbfc>)
   e5196:	930b      	str	r3, [sp, #44]	; 0x2c
   e5198:	2300      	movs	r3, #0
   e519a:	930a      	str	r3, [sp, #40]	; 0x28
   e519c:	4650      	mov	r0, sl
   e519e:	4659      	mov	r1, fp
   e51a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e51a4:	f7fd fd9c 	bl	e2ce0 <__aeabi_dmul>
   e51a8:	4682      	mov	sl, r0
   e51aa:	468b      	mov	fp, r1
   e51ac:	b919      	cbnz	r1, e51b6 <_strtod_r+0xb6e>
   e51ae:	b910      	cbnz	r0, e51b6 <_strtod_r+0xb6e>
   e51b0:	9a02      	ldr	r2, [sp, #8]
   e51b2:	2322      	movs	r3, #34	; 0x22
   e51b4:	6013      	str	r3, [r2, #0]
   e51b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e51b8:	9802      	ldr	r0, [sp, #8]
   e51ba:	f001 f800 	bl	e61be <_Bfree>
   e51be:	9904      	ldr	r1, [sp, #16]
   e51c0:	9802      	ldr	r0, [sp, #8]
   e51c2:	f000 fffc 	bl	e61be <_Bfree>
   e51c6:	4629      	mov	r1, r5
   e51c8:	9802      	ldr	r0, [sp, #8]
   e51ca:	f000 fff8 	bl	e61be <_Bfree>
   e51ce:	9905      	ldr	r1, [sp, #20]
   e51d0:	9802      	ldr	r0, [sp, #8]
   e51d2:	f000 fff4 	bl	e61be <_Bfree>
   e51d6:	4621      	mov	r1, r4
   e51d8:	9802      	ldr	r0, [sp, #8]
   e51da:	f000 fff0 	bl	e61be <_Bfree>
   e51de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e51e0:	b113      	cbz	r3, e51e8 <_strtod_r+0xba0>
   e51e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e51e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e51e6:	6013      	str	r3, [r2, #0]
   e51e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e51ea:	b11b      	cbz	r3, e51f4 <_strtod_r+0xbac>
   e51ec:	4652      	mov	r2, sl
   e51ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e51f2:	e007      	b.n	e5204 <_strtod_r+0xbbc>
   e51f4:	4652      	mov	r2, sl
   e51f6:	465b      	mov	r3, fp
   e51f8:	e004      	b.n	e5204 <_strtod_r+0xbbc>
   e51fa:	2500      	movs	r5, #0
   e51fc:	462a      	mov	r2, r5
   e51fe:	2101      	movs	r1, #1
   e5200:	f7ff bb41 	b.w	e4886 <_strtod_r+0x23e>
   e5204:	ec43 2b10 	vmov	d0, r2, r3
   e5208:	b01d      	add	sp, #116	; 0x74
   e520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e520e:	bf00      	nop
   e5210:	ffc00000 	.word	0xffc00000
   e5214:	41dfffff 	.word	0x41dfffff
   e5218:	94a03595 	.word	0x94a03595
   e521c:	3fdfffff 	.word	0x3fdfffff
   e5220:	35afe535 	.word	0x35afe535
   e5224:	3fe00000 	.word	0x3fe00000
   e5228:	94a03595 	.word	0x94a03595
   e522c:	3fcfffff 	.word	0x3fcfffff
   e5230:	3ff00000 	.word	0x3ff00000
   e5234:	3fe00000 	.word	0x3fe00000
   e5238:	7fe00000 	.word	0x7fe00000
   e523c:	7c9fffff 	.word	0x7c9fffff
   e5240:	7fefffff 	.word	0x7fefffff
   e5244:	39500000 	.word	0x39500000

000e5248 <strtod>:
   e5248:	4b02      	ldr	r3, [pc, #8]	; (e5254 <strtod+0xc>)
   e524a:	460a      	mov	r2, r1
   e524c:	4601      	mov	r1, r0
   e524e:	6818      	ldr	r0, [r3, #0]
   e5250:	f7ff b9fa 	b.w	e4648 <_strtod_r>
   e5254:	2003d5e4 	.word	0x2003d5e4

000e5258 <_strtol_r>:
   e5258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e525c:	4680      	mov	r8, r0
   e525e:	4840      	ldr	r0, [pc, #256]	; (e5360 <_strtol_r+0x108>)
   e5260:	f8d0 9000 	ldr.w	r9, [r0]
   e5264:	460f      	mov	r7, r1
   e5266:	463d      	mov	r5, r7
   e5268:	f815 4b01 	ldrb.w	r4, [r5], #1
   e526c:	eb09 0004 	add.w	r0, r9, r4
   e5270:	7840      	ldrb	r0, [r0, #1]
   e5272:	f000 0008 	and.w	r0, r0, #8
   e5276:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e527a:	b108      	cbz	r0, e5280 <_strtol_r+0x28>
   e527c:	462f      	mov	r7, r5
   e527e:	e7f2      	b.n	e5266 <_strtol_r+0xe>
   e5280:	2c2d      	cmp	r4, #45	; 0x2d
   e5282:	d103      	bne.n	e528c <_strtol_r+0x34>
   e5284:	1cbd      	adds	r5, r7, #2
   e5286:	787c      	ldrb	r4, [r7, #1]
   e5288:	2601      	movs	r6, #1
   e528a:	e003      	b.n	e5294 <_strtol_r+0x3c>
   e528c:	2c2b      	cmp	r4, #43	; 0x2b
   e528e:	bf04      	itt	eq
   e5290:	787c      	ldrbeq	r4, [r7, #1]
   e5292:	1cbd      	addeq	r5, r7, #2
   e5294:	b113      	cbz	r3, e529c <_strtol_r+0x44>
   e5296:	2b10      	cmp	r3, #16
   e5298:	d10a      	bne.n	e52b0 <_strtol_r+0x58>
   e529a:	e05b      	b.n	e5354 <_strtol_r+0xfc>
   e529c:	2c30      	cmp	r4, #48	; 0x30
   e529e:	d157      	bne.n	e5350 <_strtol_r+0xf8>
   e52a0:	7828      	ldrb	r0, [r5, #0]
   e52a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e52a6:	2858      	cmp	r0, #88	; 0x58
   e52a8:	d14d      	bne.n	e5346 <_strtol_r+0xee>
   e52aa:	786c      	ldrb	r4, [r5, #1]
   e52ac:	2310      	movs	r3, #16
   e52ae:	3502      	adds	r5, #2
   e52b0:	2e00      	cmp	r6, #0
   e52b2:	bf14      	ite	ne
   e52b4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e52b8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e52bc:	2700      	movs	r7, #0
   e52be:	fbbc faf3 	udiv	sl, ip, r3
   e52c2:	4638      	mov	r0, r7
   e52c4:	fb03 cc1a 	mls	ip, r3, sl, ip
   e52c8:	eb09 0e04 	add.w	lr, r9, r4
   e52cc:	f89e e001 	ldrb.w	lr, [lr, #1]
   e52d0:	f01e 0f04 	tst.w	lr, #4
   e52d4:	d001      	beq.n	e52da <_strtol_r+0x82>
   e52d6:	3c30      	subs	r4, #48	; 0x30
   e52d8:	e00b      	b.n	e52f2 <_strtol_r+0x9a>
   e52da:	f01e 0e03 	ands.w	lr, lr, #3
   e52de:	d01b      	beq.n	e5318 <_strtol_r+0xc0>
   e52e0:	f1be 0f01 	cmp.w	lr, #1
   e52e4:	bf0c      	ite	eq
   e52e6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e52ea:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e52ee:	ebce 0404 	rsb	r4, lr, r4
   e52f2:	42a3      	cmp	r3, r4
   e52f4:	dd10      	ble.n	e5318 <_strtol_r+0xc0>
   e52f6:	f1b7 3fff 	cmp.w	r7, #4294967295
   e52fa:	d00a      	beq.n	e5312 <_strtol_r+0xba>
   e52fc:	4550      	cmp	r0, sl
   e52fe:	d806      	bhi.n	e530e <_strtol_r+0xb6>
   e5300:	d101      	bne.n	e5306 <_strtol_r+0xae>
   e5302:	4564      	cmp	r4, ip
   e5304:	dc03      	bgt.n	e530e <_strtol_r+0xb6>
   e5306:	fb03 4000 	mla	r0, r3, r0, r4
   e530a:	2701      	movs	r7, #1
   e530c:	e001      	b.n	e5312 <_strtol_r+0xba>
   e530e:	f04f 37ff 	mov.w	r7, #4294967295
   e5312:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5316:	e7d7      	b.n	e52c8 <_strtol_r+0x70>
   e5318:	1c7b      	adds	r3, r7, #1
   e531a:	d10c      	bne.n	e5336 <_strtol_r+0xde>
   e531c:	2e00      	cmp	r6, #0
   e531e:	f04f 0322 	mov.w	r3, #34	; 0x22
   e5322:	bf14      	ite	ne
   e5324:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e5328:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e532c:	f8c8 3000 	str.w	r3, [r8]
   e5330:	b92a      	cbnz	r2, e533e <_strtol_r+0xe6>
   e5332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5336:	b106      	cbz	r6, e533a <_strtol_r+0xe2>
   e5338:	4240      	negs	r0, r0
   e533a:	b172      	cbz	r2, e535a <_strtol_r+0x102>
   e533c:	b107      	cbz	r7, e5340 <_strtol_r+0xe8>
   e533e:	1e69      	subs	r1, r5, #1
   e5340:	6011      	str	r1, [r2, #0]
   e5342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5346:	2430      	movs	r4, #48	; 0x30
   e5348:	2b00      	cmp	r3, #0
   e534a:	d1b1      	bne.n	e52b0 <_strtol_r+0x58>
   e534c:	2308      	movs	r3, #8
   e534e:	e7af      	b.n	e52b0 <_strtol_r+0x58>
   e5350:	230a      	movs	r3, #10
   e5352:	e7ad      	b.n	e52b0 <_strtol_r+0x58>
   e5354:	2c30      	cmp	r4, #48	; 0x30
   e5356:	d0a3      	beq.n	e52a0 <_strtol_r+0x48>
   e5358:	e7aa      	b.n	e52b0 <_strtol_r+0x58>
   e535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e535e:	bf00      	nop
   e5360:	2003d580 	.word	0x2003d580

000e5364 <strtol>:
   e5364:	4613      	mov	r3, r2
   e5366:	460a      	mov	r2, r1
   e5368:	4601      	mov	r1, r0
   e536a:	4802      	ldr	r0, [pc, #8]	; (e5374 <strtol+0x10>)
   e536c:	6800      	ldr	r0, [r0, #0]
   e536e:	f7ff bf73 	b.w	e5258 <_strtol_r>
   e5372:	bf00      	nop
   e5374:	2003d5e4 	.word	0x2003d5e4

000e5378 <_strtoul_r>:
   e5378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e537c:	4680      	mov	r8, r0
   e537e:	483c      	ldr	r0, [pc, #240]	; (e5470 <_strtoul_r+0xf8>)
   e5380:	f8d0 9000 	ldr.w	r9, [r0]
   e5384:	460e      	mov	r6, r1
   e5386:	4635      	mov	r5, r6
   e5388:	f815 4b01 	ldrb.w	r4, [r5], #1
   e538c:	eb09 0004 	add.w	r0, r9, r4
   e5390:	7840      	ldrb	r0, [r0, #1]
   e5392:	f000 0008 	and.w	r0, r0, #8
   e5396:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e539a:	b108      	cbz	r0, e53a0 <_strtoul_r+0x28>
   e539c:	462e      	mov	r6, r5
   e539e:	e7f2      	b.n	e5386 <_strtoul_r+0xe>
   e53a0:	2c2d      	cmp	r4, #45	; 0x2d
   e53a2:	d103      	bne.n	e53ac <_strtoul_r+0x34>
   e53a4:	1cb5      	adds	r5, r6, #2
   e53a6:	7874      	ldrb	r4, [r6, #1]
   e53a8:	2701      	movs	r7, #1
   e53aa:	e003      	b.n	e53b4 <_strtoul_r+0x3c>
   e53ac:	2c2b      	cmp	r4, #43	; 0x2b
   e53ae:	bf04      	itt	eq
   e53b0:	7874      	ldrbeq	r4, [r6, #1]
   e53b2:	1cb5      	addeq	r5, r6, #2
   e53b4:	b113      	cbz	r3, e53bc <_strtoul_r+0x44>
   e53b6:	2b10      	cmp	r3, #16
   e53b8:	d10a      	bne.n	e53d0 <_strtoul_r+0x58>
   e53ba:	e053      	b.n	e5464 <_strtoul_r+0xec>
   e53bc:	2c30      	cmp	r4, #48	; 0x30
   e53be:	d14f      	bne.n	e5460 <_strtoul_r+0xe8>
   e53c0:	7828      	ldrb	r0, [r5, #0]
   e53c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e53c6:	2858      	cmp	r0, #88	; 0x58
   e53c8:	d145      	bne.n	e5456 <_strtoul_r+0xde>
   e53ca:	786c      	ldrb	r4, [r5, #1]
   e53cc:	2310      	movs	r3, #16
   e53ce:	3502      	adds	r5, #2
   e53d0:	f04f 3cff 	mov.w	ip, #4294967295
   e53d4:	2600      	movs	r6, #0
   e53d6:	fbbc fcf3 	udiv	ip, ip, r3
   e53da:	fb03 fa0c 	mul.w	sl, r3, ip
   e53de:	ea6f 0a0a 	mvn.w	sl, sl
   e53e2:	4630      	mov	r0, r6
   e53e4:	eb09 0e04 	add.w	lr, r9, r4
   e53e8:	f89e e001 	ldrb.w	lr, [lr, #1]
   e53ec:	f01e 0f04 	tst.w	lr, #4
   e53f0:	d001      	beq.n	e53f6 <_strtoul_r+0x7e>
   e53f2:	3c30      	subs	r4, #48	; 0x30
   e53f4:	e00b      	b.n	e540e <_strtoul_r+0x96>
   e53f6:	f01e 0e03 	ands.w	lr, lr, #3
   e53fa:	d01a      	beq.n	e5432 <_strtoul_r+0xba>
   e53fc:	f1be 0f01 	cmp.w	lr, #1
   e5400:	bf0c      	ite	eq
   e5402:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e5406:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e540a:	ebce 0404 	rsb	r4, lr, r4
   e540e:	42a3      	cmp	r3, r4
   e5410:	dd0f      	ble.n	e5432 <_strtoul_r+0xba>
   e5412:	2e00      	cmp	r6, #0
   e5414:	db08      	blt.n	e5428 <_strtoul_r+0xb0>
   e5416:	4560      	cmp	r0, ip
   e5418:	d806      	bhi.n	e5428 <_strtoul_r+0xb0>
   e541a:	d101      	bne.n	e5420 <_strtoul_r+0xa8>
   e541c:	4554      	cmp	r4, sl
   e541e:	dc03      	bgt.n	e5428 <_strtoul_r+0xb0>
   e5420:	fb03 4000 	mla	r0, r3, r0, r4
   e5424:	2601      	movs	r6, #1
   e5426:	e001      	b.n	e542c <_strtoul_r+0xb4>
   e5428:	f04f 36ff 	mov.w	r6, #4294967295
   e542c:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5430:	e7d8      	b.n	e53e4 <_strtoul_r+0x6c>
   e5432:	2e00      	cmp	r6, #0
   e5434:	da07      	bge.n	e5446 <_strtoul_r+0xce>
   e5436:	2322      	movs	r3, #34	; 0x22
   e5438:	f8c8 3000 	str.w	r3, [r8]
   e543c:	f04f 30ff 	mov.w	r0, #4294967295
   e5440:	b92a      	cbnz	r2, e544e <_strtoul_r+0xd6>
   e5442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5446:	b107      	cbz	r7, e544a <_strtoul_r+0xd2>
   e5448:	4240      	negs	r0, r0
   e544a:	b172      	cbz	r2, e546a <_strtoul_r+0xf2>
   e544c:	b106      	cbz	r6, e5450 <_strtoul_r+0xd8>
   e544e:	1e69      	subs	r1, r5, #1
   e5450:	6011      	str	r1, [r2, #0]
   e5452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5456:	2430      	movs	r4, #48	; 0x30
   e5458:	2b00      	cmp	r3, #0
   e545a:	d1b9      	bne.n	e53d0 <_strtoul_r+0x58>
   e545c:	2308      	movs	r3, #8
   e545e:	e7b7      	b.n	e53d0 <_strtoul_r+0x58>
   e5460:	230a      	movs	r3, #10
   e5462:	e7b5      	b.n	e53d0 <_strtoul_r+0x58>
   e5464:	2c30      	cmp	r4, #48	; 0x30
   e5466:	d0ab      	beq.n	e53c0 <_strtoul_r+0x48>
   e5468:	e7b2      	b.n	e53d0 <_strtoul_r+0x58>
   e546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e546e:	bf00      	nop
   e5470:	2003d580 	.word	0x2003d580

000e5474 <strtoul>:
   e5474:	4613      	mov	r3, r2
   e5476:	460a      	mov	r2, r1
   e5478:	4601      	mov	r1, r0
   e547a:	4802      	ldr	r0, [pc, #8]	; (e5484 <strtoul+0x10>)
   e547c:	6800      	ldr	r0, [r0, #0]
   e547e:	f7ff bf7b 	b.w	e5378 <_strtoul_r>
   e5482:	bf00      	nop
   e5484:	2003d5e4 	.word	0x2003d5e4

000e5488 <__get_current_time_locale>:
   e5488:	4b04      	ldr	r3, [pc, #16]	; (e549c <__get_current_time_locale+0x14>)
   e548a:	4a05      	ldr	r2, [pc, #20]	; (e54a0 <__get_current_time_locale+0x18>)
   e548c:	6818      	ldr	r0, [r3, #0]
   e548e:	4b05      	ldr	r3, [pc, #20]	; (e54a4 <__get_current_time_locale+0x1c>)
   e5490:	2800      	cmp	r0, #0
   e5492:	bf14      	ite	ne
   e5494:	4610      	movne	r0, r2
   e5496:	4618      	moveq	r0, r3
   e5498:	4770      	bx	lr
   e549a:	bf00      	nop
   e549c:	2003e6cc 	.word	0x2003e6cc
   e54a0:	2003e6d0 	.word	0x2003e6d0
   e54a4:	000e87e8 	.word	0x000e87e8

000e54a8 <tolower>:
   e54a8:	4b04      	ldr	r3, [pc, #16]	; (e54bc <tolower+0x14>)
   e54aa:	681b      	ldr	r3, [r3, #0]
   e54ac:	4403      	add	r3, r0
   e54ae:	785b      	ldrb	r3, [r3, #1]
   e54b0:	f003 0303 	and.w	r3, r3, #3
   e54b4:	2b01      	cmp	r3, #1
   e54b6:	bf08      	it	eq
   e54b8:	3020      	addeq	r0, #32
   e54ba:	4770      	bx	lr
   e54bc:	2003d580 	.word	0x2003d580

000e54c0 <__tzcalc_limits>:
   e54c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e54c4:	4604      	mov	r4, r0
   e54c6:	f000 fda5 	bl	e6014 <__gettzinfo>
   e54ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e54ce:	429c      	cmp	r4, r3
   e54d0:	f340 8096 	ble.w	e5600 <__tzcalc_limits+0x140>
   e54d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e54d8:	18e3      	adds	r3, r4, r3
   e54da:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e54de:	109b      	asrs	r3, r3, #2
   e54e0:	f240 156d 	movw	r5, #365	; 0x16d
   e54e4:	fb05 3502 	mla	r5, r5, r2, r3
   e54e8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e54ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e54f0:	fb92 f3f3 	sdiv	r3, r2, r3
   e54f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e54f8:	442b      	add	r3, r5
   e54fa:	18a5      	adds	r5, r4, r2
   e54fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e5500:	fb95 f5f2 	sdiv	r5, r5, r2
   e5504:	441d      	add	r5, r3
   e5506:	2364      	movs	r3, #100	; 0x64
   e5508:	fb94 f7f2 	sdiv	r7, r4, r2
   e550c:	fb94 f6f3 	sdiv	r6, r4, r3
   e5510:	fb02 4717 	mls	r7, r2, r7, r4
   e5514:	fb03 4616 	mls	r6, r3, r6, r4
   e5518:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e551c:	fab7 fe87 	clz	lr, r7
   e5520:	9301      	str	r3, [sp, #4]
   e5522:	f004 0303 	and.w	r3, r4, #3
   e5526:	6044      	str	r4, [r0, #4]
   e5528:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e552c:	4601      	mov	r1, r0
   e552e:	9300      	str	r3, [sp, #0]
   e5530:	f04f 0c07 	mov.w	ip, #7
   e5534:	7a0b      	ldrb	r3, [r1, #8]
   e5536:	2b4a      	cmp	r3, #74	; 0x4a
   e5538:	d10e      	bne.n	e5558 <__tzcalc_limits+0x98>
   e553a:	694b      	ldr	r3, [r1, #20]
   e553c:	9a00      	ldr	r2, [sp, #0]
   e553e:	18ec      	adds	r4, r5, r3
   e5540:	b902      	cbnz	r2, e5544 <__tzcalc_limits+0x84>
   e5542:	b906      	cbnz	r6, e5546 <__tzcalc_limits+0x86>
   e5544:	b927      	cbnz	r7, e5550 <__tzcalc_limits+0x90>
   e5546:	2b3b      	cmp	r3, #59	; 0x3b
   e5548:	bfd4      	ite	le
   e554a:	2300      	movle	r3, #0
   e554c:	2301      	movgt	r3, #1
   e554e:	e000      	b.n	e5552 <__tzcalc_limits+0x92>
   e5550:	2300      	movs	r3, #0
   e5552:	4423      	add	r3, r4
   e5554:	3b01      	subs	r3, #1
   e5556:	e03f      	b.n	e55d8 <__tzcalc_limits+0x118>
   e5558:	2b44      	cmp	r3, #68	; 0x44
   e555a:	d102      	bne.n	e5562 <__tzcalc_limits+0xa2>
   e555c:	694b      	ldr	r3, [r1, #20]
   e555e:	442b      	add	r3, r5
   e5560:	e03a      	b.n	e55d8 <__tzcalc_limits+0x118>
   e5562:	9b00      	ldr	r3, [sp, #0]
   e5564:	b92b      	cbnz	r3, e5572 <__tzcalc_limits+0xb2>
   e5566:	2e00      	cmp	r6, #0
   e5568:	bf0c      	ite	eq
   e556a:	46f0      	moveq	r8, lr
   e556c:	f04f 0801 	movne.w	r8, #1
   e5570:	e000      	b.n	e5574 <__tzcalc_limits+0xb4>
   e5572:	46f0      	mov	r8, lr
   e5574:	4b24      	ldr	r3, [pc, #144]	; (e5608 <__tzcalc_limits+0x148>)
   e5576:	68cc      	ldr	r4, [r1, #12]
   e5578:	2230      	movs	r2, #48	; 0x30
   e557a:	fb02 3808 	mla	r8, r2, r8, r3
   e557e:	f1a8 0a04 	sub.w	sl, r8, #4
   e5582:	46a9      	mov	r9, r5
   e5584:	2301      	movs	r3, #1
   e5586:	42a3      	cmp	r3, r4
   e5588:	da04      	bge.n	e5594 <__tzcalc_limits+0xd4>
   e558a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e558e:	3301      	adds	r3, #1
   e5590:	44d9      	add	r9, fp
   e5592:	e7f8      	b.n	e5586 <__tzcalc_limits+0xc6>
   e5594:	f109 0304 	add.w	r3, r9, #4
   e5598:	fb93 fbfc 	sdiv	fp, r3, ip
   e559c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e55a0:	2c01      	cmp	r4, #1
   e55a2:	ebca 0a03 	rsb	sl, sl, r3
   e55a6:	694b      	ldr	r3, [r1, #20]
   e55a8:	bfb8      	it	lt
   e55aa:	2401      	movlt	r4, #1
   e55ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e55b0:	ebb3 0a0a 	subs.w	sl, r3, sl
   e55b4:	690b      	ldr	r3, [r1, #16]
   e55b6:	f104 34ff 	add.w	r4, r4, #4294967295
   e55ba:	f103 33ff 	add.w	r3, r3, #4294967295
   e55be:	bf48      	it	mi
   e55c0:	f10a 0a07 	addmi.w	sl, sl, #7
   e55c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e55c8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e55cc:	4453      	add	r3, sl
   e55ce:	42a3      	cmp	r3, r4
   e55d0:	db01      	blt.n	e55d6 <__tzcalc_limits+0x116>
   e55d2:	3b07      	subs	r3, #7
   e55d4:	e7fb      	b.n	e55ce <__tzcalc_limits+0x10e>
   e55d6:	444b      	add	r3, r9
   e55d8:	698c      	ldr	r4, [r1, #24]
   e55da:	4a0c      	ldr	r2, [pc, #48]	; (e560c <__tzcalc_limits+0x14c>)
   e55dc:	fb02 4303 	mla	r3, r2, r3, r4
   e55e0:	6a0c      	ldr	r4, [r1, #32]
   e55e2:	4423      	add	r3, r4
   e55e4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e55e8:	9b01      	ldr	r3, [sp, #4]
   e55ea:	4299      	cmp	r1, r3
   e55ec:	d1a2      	bne.n	e5534 <__tzcalc_limits+0x74>
   e55ee:	69c3      	ldr	r3, [r0, #28]
   e55f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e55f2:	4293      	cmp	r3, r2
   e55f4:	bfac      	ite	ge
   e55f6:	2300      	movge	r3, #0
   e55f8:	2301      	movlt	r3, #1
   e55fa:	6003      	str	r3, [r0, #0]
   e55fc:	2001      	movs	r0, #1
   e55fe:	e000      	b.n	e5602 <__tzcalc_limits+0x142>
   e5600:	2000      	movs	r0, #0
   e5602:	b003      	add	sp, #12
   e5604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5608:	000e85a4 	.word	0x000e85a4
   e560c:	00015180 	.word	0x00015180

000e5610 <__tz_lock>:
   e5610:	4770      	bx	lr

000e5612 <__tz_unlock>:
   e5612:	4770      	bx	lr

000e5614 <_tzset_unlocked>:
   e5614:	4b01      	ldr	r3, [pc, #4]	; (e561c <_tzset_unlocked+0x8>)
   e5616:	6818      	ldr	r0, [r3, #0]
   e5618:	f000 b802 	b.w	e5620 <_tzset_unlocked_r>
   e561c:	2003d5e4 	.word	0x2003d5e4

000e5620 <_tzset_unlocked_r>:
   e5620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5624:	b08d      	sub	sp, #52	; 0x34
   e5626:	4607      	mov	r7, r0
   e5628:	f000 fcf4 	bl	e6014 <__gettzinfo>
   e562c:	49b0      	ldr	r1, [pc, #704]	; (e58f0 <_tzset_unlocked_r+0x2d0>)
   e562e:	4eb1      	ldr	r6, [pc, #708]	; (e58f4 <_tzset_unlocked_r+0x2d4>)
   e5630:	4604      	mov	r4, r0
   e5632:	4638      	mov	r0, r7
   e5634:	f000 fce6 	bl	e6004 <_getenv_r>
   e5638:	4605      	mov	r5, r0
   e563a:	b960      	cbnz	r0, e5656 <_tzset_unlocked_r+0x36>
   e563c:	4bae      	ldr	r3, [pc, #696]	; (e58f8 <_tzset_unlocked_r+0x2d8>)
   e563e:	4aaf      	ldr	r2, [pc, #700]	; (e58fc <_tzset_unlocked_r+0x2dc>)
   e5640:	6018      	str	r0, [r3, #0]
   e5642:	4baf      	ldr	r3, [pc, #700]	; (e5900 <_tzset_unlocked_r+0x2e0>)
   e5644:	6018      	str	r0, [r3, #0]
   e5646:	4baf      	ldr	r3, [pc, #700]	; (e5904 <_tzset_unlocked_r+0x2e4>)
   e5648:	6830      	ldr	r0, [r6, #0]
   e564a:	601a      	str	r2, [r3, #0]
   e564c:	605a      	str	r2, [r3, #4]
   e564e:	f7f5 fa21 	bl	daa94 <free>
   e5652:	6035      	str	r5, [r6, #0]
   e5654:	e148      	b.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e5656:	6831      	ldr	r1, [r6, #0]
   e5658:	b979      	cbnz	r1, e567a <_tzset_unlocked_r+0x5a>
   e565a:	6830      	ldr	r0, [r6, #0]
   e565c:	f7f5 fa1a 	bl	daa94 <free>
   e5660:	4628      	mov	r0, r5
   e5662:	f7fe ffa3 	bl	e45ac <strlen>
   e5666:	1c41      	adds	r1, r0, #1
   e5668:	4638      	mov	r0, r7
   e566a:	f7f5 fa53 	bl	dab14 <_malloc_r>
   e566e:	6030      	str	r0, [r6, #0]
   e5670:	b148      	cbz	r0, e5686 <_tzset_unlocked_r+0x66>
   e5672:	4629      	mov	r1, r5
   e5674:	f7fe fa62 	bl	e3b3c <strcpy>
   e5678:	e005      	b.n	e5686 <_tzset_unlocked_r+0x66>
   e567a:	f7fe fa55 	bl	e3b28 <strcmp>
   e567e:	2800      	cmp	r0, #0
   e5680:	f000 8132 	beq.w	e58e8 <_tzset_unlocked_r+0x2c8>
   e5684:	e7e9      	b.n	e565a <_tzset_unlocked_r+0x3a>
   e5686:	782b      	ldrb	r3, [r5, #0]
   e5688:	4a9f      	ldr	r2, [pc, #636]	; (e5908 <_tzset_unlocked_r+0x2e8>)
   e568a:	49a0      	ldr	r1, [pc, #640]	; (e590c <_tzset_unlocked_r+0x2ec>)
   e568c:	2b3a      	cmp	r3, #58	; 0x3a
   e568e:	bf08      	it	eq
   e5690:	3501      	addeq	r5, #1
   e5692:	ae0a      	add	r6, sp, #40	; 0x28
   e5694:	4633      	mov	r3, r6
   e5696:	4628      	mov	r0, r5
   e5698:	f7f5 fa14 	bl	daac4 <siscanf>
   e569c:	2800      	cmp	r0, #0
   e569e:	f340 8123 	ble.w	e58e8 <_tzset_unlocked_r+0x2c8>
   e56a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e56a4:	18ef      	adds	r7, r5, r3
   e56a6:	5ceb      	ldrb	r3, [r5, r3]
   e56a8:	2b2d      	cmp	r3, #45	; 0x2d
   e56aa:	d103      	bne.n	e56b4 <_tzset_unlocked_r+0x94>
   e56ac:	3701      	adds	r7, #1
   e56ae:	f04f 35ff 	mov.w	r5, #4294967295
   e56b2:	e003      	b.n	e56bc <_tzset_unlocked_r+0x9c>
   e56b4:	2b2b      	cmp	r3, #43	; 0x2b
   e56b6:	bf08      	it	eq
   e56b8:	3701      	addeq	r7, #1
   e56ba:	2501      	movs	r5, #1
   e56bc:	f10d 0a20 	add.w	sl, sp, #32
   e56c0:	f10d 0b1e 	add.w	fp, sp, #30
   e56c4:	f04f 0800 	mov.w	r8, #0
   e56c8:	9603      	str	r6, [sp, #12]
   e56ca:	f8cd a008 	str.w	sl, [sp, #8]
   e56ce:	9601      	str	r6, [sp, #4]
   e56d0:	f8cd b000 	str.w	fp, [sp]
   e56d4:	4633      	mov	r3, r6
   e56d6:	aa07      	add	r2, sp, #28
   e56d8:	498d      	ldr	r1, [pc, #564]	; (e5910 <_tzset_unlocked_r+0x2f0>)
   e56da:	f8ad 801e 	strh.w	r8, [sp, #30]
   e56de:	4638      	mov	r0, r7
   e56e0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e56e4:	f7f5 f9ee 	bl	daac4 <siscanf>
   e56e8:	4540      	cmp	r0, r8
   e56ea:	f340 80fd 	ble.w	e58e8 <_tzset_unlocked_r+0x2c8>
   e56ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e56f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e56f6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e591c <_tzset_unlocked_r+0x2fc>
   e56fa:	213c      	movs	r1, #60	; 0x3c
   e56fc:	fb01 3302 	mla	r3, r1, r2, r3
   e5700:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e5704:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e5708:	fb01 3302 	mla	r3, r1, r2, r3
   e570c:	435d      	muls	r5, r3
   e570e:	6225      	str	r5, [r4, #32]
   e5710:	4d7c      	ldr	r5, [pc, #496]	; (e5904 <_tzset_unlocked_r+0x2e4>)
   e5712:	4b7d      	ldr	r3, [pc, #500]	; (e5908 <_tzset_unlocked_r+0x2e8>)
   e5714:	602b      	str	r3, [r5, #0]
   e5716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5718:	497c      	ldr	r1, [pc, #496]	; (e590c <_tzset_unlocked_r+0x2ec>)
   e571a:	441f      	add	r7, r3
   e571c:	464a      	mov	r2, r9
   e571e:	4633      	mov	r3, r6
   e5720:	4638      	mov	r0, r7
   e5722:	f7f5 f9cf 	bl	daac4 <siscanf>
   e5726:	4540      	cmp	r0, r8
   e5728:	dc08      	bgt.n	e573c <_tzset_unlocked_r+0x11c>
   e572a:	682b      	ldr	r3, [r5, #0]
   e572c:	606b      	str	r3, [r5, #4]
   e572e:	4b72      	ldr	r3, [pc, #456]	; (e58f8 <_tzset_unlocked_r+0x2d8>)
   e5730:	6a22      	ldr	r2, [r4, #32]
   e5732:	601a      	str	r2, [r3, #0]
   e5734:	4b72      	ldr	r3, [pc, #456]	; (e5900 <_tzset_unlocked_r+0x2e0>)
   e5736:	f8c3 8000 	str.w	r8, [r3]
   e573a:	e0d5      	b.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e573c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e573e:	f8c5 9004 	str.w	r9, [r5, #4]
   e5742:	18fd      	adds	r5, r7, r3
   e5744:	5cfb      	ldrb	r3, [r7, r3]
   e5746:	2b2d      	cmp	r3, #45	; 0x2d
   e5748:	d103      	bne.n	e5752 <_tzset_unlocked_r+0x132>
   e574a:	3501      	adds	r5, #1
   e574c:	f04f 37ff 	mov.w	r7, #4294967295
   e5750:	e003      	b.n	e575a <_tzset_unlocked_r+0x13a>
   e5752:	2b2b      	cmp	r3, #43	; 0x2b
   e5754:	bf08      	it	eq
   e5756:	3501      	addeq	r5, #1
   e5758:	2701      	movs	r7, #1
   e575a:	2300      	movs	r3, #0
   e575c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e5760:	f8ad 301e 	strh.w	r3, [sp, #30]
   e5764:	f8ad 3020 	strh.w	r3, [sp, #32]
   e5768:	930a      	str	r3, [sp, #40]	; 0x28
   e576a:	9603      	str	r6, [sp, #12]
   e576c:	f8cd a008 	str.w	sl, [sp, #8]
   e5770:	9601      	str	r6, [sp, #4]
   e5772:	f8cd b000 	str.w	fp, [sp]
   e5776:	4633      	mov	r3, r6
   e5778:	aa07      	add	r2, sp, #28
   e577a:	4965      	ldr	r1, [pc, #404]	; (e5910 <_tzset_unlocked_r+0x2f0>)
   e577c:	4628      	mov	r0, r5
   e577e:	f7f5 f9a1 	bl	daac4 <siscanf>
   e5782:	2800      	cmp	r0, #0
   e5784:	dc04      	bgt.n	e5790 <_tzset_unlocked_r+0x170>
   e5786:	6a23      	ldr	r3, [r4, #32]
   e5788:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e578c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e578e:	e00e      	b.n	e57ae <_tzset_unlocked_r+0x18e>
   e5790:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e5794:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e5798:	213c      	movs	r1, #60	; 0x3c
   e579a:	fb01 3302 	mla	r3, r1, r2, r3
   e579e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e57a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e57a6:	fb01 3302 	mla	r3, r1, r2, r3
   e57aa:	435f      	muls	r7, r3
   e57ac:	63e7      	str	r7, [r4, #60]	; 0x3c
   e57ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e57b0:	4627      	mov	r7, r4
   e57b2:	441d      	add	r5, r3
   e57b4:	f04f 0900 	mov.w	r9, #0
   e57b8:	782b      	ldrb	r3, [r5, #0]
   e57ba:	2b2c      	cmp	r3, #44	; 0x2c
   e57bc:	bf08      	it	eq
   e57be:	3501      	addeq	r5, #1
   e57c0:	f895 8000 	ldrb.w	r8, [r5]
   e57c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e57c8:	d126      	bne.n	e5818 <_tzset_unlocked_r+0x1f8>
   e57ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e57ce:	9302      	str	r3, [sp, #8]
   e57d0:	ab09      	add	r3, sp, #36	; 0x24
   e57d2:	9300      	str	r3, [sp, #0]
   e57d4:	9603      	str	r6, [sp, #12]
   e57d6:	9601      	str	r6, [sp, #4]
   e57d8:	4633      	mov	r3, r6
   e57da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e57de:	494d      	ldr	r1, [pc, #308]	; (e5914 <_tzset_unlocked_r+0x2f4>)
   e57e0:	4628      	mov	r0, r5
   e57e2:	f7f5 f96f 	bl	daac4 <siscanf>
   e57e6:	2803      	cmp	r0, #3
   e57e8:	d17e      	bne.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e57ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e57ee:	1e4b      	subs	r3, r1, #1
   e57f0:	2b0b      	cmp	r3, #11
   e57f2:	d879      	bhi.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e57f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e57f8:	1e53      	subs	r3, r2, #1
   e57fa:	2b04      	cmp	r3, #4
   e57fc:	d874      	bhi.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e57fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e5802:	2b06      	cmp	r3, #6
   e5804:	d870      	bhi.n	e58e8 <_tzset_unlocked_r+0x2c8>
   e5806:	f887 8008 	strb.w	r8, [r7, #8]
   e580a:	60f9      	str	r1, [r7, #12]
   e580c:	613a      	str	r2, [r7, #16]
   e580e:	617b      	str	r3, [r7, #20]
   e5810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5812:	eb05 0803 	add.w	r8, r5, r3
   e5816:	e02a      	b.n	e586e <_tzset_unlocked_r+0x24e>
   e5818:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e581c:	bf06      	itte	eq
   e581e:	3501      	addeq	r5, #1
   e5820:	4643      	moveq	r3, r8
   e5822:	2344      	movne	r3, #68	; 0x44
   e5824:	220a      	movs	r2, #10
   e5826:	a90b      	add	r1, sp, #44	; 0x2c
   e5828:	4628      	mov	r0, r5
   e582a:	9305      	str	r3, [sp, #20]
   e582c:	f7ff fe22 	bl	e5474 <strtoul>
   e5830:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e5834:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e5838:	4545      	cmp	r5, r8
   e583a:	9b05      	ldr	r3, [sp, #20]
   e583c:	d114      	bne.n	e5868 <_tzset_unlocked_r+0x248>
   e583e:	234d      	movs	r3, #77	; 0x4d
   e5840:	f1b9 0f00 	cmp.w	r9, #0
   e5844:	d107      	bne.n	e5856 <_tzset_unlocked_r+0x236>
   e5846:	7223      	strb	r3, [r4, #8]
   e5848:	2303      	movs	r3, #3
   e584a:	60e3      	str	r3, [r4, #12]
   e584c:	2302      	movs	r3, #2
   e584e:	6123      	str	r3, [r4, #16]
   e5850:	f8c4 9014 	str.w	r9, [r4, #20]
   e5854:	e00b      	b.n	e586e <_tzset_unlocked_r+0x24e>
   e5856:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e585a:	230b      	movs	r3, #11
   e585c:	62a3      	str	r3, [r4, #40]	; 0x28
   e585e:	2301      	movs	r3, #1
   e5860:	62e3      	str	r3, [r4, #44]	; 0x2c
   e5862:	2300      	movs	r3, #0
   e5864:	6323      	str	r3, [r4, #48]	; 0x30
   e5866:	e002      	b.n	e586e <_tzset_unlocked_r+0x24e>
   e5868:	b280      	uxth	r0, r0
   e586a:	723b      	strb	r3, [r7, #8]
   e586c:	6178      	str	r0, [r7, #20]
   e586e:	2302      	movs	r3, #2
   e5870:	f8ad 301c 	strh.w	r3, [sp, #28]
   e5874:	2300      	movs	r3, #0
   e5876:	f8ad 301e 	strh.w	r3, [sp, #30]
   e587a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e587e:	930a      	str	r3, [sp, #40]	; 0x28
   e5880:	f898 3000 	ldrb.w	r3, [r8]
   e5884:	2b2f      	cmp	r3, #47	; 0x2f
   e5886:	d10b      	bne.n	e58a0 <_tzset_unlocked_r+0x280>
   e5888:	9603      	str	r6, [sp, #12]
   e588a:	f8cd a008 	str.w	sl, [sp, #8]
   e588e:	9601      	str	r6, [sp, #4]
   e5890:	f8cd b000 	str.w	fp, [sp]
   e5894:	4633      	mov	r3, r6
   e5896:	aa07      	add	r2, sp, #28
   e5898:	491f      	ldr	r1, [pc, #124]	; (e5918 <_tzset_unlocked_r+0x2f8>)
   e589a:	4640      	mov	r0, r8
   e589c:	f7f5 f912 	bl	daac4 <siscanf>
   e58a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e58a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e58a8:	213c      	movs	r1, #60	; 0x3c
   e58aa:	fb01 3302 	mla	r3, r1, r2, r3
   e58ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e58b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e58b6:	fb01 3302 	mla	r3, r1, r2, r3
   e58ba:	61bb      	str	r3, [r7, #24]
   e58bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e58be:	f109 0901 	add.w	r9, r9, #1
   e58c2:	f1b9 0f02 	cmp.w	r9, #2
   e58c6:	4445      	add	r5, r8
   e58c8:	f107 071c 	add.w	r7, r7, #28
   e58cc:	f47f af74 	bne.w	e57b8 <_tzset_unlocked_r+0x198>
   e58d0:	6860      	ldr	r0, [r4, #4]
   e58d2:	f7ff fdf5 	bl	e54c0 <__tzcalc_limits>
   e58d6:	4b08      	ldr	r3, [pc, #32]	; (e58f8 <_tzset_unlocked_r+0x2d8>)
   e58d8:	6a22      	ldr	r2, [r4, #32]
   e58da:	601a      	str	r2, [r3, #0]
   e58dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e58de:	1a9b      	subs	r3, r3, r2
   e58e0:	4a07      	ldr	r2, [pc, #28]	; (e5900 <_tzset_unlocked_r+0x2e0>)
   e58e2:	bf18      	it	ne
   e58e4:	2301      	movne	r3, #1
   e58e6:	6013      	str	r3, [r2, #0]
   e58e8:	b00d      	add	sp, #52	; 0x34
   e58ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e58ee:	bf00      	nop
   e58f0:	000e88e4 	.word	0x000e88e4
   e58f4:	2003e7e4 	.word	0x2003e7e4
   e58f8:	2003e7ec 	.word	0x2003e7ec
   e58fc:	000e88e7 	.word	0x000e88e7
   e5900:	2003e7e8 	.word	0x2003e7e8
   e5904:	2003d620 	.word	0x2003d620
   e5908:	2003e7d7 	.word	0x2003e7d7
   e590c:	000e88eb 	.word	0x000e88eb
   e5910:	000e890e 	.word	0x000e890e
   e5914:	000e88fa 	.word	0x000e88fa
   e5918:	000e890d 	.word	0x000e890d
   e591c:	2003e7cc 	.word	0x2003e7cc

000e5920 <abs>:
   e5920:	2800      	cmp	r0, #0
   e5922:	bfb8      	it	lt
   e5924:	4240      	neglt	r0, r0
   e5926:	4770      	bx	lr

000e5928 <div>:
   e5928:	2900      	cmp	r1, #0
   e592a:	b510      	push	{r4, lr}
   e592c:	fb91 f4f2 	sdiv	r4, r1, r2
   e5930:	fb02 1314 	mls	r3, r2, r4, r1
   e5934:	db04      	blt.n	e5940 <div+0x18>
   e5936:	2b00      	cmp	r3, #0
   e5938:	da07      	bge.n	e594a <div+0x22>
   e593a:	3401      	adds	r4, #1
   e593c:	1a9b      	subs	r3, r3, r2
   e593e:	e004      	b.n	e594a <div+0x22>
   e5940:	2b00      	cmp	r3, #0
   e5942:	bfc4      	itt	gt
   e5944:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e5948:	189b      	addgt	r3, r3, r2
   e594a:	6004      	str	r4, [r0, #0]
   e594c:	6043      	str	r3, [r0, #4]
   e594e:	bd10      	pop	{r4, pc}

000e5950 <rshift>:
   e5950:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5952:	6906      	ldr	r6, [r0, #16]
   e5954:	114b      	asrs	r3, r1, #5
   e5956:	42b3      	cmp	r3, r6
   e5958:	f100 0514 	add.w	r5, r0, #20
   e595c:	da27      	bge.n	e59ae <rshift+0x5e>
   e595e:	f011 011f 	ands.w	r1, r1, #31
   e5962:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e5966:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e596a:	d101      	bne.n	e5970 <rshift+0x20>
   e596c:	4629      	mov	r1, r5
   e596e:	e016      	b.n	e599e <rshift+0x4e>
   e5970:	1d14      	adds	r4, r2, #4
   e5972:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e5976:	f1c1 0e20 	rsb	lr, r1, #32
   e597a:	40ca      	lsrs	r2, r1
   e597c:	462b      	mov	r3, r5
   e597e:	42b4      	cmp	r4, r6
   e5980:	d209      	bcs.n	e5996 <rshift+0x46>
   e5982:	6827      	ldr	r7, [r4, #0]
   e5984:	fa07 f70e 	lsl.w	r7, r7, lr
   e5988:	433a      	orrs	r2, r7
   e598a:	f843 2b04 	str.w	r2, [r3], #4
   e598e:	f854 2b04 	ldr.w	r2, [r4], #4
   e5992:	40ca      	lsrs	r2, r1
   e5994:	e7f3      	b.n	e597e <rshift+0x2e>
   e5996:	601a      	str	r2, [r3, #0]
   e5998:	b152      	cbz	r2, e59b0 <rshift+0x60>
   e599a:	3304      	adds	r3, #4
   e599c:	e008      	b.n	e59b0 <rshift+0x60>
   e599e:	42b2      	cmp	r2, r6
   e59a0:	460b      	mov	r3, r1
   e59a2:	d205      	bcs.n	e59b0 <rshift+0x60>
   e59a4:	f852 3b04 	ldr.w	r3, [r2], #4
   e59a8:	f841 3b04 	str.w	r3, [r1], #4
   e59ac:	e7f7      	b.n	e599e <rshift+0x4e>
   e59ae:	462b      	mov	r3, r5
   e59b0:	1b5b      	subs	r3, r3, r5
   e59b2:	109b      	asrs	r3, r3, #2
   e59b4:	6103      	str	r3, [r0, #16]
   e59b6:	b903      	cbnz	r3, e59ba <rshift+0x6a>
   e59b8:	6143      	str	r3, [r0, #20]
   e59ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e59bc <__hexdig_fun>:
   e59bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e59c0:	2b09      	cmp	r3, #9
   e59c2:	d801      	bhi.n	e59c8 <__hexdig_fun+0xc>
   e59c4:	3820      	subs	r0, #32
   e59c6:	e00a      	b.n	e59de <__hexdig_fun+0x22>
   e59c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e59cc:	2b05      	cmp	r3, #5
   e59ce:	d801      	bhi.n	e59d4 <__hexdig_fun+0x18>
   e59d0:	3847      	subs	r0, #71	; 0x47
   e59d2:	e004      	b.n	e59de <__hexdig_fun+0x22>
   e59d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e59d8:	2b05      	cmp	r3, #5
   e59da:	d802      	bhi.n	e59e2 <__hexdig_fun+0x26>
   e59dc:	3827      	subs	r0, #39	; 0x27
   e59de:	b2c0      	uxtb	r0, r0
   e59e0:	4770      	bx	lr
   e59e2:	2000      	movs	r0, #0
   e59e4:	4770      	bx	lr

000e59e6 <__gethex>:
   e59e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e59ea:	b08b      	sub	sp, #44	; 0x2c
   e59ec:	468a      	mov	sl, r1
   e59ee:	4690      	mov	r8, r2
   e59f0:	9306      	str	r3, [sp, #24]
   e59f2:	9002      	str	r0, [sp, #8]
   e59f4:	f7fd fe0a 	bl	e360c <_localeconv_r>
   e59f8:	6803      	ldr	r3, [r0, #0]
   e59fa:	9303      	str	r3, [sp, #12]
   e59fc:	4618      	mov	r0, r3
   e59fe:	f7fe fdd5 	bl	e45ac <strlen>
   e5a02:	9b03      	ldr	r3, [sp, #12]
   e5a04:	9001      	str	r0, [sp, #4]
   e5a06:	4403      	add	r3, r0
   e5a08:	f04f 0b00 	mov.w	fp, #0
   e5a0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e5a10:	9307      	str	r3, [sp, #28]
   e5a12:	f8da 3000 	ldr.w	r3, [sl]
   e5a16:	3302      	adds	r3, #2
   e5a18:	461f      	mov	r7, r3
   e5a1a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e5a1e:	2830      	cmp	r0, #48	; 0x30
   e5a20:	d102      	bne.n	e5a28 <__gethex+0x42>
   e5a22:	f10b 0b01 	add.w	fp, fp, #1
   e5a26:	e7f7      	b.n	e5a18 <__gethex+0x32>
   e5a28:	f7ff ffc8 	bl	e59bc <__hexdig_fun>
   e5a2c:	4604      	mov	r4, r0
   e5a2e:	b9e0      	cbnz	r0, e5a6a <__gethex+0x84>
   e5a30:	9a01      	ldr	r2, [sp, #4]
   e5a32:	9903      	ldr	r1, [sp, #12]
   e5a34:	4638      	mov	r0, r7
   e5a36:	f7fe fdc1 	bl	e45bc <strncmp>
   e5a3a:	2800      	cmp	r0, #0
   e5a3c:	d134      	bne.n	e5aa8 <__gethex+0xc2>
   e5a3e:	9b01      	ldr	r3, [sp, #4]
   e5a40:	5cf8      	ldrb	r0, [r7, r3]
   e5a42:	18fe      	adds	r6, r7, r3
   e5a44:	f7ff ffba 	bl	e59bc <__hexdig_fun>
   e5a48:	b380      	cbz	r0, e5aac <__gethex+0xc6>
   e5a4a:	4633      	mov	r3, r6
   e5a4c:	7818      	ldrb	r0, [r3, #0]
   e5a4e:	2830      	cmp	r0, #48	; 0x30
   e5a50:	461f      	mov	r7, r3
   e5a52:	f103 0301 	add.w	r3, r3, #1
   e5a56:	d0f9      	beq.n	e5a4c <__gethex+0x66>
   e5a58:	f7ff ffb0 	bl	e59bc <__hexdig_fun>
   e5a5c:	fab0 f580 	clz	r5, r0
   e5a60:	096d      	lsrs	r5, r5, #5
   e5a62:	4634      	mov	r4, r6
   e5a64:	f04f 0b01 	mov.w	fp, #1
   e5a68:	e001      	b.n	e5a6e <__gethex+0x88>
   e5a6a:	2500      	movs	r5, #0
   e5a6c:	462c      	mov	r4, r5
   e5a6e:	463a      	mov	r2, r7
   e5a70:	4616      	mov	r6, r2
   e5a72:	3201      	adds	r2, #1
   e5a74:	7830      	ldrb	r0, [r6, #0]
   e5a76:	f7ff ffa1 	bl	e59bc <__hexdig_fun>
   e5a7a:	2800      	cmp	r0, #0
   e5a7c:	d1f8      	bne.n	e5a70 <__gethex+0x8a>
   e5a7e:	9a01      	ldr	r2, [sp, #4]
   e5a80:	9903      	ldr	r1, [sp, #12]
   e5a82:	4630      	mov	r0, r6
   e5a84:	f7fe fd9a 	bl	e45bc <strncmp>
   e5a88:	b950      	cbnz	r0, e5aa0 <__gethex+0xba>
   e5a8a:	b954      	cbnz	r4, e5aa2 <__gethex+0xbc>
   e5a8c:	9b01      	ldr	r3, [sp, #4]
   e5a8e:	18f4      	adds	r4, r6, r3
   e5a90:	4622      	mov	r2, r4
   e5a92:	4616      	mov	r6, r2
   e5a94:	3201      	adds	r2, #1
   e5a96:	7830      	ldrb	r0, [r6, #0]
   e5a98:	f7ff ff90 	bl	e59bc <__hexdig_fun>
   e5a9c:	2800      	cmp	r0, #0
   e5a9e:	d1f8      	bne.n	e5a92 <__gethex+0xac>
   e5aa0:	b134      	cbz	r4, e5ab0 <__gethex+0xca>
   e5aa2:	1ba4      	subs	r4, r4, r6
   e5aa4:	00a4      	lsls	r4, r4, #2
   e5aa6:	e003      	b.n	e5ab0 <__gethex+0xca>
   e5aa8:	463e      	mov	r6, r7
   e5aaa:	e000      	b.n	e5aae <__gethex+0xc8>
   e5aac:	4604      	mov	r4, r0
   e5aae:	2501      	movs	r5, #1
   e5ab0:	7833      	ldrb	r3, [r6, #0]
   e5ab2:	2b50      	cmp	r3, #80	; 0x50
   e5ab4:	d001      	beq.n	e5aba <__gethex+0xd4>
   e5ab6:	2b70      	cmp	r3, #112	; 0x70
   e5ab8:	d12a      	bne.n	e5b10 <__gethex+0x12a>
   e5aba:	7873      	ldrb	r3, [r6, #1]
   e5abc:	2b2b      	cmp	r3, #43	; 0x2b
   e5abe:	d008      	beq.n	e5ad2 <__gethex+0xec>
   e5ac0:	2b2d      	cmp	r3, #45	; 0x2d
   e5ac2:	d003      	beq.n	e5acc <__gethex+0xe6>
   e5ac4:	1c71      	adds	r1, r6, #1
   e5ac6:	f04f 0900 	mov.w	r9, #0
   e5aca:	e005      	b.n	e5ad8 <__gethex+0xf2>
   e5acc:	f04f 0901 	mov.w	r9, #1
   e5ad0:	e001      	b.n	e5ad6 <__gethex+0xf0>
   e5ad2:	f04f 0900 	mov.w	r9, #0
   e5ad6:	1cb1      	adds	r1, r6, #2
   e5ad8:	7808      	ldrb	r0, [r1, #0]
   e5ada:	f7ff ff6f 	bl	e59bc <__hexdig_fun>
   e5ade:	1e43      	subs	r3, r0, #1
   e5ae0:	b2db      	uxtb	r3, r3
   e5ae2:	2b18      	cmp	r3, #24
   e5ae4:	d814      	bhi.n	e5b10 <__gethex+0x12a>
   e5ae6:	f1a0 0210 	sub.w	r2, r0, #16
   e5aea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e5aee:	f7ff ff65 	bl	e59bc <__hexdig_fun>
   e5af2:	1e43      	subs	r3, r0, #1
   e5af4:	b2db      	uxtb	r3, r3
   e5af6:	2b18      	cmp	r3, #24
   e5af8:	d804      	bhi.n	e5b04 <__gethex+0x11e>
   e5afa:	230a      	movs	r3, #10
   e5afc:	fb03 0202 	mla	r2, r3, r2, r0
   e5b00:	3a10      	subs	r2, #16
   e5b02:	e7f2      	b.n	e5aea <__gethex+0x104>
   e5b04:	f1b9 0f00 	cmp.w	r9, #0
   e5b08:	d000      	beq.n	e5b0c <__gethex+0x126>
   e5b0a:	4252      	negs	r2, r2
   e5b0c:	4414      	add	r4, r2
   e5b0e:	e000      	b.n	e5b12 <__gethex+0x12c>
   e5b10:	4631      	mov	r1, r6
   e5b12:	f8ca 1000 	str.w	r1, [sl]
   e5b16:	b12d      	cbz	r5, e5b24 <__gethex+0x13e>
   e5b18:	f1bb 0f00 	cmp.w	fp, #0
   e5b1c:	bf14      	ite	ne
   e5b1e:	2000      	movne	r0, #0
   e5b20:	2006      	moveq	r0, #6
   e5b22:	e17c      	b.n	e5e1e <__gethex+0x438>
   e5b24:	1bf3      	subs	r3, r6, r7
   e5b26:	3b01      	subs	r3, #1
   e5b28:	4629      	mov	r1, r5
   e5b2a:	2b07      	cmp	r3, #7
   e5b2c:	dd02      	ble.n	e5b34 <__gethex+0x14e>
   e5b2e:	3101      	adds	r1, #1
   e5b30:	105b      	asrs	r3, r3, #1
   e5b32:	e7fa      	b.n	e5b2a <__gethex+0x144>
   e5b34:	9802      	ldr	r0, [sp, #8]
   e5b36:	f000 fb0d 	bl	e6154 <_Balloc>
   e5b3a:	9b01      	ldr	r3, [sp, #4]
   e5b3c:	f100 0a14 	add.w	sl, r0, #20
   e5b40:	f04f 0900 	mov.w	r9, #0
   e5b44:	f1c3 0301 	rsb	r3, r3, #1
   e5b48:	4605      	mov	r5, r0
   e5b4a:	f8cd a010 	str.w	sl, [sp, #16]
   e5b4e:	46cb      	mov	fp, r9
   e5b50:	9308      	str	r3, [sp, #32]
   e5b52:	42b7      	cmp	r7, r6
   e5b54:	d22f      	bcs.n	e5bb6 <__gethex+0x1d0>
   e5b56:	1e73      	subs	r3, r6, #1
   e5b58:	9305      	str	r3, [sp, #20]
   e5b5a:	9a07      	ldr	r2, [sp, #28]
   e5b5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e5b60:	4293      	cmp	r3, r2
   e5b62:	d00b      	beq.n	e5b7c <__gethex+0x196>
   e5b64:	f1bb 0f20 	cmp.w	fp, #32
   e5b68:	d116      	bne.n	e5b98 <__gethex+0x1b2>
   e5b6a:	9b04      	ldr	r3, [sp, #16]
   e5b6c:	f8c3 9000 	str.w	r9, [r3]
   e5b70:	3304      	adds	r3, #4
   e5b72:	f04f 0900 	mov.w	r9, #0
   e5b76:	9304      	str	r3, [sp, #16]
   e5b78:	46cb      	mov	fp, r9
   e5b7a:	e00d      	b.n	e5b98 <__gethex+0x1b2>
   e5b7c:	9b05      	ldr	r3, [sp, #20]
   e5b7e:	9a08      	ldr	r2, [sp, #32]
   e5b80:	4413      	add	r3, r2
   e5b82:	429f      	cmp	r7, r3
   e5b84:	d8ee      	bhi.n	e5b64 <__gethex+0x17e>
   e5b86:	4618      	mov	r0, r3
   e5b88:	9a01      	ldr	r2, [sp, #4]
   e5b8a:	9903      	ldr	r1, [sp, #12]
   e5b8c:	9309      	str	r3, [sp, #36]	; 0x24
   e5b8e:	f7fe fd15 	bl	e45bc <strncmp>
   e5b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e5b94:	b168      	cbz	r0, e5bb2 <__gethex+0x1cc>
   e5b96:	e7e5      	b.n	e5b64 <__gethex+0x17e>
   e5b98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e5b9c:	f7ff ff0e 	bl	e59bc <__hexdig_fun>
   e5ba0:	f000 000f 	and.w	r0, r0, #15
   e5ba4:	fa00 f00b 	lsl.w	r0, r0, fp
   e5ba8:	9b05      	ldr	r3, [sp, #20]
   e5baa:	ea49 0900 	orr.w	r9, r9, r0
   e5bae:	f10b 0b04 	add.w	fp, fp, #4
   e5bb2:	461e      	mov	r6, r3
   e5bb4:	e7cd      	b.n	e5b52 <__gethex+0x16c>
   e5bb6:	9804      	ldr	r0, [sp, #16]
   e5bb8:	f840 9b04 	str.w	r9, [r0], #4
   e5bbc:	ebca 0000 	rsb	r0, sl, r0
   e5bc0:	1080      	asrs	r0, r0, #2
   e5bc2:	6128      	str	r0, [r5, #16]
   e5bc4:	0147      	lsls	r7, r0, #5
   e5bc6:	4648      	mov	r0, r9
   e5bc8:	f000 fb89 	bl	e62de <__hi0bits>
   e5bcc:	f8d8 6000 	ldr.w	r6, [r8]
   e5bd0:	1a38      	subs	r0, r7, r0
   e5bd2:	42b0      	cmp	r0, r6
   e5bd4:	dd26      	ble.n	e5c24 <__gethex+0x23e>
   e5bd6:	1b87      	subs	r7, r0, r6
   e5bd8:	4639      	mov	r1, r7
   e5bda:	4628      	mov	r0, r5
   e5bdc:	f000 fe87 	bl	e68ee <__any_on>
   e5be0:	b1c8      	cbz	r0, e5c16 <__gethex+0x230>
   e5be2:	1e7b      	subs	r3, r7, #1
   e5be4:	1159      	asrs	r1, r3, #5
   e5be6:	f003 021f 	and.w	r2, r3, #31
   e5bea:	f04f 0901 	mov.w	r9, #1
   e5bee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e5bf2:	fa09 f202 	lsl.w	r2, r9, r2
   e5bf6:	420a      	tst	r2, r1
   e5bf8:	d00e      	beq.n	e5c18 <__gethex+0x232>
   e5bfa:	454b      	cmp	r3, r9
   e5bfc:	dc02      	bgt.n	e5c04 <__gethex+0x21e>
   e5bfe:	f04f 0902 	mov.w	r9, #2
   e5c02:	e009      	b.n	e5c18 <__gethex+0x232>
   e5c04:	1eb9      	subs	r1, r7, #2
   e5c06:	4628      	mov	r0, r5
   e5c08:	f000 fe71 	bl	e68ee <__any_on>
   e5c0c:	2800      	cmp	r0, #0
   e5c0e:	d0f6      	beq.n	e5bfe <__gethex+0x218>
   e5c10:	f04f 0903 	mov.w	r9, #3
   e5c14:	e000      	b.n	e5c18 <__gethex+0x232>
   e5c16:	4681      	mov	r9, r0
   e5c18:	4639      	mov	r1, r7
   e5c1a:	4628      	mov	r0, r5
   e5c1c:	f7ff fe98 	bl	e5950 <rshift>
   e5c20:	443c      	add	r4, r7
   e5c22:	e00c      	b.n	e5c3e <__gethex+0x258>
   e5c24:	da09      	bge.n	e5c3a <__gethex+0x254>
   e5c26:	1a37      	subs	r7, r6, r0
   e5c28:	4629      	mov	r1, r5
   e5c2a:	463a      	mov	r2, r7
   e5c2c:	9802      	ldr	r0, [sp, #8]
   e5c2e:	f000 fc8b 	bl	e6548 <__lshift>
   e5c32:	1be4      	subs	r4, r4, r7
   e5c34:	4605      	mov	r5, r0
   e5c36:	f100 0a14 	add.w	sl, r0, #20
   e5c3a:	f04f 0900 	mov.w	r9, #0
   e5c3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5c42:	429c      	cmp	r4, r3
   e5c44:	dd08      	ble.n	e5c58 <__gethex+0x272>
   e5c46:	9802      	ldr	r0, [sp, #8]
   e5c48:	4629      	mov	r1, r5
   e5c4a:	f000 fab8 	bl	e61be <_Bfree>
   e5c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5c50:	2300      	movs	r3, #0
   e5c52:	6013      	str	r3, [r2, #0]
   e5c54:	20a3      	movs	r0, #163	; 0xa3
   e5c56:	e0e2      	b.n	e5e1e <__gethex+0x438>
   e5c58:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e5c5c:	4284      	cmp	r4, r0
   e5c5e:	da53      	bge.n	e5d08 <__gethex+0x322>
   e5c60:	1b04      	subs	r4, r0, r4
   e5c62:	42a6      	cmp	r6, r4
   e5c64:	dc2e      	bgt.n	e5cc4 <__gethex+0x2de>
   e5c66:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5c6a:	2b02      	cmp	r3, #2
   e5c6c:	d01a      	beq.n	e5ca4 <__gethex+0x2be>
   e5c6e:	2b03      	cmp	r3, #3
   e5c70:	d01c      	beq.n	e5cac <__gethex+0x2c6>
   e5c72:	2b01      	cmp	r3, #1
   e5c74:	d11d      	bne.n	e5cb2 <__gethex+0x2cc>
   e5c76:	42a6      	cmp	r6, r4
   e5c78:	d11b      	bne.n	e5cb2 <__gethex+0x2cc>
   e5c7a:	2e01      	cmp	r6, #1
   e5c7c:	dc0b      	bgt.n	e5c96 <__gethex+0x2b0>
   e5c7e:	9a06      	ldr	r2, [sp, #24]
   e5c80:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e5c84:	6013      	str	r3, [r2, #0]
   e5c86:	2301      	movs	r3, #1
   e5c88:	612b      	str	r3, [r5, #16]
   e5c8a:	f8ca 3000 	str.w	r3, [sl]
   e5c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e5c90:	2062      	movs	r0, #98	; 0x62
   e5c92:	601d      	str	r5, [r3, #0]
   e5c94:	e0c3      	b.n	e5e1e <__gethex+0x438>
   e5c96:	1e71      	subs	r1, r6, #1
   e5c98:	4628      	mov	r0, r5
   e5c9a:	f000 fe28 	bl	e68ee <__any_on>
   e5c9e:	2800      	cmp	r0, #0
   e5ca0:	d1ed      	bne.n	e5c7e <__gethex+0x298>
   e5ca2:	e006      	b.n	e5cb2 <__gethex+0x2cc>
   e5ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5ca6:	2b00      	cmp	r3, #0
   e5ca8:	d0e9      	beq.n	e5c7e <__gethex+0x298>
   e5caa:	e002      	b.n	e5cb2 <__gethex+0x2cc>
   e5cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5cae:	2b00      	cmp	r3, #0
   e5cb0:	d1e5      	bne.n	e5c7e <__gethex+0x298>
   e5cb2:	9802      	ldr	r0, [sp, #8]
   e5cb4:	4629      	mov	r1, r5
   e5cb6:	f000 fa82 	bl	e61be <_Bfree>
   e5cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e5cbc:	2300      	movs	r3, #0
   e5cbe:	6013      	str	r3, [r2, #0]
   e5cc0:	2050      	movs	r0, #80	; 0x50
   e5cc2:	e0ac      	b.n	e5e1e <__gethex+0x438>
   e5cc4:	1e67      	subs	r7, r4, #1
   e5cc6:	f1b9 0f00 	cmp.w	r9, #0
   e5cca:	d106      	bne.n	e5cda <__gethex+0x2f4>
   e5ccc:	b13f      	cbz	r7, e5cde <__gethex+0x2f8>
   e5cce:	4639      	mov	r1, r7
   e5cd0:	4628      	mov	r0, r5
   e5cd2:	f000 fe0c 	bl	e68ee <__any_on>
   e5cd6:	4681      	mov	r9, r0
   e5cd8:	e001      	b.n	e5cde <__gethex+0x2f8>
   e5cda:	f04f 0901 	mov.w	r9, #1
   e5cde:	117a      	asrs	r2, r7, #5
   e5ce0:	2301      	movs	r3, #1
   e5ce2:	f007 071f 	and.w	r7, r7, #31
   e5ce6:	fa03 f707 	lsl.w	r7, r3, r7
   e5cea:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e5cee:	4621      	mov	r1, r4
   e5cf0:	421f      	tst	r7, r3
   e5cf2:	4628      	mov	r0, r5
   e5cf4:	bf18      	it	ne
   e5cf6:	f049 0902 	orrne.w	r9, r9, #2
   e5cfa:	1b36      	subs	r6, r6, r4
   e5cfc:	f7ff fe28 	bl	e5950 <rshift>
   e5d00:	2702      	movs	r7, #2
   e5d02:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e5d06:	e000      	b.n	e5d0a <__gethex+0x324>
   e5d08:	2701      	movs	r7, #1
   e5d0a:	f1b9 0f00 	cmp.w	r9, #0
   e5d0e:	f000 8081 	beq.w	e5e14 <__gethex+0x42e>
   e5d12:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e5d16:	2b02      	cmp	r3, #2
   e5d18:	d00e      	beq.n	e5d38 <__gethex+0x352>
   e5d1a:	2b03      	cmp	r3, #3
   e5d1c:	d010      	beq.n	e5d40 <__gethex+0x35a>
   e5d1e:	2b01      	cmp	r3, #1
   e5d20:	d176      	bne.n	e5e10 <__gethex+0x42a>
   e5d22:	f019 0f02 	tst.w	r9, #2
   e5d26:	d073      	beq.n	e5e10 <__gethex+0x42a>
   e5d28:	f8da 0000 	ldr.w	r0, [sl]
   e5d2c:	ea49 0900 	orr.w	r9, r9, r0
   e5d30:	f019 0f01 	tst.w	r9, #1
   e5d34:	d107      	bne.n	e5d46 <__gethex+0x360>
   e5d36:	e06b      	b.n	e5e10 <__gethex+0x42a>
   e5d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5d3a:	f1c3 0301 	rsb	r3, r3, #1
   e5d3e:	9315      	str	r3, [sp, #84]	; 0x54
   e5d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e5d42:	2b00      	cmp	r3, #0
   e5d44:	d064      	beq.n	e5e10 <__gethex+0x42a>
   e5d46:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e5d4a:	f105 0314 	add.w	r3, r5, #20
   e5d4e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e5d52:	eb03 0109 	add.w	r1, r3, r9
   e5d56:	2000      	movs	r0, #0
   e5d58:	681a      	ldr	r2, [r3, #0]
   e5d5a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e5d5e:	d002      	beq.n	e5d66 <__gethex+0x380>
   e5d60:	3201      	adds	r2, #1
   e5d62:	601a      	str	r2, [r3, #0]
   e5d64:	e020      	b.n	e5da8 <__gethex+0x3c2>
   e5d66:	f843 0b04 	str.w	r0, [r3], #4
   e5d6a:	4299      	cmp	r1, r3
   e5d6c:	d8f4      	bhi.n	e5d58 <__gethex+0x372>
   e5d6e:	68ab      	ldr	r3, [r5, #8]
   e5d70:	459a      	cmp	sl, r3
   e5d72:	db12      	blt.n	e5d9a <__gethex+0x3b4>
   e5d74:	6869      	ldr	r1, [r5, #4]
   e5d76:	9802      	ldr	r0, [sp, #8]
   e5d78:	3101      	adds	r1, #1
   e5d7a:	f000 f9eb 	bl	e6154 <_Balloc>
   e5d7e:	692a      	ldr	r2, [r5, #16]
   e5d80:	3202      	adds	r2, #2
   e5d82:	f105 010c 	add.w	r1, r5, #12
   e5d86:	4683      	mov	fp, r0
   e5d88:	0092      	lsls	r2, r2, #2
   e5d8a:	300c      	adds	r0, #12
   e5d8c:	f7fd fc42 	bl	e3614 <memcpy>
   e5d90:	4629      	mov	r1, r5
   e5d92:	9802      	ldr	r0, [sp, #8]
   e5d94:	f000 fa13 	bl	e61be <_Bfree>
   e5d98:	465d      	mov	r5, fp
   e5d9a:	692b      	ldr	r3, [r5, #16]
   e5d9c:	1c5a      	adds	r2, r3, #1
   e5d9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e5da2:	612a      	str	r2, [r5, #16]
   e5da4:	2201      	movs	r2, #1
   e5da6:	615a      	str	r2, [r3, #20]
   e5da8:	2f02      	cmp	r7, #2
   e5daa:	f105 0214 	add.w	r2, r5, #20
   e5dae:	d111      	bne.n	e5dd4 <__gethex+0x3ee>
   e5db0:	f8d8 3000 	ldr.w	r3, [r8]
   e5db4:	3b01      	subs	r3, #1
   e5db6:	429e      	cmp	r6, r3
   e5db8:	d127      	bne.n	e5e0a <__gethex+0x424>
   e5dba:	1171      	asrs	r1, r6, #5
   e5dbc:	2301      	movs	r3, #1
   e5dbe:	f006 061f 	and.w	r6, r6, #31
   e5dc2:	fa03 f606 	lsl.w	r6, r3, r6
   e5dc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e5dca:	421e      	tst	r6, r3
   e5dcc:	bf0c      	ite	eq
   e5dce:	2702      	moveq	r7, #2
   e5dd0:	2701      	movne	r7, #1
   e5dd2:	e01a      	b.n	e5e0a <__gethex+0x424>
   e5dd4:	692b      	ldr	r3, [r5, #16]
   e5dd6:	459a      	cmp	sl, r3
   e5dd8:	da0a      	bge.n	e5df0 <__gethex+0x40a>
   e5dda:	2101      	movs	r1, #1
   e5ddc:	4628      	mov	r0, r5
   e5dde:	f7ff fdb7 	bl	e5950 <rshift>
   e5de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e5de6:	3401      	adds	r4, #1
   e5de8:	429c      	cmp	r4, r3
   e5dea:	f73f af2c 	bgt.w	e5c46 <__gethex+0x260>
   e5dee:	e00b      	b.n	e5e08 <__gethex+0x422>
   e5df0:	f016 061f 	ands.w	r6, r6, #31
   e5df4:	d008      	beq.n	e5e08 <__gethex+0x422>
   e5df6:	4491      	add	r9, r2
   e5df8:	f1c6 0620 	rsb	r6, r6, #32
   e5dfc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e5e00:	f000 fa6d 	bl	e62de <__hi0bits>
   e5e04:	42b0      	cmp	r0, r6
   e5e06:	dbe8      	blt.n	e5dda <__gethex+0x3f4>
   e5e08:	2701      	movs	r7, #1
   e5e0a:	f047 0720 	orr.w	r7, r7, #32
   e5e0e:	e001      	b.n	e5e14 <__gethex+0x42e>
   e5e10:	f047 0710 	orr.w	r7, r7, #16
   e5e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e5e16:	601d      	str	r5, [r3, #0]
   e5e18:	9b06      	ldr	r3, [sp, #24]
   e5e1a:	4638      	mov	r0, r7
   e5e1c:	601c      	str	r4, [r3, #0]
   e5e1e:	b00b      	add	sp, #44	; 0x2c
   e5e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e5e24 <L_shift>:
   e5e24:	f1c2 0208 	rsb	r2, r2, #8
   e5e28:	0092      	lsls	r2, r2, #2
   e5e2a:	b570      	push	{r4, r5, r6, lr}
   e5e2c:	f1c2 0620 	rsb	r6, r2, #32
   e5e30:	6843      	ldr	r3, [r0, #4]
   e5e32:	6805      	ldr	r5, [r0, #0]
   e5e34:	fa03 f406 	lsl.w	r4, r3, r6
   e5e38:	432c      	orrs	r4, r5
   e5e3a:	40d3      	lsrs	r3, r2
   e5e3c:	6004      	str	r4, [r0, #0]
   e5e3e:	f840 3f04 	str.w	r3, [r0, #4]!
   e5e42:	4288      	cmp	r0, r1
   e5e44:	d3f4      	bcc.n	e5e30 <L_shift+0xc>
   e5e46:	bd70      	pop	{r4, r5, r6, pc}

000e5e48 <__match>:
   e5e48:	b530      	push	{r4, r5, lr}
   e5e4a:	6803      	ldr	r3, [r0, #0]
   e5e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e5e50:	3301      	adds	r3, #1
   e5e52:	b14c      	cbz	r4, e5e68 <__match+0x20>
   e5e54:	781a      	ldrb	r2, [r3, #0]
   e5e56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e5e5a:	2d19      	cmp	r5, #25
   e5e5c:	bf98      	it	ls
   e5e5e:	3220      	addls	r2, #32
   e5e60:	42a2      	cmp	r2, r4
   e5e62:	d0f3      	beq.n	e5e4c <__match+0x4>
   e5e64:	2000      	movs	r0, #0
   e5e66:	bd30      	pop	{r4, r5, pc}
   e5e68:	6003      	str	r3, [r0, #0]
   e5e6a:	2001      	movs	r0, #1
   e5e6c:	bd30      	pop	{r4, r5, pc}

000e5e6e <__hexnan>:
   e5e6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5e72:	680b      	ldr	r3, [r1, #0]
   e5e74:	f8d0 b000 	ldr.w	fp, [r0]
   e5e78:	115e      	asrs	r6, r3, #5
   e5e7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e5e7e:	f013 031f 	ands.w	r3, r3, #31
   e5e82:	b085      	sub	sp, #20
   e5e84:	bf18      	it	ne
   e5e86:	3604      	addne	r6, #4
   e5e88:	1f35      	subs	r5, r6, #4
   e5e8a:	4617      	mov	r7, r2
   e5e8c:	2200      	movs	r2, #0
   e5e8e:	4682      	mov	sl, r0
   e5e90:	9301      	str	r3, [sp, #4]
   e5e92:	f846 2c04 	str.w	r2, [r6, #-4]
   e5e96:	46a8      	mov	r8, r5
   e5e98:	462c      	mov	r4, r5
   e5e9a:	9200      	str	r2, [sp, #0]
   e5e9c:	4691      	mov	r9, r2
   e5e9e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e5ea2:	2900      	cmp	r1, #0
   e5ea4:	d03c      	beq.n	e5f20 <__hexnan+0xb2>
   e5ea6:	4608      	mov	r0, r1
   e5ea8:	9203      	str	r2, [sp, #12]
   e5eaa:	9102      	str	r1, [sp, #8]
   e5eac:	f7ff fd86 	bl	e59bc <__hexdig_fun>
   e5eb0:	9a03      	ldr	r2, [sp, #12]
   e5eb2:	bb00      	cbnz	r0, e5ef6 <__hexnan+0x88>
   e5eb4:	9902      	ldr	r1, [sp, #8]
   e5eb6:	2920      	cmp	r1, #32
   e5eb8:	d816      	bhi.n	e5ee8 <__hexnan+0x7a>
   e5eba:	9b00      	ldr	r3, [sp, #0]
   e5ebc:	4599      	cmp	r9, r3
   e5ebe:	ddee      	ble.n	e5e9e <__hexnan+0x30>
   e5ec0:	4544      	cmp	r4, r8
   e5ec2:	d205      	bcs.n	e5ed0 <__hexnan+0x62>
   e5ec4:	2a07      	cmp	r2, #7
   e5ec6:	dc03      	bgt.n	e5ed0 <__hexnan+0x62>
   e5ec8:	4641      	mov	r1, r8
   e5eca:	4620      	mov	r0, r4
   e5ecc:	f7ff ffaa 	bl	e5e24 <L_shift>
   e5ed0:	42bc      	cmp	r4, r7
   e5ed2:	d923      	bls.n	e5f1c <__hexnan+0xae>
   e5ed4:	2300      	movs	r3, #0
   e5ed6:	f1a4 0804 	sub.w	r8, r4, #4
   e5eda:	f844 3c04 	str.w	r3, [r4, #-4]
   e5ede:	f8cd 9000 	str.w	r9, [sp]
   e5ee2:	4644      	mov	r4, r8
   e5ee4:	461a      	mov	r2, r3
   e5ee6:	e7da      	b.n	e5e9e <__hexnan+0x30>
   e5ee8:	2929      	cmp	r1, #41	; 0x29
   e5eea:	d148      	bne.n	e5f7e <__hexnan+0x110>
   e5eec:	f10b 0301 	add.w	r3, fp, #1
   e5ef0:	f8ca 3000 	str.w	r3, [sl]
   e5ef4:	e014      	b.n	e5f20 <__hexnan+0xb2>
   e5ef6:	3201      	adds	r2, #1
   e5ef8:	2a08      	cmp	r2, #8
   e5efa:	f109 0901 	add.w	r9, r9, #1
   e5efe:	dd06      	ble.n	e5f0e <__hexnan+0xa0>
   e5f00:	42bc      	cmp	r4, r7
   e5f02:	d9cc      	bls.n	e5e9e <__hexnan+0x30>
   e5f04:	2300      	movs	r3, #0
   e5f06:	f844 3c04 	str.w	r3, [r4, #-4]
   e5f0a:	2201      	movs	r2, #1
   e5f0c:	3c04      	subs	r4, #4
   e5f0e:	6821      	ldr	r1, [r4, #0]
   e5f10:	f000 000f 	and.w	r0, r0, #15
   e5f14:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e5f18:	6020      	str	r0, [r4, #0]
   e5f1a:	e7c0      	b.n	e5e9e <__hexnan+0x30>
   e5f1c:	2208      	movs	r2, #8
   e5f1e:	e7be      	b.n	e5e9e <__hexnan+0x30>
   e5f20:	f1b9 0f00 	cmp.w	r9, #0
   e5f24:	d02b      	beq.n	e5f7e <__hexnan+0x110>
   e5f26:	4544      	cmp	r4, r8
   e5f28:	d205      	bcs.n	e5f36 <__hexnan+0xc8>
   e5f2a:	2a07      	cmp	r2, #7
   e5f2c:	dc03      	bgt.n	e5f36 <__hexnan+0xc8>
   e5f2e:	4641      	mov	r1, r8
   e5f30:	4620      	mov	r0, r4
   e5f32:	f7ff ff77 	bl	e5e24 <L_shift>
   e5f36:	42bc      	cmp	r4, r7
   e5f38:	d90c      	bls.n	e5f54 <__hexnan+0xe6>
   e5f3a:	463b      	mov	r3, r7
   e5f3c:	f854 2b04 	ldr.w	r2, [r4], #4
   e5f40:	f843 2b04 	str.w	r2, [r3], #4
   e5f44:	42a5      	cmp	r5, r4
   e5f46:	d2f9      	bcs.n	e5f3c <__hexnan+0xce>
   e5f48:	2200      	movs	r2, #0
   e5f4a:	f843 2b04 	str.w	r2, [r3], #4
   e5f4e:	429d      	cmp	r5, r3
   e5f50:	d2fb      	bcs.n	e5f4a <__hexnan+0xdc>
   e5f52:	e00b      	b.n	e5f6c <__hexnan+0xfe>
   e5f54:	9b01      	ldr	r3, [sp, #4]
   e5f56:	b14b      	cbz	r3, e5f6c <__hexnan+0xfe>
   e5f58:	f1c3 0220 	rsb	r2, r3, #32
   e5f5c:	f04f 33ff 	mov.w	r3, #4294967295
   e5f60:	40d3      	lsrs	r3, r2
   e5f62:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e5f66:	4013      	ands	r3, r2
   e5f68:	f846 3c04 	str.w	r3, [r6, #-4]
   e5f6c:	682b      	ldr	r3, [r5, #0]
   e5f6e:	b943      	cbnz	r3, e5f82 <__hexnan+0x114>
   e5f70:	42bd      	cmp	r5, r7
   e5f72:	d102      	bne.n	e5f7a <__hexnan+0x10c>
   e5f74:	2301      	movs	r3, #1
   e5f76:	602b      	str	r3, [r5, #0]
   e5f78:	e003      	b.n	e5f82 <__hexnan+0x114>
   e5f7a:	3d04      	subs	r5, #4
   e5f7c:	e7f6      	b.n	e5f6c <__hexnan+0xfe>
   e5f7e:	2004      	movs	r0, #4
   e5f80:	e000      	b.n	e5f84 <__hexnan+0x116>
   e5f82:	2005      	movs	r0, #5
   e5f84:	b005      	add	sp, #20
   e5f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e5f8c <_findenv_r>:
   e5f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5f90:	4607      	mov	r7, r0
   e5f92:	468b      	mov	fp, r1
   e5f94:	4690      	mov	r8, r2
   e5f96:	f000 fcda 	bl	e694e <__env_lock>
   e5f9a:	4b19      	ldr	r3, [pc, #100]	; (e6000 <_findenv_r+0x74>)
   e5f9c:	681d      	ldr	r5, [r3, #0]
   e5f9e:	469a      	mov	sl, r3
   e5fa0:	b13d      	cbz	r5, e5fb2 <_findenv_r+0x26>
   e5fa2:	465c      	mov	r4, fp
   e5fa4:	4623      	mov	r3, r4
   e5fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
   e5faa:	b142      	cbz	r2, e5fbe <_findenv_r+0x32>
   e5fac:	2a3d      	cmp	r2, #61	; 0x3d
   e5fae:	461c      	mov	r4, r3
   e5fb0:	d1f8      	bne.n	e5fa4 <_findenv_r+0x18>
   e5fb2:	4638      	mov	r0, r7
   e5fb4:	f000 fccc 	bl	e6950 <__env_unlock>
   e5fb8:	2000      	movs	r0, #0
   e5fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5fbe:	ebcb 0404 	rsb	r4, fp, r4
   e5fc2:	46a9      	mov	r9, r5
   e5fc4:	f859 0b04 	ldr.w	r0, [r9], #4
   e5fc8:	2800      	cmp	r0, #0
   e5fca:	d0f2      	beq.n	e5fb2 <_findenv_r+0x26>
   e5fcc:	4622      	mov	r2, r4
   e5fce:	4659      	mov	r1, fp
   e5fd0:	f7fe faf4 	bl	e45bc <strncmp>
   e5fd4:	b988      	cbnz	r0, e5ffa <_findenv_r+0x6e>
   e5fd6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e5fda:	191e      	adds	r6, r3, r4
   e5fdc:	5d1b      	ldrb	r3, [r3, r4]
   e5fde:	2b3d      	cmp	r3, #61	; 0x3d
   e5fe0:	d10b      	bne.n	e5ffa <_findenv_r+0x6e>
   e5fe2:	f8da 3000 	ldr.w	r3, [sl]
   e5fe6:	1aed      	subs	r5, r5, r3
   e5fe8:	10ad      	asrs	r5, r5, #2
   e5fea:	4638      	mov	r0, r7
   e5fec:	f8c8 5000 	str.w	r5, [r8]
   e5ff0:	f000 fcae 	bl	e6950 <__env_unlock>
   e5ff4:	1c70      	adds	r0, r6, #1
   e5ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5ffa:	464d      	mov	r5, r9
   e5ffc:	e7e1      	b.n	e5fc2 <_findenv_r+0x36>
   e5ffe:	bf00      	nop
   e6000:	2003d668 	.word	0x2003d668

000e6004 <_getenv_r>:
   e6004:	b507      	push	{r0, r1, r2, lr}
   e6006:	aa01      	add	r2, sp, #4
   e6008:	f7ff ffc0 	bl	e5f8c <_findenv_r>
   e600c:	b003      	add	sp, #12
   e600e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e6014 <__gettzinfo>:
   e6014:	4800      	ldr	r0, [pc, #0]	; (e6018 <__gettzinfo+0x4>)
   e6016:	4770      	bx	lr
   e6018:	2003d628 	.word	0x2003d628

000e601c <gmtime_r>:
   e601c:	6802      	ldr	r2, [r0, #0]
   e601e:	4b47      	ldr	r3, [pc, #284]	; (e613c <gmtime_r+0x120>)
   e6020:	b5f0      	push	{r4, r5, r6, r7, lr}
   e6022:	fb92 f4f3 	sdiv	r4, r2, r3
   e6026:	fb03 2214 	mls	r2, r3, r4, r2
   e602a:	2a00      	cmp	r2, #0
   e602c:	bfbc      	itt	lt
   e602e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e6032:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e6036:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e603a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e603e:	fb92 f3f0 	sdiv	r3, r2, r0
   e6042:	fb00 2213 	mls	r2, r0, r3, r2
   e6046:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e604a:	bfac      	ite	ge
   e604c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e6050:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e6054:	608b      	str	r3, [r1, #8]
   e6056:	fb92 f3f0 	sdiv	r3, r2, r0
   e605a:	fb00 2213 	mls	r2, r0, r3, r2
   e605e:	604b      	str	r3, [r1, #4]
   e6060:	600a      	str	r2, [r1, #0]
   e6062:	2307      	movs	r3, #7
   e6064:	1ce2      	adds	r2, r4, #3
   e6066:	fb92 f3f3 	sdiv	r3, r2, r3
   e606a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e606e:	1ad3      	subs	r3, r2, r3
   e6070:	618b      	str	r3, [r1, #24]
   e6072:	4b33      	ldr	r3, [pc, #204]	; (e6140 <gmtime_r+0x124>)
   e6074:	4d33      	ldr	r5, [pc, #204]	; (e6144 <gmtime_r+0x128>)
   e6076:	fb94 f5f5 	sdiv	r5, r4, r5
   e607a:	fb03 4405 	mla	r4, r3, r5, r4
   e607e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e6082:	fbb4 f2f2 	udiv	r2, r4, r2
   e6086:	4422      	add	r2, r4
   e6088:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e608c:	fbb4 f3f7 	udiv	r3, r4, r7
   e6090:	1ad2      	subs	r2, r2, r3
   e6092:	482d      	ldr	r0, [pc, #180]	; (e6148 <gmtime_r+0x12c>)
   e6094:	fbb4 f0f0 	udiv	r0, r4, r0
   e6098:	f648 6694 	movw	r6, #36500	; 0x8e94
   e609c:	1a13      	subs	r3, r2, r0
   e609e:	fbb3 f6f6 	udiv	r6, r3, r6
   e60a2:	4434      	add	r4, r6
   e60a4:	f240 126d 	movw	r2, #365	; 0x16d
   e60a8:	fbb3 f0f2 	udiv	r0, r3, r2
   e60ac:	fbb3 f3f7 	udiv	r3, r3, r7
   e60b0:	1ae3      	subs	r3, r4, r3
   e60b2:	fb02 3310 	mls	r3, r2, r0, r3
   e60b6:	2499      	movs	r4, #153	; 0x99
   e60b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e60bc:	3202      	adds	r2, #2
   e60be:	fbb2 f2f4 	udiv	r2, r2, r4
   e60c2:	2a0a      	cmp	r2, #10
   e60c4:	fb04 f402 	mul.w	r4, r4, r2
   e60c8:	f104 0602 	add.w	r6, r4, #2
   e60cc:	f04f 0405 	mov.w	r4, #5
   e60d0:	fbb6 f4f4 	udiv	r4, r6, r4
   e60d4:	bf34      	ite	cc
   e60d6:	2602      	movcc	r6, #2
   e60d8:	f06f 0609 	mvncs.w	r6, #9
   e60dc:	4416      	add	r6, r2
   e60de:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e60e2:	fb02 0505 	mla	r5, r2, r5, r0
   e60e6:	1c5f      	adds	r7, r3, #1
   e60e8:	2e01      	cmp	r6, #1
   e60ea:	bf98      	it	ls
   e60ec:	3501      	addls	r5, #1
   e60ee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e60f2:	eba7 0704 	sub.w	r7, r7, r4
   e60f6:	d302      	bcc.n	e60fe <gmtime_r+0xe2>
   e60f8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e60fc:	e014      	b.n	e6128 <gmtime_r+0x10c>
   e60fe:	0782      	lsls	r2, r0, #30
   e6100:	d105      	bne.n	e610e <gmtime_r+0xf2>
   e6102:	2464      	movs	r4, #100	; 0x64
   e6104:	fbb0 f2f4 	udiv	r2, r0, r4
   e6108:	fb04 0212 	mls	r2, r4, r2, r0
   e610c:	b94a      	cbnz	r2, e6122 <gmtime_r+0x106>
   e610e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6112:	fbb0 f4f2 	udiv	r4, r0, r2
   e6116:	fb02 0014 	mls	r0, r2, r4, r0
   e611a:	fab0 f280 	clz	r2, r0
   e611e:	0952      	lsrs	r2, r2, #5
   e6120:	e000      	b.n	e6124 <gmtime_r+0x108>
   e6122:	2201      	movs	r2, #1
   e6124:	333b      	adds	r3, #59	; 0x3b
   e6126:	441a      	add	r2, r3
   e6128:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e612c:	2300      	movs	r3, #0
   e612e:	61ca      	str	r2, [r1, #28]
   e6130:	614d      	str	r5, [r1, #20]
   e6132:	610e      	str	r6, [r1, #16]
   e6134:	60cf      	str	r7, [r1, #12]
   e6136:	620b      	str	r3, [r1, #32]
   e6138:	4608      	mov	r0, r1
   e613a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e613c:	00015180 	.word	0x00015180
   e6140:	fffdc54f 	.word	0xfffdc54f
   e6144:	00023ab1 	.word	0x00023ab1
   e6148:	00023ab0 	.word	0x00023ab0

000e614c <labs>:
   e614c:	2800      	cmp	r0, #0
   e614e:	bfb8      	it	lt
   e6150:	4240      	neglt	r0, r0
   e6152:	4770      	bx	lr

000e6154 <_Balloc>:
   e6154:	b570      	push	{r4, r5, r6, lr}
   e6156:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e6158:	4604      	mov	r4, r0
   e615a:	460e      	mov	r6, r1
   e615c:	b93d      	cbnz	r5, e616e <_Balloc+0x1a>
   e615e:	2010      	movs	r0, #16
   e6160:	f7f4 fc90 	bl	daa84 <malloc>
   e6164:	6260      	str	r0, [r4, #36]	; 0x24
   e6166:	6045      	str	r5, [r0, #4]
   e6168:	6085      	str	r5, [r0, #8]
   e616a:	6005      	str	r5, [r0, #0]
   e616c:	60c5      	str	r5, [r0, #12]
   e616e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e6170:	68eb      	ldr	r3, [r5, #12]
   e6172:	b143      	cbz	r3, e6186 <_Balloc+0x32>
   e6174:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6176:	68db      	ldr	r3, [r3, #12]
   e6178:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e617c:	b178      	cbz	r0, e619e <_Balloc+0x4a>
   e617e:	6802      	ldr	r2, [r0, #0]
   e6180:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e6184:	e017      	b.n	e61b6 <_Balloc+0x62>
   e6186:	2221      	movs	r2, #33	; 0x21
   e6188:	2104      	movs	r1, #4
   e618a:	4620      	mov	r0, r4
   e618c:	f000 fbd1 	bl	e6932 <_calloc_r>
   e6190:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6192:	60e8      	str	r0, [r5, #12]
   e6194:	68db      	ldr	r3, [r3, #12]
   e6196:	2b00      	cmp	r3, #0
   e6198:	d1ec      	bne.n	e6174 <_Balloc+0x20>
   e619a:	2000      	movs	r0, #0
   e619c:	bd70      	pop	{r4, r5, r6, pc}
   e619e:	2101      	movs	r1, #1
   e61a0:	fa01 f506 	lsl.w	r5, r1, r6
   e61a4:	1d6a      	adds	r2, r5, #5
   e61a6:	0092      	lsls	r2, r2, #2
   e61a8:	4620      	mov	r0, r4
   e61aa:	f000 fbc2 	bl	e6932 <_calloc_r>
   e61ae:	2800      	cmp	r0, #0
   e61b0:	d0f3      	beq.n	e619a <_Balloc+0x46>
   e61b2:	6046      	str	r6, [r0, #4]
   e61b4:	6085      	str	r5, [r0, #8]
   e61b6:	2300      	movs	r3, #0
   e61b8:	6103      	str	r3, [r0, #16]
   e61ba:	60c3      	str	r3, [r0, #12]
   e61bc:	bd70      	pop	{r4, r5, r6, pc}

000e61be <_Bfree>:
   e61be:	b570      	push	{r4, r5, r6, lr}
   e61c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e61c2:	4606      	mov	r6, r0
   e61c4:	460d      	mov	r5, r1
   e61c6:	b93c      	cbnz	r4, e61d8 <_Bfree+0x1a>
   e61c8:	2010      	movs	r0, #16
   e61ca:	f7f4 fc5b 	bl	daa84 <malloc>
   e61ce:	6270      	str	r0, [r6, #36]	; 0x24
   e61d0:	6044      	str	r4, [r0, #4]
   e61d2:	6084      	str	r4, [r0, #8]
   e61d4:	6004      	str	r4, [r0, #0]
   e61d6:	60c4      	str	r4, [r0, #12]
   e61d8:	b13d      	cbz	r5, e61ea <_Bfree+0x2c>
   e61da:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e61dc:	686a      	ldr	r2, [r5, #4]
   e61de:	68db      	ldr	r3, [r3, #12]
   e61e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e61e4:	6029      	str	r1, [r5, #0]
   e61e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e61ea:	bd70      	pop	{r4, r5, r6, pc}

000e61ec <__multadd>:
   e61ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e61f0:	690d      	ldr	r5, [r1, #16]
   e61f2:	461f      	mov	r7, r3
   e61f4:	4606      	mov	r6, r0
   e61f6:	460c      	mov	r4, r1
   e61f8:	f101 0e14 	add.w	lr, r1, #20
   e61fc:	2300      	movs	r3, #0
   e61fe:	f8de 0000 	ldr.w	r0, [lr]
   e6202:	b281      	uxth	r1, r0
   e6204:	fb02 7101 	mla	r1, r2, r1, r7
   e6208:	0c0f      	lsrs	r7, r1, #16
   e620a:	0c00      	lsrs	r0, r0, #16
   e620c:	fb02 7000 	mla	r0, r2, r0, r7
   e6210:	b289      	uxth	r1, r1
   e6212:	3301      	adds	r3, #1
   e6214:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e6218:	429d      	cmp	r5, r3
   e621a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e621e:	f84e 1b04 	str.w	r1, [lr], #4
   e6222:	dcec      	bgt.n	e61fe <__multadd+0x12>
   e6224:	b1d7      	cbz	r7, e625c <__multadd+0x70>
   e6226:	68a3      	ldr	r3, [r4, #8]
   e6228:	429d      	cmp	r5, r3
   e622a:	db12      	blt.n	e6252 <__multadd+0x66>
   e622c:	6861      	ldr	r1, [r4, #4]
   e622e:	4630      	mov	r0, r6
   e6230:	3101      	adds	r1, #1
   e6232:	f7ff ff8f 	bl	e6154 <_Balloc>
   e6236:	6922      	ldr	r2, [r4, #16]
   e6238:	3202      	adds	r2, #2
   e623a:	f104 010c 	add.w	r1, r4, #12
   e623e:	4680      	mov	r8, r0
   e6240:	0092      	lsls	r2, r2, #2
   e6242:	300c      	adds	r0, #12
   e6244:	f7fd f9e6 	bl	e3614 <memcpy>
   e6248:	4621      	mov	r1, r4
   e624a:	4630      	mov	r0, r6
   e624c:	f7ff ffb7 	bl	e61be <_Bfree>
   e6250:	4644      	mov	r4, r8
   e6252:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e6256:	3501      	adds	r5, #1
   e6258:	615f      	str	r7, [r3, #20]
   e625a:	6125      	str	r5, [r4, #16]
   e625c:	4620      	mov	r0, r4
   e625e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e6262 <__s2b>:
   e6262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6266:	460c      	mov	r4, r1
   e6268:	4615      	mov	r5, r2
   e626a:	461f      	mov	r7, r3
   e626c:	2209      	movs	r2, #9
   e626e:	3308      	adds	r3, #8
   e6270:	4606      	mov	r6, r0
   e6272:	fb93 f3f2 	sdiv	r3, r3, r2
   e6276:	2100      	movs	r1, #0
   e6278:	2201      	movs	r2, #1
   e627a:	429a      	cmp	r2, r3
   e627c:	da02      	bge.n	e6284 <__s2b+0x22>
   e627e:	0052      	lsls	r2, r2, #1
   e6280:	3101      	adds	r1, #1
   e6282:	e7fa      	b.n	e627a <__s2b+0x18>
   e6284:	4630      	mov	r0, r6
   e6286:	f7ff ff65 	bl	e6154 <_Balloc>
   e628a:	9b08      	ldr	r3, [sp, #32]
   e628c:	6143      	str	r3, [r0, #20]
   e628e:	2d09      	cmp	r5, #9
   e6290:	f04f 0301 	mov.w	r3, #1
   e6294:	6103      	str	r3, [r0, #16]
   e6296:	dd11      	ble.n	e62bc <__s2b+0x5a>
   e6298:	f104 0809 	add.w	r8, r4, #9
   e629c:	46c1      	mov	r9, r8
   e629e:	442c      	add	r4, r5
   e62a0:	f819 3b01 	ldrb.w	r3, [r9], #1
   e62a4:	4601      	mov	r1, r0
   e62a6:	3b30      	subs	r3, #48	; 0x30
   e62a8:	220a      	movs	r2, #10
   e62aa:	4630      	mov	r0, r6
   e62ac:	f7ff ff9e 	bl	e61ec <__multadd>
   e62b0:	45a1      	cmp	r9, r4
   e62b2:	d1f5      	bne.n	e62a0 <__s2b+0x3e>
   e62b4:	eb08 0405 	add.w	r4, r8, r5
   e62b8:	3c08      	subs	r4, #8
   e62ba:	e001      	b.n	e62c0 <__s2b+0x5e>
   e62bc:	340a      	adds	r4, #10
   e62be:	2509      	movs	r5, #9
   e62c0:	1b2d      	subs	r5, r5, r4
   e62c2:	1963      	adds	r3, r4, r5
   e62c4:	429f      	cmp	r7, r3
   e62c6:	dd08      	ble.n	e62da <__s2b+0x78>
   e62c8:	f814 3b01 	ldrb.w	r3, [r4], #1
   e62cc:	4601      	mov	r1, r0
   e62ce:	3b30      	subs	r3, #48	; 0x30
   e62d0:	220a      	movs	r2, #10
   e62d2:	4630      	mov	r0, r6
   e62d4:	f7ff ff8a 	bl	e61ec <__multadd>
   e62d8:	e7f3      	b.n	e62c2 <__s2b+0x60>
   e62da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e62de <__hi0bits>:
   e62de:	0c03      	lsrs	r3, r0, #16
   e62e0:	041b      	lsls	r3, r3, #16
   e62e2:	b913      	cbnz	r3, e62ea <__hi0bits+0xc>
   e62e4:	0400      	lsls	r0, r0, #16
   e62e6:	2310      	movs	r3, #16
   e62e8:	e000      	b.n	e62ec <__hi0bits+0xe>
   e62ea:	2300      	movs	r3, #0
   e62ec:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e62f0:	bf04      	itt	eq
   e62f2:	0200      	lsleq	r0, r0, #8
   e62f4:	3308      	addeq	r3, #8
   e62f6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e62fa:	bf04      	itt	eq
   e62fc:	0100      	lsleq	r0, r0, #4
   e62fe:	3304      	addeq	r3, #4
   e6300:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e6304:	bf04      	itt	eq
   e6306:	0080      	lsleq	r0, r0, #2
   e6308:	3302      	addeq	r3, #2
   e630a:	2800      	cmp	r0, #0
   e630c:	db03      	blt.n	e6316 <__hi0bits+0x38>
   e630e:	0042      	lsls	r2, r0, #1
   e6310:	d503      	bpl.n	e631a <__hi0bits+0x3c>
   e6312:	1c58      	adds	r0, r3, #1
   e6314:	4770      	bx	lr
   e6316:	4618      	mov	r0, r3
   e6318:	4770      	bx	lr
   e631a:	2020      	movs	r0, #32
   e631c:	4770      	bx	lr

000e631e <__lo0bits>:
   e631e:	6803      	ldr	r3, [r0, #0]
   e6320:	f013 0207 	ands.w	r2, r3, #7
   e6324:	d00b      	beq.n	e633e <__lo0bits+0x20>
   e6326:	07d9      	lsls	r1, r3, #31
   e6328:	d422      	bmi.n	e6370 <__lo0bits+0x52>
   e632a:	079a      	lsls	r2, r3, #30
   e632c:	bf4b      	itete	mi
   e632e:	085b      	lsrmi	r3, r3, #1
   e6330:	089b      	lsrpl	r3, r3, #2
   e6332:	6003      	strmi	r3, [r0, #0]
   e6334:	6003      	strpl	r3, [r0, #0]
   e6336:	bf4c      	ite	mi
   e6338:	2001      	movmi	r0, #1
   e633a:	2002      	movpl	r0, #2
   e633c:	4770      	bx	lr
   e633e:	b299      	uxth	r1, r3
   e6340:	b909      	cbnz	r1, e6346 <__lo0bits+0x28>
   e6342:	0c1b      	lsrs	r3, r3, #16
   e6344:	2210      	movs	r2, #16
   e6346:	f013 0fff 	tst.w	r3, #255	; 0xff
   e634a:	bf04      	itt	eq
   e634c:	0a1b      	lsreq	r3, r3, #8
   e634e:	3208      	addeq	r2, #8
   e6350:	0719      	lsls	r1, r3, #28
   e6352:	bf04      	itt	eq
   e6354:	091b      	lsreq	r3, r3, #4
   e6356:	3204      	addeq	r2, #4
   e6358:	0799      	lsls	r1, r3, #30
   e635a:	bf04      	itt	eq
   e635c:	089b      	lsreq	r3, r3, #2
   e635e:	3202      	addeq	r2, #2
   e6360:	07d9      	lsls	r1, r3, #31
   e6362:	d402      	bmi.n	e636a <__lo0bits+0x4c>
   e6364:	085b      	lsrs	r3, r3, #1
   e6366:	d005      	beq.n	e6374 <__lo0bits+0x56>
   e6368:	3201      	adds	r2, #1
   e636a:	6003      	str	r3, [r0, #0]
   e636c:	4610      	mov	r0, r2
   e636e:	4770      	bx	lr
   e6370:	2000      	movs	r0, #0
   e6372:	4770      	bx	lr
   e6374:	2020      	movs	r0, #32
   e6376:	4770      	bx	lr

000e6378 <__i2b>:
   e6378:	b510      	push	{r4, lr}
   e637a:	460c      	mov	r4, r1
   e637c:	2101      	movs	r1, #1
   e637e:	f7ff fee9 	bl	e6154 <_Balloc>
   e6382:	2201      	movs	r2, #1
   e6384:	6144      	str	r4, [r0, #20]
   e6386:	6102      	str	r2, [r0, #16]
   e6388:	bd10      	pop	{r4, pc}

000e638a <__multiply>:
   e638a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e638e:	4614      	mov	r4, r2
   e6390:	690a      	ldr	r2, [r1, #16]
   e6392:	6923      	ldr	r3, [r4, #16]
   e6394:	429a      	cmp	r2, r3
   e6396:	bfb8      	it	lt
   e6398:	460b      	movlt	r3, r1
   e639a:	4688      	mov	r8, r1
   e639c:	bfbc      	itt	lt
   e639e:	46a0      	movlt	r8, r4
   e63a0:	461c      	movlt	r4, r3
   e63a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e63a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e63aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e63ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e63b2:	eb07 0609 	add.w	r6, r7, r9
   e63b6:	429e      	cmp	r6, r3
   e63b8:	bfc8      	it	gt
   e63ba:	3101      	addgt	r1, #1
   e63bc:	f7ff feca 	bl	e6154 <_Balloc>
   e63c0:	f100 0514 	add.w	r5, r0, #20
   e63c4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e63c8:	462b      	mov	r3, r5
   e63ca:	2200      	movs	r2, #0
   e63cc:	4563      	cmp	r3, ip
   e63ce:	d202      	bcs.n	e63d6 <__multiply+0x4c>
   e63d0:	f843 2b04 	str.w	r2, [r3], #4
   e63d4:	e7fa      	b.n	e63cc <__multiply+0x42>
   e63d6:	f104 0214 	add.w	r2, r4, #20
   e63da:	f108 0114 	add.w	r1, r8, #20
   e63de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e63e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e63e6:	9300      	str	r3, [sp, #0]
   e63e8:	9b00      	ldr	r3, [sp, #0]
   e63ea:	9201      	str	r2, [sp, #4]
   e63ec:	4293      	cmp	r3, r2
   e63ee:	d957      	bls.n	e64a0 <__multiply+0x116>
   e63f0:	f8b2 b000 	ldrh.w	fp, [r2]
   e63f4:	f1bb 0f00 	cmp.w	fp, #0
   e63f8:	d023      	beq.n	e6442 <__multiply+0xb8>
   e63fa:	4689      	mov	r9, r1
   e63fc:	46ae      	mov	lr, r5
   e63fe:	f04f 0800 	mov.w	r8, #0
   e6402:	f859 4b04 	ldr.w	r4, [r9], #4
   e6406:	f8be a000 	ldrh.w	sl, [lr]
   e640a:	b2a3      	uxth	r3, r4
   e640c:	fb0b a303 	mla	r3, fp, r3, sl
   e6410:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e6414:	f8de 4000 	ldr.w	r4, [lr]
   e6418:	4443      	add	r3, r8
   e641a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e641e:	fb0b 840a 	mla	r4, fp, sl, r8
   e6422:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e6426:	46f2      	mov	sl, lr
   e6428:	b29b      	uxth	r3, r3
   e642a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e642e:	454f      	cmp	r7, r9
   e6430:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e6434:	f84a 3b04 	str.w	r3, [sl], #4
   e6438:	d901      	bls.n	e643e <__multiply+0xb4>
   e643a:	46d6      	mov	lr, sl
   e643c:	e7e1      	b.n	e6402 <__multiply+0x78>
   e643e:	f8ce 8004 	str.w	r8, [lr, #4]
   e6442:	9b01      	ldr	r3, [sp, #4]
   e6444:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e6448:	3204      	adds	r2, #4
   e644a:	f1ba 0f00 	cmp.w	sl, #0
   e644e:	d021      	beq.n	e6494 <__multiply+0x10a>
   e6450:	682b      	ldr	r3, [r5, #0]
   e6452:	462c      	mov	r4, r5
   e6454:	4689      	mov	r9, r1
   e6456:	f04f 0800 	mov.w	r8, #0
   e645a:	f8b9 e000 	ldrh.w	lr, [r9]
   e645e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e6462:	fb0a be0e 	mla	lr, sl, lr, fp
   e6466:	44f0      	add	r8, lr
   e6468:	46a3      	mov	fp, r4
   e646a:	b29b      	uxth	r3, r3
   e646c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e6470:	f84b 3b04 	str.w	r3, [fp], #4
   e6474:	f859 3b04 	ldr.w	r3, [r9], #4
   e6478:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e647c:	0c1b      	lsrs	r3, r3, #16
   e647e:	fb0a e303 	mla	r3, sl, r3, lr
   e6482:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e6486:	454f      	cmp	r7, r9
   e6488:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e648c:	d901      	bls.n	e6492 <__multiply+0x108>
   e648e:	465c      	mov	r4, fp
   e6490:	e7e3      	b.n	e645a <__multiply+0xd0>
   e6492:	6063      	str	r3, [r4, #4]
   e6494:	3504      	adds	r5, #4
   e6496:	e7a7      	b.n	e63e8 <__multiply+0x5e>
   e6498:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e649c:	b913      	cbnz	r3, e64a4 <__multiply+0x11a>
   e649e:	3e01      	subs	r6, #1
   e64a0:	2e00      	cmp	r6, #0
   e64a2:	dcf9      	bgt.n	e6498 <__multiply+0x10e>
   e64a4:	6106      	str	r6, [r0, #16]
   e64a6:	b003      	add	sp, #12
   e64a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e64ac <__pow5mult>:
   e64ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e64b0:	4615      	mov	r5, r2
   e64b2:	f012 0203 	ands.w	r2, r2, #3
   e64b6:	4606      	mov	r6, r0
   e64b8:	460f      	mov	r7, r1
   e64ba:	d007      	beq.n	e64cc <__pow5mult+0x20>
   e64bc:	3a01      	subs	r2, #1
   e64be:	4c21      	ldr	r4, [pc, #132]	; (e6544 <__pow5mult+0x98>)
   e64c0:	2300      	movs	r3, #0
   e64c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e64c6:	f7ff fe91 	bl	e61ec <__multadd>
   e64ca:	4607      	mov	r7, r0
   e64cc:	10ad      	asrs	r5, r5, #2
   e64ce:	d036      	beq.n	e653e <__pow5mult+0x92>
   e64d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e64d2:	b93c      	cbnz	r4, e64e4 <__pow5mult+0x38>
   e64d4:	2010      	movs	r0, #16
   e64d6:	f7f4 fad5 	bl	daa84 <malloc>
   e64da:	6270      	str	r0, [r6, #36]	; 0x24
   e64dc:	6044      	str	r4, [r0, #4]
   e64de:	6084      	str	r4, [r0, #8]
   e64e0:	6004      	str	r4, [r0, #0]
   e64e2:	60c4      	str	r4, [r0, #12]
   e64e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e64e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e64ec:	b94c      	cbnz	r4, e6502 <__pow5mult+0x56>
   e64ee:	f240 2171 	movw	r1, #625	; 0x271
   e64f2:	4630      	mov	r0, r6
   e64f4:	f7ff ff40 	bl	e6378 <__i2b>
   e64f8:	2300      	movs	r3, #0
   e64fa:	f8c8 0008 	str.w	r0, [r8, #8]
   e64fe:	4604      	mov	r4, r0
   e6500:	6003      	str	r3, [r0, #0]
   e6502:	f04f 0800 	mov.w	r8, #0
   e6506:	07eb      	lsls	r3, r5, #31
   e6508:	d50a      	bpl.n	e6520 <__pow5mult+0x74>
   e650a:	4639      	mov	r1, r7
   e650c:	4622      	mov	r2, r4
   e650e:	4630      	mov	r0, r6
   e6510:	f7ff ff3b 	bl	e638a <__multiply>
   e6514:	4639      	mov	r1, r7
   e6516:	4681      	mov	r9, r0
   e6518:	4630      	mov	r0, r6
   e651a:	f7ff fe50 	bl	e61be <_Bfree>
   e651e:	464f      	mov	r7, r9
   e6520:	106d      	asrs	r5, r5, #1
   e6522:	d00c      	beq.n	e653e <__pow5mult+0x92>
   e6524:	6820      	ldr	r0, [r4, #0]
   e6526:	b108      	cbz	r0, e652c <__pow5mult+0x80>
   e6528:	4604      	mov	r4, r0
   e652a:	e7ec      	b.n	e6506 <__pow5mult+0x5a>
   e652c:	4622      	mov	r2, r4
   e652e:	4621      	mov	r1, r4
   e6530:	4630      	mov	r0, r6
   e6532:	f7ff ff2a 	bl	e638a <__multiply>
   e6536:	6020      	str	r0, [r4, #0]
   e6538:	f8c0 8000 	str.w	r8, [r0]
   e653c:	e7f4      	b.n	e6528 <__pow5mult+0x7c>
   e653e:	4638      	mov	r0, r7
   e6540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e6544:	000e8a10 	.word	0x000e8a10

000e6548 <__lshift>:
   e6548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e654c:	460c      	mov	r4, r1
   e654e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e6552:	6926      	ldr	r6, [r4, #16]
   e6554:	6849      	ldr	r1, [r1, #4]
   e6556:	68a3      	ldr	r3, [r4, #8]
   e6558:	4456      	add	r6, sl
   e655a:	4607      	mov	r7, r0
   e655c:	4691      	mov	r9, r2
   e655e:	1c75      	adds	r5, r6, #1
   e6560:	42ab      	cmp	r3, r5
   e6562:	da02      	bge.n	e656a <__lshift+0x22>
   e6564:	3101      	adds	r1, #1
   e6566:	005b      	lsls	r3, r3, #1
   e6568:	e7fa      	b.n	e6560 <__lshift+0x18>
   e656a:	4638      	mov	r0, r7
   e656c:	f7ff fdf2 	bl	e6154 <_Balloc>
   e6570:	2300      	movs	r3, #0
   e6572:	4680      	mov	r8, r0
   e6574:	f100 0114 	add.w	r1, r0, #20
   e6578:	461a      	mov	r2, r3
   e657a:	4553      	cmp	r3, sl
   e657c:	da03      	bge.n	e6586 <__lshift+0x3e>
   e657e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e6582:	3301      	adds	r3, #1
   e6584:	e7f9      	b.n	e657a <__lshift+0x32>
   e6586:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e658a:	6920      	ldr	r0, [r4, #16]
   e658c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e6590:	f019 091f 	ands.w	r9, r9, #31
   e6594:	f104 0114 	add.w	r1, r4, #20
   e6598:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e659c:	d014      	beq.n	e65c8 <__lshift+0x80>
   e659e:	f1c9 0c20 	rsb	ip, r9, #32
   e65a2:	2200      	movs	r2, #0
   e65a4:	6808      	ldr	r0, [r1, #0]
   e65a6:	fa00 f009 	lsl.w	r0, r0, r9
   e65aa:	4302      	orrs	r2, r0
   e65ac:	469a      	mov	sl, r3
   e65ae:	f843 2b04 	str.w	r2, [r3], #4
   e65b2:	f851 2b04 	ldr.w	r2, [r1], #4
   e65b6:	458e      	cmp	lr, r1
   e65b8:	fa22 f20c 	lsr.w	r2, r2, ip
   e65bc:	d8f2      	bhi.n	e65a4 <__lshift+0x5c>
   e65be:	f8ca 2004 	str.w	r2, [sl, #4]
   e65c2:	b142      	cbz	r2, e65d6 <__lshift+0x8e>
   e65c4:	1cb5      	adds	r5, r6, #2
   e65c6:	e006      	b.n	e65d6 <__lshift+0x8e>
   e65c8:	3b04      	subs	r3, #4
   e65ca:	f851 2b04 	ldr.w	r2, [r1], #4
   e65ce:	f843 2f04 	str.w	r2, [r3, #4]!
   e65d2:	458e      	cmp	lr, r1
   e65d4:	d8f9      	bhi.n	e65ca <__lshift+0x82>
   e65d6:	3d01      	subs	r5, #1
   e65d8:	4638      	mov	r0, r7
   e65da:	f8c8 5010 	str.w	r5, [r8, #16]
   e65de:	4621      	mov	r1, r4
   e65e0:	f7ff fded 	bl	e61be <_Bfree>
   e65e4:	4640      	mov	r0, r8
   e65e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e65ea <__mcmp>:
   e65ea:	6903      	ldr	r3, [r0, #16]
   e65ec:	690a      	ldr	r2, [r1, #16]
   e65ee:	1a9b      	subs	r3, r3, r2
   e65f0:	b510      	push	{r4, lr}
   e65f2:	d111      	bne.n	e6618 <__mcmp+0x2e>
   e65f4:	0092      	lsls	r2, r2, #2
   e65f6:	3014      	adds	r0, #20
   e65f8:	3114      	adds	r1, #20
   e65fa:	1883      	adds	r3, r0, r2
   e65fc:	440a      	add	r2, r1
   e65fe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e6602:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e6606:	428c      	cmp	r4, r1
   e6608:	d002      	beq.n	e6610 <__mcmp+0x26>
   e660a:	d307      	bcc.n	e661c <__mcmp+0x32>
   e660c:	2001      	movs	r0, #1
   e660e:	bd10      	pop	{r4, pc}
   e6610:	4298      	cmp	r0, r3
   e6612:	d3f4      	bcc.n	e65fe <__mcmp+0x14>
   e6614:	2000      	movs	r0, #0
   e6616:	bd10      	pop	{r4, pc}
   e6618:	4618      	mov	r0, r3
   e661a:	bd10      	pop	{r4, pc}
   e661c:	f04f 30ff 	mov.w	r0, #4294967295
   e6620:	bd10      	pop	{r4, pc}

000e6622 <__mdiff>:
   e6622:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6626:	460c      	mov	r4, r1
   e6628:	4607      	mov	r7, r0
   e662a:	4611      	mov	r1, r2
   e662c:	4620      	mov	r0, r4
   e662e:	4615      	mov	r5, r2
   e6630:	f7ff ffdb 	bl	e65ea <__mcmp>
   e6634:	1e06      	subs	r6, r0, #0
   e6636:	d108      	bne.n	e664a <__mdiff+0x28>
   e6638:	4631      	mov	r1, r6
   e663a:	4638      	mov	r0, r7
   e663c:	f7ff fd8a 	bl	e6154 <_Balloc>
   e6640:	2301      	movs	r3, #1
   e6642:	6103      	str	r3, [r0, #16]
   e6644:	6146      	str	r6, [r0, #20]
   e6646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e664a:	bfbc      	itt	lt
   e664c:	4623      	movlt	r3, r4
   e664e:	462c      	movlt	r4, r5
   e6650:	4638      	mov	r0, r7
   e6652:	6861      	ldr	r1, [r4, #4]
   e6654:	bfba      	itte	lt
   e6656:	461d      	movlt	r5, r3
   e6658:	2601      	movlt	r6, #1
   e665a:	2600      	movge	r6, #0
   e665c:	f7ff fd7a 	bl	e6154 <_Balloc>
   e6660:	692b      	ldr	r3, [r5, #16]
   e6662:	60c6      	str	r6, [r0, #12]
   e6664:	6926      	ldr	r6, [r4, #16]
   e6666:	f105 0914 	add.w	r9, r5, #20
   e666a:	3414      	adds	r4, #20
   e666c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e6670:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e6674:	f100 0514 	add.w	r5, r0, #20
   e6678:	f04f 0c00 	mov.w	ip, #0
   e667c:	f854 3b04 	ldr.w	r3, [r4], #4
   e6680:	f859 2b04 	ldr.w	r2, [r9], #4
   e6684:	fa1c f183 	uxtah	r1, ip, r3
   e6688:	fa1f fe82 	uxth.w	lr, r2
   e668c:	0c12      	lsrs	r2, r2, #16
   e668e:	ebce 0101 	rsb	r1, lr, r1
   e6692:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e6696:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e669a:	b289      	uxth	r1, r1
   e669c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e66a0:	45c8      	cmp	r8, r9
   e66a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e66a6:	46a6      	mov	lr, r4
   e66a8:	f845 3b04 	str.w	r3, [r5], #4
   e66ac:	d8e6      	bhi.n	e667c <__mdiff+0x5a>
   e66ae:	45be      	cmp	lr, r7
   e66b0:	d20e      	bcs.n	e66d0 <__mdiff+0xae>
   e66b2:	f85e 1b04 	ldr.w	r1, [lr], #4
   e66b6:	fa1c f281 	uxtah	r2, ip, r1
   e66ba:	1413      	asrs	r3, r2, #16
   e66bc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e66c0:	b292      	uxth	r2, r2
   e66c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e66c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e66ca:	f845 2b04 	str.w	r2, [r5], #4
   e66ce:	e7ee      	b.n	e66ae <__mdiff+0x8c>
   e66d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e66d4:	b90b      	cbnz	r3, e66da <__mdiff+0xb8>
   e66d6:	3e01      	subs	r6, #1
   e66d8:	e7fa      	b.n	e66d0 <__mdiff+0xae>
   e66da:	6106      	str	r6, [r0, #16]
   e66dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e66e0 <__ulp>:
   e66e0:	4b12      	ldr	r3, [pc, #72]	; (e672c <__ulp+0x4c>)
   e66e2:	ee10 2a90 	vmov	r2, s1
   e66e6:	401a      	ands	r2, r3
   e66e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e66ec:	2b00      	cmp	r3, #0
   e66ee:	dd02      	ble.n	e66f6 <__ulp+0x16>
   e66f0:	2000      	movs	r0, #0
   e66f2:	4619      	mov	r1, r3
   e66f4:	e017      	b.n	e6726 <__ulp+0x46>
   e66f6:	425b      	negs	r3, r3
   e66f8:	151b      	asrs	r3, r3, #20
   e66fa:	2b13      	cmp	r3, #19
   e66fc:	f04f 0000 	mov.w	r0, #0
   e6700:	f04f 0100 	mov.w	r1, #0
   e6704:	dc04      	bgt.n	e6710 <__ulp+0x30>
   e6706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e670a:	fa42 f103 	asr.w	r1, r2, r3
   e670e:	e00a      	b.n	e6726 <__ulp+0x46>
   e6710:	3b14      	subs	r3, #20
   e6712:	2b1e      	cmp	r3, #30
   e6714:	f04f 0201 	mov.w	r2, #1
   e6718:	bfda      	itte	le
   e671a:	f1c3 031f 	rsble	r3, r3, #31
   e671e:	fa02 f303 	lslle.w	r3, r2, r3
   e6722:	4613      	movgt	r3, r2
   e6724:	4618      	mov	r0, r3
   e6726:	ec41 0b10 	vmov	d0, r0, r1
   e672a:	4770      	bx	lr
   e672c:	7ff00000 	.word	0x7ff00000

000e6730 <__b2d>:
   e6730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6732:	6905      	ldr	r5, [r0, #16]
   e6734:	f100 0614 	add.w	r6, r0, #20
   e6738:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e673c:	1f2f      	subs	r7, r5, #4
   e673e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e6742:	4620      	mov	r0, r4
   e6744:	f7ff fdcb 	bl	e62de <__hi0bits>
   e6748:	f1c0 0320 	rsb	r3, r0, #32
   e674c:	280a      	cmp	r0, #10
   e674e:	600b      	str	r3, [r1, #0]
   e6750:	dc14      	bgt.n	e677c <__b2d+0x4c>
   e6752:	f1c0 0e0b 	rsb	lr, r0, #11
   e6756:	fa24 f10e 	lsr.w	r1, r4, lr
   e675a:	42be      	cmp	r6, r7
   e675c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e6760:	bf34      	ite	cc
   e6762:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e6766:	2100      	movcs	r1, #0
   e6768:	3015      	adds	r0, #21
   e676a:	fa04 f000 	lsl.w	r0, r4, r0
   e676e:	fa21 f10e 	lsr.w	r1, r1, lr
   e6772:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e6776:	ea40 0201 	orr.w	r2, r0, r1
   e677a:	e023      	b.n	e67c4 <__b2d+0x94>
   e677c:	42be      	cmp	r6, r7
   e677e:	bf3a      	itte	cc
   e6780:	f1a5 0708 	subcc.w	r7, r5, #8
   e6784:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e6788:	2100      	movcs	r1, #0
   e678a:	380b      	subs	r0, #11
   e678c:	d015      	beq.n	e67ba <__b2d+0x8a>
   e678e:	4084      	lsls	r4, r0
   e6790:	f1c0 0520 	rsb	r5, r0, #32
   e6794:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e6798:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e679c:	42b7      	cmp	r7, r6
   e679e:	fa21 fe05 	lsr.w	lr, r1, r5
   e67a2:	ea44 030e 	orr.w	r3, r4, lr
   e67a6:	bf8c      	ite	hi
   e67a8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e67ac:	2400      	movls	r4, #0
   e67ae:	fa01 f000 	lsl.w	r0, r1, r0
   e67b2:	40ec      	lsrs	r4, r5
   e67b4:	ea40 0204 	orr.w	r2, r0, r4
   e67b8:	e004      	b.n	e67c4 <__b2d+0x94>
   e67ba:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e67be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e67c2:	460a      	mov	r2, r1
   e67c4:	ec43 2b10 	vmov	d0, r2, r3
   e67c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e67ca <__d2b>:
   e67ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e67ce:	460e      	mov	r6, r1
   e67d0:	2101      	movs	r1, #1
   e67d2:	ec59 8b10 	vmov	r8, r9, d0
   e67d6:	4615      	mov	r5, r2
   e67d8:	f7ff fcbc 	bl	e6154 <_Balloc>
   e67dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e67e0:	4607      	mov	r7, r0
   e67e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e67e6:	b10c      	cbz	r4, e67ec <__d2b+0x22>
   e67e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e67ec:	9301      	str	r3, [sp, #4]
   e67ee:	f1b8 0f00 	cmp.w	r8, #0
   e67f2:	d019      	beq.n	e6828 <__d2b+0x5e>
   e67f4:	a802      	add	r0, sp, #8
   e67f6:	f840 8d08 	str.w	r8, [r0, #-8]!
   e67fa:	f7ff fd90 	bl	e631e <__lo0bits>
   e67fe:	9b00      	ldr	r3, [sp, #0]
   e6800:	b148      	cbz	r0, e6816 <__d2b+0x4c>
   e6802:	9a01      	ldr	r2, [sp, #4]
   e6804:	f1c0 0120 	rsb	r1, r0, #32
   e6808:	fa02 f101 	lsl.w	r1, r2, r1
   e680c:	430b      	orrs	r3, r1
   e680e:	40c2      	lsrs	r2, r0
   e6810:	617b      	str	r3, [r7, #20]
   e6812:	9201      	str	r2, [sp, #4]
   e6814:	e000      	b.n	e6818 <__d2b+0x4e>
   e6816:	617b      	str	r3, [r7, #20]
   e6818:	9b01      	ldr	r3, [sp, #4]
   e681a:	61bb      	str	r3, [r7, #24]
   e681c:	2b00      	cmp	r3, #0
   e681e:	bf14      	ite	ne
   e6820:	2102      	movne	r1, #2
   e6822:	2101      	moveq	r1, #1
   e6824:	6139      	str	r1, [r7, #16]
   e6826:	e007      	b.n	e6838 <__d2b+0x6e>
   e6828:	a801      	add	r0, sp, #4
   e682a:	f7ff fd78 	bl	e631e <__lo0bits>
   e682e:	9b01      	ldr	r3, [sp, #4]
   e6830:	617b      	str	r3, [r7, #20]
   e6832:	2101      	movs	r1, #1
   e6834:	6139      	str	r1, [r7, #16]
   e6836:	3020      	adds	r0, #32
   e6838:	b134      	cbz	r4, e6848 <__d2b+0x7e>
   e683a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e683e:	4404      	add	r4, r0
   e6840:	6034      	str	r4, [r6, #0]
   e6842:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e6846:	e009      	b.n	e685c <__d2b+0x92>
   e6848:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e684c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e6850:	6030      	str	r0, [r6, #0]
   e6852:	6918      	ldr	r0, [r3, #16]
   e6854:	f7ff fd43 	bl	e62de <__hi0bits>
   e6858:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e685c:	6028      	str	r0, [r5, #0]
   e685e:	4638      	mov	r0, r7
   e6860:	b003      	add	sp, #12
   e6862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e6866 <__ratio>:
   e6866:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e686a:	4688      	mov	r8, r1
   e686c:	4669      	mov	r1, sp
   e686e:	4681      	mov	r9, r0
   e6870:	f7ff ff5e 	bl	e6730 <__b2d>
   e6874:	a901      	add	r1, sp, #4
   e6876:	4640      	mov	r0, r8
   e6878:	ec55 4b10 	vmov	r4, r5, d0
   e687c:	f7ff ff58 	bl	e6730 <__b2d>
   e6880:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e6884:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e6888:	1a9a      	subs	r2, r3, r2
   e688a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e688e:	1ac9      	subs	r1, r1, r3
   e6890:	ec57 6b10 	vmov	r6, r7, d0
   e6894:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e6898:	2b00      	cmp	r3, #0
   e689a:	bfcc      	ite	gt
   e689c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e68a0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e68a4:	4632      	mov	r2, r6
   e68a6:	463b      	mov	r3, r7
   e68a8:	4620      	mov	r0, r4
   e68aa:	4629      	mov	r1, r5
   e68ac:	f7fc fb42 	bl	e2f34 <__aeabi_ddiv>
   e68b0:	ec41 0b10 	vmov	d0, r0, r1
   e68b4:	b003      	add	sp, #12
   e68b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e68ba <__copybits>:
   e68ba:	3901      	subs	r1, #1
   e68bc:	b510      	push	{r4, lr}
   e68be:	1149      	asrs	r1, r1, #5
   e68c0:	6914      	ldr	r4, [r2, #16]
   e68c2:	3101      	adds	r1, #1
   e68c4:	f102 0314 	add.w	r3, r2, #20
   e68c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e68cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e68d0:	42a3      	cmp	r3, r4
   e68d2:	4602      	mov	r2, r0
   e68d4:	d204      	bcs.n	e68e0 <__copybits+0x26>
   e68d6:	f853 2b04 	ldr.w	r2, [r3], #4
   e68da:	f840 2b04 	str.w	r2, [r0], #4
   e68de:	e7f7      	b.n	e68d0 <__copybits+0x16>
   e68e0:	2300      	movs	r3, #0
   e68e2:	428a      	cmp	r2, r1
   e68e4:	d202      	bcs.n	e68ec <__copybits+0x32>
   e68e6:	f842 3b04 	str.w	r3, [r2], #4
   e68ea:	e7fa      	b.n	e68e2 <__copybits+0x28>
   e68ec:	bd10      	pop	{r4, pc}

000e68ee <__any_on>:
   e68ee:	f100 0214 	add.w	r2, r0, #20
   e68f2:	6900      	ldr	r0, [r0, #16]
   e68f4:	114b      	asrs	r3, r1, #5
   e68f6:	4298      	cmp	r0, r3
   e68f8:	b510      	push	{r4, lr}
   e68fa:	db0c      	blt.n	e6916 <__any_on+0x28>
   e68fc:	dd0c      	ble.n	e6918 <__any_on+0x2a>
   e68fe:	f011 011f 	ands.w	r1, r1, #31
   e6902:	d009      	beq.n	e6918 <__any_on+0x2a>
   e6904:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e6908:	fa24 f001 	lsr.w	r0, r4, r1
   e690c:	fa00 f101 	lsl.w	r1, r0, r1
   e6910:	428c      	cmp	r4, r1
   e6912:	d10c      	bne.n	e692e <__any_on+0x40>
   e6914:	e000      	b.n	e6918 <__any_on+0x2a>
   e6916:	4603      	mov	r3, r0
   e6918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e691c:	4293      	cmp	r3, r2
   e691e:	d904      	bls.n	e692a <__any_on+0x3c>
   e6920:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e6924:	2900      	cmp	r1, #0
   e6926:	d0f9      	beq.n	e691c <__any_on+0x2e>
   e6928:	e001      	b.n	e692e <__any_on+0x40>
   e692a:	2000      	movs	r0, #0
   e692c:	bd10      	pop	{r4, pc}
   e692e:	2001      	movs	r0, #1
   e6930:	bd10      	pop	{r4, pc}

000e6932 <_calloc_r>:
   e6932:	b538      	push	{r3, r4, r5, lr}
   e6934:	fb02 f401 	mul.w	r4, r2, r1
   e6938:	4621      	mov	r1, r4
   e693a:	f7f4 f8eb 	bl	dab14 <_malloc_r>
   e693e:	4605      	mov	r5, r0
   e6940:	b118      	cbz	r0, e694a <_calloc_r+0x18>
   e6942:	4622      	mov	r2, r4
   e6944:	2100      	movs	r1, #0
   e6946:	f7fc fe70 	bl	e362a <memset>
   e694a:	4628      	mov	r0, r5
   e694c:	bd38      	pop	{r3, r4, r5, pc}

000e694e <__env_lock>:
   e694e:	4770      	bx	lr

000e6950 <__env_unlock>:
   e6950:	4770      	bx	lr

000e6952 <link_code_end>:
	...

000e6954 <dynalib_user>:
   e6954:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e6964:	0000 0000                                   ....

000e6968 <functions>:
   e6968:	6b0e 000e d8d1 000d 0029 0000 0000 0000     .k......).......
   e6978:	6b12 000e dc51 000d 0029 0000 0000 0000     .k..Q...).......
   e6988:	6b17 000e dd15 000d 0029 0000 0000 0000     .k......).......
   e6998:	6b1c 000e d379 000d 0029 0000 0000 0000     .k..y...).......
   e69a8:	6b21 000e ddd9 000d 002a 0000 0000 0000     !k......*.......
   e69b8:	6b27 000e d6f1 000d 0029 0000 0000 0000     'k......).......
   e69c8:	6b13 000e d811 000d 0029 0000 0000 0000     .k......).......
   e69d8:	6b2c 000e dde1 000d 0029 0000 0000 0000     ,k......).......
   e69e8:	7e89 000e 40c9 000d 0028 0000 0000 0000     .~...@..(.......
   e69f8:	6b31 000e deb9 000d 0029 0000 0000 0000     1k......).......
   e6a08:	6b35 000e 43d9 000d 0029 0000 0000 0000     5k...C..).......
   e6a18:	6b39 000e d8e1 000d 0029 0000 0000 0000     9k......).......
   e6a28:	6b3f 000e e099 000d 0029 0000 0000 0000     ?k......).......
   e6a38:	6b42 000e e1a9 000d 0029 0000 0000 0000     Bk......).......
   e6a48:	6b46 000e e1a9 000d 0029 0000 0000 0000     Fk......).......
   e6a58:	6b4c 000e 4449 000d 002a 0000 0000 0000     Lk..ID..*.......
   e6a68:	6b50 000e 4509 000d 002a 0000 0000 0000     Pk...E..*.......
   e6a78:	6b54 000e 40b9 000d 0028 0000 0000 0000     Tk...@..(.......
   e6a88:	6b57 000e e2c1 000d 002a 0000 0000 0000     Wk......*.......
   e6a98:	6b18 000e da01 000d 0029 0000 0000 0000     .k......).......
   e6aa8:	6b5b 000e e5f9 000d 0029 0000 0000 0000     [k......).......
   e6ab8:	6b60 000e e6d5 000d 0029 0000 0000 0000     `k......).......
   e6ac8:	6b1d 000e dac1 000d 0029 0000 0000 0000     .k......).......
   e6ad8:	6b65 000e db31 000d 0029 0000 0000 0000     ek..1...).......
	...
   e6af8:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e6b08:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e6b18:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e6b28:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e6b38:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e6b48:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e6b58:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e6b68:	0068 0000                                   h...

000e6b6c <_ZTVN8particle9LEDStatusE>:
	...
   e6b74:	54a5 000d 54bd 000d 52f3 000d               .T...T...R..

000e6b80 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e6b80:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   e6b90:	0033 2d68 6562 7461 3600 0030 7562 6666     3.h-beat.60.buff
   e6ba0:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e6bb0:	6974 6c63 0065 7562 6c69 0064 7041 2072     ticle.build.Apr 
   e6bc0:	3932 3220 3230 2030 3132 333a 3a38 3133     29 2020 21:38:31
   e6bd0:	0000 5d00 0020 4d47 2054 6573 6f63 646e     ...] .GMT second
   e6be0:	2073 666f 7366 7465 6920 3a73 0020 6925     s offset is: .%i
   e6bf0:	2500 696c 4300 6e6f 656e 7463 6e69 2067     .%li.Connecting 
   e6c00:	6f74 0020 0a0d 2020 2020 5f5f 205f 5f20     to ...    ___  _
   e6c10:	205f 2020 2020 2020 2020 5f20 0d5f 200a     _          __.. 
   e6c20:	2020 202f 205f 2f29 2f20 205f 5f5f 5f5f       / _ )/ /_ ____
   e6c30:	205f 2f20 2f20 5f5f 0a0d 2020 202f 205f     _  / /__..  / _ 
   e6c40:	2f20 2f20 2f20 202f 202f 205f 2f5c 2020      / / // / _ \/  
   e6c50:	5f27 0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c     '_/.. /____/_/\_
   e6c60:	202c 5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a     , /_//_/_/\_\.. 
   e6c70:	2020 2020 2020 2f20 5f5f 2f5f 7620 2e30            /___/ v0.
   e6c80:	2e36 2033 6e6f 5020 7261 6974 6c63 0d65     6.3 on Particle.
   e6c90:	000a 6544 6976 6563 0020 6120 6464 6572     ..Device . addre
   e6ca0:	7373 303a 0078 4e20 544f 6120 0074 6353     ss:0x. NOT at.Sc
   e6cb0:	6e61 696e 676e 2e2e 002e 6e55 6e6b 776f     anning....Unknow
   e6cc0:	206e 7265 6f72 2072 7461 6120 6464 6572     n error at addre
   e6cd0:	7373 3020 0078 6f4e 4920 4332 6420 7665     ss 0x.No I2C dev
   e6ce0:	6369 7365 6620 756f 646e 000a 6f64 656e     ices found..done
   e6cf0:	000a 6153 6976 676e 5320 6174 6574 4c00     ..Saving State.L
   e6d00:	616f 6964 676e 5320 6174 6574 4400 7369     oading State.Dis
   e6d10:	6f63 6e6e 6365 6574 0064 2a2a 2a2a 442a     connected.*****D
   e6d20:	7665 6369 2065 6f5a 656e 7620 6c61 6575     evice Zone value
   e6d30:	6920 3a73 0020 2a2a 2a2a 552a 6470 7461      is: .*****Updat
   e6d40:	2065 7562 7a7a 7265 6154 706d 7265 6620     e buzzerTamper f
   e6d50:	616c 2067 6176 756c 2065 7369 203a 2a00     lag value is: .*
   e6d60:	2a2a 2a2a 7055 6164 6574 6220 7a75 657a     ****Update buzze
   e6d70:	5672 7061 726f 6620 616c 2067 6176 756c     rVapor flag valu
   e6d80:	2065 7369 203a 2a00 2a2a 2a2a 7055 6164     e is: .*****Upda
   e6d90:	6574 6e20 746f 6669 5679 7061 726f 6620     te notifyVapor f
   e6da0:	616c 2067 6176 756c 2065 7369 203a 2a00     lag value is: .*
   e6db0:	2a2a 2a2a 7055 6164 6574 6e20 746f 6669     ****Update notif
   e6dc0:	5479 6d61 6570 2072 6c66 6761 7620 6c61     yTamper flag val
   e6dd0:	6575 6920 3a73 0020 2a2a 2a2a 552a 6470     ue is: .*****Upd
   e6de0:	7461 2065 6341 6563 656c 6f72 656d 6574     ate Acceleromete
   e6df0:	2072 6874 6572 6873 6c6f 2064 6176 756c     r threshold valu
   e6e00:	2065 7369 203a 5500 6470 7461 2065 6341     e is: .Update Ac
   e6e10:	6563 656c 6f72 656d 6574 2072 6176 756c     celerometer valu
   e6e20:	2065 7369 203a 5700 6c69 206c 6572 6573     e is: .Will rese
   e6e30:	2074 7973 7473 6d65 0020 7055 6164 6574     t system .Update
   e6e40:	6e20 746f 6669 4279 7461 6574 7972 6620      notifyBattery f
   e6e50:	616c 2067 6176 756c 2065 7369 203a 4900     lag value is: .I
   e6e60:	696e 6974 6c61 7a69 6e69 2067 6c61 7261     nitializing alar
   e6e70:	006d 6553 6f63 646e 0073 6543 6c6c 6c75     m.Seconds.Cellul
   e6e80:	7261 6e20 746f 7220 6165 7964 4200 796c     ar not ready.Bly
   e6e90:	6b6e 6e20 746f 6320 6e6f 656e 7463 6465     nk not connected
   e6ea0:	7000 6275 696c 6873 4d47 4f54 6666 6573     .publishGMTOffse
   e6eb0:	5274 7165 6575 7473 4420 7665 6369 2065     tRequest Device 
   e6ec0:	6f5a 656e 7620 6c61 6575 6920 3a73 0020     Zone value is: .
   e6ed0:	6d41 7265 6369 2f61 654e 5f77 6f59 6b72     America/New_York
   e6ee0:	4100 656d 6972 6163 432f 6968 6163 6f67     .America/Chicago
   e6ef0:	4100 656d 6972 6163 502f 6f68 6e65 7869     .America/Phoenix
   e6f00:	4100 656d 6972 6163 4c2f 736f 415f 676e     .America/Los_Ang
   e6f10:	6c65 7365 7000 6d77 6400 0077 7761 4900     eles.pwm.dw.aw.I
   e6f20:	766e 6c61 6469 4820 2057 6d63 3a64 0020     nvalid HW cmd: .
   e6f30:	6e49 6176 696c 2064 6970 206e 2000 6f6d     Invalid pin . mo
   e6f40:	6564 0020 003e 6142 2064 6468 2072 656c     de .>.Bad hdr le
   e6f50:	3a6e 0020 6552 6461 2079 7028 6e69 3a67     n: .Ready (ping:
   e6f60:	0020 736d 2e29 4600 6572 2065 4152 3a4d      .ms)..Free RAM:
   e6f70:	0020 6e49 6176 696c 2064 7561 6874 7420      .Invalid auth t
   e6f80:	6b6f 6e65 4300 6e6f 656e 7463 6620 6961     oken.Connect fai
   e6f90:	656c 2e64 6320 646f 3a65 0020 6150 6b63     led. code: .Pack
   e6fa0:	7465 7420 6f6f 6220 6769 203a 4300 6e61     et too big: .Can
   e6fb0:	7427 7220 6165 2064 6f62 7964 5200 6165     't read body.Rea
   e6fc0:	7964 5200 6465 7269 6365 6974 676e 7420     dy.Redirecting t
   e6fd0:	206f 4900 766e 6c61 6469 6920 746e 7265     o .Invalid inter
   e6fe0:	616e 206c 6d63 3a64 5300 7265 6576 3a72     nal cmd:.Server:
   e6ff0:	0020 6e49 6176 696c 2064 6568 6461 7265      .Invalid header
   e7000:	7420 7079 3a65 0020 6548 7261 6274 6165      type: .Heartbea
   e7010:	2074 6974 656d 756f 3a74 0020 202c 4c00     t timeout: ., .L
   e7020:	676f 6e69 7420 6d69 6f65 7475 3c00 4300     ogin timeout.<.C
   e7030:	646d 6520 7272 726f 5300 6e65 2074 7600     md error.Sent .v
   e7040:	0077 5453 5942 2500 2568 2065 5225 2500     w.STBY.%h%e %R.%
   e7050:	2000 2020 2020 2020 2020 2020 2020 2020     .               
   e7060:	0020 6f47 6e69 2067 6f74 7320 656c 7065      .Going to sleep
   e7070:	4700 696f 676e 7420 206f 7473 6e61 6264     .Going to standb
   e7080:	2079 6c73 6565 0070 6f47 6e69 2067 6f74     y sleep.Going to
   e7090:	6420 6565 2070 6c73 6565 0070 2b20 0020      deep sleep. + .
   e70a0:	3225 332e 0066 6f43 6e6e 6365 6574 0064     %2.3f.Connected.
   e70b0:	6e45 6574 2072 6f63 6564 7420 206f 6572     Enter code to re
   e70c0:	6573 0074 6e49 7469 6169 696c 657a 2064     set.Initialized 
   e70d0:	6564 6166 6c75 2074 6176 756c 7365 4600     default values.F
   e70e0:	6e69 7369 6568 2064 6e49 7469 6169 696c     inished Initiali
   e70f0:	617a 6974 6e6f 7200 7365 7465 656d 4500     zation.resetme.E
   e7100:	746e 7265 6520 7078 6572 7373 6f69 206e     nter expression 
   e7110:	6568 6572 4500 746e 7265 6520 616d 6c69     here.Enter email
   e7120:	6820 7265 0065 6148 6472 5220 7365 7465      here.Hard Reset
   e7130:	6974 676e 4200 796c 6b6e 6920 2073 6f6e     ting.Blynk is no
   e7140:	2077 6f63 6e6e 6365 6574 2064 202d 7973     w connected - sy
   e7150:	636e 6e69 2067 6c61 206c 6970 736e 002e     ncing all pins..
   e7160:	6d70 0031 6d70 0032 6d70 0034 6d70 3031     pm1.pm2.pm4.pm10
   e7170:	6300 6e6f 0063 6574 706d 2500 2e32 6637     .conc.temp.%2.7f
   e7180:	5400 6568 6520 7078 6572 7373 6f69 206e     .The expression 
   e7190:	7369 5420 7572 0065 6854 2065 7865 7270     is True.The expr
   e71a0:	7365 6973 6e6f 6920 2073 6146 736c 0065     ession is False.
   e71b0:	7245 6f72 2072 656e 7261 6320 6168 3a72     Error near char:
   e71c0:	0020 2a2a 202a 4341 4543 204c 4e49 4554      .*** ACCEL INTE
   e71d0:	5252 5055 4554 2044 2a2a 002a 2a2a 202a     RRUPTED ***.*** 
   e71e0:	4e49 4341 4954 4956 5954 2a20 2a2a 2a00     INACTIVITY ***.*
   e71f0:	2a2a 4120 5443 5649 5449 2059 2a2a 002a     ** ACTIVITY ***.
   e7200:	6174 706d 7265 615f 656c 7472 4100 7474     tamper_alert.Att
   e7210:	6d65 7470 6e69 2067 6f74 6320 6e6f 656e     empting to conne
   e7220:	7463 6320 6c65 756c 616c 2e72 2e2e 4300     ct cellular....C
   e7230:	6c65 756c 616c 2072 6572 6461 0079 7441     ellular ready.At
   e7240:	6574 706d 6974 676e 7420 206f 6f63 6e6e     tempting to conn
   e7250:	6365 2074 6f74 5020 7261 6974 6c63 2e65     ect to Particle.
   e7260:	2e2e 5000 7261 6974 6c63 2065 6f6e 2074     ...Particle not 
   e7270:	6f63 6e6e 6365 6574 0064 6150 7472 6369     connected.Partic
   e7280:	656c 6320 6e6f 656e 7463 6465 4100 7474     le connected.Att
   e7290:	6d65 7470 6e69 2067 6f74 6320 6e6f 656e     empting to conne
   e72a0:	7463 7420 206f 6c42 6e79 2e6b 2e2e 7a00     ct to Blynk....z
   e72b0:	7065 6f74 6573 736e 3265 622e 796c 6b6e     eptosense2.blynk
   e72c0:	632e 0063 6c42 6e79 206b 6f63 6e6e 6365     .cc.Blynk connec
   e72d0:	6574 0064 7473 7261 2074 6572 6461 6553     ted.start readSe
   e72e0:	736e 726f 0073 7453 7461 2065 6176 756c     nsors.State valu
   e72f0:	7365 6120 6572 203a 7542 7a7a 7265 5420     es are: Buzzer T
   e7300:	6d61 6570 2072 4200 7a75 657a 2072 6156     amper .Buzzer Va
   e7310:	6f70 2072 4e00 746f 6669 2079 6156 6f70     por .Notify Vapo
   e7320:	2072 4e00 746f 6669 2079 6154 706d 7265     r .Notify Tamper
   e7330:	0020 6f4e 6974 7966 4220 7461 6574 7972      .Notify Battery
   e7340:	0020 6341 6974 6976 7974 5420 7268 7365      .Activity Thres
   e7350:	6f68 646c 0020 6544 6976 6563 5a20 6e6f     hold .Device Zon
   e7360:	2065 5300 6174 7472 5320 7465 7075 7320     e .Start Setup s
   e7370:	6365 6974 6e6f 6120 7466 7265 6120 7320     ection after a s
   e7380:	656c 7065 5500 616e 6c62 2065 6f74 7220     leep.Unable to r
   e7390:	6165 2064 7845 6170 646e 7265 2d20 7220     ead Expander - r
   e73a0:	7365 7465 6974 676e 6920 206e 2039 6573     esetting in 9 se
   e73b0:	6f63 646e 0073 7245 6f72 0072 3164 253d     conds.Error.d1=%
   e73c0:	0075 6843 6365 696b 676e 6920 6332 6420     u.Checking i2c d
   e73d0:	7665 6369 7365 2e2e 002e 5245 0052 3249     evices....ERR.I2
   e73e0:	2043 7349 7573 0065 4452 0059 3249 2043     C Issue.RDY.I2C 
   e73f0:	4b4f 4200 6665 726f 0065 6641 6574 0072     OK.Before.After.
   e7400:	4441 4c58 3433 2035 6553 7574 0070 6e55     ADXL345 Setup.Un
   e7410:	6261 656c 7420 206f 6572 6461 5320 5350     able to read SPS
   e7420:	3033 2d20 7420 7972 6e69 2067 6761 6961     30 - trying agai
   e7430:	006e 6552 6461 5320 5350 3033 5400 6d69     n.Read SPS30.Tim
   e7440:	2065 7369 7320 6e79 2763 6465 7420 206f     e is sync'ed to 
   e7450:	6874 2065 6c63 756f 0064 2d2d 614d 7373     the cloud.--Mass
   e7460:	4320 6e6f 6563 746e 6172 6974 6e6f 2d2d      Concentration--
   e7470:	2500 3a73 2520 2e30 6632 0a0d 2d00 4e2d     .%s: %0.2f...--N
   e7480:	6d75 6562 2072 6f43 636e 6e65 7274 7461     umber Concentrat
   e7490:	6f69 2d6e 002d 3025 312e 0066 0046 6574     ion--.%0.1f.F.te
   e74a0:	706d 3a31 0020 6756 7361 203a 4300 6e6f     mp1: .Vgas: .Con
   e74b0:	3a63 0020 3025 302e 0066 4c41 5452 2021     c: .%0.0f.ALRT! 
   e74c0:	4100 454c 5452 2021 2020 2020 2020 2020     .ALERT!         
   e74d0:	2020 2020 7c00 4100 524c 2154 5500 6470         .|.ALRT!.Upd
   e74e0:	7461 6e69 0067 7562 7a7a 7265 7420 746f     ating.buzzer tot
   e74f0:	6c61 7420 6d69 2065 7525 206c 2a2a 2a2a     al time %ul ****
   e7500:	5600 7061 2065 6c61 7265 2074 7562 7a7a     .Vape alert buzz
   e7510:	7265 7420 6d69 2065 6572 6573 2074 7461     er time reset at
   e7520:	2520 6c75 2a20 2a2a 002a 6176 6570 615f      %ul ****.vape_a
   e7530:	656c 7472 5600 7061 2065 6c41 7265 2074     lert.Vape Alert 
   e7540:	6f74 6174 206c 6974 656d 2520 6c75 6d20     total time %ul m
   e7550:	6c69 696c 6573 6f63 646e 0073 6f6c 5f77     illiseconds.low_
   e7560:	6162 7474 7265 5f79 6c61 7265 5f74 3032     battery_alert_20
   e7570:	5500 616e 6c62 2065 6f74 7220 6165 2064     .Unable to read 
   e7580:	5053 3353 2030 202d 6572 6573 7474 6e69     SPS30 - resettin
   e7590:	2067 6564 6976 6563 3120 5500 616e 6c62     g device 1.Unabl
   e75a0:	2065 6f74 7220 6165 2064 5053 3353 2030     e to read SPS30 
   e75b0:	202d 6572 6573 7474 6e69 2067 6564 6976     - resetting devi
   e75c0:	6563 5300 6174 7472 5320 7465 7075 2928     ce.Start Setup()
   e75d0:	6620 6e75 7463 6f69 006e 6544 6976 6563      function.Device
   e75e0:	6420 6469 6e20 746f 7720 6b61 2065 7075      did not wake up
   e75f0:	6620 6f72 206d 6150 7472 6369 656c 7320      from Particle s
   e7600:	656c 7065 4400 7665 6369 2065 6177 2073     leep.Device was 
   e7610:	6f77 656b 206e 7075 6220 2079 2061 6970     woken up by a pi
   e7620:	006e 6544 6976 6563 7720 7361 7720 6b6f     n.Device was wok
   e7630:	6e65 7520 2070 7962 7420 6568 5020 7261     en up by the Par
   e7640:	6974 6c63 2065 5452 2043 6128 7466 7265     ticle RTC (after
   e7650:	6120 7320 6570 6963 6966 6465 6e20 6d75      a specified num
   e7660:	6562 2072 666f 7320 6365 6e6f 7364 0029     ber of seconds).
   e7670:	6544 6976 6563 7720 7361 7720 6b6f 6e65     Device was woken
   e7680:	7520 2070 7962 6520 7469 6568 2072 2061      up by either a 
   e7690:	6970 206e 726f 7420 6568 5020 7261 6974     pin or the Parti
   e76a0:	6c63 2065 5452 2043 6128 7466 7265 6120     cle RTC (after a
   e76b0:	7320 6570 6963 6966 6465 6e20 6d75 6562      specified numbe
   e76c0:	2072 666f 7320 6365 6e6f 7364 0029 7473     r of seconds).st
   e76d0:	7461 2e65 6966 7372 5274 6e75 6843 6365     ate.firstRunChec
   e76e0:	206b 203d 6600 7269 7473 7552 566e 6c61     k = .firstRunVal
   e76f0:	6575 3d20 0020 6d70 3e31 3033 7c30 707c     ue = .pm1>300||p
   e7700:	326d 333e 3030 7c7c 6d70 3e34 3033 7c30     m2>300||pm4>300|
   e7710:	707c 316d 3e30 3033 2630 6326 6e6f 3e63     |pm10>300&&conc>
   e7720:	3031 7c30 747c 6d65 3e70 3531 0030 6962     100||temp>150.bi
   e7730:	7473 6e61 4079 6f63 636d 7361 2e74 656e     stany@comcast.ne
   e7740:	0074 6946 7372 2074 7572 2e6e 4e00 746f     t.First run..Not
   e7750:	6620 7269 7473 7220 6e75 002e 7356 7075      first run..Vsup
   e7760:	6620 726f 6120 6c6c 7320 6e65 6f73 7372      for all sensors
   e7770:	3d20 0020 6356 2063 6f66 2072 6c61 206c      = .Vcc for all 
   e7780:	6573 736e 726f 2073 203d 5600 6572 2066     sensors = .Vref 
   e7790:	6f66 2072 6573 736e 726f 3120 3d20 0020     for sensor 1 = .
   e77a0:	7a54 7265 206f 203d 4600 6e69 7369 6568     Tzero = .Finishe
   e77b0:	2064 6553 7474 6e69 2067 7055 5400 2c31     d Setting Up.T1,
   e77c0:	6d20 3156 202c 3143 6800 6f6f 2d6b 6572      mV1, C1.hook-re
   e77d0:	7073 6e6f 6573 672f 746d 664f 7366 7465     sponse/gmtOffset
   e77e0:	5300 7465 7075 6320 6d6f 6c70 7465 0065     .Setup complete.
   e77f0:	6e45 2064 6553 7574 2870 2029 7566 636e     End Setup() func
   e7800:	6974 6e6f 4400 7665 6369 2065 6177 2073     tion.Device was 
   e7810:	6f77 656b 206e 7075 6220 2079 6874 2065     woken up by the 
   e7820:	6150 7472 6369 656c 5220 4354 2820 6661     Particle RTC (af
   e7830:	6574 2072 3531 6d20 6e69 7475 7365 2c29     ter 15 minutes),
   e7840:	6720 206f 6e69 6f74 4420 6565 2070 6c53      go into Deep Sl
   e7850:	6565 0070 5320 2057 6556 2072 203d 3032     eep. SW Ver = 20
   e7860:	3931 3131 2036 2f53 204e 203d 655a 3270     19116 S/N = Zep2
   e7870:	2057 2000 6f4c 2063 203d 6554 7473 5520     W . Loc = Test U
   e7880:	696e 2074 5200 4354 4500 7078 5200 4354     nit .RTC.Exp.RTC
   e7890:	4520 5045 4f52 004d 4441 0043 5246 4d41      EEPROM.ADC.FRAM
   e78a0:	4100 5844 334c 3534 5000 304d 352e 5000     .ADXL345.PM0.5.P
   e78b0:	314d 302e 5000 324d 352e 5000 344d 302e     M1.0.PM2.5.PM4.0
   e78c0:	5000 314d 0030 6c4f 2064 6574 706d 202e     .PM10.Old temp. 
   e78d0:	7073 6e61 6120 646e 6f20 6666 6573 3a74     span and offset:
   e78e0:	0020 4948 4847 4c00 574f 4e00 7765 7420      .HIGH.LOW.New t
   e78f0:	6d65 2e70 7320 6170 206e 6e61 2064 666f     emp. span and of
   e7900:	7366 7465 203a 5700 6568 206e 6167 2073     fset: .When gas 
   e7910:	6f63 636e 6e65 7274 7461 6f69 206e 7473     concentration st
   e7920:	6165 7964 202c 6e65 6574 2072 6f43 636e     eady, enter Conc
   e7930:	6e65 7274 7461 6f69 206e 6e69 7020 6d70     entration in ppm
   e7940:	6620 6c6f 6f6c 6577 2064 7962 2720 7263      followed by 'cr
   e7950:	2027 203d 4500 7272 726f 5320 7465 6974     ' = .Error Setti
   e7960:	676e 5320 6170 006e                         ng Span.

000e7968 <_ZTV10MB85RC256V>:
	...
   e7970:	9645 000d 9647 000d                         E...G...

000e7978 <CSWTCH.57>:
   e7978:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e7988 <_ZL23BlynkWriteHandlerVector>:
   e7988:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7998:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e79a8:	a3a3 000d a3a3 000d 6a81 000d a3a3 000d     .........j......
   e79b8:	6a9d 000d a3a3 000d 6add 000d a3a3 000d     .j.......j......
   e79c8:	5835 000d 58d9 000d 5861 000d a3a3 000d     5X...X..aX......
   e79d8:	7169 000d a3a3 000d 6d0d 000d 58f5 000d     iq.......m...X..
   e79e8:	5935 000d 58b9 000d 588d 000d 5971 000d     5Y...X...X..qY..
   e79f8:	59ad 000d 59e9 000d a3a3 000d 5a25 000d     .Y...Y......%Z..
   e7a08:	5ab5 000d a3a3 000d a3a3 000d a3a3 000d     .Z..............
   e7a18:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a28:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a38:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a48:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a58:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a68:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a78:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a88:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7a98:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7aa8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7ab8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7ac8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7ad8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7ae8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7af8:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b08:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b18:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b28:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b38:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b48:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b58:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b68:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................
   e7b78:	a3a3 000d a3a3 000d a3a3 000d a3a3 000d     ................

000e7b88 <_ZL22BlynkReadHandlerVector>:
   e7b88:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7b98:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7ba8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7bb8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7bc8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7bd8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7be8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7bf8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c08:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c18:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c28:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c38:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c48:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c58:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c68:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c78:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c88:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7c98:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7ca8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7cb8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7cc8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7cd8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7ce8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7cf8:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d08:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d18:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d28:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d38:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d48:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d58:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d68:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................
   e7d78:	a3a1 000d a3a1 000d a3a1 000d a3a1 000d     ................

000e7d88 <_ZTVN5spark13EthernetClassE>:
	...
   e7d90:	ab93 000d ab89 000d ab7f 000d ab75 000d     ............u...
   e7da0:	ab69 000d ab5d 000d ab51 000d ab49 000d     i...]...Q...I...
   e7db0:	ab3f 000d ab35 000d cdf3 000d               ?...5.......

000e7dbc <_ZTV8SPIClass>:
	...
   e7dc4:	ac01 000d ac03 000d 616e 006e 766f 0066     ........nan.ovf.
   e7dd4:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e7de4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e7df4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e7e04:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e7e14:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e7e24:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e7e34:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e7e44:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e7e54:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   e7e64:	0020 6564 6174 6c69 2073 203d 6600 006e      .details = .fn.
   e7e74:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   e7e84:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   e7e94:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   e7ea4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   e7eb4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   e7ec4:	0065 0000                                   e...

000e7ec8 <_ZTV14CellularSignal>:
	...
   e7ed0:	b881 000d b913 000d b883 000d b955 000d     ............U...
   e7ee0:	b889 000d b921 000d b8b5 000d b8e1 000d     ....!...........
   e7ef0:	fffc ffff 0000 0000 b90b 000d               ............

000e7efc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e7f04:	bb59 000d bb5f 000d bba3 000d bb6d 000d     Y..._.......m...
   e7f14:	bb5b 000d                                   [...

000e7f18 <_ZTV9IPAddress>:
	...
   e7f20:	c0f1 000d c0e1 000d c0e3 000d               ............

000e7f2c <_ZTV9USBSerial>:
	...
   e7f34:	c1f5 000d c245 000d c253 000d b0ed 000d     ....E...S.......
   e7f44:	c231 000d c1f7 000d c20d 000d c23f 000d     1...........?...
   e7f54:	c223 000d c1f1 000d                         #.......

000e7f5c <_ZTVN5spark13CellularClassE>:
	...
   e7f64:	c39d 000d c393 000d c389 000d 543b 000d     ............;T..
   e7f74:	542f 000d c37d 000d c371 000d c369 000d     /T..}...q...i...
   e7f84:	c35f 000d c355 000d cdf3 000d               _...U.......

000e7f90 <_ZTV11USARTSerial>:
	...
   e7f98:	c44d 000d c49d 000d c4ab 000d b0ed 000d     M...............
   e7fa8:	c461 000d c483 000d c46f 000d c497 000d     a.......o.......
   e7fb8:	c44f 000d c453 000d                         O...S...

000e7fc0 <_ZTV7TwoWire>:
	...
   e7fc8:	c585 000d c5cf 000d c5a7 000d c587 000d     ................
   e7fd8:	c5af 000d c5b7 000d c5bf 000d c5c7 000d     ................

000e7fe8 <_ZTVN5spark9MeshClassE>:
	...
   e7ff0:	c6f9 000d c6ef 000d c6e5 000d c6db 000d     ................
   e8000:	c6cf 000d c6c3 000d c6b7 000d c6af 000d     ................
   e8010:	c6a5 000d c69b 000d cdf3 000d               ............

000e801c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e8024:	c885 000d c88b 000d cd73 000d c899 000d     ........s.......
   e8034:	c887 000d                                   ....

000e8038 <_ZTV9TCPClient>:
	...
   e8040:	b7ad 000d b7cd 000d c7fd 000d c817 000d     ................
   e8050:	cc19 000d c96b 000d c93d 000d c841 000d     ....k...=...A...
   e8060:	caf5 000d c9f1 000d c99f 000d cbe9 000d     ................
   e8070:	c843 000d c87b 000d c829 000d c89d 000d     C...{...).......
   e8080:	c91d 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e8090:	7265 6f72 2072 203d 6425 0000               error = %d..

000e809c <_ZTVN5spark12NetworkClassE>:
	...
   e80a4:	cd8b 000d cd95 000d cd9f 000d cda9 000d     ................
   e80b4:	cdb3 000d cdbf 000d cdcb 000d cdd7 000d     ................
   e80c4:	cddf 000d cde9 000d cdf3 000d               ............

000e80d0 <atanlo>:
   e80d0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e80e0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e80f0 <atanhi>:
   e80f0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e8100:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e8110:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e8120:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e8130:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e8140:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e8158 <halF>:
   e8158:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e8168 <ln2LO>:
   e8168:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e8178 <ln2HI>:
   e8178:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e8188 <Zero>:
	...
   e8194:	0000 8000                                   ....

000e8198 <npio2_hw>:
   e8198:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e81a8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e81b8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e81c8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e81d8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e81e8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e81f8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e8208:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e8218 <two_over_pi>:
   e8218:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e8228:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e8238:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e8248:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e8258:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e8268:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e8278:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e8288:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e8298:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e82a8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e82b8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e82c8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e82d8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e82e8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e82f8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e8308:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e8318:	e27b 0060 8c6b 00c0                         {.`.k...

000e8320 <init_jk>:
   e8320:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e8330 <PIo2>:
   e8330:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e8340:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e8350:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e8360:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e8370 <TWO52>:
   e8370:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e8380 <day_name.4725>:
   e8380:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e8390:	6972 6153 4a74                                   riSat

000e8395 <mon_name.4726>:
   e8395:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e83a5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e83b5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e83c5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e83d5:	6425 000a                                   %d..

000e83d9 <_ctype_>:
   e83d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e83e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e83f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e8409:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e8419:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e8429:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e8439:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e8449:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e8459:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e84dc <__sf_fake_stdin>:
	...

000e84fc <__sf_fake_stdout>:
	...

000e851c <__sf_fake_stderr>:
	...
   e853c:	4f50 4953 0058 0000                         POSIX...

000e8544 <_DAYS_BEFORE_MONTH>:
   e8544:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e8554:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e8564:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e8574 <DAYS_IN_MONTH>:
   e8574:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e8584:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e8594:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e85a4 <__month_lengths>:
   e85a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e85b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e85c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e85d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e85e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e85f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e8604:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e8614:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e8624:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e8634:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e8644:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e8654:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e8660 <fpi.5344>:
   e8660:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e8670:	0000 0000                                   ....

000e8674 <fpinan.5380>:
   e8674:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e8684:	0000 0000 6e69 7469 0079 0000               ....inity...

000e8690 <tinytens>:
   e8690:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e86a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e86b0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e86c0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e86d0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e86e0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e86f0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e8700:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e8710:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e8720:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e8730:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e8740:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e8750:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e8760:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e8770:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e8780:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e8790:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e87a0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e87b0:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e87c0:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e87d0:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e87e0:	2053 7025 0000 0000                         S %p....

000e87e8 <_C_time_locale>:
   e87e8:	86c0 000e 86c4 000e 86c8 000e 86cc 000e     ................
   e87f8:	86d0 000e 86d4 000e 86d8 000e 86dc 000e     ................
   e8808:	86e0 000e 86e4 000e 86e8 000e 86ec 000e     ................
   e8818:	86f0 000e 86f8 000e 8701 000e 8707 000e     ................
   e8828:	86d0 000e 870d 000e 8712 000e 8717 000e     ................
   e8838:	871e 000e 8728 000e 8730 000e 8739 000e     ....(...0...9...
   e8848:	8742 000e 8746 000e 874a 000e 874e 000e     B...F...J...N...
   e8858:	8752 000e 8756 000e 875a 000e 875e 000e     R...V...Z...^...
   e8868:	8765 000e 876c 000e 8774 000e 877e 000e     e...l...t...~...
   e8878:	8787 000e 878e 000e 8797 000e 87a0 000e     ................
   e8888:	87a9 000e 789e 000e 87be 000e 87c1 000e     .....x..........
   e8898:	86f0 000e 86f8 000e 8701 000e 8707 000e     ................
   e88a8:	86d0 000e 870d 000e 8712 000e 8717 000e     ................
   e88b8:	871e 000e 8728 000e 8730 000e 8739 000e     ....(...0...9...
   e88c8:	7df8 000e 87d9 000e 6c91 000e 6c91 000e     .}.......l...l..
   e88d8:	6c91 000e 6c91 000e 6c91 000e 5a54 4700     .l...l...l..TZ.G
   e88e8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e88f8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e8908:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e8918:	3a6e 6825 2575 006e                         n:%hu%n.

000e8920 <__mprec_tens>:
   e8920:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e8930:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e8940:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e8950:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e8960:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e8970:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e8980:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e8990:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e89a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e89b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e89c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e89d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e89e0:	9db4 79d9 7843 44ea                         ...yCx.D

000e89e8 <__mprec_bigtens>:
   e89e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e89f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e8a08:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e8a10 <p05.5387>:
   e8a10:	0005 0000 0019 0000 007d 0000               ........}...

000e8a1c <link_const_variable_data_end>:
   e8a1c:	000d8ca1 	.word	0x000d8ca1
   e8a20:	000d9321 	.word	0x000d9321
   e8a24:	000d9641 	.word	0x000d9641
   e8a28:	000d979d 	.word	0x000d979d
   e8a2c:	000d9905 	.word	0x000d9905
   e8a30:	000d9cd5 	.word	0x000d9cd5
   e8a34:	000d9e37 	.word	0x000d9e37
   e8a38:	000da1fb 	.word	0x000da1fb
   e8a3c:	000da38d 	.word	0x000da38d
   e8a40:	000da39d 	.word	0x000da39d
   e8a44:	000da3d1 	.word	0x000da3d1
   e8a48:	000dab9d 	.word	0x000dab9d
   e8a4c:	000dad0d 	.word	0x000dad0d
   e8a50:	000db0dd 	.word	0x000db0dd
   e8a54:	000db4b5 	.word	0x000db4b5
   e8a58:	000db771 	.word	0x000db771
   e8a5c:	000db865 	.word	0x000db865
   e8a60:	000dc41d 	.word	0x000dc41d
   e8a64:	000dc7ad 	.word	0x000dc7ad
   e8a68:	000dcec1 	.word	0x000dcec1
   e8a6c:	000dd011 	.word	0x000dd011
   e8a70:	000dd0e9 	.word	0x000dd0e9
   e8a74:	000dd16d 	.word	0x000dd16d
   e8a78:	000dd231 	.word	0x000dd231
   e8a7c:	000dd2f5 	.word	0x000dd2f5
