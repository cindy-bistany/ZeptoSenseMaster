
c:/Code/ZeptoSensorBlynk-master/zeptologger/target/1.4.3/argon/zeptologger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013760  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000278fc  2**0
                  CONTENTS
  4 .data         00000150  2003d5d4  000e7780  0001d5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000010cc  2003d728  2003d728  0002d728  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000e78d0  000e78d0  000278d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e78f8  000e78f8  000278f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015fd45  00000000  00000000  000278fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cbdf  00000000  00000000  00187641  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f1ba  00000000  00000000  001a4220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003b08  00000000  00000000  001d33da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006848  00000000  00000000  001d6ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004b3f0  00000000  00000000  001dd72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b207  00000000  00000000  00228b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113835  00000000  00000000  00273d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001213c  00000000  00000000  00387558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00e fb17 	bl	e2664 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00e fb1c 	bl	e267a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d5d4 	.word	0x2003d5d4
   d404c:	000e7780 	.word	0x000e7780
   d4050:	2003d724 	.word	0x2003d724
   d4054:	2003d728 	.word	0x2003d728
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 fd37 	bl	daad0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e7780 	.word	0x000e7780
   d4084:	000e771c 	.word	0x000e771c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f003 bc68 	b.w	d795c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f003 ff6b 	bl	d7f68 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f006 bce9 	b.w	daa6c <_post_loop>

000d409a <_Znwj>:
   d409a:	f005 be09 	b.w	d9cb0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f005 be0f 	b.w	d9cc0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f005 be0d 	b.w	d9cc0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00d fc73 	bl	e19cc <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00d fc67 	bl	e19c8 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00d fe11 	bl	e1d30 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00d ff31 	bl	e1f84 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00e f87d 	bl	e2250 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00e f85b 	bl	e223c <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00e f82f 	bl	e2214 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00e f821 	bl	e2228 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00d fff5 	bl	e2200 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00d ffdd 	bl	e2200 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00d ffc3 	bl	e2200 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00d ffba 	bl	e2200 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00d fce5 	bl	e1c64 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00d ffa5 	bl	e2200 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00d ff9c 	bl	e2200 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00d fcc7 	bl	e1c64 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00d ff89 	bl	e2200 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00d ff71 	bl	e2200 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00d ff59 	bl	e2200 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00d fc85 	bl	e1c64 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00d ff49 	bl	e2200 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00d fc75 	bl	e1c64 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f005 fc82 	bl	d9cb0 <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00e f962 	bl	e267a <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00e f94d 	bl	e2664 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00d ff14 	bl	e2214 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00d ff2a 	bl	e2250 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00d ff6d 	bl	e22e0 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00d fc0f 	bl	e1c44 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00d feda 	bl	e2214 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00d fed2 	bl	e2214 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00d fecb 	bl	e2214 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00d fee1 	bl	e2250 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00d fed9 	bl	e2250 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00d ff1c 	bl	e22e0 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00d ff17 	bl	e22e0 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00d fbb1 	bl	e1c44 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00d fbfa 	bl	e1d30 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f005 bbb1 	b.w	d9cc0 <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f00f fe59 	bl	e4298 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f00e fff0 	bl	e360c <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f00e ffd6 	bl	e360c <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000dd011 	.word	0x000dd011
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000dd311 	.word	0x000dd311
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e59b8 	.word	0x000e59b8

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000dd311 	.word	0x000dd311

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000dd011 	.word	0x000dd011
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}

000d52f2 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d52f2:	4770      	bx	lr

000d52f4 <_Z8ADXL_ISRv>:

//******************** ISR *********************
// Look for Interrupts and Triggered Action    
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d52f4:	4b01      	ldr	r3, [pc, #4]	; (d52fc <_Z8ADXL_ISRv+0x8>)
   d52f6:	2201      	movs	r2, #1
   d52f8:	701a      	strb	r2, [r3, #0]
   d52fa:	4770      	bx	lr
   d52fc:	2003df0c 	.word	0x2003df0c

000d5300 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
   d5300:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
   d5302:	f006 f85f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5306:	215b      	movs	r1, #91	; 0x5b
   d5308:	f004 fff2 	bl	da2f0 <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
   d530c:	f006 f85a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5310:	4604      	mov	r4, r0
   d5312:	f004 f987 	bl	d9624 <_Z11BlynkMillisv>
   d5316:	220a      	movs	r2, #10
   d5318:	4601      	mov	r1, r0
   d531a:	4620      	mov	r0, r4
   d531c:	f005 f821 	bl	da362 <_ZN5Print5printEmi>
            BLYNK_PRINT.print(BLYNK_F("] "));
   d5320:	f006 f850 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5324:	4902      	ldr	r1, [pc, #8]	; (d5330 <_ZL14BLYNK_LOG_TIMEv+0x30>)
        }
   d5326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
   d532a:	f004 bfdd 	b.w	da2e8 <_ZN5Print5printEPKc>
   d532e:	bf00      	nop
   d5330:	000e5c23 	.word	0x000e5c23

000d5334 <__tcf_0>:


BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d5334:	b538      	push	{r3, r4, r5, lr}
   d5336:	4d06      	ldr	r5, [pc, #24]	; (d5350 <__tcf_0+0x1c>)
   d5338:	2400      	movs	r4, #0
   d533a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d533e:	4428      	add	r0, r5
   d5340:	3c10      	subs	r4, #16
   d5342:	f004 fe1b 	bl	d9f7c <_ZN6StringD1Ev>
   d5346:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d534a:	d1f6      	bne.n	d533a <__tcf_0+0x6>
   d534c:	bd38      	pop	{r3, r4, r5, pc}
   d534e:	bf00      	nop
   d5350:	2003d778 	.word	0x2003d778

000d5354 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5354:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5356:	4608      	mov	r0, r1
   d5358:	f00d f871 	bl	e243e <atoi>
   d535c:	4c08      	ldr	r4, [pc, #32]	; (d5380 <_Z16gmtOffsetHandlerPKcS0_+0x2c>)
  gmtOffsetValid = true;
   d535e:	4b09      	ldr	r3, [pc, #36]	; (d5384 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5360:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d5362:	2201      	movs	r2, #1
   d5364:	701a      	strb	r2, [r3, #0]
  DEBUG_PRINT("GMT seconds offset is: ");
   d5366:	f006 f82d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d536a:	4907      	ldr	r1, [pc, #28]	; (d5388 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
   d536c:	f004 ffbc 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d5370:	f006 f828 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5374:	6821      	ldr	r1, [r4, #0]
   d5376:	220a      	movs	r2, #10
}
   d5378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
  gmtOffsetValid = true;
  DEBUG_PRINT("GMT seconds offset is: ");
  DEBUG_PRINTLN(gmtOffsetSeconds);
   d537c:	f005 b842 	b.w	da404 <_ZN5Print7printlnEii>
   d5380:	2003d61c 	.word	0x2003d61c
   d5384:	2003e1dc 	.word	0x2003e1dc
   d5388:	000e5c26 	.word	0x000e5c26

000d538c <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d538c:	b510      	push	{r4, lr}
   d538e:	4b05      	ldr	r3, [pc, #20]	; (d53a4 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5390:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5392:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d5394:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5396:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d539a:	f004 fba3 	bl	d9ae4 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d539e:	4620      	mov	r0, r4
   d53a0:	bd10      	pop	{r4, pc}
   d53a2:	bf00      	nop
   d53a4:	000e5bc4 	.word	0x000e5bc4

000d53a8 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d53a8:	b510      	push	{r4, lr}
   d53aa:	4604      	mov	r4, r0
    setActive(false);
}
   d53ac:	f7ff ffee 	bl	d538c <_ZN8particle9LEDStatusD1Ev>
   d53b0:	4620      	mov	r0, r4
   d53b2:	2120      	movs	r1, #32
   d53b4:	f006 febb 	bl	dc12e <_ZdlPvj>
   d53b8:	4620      	mov	r0, r4
   d53ba:	bd10      	pop	{r4, pc}

000d53bc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>:
        #include <ctype.h>
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
   d53bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53be:	4604      	mov	r4, r0
   d53c0:	460e      	mov	r6, r1
   d53c2:	4617      	mov	r7, r2
            if (len) {
                BLYNK_LOG_TIME();
   d53c4:	f7ff ff9c 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
                BLYNK_PRINT.print(msg);
   d53c8:	f005 fffc 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d53cc:	4621      	mov	r1, r4
   d53ce:	f004 ff8b 	bl	da2e8 <_ZN5Print5printEPKc>
   d53d2:	4437      	add	r7, r6
                int l2 = len;
                const uint8_t* octets = (const uint8_t*)addr;
                bool prev_print = true;
   d53d4:	2401      	movs	r4, #1
                while (l2--) {
   d53d6:	42be      	cmp	r6, r7
   d53d8:	d028      	beq.n	d542c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x70>
                    const uint8_t c = *octets++ & 0xFF;
   d53da:	f816 5b01 	ldrb.w	r5, [r6], #1
                    if (c >= 32 && c < 127) {
   d53de:	f1a5 0320 	sub.w	r3, r5, #32
   d53e2:	2b5e      	cmp	r3, #94	; 0x5e
   d53e4:	d80b      	bhi.n	d53fe <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x42>
                        if (!prev_print) { BLYNK_PRINT.print(']'); }
   d53e6:	b924      	cbnz	r4, d53f2 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x36>
   d53e8:	f005 ffec 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d53ec:	215d      	movs	r1, #93	; 0x5d
   d53ee:	f004 ff7f 	bl	da2f0 <_ZN5Print5printEc>
                        BLYNK_PRINT.print((char)c);
   d53f2:	f005 ffe7 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d53f6:	4629      	mov	r1, r5
   d53f8:	f004 ff7a 	bl	da2f0 <_ZN5Print5printEc>
   d53fc:	e7ea      	b.n	d53d4 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x18>
                        prev_print = true;
                    } else {
                        BLYNK_PRINT.print(prev_print?'[':'|');
   d53fe:	f005 ffe1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5402:	2c00      	cmp	r4, #0
   d5404:	bf14      	ite	ne
   d5406:	215b      	movne	r1, #91	; 0x5b
   d5408:	217c      	moveq	r1, #124	; 0x7c
   d540a:	f004 ff71 	bl	da2f0 <_ZN5Print5printEc>
                        if (c < 0x10) { BLYNK_PRINT.print('0'); }
   d540e:	2d0f      	cmp	r5, #15
   d5410:	d804      	bhi.n	d541c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x60>
   d5412:	f005 ffd7 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5416:	2130      	movs	r1, #48	; 0x30
   d5418:	f004 ff6a 	bl	da2f0 <_ZN5Print5printEc>
                        BLYNK_PRINT.print(c, HEX);
   d541c:	f005 ffd2 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5420:	2210      	movs	r2, #16
   d5422:	4629      	mov	r1, r5
   d5424:	f004 ffaa 	bl	da37c <_ZN5Print5printEhi>
                        prev_print = false;
   d5428:	2400      	movs	r4, #0
   d542a:	e7d4      	b.n	d53d6 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x1a>
                    }
                }
                if (!prev_print) {
   d542c:	b924      	cbnz	r4, d5438 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0+0x7c>
                    BLYNK_PRINT.print(']');
   d542e:	f005 ffc9 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5432:	215d      	movs	r1, #93	; 0x5d
   d5434:	f004 ff5c 	bl	da2f0 <_ZN5Print5printEc>
                }
                BLYNK_PRINT.println();
   d5438:	f005 ffc4 	bl	db3c4 <_Z22__fetch_global_Serial1v>
            }
        }
   d543c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    }
                }
                if (!prev_print) {
                    BLYNK_PRINT.print(']');
                }
                BLYNK_PRINT.println();
   d5440:	f004 bf59 	b.w	da2f6 <_ZN5Print7printlnEv>

000d5444 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5444:	2200      	movs	r2, #0
   d5446:	4611      	mov	r1, r2
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	f004 bbc1 	b.w	d9bd0 <network_ready>

000d544e <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d544e:	2300      	movs	r3, #0
   d5450:	461a      	mov	r2, r3
   d5452:	4619      	mov	r1, r3
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	f004 bbc3 	b.w	d9be0 <network_on>
	...

000d545c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d545c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d545e:	f004 f991 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5462:	4b03      	ldr	r3, [pc, #12]	; (d5470 <_ZN10CloudClass7processEv+0x14>)
   d5464:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d5466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d546a:	f004 bbe9 	b.w	d9c40 <spark_process>
   d546e:	bf00      	nop
   d5470:	2003e610 	.word	0x2003e610

000d5474 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5474:	6803      	ldr	r3, [r0, #0]
   d5476:	b12b      	cbz	r3, d5484 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d5478:	6842      	ldr	r2, [r0, #4]
   d547a:	4293      	cmp	r3, r2
   d547c:	d202      	bcs.n	d5484 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d547e:	4618      	mov	r0, r3
   d5480:	f00c bfdd 	b.w	e243e <atoi>
   d5484:	2000      	movs	r0, #0
   d5486:	4770      	bx	lr

000d5488 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d5488:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d548a:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d548c:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d548e:	b145      	cbz	r5, d54a2 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d5490:	6843      	ldr	r3, [r0, #4]
   d5492:	429d      	cmp	r5, r3
   d5494:	d205      	bcs.n	d54a2 <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d5496:	4628      	mov	r0, r5
   d5498:	f00e f8b0 	bl	e35fc <strlen>
   d549c:	3001      	adds	r0, #1
   d549e:	4405      	add	r5, r0
   d54a0:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d54a2:	4620      	mov	r0, r4
   d54a4:	bd38      	pop	{r3, r4, r5, pc}

000d54a6 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d54a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54a8:	4604      	mov	r4, r0
    if (str == NULL) {
   d54aa:	460f      	mov	r7, r1
   d54ac:	6846      	ldr	r6, [r0, #4]
   d54ae:	b921      	cbnz	r1, d54ba <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d54b0:	6803      	ldr	r3, [r0, #0]
   d54b2:	1c72      	adds	r2, r6, #1
   d54b4:	6042      	str	r2, [r0, #4]
   d54b6:	5599      	strb	r1, [r3, r6]
        return;
   d54b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d54ba:	4608      	mov	r0, r1
   d54bc:	f00e f89e 	bl	e35fc <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d54c0:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d54c2:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d54c4:	19aa      	adds	r2, r5, r6
   d54c6:	429a      	cmp	r2, r3
   d54c8:	d808      	bhi.n	d54dc <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d54ca:	6820      	ldr	r0, [r4, #0]
   d54cc:	462a      	mov	r2, r5
   d54ce:	4639      	mov	r1, r7
   d54d0:	4430      	add	r0, r6
   d54d2:	f00d f8c7 	bl	e2664 <memcpy>
    len += l;
   d54d6:	6863      	ldr	r3, [r4, #4]
   d54d8:	441d      	add	r5, r3
   d54da:	6065      	str	r5, [r4, #4]
   d54dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d54e0 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d54e0:	b570      	push	{r4, r5, r6, lr}
   d54e2:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	68a6      	ldr	r6, [r4, #8]
   d54e8:	6825      	ldr	r5, [r4, #0]
   d54ea:	4a05      	ldr	r2, [pc, #20]	; (d5500 <_ZN10BlynkParam3addEi+0x20>)
   d54ec:	460b      	mov	r3, r1
   d54ee:	1a31      	subs	r1, r6, r0
   d54f0:	4428      	add	r0, r5
   d54f2:	f004 fc05 	bl	d9d00 <snprintf>
   d54f6:	6863      	ldr	r3, [r4, #4]
   d54f8:	3001      	adds	r0, #1
   d54fa:	4418      	add	r0, r3
   d54fc:	6060      	str	r0, [r4, #4]
   d54fe:	bd70      	pop	{r4, r5, r6, pc}
   d5500:	000e5c3e 	.word	0x000e5c3e

000d5504 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d5504:	b570      	push	{r4, r5, r6, lr}
   d5506:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	68a6      	ldr	r6, [r4, #8]
   d550c:	6825      	ldr	r5, [r4, #0]
   d550e:	4a05      	ldr	r2, [pc, #20]	; (d5524 <_ZN10BlynkParam3addEl+0x20>)
   d5510:	460b      	mov	r3, r1
   d5512:	1a31      	subs	r1, r6, r0
   d5514:	4428      	add	r0, r5
   d5516:	f004 fbf3 	bl	d9d00 <snprintf>
   d551a:	6863      	ldr	r3, [r4, #4]
   d551c:	3001      	adds	r0, #1
   d551e:	4418      	add	r0, r3
   d5520:	6060      	str	r0, [r4, #4]
   d5522:	bd70      	pop	{r4, r5, r6, pc}
   d5524:	000e5c41 	.word	0x000e5c41

000d5528 <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d5528:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
   d552a:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d552c:	b087      	sub	sp, #28
   d552e:	4604      	mov	r4, r0
        if (domain) {
   d5530:	b1ef      	cbz	r7, d556e <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
   d5532:	f7ff fee5 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5536:	f005 ff45 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d553a:	492f      	ldr	r1, [pc, #188]	; (d55f8 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d553c:	f004 fed4 	bl	da2e8 <_ZN5Print5printEPKc>
   d5540:	f005 ff40 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5544:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5546:	f004 fecf 	bl	da2e8 <_ZN5Print5printEPKc>
   d554a:	f005 ff3b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d554e:	213a      	movs	r1, #58	; 0x3a
   d5550:	f004 fece 	bl	da2f0 <_ZN5Print5printEc>
   d5554:	f005 ff36 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5558:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d555a:	220a      	movs	r2, #10
   d555c:	f004 ff52 	bl	da404 <_ZN5Print7printlnEii>
            return (1 == client.connect(domain, port));
   d5560:	2300      	movs	r3, #0
   d5562:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d5564:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5566:	4620      	mov	r0, r4
   d5568:	f006 f99c 	bl	db8a4 <_ZN9TCPClient7connectEPKctm>
   d556c:	e03f      	b.n	d55ee <_ZN22BlynkTransportParticle7connectEv+0xc6>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
   d556e:	f7ff fec7 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5572:	f005 ff27 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5576:	4920      	ldr	r1, [pc, #128]	; (d55f8 <_ZN22BlynkTransportParticle7connectEv+0xd0>)
   d5578:	f004 feb6 	bl	da2e8 <_ZN5Print5printEPKc>
   d557c:	f005 ff22 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5580:	220a      	movs	r2, #10
   d5582:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d5586:	f004 fef9 	bl	da37c <_ZN5Print5printEhi>
   d558a:	f005 ff1b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d558e:	212e      	movs	r1, #46	; 0x2e
   d5590:	f004 feae 	bl	da2f0 <_ZN5Print5printEc>
   d5594:	f005 ff16 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5598:	220a      	movs	r2, #10
   d559a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d559e:	f004 feed 	bl	da37c <_ZN5Print5printEhi>
   d55a2:	f005 ff0f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d55a6:	212e      	movs	r1, #46	; 0x2e
   d55a8:	f004 fea2 	bl	da2f0 <_ZN5Print5printEc>
   d55ac:	4625      	mov	r5, r4
   d55ae:	f005 ff09 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d55b2:	220a      	movs	r2, #10
   d55b4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d55b8:	f004 fee0 	bl	da37c <_ZN5Print5printEhi>
   d55bc:	f005 ff02 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d55c0:	212e      	movs	r1, #46	; 0x2e
   d55c2:	f004 fe95 	bl	da2f0 <_ZN5Print5printEc>
   d55c6:	f005 fefd 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d55ca:	220a      	movs	r2, #10
   d55cc:	f815 1f20 	ldrb.w	r1, [r5, #32]!
   d55d0:	f004 fed6 	bl	da380 <_ZN5Print7printlnEhi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d55d4:	4b09      	ldr	r3, [pc, #36]	; (d55fc <_ZN22BlynkTransportParticle7connectEv+0xd4>)
   d55d6:	9300      	str	r3, [sp, #0]
   d55d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55da:	ae01      	add	r6, sp, #4
   d55dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d55de:	682b      	ldr	r3, [r5, #0]
   d55e0:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   d55e2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d55e4:	463b      	mov	r3, r7
   d55e6:	4669      	mov	r1, sp
   d55e8:	4620      	mov	r0, r4
   d55ea:	f006 f9dd 	bl	db9a8 <_ZN9TCPClient7connectE9IPAddresstm>
   d55ee:	1e43      	subs	r3, r0, #1
   d55f0:	4258      	negs	r0, r3
   d55f2:	4158      	adcs	r0, r3
        }
        return 0;
    }
   d55f4:	b007      	add	sp, #28
   d55f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55f8:	000e5c45 	.word	0x000e5c45
   d55fc:	000e6bfc 	.word	0x000e6bfc

000d5600 <_ZN13BlynkParticle6configEPKcS1_t>:
public:
    BlynkParticle(BlynkTransportParticle& transp)
        : Base(transp)
    {}

    void config(const char* auth,
   d5600:	b570      	push	{r4, r5, r6, lr}
        BlynkOnDisconnected();
    }

    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

   d5602:	6041      	str	r1, [r0, #4]
   d5604:	4604      	mov	r4, r0
   d5606:	4616      	mov	r6, r2
   d5608:	461d      	mov	r5, r3
protected:
   d560a:	f004 f80b 	bl	d9624 <_Z11BlynkMillisv>
   d560e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d5612:	3808      	subs	r0, #8
   d5614:	6120      	str	r0, [r4, #16]
   d5616:	60e0      	str	r0, [r4, #12]
   d5618:	6160      	str	r0, [r4, #20]
    }

    void sendCmd(uint8_t cmd, uint16_t id = 0, const void* data = NULL, size_t length = 0, const void* data2 = NULL, size_t length2 = 0);

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
   d561a:	f7ff fe71 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d561e:	f005 fed1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5622:	4903      	ldr	r1, [pc, #12]	; (d5630 <_ZN13BlynkParticle6configEPKcS1_t+0x30>)
   d5624:	f004 fe73 	bl	da30e <_ZN5Print7printlnEPKc>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d5628:	6821      	ldr	r1, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d562a:	634e      	str	r6, [r1, #52]	; 0x34
        port = p;
   d562c:	870d      	strh	r5, [r1, #56]	; 0x38
   d562e:	bd70      	pop	{r4, r5, r6, pc}
   d5630:	000e5c54 	.word	0x000e5c54

000d5634 <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d5634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5638:	4692      	mov	sl, r2
   d563a:	b08f      	sub	sp, #60	; 0x3c
   d563c:	4699      	mov	r9, r3
   d563e:	4606      	mov	r6, r0
   d5640:	461d      	mov	r5, r3
   d5642:	4688      	mov	r8, r1
  byte error, address;
  bool result = true;
   d5644:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d5646:	ebc9 0305 	rsb	r3, r9, r5
   d564a:	459a      	cmp	sl, r3
   d564c:	d97b      	bls.n	d5746 <_Z15checkI2CDevicesP6StringPhjPb+0x112>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d564e:	f818 7b01 	ldrb.w	r7, [r8], #1
    Wire.beginTransmission(address);
   d5652:	f006 fd47 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d5656:	4639      	mov	r1, r7
   d5658:	f005 ff50 	bl	db4fc <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d565c:	f006 fd42 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d5660:	f005 ff57 	bl	db512 <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d5664:	bb78      	cbnz	r0, d56c6 <_Z15checkI2CDevicesP6StringPhjPb+0x92>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d5666:	f005 fead 	bl	db3c4 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d566a:	4939      	ldr	r1, [pc, #228]	; (d5750 <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d566c:	4683      	mov	fp, r0
   d566e:	a802      	add	r0, sp, #8
   d5670:	f004 fccb 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d5674:	4631      	mov	r1, r6
   d5676:	a802      	add	r0, sp, #8
   d5678:	f004 fd66 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d567c:	4935      	ldr	r1, [pc, #212]	; (d5754 <_Z15checkI2CDevicesP6StringPhjPb+0x120>)
   d567e:	f004 fd6f 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d5682:	4935      	ldr	r1, [pc, #212]	; (d5758 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d5684:	f004 fd6c 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d5688:	2210      	movs	r2, #16
   d568a:	9001      	str	r0, [sp, #4]
   d568c:	4639      	mov	r1, r7
   d568e:	a806      	add	r0, sp, #24
   d5690:	f004 fd1e 	bl	da0d0 <_ZN6StringC1Ehh>
   d5694:	9b01      	ldr	r3, [sp, #4]
   d5696:	a906      	add	r1, sp, #24
   d5698:	4618      	mov	r0, r3
   d569a:	f004 fd55 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d569e:	4601      	mov	r1, r0
   d56a0:	a80a      	add	r0, sp, #40	; 0x28
   d56a2:	f004 fcf1 	bl	da088 <_ZN6StringC1ERKS_>
   d56a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   d56a8:	4658      	mov	r0, fp
   d56aa:	f004 fe30 	bl	da30e <_ZN5Print7printlnEPKc>
   d56ae:	a80a      	add	r0, sp, #40	; 0x28
   d56b0:	f004 fc64 	bl	d9f7c <_ZN6StringD1Ev>
   d56b4:	a806      	add	r0, sp, #24
   d56b6:	f004 fc61 	bl	d9f7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d56ba:	a802      	add	r0, sp, #8
   d56bc:	f004 fc5e 	bl	d9f7c <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d56c0:	2301      	movs	r3, #1
   d56c2:	702b      	strb	r3, [r5, #0]
   d56c4:	e03c      	b.n	d5740 <_Z15checkI2CDevicesP6StringPhjPb+0x10c>
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (!error==0)
    {
      Wire.reset();
   d56c6:	f006 fd0d 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d56ca:	f005 ff29 	bl	db520 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d56ce:	f006 fd09 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d56d2:	4639      	mov	r1, r7
   d56d4:	f005 ff12 	bl	db4fc <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d56d8:	f006 fd04 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d56dc:	f005 ff19 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d56e0:	2800      	cmp	r0, #0
   d56e2:	d0c0      	beq.n	d5666 <_Z15checkI2CDevicesP6StringPhjPb+0x32>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d56e4:	f005 fe6e 	bl	db3c4 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d56e8:	4919      	ldr	r1, [pc, #100]	; (d5750 <_Z15checkI2CDevicesP6StringPhjPb+0x11c>)
   d56ea:	4604      	mov	r4, r0
   d56ec:	a802      	add	r0, sp, #8
   d56ee:	f004 fc8c 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d56f2:	4631      	mov	r1, r6
   d56f4:	a802      	add	r0, sp, #8
   d56f6:	f004 fd27 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d56fa:	4918      	ldr	r1, [pc, #96]	; (d575c <_Z15checkI2CDevicesP6StringPhjPb+0x128>)
   d56fc:	f004 fd30 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d5700:	4915      	ldr	r1, [pc, #84]	; (d5758 <_Z15checkI2CDevicesP6StringPhjPb+0x124>)
   d5702:	f004 fd2d 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d5706:	2210      	movs	r2, #16
   d5708:	4683      	mov	fp, r0
   d570a:	4639      	mov	r1, r7
   d570c:	a806      	add	r0, sp, #24
   d570e:	f004 fcdf 	bl	da0d0 <_ZN6StringC1Ehh>
   d5712:	a906      	add	r1, sp, #24
   d5714:	4658      	mov	r0, fp
   d5716:	f004 fd17 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d571a:	4601      	mov	r1, r0
   d571c:	a80a      	add	r0, sp, #40	; 0x28
   d571e:	f004 fcb3 	bl	da088 <_ZN6StringC1ERKS_>
   d5722:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5724:	4620      	mov	r0, r4
   d5726:	f004 fdf2 	bl	da30e <_ZN5Print7printlnEPKc>
   d572a:	a80a      	add	r0, sp, #40	; 0x28
   d572c:	f004 fc26 	bl	d9f7c <_ZN6StringD1Ev>
   d5730:	a806      	add	r0, sp, #24
   d5732:	f004 fc23 	bl	d9f7c <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d5736:	2400      	movs	r4, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5738:	a802      	add	r0, sp, #8
   d573a:	f004 fc1f 	bl	d9f7c <_ZN6StringD1Ev>
   d573e:	702c      	strb	r4, [r5, #0]
   d5740:	3610      	adds	r6, #16
   d5742:	3501      	adds	r5, #1
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d5744:	e77f      	b.n	d5646 <_Z15checkI2CDevicesP6StringPhjPb+0x12>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d5746:	4620      	mov	r0, r4
   d5748:	b00f      	add	sp, #60	; 0x3c
   d574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d574e:	bf00      	nop
   d5750:	000e5ce2 	.word	0x000e5ce2
   d5754:	000e5cfa 	.word	0x000e5cfa
   d5758:	000e5cea 	.word	0x000e5cea
   d575c:	000e5cf6 	.word	0x000e5cf6

000d5760 <_Z9saveStatev>:
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5760:	f240 431c 	movw	r3, #1052	; 0x41c
   d5764:	4a02      	ldr	r2, [pc, #8]	; (d5770 <_Z9saveStatev+0x10>)
   d5766:	4803      	ldr	r0, [pc, #12]	; (d5774 <_Z9saveStatev+0x14>)
   d5768:	2100      	movs	r1, #0
   d576a:	f003 b913 	b.w	d8994 <_ZN10MB85RC256V9writeDataEjPKhj>
   d576e:	bf00      	nop
   d5770:	2003dad8 	.word	0x2003dad8
   d5774:	2003d760 	.word	0x2003d760

000d5778 <_Z9loadStatev>:
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5778:	f240 431c 	movw	r3, #1052	; 0x41c
   d577c:	4a02      	ldr	r2, [pc, #8]	; (d5788 <_Z9loadStatev+0x10>)
   d577e:	4803      	ldr	r0, [pc, #12]	; (d578c <_Z9loadStatev+0x14>)
   d5780:	2100      	movs	r1, #0
   d5782:	f003 b8bb 	b.w	d88fc <_ZN10MB85RC256V8readDataEjPhj>
   d5786:	bf00      	nop
   d5788:	2003dad8 	.word	0x2003dad8
   d578c:	2003d760 	.word	0x2003d760

000d5790 <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d5790:	b507      	push	{r0, r1, r2, lr}
  power.setPowerON(EXT3V3,false);
   d5792:	2200      	movs	r2, #0
   d5794:	2102      	movs	r1, #2
   d5796:	4815      	ldr	r0, [pc, #84]	; (d57ec <_Z9deepSleepv+0x5c>)
   d5798:	f003 f9f6 	bl	d8b88 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d579c:	2200      	movs	r2, #0
   d579e:	2103      	movs	r1, #3
   d57a0:	4812      	ldr	r0, [pc, #72]	; (d57ec <_Z9deepSleepv+0x5c>)
   d57a2:	f003 f9f1 	bl	d8b88 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d57a6:	f006 fc9d 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d57aa:	f005 feb5 	bl	db518 <_ZN7TwoWire9isEnabledEv>
   d57ae:	b918      	cbnz	r0, d57b8 <_Z9deepSleepv+0x28>
    Wire.end();
   d57b0:	f006 fc98 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d57b4:	f005 fe88 	bl	db4c8 <_ZN7TwoWire3endEv>
  }  

  DEBUG_PRINTLN("Going to deep sleep");
   d57b8:	f005 fe04 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d57bc:	490c      	ldr	r1, [pc, #48]	; (d57f0 <_Z9deepSleepv+0x60>)
   d57be:	f004 fda6 	bl	da30e <_ZN5Print7printlnEPKc>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d57c2:	480c      	ldr	r0, [pc, #48]	; (d57f4 <_Z9deepSleepv+0x64>)
   d57c4:	2300      	movs	r3, #0
   d57c6:	461a      	mov	r2, r3
   d57c8:	4619      	mov	r1, r3
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	f004 fa10 	bl	d9bf0 <network_off>
  Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  #endif  
  delay(5000);
   d57d0:	f241 3088 	movw	r0, #5000	; 0x1388
   d57d4:	f005 f8ac 	bl	da930 <delay>
  System.sleep(SLEEP_MODE_DEEP);
   d57d8:	4b07      	ldr	r3, [pc, #28]	; (d57f8 <_Z9deepSleepv+0x68>)
   d57da:	2200      	movs	r2, #0
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	2101      	movs	r1, #1
   d57e0:	4668      	mov	r0, sp
   d57e2:	f004 fb51 	bl	d9e88 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d57e6:	b003      	add	sp, #12
   d57e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d57ec:	2003def4 	.word	0x2003def4
   d57f0:	000e5d42 	.word	0x000e5d42
   d57f4:	2003e5e0 	.word	0x2003e5e0
   d57f8:	2003df68 	.word	0x2003df68

000d57fc <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
}

BLYNK_APP_DISCONNECTED() {
   d57fc:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d57fe:	4b05      	ldr	r3, [pc, #20]	; (d5814 <BlynkWidgetWriteInternalPinADIS+0x18>)
   d5800:	2200      	movs	r2, #0
   d5802:	701a      	strb	r2, [r3, #0]
 DEBUG_PRINTLN("Disconnected");
   d5804:	f005 fdde 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5808:	4903      	ldr	r1, [pc, #12]	; (d5818 <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d580a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 DEBUG_PRINTLN("Disconnected");
   d580e:	f004 bd7e 	b.w	da30e <_ZN5Print7printlnEPKc>
   d5812:	bf00      	nop
   d5814:	2003da9c 	.word	0x2003da9c
   d5818:	000e5d56 	.word	0x000e5d56

000d581c <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d581c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d581e:	6809      	ldr	r1, [r1, #0]
   d5820:	4668      	mov	r0, sp
   d5822:	f004 fbf2 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d5826:	4668      	mov	r0, sp
   d5828:	f004 fced 	bl	da206 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d582c:	9900      	ldr	r1, [sp, #0]
   d582e:	4805      	ldr	r0, [pc, #20]	; (d5844 <BlynkWidgetWrite16+0x28>)
   d5830:	f00d f9ac 	bl	e2b8c <strcpy>
    saveState();
   d5834:	f7ff ff94 	bl	d5760 <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d5838:	4668      	mov	r0, sp
   d583a:	f004 fb9f 	bl	d9f7c <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d583e:	b005      	add	sp, #20
   d5840:	f85d fb04 	ldr.w	pc, [sp], #4
   d5844:	2003dbe8 	.word	0x2003dbe8

000d5848 <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d5848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d584a:	6809      	ldr	r1, [r1, #0]
   d584c:	4668      	mov	r0, sp
   d584e:	f004 fbdc 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d5852:	4668      	mov	r0, sp
   d5854:	f004 fcd7 	bl	da206 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d5858:	9900      	ldr	r1, [sp, #0]
   d585a:	4805      	ldr	r0, [pc, #20]	; (d5870 <BlynkWidgetWrite18+0x28>)
   d585c:	f00d f996 	bl	e2b8c <strcpy>
    saveState();
   d5860:	f7ff ff7e 	bl	d5760 <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d5864:	4668      	mov	r0, sp
   d5866:	f004 fb89 	bl	d9f7c <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d586a:	b005      	add	sp, #20
   d586c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5870:	2003dce8 	.word	0x2003dce8

000d5874 <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d5874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5876:	6809      	ldr	r1, [r1, #0]
   d5878:	4668      	mov	r0, sp
   d587a:	f004 fbc6 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d587e:	4668      	mov	r0, sp
   d5880:	f004 fcc1 	bl	da206 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d5884:	9900      	ldr	r1, [sp, #0]
   d5886:	4805      	ldr	r0, [pc, #20]	; (d589c <BlynkWidgetWrite26+0x28>)
   d5888:	f00d f980 	bl	e2b8c <strcpy>
    saveState();
   d588c:	f7ff ff68 	bl	d5760 <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d5890:	4668      	mov	r0, sp
   d5892:	f004 fb73 	bl	d9f7c <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d5896:	b005      	add	sp, #20
   d5898:	f85d fb04 	ldr.w	pc, [sp], #4
   d589c:	2003dde8 	.word	0x2003dde8

000d58a0 <BlynkWidgetWrite25>:
  Blynk.virtualWrite(V14, 0);
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d58a0:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d58a2:	6808      	ldr	r0, [r1, #0]
   d58a4:	f00c fdc8 	bl	e2438 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d58a8:	ec51 0b10 	vmov	r0, r1, d0
   d58ac:	f00c fd38 	bl	e2320 <__aeabi_d2f>
   d58b0:	4b02      	ldr	r3, [pc, #8]	; (d58bc <BlynkWidgetWrite25+0x1c>)
   d58b2:	6018      	str	r0, [r3, #0]
  saveState();
}
   d58b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d58b8:	f7ff bf52 	b.w	d5760 <_Z9saveStatev>
   d58bc:	2003dee8 	.word	0x2003dee8

000d58c0 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d58c0:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d58c2:	6808      	ldr	r0, [r1, #0]
   d58c4:	f00c fdbb 	bl	e243e <atoi>
   d58c8:	4b03      	ldr	r3, [pc, #12]	; (d58d8 <BlynkWidgetWrite17+0x18>)
  if (param.asInt()==1)
   d58ca:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d58cc:	bf0c      	ite	eq
   d58ce:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d58d0:	2201      	movne	r2, #1
   d58d2:	701a      	strb	r2, [r3, #0]
   d58d4:	bd08      	pop	{r3, pc}
   d58d6:	bf00      	nop
   d58d8:	2003da9d 	.word	0x2003da9d

000d58dc <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d58dc:	b508      	push	{r3, lr}
   d58de:	6808      	ldr	r0, [r1, #0]
   d58e0:	f00c fdad 	bl	e243e <atoi>
  state.deviceZone=param.asInt();
   d58e4:	4b03      	ldr	r3, [pc, #12]	; (d58f4 <BlynkWidgetWrite23+0x18>)
   d58e6:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  saveState();
}
   d58ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update time zone
BLYNK_WRITE(V23) 
{
  state.deviceZone=param.asInt();
  saveState();
   d58ee:	f7ff bf37 	b.w	d5760 <_Z9saveStatev>
   d58f2:	bf00      	nop
   d58f4:	2003dad8 	.word	0x2003dad8

000d58f8 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d58f8:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d58fa:	4b07      	ldr	r3, [pc, #28]	; (d5918 <_Z12alertChangedv+0x20>)
   d58fc:	781a      	ldrb	r2, [r3, #0]
   d58fe:	4b07      	ldr	r3, [pc, #28]	; (d591c <_Z12alertChangedv+0x24>)
   d5900:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d5904:	4291      	cmp	r1, r2
   d5906:	d005      	beq.n	d5914 <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5908:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d590c:	f7ff ff28 	bl	d5760 <_Z9saveStatev>
    return true;
   d5910:	2001      	movs	r0, #1
   d5912:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5914:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5916:	bd08      	pop	{r3, pc}
   d5918:	2003e22c 	.word	0x2003e22c
   d591c:	2003dad8 	.word	0x2003dad8

000d5920 <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d5920:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d5922:	4b07      	ldr	r3, [pc, #28]	; (d5940 <_Z15batAlertChangedv+0x20>)
   d5924:	781a      	ldrb	r2, [r3, #0]
   d5926:	4b07      	ldr	r3, [pc, #28]	; (d5944 <_Z15batAlertChangedv+0x24>)
   d5928:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d592c:	4291      	cmp	r1, r2
   d592e:	d005      	beq.n	d593c <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d5930:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d5934:	f7ff ff14 	bl	d5760 <_Z9saveStatev>
    return true;
   d5938:	2001      	movs	r0, #1
   d593a:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d593c:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d593e:	bd08      	pop	{r3, pc}
   d5940:	2003df0e 	.word	0x2003df0e
   d5944:	2003dad8 	.word	0x2003dad8

000d5948 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5948:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d594a:	4b07      	ldr	r3, [pc, #28]	; (d5968 <_Z18tamperAlertChangedv+0x20>)
   d594c:	781a      	ldrb	r2, [r3, #0]
   d594e:	4b07      	ldr	r3, [pc, #28]	; (d596c <_Z18tamperAlertChangedv+0x24>)
   d5950:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d5954:	4291      	cmp	r1, r2
   d5956:	d005      	beq.n	d5964 <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5958:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d595c:	f7ff ff00 	bl	d5760 <_Z9saveStatev>
    return true;
   d5960:	2001      	movs	r0, #1
   d5962:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d5964:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d5966:	bd08      	pop	{r3, pc}
   d5968:	2003df0d 	.word	0x2003df0d
   d596c:	2003dad8 	.word	0x2003dad8

000d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5970:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5972:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5974:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5976:	b17c      	cbz	r4, d5998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5978:	6863      	ldr	r3, [r4, #4]
   d597a:	3b01      	subs	r3, #1
   d597c:	6063      	str	r3, [r4, #4]
   d597e:	b95b      	cbnz	r3, d5998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5980:	6823      	ldr	r3, [r4, #0]
   d5982:	4620      	mov	r0, r4
   d5984:	689b      	ldr	r3, [r3, #8]
   d5986:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5988:	68a3      	ldr	r3, [r4, #8]
   d598a:	3b01      	subs	r3, #1
   d598c:	60a3      	str	r3, [r4, #8]
   d598e:	b91b      	cbnz	r3, d5998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5990:	6823      	ldr	r3, [r4, #0]
   d5992:	4620      	mov	r0, r4
   d5994:	68db      	ldr	r3, [r3, #12]
   d5996:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5998:	4628      	mov	r0, r5
   d599a:	bd38      	pop	{r3, r4, r5, pc}

000d599c <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d599c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  switch (state.deviceZone)
   d599e:	4b16      	ldr	r3, [pc, #88]	; (d59f8 <_Z23publishGMTOffsetRequestv+0x5c>)
   d59a0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   d59a4:	4b15      	ldr	r3, [pc, #84]	; (d59fc <_Z23publishGMTOffsetRequestv+0x60>)
   d59a6:	3a01      	subs	r2, #1
   d59a8:	2a03      	cmp	r2, #3
   d59aa:	d815      	bhi.n	d59d8 <_Z23publishGMTOffsetRequestv+0x3c>
   d59ac:	e8df f002 	tbb	[pc, r2]
   d59b0:	0e080214 	.word	0x0e080214
   d59b4:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d59b6:	f88d 3000 	strb.w	r3, [sp]
   d59ba:	4a11      	ldr	r2, [pc, #68]	; (d5a00 <_Z23publishGMTOffsetRequestv+0x64>)
   d59bc:	233c      	movs	r3, #60	; 0x3c
   d59be:	e010      	b.n	d59e2 <_Z23publishGMTOffsetRequestv+0x46>
   d59c0:	781b      	ldrb	r3, [r3, #0]
   d59c2:	f88d 3000 	strb.w	r3, [sp]
   d59c6:	4a0f      	ldr	r2, [pc, #60]	; (d5a04 <_Z23publishGMTOffsetRequestv+0x68>)
   d59c8:	233c      	movs	r3, #60	; 0x3c
   d59ca:	e00a      	b.n	d59e2 <_Z23publishGMTOffsetRequestv+0x46>
   d59cc:	781b      	ldrb	r3, [r3, #0]
   d59ce:	f88d 3000 	strb.w	r3, [sp]
   d59d2:	4a0d      	ldr	r2, [pc, #52]	; (d5a08 <_Z23publishGMTOffsetRequestv+0x6c>)
   d59d4:	233c      	movs	r3, #60	; 0x3c
   d59d6:	e004      	b.n	d59e2 <_Z23publishGMTOffsetRequestv+0x46>
   d59d8:	781b      	ldrb	r3, [r3, #0]
   d59da:	4a0c      	ldr	r2, [pc, #48]	; (d5a0c <_Z23publishGMTOffsetRequestv+0x70>)
   d59dc:	f88d 3000 	strb.w	r3, [sp]
   d59e0:	233c      	movs	r3, #60	; 0x3c
   d59e2:	490b      	ldr	r1, [pc, #44]	; (d5a10 <_Z23publishGMTOffsetRequestv+0x74>)
   d59e4:	a802      	add	r0, sp, #8
   d59e6:	f005 f9cf 	bl	dad88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59ea:	a803      	add	r0, sp, #12
   d59ec:	f7ff ffc0 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}
   d59f0:	b005      	add	sp, #20
   d59f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d59f6:	bf00      	nop
   d59f8:	2003dad8 	.word	0x2003dad8
   d59fc:	2003d774 	.word	0x2003d774
   d5a00:	000e5db2 	.word	0x000e5db2
   d5a04:	000e5dc2 	.word	0x000e5dc2
   d5a08:	000e5dd2 	.word	0x000e5dd2
   d5a0c:	000e5da1 	.word	0x000e5da1
   d5a10:	000e6575 	.word	0x000e6575

000d5a14 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d5a14:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5a16:	4b04      	ldr	r3, [pc, #16]	; (d5a28 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d5a18:	4604      	mov	r4, r0
   d5a1a:	f840 3b18 	str.w	r3, [r0], #24
   d5a1e:	f7ff ffa7 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a22:	4620      	mov	r0, r4
   d5a24:	bd10      	pop	{r4, pc}
   d5a26:	bf00      	nop
   d5a28:	000e6ce8 	.word	0x000e6ce8

000d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
            " /____/_/\\_, /_//_/_/\\_\\" BLYNK_NEWLINE
            "        /___/ v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE BLYNK_NEWLINE
        ));
#endif
    }

   d5a2c:	b508      	push	{r3, lr}
private:
   d5a2e:	2300      	movs	r3, #0
   d5a30:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5a32:	6800      	ldr	r0, [r0, #0]
   d5a34:	f006 f832 	bl	dba9c <_ZN9TCPClient4stopEv>

    void internalReconnect() {
        state = CONNECTING;
   d5a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    }

private:

    void internalReconnect() {
   d5a3c:	f003 bdfa 	b.w	d9634 <BlynkNoOpCbk>

000d5a40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:

// Check if analog pins can be referenced by name on this device
#if defined(analogInputToDigitalPin)
    #define BLYNK_DECODE_PIN(it) (((it).asStr()[0] == 'A') ? analogInputToDigitalPin(atoi((it).asStr()+1)) : (it).asInt())
#else
    #define BLYNK_DECODE_PIN(it) ((it).asInt())
   d5a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5a44:	188e      	adds	r6, r1, r2
   d5a46:	b08e      	sub	sp, #56	; 0x38

    #if defined(BLYNK_DEBUG_ALL)
        #pragma message "analogInputToDigitalPin not defined"
    #endif
   d5a48:	42b1      	cmp	r1, r6

// Check if analog pins can be referenced by name on this device
#if defined(analogInputToDigitalPin)
    #define BLYNK_DECODE_PIN(it) (((it).asStr()[0] == 'A') ? analogInputToDigitalPin(atoi((it).asStr()+1)) : (it).asInt())
#else
    #define BLYNK_DECODE_PIN(it) ((it).asInt())
   d5a4a:	4680      	mov	r8, r0
   d5a4c:	460d      	mov	r5, r1
   d5a4e:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5a50:	9105      	str	r1, [sp, #20]
   d5a52:	9606      	str	r6, [sp, #24]

    #if defined(BLYNK_DEBUG_ALL)
        #pragma message "analogInputToDigitalPin not defined"
    #endif
   d5a54:	f080 813d 	bcs.w	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
#endif

template<class Proto>
BLYNK_FORCE_INLINE
   d5a58:	880b      	ldrh	r3, [r1, #0]
   d5a5a:	f8ad 3012 	strh.w	r3, [sp, #18]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d5a5e:	a805      	add	r0, sp, #20
   d5a60:	f7ff fd12 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5a64:	6803      	ldr	r3, [r0, #0]
   d5a66:	429e      	cmp	r6, r3
   d5a68:	f240 8133 	bls.w	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5a6c:	9805      	ldr	r0, [sp, #20]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
   d5a6e:	7803      	ldrb	r3, [r0, #0]
   d5a70:	2b41      	cmp	r3, #65	; 0x41
   d5a72:	d112      	bne.n	d5a9a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d5a74:	3001      	adds	r0, #1
   d5a76:	f00c fce2 	bl	e243e <atoi>
   d5a7a:	2805      	cmp	r0, #5
   d5a7c:	dd01      	ble.n	d5a82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d5a7e:	24ff      	movs	r4, #255	; 0xff
   d5a80:	e00f      	b.n	d5aa2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d5a82:	9805      	ldr	r0, [sp, #20]
   d5a84:	3001      	adds	r0, #1
   d5a86:	f00c fcda 	bl	e243e <atoi>
   d5a8a:	2800      	cmp	r0, #0
   d5a8c:	dbf7      	blt.n	d5a7e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d5a8e:	9805      	ldr	r0, [sp, #20]
   d5a90:	3001      	adds	r0, #1
   d5a92:	f00c fcd4 	bl	e243e <atoi>
   d5a96:	300e      	adds	r0, #14
   d5a98:	e002      	b.n	d5aa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d5a9a:	a805      	add	r0, sp, #20
   d5a9c:	f7ff fcea 	bl	d5474 <_ZNK10BlynkParam8iterator5asIntEv>
   d5aa0:	b2c4      	uxtb	r4, r0
    if (it >= param.end())
        return;
   d5aa2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d5aa6:	f247 2276 	movw	r2, #29302	; 0x7276
   d5aaa:	4293      	cmp	r3, r2
   d5aac:	f000 80b7 	beq.w	d5c1e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1de>
   d5ab0:	d80d      	bhi.n	d5ace <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d5ab2:	f247 2261 	movw	r2, #29281	; 0x7261
   d5ab6:	4293      	cmp	r3, r2
   d5ab8:	d07d      	beq.n	d5bb6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x176>
   d5aba:	f247 2264 	movw	r2, #29284	; 0x7264
   d5abe:	4293      	cmp	r3, r2
   d5ac0:	d051      	beq.n	d5b66 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d5ac2:	f646 5270 	movw	r2, #28016	; 0x6d70
   d5ac6:	4293      	cmp	r3, r2
   d5ac8:	f040 80d4 	bne.w	d5c74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5acc:	e027      	b.n	d5b1e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xde>
   d5ace:	f247 7264 	movw	r2, #30564	; 0x7764
   d5ad2:	4293      	cmp	r3, r2
   d5ad4:	d059      	beq.n	d5b8a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d5ad6:	f247 7276 	movw	r2, #30582	; 0x7776
   d5ada:	4293      	cmp	r3, r2
   d5adc:	f000 80b0 	beq.w	d5c40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
   d5ae0:	f247 7261 	movw	r2, #30561	; 0x7761
   d5ae4:	4293      	cmp	r3, r2
   d5ae6:	f040 80c5 	bne.w	d5c74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d5aea:	e085      	b.n	d5bf8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b8>
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

   d5aec:	7803      	ldrb	r3, [r0, #0]
   d5aee:	2b41      	cmp	r3, #65	; 0x41
   d5af0:	d125      	bne.n	d5b3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfe>
   d5af2:	3001      	adds	r0, #1
   d5af4:	f00c fca3 	bl	e243e <atoi>
   d5af8:	2805      	cmp	r0, #5
   d5afa:	dd14      	ble.n	d5b26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>
   d5afc:	24ff      	movs	r4, #255	; 0xff
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d5afe:	a805      	add	r0, sp, #20
   d5b00:	f7ff fcc2 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5b04:	9d05      	ldr	r5, [sp, #20]

   d5b06:	4974      	ldr	r1, [pc, #464]	; (d5cd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x298>)
   d5b08:	4628      	mov	r0, r5
   d5b0a:	f00d f835 	bl	e2b78 <strcmp>
   d5b0e:	4601      	mov	r1, r0
   d5b10:	b9d0      	cbnz	r0, d5b48 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x108>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN
   d5b12:	4620      	mov	r0, r4
   d5b14:	f006 fa4a 	bl	dbfac <pinMode>
                pinMode(pin, OUTPUT);
#ifdef INPUT_PULLUP
            } else if (!strcmp(it.asStr(), "pu")) {
                pinMode(pin, INPUT_PULLUP);
#endif
#ifdef INPUT_PULLDOWN
   d5b18:	a805      	add	r0, sp, #20
   d5b1a:	f7ff fcb5 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5b1e:	9805      	ldr	r0, [sp, #20]
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;
   d5b20:	4286      	cmp	r6, r0
   d5b22:	d8e3      	bhi.n	d5aec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d5b24:	e0d5      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>

   d5b26:	9805      	ldr	r0, [sp, #20]
   d5b28:	3001      	adds	r0, #1
   d5b2a:	f00c fc88 	bl	e243e <atoi>
   d5b2e:	2800      	cmp	r0, #0
   d5b30:	dbe4      	blt.n	d5afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d5b32:	9805      	ldr	r0, [sp, #20]
   d5b34:	3001      	adds	r0, #1
   d5b36:	f00c fc82 	bl	e243e <atoi>
   d5b3a:	300e      	adds	r0, #14
   d5b3c:	e002      	b.n	d5b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x104>
   d5b3e:	a805      	add	r0, sp, #20
   d5b40:	f7ff fc98 	bl	d5474 <_ZNK10BlynkParam8iterator5asIntEv>
   d5b44:	b2c4      	uxtb	r4, r0
   d5b46:	e7da      	b.n	d5afe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
    const uint8_t pin = BLYNK_DECODE_PIN(it);

    switch(cmd16) {

   d5b48:	4964      	ldr	r1, [pc, #400]	; (d5cdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x29c>)
   d5b4a:	4628      	mov	r0, r5
   d5b4c:	f00d f814 	bl	e2b78 <strcmp>
   d5b50:	2800      	cmp	r0, #0
   d5b52:	f000 80a4 	beq.w	d5c9e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5b56:	4962      	ldr	r1, [pc, #392]	; (d5ce0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a0>)
   d5b58:	4628      	mov	r0, r5
   d5b5a:	f00d f80d 	bl	e2b78 <strcmp>
   d5b5e:	2800      	cmp	r0, #0
   d5b60:	f000 809d 	beq.w	d5c9e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d5b64:	e09d      	b.n	d5ca2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x262>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d5b66:	ab0a      	add	r3, sp, #40	; 0x28
   d5b68:	9307      	str	r3, [sp, #28]
            } else if (!strcmp(it.asStr(), "pd")) {
                pinMode(pin, INPUT_PULLDOWN);
#endif
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
   d5b6a:	a807      	add	r0, sp, #28
   d5b6c:	2310      	movs	r3, #16
   d5b6e:	2500      	movs	r5, #0
   d5b70:	495c      	ldr	r1, [pc, #368]	; (d5ce4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a4>)
   d5b72:	9309      	str	r3, [sp, #36]	; 0x24
   d5b74:	9508      	str	r5, [sp, #32]
   d5b76:	f7ff fc96 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
#endif
   d5b7a:	a807      	add	r0, sp, #28
   d5b7c:	4621      	mov	r1, r4
   d5b7e:	f7ff fcaf 	bl	d54e0 <_ZN10BlynkParam3addEi>
            }
   d5b82:	4620      	mov	r0, r4
   d5b84:	f006 fa3c 	bl	dc000 <digitalRead>
   d5b88:	e026      	b.n	d5bd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
            ++it;
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
   d5b8a:	a805      	add	r0, sp, #20
   d5b8c:	f7ff fc7c 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5b90:	6803      	ldr	r3, [r0, #0]
   d5b92:	429e      	cmp	r6, r3
   d5b94:	f240 809d 	bls.w	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        rsp.add(pin);
        rsp.add(digitalRead(pin));
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
   d5b98:	b2a4      	uxth	r4, r4
   d5b9a:	2101      	movs	r1, #1
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f006 fa05 	bl	dbfac <pinMode>
        if (++it >= param.end())
            return;
   d5ba2:	a805      	add	r0, sp, #20
   d5ba4:	f7ff fc66 	bl	d5474 <_ZNK10BlynkParam8iterator5asIntEv>
   d5ba8:	1c01      	adds	r1, r0, #0
   d5baa:	bf18      	it	ne
   d5bac:	2101      	movne	r1, #1
   d5bae:	4620      	mov	r0, r4
   d5bb0:	f006 fa0d 	bl	dbfce <digitalWrite>

   d5bb4:	e08d      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d5bb6:	ab0a      	add	r3, sp, #40	; 0x28
   d5bb8:	9307      	str	r3, [sp, #28]
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
   d5bba:	494b      	ldr	r1, [pc, #300]	; (d5ce8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a8>)
   d5bbc:	2310      	movs	r3, #16
   d5bbe:	a807      	add	r0, sp, #28
   d5bc0:	2500      	movs	r5, #0
   d5bc2:	9309      	str	r3, [sp, #36]	; 0x24
   d5bc4:	9508      	str	r5, [sp, #32]
   d5bc6:	f7ff fc6e 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
   d5bca:	a807      	add	r0, sp, #28
   d5bcc:	4621      	mov	r1, r4
   d5bce:	f7ff fc87 	bl	d54e0 <_ZN10BlynkParam3addEi>
        pinMode(pin, OUTPUT);
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	f006 fa27 	bl	dc026 <analogRead>
   d5bd8:	4601      	mov	r1, r0
   d5bda:	a807      	add	r0, sp, #28
   d5bdc:	f7ff fc92 	bl	d5504 <_ZN10BlynkParam3addEl>
#endif
   d5be0:	9b08      	ldr	r3, [sp, #32]
   d5be2:	9502      	str	r5, [sp, #8]
   d5be4:	3b01      	subs	r3, #1
   d5be6:	9300      	str	r3, [sp, #0]
   d5be8:	9b07      	ldr	r3, [sp, #28]
   d5bea:	9501      	str	r5, [sp, #4]
   d5bec:	462a      	mov	r2, r5
   d5bee:	2114      	movs	r1, #20
   d5bf0:	4640      	mov	r0, r8
   d5bf2:	f000 fb5f 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d5bf6:	e06c      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    } break;
    case BLYNK_HW_AR: {
        char mem[16];
   d5bf8:	a805      	add	r0, sp, #20
   d5bfa:	f7ff fc45 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5bfe:	6803      	ldr	r3, [r0, #0]
   d5c00:	429e      	cmp	r6, r3
   d5c02:	d966      	bls.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
        rsp.add(pin);
        rsp.add(analogRead(pin));
   d5c04:	b2a4      	uxth	r4, r4
   d5c06:	2101      	movs	r1, #1
   d5c08:	4620      	mov	r0, r4
   d5c0a:	f006 f9cf 	bl	dbfac <pinMode>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
   d5c0e:	a805      	add	r0, sp, #20
   d5c10:	f7ff fc30 	bl	d5474 <_ZNK10BlynkParam8iterator5asIntEv>
   d5c14:	4601      	mov	r1, r0
   d5c16:	4620      	mov	r0, r4
   d5c18:	f006 fa1c 	bl	dc054 <_Z11analogWritetm>
    case BLYNK_HW_AW: {
   d5c1c:	e059      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        // Should be 1 parameter (value)
        if (++it >= param.end())
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
   d5c1e:	ad0e      	add	r5, sp, #56	; 0x38
        pinMode(pin, OUTPUT);
   d5c20:	4620      	mov	r0, r4
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
   d5c22:	f805 4d10 	strb.w	r4, [r5, #-16]!
        pinMode(pin, OUTPUT);
   d5c26:	f003 fd07 	bl	d9638 <GetReadHandler>
#endif
   d5c2a:	4603      	mov	r3, r0
        analogWrite(pin, it.asInt());
   d5c2c:	4628      	mov	r0, r5
        if (++it >= param.end())
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
#endif
   d5c2e:	b123      	cbz	r3, d5c3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d5c30:	4a2e      	ldr	r2, [pc, #184]	; (d5cec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2ac>)
   d5c32:	4293      	cmp	r3, r2
   d5c34:	d001      	beq.n	d5c3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
        analogWrite(pin, it.asInt());
   d5c36:	4798      	blx	r3
   d5c38:	e04b      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    } break;

   d5c3a:	f003 fcf9 	bl	d9630 <BlynkWidgetRead>
#endif

   d5c3e:	e048      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d5c40:	a805      	add	r0, sp, #20
   d5c42:	f7ff fc21 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5c46:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d5c48:	930a      	str	r3, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d5c4a:	1b5d      	subs	r5, r3, r5
   d5c4c:	1b7f      	subs	r7, r7, r5
            handler(req);
        } else {
   d5c4e:	4620      	mov	r0, r4
   d5c50:	970b      	str	r7, [sp, #44]	; 0x2c
   d5c52:	970c      	str	r7, [sp, #48]	; 0x30

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
            handler(req);
   d5c54:	f88d 401c 	strb.w	r4, [sp, #28]
        } else {
   d5c58:	f003 fcf8 	bl	d964c <GetWriteHandler>
            BlynkWidgetReadDefault(req);
   d5c5c:	4603      	mov	r3, r0
        }
   d5c5e:	a90a      	add	r1, sp, #40	; 0x28
   d5c60:	a807      	add	r0, sp, #28
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
            handler(req);
        } else {
            BlynkWidgetReadDefault(req);
   d5c62:	b123      	cbz	r3, d5c6e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d5c64:	4a22      	ldr	r2, [pc, #136]	; (d5cf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b0>)
   d5c66:	4293      	cmp	r3, r2
   d5c68:	d001      	beq.n	d5c6e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
        }
   d5c6a:	4798      	blx	r3
   d5c6c:	e031      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    } break;
    case BLYNK_HW_VW: {
   d5c6e:	f003 fce0 	bl	d9632 <BlynkWidgetWrite>
        ++it;
        char* start = (char*)it.asStr();
   d5c72:	e02e      	b.n	d5cd2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d5c74:	f7ff fb44 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5c78:	f005 fba4 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5c7c:	491d      	ldr	r1, [pc, #116]	; (d5cf4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b4>)
   d5c7e:	f004 fb33 	bl	da2e8 <_ZN5Print5printEPKc>
   d5c82:	f005 fb9f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5c86:	4629      	mov	r1, r5
   d5c88:	f004 fb41 	bl	da30e <_ZN5Print7printlnEPKc>
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d5c8c:	2300      	movs	r3, #0
   d5c8e:	2102      	movs	r1, #2
   d5c90:	9100      	str	r1, [sp, #0]
   d5c92:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d5c96:	9302      	str	r3, [sp, #8]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	4619      	mov	r1, r3
   d5c9c:	e7a8      	b.n	d5bf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b0>

    const uint8_t pin = BLYNK_DECODE_PIN(it);

    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN
   d5c9e:	2101      	movs	r1, #1
   d5ca0:	e737      	b.n	d5b12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
#ifdef INPUT_PULLUP
            } else if (!strcmp(it.asStr(), "pu")) {
   d5ca2:	f7ff fb2d 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5ca6:	f005 fb8d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5caa:	4913      	ldr	r1, [pc, #76]	; (d5cf8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b8>)
   d5cac:	f004 fb1c 	bl	da2e8 <_ZN5Print5printEPKc>
   d5cb0:	f005 fb88 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5cb4:	220a      	movs	r2, #10
   d5cb6:	4621      	mov	r1, r4
   d5cb8:	f004 fb60 	bl	da37c <_ZN5Print5printEhi>
   d5cbc:	f005 fb82 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5cc0:	490e      	ldr	r1, [pc, #56]	; (d5cfc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2bc>)
   d5cc2:	f004 fb11 	bl	da2e8 <_ZN5Print5printEPKc>
   d5cc6:	f005 fb7d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5cca:	9905      	ldr	r1, [sp, #20]
   d5ccc:	f004 fb1f 	bl	da30e <_ZN5Print7printlnEPKc>
   d5cd0:	e722      	b.n	d5b18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd8>
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
            handler(req, param2);
   d5cd2:	b00e      	add	sp, #56	; 0x38
   d5cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cd8:	000e639b 	.word	0x000e639b
   d5cdc:	000e5efa 	.word	0x000e5efa
   d5ce0:	000e5de6 	.word	0x000e5de6
   d5ce4:	000e5dea 	.word	0x000e5dea
   d5ce8:	000e5ded 	.word	0x000e5ded
   d5cec:	000d9631 	.word	0x000d9631
   d5cf0:	000d9633 	.word	0x000d9633
   d5cf4:	000e5df0 	.word	0x000e5df0
   d5cf8:	000e5e01 	.word	0x000e5e01
   d5cfc:	000e5e0e 	.word	0x000e5e0e

000d5d00 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d5d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d04:	b08e      	sub	sp, #56	; 0x38
   d5d06:	af04      	add	r7, sp, #16
   d5d08:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d5d0a:	2205      	movs	r2, #5
   d5d0c:	f107 010c 	add.w	r1, r7, #12
   d5d10:	6800      	ldr	r0, [r0, #0]
   d5d12:	f004 fc90 	bl	da636 <_ZN6Stream9readBytesEPcj>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d5d16:	4605      	mov	r5, r0
   d5d18:	2800      	cmp	r0, #0
   d5d1a:	f000 81eb 	beq.w	d60f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f4>
    } break;
    }

    return true;
   d5d1e:	2805      	cmp	r0, #5
   d5d20:	d11a      	bne.n	d5d58 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x58>
   d5d22:	4602      	mov	r2, r0
   d5d24:	f107 010c 	add.w	r1, r7, #12
   d5d28:	48b0      	ldr	r0, [pc, #704]	; (d5fec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ec>)
   d5d2a:	f7ff fb47 	bl	d53bc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
}

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
   d5d2e:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    if (rlen == 0) {
   d5d32:	f8b7 800f 	ldrh.w	r8, [r7, #15]
}

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
   d5d36:	0a13      	lsrs	r3, r2, #8
   d5d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (rlen == 0) {
   d5d3c:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d5d40:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
}

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
   d5d44:	b29b      	uxth	r3, r3
    if (rlen == 0) {
   d5d46:	fa1f f888 	uxth.w	r8, r8
}

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
   d5d4a:	f8a7 300d 	strh.w	r3, [r7, #13]
    if (rlen == 0) {
   d5d4e:	f8a7 800f 	strh.w	r8, [r7, #15]
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

   d5d52:	b993      	cbnz	r3, d5d7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7a>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
        return 0;
    }
   d5d54:	462c      	mov	r4, r5
   d5d56:	e001      	b.n	d5d5c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x5c>
        internalReconnect();
    } break;
    }

    return true;
}
   d5d58:	f04f 34ff 	mov.w	r4, #4294967295
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d5d5c:	f7ff fad0 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5d60:	f005 fb30 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5d64:	49a2      	ldr	r1, [pc, #648]	; (d5ff0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f0>)
   d5d66:	f004 fabf 	bl	da2e8 <_ZN5Print5printEPKc>
   d5d6a:	f005 fb2b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5d6e:	220a      	movs	r2, #10
   d5d70:	4621      	mov	r1, r4
   d5d72:	f004 fb47 	bl	da404 <_ZN5Print7printlnEii>
    }

   d5d76:	2000      	movs	r0, #0
   d5d78:	e1c1      	b.n	d60fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
   d5d7a:	7b3b      	ldrb	r3, [r7, #12]
   d5d7c:	2b00      	cmp	r3, #0
   d5d7e:	d15b      	bne.n	d5e38 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x138>
#endif
   d5d80:	f003 fc50 	bl	d9624 <_Z11BlynkMillisv>
        return false;
    }

   d5d84:	7f65      	ldrb	r5, [r4, #29]
    }

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
   d5d86:	60e0      	str	r0, [r4, #12]
   d5d88:	f8b7 000f 	ldrh.w	r0, [r7, #15]
        return false;
    }

   d5d8c:	2d00      	cmp	r5, #0
   d5d8e:	d14f      	bne.n	d5e30 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x130>
   d5d90:	f8b7 300d 	ldrh.w	r3, [r7, #13]
   d5d94:	2b01      	cmp	r3, #1
   d5d96:	d14b      	bne.n	d5e30 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x130>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d5d98:	2809      	cmp	r0, #9
   d5d9a:	d034      	beq.n	d5e06 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
   d5d9c:	28c8      	cmp	r0, #200	; 0xc8
   d5d9e:	d001      	beq.n	d5da4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
   d5da0:	2804      	cmp	r0, #4
   d5da2:	d138      	bne.n	d5e16 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
        lastActivityIn = BlynkMillis();

#ifndef BLYNK_USE_DIRECT_CONNECT
   d5da4:	f7ff faac 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5da8:	f005 fb0c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5dac:	4991      	ldr	r1, [pc, #580]	; (d5ff4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f4>)
   d5dae:	f004 fa9b 	bl	da2e8 <_ZN5Print5printEPKc>
   d5db2:	f005 fb07 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5db6:	6963      	ldr	r3, [r4, #20]
   d5db8:	68e1      	ldr	r1, [r4, #12]
   d5dba:	220a      	movs	r2, #10
   d5dbc:	1ac9      	subs	r1, r1, r3
   d5dbe:	f004 fad0 	bl	da362 <_ZN5Print5printEmi>
   d5dc2:	f005 faff 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5dc6:	498c      	ldr	r1, [pc, #560]	; (d5ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f8>)
   d5dc8:	f004 faa1 	bl	da30e <_ZN5Print7printlnEPKc>
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d5dcc:	68e3      	ldr	r3, [r4, #12]
   d5dce:	6163      	str	r3, [r4, #20]
            switch (hdr.length) {
   d5dd0:	2301      	movs	r3, #1
   d5dd2:	7763      	strb	r3, [r4, #29]
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
   d5dd4:	f003 fc28 	bl	d9628 <_Z12BlynkFreeRamv>
   d5dd8:	4605      	mov	r5, r0
   d5dda:	b160      	cbz	r0, d5df6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
   d5ddc:	f7ff fa90 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5de0:	f005 faf0 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5de4:	4985      	ldr	r1, [pc, #532]	; (d5ffc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2fc>)
   d5de6:	f004 fa7f 	bl	da2e8 <_ZN5Print5printEPKc>
   d5dea:	f005 faeb 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5dee:	220a      	movs	r2, #10
   d5df0:	4629      	mov	r1, r5
   d5df2:	f004 fad1 	bl	da398 <_ZN5Print7printlnEji>
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
#ifdef BLYNK_DEBUG
   d5df6:	4620      	mov	r0, r4
   d5df8:	f000 fb6c 	bl	d64d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                if (size_t ram = BlynkFreeRam()) {
   d5dfc:	f7ff fb2e 	bl	d545c <_ZN10CloudClass7processEv>
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d5e00:	f000 fdcc 	bl	d699c <BlynkOnConnected>
   d5e04:	e176      	b.n	d60f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f4>
                }
#endif
                this->sendInfo();
   d5e06:	f7ff fa7b 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e0a:	f005 fadb 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e0e:	497c      	ldr	r1, [pc, #496]	; (d6000 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x300>)
   d5e10:	f004 fa7d 	bl	da30e <_ZN5Print7printlnEPKc>
   d5e14:	e7af      	b.n	d5d76 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x76>
                BLYNK_RUN_YIELD();
                BlynkOnConnected();
                return true;
   d5e16:	f7ff fa73 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e1a:	f005 fad3 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e1e:	4979      	ldr	r1, [pc, #484]	; (d6004 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x304>)
   d5e20:	f004 fa62 	bl	da2e8 <_ZN5Print5printEPKc>
   d5e24:	f005 face 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e28:	220a      	movs	r2, #10
   d5e2a:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d5e2e:	e7a0      	b.n	d5d72 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
                state = TOKEN_INVALID;
                break;
   d5e30:	3805      	subs	r0, #5
   d5e32:	bf18      	it	ne
   d5e34:	2001      	movne	r0, #1
   d5e36:	e162      	b.n	d60fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
            return false;
        }
   d5e38:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d5e3c:	d911      	bls.n	d5e62 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x162>
#endif
   d5e3e:	f7ff fa5f 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e42:	f005 fabf 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e46:	4970      	ldr	r1, [pc, #448]	; (d6008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x308>)
   d5e48:	f004 fa4e 	bl	da2e8 <_ZN5Print5printEPKc>
   d5e4c:	f005 faba 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e50:	220a      	movs	r2, #10
   d5e52:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d5e56:	f004 fad5 	bl	da404 <_ZN5Print7printlnEii>
        // TODO: return code may indicate App presence
        return true;
   d5e5a:	4620      	mov	r0, r4
   d5e5c:	f7ff fde6 	bl	d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d5e60:	e148      	b.n	d60f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f4>
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
   d5e62:	f108 0308 	add.w	r3, r8, #8
   d5e66:	f023 0307 	bic.w	r3, r3, #7
   d5e6a:	466e      	mov	r6, sp
   d5e6c:	ebad 0d03 	sub.w	sp, sp, r3
   d5e70:	ad04      	add	r5, sp, #16
   d5e72:	4642      	mov	r2, r8
   d5e74:	4629      	mov	r1, r5
   d5e76:	6820      	ldr	r0, [r4, #0]
   d5e78:	f004 fbdd 	bl	da636 <_ZN6Stream9readBytesEPcj>
        // TODO: Flush
   d5e7c:	4580      	cmp	r8, r0
   d5e7e:	d007      	beq.n	d5e90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x190>
        internalReconnect();
        return true;
   d5e80:	f7ff fa3e 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5e84:	f005 fa9e 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5e88:	4960      	ldr	r1, [pc, #384]	; (d600c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d5e8a:	f004 fa40 	bl	da30e <_ZN5Print7printlnEPKc>
   d5e8e:	e05e      	b.n	d5f4e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d5e90:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d5e94:	2300      	movs	r3, #0
   d5e96:	54ab      	strb	r3, [r5, r2]
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
            if (len) {
   d5e98:	b11a      	cbz	r2, d5ea2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a2>
   d5e9a:	4629      	mov	r1, r5
   d5e9c:	4853      	ldr	r0, [pc, #332]	; (d5fec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ec>)
   d5e9e:	f7ff fa8d 	bl	d53bc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d5ea2:	f003 fbbf 	bl	d9624 <_Z11BlynkMillisv>
    }
    inputBuffer[hdr.length] = '\0';
   d5ea6:	7b3b      	ldrb	r3, [r7, #12]
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d5ea8:	60e0      	str	r0, [r4, #12]
    }
    inputBuffer[hdr.length] = '\0';
   d5eaa:	2b11      	cmp	r3, #17
   d5eac:	f000 80b4 	beq.w	d6018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>
   d5eb0:	d807      	bhi.n	d5ec2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c2>
   d5eb2:	2b06      	cmp	r3, #6
   d5eb4:	d031      	beq.n	d5f1a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
   d5eb6:	2b0f      	cmp	r3, #15
   d5eb8:	f000 808a 	beq.w	d5fd0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2d0>
   d5ebc:	2b02      	cmp	r3, #2
   d5ebe:	d009      	beq.n	d5ed4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d4>
   d5ec0:	e105      	b.n	d60ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ce>
   d5ec2:	2b29      	cmp	r3, #41	; 0x29
   d5ec4:	d035      	beq.n	d5f32 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x232>
   d5ec6:	2b37      	cmp	r3, #55	; 0x37
   d5ec8:	f000 80f1 	beq.w	d60ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ae>
   d5ecc:	2b14      	cmp	r3, #20
   d5ece:	f040 80fe 	bne.w	d60ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ce>
   d5ed2:	e07d      	b.n	d5fd0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2d0>

    switch (hdr.type)
    {
    case BLYNK_CMD_LOGIN:
    case BLYNK_CMD_HW_LOGIN: {
#ifdef BLYNK_USE_DIRECT_CONNECT
   d5ed4:	7f63      	ldrb	r3, [r4, #29]
   d5ed6:	bb03      	cbnz	r3, d5f1a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21a>
        if (strncmp(authkey, (char*)inputBuffer, 32)) {
   d5ed8:	f7ff fa12 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5edc:	f005 fa72 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5ee0:	494b      	ldr	r1, [pc, #300]	; (d6010 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d5ee2:	f004 fa14 	bl	da30e <_ZN5Print7printlnEPKc>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
   d5ee6:	2301      	movs	r3, #1
   d5ee8:	7763      	strb	r3, [r4, #29]
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
   d5eea:	f003 fb9d 	bl	d9628 <_Z12BlynkFreeRamv>
   d5eee:	4605      	mov	r5, r0
   d5ef0:	b160      	cbz	r0, d5f0c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20c>
        }
   d5ef2:	f7ff fa05 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5ef6:	f005 fa65 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5efa:	4940      	ldr	r1, [pc, #256]	; (d5ffc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2fc>)
   d5efc:	f004 f9f4 	bl	da2e8 <_ZN5Print5printEPKc>
   d5f00:	f005 fa60 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5f04:	220a      	movs	r2, #10
   d5f06:	4629      	mov	r1, r5
   d5f08:	f004 fa46 	bl	da398 <_ZN5Print7printlnEji>
#endif
        if (state == CONNECTING) {
            BLYNK_LOG1(BLYNK_F("Ready"));
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	f000 fae1 	bl	d64d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            state = CONNECTED;
   d5f12:	f7ff faa3 	bl	d545c <_ZN10CloudClass7processEv>
#ifdef BLYNK_DEBUG
   d5f16:	f000 fd41 	bl	d699c <BlynkOnConnected>
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d5f1a:	2300      	movs	r3, #0
   d5f1c:	21c8      	movs	r1, #200	; 0xc8
   d5f1e:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d5f22:	9100      	str	r1, [sp, #0]
   d5f24:	9302      	str	r3, [sp, #8]
   d5f26:	9301      	str	r3, [sp, #4]
   d5f28:	4619      	mov	r1, r3
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	f000 f9c2 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d5f30:	e0dd      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
            BLYNK_RUN_YIELD();
            BlynkOnConnected();
        }
   d5f32:	68a3      	ldr	r3, [r4, #8]
   d5f34:	b91b      	cbnz	r3, d5f3e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d5f36:	2020      	movs	r0, #32
   d5f38:	f003 feba 	bl	d9cb0 <malloc>
   d5f3c:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5f3e:	f8b7 800f 	ldrh.w	r8, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5f42:	61fd      	str	r5, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d5f44:	44a8      	add	r8, r5
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d5f46:	4545      	cmp	r5, r8
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d5f48:	f8c7 8020 	str.w	r8, [r7, #32]
   d5f4c:	d301      	bcc.n	d5f52 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
             redir_serv = (char*)malloc(32);
   d5f4e:	2000      	movs	r0, #0
   d5f50:	e0ce      	b.n	d60f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f0>
        }
   d5f52:	2220      	movs	r2, #32
   d5f54:	4629      	mov	r1, r5
   d5f56:	68a0      	ldr	r0, [r4, #8]
   d5f58:	f00d fb6d 	bl	e3636 <strncpy>
        BlynkParam param(inputBuffer, hdr.length);
   d5f5c:	f107 001c 	add.w	r0, r7, #28
   d5f60:	f7ff fa92 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d5f64:	6803      	ldr	r3, [r0, #0]
   d5f66:	4543      	cmp	r3, r8
   d5f68:	d208      	bcs.n	d5f7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27c>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d5f6a:	69f8      	ldr	r0, [r7, #28]
   d5f6c:	b120      	cbz	r0, d5f78 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>
   d5f6e:	6a3b      	ldr	r3, [r7, #32]
   d5f70:	4298      	cmp	r0, r3
   d5f72:	f0c0 80c1 	bcc.w	d60f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3f8>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5f76:	2000      	movs	r0, #0
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d5f78:	b285      	uxth	r5, r0
   d5f7a:	e000      	b.n	d5f7e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
            BlynkOnConnected();
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d5f7c:	2550      	movs	r5, #80	; 0x50
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

   d5f7e:	f7ff f9bf 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d5f82:	f005 fa1f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5f86:	4923      	ldr	r1, [pc, #140]	; (d6014 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d5f88:	f004 f9ae 	bl	da2e8 <_ZN5Print5printEPKc>
   d5f8c:	f005 fa1a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5f90:	68a1      	ldr	r1, [r4, #8]
   d5f92:	f004 f9a9 	bl	da2e8 <_ZN5Print5printEPKc>
   d5f96:	f005 fa15 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5f9a:	213a      	movs	r1, #58	; 0x3a
   d5f9c:	f004 f9a8 	bl	da2f0 <_ZN5Print5printEc>
   d5fa0:	f005 fa10 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d5fa4:	220a      	movs	r2, #10
   d5fa6:	4629      	mov	r1, r5
   d5fa8:	f004 fa2c 	bl	da404 <_ZN5Print7printlnEii>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5fac:	6820      	ldr	r0, [r4, #0]
   d5fae:	f005 fd75 	bl	dba9c <_ZN9TCPClient4stopEv>
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d5fb2:	6823      	ldr	r3, [r4, #0]
   d5fb4:	68a2      	ldr	r2, [r4, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d5fb6:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d5fb8:	871d      	strh	r5, [r3, #56]	; 0x38
            return false;
   d5fba:	2300      	movs	r3, #0
   d5fbc:	7763      	strb	r3, [r4, #29]

   d5fbe:	f003 fb31 	bl	d9624 <_Z11BlynkMillisv>
   d5fc2:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d5fc6:	3808      	subs	r0, #8
   d5fc8:	6120      	str	r0, [r4, #16]
   d5fca:	60e0      	str	r0, [r4, #12]
   d5fcc:	6160      	str	r0, [r4, #20]
   d5fce:	e08e      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
   d5fd0:	68fb      	ldr	r3, [r7, #12]
   d5fd2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d5fd6:	8363      	strh	r3, [r4, #26]
            redir_port = it.asLong();
   d5fd8:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d5fdc:	4629      	mov	r1, r5
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f7ff fd2e 	bl	d5a40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
   d5fe4:	2300      	movs	r3, #0
   d5fe6:	8363      	strh	r3, [r4, #26]
   d5fe8:	e081      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
   d5fea:	bf00      	nop
   d5fec:	000e5e15 	.word	0x000e5e15
   d5ff0:	000e5e17 	.word	0x000e5e17
   d5ff4:	000e5e25 	.word	0x000e5e25
   d5ff8:	000e5e33 	.word	0x000e5e33
   d5ffc:	000e5e38 	.word	0x000e5e38
   d6000:	000e5e43 	.word	0x000e5e43
   d6004:	000e5e56 	.word	0x000e5e56
   d6008:	000e5e6d 	.word	0x000e5e6d
   d600c:	000e5e7e 	.word	0x000e5e7e
   d6010:	000e5e8e 	.word	0x000e5e8e
   d6014:	000e5e94 	.word	0x000e5e94
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
        state = CONNECTING;
   d6018:	2300      	movs	r3, #0
   d601a:	713b      	strb	r3, [r7, #4]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d601c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6020:	617d      	str	r5, [r7, #20]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6022:	442b      	add	r3, r5
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
   d6024:	429d      	cmp	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6026:	61bb      	str	r3, [r7, #24]
   d6028:	d261      	bcs.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
        this->processCmd(inputBuffer, hdr.length);
        msgIdOutOverride = 0;
   d602a:	6828      	ldr	r0, [r5, #0]
   d602c:	60b8      	str	r0, [r7, #8]
    } break;
    case BLYNK_CMD_INTERNAL: {
   d602e:	f107 0014 	add.w	r0, r7, #20
   d6032:	f7ff fa29 	bl	d5488 <_ZN10BlynkParam8iteratorppEv>
   d6036:	697a      	ldr	r2, [r7, #20]
        BlynkReq req = { 0 };
        BlynkParam param(inputBuffer, hdr.length);
   d6038:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d603c:	61fa      	str	r2, [r7, #28]
   d603e:	1b51      	subs	r1, r2, r5
   d6040:	1a5b      	subs	r3, r3, r1
   d6042:	623b      	str	r3, [r7, #32]
   d6044:	627b      	str	r3, [r7, #36]	; 0x24
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
            return true;
   d6046:	4a30      	ldr	r2, [pc, #192]	; (d6108 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x408>)
   d6048:	68bb      	ldr	r3, [r7, #8]
   d604a:	4293      	cmp	r3, r2
   d604c:	d01d      	beq.n	d608a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x38a>
   d604e:	d80b      	bhi.n	d6068 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x368>
   d6050:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d6054:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d6058:	4293      	cmp	r3, r2
   d605a:	d122      	bne.n	d60a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3a2>

        uint32_t cmd32;
   d605c:	f107 011c 	add.w	r1, r7, #28
   d6060:	1d38      	adds	r0, r7, #4
   d6062:	f003 fae6 	bl	d9632 <BlynkWidgetWrite>
   d6066:	e042      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
            return true;
   d6068:	4a28      	ldr	r2, [pc, #160]	; (d610c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x40c>)
   d606a:	4293      	cmp	r3, r2
   d606c:	d013      	beq.n	d6096 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x396>
   d606e:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d6072:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6076:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d607a:	4293      	cmp	r3, r2
   d607c:	d111      	bne.n	d60a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3a2>

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));

   d607e:	f107 011c 	add.w	r1, r7, #28
   d6082:	1d38      	adds	r0, r7, #4
   d6084:	f7ff fbba 	bl	d57fc <BlynkWidgetWriteInternalPinADIS>
   d6088:	e031      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
        BlynkReq req = { 0 };
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
            return true;

   d608a:	f107 011c 	add.w	r1, r7, #28
   d608e:	1d38      	adds	r0, r7, #4
   d6090:	f003 facf 	bl	d9632 <BlynkWidgetWrite>
   d6094:	e02b      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d6096:	f107 011c 	add.w	r1, r7, #28
   d609a:	1d38      	adds	r0, r7, #4
   d609c:	f000 fb22 	bl	d66e4 <BlynkWidgetWriteInternalPinACON>
   d60a0:	e025      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>

        ++it;
        char* start = (char*)(it).asStr();
   d60a2:	f7ff f92d 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d60a6:	f005 f98d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d60aa:	4919      	ldr	r1, [pc, #100]	; (d6110 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x410>)
   d60ac:	e007      	b.n	d60be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3be>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d60ae:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d60b2:	b1e3      	cbz	r3, d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d60b4:	f7ff f924 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d60b8:	f005 f984 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d60bc:	4915      	ldr	r1, [pc, #84]	; (d6114 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x414>)
   d60be:	f004 f913 	bl	da2e8 <_ZN5Print5printEPKc>
   d60c2:	f005 f97f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d60c6:	4629      	mov	r1, r5
   d60c8:	f004 f921 	bl	da30e <_ZN5Print7printlnEPKc>
   d60cc:	e00f      	b.n	d60ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
#ifdef BLYNK_DEBUG
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
   d60ce:	f7ff f917 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d60d2:	f005 f977 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d60d6:	4910      	ldr	r1, [pc, #64]	; (d6118 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x418>)
   d60d8:	f004 f906 	bl	da2e8 <_ZN5Print5printEPKc>
   d60dc:	f005 f972 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d60e0:	220a      	movs	r2, #10
   d60e2:	7b39      	ldrb	r1, [r7, #12]
   d60e4:	f004 f94c 	bl	da380 <_ZN5Print7printlnEhi>
#endif
        }
    } break;
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7ff fc9f 	bl	d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
        }
   d60ee:	2001      	movs	r0, #1
   d60f0:	46b5      	mov	sp, r6
   d60f2:	e004      	b.n	d60fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
{
   d60f4:	2001      	movs	r0, #1
   d60f6:	e002      	b.n	d60fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d60f8:	f00c f9a5 	bl	e2446 <atol>
   d60fc:	e73c      	b.n	d5f78 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
        }
    } break;
   d60fe:	3728      	adds	r7, #40	; 0x28
   d6100:	46bd      	mov	sp, r7
   d6102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6106:	bf00      	nop
   d6108:	00637472 	.word	0x00637472
   d610c:	6e6f6361 	.word	0x6e6f6361
   d6110:	000e5ea4 	.word	0x000e5ea4
   d6114:	000e5eba 	.word	0x000e5eba
   d6118:	000e5ec3 	.word	0x000e5ec3

000d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
        millis_time_t lastLogin;
    };
    uint16_t msgIdOut;
    uint16_t msgIdOutOverride;
    uint8_t  nesting;
protected:
   d611c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6120:	4604      	mov	r4, r0
   d6122:	460d      	mov	r5, r1
    BlynkState state;
};
   d6124:	f7ff f99a 	bl	d545c <_ZN10CloudClass7processEv>

template <class Transp>
   d6128:	7f63      	ldrb	r3, [r4, #29]
   d612a:	2b02      	cmp	r3, #2
   d612c:	f000 80a7 	beq.w	d627e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x162>
void BlynkAverageSample (T& avg, const T& input) {
    avg -= avg/WSIZE;
    const T add = input/WSIZE;
    // Fix for shorter delays
    if (add > 0)
      avg += add;
   d6130:	7f23      	ldrb	r3, [r4, #28]
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d6132:	8b62      	ldrh	r2, [r4, #26]
   d6134:	3301      	adds	r3, #1
   d6136:	b2db      	uxtb	r3, r3
   d6138:	7723      	strb	r3, [r4, #28]
   d613a:	2a00      	cmp	r2, #0
   d613c:	d164      	bne.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d613e:	2b02      	cmp	r3, #2
   d6140:	d862      	bhi.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6142:	6820      	ldr	r0, [r4, #0]
   d6144:	f005 fad7 	bl	db6f6 <_ZN9TCPClient9connectedEv>
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d6148:	b140      	cbz	r0, d615c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x40>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
   d614a:	2d00      	cmp	r5, #0
   d614c:	f040 8099 	bne.w	d6282 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
    int available() { return client.available(); }
   d6150:	6820      	ldr	r0, [r4, #0]
   d6152:	f005 fcbb 	bl	dbacc <_ZN9TCPClient9availableEv>
   d6156:	2800      	cmp	r0, #0
   d6158:	f300 8093 	bgt.w	d6282 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
                return false;
            }
            avail = false;
   d615c:	f003 fa62 	bl	d9624 <_Z11BlynkMillisv>
   d6160:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6162:	6820      	ldr	r0, [r4, #0]
   d6164:	f005 fac7 	bl	db6f6 <_ZN9TCPClient9connectedEv>
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d6168:	7f65      	ldrb	r5, [r4, #29]
   d616a:	2d01      	cmp	r5, #1
   d616c:	4606      	mov	r6, r0
   d616e:	d14d      	bne.n	d620c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf0>

   d6170:	b928      	cbnz	r0, d617e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
    // Update connection status after running commands
   d6172:	6167      	str	r7, [r4, #20]
    const bool tconn = conn.connected();
   d6174:	4620      	mov	r0, r4
   d6176:	f7ff fc59 	bl	d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>

   d617a:	4635      	mov	r5, r6
   d617c:	e07b      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
    if (state == CONNECTED) {
        if (!tconn) {
            lastHeartbeat = t;
   d617e:	68e3      	ldr	r3, [r4, #12]
   d6180:	4a48      	ldr	r2, [pc, #288]	; (d62a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x188>)
   d6182:	1afb      	subs	r3, r7, r3
   d6184:	4293      	cmp	r3, r2
   d6186:	d927      	bls.n	d61d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xbc>
            internalReconnect();
            return false;
   d6188:	f7ff f8ba 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d618c:	f005 f91a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6190:	4945      	ldr	r1, [pc, #276]	; (d62a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x18c>)
   d6192:	f004 f8a9 	bl	da2e8 <_ZN5Print5printEPKc>
   d6196:	f005 f915 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d619a:	220a      	movs	r2, #10
   d619c:	4639      	mov	r1, r7
   d619e:	f004 f8e0 	bl	da362 <_ZN5Print5printEmi>
   d61a2:	f005 f90f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d61a6:	4941      	ldr	r1, [pc, #260]	; (d62ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d61a8:	f004 f89e 	bl	da2e8 <_ZN5Print5printEPKc>
   d61ac:	f005 f90a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d61b0:	220a      	movs	r2, #10
   d61b2:	68e1      	ldr	r1, [r4, #12]
   d61b4:	f004 f8d5 	bl	da362 <_ZN5Print5printEmi>
   d61b8:	f005 f904 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d61bc:	493b      	ldr	r1, [pc, #236]	; (d62ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d61be:	f004 f893 	bl	da2e8 <_ZN5Print5printEPKc>
   d61c2:	f005 f8ff 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d61c6:	220a      	movs	r2, #10
   d61c8:	6961      	ldr	r1, [r4, #20]
   d61ca:	f004 f8ef 	bl	da3ac <_ZN5Print7printlnEmi>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
#ifdef BLYNK_DEBUG
   d61ce:	4620      	mov	r0, r4
   d61d0:	f7ff fc2c 	bl	d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
   d61d4:	2500      	movs	r5, #0
   d61d6:	e04e      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
#else
   d61d8:	f64e 2260 	movw	r2, #60000	; 0xea60
   d61dc:	4293      	cmp	r3, r2
   d61de:	d803      	bhi.n	d61e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xcc>
   d61e0:	6923      	ldr	r3, [r4, #16]
   d61e2:	1afb      	subs	r3, r7, r3
   d61e4:	4293      	cmp	r3, r2
   d61e6:	d90f      	bls.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d61e8:	6963      	ldr	r3, [r4, #20]
   d61ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d61ee:	1afb      	subs	r3, r7, r3
   d61f0:	4293      	cmp	r3, r2
   d61f2:	d909      	bls.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
            return false;
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d61f4:	2300      	movs	r3, #0
   d61f6:	9302      	str	r3, [sp, #8]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	9300      	str	r3, [sp, #0]
   d61fc:	461a      	mov	r2, r3
   d61fe:	2106      	movs	r1, #6
   d6200:	4620      	mov	r0, r4
   d6202:	f000 f857 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d6206:	6167      	str	r7, [r4, #20]
                return false;
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
            lastLogin = lastActivityOut;
   d6208:	2501      	movs	r5, #1
   d620a:	e034      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            return false;
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
   d620c:	2d00      	cmp	r5, #0
   d620e:	d1fb      	bne.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6210:	6961      	ldr	r1, [r4, #20]
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d6212:	1a79      	subs	r1, r7, r1
   d6214:	b178      	cbz	r0, d6236 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
   d6216:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d621a:	4299      	cmp	r1, r3
   d621c:	d9f4      	bls.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
#ifdef BLYNK_USE_DIRECT_CONNECT
   d621e:	f7ff f86f 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6222:	f005 f8cf 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6226:	4922      	ldr	r1, [pc, #136]	; (d62b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x194>)
   d6228:	f004 f871 	bl	da30e <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d622c:	6820      	ldr	r0, [r4, #0]
   d622e:	f005 fc35 	bl	dba9c <_ZN9TCPClient4stopEv>
        if (!tconn)
            conn.connect();
   d6232:	7765      	strb	r5, [r4, #29]
#else
   d6234:	e01f      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d6236:	f241 3388 	movw	r3, #5000	; 0x1388
   d623a:	4299      	cmp	r1, r3
   d623c:	d9e4      	bls.n	d6208 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d623e:	6820      	ldr	r0, [r4, #0]
   d6240:	f005 fc2c 	bl	dba9c <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
   d6244:	6820      	ldr	r0, [r4, #0]
   d6246:	f7ff f96f 	bl	d5528 <_ZN22BlynkTransportParticle7connectEv>
   d624a:	4605      	mov	r5, r0
   d624c:	b908      	cbnz	r0, d6252 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x136>
            state = CONNECTING;
   d624e:	6167      	str	r7, [r4, #20]
            return false;
   d6250:	e011      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
            conn.disconnect();
            if (!conn.connect()) {
                lastLogin = t;
   d6252:	f8d4 8004 	ldr.w	r8, [r4, #4]
            conn.disconnect();
            state = CONNECTING;
            return false;
        } else if (!tconn && (t - lastLogin > 5000UL)) {
            conn.disconnect();
            if (!conn.connect()) {
   d6256:	2701      	movs	r7, #1
   d6258:	8327      	strh	r7, [r4, #24]
                lastLogin = t;
   d625a:	4640      	mov	r0, r8
   d625c:	f00d f9ce 	bl	e35fc <strlen>
   d6260:	4643      	mov	r3, r8
   d6262:	e88d 0041 	stmia.w	sp, {r0, r6}
   d6266:	9602      	str	r6, [sp, #8]
   d6268:	463a      	mov	r2, r7
   d626a:	2102      	movs	r1, #2
   d626c:	4620      	mov	r0, r4
   d626e:	f000 f821 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                return false;
   d6272:	6923      	ldr	r3, [r4, #16]
   d6274:	6163      	str	r3, [r4, #20]
    else
   d6276:	7f23      	ldrb	r3, [r4, #28]
   d6278:	3b01      	subs	r3, #1
   d627a:	7723      	strb	r3, [r4, #28]
   d627c:	e00e      	b.n	d629c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d627e:	2500      	movs	r5, #0
   d6280:	e00c      	b.n	d629c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

   d6282:	4620      	mov	r0, r4
   d6284:	f7ff fd3c 	bl	d5d00 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d6288:	4605      	mov	r5, r0
   d628a:	2800      	cmp	r0, #0
   d628c:	f47f af60 	bne.w	d6150 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
   d6290:	6820      	ldr	r0, [r4, #0]
   d6292:	f005 fc03 	bl	dba9c <_ZN9TCPClient4stopEv>
    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
                conn.disconnect();
   d6296:	f003 f9cd 	bl	d9634 <BlynkNoOpCbk>
// TODO: Only when in direct mode?
   d629a:	e7ec      	b.n	d6276 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
            lastLogin = lastActivityOut;
            return true;
   d629c:	4628      	mov	r0, r5
   d629e:	b004      	add	sp, #16
   d62a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62a4:	00010d88 	.word	0x00010d88
   d62a8:	000e5ed9 	.word	0x000e5ed9
   d62ac:	000e5eed 	.word	0x000e5eed
   d62b0:	000e5ef0 	.word	0x000e5ef0

000d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:

    hdr.msg_id = ntohs(hdr.msg_id);
    hdr.length = ntohs(hdr.length);

    return rlen;
}
   d62b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62b8:	b083      	sub	sp, #12
   d62ba:	af00      	add	r7, sp, #0
   d62bc:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d62be:	6800      	ldr	r0, [r0, #0]
   d62c0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d62c2:	4689      	mov	r9, r1
   d62c4:	4616      	mov	r6, r2
   d62c6:	469b      	mov	fp, r3
            BLYNK_DBG_DUMP("<", data2, length2);
            wlen += conn.write(data2, length2);
            BlynkDelay(BLYNK_SEND_THROTTLE);
        }
    }

   d62c8:	46ea      	mov	sl, sp
   d62ca:	f005 fa14 	bl	db6f6 <_ZN9TCPClient9connectedEv>
    hdr.length = ntohs(hdr.length);

    return rlen;
}

#ifndef BLYNK_SEND_THROTTLE
   d62ce:	2800      	cmp	r0, #0
   d62d0:	d070      	beq.n	d63b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x100>
   d62d2:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d62d6:	f000 80c9 	beq.w	d646c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b8>
   d62da:	f1b9 0f06 	cmp.w	r9, #6
   d62de:	f000 80c5 	beq.w	d646c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b8>
   d62e2:	7f63      	ldrb	r3, [r4, #29]
   d62e4:	2b01      	cmp	r3, #1
   d62e6:	d165      	bne.n	d63b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x100>
#endif

#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

   d62e8:	b916      	cbnz	r6, d62f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>

    if (wlen != full_length) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d62ea:	8b66      	ldrh	r6, [r4, #26]
   d62ec:	2e00      	cmp	r6, #0
   d62ee:	d066      	beq.n	d63be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10a>

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
   d62f0:	f1a9 030c 	sub.w	r3, r9, #12
   d62f4:	2b08      	cmp	r3, #8
   d62f6:	d96a      	bls.n	d63ce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11a>
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d62f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d62fa:	f1bb 0f00 	cmp.w	fp, #0
   d62fe:	bf14      	ite	ne
   d6300:	46a8      	movne	r8, r5
   d6302:	f04f 0800 	moveq.w	r8, #0
   d6306:	2a00      	cmp	r2, #0
   d6308:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d630a:	f108 0305 	add.w	r3, r8, #5
   d630e:	bf14      	ite	ne
   d6310:	4690      	movne	r8, r2
   d6312:	f04f 0800 	moveq.w	r8, #0
   d6316:	4498      	add	r8, r3
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
            run();
        }
   d6318:	f108 0307 	add.w	r3, r8, #7
   d631c:	f023 0307 	bic.w	r3, r3, #7
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
   d6320:	18aa      	adds	r2, r5, r2
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
            run();
        }
   d6322:	ebad 0d03 	sub.w	sp, sp, r3
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
   d6326:	f3c2 2307 	ubfx	r3, r2, #8, #8
            run();
        }
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
   d632a:	ba76      	rev16	r6, r6
                               (data  ? length  : 0) +
   d632c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
            run();
        }
   d6330:	f8c7 d004 	str.w	sp, [r7, #4]
    }
#endif

   d6334:	f88d 9000 	strb.w	r9, [sp]
    const size_t full_length = (sizeof(BlynkHeader)) +
   d6338:	f8ad 6001 	strh.w	r6, [sp, #1]
                               (data  ? length  : 0) +
   d633c:	f8ad 3003 	strh.w	r3, [sp, #3]
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
   d6340:	f1bb 0f00 	cmp.w	fp, #0
   d6344:	d063      	beq.n	d640e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15a>
   d6346:	2d00      	cmp	r5, #0
   d6348:	d061      	beq.n	d640e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15a>
    // Those have more RAM and like single write at a time...
   d634a:	462a      	mov	r2, r5
   d634c:	4659      	mov	r1, fp
   d634e:	f10d 0005 	add.w	r0, sp, #5
   d6352:	f00c f987 	bl	e2664 <memcpy>

   d6356:	1d68      	adds	r0, r5, #5
    uint8_t buff[full_length];

   d6358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d635a:	2b00      	cmp	r3, #0
   d635c:	d159      	bne.n	d6412 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);

   d635e:	2500      	movs	r5, #0

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

   d6360:	4545      	cmp	r5, r8
   d6362:	d262      	bcs.n	d642a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x176>
    size_t pos = sizeof(BlynkHeader);
   d6364:	ebc5 0608 	rsb	r6, r5, r8
#define BlynkUtility_h

template<class T>
const T& BlynkMin(const T& a, const T& b)
{
    return (b < a) ? b : a;
   d6368:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    if (data && length) {
   d636c:	687b      	ldr	r3, [r7, #4]
   d636e:	bf28      	it	cs
   d6370:	f44f 6680 	movcs.w	r6, #1024	; 0x400
   d6374:	eb03 0905 	add.w	r9, r3, r5
   d6378:	b126      	cbz	r6, d6384 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd0>
   d637a:	4632      	mov	r2, r6
   d637c:	4649      	mov	r1, r9
   d637e:	483d      	ldr	r0, [pc, #244]	; (d6474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c0>)
   d6380:	f7ff f81c 	bl	d53bc <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.0>
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d6384:	4632      	mov	r2, r6
   d6386:	4649      	mov	r1, r9
   d6388:	6820      	ldr	r0, [r4, #0]
   d638a:	f005 f99e 	bl	db6ca <_ZN9TCPClient5writeEPKhj>
   d638e:	4606      	mov	r6, r0
        memcpy(buff + pos, data, length);
        pos += length;
   d6390:	2000      	movs	r0, #0
   d6392:	f003 f945 	bl	d9620 <_Z10BlynkDelaym>
    }
   d6396:	2e00      	cmp	r6, #0
   d6398:	d145      	bne.n	d6426 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x172>
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
   d639a:	f7fe ffb1 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d639e:	f005 f811 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d63a2:	4935      	ldr	r1, [pc, #212]	; (d6478 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c4>)
   d63a4:	f003 ffb3 	bl	da30e <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d63a8:	6820      	ldr	r0, [r4, #0]
   d63aa:	f005 fb77 	bl	dba9c <_ZN9TCPClient4stopEv>
    }

    size_t wlen = 0;
   d63ae:	7766      	strb	r6, [r4, #29]
    while (wlen < full_length) {
   d63b0:	f003 f940 	bl	d9634 <BlynkNoOpCbk>
            BlynkDelay(BLYNK_SEND_THROTTLE);
        }
    }

#endif

   d63b4:	370c      	adds	r7, #12

#ifndef BLYNK_SEND_THROTTLE
#define BLYNK_SEND_THROTTLE 0
#endif

#ifndef BLYNK_SEND_CHUNK
   d63b6:	46d5      	mov	sp, sl
            BlynkDelay(BLYNK_SEND_THROTTLE);
        }
    }

#endif

   d63b8:	46bd      	mov	sp, r7
   d63ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
        return;
    }
   d63be:	8b23      	ldrh	r3, [r4, #24]
   d63c0:	3301      	adds	r3, #1
   d63c2:	b29b      	uxth	r3, r3
   d63c4:	b903      	cbnz	r3, d63c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>

   d63c6:	2301      	movs	r3, #1
   d63c8:	8323      	strh	r3, [r4, #24]
    lastActivityOut = BlynkMillis();
   d63ca:	8b26      	ldrh	r6, [r4, #24]
   d63cc:	e790      	b.n	d62f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
   d63ce:	68e3      	ldr	r3, [r4, #12]
   d63d0:	6922      	ldr	r2, [r4, #16]
   d63d2:	4293      	cmp	r3, r2
   d63d4:	bf38      	it	cc
   d63d6:	4613      	movcc	r3, r2
   d63d8:	f103 0842 	add.w	r8, r3, #66	; 0x42
#endif
   d63dc:	f003 f922 	bl	d9624 <_Z11BlynkMillisv>
        return;
   d63e0:	ebc0 0008 	rsb	r0, r0, r8
   d63e4:	2800      	cmp	r0, #0
   d63e6:	db0a      	blt.n	d63fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
    }

    if (0 == id) {
        id = getNextMsgId();
    }
   d63e8:	2100      	movs	r1, #0
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7ff fe96 	bl	d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

   d63f0:	f003 f918 	bl	d9624 <_Z11BlynkMillisv>
#endif
        return;
    }

    if (0 == id) {
        id = getNextMsgId();
   d63f4:	ebc0 0008 	rsb	r0, r0, r8
   d63f8:	2800      	cmp	r0, #0
   d63fa:	daf5      	bge.n	d63e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x134>
   d63fc:	e77c      	b.n	d62f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d63fe:	7f21      	ldrb	r1, [r4, #28]
   d6400:	2900      	cmp	r1, #0
   d6402:	f47f af79 	bne.w	d62f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d6406:	4620      	mov	r0, r4
   d6408:	f7ff fe88 	bl	d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d640c:	e774      	b.n	d62f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);

   d640e:	2005      	movs	r0, #5
   d6410:	e7a2      	b.n	d6358 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];

   d6412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d6414:	2b00      	cmp	r3, #0
   d6416:	d0a2      	beq.n	d635e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
    BlynkHeader* hdr = (BlynkHeader*)buff;
   d6418:	461a      	mov	r2, r3
   d641a:	687b      	ldr	r3, [r7, #4]
   d641c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d641e:	4418      	add	r0, r3
   d6420:	f00c f920 	bl	e2664 <memcpy>
   d6424:	e79b      	b.n	d635e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>

    size_t wlen = 0;
    while (wlen < full_length) {
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
   d6426:	4435      	add	r5, r6

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

   d6428:	e79a      	b.n	d6360 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>

    if (cmd != BLYNK_CMD_RESPONSE) {
        if (length) {
            BLYNK_DBG_DUMP("<", data, length);
            wlen += conn.write(data, length);
            BlynkDelay(BLYNK_SEND_THROTTLE);
   d642a:	d01b      	beq.n	d6464 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b0>
        }
        if (length2) {
   d642c:	f7fe ff68 	bl	d5300 <_ZL14BLYNK_LOG_TIMEv>
   d6430:	f004 ffc8 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6434:	4911      	ldr	r1, [pc, #68]	; (d647c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c8>)
   d6436:	f003 ff57 	bl	da2e8 <_ZN5Print5printEPKc>
   d643a:	f004 ffc3 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d643e:	220a      	movs	r2, #10
   d6440:	4629      	mov	r1, r5
   d6442:	f003 ffa7 	bl	da394 <_ZN5Print5printEji>
   d6446:	f004 ffbd 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d644a:	212f      	movs	r1, #47	; 0x2f
   d644c:	f003 ff50 	bl	da2f0 <_ZN5Print5printEc>
   d6450:	f004 ffb8 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6454:	220a      	movs	r2, #10
   d6456:	4641      	mov	r1, r8
   d6458:	f003 ff9e 	bl	da398 <_ZN5Print7printlnEji>
            BLYNK_DBG_DUMP("<", data2, length2);
            wlen += conn.write(data2, length2);
   d645c:	4620      	mov	r0, r4
   d645e:	f7ff fae5 	bl	d5a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            BlynkDelay(BLYNK_SEND_THROTTLE);
   d6462:	e7a7      	b.n	d63b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x100>
        }
    }

   d6464:	f003 f8de 	bl	d9624 <_Z11BlynkMillisv>
   d6468:	6120      	str	r0, [r4, #16]
   d646a:	e7a3      	b.n	d63b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x100>
#endif

#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

   d646c:	2e00      	cmp	r6, #0
   d646e:	f47f af43 	bne.w	d62f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d6472:	e73a      	b.n	d62ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   d6474:	000e5efe 	.word	0x000e5efe
   d6478:	000e5f00 	.word	0x000e5f00
   d647c:	000e5f0a 	.word	0x000e5f0a

000d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6480:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6482:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6486:	ab08      	add	r3, sp, #32
   d6488:	2400      	movs	r4, #0
   d648a:	4605      	mov	r5, r0
   d648c:	460f      	mov	r7, r1
   d648e:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6490:	a805      	add	r0, sp, #20
   d6492:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6496:	490e      	ldr	r1, [pc, #56]	; (d64d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d6498:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d649a:	4616      	mov	r6, r2
   d649c:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d649e:	f7ff f802 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d64a2:	4639      	mov	r1, r7
   d64a4:	a805      	add	r0, sp, #20
   d64a6:	f7ff f81b 	bl	d54e0 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d64aa:	4631      	mov	r1, r6
   d64ac:	a805      	add	r0, sp, #20
   d64ae:	f7ff f817 	bl	d54e0 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d64b2:	9b06      	ldr	r3, [sp, #24]
   d64b4:	9402      	str	r4, [sp, #8]
   d64b6:	3b01      	subs	r3, #1
   d64b8:	9300      	str	r3, [sp, #0]
   d64ba:	9401      	str	r4, [sp, #4]
   d64bc:	9b05      	ldr	r3, [sp, #20]
   d64be:	4622      	mov	r2, r4
   d64c0:	2114      	movs	r1, #20
   d64c2:	4628      	mov	r0, r5
   d64c4:	f7ff fef6 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d64c8:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d64cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d64ce:	bf00      	nop
   d64d0:	000e5f10 	.word	0x000e5f10

000d64d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d64d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BOARD_TEMPLATE_ID
    {
        const char* tmpl = BOARD_TEMPLATE_ID;
        if (tmpl && strlen(tmpl)) {
            profile_dyn.add_key("tmpl", tmpl);
        }
   d64d6:	2200      	movs	r2, #0
   d64d8:	2349      	movs	r3, #73	; 0x49
   d64da:	9300      	str	r3, [sp, #0]
   d64dc:	9202      	str	r2, [sp, #8]
   d64de:	9201      	str	r2, [sp, #4]
   d64e0:	4b03      	ldr	r3, [pc, #12]	; (d64f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d64e2:	2111      	movs	r1, #17
   d64e4:	f7ff fee6 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
#endif

   d64e8:	b005      	add	sp, #20
   d64ea:	f85d fb04 	ldr.w	pc, [sp], #4
   d64ee:	bf00      	nop
   d64f0:	000e5bd8 	.word	0x000e5bd8

000d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d64f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64f6:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d64fa:	ab0c      	add	r3, sp, #48	; 0x30
   d64fc:	2400      	movs	r4, #0
   d64fe:	4605      	mov	r5, r0
   d6500:	460f      	mov	r7, r1
   d6502:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6504:	a805      	add	r0, sp, #20
   d6506:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d650a:	4911      	ldr	r1, [pc, #68]	; (d6550 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d650c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d650e:	4616      	mov	r6, r2
   d6510:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6512:	f7fe ffc8 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6516:	4639      	mov	r1, r7
   d6518:	a805      	add	r0, sp, #20
   d651a:	f7fe ffe1 	bl	d54e0 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d651e:	4631      	mov	r1, r6
   d6520:	a808      	add	r0, sp, #32
   d6522:	f003 fdb1 	bl	da088 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6526:	9908      	ldr	r1, [sp, #32]
   d6528:	a805      	add	r0, sp, #20
   d652a:	f7fe ffbc 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
   d652e:	a808      	add	r0, sp, #32
   d6530:	f003 fd24 	bl	d9f7c <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6534:	9b06      	ldr	r3, [sp, #24]
   d6536:	9402      	str	r4, [sp, #8]
   d6538:	3b01      	subs	r3, #1
   d653a:	9300      	str	r3, [sp, #0]
   d653c:	9401      	str	r4, [sp, #4]
   d653e:	9b05      	ldr	r3, [sp, #20]
   d6540:	4622      	mov	r2, r4
   d6542:	2114      	movs	r1, #20
   d6544:	4628      	mov	r0, r5
   d6546:	f7ff feb5 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d654a:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6550:	000e5f10 	.word	0x000e5f10

000d6554 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d6554:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6556:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d655a:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d655c:	ab08      	add	r3, sp, #32
   d655e:	4617      	mov	r7, r2
   d6560:	2400      	movs	r4, #0
   d6562:	4605      	mov	r5, r0
   d6564:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d6566:	a805      	add	r0, sp, #20
   d6568:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d656c:	9307      	str	r3, [sp, #28]
   d656e:	9406      	str	r4, [sp, #24]
   d6570:	f7fe ff99 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d6574:	4639      	mov	r1, r7
   d6576:	a805      	add	r0, sp, #20
   d6578:	f7fe ff95 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d657c:	6831      	ldr	r1, [r6, #0]
   d657e:	a805      	add	r0, sp, #20
   d6580:	f7fe ff91 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6584:	9b06      	ldr	r3, [sp, #24]
   d6586:	9402      	str	r4, [sp, #8]
   d6588:	3b01      	subs	r3, #1
   d658a:	9300      	str	r3, [sp, #0]
   d658c:	9401      	str	r4, [sp, #4]
   d658e:	9b05      	ldr	r3, [sp, #20]
   d6590:	4622      	mov	r2, r4
   d6592:	210d      	movs	r1, #13
   d6594:	4628      	mov	r0, r5
   d6596:	f7ff fe8d 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d659a:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d659e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d65a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d65a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65a2:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d65a6:	ab0c      	add	r3, sp, #48	; 0x30
   d65a8:	2400      	movs	r4, #0
   d65aa:	4605      	mov	r5, r0
   d65ac:	460f      	mov	r7, r1
   d65ae:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d65b0:	a805      	add	r0, sp, #20
   d65b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d65b6:	4911      	ldr	r1, [pc, #68]	; (d65fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d65b8:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d65ba:	4616      	mov	r6, r2
   d65bc:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d65be:	f7fe ff72 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d65c2:	4639      	mov	r1, r7
   d65c4:	a805      	add	r0, sp, #20
   d65c6:	f7fe ff8b 	bl	d54e0 <_ZN10BlynkParam3addEi>
   d65ca:	4631      	mov	r1, r6
   d65cc:	a808      	add	r0, sp, #32
   d65ce:	f003 fd5b 	bl	da088 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d65d2:	9908      	ldr	r1, [sp, #32]
   d65d4:	a805      	add	r0, sp, #20
   d65d6:	f7fe ff66 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
   d65da:	a808      	add	r0, sp, #32
   d65dc:	f003 fcce 	bl	d9f7c <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d65e0:	9b06      	ldr	r3, [sp, #24]
   d65e2:	9402      	str	r4, [sp, #8]
   d65e4:	3b01      	subs	r3, #1
   d65e6:	9300      	str	r3, [sp, #0]
   d65e8:	9401      	str	r4, [sp, #4]
   d65ea:	9b05      	ldr	r3, [sp, #20]
   d65ec:	4622      	mov	r2, r4
   d65ee:	2114      	movs	r1, #20
   d65f0:	4628      	mov	r0, r5
   d65f2:	f7ff fe5f 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d65f6:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d65fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65fc:	000e5f10 	.word	0x000e5f10

000d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6600:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6602:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6606:	ab0a      	add	r3, sp, #40	; 0x28
   d6608:	2400      	movs	r4, #0
   d660a:	4606      	mov	r6, r0
   d660c:	460d      	mov	r5, r1
   d660e:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6610:	a807      	add	r0, sp, #28
   d6612:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6616:	4917      	ldr	r1, [pc, #92]	; (d6674 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6618:	ed8d 0a05 	vstr	s0, [sp, #20]
   d661c:	9309      	str	r3, [sp, #36]	; 0x24
   d661e:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6620:	f7fe ff41 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6624:	4629      	mov	r1, r5
   d6626:	a807      	add	r0, sp, #28
   d6628:	f7fe ff5a 	bl	d54e0 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d662c:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6630:	9b08      	ldr	r3, [sp, #32]
   d6632:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6634:	9d07      	ldr	r5, [sp, #28]
   d6636:	ee10 0a10 	vmov	r0, s0
   d663a:	1acf      	subs	r7, r1, r3
   d663c:	441d      	add	r5, r3
   d663e:	f00b fb23 	bl	e1c88 <__aeabi_f2d>
   d6642:	4a0d      	ldr	r2, [pc, #52]	; (d6678 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d6644:	e9cd 0100 	strd	r0, r1, [sp]
   d6648:	4639      	mov	r1, r7
   d664a:	4628      	mov	r0, r5
   d664c:	f003 fb58 	bl	d9d00 <snprintf>
   d6650:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6652:	9402      	str	r4, [sp, #8]
   d6654:	3001      	adds	r0, #1
   d6656:	4418      	add	r0, r3
   d6658:	9008      	str	r0, [sp, #32]
   d665a:	3801      	subs	r0, #1
   d665c:	9000      	str	r0, [sp, #0]
   d665e:	9401      	str	r4, [sp, #4]
   d6660:	9b07      	ldr	r3, [sp, #28]
   d6662:	4622      	mov	r2, r4
   d6664:	2114      	movs	r1, #20
   d6666:	4630      	mov	r0, r6
   d6668:	f7ff fe24 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d666c:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d6670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6672:	bf00      	nop
   d6674:	000e5f10 	.word	0x000e5f10
   d6678:	000e5f17 	.word	0x000e5f17

000d667c <_Z13setAppWidgetsv>:
 DEBUG_PRINTLN("Disconnected");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d667c:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d667e:	4d09      	ldr	r5, [pc, #36]	; (d66a4 <_Z13setAppWidgetsv+0x28>)
   d6680:	4c09      	ldr	r4, [pc, #36]	; (d66a8 <_Z13setAppWidgetsv+0x2c>)
   d6682:	686a      	ldr	r2, [r5, #4]
   d6684:	4620      	mov	r0, r4
   d6686:	210b      	movs	r1, #11
   d6688:	f7ff fefa 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d668c:	4620      	mov	r0, r4
   d668e:	68aa      	ldr	r2, [r5, #8]
   d6690:	210d      	movs	r1, #13
   d6692:	f7ff fef5 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d6696:	ed95 0a03 	vldr	s0, [r5, #12]
   d669a:	210f      	movs	r1, #15
   d669c:	4620      	mov	r0, r4
   d669e:	f7ff ffaf 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d66a2:	bd38      	pop	{r3, r4, r5, pc}
   d66a4:	2003dad8 	.word	0x2003dad8
   d66a8:	2003e234 	.word	0x2003e234

000d66ac <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d66ac:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d66ae:	6808      	ldr	r0, [r1, #0]
   d66b0:	f00b fec5 	bl	e243e <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d66b4:	4b03      	ldr	r3, [pc, #12]	; (d66c4 <BlynkWidgetWrite10+0x18>)
   d66b6:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d66b8:	f7ff f852 	bl	d5760 <_Z9saveStatev>
  setAppWidgets();
}
   d66bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d66c0:	f7ff bfdc 	b.w	d667c <_Z13setAppWidgetsv>
   d66c4:	2003dad8 	.word	0x2003dad8

000d66c8 <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d66c8:	b508      	push	{r3, lr}
   d66ca:	6808      	ldr	r0, [r1, #0]
   d66cc:	f00b feb7 	bl	e243e <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d66d0:	4b03      	ldr	r3, [pc, #12]	; (d66e0 <BlynkWidgetWrite12+0x18>)
   d66d2:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d66d4:	f7ff f844 	bl	d5760 <_Z9saveStatev>
  setAppWidgets();
}
   d66d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d66dc:	f7ff bfce 	b.w	d667c <_Z13setAppWidgetsv>
   d66e0:	2003dad8 	.word	0x2003dad8

000d66e4 <BlynkWidgetWriteInternalPinACON>:
  delay(5000);
  System.sleep(SLEEP_MODE_DEEP);
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d66e4:	b508      	push	{r3, lr}
  appConnected = true;
   d66e6:	4b06      	ldr	r3, [pc, #24]	; (d6700 <BlynkWidgetWriteInternalPinACON+0x1c>)
   d66e8:	2201      	movs	r2, #1
   d66ea:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d66ec:	f7ff ffc6 	bl	d667c <_Z13setAppWidgetsv>
  DEBUG_PRINTLN("Connected");
   d66f0:	f004 fe68 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d66f4:	4903      	ldr	r1, [pc, #12]	; (d6704 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d66f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  DEBUG_PRINTLN("Connected");
   d66fa:	f003 be08 	b.w	da30e <_ZN5Print7printlnEPKc>
   d66fe:	bf00      	nop
   d6700:	2003da9c 	.word	0x2003da9c
   d6704:	000e5f1d 	.word	0x000e5f1d

000d6708 <BlynkWidgetWrite14>:
  }
  
}

BLYNK_WRITE(V14) 
{
   d6708:	b510      	push	{r4, lr}
   d670a:	6808      	ldr	r0, [r1, #0]
   d670c:	f00b fe97 	bl	e243e <atoi>
  if (param.asInt()==1)
   d6710:	2801      	cmp	r0, #1
   d6712:	d10d      	bne.n	d6730 <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d6714:	4809      	ldr	r0, [pc, #36]	; (d673c <BlynkWidgetWrite14+0x34>)
   d6716:	4c0a      	ldr	r4, [pc, #40]	; (d6740 <BlynkWidgetWrite14+0x38>)
   d6718:	f001 fe32 	bl	d8380 <_ZN3ULP4zeroEv>
   d671c:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d6720:	f7ff f81e 	bl	d5760 <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d6724:	ed94 0a03 	vldr	s0, [r4, #12]
   d6728:	4806      	ldr	r0, [pc, #24]	; (d6744 <BlynkWidgetWrite14+0x3c>)
   d672a:	210f      	movs	r1, #15
   d672c:	f7ff ff68 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d6730:	2200      	movs	r2, #0
   d6732:	210e      	movs	r1, #14
   d6734:	4803      	ldr	r0, [pc, #12]	; (d6744 <BlynkWidgetWrite14+0x3c>)
   d6736:	f7ff fea3 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
   d673a:	bd10      	pop	{r4, pc}
   d673c:	2003df10 	.word	0x2003df10
   d6740:	2003dad8 	.word	0x2003dad8
   d6744:	2003e234 	.word	0x2003e234

000d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6748:	b5f0      	push	{r4, r5, r6, r7, lr}
   d674a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d674e:	ab08      	add	r3, sp, #32
   d6750:	2400      	movs	r4, #0
   d6752:	4605      	mov	r5, r0
   d6754:	460f      	mov	r7, r1
   d6756:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6758:	a805      	add	r0, sp, #20
   d675a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d675e:	490e      	ldr	r1, [pc, #56]	; (d6798 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d6760:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6762:	4616      	mov	r6, r2
   d6764:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6766:	f7fe fe9e 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d676a:	4639      	mov	r1, r7
   d676c:	a805      	add	r0, sp, #20
   d676e:	f7fe feb7 	bl	d54e0 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6772:	4631      	mov	r1, r6
   d6774:	a805      	add	r0, sp, #20
   d6776:	f7fe fe96 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d677a:	9b06      	ldr	r3, [sp, #24]
   d677c:	9402      	str	r4, [sp, #8]
   d677e:	3b01      	subs	r3, #1
   d6780:	9300      	str	r3, [sp, #0]
   d6782:	9401      	str	r4, [sp, #4]
   d6784:	9b05      	ldr	r3, [sp, #20]
   d6786:	4622      	mov	r2, r4
   d6788:	2114      	movs	r1, #20
   d678a:	4628      	mov	r0, r5
   d678c:	f7ff fd92 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6790:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6796:	bf00      	nop
   d6798:	000e5f10 	.word	0x000e5f10

000d679c <BlynkWidgetWrite22>:
  state.firstRunCheck != firstRunValue;
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
   d679c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d67a0:	6809      	ldr	r1, [r1, #0]
   d67a2:	4668      	mov	r0, sp
   d67a4:	f003 fc31 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d67a8:	4945      	ldr	r1, [pc, #276]	; (d68c0 <BlynkWidgetWrite22+0x124>)
   d67aa:	4668      	mov	r0, sp
   d67ac:	f003 fcea 	bl	da184 <_ZNK6String6equalsEPKc>
   d67b0:	2800      	cmp	r0, #0
   d67b2:	d07f      	beq.n	d68b4 <BlynkWidgetWrite22+0x118>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d67b4:	4c43      	ldr	r4, [pc, #268]	; (d68c4 <BlynkWidgetWrite22+0x128>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d67b6:	4a44      	ldr	r2, [pc, #272]	; (d68c8 <BlynkWidgetWrite22+0x12c>)
   d67b8:	4844      	ldr	r0, [pc, #272]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d67ba:	2116      	movs	r1, #22
   d67bc:	f7ff ffc4 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
   d67c0:	260f      	movs	r6, #15
    state.secondsBetweenReadings=5;
   d67c2:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d67c4:	2700      	movs	r7, #0
    state.zeroOff = 0;
   d67c6:	f04f 0800 	mov.w	r8, #0
    strcpy(state.expression,"Enter expression here");
   d67ca:	4941      	ldr	r1, [pc, #260]	; (d68d0 <BlynkWidgetWrite22+0x134>)
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d67cc:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d67ce:	f104 0010 	add.w	r0, r4, #16
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d67d2:	6066      	str	r6, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d67d4:	6027      	str	r7, [r4, #0]
    state.zeroOff = 0;
   d67d6:	f8c4 800c 	str.w	r8, [r4, #12]
    strcpy(state.expression,"Enter expression here");
   d67da:	f00c f9d7 	bl	e2b8c <strcpy>
    strcpy(state.email,"Enter email here");
   d67de:	493d      	ldr	r1, [pc, #244]	; (d68d4 <BlynkWidgetWrite22+0x138>)
   d67e0:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d67e4:	f00c f9d2 	bl	e2b8c <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d67e8:	493a      	ldr	r1, [pc, #232]	; (d68d4 <BlynkWidgetWrite22+0x138>)
   d67ea:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d67ee:	f00c f9cd 	bl	e2b8c <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=1;
    state.batThreshold = 0;
   d67f2:	f504 6582 	add.w	r5, r4, #1040	; 0x410
    state.firstRunCheck = 0;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d67f6:	4937      	ldr	r1, [pc, #220]	; (d68d4 <BlynkWidgetWrite22+0x138>)
   d67f8:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d67fc:	f00c f9c6 	bl	e2b8c <strcpy>
    state.deviceZone=1;
   d6800:	2301      	movs	r3, #1
    state.batThreshold = 0;
    state.lastAlert=false;
    state.batLastAlert=false;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6802:	4632      	mov	r2, r6
   d6804:	210a      	movs	r1, #10
   d6806:	4831      	ldr	r0, [pc, #196]	; (d68cc <BlynkWidgetWrite22+0x130>)
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=1;
   d6808:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
    state.batThreshold = 0;
   d680c:	f8c5 8000 	str.w	r8, [r5]
    state.lastAlert=false;
   d6810:	f884 7414 	strb.w	r7, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d6814:	f884 7415 	strb.w	r7, [r4, #1045]	; 0x415
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d6818:	f7ff fe32 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d681c:	68a2      	ldr	r2, [r4, #8]
   d681e:	482b      	ldr	r0, [pc, #172]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6820:	210c      	movs	r1, #12
   d6822:	f7ff fe2d 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d6826:	6862      	ldr	r2, [r4, #4]
   d6828:	4828      	ldr	r0, [pc, #160]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d682a:	210b      	movs	r1, #11
   d682c:	f7ff fe28 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6830:	68a2      	ldr	r2, [r4, #8]
   d6832:	4826      	ldr	r0, [pc, #152]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6834:	210d      	movs	r1, #13
   d6836:	f7ff fe23 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d683a:	f104 0210 	add.w	r2, r4, #16
   d683e:	2114      	movs	r1, #20
   d6840:	4822      	ldr	r0, [pc, #136]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6842:	f7ff ff81 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d6846:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d684a:	2110      	movs	r1, #16
   d684c:	481f      	ldr	r0, [pc, #124]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d684e:	f7ff ff7b 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d6852:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6856:	2112      	movs	r1, #18
   d6858:	481c      	ldr	r0, [pc, #112]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d685a:	f7ff ff75 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d685e:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6862:	211a      	movs	r1, #26
   d6864:	4819      	ldr	r0, [pc, #100]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6866:	f7ff ff6f 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d686a:	ed94 0a03 	vldr	s0, [r4, #12]
   d686e:	4817      	ldr	r0, [pc, #92]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6870:	4631      	mov	r1, r6
   d6872:	f7ff fec5 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d6876:	ed95 0a00 	vldr	s0, [r5]
   d687a:	4814      	ldr	r0, [pc, #80]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d687c:	2119      	movs	r1, #25
   d687e:	f7ff febf 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d6882:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   d6886:	4811      	ldr	r0, [pc, #68]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6888:	2117      	movs	r1, #23
   d688a:	f7ff fdf9 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d688e:	4812      	ldr	r0, [pc, #72]	; (d68d8 <BlynkWidgetWrite22+0x13c>)
   d6890:	f002 f8b5 	bl	d89fe <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d6894:	4a11      	ldr	r2, [pc, #68]	; (d68dc <BlynkWidgetWrite22+0x140>)
   d6896:	480d      	ldr	r0, [pc, #52]	; (d68cc <BlynkWidgetWrite22+0x130>)
   d6898:	2115      	movs	r1, #21
   d689a:	f7ff ff55 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    DEBUG_PRINTLN("Hard Resetting");
   d689e:	f004 fd91 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d68a2:	490e      	ldr	r1, [pc, #56]	; (d68dc <BlynkWidgetWrite22+0x140>)
   d68a4:	f003 fd33 	bl	da30e <_ZN5Print7printlnEPKc>
    delay(500);
   d68a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d68ac:	f004 f840 	bl	da930 <delay>
    System.reset();
   d68b0:	f003 fae6 	bl	d9e80 <_ZN11SystemClass5resetEv>
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d68b4:	4668      	mov	r0, sp
   d68b6:	f003 fb61 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    DEBUG_PRINTLN("Hard Resetting");
    delay(500);
    System.reset();
  }
}
   d68ba:	b004      	add	sp, #16
   d68bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68c0:	000e5f27 	.word	0x000e5f27
   d68c4:	2003dad8 	.word	0x2003dad8
   d68c8:	000e5f2f 	.word	0x000e5f2f
   d68cc:	2003e234 	.word	0x2003e234
   d68d0:	000e5f43 	.word	0x000e5f43
   d68d4:	000e5f59 	.word	0x000e5f59
   d68d8:	2003d760 	.word	0x2003d760
   d68dc:	000e5f6a 	.word	0x000e5f6a

000d68e0 <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d68e0:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d68e2:	4c29      	ldr	r4, [pc, #164]	; (d6988 <_Z20initializeAppWidgetsv+0xa8>)
   d68e4:	4829      	ldr	r0, [pc, #164]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d68e6:	6862      	ldr	r2, [r4, #4]
   d68e8:	210a      	movs	r1, #10
   d68ea:	f7ff fdc9 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d68ee:	68a2      	ldr	r2, [r4, #8]
   d68f0:	4826      	ldr	r0, [pc, #152]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d68f2:	210c      	movs	r1, #12
   d68f4:	f7ff fdc4 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d68f8:	6862      	ldr	r2, [r4, #4]
   d68fa:	4824      	ldr	r0, [pc, #144]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d68fc:	210b      	movs	r1, #11
   d68fe:	f7ff fdbf 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d6902:	68a2      	ldr	r2, [r4, #8]
   d6904:	4821      	ldr	r0, [pc, #132]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6906:	210d      	movs	r1, #13
   d6908:	f7ff fdba 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d690c:	f104 0210 	add.w	r2, r4, #16
   d6910:	2114      	movs	r1, #20
   d6912:	481e      	ldr	r0, [pc, #120]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6914:	f7ff ff18 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d6918:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d691c:	2110      	movs	r1, #16
   d691e:	481b      	ldr	r0, [pc, #108]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6920:	f7ff ff12 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d6924:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d6928:	2112      	movs	r1, #18
   d692a:	4818      	ldr	r0, [pc, #96]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d692c:	f7ff ff0c 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d6930:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d6934:	211a      	movs	r1, #26
   d6936:	4815      	ldr	r0, [pc, #84]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6938:	f7ff ff06 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d693c:	ed94 0a03 	vldr	s0, [r4, #12]
   d6940:	4812      	ldr	r0, [pc, #72]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6942:	210f      	movs	r1, #15
   d6944:	f7ff fe5c 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d6948:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d694c:	ed93 0a00 	vldr	s0, [r3]
   d6950:	480e      	ldr	r0, [pc, #56]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6952:	2119      	movs	r1, #25
   d6954:	f7ff fe54 	bl	d6600 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d6958:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   d695c:	480b      	ldr	r0, [pc, #44]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d695e:	2117      	movs	r1, #23
   d6960:	f7ff fd8e 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V22,"Enter code to reset");
   d6964:	4a0a      	ldr	r2, [pc, #40]	; (d6990 <_Z20initializeAppWidgetsv+0xb0>)
   d6966:	4809      	ldr	r0, [pc, #36]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6968:	2116      	movs	r1, #22
   d696a:	f7ff feed 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d696e:	4b09      	ldr	r3, [pc, #36]	; (d6994 <_Z20initializeAppWidgetsv+0xb4>)
   d6970:	781b      	ldrb	r3, [r3, #0]
   d6972:	b123      	cbz	r3, d697e <_Z20initializeAppWidgetsv+0x9e>
   d6974:	4a08      	ldr	r2, [pc, #32]	; (d6998 <_Z20initializeAppWidgetsv+0xb8>)
   d6976:	4805      	ldr	r0, [pc, #20]	; (d698c <_Z20initializeAppWidgetsv+0xac>)
   d6978:	2115      	movs	r1, #21
   d697a:	f7ff fee5 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  state.firstRunCheck != firstRunValue;
  saveState();
}
   d697e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Blynk.virtualWrite(V25, state.batThreshold);
  Blynk.virtualWrite(V23, state.deviceZone);
  Blynk.virtualWrite(V22,"Enter code to reset");
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
  state.firstRunCheck != firstRunValue;
  saveState();
   d6982:	f7fe beed 	b.w	d5760 <_Z9saveStatev>
   d6986:	bf00      	nop
   d6988:	2003dad8 	.word	0x2003dad8
   d698c:	2003e234 	.word	0x2003e234
   d6990:	000e5f2f 	.word	0x000e5f2f
   d6994:	2003da9d 	.word	0x2003da9d
   d6998:	000e5f79 	.word	0x000e5f79

000d699c <BlynkOnConnected>:
    System.reset();
  }
}

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d699c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  DEBUG_PRINTLN("Blynk is now connected - syncing all pins.");
   d699e:	f004 fd11 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d69a2:	490b      	ldr	r1, [pc, #44]	; (d69d0 <BlynkOnConnected+0x34>)
   d69a4:	f003 fcb3 	bl	da30e <_ZN5Print7printlnEPKc>
  if (state.firstRunCheck != firstRunValue)
   d69a8:	4b0a      	ldr	r3, [pc, #40]	; (d69d4 <BlynkOnConnected+0x38>)
   d69aa:	681a      	ldr	r2, [r3, #0]
   d69ac:	4b0a      	ldr	r3, [pc, #40]	; (d69d8 <BlynkOnConnected+0x3c>)
   d69ae:	681b      	ldr	r3, [r3, #0]
   d69b0:	429a      	cmp	r2, r3
   d69b2:	d001      	beq.n	d69b8 <BlynkOnConnected+0x1c>
  {
    initializeAppWidgets();
   d69b4:	f7ff ff94 	bl	d68e0 <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d69b8:	2300      	movs	r3, #0
   d69ba:	9302      	str	r3, [sp, #8]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	9300      	str	r3, [sp, #0]
   d69c0:	461a      	mov	r2, r3
   d69c2:	2110      	movs	r1, #16
   d69c4:	4805      	ldr	r0, [pc, #20]	; (d69dc <BlynkOnConnected+0x40>)
   d69c6:	f7ff fc75 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d69ca:	b005      	add	sp, #20
   d69cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d69d0:	000e5f94 	.word	0x000e5f94
   d69d4:	2003dad8 	.word	0x2003dad8
   d69d8:	2003d5f0 	.word	0x2003d5f0
   d69dc:	2003e234 	.word	0x2003e234

000d69e0 <_Z13runExpressionPc>:
  state.deviceZone=param.asInt();
  saveState();
}

bool runExpression(char *expression)
{   
   d69e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69e4:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
   d69e8:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d69ea:	2260      	movs	r2, #96	; 0x60
   d69ec:	2100      	movs	r1, #0
   d69ee:	a81a      	add	r0, sp, #104	; 0x68
   d69f0:	f00b fe43 	bl	e267a <memset>
   d69f4:	4b6c      	ldr	r3, [pc, #432]	; (d6ba8 <_Z13runExpressionPc+0x1c8>)
   d69f6:	931a      	str	r3, [sp, #104]	; 0x68
   d69f8:	4b6c      	ldr	r3, [pc, #432]	; (d6bac <_Z13runExpressionPc+0x1cc>)
   d69fa:	931e      	str	r3, [sp, #120]	; 0x78
   d69fc:	4b6c      	ldr	r3, [pc, #432]	; (d6bb0 <_Z13runExpressionPc+0x1d0>)
   d69fe:	9322      	str	r3, [sp, #136]	; 0x88
   d6a00:	4b6c      	ldr	r3, [pc, #432]	; (d6bb4 <_Z13runExpressionPc+0x1d4>)
   d6a02:	9326      	str	r3, [sp, #152]	; 0x98
   d6a04:	4b6c      	ldr	r3, [pc, #432]	; (d6bb8 <_Z13runExpressionPc+0x1d8>)
   d6a06:	932a      	str	r3, [sp, #168]	; 0xa8
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d6a08:	4c6c      	ldr	r4, [pc, #432]	; (d6bbc <_Z13runExpressionPc+0x1dc>)

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6a0a:	4b6d      	ldr	r3, [pc, #436]	; (d6bc0 <_Z13runExpressionPc+0x1e0>)
   d6a0c:	932e      	str	r3, [sp, #184]	; 0xb8
   d6a0e:	ab0e      	add	r3, sp, #56	; 0x38
   d6a10:	932b      	str	r3, [sp, #172]	; 0xac
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d6a12:	7823      	ldrb	r3, [r4, #0]

bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d6a14:	f10d 0b18 	add.w	fp, sp, #24
   d6a18:	f10d 0a20 	add.w	sl, sp, #32
   d6a1c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   d6a20:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   d6a24:	af10      	add	r7, sp, #64	; 0x40
   d6a26:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
   d6a2a:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
   d6a2e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   d6a32:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   d6a36:	972f      	str	r7, [sp, #188]	; 0xbc
  if (terminalDebug) Blynk.virtualWrite(V21, expression);
   d6a38:	b123      	cbz	r3, d6a44 <_Z13runExpressionPc+0x64>
   d6a3a:	462a      	mov	r2, r5
   d6a3c:	2115      	movs	r1, #21
   d6a3e:	4861      	ldr	r0, [pc, #388]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6a40:	f7ff fe82 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  // Compile the expression with variables.
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d6a44:	ab05      	add	r3, sp, #20
   d6a46:	2206      	movs	r2, #6
   d6a48:	a91a      	add	r1, sp, #104	; 0x68
   d6a4a:	4628      	mov	r0, r5
   d6a4c:	f7fe fc2a 	bl	d52a4 <te_compile>

  if (expr) {
   d6a50:	4606      	mov	r6, r0
   d6a52:	2800      	cmp	r0, #0
   d6a54:	d07a      	beq.n	d6b4c <_Z13runExpressionPc+0x16c>

      pm1 = (double)Sensor.massPM1;
   d6a56:	4d5c      	ldr	r5, [pc, #368]	; (d6bc8 <_Z13runExpressionPc+0x1e8>)
   d6a58:	6868      	ldr	r0, [r5, #4]
   d6a5a:	f00b f915 	bl	e1c88 <__aeabi_f2d>
   d6a5e:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d6a62:	68a8      	ldr	r0, [r5, #8]
   d6a64:	f00b f910 	bl	e1c88 <__aeabi_f2d>
   d6a68:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d6a6c:	68e8      	ldr	r0, [r5, #12]
   d6a6e:	f00b f90b 	bl	e1c88 <__aeabi_f2d>
   d6a72:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d6a76:	6928      	ldr	r0, [r5, #16]
   d6a78:	f00b f906 	bl	e1c88 <__aeabi_f2d>
      conc = (double)conc;
      temp = (double)temp1;
   d6a7c:	4b53      	ldr	r3, [pc, #332]	; (d6bcc <_Z13runExpressionPc+0x1ec>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d6a7e:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc;
      temp = (double)temp1;
   d6a82:	6818      	ldr	r0, [r3, #0]
   d6a84:	f00b f900 	bl	e1c88 <__aeabi_f2d>
   d6a88:	e9c7 0100 	strd	r0, r1, [r7]
      const double h2 = te_eval(expr);
   d6a8c:	4630      	mov	r0, r6
   d6a8e:	f7fe f8f3 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6a92:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d6a94:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d6a98:	b15b      	cbz	r3, d6ab2 <_Z13runExpressionPc+0xd2>
   d6a9a:	494d      	ldr	r1, [pc, #308]	; (d6bd0 <_Z13runExpressionPc+0x1f0>)
   d6a9c:	a832      	add	r0, sp, #200	; 0xc8
   d6a9e:	f003 faf3 	bl	da088 <_ZN6StringC1ERKS_>
   d6aa2:	4848      	ldr	r0, [pc, #288]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6aa4:	aa32      	add	r2, sp, #200	; 0xc8
   d6aa6:	2115      	movs	r1, #21
   d6aa8:	f7ff fd24 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6aac:	a832      	add	r0, sp, #200	; 0xc8
   d6aae:	f003 fa65 	bl	d9f7c <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d6ab2:	7823      	ldrb	r3, [r4, #0]
   d6ab4:	2b00      	cmp	r3, #0
   d6ab6:	d038      	beq.n	d6b2a <_Z13runExpressionPc+0x14a>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6ab8:	ab32      	add	r3, sp, #200	; 0xc8
   d6aba:	2500      	movs	r5, #0
   d6abc:	9316      	str	r3, [sp, #88]	; 0x58
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6abe:	4945      	ldr	r1, [pc, #276]	; (d6bd4 <_Z13runExpressionPc+0x1f4>)
   d6ac0:	9517      	str	r5, [sp, #92]	; 0x5c
   d6ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6ac6:	a816      	add	r0, sp, #88	; 0x58
   d6ac8:	9318      	str	r3, [sp, #96]	; 0x60
   d6aca:	f7fe fcec 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6ace:	2115      	movs	r1, #21
   d6ad0:	a816      	add	r0, sp, #88	; 0x58
   d6ad2:	f7fe fd05 	bl	d54e0 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d6ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6ad8:	9918      	ldr	r1, [sp, #96]	; 0x60
   d6ada:	9816      	ldr	r0, [sp, #88]	; 0x58
   d6adc:	4a3e      	ldr	r2, [pc, #248]	; (d6bd8 <_Z13runExpressionPc+0x1f8>)
   d6ade:	1ac9      	subs	r1, r1, r3
   d6ae0:	4418      	add	r0, r3
   d6ae2:	e9cd 6700 	strd	r6, r7, [sp]
   d6ae6:	f003 f90b 	bl	d9d00 <snprintf>
   d6aea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6aec:	9502      	str	r5, [sp, #8]
   d6aee:	3001      	adds	r0, #1
   d6af0:	4418      	add	r0, r3
   d6af2:	9017      	str	r0, [sp, #92]	; 0x5c
   d6af4:	3801      	subs	r0, #1
   d6af6:	9000      	str	r0, [sp, #0]
   d6af8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d6afa:	4832      	ldr	r0, [pc, #200]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6afc:	9501      	str	r5, [sp, #4]
   d6afe:	462a      	mov	r2, r5
   d6b00:	2114      	movs	r1, #20
   d6b02:	f7ff fbd7 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>

      if (h2==1.0)
   d6b06:	2200      	movs	r2, #0
   d6b08:	4b34      	ldr	r3, [pc, #208]	; (d6bdc <_Z13runExpressionPc+0x1fc>)
   d6b0a:	4630      	mov	r0, r6
   d6b0c:	4639      	mov	r1, r7
   d6b0e:	f00b fb77 	bl	e2200 <__aeabi_dcmpeq>
   d6b12:	b190      	cbz	r0, d6b3a <_Z13runExpressionPc+0x15a>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d6b14:	4b29      	ldr	r3, [pc, #164]	; (d6bbc <_Z13runExpressionPc+0x1dc>)
   d6b16:	781c      	ldrb	r4, [r3, #0]
   d6b18:	b90c      	cbnz	r4, d6b1e <_Z13runExpressionPc+0x13e>
        return true;
   d6b1a:	2401      	movs	r4, #1
   d6b1c:	e03f      	b.n	d6b9e <_Z13runExpressionPc+0x1be>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d6b1e:	4a30      	ldr	r2, [pc, #192]	; (d6be0 <_Z13runExpressionPc+0x200>)
   d6b20:	4828      	ldr	r0, [pc, #160]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6b22:	2115      	movs	r1, #21
   d6b24:	f7ff fe10 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d6b28:	e039      	b.n	d6b9e <_Z13runExpressionPc+0x1be>
      temp = (double)temp1;
      const double h2 = te_eval(expr);
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);

      if (h2==1.0)
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4b2b      	ldr	r3, [pc, #172]	; (d6bdc <_Z13runExpressionPc+0x1fc>)
   d6b2e:	4630      	mov	r0, r6
   d6b30:	4639      	mov	r1, r7
   d6b32:	f00b fb65 	bl	e2200 <__aeabi_dcmpeq>
   d6b36:	2800      	cmp	r0, #0
   d6b38:	d1ef      	bne.n	d6b1a <_Z13runExpressionPc+0x13a>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d6b3a:	7824      	ldrb	r4, [r4, #0]
   d6b3c:	2c00      	cmp	r4, #0
   d6b3e:	d02e      	beq.n	d6b9e <_Z13runExpressionPc+0x1be>
   d6b40:	4a28      	ldr	r2, [pc, #160]	; (d6be4 <_Z13runExpressionPc+0x204>)
   d6b42:	4820      	ldr	r0, [pc, #128]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6b44:	2115      	movs	r1, #21
   d6b46:	f7ff fdff 	bl	d6748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d6b4a:	e027      	b.n	d6b9c <_Z13runExpressionPc+0x1bc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d6b4c:	4926      	ldr	r1, [pc, #152]	; (d6be8 <_Z13runExpressionPc+0x208>)
   d6b4e:	a832      	add	r0, sp, #200	; 0xc8
   d6b50:	f003 fa5b 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d6b54:	220a      	movs	r2, #10
   d6b56:	9905      	ldr	r1, [sp, #20]
   d6b58:	a816      	add	r0, sp, #88	; 0x58
   d6b5a:	f003 facb 	bl	da0f4 <_ZN6StringC1Eih>
   d6b5e:	a916      	add	r1, sp, #88	; 0x58
   d6b60:	a832      	add	r0, sp, #200	; 0xc8
   d6b62:	f003 faf1 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d6b66:	4601      	mov	r1, r0
   d6b68:	a812      	add	r0, sp, #72	; 0x48
   d6b6a:	f003 fa8d 	bl	da088 <_ZN6StringC1ERKS_>
   d6b6e:	a816      	add	r0, sp, #88	; 0x58
   d6b70:	f003 fa04 	bl	d9f7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6b74:	a832      	add	r0, sp, #200	; 0xc8
   d6b76:	f003 fa01 	bl	d9f7c <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d6b7a:	7823      	ldrb	r3, [r4, #0]
   d6b7c:	b15b      	cbz	r3, d6b96 <_Z13runExpressionPc+0x1b6>
   d6b7e:	a912      	add	r1, sp, #72	; 0x48
   d6b80:	a832      	add	r0, sp, #200	; 0xc8
   d6b82:	f003 fa81 	bl	da088 <_ZN6StringC1ERKS_>
   d6b86:	480f      	ldr	r0, [pc, #60]	; (d6bc4 <_Z13runExpressionPc+0x1e4>)
   d6b88:	aa32      	add	r2, sp, #200	; 0xc8
   d6b8a:	2115      	movs	r1, #21
   d6b8c:	f7ff fcb2 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6b90:	a832      	add	r0, sp, #200	; 0xc8
   d6b92:	f003 f9f3 	bl	d9f7c <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d6b96:	a812      	add	r0, sp, #72	; 0x48
   d6b98:	f003 f9f0 	bl	d9f7c <_ZN6StringD1Ev>
      // DEBUG_PRINTF("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d6b9c:	2400      	movs	r4, #0
  } 
}
   d6b9e:	4620      	mov	r0, r4
   d6ba0:	f20d 4dcc 	addw	sp, sp, #1228	; 0x4cc
   d6ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ba8:	000e5fbf 	.word	0x000e5fbf
   d6bac:	000e5fc3 	.word	0x000e5fc3
   d6bb0:	000e5fc7 	.word	0x000e5fc7
   d6bb4:	000e5fcb 	.word	0x000e5fcb
   d6bb8:	000e5fd0 	.word	0x000e5fd0
   d6bbc:	2003da9d 	.word	0x2003da9d
   d6bc0:	000e5fd5 	.word	0x000e5fd5
   d6bc4:	2003e234 	.word	0x2003e234
   d6bc8:	2003d730 	.word	0x2003d730
   d6bcc:	2003e268 	.word	0x2003e268
   d6bd0:	2003def8 	.word	0x2003def8
   d6bd4:	000e5f10 	.word	0x000e5f10
   d6bd8:	000e5fda 	.word	0x000e5fda
   d6bdc:	3ff00000 	.word	0x3ff00000
   d6be0:	000e5fe0 	.word	0x000e5fe0
   d6be4:	000e5ff7 	.word	0x000e5ff7
   d6be8:	000e600f 	.word	0x000e600f

000d6bec <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d6bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d6bee:	6809      	ldr	r1, [r1, #0]
   d6bf0:	4668      	mov	r0, sp
   d6bf2:	f003 fa0a 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d6bf6:	4668      	mov	r0, sp
   d6bf8:	f003 fb05 	bl	da206 <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d6bfc:	9900      	ldr	r1, [sp, #0]
   d6bfe:	4808      	ldr	r0, [pc, #32]	; (d6c20 <BlynkWidgetWrite20+0x34>)
   d6c00:	f00b ffc4 	bl	e2b8c <strcpy>
  saveState();
   d6c04:	f7fe fdac 	bl	d5760 <_Z9saveStatev>
  if (sensorValid)
   d6c08:	4b06      	ldr	r3, [pc, #24]	; (d6c24 <BlynkWidgetWrite20+0x38>)
   d6c0a:	781b      	ldrb	r3, [r3, #0]
   d6c0c:	b113      	cbz	r3, d6c14 <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d6c0e:	4804      	ldr	r0, [pc, #16]	; (d6c20 <BlynkWidgetWrite20+0x34>)
   d6c10:	f7ff fee6 	bl	d69e0 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d6c14:	4668      	mov	r0, sp
   d6c16:	f003 f9b1 	bl	d9f7c <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d6c1a:	b005      	add	sp, #20
   d6c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c20:	2003dae8 	.word	0x2003dae8
   d6c24:	2003e1b0 	.word	0x2003e1b0

000d6c28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>:
     * @param email   Email to send to
     * @param subject Subject of message
     * @param msg     Text of the message
     */
    template <typename T1, typename T2>
    void email(const char* email, const T1& subject, const T2& msg) {
   d6c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c2a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
   d6c2e:	461e      	mov	r6, r3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6c30:	ab08      	add	r3, sp, #32
   d6c32:	4617      	mov	r7, r2
   d6c34:	2400      	movs	r4, #0
   d6c36:	4605      	mov	r5, r0
   d6c38:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(email);
   d6c3a:	a805      	add	r0, sp, #20
   d6c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6c40:	9307      	str	r3, [sp, #28]
   d6c42:	9406      	str	r4, [sp, #24]
   d6c44:	f7fe fc2f 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(subject);
   d6c48:	4639      	mov	r1, r7
   d6c4a:	a805      	add	r0, sp, #20
   d6c4c:	f7fe fc2b 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        cmd.add(msg);
   d6c50:	4631      	mov	r1, r6
   d6c52:	a805      	add	r0, sp, #20
   d6c54:	f7fe fc27 	bl	d54a6 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EMAIL, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6c58:	9b06      	ldr	r3, [sp, #24]
   d6c5a:	9402      	str	r4, [sp, #8]
   d6c5c:	3b01      	subs	r3, #1
   d6c5e:	9300      	str	r3, [sp, #0]
   d6c60:	9401      	str	r4, [sp, #4]
   d6c62:	9b05      	ldr	r3, [sp, #20]
   d6c64:	4622      	mov	r2, r4
   d6c66:	210d      	movs	r1, #13
   d6c68:	4628      	mov	r0, r5
   d6c6a:	f7ff fb23 	bl	d62b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6c6e:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c74 <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d6c74:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d6c76:	4b31      	ldr	r3, [pc, #196]	; (d6d3c <_Z10checkAccelv+0xc8>)
   d6c78:	4c31      	ldr	r4, [pc, #196]	; (d6d40 <_Z10checkAccelv+0xcc>)
   d6c7a:	781a      	ldrb	r2, [r3, #0]
   d6c7c:	461d      	mov	r5, r3
   d6c7e:	2a00      	cmp	r2, #0
   d6c80:	d046      	beq.n	d6d10 <_Z10checkAccelv+0x9c>
  {
    DEBUG_PRINTLN("*** ACCEL INTERRUPTED ***");
   d6c82:	f004 fb9f 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6c86:	492f      	ldr	r1, [pc, #188]	; (d6d44 <_Z10checkAccelv+0xd0>)
   d6c88:	f003 fb41 	bl	da30e <_ZN5Print7printlnEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d6c8c:	2100      	movs	r1, #0
   d6c8e:	482e      	ldr	r0, [pc, #184]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6c90:	f002 f962 	bl	d8f58 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d6c94:	2100      	movs	r1, #0
   d6c96:	482c      	ldr	r0, [pc, #176]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6c98:	f002 f958 	bl	d8f4c <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d6c9c:	482a      	ldr	r0, [pc, #168]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6c9e:	f002 f8a0 	bl	d8de2 <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d6ca2:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d6ca4:	4606      	mov	r6, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d6ca6:	4601      	mov	r1, r0
   d6ca8:	4827      	ldr	r0, [pc, #156]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6caa:	f002 f895 	bl	d8dd8 <_ZN7ADXL3459triggeredEhi>
   d6cae:	b198      	cbz	r0, d6cd8 <_Z10checkAccelv+0x64>
      DEBUG_PRINTLN("*** INACTIVITY ***");
   d6cb0:	f004 fb88 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6cb4:	4925      	ldr	r1, [pc, #148]	; (d6d4c <_Z10checkAccelv+0xd8>)
   d6cb6:	f003 fb2a 	bl	da30e <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d6cba:	2300      	movs	r3, #0
   d6cbc:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d6cbe:	f7fe fe43 	bl	d5948 <_Z18tamperAlertChangedv>
   d6cc2:	b128      	cbz	r0, d6cd0 <_Z10checkAccelv+0x5c>
      {
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");     
   d6cc4:	4b22      	ldr	r3, [pc, #136]	; (d6d50 <_Z10checkAccelv+0xdc>)
   d6cc6:	4a23      	ldr	r2, [pc, #140]	; (d6d54 <_Z10checkAccelv+0xe0>)
   d6cc8:	4923      	ldr	r1, [pc, #140]	; (d6d58 <_Z10checkAccelv+0xe4>)
   d6cca:	4824      	ldr	r0, [pc, #144]	; (d6d5c <_Z10checkAccelv+0xe8>)
   d6ccc:	f7ff ffac 	bl	d6c28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d6cd0:	2101      	movs	r1, #1
   d6cd2:	481d      	ldr	r0, [pc, #116]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6cd4:	f002 f93a 	bl	d8f4c <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d6cd8:	2204      	movs	r2, #4
   d6cda:	4631      	mov	r1, r6
   d6cdc:	481a      	ldr	r0, [pc, #104]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6cde:	f002 f87b 	bl	d8dd8 <_ZN7ADXL3459triggeredEhi>
   d6ce2:	b198      	cbz	r0, d6d0c <_Z10checkAccelv+0x98>
      DEBUG_PRINTLN("*** ACTIVITY ***"); 
   d6ce4:	f004 fb6e 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6ce8:	491d      	ldr	r1, [pc, #116]	; (d6d60 <_Z10checkAccelv+0xec>)
   d6cea:	f003 fb10 	bl	da30e <_ZN5Print7printlnEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d6cee:	2301      	movs	r3, #1
   d6cf0:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d6cf2:	f7fe fe29 	bl	d5948 <_Z18tamperAlertChangedv>
   d6cf6:	b128      	cbz	r0, d6d04 <_Z10checkAccelv+0x90>
      {
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");      
   d6cf8:	4b1a      	ldr	r3, [pc, #104]	; (d6d64 <_Z10checkAccelv+0xf0>)
   d6cfa:	4a1b      	ldr	r2, [pc, #108]	; (d6d68 <_Z10checkAccelv+0xf4>)
   d6cfc:	4916      	ldr	r1, [pc, #88]	; (d6d58 <_Z10checkAccelv+0xe4>)
   d6cfe:	4817      	ldr	r0, [pc, #92]	; (d6d5c <_Z10checkAccelv+0xe8>)
   d6d00:	f7ff ff92 	bl	d6c28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d6d04:	2101      	movs	r1, #1
   d6d06:	4810      	ldr	r0, [pc, #64]	; (d6d48 <_Z10checkAccelv+0xd4>)
   d6d08:	f002 f926 	bl	d8f58 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d6d0c:	2300      	movs	r3, #0
   d6d0e:	702b      	strb	r3, [r5, #0]
  }

  if ((tamperCurrentAlert==false)&&(currentAlert==false))
   d6d10:	7823      	ldrb	r3, [r4, #0]
   d6d12:	b933      	cbnz	r3, d6d22 <_Z10checkAccelv+0xae>
   d6d14:	4b15      	ldr	r3, [pc, #84]	; (d6d6c <_Z10checkAccelv+0xf8>)
   d6d16:	7819      	ldrb	r1, [r3, #0]
   d6d18:	b919      	cbnz	r1, d6d22 <_Z10checkAccelv+0xae>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d6d1a:	4b15      	ldr	r3, [pc, #84]	; (d6d70 <_Z10checkAccelv+0xfc>)
   d6d1c:	8818      	ldrh	r0, [r3, #0]
   d6d1e:	f005 f956 	bl	dbfce <digitalWrite>
  }

  if ((tamperCurrentAlert==true)||(currentAlert==true))
   d6d22:	7823      	ldrb	r3, [r4, #0]
   d6d24:	b913      	cbnz	r3, d6d2c <_Z10checkAccelv+0xb8>
   d6d26:	4b11      	ldr	r3, [pc, #68]	; (d6d6c <_Z10checkAccelv+0xf8>)
   d6d28:	781b      	ldrb	r3, [r3, #0]
   d6d2a:	b133      	cbz	r3, d6d3a <_Z10checkAccelv+0xc6>
  {
    //Buzzer On
    digitalWrite(buzzer, HIGH);
   d6d2c:	4b10      	ldr	r3, [pc, #64]	; (d6d70 <_Z10checkAccelv+0xfc>)
   d6d2e:	2101      	movs	r1, #1
   d6d30:	8818      	ldrh	r0, [r3, #0]
  }

}
   d6d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  if ((tamperCurrentAlert==true)||(currentAlert==true))
  {
    //Buzzer On
    digitalWrite(buzzer, HIGH);
   d6d36:	f005 b94a 	b.w	dbfce <digitalWrite>
   d6d3a:	bd70      	pop	{r4, r5, r6, pc}
   d6d3c:	2003df0c 	.word	0x2003df0c
   d6d40:	2003df0d 	.word	0x2003df0d
   d6d44:	000e6021 	.word	0x000e6021
   d6d48:	2003daa0 	.word	0x2003daa0
   d6d4c:	000e603b 	.word	0x000e603b
   d6d50:	000e604e 	.word	0x000e604e
   d6d54:	000e6070 	.word	0x000e6070
   d6d58:	2003dde8 	.word	0x2003dde8
   d6d5c:	2003e234 	.word	0x2003e234
   d6d60:	000e6093 	.word	0x000e6093
   d6d64:	000e60a4 	.word	0x000e60a4
   d6d68:	000e60c0 	.word	0x000e60c0
   d6d6c:	2003e22c 	.word	0x2003e22c
   d6d70:	2003d620 	.word	0x2003d620

000d6d74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:
        , nesting(0)
        , state(CONNECTING)
    {}

    bool connected() const { return state == CONNECTED; }

   d6d74:	b570      	push	{r4, r5, r6, lr}
   d6d76:	4604      	mov	r4, r0
   d6d78:	6800      	ldr	r0, [r0, #0]
   d6d7a:	460e      	mov	r6, r1
   d6d7c:	f004 fe8e 	bl	dba9c <_ZN9TCPClient4stopEv>
    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

   d6d80:	2300      	movs	r3, #0
   d6d82:	7763      	strb	r3, [r4, #29]
    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d6d84:	f002 fc4e 	bl	d9624 <_Z11BlynkMillisv>
   d6d88:	4605      	mov	r5, r0
        conn.disconnect();
   d6d8a:	7f63      	ldrb	r3, [r4, #29]
   d6d8c:	2b01      	cmp	r3, #1
   d6d8e:	d009      	beq.n	d6da4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
        state = CONNECTING;
   d6d90:	f002 fc48 	bl	d9624 <_Z11BlynkMillisv>
    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
   d6d94:	1b40      	subs	r0, r0, r5
   d6d96:	42b0      	cmp	r0, r6
   d6d98:	d204      	bcs.n	d6da4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d6d9a:	2100      	movs	r1, #0
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	f7ff f9bd 	bl	d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
   d6da2:	e7f2      	b.n	d6d8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
               (BlynkMillis() - started < timeout))
        {
   d6da4:	7f60      	ldrb	r0, [r4, #29]
            run();
   d6da6:	1e43      	subs	r3, r0, #1
   d6da8:	4258      	negs	r0, r3
   d6daa:	4158      	adcs	r0, r3
   d6dac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6db0 <_Z7connectv>:
    
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d6db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif
  #if Wiring_WiFi
  bool cellready=WiFi.ready();
   d6db2:	4d54      	ldr	r5, [pc, #336]	; (d6f04 <_Z7connectv+0x154>)
   d6db4:	4628      	mov	r0, r5
   d6db6:	f7fe fb45 	bl	d5444 <_ZN5spark9WiFiClass5readyEv>
  if (!cellready)
   d6dba:	4604      	mov	r4, r0
   d6dbc:	bb30      	cbnz	r0, d6e0c <_Z7connectv+0x5c>
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
   d6dbe:	f004 fb01 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6dc2:	4951      	ldr	r1, [pc, #324]	; (d6f08 <_Z7connectv+0x158>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6dc4:	4e51      	ldr	r6, [pc, #324]	; (d6f0c <_Z7connectv+0x15c>)
   d6dc6:	f003 faa2 	bl	da30e <_ZN5Print7printlnEPKc>
    WiFi.on();
   d6dca:	4628      	mov	r0, r5
   d6dcc:	f7fe fb3f 	bl	d544e <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6dd0:	4623      	mov	r3, r4
   d6dd2:	4622      	mov	r2, r4
   d6dd4:	4621      	mov	r1, r4
   d6dd6:	6868      	ldr	r0, [r5, #4]
   d6dd8:	f002 fee2 	bl	d9ba0 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d6ddc:	4620      	mov	r0, r4
   d6dde:	f002 fce9 	bl	d97b4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6de2:	2500      	movs	r5, #0
   d6de4:	4604      	mov	r4, r0
   d6de6:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d6de8:	2000      	movs	r0, #0
   d6dea:	f002 fce3 	bl	d97b4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6dee:	1b00      	subs	r0, r0, r4
   d6df0:	eb61 0105 	sbc.w	r1, r1, r5
   d6df4:	428f      	cmp	r7, r1
   d6df6:	bf08      	it	eq
   d6df8:	4286      	cmpeq	r6, r0
   d6dfa:	d35e      	bcc.n	d6eba <_Z7connectv+0x10a>
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d6dfc:	4841      	ldr	r0, [pc, #260]	; (d6f04 <_Z7connectv+0x154>)
   d6dfe:	f7fe fb21 	bl	d5444 <_ZN5spark9WiFiClass5readyEv>
   d6e02:	2800      	cmp	r0, #0
   d6e04:	d159      	bne.n	d6eba <_Z7connectv+0x10a>
            spark_process();
   d6e06:	f002 ff1b 	bl	d9c40 <spark_process>
   d6e0a:	e7ed      	b.n	d6de8 <_Z7connectv+0x38>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("WiFi ready");
   d6e0c:	f004 fada 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6e10:	493f      	ldr	r1, [pc, #252]	; (d6f10 <_Z7connectv+0x160>)
   d6e12:	f003 fa7c 	bl	da30e <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e16:	f002 ff23 	bl	d9c60 <spark_cloud_flag_connected>
  }
  #endif  
//*** Commented out for testing without particle connected ***
  bool partconnected=Particle.connected();
  if (!partconnected)
   d6e1a:	4604      	mov	r4, r0
   d6e1c:	b9f8      	cbnz	r0, d6e5e <_Z7connectv+0xae>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d6e1e:	f004 fad1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6e22:	493c      	ldr	r1, [pc, #240]	; (d6f14 <_Z7connectv+0x164>)
   d6e24:	f003 fa73 	bl	da30e <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d6e28:	f002 ff12 	bl	d9c50 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d6e2c:	4620      	mov	r0, r4
   d6e2e:	f002 fcc1 	bl	d97b4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6e32:	2500      	movs	r5, #0
   d6e34:	4604      	mov	r4, r0
   d6e36:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d6e3a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d6e3c:	2000      	movs	r0, #0
   d6e3e:	f002 fcb9 	bl	d97b4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6e42:	1b00      	subs	r0, r0, r4
   d6e44:	eb61 0105 	sbc.w	r1, r1, r5
   d6e48:	428f      	cmp	r7, r1
   d6e4a:	bf08      	it	eq
   d6e4c:	4286      	cmpeq	r6, r0
   d6e4e:	d347      	bcc.n	d6ee0 <_Z7connectv+0x130>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e50:	f002 ff06 	bl	d9c60 <spark_cloud_flag_connected>
   d6e54:	2800      	cmp	r0, #0
   d6e56:	d143      	bne.n	d6ee0 <_Z7connectv+0x130>
            spark_process();
   d6e58:	f002 fef2 	bl	d9c40 <spark_process>
   d6e5c:	e7ee      	b.n	d6e3c <_Z7connectv+0x8c>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d6e5e:	f004 fab1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6e62:	492d      	ldr	r1, [pc, #180]	; (d6f18 <_Z7connectv+0x168>)
   d6e64:	f003 fa53 	bl	da30e <_ZN5Print7printlnEPKc>
   d6e68:	4c2c      	ldr	r4, [pc, #176]	; (d6f1c <_Z7connectv+0x16c>)
  }
//*** Commented out for testing without particle connected ***
  bool blynkconnected=Blynk.connected();
  if (!blynkconnected)
   d6e6a:	7f63      	ldrb	r3, [r4, #29]
   d6e6c:	2b01      	cmp	r3, #1
   d6e6e:	d01d      	beq.n	d6eac <_Z7connectv+0xfc>
  {
    DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d6e70:	f004 faa8 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6e74:	492a      	ldr	r1, [pc, #168]	; (d6f20 <_Z7connectv+0x170>)
   d6e76:	f003 fa4a 	bl	da30e <_ZN5Print7printlnEPKc>
    #ifdef Version_2
    Blynk.config(auth, "zeptosense2.blynk.cc");
   d6e7a:	492a      	ldr	r1, [pc, #168]	; (d6f24 <_Z7connectv+0x174>)
   d6e7c:	4a2a      	ldr	r2, [pc, #168]	; (d6f28 <_Z7connectv+0x178>)
   d6e7e:	4620      	mov	r0, r4
   d6e80:	2350      	movs	r3, #80	; 0x50
   d6e82:	f7fe fbbd 	bl	d5600 <_ZN13BlynkParticle6configEPKcS1_t>
    #else
    Blynk.config(auth, "zeptosense.blynk.cc");
    #endif
    if (!Blynk.connect())
   d6e86:	f242 3128 	movw	r1, #9000	; 0x2328
   d6e8a:	4620      	mov	r0, r4
   d6e8c:	f7ff ff72 	bl	d6d74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d6e90:	2800      	cmp	r0, #0
   d6e92:	d136      	bne.n	d6f02 <_Z7connectv+0x152>
    {
      DEBUG_PRINTLN("Blynk not connected");
   d6e94:	f004 fa96 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6e98:	4924      	ldr	r1, [pc, #144]	; (d6f2c <_Z7connectv+0x17c>)
   d6e9a:	f003 fa38 	bl	da30e <_ZN5Print7printlnEPKc>
      delay(200);
   d6e9e:	20c8      	movs	r0, #200	; 0xc8
   d6ea0:	f003 fd46 	bl	da930 <delay>
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
  }
}
   d6ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!Blynk.connect())
    {
      DEBUG_PRINTLN("Blynk not connected");
      delay(200);
      // timerSleep(3);
      System.reset();      
   d6ea8:	f002 bfea 	b.w	d9e80 <_ZN11SystemClass5resetEv>
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d6eac:	f004 fa8a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6eb0:	491f      	ldr	r1, [pc, #124]	; (d6f30 <_Z7connectv+0x180>)
  }
}
   d6eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();      
    }
  }
  else
  {
    DEBUG_PRINTLN("Blynk connected");
   d6eb6:	f003 ba2a 	b.w	da30e <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect WiFi...");
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d6eba:	4812      	ldr	r0, [pc, #72]	; (d6f04 <_Z7connectv+0x154>)
   d6ebc:	f7fe fac2 	bl	d5444 <_ZN5spark9WiFiClass5readyEv>
    if (!WiFi.ready())
   d6ec0:	4810      	ldr	r0, [pc, #64]	; (d6f04 <_Z7connectv+0x154>)
   d6ec2:	f7fe fabf 	bl	d5444 <_ZN5spark9WiFiClass5readyEv>
   d6ec6:	2800      	cmp	r0, #0
   d6ec8:	d1a5      	bne.n	d6e16 <_Z7connectv+0x66>
    {
    DEBUG_PRINTLN("WiFi not ready");
   d6eca:	f004 fa7b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6ece:	4919      	ldr	r1, [pc, #100]	; (d6f34 <_Z7connectv+0x184>)
   d6ed0:	f003 fa1d 	bl	da30e <_ZN5Print7printlnEPKc>
    delay(200);
   d6ed4:	20c8      	movs	r0, #200	; 0xc8
   d6ed6:	f003 fd2b 	bl	da930 <delay>
    // timerSleep(3);
    System.reset();
   d6eda:	f002 ffd1 	bl	d9e80 <_ZN11SystemClass5resetEv>
   d6ede:	e79a      	b.n	d6e16 <_Z7connectv+0x66>
   d6ee0:	f002 febe 	bl	d9c60 <spark_cloud_flag_connected>
   d6ee4:	f002 febc 	bl	d9c60 <spark_cloud_flag_connected>
  if (!partconnected)
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d6ee8:	2800      	cmp	r0, #0
   d6eea:	d1bd      	bne.n	d6e68 <_Z7connectv+0xb8>
    {
      DEBUG_PRINTLN("Particle not connected");
   d6eec:	f004 fa6a 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6ef0:	4911      	ldr	r1, [pc, #68]	; (d6f38 <_Z7connectv+0x188>)
   d6ef2:	f003 fa0c 	bl	da30e <_ZN5Print7printlnEPKc>
      delay(200);
   d6ef6:	20c8      	movs	r0, #200	; 0xc8
   d6ef8:	f003 fd1a 	bl	da930 <delay>
      // timerSleep(3);
      System.reset();
   d6efc:	f002 ffc0 	bl	d9e80 <_ZN11SystemClass5resetEv>
   d6f00:	e7b2      	b.n	d6e68 <_Z7connectv+0xb8>
   d6f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6f04:	2003e5e0 	.word	0x2003e5e0
   d6f08:	000e60dd 	.word	0x000e60dd
   d6f0c:	0002bf1f 	.word	0x0002bf1f
   d6f10:	000e60fb 	.word	0x000e60fb
   d6f14:	000e6106 	.word	0x000e6106
   d6f18:	000e6142 	.word	0x000e6142
   d6f1c:	2003e234 	.word	0x2003e234
   d6f20:	000e6155 	.word	0x000e6155
   d6f24:	2003d5f8 	.word	0x2003d5f8
   d6f28:	000e6177 	.word	0x000e6177
   d6f2c:	000e5d8d 	.word	0x000e5d8d
   d6f30:	000e618c 	.word	0x000e618c
   d6f34:	000e5d7e 	.word	0x000e5d7e
   d6f38:	000e612b 	.word	0x000e612b

000d6f3c <_Z21connectWithoutWaitingv>:
    DEBUG_PRINTLN("Blynk connected");
  }
}

void connectWithoutWaiting()
{
   d6f3c:	b570      	push	{r4, r5, r6, lr}
      Cellular.connect();
    }
  }
  #endif
  #if Wiring_WiFi
  bool wifiready=WiFi.ready();
   d6f3e:	4c2e      	ldr	r4, [pc, #184]	; (d6ff8 <_Z21connectWithoutWaitingv+0xbc>)
   d6f40:	4620      	mov	r0, r4
   d6f42:	f7fe fa7f 	bl	d5444 <_ZN5spark9WiFiClass5readyEv>
  if (!wifiready)
   d6f46:	4605      	mov	r5, r0
   d6f48:	b9e0      	cbnz	r0, d6f84 <_Z21connectWithoutWaitingv+0x48>
  {
    DEBUG_PRINTLN("WiFi not ready");
   d6f4a:	f004 fa3b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6f4e:	492b      	ldr	r1, [pc, #172]	; (d6ffc <_Z21connectWithoutWaitingv+0xc0>)
   d6f50:	f003 f9dd 	bl	da30e <_ZN5Print7printlnEPKc>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f54:	462a      	mov	r2, r5
   d6f56:	4629      	mov	r1, r5
   d6f58:	6860      	ldr	r0, [r4, #4]
   d6f5a:	f002 fe29 	bl	d9bb0 <network_connecting>
    if (!WiFi.connecting())
   d6f5e:	4605      	mov	r5, r0
   d6f60:	2800      	cmp	r0, #0
   d6f62:	d148      	bne.n	d6ff6 <_Z21connectWithoutWaitingv+0xba>
    {
      DEBUG_PRINTLN("Attempting to connect WiFi...");
   d6f64:	f004 fa2e 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6f68:	4925      	ldr	r1, [pc, #148]	; (d7000 <_Z21connectWithoutWaitingv+0xc4>)
   d6f6a:	f003 f9d0 	bl	da30e <_ZN5Print7printlnEPKc>
      WiFi.on();
   d6f6e:	4620      	mov	r0, r4
   d6f70:	f7fe fa6d 	bl	d544e <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f74:	462b      	mov	r3, r5
   d6f76:	462a      	mov	r2, r5
   d6f78:	4629      	mov	r1, r5
   d6f7a:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d6f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f80:	f002 be0e 	b.w	d9ba0 <network_connect>
   d6f84:	4c1f      	ldr	r4, [pc, #124]	; (d7004 <_Z21connectWithoutWaitingv+0xc8>)
  {
    #if Wiring_Cellular
    DEBUG_PRINTLN("Cellular ready");
    #endif
    #if Wiring_WiFi
    DEBUG_PRINTLN("WiFi ready");
   d6f86:	f004 fa1d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6f8a:	491f      	ldr	r1, [pc, #124]	; (d7008 <_Z21connectWithoutWaitingv+0xcc>)
   d6f8c:	f003 f9bf 	bl	da30e <_ZN5Print7printlnEPKc>
    #endif    
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d6f90:	7f63      	ldrb	r3, [r4, #29]
   d6f92:	2b01      	cmp	r3, #1
   d6f94:	d012      	beq.n	d6fbc <_Z21connectWithoutWaitingv+0x80>
    {
      DEBUG_PRINTLN("Attempting to connect to Blynk...");
   d6f96:	f004 fa15 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6f9a:	491c      	ldr	r1, [pc, #112]	; (d700c <_Z21connectWithoutWaitingv+0xd0>)
   d6f9c:	f003 f9b7 	bl	da30e <_ZN5Print7printlnEPKc>

      Blynk.run();
   d6fa0:	2100      	movs	r1, #0
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	f7ff f8ba 	bl	d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
      if (!Blynk.connect())
   d6fa8:	f242 3128 	movw	r1, #9000	; 0x2328
   d6fac:	4620      	mov	r0, r4
   d6fae:	f7ff fee1 	bl	d6d74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d6fb2:	b940      	cbnz	r0, d6fc6 <_Z21connectWithoutWaitingv+0x8a>
      {
        DEBUG_PRINTLN("Blynk not connected");
   d6fb4:	f004 fa06 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6fb8:	4915      	ldr	r1, [pc, #84]	; (d7010 <_Z21connectWithoutWaitingv+0xd4>)
   d6fba:	e002      	b.n	d6fc2 <_Z21connectWithoutWaitingv+0x86>
      }
    }
    else
    {
      DEBUG_PRINTLN("Blynk connected");
   d6fbc:	f004 fa02 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6fc0:	4914      	ldr	r1, [pc, #80]	; (d7014 <_Z21connectWithoutWaitingv+0xd8>)
   d6fc2:	f003 f9a4 	bl	da30e <_ZN5Print7printlnEPKc>
   d6fc6:	f002 fe4b 	bl	d9c60 <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***
    bool partconnected=Particle.connected();
    if (!partconnected)
   d6fca:	b968      	cbnz	r0, d6fe8 <_Z21connectWithoutWaitingv+0xac>
    {
      DEBUG_PRINTLN("Attempting to connect to Particle...");
   d6fcc:	f004 f9fa 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6fd0:	4911      	ldr	r1, [pc, #68]	; (d7018 <_Z21connectWithoutWaitingv+0xdc>)
   d6fd2:	f003 f99c 	bl	da30e <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d6fd6:	f002 fe3b 	bl	d9c50 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6fda:	f002 fe41 	bl	d9c60 <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d6fde:	b950      	cbnz	r0, d6ff6 <_Z21connectWithoutWaitingv+0xba>
      {
        DEBUG_PRINTLN("Particle not connected");
   d6fe0:	f004 f9f0 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6fe4:	490d      	ldr	r1, [pc, #52]	; (d701c <_Z21connectWithoutWaitingv+0xe0>)
   d6fe6:	e002      	b.n	d6fee <_Z21connectWithoutWaitingv+0xb2>
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d6fe8:	f004 f9ec 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d6fec:	490c      	ldr	r1, [pc, #48]	; (d7020 <_Z21connectWithoutWaitingv+0xe4>)
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d6fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        DEBUG_PRINTLN("Particle not connected");
      } 
    }
    else
    {
      DEBUG_PRINTLN("Particle connected");
   d6ff2:	f003 b98c 	b.w	da30e <_ZN5Print7printlnEPKc>
   d6ff6:	bd70      	pop	{r4, r5, r6, pc}
   d6ff8:	2003e5e0 	.word	0x2003e5e0
   d6ffc:	000e5d7e 	.word	0x000e5d7e
   d7000:	000e60dd 	.word	0x000e60dd
   d7004:	2003e234 	.word	0x2003e234
   d7008:	000e60fb 	.word	0x000e60fb
   d700c:	000e6155 	.word	0x000e6155
   d7010:	000e5d8d 	.word	0x000e5d8d
   d7014:	000e618c 	.word	0x000e618c
   d7018:	000e6106 	.word	0x000e6106
   d701c:	000e612b 	.word	0x000e612b
   d7020:	000e6142 	.word	0x000e6142
   d7024:	00000000 	.word	0x00000000

000d7028 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d7028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d702c:	ed2d 8b02 	vpush	{d8}
   d7030:	b0a0      	sub	sp, #128	; 0x80
  connectWithoutWaiting();
   d7032:	f7ff ff83 	bl	d6f3c <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d7036:	f003 fc49 	bl	da8cc <_ZN9TimeClass7isValidEv>
   d703a:	b328      	cbz	r0, d7088 <_Z11readSensorsv+0x60>
   d703c:	4b45      	ldr	r3, [pc, #276]	; (d7154 <_Z11readSensorsv+0x12c>)
   d703e:	781a      	ldrb	r2, [r3, #0]
   d7040:	461d      	mov	r5, r3
   d7042:	bb0a      	cbnz	r2, d7088 <_Z11readSensorsv+0x60>
  {
    rtc.setUnixTime(Time.now());
   d7044:	f003 fc63 	bl	da90e <_ZN9TimeClass3nowEv>
   d7048:	4601      	mov	r1, r0
   d704a:	4843      	ldr	r0, [pc, #268]	; (d7158 <_Z11readSensorsv+0x130>)
   d704c:	f001 fbc8 	bl	d87e0 <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7050:	f003 fc5d 	bl	da90e <_ZN9TimeClass3nowEv>
   d7054:	4604      	mov	r4, r0
   d7056:	4840      	ldr	r0, [pc, #256]	; (d7158 <_Z11readSensorsv+0x130>)
   d7058:	f001 fc0b 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d705c:	4284      	cmp	r4, r0
   d705e:	f000 844f 	beq.w	d7900 <_Z11readSensorsv+0x8d8>
   d7062:	f003 fc54 	bl	da90e <_ZN9TimeClass3nowEv>
   d7066:	4604      	mov	r4, r0
   d7068:	483b      	ldr	r0, [pc, #236]	; (d7158 <_Z11readSensorsv+0x130>)
   d706a:	f001 fc02 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d706e:	1a20      	subs	r0, r4, r0
   d7070:	2809      	cmp	r0, #9
   d7072:	bf8c      	ite	hi
   d7074:	2000      	movhi	r0, #0
   d7076:	2001      	movls	r0, #1
   d7078:	b130      	cbz	r0, d7088 <_Z11readSensorsv+0x60>
    {
      timeSynced=true;
   d707a:	2301      	movs	r3, #1
   d707c:	702b      	strb	r3, [r5, #0]
      DEBUG_PRINTLN("Time is sync'ed to the cloud");
   d707e:	f004 f9a1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7082:	4936      	ldr	r1, [pc, #216]	; (d715c <_Z11readSensorsv+0x134>)
   d7084:	f003 f943 	bl	da30e <_ZN5Print7printlnEPKc>
    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7088:	4b35      	ldr	r3, [pc, #212]	; (d7160 <_Z11readSensorsv+0x138>)
   d708a:	781b      	ldrb	r3, [r3, #0]
   d708c:	b90b      	cbnz	r3, d7092 <_Z11readSensorsv+0x6a>
  {
    publishGMTOffsetRequest();
   d708e:	f7fe fc85 	bl	d599c <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d7092:	f7ff fdef 	bl	d6c74 <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d7096:	4833      	ldr	r0, [pc, #204]	; (d7164 <_Z11readSensorsv+0x13c>)
   d7098:	4c32      	ldr	r4, [pc, #200]	; (d7164 <_Z11readSensorsv+0x13c>)
   d709a:	f002 f858 	bl	d914e <_ZN5SPS3013dataAvailableEv>
   d709e:	2800      	cmp	r0, #0
   d70a0:	f000 83db 	beq.w	d785a <_Z11readSensorsv+0x832>
    Sensor.getMass(mass_concen);
   d70a4:	4930      	ldr	r1, [pc, #192]	; (d7168 <_Z11readSensorsv+0x140>)
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d70a6:	4e31      	ldr	r6, [pc, #196]	; (d716c <_Z11readSensorsv+0x144>)
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d70a8:	4d31      	ldr	r5, [pc, #196]	; (d7170 <_Z11readSensorsv+0x148>)
   d70aa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d7168 <_Z11readSensorsv+0x140>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d70ae:	4620      	mov	r0, r4
   d70b0:	f002 f966 	bl	d9380 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d70b4:	492f      	ldr	r1, [pc, #188]	; (d7174 <_Z11readSensorsv+0x14c>)
   d70b6:	4620      	mov	r0, r4
   d70b8:	f002 f976 	bl	d93a8 <_ZN5SPS306getNumEPf>

    DEBUG_PRINTLN("--Mass Concentration--");
   d70bc:	f004 f982 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d70c0:	492d      	ldr	r1, [pc, #180]	; (d7178 <_Z11readSensorsv+0x150>)
   d70c2:	f003 f924 	bl	da30e <_ZN5Print7printlnEPKc>
    for(i=0; i<4;i++) {
   d70c6:	2300      	movs	r3, #0
   d70c8:	6033      	str	r3, [r6, #0]
   d70ca:	4637      	mov	r7, r6
   d70cc:	6833      	ldr	r3, [r6, #0]
   d70ce:	f8df 909c 	ldr.w	r9, [pc, #156]	; d716c <_Z11readSensorsv+0x144>
   d70d2:	2b03      	cmp	r3, #3
   d70d4:	dc17      	bgt.n	d7106 <_Z11readSensorsv+0xde>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d70d6:	f004 f975 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d70da:	683b      	ldr	r3, [r7, #0]
   d70dc:	f103 0a01 	add.w	sl, r3, #1
   d70e0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   d70e4:	4681      	mov	r9, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d70e6:	6818      	ldr	r0, [r3, #0]
   d70e8:	f00a fdce 	bl	e1c88 <__aeabi_f2d>
   d70ec:	e9cd 0100 	strd	r0, r1, [sp]
   d70f0:	4a22      	ldr	r2, [pc, #136]	; (d717c <_Z11readSensorsv+0x154>)
   d70f2:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
   d70f6:	2100      	movs	r1, #0
   d70f8:	4648      	mov	r0, r9
   d70fa:	f003 fa4d 	bl	da598 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
   d70fe:	683b      	ldr	r3, [r7, #0]
   d7100:	3301      	adds	r3, #1
   d7102:	603b      	str	r3, [r7, #0]
   d7104:	e7e2      	b.n	d70cc <_Z11readSensorsv+0xa4>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7106:	f004 f95d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d710a:	491d      	ldr	r1, [pc, #116]	; (d7180 <_Z11readSensorsv+0x158>)
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d710c:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7170 <_Z11readSensorsv+0x148>
    DEBUG_PRINTLN("--Mass Concentration--");
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
   d7110:	f003 f8fd 	bl	da30e <_ZN5Print7printlnEPKc>
    for(i=0; i<5;i++) {
   d7114:	2300      	movs	r3, #0
   d7116:	f8c9 3000 	str.w	r3, [r9]
   d711a:	464d      	mov	r5, r9
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d711c:	f8df 9054 	ldr.w	r9, [pc, #84]	; d7174 <_Z11readSensorsv+0x14c>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d7120:	6833      	ldr	r3, [r6, #0]
   d7122:	2b04      	cmp	r3, #4
   d7124:	dc2e      	bgt.n	d7184 <_Z11readSensorsv+0x15c>
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d7126:	f004 f94d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d712a:	682f      	ldr	r7, [r5, #0]
   d712c:	eb09 0387 	add.w	r3, r9, r7, lsl #2
   d7130:	4682      	mov	sl, r0
   d7132:	6818      	ldr	r0, [r3, #0]
   d7134:	f00a fda8 	bl	e1c88 <__aeabi_f2d>
   d7138:	e9cd 0100 	strd	r0, r1, [sp]
   d713c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   d7140:	4a0e      	ldr	r2, [pc, #56]	; (d717c <_Z11readSensorsv+0x154>)
   d7142:	2100      	movs	r1, #0
   d7144:	4650      	mov	r0, sl
   d7146:	f003 fa27 	bl	da598 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
   d714a:	682b      	ldr	r3, [r5, #0]
   d714c:	3301      	adds	r3, #1
   d714e:	602b      	str	r3, [r5, #0]
   d7150:	e7e6      	b.n	d7120 <_Z11readSensorsv+0xf8>
   d7152:	bf00      	nop
   d7154:	2003def5 	.word	0x2003def5
   d7158:	2003d76c 	.word	0x2003d76c
   d715c:	000e619c 	.word	0x000e619c
   d7160:	2003e1dc 	.word	0x2003e1dc
   d7164:	2003d730 	.word	0x2003d730
   d7168:	2003df58 	.word	0x2003df58
   d716c:	2003df08 	.word	0x2003df08
   d7170:	2003d5d4 	.word	0x2003d5d4
   d7174:	2003e254 	.word	0x2003e254
   d7178:	000e61b9 	.word	0x000e61b9
   d717c:	000e61d0 	.word	0x000e61d0
   d7180:	000e61dc 	.word	0x000e61dc
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d7184:	6860      	ldr	r0, [r4, #4]
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7186:	4dc6      	ldr	r5, [pc, #792]	; (d74a0 <_Z11readSensorsv+0x478>)
   d7188:	4fc6      	ldr	r7, [pc, #792]	; (d74a4 <_Z11readSensorsv+0x47c>)
    DEBUG_PRINTLN("--Number Concentration--");
    for(i=0; i<5;i++) {
        DEBUG_PRINTF("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d718a:	f00a fd7d 	bl	e1c88 <__aeabi_f2d>
   d718e:	4602      	mov	r2, r0
   d7190:	460b      	mov	r3, r1
   d7192:	a817      	add	r0, sp, #92	; 0x5c
   d7194:	49c4      	ldr	r1, [pc, #784]	; (d74a8 <_Z11readSensorsv+0x480>)
   d7196:	f003 f849 	bl	da22c <_ZN6String6formatEPKcz>
   d719a:	a917      	add	r1, sp, #92	; 0x5c
   d719c:	48c3      	ldr	r0, [pc, #780]	; (d74ac <_Z11readSensorsv+0x484>)
   d719e:	f002 ff7e 	bl	da09e <_ZN6StringaSEOS_>
   d71a2:	a817      	add	r0, sp, #92	; 0x5c
   d71a4:	f002 feea 	bl	d9f7c <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d71a8:	68a0      	ldr	r0, [r4, #8]
   d71aa:	f00a fd6d 	bl	e1c88 <__aeabi_f2d>
   d71ae:	4602      	mov	r2, r0
   d71b0:	460b      	mov	r3, r1
   d71b2:	a817      	add	r0, sp, #92	; 0x5c
   d71b4:	49bc      	ldr	r1, [pc, #752]	; (d74a8 <_Z11readSensorsv+0x480>)
   d71b6:	f003 f839 	bl	da22c <_ZN6String6formatEPKcz>
   d71ba:	a917      	add	r1, sp, #92	; 0x5c
   d71bc:	48bc      	ldr	r0, [pc, #752]	; (d74b0 <_Z11readSensorsv+0x488>)
   d71be:	f002 ff6e 	bl	da09e <_ZN6StringaSEOS_>
   d71c2:	a817      	add	r0, sp, #92	; 0x5c
   d71c4:	f002 feda 	bl	d9f7c <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d71c8:	68e0      	ldr	r0, [r4, #12]
   d71ca:	f00a fd5d 	bl	e1c88 <__aeabi_f2d>
   d71ce:	4602      	mov	r2, r0
   d71d0:	460b      	mov	r3, r1
   d71d2:	a817      	add	r0, sp, #92	; 0x5c
   d71d4:	49b4      	ldr	r1, [pc, #720]	; (d74a8 <_Z11readSensorsv+0x480>)
   d71d6:	f003 f829 	bl	da22c <_ZN6String6formatEPKcz>
   d71da:	a917      	add	r1, sp, #92	; 0x5c
   d71dc:	48b5      	ldr	r0, [pc, #724]	; (d74b4 <_Z11readSensorsv+0x48c>)
   d71de:	f002 ff5e 	bl	da09e <_ZN6StringaSEOS_>
   d71e2:	a817      	add	r0, sp, #92	; 0x5c
   d71e4:	f002 feca 	bl	d9f7c <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d71e8:	6920      	ldr	r0, [r4, #16]
   d71ea:	f00a fd4d 	bl	e1c88 <__aeabi_f2d>
   d71ee:	460b      	mov	r3, r1
   d71f0:	4602      	mov	r2, r0
   d71f2:	49ad      	ldr	r1, [pc, #692]	; (d74a8 <_Z11readSensorsv+0x480>)
   d71f4:	a817      	add	r0, sp, #92	; 0x5c
   d71f6:	f003 f819 	bl	da22c <_ZN6String6formatEPKcz>
   d71fa:	a917      	add	r1, sp, #92	; 0x5c
   d71fc:	48ae      	ldr	r0, [pc, #696]	; (d74b8 <_Z11readSensorsv+0x490>)
   d71fe:	f002 ff4e 	bl	da09e <_ZN6StringaSEOS_>
   d7202:	a817      	add	r0, sp, #92	; 0x5c
   d7204:	f002 feba 	bl	d9f7c <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d7208:	4aac      	ldr	r2, [pc, #688]	; (d74bc <_Z11readSensorsv+0x494>)
   d720a:	48ad      	ldr	r0, [pc, #692]	; (d74c0 <_Z11readSensorsv+0x498>)
   d720c:	2101      	movs	r1, #1
   d720e:	f001 f855 	bl	d82bc <_ZN3ULP7getTempEiPc>
   d7212:	ee07 0a90 	vmov	s15, r0
   d7216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d721a:	edc5 7a00 	vstr	s15, [r5]
    
    DEBUG_PRINT("temp1: ");
   d721e:	f004 f8d1 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7222:	49a8      	ldr	r1, [pc, #672]	; (d74c4 <_Z11readSensorsv+0x49c>)
   d7224:	f003 f860 	bl	da2e8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(temp1);
   d7228:	f004 f8cc 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d722c:	4604      	mov	r4, r0
   d722e:	6828      	ldr	r0, [r5, #0]
   d7230:	f00a fd2a 	bl	e1c88 <__aeabi_f2d>
   d7234:	ec41 0b10 	vmov	d0, r0, r1
   d7238:	2102      	movs	r1, #2
   d723a:	4620      	mov	r0, r4
   d723c:	f003 f99e 	bl	da57c <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7240:	f004 f8c0 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7244:	f003 f857 	bl	da2f6 <_ZN5Print7printlnEv>
    
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    DEBUG_PRINT("Vgas: ");
   d7248:	f004 f8bc 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d724c:	499e      	ldr	r1, [pc, #632]	; (d74c8 <_Z11readSensorsv+0x4a0>)
   d724e:	f003 f84b 	bl	da2e8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(sensor1.getVgas(1));
   d7252:	f004 f8b7 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7256:	2101      	movs	r1, #1
   d7258:	4604      	mov	r4, r0
   d725a:	4899      	ldr	r0, [pc, #612]	; (d74c0 <_Z11readSensorsv+0x498>)
   d725c:	f001 f8e2 	bl	d8424 <_ZN3ULP7getVgasEi>
   d7260:	ee10 0a10 	vmov	r0, s0
   d7264:	f00a fd10 	bl	e1c88 <__aeabi_f2d>
   d7268:	ec41 0b10 	vmov	d0, r0, r1
   d726c:	2102      	movs	r1, #2
   d726e:	4620      	mov	r0, r4
   d7270:	f003 f984 	bl	da57c <_ZN5Print5printEdi>
    DEBUG_PRINTLN();
   d7274:	f004 f8a6 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7278:	f003 f83d 	bl	da2f6 <_ZN5Print7printlnEv>
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d727c:	f004 f8a2 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7280:	4992      	ldr	r1, [pc, #584]	; (d74cc <_Z11readSensorsv+0x4a4>)
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d7282:	4c93      	ldr	r4, [pc, #588]	; (d74d0 <_Z11readSensorsv+0x4a8>)
    DEBUG_PRINT("Vgas: ");
    DEBUG_PRINT(sensor1.getVgas(1));
    DEBUG_PRINTLN();
    
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    DEBUG_PRINT("Conc: ");
   d7284:	f003 f830 	bl	da2e8 <_ZN5Print5printEPKc>
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
   d7288:	4a92      	ldr	r2, [pc, #584]	; (d74d4 <_Z11readSensorsv+0x4ac>)
   d728a:	488d      	ldr	r0, [pc, #564]	; (d74c0 <_Z11readSensorsv+0x498>)
   d728c:	2101      	movs	r1, #1
   d728e:	f001 f815 	bl	d82bc <_ZN3ULP7getTempEiPc>
   d7292:	ee07 0a90 	vmov	s15, r0
   d7296:	2101      	movs	r1, #1
   d7298:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d729c:	4888      	ldr	r0, [pc, #544]	; (d74c0 <_Z11readSensorsv+0x498>)
   d729e:	f001 f8ff 	bl	d84a0 <_ZN3ULP7getConcEif>
   d72a2:	ed84 0a00 	vstr	s0, [r4]
    DEBUG_PRINTLN(conc);
   d72a6:	f004 f88d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d72aa:	4606      	mov	r6, r0
   d72ac:	6820      	ldr	r0, [r4, #0]
   d72ae:	f00a fceb 	bl	e1c88 <__aeabi_f2d>
   d72b2:	ec41 0b10 	vmov	d0, r0, r1
   d72b6:	2102      	movs	r1, #2
   d72b8:	4630      	mov	r0, r6
   d72ba:	f003 f962 	bl	da582 <_ZN5Print7printlnEdi>

    field5 = String::format("%0.1f", conc);
   d72be:	6820      	ldr	r0, [r4, #0]
    field7 = String::format("%0.0f", batCharge);
    WiFiSignal sig = WiFi.RSSI();
    field8 = String::format("%d", (int)sig.getQuality());
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d72c0:	4c85      	ldr	r4, [pc, #532]	; (d74d8 <_Z11readSensorsv+0x4b0>)
   d72c2:	4e86      	ldr	r6, [pc, #536]	; (d74dc <_Z11readSensorsv+0x4b4>)
    DEBUG_PRINT("Conc: ");
    //  DEBUG_PRINT(", ");
    conc = sensor1.getConc(1,sensor1.getTemp(1));
    DEBUG_PRINTLN(conc);

    field5 = String::format("%0.1f", conc);
   d72c4:	f00a fce0 	bl	e1c88 <__aeabi_f2d>
   d72c8:	4602      	mov	r2, r0
   d72ca:	460b      	mov	r3, r1
   d72cc:	a817      	add	r0, sp, #92	; 0x5c
   d72ce:	4976      	ldr	r1, [pc, #472]	; (d74a8 <_Z11readSensorsv+0x480>)
   d72d0:	f002 ffac 	bl	da22c <_ZN6String6formatEPKcz>
   d72d4:	a917      	add	r1, sp, #92	; 0x5c
   d72d6:	4882      	ldr	r0, [pc, #520]	; (d74e0 <_Z11readSensorsv+0x4b8>)
   d72d8:	f002 fee1 	bl	da09e <_ZN6StringaSEOS_>
   d72dc:	a817      	add	r0, sp, #92	; 0x5c
   d72de:	f002 fe4d 	bl	d9f7c <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d72e2:	6828      	ldr	r0, [r5, #0]
   d72e4:	4d7f      	ldr	r5, [pc, #508]	; (d74e4 <_Z11readSensorsv+0x4bc>)
   d72e6:	f00a fccf 	bl	e1c88 <__aeabi_f2d>
   d72ea:	4602      	mov	r2, r0
   d72ec:	460b      	mov	r3, r1
   d72ee:	a817      	add	r0, sp, #92	; 0x5c
   d72f0:	496d      	ldr	r1, [pc, #436]	; (d74a8 <_Z11readSensorsv+0x480>)
   d72f2:	f002 ff9b 	bl	da22c <_ZN6String6formatEPKcz>
   d72f6:	a917      	add	r1, sp, #92	; 0x5c
   d72f8:	487b      	ldr	r0, [pc, #492]	; (d74e8 <_Z11readSensorsv+0x4c0>)
   d72fa:	f002 fed0 	bl	da09e <_ZN6StringaSEOS_>
   d72fe:	a817      	add	r0, sp, #92	; 0x5c
   d7300:	f002 fe3c 	bl	d9f7c <_ZN6StringD1Ev>
    CellularSignal sig = Cellular.RSSI();
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
   d7304:	2021      	movs	r0, #33	; 0x21
   d7306:	f004 fe8e 	bl	dc026 <analogRead>
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d730a:	f00a fcab 	bl	e1c64 <__aeabi_i2d>
   d730e:	a35e      	add	r3, pc, #376	; (adr r3, d7488 <_Z11readSensorsv+0x460>)
   d7310:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7314:	f00a fd0c 	bl	e1d30 <__aeabi_dmul>
   d7318:	f00b f802 	bl	e2320 <__aeabi_d2f>
   d731c:	f00a fcb4 	bl	e1c88 <__aeabi_f2d>
   d7320:	a35b      	add	r3, pc, #364	; (adr r3, d7490 <_Z11readSensorsv+0x468>)
   d7322:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7326:	f00a fd03 	bl	e1d30 <__aeabi_dmul>
   d732a:	ec41 0b10 	vmov	d0, r0, r1
   d732e:	f005 fdeb 	bl	dcf08 <exp>
   d7332:	a359      	add	r3, pc, #356	; (adr r3, d7498 <_Z11readSensorsv+0x470>)
   d7334:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7338:	ec51 0b10 	vmov	r0, r1, d0
   d733c:	f00a fcf8 	bl	e1d30 <__aeabi_dmul>
   d7340:	f00a ffee 	bl	e2320 <__aeabi_d2f>
    if (batCharge>100) batCharge = 100;
   d7344:	eddf 7a69 	vldr	s15, [pc, #420]	; d74ec <_Z11readSensorsv+0x4c4>
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d7348:	ee08 0a10 	vmov	s16, r0
    if (batCharge>100) batCharge = 100;
   d734c:	eeb4 8a67 	vcmp.f32	s16, s15
   d7350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7354:	bfc8      	it	gt
   d7356:	eeb0 8a67 	vmovgt.f32	s16, s15
    field7 = String::format("%0.0f", batCharge);
   d735a:	ee18 0a10 	vmov	r0, s16
   d735e:	f00a fc93 	bl	e1c88 <__aeabi_f2d>
   d7362:	460b      	mov	r3, r1
   d7364:	4602      	mov	r2, r0
   d7366:	4962      	ldr	r1, [pc, #392]	; (d74f0 <_Z11readSensorsv+0x4c8>)
   d7368:	a817      	add	r0, sp, #92	; 0x5c
   d736a:	f002 ff5f 	bl	da22c <_ZN6String6formatEPKcz>
   d736e:	a917      	add	r1, sp, #92	; 0x5c
   d7370:	4860      	ldr	r0, [pc, #384]	; (d74f4 <_Z11readSensorsv+0x4cc>)
   d7372:	f002 fe94 	bl	da09e <_ZN6StringaSEOS_>
   d7376:	a817      	add	r0, sp, #92	; 0x5c
   d7378:	f002 fe00 	bl	d9f7c <_ZN6StringD1Ev>
    WiFiSignal sig = WiFi.RSSI();
   d737c:	495e      	ldr	r1, [pc, #376]	; (d74f8 <_Z11readSensorsv+0x4d0>)
   d737e:	a817      	add	r0, sp, #92	; 0x5c
   d7380:	f004 fd10 	bl	dbda4 <_ZN5spark9WiFiClass4RSSIEv>
    field8 = String::format("%d", (int)sig.getQuality());
   d7384:	a817      	add	r0, sp, #92	; 0x5c
   d7386:	f004 fcb9 	bl	dbcfc <_ZNK10WiFiSignal10getQualityEv>
   d738a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d738e:	495b      	ldr	r1, [pc, #364]	; (d74fc <_Z11readSensorsv+0x4d4>)
   d7390:	ee17 2a90 	vmov	r2, s15
   d7394:	a813      	add	r0, sp, #76	; 0x4c
   d7396:	f002 ff49 	bl	da22c <_ZN6String6formatEPKcz>
   d739a:	a913      	add	r1, sp, #76	; 0x4c
   d739c:	4858      	ldr	r0, [pc, #352]	; (d7500 <_Z11readSensorsv+0x4d8>)
   d739e:	f002 fe7e 	bl	da09e <_ZN6StringaSEOS_>
   d73a2:	a813      	add	r0, sp, #76	; 0x4c
   d73a4:	f002 fdea 	bl	d9f7c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d73a8:	4940      	ldr	r1, [pc, #256]	; (d74ac <_Z11readSensorsv+0x484>)
   d73aa:	a813      	add	r0, sp, #76	; 0x4c
   d73ac:	f002 fe6c 	bl	da088 <_ZN6StringC1ERKS_>
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d73b0:	4954      	ldr	r1, [pc, #336]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73b2:	a813      	add	r0, sp, #76	; 0x4c
   d73b4:	f002 fed4 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73b8:	493d      	ldr	r1, [pc, #244]	; (d74b0 <_Z11readSensorsv+0x488>)
   d73ba:	f002 fec5 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73be:	4951      	ldr	r1, [pc, #324]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73c0:	f002 fece 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73c4:	493b      	ldr	r1, [pc, #236]	; (d74b4 <_Z11readSensorsv+0x48c>)
   d73c6:	f002 febf 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73ca:	494e      	ldr	r1, [pc, #312]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73cc:	f002 fec8 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73d0:	4939      	ldr	r1, [pc, #228]	; (d74b8 <_Z11readSensorsv+0x490>)
   d73d2:	f002 feb9 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73d6:	494b      	ldr	r1, [pc, #300]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73d8:	f002 fec2 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73dc:	4940      	ldr	r1, [pc, #256]	; (d74e0 <_Z11readSensorsv+0x4b8>)
   d73de:	f002 feb3 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73e2:	4948      	ldr	r1, [pc, #288]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73e4:	f002 febc 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73e8:	493f      	ldr	r1, [pc, #252]	; (d74e8 <_Z11readSensorsv+0x4c0>)
   d73ea:	f002 fead 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73ee:	4945      	ldr	r1, [pc, #276]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73f0:	f002 feb6 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d73f4:	493f      	ldr	r1, [pc, #252]	; (d74f4 <_Z11readSensorsv+0x4cc>)
   d73f6:	f002 fea7 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d73fa:	4942      	ldr	r1, [pc, #264]	; (d7504 <_Z11readSensorsv+0x4dc>)
   d73fc:	f002 feb0 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d7400:	493f      	ldr	r1, [pc, #252]	; (d7500 <_Z11readSensorsv+0x4d8>)
   d7402:	f002 fea1 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d7406:	4601      	mov	r1, r0
   d7408:	4620      	mov	r0, r4
   d740a:	f002 fe2e 	bl	da06a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d740e:	a813      	add	r0, sp, #76	; 0x4c
   d7410:	f002 fdb4 	bl	d9f7c <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d7414:	4925      	ldr	r1, [pc, #148]	; (d74ac <_Z11readSensorsv+0x484>)
   d7416:	a813      	add	r0, sp, #76	; 0x4c
   d7418:	f002 fe36 	bl	da088 <_ZN6StringC1ERKS_>
   d741c:	aa13      	add	r2, sp, #76	; 0x4c
   d741e:	2101      	movs	r1, #1
   d7420:	4839      	ldr	r0, [pc, #228]	; (d7508 <_Z11readSensorsv+0x4e0>)
   d7422:	f7ff f867 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7426:	a813      	add	r0, sp, #76	; 0x4c
   d7428:	f002 fda8 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d742c:	4920      	ldr	r1, [pc, #128]	; (d74b0 <_Z11readSensorsv+0x488>)
   d742e:	a813      	add	r0, sp, #76	; 0x4c
   d7430:	f002 fe2a 	bl	da088 <_ZN6StringC1ERKS_>
   d7434:	aa13      	add	r2, sp, #76	; 0x4c
   d7436:	2102      	movs	r1, #2
   d7438:	4833      	ldr	r0, [pc, #204]	; (d7508 <_Z11readSensorsv+0x4e0>)
   d743a:	f7ff f85b 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d743e:	a813      	add	r0, sp, #76	; 0x4c
   d7440:	f002 fd9c 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d7444:	491b      	ldr	r1, [pc, #108]	; (d74b4 <_Z11readSensorsv+0x48c>)
   d7446:	a813      	add	r0, sp, #76	; 0x4c
   d7448:	f002 fe1e 	bl	da088 <_ZN6StringC1ERKS_>
   d744c:	aa13      	add	r2, sp, #76	; 0x4c
   d744e:	2103      	movs	r1, #3
   d7450:	482d      	ldr	r0, [pc, #180]	; (d7508 <_Z11readSensorsv+0x4e0>)
   d7452:	f7ff f84f 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7456:	a813      	add	r0, sp, #76	; 0x4c
   d7458:	f002 fd90 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d745c:	4916      	ldr	r1, [pc, #88]	; (d74b8 <_Z11readSensorsv+0x490>)
   d745e:	a813      	add	r0, sp, #76	; 0x4c
   d7460:	f002 fe12 	bl	da088 <_ZN6StringC1ERKS_>
   d7464:	aa13      	add	r2, sp, #76	; 0x4c
   d7466:	2104      	movs	r1, #4
   d7468:	4827      	ldr	r0, [pc, #156]	; (d7508 <_Z11readSensorsv+0x4e0>)
   d746a:	f7ff f843 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d746e:	a813      	add	r0, sp, #76	; 0x4c
   d7470:	f002 fd84 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d7474:	491a      	ldr	r1, [pc, #104]	; (d74e0 <_Z11readSensorsv+0x4b8>)
   d7476:	a813      	add	r0, sp, #76	; 0x4c
   d7478:	f002 fe06 	bl	da088 <_ZN6StringC1ERKS_>
   d747c:	aa13      	add	r2, sp, #76	; 0x4c
   d747e:	2105      	movs	r1, #5
   d7480:	4821      	ldr	r0, [pc, #132]	; (d7508 <_Z11readSensorsv+0x4e0>)
   d7482:	f7ff f837 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7486:	e041      	b.n	d750c <_Z11readSensorsv+0x4e4>
   d7488:	d2c10294 	.word	0xd2c10294
   d748c:	3f5263af 	.word	0x3f5263af
   d7490:	dab9f55a 	.word	0xdab9f55a
   d7494:	40143d8a 	.word	0x40143d8a
   d7498:	9abcaf48 	.word	0x9abcaf48
   d749c:	3e7ad7f2 	.word	0x3e7ad7f2
   d74a0:	2003e268 	.word	0x2003e268
   d74a4:	2003da9d 	.word	0x2003da9d
   d74a8:	000e61f5 	.word	0x000e61f5
   d74ac:	2003e21c 	.word	0x2003e21c
   d74b0:	2003d7e8 	.word	0x2003d7e8
   d74b4:	2003d7f8 	.word	0x2003d7f8
   d74b8:	2003d808 	.word	0x2003d808
   d74bc:	000e61fb 	.word	0x000e61fb
   d74c0:	2003df10 	.word	0x2003df10
   d74c4:	000e61fd 	.word	0x000e61fd
   d74c8:	000e6205 	.word	0x000e6205
   d74cc:	000e620c 	.word	0x000e620c
   d74d0:	2003e230 	.word	0x2003e230
   d74d4:	000e65a3 	.word	0x000e65a3
   d74d8:	2003def8 	.word	0x2003def8
   d74dc:	2003e22c 	.word	0x2003e22c
   d74e0:	2003d818 	.word	0x2003d818
   d74e4:	2003def5 	.word	0x2003def5
   d74e8:	2003d828 	.word	0x2003d828
   d74ec:	42c80000 	.word	0x42c80000
   d74f0:	000e6213 	.word	0x000e6213
   d74f4:	2003d838 	.word	0x2003d838
   d74f8:	2003e5e0 	.word	0x2003e5e0
   d74fc:	000e6d40 	.word	0x000e6d40
   d7500:	2003d848 	.word	0x2003d848
   d7504:	000e5eb8 	.word	0x000e5eb8
   d7508:	2003e234 	.word	0x2003e234
   d750c:	a813      	add	r0, sp, #76	; 0x4c
   d750e:	f002 fd35 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d7512:	49a0      	ldr	r1, [pc, #640]	; (d7794 <_Z11readSensorsv+0x76c>)
   d7514:	a813      	add	r0, sp, #76	; 0x4c
   d7516:	f002 fdb7 	bl	da088 <_ZN6StringC1ERKS_>
   d751a:	aa13      	add	r2, sp, #76	; 0x4c
   d751c:	2106      	movs	r1, #6
   d751e:	489e      	ldr	r0, [pc, #632]	; (d7798 <_Z11readSensorsv+0x770>)
   d7520:	f7fe ffe8 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7524:	a813      	add	r0, sp, #76	; 0x4c
   d7526:	f002 fd29 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d752a:	499c      	ldr	r1, [pc, #624]	; (d779c <_Z11readSensorsv+0x774>)
   d752c:	a813      	add	r0, sp, #76	; 0x4c
   d752e:	f002 fdab 	bl	da088 <_ZN6StringC1ERKS_>
   d7532:	aa13      	add	r2, sp, #76	; 0x4c
   d7534:	2107      	movs	r1, #7
   d7536:	4898      	ldr	r0, [pc, #608]	; (d7798 <_Z11readSensorsv+0x770>)
   d7538:	f7fe ffdc 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d753c:	a813      	add	r0, sp, #76	; 0x4c
   d753e:	f002 fd1d 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d7542:	4997      	ldr	r1, [pc, #604]	; (d77a0 <_Z11readSensorsv+0x778>)
   d7544:	a813      	add	r0, sp, #76	; 0x4c
   d7546:	f002 fd9f 	bl	da088 <_ZN6StringC1ERKS_>
   d754a:	aa13      	add	r2, sp, #76	; 0x4c
   d754c:	2108      	movs	r1, #8
   d754e:	4892      	ldr	r0, [pc, #584]	; (d7798 <_Z11readSensorsv+0x770>)
   d7550:	f7fe ffd0 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7554:	a813      	add	r0, sp, #76	; 0x4c
   d7556:	f002 fd11 	bl	d9f7c <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
   d755a:	f003 ff33 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d755e:	6821      	ldr	r1, [r4, #0]
   d7560:	f002 fed5 	bl	da30e <_ZN5Print7printlnEPKc>
    sensorValid = true;
   d7564:	4b8f      	ldr	r3, [pc, #572]	; (d77a4 <_Z11readSensorsv+0x77c>)
    String statusMessage;
   d7566:	4990      	ldr	r1, [pc, #576]	; (d77a8 <_Z11readSensorsv+0x780>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d7568:	2401      	movs	r4, #1
    String statusMessage;
   d756a:	a803      	add	r0, sp, #12
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
   d756c:	701c      	strb	r4, [r3, #0]
    String statusMessage;
   d756e:	f002 fd4c 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d7572:	488e      	ldr	r0, [pc, #568]	; (d77ac <_Z11readSensorsv+0x784>)
   d7574:	f7ff fa34 	bl	d69e0 <_Z13runExpressionPc>
   d7578:	4602      	mov	r2, r0
   d757a:	2800      	cmp	r0, #0
   d757c:	f000 8082 	beq.w	d7684 <_Z11readSensorsv+0x65c>
    {
      currentAlert = true;
      Blynk.virtualWrite(V0,1);
   d7580:	4622      	mov	r2, r4
   d7582:	2100      	movs	r1, #0
   d7584:	4884      	ldr	r0, [pc, #528]	; (d7798 <_Z11readSensorsv+0x770>)
    sensorValid = true;
    String statusMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d7586:	7034      	strb	r4, [r6, #0]
      Blynk.virtualWrite(V0,1);
   d7588:	f7fe ff7a 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,2);
   d758c:	2202      	movs	r2, #2
   d758e:	2109      	movs	r1, #9
   d7590:	4881      	ldr	r0, [pc, #516]	; (d7798 <_Z11readSensorsv+0x770>)
   d7592:	f7fe ff75 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d7596:	782b      	ldrb	r3, [r5, #0]
   d7598:	b31b      	cbz	r3, d75e2 <_Z11readSensorsv+0x5ba>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d759a:	4985      	ldr	r1, [pc, #532]	; (d77b0 <_Z11readSensorsv+0x788>)
   d759c:	a813      	add	r0, sp, #76	; 0x4c
   d759e:	f002 fd34 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      {
        statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
   d75a2:	4884      	ldr	r0, [pc, #528]	; (d77b4 <_Z11readSensorsv+0x78c>)
   d75a4:	f001 f965 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d75a8:	4b83      	ldr	r3, [pc, #524]	; (d77b8 <_Z11readSensorsv+0x790>)
   d75aa:	4984      	ldr	r1, [pc, #528]	; (d77bc <_Z11readSensorsv+0x794>)
   d75ac:	681a      	ldr	r2, [r3, #0]
   d75ae:	4b84      	ldr	r3, [pc, #528]	; (d77c0 <_Z11readSensorsv+0x798>)
   d75b0:	4402      	add	r2, r0
   d75b2:	a80f      	add	r0, sp, #60	; 0x3c
   d75b4:	f003 f958 	bl	da868 <_ZN9TimeClass6formatElPKc>
   d75b8:	a90f      	add	r1, sp, #60	; 0x3c
   d75ba:	a813      	add	r0, sp, #76	; 0x4c
   d75bc:	f002 fdc4 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d75c0:	4980      	ldr	r1, [pc, #512]	; (d77c4 <_Z11readSensorsv+0x79c>)
   d75c2:	f002 fdcd 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d75c6:	4975      	ldr	r1, [pc, #468]	; (d779c <_Z11readSensorsv+0x774>)
   d75c8:	f002 fdbe 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d75cc:	497e      	ldr	r1, [pc, #504]	; (d77c8 <_Z11readSensorsv+0x7a0>)
   d75ce:	f002 fdc7 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d75d2:	4601      	mov	r1, r0
   d75d4:	a803      	add	r0, sp, #12
   d75d6:	f002 fd48 	bl	da06a <_ZN6StringaSERKS_>
   d75da:	a80f      	add	r0, sp, #60	; 0x3c
   d75dc:	f002 fcce 	bl	d9f7c <_ZN6StringD1Ev>
   d75e0:	e00e      	b.n	d7600 <_Z11readSensorsv+0x5d8>
   d75e2:	497a      	ldr	r1, [pc, #488]	; (d77cc <_Z11readSensorsv+0x7a4>)
   d75e4:	a813      	add	r0, sp, #76	; 0x4c
   d75e6:	f002 fd10 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d75ea:	496c      	ldr	r1, [pc, #432]	; (d779c <_Z11readSensorsv+0x774>)
   d75ec:	a813      	add	r0, sp, #76	; 0x4c
   d75ee:	f002 fdab 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d75f2:	4975      	ldr	r1, [pc, #468]	; (d77c8 <_Z11readSensorsv+0x7a0>)
   d75f4:	f002 fdb4 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d75f8:	4601      	mov	r1, r0
   d75fa:	a803      	add	r0, sp, #12
   d75fc:	f002 fd35 	bl	da06a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7600:	a813      	add	r0, sp, #76	; 0x4c
   d7602:	f002 fcbb 	bl	d9f7c <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d7606:	a903      	add	r1, sp, #12
   d7608:	a813      	add	r0, sp, #76	; 0x4c
   d760a:	f002 fd3d 	bl	da088 <_ZN6StringC1ERKS_>
   d760e:	aa13      	add	r2, sp, #76	; 0x4c
   d7610:	211e      	movs	r1, #30
   d7612:	4861      	ldr	r0, [pc, #388]	; (d7798 <_Z11readSensorsv+0x770>)
   d7614:	f7fe ff6e 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7618:	a813      	add	r0, sp, #76	; 0x4c
   d761a:	f002 fcaf 	bl	d9f7c <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d761e:	783b      	ldrb	r3, [r7, #0]
   d7620:	2b00      	cmp	r3, #0
   d7622:	f000 80ae 	beq.w	d7782 <_Z11readSensorsv+0x75a>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d7626:	f003 f972 	bl	da90e <_ZN9TimeClass3nowEv>
   d762a:	4601      	mov	r1, r0
   d762c:	a807      	add	r0, sp, #28
   d762e:	f003 f89b 	bl	da768 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7632:	a907      	add	r1, sp, #28
   d7634:	a80b      	add	r0, sp, #44	; 0x2c
   d7636:	f002 fd27 	bl	da088 <_ZN6StringC1ERKS_>
   d763a:	4965      	ldr	r1, [pc, #404]	; (d77d0 <_Z11readSensorsv+0x7a8>)
   d763c:	a80b      	add	r0, sp, #44	; 0x2c
   d763e:	f002 fd8f 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d7642:	4b5d      	ldr	r3, [pc, #372]	; (d77b8 <_Z11readSensorsv+0x790>)
   d7644:	220a      	movs	r2, #10
   d7646:	6819      	ldr	r1, [r3, #0]
   d7648:	4604      	mov	r4, r0
   d764a:	a80f      	add	r0, sp, #60	; 0x3c
   d764c:	f002 fd52 	bl	da0f4 <_ZN6StringC1Eih>
   d7650:	a90f      	add	r1, sp, #60	; 0x3c
   d7652:	4620      	mov	r0, r4
   d7654:	f002 fd78 	bl	da148 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7658:	4601      	mov	r1, r0
   d765a:	a813      	add	r0, sp, #76	; 0x4c
   d765c:	f002 fd14 	bl	da088 <_ZN6StringC1ERKS_>
   d7660:	aa13      	add	r2, sp, #76	; 0x4c
   d7662:	2115      	movs	r1, #21
   d7664:	484c      	ldr	r0, [pc, #304]	; (d7798 <_Z11readSensorsv+0x770>)
   d7666:	f7fe ff9b 	bl	d65a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d766a:	a813      	add	r0, sp, #76	; 0x4c
   d766c:	f002 fc86 	bl	d9f7c <_ZN6StringD1Ev>
   d7670:	a80f      	add	r0, sp, #60	; 0x3c
   d7672:	f002 fc83 	bl	d9f7c <_ZN6StringD1Ev>
   d7676:	a80b      	add	r0, sp, #44	; 0x2c
   d7678:	f002 fc80 	bl	d9f7c <_ZN6StringD1Ev>
   d767c:	a807      	add	r0, sp, #28
   d767e:	f002 fc7d 	bl	d9f7c <_ZN6StringD1Ev>
   d7682:	e07e      	b.n	d7782 <_Z11readSensorsv+0x75a>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d7684:	4601      	mov	r1, r0
   d7686:	4844      	ldr	r0, [pc, #272]	; (d7798 <_Z11readSensorsv+0x770>)
   d7688:	f7fe fefa 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,1);
   d768c:	4622      	mov	r2, r4
   d768e:	2109      	movs	r1, #9
   d7690:	4841      	ldr	r0, [pc, #260]	; (d7798 <_Z11readSensorsv+0x770>)
   d7692:	f7fe fef5 	bl	d6480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (timeSynced)
   d7696:	782b      	ldrb	r3, [r5, #0]
   d7698:	b31b      	cbz	r3, d76e2 <_Z11readSensorsv+0x6ba>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d769a:	494e      	ldr	r1, [pc, #312]	; (d77d4 <_Z11readSensorsv+0x7ac>)
   d769c:	a813      	add	r0, sp, #76	; 0x4c
   d769e:	f002 fcb4 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      {
        statusMessage = "OK "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
   d76a2:	4844      	ldr	r0, [pc, #272]	; (d77b4 <_Z11readSensorsv+0x78c>)
   d76a4:	f001 f8e5 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d76a8:	4b43      	ldr	r3, [pc, #268]	; (d77b8 <_Z11readSensorsv+0x790>)
   d76aa:	4944      	ldr	r1, [pc, #272]	; (d77bc <_Z11readSensorsv+0x794>)
   d76ac:	681a      	ldr	r2, [r3, #0]
   d76ae:	4b44      	ldr	r3, [pc, #272]	; (d77c0 <_Z11readSensorsv+0x798>)
   d76b0:	4402      	add	r2, r0
   d76b2:	a80f      	add	r0, sp, #60	; 0x3c
   d76b4:	f003 f8d8 	bl	da868 <_ZN9TimeClass6formatElPKc>
   d76b8:	a90f      	add	r1, sp, #60	; 0x3c
   d76ba:	a813      	add	r0, sp, #76	; 0x4c
   d76bc:	f002 fd44 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d76c0:	4940      	ldr	r1, [pc, #256]	; (d77c4 <_Z11readSensorsv+0x79c>)
   d76c2:	f002 fd4d 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d76c6:	4935      	ldr	r1, [pc, #212]	; (d779c <_Z11readSensorsv+0x774>)
   d76c8:	f002 fd3e 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d76cc:	493e      	ldr	r1, [pc, #248]	; (d77c8 <_Z11readSensorsv+0x7a0>)
   d76ce:	f002 fd47 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d76d2:	4601      	mov	r1, r0
   d76d4:	a803      	add	r0, sp, #12
   d76d6:	f002 fcc8 	bl	da06a <_ZN6StringaSERKS_>
   d76da:	a80f      	add	r0, sp, #60	; 0x3c
   d76dc:	f002 fc4e 	bl	d9f7c <_ZN6StringD1Ev>
   d76e0:	e00e      	b.n	d7700 <_Z11readSensorsv+0x6d8>
   d76e2:	493d      	ldr	r1, [pc, #244]	; (d77d8 <_Z11readSensorsv+0x7b0>)
   d76e4:	a813      	add	r0, sp, #76	; 0x4c
   d76e6:	f002 fc90 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "OK                "+field7+"%";
   d76ea:	492c      	ldr	r1, [pc, #176]	; (d779c <_Z11readSensorsv+0x774>)
   d76ec:	a813      	add	r0, sp, #76	; 0x4c
   d76ee:	f002 fd2b 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d76f2:	4935      	ldr	r1, [pc, #212]	; (d77c8 <_Z11readSensorsv+0x7a0>)
   d76f4:	f002 fd34 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d76f8:	4601      	mov	r1, r0
   d76fa:	a803      	add	r0, sp, #12
   d76fc:	f002 fcb5 	bl	da06a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7700:	a813      	add	r0, sp, #76	; 0x4c
   d7702:	f002 fc3b 	bl	d9f7c <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d7706:	a903      	add	r1, sp, #12
   d7708:	a813      	add	r0, sp, #76	; 0x4c
   d770a:	f002 fcbd 	bl	da088 <_ZN6StringC1ERKS_>
   d770e:	aa13      	add	r2, sp, #76	; 0x4c
   d7710:	211e      	movs	r1, #30
   d7712:	4821      	ldr	r0, [pc, #132]	; (d7798 <_Z11readSensorsv+0x770>)
   d7714:	f7fe feee 	bl	d64f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d7718:	a813      	add	r0, sp, #76	; 0x4c
   d771a:	f002 fc2f 	bl	d9f7c <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d771e:	783b      	ldrb	r3, [r7, #0]
   d7720:	b36b      	cbz	r3, d777e <_Z11readSensorsv+0x756>
   d7722:	f003 f8f4 	bl	da90e <_ZN9TimeClass3nowEv>
   d7726:	4601      	mov	r1, r0
   d7728:	a807      	add	r0, sp, #28
   d772a:	f003 f81d 	bl	da768 <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d772e:	a907      	add	r1, sp, #28
   d7730:	a80b      	add	r0, sp, #44	; 0x2c
   d7732:	f002 fca9 	bl	da088 <_ZN6StringC1ERKS_>
   d7736:	4926      	ldr	r1, [pc, #152]	; (d77d0 <_Z11readSensorsv+0x7a8>)
   d7738:	a80b      	add	r0, sp, #44	; 0x2c
   d773a:	f002 fd11 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d773e:	4b1e      	ldr	r3, [pc, #120]	; (d77b8 <_Z11readSensorsv+0x790>)
   d7740:	220a      	movs	r2, #10
   d7742:	6819      	ldr	r1, [r3, #0]
   d7744:	4604      	mov	r4, r0
   d7746:	a80f      	add	r0, sp, #60	; 0x3c
   d7748:	f002 fcd4 	bl	da0f4 <_ZN6StringC1Eih>
   d774c:	a90f      	add	r1, sp, #60	; 0x3c
   d774e:	4620      	mov	r0, r4
   d7750:	f002 fcfa 	bl	da148 <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7754:	4601      	mov	r1, r0
   d7756:	a813      	add	r0, sp, #76	; 0x4c
   d7758:	f002 fc96 	bl	da088 <_ZN6StringC1ERKS_>
   d775c:	aa13      	add	r2, sp, #76	; 0x4c
   d775e:	2115      	movs	r1, #21
   d7760:	480d      	ldr	r0, [pc, #52]	; (d7798 <_Z11readSensorsv+0x770>)
   d7762:	f7fe ff1d 	bl	d65a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d7766:	a813      	add	r0, sp, #76	; 0x4c
   d7768:	f002 fc08 	bl	d9f7c <_ZN6StringD1Ev>
   d776c:	a80f      	add	r0, sp, #60	; 0x3c
   d776e:	f002 fc05 	bl	d9f7c <_ZN6StringD1Ev>
   d7772:	a80b      	add	r0, sp, #44	; 0x2c
   d7774:	f002 fc02 	bl	d9f7c <_ZN6StringD1Ev>
   d7778:	a807      	add	r0, sp, #28
   d777a:	f002 fbff 	bl	d9f7c <_ZN6StringD1Ev>
      currentAlert = false;
   d777e:	2300      	movs	r3, #0
   d7780:	7033      	strb	r3, [r6, #0]
    }
    
    if (alertChanged())
   d7782:	f7fe f8b9 	bl	d58f8 <_Z12alertChangedv>
   d7786:	b398      	cbz	r0, d77f0 <_Z11readSensorsv+0x7c8>
    {
      if (currentAlert)
   d7788:	7833      	ldrb	r3, [r6, #0]
   d778a:	b35b      	cbz	r3, d77e4 <_Z11readSensorsv+0x7bc>
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm", "{DEVICE_NAME} has alarmed!");
   d778c:	4b13      	ldr	r3, [pc, #76]	; (d77dc <_Z11readSensorsv+0x7b4>)
   d778e:	4a14      	ldr	r2, [pc, #80]	; (d77e0 <_Z11readSensorsv+0x7b8>)
   d7790:	e02a      	b.n	d77e8 <_Z11readSensorsv+0x7c0>
   d7792:	bf00      	nop
   d7794:	2003d828 	.word	0x2003d828
   d7798:	2003e234 	.word	0x2003e234
   d779c:	2003d838 	.word	0x2003d838
   d77a0:	2003d848 	.word	0x2003d848
   d77a4:	2003e1b0 	.word	0x2003e1b0
   d77a8:	000e5ce1 	.word	0x000e5ce1
   d77ac:	2003dae8 	.word	0x2003dae8
   d77b0:	000e6219 	.word	0x000e6219
   d77b4:	2003d76c 	.word	0x2003d76c
   d77b8:	2003d61c 	.word	0x2003d61c
   d77bc:	2003e2ac 	.word	0x2003e2ac
   d77c0:	000e6221 	.word	0x000e6221
   d77c4:	000e6254 	.word	0x000e6254
   d77c8:	000e6227 	.word	0x000e6227
   d77cc:	000e6229 	.word	0x000e6229
   d77d0:	000e623d 	.word	0x000e623d
   d77d4:	000e623f 	.word	0x000e623f
   d77d8:	000e6243 	.word	0x000e6243
   d77dc:	000e6256 	.word	0x000e6256
   d77e0:	000e6271 	.word	0x000e6271
      }
      else
      {
        Blynk.email(state.email, "{DEVICE_NAME} : Alarm ended", "{DEVICE_NAME} alarm ended.");
   d77e4:	4b4a      	ldr	r3, [pc, #296]	; (d7910 <_Z11readSensorsv+0x8e8>)
   d77e6:	4a4b      	ldr	r2, [pc, #300]	; (d7914 <_Z11readSensorsv+0x8ec>)
   d77e8:	494b      	ldr	r1, [pc, #300]	; (d7918 <_Z11readSensorsv+0x8f0>)
   d77ea:	484c      	ldr	r0, [pc, #304]	; (d791c <_Z11readSensorsv+0x8f4>)
   d77ec:	f7ff fa1c 	bl	d6c28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA29_cA28_cEEvPKcRKT_RKT0_>
      }
      
    }

    if (batCharge<state.batThreshold)
   d77f0:	4b4b      	ldr	r3, [pc, #300]	; (d7920 <_Z11readSensorsv+0x8f8>)
   d77f2:	4c4c      	ldr	r4, [pc, #304]	; (d7924 <_Z11readSensorsv+0x8fc>)
   d77f4:	edd3 7a00 	vldr	s15, [r3]
   d77f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d77fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d7800:	bf4c      	ite	mi
   d7802:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d7804:	2300      	movpl	r3, #0
   d7806:	7023      	strb	r3, [r4, #0]
    }

    if (batAlertChanged())
   d7808:	f7fe f88a 	bl	d5920 <_Z15batAlertChangedv>
   d780c:	b308      	cbz	r0, d7852 <_Z11readSensorsv+0x82a>
    {
      if (batCurrentAlert)
   d780e:	7823      	ldrb	r3, [r4, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d7810:	4945      	ldr	r1, [pc, #276]	; (d7928 <_Z11readSensorsv+0x900>)
   d7812:	a813      	add	r0, sp, #76	; 0x4c
   d7814:	b15b      	cbz	r3, d782e <_Z11readSensorsv+0x806>
   d7816:	f002 fbf8 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm", "{DEVICE_NAME} battery is "+field7+"%!");
   d781a:	4944      	ldr	r1, [pc, #272]	; (d792c <_Z11readSensorsv+0x904>)
   d781c:	a813      	add	r0, sp, #76	; 0x4c
   d781e:	f002 fc93 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d7822:	4943      	ldr	r1, [pc, #268]	; (d7930 <_Z11readSensorsv+0x908>)
   d7824:	f002 fc9c 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d7828:	4a42      	ldr	r2, [pc, #264]	; (d7934 <_Z11readSensorsv+0x90c>)
   d782a:	4603      	mov	r3, r0
   d782c:	e00a      	b.n	d7844 <_Z11readSensorsv+0x81c>
   d782e:	f002 fbec 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        Blynk.email(state.batEmail, "{DEVICE_NAME} : Battery Low Alarm ended", "{DEVICE_NAME} battery is "+field7+"%.");
   d7832:	493e      	ldr	r1, [pc, #248]	; (d792c <_Z11readSensorsv+0x904>)
   d7834:	a813      	add	r0, sp, #76	; 0x4c
   d7836:	f002 fc87 	bl	da148 <_ZplRK15StringSumHelperRK6String>
   d783a:	493f      	ldr	r1, [pc, #252]	; (d7938 <_Z11readSensorsv+0x910>)
   d783c:	f002 fc90 	bl	da160 <_ZplRK15StringSumHelperPKc>
   d7840:	4a3e      	ldr	r2, [pc, #248]	; (d793c <_Z11readSensorsv+0x914>)
   d7842:	4603      	mov	r3, r0
   d7844:	4835      	ldr	r0, [pc, #212]	; (d791c <_Z11readSensorsv+0x8f4>)
   d7846:	493e      	ldr	r1, [pc, #248]	; (d7940 <_Z11readSensorsv+0x918>)
   d7848:	f7fe fe84 	bl	d6554 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE5emailIA40_c15StringSumHelperEEvPKcRKT_RKT0_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d784c:	a813      	add	r0, sp, #76	; 0x4c
   d784e:	f002 fb95 	bl	d9f7c <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    DEBUG_PRINTLN(datastring);
    sensorValid = true;
    String statusMessage;
   d7852:	a803      	add	r0, sp, #12
   d7854:	f002 fb92 	bl	d9f7c <_ZN6StringD1Ev>
   d7858:	e00e      	b.n	d7878 <_Z11readSensorsv+0x850>
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d785a:	4620      	mov	r0, r4
   d785c:	f001 fe05 	bl	d946a <_ZN5SPS3014beginMeasuringEv>
   d7860:	b950      	cbnz	r0, d7878 <_Z11readSensorsv+0x850>
    {
      DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d7862:	f003 fdaf 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7866:	4937      	ldr	r1, [pc, #220]	; (d7944 <_Z11readSensorsv+0x91c>)
   d7868:	f002 fd51 	bl	da30e <_ZN5Print7printlnEPKc>
      delay(1000);
   d786c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7870:	f003 f85e 	bl	da930 <delay>
      System.reset();
   d7874:	f002 fb04 	bl	d9e80 <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d7878:	4b33      	ldr	r3, [pc, #204]	; (d7948 <_Z11readSensorsv+0x920>)
   d787a:	4c34      	ldr	r4, [pc, #208]	; (d794c <_Z11readSensorsv+0x924>)
   d787c:	781b      	ldrb	r3, [r3, #0]
   d787e:	b1f3      	cbz	r3, d78be <_Z11readSensorsv+0x896>
   d7880:	220a      	movs	r2, #10
   d7882:	6821      	ldr	r1, [r4, #0]
   d7884:	a80f      	add	r0, sp, #60	; 0x3c
   d7886:	f002 fc35 	bl	da0f4 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d788a:	a90f      	add	r1, sp, #60	; 0x3c
   d788c:	a813      	add	r0, sp, #76	; 0x4c
   d788e:	f002 fbfb 	bl	da088 <_ZN6StringC1ERKS_>
   d7892:	492f      	ldr	r1, [pc, #188]	; (d7950 <_Z11readSensorsv+0x928>)
   d7894:	a813      	add	r0, sp, #76	; 0x4c
   d7896:	f002 fc63 	bl	da160 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d789a:	4601      	mov	r1, r0
   d789c:	a817      	add	r0, sp, #92	; 0x5c
   d789e:	f002 fbf3 	bl	da088 <_ZN6StringC1ERKS_>
   d78a2:	aa17      	add	r2, sp, #92	; 0x5c
   d78a4:	2115      	movs	r1, #21
   d78a6:	481d      	ldr	r0, [pc, #116]	; (d791c <_Z11readSensorsv+0x8f4>)
   d78a8:	f7fe fe7a 	bl	d65a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d78ac:	a817      	add	r0, sp, #92	; 0x5c
   d78ae:	f002 fb65 	bl	d9f7c <_ZN6StringD1Ev>
   d78b2:	a813      	add	r0, sp, #76	; 0x4c
   d78b4:	f002 fb62 	bl	d9f7c <_ZN6StringD1Ev>
   d78b8:	a80f      	add	r0, sp, #60	; 0x3c
   d78ba:	f002 fb5f 	bl	d9f7c <_ZN6StringD1Ev>
  DEBUG_PRINT(millis());
   d78be:	f003 fd81 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d78c2:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d78c4:	f001 ff5e 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
   d78c8:	220a      	movs	r2, #10
   d78ca:	4601      	mov	r1, r0
   d78cc:	4628      	mov	r0, r5
   d78ce:	f002 fd48 	bl	da362 <_ZN5Print5printEmi>
  DEBUG_PRINT(": ");
   d78d2:	f003 fd77 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d78d6:	491f      	ldr	r1, [pc, #124]	; (d7954 <_Z11readSensorsv+0x92c>)
   d78d8:	f002 fd06 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(readingCount);
   d78dc:	f003 fd72 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d78e0:	220a      	movs	r2, #10
   d78e2:	6821      	ldr	r1, [r4, #0]
   d78e4:	f002 fd8e 	bl	da404 <_ZN5Print7printlnEii>
  DEBUG_PRINTLN();
   d78e8:	f003 fd6c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d78ec:	f002 fd03 	bl	da2f6 <_ZN5Print7printlnEv>
  readingCount++;
   d78f0:	6823      	ldr	r3, [r4, #0]
   d78f2:	3301      	adds	r3, #1
   d78f4:	6023      	str	r3, [r4, #0]
}
   d78f6:	b020      	add	sp, #128	; 0x80
   d78f8:	ecbd 8b02 	vpop	{d8}
   d78fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d7900:	4815      	ldr	r0, [pc, #84]	; (d7958 <_Z11readSensorsv+0x930>)
   d7902:	f000 ffb6 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d7906:	4604      	mov	r4, r0
   d7908:	f003 f801 	bl	da90e <_ZN9TimeClass3nowEv>
   d790c:	f7ff bbaf 	b.w	d706e <_Z11readSensorsv+0x46>
   d7910:	000e6287 	.word	0x000e6287
   d7914:	000e62a2 	.word	0x000e62a2
   d7918:	2003dbe8 	.word	0x2003dbe8
   d791c:	2003e234 	.word	0x2003e234
   d7920:	2003dee8 	.word	0x2003dee8
   d7924:	2003df0e 	.word	0x2003df0e
   d7928:	000e62be 	.word	0x000e62be
   d792c:	2003d838 	.word	0x2003d838
   d7930:	000e62d8 	.word	0x000e62d8
   d7934:	000e62db 	.word	0x000e62db
   d7938:	000e62fd 	.word	0x000e62fd
   d793c:	000e6300 	.word	0x000e6300
   d7940:	2003dce8 	.word	0x2003dce8
   d7944:	000e6328 	.word	0x000e6328
   d7948:	2003da9d 	.word	0x2003da9d
   d794c:	2003d770 	.word	0x2003d770
   d7950:	000e5ce0 	.word	0x000e5ce0
   d7954:	000e6b68 	.word	0x000e6b68
   d7958:	2003d76c 	.word	0x2003d76c

000d795c <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7960:	b08a      	sub	sp, #40	; 0x28
  Wire.setSpeed(20000);
   d7962:	f004 fbbf 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d7966:	f644 6120 	movw	r1, #20000	; 0x4e20
   d796a:	f003 fda3 	bl	db4b4 <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d796e:	2103      	movs	r1, #3
   d7970:	2008      	movs	r0, #8
   d7972:	f004 fb1b 	bl	dbfac <pinMode>
  Serial.begin(115200);
   d7976:	f003 fc73 	bl	db260 <_Z16_fetch_usbserialv>
   d797a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d797e:	f003 fc63 	bl	db248 <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d7982:	4cb3      	ldr	r4, [pc, #716]	; (d7c50 <setup+0x2f4>)
   d7984:	4db3      	ldr	r5, [pc, #716]	; (d7c54 <setup+0x2f8>)
  Wire.setSpeed(20000);
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
  Serial.begin(115200);
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d7986:	f003 fd1d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d798a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d798e:	f003 fd13 	bl	db3b8 <_ZN11USARTSerial5beginEm>
  delay(100);
   d7992:	2064      	movs	r0, #100	; 0x64
   d7994:	f002 ffcc 	bl	da930 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d7998:	2101      	movs	r1, #1
   d799a:	8820      	ldrh	r0, [r4, #0]
   d799c:	f004 fb06 	bl	dbfac <pinMode>
  digitalWrite(buzzer, LOW);
   d79a0:	2100      	movs	r1, #0
   d79a2:	8820      	ldrh	r0, [r4, #0]
   d79a4:	f004 fb13 	bl	dbfce <digitalWrite>

  Wire.begin();
   d79a8:	f004 fb9c 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d79ac:	f003 fd86 	bl	db4bc <_ZN7TwoWire5beginEv>
  delay(100);
   d79b0:	2064      	movs	r0, #100	; 0x64
   d79b2:	f002 ffbd 	bl	da930 <delay>
  // Need this to switch on the power
  power.begin();
   d79b6:	48a8      	ldr	r0, [pc, #672]	; (d7c58 <setup+0x2fc>)
   d79b8:	f001 f83c 	bl	d8a34 <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d79bc:	2201      	movs	r2, #1
   d79be:	2102      	movs	r1, #2
   d79c0:	48a5      	ldr	r0, [pc, #660]	; (d7c58 <setup+0x2fc>)
   d79c2:	f001 f8e1 	bl	d8b88 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d79c6:	2201      	movs	r2, #1
   d79c8:	2103      	movs	r1, #3
   d79ca:	48a3      	ldr	r0, [pc, #652]	; (d7c58 <setup+0x2fc>)
   d79cc:	f001 f8dc 	bl	d8b88 <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d79d0:	2064      	movs	r0, #100	; 0x64
   d79d2:	f002 ffad 	bl	da930 <delay>

  uint32_t d1=0;
   d79d6:	aa0a      	add	r2, sp, #40	; 0x28
   d79d8:	2100      	movs	r1, #0
   d79da:	f842 1d1c 	str.w	r1, [r2, #-28]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d79de:	2304      	movs	r3, #4
   d79e0:	489e      	ldr	r0, [pc, #632]	; (d7c5c <setup+0x300>)
   d79e2:	f000 ff8b 	bl	d88fc <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d79e6:	f003 fced 	bl	db3c4 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d79ea:	9b03      	ldr	r3, [sp, #12]
   d79ec:	4a9c      	ldr	r2, [pc, #624]	; (d7c60 <setup+0x304>)
   d79ee:	2101      	movs	r1, #1
   d79f0:	f002 fdd2 	bl	da598 <_ZN5Print11printf_implEbPKcz>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d79f4:	4b9b      	ldr	r3, [pc, #620]	; (d7c64 <setup+0x308>)
   d79f6:	781e      	ldrb	r6, [r3, #0]
   d79f8:	b986      	cbnz	r6, d7a1c <setup+0xc0>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d79fa:	a80a      	add	r0, sp, #40	; 0x28
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d79fc:	2201      	movs	r2, #1
   d79fe:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d7a00:	f840 6d10 	str.w	r6, [r0, #-16]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d7a04:	4632      	mov	r2, r6
   d7a06:	4631      	mov	r1, r6
   d7a08:	f001 fee4 	bl	d97d4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d7a0c:	9b06      	ldr	r3, [sp, #24]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d7a0e:	2b1e      	cmp	r3, #30
   d7a10:	d104      	bne.n	d7a1c <setup+0xc0>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d7a12:	2303      	movs	r3, #3
   d7a14:	702b      	strb	r3, [r5, #0]
   d7a16:	2308      	movs	r3, #8
   d7a18:	806e      	strh	r6, [r5, #2]
   d7a1a:	80ab      	strh	r3, [r5, #4]
            }
        }
        return sleepResult_;
   d7a1c:	6828      	ldr	r0, [r5, #0]
   d7a1e:	88ab      	ldrh	r3, [r5, #4]
   d7a20:	9004      	str	r0, [sp, #16]

  SleepResult result = System.sleepResult();
  switch (result.reason()) {
   d7a22:	a804      	add	r0, sp, #16
   d7a24:	f8ad 3014 	strh.w	r3, [sp, #20]
   d7a28:	f002 fa46 	bl	d9eb8 <_ZNK11SleepResult6reasonEv>
   d7a2c:	2803      	cmp	r0, #3
   d7a2e:	d814      	bhi.n	d7a5a <setup+0xfe>
   d7a30:	e8df f000 	tbb	[pc, r0]
   d7a34:	0e0a0602 	.word	0x0e0a0602
    case WAKEUP_REASON_NONE: {
      DEBUG_PRINTLN("Device did not wake up from Particle sleep");
   d7a38:	f003 fcc4 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a3c:	498a      	ldr	r1, [pc, #552]	; (d7c68 <setup+0x30c>)
   d7a3e:	e00a      	b.n	d7a56 <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_PIN: {
      DEBUG_PRINTLN("Device was woken up by a pin");
   d7a40:	f003 fcc0 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a44:	4989      	ldr	r1, [pc, #548]	; (d7c6c <setup+0x310>)
   d7a46:	e006      	b.n	d7a56 <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_RTC: {
      DEBUG_PRINTLN("Device was woken up by the Particle RTC (after a specified number of seconds)");
   d7a48:	f003 fcbc 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a4c:	4988      	ldr	r1, [pc, #544]	; (d7c70 <setup+0x314>)
   d7a4e:	e002      	b.n	d7a56 <setup+0xfa>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
   d7a50:	f003 fcb8 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a54:	4987      	ldr	r1, [pc, #540]	; (d7c74 <setup+0x318>)
   d7a56:	f002 fc5a 	bl	da30e <_ZN5Print7printlnEPKc>
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d7a5a:	f003 fcb3 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a5e:	4986      	ldr	r1, [pc, #536]	; (d7c78 <setup+0x31c>)
   d7a60:	f8df 8220 	ldr.w	r8, [pc, #544]	; d7c84 <setup+0x328>

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d7a64:	4f85      	ldr	r7, [pc, #532]	; (d7c7c <setup+0x320>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      DEBUG_PRINTLN("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)");
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");
   d7a66:	f002 fc52 	bl	da30e <_ZN5Print7printlnEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d7a6a:	4b84      	ldr	r3, [pc, #528]	; (d7c7c <setup+0x320>)
   d7a6c:	4984      	ldr	r1, [pc, #528]	; (d7c80 <setup+0x324>)
   d7a6e:	4885      	ldr	r0, [pc, #532]	; (d7c84 <setup+0x328>)
   d7a70:	2207      	movs	r2, #7
   d7a72:	f7fd fddf 	bl	d5634 <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d7a76:	2500      	movs	r5, #0
      break;
    }
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d7a78:	4606      	mov	r6, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    DEBUG_PRINT(i2cNames[x]);
   d7a7a:	f003 fca3 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a7e:	012b      	lsls	r3, r5, #4
   d7a80:	f853 1008 	ldr.w	r1, [r3, r8]
   d7a84:	f002 fc30 	bl	da2e8 <_ZN5Print5printEPKc>
    DEBUG_PRINT(": ");
   d7a88:	f003 fc9c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a8c:	497e      	ldr	r1, [pc, #504]	; (d7c88 <setup+0x32c>)
   d7a8e:	f002 fc2b 	bl	da2e8 <_ZN5Print5printEPKc>
    DEBUG_PRINTLN(i2cExists[x]);
   d7a92:	f003 fc97 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7a96:	5d79      	ldrb	r1, [r7, r5]
   d7a98:	220a      	movs	r2, #10
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d7a9a:	3501      	adds	r5, #1
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
   d7a9c:	f002 fcb2 	bl	da404 <_ZN5Print7printlnEii>
  }
  DEBUG_PRINTLN("Checking i2c devices...");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d7aa0:	2d07      	cmp	r5, #7
   d7aa2:	d1ea      	bne.n	d7a7a <setup+0x11e>
  {
    DEBUG_PRINT(i2cNames[x]);
    DEBUG_PRINT(": ");
    DEBUG_PRINTLN(i2cExists[x]);
  }
  if (!i2cOK)
   d7aa4:	bb0e      	cbnz	r6, d7aea <setup+0x18e>
  {
    DEBUG_PRINTLN("I2C Issue");
   d7aa6:	f003 fc8d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7aaa:	4978      	ldr	r1, [pc, #480]	; (d7c8c <setup+0x330>)
   d7aac:	f002 fc2f 	bl	da30e <_ZN5Print7printlnEPKc>
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d7ab0:	2101      	movs	r1, #1
   d7ab2:	8820      	ldrh	r0, [r4, #0]
   d7ab4:	f004 fa8b 	bl	dbfce <digitalWrite>
    delay(100);
   d7ab8:	2064      	movs	r0, #100	; 0x64
   d7aba:	f002 ff39 	bl	da930 <delay>
    digitalWrite(buzzer, LOW);
   d7abe:	4631      	mov	r1, r6
   d7ac0:	8820      	ldrh	r0, [r4, #0]
   d7ac2:	f004 fa84 	bl	dbfce <digitalWrite>
    #endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d7ac6:	f004 fb0d 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d7aca:	f003 fd29 	bl	db520 <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d7ace:	f004 fb09 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d7ad2:	f003 fd21 	bl	db518 <_ZN7TwoWire9isEnabledEv>
   d7ad6:	b918      	cbnz	r0, d7ae0 <setup+0x184>
      Wire.begin();
   d7ad8:	f004 fb04 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d7adc:	f003 fcee 	bl	db4bc <_ZN7TwoWire5beginEv>
    }
    Wire.end();
   d7ae0:	f004 fb00 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d7ae4:	f003 fcf0 	bl	db4c8 <_ZN7TwoWire3endEv>
   d7ae8:	e01d      	b.n	d7b26 <setup+0x1ca>
  }
  else
  {
    DEBUG_PRINTLN("I2C OK");
   d7aea:	f003 fc6b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7aee:	4968      	ldr	r1, [pc, #416]	; (d7c90 <setup+0x334>)
   d7af0:	f002 fc0d 	bl	da30e <_ZN5Print7printlnEPKc>
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d7af4:	2101      	movs	r1, #1
   d7af6:	8820      	ldrh	r0, [r4, #0]
   d7af8:	f004 fa69 	bl	dbfce <digitalWrite>
    delay(5);
   d7afc:	2005      	movs	r0, #5
   d7afe:	f002 ff17 	bl	da930 <delay>
    digitalWrite(buzzer, LOW);
   d7b02:	2100      	movs	r1, #0
   d7b04:	8820      	ldrh	r0, [r4, #0]
   d7b06:	f004 fa62 	bl	dbfce <digitalWrite>
    delay(200);  
   d7b0a:	20c8      	movs	r0, #200	; 0xc8
   d7b0c:	f002 ff10 	bl	da930 <delay>
    digitalWrite(buzzer, HIGH);
   d7b10:	2101      	movs	r1, #1
   d7b12:	8820      	ldrh	r0, [r4, #0]
   d7b14:	f004 fa5b 	bl	dbfce <digitalWrite>
    delay(5);
   d7b18:	2005      	movs	r0, #5
   d7b1a:	f002 ff09 	bl	da930 <delay>
    digitalWrite(buzzer, LOW);
   d7b1e:	2100      	movs	r1, #0
   d7b20:	8820      	ldrh	r0, [r4, #0]
   d7b22:	f004 fa54 	bl	dbfce <digitalWrite>
    #endif
  }
  delay(200);
   d7b26:	20c8      	movs	r0, #200	; 0xc8
   d7b28:	f002 ff02 	bl	da930 <delay>
  if (!i2cOK)
   d7b2c:	b90e      	cbnz	r6, d7b32 <setup+0x1d6>
  {
    System.reset();
   d7b2e:	f002 f9a7 	bl	d9e80 <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d7b32:	4858      	ldr	r0, [pc, #352]	; (d7c94 <setup+0x338>)
  DEBUG_PRINTLN("Before");
  DEBUG_PRINT(clockTime);
  DEBUG_PRINTLN(": ");
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7b34:	4d58      	ldr	r5, [pc, #352]	; (d7c98 <setup+0x33c>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d7b36:	f000 fe9c 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d7b3a:	4604      	mov	r4, r0
  DEBUG_PRINTLN("Before");
   d7b3c:	f003 fc42 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7b40:	4956      	ldr	r1, [pc, #344]	; (d7c9c <setup+0x340>)
   d7b42:	f002 fbe4 	bl	da30e <_ZN5Print7printlnEPKc>
  DEBUG_PRINT(clockTime);
   d7b46:	f003 fc3d 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7b4a:	220a      	movs	r2, #10
   d7b4c:	4621      	mov	r1, r4
   d7b4e:	f002 fc37 	bl	da3c0 <_ZN5Print5printEli>
  DEBUG_PRINTLN(": ");
   d7b52:	f003 fc37 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7b56:	494c      	ldr	r1, [pc, #304]	; (d7c88 <setup+0x32c>)
   d7b58:	f002 fbd9 	bl	da30e <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7b5c:	f003 fc32 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7b60:	682b      	ldr	r3, [r5, #0]
   d7b62:	494f      	ldr	r1, [pc, #316]	; (d7ca0 <setup+0x344>)
   d7b64:	4622      	mov	r2, r4
   d7b66:	4606      	mov	r6, r0
   d7b68:	a806      	add	r0, sp, #24
   d7b6a:	f002 fe7d 	bl	da868 <_ZN9TimeClass6formatElPKc>
   d7b6e:	9906      	ldr	r1, [sp, #24]
   d7b70:	4630      	mov	r0, r6
   d7b72:	f002 fbcc 	bl	da30e <_ZN5Print7printlnEPKc>
   d7b76:	a806      	add	r0, sp, #24
   d7b78:	f002 fa00 	bl	d9f7c <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d7b7c:	4b49      	ldr	r3, [pc, #292]	; (d7ca4 <setup+0x348>)
   d7b7e:	429c      	cmp	r4, r3
   d7b80:	dc27      	bgt.n	d7bd2 <setup+0x276>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d7b82:	4949      	ldr	r1, [pc, #292]	; (d7ca8 <setup+0x34c>)
   d7b84:	4843      	ldr	r0, [pc, #268]	; (d7c94 <setup+0x338>)
   d7b86:	f000 fe2b 	bl	d87e0 <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d7b8a:	4842      	ldr	r0, [pc, #264]	; (d7c94 <setup+0x338>)
   d7b8c:	f000 fe71 	bl	d8872 <_ZN8MCP7941x6rtcNowEv>
   d7b90:	4604      	mov	r4, r0
    DEBUG_PRINTLN("After");
   d7b92:	f003 fc17 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7b96:	4945      	ldr	r1, [pc, #276]	; (d7cac <setup+0x350>)
   d7b98:	f002 fbb9 	bl	da30e <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(clockTime);
   d7b9c:	f003 fc12 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7ba0:	220a      	movs	r2, #10
   d7ba2:	4621      	mov	r1, r4
   d7ba4:	f002 fc0c 	bl	da3c0 <_ZN5Print5printEli>
    DEBUG_PRINTLN(": ");
   d7ba8:	f003 fc0c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7bac:	4936      	ldr	r1, [pc, #216]	; (d7c88 <setup+0x32c>)
   d7bae:	f002 fbae 	bl	da30e <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
   d7bb2:	f003 fc07 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7bb6:	682b      	ldr	r3, [r5, #0]
   d7bb8:	4939      	ldr	r1, [pc, #228]	; (d7ca0 <setup+0x344>)
   d7bba:	4606      	mov	r6, r0
   d7bbc:	4622      	mov	r2, r4
   d7bbe:	a806      	add	r0, sp, #24
   d7bc0:	f002 fe52 	bl	da868 <_ZN9TimeClass6formatElPKc>
   d7bc4:	9906      	ldr	r1, [sp, #24]
   d7bc6:	4630      	mov	r0, r6
   d7bc8:	f002 fba1 	bl	da30e <_ZN5Print7printlnEPKc>
   d7bcc:	a806      	add	r0, sp, #24
   d7bce:	f002 f9d5 	bl	d9f7c <_ZN6StringD1Ev>
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d7bd2:	f004 fa87 	bl	dc0e4 <_Z19__fetch_global_Wirev>
  }
  Sensor.begin();
   d7bd6:	4601      	mov	r1, r0
   d7bd8:	4835      	ldr	r0, [pc, #212]	; (d7cb0 <setup+0x354>)

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d7bda:	4c36      	ldr	r4, [pc, #216]	; (d7cb4 <setup+0x358>)
    DEBUG_PRINTLN("After");
    DEBUG_PRINT(clockTime);
    DEBUG_PRINTLN(": ");
    DEBUG_PRINTLN(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)));
  }
  Sensor.begin();
   d7bdc:	f001 fc4a 	bl	d9474 <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d7be0:	4835      	ldr	r0, [pc, #212]	; (d7cb8 <setup+0x35c>)
   d7be2:	f001 f87a 	bl	d8cda <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d7be6:	f7fd fdc7 	bl	d5778 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d7bea:	4b34      	ldr	r3, [pc, #208]	; (d7cbc <setup+0x360>)
   d7bec:	6822      	ldr	r2, [r4, #0]
   d7bee:	681b      	ldr	r3, [r3, #0]
   d7bf0:	429a      	cmp	r2, r3
   d7bf2:	d06f      	beq.n	d7cd4 <setup+0x378>
  {
    // Then this is the first time running so set defaults
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
   d7bf4:	2318      	movs	r3, #24
   d7bf6:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d7bf8:	2305      	movs	r3, #5
   d7bfa:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d7bfc:	4930      	ldr	r1, [pc, #192]	; (d7cc0 <setup+0x364>)
  {
    // Then this is the first time running so set defaults
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d7bfe:	4b31      	ldr	r3, [pc, #196]	; (d7cc4 <setup+0x368>)
   d7c00:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>100||pm2>100||pm4>100||pm10>100||conc>100||temp>150");
   d7c02:	f104 0010 	add.w	r0, r4, #16
   d7c06:	f00a ffc1 	bl	e2b8c <strcpy>
    strcpy(state.email,"robert@sentientthings.com");
   d7c0a:	492f      	ldr	r1, [pc, #188]	; (d7cc8 <setup+0x36c>)
   d7c0c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d7c10:	f00a ffbc 	bl	e2b8c <strcpy>
    strcpy(state.batEmail,"robert@sentientthings.com");
   d7c14:	492c      	ldr	r1, [pc, #176]	; (d7cc8 <setup+0x36c>)
   d7c16:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d7c1a:	f00a ffb7 	bl	e2b8c <strcpy>
    strcpy(state.tamperEmail,"robert@sentientthings.com");
   d7c1e:	492a      	ldr	r1, [pc, #168]	; (d7cc8 <setup+0x36c>)
   d7c20:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d7c24:	f00a ffb2 	bl	e2b8c <strcpy>
    state.batThreshold = 10.0;
   d7c28:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d7c2c:	4a27      	ldr	r2, [pc, #156]	; (d7ccc <setup+0x370>)
   d7c2e:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
   d7c30:	2300      	movs	r3, #0
   d7c32:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d7c36:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    // firstRun = true;
    state.deviceZone=1; //America/New_York
   d7c3a:	2301      	movs	r3, #1
   d7c3c:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
    // Save state
    // saveState(); // Move this to the initializeAppWidget() function
    DEBUG_PRINTLN("First run.");
   d7c40:	f003 fbc0 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7c44:	4922      	ldr	r1, [pc, #136]	; (d7cd0 <setup+0x374>)
   d7c46:	f002 fb62 	bl	da30e <_ZN5Print7printlnEPKc>
    // Force a connect here for the first time the device runs
    connect();
   d7c4a:	f7ff f8b1 	bl	d6db0 <_Z7connectv>
   d7c4e:	e046      	b.n	d7cde <setup+0x382>
   d7c50:	2003d620 	.word	0x2003d620
   d7c54:	2003e278 	.word	0x2003e278
   d7c58:	2003def4 	.word	0x2003def4
   d7c5c:	2003d760 	.word	0x2003d760
   d7c60:	000e6350 	.word	0x000e6350
   d7c64:	2003d72c 	.word	0x2003d72c
   d7c68:	000e6356 	.word	0x000e6356
   d7c6c:	000e6381 	.word	0x000e6381
   d7c70:	000e639e 	.word	0x000e639e
   d7c74:	000e63ec 	.word	0x000e63ec
   d7c78:	000e644a 	.word	0x000e644a
   d7c7c:	2003df50 	.word	0x2003df50
   d7c80:	2003d5e8 	.word	0x2003d5e8
   d7c84:	2003d778 	.word	0x2003d778
   d7c88:	000e6b68 	.word	0x000e6b68
   d7c8c:	000e6462 	.word	0x000e6462
   d7c90:	000e646c 	.word	0x000e646c
   d7c94:	2003d76c 	.word	0x2003d76c
   d7c98:	2003d62c 	.word	0x2003d62c
   d7c9c:	000e6473 	.word	0x000e6473
   d7ca0:	2003e2ac 	.word	0x2003e2ac
   d7ca4:	386d437f 	.word	0x386d437f
   d7ca8:	4b3d3b00 	.word	0x4b3d3b00
   d7cac:	000e647a 	.word	0x000e647a
   d7cb0:	2003d730 	.word	0x2003d730
   d7cb4:	2003dad8 	.word	0x2003dad8
   d7cb8:	2003daa0 	.word	0x2003daa0
   d7cbc:	2003d5f0 	.word	0x2003d5f0
   d7cc0:	000e6480 	.word	0x000e6480
   d7cc4:	c31c0000 	.word	0xc31c0000
   d7cc8:	000e64b8 	.word	0x000e64b8
   d7ccc:	41200000 	.word	0x41200000
   d7cd0:	000e64d2 	.word	0x000e64d2
  }
  else
  {
    DEBUG_PRINTLN("Not first run.");
   d7cd4:	f003 fb76 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7cd8:	4987      	ldr	r1, [pc, #540]	; (d7ef8 <setup+0x59c>)
   d7cda:	f002 fb18 	bl	da30e <_ZN5Print7printlnEPKc>
  }


/////////////
// Setup ADXL345
  DEBUG_PRINT("ADXL345 Setup");
   d7cde:	f003 fb71 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7ce2:	4986      	ldr	r1, [pc, #536]	; (d7efc <setup+0x5a0>)
   d7ce4:	f002 fb00 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN();
   d7ce8:	f003 fb6c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7cec:	f002 fb03 	bl	da2f6 <_ZN5Print7printlnEv>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d7cf0:	4883      	ldr	r0, [pc, #524]	; (d7f00 <setup+0x5a4>)
   d7cf2:	f000 fff2 	bl	d8cda <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d7cf6:	2104      	movs	r1, #4
   d7cf8:	4881      	ldr	r0, [pc, #516]	; (d7f00 <setup+0x5a4>)
   d7cfa:	f001 f83b 	bl	d8d74 <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7cfe:	2301      	movs	r3, #1
   d7d00:	461a      	mov	r2, r3
   d7d02:	4619      	mov	r1, r3
   d7d04:	487e      	ldr	r0, [pc, #504]	; (d7f00 <setup+0x5a4>)
   d7d06:	f001 f8a4 	bl	d8e52 <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(18);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d7d0a:	2112      	movs	r1, #18
   d7d0c:	487c      	ldr	r0, [pc, #496]	; (d7f00 <setup+0x5a4>)
   d7d0e:	f001 f851 	bl	d8db4 <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d7d12:	2301      	movs	r3, #1
   d7d14:	461a      	mov	r2, r3
   d7d16:	4619      	mov	r1, r3
   d7d18:	4879      	ldr	r0, [pc, #484]	; (d7f00 <setup+0x5a4>)
   d7d1a:	f001 f8b9 	bl	d8e90 <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(18);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d7d1e:	2112      	movs	r1, #18
   d7d20:	4877      	ldr	r0, [pc, #476]	; (d7f00 <setup+0x5a4>)
   d7d22:	f001 f84d 	bl	d8dc0 <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d7d26:	210a      	movs	r1, #10
   d7d28:	4875      	ldr	r0, [pc, #468]	; (d7f00 <setup+0x5a4>)
   d7d2a:	f001 f84f 	bl	d8dcc <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d7d2e:	2501      	movs	r5, #1
   d7d30:	2300      	movs	r3, #0
   d7d32:	461a      	mov	r2, r3
   d7d34:	4619      	mov	r1, r3
   d7d36:	9501      	str	r5, [sp, #4]
   d7d38:	9500      	str	r5, [sp, #0]
   d7d3a:	4871      	ldr	r0, [pc, #452]	; (d7f00 <setup+0x5a4>)
   d7d3c:	f001 f8bd 	bl	d8eba <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d7d40:	4629      	mov	r1, r5
   d7d42:	486f      	ldr	r0, [pc, #444]	; (d7f00 <setup+0x5a4>)
   d7d44:	f001 f908 	bl	d8f58 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d7d48:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d7d4a:	4d6e      	ldr	r5, [pc, #440]	; (d7f04 <setup+0x5a8>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d7d4c:	486c      	ldr	r0, [pc, #432]	; (d7f00 <setup+0x5a4>)
   d7d4e:	f001 f8fd 	bl	d8f4c <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d7d52:	8828      	ldrh	r0, [r5, #0]
   d7d54:	2100      	movs	r1, #0
   d7d56:	f004 f929 	bl	dbfac <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d7d5a:	2200      	movs	r2, #0
   d7d5c:	f04f 33ff 	mov.w	r3, #4294967295
   d7d60:	4969      	ldr	r1, [pc, #420]	; (d7f08 <setup+0x5ac>)
   d7d62:	8828      	ldrh	r0, [r5, #0]
   d7d64:	9200      	str	r2, [sp, #0]
   d7d66:	f003 faa3 	bl	db2b0 <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  DEBUG_PRINTLN();
   d7d6a:	f003 fb2b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7d6e:	f002 fac2 	bl	da2f6 <_ZN5Print7printlnEv>


/////////////
  DEBUG_PRINTLN();
   d7d72:	f003 fb27 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7d76:	f002 fabe 	bl	da2f6 <_ZN5Print7printlnEv>
  DEBUG_PRINTLN("Setting Up");
   d7d7a:	f003 fb23 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7d7e:	4963      	ldr	r1, [pc, #396]	; (d7f0c <setup+0x5b0>)
   d7d80:	f002 fac5 	bl	da30e <_ZN5Print7printlnEPKc>

  DEBUG_PRINT("Vsup for all sensors = ");
   d7d84:	f003 fb1e 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7d88:	4961      	ldr	r1, [pc, #388]	; (d7f10 <setup+0x5b4>)
   d7d8a:	f002 faad 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vsup);
   d7d8e:	f003 fb19 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7d92:	4b60      	ldr	r3, [pc, #384]	; (d7f14 <setup+0x5b8>)
   d7d94:	4605      	mov	r5, r0
   d7d96:	6818      	ldr	r0, [r3, #0]
   d7d98:	f009 ff76 	bl	e1c88 <__aeabi_f2d>
   d7d9c:	ec41 0b10 	vmov	d0, r0, r1
   d7da0:	2102      	movs	r1, #2
   d7da2:	4628      	mov	r0, r5
   d7da4:	f002 fbed 	bl	da582 <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vcc for all sensors = ");
   d7da8:	f003 fb0c 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7dac:	495a      	ldr	r1, [pc, #360]	; (d7f18 <setup+0x5bc>)
   d7dae:	f002 fa9b 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(ULP::_Vcc);
   d7db2:	f003 fb07 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7db6:	4b59      	ldr	r3, [pc, #356]	; (d7f1c <setup+0x5c0>)
   d7db8:	4605      	mov	r5, r0
   d7dba:	6818      	ldr	r0, [r3, #0]
   d7dbc:	f009 ff64 	bl	e1c88 <__aeabi_f2d>
   d7dc0:	ec41 0b10 	vmov	d0, r0, r1
   d7dc4:	2102      	movs	r1, #2
   d7dc6:	4628      	mov	r0, r5
   d7dc8:	f002 fbdb 	bl	da582 <_ZN5Print7printlnEdi>
  DEBUG_PRINT("Vref for sensor 1 = ");
   d7dcc:	f003 fafa 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7dd0:	4953      	ldr	r1, [pc, #332]	; (d7f20 <setup+0x5c4>)
  DEBUG_PRINTLN(sensor1._Vref);
   d7dd2:	4d54      	ldr	r5, [pc, #336]	; (d7f24 <setup+0x5c8>)

  DEBUG_PRINT("Vsup for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vsup);
  DEBUG_PRINT("Vcc for all sensors = ");
  DEBUG_PRINTLN(ULP::_Vcc);
  DEBUG_PRINT("Vref for sensor 1 = ");
   d7dd4:	f002 fa88 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Vref);
   d7dd8:	f003 faf4 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7ddc:	4606      	mov	r6, r0
   d7dde:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d7de0:	f009 ff52 	bl	e1c88 <__aeabi_f2d>
   d7de4:	ec41 0b10 	vmov	d0, r0, r1
   d7de8:	2102      	movs	r1, #2
   d7dea:	4630      	mov	r0, r6
   d7dec:	f002 fbc9 	bl	da582 <_ZN5Print7printlnEdi>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  DEBUG_PRINTLN(sensor1._Voff = state.zeroOff);
   d7df0:	f003 fae8 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7df4:	4606      	mov	r6, r0
   d7df6:	68e0      	ldr	r0, [r4, #12]
   d7df8:	6268      	str	r0, [r5, #36]	; 0x24
   d7dfa:	f009 ff45 	bl	e1c88 <__aeabi_f2d>
   d7dfe:	ec41 0b10 	vmov	d0, r0, r1
   d7e02:	2102      	movs	r1, #2
   d7e04:	4630      	mov	r0, r6
   d7e06:	f002 fbbc 	bl	da582 <_ZN5Print7printlnEdi>
  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   DEBUG_PRINT("Vzero = ");
  //   DEBUG_PRINTLN(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air present
  //   Particle.publish("Vzero", String(Vzero1));

  DEBUG_PRINT("Tzero = ");
   d7e0a:	f003 fadb 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7e0e:	4946      	ldr	r1, [pc, #280]	; (d7f28 <setup+0x5cc>)
   d7e10:	f002 fa6a 	bl	da2e8 <_ZN5Print5printEPKc>
  DEBUG_PRINTLN(sensor1._Tz);
   d7e14:	f003 fad6 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7e18:	4606      	mov	r6, r0
   d7e1a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   d7e1c:	f009 ff34 	bl	e1c88 <__aeabi_f2d>
   d7e20:	ec41 0b10 	vmov	d0, r0, r1
   d7e24:	2102      	movs	r1, #2
   d7e26:	4630      	mov	r0, r6
   d7e28:	f002 fbab 	bl	da582 <_ZN5Print7printlnEdi>
  //sensor1.setXSpan();                                
  //Must have previously zeroed in clean air, returns new span factor.
  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  DEBUG_PRINTLN("Finished Setting Up");
   d7e2c:	f003 faca 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7e30:	493e      	ldr	r1, [pc, #248]	; (d7f2c <setup+0x5d0>)
   d7e32:	f002 fa6c 	bl	da30e <_ZN5Print7printlnEPKc>
  DEBUG_PRINTLN("T1, mV1, C1");
   d7e36:	f003 fac5 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7e3a:	493d      	ldr	r1, [pc, #244]	; (d7f30 <setup+0x5d4>)
   d7e3c:	f002 fa67 	bl	da30e <_ZN5Print7printlnEPKc>
  ////////////

  delay(300);  
   d7e40:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d7e44:	f002 fd74 	bl	da930 <delay>
   d7e48:	f004 f94c 	bl	dc0e4 <_Z19__fetch_global_Wirev>

  if (!Sensor.begin())
   d7e4c:	4601      	mov	r1, r0
   d7e4e:	4839      	ldr	r0, [pc, #228]	; (d7f34 <setup+0x5d8>)
   d7e50:	f001 fb10 	bl	d9474 <_ZN5SPS305beginER7TwoWire>
   d7e54:	b950      	cbnz	r0, d7e6c <setup+0x510>
  {
    DEBUG_PRINTLN("Unable to read SPS30 - resetting device");
   d7e56:	f003 fab5 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7e5a:	4937      	ldr	r1, [pc, #220]	; (d7f38 <setup+0x5dc>)
   d7e5c:	f002 fa57 	bl	da30e <_ZN5Print7printlnEPKc>
    delay(1000);
   d7e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7e64:	f002 fd64 	bl	da930 <delay>
    // // MOTE: RTC CONTROL MUST BE SET TO Yes when operating
    // // If the device never wakes up then switch RTC CONTROL back to No
    // // reset the device and then after the device is running switch back to Yes
    // // within 10 seconds
    // timerSleep(10);
    System.reset();
   d7e68:	f002 f80a 	bl	d9e80 <_ZN11SystemClass5resetEv>
  }

  #ifdef Version_2
  Blynk.config(auth, "zeptosense2.blynk.cc");
   d7e6c:	2350      	movs	r3, #80	; 0x50
   d7e6e:	4a33      	ldr	r2, [pc, #204]	; (d7f3c <setup+0x5e0>)
   d7e70:	4933      	ldr	r1, [pc, #204]	; (d7f40 <setup+0x5e4>)
   d7e72:	4834      	ldr	r0, [pc, #208]	; (d7f44 <setup+0x5e8>)
   d7e74:	f7fd fbc4 	bl	d5600 <_ZN13BlynkParticle6configEPKcS1_t>
  #else
  Blynk.config(auth, "zeptosense.blynk.cc");
  #endif

  connectWithoutWaiting();
   d7e78:	f7ff f860 	bl	d6f3c <_Z21connectWithoutWaitingv>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d7e7c:	2300      	movs	r3, #0
   d7e7e:	9301      	str	r3, [sp, #4]
   d7e80:	9300      	str	r3, [sp, #0]
   d7e82:	461a      	mov	r2, r3
   d7e84:	4930      	ldr	r1, [pc, #192]	; (d7f48 <setup+0x5ec>)
   d7e86:	4831      	ldr	r0, [pc, #196]	; (d7f4c <setup+0x5f0>)
   d7e88:	f001 fefa 	bl	d9c80 <spark_subscribe>
  //*** Commented out for testing without particle connected ***
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d7e8c:	4b30      	ldr	r3, [pc, #192]	; (d7f50 <setup+0x5f4>)
   d7e8e:	781b      	ldrb	r3, [r3, #0]
   d7e90:	b90b      	cbnz	r3, d7e96 <setup+0x53a>
  {
    publishGMTOffsetRequest();
   d7e92:	f7fd fd83 	bl	d599c <_Z23publishGMTOffsetRequestv>
   d7e96:	f001 fc75 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7e9a:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d7e9e:	4605      	mov	r5, r0
   d7ea0:	4824      	ldr	r0, [pc, #144]	; (d7f34 <setup+0x5d8>)
   d7ea2:	f001 f954 	bl	d914e <_ZN5SPS3013dataAvailableEv>
   d7ea6:	b1e0      	cbz	r0, d7ee2 <setup+0x586>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d7ea8:	68a3      	ldr	r3, [r4, #8]
   d7eaa:	4a2a      	ldr	r2, [pc, #168]	; (d7f54 <setup+0x5f8>)
   d7eac:	482a      	ldr	r0, [pc, #168]	; (d7f58 <setup+0x5fc>)
   d7eae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d7eb2:	4359      	muls	r1, r3
   d7eb4:	f001 fb46 	bl	d9544 <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d7eb8:	4827      	ldr	r0, [pc, #156]	; (d7f58 <setup+0x5fc>)
   d7eba:	f001 fb65 	bl	d9588 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d7ebe:	4a27      	ldr	r2, [pc, #156]	; (d7f5c <setup+0x600>)
   d7ec0:	4827      	ldr	r0, [pc, #156]	; (d7f60 <setup+0x604>)
   d7ec2:	216f      	movs	r1, #111	; 0x6f
   d7ec4:	f001 fb3e 	bl	d9544 <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d7ec8:	4825      	ldr	r0, [pc, #148]	; (d7f60 <setup+0x604>)
   d7eca:	f001 fb5d 	bl	d9588 <_ZN10BlynkTimer3runEv>

  DEBUG_PRINTLN("Setup complete");
   d7ece:	f003 fa79 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   d7ed2:	4924      	ldr	r1, [pc, #144]	; (d7f64 <setup+0x608>)
   d7ed4:	f002 fa1b 	bl	da30e <_ZN5Print7printlnEPKc>
  readSensors(); 
   d7ed8:	f7ff f8a6 	bl	d7028 <_Z11readSensorsv>
}
   d7edc:	b00a      	add	sp, #40	; 0x28
   d7ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ee2:	f001 fc4f 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7ee6:	1b40      	subs	r0, r0, r5
   d7ee8:	42b0      	cmp	r0, r6
   d7eea:	d8dd      	bhi.n	d7ea8 <setup+0x54c>
  {
    delay(100);
   d7eec:	2064      	movs	r0, #100	; 0x64
   d7eee:	f002 fd1f 	bl	da930 <delay>
    checkAccel();
   d7ef2:	f7fe febf 	bl	d6c74 <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d7ef6:	e7d3      	b.n	d7ea0 <setup+0x544>
   d7ef8:	000e64dd 	.word	0x000e64dd
   d7efc:	000e64ec 	.word	0x000e64ec
   d7f00:	2003daa0 	.word	0x2003daa0
   d7f04:	2003d5f4 	.word	0x2003d5f4
   d7f08:	000d52f5 	.word	0x000d52f5
   d7f0c:	000e6550 	.word	0x000e6550
   d7f10:	000e64fa 	.word	0x000e64fa
   d7f14:	2003d628 	.word	0x2003d628
   d7f18:	000e6512 	.word	0x000e6512
   d7f1c:	2003d624 	.word	0x2003d624
   d7f20:	000e6529 	.word	0x000e6529
   d7f24:	2003df10 	.word	0x2003df10
   d7f28:	000e653e 	.word	0x000e653e
   d7f2c:	000e6547 	.word	0x000e6547
   d7f30:	000e655b 	.word	0x000e655b
   d7f34:	2003d730 	.word	0x2003d730
   d7f38:	000e6328 	.word	0x000e6328
   d7f3c:	000e6177 	.word	0x000e6177
   d7f40:	2003d5f8 	.word	0x2003d5f8
   d7f44:	2003e234 	.word	0x2003e234
   d7f48:	000d5355 	.word	0x000d5355
   d7f4c:	000e6567 	.word	0x000e6567
   d7f50:	2003e1dc 	.word	0x2003e1dc
   d7f54:	000d7029 	.word	0x000d7029
   d7f58:	2003df6c 	.word	0x2003df6c
   d7f5c:	000d6c75 	.word	0x000d6c75
   d7f60:	2003d858 	.word	0x2003d858
   d7f64:	000e657f 	.word	0x000e657f

000d7f68 <loop>:
  DEBUG_PRINTLN("Setup complete");
  readSensors(); 
}

void loop()
{
   d7f68:	b508      	push	{r3, lr}
  Blynk.run();
   d7f6a:	2100      	movs	r1, #0
   d7f6c:	480e      	ldr	r0, [pc, #56]	; (d7fa8 <loop+0x40>)
   d7f6e:	f7fe f8d5 	bl	d611c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d7f72:	480e      	ldr	r0, [pc, #56]	; (d7fac <loop+0x44>)
   d7f74:	f001 fb08 	bl	d9588 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d7f78:	480d      	ldr	r0, [pc, #52]	; (d7fb0 <loop+0x48>)
   d7f7a:	f001 fb05 	bl	d9588 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d7f7e:	4b0d      	ldr	r3, [pc, #52]	; (d7fb4 <loop+0x4c>)
   d7f80:	685a      	ldr	r2, [r3, #4]
   d7f82:	4b0d      	ldr	r3, [pc, #52]	; (d7fb8 <loop+0x50>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	429a      	cmp	r2, r3
   d7f88:	dc0c      	bgt.n	d7fa4 <loop+0x3c>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d7f8a:	4b0c      	ldr	r3, [pc, #48]	; (d7fbc <loop+0x54>)
   d7f8c:	2100      	movs	r1, #0
   d7f8e:	8818      	ldrh	r0, [r3, #0]
   d7f90:	f004 f81d 	bl	dbfce <digitalWrite>
    delay(2000);
   d7f94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d7f98:	f002 fcca 	bl	da930 <delay>
    deepSleep();
  }

}
   d7f9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (readingCount>=state.numberOfReadings)// Number of readings variable
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
   d7fa0:	f7fd bbf6 	b.w	d5790 <_Z9deepSleepv>
   d7fa4:	bd08      	pop	{r3, pc}
   d7fa6:	bf00      	nop
   d7fa8:	2003e234 	.word	0x2003e234
   d7fac:	2003df6c 	.word	0x2003df6c
   d7fb0:	2003d858 	.word	0x2003d858
   d7fb4:	2003dad8 	.word	0x2003dad8
   d7fb8:	2003d770 	.word	0x2003d770
   d7fbc:	2003d620 	.word	0x2003d620

000d7fc0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7fc0:	4b7c      	ldr	r3, [pc, #496]	; (d81b4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x1f4>)
  }

}
   d7fc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7fc6:	2400      	movs	r4, #0

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d7fc8:	4e7b      	ldr	r6, [pc, #492]	; (d81b8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x1f8>)
   d7fca:	601c      	str	r4, [r3, #0]
   d7fcc:	4b7b      	ldr	r3, [pc, #492]	; (d81bc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x1fc>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d7fce:	4d7c      	ldr	r5, [pc, #496]	; (d81c0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x200>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d7fd0:	f8df 8260 	ldr.w	r8, [pc, #608]	; d8234 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x274>
   d7fd4:	2701      	movs	r7, #1
   d7fd6:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d7fd8:	f001 fb54 	bl	d9684 <HAL_Pin_Map>
   d7fdc:	4630      	mov	r0, r6
   d7fde:	f003 fe11 	bl	dbc04 <_ZN9TCPClientC1Ev>
   d7fe2:	f106 001c 	add.w	r0, r6, #28
   d7fe6:	f003 f88b 	bl	db100 <_ZN9IPAddressC1Ev>
   d7fea:	462a      	mov	r2, r5
   d7fec:	4975      	ldr	r1, [pc, #468]	; (d81c4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x204>)
   d7fee:	6374      	str	r4, [r6, #52]	; 0x34
   d7ff0:	4630      	mov	r0, r6
   d7ff2:	8734      	strh	r4, [r6, #56]	; 0x38
   d7ff4:	f004 f896 	bl	dc124 <__aeabi_atexit>
        , lastActivityIn(0)
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
   d7ff8:	4b73      	ldr	r3, [pc, #460]	; (d81c8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x208>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d7ffa:	4622      	mov	r2, r4
   d7ffc:	601e      	str	r6, [r3, #0]
   d7ffe:	605c      	str	r4, [r3, #4]
   d8000:	609c      	str	r4, [r3, #8]
   d8002:	60dc      	str	r4, [r3, #12]
   d8004:	611c      	str	r4, [r3, #16]
   d8006:	615c      	str	r4, [r3, #20]
   d8008:	831c      	strh	r4, [r3, #24]
   d800a:	835c      	strh	r4, [r3, #26]
   d800c:	771c      	strb	r4, [r3, #28]
   d800e:	775c      	strb	r4, [r3, #29]
   d8010:	2114      	movs	r1, #20
   d8012:	2002      	movs	r0, #2
   d8014:	f001 fda8 	bl	d9b68 <led_pattern_period>
   d8018:	4e6c      	ldr	r6, [pc, #432]	; (d81cc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x20c>)
   d801a:	9701      	str	r7, [sp, #4]
   d801c:	231e      	movs	r3, #30
   d801e:	9300      	str	r3, [sp, #0]
   d8020:	2202      	movs	r2, #2
   d8022:	4603      	mov	r3, r0
   d8024:	496a      	ldr	r1, [pc, #424]	; (d81d0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x210>)
   d8026:	4f6b      	ldr	r7, [pc, #428]	; (d81d4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x214>)
   d8028:	4630      	mov	r0, r6
   d802a:	f001 fedd 	bl	d9de8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

// SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d802e:	462a      	mov	r2, r5
   d8030:	4969      	ldr	r1, [pc, #420]	; (d81d8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x218>)
   d8032:	4630      	mov	r0, r6
   d8034:	f004 f876 	bl	dc124 <__aeabi_atexit>

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d8038:	4868      	ldr	r0, [pc, #416]	; (d81dc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x21c>)

MB85RC256V fram(Wire, 0);
   d803a:	4e69      	ldr	r6, [pc, #420]	; (d81e0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x220>)

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d803c:	f000 fdac 	bl	d8b98 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d8040:	f004 f850 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8044:	4622      	mov	r2, r4
   d8046:	4601      	mov	r1, r0
   d8048:	4630      	mov	r0, r6
   d804a:	f000 fc4f 	bl	d88ec <_ZN10MB85RC256VC1ER7TwoWirei>
   d804e:	462a      	mov	r2, r5
   d8050:	4964      	ldr	r1, [pc, #400]	; (d81e4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x224>)
   d8052:	4630      	mov	r0, r6
   d8054:	f004 f866 	bl	dc124 <__aeabi_atexit>

int firstRunValue = 1122122;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d8058:	4863      	ldr	r0, [pc, #396]	; (d81e8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x228>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d805a:	4e64      	ldr	r6, [pc, #400]	; (d81ec <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x22c>)

int firstRunValue = 1122122;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d805c:	f000 faae 	bl	d85bc <_ZN8MCP7941xC1Ev>
state_t state;

bool powerOn, appConnected, sensorValid = false, currentAlert = false, firstRun = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d8060:	4863      	ldr	r0, [pc, #396]	; (d81f0 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x230>)
   d8062:	f000 fce5 	bl	d8a30 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d8066:	4863      	ldr	r0, [pc, #396]	; (d81f4 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x234>)
   d8068:	f001 f82f 	bl	d90ca <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d806c:	4621      	mov	r1, r4
   d806e:	4630      	mov	r0, r6
   d8070:	f002 fcc6 	bl	daa00 <_ZN9FuelGaugeC1Eb>
   d8074:	462a      	mov	r2, r5
   d8076:	4960      	ldr	r1, [pc, #384]	; (d81f8 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x238>)
   d8078:	4630      	mov	r0, r6
   d807a:	f004 f853 	bl	dc124 <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d807e:	4e5f      	ldr	r6, [pc, #380]	; (d81fc <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x23c>)
   d8080:	4639      	mov	r1, r7
   d8082:	4640      	mov	r0, r8
   d8084:	f001 ffc1 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8088:	4640      	mov	r0, r8
   d808a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d8238 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x278>
   d808e:	462a      	mov	r2, r5
   d8090:	4631      	mov	r1, r6
   d8092:	f004 f847 	bl	dc124 <__aeabi_atexit>
   d8096:	4639      	mov	r1, r7
   d8098:	4640      	mov	r0, r8
   d809a:	f001 ffb6 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d809e:	4640      	mov	r0, r8
   d80a0:	f8df 8198 	ldr.w	r8, [pc, #408]	; d823c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x27c>
   d80a4:	462a      	mov	r2, r5
   d80a6:	4631      	mov	r1, r6
   d80a8:	f004 f83c 	bl	dc124 <__aeabi_atexit>
   d80ac:	4639      	mov	r1, r7
   d80ae:	4640      	mov	r0, r8
   d80b0:	f001 ffab 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d80b4:	4640      	mov	r0, r8
   d80b6:	f8df 8188 	ldr.w	r8, [pc, #392]	; d8240 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x280>
   d80ba:	462a      	mov	r2, r5
   d80bc:	4631      	mov	r1, r6
   d80be:	f004 f831 	bl	dc124 <__aeabi_atexit>
   d80c2:	4639      	mov	r1, r7
   d80c4:	4640      	mov	r0, r8
   d80c6:	f001 ffa0 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d80ca:	4640      	mov	r0, r8
   d80cc:	f8df 8174 	ldr.w	r8, [pc, #372]	; d8244 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x284>
   d80d0:	462a      	mov	r2, r5
   d80d2:	4631      	mov	r1, r6
   d80d4:	f004 f826 	bl	dc124 <__aeabi_atexit>
   d80d8:	4639      	mov	r1, r7
   d80da:	4640      	mov	r0, r8
   d80dc:	f001 ff95 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d80e0:	4640      	mov	r0, r8
   d80e2:	f8df 8164 	ldr.w	r8, [pc, #356]	; d8248 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x288>
   d80e6:	462a      	mov	r2, r5
   d80e8:	4631      	mov	r1, r6
   d80ea:	f004 f81b 	bl	dc124 <__aeabi_atexit>
   d80ee:	4639      	mov	r1, r7
   d80f0:	4640      	mov	r0, r8
   d80f2:	f001 ff8a 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d80f6:	4640      	mov	r0, r8
   d80f8:	f8df 8150 	ldr.w	r8, [pc, #336]	; d824c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x28c>
   d80fc:	462a      	mov	r2, r5
   d80fe:	4631      	mov	r1, r6
   d8100:	f004 f810 	bl	dc124 <__aeabi_atexit>
   d8104:	4639      	mov	r1, r7
   d8106:	4640      	mov	r0, r8
   d8108:	f001 ff7f 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d810c:	4640      	mov	r0, r8
   d810e:	f8df 8140 	ldr.w	r8, [pc, #320]	; d8250 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x290>
   d8112:	462a      	mov	r2, r5
   d8114:	4631      	mov	r1, r6
   d8116:	f004 f805 	bl	dc124 <__aeabi_atexit>
   d811a:	4639      	mov	r1, r7
   d811c:	4640      	mov	r0, r8
   d811e:	f001 ff74 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8122:	4640      	mov	r0, r8
String datastring;
   d8124:	f8df 812c 	ldr.w	r8, [pc, #300]	; d8254 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x294>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d8128:	462a      	mov	r2, r5
   d812a:	4631      	mov	r1, r6
   d812c:	f003 fffa 	bl	dc124 <__aeabi_atexit>
String datastring;
   d8130:	4639      	mov	r1, r7
   d8132:	4640      	mov	r0, r8
   d8134:	f001 ff69 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8138:	462a      	mov	r2, r5
   d813a:	4631      	mov	r1, r6
   d813c:	4640      	mov	r0, r8
   d813e:	f003 fff1 	bl	dc124 <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8142:	4e2f      	ldr	r6, [pc, #188]	; (d8200 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x240>)
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs



BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d8144:	482f      	ldr	r0, [pc, #188]	; (d8204 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x244>)
   d8146:	f001 f9a2 	bl	d948e <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d814a:	482f      	ldr	r0, [pc, #188]	; (d8208 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x248>)
   d814c:	f001 f99f 	bl	d948e <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d8150:	492e      	ldr	r1, [pc, #184]	; (d820c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x24c>)
   d8152:	4630      	mov	r0, r6
   d8154:	f001 ff59 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8158:	492d      	ldr	r1, [pc, #180]	; (d8210 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x250>)
   d815a:	f106 0010 	add.w	r0, r6, #16
   d815e:	f001 ff54 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8162:	492c      	ldr	r1, [pc, #176]	; (d8214 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x254>)
   d8164:	f106 0020 	add.w	r0, r6, #32
   d8168:	f001 ff4f 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d816c:	492a      	ldr	r1, [pc, #168]	; (d8218 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x258>)
   d816e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d8172:	f001 ff4a 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8176:	4929      	ldr	r1, [pc, #164]	; (d821c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x25c>)
   d8178:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d817c:	f001 ff45 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d8180:	4927      	ldr	r1, [pc, #156]	; (d8220 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x260>)
   d8182:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d8186:	f001 ff40 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
   d818a:	4926      	ldr	r1, [pc, #152]	; (d8224 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x264>)
   d818c:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d8190:	f001 ff3b 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>


BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d8194:	462a      	mov	r2, r5
   d8196:	4924      	ldr	r1, [pc, #144]	; (d8228 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x268>)
   d8198:	4620      	mov	r0, r4
   d819a:	f003 ffc3 	bl	dc124 <__aeabi_atexit>

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d819e:	ed9f 0a23 	vldr	s0, [pc, #140]	; d822c <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x26c>
   d81a2:	4823      	ldr	r0, [pc, #140]	; (d8230 <_GLOBAL__sub_I__Z15blynk_dbg_printPKcz+0x270>)
   d81a4:	220f      	movs	r2, #15
   d81a6:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d81a8:	b002      	add	sp, #8
   d81aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

float conc, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d81ae:	f000 b9d1 	b.w	d8554 <_ZN3IAQC1Eiif>
   d81b2:	bf00      	nop
   d81b4:	2003df68 	.word	0x2003df68
   d81b8:	2003e1e0 	.word	0x2003e1e0
   d81bc:	2003d774 	.word	0x2003d774
   d81c0:	2003d728 	.word	0x2003d728
   d81c4:	000d5a15 	.word	0x000d5a15
   d81c8:	2003e234 	.word	0x2003e234
   d81cc:	2003e1b4 	.word	0x2003e1b4
   d81d0:	00ffff00 	.word	0x00ffff00
   d81d4:	000e5ce1 	.word	0x000e5ce1
   d81d8:	000d538d 	.word	0x000d538d
   d81dc:	2003daa0 	.word	0x2003daa0
   d81e0:	2003d760 	.word	0x2003d760
   d81e4:	000d88d5 	.word	0x000d88d5
   d81e8:	2003d76c 	.word	0x2003d76c
   d81ec:	2003e1d4 	.word	0x2003e1d4
   d81f0:	2003def4 	.word	0x2003def4
   d81f4:	2003d730 	.word	0x2003d730
   d81f8:	000daa1f 	.word	0x000daa1f
   d81fc:	000d9f7d 	.word	0x000d9f7d
   d8200:	2003d778 	.word	0x2003d778
   d8204:	2003df6c 	.word	0x2003df6c
   d8208:	2003d858 	.word	0x2003d858
   d820c:	000e658e 	.word	0x000e658e
   d8210:	000e6592 	.word	0x000e6592
   d8214:	000e6596 	.word	0x000e6596
   d8218:	000e65a1 	.word	0x000e65a1
   d821c:	000e65a5 	.word	0x000e65a5
   d8220:	000e65aa 	.word	0x000e65aa
   d8224:	000e65b2 	.word	0x000e65b2
   d8228:	000d5335 	.word	0x000d5335
   d822c:	4081999a 	.word	0x4081999a
   d8230:	2003df10 	.word	0x2003df10
   d8234:	2003e21c 	.word	0x2003e21c
   d8238:	2003d7e8 	.word	0x2003d7e8
   d823c:	2003d7f8 	.word	0x2003d7f8
   d8240:	2003d808 	.word	0x2003d808
   d8244:	2003d818 	.word	0x2003d818
   d8248:	2003d828 	.word	0x2003d828
   d824c:	2003d838 	.word	0x2003d838
   d8250:	2003d848 	.word	0x2003d848
   d8254:	2003def8 	.word	0x2003def8

000d8258 <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d8258:	e880 0006 	stmia.w	r0, {r1, r2}
   d825c:	4a10      	ldr	r2, [pc, #64]	; (d82a0 <_ZN3ULPC1Eiif+0x48>)
   d825e:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d8260:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d8262:	4a10      	ldr	r2, [pc, #64]	; (d82a4 <_ZN3ULPC1Eiif+0x4c>)
   d8264:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8266:	4a10      	ldr	r2, [pc, #64]	; (d82a8 <_ZN3ULPC1Eiif+0x50>)
   d8268:	eddf 6a10 	vldr	s13, [pc, #64]	; d82ac <_ZN3ULPC1Eiif+0x54>
   d826c:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d8270:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d82b0 <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d8274:	490f      	ldr	r1, [pc, #60]	; (d82b4 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d8276:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d827a:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d827e:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8280:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d8284:	eddf 6a0c 	vldr	s13, [pc, #48]	; d82b8 <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d8288:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d828c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d8290:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d8294:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d8298:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d829c:	4770      	bx	lr
   d829e:	bf00      	nop
   d82a0:	41a00000 	.word	0x41a00000
   d82a4:	41900000 	.word	0x41900000
   d82a8:	2003d628 	.word	0x2003d628
   d82ac:	42680000 	.word	0x42680000
   d82b0:	42ae0000 	.word	0x42ae0000
   d82b4:	42200000 	.word	0x42200000
   d82b8:	42180000 	.word	0x42180000

000d82bc <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d82bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d82c0:	460c      	mov	r4, r1
   d82c2:	4606      	mov	r6, r0
   d82c4:	4690      	mov	r8, r2
   d82c6:	f001 fa5d 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d82ca:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d82ce:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d82d2:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d82d4:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d82d6:	88b0      	ldrh	r0, [r6, #4]
   d82d8:	f003 fea5 	bl	dc026 <analogRead>
   d82dc:	4404      	add	r4, r0
    delay(1);
   d82de:	2001      	movs	r0, #1
   d82e0:	f002 fb26 	bl	da930 <delay>
   d82e4:	f001 fa4e 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d82e8:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d82ea:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d82ee:	d3f2      	bcc.n	d82d6 <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d82f0:	ee07 5a10 	vmov	s14, r5
   d82f4:	ee07 4a90 	vmov	s15, r4
   d82f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d82fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d8300:	4b18      	ldr	r3, [pc, #96]	; (d8364 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d8302:	edd6 5a08 	vldr	s11, [r6, #32]
   d8306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d830a:	edd3 7a00 	vldr	s15, [r3]
   d830e:	4b16      	ldr	r3, [pc, #88]	; (d8368 <_ZN3ULP7getTempEiPc+0xac>)
   d8310:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d8314:	4b15      	ldr	r3, [pc, #84]	; (d836c <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d8316:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d831a:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d831c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d8320:	ed9f 7a13 	vldr	s14, [pc, #76]	; d8370 <_ZN3ULP7getTempEiPc+0xb4>
   d8324:	ee27 7a87 	vmul.f32	s14, s15, s14
   d8328:	edd6 7a07 	vldr	s15, [r6, #28]
   d832c:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d8330:	d10c      	bne.n	d834c <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d8332:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d8336:	ee67 7a87 	vmul.f32	s15, s15, s14
   d833a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d833e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d8342:	eddf 7a0c 	vldr	s15, [pc, #48]	; d8374 <_ZN3ULP7getTempEiPc+0xb8>
   d8346:	ee77 7a27 	vadd.f32	s15, s14, s15
   d834a:	e002      	b.n	d8352 <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d834c:	4b0a      	ldr	r3, [pc, #40]	; (d8378 <_ZN3ULP7getTempEiPc+0xbc>)
   d834e:	4598      	cmp	r8, r3
   d8350:	d102      	bne.n	d8358 <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d8352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d8356:	e001      	b.n	d835c <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d8358:	eddf 7a08 	vldr	s15, [pc, #32]	; d837c <_ZN3ULP7getTempEiPc+0xc0>
}
   d835c:	ee17 0a90 	vmov	r0, s15
   d8360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8364:	2003d624 	.word	0x2003d624
   d8368:	2003d628 	.word	0x2003d628
   d836c:	000e61fb 	.word	0x000e61fb
   d8370:	39800000 	.word	0x39800000
   d8374:	42000000 	.word	0x42000000
   d8378:	000e65a3 	.word	0x000e65a3
   d837c:	00000000 	.word	0x00000000

000d8380 <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d8380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8382:	4604      	mov	r4, r0
   d8384:	f001 f9fe 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d8388:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d838a:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d838e:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d8390:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d8392:	8820      	ldrh	r0, [r4, #0]
   d8394:	f003 fe47 	bl	dc026 <analogRead>
   d8398:	4405      	add	r5, r0
    delay(1);
   d839a:	2001      	movs	r0, #1
   d839c:	f002 fac8 	bl	da930 <delay>
   d83a0:	f001 f9f0 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d83a4:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d83a6:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d83aa:	d3f2      	bcc.n	d8392 <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d83ac:	ee07 5a90 	vmov	s15, r5
   d83b0:	ee07 6a10 	vmov	s14, r6
   d83b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d83b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d83bc:	4b15      	ldr	r3, [pc, #84]	; (d8414 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d83be:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d83c2:	edd3 7a00 	vldr	s15, [r3]
   d83c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d83ca:	ee17 0a90 	vmov	r0, s15
   d83ce:	f009 fc5b 	bl	e1c88 <__aeabi_f2d>
   d83d2:	2200      	movs	r2, #0
   d83d4:	4b10      	ldr	r3, [pc, #64]	; (d8418 <_ZN3ULP4zeroEv+0x98>)
   d83d6:	f009 fcab 	bl	e1d30 <__aeabi_dmul>
   d83da:	4b10      	ldr	r3, [pc, #64]	; (d841c <_ZN3ULP4zeroEv+0x9c>)
   d83dc:	2200      	movs	r2, #0
   d83de:	f009 fca7 	bl	e1d30 <__aeabi_dmul>
   d83e2:	f009 ff9d 	bl	e2320 <__aeabi_d2f>
   d83e6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d83ea:	4a0d      	ldr	r2, [pc, #52]	; (d8420 <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d83ec:	ee07 0a10 	vmov	s14, r0
   d83f0:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d83f4:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d83f6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d83fa:	4620      	mov	r0, r4
   d83fc:	f7ff ff5e 	bl	d82bc <_ZN3ULP7getTempEiPc>
   d8400:	ee07 0a90 	vmov	s15, r0
   d8404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d8408:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d840c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d8410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8412:	bf00      	nop
   d8414:	2003d624 	.word	0x2003d624
   d8418:	408f4000 	.word	0x408f4000
   d841c:	3f300000 	.word	0x3f300000
   d8420:	000e65a3 	.word	0x000e65a3

000d8424 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d8424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8426:	460c      	mov	r4, r1
   d8428:	4607      	mov	r7, r0
   d842a:	f001 f9ab 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d842e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d8432:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d8436:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d8438:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d843a:	8838      	ldrh	r0, [r7, #0]
   d843c:	f003 fdf3 	bl	dc026 <analogRead>
   d8440:	4404      	add	r4, r0
    delay(1);
   d8442:	2001      	movs	r0, #1
   d8444:	f002 fa74 	bl	da930 <delay>
   d8448:	f001 f99c 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d844c:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d844e:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d8452:	d3f2      	bcc.n	d843a <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d8454:	ee07 4a90 	vmov	s15, r4
   d8458:	ee07 5a10 	vmov	s14, r5
   d845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8460:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d8464:	4b0b      	ldr	r3, [pc, #44]	; (d8494 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d8466:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d846a:	edd3 7a00 	vldr	s15, [r3]
   d846e:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d8472:	ee17 0a90 	vmov	r0, s15
   d8476:	f009 fc07 	bl	e1c88 <__aeabi_f2d>
   d847a:	2200      	movs	r2, #0
   d847c:	4b06      	ldr	r3, [pc, #24]	; (d8498 <_ZN3ULP7getVgasEi+0x74>)
   d847e:	f009 fc57 	bl	e1d30 <__aeabi_dmul>
   d8482:	2200      	movs	r2, #0
   d8484:	4b05      	ldr	r3, [pc, #20]	; (d849c <_ZN3ULP7getVgasEi+0x78>)
   d8486:	f009 fc53 	bl	e1d30 <__aeabi_dmul>
   d848a:	f009 ff49 	bl	e2320 <__aeabi_d2f>
} //returns voltage at zero concentration
   d848e:	ee00 0a10 	vmov	s0, r0
   d8492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8494:	2003d624 	.word	0x2003d624
   d8498:	408f4000 	.word	0x408f4000
   d849c:	3f300000 	.word	0x3f300000

000d84a0 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d84a0:	b5d0      	push	{r4, r6, r7, lr}
   d84a2:	ed2d 8b02 	vpush	{d8}
   d84a6:	4604      	mov	r4, r0
   d84a8:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d84ac:	f7ff ffba 	bl	d8424 <_ZN3ULP7getVgasEi>
   d84b0:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d84b4:	ee30 0a67 	vsub.f32	s0, s0, s15
   d84b8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d84bc:	ee70 7a67 	vsub.f32	s15, s0, s15
   d84c0:	ee17 0a90 	vmov	r0, s15
   d84c4:	f009 fbe0 	bl	e1c88 <__aeabi_f2d>
   d84c8:	2200      	movs	r2, #0
   d84ca:	4b21      	ldr	r3, [pc, #132]	; (d8550 <_ZN3ULP7getConcEif+0xb0>)
   d84cc:	f009 fd5a 	bl	e1f84 <__aeabi_ddiv>
   d84d0:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d84d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84d8:	4606      	mov	r6, r0
   d84da:	ee17 0a90 	vmov	r0, s15
   d84de:	460f      	mov	r7, r1
   d84e0:	f009 fbd2 	bl	e1c88 <__aeabi_f2d>
   d84e4:	4602      	mov	r2, r0
   d84e6:	460b      	mov	r3, r1
   d84e8:	4630      	mov	r0, r6
   d84ea:	4639      	mov	r1, r7
   d84ec:	f009 fd4a 	bl	e1f84 <__aeabi_ddiv>
   d84f0:	a315      	add	r3, pc, #84	; (adr r3, d8548 <_ZN3ULP7getConcEif+0xa8>)
   d84f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84f6:	f009 fc1b 	bl	e1d30 <__aeabi_dmul>
   d84fa:	f009 ff11 	bl	e2320 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d84fe:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d8502:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d8506:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d850a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d850e:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d8512:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d8516:	bfcc      	ite	gt
   d8518:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d851c:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d8520:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d8524:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d8528:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d852c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d8530:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d8534:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d8538:	edd4 6a02 	vldr	s13, [r4, #8]
   d853c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d8540:	ee20 0a07 	vmul.f32	s0, s0, s14
   d8544:	bdd0      	pop	{r4, r6, r7, pc}
   d8546:	bf00      	nop
   d8548:	00000000 	.word	0x00000000
   d854c:	41cdcd65 	.word	0x41cdcd65
   d8550:	408f4000 	.word	0x408f4000

000d8554 <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d8554:	b508      	push	{r3, lr}
   d8556:	4603      	mov	r3, r0
   d8558:	f7ff fe7e 	bl	d8258 <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d855c:	4a0d      	ldr	r2, [pc, #52]	; (d8594 <_ZN3IAQC1Eiif+0x40>)
   d855e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d8598 <_ZN3IAQC1Eiif+0x44>
   d8562:	edd2 7a00 	vldr	s15, [r2]
   d8566:	eddf 6a0d 	vldr	s13, [pc, #52]	; d859c <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d856a:	4a0d      	ldr	r2, [pc, #52]	; (d85a0 <_ZN3IAQC1Eiif+0x4c>)
   d856c:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d856e:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d8572:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d8576:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d857a:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d857c:	4a09      	ldr	r2, [pc, #36]	; (d85a4 <_ZN3IAQC1Eiif+0x50>)
   d857e:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d8580:	4a09      	ldr	r2, [pc, #36]	; (d85a8 <_ZN3IAQC1Eiif+0x54>)
   d8582:	635a      	str	r2, [r3, #52]	; 0x34
}
   d8584:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d8586:	ed9f 7a09 	vldr	s14, [pc, #36]	; d85ac <_ZN3IAQC1Eiif+0x58>
   d858a:	ee67 7a87 	vmul.f32	s15, s15, s14
   d858e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d8592:	bd08      	pop	{r3, pc}
   d8594:	2003d628 	.word	0x2003d628
   d8598:	4986e340 	.word	0x4986e340
   d859c:	4a007aa0 	.word	0x4a007aa0
   d85a0:	000186a0 	.word	0x000186a0
   d85a4:	4181999a 	.word	0x4181999a
   d85a8:	4093851f 	.word	0x4093851f
   d85ac:	447a0000 	.word	0x447a0000

000d85b0 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:
   d85b0:	f001 b868 	b.w	d9684 <HAL_Pin_Map>

000d85b4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d85b4:	6803      	ldr	r3, [r0, #0]
   d85b6:	b2c9      	uxtb	r1, r1
   d85b8:	689b      	ldr	r3, [r3, #8]
   d85ba:	4718      	bx	r3

000d85bc <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   d85bc:	b510      	push	{r4, lr}
   d85be:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   d85c0:	f003 fd90 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d85c4:	f002 ffa8 	bl	db518 <_ZN7TwoWire9isEnabledEv>
   d85c8:	b918      	cbnz	r0, d85d2 <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   d85ca:	f003 fd8b 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d85ce:	f002 ff75 	bl	db4bc <_ZN7TwoWire5beginEv>
  }
}
   d85d2:	4620      	mov	r0, r4
   d85d4:	bd10      	pop	{r4, pc}

000d85d6 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d85d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85da:	4692      	mov	sl, r2
   d85dc:	4698      	mov	r8, r3
   d85de:	460d      	mov	r5, r1
   d85e0:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d85e4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d85e8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   d85ec:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d85f0:	f003 fd78 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d85f4:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d85f6:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d85f8:	f002 ff84 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d85fc:	f003 fd72 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8600:	2100      	movs	r1, #0
   d8602:	f7ff ffd7 	bl	d85b4 <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d8606:	f003 fd6d 	bl	dc0e4 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d860a:	fbb5 f3f4 	udiv	r3, r5, r4
   d860e:	fb04 5513 	mls	r5, r4, r3, r5
   d8612:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   d8616:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d8618:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d861c:	f7ff ffca 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d8620:	f003 fd60 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8624:	fbba f1f4 	udiv	r1, sl, r4
   d8628:	fb04 aa11 	mls	sl, r4, r1, sl
   d862c:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d8630:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d8634:	f7ff ffbe 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d8638:	f003 fd54 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d863c:	fbb8 f1f4 	udiv	r1, r8, r4
   d8640:	fb04 8811 	mls	r8, r4, r1, r8
   d8644:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   d8648:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d864c:	f7ff ffb2 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d8650:	f003 fd48 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8654:	fbbb f1f4 	udiv	r1, fp, r4
   d8658:	fb04 b111 	mls	r1, r4, r1, fp
   d865c:	f001 0107 	and.w	r1, r1, #7
   d8660:	f041 0108 	orr.w	r1, r1, #8
   d8664:	f7ff ffa6 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d8668:	f003 fd3c 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d866c:	fbb7 f1f4 	udiv	r1, r7, r4
   d8670:	fb04 7711 	mls	r7, r4, r1, r7
   d8674:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d8678:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d867c:	f7ff ff9a 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d8680:	f003 fd30 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8684:	fbb6 f1f4 	udiv	r1, r6, r4
   d8688:	fb04 6611 	mls	r6, r4, r1, r6
   d868c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d8690:	f001 011f 	and.w	r1, r1, #31
   d8694:	f7ff ff8e 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   d8698:	f003 fd24 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d869c:	fbb9 f1f4 	udiv	r1, r9, r4
   d86a0:	6803      	ldr	r3, [r0, #0]
   d86a2:	fb04 9411 	mls	r4, r4, r1, r9
   d86a6:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d86aa:	689b      	ldr	r3, [r3, #8]
   d86ac:	b2c9      	uxtb	r1, r1
   d86ae:	4798      	blx	r3

  Wire.endTransmission();
   d86b0:	f003 fd18 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86b4:	f002 ff2d 	bl	db512 <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d86b8:	f003 fd14 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86bc:	216f      	movs	r1, #111	; 0x6f
   d86be:	f002 ff21 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d86c2:	f003 fd0f 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86c6:	2100      	movs	r1, #0
   d86c8:	f7ff ff74 	bl	d85b4 <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d86cc:	f003 fd0a 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86d0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d86d4:	f7ff ff6e 	bl	d85b4 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d86d8:	f003 fd04 	bl	dc0e4 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d86dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   d86e0:	f002 bf17 	b.w	db512 <_ZN7TwoWire15endTransmissionEv>

000d86e4 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d86e4:	b570      	push	{r4, r5, r6, lr}
   d86e6:	461c      	mov	r4, r3
   d86e8:	4615      	mov	r5, r2
   d86ea:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d86ec:	f003 fcfa 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86f0:	216f      	movs	r1, #111	; 0x6f
   d86f2:	f002 ff07 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   d86f6:	f003 fcf5 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d86fa:	2100      	movs	r1, #0
   d86fc:	f7ff ff5a 	bl	d85b4 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d8700:	f003 fcf0 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8704:	f002 ff05 	bl	db512 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d8708:	f003 fcec 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d870c:	216f      	movs	r1, #111	; 0x6f
   d870e:	2207      	movs	r2, #7
   d8710:	f002 feea 	bl	db4e8 <_ZN7TwoWire11requestFromEii>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d8714:	f003 fce6 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8718:	6803      	ldr	r3, [r0, #0]
   d871a:	695b      	ldr	r3, [r3, #20]
   d871c:	4798      	blx	r3
   d871e:	b2c0      	uxtb	r0, r0
   d8720:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d8724:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8728:	f000 000f 	and.w	r0, r0, #15
   d872c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d8730:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d8732:	f003 fcd7 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8736:	6803      	ldr	r3, [r0, #0]
   d8738:	695b      	ldr	r3, [r3, #20]
   d873a:	4798      	blx	r3
   d873c:	b2c0      	uxtb	r0, r0
   d873e:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d8742:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8746:	f000 000f 	and.w	r0, r0, #15
   d874a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d874e:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d8750:	f003 fcc8 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8754:	6803      	ldr	r3, [r0, #0]
   d8756:	695b      	ldr	r3, [r3, #20]
   d8758:	4798      	blx	r3
   d875a:	b2c0      	uxtb	r0, r0
   d875c:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d8760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8764:	f000 000f 	and.w	r0, r0, #15
   d8768:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d876c:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d876e:	f003 fcb9 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8772:	6803      	ldr	r3, [r0, #0]
   d8774:	695b      	ldr	r3, [r3, #20]
   d8776:	4798      	blx	r3
   d8778:	9b04      	ldr	r3, [sp, #16]
   d877a:	f000 0007 	and.w	r0, r0, #7
   d877e:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d8780:	f003 fcb0 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8784:	6803      	ldr	r3, [r0, #0]
   d8786:	695b      	ldr	r3, [r3, #20]
   d8788:	4798      	blx	r3
   d878a:	b2c0      	uxtb	r0, r0
   d878c:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d8790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8794:	f000 000f 	and.w	r0, r0, #15
   d8798:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d879c:	9b05      	ldr	r3, [sp, #20]
   d879e:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d87a0:	f003 fca0 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d87a4:	6803      	ldr	r3, [r0, #0]
   d87a6:	695b      	ldr	r3, [r3, #20]
   d87a8:	4798      	blx	r3
   d87aa:	b2c0      	uxtb	r0, r0
   d87ac:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d87b0:	0093      	lsls	r3, r2, #2
   d87b2:	4413      	add	r3, r2
   d87b4:	f000 000f 	and.w	r0, r0, #15
   d87b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d87bc:	9b06      	ldr	r3, [sp, #24]
   d87be:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   d87c0:	f003 fc90 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d87c4:	6803      	ldr	r3, [r0, #0]
   d87c6:	695b      	ldr	r3, [r3, #20]
   d87c8:	4798      	blx	r3
   d87ca:	b2c0      	uxtb	r0, r0
   d87cc:	0903      	lsrs	r3, r0, #4
   d87ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d87d2:	f000 000f 	and.w	r0, r0, #15
   d87d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d87da:	9b07      	ldr	r3, [sp, #28]
   d87dc:	7018      	strb	r0, [r3, #0]
   d87de:	bd70      	pop	{r4, r5, r6, pc}

000d87e0 <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d87e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87e4:	4607      	mov	r7, r0
   d87e6:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d87e8:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d87ea:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d87ec:	f001 ff90 	bl	da710 <_ZN9TimeClass6secondEl>
   d87f0:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d87f2:	4620      	mov	r0, r4
   d87f4:	f001 ff84 	bl	da700 <_ZN9TimeClass6minuteEl>
   d87f8:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d87fa:	4620      	mov	r0, r4
   d87fc:	f001 ff78 	bl	da6f0 <_ZN9TimeClass4hourEl>
   d8800:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d8802:	4620      	mov	r0, r4
   d8804:	f001 ff94 	bl	da730 <_ZN9TimeClass7weekdayEl>
   d8808:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d880a:	4620      	mov	r0, r4
   d880c:	f001 ff88 	bl	da720 <_ZN9TimeClass3dayEl>
   d8810:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d8812:	4620      	mov	r0, r4
   d8814:	f001 ff96 	bl	da744 <_ZN9TimeClass5monthEl>
   d8818:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d881a:	4620      	mov	r0, r4
   d881c:	f001 ff9c 	bl	da758 <_ZN9TimeClass4yearEl>
   d8820:	220a      	movs	r2, #10
   d8822:	4601      	mov	r1, r0
   d8824:	a804      	add	r0, sp, #16
   d8826:	f001 fc65 	bl	da0f4 <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d882a:	a904      	add	r1, sp, #16
   d882c:	2202      	movs	r2, #2
   d882e:	a808      	add	r0, sp, #32
   d8830:	f001 fce2 	bl	da1f8 <_ZNK6String9substringEj>
   d8834:	a808      	add	r0, sp, #32
   d8836:	f001 fcf3 	bl	da220 <_ZNK6String5toIntEv>
   d883a:	4604      	mov	r4, r0
   d883c:	a808      	add	r0, sp, #32
   d883e:	f001 fb9d 	bl	d9f7c <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d8842:	b2e4      	uxtb	r4, r4
   d8844:	fa5f f38b 	uxtb.w	r3, fp
   d8848:	b2f6      	uxtb	r6, r6
   d884a:	b2ed      	uxtb	r5, r5
   d884c:	9302      	str	r3, [sp, #8]
   d884e:	fa5f f289 	uxtb.w	r2, r9
   d8852:	fa5f f38a 	uxtb.w	r3, sl
   d8856:	fa5f f188 	uxtb.w	r1, r8
   d885a:	4638      	mov	r0, r7
   d885c:	9403      	str	r4, [sp, #12]
   d885e:	9601      	str	r6, [sp, #4]
   d8860:	9500      	str	r5, [sp, #0]
   d8862:	f7ff feb8 	bl	d85d6 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d8866:	a804      	add	r0, sp, #16
   d8868:	f001 fb88 	bl	d9f7c <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d886c:	b00d      	add	sp, #52	; 0x34
   d886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8872 <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   d8872:	b500      	push	{lr}
   d8874:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d8876:	f10d 031b 	add.w	r3, sp, #27
   d887a:	9303      	str	r3, [sp, #12]
   d887c:	f10d 031a 	add.w	r3, sp, #26
   d8880:	9302      	str	r3, [sp, #8]
   d8882:	f10d 0319 	add.w	r3, sp, #25
   d8886:	9301      	str	r3, [sp, #4]
   d8888:	ab06      	add	r3, sp, #24
   d888a:	9300      	str	r3, [sp, #0]
   d888c:	f10d 0216 	add.w	r2, sp, #22
   d8890:	f10d 0317 	add.w	r3, sp, #23
   d8894:	f10d 0115 	add.w	r1, sp, #21
   d8898:	f7ff ff24 	bl	d86e4 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d889c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d88a0:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d88a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d88a6:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d88a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d88ac:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d88ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d88b2:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d88b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d88b8:	3b01      	subs	r3, #1
   d88ba:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d88bc:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d88c0:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   d88c2:	3364      	adds	r3, #100	; 0x64
   d88c4:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   d88c6:	f009 ffbd 	bl	e2844 <mktime>

  return uint32_t(moment);
}
   d88ca:	b011      	add	sp, #68	; 0x44
   d88cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d88d0 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d88d0:	f000 bed8 	b.w	d9684 <HAL_Pin_Map>

000d88d4 <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   d88d4:	4770      	bx	lr

000d88d6 <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d88d6:	b510      	push	{r4, lr}
}
   d88d8:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   d88da:	4604      	mov	r4, r0
}
   d88dc:	f003 fc27 	bl	dc12e <_ZdlPvj>
   d88e0:	4620      	mov	r0, r4
   d88e2:	bd10      	pop	{r4, pc}

000d88e4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d88e4:	6803      	ldr	r3, [r0, #0]
   d88e6:	b2c9      	uxtb	r1, r1
   d88e8:	689b      	ldr	r3, [r3, #8]
   d88ea:	4718      	bx	r3

000d88ec <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   d88ec:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   d88ee:	4c02      	ldr	r4, [pc, #8]	; (d88f8 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   d88f0:	6004      	str	r4, [r0, #0]
   d88f2:	6041      	str	r1, [r0, #4]
   d88f4:	6082      	str	r2, [r0, #8]
}
   d88f6:	bd10      	pop	{r4, pc}
   d88f8:	000e6680 	.word	0x000e6680

000d88fc <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d88fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8900:	4604      	mov	r4, r0
   d8902:	460d      	mov	r5, r1
   d8904:	4617      	mov	r7, r2
   d8906:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   d8908:	f1b8 0f00 	cmp.w	r8, #0
   d890c:	d03f      	beq.n	d898e <_ZN10MB85RC256V8readDataEjPhj+0x92>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d890e:	68a1      	ldr	r1, [r4, #8]
   d8910:	6860      	ldr	r0, [r4, #4]
   d8912:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d8916:	f002 fdf5 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d891a:	0a29      	lsrs	r1, r5, #8
   d891c:	6860      	ldr	r0, [r4, #4]
   d891e:	f7ff ffe1 	bl	d88e4 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d8922:	4629      	mov	r1, r5
   d8924:	6860      	ldr	r0, [r4, #4]
   d8926:	f7ff ffdd 	bl	d88e4 <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   d892a:	2100      	movs	r1, #0
   d892c:	6860      	ldr	r0, [r4, #4]
   d892e:	f002 fdec 	bl	db50a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d8932:	b110      	cbz	r0, d893a <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   d8934:	2000      	movs	r0, #0
   d8936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d893a:	f1b8 0f20 	cmp.w	r8, #32
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d893e:	68a1      	ldr	r1, [r4, #8]
   d8940:	6860      	ldr	r0, [r4, #4]
   d8942:	46c1      	mov	r9, r8
   d8944:	bf28      	it	cs
   d8946:	f04f 0920 	movcs.w	r9, #32
   d894a:	2301      	movs	r3, #1
   d894c:	464a      	mov	r2, r9
   d894e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d8952:	f002 fdce 	bl	db4f2 <_ZN7TwoWire11requestFromEiii>

		if (Wire.available() < (int) bytesToRead) {
   d8956:	f003 fbc5 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d895a:	6803      	ldr	r3, [r0, #0]
   d895c:	691b      	ldr	r3, [r3, #16]
   d895e:	4798      	blx	r3
   d8960:	4581      	cmp	r9, r0
   d8962:	dce7      	bgt.n	d8934 <_ZN10MB85RC256V8readDataEjPhj+0x38>
   d8964:	463e      	mov	r6, r7
   d8966:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   d896a:	f003 fbbb 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d896e:	6803      	ldr	r3, [r0, #0]
   d8970:	695b      	ldr	r3, [r3, #20]
   d8972:	4798      	blx	r3
   d8974:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   d8978:	1bf2      	subs	r2, r6, r7
   d897a:	ebc6 0308 	rsb	r3, r6, r8
   d897e:	4591      	cmp	r9, r2
   d8980:	eb06 050a 	add.w	r5, r6, sl
   d8984:	443b      	add	r3, r7
   d8986:	d8f0      	bhi.n	d896a <_ZN10MB85RC256V8readDataEjPhj+0x6e>
   d8988:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   d898a:	4637      	mov	r7, r6
   d898c:	e7bc      	b.n	d8908 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   d898e:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   d8990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8994 <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d8994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8998:	4604      	mov	r4, r0
   d899a:	460d      	mov	r5, r1
   d899c:	4690      	mov	r8, r2
   d899e:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   d89a0:	b357      	cbz	r7, d89f8 <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   d89a2:	68a1      	ldr	r1, [r4, #8]
   d89a4:	6860      	ldr	r0, [r4, #4]
   d89a6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d89aa:	f002 fdab 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   d89ae:	0a29      	lsrs	r1, r5, #8
   d89b0:	6860      	ldr	r0, [r4, #4]
   d89b2:	f7ff ff97 	bl	d88e4 <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   d89b6:	4629      	mov	r1, r5
   d89b8:	6860      	ldr	r0, [r4, #4]
   d89ba:	f7ff ff93 	bl	d88e4 <_ZN7TwoWire5writeEj>
   d89be:	f108 091e 	add.w	r9, r8, #30
   d89c2:	4646      	mov	r6, r8
   d89c4:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   d89c8:	6860      	ldr	r0, [r4, #4]
   d89ca:	f816 1b01 	ldrb.w	r1, [r6], #1
   d89ce:	6803      	ldr	r3, [r0, #0]
   d89d0:	689b      	ldr	r3, [r3, #8]
   d89d2:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d89d4:	454e      	cmp	r6, r9
   d89d6:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   d89da:	46b0      	mov	r8, r6
			dataLen--;
   d89dc:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d89e0:	d001      	beq.n	d89e6 <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   d89e2:	2f00      	cmp	r7, #0
   d89e4:	d1f0      	bne.n	d89c8 <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   d89e6:	2101      	movs	r1, #1
   d89e8:	6860      	ldr	r0, [r4, #4]
   d89ea:	f002 fd8e 	bl	db50a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d89ee:	2800      	cmp	r0, #0
   d89f0:	d0d6      	beq.n	d89a0 <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   d89f2:	2000      	movs	r0, #0
   d89f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   d89f8:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   d89fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d89fe <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   d89fe:	b530      	push	{r4, r5, lr}
   d8a00:	b089      	sub	sp, #36	; 0x24
   d8a02:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   d8a04:	2220      	movs	r2, #32
   d8a06:	2100      	movs	r1, #0
   d8a08:	4668      	mov	r0, sp
   d8a0a:	f009 fe36 	bl	e267a <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   d8a0e:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   d8a10:	2320      	movs	r3, #32
   d8a12:	466a      	mov	r2, sp
   d8a14:	4621      	mov	r1, r4
   d8a16:	4628      	mov	r0, r5
   d8a18:	f7ff ffbc 	bl	d8994 <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   d8a1c:	b120      	cbz	r0, d8a28 <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   d8a1e:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   d8a20:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d8a24:	d1f4      	bne.n	d8a10 <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   d8a26:	2001      	movs	r0, #1
}
   d8a28:	b009      	add	sp, #36	; 0x24
   d8a2a:	bd30      	pop	{r4, r5, pc}

000d8a2c <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   d8a2c:	f000 be2a 	b.w	d9684 <HAL_Pin_Map>

000d8a30 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   d8a30:	4770      	bx	lr
	...

000d8a34 <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   d8a34:	b510      	push	{r4, lr}

      IOexp.begin();
   d8a36:	4c53      	ldr	r4, [pc, #332]	; (d8b84 <_ZN12IoTNodePower5beginEv+0x150>)
   d8a38:	4620      	mov	r0, r4
   d8a3a:	f000 fb0f 	bl	d905c <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   d8a3e:	4620      	mov	r0, r4
   d8a40:	2201      	movs	r2, #1
   d8a42:	2100      	movs	r1, #0
   d8a44:	f000 fb0d 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   d8a48:	2201      	movs	r2, #1
   d8a4a:	4611      	mov	r1, r2
   d8a4c:	4620      	mov	r0, r4
   d8a4e:	f000 fb08 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   d8a52:	4620      	mov	r0, r4
   d8a54:	2201      	movs	r2, #1
   d8a56:	2102      	movs	r1, #2
   d8a58:	f000 fb03 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   d8a5c:	4620      	mov	r0, r4
   d8a5e:	2201      	movs	r2, #1
   d8a60:	2103      	movs	r1, #3
   d8a62:	f000 fafe 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   d8a66:	4620      	mov	r0, r4
   d8a68:	2201      	movs	r2, #1
   d8a6a:	2104      	movs	r1, #4
   d8a6c:	f000 faf9 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   d8a70:	4620      	mov	r0, r4
   d8a72:	2201      	movs	r2, #1
   d8a74:	2105      	movs	r1, #5
   d8a76:	f000 faf4 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	2200      	movs	r2, #0
   d8a7e:	2106      	movs	r1, #6
   d8a80:	f000 faef 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   d8a84:	4620      	mov	r0, r4
   d8a86:	2201      	movs	r2, #1
   d8a88:	2107      	movs	r1, #7
   d8a8a:	f000 faea 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   d8a8e:	4620      	mov	r0, r4
   d8a90:	2200      	movs	r2, #0
   d8a92:	2108      	movs	r1, #8
   d8a94:	f000 fae5 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   d8a98:	4620      	mov	r0, r4
   d8a9a:	2200      	movs	r2, #0
   d8a9c:	2109      	movs	r1, #9
   d8a9e:	f000 fae0 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   d8aa2:	4620      	mov	r0, r4
   d8aa4:	2200      	movs	r2, #0
   d8aa6:	210a      	movs	r1, #10
   d8aa8:	f000 fadb 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   d8aac:	4620      	mov	r0, r4
   d8aae:	2200      	movs	r2, #0
   d8ab0:	210b      	movs	r1, #11
   d8ab2:	f000 fad6 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   d8ab6:	4620      	mov	r0, r4
   d8ab8:	2200      	movs	r2, #0
   d8aba:	210c      	movs	r1, #12
   d8abc:	f000 fad1 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   d8ac0:	4620      	mov	r0, r4
   d8ac2:	2200      	movs	r2, #0
   d8ac4:	210d      	movs	r1, #13
   d8ac6:	f000 facc 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   d8aca:	4620      	mov	r0, r4
   d8acc:	2200      	movs	r2, #0
   d8ace:	210e      	movs	r1, #14
   d8ad0:	f000 fac7 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   d8ad4:	4620      	mov	r0, r4
   d8ad6:	2200      	movs	r2, #0
   d8ad8:	210f      	movs	r1, #15
   d8ada:	f000 fac2 	bl	d9062 <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   d8ade:	4620      	mov	r0, r4
   d8ae0:	2201      	movs	r2, #1
   d8ae2:	2100      	movs	r1, #0
   d8ae4:	f000 fae6 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   d8ae8:	2201      	movs	r2, #1
   d8aea:	4611      	mov	r1, r2
   d8aec:	4620      	mov	r0, r4
   d8aee:	f000 fae1 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   d8af2:	4620      	mov	r0, r4
   d8af4:	2201      	movs	r2, #1
   d8af6:	2102      	movs	r1, #2
   d8af8:	f000 fadc 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   d8afc:	4620      	mov	r0, r4
   d8afe:	2201      	movs	r2, #1
   d8b00:	2103      	movs	r1, #3
   d8b02:	f000 fad7 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   d8b06:	4620      	mov	r0, r4
   d8b08:	2201      	movs	r2, #1
   d8b0a:	2104      	movs	r1, #4
   d8b0c:	f000 fad2 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   d8b10:	4620      	mov	r0, r4
   d8b12:	2201      	movs	r2, #1
   d8b14:	2105      	movs	r1, #5
   d8b16:	f000 facd 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	2201      	movs	r2, #1
   d8b1e:	2106      	movs	r1, #6
   d8b20:	f000 fac8 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   d8b24:	4620      	mov	r0, r4
   d8b26:	2201      	movs	r2, #1
   d8b28:	2107      	movs	r1, #7
   d8b2a:	f000 fac3 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   d8b2e:	4620      	mov	r0, r4
   d8b30:	2201      	movs	r2, #1
   d8b32:	2108      	movs	r1, #8
   d8b34:	f000 fabe 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   d8b38:	4620      	mov	r0, r4
   d8b3a:	2201      	movs	r2, #1
   d8b3c:	2109      	movs	r1, #9
   d8b3e:	f000 fab9 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   d8b42:	4620      	mov	r0, r4
   d8b44:	2201      	movs	r2, #1
   d8b46:	210a      	movs	r1, #10
   d8b48:	f000 fab4 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   d8b4c:	4620      	mov	r0, r4
   d8b4e:	2201      	movs	r2, #1
   d8b50:	210b      	movs	r1, #11
   d8b52:	f000 faaf 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   d8b56:	4620      	mov	r0, r4
   d8b58:	2201      	movs	r2, #1
   d8b5a:	210c      	movs	r1, #12
   d8b5c:	f000 faaa 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   d8b60:	4620      	mov	r0, r4
   d8b62:	2201      	movs	r2, #1
   d8b64:	210d      	movs	r1, #13
   d8b66:	f000 faa5 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   d8b6a:	4620      	mov	r0, r4
   d8b6c:	2201      	movs	r2, #1
   d8b6e:	210e      	movs	r1, #14
   d8b70:	f000 faa0 	bl	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   d8b74:	4620      	mov	r0, r4
   d8b76:	2201      	movs	r2, #1
   d8b78:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   d8b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   d8b7e:	f000 ba99 	b.w	d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>
   d8b82:	bf00      	nop
   d8b84:	2003e26c 	.word	0x2003e26c

000d8b88 <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   d8b88:	4801      	ldr	r0, [pc, #4]	; (d8b90 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   d8b8a:	f000 ba76 	b.w	d907a <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d8b8e:	bf00      	nop
   d8b90:	2003e26c 	.word	0x2003e26c

000d8b94 <_GLOBAL__sub_I_IOexp>:
   d8b94:	f000 bd76 	b.w	d9684 <HAL_Pin_Map>

000d8b98 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8b98:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d8b9a:	a50e      	add	r5, pc, #56	; (adr r5, d8bd4 <_ZN7ADXL345C1Ev+0x3c>)
   d8b9c:	e9d5 4500 	ldrd	r4, r5, [r5]
   d8ba0:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d8ba4:	a50d      	add	r5, pc, #52	; (adr r5, d8bdc <_ZN7ADXL345C1Ev+0x44>)
   d8ba6:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8baa:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d8bac:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d8bb0:	a50c      	add	r5, pc, #48	; (adr r5, d8be4 <_ZN7ADXL345C1Ev+0x4c>)
   d8bb2:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8bb6:	6282      	str	r2, [r0, #40]	; 0x28
   d8bb8:	2201      	movs	r2, #1
   d8bba:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d8bbe:	4904      	ldr	r1, [pc, #16]	; (d8bd0 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d8bc0:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d8bc2:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d8bc4:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d8bc6:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d8bc8:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d8bcc:	bd30      	pop	{r4, r5, pc}
   d8bce:	bf00      	nop
   d8bd0:	004c4b40 	.word	0x004c4b40
   d8bd4:	6cf9279f 	.word	0x6cf9279f
   d8bd8:	3f6ed578 	.word	0x3f6ed578
   d8bdc:	f28f7f0e 	.word	0xf28f7f0e
   d8be0:	3f6ecd7a 	.word	0x3f6ecd7a
   d8be4:	30d80f20 	.word	0x30d80f20
   d8be8:	3f6c9c9e 	.word	0x3f6c9c9e

000d8bec <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d8bec:	b538      	push	{r3, r4, r5, lr}
   d8bee:	4614      	mov	r4, r2
   d8bf0:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d8bf2:	f003 fa77 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8bf6:	2153      	movs	r1, #83	; 0x53
   d8bf8:	f002 fc84 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d8bfc:	f003 fa72 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c00:	6803      	ldr	r3, [r0, #0]
   d8c02:	4629      	mov	r1, r5
   d8c04:	689b      	ldr	r3, [r3, #8]
   d8c06:	4798      	blx	r3
	Wire.write(_val);                 
   d8c08:	f003 fa6c 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c0c:	6803      	ldr	r3, [r0, #0]
   d8c0e:	4621      	mov	r1, r4
   d8c10:	689b      	ldr	r3, [r3, #8]
   d8c12:	4798      	blx	r3
	Wire.endTransmission();         
   d8c14:	f003 fa66 	bl	dc0e4 <_Z19__fetch_global_Wirev>
}
   d8c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d8c1c:	f002 bc79 	b.w	db512 <_ZN7TwoWire15endTransmissionEv>

000d8c20 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d8c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c24:	4616      	mov	r6, r2
   d8c26:	461f      	mov	r7, r3
   d8c28:	460c      	mov	r4, r1
   d8c2a:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d8c2c:	f003 fa5a 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c30:	2153      	movs	r1, #83	; 0x53
   d8c32:	f002 fc67 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d8c36:	f003 fa55 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c3a:	6803      	ldr	r3, [r0, #0]
   d8c3c:	4621      	mov	r1, r4
   d8c3e:	689b      	ldr	r3, [r3, #8]
   d8c40:	4798      	blx	r3
	Wire.endTransmission();         
   d8c42:	f003 fa4f 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c46:	f002 fc64 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d8c4a:	f003 fa4b 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c4e:	2153      	movs	r1, #83	; 0x53
   d8c50:	f002 fc58 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d8c54:	f003 fa46 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c58:	4632      	mov	r2, r6
   d8c5a:	2153      	movs	r1, #83	; 0x53
   d8c5c:	f002 fc44 	bl	db4e8 <_ZN7TwoWire11requestFromEii>
   d8c60:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d8c62:	f003 fa3f 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c66:	6803      	ldr	r3, [r0, #0]
   d8c68:	691b      	ldr	r3, [r3, #16]
   d8c6a:	ebc7 0804 	rsb	r8, r7, r4
   d8c6e:	4798      	blx	r3
   d8c70:	b138      	cbz	r0, d8c82 <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d8c72:	f003 fa37 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8c76:	6803      	ldr	r3, [r0, #0]
   d8c78:	695b      	ldr	r3, [r3, #20]
   d8c7a:	4798      	blx	r3
   d8c7c:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d8c80:	e7ef      	b.n	d8c62 <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d8c82:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d8c84:	bf1e      	ittt	ne
   d8c86:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d8c88:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d8c8a:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d8c8c:	f003 fa2a 	bl	dc0e4 <_Z19__fetch_global_Wirev>
}
   d8c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d8c94:	f002 bc3d 	b.w	db512 <_ZN7TwoWire15endTransmissionEv>

000d8c98 <_ZN7ADXL34510writeToSPIEhh>:
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d8c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
   d8c9a:	4d0b      	ldr	r5, [pc, #44]	; (d8cc8 <_ZN7ADXL34510writeToSPIEhh+0x30>)
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d8c9c:	4604      	mov	r4, r0
   d8c9e:	460f      	mov	r7, r1
  digitalWrite(_CS, LOW);
   d8ca0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   d8ca2:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   d8ca4:	4616      	mov	r6, r2
  digitalWrite(_CS, LOW);
   d8ca6:	f003 f992 	bl	dbfce <digitalWrite>
  SPI.transfer(__reg_address); 
   d8caa:	4639      	mov	r1, r7
   d8cac:	4628      	mov	r0, r5
   d8cae:	f001 f8d9 	bl	d9e64 <_ZN8SPIClass8transferEh>
  SPI.transfer(__val); 
   d8cb2:	4631      	mov	r1, r6
   d8cb4:	4628      	mov	r0, r5
   d8cb6:	f001 f8d5 	bl	d9e64 <_ZN8SPIClass8transferEh>
  digitalWrite(_CS, HIGH); 
   d8cba:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   d8cbc:	2101      	movs	r1, #1
}
   d8cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   d8cc2:	f003 b984 	b.w	dbfce <digitalWrite>
   d8cc6:	bf00      	nop
   d8cc8:	2003e5f0 	.word	0x2003e5f0

000d8ccc <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   d8ccc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d8cd0:	b10b      	cbz	r3, d8cd6 <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   d8cd2:	f7ff bf8b 	b.w	d8bec <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   d8cd6:	f7ff bfdf 	b.w	d8c98 <_ZN7ADXL34510writeToSPIEhh>

000d8cda <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d8cda:	b510      	push	{r4, lr}
	if(I2C) {
   d8cdc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   d8ce0:	4604      	mov	r4, r0
	if(I2C) {
   d8ce2:	b11b      	cbz	r3, d8cec <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   d8ce4:	f003 f9fe 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8ce8:	f002 fbe8 	bl	db4bc <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   d8cec:	4620      	mov	r0, r4
   d8cee:	2200      	movs	r2, #0
   d8cf0:	212d      	movs	r1, #45	; 0x2d
   d8cf2:	f7ff ffeb 	bl	d8ccc <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   d8cf6:	4620      	mov	r0, r4
   d8cf8:	2210      	movs	r2, #16
   d8cfa:	212d      	movs	r1, #45	; 0x2d
   d8cfc:	f7ff ffe6 	bl	d8ccc <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d8d00:	4620      	mov	r0, r4
   d8d02:	2208      	movs	r2, #8
   d8d04:	212d      	movs	r1, #45	; 0x2d
}
   d8d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   d8d0a:	f7ff bfdf 	b.w	d8ccc <_ZN7ADXL3457writeToEhh>
	...

000d8d10 <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d8d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   d8d12:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   d8d14:	bfd4      	ite	le
   d8d16:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   d8d1a:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d8d1e:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d8d20:	2100      	movs	r1, #0
   d8d22:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   d8d24:	461f      	mov	r7, r3
   d8d26:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   d8d28:	f003 f951 	bl	dbfce <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   d8d2c:	4621      	mov	r1, r4
   d8d2e:	480a      	ldr	r0, [pc, #40]	; (d8d58 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d8d30:	f001 f898 	bl	d9e64 <_ZN8SPIClass8transferEh>
   d8d34:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   d8d36:	1be3      	subs	r3, r4, r7
   d8d38:	429e      	cmp	r6, r3
   d8d3a:	dd06      	ble.n	d8d4a <_ZN7ADXL34511readFromSPIEhiPh+0x3a>
    _buff[i] = SPI.transfer(0x00);
   d8d3c:	2100      	movs	r1, #0
   d8d3e:	4806      	ldr	r0, [pc, #24]	; (d8d58 <_ZN7ADXL34511readFromSPIEhiPh+0x48>)
   d8d40:	f001 f890 	bl	d9e64 <_ZN8SPIClass8transferEh>
   d8d44:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   d8d48:	e7f5      	b.n	d8d36 <_ZN7ADXL34511readFromSPIEhiPh+0x26>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d8d4a:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   d8d4c:	2101      	movs	r1, #1
}
   d8d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   d8d52:	f003 b93c 	b.w	dbfce <digitalWrite>
   d8d56:	bf00      	nop
   d8d58:	2003e5f0 	.word	0x2003e5f0

000d8d5c <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d8d5c:	b410      	push	{r4}
	if(I2C) {
   d8d5e:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   d8d62:	b11c      	cbz	r4, d8d6c <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d8d64:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   d8d68:	f7ff bf5a 	b.w	d8c20 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   d8d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   d8d70:	f7ff bfce 	b.w	d8d10 <_ZN7ADXL34511readFromSPIEhiPh>

000d8d74 <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d8d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d76:	3904      	subs	r1, #4
   d8d78:	290c      	cmp	r1, #12
   d8d7a:	bf98      	it	ls
   d8d7c:	4b0c      	ldrls	r3, [pc, #48]	; (d8db0 <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d8d7e:	f04f 0201 	mov.w	r2, #1
   d8d82:	bf98      	it	ls
   d8d84:	5c5d      	ldrbls	r5, [r3, r1]
   d8d86:	f10d 0307 	add.w	r3, sp, #7
   d8d8a:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   d8d8e:	bf88      	it	hi
   d8d90:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   d8d92:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   d8d94:	f7ff ffe2 	bl	d8d5c <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   d8d98:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d8d9c:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   d8da0:	432a      	orrs	r2, r5
   d8da2:	2131      	movs	r1, #49	; 0x31
   d8da4:	4620      	mov	r0, r4
   d8da6:	f7ff ff91 	bl	d8ccc <_ZN7ADXL3457writeToEhh>
}
   d8daa:	b003      	add	sp, #12
   d8dac:	bd30      	pop	{r4, r5, pc}
   d8dae:	bf00      	nop
   d8db0:	000e6688 	.word	0x000e6688

000d8db4 <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   d8db4:	f381 0208 	usat	r2, #8, r1
   d8db8:	b2d2      	uxtb	r2, r2
   d8dba:	2124      	movs	r1, #36	; 0x24
   d8dbc:	f7ff bf86 	b.w	d8ccc <_ZN7ADXL3457writeToEhh>

000d8dc0 <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   d8dc0:	f381 0208 	usat	r2, #8, r1
   d8dc4:	b2d2      	uxtb	r2, r2
   d8dc6:	2125      	movs	r1, #37	; 0x25
   d8dc8:	f7ff bf80 	b.w	d8ccc <_ZN7ADXL3457writeToEhh>

000d8dcc <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   d8dcc:	f381 0208 	usat	r2, #8, r1
   d8dd0:	b2d2      	uxtb	r2, r2
   d8dd2:	2126      	movs	r1, #38	; 0x26
   d8dd4:	f7ff bf7a 	b.w	d8ccc <_ZN7ADXL3457writeToEhh>

000d8dd8 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d8dd8:	fa41 f202 	asr.w	r2, r1, r2
}
   d8ddc:	f002 0001 	and.w	r0, r2, #1
   d8de0:	4770      	bx	lr

000d8de2 <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   d8de2:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d8de4:	2201      	movs	r2, #1
   d8de6:	f10d 0307 	add.w	r3, sp, #7
   d8dea:	2130      	movs	r1, #48	; 0x30
   d8dec:	f7ff ffb6 	bl	d8d5c <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   d8df0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8df4:	b003      	add	sp, #12
   d8df6:	f85d fb04 	ldr.w	pc, [sp], #4

000d8dfa <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d8dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8dfc:	4616      	mov	r6, r2
   d8dfe:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   d8e00:	2201      	movs	r2, #1
   d8e02:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d8e06:	4604      	mov	r4, r0
   d8e08:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   d8e0a:	f7ff ffa7 	bl	d8d5c <_ZN7ADXL3458readFromEhiPh>
   d8e0e:	2201      	movs	r2, #1
   d8e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d8e14:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   d8e16:	b10f      	cbz	r7, d8e1c <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   d8e18:	4313      	orrs	r3, r2
   d8e1a:	e001      	b.n	d8e20 <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   d8e1c:	ea23 0302 	bic.w	r3, r3, r2
   d8e20:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   d8e24:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d8e28:	4629      	mov	r1, r5
   d8e2a:	4620      	mov	r0, r4
   d8e2c:	f7ff ff4e 	bl	d8ccc <_ZN7ADXL3457writeToEhh>
}
   d8e30:	b003      	add	sp, #12
   d8e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e34 <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d8e34:	460b      	mov	r3, r1
   d8e36:	2206      	movs	r2, #6
   d8e38:	2127      	movs	r1, #39	; 0x27
   d8e3a:	f7ff bfde 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e3e <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d8e3e:	460b      	mov	r3, r1
   d8e40:	2205      	movs	r2, #5
   d8e42:	2127      	movs	r1, #39	; 0x27
   d8e44:	f7ff bfd9 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e48 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d8e48:	460b      	mov	r3, r1
   d8e4a:	2204      	movs	r2, #4
   d8e4c:	2127      	movs	r1, #39	; 0x27
   d8e4e:	f7ff bfd4 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e52 <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d8e52:	b570      	push	{r4, r5, r6, lr}
   d8e54:	4604      	mov	r4, r0
   d8e56:	4616      	mov	r6, r2
   d8e58:	461d      	mov	r5, r3
	setActivityX(stateX);
   d8e5a:	f7ff ffeb 	bl	d8e34 <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   d8e5e:	4631      	mov	r1, r6
   d8e60:	4620      	mov	r0, r4
   d8e62:	f7ff ffec 	bl	d8e3e <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   d8e66:	4629      	mov	r1, r5
   d8e68:	4620      	mov	r0, r4
}
   d8e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   d8e6e:	f7ff bfeb 	b.w	d8e48 <_ZN7ADXL34512setActivityZEb>

000d8e72 <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d8e72:	460b      	mov	r3, r1
   d8e74:	2202      	movs	r2, #2
   d8e76:	2127      	movs	r1, #39	; 0x27
   d8e78:	f7ff bfbf 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e7c <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d8e7c:	460b      	mov	r3, r1
   d8e7e:	2201      	movs	r2, #1
   d8e80:	2127      	movs	r1, #39	; 0x27
   d8e82:	f7ff bfba 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e86 <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d8e86:	460b      	mov	r3, r1
   d8e88:	2200      	movs	r2, #0
   d8e8a:	2127      	movs	r1, #39	; 0x27
   d8e8c:	f7ff bfb5 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8e90 <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   d8e90:	b570      	push	{r4, r5, r6, lr}
   d8e92:	4604      	mov	r4, r0
   d8e94:	4616      	mov	r6, r2
   d8e96:	461d      	mov	r5, r3
	setInactivityX(stateX);
   d8e98:	f7ff ffeb 	bl	d8e72 <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   d8e9c:	4631      	mov	r1, r6
   d8e9e:	4620      	mov	r0, r4
   d8ea0:	f7ff ffec 	bl	d8e7c <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   d8ea4:	4629      	mov	r1, r5
   d8ea6:	4620      	mov	r0, r4
}
   d8ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   d8eac:	f7ff bfeb 	b.w	d8e86 <_ZN7ADXL34514setInactivityZEb>

000d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d8eb0:	4613      	mov	r3, r2
   d8eb2:	460a      	mov	r2, r1
   d8eb4:	212f      	movs	r1, #47	; 0x2f
   d8eb6:	f7ff bfa0 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8eba <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d8eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   d8ebe:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   d8ec0:	4604      	mov	r4, r0
   d8ec2:	4690      	mov	r8, r2
   d8ec4:	461d      	mov	r5, r3
   d8ec6:	9f06      	ldr	r7, [sp, #24]
   d8ec8:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   d8eca:	d101      	bne.n	d8ed0 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d8ecc:	2200      	movs	r2, #0
   d8ece:	e002      	b.n	d8ed6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   d8ed0:	2902      	cmp	r1, #2
   d8ed2:	d103      	bne.n	d8edc <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d8ed4:	2201      	movs	r2, #1
   d8ed6:	2106      	movs	r1, #6
   d8ed8:	f7ff ffea 	bl	d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   d8edc:	f1b8 0f01 	cmp.w	r8, #1
   d8ee0:	d101      	bne.n	d8ee6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   d8ee2:	2200      	movs	r2, #0
   d8ee4:	e003      	b.n	d8eee <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   d8ee6:	f1b8 0f02 	cmp.w	r8, #2
   d8eea:	d104      	bne.n	d8ef6 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   d8eec:	2201      	movs	r2, #1
   d8eee:	2105      	movs	r1, #5
   d8ef0:	4620      	mov	r0, r4
   d8ef2:	f7ff ffdd 	bl	d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   d8ef6:	2d01      	cmp	r5, #1
   d8ef8:	d102      	bne.n	d8f00 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   d8efa:	2200      	movs	r2, #0
   d8efc:	2102      	movs	r1, #2
   d8efe:	e003      	b.n	d8f08 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   d8f00:	2d02      	cmp	r5, #2
   d8f02:	d104      	bne.n	d8f0e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   d8f04:	2201      	movs	r2, #1
   d8f06:	4629      	mov	r1, r5
   d8f08:	4620      	mov	r0, r4
   d8f0a:	f7ff ffd1 	bl	d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   d8f0e:	2f01      	cmp	r7, #1
   d8f10:	d101      	bne.n	d8f16 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d8f12:	2200      	movs	r2, #0
   d8f14:	e002      	b.n	d8f1c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   d8f16:	2f02      	cmp	r7, #2
   d8f18:	d104      	bne.n	d8f24 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8f1a:	2201      	movs	r2, #1
   d8f1c:	2104      	movs	r1, #4
   d8f1e:	4620      	mov	r0, r4
   d8f20:	f7ff ffc6 	bl	d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   d8f24:	2e01      	cmp	r6, #1
   d8f26:	d101      	bne.n	d8f2c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   d8f28:	2200      	movs	r2, #0
   d8f2a:	e002      	b.n	d8f32 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   d8f2c:	2e02      	cmp	r6, #2
   d8f2e:	d106      	bne.n	d8f3e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8f30:	2201      	movs	r2, #1
   d8f32:	4620      	mov	r0, r4
   d8f34:	2103      	movs	r1, #3
}
   d8f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   d8f3a:	f7ff bfb9 	b.w	d8eb0 <_ZN7ADXL34519setInterruptMappingEhb>
   d8f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8f42 <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d8f42:	4613      	mov	r3, r2
   d8f44:	460a      	mov	r2, r1
   d8f46:	212e      	movs	r1, #46	; 0x2e
   d8f48:	f7ff bf57 	b.w	d8dfa <_ZN7ADXL34514setRegisterBitEhib>

000d8f4c <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   d8f4c:	460a      	mov	r2, r1
   d8f4e:	b101      	cbz	r1, d8f52 <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   d8f50:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   d8f52:	2104      	movs	r1, #4
   d8f54:	f7ff bff5 	b.w	d8f42 <_ZN7ADXL34512setInterruptEhb>

000d8f58 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   d8f58:	460a      	mov	r2, r1
   d8f5a:	b101      	cbz	r1, d8f5e <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   d8f5c:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   d8f5e:	2103      	movs	r1, #3
   d8f60:	f7ff bfef 	b.w	d8f42 <_ZN7ADXL34512setInterruptEhb>

000d8f64 <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d8f64:	f000 bb8e 	b.w	d9684 <HAL_Pin_Map>

000d8f68 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d8f68:	b510      	push	{r4, lr}
   d8f6a:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d8f6c:	f003 f8ba 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8f70:	6803      	ldr	r3, [r0, #0]
   d8f72:	4621      	mov	r1, r4
   d8f74:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d8f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d8f7a:	4718      	bx	r3

000d8f7c <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d8f7c:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d8f7e:	f003 f8b1 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8f82:	6803      	ldr	r3, [r0, #0]
   d8f84:	695b      	ldr	r3, [r3, #20]
   d8f86:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d8f88:	b2c0      	uxtb	r0, r0
   d8f8a:	bd08      	pop	{r3, pc}

000d8f8c <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d8f8c:	b538      	push	{r3, r4, r5, lr}
   d8f8e:	4604      	mov	r4, r0
   d8f90:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d8f92:	f003 f8a7 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8f96:	7821      	ldrb	r1, [r4, #0]
   d8f98:	f041 0120 	orr.w	r1, r1, #32
   d8f9c:	f002 fab2 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d8fa0:	4628      	mov	r0, r5
   d8fa2:	f7ff ffe1 	bl	d8f68 <_ZL8wiresendh>
	Wire.endTransmission();
   d8fa6:	f003 f89d 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8faa:	f002 fab2 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d8fae:	f003 f899 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8fb2:	7821      	ldrb	r1, [r4, #0]
   d8fb4:	2201      	movs	r2, #1
   d8fb6:	f041 0120 	orr.w	r1, r1, #32
   d8fba:	f002 fa95 	bl	db4e8 <_ZN7TwoWire11requestFromEii>
	return wirerecv();
}
   d8fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d8fc2:	f7ff bfdb 	b.w	d8f7c <_ZL8wirerecvv>

000d8fc6 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d8fc6:	b570      	push	{r4, r5, r6, lr}
   d8fc8:	4606      	mov	r6, r0
   d8fca:	4614      	mov	r4, r2
   d8fcc:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d8fce:	f003 f889 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d8fd2:	7831      	ldrb	r1, [r6, #0]
   d8fd4:	f041 0120 	orr.w	r1, r1, #32
   d8fd8:	f002 fa94 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d8fdc:	4628      	mov	r0, r5
   d8fde:	f7ff ffc3 	bl	d8f68 <_ZL8wiresendh>
	wiresend(regValue);
   d8fe2:	4620      	mov	r0, r4
   d8fe4:	f7ff ffc0 	bl	d8f68 <_ZL8wiresendh>
	Wire.endTransmission();
   d8fe8:	f003 f87c 	bl	dc0e4 <_Z19__fetch_global_Wirev>
}
   d8fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d8ff0:	f002 ba8f 	b.w	db512 <_ZN7TwoWire15endTransmissionEv>

000d8ff4 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ff8:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8ffc:	2907      	cmp	r1, #7
   d8ffe:	bf98      	it	ls
   d9000:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9002:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9006:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9008:	4631      	mov	r1, r6
   d900a:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d900c:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d900e:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9010:	f7ff ffbc 	bl	d8f8c <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9014:	f1b8 0f00 	cmp.w	r8, #0
   d9018:	d001      	beq.n	d901e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d901a:	4304      	orrs	r4, r0
   d901c:	e001      	b.n	d9022 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d901e:	ea20 0404 	bic.w	r4, r0, r4
   d9022:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d9024:	4631      	mov	r1, r6
   d9026:	4628      	mov	r0, r5
}
   d9028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d902c:	f7ff bfcb 	b.w	d8fc6 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9030 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9030:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d9032:	2907      	cmp	r1, #7
   d9034:	bf28      	it	cs
   d9036:	2107      	movcs	r1, #7
   d9038:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d903a:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d903c:	f003 f852 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   d9040:	f002 fa3c 	bl	db4bc <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d9044:	4620      	mov	r0, r4
   d9046:	22ff      	movs	r2, #255	; 0xff
   d9048:	2100      	movs	r1, #0
   d904a:	f7ff ffbc 	bl	d8fc6 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d904e:	4620      	mov	r0, r4
   d9050:	22ff      	movs	r2, #255	; 0xff
   d9052:	2101      	movs	r1, #1
}
   d9054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d9058:	f7ff bfb5 	b.w	d8fc6 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d905c <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d905c:	2100      	movs	r1, #0
   d905e:	f7ff bfe7 	b.w	d9030 <_ZN17Adafruit_MCP230175beginEh>

000d9062 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d9062:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d9064:	2301      	movs	r3, #1
   d9066:	fab2 f282 	clz	r2, r2
   d906a:	9300      	str	r3, [sp, #0]
   d906c:	0952      	lsrs	r2, r2, #5
   d906e:	2300      	movs	r3, #0
   d9070:	f7ff ffc0 	bl	d8ff4 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9074:	b003      	add	sp, #12
   d9076:	f85d fb04 	ldr.w	pc, [sp], #4

000d907a <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d907a:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d907e:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9082:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9084:	bf34      	ite	cc
   d9086:	2114      	movcc	r1, #20
   d9088:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d908a:	4605      	mov	r5, r0
   d908c:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d908e:	f7ff ff7d 	bl	d8f8c <_ZN17Adafruit_MCP2301712readRegisterEh>
   d9092:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9094:	40b3      	lsls	r3, r6
   d9096:	b10f      	cbz	r7, d909c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d9098:	4303      	orrs	r3, r0
   d909a:	e001      	b.n	d90a0 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d909c:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d90a0:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d90a2:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d90a4:	4628      	mov	r0, r5
   d90a6:	bf34      	ite	cc
   d90a8:	2112      	movcc	r1, #18
   d90aa:	2113      	movcs	r1, #19
}
   d90ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d90b0:	f7ff bf89 	b.w	d8fc6 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d90b4 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d90b4:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d90b6:	230d      	movs	r3, #13
   d90b8:	9300      	str	r3, [sp, #0]
   d90ba:	230c      	movs	r3, #12
   d90bc:	f7ff ff9a 	bl	d8ff4 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d90c0:	b003      	add	sp, #12
   d90c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d90c6 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d90c6:	f000 badd 	b.w	d9684 <HAL_Pin_Map>

000d90ca <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d90ca:	2200      	movs	r2, #0
   d90cc:	6042      	str	r2, [r0, #4]
   d90ce:	6082      	str	r2, [r0, #8]
   d90d0:	60c2      	str	r2, [r0, #12]
   d90d2:	6102      	str	r2, [r0, #16]
   d90d4:	6142      	str	r2, [r0, #20]
   d90d6:	6182      	str	r2, [r0, #24]
   d90d8:	61c2      	str	r2, [r0, #28]
   d90da:	6202      	str	r2, [r0, #32]
   d90dc:	6242      	str	r2, [r0, #36]	; 0x24
   d90de:	6282      	str	r2, [r0, #40]	; 0x28
   d90e0:	2201      	movs	r2, #1
   d90e2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d90e6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d90ea:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d90ee:	4770      	bx	lr

000d90f0 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d90f0:	b538      	push	{r3, r4, r5, lr}
   d90f2:	4605      	mov	r5, r0
   d90f4:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d90f6:	6800      	ldr	r0, [r0, #0]
   d90f8:	2169      	movs	r1, #105	; 0x69
   d90fa:	f002 fa03 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d90fe:	0a21      	lsrs	r1, r4, #8
   d9100:	6828      	ldr	r0, [r5, #0]
   d9102:	f7ff fa57 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d9106:	b2e1      	uxtb	r1, r4
   d9108:	6828      	ldr	r0, [r5, #0]
   d910a:	f7ff fa53 	bl	d85b4 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d910e:	6828      	ldr	r0, [r5, #0]
   d9110:	f002 f9ff 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
   d9114:	b108      	cbz	r0, d911a <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d9116:	2000      	movs	r0, #0
   d9118:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d911a:	2202      	movs	r2, #2
   d911c:	2169      	movs	r1, #105	; 0x69
   d911e:	6828      	ldr	r0, [r5, #0]
   d9120:	f002 f9df 	bl	db4e2 <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d9124:	6828      	ldr	r0, [r5, #0]
   d9126:	6803      	ldr	r3, [r0, #0]
   d9128:	691b      	ldr	r3, [r3, #16]
   d912a:	4798      	blx	r3
   d912c:	2800      	cmp	r0, #0
   d912e:	d0f2      	beq.n	d9116 <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d9130:	6828      	ldr	r0, [r5, #0]
   d9132:	6803      	ldr	r3, [r0, #0]
   d9134:	695b      	ldr	r3, [r3, #20]
   d9136:	4798      	blx	r3
   d9138:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d913a:	6828      	ldr	r0, [r5, #0]
   d913c:	6803      	ldr	r3, [r0, #0]
   d913e:	695b      	ldr	r3, [r3, #20]
   d9140:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d9142:	0224      	lsls	r4, r4, #8
   d9144:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d9148:	b2c0      	uxtb	r0, r0
   d914a:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d914c:	bd38      	pop	{r3, r4, r5, pc}

000d914e <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d914e:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d9150:	f240 2102 	movw	r1, #514	; 0x202
   d9154:	f7ff ffcc 	bl	d90f0 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d9158:	1e43      	subs	r3, r0, #1
   d915a:	4258      	negs	r0, r3
   d915c:	4158      	adcs	r0, r3
   d915e:	bd08      	pop	{r3, pc}

000d9160 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d9160:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9162:	b08b      	sub	sp, #44	; 0x2c
   d9164:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d9166:	f7ff fff2 	bl	d914e <_ZN5SPS3013dataAvailableEv>
   d916a:	4604      	mov	r4, r0
   d916c:	2800      	cmp	r0, #0
   d916e:	f000 8104 	beq.w	d937a <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9172:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9174:	2169      	movs	r1, #105	; 0x69
   d9176:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9178:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d917a:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d917c:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d917e:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d9180:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d9182:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d9184:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d9186:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d9188:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d918a:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d918c:	f002 f9ba 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d9190:	2103      	movs	r1, #3
   d9192:	6828      	ldr	r0, [r5, #0]
   d9194:	f7ff fa0e 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d9198:	4639      	mov	r1, r7
   d919a:	6828      	ldr	r0, [r5, #0]
   d919c:	f7ff fa0a 	bl	d85b4 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d91a0:	6828      	ldr	r0, [r5, #0]
   d91a2:	f002 f9b6 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
   d91a6:	4606      	mov	r6, r0
   d91a8:	2800      	cmp	r0, #0
   d91aa:	f040 80e5 	bne.w	d9378 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d91ae:	223c      	movs	r2, #60	; 0x3c
   d91b0:	2169      	movs	r1, #105	; 0x69
   d91b2:	6828      	ldr	r0, [r5, #0]
   d91b4:	f002 f995 	bl	db4e2 <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
   d91b8:	6828      	ldr	r0, [r5, #0]
   d91ba:	6803      	ldr	r3, [r0, #0]
   d91bc:	691b      	ldr	r3, [r3, #16]
   d91be:	4798      	blx	r3
   d91c0:	bb18      	cbnz	r0, d920a <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d91c2:	9800      	ldr	r0, [sp, #0]
   d91c4:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d91c6:	9801      	ldr	r0, [sp, #4]
   d91c8:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d91ca:	9802      	ldr	r0, [sp, #8]
   d91cc:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d91ce:	9803      	ldr	r0, [sp, #12]
   d91d0:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d91d2:	9804      	ldr	r0, [sp, #16]
   d91d4:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d91d6:	9805      	ldr	r0, [sp, #20]
   d91d8:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d91da:	9806      	ldr	r0, [sp, #24]
   d91dc:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d91de:	9807      	ldr	r0, [sp, #28]
   d91e0:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d91e2:	9808      	ldr	r0, [sp, #32]
   d91e4:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d91e6:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d91e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   d91ea:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d91ec:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d91f0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d91f4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d91f8:	e0bf      	b.n	d937a <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d91fa:	9b00      	ldr	r3, [sp, #0]
   d91fc:	b2c0      	uxtb	r0, r0
   d91fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9202:	9000      	str	r0, [sp, #0]
   d9204:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d9206:	2e3c      	cmp	r6, #60	; 0x3c
   d9208:	d0db      	beq.n	d91c2 <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d920a:	6828      	ldr	r0, [r5, #0]
   d920c:	6803      	ldr	r3, [r0, #0]
   d920e:	695b      	ldr	r3, [r3, #20]
   d9210:	4798      	blx	r3

      switch (x)
   d9212:	b2f3      	uxtb	r3, r6
   d9214:	2b3a      	cmp	r3, #58	; 0x3a
   d9216:	d8f5      	bhi.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
   d9218:	a201      	add	r2, pc, #4	; (adr r2, d9220 <_ZN5SPS3015readMeasurementEv+0xc0>)
   d921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d921e:	bf00      	nop
   d9220:	000d91fb 	.word	0x000d91fb
   d9224:	000d91fb 	.word	0x000d91fb
   d9228:	000d9205 	.word	0x000d9205
   d922c:	000d91fb 	.word	0x000d91fb
   d9230:	000d91fb 	.word	0x000d91fb
   d9234:	000d9205 	.word	0x000d9205
   d9238:	000d930d 	.word	0x000d930d
   d923c:	000d930d 	.word	0x000d930d
   d9240:	000d9205 	.word	0x000d9205
   d9244:	000d930d 	.word	0x000d930d
   d9248:	000d930d 	.word	0x000d930d
   d924c:	000d9205 	.word	0x000d9205
   d9250:	000d9319 	.word	0x000d9319
   d9254:	000d9319 	.word	0x000d9319
   d9258:	000d9205 	.word	0x000d9205
   d925c:	000d9319 	.word	0x000d9319
   d9260:	000d9319 	.word	0x000d9319
   d9264:	000d9205 	.word	0x000d9205
   d9268:	000d9325 	.word	0x000d9325
   d926c:	000d9325 	.word	0x000d9325
   d9270:	000d9205 	.word	0x000d9205
   d9274:	000d9325 	.word	0x000d9325
   d9278:	000d9325 	.word	0x000d9325
   d927c:	000d9205 	.word	0x000d9205
   d9280:	000d9331 	.word	0x000d9331
   d9284:	000d9331 	.word	0x000d9331
   d9288:	000d9205 	.word	0x000d9205
   d928c:	000d9331 	.word	0x000d9331
   d9290:	000d9331 	.word	0x000d9331
   d9294:	000d9205 	.word	0x000d9205
   d9298:	000d933d 	.word	0x000d933d
   d929c:	000d933d 	.word	0x000d933d
   d92a0:	000d9205 	.word	0x000d9205
   d92a4:	000d933d 	.word	0x000d933d
   d92a8:	000d933d 	.word	0x000d933d
   d92ac:	000d9205 	.word	0x000d9205
   d92b0:	000d9349 	.word	0x000d9349
   d92b4:	000d9349 	.word	0x000d9349
   d92b8:	000d9205 	.word	0x000d9205
   d92bc:	000d9349 	.word	0x000d9349
   d92c0:	000d9349 	.word	0x000d9349
   d92c4:	000d9205 	.word	0x000d9205
   d92c8:	000d9355 	.word	0x000d9355
   d92cc:	000d9355 	.word	0x000d9355
   d92d0:	000d9205 	.word	0x000d9205
   d92d4:	000d9355 	.word	0x000d9355
   d92d8:	000d9355 	.word	0x000d9355
   d92dc:	000d9205 	.word	0x000d9205
   d92e0:	000d9361 	.word	0x000d9361
   d92e4:	000d9361 	.word	0x000d9361
   d92e8:	000d9205 	.word	0x000d9205
   d92ec:	000d9361 	.word	0x000d9361
   d92f0:	000d9361 	.word	0x000d9361
   d92f4:	000d9205 	.word	0x000d9205
   d92f8:	000d936d 	.word	0x000d936d
   d92fc:	000d936d 	.word	0x000d936d
   d9300:	000d9205 	.word	0x000d9205
   d9304:	000d936d 	.word	0x000d936d
   d9308:	000d936d 	.word	0x000d936d
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   d930c:	9b01      	ldr	r3, [sp, #4]
   d930e:	b2c0      	uxtb	r0, r0
   d9310:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9314:	9001      	str	r0, [sp, #4]
   d9316:	e775      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   d9318:	9b02      	ldr	r3, [sp, #8]
   d931a:	b2c0      	uxtb	r0, r0
   d931c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9320:	9002      	str	r0, [sp, #8]
   d9322:	e76f      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   d9324:	9b03      	ldr	r3, [sp, #12]
   d9326:	b2c0      	uxtb	r0, r0
   d9328:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d932c:	9003      	str	r0, [sp, #12]
   d932e:	e769      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   d9330:	9b04      	ldr	r3, [sp, #16]
   d9332:	b2c0      	uxtb	r0, r0
   d9334:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9338:	9004      	str	r0, [sp, #16]
   d933a:	e763      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   d933c:	9b05      	ldr	r3, [sp, #20]
   d933e:	b2c0      	uxtb	r0, r0
   d9340:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9344:	9005      	str	r0, [sp, #20]
   d9346:	e75d      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   d9348:	9b06      	ldr	r3, [sp, #24]
   d934a:	b2c0      	uxtb	r0, r0
   d934c:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   d9350:	9306      	str	r3, [sp, #24]
   d9352:	e757      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   d9354:	b2c3      	uxtb	r3, r0
   d9356:	9807      	ldr	r0, [sp, #28]
   d9358:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d935c:	9307      	str	r3, [sp, #28]
   d935e:	e751      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   d9360:	b2c3      	uxtb	r3, r0
   d9362:	9808      	ldr	r0, [sp, #32]
   d9364:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9368:	9308      	str	r3, [sp, #32]
   d936a:	e74b      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   d936c:	b2c3      	uxtb	r3, r0
   d936e:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9370:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9374:	9309      	str	r3, [sp, #36]	; 0x24
   d9376:	e745      	b.n	d9204 <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   d9378:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   d937a:	4620      	mov	r0, r4
   d937c:	b00b      	add	sp, #44	; 0x2c
   d937e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9380 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d9380:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   d9382:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d9386:	4604      	mov	r4, r0
   d9388:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   d938a:	b10b      	cbz	r3, d9390 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   d938c:	f7ff fee8 	bl	d9160 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   d9390:	2301      	movs	r3, #1
   d9392:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   d9396:	6863      	ldr	r3, [r4, #4]
   d9398:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   d939a:	68a3      	ldr	r3, [r4, #8]
   d939c:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   d939e:	68e3      	ldr	r3, [r4, #12]
   d93a0:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   d93a2:	6923      	ldr	r3, [r4, #16]
   d93a4:	60eb      	str	r3, [r5, #12]
}
   d93a6:	bd38      	pop	{r3, r4, r5, pc}

000d93a8 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   d93a8:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   d93aa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   d93ae:	4604      	mov	r4, r0
   d93b0:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   d93b2:	b10b      	cbz	r3, d93b8 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   d93b4:	f7ff fed4 	bl	d9160 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   d93b8:	2301      	movs	r3, #1
   d93ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   d93be:	6963      	ldr	r3, [r4, #20]
   d93c0:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   d93c2:	69a3      	ldr	r3, [r4, #24]
   d93c4:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   d93c6:	69e3      	ldr	r3, [r4, #28]
   d93c8:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   d93ca:	6a23      	ldr	r3, [r4, #32]
   d93cc:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   d93ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d93d0:	612b      	str	r3, [r5, #16]
}
   d93d2:	bd38      	pop	{r3, r4, r5, pc}

000d93d4 <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d93d4:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   d93d6:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d93d8:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   d93da:	1a63      	subs	r3, r4, r1
   d93dc:	b2db      	uxtb	r3, r3
   d93de:	429a      	cmp	r2, r3
   d93e0:	d911      	bls.n	d9406 <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   d93e2:	f814 3b01 	ldrb.w	r3, [r4], #1
   d93e6:	4058      	eors	r0, r3
   d93e8:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   d93ea:	f010 0f80 	tst.w	r0, #128	; 0x80
   d93ee:	f103 33ff 	add.w	r3, r3, #4294967295
   d93f2:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   d93f6:	bf18      	it	ne
   d93f8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d93fc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   d9400:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d9402:	d1f2      	bne.n	d93ea <_ZN5SPS3011computeCRC8EPhh+0x16>
   d9404:	e7e9      	b.n	d93da <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   d9406:	bd10      	pop	{r4, pc}

000d9408 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d940c:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   d940e:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9410:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   d9412:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9416:	a901      	add	r1, sp, #4
   d9418:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d941a:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   d941c:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9420:	f7ff ffd8 	bl	d93d4 <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9424:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9426:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9428:	6820      	ldr	r0, [r4, #0]
   d942a:	f002 f86b 	bl	db504 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   d942e:	0a39      	lsrs	r1, r7, #8
   d9430:	6820      	ldr	r0, [r4, #0]
   d9432:	f7ff f8bf 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   d9436:	b2f9      	uxtb	r1, r7
   d9438:	6820      	ldr	r0, [r4, #0]
   d943a:	f7ff f8bb 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   d943e:	4631      	mov	r1, r6
   d9440:	6820      	ldr	r0, [r4, #0]
   d9442:	f7ff f8b7 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   d9446:	b2e9      	uxtb	r1, r5
   d9448:	6820      	ldr	r0, [r4, #0]
   d944a:	f7ff f8b3 	bl	d85b4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   d944e:	6820      	ldr	r0, [r4, #0]
   d9450:	6803      	ldr	r3, [r0, #0]
   d9452:	4641      	mov	r1, r8
   d9454:	689b      	ldr	r3, [r3, #8]
   d9456:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d9458:	6820      	ldr	r0, [r4, #0]
   d945a:	f002 f85a 	bl	db512 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   d945e:	fab0 f080 	clz	r0, r0
   d9462:	0940      	lsrs	r0, r0, #5
   d9464:	b002      	add	sp, #8
   d9466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d946a <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   d946a:	f44f 7240 	mov.w	r2, #768	; 0x300
   d946e:	2110      	movs	r1, #16
   d9470:	f7ff bfca 	b.w	d9408 <_ZN5SPS3011sendCommandEtt>

000d9474 <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   d9474:	b510      	push	{r4, lr}
   d9476:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d9478:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   d947a:	4608      	mov	r0, r1
   d947c:	f002 f81e 	bl	db4bc <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d9480:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   d9482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d9486:	f7ff bff0 	b.w	d946a <_ZN5SPS3014beginMeasuringEv>

000d948a <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   d948a:	f000 b8fb 	b.w	d9684 <HAL_Pin_Map>

000d948e <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d948e:	f04f 33ff 	mov.w	r3, #4294967295
   d9492:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d9496:	4770      	bx	lr

000d9498 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d9498:	b570      	push	{r4, r5, r6, lr}
   d949a:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d949c:	f000 f8c2 	bl	d9624 <_Z11BlynkMillisv>
   d94a0:	2400      	movs	r4, #0
   d94a2:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d94a4:	1928      	adds	r0, r5, r4
   d94a6:	2224      	movs	r2, #36	; 0x24
   d94a8:	2100      	movs	r1, #0
   d94aa:	f009 f8e6 	bl	e267a <memset>
        timer[i].prev_millis = current_millis;
   d94ae:	512e      	str	r6, [r5, r4]
   d94b0:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   d94b2:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   d94b6:	d1f5      	bne.n	d94a4 <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   d94b8:	2300      	movs	r3, #0
   d94ba:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   d94be:	bd70      	pop	{r4, r5, r6, pc}

000d94c0 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d94c0:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d94c4:	2b0f      	cmp	r3, #15
   d94c6:	dc08      	bgt.n	d94da <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   d94c8:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   d94ca:	2224      	movs	r2, #36	; 0x24
   d94cc:	fb02 0103 	mla	r1, r2, r3, r0
   d94d0:	6849      	ldr	r1, [r1, #4]
   d94d2:	b129      	cbz	r1, d94e0 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d94d4:	3301      	adds	r3, #1
   d94d6:	2b10      	cmp	r3, #16
   d94d8:	d1f8      	bne.n	d94cc <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   d94da:	f04f 30ff 	mov.w	r0, #4294967295
   d94de:	4770      	bx	lr
   d94e0:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   d94e2:	4770      	bx	lr

000d94e4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d94e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d94e8:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d94ea:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d94ee:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d94f0:	4605      	mov	r5, r0
   d94f2:	4689      	mov	r9, r1
   d94f4:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   d94f6:	da01      	bge.n	d94fc <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d94f8:	f7ff ffce 	bl	d9498 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d94fc:	4628      	mov	r0, r5
   d94fe:	f7ff ffdf 	bl	d94c0 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d9502:	1e04      	subs	r4, r0, #0
   d9504:	db1a      	blt.n	d953c <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   d9506:	b1cf      	cbz	r7, d953c <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   d9508:	2624      	movs	r6, #36	; 0x24
   d950a:	4366      	muls	r6, r4
   d950c:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d950e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d9512:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   d9514:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d9516:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   d9518:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   d951a:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   d951e:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   d9520:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   d9524:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9526:	f000 f87d 	bl	d9624 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   d952a:	51a8      	str	r0, [r5, r6]

    numTimers++;
   d952c:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   d9530:	3301      	adds	r3, #1
   d9532:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   d9536:	4620      	mov	r0, r4
   d9538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   d953c:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   d9540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9544 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d9544:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d9546:	2300      	movs	r3, #0
   d9548:	9301      	str	r3, [sp, #4]
   d954a:	9300      	str	r3, [sp, #0]
   d954c:	f7ff ffca 	bl	d94e4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d9550:	b003      	add	sp, #12
   d9552:	f85d fb04 	ldr.w	pc, [sp], #4

000d9556 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d9556:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   d9558:	b538      	push	{r3, r4, r5, lr}
   d955a:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d955c:	d813      	bhi.n	d9586 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d955e:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d9562:	b183      	cbz	r3, d9586 <_ZN10BlynkTimer11deleteTimerEj+0x30>
   d9564:	2224      	movs	r2, #36	; 0x24
   d9566:	fb02 f501 	mul.w	r5, r2, r1
   d956a:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d956c:	6843      	ldr	r3, [r0, #4]
   d956e:	b153      	cbz	r3, d9586 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d9570:	2100      	movs	r1, #0
   d9572:	f009 f882 	bl	e267a <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9576:	f000 f855 	bl	d9624 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   d957a:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d957c:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d9580:	3b01      	subs	r3, #1
   d9582:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   d9586:	bd38      	pop	{r3, r4, r5, pc}

000d9588 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   d9588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d958c:	4605      	mov	r5, r0
   d958e:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9592:	f000 f847 	bl	d9624 <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9596:	2601      	movs	r6, #1
   d9598:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d959a:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d959e:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d95a2:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d95a4:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d95a8:	b1e2      	cbz	r2, d95e4 <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d95aa:	f853 8c04 	ldr.w	r8, [r3, #-4]
   d95ae:	68dc      	ldr	r4, [r3, #12]
   d95b0:	ebc8 0200 	rsb	r2, r8, r0
   d95b4:	42a2      	cmp	r2, r4
   d95b6:	d315      	bcc.n	d95e4 <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d95b8:	fbb2 f1f4 	udiv	r1, r2, r4
   d95bc:	fb04 8201 	mla	r2, r4, r1, r8
   d95c0:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   d95c4:	7e1a      	ldrb	r2, [r3, #24]
   d95c6:	b16a      	cbz	r2, d95e4 <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d95c8:	6919      	ldr	r1, [r3, #16]
   d95ca:	b909      	cbnz	r1, d95d0 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d95cc:	61de      	str	r6, [r3, #28]
   d95ce:	e009      	b.n	d95e4 <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d95d0:	695a      	ldr	r2, [r3, #20]
   d95d2:	4291      	cmp	r1, r2
   d95d4:	d906      	bls.n	d95e4 <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   d95d6:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d95d8:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d95da:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   d95dc:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d95de:	bf98      	it	ls
   d95e0:	f8c3 c01c 	strls.w	ip, [r3, #28]
   d95e4:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   d95e6:	42bb      	cmp	r3, r7
   d95e8:	d1db      	bne.n	d95a2 <_ZN10BlynkTimer3runEv+0x1a>
   d95ea:	462c      	mov	r4, r5
   d95ec:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d95ee:	6a23      	ldr	r3, [r4, #32]
   d95f0:	b16b      	cbz	r3, d960e <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   d95f2:	7b22      	ldrb	r2, [r4, #12]
   d95f4:	6863      	ldr	r3, [r4, #4]
   d95f6:	b112      	cbz	r2, d95fe <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d95f8:	68a0      	ldr	r0, [r4, #8]
   d95fa:	4798      	blx	r3
   d95fc:	e000      	b.n	d9600 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   d95fe:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d9600:	6a23      	ldr	r3, [r4, #32]
   d9602:	2b02      	cmp	r3, #2
   d9604:	d103      	bne.n	d960e <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   d9606:	4631      	mov	r1, r6
   d9608:	4628      	mov	r0, r5
   d960a:	f7ff ffa4 	bl	d9556 <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   d960e:	3601      	adds	r6, #1
   d9610:	2e10      	cmp	r6, #16
   d9612:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d9616:	d1ea      	bne.n	d95ee <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   d9618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d961c <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d961c:	f000 b832 	b.w	d9684 <HAL_Pin_Map>

000d9620 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d9620:	f001 b986 	b.w	da930 <delay>

000d9624 <_Z11BlynkMillisv>:
   d9624:	f000 b8ae 	b.w	d9784 <HAL_Timer_Get_Milli_Seconds>

000d9628 <_Z12BlynkFreeRamv>:

#ifdef _BLYNK_USE_DEFAULT_FREE_RAM
    size_t BlynkFreeRam()
    {
        return 0;
    }
   d9628:	2000      	movs	r0, #0
   d962a:	4770      	bx	lr

000d962c <_GLOBAL__sub_I__Z10BlynkResetv>:
   d962c:	f000 b82a 	b.w	d9684 <HAL_Pin_Map>

000d9630 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d9630:	4770      	bx	lr

000d9632 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d9632:	4770      	bx	lr

000d9634 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d9634:	4770      	bx	lr
	...

000d9638 <GetReadHandler>:
    BlynkWidgetWrite124,  BlynkWidgetWrite125,  BlynkWidgetWrite126,  BlynkWidgetWrite127,
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
   d9638:	287f      	cmp	r0, #127	; 0x7f
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
   d963a:	bf9a      	itte	ls
   d963c:	4b02      	ldrls	r3, [pc, #8]	; (d9648 <GetReadHandler+0x10>)
   d963e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d9642:	2000      	movhi	r0, #0
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
   d9644:	4770      	bx	lr
   d9646:	bf00      	nop
   d9648:	000e6898 	.word	0x000e6898

000d964c <GetWriteHandler>:
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
   d964c:	287f      	cmp	r0, #127	; 0x7f
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
   d964e:	bf9a      	itte	ls
   d9650:	4b02      	ldrls	r3, [pc, #8]	; (d965c <GetWriteHandler+0x10>)
   d9652:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
#endif
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d9656:	2000      	movhi	r0, #0
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
   d9658:	4770      	bx	lr
   d965a:	bf00      	nop
   d965c:	000e6698 	.word	0x000e6698

000d9660 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d9660:	f000 b810 	b.w	d9684 <HAL_Pin_Map>

000d9664 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d9664:	b508      	push	{r3, lr}
   d9666:	4b02      	ldr	r3, [pc, #8]	; (d9670 <netdb_freeaddrinfo+0xc>)
   d9668:	681b      	ldr	r3, [r3, #0]
   d966a:	689b      	ldr	r3, [r3, #8]
   d966c:	9301      	str	r3, [sp, #4]
   d966e:	bd08      	pop	{r3, pc}
   d9670:	00030268 	.word	0x00030268

000d9674 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d9674:	b508      	push	{r3, lr}
   d9676:	4b02      	ldr	r3, [pc, #8]	; (d9680 <netdb_getaddrinfo+0xc>)
   d9678:	681b      	ldr	r3, [r3, #0]
   d967a:	68db      	ldr	r3, [r3, #12]
   d967c:	9301      	str	r3, [sp, #4]
   d967e:	bd08      	pop	{r3, pc}
   d9680:	00030268 	.word	0x00030268

000d9684 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d9684:	b508      	push	{r3, lr}
   d9686:	4b02      	ldr	r3, [pc, #8]	; (d9690 <HAL_Pin_Map+0xc>)
   d9688:	681b      	ldr	r3, [r3, #0]
   d968a:	681b      	ldr	r3, [r3, #0]
   d968c:	9301      	str	r3, [sp, #4]
   d968e:	bd08      	pop	{r3, pc}
   d9690:	0003022c 	.word	0x0003022c

000d9694 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d9694:	b508      	push	{r3, lr}
   d9696:	4b02      	ldr	r3, [pc, #8]	; (d96a0 <HAL_Validate_Pin_Function+0xc>)
   d9698:	681b      	ldr	r3, [r3, #0]
   d969a:	685b      	ldr	r3, [r3, #4]
   d969c:	9301      	str	r3, [sp, #4]
   d969e:	bd08      	pop	{r3, pc}
   d96a0:	0003022c 	.word	0x0003022c

000d96a4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d96a4:	b508      	push	{r3, lr}
   d96a6:	4b02      	ldr	r3, [pc, #8]	; (d96b0 <HAL_Pin_Mode+0xc>)
   d96a8:	681b      	ldr	r3, [r3, #0]
   d96aa:	689b      	ldr	r3, [r3, #8]
   d96ac:	9301      	str	r3, [sp, #4]
   d96ae:	bd08      	pop	{r3, pc}
   d96b0:	0003022c 	.word	0x0003022c

000d96b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d96b4:	b508      	push	{r3, lr}
   d96b6:	4b02      	ldr	r3, [pc, #8]	; (d96c0 <HAL_Get_Pin_Mode+0xc>)
   d96b8:	681b      	ldr	r3, [r3, #0]
   d96ba:	68db      	ldr	r3, [r3, #12]
   d96bc:	9301      	str	r3, [sp, #4]
   d96be:	bd08      	pop	{r3, pc}
   d96c0:	0003022c 	.word	0x0003022c

000d96c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d96c4:	b508      	push	{r3, lr}
   d96c6:	4b02      	ldr	r3, [pc, #8]	; (d96d0 <HAL_GPIO_Write+0xc>)
   d96c8:	681b      	ldr	r3, [r3, #0]
   d96ca:	691b      	ldr	r3, [r3, #16]
   d96cc:	9301      	str	r3, [sp, #4]
   d96ce:	bd08      	pop	{r3, pc}
   d96d0:	0003022c 	.word	0x0003022c

000d96d4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d96d4:	b508      	push	{r3, lr}
   d96d6:	4b02      	ldr	r3, [pc, #8]	; (d96e0 <HAL_GPIO_Read+0xc>)
   d96d8:	681b      	ldr	r3, [r3, #0]
   d96da:	695b      	ldr	r3, [r3, #20]
   d96dc:	9301      	str	r3, [sp, #4]
   d96de:	bd08      	pop	{r3, pc}
   d96e0:	0003022c 	.word	0x0003022c

000d96e4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d96e4:	b508      	push	{r3, lr}
   d96e6:	4b02      	ldr	r3, [pc, #8]	; (d96f0 <HAL_Interrupts_Attach+0xc>)
   d96e8:	681b      	ldr	r3, [r3, #0]
   d96ea:	699b      	ldr	r3, [r3, #24]
   d96ec:	9301      	str	r3, [sp, #4]
   d96ee:	bd08      	pop	{r3, pc}
   d96f0:	0003022c 	.word	0x0003022c

000d96f4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d96f4:	b508      	push	{r3, lr}
   d96f6:	4b02      	ldr	r3, [pc, #8]	; (d9700 <HAL_Interrupts_Detach+0xc>)
   d96f8:	681b      	ldr	r3, [r3, #0]
   d96fa:	69db      	ldr	r3, [r3, #28]
   d96fc:	9301      	str	r3, [sp, #4]
   d96fe:	bd08      	pop	{r3, pc}
   d9700:	0003022c 	.word	0x0003022c

000d9704 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d9704:	b508      	push	{r3, lr}
   d9706:	4b02      	ldr	r3, [pc, #8]	; (d9710 <HAL_DAC_Write+0xc>)
   d9708:	681b      	ldr	r3, [r3, #0]
   d970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d970c:	9301      	str	r3, [sp, #4]
   d970e:	bd08      	pop	{r3, pc}
   d9710:	0003022c 	.word	0x0003022c

000d9714 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d9714:	b508      	push	{r3, lr}
   d9716:	4b02      	ldr	r3, [pc, #8]	; (d9720 <HAL_ADC_Read+0xc>)
   d9718:	681b      	ldr	r3, [r3, #0]
   d971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d971c:	9301      	str	r3, [sp, #4]
   d971e:	bd08      	pop	{r3, pc}
   d9720:	0003022c 	.word	0x0003022c

000d9724 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d9724:	b508      	push	{r3, lr}
   d9726:	4b02      	ldr	r3, [pc, #8]	; (d9730 <HAL_PWM_Write_Ext+0xc>)
   d9728:	681b      	ldr	r3, [r3, #0]
   d972a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d972c:	9301      	str	r3, [sp, #4]
   d972e:	bd08      	pop	{r3, pc}
   d9730:	0003022c 	.word	0x0003022c

000d9734 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d9734:	b508      	push	{r3, lr}
   d9736:	4b02      	ldr	r3, [pc, #8]	; (d9740 <HAL_SPI_Send_Receive_Data+0xc>)
   d9738:	681b      	ldr	r3, [r3, #0]
   d973a:	695b      	ldr	r3, [r3, #20]
   d973c:	9301      	str	r3, [sp, #4]
   d973e:	bd08      	pop	{r3, pc}
   d9740:	00030230 	.word	0x00030230

000d9744 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d9744:	b508      	push	{r3, lr}
   d9746:	4b02      	ldr	r3, [pc, #8]	; (d9750 <HAL_SPI_Init+0xc>)
   d9748:	681b      	ldr	r3, [r3, #0]
   d974a:	69db      	ldr	r3, [r3, #28]
   d974c:	9301      	str	r3, [sp, #4]
   d974e:	bd08      	pop	{r3, pc}
   d9750:	00030230 	.word	0x00030230

000d9754 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d9754:	b508      	push	{r3, lr}
   d9756:	4b02      	ldr	r3, [pc, #8]	; (d9760 <HAL_SPI_Is_Enabled+0xc>)
   d9758:	681b      	ldr	r3, [r3, #0]
   d975a:	6a1b      	ldr	r3, [r3, #32]
   d975c:	9301      	str	r3, [sp, #4]
   d975e:	bd08      	pop	{r3, pc}
   d9760:	00030230 	.word	0x00030230

000d9764 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d9764:	b508      	push	{r3, lr}
   d9766:	4b02      	ldr	r3, [pc, #8]	; (d9770 <if_index_to_name+0xc>)
   d9768:	681b      	ldr	r3, [r3, #0]
   d976a:	695b      	ldr	r3, [r3, #20]
   d976c:	9301      	str	r3, [sp, #4]
   d976e:	bd08      	pop	{r3, pc}
   d9770:	0003026c 	.word	0x0003026c

000d9774 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d9774:	b508      	push	{r3, lr}
   d9776:	4b02      	ldr	r3, [pc, #8]	; (d9780 <HAL_RNG_GetRandomNumber+0xc>)
   d9778:	681b      	ldr	r3, [r3, #0]
   d977a:	685b      	ldr	r3, [r3, #4]
   d977c:	9301      	str	r3, [sp, #4]
   d977e:	bd08      	pop	{r3, pc}
   d9780:	00030218 	.word	0x00030218

000d9784 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9784:	b508      	push	{r3, lr}
   d9786:	4b02      	ldr	r3, [pc, #8]	; (d9790 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9788:	681b      	ldr	r3, [r3, #0]
   d978a:	695b      	ldr	r3, [r3, #20]
   d978c:	9301      	str	r3, [sp, #4]
   d978e:	bd08      	pop	{r3, pc}
   d9790:	00030218 	.word	0x00030218

000d9794 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d9794:	b508      	push	{r3, lr}
   d9796:	4b02      	ldr	r3, [pc, #8]	; (d97a0 <HAL_RTC_Get_UnixTime+0xc>)
   d9798:	681b      	ldr	r3, [r3, #0]
   d979a:	69db      	ldr	r3, [r3, #28]
   d979c:	9301      	str	r3, [sp, #4]
   d979e:	bd08      	pop	{r3, pc}
   d97a0:	00030218 	.word	0x00030218

000d97a4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d97a4:	b508      	push	{r3, lr}
   d97a6:	4b02      	ldr	r3, [pc, #8]	; (d97b0 <HAL_RTC_Time_Is_Valid+0xc>)
   d97a8:	681b      	ldr	r3, [r3, #0]
   d97aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d97ac:	9301      	str	r3, [sp, #4]
   d97ae:	bd08      	pop	{r3, pc}
   d97b0:	00030218 	.word	0x00030218

000d97b4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d97b4:	b508      	push	{r3, lr}
   d97b6:	4b02      	ldr	r3, [pc, #8]	; (d97c0 <hal_timer_millis+0xc>)
   d97b8:	681b      	ldr	r3, [r3, #0]
   d97ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d97bc:	9301      	str	r3, [sp, #4]
   d97be:	bd08      	pop	{r3, pc}
   d97c0:	00030218 	.word	0x00030218

000d97c4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d97c4:	b508      	push	{r3, lr}
   d97c6:	4b02      	ldr	r3, [pc, #8]	; (d97d0 <HAL_Core_System_Reset_Ex+0xc>)
   d97c8:	681b      	ldr	r3, [r3, #0]
   d97ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d97cc:	9301      	str	r3, [sp, #4]
   d97ce:	bd08      	pop	{r3, pc}
   d97d0:	00030234 	.word	0x00030234

000d97d4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d97d4:	b508      	push	{r3, lr}
   d97d6:	4b02      	ldr	r3, [pc, #8]	; (d97e0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d97d8:	681b      	ldr	r3, [r3, #0]
   d97da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d97dc:	9301      	str	r3, [sp, #4]
   d97de:	bd08      	pop	{r3, pc}
   d97e0:	00030234 	.word	0x00030234

000d97e4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d97e4:	b508      	push	{r3, lr}
   d97e6:	4b02      	ldr	r3, [pc, #8]	; (d97f0 <os_thread_is_current+0xc>)
   d97e8:	681b      	ldr	r3, [r3, #0]
   d97ea:	689b      	ldr	r3, [r3, #8]
   d97ec:	9301      	str	r3, [sp, #4]
   d97ee:	bd08      	pop	{r3, pc}
   d97f0:	00030248 	.word	0x00030248

000d97f4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d97f4:	b508      	push	{r3, lr}
   d97f6:	4b02      	ldr	r3, [pc, #8]	; (d9800 <os_thread_join+0xc>)
   d97f8:	681b      	ldr	r3, [r3, #0]
   d97fa:	691b      	ldr	r3, [r3, #16]
   d97fc:	9301      	str	r3, [sp, #4]
   d97fe:	bd08      	pop	{r3, pc}
   d9800:	00030248 	.word	0x00030248

000d9804 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d9804:	b508      	push	{r3, lr}
   d9806:	4b02      	ldr	r3, [pc, #8]	; (d9810 <os_thread_cleanup+0xc>)
   d9808:	681b      	ldr	r3, [r3, #0]
   d980a:	695b      	ldr	r3, [r3, #20]
   d980c:	9301      	str	r3, [sp, #4]
   d980e:	bd08      	pop	{r3, pc}
   d9810:	00030248 	.word	0x00030248

000d9814 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d9814:	b508      	push	{r3, lr}
   d9816:	4b02      	ldr	r3, [pc, #8]	; (d9820 <os_mutex_create+0xc>)
   d9818:	681b      	ldr	r3, [r3, #0]
   d981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d981c:	9301      	str	r3, [sp, #4]
   d981e:	bd08      	pop	{r3, pc}
   d9820:	00030248 	.word	0x00030248

000d9824 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d9824:	b508      	push	{r3, lr}
   d9826:	4b02      	ldr	r3, [pc, #8]	; (d9830 <os_mutex_recursive_create+0xc>)
   d9828:	681b      	ldr	r3, [r3, #0]
   d982a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d982c:	9301      	str	r3, [sp, #4]
   d982e:	bd08      	pop	{r3, pc}
   d9830:	00030248 	.word	0x00030248

000d9834 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d9834:	b508      	push	{r3, lr}
   d9836:	4b02      	ldr	r3, [pc, #8]	; (d9840 <inet_inet_ntop+0xc>)
   d9838:	681b      	ldr	r3, [r3, #0]
   d983a:	695b      	ldr	r3, [r3, #20]
   d983c:	9301      	str	r3, [sp, #4]
   d983e:	bd08      	pop	{r3, pc}
   d9840:	00030264 	.word	0x00030264

000d9844 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d9844:	b508      	push	{r3, lr}
   d9846:	4b02      	ldr	r3, [pc, #8]	; (d9850 <inet_htonl+0xc>)
   d9848:	681b      	ldr	r3, [r3, #0]
   d984a:	6a1b      	ldr	r3, [r3, #32]
   d984c:	9301      	str	r3, [sp, #4]
   d984e:	bd08      	pop	{r3, pc}
   d9850:	00030264 	.word	0x00030264

000d9854 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d9854:	b508      	push	{r3, lr}
   d9856:	4b02      	ldr	r3, [pc, #8]	; (d9860 <inet_htons+0xc>)
   d9858:	681b      	ldr	r3, [r3, #0]
   d985a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d985c:	9301      	str	r3, [sp, #4]
   d985e:	bd08      	pop	{r3, pc}
   d9860:	00030264 	.word	0x00030264

000d9864 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d9864:	b508      	push	{r3, lr}
   d9866:	4b02      	ldr	r3, [pc, #8]	; (d9870 <HAL_USART_Init+0xc>)
   d9868:	681b      	ldr	r3, [r3, #0]
   d986a:	681b      	ldr	r3, [r3, #0]
   d986c:	9301      	str	r3, [sp, #4]
   d986e:	bd08      	pop	{r3, pc}
   d9870:	0003023c 	.word	0x0003023c

000d9874 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d9874:	b508      	push	{r3, lr}
   d9876:	4b02      	ldr	r3, [pc, #8]	; (d9880 <HAL_USART_Write_Data+0xc>)
   d9878:	681b      	ldr	r3, [r3, #0]
   d987a:	68db      	ldr	r3, [r3, #12]
   d987c:	9301      	str	r3, [sp, #4]
   d987e:	bd08      	pop	{r3, pc}
   d9880:	0003023c 	.word	0x0003023c

000d9884 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d9884:	b508      	push	{r3, lr}
   d9886:	4b02      	ldr	r3, [pc, #8]	; (d9890 <HAL_USART_Available_Data+0xc>)
   d9888:	681b      	ldr	r3, [r3, #0]
   d988a:	691b      	ldr	r3, [r3, #16]
   d988c:	9301      	str	r3, [sp, #4]
   d988e:	bd08      	pop	{r3, pc}
   d9890:	0003023c 	.word	0x0003023c

000d9894 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d9894:	b508      	push	{r3, lr}
   d9896:	4b02      	ldr	r3, [pc, #8]	; (d98a0 <HAL_USART_Read_Data+0xc>)
   d9898:	681b      	ldr	r3, [r3, #0]
   d989a:	695b      	ldr	r3, [r3, #20]
   d989c:	9301      	str	r3, [sp, #4]
   d989e:	bd08      	pop	{r3, pc}
   d98a0:	0003023c 	.word	0x0003023c

000d98a4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d98a4:	b508      	push	{r3, lr}
   d98a6:	4b02      	ldr	r3, [pc, #8]	; (d98b0 <HAL_USART_Peek_Data+0xc>)
   d98a8:	681b      	ldr	r3, [r3, #0]
   d98aa:	699b      	ldr	r3, [r3, #24]
   d98ac:	9301      	str	r3, [sp, #4]
   d98ae:	bd08      	pop	{r3, pc}
   d98b0:	0003023c 	.word	0x0003023c

000d98b4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d98b4:	b508      	push	{r3, lr}
   d98b6:	4b02      	ldr	r3, [pc, #8]	; (d98c0 <HAL_USART_Flush_Data+0xc>)
   d98b8:	681b      	ldr	r3, [r3, #0]
   d98ba:	69db      	ldr	r3, [r3, #28]
   d98bc:	9301      	str	r3, [sp, #4]
   d98be:	bd08      	pop	{r3, pc}
   d98c0:	0003023c 	.word	0x0003023c

000d98c4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d98c4:	b508      	push	{r3, lr}
   d98c6:	4b02      	ldr	r3, [pc, #8]	; (d98d0 <HAL_USART_Is_Enabled+0xc>)
   d98c8:	681b      	ldr	r3, [r3, #0]
   d98ca:	6a1b      	ldr	r3, [r3, #32]
   d98cc:	9301      	str	r3, [sp, #4]
   d98ce:	bd08      	pop	{r3, pc}
   d98d0:	0003023c 	.word	0x0003023c

000d98d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d98d4:	b508      	push	{r3, lr}
   d98d6:	4b02      	ldr	r3, [pc, #8]	; (d98e0 <HAL_USART_Available_Data_For_Write+0xc>)
   d98d8:	681b      	ldr	r3, [r3, #0]
   d98da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d98dc:	9301      	str	r3, [sp, #4]
   d98de:	bd08      	pop	{r3, pc}
   d98e0:	0003023c 	.word	0x0003023c

000d98e4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d98e4:	b508      	push	{r3, lr}
   d98e6:	4b02      	ldr	r3, [pc, #8]	; (d98f0 <HAL_USART_BeginConfig+0xc>)
   d98e8:	681b      	ldr	r3, [r3, #0]
   d98ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d98ec:	9301      	str	r3, [sp, #4]
   d98ee:	bd08      	pop	{r3, pc}
   d98f0:	0003023c 	.word	0x0003023c

000d98f4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d98f4:	b508      	push	{r3, lr}
   d98f6:	4b02      	ldr	r3, [pc, #8]	; (d9900 <HAL_I2C_Set_Speed+0xc>)
   d98f8:	681b      	ldr	r3, [r3, #0]
   d98fa:	681b      	ldr	r3, [r3, #0]
   d98fc:	9301      	str	r3, [sp, #4]
   d98fe:	bd08      	pop	{r3, pc}
   d9900:	00030228 	.word	0x00030228

000d9904 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d9904:	b508      	push	{r3, lr}
   d9906:	4b02      	ldr	r3, [pc, #8]	; (d9910 <HAL_I2C_Begin+0xc>)
   d9908:	681b      	ldr	r3, [r3, #0]
   d990a:	68db      	ldr	r3, [r3, #12]
   d990c:	9301      	str	r3, [sp, #4]
   d990e:	bd08      	pop	{r3, pc}
   d9910:	00030228 	.word	0x00030228

000d9914 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   d9914:	b508      	push	{r3, lr}
   d9916:	4b02      	ldr	r3, [pc, #8]	; (d9920 <HAL_I2C_End+0xc>)
   d9918:	681b      	ldr	r3, [r3, #0]
   d991a:	691b      	ldr	r3, [r3, #16]
   d991c:	9301      	str	r3, [sp, #4]
   d991e:	bd08      	pop	{r3, pc}
   d9920:	00030228 	.word	0x00030228

000d9924 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d9924:	b508      	push	{r3, lr}
   d9926:	4b02      	ldr	r3, [pc, #8]	; (d9930 <HAL_I2C_Request_Data+0xc>)
   d9928:	681b      	ldr	r3, [r3, #0]
   d992a:	695b      	ldr	r3, [r3, #20]
   d992c:	9301      	str	r3, [sp, #4]
   d992e:	bd08      	pop	{r3, pc}
   d9930:	00030228 	.word	0x00030228

000d9934 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d9934:	b508      	push	{r3, lr}
   d9936:	4b02      	ldr	r3, [pc, #8]	; (d9940 <HAL_I2C_Begin_Transmission+0xc>)
   d9938:	681b      	ldr	r3, [r3, #0]
   d993a:	699b      	ldr	r3, [r3, #24]
   d993c:	9301      	str	r3, [sp, #4]
   d993e:	bd08      	pop	{r3, pc}
   d9940:	00030228 	.word	0x00030228

000d9944 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d9944:	b508      	push	{r3, lr}
   d9946:	4b02      	ldr	r3, [pc, #8]	; (d9950 <HAL_I2C_End_Transmission+0xc>)
   d9948:	681b      	ldr	r3, [r3, #0]
   d994a:	69db      	ldr	r3, [r3, #28]
   d994c:	9301      	str	r3, [sp, #4]
   d994e:	bd08      	pop	{r3, pc}
   d9950:	00030228 	.word	0x00030228

000d9954 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d9954:	b508      	push	{r3, lr}
   d9956:	4b02      	ldr	r3, [pc, #8]	; (d9960 <HAL_I2C_Write_Data+0xc>)
   d9958:	681b      	ldr	r3, [r3, #0]
   d995a:	6a1b      	ldr	r3, [r3, #32]
   d995c:	9301      	str	r3, [sp, #4]
   d995e:	bd08      	pop	{r3, pc}
   d9960:	00030228 	.word	0x00030228

000d9964 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d9964:	b508      	push	{r3, lr}
   d9966:	4b02      	ldr	r3, [pc, #8]	; (d9970 <HAL_I2C_Available_Data+0xc>)
   d9968:	681b      	ldr	r3, [r3, #0]
   d996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d996c:	9301      	str	r3, [sp, #4]
   d996e:	bd08      	pop	{r3, pc}
   d9970:	00030228 	.word	0x00030228

000d9974 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d9974:	b508      	push	{r3, lr}
   d9976:	4b02      	ldr	r3, [pc, #8]	; (d9980 <HAL_I2C_Read_Data+0xc>)
   d9978:	681b      	ldr	r3, [r3, #0]
   d997a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d997c:	9301      	str	r3, [sp, #4]
   d997e:	bd08      	pop	{r3, pc}
   d9980:	00030228 	.word	0x00030228

000d9984 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d9984:	b508      	push	{r3, lr}
   d9986:	4b02      	ldr	r3, [pc, #8]	; (d9990 <HAL_I2C_Peek_Data+0xc>)
   d9988:	681b      	ldr	r3, [r3, #0]
   d998a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d998c:	9301      	str	r3, [sp, #4]
   d998e:	bd08      	pop	{r3, pc}
   d9990:	00030228 	.word	0x00030228

000d9994 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d9994:	b508      	push	{r3, lr}
   d9996:	4b02      	ldr	r3, [pc, #8]	; (d99a0 <HAL_I2C_Flush_Data+0xc>)
   d9998:	681b      	ldr	r3, [r3, #0]
   d999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d999c:	9301      	str	r3, [sp, #4]
   d999e:	bd08      	pop	{r3, pc}
   d99a0:	00030228 	.word	0x00030228

000d99a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d99a4:	b508      	push	{r3, lr}
   d99a6:	4b02      	ldr	r3, [pc, #8]	; (d99b0 <HAL_I2C_Is_Enabled+0xc>)
   d99a8:	681b      	ldr	r3, [r3, #0]
   d99aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d99ac:	9301      	str	r3, [sp, #4]
   d99ae:	bd08      	pop	{r3, pc}
   d99b0:	00030228 	.word	0x00030228

000d99b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d99b4:	b508      	push	{r3, lr}
   d99b6:	4b02      	ldr	r3, [pc, #8]	; (d99c0 <HAL_I2C_Init+0xc>)
   d99b8:	681b      	ldr	r3, [r3, #0]
   d99ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d99bc:	9301      	str	r3, [sp, #4]
   d99be:	bd08      	pop	{r3, pc}
   d99c0:	00030228 	.word	0x00030228

000d99c4 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   d99c4:	b508      	push	{r3, lr}
   d99c6:	4b02      	ldr	r3, [pc, #8]	; (d99d0 <HAL_I2C_Reset+0xc>)
   d99c8:	681b      	ldr	r3, [r3, #0]
   d99ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d99cc:	9301      	str	r3, [sp, #4]
   d99ce:	bd08      	pop	{r3, pc}
   d99d0:	00030228 	.word	0x00030228

000d99d4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d99d4:	b508      	push	{r3, lr}
   d99d6:	4b02      	ldr	r3, [pc, #8]	; (d99e0 <HAL_I2C_Acquire+0xc>)
   d99d8:	681b      	ldr	r3, [r3, #0]
   d99da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d99dc:	9301      	str	r3, [sp, #4]
   d99de:	bd08      	pop	{r3, pc}
   d99e0:	00030228 	.word	0x00030228

000d99e4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d99e4:	b508      	push	{r3, lr}
   d99e6:	4b02      	ldr	r3, [pc, #8]	; (d99f0 <HAL_I2C_Release+0xc>)
   d99e8:	681b      	ldr	r3, [r3, #0]
   d99ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d99ec:	9301      	str	r3, [sp, #4]
   d99ee:	bd08      	pop	{r3, pc}
   d99f0:	00030228 	.word	0x00030228

000d99f4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d99f4:	b508      	push	{r3, lr}
   d99f6:	4b02      	ldr	r3, [pc, #8]	; (d9a00 <sock_setsockopt+0xc>)
   d99f8:	681b      	ldr	r3, [r3, #0]
   d99fa:	699b      	ldr	r3, [r3, #24]
   d99fc:	9301      	str	r3, [sp, #4]
   d99fe:	bd08      	pop	{r3, pc}
   d9a00:	00030238 	.word	0x00030238

000d9a04 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d9a04:	b508      	push	{r3, lr}
   d9a06:	4b02      	ldr	r3, [pc, #8]	; (d9a10 <sock_close+0xc>)
   d9a08:	681b      	ldr	r3, [r3, #0]
   d9a0a:	69db      	ldr	r3, [r3, #28]
   d9a0c:	9301      	str	r3, [sp, #4]
   d9a0e:	bd08      	pop	{r3, pc}
   d9a10:	00030238 	.word	0x00030238

000d9a14 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d9a14:	b508      	push	{r3, lr}
   d9a16:	4b02      	ldr	r3, [pc, #8]	; (d9a20 <sock_connect+0xc>)
   d9a18:	681b      	ldr	r3, [r3, #0]
   d9a1a:	6a1b      	ldr	r3, [r3, #32]
   d9a1c:	9301      	str	r3, [sp, #4]
   d9a1e:	bd08      	pop	{r3, pc}
   d9a20:	00030238 	.word	0x00030238

000d9a24 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d9a24:	b508      	push	{r3, lr}
   d9a26:	4b02      	ldr	r3, [pc, #8]	; (d9a30 <sock_recv+0xc>)
   d9a28:	681b      	ldr	r3, [r3, #0]
   d9a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9a2c:	9301      	str	r3, [sp, #4]
   d9a2e:	bd08      	pop	{r3, pc}
   d9a30:	00030238 	.word	0x00030238

000d9a34 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d9a34:	b508      	push	{r3, lr}
   d9a36:	4b02      	ldr	r3, [pc, #8]	; (d9a40 <sock_send+0xc>)
   d9a38:	681b      	ldr	r3, [r3, #0]
   d9a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9a3c:	9301      	str	r3, [sp, #4]
   d9a3e:	bd08      	pop	{r3, pc}
   d9a40:	00030238 	.word	0x00030238

000d9a44 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d9a44:	b508      	push	{r3, lr}
   d9a46:	4b02      	ldr	r3, [pc, #8]	; (d9a50 <sock_socket+0xc>)
   d9a48:	681b      	ldr	r3, [r3, #0]
   d9a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9a4c:	9301      	str	r3, [sp, #4]
   d9a4e:	bd08      	pop	{r3, pc}
   d9a50:	00030238 	.word	0x00030238

000d9a54 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d9a54:	b508      	push	{r3, lr}
   d9a56:	4b02      	ldr	r3, [pc, #8]	; (d9a60 <HAL_USB_USART_Init+0xc>)
   d9a58:	681b      	ldr	r3, [r3, #0]
   d9a5a:	681b      	ldr	r3, [r3, #0]
   d9a5c:	9301      	str	r3, [sp, #4]
   d9a5e:	bd08      	pop	{r3, pc}
   d9a60:	0003024c 	.word	0x0003024c

000d9a64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d9a64:	b508      	push	{r3, lr}
   d9a66:	4b02      	ldr	r3, [pc, #8]	; (d9a70 <HAL_USB_USART_Begin+0xc>)
   d9a68:	681b      	ldr	r3, [r3, #0]
   d9a6a:	685b      	ldr	r3, [r3, #4]
   d9a6c:	9301      	str	r3, [sp, #4]
   d9a6e:	bd08      	pop	{r3, pc}
   d9a70:	0003024c 	.word	0x0003024c

000d9a74 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d9a74:	b508      	push	{r3, lr}
   d9a76:	4b02      	ldr	r3, [pc, #8]	; (d9a80 <HAL_USB_USART_Available_Data+0xc>)
   d9a78:	681b      	ldr	r3, [r3, #0]
   d9a7a:	691b      	ldr	r3, [r3, #16]
   d9a7c:	9301      	str	r3, [sp, #4]
   d9a7e:	bd08      	pop	{r3, pc}
   d9a80:	0003024c 	.word	0x0003024c

000d9a84 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9a84:	b508      	push	{r3, lr}
   d9a86:	4b02      	ldr	r3, [pc, #8]	; (d9a90 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d9a88:	681b      	ldr	r3, [r3, #0]
   d9a8a:	695b      	ldr	r3, [r3, #20]
   d9a8c:	9301      	str	r3, [sp, #4]
   d9a8e:	bd08      	pop	{r3, pc}
   d9a90:	0003024c 	.word	0x0003024c

000d9a94 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9a94:	b508      	push	{r3, lr}
   d9a96:	4b02      	ldr	r3, [pc, #8]	; (d9aa0 <HAL_USB_USART_Receive_Data+0xc>)
   d9a98:	681b      	ldr	r3, [r3, #0]
   d9a9a:	699b      	ldr	r3, [r3, #24]
   d9a9c:	9301      	str	r3, [sp, #4]
   d9a9e:	bd08      	pop	{r3, pc}
   d9aa0:	0003024c 	.word	0x0003024c

000d9aa4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9aa4:	b508      	push	{r3, lr}
   d9aa6:	4b02      	ldr	r3, [pc, #8]	; (d9ab0 <HAL_USB_USART_Send_Data+0xc>)
   d9aa8:	681b      	ldr	r3, [r3, #0]
   d9aaa:	69db      	ldr	r3, [r3, #28]
   d9aac:	9301      	str	r3, [sp, #4]
   d9aae:	bd08      	pop	{r3, pc}
   d9ab0:	0003024c 	.word	0x0003024c

000d9ab4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d9ab4:	b508      	push	{r3, lr}
   d9ab6:	4b02      	ldr	r3, [pc, #8]	; (d9ac0 <HAL_USB_USART_Flush_Data+0xc>)
   d9ab8:	681b      	ldr	r3, [r3, #0]
   d9aba:	6a1b      	ldr	r3, [r3, #32]
   d9abc:	9301      	str	r3, [sp, #4]
   d9abe:	bd08      	pop	{r3, pc}
   d9ac0:	0003024c 	.word	0x0003024c

000d9ac4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d9ac4:	b508      	push	{r3, lr}
   d9ac6:	4b02      	ldr	r3, [pc, #8]	; (d9ad0 <wlan_connected_info+0xc>)
   d9ac8:	681b      	ldr	r3, [r3, #0]
   d9aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d9acc:	9301      	str	r3, [sp, #4]
   d9ace:	bd08      	pop	{r3, pc}
   d9ad0:	00030274 	.word	0x00030274

000d9ad4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d9ad4:	b508      	push	{r3, lr}
   d9ad6:	4b02      	ldr	r3, [pc, #8]	; (d9ae0 <log_message+0xc>)
   d9ad8:	681b      	ldr	r3, [r3, #0]
   d9ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9adc:	9301      	str	r3, [sp, #4]
   d9ade:	bd08      	pop	{r3, pc}
   d9ae0:	00030260 	.word	0x00030260

000d9ae4 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d9ae4:	b508      	push	{r3, lr}
   d9ae6:	4b03      	ldr	r3, [pc, #12]	; (d9af4 <led_set_status_active+0x10>)
   d9ae8:	681b      	ldr	r3, [r3, #0]
   d9aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9aee:	9301      	str	r3, [sp, #4]
   d9af0:	bd08      	pop	{r3, pc}
   d9af2:	0000      	.short	0x0000
   d9af4:	00030260 	.word	0x00030260

000d9af8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d9af8:	b508      	push	{r3, lr}
   d9afa:	4b02      	ldr	r3, [pc, #8]	; (d9b04 <system_mode+0xc>)
   d9afc:	681b      	ldr	r3, [r3, #0]
   d9afe:	681b      	ldr	r3, [r3, #0]
   d9b00:	9301      	str	r3, [sp, #4]
   d9b02:	bd08      	pop	{r3, pc}
   d9b04:	00030220 	.word	0x00030220

000d9b08 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d9b08:	b508      	push	{r3, lr}
   d9b0a:	4b02      	ldr	r3, [pc, #8]	; (d9b14 <set_system_mode+0xc>)
   d9b0c:	681b      	ldr	r3, [r3, #0]
   d9b0e:	685b      	ldr	r3, [r3, #4]
   d9b10:	9301      	str	r3, [sp, #4]
   d9b12:	bd08      	pop	{r3, pc}
   d9b14:	00030220 	.word	0x00030220

000d9b18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d9b18:	b508      	push	{r3, lr}
   d9b1a:	4b02      	ldr	r3, [pc, #8]	; (d9b24 <system_delay_ms+0xc>)
   d9b1c:	681b      	ldr	r3, [r3, #0]
   d9b1e:	695b      	ldr	r3, [r3, #20]
   d9b20:	9301      	str	r3, [sp, #4]
   d9b22:	bd08      	pop	{r3, pc}
   d9b24:	00030220 	.word	0x00030220

000d9b28 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d9b28:	b508      	push	{r3, lr}
   d9b2a:	4b02      	ldr	r3, [pc, #8]	; (d9b34 <system_sleep+0xc>)
   d9b2c:	681b      	ldr	r3, [r3, #0]
   d9b2e:	699b      	ldr	r3, [r3, #24]
   d9b30:	9301      	str	r3, [sp, #4]
   d9b32:	bd08      	pop	{r3, pc}
   d9b34:	00030220 	.word	0x00030220

000d9b38 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d9b38:	b508      	push	{r3, lr}
   d9b3a:	4b02      	ldr	r3, [pc, #8]	; (d9b44 <application_thread_current+0xc>)
   d9b3c:	681b      	ldr	r3, [r3, #0]
   d9b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9b40:	9301      	str	r3, [sp, #4]
   d9b42:	bd08      	pop	{r3, pc}
   d9b44:	00030220 	.word	0x00030220

000d9b48 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d9b48:	b508      	push	{r3, lr}
   d9b4a:	4b02      	ldr	r3, [pc, #8]	; (d9b54 <application_thread_invoke+0xc>)
   d9b4c:	681b      	ldr	r3, [r3, #0]
   d9b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9b50:	9301      	str	r3, [sp, #4]
   d9b52:	bd08      	pop	{r3, pc}
   d9b54:	00030220 	.word	0x00030220

000d9b58 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d9b58:	b508      	push	{r3, lr}
   d9b5a:	4b02      	ldr	r3, [pc, #8]	; (d9b64 <system_thread_get_state+0xc>)
   d9b5c:	681b      	ldr	r3, [r3, #0]
   d9b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9b60:	9301      	str	r3, [sp, #4]
   d9b62:	bd08      	pop	{r3, pc}
   d9b64:	00030220 	.word	0x00030220

000d9b68 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d9b68:	b508      	push	{r3, lr}
   d9b6a:	4b02      	ldr	r3, [pc, #8]	; (d9b74 <led_pattern_period+0xc>)
   d9b6c:	681b      	ldr	r3, [r3, #0]
   d9b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9b70:	9301      	str	r3, [sp, #4]
   d9b72:	bd08      	pop	{r3, pc}
   d9b74:	00030220 	.word	0x00030220

000d9b78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d9b78:	b508      	push	{r3, lr}
   d9b7a:	4b03      	ldr	r3, [pc, #12]	; (d9b88 <system_ctrl_set_app_request_handler+0x10>)
   d9b7c:	681b      	ldr	r3, [r3, #0]
   d9b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d9b82:	9301      	str	r3, [sp, #4]
   d9b84:	bd08      	pop	{r3, pc}
   d9b86:	0000      	.short	0x0000
   d9b88:	00030220 	.word	0x00030220

000d9b8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d9b8c:	b508      	push	{r3, lr}
   d9b8e:	4b03      	ldr	r3, [pc, #12]	; (d9b9c <system_ctrl_set_result+0x10>)
   d9b90:	681b      	ldr	r3, [r3, #0]
   d9b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d9b96:	9301      	str	r3, [sp, #4]
   d9b98:	bd08      	pop	{r3, pc}
   d9b9a:	0000      	.short	0x0000
   d9b9c:	00030220 	.word	0x00030220

000d9ba0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9ba0:	b508      	push	{r3, lr}
   d9ba2:	4b02      	ldr	r3, [pc, #8]	; (d9bac <network_connect+0xc>)
   d9ba4:	681b      	ldr	r3, [r3, #0]
   d9ba6:	685b      	ldr	r3, [r3, #4]
   d9ba8:	9301      	str	r3, [sp, #4]
   d9baa:	bd08      	pop	{r3, pc}
   d9bac:	00030240 	.word	0x00030240

000d9bb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9bb0:	b508      	push	{r3, lr}
   d9bb2:	4b02      	ldr	r3, [pc, #8]	; (d9bbc <network_connecting+0xc>)
   d9bb4:	681b      	ldr	r3, [r3, #0]
   d9bb6:	689b      	ldr	r3, [r3, #8]
   d9bb8:	9301      	str	r3, [sp, #4]
   d9bba:	bd08      	pop	{r3, pc}
   d9bbc:	00030240 	.word	0x00030240

000d9bc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9bc0:	b508      	push	{r3, lr}
   d9bc2:	4b02      	ldr	r3, [pc, #8]	; (d9bcc <network_disconnect+0xc>)
   d9bc4:	681b      	ldr	r3, [r3, #0]
   d9bc6:	68db      	ldr	r3, [r3, #12]
   d9bc8:	9301      	str	r3, [sp, #4]
   d9bca:	bd08      	pop	{r3, pc}
   d9bcc:	00030240 	.word	0x00030240

000d9bd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9bd0:	b508      	push	{r3, lr}
   d9bd2:	4b02      	ldr	r3, [pc, #8]	; (d9bdc <network_ready+0xc>)
   d9bd4:	681b      	ldr	r3, [r3, #0]
   d9bd6:	691b      	ldr	r3, [r3, #16]
   d9bd8:	9301      	str	r3, [sp, #4]
   d9bda:	bd08      	pop	{r3, pc}
   d9bdc:	00030240 	.word	0x00030240

000d9be0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d9be0:	b508      	push	{r3, lr}
   d9be2:	4b02      	ldr	r3, [pc, #8]	; (d9bec <network_on+0xc>)
   d9be4:	681b      	ldr	r3, [r3, #0]
   d9be6:	695b      	ldr	r3, [r3, #20]
   d9be8:	9301      	str	r3, [sp, #4]
   d9bea:	bd08      	pop	{r3, pc}
   d9bec:	00030240 	.word	0x00030240

000d9bf0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d9bf0:	b508      	push	{r3, lr}
   d9bf2:	4b02      	ldr	r3, [pc, #8]	; (d9bfc <network_off+0xc>)
   d9bf4:	681b      	ldr	r3, [r3, #0]
   d9bf6:	699b      	ldr	r3, [r3, #24]
   d9bf8:	9301      	str	r3, [sp, #4]
   d9bfa:	bd08      	pop	{r3, pc}
   d9bfc:	00030240 	.word	0x00030240

000d9c00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d9c00:	b508      	push	{r3, lr}
   d9c02:	4b02      	ldr	r3, [pc, #8]	; (d9c0c <network_listen+0xc>)
   d9c04:	681b      	ldr	r3, [r3, #0]
   d9c06:	69db      	ldr	r3, [r3, #28]
   d9c08:	9301      	str	r3, [sp, #4]
   d9c0a:	bd08      	pop	{r3, pc}
   d9c0c:	00030240 	.word	0x00030240

000d9c10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d9c10:	b508      	push	{r3, lr}
   d9c12:	4b02      	ldr	r3, [pc, #8]	; (d9c1c <network_listening+0xc>)
   d9c14:	681b      	ldr	r3, [r3, #0]
   d9c16:	6a1b      	ldr	r3, [r3, #32]
   d9c18:	9301      	str	r3, [sp, #4]
   d9c1a:	bd08      	pop	{r3, pc}
   d9c1c:	00030240 	.word	0x00030240

000d9c20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d9c20:	b508      	push	{r3, lr}
   d9c22:	4b02      	ldr	r3, [pc, #8]	; (d9c2c <network_set_listen_timeout+0xc>)
   d9c24:	681b      	ldr	r3, [r3, #0]
   d9c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9c28:	9301      	str	r3, [sp, #4]
   d9c2a:	bd08      	pop	{r3, pc}
   d9c2c:	00030240 	.word	0x00030240

000d9c30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d9c30:	b508      	push	{r3, lr}
   d9c32:	4b02      	ldr	r3, [pc, #8]	; (d9c3c <network_get_listen_timeout+0xc>)
   d9c34:	681b      	ldr	r3, [r3, #0]
   d9c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9c38:	9301      	str	r3, [sp, #4]
   d9c3a:	bd08      	pop	{r3, pc}
   d9c3c:	00030240 	.word	0x00030240

000d9c40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d9c40:	b508      	push	{r3, lr}
   d9c42:	4b02      	ldr	r3, [pc, #8]	; (d9c4c <spark_process+0xc>)
   d9c44:	681b      	ldr	r3, [r3, #0]
   d9c46:	689b      	ldr	r3, [r3, #8]
   d9c48:	9301      	str	r3, [sp, #4]
   d9c4a:	bd08      	pop	{r3, pc}
   d9c4c:	00030244 	.word	0x00030244

000d9c50 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d9c50:	b508      	push	{r3, lr}
   d9c52:	4b02      	ldr	r3, [pc, #8]	; (d9c5c <spark_cloud_flag_connect+0xc>)
   d9c54:	681b      	ldr	r3, [r3, #0]
   d9c56:	68db      	ldr	r3, [r3, #12]
   d9c58:	9301      	str	r3, [sp, #4]
   d9c5a:	bd08      	pop	{r3, pc}
   d9c5c:	00030244 	.word	0x00030244

000d9c60 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d9c60:	b508      	push	{r3, lr}
   d9c62:	4b02      	ldr	r3, [pc, #8]	; (d9c6c <spark_cloud_flag_connected+0xc>)
   d9c64:	681b      	ldr	r3, [r3, #0]
   d9c66:	695b      	ldr	r3, [r3, #20]
   d9c68:	9301      	str	r3, [sp, #4]
   d9c6a:	bd08      	pop	{r3, pc}
   d9c6c:	00030244 	.word	0x00030244

000d9c70 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d9c70:	b508      	push	{r3, lr}
   d9c72:	4b02      	ldr	r3, [pc, #8]	; (d9c7c <spark_send_event+0xc>)
   d9c74:	681b      	ldr	r3, [r3, #0]
   d9c76:	6a1b      	ldr	r3, [r3, #32]
   d9c78:	9301      	str	r3, [sp, #4]
   d9c7a:	bd08      	pop	{r3, pc}
   d9c7c:	00030244 	.word	0x00030244

000d9c80 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d9c80:	b508      	push	{r3, lr}
   d9c82:	4b02      	ldr	r3, [pc, #8]	; (d9c8c <spark_subscribe+0xc>)
   d9c84:	681b      	ldr	r3, [r3, #0]
   d9c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9c88:	9301      	str	r3, [sp, #4]
   d9c8a:	bd08      	pop	{r3, pc}
   d9c8c:	00030244 	.word	0x00030244

000d9c90 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9c90:	b508      	push	{r3, lr}
   d9c92:	4b02      	ldr	r3, [pc, #8]	; (d9c9c <spark_sync_time_pending+0xc>)
   d9c94:	681b      	ldr	r3, [r3, #0]
   d9c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9c98:	9301      	str	r3, [sp, #4]
   d9c9a:	bd08      	pop	{r3, pc}
   d9c9c:	00030244 	.word	0x00030244

000d9ca0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9ca0:	b508      	push	{r3, lr}
   d9ca2:	4b02      	ldr	r3, [pc, #8]	; (d9cac <spark_set_random_seed_from_cloud_handler+0xc>)
   d9ca4:	681b      	ldr	r3, [r3, #0]
   d9ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9ca8:	9301      	str	r3, [sp, #4]
   d9caa:	bd08      	pop	{r3, pc}
   d9cac:	00030244 	.word	0x00030244

000d9cb0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9cb0:	b508      	push	{r3, lr}
   d9cb2:	4b02      	ldr	r3, [pc, #8]	; (d9cbc <malloc+0xc>)
   d9cb4:	681b      	ldr	r3, [r3, #0]
   d9cb6:	681b      	ldr	r3, [r3, #0]
   d9cb8:	9301      	str	r3, [sp, #4]
   d9cba:	bd08      	pop	{r3, pc}
   d9cbc:	0003021c 	.word	0x0003021c

000d9cc0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9cc0:	b508      	push	{r3, lr}
   d9cc2:	4b02      	ldr	r3, [pc, #8]	; (d9ccc <free+0xc>)
   d9cc4:	681b      	ldr	r3, [r3, #0]
   d9cc6:	685b      	ldr	r3, [r3, #4]
   d9cc8:	9301      	str	r3, [sp, #4]
   d9cca:	bd08      	pop	{r3, pc}
   d9ccc:	0003021c 	.word	0x0003021c

000d9cd0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9cd0:	b508      	push	{r3, lr}
   d9cd2:	4b02      	ldr	r3, [pc, #8]	; (d9cdc <realloc+0xc>)
   d9cd4:	681b      	ldr	r3, [r3, #0]
   d9cd6:	689b      	ldr	r3, [r3, #8]
   d9cd8:	9301      	str	r3, [sp, #4]
   d9cda:	bd08      	pop	{r3, pc}
   d9cdc:	0003021c 	.word	0x0003021c

000d9ce0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9ce0:	b508      	push	{r3, lr}
   d9ce2:	4b02      	ldr	r3, [pc, #8]	; (d9cec <siprintf+0xc>)
   d9ce4:	681b      	ldr	r3, [r3, #0]
   d9ce6:	691b      	ldr	r3, [r3, #16]
   d9ce8:	9301      	str	r3, [sp, #4]
   d9cea:	bd08      	pop	{r3, pc}
   d9cec:	0003021c 	.word	0x0003021c

000d9cf0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d9cf0:	b508      	push	{r3, lr}
   d9cf2:	4b02      	ldr	r3, [pc, #8]	; (d9cfc <siscanf+0xc>)
   d9cf4:	681b      	ldr	r3, [r3, #0]
   d9cf6:	699b      	ldr	r3, [r3, #24]
   d9cf8:	9301      	str	r3, [sp, #4]
   d9cfa:	bd08      	pop	{r3, pc}
   d9cfc:	0003021c 	.word	0x0003021c

000d9d00 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d9d00:	b508      	push	{r3, lr}
   d9d02:	4b02      	ldr	r3, [pc, #8]	; (d9d0c <snprintf+0xc>)
   d9d04:	681b      	ldr	r3, [r3, #0]
   d9d06:	69db      	ldr	r3, [r3, #28]
   d9d08:	9301      	str	r3, [sp, #4]
   d9d0a:	bd08      	pop	{r3, pc}
   d9d0c:	0003021c 	.word	0x0003021c

000d9d10 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d9d10:	b508      	push	{r3, lr}
   d9d12:	4b02      	ldr	r3, [pc, #8]	; (d9d1c <sniprintf+0xc>)
   d9d14:	681b      	ldr	r3, [r3, #0]
   d9d16:	6a1b      	ldr	r3, [r3, #32]
   d9d18:	9301      	str	r3, [sp, #4]
   d9d1a:	bd08      	pop	{r3, pc}
   d9d1c:	0003021c 	.word	0x0003021c

000d9d20 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d9d20:	b508      	push	{r3, lr}
   d9d22:	4b02      	ldr	r3, [pc, #8]	; (d9d2c <vsnprintf+0xc>)
   d9d24:	681b      	ldr	r3, [r3, #0]
   d9d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9d28:	9301      	str	r3, [sp, #4]
   d9d2a:	bd08      	pop	{r3, pc}
   d9d2c:	0003021c 	.word	0x0003021c

000d9d30 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d9d30:	b508      	push	{r3, lr}
   d9d32:	4b02      	ldr	r3, [pc, #8]	; (d9d3c <abort+0xc>)
   d9d34:	681b      	ldr	r3, [r3, #0]
   d9d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9d38:	9301      	str	r3, [sp, #4]
   d9d3a:	bd08      	pop	{r3, pc}
   d9d3c:	0003021c 	.word	0x0003021c

000d9d40 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d9d40:	b508      	push	{r3, lr}
   d9d42:	4b02      	ldr	r3, [pc, #8]	; (d9d4c <_malloc_r+0xc>)
   d9d44:	681b      	ldr	r3, [r3, #0]
   d9d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9d48:	9301      	str	r3, [sp, #4]
   d9d4a:	bd08      	pop	{r3, pc}
   d9d4c:	0003021c 	.word	0x0003021c

000d9d50 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d9d50:	b508      	push	{r3, lr}
   d9d52:	4b02      	ldr	r3, [pc, #8]	; (d9d5c <__errno+0xc>)
   d9d54:	681b      	ldr	r3, [r3, #0]
   d9d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9d58:	9301      	str	r3, [sp, #4]
   d9d5a:	bd08      	pop	{r3, pc}
   d9d5c:	0003021c 	.word	0x0003021c

000d9d60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9d60:	2200      	movs	r2, #0
   d9d62:	4611      	mov	r1, r2
   d9d64:	6840      	ldr	r0, [r0, #4]
   d9d66:	f7ff bf53 	b.w	d9c10 <network_listening>

000d9d6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9d6a:	2200      	movs	r2, #0
   d9d6c:	4611      	mov	r1, r2
   d9d6e:	6840      	ldr	r0, [r0, #4]
   d9d70:	f7ff bf5e 	b.w	d9c30 <network_get_listen_timeout>

000d9d74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9d74:	2200      	movs	r2, #0
   d9d76:	6840      	ldr	r0, [r0, #4]
   d9d78:	f7ff bf52 	b.w	d9c20 <network_set_listen_timeout>

000d9d7c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9d7c:	2200      	movs	r2, #0
   d9d7e:	f081 0101 	eor.w	r1, r1, #1
   d9d82:	6840      	ldr	r0, [r0, #4]
   d9d84:	f7ff bf3c 	b.w	d9c00 <network_listen>

000d9d88 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d9d88:	2300      	movs	r3, #0
   d9d8a:	461a      	mov	r2, r3
   d9d8c:	4619      	mov	r1, r3
   d9d8e:	6840      	ldr	r0, [r0, #4]
   d9d90:	f7ff bf2e 	b.w	d9bf0 <network_off>

000d9d94 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9d94:	2300      	movs	r3, #0
   d9d96:	461a      	mov	r2, r3
   d9d98:	4619      	mov	r1, r3
   d9d9a:	6840      	ldr	r0, [r0, #4]
   d9d9c:	f7ff bf20 	b.w	d9be0 <network_on>

000d9da0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9da0:	2200      	movs	r2, #0
   d9da2:	4611      	mov	r1, r2
   d9da4:	6840      	ldr	r0, [r0, #4]
   d9da6:	f7ff bf13 	b.w	d9bd0 <network_ready>

000d9daa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9daa:	2200      	movs	r2, #0
   d9dac:	4611      	mov	r1, r2
   d9dae:	6840      	ldr	r0, [r0, #4]
   d9db0:	f7ff befe 	b.w	d9bb0 <network_connecting>

000d9db4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9db4:	2200      	movs	r2, #0
   d9db6:	2102      	movs	r1, #2
   d9db8:	6840      	ldr	r0, [r0, #4]
   d9dba:	f7ff bf01 	b.w	d9bc0 <network_disconnect>

000d9dbe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9dbe:	2300      	movs	r3, #0
   d9dc0:	461a      	mov	r2, r3
   d9dc2:	6840      	ldr	r0, [r0, #4]
   d9dc4:	f7ff beec 	b.w	d9ba0 <network_connect>

000d9dc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9dc8:	4b02      	ldr	r3, [pc, #8]	; (d9dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9dca:	2203      	movs	r2, #3
   d9dcc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9dce:	4a02      	ldr	r2, [pc, #8]	; (d9dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9dd0:	601a      	str	r2, [r3, #0]
   d9dd2:	4770      	bx	lr
   d9dd4:	2003e270 	.word	0x2003e270
   d9dd8:	000e6aa0 	.word	0x000e6aa0

000d9ddc <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9ddc:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d9dde:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9de0:	6892      	ldr	r2, [r2, #8]
   d9de2:	4601      	mov	r1, r0
   d9de4:	4618      	mov	r0, r3
   d9de6:	4710      	bx	r2

000d9de8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d9de8:	b570      	push	{r4, r5, r6, lr}
   d9dea:	4c0e      	ldr	r4, [pc, #56]	; (d9e24 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d9dec:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d9dee:	241c      	movs	r4, #28
   d9df0:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9df2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d9df6:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d9dfa:	f004 0403 	and.w	r4, r4, #3
   d9dfe:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9e02:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9e04:	b2e4      	uxtb	r4, r4
   d9e06:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d9e08:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d9e0a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d9e0c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9e0e:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9e10:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9e12:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9e14:	bf08      	it	eq
   d9e16:	4b04      	ldreq	r3, [pc, #16]	; (d9e28 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d9e18:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d9e1a:	bf06      	itte	eq
   d9e1c:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d9e1e:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d9e20:	8303      	strhne	r3, [r0, #24]
    }
}
   d9e22:	bd70      	pop	{r4, r5, r6, pc}
   d9e24:	000e5bc4 	.word	0x000e5bc4
   d9e28:	000d9ddd 	.word	0x000d9ddd

000d9e2c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d9e2c:	4770      	bx	lr

000d9e2e <_ZN8SPIClassD0Ev>:
   d9e2e:	b510      	push	{r4, lr}
   d9e30:	2110      	movs	r1, #16
   d9e32:	4604      	mov	r4, r0
   d9e34:	f002 f97b 	bl	dc12e <_ZdlPvj>
   d9e38:	4620      	mov	r0, r4
   d9e3a:	bd10      	pop	{r4, pc}

000d9e3c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9e3c:	b570      	push	{r4, r5, r6, lr}
   d9e3e:	4b08      	ldr	r3, [pc, #32]	; (d9e60 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d9e40:	6003      	str	r3, [r0, #0]
   d9e42:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d9e44:	2500      	movs	r5, #0
   d9e46:	460e      	mov	r6, r1
   d9e48:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d9e4c:	f7ff fce2 	bl	d9814 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d9e50:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d9e52:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d9e54:	f7ff fc76 	bl	d9744 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d9e58:	60a5      	str	r5, [r4, #8]
}
   d9e5a:	4620      	mov	r0, r4
   d9e5c:	bd70      	pop	{r4, r5, r6, pc}
   d9e5e:	bf00      	nop
   d9e60:	000e6ad4 	.word	0x000e6ad4

000d9e64 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9e64:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d9e66:	7900      	ldrb	r0, [r0, #4]
   d9e68:	f7ff fc64 	bl	d9734 <HAL_SPI_Send_Receive_Data>
}
   d9e6c:	b2c0      	uxtb	r0, r0
   d9e6e:	bd08      	pop	{r3, pc}

000d9e70 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d9e70:	7900      	ldrb	r0, [r0, #4]
   d9e72:	f7ff bc6f 	b.w	d9754 <HAL_SPI_Is_Enabled>

000d9e76 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9e76:	4601      	mov	r1, r0
   d9e78:	2200      	movs	r2, #0
   d9e7a:	208c      	movs	r0, #140	; 0x8c
   d9e7c:	f7ff bca2 	b.w	d97c4 <HAL_Core_System_Reset_Ex>

000d9e80 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9e80:	2000      	movs	r0, #0
   d9e82:	f7ff bff8 	b.w	d9e76 <_ZN11SystemClass5resetEm>
	...

000d9e88 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9e88:	b510      	push	{r4, lr}
   d9e8a:	4604      	mov	r4, r0
   d9e8c:	4608      	mov	r0, r1
   d9e8e:	4611      	mov	r1, r2
   d9e90:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9e92:	2300      	movs	r3, #0
   d9e94:	f7ff fe48 	bl	d9b28 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d9e98:	4b06      	ldr	r3, [pc, #24]	; (d9eb4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d9e9a:	2200      	movs	r2, #0
   d9e9c:	701a      	strb	r2, [r3, #0]
   d9e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9ea2:	8058      	strh	r0, [r3, #2]
   d9ea4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d9ea6:	681a      	ldr	r2, [r3, #0]
   d9ea8:	889b      	ldrh	r3, [r3, #4]
   d9eaa:	6022      	str	r2, [r4, #0]
   d9eac:	80a3      	strh	r3, [r4, #4]
}
   d9eae:	4620      	mov	r0, r4
   d9eb0:	bd10      	pop	{r4, pc}
   d9eb2:	bf00      	nop
   d9eb4:	2003e278 	.word	0x2003e278

000d9eb8 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   d9eb8:	7800      	ldrb	r0, [r0, #0]
   d9eba:	4770      	bx	lr

000d9ebc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d9ebc:	4b04      	ldr	r3, [pc, #16]	; (d9ed0 <_GLOBAL__sub_I_System+0x14>)
   d9ebe:	2000      	movs	r0, #0
   d9ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d9ec4:	7018      	strb	r0, [r3, #0]
   d9ec6:	8058      	strh	r0, [r3, #2]
   d9ec8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9eca:	f7ff be1d 	b.w	d9b08 <set_system_mode>
   d9ece:	bf00      	nop
   d9ed0:	2003e278 	.word	0x2003e278

000d9ed4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9ed4:	b510      	push	{r4, lr}
   d9ed6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9ed8:	f009 fb90 	bl	e35fc <strlen>
   d9edc:	3801      	subs	r0, #1
   d9ede:	1823      	adds	r3, r4, r0
   d9ee0:	4620      	mov	r0, r4
	while(i<j){
   d9ee2:	4298      	cmp	r0, r3
   d9ee4:	d206      	bcs.n	d9ef4 <_Z11str_reversePc+0x20>
		c = *i;
   d9ee6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9ee8:	7819      	ldrb	r1, [r3, #0]
   d9eea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9eee:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d9ef2:	e7f6      	b.n	d9ee2 <_Z11str_reversePc+0xe>
   d9ef4:	bd10      	pop	{r4, pc}

000d9ef6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9ef6:	b570      	push	{r4, r5, r6, lr}
   d9ef8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9efa:	1e91      	subs	r1, r2, #2
   d9efc:	2922      	cmp	r1, #34	; 0x22
   d9efe:	d820      	bhi.n	d9f42 <ultoa+0x4c>
   d9f00:	4625      	mov	r5, r4
   d9f02:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9f04:	b910      	cbnz	r0, d9f0c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9f06:	4423      	add	r3, r4
            *ptr++ = '0';
   d9f08:	2230      	movs	r2, #48	; 0x30
   d9f0a:	e00e      	b.n	d9f2a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9f0c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d9f10:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d9f14:	b2c1      	uxtb	r1, r0
   d9f16:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d9f1a:	2809      	cmp	r0, #9
                *ptr += '0';
   d9f1c:	bf94      	ite	ls
   d9f1e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9f20:	3157      	addhi	r1, #87	; 0x57
   d9f22:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d9f26:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9f28:	e7eb      	b.n	d9f02 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9f2a:	4299      	cmp	r1, r3
   d9f2c:	d202      	bcs.n	d9f34 <ultoa+0x3e>
            *ptr++ = '0';
   d9f2e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9f32:	e7fa      	b.n	d9f2a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d9f34:	2300      	movs	r3, #0
	str_reverse(buffer);
   d9f36:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d9f38:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d9f3a:	f7ff ffcb 	bl	d9ed4 <_Z11str_reversePc>
	return buffer;
   d9f3e:	4620      	mov	r0, r4
   d9f40:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d9f42:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d9f44:	bd70      	pop	{r4, r5, r6, pc}

000d9f46 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9f46:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9f48:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9f4a:	460c      	mov	r4, r1
   d9f4c:	4615      	mov	r5, r2
	if(a<0){
   d9f4e:	da0b      	bge.n	d9f68 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9f54:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9f58:	bf14      	ite	ne
   d9f5a:	4258      	negne	r0, r3
   d9f5c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9f5e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9f60:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d9f62:	462a      	mov	r2, r5
   d9f64:	4419      	add	r1, r3
   d9f66:	e000      	b.n	d9f6a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d9f68:	2301      	movs	r3, #1
   d9f6a:	f7ff ffc4 	bl	d9ef6 <ultoa>
	}
	return buffer;
}
   d9f6e:	4620      	mov	r0, r4
   d9f70:	bd38      	pop	{r3, r4, r5, pc}

000d9f72 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9f72:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9f74:	2301      	movs	r3, #1
   d9f76:	f7ff ffbe 	bl	d9ef6 <ultoa>
}
   d9f7a:	bd08      	pop	{r3, pc}

000d9f7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9f7c:	b510      	push	{r4, lr}
   d9f7e:	4604      	mov	r4, r0
{
	free(buffer);
   d9f80:	6800      	ldr	r0, [r0, #0]
   d9f82:	f7ff fe9d 	bl	d9cc0 <free>
}
   d9f86:	4620      	mov	r0, r4
   d9f88:	bd10      	pop	{r4, pc}

000d9f8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9f8a:	b510      	push	{r4, lr}
   d9f8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9f8e:	6800      	ldr	r0, [r0, #0]
   d9f90:	b108      	cbz	r0, d9f96 <_ZN6String10invalidateEv+0xc>
   d9f92:	f7ff fe95 	bl	d9cc0 <free>
	buffer = NULL;
   d9f96:	2300      	movs	r3, #0
   d9f98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9f9a:	60a3      	str	r3, [r4, #8]
   d9f9c:	6063      	str	r3, [r4, #4]
   d9f9e:	bd10      	pop	{r4, pc}

000d9fa0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9fa0:	b538      	push	{r3, r4, r5, lr}
   d9fa2:	4604      	mov	r4, r0
   d9fa4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9fa6:	6800      	ldr	r0, [r0, #0]
   d9fa8:	3101      	adds	r1, #1
   d9faa:	f7ff fe91 	bl	d9cd0 <realloc>
	if (newbuffer) {
   d9fae:	b110      	cbz	r0, d9fb6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9fb0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9fb4:	2001      	movs	r0, #1
	}
	return 0;
}
   d9fb6:	bd38      	pop	{r3, r4, r5, pc}

000d9fb8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9fb8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9fba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9fbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9fbe:	b113      	cbz	r3, d9fc6 <_ZN6String7reserveEj+0xe>
   d9fc0:	6843      	ldr	r3, [r0, #4]
   d9fc2:	428b      	cmp	r3, r1
   d9fc4:	d207      	bcs.n	d9fd6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9fc6:	4620      	mov	r0, r4
   d9fc8:	f7ff ffea 	bl	d9fa0 <_ZN6String12changeBufferEj>
   d9fcc:	b120      	cbz	r0, d9fd8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9fce:	68a3      	ldr	r3, [r4, #8]
   d9fd0:	b90b      	cbnz	r3, d9fd6 <_ZN6String7reserveEj+0x1e>
   d9fd2:	6822      	ldr	r2, [r4, #0]
   d9fd4:	7013      	strb	r3, [r2, #0]
   d9fd6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9fd8:	bd10      	pop	{r4, pc}

000d9fda <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9fda:	b570      	push	{r4, r5, r6, lr}
   d9fdc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9fde:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9fe0:	4604      	mov	r4, r0
   d9fe2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9fe4:	f7ff ffe8 	bl	d9fb8 <_ZN6String7reserveEj>
   d9fe8:	b918      	cbnz	r0, d9ff2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9fea:	4620      	mov	r0, r4
   d9fec:	f7ff ffcd 	bl	d9f8a <_ZN6String10invalidateEv>
		return *this;
   d9ff0:	e009      	b.n	da006 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9ff2:	462a      	mov	r2, r5
   d9ff4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9ff6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9ff8:	6820      	ldr	r0, [r4, #0]
   d9ffa:	f008 fb33 	bl	e2664 <memcpy>
	buffer[len] = 0;
   d9ffe:	6822      	ldr	r2, [r4, #0]
   da000:	68a3      	ldr	r3, [r4, #8]
   da002:	2100      	movs	r1, #0
   da004:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   da006:	4620      	mov	r0, r4
   da008:	bd70      	pop	{r4, r5, r6, pc}

000da00a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   da00a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da00c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   da00e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da010:	6003      	str	r3, [r0, #0]
	capacity = 0;
   da012:	6043      	str	r3, [r0, #4]
	len = 0;
   da014:	6083      	str	r3, [r0, #8]
	flags = 0;
   da016:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   da018:	460d      	mov	r5, r1
   da01a:	b139      	cbz	r1, da02c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   da01c:	4608      	mov	r0, r1
   da01e:	f009 faed 	bl	e35fc <strlen>
   da022:	4629      	mov	r1, r5
   da024:	4602      	mov	r2, r0
   da026:	4620      	mov	r0, r4
   da028:	f7ff ffd7 	bl	d9fda <_ZN6String4copyEPKcj>
}
   da02c:	4620      	mov	r0, r4
   da02e:	bd38      	pop	{r3, r4, r5, pc}

000da030 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da030:	b538      	push	{r3, r4, r5, lr}
   da032:	4605      	mov	r5, r0
	if (buffer) {
   da034:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da036:	460c      	mov	r4, r1
	if (buffer) {
   da038:	b160      	cbz	r0, da054 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   da03a:	686a      	ldr	r2, [r5, #4]
   da03c:	688b      	ldr	r3, [r1, #8]
   da03e:	429a      	cmp	r2, r3
   da040:	d306      	bcc.n	da050 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   da042:	6809      	ldr	r1, [r1, #0]
   da044:	f008 fda2 	bl	e2b8c <strcpy>
			len = rhs.len;
   da048:	68a3      	ldr	r3, [r4, #8]
   da04a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da04c:	2300      	movs	r3, #0
   da04e:	e00a      	b.n	da066 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   da050:	f7ff fe36 	bl	d9cc0 <free>
		}
	}
	buffer = rhs.buffer;
   da054:	6823      	ldr	r3, [r4, #0]
   da056:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da058:	6863      	ldr	r3, [r4, #4]
   da05a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da05c:	68a3      	ldr	r3, [r4, #8]
   da05e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da060:	2300      	movs	r3, #0
   da062:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   da064:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   da066:	60a3      	str	r3, [r4, #8]
   da068:	bd38      	pop	{r3, r4, r5, pc}

000da06a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da06a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   da06c:	b510      	push	{r4, lr}
   da06e:	460b      	mov	r3, r1
   da070:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da072:	d007      	beq.n	da084 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da074:	6809      	ldr	r1, [r1, #0]
   da076:	b119      	cbz	r1, da080 <_ZN6StringaSERKS_+0x16>
   da078:	689a      	ldr	r2, [r3, #8]
   da07a:	f7ff ffae 	bl	d9fda <_ZN6String4copyEPKcj>
   da07e:	e001      	b.n	da084 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   da080:	f7ff ff83 	bl	d9f8a <_ZN6String10invalidateEv>

	return *this;
}
   da084:	4620      	mov	r0, r4
   da086:	bd10      	pop	{r4, pc}

000da088 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   da088:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da08a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   da08c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da08e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   da090:	6043      	str	r3, [r0, #4]
	len = 0;
   da092:	6083      	str	r3, [r0, #8]
	flags = 0;
   da094:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   da096:	f7ff ffe8 	bl	da06a <_ZN6StringaSERKS_>
}
   da09a:	4620      	mov	r0, r4
   da09c:	bd10      	pop	{r4, pc}

000da09e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   da09e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   da0a0:	b510      	push	{r4, lr}
   da0a2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   da0a4:	d001      	beq.n	da0aa <_ZN6StringaSEOS_+0xc>
   da0a6:	f7ff ffc3 	bl	da030 <_ZN6String4moveERS_>
	return *this;
}
   da0aa:	4620      	mov	r0, r4
   da0ac:	bd10      	pop	{r4, pc}

000da0ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   da0ae:	b538      	push	{r3, r4, r5, lr}
   da0b0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   da0b2:	460c      	mov	r4, r1
   da0b4:	b141      	cbz	r1, da0c8 <_ZN6StringaSEPKc+0x1a>
   da0b6:	4608      	mov	r0, r1
   da0b8:	f009 faa0 	bl	e35fc <strlen>
   da0bc:	4621      	mov	r1, r4
   da0be:	4602      	mov	r2, r0
   da0c0:	4628      	mov	r0, r5
   da0c2:	f7ff ff8a 	bl	d9fda <_ZN6String4copyEPKcj>
   da0c6:	e001      	b.n	da0cc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   da0c8:	f7ff ff5f 	bl	d9f8a <_ZN6String10invalidateEv>

	return *this;
}
   da0cc:	4628      	mov	r0, r5
   da0ce:	bd38      	pop	{r3, r4, r5, pc}

000da0d0 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   da0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0d2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da0d4:	2300      	movs	r3, #0
   da0d6:	6023      	str	r3, [r4, #0]
	capacity = 0;
   da0d8:	6063      	str	r3, [r4, #4]
	len = 0;
   da0da:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da0dc:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   da0de:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   da0e0:	a901      	add	r1, sp, #4
   da0e2:	f7ff ff46 	bl	d9f72 <utoa>
	*this = buf;
   da0e6:	a901      	add	r1, sp, #4
   da0e8:	4620      	mov	r0, r4
   da0ea:	f7ff ffe0 	bl	da0ae <_ZN6StringaSEPKc>
}
   da0ee:	4620      	mov	r0, r4
   da0f0:	b004      	add	sp, #16
   da0f2:	bd10      	pop	{r4, pc}

000da0f4 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   da0f4:	b510      	push	{r4, lr}
   da0f6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da0f8:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   da0fa:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da0fc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   da0fe:	6063      	str	r3, [r4, #4]
	len = 0;
   da100:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da102:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   da104:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   da106:	a901      	add	r1, sp, #4
   da108:	f7ff ff1d 	bl	d9f46 <itoa>
	*this = buf;
   da10c:	a901      	add	r1, sp, #4
   da10e:	4620      	mov	r0, r4
   da110:	f7ff ffcd 	bl	da0ae <_ZN6StringaSEPKc>
}
   da114:	4620      	mov	r0, r4
   da116:	b00a      	add	sp, #40	; 0x28
   da118:	bd10      	pop	{r4, pc}

000da11a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   da11a:	b570      	push	{r4, r5, r6, lr}
   da11c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   da11e:	460e      	mov	r6, r1
   da120:	b909      	cbnz	r1, da126 <_ZN6String6concatEPKcj+0xc>
   da122:	2000      	movs	r0, #0
   da124:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   da126:	b16a      	cbz	r2, da144 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   da128:	6883      	ldr	r3, [r0, #8]
   da12a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   da12c:	4629      	mov	r1, r5
   da12e:	f7ff ff43 	bl	d9fb8 <_ZN6String7reserveEj>
   da132:	2800      	cmp	r0, #0
   da134:	d0f5      	beq.n	da122 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   da136:	6820      	ldr	r0, [r4, #0]
   da138:	68a3      	ldr	r3, [r4, #8]
   da13a:	4631      	mov	r1, r6
   da13c:	4418      	add	r0, r3
   da13e:	f008 fd25 	bl	e2b8c <strcpy>
	len = newlen;
   da142:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   da144:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   da146:	bd70      	pop	{r4, r5, r6, pc}

000da148 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da148:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da14a:	688a      	ldr	r2, [r1, #8]
   da14c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da14e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da150:	f7ff ffe3 	bl	da11a <_ZN6String6concatEPKcj>
   da154:	b910      	cbnz	r0, da15c <_ZplRK15StringSumHelperRK6String+0x14>
   da156:	4620      	mov	r0, r4
   da158:	f7ff ff17 	bl	d9f8a <_ZN6String10invalidateEv>
	return a;
}
   da15c:	4620      	mov	r0, r4
   da15e:	bd10      	pop	{r4, pc}

000da160 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   da160:	b538      	push	{r3, r4, r5, lr}
   da162:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da164:	460d      	mov	r5, r1
   da166:	b141      	cbz	r1, da17a <_ZplRK15StringSumHelperPKc+0x1a>
   da168:	4608      	mov	r0, r1
   da16a:	f009 fa47 	bl	e35fc <strlen>
   da16e:	4629      	mov	r1, r5
   da170:	4602      	mov	r2, r0
   da172:	4620      	mov	r0, r4
   da174:	f7ff ffd1 	bl	da11a <_ZN6String6concatEPKcj>
   da178:	b910      	cbnz	r0, da180 <_ZplRK15StringSumHelperPKc+0x20>
   da17a:	4620      	mov	r0, r4
   da17c:	f7ff ff05 	bl	d9f8a <_ZN6String10invalidateEv>
	return a;
}
   da180:	4620      	mov	r0, r4
   da182:	bd38      	pop	{r3, r4, r5, pc}

000da184 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da184:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da186:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da188:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da18a:	b912      	cbnz	r2, da192 <_ZNK6String6equalsEPKc+0xe>
   da18c:	b919      	cbnz	r1, da196 <_ZNK6String6equalsEPKc+0x12>
   da18e:	2001      	movs	r0, #1
   da190:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da192:	b911      	cbnz	r1, da19a <_ZNK6String6equalsEPKc+0x16>
   da194:	6803      	ldr	r3, [r0, #0]
   da196:	7818      	ldrb	r0, [r3, #0]
   da198:	e002      	b.n	da1a0 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   da19a:	6800      	ldr	r0, [r0, #0]
   da19c:	f008 fcec 	bl	e2b78 <strcmp>
   da1a0:	fab0 f080 	clz	r0, r0
   da1a4:	0940      	lsrs	r0, r0, #5
}
   da1a6:	bd08      	pop	{r3, pc}

000da1a8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   da1ac:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da1ae:	460e      	mov	r6, r1
   da1b0:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   da1b2:	4910      	ldr	r1, [pc, #64]	; (da1f4 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   da1b4:	bf88      	it	hi
   da1b6:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da1b8:	4615      	mov	r5, r2
   da1ba:	4607      	mov	r7, r0
	if (left > right) {
   da1bc:	bf84      	itt	hi
   da1be:	4625      	movhi	r5, r4
   da1c0:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   da1c2:	f7ff ff22 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   da1c6:	68b1      	ldr	r1, [r6, #8]
   da1c8:	428d      	cmp	r5, r1
   da1ca:	d80f      	bhi.n	da1ec <_ZNK6String9substringEjj+0x44>
   da1cc:	428c      	cmp	r4, r1
   da1ce:	bf28      	it	cs
   da1d0:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   da1d2:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   da1d4:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   da1d6:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   da1da:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   da1dc:	6831      	ldr	r1, [r6, #0]
   da1de:	4638      	mov	r0, r7
   da1e0:	4429      	add	r1, r5
   da1e2:	f7ff ff64 	bl	da0ae <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   da1e6:	6833      	ldr	r3, [r6, #0]
   da1e8:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   da1ec:	4638      	mov	r0, r7
   da1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1f2:	bf00      	nop
   da1f4:	000e5ce1 	.word	0x000e5ce1

000da1f8 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   da1f8:	b510      	push	{r4, lr}
   da1fa:	4604      	mov	r4, r0
	return substring(left, len);
   da1fc:	688b      	ldr	r3, [r1, #8]
   da1fe:	f7ff ffd3 	bl	da1a8 <_ZNK6String9substringEjj>
}
   da202:	4620      	mov	r0, r4
   da204:	bd10      	pop	{r4, pc}

000da206 <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   da206:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   da208:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   da20a:	4605      	mov	r5, r0
	if (buffer) {
   da20c:	b134      	cbz	r4, da21c <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   da20e:	7820      	ldrb	r0, [r4, #0]
   da210:	b120      	cbz	r0, da21c <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   da212:	f00a f971 	bl	e44f8 <tolower>
   da216:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   da21a:	e7f8      	b.n	da20e <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   da21c:	4628      	mov	r0, r5
   da21e:	bd38      	pop	{r3, r4, r5, pc}

000da220 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   da220:	6800      	ldr	r0, [r0, #0]
   da222:	b108      	cbz	r0, da228 <_ZNK6String5toIntEv+0x8>
   da224:	f008 b90f 	b.w	e2446 <atol>
	return 0;
}
   da228:	4770      	bx	lr
	...

000da22c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da22c:	b40e      	push	{r1, r2, r3}
   da22e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   da230:	ac09      	add	r4, sp, #36	; 0x24
   da232:	4605      	mov	r5, r0
   da234:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   da238:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da23a:	4623      	mov	r3, r4
   da23c:	463a      	mov	r2, r7
   da23e:	2105      	movs	r1, #5
   da240:	a802      	add	r0, sp, #8
   da242:	f7ff fd6d 	bl	d9d20 <vsnprintf>
    va_end(marker);

    String result;
   da246:	490c      	ldr	r1, [pc, #48]	; (da278 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da248:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   da24a:	4628      	mov	r0, r5
   da24c:	f7ff fedd 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   da250:	4631      	mov	r1, r6
   da252:	4628      	mov	r0, r5
   da254:	f7ff feb0 	bl	d9fb8 <_ZN6String7reserveEj>
    if (result.buffer) {
   da258:	6828      	ldr	r0, [r5, #0]
   da25a:	b130      	cbz	r0, da26a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da25c:	4623      	mov	r3, r4
   da25e:	463a      	mov	r2, r7
   da260:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   da262:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da264:	f7ff fd5c 	bl	d9d20 <vsnprintf>
        va_end(marker);
        result.len = n;
   da268:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   da26a:	4628      	mov	r0, r5
   da26c:	b004      	add	sp, #16
   da26e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da272:	b003      	add	sp, #12
   da274:	4770      	bx	lr
   da276:	bf00      	nop
   da278:	000e5ce1 	.word	0x000e5ce1

000da27c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   da27c:	680b      	ldr	r3, [r1, #0]
   da27e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   da280:	b113      	cbz	r3, da288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   da282:	685a      	ldr	r2, [r3, #4]
   da284:	3201      	adds	r2, #1
   da286:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   da288:	4770      	bx	lr
	...

000da28c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da28c:	4802      	ldr	r0, [pc, #8]	; (da298 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   da28e:	2300      	movs	r3, #0
   da290:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   da292:	f7ff bac7 	b.w	d9824 <os_mutex_recursive_create>
   da296:	bf00      	nop
   da298:	2003e280 	.word	0x2003e280

000da29c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da29e:	4606      	mov	r6, r0
   da2a0:	460d      	mov	r5, r1
   da2a2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   da2a4:	2400      	movs	r4, #0
  while (size--) {
   da2a6:	42bd      	cmp	r5, r7
   da2a8:	d00c      	beq.n	da2c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da2aa:	6833      	ldr	r3, [r6, #0]
   da2ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   da2b0:	689b      	ldr	r3, [r3, #8]
   da2b2:	4630      	mov	r0, r6
   da2b4:	4798      	blx	r3
     if (chunk>=0)
   da2b6:	2800      	cmp	r0, #0
   da2b8:	db01      	blt.n	da2be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da2ba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   da2bc:	e7f3      	b.n	da2a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da2be:	2c00      	cmp	r4, #0
   da2c0:	bf08      	it	eq
   da2c2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   da2c4:	4620      	mov	r0, r4
   da2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da2c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   da2c8:	b570      	push	{r4, r5, r6, lr}
   da2ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   da2cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   da2ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   da2d0:	b149      	cbz	r1, da2e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   da2d2:	f009 f993 	bl	e35fc <strlen>
   da2d6:	682b      	ldr	r3, [r5, #0]
   da2d8:	4602      	mov	r2, r0
   da2da:	4621      	mov	r1, r4
   da2dc:	4628      	mov	r0, r5
   da2de:	68db      	ldr	r3, [r3, #12]
    }
   da2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   da2e4:	4718      	bx	r3
    }
   da2e6:	bd70      	pop	{r4, r5, r6, pc}

000da2e8 <_ZN5Print5printEPKc>:
   da2e8:	b508      	push	{r3, lr}
   da2ea:	f7ff ffed 	bl	da2c8 <_ZN5Print5writeEPKc>
   da2ee:	bd08      	pop	{r3, pc}

000da2f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da2f0:	6803      	ldr	r3, [r0, #0]
   da2f2:	689b      	ldr	r3, [r3, #8]
   da2f4:	4718      	bx	r3

000da2f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da2f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da2f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da2fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   da2fc:	f7ff fff8 	bl	da2f0 <_ZN5Print5printEc>
  n += print('\n');
   da300:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   da302:	4604      	mov	r4, r0
  n += print('\n');
   da304:	4628      	mov	r0, r5
   da306:	f7ff fff3 	bl	da2f0 <_ZN5Print5printEc>
  return n;
}
   da30a:	4420      	add	r0, r4
   da30c:	bd38      	pop	{r3, r4, r5, pc}

000da30e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da30e:	b538      	push	{r3, r4, r5, lr}
   da310:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da312:	f7ff ffd9 	bl	da2c8 <_ZN5Print5writeEPKc>
   da316:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   da318:	4628      	mov	r0, r5
   da31a:	f7ff ffec 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da31e:	4420      	add	r0, r4
   da320:	bd38      	pop	{r3, r4, r5, pc}

000da322 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da322:	b530      	push	{r4, r5, lr}
   da324:	b08b      	sub	sp, #44	; 0x2c
   da326:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da328:	2100      	movs	r1, #0
   da32a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da32e:	2a01      	cmp	r2, #1
   da330:	bf98      	it	ls
   da332:	220a      	movls	r2, #10
   da334:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   da338:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   da33c:	fb05 3312 	mls	r3, r5, r2, r3
   da340:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da344:	2b09      	cmp	r3, #9
   da346:	bf94      	ite	ls
   da348:	3330      	addls	r3, #48	; 0x30
   da34a:	3337      	addhi	r3, #55	; 0x37
   da34c:	b2db      	uxtb	r3, r3
   da34e:	4621      	mov	r1, r4
   da350:	f804 3901 	strb.w	r3, [r4], #-1
   da354:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   da356:	2d00      	cmp	r5, #0
   da358:	d1ee      	bne.n	da338 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   da35a:	f7ff ffb5 	bl	da2c8 <_ZN5Print5writeEPKc>
}
   da35e:	b00b      	add	sp, #44	; 0x2c
   da360:	bd30      	pop	{r4, r5, pc}

000da362 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   da362:	b410      	push	{r4}
  if (base == 0) return write(n);
   da364:	b92a      	cbnz	r2, da372 <_ZN5Print5printEmi+0x10>
   da366:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   da368:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   da36c:	689b      	ldr	r3, [r3, #8]
   da36e:	b2c9      	uxtb	r1, r1
   da370:	4718      	bx	r3
  else return printNumber(n, base);
   da372:	b2d2      	uxtb	r2, r2
}
   da374:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da378:	f7ff bfd3 	b.w	da322 <_ZN5Print11printNumberEmh>

000da37c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   da37c:	f7ff bff1 	b.w	da362 <_ZN5Print5printEmi>

000da380 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   da380:	b538      	push	{r3, r4, r5, lr}
   da382:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   da384:	f7ff ffed 	bl	da362 <_ZN5Print5printEmi>
   da388:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   da38a:	4628      	mov	r0, r5
   da38c:	f7ff ffb3 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da390:	4420      	add	r0, r4
   da392:	bd38      	pop	{r3, r4, r5, pc}

000da394 <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   da394:	f7ff bfe5 	b.w	da362 <_ZN5Print5printEmi>

000da398 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
   da398:	b538      	push	{r3, r4, r5, lr}
   da39a:	4605      	mov	r5, r0
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   da39c:	f7ff ffe1 	bl	da362 <_ZN5Print5printEmi>
   da3a0:	4604      	mov	r4, r0
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
   da3a2:	4628      	mov	r0, r5
   da3a4:	f7ff ffa7 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da3a8:	4420      	add	r0, r4
   da3aa:	bd38      	pop	{r3, r4, r5, pc}

000da3ac <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   da3ac:	b538      	push	{r3, r4, r5, lr}
   da3ae:	4605      	mov	r5, r0
  size_t n = print(num, base);
   da3b0:	f7ff ffd7 	bl	da362 <_ZN5Print5printEmi>
   da3b4:	4604      	mov	r4, r0
  n += println();
   da3b6:	4628      	mov	r0, r5
   da3b8:	f7ff ff9d 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da3bc:	4420      	add	r0, r4
   da3be:	bd38      	pop	{r3, r4, r5, pc}

000da3c0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   da3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3c4:	4607      	mov	r7, r0
   da3c6:	460e      	mov	r6, r1
  if (base == 0) {
   da3c8:	4615      	mov	r5, r2
   da3ca:	b92a      	cbnz	r2, da3d8 <_ZN5Print5printEli+0x18>
    return write(n);
   da3cc:	6803      	ldr	r3, [r0, #0]
   da3ce:	b2c9      	uxtb	r1, r1
   da3d0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   da3d6:	4718      	bx	r3
  } else if (base == 10) {
   da3d8:	2a0a      	cmp	r2, #10
   da3da:	d102      	bne.n	da3e2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   da3dc:	2900      	cmp	r1, #0
   da3de:	da01      	bge.n	da3e4 <_ZN5Print5printEli+0x24>
   da3e0:	e004      	b.n	da3ec <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da3e2:	b2d2      	uxtb	r2, r2
  }
}
   da3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da3e8:	f7ff bf9b 	b.w	da322 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da3ec:	212d      	movs	r1, #45	; 0x2d
   da3ee:	f7ff ff7f 	bl	da2f0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   da3f2:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da3f4:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   da3f6:	4271      	negs	r1, r6
   da3f8:	4638      	mov	r0, r7
   da3fa:	f7ff ff92 	bl	da322 <_ZN5Print11printNumberEmh>
   da3fe:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da404 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   da404:	b538      	push	{r3, r4, r5, lr}
   da406:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da408:	f7ff ffda 	bl	da3c0 <_ZN5Print5printEli>
   da40c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   da40e:	4628      	mov	r0, r5
   da410:	f7ff ff71 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da414:	4420      	add	r0, r4
   da416:	bd38      	pop	{r3, r4, r5, pc}

000da418 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   da418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da41c:	ec57 6b10 	vmov	r6, r7, d0
   da420:	4682      	mov	sl, r0
   da422:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   da424:	ee10 2a10 	vmov	r2, s0
   da428:	463b      	mov	r3, r7
   da42a:	ee10 0a10 	vmov	r0, s0
   da42e:	4639      	mov	r1, r7
   da430:	f007 ff18 	bl	e2264 <__aeabi_dcmpun>
   da434:	b108      	cbz	r0, da43a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da436:	4948      	ldr	r1, [pc, #288]	; (da558 <_ZN5Print10printFloatEdh+0x140>)
   da438:	e012      	b.n	da460 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da43a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   da43e:	f04f 32ff 	mov.w	r2, #4294967295
   da442:	4b46      	ldr	r3, [pc, #280]	; (da55c <_ZN5Print10printFloatEdh+0x144>)
   da444:	4630      	mov	r0, r6
   da446:	4649      	mov	r1, r9
   da448:	f007 ff0c 	bl	e2264 <__aeabi_dcmpun>
   da44c:	b968      	cbnz	r0, da46a <_ZN5Print10printFloatEdh+0x52>
   da44e:	f04f 32ff 	mov.w	r2, #4294967295
   da452:	4b42      	ldr	r3, [pc, #264]	; (da55c <_ZN5Print10printFloatEdh+0x144>)
   da454:	4630      	mov	r0, r6
   da456:	4649      	mov	r1, r9
   da458:	f007 fee6 	bl	e2228 <__aeabi_dcmple>
   da45c:	b928      	cbnz	r0, da46a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da45e:	4940      	ldr	r1, [pc, #256]	; (da560 <_ZN5Print10printFloatEdh+0x148>)
   da460:	4650      	mov	r0, sl
   da462:	f7ff ff31 	bl	da2c8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   da46a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da46e:	4b3d      	ldr	r3, [pc, #244]	; (da564 <_ZN5Print10printFloatEdh+0x14c>)
   da470:	4630      	mov	r0, r6
   da472:	4639      	mov	r1, r7
   da474:	f007 feec 	bl	e2250 <__aeabi_dcmpgt>
   da478:	b108      	cbz	r0, da47e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da47a:	493b      	ldr	r1, [pc, #236]	; (da568 <_ZN5Print10printFloatEdh+0x150>)
   da47c:	e7f0      	b.n	da460 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   da47e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da482:	4b3a      	ldr	r3, [pc, #232]	; (da56c <_ZN5Print10printFloatEdh+0x154>)
   da484:	4630      	mov	r0, r6
   da486:	4639      	mov	r1, r7
   da488:	f007 fec4 	bl	e2214 <__aeabi_dcmplt>
   da48c:	2800      	cmp	r0, #0
   da48e:	d1f4      	bne.n	da47a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   da490:	2200      	movs	r2, #0
   da492:	2300      	movs	r3, #0
   da494:	4630      	mov	r0, r6
   da496:	4639      	mov	r1, r7
   da498:	f007 febc 	bl	e2214 <__aeabi_dcmplt>
   da49c:	b140      	cbz	r0, da4b0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   da49e:	212d      	movs	r1, #45	; 0x2d
   da4a0:	4650      	mov	r0, sl
   da4a2:	f7ff ff25 	bl	da2f0 <_ZN5Print5printEc>
     number = -number;
   da4a6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   da4aa:	4604      	mov	r4, r0
     number = -number;
   da4ac:	461f      	mov	r7, r3
   da4ae:	e000      	b.n	da4b2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da4b0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da4b2:	492f      	ldr	r1, [pc, #188]	; (da570 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da4b4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da4b8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   da4ba:	fa5f f388 	uxtb.w	r3, r8
   da4be:	429d      	cmp	r5, r3
   da4c0:	d906      	bls.n	da4d0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   da4c2:	2200      	movs	r2, #0
   da4c4:	4b2b      	ldr	r3, [pc, #172]	; (da574 <_ZN5Print10printFloatEdh+0x15c>)
   da4c6:	f007 fd5d 	bl	e1f84 <__aeabi_ddiv>
   da4ca:	f108 0801 	add.w	r8, r8, #1
   da4ce:	e7f4      	b.n	da4ba <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   da4d0:	4632      	mov	r2, r6
   da4d2:	463b      	mov	r3, r7
   da4d4:	f007 fa7a 	bl	e19cc <__adddf3>
   da4d8:	460f      	mov	r7, r1
   da4da:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da4dc:	f007 ff00 	bl	e22e0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da4e0:	220a      	movs	r2, #10
   da4e2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da4e4:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da4e6:	4650      	mov	r0, sl
   da4e8:	f7ff ff1b 	bl	da322 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da4ec:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   da4ee:	b37d      	cbz	r5, da550 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   da4f0:	4640      	mov	r0, r8
   da4f2:	f007 fba7 	bl	e1c44 <__aeabi_ui2d>
   da4f6:	4602      	mov	r2, r0
   da4f8:	460b      	mov	r3, r1
   da4fa:	4630      	mov	r0, r6
   da4fc:	4639      	mov	r1, r7
   da4fe:	f007 fa63 	bl	e19c8 <__aeabi_dsub>
   da502:	4606      	mov	r6, r0
   da504:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da506:	4650      	mov	r0, sl
   da508:	491b      	ldr	r1, [pc, #108]	; (da578 <_ZN5Print10printFloatEdh+0x160>)
   da50a:	f7ff fedd 	bl	da2c8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   da50e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   da510:	4b18      	ldr	r3, [pc, #96]	; (da574 <_ZN5Print10printFloatEdh+0x15c>)
   da512:	2200      	movs	r2, #0
   da514:	4630      	mov	r0, r6
   da516:	4639      	mov	r1, r7
   da518:	f007 fc0a 	bl	e1d30 <__aeabi_dmul>
   da51c:	460f      	mov	r7, r1
   da51e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   da520:	f007 feb6 	bl	e2290 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da524:	220a      	movs	r2, #10
   da526:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   da528:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da52a:	4650      	mov	r0, sl
   da52c:	f7ff ff48 	bl	da3c0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   da530:	4404      	add	r4, r0
    remainder -= toPrint;
   da532:	4640      	mov	r0, r8
   da534:	f007 fb96 	bl	e1c64 <__aeabi_i2d>
   da538:	4602      	mov	r2, r0
   da53a:	460b      	mov	r3, r1
   da53c:	4630      	mov	r0, r6
   da53e:	4639      	mov	r1, r7
   da540:	f007 fa42 	bl	e19c8 <__aeabi_dsub>
   da544:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da546:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   da54a:	4606      	mov	r6, r0
   da54c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da54e:	d1df      	bne.n	da510 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da550:	4620      	mov	r0, r4
   da552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da556:	bf00      	nop
   da558:	000e6adc 	.word	0x000e6adc
   da55c:	7fefffff 	.word	0x7fefffff
   da560:	000e6ae4 	.word	0x000e6ae4
   da564:	41efffff 	.word	0x41efffff
   da568:	000e6ae0 	.word	0x000e6ae0
   da56c:	c1efffff 	.word	0xc1efffff
   da570:	3fe00000 	.word	0x3fe00000
   da574:	40240000 	.word	0x40240000
   da578:	000e62fe 	.word	0x000e62fe

000da57c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da57c:	b2c9      	uxtb	r1, r1
   da57e:	f7ff bf4b 	b.w	da418 <_ZN5Print10printFloatEdh>

000da582 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   da582:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da584:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   da586:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   da588:	f7ff ff46 	bl	da418 <_ZN5Print10printFloatEdh>
   da58c:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   da58e:	4628      	mov	r0, r5
   da590:	f7ff feb1 	bl	da2f6 <_ZN5Print7printlnEv>
  return n;
}
   da594:	4420      	add	r0, r4
   da596:	bd38      	pop	{r3, r4, r5, pc}

000da598 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da598:	b40c      	push	{r2, r3}
   da59a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da59e:	b087      	sub	sp, #28
   da5a0:	af00      	add	r7, sp, #0
   da5a2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   da5a6:	4605      	mov	r5, r0
   da5a8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   da5ac:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da5ae:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   da5b0:	4623      	mov	r3, r4
   da5b2:	464a      	mov	r2, r9
   da5b4:	2114      	movs	r1, #20
   da5b6:	1d38      	adds	r0, r7, #4
   da5b8:	f7ff fbb2 	bl	d9d20 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   da5bc:	2813      	cmp	r0, #19
   da5be:	d805      	bhi.n	da5cc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da5c0:	1d39      	adds	r1, r7, #4
   da5c2:	4628      	mov	r0, r5
   da5c4:	f7ff fe80 	bl	da2c8 <_ZN5Print5writeEPKc>
   da5c8:	4604      	mov	r4, r0
   da5ca:	e013      	b.n	da5f4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da5cc:	f100 0308 	add.w	r3, r0, #8
   da5d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   da5d4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da5d6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   da5da:	1c41      	adds	r1, r0, #1
   da5dc:	4623      	mov	r3, r4
   da5de:	464a      	mov	r2, r9
   da5e0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   da5e2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   da5e4:	f7ff fb9c 	bl	d9d20 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da5e8:	4669      	mov	r1, sp
   da5ea:	4628      	mov	r0, r5
   da5ec:	f7ff fe6c 	bl	da2c8 <_ZN5Print5writeEPKc>
   da5f0:	4604      	mov	r4, r0
   da5f2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   da5f4:	b11e      	cbz	r6, da5fe <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   da5f6:	4628      	mov	r0, r5
   da5f8:	f7ff fe7d 	bl	da2f6 <_ZN5Print7printlnEv>
   da5fc:	4404      	add	r4, r0
    return n;
}
   da5fe:	4620      	mov	r0, r4
   da600:	371c      	adds	r7, #28
   da602:	46bd      	mov	sp, r7
   da604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da608:	b002      	add	sp, #8
   da60a:	4770      	bx	lr

000da60c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   da60c:	b510      	push	{r4, lr}
   da60e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   da610:	f7ff f8b8 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   da614:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   da616:	6823      	ldr	r3, [r4, #0]
   da618:	4620      	mov	r0, r4
   da61a:	695b      	ldr	r3, [r3, #20]
   da61c:	4798      	blx	r3
    if (c >= 0) return c;
   da61e:	2800      	cmp	r0, #0
   da620:	da08      	bge.n	da634 <_ZN6Stream9timedReadEv+0x28>
   da622:	f7ff f8af 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   da626:	68e3      	ldr	r3, [r4, #12]
   da628:	1ac0      	subs	r0, r0, r3
   da62a:	68a3      	ldr	r3, [r4, #8]
   da62c:	4298      	cmp	r0, r3
   da62e:	d3f2      	bcc.n	da616 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   da630:	f04f 30ff 	mov.w	r0, #4294967295
}
   da634:	bd10      	pop	{r4, pc}

000da636 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   da636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da63a:	4680      	mov	r8, r0
   da63c:	460d      	mov	r5, r1
   da63e:	188f      	adds	r7, r1, r2
   da640:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   da642:	42bc      	cmp	r4, r7
   da644:	eba4 0605 	sub.w	r6, r4, r5
   da648:	d007      	beq.n	da65a <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   da64a:	4640      	mov	r0, r8
   da64c:	f7ff ffde 	bl	da60c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   da650:	2800      	cmp	r0, #0
   da652:	db02      	blt.n	da65a <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   da654:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   da658:	e7f3      	b.n	da642 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   da65a:	4630      	mov	r0, r6
   da65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da660 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da660:	4b01      	ldr	r3, [pc, #4]	; (da668 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da662:	4a02      	ldr	r2, [pc, #8]	; (da66c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da664:	601a      	str	r2, [r3, #0]
   da666:	4770      	bx	lr
   da668:	2003e284 	.word	0x2003e284
   da66c:	000e6b5b 	.word	0x000e6b5b

000da670 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da670:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   da672:	4b14      	ldr	r3, [pc, #80]	; (da6c4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da674:	4f14      	ldr	r7, [pc, #80]	; (da6c8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da676:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   da678:	4b14      	ldr	r3, [pc, #80]	; (da6cc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da67a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   da67c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   da67e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   da680:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   da682:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da684:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da686:	d01b      	beq.n	da6c0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   da688:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   da68a:	ad01      	add	r5, sp, #4
   da68c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   da690:	f007 feec 	bl	e246c <localtime>
	calendar_time->tm_year += 1900;
   da694:	6943      	ldr	r3, [r0, #20]
   da696:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   da69a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   da69c:	4604      	mov	r4, r0
   da69e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da6a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da6a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da6a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da6a6:	f8d4 e000 	ldr.w	lr, [r4]
   da6aa:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6ae:	ad01      	add	r5, sp, #4
   da6b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da6b2:	4c07      	ldr	r4, [pc, #28]	; (da6d0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   da6b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da6b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da6ba:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6bc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   da6c0:	b00b      	add	sp, #44	; 0x2c
   da6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da6c4:	2003e2bc 	.word	0x2003e2bc
   da6c8:	2003e2b8 	.word	0x2003e2b8
   da6cc:	2003e2b4 	.word	0x2003e2b4
   da6d0:	2003e288 	.word	0x2003e288

000da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   da6d4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   da6d6:	2000      	movs	r0, #0
   da6d8:	f7ff fada 	bl	d9c90 <spark_sync_time_pending>
   da6dc:	b128      	cbz	r0, da6ea <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da6de:	f7ff fabf 	bl	d9c60 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   da6e2:	f080 0001 	eor.w	r0, r0, #1
   da6e6:	b2c0      	uxtb	r0, r0
   da6e8:	bd08      	pop	{r3, pc}
   da6ea:	2001      	movs	r0, #1
    }
   da6ec:	bd08      	pop	{r3, pc}
	...

000da6f0 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da6f0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da6f2:	f7ff ffbd 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   da6f6:	4b01      	ldr	r3, [pc, #4]	; (da6fc <_ZN9TimeClass4hourEl+0xc>)
   da6f8:	6898      	ldr	r0, [r3, #8]
   da6fa:	bd08      	pop	{r3, pc}
   da6fc:	2003e288 	.word	0x2003e288

000da700 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   da700:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da702:	f7ff ffb5 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   da706:	4b01      	ldr	r3, [pc, #4]	; (da70c <_ZN9TimeClass6minuteEl+0xc>)
   da708:	6858      	ldr	r0, [r3, #4]
   da70a:	bd08      	pop	{r3, pc}
   da70c:	2003e288 	.word	0x2003e288

000da710 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   da710:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da712:	f7ff ffad 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   da716:	4b01      	ldr	r3, [pc, #4]	; (da71c <_ZN9TimeClass6secondEl+0xc>)
   da718:	6818      	ldr	r0, [r3, #0]
   da71a:	bd08      	pop	{r3, pc}
   da71c:	2003e288 	.word	0x2003e288

000da720 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da720:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da722:	f7ff ffa5 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   da726:	4b01      	ldr	r3, [pc, #4]	; (da72c <_ZN9TimeClass3dayEl+0xc>)
   da728:	68d8      	ldr	r0, [r3, #12]
   da72a:	bd08      	pop	{r3, pc}
   da72c:	2003e288 	.word	0x2003e288

000da730 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da730:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da732:	f7ff ff9d 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da736:	4b02      	ldr	r3, [pc, #8]	; (da740 <_ZN9TimeClass7weekdayEl+0x10>)
   da738:	6998      	ldr	r0, [r3, #24]
}
   da73a:	3001      	adds	r0, #1
   da73c:	bd08      	pop	{r3, pc}
   da73e:	bf00      	nop
   da740:	2003e288 	.word	0x2003e288

000da744 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da744:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da746:	f7ff ff93 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da74a:	4b02      	ldr	r3, [pc, #8]	; (da754 <_ZN9TimeClass5monthEl+0x10>)
   da74c:	6918      	ldr	r0, [r3, #16]
}
   da74e:	3001      	adds	r0, #1
   da750:	bd08      	pop	{r3, pc}
   da752:	bf00      	nop
   da754:	2003e288 	.word	0x2003e288

000da758 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   da758:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da75a:	f7ff ff89 	bl	da670 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   da75e:	4b01      	ldr	r3, [pc, #4]	; (da764 <_ZN9TimeClass4yearEl+0xc>)
   da760:	6958      	ldr	r0, [r3, #20]
   da762:	bd08      	pop	{r3, pc}
   da764:	2003e288 	.word	0x2003e288

000da768 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da768:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   da76a:	4b0e      	ldr	r3, [pc, #56]	; (da7a4 <_ZN9TimeClass7timeStrEl+0x3c>)
   da76c:	681b      	ldr	r3, [r3, #0]
   da76e:	4419      	add	r1, r3
   da770:	4b0d      	ldr	r3, [pc, #52]	; (da7a8 <_ZN9TimeClass7timeStrEl+0x40>)
   da772:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da774:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   da776:	a802      	add	r0, sp, #8
   da778:	4419      	add	r1, r3
   da77a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   da77e:	f007 fe75 	bl	e246c <localtime>
        char* ascstr = asctime(calendar_time);
   da782:	f007 fe1d 	bl	e23c0 <asctime>
   da786:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   da788:	f008 ff38 	bl	e35fc <strlen>
        ascstr[len-1] = 0; // remove final newline
   da78c:	4428      	add	r0, r5
   da78e:	2300      	movs	r3, #0
   da790:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   da794:	4629      	mov	r1, r5
   da796:	4620      	mov	r0, r4
   da798:	f7ff fc37 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
}
   da79c:	4620      	mov	r0, r4
   da79e:	b003      	add	sp, #12
   da7a0:	bd30      	pop	{r4, r5, pc}
   da7a2:	bf00      	nop
   da7a4:	2003e2bc 	.word	0x2003e2bc
   da7a8:	2003e2b4 	.word	0x2003e2b4

000da7ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da7b0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   da7b2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7b4:	4607      	mov	r7, r0
   da7b6:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   da7b8:	4620      	mov	r0, r4
   da7ba:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7bc:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   da7be:	f008 f9e5 	bl	e2b8c <strcpy>
    size_t len = strlen(format_str);
   da7c2:	4620      	mov	r0, r4
   da7c4:	f008 ff1a 	bl	e35fc <strlen>
   da7c8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da7ca:	b925      	cbnz	r5, da7d6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   da7cc:	4924      	ldr	r1, [pc, #144]	; (da860 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   da7ce:	a803      	add	r0, sp, #12
   da7d0:	f008 f9dc 	bl	e2b8c <strcpy>
   da7d4:	e013      	b.n	da7fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da7d6:	213c      	movs	r1, #60	; 0x3c
   da7d8:	fb95 f2f1 	sdiv	r2, r5, r1
   da7dc:	2a00      	cmp	r2, #0
   da7de:	bfb8      	it	lt
   da7e0:	4252      	neglt	r2, r2
   da7e2:	fb92 f3f1 	sdiv	r3, r2, r1
   da7e6:	fb01 2213 	mls	r2, r1, r3, r2
   da7ea:	9200      	str	r2, [sp, #0]
   da7ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da7f0:	4a1c      	ldr	r2, [pc, #112]	; (da864 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   da7f2:	fb95 f3f3 	sdiv	r3, r5, r3
   da7f6:	2110      	movs	r1, #16
   da7f8:	a803      	add	r0, sp, #12
   da7fa:	f7ff fa81 	bl	d9d00 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7fe:	4625      	mov	r5, r4
   da800:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da802:	f108 3aff 	add.w	sl, r8, #4294967295
   da806:	45b2      	cmp	sl, r6
   da808:	d91b      	bls.n	da842 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da80a:	782b      	ldrb	r3, [r5, #0]
   da80c:	2b25      	cmp	r3, #37	; 0x25
   da80e:	d116      	bne.n	da83e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   da810:	786b      	ldrb	r3, [r5, #1]
   da812:	2b7a      	cmp	r3, #122	; 0x7a
   da814:	d113      	bne.n	da83e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   da816:	a803      	add	r0, sp, #12
   da818:	f008 fef0 	bl	e35fc <strlen>
   da81c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da81e:	4430      	add	r0, r6
   da820:	ebc6 020a 	rsb	r2, r6, sl
   da824:	1ca9      	adds	r1, r5, #2
   da826:	4420      	add	r0, r4
   da828:	f007 ff1c 	bl	e2664 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da82c:	4642      	mov	r2, r8
   da82e:	a903      	add	r1, sp, #12
   da830:	4628      	mov	r0, r5
   da832:	f007 ff17 	bl	e2664 <memcpy>
            len = strlen(format_str);
   da836:	4620      	mov	r0, r4
   da838:	f008 fee0 	bl	e35fc <strlen>
   da83c:	4680      	mov	r8, r0
   da83e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da840:	e7de      	b.n	da800 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   da842:	464b      	mov	r3, r9
   da844:	4622      	mov	r2, r4
   da846:	2132      	movs	r1, #50	; 0x32
   da848:	a807      	add	r0, sp, #28
   da84a:	f008 fa23 	bl	e2c94 <strftime>
    return String(buf);
   da84e:	a907      	add	r1, sp, #28
   da850:	4638      	mov	r0, r7
   da852:	f7ff fbda 	bl	da00a <_ZN6StringC1EPK19__FlashStringHelper>
}
   da856:	4638      	mov	r0, r7
   da858:	b024      	add	sp, #144	; 0x90
   da85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da85e:	bf00      	nop
   da860:	000e75e5 	.word	0x000e75e5
   da864:	000e6baf 	.word	0x000e6baf

000da868 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   da868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da86a:	4605      	mov	r5, r0
   da86c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   da86e:	461c      	mov	r4, r3
   da870:	b913      	cbnz	r3, da878 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   da872:	4b12      	ldr	r3, [pc, #72]	; (da8bc <_ZN9TimeClass6formatElPKc+0x54>)
   da874:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   da876:	b12c      	cbz	r4, da884 <_ZN9TimeClass6formatElPKc+0x1c>
   da878:	4b11      	ldr	r3, [pc, #68]	; (da8c0 <_ZN9TimeClass6formatElPKc+0x58>)
   da87a:	4620      	mov	r0, r4
   da87c:	6819      	ldr	r1, [r3, #0]
   da87e:	f008 f97b 	bl	e2b78 <strcmp>
   da882:	b920      	cbnz	r0, da88e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   da884:	9901      	ldr	r1, [sp, #4]
   da886:	4628      	mov	r0, r5
   da888:	f7ff ff6e 	bl	da768 <_ZN9TimeClass7timeStrEl>
   da88c:	e013      	b.n	da8b6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   da88e:	4f0d      	ldr	r7, [pc, #52]	; (da8c4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   da890:	9a01      	ldr	r2, [sp, #4]
   da892:	683b      	ldr	r3, [r7, #0]
   da894:	4e0c      	ldr	r6, [pc, #48]	; (da8c8 <_ZN9TimeClass6formatElPKc+0x60>)
   da896:	441a      	add	r2, r3
   da898:	6833      	ldr	r3, [r6, #0]
   da89a:	a802      	add	r0, sp, #8
   da89c:	4413      	add	r3, r2
   da89e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   da8a2:	f007 fde3 	bl	e246c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da8a6:	683a      	ldr	r2, [r7, #0]
   da8a8:	6833      	ldr	r3, [r6, #0]
   da8aa:	4601      	mov	r1, r0
   da8ac:	4413      	add	r3, r2
   da8ae:	4628      	mov	r0, r5
   da8b0:	4622      	mov	r2, r4
   da8b2:	f7ff ff7b 	bl	da7ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   da8b6:	4628      	mov	r0, r5
   da8b8:	b003      	add	sp, #12
   da8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da8bc:	2003e2b0 	.word	0x2003e2b0
   da8c0:	2003d630 	.word	0x2003d630
   da8c4:	2003e2bc 	.word	0x2003e2bc
   da8c8:	2003e2b4 	.word	0x2003e2b4

000da8cc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   da8cc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   da8ce:	2000      	movs	r0, #0
   da8d0:	f7fe ff68 	bl	d97a4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   da8d4:	4604      	mov	r4, r0
   da8d6:	b968      	cbnz	r0, da8f4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da8d8:	f7ff f90e 	bl	d9af8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da8dc:	2801      	cmp	r0, #1
   da8de:	d10b      	bne.n	da8f8 <_ZN9TimeClass7isValidEv+0x2c>
   da8e0:	4620      	mov	r0, r4
   da8e2:	f7ff f939 	bl	d9b58 <system_thread_get_state>
   da8e6:	b938      	cbnz	r0, da8f8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   da8e8:	f7ff fef4 	bl	da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da8ec:	b930      	cbnz	r0, da8fc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   da8ee:	f7ff f9a7 	bl	d9c40 <spark_process>
   da8f2:	e7f9      	b.n	da8e8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   da8f4:	2001      	movs	r0, #1
   da8f6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   da8f8:	2000      	movs	r0, #0
   da8fa:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   da8fc:	f7ff feea 	bl	da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   da900:	2000      	movs	r0, #0
   da902:	f7fe ff4f 	bl	d97a4 <HAL_RTC_Time_Is_Valid>
   da906:	3000      	adds	r0, #0
   da908:	bf18      	it	ne
   da90a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   da90c:	bd10      	pop	{r4, pc}

000da90e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   da90e:	b508      	push	{r3, lr}
    (void)isValid();
   da910:	f7ff ffdc 	bl	da8cc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   da914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   da918:	f7fe bf3c 	b.w	d9794 <HAL_RTC_Get_UnixTime>

000da91c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da91c:	4b02      	ldr	r3, [pc, #8]	; (da928 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da91e:	681a      	ldr	r2, [r3, #0]
   da920:	4b02      	ldr	r3, [pc, #8]	; (da92c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da922:	601a      	str	r2, [r3, #0]
   da924:	4770      	bx	lr
   da926:	bf00      	nop
   da928:	2003d630 	.word	0x2003d630
   da92c:	2003e2b0 	.word	0x2003e2b0

000da930 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da930:	2100      	movs	r1, #0
   da932:	f7ff b8f1 	b.w	d9b18 <system_delay_ms>

000da936 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da936:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da938:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da93a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da93c:	689b      	ldr	r3, [r3, #8]
   da93e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da940:	68a3      	ldr	r3, [r4, #8]
   da942:	3b01      	subs	r3, #1
   da944:	60a3      	str	r3, [r4, #8]
   da946:	b92b      	cbnz	r3, da954 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   da948:	6823      	ldr	r3, [r4, #0]
   da94a:	4620      	mov	r0, r4
   da94c:	68db      	ldr	r3, [r3, #12]
        }
    }
   da94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da952:	4718      	bx	r3
   da954:	bd10      	pop	{r4, pc}
	...

000da958 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   da958:	b510      	push	{r4, lr}
   da95a:	4b06      	ldr	r3, [pc, #24]	; (da974 <_ZN9TCPClientD1Ev+0x1c>)
   da95c:	6003      	str	r3, [r0, #0]
   da95e:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da960:	6980      	ldr	r0, [r0, #24]
   da962:	b128      	cbz	r0, da970 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da964:	6843      	ldr	r3, [r0, #4]
   da966:	3b01      	subs	r3, #1
   da968:	6043      	str	r3, [r0, #4]
   da96a:	b90b      	cbnz	r3, da970 <_ZN9TCPClientD1Ev+0x18>
   da96c:	f7ff ffe3 	bl	da936 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   da970:	4620      	mov	r0, r4
   da972:	bd10      	pop	{r4, pc}
   da974:	000e6ce8 	.word	0x000e6ce8

000da978 <_ZN9TCPClientD0Ev>:
   da978:	b510      	push	{r4, lr}
   da97a:	4604      	mov	r4, r0
   da97c:	f7ff ffec 	bl	da958 <_ZN9TCPClientD1Ev>
   da980:	4620      	mov	r0, r4
   da982:	211c      	movs	r1, #28
   da984:	f001 fbd3 	bl	dc12e <_ZdlPvj>
   da988:	4620      	mov	r0, r4
   da98a:	bd10      	pop	{r4, pc}

000da98c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   da98c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   da98e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   da990:	4604      	mov	r4, r0
    {
      if (_M_manager)
   da992:	b113      	cbz	r3, da99a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da994:	2203      	movs	r2, #3
   da996:	4601      	mov	r1, r0
   da998:	4798      	blx	r3
    }
   da99a:	4620      	mov	r0, r4
   da99c:	bd10      	pop	{r4, pc}

000da99e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da99e:	b510      	push	{r4, lr}
   da9a0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   da9a2:	f7ff fff3 	bl	da98c <_ZNSt14_Function_baseD1Ev>
   da9a6:	4620      	mov	r0, r4
   da9a8:	bd10      	pop	{r4, pc}

000da9aa <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   da9aa:	b513      	push	{r0, r1, r4, lr}
   da9ac:	460b      	mov	r3, r1
   da9ae:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da9b0:	c803      	ldmia	r0, {r0, r1}
   da9b2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da9b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   da9ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da9be:	e89d 0003 	ldmia.w	sp, {r0, r1}
   da9c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da9c6:	b002      	add	sp, #8
   da9c8:	bd10      	pop	{r4, pc}
	...

000da9cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da9cc:	4803      	ldr	r0, [pc, #12]	; (da9dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da9ce:	4a04      	ldr	r2, [pc, #16]	; (da9e0 <_GLOBAL__sub_I_RGB+0x14>)
   da9d0:	4904      	ldr	r1, [pc, #16]	; (da9e4 <_GLOBAL__sub_I_RGB+0x18>)
   da9d2:	2300      	movs	r3, #0
   da9d4:	6083      	str	r3, [r0, #8]
   da9d6:	f001 bba5 	b.w	dc124 <__aeabi_atexit>
   da9da:	bf00      	nop
   da9dc:	2003e2c0 	.word	0x2003e2c0
   da9e0:	2003d728 	.word	0x2003d728
   da9e4:	000da99f 	.word	0x000da99f

000da9e8 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   da9e8:	6800      	ldr	r0, [r0, #0]
   da9ea:	f000 bd9e 	b.w	db52a <_ZN7TwoWire4lockEv>

000da9ee <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   da9ee:	b510      	push	{r4, lr}
   da9f0:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   da9f2:	6001      	str	r1, [r0, #0]
   da9f4:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   da9f6:	b10a      	cbz	r2, da9fc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   da9f8:	f7ff fff6 	bl	da9e8 <_ZN9FuelGauge4lockEv>
    }
}
   da9fc:	4620      	mov	r0, r4
   da9fe:	bd10      	pop	{r4, pc}

000daa00 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   daa00:	b538      	push	{r3, r4, r5, lr}
   daa02:	4604      	mov	r4, r0
   daa04:	460d      	mov	r5, r1
        }
#endif // Wiring_Wire3
    }
#endif // HAL_PLATFORM_FUELGAUGE_MAX17043

    return &Wire;
   daa06:	f001 fb6d 	bl	dc0e4 <_Z19__fetch_global_Wirev>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   daa0a:	462a      	mov	r2, r5
   daa0c:	4601      	mov	r1, r0
   daa0e:	4620      	mov	r0, r4
   daa10:	f7ff ffed 	bl	da9ee <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   daa14:	4620      	mov	r0, r4
   daa16:	bd38      	pop	{r3, r4, r5, pc}

000daa18 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   daa18:	6800      	ldr	r0, [r0, #0]
   daa1a:	f000 bd8f 	b.w	db53c <_ZN7TwoWire6unlockEv>

000daa1e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   daa1e:	b510      	push	{r4, lr}
{
    if (lock_) {
   daa20:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   daa22:	4604      	mov	r4, r0
{
    if (lock_) {
   daa24:	b10b      	cbz	r3, daa2a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   daa26:	f7ff fff7 	bl	daa18 <_ZN9FuelGauge6unlockEv>
    }
}
   daa2a:	4620      	mov	r0, r4
   daa2c:	bd10      	pop	{r4, pc}
	...

000daa30 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   daa30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   daa32:	4b0c      	ldr	r3, [pc, #48]	; (daa64 <serialEventRun+0x34>)
   daa34:	b133      	cbz	r3, daa44 <serialEventRun+0x14>
   daa36:	f000 fc13 	bl	db260 <_Z16_fetch_usbserialv>
   daa3a:	6803      	ldr	r3, [r0, #0]
   daa3c:	691b      	ldr	r3, [r3, #16]
   daa3e:	4798      	blx	r3
   daa40:	2800      	cmp	r0, #0
   daa42:	dc09      	bgt.n	daa58 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   daa44:	4b08      	ldr	r3, [pc, #32]	; (daa68 <serialEventRun+0x38>)
   daa46:	b163      	cbz	r3, daa62 <serialEventRun+0x32>
   daa48:	f000 fcbc 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   daa4c:	6803      	ldr	r3, [r0, #0]
   daa4e:	691b      	ldr	r3, [r3, #16]
   daa50:	4798      	blx	r3
   daa52:	2800      	cmp	r0, #0
   daa54:	dc03      	bgt.n	daa5e <serialEventRun+0x2e>
   daa56:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   daa58:	f3af 8000 	nop.w
   daa5c:	e7f2      	b.n	daa44 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   daa5e:	f3af 8000 	nop.w
   daa62:	bd08      	pop	{r3, pc}
	...

000daa6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   daa6c:	b508      	push	{r3, lr}
	serialEventRun();
   daa6e:	f7ff ffdf 	bl	daa30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   daa72:	f7fe fe87 	bl	d9784 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   daa76:	4b01      	ldr	r3, [pc, #4]	; (daa7c <_post_loop+0x10>)
   daa78:	6018      	str	r0, [r3, #0]
   daa7a:	bd08      	pop	{r3, pc}
   daa7c:	2003e610 	.word	0x2003e610

000daa80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   daa80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   daa82:	2300      	movs	r3, #0
   daa84:	9300      	str	r3, [sp, #0]
   daa86:	461a      	mov	r2, r3
   daa88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   daa8c:	f7ff f87e 	bl	d9b8c <system_ctrl_set_result>
}
   daa90:	b003      	add	sp, #12
   daa92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daa98 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   daa98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   daa9a:	8843      	ldrh	r3, [r0, #2]
   daa9c:	2b0a      	cmp	r3, #10
   daa9e:	d008      	beq.n	daab2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   daaa0:	2b50      	cmp	r3, #80	; 0x50
   daaa2:	d109      	bne.n	daab8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   daaa4:	4b09      	ldr	r3, [pc, #36]	; (daacc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   daaa6:	681b      	ldr	r3, [r3, #0]
   daaa8:	b13b      	cbz	r3, daaba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   daaaa:	b003      	add	sp, #12
   daaac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   daab0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   daab2:	f7ff ffe5 	bl	daa80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   daab6:	e006      	b.n	daac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   daab8:	2300      	movs	r3, #0
   daaba:	9300      	str	r3, [sp, #0]
   daabc:	461a      	mov	r2, r3
   daabe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   daac2:	f7ff f863 	bl	d9b8c <system_ctrl_set_result>
        break;
    }
}
   daac6:	b003      	add	sp, #12
   daac8:	f85d fb04 	ldr.w	pc, [sp], #4
   daacc:	2003e2d0 	.word	0x2003e2d0

000daad0 <module_user_init_hook>:

void module_user_init_hook()
{
   daad0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   daad2:	f7fe fe4f 	bl	d9774 <HAL_RNG_GetRandomNumber>
   daad6:	4604      	mov	r4, r0
    srand(seed);
   daad8:	f008 f826 	bl	e2b28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   daadc:	4b07      	ldr	r3, [pc, #28]	; (daafc <module_user_init_hook+0x2c>)
   daade:	b113      	cbz	r3, daae6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   daae0:	4620      	mov	r0, r4
   daae2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   daae6:	2100      	movs	r1, #0
   daae8:	4804      	ldr	r0, [pc, #16]	; (daafc <module_user_init_hook+0x2c>)
   daaea:	f7ff f8d9 	bl	d9ca0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   daaee:	2100      	movs	r1, #0
   daaf0:	4803      	ldr	r0, [pc, #12]	; (dab00 <module_user_init_hook+0x30>)
}
   daaf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   daaf6:	f7ff b83f 	b.w	d9b78 <system_ctrl_set_app_request_handler>
   daafa:	bf00      	nop
   daafc:	00000000 	.word	0x00000000
   dab00:	000daa99 	.word	0x000daa99

000dab04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dab04:	4770      	bx	lr

000dab06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dab06:	2000      	movs	r0, #0
   dab08:	4770      	bx	lr

000dab0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dab0a:	b510      	push	{r4, lr}
   dab0c:	2110      	movs	r1, #16
   dab0e:	4604      	mov	r4, r0
   dab10:	f001 fb0d 	bl	dc12e <_ZdlPvj>
   dab14:	4620      	mov	r0, r4
   dab16:	bd10      	pop	{r4, pc}

000dab18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dab18:	b508      	push	{r3, lr}
      { delete this; }
   dab1a:	b108      	cbz	r0, dab20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dab1c:	f7ff fff5 	bl	dab0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dab20:	bd08      	pop	{r3, pc}

000dab22 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dab22:	2200      	movs	r2, #0
   dab24:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dab26:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dab28:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dab2c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dab2e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dab32:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dab34:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab36:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dab38:	680c      	ldr	r4, [r1, #0]
   dab3a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dab3c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dab3e:	bd10      	pop	{r4, pc}

000dab40 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dab40:	b510      	push	{r4, lr}
   dab42:	4604      	mov	r4, r0
    free((void*)msg_);
   dab44:	6800      	ldr	r0, [r0, #0]
   dab46:	f7ff f8bb 	bl	d9cc0 <free>
}
   dab4a:	4620      	mov	r0, r4
   dab4c:	bd10      	pop	{r4, pc}

000dab4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dab4e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dab50:	68c4      	ldr	r4, [r0, #12]
   dab52:	b1f4      	cbz	r4, dab92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dab54:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dab56:	2b02      	cmp	r3, #2
   dab58:	d103      	bne.n	dab62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dab5a:	f104 000c 	add.w	r0, r4, #12
   dab5e:	f7ff ffef 	bl	dab40 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dab62:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dab64:	b135      	cbz	r5, dab74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dab66:	4628      	mov	r0, r5
   dab68:	f7ff ff10 	bl	da98c <_ZNSt14_Function_baseD1Ev>
   dab6c:	2110      	movs	r1, #16
   dab6e:	4628      	mov	r0, r5
   dab70:	f001 fadd 	bl	dc12e <_ZdlPvj>
   dab74:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dab76:	b135      	cbz	r5, dab86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dab78:	4628      	mov	r0, r5
   dab7a:	f7ff ff07 	bl	da98c <_ZNSt14_Function_baseD1Ev>
   dab7e:	2110      	movs	r1, #16
   dab80:	4628      	mov	r0, r5
   dab82:	f001 fad4 	bl	dc12e <_ZdlPvj>
   dab86:	4620      	mov	r0, r4
   dab88:	2114      	movs	r1, #20
   dab8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dab8e:	f001 bace 	b.w	dc12e <_ZdlPvj>
   dab92:	bd38      	pop	{r3, r4, r5, pc}

000dab94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dab94:	b513      	push	{r0, r1, r4, lr}
   dab96:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dab98:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dab9c:	2300      	movs	r3, #0
   dab9e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   daba0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   daba2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   daba4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   daba6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   daba8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dabaa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dabac:	f7fa fee0 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dabb0:	4620      	mov	r0, r4
   dabb2:	b002      	add	sp, #8
   dabb4:	bd10      	pop	{r4, pc}

000dabb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dabb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dabb8:	460c      	mov	r4, r1
   dabba:	ad02      	add	r5, sp, #8
   dabbc:	f854 3b04 	ldr.w	r3, [r4], #4
   dabc0:	f845 3d08 	str.w	r3, [r5, #-8]!
   dabc4:	4606      	mov	r6, r0
   dabc6:	460f      	mov	r7, r1
   dabc8:	a801      	add	r0, sp, #4
   dabca:	4621      	mov	r1, r4
   dabcc:	f7ff fb56 	bl	da27c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dabd0:	4629      	mov	r1, r5
   dabd2:	4630      	mov	r0, r6
   dabd4:	f7ff ffde 	bl	dab94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dabd8:	a801      	add	r0, sp, #4
   dabda:	f7fa fec9 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dabde:	4620      	mov	r0, r4
   dabe0:	f7fa fec6 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dabe4:	4638      	mov	r0, r7
   dabe6:	2108      	movs	r1, #8
   dabe8:	f001 faa1 	bl	dc12e <_ZdlPvj>
        return p;
    }
   dabec:	4630      	mov	r0, r6
   dabee:	b003      	add	sp, #12
   dabf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dabf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dabf4:	b538      	push	{r3, r4, r5, lr}
   dabf6:	2300      	movs	r3, #0
   dabf8:	4604      	mov	r4, r0
   dabfa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dabfc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dabfe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dac00:	f7f9 fa4b 	bl	d409a <_Znwj>
   dac04:	b128      	cbz	r0, dac12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dac06:	2301      	movs	r3, #1
   dac08:	6043      	str	r3, [r0, #4]
   dac0a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dac0c:	4b02      	ldr	r3, [pc, #8]	; (dac18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dac0e:	6003      	str	r3, [r0, #0]
   dac10:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dac12:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dac14:	4620      	mov	r0, r4
   dac16:	bd38      	pop	{r3, r4, r5, pc}
   dac18:	000e6be0 	.word	0x000e6be0

000dac1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dac1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dac1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dac20:	b90a      	cbnz	r2, dac26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dac22:	f001 fa86 	bl	dc132 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac26:	68c3      	ldr	r3, [r0, #12]
    }
   dac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac2c:	4718      	bx	r3

000dac2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dac2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dac30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dac32:	f100 0110 	add.w	r1, r0, #16
   dac36:	f7ff fff1 	bl	dac1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dac3a:	bd08      	pop	{r3, pc}

000dac3c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dac3c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dac3e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dac40:	b90a      	cbnz	r2, dac46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dac42:	f001 fa76 	bl	dc132 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac46:	68c3      	ldr	r3, [r0, #12]
    }
   dac48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac4c:	4718      	bx	r3

000dac4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dac4e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dac50:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dac52:	f100 0110 	add.w	r1, r0, #16
   dac56:	f7ff fff1 	bl	dac3c <_ZNKSt8functionIFvRKbEEclES1_>
   dac5a:	bd08      	pop	{r3, pc}

000dac5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dac5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dac5e:	2300      	movs	r3, #0
   dac60:	6083      	str	r3, [r0, #8]
   dac62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dac64:	4604      	mov	r4, r0
   dac66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dac68:	b12b      	cbz	r3, dac76 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dac6a:	2202      	movs	r2, #2
   dac6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dac6e:	68eb      	ldr	r3, [r5, #12]
   dac70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dac72:	68ab      	ldr	r3, [r5, #8]
   dac74:	60a3      	str	r3, [r4, #8]
	}
    }
   dac76:	4620      	mov	r0, r4
   dac78:	bd38      	pop	{r3, r4, r5, pc}
	...

000dac7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dac7e:	b089      	sub	sp, #36	; 0x24
   dac80:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dac82:	4668      	mov	r0, sp
   dac84:	f7ff ff4d 	bl	dab22 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dac88:	2300      	movs	r3, #0
   dac8a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dac8e:	f04f 0202 	mov.w	r2, #2
   dac92:	e8d4 3f4f 	ldrexb	r3, [r4]
   dac96:	2b00      	cmp	r3, #0
   dac98:	d103      	bne.n	daca2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dac9a:	e8c4 2f41 	strexb	r1, r2, [r4]
   dac9e:	2900      	cmp	r1, #0
   daca0:	d1f7      	bne.n	dac92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   daca2:	d002      	beq.n	dacaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   daca4:	f88d 3008 	strb.w	r3, [sp, #8]
   daca8:	e063      	b.n	dad72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dacaa:	f114 050c 	adds.w	r5, r4, #12
   dacae:	d003      	beq.n	dacb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dacb0:	4669      	mov	r1, sp
   dacb2:	4628      	mov	r0, r5
   dacb4:	f7ff ff35 	bl	dab22 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dacb8:	f3bf 8f5f 	dmb	sy
   dacbc:	2301      	movs	r3, #1
   dacbe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dacc0:	2000      	movs	r0, #0
   dacc2:	f104 0308 	add.w	r3, r4, #8
   dacc6:	f3bf 8f5f 	dmb	sy
   dacca:	e853 6f00 	ldrex	r6, [r3]
   dacce:	e843 0200 	strex	r2, r0, [r3]
   dacd2:	2a00      	cmp	r2, #0
   dacd4:	d1f9      	bne.n	dacca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dacd6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dacda:	2e00      	cmp	r6, #0
   dacdc:	d049      	beq.n	dad72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dacde:	f7fe ff2b 	bl	d9b38 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dace2:	b120      	cbz	r0, dacee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dace4:	4629      	mov	r1, r5
   dace6:	4630      	mov	r0, r6
   dace8:	f7ff ff98 	bl	dac1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dacec:	e03a      	b.n	dad64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dacee:	4631      	mov	r1, r6
   dacf0:	a802      	add	r0, sp, #8
   dacf2:	f7ff ffb3 	bl	dac5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dacf6:	68e0      	ldr	r0, [r4, #12]
   dacf8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dacfc:	b108      	cbz	r0, dad02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dacfe:	f007 ff4d 	bl	e2b9c <strdup>
   dad02:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dad04:	2010      	movs	r0, #16
   dad06:	f8ad 501c 	strh.w	r5, [sp, #28]
   dad0a:	f7f9 f9c6 	bl	d409a <_Znwj>
   dad0e:	4605      	mov	r5, r0
   dad10:	b1e8      	cbz	r0, dad4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dad12:	2700      	movs	r7, #0
   dad14:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad16:	2018      	movs	r0, #24
   dad18:	f7f9 f9bf 	bl	d409a <_Znwj>
   dad1c:	4604      	mov	r4, r0
   dad1e:	b188      	cbz	r0, dad44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dad20:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dad22:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dad24:	a802      	add	r0, sp, #8
   dad26:	f7ff fe40 	bl	da9aa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad2a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dad2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dad2e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad30:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dad32:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dad34:	a906      	add	r1, sp, #24
   dad36:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dad38:	60e3      	str	r3, [r4, #12]
   dad3a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dad3e:	9205      	str	r2, [sp, #20]
   dad40:	f7ff feef 	bl	dab22 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dad44:	4b0d      	ldr	r3, [pc, #52]	; (dad7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dad46:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dad48:	4b0d      	ldr	r3, [pc, #52]	; (dad80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad4a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dad4c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dad4e:	a806      	add	r0, sp, #24
   dad50:	f7ff fef6 	bl	dab40 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dad54:	a802      	add	r0, sp, #8
   dad56:	f7ff fe19 	bl	da98c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dad5a:	2200      	movs	r2, #0
   dad5c:	4629      	mov	r1, r5
   dad5e:	4809      	ldr	r0, [pc, #36]	; (dad84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dad60:	f7fe fef2 	bl	d9b48 <application_thread_invoke>
   dad64:	4630      	mov	r0, r6
   dad66:	f7ff fe11 	bl	da98c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dad6a:	2110      	movs	r1, #16
   dad6c:	4630      	mov	r0, r6
   dad6e:	f001 f9de 	bl	dc12e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dad72:	4668      	mov	r0, sp
   dad74:	f7ff fee4 	bl	dab40 <_ZN8particle5ErrorD1Ev>
    }
   dad78:	b009      	add	sp, #36	; 0x24
   dad7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dad7c:	000dac2f 	.word	0x000dac2f
   dad80:	000daea5 	.word	0x000daea5
   dad84:	000db411 	.word	0x000db411

000dad88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad8c:	b08b      	sub	sp, #44	; 0x2c
   dad8e:	4606      	mov	r6, r0
   dad90:	460f      	mov	r7, r1
   dad92:	4690      	mov	r8, r2
   dad94:	4699      	mov	r9, r3
   dad96:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dad9a:	f7fe ff61 	bl	d9c60 <spark_cloud_flag_connected>
   dad9e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   dada0:	4683      	mov	fp, r0
   dada2:	bb30      	cbnz	r0, dadf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dada4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dada8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dadaa:	a905      	add	r1, sp, #20
   dadac:	4628      	mov	r0, r5
   dadae:	f8ad 3018 	strh.w	r3, [sp, #24]
   dadb2:	f7ff feb6 	bl	dab22 <_ZN8particle5ErrorC1EOS0_>
   dadb6:	2014      	movs	r0, #20
   dadb8:	f7f9 f96f 	bl	d409a <_Znwj>
   dadbc:	4604      	mov	r4, r0
   dadbe:	b158      	cbz	r0, dadd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dadc0:	2302      	movs	r3, #2
   dadc2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dadc4:	2301      	movs	r3, #1
   dadc6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dadc8:	f8c0 b004 	str.w	fp, [r0, #4]
   dadcc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dadd0:	4629      	mov	r1, r5
   dadd2:	300c      	adds	r0, #12
   dadd4:	f7ff fea5 	bl	dab22 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dadd8:	4630      	mov	r0, r6
   dadda:	4621      	mov	r1, r4
   daddc:	f840 4b04 	str.w	r4, [r0], #4
   dade0:	f7ff ff08 	bl	dabf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dade4:	4628      	mov	r0, r5
   dade6:	f7ff feab 	bl	dab40 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dadea:	a805      	add	r0, sp, #20
   dadec:	f7ff fea8 	bl	dab40 <_ZN8particle5ErrorD1Ev>
   dadf0:	e052      	b.n	dae98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dadf2:	2400      	movs	r4, #0
   dadf4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dadf6:	2014      	movs	r0, #20
   dadf8:	606c      	str	r4, [r5, #4]
   dadfa:	60ac      	str	r4, [r5, #8]
   dadfc:	9307      	str	r3, [sp, #28]
   dadfe:	f7f9 f94c 	bl	d409a <_Znwj>
   dae02:	4601      	mov	r1, r0
   dae04:	b118      	cbz	r0, dae0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dae06:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dae08:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dae0a:	6044      	str	r4, [r0, #4]
   dae0c:	6084      	str	r4, [r0, #8]
   dae0e:	a804      	add	r0, sp, #16
   dae10:	9103      	str	r1, [sp, #12]
   dae12:	f7ff feef 	bl	dabf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dae16:	4b22      	ldr	r3, [pc, #136]	; (daea0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dae18:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dae1a:	2008      	movs	r0, #8
   dae1c:	f7f9 f93d 	bl	d409a <_Znwj>
   dae20:	4604      	mov	r4, r0
   dae22:	b128      	cbz	r0, dae30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dae24:	9b03      	ldr	r3, [sp, #12]
   dae26:	f840 3b04 	str.w	r3, [r0], #4
   dae2a:	a904      	add	r1, sp, #16
   dae2c:	f7ff fa26 	bl	da27c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dae30:	9500      	str	r5, [sp, #0]
   dae32:	fa5f f38a 	uxtb.w	r3, sl
   dae36:	464a      	mov	r2, r9
   dae38:	4641      	mov	r1, r8
   dae3a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dae3c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dae3e:	f7fe ff17 	bl	d9c70 <spark_send_event>
   dae42:	b920      	cbnz	r0, dae4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dae44:	9b03      	ldr	r3, [sp, #12]
   dae46:	785b      	ldrb	r3, [r3, #1]
   dae48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dae4c:	b183      	cbz	r3, dae70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dae4e:	9b03      	ldr	r3, [sp, #12]
   dae50:	9305      	str	r3, [sp, #20]
   dae52:	a904      	add	r1, sp, #16
   dae54:	a806      	add	r0, sp, #24
   dae56:	f7ff fa11 	bl	da27c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dae5a:	a905      	add	r1, sp, #20
   dae5c:	4630      	mov	r0, r6
   dae5e:	f7ff fe99 	bl	dab94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dae62:	a806      	add	r0, sp, #24
   dae64:	f7fa fd84 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dae68:	a804      	add	r0, sp, #16
   dae6a:	f7fa fd81 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dae6e:	e013      	b.n	dae98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dae70:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dae74:	a905      	add	r1, sp, #20
   dae76:	a803      	add	r0, sp, #12
   dae78:	9205      	str	r2, [sp, #20]
   dae7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   dae7e:	f7ff fefd 	bl	dac7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dae82:	a805      	add	r0, sp, #20
   dae84:	f7ff fe5c 	bl	dab40 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dae88:	a805      	add	r0, sp, #20
   dae8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   dae8c:	f7ff fe93 	bl	dabb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dae90:	a806      	add	r0, sp, #24
   dae92:	f7fa fd6d 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dae96:	e7da      	b.n	dae4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   dae98:	4630      	mov	r0, r6
   dae9a:	b00b      	add	sp, #44	; 0x2c
   dae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daea0:	000db015 	.word	0x000db015

000daea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   daea4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   daea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daea8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   daeaa:	d006      	beq.n	daeba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   daeac:	2a03      	cmp	r2, #3
   daeae:	d017      	beq.n	daee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   daeb0:	2a01      	cmp	r2, #1
   daeb2:	d122      	bne.n	daefa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daeb4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   daeb6:	6003      	str	r3, [r0, #0]
	      break;
   daeb8:	e01f      	b.n	daefa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   daeba:	2018      	movs	r0, #24
   daebc:	680e      	ldr	r6, [r1, #0]
   daebe:	f7f9 f8ec 	bl	d409a <_Znwj>
   daec2:	4605      	mov	r5, r0
   daec4:	b150      	cbz	r0, daedc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   daec6:	4631      	mov	r1, r6
   daec8:	f7ff fec8 	bl	dac5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   daecc:	6930      	ldr	r0, [r6, #16]
   daece:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   daed2:	b108      	cbz	r0, daed8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   daed4:	f007 fe62 	bl	e2b9c <strdup>
   daed8:	6128      	str	r0, [r5, #16]
   daeda:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   daedc:	6025      	str	r5, [r4, #0]
   daede:	e00c      	b.n	daefa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   daee0:	6804      	ldr	r4, [r0, #0]
   daee2:	b154      	cbz	r4, daefa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   daee4:	f104 0010 	add.w	r0, r4, #16
   daee8:	f7ff fe2a 	bl	dab40 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   daeec:	4620      	mov	r0, r4
   daeee:	f7ff fd4d 	bl	da98c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   daef2:	2118      	movs	r1, #24
   daef4:	4620      	mov	r0, r4
   daef6:	f001 f91a 	bl	dc12e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   daefa:	2000      	movs	r0, #0
   daefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daefe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daefe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daf00:	2300      	movs	r3, #0
   daf02:	6083      	str	r3, [r0, #8]
   daf04:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daf06:	4604      	mov	r4, r0
   daf08:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   daf0a:	b12b      	cbz	r3, daf18 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   daf0c:	2202      	movs	r2, #2
   daf0e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   daf10:	68eb      	ldr	r3, [r5, #12]
   daf12:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   daf14:	68ab      	ldr	r3, [r5, #8]
   daf16:	60a3      	str	r3, [r4, #8]
	}
    }
   daf18:	4620      	mov	r0, r4
   daf1a:	bd38      	pop	{r3, r4, r5, pc}

000daf1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   daf1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   daf1e:	b570      	push	{r4, r5, r6, lr}
   daf20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   daf22:	d006      	beq.n	daf32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   daf24:	2a03      	cmp	r2, #3
   daf26:	d011      	beq.n	daf4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   daf28:	2a01      	cmp	r2, #1
   daf2a:	d118      	bne.n	daf5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daf2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   daf2e:	6003      	str	r3, [r0, #0]
	      break;
   daf30:	e015      	b.n	daf5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   daf32:	2014      	movs	r0, #20
   daf34:	680e      	ldr	r6, [r1, #0]
   daf36:	f7f9 f8b0 	bl	d409a <_Znwj>
   daf3a:	4605      	mov	r5, r0
   daf3c:	b120      	cbz	r0, daf48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   daf3e:	4631      	mov	r1, r6
   daf40:	f7ff ffdd 	bl	daefe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   daf44:	7c33      	ldrb	r3, [r6, #16]
   daf46:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   daf48:	6025      	str	r5, [r4, #0]
   daf4a:	e008      	b.n	daf5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   daf4c:	6804      	ldr	r4, [r0, #0]
   daf4e:	b134      	cbz	r4, daf5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   daf50:	4620      	mov	r0, r4
   daf52:	f7ff fd1b 	bl	da98c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   daf56:	2114      	movs	r1, #20
   daf58:	4620      	mov	r0, r4
   daf5a:	f001 f8e8 	bl	dc12e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   daf5e:	2000      	movs	r0, #0
   daf60:	bd70      	pop	{r4, r5, r6, pc}
	...

000daf64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   daf64:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   daf66:	2300      	movs	r3, #0
   daf68:	b087      	sub	sp, #28
   daf6a:	460c      	mov	r4, r1
   daf6c:	f3bf 8f5f 	dmb	sy
   daf70:	e850 6f00 	ldrex	r6, [r0]
   daf74:	e840 3200 	strex	r2, r3, [r0]
   daf78:	2a00      	cmp	r2, #0
   daf7a:	d1f9      	bne.n	daf70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   daf7c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   daf80:	2e00      	cmp	r6, #0
   daf82:	d03f      	beq.n	db004 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   daf84:	4618      	mov	r0, r3
   daf86:	f7fe fdd7 	bl	d9b38 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   daf8a:	4607      	mov	r7, r0
   daf8c:	b120      	cbz	r0, daf98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daf8e:	4621      	mov	r1, r4
   daf90:	4630      	mov	r0, r6
   daf92:	f7ff fe53 	bl	dac3c <_ZNKSt8functionIFvRKbEEclES1_>
   daf96:	e02e      	b.n	daff6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daf98:	4631      	mov	r1, r6
   daf9a:	a801      	add	r0, sp, #4
   daf9c:	f7ff ffaf 	bl	daefe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dafa0:	7823      	ldrb	r3, [r4, #0]
   dafa2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dafa6:	2010      	movs	r0, #16
   dafa8:	f7f9 f877 	bl	d409a <_Znwj>
   dafac:	4605      	mov	r5, r0
   dafae:	b1d0      	cbz	r0, dafe6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dafb0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dafb2:	2014      	movs	r0, #20
   dafb4:	f7f9 f871 	bl	d409a <_Znwj>
   dafb8:	4604      	mov	r4, r0
   dafba:	b178      	cbz	r0, dafdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dafbc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dafbe:	4601      	mov	r1, r0
   dafc0:	a801      	add	r0, sp, #4
   dafc2:	f7ff fcf2 	bl	da9aa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dafc6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dafc8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dafca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dafcc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dafce:	9203      	str	r2, [sp, #12]
   dafd0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dafd2:	60e3      	str	r3, [r4, #12]
   dafd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dafd8:	9204      	str	r2, [sp, #16]
   dafda:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dafdc:	4b0a      	ldr	r3, [pc, #40]	; (db008 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dafde:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dafe0:	4b0a      	ldr	r3, [pc, #40]	; (db00c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dafe2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dafe4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dafe6:	a801      	add	r0, sp, #4
   dafe8:	f7ff fcd0 	bl	da98c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dafec:	2200      	movs	r2, #0
   dafee:	4629      	mov	r1, r5
   daff0:	4807      	ldr	r0, [pc, #28]	; (db010 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   daff2:	f7fe fda9 	bl	d9b48 <application_thread_invoke>
   daff6:	4630      	mov	r0, r6
   daff8:	f7ff fcc8 	bl	da98c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   daffc:	2110      	movs	r1, #16
   daffe:	4630      	mov	r0, r6
   db000:	f001 f895 	bl	dc12e <_ZdlPvj>
        }
    }
   db004:	b007      	add	sp, #28
   db006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db008:	000dac4f 	.word	0x000dac4f
   db00c:	000daf1d 	.word	0x000daf1d
   db010:	000db411 	.word	0x000db411

000db014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   db014:	b530      	push	{r4, r5, lr}
   db016:	b085      	sub	sp, #20
   db018:	4604      	mov	r4, r0
   db01a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   db01c:	4668      	mov	r0, sp
   db01e:	4611      	mov	r1, r2
   db020:	f7ff fdc9 	bl	dabb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   db024:	b17c      	cbz	r4, db046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   db026:	b224      	sxth	r4, r4
   db028:	4628      	mov	r0, r5
   db02a:	b10d      	cbz	r5, db030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   db02c:	f007 fdb6 	bl	e2b9c <strdup>
   db030:	9002      	str	r0, [sp, #8]
   db032:	a902      	add	r1, sp, #8
   db034:	4668      	mov	r0, sp
   db036:	f8ad 400c 	strh.w	r4, [sp, #12]
   db03a:	f7ff fe1f 	bl	dac7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   db03e:	a802      	add	r0, sp, #8
   db040:	f7ff fd7e 	bl	dab40 <_ZN8particle5ErrorD1Ev>
   db044:	e01d      	b.n	db082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   db046:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   db048:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   db04c:	f04f 0201 	mov.w	r2, #1
   db050:	e8d0 3f4f 	ldrexb	r3, [r0]
   db054:	42a3      	cmp	r3, r4
   db056:	d103      	bne.n	db060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   db058:	e8c0 2f41 	strexb	r1, r2, [r0]
   db05c:	2900      	cmp	r1, #0
   db05e:	d1f7      	bne.n	db050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   db060:	d002      	beq.n	db068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   db062:	f88d 3008 	strb.w	r3, [sp, #8]
   db066:	e00c      	b.n	db082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   db068:	f110 010c 	adds.w	r1, r0, #12
   db06c:	f04f 0301 	mov.w	r3, #1
   db070:	bf18      	it	ne
   db072:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   db074:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   db078:	3004      	adds	r0, #4
   db07a:	f800 3c03 	strb.w	r3, [r0, #-3]
   db07e:	f7ff ff71 	bl	daf64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   db082:	a801      	add	r0, sp, #4
   db084:	f7fa fc74 	bl	d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   db088:	b005      	add	sp, #20
   db08a:	bd30      	pop	{r4, r5, pc}

000db08c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   db08c:	4770      	bx	lr

000db08e <_ZN9IPAddressD0Ev>:
   db08e:	b510      	push	{r4, lr}
   db090:	2118      	movs	r1, #24
   db092:	4604      	mov	r4, r0
   db094:	f001 f84b 	bl	dc12e <_ZdlPvj>
   db098:	4620      	mov	r0, r4
   db09a:	bd10      	pop	{r4, pc}

000db09c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db09c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db09e:	7d03      	ldrb	r3, [r0, #20]
   db0a0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   db0a2:	b08d      	sub	sp, #52	; 0x34
   db0a4:	460e      	mov	r6, r1
   db0a6:	f100 0704 	add.w	r7, r0, #4
   db0aa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   db0ae:	d002      	beq.n	db0b6 <_ZNK9IPAddress7printToER5Print+0x1a>
   db0b0:	f100 0508 	add.w	r5, r0, #8
   db0b4:	e018      	b.n	db0e8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   db0b6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db0b8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   db0ba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   db0be:	232f      	movs	r3, #47	; 0x2f
   db0c0:	462a      	mov	r2, r5
   db0c2:	200a      	movs	r0, #10
   db0c4:	f7fe fbb6 	bl	d9834 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   db0c8:	4628      	mov	r0, r5
   db0ca:	f008 fa97 	bl	e35fc <strlen>
   db0ce:	6833      	ldr	r3, [r6, #0]
   db0d0:	4602      	mov	r2, r0
   db0d2:	68db      	ldr	r3, [r3, #12]
   db0d4:	4629      	mov	r1, r5
   db0d6:	4630      	mov	r0, r6
   db0d8:	4798      	blx	r3
   db0da:	e00f      	b.n	db0fc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   db0dc:	b124      	cbz	r4, db0e8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   db0de:	212e      	movs	r1, #46	; 0x2e
   db0e0:	4630      	mov	r0, r6
   db0e2:	f7ff f905 	bl	da2f0 <_ZN5Print5printEc>
   db0e6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   db0e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   db0ec:	220a      	movs	r2, #10
   db0ee:	4630      	mov	r0, r6
   db0f0:	f7ff f944 	bl	da37c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db0f4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db0f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   db0f8:	d1f0      	bne.n	db0dc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   db0fa:	4620      	mov	r0, r4
    }
    return n;
}
   db0fc:	b00d      	add	sp, #52	; 0x34
   db0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db100 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   db100:	b510      	push	{r4, lr}
   db102:	4b05      	ldr	r3, [pc, #20]	; (db118 <_ZN9IPAddressC1Ev+0x18>)
   db104:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db106:	2211      	movs	r2, #17
   db108:	f840 3b04 	str.w	r3, [r0], #4
   db10c:	2100      	movs	r1, #0
   db10e:	f007 fab4 	bl	e267a <memset>
{
    clear();
}
   db112:	4620      	mov	r0, r4
   db114:	bd10      	pop	{r4, pc}
   db116:	bf00      	nop
   db118:	000e6bfc 	.word	0x000e6bfc

000db11c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   db11c:	4603      	mov	r3, r0
   db11e:	4a07      	ldr	r2, [pc, #28]	; (db13c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   db120:	b510      	push	{r4, lr}
   db122:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   db126:	f101 0210 	add.w	r2, r1, #16
   db12a:	f851 4b04 	ldr.w	r4, [r1], #4
   db12e:	f843 4b04 	str.w	r4, [r3], #4
   db132:	4291      	cmp	r1, r2
   db134:	d1f9      	bne.n	db12a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   db136:	780a      	ldrb	r2, [r1, #0]
   db138:	701a      	strb	r2, [r3, #0]
}
   db13a:	bd10      	pop	{r4, pc}
   db13c:	000e6bfc 	.word	0x000e6bfc

000db140 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   db140:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   db142:	2b04      	cmp	r3, #4
   db144:	d101      	bne.n	db14a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   db146:	6840      	ldr	r0, [r0, #4]
   db148:	e008      	b.n	db15c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   db14a:	2b06      	cmp	r3, #6
   db14c:	d10a      	bne.n	db164 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   db14e:	6843      	ldr	r3, [r0, #4]
   db150:	b953      	cbnz	r3, db168 <_ZNK9IPAddresscvbEv+0x28>
   db152:	6883      	ldr	r3, [r0, #8]
   db154:	b943      	cbnz	r3, db168 <_ZNK9IPAddresscvbEv+0x28>
   db156:	68c3      	ldr	r3, [r0, #12]
   db158:	b933      	cbnz	r3, db168 <_ZNK9IPAddresscvbEv+0x28>
   db15a:	6900      	ldr	r0, [r0, #16]
   db15c:	3000      	adds	r0, #0
   db15e:	bf18      	it	ne
   db160:	2001      	movne	r0, #1
   db162:	4770      	bx	lr
    } else {
        return false;
   db164:	2000      	movs	r0, #0
   db166:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   db168:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   db16a:	4770      	bx	lr

000db16c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   db16c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   db16e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   db172:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   db176:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   db17a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   db17e:	2304      	movs	r3, #4
   db180:	6041      	str	r1, [r0, #4]
   db182:	7503      	strb	r3, [r0, #20]
   db184:	bd10      	pop	{r4, pc}

000db186 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   db186:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   db188:	780d      	ldrb	r5, [r1, #0]
   db18a:	788b      	ldrb	r3, [r1, #2]
   db18c:	784a      	ldrb	r2, [r1, #1]
   db18e:	78c9      	ldrb	r1, [r1, #3]
   db190:	9100      	str	r1, [sp, #0]
   db192:	4629      	mov	r1, r5
   db194:	f7ff ffea 	bl	db16c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   db198:	b003      	add	sp, #12
   db19a:	bd30      	pop	{r4, r5, pc}

000db19c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db19c:	7441      	strb	r1, [r0, #17]
   db19e:	4770      	bx	lr

000db1a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db1a0:	4770      	bx	lr

000db1a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   db1a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db1a4:	2100      	movs	r1, #0
   db1a6:	7c00      	ldrb	r0, [r0, #16]
   db1a8:	f7fe fc74 	bl	d9a94 <HAL_USB_USART_Receive_Data>
}
   db1ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db1b0:	bf28      	it	cs
   db1b2:	f04f 30ff 	movcs.w	r0, #4294967295
   db1b6:	bd08      	pop	{r3, pc}

000db1b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   db1b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db1ba:	2101      	movs	r1, #1
   db1bc:	7c00      	ldrb	r0, [r0, #16]
   db1be:	f7fe fc69 	bl	d9a94 <HAL_USB_USART_Receive_Data>
}
   db1c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db1c6:	bf28      	it	cs
   db1c8:	f04f 30ff 	movcs.w	r0, #4294967295
   db1cc:	bd08      	pop	{r3, pc}

000db1ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   db1ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db1d0:	7c00      	ldrb	r0, [r0, #16]
   db1d2:	f7fe fc57 	bl	d9a84 <HAL_USB_USART_Available_Data_For_Write>
}
   db1d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1da:	bd08      	pop	{r3, pc}

000db1dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   db1dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db1de:	7c00      	ldrb	r0, [r0, #16]
   db1e0:	f7fe fc48 	bl	d9a74 <HAL_USB_USART_Available_Data>
}
   db1e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1e8:	bd08      	pop	{r3, pc}

000db1ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   db1ea:	7c00      	ldrb	r0, [r0, #16]
   db1ec:	f7fe bc62 	b.w	d9ab4 <HAL_USB_USART_Flush_Data>

000db1f0 <_ZN9USBSerialD0Ev>:
   db1f0:	b510      	push	{r4, lr}
   db1f2:	2114      	movs	r1, #20
   db1f4:	4604      	mov	r4, r0
   db1f6:	f000 ff9a 	bl	dc12e <_ZdlPvj>
   db1fa:	4620      	mov	r0, r4
   db1fc:	bd10      	pop	{r4, pc}

000db1fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db1fe:	b538      	push	{r3, r4, r5, lr}
   db200:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db202:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   db204:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db206:	f7fe fc3d 	bl	d9a84 <HAL_USB_USART_Available_Data_For_Write>
   db20a:	2800      	cmp	r0, #0
   db20c:	dc01      	bgt.n	db212 <_ZN9USBSerial5writeEh+0x14>
   db20e:	7c60      	ldrb	r0, [r4, #17]
   db210:	b128      	cbz	r0, db21e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db212:	4629      	mov	r1, r5
   db214:	7c20      	ldrb	r0, [r4, #16]
   db216:	f7fe fc45 	bl	d9aa4 <HAL_USB_USART_Send_Data>
   db21a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   db21e:	bd38      	pop	{r3, r4, r5, pc}

000db220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db220:	b510      	push	{r4, lr}
   db222:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db224:	2300      	movs	r3, #0
   db226:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db22c:	60a3      	str	r3, [r4, #8]
   db22e:	4b05      	ldr	r3, [pc, #20]	; (db244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db230:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db232:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db234:	4608      	mov	r0, r1
{
  _serial = serial;
   db236:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db238:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db23a:	4611      	mov	r1, r2
   db23c:	f7fe fc0a 	bl	d9a54 <HAL_USB_USART_Init>
}
   db240:	4620      	mov	r0, r4
   db242:	bd10      	pop	{r4, pc}
   db244:	000e6c10 	.word	0x000e6c10

000db248 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db248:	2200      	movs	r2, #0
   db24a:	7c00      	ldrb	r0, [r0, #16]
   db24c:	f7fe bc0a 	b.w	d9a64 <HAL_USB_USART_Begin>

000db250 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db250:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db252:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db254:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db256:	2100      	movs	r1, #0
   db258:	f007 fa0f 	bl	e267a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db25c:	4620      	mov	r0, r4
   db25e:	bd10      	pop	{r4, pc}

000db260 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db260:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db262:	4d0e      	ldr	r5, [pc, #56]	; (db29c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db264:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db266:	a801      	add	r0, sp, #4
   db268:	f7ff fff2 	bl	db250 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db26c:	6829      	ldr	r1, [r5, #0]
   db26e:	f011 0401 	ands.w	r4, r1, #1
   db272:	d110      	bne.n	db296 <_Z16_fetch_usbserialv+0x36>
   db274:	4628      	mov	r0, r5
   db276:	f7f8 ff16 	bl	d40a6 <__cxa_guard_acquire>
   db27a:	b160      	cbz	r0, db296 <_Z16_fetch_usbserialv+0x36>
   db27c:	aa01      	add	r2, sp, #4
   db27e:	4621      	mov	r1, r4
   db280:	4807      	ldr	r0, [pc, #28]	; (db2a0 <_Z16_fetch_usbserialv+0x40>)
   db282:	f7ff ffcd 	bl	db220 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db286:	4628      	mov	r0, r5
   db288:	f7f8 ff12 	bl	d40b0 <__cxa_guard_release>
   db28c:	4a05      	ldr	r2, [pc, #20]	; (db2a4 <_Z16_fetch_usbserialv+0x44>)
   db28e:	4906      	ldr	r1, [pc, #24]	; (db2a8 <_Z16_fetch_usbserialv+0x48>)
   db290:	4803      	ldr	r0, [pc, #12]	; (db2a0 <_Z16_fetch_usbserialv+0x40>)
   db292:	f000 ff47 	bl	dc124 <__aeabi_atexit>
	return _usbserial;
}
   db296:	4802      	ldr	r0, [pc, #8]	; (db2a0 <_Z16_fetch_usbserialv+0x40>)
   db298:	b007      	add	sp, #28
   db29a:	bd30      	pop	{r4, r5, pc}
   db29c:	2003e2d4 	.word	0x2003e2d4
   db2a0:	2003e2d8 	.word	0x2003e2d8
   db2a4:	2003d728 	.word	0x2003d728
   db2a8:	000db1a1 	.word	0x000db1a1

000db2ac <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   db2ac:	4700      	bx	r0
	...

000db2b0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   db2b2:	b085      	sub	sp, #20
   db2b4:	461c      	mov	r4, r3
   db2b6:	460e      	mov	r6, r1
   db2b8:	4617      	mov	r7, r2
   db2ba:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   db2bc:	f7fe fa1a 	bl	d96f4 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   db2c0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   db2c2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db2c4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   db2c8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db2ca:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   db2ce:	bfa5      	ittet	ge
   db2d0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db2d4:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   db2d8:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   db2da:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db2dc:	9300      	str	r3, [sp, #0]
   db2de:	4632      	mov	r2, r6
   db2e0:	463b      	mov	r3, r7
   db2e2:	4906      	ldr	r1, [pc, #24]	; (db2fc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db2e4:	bfa8      	it	ge
   db2e6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db2ea:	4628      	mov	r0, r5
   db2ec:	f7fe f9fa 	bl	d96e4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   db2f0:	fab0 f080 	clz	r0, r0
   db2f4:	0940      	lsrs	r0, r0, #5
   db2f6:	b005      	add	sp, #20
   db2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db2fa:	bf00      	nop
   db2fc:	000db2ad 	.word	0x000db2ad

000db300 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db300:	4770      	bx	lr

000db302 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db302:	7441      	strb	r1, [r0, #17]
   db304:	4770      	bx	lr

000db306 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db306:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db308:	7c00      	ldrb	r0, [r0, #16]
   db30a:	f7fe fae3 	bl	d98d4 <HAL_USART_Available_Data_For_Write>
}
   db30e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db312:	bd08      	pop	{r3, pc}

000db314 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db314:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db316:	7c00      	ldrb	r0, [r0, #16]
   db318:	f7fe fab4 	bl	d9884 <HAL_USART_Available_Data>
}
   db31c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db320:	bd08      	pop	{r3, pc}

000db322 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db322:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db324:	7c00      	ldrb	r0, [r0, #16]
   db326:	f7fe fabd 	bl	d98a4 <HAL_USART_Peek_Data>
}
   db32a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db32e:	bf28      	it	cs
   db330:	f04f 30ff 	movcs.w	r0, #4294967295
   db334:	bd08      	pop	{r3, pc}

000db336 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db336:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db338:	7c00      	ldrb	r0, [r0, #16]
   db33a:	f7fe faab 	bl	d9894 <HAL_USART_Read_Data>
}
   db33e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db342:	bf28      	it	cs
   db344:	f04f 30ff 	movcs.w	r0, #4294967295
   db348:	bd08      	pop	{r3, pc}

000db34a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db34a:	7c00      	ldrb	r0, [r0, #16]
   db34c:	f7fe bab2 	b.w	d98b4 <HAL_USART_Flush_Data>

000db350 <_ZN11USARTSerialD0Ev>:
   db350:	b510      	push	{r4, lr}
   db352:	2114      	movs	r1, #20
   db354:	4604      	mov	r4, r0
   db356:	f000 feea 	bl	dc12e <_ZdlPvj>
   db35a:	4620      	mov	r0, r4
   db35c:	bd10      	pop	{r4, pc}

000db35e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db35e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db360:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db362:	4604      	mov	r4, r0
   db364:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db366:	b925      	cbnz	r5, db372 <_ZN11USARTSerial5writeEh+0x14>
   db368:	7c00      	ldrb	r0, [r0, #16]
   db36a:	f7fe fab3 	bl	d98d4 <HAL_USART_Available_Data_For_Write>
   db36e:	2800      	cmp	r0, #0
   db370:	dd05      	ble.n	db37e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db372:	4631      	mov	r1, r6
   db374:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db37a:	f7fe ba7b 	b.w	d9874 <HAL_USART_Write_Data>
  }
  return 0;
}
   db37e:	4628      	mov	r0, r5
   db380:	bd70      	pop	{r4, r5, r6, pc}
	...

000db384 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db384:	b510      	push	{r4, lr}
   db386:	4604      	mov	r4, r0
   db388:	4608      	mov	r0, r1
   db38a:	4611      	mov	r1, r2
   db38c:	2200      	movs	r2, #0
   db38e:	6062      	str	r2, [r4, #4]
   db390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db394:	60a2      	str	r2, [r4, #8]
   db396:	4a05      	ldr	r2, [pc, #20]	; (db3ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db398:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db39a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db39c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db39e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db3a0:	461a      	mov	r2, r3
   db3a2:	f7fe fa5f 	bl	d9864 <HAL_USART_Init>
}
   db3a6:	4620      	mov	r0, r4
   db3a8:	bd10      	pop	{r4, pc}
   db3aa:	bf00      	nop
   db3ac:	000e6c40 	.word	0x000e6c40

000db3b0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db3b0:	2300      	movs	r3, #0
   db3b2:	7c00      	ldrb	r0, [r0, #16]
   db3b4:	f7fe ba96 	b.w	d98e4 <HAL_USART_BeginConfig>

000db3b8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db3b8:	2200      	movs	r2, #0
   db3ba:	f7ff bff9 	b.w	db3b0 <_ZN11USARTSerial5beginEmm>

000db3be <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db3be:	7c00      	ldrb	r0, [r0, #16]
   db3c0:	f7fe ba80 	b.w	d98c4 <HAL_USART_Is_Enabled>

000db3c4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db3c4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db3c6:	4d0c      	ldr	r5, [pc, #48]	; (db3f8 <_Z22__fetch_global_Serial1v+0x34>)
   db3c8:	6829      	ldr	r1, [r5, #0]
   db3ca:	f011 0401 	ands.w	r4, r1, #1
   db3ce:	d111      	bne.n	db3f4 <_Z22__fetch_global_Serial1v+0x30>
   db3d0:	4628      	mov	r0, r5
   db3d2:	f7f8 fe68 	bl	d40a6 <__cxa_guard_acquire>
   db3d6:	b168      	cbz	r0, db3f4 <_Z22__fetch_global_Serial1v+0x30>
   db3d8:	4a08      	ldr	r2, [pc, #32]	; (db3fc <_Z22__fetch_global_Serial1v+0x38>)
   db3da:	4b09      	ldr	r3, [pc, #36]	; (db400 <_Z22__fetch_global_Serial1v+0x3c>)
   db3dc:	4809      	ldr	r0, [pc, #36]	; (db404 <_Z22__fetch_global_Serial1v+0x40>)
   db3de:	4621      	mov	r1, r4
   db3e0:	f7ff ffd0 	bl	db384 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db3e4:	4628      	mov	r0, r5
   db3e6:	f7f8 fe63 	bl	d40b0 <__cxa_guard_release>
   db3ea:	4a07      	ldr	r2, [pc, #28]	; (db408 <_Z22__fetch_global_Serial1v+0x44>)
   db3ec:	4907      	ldr	r1, [pc, #28]	; (db40c <_Z22__fetch_global_Serial1v+0x48>)
   db3ee:	4805      	ldr	r0, [pc, #20]	; (db404 <_Z22__fetch_global_Serial1v+0x40>)
   db3f0:	f000 fe98 	bl	dc124 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db3f4:	4803      	ldr	r0, [pc, #12]	; (db404 <_Z22__fetch_global_Serial1v+0x40>)
   db3f6:	bd38      	pop	{r3, r4, r5, pc}
   db3f8:	2003e384 	.word	0x2003e384
   db3fc:	2003e388 	.word	0x2003e388
   db400:	2003e300 	.word	0x2003e300
   db404:	2003e2ec 	.word	0x2003e2ec
   db408:	2003d728 	.word	0x2003d728
   db40c:	000db301 	.word	0x000db301

000db410 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db410:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db412:	6883      	ldr	r3, [r0, #8]
   db414:	4604      	mov	r4, r0
   db416:	b90b      	cbnz	r3, db41c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db418:	f000 fe8b 	bl	dc132 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db41c:	68c3      	ldr	r3, [r0, #12]
   db41e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db420:	68a3      	ldr	r3, [r4, #8]
   db422:	b11b      	cbz	r3, db42c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db424:	2203      	movs	r2, #3
   db426:	4621      	mov	r1, r4
   db428:	4620      	mov	r0, r4
   db42a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db42c:	4620      	mov	r0, r4
   db42e:	2110      	movs	r1, #16
}
   db430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db434:	f000 be7b 	b.w	dc12e <_ZdlPvj>

000db438 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   db438:	4770      	bx	lr

000db43a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db43c:	4606      	mov	r6, r0
   db43e:	4615      	mov	r5, r2
   db440:	460c      	mov	r4, r1
   db442:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db444:	42bc      	cmp	r4, r7
   db446:	d006      	beq.n	db456 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db448:	6833      	ldr	r3, [r6, #0]
   db44a:	f814 1b01 	ldrb.w	r1, [r4], #1
   db44e:	689b      	ldr	r3, [r3, #8]
   db450:	4630      	mov	r0, r6
   db452:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db454:	e7f6      	b.n	db444 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   db456:	4628      	mov	r0, r5
   db458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db45a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   db45a:	2200      	movs	r2, #0
   db45c:	7c00      	ldrb	r0, [r0, #16]
   db45e:	f7fe ba79 	b.w	d9954 <HAL_I2C_Write_Data>

000db462 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   db462:	2100      	movs	r1, #0
   db464:	7c00      	ldrb	r0, [r0, #16]
   db466:	f7fe ba7d 	b.w	d9964 <HAL_I2C_Available_Data>

000db46a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   db46a:	2100      	movs	r1, #0
   db46c:	7c00      	ldrb	r0, [r0, #16]
   db46e:	f7fe ba81 	b.w	d9974 <HAL_I2C_Read_Data>

000db472 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   db472:	2100      	movs	r1, #0
   db474:	7c00      	ldrb	r0, [r0, #16]
   db476:	f7fe ba85 	b.w	d9984 <HAL_I2C_Peek_Data>

000db47a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   db47a:	2100      	movs	r1, #0
   db47c:	7c00      	ldrb	r0, [r0, #16]
   db47e:	f7fe ba89 	b.w	d9994 <HAL_I2C_Flush_Data>

000db482 <_ZN7TwoWireD0Ev>:
   db482:	b510      	push	{r4, lr}
   db484:	2114      	movs	r1, #20
   db486:	4604      	mov	r4, r0
   db488:	f000 fe51 	bl	dc12e <_ZdlPvj>
   db48c:	4620      	mov	r0, r4
   db48e:	bd10      	pop	{r4, pc}

000db490 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   db490:	b510      	push	{r4, lr}
   db492:	4604      	mov	r4, r0
   db494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db498:	4608      	mov	r0, r1
   db49a:	60a3      	str	r3, [r4, #8]
   db49c:	2100      	movs	r1, #0
   db49e:	4b04      	ldr	r3, [pc, #16]	; (db4b0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   db4a0:	7420      	strb	r0, [r4, #16]
   db4a2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   db4a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   db4a6:	f7fe fa85 	bl	d99b4 <HAL_I2C_Init>

}
   db4aa:	4620      	mov	r0, r4
   db4ac:	bd10      	pop	{r4, pc}
   db4ae:	bf00      	nop
   db4b0:	000e6c70 	.word	0x000e6c70

000db4b4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   db4b4:	2200      	movs	r2, #0
   db4b6:	7c00      	ldrb	r0, [r0, #16]
   db4b8:	f7fe ba1c 	b.w	d98f4 <HAL_I2C_Set_Speed>

000db4bc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db4bc:	2300      	movs	r3, #0
   db4be:	461a      	mov	r2, r3
   db4c0:	4619      	mov	r1, r3
   db4c2:	7c00      	ldrb	r0, [r0, #16]
   db4c4:	f7fe ba1e 	b.w	d9904 <HAL_I2C_Begin>

000db4c8 <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   db4c8:	2100      	movs	r1, #0
   db4ca:	7c00      	ldrb	r0, [r0, #16]
   db4cc:	f7fe ba22 	b.w	d9914 <HAL_I2C_End>

000db4d0 <_ZN7TwoWire11requestFromEhhh>:
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   db4d0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   db4d2:	2400      	movs	r4, #0
   db4d4:	7c00      	ldrb	r0, [r0, #16]
   db4d6:	9400      	str	r4, [sp, #0]
   db4d8:	f7fe fa24 	bl	d9924 <HAL_I2C_Request_Data>
  return result;
}
   db4dc:	b2c0      	uxtb	r0, r0
   db4de:	b002      	add	sp, #8
   db4e0:	bd10      	pop	{r4, pc}

000db4e2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   db4e2:	2301      	movs	r3, #1
   db4e4:	f7ff bff4 	b.w	db4d0 <_ZN7TwoWire11requestFromEhhh>

000db4e8 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   db4e8:	2301      	movs	r3, #1
   db4ea:	b2d2      	uxtb	r2, r2
   db4ec:	b2c9      	uxtb	r1, r1
   db4ee:	f7ff bfef 	b.w	db4d0 <_ZN7TwoWire11requestFromEhhh>

000db4f2 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   db4f2:	b2db      	uxtb	r3, r3
   db4f4:	b2d2      	uxtb	r2, r2
   db4f6:	b2c9      	uxtb	r1, r1
   db4f8:	f7ff bfea 	b.w	db4d0 <_ZN7TwoWire11requestFromEhhh>

000db4fc <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   db4fc:	2200      	movs	r2, #0
   db4fe:	7c00      	ldrb	r0, [r0, #16]
   db500:	f7fe ba18 	b.w	d9934 <HAL_I2C_Begin_Transmission>

000db504 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   db504:	b2c9      	uxtb	r1, r1
   db506:	f7ff bff9 	b.w	db4fc <_ZN7TwoWire17beginTransmissionEh>

000db50a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   db50a:	2200      	movs	r2, #0
   db50c:	7c00      	ldrb	r0, [r0, #16]
   db50e:	f7fe ba19 	b.w	d9944 <HAL_I2C_End_Transmission>

000db512 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   db512:	2101      	movs	r1, #1
   db514:	f7ff bff9 	b.w	db50a <_ZN7TwoWire15endTransmissionEh>

000db518 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   db518:	2100      	movs	r1, #0
   db51a:	7c00      	ldrb	r0, [r0, #16]
   db51c:	f7fe ba42 	b.w	d99a4 <HAL_I2C_Is_Enabled>

000db520 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   db520:	2200      	movs	r2, #0
   db522:	4611      	mov	r1, r2
   db524:	7c00      	ldrb	r0, [r0, #16]
   db526:	f7fe ba4d 	b.w	d99c4 <HAL_I2C_Reset>

000db52a <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   db52a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   db52c:	2100      	movs	r1, #0
   db52e:	7c00      	ldrb	r0, [r0, #16]
   db530:	f7fe fa50 	bl	d99d4 <HAL_I2C_Acquire>
}
   db534:	fab0 f080 	clz	r0, r0
   db538:	0940      	lsrs	r0, r0, #5
   db53a:	bd08      	pop	{r3, pc}

000db53c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db53c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   db53e:	2100      	movs	r1, #0
   db540:	7c00      	ldrb	r0, [r0, #16]
   db542:	f7fe fa4f 	bl	d99e4 <HAL_I2C_Release>
}
   db546:	fab0 f080 	clz	r0, r0
   db54a:	0940      	lsrs	r0, r0, #5
   db54c:	bd08      	pop	{r3, pc}

000db54e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db54e:	2200      	movs	r2, #0
   db550:	4611      	mov	r1, r2
   db552:	6840      	ldr	r0, [r0, #4]
   db554:	f7fe bb5c 	b.w	d9c10 <network_listening>

000db558 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db558:	2200      	movs	r2, #0
   db55a:	4611      	mov	r1, r2
   db55c:	6840      	ldr	r0, [r0, #4]
   db55e:	f7fe bb67 	b.w	d9c30 <network_get_listen_timeout>

000db562 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db562:	2200      	movs	r2, #0
   db564:	6840      	ldr	r0, [r0, #4]
   db566:	f7fe bb5b 	b.w	d9c20 <network_set_listen_timeout>

000db56a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db56a:	2200      	movs	r2, #0
   db56c:	f081 0101 	eor.w	r1, r1, #1
   db570:	6840      	ldr	r0, [r0, #4]
   db572:	f7fe bb45 	b.w	d9c00 <network_listen>

000db576 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db576:	2300      	movs	r3, #0
   db578:	461a      	mov	r2, r3
   db57a:	2101      	movs	r1, #1
   db57c:	6840      	ldr	r0, [r0, #4]
   db57e:	f7fe bb37 	b.w	d9bf0 <network_off>

000db582 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db582:	2300      	movs	r3, #0
   db584:	461a      	mov	r2, r3
   db586:	4619      	mov	r1, r3
   db588:	6840      	ldr	r0, [r0, #4]
   db58a:	f7fe bb29 	b.w	d9be0 <network_on>

000db58e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db58e:	2200      	movs	r2, #0
   db590:	4611      	mov	r1, r2
   db592:	6840      	ldr	r0, [r0, #4]
   db594:	f7fe bb1c 	b.w	d9bd0 <network_ready>

000db598 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db598:	2200      	movs	r2, #0
   db59a:	4611      	mov	r1, r2
   db59c:	6840      	ldr	r0, [r0, #4]
   db59e:	f7fe bb07 	b.w	d9bb0 <network_connecting>

000db5a2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db5a2:	2200      	movs	r2, #0
   db5a4:	2102      	movs	r1, #2
   db5a6:	6840      	ldr	r0, [r0, #4]
   db5a8:	f7fe bb0a 	b.w	d9bc0 <network_disconnect>

000db5ac <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db5ac:	2300      	movs	r3, #0
   db5ae:	461a      	mov	r2, r3
   db5b0:	6840      	ldr	r0, [r0, #4]
   db5b2:	f7fe baf5 	b.w	d9ba0 <network_connect>

000db5b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db5b6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db5b8:	4605      	mov	r5, r0
   db5ba:	b188      	cbz	r0, db5e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db5bc:	6804      	ldr	r4, [r0, #0]
   db5be:	b14c      	cbz	r4, db5d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db5c0:	68a3      	ldr	r3, [r4, #8]
   db5c2:	b11b      	cbz	r3, db5cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db5c4:	2203      	movs	r2, #3
   db5c6:	4621      	mov	r1, r4
   db5c8:	4620      	mov	r0, r4
   db5ca:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db5cc:	2110      	movs	r1, #16
   db5ce:	4620      	mov	r0, r4
   db5d0:	f000 fdad 	bl	dc12e <_ZdlPvj>
   db5d4:	4628      	mov	r0, r5
   db5d6:	2114      	movs	r1, #20
      }
   db5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db5dc:	f000 bda7 	b.w	dc12e <_ZdlPvj>
   db5e0:	bd38      	pop	{r3, r4, r5, pc}

000db5e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db5e2:	b110      	cbz	r0, db5ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db5e4:	6803      	ldr	r3, [r0, #0]
   db5e6:	685b      	ldr	r3, [r3, #4]
   db5e8:	4718      	bx	r3
   db5ea:	4770      	bx	lr

000db5ec <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db5ec:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db5ee:	6803      	ldr	r3, [r0, #0]
   db5f0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db5f2:	b1bb      	cbz	r3, db624 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db5f4:	6858      	ldr	r0, [r3, #4]
   db5f6:	f7fe f8f5 	bl	d97e4 <os_thread_is_current>
   db5fa:	b978      	cbnz	r0, db61c <_ZN6ThreadD1Ev+0x30>
   db5fc:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db5fe:	7c5a      	ldrb	r2, [r3, #17]
   db600:	b912      	cbnz	r2, db608 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db602:	6858      	ldr	r0, [r3, #4]
   db604:	f7fe f8f6 	bl	d97f4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db608:	6823      	ldr	r3, [r4, #0]
   db60a:	6858      	ldr	r0, [r3, #4]
   db60c:	f7fe f8fa 	bl	d9804 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db610:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db612:	2300      	movs	r3, #0
   db614:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db616:	b128      	cbz	r0, db624 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db618:	f7ff ffcd 	bl	db5b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db61c:	6820      	ldr	r0, [r4, #0]
   db61e:	b108      	cbz	r0, db624 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db620:	f7ff ffc9 	bl	db5b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db624:	4620      	mov	r0, r4
   db626:	bd10      	pop	{r4, pc}

000db628 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db628:	b538      	push	{r3, r4, r5, lr}
   db62a:	4b0c      	ldr	r3, [pc, #48]	; (db65c <_ZN5spark9MeshClassD1Ev+0x34>)
   db62c:	6003      	str	r3, [r0, #0]
   db62e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db630:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   db634:	b108      	cbz	r0, db63a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db636:	f7f8 fd34 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db63a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   db63e:	b135      	cbz	r5, db64e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db640:	4628      	mov	r0, r5
   db642:	f7ff ffd3 	bl	db5ec <_ZN6ThreadD1Ev>
   db646:	2104      	movs	r1, #4
   db648:	4628      	mov	r0, r5
   db64a:	f000 fd70 	bl	dc12e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db64e:	68a0      	ldr	r0, [r4, #8]
   db650:	b108      	cbz	r0, db656 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   db652:	f7ff ffc6 	bl	db5e2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db656:	4620      	mov	r0, r4
   db658:	bd38      	pop	{r3, r4, r5, pc}
   db65a:	bf00      	nop
   db65c:	000e6c98 	.word	0x000e6c98

000db660 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db660:	b538      	push	{r3, r4, r5, lr}
   db662:	4c0e      	ldr	r4, [pc, #56]	; (db69c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db664:	4b0e      	ldr	r3, [pc, #56]	; (db6a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db666:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db668:	2500      	movs	r5, #0
   db66a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db66c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db670:	6063      	str	r3, [r4, #4]
   db672:	60a5      	str	r5, [r4, #8]
   db674:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db678:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db67c:	f7fe f8d2 	bl	d9824 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db680:	4b08      	ldr	r3, [pc, #32]	; (db6a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db682:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db686:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db68a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db68c:	4620      	mov	r0, r4
   db68e:	4a06      	ldr	r2, [pc, #24]	; (db6a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db690:	4906      	ldr	r1, [pc, #24]	; (db6ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db696:	f000 bd45 	b.w	dc124 <__aeabi_atexit>
   db69a:	bf00      	nop
   db69c:	2003e40c 	.word	0x2003e40c
   db6a0:	000e6da4 	.word	0x000e6da4
   db6a4:	000e6c98 	.word	0x000e6c98
   db6a8:	2003d728 	.word	0x2003d728
   db6ac:	000db629 	.word	0x000db629

000db6b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db6b2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db6b4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db6b6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db6ba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db6bc:	2201      	movs	r2, #1
   db6be:	f04f 33ff 	mov.w	r3, #4294967295
   db6c2:	4621      	mov	r1, r4
   db6c4:	47a8      	blx	r5
}
   db6c6:	b003      	add	sp, #12
   db6c8:	bd30      	pop	{r4, r5, pc}

000db6ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   db6ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db6cc:	6803      	ldr	r3, [r0, #0]
   db6ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   db6d0:	f04f 33ff 	mov.w	r3, #4294967295
   db6d4:	46a4      	mov	ip, r4
}
   db6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db6da:	4760      	bx	ip

000db6dc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db6de:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   db6e0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db6e2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   db6e6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db6e8:	4621      	mov	r1, r4
   db6ea:	4613      	mov	r3, r2
   db6ec:	2201      	movs	r2, #1
   db6ee:	47a8      	blx	r5
}
   db6f0:	b003      	add	sp, #12
   db6f2:	bd30      	pop	{r4, r5, pc}

000db6f4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   db6f4:	4770      	bx	lr

000db6f6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db6f6:	b538      	push	{r3, r4, r5, lr}
   db6f8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   db6fa:	681a      	ldr	r2, [r3, #0]
   db6fc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db6fe:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   db700:	da05      	bge.n	db70e <_ZN9TCPClient9connectedEv+0x18>
   db702:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db706:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db70a:	429a      	cmp	r2, r3
   db70c:	d001      	beq.n	db712 <_ZN9TCPClient9connectedEv+0x1c>
   db70e:	2501      	movs	r5, #1
   db710:	e00b      	b.n	db72a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   db712:	6803      	ldr	r3, [r0, #0]
   db714:	691b      	ldr	r3, [r3, #16]
   db716:	4798      	blx	r3
   db718:	2800      	cmp	r0, #0
   db71a:	bf14      	ite	ne
   db71c:	2501      	movne	r5, #1
   db71e:	2500      	moveq	r5, #0
        if (!rv) {
   db720:	d103      	bne.n	db72a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   db722:	6823      	ldr	r3, [r4, #0]
   db724:	4620      	mov	r0, r4
   db726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db728:	4798      	blx	r3
        }
    }
    return rv;
}
   db72a:	4628      	mov	r0, r5
   db72c:	bd38      	pop	{r3, r4, r5, pc}

000db72e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   db72e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   db730:	6818      	ldr	r0, [r3, #0]
}
   db732:	43c0      	mvns	r0, r0
   db734:	0fc0      	lsrs	r0, r0, #31
   db736:	4770      	bx	lr

000db738 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db738:	4770      	bx	lr

000db73a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   db73a:	2000      	movs	r0, #0
   db73c:	4770      	bx	lr

000db73e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db73e:	b510      	push	{r4, lr}
   db740:	2114      	movs	r1, #20
   db742:	4604      	mov	r4, r0
   db744:	f000 fcf3 	bl	dc12e <_ZdlPvj>
   db748:	4620      	mov	r0, r4
   db74a:	bd10      	pop	{r4, pc}

000db74c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   db74c:	f7f8 bca7 	b.w	d409e <_ZdlPv>

000db750 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db752:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   db754:	2200      	movs	r2, #0
   db756:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   db758:	9202      	str	r2, [sp, #8]
   db75a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   db75c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db75e:	4604      	mov	r4, r0
   db760:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   db762:	d008      	beq.n	db776 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   db764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db768:	fbb3 f1f2 	udiv	r1, r3, r2
   db76c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   db76e:	fb02 3111 	mls	r1, r2, r1, r3
   db772:	434a      	muls	r2, r1
   db774:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   db776:	6960      	ldr	r0, [r4, #20]
   db778:	2308      	movs	r3, #8
   db77a:	9300      	str	r3, [sp, #0]
   db77c:	f241 0205 	movw	r2, #4101	; 0x1005
   db780:	446b      	add	r3, sp
   db782:	f640 71ff 	movw	r1, #4095	; 0xfff
   db786:	6800      	ldr	r0, [r0, #0]
   db788:	f7fe f934 	bl	d99f4 <sock_setsockopt>
    if (ret < 0) {
   db78c:	2800      	cmp	r0, #0
   db78e:	db08      	blt.n	db7a2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   db790:	6960      	ldr	r0, [r4, #20]
   db792:	2300      	movs	r3, #0
   db794:	4632      	mov	r2, r6
   db796:	4629      	mov	r1, r5
   db798:	6800      	ldr	r0, [r0, #0]
   db79a:	f7fe f94b 	bl	d9a34 <sock_send>
    if (ret < 0) {
   db79e:	2800      	cmp	r0, #0
   db7a0:	da04      	bge.n	db7ac <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   db7a2:	f7fe fad5 	bl	d9d50 <__errno>
   db7a6:	6803      	ldr	r3, [r0, #0]
   db7a8:	6063      	str	r3, [r4, #4]
   db7aa:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   db7ac:	b004      	add	sp, #16
   db7ae:	bd70      	pop	{r4, r5, r6, pc}

000db7b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db7b0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db7b2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db7b4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db7b6:	689b      	ldr	r3, [r3, #8]
   db7b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db7ba:	68a3      	ldr	r3, [r4, #8]
   db7bc:	3b01      	subs	r3, #1
   db7be:	60a3      	str	r3, [r4, #8]
   db7c0:	b92b      	cbnz	r3, db7ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   db7c2:	6823      	ldr	r3, [r4, #0]
   db7c4:	4620      	mov	r0, r4
   db7c6:	68db      	ldr	r3, [r3, #12]
        }
    }
   db7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db7cc:	4718      	bx	r3
   db7ce:	bd10      	pop	{r4, pc}

000db7d0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   db7d0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db7d2:	4604      	mov	r4, r0
   db7d4:	694d      	ldr	r5, [r1, #20]
   db7d6:	4b05      	ldr	r3, [pc, #20]	; (db7ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   db7d8:	f844 3b04 	str.w	r3, [r4], #4
   db7dc:	358c      	adds	r5, #140	; 0x8c
   db7de:	4606      	mov	r6, r0
   db7e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db7e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db7e4:	682b      	ldr	r3, [r5, #0]
   db7e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   db7e8:	4630      	mov	r0, r6
   db7ea:	bd70      	pop	{r4, r5, r6, pc}
   db7ec:	000e6bfc 	.word	0x000e6bfc

000db7f0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db7f0:	b510      	push	{r4, lr}
   db7f2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db7f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db7f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db7fc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db7fe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db800:	d005      	beq.n	db80e <_ZN9TCPClient4peekEv+0x1e>
   db802:	6962      	ldr	r2, [r4, #20]
   db804:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db808:	4413      	add	r3, r2
   db80a:	7918      	ldrb	r0, [r3, #4]
   db80c:	bd10      	pop	{r4, pc}
   db80e:	6803      	ldr	r3, [r0, #0]
   db810:	691b      	ldr	r3, [r3, #16]
   db812:	4798      	blx	r3
   db814:	2800      	cmp	r0, #0
   db816:	d1f4      	bne.n	db802 <_ZN9TCPClient4peekEv+0x12>
   db818:	f04f 30ff 	mov.w	r0, #4294967295
}
   db81c:	bd10      	pop	{r4, pc}

000db81e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db81e:	b510      	push	{r4, lr}
   db820:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db822:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db826:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db82a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db82c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db82e:	d008      	beq.n	db842 <_ZN9TCPClient4readEv+0x24>
   db830:	6962      	ldr	r2, [r4, #20]
   db832:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db836:	1c59      	adds	r1, r3, #1
   db838:	4413      	add	r3, r2
   db83a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   db83e:	7918      	ldrb	r0, [r3, #4]
   db840:	bd10      	pop	{r4, pc}
   db842:	6803      	ldr	r3, [r0, #0]
   db844:	691b      	ldr	r3, [r3, #16]
   db846:	4798      	blx	r3
   db848:	2800      	cmp	r0, #0
   db84a:	d1f1      	bne.n	db830 <_ZN9TCPClient4readEv+0x12>
   db84c:	f04f 30ff 	mov.w	r0, #4294967295
}
   db850:	bd10      	pop	{r4, pc}

000db852 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   db852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db854:	6943      	ldr	r3, [r0, #20]
   db856:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   db858:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db85c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db860:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   db862:	4605      	mov	r5, r0
   db864:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   db866:	d106      	bne.n	db876 <_ZN9TCPClient4readEPhj+0x24>
   db868:	6803      	ldr	r3, [r0, #0]
   db86a:	691b      	ldr	r3, [r3, #16]
   db86c:	4798      	blx	r3
   db86e:	b910      	cbnz	r0, db876 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   db870:	f04f 34ff 	mov.w	r4, #4294967295
   db874:	e014      	b.n	db8a0 <_ZN9TCPClient4readEPhj+0x4e>
   db876:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   db878:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   db87c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   db880:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   db882:	42bc      	cmp	r4, r7
   db884:	bf28      	it	cs
   db886:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   db888:	4419      	add	r1, r3
   db88a:	4622      	mov	r2, r4
   db88c:	3104      	adds	r1, #4
   db88e:	4630      	mov	r0, r6
   db890:	f006 fee8 	bl	e2664 <memcpy>
   db894:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   db896:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db89a:	4423      	add	r3, r4
   db89c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   db8a0:	4620      	mov	r0, r4
   db8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db8a4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db8a8:	4698      	mov	r8, r3
    stop();
   db8aa:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db8ac:	b093      	sub	sp, #76	; 0x4c
    stop();
   db8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db8b0:	460d      	mov	r5, r1
   db8b2:	4606      	mov	r6, r0
   db8b4:	4617      	mov	r7, r2
    stop();
   db8b6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   db8b8:	ab12      	add	r3, sp, #72	; 0x48
   db8ba:	2400      	movs	r4, #0
   db8bc:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db8c0:	4622      	mov	r2, r4
   db8c2:	4621      	mov	r1, r4
   db8c4:	4628      	mov	r0, r5
   db8c6:	f7fd fed5 	bl	d9674 <netdb_getaddrinfo>
   db8ca:	4681      	mov	r9, r0
   db8cc:	2800      	cmp	r0, #0
   db8ce:	d13d      	bne.n	db94c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   db8d0:	9b00      	ldr	r3, [sp, #0]
   db8d2:	2b00      	cmp	r3, #0
   db8d4:	d056      	beq.n	db984 <_ZN9TCPClient7connectEPKctm+0xe0>
   db8d6:	695b      	ldr	r3, [r3, #20]
   db8d8:	2b00      	cmp	r3, #0
   db8da:	d053      	beq.n	db984 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   db8dc:	a806      	add	r0, sp, #24
   db8de:	f7ff fc0f 	bl	db100 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   db8e2:	9b00      	ldr	r3, [sp, #0]
   db8e4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   db8e6:	7863      	ldrb	r3, [r4, #1]
   db8e8:	2b02      	cmp	r3, #2
   db8ea:	d101      	bne.n	db8f0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   db8ec:	1d21      	adds	r1, r4, #4
   db8ee:	e013      	b.n	db918 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   db8f0:	2b0a      	cmp	r3, #10
   db8f2:	d114      	bne.n	db91e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   db8f4:	2211      	movs	r2, #17
   db8f6:	4649      	mov	r1, r9
   db8f8:	a801      	add	r0, sp, #4
   db8fa:	f006 febe 	bl	e267a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   db8fe:	68a3      	ldr	r3, [r4, #8]
   db900:	bb33      	cbnz	r3, db950 <_ZN9TCPClient7connectEPKctm+0xac>
   db902:	68e3      	ldr	r3, [r4, #12]
   db904:	bb23      	cbnz	r3, db950 <_ZN9TCPClient7connectEPKctm+0xac>
   db906:	f64f 70ff 	movw	r0, #65535	; 0xffff
   db90a:	6925      	ldr	r5, [r4, #16]
   db90c:	f7fd ff9a 	bl	d9844 <inet_htonl>
   db910:	4285      	cmp	r5, r0
   db912:	d11d      	bne.n	db950 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   db914:	f104 0114 	add.w	r1, r4, #20
   db918:	a806      	add	r0, sp, #24
   db91a:	f7ff fc34 	bl	db186 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   db91e:	a806      	add	r0, sp, #24
   db920:	f7ff fc0e 	bl	db140 <_ZNK9IPAddresscvbEv>
        if (addr) {
   db924:	2800      	cmp	r0, #0
   db926:	d02d      	beq.n	db984 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   db928:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db92a:	ad07      	add	r5, sp, #28
   db92c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   db930:	4b18      	ldr	r3, [pc, #96]	; (db994 <_ZN9TCPClient7connectEPKctm+0xf0>)
   db932:	930c      	str	r3, [sp, #48]	; 0x30
   db934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db936:	ac0d      	add	r4, sp, #52	; 0x34
   db938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db93a:	682b      	ldr	r3, [r5, #0]
   db93c:	7023      	strb	r3, [r4, #0]
   db93e:	463a      	mov	r2, r7
   db940:	4643      	mov	r3, r8
   db942:	a90c      	add	r1, sp, #48	; 0x30
   db944:	4630      	mov	r0, r6
   db946:	47c8      	blx	r9
   db948:	4681      	mov	r9, r0
   db94a:	e01b      	b.n	db984 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db94c:	46a1      	mov	r9, r4
   db94e:	e019      	b.n	db984 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   db950:	f104 0308 	add.w	r3, r4, #8
   db954:	ad01      	add	r5, sp, #4
   db956:	3418      	adds	r4, #24
   db958:	6818      	ldr	r0, [r3, #0]
   db95a:	6859      	ldr	r1, [r3, #4]
   db95c:	462a      	mov	r2, r5
   db95e:	c203      	stmia	r2!, {r0, r1}
   db960:	3308      	adds	r3, #8
   db962:	42a3      	cmp	r3, r4
   db964:	4615      	mov	r5, r2
   db966:	d1f7      	bne.n	db958 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   db968:	2306      	movs	r3, #6
            addr = IPAddress(a);
   db96a:	a901      	add	r1, sp, #4
   db96c:	a80c      	add	r0, sp, #48	; 0x30
   db96e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   db970:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   db974:	f7ff fbd2 	bl	db11c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db97a:	ac07      	add	r4, sp, #28
   db97c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db97e:	682b      	ldr	r3, [r5, #0]
   db980:	7023      	strb	r3, [r4, #0]
   db982:	e7cc      	b.n	db91e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   db984:	9800      	ldr	r0, [sp, #0]
   db986:	f7fd fe6d 	bl	d9664 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   db98a:	4648      	mov	r0, r9
   db98c:	b013      	add	sp, #76	; 0x4c
   db98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db992:	bf00      	nop
   db994:	000e6bfc 	.word	0x000e6bfc

000db998 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   db998:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   db99a:	2300      	movs	r3, #0
   db99c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   db9a0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   db9a2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   db9a6:	4770      	bx	lr

000db9a8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db9ac:	461e      	mov	r6, r3
    stop();
   db9ae:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db9b0:	460c      	mov	r4, r1
   db9b2:	b08a      	sub	sp, #40	; 0x28
    stop();
   db9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db9b6:	4605      	mov	r5, r0
   db9b8:	4617      	mov	r7, r2
    stop();
   db9ba:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   db9bc:	7d23      	ldrb	r3, [r4, #20]
   db9be:	f8d5 8014 	ldr.w	r8, [r5, #20]
   db9c2:	2b04      	cmp	r3, #4
   db9c4:	bf0c      	ite	eq
   db9c6:	2002      	moveq	r0, #2
   db9c8:	200a      	movne	r0, #10
   db9ca:	2206      	movs	r2, #6
   db9cc:	2101      	movs	r1, #1
   db9ce:	f7fe f839 	bl	d9a44 <sock_socket>
   db9d2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   db9d6:	696b      	ldr	r3, [r5, #20]
   db9d8:	681b      	ldr	r3, [r3, #0]
   db9da:	2b00      	cmp	r3, #0
   db9dc:	db18      	blt.n	dba10 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   db9de:	4628      	mov	r0, r5
   db9e0:	f7ff ffda 	bl	db998 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   db9e4:	b1d6      	cbz	r6, dba1c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   db9e6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db9e8:	a903      	add	r1, sp, #12
   db9ea:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   db9ec:	9303      	str	r3, [sp, #12]
   db9ee:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db9f2:	f7fd feb7 	bl	d9764 <if_index_to_name>
   db9f6:	b958      	cbnz	r0, dba10 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   db9f8:	6968      	ldr	r0, [r5, #20]
   db9fa:	2306      	movs	r3, #6
   db9fc:	9300      	str	r3, [sp, #0]
   db9fe:	f241 020b 	movw	r2, #4107	; 0x100b
   dba02:	ab03      	add	r3, sp, #12
   dba04:	f640 71ff 	movw	r1, #4095	; 0xfff
   dba08:	6800      	ldr	r0, [r0, #0]
   dba0a:	f7fd fff3 	bl	d99f4 <sock_setsockopt>
   dba0e:	b128      	cbz	r0, dba1c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dba10:	682b      	ldr	r3, [r5, #0]
   dba12:	4628      	mov	r0, r5
   dba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dba16:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dba18:	4798      	blx	r3
   dba1a:	e03b      	b.n	dba94 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   dba1c:	261c      	movs	r6, #28
   dba1e:	4632      	mov	r2, r6
   dba20:	2100      	movs	r1, #0
   dba22:	a803      	add	r0, sp, #12
   dba24:	f006 fe29 	bl	e267a <memset>
    if (ip.version() == 4) {
   dba28:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   dba2a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   dba2e:	2b04      	cmp	r3, #4
   dba30:	d10c      	bne.n	dba4c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dba32:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   dba34:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dba36:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   dba3a:	f7fd ff0b 	bl	d9854 <inet_htons>
   dba3e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   dba42:	6860      	ldr	r0, [r4, #4]
   dba44:	f7fd fefe 	bl	d9844 <inet_htonl>
   dba48:	9004      	str	r0, [sp, #16]
   dba4a:	e013      	b.n	dba74 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dba4c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   dba4e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dba50:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   dba54:	f7fd fefe 	bl	d9854 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dba58:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   dba5a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dba5e:	1d23      	adds	r3, r4, #4
   dba60:	f104 0714 	add.w	r7, r4, #20
   dba64:	6818      	ldr	r0, [r3, #0]
   dba66:	6859      	ldr	r1, [r3, #4]
   dba68:	4632      	mov	r2, r6
   dba6a:	c203      	stmia	r2!, {r0, r1}
   dba6c:	3308      	adds	r3, #8
   dba6e:	42bb      	cmp	r3, r7
   dba70:	4616      	mov	r6, r2
   dba72:	d1f7      	bne.n	dba64 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   dba74:	696b      	ldr	r3, [r5, #20]
   dba76:	221c      	movs	r2, #28
   dba78:	a903      	add	r1, sp, #12
   dba7a:	6818      	ldr	r0, [r3, #0]
   dba7c:	f7fd ffca 	bl	d9a14 <sock_connect>
   dba80:	2800      	cmp	r0, #0
   dba82:	d1c5      	bne.n	dba10 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   dba84:	3404      	adds	r4, #4
   dba86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dba88:	696d      	ldr	r5, [r5, #20]
   dba8a:	358c      	adds	r5, #140	; 0x8c
   dba8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dba8e:	6823      	ldr	r3, [r4, #0]
   dba90:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   dba92:	2401      	movs	r4, #1
}
   dba94:	4620      	mov	r0, r4
   dba96:	b00a      	add	sp, #40	; 0x28
   dba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dba9c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dba9c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   dba9e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dbaa0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   dbaa2:	6818      	ldr	r0, [r3, #0]
   dbaa4:	2800      	cmp	r0, #0
   dbaa6:	db01      	blt.n	dbaac <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   dbaa8:	f7fd ffac 	bl	d9a04 <sock_close>
   dbaac:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   dbaae:	f04f 32ff 	mov.w	r2, #4294967295
   dbab2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dbab4:	6960      	ldr	r0, [r4, #20]
   dbab6:	2211      	movs	r2, #17
   dbab8:	2100      	movs	r1, #0
   dbaba:	308c      	adds	r0, #140	; 0x8c
   dbabc:	f006 fddd 	bl	e267a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   dbac0:	4620      	mov	r0, r4
}
   dbac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   dbac6:	f7ff bf67 	b.w	db998 <_ZN9TCPClient12flush_bufferEv>
	...

000dbacc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dbacc:	b530      	push	{r4, r5, lr}
   dbace:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dbad0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dbad4:	b08b      	sub	sp, #44	; 0x2c
   dbad6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dbad8:	b11b      	cbz	r3, dbae2 <_ZN9TCPClient9availableEv+0x16>
   dbada:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   dbade:	429a      	cmp	r2, r3
   dbae0:	d040      	beq.n	dbb64 <_ZN9TCPClient9availableEv+0x98>
   dbae2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   dbae4:	6818      	ldr	r0, [r3, #0]
   dbae6:	2800      	cmp	r0, #0
   dbae8:	db3f      	blt.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   dbaea:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   dbaee:	2d7f      	cmp	r5, #127	; 0x7f
   dbaf0:	d83b      	bhi.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   dbaf2:	1d19      	adds	r1, r3, #4
   dbaf4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   dbaf8:	2308      	movs	r3, #8
   dbafa:	4429      	add	r1, r5
   dbafc:	f7fd ff92 	bl	d9a24 <sock_recv>
            if (ret > 0) {
   dbb00:	2800      	cmp	r0, #0
   dbb02:	dd0c      	ble.n	dbb1e <_ZN9TCPClient9availableEv+0x52>
   dbb04:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dbb06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dbb0a:	b90a      	cbnz	r2, dbb10 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dbb0c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dbb10:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dbb12:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dbb16:	4418      	add	r0, r3
   dbb18:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dbb1c:	e025      	b.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dbb1e:	f7fe f917 	bl	d9d50 <__errno>
   dbb22:	6803      	ldr	r3, [r0, #0]
   dbb24:	2b0b      	cmp	r3, #11
   dbb26:	d020      	beq.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
   dbb28:	f7fe f912 	bl	d9d50 <__errno>
   dbb2c:	6803      	ldr	r3, [r0, #0]
   dbb2e:	2b0b      	cmp	r3, #11
   dbb30:	d01b      	beq.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dbb32:	2320      	movs	r3, #32
   dbb34:	2500      	movs	r5, #0
   dbb36:	9302      	str	r3, [sp, #8]
   dbb38:	9503      	str	r5, [sp, #12]
   dbb3a:	f7fe f909 	bl	d9d50 <__errno>
   dbb3e:	6803      	ldr	r3, [r0, #0]
   dbb40:	9301      	str	r3, [sp, #4]
   dbb42:	4b0e      	ldr	r3, [pc, #56]	; (dbb7c <_ZN9TCPClient9availableEv+0xb0>)
   dbb44:	9300      	str	r3, [sp, #0]
   dbb46:	aa02      	add	r2, sp, #8
   dbb48:	462b      	mov	r3, r5
   dbb4a:	490d      	ldr	r1, [pc, #52]	; (dbb80 <_ZN9TCPClient9availableEv+0xb4>)
   dbb4c:	2032      	movs	r0, #50	; 0x32
   dbb4e:	f7fd ffc1 	bl	d9ad4 <log_message>
                    sock_close(d_->sock);
   dbb52:	6963      	ldr	r3, [r4, #20]
   dbb54:	6818      	ldr	r0, [r3, #0]
   dbb56:	f7fd ff55 	bl	d9a04 <sock_close>
   dbb5a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dbb5c:	f04f 32ff 	mov.w	r2, #4294967295
   dbb60:	601a      	str	r2, [r3, #0]
   dbb62:	e002      	b.n	dbb6a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dbb64:	f7ff ff18 	bl	db998 <_ZN9TCPClient12flush_bufferEv>
   dbb68:	e7bb      	b.n	dbae2 <_ZN9TCPClient9availableEv+0x16>
   dbb6a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dbb6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dbb70:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dbb74:	1a18      	subs	r0, r3, r0
}
   dbb76:	b00b      	add	sp, #44	; 0x2c
   dbb78:	bd30      	pop	{r4, r5, pc}
   dbb7a:	bf00      	nop
   dbb7c:	000e6d33 	.word	0x000e6d33
   dbb80:	000e6d2c 	.word	0x000e6d2c

000dbb84 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dbb84:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dbb86:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dbb88:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dbb8a:	6001      	str	r1, [r0, #0]
   dbb8c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dbb90:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dbb94:	3088      	adds	r0, #136	; 0x88
   dbb96:	f7ff fab3 	bl	db100 <_ZN9IPAddressC1Ev>
}
   dbb9a:	4620      	mov	r0, r4
   dbb9c:	bd10      	pop	{r4, pc}
	...

000dbba0 <_ZN9TCPClientC1Ei>:
   dbba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dbba4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dbba6:	2300      	movs	r3, #0
   dbba8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dbbaa:	4a14      	ldr	r2, [pc, #80]	; (dbbfc <_ZN9TCPClientC1Ei+0x5c>)
   dbbac:	6043      	str	r3, [r0, #4]
   dbbae:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dbbb0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dbbb2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dbbb4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbbb6:	20a0      	movs	r0, #160	; 0xa0
   dbbb8:	460e      	mov	r6, r1
   dbbba:	f7f8 fa6e 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbbbe:	4605      	mov	r5, r0
   dbbc0:	b110      	cbz	r0, dbbc8 <_ZN9TCPClientC1Ei+0x28>
   dbbc2:	4631      	mov	r1, r6
   dbbc4:	f7ff ffde 	bl	dbb84 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbbc8:	2014      	movs	r0, #20
   dbbca:	f7f8 fa66 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   dbbce:	4603      	mov	r3, r0
   dbbd0:	b128      	cbz	r0, dbbde <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbbd2:	2201      	movs	r2, #1
   dbbd4:	6042      	str	r2, [r0, #4]
   dbbd6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   dbbd8:	4a09      	ldr	r2, [pc, #36]	; (dbc00 <_ZN9TCPClientC1Ei+0x60>)
   dbbda:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   dbbdc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbbde:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   dbbe0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbbe2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   dbbe4:	b128      	cbz	r0, dbbf2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dbbe6:	6843      	ldr	r3, [r0, #4]
   dbbe8:	3b01      	subs	r3, #1
   dbbea:	6043      	str	r3, [r0, #4]
   dbbec:	b90b      	cbnz	r3, dbbf2 <_ZN9TCPClientC1Ei+0x52>
   dbbee:	f7ff fddf 	bl	db7b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   dbbf2:	4620      	mov	r0, r4
   dbbf4:	f7ff fed0 	bl	db998 <_ZN9TCPClient12flush_bufferEv>
}
   dbbf8:	4620      	mov	r0, r4
   dbbfa:	bd70      	pop	{r4, r5, r6, pc}
   dbbfc:	000e6ce8 	.word	0x000e6ce8
   dbc00:	000e6ccc 	.word	0x000e6ccc

000dbc04 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dbc04:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   dbc06:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   dbc0a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   dbc0c:	f7ff ffc8 	bl	dbba0 <_ZN9TCPClientC1Ei>
}
   dbc10:	4620      	mov	r0, r4
   dbc12:	bd10      	pop	{r4, pc}

000dbc14 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   dbc14:	b510      	push	{r4, lr}
   dbc16:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   dbc18:	6800      	ldr	r0, [r0, #0]
   dbc1a:	2800      	cmp	r0, #0
   dbc1c:	db01      	blt.n	dbc22 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   dbc1e:	f7fd fef1 	bl	d9a04 <sock_close>
    }
}
   dbc22:	4620      	mov	r0, r4
   dbc24:	bd10      	pop	{r4, pc}

000dbc26 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   dbc26:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   dbc28:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   dbc2a:	4620      	mov	r0, r4
   dbc2c:	f7ff fff2 	bl	dbc14 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   dbc30:	b124      	cbz	r4, dbc3c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   dbc32:	4620      	mov	r0, r4
   dbc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dbc38:	f7f8 ba31 	b.w	d409e <_ZdlPv>
   dbc3c:	bd10      	pop	{r4, pc}

000dbc3e <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   dbc3e:	4770      	bx	lr

000dbc40 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   dbc40:	2001      	movs	r0, #1
   dbc42:	4770      	bx	lr

000dbc44 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   dbc44:	8983      	ldrh	r3, [r0, #12]
   dbc46:	b11b      	cbz	r3, dbc50 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   dbc48:	6903      	ldr	r3, [r0, #16]
   dbc4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dbc4e:	d102      	bne.n	dbc56 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   dbc50:	ed9f 0a05 	vldr	s0, [pc, #20]	; dbc68 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   dbc54:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   dbc56:	ee07 3a90 	vmov	s15, r3
   dbc5a:	ed9f 7a04 	vldr	s14, [pc, #16]	; dbc6c <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   dbc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dbc62:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dbc66:	4770      	bx	lr
   dbc68:	00000000 	.word	0x00000000
   dbc6c:	42c80000 	.word	0x42c80000

000dbc70 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   dbc70:	8983      	ldrh	r3, [r0, #12]
   dbc72:	b11b      	cbz	r3, dbc7c <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   dbc74:	6983      	ldr	r3, [r0, #24]
   dbc76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dbc7a:	d102      	bne.n	dbc82 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   dbc7c:	ed9f 0a05 	vldr	s0, [pc, #20]	; dbc94 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   dbc80:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   dbc82:	ee07 3a90 	vmov	s15, r3
   dbc86:	ed9f 7a04 	vldr	s14, [pc, #16]	; dbc98 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   dbc8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dbc8e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   dbc92:	4770      	bx	lr
   dbc94:	00000000 	.word	0x00000000
   dbc98:	42c80000 	.word	0x42c80000

000dbc9c <_ZN10WiFiSignalD0Ev>:
   dbc9c:	b510      	push	{r4, lr}
   dbc9e:	2124      	movs	r1, #36	; 0x24
   dbca0:	4604      	mov	r4, r0
   dbca2:	f000 fa44 	bl	dc12e <_ZdlPvj>
   dbca6:	4620      	mov	r0, r4
   dbca8:	bd10      	pop	{r4, pc}

000dbcaa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dbcaa:	2200      	movs	r2, #0
   dbcac:	4611      	mov	r1, r2
   dbcae:	6840      	ldr	r0, [r0, #4]
   dbcb0:	f7fd bfae 	b.w	d9c10 <network_listening>

000dbcb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dbcb4:	2200      	movs	r2, #0
   dbcb6:	4611      	mov	r1, r2
   dbcb8:	6840      	ldr	r0, [r0, #4]
   dbcba:	f7fd bfb9 	b.w	d9c30 <network_get_listen_timeout>

000dbcbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dbcbe:	2200      	movs	r2, #0
   dbcc0:	6840      	ldr	r0, [r0, #4]
   dbcc2:	f7fd bfad 	b.w	d9c20 <network_set_listen_timeout>

000dbcc6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dbcc6:	2200      	movs	r2, #0
   dbcc8:	f081 0101 	eor.w	r1, r1, #1
   dbccc:	6840      	ldr	r0, [r0, #4]
   dbcce:	f7fd bf97 	b.w	d9c00 <network_listen>

000dbcd2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   dbcd2:	2300      	movs	r3, #0
   dbcd4:	461a      	mov	r2, r3
   dbcd6:	4619      	mov	r1, r3
   dbcd8:	6840      	ldr	r0, [r0, #4]
   dbcda:	f7fd bf89 	b.w	d9bf0 <network_off>

000dbcde <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dbcde:	2200      	movs	r2, #0
   dbce0:	4611      	mov	r1, r2
   dbce2:	6840      	ldr	r0, [r0, #4]
   dbce4:	f7fd bf64 	b.w	d9bb0 <network_connecting>

000dbce8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dbce8:	2200      	movs	r2, #0
   dbcea:	2102      	movs	r1, #2
   dbcec:	6840      	ldr	r0, [r0, #4]
   dbcee:	f7fd bf67 	b.w	d9bc0 <network_disconnect>

000dbcf2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dbcf2:	2300      	movs	r3, #0
   dbcf4:	461a      	mov	r2, r3
   dbcf6:	6840      	ldr	r0, [r0, #4]
   dbcf8:	f7fd bf52 	b.w	d9ba0 <network_connect>

000dbcfc <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   dbcfc:	8983      	ldrh	r3, [r0, #12]
   dbcfe:	b17b      	cbz	r3, dbd20 <_ZNK10WiFiSignal10getQualityEv+0x24>
   dbd00:	6a03      	ldr	r3, [r0, #32]
   dbd02:	2b00      	cmp	r3, #0
   dbd04:	db0c      	blt.n	dbd20 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   dbd06:	ee07 3a90 	vmov	s15, r3
   dbd0a:	eddf 6a07 	vldr	s13, [pc, #28]	; dbd28 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   dbd0e:	ed9f 0a07 	vldr	s0, [pc, #28]	; dbd2c <_ZNK10WiFiSignal10getQualityEv+0x30>
   dbd12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dbd16:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dbd1a:	ee27 0a80 	vmul.f32	s0, s15, s0
   dbd1e:	4770      	bx	lr
    }
    return -1.0f;
   dbd20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dbd24:	4770      	bx	lr
   dbd26:	bf00      	nop
   dbd28:	477fff00 	.word	0x477fff00
   dbd2c:	42c80000 	.word	0x42c80000

000dbd30 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   dbd30:	8983      	ldrh	r3, [r0, #12]
   dbd32:	b17b      	cbz	r3, dbd54 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   dbd34:	6943      	ldr	r3, [r0, #20]
   dbd36:	2b00      	cmp	r3, #0
   dbd38:	db0c      	blt.n	dbd54 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   dbd3a:	ee07 3a90 	vmov	s15, r3
   dbd3e:	eddf 6a07 	vldr	s13, [pc, #28]	; dbd5c <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   dbd42:	ed9f 0a07 	vldr	s0, [pc, #28]	; dbd60 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   dbd46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   dbd4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   dbd4e:	ee27 0a80 	vmul.f32	s0, s15, s0
   dbd52:	4770      	bx	lr
    }
    return -1.0f;
   dbd54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dbd58:	4770      	bx	lr
   dbd5a:	bf00      	nop
   dbd5c:	477fff00 	.word	0x477fff00
   dbd60:	42c80000 	.word	0x42c80000

000dbd64 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dbd64:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   dbd66:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   dbd68:	4606      	mov	r6, r0
    inf_ = inf;
   dbd6a:	f100 040c 	add.w	r4, r0, #12
   dbd6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dbd70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dbd72:	e895 0003 	ldmia.w	r5, {r0, r1}
   dbd76:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   dbd7a:	6933      	ldr	r3, [r6, #16]
   dbd7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dbd80:	bf0e      	itee	eq
   dbd82:	2302      	moveq	r3, #2
   dbd84:	2264      	movne	r2, #100	; 0x64
   dbd86:	fb93 f3f2 	sdivne	r3, r3, r2
   dbd8a:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   dbd8c:	69b3      	ldr	r3, [r6, #24]
   dbd8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dbd92:	bf0e      	itee	eq
   dbd94:	2300      	moveq	r3, #0
   dbd96:	2264      	movne	r2, #100	; 0x64
   dbd98:	fb93 f3f2 	sdivne	r3, r3, r2
   dbd9c:	60b3      	str	r3, [r6, #8]
    return true;
}
   dbd9e:	2001      	movs	r0, #1
   dbda0:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbda4 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   dbda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   dbda8:	4b16      	ldr	r3, [pc, #88]	; (dbe04 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   dbdaa:	6003      	str	r3, [r0, #0]
   dbdac:	2500      	movs	r5, #0
   dbdae:	4688      	mov	r8, r1
   dbdb0:	2702      	movs	r7, #2
   dbdb2:	2618      	movs	r6, #24
   dbdb4:	b086      	sub	sp, #24
   dbdb6:	6047      	str	r7, [r0, #4]
   dbdb8:	6085      	str	r5, [r0, #8]
   dbdba:	4632      	mov	r2, r6
   dbdbc:	4629      	mov	r1, r5
   dbdbe:	4604      	mov	r4, r0
   dbdc0:	300c      	adds	r0, #12
   dbdc2:	f006 fc5a 	bl	e267a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dbdc6:	462a      	mov	r2, r5
   dbdc8:	4629      	mov	r1, r5
   dbdca:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dbdce:	f7fd feff 	bl	d9bd0 <network_ready>
   dbdd2:	b190      	cbz	r0, dbdfa <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   dbdd4:	4632      	mov	r2, r6
   dbdd6:	4629      	mov	r1, r5
   dbdd8:	4668      	mov	r0, sp
   dbdda:	f006 fc4e 	bl	e267a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dbdde:	462a      	mov	r2, r5
   dbde0:	4669      	mov	r1, sp
   dbde2:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   dbde4:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dbde8:	f7fd fe6c 	bl	d9ac4 <wlan_connected_info>
        if (r == 0) {
   dbdec:	b920      	cbnz	r0, dbdf8 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   dbdee:	4669      	mov	r1, sp
   dbdf0:	4620      	mov	r0, r4
   dbdf2:	f7ff ffb7 	bl	dbd64 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   dbdf6:	e000      	b.n	dbdfa <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   dbdf8:	6067      	str	r7, [r4, #4]
        return sig;
    }
   dbdfa:	4620      	mov	r0, r4
   dbdfc:	b006      	add	sp, #24
   dbdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbe02:	bf00      	nop
   dbe04:	000e6d80 	.word	0x000e6d80

000dbe08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   dbe08:	4b02      	ldr	r3, [pc, #8]	; (dbe14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   dbe0a:	2204      	movs	r2, #4
   dbe0c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   dbe0e:	4a02      	ldr	r2, [pc, #8]	; (dbe18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   dbe10:	601a      	str	r2, [r3, #0]
   dbe12:	4770      	bx	lr
   dbe14:	2003e5e0 	.word	0x2003e5e0
   dbe18:	000e6d4c 	.word	0x000e6d4c

000dbe1c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   dbe1c:	2300      	movs	r3, #0
   dbe1e:	461a      	mov	r2, r3
   dbe20:	6840      	ldr	r0, [r0, #4]
   dbe22:	f7fd bebd 	b.w	d9ba0 <network_connect>

000dbe26 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   dbe26:	2200      	movs	r2, #0
   dbe28:	2102      	movs	r1, #2
   dbe2a:	6840      	ldr	r0, [r0, #4]
   dbe2c:	f7fd bec8 	b.w	d9bc0 <network_disconnect>

000dbe30 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   dbe30:	2200      	movs	r2, #0
   dbe32:	4611      	mov	r1, r2
   dbe34:	6840      	ldr	r0, [r0, #4]
   dbe36:	f7fd bebb 	b.w	d9bb0 <network_connecting>

000dbe3a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   dbe3a:	2200      	movs	r2, #0
   dbe3c:	4611      	mov	r1, r2
   dbe3e:	6840      	ldr	r0, [r0, #4]
   dbe40:	f7fd bec6 	b.w	d9bd0 <network_ready>

000dbe44 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   dbe44:	2300      	movs	r3, #0
   dbe46:	461a      	mov	r2, r3
   dbe48:	4619      	mov	r1, r3
   dbe4a:	6840      	ldr	r0, [r0, #4]
   dbe4c:	f7fd bec8 	b.w	d9be0 <network_on>

000dbe50 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   dbe50:	2300      	movs	r3, #0
   dbe52:	461a      	mov	r2, r3
   dbe54:	4619      	mov	r1, r3
   dbe56:	6840      	ldr	r0, [r0, #4]
   dbe58:	f7fd beca 	b.w	d9bf0 <network_off>

000dbe5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   dbe5c:	2200      	movs	r2, #0
   dbe5e:	f081 0101 	eor.w	r1, r1, #1
   dbe62:	6840      	ldr	r0, [r0, #4]
   dbe64:	f7fd becc 	b.w	d9c00 <network_listen>

000dbe68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   dbe68:	2200      	movs	r2, #0
   dbe6a:	6840      	ldr	r0, [r0, #4]
   dbe6c:	f7fd bed8 	b.w	d9c20 <network_set_listen_timeout>

000dbe70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   dbe70:	2200      	movs	r2, #0
   dbe72:	4611      	mov	r1, r2
   dbe74:	6840      	ldr	r0, [r0, #4]
   dbe76:	f7fd bedb 	b.w	d9c30 <network_get_listen_timeout>

000dbe7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   dbe7a:	2200      	movs	r2, #0
   dbe7c:	4611      	mov	r1, r2
   dbe7e:	6840      	ldr	r0, [r0, #4]
   dbe80:	f7fd bec6 	b.w	d9c10 <network_listening>

000dbe84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   dbe84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dbe88:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   dbe8a:	b095      	sub	sp, #84	; 0x54
   dbe8c:	4616      	mov	r6, r2
   dbe8e:	460d      	mov	r5, r1
   dbe90:	4607      	mov	r7, r0
    IPAddress addr;
   dbe92:	f7ff f935 	bl	db100 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   dbe96:	4621      	mov	r1, r4
   dbe98:	2220      	movs	r2, #32
   dbe9a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   dbe9c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   dbe9e:	f006 fbec 	bl	e267a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   dbea2:	2340      	movs	r3, #64	; 0x40
   dbea4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   dbea6:	4621      	mov	r1, r4
   dbea8:	466b      	mov	r3, sp
   dbeaa:	aa0c      	add	r2, sp, #48	; 0x30
   dbeac:	4630      	mov	r0, r6
   dbeae:	f7fd fbe1 	bl	d9674 <netdb_getaddrinfo>
    if (!r) {
   dbeb2:	4604      	mov	r4, r0
   dbeb4:	2800      	cmp	r0, #0
   dbeb6:	d144      	bne.n	dbf42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbeb8:	4602      	mov	r2, r0
   dbeba:	2101      	movs	r1, #1
   dbebc:	6868      	ldr	r0, [r5, #4]
   dbebe:	f7fd fe87 	bl	d9bd0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbec2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dbec4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbec6:	4622      	mov	r2, r4
   dbec8:	6868      	ldr	r0, [r5, #4]
   dbeca:	f7fd fe81 	bl	d9bd0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbece:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dbed0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   dbed2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbed4:	2e00      	cmp	r6, #0
   dbed6:	d034      	beq.n	dbf42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   dbed8:	2900      	cmp	r1, #0
   dbeda:	d132      	bne.n	dbf42 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dbedc:	6873      	ldr	r3, [r6, #4]
   dbede:	2b02      	cmp	r3, #2
   dbee0:	d002      	beq.n	dbee8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   dbee2:	2b0a      	cmp	r3, #10
   dbee4:	d009      	beq.n	dbefa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   dbee6:	e02a      	b.n	dbf3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   dbee8:	f1b8 0f00 	cmp.w	r8, #0
   dbeec:	d027      	beq.n	dbf3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dbeee:	6971      	ldr	r1, [r6, #20]
   dbef0:	4638      	mov	r0, r7
   dbef2:	3104      	adds	r1, #4
   dbef4:	f7ff f947 	bl	db186 <_ZN9IPAddressaSEPKh>
   dbef8:	e020      	b.n	dbf3c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   dbefa:	f1b9 0f00 	cmp.w	r9, #0
   dbefe:	d01e      	beq.n	dbf3e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   dbf00:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   dbf02:	2211      	movs	r2, #17
   dbf04:	a801      	add	r0, sp, #4
   dbf06:	f006 fbb8 	bl	e267a <memset>
                    a.v = 6;
   dbf0a:	2306      	movs	r3, #6
   dbf0c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   dbf10:	ad01      	add	r5, sp, #4
   dbf12:	f104 0308 	add.w	r3, r4, #8
   dbf16:	3418      	adds	r4, #24
   dbf18:	6818      	ldr	r0, [r3, #0]
   dbf1a:	6859      	ldr	r1, [r3, #4]
   dbf1c:	462a      	mov	r2, r5
   dbf1e:	c203      	stmia	r2!, {r0, r1}
   dbf20:	3308      	adds	r3, #8
   dbf22:	42a3      	cmp	r3, r4
   dbf24:	4615      	mov	r5, r2
   dbf26:	d1f7      	bne.n	dbf18 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   dbf28:	a901      	add	r1, sp, #4
   dbf2a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dbf2c:	ad07      	add	r5, sp, #28
   dbf2e:	f7ff f8f5 	bl	db11c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dbf32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dbf34:	1d3c      	adds	r4, r7, #4
   dbf36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dbf38:	682b      	ldr	r3, [r5, #0]
   dbf3a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   dbf3c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dbf3e:	69f6      	ldr	r6, [r6, #28]
   dbf40:	e7c8      	b.n	dbed4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   dbf42:	9800      	ldr	r0, [sp, #0]
   dbf44:	f7fd fb8e 	bl	d9664 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   dbf48:	4638      	mov	r0, r7
   dbf4a:	b015      	add	sp, #84	; 0x54
   dbf4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbf50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   dbf50:	4b02      	ldr	r3, [pc, #8]	; (dbf5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   dbf52:	4a03      	ldr	r2, [pc, #12]	; (dbf60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   dbf54:	601a      	str	r2, [r3, #0]
   dbf56:	2200      	movs	r2, #0
   dbf58:	605a      	str	r2, [r3, #4]
   dbf5a:	4770      	bx	lr
   dbf5c:	2003e5e8 	.word	0x2003e5e8
   dbf60:	000e6da4 	.word	0x000e6da4

000dbf64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dbf64:	b510      	push	{r4, lr}
   dbf66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dbf68:	480f      	ldr	r0, [pc, #60]	; (dbfa8 <pinAvailable+0x44>)
   dbf6a:	f7fd ff81 	bl	d9e70 <_ZN8SPIClass9isEnabledEv>
   dbf6e:	b128      	cbz	r0, dbf7c <pinAvailable+0x18>
   dbf70:	f1a4 030b 	sub.w	r3, r4, #11
   dbf74:	2b02      	cmp	r3, #2
   dbf76:	d801      	bhi.n	dbf7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   dbf78:	2000      	movs	r0, #0
   dbf7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dbf7c:	f000 f8b2 	bl	dc0e4 <_Z19__fetch_global_Wirev>
   dbf80:	f7ff faca 	bl	db518 <_ZN7TwoWire9isEnabledEv>
   dbf84:	b108      	cbz	r0, dbf8a <pinAvailable+0x26>
   dbf86:	2c01      	cmp	r4, #1
   dbf88:	d9f6      	bls.n	dbf78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dbf8a:	f7ff fa1b 	bl	db3c4 <_Z22__fetch_global_Serial1v>
   dbf8e:	f7ff fa16 	bl	db3be <_ZN11USARTSerial9isEnabledEv>
   dbf92:	b118      	cbz	r0, dbf9c <pinAvailable+0x38>
   dbf94:	f1a4 0309 	sub.w	r3, r4, #9
   dbf98:	2b01      	cmp	r3, #1
   dbf9a:	d9ed      	bls.n	dbf78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dbf9c:	2c23      	cmp	r4, #35	; 0x23
   dbf9e:	bf8c      	ite	hi
   dbfa0:	2000      	movhi	r0, #0
   dbfa2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dbfa4:	bd10      	pop	{r4, pc}
   dbfa6:	bf00      	nop
   dbfa8:	2003e5f0 	.word	0x2003e5f0

000dbfac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbfac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dbfae:	b538      	push	{r3, r4, r5, lr}
   dbfb0:	4604      	mov	r4, r0
   dbfb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbfb4:	d80a      	bhi.n	dbfcc <pinMode+0x20>
   dbfb6:	29ff      	cmp	r1, #255	; 0xff
   dbfb8:	d008      	beq.n	dbfcc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbfba:	f7ff ffd3 	bl	dbf64 <pinAvailable>
   dbfbe:	b128      	cbz	r0, dbfcc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbfc0:	4629      	mov	r1, r5
   dbfc2:	4620      	mov	r0, r4
}
   dbfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dbfc8:	f7fd bb6c 	b.w	d96a4 <HAL_Pin_Mode>
   dbfcc:	bd38      	pop	{r3, r4, r5, pc}

000dbfce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbfce:	b538      	push	{r3, r4, r5, lr}
   dbfd0:	4604      	mov	r4, r0
   dbfd2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbfd4:	f7fd fb6e 	bl	d96b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbfd8:	28ff      	cmp	r0, #255	; 0xff
   dbfda:	d010      	beq.n	dbffe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dbfdc:	2806      	cmp	r0, #6
   dbfde:	d804      	bhi.n	dbfea <digitalWrite+0x1c>
   dbfe0:	234d      	movs	r3, #77	; 0x4d
   dbfe2:	fa23 f000 	lsr.w	r0, r3, r0
   dbfe6:	07c3      	lsls	r3, r0, #31
   dbfe8:	d409      	bmi.n	dbffe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbfea:	4620      	mov	r0, r4
   dbfec:	f7ff ffba 	bl	dbf64 <pinAvailable>
   dbff0:	b128      	cbz	r0, dbffe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbff2:	4629      	mov	r1, r5
   dbff4:	4620      	mov	r0, r4
}
   dbff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbffa:	f7fd bb63 	b.w	d96c4 <HAL_GPIO_Write>
   dbffe:	bd38      	pop	{r3, r4, r5, pc}

000dc000 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dc000:	b510      	push	{r4, lr}
   dc002:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dc004:	f7fd fb56 	bl	d96b4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dc008:	3804      	subs	r0, #4
   dc00a:	b2c0      	uxtb	r0, r0
   dc00c:	2801      	cmp	r0, #1
   dc00e:	d908      	bls.n	dc022 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dc010:	4620      	mov	r0, r4
   dc012:	f7ff ffa7 	bl	dbf64 <pinAvailable>
   dc016:	b120      	cbz	r0, dc022 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dc018:	4620      	mov	r0, r4
}
   dc01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dc01e:	f7fd bb59 	b.w	d96d4 <HAL_GPIO_Read>
}
   dc022:	2000      	movs	r0, #0
   dc024:	bd10      	pop	{r4, pc}

000dc026 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dc026:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dc028:	b510      	push	{r4, lr}
   dc02a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dc02c:	bf9c      	itt	ls
   dc02e:	340e      	addls	r4, #14
   dc030:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dc032:	4620      	mov	r0, r4
   dc034:	f7ff ff96 	bl	dbf64 <pinAvailable>
   dc038:	b150      	cbz	r0, dc050 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dc03a:	2103      	movs	r1, #3
   dc03c:	4620      	mov	r0, r4
   dc03e:	f7fd fb29 	bl	d9694 <HAL_Validate_Pin_Function>
   dc042:	2803      	cmp	r0, #3
   dc044:	d104      	bne.n	dc050 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dc046:	4620      	mov	r0, r4
}
   dc048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dc04c:	f7fd bb62 	b.w	d9714 <HAL_ADC_Read>
}
   dc050:	2000      	movs	r0, #0
   dc052:	bd10      	pop	{r4, pc}

000dc054 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dc054:	b538      	push	{r3, r4, r5, lr}
   dc056:	4604      	mov	r4, r0
   dc058:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dc05a:	f7ff ff83 	bl	dbf64 <pinAvailable>
   dc05e:	b1f0      	cbz	r0, dc09e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dc060:	2104      	movs	r1, #4
   dc062:	4620      	mov	r0, r4
   dc064:	f7fd fb16 	bl	d9694 <HAL_Validate_Pin_Function>
   dc068:	2804      	cmp	r0, #4
   dc06a:	d105      	bne.n	dc078 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dc06c:	b2a9      	uxth	r1, r5
   dc06e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dc070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dc074:	f7fd bb46 	b.w	d9704 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dc078:	2102      	movs	r1, #2
   dc07a:	4620      	mov	r0, r4
   dc07c:	f7fd fb0a 	bl	d9694 <HAL_Validate_Pin_Function>
   dc080:	2802      	cmp	r0, #2
   dc082:	d10c      	bne.n	dc09e <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dc084:	4620      	mov	r0, r4
   dc086:	f7fd fb15 	bl	d96b4 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dc08a:	2801      	cmp	r0, #1
   dc08c:	d001      	beq.n	dc092 <_Z11analogWritetm+0x3e>
   dc08e:	2804      	cmp	r0, #4
   dc090:	d105      	bne.n	dc09e <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dc092:	4629      	mov	r1, r5
   dc094:	4620      	mov	r0, r4
    }
}
   dc096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dc09a:	f7fd bb43 	b.w	d9724 <HAL_PWM_Write_Ext>
   dc09e:	bd38      	pop	{r3, r4, r5, pc}

000dc0a0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dc0a0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dc0a2:	4c0c      	ldr	r4, [pc, #48]	; (dc0d4 <_GLOBAL__sub_I_SPI+0x34>)
   dc0a4:	4e0c      	ldr	r6, [pc, #48]	; (dc0d8 <_GLOBAL__sub_I_SPI+0x38>)
   dc0a6:	4d0d      	ldr	r5, [pc, #52]	; (dc0dc <_GLOBAL__sub_I_SPI+0x3c>)
   dc0a8:	2100      	movs	r1, #0
   dc0aa:	4620      	mov	r0, r4
   dc0ac:	f7fd fec6 	bl	d9e3c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dc0b0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dc0b2:	4c0b      	ldr	r4, [pc, #44]	; (dc0e0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   dc0b4:	4632      	mov	r2, r6
   dc0b6:	4629      	mov	r1, r5
   dc0b8:	f000 f834 	bl	dc124 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   dc0bc:	2101      	movs	r1, #1
   dc0be:	4620      	mov	r0, r4
   dc0c0:	f7fd febc 	bl	d9e3c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dc0c4:	4632      	mov	r2, r6
   dc0c6:	4629      	mov	r1, r5
   dc0c8:	4620      	mov	r0, r4
   dc0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dc0ce:	f000 b829 	b.w	dc124 <__aeabi_atexit>
   dc0d2:	bf00      	nop
   dc0d4:	2003e5f0 	.word	0x2003e5f0
   dc0d8:	2003d728 	.word	0x2003d728
   dc0dc:	000d9e2d 	.word	0x000d9e2d
   dc0e0:	2003e600 	.word	0x2003e600

000dc0e4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   dc0e4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   dc0e6:	4d0b      	ldr	r5, [pc, #44]	; (dc114 <_Z19__fetch_global_Wirev+0x30>)
   dc0e8:	6829      	ldr	r1, [r5, #0]
   dc0ea:	f011 0401 	ands.w	r4, r1, #1
   dc0ee:	d10f      	bne.n	dc110 <_Z19__fetch_global_Wirev+0x2c>
   dc0f0:	4628      	mov	r0, r5
   dc0f2:	f7f7 ffd8 	bl	d40a6 <__cxa_guard_acquire>
   dc0f6:	b158      	cbz	r0, dc110 <_Z19__fetch_global_Wirev+0x2c>
   dc0f8:	4621      	mov	r1, r4
   dc0fa:	4807      	ldr	r0, [pc, #28]	; (dc118 <_Z19__fetch_global_Wirev+0x34>)
   dc0fc:	f7ff f9c8 	bl	db490 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   dc100:	4628      	mov	r0, r5
   dc102:	f7f7 ffd5 	bl	d40b0 <__cxa_guard_release>
   dc106:	4a05      	ldr	r2, [pc, #20]	; (dc11c <_Z19__fetch_global_Wirev+0x38>)
   dc108:	4905      	ldr	r1, [pc, #20]	; (dc120 <_Z19__fetch_global_Wirev+0x3c>)
   dc10a:	4803      	ldr	r0, [pc, #12]	; (dc118 <_Z19__fetch_global_Wirev+0x34>)
   dc10c:	f000 f80a 	bl	dc124 <__aeabi_atexit>
	return wire;
}
   dc110:	4801      	ldr	r0, [pc, #4]	; (dc118 <_Z19__fetch_global_Wirev+0x34>)
   dc112:	bd38      	pop	{r3, r4, r5, pc}
   dc114:	2003e614 	.word	0x2003e614
   dc118:	2003e618 	.word	0x2003e618
   dc11c:	2003d728 	.word	0x2003d728
   dc120:	000db439 	.word	0x000db439

000dc124 <__aeabi_atexit>:
   dc124:	460b      	mov	r3, r1
   dc126:	4601      	mov	r1, r0
   dc128:	4618      	mov	r0, r3
   dc12a:	f006 b991 	b.w	e2450 <__cxa_atexit>

000dc12e <_ZdlPvj>:
   dc12e:	f7f7 bfb6 	b.w	d409e <_ZdlPv>

000dc132 <_ZSt25__throw_bad_function_callv>:
   dc132:	b508      	push	{r3, lr}
   dc134:	f7fd fdfc 	bl	d9d30 <abort>

000dc138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc138:	4b18      	ldr	r3, [pc, #96]	; (dc19c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc13a:	681a      	ldr	r2, [r3, #0]
   dc13c:	07d1      	lsls	r1, r2, #31
   dc13e:	bf5c      	itt	pl
   dc140:	2201      	movpl	r2, #1
   dc142:	601a      	strpl	r2, [r3, #0]
   dc144:	4b16      	ldr	r3, [pc, #88]	; (dc1a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc146:	681a      	ldr	r2, [r3, #0]
   dc148:	07d2      	lsls	r2, r2, #31
   dc14a:	bf5c      	itt	pl
   dc14c:	2201      	movpl	r2, #1
   dc14e:	601a      	strpl	r2, [r3, #0]
   dc150:	4b14      	ldr	r3, [pc, #80]	; (dc1a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc152:	681a      	ldr	r2, [r3, #0]
   dc154:	07d0      	lsls	r0, r2, #31
   dc156:	bf5c      	itt	pl
   dc158:	2201      	movpl	r2, #1
   dc15a:	601a      	strpl	r2, [r3, #0]
   dc15c:	4b12      	ldr	r3, [pc, #72]	; (dc1a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc15e:	681a      	ldr	r2, [r3, #0]
   dc160:	07d1      	lsls	r1, r2, #31
   dc162:	bf5c      	itt	pl
   dc164:	2201      	movpl	r2, #1
   dc166:	601a      	strpl	r2, [r3, #0]
   dc168:	4b10      	ldr	r3, [pc, #64]	; (dc1ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc16a:	681a      	ldr	r2, [r3, #0]
   dc16c:	07d2      	lsls	r2, r2, #31
   dc16e:	bf5c      	itt	pl
   dc170:	2201      	movpl	r2, #1
   dc172:	601a      	strpl	r2, [r3, #0]
   dc174:	4b0e      	ldr	r3, [pc, #56]	; (dc1b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc176:	681a      	ldr	r2, [r3, #0]
   dc178:	07d0      	lsls	r0, r2, #31
   dc17a:	bf5c      	itt	pl
   dc17c:	2201      	movpl	r2, #1
   dc17e:	601a      	strpl	r2, [r3, #0]
   dc180:	4b0c      	ldr	r3, [pc, #48]	; (dc1b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc182:	681a      	ldr	r2, [r3, #0]
   dc184:	07d1      	lsls	r1, r2, #31
   dc186:	bf5c      	itt	pl
   dc188:	2201      	movpl	r2, #1
   dc18a:	601a      	strpl	r2, [r3, #0]
   dc18c:	4b0a      	ldr	r3, [pc, #40]	; (dc1b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc18e:	681a      	ldr	r2, [r3, #0]
   dc190:	07d2      	lsls	r2, r2, #31
   dc192:	bf5c      	itt	pl
   dc194:	2201      	movpl	r2, #1
   dc196:	601a      	strpl	r2, [r3, #0]
   dc198:	4770      	bx	lr
   dc19a:	bf00      	nop
   dc19c:	2003e648 	.word	0x2003e648
   dc1a0:	2003e644 	.word	0x2003e644
   dc1a4:	2003e640 	.word	0x2003e640
   dc1a8:	2003e63c 	.word	0x2003e63c
   dc1ac:	2003e638 	.word	0x2003e638
   dc1b0:	2003e634 	.word	0x2003e634
   dc1b4:	2003e630 	.word	0x2003e630
   dc1b8:	2003e62c 	.word	0x2003e62c

000dc1bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dc1bc:	4b24      	ldr	r3, [pc, #144]	; (dc250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dc1be:	681a      	ldr	r2, [r3, #0]
   dc1c0:	07d0      	lsls	r0, r2, #31
   dc1c2:	bf5c      	itt	pl
   dc1c4:	2201      	movpl	r2, #1
   dc1c6:	601a      	strpl	r2, [r3, #0]
   dc1c8:	4b22      	ldr	r3, [pc, #136]	; (dc254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dc1ca:	681a      	ldr	r2, [r3, #0]
   dc1cc:	07d1      	lsls	r1, r2, #31
   dc1ce:	bf5c      	itt	pl
   dc1d0:	2201      	movpl	r2, #1
   dc1d2:	601a      	strpl	r2, [r3, #0]
   dc1d4:	4b20      	ldr	r3, [pc, #128]	; (dc258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dc1d6:	681a      	ldr	r2, [r3, #0]
   dc1d8:	07d2      	lsls	r2, r2, #31
   dc1da:	bf5c      	itt	pl
   dc1dc:	2201      	movpl	r2, #1
   dc1de:	601a      	strpl	r2, [r3, #0]
   dc1e0:	4b1e      	ldr	r3, [pc, #120]	; (dc25c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dc1e2:	681a      	ldr	r2, [r3, #0]
   dc1e4:	07d0      	lsls	r0, r2, #31
   dc1e6:	bf5c      	itt	pl
   dc1e8:	2201      	movpl	r2, #1
   dc1ea:	601a      	strpl	r2, [r3, #0]
   dc1ec:	4b1c      	ldr	r3, [pc, #112]	; (dc260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dc1ee:	681a      	ldr	r2, [r3, #0]
   dc1f0:	07d1      	lsls	r1, r2, #31
   dc1f2:	bf5c      	itt	pl
   dc1f4:	2201      	movpl	r2, #1
   dc1f6:	601a      	strpl	r2, [r3, #0]
   dc1f8:	4b1a      	ldr	r3, [pc, #104]	; (dc264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dc1fa:	681a      	ldr	r2, [r3, #0]
   dc1fc:	07d2      	lsls	r2, r2, #31
   dc1fe:	bf5c      	itt	pl
   dc200:	2201      	movpl	r2, #1
   dc202:	601a      	strpl	r2, [r3, #0]
   dc204:	4b18      	ldr	r3, [pc, #96]	; (dc268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dc206:	681a      	ldr	r2, [r3, #0]
   dc208:	07d0      	lsls	r0, r2, #31
   dc20a:	bf5c      	itt	pl
   dc20c:	2201      	movpl	r2, #1
   dc20e:	601a      	strpl	r2, [r3, #0]
   dc210:	4b16      	ldr	r3, [pc, #88]	; (dc26c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dc212:	681a      	ldr	r2, [r3, #0]
   dc214:	07d1      	lsls	r1, r2, #31
   dc216:	bf5c      	itt	pl
   dc218:	2201      	movpl	r2, #1
   dc21a:	601a      	strpl	r2, [r3, #0]
   dc21c:	4b14      	ldr	r3, [pc, #80]	; (dc270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dc21e:	681a      	ldr	r2, [r3, #0]
   dc220:	07d2      	lsls	r2, r2, #31
   dc222:	bf5c      	itt	pl
   dc224:	2201      	movpl	r2, #1
   dc226:	601a      	strpl	r2, [r3, #0]
   dc228:	4b12      	ldr	r3, [pc, #72]	; (dc274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dc22a:	681a      	ldr	r2, [r3, #0]
   dc22c:	07d0      	lsls	r0, r2, #31
   dc22e:	bf5c      	itt	pl
   dc230:	2201      	movpl	r2, #1
   dc232:	601a      	strpl	r2, [r3, #0]
   dc234:	4b10      	ldr	r3, [pc, #64]	; (dc278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dc236:	681a      	ldr	r2, [r3, #0]
   dc238:	07d1      	lsls	r1, r2, #31
   dc23a:	bf5c      	itt	pl
   dc23c:	2201      	movpl	r2, #1
   dc23e:	601a      	strpl	r2, [r3, #0]
   dc240:	4b0e      	ldr	r3, [pc, #56]	; (dc27c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dc242:	681a      	ldr	r2, [r3, #0]
   dc244:	07d2      	lsls	r2, r2, #31
   dc246:	bf5c      	itt	pl
   dc248:	2201      	movpl	r2, #1
   dc24a:	601a      	strpl	r2, [r3, #0]
   dc24c:	4770      	bx	lr
   dc24e:	bf00      	nop
   dc250:	2003e678 	.word	0x2003e678
   dc254:	2003e674 	.word	0x2003e674
   dc258:	2003e670 	.word	0x2003e670
   dc25c:	2003e66c 	.word	0x2003e66c
   dc260:	2003e668 	.word	0x2003e668
   dc264:	2003e664 	.word	0x2003e664
   dc268:	2003e660 	.word	0x2003e660
   dc26c:	2003e65c 	.word	0x2003e65c
   dc270:	2003e658 	.word	0x2003e658
   dc274:	2003e654 	.word	0x2003e654
   dc278:	2003e650 	.word	0x2003e650
   dc27c:	2003e64c 	.word	0x2003e64c

000dc280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dc280:	4b24      	ldr	r3, [pc, #144]	; (dc314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dc282:	681a      	ldr	r2, [r3, #0]
   dc284:	07d0      	lsls	r0, r2, #31
   dc286:	bf5c      	itt	pl
   dc288:	2201      	movpl	r2, #1
   dc28a:	601a      	strpl	r2, [r3, #0]
   dc28c:	4b22      	ldr	r3, [pc, #136]	; (dc318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dc28e:	681a      	ldr	r2, [r3, #0]
   dc290:	07d1      	lsls	r1, r2, #31
   dc292:	bf5c      	itt	pl
   dc294:	2201      	movpl	r2, #1
   dc296:	601a      	strpl	r2, [r3, #0]
   dc298:	4b20      	ldr	r3, [pc, #128]	; (dc31c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dc29a:	681a      	ldr	r2, [r3, #0]
   dc29c:	07d2      	lsls	r2, r2, #31
   dc29e:	bf5c      	itt	pl
   dc2a0:	2201      	movpl	r2, #1
   dc2a2:	601a      	strpl	r2, [r3, #0]
   dc2a4:	4b1e      	ldr	r3, [pc, #120]	; (dc320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dc2a6:	681a      	ldr	r2, [r3, #0]
   dc2a8:	07d0      	lsls	r0, r2, #31
   dc2aa:	bf5c      	itt	pl
   dc2ac:	2201      	movpl	r2, #1
   dc2ae:	601a      	strpl	r2, [r3, #0]
   dc2b0:	4b1c      	ldr	r3, [pc, #112]	; (dc324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dc2b2:	681a      	ldr	r2, [r3, #0]
   dc2b4:	07d1      	lsls	r1, r2, #31
   dc2b6:	bf5c      	itt	pl
   dc2b8:	2201      	movpl	r2, #1
   dc2ba:	601a      	strpl	r2, [r3, #0]
   dc2bc:	4b1a      	ldr	r3, [pc, #104]	; (dc328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dc2be:	681a      	ldr	r2, [r3, #0]
   dc2c0:	07d2      	lsls	r2, r2, #31
   dc2c2:	bf5c      	itt	pl
   dc2c4:	2201      	movpl	r2, #1
   dc2c6:	601a      	strpl	r2, [r3, #0]
   dc2c8:	4b18      	ldr	r3, [pc, #96]	; (dc32c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dc2ca:	681a      	ldr	r2, [r3, #0]
   dc2cc:	07d0      	lsls	r0, r2, #31
   dc2ce:	bf5c      	itt	pl
   dc2d0:	2201      	movpl	r2, #1
   dc2d2:	601a      	strpl	r2, [r3, #0]
   dc2d4:	4b16      	ldr	r3, [pc, #88]	; (dc330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dc2d6:	681a      	ldr	r2, [r3, #0]
   dc2d8:	07d1      	lsls	r1, r2, #31
   dc2da:	bf5c      	itt	pl
   dc2dc:	2201      	movpl	r2, #1
   dc2de:	601a      	strpl	r2, [r3, #0]
   dc2e0:	4b14      	ldr	r3, [pc, #80]	; (dc334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dc2e2:	681a      	ldr	r2, [r3, #0]
   dc2e4:	07d2      	lsls	r2, r2, #31
   dc2e6:	bf5c      	itt	pl
   dc2e8:	2201      	movpl	r2, #1
   dc2ea:	601a      	strpl	r2, [r3, #0]
   dc2ec:	4b12      	ldr	r3, [pc, #72]	; (dc338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dc2ee:	681a      	ldr	r2, [r3, #0]
   dc2f0:	07d0      	lsls	r0, r2, #31
   dc2f2:	bf5c      	itt	pl
   dc2f4:	2201      	movpl	r2, #1
   dc2f6:	601a      	strpl	r2, [r3, #0]
   dc2f8:	4b10      	ldr	r3, [pc, #64]	; (dc33c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dc2fa:	681a      	ldr	r2, [r3, #0]
   dc2fc:	07d1      	lsls	r1, r2, #31
   dc2fe:	bf5c      	itt	pl
   dc300:	2201      	movpl	r2, #1
   dc302:	601a      	strpl	r2, [r3, #0]
   dc304:	4b0e      	ldr	r3, [pc, #56]	; (dc340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dc306:	681a      	ldr	r2, [r3, #0]
   dc308:	07d2      	lsls	r2, r2, #31
   dc30a:	bf5c      	itt	pl
   dc30c:	2201      	movpl	r2, #1
   dc30e:	601a      	strpl	r2, [r3, #0]
   dc310:	4770      	bx	lr
   dc312:	bf00      	nop
   dc314:	2003e6a8 	.word	0x2003e6a8
   dc318:	2003e6a4 	.word	0x2003e6a4
   dc31c:	2003e6a0 	.word	0x2003e6a0
   dc320:	2003e69c 	.word	0x2003e69c
   dc324:	2003e698 	.word	0x2003e698
   dc328:	2003e694 	.word	0x2003e694
   dc32c:	2003e690 	.word	0x2003e690
   dc330:	2003e68c 	.word	0x2003e68c
   dc334:	2003e688 	.word	0x2003e688
   dc338:	2003e684 	.word	0x2003e684
   dc33c:	2003e680 	.word	0x2003e680
   dc340:	2003e67c 	.word	0x2003e67c

000dc344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dc344:	4b18      	ldr	r3, [pc, #96]	; (dc3a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dc346:	681a      	ldr	r2, [r3, #0]
   dc348:	07d1      	lsls	r1, r2, #31
   dc34a:	bf5c      	itt	pl
   dc34c:	2201      	movpl	r2, #1
   dc34e:	601a      	strpl	r2, [r3, #0]
   dc350:	4b16      	ldr	r3, [pc, #88]	; (dc3ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dc352:	681a      	ldr	r2, [r3, #0]
   dc354:	07d2      	lsls	r2, r2, #31
   dc356:	bf5c      	itt	pl
   dc358:	2201      	movpl	r2, #1
   dc35a:	601a      	strpl	r2, [r3, #0]
   dc35c:	4b14      	ldr	r3, [pc, #80]	; (dc3b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dc35e:	681a      	ldr	r2, [r3, #0]
   dc360:	07d0      	lsls	r0, r2, #31
   dc362:	bf5c      	itt	pl
   dc364:	2201      	movpl	r2, #1
   dc366:	601a      	strpl	r2, [r3, #0]
   dc368:	4b12      	ldr	r3, [pc, #72]	; (dc3b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dc36a:	681a      	ldr	r2, [r3, #0]
   dc36c:	07d1      	lsls	r1, r2, #31
   dc36e:	bf5c      	itt	pl
   dc370:	2201      	movpl	r2, #1
   dc372:	601a      	strpl	r2, [r3, #0]
   dc374:	4b10      	ldr	r3, [pc, #64]	; (dc3b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dc376:	681a      	ldr	r2, [r3, #0]
   dc378:	07d2      	lsls	r2, r2, #31
   dc37a:	bf5c      	itt	pl
   dc37c:	2201      	movpl	r2, #1
   dc37e:	601a      	strpl	r2, [r3, #0]
   dc380:	4b0e      	ldr	r3, [pc, #56]	; (dc3bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dc382:	681a      	ldr	r2, [r3, #0]
   dc384:	07d0      	lsls	r0, r2, #31
   dc386:	bf5c      	itt	pl
   dc388:	2201      	movpl	r2, #1
   dc38a:	601a      	strpl	r2, [r3, #0]
   dc38c:	4b0c      	ldr	r3, [pc, #48]	; (dc3c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dc38e:	681a      	ldr	r2, [r3, #0]
   dc390:	07d1      	lsls	r1, r2, #31
   dc392:	bf5c      	itt	pl
   dc394:	2201      	movpl	r2, #1
   dc396:	601a      	strpl	r2, [r3, #0]
   dc398:	4b0a      	ldr	r3, [pc, #40]	; (dc3c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dc39a:	681a      	ldr	r2, [r3, #0]
   dc39c:	07d2      	lsls	r2, r2, #31
   dc39e:	bf5c      	itt	pl
   dc3a0:	2201      	movpl	r2, #1
   dc3a2:	601a      	strpl	r2, [r3, #0]
   dc3a4:	4770      	bx	lr
   dc3a6:	bf00      	nop
   dc3a8:	2003e6c8 	.word	0x2003e6c8
   dc3ac:	2003e6c4 	.word	0x2003e6c4
   dc3b0:	2003e6c0 	.word	0x2003e6c0
   dc3b4:	2003e6bc 	.word	0x2003e6bc
   dc3b8:	2003e6b8 	.word	0x2003e6b8
   dc3bc:	2003e6b4 	.word	0x2003e6b4
   dc3c0:	2003e6b0 	.word	0x2003e6b0
   dc3c4:	2003e6ac 	.word	0x2003e6ac

000dc3c8 <atan>:
   dc3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc3cc:	ec55 4b10 	vmov	r4, r5, d0
   dc3d0:	4bd1      	ldr	r3, [pc, #836]	; (dc718 <atan+0x350>)
   dc3d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dc3d6:	429e      	cmp	r6, r3
   dc3d8:	46ab      	mov	fp, r5
   dc3da:	dd10      	ble.n	dc3fe <atan+0x36>
   dc3dc:	4bcf      	ldr	r3, [pc, #828]	; (dc71c <atan+0x354>)
   dc3de:	429e      	cmp	r6, r3
   dc3e0:	f300 80b2 	bgt.w	dc548 <atan+0x180>
   dc3e4:	f000 80ad 	beq.w	dc542 <atan+0x17a>
   dc3e8:	f1bb 0f00 	cmp.w	fp, #0
   dc3ec:	f340 80fd 	ble.w	dc5ea <atan+0x222>
   dc3f0:	a5ad      	add	r5, pc, #692	; (adr r5, dc6a8 <atan+0x2e0>)
   dc3f2:	e9d5 4500 	ldrd	r4, r5, [r5]
   dc3f6:	ec45 4b10 	vmov	d0, r4, r5
   dc3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc3fe:	4bc8      	ldr	r3, [pc, #800]	; (dc720 <atan+0x358>)
   dc400:	429e      	cmp	r6, r3
   dc402:	f300 80c0 	bgt.w	dc586 <atan+0x1be>
   dc406:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dc40a:	429e      	cmp	r6, r3
   dc40c:	f340 80a8 	ble.w	dc560 <atan+0x198>
   dc410:	f04f 3aff 	mov.w	sl, #4294967295
   dc414:	4622      	mov	r2, r4
   dc416:	462b      	mov	r3, r5
   dc418:	4620      	mov	r0, r4
   dc41a:	4629      	mov	r1, r5
   dc41c:	f005 fc88 	bl	e1d30 <__aeabi_dmul>
   dc420:	4602      	mov	r2, r0
   dc422:	460b      	mov	r3, r1
   dc424:	4680      	mov	r8, r0
   dc426:	4689      	mov	r9, r1
   dc428:	f005 fc82 	bl	e1d30 <__aeabi_dmul>
   dc42c:	a3a0      	add	r3, pc, #640	; (adr r3, dc6b0 <atan+0x2e8>)
   dc42e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc432:	4606      	mov	r6, r0
   dc434:	460f      	mov	r7, r1
   dc436:	f005 fc7b 	bl	e1d30 <__aeabi_dmul>
   dc43a:	a39f      	add	r3, pc, #636	; (adr r3, dc6b8 <atan+0x2f0>)
   dc43c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc440:	f005 fac4 	bl	e19cc <__adddf3>
   dc444:	4632      	mov	r2, r6
   dc446:	463b      	mov	r3, r7
   dc448:	f005 fc72 	bl	e1d30 <__aeabi_dmul>
   dc44c:	a39c      	add	r3, pc, #624	; (adr r3, dc6c0 <atan+0x2f8>)
   dc44e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc452:	f005 fabb 	bl	e19cc <__adddf3>
   dc456:	4632      	mov	r2, r6
   dc458:	463b      	mov	r3, r7
   dc45a:	f005 fc69 	bl	e1d30 <__aeabi_dmul>
   dc45e:	a39a      	add	r3, pc, #616	; (adr r3, dc6c8 <atan+0x300>)
   dc460:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc464:	f005 fab2 	bl	e19cc <__adddf3>
   dc468:	4632      	mov	r2, r6
   dc46a:	463b      	mov	r3, r7
   dc46c:	f005 fc60 	bl	e1d30 <__aeabi_dmul>
   dc470:	a397      	add	r3, pc, #604	; (adr r3, dc6d0 <atan+0x308>)
   dc472:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc476:	f005 faa9 	bl	e19cc <__adddf3>
   dc47a:	4632      	mov	r2, r6
   dc47c:	463b      	mov	r3, r7
   dc47e:	f005 fc57 	bl	e1d30 <__aeabi_dmul>
   dc482:	a395      	add	r3, pc, #596	; (adr r3, dc6d8 <atan+0x310>)
   dc484:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc488:	f005 faa0 	bl	e19cc <__adddf3>
   dc48c:	4642      	mov	r2, r8
   dc48e:	464b      	mov	r3, r9
   dc490:	f005 fc4e 	bl	e1d30 <__aeabi_dmul>
   dc494:	a392      	add	r3, pc, #584	; (adr r3, dc6e0 <atan+0x318>)
   dc496:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc49a:	4680      	mov	r8, r0
   dc49c:	4689      	mov	r9, r1
   dc49e:	4630      	mov	r0, r6
   dc4a0:	4639      	mov	r1, r7
   dc4a2:	f005 fc45 	bl	e1d30 <__aeabi_dmul>
   dc4a6:	a390      	add	r3, pc, #576	; (adr r3, dc6e8 <atan+0x320>)
   dc4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4ac:	f005 fa8c 	bl	e19c8 <__aeabi_dsub>
   dc4b0:	4632      	mov	r2, r6
   dc4b2:	463b      	mov	r3, r7
   dc4b4:	f005 fc3c 	bl	e1d30 <__aeabi_dmul>
   dc4b8:	a38d      	add	r3, pc, #564	; (adr r3, dc6f0 <atan+0x328>)
   dc4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4be:	f005 fa83 	bl	e19c8 <__aeabi_dsub>
   dc4c2:	4632      	mov	r2, r6
   dc4c4:	463b      	mov	r3, r7
   dc4c6:	f005 fc33 	bl	e1d30 <__aeabi_dmul>
   dc4ca:	a38b      	add	r3, pc, #556	; (adr r3, dc6f8 <atan+0x330>)
   dc4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4d0:	f005 fa7a 	bl	e19c8 <__aeabi_dsub>
   dc4d4:	4632      	mov	r2, r6
   dc4d6:	463b      	mov	r3, r7
   dc4d8:	f005 fc2a 	bl	e1d30 <__aeabi_dmul>
   dc4dc:	a388      	add	r3, pc, #544	; (adr r3, dc700 <atan+0x338>)
   dc4de:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4e2:	f005 fa71 	bl	e19c8 <__aeabi_dsub>
   dc4e6:	4632      	mov	r2, r6
   dc4e8:	463b      	mov	r3, r7
   dc4ea:	f005 fc21 	bl	e1d30 <__aeabi_dmul>
   dc4ee:	f1ba 3fff 	cmp.w	sl, #4294967295
   dc4f2:	4602      	mov	r2, r0
   dc4f4:	460b      	mov	r3, r1
   dc4f6:	d07c      	beq.n	dc5f2 <atan+0x22a>
   dc4f8:	4640      	mov	r0, r8
   dc4fa:	4649      	mov	r1, r9
   dc4fc:	f005 fa66 	bl	e19cc <__adddf3>
   dc500:	4622      	mov	r2, r4
   dc502:	462b      	mov	r3, r5
   dc504:	f005 fc14 	bl	e1d30 <__aeabi_dmul>
   dc508:	4e86      	ldr	r6, [pc, #536]	; (dc724 <atan+0x35c>)
   dc50a:	4b87      	ldr	r3, [pc, #540]	; (dc728 <atan+0x360>)
   dc50c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dc510:	4456      	add	r6, sl
   dc512:	449a      	add	sl, r3
   dc514:	e9da 2300 	ldrd	r2, r3, [sl]
   dc518:	f005 fa56 	bl	e19c8 <__aeabi_dsub>
   dc51c:	4622      	mov	r2, r4
   dc51e:	462b      	mov	r3, r5
   dc520:	f005 fa52 	bl	e19c8 <__aeabi_dsub>
   dc524:	4602      	mov	r2, r0
   dc526:	460b      	mov	r3, r1
   dc528:	e9d6 0100 	ldrd	r0, r1, [r6]
   dc52c:	f005 fa4c 	bl	e19c8 <__aeabi_dsub>
   dc530:	f1bb 0f00 	cmp.w	fp, #0
   dc534:	db52      	blt.n	dc5dc <atan+0x214>
   dc536:	4604      	mov	r4, r0
   dc538:	460d      	mov	r5, r1
   dc53a:	ec45 4b10 	vmov	d0, r4, r5
   dc53e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc542:	2c00      	cmp	r4, #0
   dc544:	f43f af50 	beq.w	dc3e8 <atan+0x20>
   dc548:	4622      	mov	r2, r4
   dc54a:	462b      	mov	r3, r5
   dc54c:	4620      	mov	r0, r4
   dc54e:	4629      	mov	r1, r5
   dc550:	f005 fa3c 	bl	e19cc <__adddf3>
   dc554:	4604      	mov	r4, r0
   dc556:	460d      	mov	r5, r1
   dc558:	ec45 4b10 	vmov	d0, r4, r5
   dc55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc560:	a369      	add	r3, pc, #420	; (adr r3, dc708 <atan+0x340>)
   dc562:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc566:	ee10 0a10 	vmov	r0, s0
   dc56a:	4629      	mov	r1, r5
   dc56c:	f005 fa2e 	bl	e19cc <__adddf3>
   dc570:	2200      	movs	r2, #0
   dc572:	4b6e      	ldr	r3, [pc, #440]	; (dc72c <atan+0x364>)
   dc574:	f005 fe6c 	bl	e2250 <__aeabi_dcmpgt>
   dc578:	2800      	cmp	r0, #0
   dc57a:	f43f af49 	beq.w	dc410 <atan+0x48>
   dc57e:	ec45 4b10 	vmov	d0, r4, r5
   dc582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc586:	f000 f9cb 	bl	dc920 <fabs>
   dc58a:	4b69      	ldr	r3, [pc, #420]	; (dc730 <atan+0x368>)
   dc58c:	429e      	cmp	r6, r3
   dc58e:	ec55 4b10 	vmov	r4, r5, d0
   dc592:	dc3f      	bgt.n	dc614 <atan+0x24c>
   dc594:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dc598:	429e      	cmp	r6, r3
   dc59a:	dc68      	bgt.n	dc66e <atan+0x2a6>
   dc59c:	ee10 2a10 	vmov	r2, s0
   dc5a0:	ee10 0a10 	vmov	r0, s0
   dc5a4:	462b      	mov	r3, r5
   dc5a6:	4629      	mov	r1, r5
   dc5a8:	f005 fa10 	bl	e19cc <__adddf3>
   dc5ac:	2200      	movs	r2, #0
   dc5ae:	4b5f      	ldr	r3, [pc, #380]	; (dc72c <atan+0x364>)
   dc5b0:	f005 fa0a 	bl	e19c8 <__aeabi_dsub>
   dc5b4:	2200      	movs	r2, #0
   dc5b6:	4606      	mov	r6, r0
   dc5b8:	460f      	mov	r7, r1
   dc5ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc5be:	4620      	mov	r0, r4
   dc5c0:	4629      	mov	r1, r5
   dc5c2:	f005 fa03 	bl	e19cc <__adddf3>
   dc5c6:	4602      	mov	r2, r0
   dc5c8:	460b      	mov	r3, r1
   dc5ca:	4630      	mov	r0, r6
   dc5cc:	4639      	mov	r1, r7
   dc5ce:	f005 fcd9 	bl	e1f84 <__aeabi_ddiv>
   dc5d2:	f04f 0a00 	mov.w	sl, #0
   dc5d6:	4604      	mov	r4, r0
   dc5d8:	460d      	mov	r5, r1
   dc5da:	e71b      	b.n	dc414 <atan+0x4c>
   dc5dc:	4604      	mov	r4, r0
   dc5de:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dc5e2:	ec45 4b10 	vmov	d0, r4, r5
   dc5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5ea:	a549      	add	r5, pc, #292	; (adr r5, dc710 <atan+0x348>)
   dc5ec:	e9d5 4500 	ldrd	r4, r5, [r5]
   dc5f0:	e7b2      	b.n	dc558 <atan+0x190>
   dc5f2:	4640      	mov	r0, r8
   dc5f4:	4649      	mov	r1, r9
   dc5f6:	f005 f9e9 	bl	e19cc <__adddf3>
   dc5fa:	4622      	mov	r2, r4
   dc5fc:	462b      	mov	r3, r5
   dc5fe:	f005 fb97 	bl	e1d30 <__aeabi_dmul>
   dc602:	4602      	mov	r2, r0
   dc604:	460b      	mov	r3, r1
   dc606:	4620      	mov	r0, r4
   dc608:	4629      	mov	r1, r5
   dc60a:	f005 f9dd 	bl	e19c8 <__aeabi_dsub>
   dc60e:	4604      	mov	r4, r0
   dc610:	460d      	mov	r5, r1
   dc612:	e7a1      	b.n	dc558 <atan+0x190>
   dc614:	4b47      	ldr	r3, [pc, #284]	; (dc734 <atan+0x36c>)
   dc616:	429e      	cmp	r6, r3
   dc618:	dc1d      	bgt.n	dc656 <atan+0x28e>
   dc61a:	ee10 0a10 	vmov	r0, s0
   dc61e:	2200      	movs	r2, #0
   dc620:	4b45      	ldr	r3, [pc, #276]	; (dc738 <atan+0x370>)
   dc622:	4629      	mov	r1, r5
   dc624:	f005 f9d0 	bl	e19c8 <__aeabi_dsub>
   dc628:	2200      	movs	r2, #0
   dc62a:	4606      	mov	r6, r0
   dc62c:	460f      	mov	r7, r1
   dc62e:	4b42      	ldr	r3, [pc, #264]	; (dc738 <atan+0x370>)
   dc630:	4620      	mov	r0, r4
   dc632:	4629      	mov	r1, r5
   dc634:	f005 fb7c 	bl	e1d30 <__aeabi_dmul>
   dc638:	2200      	movs	r2, #0
   dc63a:	4b3c      	ldr	r3, [pc, #240]	; (dc72c <atan+0x364>)
   dc63c:	f005 f9c6 	bl	e19cc <__adddf3>
   dc640:	4602      	mov	r2, r0
   dc642:	460b      	mov	r3, r1
   dc644:	4630      	mov	r0, r6
   dc646:	4639      	mov	r1, r7
   dc648:	f005 fc9c 	bl	e1f84 <__aeabi_ddiv>
   dc64c:	f04f 0a02 	mov.w	sl, #2
   dc650:	4604      	mov	r4, r0
   dc652:	460d      	mov	r5, r1
   dc654:	e6de      	b.n	dc414 <atan+0x4c>
   dc656:	462b      	mov	r3, r5
   dc658:	ee10 2a10 	vmov	r2, s0
   dc65c:	2000      	movs	r0, #0
   dc65e:	4937      	ldr	r1, [pc, #220]	; (dc73c <atan+0x374>)
   dc660:	f005 fc90 	bl	e1f84 <__aeabi_ddiv>
   dc664:	f04f 0a03 	mov.w	sl, #3
   dc668:	4604      	mov	r4, r0
   dc66a:	460d      	mov	r5, r1
   dc66c:	e6d2      	b.n	dc414 <atan+0x4c>
   dc66e:	ee10 0a10 	vmov	r0, s0
   dc672:	2200      	movs	r2, #0
   dc674:	4b2d      	ldr	r3, [pc, #180]	; (dc72c <atan+0x364>)
   dc676:	4629      	mov	r1, r5
   dc678:	f005 f9a6 	bl	e19c8 <__aeabi_dsub>
   dc67c:	2200      	movs	r2, #0
   dc67e:	4606      	mov	r6, r0
   dc680:	460f      	mov	r7, r1
   dc682:	4b2a      	ldr	r3, [pc, #168]	; (dc72c <atan+0x364>)
   dc684:	4620      	mov	r0, r4
   dc686:	4629      	mov	r1, r5
   dc688:	f005 f9a0 	bl	e19cc <__adddf3>
   dc68c:	4602      	mov	r2, r0
   dc68e:	460b      	mov	r3, r1
   dc690:	4630      	mov	r0, r6
   dc692:	4639      	mov	r1, r7
   dc694:	f005 fc76 	bl	e1f84 <__aeabi_ddiv>
   dc698:	f04f 0a01 	mov.w	sl, #1
   dc69c:	4604      	mov	r4, r0
   dc69e:	460d      	mov	r5, r1
   dc6a0:	e6b8      	b.n	dc414 <atan+0x4c>
   dc6a2:	bf00      	nop
   dc6a4:	f3af 8000 	nop.w
   dc6a8:	54442d18 	.word	0x54442d18
   dc6ac:	3ff921fb 	.word	0x3ff921fb
   dc6b0:	e322da11 	.word	0xe322da11
   dc6b4:	3f90ad3a 	.word	0x3f90ad3a
   dc6b8:	24760deb 	.word	0x24760deb
   dc6bc:	3fa97b4b 	.word	0x3fa97b4b
   dc6c0:	a0d03d51 	.word	0xa0d03d51
   dc6c4:	3fb10d66 	.word	0x3fb10d66
   dc6c8:	c54c206e 	.word	0xc54c206e
   dc6cc:	3fb745cd 	.word	0x3fb745cd
   dc6d0:	920083ff 	.word	0x920083ff
   dc6d4:	3fc24924 	.word	0x3fc24924
   dc6d8:	5555550d 	.word	0x5555550d
   dc6dc:	3fd55555 	.word	0x3fd55555
   dc6e0:	2c6a6c2f 	.word	0x2c6a6c2f
   dc6e4:	bfa2b444 	.word	0xbfa2b444
   dc6e8:	52defd9a 	.word	0x52defd9a
   dc6ec:	3fadde2d 	.word	0x3fadde2d
   dc6f0:	af749a6d 	.word	0xaf749a6d
   dc6f4:	3fb3b0f2 	.word	0x3fb3b0f2
   dc6f8:	fe231671 	.word	0xfe231671
   dc6fc:	3fbc71c6 	.word	0x3fbc71c6
   dc700:	9998ebc4 	.word	0x9998ebc4
   dc704:	3fc99999 	.word	0x3fc99999
   dc708:	8800759c 	.word	0x8800759c
   dc70c:	7e37e43c 	.word	0x7e37e43c
   dc710:	54442d18 	.word	0x54442d18
   dc714:	bff921fb 	.word	0xbff921fb
   dc718:	440fffff 	.word	0x440fffff
   dc71c:	7ff00000 	.word	0x7ff00000
   dc720:	3fdbffff 	.word	0x3fdbffff
   dc724:	000e6df0 	.word	0x000e6df0
   dc728:	000e6dd0 	.word	0x000e6dd0
   dc72c:	3ff00000 	.word	0x3ff00000
   dc730:	3ff2ffff 	.word	0x3ff2ffff
   dc734:	40037fff 	.word	0x40037fff
   dc738:	3ff80000 	.word	0x3ff80000
   dc73c:	bff00000 	.word	0xbff00000

000dc740 <ceil>:
   dc740:	ec51 0b10 	vmov	r0, r1, d0
   dc744:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc74c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc750:	2d13      	cmp	r5, #19
   dc752:	460c      	mov	r4, r1
   dc754:	460f      	mov	r7, r1
   dc756:	ee10 6a10 	vmov	r6, s0
   dc75a:	dc22      	bgt.n	dc7a2 <ceil+0x62>
   dc75c:	2d00      	cmp	r5, #0
   dc75e:	db52      	blt.n	dc806 <ceil+0xc6>
   dc760:	4b3d      	ldr	r3, [pc, #244]	; (dc858 <ceil+0x118>)
   dc762:	fa43 f805 	asr.w	r8, r3, r5
   dc766:	ea01 0308 	and.w	r3, r1, r8
   dc76a:	4303      	orrs	r3, r0
   dc76c:	d01e      	beq.n	dc7ac <ceil+0x6c>
   dc76e:	a338      	add	r3, pc, #224	; (adr r3, dc850 <ceil+0x110>)
   dc770:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc774:	f005 f92a 	bl	e19cc <__adddf3>
   dc778:	2200      	movs	r2, #0
   dc77a:	2300      	movs	r3, #0
   dc77c:	f005 fd68 	bl	e2250 <__aeabi_dcmpgt>
   dc780:	b148      	cbz	r0, dc796 <ceil+0x56>
   dc782:	2c00      	cmp	r4, #0
   dc784:	dd04      	ble.n	dc790 <ceil+0x50>
   dc786:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dc78a:	fa43 f505 	asr.w	r5, r3, r5
   dc78e:	442f      	add	r7, r5
   dc790:	ea27 0408 	bic.w	r4, r7, r8
   dc794:	2600      	movs	r6, #0
   dc796:	4623      	mov	r3, r4
   dc798:	4632      	mov	r2, r6
   dc79a:	ec43 2b10 	vmov	d0, r2, r3
   dc79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc7a2:	2d33      	cmp	r5, #51	; 0x33
   dc7a4:	dd06      	ble.n	dc7b4 <ceil+0x74>
   dc7a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc7aa:	d03e      	beq.n	dc82a <ceil+0xea>
   dc7ac:	ec41 0b10 	vmov	d0, r0, r1
   dc7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc7b4:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc7b8:	f04f 38ff 	mov.w	r8, #4294967295
   dc7bc:	fa28 f803 	lsr.w	r8, r8, r3
   dc7c0:	ea10 0f08 	tst.w	r0, r8
   dc7c4:	d0f2      	beq.n	dc7ac <ceil+0x6c>
   dc7c6:	a322      	add	r3, pc, #136	; (adr r3, dc850 <ceil+0x110>)
   dc7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7cc:	f005 f8fe 	bl	e19cc <__adddf3>
   dc7d0:	2200      	movs	r2, #0
   dc7d2:	2300      	movs	r3, #0
   dc7d4:	f005 fd3c 	bl	e2250 <__aeabi_dcmpgt>
   dc7d8:	2800      	cmp	r0, #0
   dc7da:	d0dc      	beq.n	dc796 <ceil+0x56>
   dc7dc:	2c00      	cmp	r4, #0
   dc7de:	dd09      	ble.n	dc7f4 <ceil+0xb4>
   dc7e0:	2d14      	cmp	r5, #20
   dc7e2:	d031      	beq.n	dc848 <ceil+0x108>
   dc7e4:	2301      	movs	r3, #1
   dc7e6:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dc7ea:	fa03 f505 	lsl.w	r5, r3, r5
   dc7ee:	19ae      	adds	r6, r5, r6
   dc7f0:	bf28      	it	cs
   dc7f2:	18ff      	addcs	r7, r7, r3
   dc7f4:	463c      	mov	r4, r7
   dc7f6:	ea26 0608 	bic.w	r6, r6, r8
   dc7fa:	4623      	mov	r3, r4
   dc7fc:	4632      	mov	r2, r6
   dc7fe:	ec43 2b10 	vmov	d0, r2, r3
   dc802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc806:	a312      	add	r3, pc, #72	; (adr r3, dc850 <ceil+0x110>)
   dc808:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc80c:	f005 f8de 	bl	e19cc <__adddf3>
   dc810:	2200      	movs	r2, #0
   dc812:	2300      	movs	r3, #0
   dc814:	f005 fd1c 	bl	e2250 <__aeabi_dcmpgt>
   dc818:	2800      	cmp	r0, #0
   dc81a:	d0bc      	beq.n	dc796 <ceil+0x56>
   dc81c:	2c00      	cmp	r4, #0
   dc81e:	db0f      	blt.n	dc840 <ceil+0x100>
   dc820:	4326      	orrs	r6, r4
   dc822:	d00b      	beq.n	dc83c <ceil+0xfc>
   dc824:	2600      	movs	r6, #0
   dc826:	4c0d      	ldr	r4, [pc, #52]	; (dc85c <ceil+0x11c>)
   dc828:	e7b5      	b.n	dc796 <ceil+0x56>
   dc82a:	ee10 2a10 	vmov	r2, s0
   dc82e:	460b      	mov	r3, r1
   dc830:	f005 f8cc 	bl	e19cc <__adddf3>
   dc834:	ec41 0b10 	vmov	d0, r0, r1
   dc838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc83c:	4634      	mov	r4, r6
   dc83e:	e7aa      	b.n	dc796 <ceil+0x56>
   dc840:	2600      	movs	r6, #0
   dc842:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dc846:	e7a6      	b.n	dc796 <ceil+0x56>
   dc848:	3701      	adds	r7, #1
   dc84a:	e7d3      	b.n	dc7f4 <ceil+0xb4>
   dc84c:	f3af 8000 	nop.w
   dc850:	8800759c 	.word	0x8800759c
   dc854:	7e37e43c 	.word	0x7e37e43c
   dc858:	000fffff 	.word	0x000fffff
   dc85c:	3ff00000 	.word	0x3ff00000

000dc860 <cos>:
   dc860:	b500      	push	{lr}
   dc862:	ec51 0b10 	vmov	r0, r1, d0
   dc866:	4a2c      	ldr	r2, [pc, #176]	; (dc918 <cos+0xb8>)
   dc868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc86c:	4293      	cmp	r3, r2
   dc86e:	b085      	sub	sp, #20
   dc870:	dd20      	ble.n	dc8b4 <cos+0x54>
   dc872:	4a2a      	ldr	r2, [pc, #168]	; (dc91c <cos+0xbc>)
   dc874:	4293      	cmp	r3, r2
   dc876:	dd09      	ble.n	dc88c <cos+0x2c>
   dc878:	ee10 2a10 	vmov	r2, s0
   dc87c:	460b      	mov	r3, r1
   dc87e:	f005 f8a3 	bl	e19c8 <__aeabi_dsub>
   dc882:	ec41 0b10 	vmov	d0, r0, r1
   dc886:	b005      	add	sp, #20
   dc888:	f85d fb04 	ldr.w	pc, [sp], #4
   dc88c:	4668      	mov	r0, sp
   dc88e:	f003 f91b 	bl	dfac8 <__ieee754_rem_pio2>
   dc892:	f000 0003 	and.w	r0, r0, #3
   dc896:	2801      	cmp	r0, #1
   dc898:	d028      	beq.n	dc8ec <cos+0x8c>
   dc89a:	2802      	cmp	r0, #2
   dc89c:	d015      	beq.n	dc8ca <cos+0x6a>
   dc89e:	b360      	cbz	r0, dc8fa <cos+0x9a>
   dc8a0:	2001      	movs	r0, #1
   dc8a2:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc8a6:	ed9d 0b00 	vldr	d0, [sp]
   dc8aa:	f004 fa3d 	bl	e0d28 <__kernel_sin>
   dc8ae:	ec51 0b10 	vmov	r0, r1, d0
   dc8b2:	e7e6      	b.n	dc882 <cos+0x22>
   dc8b4:	ed9f 1b16 	vldr	d1, [pc, #88]	; dc910 <cos+0xb0>
   dc8b8:	f003 fce2 	bl	e0280 <__kernel_cos>
   dc8bc:	ec51 0b10 	vmov	r0, r1, d0
   dc8c0:	ec41 0b10 	vmov	d0, r0, r1
   dc8c4:	b005      	add	sp, #20
   dc8c6:	f85d fb04 	ldr.w	pc, [sp], #4
   dc8ca:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc8ce:	ed9d 0b00 	vldr	d0, [sp]
   dc8d2:	f003 fcd5 	bl	e0280 <__kernel_cos>
   dc8d6:	ec53 2b10 	vmov	r2, r3, d0
   dc8da:	ee10 0a10 	vmov	r0, s0
   dc8de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc8e2:	ec41 0b10 	vmov	d0, r0, r1
   dc8e6:	b005      	add	sp, #20
   dc8e8:	f85d fb04 	ldr.w	pc, [sp], #4
   dc8ec:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc8f0:	ed9d 0b00 	vldr	d0, [sp]
   dc8f4:	f004 fa18 	bl	e0d28 <__kernel_sin>
   dc8f8:	e7ed      	b.n	dc8d6 <cos+0x76>
   dc8fa:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc8fe:	ed9d 0b00 	vldr	d0, [sp]
   dc902:	f003 fcbd 	bl	e0280 <__kernel_cos>
   dc906:	ec51 0b10 	vmov	r0, r1, d0
   dc90a:	e7ba      	b.n	dc882 <cos+0x22>
   dc90c:	f3af 8000 	nop.w
	...
   dc918:	3fe921fb 	.word	0x3fe921fb
   dc91c:	7fefffff 	.word	0x7fefffff

000dc920 <fabs>:
   dc920:	ec53 2b10 	vmov	r2, r3, d0
   dc924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc928:	ec43 2b10 	vmov	d0, r2, r3
   dc92c:	4770      	bx	lr
   dc92e:	bf00      	nop

000dc930 <floor>:
   dc930:	ec51 0b10 	vmov	r0, r1, d0
   dc934:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc93c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc940:	2d13      	cmp	r5, #19
   dc942:	460c      	mov	r4, r1
   dc944:	460f      	mov	r7, r1
   dc946:	ee10 6a10 	vmov	r6, s0
   dc94a:	dc1d      	bgt.n	dc988 <floor+0x58>
   dc94c:	2d00      	cmp	r5, #0
   dc94e:	db43      	blt.n	dc9d8 <floor+0xa8>
   dc950:	4b3d      	ldr	r3, [pc, #244]	; (dca48 <floor+0x118>)
   dc952:	fa43 f805 	asr.w	r8, r3, r5
   dc956:	ea01 0308 	and.w	r3, r1, r8
   dc95a:	4303      	orrs	r3, r0
   dc95c:	d019      	beq.n	dc992 <floor+0x62>
   dc95e:	a338      	add	r3, pc, #224	; (adr r3, dca40 <floor+0x110>)
   dc960:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc964:	f005 f832 	bl	e19cc <__adddf3>
   dc968:	2200      	movs	r2, #0
   dc96a:	2300      	movs	r3, #0
   dc96c:	f005 fc70 	bl	e2250 <__aeabi_dcmpgt>
   dc970:	b120      	cbz	r0, dc97c <floor+0x4c>
   dc972:	2c00      	cmp	r4, #0
   dc974:	db49      	blt.n	dca0a <floor+0xda>
   dc976:	ea27 0408 	bic.w	r4, r7, r8
   dc97a:	2600      	movs	r6, #0
   dc97c:	4623      	mov	r3, r4
   dc97e:	4632      	mov	r2, r6
   dc980:	ec43 2b10 	vmov	d0, r2, r3
   dc984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc988:	2d33      	cmp	r5, #51	; 0x33
   dc98a:	dd06      	ble.n	dc99a <floor+0x6a>
   dc98c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc990:	d032      	beq.n	dc9f8 <floor+0xc8>
   dc992:	ec41 0b10 	vmov	d0, r0, r1
   dc996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc99a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc99e:	f04f 38ff 	mov.w	r8, #4294967295
   dc9a2:	fa28 f803 	lsr.w	r8, r8, r3
   dc9a6:	ea10 0f08 	tst.w	r0, r8
   dc9aa:	d0f2      	beq.n	dc992 <floor+0x62>
   dc9ac:	a324      	add	r3, pc, #144	; (adr r3, dca40 <floor+0x110>)
   dc9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9b2:	f005 f80b 	bl	e19cc <__adddf3>
   dc9b6:	2200      	movs	r2, #0
   dc9b8:	2300      	movs	r3, #0
   dc9ba:	f005 fc49 	bl	e2250 <__aeabi_dcmpgt>
   dc9be:	2800      	cmp	r0, #0
   dc9c0:	d0dc      	beq.n	dc97c <floor+0x4c>
   dc9c2:	2c00      	cmp	r4, #0
   dc9c4:	db27      	blt.n	dca16 <floor+0xe6>
   dc9c6:	463c      	mov	r4, r7
   dc9c8:	ea26 0608 	bic.w	r6, r6, r8
   dc9cc:	4623      	mov	r3, r4
   dc9ce:	4632      	mov	r2, r6
   dc9d0:	ec43 2b10 	vmov	d0, r2, r3
   dc9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc9d8:	a319      	add	r3, pc, #100	; (adr r3, dca40 <floor+0x110>)
   dc9da:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc9de:	f004 fff5 	bl	e19cc <__adddf3>
   dc9e2:	2200      	movs	r2, #0
   dc9e4:	2300      	movs	r3, #0
   dc9e6:	f005 fc33 	bl	e2250 <__aeabi_dcmpgt>
   dc9ea:	2800      	cmp	r0, #0
   dc9ec:	d0c6      	beq.n	dc97c <floor+0x4c>
   dc9ee:	2c00      	cmp	r4, #0
   dc9f0:	db1c      	blt.n	dca2c <floor+0xfc>
   dc9f2:	2600      	movs	r6, #0
   dc9f4:	4634      	mov	r4, r6
   dc9f6:	e7c1      	b.n	dc97c <floor+0x4c>
   dc9f8:	ee10 2a10 	vmov	r2, s0
   dc9fc:	460b      	mov	r3, r1
   dc9fe:	f004 ffe5 	bl	e19cc <__adddf3>
   dca02:	ec41 0b10 	vmov	d0, r0, r1
   dca06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dca0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dca0e:	fa43 f505 	asr.w	r5, r3, r5
   dca12:	442f      	add	r7, r5
   dca14:	e7af      	b.n	dc976 <floor+0x46>
   dca16:	2d14      	cmp	r5, #20
   dca18:	d010      	beq.n	dca3c <floor+0x10c>
   dca1a:	2301      	movs	r3, #1
   dca1c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dca20:	fa03 f505 	lsl.w	r5, r3, r5
   dca24:	19ae      	adds	r6, r5, r6
   dca26:	bf28      	it	cs
   dca28:	18ff      	addcs	r7, r7, r3
   dca2a:	e7cc      	b.n	dc9c6 <floor+0x96>
   dca2c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dca30:	4b06      	ldr	r3, [pc, #24]	; (dca4c <floor+0x11c>)
   dca32:	4332      	orrs	r2, r6
   dca34:	bf18      	it	ne
   dca36:	461c      	movne	r4, r3
   dca38:	2600      	movs	r6, #0
   dca3a:	e79f      	b.n	dc97c <floor+0x4c>
   dca3c:	3701      	adds	r7, #1
   dca3e:	e7c2      	b.n	dc9c6 <floor+0x96>
   dca40:	8800759c 	.word	0x8800759c
   dca44:	7e37e43c 	.word	0x7e37e43c
   dca48:	000fffff 	.word	0x000fffff
   dca4c:	bff00000 	.word	0xbff00000

000dca50 <sin>:
   dca50:	b500      	push	{lr}
   dca52:	ec51 0b10 	vmov	r0, r1, d0
   dca56:	4a2c      	ldr	r2, [pc, #176]	; (dcb08 <sin+0xb8>)
   dca58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dca5c:	4293      	cmp	r3, r2
   dca5e:	b085      	sub	sp, #20
   dca60:	dd27      	ble.n	dcab2 <sin+0x62>
   dca62:	4a2a      	ldr	r2, [pc, #168]	; (dcb0c <sin+0xbc>)
   dca64:	4293      	cmp	r3, r2
   dca66:	dd09      	ble.n	dca7c <sin+0x2c>
   dca68:	ee10 2a10 	vmov	r2, s0
   dca6c:	460b      	mov	r3, r1
   dca6e:	f004 ffab 	bl	e19c8 <__aeabi_dsub>
   dca72:	ec41 0b10 	vmov	d0, r0, r1
   dca76:	b005      	add	sp, #20
   dca78:	f85d fb04 	ldr.w	pc, [sp], #4
   dca7c:	4668      	mov	r0, sp
   dca7e:	f003 f823 	bl	dfac8 <__ieee754_rem_pio2>
   dca82:	f000 0003 	and.w	r0, r0, #3
   dca86:	2801      	cmp	r0, #1
   dca88:	d027      	beq.n	dcada <sin+0x8a>
   dca8a:	2802      	cmp	r0, #2
   dca8c:	d01d      	beq.n	dcaca <sin+0x7a>
   dca8e:	b368      	cbz	r0, dcaec <sin+0x9c>
   dca90:	ed9d 1b02 	vldr	d1, [sp, #8]
   dca94:	ed9d 0b00 	vldr	d0, [sp]
   dca98:	f003 fbf2 	bl	e0280 <__kernel_cos>
   dca9c:	ec53 2b10 	vmov	r2, r3, d0
   dcaa0:	ee10 0a10 	vmov	r0, s0
   dcaa4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dcaa8:	ec41 0b10 	vmov	d0, r0, r1
   dcaac:	b005      	add	sp, #20
   dcaae:	f85d fb04 	ldr.w	pc, [sp], #4
   dcab2:	2000      	movs	r0, #0
   dcab4:	ed9f 1b12 	vldr	d1, [pc, #72]	; dcb00 <sin+0xb0>
   dcab8:	f004 f936 	bl	e0d28 <__kernel_sin>
   dcabc:	ec51 0b10 	vmov	r0, r1, d0
   dcac0:	ec41 0b10 	vmov	d0, r0, r1
   dcac4:	b005      	add	sp, #20
   dcac6:	f85d fb04 	ldr.w	pc, [sp], #4
   dcaca:	2001      	movs	r0, #1
   dcacc:	ed9d 1b02 	vldr	d1, [sp, #8]
   dcad0:	ed9d 0b00 	vldr	d0, [sp]
   dcad4:	f004 f928 	bl	e0d28 <__kernel_sin>
   dcad8:	e7e0      	b.n	dca9c <sin+0x4c>
   dcada:	ed9d 1b02 	vldr	d1, [sp, #8]
   dcade:	ed9d 0b00 	vldr	d0, [sp]
   dcae2:	f003 fbcd 	bl	e0280 <__kernel_cos>
   dcae6:	ec51 0b10 	vmov	r0, r1, d0
   dcaea:	e7c2      	b.n	dca72 <sin+0x22>
   dcaec:	2001      	movs	r0, #1
   dcaee:	ed9d 1b02 	vldr	d1, [sp, #8]
   dcaf2:	ed9d 0b00 	vldr	d0, [sp]
   dcaf6:	f004 f917 	bl	e0d28 <__kernel_sin>
   dcafa:	ec51 0b10 	vmov	r0, r1, d0
   dcafe:	e7b8      	b.n	dca72 <sin+0x22>
	...
   dcb08:	3fe921fb 	.word	0x3fe921fb
   dcb0c:	7fefffff 	.word	0x7fefffff

000dcb10 <tan>:
   dcb10:	b500      	push	{lr}
   dcb12:	ec51 0b10 	vmov	r0, r1, d0
   dcb16:	4a18      	ldr	r2, [pc, #96]	; (dcb78 <tan+0x68>)
   dcb18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dcb1c:	4293      	cmp	r3, r2
   dcb1e:	b085      	sub	sp, #20
   dcb20:	dd1d      	ble.n	dcb5e <tan+0x4e>
   dcb22:	4a16      	ldr	r2, [pc, #88]	; (dcb7c <tan+0x6c>)
   dcb24:	4293      	cmp	r3, r2
   dcb26:	dd09      	ble.n	dcb3c <tan+0x2c>
   dcb28:	ee10 2a10 	vmov	r2, s0
   dcb2c:	460b      	mov	r3, r1
   dcb2e:	f004 ff4b 	bl	e19c8 <__aeabi_dsub>
   dcb32:	ec41 0b10 	vmov	d0, r0, r1
   dcb36:	b005      	add	sp, #20
   dcb38:	f85d fb04 	ldr.w	pc, [sp], #4
   dcb3c:	4668      	mov	r0, sp
   dcb3e:	f002 ffc3 	bl	dfac8 <__ieee754_rem_pio2>
   dcb42:	0040      	lsls	r0, r0, #1
   dcb44:	f000 0002 	and.w	r0, r0, #2
   dcb48:	f1c0 0001 	rsb	r0, r0, #1
   dcb4c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dcb50:	ed9d 0b00 	vldr	d0, [sp]
   dcb54:	f004 f9b4 	bl	e0ec0 <__kernel_tan>
   dcb58:	b005      	add	sp, #20
   dcb5a:	f85d fb04 	ldr.w	pc, [sp], #4
   dcb5e:	2001      	movs	r0, #1
   dcb60:	ed9f 1b03 	vldr	d1, [pc, #12]	; dcb70 <tan+0x60>
   dcb64:	f004 f9ac 	bl	e0ec0 <__kernel_tan>
   dcb68:	b005      	add	sp, #20
   dcb6a:	f85d fb04 	ldr.w	pc, [sp], #4
   dcb6e:	bf00      	nop
	...
   dcb78:	3fe921fb 	.word	0x3fe921fb
   dcb7c:	7fefffff 	.word	0x7fefffff

000dcb80 <tanh>:
   dcb80:	b5d0      	push	{r4, r6, r7, lr}
   dcb82:	ec57 6b10 	vmov	r6, r7, d0
   dcb86:	4a42      	ldr	r2, [pc, #264]	; (dcc90 <tanh+0x110>)
   dcb88:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   dcb8c:	4293      	cmp	r3, r2
   dcb8e:	463c      	mov	r4, r7
   dcb90:	dd10      	ble.n	dcbb4 <tanh+0x34>
   dcb92:	2f00      	cmp	r7, #0
   dcb94:	ee10 2a10 	vmov	r2, s0
   dcb98:	463b      	mov	r3, r7
   dcb9a:	f04f 0000 	mov.w	r0, #0
   dcb9e:	493d      	ldr	r1, [pc, #244]	; (dcc94 <tanh+0x114>)
   dcba0:	db40      	blt.n	dcc24 <tanh+0xa4>
   dcba2:	f005 f9ef 	bl	e1f84 <__aeabi_ddiv>
   dcba6:	2200      	movs	r2, #0
   dcba8:	4b3a      	ldr	r3, [pc, #232]	; (dcc94 <tanh+0x114>)
   dcbaa:	f004 ff0f 	bl	e19cc <__adddf3>
   dcbae:	ec41 0b10 	vmov	d0, r0, r1
   dcbb2:	bdd0      	pop	{r4, r6, r7, pc}
   dcbb4:	4a38      	ldr	r2, [pc, #224]	; (dcc98 <tanh+0x118>)
   dcbb6:	4293      	cmp	r3, r2
   dcbb8:	dd0a      	ble.n	dcbd0 <tanh+0x50>
   dcbba:	4b36      	ldr	r3, [pc, #216]	; (dcc94 <tanh+0x114>)
   dcbbc:	2200      	movs	r2, #0
   dcbbe:	2c00      	cmp	r4, #0
   dcbc0:	4610      	mov	r0, r2
   dcbc2:	bfb4      	ite	lt
   dcbc4:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   dcbc8:	4619      	movge	r1, r3
   dcbca:	ec41 0b10 	vmov	d0, r0, r1
   dcbce:	bdd0      	pop	{r4, r6, r7, pc}
   dcbd0:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   dcbd4:	db2f      	blt.n	dcc36 <tanh+0xb6>
   dcbd6:	4a31      	ldr	r2, [pc, #196]	; (dcc9c <tanh+0x11c>)
   dcbd8:	4293      	cmp	r3, r2
   dcbda:	dd38      	ble.n	dcc4e <tanh+0xce>
   dcbdc:	f7ff fea0 	bl	dc920 <fabs>
   dcbe0:	ec53 2b10 	vmov	r2, r3, d0
   dcbe4:	ee10 0a10 	vmov	r0, s0
   dcbe8:	4619      	mov	r1, r3
   dcbea:	f004 feef 	bl	e19cc <__adddf3>
   dcbee:	ec41 0b10 	vmov	d0, r0, r1
   dcbf2:	f004 fb49 	bl	e1288 <expm1>
   dcbf6:	2200      	movs	r2, #0
   dcbf8:	ec51 0b10 	vmov	r0, r1, d0
   dcbfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dcc00:	f004 fee4 	bl	e19cc <__adddf3>
   dcc04:	4602      	mov	r2, r0
   dcc06:	460b      	mov	r3, r1
   dcc08:	2000      	movs	r0, #0
   dcc0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   dcc0e:	f005 f9b9 	bl	e1f84 <__aeabi_ddiv>
   dcc12:	4602      	mov	r2, r0
   dcc14:	460b      	mov	r3, r1
   dcc16:	2000      	movs	r0, #0
   dcc18:	491e      	ldr	r1, [pc, #120]	; (dcc94 <tanh+0x114>)
   dcc1a:	f004 fed5 	bl	e19c8 <__aeabi_dsub>
   dcc1e:	4602      	mov	r2, r0
   dcc20:	460b      	mov	r3, r1
   dcc22:	e7cc      	b.n	dcbbe <tanh+0x3e>
   dcc24:	f005 f9ae 	bl	e1f84 <__aeabi_ddiv>
   dcc28:	2200      	movs	r2, #0
   dcc2a:	4b1a      	ldr	r3, [pc, #104]	; (dcc94 <tanh+0x114>)
   dcc2c:	f004 fecc 	bl	e19c8 <__aeabi_dsub>
   dcc30:	ec41 0b10 	vmov	d0, r0, r1
   dcc34:	bdd0      	pop	{r4, r6, r7, pc}
   dcc36:	2200      	movs	r2, #0
   dcc38:	4b16      	ldr	r3, [pc, #88]	; (dcc94 <tanh+0x114>)
   dcc3a:	ee10 0a10 	vmov	r0, s0
   dcc3e:	4639      	mov	r1, r7
   dcc40:	f004 fec4 	bl	e19cc <__adddf3>
   dcc44:	4632      	mov	r2, r6
   dcc46:	463b      	mov	r3, r7
   dcc48:	f005 f872 	bl	e1d30 <__aeabi_dmul>
   dcc4c:	e7af      	b.n	dcbae <tanh+0x2e>
   dcc4e:	f7ff fe67 	bl	dc920 <fabs>
   dcc52:	2200      	movs	r2, #0
   dcc54:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   dcc58:	ec51 0b10 	vmov	r0, r1, d0
   dcc5c:	f005 f868 	bl	e1d30 <__aeabi_dmul>
   dcc60:	ec41 0b10 	vmov	d0, r0, r1
   dcc64:	f004 fb10 	bl	e1288 <expm1>
   dcc68:	ec51 0b10 	vmov	r0, r1, d0
   dcc6c:	2200      	movs	r2, #0
   dcc6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dcc72:	ee10 6a10 	vmov	r6, s0
   dcc76:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   dcc7a:	f004 fea7 	bl	e19cc <__adddf3>
   dcc7e:	4602      	mov	r2, r0
   dcc80:	460b      	mov	r3, r1
   dcc82:	4630      	mov	r0, r6
   dcc84:	4639      	mov	r1, r7
   dcc86:	f005 f97d 	bl	e1f84 <__aeabi_ddiv>
   dcc8a:	4602      	mov	r2, r0
   dcc8c:	460b      	mov	r3, r1
   dcc8e:	e796      	b.n	dcbbe <tanh+0x3e>
   dcc90:	7fefffff 	.word	0x7fefffff
   dcc94:	3ff00000 	.word	0x3ff00000
   dcc98:	4035ffff 	.word	0x4035ffff
   dcc9c:	3fefffff 	.word	0x3fefffff

000dcca0 <acos>:
   dcca0:	b530      	push	{r4, r5, lr}
   dcca2:	ed2d 8b04 	vpush	{d8-d9}
   dcca6:	eeb0 8a40 	vmov.f32	s16, s0
   dccaa:	eef0 8a60 	vmov.f32	s17, s1
   dccae:	4c29      	ldr	r4, [pc, #164]	; (dcd54 <acos+0xb4>)
   dccb0:	b08b      	sub	sp, #44	; 0x2c
   dccb2:	f000 fd99 	bl	dd7e8 <__ieee754_acos>
   dccb6:	f994 3000 	ldrsb.w	r3, [r4]
   dccba:	eeb0 9a40 	vmov.f32	s18, s0
   dccbe:	eef0 9a60 	vmov.f32	s19, s1
   dccc2:	3301      	adds	r3, #1
   dccc4:	d032      	beq.n	dcd2c <acos+0x8c>
   dccc6:	ec53 2b18 	vmov	r2, r3, d8
   dccca:	ec51 0b18 	vmov	r0, r1, d8
   dccce:	f005 fac9 	bl	e2264 <__aeabi_dcmpun>
   dccd2:	4605      	mov	r5, r0
   dccd4:	bb50      	cbnz	r0, dcd2c <acos+0x8c>
   dccd6:	eeb0 0a48 	vmov.f32	s0, s16
   dccda:	eef0 0a68 	vmov.f32	s1, s17
   dccde:	f7ff fe1f 	bl	dc920 <fabs>
   dcce2:	2200      	movs	r2, #0
   dcce4:	4b1c      	ldr	r3, [pc, #112]	; (dcd58 <acos+0xb8>)
   dcce6:	ec51 0b10 	vmov	r0, r1, d0
   dccea:	f005 fab1 	bl	e2250 <__aeabi_dcmpgt>
   dccee:	b1e8      	cbz	r0, dcd2c <acos+0x8c>
   dccf0:	4b1a      	ldr	r3, [pc, #104]	; (dcd5c <acos+0xbc>)
   dccf2:	481b      	ldr	r0, [pc, #108]	; (dcd60 <acos+0xc0>)
   dccf4:	9508      	str	r5, [sp, #32]
   dccf6:	2201      	movs	r2, #1
   dccf8:	e88d 000c 	stmia.w	sp, {r2, r3}
   dccfc:	ed8d 8b04 	vstr	d8, [sp, #16]
   dcd00:	ed8d 8b02 	vstr	d8, [sp, #8]
   dcd04:	f004 fd2c 	bl	e1760 <nan>
   dcd08:	f994 3000 	ldrsb.w	r3, [r4]
   dcd0c:	2b02      	cmp	r3, #2
   dcd0e:	ed8d 0b06 	vstr	d0, [sp, #24]
   dcd12:	d013      	beq.n	dcd3c <acos+0x9c>
   dcd14:	4668      	mov	r0, sp
   dcd16:	f004 fd21 	bl	e175c <matherr>
   dcd1a:	b178      	cbz	r0, dcd3c <acos+0x9c>
   dcd1c:	9b08      	ldr	r3, [sp, #32]
   dcd1e:	b9a3      	cbnz	r3, dcd4a <acos+0xaa>
   dcd20:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcd24:	b00b      	add	sp, #44	; 0x2c
   dcd26:	ecbd 8b04 	vpop	{d8-d9}
   dcd2a:	bd30      	pop	{r4, r5, pc}
   dcd2c:	eeb0 0a49 	vmov.f32	s0, s18
   dcd30:	eef0 0a69 	vmov.f32	s1, s19
   dcd34:	b00b      	add	sp, #44	; 0x2c
   dcd36:	ecbd 8b04 	vpop	{d8-d9}
   dcd3a:	bd30      	pop	{r4, r5, pc}
   dcd3c:	f7fd f808 	bl	d9d50 <__errno>
   dcd40:	2321      	movs	r3, #33	; 0x21
   dcd42:	6003      	str	r3, [r0, #0]
   dcd44:	9b08      	ldr	r3, [sp, #32]
   dcd46:	2b00      	cmp	r3, #0
   dcd48:	d0ea      	beq.n	dcd20 <acos+0x80>
   dcd4a:	f7fd f801 	bl	d9d50 <__errno>
   dcd4e:	9b08      	ldr	r3, [sp, #32]
   dcd50:	6003      	str	r3, [r0, #0]
   dcd52:	e7e5      	b.n	dcd20 <acos+0x80>
   dcd54:	2003d634 	.word	0x2003d634
   dcd58:	3ff00000 	.word	0x3ff00000
   dcd5c:	000e6e10 	.word	0x000e6e10
   dcd60:	000e6e30 	.word	0x000e6e30

000dcd64 <asin>:
   dcd64:	b530      	push	{r4, r5, lr}
   dcd66:	ed2d 8b04 	vpush	{d8-d9}
   dcd6a:	eeb0 8a40 	vmov.f32	s16, s0
   dcd6e:	eef0 8a60 	vmov.f32	s17, s1
   dcd72:	4c29      	ldr	r4, [pc, #164]	; (dce18 <asin+0xb4>)
   dcd74:	b08b      	sub	sp, #44	; 0x2c
   dcd76:	f000 ffa7 	bl	ddcc8 <__ieee754_asin>
   dcd7a:	f994 3000 	ldrsb.w	r3, [r4]
   dcd7e:	eeb0 9a40 	vmov.f32	s18, s0
   dcd82:	eef0 9a60 	vmov.f32	s19, s1
   dcd86:	3301      	adds	r3, #1
   dcd88:	d032      	beq.n	dcdf0 <asin+0x8c>
   dcd8a:	ec53 2b18 	vmov	r2, r3, d8
   dcd8e:	ec51 0b18 	vmov	r0, r1, d8
   dcd92:	f005 fa67 	bl	e2264 <__aeabi_dcmpun>
   dcd96:	4605      	mov	r5, r0
   dcd98:	bb50      	cbnz	r0, dcdf0 <asin+0x8c>
   dcd9a:	eeb0 0a48 	vmov.f32	s0, s16
   dcd9e:	eef0 0a68 	vmov.f32	s1, s17
   dcda2:	f7ff fdbd 	bl	dc920 <fabs>
   dcda6:	2200      	movs	r2, #0
   dcda8:	4b1c      	ldr	r3, [pc, #112]	; (dce1c <asin+0xb8>)
   dcdaa:	ec51 0b10 	vmov	r0, r1, d0
   dcdae:	f005 fa4f 	bl	e2250 <__aeabi_dcmpgt>
   dcdb2:	b1e8      	cbz	r0, dcdf0 <asin+0x8c>
   dcdb4:	4b1a      	ldr	r3, [pc, #104]	; (dce20 <asin+0xbc>)
   dcdb6:	481b      	ldr	r0, [pc, #108]	; (dce24 <asin+0xc0>)
   dcdb8:	9508      	str	r5, [sp, #32]
   dcdba:	2201      	movs	r2, #1
   dcdbc:	e88d 000c 	stmia.w	sp, {r2, r3}
   dcdc0:	ed8d 8b04 	vstr	d8, [sp, #16]
   dcdc4:	ed8d 8b02 	vstr	d8, [sp, #8]
   dcdc8:	f004 fcca 	bl	e1760 <nan>
   dcdcc:	f994 3000 	ldrsb.w	r3, [r4]
   dcdd0:	2b02      	cmp	r3, #2
   dcdd2:	ed8d 0b06 	vstr	d0, [sp, #24]
   dcdd6:	d013      	beq.n	dce00 <asin+0x9c>
   dcdd8:	4668      	mov	r0, sp
   dcdda:	f004 fcbf 	bl	e175c <matherr>
   dcdde:	b178      	cbz	r0, dce00 <asin+0x9c>
   dcde0:	9b08      	ldr	r3, [sp, #32]
   dcde2:	b9a3      	cbnz	r3, dce0e <asin+0xaa>
   dcde4:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcde8:	b00b      	add	sp, #44	; 0x2c
   dcdea:	ecbd 8b04 	vpop	{d8-d9}
   dcdee:	bd30      	pop	{r4, r5, pc}
   dcdf0:	eeb0 0a49 	vmov.f32	s0, s18
   dcdf4:	eef0 0a69 	vmov.f32	s1, s19
   dcdf8:	b00b      	add	sp, #44	; 0x2c
   dcdfa:	ecbd 8b04 	vpop	{d8-d9}
   dcdfe:	bd30      	pop	{r4, r5, pc}
   dce00:	f7fc ffa6 	bl	d9d50 <__errno>
   dce04:	2321      	movs	r3, #33	; 0x21
   dce06:	6003      	str	r3, [r0, #0]
   dce08:	9b08      	ldr	r3, [sp, #32]
   dce0a:	2b00      	cmp	r3, #0
   dce0c:	d0ea      	beq.n	dcde4 <asin+0x80>
   dce0e:	f7fc ff9f 	bl	d9d50 <__errno>
   dce12:	9b08      	ldr	r3, [sp, #32]
   dce14:	6003      	str	r3, [r0, #0]
   dce16:	e7e5      	b.n	dcde4 <asin+0x80>
   dce18:	2003d634 	.word	0x2003d634
   dce1c:	3ff00000 	.word	0x3ff00000
   dce20:	000e6e18 	.word	0x000e6e18
   dce24:	000e6e30 	.word	0x000e6e30

000dce28 <atan2>:
   dce28:	f001 b99e 	b.w	de168 <__ieee754_atan2>
   dce2c:	0000      	movs	r0, r0
	...

000dce30 <cosh>:
   dce30:	b530      	push	{r4, r5, lr}
   dce32:	ed2d 8b04 	vpush	{d8-d9}
   dce36:	eeb0 8a40 	vmov.f32	s16, s0
   dce3a:	eef0 8a60 	vmov.f32	s17, s1
   dce3e:	4c2e      	ldr	r4, [pc, #184]	; (dcef8 <cosh+0xc8>)
   dce40:	b08b      	sub	sp, #44	; 0x2c
   dce42:	f001 fa89 	bl	de358 <__ieee754_cosh>
   dce46:	f994 3000 	ldrsb.w	r3, [r4]
   dce4a:	eeb0 9a40 	vmov.f32	s18, s0
   dce4e:	eef0 9a60 	vmov.f32	s19, s1
   dce52:	3301      	adds	r3, #1
   dce54:	d032      	beq.n	dcebc <cosh+0x8c>
   dce56:	ec53 2b18 	vmov	r2, r3, d8
   dce5a:	ec51 0b18 	vmov	r0, r1, d8
   dce5e:	f005 fa01 	bl	e2264 <__aeabi_dcmpun>
   dce62:	4605      	mov	r5, r0
   dce64:	bb50      	cbnz	r0, dcebc <cosh+0x8c>
   dce66:	eeb0 0a48 	vmov.f32	s0, s16
   dce6a:	eef0 0a68 	vmov.f32	s1, s17
   dce6e:	f7ff fd57 	bl	dc920 <fabs>
   dce72:	a31f      	add	r3, pc, #124	; (adr r3, dcef0 <cosh+0xc0>)
   dce74:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce78:	ec51 0b10 	vmov	r0, r1, d0
   dce7c:	f005 f9e8 	bl	e2250 <__aeabi_dcmpgt>
   dce80:	b1e0      	cbz	r0, dcebc <cosh+0x8c>
   dce82:	4a1e      	ldr	r2, [pc, #120]	; (dcefc <cosh+0xcc>)
   dce84:	f994 3000 	ldrsb.w	r3, [r4]
   dce88:	9508      	str	r5, [sp, #32]
   dce8a:	2103      	movs	r1, #3
   dce8c:	ed8d 8b04 	vstr	d8, [sp, #16]
   dce90:	ed8d 8b02 	vstr	d8, [sp, #8]
   dce94:	e88d 0006 	stmia.w	sp, {r1, r2}
   dce98:	b9c3      	cbnz	r3, dcecc <cosh+0x9c>
   dce9a:	4b19      	ldr	r3, [pc, #100]	; (dcf00 <cosh+0xd0>)
   dce9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dcea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dcea4:	4668      	mov	r0, sp
   dcea6:	f004 fc59 	bl	e175c <matherr>
   dceaa:	b1a8      	cbz	r0, dced8 <cosh+0xa8>
   dceac:	9b08      	ldr	r3, [sp, #32]
   dceae:	b9d3      	cbnz	r3, dcee6 <cosh+0xb6>
   dceb0:	ed9d 0b06 	vldr	d0, [sp, #24]
   dceb4:	b00b      	add	sp, #44	; 0x2c
   dceb6:	ecbd 8b04 	vpop	{d8-d9}
   dceba:	bd30      	pop	{r4, r5, pc}
   dcebc:	eeb0 0a49 	vmov.f32	s0, s18
   dcec0:	eef0 0a69 	vmov.f32	s1, s19
   dcec4:	b00b      	add	sp, #44	; 0x2c
   dcec6:	ecbd 8b04 	vpop	{d8-d9}
   dceca:	bd30      	pop	{r4, r5, pc}
   dcecc:	490d      	ldr	r1, [pc, #52]	; (dcf04 <cosh+0xd4>)
   dcece:	2000      	movs	r0, #0
   dced0:	2b02      	cmp	r3, #2
   dced2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dced6:	d1e5      	bne.n	dcea4 <cosh+0x74>
   dced8:	f7fc ff3a 	bl	d9d50 <__errno>
   dcedc:	2322      	movs	r3, #34	; 0x22
   dcede:	6003      	str	r3, [r0, #0]
   dcee0:	9b08      	ldr	r3, [sp, #32]
   dcee2:	2b00      	cmp	r3, #0
   dcee4:	d0e4      	beq.n	dceb0 <cosh+0x80>
   dcee6:	f7fc ff33 	bl	d9d50 <__errno>
   dceea:	9b08      	ldr	r3, [sp, #32]
   dceec:	6003      	str	r3, [r0, #0]
   dceee:	e7df      	b.n	dceb0 <cosh+0x80>
   dcef0:	8fb9f87d 	.word	0x8fb9f87d
   dcef4:	408633ce 	.word	0x408633ce
   dcef8:	2003d634 	.word	0x2003d634
   dcefc:	000e6e20 	.word	0x000e6e20
   dcf00:	47efffff 	.word	0x47efffff
   dcf04:	7ff00000 	.word	0x7ff00000

000dcf08 <exp>:
   dcf08:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcf0a:	ed2d 8b04 	vpush	{d8-d9}
   dcf0e:	eeb0 9a40 	vmov.f32	s18, s0
   dcf12:	eef0 9a60 	vmov.f32	s19, s1
   dcf16:	4c3a      	ldr	r4, [pc, #232]	; (dd000 <exp+0xf8>)
   dcf18:	b08b      	sub	sp, #44	; 0x2c
   dcf1a:	f001 fad9 	bl	de4d0 <__ieee754_exp>
   dcf1e:	f994 3000 	ldrsb.w	r3, [r4]
   dcf22:	eeb0 8a40 	vmov.f32	s16, s0
   dcf26:	eef0 8a60 	vmov.f32	s17, s1
   dcf2a:	3301      	adds	r3, #1
   dcf2c:	d038      	beq.n	dcfa0 <exp+0x98>
   dcf2e:	eeb0 0a49 	vmov.f32	s0, s18
   dcf32:	eef0 0a69 	vmov.f32	s1, s19
   dcf36:	f004 fc09 	bl	e174c <finite>
   dcf3a:	b388      	cbz	r0, dcfa0 <exp+0x98>
   dcf3c:	a32c      	add	r3, pc, #176	; (adr r3, dcff0 <exp+0xe8>)
   dcf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf42:	ec51 0b19 	vmov	r0, r1, d9
   dcf46:	f005 f983 	bl	e2250 <__aeabi_dcmpgt>
   dcf4a:	4605      	mov	r5, r0
   dcf4c:	bb80      	cbnz	r0, dcfb0 <exp+0xa8>
   dcf4e:	a32a      	add	r3, pc, #168	; (adr r3, dcff8 <exp+0xf0>)
   dcf50:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf54:	ec51 0b19 	vmov	r0, r1, d9
   dcf58:	f005 f95c 	bl	e2214 <__aeabi_dcmplt>
   dcf5c:	b300      	cbz	r0, dcfa0 <exp+0x98>
   dcf5e:	f994 3000 	ldrsb.w	r3, [r4]
   dcf62:	4a28      	ldr	r2, [pc, #160]	; (dd004 <exp+0xfc>)
   dcf64:	9508      	str	r5, [sp, #32]
   dcf66:	2600      	movs	r6, #0
   dcf68:	2700      	movs	r7, #0
   dcf6a:	2104      	movs	r1, #4
   dcf6c:	2b02      	cmp	r3, #2
   dcf6e:	ed8d 9b04 	vstr	d9, [sp, #16]
   dcf72:	ed8d 9b02 	vstr	d9, [sp, #8]
   dcf76:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dcf7a:	e88d 0006 	stmia.w	sp, {r1, r2}
   dcf7e:	d030      	beq.n	dcfe2 <exp+0xda>
   dcf80:	4668      	mov	r0, sp
   dcf82:	f004 fbeb 	bl	e175c <matherr>
   dcf86:	b360      	cbz	r0, dcfe2 <exp+0xda>
   dcf88:	9b08      	ldr	r3, [sp, #32]
   dcf8a:	b11b      	cbz	r3, dcf94 <exp+0x8c>
   dcf8c:	f7fc fee0 	bl	d9d50 <__errno>
   dcf90:	9b08      	ldr	r3, [sp, #32]
   dcf92:	6003      	str	r3, [r0, #0]
   dcf94:	ed9d 0b06 	vldr	d0, [sp, #24]
   dcf98:	b00b      	add	sp, #44	; 0x2c
   dcf9a:	ecbd 8b04 	vpop	{d8-d9}
   dcf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcfa0:	eeb0 0a48 	vmov.f32	s0, s16
   dcfa4:	eef0 0a68 	vmov.f32	s1, s17
   dcfa8:	b00b      	add	sp, #44	; 0x2c
   dcfaa:	ecbd 8b04 	vpop	{d8-d9}
   dcfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcfb0:	4a14      	ldr	r2, [pc, #80]	; (dd004 <exp+0xfc>)
   dcfb2:	f994 3000 	ldrsb.w	r3, [r4]
   dcfb6:	9201      	str	r2, [sp, #4]
   dcfb8:	2103      	movs	r1, #3
   dcfba:	2200      	movs	r2, #0
   dcfbc:	ed8d 9b04 	vstr	d9, [sp, #16]
   dcfc0:	ed8d 9b02 	vstr	d9, [sp, #8]
   dcfc4:	9100      	str	r1, [sp, #0]
   dcfc6:	9208      	str	r2, [sp, #32]
   dcfc8:	b92b      	cbnz	r3, dcfd6 <exp+0xce>
   dcfca:	4b0f      	ldr	r3, [pc, #60]	; (dd008 <exp+0x100>)
   dcfcc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dcfd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dcfd4:	e7d4      	b.n	dcf80 <exp+0x78>
   dcfd6:	490d      	ldr	r1, [pc, #52]	; (dd00c <exp+0x104>)
   dcfd8:	2000      	movs	r0, #0
   dcfda:	2b02      	cmp	r3, #2
   dcfdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dcfe0:	d1ce      	bne.n	dcf80 <exp+0x78>
   dcfe2:	f7fc feb5 	bl	d9d50 <__errno>
   dcfe6:	2322      	movs	r3, #34	; 0x22
   dcfe8:	6003      	str	r3, [r0, #0]
   dcfea:	e7cd      	b.n	dcf88 <exp+0x80>
   dcfec:	f3af 8000 	nop.w
   dcff0:	fefa39ef 	.word	0xfefa39ef
   dcff4:	40862e42 	.word	0x40862e42
   dcff8:	d52d3051 	.word	0xd52d3051
   dcffc:	c0874910 	.word	0xc0874910
   dd000:	2003d634 	.word	0x2003d634
   dd004:	000e6e28 	.word	0x000e6e28
   dd008:	47efffff 	.word	0x47efffff
   dd00c:	7ff00000 	.word	0x7ff00000

000dd010 <fmod>:
   dd010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd014:	ed2d 8b02 	vpush	{d8}
   dd018:	b08b      	sub	sp, #44	; 0x2c
   dd01a:	ec57 6b10 	vmov	r6, r7, d0
   dd01e:	ec55 4b11 	vmov	r4, r5, d1
   dd022:	f001 fbe7 	bl	de7f4 <__ieee754_fmod>
   dd026:	4b2e      	ldr	r3, [pc, #184]	; (dd0e0 <fmod+0xd0>)
   dd028:	eeb0 8a40 	vmov.f32	s16, s0
   dd02c:	eef0 8a60 	vmov.f32	s17, s1
   dd030:	f993 8000 	ldrsb.w	r8, [r3]
   dd034:	f1b8 3fff 	cmp.w	r8, #4294967295
   dd038:	d031      	beq.n	dd09e <fmod+0x8e>
   dd03a:	4622      	mov	r2, r4
   dd03c:	462b      	mov	r3, r5
   dd03e:	4620      	mov	r0, r4
   dd040:	4629      	mov	r1, r5
   dd042:	f005 f90f 	bl	e2264 <__aeabi_dcmpun>
   dd046:	bb50      	cbnz	r0, dd09e <fmod+0x8e>
   dd048:	4632      	mov	r2, r6
   dd04a:	463b      	mov	r3, r7
   dd04c:	4630      	mov	r0, r6
   dd04e:	4639      	mov	r1, r7
   dd050:	f005 f908 	bl	e2264 <__aeabi_dcmpun>
   dd054:	4681      	mov	r9, r0
   dd056:	bb10      	cbnz	r0, dd09e <fmod+0x8e>
   dd058:	2200      	movs	r2, #0
   dd05a:	2300      	movs	r3, #0
   dd05c:	4620      	mov	r0, r4
   dd05e:	4629      	mov	r1, r5
   dd060:	f005 f8ce 	bl	e2200 <__aeabi_dcmpeq>
   dd064:	b1d8      	cbz	r0, dd09e <fmod+0x8e>
   dd066:	4b1f      	ldr	r3, [pc, #124]	; (dd0e4 <fmod+0xd4>)
   dd068:	f8cd 9020 	str.w	r9, [sp, #32]
   dd06c:	2201      	movs	r2, #1
   dd06e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd072:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd076:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd07a:	f1b8 0f00 	cmp.w	r8, #0
   dd07e:	d117      	bne.n	dd0b0 <fmod+0xa0>
   dd080:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dd084:	4668      	mov	r0, sp
   dd086:	f004 fb69 	bl	e175c <matherr>
   dd08a:	b1e0      	cbz	r0, dd0c6 <fmod+0xb6>
   dd08c:	9b08      	ldr	r3, [sp, #32]
   dd08e:	bb0b      	cbnz	r3, dd0d4 <fmod+0xc4>
   dd090:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd094:	b00b      	add	sp, #44	; 0x2c
   dd096:	ecbd 8b02 	vpop	{d8}
   dd09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd09e:	eeb0 0a48 	vmov.f32	s0, s16
   dd0a2:	eef0 0a68 	vmov.f32	s1, s17
   dd0a6:	b00b      	add	sp, #44	; 0x2c
   dd0a8:	ecbd 8b02 	vpop	{d8}
   dd0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd0b0:	2200      	movs	r2, #0
   dd0b2:	2300      	movs	r3, #0
   dd0b4:	4610      	mov	r0, r2
   dd0b6:	4619      	mov	r1, r3
   dd0b8:	f004 ff64 	bl	e1f84 <__aeabi_ddiv>
   dd0bc:	f1b8 0f02 	cmp.w	r8, #2
   dd0c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd0c4:	d1de      	bne.n	dd084 <fmod+0x74>
   dd0c6:	f7fc fe43 	bl	d9d50 <__errno>
   dd0ca:	2321      	movs	r3, #33	; 0x21
   dd0cc:	6003      	str	r3, [r0, #0]
   dd0ce:	9b08      	ldr	r3, [sp, #32]
   dd0d0:	2b00      	cmp	r3, #0
   dd0d2:	d0dd      	beq.n	dd090 <fmod+0x80>
   dd0d4:	f7fc fe3c 	bl	d9d50 <__errno>
   dd0d8:	9b08      	ldr	r3, [sp, #32]
   dd0da:	6003      	str	r3, [r0, #0]
   dd0dc:	e7d8      	b.n	dd090 <fmod+0x80>
   dd0de:	bf00      	nop
   dd0e0:	2003d634 	.word	0x2003d634
   dd0e4:	000e6e2c 	.word	0x000e6e2c

000dd0e8 <log>:
   dd0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd0ec:	ed2d 8b02 	vpush	{d8}
   dd0f0:	b08b      	sub	sp, #44	; 0x2c
   dd0f2:	ec55 4b10 	vmov	r4, r5, d0
   dd0f6:	f001 fcb7 	bl	dea68 <__ieee754_log>
   dd0fa:	4b3a      	ldr	r3, [pc, #232]	; (dd1e4 <log+0xfc>)
   dd0fc:	eeb0 8a40 	vmov.f32	s16, s0
   dd100:	eef0 8a60 	vmov.f32	s17, s1
   dd104:	f993 6000 	ldrsb.w	r6, [r3]
   dd108:	1c73      	adds	r3, r6, #1
   dd10a:	d00d      	beq.n	dd128 <log+0x40>
   dd10c:	4622      	mov	r2, r4
   dd10e:	462b      	mov	r3, r5
   dd110:	4620      	mov	r0, r4
   dd112:	4629      	mov	r1, r5
   dd114:	f005 f8a6 	bl	e2264 <__aeabi_dcmpun>
   dd118:	b930      	cbnz	r0, dd128 <log+0x40>
   dd11a:	2200      	movs	r2, #0
   dd11c:	2300      	movs	r3, #0
   dd11e:	4620      	mov	r0, r4
   dd120:	4629      	mov	r1, r5
   dd122:	f005 f895 	bl	e2250 <__aeabi_dcmpgt>
   dd126:	b140      	cbz	r0, dd13a <log+0x52>
   dd128:	eeb0 0a48 	vmov.f32	s0, s16
   dd12c:	eef0 0a68 	vmov.f32	s1, s17
   dd130:	b00b      	add	sp, #44	; 0x2c
   dd132:	ecbd 8b02 	vpop	{d8}
   dd136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd13a:	4b2b      	ldr	r3, [pc, #172]	; (dd1e8 <log+0x100>)
   dd13c:	9008      	str	r0, [sp, #32]
   dd13e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dd142:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd146:	9301      	str	r3, [sp, #4]
   dd148:	b9de      	cbnz	r6, dd182 <log+0x9a>
   dd14a:	4f28      	ldr	r7, [pc, #160]	; (dd1ec <log+0x104>)
   dd14c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   dd150:	4620      	mov	r0, r4
   dd152:	4629      	mov	r1, r5
   dd154:	2200      	movs	r2, #0
   dd156:	2300      	movs	r3, #0
   dd158:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dd15c:	f005 f850 	bl	e2200 <__aeabi_dcmpeq>
   dd160:	2800      	cmp	r0, #0
   dd162:	d037      	beq.n	dd1d4 <log+0xec>
   dd164:	2302      	movs	r3, #2
   dd166:	9300      	str	r3, [sp, #0]
   dd168:	4668      	mov	r0, sp
   dd16a:	f004 faf7 	bl	e175c <matherr>
   dd16e:	b1c8      	cbz	r0, dd1a4 <log+0xbc>
   dd170:	9b08      	ldr	r3, [sp, #32]
   dd172:	b9e3      	cbnz	r3, dd1ae <log+0xc6>
   dd174:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd178:	b00b      	add	sp, #44	; 0x2c
   dd17a:	ecbd 8b02 	vpop	{d8}
   dd17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd182:	f8df 9070 	ldr.w	r9, [pc, #112]	; dd1f4 <log+0x10c>
   dd186:	f04f 0800 	mov.w	r8, #0
   dd18a:	4620      	mov	r0, r4
   dd18c:	4629      	mov	r1, r5
   dd18e:	2200      	movs	r2, #0
   dd190:	2300      	movs	r3, #0
   dd192:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd196:	f005 f833 	bl	e2200 <__aeabi_dcmpeq>
   dd19a:	b168      	cbz	r0, dd1b8 <log+0xd0>
   dd19c:	2302      	movs	r3, #2
   dd19e:	429e      	cmp	r6, r3
   dd1a0:	9300      	str	r3, [sp, #0]
   dd1a2:	d1e1      	bne.n	dd168 <log+0x80>
   dd1a4:	f7fc fdd4 	bl	d9d50 <__errno>
   dd1a8:	2322      	movs	r3, #34	; 0x22
   dd1aa:	6003      	str	r3, [r0, #0]
   dd1ac:	e7e0      	b.n	dd170 <log+0x88>
   dd1ae:	f7fc fdcf 	bl	d9d50 <__errno>
   dd1b2:	9b08      	ldr	r3, [sp, #32]
   dd1b4:	6003      	str	r3, [r0, #0]
   dd1b6:	e7dd      	b.n	dd174 <log+0x8c>
   dd1b8:	2301      	movs	r3, #1
   dd1ba:	2e02      	cmp	r6, #2
   dd1bc:	9300      	str	r3, [sp, #0]
   dd1be:	d10b      	bne.n	dd1d8 <log+0xf0>
   dd1c0:	f7fc fdc6 	bl	d9d50 <__errno>
   dd1c4:	2321      	movs	r3, #33	; 0x21
   dd1c6:	6003      	str	r3, [r0, #0]
   dd1c8:	4809      	ldr	r0, [pc, #36]	; (dd1f0 <log+0x108>)
   dd1ca:	f004 fac9 	bl	e1760 <nan>
   dd1ce:	ed8d 0b06 	vstr	d0, [sp, #24]
   dd1d2:	e7cd      	b.n	dd170 <log+0x88>
   dd1d4:	2301      	movs	r3, #1
   dd1d6:	9300      	str	r3, [sp, #0]
   dd1d8:	4668      	mov	r0, sp
   dd1da:	f004 fabf 	bl	e175c <matherr>
   dd1de:	2800      	cmp	r0, #0
   dd1e0:	d1f2      	bne.n	dd1c8 <log+0xe0>
   dd1e2:	e7ed      	b.n	dd1c0 <log+0xd8>
   dd1e4:	2003d634 	.word	0x2003d634
   dd1e8:	000e6e34 	.word	0x000e6e34
   dd1ec:	c7efffff 	.word	0xc7efffff
   dd1f0:	000e6e30 	.word	0x000e6e30
   dd1f4:	fff00000 	.word	0xfff00000

000dd1f8 <log10>:
   dd1f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd1fc:	ed2d 8b02 	vpush	{d8}
   dd200:	b08b      	sub	sp, #44	; 0x2c
   dd202:	ec55 4b10 	vmov	r4, r5, d0
   dd206:	f001 fe33 	bl	dee70 <__ieee754_log10>
   dd20a:	4b3b      	ldr	r3, [pc, #236]	; (dd2f8 <log10+0x100>)
   dd20c:	eeb0 8a40 	vmov.f32	s16, s0
   dd210:	eef0 8a60 	vmov.f32	s17, s1
   dd214:	f993 6000 	ldrsb.w	r6, [r3]
   dd218:	1c73      	adds	r3, r6, #1
   dd21a:	d00e      	beq.n	dd23a <log10+0x42>
   dd21c:	4622      	mov	r2, r4
   dd21e:	462b      	mov	r3, r5
   dd220:	4620      	mov	r0, r4
   dd222:	4629      	mov	r1, r5
   dd224:	f005 f81e 	bl	e2264 <__aeabi_dcmpun>
   dd228:	4607      	mov	r7, r0
   dd22a:	b930      	cbnz	r0, dd23a <log10+0x42>
   dd22c:	2200      	movs	r2, #0
   dd22e:	2300      	movs	r3, #0
   dd230:	4620      	mov	r0, r4
   dd232:	4629      	mov	r1, r5
   dd234:	f004 fff8 	bl	e2228 <__aeabi_dcmple>
   dd238:	b940      	cbnz	r0, dd24c <log10+0x54>
   dd23a:	eeb0 0a48 	vmov.f32	s0, s16
   dd23e:	eef0 0a68 	vmov.f32	s1, s17
   dd242:	b00b      	add	sp, #44	; 0x2c
   dd244:	ecbd 8b02 	vpop	{d8}
   dd248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd24c:	4b2b      	ldr	r3, [pc, #172]	; (dd2fc <log10+0x104>)
   dd24e:	9708      	str	r7, [sp, #32]
   dd250:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dd254:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd258:	9301      	str	r3, [sp, #4]
   dd25a:	b9de      	cbnz	r6, dd294 <log10+0x9c>
   dd25c:	4f28      	ldr	r7, [pc, #160]	; (dd300 <log10+0x108>)
   dd25e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   dd262:	4620      	mov	r0, r4
   dd264:	4629      	mov	r1, r5
   dd266:	2200      	movs	r2, #0
   dd268:	2300      	movs	r3, #0
   dd26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   dd26e:	f004 ffc7 	bl	e2200 <__aeabi_dcmpeq>
   dd272:	2800      	cmp	r0, #0
   dd274:	d037      	beq.n	dd2e6 <log10+0xee>
   dd276:	2302      	movs	r3, #2
   dd278:	9300      	str	r3, [sp, #0]
   dd27a:	4668      	mov	r0, sp
   dd27c:	f004 fa6e 	bl	e175c <matherr>
   dd280:	b1c8      	cbz	r0, dd2b6 <log10+0xbe>
   dd282:	9b08      	ldr	r3, [sp, #32]
   dd284:	b9e3      	cbnz	r3, dd2c0 <log10+0xc8>
   dd286:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd28a:	b00b      	add	sp, #44	; 0x2c
   dd28c:	ecbd 8b02 	vpop	{d8}
   dd290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd294:	f8df 9070 	ldr.w	r9, [pc, #112]	; dd308 <log10+0x110>
   dd298:	f04f 0800 	mov.w	r8, #0
   dd29c:	4620      	mov	r0, r4
   dd29e:	4629      	mov	r1, r5
   dd2a0:	2200      	movs	r2, #0
   dd2a2:	2300      	movs	r3, #0
   dd2a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd2a8:	f004 ffaa 	bl	e2200 <__aeabi_dcmpeq>
   dd2ac:	b168      	cbz	r0, dd2ca <log10+0xd2>
   dd2ae:	2302      	movs	r3, #2
   dd2b0:	429e      	cmp	r6, r3
   dd2b2:	9300      	str	r3, [sp, #0]
   dd2b4:	d1e1      	bne.n	dd27a <log10+0x82>
   dd2b6:	f7fc fd4b 	bl	d9d50 <__errno>
   dd2ba:	2322      	movs	r3, #34	; 0x22
   dd2bc:	6003      	str	r3, [r0, #0]
   dd2be:	e7e0      	b.n	dd282 <log10+0x8a>
   dd2c0:	f7fc fd46 	bl	d9d50 <__errno>
   dd2c4:	9b08      	ldr	r3, [sp, #32]
   dd2c6:	6003      	str	r3, [r0, #0]
   dd2c8:	e7dd      	b.n	dd286 <log10+0x8e>
   dd2ca:	2301      	movs	r3, #1
   dd2cc:	2e02      	cmp	r6, #2
   dd2ce:	9300      	str	r3, [sp, #0]
   dd2d0:	d10b      	bne.n	dd2ea <log10+0xf2>
   dd2d2:	f7fc fd3d 	bl	d9d50 <__errno>
   dd2d6:	2321      	movs	r3, #33	; 0x21
   dd2d8:	6003      	str	r3, [r0, #0]
   dd2da:	480a      	ldr	r0, [pc, #40]	; (dd304 <log10+0x10c>)
   dd2dc:	f004 fa40 	bl	e1760 <nan>
   dd2e0:	ed8d 0b06 	vstr	d0, [sp, #24]
   dd2e4:	e7cd      	b.n	dd282 <log10+0x8a>
   dd2e6:	2301      	movs	r3, #1
   dd2e8:	9300      	str	r3, [sp, #0]
   dd2ea:	4668      	mov	r0, sp
   dd2ec:	f004 fa36 	bl	e175c <matherr>
   dd2f0:	2800      	cmp	r0, #0
   dd2f2:	d1f2      	bne.n	dd2da <log10+0xe2>
   dd2f4:	e7ed      	b.n	dd2d2 <log10+0xda>
   dd2f6:	bf00      	nop
   dd2f8:	2003d634 	.word	0x2003d634
   dd2fc:	000e6e38 	.word	0x000e6e38
   dd300:	c7efffff 	.word	0xc7efffff
   dd304:	000e6e30 	.word	0x000e6e30
   dd308:	fff00000 	.word	0xfff00000
   dd30c:	00000000 	.word	0x00000000

000dd310 <pow>:
   dd310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd314:	ed2d 8b02 	vpush	{d8}
   dd318:	f8df a324 	ldr.w	sl, [pc, #804]	; dd640 <pow+0x330>
   dd31c:	b08b      	sub	sp, #44	; 0x2c
   dd31e:	ec57 6b10 	vmov	r6, r7, d0
   dd322:	ec55 4b11 	vmov	r4, r5, d1
   dd326:	f001 fe47 	bl	defb8 <__ieee754_pow>
   dd32a:	f99a 8000 	ldrsb.w	r8, [sl]
   dd32e:	eeb0 8a40 	vmov.f32	s16, s0
   dd332:	eef0 8a60 	vmov.f32	s17, s1
   dd336:	f1b8 3fff 	cmp.w	r8, #4294967295
   dd33a:	d048      	beq.n	dd3ce <pow+0xbe>
   dd33c:	4622      	mov	r2, r4
   dd33e:	462b      	mov	r3, r5
   dd340:	4620      	mov	r0, r4
   dd342:	4629      	mov	r1, r5
   dd344:	f004 ff8e 	bl	e2264 <__aeabi_dcmpun>
   dd348:	4683      	mov	fp, r0
   dd34a:	2800      	cmp	r0, #0
   dd34c:	d13f      	bne.n	dd3ce <pow+0xbe>
   dd34e:	4632      	mov	r2, r6
   dd350:	463b      	mov	r3, r7
   dd352:	4630      	mov	r0, r6
   dd354:	4639      	mov	r1, r7
   dd356:	f004 ff85 	bl	e2264 <__aeabi_dcmpun>
   dd35a:	4681      	mov	r9, r0
   dd35c:	2800      	cmp	r0, #0
   dd35e:	f040 8090 	bne.w	dd482 <pow+0x172>
   dd362:	4630      	mov	r0, r6
   dd364:	4639      	mov	r1, r7
   dd366:	2200      	movs	r2, #0
   dd368:	2300      	movs	r3, #0
   dd36a:	f004 ff49 	bl	e2200 <__aeabi_dcmpeq>
   dd36e:	2800      	cmp	r0, #0
   dd370:	d036      	beq.n	dd3e0 <pow+0xd0>
   dd372:	2200      	movs	r2, #0
   dd374:	2300      	movs	r3, #0
   dd376:	4620      	mov	r0, r4
   dd378:	4629      	mov	r1, r5
   dd37a:	f004 ff41 	bl	e2200 <__aeabi_dcmpeq>
   dd37e:	4683      	mov	fp, r0
   dd380:	b1b8      	cbz	r0, dd3b2 <pow+0xa2>
   dd382:	ed9f 7ba5 	vldr	d7, [pc, #660]	; dd618 <pow+0x308>
   dd386:	2201      	movs	r2, #1
   dd388:	4ba9      	ldr	r3, [pc, #676]	; (dd630 <pow+0x320>)
   dd38a:	f8cd 9020 	str.w	r9, [sp, #32]
   dd38e:	9200      	str	r2, [sp, #0]
   dd390:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd394:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd398:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd39c:	9301      	str	r3, [sp, #4]
   dd39e:	f1b8 0f00 	cmp.w	r8, #0
   dd3a2:	d05b      	beq.n	dd45c <pow+0x14c>
   dd3a4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; dd620 <pow+0x310>
   dd3a8:	b00b      	add	sp, #44	; 0x2c
   dd3aa:	ecbd 8b02 	vpop	{d8}
   dd3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3b2:	ec45 4b10 	vmov	d0, r4, r5
   dd3b6:	f004 f9c9 	bl	e174c <finite>
   dd3ba:	b140      	cbz	r0, dd3ce <pow+0xbe>
   dd3bc:	2200      	movs	r2, #0
   dd3be:	2300      	movs	r3, #0
   dd3c0:	4620      	mov	r0, r4
   dd3c2:	4629      	mov	r1, r5
   dd3c4:	f004 ff26 	bl	e2214 <__aeabi_dcmplt>
   dd3c8:	2800      	cmp	r0, #0
   dd3ca:	f040 80c5 	bne.w	dd558 <pow+0x248>
   dd3ce:	eeb0 0a48 	vmov.f32	s0, s16
   dd3d2:	eef0 0a68 	vmov.f32	s1, s17
   dd3d6:	b00b      	add	sp, #44	; 0x2c
   dd3d8:	ecbd 8b02 	vpop	{d8}
   dd3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3e0:	eeb0 0a48 	vmov.f32	s0, s16
   dd3e4:	eef0 0a68 	vmov.f32	s1, s17
   dd3e8:	f004 f9b0 	bl	e174c <finite>
   dd3ec:	4680      	mov	r8, r0
   dd3ee:	2800      	cmp	r0, #0
   dd3f0:	d061      	beq.n	dd4b6 <pow+0x1a6>
   dd3f2:	f04f 0800 	mov.w	r8, #0
   dd3f6:	f04f 0900 	mov.w	r9, #0
   dd3fa:	ec51 0b18 	vmov	r0, r1, d8
   dd3fe:	4642      	mov	r2, r8
   dd400:	464b      	mov	r3, r9
   dd402:	f004 fefd 	bl	e2200 <__aeabi_dcmpeq>
   dd406:	2800      	cmp	r0, #0
   dd408:	d0e1      	beq.n	dd3ce <pow+0xbe>
   dd40a:	ec47 6b10 	vmov	d0, r6, r7
   dd40e:	f004 f99d 	bl	e174c <finite>
   dd412:	2800      	cmp	r0, #0
   dd414:	d0db      	beq.n	dd3ce <pow+0xbe>
   dd416:	ec45 4b10 	vmov	d0, r4, r5
   dd41a:	f004 f997 	bl	e174c <finite>
   dd41e:	2800      	cmp	r0, #0
   dd420:	d0d5      	beq.n	dd3ce <pow+0xbe>
   dd422:	f99a 3000 	ldrsb.w	r3, [sl]
   dd426:	4a82      	ldr	r2, [pc, #520]	; (dd630 <pow+0x320>)
   dd428:	9201      	str	r2, [sp, #4]
   dd42a:	2104      	movs	r1, #4
   dd42c:	2200      	movs	r2, #0
   dd42e:	2b02      	cmp	r3, #2
   dd430:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd434:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd438:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd43c:	9100      	str	r1, [sp, #0]
   dd43e:	9208      	str	r2, [sp, #32]
   dd440:	d003      	beq.n	dd44a <pow+0x13a>
   dd442:	4668      	mov	r0, sp
   dd444:	f004 f98a 	bl	e175c <matherr>
   dd448:	b970      	cbnz	r0, dd468 <pow+0x158>
   dd44a:	f7fc fc81 	bl	d9d50 <__errno>
   dd44e:	2322      	movs	r3, #34	; 0x22
   dd450:	6003      	str	r3, [r0, #0]
   dd452:	e009      	b.n	dd468 <pow+0x158>
   dd454:	ed9f 7b70 	vldr	d7, [pc, #448]	; dd618 <pow+0x308>
   dd458:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd45c:	4668      	mov	r0, sp
   dd45e:	f004 f97d 	bl	e175c <matherr>
   dd462:	2800      	cmp	r0, #0
   dd464:	f000 808e 	beq.w	dd584 <pow+0x274>
   dd468:	9b08      	ldr	r3, [sp, #32]
   dd46a:	b11b      	cbz	r3, dd474 <pow+0x164>
   dd46c:	f7fc fc70 	bl	d9d50 <__errno>
   dd470:	9b08      	ldr	r3, [sp, #32]
   dd472:	6003      	str	r3, [r0, #0]
   dd474:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd478:	b00b      	add	sp, #44	; 0x2c
   dd47a:	ecbd 8b02 	vpop	{d8}
   dd47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd482:	2200      	movs	r2, #0
   dd484:	2300      	movs	r3, #0
   dd486:	4620      	mov	r0, r4
   dd488:	4629      	mov	r1, r5
   dd48a:	f004 feb9 	bl	e2200 <__aeabi_dcmpeq>
   dd48e:	2800      	cmp	r0, #0
   dd490:	d09d      	beq.n	dd3ce <pow+0xbe>
   dd492:	ed9f 0b63 	vldr	d0, [pc, #396]	; dd620 <pow+0x310>
   dd496:	4b66      	ldr	r3, [pc, #408]	; (dd630 <pow+0x320>)
   dd498:	f8cd b020 	str.w	fp, [sp, #32]
   dd49c:	2201      	movs	r2, #1
   dd49e:	f1b8 0f02 	cmp.w	r8, #2
   dd4a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd4a6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd4aa:	ed8d 0b06 	vstr	d0, [sp, #24]
   dd4ae:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd4b2:	d1d3      	bne.n	dd45c <pow+0x14c>
   dd4b4:	e78f      	b.n	dd3d6 <pow+0xc6>
   dd4b6:	ec47 6b10 	vmov	d0, r6, r7
   dd4ba:	f004 f947 	bl	e174c <finite>
   dd4be:	2800      	cmp	r0, #0
   dd4c0:	d097      	beq.n	dd3f2 <pow+0xe2>
   dd4c2:	ec45 4b10 	vmov	d0, r4, r5
   dd4c6:	f004 f941 	bl	e174c <finite>
   dd4ca:	2800      	cmp	r0, #0
   dd4cc:	d091      	beq.n	dd3f2 <pow+0xe2>
   dd4ce:	ec53 2b18 	vmov	r2, r3, d8
   dd4d2:	ee18 0a10 	vmov	r0, s16
   dd4d6:	4619      	mov	r1, r3
   dd4d8:	f004 fec4 	bl	e2264 <__aeabi_dcmpun>
   dd4dc:	2800      	cmp	r0, #0
   dd4de:	d17c      	bne.n	dd5da <pow+0x2ca>
   dd4e0:	2303      	movs	r3, #3
   dd4e2:	f99a 8000 	ldrsb.w	r8, [sl]
   dd4e6:	9300      	str	r3, [sp, #0]
   dd4e8:	4b51      	ldr	r3, [pc, #324]	; (dd630 <pow+0x320>)
   dd4ea:	9008      	str	r0, [sp, #32]
   dd4ec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd4f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd4f4:	9301      	str	r3, [sp, #4]
   dd4f6:	f1b8 0f00 	cmp.w	r8, #0
   dd4fa:	d148      	bne.n	dd58e <pow+0x27e>
   dd4fc:	f8df 9144 	ldr.w	r9, [pc, #324]	; dd644 <pow+0x334>
   dd500:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   dd504:	2200      	movs	r2, #0
   dd506:	2300      	movs	r3, #0
   dd508:	4630      	mov	r0, r6
   dd50a:	4639      	mov	r1, r7
   dd50c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd510:	f004 fe80 	bl	e2214 <__aeabi_dcmplt>
   dd514:	2800      	cmp	r0, #0
   dd516:	d094      	beq.n	dd442 <pow+0x132>
   dd518:	2200      	movs	r2, #0
   dd51a:	4b46      	ldr	r3, [pc, #280]	; (dd634 <pow+0x324>)
   dd51c:	4620      	mov	r0, r4
   dd51e:	4629      	mov	r1, r5
   dd520:	f004 fc06 	bl	e1d30 <__aeabi_dmul>
   dd524:	4604      	mov	r4, r0
   dd526:	460d      	mov	r5, r1
   dd528:	ec45 4b10 	vmov	d0, r4, r5
   dd52c:	f004 f920 	bl	e1770 <rint>
   dd530:	4620      	mov	r0, r4
   dd532:	ec53 2b10 	vmov	r2, r3, d0
   dd536:	4629      	mov	r1, r5
   dd538:	f004 fe62 	bl	e2200 <__aeabi_dcmpeq>
   dd53c:	2800      	cmp	r0, #0
   dd53e:	d149      	bne.n	dd5d4 <pow+0x2c4>
   dd540:	4b3d      	ldr	r3, [pc, #244]	; (dd638 <pow+0x328>)
   dd542:	f99a 8000 	ldrsb.w	r8, [sl]
   dd546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dd54a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd54e:	f1b8 0f02 	cmp.w	r8, #2
   dd552:	f47f af76 	bne.w	dd442 <pow+0x132>
   dd556:	e778      	b.n	dd44a <pow+0x13a>
   dd558:	4a35      	ldr	r2, [pc, #212]	; (dd630 <pow+0x320>)
   dd55a:	f99a 3000 	ldrsb.w	r3, [sl]
   dd55e:	f8cd b020 	str.w	fp, [sp, #32]
   dd562:	2101      	movs	r1, #1
   dd564:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd568:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd56c:	e88d 0006 	stmia.w	sp, {r1, r2}
   dd570:	2b00      	cmp	r3, #0
   dd572:	f43f af6f 	beq.w	dd454 <pow+0x144>
   dd576:	4931      	ldr	r1, [pc, #196]	; (dd63c <pow+0x32c>)
   dd578:	2000      	movs	r0, #0
   dd57a:	2b02      	cmp	r3, #2
   dd57c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd580:	f47f af6c 	bne.w	dd45c <pow+0x14c>
   dd584:	f7fc fbe4 	bl	d9d50 <__errno>
   dd588:	2321      	movs	r3, #33	; 0x21
   dd58a:	6003      	str	r3, [r0, #0]
   dd58c:	e76c      	b.n	dd468 <pow+0x158>
   dd58e:	ed9f 7b26 	vldr	d7, [pc, #152]	; dd628 <pow+0x318>
   dd592:	2200      	movs	r2, #0
   dd594:	2300      	movs	r3, #0
   dd596:	4630      	mov	r0, r6
   dd598:	4639      	mov	r1, r7
   dd59a:	ed8d 7b06 	vstr	d7, [sp, #24]
   dd59e:	f004 fe39 	bl	e2214 <__aeabi_dcmplt>
   dd5a2:	2800      	cmp	r0, #0
   dd5a4:	d0d3      	beq.n	dd54e <pow+0x23e>
   dd5a6:	2200      	movs	r2, #0
   dd5a8:	4b22      	ldr	r3, [pc, #136]	; (dd634 <pow+0x324>)
   dd5aa:	4620      	mov	r0, r4
   dd5ac:	4629      	mov	r1, r5
   dd5ae:	f004 fbbf 	bl	e1d30 <__aeabi_dmul>
   dd5b2:	4604      	mov	r4, r0
   dd5b4:	460d      	mov	r5, r1
   dd5b6:	ec45 4b10 	vmov	d0, r4, r5
   dd5ba:	f004 f8d9 	bl	e1770 <rint>
   dd5be:	4620      	mov	r0, r4
   dd5c0:	ec53 2b10 	vmov	r2, r3, d0
   dd5c4:	4629      	mov	r1, r5
   dd5c6:	f004 fe1b 	bl	e2200 <__aeabi_dcmpeq>
   dd5ca:	b918      	cbnz	r0, dd5d4 <pow+0x2c4>
   dd5cc:	4b1b      	ldr	r3, [pc, #108]	; (dd63c <pow+0x32c>)
   dd5ce:	2200      	movs	r2, #0
   dd5d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd5d4:	f99a 8000 	ldrsb.w	r8, [sl]
   dd5d8:	e7b9      	b.n	dd54e <pow+0x23e>
   dd5da:	4b15      	ldr	r3, [pc, #84]	; (dd630 <pow+0x320>)
   dd5dc:	f99a 9000 	ldrsb.w	r9, [sl]
   dd5e0:	f8cd 8020 	str.w	r8, [sp, #32]
   dd5e4:	2201      	movs	r2, #1
   dd5e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dd5ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd5ee:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd5f2:	f1b9 0f00 	cmp.w	r9, #0
   dd5f6:	f43f af2d 	beq.w	dd454 <pow+0x144>
   dd5fa:	2200      	movs	r2, #0
   dd5fc:	2300      	movs	r3, #0
   dd5fe:	4610      	mov	r0, r2
   dd600:	4619      	mov	r1, r3
   dd602:	f004 fcbf 	bl	e1f84 <__aeabi_ddiv>
   dd606:	f1b9 0f02 	cmp.w	r9, #2
   dd60a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd60e:	d0b9      	beq.n	dd584 <pow+0x274>
   dd610:	e724      	b.n	dd45c <pow+0x14c>
   dd612:	bf00      	nop
   dd614:	f3af 8000 	nop.w
	...
   dd624:	3ff00000 	.word	0x3ff00000
   dd628:	00000000 	.word	0x00000000
   dd62c:	7ff00000 	.word	0x7ff00000
   dd630:	000e6e40 	.word	0x000e6e40
   dd634:	3fe00000 	.word	0x3fe00000
   dd638:	c7efffff 	.word	0xc7efffff
   dd63c:	fff00000 	.word	0xfff00000
   dd640:	2003d634 	.word	0x2003d634
   dd644:	47efffff 	.word	0x47efffff

000dd648 <sinh>:
   dd648:	b530      	push	{r4, r5, lr}
   dd64a:	ed2d 8b04 	vpush	{d8-d9}
   dd64e:	eeb0 9a40 	vmov.f32	s18, s0
   dd652:	eef0 9a60 	vmov.f32	s19, s1
   dd656:	4c2d      	ldr	r4, [pc, #180]	; (dd70c <sinh+0xc4>)
   dd658:	b08b      	sub	sp, #44	; 0x2c
   dd65a:	f002 fc5d 	bl	dff18 <__ieee754_sinh>
   dd65e:	f994 3000 	ldrsb.w	r3, [r4]
   dd662:	eeb0 8a40 	vmov.f32	s16, s0
   dd666:	eef0 8a60 	vmov.f32	s17, s1
   dd66a:	3301      	adds	r3, #1
   dd66c:	d003      	beq.n	dd676 <sinh+0x2e>
   dd66e:	f004 f86d 	bl	e174c <finite>
   dd672:	4605      	mov	r5, r0
   dd674:	b138      	cbz	r0, dd686 <sinh+0x3e>
   dd676:	eeb0 0a48 	vmov.f32	s0, s16
   dd67a:	eef0 0a68 	vmov.f32	s1, s17
   dd67e:	b00b      	add	sp, #44	; 0x2c
   dd680:	ecbd 8b04 	vpop	{d8-d9}
   dd684:	bd30      	pop	{r4, r5, pc}
   dd686:	eeb0 0a49 	vmov.f32	s0, s18
   dd68a:	eef0 0a69 	vmov.f32	s1, s19
   dd68e:	f004 f85d 	bl	e174c <finite>
   dd692:	2800      	cmp	r0, #0
   dd694:	d0ef      	beq.n	dd676 <sinh+0x2e>
   dd696:	4b1e      	ldr	r3, [pc, #120]	; (dd710 <sinh+0xc8>)
   dd698:	f994 4000 	ldrsb.w	r4, [r4]
   dd69c:	9508      	str	r5, [sp, #32]
   dd69e:	2203      	movs	r2, #3
   dd6a0:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd6a4:	ed8d 9b04 	vstr	d9, [sp, #16]
   dd6a8:	ed8d 9b02 	vstr	d9, [sp, #8]
   dd6ac:	2200      	movs	r2, #0
   dd6ae:	2300      	movs	r3, #0
   dd6b0:	ec51 0b19 	vmov	r0, r1, d9
   dd6b4:	b99c      	cbnz	r4, dd6de <sinh+0x96>
   dd6b6:	f004 fdcb 	bl	e2250 <__aeabi_dcmpgt>
   dd6ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dd6be:	b308      	cbz	r0, dd704 <sinh+0xbc>
   dd6c0:	4b14      	ldr	r3, [pc, #80]	; (dd714 <sinh+0xcc>)
   dd6c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd6c6:	4668      	mov	r0, sp
   dd6c8:	f004 f848 	bl	e175c <matherr>
   dd6cc:	b180      	cbz	r0, dd6f0 <sinh+0xa8>
   dd6ce:	9b08      	ldr	r3, [sp, #32]
   dd6d0:	b99b      	cbnz	r3, dd6fa <sinh+0xb2>
   dd6d2:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd6d6:	b00b      	add	sp, #44	; 0x2c
   dd6d8:	ecbd 8b04 	vpop	{d8-d9}
   dd6dc:	bd30      	pop	{r4, r5, pc}
   dd6de:	f004 fdb7 	bl	e2250 <__aeabi_dcmpgt>
   dd6e2:	2200      	movs	r2, #0
   dd6e4:	b180      	cbz	r0, dd708 <sinh+0xc0>
   dd6e6:	4b0c      	ldr	r3, [pc, #48]	; (dd718 <sinh+0xd0>)
   dd6e8:	2c02      	cmp	r4, #2
   dd6ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   dd6ee:	d1ea      	bne.n	dd6c6 <sinh+0x7e>
   dd6f0:	f7fc fb2e 	bl	d9d50 <__errno>
   dd6f4:	2322      	movs	r3, #34	; 0x22
   dd6f6:	6003      	str	r3, [r0, #0]
   dd6f8:	e7e9      	b.n	dd6ce <sinh+0x86>
   dd6fa:	f7fc fb29 	bl	d9d50 <__errno>
   dd6fe:	9b08      	ldr	r3, [sp, #32]
   dd700:	6003      	str	r3, [r0, #0]
   dd702:	e7e6      	b.n	dd6d2 <sinh+0x8a>
   dd704:	4b05      	ldr	r3, [pc, #20]	; (dd71c <sinh+0xd4>)
   dd706:	e7dc      	b.n	dd6c2 <sinh+0x7a>
   dd708:	4b05      	ldr	r3, [pc, #20]	; (dd720 <sinh+0xd8>)
   dd70a:	e7ed      	b.n	dd6e8 <sinh+0xa0>
   dd70c:	2003d634 	.word	0x2003d634
   dd710:	000e6e44 	.word	0x000e6e44
   dd714:	47efffff 	.word	0x47efffff
   dd718:	7ff00000 	.word	0x7ff00000
   dd71c:	c7efffff 	.word	0xc7efffff
   dd720:	fff00000 	.word	0xfff00000

000dd724 <sqrt>:
   dd724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd728:	ed2d 8b02 	vpush	{d8}
   dd72c:	b08b      	sub	sp, #44	; 0x2c
   dd72e:	ec55 4b10 	vmov	r4, r5, d0
   dd732:	f002 fcd5 	bl	e00e0 <__ieee754_sqrt>
   dd736:	4b29      	ldr	r3, [pc, #164]	; (dd7dc <sqrt+0xb8>)
   dd738:	eeb0 8a40 	vmov.f32	s16, s0
   dd73c:	eef0 8a60 	vmov.f32	s17, s1
   dd740:	f993 6000 	ldrsb.w	r6, [r3]
   dd744:	1c73      	adds	r3, r6, #1
   dd746:	d012      	beq.n	dd76e <sqrt+0x4a>
   dd748:	4622      	mov	r2, r4
   dd74a:	462b      	mov	r3, r5
   dd74c:	4620      	mov	r0, r4
   dd74e:	4629      	mov	r1, r5
   dd750:	f004 fd88 	bl	e2264 <__aeabi_dcmpun>
   dd754:	4607      	mov	r7, r0
   dd756:	b950      	cbnz	r0, dd76e <sqrt+0x4a>
   dd758:	f04f 0800 	mov.w	r8, #0
   dd75c:	f04f 0900 	mov.w	r9, #0
   dd760:	4620      	mov	r0, r4
   dd762:	4629      	mov	r1, r5
   dd764:	4642      	mov	r2, r8
   dd766:	464b      	mov	r3, r9
   dd768:	f004 fd54 	bl	e2214 <__aeabi_dcmplt>
   dd76c:	b940      	cbnz	r0, dd780 <sqrt+0x5c>
   dd76e:	eeb0 0a48 	vmov.f32	s0, s16
   dd772:	eef0 0a68 	vmov.f32	s1, s17
   dd776:	b00b      	add	sp, #44	; 0x2c
   dd778:	ecbd 8b02 	vpop	{d8}
   dd77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd780:	4b17      	ldr	r3, [pc, #92]	; (dd7e0 <sqrt+0xbc>)
   dd782:	9708      	str	r7, [sp, #32]
   dd784:	2201      	movs	r2, #1
   dd786:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dd78a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   dd78e:	e88d 000c 	stmia.w	sp, {r2, r3}
   dd792:	b1b6      	cbz	r6, dd7c2 <sqrt+0x9e>
   dd794:	4642      	mov	r2, r8
   dd796:	464b      	mov	r3, r9
   dd798:	4640      	mov	r0, r8
   dd79a:	4649      	mov	r1, r9
   dd79c:	f004 fbf2 	bl	e1f84 <__aeabi_ddiv>
   dd7a0:	2e02      	cmp	r6, #2
   dd7a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dd7a6:	d10e      	bne.n	dd7c6 <sqrt+0xa2>
   dd7a8:	f7fc fad2 	bl	d9d50 <__errno>
   dd7ac:	2321      	movs	r3, #33	; 0x21
   dd7ae:	6003      	str	r3, [r0, #0]
   dd7b0:	9b08      	ldr	r3, [sp, #32]
   dd7b2:	b973      	cbnz	r3, dd7d2 <sqrt+0xae>
   dd7b4:	ed9d 0b06 	vldr	d0, [sp, #24]
   dd7b8:	b00b      	add	sp, #44	; 0x2c
   dd7ba:	ecbd 8b02 	vpop	{d8}
   dd7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd7c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dd7c6:	4668      	mov	r0, sp
   dd7c8:	f003 ffc8 	bl	e175c <matherr>
   dd7cc:	2800      	cmp	r0, #0
   dd7ce:	d1ef      	bne.n	dd7b0 <sqrt+0x8c>
   dd7d0:	e7ea      	b.n	dd7a8 <sqrt+0x84>
   dd7d2:	f7fc fabd 	bl	d9d50 <__errno>
   dd7d6:	9b08      	ldr	r3, [sp, #32]
   dd7d8:	6003      	str	r3, [r0, #0]
   dd7da:	e7eb      	b.n	dd7b4 <sqrt+0x90>
   dd7dc:	2003d634 	.word	0x2003d634
   dd7e0:	000e6e4c 	.word	0x000e6e4c
   dd7e4:	00000000 	.word	0x00000000

000dd7e8 <__ieee754_acos>:
   dd7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd7ec:	ec55 4b10 	vmov	r4, r5, d0
   dd7f0:	49cd      	ldr	r1, [pc, #820]	; (ddb28 <__ieee754_acos+0x340>)
   dd7f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   dd7f6:	428b      	cmp	r3, r1
   dd7f8:	dd0d      	ble.n	dd816 <__ieee754_acos+0x2e>
   dd7fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   dd7fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dd802:	4323      	orrs	r3, r4
   dd804:	f040 80bd 	bne.w	dd982 <__ieee754_acos+0x19a>
   dd808:	2d00      	cmp	r5, #0
   dd80a:	f340 814f 	ble.w	ddaac <__ieee754_acos+0x2c4>
   dd80e:	ed9f 0baa 	vldr	d0, [pc, #680]	; ddab8 <__ieee754_acos+0x2d0>
   dd812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd816:	49c5      	ldr	r1, [pc, #788]	; (ddb2c <__ieee754_acos+0x344>)
   dd818:	428b      	cmp	r3, r1
   dd81a:	f340 80ab 	ble.w	dd974 <__ieee754_acos+0x18c>
   dd81e:	2d00      	cmp	r5, #0
   dd820:	f2c0 818c 	blt.w	ddb3c <__ieee754_acos+0x354>
   dd824:	ee10 2a10 	vmov	r2, s0
   dd828:	462b      	mov	r3, r5
   dd82a:	2000      	movs	r0, #0
   dd82c:	49c0      	ldr	r1, [pc, #768]	; (ddb30 <__ieee754_acos+0x348>)
   dd82e:	f004 f8cb 	bl	e19c8 <__aeabi_dsub>
   dd832:	2200      	movs	r2, #0
   dd834:	4bbf      	ldr	r3, [pc, #764]	; (ddb34 <__ieee754_acos+0x34c>)
   dd836:	f004 fa7b 	bl	e1d30 <__aeabi_dmul>
   dd83a:	4604      	mov	r4, r0
   dd83c:	460d      	mov	r5, r1
   dd83e:	ec45 4b10 	vmov	d0, r4, r5
   dd842:	f002 fc4d 	bl	e00e0 <__ieee754_sqrt>
   dd846:	4620      	mov	r0, r4
   dd848:	4629      	mov	r1, r5
   dd84a:	a39d      	add	r3, pc, #628	; (adr r3, ddac0 <__ieee754_acos+0x2d8>)
   dd84c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd850:	ec59 8b10 	vmov	r8, r9, d0
   dd854:	f004 fa6c 	bl	e1d30 <__aeabi_dmul>
   dd858:	a39b      	add	r3, pc, #620	; (adr r3, ddac8 <__ieee754_acos+0x2e0>)
   dd85a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd85e:	f004 f8b5 	bl	e19cc <__adddf3>
   dd862:	4622      	mov	r2, r4
   dd864:	462b      	mov	r3, r5
   dd866:	f004 fa63 	bl	e1d30 <__aeabi_dmul>
   dd86a:	a399      	add	r3, pc, #612	; (adr r3, ddad0 <__ieee754_acos+0x2e8>)
   dd86c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd870:	f004 f8aa 	bl	e19c8 <__aeabi_dsub>
   dd874:	4622      	mov	r2, r4
   dd876:	462b      	mov	r3, r5
   dd878:	f004 fa5a 	bl	e1d30 <__aeabi_dmul>
   dd87c:	a396      	add	r3, pc, #600	; (adr r3, ddad8 <__ieee754_acos+0x2f0>)
   dd87e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd882:	f004 f8a3 	bl	e19cc <__adddf3>
   dd886:	4622      	mov	r2, r4
   dd888:	462b      	mov	r3, r5
   dd88a:	f004 fa51 	bl	e1d30 <__aeabi_dmul>
   dd88e:	a394      	add	r3, pc, #592	; (adr r3, ddae0 <__ieee754_acos+0x2f8>)
   dd890:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd894:	f004 f898 	bl	e19c8 <__aeabi_dsub>
   dd898:	4622      	mov	r2, r4
   dd89a:	462b      	mov	r3, r5
   dd89c:	f004 fa48 	bl	e1d30 <__aeabi_dmul>
   dd8a0:	a391      	add	r3, pc, #580	; (adr r3, ddae8 <__ieee754_acos+0x300>)
   dd8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8a6:	f004 f891 	bl	e19cc <__adddf3>
   dd8aa:	4622      	mov	r2, r4
   dd8ac:	462b      	mov	r3, r5
   dd8ae:	f004 fa3f 	bl	e1d30 <__aeabi_dmul>
   dd8b2:	a38f      	add	r3, pc, #572	; (adr r3, ddaf0 <__ieee754_acos+0x308>)
   dd8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8b8:	4682      	mov	sl, r0
   dd8ba:	468b      	mov	fp, r1
   dd8bc:	4620      	mov	r0, r4
   dd8be:	4629      	mov	r1, r5
   dd8c0:	f004 fa36 	bl	e1d30 <__aeabi_dmul>
   dd8c4:	a38c      	add	r3, pc, #560	; (adr r3, ddaf8 <__ieee754_acos+0x310>)
   dd8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8ca:	f004 f87d 	bl	e19c8 <__aeabi_dsub>
   dd8ce:	4622      	mov	r2, r4
   dd8d0:	462b      	mov	r3, r5
   dd8d2:	f004 fa2d 	bl	e1d30 <__aeabi_dmul>
   dd8d6:	a38a      	add	r3, pc, #552	; (adr r3, ddb00 <__ieee754_acos+0x318>)
   dd8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8dc:	f004 f876 	bl	e19cc <__adddf3>
   dd8e0:	4622      	mov	r2, r4
   dd8e2:	462b      	mov	r3, r5
   dd8e4:	f004 fa24 	bl	e1d30 <__aeabi_dmul>
   dd8e8:	a387      	add	r3, pc, #540	; (adr r3, ddb08 <__ieee754_acos+0x320>)
   dd8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd8ee:	f004 f86b 	bl	e19c8 <__aeabi_dsub>
   dd8f2:	4622      	mov	r2, r4
   dd8f4:	462b      	mov	r3, r5
   dd8f6:	f004 fa1b 	bl	e1d30 <__aeabi_dmul>
   dd8fa:	2200      	movs	r2, #0
   dd8fc:	4b8c      	ldr	r3, [pc, #560]	; (ddb30 <__ieee754_acos+0x348>)
   dd8fe:	f004 f865 	bl	e19cc <__adddf3>
   dd902:	4602      	mov	r2, r0
   dd904:	460b      	mov	r3, r1
   dd906:	4650      	mov	r0, sl
   dd908:	4659      	mov	r1, fp
   dd90a:	f004 fb3b 	bl	e1f84 <__aeabi_ddiv>
   dd90e:	4642      	mov	r2, r8
   dd910:	464b      	mov	r3, r9
   dd912:	f004 fa0d 	bl	e1d30 <__aeabi_dmul>
   dd916:	2600      	movs	r6, #0
   dd918:	4682      	mov	sl, r0
   dd91a:	468b      	mov	fp, r1
   dd91c:	4632      	mov	r2, r6
   dd91e:	464b      	mov	r3, r9
   dd920:	4630      	mov	r0, r6
   dd922:	4649      	mov	r1, r9
   dd924:	f004 fa04 	bl	e1d30 <__aeabi_dmul>
   dd928:	4602      	mov	r2, r0
   dd92a:	460b      	mov	r3, r1
   dd92c:	4620      	mov	r0, r4
   dd92e:	4629      	mov	r1, r5
   dd930:	f004 f84a 	bl	e19c8 <__aeabi_dsub>
   dd934:	4632      	mov	r2, r6
   dd936:	4604      	mov	r4, r0
   dd938:	460d      	mov	r5, r1
   dd93a:	464b      	mov	r3, r9
   dd93c:	4640      	mov	r0, r8
   dd93e:	4649      	mov	r1, r9
   dd940:	f004 f844 	bl	e19cc <__adddf3>
   dd944:	4602      	mov	r2, r0
   dd946:	460b      	mov	r3, r1
   dd948:	4620      	mov	r0, r4
   dd94a:	4629      	mov	r1, r5
   dd94c:	f004 fb1a 	bl	e1f84 <__aeabi_ddiv>
   dd950:	4602      	mov	r2, r0
   dd952:	460b      	mov	r3, r1
   dd954:	4650      	mov	r0, sl
   dd956:	4659      	mov	r1, fp
   dd958:	f004 f838 	bl	e19cc <__adddf3>
   dd95c:	4632      	mov	r2, r6
   dd95e:	464b      	mov	r3, r9
   dd960:	f004 f834 	bl	e19cc <__adddf3>
   dd964:	4602      	mov	r2, r0
   dd966:	460b      	mov	r3, r1
   dd968:	f004 f830 	bl	e19cc <__adddf3>
   dd96c:	ec41 0b10 	vmov	d0, r0, r1
   dd970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd974:	4a70      	ldr	r2, [pc, #448]	; (ddb38 <__ieee754_acos+0x350>)
   dd976:	4293      	cmp	r3, r2
   dd978:	dc12      	bgt.n	dd9a0 <__ieee754_acos+0x1b8>
   dd97a:	ed9f 0b65 	vldr	d0, [pc, #404]	; ddb10 <__ieee754_acos+0x328>
   dd97e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd982:	ee10 2a10 	vmov	r2, s0
   dd986:	462b      	mov	r3, r5
   dd988:	4620      	mov	r0, r4
   dd98a:	4629      	mov	r1, r5
   dd98c:	f004 f81c 	bl	e19c8 <__aeabi_dsub>
   dd990:	4602      	mov	r2, r0
   dd992:	460b      	mov	r3, r1
   dd994:	f004 faf6 	bl	e1f84 <__aeabi_ddiv>
   dd998:	ec41 0b10 	vmov	d0, r0, r1
   dd99c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd9a0:	ee10 2a10 	vmov	r2, s0
   dd9a4:	ee10 0a10 	vmov	r0, s0
   dd9a8:	462b      	mov	r3, r5
   dd9aa:	4629      	mov	r1, r5
   dd9ac:	f004 f9c0 	bl	e1d30 <__aeabi_dmul>
   dd9b0:	a343      	add	r3, pc, #268	; (adr r3, ddac0 <__ieee754_acos+0x2d8>)
   dd9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9b6:	4606      	mov	r6, r0
   dd9b8:	460f      	mov	r7, r1
   dd9ba:	f004 f9b9 	bl	e1d30 <__aeabi_dmul>
   dd9be:	a342      	add	r3, pc, #264	; (adr r3, ddac8 <__ieee754_acos+0x2e0>)
   dd9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9c4:	f004 f802 	bl	e19cc <__adddf3>
   dd9c8:	4632      	mov	r2, r6
   dd9ca:	463b      	mov	r3, r7
   dd9cc:	f004 f9b0 	bl	e1d30 <__aeabi_dmul>
   dd9d0:	a33f      	add	r3, pc, #252	; (adr r3, ddad0 <__ieee754_acos+0x2e8>)
   dd9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9d6:	f003 fff7 	bl	e19c8 <__aeabi_dsub>
   dd9da:	4632      	mov	r2, r6
   dd9dc:	463b      	mov	r3, r7
   dd9de:	f004 f9a7 	bl	e1d30 <__aeabi_dmul>
   dd9e2:	a33d      	add	r3, pc, #244	; (adr r3, ddad8 <__ieee754_acos+0x2f0>)
   dd9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9e8:	f003 fff0 	bl	e19cc <__adddf3>
   dd9ec:	4632      	mov	r2, r6
   dd9ee:	463b      	mov	r3, r7
   dd9f0:	f004 f99e 	bl	e1d30 <__aeabi_dmul>
   dd9f4:	a33a      	add	r3, pc, #232	; (adr r3, ddae0 <__ieee754_acos+0x2f8>)
   dd9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd9fa:	f003 ffe5 	bl	e19c8 <__aeabi_dsub>
   dd9fe:	4632      	mov	r2, r6
   dda00:	463b      	mov	r3, r7
   dda02:	f004 f995 	bl	e1d30 <__aeabi_dmul>
   dda06:	a338      	add	r3, pc, #224	; (adr r3, ddae8 <__ieee754_acos+0x300>)
   dda08:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda0c:	f003 ffde 	bl	e19cc <__adddf3>
   dda10:	4632      	mov	r2, r6
   dda12:	463b      	mov	r3, r7
   dda14:	f004 f98c 	bl	e1d30 <__aeabi_dmul>
   dda18:	a335      	add	r3, pc, #212	; (adr r3, ddaf0 <__ieee754_acos+0x308>)
   dda1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda1e:	4680      	mov	r8, r0
   dda20:	4689      	mov	r9, r1
   dda22:	4630      	mov	r0, r6
   dda24:	4639      	mov	r1, r7
   dda26:	f004 f983 	bl	e1d30 <__aeabi_dmul>
   dda2a:	a333      	add	r3, pc, #204	; (adr r3, ddaf8 <__ieee754_acos+0x310>)
   dda2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda30:	f003 ffca 	bl	e19c8 <__aeabi_dsub>
   dda34:	4632      	mov	r2, r6
   dda36:	463b      	mov	r3, r7
   dda38:	f004 f97a 	bl	e1d30 <__aeabi_dmul>
   dda3c:	a330      	add	r3, pc, #192	; (adr r3, ddb00 <__ieee754_acos+0x318>)
   dda3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda42:	f003 ffc3 	bl	e19cc <__adddf3>
   dda46:	4632      	mov	r2, r6
   dda48:	463b      	mov	r3, r7
   dda4a:	f004 f971 	bl	e1d30 <__aeabi_dmul>
   dda4e:	a32e      	add	r3, pc, #184	; (adr r3, ddb08 <__ieee754_acos+0x320>)
   dda50:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda54:	f003 ffb8 	bl	e19c8 <__aeabi_dsub>
   dda58:	4632      	mov	r2, r6
   dda5a:	463b      	mov	r3, r7
   dda5c:	f004 f968 	bl	e1d30 <__aeabi_dmul>
   dda60:	2200      	movs	r2, #0
   dda62:	4b33      	ldr	r3, [pc, #204]	; (ddb30 <__ieee754_acos+0x348>)
   dda64:	f003 ffb2 	bl	e19cc <__adddf3>
   dda68:	4602      	mov	r2, r0
   dda6a:	460b      	mov	r3, r1
   dda6c:	4640      	mov	r0, r8
   dda6e:	4649      	mov	r1, r9
   dda70:	f004 fa88 	bl	e1f84 <__aeabi_ddiv>
   dda74:	4622      	mov	r2, r4
   dda76:	462b      	mov	r3, r5
   dda78:	f004 f95a 	bl	e1d30 <__aeabi_dmul>
   dda7c:	4602      	mov	r2, r0
   dda7e:	460b      	mov	r3, r1
   dda80:	a125      	add	r1, pc, #148	; (adr r1, ddb18 <__ieee754_acos+0x330>)
   dda82:	e9d1 0100 	ldrd	r0, r1, [r1]
   dda86:	f003 ff9f 	bl	e19c8 <__aeabi_dsub>
   dda8a:	4602      	mov	r2, r0
   dda8c:	460b      	mov	r3, r1
   dda8e:	4620      	mov	r0, r4
   dda90:	4629      	mov	r1, r5
   dda92:	f003 ff99 	bl	e19c8 <__aeabi_dsub>
   dda96:	4602      	mov	r2, r0
   dda98:	460b      	mov	r3, r1
   dda9a:	a11d      	add	r1, pc, #116	; (adr r1, ddb10 <__ieee754_acos+0x328>)
   dda9c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddaa0:	f003 ff92 	bl	e19c8 <__aeabi_dsub>
   ddaa4:	ec41 0b10 	vmov	d0, r0, r1
   ddaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddaac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; ddb20 <__ieee754_acos+0x338>
   ddab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddab4:	f3af 8000 	nop.w
	...
   ddac0:	0dfdf709 	.word	0x0dfdf709
   ddac4:	3f023de1 	.word	0x3f023de1
   ddac8:	7501b288 	.word	0x7501b288
   ddacc:	3f49efe0 	.word	0x3f49efe0
   ddad0:	b5688f3b 	.word	0xb5688f3b
   ddad4:	3fa48228 	.word	0x3fa48228
   ddad8:	0e884455 	.word	0x0e884455
   ddadc:	3fc9c155 	.word	0x3fc9c155
   ddae0:	03eb6f7d 	.word	0x03eb6f7d
   ddae4:	3fd4d612 	.word	0x3fd4d612
   ddae8:	55555555 	.word	0x55555555
   ddaec:	3fc55555 	.word	0x3fc55555
   ddaf0:	b12e9282 	.word	0xb12e9282
   ddaf4:	3fb3b8c5 	.word	0x3fb3b8c5
   ddaf8:	1b8d0159 	.word	0x1b8d0159
   ddafc:	3fe6066c 	.word	0x3fe6066c
   ddb00:	9c598ac8 	.word	0x9c598ac8
   ddb04:	40002ae5 	.word	0x40002ae5
   ddb08:	1c8a2d4b 	.word	0x1c8a2d4b
   ddb0c:	40033a27 	.word	0x40033a27
   ddb10:	54442d18 	.word	0x54442d18
   ddb14:	3ff921fb 	.word	0x3ff921fb
   ddb18:	33145c07 	.word	0x33145c07
   ddb1c:	3c91a626 	.word	0x3c91a626
   ddb20:	54442d18 	.word	0x54442d18
   ddb24:	400921fb 	.word	0x400921fb
   ddb28:	3fefffff 	.word	0x3fefffff
   ddb2c:	3fdfffff 	.word	0x3fdfffff
   ddb30:	3ff00000 	.word	0x3ff00000
   ddb34:	3fe00000 	.word	0x3fe00000
   ddb38:	3c600000 	.word	0x3c600000
   ddb3c:	ee10 0a10 	vmov	r0, s0
   ddb40:	4629      	mov	r1, r5
   ddb42:	2200      	movs	r2, #0
   ddb44:	4b5e      	ldr	r3, [pc, #376]	; (ddcc0 <__ieee754_acos+0x4d8>)
   ddb46:	f003 ff41 	bl	e19cc <__adddf3>
   ddb4a:	2200      	movs	r2, #0
   ddb4c:	4b5d      	ldr	r3, [pc, #372]	; (ddcc4 <__ieee754_acos+0x4dc>)
   ddb4e:	f004 f8ef 	bl	e1d30 <__aeabi_dmul>
   ddb52:	a343      	add	r3, pc, #268	; (adr r3, ddc60 <__ieee754_acos+0x478>)
   ddb54:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb58:	4604      	mov	r4, r0
   ddb5a:	460d      	mov	r5, r1
   ddb5c:	f004 f8e8 	bl	e1d30 <__aeabi_dmul>
   ddb60:	a341      	add	r3, pc, #260	; (adr r3, ddc68 <__ieee754_acos+0x480>)
   ddb62:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb66:	f003 ff31 	bl	e19cc <__adddf3>
   ddb6a:	4622      	mov	r2, r4
   ddb6c:	462b      	mov	r3, r5
   ddb6e:	f004 f8df 	bl	e1d30 <__aeabi_dmul>
   ddb72:	a33f      	add	r3, pc, #252	; (adr r3, ddc70 <__ieee754_acos+0x488>)
   ddb74:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb78:	f003 ff26 	bl	e19c8 <__aeabi_dsub>
   ddb7c:	4622      	mov	r2, r4
   ddb7e:	462b      	mov	r3, r5
   ddb80:	f004 f8d6 	bl	e1d30 <__aeabi_dmul>
   ddb84:	a33c      	add	r3, pc, #240	; (adr r3, ddc78 <__ieee754_acos+0x490>)
   ddb86:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb8a:	f003 ff1f 	bl	e19cc <__adddf3>
   ddb8e:	4622      	mov	r2, r4
   ddb90:	462b      	mov	r3, r5
   ddb92:	f004 f8cd 	bl	e1d30 <__aeabi_dmul>
   ddb96:	a33a      	add	r3, pc, #232	; (adr r3, ddc80 <__ieee754_acos+0x498>)
   ddb98:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb9c:	f003 ff14 	bl	e19c8 <__aeabi_dsub>
   ddba0:	4622      	mov	r2, r4
   ddba2:	462b      	mov	r3, r5
   ddba4:	f004 f8c4 	bl	e1d30 <__aeabi_dmul>
   ddba8:	a337      	add	r3, pc, #220	; (adr r3, ddc88 <__ieee754_acos+0x4a0>)
   ddbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbae:	f003 ff0d 	bl	e19cc <__adddf3>
   ddbb2:	4622      	mov	r2, r4
   ddbb4:	462b      	mov	r3, r5
   ddbb6:	f004 f8bb 	bl	e1d30 <__aeabi_dmul>
   ddbba:	ec45 4b10 	vmov	d0, r4, r5
   ddbbe:	4680      	mov	r8, r0
   ddbc0:	4689      	mov	r9, r1
   ddbc2:	f002 fa8d 	bl	e00e0 <__ieee754_sqrt>
   ddbc6:	4620      	mov	r0, r4
   ddbc8:	4629      	mov	r1, r5
   ddbca:	a331      	add	r3, pc, #196	; (adr r3, ddc90 <__ieee754_acos+0x4a8>)
   ddbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbd0:	ec57 6b10 	vmov	r6, r7, d0
   ddbd4:	f004 f8ac 	bl	e1d30 <__aeabi_dmul>
   ddbd8:	a32f      	add	r3, pc, #188	; (adr r3, ddc98 <__ieee754_acos+0x4b0>)
   ddbda:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbde:	f003 fef3 	bl	e19c8 <__aeabi_dsub>
   ddbe2:	4622      	mov	r2, r4
   ddbe4:	462b      	mov	r3, r5
   ddbe6:	f004 f8a3 	bl	e1d30 <__aeabi_dmul>
   ddbea:	a32d      	add	r3, pc, #180	; (adr r3, ddca0 <__ieee754_acos+0x4b8>)
   ddbec:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddbf0:	f003 feec 	bl	e19cc <__adddf3>
   ddbf4:	4622      	mov	r2, r4
   ddbf6:	462b      	mov	r3, r5
   ddbf8:	f004 f89a 	bl	e1d30 <__aeabi_dmul>
   ddbfc:	a32a      	add	r3, pc, #168	; (adr r3, ddca8 <__ieee754_acos+0x4c0>)
   ddbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc02:	f003 fee1 	bl	e19c8 <__aeabi_dsub>
   ddc06:	4622      	mov	r2, r4
   ddc08:	462b      	mov	r3, r5
   ddc0a:	f004 f891 	bl	e1d30 <__aeabi_dmul>
   ddc0e:	2200      	movs	r2, #0
   ddc10:	4b2b      	ldr	r3, [pc, #172]	; (ddcc0 <__ieee754_acos+0x4d8>)
   ddc12:	f003 fedb 	bl	e19cc <__adddf3>
   ddc16:	4602      	mov	r2, r0
   ddc18:	460b      	mov	r3, r1
   ddc1a:	4640      	mov	r0, r8
   ddc1c:	4649      	mov	r1, r9
   ddc1e:	f004 f9b1 	bl	e1f84 <__aeabi_ddiv>
   ddc22:	4632      	mov	r2, r6
   ddc24:	463b      	mov	r3, r7
   ddc26:	f004 f883 	bl	e1d30 <__aeabi_dmul>
   ddc2a:	a321      	add	r3, pc, #132	; (adr r3, ddcb0 <__ieee754_acos+0x4c8>)
   ddc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddc30:	f003 feca 	bl	e19c8 <__aeabi_dsub>
   ddc34:	4632      	mov	r2, r6
   ddc36:	463b      	mov	r3, r7
   ddc38:	f003 fec8 	bl	e19cc <__adddf3>
   ddc3c:	4602      	mov	r2, r0
   ddc3e:	460b      	mov	r3, r1
   ddc40:	f003 fec4 	bl	e19cc <__adddf3>
   ddc44:	4602      	mov	r2, r0
   ddc46:	460b      	mov	r3, r1
   ddc48:	a11b      	add	r1, pc, #108	; (adr r1, ddcb8 <__ieee754_acos+0x4d0>)
   ddc4a:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddc4e:	f003 febb 	bl	e19c8 <__aeabi_dsub>
   ddc52:	ec41 0b10 	vmov	d0, r0, r1
   ddc56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddc5a:	bf00      	nop
   ddc5c:	f3af 8000 	nop.w
   ddc60:	0dfdf709 	.word	0x0dfdf709
   ddc64:	3f023de1 	.word	0x3f023de1
   ddc68:	7501b288 	.word	0x7501b288
   ddc6c:	3f49efe0 	.word	0x3f49efe0
   ddc70:	b5688f3b 	.word	0xb5688f3b
   ddc74:	3fa48228 	.word	0x3fa48228
   ddc78:	0e884455 	.word	0x0e884455
   ddc7c:	3fc9c155 	.word	0x3fc9c155
   ddc80:	03eb6f7d 	.word	0x03eb6f7d
   ddc84:	3fd4d612 	.word	0x3fd4d612
   ddc88:	55555555 	.word	0x55555555
   ddc8c:	3fc55555 	.word	0x3fc55555
   ddc90:	b12e9282 	.word	0xb12e9282
   ddc94:	3fb3b8c5 	.word	0x3fb3b8c5
   ddc98:	1b8d0159 	.word	0x1b8d0159
   ddc9c:	3fe6066c 	.word	0x3fe6066c
   ddca0:	9c598ac8 	.word	0x9c598ac8
   ddca4:	40002ae5 	.word	0x40002ae5
   ddca8:	1c8a2d4b 	.word	0x1c8a2d4b
   ddcac:	40033a27 	.word	0x40033a27
   ddcb0:	33145c07 	.word	0x33145c07
   ddcb4:	3c91a626 	.word	0x3c91a626
   ddcb8:	54442d18 	.word	0x54442d18
   ddcbc:	400921fb 	.word	0x400921fb
   ddcc0:	3ff00000 	.word	0x3ff00000
   ddcc4:	3fe00000 	.word	0x3fe00000

000ddcc8 <__ieee754_asin>:
   ddcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddccc:	ec57 6b10 	vmov	r6, r7, d0
   ddcd0:	4bcb      	ldr	r3, [pc, #812]	; (de000 <__ieee754_asin+0x338>)
   ddcd2:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   ddcd6:	429d      	cmp	r5, r3
   ddcd8:	b083      	sub	sp, #12
   ddcda:	dd17      	ble.n	ddd0c <__ieee754_asin+0x44>
   ddcdc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   ddce0:	ee10 3a10 	vmov	r3, s0
   ddce4:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   ddce8:	432b      	orrs	r3, r5
   ddcea:	d02b      	beq.n	ddd44 <__ieee754_asin+0x7c>
   ddcec:	ee10 2a10 	vmov	r2, s0
   ddcf0:	463b      	mov	r3, r7
   ddcf2:	4630      	mov	r0, r6
   ddcf4:	4639      	mov	r1, r7
   ddcf6:	f003 fe67 	bl	e19c8 <__aeabi_dsub>
   ddcfa:	4602      	mov	r2, r0
   ddcfc:	460b      	mov	r3, r1
   ddcfe:	f004 f941 	bl	e1f84 <__aeabi_ddiv>
   ddd02:	ec41 0b10 	vmov	d0, r0, r1
   ddd06:	b003      	add	sp, #12
   ddd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddd0c:	4bbd      	ldr	r3, [pc, #756]	; (de004 <__ieee754_asin+0x33c>)
   ddd0e:	429d      	cmp	r5, r3
   ddd10:	463c      	mov	r4, r7
   ddd12:	dc33      	bgt.n	ddd7c <__ieee754_asin+0xb4>
   ddd14:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   ddd18:	f280 817c 	bge.w	de014 <__ieee754_asin+0x34c>
   ddd1c:	a39c      	add	r3, pc, #624	; (adr r3, ddf90 <__ieee754_asin+0x2c8>)
   ddd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd22:	ee10 0a10 	vmov	r0, s0
   ddd26:	4639      	mov	r1, r7
   ddd28:	f003 fe50 	bl	e19cc <__adddf3>
   ddd2c:	2200      	movs	r2, #0
   ddd2e:	4bb6      	ldr	r3, [pc, #728]	; (de008 <__ieee754_asin+0x340>)
   ddd30:	f004 fa8e 	bl	e2250 <__aeabi_dcmpgt>
   ddd34:	b310      	cbz	r0, ddd7c <__ieee754_asin+0xb4>
   ddd36:	4630      	mov	r0, r6
   ddd38:	4639      	mov	r1, r7
   ddd3a:	ec41 0b10 	vmov	d0, r0, r1
   ddd3e:	b003      	add	sp, #12
   ddd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddd44:	ee10 0a10 	vmov	r0, s0
   ddd48:	a393      	add	r3, pc, #588	; (adr r3, ddf98 <__ieee754_asin+0x2d0>)
   ddd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd4e:	4639      	mov	r1, r7
   ddd50:	f003 ffee 	bl	e1d30 <__aeabi_dmul>
   ddd54:	a392      	add	r3, pc, #584	; (adr r3, ddfa0 <__ieee754_asin+0x2d8>)
   ddd56:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd5a:	4604      	mov	r4, r0
   ddd5c:	460d      	mov	r5, r1
   ddd5e:	4630      	mov	r0, r6
   ddd60:	4639      	mov	r1, r7
   ddd62:	f003 ffe5 	bl	e1d30 <__aeabi_dmul>
   ddd66:	4602      	mov	r2, r0
   ddd68:	460b      	mov	r3, r1
   ddd6a:	4620      	mov	r0, r4
   ddd6c:	4629      	mov	r1, r5
   ddd6e:	f003 fe2d 	bl	e19cc <__adddf3>
   ddd72:	ec41 0b10 	vmov	d0, r0, r1
   ddd76:	b003      	add	sp, #12
   ddd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddd7c:	ec47 6b10 	vmov	d0, r6, r7
   ddd80:	f7fe fdce 	bl	dc920 <fabs>
   ddd84:	2000      	movs	r0, #0
   ddd86:	ec53 2b10 	vmov	r2, r3, d0
   ddd8a:	499f      	ldr	r1, [pc, #636]	; (de008 <__ieee754_asin+0x340>)
   ddd8c:	f003 fe1c 	bl	e19c8 <__aeabi_dsub>
   ddd90:	2200      	movs	r2, #0
   ddd92:	4b9e      	ldr	r3, [pc, #632]	; (de00c <__ieee754_asin+0x344>)
   ddd94:	f003 ffcc 	bl	e1d30 <__aeabi_dmul>
   ddd98:	a383      	add	r3, pc, #524	; (adr r3, ddfa8 <__ieee754_asin+0x2e0>)
   ddd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd9e:	4606      	mov	r6, r0
   ddda0:	460f      	mov	r7, r1
   ddda2:	f003 ffc5 	bl	e1d30 <__aeabi_dmul>
   ddda6:	a382      	add	r3, pc, #520	; (adr r3, ddfb0 <__ieee754_asin+0x2e8>)
   ddda8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddac:	f003 fe0e 	bl	e19cc <__adddf3>
   dddb0:	4632      	mov	r2, r6
   dddb2:	463b      	mov	r3, r7
   dddb4:	f003 ffbc 	bl	e1d30 <__aeabi_dmul>
   dddb8:	a37f      	add	r3, pc, #508	; (adr r3, ddfb8 <__ieee754_asin+0x2f0>)
   dddba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddbe:	f003 fe03 	bl	e19c8 <__aeabi_dsub>
   dddc2:	4632      	mov	r2, r6
   dddc4:	463b      	mov	r3, r7
   dddc6:	f003 ffb3 	bl	e1d30 <__aeabi_dmul>
   dddca:	a37d      	add	r3, pc, #500	; (adr r3, ddfc0 <__ieee754_asin+0x2f8>)
   dddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddd0:	f003 fdfc 	bl	e19cc <__adddf3>
   dddd4:	4632      	mov	r2, r6
   dddd6:	463b      	mov	r3, r7
   dddd8:	f003 ffaa 	bl	e1d30 <__aeabi_dmul>
   ddddc:	a37a      	add	r3, pc, #488	; (adr r3, ddfc8 <__ieee754_asin+0x300>)
   dddde:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddde2:	f003 fdf1 	bl	e19c8 <__aeabi_dsub>
   ddde6:	4632      	mov	r2, r6
   ddde8:	463b      	mov	r3, r7
   dddea:	f003 ffa1 	bl	e1d30 <__aeabi_dmul>
   dddee:	a378      	add	r3, pc, #480	; (adr r3, ddfd0 <__ieee754_asin+0x308>)
   dddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddf4:	f003 fdea 	bl	e19cc <__adddf3>
   dddf8:	4632      	mov	r2, r6
   dddfa:	463b      	mov	r3, r7
   dddfc:	f003 ff98 	bl	e1d30 <__aeabi_dmul>
   dde00:	a375      	add	r3, pc, #468	; (adr r3, ddfd8 <__ieee754_asin+0x310>)
   dde02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde06:	4680      	mov	r8, r0
   dde08:	4689      	mov	r9, r1
   dde0a:	4630      	mov	r0, r6
   dde0c:	4639      	mov	r1, r7
   dde0e:	f003 ff8f 	bl	e1d30 <__aeabi_dmul>
   dde12:	a373      	add	r3, pc, #460	; (adr r3, ddfe0 <__ieee754_asin+0x318>)
   dde14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde18:	f003 fdd6 	bl	e19c8 <__aeabi_dsub>
   dde1c:	4632      	mov	r2, r6
   dde1e:	463b      	mov	r3, r7
   dde20:	f003 ff86 	bl	e1d30 <__aeabi_dmul>
   dde24:	a370      	add	r3, pc, #448	; (adr r3, ddfe8 <__ieee754_asin+0x320>)
   dde26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde2a:	f003 fdcf 	bl	e19cc <__adddf3>
   dde2e:	4632      	mov	r2, r6
   dde30:	463b      	mov	r3, r7
   dde32:	f003 ff7d 	bl	e1d30 <__aeabi_dmul>
   dde36:	a36e      	add	r3, pc, #440	; (adr r3, ddff0 <__ieee754_asin+0x328>)
   dde38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dde3c:	f003 fdc4 	bl	e19c8 <__aeabi_dsub>
   dde40:	4632      	mov	r2, r6
   dde42:	463b      	mov	r3, r7
   dde44:	f003 ff74 	bl	e1d30 <__aeabi_dmul>
   dde48:	4b6f      	ldr	r3, [pc, #444]	; (de008 <__ieee754_asin+0x340>)
   dde4a:	2200      	movs	r2, #0
   dde4c:	f003 fdbe 	bl	e19cc <__adddf3>
   dde50:	ec47 6b10 	vmov	d0, r6, r7
   dde54:	e9cd 0100 	strd	r0, r1, [sp]
   dde58:	f002 f942 	bl	e00e0 <__ieee754_sqrt>
   dde5c:	4b6c      	ldr	r3, [pc, #432]	; (de010 <__ieee754_asin+0x348>)
   dde5e:	429d      	cmp	r5, r3
   dde60:	ec5b ab10 	vmov	sl, fp, d0
   dde64:	e9dd 0100 	ldrd	r0, r1, [sp]
   dde68:	dc6e      	bgt.n	ddf48 <__ieee754_asin+0x280>
   dde6a:	4602      	mov	r2, r0
   dde6c:	460b      	mov	r3, r1
   dde6e:	4640      	mov	r0, r8
   dde70:	4649      	mov	r1, r9
   dde72:	2500      	movs	r5, #0
   dde74:	e9cd ab00 	strd	sl, fp, [sp]
   dde78:	9500      	str	r5, [sp, #0]
   dde7a:	f004 f883 	bl	e1f84 <__aeabi_ddiv>
   dde7e:	e9dd 8900 	ldrd	r8, r9, [sp]
   dde82:	4652      	mov	r2, sl
   dde84:	e9cd 0100 	strd	r0, r1, [sp]
   dde88:	465b      	mov	r3, fp
   dde8a:	4650      	mov	r0, sl
   dde8c:	4659      	mov	r1, fp
   dde8e:	f003 fd9d 	bl	e19cc <__adddf3>
   dde92:	4602      	mov	r2, r0
   dde94:	460b      	mov	r3, r1
   dde96:	e9dd 0100 	ldrd	r0, r1, [sp]
   dde9a:	f003 ff49 	bl	e1d30 <__aeabi_dmul>
   dde9e:	4642      	mov	r2, r8
   ddea0:	e9cd 0100 	strd	r0, r1, [sp]
   ddea4:	464b      	mov	r3, r9
   ddea6:	4640      	mov	r0, r8
   ddea8:	4649      	mov	r1, r9
   ddeaa:	f003 ff41 	bl	e1d30 <__aeabi_dmul>
   ddeae:	4602      	mov	r2, r0
   ddeb0:	460b      	mov	r3, r1
   ddeb2:	4630      	mov	r0, r6
   ddeb4:	4639      	mov	r1, r7
   ddeb6:	f003 fd87 	bl	e19c8 <__aeabi_dsub>
   ddeba:	4642      	mov	r2, r8
   ddebc:	4606      	mov	r6, r0
   ddebe:	460f      	mov	r7, r1
   ddec0:	464b      	mov	r3, r9
   ddec2:	4650      	mov	r0, sl
   ddec4:	4659      	mov	r1, fp
   ddec6:	f003 fd81 	bl	e19cc <__adddf3>
   ddeca:	4602      	mov	r2, r0
   ddecc:	460b      	mov	r3, r1
   ddece:	4630      	mov	r0, r6
   dded0:	4639      	mov	r1, r7
   dded2:	f004 f857 	bl	e1f84 <__aeabi_ddiv>
   dded6:	4602      	mov	r2, r0
   dded8:	460b      	mov	r3, r1
   ddeda:	f003 fd77 	bl	e19cc <__adddf3>
   ddede:	4602      	mov	r2, r0
   ddee0:	460b      	mov	r3, r1
   ddee2:	a12f      	add	r1, pc, #188	; (adr r1, ddfa0 <__ieee754_asin+0x2d8>)
   ddee4:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddee8:	f003 fd6e 	bl	e19c8 <__aeabi_dsub>
   ddeec:	4602      	mov	r2, r0
   ddeee:	460b      	mov	r3, r1
   ddef0:	e9dd 0100 	ldrd	r0, r1, [sp]
   ddef4:	f003 fd68 	bl	e19c8 <__aeabi_dsub>
   ddef8:	4642      	mov	r2, r8
   ddefa:	4606      	mov	r6, r0
   ddefc:	460f      	mov	r7, r1
   ddefe:	464b      	mov	r3, r9
   ddf00:	4640      	mov	r0, r8
   ddf02:	4649      	mov	r1, r9
   ddf04:	f003 fd62 	bl	e19cc <__adddf3>
   ddf08:	4602      	mov	r2, r0
   ddf0a:	460b      	mov	r3, r1
   ddf0c:	a13a      	add	r1, pc, #232	; (adr r1, ddff8 <__ieee754_asin+0x330>)
   ddf0e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddf12:	f003 fd59 	bl	e19c8 <__aeabi_dsub>
   ddf16:	4602      	mov	r2, r0
   ddf18:	460b      	mov	r3, r1
   ddf1a:	4630      	mov	r0, r6
   ddf1c:	4639      	mov	r1, r7
   ddf1e:	f003 fd53 	bl	e19c8 <__aeabi_dsub>
   ddf22:	4602      	mov	r2, r0
   ddf24:	460b      	mov	r3, r1
   ddf26:	a134      	add	r1, pc, #208	; (adr r1, ddff8 <__ieee754_asin+0x330>)
   ddf28:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddf2c:	f003 fd4c 	bl	e19c8 <__aeabi_dsub>
   ddf30:	4602      	mov	r2, r0
   ddf32:	460b      	mov	r3, r1
   ddf34:	2c00      	cmp	r4, #0
   ddf36:	f340 80e4 	ble.w	de102 <__ieee754_asin+0x43a>
   ddf3a:	4610      	mov	r0, r2
   ddf3c:	4619      	mov	r1, r3
   ddf3e:	ec41 0b10 	vmov	d0, r0, r1
   ddf42:	b003      	add	sp, #12
   ddf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddf48:	4602      	mov	r2, r0
   ddf4a:	460b      	mov	r3, r1
   ddf4c:	4640      	mov	r0, r8
   ddf4e:	4649      	mov	r1, r9
   ddf50:	f004 f818 	bl	e1f84 <__aeabi_ddiv>
   ddf54:	4652      	mov	r2, sl
   ddf56:	465b      	mov	r3, fp
   ddf58:	f003 feea 	bl	e1d30 <__aeabi_dmul>
   ddf5c:	4652      	mov	r2, sl
   ddf5e:	465b      	mov	r3, fp
   ddf60:	f003 fd34 	bl	e19cc <__adddf3>
   ddf64:	4602      	mov	r2, r0
   ddf66:	460b      	mov	r3, r1
   ddf68:	f003 fd30 	bl	e19cc <__adddf3>
   ddf6c:	a30c      	add	r3, pc, #48	; (adr r3, ddfa0 <__ieee754_asin+0x2d8>)
   ddf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddf72:	f003 fd29 	bl	e19c8 <__aeabi_dsub>
   ddf76:	4602      	mov	r2, r0
   ddf78:	460b      	mov	r3, r1
   ddf7a:	a107      	add	r1, pc, #28	; (adr r1, ddf98 <__ieee754_asin+0x2d0>)
   ddf7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ddf80:	f003 fd22 	bl	e19c8 <__aeabi_dsub>
   ddf84:	4602      	mov	r2, r0
   ddf86:	460b      	mov	r3, r1
   ddf88:	e7d4      	b.n	ddf34 <__ieee754_asin+0x26c>
   ddf8a:	bf00      	nop
   ddf8c:	f3af 8000 	nop.w
   ddf90:	8800759c 	.word	0x8800759c
   ddf94:	7e37e43c 	.word	0x7e37e43c
   ddf98:	54442d18 	.word	0x54442d18
   ddf9c:	3ff921fb 	.word	0x3ff921fb
   ddfa0:	33145c07 	.word	0x33145c07
   ddfa4:	3c91a626 	.word	0x3c91a626
   ddfa8:	0dfdf709 	.word	0x0dfdf709
   ddfac:	3f023de1 	.word	0x3f023de1
   ddfb0:	7501b288 	.word	0x7501b288
   ddfb4:	3f49efe0 	.word	0x3f49efe0
   ddfb8:	b5688f3b 	.word	0xb5688f3b
   ddfbc:	3fa48228 	.word	0x3fa48228
   ddfc0:	0e884455 	.word	0x0e884455
   ddfc4:	3fc9c155 	.word	0x3fc9c155
   ddfc8:	03eb6f7d 	.word	0x03eb6f7d
   ddfcc:	3fd4d612 	.word	0x3fd4d612
   ddfd0:	55555555 	.word	0x55555555
   ddfd4:	3fc55555 	.word	0x3fc55555
   ddfd8:	b12e9282 	.word	0xb12e9282
   ddfdc:	3fb3b8c5 	.word	0x3fb3b8c5
   ddfe0:	1b8d0159 	.word	0x1b8d0159
   ddfe4:	3fe6066c 	.word	0x3fe6066c
   ddfe8:	9c598ac8 	.word	0x9c598ac8
   ddfec:	40002ae5 	.word	0x40002ae5
   ddff0:	1c8a2d4b 	.word	0x1c8a2d4b
   ddff4:	40033a27 	.word	0x40033a27
   ddff8:	54442d18 	.word	0x54442d18
   ddffc:	3fe921fb 	.word	0x3fe921fb
   de000:	3fefffff 	.word	0x3fefffff
   de004:	3fdfffff 	.word	0x3fdfffff
   de008:	3ff00000 	.word	0x3ff00000
   de00c:	3fe00000 	.word	0x3fe00000
   de010:	3fef3332 	.word	0x3fef3332
   de014:	ee10 2a10 	vmov	r2, s0
   de018:	ee10 0a10 	vmov	r0, s0
   de01c:	463b      	mov	r3, r7
   de01e:	4639      	mov	r1, r7
   de020:	f003 fe86 	bl	e1d30 <__aeabi_dmul>
   de024:	a33b      	add	r3, pc, #236	; (adr r3, de114 <__ieee754_asin+0x44c>)
   de026:	e9d3 2300 	ldrd	r2, r3, [r3]
   de02a:	4604      	mov	r4, r0
   de02c:	460d      	mov	r5, r1
   de02e:	f003 fe7f 	bl	e1d30 <__aeabi_dmul>
   de032:	a33a      	add	r3, pc, #232	; (adr r3, de11c <__ieee754_asin+0x454>)
   de034:	e9d3 2300 	ldrd	r2, r3, [r3]
   de038:	f003 fcc8 	bl	e19cc <__adddf3>
   de03c:	4622      	mov	r2, r4
   de03e:	462b      	mov	r3, r5
   de040:	f003 fe76 	bl	e1d30 <__aeabi_dmul>
   de044:	a337      	add	r3, pc, #220	; (adr r3, de124 <__ieee754_asin+0x45c>)
   de046:	e9d3 2300 	ldrd	r2, r3, [r3]
   de04a:	f003 fcbd 	bl	e19c8 <__aeabi_dsub>
   de04e:	4622      	mov	r2, r4
   de050:	462b      	mov	r3, r5
   de052:	f003 fe6d 	bl	e1d30 <__aeabi_dmul>
   de056:	a335      	add	r3, pc, #212	; (adr r3, de12c <__ieee754_asin+0x464>)
   de058:	e9d3 2300 	ldrd	r2, r3, [r3]
   de05c:	f003 fcb6 	bl	e19cc <__adddf3>
   de060:	4622      	mov	r2, r4
   de062:	462b      	mov	r3, r5
   de064:	f003 fe64 	bl	e1d30 <__aeabi_dmul>
   de068:	a332      	add	r3, pc, #200	; (adr r3, de134 <__ieee754_asin+0x46c>)
   de06a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de06e:	f003 fcab 	bl	e19c8 <__aeabi_dsub>
   de072:	4622      	mov	r2, r4
   de074:	462b      	mov	r3, r5
   de076:	f003 fe5b 	bl	e1d30 <__aeabi_dmul>
   de07a:	a330      	add	r3, pc, #192	; (adr r3, de13c <__ieee754_asin+0x474>)
   de07c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de080:	f003 fca4 	bl	e19cc <__adddf3>
   de084:	4622      	mov	r2, r4
   de086:	462b      	mov	r3, r5
   de088:	f003 fe52 	bl	e1d30 <__aeabi_dmul>
   de08c:	a32d      	add	r3, pc, #180	; (adr r3, de144 <__ieee754_asin+0x47c>)
   de08e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de092:	4680      	mov	r8, r0
   de094:	4689      	mov	r9, r1
   de096:	4620      	mov	r0, r4
   de098:	4629      	mov	r1, r5
   de09a:	f003 fe49 	bl	e1d30 <__aeabi_dmul>
   de09e:	a32b      	add	r3, pc, #172	; (adr r3, de14c <__ieee754_asin+0x484>)
   de0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0a4:	f003 fc90 	bl	e19c8 <__aeabi_dsub>
   de0a8:	4622      	mov	r2, r4
   de0aa:	462b      	mov	r3, r5
   de0ac:	f003 fe40 	bl	e1d30 <__aeabi_dmul>
   de0b0:	a328      	add	r3, pc, #160	; (adr r3, de154 <__ieee754_asin+0x48c>)
   de0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0b6:	f003 fc89 	bl	e19cc <__adddf3>
   de0ba:	4622      	mov	r2, r4
   de0bc:	462b      	mov	r3, r5
   de0be:	f003 fe37 	bl	e1d30 <__aeabi_dmul>
   de0c2:	a326      	add	r3, pc, #152	; (adr r3, de15c <__ieee754_asin+0x494>)
   de0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   de0c8:	f003 fc7e 	bl	e19c8 <__aeabi_dsub>
   de0cc:	4622      	mov	r2, r4
   de0ce:	462b      	mov	r3, r5
   de0d0:	f003 fe2e 	bl	e1d30 <__aeabi_dmul>
   de0d4:	2200      	movs	r2, #0
   de0d6:	4b0e      	ldr	r3, [pc, #56]	; (de110 <__ieee754_asin+0x448>)
   de0d8:	f003 fc78 	bl	e19cc <__adddf3>
   de0dc:	4602      	mov	r2, r0
   de0de:	460b      	mov	r3, r1
   de0e0:	4640      	mov	r0, r8
   de0e2:	4649      	mov	r1, r9
   de0e4:	f003 ff4e 	bl	e1f84 <__aeabi_ddiv>
   de0e8:	4632      	mov	r2, r6
   de0ea:	463b      	mov	r3, r7
   de0ec:	f003 fe20 	bl	e1d30 <__aeabi_dmul>
   de0f0:	4632      	mov	r2, r6
   de0f2:	463b      	mov	r3, r7
   de0f4:	f003 fc6a 	bl	e19cc <__adddf3>
   de0f8:	ec41 0b10 	vmov	d0, r0, r1
   de0fc:	b003      	add	sp, #12
   de0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de102:	4610      	mov	r0, r2
   de104:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   de108:	e5fb      	b.n	ddd02 <__ieee754_asin+0x3a>
   de10a:	bf00      	nop
   de10c:	f3af 8000 	nop.w
   de110:	3ff00000 	.word	0x3ff00000
   de114:	0dfdf709 	.word	0x0dfdf709
   de118:	3f023de1 	.word	0x3f023de1
   de11c:	7501b288 	.word	0x7501b288
   de120:	3f49efe0 	.word	0x3f49efe0
   de124:	b5688f3b 	.word	0xb5688f3b
   de128:	3fa48228 	.word	0x3fa48228
   de12c:	0e884455 	.word	0x0e884455
   de130:	3fc9c155 	.word	0x3fc9c155
   de134:	03eb6f7d 	.word	0x03eb6f7d
   de138:	3fd4d612 	.word	0x3fd4d612
   de13c:	55555555 	.word	0x55555555
   de140:	3fc55555 	.word	0x3fc55555
   de144:	b12e9282 	.word	0xb12e9282
   de148:	3fb3b8c5 	.word	0x3fb3b8c5
   de14c:	1b8d0159 	.word	0x1b8d0159
   de150:	3fe6066c 	.word	0x3fe6066c
   de154:	9c598ac8 	.word	0x9c598ac8
   de158:	40002ae5 	.word	0x40002ae5
   de15c:	1c8a2d4b 	.word	0x1c8a2d4b
   de160:	40033a27 	.word	0x40033a27
   de164:	00000000 	.word	0x00000000

000de168 <__ieee754_atan2>:
   de168:	ec51 0b11 	vmov	r0, r1, d1
   de16c:	4243      	negs	r3, r0
   de16e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de172:	4303      	orrs	r3, r0
   de174:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   de178:	4f75      	ldr	r7, [pc, #468]	; (de350 <__ieee754_atan2+0x1e8>)
   de17a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   de17e:	42bb      	cmp	r3, r7
   de180:	ec55 4b10 	vmov	r4, r5, d0
   de184:	d849      	bhi.n	de21a <__ieee754_atan2+0xb2>
   de186:	4263      	negs	r3, r4
   de188:	4323      	orrs	r3, r4
   de18a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   de18e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   de192:	42bb      	cmp	r3, r7
   de194:	46a9      	mov	r9, r5
   de196:	d840      	bhi.n	de21a <__ieee754_atan2+0xb2>
   de198:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   de19c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   de1a0:	4303      	orrs	r3, r0
   de1a2:	468e      	mov	lr, r1
   de1a4:	d050      	beq.n	de248 <__ieee754_atan2+0xe0>
   de1a6:	178e      	asrs	r6, r1, #30
   de1a8:	f006 0602 	and.w	r6, r6, #2
   de1ac:	ea54 030a 	orrs.w	r3, r4, sl
   de1b0:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   de1b4:	d039      	beq.n	de22a <__ieee754_atan2+0xc2>
   de1b6:	ea50 0308 	orrs.w	r3, r0, r8
   de1ba:	d03e      	beq.n	de23a <__ieee754_atan2+0xd2>
   de1bc:	45b8      	cmp	r8, r7
   de1be:	d055      	beq.n	de26c <__ieee754_atan2+0x104>
   de1c0:	45ba      	cmp	sl, r7
   de1c2:	d03a      	beq.n	de23a <__ieee754_atan2+0xd2>
   de1c4:	ebc8 080a 	rsb	r8, r8, sl
   de1c8:	ea4f 5828 	mov.w	r8, r8, asr #20
   de1cc:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   de1d0:	dc40      	bgt.n	de254 <__ieee754_atan2+0xec>
   de1d2:	2900      	cmp	r1, #0
   de1d4:	db70      	blt.n	de2b8 <__ieee754_atan2+0x150>
   de1d6:	4602      	mov	r2, r0
   de1d8:	460b      	mov	r3, r1
   de1da:	4620      	mov	r0, r4
   de1dc:	4629      	mov	r1, r5
   de1de:	f003 fed1 	bl	e1f84 <__aeabi_ddiv>
   de1e2:	ec41 0b10 	vmov	d0, r0, r1
   de1e6:	f7fe fb9b 	bl	dc920 <fabs>
   de1ea:	f7fe f8ed 	bl	dc3c8 <atan>
   de1ee:	ec51 0b10 	vmov	r0, r1, d0
   de1f2:	2e01      	cmp	r6, #1
   de1f4:	d05a      	beq.n	de2ac <__ieee754_atan2+0x144>
   de1f6:	2e02      	cmp	r6, #2
   de1f8:	d048      	beq.n	de28c <__ieee754_atan2+0x124>
   de1fa:	2e00      	cmp	r6, #0
   de1fc:	d042      	beq.n	de284 <__ieee754_atan2+0x11c>
   de1fe:	a33e      	add	r3, pc, #248	; (adr r3, de2f8 <__ieee754_atan2+0x190>)
   de200:	e9d3 2300 	ldrd	r2, r3, [r3]
   de204:	f003 fbe0 	bl	e19c8 <__aeabi_dsub>
   de208:	a33d      	add	r3, pc, #244	; (adr r3, de300 <__ieee754_atan2+0x198>)
   de20a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de20e:	f003 fbdb 	bl	e19c8 <__aeabi_dsub>
   de212:	ec41 0b10 	vmov	d0, r0, r1
   de216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de21a:	4622      	mov	r2, r4
   de21c:	462b      	mov	r3, r5
   de21e:	f003 fbd5 	bl	e19cc <__adddf3>
   de222:	ec41 0b10 	vmov	d0, r0, r1
   de226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de22a:	2e02      	cmp	r6, #2
   de22c:	d016      	beq.n	de25c <__ieee754_atan2+0xf4>
   de22e:	2e03      	cmp	r6, #3
   de230:	d10e      	bne.n	de250 <__ieee754_atan2+0xe8>
   de232:	ed9f 0b35 	vldr	d0, [pc, #212]	; de308 <__ieee754_atan2+0x1a0>
   de236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de23a:	f1b9 0f00 	cmp.w	r9, #0
   de23e:	db11      	blt.n	de264 <__ieee754_atan2+0xfc>
   de240:	ed9f 0b33 	vldr	d0, [pc, #204]	; de310 <__ieee754_atan2+0x1a8>
   de244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de248:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de24c:	f7fe b8bc 	b.w	dc3c8 <atan>
   de250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de254:	a12e      	add	r1, pc, #184	; (adr r1, de310 <__ieee754_atan2+0x1a8>)
   de256:	e9d1 0100 	ldrd	r0, r1, [r1]
   de25a:	e7ca      	b.n	de1f2 <__ieee754_atan2+0x8a>
   de25c:	ed9f 0b28 	vldr	d0, [pc, #160]	; de300 <__ieee754_atan2+0x198>
   de260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de264:	ed9f 0b2c 	vldr	d0, [pc, #176]	; de318 <__ieee754_atan2+0x1b0>
   de268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de26c:	45c2      	cmp	sl, r8
   de26e:	d029      	beq.n	de2c4 <__ieee754_atan2+0x15c>
   de270:	2e02      	cmp	r6, #2
   de272:	d0f3      	beq.n	de25c <__ieee754_atan2+0xf4>
   de274:	2e03      	cmp	r6, #3
   de276:	d0dc      	beq.n	de232 <__ieee754_atan2+0xca>
   de278:	2e01      	cmp	r6, #1
   de27a:	d02d      	beq.n	de2d8 <__ieee754_atan2+0x170>
   de27c:	ed9f 0b28 	vldr	d0, [pc, #160]	; de320 <__ieee754_atan2+0x1b8>
   de280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de284:	ec41 0b10 	vmov	d0, r0, r1
   de288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de28c:	a31a      	add	r3, pc, #104	; (adr r3, de2f8 <__ieee754_atan2+0x190>)
   de28e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de292:	f003 fb99 	bl	e19c8 <__aeabi_dsub>
   de296:	4602      	mov	r2, r0
   de298:	460b      	mov	r3, r1
   de29a:	a119      	add	r1, pc, #100	; (adr r1, de300 <__ieee754_atan2+0x198>)
   de29c:	e9d1 0100 	ldrd	r0, r1, [r1]
   de2a0:	f003 fb92 	bl	e19c8 <__aeabi_dsub>
   de2a4:	ec41 0b10 	vmov	d0, r0, r1
   de2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2ac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   de2b0:	ec41 0b10 	vmov	d0, r0, r1
   de2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2b8:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   de2bc:	da8b      	bge.n	de1d6 <__ieee754_atan2+0x6e>
   de2be:	2000      	movs	r0, #0
   de2c0:	2100      	movs	r1, #0
   de2c2:	e796      	b.n	de1f2 <__ieee754_atan2+0x8a>
   de2c4:	2e02      	cmp	r6, #2
   de2c6:	d013      	beq.n	de2f0 <__ieee754_atan2+0x188>
   de2c8:	2e03      	cmp	r6, #3
   de2ca:	d00d      	beq.n	de2e8 <__ieee754_atan2+0x180>
   de2cc:	2e01      	cmp	r6, #1
   de2ce:	d007      	beq.n	de2e0 <__ieee754_atan2+0x178>
   de2d0:	ed9f 0b15 	vldr	d0, [pc, #84]	; de328 <__ieee754_atan2+0x1c0>
   de2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2d8:	ed9f 0b15 	vldr	d0, [pc, #84]	; de330 <__ieee754_atan2+0x1c8>
   de2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2e0:	ed9f 0b15 	vldr	d0, [pc, #84]	; de338 <__ieee754_atan2+0x1d0>
   de2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2e8:	ed9f 0b15 	vldr	d0, [pc, #84]	; de340 <__ieee754_atan2+0x1d8>
   de2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2f0:	ed9f 0b15 	vldr	d0, [pc, #84]	; de348 <__ieee754_atan2+0x1e0>
   de2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2f8:	33145c07 	.word	0x33145c07
   de2fc:	3ca1a626 	.word	0x3ca1a626
   de300:	54442d18 	.word	0x54442d18
   de304:	400921fb 	.word	0x400921fb
   de308:	54442d18 	.word	0x54442d18
   de30c:	c00921fb 	.word	0xc00921fb
   de310:	54442d18 	.word	0x54442d18
   de314:	3ff921fb 	.word	0x3ff921fb
   de318:	54442d18 	.word	0x54442d18
   de31c:	bff921fb 	.word	0xbff921fb
	...
   de328:	54442d18 	.word	0x54442d18
   de32c:	3fe921fb 	.word	0x3fe921fb
   de330:	00000000 	.word	0x00000000
   de334:	80000000 	.word	0x80000000
   de338:	54442d18 	.word	0x54442d18
   de33c:	bfe921fb 	.word	0xbfe921fb
   de340:	7f3321d2 	.word	0x7f3321d2
   de344:	c002d97c 	.word	0xc002d97c
   de348:	7f3321d2 	.word	0x7f3321d2
   de34c:	4002d97c 	.word	0x4002d97c
   de350:	7ff00000 	.word	0x7ff00000
   de354:	00000000 	.word	0x00000000

000de358 <__ieee754_cosh>:
   de358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de35c:	ec53 2b10 	vmov	r2, r3, d0
   de360:	4953      	ldr	r1, [pc, #332]	; (de4b0 <__ieee754_cosh+0x158>)
   de362:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   de366:	428c      	cmp	r4, r1
   de368:	dc12      	bgt.n	de390 <__ieee754_cosh+0x38>
   de36a:	4952      	ldr	r1, [pc, #328]	; (de4b4 <__ieee754_cosh+0x15c>)
   de36c:	428c      	cmp	r4, r1
   de36e:	dd17      	ble.n	de3a0 <__ieee754_cosh+0x48>
   de370:	4951      	ldr	r1, [pc, #324]	; (de4b8 <__ieee754_cosh+0x160>)
   de372:	428c      	cmp	r4, r1
   de374:	dd64      	ble.n	de440 <__ieee754_cosh+0xe8>
   de376:	4951      	ldr	r1, [pc, #324]	; (de4bc <__ieee754_cosh+0x164>)
   de378:	428c      	cmp	r4, r1
   de37a:	f340 8084 	ble.w	de486 <__ieee754_cosh+0x12e>
   de37e:	4950      	ldr	r1, [pc, #320]	; (de4c0 <__ieee754_cosh+0x168>)
   de380:	428c      	cmp	r4, r1
   de382:	dd3e      	ble.n	de402 <__ieee754_cosh+0xaa>
   de384:	3101      	adds	r1, #1
   de386:	428c      	cmp	r4, r1
   de388:	d038      	beq.n	de3fc <__ieee754_cosh+0xa4>
   de38a:	a347      	add	r3, pc, #284	; (adr r3, de4a8 <__ieee754_cosh+0x150>)
   de38c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de390:	4610      	mov	r0, r2
   de392:	4619      	mov	r1, r3
   de394:	f003 fccc 	bl	e1d30 <__aeabi_dmul>
   de398:	ec41 0b10 	vmov	d0, r0, r1
   de39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de3a0:	f7fe fabe 	bl	dc920 <fabs>
   de3a4:	f002 ff70 	bl	e1288 <expm1>
   de3a8:	ec59 8b10 	vmov	r8, r9, d0
   de3ac:	2200      	movs	r2, #0
   de3ae:	4b45      	ldr	r3, [pc, #276]	; (de4c4 <__ieee754_cosh+0x16c>)
   de3b0:	ee10 0a10 	vmov	r0, s0
   de3b4:	4649      	mov	r1, r9
   de3b6:	f003 fb09 	bl	e19cc <__adddf3>
   de3ba:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   de3be:	4606      	mov	r6, r0
   de3c0:	460f      	mov	r7, r1
   de3c2:	db5c      	blt.n	de47e <__ieee754_cosh+0x126>
   de3c4:	4642      	mov	r2, r8
   de3c6:	464b      	mov	r3, r9
   de3c8:	4640      	mov	r0, r8
   de3ca:	4649      	mov	r1, r9
   de3cc:	f003 fcb0 	bl	e1d30 <__aeabi_dmul>
   de3d0:	4632      	mov	r2, r6
   de3d2:	4604      	mov	r4, r0
   de3d4:	460d      	mov	r5, r1
   de3d6:	463b      	mov	r3, r7
   de3d8:	4630      	mov	r0, r6
   de3da:	4639      	mov	r1, r7
   de3dc:	f003 faf6 	bl	e19cc <__adddf3>
   de3e0:	4602      	mov	r2, r0
   de3e2:	460b      	mov	r3, r1
   de3e4:	4620      	mov	r0, r4
   de3e6:	4629      	mov	r1, r5
   de3e8:	f003 fdcc 	bl	e1f84 <__aeabi_ddiv>
   de3ec:	2200      	movs	r2, #0
   de3ee:	4b35      	ldr	r3, [pc, #212]	; (de4c4 <__ieee754_cosh+0x16c>)
   de3f0:	f003 faec 	bl	e19cc <__adddf3>
   de3f4:	ec41 0b10 	vmov	d0, r0, r1
   de3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de3fc:	4932      	ldr	r1, [pc, #200]	; (de4c8 <__ieee754_cosh+0x170>)
   de3fe:	428a      	cmp	r2, r1
   de400:	d8c3      	bhi.n	de38a <__ieee754_cosh+0x32>
   de402:	ec43 2b10 	vmov	d0, r2, r3
   de406:	f7fe fa8b 	bl	dc920 <fabs>
   de40a:	2200      	movs	r2, #0
   de40c:	4b2f      	ldr	r3, [pc, #188]	; (de4cc <__ieee754_cosh+0x174>)
   de40e:	ec51 0b10 	vmov	r0, r1, d0
   de412:	f003 fc8d 	bl	e1d30 <__aeabi_dmul>
   de416:	ec41 0b10 	vmov	d0, r0, r1
   de41a:	f000 f859 	bl	de4d0 <__ieee754_exp>
   de41e:	ec55 4b10 	vmov	r4, r5, d0
   de422:	ee10 0a10 	vmov	r0, s0
   de426:	2200      	movs	r2, #0
   de428:	4b28      	ldr	r3, [pc, #160]	; (de4cc <__ieee754_cosh+0x174>)
   de42a:	4629      	mov	r1, r5
   de42c:	f003 fc80 	bl	e1d30 <__aeabi_dmul>
   de430:	4622      	mov	r2, r4
   de432:	462b      	mov	r3, r5
   de434:	f003 fc7c 	bl	e1d30 <__aeabi_dmul>
   de438:	ec41 0b10 	vmov	d0, r0, r1
   de43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de440:	f7fe fa6e 	bl	dc920 <fabs>
   de444:	f000 f844 	bl	de4d0 <__ieee754_exp>
   de448:	ec55 4b10 	vmov	r4, r5, d0
   de44c:	ee10 0a10 	vmov	r0, s0
   de450:	2200      	movs	r2, #0
   de452:	4b1e      	ldr	r3, [pc, #120]	; (de4cc <__ieee754_cosh+0x174>)
   de454:	4629      	mov	r1, r5
   de456:	f003 fc6b 	bl	e1d30 <__aeabi_dmul>
   de45a:	4622      	mov	r2, r4
   de45c:	4606      	mov	r6, r0
   de45e:	460f      	mov	r7, r1
   de460:	462b      	mov	r3, r5
   de462:	2000      	movs	r0, #0
   de464:	4919      	ldr	r1, [pc, #100]	; (de4cc <__ieee754_cosh+0x174>)
   de466:	f003 fd8d 	bl	e1f84 <__aeabi_ddiv>
   de46a:	4602      	mov	r2, r0
   de46c:	460b      	mov	r3, r1
   de46e:	4630      	mov	r0, r6
   de470:	4639      	mov	r1, r7
   de472:	f003 faab 	bl	e19cc <__adddf3>
   de476:	ec41 0b10 	vmov	d0, r0, r1
   de47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de47e:	ec47 6b10 	vmov	d0, r6, r7
   de482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de486:	f7fe fa4b 	bl	dc920 <fabs>
   de48a:	f000 f821 	bl	de4d0 <__ieee754_exp>
   de48e:	2200      	movs	r2, #0
   de490:	4b0e      	ldr	r3, [pc, #56]	; (de4cc <__ieee754_cosh+0x174>)
   de492:	ec51 0b10 	vmov	r0, r1, d0
   de496:	f003 fc4b 	bl	e1d30 <__aeabi_dmul>
   de49a:	ec41 0b10 	vmov	d0, r0, r1
   de49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de4a2:	bf00      	nop
   de4a4:	f3af 8000 	nop.w
   de4a8:	8800759c 	.word	0x8800759c
   de4ac:	7e37e43c 	.word	0x7e37e43c
   de4b0:	7fefffff 	.word	0x7fefffff
   de4b4:	3fd62e42 	.word	0x3fd62e42
   de4b8:	4035ffff 	.word	0x4035ffff
   de4bc:	40862e41 	.word	0x40862e41
   de4c0:	408633cd 	.word	0x408633cd
   de4c4:	3ff00000 	.word	0x3ff00000
   de4c8:	8fb9f87d 	.word	0x8fb9f87d
   de4cc:	3fe00000 	.word	0x3fe00000

000de4d0 <__ieee754_exp>:
   de4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de4d4:	ec55 4b10 	vmov	r4, r5, d0
   de4d8:	49bd      	ldr	r1, [pc, #756]	; (de7d0 <__ieee754_exp+0x300>)
   de4da:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   de4de:	428a      	cmp	r2, r1
   de4e0:	b083      	sub	sp, #12
   de4e2:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   de4e6:	d90d      	bls.n	de504 <__ieee754_exp+0x34>
   de4e8:	49ba      	ldr	r1, [pc, #744]	; (de7d4 <__ieee754_exp+0x304>)
   de4ea:	428a      	cmp	r2, r1
   de4ec:	d92a      	bls.n	de544 <__ieee754_exp+0x74>
   de4ee:	f3c5 0313 	ubfx	r3, r5, #0, #20
   de4f2:	4323      	orrs	r3, r4
   de4f4:	f040 80fa 	bne.w	de6ec <__ieee754_exp+0x21c>
   de4f8:	b10f      	cbz	r7, de4fe <__ieee754_exp+0x2e>
   de4fa:	ed9f 0b9d 	vldr	d0, [pc, #628]	; de770 <__ieee754_exp+0x2a0>
   de4fe:	b003      	add	sp, #12
   de500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de504:	4bb4      	ldr	r3, [pc, #720]	; (de7d8 <__ieee754_exp+0x308>)
   de506:	429a      	cmp	r2, r3
   de508:	f200 80d5 	bhi.w	de6b6 <__ieee754_exp+0x1e6>
   de50c:	4bb3      	ldr	r3, [pc, #716]	; (de7dc <__ieee754_exp+0x30c>)
   de50e:	429a      	cmp	r2, r3
   de510:	f200 80ea 	bhi.w	de6e8 <__ieee754_exp+0x218>
   de514:	a398      	add	r3, pc, #608	; (adr r3, de778 <__ieee754_exp+0x2a8>)
   de516:	e9d3 2300 	ldrd	r2, r3, [r3]
   de51a:	ee10 0a10 	vmov	r0, s0
   de51e:	4629      	mov	r1, r5
   de520:	f003 fa54 	bl	e19cc <__adddf3>
   de524:	2200      	movs	r2, #0
   de526:	4bae      	ldr	r3, [pc, #696]	; (de7e0 <__ieee754_exp+0x310>)
   de528:	f003 fe92 	bl	e2250 <__aeabi_dcmpgt>
   de52c:	2800      	cmp	r0, #0
   de52e:	f000 811c 	beq.w	de76a <__ieee754_exp+0x29a>
   de532:	4620      	mov	r0, r4
   de534:	4629      	mov	r1, r5
   de536:	2200      	movs	r2, #0
   de538:	4ba9      	ldr	r3, [pc, #676]	; (de7e0 <__ieee754_exp+0x310>)
   de53a:	f003 fa47 	bl	e19cc <__adddf3>
   de53e:	ec41 0b10 	vmov	d0, r0, r1
   de542:	e7dc      	b.n	de4fe <__ieee754_exp+0x2e>
   de544:	a38e      	add	r3, pc, #568	; (adr r3, de780 <__ieee754_exp+0x2b0>)
   de546:	e9d3 2300 	ldrd	r2, r3, [r3]
   de54a:	ee10 0a10 	vmov	r0, s0
   de54e:	4629      	mov	r1, r5
   de550:	f003 fe7e 	bl	e2250 <__aeabi_dcmpgt>
   de554:	2800      	cmp	r0, #0
   de556:	f040 80d3 	bne.w	de700 <__ieee754_exp+0x230>
   de55a:	a38b      	add	r3, pc, #556	; (adr r3, de788 <__ieee754_exp+0x2b8>)
   de55c:	e9d3 2300 	ldrd	r2, r3, [r3]
   de560:	4620      	mov	r0, r4
   de562:	4629      	mov	r1, r5
   de564:	f003 fe56 	bl	e2214 <__aeabi_dcmplt>
   de568:	2800      	cmp	r0, #0
   de56a:	d1c6      	bne.n	de4fa <__ieee754_exp+0x2a>
   de56c:	4e9d      	ldr	r6, [pc, #628]	; (de7e4 <__ieee754_exp+0x314>)
   de56e:	a388      	add	r3, pc, #544	; (adr r3, de790 <__ieee754_exp+0x2c0>)
   de570:	e9d3 2300 	ldrd	r2, r3, [r3]
   de574:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   de578:	4620      	mov	r0, r4
   de57a:	4629      	mov	r1, r5
   de57c:	f003 fbd8 	bl	e1d30 <__aeabi_dmul>
   de580:	e9d6 2300 	ldrd	r2, r3, [r6]
   de584:	f003 fa22 	bl	e19cc <__adddf3>
   de588:	f003 fe82 	bl	e2290 <__aeabi_d2iz>
   de58c:	4606      	mov	r6, r0
   de58e:	f003 fb69 	bl	e1c64 <__aeabi_i2d>
   de592:	a381      	add	r3, pc, #516	; (adr r3, de798 <__ieee754_exp+0x2c8>)
   de594:	e9d3 2300 	ldrd	r2, r3, [r3]
   de598:	4680      	mov	r8, r0
   de59a:	4689      	mov	r9, r1
   de59c:	f003 fbc8 	bl	e1d30 <__aeabi_dmul>
   de5a0:	4602      	mov	r2, r0
   de5a2:	460b      	mov	r3, r1
   de5a4:	4620      	mov	r0, r4
   de5a6:	4629      	mov	r1, r5
   de5a8:	f003 fa0e 	bl	e19c8 <__aeabi_dsub>
   de5ac:	a37c      	add	r3, pc, #496	; (adr r3, de7a0 <__ieee754_exp+0x2d0>)
   de5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5b2:	e9cd 0100 	strd	r0, r1, [sp]
   de5b6:	4640      	mov	r0, r8
   de5b8:	4649      	mov	r1, r9
   de5ba:	f003 fbb9 	bl	e1d30 <__aeabi_dmul>
   de5be:	4682      	mov	sl, r0
   de5c0:	468b      	mov	fp, r1
   de5c2:	4652      	mov	r2, sl
   de5c4:	465b      	mov	r3, fp
   de5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   de5ca:	f003 f9fd 	bl	e19c8 <__aeabi_dsub>
   de5ce:	4604      	mov	r4, r0
   de5d0:	460d      	mov	r5, r1
   de5d2:	4622      	mov	r2, r4
   de5d4:	462b      	mov	r3, r5
   de5d6:	4620      	mov	r0, r4
   de5d8:	4629      	mov	r1, r5
   de5da:	f003 fba9 	bl	e1d30 <__aeabi_dmul>
   de5de:	a372      	add	r3, pc, #456	; (adr r3, de7a8 <__ieee754_exp+0x2d8>)
   de5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5e4:	4680      	mov	r8, r0
   de5e6:	4689      	mov	r9, r1
   de5e8:	f003 fba2 	bl	e1d30 <__aeabi_dmul>
   de5ec:	a370      	add	r3, pc, #448	; (adr r3, de7b0 <__ieee754_exp+0x2e0>)
   de5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   de5f2:	f003 f9e9 	bl	e19c8 <__aeabi_dsub>
   de5f6:	4642      	mov	r2, r8
   de5f8:	464b      	mov	r3, r9
   de5fa:	f003 fb99 	bl	e1d30 <__aeabi_dmul>
   de5fe:	a36e      	add	r3, pc, #440	; (adr r3, de7b8 <__ieee754_exp+0x2e8>)
   de600:	e9d3 2300 	ldrd	r2, r3, [r3]
   de604:	f003 f9e2 	bl	e19cc <__adddf3>
   de608:	4642      	mov	r2, r8
   de60a:	464b      	mov	r3, r9
   de60c:	f003 fb90 	bl	e1d30 <__aeabi_dmul>
   de610:	a36b      	add	r3, pc, #428	; (adr r3, de7c0 <__ieee754_exp+0x2f0>)
   de612:	e9d3 2300 	ldrd	r2, r3, [r3]
   de616:	f003 f9d7 	bl	e19c8 <__aeabi_dsub>
   de61a:	4642      	mov	r2, r8
   de61c:	464b      	mov	r3, r9
   de61e:	f003 fb87 	bl	e1d30 <__aeabi_dmul>
   de622:	a369      	add	r3, pc, #420	; (adr r3, de7c8 <__ieee754_exp+0x2f8>)
   de624:	e9d3 2300 	ldrd	r2, r3, [r3]
   de628:	f003 f9d0 	bl	e19cc <__adddf3>
   de62c:	4642      	mov	r2, r8
   de62e:	464b      	mov	r3, r9
   de630:	f003 fb7e 	bl	e1d30 <__aeabi_dmul>
   de634:	4602      	mov	r2, r0
   de636:	460b      	mov	r3, r1
   de638:	4620      	mov	r0, r4
   de63a:	4629      	mov	r1, r5
   de63c:	f003 f9c4 	bl	e19c8 <__aeabi_dsub>
   de640:	4680      	mov	r8, r0
   de642:	4689      	mov	r9, r1
   de644:	2e00      	cmp	r6, #0
   de646:	d065      	beq.n	de714 <__ieee754_exp+0x244>
   de648:	4620      	mov	r0, r4
   de64a:	4629      	mov	r1, r5
   de64c:	4642      	mov	r2, r8
   de64e:	464b      	mov	r3, r9
   de650:	f003 fb6e 	bl	e1d30 <__aeabi_dmul>
   de654:	4642      	mov	r2, r8
   de656:	4604      	mov	r4, r0
   de658:	460d      	mov	r5, r1
   de65a:	464b      	mov	r3, r9
   de65c:	2000      	movs	r0, #0
   de65e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   de662:	f003 f9b1 	bl	e19c8 <__aeabi_dsub>
   de666:	4602      	mov	r2, r0
   de668:	460b      	mov	r3, r1
   de66a:	4620      	mov	r0, r4
   de66c:	4629      	mov	r1, r5
   de66e:	f003 fc89 	bl	e1f84 <__aeabi_ddiv>
   de672:	4602      	mov	r2, r0
   de674:	460b      	mov	r3, r1
   de676:	4650      	mov	r0, sl
   de678:	4659      	mov	r1, fp
   de67a:	f003 f9a5 	bl	e19c8 <__aeabi_dsub>
   de67e:	e9dd 2300 	ldrd	r2, r3, [sp]
   de682:	f003 f9a1 	bl	e19c8 <__aeabi_dsub>
   de686:	460b      	mov	r3, r1
   de688:	4602      	mov	r2, r0
   de68a:	4955      	ldr	r1, [pc, #340]	; (de7e0 <__ieee754_exp+0x310>)
   de68c:	2000      	movs	r0, #0
   de68e:	f003 f99b 	bl	e19c8 <__aeabi_dsub>
   de692:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   de696:	429e      	cmp	r6, r3
   de698:	da60      	bge.n	de75c <__ieee754_exp+0x28c>
   de69a:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   de69e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   de6a2:	2200      	movs	r2, #0
   de6a4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   de6a8:	f003 fb42 	bl	e1d30 <__aeabi_dmul>
   de6ac:	ec41 0b10 	vmov	d0, r0, r1
   de6b0:	b003      	add	sp, #12
   de6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de6b6:	4b4c      	ldr	r3, [pc, #304]	; (de7e8 <__ieee754_exp+0x318>)
   de6b8:	429a      	cmp	r2, r3
   de6ba:	f63f af57 	bhi.w	de56c <__ieee754_exp+0x9c>
   de6be:	4b4b      	ldr	r3, [pc, #300]	; (de7ec <__ieee754_exp+0x31c>)
   de6c0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   de6c4:	4443      	add	r3, r8
   de6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   de6ca:	ee10 0a10 	vmov	r0, s0
   de6ce:	4629      	mov	r1, r5
   de6d0:	f003 f97a 	bl	e19c8 <__aeabi_dsub>
   de6d4:	4b46      	ldr	r3, [pc, #280]	; (de7f0 <__ieee754_exp+0x320>)
   de6d6:	f1c7 0601 	rsb	r6, r7, #1
   de6da:	4498      	add	r8, r3
   de6dc:	e9cd 0100 	strd	r0, r1, [sp]
   de6e0:	e9d8 ab00 	ldrd	sl, fp, [r8]
   de6e4:	1bf6      	subs	r6, r6, r7
   de6e6:	e76c      	b.n	de5c2 <__ieee754_exp+0xf2>
   de6e8:	2600      	movs	r6, #0
   de6ea:	e772      	b.n	de5d2 <__ieee754_exp+0x102>
   de6ec:	ee10 2a10 	vmov	r2, s0
   de6f0:	462b      	mov	r3, r5
   de6f2:	4620      	mov	r0, r4
   de6f4:	4629      	mov	r1, r5
   de6f6:	f003 f969 	bl	e19cc <__adddf3>
   de6fa:	ec41 0b10 	vmov	d0, r0, r1
   de6fe:	e6fe      	b.n	de4fe <__ieee754_exp+0x2e>
   de700:	a31d      	add	r3, pc, #116	; (adr r3, de778 <__ieee754_exp+0x2a8>)
   de702:	e9d3 2300 	ldrd	r2, r3, [r3]
   de706:	4610      	mov	r0, r2
   de708:	4619      	mov	r1, r3
   de70a:	f003 fb11 	bl	e1d30 <__aeabi_dmul>
   de70e:	ec41 0b10 	vmov	d0, r0, r1
   de712:	e6f4      	b.n	de4fe <__ieee754_exp+0x2e>
   de714:	4602      	mov	r2, r0
   de716:	460b      	mov	r3, r1
   de718:	4620      	mov	r0, r4
   de71a:	4629      	mov	r1, r5
   de71c:	f003 fb08 	bl	e1d30 <__aeabi_dmul>
   de720:	2200      	movs	r2, #0
   de722:	4606      	mov	r6, r0
   de724:	460f      	mov	r7, r1
   de726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de72a:	4640      	mov	r0, r8
   de72c:	4649      	mov	r1, r9
   de72e:	f003 f94b 	bl	e19c8 <__aeabi_dsub>
   de732:	4602      	mov	r2, r0
   de734:	460b      	mov	r3, r1
   de736:	4630      	mov	r0, r6
   de738:	4639      	mov	r1, r7
   de73a:	f003 fc23 	bl	e1f84 <__aeabi_ddiv>
   de73e:	4622      	mov	r2, r4
   de740:	462b      	mov	r3, r5
   de742:	f003 f941 	bl	e19c8 <__aeabi_dsub>
   de746:	4602      	mov	r2, r0
   de748:	460b      	mov	r3, r1
   de74a:	2000      	movs	r0, #0
   de74c:	4924      	ldr	r1, [pc, #144]	; (de7e0 <__ieee754_exp+0x310>)
   de74e:	f003 f93b 	bl	e19c8 <__aeabi_dsub>
   de752:	ec41 0b10 	vmov	d0, r0, r1
   de756:	b003      	add	sp, #12
   de758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de75c:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   de760:	ec41 0b10 	vmov	d0, r0, r1
   de764:	b003      	add	sp, #12
   de766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de76a:	4606      	mov	r6, r0
   de76c:	e731      	b.n	de5d2 <__ieee754_exp+0x102>
   de76e:	bf00      	nop
	...
   de778:	8800759c 	.word	0x8800759c
   de77c:	7e37e43c 	.word	0x7e37e43c
   de780:	fefa39ef 	.word	0xfefa39ef
   de784:	40862e42 	.word	0x40862e42
   de788:	d52d3051 	.word	0xd52d3051
   de78c:	c0874910 	.word	0xc0874910
   de790:	652b82fe 	.word	0x652b82fe
   de794:	3ff71547 	.word	0x3ff71547
   de798:	fee00000 	.word	0xfee00000
   de79c:	3fe62e42 	.word	0x3fe62e42
   de7a0:	35793c76 	.word	0x35793c76
   de7a4:	3dea39ef 	.word	0x3dea39ef
   de7a8:	72bea4d0 	.word	0x72bea4d0
   de7ac:	3e663769 	.word	0x3e663769
   de7b0:	c5d26bf1 	.word	0xc5d26bf1
   de7b4:	3ebbbd41 	.word	0x3ebbbd41
   de7b8:	af25de2c 	.word	0xaf25de2c
   de7bc:	3f11566a 	.word	0x3f11566a
   de7c0:	16bebd93 	.word	0x16bebd93
   de7c4:	3f66c16c 	.word	0x3f66c16c
   de7c8:	5555553e 	.word	0x5555553e
   de7cc:	3fc55555 	.word	0x3fc55555
   de7d0:	40862e41 	.word	0x40862e41
   de7d4:	7fefffff 	.word	0x7fefffff
   de7d8:	3fd62e42 	.word	0x3fd62e42
   de7dc:	3e2fffff 	.word	0x3e2fffff
   de7e0:	3ff00000 	.word	0x3ff00000
   de7e4:	000e6e58 	.word	0x000e6e58
   de7e8:	3ff0a2b1 	.word	0x3ff0a2b1
   de7ec:	000e6e78 	.word	0x000e6e78
   de7f0:	000e6e68 	.word	0x000e6e68

000de7f4 <__ieee754_fmod>:
   de7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de7f8:	ec53 2b11 	vmov	r2, r3, d1
   de7fc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   de800:	ea52 0009 	orrs.w	r0, r2, r9
   de804:	ec55 4b10 	vmov	r4, r5, d0
   de808:	d025      	beq.n	de856 <__ieee754_fmod+0x62>
   de80a:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   de80e:	488f      	ldr	r0, [pc, #572]	; (dea4c <__ieee754_fmod+0x258>)
   de810:	ea85 0b06 	eor.w	fp, r5, r6
   de814:	4583      	cmp	fp, r0
   de816:	dc1e      	bgt.n	de856 <__ieee754_fmod+0x62>
   de818:	4250      	negs	r0, r2
   de81a:	4310      	orrs	r0, r2
   de81c:	f8df c244 	ldr.w	ip, [pc, #580]	; dea64 <__ieee754_fmod+0x270>
   de820:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   de824:	4560      	cmp	r0, ip
   de826:	ee11 8a10 	vmov	r8, s2
   de82a:	d814      	bhi.n	de856 <__ieee754_fmod+0x62>
   de82c:	45cb      	cmp	fp, r9
   de82e:	461f      	mov	r7, r3
   de830:	ee10 aa10 	vmov	sl, s0
   de834:	ee11 ea10 	vmov	lr, s2
   de838:	ee10 1a10 	vmov	r1, s0
   de83c:	dc17      	bgt.n	de86e <__ieee754_fmod+0x7a>
   de83e:	db28      	blt.n	de892 <__ieee754_fmod+0x9e>
   de840:	4294      	cmp	r4, r2
   de842:	d326      	bcc.n	de892 <__ieee754_fmod+0x9e>
   de844:	d113      	bne.n	de86e <__ieee754_fmod+0x7a>
   de846:	4b82      	ldr	r3, [pc, #520]	; (dea50 <__ieee754_fmod+0x25c>)
   de848:	0ff6      	lsrs	r6, r6, #31
   de84a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   de84e:	ed93 0b00 	vldr	d0, [r3]
   de852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de856:	4620      	mov	r0, r4
   de858:	4629      	mov	r1, r5
   de85a:	f003 fa69 	bl	e1d30 <__aeabi_dmul>
   de85e:	4602      	mov	r2, r0
   de860:	460b      	mov	r3, r1
   de862:	f003 fb8f 	bl	e1f84 <__aeabi_ddiv>
   de866:	ec41 0b10 	vmov	d0, r0, r1
   de86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de86e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   de872:	da12      	bge.n	de89a <__ieee754_fmod+0xa6>
   de874:	f1bb 0f00 	cmp.w	fp, #0
   de878:	f040 80a7 	bne.w	de9ca <__ieee754_fmod+0x1d6>
   de87c:	f1ba 0f00 	cmp.w	sl, #0
   de880:	4653      	mov	r3, sl
   de882:	4874      	ldr	r0, [pc, #464]	; (dea54 <__ieee754_fmod+0x260>)
   de884:	dd0d      	ble.n	de8a2 <__ieee754_fmod+0xae>
   de886:	005b      	lsls	r3, r3, #1
   de888:	2b00      	cmp	r3, #0
   de88a:	f100 30ff 	add.w	r0, r0, #4294967295
   de88e:	dcfa      	bgt.n	de886 <__ieee754_fmod+0x92>
   de890:	e007      	b.n	de8a2 <__ieee754_fmod+0xae>
   de892:	ec45 4b10 	vmov	d0, r4, r5
   de896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de89a:	ea4f 502b 	mov.w	r0, fp, asr #20
   de89e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   de8a2:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   de8a6:	da0f      	bge.n	de8c8 <__ieee754_fmod+0xd4>
   de8a8:	f1b9 0f00 	cmp.w	r9, #0
   de8ac:	f040 80a7 	bne.w	de9fe <__ieee754_fmod+0x20a>
   de8b0:	f1b8 0f00 	cmp.w	r8, #0
   de8b4:	4643      	mov	r3, r8
   de8b6:	f8df c19c 	ldr.w	ip, [pc, #412]	; dea54 <__ieee754_fmod+0x260>
   de8ba:	dd09      	ble.n	de8d0 <__ieee754_fmod+0xdc>
   de8bc:	005b      	lsls	r3, r3, #1
   de8be:	2b00      	cmp	r3, #0
   de8c0:	f10c 3cff 	add.w	ip, ip, #4294967295
   de8c4:	dcfa      	bgt.n	de8bc <__ieee754_fmod+0xc8>
   de8c6:	e003      	b.n	de8d0 <__ieee754_fmod+0xdc>
   de8c8:	ea4f 5c29 	mov.w	ip, r9, asr #20
   de8cc:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   de8d0:	4b61      	ldr	r3, [pc, #388]	; (dea58 <__ieee754_fmod+0x264>)
   de8d2:	4298      	cmp	r0, r3
   de8d4:	db5b      	blt.n	de98e <__ieee754_fmod+0x19a>
   de8d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   de8da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de8de:	4a5e      	ldr	r2, [pc, #376]	; (dea58 <__ieee754_fmod+0x264>)
   de8e0:	4594      	cmp	ip, r2
   de8e2:	db63      	blt.n	de9ac <__ieee754_fmod+0x1b8>
   de8e4:	f3c7 0513 	ubfx	r5, r7, #0, #20
   de8e8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   de8ec:	ebcc 0000 	rsb	r0, ip, r0
   de8f0:	e007      	b.n	de902 <__ieee754_fmod+0x10e>
   de8f2:	ea52 0304 	orrs.w	r3, r2, r4
   de8f6:	d013      	beq.n	de920 <__ieee754_fmod+0x12c>
   de8f8:	0fe3      	lsrs	r3, r4, #31
   de8fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   de8fe:	0061      	lsls	r1, r4, #1
   de900:	3801      	subs	r0, #1
   de902:	ebce 0401 	rsb	r4, lr, r1
   de906:	1b5a      	subs	r2, r3, r5
   de908:	b190      	cbz	r0, de930 <__ieee754_fmod+0x13c>
   de90a:	4571      	cmp	r1, lr
   de90c:	bf38      	it	cc
   de90e:	f102 32ff 	addcc.w	r2, r2, #4294967295
   de912:	2a00      	cmp	r2, #0
   de914:	daed      	bge.n	de8f2 <__ieee754_fmod+0xfe>
   de916:	0fca      	lsrs	r2, r1, #31
   de918:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   de91c:	0049      	lsls	r1, r1, #1
   de91e:	e7ef      	b.n	de900 <__ieee754_fmod+0x10c>
   de920:	4b4b      	ldr	r3, [pc, #300]	; (dea50 <__ieee754_fmod+0x25c>)
   de922:	0ff6      	lsrs	r6, r6, #31
   de924:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   de928:	ed96 0b00 	vldr	d0, [r6]
   de92c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de930:	4571      	cmp	r1, lr
   de932:	4615      	mov	r5, r2
   de934:	bf38      	it	cc
   de936:	f102 35ff 	addcc.w	r5, r2, #4294967295
   de93a:	2d00      	cmp	r5, #0
   de93c:	bfac      	ite	ge
   de93e:	ebce 0101 	rsbge	r1, lr, r1
   de942:	461d      	movlt	r5, r3
   de944:	ea55 0301 	orrs.w	r3, r5, r1
   de948:	d0ea      	beq.n	de920 <__ieee754_fmod+0x12c>
   de94a:	4a44      	ldr	r2, [pc, #272]	; (dea5c <__ieee754_fmod+0x268>)
   de94c:	4295      	cmp	r5, r2
   de94e:	dc08      	bgt.n	de962 <__ieee754_fmod+0x16e>
   de950:	0fcb      	lsrs	r3, r1, #31
   de952:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   de956:	4295      	cmp	r5, r2
   de958:	f10c 3cff 	add.w	ip, ip, #4294967295
   de95c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   de960:	ddf6      	ble.n	de950 <__ieee754_fmod+0x15c>
   de962:	4b3d      	ldr	r3, [pc, #244]	; (dea58 <__ieee754_fmod+0x264>)
   de964:	459c      	cmp	ip, r3
   de966:	da54      	bge.n	dea12 <__ieee754_fmod+0x21e>
   de968:	4a3b      	ldr	r2, [pc, #236]	; (dea58 <__ieee754_fmod+0x264>)
   de96a:	ebcc 0202 	rsb	r2, ip, r2
   de96e:	2a14      	cmp	r2, #20
   de970:	dc5b      	bgt.n	dea2a <__ieee754_fmod+0x236>
   de972:	f1c2 0320 	rsb	r3, r2, #32
   de976:	fa05 f303 	lsl.w	r3, r5, r3
   de97a:	40d1      	lsrs	r1, r2
   de97c:	430b      	orrs	r3, r1
   de97e:	4115      	asrs	r5, r2
   de980:	ea45 0106 	orr.w	r1, r5, r6
   de984:	4618      	mov	r0, r3
   de986:	ec41 0b10 	vmov	d0, r0, r1
   de98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de98e:	4932      	ldr	r1, [pc, #200]	; (dea58 <__ieee754_fmod+0x264>)
   de990:	1a09      	subs	r1, r1, r0
   de992:	291f      	cmp	r1, #31
   de994:	dc2d      	bgt.n	de9f2 <__ieee754_fmod+0x1fe>
   de996:	f1c1 0320 	rsb	r3, r1, #32
   de99a:	fa0b fb01 	lsl.w	fp, fp, r1
   de99e:	fa2a f303 	lsr.w	r3, sl, r3
   de9a2:	ea43 030b 	orr.w	r3, r3, fp
   de9a6:	fa0a f101 	lsl.w	r1, sl, r1
   de9aa:	e798      	b.n	de8de <__ieee754_fmod+0xea>
   de9ac:	4c2a      	ldr	r4, [pc, #168]	; (dea58 <__ieee754_fmod+0x264>)
   de9ae:	ebcc 0404 	rsb	r4, ip, r4
   de9b2:	2c1f      	cmp	r4, #31
   de9b4:	dc15      	bgt.n	de9e2 <__ieee754_fmod+0x1ee>
   de9b6:	f1c4 0220 	rsb	r2, r4, #32
   de9ba:	fa09 f504 	lsl.w	r5, r9, r4
   de9be:	fa28 f202 	lsr.w	r2, r8, r2
   de9c2:	4315      	orrs	r5, r2
   de9c4:	fa08 fe04 	lsl.w	lr, r8, r4
   de9c8:	e790      	b.n	de8ec <__ieee754_fmod+0xf8>
   de9ca:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   de9ce:	2b00      	cmp	r3, #0
   de9d0:	4821      	ldr	r0, [pc, #132]	; (dea58 <__ieee754_fmod+0x264>)
   de9d2:	f77f af66 	ble.w	de8a2 <__ieee754_fmod+0xae>
   de9d6:	005b      	lsls	r3, r3, #1
   de9d8:	2b00      	cmp	r3, #0
   de9da:	f100 30ff 	add.w	r0, r0, #4294967295
   de9de:	dcfa      	bgt.n	de9d6 <__ieee754_fmod+0x1e2>
   de9e0:	e75f      	b.n	de8a2 <__ieee754_fmod+0xae>
   de9e2:	4d1f      	ldr	r5, [pc, #124]	; (dea60 <__ieee754_fmod+0x26c>)
   de9e4:	ebcc 0505 	rsb	r5, ip, r5
   de9e8:	fa08 f505 	lsl.w	r5, r8, r5
   de9ec:	f04f 0e00 	mov.w	lr, #0
   de9f0:	e77c      	b.n	de8ec <__ieee754_fmod+0xf8>
   de9f2:	4b1b      	ldr	r3, [pc, #108]	; (dea60 <__ieee754_fmod+0x26c>)
   de9f4:	1a1b      	subs	r3, r3, r0
   de9f6:	fa0a f303 	lsl.w	r3, sl, r3
   de9fa:	2100      	movs	r1, #0
   de9fc:	e76f      	b.n	de8de <__ieee754_fmod+0xea>
   de9fe:	f8df c058 	ldr.w	ip, [pc, #88]	; dea58 <__ieee754_fmod+0x264>
   dea02:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   dea06:	005b      	lsls	r3, r3, #1
   dea08:	2b00      	cmp	r3, #0
   dea0a:	f10c 3cff 	add.w	ip, ip, #4294967295
   dea0e:	dcfa      	bgt.n	dea06 <__ieee754_fmod+0x212>
   dea10:	e75e      	b.n	de8d0 <__ieee754_fmod+0xdc>
   dea12:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   dea16:	432e      	orrs	r6, r5
   dea18:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   dea1c:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   dea20:	460a      	mov	r2, r1
   dea22:	ec43 2b10 	vmov	d0, r2, r3
   dea26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea2a:	2a1f      	cmp	r2, #31
   dea2c:	dc07      	bgt.n	dea3e <__ieee754_fmod+0x24a>
   dea2e:	f1c2 0320 	rsb	r3, r2, #32
   dea32:	409d      	lsls	r5, r3
   dea34:	40d1      	lsrs	r1, r2
   dea36:	ea45 0301 	orr.w	r3, r5, r1
   dea3a:	4635      	mov	r5, r6
   dea3c:	e7a0      	b.n	de980 <__ieee754_fmod+0x18c>
   dea3e:	4b08      	ldr	r3, [pc, #32]	; (dea60 <__ieee754_fmod+0x26c>)
   dea40:	ebcc 0303 	rsb	r3, ip, r3
   dea44:	fa45 f303 	asr.w	r3, r5, r3
   dea48:	4635      	mov	r5, r6
   dea4a:	e799      	b.n	de980 <__ieee754_fmod+0x18c>
   dea4c:	7fefffff 	.word	0x7fefffff
   dea50:	000e6e88 	.word	0x000e6e88
   dea54:	fffffbed 	.word	0xfffffbed
   dea58:	fffffc02 	.word	0xfffffc02
   dea5c:	000fffff 	.word	0x000fffff
   dea60:	fffffbe2 	.word	0xfffffbe2
   dea64:	7ff00000 	.word	0x7ff00000

000dea68 <__ieee754_log>:
   dea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dea6c:	ec51 0b10 	vmov	r0, r1, d0
   dea70:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dea74:	b085      	sub	sp, #20
   dea76:	460b      	mov	r3, r1
   dea78:	da59      	bge.n	deb2e <__ieee754_log+0xc6>
   dea7a:	ee10 2a10 	vmov	r2, s0
   dea7e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   dea82:	4322      	orrs	r2, r4
   dea84:	f000 80f8 	beq.w	dec78 <__ieee754_log+0x210>
   dea88:	2900      	cmp	r1, #0
   dea8a:	f2c0 8180 	blt.w	ded8e <__ieee754_log+0x326>
   dea8e:	2200      	movs	r2, #0
   dea90:	4bdd      	ldr	r3, [pc, #884]	; (dee08 <__ieee754_log+0x3a0>)
   dea92:	4cde      	ldr	r4, [pc, #888]	; (dee0c <__ieee754_log+0x3a4>)
   dea94:	f003 f94c 	bl	e1d30 <__aeabi_dmul>
   dea98:	460b      	mov	r3, r1
   dea9a:	42a3      	cmp	r3, r4
   dea9c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   deaa0:	dc4a      	bgt.n	deb38 <__ieee754_log+0xd0>
   deaa2:	f3c3 0513 	ubfx	r5, r3, #0, #20
   deaa6:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   deaaa:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   deaae:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   deab2:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   deab6:	151b      	asrs	r3, r3, #20
   deab8:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   deabc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   deac0:	ea44 0105 	orr.w	r1, r4, r5
   deac4:	189c      	adds	r4, r3, r2
   deac6:	2200      	movs	r2, #0
   deac8:	4bd1      	ldr	r3, [pc, #836]	; (dee10 <__ieee754_log+0x3a8>)
   deaca:	f002 ff7d 	bl	e19c8 <__aeabi_dsub>
   deace:	1cab      	adds	r3, r5, #2
   dead0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   dead4:	2b02      	cmp	r3, #2
   dead6:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   deada:	4682      	mov	sl, r0
   deadc:	468b      	mov	fp, r1
   deade:	f04f 0200 	mov.w	r2, #0
   deae2:	dc32      	bgt.n	deb4a <__ieee754_log+0xe2>
   deae4:	2300      	movs	r3, #0
   deae6:	f003 fb8b 	bl	e2200 <__aeabi_dcmpeq>
   deaea:	2800      	cmp	r0, #0
   deaec:	f000 80cf 	beq.w	dec8e <__ieee754_log+0x226>
   deaf0:	2c00      	cmp	r4, #0
   deaf2:	f000 8158 	beq.w	deda6 <__ieee754_log+0x33e>
   deaf6:	4620      	mov	r0, r4
   deaf8:	f003 f8b4 	bl	e1c64 <__aeabi_i2d>
   deafc:	a3ac      	add	r3, pc, #688	; (adr r3, dedb0 <__ieee754_log+0x348>)
   deafe:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb02:	4606      	mov	r6, r0
   deb04:	460f      	mov	r7, r1
   deb06:	f003 f913 	bl	e1d30 <__aeabi_dmul>
   deb0a:	a3ab      	add	r3, pc, #684	; (adr r3, dedb8 <__ieee754_log+0x350>)
   deb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb10:	4604      	mov	r4, r0
   deb12:	460d      	mov	r5, r1
   deb14:	4630      	mov	r0, r6
   deb16:	4639      	mov	r1, r7
   deb18:	f003 f90a 	bl	e1d30 <__aeabi_dmul>
   deb1c:	4602      	mov	r2, r0
   deb1e:	460b      	mov	r3, r1
   deb20:	4620      	mov	r0, r4
   deb22:	4629      	mov	r1, r5
   deb24:	f002 ff52 	bl	e19cc <__adddf3>
   deb28:	ec41 0b10 	vmov	d0, r0, r1
   deb2c:	e00a      	b.n	deb44 <__ieee754_log+0xdc>
   deb2e:	4cb7      	ldr	r4, [pc, #732]	; (dee0c <__ieee754_log+0x3a4>)
   deb30:	42a3      	cmp	r3, r4
   deb32:	f04f 0200 	mov.w	r2, #0
   deb36:	ddb4      	ble.n	deaa2 <__ieee754_log+0x3a>
   deb38:	4602      	mov	r2, r0
   deb3a:	460b      	mov	r3, r1
   deb3c:	f002 ff46 	bl	e19cc <__adddf3>
   deb40:	ec41 0b10 	vmov	d0, r0, r1
   deb44:	b005      	add	sp, #20
   deb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   deb4e:	f002 ff3d 	bl	e19cc <__adddf3>
   deb52:	4602      	mov	r2, r0
   deb54:	460b      	mov	r3, r1
   deb56:	4650      	mov	r0, sl
   deb58:	4659      	mov	r1, fp
   deb5a:	f003 fa13 	bl	e1f84 <__aeabi_ddiv>
   deb5e:	4606      	mov	r6, r0
   deb60:	4620      	mov	r0, r4
   deb62:	460f      	mov	r7, r1
   deb64:	f003 f87e 	bl	e1c64 <__aeabi_i2d>
   deb68:	4632      	mov	r2, r6
   deb6a:	e9cd 0100 	strd	r0, r1, [sp]
   deb6e:	463b      	mov	r3, r7
   deb70:	4630      	mov	r0, r6
   deb72:	4639      	mov	r1, r7
   deb74:	e9cd 6702 	strd	r6, r7, [sp, #8]
   deb78:	f003 f8da 	bl	e1d30 <__aeabi_dmul>
   deb7c:	4602      	mov	r2, r0
   deb7e:	460b      	mov	r3, r1
   deb80:	4680      	mov	r8, r0
   deb82:	4689      	mov	r9, r1
   deb84:	f003 f8d4 	bl	e1d30 <__aeabi_dmul>
   deb88:	a38d      	add	r3, pc, #564	; (adr r3, dedc0 <__ieee754_log+0x358>)
   deb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb8e:	4606      	mov	r6, r0
   deb90:	460f      	mov	r7, r1
   deb92:	f003 f8cd 	bl	e1d30 <__aeabi_dmul>
   deb96:	a38c      	add	r3, pc, #560	; (adr r3, dedc8 <__ieee754_log+0x360>)
   deb98:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb9c:	f002 ff16 	bl	e19cc <__adddf3>
   deba0:	4632      	mov	r2, r6
   deba2:	463b      	mov	r3, r7
   deba4:	f003 f8c4 	bl	e1d30 <__aeabi_dmul>
   deba8:	a389      	add	r3, pc, #548	; (adr r3, dedd0 <__ieee754_log+0x368>)
   debaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   debae:	f002 ff0d 	bl	e19cc <__adddf3>
   debb2:	4632      	mov	r2, r6
   debb4:	463b      	mov	r3, r7
   debb6:	f003 f8bb 	bl	e1d30 <__aeabi_dmul>
   debba:	a387      	add	r3, pc, #540	; (adr r3, dedd8 <__ieee754_log+0x370>)
   debbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   debc0:	f002 ff04 	bl	e19cc <__adddf3>
   debc4:	4642      	mov	r2, r8
   debc6:	464b      	mov	r3, r9
   debc8:	f003 f8b2 	bl	e1d30 <__aeabi_dmul>
   debcc:	a384      	add	r3, pc, #528	; (adr r3, dede0 <__ieee754_log+0x378>)
   debce:	e9d3 2300 	ldrd	r2, r3, [r3]
   debd2:	4680      	mov	r8, r0
   debd4:	4689      	mov	r9, r1
   debd6:	4630      	mov	r0, r6
   debd8:	4639      	mov	r1, r7
   debda:	f003 f8a9 	bl	e1d30 <__aeabi_dmul>
   debde:	a382      	add	r3, pc, #520	; (adr r3, dede8 <__ieee754_log+0x380>)
   debe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   debe4:	f002 fef2 	bl	e19cc <__adddf3>
   debe8:	4632      	mov	r2, r6
   debea:	463b      	mov	r3, r7
   debec:	f003 f8a0 	bl	e1d30 <__aeabi_dmul>
   debf0:	a37f      	add	r3, pc, #508	; (adr r3, dedf0 <__ieee754_log+0x388>)
   debf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   debf6:	f002 fee9 	bl	e19cc <__adddf3>
   debfa:	4632      	mov	r2, r6
   debfc:	463b      	mov	r3, r7
   debfe:	f003 f897 	bl	e1d30 <__aeabi_dmul>
   dec02:	460b      	mov	r3, r1
   dec04:	4602      	mov	r2, r0
   dec06:	4649      	mov	r1, r9
   dec08:	4640      	mov	r0, r8
   dec0a:	f002 fedf 	bl	e19cc <__adddf3>
   dec0e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   dec12:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   dec16:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   dec1a:	3551      	adds	r5, #81	; 0x51
   dec1c:	431d      	orrs	r5, r3
   dec1e:	2d00      	cmp	r5, #0
   dec20:	4680      	mov	r8, r0
   dec22:	4689      	mov	r9, r1
   dec24:	dd5c      	ble.n	dece0 <__ieee754_log+0x278>
   dec26:	2200      	movs	r2, #0
   dec28:	4b7a      	ldr	r3, [pc, #488]	; (dee14 <__ieee754_log+0x3ac>)
   dec2a:	4650      	mov	r0, sl
   dec2c:	4659      	mov	r1, fp
   dec2e:	f003 f87f 	bl	e1d30 <__aeabi_dmul>
   dec32:	4652      	mov	r2, sl
   dec34:	465b      	mov	r3, fp
   dec36:	f003 f87b 	bl	e1d30 <__aeabi_dmul>
   dec3a:	4606      	mov	r6, r0
   dec3c:	460f      	mov	r7, r1
   dec3e:	2c00      	cmp	r4, #0
   dec40:	d16e      	bne.n	ded20 <__ieee754_log+0x2b8>
   dec42:	4632      	mov	r2, r6
   dec44:	463b      	mov	r3, r7
   dec46:	4640      	mov	r0, r8
   dec48:	4649      	mov	r1, r9
   dec4a:	f002 febf 	bl	e19cc <__adddf3>
   dec4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dec52:	f003 f86d 	bl	e1d30 <__aeabi_dmul>
   dec56:	4602      	mov	r2, r0
   dec58:	460b      	mov	r3, r1
   dec5a:	4630      	mov	r0, r6
   dec5c:	4639      	mov	r1, r7
   dec5e:	f002 feb3 	bl	e19c8 <__aeabi_dsub>
   dec62:	4602      	mov	r2, r0
   dec64:	460b      	mov	r3, r1
   dec66:	4650      	mov	r0, sl
   dec68:	4659      	mov	r1, fp
   dec6a:	f002 fead 	bl	e19c8 <__aeabi_dsub>
   dec6e:	ec41 0b10 	vmov	d0, r0, r1
   dec72:	b005      	add	sp, #20
   dec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec78:	2200      	movs	r2, #0
   dec7a:	2300      	movs	r3, #0
   dec7c:	2000      	movs	r0, #0
   dec7e:	4966      	ldr	r1, [pc, #408]	; (dee18 <__ieee754_log+0x3b0>)
   dec80:	f003 f980 	bl	e1f84 <__aeabi_ddiv>
   dec84:	ec41 0b10 	vmov	d0, r0, r1
   dec88:	b005      	add	sp, #20
   dec8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec8e:	a35a      	add	r3, pc, #360	; (adr r3, dedf8 <__ieee754_log+0x390>)
   dec90:	e9d3 2300 	ldrd	r2, r3, [r3]
   dec94:	4650      	mov	r0, sl
   dec96:	4659      	mov	r1, fp
   dec98:	f003 f84a 	bl	e1d30 <__aeabi_dmul>
   dec9c:	4602      	mov	r2, r0
   dec9e:	460b      	mov	r3, r1
   deca0:	2000      	movs	r0, #0
   deca2:	495c      	ldr	r1, [pc, #368]	; (dee14 <__ieee754_log+0x3ac>)
   deca4:	f002 fe90 	bl	e19c8 <__aeabi_dsub>
   deca8:	4652      	mov	r2, sl
   decaa:	4606      	mov	r6, r0
   decac:	460f      	mov	r7, r1
   decae:	465b      	mov	r3, fp
   decb0:	4650      	mov	r0, sl
   decb2:	4659      	mov	r1, fp
   decb4:	f003 f83c 	bl	e1d30 <__aeabi_dmul>
   decb8:	4602      	mov	r2, r0
   decba:	460b      	mov	r3, r1
   decbc:	4630      	mov	r0, r6
   decbe:	4639      	mov	r1, r7
   decc0:	f003 f836 	bl	e1d30 <__aeabi_dmul>
   decc4:	4606      	mov	r6, r0
   decc6:	460f      	mov	r7, r1
   decc8:	2c00      	cmp	r4, #0
   decca:	f040 80a7 	bne.w	dee1c <__ieee754_log+0x3b4>
   decce:	4602      	mov	r2, r0
   decd0:	460b      	mov	r3, r1
   decd2:	4650      	mov	r0, sl
   decd4:	4659      	mov	r1, fp
   decd6:	f002 fe77 	bl	e19c8 <__aeabi_dsub>
   decda:	ec41 0b10 	vmov	d0, r0, r1
   decde:	e731      	b.n	deb44 <__ieee754_log+0xdc>
   dece0:	2c00      	cmp	r4, #0
   dece2:	f000 80af 	beq.w	dee44 <__ieee754_log+0x3dc>
   dece6:	a332      	add	r3, pc, #200	; (adr r3, dedb0 <__ieee754_log+0x348>)
   dece8:	e9d3 2300 	ldrd	r2, r3, [r3]
   decec:	e9dd 0100 	ldrd	r0, r1, [sp]
   decf0:	f003 f81e 	bl	e1d30 <__aeabi_dmul>
   decf4:	4642      	mov	r2, r8
   decf6:	464b      	mov	r3, r9
   decf8:	4604      	mov	r4, r0
   decfa:	460d      	mov	r5, r1
   decfc:	4650      	mov	r0, sl
   decfe:	4659      	mov	r1, fp
   ded00:	f002 fe62 	bl	e19c8 <__aeabi_dsub>
   ded04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ded08:	f003 f812 	bl	e1d30 <__aeabi_dmul>
   ded0c:	a32a      	add	r3, pc, #168	; (adr r3, dedb8 <__ieee754_log+0x350>)
   ded0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded12:	4606      	mov	r6, r0
   ded14:	460f      	mov	r7, r1
   ded16:	e9dd 0100 	ldrd	r0, r1, [sp]
   ded1a:	f003 f809 	bl	e1d30 <__aeabi_dmul>
   ded1e:	e021      	b.n	ded64 <__ieee754_log+0x2fc>
   ded20:	a323      	add	r3, pc, #140	; (adr r3, dedb0 <__ieee754_log+0x348>)
   ded22:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded26:	e9dd 0100 	ldrd	r0, r1, [sp]
   ded2a:	f003 f801 	bl	e1d30 <__aeabi_dmul>
   ded2e:	4632      	mov	r2, r6
   ded30:	463b      	mov	r3, r7
   ded32:	4604      	mov	r4, r0
   ded34:	460d      	mov	r5, r1
   ded36:	4640      	mov	r0, r8
   ded38:	4649      	mov	r1, r9
   ded3a:	f002 fe47 	bl	e19cc <__adddf3>
   ded3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   ded42:	f002 fff5 	bl	e1d30 <__aeabi_dmul>
   ded46:	a31c      	add	r3, pc, #112	; (adr r3, dedb8 <__ieee754_log+0x350>)
   ded48:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded4c:	4680      	mov	r8, r0
   ded4e:	4689      	mov	r9, r1
   ded50:	e9dd 0100 	ldrd	r0, r1, [sp]
   ded54:	f002 ffec 	bl	e1d30 <__aeabi_dmul>
   ded58:	4602      	mov	r2, r0
   ded5a:	460b      	mov	r3, r1
   ded5c:	4640      	mov	r0, r8
   ded5e:	4649      	mov	r1, r9
   ded60:	f002 fe34 	bl	e19cc <__adddf3>
   ded64:	4602      	mov	r2, r0
   ded66:	460b      	mov	r3, r1
   ded68:	4630      	mov	r0, r6
   ded6a:	4639      	mov	r1, r7
   ded6c:	f002 fe2c 	bl	e19c8 <__aeabi_dsub>
   ded70:	4652      	mov	r2, sl
   ded72:	465b      	mov	r3, fp
   ded74:	f002 fe28 	bl	e19c8 <__aeabi_dsub>
   ded78:	4602      	mov	r2, r0
   ded7a:	460b      	mov	r3, r1
   ded7c:	4620      	mov	r0, r4
   ded7e:	4629      	mov	r1, r5
   ded80:	f002 fe22 	bl	e19c8 <__aeabi_dsub>
   ded84:	ec41 0b10 	vmov	d0, r0, r1
   ded88:	b005      	add	sp, #20
   ded8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ded8e:	ee10 2a10 	vmov	r2, s0
   ded92:	460b      	mov	r3, r1
   ded94:	f002 fe18 	bl	e19c8 <__aeabi_dsub>
   ded98:	2200      	movs	r2, #0
   ded9a:	2300      	movs	r3, #0
   ded9c:	f003 f8f2 	bl	e1f84 <__aeabi_ddiv>
   deda0:	ec41 0b10 	vmov	d0, r0, r1
   deda4:	e6ce      	b.n	deb44 <__ieee754_log+0xdc>
   deda6:	ed9f 0b16 	vldr	d0, [pc, #88]	; dee00 <__ieee754_log+0x398>
   dedaa:	e6cb      	b.n	deb44 <__ieee754_log+0xdc>
   dedac:	f3af 8000 	nop.w
   dedb0:	fee00000 	.word	0xfee00000
   dedb4:	3fe62e42 	.word	0x3fe62e42
   dedb8:	35793c76 	.word	0x35793c76
   dedbc:	3dea39ef 	.word	0x3dea39ef
   dedc0:	df3e5244 	.word	0xdf3e5244
   dedc4:	3fc2f112 	.word	0x3fc2f112
   dedc8:	96cb03de 	.word	0x96cb03de
   dedcc:	3fc74664 	.word	0x3fc74664
   dedd0:	94229359 	.word	0x94229359
   dedd4:	3fd24924 	.word	0x3fd24924
   dedd8:	55555593 	.word	0x55555593
   deddc:	3fe55555 	.word	0x3fe55555
   dede0:	d078c69f 	.word	0xd078c69f
   dede4:	3fc39a09 	.word	0x3fc39a09
   dede8:	1d8e78af 	.word	0x1d8e78af
   dedec:	3fcc71c5 	.word	0x3fcc71c5
   dedf0:	9997fa04 	.word	0x9997fa04
   dedf4:	3fd99999 	.word	0x3fd99999
   dedf8:	55555555 	.word	0x55555555
   dedfc:	3fd55555 	.word	0x3fd55555
	...
   dee08:	43500000 	.word	0x43500000
   dee0c:	7fefffff 	.word	0x7fefffff
   dee10:	3ff00000 	.word	0x3ff00000
   dee14:	3fe00000 	.word	0x3fe00000
   dee18:	c3500000 	.word	0xc3500000
   dee1c:	4620      	mov	r0, r4
   dee1e:	f002 ff21 	bl	e1c64 <__aeabi_i2d>
   dee22:	a30f      	add	r3, pc, #60	; (adr r3, dee60 <__ieee754_log+0x3f8>)
   dee24:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee28:	4680      	mov	r8, r0
   dee2a:	4689      	mov	r9, r1
   dee2c:	f002 ff80 	bl	e1d30 <__aeabi_dmul>
   dee30:	a30d      	add	r3, pc, #52	; (adr r3, dee68 <__ieee754_log+0x400>)
   dee32:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee36:	4604      	mov	r4, r0
   dee38:	460d      	mov	r5, r1
   dee3a:	4640      	mov	r0, r8
   dee3c:	4649      	mov	r1, r9
   dee3e:	f002 ff77 	bl	e1d30 <__aeabi_dmul>
   dee42:	e78f      	b.n	ded64 <__ieee754_log+0x2fc>
   dee44:	4602      	mov	r2, r0
   dee46:	460b      	mov	r3, r1
   dee48:	4650      	mov	r0, sl
   dee4a:	4659      	mov	r1, fp
   dee4c:	f002 fdbc 	bl	e19c8 <__aeabi_dsub>
   dee50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dee54:	f002 ff6c 	bl	e1d30 <__aeabi_dmul>
   dee58:	e703      	b.n	dec62 <__ieee754_log+0x1fa>
   dee5a:	bf00      	nop
   dee5c:	f3af 8000 	nop.w
   dee60:	fee00000 	.word	0xfee00000
   dee64:	3fe62e42 	.word	0x3fe62e42
   dee68:	35793c76 	.word	0x35793c76
   dee6c:	3dea39ef 	.word	0x3dea39ef

000dee70 <__ieee754_log10>:
   dee70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dee74:	ec55 4b10 	vmov	r4, r5, d0
   dee78:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   dee7c:	b083      	sub	sp, #12
   dee7e:	462b      	mov	r3, r5
   dee80:	da21      	bge.n	deec6 <__ieee754_log10+0x56>
   dee82:	ee10 2a10 	vmov	r2, s0
   dee86:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   dee8a:	430a      	orrs	r2, r1
   dee8c:	d064      	beq.n	def58 <__ieee754_log10+0xe8>
   dee8e:	2d00      	cmp	r5, #0
   dee90:	db6d      	blt.n	def6e <__ieee754_log10+0xfe>
   dee92:	4629      	mov	r1, r5
   dee94:	2200      	movs	r2, #0
   dee96:	4b44      	ldr	r3, [pc, #272]	; (defa8 <__ieee754_log10+0x138>)
   dee98:	ee10 0a10 	vmov	r0, s0
   dee9c:	f002 ff48 	bl	e1d30 <__aeabi_dmul>
   deea0:	460b      	mov	r3, r1
   deea2:	460d      	mov	r5, r1
   deea4:	4941      	ldr	r1, [pc, #260]	; (defac <__ieee754_log10+0x13c>)
   deea6:	428b      	cmp	r3, r1
   deea8:	4604      	mov	r4, r0
   deeaa:	f06f 0235 	mvn.w	r2, #53	; 0x35
   deeae:	dd0f      	ble.n	deed0 <__ieee754_log10+0x60>
   deeb0:	4622      	mov	r2, r4
   deeb2:	462b      	mov	r3, r5
   deeb4:	4620      	mov	r0, r4
   deeb6:	4629      	mov	r1, r5
   deeb8:	f002 fd88 	bl	e19cc <__adddf3>
   deebc:	ec41 0b10 	vmov	d0, r0, r1
   deec0:	b003      	add	sp, #12
   deec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   deec6:	4939      	ldr	r1, [pc, #228]	; (defac <__ieee754_log10+0x13c>)
   deec8:	428b      	cmp	r3, r1
   deeca:	f04f 0200 	mov.w	r2, #0
   deece:	dcef      	bgt.n	deeb0 <__ieee754_log10+0x40>
   deed0:	1518      	asrs	r0, r3, #20
   deed2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   deed6:	4410      	add	r0, r2
   deed8:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   deedc:	4448      	add	r0, r9
   deede:	f3c3 0813 	ubfx	r8, r3, #0, #20
   deee2:	f002 febf 	bl	e1c64 <__aeabi_i2d>
   deee6:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   deeea:	3303      	adds	r3, #3
   deeec:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   deef0:	ec45 4b10 	vmov	d0, r4, r5
   deef4:	4606      	mov	r6, r0
   deef6:	460f      	mov	r7, r1
   deef8:	f7ff fdb6 	bl	dea68 <__ieee754_log>
   deefc:	4630      	mov	r0, r6
   deefe:	4639      	mov	r1, r7
   def00:	a323      	add	r3, pc, #140	; (adr r3, def90 <__ieee754_log10+0x120>)
   def02:	e9d3 2300 	ldrd	r2, r3, [r3]
   def06:	ed8d 0b00 	vstr	d0, [sp]
   def0a:	f002 ff11 	bl	e1d30 <__aeabi_dmul>
   def0e:	ed9d 0b00 	vldr	d0, [sp]
   def12:	4604      	mov	r4, r0
   def14:	460d      	mov	r5, r1
   def16:	a320      	add	r3, pc, #128	; (adr r3, def98 <__ieee754_log10+0x128>)
   def18:	e9d3 2300 	ldrd	r2, r3, [r3]
   def1c:	ec51 0b10 	vmov	r0, r1, d0
   def20:	f002 ff06 	bl	e1d30 <__aeabi_dmul>
   def24:	4602      	mov	r2, r0
   def26:	460b      	mov	r3, r1
   def28:	4620      	mov	r0, r4
   def2a:	4629      	mov	r1, r5
   def2c:	f002 fd4e 	bl	e19cc <__adddf3>
   def30:	a31b      	add	r3, pc, #108	; (adr r3, defa0 <__ieee754_log10+0x130>)
   def32:	e9d3 2300 	ldrd	r2, r3, [r3]
   def36:	4604      	mov	r4, r0
   def38:	460d      	mov	r5, r1
   def3a:	4630      	mov	r0, r6
   def3c:	4639      	mov	r1, r7
   def3e:	f002 fef7 	bl	e1d30 <__aeabi_dmul>
   def42:	4602      	mov	r2, r0
   def44:	460b      	mov	r3, r1
   def46:	4620      	mov	r0, r4
   def48:	4629      	mov	r1, r5
   def4a:	f002 fd3f 	bl	e19cc <__adddf3>
   def4e:	ec41 0b10 	vmov	d0, r0, r1
   def52:	b003      	add	sp, #12
   def54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   def58:	2200      	movs	r2, #0
   def5a:	2300      	movs	r3, #0
   def5c:	2000      	movs	r0, #0
   def5e:	4914      	ldr	r1, [pc, #80]	; (defb0 <__ieee754_log10+0x140>)
   def60:	f003 f810 	bl	e1f84 <__aeabi_ddiv>
   def64:	ec41 0b10 	vmov	d0, r0, r1
   def68:	b003      	add	sp, #12
   def6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   def6e:	ee10 2a10 	vmov	r2, s0
   def72:	462b      	mov	r3, r5
   def74:	4620      	mov	r0, r4
   def76:	4629      	mov	r1, r5
   def78:	f002 fd26 	bl	e19c8 <__aeabi_dsub>
   def7c:	2200      	movs	r2, #0
   def7e:	2300      	movs	r3, #0
   def80:	f003 f800 	bl	e1f84 <__aeabi_ddiv>
   def84:	ec41 0b10 	vmov	d0, r0, r1
   def88:	e79a      	b.n	deec0 <__ieee754_log10+0x50>
   def8a:	bf00      	nop
   def8c:	f3af 8000 	nop.w
   def90:	11f12b36 	.word	0x11f12b36
   def94:	3d59fef3 	.word	0x3d59fef3
   def98:	1526e50e 	.word	0x1526e50e
   def9c:	3fdbcb7b 	.word	0x3fdbcb7b
   defa0:	509f6000 	.word	0x509f6000
   defa4:	3fd34413 	.word	0x3fd34413
   defa8:	43500000 	.word	0x43500000
   defac:	7fefffff 	.word	0x7fefffff
   defb0:	c3500000 	.word	0xc3500000
   defb4:	00000000 	.word	0x00000000

000defb8 <__ieee754_pow>:
   defb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   defbc:	ec51 0b11 	vmov	r0, r1, d1
   defc0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   defc4:	ea58 0400 	orrs.w	r4, r8, r0
   defc8:	b093      	sub	sp, #76	; 0x4c
   defca:	d03c      	beq.n	df046 <__ieee754_pow+0x8e>
   defcc:	ec53 2b10 	vmov	r2, r3, d0
   defd0:	4e6d      	ldr	r6, [pc, #436]	; (df188 <__ieee754_pow+0x1d0>)
   defd2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   defd6:	42b4      	cmp	r4, r6
   defd8:	ee10 aa10 	vmov	sl, s0
   defdc:	461d      	mov	r5, r3
   defde:	dc2b      	bgt.n	df038 <__ieee754_pow+0x80>
   defe0:	4689      	mov	r9, r1
   defe2:	ee11 ea10 	vmov	lr, s2
   defe6:	d026      	beq.n	df036 <__ieee754_pow+0x7e>
   defe8:	45b0      	cmp	r8, r6
   defea:	dc25      	bgt.n	df038 <__ieee754_pow+0x80>
   defec:	4e66      	ldr	r6, [pc, #408]	; (df188 <__ieee754_pow+0x1d0>)
   defee:	45b0      	cmp	r8, r6
   deff0:	d077      	beq.n	df0e2 <__ieee754_pow+0x12a>
   deff2:	2d00      	cmp	r5, #0
   deff4:	4616      	mov	r6, r2
   deff6:	461f      	mov	r7, r3
   deff8:	e9cd 0100 	strd	r0, r1, [sp]
   deffc:	db75      	blt.n	df0ea <__ieee754_pow+0x132>
   deffe:	f04f 0b00 	mov.w	fp, #0
   df002:	f1be 0f00 	cmp.w	lr, #0
   df006:	d12d      	bne.n	df064 <__ieee754_pow+0xac>
   df008:	4b5f      	ldr	r3, [pc, #380]	; (df188 <__ieee754_pow+0x1d0>)
   df00a:	4598      	cmp	r8, r3
   df00c:	f000 8089 	beq.w	df122 <__ieee754_pow+0x16a>
   df010:	4b5e      	ldr	r3, [pc, #376]	; (df18c <__ieee754_pow+0x1d4>)
   df012:	4598      	cmp	r8, r3
   df014:	d05e      	beq.n	df0d4 <__ieee754_pow+0x11c>
   df016:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   df01a:	f000 83de 	beq.w	df7da <__ieee754_pow+0x822>
   df01e:	4b5c      	ldr	r3, [pc, #368]	; (df190 <__ieee754_pow+0x1d8>)
   df020:	4599      	cmp	r9, r3
   df022:	d11f      	bne.n	df064 <__ieee754_pow+0xac>
   df024:	2d00      	cmp	r5, #0
   df026:	db1d      	blt.n	df064 <__ieee754_pow+0xac>
   df028:	ec47 6b10 	vmov	d0, r6, r7
   df02c:	b013      	add	sp, #76	; 0x4c
   df02e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df032:	f001 b855 	b.w	e00e0 <__ieee754_sqrt>
   df036:	b15a      	cbz	r2, df050 <__ieee754_pow+0x98>
   df038:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   df03c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   df040:	ea54 030a 	orrs.w	r3, r4, sl
   df044:	d106      	bne.n	df054 <__ieee754_pow+0x9c>
   df046:	ed9f 0b4a 	vldr	d0, [pc, #296]	; df170 <__ieee754_pow+0x1b8>
   df04a:	b013      	add	sp, #76	; 0x4c
   df04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df050:	45a0      	cmp	r8, r4
   df052:	ddcb      	ble.n	defec <__ieee754_pow+0x34>
   df054:	484f      	ldr	r0, [pc, #316]	; (df194 <__ieee754_pow+0x1dc>)
   df056:	b013      	add	sp, #76	; 0x4c
   df058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df05c:	f002 bb80 	b.w	e1760 <nan>
   df060:	f04f 0b00 	mov.w	fp, #0
   df064:	ec47 6b10 	vmov	d0, r6, r7
   df068:	f7fd fc5a 	bl	dc920 <fabs>
   df06c:	ec51 0b10 	vmov	r0, r1, d0
   df070:	f1ba 0f00 	cmp.w	sl, #0
   df074:	d01e      	beq.n	df0b4 <__ieee754_pow+0xfc>
   df076:	0fed      	lsrs	r5, r5, #31
   df078:	f105 3aff 	add.w	sl, r5, #4294967295
   df07c:	ea5b 030a 	orrs.w	r3, fp, sl
   df080:	d063      	beq.n	df14a <__ieee754_pow+0x192>
   df082:	4b45      	ldr	r3, [pc, #276]	; (df198 <__ieee754_pow+0x1e0>)
   df084:	4598      	cmp	r8, r3
   df086:	f340 808d 	ble.w	df1a4 <__ieee754_pow+0x1ec>
   df08a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   df08e:	4598      	cmp	r8, r3
   df090:	f340 8438 	ble.w	df904 <__ieee754_pow+0x94c>
   df094:	4b41      	ldr	r3, [pc, #260]	; (df19c <__ieee754_pow+0x1e4>)
   df096:	429c      	cmp	r4, r3
   df098:	dd62      	ble.n	df160 <__ieee754_pow+0x1a8>
   df09a:	f1b9 0f00 	cmp.w	r9, #0
   df09e:	dd62      	ble.n	df166 <__ieee754_pow+0x1ae>
   df0a0:	a335      	add	r3, pc, #212	; (adr r3, df178 <__ieee754_pow+0x1c0>)
   df0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df0a6:	4610      	mov	r0, r2
   df0a8:	4619      	mov	r1, r3
   df0aa:	f002 fe41 	bl	e1d30 <__aeabi_dmul>
   df0ae:	ec41 0b10 	vmov	d0, r0, r1
   df0b2:	e7ca      	b.n	df04a <__ieee754_pow+0x92>
   df0b4:	b124      	cbz	r4, df0c0 <__ieee754_pow+0x108>
   df0b6:	4b35      	ldr	r3, [pc, #212]	; (df18c <__ieee754_pow+0x1d4>)
   df0b8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   df0bc:	429a      	cmp	r2, r3
   df0be:	d1da      	bne.n	df076 <__ieee754_pow+0xbe>
   df0c0:	f1b9 0f00 	cmp.w	r9, #0
   df0c4:	f2c0 83cb 	blt.w	df85e <__ieee754_pow+0x8a6>
   df0c8:	2d00      	cmp	r5, #0
   df0ca:	f2c0 8374 	blt.w	df7b6 <__ieee754_pow+0x7fe>
   df0ce:	ec41 0b10 	vmov	d0, r0, r1
   df0d2:	e7ba      	b.n	df04a <__ieee754_pow+0x92>
   df0d4:	f1b9 0f00 	cmp.w	r9, #0
   df0d8:	f2c0 847a 	blt.w	df9d0 <__ieee754_pow+0xa18>
   df0dc:	ec47 6b10 	vmov	d0, r6, r7
   df0e0:	e7b3      	b.n	df04a <__ieee754_pow+0x92>
   df0e2:	f1be 0f00 	cmp.w	lr, #0
   df0e6:	d084      	beq.n	deff2 <__ieee754_pow+0x3a>
   df0e8:	e7a6      	b.n	df038 <__ieee754_pow+0x80>
   df0ea:	4b2d      	ldr	r3, [pc, #180]	; (df1a0 <__ieee754_pow+0x1e8>)
   df0ec:	4598      	cmp	r8, r3
   df0ee:	dc29      	bgt.n	df144 <__ieee754_pow+0x18c>
   df0f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   df0f4:	4598      	cmp	r8, r3
   df0f6:	dd82      	ble.n	deffe <__ieee754_pow+0x46>
   df0f8:	ea4f 5328 	mov.w	r3, r8, asr #20
   df0fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   df100:	2b14      	cmp	r3, #20
   df102:	f340 847f 	ble.w	dfa04 <__ieee754_pow+0xa4c>
   df106:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   df10a:	fa2e f203 	lsr.w	r2, lr, r3
   df10e:	fa02 f303 	lsl.w	r3, r2, r3
   df112:	459e      	cmp	lr, r3
   df114:	f47f af73 	bne.w	deffe <__ieee754_pow+0x46>
   df118:	f002 0201 	and.w	r2, r2, #1
   df11c:	f1c2 0b02 	rsb	fp, r2, #2
   df120:	e76f      	b.n	df002 <__ieee754_pow+0x4a>
   df122:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   df126:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   df12a:	ea53 030a 	orrs.w	r3, r3, sl
   df12e:	d08a      	beq.n	df046 <__ieee754_pow+0x8e>
   df130:	4b1a      	ldr	r3, [pc, #104]	; (df19c <__ieee754_pow+0x1e4>)
   df132:	429c      	cmp	r4, r3
   df134:	f340 8385 	ble.w	df842 <__ieee754_pow+0x88a>
   df138:	f1b9 0f00 	cmp.w	r9, #0
   df13c:	db13      	blt.n	df166 <__ieee754_pow+0x1ae>
   df13e:	ed9d 0b00 	vldr	d0, [sp]
   df142:	e782      	b.n	df04a <__ieee754_pow+0x92>
   df144:	f04f 0b02 	mov.w	fp, #2
   df148:	e75b      	b.n	df002 <__ieee754_pow+0x4a>
   df14a:	4632      	mov	r2, r6
   df14c:	463b      	mov	r3, r7
   df14e:	4610      	mov	r0, r2
   df150:	4619      	mov	r1, r3
   df152:	f002 fc39 	bl	e19c8 <__aeabi_dsub>
   df156:	4602      	mov	r2, r0
   df158:	460b      	mov	r3, r1
   df15a:	f002 ff13 	bl	e1f84 <__aeabi_ddiv>
   df15e:	e7b6      	b.n	df0ce <__ieee754_pow+0x116>
   df160:	f1b9 0f00 	cmp.w	r9, #0
   df164:	db9c      	blt.n	df0a0 <__ieee754_pow+0xe8>
   df166:	ed9f 0b06 	vldr	d0, [pc, #24]	; df180 <__ieee754_pow+0x1c8>
   df16a:	e76e      	b.n	df04a <__ieee754_pow+0x92>
   df16c:	f3af 8000 	nop.w
   df170:	00000000 	.word	0x00000000
   df174:	3ff00000 	.word	0x3ff00000
   df178:	8800759c 	.word	0x8800759c
   df17c:	7e37e43c 	.word	0x7e37e43c
	...
   df188:	7ff00000 	.word	0x7ff00000
   df18c:	3ff00000 	.word	0x3ff00000
   df190:	3fe00000 	.word	0x3fe00000
   df194:	000e6e30 	.word	0x000e6e30
   df198:	41e00000 	.word	0x41e00000
   df19c:	3fefffff 	.word	0x3fefffff
   df1a0:	433fffff 	.word	0x433fffff
   df1a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   df1a8:	f04f 0200 	mov.w	r2, #0
   df1ac:	da05      	bge.n	df1ba <__ieee754_pow+0x202>
   df1ae:	4bd6      	ldr	r3, [pc, #856]	; (df508 <__ieee754_pow+0x550>)
   df1b0:	f002 fdbe 	bl	e1d30 <__aeabi_dmul>
   df1b4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   df1b8:	460c      	mov	r4, r1
   df1ba:	1523      	asrs	r3, r4, #20
   df1bc:	4ed3      	ldr	r6, [pc, #844]	; (df50c <__ieee754_pow+0x554>)
   df1be:	f3c4 0413 	ubfx	r4, r4, #0, #20
   df1c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   df1c6:	4413      	add	r3, r2
   df1c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   df1cc:	42b4      	cmp	r4, r6
   df1ce:	461a      	mov	r2, r3
   df1d0:	930d      	str	r3, [sp, #52]	; 0x34
   df1d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   df1d6:	f340 8349 	ble.w	df86c <__ieee754_pow+0x8b4>
   df1da:	4bcd      	ldr	r3, [pc, #820]	; (df510 <__ieee754_pow+0x558>)
   df1dc:	429c      	cmp	r4, r3
   df1de:	f340 842d 	ble.w	dfa3c <__ieee754_pow+0xa84>
   df1e2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; df4b0 <__ieee754_pow+0x4f8>
   df1e6:	ed8d 7b08 	vstr	d7, [sp, #32]
   df1ea:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   df1ee:	ed9f 7bb2 	vldr	d7, [pc, #712]	; df4b8 <__ieee754_pow+0x500>
   df1f2:	4613      	mov	r3, r2
   df1f4:	ed8d 7b06 	vstr	d7, [sp, #24]
   df1f8:	3301      	adds	r3, #1
   df1fa:	930d      	str	r3, [sp, #52]	; 0x34
   df1fc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   df200:	f04f 0800 	mov.w	r8, #0
   df204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df208:	4629      	mov	r1, r5
   df20a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   df20e:	f002 fbdb 	bl	e19c8 <__aeabi_dsub>
   df212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df216:	4606      	mov	r6, r0
   df218:	460f      	mov	r7, r1
   df21a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   df21e:	f002 fbd5 	bl	e19cc <__adddf3>
   df222:	4602      	mov	r2, r0
   df224:	460b      	mov	r3, r1
   df226:	2000      	movs	r0, #0
   df228:	49ba      	ldr	r1, [pc, #744]	; (df514 <__ieee754_pow+0x55c>)
   df22a:	f002 feab 	bl	e1f84 <__aeabi_ddiv>
   df22e:	4603      	mov	r3, r0
   df230:	460c      	mov	r4, r1
   df232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   df236:	4602      	mov	r2, r0
   df238:	460b      	mov	r3, r1
   df23a:	4630      	mov	r0, r6
   df23c:	4639      	mov	r1, r7
   df23e:	f002 fd77 	bl	e1d30 <__aeabi_dmul>
   df242:	106b      	asrs	r3, r5, #1
   df244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   df248:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   df24c:	eb03 0508 	add.w	r5, r3, r8
   df250:	460a      	mov	r2, r1
   df252:	2300      	movs	r3, #0
   df254:	4601      	mov	r1, r0
   df256:	e9cd 1202 	strd	r1, r2, [sp, #8]
   df25a:	9302      	str	r3, [sp, #8]
   df25c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   df260:	2400      	movs	r4, #0
   df262:	e9cd 1204 	strd	r1, r2, [sp, #16]
   df266:	462b      	mov	r3, r5
   df268:	4622      	mov	r2, r4
   df26a:	4640      	mov	r0, r8
   df26c:	4649      	mov	r1, r9
   df26e:	f002 fd5f 	bl	e1d30 <__aeabi_dmul>
   df272:	4602      	mov	r2, r0
   df274:	460b      	mov	r3, r1
   df276:	4630      	mov	r0, r6
   df278:	4639      	mov	r1, r7
   df27a:	f002 fba5 	bl	e19c8 <__aeabi_dsub>
   df27e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df282:	4606      	mov	r6, r0
   df284:	460f      	mov	r7, r1
   df286:	4620      	mov	r0, r4
   df288:	4629      	mov	r1, r5
   df28a:	f002 fb9d 	bl	e19c8 <__aeabi_dsub>
   df28e:	4602      	mov	r2, r0
   df290:	460b      	mov	r3, r1
   df292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   df296:	f002 fb97 	bl	e19c8 <__aeabi_dsub>
   df29a:	4642      	mov	r2, r8
   df29c:	464b      	mov	r3, r9
   df29e:	f002 fd47 	bl	e1d30 <__aeabi_dmul>
   df2a2:	4602      	mov	r2, r0
   df2a4:	460b      	mov	r3, r1
   df2a6:	4630      	mov	r0, r6
   df2a8:	4639      	mov	r1, r7
   df2aa:	f002 fb8d 	bl	e19c8 <__aeabi_dsub>
   df2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   df2b2:	f002 fd3d 	bl	e1d30 <__aeabi_dmul>
   df2b6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   df2ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   df2be:	4622      	mov	r2, r4
   df2c0:	462b      	mov	r3, r5
   df2c2:	4620      	mov	r0, r4
   df2c4:	4629      	mov	r1, r5
   df2c6:	f002 fd33 	bl	e1d30 <__aeabi_dmul>
   df2ca:	a37d      	add	r3, pc, #500	; (adr r3, df4c0 <__ieee754_pow+0x508>)
   df2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2d0:	4604      	mov	r4, r0
   df2d2:	460d      	mov	r5, r1
   df2d4:	f002 fd2c 	bl	e1d30 <__aeabi_dmul>
   df2d8:	a37b      	add	r3, pc, #492	; (adr r3, df4c8 <__ieee754_pow+0x510>)
   df2da:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2de:	f002 fb75 	bl	e19cc <__adddf3>
   df2e2:	4622      	mov	r2, r4
   df2e4:	462b      	mov	r3, r5
   df2e6:	f002 fd23 	bl	e1d30 <__aeabi_dmul>
   df2ea:	a379      	add	r3, pc, #484	; (adr r3, df4d0 <__ieee754_pow+0x518>)
   df2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2f0:	f002 fb6c 	bl	e19cc <__adddf3>
   df2f4:	4622      	mov	r2, r4
   df2f6:	462b      	mov	r3, r5
   df2f8:	f002 fd1a 	bl	e1d30 <__aeabi_dmul>
   df2fc:	a376      	add	r3, pc, #472	; (adr r3, df4d8 <__ieee754_pow+0x520>)
   df2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   df302:	f002 fb63 	bl	e19cc <__adddf3>
   df306:	4622      	mov	r2, r4
   df308:	462b      	mov	r3, r5
   df30a:	f002 fd11 	bl	e1d30 <__aeabi_dmul>
   df30e:	a374      	add	r3, pc, #464	; (adr r3, df4e0 <__ieee754_pow+0x528>)
   df310:	e9d3 2300 	ldrd	r2, r3, [r3]
   df314:	f002 fb5a 	bl	e19cc <__adddf3>
   df318:	4622      	mov	r2, r4
   df31a:	462b      	mov	r3, r5
   df31c:	f002 fd08 	bl	e1d30 <__aeabi_dmul>
   df320:	a371      	add	r3, pc, #452	; (adr r3, df4e8 <__ieee754_pow+0x530>)
   df322:	e9d3 2300 	ldrd	r2, r3, [r3]
   df326:	f002 fb51 	bl	e19cc <__adddf3>
   df32a:	4622      	mov	r2, r4
   df32c:	4606      	mov	r6, r0
   df32e:	460f      	mov	r7, r1
   df330:	462b      	mov	r3, r5
   df332:	4620      	mov	r0, r4
   df334:	4629      	mov	r1, r5
   df336:	f002 fcfb 	bl	e1d30 <__aeabi_dmul>
   df33a:	4602      	mov	r2, r0
   df33c:	460b      	mov	r3, r1
   df33e:	4630      	mov	r0, r6
   df340:	4639      	mov	r1, r7
   df342:	f002 fcf5 	bl	e1d30 <__aeabi_dmul>
   df346:	4642      	mov	r2, r8
   df348:	4604      	mov	r4, r0
   df34a:	460d      	mov	r5, r1
   df34c:	464b      	mov	r3, r9
   df34e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df352:	f002 fb3b 	bl	e19cc <__adddf3>
   df356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df35a:	f002 fce9 	bl	e1d30 <__aeabi_dmul>
   df35e:	4622      	mov	r2, r4
   df360:	462b      	mov	r3, r5
   df362:	f002 fb33 	bl	e19cc <__adddf3>
   df366:	4642      	mov	r2, r8
   df368:	4606      	mov	r6, r0
   df36a:	460f      	mov	r7, r1
   df36c:	464b      	mov	r3, r9
   df36e:	4640      	mov	r0, r8
   df370:	4649      	mov	r1, r9
   df372:	f002 fcdd 	bl	e1d30 <__aeabi_dmul>
   df376:	2200      	movs	r2, #0
   df378:	4b67      	ldr	r3, [pc, #412]	; (df518 <__ieee754_pow+0x560>)
   df37a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   df37e:	f002 fb25 	bl	e19cc <__adddf3>
   df382:	4632      	mov	r2, r6
   df384:	463b      	mov	r3, r7
   df386:	f002 fb21 	bl	e19cc <__adddf3>
   df38a:	9802      	ldr	r0, [sp, #8]
   df38c:	460d      	mov	r5, r1
   df38e:	4604      	mov	r4, r0
   df390:	4622      	mov	r2, r4
   df392:	462b      	mov	r3, r5
   df394:	4640      	mov	r0, r8
   df396:	4649      	mov	r1, r9
   df398:	f002 fcca 	bl	e1d30 <__aeabi_dmul>
   df39c:	2200      	movs	r2, #0
   df39e:	4680      	mov	r8, r0
   df3a0:	4689      	mov	r9, r1
   df3a2:	4b5d      	ldr	r3, [pc, #372]	; (df518 <__ieee754_pow+0x560>)
   df3a4:	4620      	mov	r0, r4
   df3a6:	4629      	mov	r1, r5
   df3a8:	f002 fb0e 	bl	e19c8 <__aeabi_dsub>
   df3ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   df3b0:	f002 fb0a 	bl	e19c8 <__aeabi_dsub>
   df3b4:	4602      	mov	r2, r0
   df3b6:	460b      	mov	r3, r1
   df3b8:	4630      	mov	r0, r6
   df3ba:	4639      	mov	r1, r7
   df3bc:	f002 fb04 	bl	e19c8 <__aeabi_dsub>
   df3c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df3c4:	f002 fcb4 	bl	e1d30 <__aeabi_dmul>
   df3c8:	4622      	mov	r2, r4
   df3ca:	4606      	mov	r6, r0
   df3cc:	460f      	mov	r7, r1
   df3ce:	462b      	mov	r3, r5
   df3d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df3d4:	f002 fcac 	bl	e1d30 <__aeabi_dmul>
   df3d8:	4602      	mov	r2, r0
   df3da:	460b      	mov	r3, r1
   df3dc:	4630      	mov	r0, r6
   df3de:	4639      	mov	r1, r7
   df3e0:	f002 faf4 	bl	e19cc <__adddf3>
   df3e4:	4606      	mov	r6, r0
   df3e6:	460f      	mov	r7, r1
   df3e8:	4602      	mov	r2, r0
   df3ea:	460b      	mov	r3, r1
   df3ec:	4640      	mov	r0, r8
   df3ee:	4649      	mov	r1, r9
   df3f0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   df3f4:	f002 faea 	bl	e19cc <__adddf3>
   df3f8:	9802      	ldr	r0, [sp, #8]
   df3fa:	a33d      	add	r3, pc, #244	; (adr r3, df4f0 <__ieee754_pow+0x538>)
   df3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df400:	4604      	mov	r4, r0
   df402:	460d      	mov	r5, r1
   df404:	f002 fc94 	bl	e1d30 <__aeabi_dmul>
   df408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df40c:	4680      	mov	r8, r0
   df40e:	4689      	mov	r9, r1
   df410:	4620      	mov	r0, r4
   df412:	4629      	mov	r1, r5
   df414:	f002 fad8 	bl	e19c8 <__aeabi_dsub>
   df418:	4602      	mov	r2, r0
   df41a:	460b      	mov	r3, r1
   df41c:	4630      	mov	r0, r6
   df41e:	4639      	mov	r1, r7
   df420:	f002 fad2 	bl	e19c8 <__aeabi_dsub>
   df424:	a334      	add	r3, pc, #208	; (adr r3, df4f8 <__ieee754_pow+0x540>)
   df426:	e9d3 2300 	ldrd	r2, r3, [r3]
   df42a:	f002 fc81 	bl	e1d30 <__aeabi_dmul>
   df42e:	a334      	add	r3, pc, #208	; (adr r3, df500 <__ieee754_pow+0x548>)
   df430:	e9d3 2300 	ldrd	r2, r3, [r3]
   df434:	4606      	mov	r6, r0
   df436:	460f      	mov	r7, r1
   df438:	4620      	mov	r0, r4
   df43a:	4629      	mov	r1, r5
   df43c:	f002 fc78 	bl	e1d30 <__aeabi_dmul>
   df440:	4602      	mov	r2, r0
   df442:	460b      	mov	r3, r1
   df444:	4630      	mov	r0, r6
   df446:	4639      	mov	r1, r7
   df448:	f002 fac0 	bl	e19cc <__adddf3>
   df44c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   df450:	f002 fabc 	bl	e19cc <__adddf3>
   df454:	4606      	mov	r6, r0
   df456:	980d      	ldr	r0, [sp, #52]	; 0x34
   df458:	460f      	mov	r7, r1
   df45a:	f002 fc03 	bl	e1c64 <__aeabi_i2d>
   df45e:	4632      	mov	r2, r6
   df460:	4604      	mov	r4, r0
   df462:	460d      	mov	r5, r1
   df464:	463b      	mov	r3, r7
   df466:	4640      	mov	r0, r8
   df468:	4649      	mov	r1, r9
   df46a:	f002 faaf 	bl	e19cc <__adddf3>
   df46e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   df472:	f002 faab 	bl	e19cc <__adddf3>
   df476:	4622      	mov	r2, r4
   df478:	462b      	mov	r3, r5
   df47a:	f002 faa7 	bl	e19cc <__adddf3>
   df47e:	9802      	ldr	r0, [sp, #8]
   df480:	4622      	mov	r2, r4
   df482:	462b      	mov	r3, r5
   df484:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df488:	f002 fa9e 	bl	e19c8 <__aeabi_dsub>
   df48c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   df490:	f002 fa9a 	bl	e19c8 <__aeabi_dsub>
   df494:	4642      	mov	r2, r8
   df496:	464b      	mov	r3, r9
   df498:	f002 fa96 	bl	e19c8 <__aeabi_dsub>
   df49c:	4602      	mov	r2, r0
   df49e:	460b      	mov	r3, r1
   df4a0:	4630      	mov	r0, r6
   df4a2:	4639      	mov	r1, r7
   df4a4:	f002 fa90 	bl	e19c8 <__aeabi_dsub>
   df4a8:	4680      	mov	r8, r0
   df4aa:	4689      	mov	r9, r1
   df4ac:	e036      	b.n	df51c <__ieee754_pow+0x564>
   df4ae:	bf00      	nop
	...
   df4bc:	3ff00000 	.word	0x3ff00000
   df4c0:	4a454eef 	.word	0x4a454eef
   df4c4:	3fca7e28 	.word	0x3fca7e28
   df4c8:	93c9db65 	.word	0x93c9db65
   df4cc:	3fcd864a 	.word	0x3fcd864a
   df4d0:	a91d4101 	.word	0xa91d4101
   df4d4:	3fd17460 	.word	0x3fd17460
   df4d8:	518f264d 	.word	0x518f264d
   df4dc:	3fd55555 	.word	0x3fd55555
   df4e0:	db6fabff 	.word	0xdb6fabff
   df4e4:	3fdb6db6 	.word	0x3fdb6db6
   df4e8:	33333303 	.word	0x33333303
   df4ec:	3fe33333 	.word	0x3fe33333
   df4f0:	e0000000 	.word	0xe0000000
   df4f4:	3feec709 	.word	0x3feec709
   df4f8:	dc3a03fd 	.word	0xdc3a03fd
   df4fc:	3feec709 	.word	0x3feec709
   df500:	145b01f5 	.word	0x145b01f5
   df504:	be3e2fe0 	.word	0xbe3e2fe0
   df508:	43400000 	.word	0x43400000
   df50c:	0003988e 	.word	0x0003988e
   df510:	000bb679 	.word	0x000bb679
   df514:	3ff00000 	.word	0x3ff00000
   df518:	40080000 	.word	0x40080000
   df51c:	f10b 33ff 	add.w	r3, fp, #4294967295
   df520:	ea53 030a 	orrs.w	r3, r3, sl
   df524:	f000 8188 	beq.w	df838 <__ieee754_pow+0x880>
   df528:	ed9f 7bd7 	vldr	d7, [pc, #860]	; df888 <__ieee754_pow+0x8d0>
   df52c:	ed8d 7b06 	vstr	d7, [sp, #24]
   df530:	e9dd ab00 	ldrd	sl, fp, [sp]
   df534:	4653      	mov	r3, sl
   df536:	465c      	mov	r4, fp
   df538:	e9cd 3400 	strd	r3, r4, [sp]
   df53c:	2300      	movs	r3, #0
   df53e:	9300      	str	r3, [sp, #0]
   df540:	e9dd 4500 	ldrd	r4, r5, [sp]
   df544:	4650      	mov	r0, sl
   df546:	4622      	mov	r2, r4
   df548:	462b      	mov	r3, r5
   df54a:	4659      	mov	r1, fp
   df54c:	f002 fa3c 	bl	e19c8 <__aeabi_dsub>
   df550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df554:	f002 fbec 	bl	e1d30 <__aeabi_dmul>
   df558:	4652      	mov	r2, sl
   df55a:	4606      	mov	r6, r0
   df55c:	460f      	mov	r7, r1
   df55e:	465b      	mov	r3, fp
   df560:	4640      	mov	r0, r8
   df562:	4649      	mov	r1, r9
   df564:	f002 fbe4 	bl	e1d30 <__aeabi_dmul>
   df568:	4602      	mov	r2, r0
   df56a:	460b      	mov	r3, r1
   df56c:	4630      	mov	r0, r6
   df56e:	4639      	mov	r1, r7
   df570:	f002 fa2c 	bl	e19cc <__adddf3>
   df574:	4622      	mov	r2, r4
   df576:	4680      	mov	r8, r0
   df578:	4689      	mov	r9, r1
   df57a:	462b      	mov	r3, r5
   df57c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df580:	e9cd 8904 	strd	r8, r9, [sp, #16]
   df584:	f002 fbd4 	bl	e1d30 <__aeabi_dmul>
   df588:	460b      	mov	r3, r1
   df58a:	4602      	mov	r2, r0
   df58c:	4606      	mov	r6, r0
   df58e:	460f      	mov	r7, r1
   df590:	4640      	mov	r0, r8
   df592:	4649      	mov	r1, r9
   df594:	f002 fa1a 	bl	e19cc <__adddf3>
   df598:	4bd5      	ldr	r3, [pc, #852]	; (df8f0 <__ieee754_pow+0x938>)
   df59a:	4299      	cmp	r1, r3
   df59c:	4604      	mov	r4, r0
   df59e:	460d      	mov	r5, r1
   df5a0:	468a      	mov	sl, r1
   df5a2:	f340 8123 	ble.w	df7ec <__ieee754_pow+0x834>
   df5a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   df5aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   df5ae:	4303      	orrs	r3, r0
   df5b0:	f040 8218 	bne.w	df9e4 <__ieee754_pow+0xa2c>
   df5b4:	a3b6      	add	r3, pc, #728	; (adr r3, df890 <__ieee754_pow+0x8d8>)
   df5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df5be:	f002 fa05 	bl	e19cc <__adddf3>
   df5c2:	4632      	mov	r2, r6
   df5c4:	4680      	mov	r8, r0
   df5c6:	4689      	mov	r9, r1
   df5c8:	463b      	mov	r3, r7
   df5ca:	4620      	mov	r0, r4
   df5cc:	4629      	mov	r1, r5
   df5ce:	f002 f9fb 	bl	e19c8 <__aeabi_dsub>
   df5d2:	4602      	mov	r2, r0
   df5d4:	460b      	mov	r3, r1
   df5d6:	4640      	mov	r0, r8
   df5d8:	4649      	mov	r1, r9
   df5da:	f002 fe39 	bl	e2250 <__aeabi_dcmpgt>
   df5de:	2800      	cmp	r0, #0
   df5e0:	f040 8200 	bne.w	df9e4 <__ieee754_pow+0xa2c>
   df5e4:	46a8      	mov	r8, r5
   df5e6:	ea4f 5328 	mov.w	r3, r8, asr #20
   df5ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   df5ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   df5f2:	fa42 f303 	asr.w	r3, r2, r3
   df5f6:	4453      	add	r3, sl
   df5f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   df5fc:	4dbd      	ldr	r5, [pc, #756]	; (df8f4 <__ieee754_pow+0x93c>)
   df5fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   df602:	4115      	asrs	r5, r2
   df604:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   df608:	2000      	movs	r0, #0
   df60a:	f1c2 0414 	rsb	r4, r2, #20
   df60e:	ea23 0105 	bic.w	r1, r3, r5
   df612:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   df616:	f1ba 0f00 	cmp.w	sl, #0
   df61a:	4602      	mov	r2, r0
   df61c:	460b      	mov	r3, r1
   df61e:	fa4b fb04 	asr.w	fp, fp, r4
   df622:	4630      	mov	r0, r6
   df624:	4639      	mov	r1, r7
   df626:	bfb8      	it	lt
   df628:	f1cb 0b00 	rsblt	fp, fp, #0
   df62c:	f002 f9cc 	bl	e19c8 <__aeabi_dsub>
   df630:	4602      	mov	r2, r0
   df632:	460b      	mov	r3, r1
   df634:	4606      	mov	r6, r0
   df636:	460f      	mov	r7, r1
   df638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df63c:	f002 f9c6 	bl	e19cc <__adddf3>
   df640:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   df644:	2400      	movs	r4, #0
   df646:	a394      	add	r3, pc, #592	; (adr r3, df898 <__ieee754_pow+0x8e0>)
   df648:	e9d3 2300 	ldrd	r2, r3, [r3]
   df64c:	4620      	mov	r0, r4
   df64e:	460d      	mov	r5, r1
   df650:	f002 fb6e 	bl	e1d30 <__aeabi_dmul>
   df654:	4632      	mov	r2, r6
   df656:	4680      	mov	r8, r0
   df658:	4689      	mov	r9, r1
   df65a:	463b      	mov	r3, r7
   df65c:	4620      	mov	r0, r4
   df65e:	4629      	mov	r1, r5
   df660:	f002 f9b2 	bl	e19c8 <__aeabi_dsub>
   df664:	4602      	mov	r2, r0
   df666:	460b      	mov	r3, r1
   df668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df66c:	f002 f9ac 	bl	e19c8 <__aeabi_dsub>
   df670:	a38b      	add	r3, pc, #556	; (adr r3, df8a0 <__ieee754_pow+0x8e8>)
   df672:	e9d3 2300 	ldrd	r2, r3, [r3]
   df676:	f002 fb5b 	bl	e1d30 <__aeabi_dmul>
   df67a:	a38b      	add	r3, pc, #556	; (adr r3, df8a8 <__ieee754_pow+0x8f0>)
   df67c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df680:	4606      	mov	r6, r0
   df682:	460f      	mov	r7, r1
   df684:	4620      	mov	r0, r4
   df686:	4629      	mov	r1, r5
   df688:	f002 fb52 	bl	e1d30 <__aeabi_dmul>
   df68c:	4602      	mov	r2, r0
   df68e:	460b      	mov	r3, r1
   df690:	4630      	mov	r0, r6
   df692:	4639      	mov	r1, r7
   df694:	f002 f99a 	bl	e19cc <__adddf3>
   df698:	4606      	mov	r6, r0
   df69a:	460f      	mov	r7, r1
   df69c:	4602      	mov	r2, r0
   df69e:	460b      	mov	r3, r1
   df6a0:	4640      	mov	r0, r8
   df6a2:	4649      	mov	r1, r9
   df6a4:	f002 f992 	bl	e19cc <__adddf3>
   df6a8:	4642      	mov	r2, r8
   df6aa:	464b      	mov	r3, r9
   df6ac:	4604      	mov	r4, r0
   df6ae:	460d      	mov	r5, r1
   df6b0:	f002 f98a 	bl	e19c8 <__aeabi_dsub>
   df6b4:	4602      	mov	r2, r0
   df6b6:	460b      	mov	r3, r1
   df6b8:	4630      	mov	r0, r6
   df6ba:	4639      	mov	r1, r7
   df6bc:	f002 f984 	bl	e19c8 <__aeabi_dsub>
   df6c0:	4622      	mov	r2, r4
   df6c2:	4680      	mov	r8, r0
   df6c4:	4689      	mov	r9, r1
   df6c6:	462b      	mov	r3, r5
   df6c8:	4620      	mov	r0, r4
   df6ca:	4629      	mov	r1, r5
   df6cc:	f002 fb30 	bl	e1d30 <__aeabi_dmul>
   df6d0:	a377      	add	r3, pc, #476	; (adr r3, df8b0 <__ieee754_pow+0x8f8>)
   df6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6d6:	4606      	mov	r6, r0
   df6d8:	460f      	mov	r7, r1
   df6da:	f002 fb29 	bl	e1d30 <__aeabi_dmul>
   df6de:	a376      	add	r3, pc, #472	; (adr r3, df8b8 <__ieee754_pow+0x900>)
   df6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6e4:	f002 f970 	bl	e19c8 <__aeabi_dsub>
   df6e8:	4632      	mov	r2, r6
   df6ea:	463b      	mov	r3, r7
   df6ec:	f002 fb20 	bl	e1d30 <__aeabi_dmul>
   df6f0:	a373      	add	r3, pc, #460	; (adr r3, df8c0 <__ieee754_pow+0x908>)
   df6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6f6:	f002 f969 	bl	e19cc <__adddf3>
   df6fa:	4632      	mov	r2, r6
   df6fc:	463b      	mov	r3, r7
   df6fe:	f002 fb17 	bl	e1d30 <__aeabi_dmul>
   df702:	a371      	add	r3, pc, #452	; (adr r3, df8c8 <__ieee754_pow+0x910>)
   df704:	e9d3 2300 	ldrd	r2, r3, [r3]
   df708:	f002 f95e 	bl	e19c8 <__aeabi_dsub>
   df70c:	4632      	mov	r2, r6
   df70e:	463b      	mov	r3, r7
   df710:	f002 fb0e 	bl	e1d30 <__aeabi_dmul>
   df714:	a36e      	add	r3, pc, #440	; (adr r3, df8d0 <__ieee754_pow+0x918>)
   df716:	e9d3 2300 	ldrd	r2, r3, [r3]
   df71a:	f002 f957 	bl	e19cc <__adddf3>
   df71e:	4632      	mov	r2, r6
   df720:	463b      	mov	r3, r7
   df722:	f002 fb05 	bl	e1d30 <__aeabi_dmul>
   df726:	4602      	mov	r2, r0
   df728:	460b      	mov	r3, r1
   df72a:	4620      	mov	r0, r4
   df72c:	4629      	mov	r1, r5
   df72e:	f002 f94b 	bl	e19c8 <__aeabi_dsub>
   df732:	4606      	mov	r6, r0
   df734:	460f      	mov	r7, r1
   df736:	4602      	mov	r2, r0
   df738:	460b      	mov	r3, r1
   df73a:	4620      	mov	r0, r4
   df73c:	4629      	mov	r1, r5
   df73e:	f002 faf7 	bl	e1d30 <__aeabi_dmul>
   df742:	2200      	movs	r2, #0
   df744:	e9cd 0100 	strd	r0, r1, [sp]
   df748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   df74c:	4630      	mov	r0, r6
   df74e:	4639      	mov	r1, r7
   df750:	f002 f93a 	bl	e19c8 <__aeabi_dsub>
   df754:	4602      	mov	r2, r0
   df756:	460b      	mov	r3, r1
   df758:	e9dd 0100 	ldrd	r0, r1, [sp]
   df75c:	f002 fc12 	bl	e1f84 <__aeabi_ddiv>
   df760:	4642      	mov	r2, r8
   df762:	4606      	mov	r6, r0
   df764:	460f      	mov	r7, r1
   df766:	464b      	mov	r3, r9
   df768:	4620      	mov	r0, r4
   df76a:	4629      	mov	r1, r5
   df76c:	f002 fae0 	bl	e1d30 <__aeabi_dmul>
   df770:	4642      	mov	r2, r8
   df772:	464b      	mov	r3, r9
   df774:	f002 f92a 	bl	e19cc <__adddf3>
   df778:	4602      	mov	r2, r0
   df77a:	460b      	mov	r3, r1
   df77c:	4630      	mov	r0, r6
   df77e:	4639      	mov	r1, r7
   df780:	f002 f922 	bl	e19c8 <__aeabi_dsub>
   df784:	4622      	mov	r2, r4
   df786:	462b      	mov	r3, r5
   df788:	f002 f91e 	bl	e19c8 <__aeabi_dsub>
   df78c:	4602      	mov	r2, r0
   df78e:	460b      	mov	r3, r1
   df790:	2000      	movs	r0, #0
   df792:	4959      	ldr	r1, [pc, #356]	; (df8f8 <__ieee754_pow+0x940>)
   df794:	f002 f918 	bl	e19c8 <__aeabi_dsub>
   df798:	448a      	add	sl, r1
   df79a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   df79e:	4602      	mov	r2, r0
   df7a0:	460b      	mov	r3, r1
   df7a2:	f2c0 815b 	blt.w	dfa5c <__ieee754_pow+0xaa4>
   df7a6:	4651      	mov	r1, sl
   df7a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   df7ac:	f002 fac0 	bl	e1d30 <__aeabi_dmul>
   df7b0:	ec41 0b10 	vmov	d0, r0, r1
   df7b4:	e449      	b.n	df04a <__ieee754_pow+0x92>
   df7b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   df7ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   df7be:	ea54 030b 	orrs.w	r3, r4, fp
   df7c2:	f000 8137 	beq.w	dfa34 <__ieee754_pow+0xa7c>
   df7c6:	f1bb 0f01 	cmp.w	fp, #1
   df7ca:	f47f ac80 	bne.w	df0ce <__ieee754_pow+0x116>
   df7ce:	4602      	mov	r2, r0
   df7d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df7d4:	ec43 2b10 	vmov	d0, r2, r3
   df7d8:	e437      	b.n	df04a <__ieee754_pow+0x92>
   df7da:	4632      	mov	r2, r6
   df7dc:	463b      	mov	r3, r7
   df7de:	4630      	mov	r0, r6
   df7e0:	4639      	mov	r1, r7
   df7e2:	f002 faa5 	bl	e1d30 <__aeabi_dmul>
   df7e6:	ec41 0b10 	vmov	d0, r0, r1
   df7ea:	e42e      	b.n	df04a <__ieee754_pow+0x92>
   df7ec:	4b43      	ldr	r3, [pc, #268]	; (df8fc <__ieee754_pow+0x944>)
   df7ee:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df7f2:	4598      	cmp	r8, r3
   df7f4:	f340 8115 	ble.w	dfa22 <__ieee754_pow+0xa6a>
   df7f8:	4b41      	ldr	r3, [pc, #260]	; (df900 <__ieee754_pow+0x948>)
   df7fa:	440b      	add	r3, r1
   df7fc:	4303      	orrs	r3, r0
   df7fe:	d10c      	bne.n	df81a <__ieee754_pow+0x862>
   df800:	4632      	mov	r2, r6
   df802:	463b      	mov	r3, r7
   df804:	f002 f8e0 	bl	e19c8 <__aeabi_dsub>
   df808:	4602      	mov	r2, r0
   df80a:	460b      	mov	r3, r1
   df80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df810:	f002 fd0a 	bl	e2228 <__aeabi_dcmple>
   df814:	2800      	cmp	r0, #0
   df816:	f43f aee6 	beq.w	df5e6 <__ieee754_pow+0x62e>
   df81a:	a32f      	add	r3, pc, #188	; (adr r3, df8d8 <__ieee754_pow+0x920>)
   df81c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df824:	f002 fa84 	bl	e1d30 <__aeabi_dmul>
   df828:	a32b      	add	r3, pc, #172	; (adr r3, df8d8 <__ieee754_pow+0x920>)
   df82a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df82e:	f002 fa7f 	bl	e1d30 <__aeabi_dmul>
   df832:	ec41 0b10 	vmov	d0, r0, r1
   df836:	e408      	b.n	df04a <__ieee754_pow+0x92>
   df838:	ed9f 7b29 	vldr	d7, [pc, #164]	; df8e0 <__ieee754_pow+0x928>
   df83c:	ed8d 7b06 	vstr	d7, [sp, #24]
   df840:	e676      	b.n	df530 <__ieee754_pow+0x578>
   df842:	f1b9 0f00 	cmp.w	r9, #0
   df846:	f6bf ac8e 	bge.w	df166 <__ieee754_pow+0x1ae>
   df84a:	e9dd 3400 	ldrd	r3, r4, [sp]
   df84e:	ee00 3a10 	vmov	s0, r3
   df852:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   df856:	ee00 3a90 	vmov	s1, r3
   df85a:	f7ff bbf6 	b.w	df04a <__ieee754_pow+0x92>
   df85e:	4602      	mov	r2, r0
   df860:	460b      	mov	r3, r1
   df862:	2000      	movs	r0, #0
   df864:	4924      	ldr	r1, [pc, #144]	; (df8f8 <__ieee754_pow+0x940>)
   df866:	f002 fb8d 	bl	e1f84 <__aeabi_ddiv>
   df86a:	e42d      	b.n	df0c8 <__ieee754_pow+0x110>
   df86c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; df8e8 <__ieee754_pow+0x930>
   df870:	ed8d 7b08 	vstr	d7, [sp, #32]
   df874:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   df878:	ed9f 7b03 	vldr	d7, [pc, #12]	; df888 <__ieee754_pow+0x8d0>
   df87c:	f04f 0800 	mov.w	r8, #0
   df880:	ed8d 7b06 	vstr	d7, [sp, #24]
   df884:	e4be      	b.n	df204 <__ieee754_pow+0x24c>
   df886:	bf00      	nop
   df888:	00000000 	.word	0x00000000
   df88c:	3ff00000 	.word	0x3ff00000
   df890:	652b82fe 	.word	0x652b82fe
   df894:	3c971547 	.word	0x3c971547
   df898:	00000000 	.word	0x00000000
   df89c:	3fe62e43 	.word	0x3fe62e43
   df8a0:	fefa39ef 	.word	0xfefa39ef
   df8a4:	3fe62e42 	.word	0x3fe62e42
   df8a8:	0ca86c39 	.word	0x0ca86c39
   df8ac:	be205c61 	.word	0xbe205c61
   df8b0:	72bea4d0 	.word	0x72bea4d0
   df8b4:	3e663769 	.word	0x3e663769
   df8b8:	c5d26bf1 	.word	0xc5d26bf1
   df8bc:	3ebbbd41 	.word	0x3ebbbd41
   df8c0:	af25de2c 	.word	0xaf25de2c
   df8c4:	3f11566a 	.word	0x3f11566a
   df8c8:	16bebd93 	.word	0x16bebd93
   df8cc:	3f66c16c 	.word	0x3f66c16c
   df8d0:	5555553e 	.word	0x5555553e
   df8d4:	3fc55555 	.word	0x3fc55555
   df8d8:	c2f8f359 	.word	0xc2f8f359
   df8dc:	01a56e1f 	.word	0x01a56e1f
   df8e0:	00000000 	.word	0x00000000
   df8e4:	bff00000 	.word	0xbff00000
	...
   df8f0:	408fffff 	.word	0x408fffff
   df8f4:	000fffff 	.word	0x000fffff
   df8f8:	3ff00000 	.word	0x3ff00000
   df8fc:	4090cbff 	.word	0x4090cbff
   df900:	3f6f3400 	.word	0x3f6f3400
   df904:	4b6c      	ldr	r3, [pc, #432]	; (dfab8 <__ieee754_pow+0xb00>)
   df906:	429c      	cmp	r4, r3
   df908:	f77f ac2a 	ble.w	df160 <__ieee754_pow+0x1a8>
   df90c:	4b6b      	ldr	r3, [pc, #428]	; (dfabc <__ieee754_pow+0xb04>)
   df90e:	429c      	cmp	r4, r3
   df910:	f73f abc3 	bgt.w	df09a <__ieee754_pow+0xe2>
   df914:	2200      	movs	r2, #0
   df916:	4b69      	ldr	r3, [pc, #420]	; (dfabc <__ieee754_pow+0xb04>)
   df918:	f002 f856 	bl	e19c8 <__aeabi_dsub>
   df91c:	a356      	add	r3, pc, #344	; (adr r3, dfa78 <__ieee754_pow+0xac0>)
   df91e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df922:	4604      	mov	r4, r0
   df924:	460d      	mov	r5, r1
   df926:	f002 fa03 	bl	e1d30 <__aeabi_dmul>
   df92a:	a355      	add	r3, pc, #340	; (adr r3, dfa80 <__ieee754_pow+0xac8>)
   df92c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df930:	4680      	mov	r8, r0
   df932:	4689      	mov	r9, r1
   df934:	4620      	mov	r0, r4
   df936:	4629      	mov	r1, r5
   df938:	f002 f9fa 	bl	e1d30 <__aeabi_dmul>
   df93c:	2200      	movs	r2, #0
   df93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df942:	4b5f      	ldr	r3, [pc, #380]	; (dfac0 <__ieee754_pow+0xb08>)
   df944:	4620      	mov	r0, r4
   df946:	4629      	mov	r1, r5
   df948:	f002 f9f2 	bl	e1d30 <__aeabi_dmul>
   df94c:	4602      	mov	r2, r0
   df94e:	460b      	mov	r3, r1
   df950:	a14d      	add	r1, pc, #308	; (adr r1, dfa88 <__ieee754_pow+0xad0>)
   df952:	e9d1 0100 	ldrd	r0, r1, [r1]
   df956:	f002 f837 	bl	e19c8 <__aeabi_dsub>
   df95a:	4622      	mov	r2, r4
   df95c:	462b      	mov	r3, r5
   df95e:	f002 f9e7 	bl	e1d30 <__aeabi_dmul>
   df962:	4602      	mov	r2, r0
   df964:	460b      	mov	r3, r1
   df966:	2000      	movs	r0, #0
   df968:	4956      	ldr	r1, [pc, #344]	; (dfac4 <__ieee754_pow+0xb0c>)
   df96a:	f002 f82d 	bl	e19c8 <__aeabi_dsub>
   df96e:	4622      	mov	r2, r4
   df970:	462b      	mov	r3, r5
   df972:	4606      	mov	r6, r0
   df974:	460f      	mov	r7, r1
   df976:	4620      	mov	r0, r4
   df978:	4629      	mov	r1, r5
   df97a:	f002 f9d9 	bl	e1d30 <__aeabi_dmul>
   df97e:	4602      	mov	r2, r0
   df980:	460b      	mov	r3, r1
   df982:	4630      	mov	r0, r6
   df984:	4639      	mov	r1, r7
   df986:	f002 f9d3 	bl	e1d30 <__aeabi_dmul>
   df98a:	a341      	add	r3, pc, #260	; (adr r3, dfa90 <__ieee754_pow+0xad8>)
   df98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df990:	f002 f9ce 	bl	e1d30 <__aeabi_dmul>
   df994:	4602      	mov	r2, r0
   df996:	460b      	mov	r3, r1
   df998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   df99c:	f002 f814 	bl	e19c8 <__aeabi_dsub>
   df9a0:	4602      	mov	r2, r0
   df9a2:	460b      	mov	r3, r1
   df9a4:	4604      	mov	r4, r0
   df9a6:	460d      	mov	r5, r1
   df9a8:	4640      	mov	r0, r8
   df9aa:	4649      	mov	r1, r9
   df9ac:	f002 f80e 	bl	e19cc <__adddf3>
   df9b0:	4642      	mov	r2, r8
   df9b2:	464b      	mov	r3, r9
   df9b4:	2000      	movs	r0, #0
   df9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df9ba:	f002 f805 	bl	e19c8 <__aeabi_dsub>
   df9be:	4602      	mov	r2, r0
   df9c0:	460b      	mov	r3, r1
   df9c2:	4620      	mov	r0, r4
   df9c4:	4629      	mov	r1, r5
   df9c6:	f001 ffff 	bl	e19c8 <__aeabi_dsub>
   df9ca:	4680      	mov	r8, r0
   df9cc:	4689      	mov	r9, r1
   df9ce:	e5a5      	b.n	df51c <__ieee754_pow+0x564>
   df9d0:	4632      	mov	r2, r6
   df9d2:	463b      	mov	r3, r7
   df9d4:	2000      	movs	r0, #0
   df9d6:	4939      	ldr	r1, [pc, #228]	; (dfabc <__ieee754_pow+0xb04>)
   df9d8:	f002 fad4 	bl	e1f84 <__aeabi_ddiv>
   df9dc:	ec41 0b10 	vmov	d0, r0, r1
   df9e0:	f7ff bb33 	b.w	df04a <__ieee754_pow+0x92>
   df9e4:	a32c      	add	r3, pc, #176	; (adr r3, dfa98 <__ieee754_pow+0xae0>)
   df9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df9ee:	f002 f99f 	bl	e1d30 <__aeabi_dmul>
   df9f2:	a329      	add	r3, pc, #164	; (adr r3, dfa98 <__ieee754_pow+0xae0>)
   df9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9f8:	f002 f99a 	bl	e1d30 <__aeabi_dmul>
   df9fc:	ec41 0b10 	vmov	d0, r0, r1
   dfa00:	f7ff bb23 	b.w	df04a <__ieee754_pow+0x92>
   dfa04:	f1be 0f00 	cmp.w	lr, #0
   dfa08:	f47f ab2a 	bne.w	df060 <__ieee754_pow+0xa8>
   dfa0c:	f1c3 0314 	rsb	r3, r3, #20
   dfa10:	fa48 f203 	asr.w	r2, r8, r3
   dfa14:	fa02 f303 	lsl.w	r3, r2, r3
   dfa18:	4598      	cmp	r8, r3
   dfa1a:	d027      	beq.n	dfa6c <__ieee754_pow+0xab4>
   dfa1c:	46f3      	mov	fp, lr
   dfa1e:	f7ff baf7 	b.w	df010 <__ieee754_pow+0x58>
   dfa22:	4b28      	ldr	r3, [pc, #160]	; (dfac4 <__ieee754_pow+0xb0c>)
   dfa24:	4598      	cmp	r8, r3
   dfa26:	f73f adde 	bgt.w	df5e6 <__ieee754_pow+0x62e>
   dfa2a:	e9dd 3400 	ldrd	r3, r4, [sp]
   dfa2e:	469a      	mov	sl, r3
   dfa30:	469b      	mov	fp, r3
   dfa32:	e607      	b.n	df644 <__ieee754_pow+0x68c>
   dfa34:	4602      	mov	r2, r0
   dfa36:	460b      	mov	r3, r1
   dfa38:	f7ff bb89 	b.w	df14e <__ieee754_pow+0x196>
   dfa3c:	ed9f 7b18 	vldr	d7, [pc, #96]	; dfaa0 <__ieee754_pow+0xae8>
   dfa40:	ed8d 7b08 	vstr	d7, [sp, #32]
   dfa44:	ed9f 7b18 	vldr	d7, [pc, #96]	; dfaa8 <__ieee754_pow+0xaf0>
   dfa48:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   dfa4c:	ed9f 7b18 	vldr	d7, [pc, #96]	; dfab0 <__ieee754_pow+0xaf8>
   dfa50:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   dfa54:	ed8d 7b06 	vstr	d7, [sp, #24]
   dfa58:	f7ff bbd4 	b.w	df204 <__ieee754_pow+0x24c>
   dfa5c:	4658      	mov	r0, fp
   dfa5e:	ec43 2b10 	vmov	d0, r2, r3
   dfa62:	f001 ff19 	bl	e1898 <scalbn>
   dfa66:	ec51 0b10 	vmov	r0, r1, d0
   dfa6a:	e69d      	b.n	df7a8 <__ieee754_pow+0x7f0>
   dfa6c:	f002 0201 	and.w	r2, r2, #1
   dfa70:	f1c2 0b02 	rsb	fp, r2, #2
   dfa74:	f7ff bacc 	b.w	df010 <__ieee754_pow+0x58>
   dfa78:	60000000 	.word	0x60000000
   dfa7c:	3ff71547 	.word	0x3ff71547
   dfa80:	f85ddf44 	.word	0xf85ddf44
   dfa84:	3e54ae0b 	.word	0x3e54ae0b
   dfa88:	55555555 	.word	0x55555555
   dfa8c:	3fd55555 	.word	0x3fd55555
   dfa90:	652b82fe 	.word	0x652b82fe
   dfa94:	3ff71547 	.word	0x3ff71547
   dfa98:	8800759c 	.word	0x8800759c
   dfa9c:	7e37e43c 	.word	0x7e37e43c
   dfaa0:	40000000 	.word	0x40000000
   dfaa4:	3fe2b803 	.word	0x3fe2b803
   dfaa8:	43cfd006 	.word	0x43cfd006
   dfaac:	3e4cfdeb 	.word	0x3e4cfdeb
   dfab0:	00000000 	.word	0x00000000
   dfab4:	3ff80000 	.word	0x3ff80000
   dfab8:	3feffffe 	.word	0x3feffffe
   dfabc:	3ff00000 	.word	0x3ff00000
   dfac0:	3fd00000 	.word	0x3fd00000
   dfac4:	3fe00000 	.word	0x3fe00000

000dfac8 <__ieee754_rem_pio2>:
   dfac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfacc:	ec53 2b10 	vmov	r2, r3, d0
   dfad0:	4997      	ldr	r1, [pc, #604]	; (dfd30 <__ieee754_rem_pio2+0x268>)
   dfad2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   dfad6:	458b      	cmp	fp, r1
   dfad8:	b08f      	sub	sp, #60	; 0x3c
   dfada:	f340 8087 	ble.w	dfbec <__ieee754_rem_pio2+0x124>
   dfade:	4995      	ldr	r1, [pc, #596]	; (dfd34 <__ieee754_rem_pio2+0x26c>)
   dfae0:	458b      	cmp	fp, r1
   dfae2:	461c      	mov	r4, r3
   dfae4:	4682      	mov	sl, r0
   dfae6:	dc29      	bgt.n	dfb3c <__ieee754_rem_pio2+0x74>
   dfae8:	2c00      	cmp	r4, #0
   dfaea:	4619      	mov	r1, r3
   dfaec:	ee10 0a10 	vmov	r0, s0
   dfaf0:	a385      	add	r3, pc, #532	; (adr r3, dfd08 <__ieee754_rem_pio2+0x240>)
   dfaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfaf6:	f340 81a5 	ble.w	dfe44 <__ieee754_rem_pio2+0x37c>
   dfafa:	f001 ff65 	bl	e19c8 <__aeabi_dsub>
   dfafe:	4b8e      	ldr	r3, [pc, #568]	; (dfd38 <__ieee754_rem_pio2+0x270>)
   dfb00:	459b      	cmp	fp, r3
   dfb02:	4604      	mov	r4, r0
   dfb04:	460d      	mov	r5, r1
   dfb06:	f000 8087 	beq.w	dfc18 <__ieee754_rem_pio2+0x150>
   dfb0a:	a381      	add	r3, pc, #516	; (adr r3, dfd10 <__ieee754_rem_pio2+0x248>)
   dfb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb10:	f001 ff5a 	bl	e19c8 <__aeabi_dsub>
   dfb14:	4602      	mov	r2, r0
   dfb16:	460b      	mov	r3, r1
   dfb18:	e9ca 2300 	strd	r2, r3, [sl]
   dfb1c:	4620      	mov	r0, r4
   dfb1e:	4629      	mov	r1, r5
   dfb20:	f001 ff52 	bl	e19c8 <__aeabi_dsub>
   dfb24:	a37a      	add	r3, pc, #488	; (adr r3, dfd10 <__ieee754_rem_pio2+0x248>)
   dfb26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb2a:	f001 ff4d 	bl	e19c8 <__aeabi_dsub>
   dfb2e:	2501      	movs	r5, #1
   dfb30:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfb34:	4628      	mov	r0, r5
   dfb36:	b00f      	add	sp, #60	; 0x3c
   dfb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfb3c:	497f      	ldr	r1, [pc, #508]	; (dfd3c <__ieee754_rem_pio2+0x274>)
   dfb3e:	458b      	cmp	fp, r1
   dfb40:	f340 8087 	ble.w	dfc52 <__ieee754_rem_pio2+0x18a>
   dfb44:	497e      	ldr	r1, [pc, #504]	; (dfd40 <__ieee754_rem_pio2+0x278>)
   dfb46:	458b      	cmp	fp, r1
   dfb48:	dc5b      	bgt.n	dfc02 <__ieee754_rem_pio2+0x13a>
   dfb4a:	ea4f 552b 	mov.w	r5, fp, asr #20
   dfb4e:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   dfb52:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   dfb56:	4610      	mov	r0, r2
   dfb58:	4639      	mov	r1, r7
   dfb5a:	ee10 6a10 	vmov	r6, s0
   dfb5e:	f002 fb97 	bl	e2290 <__aeabi_d2iz>
   dfb62:	f002 f87f 	bl	e1c64 <__aeabi_i2d>
   dfb66:	4680      	mov	r8, r0
   dfb68:	4689      	mov	r9, r1
   dfb6a:	4642      	mov	r2, r8
   dfb6c:	464b      	mov	r3, r9
   dfb6e:	4630      	mov	r0, r6
   dfb70:	4639      	mov	r1, r7
   dfb72:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dfb76:	f001 ff27 	bl	e19c8 <__aeabi_dsub>
   dfb7a:	2200      	movs	r2, #0
   dfb7c:	4b71      	ldr	r3, [pc, #452]	; (dfd44 <__ieee754_rem_pio2+0x27c>)
   dfb7e:	f002 f8d7 	bl	e1d30 <__aeabi_dmul>
   dfb82:	4689      	mov	r9, r1
   dfb84:	4680      	mov	r8, r0
   dfb86:	f002 fb83 	bl	e2290 <__aeabi_d2iz>
   dfb8a:	f002 f86b 	bl	e1c64 <__aeabi_i2d>
   dfb8e:	4606      	mov	r6, r0
   dfb90:	460f      	mov	r7, r1
   dfb92:	4632      	mov	r2, r6
   dfb94:	463b      	mov	r3, r7
   dfb96:	4640      	mov	r0, r8
   dfb98:	4649      	mov	r1, r9
   dfb9a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   dfb9e:	f001 ff13 	bl	e19c8 <__aeabi_dsub>
   dfba2:	2200      	movs	r2, #0
   dfba4:	4b67      	ldr	r3, [pc, #412]	; (dfd44 <__ieee754_rem_pio2+0x27c>)
   dfba6:	f002 f8c3 	bl	e1d30 <__aeabi_dmul>
   dfbaa:	2200      	movs	r2, #0
   dfbac:	2300      	movs	r3, #0
   dfbae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dfbb2:	f002 fb25 	bl	e2200 <__aeabi_dcmpeq>
   dfbb6:	2800      	cmp	r0, #0
   dfbb8:	f000 8170 	beq.w	dfe9c <__ieee754_rem_pio2+0x3d4>
   dfbbc:	2300      	movs	r3, #0
   dfbbe:	4630      	mov	r0, r6
   dfbc0:	4639      	mov	r1, r7
   dfbc2:	2200      	movs	r2, #0
   dfbc4:	f002 fb1c 	bl	e2200 <__aeabi_dcmpeq>
   dfbc8:	2800      	cmp	r0, #0
   dfbca:	bf14      	ite	ne
   dfbcc:	2301      	movne	r3, #1
   dfbce:	2302      	moveq	r3, #2
   dfbd0:	4a5d      	ldr	r2, [pc, #372]	; (dfd48 <__ieee754_rem_pio2+0x280>)
   dfbd2:	9201      	str	r2, [sp, #4]
   dfbd4:	2102      	movs	r1, #2
   dfbd6:	9100      	str	r1, [sp, #0]
   dfbd8:	462a      	mov	r2, r5
   dfbda:	4651      	mov	r1, sl
   dfbdc:	a808      	add	r0, sp, #32
   dfbde:	f000 fc93 	bl	e0508 <__kernel_rem_pio2>
   dfbe2:	2c00      	cmp	r4, #0
   dfbe4:	f2c0 814c 	blt.w	dfe80 <__ieee754_rem_pio2+0x3b8>
   dfbe8:	4605      	mov	r5, r0
   dfbea:	e006      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfbec:	ed80 0b00 	vstr	d0, [r0]
   dfbf0:	2500      	movs	r5, #0
   dfbf2:	2400      	movs	r4, #0
   dfbf4:	e9c0 4502 	strd	r4, r5, [r0, #8]
   dfbf8:	2500      	movs	r5, #0
   dfbfa:	4628      	mov	r0, r5
   dfbfc:	b00f      	add	sp, #60	; 0x3c
   dfbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfc02:	ee10 0a10 	vmov	r0, s0
   dfc06:	4619      	mov	r1, r3
   dfc08:	f001 fede 	bl	e19c8 <__aeabi_dsub>
   dfc0c:	2500      	movs	r5, #0
   dfc0e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfc12:	e9ca 0100 	strd	r0, r1, [sl]
   dfc16:	e7f0      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfc18:	a33f      	add	r3, pc, #252	; (adr r3, dfd18 <__ieee754_rem_pio2+0x250>)
   dfc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc1e:	f001 fed3 	bl	e19c8 <__aeabi_dsub>
   dfc22:	a33f      	add	r3, pc, #252	; (adr r3, dfd20 <__ieee754_rem_pio2+0x258>)
   dfc24:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc28:	460d      	mov	r5, r1
   dfc2a:	4604      	mov	r4, r0
   dfc2c:	f001 fecc 	bl	e19c8 <__aeabi_dsub>
   dfc30:	4602      	mov	r2, r0
   dfc32:	460b      	mov	r3, r1
   dfc34:	e9ca 2300 	strd	r2, r3, [sl]
   dfc38:	4629      	mov	r1, r5
   dfc3a:	4620      	mov	r0, r4
   dfc3c:	f001 fec4 	bl	e19c8 <__aeabi_dsub>
   dfc40:	a337      	add	r3, pc, #220	; (adr r3, dfd20 <__ieee754_rem_pio2+0x258>)
   dfc42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc46:	f001 febf 	bl	e19c8 <__aeabi_dsub>
   dfc4a:	2501      	movs	r5, #1
   dfc4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfc50:	e7d3      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfc52:	f7fc fe65 	bl	dc920 <fabs>
   dfc56:	ec57 6b10 	vmov	r6, r7, d0
   dfc5a:	ee10 0a10 	vmov	r0, s0
   dfc5e:	a332      	add	r3, pc, #200	; (adr r3, dfd28 <__ieee754_rem_pio2+0x260>)
   dfc60:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc64:	4639      	mov	r1, r7
   dfc66:	f002 f863 	bl	e1d30 <__aeabi_dmul>
   dfc6a:	2200      	movs	r2, #0
   dfc6c:	4b37      	ldr	r3, [pc, #220]	; (dfd4c <__ieee754_rem_pio2+0x284>)
   dfc6e:	f001 fead 	bl	e19cc <__adddf3>
   dfc72:	f002 fb0d 	bl	e2290 <__aeabi_d2iz>
   dfc76:	4605      	mov	r5, r0
   dfc78:	f001 fff4 	bl	e1c64 <__aeabi_i2d>
   dfc7c:	a322      	add	r3, pc, #136	; (adr r3, dfd08 <__ieee754_rem_pio2+0x240>)
   dfc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc82:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dfc86:	f002 f853 	bl	e1d30 <__aeabi_dmul>
   dfc8a:	4602      	mov	r2, r0
   dfc8c:	460b      	mov	r3, r1
   dfc8e:	4630      	mov	r0, r6
   dfc90:	4639      	mov	r1, r7
   dfc92:	f001 fe99 	bl	e19c8 <__aeabi_dsub>
   dfc96:	a31e      	add	r3, pc, #120	; (adr r3, dfd10 <__ieee754_rem_pio2+0x248>)
   dfc98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc9c:	4680      	mov	r8, r0
   dfc9e:	4689      	mov	r9, r1
   dfca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfca4:	f002 f844 	bl	e1d30 <__aeabi_dmul>
   dfca8:	2d1f      	cmp	r5, #31
   dfcaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfcae:	dc51      	bgt.n	dfd54 <__ieee754_rem_pio2+0x28c>
   dfcb0:	4b27      	ldr	r3, [pc, #156]	; (dfd50 <__ieee754_rem_pio2+0x288>)
   dfcb2:	1e6a      	subs	r2, r5, #1
   dfcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dfcb8:	459b      	cmp	fp, r3
   dfcba:	d04b      	beq.n	dfd54 <__ieee754_rem_pio2+0x28c>
   dfcbc:	4602      	mov	r2, r0
   dfcbe:	460b      	mov	r3, r1
   dfcc0:	4640      	mov	r0, r8
   dfcc2:	4649      	mov	r1, r9
   dfcc4:	f001 fe80 	bl	e19c8 <__aeabi_dsub>
   dfcc8:	4606      	mov	r6, r0
   dfcca:	460f      	mov	r7, r1
   dfccc:	e9ca 6700 	strd	r6, r7, [sl]
   dfcd0:	4632      	mov	r2, r6
   dfcd2:	463b      	mov	r3, r7
   dfcd4:	4640      	mov	r0, r8
   dfcd6:	4649      	mov	r1, r9
   dfcd8:	f001 fe76 	bl	e19c8 <__aeabi_dsub>
   dfcdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfce0:	f001 fe72 	bl	e19c8 <__aeabi_dsub>
   dfce4:	2c00      	cmp	r4, #0
   dfce6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfcea:	da86      	bge.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfcec:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   dfcf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dfcf4:	426d      	negs	r5, r5
   dfcf6:	f8ca 6000 	str.w	r6, [sl]
   dfcfa:	f8ca 4004 	str.w	r4, [sl, #4]
   dfcfe:	f8ca 0008 	str.w	r0, [sl, #8]
   dfd02:	f8ca 300c 	str.w	r3, [sl, #12]
   dfd06:	e778      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfd08:	54400000 	.word	0x54400000
   dfd0c:	3ff921fb 	.word	0x3ff921fb
   dfd10:	1a626331 	.word	0x1a626331
   dfd14:	3dd0b461 	.word	0x3dd0b461
   dfd18:	1a600000 	.word	0x1a600000
   dfd1c:	3dd0b461 	.word	0x3dd0b461
   dfd20:	2e037073 	.word	0x2e037073
   dfd24:	3ba3198a 	.word	0x3ba3198a
   dfd28:	6dc9c883 	.word	0x6dc9c883
   dfd2c:	3fe45f30 	.word	0x3fe45f30
   dfd30:	3fe921fb 	.word	0x3fe921fb
   dfd34:	4002d97b 	.word	0x4002d97b
   dfd38:	3ff921fb 	.word	0x3ff921fb
   dfd3c:	413921fb 	.word	0x413921fb
   dfd40:	7fefffff 	.word	0x7fefffff
   dfd44:	41700000 	.word	0x41700000
   dfd48:	000e6f18 	.word	0x000e6f18
   dfd4c:	3fe00000 	.word	0x3fe00000
   dfd50:	000e6e98 	.word	0x000e6e98
   dfd54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dfd58:	4640      	mov	r0, r8
   dfd5a:	4649      	mov	r1, r9
   dfd5c:	f001 fe34 	bl	e19c8 <__aeabi_dsub>
   dfd60:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   dfd64:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dfd68:	ebc3 030b 	rsb	r3, r3, fp
   dfd6c:	4606      	mov	r6, r0
   dfd6e:	460f      	mov	r7, r1
   dfd70:	2b10      	cmp	r3, #16
   dfd72:	e9ca 6700 	strd	r6, r7, [sl]
   dfd76:	ddab      	ble.n	dfcd0 <__ieee754_rem_pio2+0x208>
   dfd78:	a35d      	add	r3, pc, #372	; (adr r3, dfef0 <__ieee754_rem_pio2+0x428>)
   dfd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfd7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfd82:	f001 ffd5 	bl	e1d30 <__aeabi_dmul>
   dfd86:	4606      	mov	r6, r0
   dfd88:	460f      	mov	r7, r1
   dfd8a:	4602      	mov	r2, r0
   dfd8c:	460b      	mov	r3, r1
   dfd8e:	4640      	mov	r0, r8
   dfd90:	4649      	mov	r1, r9
   dfd92:	f001 fe19 	bl	e19c8 <__aeabi_dsub>
   dfd96:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dfd9a:	4602      	mov	r2, r0
   dfd9c:	460b      	mov	r3, r1
   dfd9e:	4640      	mov	r0, r8
   dfda0:	4649      	mov	r1, r9
   dfda2:	f001 fe11 	bl	e19c8 <__aeabi_dsub>
   dfda6:	4632      	mov	r2, r6
   dfda8:	463b      	mov	r3, r7
   dfdaa:	f001 fe0d 	bl	e19c8 <__aeabi_dsub>
   dfdae:	a352      	add	r3, pc, #328	; (adr r3, dfef8 <__ieee754_rem_pio2+0x430>)
   dfdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfdb4:	4606      	mov	r6, r0
   dfdb6:	460f      	mov	r7, r1
   dfdb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfdbc:	f001 ffb8 	bl	e1d30 <__aeabi_dmul>
   dfdc0:	4632      	mov	r2, r6
   dfdc2:	463b      	mov	r3, r7
   dfdc4:	f001 fe00 	bl	e19c8 <__aeabi_dsub>
   dfdc8:	460b      	mov	r3, r1
   dfdca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfdce:	4602      	mov	r2, r0
   dfdd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfdd4:	f001 fdf8 	bl	e19c8 <__aeabi_dsub>
   dfdd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dfddc:	ebc3 0b0b 	rsb	fp, r3, fp
   dfde0:	4606      	mov	r6, r0
   dfde2:	460f      	mov	r7, r1
   dfde4:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   dfde8:	e9ca 6700 	strd	r6, r7, [sl]
   dfdec:	dd76      	ble.n	dfedc <__ieee754_rem_pio2+0x414>
   dfdee:	a345      	add	r3, pc, #276	; (adr r3, dff04 <__ieee754_rem_pio2+0x43c>)
   dfdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfdf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfdf8:	f001 ff9a 	bl	e1d30 <__aeabi_dmul>
   dfdfc:	4606      	mov	r6, r0
   dfdfe:	460f      	mov	r7, r1
   dfe00:	4602      	mov	r2, r0
   dfe02:	460b      	mov	r3, r1
   dfe04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfe08:	f001 fdde 	bl	e19c8 <__aeabi_dsub>
   dfe0c:	4602      	mov	r2, r0
   dfe0e:	460b      	mov	r3, r1
   dfe10:	4680      	mov	r8, r0
   dfe12:	4689      	mov	r9, r1
   dfe14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dfe18:	f001 fdd6 	bl	e19c8 <__aeabi_dsub>
   dfe1c:	4632      	mov	r2, r6
   dfe1e:	463b      	mov	r3, r7
   dfe20:	f001 fdd2 	bl	e19c8 <__aeabi_dsub>
   dfe24:	a339      	add	r3, pc, #228	; (adr r3, dff0c <__ieee754_rem_pio2+0x444>)
   dfe26:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe2a:	4606      	mov	r6, r0
   dfe2c:	460f      	mov	r7, r1
   dfe2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfe32:	f001 ff7d 	bl	e1d30 <__aeabi_dmul>
   dfe36:	4632      	mov	r2, r6
   dfe38:	463b      	mov	r3, r7
   dfe3a:	f001 fdc5 	bl	e19c8 <__aeabi_dsub>
   dfe3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dfe42:	e73b      	b.n	dfcbc <__ieee754_rem_pio2+0x1f4>
   dfe44:	f001 fdc2 	bl	e19cc <__adddf3>
   dfe48:	4b2d      	ldr	r3, [pc, #180]	; (dff00 <__ieee754_rem_pio2+0x438>)
   dfe4a:	459b      	cmp	fp, r3
   dfe4c:	4604      	mov	r4, r0
   dfe4e:	460d      	mov	r5, r1
   dfe50:	d026      	beq.n	dfea0 <__ieee754_rem_pio2+0x3d8>
   dfe52:	a325      	add	r3, pc, #148	; (adr r3, dfee8 <__ieee754_rem_pio2+0x420>)
   dfe54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe58:	f001 fdb8 	bl	e19cc <__adddf3>
   dfe5c:	4602      	mov	r2, r0
   dfe5e:	460b      	mov	r3, r1
   dfe60:	e9ca 2300 	strd	r2, r3, [sl]
   dfe64:	4629      	mov	r1, r5
   dfe66:	4620      	mov	r0, r4
   dfe68:	f001 fdae 	bl	e19c8 <__aeabi_dsub>
   dfe6c:	a31e      	add	r3, pc, #120	; (adr r3, dfee8 <__ieee754_rem_pio2+0x420>)
   dfe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfe72:	f001 fdab 	bl	e19cc <__adddf3>
   dfe76:	f04f 35ff 	mov.w	r5, #4294967295
   dfe7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfe7e:	e6bc      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfe80:	f8da 2004 	ldr.w	r2, [sl, #4]
   dfe84:	f8da 300c 	ldr.w	r3, [sl, #12]
   dfe88:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dfe8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dfe90:	4245      	negs	r5, r0
   dfe92:	f8ca 2004 	str.w	r2, [sl, #4]
   dfe96:	f8ca 300c 	str.w	r3, [sl, #12]
   dfe9a:	e6ae      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfe9c:	2303      	movs	r3, #3
   dfe9e:	e697      	b.n	dfbd0 <__ieee754_rem_pio2+0x108>
   dfea0:	a313      	add	r3, pc, #76	; (adr r3, dfef0 <__ieee754_rem_pio2+0x428>)
   dfea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfea6:	f001 fd91 	bl	e19cc <__adddf3>
   dfeaa:	a313      	add	r3, pc, #76	; (adr r3, dfef8 <__ieee754_rem_pio2+0x430>)
   dfeac:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfeb0:	460d      	mov	r5, r1
   dfeb2:	4604      	mov	r4, r0
   dfeb4:	f001 fd8a 	bl	e19cc <__adddf3>
   dfeb8:	4602      	mov	r2, r0
   dfeba:	460b      	mov	r3, r1
   dfebc:	e9ca 2300 	strd	r2, r3, [sl]
   dfec0:	4629      	mov	r1, r5
   dfec2:	4620      	mov	r0, r4
   dfec4:	f001 fd80 	bl	e19c8 <__aeabi_dsub>
   dfec8:	a30b      	add	r3, pc, #44	; (adr r3, dfef8 <__ieee754_rem_pio2+0x430>)
   dfeca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfece:	f001 fd7d 	bl	e19cc <__adddf3>
   dfed2:	f04f 35ff 	mov.w	r5, #4294967295
   dfed6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dfeda:	e68e      	b.n	dfbfa <__ieee754_rem_pio2+0x132>
   dfedc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   dfee0:	e6f6      	b.n	dfcd0 <__ieee754_rem_pio2+0x208>
   dfee2:	bf00      	nop
   dfee4:	f3af 8000 	nop.w
   dfee8:	1a626331 	.word	0x1a626331
   dfeec:	3dd0b461 	.word	0x3dd0b461
   dfef0:	1a600000 	.word	0x1a600000
   dfef4:	3dd0b461 	.word	0x3dd0b461
   dfef8:	2e037073 	.word	0x2e037073
   dfefc:	3ba3198a 	.word	0x3ba3198a
   dff00:	3ff921fb 	.word	0x3ff921fb
   dff04:	2e000000 	.word	0x2e000000
   dff08:	3ba3198a 	.word	0x3ba3198a
   dff0c:	252049c1 	.word	0x252049c1
   dff10:	397b839a 	.word	0x397b839a
   dff14:	00000000 	.word	0x00000000

000dff18 <__ieee754_sinh>:
   dff18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dff1c:	ec57 6b10 	vmov	r6, r7, d0
   dff20:	4a65      	ldr	r2, [pc, #404]	; (e00b8 <__ieee754_sinh+0x1a0>)
   dff22:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   dff26:	4590      	cmp	r8, r2
   dff28:	dc32      	bgt.n	dff90 <__ieee754_sinh+0x78>
   dff2a:	4b64      	ldr	r3, [pc, #400]	; (e00bc <__ieee754_sinh+0x1a4>)
   dff2c:	2f00      	cmp	r7, #0
   dff2e:	bfb4      	ite	lt
   dff30:	4d63      	ldrlt	r5, [pc, #396]	; (e00c0 <__ieee754_sinh+0x1a8>)
   dff32:	4d64      	ldrge	r5, [pc, #400]	; (e00c4 <__ieee754_sinh+0x1ac>)
   dff34:	4598      	cmp	r8, r3
   dff36:	f04f 0400 	mov.w	r4, #0
   dff3a:	dc14      	bgt.n	dff66 <__ieee754_sinh+0x4e>
   dff3c:	4b62      	ldr	r3, [pc, #392]	; (e00c8 <__ieee754_sinh+0x1b0>)
   dff3e:	4598      	cmp	r8, r3
   dff40:	f300 8085 	bgt.w	e004e <__ieee754_sinh+0x136>
   dff44:	a35a      	add	r3, pc, #360	; (adr r3, e00b0 <__ieee754_sinh+0x198>)
   dff46:	e9d3 2300 	ldrd	r2, r3, [r3]
   dff4a:	ee10 0a10 	vmov	r0, s0
   dff4e:	4639      	mov	r1, r7
   dff50:	f001 fd3c 	bl	e19cc <__adddf3>
   dff54:	2200      	movs	r2, #0
   dff56:	4b5d      	ldr	r3, [pc, #372]	; (e00cc <__ieee754_sinh+0x1b4>)
   dff58:	f002 f97a 	bl	e2250 <__aeabi_dcmpgt>
   dff5c:	b318      	cbz	r0, dffa6 <__ieee754_sinh+0x8e>
   dff5e:	ec47 6b10 	vmov	d0, r6, r7
   dff62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff66:	4b5a      	ldr	r3, [pc, #360]	; (e00d0 <__ieee754_sinh+0x1b8>)
   dff68:	4598      	cmp	r8, r3
   dff6a:	f340 8092 	ble.w	e0092 <__ieee754_sinh+0x17a>
   dff6e:	4b59      	ldr	r3, [pc, #356]	; (e00d4 <__ieee754_sinh+0x1bc>)
   dff70:	4598      	cmp	r8, r3
   dff72:	dd4d      	ble.n	e0010 <__ieee754_sinh+0xf8>
   dff74:	3301      	adds	r3, #1
   dff76:	4598      	cmp	r8, r3
   dff78:	d047      	beq.n	e000a <__ieee754_sinh+0xf2>
   dff7a:	4630      	mov	r0, r6
   dff7c:	4639      	mov	r1, r7
   dff7e:	a34c      	add	r3, pc, #304	; (adr r3, e00b0 <__ieee754_sinh+0x198>)
   dff80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dff84:	f001 fed4 	bl	e1d30 <__aeabi_dmul>
   dff88:	ec41 0b10 	vmov	d0, r0, r1
   dff8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff90:	ee10 2a10 	vmov	r2, s0
   dff94:	463b      	mov	r3, r7
   dff96:	4630      	mov	r0, r6
   dff98:	4639      	mov	r1, r7
   dff9a:	f001 fd17 	bl	e19cc <__adddf3>
   dff9e:	ec41 0b10 	vmov	d0, r0, r1
   dffa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dffa6:	ec47 6b10 	vmov	d0, r6, r7
   dffaa:	f7fc fcb9 	bl	dc920 <fabs>
   dffae:	f001 f96b 	bl	e1288 <expm1>
   dffb2:	ec57 6b10 	vmov	r6, r7, d0
   dffb6:	4632      	mov	r2, r6
   dffb8:	463b      	mov	r3, r7
   dffba:	4630      	mov	r0, r6
   dffbc:	4639      	mov	r1, r7
   dffbe:	f001 fd05 	bl	e19cc <__adddf3>
   dffc2:	4632      	mov	r2, r6
   dffc4:	4682      	mov	sl, r0
   dffc6:	468b      	mov	fp, r1
   dffc8:	463b      	mov	r3, r7
   dffca:	4630      	mov	r0, r6
   dffcc:	4639      	mov	r1, r7
   dffce:	f001 feaf 	bl	e1d30 <__aeabi_dmul>
   dffd2:	2200      	movs	r2, #0
   dffd4:	4680      	mov	r8, r0
   dffd6:	4689      	mov	r9, r1
   dffd8:	4b3c      	ldr	r3, [pc, #240]	; (e00cc <__ieee754_sinh+0x1b4>)
   dffda:	4630      	mov	r0, r6
   dffdc:	4639      	mov	r1, r7
   dffde:	f001 fcf5 	bl	e19cc <__adddf3>
   dffe2:	4602      	mov	r2, r0
   dffe4:	460b      	mov	r3, r1
   dffe6:	4640      	mov	r0, r8
   dffe8:	4649      	mov	r1, r9
   dffea:	f001 ffcb 	bl	e1f84 <__aeabi_ddiv>
   dffee:	4602      	mov	r2, r0
   dfff0:	460b      	mov	r3, r1
   dfff2:	4650      	mov	r0, sl
   dfff4:	4659      	mov	r1, fp
   dfff6:	f001 fce7 	bl	e19c8 <__aeabi_dsub>
   dfffa:	4622      	mov	r2, r4
   dfffc:	462b      	mov	r3, r5
   dfffe:	f001 fe97 	bl	e1d30 <__aeabi_dmul>
   e0002:	ec41 0b10 	vmov	d0, r0, r1
   e0006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e000a:	4b33      	ldr	r3, [pc, #204]	; (e00d8 <__ieee754_sinh+0x1c0>)
   e000c:	429e      	cmp	r6, r3
   e000e:	d8b4      	bhi.n	dff7a <__ieee754_sinh+0x62>
   e0010:	ec47 6b10 	vmov	d0, r6, r7
   e0014:	f7fc fc84 	bl	dc920 <fabs>
   e0018:	2200      	movs	r2, #0
   e001a:	4b2a      	ldr	r3, [pc, #168]	; (e00c4 <__ieee754_sinh+0x1ac>)
   e001c:	ec51 0b10 	vmov	r0, r1, d0
   e0020:	f001 fe86 	bl	e1d30 <__aeabi_dmul>
   e0024:	ec41 0b10 	vmov	d0, r0, r1
   e0028:	f7fe fa52 	bl	de4d0 <__ieee754_exp>
   e002c:	ec57 6b10 	vmov	r6, r7, d0
   e0030:	ee10 2a10 	vmov	r2, s0
   e0034:	463b      	mov	r3, r7
   e0036:	4620      	mov	r0, r4
   e0038:	4629      	mov	r1, r5
   e003a:	f001 fe79 	bl	e1d30 <__aeabi_dmul>
   e003e:	4632      	mov	r2, r6
   e0040:	463b      	mov	r3, r7
   e0042:	f001 fe75 	bl	e1d30 <__aeabi_dmul>
   e0046:	ec41 0b10 	vmov	d0, r0, r1
   e004a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e004e:	f7fc fc67 	bl	dc920 <fabs>
   e0052:	f001 f919 	bl	e1288 <expm1>
   e0056:	4b21      	ldr	r3, [pc, #132]	; (e00dc <__ieee754_sinh+0x1c4>)
   e0058:	4598      	cmp	r8, r3
   e005a:	ec57 6b10 	vmov	r6, r7, d0
   e005e:	ddaa      	ble.n	dffb6 <__ieee754_sinh+0x9e>
   e0060:	ee10 0a10 	vmov	r0, s0
   e0064:	2200      	movs	r2, #0
   e0066:	4b19      	ldr	r3, [pc, #100]	; (e00cc <__ieee754_sinh+0x1b4>)
   e0068:	4639      	mov	r1, r7
   e006a:	f001 fcaf 	bl	e19cc <__adddf3>
   e006e:	4602      	mov	r2, r0
   e0070:	460b      	mov	r3, r1
   e0072:	4630      	mov	r0, r6
   e0074:	4639      	mov	r1, r7
   e0076:	f001 ff85 	bl	e1f84 <__aeabi_ddiv>
   e007a:	4632      	mov	r2, r6
   e007c:	463b      	mov	r3, r7
   e007e:	f001 fca5 	bl	e19cc <__adddf3>
   e0082:	4622      	mov	r2, r4
   e0084:	462b      	mov	r3, r5
   e0086:	f001 fe53 	bl	e1d30 <__aeabi_dmul>
   e008a:	ec41 0b10 	vmov	d0, r0, r1
   e008e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0092:	f7fc fc45 	bl	dc920 <fabs>
   e0096:	f7fe fa1b 	bl	de4d0 <__ieee754_exp>
   e009a:	4620      	mov	r0, r4
   e009c:	ec53 2b10 	vmov	r2, r3, d0
   e00a0:	4629      	mov	r1, r5
   e00a2:	f001 fe45 	bl	e1d30 <__aeabi_dmul>
   e00a6:	ec41 0b10 	vmov	d0, r0, r1
   e00aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e00ae:	bf00      	nop
   e00b0:	3cac7433 	.word	0x3cac7433
   e00b4:	7fac7b1f 	.word	0x7fac7b1f
   e00b8:	7fefffff 	.word	0x7fefffff
   e00bc:	4035ffff 	.word	0x4035ffff
   e00c0:	bfe00000 	.word	0xbfe00000
   e00c4:	3fe00000 	.word	0x3fe00000
   e00c8:	3e2fffff 	.word	0x3e2fffff
   e00cc:	3ff00000 	.word	0x3ff00000
   e00d0:	40862e41 	.word	0x40862e41
   e00d4:	408633cd 	.word	0x408633cd
   e00d8:	8fb9f87d 	.word	0x8fb9f87d
   e00dc:	3fefffff 	.word	0x3fefffff

000e00e0 <__ieee754_sqrt>:
   e00e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e00e4:	4965      	ldr	r1, [pc, #404]	; (e027c <__ieee754_sqrt+0x19c>)
   e00e6:	ec55 4b10 	vmov	r4, r5, d0
   e00ea:	460e      	mov	r6, r1
   e00ec:	4029      	ands	r1, r5
   e00ee:	42b1      	cmp	r1, r6
   e00f0:	f000 8097 	beq.w	e0222 <__ieee754_sqrt+0x142>
   e00f4:	2d00      	cmp	r5, #0
   e00f6:	462b      	mov	r3, r5
   e00f8:	ee10 2a10 	vmov	r2, s0
   e00fc:	dd74      	ble.n	e01e8 <__ieee754_sqrt+0x108>
   e00fe:	152f      	asrs	r7, r5, #20
   e0100:	d07f      	beq.n	e0202 <__ieee754_sqrt+0x122>
   e0102:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   e0106:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e010a:	07f9      	lsls	r1, r7, #31
   e010c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e0110:	d465      	bmi.n	e01de <__ieee754_sqrt+0xfe>
   e0112:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   e0116:	2600      	movs	r6, #0
   e0118:	440b      	add	r3, r1
   e011a:	107f      	asrs	r7, r7, #1
   e011c:	0052      	lsls	r2, r2, #1
   e011e:	46b6      	mov	lr, r6
   e0120:	2016      	movs	r0, #22
   e0122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   e0126:	eb0e 0401 	add.w	r4, lr, r1
   e012a:	429c      	cmp	r4, r3
   e012c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   e0130:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e0134:	dc03      	bgt.n	e013e <__ieee754_sqrt+0x5e>
   e0136:	1b1b      	subs	r3, r3, r4
   e0138:	eb04 0e01 	add.w	lr, r4, r1
   e013c:	440e      	add	r6, r1
   e013e:	3801      	subs	r0, #1
   e0140:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   e0144:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e0148:	d1ed      	bne.n	e0126 <__ieee754_sqrt+0x46>
   e014a:	4684      	mov	ip, r0
   e014c:	2420      	movs	r4, #32
   e014e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   e0152:	e009      	b.n	e0168 <__ieee754_sqrt+0x88>
   e0154:	d020      	beq.n	e0198 <__ieee754_sqrt+0xb8>
   e0156:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   e015a:	3c01      	subs	r4, #1
   e015c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e0160:	442b      	add	r3, r5
   e0162:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e0166:	d020      	beq.n	e01aa <__ieee754_sqrt+0xca>
   e0168:	459e      	cmp	lr, r3
   e016a:	eb01 050c 	add.w	r5, r1, ip
   e016e:	daf1      	bge.n	e0154 <__ieee754_sqrt+0x74>
   e0170:	2d00      	cmp	r5, #0
   e0172:	eb05 0c01 	add.w	ip, r5, r1
   e0176:	db09      	blt.n	e018c <__ieee754_sqrt+0xac>
   e0178:	46f0      	mov	r8, lr
   e017a:	4295      	cmp	r5, r2
   e017c:	ebce 0303 	rsb	r3, lr, r3
   e0180:	d900      	bls.n	e0184 <__ieee754_sqrt+0xa4>
   e0182:	3b01      	subs	r3, #1
   e0184:	1b52      	subs	r2, r2, r5
   e0186:	4408      	add	r0, r1
   e0188:	46c6      	mov	lr, r8
   e018a:	e7e4      	b.n	e0156 <__ieee754_sqrt+0x76>
   e018c:	f1bc 0f00 	cmp.w	ip, #0
   e0190:	dbf2      	blt.n	e0178 <__ieee754_sqrt+0x98>
   e0192:	f10e 0801 	add.w	r8, lr, #1
   e0196:	e7f0      	b.n	e017a <__ieee754_sqrt+0x9a>
   e0198:	4295      	cmp	r5, r2
   e019a:	d81e      	bhi.n	e01da <__ieee754_sqrt+0xfa>
   e019c:	2d00      	cmp	r5, #0
   e019e:	eb05 0c01 	add.w	ip, r5, r1
   e01a2:	db50      	blt.n	e0246 <__ieee754_sqrt+0x166>
   e01a4:	4698      	mov	r8, r3
   e01a6:	2300      	movs	r3, #0
   e01a8:	e7ec      	b.n	e0184 <__ieee754_sqrt+0xa4>
   e01aa:	4313      	orrs	r3, r2
   e01ac:	d004      	beq.n	e01b8 <__ieee754_sqrt+0xd8>
   e01ae:	1c42      	adds	r2, r0, #1
   e01b0:	d04d      	beq.n	e024e <__ieee754_sqrt+0x16e>
   e01b2:	f000 0301 	and.w	r3, r0, #1
   e01b6:	4418      	add	r0, r3
   e01b8:	0840      	lsrs	r0, r0, #1
   e01ba:	1071      	asrs	r1, r6, #1
   e01bc:	07f3      	lsls	r3, r6, #31
   e01be:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   e01c2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   e01c6:	bf48      	it	mi
   e01c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   e01cc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   e01d0:	4602      	mov	r2, r0
   e01d2:	ec43 2b10 	vmov	d0, r2, r3
   e01d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e01da:	4673      	mov	r3, lr
   e01dc:	e7bb      	b.n	e0156 <__ieee754_sqrt+0x76>
   e01de:	005b      	lsls	r3, r3, #1
   e01e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   e01e4:	0052      	lsls	r2, r2, #1
   e01e6:	e794      	b.n	e0112 <__ieee754_sqrt+0x32>
   e01e8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e01ec:	4321      	orrs	r1, r4
   e01ee:	d028      	beq.n	e0242 <__ieee754_sqrt+0x162>
   e01f0:	bbad      	cbnz	r5, e025e <__ieee754_sqrt+0x17e>
   e01f2:	462f      	mov	r7, r5
   e01f4:	0ad3      	lsrs	r3, r2, #11
   e01f6:	3f15      	subs	r7, #21
   e01f8:	0552      	lsls	r2, r2, #21
   e01fa:	2b00      	cmp	r3, #0
   e01fc:	d0fa      	beq.n	e01f4 <__ieee754_sqrt+0x114>
   e01fe:	02dd      	lsls	r5, r3, #11
   e0200:	d428      	bmi.n	e0254 <__ieee754_sqrt+0x174>
   e0202:	2100      	movs	r1, #0
   e0204:	e000      	b.n	e0208 <__ieee754_sqrt+0x128>
   e0206:	4601      	mov	r1, r0
   e0208:	005b      	lsls	r3, r3, #1
   e020a:	02dc      	lsls	r4, r3, #11
   e020c:	f101 0001 	add.w	r0, r1, #1
   e0210:	d5f9      	bpl.n	e0206 <__ieee754_sqrt+0x126>
   e0212:	f1c0 0420 	rsb	r4, r0, #32
   e0216:	fa22 f404 	lsr.w	r4, r2, r4
   e021a:	4323      	orrs	r3, r4
   e021c:	1a7f      	subs	r7, r7, r1
   e021e:	4082      	lsls	r2, r0
   e0220:	e76f      	b.n	e0102 <__ieee754_sqrt+0x22>
   e0222:	ee10 2a10 	vmov	r2, s0
   e0226:	462b      	mov	r3, r5
   e0228:	ee10 0a10 	vmov	r0, s0
   e022c:	4629      	mov	r1, r5
   e022e:	f001 fd7f 	bl	e1d30 <__aeabi_dmul>
   e0232:	4622      	mov	r2, r4
   e0234:	462b      	mov	r3, r5
   e0236:	f001 fbc9 	bl	e19cc <__adddf3>
   e023a:	ec41 0b10 	vmov	d0, r0, r1
   e023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0246:	f1bc 0f00 	cmp.w	ip, #0
   e024a:	daa2      	bge.n	e0192 <__ieee754_sqrt+0xb2>
   e024c:	e7aa      	b.n	e01a4 <__ieee754_sqrt+0xc4>
   e024e:	3601      	adds	r6, #1
   e0250:	4620      	mov	r0, r4
   e0252:	e7b2      	b.n	e01ba <__ieee754_sqrt+0xda>
   e0254:	2420      	movs	r4, #32
   e0256:	f04f 31ff 	mov.w	r1, #4294967295
   e025a:	2000      	movs	r0, #0
   e025c:	e7db      	b.n	e0216 <__ieee754_sqrt+0x136>
   e025e:	ee10 2a10 	vmov	r2, s0
   e0262:	462b      	mov	r3, r5
   e0264:	4620      	mov	r0, r4
   e0266:	4629      	mov	r1, r5
   e0268:	f001 fbae 	bl	e19c8 <__aeabi_dsub>
   e026c:	4602      	mov	r2, r0
   e026e:	460b      	mov	r3, r1
   e0270:	f001 fe88 	bl	e1f84 <__aeabi_ddiv>
   e0274:	ec41 0b10 	vmov	d0, r0, r1
   e0278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e027c:	7ff00000 	.word	0x7ff00000

000e0280 <__kernel_cos>:
   e0280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0284:	ec57 6b10 	vmov	r6, r7, d0
   e0288:	ed2d 8b02 	vpush	{d8}
   e028c:	eeb0 8a41 	vmov.f32	s16, s2
   e0290:	eef0 8a61 	vmov.f32	s17, s3
   e0294:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e0298:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   e029c:	b083      	sub	sp, #12
   e029e:	da72      	bge.n	e0386 <__kernel_cos+0x106>
   e02a0:	ee10 0a10 	vmov	r0, s0
   e02a4:	4639      	mov	r1, r7
   e02a6:	f001 fff3 	bl	e2290 <__aeabi_d2iz>
   e02aa:	2800      	cmp	r0, #0
   e02ac:	f000 80f6 	beq.w	e049c <__kernel_cos+0x21c>
   e02b0:	4632      	mov	r2, r6
   e02b2:	463b      	mov	r3, r7
   e02b4:	4630      	mov	r0, r6
   e02b6:	4639      	mov	r1, r7
   e02b8:	f001 fd3a 	bl	e1d30 <__aeabi_dmul>
   e02bc:	a37c      	add	r3, pc, #496	; (adr r3, e04b0 <__kernel_cos+0x230>)
   e02be:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02c2:	4604      	mov	r4, r0
   e02c4:	460d      	mov	r5, r1
   e02c6:	f001 fd33 	bl	e1d30 <__aeabi_dmul>
   e02ca:	a37b      	add	r3, pc, #492	; (adr r3, e04b8 <__kernel_cos+0x238>)
   e02cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02d0:	f001 fb7c 	bl	e19cc <__adddf3>
   e02d4:	4622      	mov	r2, r4
   e02d6:	462b      	mov	r3, r5
   e02d8:	f001 fd2a 	bl	e1d30 <__aeabi_dmul>
   e02dc:	a378      	add	r3, pc, #480	; (adr r3, e04c0 <__kernel_cos+0x240>)
   e02de:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02e2:	f001 fb71 	bl	e19c8 <__aeabi_dsub>
   e02e6:	4622      	mov	r2, r4
   e02e8:	462b      	mov	r3, r5
   e02ea:	f001 fd21 	bl	e1d30 <__aeabi_dmul>
   e02ee:	a376      	add	r3, pc, #472	; (adr r3, e04c8 <__kernel_cos+0x248>)
   e02f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02f4:	f001 fb6a 	bl	e19cc <__adddf3>
   e02f8:	4622      	mov	r2, r4
   e02fa:	462b      	mov	r3, r5
   e02fc:	f001 fd18 	bl	e1d30 <__aeabi_dmul>
   e0300:	a373      	add	r3, pc, #460	; (adr r3, e04d0 <__kernel_cos+0x250>)
   e0302:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0306:	f001 fb5f 	bl	e19c8 <__aeabi_dsub>
   e030a:	4622      	mov	r2, r4
   e030c:	462b      	mov	r3, r5
   e030e:	f001 fd0f 	bl	e1d30 <__aeabi_dmul>
   e0312:	a371      	add	r3, pc, #452	; (adr r3, e04d8 <__kernel_cos+0x258>)
   e0314:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0318:	f001 fb58 	bl	e19cc <__adddf3>
   e031c:	4622      	mov	r2, r4
   e031e:	462b      	mov	r3, r5
   e0320:	f001 fd06 	bl	e1d30 <__aeabi_dmul>
   e0324:	4682      	mov	sl, r0
   e0326:	468b      	mov	fp, r1
   e0328:	2200      	movs	r2, #0
   e032a:	4b71      	ldr	r3, [pc, #452]	; (e04f0 <__kernel_cos+0x270>)
   e032c:	4620      	mov	r0, r4
   e032e:	4629      	mov	r1, r5
   e0330:	f001 fcfe 	bl	e1d30 <__aeabi_dmul>
   e0334:	4652      	mov	r2, sl
   e0336:	4680      	mov	r8, r0
   e0338:	4689      	mov	r9, r1
   e033a:	465b      	mov	r3, fp
   e033c:	4620      	mov	r0, r4
   e033e:	4629      	mov	r1, r5
   e0340:	f001 fcf6 	bl	e1d30 <__aeabi_dmul>
   e0344:	ec53 2b18 	vmov	r2, r3, d8
   e0348:	4604      	mov	r4, r0
   e034a:	460d      	mov	r5, r1
   e034c:	4630      	mov	r0, r6
   e034e:	4639      	mov	r1, r7
   e0350:	f001 fcee 	bl	e1d30 <__aeabi_dmul>
   e0354:	4602      	mov	r2, r0
   e0356:	460b      	mov	r3, r1
   e0358:	4620      	mov	r0, r4
   e035a:	4629      	mov	r1, r5
   e035c:	f001 fb34 	bl	e19c8 <__aeabi_dsub>
   e0360:	4602      	mov	r2, r0
   e0362:	460b      	mov	r3, r1
   e0364:	4640      	mov	r0, r8
   e0366:	4649      	mov	r1, r9
   e0368:	f001 fb2e 	bl	e19c8 <__aeabi_dsub>
   e036c:	4602      	mov	r2, r0
   e036e:	460b      	mov	r3, r1
   e0370:	2000      	movs	r0, #0
   e0372:	4960      	ldr	r1, [pc, #384]	; (e04f4 <__kernel_cos+0x274>)
   e0374:	f001 fb28 	bl	e19c8 <__aeabi_dsub>
   e0378:	ec41 0b10 	vmov	d0, r0, r1
   e037c:	b003      	add	sp, #12
   e037e:	ecbd 8b02 	vpop	{d8}
   e0382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0386:	ee10 2a10 	vmov	r2, s0
   e038a:	ee10 0a10 	vmov	r0, s0
   e038e:	463b      	mov	r3, r7
   e0390:	4639      	mov	r1, r7
   e0392:	f001 fccd 	bl	e1d30 <__aeabi_dmul>
   e0396:	a346      	add	r3, pc, #280	; (adr r3, e04b0 <__kernel_cos+0x230>)
   e0398:	e9d3 2300 	ldrd	r2, r3, [r3]
   e039c:	4604      	mov	r4, r0
   e039e:	460d      	mov	r5, r1
   e03a0:	f001 fcc6 	bl	e1d30 <__aeabi_dmul>
   e03a4:	a344      	add	r3, pc, #272	; (adr r3, e04b8 <__kernel_cos+0x238>)
   e03a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03aa:	f001 fb0f 	bl	e19cc <__adddf3>
   e03ae:	4622      	mov	r2, r4
   e03b0:	462b      	mov	r3, r5
   e03b2:	f001 fcbd 	bl	e1d30 <__aeabi_dmul>
   e03b6:	a342      	add	r3, pc, #264	; (adr r3, e04c0 <__kernel_cos+0x240>)
   e03b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03bc:	f001 fb04 	bl	e19c8 <__aeabi_dsub>
   e03c0:	4622      	mov	r2, r4
   e03c2:	462b      	mov	r3, r5
   e03c4:	f001 fcb4 	bl	e1d30 <__aeabi_dmul>
   e03c8:	a33f      	add	r3, pc, #252	; (adr r3, e04c8 <__kernel_cos+0x248>)
   e03ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03ce:	f001 fafd 	bl	e19cc <__adddf3>
   e03d2:	4622      	mov	r2, r4
   e03d4:	462b      	mov	r3, r5
   e03d6:	f001 fcab 	bl	e1d30 <__aeabi_dmul>
   e03da:	a33d      	add	r3, pc, #244	; (adr r3, e04d0 <__kernel_cos+0x250>)
   e03dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03e0:	f001 faf2 	bl	e19c8 <__aeabi_dsub>
   e03e4:	4622      	mov	r2, r4
   e03e6:	462b      	mov	r3, r5
   e03e8:	f001 fca2 	bl	e1d30 <__aeabi_dmul>
   e03ec:	a33a      	add	r3, pc, #232	; (adr r3, e04d8 <__kernel_cos+0x258>)
   e03ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03f2:	f001 faeb 	bl	e19cc <__adddf3>
   e03f6:	462b      	mov	r3, r5
   e03f8:	4622      	mov	r2, r4
   e03fa:	f001 fc99 	bl	e1d30 <__aeabi_dmul>
   e03fe:	4b3e      	ldr	r3, [pc, #248]	; (e04f8 <__kernel_cos+0x278>)
   e0400:	4599      	cmp	r9, r3
   e0402:	4682      	mov	sl, r0
   e0404:	468b      	mov	fp, r1
   e0406:	dd8f      	ble.n	e0328 <__kernel_cos+0xa8>
   e0408:	4b3c      	ldr	r3, [pc, #240]	; (e04fc <__kernel_cos+0x27c>)
   e040a:	4599      	cmp	r9, r3
   e040c:	dc3d      	bgt.n	e048a <__kernel_cos+0x20a>
   e040e:	2200      	movs	r2, #0
   e0410:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e0414:	2000      	movs	r0, #0
   e0416:	4937      	ldr	r1, [pc, #220]	; (e04f4 <__kernel_cos+0x274>)
   e0418:	4690      	mov	r8, r2
   e041a:	4699      	mov	r9, r3
   e041c:	f001 fad4 	bl	e19c8 <__aeabi_dsub>
   e0420:	e9cd 0100 	strd	r0, r1, [sp]
   e0424:	2200      	movs	r2, #0
   e0426:	4b32      	ldr	r3, [pc, #200]	; (e04f0 <__kernel_cos+0x270>)
   e0428:	4620      	mov	r0, r4
   e042a:	4629      	mov	r1, r5
   e042c:	f001 fc80 	bl	e1d30 <__aeabi_dmul>
   e0430:	4642      	mov	r2, r8
   e0432:	464b      	mov	r3, r9
   e0434:	f001 fac8 	bl	e19c8 <__aeabi_dsub>
   e0438:	4652      	mov	r2, sl
   e043a:	4680      	mov	r8, r0
   e043c:	4689      	mov	r9, r1
   e043e:	465b      	mov	r3, fp
   e0440:	4620      	mov	r0, r4
   e0442:	4629      	mov	r1, r5
   e0444:	f001 fc74 	bl	e1d30 <__aeabi_dmul>
   e0448:	ec53 2b18 	vmov	r2, r3, d8
   e044c:	4604      	mov	r4, r0
   e044e:	460d      	mov	r5, r1
   e0450:	4630      	mov	r0, r6
   e0452:	4639      	mov	r1, r7
   e0454:	f001 fc6c 	bl	e1d30 <__aeabi_dmul>
   e0458:	4602      	mov	r2, r0
   e045a:	460b      	mov	r3, r1
   e045c:	4620      	mov	r0, r4
   e045e:	4629      	mov	r1, r5
   e0460:	f001 fab2 	bl	e19c8 <__aeabi_dsub>
   e0464:	4602      	mov	r2, r0
   e0466:	460b      	mov	r3, r1
   e0468:	4640      	mov	r0, r8
   e046a:	4649      	mov	r1, r9
   e046c:	f001 faac 	bl	e19c8 <__aeabi_dsub>
   e0470:	4602      	mov	r2, r0
   e0472:	460b      	mov	r3, r1
   e0474:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0478:	f001 faa6 	bl	e19c8 <__aeabi_dsub>
   e047c:	ec41 0b10 	vmov	d0, r0, r1
   e0480:	b003      	add	sp, #12
   e0482:	ecbd 8b02 	vpop	{d8}
   e0486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e048a:	ed9f 7b15 	vldr	d7, [pc, #84]	; e04e0 <__kernel_cos+0x260>
   e048e:	f04f 0800 	mov.w	r8, #0
   e0492:	ed8d 7b00 	vstr	d7, [sp]
   e0496:	f8df 9068 	ldr.w	r9, [pc, #104]	; e0500 <__kernel_cos+0x280>
   e049a:	e7c3      	b.n	e0424 <__kernel_cos+0x1a4>
   e049c:	ed9f 0b12 	vldr	d0, [pc, #72]	; e04e8 <__kernel_cos+0x268>
   e04a0:	b003      	add	sp, #12
   e04a2:	ecbd 8b02 	vpop	{d8}
   e04a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e04aa:	bf00      	nop
   e04ac:	f3af 8000 	nop.w
   e04b0:	be8838d4 	.word	0xbe8838d4
   e04b4:	bda8fae9 	.word	0xbda8fae9
   e04b8:	bdb4b1c4 	.word	0xbdb4b1c4
   e04bc:	3e21ee9e 	.word	0x3e21ee9e
   e04c0:	809c52ad 	.word	0x809c52ad
   e04c4:	3e927e4f 	.word	0x3e927e4f
   e04c8:	19cb1590 	.word	0x19cb1590
   e04cc:	3efa01a0 	.word	0x3efa01a0
   e04d0:	16c15177 	.word	0x16c15177
   e04d4:	3f56c16c 	.word	0x3f56c16c
   e04d8:	5555554c 	.word	0x5555554c
   e04dc:	3fa55555 	.word	0x3fa55555
   e04e0:	00000000 	.word	0x00000000
   e04e4:	3fe70000 	.word	0x3fe70000
   e04e8:	00000000 	.word	0x00000000
   e04ec:	3ff00000 	.word	0x3ff00000
   e04f0:	3fe00000 	.word	0x3fe00000
   e04f4:	3ff00000 	.word	0x3ff00000
   e04f8:	3fd33332 	.word	0x3fd33332
   e04fc:	3fe90000 	.word	0x3fe90000
   e0500:	3fd20000 	.word	0x3fd20000
   e0504:	00000000 	.word	0x00000000

000e0508 <__kernel_rem_pio2>:
   e0508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e050c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e0510:	4c81      	ldr	r4, [pc, #516]	; (e0718 <__kernel_rem_pio2+0x210>)
   e0512:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e0514:	4d81      	ldr	r5, [pc, #516]	; (e071c <__kernel_rem_pio2+0x214>)
   e0516:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e051a:	9407      	str	r4, [sp, #28]
   e051c:	4626      	mov	r6, r4
   e051e:	1ed4      	subs	r4, r2, #3
   e0520:	fb85 7504 	smull	r7, r5, r5, r4
   e0524:	17e4      	asrs	r4, r4, #31
   e0526:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e052a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e052e:	461d      	mov	r5, r3
   e0530:	930a      	str	r3, [sp, #40]	; 0x28
   e0532:	1c63      	adds	r3, r4, #1
   e0534:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e0538:	3d01      	subs	r5, #1
   e053a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e053e:	9306      	str	r3, [sp, #24]
   e0540:	462b      	mov	r3, r5
   e0542:	940b      	str	r4, [sp, #44]	; 0x2c
   e0544:	9500      	str	r5, [sp, #0]
   e0546:	1b65      	subs	r5, r4, r5
   e0548:	18f4      	adds	r4, r6, r3
   e054a:	9003      	str	r0, [sp, #12]
   e054c:	9108      	str	r1, [sp, #32]
   e054e:	d416      	bmi.n	e057e <__kernel_rem_pio2+0x76>
   e0550:	442c      	add	r4, r5
   e0552:	3401      	adds	r4, #1
   e0554:	ae22      	add	r6, sp, #136	; 0x88
   e0556:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e0558:	e008      	b.n	e056c <__kernel_rem_pio2+0x64>
   e055a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e055e:	f001 fb81 	bl	e1c64 <__aeabi_i2d>
   e0562:	3501      	adds	r5, #1
   e0564:	42a5      	cmp	r5, r4
   e0566:	e8e6 0102 	strd	r0, r1, [r6], #8
   e056a:	d008      	beq.n	e057e <__kernel_rem_pio2+0x76>
   e056c:	2d00      	cmp	r5, #0
   e056e:	daf4      	bge.n	e055a <__kernel_rem_pio2+0x52>
   e0570:	3501      	adds	r5, #1
   e0572:	2000      	movs	r0, #0
   e0574:	2100      	movs	r1, #0
   e0576:	42a5      	cmp	r5, r4
   e0578:	e8e6 0102 	strd	r0, r1, [r6], #8
   e057c:	d1f6      	bne.n	e056c <__kernel_rem_pio2+0x64>
   e057e:	9b07      	ldr	r3, [sp, #28]
   e0580:	2b00      	cmp	r3, #0
   e0582:	f2c0 83c2 	blt.w	e0d0a <__kernel_rem_pio2+0x802>
   e0586:	9b07      	ldr	r3, [sp, #28]
   e0588:	f103 0b01 	add.w	fp, r3, #1
   e058c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e058e:	a922      	add	r1, sp, #136	; 0x88
   e0590:	00db      	lsls	r3, r3, #3
   e0592:	461a      	mov	r2, r3
   e0594:	eb01 0903 	add.w	r9, r1, r3
   e0598:	9304      	str	r3, [sp, #16]
   e059a:	9b03      	ldr	r3, [sp, #12]
   e059c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e05a0:	4619      	mov	r1, r3
   e05a2:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e05a6:	eb01 0802 	add.w	r8, r1, r2
   e05aa:	9b00      	ldr	r3, [sp, #0]
   e05ac:	2b00      	cmp	r3, #0
   e05ae:	f2c0 818f 	blt.w	e08d0 <__kernel_rem_pio2+0x3c8>
   e05b2:	9c03      	ldr	r4, [sp, #12]
   e05b4:	464d      	mov	r5, r9
   e05b6:	2600      	movs	r6, #0
   e05b8:	2700      	movs	r7, #0
   e05ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e05be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e05c2:	f001 fbb5 	bl	e1d30 <__aeabi_dmul>
   e05c6:	4602      	mov	r2, r0
   e05c8:	460b      	mov	r3, r1
   e05ca:	4630      	mov	r0, r6
   e05cc:	4639      	mov	r1, r7
   e05ce:	f001 f9fd 	bl	e19cc <__adddf3>
   e05d2:	4544      	cmp	r4, r8
   e05d4:	4606      	mov	r6, r0
   e05d6:	460f      	mov	r7, r1
   e05d8:	d1ef      	bne.n	e05ba <__kernel_rem_pio2+0xb2>
   e05da:	e8ea 6702 	strd	r6, r7, [sl], #8
   e05de:	45da      	cmp	sl, fp
   e05e0:	f109 0908 	add.w	r9, r9, #8
   e05e4:	d1e1      	bne.n	e05aa <__kernel_rem_pio2+0xa2>
   e05e6:	9907      	ldr	r1, [sp, #28]
   e05e8:	9804      	ldr	r0, [sp, #16]
   e05ea:	9c03      	ldr	r4, [sp, #12]
   e05ec:	9104      	str	r1, [sp, #16]
   e05ee:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e05f2:	3b02      	subs	r3, #2
   e05f4:	009b      	lsls	r3, r3, #2
   e05f6:	4420      	add	r0, r4
   e05f8:	1d1a      	adds	r2, r3, #4
   e05fa:	4683      	mov	fp, r0
   e05fc:	a80e      	add	r0, sp, #56	; 0x38
   e05fe:	4402      	add	r2, r0
   e0600:	4403      	add	r3, r0
   e0602:	920d      	str	r2, [sp, #52]	; 0x34
   e0604:	930c      	str	r3, [sp, #48]	; 0x30
   e0606:	9a04      	ldr	r2, [sp, #16]
   e0608:	a99a      	add	r1, sp, #616	; 0x268
   e060a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e060e:	2a00      	cmp	r2, #0
   e0610:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e0614:	dd29      	ble.n	e066a <__kernel_rem_pio2+0x162>
   e0616:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e061a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e061e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e0622:	2200      	movs	r2, #0
   e0624:	4b3e      	ldr	r3, [pc, #248]	; (e0720 <__kernel_rem_pio2+0x218>)
   e0626:	4620      	mov	r0, r4
   e0628:	4629      	mov	r1, r5
   e062a:	f001 fb81 	bl	e1d30 <__aeabi_dmul>
   e062e:	f001 fe2f 	bl	e2290 <__aeabi_d2iz>
   e0632:	f001 fb17 	bl	e1c64 <__aeabi_i2d>
   e0636:	2200      	movs	r2, #0
   e0638:	4b3a      	ldr	r3, [pc, #232]	; (e0724 <__kernel_rem_pio2+0x21c>)
   e063a:	4606      	mov	r6, r0
   e063c:	460f      	mov	r7, r1
   e063e:	f001 fb77 	bl	e1d30 <__aeabi_dmul>
   e0642:	4602      	mov	r2, r0
   e0644:	460b      	mov	r3, r1
   e0646:	4620      	mov	r0, r4
   e0648:	4629      	mov	r1, r5
   e064a:	f001 f9bd 	bl	e19c8 <__aeabi_dsub>
   e064e:	f001 fe1f 	bl	e2290 <__aeabi_d2iz>
   e0652:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e0656:	f849 0f04 	str.w	r0, [r9, #4]!
   e065a:	4639      	mov	r1, r7
   e065c:	4630      	mov	r0, r6
   e065e:	f001 f9b5 	bl	e19cc <__adddf3>
   e0662:	45d0      	cmp	r8, sl
   e0664:	4604      	mov	r4, r0
   e0666:	460d      	mov	r5, r1
   e0668:	d1db      	bne.n	e0622 <__kernel_rem_pio2+0x11a>
   e066a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e066e:	ec45 4b10 	vmov	d0, r4, r5
   e0672:	4648      	mov	r0, r9
   e0674:	f001 f910 	bl	e1898 <scalbn>
   e0678:	ec55 4b10 	vmov	r4, r5, d0
   e067c:	2200      	movs	r2, #0
   e067e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e0682:	ee10 0a10 	vmov	r0, s0
   e0686:	4629      	mov	r1, r5
   e0688:	f001 fb52 	bl	e1d30 <__aeabi_dmul>
   e068c:	ec41 0b10 	vmov	d0, r0, r1
   e0690:	f7fc f94e 	bl	dc930 <floor>
   e0694:	2200      	movs	r2, #0
   e0696:	ec51 0b10 	vmov	r0, r1, d0
   e069a:	4b23      	ldr	r3, [pc, #140]	; (e0728 <__kernel_rem_pio2+0x220>)
   e069c:	f001 fb48 	bl	e1d30 <__aeabi_dmul>
   e06a0:	4602      	mov	r2, r0
   e06a2:	460b      	mov	r3, r1
   e06a4:	4620      	mov	r0, r4
   e06a6:	4629      	mov	r1, r5
   e06a8:	f001 f98e 	bl	e19c8 <__aeabi_dsub>
   e06ac:	460d      	mov	r5, r1
   e06ae:	4604      	mov	r4, r0
   e06b0:	f001 fdee 	bl	e2290 <__aeabi_d2iz>
   e06b4:	4680      	mov	r8, r0
   e06b6:	f001 fad5 	bl	e1c64 <__aeabi_i2d>
   e06ba:	460b      	mov	r3, r1
   e06bc:	4602      	mov	r2, r0
   e06be:	4629      	mov	r1, r5
   e06c0:	4620      	mov	r0, r4
   e06c2:	f001 f981 	bl	e19c8 <__aeabi_dsub>
   e06c6:	464b      	mov	r3, r9
   e06c8:	2b00      	cmp	r3, #0
   e06ca:	4606      	mov	r6, r0
   e06cc:	460f      	mov	r7, r1
   e06ce:	f340 80e5 	ble.w	e089c <__kernel_rem_pio2+0x394>
   e06d2:	9a04      	ldr	r2, [sp, #16]
   e06d4:	a90e      	add	r1, sp, #56	; 0x38
   e06d6:	3a01      	subs	r2, #1
   e06d8:	f1c9 0318 	rsb	r3, r9, #24
   e06dc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e06e0:	fa45 f103 	asr.w	r1, r5, r3
   e06e4:	fa01 f303 	lsl.w	r3, r1, r3
   e06e8:	a80e      	add	r0, sp, #56	; 0x38
   e06ea:	1aeb      	subs	r3, r5, r3
   e06ec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e06f0:	f1c9 0517 	rsb	r5, r9, #23
   e06f4:	4488      	add	r8, r1
   e06f6:	fa43 f505 	asr.w	r5, r3, r5
   e06fa:	2d00      	cmp	r5, #0
   e06fc:	dd41      	ble.n	e0782 <__kernel_rem_pio2+0x27a>
   e06fe:	9b04      	ldr	r3, [sp, #16]
   e0700:	2b00      	cmp	r3, #0
   e0702:	f108 0801 	add.w	r8, r8, #1
   e0706:	f340 82c9 	ble.w	e0c9c <__kernel_rem_pio2+0x794>
   e070a:	2200      	movs	r2, #0
   e070c:	4614      	mov	r4, r2
   e070e:	a90d      	add	r1, sp, #52	; 0x34
   e0710:	9804      	ldr	r0, [sp, #16]
   e0712:	46ae      	mov	lr, r5
   e0714:	e012      	b.n	e073c <__kernel_rem_pio2+0x234>
   e0716:	bf00      	nop
   e0718:	000e7020 	.word	0x000e7020
   e071c:	2aaaaaab 	.word	0x2aaaaaab
   e0720:	3e700000 	.word	0x3e700000
   e0724:	41700000 	.word	0x41700000
   e0728:	40200000 	.word	0x40200000
   e072c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e0730:	b10b      	cbz	r3, e0736 <__kernel_rem_pio2+0x22e>
   e0732:	600d      	str	r5, [r1, #0]
   e0734:	2401      	movs	r4, #1
   e0736:	3201      	adds	r2, #1
   e0738:	4290      	cmp	r0, r2
   e073a:	dd0d      	ble.n	e0758 <__kernel_rem_pio2+0x250>
   e073c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e0740:	2c00      	cmp	r4, #0
   e0742:	d0f3      	beq.n	e072c <__kernel_rem_pio2+0x224>
   e0744:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e0748:	3201      	adds	r2, #1
   e074a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e074e:	4290      	cmp	r0, r2
   e0750:	600b      	str	r3, [r1, #0]
   e0752:	f04f 0401 	mov.w	r4, #1
   e0756:	dcf1      	bgt.n	e073c <__kernel_rem_pio2+0x234>
   e0758:	4675      	mov	r5, lr
   e075a:	9b06      	ldr	r3, [sp, #24]
   e075c:	2b00      	cmp	r3, #0
   e075e:	dd0e      	ble.n	e077e <__kernel_rem_pio2+0x276>
   e0760:	2b01      	cmp	r3, #1
   e0762:	f000 80a3 	beq.w	e08ac <__kernel_rem_pio2+0x3a4>
   e0766:	2b02      	cmp	r3, #2
   e0768:	d109      	bne.n	e077e <__kernel_rem_pio2+0x276>
   e076a:	9b04      	ldr	r3, [sp, #16]
   e076c:	1e5a      	subs	r2, r3, #1
   e076e:	ab0e      	add	r3, sp, #56	; 0x38
   e0770:	a90e      	add	r1, sp, #56	; 0x38
   e0772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e0776:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e077a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e077e:	2d02      	cmp	r5, #2
   e0780:	d074      	beq.n	e086c <__kernel_rem_pio2+0x364>
   e0782:	2200      	movs	r2, #0
   e0784:	2300      	movs	r3, #0
   e0786:	4630      	mov	r0, r6
   e0788:	4639      	mov	r1, r7
   e078a:	f001 fd39 	bl	e2200 <__aeabi_dcmpeq>
   e078e:	2800      	cmp	r0, #0
   e0790:	f000 8249 	beq.w	e0c26 <__kernel_rem_pio2+0x71e>
   e0794:	9a04      	ldr	r2, [sp, #16]
   e0796:	9b07      	ldr	r3, [sp, #28]
   e0798:	1e50      	subs	r0, r2, #1
   e079a:	4283      	cmp	r3, r0
   e079c:	dc10      	bgt.n	e07c0 <__kernel_rem_pio2+0x2b8>
   e079e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e07a2:	3b01      	subs	r3, #1
   e07a4:	aa0e      	add	r2, sp, #56	; 0x38
   e07a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e07a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e07ac:	2200      	movs	r2, #0
   e07ae:	f853 1904 	ldr.w	r1, [r3], #-4
   e07b2:	42a3      	cmp	r3, r4
   e07b4:	ea42 0201 	orr.w	r2, r2, r1
   e07b8:	d1f9      	bne.n	e07ae <__kernel_rem_pio2+0x2a6>
   e07ba:	2a00      	cmp	r2, #0
   e07bc:	f040 80a4 	bne.w	e0908 <__kernel_rem_pio2+0x400>
   e07c0:	9b07      	ldr	r3, [sp, #28]
   e07c2:	aa0e      	add	r2, sp, #56	; 0x38
   e07c4:	3b01      	subs	r3, #1
   e07c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e07ca:	2b00      	cmp	r3, #0
   e07cc:	f040 8264 	bne.w	e0c98 <__kernel_rem_pio2+0x790>
   e07d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e07d2:	2301      	movs	r3, #1
   e07d4:	f852 1904 	ldr.w	r1, [r2], #-4
   e07d8:	3301      	adds	r3, #1
   e07da:	2900      	cmp	r1, #0
   e07dc:	d0fa      	beq.n	e07d4 <__kernel_rem_pio2+0x2cc>
   e07de:	9a04      	ldr	r2, [sp, #16]
   e07e0:	18d3      	adds	r3, r2, r3
   e07e2:	f102 0a01 	add.w	sl, r2, #1
   e07e6:	459a      	cmp	sl, r3
   e07e8:	9309      	str	r3, [sp, #36]	; 0x24
   e07ea:	dc3c      	bgt.n	e0866 <__kernel_rem_pio2+0x35e>
   e07ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e07ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e07f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   e07f2:	eb0a 0903 	add.w	r9, sl, r3
   e07f6:	9b04      	ldr	r3, [sp, #16]
   e07f8:	4698      	mov	r8, r3
   e07fa:	4490      	add	r8, r2
   e07fc:	188b      	adds	r3, r1, r2
   e07fe:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e0802:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e0804:	f109 39ff 	add.w	r9, r9, #4294967295
   e0808:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e080c:	aa22      	add	r2, sp, #136	; 0x88
   e080e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e0812:	9304      	str	r3, [sp, #16]
   e0814:	ab72      	add	r3, sp, #456	; 0x1c8
   e0816:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e081a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e081e:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e0822:	f001 fa1f 	bl	e1c64 <__aeabi_i2d>
   e0826:	9b00      	ldr	r3, [sp, #0]
   e0828:	2b00      	cmp	r3, #0
   e082a:	e8e8 0102 	strd	r0, r1, [r8], #8
   e082e:	f04f 0600 	mov.w	r6, #0
   e0832:	f04f 0700 	mov.w	r7, #0
   e0836:	db11      	blt.n	e085c <__kernel_rem_pio2+0x354>
   e0838:	9c03      	ldr	r4, [sp, #12]
   e083a:	4645      	mov	r5, r8
   e083c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e0840:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e0844:	f001 fa74 	bl	e1d30 <__aeabi_dmul>
   e0848:	4602      	mov	r2, r0
   e084a:	460b      	mov	r3, r1
   e084c:	4630      	mov	r0, r6
   e084e:	4639      	mov	r1, r7
   e0850:	f001 f8bc 	bl	e19cc <__adddf3>
   e0854:	455c      	cmp	r4, fp
   e0856:	4606      	mov	r6, r0
   e0858:	460f      	mov	r7, r1
   e085a:	d1ef      	bne.n	e083c <__kernel_rem_pio2+0x334>
   e085c:	9b04      	ldr	r3, [sp, #16]
   e085e:	4598      	cmp	r8, r3
   e0860:	e8ea 6702 	strd	r6, r7, [sl], #8
   e0864:	d1db      	bne.n	e081e <__kernel_rem_pio2+0x316>
   e0866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0868:	9304      	str	r3, [sp, #16]
   e086a:	e6cc      	b.n	e0606 <__kernel_rem_pio2+0xfe>
   e086c:	4632      	mov	r2, r6
   e086e:	463b      	mov	r3, r7
   e0870:	2000      	movs	r0, #0
   e0872:	49b3      	ldr	r1, [pc, #716]	; (e0b40 <__kernel_rem_pio2+0x638>)
   e0874:	f001 f8a8 	bl	e19c8 <__aeabi_dsub>
   e0878:	4606      	mov	r6, r0
   e087a:	460f      	mov	r7, r1
   e087c:	2c00      	cmp	r4, #0
   e087e:	d080      	beq.n	e0782 <__kernel_rem_pio2+0x27a>
   e0880:	9806      	ldr	r0, [sp, #24]
   e0882:	ed9f 0bab 	vldr	d0, [pc, #684]	; e0b30 <__kernel_rem_pio2+0x628>
   e0886:	f001 f807 	bl	e1898 <scalbn>
   e088a:	4630      	mov	r0, r6
   e088c:	4639      	mov	r1, r7
   e088e:	ec53 2b10 	vmov	r2, r3, d0
   e0892:	f001 f899 	bl	e19c8 <__aeabi_dsub>
   e0896:	4606      	mov	r6, r0
   e0898:	460f      	mov	r7, r1
   e089a:	e772      	b.n	e0782 <__kernel_rem_pio2+0x27a>
   e089c:	d111      	bne.n	e08c2 <__kernel_rem_pio2+0x3ba>
   e089e:	9b04      	ldr	r3, [sp, #16]
   e08a0:	aa0e      	add	r2, sp, #56	; 0x38
   e08a2:	3b01      	subs	r3, #1
   e08a4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e08a8:	15ed      	asrs	r5, r5, #23
   e08aa:	e726      	b.n	e06fa <__kernel_rem_pio2+0x1f2>
   e08ac:	9b04      	ldr	r3, [sp, #16]
   e08ae:	1e5a      	subs	r2, r3, #1
   e08b0:	ab0e      	add	r3, sp, #56	; 0x38
   e08b2:	a90e      	add	r1, sp, #56	; 0x38
   e08b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e08b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e08bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e08c0:	e75d      	b.n	e077e <__kernel_rem_pio2+0x276>
   e08c2:	2200      	movs	r2, #0
   e08c4:	4b9f      	ldr	r3, [pc, #636]	; (e0b44 <__kernel_rem_pio2+0x63c>)
   e08c6:	f001 fcb9 	bl	e223c <__aeabi_dcmpge>
   e08ca:	b958      	cbnz	r0, e08e4 <__kernel_rem_pio2+0x3dc>
   e08cc:	4605      	mov	r5, r0
   e08ce:	e758      	b.n	e0782 <__kernel_rem_pio2+0x27a>
   e08d0:	2600      	movs	r6, #0
   e08d2:	2700      	movs	r7, #0
   e08d4:	e8ea 6702 	strd	r6, r7, [sl], #8
   e08d8:	45da      	cmp	sl, fp
   e08da:	f109 0908 	add.w	r9, r9, #8
   e08de:	f47f ae64 	bne.w	e05aa <__kernel_rem_pio2+0xa2>
   e08e2:	e680      	b.n	e05e6 <__kernel_rem_pio2+0xde>
   e08e4:	9b04      	ldr	r3, [sp, #16]
   e08e6:	2b00      	cmp	r3, #0
   e08e8:	f108 0801 	add.w	r8, r8, #1
   e08ec:	bfc8      	it	gt
   e08ee:	2502      	movgt	r5, #2
   e08f0:	f73f af0b 	bgt.w	e070a <__kernel_rem_pio2+0x202>
   e08f4:	4632      	mov	r2, r6
   e08f6:	463b      	mov	r3, r7
   e08f8:	2000      	movs	r0, #0
   e08fa:	4991      	ldr	r1, [pc, #580]	; (e0b40 <__kernel_rem_pio2+0x638>)
   e08fc:	f001 f864 	bl	e19c8 <__aeabi_dsub>
   e0900:	2502      	movs	r5, #2
   e0902:	4606      	mov	r6, r0
   e0904:	460f      	mov	r7, r1
   e0906:	e73c      	b.n	e0782 <__kernel_rem_pio2+0x27a>
   e0908:	a90e      	add	r1, sp, #56	; 0x38
   e090a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e090e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e0912:	9906      	ldr	r1, [sp, #24]
   e0914:	9000      	str	r0, [sp, #0]
   e0916:	3918      	subs	r1, #24
   e0918:	4602      	mov	r2, r0
   e091a:	9503      	str	r5, [sp, #12]
   e091c:	9106      	str	r1, [sp, #24]
   e091e:	b96b      	cbnz	r3, e093c <__kernel_rem_pio2+0x434>
   e0920:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e0924:	3b01      	subs	r3, #1
   e0926:	a80e      	add	r0, sp, #56	; 0x38
   e0928:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e092c:	f853 0904 	ldr.w	r0, [r3], #-4
   e0930:	3a01      	subs	r2, #1
   e0932:	3918      	subs	r1, #24
   e0934:	2800      	cmp	r0, #0
   e0936:	d0f9      	beq.n	e092c <__kernel_rem_pio2+0x424>
   e0938:	9200      	str	r2, [sp, #0]
   e093a:	9106      	str	r1, [sp, #24]
   e093c:	9806      	ldr	r0, [sp, #24]
   e093e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e0b30 <__kernel_rem_pio2+0x628>
   e0942:	f000 ffa9 	bl	e1898 <scalbn>
   e0946:	9b00      	ldr	r3, [sp, #0]
   e0948:	2b00      	cmp	r3, #0
   e094a:	ec55 4b10 	vmov	r4, r5, d0
   e094e:	f2c0 81c1 	blt.w	e0cd4 <__kernel_rem_pio2+0x7cc>
   e0952:	00da      	lsls	r2, r3, #3
   e0954:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e0958:	a90e      	add	r1, sp, #56	; 0x38
   e095a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e095e:	eb08 0b02 	add.w	fp, r8, r2
   e0962:	9206      	str	r2, [sp, #24]
   e0964:	3604      	adds	r6, #4
   e0966:	f10b 0708 	add.w	r7, fp, #8
   e096a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e096e:	f001 f979 	bl	e1c64 <__aeabi_i2d>
   e0972:	4622      	mov	r2, r4
   e0974:	462b      	mov	r3, r5
   e0976:	f001 f9db 	bl	e1d30 <__aeabi_dmul>
   e097a:	2200      	movs	r2, #0
   e097c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e0980:	4b71      	ldr	r3, [pc, #452]	; (e0b48 <__kernel_rem_pio2+0x640>)
   e0982:	4620      	mov	r0, r4
   e0984:	4629      	mov	r1, r5
   e0986:	f001 f9d3 	bl	e1d30 <__aeabi_dmul>
   e098a:	4547      	cmp	r7, r8
   e098c:	4604      	mov	r4, r0
   e098e:	460d      	mov	r5, r1
   e0990:	d1eb      	bne.n	e096a <__kernel_rem_pio2+0x462>
   e0992:	ac4a      	add	r4, sp, #296	; 0x128
   e0994:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e0998:	9404      	str	r4, [sp, #16]
   e099a:	f04f 0a00 	mov.w	sl, #0
   e099e:	f1b9 0f00 	cmp.w	r9, #0
   e09a2:	f2c0 812b 	blt.w	e0bfc <__kernel_rem_pio2+0x6f4>
   e09a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e0b4c <__kernel_rem_pio2+0x644>
   e09aa:	465d      	mov	r5, fp
   e09ac:	a362      	add	r3, pc, #392	; (adr r3, e0b38 <__kernel_rem_pio2+0x630>)
   e09ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e09b2:	2600      	movs	r6, #0
   e09b4:	2700      	movs	r7, #0
   e09b6:	2400      	movs	r4, #0
   e09b8:	e003      	b.n	e09c2 <__kernel_rem_pio2+0x4ba>
   e09ba:	45a2      	cmp	sl, r4
   e09bc:	db10      	blt.n	e09e0 <__kernel_rem_pio2+0x4d8>
   e09be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e09c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e09c6:	f001 f9b3 	bl	e1d30 <__aeabi_dmul>
   e09ca:	4602      	mov	r2, r0
   e09cc:	460b      	mov	r3, r1
   e09ce:	4630      	mov	r0, r6
   e09d0:	4639      	mov	r1, r7
   e09d2:	f000 fffb 	bl	e19cc <__adddf3>
   e09d6:	3401      	adds	r4, #1
   e09d8:	45a1      	cmp	r9, r4
   e09da:	4606      	mov	r6, r0
   e09dc:	460f      	mov	r7, r1
   e09de:	daec      	bge.n	e09ba <__kernel_rem_pio2+0x4b2>
   e09e0:	9b04      	ldr	r3, [sp, #16]
   e09e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e09e6:	f1ab 0b08 	sub.w	fp, fp, #8
   e09ea:	e9c3 6700 	strd	r6, r7, [r3]
   e09ee:	ab70      	add	r3, sp, #448	; 0x1c0
   e09f0:	459b      	cmp	fp, r3
   e09f2:	f10a 0a01 	add.w	sl, sl, #1
   e09f6:	d1d2      	bne.n	e099e <__kernel_rem_pio2+0x496>
   e09f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e09fa:	9c04      	ldr	r4, [sp, #16]
   e09fc:	2b03      	cmp	r3, #3
   e09fe:	f200 808d 	bhi.w	e0b1c <__kernel_rem_pio2+0x614>
   e0a02:	e8df f013 	tbh	[pc, r3, lsl #1]
   e0a06:	00dd      	.short	0x00dd
   e0a08:	00a500a5 	.word	0x00a500a5
   e0a0c:	0004      	.short	0x0004
   e0a0e:	9b00      	ldr	r3, [sp, #0]
   e0a10:	2b00      	cmp	r3, #0
   e0a12:	f340 815c 	ble.w	e0cce <__kernel_rem_pio2+0x7c6>
   e0a16:	9b00      	ldr	r3, [sp, #0]
   e0a18:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e0a1c:	9b06      	ldr	r3, [sp, #24]
   e0a1e:	f10b 3bff 	add.w	fp, fp, #4294967295
   e0a22:	18e2      	adds	r2, r4, r3
   e0a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e0a28:	e9d2 8900 	ldrd	r8, r9, [r2]
   e0a2c:	f103 0208 	add.w	r2, r3, #8
   e0a30:	3310      	adds	r3, #16
   e0a32:	eb04 0a02 	add.w	sl, r4, r2
   e0a36:	18e5      	adds	r5, r4, r3
   e0a38:	ed3a 7b02 	vldmdb	sl!, {d7}
   e0a3c:	4642      	mov	r2, r8
   e0a3e:	464b      	mov	r3, r9
   e0a40:	ec51 0b17 	vmov	r0, r1, d7
   e0a44:	ed8d 7b04 	vstr	d7, [sp, #16]
   e0a48:	f000 ffc0 	bl	e19cc <__adddf3>
   e0a4c:	4606      	mov	r6, r0
   e0a4e:	460f      	mov	r7, r1
   e0a50:	4602      	mov	r2, r0
   e0a52:	460b      	mov	r3, r1
   e0a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0a58:	f000 ffb6 	bl	e19c8 <__aeabi_dsub>
   e0a5c:	464b      	mov	r3, r9
   e0a5e:	4642      	mov	r2, r8
   e0a60:	f000 ffb4 	bl	e19cc <__adddf3>
   e0a64:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e0a68:	ab4c      	add	r3, sp, #304	; 0x130
   e0a6a:	429d      	cmp	r5, r3
   e0a6c:	46b0      	mov	r8, r6
   e0a6e:	46b9      	mov	r9, r7
   e0a70:	e9ca 6700 	strd	r6, r7, [sl]
   e0a74:	d1e0      	bne.n	e0a38 <__kernel_rem_pio2+0x530>
   e0a76:	9b00      	ldr	r3, [sp, #0]
   e0a78:	2b01      	cmp	r3, #1
   e0a7a:	f340 8128 	ble.w	e0cce <__kernel_rem_pio2+0x7c6>
   e0a7e:	9b06      	ldr	r3, [sp, #24]
   e0a80:	4423      	add	r3, r4
   e0a82:	ed93 7b00 	vldr	d7, [r3]
   e0a86:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e0a8a:	f10b 0a10 	add.w	sl, fp, #16
   e0a8e:	ed8d 7b00 	vstr	d7, [sp]
   e0a92:	44a2      	add	sl, r4
   e0a94:	f10b 0b08 	add.w	fp, fp, #8
   e0a98:	eb04 050b 	add.w	r5, r4, fp
   e0a9c:	46d0      	mov	r8, sl
   e0a9e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e0aa2:	f8cd a010 	str.w	sl, [sp, #16]
   e0aa6:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e0aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0aae:	464a      	mov	r2, r9
   e0ab0:	4653      	mov	r3, sl
   e0ab2:	f000 ff8b 	bl	e19cc <__adddf3>
   e0ab6:	4606      	mov	r6, r0
   e0ab8:	460f      	mov	r7, r1
   e0aba:	4602      	mov	r2, r0
   e0abc:	460b      	mov	r3, r1
   e0abe:	4648      	mov	r0, r9
   e0ac0:	4651      	mov	r1, sl
   e0ac2:	f000 ff81 	bl	e19c8 <__aeabi_dsub>
   e0ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0aca:	f000 ff7f 	bl	e19cc <__adddf3>
   e0ace:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e0ad2:	45c3      	cmp	fp, r8
   e0ad4:	e9cd 6700 	strd	r6, r7, [sp]
   e0ad8:	e9c5 6700 	strd	r6, r7, [r5]
   e0adc:	d1e3      	bne.n	e0aa6 <__kernel_rem_pio2+0x59e>
   e0ade:	f8dd a010 	ldr.w	sl, [sp, #16]
   e0ae2:	2000      	movs	r0, #0
   e0ae4:	2100      	movs	r1, #0
   e0ae6:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e0aea:	f000 ff6f 	bl	e19cc <__adddf3>
   e0aee:	45d3      	cmp	fp, sl
   e0af0:	d1f9      	bne.n	e0ae6 <__kernel_rem_pio2+0x5de>
   e0af2:	9b03      	ldr	r3, [sp, #12]
   e0af4:	2b00      	cmp	r3, #0
   e0af6:	f000 80d3 	beq.w	e0ca0 <__kernel_rem_pio2+0x798>
   e0afa:	6862      	ldr	r2, [r4, #4]
   e0afc:	68e3      	ldr	r3, [r4, #12]
   e0afe:	9f08      	ldr	r7, [sp, #32]
   e0b00:	6825      	ldr	r5, [r4, #0]
   e0b02:	68a4      	ldr	r4, [r4, #8]
   e0b04:	603d      	str	r5, [r7, #0]
   e0b06:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e0b0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e0b0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e0b12:	607a      	str	r2, [r7, #4]
   e0b14:	60fb      	str	r3, [r7, #12]
   e0b16:	60bc      	str	r4, [r7, #8]
   e0b18:	6138      	str	r0, [r7, #16]
   e0b1a:	6179      	str	r1, [r7, #20]
   e0b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0b1e:	f003 0007 	and.w	r0, r3, #7
   e0b22:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0b2a:	bf00      	nop
   e0b2c:	f3af 8000 	nop.w
   e0b30:	00000000 	.word	0x00000000
   e0b34:	3ff00000 	.word	0x3ff00000
   e0b38:	40000000 	.word	0x40000000
   e0b3c:	3ff921fb 	.word	0x3ff921fb
   e0b40:	3ff00000 	.word	0x3ff00000
   e0b44:	3fe00000 	.word	0x3fe00000
   e0b48:	3e700000 	.word	0x3e700000
   e0b4c:	000e7038 	.word	0x000e7038
   e0b50:	9d06      	ldr	r5, [sp, #24]
   e0b52:	3508      	adds	r5, #8
   e0b54:	4425      	add	r5, r4
   e0b56:	2000      	movs	r0, #0
   e0b58:	2100      	movs	r1, #0
   e0b5a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e0b5e:	f000 ff35 	bl	e19cc <__adddf3>
   e0b62:	42a5      	cmp	r5, r4
   e0b64:	d1f9      	bne.n	e0b5a <__kernel_rem_pio2+0x652>
   e0b66:	9b03      	ldr	r3, [sp, #12]
   e0b68:	2b00      	cmp	r3, #0
   e0b6a:	d04a      	beq.n	e0c02 <__kernel_rem_pio2+0x6fa>
   e0b6c:	9e08      	ldr	r6, [sp, #32]
   e0b6e:	4602      	mov	r2, r0
   e0b70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0b74:	e886 000c 	stmia.w	r6, {r2, r3}
   e0b78:	460b      	mov	r3, r1
   e0b7a:	4602      	mov	r2, r0
   e0b7c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e0b80:	f000 ff22 	bl	e19c8 <__aeabi_dsub>
   e0b84:	9b00      	ldr	r3, [sp, #0]
   e0b86:	2b00      	cmp	r3, #0
   e0b88:	dd0d      	ble.n	e0ba6 <__kernel_rem_pio2+0x69e>
   e0b8a:	ad4c      	add	r5, sp, #304	; 0x130
   e0b8c:	2401      	movs	r4, #1
   e0b8e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e0b92:	f000 ff1b 	bl	e19cc <__adddf3>
   e0b96:	9b00      	ldr	r3, [sp, #0]
   e0b98:	3401      	adds	r4, #1
   e0b9a:	42a3      	cmp	r3, r4
   e0b9c:	daf7      	bge.n	e0b8e <__kernel_rem_pio2+0x686>
   e0b9e:	9b03      	ldr	r3, [sp, #12]
   e0ba0:	2b00      	cmp	r3, #0
   e0ba2:	f000 80a7 	beq.w	e0cf4 <__kernel_rem_pio2+0x7ec>
   e0ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0baa:	9908      	ldr	r1, [sp, #32]
   e0bac:	4602      	mov	r2, r0
   e0bae:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0bb4:	f003 0007 	and.w	r0, r3, #7
   e0bb8:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0bc0:	9b06      	ldr	r3, [sp, #24]
   e0bc2:	9d00      	ldr	r5, [sp, #0]
   e0bc4:	3308      	adds	r3, #8
   e0bc6:	2000      	movs	r0, #0
   e0bc8:	2100      	movs	r1, #0
   e0bca:	441c      	add	r4, r3
   e0bcc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e0bd0:	3d01      	subs	r5, #1
   e0bd2:	f000 fefb 	bl	e19cc <__adddf3>
   e0bd6:	1c6b      	adds	r3, r5, #1
   e0bd8:	d1f8      	bne.n	e0bcc <__kernel_rem_pio2+0x6c4>
   e0bda:	9b03      	ldr	r3, [sp, #12]
   e0bdc:	4602      	mov	r2, r0
   e0bde:	2b00      	cmp	r3, #0
   e0be0:	f000 808e 	beq.w	e0d00 <__kernel_rem_pio2+0x7f8>
   e0be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0be8:	9908      	ldr	r1, [sp, #32]
   e0bea:	e9c1 2300 	strd	r2, r3, [r1]
   e0bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0bf0:	f003 0007 	and.w	r0, r3, #7
   e0bf4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0bfc:	2600      	movs	r6, #0
   e0bfe:	2700      	movs	r7, #0
   e0c00:	e6ee      	b.n	e09e0 <__kernel_rem_pio2+0x4d8>
   e0c02:	9b08      	ldr	r3, [sp, #32]
   e0c04:	4602      	mov	r2, r0
   e0c06:	e9c3 0100 	strd	r0, r1, [r3]
   e0c0a:	460b      	mov	r3, r1
   e0c0c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e0c10:	f000 feda 	bl	e19c8 <__aeabi_dsub>
   e0c14:	9c00      	ldr	r4, [sp, #0]
   e0c16:	2c00      	cmp	r4, #0
   e0c18:	4602      	mov	r2, r0
   e0c1a:	460b      	mov	r3, r1
   e0c1c:	dcb5      	bgt.n	e0b8a <__kernel_rem_pio2+0x682>
   e0c1e:	9908      	ldr	r1, [sp, #32]
   e0c20:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0c24:	e7c5      	b.n	e0bb2 <__kernel_rem_pio2+0x6aa>
   e0c26:	9b06      	ldr	r3, [sp, #24]
   e0c28:	9503      	str	r5, [sp, #12]
   e0c2a:	4258      	negs	r0, r3
   e0c2c:	ec47 6b10 	vmov	d0, r6, r7
   e0c30:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e0c34:	f000 fe30 	bl	e1898 <scalbn>
   e0c38:	ec55 4b10 	vmov	r4, r5, d0
   e0c3c:	2200      	movs	r2, #0
   e0c3e:	4b38      	ldr	r3, [pc, #224]	; (e0d20 <__kernel_rem_pio2+0x818>)
   e0c40:	ee10 0a10 	vmov	r0, s0
   e0c44:	4629      	mov	r1, r5
   e0c46:	f001 faf9 	bl	e223c <__aeabi_dcmpge>
   e0c4a:	2800      	cmp	r0, #0
   e0c4c:	d034      	beq.n	e0cb8 <__kernel_rem_pio2+0x7b0>
   e0c4e:	2200      	movs	r2, #0
   e0c50:	4b34      	ldr	r3, [pc, #208]	; (e0d24 <__kernel_rem_pio2+0x81c>)
   e0c52:	4620      	mov	r0, r4
   e0c54:	4629      	mov	r1, r5
   e0c56:	f001 f86b 	bl	e1d30 <__aeabi_dmul>
   e0c5a:	f001 fb19 	bl	e2290 <__aeabi_d2iz>
   e0c5e:	4606      	mov	r6, r0
   e0c60:	f001 f800 	bl	e1c64 <__aeabi_i2d>
   e0c64:	2200      	movs	r2, #0
   e0c66:	4b2e      	ldr	r3, [pc, #184]	; (e0d20 <__kernel_rem_pio2+0x818>)
   e0c68:	f001 f862 	bl	e1d30 <__aeabi_dmul>
   e0c6c:	4602      	mov	r2, r0
   e0c6e:	460b      	mov	r3, r1
   e0c70:	4620      	mov	r0, r4
   e0c72:	4629      	mov	r1, r5
   e0c74:	f000 fea8 	bl	e19c8 <__aeabi_dsub>
   e0c78:	f001 fb0a 	bl	e2290 <__aeabi_d2iz>
   e0c7c:	9904      	ldr	r1, [sp, #16]
   e0c7e:	9b06      	ldr	r3, [sp, #24]
   e0c80:	460a      	mov	r2, r1
   e0c82:	3318      	adds	r3, #24
   e0c84:	3201      	adds	r2, #1
   e0c86:	9306      	str	r3, [sp, #24]
   e0c88:	460b      	mov	r3, r1
   e0c8a:	a90e      	add	r1, sp, #56	; 0x38
   e0c8c:	9200      	str	r2, [sp, #0]
   e0c8e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e0c92:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e0c96:	e651      	b.n	e093c <__kernel_rem_pio2+0x434>
   e0c98:	2301      	movs	r3, #1
   e0c9a:	e5a0      	b.n	e07de <__kernel_rem_pio2+0x2d6>
   e0c9c:	2400      	movs	r4, #0
   e0c9e:	e55c      	b.n	e075a <__kernel_rem_pio2+0x252>
   e0ca0:	e9d4 6700 	ldrd	r6, r7, [r4]
   e0ca4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e0ca8:	9d08      	ldr	r5, [sp, #32]
   e0caa:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e0cae:	e9c5 6700 	strd	r6, r7, [r5]
   e0cb2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e0cb6:	e731      	b.n	e0b1c <__kernel_rem_pio2+0x614>
   e0cb8:	4629      	mov	r1, r5
   e0cba:	4620      	mov	r0, r4
   e0cbc:	f001 fae8 	bl	e2290 <__aeabi_d2iz>
   e0cc0:	9a04      	ldr	r2, [sp, #16]
   e0cc2:	9200      	str	r2, [sp, #0]
   e0cc4:	a90e      	add	r1, sp, #56	; 0x38
   e0cc6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e0cca:	e637      	b.n	e093c <__kernel_rem_pio2+0x434>
   e0ccc:	ac4a      	add	r4, sp, #296	; 0x128
   e0cce:	2000      	movs	r0, #0
   e0cd0:	2100      	movs	r1, #0
   e0cd2:	e70e      	b.n	e0af2 <__kernel_rem_pio2+0x5ea>
   e0cd4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e0cd6:	2b03      	cmp	r3, #3
   e0cd8:	f63f af20 	bhi.w	e0b1c <__kernel_rem_pio2+0x614>
   e0cdc:	a201      	add	r2, pc, #4	; (adr r2, e0ce4 <__kernel_rem_pio2+0x7dc>)
   e0cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e0ce2:	bf00      	nop
   e0ce4:	000e0d1b 	.word	0x000e0d1b
   e0ce8:	000e0d13 	.word	0x000e0d13
   e0cec:	000e0d13 	.word	0x000e0d13
   e0cf0:	000e0ccd 	.word	0x000e0ccd
   e0cf4:	460b      	mov	r3, r1
   e0cf6:	9908      	ldr	r1, [sp, #32]
   e0cf8:	4602      	mov	r2, r0
   e0cfa:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0cfe:	e758      	b.n	e0bb2 <__kernel_rem_pio2+0x6aa>
   e0d00:	460b      	mov	r3, r1
   e0d02:	9908      	ldr	r1, [sp, #32]
   e0d04:	e9c1 2300 	strd	r2, r3, [r1]
   e0d08:	e771      	b.n	e0bee <__kernel_rem_pio2+0x6e6>
   e0d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e0d0c:	00db      	lsls	r3, r3, #3
   e0d0e:	9304      	str	r3, [sp, #16]
   e0d10:	e469      	b.n	e05e6 <__kernel_rem_pio2+0xde>
   e0d12:	2000      	movs	r0, #0
   e0d14:	2100      	movs	r1, #0
   e0d16:	ac4a      	add	r4, sp, #296	; 0x128
   e0d18:	e725      	b.n	e0b66 <__kernel_rem_pio2+0x65e>
   e0d1a:	2000      	movs	r0, #0
   e0d1c:	2100      	movs	r1, #0
   e0d1e:	e75c      	b.n	e0bda <__kernel_rem_pio2+0x6d2>
   e0d20:	41700000 	.word	0x41700000
   e0d24:	3e700000 	.word	0x3e700000

000e0d28 <__kernel_sin>:
   e0d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0d2c:	ec55 4b10 	vmov	r4, r5, d0
   e0d30:	ed2d 8b02 	vpush	{d8}
   e0d34:	eeb0 8a41 	vmov.f32	s16, s2
   e0d38:	eef0 8a61 	vmov.f32	s17, s3
   e0d3c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e0d40:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e0d44:	b083      	sub	sp, #12
   e0d46:	4682      	mov	sl, r0
   e0d48:	da07      	bge.n	e0d5a <__kernel_sin+0x32>
   e0d4a:	ee10 0a10 	vmov	r0, s0
   e0d4e:	4629      	mov	r1, r5
   e0d50:	f001 fa9e 	bl	e2290 <__aeabi_d2iz>
   e0d54:	2800      	cmp	r0, #0
   e0d56:	f000 808e 	beq.w	e0e76 <__kernel_sin+0x14e>
   e0d5a:	4622      	mov	r2, r4
   e0d5c:	462b      	mov	r3, r5
   e0d5e:	4620      	mov	r0, r4
   e0d60:	4629      	mov	r1, r5
   e0d62:	f000 ffe5 	bl	e1d30 <__aeabi_dmul>
   e0d66:	4606      	mov	r6, r0
   e0d68:	460f      	mov	r7, r1
   e0d6a:	4602      	mov	r2, r0
   e0d6c:	460b      	mov	r3, r1
   e0d6e:	4620      	mov	r0, r4
   e0d70:	4629      	mov	r1, r5
   e0d72:	f000 ffdd 	bl	e1d30 <__aeabi_dmul>
   e0d76:	a347      	add	r3, pc, #284	; (adr r3, e0e94 <__kernel_sin+0x16c>)
   e0d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d7c:	4680      	mov	r8, r0
   e0d7e:	4689      	mov	r9, r1
   e0d80:	4630      	mov	r0, r6
   e0d82:	4639      	mov	r1, r7
   e0d84:	f000 ffd4 	bl	e1d30 <__aeabi_dmul>
   e0d88:	a344      	add	r3, pc, #272	; (adr r3, e0e9c <__kernel_sin+0x174>)
   e0d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d8e:	f000 fe1b 	bl	e19c8 <__aeabi_dsub>
   e0d92:	4632      	mov	r2, r6
   e0d94:	463b      	mov	r3, r7
   e0d96:	f000 ffcb 	bl	e1d30 <__aeabi_dmul>
   e0d9a:	a342      	add	r3, pc, #264	; (adr r3, e0ea4 <__kernel_sin+0x17c>)
   e0d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0da0:	f000 fe14 	bl	e19cc <__adddf3>
   e0da4:	4632      	mov	r2, r6
   e0da6:	463b      	mov	r3, r7
   e0da8:	f000 ffc2 	bl	e1d30 <__aeabi_dmul>
   e0dac:	a33f      	add	r3, pc, #252	; (adr r3, e0eac <__kernel_sin+0x184>)
   e0dae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0db2:	f000 fe09 	bl	e19c8 <__aeabi_dsub>
   e0db6:	4632      	mov	r2, r6
   e0db8:	463b      	mov	r3, r7
   e0dba:	f000 ffb9 	bl	e1d30 <__aeabi_dmul>
   e0dbe:	a33d      	add	r3, pc, #244	; (adr r3, e0eb4 <__kernel_sin+0x18c>)
   e0dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0dc4:	f000 fe02 	bl	e19cc <__adddf3>
   e0dc8:	e9cd 0100 	strd	r0, r1, [sp]
   e0dcc:	f1ba 0f00 	cmp.w	sl, #0
   e0dd0:	d037      	beq.n	e0e42 <__kernel_sin+0x11a>
   e0dd2:	2200      	movs	r2, #0
   e0dd4:	4b2e      	ldr	r3, [pc, #184]	; (e0e90 <__kernel_sin+0x168>)
   e0dd6:	ec51 0b18 	vmov	r0, r1, d8
   e0dda:	f000 ffa9 	bl	e1d30 <__aeabi_dmul>
   e0dde:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0de2:	4682      	mov	sl, r0
   e0de4:	468b      	mov	fp, r1
   e0de6:	4640      	mov	r0, r8
   e0de8:	4649      	mov	r1, r9
   e0dea:	f000 ffa1 	bl	e1d30 <__aeabi_dmul>
   e0dee:	4602      	mov	r2, r0
   e0df0:	460b      	mov	r3, r1
   e0df2:	4650      	mov	r0, sl
   e0df4:	4659      	mov	r1, fp
   e0df6:	f000 fde7 	bl	e19c8 <__aeabi_dsub>
   e0dfa:	4632      	mov	r2, r6
   e0dfc:	463b      	mov	r3, r7
   e0dfe:	f000 ff97 	bl	e1d30 <__aeabi_dmul>
   e0e02:	ec53 2b18 	vmov	r2, r3, d8
   e0e06:	f000 fddf 	bl	e19c8 <__aeabi_dsub>
   e0e0a:	a31f      	add	r3, pc, #124	; (adr r3, e0e88 <__kernel_sin+0x160>)
   e0e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e10:	4606      	mov	r6, r0
   e0e12:	460f      	mov	r7, r1
   e0e14:	4640      	mov	r0, r8
   e0e16:	4649      	mov	r1, r9
   e0e18:	f000 ff8a 	bl	e1d30 <__aeabi_dmul>
   e0e1c:	4602      	mov	r2, r0
   e0e1e:	460b      	mov	r3, r1
   e0e20:	4630      	mov	r0, r6
   e0e22:	4639      	mov	r1, r7
   e0e24:	f000 fdd2 	bl	e19cc <__adddf3>
   e0e28:	4602      	mov	r2, r0
   e0e2a:	460b      	mov	r3, r1
   e0e2c:	4620      	mov	r0, r4
   e0e2e:	4629      	mov	r1, r5
   e0e30:	f000 fdca 	bl	e19c8 <__aeabi_dsub>
   e0e34:	ec41 0b10 	vmov	d0, r0, r1
   e0e38:	b003      	add	sp, #12
   e0e3a:	ecbd 8b02 	vpop	{d8}
   e0e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0e42:	4602      	mov	r2, r0
   e0e44:	460b      	mov	r3, r1
   e0e46:	4630      	mov	r0, r6
   e0e48:	4639      	mov	r1, r7
   e0e4a:	f000 ff71 	bl	e1d30 <__aeabi_dmul>
   e0e4e:	a30e      	add	r3, pc, #56	; (adr r3, e0e88 <__kernel_sin+0x160>)
   e0e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e54:	f000 fdb8 	bl	e19c8 <__aeabi_dsub>
   e0e58:	4642      	mov	r2, r8
   e0e5a:	464b      	mov	r3, r9
   e0e5c:	f000 ff68 	bl	e1d30 <__aeabi_dmul>
   e0e60:	4622      	mov	r2, r4
   e0e62:	462b      	mov	r3, r5
   e0e64:	f000 fdb2 	bl	e19cc <__adddf3>
   e0e68:	ec41 0b10 	vmov	d0, r0, r1
   e0e6c:	b003      	add	sp, #12
   e0e6e:	ecbd 8b02 	vpop	{d8}
   e0e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0e76:	ec45 4b10 	vmov	d0, r4, r5
   e0e7a:	b003      	add	sp, #12
   e0e7c:	ecbd 8b02 	vpop	{d8}
   e0e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0e84:	f3af 8000 	nop.w
   e0e88:	55555549 	.word	0x55555549
   e0e8c:	3fc55555 	.word	0x3fc55555
   e0e90:	3fe00000 	.word	0x3fe00000
   e0e94:	5acfd57c 	.word	0x5acfd57c
   e0e98:	3de5d93a 	.word	0x3de5d93a
   e0e9c:	8a2b9ceb 	.word	0x8a2b9ceb
   e0ea0:	3e5ae5e6 	.word	0x3e5ae5e6
   e0ea4:	57b1fe7d 	.word	0x57b1fe7d
   e0ea8:	3ec71de3 	.word	0x3ec71de3
   e0eac:	19c161d5 	.word	0x19c161d5
   e0eb0:	3f2a01a0 	.word	0x3f2a01a0
   e0eb4:	1110f8a6 	.word	0x1110f8a6
   e0eb8:	3f811111 	.word	0x3f811111
   e0ebc:	00000000 	.word	0x00000000

000e0ec0 <__kernel_tan>:
   e0ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0ec4:	ec59 8b10 	vmov	r8, r9, d0
   e0ec8:	4be1      	ldr	r3, [pc, #900]	; (e1250 <__kernel_tan+0x390>)
   e0eca:	b089      	sub	sp, #36	; 0x24
   e0ecc:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e0ed0:	429e      	cmp	r6, r3
   e0ed2:	f8cd 9014 	str.w	r9, [sp, #20]
   e0ed6:	4607      	mov	r7, r0
   e0ed8:	ed8d 1b00 	vstr	d1, [sp]
   e0edc:	dc19      	bgt.n	e0f12 <__kernel_tan+0x52>
   e0ede:	ee10 0a10 	vmov	r0, s0
   e0ee2:	4649      	mov	r1, r9
   e0ee4:	f001 f9d4 	bl	e2290 <__aeabi_d2iz>
   e0ee8:	bba0      	cbnz	r0, e0f54 <__kernel_tan+0x94>
   e0eea:	4643      	mov	r3, r8
   e0eec:	431e      	orrs	r6, r3
   e0eee:	1c7b      	adds	r3, r7, #1
   e0ef0:	4333      	orrs	r3, r6
   e0ef2:	f000 815e 	beq.w	e11b2 <__kernel_tan+0x2f2>
   e0ef6:	2f01      	cmp	r7, #1
   e0ef8:	f000 81c2 	beq.w	e1280 <__kernel_tan+0x3c0>
   e0efc:	4642      	mov	r2, r8
   e0efe:	464b      	mov	r3, r9
   e0f00:	2000      	movs	r0, #0
   e0f02:	49d4      	ldr	r1, [pc, #848]	; (e1254 <__kernel_tan+0x394>)
   e0f04:	f001 f83e 	bl	e1f84 <__aeabi_ddiv>
   e0f08:	ec41 0b10 	vmov	d0, r0, r1
   e0f0c:	b009      	add	sp, #36	; 0x24
   e0f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0f12:	4bd1      	ldr	r3, [pc, #836]	; (e1258 <__kernel_tan+0x398>)
   e0f14:	429e      	cmp	r6, r3
   e0f16:	dd1d      	ble.n	e0f54 <__kernel_tan+0x94>
   e0f18:	9b05      	ldr	r3, [sp, #20]
   e0f1a:	2b00      	cmp	r3, #0
   e0f1c:	f2c0 81a0 	blt.w	e1260 <__kernel_tan+0x3a0>
   e0f20:	4642      	mov	r2, r8
   e0f22:	464b      	mov	r3, r9
   e0f24:	a1aa      	add	r1, pc, #680	; (adr r1, e11d0 <__kernel_tan+0x310>)
   e0f26:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0f2a:	f000 fd4d 	bl	e19c8 <__aeabi_dsub>
   e0f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0f32:	4604      	mov	r4, r0
   e0f34:	460d      	mov	r5, r1
   e0f36:	a1a8      	add	r1, pc, #672	; (adr r1, e11d8 <__kernel_tan+0x318>)
   e0f38:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0f3c:	f000 fd44 	bl	e19c8 <__aeabi_dsub>
   e0f40:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e11e0 <__kernel_tan+0x320>
   e0f44:	4622      	mov	r2, r4
   e0f46:	462b      	mov	r3, r5
   e0f48:	ed8d 7b00 	vstr	d7, [sp]
   e0f4c:	f000 fd3e 	bl	e19cc <__adddf3>
   e0f50:	4680      	mov	r8, r0
   e0f52:	4689      	mov	r9, r1
   e0f54:	4642      	mov	r2, r8
   e0f56:	464b      	mov	r3, r9
   e0f58:	4640      	mov	r0, r8
   e0f5a:	4649      	mov	r1, r9
   e0f5c:	f000 fee8 	bl	e1d30 <__aeabi_dmul>
   e0f60:	4602      	mov	r2, r0
   e0f62:	460b      	mov	r3, r1
   e0f64:	4682      	mov	sl, r0
   e0f66:	468b      	mov	fp, r1
   e0f68:	f000 fee2 	bl	e1d30 <__aeabi_dmul>
   e0f6c:	4652      	mov	r2, sl
   e0f6e:	4604      	mov	r4, r0
   e0f70:	460d      	mov	r5, r1
   e0f72:	465b      	mov	r3, fp
   e0f74:	4640      	mov	r0, r8
   e0f76:	4649      	mov	r1, r9
   e0f78:	f000 feda 	bl	e1d30 <__aeabi_dmul>
   e0f7c:	a39a      	add	r3, pc, #616	; (adr r3, e11e8 <__kernel_tan+0x328>)
   e0f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0f86:	4620      	mov	r0, r4
   e0f88:	4629      	mov	r1, r5
   e0f8a:	f000 fed1 	bl	e1d30 <__aeabi_dmul>
   e0f8e:	a398      	add	r3, pc, #608	; (adr r3, e11f0 <__kernel_tan+0x330>)
   e0f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f94:	f000 fd1a 	bl	e19cc <__adddf3>
   e0f98:	4622      	mov	r2, r4
   e0f9a:	462b      	mov	r3, r5
   e0f9c:	f000 fec8 	bl	e1d30 <__aeabi_dmul>
   e0fa0:	a395      	add	r3, pc, #596	; (adr r3, e11f8 <__kernel_tan+0x338>)
   e0fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fa6:	f000 fd11 	bl	e19cc <__adddf3>
   e0faa:	4622      	mov	r2, r4
   e0fac:	462b      	mov	r3, r5
   e0fae:	f000 febf 	bl	e1d30 <__aeabi_dmul>
   e0fb2:	a393      	add	r3, pc, #588	; (adr r3, e1200 <__kernel_tan+0x340>)
   e0fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fb8:	f000 fd08 	bl	e19cc <__adddf3>
   e0fbc:	4622      	mov	r2, r4
   e0fbe:	462b      	mov	r3, r5
   e0fc0:	f000 feb6 	bl	e1d30 <__aeabi_dmul>
   e0fc4:	a390      	add	r3, pc, #576	; (adr r3, e1208 <__kernel_tan+0x348>)
   e0fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fca:	f000 fcff 	bl	e19cc <__adddf3>
   e0fce:	4622      	mov	r2, r4
   e0fd0:	462b      	mov	r3, r5
   e0fd2:	f000 fead 	bl	e1d30 <__aeabi_dmul>
   e0fd6:	a38e      	add	r3, pc, #568	; (adr r3, e1210 <__kernel_tan+0x350>)
   e0fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fdc:	f000 fcf6 	bl	e19cc <__adddf3>
   e0fe0:	4652      	mov	r2, sl
   e0fe2:	465b      	mov	r3, fp
   e0fe4:	f000 fea4 	bl	e1d30 <__aeabi_dmul>
   e0fe8:	a38b      	add	r3, pc, #556	; (adr r3, e1218 <__kernel_tan+0x358>)
   e0fea:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e0ff2:	4620      	mov	r0, r4
   e0ff4:	4629      	mov	r1, r5
   e0ff6:	f000 fe9b 	bl	e1d30 <__aeabi_dmul>
   e0ffa:	a389      	add	r3, pc, #548	; (adr r3, e1220 <__kernel_tan+0x360>)
   e0ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1000:	f000 fce4 	bl	e19cc <__adddf3>
   e1004:	4622      	mov	r2, r4
   e1006:	462b      	mov	r3, r5
   e1008:	f000 fe92 	bl	e1d30 <__aeabi_dmul>
   e100c:	a386      	add	r3, pc, #536	; (adr r3, e1228 <__kernel_tan+0x368>)
   e100e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1012:	f000 fcdb 	bl	e19cc <__adddf3>
   e1016:	4622      	mov	r2, r4
   e1018:	462b      	mov	r3, r5
   e101a:	f000 fe89 	bl	e1d30 <__aeabi_dmul>
   e101e:	a384      	add	r3, pc, #528	; (adr r3, e1230 <__kernel_tan+0x370>)
   e1020:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1024:	f000 fcd2 	bl	e19cc <__adddf3>
   e1028:	4622      	mov	r2, r4
   e102a:	462b      	mov	r3, r5
   e102c:	f000 fe80 	bl	e1d30 <__aeabi_dmul>
   e1030:	a381      	add	r3, pc, #516	; (adr r3, e1238 <__kernel_tan+0x378>)
   e1032:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1036:	f000 fcc9 	bl	e19cc <__adddf3>
   e103a:	4622      	mov	r2, r4
   e103c:	462b      	mov	r3, r5
   e103e:	f000 fe77 	bl	e1d30 <__aeabi_dmul>
   e1042:	a37f      	add	r3, pc, #508	; (adr r3, e1240 <__kernel_tan+0x380>)
   e1044:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1048:	f000 fcc0 	bl	e19cc <__adddf3>
   e104c:	4602      	mov	r2, r0
   e104e:	460b      	mov	r3, r1
   e1050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e1054:	f000 fcba 	bl	e19cc <__adddf3>
   e1058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e105c:	f000 fe68 	bl	e1d30 <__aeabi_dmul>
   e1060:	e9dd 4500 	ldrd	r4, r5, [sp]
   e1064:	4622      	mov	r2, r4
   e1066:	462b      	mov	r3, r5
   e1068:	f000 fcb0 	bl	e19cc <__adddf3>
   e106c:	4652      	mov	r2, sl
   e106e:	465b      	mov	r3, fp
   e1070:	f000 fe5e 	bl	e1d30 <__aeabi_dmul>
   e1074:	4602      	mov	r2, r0
   e1076:	460b      	mov	r3, r1
   e1078:	4620      	mov	r0, r4
   e107a:	4629      	mov	r1, r5
   e107c:	f000 fca6 	bl	e19cc <__adddf3>
   e1080:	a371      	add	r3, pc, #452	; (adr r3, e1248 <__kernel_tan+0x388>)
   e1082:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1086:	4604      	mov	r4, r0
   e1088:	460d      	mov	r5, r1
   e108a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e108e:	f000 fe4f 	bl	e1d30 <__aeabi_dmul>
   e1092:	4622      	mov	r2, r4
   e1094:	462b      	mov	r3, r5
   e1096:	f000 fc99 	bl	e19cc <__adddf3>
   e109a:	460b      	mov	r3, r1
   e109c:	4602      	mov	r2, r0
   e109e:	4649      	mov	r1, r9
   e10a0:	4640      	mov	r0, r8
   e10a2:	e9cd 2300 	strd	r2, r3, [sp]
   e10a6:	f000 fc91 	bl	e19cc <__adddf3>
   e10aa:	4b6b      	ldr	r3, [pc, #428]	; (e1258 <__kernel_tan+0x398>)
   e10ac:	429e      	cmp	r6, r3
   e10ae:	4604      	mov	r4, r0
   e10b0:	460d      	mov	r5, r1
   e10b2:	dc3c      	bgt.n	e112e <__kernel_tan+0x26e>
   e10b4:	2f01      	cmp	r7, #1
   e10b6:	f000 80e0 	beq.w	e127a <__kernel_tan+0x3ba>
   e10ba:	4602      	mov	r2, r0
   e10bc:	460b      	mov	r3, r1
   e10be:	2000      	movs	r0, #0
   e10c0:	4964      	ldr	r1, [pc, #400]	; (e1254 <__kernel_tan+0x394>)
   e10c2:	f000 ff5f 	bl	e1f84 <__aeabi_ddiv>
   e10c6:	2400      	movs	r4, #0
   e10c8:	460f      	mov	r7, r1
   e10ca:	464b      	mov	r3, r9
   e10cc:	4606      	mov	r6, r0
   e10ce:	4629      	mov	r1, r5
   e10d0:	4620      	mov	r0, r4
   e10d2:	4642      	mov	r2, r8
   e10d4:	f000 fc78 	bl	e19c8 <__aeabi_dsub>
   e10d8:	4602      	mov	r2, r0
   e10da:	460b      	mov	r3, r1
   e10dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   e10e0:	f000 fc72 	bl	e19c8 <__aeabi_dsub>
   e10e4:	4622      	mov	r2, r4
   e10e6:	463b      	mov	r3, r7
   e10e8:	f000 fe22 	bl	e1d30 <__aeabi_dmul>
   e10ec:	46a2      	mov	sl, r4
   e10ee:	46a9      	mov	r9, r5
   e10f0:	4604      	mov	r4, r0
   e10f2:	460d      	mov	r5, r1
   e10f4:	4652      	mov	r2, sl
   e10f6:	463b      	mov	r3, r7
   e10f8:	4650      	mov	r0, sl
   e10fa:	4649      	mov	r1, r9
   e10fc:	f000 fe18 	bl	e1d30 <__aeabi_dmul>
   e1100:	2200      	movs	r2, #0
   e1102:	4b56      	ldr	r3, [pc, #344]	; (e125c <__kernel_tan+0x39c>)
   e1104:	f000 fc62 	bl	e19cc <__adddf3>
   e1108:	4602      	mov	r2, r0
   e110a:	460b      	mov	r3, r1
   e110c:	4620      	mov	r0, r4
   e110e:	4629      	mov	r1, r5
   e1110:	f000 fc5c 	bl	e19cc <__adddf3>
   e1114:	4632      	mov	r2, r6
   e1116:	463b      	mov	r3, r7
   e1118:	f000 fe0a 	bl	e1d30 <__aeabi_dmul>
   e111c:	4652      	mov	r2, sl
   e111e:	463b      	mov	r3, r7
   e1120:	f000 fc54 	bl	e19cc <__adddf3>
   e1124:	ec41 0b10 	vmov	d0, r0, r1
   e1128:	b009      	add	sp, #36	; 0x24
   e112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e112e:	4638      	mov	r0, r7
   e1130:	f000 fd98 	bl	e1c64 <__aeabi_i2d>
   e1134:	4622      	mov	r2, r4
   e1136:	4606      	mov	r6, r0
   e1138:	460f      	mov	r7, r1
   e113a:	462b      	mov	r3, r5
   e113c:	4620      	mov	r0, r4
   e113e:	4629      	mov	r1, r5
   e1140:	f000 fdf6 	bl	e1d30 <__aeabi_dmul>
   e1144:	4632      	mov	r2, r6
   e1146:	4682      	mov	sl, r0
   e1148:	468b      	mov	fp, r1
   e114a:	463b      	mov	r3, r7
   e114c:	4620      	mov	r0, r4
   e114e:	4629      	mov	r1, r5
   e1150:	f000 fc3c 	bl	e19cc <__adddf3>
   e1154:	4602      	mov	r2, r0
   e1156:	460b      	mov	r3, r1
   e1158:	4650      	mov	r0, sl
   e115a:	4659      	mov	r1, fp
   e115c:	f000 ff12 	bl	e1f84 <__aeabi_ddiv>
   e1160:	e9dd 2300 	ldrd	r2, r3, [sp]
   e1164:	f000 fc30 	bl	e19c8 <__aeabi_dsub>
   e1168:	4602      	mov	r2, r0
   e116a:	460b      	mov	r3, r1
   e116c:	4640      	mov	r0, r8
   e116e:	4649      	mov	r1, r9
   e1170:	f000 fc2a 	bl	e19c8 <__aeabi_dsub>
   e1174:	4602      	mov	r2, r0
   e1176:	460b      	mov	r3, r1
   e1178:	f000 fc28 	bl	e19cc <__adddf3>
   e117c:	4602      	mov	r2, r0
   e117e:	460b      	mov	r3, r1
   e1180:	4630      	mov	r0, r6
   e1182:	4639      	mov	r1, r7
   e1184:	f000 fc20 	bl	e19c8 <__aeabi_dsub>
   e1188:	9b05      	ldr	r3, [sp, #20]
   e118a:	4604      	mov	r4, r0
   e118c:	1798      	asrs	r0, r3, #30
   e118e:	f000 0002 	and.w	r0, r0, #2
   e1192:	f1c0 0001 	rsb	r0, r0, #1
   e1196:	460d      	mov	r5, r1
   e1198:	f000 fd64 	bl	e1c64 <__aeabi_i2d>
   e119c:	4602      	mov	r2, r0
   e119e:	460b      	mov	r3, r1
   e11a0:	4620      	mov	r0, r4
   e11a2:	4629      	mov	r1, r5
   e11a4:	f000 fdc4 	bl	e1d30 <__aeabi_dmul>
   e11a8:	ec41 0b10 	vmov	d0, r0, r1
   e11ac:	b009      	add	sp, #36	; 0x24
   e11ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e11b2:	ec49 8b10 	vmov	d0, r8, r9
   e11b6:	f7fb fbb3 	bl	dc920 <fabs>
   e11ba:	2000      	movs	r0, #0
   e11bc:	ec53 2b10 	vmov	r2, r3, d0
   e11c0:	4926      	ldr	r1, [pc, #152]	; (e125c <__kernel_tan+0x39c>)
   e11c2:	f000 fedf 	bl	e1f84 <__aeabi_ddiv>
   e11c6:	ec41 0b10 	vmov	d0, r0, r1
   e11ca:	e7ad      	b.n	e1128 <__kernel_tan+0x268>
   e11cc:	f3af 8000 	nop.w
   e11d0:	54442d18 	.word	0x54442d18
   e11d4:	3fe921fb 	.word	0x3fe921fb
   e11d8:	33145c07 	.word	0x33145c07
   e11dc:	3c81a626 	.word	0x3c81a626
	...
   e11e8:	74bf7ad4 	.word	0x74bf7ad4
   e11ec:	3efb2a70 	.word	0x3efb2a70
   e11f0:	32f0a7e9 	.word	0x32f0a7e9
   e11f4:	3f12b80f 	.word	0x3f12b80f
   e11f8:	1a8d1068 	.word	0x1a8d1068
   e11fc:	3f3026f7 	.word	0x3f3026f7
   e1200:	fee08315 	.word	0xfee08315
   e1204:	3f57dbc8 	.word	0x3f57dbc8
   e1208:	e96e8493 	.word	0xe96e8493
   e120c:	3f8226e3 	.word	0x3f8226e3
   e1210:	1bb341fe 	.word	0x1bb341fe
   e1214:	3faba1ba 	.word	0x3faba1ba
   e1218:	db605373 	.word	0xdb605373
   e121c:	bef375cb 	.word	0xbef375cb
   e1220:	a03792a6 	.word	0xa03792a6
   e1224:	3f147e88 	.word	0x3f147e88
   e1228:	f2f26501 	.word	0xf2f26501
   e122c:	3f4344d8 	.word	0x3f4344d8
   e1230:	c9560328 	.word	0xc9560328
   e1234:	3f6d6d22 	.word	0x3f6d6d22
   e1238:	8406d637 	.word	0x8406d637
   e123c:	3f9664f4 	.word	0x3f9664f4
   e1240:	1110fe7a 	.word	0x1110fe7a
   e1244:	3fc11111 	.word	0x3fc11111
   e1248:	55555563 	.word	0x55555563
   e124c:	3fd55555 	.word	0x3fd55555
   e1250:	3e2fffff 	.word	0x3e2fffff
   e1254:	bff00000 	.word	0xbff00000
   e1258:	3fe59427 	.word	0x3fe59427
   e125c:	3ff00000 	.word	0x3ff00000
   e1260:	e9dd 4500 	ldrd	r4, r5, [sp]
   e1264:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e1268:	4622      	mov	r2, r4
   e126a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e126e:	ee10 8a10 	vmov	r8, s0
   e1272:	4689      	mov	r9, r1
   e1274:	e9cd 2300 	strd	r2, r3, [sp]
   e1278:	e652      	b.n	e0f20 <__kernel_tan+0x60>
   e127a:	ec45 4b10 	vmov	d0, r4, r5
   e127e:	e753      	b.n	e1128 <__kernel_tan+0x268>
   e1280:	ec49 8b10 	vmov	d0, r8, r9
   e1284:	e750      	b.n	e1128 <__kernel_tan+0x268>
   e1286:	bf00      	nop

000e1288 <expm1>:
   e1288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e128c:	ec5b ab10 	vmov	sl, fp, d0
   e1290:	49d7      	ldr	r1, [pc, #860]	; (e15f0 <expm1+0x368>)
   e1292:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e1296:	428b      	cmp	r3, r1
   e1298:	b085      	sub	sp, #20
   e129a:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e129e:	d953      	bls.n	e1348 <expm1+0xc0>
   e12a0:	49d4      	ldr	r1, [pc, #848]	; (e15f4 <expm1+0x36c>)
   e12a2:	428b      	cmp	r3, r1
   e12a4:	f200 8105 	bhi.w	e14b2 <expm1+0x22a>
   e12a8:	2c00      	cmp	r4, #0
   e12aa:	f000 81de 	beq.w	e166a <expm1+0x3e2>
   e12ae:	a3b6      	add	r3, pc, #728	; (adr r3, e1588 <expm1+0x300>)
   e12b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12b4:	4650      	mov	r0, sl
   e12b6:	4659      	mov	r1, fp
   e12b8:	f000 fb88 	bl	e19cc <__adddf3>
   e12bc:	2200      	movs	r2, #0
   e12be:	2300      	movs	r3, #0
   e12c0:	f000 ffa8 	bl	e2214 <__aeabi_dcmplt>
   e12c4:	2800      	cmp	r0, #0
   e12c6:	f040 80ff 	bne.w	e14c8 <expm1+0x240>
   e12ca:	a3b1      	add	r3, pc, #708	; (adr r3, e1590 <expm1+0x308>)
   e12cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12d0:	4650      	mov	r0, sl
   e12d2:	4659      	mov	r1, fp
   e12d4:	f000 fd2c 	bl	e1d30 <__aeabi_dmul>
   e12d8:	4602      	mov	r2, r0
   e12da:	460b      	mov	r3, r1
   e12dc:	2000      	movs	r0, #0
   e12de:	49c6      	ldr	r1, [pc, #792]	; (e15f8 <expm1+0x370>)
   e12e0:	f000 fb74 	bl	e19cc <__adddf3>
   e12e4:	f000 ffd4 	bl	e2290 <__aeabi_d2iz>
   e12e8:	9001      	str	r0, [sp, #4]
   e12ea:	f000 fcbb 	bl	e1c64 <__aeabi_i2d>
   e12ee:	a3aa      	add	r3, pc, #680	; (adr r3, e1598 <expm1+0x310>)
   e12f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e12f4:	4606      	mov	r6, r0
   e12f6:	460f      	mov	r7, r1
   e12f8:	f000 fd1a 	bl	e1d30 <__aeabi_dmul>
   e12fc:	4602      	mov	r2, r0
   e12fe:	460b      	mov	r3, r1
   e1300:	4650      	mov	r0, sl
   e1302:	4659      	mov	r1, fp
   e1304:	f000 fb60 	bl	e19c8 <__aeabi_dsub>
   e1308:	a3a5      	add	r3, pc, #660	; (adr r3, e15a0 <expm1+0x318>)
   e130a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e130e:	4680      	mov	r8, r0
   e1310:	4689      	mov	r9, r1
   e1312:	4630      	mov	r0, r6
   e1314:	4639      	mov	r1, r7
   e1316:	f000 fd0b 	bl	e1d30 <__aeabi_dmul>
   e131a:	4606      	mov	r6, r0
   e131c:	460f      	mov	r7, r1
   e131e:	4632      	mov	r2, r6
   e1320:	463b      	mov	r3, r7
   e1322:	4640      	mov	r0, r8
   e1324:	4649      	mov	r1, r9
   e1326:	f000 fb4f 	bl	e19c8 <__aeabi_dsub>
   e132a:	4602      	mov	r2, r0
   e132c:	460b      	mov	r3, r1
   e132e:	4682      	mov	sl, r0
   e1330:	468b      	mov	fp, r1
   e1332:	4640      	mov	r0, r8
   e1334:	4649      	mov	r1, r9
   e1336:	f000 fb47 	bl	e19c8 <__aeabi_dsub>
   e133a:	4632      	mov	r2, r6
   e133c:	463b      	mov	r3, r7
   e133e:	f000 fb43 	bl	e19c8 <__aeabi_dsub>
   e1342:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e1346:	e009      	b.n	e135c <expm1+0xd4>
   e1348:	4aac      	ldr	r2, [pc, #688]	; (e15fc <expm1+0x374>)
   e134a:	4293      	cmp	r3, r2
   e134c:	f200 80e7 	bhi.w	e151e <expm1+0x296>
   e1350:	4aab      	ldr	r2, [pc, #684]	; (e1600 <expm1+0x378>)
   e1352:	4293      	cmp	r3, r2
   e1354:	f240 8162 	bls.w	e161c <expm1+0x394>
   e1358:	2300      	movs	r3, #0
   e135a:	9301      	str	r3, [sp, #4]
   e135c:	2200      	movs	r2, #0
   e135e:	4ba9      	ldr	r3, [pc, #676]	; (e1604 <expm1+0x37c>)
   e1360:	4650      	mov	r0, sl
   e1362:	4659      	mov	r1, fp
   e1364:	f000 fce4 	bl	e1d30 <__aeabi_dmul>
   e1368:	4606      	mov	r6, r0
   e136a:	460f      	mov	r7, r1
   e136c:	4602      	mov	r2, r0
   e136e:	460b      	mov	r3, r1
   e1370:	4650      	mov	r0, sl
   e1372:	4659      	mov	r1, fp
   e1374:	f000 fcdc 	bl	e1d30 <__aeabi_dmul>
   e1378:	a38b      	add	r3, pc, #556	; (adr r3, e15a8 <expm1+0x320>)
   e137a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e137e:	4604      	mov	r4, r0
   e1380:	460d      	mov	r5, r1
   e1382:	f000 fcd5 	bl	e1d30 <__aeabi_dmul>
   e1386:	a38a      	add	r3, pc, #552	; (adr r3, e15b0 <expm1+0x328>)
   e1388:	e9d3 2300 	ldrd	r2, r3, [r3]
   e138c:	f000 fb1e 	bl	e19cc <__adddf3>
   e1390:	4622      	mov	r2, r4
   e1392:	462b      	mov	r3, r5
   e1394:	f000 fccc 	bl	e1d30 <__aeabi_dmul>
   e1398:	a387      	add	r3, pc, #540	; (adr r3, e15b8 <expm1+0x330>)
   e139a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e139e:	f000 fb13 	bl	e19c8 <__aeabi_dsub>
   e13a2:	4622      	mov	r2, r4
   e13a4:	462b      	mov	r3, r5
   e13a6:	f000 fcc3 	bl	e1d30 <__aeabi_dmul>
   e13aa:	a385      	add	r3, pc, #532	; (adr r3, e15c0 <expm1+0x338>)
   e13ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13b0:	f000 fb0c 	bl	e19cc <__adddf3>
   e13b4:	4622      	mov	r2, r4
   e13b6:	462b      	mov	r3, r5
   e13b8:	f000 fcba 	bl	e1d30 <__aeabi_dmul>
   e13bc:	a382      	add	r3, pc, #520	; (adr r3, e15c8 <expm1+0x340>)
   e13be:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13c2:	f000 fb01 	bl	e19c8 <__aeabi_dsub>
   e13c6:	4622      	mov	r2, r4
   e13c8:	462b      	mov	r3, r5
   e13ca:	f000 fcb1 	bl	e1d30 <__aeabi_dmul>
   e13ce:	2200      	movs	r2, #0
   e13d0:	4b8d      	ldr	r3, [pc, #564]	; (e1608 <expm1+0x380>)
   e13d2:	f000 fafb 	bl	e19cc <__adddf3>
   e13d6:	4680      	mov	r8, r0
   e13d8:	4689      	mov	r9, r1
   e13da:	4602      	mov	r2, r0
   e13dc:	460b      	mov	r3, r1
   e13de:	4630      	mov	r0, r6
   e13e0:	4639      	mov	r1, r7
   e13e2:	f000 fca5 	bl	e1d30 <__aeabi_dmul>
   e13e6:	4602      	mov	r2, r0
   e13e8:	460b      	mov	r3, r1
   e13ea:	2000      	movs	r0, #0
   e13ec:	4987      	ldr	r1, [pc, #540]	; (e160c <expm1+0x384>)
   e13ee:	f000 faeb 	bl	e19c8 <__aeabi_dsub>
   e13f2:	4606      	mov	r6, r0
   e13f4:	4602      	mov	r2, r0
   e13f6:	460b      	mov	r3, r1
   e13f8:	460f      	mov	r7, r1
   e13fa:	4640      	mov	r0, r8
   e13fc:	4649      	mov	r1, r9
   e13fe:	f000 fae3 	bl	e19c8 <__aeabi_dsub>
   e1402:	4632      	mov	r2, r6
   e1404:	4680      	mov	r8, r0
   e1406:	4689      	mov	r9, r1
   e1408:	463b      	mov	r3, r7
   e140a:	4650      	mov	r0, sl
   e140c:	4659      	mov	r1, fp
   e140e:	f000 fc8f 	bl	e1d30 <__aeabi_dmul>
   e1412:	4602      	mov	r2, r0
   e1414:	460b      	mov	r3, r1
   e1416:	2000      	movs	r0, #0
   e1418:	497d      	ldr	r1, [pc, #500]	; (e1610 <expm1+0x388>)
   e141a:	f000 fad5 	bl	e19c8 <__aeabi_dsub>
   e141e:	4602      	mov	r2, r0
   e1420:	460b      	mov	r3, r1
   e1422:	4640      	mov	r0, r8
   e1424:	4649      	mov	r1, r9
   e1426:	f000 fdad 	bl	e1f84 <__aeabi_ddiv>
   e142a:	4622      	mov	r2, r4
   e142c:	462b      	mov	r3, r5
   e142e:	f000 fc7f 	bl	e1d30 <__aeabi_dmul>
   e1432:	9e01      	ldr	r6, [sp, #4]
   e1434:	4602      	mov	r2, r0
   e1436:	460b      	mov	r3, r1
   e1438:	2e00      	cmp	r6, #0
   e143a:	d048      	beq.n	e14ce <expm1+0x246>
   e143c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e1440:	4632      	mov	r2, r6
   e1442:	463b      	mov	r3, r7
   e1444:	f000 fac0 	bl	e19c8 <__aeabi_dsub>
   e1448:	4652      	mov	r2, sl
   e144a:	465b      	mov	r3, fp
   e144c:	f000 fc70 	bl	e1d30 <__aeabi_dmul>
   e1450:	4632      	mov	r2, r6
   e1452:	463b      	mov	r3, r7
   e1454:	f000 fab8 	bl	e19c8 <__aeabi_dsub>
   e1458:	462b      	mov	r3, r5
   e145a:	4622      	mov	r2, r4
   e145c:	f000 fab4 	bl	e19c8 <__aeabi_dsub>
   e1460:	9b01      	ldr	r3, [sp, #4]
   e1462:	3301      	adds	r3, #1
   e1464:	4606      	mov	r6, r0
   e1466:	460f      	mov	r7, r1
   e1468:	f000 810b 	beq.w	e1682 <expm1+0x3fa>
   e146c:	9b01      	ldr	r3, [sp, #4]
   e146e:	2b01      	cmp	r3, #1
   e1470:	f000 80df 	beq.w	e1632 <expm1+0x3aa>
   e1474:	9b01      	ldr	r3, [sp, #4]
   e1476:	3301      	adds	r3, #1
   e1478:	2b39      	cmp	r3, #57	; 0x39
   e147a:	d866      	bhi.n	e154a <expm1+0x2c2>
   e147c:	9b01      	ldr	r3, [sp, #4]
   e147e:	2b13      	cmp	r3, #19
   e1480:	f340 8110 	ble.w	e16a4 <expm1+0x41c>
   e1484:	9c01      	ldr	r4, [sp, #4]
   e1486:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e148a:	3503      	adds	r5, #3
   e148c:	2200      	movs	r2, #0
   e148e:	052b      	lsls	r3, r5, #20
   e1490:	f000 fa9c 	bl	e19cc <__adddf3>
   e1494:	4602      	mov	r2, r0
   e1496:	460b      	mov	r3, r1
   e1498:	4650      	mov	r0, sl
   e149a:	4659      	mov	r1, fp
   e149c:	f000 fa94 	bl	e19c8 <__aeabi_dsub>
   e14a0:	2200      	movs	r2, #0
   e14a2:	4b59      	ldr	r3, [pc, #356]	; (e1608 <expm1+0x380>)
   e14a4:	f000 fa92 	bl	e19cc <__adddf3>
   e14a8:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e14ac:	ec41 0b10 	vmov	d0, r0, r1
   e14b0:	e01d      	b.n	e14ee <expm1+0x266>
   e14b2:	4958      	ldr	r1, [pc, #352]	; (e1614 <expm1+0x38c>)
   e14b4:	428b      	cmp	r3, r1
   e14b6:	d91d      	bls.n	e14f4 <expm1+0x26c>
   e14b8:	ee10 3a10 	vmov	r3, s0
   e14bc:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e14c0:	4313      	orrs	r3, r2
   e14c2:	f040 8128 	bne.w	e1716 <expm1+0x48e>
   e14c6:	b194      	cbz	r4, e14ee <expm1+0x266>
   e14c8:	ed9f 0b41 	vldr	d0, [pc, #260]	; e15d0 <expm1+0x348>
   e14cc:	e00f      	b.n	e14ee <expm1+0x266>
   e14ce:	4650      	mov	r0, sl
   e14d0:	4659      	mov	r1, fp
   e14d2:	f000 fc2d 	bl	e1d30 <__aeabi_dmul>
   e14d6:	4622      	mov	r2, r4
   e14d8:	462b      	mov	r3, r5
   e14da:	f000 fa75 	bl	e19c8 <__aeabi_dsub>
   e14de:	4602      	mov	r2, r0
   e14e0:	460b      	mov	r3, r1
   e14e2:	4650      	mov	r0, sl
   e14e4:	4659      	mov	r1, fp
   e14e6:	f000 fa6f 	bl	e19c8 <__aeabi_dsub>
   e14ea:	ec41 0b10 	vmov	d0, r0, r1
   e14ee:	b005      	add	sp, #20
   e14f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e14f4:	a338      	add	r3, pc, #224	; (adr r3, e15d8 <expm1+0x350>)
   e14f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e14fa:	ee10 0a10 	vmov	r0, s0
   e14fe:	4659      	mov	r1, fp
   e1500:	f000 fea6 	bl	e2250 <__aeabi_dcmpgt>
   e1504:	2800      	cmp	r0, #0
   e1506:	f43f aecf 	beq.w	e12a8 <expm1+0x20>
   e150a:	a335      	add	r3, pc, #212	; (adr r3, e15e0 <expm1+0x358>)
   e150c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1510:	4610      	mov	r0, r2
   e1512:	4619      	mov	r1, r3
   e1514:	f000 fc0c 	bl	e1d30 <__aeabi_dmul>
   e1518:	ec41 0b10 	vmov	d0, r0, r1
   e151c:	e7e7      	b.n	e14ee <expm1+0x266>
   e151e:	4a3e      	ldr	r2, [pc, #248]	; (e1618 <expm1+0x390>)
   e1520:	4293      	cmp	r3, r2
   e1522:	f200 80d7 	bhi.w	e16d4 <expm1+0x44c>
   e1526:	ee10 0a10 	vmov	r0, s0
   e152a:	4659      	mov	r1, fp
   e152c:	a31a      	add	r3, pc, #104	; (adr r3, e1598 <expm1+0x310>)
   e152e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1532:	b1f4      	cbz	r4, e1572 <expm1+0x2ea>
   e1534:	f000 fa4a 	bl	e19cc <__adddf3>
   e1538:	f04f 33ff 	mov.w	r3, #4294967295
   e153c:	4680      	mov	r8, r0
   e153e:	4689      	mov	r9, r1
   e1540:	9301      	str	r3, [sp, #4]
   e1542:	a729      	add	r7, pc, #164	; (adr r7, e15e8 <expm1+0x360>)
   e1544:	e9d7 6700 	ldrd	r6, r7, [r7]
   e1548:	e6e9      	b.n	e131e <expm1+0x96>
   e154a:	4652      	mov	r2, sl
   e154c:	465b      	mov	r3, fp
   e154e:	f000 fa3b 	bl	e19c8 <__aeabi_dsub>
   e1552:	4602      	mov	r2, r0
   e1554:	460b      	mov	r3, r1
   e1556:	2000      	movs	r0, #0
   e1558:	492b      	ldr	r1, [pc, #172]	; (e1608 <expm1+0x380>)
   e155a:	f000 fa35 	bl	e19c8 <__aeabi_dsub>
   e155e:	9a01      	ldr	r2, [sp, #4]
   e1560:	4b29      	ldr	r3, [pc, #164]	; (e1608 <expm1+0x380>)
   e1562:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e1566:	2200      	movs	r2, #0
   e1568:	f000 fa2e 	bl	e19c8 <__aeabi_dsub>
   e156c:	ec41 0b10 	vmov	d0, r0, r1
   e1570:	e7bd      	b.n	e14ee <expm1+0x266>
   e1572:	f000 fa29 	bl	e19c8 <__aeabi_dsub>
   e1576:	2301      	movs	r3, #1
   e1578:	4680      	mov	r8, r0
   e157a:	4689      	mov	r9, r1
   e157c:	9301      	str	r3, [sp, #4]
   e157e:	a708      	add	r7, pc, #32	; (adr r7, e15a0 <expm1+0x318>)
   e1580:	e9d7 6700 	ldrd	r6, r7, [r7]
   e1584:	e6cb      	b.n	e131e <expm1+0x96>
   e1586:	bf00      	nop
   e1588:	c2f8f359 	.word	0xc2f8f359
   e158c:	01a56e1f 	.word	0x01a56e1f
   e1590:	652b82fe 	.word	0x652b82fe
   e1594:	3ff71547 	.word	0x3ff71547
   e1598:	fee00000 	.word	0xfee00000
   e159c:	3fe62e42 	.word	0x3fe62e42
   e15a0:	35793c76 	.word	0x35793c76
   e15a4:	3dea39ef 	.word	0x3dea39ef
   e15a8:	6e09c32d 	.word	0x6e09c32d
   e15ac:	be8afdb7 	.word	0xbe8afdb7
   e15b0:	86e65239 	.word	0x86e65239
   e15b4:	3ed0cfca 	.word	0x3ed0cfca
   e15b8:	9eaadbb7 	.word	0x9eaadbb7
   e15bc:	3f14ce19 	.word	0x3f14ce19
   e15c0:	19fe5585 	.word	0x19fe5585
   e15c4:	3f5a01a0 	.word	0x3f5a01a0
   e15c8:	111110f4 	.word	0x111110f4
   e15cc:	3fa11111 	.word	0x3fa11111
   e15d0:	00000000 	.word	0x00000000
   e15d4:	bff00000 	.word	0xbff00000
   e15d8:	fefa39ef 	.word	0xfefa39ef
   e15dc:	40862e42 	.word	0x40862e42
   e15e0:	8800759c 	.word	0x8800759c
   e15e4:	7e37e43c 	.word	0x7e37e43c
   e15e8:	35793c76 	.word	0x35793c76
   e15ec:	bdea39ef 	.word	0xbdea39ef
   e15f0:	40436879 	.word	0x40436879
   e15f4:	40862e41 	.word	0x40862e41
   e15f8:	bfe00000 	.word	0xbfe00000
   e15fc:	3fd62e42 	.word	0x3fd62e42
   e1600:	3c8fffff 	.word	0x3c8fffff
   e1604:	3fe00000 	.word	0x3fe00000
   e1608:	3ff00000 	.word	0x3ff00000
   e160c:	40080000 	.word	0x40080000
   e1610:	40180000 	.word	0x40180000
   e1614:	7fefffff 	.word	0x7fefffff
   e1618:	3ff0a2b1 	.word	0x3ff0a2b1
   e161c:	a349      	add	r3, pc, #292	; (adr r3, e1744 <expm1+0x4bc>)
   e161e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1622:	ee10 0a10 	vmov	r0, s0
   e1626:	4659      	mov	r1, fp
   e1628:	f000 f9d0 	bl	e19cc <__adddf3>
   e162c:	4602      	mov	r2, r0
   e162e:	460b      	mov	r3, r1
   e1630:	e753      	b.n	e14da <expm1+0x252>
   e1632:	2200      	movs	r2, #0
   e1634:	4b40      	ldr	r3, [pc, #256]	; (e1738 <expm1+0x4b0>)
   e1636:	4650      	mov	r0, sl
   e1638:	4659      	mov	r1, fp
   e163a:	f000 fdeb 	bl	e2214 <__aeabi_dcmplt>
   e163e:	2800      	cmp	r0, #0
   e1640:	d058      	beq.n	e16f4 <expm1+0x46c>
   e1642:	2200      	movs	r2, #0
   e1644:	4b3d      	ldr	r3, [pc, #244]	; (e173c <expm1+0x4b4>)
   e1646:	4650      	mov	r0, sl
   e1648:	4659      	mov	r1, fp
   e164a:	f000 f9bf 	bl	e19cc <__adddf3>
   e164e:	4602      	mov	r2, r0
   e1650:	460b      	mov	r3, r1
   e1652:	4630      	mov	r0, r6
   e1654:	4639      	mov	r1, r7
   e1656:	f000 f9b7 	bl	e19c8 <__aeabi_dsub>
   e165a:	2200      	movs	r2, #0
   e165c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e1660:	f000 fb66 	bl	e1d30 <__aeabi_dmul>
   e1664:	ec41 0b10 	vmov	d0, r0, r1
   e1668:	e741      	b.n	e14ee <expm1+0x266>
   e166a:	a331      	add	r3, pc, #196	; (adr r3, e1730 <expm1+0x4a8>)
   e166c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1670:	4650      	mov	r0, sl
   e1672:	4659      	mov	r1, fp
   e1674:	f000 fb5c 	bl	e1d30 <__aeabi_dmul>
   e1678:	4602      	mov	r2, r0
   e167a:	460b      	mov	r3, r1
   e167c:	2000      	movs	r0, #0
   e167e:	492f      	ldr	r1, [pc, #188]	; (e173c <expm1+0x4b4>)
   e1680:	e62e      	b.n	e12e0 <expm1+0x58>
   e1682:	4602      	mov	r2, r0
   e1684:	460b      	mov	r3, r1
   e1686:	4650      	mov	r0, sl
   e1688:	4659      	mov	r1, fp
   e168a:	f000 f99d 	bl	e19c8 <__aeabi_dsub>
   e168e:	2200      	movs	r2, #0
   e1690:	4b2a      	ldr	r3, [pc, #168]	; (e173c <expm1+0x4b4>)
   e1692:	f000 fb4d 	bl	e1d30 <__aeabi_dmul>
   e1696:	2200      	movs	r2, #0
   e1698:	4b28      	ldr	r3, [pc, #160]	; (e173c <expm1+0x4b4>)
   e169a:	f000 f995 	bl	e19c8 <__aeabi_dsub>
   e169e:	ec41 0b10 	vmov	d0, r0, r1
   e16a2:	e724      	b.n	e14ee <expm1+0x266>
   e16a4:	9c01      	ldr	r4, [sp, #4]
   e16a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e16aa:	4123      	asrs	r3, r4
   e16ac:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e16b0:	4652      	mov	r2, sl
   e16b2:	465b      	mov	r3, fp
   e16b4:	f000 f988 	bl	e19c8 <__aeabi_dsub>
   e16b8:	2600      	movs	r6, #0
   e16ba:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e16be:	4602      	mov	r2, r0
   e16c0:	460b      	mov	r3, r1
   e16c2:	4630      	mov	r0, r6
   e16c4:	4639      	mov	r1, r7
   e16c6:	f000 f97f 	bl	e19c8 <__aeabi_dsub>
   e16ca:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e16ce:	ec41 0b10 	vmov	d0, r0, r1
   e16d2:	e70c      	b.n	e14ee <expm1+0x266>
   e16d4:	a316      	add	r3, pc, #88	; (adr r3, e1730 <expm1+0x4a8>)
   e16d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e16da:	ee10 0a10 	vmov	r0, s0
   e16de:	4659      	mov	r1, fp
   e16e0:	f000 fb26 	bl	e1d30 <__aeabi_dmul>
   e16e4:	4602      	mov	r2, r0
   e16e6:	460b      	mov	r3, r1
   e16e8:	2000      	movs	r0, #0
   e16ea:	2c00      	cmp	r4, #0
   e16ec:	f47f adf7 	bne.w	e12de <expm1+0x56>
   e16f0:	4912      	ldr	r1, [pc, #72]	; (e173c <expm1+0x4b4>)
   e16f2:	e5f5      	b.n	e12e0 <expm1+0x58>
   e16f4:	4632      	mov	r2, r6
   e16f6:	463b      	mov	r3, r7
   e16f8:	4650      	mov	r0, sl
   e16fa:	4659      	mov	r1, fp
   e16fc:	f000 f964 	bl	e19c8 <__aeabi_dsub>
   e1700:	4602      	mov	r2, r0
   e1702:	460b      	mov	r3, r1
   e1704:	f000 f962 	bl	e19cc <__adddf3>
   e1708:	2200      	movs	r2, #0
   e170a:	4b0d      	ldr	r3, [pc, #52]	; (e1740 <expm1+0x4b8>)
   e170c:	f000 f95e 	bl	e19cc <__adddf3>
   e1710:	ec41 0b10 	vmov	d0, r0, r1
   e1714:	e6eb      	b.n	e14ee <expm1+0x266>
   e1716:	ee10 2a10 	vmov	r2, s0
   e171a:	ee10 0a10 	vmov	r0, s0
   e171e:	465b      	mov	r3, fp
   e1720:	4659      	mov	r1, fp
   e1722:	f000 f953 	bl	e19cc <__adddf3>
   e1726:	ec41 0b10 	vmov	d0, r0, r1
   e172a:	e6e0      	b.n	e14ee <expm1+0x266>
   e172c:	f3af 8000 	nop.w
   e1730:	652b82fe 	.word	0x652b82fe
   e1734:	3ff71547 	.word	0x3ff71547
   e1738:	bfd00000 	.word	0xbfd00000
   e173c:	3fe00000 	.word	0x3fe00000
   e1740:	3ff00000 	.word	0x3ff00000
   e1744:	8800759c 	.word	0x8800759c
   e1748:	7e37e43c 	.word	0x7e37e43c

000e174c <finite>:
   e174c:	ee10 3a90 	vmov	r3, s1
   e1750:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e1754:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e1758:	0fc0      	lsrs	r0, r0, #31
   e175a:	4770      	bx	lr

000e175c <matherr>:
   e175c:	2000      	movs	r0, #0
   e175e:	4770      	bx	lr

000e1760 <nan>:
   e1760:	ed9f 0b01 	vldr	d0, [pc, #4]	; e1768 <nan+0x8>
   e1764:	4770      	bx	lr
   e1766:	bf00      	nop
   e1768:	00000000 	.word	0x00000000
   e176c:	7ff80000 	.word	0x7ff80000

000e1770 <rint>:
   e1770:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1772:	ec53 2b10 	vmov	r2, r3, d0
   e1776:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e177a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e177e:	2813      	cmp	r0, #19
   e1780:	b083      	sub	sp, #12
   e1782:	4619      	mov	r1, r3
   e1784:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e1788:	ee10 5a10 	vmov	r5, s0
   e178c:	dc2f      	bgt.n	e17ee <rint+0x7e>
   e178e:	2800      	cmp	r0, #0
   e1790:	db49      	blt.n	e1826 <rint+0xb6>
   e1792:	4e3f      	ldr	r6, [pc, #252]	; (e1890 <rint+0x120>)
   e1794:	4106      	asrs	r6, r0
   e1796:	ea03 0706 	and.w	r7, r3, r6
   e179a:	4317      	orrs	r7, r2
   e179c:	d02c      	beq.n	e17f8 <rint+0x88>
   e179e:	0876      	lsrs	r6, r6, #1
   e17a0:	4033      	ands	r3, r6
   e17a2:	431d      	orrs	r5, r3
   e17a4:	d00c      	beq.n	e17c0 <rint+0x50>
   e17a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e17aa:	2813      	cmp	r0, #19
   e17ac:	ea21 0606 	bic.w	r6, r1, r6
   e17b0:	fa43 f100 	asr.w	r1, r3, r0
   e17b4:	ea41 0106 	orr.w	r1, r1, r6
   e17b8:	bf0c      	ite	eq
   e17ba:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e17be:	2500      	movne	r5, #0
   e17c0:	4834      	ldr	r0, [pc, #208]	; (e1894 <rint+0x124>)
   e17c2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e17c6:	462a      	mov	r2, r5
   e17c8:	e9d4 4500 	ldrd	r4, r5, [r4]
   e17cc:	4610      	mov	r0, r2
   e17ce:	462b      	mov	r3, r5
   e17d0:	4622      	mov	r2, r4
   e17d2:	f000 f8fb 	bl	e19cc <__adddf3>
   e17d6:	e9cd 0100 	strd	r0, r1, [sp]
   e17da:	4622      	mov	r2, r4
   e17dc:	462b      	mov	r3, r5
   e17de:	e9dd 0100 	ldrd	r0, r1, [sp]
   e17e2:	f000 f8f1 	bl	e19c8 <__aeabi_dsub>
   e17e6:	ec41 0b10 	vmov	d0, r0, r1
   e17ea:	b003      	add	sp, #12
   e17ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e17ee:	2833      	cmp	r0, #51	; 0x33
   e17f0:	dd06      	ble.n	e1800 <rint+0x90>
   e17f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e17f6:	d042      	beq.n	e187e <rint+0x10e>
   e17f8:	ec43 2b10 	vmov	d0, r2, r3
   e17fc:	b003      	add	sp, #12
   e17fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1800:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e1804:	f04f 30ff 	mov.w	r0, #4294967295
   e1808:	40f0      	lsrs	r0, r6
   e180a:	4202      	tst	r2, r0
   e180c:	d0f4      	beq.n	e17f8 <rint+0x88>
   e180e:	0840      	lsrs	r0, r0, #1
   e1810:	4202      	tst	r2, r0
   e1812:	d0d5      	beq.n	e17c0 <rint+0x50>
   e1814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e1818:	ea25 0000 	bic.w	r0, r5, r0
   e181c:	fa43 f606 	asr.w	r6, r3, r6
   e1820:	ea46 0500 	orr.w	r5, r6, r0
   e1824:	e7cc      	b.n	e17c0 <rint+0x50>
   e1826:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e182a:	4310      	orrs	r0, r2
   e182c:	ee10 7a10 	vmov	r7, s0
   e1830:	d0e2      	beq.n	e17f8 <rint+0x88>
   e1832:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e1836:	4307      	orrs	r7, r0
   e1838:	4278      	negs	r0, r7
   e183a:	4307      	orrs	r7, r0
   e183c:	4815      	ldr	r0, [pc, #84]	; (e1894 <rint+0x124>)
   e183e:	0c59      	lsrs	r1, r3, #17
   e1840:	0b3f      	lsrs	r7, r7, #12
   e1842:	0449      	lsls	r1, r1, #17
   e1844:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e1848:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e184c:	ea47 0301 	orr.w	r3, r7, r1
   e1850:	e9d0 6700 	ldrd	r6, r7, [r0]
   e1854:	4619      	mov	r1, r3
   e1856:	4610      	mov	r0, r2
   e1858:	463b      	mov	r3, r7
   e185a:	4632      	mov	r2, r6
   e185c:	f000 f8b6 	bl	e19cc <__adddf3>
   e1860:	e9cd 0100 	strd	r0, r1, [sp]
   e1864:	463b      	mov	r3, r7
   e1866:	4632      	mov	r2, r6
   e1868:	e9dd 0100 	ldrd	r0, r1, [sp]
   e186c:	f000 f8ac 	bl	e19c8 <__aeabi_dsub>
   e1870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e1874:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e1878:	ec41 0b10 	vmov	d0, r0, r1
   e187c:	e7be      	b.n	e17fc <rint+0x8c>
   e187e:	ee10 0a10 	vmov	r0, s0
   e1882:	4619      	mov	r1, r3
   e1884:	f000 f8a2 	bl	e19cc <__adddf3>
   e1888:	ec41 0b10 	vmov	d0, r0, r1
   e188c:	e7b6      	b.n	e17fc <rint+0x8c>
   e188e:	bf00      	nop
   e1890:	000fffff 	.word	0x000fffff
   e1894:	000e7070 	.word	0x000e7070

000e1898 <scalbn>:
   e1898:	ec53 2b10 	vmov	r2, r3, d0
   e189c:	b570      	push	{r4, r5, r6, lr}
   e189e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e18a2:	4619      	mov	r1, r3
   e18a4:	4605      	mov	r5, r0
   e18a6:	bb14      	cbnz	r4, e18ee <scalbn+0x56>
   e18a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e18ac:	4311      	orrs	r1, r2
   e18ae:	d02a      	beq.n	e1906 <scalbn+0x6e>
   e18b0:	4619      	mov	r1, r3
   e18b2:	2200      	movs	r2, #0
   e18b4:	4b38      	ldr	r3, [pc, #224]	; (e1998 <scalbn+0x100>)
   e18b6:	4e39      	ldr	r6, [pc, #228]	; (e199c <scalbn+0x104>)
   e18b8:	ee10 0a10 	vmov	r0, s0
   e18bc:	f000 fa38 	bl	e1d30 <__aeabi_dmul>
   e18c0:	42b5      	cmp	r5, r6
   e18c2:	4602      	mov	r2, r0
   e18c4:	460b      	mov	r3, r1
   e18c6:	db1f      	blt.n	e1908 <scalbn+0x70>
   e18c8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e18cc:	3c36      	subs	r4, #54	; 0x36
   e18ce:	442c      	add	r4, r5
   e18d0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e18d4:	4284      	cmp	r4, r0
   e18d6:	dc1f      	bgt.n	e1918 <scalbn+0x80>
   e18d8:	2c00      	cmp	r4, #0
   e18da:	dd2d      	ble.n	e1938 <scalbn+0xa0>
   e18dc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e18e0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e18e4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e18e8:	ec43 2b10 	vmov	d0, r2, r3
   e18ec:	bd70      	pop	{r4, r5, r6, pc}
   e18ee:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e18f2:	4284      	cmp	r4, r0
   e18f4:	d1eb      	bne.n	e18ce <scalbn+0x36>
   e18f6:	ee10 0a10 	vmov	r0, s0
   e18fa:	4619      	mov	r1, r3
   e18fc:	f000 f866 	bl	e19cc <__adddf3>
   e1900:	ec41 0b10 	vmov	d0, r0, r1
   e1904:	bd70      	pop	{r4, r5, r6, pc}
   e1906:	bd70      	pop	{r4, r5, r6, pc}
   e1908:	a31f      	add	r3, pc, #124	; (adr r3, e1988 <scalbn+0xf0>)
   e190a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e190e:	f000 fa0f 	bl	e1d30 <__aeabi_dmul>
   e1912:	ec41 0b10 	vmov	d0, r0, r1
   e1916:	bd70      	pop	{r4, r5, r6, pc}
   e1918:	ec43 2b11 	vmov	d1, r2, r3
   e191c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e1990 <scalbn+0xf8>
   e1920:	f000 f840 	bl	e19a4 <copysign>
   e1924:	a31a      	add	r3, pc, #104	; (adr r3, e1990 <scalbn+0xf8>)
   e1926:	e9d3 2300 	ldrd	r2, r3, [r3]
   e192a:	ec51 0b10 	vmov	r0, r1, d0
   e192e:	f000 f9ff 	bl	e1d30 <__aeabi_dmul>
   e1932:	ec41 0b10 	vmov	d0, r0, r1
   e1936:	bd70      	pop	{r4, r5, r6, pc}
   e1938:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e193c:	da13      	bge.n	e1966 <scalbn+0xce>
   e193e:	f24c 3150 	movw	r1, #50000	; 0xc350
   e1942:	428d      	cmp	r5, r1
   e1944:	ec43 2b11 	vmov	d1, r2, r3
   e1948:	dce8      	bgt.n	e191c <scalbn+0x84>
   e194a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e1988 <scalbn+0xf0>
   e194e:	f000 f829 	bl	e19a4 <copysign>
   e1952:	a30d      	add	r3, pc, #52	; (adr r3, e1988 <scalbn+0xf0>)
   e1954:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1958:	ec51 0b10 	vmov	r0, r1, d0
   e195c:	f000 f9e8 	bl	e1d30 <__aeabi_dmul>
   e1960:	ec41 0b10 	vmov	d0, r0, r1
   e1964:	bd70      	pop	{r4, r5, r6, pc}
   e1966:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e196a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e196e:	3436      	adds	r4, #54	; 0x36
   e1970:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e1974:	4610      	mov	r0, r2
   e1976:	4619      	mov	r1, r3
   e1978:	2200      	movs	r2, #0
   e197a:	4b09      	ldr	r3, [pc, #36]	; (e19a0 <scalbn+0x108>)
   e197c:	f000 f9d8 	bl	e1d30 <__aeabi_dmul>
   e1980:	ec41 0b10 	vmov	d0, r0, r1
   e1984:	bd70      	pop	{r4, r5, r6, pc}
   e1986:	bf00      	nop
   e1988:	c2f8f359 	.word	0xc2f8f359
   e198c:	01a56e1f 	.word	0x01a56e1f
   e1990:	8800759c 	.word	0x8800759c
   e1994:	7e37e43c 	.word	0x7e37e43c
   e1998:	43500000 	.word	0x43500000
   e199c:	ffff3cb0 	.word	0xffff3cb0
   e19a0:	3c900000 	.word	0x3c900000

000e19a4 <copysign>:
   e19a4:	ec53 2b10 	vmov	r2, r3, d0
   e19a8:	ee11 0a90 	vmov	r0, s3
   e19ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e19b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e19b4:	ea41 0300 	orr.w	r3, r1, r0
   e19b8:	ec43 2b10 	vmov	d0, r2, r3
   e19bc:	4770      	bx	lr
   e19be:	bf00      	nop

000e19c0 <__aeabi_drsub>:
   e19c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e19c4:	e002      	b.n	e19cc <__adddf3>
   e19c6:	bf00      	nop

000e19c8 <__aeabi_dsub>:
   e19c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e19cc <__adddf3>:
   e19cc:	b530      	push	{r4, r5, lr}
   e19ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e19d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e19d6:	ea94 0f05 	teq	r4, r5
   e19da:	bf08      	it	eq
   e19dc:	ea90 0f02 	teqeq	r0, r2
   e19e0:	bf1f      	itttt	ne
   e19e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   e19e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   e19ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e19ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e19f2:	f000 80e2 	beq.w	e1bba <__adddf3+0x1ee>
   e19f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e19fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e19fe:	bfb8      	it	lt
   e1a00:	426d      	neglt	r5, r5
   e1a02:	dd0c      	ble.n	e1a1e <__adddf3+0x52>
   e1a04:	442c      	add	r4, r5
   e1a06:	ea80 0202 	eor.w	r2, r0, r2
   e1a0a:	ea81 0303 	eor.w	r3, r1, r3
   e1a0e:	ea82 0000 	eor.w	r0, r2, r0
   e1a12:	ea83 0101 	eor.w	r1, r3, r1
   e1a16:	ea80 0202 	eor.w	r2, r0, r2
   e1a1a:	ea81 0303 	eor.w	r3, r1, r3
   e1a1e:	2d36      	cmp	r5, #54	; 0x36
   e1a20:	bf88      	it	hi
   e1a22:	bd30      	pophi	{r4, r5, pc}
   e1a24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e1a28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1a2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e1a30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e1a34:	d002      	beq.n	e1a3c <__adddf3+0x70>
   e1a36:	4240      	negs	r0, r0
   e1a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e1a3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e1a40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1a44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e1a48:	d002      	beq.n	e1a50 <__adddf3+0x84>
   e1a4a:	4252      	negs	r2, r2
   e1a4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e1a50:	ea94 0f05 	teq	r4, r5
   e1a54:	f000 80a7 	beq.w	e1ba6 <__adddf3+0x1da>
   e1a58:	f1a4 0401 	sub.w	r4, r4, #1
   e1a5c:	f1d5 0e20 	rsbs	lr, r5, #32
   e1a60:	db0d      	blt.n	e1a7e <__adddf3+0xb2>
   e1a62:	fa02 fc0e 	lsl.w	ip, r2, lr
   e1a66:	fa22 f205 	lsr.w	r2, r2, r5
   e1a6a:	1880      	adds	r0, r0, r2
   e1a6c:	f141 0100 	adc.w	r1, r1, #0
   e1a70:	fa03 f20e 	lsl.w	r2, r3, lr
   e1a74:	1880      	adds	r0, r0, r2
   e1a76:	fa43 f305 	asr.w	r3, r3, r5
   e1a7a:	4159      	adcs	r1, r3
   e1a7c:	e00e      	b.n	e1a9c <__adddf3+0xd0>
   e1a7e:	f1a5 0520 	sub.w	r5, r5, #32
   e1a82:	f10e 0e20 	add.w	lr, lr, #32
   e1a86:	2a01      	cmp	r2, #1
   e1a88:	fa03 fc0e 	lsl.w	ip, r3, lr
   e1a8c:	bf28      	it	cs
   e1a8e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e1a92:	fa43 f305 	asr.w	r3, r3, r5
   e1a96:	18c0      	adds	r0, r0, r3
   e1a98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e1a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1aa0:	d507      	bpl.n	e1ab2 <__adddf3+0xe6>
   e1aa2:	f04f 0e00 	mov.w	lr, #0
   e1aa6:	f1dc 0c00 	rsbs	ip, ip, #0
   e1aaa:	eb7e 0000 	sbcs.w	r0, lr, r0
   e1aae:	eb6e 0101 	sbc.w	r1, lr, r1
   e1ab2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e1ab6:	d31b      	bcc.n	e1af0 <__adddf3+0x124>
   e1ab8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e1abc:	d30c      	bcc.n	e1ad8 <__adddf3+0x10c>
   e1abe:	0849      	lsrs	r1, r1, #1
   e1ac0:	ea5f 0030 	movs.w	r0, r0, rrx
   e1ac4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e1ac8:	f104 0401 	add.w	r4, r4, #1
   e1acc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e1ad0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e1ad4:	f080 809a 	bcs.w	e1c0c <__adddf3+0x240>
   e1ad8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e1adc:	bf08      	it	eq
   e1ade:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1ae2:	f150 0000 	adcs.w	r0, r0, #0
   e1ae6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1aea:	ea41 0105 	orr.w	r1, r1, r5
   e1aee:	bd30      	pop	{r4, r5, pc}
   e1af0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e1af4:	4140      	adcs	r0, r0
   e1af6:	eb41 0101 	adc.w	r1, r1, r1
   e1afa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1afe:	f1a4 0401 	sub.w	r4, r4, #1
   e1b02:	d1e9      	bne.n	e1ad8 <__adddf3+0x10c>
   e1b04:	f091 0f00 	teq	r1, #0
   e1b08:	bf04      	itt	eq
   e1b0a:	4601      	moveq	r1, r0
   e1b0c:	2000      	moveq	r0, #0
   e1b0e:	fab1 f381 	clz	r3, r1
   e1b12:	bf08      	it	eq
   e1b14:	3320      	addeq	r3, #32
   e1b16:	f1a3 030b 	sub.w	r3, r3, #11
   e1b1a:	f1b3 0220 	subs.w	r2, r3, #32
   e1b1e:	da0c      	bge.n	e1b3a <__adddf3+0x16e>
   e1b20:	320c      	adds	r2, #12
   e1b22:	dd08      	ble.n	e1b36 <__adddf3+0x16a>
   e1b24:	f102 0c14 	add.w	ip, r2, #20
   e1b28:	f1c2 020c 	rsb	r2, r2, #12
   e1b2c:	fa01 f00c 	lsl.w	r0, r1, ip
   e1b30:	fa21 f102 	lsr.w	r1, r1, r2
   e1b34:	e00c      	b.n	e1b50 <__adddf3+0x184>
   e1b36:	f102 0214 	add.w	r2, r2, #20
   e1b3a:	bfd8      	it	le
   e1b3c:	f1c2 0c20 	rsble	ip, r2, #32
   e1b40:	fa01 f102 	lsl.w	r1, r1, r2
   e1b44:	fa20 fc0c 	lsr.w	ip, r0, ip
   e1b48:	bfdc      	itt	le
   e1b4a:	ea41 010c 	orrle.w	r1, r1, ip
   e1b4e:	4090      	lslle	r0, r2
   e1b50:	1ae4      	subs	r4, r4, r3
   e1b52:	bfa2      	ittt	ge
   e1b54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e1b58:	4329      	orrge	r1, r5
   e1b5a:	bd30      	popge	{r4, r5, pc}
   e1b5c:	ea6f 0404 	mvn.w	r4, r4
   e1b60:	3c1f      	subs	r4, #31
   e1b62:	da1c      	bge.n	e1b9e <__adddf3+0x1d2>
   e1b64:	340c      	adds	r4, #12
   e1b66:	dc0e      	bgt.n	e1b86 <__adddf3+0x1ba>
   e1b68:	f104 0414 	add.w	r4, r4, #20
   e1b6c:	f1c4 0220 	rsb	r2, r4, #32
   e1b70:	fa20 f004 	lsr.w	r0, r0, r4
   e1b74:	fa01 f302 	lsl.w	r3, r1, r2
   e1b78:	ea40 0003 	orr.w	r0, r0, r3
   e1b7c:	fa21 f304 	lsr.w	r3, r1, r4
   e1b80:	ea45 0103 	orr.w	r1, r5, r3
   e1b84:	bd30      	pop	{r4, r5, pc}
   e1b86:	f1c4 040c 	rsb	r4, r4, #12
   e1b8a:	f1c4 0220 	rsb	r2, r4, #32
   e1b8e:	fa20 f002 	lsr.w	r0, r0, r2
   e1b92:	fa01 f304 	lsl.w	r3, r1, r4
   e1b96:	ea40 0003 	orr.w	r0, r0, r3
   e1b9a:	4629      	mov	r1, r5
   e1b9c:	bd30      	pop	{r4, r5, pc}
   e1b9e:	fa21 f004 	lsr.w	r0, r1, r4
   e1ba2:	4629      	mov	r1, r5
   e1ba4:	bd30      	pop	{r4, r5, pc}
   e1ba6:	f094 0f00 	teq	r4, #0
   e1baa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e1bae:	bf06      	itte	eq
   e1bb0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e1bb4:	3401      	addeq	r4, #1
   e1bb6:	3d01      	subne	r5, #1
   e1bb8:	e74e      	b.n	e1a58 <__adddf3+0x8c>
   e1bba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1bbe:	bf18      	it	ne
   e1bc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e1bc4:	d029      	beq.n	e1c1a <__adddf3+0x24e>
   e1bc6:	ea94 0f05 	teq	r4, r5
   e1bca:	bf08      	it	eq
   e1bcc:	ea90 0f02 	teqeq	r0, r2
   e1bd0:	d005      	beq.n	e1bde <__adddf3+0x212>
   e1bd2:	ea54 0c00 	orrs.w	ip, r4, r0
   e1bd6:	bf04      	itt	eq
   e1bd8:	4619      	moveq	r1, r3
   e1bda:	4610      	moveq	r0, r2
   e1bdc:	bd30      	pop	{r4, r5, pc}
   e1bde:	ea91 0f03 	teq	r1, r3
   e1be2:	bf1e      	ittt	ne
   e1be4:	2100      	movne	r1, #0
   e1be6:	2000      	movne	r0, #0
   e1be8:	bd30      	popne	{r4, r5, pc}
   e1bea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e1bee:	d105      	bne.n	e1bfc <__adddf3+0x230>
   e1bf0:	0040      	lsls	r0, r0, #1
   e1bf2:	4149      	adcs	r1, r1
   e1bf4:	bf28      	it	cs
   e1bf6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e1bfa:	bd30      	pop	{r4, r5, pc}
   e1bfc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e1c00:	bf3c      	itt	cc
   e1c02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e1c06:	bd30      	popcc	{r4, r5, pc}
   e1c08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1c0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e1c10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1c14:	f04f 0000 	mov.w	r0, #0
   e1c18:	bd30      	pop	{r4, r5, pc}
   e1c1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1c1e:	bf1a      	itte	ne
   e1c20:	4619      	movne	r1, r3
   e1c22:	4610      	movne	r0, r2
   e1c24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e1c28:	bf1c      	itt	ne
   e1c2a:	460b      	movne	r3, r1
   e1c2c:	4602      	movne	r2, r0
   e1c2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1c32:	bf06      	itte	eq
   e1c34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e1c38:	ea91 0f03 	teqeq	r1, r3
   e1c3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e1c40:	bd30      	pop	{r4, r5, pc}
   e1c42:	bf00      	nop

000e1c44 <__aeabi_ui2d>:
   e1c44:	f090 0f00 	teq	r0, #0
   e1c48:	bf04      	itt	eq
   e1c4a:	2100      	moveq	r1, #0
   e1c4c:	4770      	bxeq	lr
   e1c4e:	b530      	push	{r4, r5, lr}
   e1c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1c54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e1c58:	f04f 0500 	mov.w	r5, #0
   e1c5c:	f04f 0100 	mov.w	r1, #0
   e1c60:	e750      	b.n	e1b04 <__adddf3+0x138>
   e1c62:	bf00      	nop

000e1c64 <__aeabi_i2d>:
   e1c64:	f090 0f00 	teq	r0, #0
   e1c68:	bf04      	itt	eq
   e1c6a:	2100      	moveq	r1, #0
   e1c6c:	4770      	bxeq	lr
   e1c6e:	b530      	push	{r4, r5, lr}
   e1c70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1c74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e1c78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e1c7c:	bf48      	it	mi
   e1c7e:	4240      	negmi	r0, r0
   e1c80:	f04f 0100 	mov.w	r1, #0
   e1c84:	e73e      	b.n	e1b04 <__adddf3+0x138>
   e1c86:	bf00      	nop

000e1c88 <__aeabi_f2d>:
   e1c88:	0042      	lsls	r2, r0, #1
   e1c8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e1c8e:	ea4f 0131 	mov.w	r1, r1, rrx
   e1c92:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e1c96:	bf1f      	itttt	ne
   e1c98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e1c9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1ca0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e1ca4:	4770      	bxne	lr
   e1ca6:	f092 0f00 	teq	r2, #0
   e1caa:	bf14      	ite	ne
   e1cac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1cb0:	4770      	bxeq	lr
   e1cb2:	b530      	push	{r4, r5, lr}
   e1cb4:	f44f 7460 	mov.w	r4, #896	; 0x380
   e1cb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1cbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1cc0:	e720      	b.n	e1b04 <__adddf3+0x138>
   e1cc2:	bf00      	nop

000e1cc4 <__aeabi_ul2d>:
   e1cc4:	ea50 0201 	orrs.w	r2, r0, r1
   e1cc8:	bf08      	it	eq
   e1cca:	4770      	bxeq	lr
   e1ccc:	b530      	push	{r4, r5, lr}
   e1cce:	f04f 0500 	mov.w	r5, #0
   e1cd2:	e00a      	b.n	e1cea <__aeabi_l2d+0x16>

000e1cd4 <__aeabi_l2d>:
   e1cd4:	ea50 0201 	orrs.w	r2, r0, r1
   e1cd8:	bf08      	it	eq
   e1cda:	4770      	bxeq	lr
   e1cdc:	b530      	push	{r4, r5, lr}
   e1cde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e1ce2:	d502      	bpl.n	e1cea <__aeabi_l2d+0x16>
   e1ce4:	4240      	negs	r0, r0
   e1ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e1cea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1cee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e1cf2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e1cf6:	f43f aedc 	beq.w	e1ab2 <__adddf3+0xe6>
   e1cfa:	f04f 0203 	mov.w	r2, #3
   e1cfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1d02:	bf18      	it	ne
   e1d04:	3203      	addne	r2, #3
   e1d06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1d0a:	bf18      	it	ne
   e1d0c:	3203      	addne	r2, #3
   e1d0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e1d12:	f1c2 0320 	rsb	r3, r2, #32
   e1d16:	fa00 fc03 	lsl.w	ip, r0, r3
   e1d1a:	fa20 f002 	lsr.w	r0, r0, r2
   e1d1e:	fa01 fe03 	lsl.w	lr, r1, r3
   e1d22:	ea40 000e 	orr.w	r0, r0, lr
   e1d26:	fa21 f102 	lsr.w	r1, r1, r2
   e1d2a:	4414      	add	r4, r2
   e1d2c:	e6c1      	b.n	e1ab2 <__adddf3+0xe6>
   e1d2e:	bf00      	nop

000e1d30 <__aeabi_dmul>:
   e1d30:	b570      	push	{r4, r5, r6, lr}
   e1d32:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1d36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1d3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1d3e:	bf1d      	ittte	ne
   e1d40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1d44:	ea94 0f0c 	teqne	r4, ip
   e1d48:	ea95 0f0c 	teqne	r5, ip
   e1d4c:	f000 f8de 	bleq	e1f0c <__aeabi_dmul+0x1dc>
   e1d50:	442c      	add	r4, r5
   e1d52:	ea81 0603 	eor.w	r6, r1, r3
   e1d56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e1d5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e1d5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e1d62:	bf18      	it	ne
   e1d64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e1d68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1d70:	d038      	beq.n	e1de4 <__aeabi_dmul+0xb4>
   e1d72:	fba0 ce02 	umull	ip, lr, r0, r2
   e1d76:	f04f 0500 	mov.w	r5, #0
   e1d7a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e1d7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e1d82:	fbe0 e503 	umlal	lr, r5, r0, r3
   e1d86:	f04f 0600 	mov.w	r6, #0
   e1d8a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e1d8e:	f09c 0f00 	teq	ip, #0
   e1d92:	bf18      	it	ne
   e1d94:	f04e 0e01 	orrne.w	lr, lr, #1
   e1d98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e1d9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e1da0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e1da4:	d204      	bcs.n	e1db0 <__aeabi_dmul+0x80>
   e1da6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e1daa:	416d      	adcs	r5, r5
   e1dac:	eb46 0606 	adc.w	r6, r6, r6
   e1db0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e1db4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e1db8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e1dbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e1dc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e1dc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1dc8:	bf88      	it	hi
   e1dca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1dce:	d81e      	bhi.n	e1e0e <__aeabi_dmul+0xde>
   e1dd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e1dd4:	bf08      	it	eq
   e1dd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e1dda:	f150 0000 	adcs.w	r0, r0, #0
   e1dde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1de2:	bd70      	pop	{r4, r5, r6, pc}
   e1de4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e1de8:	ea46 0101 	orr.w	r1, r6, r1
   e1dec:	ea40 0002 	orr.w	r0, r0, r2
   e1df0:	ea81 0103 	eor.w	r1, r1, r3
   e1df4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e1df8:	bfc2      	ittt	gt
   e1dfa:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1dfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1e02:	bd70      	popgt	{r4, r5, r6, pc}
   e1e04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1e08:	f04f 0e00 	mov.w	lr, #0
   e1e0c:	3c01      	subs	r4, #1
   e1e0e:	f300 80ab 	bgt.w	e1f68 <__aeabi_dmul+0x238>
   e1e12:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e1e16:	bfde      	ittt	le
   e1e18:	2000      	movle	r0, #0
   e1e1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e1e1e:	bd70      	pople	{r4, r5, r6, pc}
   e1e20:	f1c4 0400 	rsb	r4, r4, #0
   e1e24:	3c20      	subs	r4, #32
   e1e26:	da35      	bge.n	e1e94 <__aeabi_dmul+0x164>
   e1e28:	340c      	adds	r4, #12
   e1e2a:	dc1b      	bgt.n	e1e64 <__aeabi_dmul+0x134>
   e1e2c:	f104 0414 	add.w	r4, r4, #20
   e1e30:	f1c4 0520 	rsb	r5, r4, #32
   e1e34:	fa00 f305 	lsl.w	r3, r0, r5
   e1e38:	fa20 f004 	lsr.w	r0, r0, r4
   e1e3c:	fa01 f205 	lsl.w	r2, r1, r5
   e1e40:	ea40 0002 	orr.w	r0, r0, r2
   e1e44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e1e48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1e4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1e50:	fa21 f604 	lsr.w	r6, r1, r4
   e1e54:	eb42 0106 	adc.w	r1, r2, r6
   e1e58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1e5c:	bf08      	it	eq
   e1e5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1e62:	bd70      	pop	{r4, r5, r6, pc}
   e1e64:	f1c4 040c 	rsb	r4, r4, #12
   e1e68:	f1c4 0520 	rsb	r5, r4, #32
   e1e6c:	fa00 f304 	lsl.w	r3, r0, r4
   e1e70:	fa20 f005 	lsr.w	r0, r0, r5
   e1e74:	fa01 f204 	lsl.w	r2, r1, r4
   e1e78:	ea40 0002 	orr.w	r0, r0, r2
   e1e7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1e80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1e84:	f141 0100 	adc.w	r1, r1, #0
   e1e88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1e8c:	bf08      	it	eq
   e1e8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1e92:	bd70      	pop	{r4, r5, r6, pc}
   e1e94:	f1c4 0520 	rsb	r5, r4, #32
   e1e98:	fa00 f205 	lsl.w	r2, r0, r5
   e1e9c:	ea4e 0e02 	orr.w	lr, lr, r2
   e1ea0:	fa20 f304 	lsr.w	r3, r0, r4
   e1ea4:	fa01 f205 	lsl.w	r2, r1, r5
   e1ea8:	ea43 0302 	orr.w	r3, r3, r2
   e1eac:	fa21 f004 	lsr.w	r0, r1, r4
   e1eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1eb4:	fa21 f204 	lsr.w	r2, r1, r4
   e1eb8:	ea20 0002 	bic.w	r0, r0, r2
   e1ebc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e1ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1ec4:	bf08      	it	eq
   e1ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1eca:	bd70      	pop	{r4, r5, r6, pc}
   e1ecc:	f094 0f00 	teq	r4, #0
   e1ed0:	d10f      	bne.n	e1ef2 <__aeabi_dmul+0x1c2>
   e1ed2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e1ed6:	0040      	lsls	r0, r0, #1
   e1ed8:	eb41 0101 	adc.w	r1, r1, r1
   e1edc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1ee0:	bf08      	it	eq
   e1ee2:	3c01      	subeq	r4, #1
   e1ee4:	d0f7      	beq.n	e1ed6 <__aeabi_dmul+0x1a6>
   e1ee6:	ea41 0106 	orr.w	r1, r1, r6
   e1eea:	f095 0f00 	teq	r5, #0
   e1eee:	bf18      	it	ne
   e1ef0:	4770      	bxne	lr
   e1ef2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e1ef6:	0052      	lsls	r2, r2, #1
   e1ef8:	eb43 0303 	adc.w	r3, r3, r3
   e1efc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1f00:	bf08      	it	eq
   e1f02:	3d01      	subeq	r5, #1
   e1f04:	d0f7      	beq.n	e1ef6 <__aeabi_dmul+0x1c6>
   e1f06:	ea43 0306 	orr.w	r3, r3, r6
   e1f0a:	4770      	bx	lr
   e1f0c:	ea94 0f0c 	teq	r4, ip
   e1f10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1f14:	bf18      	it	ne
   e1f16:	ea95 0f0c 	teqne	r5, ip
   e1f1a:	d00c      	beq.n	e1f36 <__aeabi_dmul+0x206>
   e1f1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1f20:	bf18      	it	ne
   e1f22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1f26:	d1d1      	bne.n	e1ecc <__aeabi_dmul+0x19c>
   e1f28:	ea81 0103 	eor.w	r1, r1, r3
   e1f2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1f30:	f04f 0000 	mov.w	r0, #0
   e1f34:	bd70      	pop	{r4, r5, r6, pc}
   e1f36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1f3a:	bf06      	itte	eq
   e1f3c:	4610      	moveq	r0, r2
   e1f3e:	4619      	moveq	r1, r3
   e1f40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1f44:	d019      	beq.n	e1f7a <__aeabi_dmul+0x24a>
   e1f46:	ea94 0f0c 	teq	r4, ip
   e1f4a:	d102      	bne.n	e1f52 <__aeabi_dmul+0x222>
   e1f4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1f50:	d113      	bne.n	e1f7a <__aeabi_dmul+0x24a>
   e1f52:	ea95 0f0c 	teq	r5, ip
   e1f56:	d105      	bne.n	e1f64 <__aeabi_dmul+0x234>
   e1f58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e1f5c:	bf1c      	itt	ne
   e1f5e:	4610      	movne	r0, r2
   e1f60:	4619      	movne	r1, r3
   e1f62:	d10a      	bne.n	e1f7a <__aeabi_dmul+0x24a>
   e1f64:	ea81 0103 	eor.w	r1, r1, r3
   e1f68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1f6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1f70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1f74:	f04f 0000 	mov.w	r0, #0
   e1f78:	bd70      	pop	{r4, r5, r6, pc}
   e1f7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1f7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e1f82:	bd70      	pop	{r4, r5, r6, pc}

000e1f84 <__aeabi_ddiv>:
   e1f84:	b570      	push	{r4, r5, r6, lr}
   e1f86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1f8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1f8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1f92:	bf1d      	ittte	ne
   e1f94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1f98:	ea94 0f0c 	teqne	r4, ip
   e1f9c:	ea95 0f0c 	teqne	r5, ip
   e1fa0:	f000 f8a7 	bleq	e20f2 <__aeabi_ddiv+0x16e>
   e1fa4:	eba4 0405 	sub.w	r4, r4, r5
   e1fa8:	ea81 0e03 	eor.w	lr, r1, r3
   e1fac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1fb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1fb4:	f000 8088 	beq.w	e20c8 <__aeabi_ddiv+0x144>
   e1fb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1fbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e1fc0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e1fc4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e1fc8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e1fcc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1fd0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1fd4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e1fd8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e1fdc:	429d      	cmp	r5, r3
   e1fde:	bf08      	it	eq
   e1fe0:	4296      	cmpeq	r6, r2
   e1fe2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e1fe6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e1fea:	d202      	bcs.n	e1ff2 <__aeabi_ddiv+0x6e>
   e1fec:	085b      	lsrs	r3, r3, #1
   e1fee:	ea4f 0232 	mov.w	r2, r2, rrx
   e1ff2:	1ab6      	subs	r6, r6, r2
   e1ff4:	eb65 0503 	sbc.w	r5, r5, r3
   e1ff8:	085b      	lsrs	r3, r3, #1
   e1ffa:	ea4f 0232 	mov.w	r2, r2, rrx
   e1ffe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e2002:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e2006:	ebb6 0e02 	subs.w	lr, r6, r2
   e200a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e200e:	bf22      	ittt	cs
   e2010:	1ab6      	subcs	r6, r6, r2
   e2012:	4675      	movcs	r5, lr
   e2014:	ea40 000c 	orrcs.w	r0, r0, ip
   e2018:	085b      	lsrs	r3, r3, #1
   e201a:	ea4f 0232 	mov.w	r2, r2, rrx
   e201e:	ebb6 0e02 	subs.w	lr, r6, r2
   e2022:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2026:	bf22      	ittt	cs
   e2028:	1ab6      	subcs	r6, r6, r2
   e202a:	4675      	movcs	r5, lr
   e202c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e2030:	085b      	lsrs	r3, r3, #1
   e2032:	ea4f 0232 	mov.w	r2, r2, rrx
   e2036:	ebb6 0e02 	subs.w	lr, r6, r2
   e203a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e203e:	bf22      	ittt	cs
   e2040:	1ab6      	subcs	r6, r6, r2
   e2042:	4675      	movcs	r5, lr
   e2044:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e2048:	085b      	lsrs	r3, r3, #1
   e204a:	ea4f 0232 	mov.w	r2, r2, rrx
   e204e:	ebb6 0e02 	subs.w	lr, r6, r2
   e2052:	eb75 0e03 	sbcs.w	lr, r5, r3
   e2056:	bf22      	ittt	cs
   e2058:	1ab6      	subcs	r6, r6, r2
   e205a:	4675      	movcs	r5, lr
   e205c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e2060:	ea55 0e06 	orrs.w	lr, r5, r6
   e2064:	d018      	beq.n	e2098 <__aeabi_ddiv+0x114>
   e2066:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e206a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e206e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e2072:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e2076:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e207a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e207e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e2082:	d1c0      	bne.n	e2006 <__aeabi_ddiv+0x82>
   e2084:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e2088:	d10b      	bne.n	e20a2 <__aeabi_ddiv+0x11e>
   e208a:	ea41 0100 	orr.w	r1, r1, r0
   e208e:	f04f 0000 	mov.w	r0, #0
   e2092:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e2096:	e7b6      	b.n	e2006 <__aeabi_ddiv+0x82>
   e2098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e209c:	bf04      	itt	eq
   e209e:	4301      	orreq	r1, r0
   e20a0:	2000      	moveq	r0, #0
   e20a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e20a6:	bf88      	it	hi
   e20a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e20ac:	f63f aeaf 	bhi.w	e1e0e <__aeabi_dmul+0xde>
   e20b0:	ebb5 0c03 	subs.w	ip, r5, r3
   e20b4:	bf04      	itt	eq
   e20b6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e20ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e20be:	f150 0000 	adcs.w	r0, r0, #0
   e20c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e20c6:	bd70      	pop	{r4, r5, r6, pc}
   e20c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e20cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e20d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e20d4:	bfc2      	ittt	gt
   e20d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   e20da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e20de:	bd70      	popgt	{r4, r5, r6, pc}
   e20e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e20e4:	f04f 0e00 	mov.w	lr, #0
   e20e8:	3c01      	subs	r4, #1
   e20ea:	e690      	b.n	e1e0e <__aeabi_dmul+0xde>
   e20ec:	ea45 0e06 	orr.w	lr, r5, r6
   e20f0:	e68d      	b.n	e1e0e <__aeabi_dmul+0xde>
   e20f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e20f6:	ea94 0f0c 	teq	r4, ip
   e20fa:	bf08      	it	eq
   e20fc:	ea95 0f0c 	teqeq	r5, ip
   e2100:	f43f af3b 	beq.w	e1f7a <__aeabi_dmul+0x24a>
   e2104:	ea94 0f0c 	teq	r4, ip
   e2108:	d10a      	bne.n	e2120 <__aeabi_ddiv+0x19c>
   e210a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e210e:	f47f af34 	bne.w	e1f7a <__aeabi_dmul+0x24a>
   e2112:	ea95 0f0c 	teq	r5, ip
   e2116:	f47f af25 	bne.w	e1f64 <__aeabi_dmul+0x234>
   e211a:	4610      	mov	r0, r2
   e211c:	4619      	mov	r1, r3
   e211e:	e72c      	b.n	e1f7a <__aeabi_dmul+0x24a>
   e2120:	ea95 0f0c 	teq	r5, ip
   e2124:	d106      	bne.n	e2134 <__aeabi_ddiv+0x1b0>
   e2126:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e212a:	f43f aefd 	beq.w	e1f28 <__aeabi_dmul+0x1f8>
   e212e:	4610      	mov	r0, r2
   e2130:	4619      	mov	r1, r3
   e2132:	e722      	b.n	e1f7a <__aeabi_dmul+0x24a>
   e2134:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e2138:	bf18      	it	ne
   e213a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e213e:	f47f aec5 	bne.w	e1ecc <__aeabi_dmul+0x19c>
   e2142:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e2146:	f47f af0d 	bne.w	e1f64 <__aeabi_dmul+0x234>
   e214a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e214e:	f47f aeeb 	bne.w	e1f28 <__aeabi_dmul+0x1f8>
   e2152:	e712      	b.n	e1f7a <__aeabi_dmul+0x24a>

000e2154 <__gedf2>:
   e2154:	f04f 3cff 	mov.w	ip, #4294967295
   e2158:	e006      	b.n	e2168 <__cmpdf2+0x4>
   e215a:	bf00      	nop

000e215c <__ledf2>:
   e215c:	f04f 0c01 	mov.w	ip, #1
   e2160:	e002      	b.n	e2168 <__cmpdf2+0x4>
   e2162:	bf00      	nop

000e2164 <__cmpdf2>:
   e2164:	f04f 0c01 	mov.w	ip, #1
   e2168:	f84d cd04 	str.w	ip, [sp, #-4]!
   e216c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e2170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e2174:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e2178:	bf18      	it	ne
   e217a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e217e:	d01b      	beq.n	e21b8 <__cmpdf2+0x54>
   e2180:	b001      	add	sp, #4
   e2182:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e2186:	bf0c      	ite	eq
   e2188:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e218c:	ea91 0f03 	teqne	r1, r3
   e2190:	bf02      	ittt	eq
   e2192:	ea90 0f02 	teqeq	r0, r2
   e2196:	2000      	moveq	r0, #0
   e2198:	4770      	bxeq	lr
   e219a:	f110 0f00 	cmn.w	r0, #0
   e219e:	ea91 0f03 	teq	r1, r3
   e21a2:	bf58      	it	pl
   e21a4:	4299      	cmppl	r1, r3
   e21a6:	bf08      	it	eq
   e21a8:	4290      	cmpeq	r0, r2
   e21aa:	bf2c      	ite	cs
   e21ac:	17d8      	asrcs	r0, r3, #31
   e21ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e21b2:	f040 0001 	orr.w	r0, r0, #1
   e21b6:	4770      	bx	lr
   e21b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e21bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e21c0:	d102      	bne.n	e21c8 <__cmpdf2+0x64>
   e21c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e21c6:	d107      	bne.n	e21d8 <__cmpdf2+0x74>
   e21c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e21cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e21d0:	d1d6      	bne.n	e2180 <__cmpdf2+0x1c>
   e21d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e21d6:	d0d3      	beq.n	e2180 <__cmpdf2+0x1c>
   e21d8:	f85d 0b04 	ldr.w	r0, [sp], #4
   e21dc:	4770      	bx	lr
   e21de:	bf00      	nop

000e21e0 <__aeabi_cdrcmple>:
   e21e0:	4684      	mov	ip, r0
   e21e2:	4610      	mov	r0, r2
   e21e4:	4662      	mov	r2, ip
   e21e6:	468c      	mov	ip, r1
   e21e8:	4619      	mov	r1, r3
   e21ea:	4663      	mov	r3, ip
   e21ec:	e000      	b.n	e21f0 <__aeabi_cdcmpeq>
   e21ee:	bf00      	nop

000e21f0 <__aeabi_cdcmpeq>:
   e21f0:	b501      	push	{r0, lr}
   e21f2:	f7ff ffb7 	bl	e2164 <__cmpdf2>
   e21f6:	2800      	cmp	r0, #0
   e21f8:	bf48      	it	mi
   e21fa:	f110 0f00 	cmnmi.w	r0, #0
   e21fe:	bd01      	pop	{r0, pc}

000e2200 <__aeabi_dcmpeq>:
   e2200:	f84d ed08 	str.w	lr, [sp, #-8]!
   e2204:	f7ff fff4 	bl	e21f0 <__aeabi_cdcmpeq>
   e2208:	bf0c      	ite	eq
   e220a:	2001      	moveq	r0, #1
   e220c:	2000      	movne	r0, #0
   e220e:	f85d fb08 	ldr.w	pc, [sp], #8
   e2212:	bf00      	nop

000e2214 <__aeabi_dcmplt>:
   e2214:	f84d ed08 	str.w	lr, [sp, #-8]!
   e2218:	f7ff ffea 	bl	e21f0 <__aeabi_cdcmpeq>
   e221c:	bf34      	ite	cc
   e221e:	2001      	movcc	r0, #1
   e2220:	2000      	movcs	r0, #0
   e2222:	f85d fb08 	ldr.w	pc, [sp], #8
   e2226:	bf00      	nop

000e2228 <__aeabi_dcmple>:
   e2228:	f84d ed08 	str.w	lr, [sp, #-8]!
   e222c:	f7ff ffe0 	bl	e21f0 <__aeabi_cdcmpeq>
   e2230:	bf94      	ite	ls
   e2232:	2001      	movls	r0, #1
   e2234:	2000      	movhi	r0, #0
   e2236:	f85d fb08 	ldr.w	pc, [sp], #8
   e223a:	bf00      	nop

000e223c <__aeabi_dcmpge>:
   e223c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e2240:	f7ff ffce 	bl	e21e0 <__aeabi_cdrcmple>
   e2244:	bf94      	ite	ls
   e2246:	2001      	movls	r0, #1
   e2248:	2000      	movhi	r0, #0
   e224a:	f85d fb08 	ldr.w	pc, [sp], #8
   e224e:	bf00      	nop

000e2250 <__aeabi_dcmpgt>:
   e2250:	f84d ed08 	str.w	lr, [sp, #-8]!
   e2254:	f7ff ffc4 	bl	e21e0 <__aeabi_cdrcmple>
   e2258:	bf34      	ite	cc
   e225a:	2001      	movcc	r0, #1
   e225c:	2000      	movcs	r0, #0
   e225e:	f85d fb08 	ldr.w	pc, [sp], #8
   e2262:	bf00      	nop

000e2264 <__aeabi_dcmpun>:
   e2264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e2268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e226c:	d102      	bne.n	e2274 <__aeabi_dcmpun+0x10>
   e226e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e2272:	d10a      	bne.n	e228a <__aeabi_dcmpun+0x26>
   e2274:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e2278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e227c:	d102      	bne.n	e2284 <__aeabi_dcmpun+0x20>
   e227e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e2282:	d102      	bne.n	e228a <__aeabi_dcmpun+0x26>
   e2284:	f04f 0000 	mov.w	r0, #0
   e2288:	4770      	bx	lr
   e228a:	f04f 0001 	mov.w	r0, #1
   e228e:	4770      	bx	lr

000e2290 <__aeabi_d2iz>:
   e2290:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e2294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e2298:	d215      	bcs.n	e22c6 <__aeabi_d2iz+0x36>
   e229a:	d511      	bpl.n	e22c0 <__aeabi_d2iz+0x30>
   e229c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e22a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e22a4:	d912      	bls.n	e22cc <__aeabi_d2iz+0x3c>
   e22a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e22aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e22ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e22b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e22b6:	fa23 f002 	lsr.w	r0, r3, r2
   e22ba:	bf18      	it	ne
   e22bc:	4240      	negne	r0, r0
   e22be:	4770      	bx	lr
   e22c0:	f04f 0000 	mov.w	r0, #0
   e22c4:	4770      	bx	lr
   e22c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e22ca:	d105      	bne.n	e22d8 <__aeabi_d2iz+0x48>
   e22cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e22d0:	bf08      	it	eq
   e22d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e22d6:	4770      	bx	lr
   e22d8:	f04f 0000 	mov.w	r0, #0
   e22dc:	4770      	bx	lr
   e22de:	bf00      	nop

000e22e0 <__aeabi_d2uiz>:
   e22e0:	004a      	lsls	r2, r1, #1
   e22e2:	d211      	bcs.n	e2308 <__aeabi_d2uiz+0x28>
   e22e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e22e8:	d211      	bcs.n	e230e <__aeabi_d2uiz+0x2e>
   e22ea:	d50d      	bpl.n	e2308 <__aeabi_d2uiz+0x28>
   e22ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e22f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e22f4:	d40e      	bmi.n	e2314 <__aeabi_d2uiz+0x34>
   e22f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e22fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e22fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e2302:	fa23 f002 	lsr.w	r0, r3, r2
   e2306:	4770      	bx	lr
   e2308:	f04f 0000 	mov.w	r0, #0
   e230c:	4770      	bx	lr
   e230e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e2312:	d102      	bne.n	e231a <__aeabi_d2uiz+0x3a>
   e2314:	f04f 30ff 	mov.w	r0, #4294967295
   e2318:	4770      	bx	lr
   e231a:	f04f 0000 	mov.w	r0, #0
   e231e:	4770      	bx	lr

000e2320 <__aeabi_d2f>:
   e2320:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e2324:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e2328:	bf24      	itt	cs
   e232a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e232e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e2332:	d90d      	bls.n	e2350 <__aeabi_d2f+0x30>
   e2334:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e2338:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e233c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e2340:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e2344:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e2348:	bf08      	it	eq
   e234a:	f020 0001 	biceq.w	r0, r0, #1
   e234e:	4770      	bx	lr
   e2350:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e2354:	d121      	bne.n	e239a <__aeabi_d2f+0x7a>
   e2356:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e235a:	bfbc      	itt	lt
   e235c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e2360:	4770      	bxlt	lr
   e2362:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e2366:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e236a:	f1c2 0218 	rsb	r2, r2, #24
   e236e:	f1c2 0c20 	rsb	ip, r2, #32
   e2372:	fa10 f30c 	lsls.w	r3, r0, ip
   e2376:	fa20 f002 	lsr.w	r0, r0, r2
   e237a:	bf18      	it	ne
   e237c:	f040 0001 	orrne.w	r0, r0, #1
   e2380:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e2384:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e2388:	fa03 fc0c 	lsl.w	ip, r3, ip
   e238c:	ea40 000c 	orr.w	r0, r0, ip
   e2390:	fa23 f302 	lsr.w	r3, r3, r2
   e2394:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e2398:	e7cc      	b.n	e2334 <__aeabi_d2f+0x14>
   e239a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e239e:	d107      	bne.n	e23b0 <__aeabi_d2f+0x90>
   e23a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e23a4:	bf1e      	ittt	ne
   e23a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e23aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e23ae:	4770      	bxne	lr
   e23b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e23b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e23b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e23bc:	4770      	bx	lr
   e23be:	bf00      	nop

000e23c0 <asctime>:
   e23c0:	4b09      	ldr	r3, [pc, #36]	; (e23e8 <asctime+0x28>)
   e23c2:	b570      	push	{r4, r5, r6, lr}
   e23c4:	681c      	ldr	r4, [r3, #0]
   e23c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e23c8:	4606      	mov	r6, r0
   e23ca:	b93d      	cbnz	r5, e23dc <asctime+0x1c>
   e23cc:	201a      	movs	r0, #26
   e23ce:	f7f7 fc6f 	bl	d9cb0 <malloc>
   e23d2:	221a      	movs	r2, #26
   e23d4:	6420      	str	r0, [r4, #64]	; 0x40
   e23d6:	4629      	mov	r1, r5
   e23d8:	f000 f94f 	bl	e267a <memset>
   e23dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e23de:	4630      	mov	r0, r6
   e23e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e23e4:	f000 b802 	b.w	e23ec <asctime_r>
   e23e8:	2003d69c 	.word	0x2003d69c

000e23ec <asctime_r>:
   e23ec:	b510      	push	{r4, lr}
   e23ee:	460c      	mov	r4, r1
   e23f0:	6941      	ldr	r1, [r0, #20]
   e23f2:	6903      	ldr	r3, [r0, #16]
   e23f4:	6982      	ldr	r2, [r0, #24]
   e23f6:	b086      	sub	sp, #24
   e23f8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e23fc:	9104      	str	r1, [sp, #16]
   e23fe:	6801      	ldr	r1, [r0, #0]
   e2400:	9103      	str	r1, [sp, #12]
   e2402:	6841      	ldr	r1, [r0, #4]
   e2404:	9102      	str	r1, [sp, #8]
   e2406:	6881      	ldr	r1, [r0, #8]
   e2408:	9101      	str	r1, [sp, #4]
   e240a:	68c1      	ldr	r1, [r0, #12]
   e240c:	9100      	str	r1, [sp, #0]
   e240e:	4907      	ldr	r1, [pc, #28]	; (e242c <asctime_r+0x40>)
   e2410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e2414:	440b      	add	r3, r1
   e2416:	4906      	ldr	r1, [pc, #24]	; (e2430 <asctime_r+0x44>)
   e2418:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e241c:	440a      	add	r2, r1
   e241e:	4620      	mov	r0, r4
   e2420:	4904      	ldr	r1, [pc, #16]	; (e2434 <asctime_r+0x48>)
   e2422:	f7f7 fc5d 	bl	d9ce0 <siprintf>
   e2426:	4620      	mov	r0, r4
   e2428:	b006      	add	sp, #24
   e242a:	bd10      	pop	{r4, pc}
   e242c:	000e7095 	.word	0x000e7095
   e2430:	000e7080 	.word	0x000e7080
   e2434:	000e70b9 	.word	0x000e70b9

000e2438 <atof>:
   e2438:	2100      	movs	r1, #0
   e243a:	f001 bf2d 	b.w	e4298 <strtod>

000e243e <atoi>:
   e243e:	220a      	movs	r2, #10
   e2440:	2100      	movs	r1, #0
   e2442:	f001 bfb7 	b.w	e43b4 <strtol>

000e2446 <atol>:
   e2446:	220a      	movs	r2, #10
   e2448:	2100      	movs	r1, #0
   e244a:	f001 bfb3 	b.w	e43b4 <strtol>
	...

000e2450 <__cxa_atexit>:
   e2450:	b510      	push	{r4, lr}
   e2452:	4c05      	ldr	r4, [pc, #20]	; (e2468 <__cxa_atexit+0x18>)
   e2454:	4613      	mov	r3, r2
   e2456:	b12c      	cbz	r4, e2464 <__cxa_atexit+0x14>
   e2458:	460a      	mov	r2, r1
   e245a:	4601      	mov	r1, r0
   e245c:	2002      	movs	r0, #2
   e245e:	f3af 8000 	nop.w
   e2462:	bd10      	pop	{r4, pc}
   e2464:	4620      	mov	r0, r4
   e2466:	bd10      	pop	{r4, pc}
   e2468:	00000000 	.word	0x00000000

000e246c <localtime>:
   e246c:	b538      	push	{r3, r4, r5, lr}
   e246e:	4b07      	ldr	r3, [pc, #28]	; (e248c <localtime+0x20>)
   e2470:	681c      	ldr	r4, [r3, #0]
   e2472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e2474:	4605      	mov	r5, r0
   e2476:	b91b      	cbnz	r3, e2480 <localtime+0x14>
   e2478:	2024      	movs	r0, #36	; 0x24
   e247a:	f7f7 fc19 	bl	d9cb0 <malloc>
   e247e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e2480:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e2482:	4628      	mov	r0, r5
   e2484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e2488:	f000 b802 	b.w	e2490 <localtime_r>
   e248c:	2003d69c 	.word	0x2003d69c

000e2490 <localtime_r>:
   e2490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2494:	460c      	mov	r4, r1
   e2496:	4680      	mov	r8, r0
   e2498:	f002 fde4 	bl	e5064 <__gettzinfo>
   e249c:	4621      	mov	r1, r4
   e249e:	4607      	mov	r7, r0
   e24a0:	4640      	mov	r0, r8
   e24a2:	f002 fde3 	bl	e506c <gmtime_r>
   e24a6:	6946      	ldr	r6, [r0, #20]
   e24a8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e24ac:	07b3      	lsls	r3, r6, #30
   e24ae:	4604      	mov	r4, r0
   e24b0:	d105      	bne.n	e24be <localtime_r+0x2e>
   e24b2:	2264      	movs	r2, #100	; 0x64
   e24b4:	fb96 f3f2 	sdiv	r3, r6, r2
   e24b8:	fb02 6313 	mls	r3, r2, r3, r6
   e24bc:	b94b      	cbnz	r3, e24d2 <localtime_r+0x42>
   e24be:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e24c2:	fb96 f3f5 	sdiv	r3, r6, r5
   e24c6:	fb05 6513 	mls	r5, r5, r3, r6
   e24ca:	fab5 f385 	clz	r3, r5
   e24ce:	095b      	lsrs	r3, r3, #5
   e24d0:	e000      	b.n	e24d4 <localtime_r+0x44>
   e24d2:	2301      	movs	r3, #1
   e24d4:	4a5f      	ldr	r2, [pc, #380]	; (e2654 <localtime_r+0x1c4>)
   e24d6:	2530      	movs	r5, #48	; 0x30
   e24d8:	fb05 2503 	mla	r5, r5, r3, r2
   e24dc:	f002 f8c0 	bl	e4660 <__tz_lock>
   e24e0:	f002 f8c0 	bl	e4664 <_tzset_unlocked>
   e24e4:	4b5c      	ldr	r3, [pc, #368]	; (e2658 <localtime_r+0x1c8>)
   e24e6:	681b      	ldr	r3, [r3, #0]
   e24e8:	b1f3      	cbz	r3, e2528 <localtime_r+0x98>
   e24ea:	687b      	ldr	r3, [r7, #4]
   e24ec:	429e      	cmp	r6, r3
   e24ee:	d105      	bne.n	e24fc <localtime_r+0x6c>
   e24f0:	6839      	ldr	r1, [r7, #0]
   e24f2:	f8d8 3000 	ldr.w	r3, [r8]
   e24f6:	69fa      	ldr	r2, [r7, #28]
   e24f8:	b941      	cbnz	r1, e250c <localtime_r+0x7c>
   e24fa:	e00a      	b.n	e2512 <localtime_r+0x82>
   e24fc:	4630      	mov	r0, r6
   e24fe:	f002 f807 	bl	e4510 <__tzcalc_limits>
   e2502:	2800      	cmp	r0, #0
   e2504:	d1f4      	bne.n	e24f0 <localtime_r+0x60>
   e2506:	f04f 33ff 	mov.w	r3, #4294967295
   e250a:	e00d      	b.n	e2528 <localtime_r+0x98>
   e250c:	4293      	cmp	r3, r2
   e250e:	db08      	blt.n	e2522 <localtime_r+0x92>
   e2510:	e001      	b.n	e2516 <localtime_r+0x86>
   e2512:	4293      	cmp	r3, r2
   e2514:	da07      	bge.n	e2526 <localtime_r+0x96>
   e2516:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e2518:	4293      	cmp	r3, r2
   e251a:	bfac      	ite	ge
   e251c:	2300      	movge	r3, #0
   e251e:	2301      	movlt	r3, #1
   e2520:	e002      	b.n	e2528 <localtime_r+0x98>
   e2522:	2300      	movs	r3, #0
   e2524:	e000      	b.n	e2528 <localtime_r+0x98>
   e2526:	2301      	movs	r3, #1
   e2528:	6223      	str	r3, [r4, #32]
   e252a:	6a23      	ldr	r3, [r4, #32]
   e252c:	2b01      	cmp	r3, #1
   e252e:	bf0c      	ite	eq
   e2530:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e2532:	6a39      	ldrne	r1, [r7, #32]
   e2534:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e2538:	203c      	movs	r0, #60	; 0x3c
   e253a:	fb91 f6f3 	sdiv	r6, r1, r3
   e253e:	fb03 1316 	mls	r3, r3, r6, r1
   e2542:	6861      	ldr	r1, [r4, #4]
   e2544:	fb93 f2f0 	sdiv	r2, r3, r0
   e2548:	fb00 3012 	mls	r0, r0, r2, r3
   e254c:	6823      	ldr	r3, [r4, #0]
   e254e:	1a89      	subs	r1, r1, r2
   e2550:	68a2      	ldr	r2, [r4, #8]
   e2552:	6061      	str	r1, [r4, #4]
   e2554:	1a1b      	subs	r3, r3, r0
   e2556:	1b92      	subs	r2, r2, r6
   e2558:	2b3b      	cmp	r3, #59	; 0x3b
   e255a:	6023      	str	r3, [r4, #0]
   e255c:	60a2      	str	r2, [r4, #8]
   e255e:	dd03      	ble.n	e2568 <localtime_r+0xd8>
   e2560:	3101      	adds	r1, #1
   e2562:	6061      	str	r1, [r4, #4]
   e2564:	3b3c      	subs	r3, #60	; 0x3c
   e2566:	e004      	b.n	e2572 <localtime_r+0xe2>
   e2568:	2b00      	cmp	r3, #0
   e256a:	da03      	bge.n	e2574 <localtime_r+0xe4>
   e256c:	3901      	subs	r1, #1
   e256e:	6061      	str	r1, [r4, #4]
   e2570:	333c      	adds	r3, #60	; 0x3c
   e2572:	6023      	str	r3, [r4, #0]
   e2574:	6863      	ldr	r3, [r4, #4]
   e2576:	2b3b      	cmp	r3, #59	; 0x3b
   e2578:	dd03      	ble.n	e2582 <localtime_r+0xf2>
   e257a:	3201      	adds	r2, #1
   e257c:	60a2      	str	r2, [r4, #8]
   e257e:	3b3c      	subs	r3, #60	; 0x3c
   e2580:	e004      	b.n	e258c <localtime_r+0xfc>
   e2582:	2b00      	cmp	r3, #0
   e2584:	da03      	bge.n	e258e <localtime_r+0xfe>
   e2586:	3a01      	subs	r2, #1
   e2588:	60a2      	str	r2, [r4, #8]
   e258a:	333c      	adds	r3, #60	; 0x3c
   e258c:	6063      	str	r3, [r4, #4]
   e258e:	68a3      	ldr	r3, [r4, #8]
   e2590:	2b17      	cmp	r3, #23
   e2592:	dd22      	ble.n	e25da <localtime_r+0x14a>
   e2594:	69e2      	ldr	r2, [r4, #28]
   e2596:	3201      	adds	r2, #1
   e2598:	61e2      	str	r2, [r4, #28]
   e259a:	69a2      	ldr	r2, [r4, #24]
   e259c:	3201      	adds	r2, #1
   e259e:	2a06      	cmp	r2, #6
   e25a0:	bfc8      	it	gt
   e25a2:	2200      	movgt	r2, #0
   e25a4:	61a2      	str	r2, [r4, #24]
   e25a6:	68e2      	ldr	r2, [r4, #12]
   e25a8:	3b18      	subs	r3, #24
   e25aa:	3201      	adds	r2, #1
   e25ac:	60a3      	str	r3, [r4, #8]
   e25ae:	6923      	ldr	r3, [r4, #16]
   e25b0:	60e2      	str	r2, [r4, #12]
   e25b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e25b6:	428a      	cmp	r2, r1
   e25b8:	dd46      	ble.n	e2648 <localtime_r+0x1b8>
   e25ba:	3301      	adds	r3, #1
   e25bc:	2b0c      	cmp	r3, #12
   e25be:	bf0c      	ite	eq
   e25c0:	6963      	ldreq	r3, [r4, #20]
   e25c2:	6123      	strne	r3, [r4, #16]
   e25c4:	eba2 0201 	sub.w	r2, r2, r1
   e25c8:	60e2      	str	r2, [r4, #12]
   e25ca:	bf01      	itttt	eq
   e25cc:	3301      	addeq	r3, #1
   e25ce:	2200      	moveq	r2, #0
   e25d0:	6122      	streq	r2, [r4, #16]
   e25d2:	6163      	streq	r3, [r4, #20]
   e25d4:	bf08      	it	eq
   e25d6:	61e2      	streq	r2, [r4, #28]
   e25d8:	e036      	b.n	e2648 <localtime_r+0x1b8>
   e25da:	2b00      	cmp	r3, #0
   e25dc:	da34      	bge.n	e2648 <localtime_r+0x1b8>
   e25de:	69e2      	ldr	r2, [r4, #28]
   e25e0:	3a01      	subs	r2, #1
   e25e2:	61e2      	str	r2, [r4, #28]
   e25e4:	69a2      	ldr	r2, [r4, #24]
   e25e6:	3a01      	subs	r2, #1
   e25e8:	bf48      	it	mi
   e25ea:	2206      	movmi	r2, #6
   e25ec:	61a2      	str	r2, [r4, #24]
   e25ee:	68e2      	ldr	r2, [r4, #12]
   e25f0:	3318      	adds	r3, #24
   e25f2:	3a01      	subs	r2, #1
   e25f4:	60e2      	str	r2, [r4, #12]
   e25f6:	60a3      	str	r3, [r4, #8]
   e25f8:	bb32      	cbnz	r2, e2648 <localtime_r+0x1b8>
   e25fa:	6923      	ldr	r3, [r4, #16]
   e25fc:	3b01      	subs	r3, #1
   e25fe:	d401      	bmi.n	e2604 <localtime_r+0x174>
   e2600:	6123      	str	r3, [r4, #16]
   e2602:	e01d      	b.n	e2640 <localtime_r+0x1b0>
   e2604:	230b      	movs	r3, #11
   e2606:	6123      	str	r3, [r4, #16]
   e2608:	6963      	ldr	r3, [r4, #20]
   e260a:	1e5a      	subs	r2, r3, #1
   e260c:	f012 0f03 	tst.w	r2, #3
   e2610:	6162      	str	r2, [r4, #20]
   e2612:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e2616:	d105      	bne.n	e2624 <localtime_r+0x194>
   e2618:	2164      	movs	r1, #100	; 0x64
   e261a:	fb93 f2f1 	sdiv	r2, r3, r1
   e261e:	fb01 3212 	mls	r2, r1, r2, r3
   e2622:	b94a      	cbnz	r2, e2638 <localtime_r+0x1a8>
   e2624:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e2628:	fb93 f2f1 	sdiv	r2, r3, r1
   e262c:	fb01 3312 	mls	r3, r1, r2, r3
   e2630:	fab3 f383 	clz	r3, r3
   e2634:	095b      	lsrs	r3, r3, #5
   e2636:	e000      	b.n	e263a <localtime_r+0x1aa>
   e2638:	2301      	movs	r3, #1
   e263a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e263e:	61e3      	str	r3, [r4, #28]
   e2640:	6923      	ldr	r3, [r4, #16]
   e2642:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e2646:	60e3      	str	r3, [r4, #12]
   e2648:	f002 f80b 	bl	e4662 <__tz_unlock>
   e264c:	4620      	mov	r0, r4
   e264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e2652:	bf00      	nop
   e2654:	000e72a4 	.word	0x000e72a4
   e2658:	2003e7e8 	.word	0x2003e7e8

000e265c <_localeconv_r>:
   e265c:	4800      	ldr	r0, [pc, #0]	; (e2660 <_localeconv_r+0x4>)
   e265e:	4770      	bx	lr
   e2660:	2003d6a0 	.word	0x2003d6a0

000e2664 <memcpy>:
   e2664:	b510      	push	{r4, lr}
   e2666:	1e43      	subs	r3, r0, #1
   e2668:	440a      	add	r2, r1
   e266a:	4291      	cmp	r1, r2
   e266c:	d004      	beq.n	e2678 <memcpy+0x14>
   e266e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2672:	f803 4f01 	strb.w	r4, [r3, #1]!
   e2676:	e7f8      	b.n	e266a <memcpy+0x6>
   e2678:	bd10      	pop	{r4, pc}

000e267a <memset>:
   e267a:	4402      	add	r2, r0
   e267c:	4603      	mov	r3, r0
   e267e:	4293      	cmp	r3, r2
   e2680:	d002      	beq.n	e2688 <memset+0xe>
   e2682:	f803 1b01 	strb.w	r1, [r3], #1
   e2686:	e7fa      	b.n	e267e <memset+0x4>
   e2688:	4770      	bx	lr
	...

000e268c <validate_structure>:
   e268c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e268e:	6801      	ldr	r1, [r0, #0]
   e2690:	293b      	cmp	r1, #59	; 0x3b
   e2692:	4604      	mov	r4, r0
   e2694:	d911      	bls.n	e26ba <validate_structure+0x2e>
   e2696:	223c      	movs	r2, #60	; 0x3c
   e2698:	4668      	mov	r0, sp
   e269a:	f002 f96d 	bl	e4978 <div>
   e269e:	9a01      	ldr	r2, [sp, #4]
   e26a0:	6863      	ldr	r3, [r4, #4]
   e26a2:	9900      	ldr	r1, [sp, #0]
   e26a4:	2a00      	cmp	r2, #0
   e26a6:	440b      	add	r3, r1
   e26a8:	6063      	str	r3, [r4, #4]
   e26aa:	bfbb      	ittet	lt
   e26ac:	323c      	addlt	r2, #60	; 0x3c
   e26ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e26b2:	6022      	strge	r2, [r4, #0]
   e26b4:	6022      	strlt	r2, [r4, #0]
   e26b6:	bfb8      	it	lt
   e26b8:	6063      	strlt	r3, [r4, #4]
   e26ba:	6861      	ldr	r1, [r4, #4]
   e26bc:	293b      	cmp	r1, #59	; 0x3b
   e26be:	d911      	bls.n	e26e4 <validate_structure+0x58>
   e26c0:	223c      	movs	r2, #60	; 0x3c
   e26c2:	4668      	mov	r0, sp
   e26c4:	f002 f958 	bl	e4978 <div>
   e26c8:	9a01      	ldr	r2, [sp, #4]
   e26ca:	68a1      	ldr	r1, [r4, #8]
   e26cc:	9b00      	ldr	r3, [sp, #0]
   e26ce:	2a00      	cmp	r2, #0
   e26d0:	440b      	add	r3, r1
   e26d2:	60a3      	str	r3, [r4, #8]
   e26d4:	bfbb      	ittet	lt
   e26d6:	323c      	addlt	r2, #60	; 0x3c
   e26d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e26dc:	6062      	strge	r2, [r4, #4]
   e26de:	6062      	strlt	r2, [r4, #4]
   e26e0:	bfb8      	it	lt
   e26e2:	60a3      	strlt	r3, [r4, #8]
   e26e4:	68a1      	ldr	r1, [r4, #8]
   e26e6:	2917      	cmp	r1, #23
   e26e8:	d911      	bls.n	e270e <validate_structure+0x82>
   e26ea:	2218      	movs	r2, #24
   e26ec:	4668      	mov	r0, sp
   e26ee:	f002 f943 	bl	e4978 <div>
   e26f2:	9a01      	ldr	r2, [sp, #4]
   e26f4:	68e1      	ldr	r1, [r4, #12]
   e26f6:	9b00      	ldr	r3, [sp, #0]
   e26f8:	2a00      	cmp	r2, #0
   e26fa:	440b      	add	r3, r1
   e26fc:	60e3      	str	r3, [r4, #12]
   e26fe:	bfbb      	ittet	lt
   e2700:	3218      	addlt	r2, #24
   e2702:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e2706:	60a2      	strge	r2, [r4, #8]
   e2708:	60a2      	strlt	r2, [r4, #8]
   e270a:	bfb8      	it	lt
   e270c:	60e3      	strlt	r3, [r4, #12]
   e270e:	6921      	ldr	r1, [r4, #16]
   e2710:	290b      	cmp	r1, #11
   e2712:	d911      	bls.n	e2738 <validate_structure+0xac>
   e2714:	220c      	movs	r2, #12
   e2716:	4668      	mov	r0, sp
   e2718:	f002 f92e 	bl	e4978 <div>
   e271c:	9a01      	ldr	r2, [sp, #4]
   e271e:	6961      	ldr	r1, [r4, #20]
   e2720:	9b00      	ldr	r3, [sp, #0]
   e2722:	2a00      	cmp	r2, #0
   e2724:	440b      	add	r3, r1
   e2726:	6163      	str	r3, [r4, #20]
   e2728:	bfbb      	ittet	lt
   e272a:	320c      	addlt	r2, #12
   e272c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e2730:	6122      	strge	r2, [r4, #16]
   e2732:	6122      	strlt	r2, [r4, #16]
   e2734:	bfb8      	it	lt
   e2736:	6163      	strlt	r3, [r4, #20]
   e2738:	6963      	ldr	r3, [r4, #20]
   e273a:	0799      	lsls	r1, r3, #30
   e273c:	d112      	bne.n	e2764 <validate_structure+0xd8>
   e273e:	2164      	movs	r1, #100	; 0x64
   e2740:	fb93 f2f1 	sdiv	r2, r3, r1
   e2744:	fb01 3212 	mls	r2, r1, r2, r3
   e2748:	b972      	cbnz	r2, e2768 <validate_structure+0xdc>
   e274a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e274e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e2752:	fb93 f2f1 	sdiv	r2, r3, r1
   e2756:	fb01 3312 	mls	r3, r1, r2, r3
   e275a:	2b00      	cmp	r3, #0
   e275c:	bf14      	ite	ne
   e275e:	231c      	movne	r3, #28
   e2760:	231d      	moveq	r3, #29
   e2762:	e002      	b.n	e276a <validate_structure+0xde>
   e2764:	231c      	movs	r3, #28
   e2766:	e000      	b.n	e276a <validate_structure+0xde>
   e2768:	231d      	movs	r3, #29
   e276a:	68e2      	ldr	r2, [r4, #12]
   e276c:	2a00      	cmp	r2, #0
   e276e:	dd06      	ble.n	e277e <validate_structure+0xf2>
   e2770:	4f33      	ldr	r7, [pc, #204]	; (e2840 <validate_structure+0x1b4>)
   e2772:	f04f 0e00 	mov.w	lr, #0
   e2776:	2564      	movs	r5, #100	; 0x64
   e2778:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e277c:	e039      	b.n	e27f2 <validate_structure+0x166>
   e277e:	4f30      	ldr	r7, [pc, #192]	; (e2840 <validate_structure+0x1b4>)
   e2780:	260b      	movs	r6, #11
   e2782:	2064      	movs	r0, #100	; 0x64
   e2784:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e2788:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e278c:	f1be 0f00 	cmp.w	lr, #0
   e2790:	dc53      	bgt.n	e283a <validate_structure+0x1ae>
   e2792:	6921      	ldr	r1, [r4, #16]
   e2794:	3901      	subs	r1, #1
   e2796:	6121      	str	r1, [r4, #16]
   e2798:	3101      	adds	r1, #1
   e279a:	d118      	bne.n	e27ce <validate_structure+0x142>
   e279c:	6963      	ldr	r3, [r4, #20]
   e279e:	6126      	str	r6, [r4, #16]
   e27a0:	1e59      	subs	r1, r3, #1
   e27a2:	078a      	lsls	r2, r1, #30
   e27a4:	6161      	str	r1, [r4, #20]
   e27a6:	d10f      	bne.n	e27c8 <validate_structure+0x13c>
   e27a8:	fb91 f2f0 	sdiv	r2, r1, r0
   e27ac:	fb00 1112 	mls	r1, r0, r2, r1
   e27b0:	b961      	cbnz	r1, e27cc <validate_structure+0x140>
   e27b2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e27b6:	fb93 f2f5 	sdiv	r2, r3, r5
   e27ba:	fb05 3312 	mls	r3, r5, r2, r3
   e27be:	2b00      	cmp	r3, #0
   e27c0:	bf14      	ite	ne
   e27c2:	231c      	movne	r3, #28
   e27c4:	231d      	moveq	r3, #29
   e27c6:	e002      	b.n	e27ce <validate_structure+0x142>
   e27c8:	231c      	movs	r3, #28
   e27ca:	e000      	b.n	e27ce <validate_structure+0x142>
   e27cc:	231d      	movs	r3, #29
   e27ce:	6922      	ldr	r2, [r4, #16]
   e27d0:	2a01      	cmp	r2, #1
   e27d2:	bf14      	ite	ne
   e27d4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e27d8:	461a      	moveq	r2, r3
   e27da:	4472      	add	r2, lr
   e27dc:	60e2      	str	r2, [r4, #12]
   e27de:	e7d3      	b.n	e2788 <validate_structure+0xfc>
   e27e0:	428b      	cmp	r3, r1
   e27e2:	da2a      	bge.n	e283a <validate_structure+0x1ae>
   e27e4:	4618      	mov	r0, r3
   e27e6:	3201      	adds	r2, #1
   e27e8:	1a09      	subs	r1, r1, r0
   e27ea:	2a0c      	cmp	r2, #12
   e27ec:	60e1      	str	r1, [r4, #12]
   e27ee:	6122      	str	r2, [r4, #16]
   e27f0:	d008      	beq.n	e2804 <validate_structure+0x178>
   e27f2:	6922      	ldr	r2, [r4, #16]
   e27f4:	68e1      	ldr	r1, [r4, #12]
   e27f6:	2a01      	cmp	r2, #1
   e27f8:	d0f2      	beq.n	e27e0 <validate_structure+0x154>
   e27fa:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e27fe:	4281      	cmp	r1, r0
   e2800:	dcf1      	bgt.n	e27e6 <validate_structure+0x15a>
   e2802:	e01a      	b.n	e283a <validate_structure+0x1ae>
   e2804:	6963      	ldr	r3, [r4, #20]
   e2806:	f8c4 e010 	str.w	lr, [r4, #16]
   e280a:	1c5a      	adds	r2, r3, #1
   e280c:	0791      	lsls	r1, r2, #30
   e280e:	6162      	str	r2, [r4, #20]
   e2810:	d10f      	bne.n	e2832 <validate_structure+0x1a6>
   e2812:	fb92 f1f5 	sdiv	r1, r2, r5
   e2816:	fb05 2211 	mls	r2, r5, r1, r2
   e281a:	b962      	cbnz	r2, e2836 <validate_structure+0x1aa>
   e281c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e2820:	fb93 f2f6 	sdiv	r2, r3, r6
   e2824:	fb06 3312 	mls	r3, r6, r2, r3
   e2828:	2b00      	cmp	r3, #0
   e282a:	bf14      	ite	ne
   e282c:	231c      	movne	r3, #28
   e282e:	231d      	moveq	r3, #29
   e2830:	e7df      	b.n	e27f2 <validate_structure+0x166>
   e2832:	231c      	movs	r3, #28
   e2834:	e7dd      	b.n	e27f2 <validate_structure+0x166>
   e2836:	231d      	movs	r3, #29
   e2838:	e7db      	b.n	e27f2 <validate_structure+0x166>
   e283a:	b003      	add	sp, #12
   e283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e283e:	bf00      	nop
   e2840:	000e7274 	.word	0x000e7274

000e2844 <mktime>:
   e2844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2848:	4605      	mov	r5, r0
   e284a:	f002 fc0b 	bl	e5064 <__gettzinfo>
   e284e:	4681      	mov	r9, r0
   e2850:	4628      	mov	r0, r5
   e2852:	f7ff ff1b 	bl	e268c <validate_structure>
   e2856:	e895 000c 	ldmia.w	r5, {r2, r3}
   e285a:	213c      	movs	r1, #60	; 0x3c
   e285c:	fb01 2303 	mla	r3, r1, r3, r2
   e2860:	68aa      	ldr	r2, [r5, #8]
   e2862:	68ec      	ldr	r4, [r5, #12]
   e2864:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e2868:	fb08 3102 	mla	r1, r8, r2, r3
   e286c:	692b      	ldr	r3, [r5, #16]
   e286e:	4aab      	ldr	r2, [pc, #684]	; (e2b1c <mktime+0x2d8>)
   e2870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e2874:	3c01      	subs	r4, #1
   e2876:	2b01      	cmp	r3, #1
   e2878:	4414      	add	r4, r2
   e287a:	696b      	ldr	r3, [r5, #20]
   e287c:	dd11      	ble.n	e28a2 <mktime+0x5e>
   e287e:	079e      	lsls	r6, r3, #30
   e2880:	d10f      	bne.n	e28a2 <mktime+0x5e>
   e2882:	2064      	movs	r0, #100	; 0x64
   e2884:	fb93 f2f0 	sdiv	r2, r3, r0
   e2888:	fb00 3212 	mls	r2, r0, r2, r3
   e288c:	b942      	cbnz	r2, e28a0 <mktime+0x5c>
   e288e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e2892:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2896:	fb96 f0f2 	sdiv	r0, r6, r2
   e289a:	fb02 6210 	mls	r2, r2, r0, r6
   e289e:	b902      	cbnz	r2, e28a2 <mktime+0x5e>
   e28a0:	3401      	adds	r4, #1
   e28a2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e28a6:	3210      	adds	r2, #16
   e28a8:	f644 6020 	movw	r0, #20000	; 0x4e20
   e28ac:	4282      	cmp	r2, r0
   e28ae:	61ec      	str	r4, [r5, #28]
   e28b0:	461f      	mov	r7, r3
   e28b2:	f200 812e 	bhi.w	e2b12 <mktime+0x2ce>
   e28b6:	2b46      	cmp	r3, #70	; 0x46
   e28b8:	dd22      	ble.n	e2900 <mktime+0xbc>
   e28ba:	2246      	movs	r2, #70	; 0x46
   e28bc:	f240 1c6d 	movw	ip, #365	; 0x16d
   e28c0:	2664      	movs	r6, #100	; 0x64
   e28c2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e28c6:	0790      	lsls	r0, r2, #30
   e28c8:	d110      	bne.n	e28ec <mktime+0xa8>
   e28ca:	fb92 f0f6 	sdiv	r0, r2, r6
   e28ce:	fb06 2010 	mls	r0, r6, r0, r2
   e28d2:	b970      	cbnz	r0, e28f2 <mktime+0xae>
   e28d4:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e28d8:	fb98 f0fe 	sdiv	r0, r8, lr
   e28dc:	fb0e 8010 	mls	r0, lr, r0, r8
   e28e0:	2800      	cmp	r0, #0
   e28e2:	bf14      	ite	ne
   e28e4:	4660      	movne	r0, ip
   e28e6:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e28ea:	e004      	b.n	e28f6 <mktime+0xb2>
   e28ec:	f240 106d 	movw	r0, #365	; 0x16d
   e28f0:	e001      	b.n	e28f6 <mktime+0xb2>
   e28f2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e28f6:	3201      	adds	r2, #1
   e28f8:	4293      	cmp	r3, r2
   e28fa:	4404      	add	r4, r0
   e28fc:	d1e3      	bne.n	e28c6 <mktime+0x82>
   e28fe:	e044      	b.n	e298a <mktime+0x146>
   e2900:	d043      	beq.n	e298a <mktime+0x146>
   e2902:	2245      	movs	r2, #69	; 0x45
   e2904:	f240 1e6d 	movw	lr, #365	; 0x16d
   e2908:	2664      	movs	r6, #100	; 0x64
   e290a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e290e:	429a      	cmp	r2, r3
   e2910:	dd1a      	ble.n	e2948 <mktime+0x104>
   e2912:	0790      	lsls	r0, r2, #30
   e2914:	d110      	bne.n	e2938 <mktime+0xf4>
   e2916:	fb92 f0f6 	sdiv	r0, r2, r6
   e291a:	fb06 2010 	mls	r0, r6, r0, r2
   e291e:	b970      	cbnz	r0, e293e <mktime+0xfa>
   e2920:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e2924:	fb9c f0f7 	sdiv	r0, ip, r7
   e2928:	fb07 c010 	mls	r0, r7, r0, ip
   e292c:	2800      	cmp	r0, #0
   e292e:	bf14      	ite	ne
   e2930:	4670      	movne	r0, lr
   e2932:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e2936:	e004      	b.n	e2942 <mktime+0xfe>
   e2938:	f240 106d 	movw	r0, #365	; 0x16d
   e293c:	e001      	b.n	e2942 <mktime+0xfe>
   e293e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e2942:	1a24      	subs	r4, r4, r0
   e2944:	3a01      	subs	r2, #1
   e2946:	e7e2      	b.n	e290e <mktime+0xca>
   e2948:	2b45      	cmp	r3, #69	; 0x45
   e294a:	bfa8      	it	ge
   e294c:	2345      	movge	r3, #69	; 0x45
   e294e:	079e      	lsls	r6, r3, #30
   e2950:	461f      	mov	r7, r3
   e2952:	d114      	bne.n	e297e <mktime+0x13a>
   e2954:	2264      	movs	r2, #100	; 0x64
   e2956:	fb93 f3f2 	sdiv	r3, r3, r2
   e295a:	fb02 7313 	mls	r3, r2, r3, r7
   e295e:	b98b      	cbnz	r3, e2984 <mktime+0x140>
   e2960:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e2964:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e2968:	fb90 f2f3 	sdiv	r2, r0, r3
   e296c:	fb03 0312 	mls	r3, r3, r2, r0
   e2970:	2b00      	cmp	r3, #0
   e2972:	f240 136d 	movw	r3, #365	; 0x16d
   e2976:	bf08      	it	eq
   e2978:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e297c:	e004      	b.n	e2988 <mktime+0x144>
   e297e:	f240 136d 	movw	r3, #365	; 0x16d
   e2982:	e001      	b.n	e2988 <mktime+0x144>
   e2984:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e2988:	1ae4      	subs	r4, r4, r3
   e298a:	4865      	ldr	r0, [pc, #404]	; (e2b20 <mktime+0x2dc>)
   e298c:	fb00 1804 	mla	r8, r0, r4, r1
   e2990:	f001 fe66 	bl	e4660 <__tz_lock>
   e2994:	f001 fe66 	bl	e4664 <_tzset_unlocked>
   e2998:	4b62      	ldr	r3, [pc, #392]	; (e2b24 <mktime+0x2e0>)
   e299a:	681e      	ldr	r6, [r3, #0]
   e299c:	2e00      	cmp	r6, #0
   e299e:	f000 80a4 	beq.w	e2aea <mktime+0x2a6>
   e29a2:	6a2b      	ldr	r3, [r5, #32]
   e29a4:	6968      	ldr	r0, [r5, #20]
   e29a6:	2b01      	cmp	r3, #1
   e29a8:	bfa8      	it	ge
   e29aa:	2301      	movge	r3, #1
   e29ac:	469a      	mov	sl, r3
   e29ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e29b2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e29b6:	4298      	cmp	r0, r3
   e29b8:	d10d      	bne.n	e29d6 <mktime+0x192>
   e29ba:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e29be:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e29c2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e29c6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e29ca:	1ad6      	subs	r6, r2, r3
   e29cc:	45b0      	cmp	r8, r6
   e29ce:	eba1 0100 	sub.w	r1, r1, r0
   e29d2:	da05      	bge.n	e29e0 <mktime+0x19c>
   e29d4:	e007      	b.n	e29e6 <mktime+0x1a2>
   e29d6:	f001 fd9b 	bl	e4510 <__tzcalc_limits>
   e29da:	2800      	cmp	r0, #0
   e29dc:	d1ed      	bne.n	e29ba <mktime+0x176>
   e29de:	e076      	b.n	e2ace <mktime+0x28a>
   e29e0:	1a12      	subs	r2, r2, r0
   e29e2:	4590      	cmp	r8, r2
   e29e4:	db73      	blt.n	e2ace <mktime+0x28a>
   e29e6:	f8d9 2000 	ldr.w	r2, [r9]
   e29ea:	b112      	cbz	r2, e29f2 <mktime+0x1ae>
   e29ec:	4588      	cmp	r8, r1
   e29ee:	db77      	blt.n	e2ae0 <mktime+0x29c>
   e29f0:	e001      	b.n	e29f6 <mktime+0x1b2>
   e29f2:	4588      	cmp	r8, r1
   e29f4:	da07      	bge.n	e2a06 <mktime+0x1c2>
   e29f6:	45b0      	cmp	r8, r6
   e29f8:	bfac      	ite	ge
   e29fa:	2600      	movge	r6, #0
   e29fc:	2601      	movlt	r6, #1
   e29fe:	f1ba 0f00 	cmp.w	sl, #0
   e2a02:	da04      	bge.n	e2a0e <mktime+0x1ca>
   e2a04:	e064      	b.n	e2ad0 <mktime+0x28c>
   e2a06:	f1ba 0f00 	cmp.w	sl, #0
   e2a0a:	db63      	blt.n	e2ad4 <mktime+0x290>
   e2a0c:	2601      	movs	r6, #1
   e2a0e:	ea8a 0a06 	eor.w	sl, sl, r6
   e2a12:	f1ba 0f01 	cmp.w	sl, #1
   e2a16:	d15b      	bne.n	e2ad0 <mktime+0x28c>
   e2a18:	1a1b      	subs	r3, r3, r0
   e2a1a:	b906      	cbnz	r6, e2a1e <mktime+0x1da>
   e2a1c:	425b      	negs	r3, r3
   e2a1e:	682a      	ldr	r2, [r5, #0]
   e2a20:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e2a24:	441a      	add	r2, r3
   e2a26:	602a      	str	r2, [r5, #0]
   e2a28:	4628      	mov	r0, r5
   e2a2a:	4498      	add	r8, r3
   e2a2c:	f7ff fe2e 	bl	e268c <validate_structure>
   e2a30:	68eb      	ldr	r3, [r5, #12]
   e2a32:	ebb3 030a 	subs.w	r3, r3, sl
   e2a36:	d04b      	beq.n	e2ad0 <mktime+0x28c>
   e2a38:	2b01      	cmp	r3, #1
   e2a3a:	dc03      	bgt.n	e2a44 <mktime+0x200>
   e2a3c:	1c98      	adds	r0, r3, #2
   e2a3e:	bfd8      	it	le
   e2a40:	2301      	movle	r3, #1
   e2a42:	e001      	b.n	e2a48 <mktime+0x204>
   e2a44:	f04f 33ff 	mov.w	r3, #4294967295
   e2a48:	69ea      	ldr	r2, [r5, #28]
   e2a4a:	441c      	add	r4, r3
   e2a4c:	189b      	adds	r3, r3, r2
   e2a4e:	d51d      	bpl.n	e2a8c <mktime+0x248>
   e2a50:	1e7b      	subs	r3, r7, #1
   e2a52:	0799      	lsls	r1, r3, #30
   e2a54:	d114      	bne.n	e2a80 <mktime+0x23c>
   e2a56:	2164      	movs	r1, #100	; 0x64
   e2a58:	fb93 f2f1 	sdiv	r2, r3, r1
   e2a5c:	fb01 3312 	mls	r3, r1, r2, r3
   e2a60:	b98b      	cbnz	r3, e2a86 <mktime+0x242>
   e2a62:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e2a66:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2a6a:	fb97 f3f2 	sdiv	r3, r7, r2
   e2a6e:	fb02 7713 	mls	r7, r2, r3, r7
   e2a72:	2f00      	cmp	r7, #0
   e2a74:	f240 136d 	movw	r3, #365	; 0x16d
   e2a78:	bf18      	it	ne
   e2a7a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e2a7e:	e024      	b.n	e2aca <mktime+0x286>
   e2a80:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e2a84:	e021      	b.n	e2aca <mktime+0x286>
   e2a86:	f240 136d 	movw	r3, #365	; 0x16d
   e2a8a:	e01e      	b.n	e2aca <mktime+0x286>
   e2a8c:	07ba      	lsls	r2, r7, #30
   e2a8e:	d114      	bne.n	e2aba <mktime+0x276>
   e2a90:	2164      	movs	r1, #100	; 0x64
   e2a92:	fb97 f2f1 	sdiv	r2, r7, r1
   e2a96:	fb01 7212 	mls	r2, r1, r2, r7
   e2a9a:	b98a      	cbnz	r2, e2ac0 <mktime+0x27c>
   e2a9c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e2aa0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e2aa4:	fb97 f2f1 	sdiv	r2, r7, r1
   e2aa8:	fb01 7712 	mls	r7, r1, r2, r7
   e2aac:	2f00      	cmp	r7, #0
   e2aae:	f240 126d 	movw	r2, #365	; 0x16d
   e2ab2:	bf08      	it	eq
   e2ab4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e2ab8:	e004      	b.n	e2ac4 <mktime+0x280>
   e2aba:	f240 126d 	movw	r2, #365	; 0x16d
   e2abe:	e001      	b.n	e2ac4 <mktime+0x280>
   e2ac0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e2ac4:	429a      	cmp	r2, r3
   e2ac6:	bfd8      	it	le
   e2ac8:	1a9b      	suble	r3, r3, r2
   e2aca:	61eb      	str	r3, [r5, #28]
   e2acc:	e000      	b.n	e2ad0 <mktime+0x28c>
   e2ace:	4656      	mov	r6, sl
   e2ad0:	2e01      	cmp	r6, #1
   e2ad2:	d10a      	bne.n	e2aea <mktime+0x2a6>
   e2ad4:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e2ad8:	2601      	movs	r6, #1
   e2ada:	eb08 0700 	add.w	r7, r8, r0
   e2ade:	e008      	b.n	e2af2 <mktime+0x2ae>
   e2ae0:	f1ba 0f00 	cmp.w	sl, #0
   e2ae4:	f04f 0600 	mov.w	r6, #0
   e2ae8:	da91      	bge.n	e2a0e <mktime+0x1ca>
   e2aea:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e2aee:	eb08 0700 	add.w	r7, r8, r0
   e2af2:	f001 fdb6 	bl	e4662 <__tz_unlock>
   e2af6:	3404      	adds	r4, #4
   e2af8:	2307      	movs	r3, #7
   e2afa:	fb94 f3f3 	sdiv	r3, r4, r3
   e2afe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e2b02:	1ae4      	subs	r4, r4, r3
   e2b04:	bf48      	it	mi
   e2b06:	3407      	addmi	r4, #7
   e2b08:	622e      	str	r6, [r5, #32]
   e2b0a:	61ac      	str	r4, [r5, #24]
   e2b0c:	4638      	mov	r0, r7
   e2b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2b12:	f04f 30ff 	mov.w	r0, #4294967295
   e2b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2b1a:	bf00      	nop
   e2b1c:	000e7244 	.word	0x000e7244
   e2b20:	00015180 	.word	0x00015180
   e2b24:	2003e7e8 	.word	0x2003e7e8

000e2b28 <srand>:
   e2b28:	b538      	push	{r3, r4, r5, lr}
   e2b2a:	4b12      	ldr	r3, [pc, #72]	; (e2b74 <srand+0x4c>)
   e2b2c:	681c      	ldr	r4, [r3, #0]
   e2b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2b30:	4605      	mov	r5, r0
   e2b32:	b9d3      	cbnz	r3, e2b6a <srand+0x42>
   e2b34:	2018      	movs	r0, #24
   e2b36:	f7f7 f8bb 	bl	d9cb0 <malloc>
   e2b3a:	f243 330e 	movw	r3, #13070	; 0x330e
   e2b3e:	63a0      	str	r0, [r4, #56]	; 0x38
   e2b40:	8003      	strh	r3, [r0, #0]
   e2b42:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e2b46:	8043      	strh	r3, [r0, #2]
   e2b48:	f241 2334 	movw	r3, #4660	; 0x1234
   e2b4c:	8083      	strh	r3, [r0, #4]
   e2b4e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e2b52:	80c3      	strh	r3, [r0, #6]
   e2b54:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e2b58:	8103      	strh	r3, [r0, #8]
   e2b5a:	2305      	movs	r3, #5
   e2b5c:	8143      	strh	r3, [r0, #10]
   e2b5e:	230b      	movs	r3, #11
   e2b60:	8183      	strh	r3, [r0, #12]
   e2b62:	2201      	movs	r2, #1
   e2b64:	2300      	movs	r3, #0
   e2b66:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e2b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2b6c:	2200      	movs	r2, #0
   e2b6e:	611d      	str	r5, [r3, #16]
   e2b70:	615a      	str	r2, [r3, #20]
   e2b72:	bd38      	pop	{r3, r4, r5, pc}
   e2b74:	2003d69c 	.word	0x2003d69c

000e2b78 <strcmp>:
   e2b78:	f810 2b01 	ldrb.w	r2, [r0], #1
   e2b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
   e2b80:	2a01      	cmp	r2, #1
   e2b82:	bf28      	it	cs
   e2b84:	429a      	cmpcs	r2, r3
   e2b86:	d0f7      	beq.n	e2b78 <strcmp>
   e2b88:	1ad0      	subs	r0, r2, r3
   e2b8a:	4770      	bx	lr

000e2b8c <strcpy>:
   e2b8c:	4603      	mov	r3, r0
   e2b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e2b92:	f803 2b01 	strb.w	r2, [r3], #1
   e2b96:	2a00      	cmp	r2, #0
   e2b98:	d1f9      	bne.n	e2b8e <strcpy+0x2>
   e2b9a:	4770      	bx	lr

000e2b9c <strdup>:
   e2b9c:	4b02      	ldr	r3, [pc, #8]	; (e2ba8 <strdup+0xc>)
   e2b9e:	4601      	mov	r1, r0
   e2ba0:	6818      	ldr	r0, [r3, #0]
   e2ba2:	f000 b803 	b.w	e2bac <_strdup_r>
   e2ba6:	bf00      	nop
   e2ba8:	2003d69c 	.word	0x2003d69c

000e2bac <_strdup_r>:
   e2bac:	b570      	push	{r4, r5, r6, lr}
   e2bae:	4606      	mov	r6, r0
   e2bb0:	4608      	mov	r0, r1
   e2bb2:	460c      	mov	r4, r1
   e2bb4:	f000 fd22 	bl	e35fc <strlen>
   e2bb8:	1c45      	adds	r5, r0, #1
   e2bba:	4629      	mov	r1, r5
   e2bbc:	4630      	mov	r0, r6
   e2bbe:	f7f7 f8bf 	bl	d9d40 <_malloc_r>
   e2bc2:	4606      	mov	r6, r0
   e2bc4:	b118      	cbz	r0, e2bce <_strdup_r+0x22>
   e2bc6:	462a      	mov	r2, r5
   e2bc8:	4621      	mov	r1, r4
   e2bca:	f7ff fd4b 	bl	e2664 <memcpy>
   e2bce:	4630      	mov	r0, r6
   e2bd0:	bd70      	pop	{r4, r5, r6, pc}

000e2bd2 <iso_year_adjust>:
   e2bd2:	6941      	ldr	r1, [r0, #20]
   e2bd4:	078b      	lsls	r3, r1, #30
   e2bd6:	b510      	push	{r4, lr}
   e2bd8:	d10c      	bne.n	e2bf4 <iso_year_adjust+0x22>
   e2bda:	2900      	cmp	r1, #0
   e2bdc:	f240 736c 	movw	r3, #1900	; 0x76c
   e2be0:	bfa8      	it	ge
   e2be2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e2be6:	440b      	add	r3, r1
   e2be8:	2464      	movs	r4, #100	; 0x64
   e2bea:	fb93 f2f4 	sdiv	r2, r3, r4
   e2bee:	fb04 3312 	mls	r3, r4, r2, r3
   e2bf2:	b983      	cbnz	r3, e2c16 <iso_year_adjust+0x44>
   e2bf4:	2900      	cmp	r1, #0
   e2bf6:	f240 736c 	movw	r3, #1900	; 0x76c
   e2bfa:	bfa8      	it	ge
   e2bfc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e2c00:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2c04:	440b      	add	r3, r1
   e2c06:	fb93 f1f2 	sdiv	r1, r3, r2
   e2c0a:	fb02 3311 	mls	r3, r2, r1, r3
   e2c0e:	fab3 f283 	clz	r2, r3
   e2c12:	0952      	lsrs	r2, r2, #5
   e2c14:	e000      	b.n	e2c18 <iso_year_adjust+0x46>
   e2c16:	2201      	movs	r2, #1
   e2c18:	6983      	ldr	r3, [r0, #24]
   e2c1a:	69c1      	ldr	r1, [r0, #28]
   e2c1c:	005b      	lsls	r3, r3, #1
   e2c1e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e2c22:	4413      	add	r3, r2
   e2c24:	2b21      	cmp	r3, #33	; 0x21
   e2c26:	dc0e      	bgt.n	e2c46 <iso_year_adjust+0x74>
   e2c28:	2b20      	cmp	r3, #32
   e2c2a:	da2f      	bge.n	e2c8c <iso_year_adjust+0xba>
   e2c2c:	2b0d      	cmp	r3, #13
   e2c2e:	dc02      	bgt.n	e2c36 <iso_year_adjust+0x64>
   e2c30:	2b0a      	cmp	r3, #10
   e2c32:	db05      	blt.n	e2c40 <iso_year_adjust+0x6e>
   e2c34:	e02a      	b.n	e2c8c <iso_year_adjust+0xba>
   e2c36:	2b10      	cmp	r3, #16
   e2c38:	db26      	blt.n	e2c88 <iso_year_adjust+0xb6>
   e2c3a:	2b11      	cmp	r3, #17
   e2c3c:	dd26      	ble.n	e2c8c <iso_year_adjust+0xba>
   e2c3e:	3b1c      	subs	r3, #28
   e2c40:	2b01      	cmp	r3, #1
   e2c42:	d923      	bls.n	e2c8c <iso_year_adjust+0xba>
   e2c44:	e020      	b.n	e2c88 <iso_year_adjust+0xb6>
   e2c46:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e2c4a:	4293      	cmp	r3, r2
   e2c4c:	dc0e      	bgt.n	e2c6c <iso_year_adjust+0x9a>
   e2c4e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e2c52:	4293      	cmp	r3, r2
   e2c54:	da16      	bge.n	e2c84 <iso_year_adjust+0xb2>
   e2c56:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e2c5a:	4293      	cmp	r3, r2
   e2c5c:	d012      	beq.n	e2c84 <iso_year_adjust+0xb2>
   e2c5e:	db13      	blt.n	e2c88 <iso_year_adjust+0xb6>
   e2c60:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e2c64:	3b12      	subs	r3, #18
   e2c66:	2b02      	cmp	r3, #2
   e2c68:	d90c      	bls.n	e2c84 <iso_year_adjust+0xb2>
   e2c6a:	e00d      	b.n	e2c88 <iso_year_adjust+0xb6>
   e2c6c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e2c70:	4293      	cmp	r3, r2
   e2c72:	d007      	beq.n	e2c84 <iso_year_adjust+0xb2>
   e2c74:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e2c78:	4293      	cmp	r3, r2
   e2c7a:	d003      	beq.n	e2c84 <iso_year_adjust+0xb2>
   e2c7c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e2c80:	4293      	cmp	r3, r2
   e2c82:	d101      	bne.n	e2c88 <iso_year_adjust+0xb6>
   e2c84:	2001      	movs	r0, #1
   e2c86:	bd10      	pop	{r4, pc}
   e2c88:	2000      	movs	r0, #0
   e2c8a:	bd10      	pop	{r4, pc}
   e2c8c:	f04f 30ff 	mov.w	r0, #4294967295
   e2c90:	bd10      	pop	{r4, pc}
	...

000e2c94 <strftime>:
   e2c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2c98:	b093      	sub	sp, #76	; 0x4c
   e2c9a:	460e      	mov	r6, r1
   e2c9c:	461d      	mov	r5, r3
   e2c9e:	4607      	mov	r7, r0
   e2ca0:	4691      	mov	r9, r2
   e2ca2:	f001 fc19 	bl	e44d8 <__get_current_time_locale>
   e2ca6:	2300      	movs	r3, #0
   e2ca8:	9306      	str	r3, [sp, #24]
   e2caa:	461c      	mov	r4, r3
   e2cac:	1e73      	subs	r3, r6, #1
   e2cae:	9003      	str	r0, [sp, #12]
   e2cb0:	9302      	str	r3, [sp, #8]
   e2cb2:	f899 3000 	ldrb.w	r3, [r9]
   e2cb6:	2b00      	cmp	r3, #0
   e2cb8:	f000 8492 	beq.w	e35e0 <strftime+0x94c>
   e2cbc:	2b25      	cmp	r3, #37	; 0x25
   e2cbe:	d008      	beq.n	e2cd2 <strftime+0x3e>
   e2cc0:	9a02      	ldr	r2, [sp, #8]
   e2cc2:	4294      	cmp	r4, r2
   e2cc4:	f080 8490 	bcs.w	e35e8 <strftime+0x954>
   e2cc8:	553b      	strb	r3, [r7, r4]
   e2cca:	f109 0901 	add.w	r9, r9, #1
   e2cce:	3401      	adds	r4, #1
   e2cd0:	e7ef      	b.n	e2cb2 <strftime+0x1e>
   e2cd2:	f899 a001 	ldrb.w	sl, [r9, #1]
   e2cd6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e2cda:	d007      	beq.n	e2cec <strftime+0x58>
   e2cdc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e2ce0:	d004      	beq.n	e2cec <strftime+0x58>
   e2ce2:	f109 0901 	add.w	r9, r9, #1
   e2ce6:	f04f 0a00 	mov.w	sl, #0
   e2cea:	e001      	b.n	e2cf0 <strftime+0x5c>
   e2cec:	f109 0902 	add.w	r9, r9, #2
   e2cf0:	f899 3000 	ldrb.w	r3, [r9]
   e2cf4:	3b31      	subs	r3, #49	; 0x31
   e2cf6:	2b08      	cmp	r3, #8
   e2cf8:	d808      	bhi.n	e2d0c <strftime+0x78>
   e2cfa:	4648      	mov	r0, r9
   e2cfc:	220a      	movs	r2, #10
   e2cfe:	a90a      	add	r1, sp, #40	; 0x28
   e2d00:	f001 fbe0 	bl	e44c4 <strtoul>
   e2d04:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e2d08:	4680      	mov	r8, r0
   e2d0a:	e001      	b.n	e2d10 <strftime+0x7c>
   e2d0c:	f04f 0800 	mov.w	r8, #0
   e2d10:	f899 3000 	ldrb.w	r3, [r9]
   e2d14:	2b45      	cmp	r3, #69	; 0x45
   e2d16:	d001      	beq.n	e2d1c <strftime+0x88>
   e2d18:	2b4f      	cmp	r3, #79	; 0x4f
   e2d1a:	d101      	bne.n	e2d20 <strftime+0x8c>
   e2d1c:	f109 0901 	add.w	r9, r9, #1
   e2d20:	f899 0000 	ldrb.w	r0, [r9]
   e2d24:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e2d28:	2b55      	cmp	r3, #85	; 0x55
   e2d2a:	f200 845d 	bhi.w	e35e8 <strftime+0x954>
   e2d2e:	e8df f013 	tbh	[pc, r3, lsl #1]
   e2d32:	044a      	.short	0x044a
   e2d34:	045b045b 	.word	0x045b045b
   e2d38:	045b045b 	.word	0x045b045b
   e2d3c:	045b045b 	.word	0x045b045b
   e2d40:	045b045b 	.word	0x045b045b
   e2d44:	045b045b 	.word	0x045b045b
   e2d48:	045b045b 	.word	0x045b045b
   e2d4c:	045b045b 	.word	0x045b045b
   e2d50:	045b045b 	.word	0x045b045b
   e2d54:	045b045b 	.word	0x045b045b
   e2d58:	045b045b 	.word	0x045b045b
   e2d5c:	045b045b 	.word	0x045b045b
   e2d60:	045b045b 	.word	0x045b045b
   e2d64:	045b045b 	.word	0x045b045b
   e2d68:	006f045b 	.word	0x006f045b
   e2d6c:	00d400a1 	.word	0x00d400a1
   e2d70:	045b011a 	.word	0x045b011a
   e2d74:	01a0013f 	.word	0x01a0013f
   e2d78:	022d0226 	.word	0x022d0226
   e2d7c:	045b045b 	.word	0x045b045b
   e2d80:	0260045b 	.word	0x0260045b
   e2d84:	045b045b 	.word	0x045b045b
   e2d88:	045b0268 	.word	0x045b0268
   e2d8c:	031d0297 	.word	0x031d0297
   e2d90:	033b0325 	.word	0x033b0325
   e2d94:	03860343 	.word	0x03860343
   e2d98:	03a000c6 	.word	0x03a000c6
   e2d9c:	045b041f 	.word	0x045b041f
   e2da0:	045b045b 	.word	0x045b045b
   e2da4:	045b045b 	.word	0x045b045b
   e2da8:	0056045b 	.word	0x0056045b
   e2dac:	00ba0089 	.word	0x00ba0089
   e2db0:	010c010c 	.word	0x010c010c
   e2db4:	0171045b 	.word	0x0171045b
   e2db8:	045b0089 	.word	0x045b0089
   e2dbc:	0226023d 	.word	0x0226023d
   e2dc0:	025d022d 	.word	0x025d022d
   e2dc4:	045b0262 	.word	0x045b0262
   e2dc8:	045b0268 	.word	0x045b0268
   e2dcc:	029c00be 	.word	0x029c00be
   e2dd0:	032e031f 	.word	0x032e031f
   e2dd4:	037f045b 	.word	0x037f045b
   e2dd8:	039200c2 	.word	0x039200c2
   e2ddc:	03e7      	.short	0x03e7
   e2dde:	69ab      	ldr	r3, [r5, #24]
   e2de0:	9a03      	ldr	r2, [sp, #12]
   e2de2:	3318      	adds	r3, #24
   e2de4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2de8:	4640      	mov	r0, r8
   e2dea:	f000 fc07 	bl	e35fc <strlen>
   e2dee:	f108 38ff 	add.w	r8, r8, #4294967295
   e2df2:	193b      	adds	r3, r7, r4
   e2df4:	4420      	add	r0, r4
   e2df6:	4284      	cmp	r4, r0
   e2df8:	f000 83eb 	beq.w	e35d2 <strftime+0x93e>
   e2dfc:	9a02      	ldr	r2, [sp, #8]
   e2dfe:	4294      	cmp	r4, r2
   e2e00:	f080 83f2 	bcs.w	e35e8 <strftime+0x954>
   e2e04:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2e08:	f803 2b01 	strb.w	r2, [r3], #1
   e2e0c:	3401      	adds	r4, #1
   e2e0e:	e7f2      	b.n	e2df6 <strftime+0x162>
   e2e10:	69ab      	ldr	r3, [r5, #24]
   e2e12:	9a03      	ldr	r2, [sp, #12]
   e2e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e2e18:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e2e1c:	4640      	mov	r0, r8
   e2e1e:	f000 fbed 	bl	e35fc <strlen>
   e2e22:	f108 38ff 	add.w	r8, r8, #4294967295
   e2e26:	193b      	adds	r3, r7, r4
   e2e28:	4420      	add	r0, r4
   e2e2a:	4284      	cmp	r4, r0
   e2e2c:	f000 83d1 	beq.w	e35d2 <strftime+0x93e>
   e2e30:	9a02      	ldr	r2, [sp, #8]
   e2e32:	4294      	cmp	r4, r2
   e2e34:	f080 83d8 	bcs.w	e35e8 <strftime+0x954>
   e2e38:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2e3c:	f803 2b01 	strb.w	r2, [r3], #1
   e2e40:	3401      	adds	r4, #1
   e2e42:	e7f2      	b.n	e2e2a <strftime+0x196>
   e2e44:	692b      	ldr	r3, [r5, #16]
   e2e46:	9a03      	ldr	r2, [sp, #12]
   e2e48:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2e4c:	4640      	mov	r0, r8
   e2e4e:	f000 fbd5 	bl	e35fc <strlen>
   e2e52:	f108 38ff 	add.w	r8, r8, #4294967295
   e2e56:	193b      	adds	r3, r7, r4
   e2e58:	4420      	add	r0, r4
   e2e5a:	4284      	cmp	r4, r0
   e2e5c:	f000 83b9 	beq.w	e35d2 <strftime+0x93e>
   e2e60:	9a02      	ldr	r2, [sp, #8]
   e2e62:	4294      	cmp	r4, r2
   e2e64:	f080 83c0 	bcs.w	e35e8 <strftime+0x954>
   e2e68:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2e6c:	f803 2b01 	strb.w	r2, [r3], #1
   e2e70:	3401      	adds	r4, #1
   e2e72:	e7f2      	b.n	e2e5a <strftime+0x1c6>
   e2e74:	692b      	ldr	r3, [r5, #16]
   e2e76:	9a03      	ldr	r2, [sp, #12]
   e2e78:	330c      	adds	r3, #12
   e2e7a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e2e7e:	4640      	mov	r0, r8
   e2e80:	f000 fbbc 	bl	e35fc <strlen>
   e2e84:	f108 38ff 	add.w	r8, r8, #4294967295
   e2e88:	193b      	adds	r3, r7, r4
   e2e8a:	4420      	add	r0, r4
   e2e8c:	4284      	cmp	r4, r0
   e2e8e:	f000 83a0 	beq.w	e35d2 <strftime+0x93e>
   e2e92:	9a02      	ldr	r2, [sp, #8]
   e2e94:	4294      	cmp	r4, r2
   e2e96:	f080 83a7 	bcs.w	e35e8 <strftime+0x954>
   e2e9a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e2e9e:	f803 2b01 	strb.w	r2, [r3], #1
   e2ea2:	3401      	adds	r4, #1
   e2ea4:	e7f2      	b.n	e2e8c <strftime+0x1f8>
   e2ea6:	9b03      	ldr	r3, [sp, #12]
   e2ea8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e2eac:	e00a      	b.n	e2ec4 <strftime+0x230>
   e2eae:	9b03      	ldr	r3, [sp, #12]
   e2eb0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e2eb4:	e006      	b.n	e2ec4 <strftime+0x230>
   e2eb6:	9b03      	ldr	r3, [sp, #12]
   e2eb8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e2ebc:	e002      	b.n	e2ec4 <strftime+0x230>
   e2ebe:	9b03      	ldr	r3, [sp, #12]
   e2ec0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e2ec4:	4640      	mov	r0, r8
   e2ec6:	f000 fb99 	bl	e35fc <strlen>
   e2eca:	f898 3000 	ldrb.w	r3, [r8]
   e2ece:	2b00      	cmp	r3, #0
   e2ed0:	f000 837f 	beq.w	e35d2 <strftime+0x93e>
   e2ed4:	462b      	mov	r3, r5
   e2ed6:	4642      	mov	r2, r8
   e2ed8:	e093      	b.n	e3002 <strftime+0x36e>
   e2eda:	49b6      	ldr	r1, [pc, #728]	; (e31b4 <strftime+0x520>)
   e2edc:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e2ee0:	458b      	cmp	fp, r1
   e2ee2:	bfac      	ite	ge
   e2ee4:	2100      	movge	r1, #0
   e2ee6:	2101      	movlt	r1, #1
   e2ee8:	f1bb 0f00 	cmp.w	fp, #0
   e2eec:	db04      	blt.n	e2ef8 <strftime+0x264>
   e2eee:	2064      	movs	r0, #100	; 0x64
   e2ef0:	fb9b f0f0 	sdiv	r0, fp, r0
   e2ef4:	3013      	adds	r0, #19
   e2ef6:	e008      	b.n	e2f0a <strftime+0x276>
   e2ef8:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e2efc:	9107      	str	r1, [sp, #28]
   e2efe:	f001 fd37 	bl	e4970 <abs>
   e2f02:	9907      	ldr	r1, [sp, #28]
   e2f04:	2364      	movs	r3, #100	; 0x64
   e2f06:	fb90 f0f3 	sdiv	r0, r0, r3
   e2f0a:	f1ba 0f00 	cmp.w	sl, #0
   e2f0e:	d008      	beq.n	e2f22 <strftime+0x28e>
   e2f10:	2863      	cmp	r0, #99	; 0x63
   e2f12:	dd09      	ble.n	e2f28 <strftime+0x294>
   e2f14:	4ba8      	ldr	r3, [pc, #672]	; (e31b8 <strftime+0x524>)
   e2f16:	4aa9      	ldr	r2, [pc, #676]	; (e31bc <strftime+0x528>)
   e2f18:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e2f1c:	bf18      	it	ne
   e2f1e:	4613      	movne	r3, r2
   e2f20:	e003      	b.n	e2f2a <strftime+0x296>
   e2f22:	4ba6      	ldr	r3, [pc, #664]	; (e31bc <strftime+0x528>)
   e2f24:	4aa6      	ldr	r2, [pc, #664]	; (e31c0 <strftime+0x52c>)
   e2f26:	e001      	b.n	e2f2c <strftime+0x298>
   e2f28:	4ba4      	ldr	r3, [pc, #656]	; (e31bc <strftime+0x528>)
   e2f2a:	4aa6      	ldr	r2, [pc, #664]	; (e31c4 <strftime+0x530>)
   e2f2c:	9001      	str	r0, [sp, #4]
   e2f2e:	f1b8 0f01 	cmp.w	r8, #1
   e2f32:	bf98      	it	ls
   e2f34:	f04f 0802 	movls.w	r8, #2
   e2f38:	ebc1 0108 	rsb	r1, r1, r8
   e2f3c:	9100      	str	r1, [sp, #0]
   e2f3e:	489d      	ldr	r0, [pc, #628]	; (e31b4 <strftime+0x520>)
   e2f40:	49a1      	ldr	r1, [pc, #644]	; (e31c8 <strftime+0x534>)
   e2f42:	4583      	cmp	fp, r0
   e2f44:	bfb8      	it	lt
   e2f46:	460b      	movlt	r3, r1
   e2f48:	e21e      	b.n	e3388 <strftime+0x6f4>
   e2f4a:	4aa0      	ldr	r2, [pc, #640]	; (e31cc <strftime+0x538>)
   e2f4c:	49a0      	ldr	r1, [pc, #640]	; (e31d0 <strftime+0x53c>)
   e2f4e:	68eb      	ldr	r3, [r5, #12]
   e2f50:	2864      	cmp	r0, #100	; 0x64
   e2f52:	bf08      	it	eq
   e2f54:	460a      	moveq	r2, r1
   e2f56:	1b31      	subs	r1, r6, r4
   e2f58:	1938      	adds	r0, r7, r4
   e2f5a:	f7f6 fed9 	bl	d9d10 <sniprintf>
   e2f5e:	2800      	cmp	r0, #0
   e2f60:	f280 8302 	bge.w	e3568 <strftime+0x8d4>
   e2f64:	e340      	b.n	e35e8 <strftime+0x954>
   e2f66:	6968      	ldr	r0, [r5, #20]
   e2f68:	692b      	ldr	r3, [r5, #16]
   e2f6a:	2800      	cmp	r0, #0
   e2f6c:	f103 0b01 	add.w	fp, r3, #1
   e2f70:	eb07 0804 	add.w	r8, r7, r4
   e2f74:	ebc4 0a06 	rsb	sl, r4, r6
   e2f78:	68eb      	ldr	r3, [r5, #12]
   e2f7a:	db05      	blt.n	e2f88 <strftime+0x2f4>
   e2f7c:	2264      	movs	r2, #100	; 0x64
   e2f7e:	fb90 f1f2 	sdiv	r1, r0, r2
   e2f82:	fb02 0011 	mls	r0, r2, r1, r0
   e2f86:	e00a      	b.n	e2f9e <strftime+0x30a>
   e2f88:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2f8c:	9307      	str	r3, [sp, #28]
   e2f8e:	f001 fcef 	bl	e4970 <abs>
   e2f92:	2264      	movs	r2, #100	; 0x64
   e2f94:	9b07      	ldr	r3, [sp, #28]
   e2f96:	fb90 f1f2 	sdiv	r1, r0, r2
   e2f9a:	fb01 0012 	mls	r0, r1, r2, r0
   e2f9e:	4a8d      	ldr	r2, [pc, #564]	; (e31d4 <strftime+0x540>)
   e2fa0:	9001      	str	r0, [sp, #4]
   e2fa2:	9300      	str	r3, [sp, #0]
   e2fa4:	4651      	mov	r1, sl
   e2fa6:	465b      	mov	r3, fp
   e2fa8:	4640      	mov	r0, r8
   e2faa:	f7f6 feb1 	bl	d9d10 <sniprintf>
   e2fae:	e7d6      	b.n	e2f5e <strftime+0x2ca>
   e2fb0:	2325      	movs	r3, #37	; 0x25
   e2fb2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e2fb6:	f1ba 0f00 	cmp.w	sl, #0
   e2fba:	d007      	beq.n	e2fcc <strftime+0x338>
   e2fbc:	f1b8 0f05 	cmp.w	r8, #5
   e2fc0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e2fc4:	bf98      	it	ls
   e2fc6:	f04f 0806 	movls.w	r8, #6
   e2fca:	e004      	b.n	e2fd6 <strftime+0x342>
   e2fcc:	232b      	movs	r3, #43	; 0x2b
   e2fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e2fd2:	f04f 080a 	mov.w	r8, #10
   e2fd6:	f1b8 0306 	subs.w	r3, r8, #6
   e2fda:	d102      	bne.n	e2fe2 <strftime+0x34e>
   e2fdc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e2fe0:	e00a      	b.n	e2ff8 <strftime+0x364>
   e2fe2:	4a7d      	ldr	r2, [pc, #500]	; (e31d8 <strftime+0x544>)
   e2fe4:	211e      	movs	r1, #30
   e2fe6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e2fea:	f7f6 fe91 	bl	d9d10 <sniprintf>
   e2fee:	2800      	cmp	r0, #0
   e2ff0:	ddf4      	ble.n	e2fdc <strftime+0x348>
   e2ff2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e2ff6:	4418      	add	r0, r3
   e2ff8:	4978      	ldr	r1, [pc, #480]	; (e31dc <strftime+0x548>)
   e2ffa:	f7ff fdc7 	bl	e2b8c <strcpy>
   e2ffe:	462b      	mov	r3, r5
   e3000:	aa0a      	add	r2, sp, #40	; 0x28
   e3002:	1b31      	subs	r1, r6, r4
   e3004:	1938      	adds	r0, r7, r4
   e3006:	f7ff fe45 	bl	e2c94 <strftime>
   e300a:	2800      	cmp	r0, #0
   e300c:	f340 82ec 	ble.w	e35e8 <strftime+0x954>
   e3010:	4404      	add	r4, r0
   e3012:	e2de      	b.n	e35d2 <strftime+0x93e>
   e3014:	4628      	mov	r0, r5
   e3016:	f7ff fddc 	bl	e2bd2 <iso_year_adjust>
   e301a:	4680      	mov	r8, r0
   e301c:	6968      	ldr	r0, [r5, #20]
   e301e:	2800      	cmp	r0, #0
   e3020:	db05      	blt.n	e302e <strftime+0x39a>
   e3022:	2264      	movs	r2, #100	; 0x64
   e3024:	fb90 f1f2 	sdiv	r1, r0, r2
   e3028:	fb02 0011 	mls	r0, r2, r1, r0
   e302c:	e008      	b.n	e3040 <strftime+0x3ac>
   e302e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3032:	f001 fc9d 	bl	e4970 <abs>
   e3036:	2264      	movs	r2, #100	; 0x64
   e3038:	fb90 f3f2 	sdiv	r3, r0, r2
   e303c:	fb03 0012 	mls	r0, r3, r2, r0
   e3040:	f1b8 0f00 	cmp.w	r8, #0
   e3044:	da06      	bge.n	e3054 <strftime+0x3c0>
   e3046:	696a      	ldr	r2, [r5, #20]
   e3048:	4b65      	ldr	r3, [pc, #404]	; (e31e0 <strftime+0x54c>)
   e304a:	429a      	cmp	r2, r3
   e304c:	bfb8      	it	lt
   e304e:	f04f 0801 	movlt.w	r8, #1
   e3052:	e006      	b.n	e3062 <strftime+0x3ce>
   e3054:	d005      	beq.n	e3062 <strftime+0x3ce>
   e3056:	696a      	ldr	r2, [r5, #20]
   e3058:	4b56      	ldr	r3, [pc, #344]	; (e31b4 <strftime+0x520>)
   e305a:	429a      	cmp	r2, r3
   e305c:	bfb8      	it	lt
   e305e:	f04f 38ff 	movlt.w	r8, #4294967295
   e3062:	2364      	movs	r3, #100	; 0x64
   e3064:	4440      	add	r0, r8
   e3066:	fb90 f2f3 	sdiv	r2, r0, r3
   e306a:	fb03 0012 	mls	r0, r3, r2, r0
   e306e:	4418      	add	r0, r3
   e3070:	e1f9      	b.n	e3466 <strftime+0x7d2>
   e3072:	4b50      	ldr	r3, [pc, #320]	; (e31b4 <strftime+0x520>)
   e3074:	6969      	ldr	r1, [r5, #20]
   e3076:	9108      	str	r1, [sp, #32]
   e3078:	4299      	cmp	r1, r3
   e307a:	bfac      	ite	ge
   e307c:	2300      	movge	r3, #0
   e307e:	2301      	movlt	r3, #1
   e3080:	4628      	mov	r0, r5
   e3082:	9307      	str	r3, [sp, #28]
   e3084:	f7ff fda5 	bl	e2bd2 <iso_year_adjust>
   e3088:	9908      	ldr	r1, [sp, #32]
   e308a:	2900      	cmp	r1, #0
   e308c:	4683      	mov	fp, r0
   e308e:	db04      	blt.n	e309a <strftime+0x406>
   e3090:	2364      	movs	r3, #100	; 0x64
   e3092:	fb91 f3f3 	sdiv	r3, r1, r3
   e3096:	3313      	adds	r3, #19
   e3098:	e008      	b.n	e30ac <strftime+0x418>
   e309a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e309e:	9108      	str	r1, [sp, #32]
   e30a0:	f001 fc66 	bl	e4970 <abs>
   e30a4:	9908      	ldr	r1, [sp, #32]
   e30a6:	2364      	movs	r3, #100	; 0x64
   e30a8:	fb90 f3f3 	sdiv	r3, r0, r3
   e30ac:	6968      	ldr	r0, [r5, #20]
   e30ae:	2800      	cmp	r0, #0
   e30b0:	db06      	blt.n	e30c0 <strftime+0x42c>
   e30b2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e30b6:	fb90 fcfe 	sdiv	ip, r0, lr
   e30ba:	fb0e 001c 	mls	r0, lr, ip, r0
   e30be:	e00d      	b.n	e30dc <strftime+0x448>
   e30c0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e30c4:	9109      	str	r1, [sp, #36]	; 0x24
   e30c6:	9308      	str	r3, [sp, #32]
   e30c8:	f001 fc52 	bl	e4970 <abs>
   e30cc:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e30d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   e30d2:	9b08      	ldr	r3, [sp, #32]
   e30d4:	fb90 fcfe 	sdiv	ip, r0, lr
   e30d8:	fb0c 001e 	mls	r0, ip, lr, r0
   e30dc:	f1bb 0f00 	cmp.w	fp, #0
   e30e0:	da08      	bge.n	e30f4 <strftime+0x460>
   e30e2:	6969      	ldr	r1, [r5, #20]
   e30e4:	4a3e      	ldr	r2, [pc, #248]	; (e31e0 <strftime+0x54c>)
   e30e6:	4291      	cmp	r1, r2
   e30e8:	da0a      	bge.n	e3100 <strftime+0x46c>
   e30ea:	f04f 0b01 	mov.w	fp, #1
   e30ee:	f8cd b01c 	str.w	fp, [sp, #28]
   e30f2:	e005      	b.n	e3100 <strftime+0x46c>
   e30f4:	d004      	beq.n	e3100 <strftime+0x46c>
   e30f6:	4a2f      	ldr	r2, [pc, #188]	; (e31b4 <strftime+0x520>)
   e30f8:	4291      	cmp	r1, r2
   e30fa:	bfb8      	it	lt
   e30fc:	f04f 3bff 	movlt.w	fp, #4294967295
   e3100:	eb0b 0200 	add.w	r2, fp, r0
   e3104:	1c50      	adds	r0, r2, #1
   e3106:	d102      	bne.n	e310e <strftime+0x47a>
   e3108:	3b01      	subs	r3, #1
   e310a:	2263      	movs	r2, #99	; 0x63
   e310c:	e003      	b.n	e3116 <strftime+0x482>
   e310e:	2a64      	cmp	r2, #100	; 0x64
   e3110:	bf04      	itt	eq
   e3112:	3301      	addeq	r3, #1
   e3114:	2200      	moveq	r2, #0
   e3116:	2064      	movs	r0, #100	; 0x64
   e3118:	fb00 2303 	mla	r3, r0, r3, r2
   e311c:	9a07      	ldr	r2, [sp, #28]
   e311e:	b142      	cbz	r2, e3132 <strftime+0x49e>
   e3120:	222d      	movs	r2, #45	; 0x2d
   e3122:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e3126:	f1b8 0f00 	cmp.w	r8, #0
   e312a:	d013      	beq.n	e3154 <strftime+0x4c0>
   e312c:	f108 38ff 	add.w	r8, r8, #4294967295
   e3130:	e010      	b.n	e3154 <strftime+0x4c0>
   e3132:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e3136:	d110      	bne.n	e315a <strftime+0x4c6>
   e3138:	f242 720f 	movw	r2, #9999	; 0x270f
   e313c:	4293      	cmp	r3, r2
   e313e:	d90c      	bls.n	e315a <strftime+0x4c6>
   e3140:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e3144:	f1b8 0f00 	cmp.w	r8, #0
   e3148:	d1f0      	bne.n	e312c <strftime+0x498>
   e314a:	aa12      	add	r2, sp, #72	; 0x48
   e314c:	2125      	movs	r1, #37	; 0x25
   e314e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e3152:	e00a      	b.n	e316a <strftime+0x4d6>
   e3154:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e3158:	e000      	b.n	e315c <strftime+0x4c8>
   e315a:	aa0a      	add	r2, sp, #40	; 0x28
   e315c:	2125      	movs	r1, #37	; 0x25
   e315e:	7011      	strb	r1, [r2, #0]
   e3160:	f1ba 0f00 	cmp.w	sl, #0
   e3164:	d101      	bne.n	e316a <strftime+0x4d6>
   e3166:	1c50      	adds	r0, r2, #1
   e3168:	e002      	b.n	e3170 <strftime+0x4dc>
   e316a:	2130      	movs	r1, #48	; 0x30
   e316c:	1c90      	adds	r0, r2, #2
   e316e:	7051      	strb	r1, [r2, #1]
   e3170:	491c      	ldr	r1, [pc, #112]	; (e31e4 <strftime+0x550>)
   e3172:	9307      	str	r3, [sp, #28]
   e3174:	f7ff fd0a 	bl	e2b8c <strcpy>
   e3178:	9b07      	ldr	r3, [sp, #28]
   e317a:	9300      	str	r3, [sp, #0]
   e317c:	e1ad      	b.n	e34da <strftime+0x846>
   e317e:	4a14      	ldr	r2, [pc, #80]	; (e31d0 <strftime+0x53c>)
   e3180:	4912      	ldr	r1, [pc, #72]	; (e31cc <strftime+0x538>)
   e3182:	68ab      	ldr	r3, [r5, #8]
   e3184:	286b      	cmp	r0, #107	; 0x6b
   e3186:	bf08      	it	eq
   e3188:	460a      	moveq	r2, r1
   e318a:	e6e4      	b.n	e2f56 <strftime+0x2c2>
   e318c:	68a9      	ldr	r1, [r5, #8]
   e318e:	230c      	movs	r3, #12
   e3190:	b131      	cbz	r1, e31a0 <strftime+0x50c>
   e3192:	4299      	cmp	r1, r3
   e3194:	bf0e      	itee	eq
   e3196:	460b      	moveq	r3, r1
   e3198:	fb91 f2f3 	sdivne	r2, r1, r3
   e319c:	fb03 1312 	mlsne	r3, r3, r2, r1
   e31a0:	4a0a      	ldr	r2, [pc, #40]	; (e31cc <strftime+0x538>)
   e31a2:	490b      	ldr	r1, [pc, #44]	; (e31d0 <strftime+0x53c>)
   e31a4:	2849      	cmp	r0, #73	; 0x49
   e31a6:	bf08      	it	eq
   e31a8:	460a      	moveq	r2, r1
   e31aa:	e6d4      	b.n	e2f56 <strftime+0x2c2>
   e31ac:	69eb      	ldr	r3, [r5, #28]
   e31ae:	4a0e      	ldr	r2, [pc, #56]	; (e31e8 <strftime+0x554>)
   e31b0:	3301      	adds	r3, #1
   e31b2:	e6d0      	b.n	e2f56 <strftime+0x2c2>
   e31b4:	fffff894 	.word	0xfffff894
   e31b8:	000e7313 	.word	0x000e7313
   e31bc:	000e5ce1 	.word	0x000e5ce1
   e31c0:	000e7304 	.word	0x000e7304
   e31c4:	000e730b 	.word	0x000e730b
   e31c8:	000e61f3 	.word	0x000e61f3
   e31cc:	000e7315 	.word	0x000e7315
   e31d0:	000e7323 	.word	0x000e7323
   e31d4:	000e7319 	.word	0x000e7319
   e31d8:	000e7328 	.word	0x000e7328
   e31dc:	000e732c 	.word	0x000e732c
   e31e0:	fffff895 	.word	0xfffff895
   e31e4:	000e7334 	.word	0x000e7334
   e31e8:	000e7338 	.word	0x000e7338
   e31ec:	692b      	ldr	r3, [r5, #16]
   e31ee:	3301      	adds	r3, #1
   e31f0:	e13d      	b.n	e346e <strftime+0x7da>
   e31f2:	686b      	ldr	r3, [r5, #4]
   e31f4:	e13b      	b.n	e346e <strftime+0x7da>
   e31f6:	9b02      	ldr	r3, [sp, #8]
   e31f8:	429c      	cmp	r4, r3
   e31fa:	f080 81f5 	bcs.w	e35e8 <strftime+0x954>
   e31fe:	230a      	movs	r3, #10
   e3200:	e1e5      	b.n	e35ce <strftime+0x93a>
   e3202:	68ab      	ldr	r3, [r5, #8]
   e3204:	9a03      	ldr	r2, [sp, #12]
   e3206:	2b0b      	cmp	r3, #11
   e3208:	bfcc      	ite	gt
   e320a:	23a4      	movgt	r3, #164	; 0xa4
   e320c:	23a0      	movle	r3, #160	; 0xa0
   e320e:	4413      	add	r3, r2
   e3210:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e3214:	4640      	mov	r0, r8
   e3216:	f000 f9f1 	bl	e35fc <strlen>
   e321a:	4bb2      	ldr	r3, [pc, #712]	; (e34e4 <strftime+0x850>)
   e321c:	f8d3 e000 	ldr.w	lr, [r3]
   e3220:	1939      	adds	r1, r7, r4
   e3222:	4642      	mov	r2, r8
   e3224:	4420      	add	r0, r4
   e3226:	4284      	cmp	r4, r0
   e3228:	f000 81d3 	beq.w	e35d2 <strftime+0x93e>
   e322c:	9b02      	ldr	r3, [sp, #8]
   e322e:	429c      	cmp	r4, r3
   e3230:	f080 81da 	bcs.w	e35e8 <strftime+0x954>
   e3234:	f899 3000 	ldrb.w	r3, [r9]
   e3238:	2b50      	cmp	r3, #80	; 0x50
   e323a:	f104 0401 	add.w	r4, r4, #1
   e323e:	7813      	ldrb	r3, [r2, #0]
   e3240:	d10a      	bne.n	e3258 <strftime+0x5c4>
   e3242:	eb0e 0c03 	add.w	ip, lr, r3
   e3246:	f89c c001 	ldrb.w	ip, [ip, #1]
   e324a:	f00c 0c03 	and.w	ip, ip, #3
   e324e:	f1bc 0f01 	cmp.w	ip, #1
   e3252:	bf08      	it	eq
   e3254:	3320      	addeq	r3, #32
   e3256:	b2db      	uxtb	r3, r3
   e3258:	f801 3b01 	strb.w	r3, [r1], #1
   e325c:	3201      	adds	r2, #1
   e325e:	e7e2      	b.n	e3226 <strftime+0x592>
   e3260:	686b      	ldr	r3, [r5, #4]
   e3262:	9300      	str	r3, [sp, #0]
   e3264:	4aa0      	ldr	r2, [pc, #640]	; (e34e8 <strftime+0x854>)
   e3266:	68ab      	ldr	r3, [r5, #8]
   e3268:	e139      	b.n	e34de <strftime+0x84a>
   e326a:	6a2b      	ldr	r3, [r5, #32]
   e326c:	2b00      	cmp	r3, #0
   e326e:	db17      	blt.n	e32a0 <strftime+0x60c>
   e3270:	f001 f9f6 	bl	e4660 <__tz_lock>
   e3274:	9b06      	ldr	r3, [sp, #24]
   e3276:	b91b      	cbnz	r3, e3280 <strftime+0x5ec>
   e3278:	f001 f9f4 	bl	e4664 <_tzset_unlocked>
   e327c:	2301      	movs	r3, #1
   e327e:	9306      	str	r3, [sp, #24]
   e3280:	f001 fef0 	bl	e5064 <__gettzinfo>
   e3284:	6a2b      	ldr	r3, [r5, #32]
   e3286:	2b00      	cmp	r3, #0
   e3288:	bfd4      	ite	le
   e328a:	2300      	movle	r3, #0
   e328c:	2301      	movgt	r3, #1
   e328e:	221c      	movs	r2, #28
   e3290:	fb02 0003 	mla	r0, r2, r3, r0
   e3294:	6a03      	ldr	r3, [r0, #32]
   e3296:	f1c3 0800 	rsb	r8, r3, #0
   e329a:	f001 f9e2 	bl	e4662 <__tz_unlock>
   e329e:	e001      	b.n	e32a4 <strftime+0x610>
   e32a0:	f04f 0800 	mov.w	r8, #0
   e32a4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e32a8:	4670      	mov	r0, lr
   e32aa:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e32ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e32b2:	f141 33ff 	adc.w	r3, r1, #4294967295
   e32b6:	2a00      	cmp	r2, #0
   e32b8:	f173 0b00 	sbcs.w	fp, r3, #0
   e32bc:	ebc4 0c06 	rsb	ip, r4, r6
   e32c0:	eb07 0a04 	add.w	sl, r7, r4
   e32c4:	da03      	bge.n	e32ce <strftime+0x63a>
   e32c6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e32ca:	f141 33ff 	adc.w	r3, r1, #4294967295
   e32ce:	0891      	lsrs	r1, r2, #2
   e32d0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e32d4:	109b      	asrs	r3, r3, #2
   e32d6:	9104      	str	r1, [sp, #16]
   e32d8:	9305      	str	r3, [sp, #20]
   e32da:	f10e 31ff 	add.w	r1, lr, #4294967295
   e32de:	2364      	movs	r3, #100	; 0x64
   e32e0:	fb91 f1f3 	sdiv	r1, r1, r3
   e32e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e32e8:	1a52      	subs	r2, r2, r1
   e32ea:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e32ee:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e32f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e32f6:	fb90 f1f1 	sdiv	r1, r0, r1
   e32fa:	1852      	adds	r2, r2, r1
   e32fc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e3300:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e3304:	f240 116d 	movw	r1, #365	; 0x16d
   e3308:	fb01 fe0e 	mul.w	lr, r1, lr
   e330c:	69e9      	ldr	r1, [r5, #28]
   e330e:	eb12 020e 	adds.w	r2, r2, lr
   e3312:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e3316:	1852      	adds	r2, r2, r1
   e3318:	f04f 0e18 	mov.w	lr, #24
   e331c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e3320:	fba2 010e 	umull	r0, r1, r2, lr
   e3324:	fb0e 1103 	mla	r1, lr, r3, r1
   e3328:	68ab      	ldr	r3, [r5, #8]
   e332a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e332e:	18c0      	adds	r0, r0, r3
   e3330:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e3334:	fba0 230e 	umull	r2, r3, r0, lr
   e3338:	fb0e 3301 	mla	r3, lr, r1, r3
   e333c:	6869      	ldr	r1, [r5, #4]
   e333e:	1852      	adds	r2, r2, r1
   e3340:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e3344:	fba2 010e 	umull	r0, r1, r2, lr
   e3348:	fb0e 1103 	mla	r1, lr, r3, r1
   e334c:	682b      	ldr	r3, [r5, #0]
   e334e:	4a67      	ldr	r2, [pc, #412]	; (e34ec <strftime+0x858>)
   e3350:	18c0      	adds	r0, r0, r3
   e3352:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e3356:	ebb0 0008 	subs.w	r0, r0, r8
   e335a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e335e:	e9cd 0100 	strd	r0, r1, [sp]
   e3362:	4661      	mov	r1, ip
   e3364:	4650      	mov	r0, sl
   e3366:	f7f6 fcd3 	bl	d9d10 <sniprintf>
   e336a:	e5f8      	b.n	e2f5e <strftime+0x2ca>
   e336c:	682b      	ldr	r3, [r5, #0]
   e336e:	e07e      	b.n	e346e <strftime+0x7da>
   e3370:	9b02      	ldr	r3, [sp, #8]
   e3372:	429c      	cmp	r4, r3
   e3374:	f080 8138 	bcs.w	e35e8 <strftime+0x954>
   e3378:	2309      	movs	r3, #9
   e337a:	e128      	b.n	e35ce <strftime+0x93a>
   e337c:	682b      	ldr	r3, [r5, #0]
   e337e:	9301      	str	r3, [sp, #4]
   e3380:	686b      	ldr	r3, [r5, #4]
   e3382:	9300      	str	r3, [sp, #0]
   e3384:	4a5a      	ldr	r2, [pc, #360]	; (e34f0 <strftime+0x85c>)
   e3386:	68ab      	ldr	r3, [r5, #8]
   e3388:	1b31      	subs	r1, r6, r4
   e338a:	1938      	adds	r0, r7, r4
   e338c:	e60d      	b.n	e2faa <strftime+0x316>
   e338e:	9b02      	ldr	r3, [sp, #8]
   e3390:	429c      	cmp	r4, r3
   e3392:	f080 8129 	bcs.w	e35e8 <strftime+0x954>
   e3396:	69ab      	ldr	r3, [r5, #24]
   e3398:	1c62      	adds	r2, r4, #1
   e339a:	b90b      	cbnz	r3, e33a0 <strftime+0x70c>
   e339c:	2337      	movs	r3, #55	; 0x37
   e339e:	e000      	b.n	e33a2 <strftime+0x70e>
   e33a0:	3330      	adds	r3, #48	; 0x30
   e33a2:	553b      	strb	r3, [r7, r4]
   e33a4:	4614      	mov	r4, r2
   e33a6:	e114      	b.n	e35d2 <strftime+0x93e>
   e33a8:	69eb      	ldr	r3, [r5, #28]
   e33aa:	69aa      	ldr	r2, [r5, #24]
   e33ac:	3307      	adds	r3, #7
   e33ae:	1a9b      	subs	r3, r3, r2
   e33b0:	2207      	movs	r2, #7
   e33b2:	fb93 f3f2 	sdiv	r3, r3, r2
   e33b6:	e05a      	b.n	e346e <strftime+0x7da>
   e33b8:	4628      	mov	r0, r5
   e33ba:	f7ff fc0a 	bl	e2bd2 <iso_year_adjust>
   e33be:	69aa      	ldr	r2, [r5, #24]
   e33c0:	b10a      	cbz	r2, e33c6 <strftime+0x732>
   e33c2:	1e53      	subs	r3, r2, #1
   e33c4:	e000      	b.n	e33c8 <strftime+0x734>
   e33c6:	2306      	movs	r3, #6
   e33c8:	2800      	cmp	r0, #0
   e33ca:	dc2f      	bgt.n	e342c <strftime+0x798>
   e33cc:	69ea      	ldr	r2, [r5, #28]
   e33ce:	d101      	bne.n	e33d4 <strftime+0x740>
   e33d0:	320a      	adds	r2, #10
   e33d2:	e03b      	b.n	e344c <strftime+0x7b8>
   e33d4:	1a9a      	subs	r2, r3, r2
   e33d6:	696b      	ldr	r3, [r5, #20]
   e33d8:	f240 716b 	movw	r1, #1899	; 0x76b
   e33dc:	2b00      	cmp	r3, #0
   e33de:	bfb4      	ite	lt
   e33e0:	4608      	movlt	r0, r1
   e33e2:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e33e6:	4418      	add	r0, r3
   e33e8:	0781      	lsls	r1, r0, #30
   e33ea:	d107      	bne.n	e33fc <strftime+0x768>
   e33ec:	4601      	mov	r1, r0
   e33ee:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e33f2:	fb90 f0fe 	sdiv	r0, r0, lr
   e33f6:	fb0e 1110 	mls	r1, lr, r0, r1
   e33fa:	b981      	cbnz	r1, e341e <strftime+0x78a>
   e33fc:	2b00      	cmp	r3, #0
   e33fe:	f240 716b 	movw	r1, #1899	; 0x76b
   e3402:	bfa8      	it	ge
   e3404:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e3408:	4419      	add	r1, r3
   e340a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e340e:	fb91 f0f3 	sdiv	r0, r1, r3
   e3412:	fb03 1110 	mls	r1, r3, r0, r1
   e3416:	fab1 f181 	clz	r1, r1
   e341a:	0949      	lsrs	r1, r1, #5
   e341c:	e000      	b.n	e3420 <strftime+0x78c>
   e341e:	2101      	movs	r1, #1
   e3420:	1a52      	subs	r2, r2, r1
   e3422:	2a05      	cmp	r2, #5
   e3424:	bfb4      	ite	lt
   e3426:	2335      	movlt	r3, #53	; 0x35
   e3428:	2334      	movge	r3, #52	; 0x34
   e342a:	e020      	b.n	e346e <strftime+0x7da>
   e342c:	2301      	movs	r3, #1
   e342e:	e01e      	b.n	e346e <strftime+0x7da>
   e3430:	9b02      	ldr	r3, [sp, #8]
   e3432:	429c      	cmp	r4, r3
   e3434:	f080 80d8 	bcs.w	e35e8 <strftime+0x954>
   e3438:	69ab      	ldr	r3, [r5, #24]
   e343a:	3330      	adds	r3, #48	; 0x30
   e343c:	e0c7      	b.n	e35ce <strftime+0x93a>
   e343e:	69aa      	ldr	r2, [r5, #24]
   e3440:	b10a      	cbz	r2, e3446 <strftime+0x7b2>
   e3442:	1e53      	subs	r3, r2, #1
   e3444:	e000      	b.n	e3448 <strftime+0x7b4>
   e3446:	2306      	movs	r3, #6
   e3448:	69ea      	ldr	r2, [r5, #28]
   e344a:	3207      	adds	r2, #7
   e344c:	1ad2      	subs	r2, r2, r3
   e344e:	2307      	movs	r3, #7
   e3450:	fb92 f3f3 	sdiv	r3, r2, r3
   e3454:	e00b      	b.n	e346e <strftime+0x7da>
   e3456:	6968      	ldr	r0, [r5, #20]
   e3458:	2800      	cmp	r0, #0
   e345a:	da03      	bge.n	e3464 <strftime+0x7d0>
   e345c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e3460:	f001 fa86 	bl	e4970 <abs>
   e3464:	2364      	movs	r3, #100	; 0x64
   e3466:	fb90 f2f3 	sdiv	r2, r0, r3
   e346a:	fb02 0313 	mls	r3, r2, r3, r0
   e346e:	4a21      	ldr	r2, [pc, #132]	; (e34f4 <strftime+0x860>)
   e3470:	e571      	b.n	e2f56 <strftime+0x2c2>
   e3472:	696b      	ldr	r3, [r5, #20]
   e3474:	4a20      	ldr	r2, [pc, #128]	; (e34f8 <strftime+0x864>)
   e3476:	4293      	cmp	r3, r2
   e3478:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e347c:	da05      	bge.n	e348a <strftime+0x7f6>
   e347e:	232d      	movs	r3, #45	; 0x2d
   e3480:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e3484:	f1cb 0b00 	rsb	fp, fp, #0
   e3488:	e008      	b.n	e349c <strftime+0x808>
   e348a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e348e:	d10d      	bne.n	e34ac <strftime+0x818>
   e3490:	f242 730f 	movw	r3, #9999	; 0x270f
   e3494:	459b      	cmp	fp, r3
   e3496:	d911      	bls.n	e34bc <strftime+0x828>
   e3498:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e349c:	f1b8 0f00 	cmp.w	r8, #0
   e34a0:	d001      	beq.n	e34a6 <strftime+0x812>
   e34a2:	f108 38ff 	add.w	r8, r8, #4294967295
   e34a6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e34aa:	e000      	b.n	e34ae <strftime+0x81a>
   e34ac:	ab0a      	add	r3, sp, #40	; 0x28
   e34ae:	2225      	movs	r2, #37	; 0x25
   e34b0:	701a      	strb	r2, [r3, #0]
   e34b2:	f1ba 0f00 	cmp.w	sl, #0
   e34b6:	d108      	bne.n	e34ca <strftime+0x836>
   e34b8:	1c58      	adds	r0, r3, #1
   e34ba:	e009      	b.n	e34d0 <strftime+0x83c>
   e34bc:	f1b8 0f00 	cmp.w	r8, #0
   e34c0:	d1f4      	bne.n	e34ac <strftime+0x818>
   e34c2:	2325      	movs	r3, #37	; 0x25
   e34c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e34c8:	ab0a      	add	r3, sp, #40	; 0x28
   e34ca:	2230      	movs	r2, #48	; 0x30
   e34cc:	1c98      	adds	r0, r3, #2
   e34ce:	705a      	strb	r2, [r3, #1]
   e34d0:	490a      	ldr	r1, [pc, #40]	; (e34fc <strftime+0x868>)
   e34d2:	f7ff fb5b 	bl	e2b8c <strcpy>
   e34d6:	f8cd b000 	str.w	fp, [sp]
   e34da:	4643      	mov	r3, r8
   e34dc:	aa0a      	add	r2, sp, #40	; 0x28
   e34de:	1b31      	subs	r1, r6, r4
   e34e0:	1938      	adds	r0, r7, r4
   e34e2:	e03e      	b.n	e3562 <strftime+0x8ce>
   e34e4:	2003d638 	.word	0x2003d638
   e34e8:	000e7347 	.word	0x000e7347
   e34ec:	000e733d 	.word	0x000e733d
   e34f0:	000e7342 	.word	0x000e7342
   e34f4:	000e7323 	.word	0x000e7323
   e34f8:	fffff894 	.word	0xfffff894
   e34fc:	000e7334 	.word	0x000e7334
   e3500:	6a2b      	ldr	r3, [r5, #32]
   e3502:	2b00      	cmp	r3, #0
   e3504:	db65      	blt.n	e35d2 <strftime+0x93e>
   e3506:	f001 f8ab 	bl	e4660 <__tz_lock>
   e350a:	9b06      	ldr	r3, [sp, #24]
   e350c:	b91b      	cbnz	r3, e3516 <strftime+0x882>
   e350e:	f001 f8a9 	bl	e4664 <_tzset_unlocked>
   e3512:	2301      	movs	r3, #1
   e3514:	9306      	str	r3, [sp, #24]
   e3516:	f001 fda5 	bl	e5064 <__gettzinfo>
   e351a:	6a2b      	ldr	r3, [r5, #32]
   e351c:	2b00      	cmp	r3, #0
   e351e:	bfd4      	ite	le
   e3520:	2300      	movle	r3, #0
   e3522:	2301      	movgt	r3, #1
   e3524:	221c      	movs	r2, #28
   e3526:	fb02 0003 	mla	r0, r2, r3, r0
   e352a:	eb07 0a04 	add.w	sl, r7, r4
   e352e:	6a03      	ldr	r3, [r0, #32]
   e3530:	f1c3 0800 	rsb	r8, r3, #0
   e3534:	f001 f895 	bl	e4662 <__tz_unlock>
   e3538:	233c      	movs	r3, #60	; 0x3c
   e353a:	fb98 f0f3 	sdiv	r0, r8, r3
   e353e:	9307      	str	r3, [sp, #28]
   e3540:	f001 fe2c 	bl	e519c <labs>
   e3544:	9b07      	ldr	r3, [sp, #28]
   e3546:	fb90 f2f3 	sdiv	r2, r0, r3
   e354a:	ebc4 0b06 	rsb	fp, r4, r6
   e354e:	fb02 0013 	mls	r0, r2, r3, r0
   e3552:	4a28      	ldr	r2, [pc, #160]	; (e35f4 <strftime+0x960>)
   e3554:	9000      	str	r0, [sp, #0]
   e3556:	4659      	mov	r1, fp
   e3558:	4650      	mov	r0, sl
   e355a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e355e:	fb98 f3f3 	sdiv	r3, r8, r3
   e3562:	f7f6 fbd5 	bl	d9d10 <sniprintf>
   e3566:	e4fa      	b.n	e2f5e <strftime+0x2ca>
   e3568:	4404      	add	r4, r0
   e356a:	42a6      	cmp	r6, r4
   e356c:	d831      	bhi.n	e35d2 <strftime+0x93e>
   e356e:	e03b      	b.n	e35e8 <strftime+0x954>
   e3570:	6a2b      	ldr	r3, [r5, #32]
   e3572:	2b00      	cmp	r3, #0
   e3574:	db2d      	blt.n	e35d2 <strftime+0x93e>
   e3576:	f001 f873 	bl	e4660 <__tz_lock>
   e357a:	9b06      	ldr	r3, [sp, #24]
   e357c:	b91b      	cbnz	r3, e3586 <strftime+0x8f2>
   e357e:	f001 f871 	bl	e4664 <_tzset_unlocked>
   e3582:	2301      	movs	r3, #1
   e3584:	9306      	str	r3, [sp, #24]
   e3586:	6a2b      	ldr	r3, [r5, #32]
   e3588:	4a1b      	ldr	r2, [pc, #108]	; (e35f8 <strftime+0x964>)
   e358a:	2b00      	cmp	r3, #0
   e358c:	bfd4      	ite	le
   e358e:	2300      	movle	r3, #0
   e3590:	2301      	movgt	r3, #1
   e3592:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e3596:	4640      	mov	r0, r8
   e3598:	f000 f830 	bl	e35fc <strlen>
   e359c:	f108 38ff 	add.w	r8, r8, #4294967295
   e35a0:	193b      	adds	r3, r7, r4
   e35a2:	4420      	add	r0, r4
   e35a4:	4284      	cmp	r4, r0
   e35a6:	d00b      	beq.n	e35c0 <strftime+0x92c>
   e35a8:	9a02      	ldr	r2, [sp, #8]
   e35aa:	4294      	cmp	r4, r2
   e35ac:	d205      	bcs.n	e35ba <strftime+0x926>
   e35ae:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e35b2:	f803 2b01 	strb.w	r2, [r3], #1
   e35b6:	3401      	adds	r4, #1
   e35b8:	e7f4      	b.n	e35a4 <strftime+0x910>
   e35ba:	f001 f852 	bl	e4662 <__tz_unlock>
   e35be:	e013      	b.n	e35e8 <strftime+0x954>
   e35c0:	f001 f84f 	bl	e4662 <__tz_unlock>
   e35c4:	e005      	b.n	e35d2 <strftime+0x93e>
   e35c6:	9b02      	ldr	r3, [sp, #8]
   e35c8:	429c      	cmp	r4, r3
   e35ca:	d20d      	bcs.n	e35e8 <strftime+0x954>
   e35cc:	2325      	movs	r3, #37	; 0x25
   e35ce:	553b      	strb	r3, [r7, r4]
   e35d0:	3401      	adds	r4, #1
   e35d2:	f899 3000 	ldrb.w	r3, [r9]
   e35d6:	b11b      	cbz	r3, e35e0 <strftime+0x94c>
   e35d8:	f109 0901 	add.w	r9, r9, #1
   e35dc:	f7ff bb69 	b.w	e2cb2 <strftime+0x1e>
   e35e0:	b126      	cbz	r6, e35ec <strftime+0x958>
   e35e2:	2300      	movs	r3, #0
   e35e4:	553b      	strb	r3, [r7, r4]
   e35e6:	e001      	b.n	e35ec <strftime+0x958>
   e35e8:	2000      	movs	r0, #0
   e35ea:	e000      	b.n	e35ee <strftime+0x95a>
   e35ec:	4620      	mov	r0, r4
   e35ee:	b013      	add	sp, #76	; 0x4c
   e35f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e35f4:	000e7351 	.word	0x000e7351
   e35f8:	2003d6d8 	.word	0x2003d6d8

000e35fc <strlen>:
   e35fc:	4603      	mov	r3, r0
   e35fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   e3602:	2a00      	cmp	r2, #0
   e3604:	d1fb      	bne.n	e35fe <strlen+0x2>
   e3606:	1a18      	subs	r0, r3, r0
   e3608:	3801      	subs	r0, #1
   e360a:	4770      	bx	lr

000e360c <strncmp>:
   e360c:	b530      	push	{r4, r5, lr}
   e360e:	b182      	cbz	r2, e3632 <strncmp+0x26>
   e3610:	1e45      	subs	r5, r0, #1
   e3612:	3901      	subs	r1, #1
   e3614:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e3618:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e361c:	42a3      	cmp	r3, r4
   e361e:	d106      	bne.n	e362e <strncmp+0x22>
   e3620:	43ec      	mvns	r4, r5
   e3622:	4414      	add	r4, r2
   e3624:	42e0      	cmn	r0, r4
   e3626:	d001      	beq.n	e362c <strncmp+0x20>
   e3628:	2b00      	cmp	r3, #0
   e362a:	d1f3      	bne.n	e3614 <strncmp+0x8>
   e362c:	461c      	mov	r4, r3
   e362e:	1b18      	subs	r0, r3, r4
   e3630:	bd30      	pop	{r4, r5, pc}
   e3632:	4610      	mov	r0, r2
   e3634:	bd30      	pop	{r4, r5, pc}

000e3636 <strncpy>:
   e3636:	b510      	push	{r4, lr}
   e3638:	4603      	mov	r3, r0
   e363a:	b142      	cbz	r2, e364e <strncpy+0x18>
   e363c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3640:	f803 4b01 	strb.w	r4, [r3], #1
   e3644:	3a01      	subs	r2, #1
   e3646:	2c00      	cmp	r4, #0
   e3648:	d1f7      	bne.n	e363a <strncpy+0x4>
   e364a:	441a      	add	r2, r3
   e364c:	e000      	b.n	e3650 <strncpy+0x1a>
   e364e:	bd10      	pop	{r4, pc}
   e3650:	4293      	cmp	r3, r2
   e3652:	d002      	beq.n	e365a <strncpy+0x24>
   e3654:	f803 4b01 	strb.w	r4, [r3], #1
   e3658:	e7fa      	b.n	e3650 <strncpy+0x1a>
   e365a:	bd10      	pop	{r4, pc}

000e365c <sulp>:
   e365c:	b570      	push	{r4, r5, r6, lr}
   e365e:	4604      	mov	r4, r0
   e3660:	460d      	mov	r5, r1
   e3662:	ec45 4b10 	vmov	d0, r4, r5
   e3666:	4616      	mov	r6, r2
   e3668:	f002 f862 	bl	e5730 <__ulp>
   e366c:	ec51 0b10 	vmov	r0, r1, d0
   e3670:	b17e      	cbz	r6, e3692 <sulp+0x36>
   e3672:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e3676:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e367a:	2b00      	cmp	r3, #0
   e367c:	dd09      	ble.n	e3692 <sulp+0x36>
   e367e:	051b      	lsls	r3, r3, #20
   e3680:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e3684:	2400      	movs	r4, #0
   e3686:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e368a:	4622      	mov	r2, r4
   e368c:	462b      	mov	r3, r5
   e368e:	f7fe fb4f 	bl	e1d30 <__aeabi_dmul>
   e3692:	bd70      	pop	{r4, r5, r6, pc}
   e3694:	0000      	movs	r0, r0
	...

000e3698 <_strtod_r>:
   e3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e369c:	b09d      	sub	sp, #116	; 0x74
   e369e:	2300      	movs	r3, #0
   e36a0:	9002      	str	r0, [sp, #8]
   e36a2:	460c      	mov	r4, r1
   e36a4:	9213      	str	r2, [sp, #76]	; 0x4c
   e36a6:	9318      	str	r3, [sp, #96]	; 0x60
   e36a8:	f04f 0a00 	mov.w	sl, #0
   e36ac:	f04f 0b00 	mov.w	fp, #0
   e36b0:	9117      	str	r1, [sp, #92]	; 0x5c
   e36b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e36b4:	781a      	ldrb	r2, [r3, #0]
   e36b6:	2a0d      	cmp	r2, #13
   e36b8:	d805      	bhi.n	e36c6 <_strtod_r+0x2e>
   e36ba:	2a09      	cmp	r2, #9
   e36bc:	d213      	bcs.n	e36e6 <_strtod_r+0x4e>
   e36be:	2a00      	cmp	r2, #0
   e36c0:	f000 81ac 	beq.w	e3a1c <_strtod_r+0x384>
   e36c4:	e012      	b.n	e36ec <_strtod_r+0x54>
   e36c6:	2a2b      	cmp	r2, #43	; 0x2b
   e36c8:	d004      	beq.n	e36d4 <_strtod_r+0x3c>
   e36ca:	2a2d      	cmp	r2, #45	; 0x2d
   e36cc:	d004      	beq.n	e36d8 <_strtod_r+0x40>
   e36ce:	2a20      	cmp	r2, #32
   e36d0:	d10c      	bne.n	e36ec <_strtod_r+0x54>
   e36d2:	e008      	b.n	e36e6 <_strtod_r+0x4e>
   e36d4:	2200      	movs	r2, #0
   e36d6:	e000      	b.n	e36da <_strtod_r+0x42>
   e36d8:	2201      	movs	r2, #1
   e36da:	920c      	str	r2, [sp, #48]	; 0x30
   e36dc:	1c5a      	adds	r2, r3, #1
   e36de:	9217      	str	r2, [sp, #92]	; 0x5c
   e36e0:	785b      	ldrb	r3, [r3, #1]
   e36e2:	b92b      	cbnz	r3, e36f0 <_strtod_r+0x58>
   e36e4:	e19a      	b.n	e3a1c <_strtod_r+0x384>
   e36e6:	3301      	adds	r3, #1
   e36e8:	9317      	str	r3, [sp, #92]	; 0x5c
   e36ea:	e7e2      	b.n	e36b2 <_strtod_r+0x1a>
   e36ec:	2300      	movs	r3, #0
   e36ee:	930c      	str	r3, [sp, #48]	; 0x30
   e36f0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e36f2:	782b      	ldrb	r3, [r5, #0]
   e36f4:	2b30      	cmp	r3, #48	; 0x30
   e36f6:	d15c      	bne.n	e37b2 <_strtod_r+0x11a>
   e36f8:	786b      	ldrb	r3, [r5, #1]
   e36fa:	2b58      	cmp	r3, #88	; 0x58
   e36fc:	d001      	beq.n	e3702 <_strtod_r+0x6a>
   e36fe:	2b78      	cmp	r3, #120	; 0x78
   e3700:	d14c      	bne.n	e379c <_strtod_r+0x104>
   e3702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3704:	9301      	str	r3, [sp, #4]
   e3706:	ab18      	add	r3, sp, #96	; 0x60
   e3708:	9300      	str	r3, [sp, #0]
   e370a:	4aa9      	ldr	r2, [pc, #676]	; (e39b0 <_strtod_r+0x318>)
   e370c:	9802      	ldr	r0, [sp, #8]
   e370e:	ab19      	add	r3, sp, #100	; 0x64
   e3710:	a917      	add	r1, sp, #92	; 0x5c
   e3712:	f001 f990 	bl	e4a36 <__gethex>
   e3716:	f010 0607 	ands.w	r6, r0, #7
   e371a:	4604      	mov	r4, r0
   e371c:	f000 8587 	beq.w	e422e <_strtod_r+0xb96>
   e3720:	2e06      	cmp	r6, #6
   e3722:	d105      	bne.n	e3730 <_strtod_r+0x98>
   e3724:	3501      	adds	r5, #1
   e3726:	2300      	movs	r3, #0
   e3728:	9517      	str	r5, [sp, #92]	; 0x5c
   e372a:	930c      	str	r3, [sp, #48]	; 0x30
   e372c:	f000 bd7f 	b.w	e422e <_strtod_r+0xb96>
   e3730:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e3732:	b13a      	cbz	r2, e3744 <_strtod_r+0xac>
   e3734:	2135      	movs	r1, #53	; 0x35
   e3736:	a81a      	add	r0, sp, #104	; 0x68
   e3738:	f002 f8e7 	bl	e590a <__copybits>
   e373c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e373e:	9802      	ldr	r0, [sp, #8]
   e3740:	f001 fd65 	bl	e520e <_Bfree>
   e3744:	2e06      	cmp	r6, #6
   e3746:	d822      	bhi.n	e378e <_strtod_r+0xf6>
   e3748:	e8df f006 	tbb	[pc, r6]
   e374c:	18080d04 	.word	0x18080d04
   e3750:	0d1d      	.short	0x0d1d
   e3752:	04          	.byte	0x04
   e3753:	00          	.byte	0x00
   e3754:	f04f 0b00 	mov.w	fp, #0
   e3758:	46da      	mov	sl, fp
   e375a:	e018      	b.n	e378e <_strtod_r+0xf6>
   e375c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e3760:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e3764:	e013      	b.n	e378e <_strtod_r+0xf6>
   e3766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e3768:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e376a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e376e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e3772:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e3776:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e377a:	e008      	b.n	e378e <_strtod_r+0xf6>
   e377c:	f8df b234 	ldr.w	fp, [pc, #564]	; e39b4 <_strtod_r+0x31c>
   e3780:	f04f 0a00 	mov.w	sl, #0
   e3784:	e003      	b.n	e378e <_strtod_r+0xf6>
   e3786:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e378a:	f04f 3aff 	mov.w	sl, #4294967295
   e378e:	0721      	lsls	r1, r4, #28
   e3790:	f140 854d 	bpl.w	e422e <_strtod_r+0xb96>
   e3794:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e3798:	f000 bd49 	b.w	e422e <_strtod_r+0xb96>
   e379c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e379e:	1c5a      	adds	r2, r3, #1
   e37a0:	9217      	str	r2, [sp, #92]	; 0x5c
   e37a2:	785b      	ldrb	r3, [r3, #1]
   e37a4:	2b30      	cmp	r3, #48	; 0x30
   e37a6:	d0f9      	beq.n	e379c <_strtod_r+0x104>
   e37a8:	2b00      	cmp	r3, #0
   e37aa:	f000 8540 	beq.w	e422e <_strtod_r+0xb96>
   e37ae:	2301      	movs	r3, #1
   e37b0:	e000      	b.n	e37b4 <_strtod_r+0x11c>
   e37b2:	2300      	movs	r3, #0
   e37b4:	f04f 0800 	mov.w	r8, #0
   e37b8:	9306      	str	r3, [sp, #24]
   e37ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e37bc:	9307      	str	r3, [sp, #28]
   e37be:	f8cd 8014 	str.w	r8, [sp, #20]
   e37c2:	f8cd 8010 	str.w	r8, [sp, #16]
   e37c6:	220a      	movs	r2, #10
   e37c8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e37ca:	782e      	ldrb	r6, [r5, #0]
   e37cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e37d0:	b2d9      	uxtb	r1, r3
   e37d2:	2909      	cmp	r1, #9
   e37d4:	d80e      	bhi.n	e37f4 <_strtod_r+0x15c>
   e37d6:	9904      	ldr	r1, [sp, #16]
   e37d8:	2908      	cmp	r1, #8
   e37da:	bfdd      	ittte	le
   e37dc:	9905      	ldrle	r1, [sp, #20]
   e37de:	fb02 3301 	mlale	r3, r2, r1, r3
   e37e2:	9305      	strle	r3, [sp, #20]
   e37e4:	fb02 3808 	mlagt	r8, r2, r8, r3
   e37e8:	9b04      	ldr	r3, [sp, #16]
   e37ea:	3501      	adds	r5, #1
   e37ec:	3301      	adds	r3, #1
   e37ee:	9304      	str	r3, [sp, #16]
   e37f0:	9517      	str	r5, [sp, #92]	; 0x5c
   e37f2:	e7e9      	b.n	e37c8 <_strtod_r+0x130>
   e37f4:	9802      	ldr	r0, [sp, #8]
   e37f6:	f7fe ff31 	bl	e265c <_localeconv_r>
   e37fa:	6807      	ldr	r7, [r0, #0]
   e37fc:	9802      	ldr	r0, [sp, #8]
   e37fe:	f7fe ff2d 	bl	e265c <_localeconv_r>
   e3802:	6800      	ldr	r0, [r0, #0]
   e3804:	f7ff fefa 	bl	e35fc <strlen>
   e3808:	4639      	mov	r1, r7
   e380a:	4602      	mov	r2, r0
   e380c:	4628      	mov	r0, r5
   e380e:	f7ff fefd 	bl	e360c <strncmp>
   e3812:	4607      	mov	r7, r0
   e3814:	b128      	cbz	r0, e3822 <_strtod_r+0x18a>
   e3816:	2000      	movs	r0, #0
   e3818:	4633      	mov	r3, r6
   e381a:	9d04      	ldr	r5, [sp, #16]
   e381c:	4602      	mov	r2, r0
   e381e:	4601      	mov	r1, r0
   e3820:	e057      	b.n	e38d2 <_strtod_r+0x23a>
   e3822:	9802      	ldr	r0, [sp, #8]
   e3824:	f7fe ff1a 	bl	e265c <_localeconv_r>
   e3828:	6800      	ldr	r0, [r0, #0]
   e382a:	f7ff fee7 	bl	e35fc <strlen>
   e382e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3830:	181a      	adds	r2, r3, r0
   e3832:	9217      	str	r2, [sp, #92]	; 0x5c
   e3834:	9a04      	ldr	r2, [sp, #16]
   e3836:	5c1b      	ldrb	r3, [r3, r0]
   e3838:	2a00      	cmp	r2, #0
   e383a:	d142      	bne.n	e38c2 <_strtod_r+0x22a>
   e383c:	4610      	mov	r0, r2
   e383e:	2b30      	cmp	r3, #48	; 0x30
   e3840:	d105      	bne.n	e384e <_strtod_r+0x1b6>
   e3842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3844:	1c5a      	adds	r2, r3, #1
   e3846:	9217      	str	r2, [sp, #92]	; 0x5c
   e3848:	3001      	adds	r0, #1
   e384a:	785b      	ldrb	r3, [r3, #1]
   e384c:	e7f7      	b.n	e383e <_strtod_r+0x1a6>
   e384e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e3852:	2a08      	cmp	r2, #8
   e3854:	d843      	bhi.n	e38de <_strtod_r+0x246>
   e3856:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e3858:	9207      	str	r2, [sp, #28]
   e385a:	4602      	mov	r2, r0
   e385c:	2000      	movs	r0, #0
   e385e:	4605      	mov	r5, r0
   e3860:	3b30      	subs	r3, #48	; 0x30
   e3862:	f100 0101 	add.w	r1, r0, #1
   e3866:	d026      	beq.n	e38b6 <_strtod_r+0x21e>
   e3868:	440a      	add	r2, r1
   e386a:	eb05 0c00 	add.w	ip, r5, r0
   e386e:	4629      	mov	r1, r5
   e3870:	260a      	movs	r6, #10
   e3872:	4561      	cmp	r1, ip
   e3874:	d00e      	beq.n	e3894 <_strtod_r+0x1fc>
   e3876:	3101      	adds	r1, #1
   e3878:	f101 3eff 	add.w	lr, r1, #4294967295
   e387c:	f1be 0f08 	cmp.w	lr, #8
   e3880:	dc03      	bgt.n	e388a <_strtod_r+0x1f2>
   e3882:	9f05      	ldr	r7, [sp, #20]
   e3884:	4377      	muls	r7, r6
   e3886:	9705      	str	r7, [sp, #20]
   e3888:	e7f3      	b.n	e3872 <_strtod_r+0x1da>
   e388a:	2910      	cmp	r1, #16
   e388c:	bfd8      	it	le
   e388e:	fb06 f808 	mulle.w	r8, r6, r8
   e3892:	e7ee      	b.n	e3872 <_strtod_r+0x1da>
   e3894:	4428      	add	r0, r5
   e3896:	2808      	cmp	r0, #8
   e3898:	f100 0501 	add.w	r5, r0, #1
   e389c:	dc05      	bgt.n	e38aa <_strtod_r+0x212>
   e389e:	9805      	ldr	r0, [sp, #20]
   e38a0:	210a      	movs	r1, #10
   e38a2:	fb01 3300 	mla	r3, r1, r0, r3
   e38a6:	9305      	str	r3, [sp, #20]
   e38a8:	e004      	b.n	e38b4 <_strtod_r+0x21c>
   e38aa:	2d10      	cmp	r5, #16
   e38ac:	bfdc      	itt	le
   e38ae:	210a      	movle	r1, #10
   e38b0:	fb01 3808 	mlale	r8, r1, r8, r3
   e38b4:	2100      	movs	r1, #0
   e38b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e38b8:	1c58      	adds	r0, r3, #1
   e38ba:	9017      	str	r0, [sp, #92]	; 0x5c
   e38bc:	785b      	ldrb	r3, [r3, #1]
   e38be:	4608      	mov	r0, r1
   e38c0:	e002      	b.n	e38c8 <_strtod_r+0x230>
   e38c2:	9d04      	ldr	r5, [sp, #16]
   e38c4:	4638      	mov	r0, r7
   e38c6:	463a      	mov	r2, r7
   e38c8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e38cc:	2909      	cmp	r1, #9
   e38ce:	d9c7      	bls.n	e3860 <_strtod_r+0x1c8>
   e38d0:	2101      	movs	r1, #1
   e38d2:	2b65      	cmp	r3, #101	; 0x65
   e38d4:	d001      	beq.n	e38da <_strtod_r+0x242>
   e38d6:	2b45      	cmp	r3, #69	; 0x45
   e38d8:	d151      	bne.n	e397e <_strtod_r+0x2e6>
   e38da:	b96d      	cbnz	r5, e38f8 <_strtod_r+0x260>
   e38dc:	e004      	b.n	e38e8 <_strtod_r+0x250>
   e38de:	2b65      	cmp	r3, #101	; 0x65
   e38e0:	f040 84b3 	bne.w	e424a <_strtod_r+0xbb2>
   e38e4:	2200      	movs	r2, #0
   e38e6:	2101      	movs	r1, #1
   e38e8:	b928      	cbnz	r0, e38f6 <_strtod_r+0x25e>
   e38ea:	9b06      	ldr	r3, [sp, #24]
   e38ec:	2b00      	cmp	r3, #0
   e38ee:	f000 8095 	beq.w	e3a1c <_strtod_r+0x384>
   e38f2:	4605      	mov	r5, r0
   e38f4:	e000      	b.n	e38f8 <_strtod_r+0x260>
   e38f6:	2500      	movs	r5, #0
   e38f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e38fa:	1c63      	adds	r3, r4, #1
   e38fc:	9317      	str	r3, [sp, #92]	; 0x5c
   e38fe:	7863      	ldrb	r3, [r4, #1]
   e3900:	2b2b      	cmp	r3, #43	; 0x2b
   e3902:	d006      	beq.n	e3912 <_strtod_r+0x27a>
   e3904:	2b2d      	cmp	r3, #45	; 0x2d
   e3906:	d002      	beq.n	e390e <_strtod_r+0x276>
   e3908:	2600      	movs	r6, #0
   e390a:	9603      	str	r6, [sp, #12]
   e390c:	e006      	b.n	e391c <_strtod_r+0x284>
   e390e:	2301      	movs	r3, #1
   e3910:	e000      	b.n	e3914 <_strtod_r+0x27c>
   e3912:	2300      	movs	r3, #0
   e3914:	9303      	str	r3, [sp, #12]
   e3916:	1ca3      	adds	r3, r4, #2
   e3918:	9317      	str	r3, [sp, #92]	; 0x5c
   e391a:	78a3      	ldrb	r3, [r4, #2]
   e391c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e3920:	2e09      	cmp	r6, #9
   e3922:	d82b      	bhi.n	e397c <_strtod_r+0x2e4>
   e3924:	2b30      	cmp	r3, #48	; 0x30
   e3926:	d104      	bne.n	e3932 <_strtod_r+0x29a>
   e3928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e392a:	1c5e      	adds	r6, r3, #1
   e392c:	9617      	str	r6, [sp, #92]	; 0x5c
   e392e:	785b      	ldrb	r3, [r3, #1]
   e3930:	e7f8      	b.n	e3924 <_strtod_r+0x28c>
   e3932:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e3936:	2e08      	cmp	r6, #8
   e3938:	d821      	bhi.n	e397e <_strtod_r+0x2e6>
   e393a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e393e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3940:	f04f 0c0a 	mov.w	ip, #10
   e3944:	461f      	mov	r7, r3
   e3946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3948:	1c5e      	adds	r6, r3, #1
   e394a:	9617      	str	r6, [sp, #92]	; 0x5c
   e394c:	785b      	ldrb	r3, [r3, #1]
   e394e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e3952:	f1b9 0f09 	cmp.w	r9, #9
   e3956:	d804      	bhi.n	e3962 <_strtod_r+0x2ca>
   e3958:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e395c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e3960:	e7f1      	b.n	e3946 <_strtod_r+0x2ae>
   e3962:	1bf6      	subs	r6, r6, r7
   e3964:	2e08      	cmp	r6, #8
   e3966:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e396a:	dc02      	bgt.n	e3972 <_strtod_r+0x2da>
   e396c:	45f1      	cmp	r9, lr
   e396e:	bfa8      	it	ge
   e3970:	46f1      	movge	r9, lr
   e3972:	9e03      	ldr	r6, [sp, #12]
   e3974:	b12e      	cbz	r6, e3982 <_strtod_r+0x2ea>
   e3976:	f1c9 0900 	rsb	r9, r9, #0
   e397a:	e002      	b.n	e3982 <_strtod_r+0x2ea>
   e397c:	9417      	str	r4, [sp, #92]	; 0x5c
   e397e:	f04f 0900 	mov.w	r9, #0
   e3982:	2d00      	cmp	r5, #0
   e3984:	d153      	bne.n	e3a2e <_strtod_r+0x396>
   e3986:	2800      	cmp	r0, #0
   e3988:	f040 8451 	bne.w	e422e <_strtod_r+0xb96>
   e398c:	9a06      	ldr	r2, [sp, #24]
   e398e:	2a00      	cmp	r2, #0
   e3990:	f040 844d 	bne.w	e422e <_strtod_r+0xb96>
   e3994:	2900      	cmp	r1, #0
   e3996:	d141      	bne.n	e3a1c <_strtod_r+0x384>
   e3998:	2b4e      	cmp	r3, #78	; 0x4e
   e399a:	d020      	beq.n	e39de <_strtod_r+0x346>
   e399c:	dc02      	bgt.n	e39a4 <_strtod_r+0x30c>
   e399e:	2b49      	cmp	r3, #73	; 0x49
   e39a0:	d00a      	beq.n	e39b8 <_strtod_r+0x320>
   e39a2:	e03b      	b.n	e3a1c <_strtod_r+0x384>
   e39a4:	2b69      	cmp	r3, #105	; 0x69
   e39a6:	d007      	beq.n	e39b8 <_strtod_r+0x320>
   e39a8:	2b6e      	cmp	r3, #110	; 0x6e
   e39aa:	d018      	beq.n	e39de <_strtod_r+0x346>
   e39ac:	e036      	b.n	e3a1c <_strtod_r+0x384>
   e39ae:	bf00      	nop
   e39b0:	000e7360 	.word	0x000e7360
   e39b4:	7ff00000 	.word	0x7ff00000
   e39b8:	49a8      	ldr	r1, [pc, #672]	; (e3c5c <_strtod_r+0x5c4>)
   e39ba:	a817      	add	r0, sp, #92	; 0x5c
   e39bc:	f001 fa6c 	bl	e4e98 <__match>
   e39c0:	b360      	cbz	r0, e3a1c <_strtod_r+0x384>
   e39c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e39c4:	49a6      	ldr	r1, [pc, #664]	; (e3c60 <_strtod_r+0x5c8>)
   e39c6:	3b01      	subs	r3, #1
   e39c8:	a817      	add	r0, sp, #92	; 0x5c
   e39ca:	9317      	str	r3, [sp, #92]	; 0x5c
   e39cc:	f001 fa64 	bl	e4e98 <__match>
   e39d0:	b910      	cbnz	r0, e39d8 <_strtod_r+0x340>
   e39d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e39d4:	3301      	adds	r3, #1
   e39d6:	9317      	str	r3, [sp, #92]	; 0x5c
   e39d8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e3c7c <_strtod_r+0x5e4>
   e39dc:	e01a      	b.n	e3a14 <_strtod_r+0x37c>
   e39de:	49a1      	ldr	r1, [pc, #644]	; (e3c64 <_strtod_r+0x5cc>)
   e39e0:	a817      	add	r0, sp, #92	; 0x5c
   e39e2:	f001 fa59 	bl	e4e98 <__match>
   e39e6:	b1c8      	cbz	r0, e3a1c <_strtod_r+0x384>
   e39e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e39ea:	781b      	ldrb	r3, [r3, #0]
   e39ec:	2b28      	cmp	r3, #40	; 0x28
   e39ee:	d10f      	bne.n	e3a10 <_strtod_r+0x378>
   e39f0:	aa1a      	add	r2, sp, #104	; 0x68
   e39f2:	499d      	ldr	r1, [pc, #628]	; (e3c68 <_strtod_r+0x5d0>)
   e39f4:	a817      	add	r0, sp, #92	; 0x5c
   e39f6:	f001 fa62 	bl	e4ebe <__hexnan>
   e39fa:	2805      	cmp	r0, #5
   e39fc:	d108      	bne.n	e3a10 <_strtod_r+0x378>
   e39fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e3a00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e3a04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e3a08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e3a0c:	f000 bc0f 	b.w	e422e <_strtod_r+0xb96>
   e3a10:	f8df b26c 	ldr.w	fp, [pc, #620]	; e3c80 <_strtod_r+0x5e8>
   e3a14:	f04f 0a00 	mov.w	sl, #0
   e3a18:	f000 bc09 	b.w	e422e <_strtod_r+0xb96>
   e3a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e3a1e:	9417      	str	r4, [sp, #92]	; 0x5c
   e3a20:	2b00      	cmp	r3, #0
   e3a22:	f000 840f 	beq.w	e4244 <_strtod_r+0xbac>
   e3a26:	2300      	movs	r3, #0
   e3a28:	930c      	str	r3, [sp, #48]	; 0x30
   e3a2a:	f000 bc02 	b.w	e4232 <_strtod_r+0xb9a>
   e3a2e:	9b04      	ldr	r3, [sp, #16]
   e3a30:	9805      	ldr	r0, [sp, #20]
   e3a32:	2b00      	cmp	r3, #0
   e3a34:	bf08      	it	eq
   e3a36:	462b      	moveq	r3, r5
   e3a38:	2d10      	cmp	r5, #16
   e3a3a:	462c      	mov	r4, r5
   e3a3c:	ebc2 0909 	rsb	r9, r2, r9
   e3a40:	bfa8      	it	ge
   e3a42:	2410      	movge	r4, #16
   e3a44:	9304      	str	r3, [sp, #16]
   e3a46:	f7fe f8fd 	bl	e1c44 <__aeabi_ui2d>
   e3a4a:	2c09      	cmp	r4, #9
   e3a4c:	4682      	mov	sl, r0
   e3a4e:	468b      	mov	fp, r1
   e3a50:	dd13      	ble.n	e3a7a <_strtod_r+0x3e2>
   e3a52:	4b86      	ldr	r3, [pc, #536]	; (e3c6c <_strtod_r+0x5d4>)
   e3a54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e3a58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e3a5c:	f7fe f968 	bl	e1d30 <__aeabi_dmul>
   e3a60:	4606      	mov	r6, r0
   e3a62:	4640      	mov	r0, r8
   e3a64:	460f      	mov	r7, r1
   e3a66:	f7fe f8ed 	bl	e1c44 <__aeabi_ui2d>
   e3a6a:	4602      	mov	r2, r0
   e3a6c:	460b      	mov	r3, r1
   e3a6e:	4630      	mov	r0, r6
   e3a70:	4639      	mov	r1, r7
   e3a72:	f7fd ffab 	bl	e19cc <__adddf3>
   e3a76:	4682      	mov	sl, r0
   e3a78:	468b      	mov	fp, r1
   e3a7a:	2d0f      	cmp	r5, #15
   e3a7c:	dc36      	bgt.n	e3aec <_strtod_r+0x454>
   e3a7e:	f1b9 0f00 	cmp.w	r9, #0
   e3a82:	f000 83d4 	beq.w	e422e <_strtod_r+0xb96>
   e3a86:	dd24      	ble.n	e3ad2 <_strtod_r+0x43a>
   e3a88:	f1b9 0f16 	cmp.w	r9, #22
   e3a8c:	dc07      	bgt.n	e3a9e <_strtod_r+0x406>
   e3a8e:	4d77      	ldr	r5, [pc, #476]	; (e3c6c <_strtod_r+0x5d4>)
   e3a90:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e3a94:	4652      	mov	r2, sl
   e3a96:	465b      	mov	r3, fp
   e3a98:	e9d9 0100 	ldrd	r0, r1, [r9]
   e3a9c:	e014      	b.n	e3ac8 <_strtod_r+0x430>
   e3a9e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e3aa2:	4599      	cmp	r9, r3
   e3aa4:	dc22      	bgt.n	e3aec <_strtod_r+0x454>
   e3aa6:	4c71      	ldr	r4, [pc, #452]	; (e3c6c <_strtod_r+0x5d4>)
   e3aa8:	f1c5 050f 	rsb	r5, r5, #15
   e3aac:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e3ab0:	ebc5 0509 	rsb	r5, r5, r9
   e3ab4:	4652      	mov	r2, sl
   e3ab6:	465b      	mov	r3, fp
   e3ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3abc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e3ac0:	f7fe f936 	bl	e1d30 <__aeabi_dmul>
   e3ac4:	e9d4 2300 	ldrd	r2, r3, [r4]
   e3ac8:	f7fe f932 	bl	e1d30 <__aeabi_dmul>
   e3acc:	4682      	mov	sl, r0
   e3ace:	468b      	mov	fp, r1
   e3ad0:	e3ad      	b.n	e422e <_strtod_r+0xb96>
   e3ad2:	f119 0f16 	cmn.w	r9, #22
   e3ad6:	db09      	blt.n	e3aec <_strtod_r+0x454>
   e3ad8:	4d64      	ldr	r5, [pc, #400]	; (e3c6c <_strtod_r+0x5d4>)
   e3ada:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e3ade:	e9d9 2300 	ldrd	r2, r3, [r9]
   e3ae2:	4650      	mov	r0, sl
   e3ae4:	4659      	mov	r1, fp
   e3ae6:	f7fe fa4d 	bl	e1f84 <__aeabi_ddiv>
   e3aea:	e7ef      	b.n	e3acc <_strtod_r+0x434>
   e3aec:	1b2c      	subs	r4, r5, r4
   e3aee:	444c      	add	r4, r9
   e3af0:	2c00      	cmp	r4, #0
   e3af2:	dd57      	ble.n	e3ba4 <_strtod_r+0x50c>
   e3af4:	f014 010f 	ands.w	r1, r4, #15
   e3af8:	d00a      	beq.n	e3b10 <_strtod_r+0x478>
   e3afa:	4b5c      	ldr	r3, [pc, #368]	; (e3c6c <_strtod_r+0x5d4>)
   e3afc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e3b00:	4652      	mov	r2, sl
   e3b02:	465b      	mov	r3, fp
   e3b04:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3b08:	f7fe f912 	bl	e1d30 <__aeabi_dmul>
   e3b0c:	4682      	mov	sl, r0
   e3b0e:	468b      	mov	fp, r1
   e3b10:	f034 040f 	bics.w	r4, r4, #15
   e3b14:	f000 80b8 	beq.w	e3c88 <_strtod_r+0x5f0>
   e3b18:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e3b1c:	dd0b      	ble.n	e3b36 <_strtod_r+0x49e>
   e3b1e:	2400      	movs	r4, #0
   e3b20:	4625      	mov	r5, r4
   e3b22:	9405      	str	r4, [sp, #20]
   e3b24:	9404      	str	r4, [sp, #16]
   e3b26:	9a02      	ldr	r2, [sp, #8]
   e3b28:	f8df b150 	ldr.w	fp, [pc, #336]	; e3c7c <_strtod_r+0x5e4>
   e3b2c:	2322      	movs	r3, #34	; 0x22
   e3b2e:	6013      	str	r3, [r2, #0]
   e3b30:	f04f 0a00 	mov.w	sl, #0
   e3b34:	e187      	b.n	e3e46 <_strtod_r+0x7ae>
   e3b36:	4e4e      	ldr	r6, [pc, #312]	; (e3c70 <_strtod_r+0x5d8>)
   e3b38:	2300      	movs	r3, #0
   e3b3a:	1124      	asrs	r4, r4, #4
   e3b3c:	4650      	mov	r0, sl
   e3b3e:	4659      	mov	r1, fp
   e3b40:	4698      	mov	r8, r3
   e3b42:	4637      	mov	r7, r6
   e3b44:	2c01      	cmp	r4, #1
   e3b46:	dd0b      	ble.n	e3b60 <_strtod_r+0x4c8>
   e3b48:	07e2      	lsls	r2, r4, #31
   e3b4a:	d504      	bpl.n	e3b56 <_strtod_r+0x4be>
   e3b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
   e3b50:	f7fe f8ee 	bl	e1d30 <__aeabi_dmul>
   e3b54:	2301      	movs	r3, #1
   e3b56:	f108 0801 	add.w	r8, r8, #1
   e3b5a:	1064      	asrs	r4, r4, #1
   e3b5c:	3608      	adds	r6, #8
   e3b5e:	e7f1      	b.n	e3b44 <_strtod_r+0x4ac>
   e3b60:	b10b      	cbz	r3, e3b66 <_strtod_r+0x4ce>
   e3b62:	4682      	mov	sl, r0
   e3b64:	468b      	mov	fp, r1
   e3b66:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e3b6a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e3b6e:	4652      	mov	r2, sl
   e3b70:	465b      	mov	r3, fp
   e3b72:	e9d7 0100 	ldrd	r0, r1, [r7]
   e3b76:	f7fe f8db 	bl	e1d30 <__aeabi_dmul>
   e3b7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e3b7e:	468b      	mov	fp, r1
   e3b80:	460a      	mov	r2, r1
   e3b82:	0d1b      	lsrs	r3, r3, #20
   e3b84:	493b      	ldr	r1, [pc, #236]	; (e3c74 <_strtod_r+0x5dc>)
   e3b86:	051b      	lsls	r3, r3, #20
   e3b88:	428b      	cmp	r3, r1
   e3b8a:	4682      	mov	sl, r0
   e3b8c:	d8c7      	bhi.n	e3b1e <_strtod_r+0x486>
   e3b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e3b92:	428b      	cmp	r3, r1
   e3b94:	bf86      	itte	hi
   e3b96:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e3c84 <_strtod_r+0x5ec>
   e3b9a:	f04f 3aff 	movhi.w	sl, #4294967295
   e3b9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e3ba2:	e071      	b.n	e3c88 <_strtod_r+0x5f0>
   e3ba4:	d070      	beq.n	e3c88 <_strtod_r+0x5f0>
   e3ba6:	4264      	negs	r4, r4
   e3ba8:	f014 020f 	ands.w	r2, r4, #15
   e3bac:	d00a      	beq.n	e3bc4 <_strtod_r+0x52c>
   e3bae:	4b2f      	ldr	r3, [pc, #188]	; (e3c6c <_strtod_r+0x5d4>)
   e3bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e3bb4:	4650      	mov	r0, sl
   e3bb6:	4659      	mov	r1, fp
   e3bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3bbc:	f7fe f9e2 	bl	e1f84 <__aeabi_ddiv>
   e3bc0:	4682      	mov	sl, r0
   e3bc2:	468b      	mov	fp, r1
   e3bc4:	1124      	asrs	r4, r4, #4
   e3bc6:	d05f      	beq.n	e3c88 <_strtod_r+0x5f0>
   e3bc8:	2c1f      	cmp	r4, #31
   e3bca:	dd04      	ble.n	e3bd6 <_strtod_r+0x53e>
   e3bcc:	2400      	movs	r4, #0
   e3bce:	4625      	mov	r5, r4
   e3bd0:	9405      	str	r4, [sp, #20]
   e3bd2:	9404      	str	r4, [sp, #16]
   e3bd4:	e130      	b.n	e3e38 <_strtod_r+0x7a0>
   e3bd6:	f014 0f10 	tst.w	r4, #16
   e3bda:	bf0c      	ite	eq
   e3bdc:	2300      	moveq	r3, #0
   e3bde:	236a      	movne	r3, #106	; 0x6a
   e3be0:	4e25      	ldr	r6, [pc, #148]	; (e3c78 <_strtod_r+0x5e0>)
   e3be2:	9303      	str	r3, [sp, #12]
   e3be4:	4650      	mov	r0, sl
   e3be6:	4659      	mov	r1, fp
   e3be8:	2300      	movs	r3, #0
   e3bea:	2c00      	cmp	r4, #0
   e3bec:	dd09      	ble.n	e3c02 <_strtod_r+0x56a>
   e3bee:	07e2      	lsls	r2, r4, #31
   e3bf0:	d504      	bpl.n	e3bfc <_strtod_r+0x564>
   e3bf2:	e9d6 2300 	ldrd	r2, r3, [r6]
   e3bf6:	f7fe f89b 	bl	e1d30 <__aeabi_dmul>
   e3bfa:	2301      	movs	r3, #1
   e3bfc:	1064      	asrs	r4, r4, #1
   e3bfe:	3608      	adds	r6, #8
   e3c00:	e7f3      	b.n	e3bea <_strtod_r+0x552>
   e3c02:	b10b      	cbz	r3, e3c08 <_strtod_r+0x570>
   e3c04:	4682      	mov	sl, r0
   e3c06:	468b      	mov	fp, r1
   e3c08:	9b03      	ldr	r3, [sp, #12]
   e3c0a:	b1eb      	cbz	r3, e3c48 <_strtod_r+0x5b0>
   e3c0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e3c10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e3c14:	2b00      	cmp	r3, #0
   e3c16:	4659      	mov	r1, fp
   e3c18:	dd16      	ble.n	e3c48 <_strtod_r+0x5b0>
   e3c1a:	2b1f      	cmp	r3, #31
   e3c1c:	dd0e      	ble.n	e3c3c <_strtod_r+0x5a4>
   e3c1e:	2b34      	cmp	r3, #52	; 0x34
   e3c20:	bfde      	ittt	le
   e3c22:	3b20      	suble	r3, #32
   e3c24:	f04f 32ff 	movle.w	r2, #4294967295
   e3c28:	fa02 f303 	lslle.w	r3, r2, r3
   e3c2c:	f04f 0a00 	mov.w	sl, #0
   e3c30:	bfcc      	ite	gt
   e3c32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e3c36:	ea03 0b01 	andle.w	fp, r3, r1
   e3c3a:	e005      	b.n	e3c48 <_strtod_r+0x5b0>
   e3c3c:	f04f 32ff 	mov.w	r2, #4294967295
   e3c40:	fa02 f303 	lsl.w	r3, r2, r3
   e3c44:	ea03 0a0a 	and.w	sl, r3, sl
   e3c48:	2200      	movs	r2, #0
   e3c4a:	2300      	movs	r3, #0
   e3c4c:	4650      	mov	r0, sl
   e3c4e:	4659      	mov	r1, fp
   e3c50:	f7fe fad6 	bl	e2200 <__aeabi_dcmpeq>
   e3c54:	2800      	cmp	r0, #0
   e3c56:	d1b9      	bne.n	e3bcc <_strtod_r+0x534>
   e3c58:	e018      	b.n	e3c8c <_strtod_r+0x5f4>
   e3c5a:	bf00      	nop
   e3c5c:	000e6ae5 	.word	0x000e6ae5
   e3c60:	000e7388 	.word	0x000e7388
   e3c64:	000e73c1 	.word	0x000e73c1
   e3c68:	000e7374 	.word	0x000e7374
   e3c6c:	000e7620 	.word	0x000e7620
   e3c70:	000e76e8 	.word	0x000e76e8
   e3c74:	7ca00000 	.word	0x7ca00000
   e3c78:	000e7390 	.word	0x000e7390
   e3c7c:	7ff00000 	.word	0x7ff00000
   e3c80:	fff80000 	.word	0xfff80000
   e3c84:	7fefffff 	.word	0x7fefffff
   e3c88:	2300      	movs	r3, #0
   e3c8a:	9303      	str	r3, [sp, #12]
   e3c8c:	9b05      	ldr	r3, [sp, #20]
   e3c8e:	9300      	str	r3, [sp, #0]
   e3c90:	9a04      	ldr	r2, [sp, #16]
   e3c92:	9907      	ldr	r1, [sp, #28]
   e3c94:	9802      	ldr	r0, [sp, #8]
   e3c96:	462b      	mov	r3, r5
   e3c98:	f001 fb0b 	bl	e52b2 <__s2b>
   e3c9c:	9005      	str	r0, [sp, #20]
   e3c9e:	2800      	cmp	r0, #0
   e3ca0:	f43f af3d 	beq.w	e3b1e <_strtod_r+0x486>
   e3ca4:	f1b9 0f00 	cmp.w	r9, #0
   e3ca8:	f1c9 0300 	rsb	r3, r9, #0
   e3cac:	bfa8      	it	ge
   e3cae:	2300      	movge	r3, #0
   e3cb0:	930d      	str	r3, [sp, #52]	; 0x34
   e3cb2:	2400      	movs	r4, #0
   e3cb4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e3cb8:	9312      	str	r3, [sp, #72]	; 0x48
   e3cba:	4625      	mov	r5, r4
   e3cbc:	9b05      	ldr	r3, [sp, #20]
   e3cbe:	9802      	ldr	r0, [sp, #8]
   e3cc0:	6859      	ldr	r1, [r3, #4]
   e3cc2:	f001 fa6f 	bl	e51a4 <_Balloc>
   e3cc6:	9004      	str	r0, [sp, #16]
   e3cc8:	2800      	cmp	r0, #0
   e3cca:	f43f af2c 	beq.w	e3b26 <_strtod_r+0x48e>
   e3cce:	9b05      	ldr	r3, [sp, #20]
   e3cd0:	691a      	ldr	r2, [r3, #16]
   e3cd2:	3202      	adds	r2, #2
   e3cd4:	f103 010c 	add.w	r1, r3, #12
   e3cd8:	0092      	lsls	r2, r2, #2
   e3cda:	300c      	adds	r0, #12
   e3cdc:	f7fe fcc2 	bl	e2664 <memcpy>
   e3ce0:	aa1a      	add	r2, sp, #104	; 0x68
   e3ce2:	a919      	add	r1, sp, #100	; 0x64
   e3ce4:	ec4b ab10 	vmov	d0, sl, fp
   e3ce8:	9802      	ldr	r0, [sp, #8]
   e3cea:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e3cee:	f001 fd94 	bl	e581a <__d2b>
   e3cf2:	9018      	str	r0, [sp, #96]	; 0x60
   e3cf4:	2800      	cmp	r0, #0
   e3cf6:	f43f af16 	beq.w	e3b26 <_strtod_r+0x48e>
   e3cfa:	2101      	movs	r1, #1
   e3cfc:	9802      	ldr	r0, [sp, #8]
   e3cfe:	f001 fb63 	bl	e53c8 <__i2b>
   e3d02:	4605      	mov	r5, r0
   e3d04:	2800      	cmp	r0, #0
   e3d06:	f43f af0e 	beq.w	e3b26 <_strtod_r+0x48e>
   e3d0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e3d0c:	9903      	ldr	r1, [sp, #12]
   e3d0e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e3d10:	2b00      	cmp	r3, #0
   e3d12:	bfad      	iteet	ge
   e3d14:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e3d16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e3d18:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e3d1c:	eb02 0803 	addge.w	r8, r2, r3
   e3d20:	bfb8      	it	lt
   e3d22:	1ad2      	sublt	r2, r2, r3
   e3d24:	eba3 0301 	sub.w	r3, r3, r1
   e3d28:	4433      	add	r3, r6
   e3d2a:	49b5      	ldr	r1, [pc, #724]	; (e4000 <_strtod_r+0x968>)
   e3d2c:	bfa8      	it	ge
   e3d2e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e3d30:	3b01      	subs	r3, #1
   e3d32:	428b      	cmp	r3, r1
   e3d34:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e3d38:	f280 808a 	bge.w	e3e50 <_strtod_r+0x7b8>
   e3d3c:	1ac9      	subs	r1, r1, r3
   e3d3e:	291f      	cmp	r1, #31
   e3d40:	bfc8      	it	gt
   e3d42:	4fb0      	ldrgt	r7, [pc, #704]	; (e4004 <_strtod_r+0x96c>)
   e3d44:	f04f 0901 	mov.w	r9, #1
   e3d48:	bfd4      	ite	le
   e3d4a:	fa09 f301 	lslle.w	r3, r9, r1
   e3d4e:	1aff      	subgt	r7, r7, r3
   e3d50:	eba6 0601 	sub.w	r6, r6, r1
   e3d54:	bfd9      	ittee	le
   e3d56:	9306      	strle	r3, [sp, #24]
   e3d58:	2700      	movle	r7, #0
   e3d5a:	fa09 f707 	lslgt.w	r7, r9, r7
   e3d5e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e3d62:	eb08 0906 	add.w	r9, r8, r6
   e3d66:	9b03      	ldr	r3, [sp, #12]
   e3d68:	45c8      	cmp	r8, r9
   e3d6a:	4416      	add	r6, r2
   e3d6c:	441e      	add	r6, r3
   e3d6e:	4643      	mov	r3, r8
   e3d70:	bfa8      	it	ge
   e3d72:	464b      	movge	r3, r9
   e3d74:	42b3      	cmp	r3, r6
   e3d76:	bfa8      	it	ge
   e3d78:	4633      	movge	r3, r6
   e3d7a:	2b00      	cmp	r3, #0
   e3d7c:	bfc2      	ittt	gt
   e3d7e:	ebc3 0909 	rsbgt	r9, r3, r9
   e3d82:	1af6      	subgt	r6, r6, r3
   e3d84:	ebc3 0808 	rsbgt	r8, r3, r8
   e3d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3d8a:	2b00      	cmp	r3, #0
   e3d8c:	d164      	bne.n	e3e58 <_strtod_r+0x7c0>
   e3d8e:	f1b9 0f00 	cmp.w	r9, #0
   e3d92:	dc7a      	bgt.n	e3e8a <_strtod_r+0x7f2>
   e3d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e3d96:	2b00      	cmp	r3, #0
   e3d98:	f040 8081 	bne.w	e3e9e <_strtod_r+0x806>
   e3d9c:	2e00      	cmp	r6, #0
   e3d9e:	f300 8088 	bgt.w	e3eb2 <_strtod_r+0x81a>
   e3da2:	f1b8 0f00 	cmp.w	r8, #0
   e3da6:	f300 808e 	bgt.w	e3ec6 <_strtod_r+0x82e>
   e3daa:	9a04      	ldr	r2, [sp, #16]
   e3dac:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3dae:	9802      	ldr	r0, [sp, #8]
   e3db0:	f001 fc5f 	bl	e5672 <__mdiff>
   e3db4:	4604      	mov	r4, r0
   e3db6:	2800      	cmp	r0, #0
   e3db8:	f43f aeb5 	beq.w	e3b26 <_strtod_r+0x48e>
   e3dbc:	68c3      	ldr	r3, [r0, #12]
   e3dbe:	9307      	str	r3, [sp, #28]
   e3dc0:	2300      	movs	r3, #0
   e3dc2:	60c3      	str	r3, [r0, #12]
   e3dc4:	4629      	mov	r1, r5
   e3dc6:	f001 fc38 	bl	e563a <__mcmp>
   e3dca:	2800      	cmp	r0, #0
   e3dcc:	f280 8089 	bge.w	e3ee2 <_strtod_r+0x84a>
   e3dd0:	9b07      	ldr	r3, [sp, #28]
   e3dd2:	2b00      	cmp	r3, #0
   e3dd4:	f040 8204 	bne.w	e41e0 <_strtod_r+0xb48>
   e3dd8:	f1ba 0f00 	cmp.w	sl, #0
   e3ddc:	f040 8200 	bne.w	e41e0 <_strtod_r+0xb48>
   e3de0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3de4:	2b00      	cmp	r3, #0
   e3de6:	f040 81fb 	bne.w	e41e0 <_strtod_r+0xb48>
   e3dea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3dee:	0d1b      	lsrs	r3, r3, #20
   e3df0:	051b      	lsls	r3, r3, #20
   e3df2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e3df6:	f240 81f3 	bls.w	e41e0 <_strtod_r+0xb48>
   e3dfa:	6963      	ldr	r3, [r4, #20]
   e3dfc:	2b00      	cmp	r3, #0
   e3dfe:	d06c      	beq.n	e3eda <_strtod_r+0x842>
   e3e00:	4621      	mov	r1, r4
   e3e02:	2201      	movs	r2, #1
   e3e04:	9802      	ldr	r0, [sp, #8]
   e3e06:	f001 fbc7 	bl	e5598 <__lshift>
   e3e0a:	4629      	mov	r1, r5
   e3e0c:	4604      	mov	r4, r0
   e3e0e:	f001 fc14 	bl	e563a <__mcmp>
   e3e12:	2800      	cmp	r0, #0
   e3e14:	f340 81e4 	ble.w	e41e0 <_strtod_r+0xb48>
   e3e18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e3e1c:	9a03      	ldr	r2, [sp, #12]
   e3e1e:	0d1b      	lsrs	r3, r3, #20
   e3e20:	051b      	lsls	r3, r3, #20
   e3e22:	2a00      	cmp	r2, #0
   e3e24:	f000 808c 	beq.w	e3f40 <_strtod_r+0x8a8>
   e3e28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e3e2c:	f300 8088 	bgt.w	e3f40 <_strtod_r+0x8a8>
   e3e30:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e3e34:	f300 81d6 	bgt.w	e41e4 <_strtod_r+0xb4c>
   e3e38:	9a02      	ldr	r2, [sp, #8]
   e3e3a:	2322      	movs	r3, #34	; 0x22
   e3e3c:	f04f 0a00 	mov.w	sl, #0
   e3e40:	f04f 0b00 	mov.w	fp, #0
   e3e44:	6013      	str	r3, [r2, #0]
   e3e46:	9b05      	ldr	r3, [sp, #20]
   e3e48:	2b00      	cmp	r3, #0
   e3e4a:	f040 81dc 	bne.w	e4206 <_strtod_r+0xb6e>
   e3e4e:	e1ee      	b.n	e422e <_strtod_r+0xb96>
   e3e50:	2301      	movs	r3, #1
   e3e52:	2700      	movs	r7, #0
   e3e54:	9306      	str	r3, [sp, #24]
   e3e56:	e784      	b.n	e3d62 <_strtod_r+0x6ca>
   e3e58:	4629      	mov	r1, r5
   e3e5a:	461a      	mov	r2, r3
   e3e5c:	9802      	ldr	r0, [sp, #8]
   e3e5e:	f001 fb4d 	bl	e54fc <__pow5mult>
   e3e62:	4605      	mov	r5, r0
   e3e64:	2800      	cmp	r0, #0
   e3e66:	f43f ae5e 	beq.w	e3b26 <_strtod_r+0x48e>
   e3e6a:	4601      	mov	r1, r0
   e3e6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e3e6e:	9802      	ldr	r0, [sp, #8]
   e3e70:	f001 fab3 	bl	e53da <__multiply>
   e3e74:	9007      	str	r0, [sp, #28]
   e3e76:	2800      	cmp	r0, #0
   e3e78:	f43f ae55 	beq.w	e3b26 <_strtod_r+0x48e>
   e3e7c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3e7e:	9802      	ldr	r0, [sp, #8]
   e3e80:	f001 f9c5 	bl	e520e <_Bfree>
   e3e84:	9b07      	ldr	r3, [sp, #28]
   e3e86:	9318      	str	r3, [sp, #96]	; 0x60
   e3e88:	e781      	b.n	e3d8e <_strtod_r+0x6f6>
   e3e8a:	464a      	mov	r2, r9
   e3e8c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3e8e:	9802      	ldr	r0, [sp, #8]
   e3e90:	f001 fb82 	bl	e5598 <__lshift>
   e3e94:	9018      	str	r0, [sp, #96]	; 0x60
   e3e96:	2800      	cmp	r0, #0
   e3e98:	f47f af7c 	bne.w	e3d94 <_strtod_r+0x6fc>
   e3e9c:	e643      	b.n	e3b26 <_strtod_r+0x48e>
   e3e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e3ea0:	9904      	ldr	r1, [sp, #16]
   e3ea2:	9802      	ldr	r0, [sp, #8]
   e3ea4:	f001 fb2a 	bl	e54fc <__pow5mult>
   e3ea8:	9004      	str	r0, [sp, #16]
   e3eaa:	2800      	cmp	r0, #0
   e3eac:	f47f af76 	bne.w	e3d9c <_strtod_r+0x704>
   e3eb0:	e639      	b.n	e3b26 <_strtod_r+0x48e>
   e3eb2:	4632      	mov	r2, r6
   e3eb4:	9904      	ldr	r1, [sp, #16]
   e3eb6:	9802      	ldr	r0, [sp, #8]
   e3eb8:	f001 fb6e 	bl	e5598 <__lshift>
   e3ebc:	9004      	str	r0, [sp, #16]
   e3ebe:	2800      	cmp	r0, #0
   e3ec0:	f47f af6f 	bne.w	e3da2 <_strtod_r+0x70a>
   e3ec4:	e62f      	b.n	e3b26 <_strtod_r+0x48e>
   e3ec6:	4629      	mov	r1, r5
   e3ec8:	4642      	mov	r2, r8
   e3eca:	9802      	ldr	r0, [sp, #8]
   e3ecc:	f001 fb64 	bl	e5598 <__lshift>
   e3ed0:	4605      	mov	r5, r0
   e3ed2:	2800      	cmp	r0, #0
   e3ed4:	f47f af69 	bne.w	e3daa <_strtod_r+0x712>
   e3ed8:	e625      	b.n	e3b26 <_strtod_r+0x48e>
   e3eda:	6923      	ldr	r3, [r4, #16]
   e3edc:	2b01      	cmp	r3, #1
   e3ede:	dc8f      	bgt.n	e3e00 <_strtod_r+0x768>
   e3ee0:	e17e      	b.n	e41e0 <_strtod_r+0xb48>
   e3ee2:	d161      	bne.n	e3fa8 <_strtod_r+0x910>
   e3ee4:	9a07      	ldr	r2, [sp, #28]
   e3ee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3eea:	b322      	cbz	r2, e3f36 <_strtod_r+0x89e>
   e3eec:	4946      	ldr	r1, [pc, #280]	; (e4008 <_strtod_r+0x970>)
   e3eee:	428b      	cmp	r3, r1
   e3ef0:	465a      	mov	r2, fp
   e3ef2:	d12e      	bne.n	e3f52 <_strtod_r+0x8ba>
   e3ef4:	9b03      	ldr	r3, [sp, #12]
   e3ef6:	4651      	mov	r1, sl
   e3ef8:	b163      	cbz	r3, e3f14 <_strtod_r+0x87c>
   e3efa:	4b44      	ldr	r3, [pc, #272]	; (e400c <_strtod_r+0x974>)
   e3efc:	4013      	ands	r3, r2
   e3efe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e3f02:	d807      	bhi.n	e3f14 <_strtod_r+0x87c>
   e3f04:	0d1b      	lsrs	r3, r3, #20
   e3f06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e3f0a:	f04f 30ff 	mov.w	r0, #4294967295
   e3f0e:	fa00 f303 	lsl.w	r3, r0, r3
   e3f12:	e001      	b.n	e3f18 <_strtod_r+0x880>
   e3f14:	f04f 33ff 	mov.w	r3, #4294967295
   e3f18:	428b      	cmp	r3, r1
   e3f1a:	d11a      	bne.n	e3f52 <_strtod_r+0x8ba>
   e3f1c:	493c      	ldr	r1, [pc, #240]	; (e4010 <_strtod_r+0x978>)
   e3f1e:	428a      	cmp	r2, r1
   e3f20:	d102      	bne.n	e3f28 <_strtod_r+0x890>
   e3f22:	3301      	adds	r3, #1
   e3f24:	f43f adff 	beq.w	e3b26 <_strtod_r+0x48e>
   e3f28:	4b38      	ldr	r3, [pc, #224]	; (e400c <_strtod_r+0x974>)
   e3f2a:	4013      	ands	r3, r2
   e3f2c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e3f30:	f04f 0a00 	mov.w	sl, #0
   e3f34:	e154      	b.n	e41e0 <_strtod_r+0xb48>
   e3f36:	b963      	cbnz	r3, e3f52 <_strtod_r+0x8ba>
   e3f38:	f1ba 0f00 	cmp.w	sl, #0
   e3f3c:	d109      	bne.n	e3f52 <_strtod_r+0x8ba>
   e3f3e:	e76b      	b.n	e3e18 <_strtod_r+0x780>
   e3f40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e3f44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e3f48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e3f4c:	f04f 3aff 	mov.w	sl, #4294967295
   e3f50:	e146      	b.n	e41e0 <_strtod_r+0xb48>
   e3f52:	b117      	cbz	r7, e3f5a <_strtod_r+0x8c2>
   e3f54:	ea17 0f0b 	tst.w	r7, fp
   e3f58:	e002      	b.n	e3f60 <_strtod_r+0x8c8>
   e3f5a:	9b06      	ldr	r3, [sp, #24]
   e3f5c:	ea13 0f0a 	tst.w	r3, sl
   e3f60:	f000 813e 	beq.w	e41e0 <_strtod_r+0xb48>
   e3f64:	9b07      	ldr	r3, [sp, #28]
   e3f66:	9a03      	ldr	r2, [sp, #12]
   e3f68:	4650      	mov	r0, sl
   e3f6a:	4659      	mov	r1, fp
   e3f6c:	b153      	cbz	r3, e3f84 <_strtod_r+0x8ec>
   e3f6e:	f7ff fb75 	bl	e365c <sulp>
   e3f72:	4602      	mov	r2, r0
   e3f74:	460b      	mov	r3, r1
   e3f76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3f7a:	f7fd fd27 	bl	e19cc <__adddf3>
   e3f7e:	4682      	mov	sl, r0
   e3f80:	468b      	mov	fp, r1
   e3f82:	e12d      	b.n	e41e0 <_strtod_r+0xb48>
   e3f84:	f7ff fb6a 	bl	e365c <sulp>
   e3f88:	4602      	mov	r2, r0
   e3f8a:	460b      	mov	r3, r1
   e3f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e3f90:	f7fd fd1a 	bl	e19c8 <__aeabi_dsub>
   e3f94:	2200      	movs	r2, #0
   e3f96:	2300      	movs	r3, #0
   e3f98:	4682      	mov	sl, r0
   e3f9a:	468b      	mov	fp, r1
   e3f9c:	f7fe f930 	bl	e2200 <__aeabi_dcmpeq>
   e3fa0:	2800      	cmp	r0, #0
   e3fa2:	f47f af49 	bne.w	e3e38 <_strtod_r+0x7a0>
   e3fa6:	e11b      	b.n	e41e0 <_strtod_r+0xb48>
   e3fa8:	4629      	mov	r1, r5
   e3faa:	4620      	mov	r0, r4
   e3fac:	f001 fc83 	bl	e58b6 <__ratio>
   e3fb0:	ec57 6b10 	vmov	r6, r7, d0
   e3fb4:	2200      	movs	r2, #0
   e3fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e3fba:	ee10 0a10 	vmov	r0, s0
   e3fbe:	4639      	mov	r1, r7
   e3fc0:	f7fe f932 	bl	e2228 <__aeabi_dcmple>
   e3fc4:	2800      	cmp	r0, #0
   e3fc6:	d042      	beq.n	e404e <_strtod_r+0x9b6>
   e3fc8:	9b07      	ldr	r3, [sp, #28]
   e3fca:	b123      	cbz	r3, e3fd6 <_strtod_r+0x93e>
   e3fcc:	f04f 0800 	mov.w	r8, #0
   e3fd0:	f8df 9040 	ldr.w	r9, [pc, #64]	; e4014 <_strtod_r+0x97c>
   e3fd4:	e011      	b.n	e3ffa <_strtod_r+0x962>
   e3fd6:	f1ba 0f00 	cmp.w	sl, #0
   e3fda:	d103      	bne.n	e3fe4 <_strtod_r+0x94c>
   e3fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e3fe0:	b93b      	cbnz	r3, e3ff2 <_strtod_r+0x95a>
   e3fe2:	e01b      	b.n	e401c <_strtod_r+0x984>
   e3fe4:	f1ba 0f01 	cmp.w	sl, #1
   e3fe8:	d103      	bne.n	e3ff2 <_strtod_r+0x95a>
   e3fea:	f1bb 0f00 	cmp.w	fp, #0
   e3fee:	f43f af23 	beq.w	e3e38 <_strtod_r+0x7a0>
   e3ff2:	f8df 9024 	ldr.w	r9, [pc, #36]	; e4018 <_strtod_r+0x980>
   e3ff6:	f04f 0800 	mov.w	r8, #0
   e3ffa:	2600      	movs	r6, #0
   e3ffc:	4f05      	ldr	r7, [pc, #20]	; (e4014 <_strtod_r+0x97c>)
   e3ffe:	e039      	b.n	e4074 <_strtod_r+0x9dc>
   e4000:	fffffc02 	.word	0xfffffc02
   e4004:	fffffbe2 	.word	0xfffffbe2
   e4008:	000fffff 	.word	0x000fffff
   e400c:	7ff00000 	.word	0x7ff00000
   e4010:	7fefffff 	.word	0x7fefffff
   e4014:	3ff00000 	.word	0x3ff00000
   e4018:	bff00000 	.word	0xbff00000
   e401c:	2200      	movs	r2, #0
   e401e:	4b98      	ldr	r3, [pc, #608]	; (e4280 <_strtod_r+0xbe8>)
   e4020:	4630      	mov	r0, r6
   e4022:	4639      	mov	r1, r7
   e4024:	f7fe f8f6 	bl	e2214 <__aeabi_dcmplt>
   e4028:	b940      	cbnz	r0, e403c <_strtod_r+0x9a4>
   e402a:	4630      	mov	r0, r6
   e402c:	4639      	mov	r1, r7
   e402e:	2200      	movs	r2, #0
   e4030:	4b94      	ldr	r3, [pc, #592]	; (e4284 <_strtod_r+0xbec>)
   e4032:	f7fd fe7d 	bl	e1d30 <__aeabi_dmul>
   e4036:	4606      	mov	r6, r0
   e4038:	460f      	mov	r7, r1
   e403a:	e001      	b.n	e4040 <_strtod_r+0x9a8>
   e403c:	4f91      	ldr	r7, [pc, #580]	; (e4284 <_strtod_r+0xbec>)
   e403e:	2600      	movs	r6, #0
   e4040:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e4044:	9614      	str	r6, [sp, #80]	; 0x50
   e4046:	9315      	str	r3, [sp, #84]	; 0x54
   e4048:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e404c:	e012      	b.n	e4074 <_strtod_r+0x9dc>
   e404e:	4b8d      	ldr	r3, [pc, #564]	; (e4284 <_strtod_r+0xbec>)
   e4050:	4630      	mov	r0, r6
   e4052:	4639      	mov	r1, r7
   e4054:	2200      	movs	r2, #0
   e4056:	f7fd fe6b 	bl	e1d30 <__aeabi_dmul>
   e405a:	9b07      	ldr	r3, [sp, #28]
   e405c:	4606      	mov	r6, r0
   e405e:	460f      	mov	r7, r1
   e4060:	b923      	cbnz	r3, e406c <_strtod_r+0x9d4>
   e4062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e4066:	900e      	str	r0, [sp, #56]	; 0x38
   e4068:	930f      	str	r3, [sp, #60]	; 0x3c
   e406a:	e001      	b.n	e4070 <_strtod_r+0x9d8>
   e406c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e4070:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e4074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4078:	0d1b      	lsrs	r3, r3, #20
   e407a:	051b      	lsls	r3, r3, #20
   e407c:	9306      	str	r3, [sp, #24]
   e407e:	9a06      	ldr	r2, [sp, #24]
   e4080:	4b81      	ldr	r3, [pc, #516]	; (e4288 <_strtod_r+0xbf0>)
   e4082:	429a      	cmp	r2, r3
   e4084:	d12b      	bne.n	e40de <_strtod_r+0xa46>
   e4086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e408a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e408e:	ec4b ab10 	vmov	d0, sl, fp
   e4092:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e4096:	f001 fb4b 	bl	e5730 <__ulp>
   e409a:	4640      	mov	r0, r8
   e409c:	ec53 2b10 	vmov	r2, r3, d0
   e40a0:	4649      	mov	r1, r9
   e40a2:	f7fd fe45 	bl	e1d30 <__aeabi_dmul>
   e40a6:	4652      	mov	r2, sl
   e40a8:	465b      	mov	r3, fp
   e40aa:	f7fd fc8f 	bl	e19cc <__adddf3>
   e40ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e40b2:	0d1b      	lsrs	r3, r3, #20
   e40b4:	4a75      	ldr	r2, [pc, #468]	; (e428c <_strtod_r+0xbf4>)
   e40b6:	051b      	lsls	r3, r3, #20
   e40b8:	4293      	cmp	r3, r2
   e40ba:	4682      	mov	sl, r0
   e40bc:	d90c      	bls.n	e40d8 <_strtod_r+0xa40>
   e40be:	4b74      	ldr	r3, [pc, #464]	; (e4290 <_strtod_r+0xbf8>)
   e40c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e40c2:	429a      	cmp	r2, r3
   e40c4:	d103      	bne.n	e40ce <_strtod_r+0xa36>
   e40c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e40c8:	3301      	adds	r3, #1
   e40ca:	f43f ad2c 	beq.w	e3b26 <_strtod_r+0x48e>
   e40ce:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e4290 <_strtod_r+0xbf8>
   e40d2:	f04f 3aff 	mov.w	sl, #4294967295
   e40d6:	e072      	b.n	e41be <_strtod_r+0xb26>
   e40d8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e40dc:	e038      	b.n	e4150 <_strtod_r+0xab8>
   e40de:	9b03      	ldr	r3, [sp, #12]
   e40e0:	b333      	cbz	r3, e4130 <_strtod_r+0xa98>
   e40e2:	9b06      	ldr	r3, [sp, #24]
   e40e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e40e8:	d822      	bhi.n	e4130 <_strtod_r+0xa98>
   e40ea:	a35d      	add	r3, pc, #372	; (adr r3, e4260 <_strtod_r+0xbc8>)
   e40ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e40f0:	4630      	mov	r0, r6
   e40f2:	4639      	mov	r1, r7
   e40f4:	f7fe f898 	bl	e2228 <__aeabi_dcmple>
   e40f8:	b1a8      	cbz	r0, e4126 <_strtod_r+0xa8e>
   e40fa:	4639      	mov	r1, r7
   e40fc:	4630      	mov	r0, r6
   e40fe:	f7fe f8ef 	bl	e22e0 <__aeabi_d2uiz>
   e4102:	2800      	cmp	r0, #0
   e4104:	bf08      	it	eq
   e4106:	2001      	moveq	r0, #1
   e4108:	f7fd fd9c 	bl	e1c44 <__aeabi_ui2d>
   e410c:	9b07      	ldr	r3, [sp, #28]
   e410e:	4606      	mov	r6, r0
   e4110:	460f      	mov	r7, r1
   e4112:	b923      	cbnz	r3, e411e <_strtod_r+0xa86>
   e4114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e4118:	9010      	str	r0, [sp, #64]	; 0x40
   e411a:	9311      	str	r3, [sp, #68]	; 0x44
   e411c:	e001      	b.n	e4122 <_strtod_r+0xa8a>
   e411e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e4122:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e4126:	9a06      	ldr	r2, [sp, #24]
   e4128:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e412c:	ebc2 0903 	rsb	r9, r2, r3
   e4130:	ed9d 0b08 	vldr	d0, [sp, #32]
   e4134:	f001 fafc 	bl	e5730 <__ulp>
   e4138:	4640      	mov	r0, r8
   e413a:	ec53 2b10 	vmov	r2, r3, d0
   e413e:	4649      	mov	r1, r9
   e4140:	f7fd fdf6 	bl	e1d30 <__aeabi_dmul>
   e4144:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e4148:	f7fd fc40 	bl	e19cc <__adddf3>
   e414c:	4682      	mov	sl, r0
   e414e:	468b      	mov	fp, r1
   e4150:	9b03      	ldr	r3, [sp, #12]
   e4152:	bba3      	cbnz	r3, e41be <_strtod_r+0xb26>
   e4154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e4158:	0d1b      	lsrs	r3, r3, #20
   e415a:	9a06      	ldr	r2, [sp, #24]
   e415c:	051b      	lsls	r3, r3, #20
   e415e:	429a      	cmp	r2, r3
   e4160:	46d8      	mov	r8, fp
   e4162:	d12c      	bne.n	e41be <_strtod_r+0xb26>
   e4164:	4639      	mov	r1, r7
   e4166:	4630      	mov	r0, r6
   e4168:	f7fe f892 	bl	e2290 <__aeabi_d2iz>
   e416c:	f7fd fd7a 	bl	e1c64 <__aeabi_i2d>
   e4170:	460b      	mov	r3, r1
   e4172:	4602      	mov	r2, r0
   e4174:	4639      	mov	r1, r7
   e4176:	4630      	mov	r0, r6
   e4178:	f7fd fc26 	bl	e19c8 <__aeabi_dsub>
   e417c:	9b07      	ldr	r3, [sp, #28]
   e417e:	4606      	mov	r6, r0
   e4180:	460f      	mov	r7, r1
   e4182:	b92b      	cbnz	r3, e4190 <_strtod_r+0xaf8>
   e4184:	f1ba 0f00 	cmp.w	sl, #0
   e4188:	d102      	bne.n	e4190 <_strtod_r+0xaf8>
   e418a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e418e:	b183      	cbz	r3, e41b2 <_strtod_r+0xb1a>
   e4190:	a335      	add	r3, pc, #212	; (adr r3, e4268 <_strtod_r+0xbd0>)
   e4192:	e9d3 2300 	ldrd	r2, r3, [r3]
   e4196:	4630      	mov	r0, r6
   e4198:	4639      	mov	r1, r7
   e419a:	f7fe f83b 	bl	e2214 <__aeabi_dcmplt>
   e419e:	2800      	cmp	r0, #0
   e41a0:	d131      	bne.n	e4206 <_strtod_r+0xb6e>
   e41a2:	a333      	add	r3, pc, #204	; (adr r3, e4270 <_strtod_r+0xbd8>)
   e41a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e41a8:	4630      	mov	r0, r6
   e41aa:	4639      	mov	r1, r7
   e41ac:	f7fe f850 	bl	e2250 <__aeabi_dcmpgt>
   e41b0:	e004      	b.n	e41bc <_strtod_r+0xb24>
   e41b2:	a331      	add	r3, pc, #196	; (adr r3, e4278 <_strtod_r+0xbe0>)
   e41b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e41b8:	f7fe f82c 	bl	e2214 <__aeabi_dcmplt>
   e41bc:	bb18      	cbnz	r0, e4206 <_strtod_r+0xb6e>
   e41be:	9918      	ldr	r1, [sp, #96]	; 0x60
   e41c0:	9802      	ldr	r0, [sp, #8]
   e41c2:	f001 f824 	bl	e520e <_Bfree>
   e41c6:	9904      	ldr	r1, [sp, #16]
   e41c8:	9802      	ldr	r0, [sp, #8]
   e41ca:	f001 f820 	bl	e520e <_Bfree>
   e41ce:	4629      	mov	r1, r5
   e41d0:	9802      	ldr	r0, [sp, #8]
   e41d2:	f001 f81c 	bl	e520e <_Bfree>
   e41d6:	4621      	mov	r1, r4
   e41d8:	9802      	ldr	r0, [sp, #8]
   e41da:	f001 f818 	bl	e520e <_Bfree>
   e41de:	e56d      	b.n	e3cbc <_strtod_r+0x624>
   e41e0:	9b03      	ldr	r3, [sp, #12]
   e41e2:	b183      	cbz	r3, e4206 <_strtod_r+0xb6e>
   e41e4:	4b2b      	ldr	r3, [pc, #172]	; (e4294 <_strtod_r+0xbfc>)
   e41e6:	930b      	str	r3, [sp, #44]	; 0x2c
   e41e8:	2300      	movs	r3, #0
   e41ea:	930a      	str	r3, [sp, #40]	; 0x28
   e41ec:	4650      	mov	r0, sl
   e41ee:	4659      	mov	r1, fp
   e41f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e41f4:	f7fd fd9c 	bl	e1d30 <__aeabi_dmul>
   e41f8:	4682      	mov	sl, r0
   e41fa:	468b      	mov	fp, r1
   e41fc:	b919      	cbnz	r1, e4206 <_strtod_r+0xb6e>
   e41fe:	b910      	cbnz	r0, e4206 <_strtod_r+0xb6e>
   e4200:	9a02      	ldr	r2, [sp, #8]
   e4202:	2322      	movs	r3, #34	; 0x22
   e4204:	6013      	str	r3, [r2, #0]
   e4206:	9918      	ldr	r1, [sp, #96]	; 0x60
   e4208:	9802      	ldr	r0, [sp, #8]
   e420a:	f001 f800 	bl	e520e <_Bfree>
   e420e:	9904      	ldr	r1, [sp, #16]
   e4210:	9802      	ldr	r0, [sp, #8]
   e4212:	f000 fffc 	bl	e520e <_Bfree>
   e4216:	4629      	mov	r1, r5
   e4218:	9802      	ldr	r0, [sp, #8]
   e421a:	f000 fff8 	bl	e520e <_Bfree>
   e421e:	9905      	ldr	r1, [sp, #20]
   e4220:	9802      	ldr	r0, [sp, #8]
   e4222:	f000 fff4 	bl	e520e <_Bfree>
   e4226:	4621      	mov	r1, r4
   e4228:	9802      	ldr	r0, [sp, #8]
   e422a:	f000 fff0 	bl	e520e <_Bfree>
   e422e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e4230:	b113      	cbz	r3, e4238 <_strtod_r+0xba0>
   e4232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e4234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e4236:	6013      	str	r3, [r2, #0]
   e4238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e423a:	b11b      	cbz	r3, e4244 <_strtod_r+0xbac>
   e423c:	4652      	mov	r2, sl
   e423e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e4242:	e007      	b.n	e4254 <_strtod_r+0xbbc>
   e4244:	4652      	mov	r2, sl
   e4246:	465b      	mov	r3, fp
   e4248:	e004      	b.n	e4254 <_strtod_r+0xbbc>
   e424a:	2500      	movs	r5, #0
   e424c:	462a      	mov	r2, r5
   e424e:	2101      	movs	r1, #1
   e4250:	f7ff bb41 	b.w	e38d6 <_strtod_r+0x23e>
   e4254:	ec43 2b10 	vmov	d0, r2, r3
   e4258:	b01d      	add	sp, #116	; 0x74
   e425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e425e:	bf00      	nop
   e4260:	ffc00000 	.word	0xffc00000
   e4264:	41dfffff 	.word	0x41dfffff
   e4268:	94a03595 	.word	0x94a03595
   e426c:	3fdfffff 	.word	0x3fdfffff
   e4270:	35afe535 	.word	0x35afe535
   e4274:	3fe00000 	.word	0x3fe00000
   e4278:	94a03595 	.word	0x94a03595
   e427c:	3fcfffff 	.word	0x3fcfffff
   e4280:	3ff00000 	.word	0x3ff00000
   e4284:	3fe00000 	.word	0x3fe00000
   e4288:	7fe00000 	.word	0x7fe00000
   e428c:	7c9fffff 	.word	0x7c9fffff
   e4290:	7fefffff 	.word	0x7fefffff
   e4294:	39500000 	.word	0x39500000

000e4298 <strtod>:
   e4298:	4b02      	ldr	r3, [pc, #8]	; (e42a4 <strtod+0xc>)
   e429a:	460a      	mov	r2, r1
   e429c:	4601      	mov	r1, r0
   e429e:	6818      	ldr	r0, [r3, #0]
   e42a0:	f7ff b9fa 	b.w	e3698 <_strtod_r>
   e42a4:	2003d69c 	.word	0x2003d69c

000e42a8 <_strtol_r>:
   e42a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e42ac:	4680      	mov	r8, r0
   e42ae:	4840      	ldr	r0, [pc, #256]	; (e43b0 <_strtol_r+0x108>)
   e42b0:	f8d0 9000 	ldr.w	r9, [r0]
   e42b4:	460f      	mov	r7, r1
   e42b6:	463d      	mov	r5, r7
   e42b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   e42bc:	eb09 0004 	add.w	r0, r9, r4
   e42c0:	7840      	ldrb	r0, [r0, #1]
   e42c2:	f000 0008 	and.w	r0, r0, #8
   e42c6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e42ca:	b108      	cbz	r0, e42d0 <_strtol_r+0x28>
   e42cc:	462f      	mov	r7, r5
   e42ce:	e7f2      	b.n	e42b6 <_strtol_r+0xe>
   e42d0:	2c2d      	cmp	r4, #45	; 0x2d
   e42d2:	d103      	bne.n	e42dc <_strtol_r+0x34>
   e42d4:	1cbd      	adds	r5, r7, #2
   e42d6:	787c      	ldrb	r4, [r7, #1]
   e42d8:	2601      	movs	r6, #1
   e42da:	e003      	b.n	e42e4 <_strtol_r+0x3c>
   e42dc:	2c2b      	cmp	r4, #43	; 0x2b
   e42de:	bf04      	itt	eq
   e42e0:	787c      	ldrbeq	r4, [r7, #1]
   e42e2:	1cbd      	addeq	r5, r7, #2
   e42e4:	b113      	cbz	r3, e42ec <_strtol_r+0x44>
   e42e6:	2b10      	cmp	r3, #16
   e42e8:	d10a      	bne.n	e4300 <_strtol_r+0x58>
   e42ea:	e05b      	b.n	e43a4 <_strtol_r+0xfc>
   e42ec:	2c30      	cmp	r4, #48	; 0x30
   e42ee:	d157      	bne.n	e43a0 <_strtol_r+0xf8>
   e42f0:	7828      	ldrb	r0, [r5, #0]
   e42f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e42f6:	2858      	cmp	r0, #88	; 0x58
   e42f8:	d14d      	bne.n	e4396 <_strtol_r+0xee>
   e42fa:	786c      	ldrb	r4, [r5, #1]
   e42fc:	2310      	movs	r3, #16
   e42fe:	3502      	adds	r5, #2
   e4300:	2e00      	cmp	r6, #0
   e4302:	bf14      	ite	ne
   e4304:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e4308:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e430c:	2700      	movs	r7, #0
   e430e:	fbbc faf3 	udiv	sl, ip, r3
   e4312:	4638      	mov	r0, r7
   e4314:	fb03 cc1a 	mls	ip, r3, sl, ip
   e4318:	eb09 0e04 	add.w	lr, r9, r4
   e431c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e4320:	f01e 0f04 	tst.w	lr, #4
   e4324:	d001      	beq.n	e432a <_strtol_r+0x82>
   e4326:	3c30      	subs	r4, #48	; 0x30
   e4328:	e00b      	b.n	e4342 <_strtol_r+0x9a>
   e432a:	f01e 0e03 	ands.w	lr, lr, #3
   e432e:	d01b      	beq.n	e4368 <_strtol_r+0xc0>
   e4330:	f1be 0f01 	cmp.w	lr, #1
   e4334:	bf0c      	ite	eq
   e4336:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e433a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e433e:	ebce 0404 	rsb	r4, lr, r4
   e4342:	42a3      	cmp	r3, r4
   e4344:	dd10      	ble.n	e4368 <_strtol_r+0xc0>
   e4346:	f1b7 3fff 	cmp.w	r7, #4294967295
   e434a:	d00a      	beq.n	e4362 <_strtol_r+0xba>
   e434c:	4550      	cmp	r0, sl
   e434e:	d806      	bhi.n	e435e <_strtol_r+0xb6>
   e4350:	d101      	bne.n	e4356 <_strtol_r+0xae>
   e4352:	4564      	cmp	r4, ip
   e4354:	dc03      	bgt.n	e435e <_strtol_r+0xb6>
   e4356:	fb03 4000 	mla	r0, r3, r0, r4
   e435a:	2701      	movs	r7, #1
   e435c:	e001      	b.n	e4362 <_strtol_r+0xba>
   e435e:	f04f 37ff 	mov.w	r7, #4294967295
   e4362:	f815 4b01 	ldrb.w	r4, [r5], #1
   e4366:	e7d7      	b.n	e4318 <_strtol_r+0x70>
   e4368:	1c7b      	adds	r3, r7, #1
   e436a:	d10c      	bne.n	e4386 <_strtol_r+0xde>
   e436c:	2e00      	cmp	r6, #0
   e436e:	f04f 0322 	mov.w	r3, #34	; 0x22
   e4372:	bf14      	ite	ne
   e4374:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e4378:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e437c:	f8c8 3000 	str.w	r3, [r8]
   e4380:	b92a      	cbnz	r2, e438e <_strtol_r+0xe6>
   e4382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4386:	b106      	cbz	r6, e438a <_strtol_r+0xe2>
   e4388:	4240      	negs	r0, r0
   e438a:	b172      	cbz	r2, e43aa <_strtol_r+0x102>
   e438c:	b107      	cbz	r7, e4390 <_strtol_r+0xe8>
   e438e:	1e69      	subs	r1, r5, #1
   e4390:	6011      	str	r1, [r2, #0]
   e4392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4396:	2430      	movs	r4, #48	; 0x30
   e4398:	2b00      	cmp	r3, #0
   e439a:	d1b1      	bne.n	e4300 <_strtol_r+0x58>
   e439c:	2308      	movs	r3, #8
   e439e:	e7af      	b.n	e4300 <_strtol_r+0x58>
   e43a0:	230a      	movs	r3, #10
   e43a2:	e7ad      	b.n	e4300 <_strtol_r+0x58>
   e43a4:	2c30      	cmp	r4, #48	; 0x30
   e43a6:	d0a3      	beq.n	e42f0 <_strtol_r+0x48>
   e43a8:	e7aa      	b.n	e4300 <_strtol_r+0x58>
   e43aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e43ae:	bf00      	nop
   e43b0:	2003d638 	.word	0x2003d638

000e43b4 <strtol>:
   e43b4:	4613      	mov	r3, r2
   e43b6:	460a      	mov	r2, r1
   e43b8:	4601      	mov	r1, r0
   e43ba:	4802      	ldr	r0, [pc, #8]	; (e43c4 <strtol+0x10>)
   e43bc:	6800      	ldr	r0, [r0, #0]
   e43be:	f7ff bf73 	b.w	e42a8 <_strtol_r>
   e43c2:	bf00      	nop
   e43c4:	2003d69c 	.word	0x2003d69c

000e43c8 <_strtoul_r>:
   e43c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e43cc:	4680      	mov	r8, r0
   e43ce:	483c      	ldr	r0, [pc, #240]	; (e44c0 <_strtoul_r+0xf8>)
   e43d0:	f8d0 9000 	ldr.w	r9, [r0]
   e43d4:	460e      	mov	r6, r1
   e43d6:	4635      	mov	r5, r6
   e43d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   e43dc:	eb09 0004 	add.w	r0, r9, r4
   e43e0:	7840      	ldrb	r0, [r0, #1]
   e43e2:	f000 0008 	and.w	r0, r0, #8
   e43e6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e43ea:	b108      	cbz	r0, e43f0 <_strtoul_r+0x28>
   e43ec:	462e      	mov	r6, r5
   e43ee:	e7f2      	b.n	e43d6 <_strtoul_r+0xe>
   e43f0:	2c2d      	cmp	r4, #45	; 0x2d
   e43f2:	d103      	bne.n	e43fc <_strtoul_r+0x34>
   e43f4:	1cb5      	adds	r5, r6, #2
   e43f6:	7874      	ldrb	r4, [r6, #1]
   e43f8:	2701      	movs	r7, #1
   e43fa:	e003      	b.n	e4404 <_strtoul_r+0x3c>
   e43fc:	2c2b      	cmp	r4, #43	; 0x2b
   e43fe:	bf04      	itt	eq
   e4400:	7874      	ldrbeq	r4, [r6, #1]
   e4402:	1cb5      	addeq	r5, r6, #2
   e4404:	b113      	cbz	r3, e440c <_strtoul_r+0x44>
   e4406:	2b10      	cmp	r3, #16
   e4408:	d10a      	bne.n	e4420 <_strtoul_r+0x58>
   e440a:	e053      	b.n	e44b4 <_strtoul_r+0xec>
   e440c:	2c30      	cmp	r4, #48	; 0x30
   e440e:	d14f      	bne.n	e44b0 <_strtoul_r+0xe8>
   e4410:	7828      	ldrb	r0, [r5, #0]
   e4412:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e4416:	2858      	cmp	r0, #88	; 0x58
   e4418:	d145      	bne.n	e44a6 <_strtoul_r+0xde>
   e441a:	786c      	ldrb	r4, [r5, #1]
   e441c:	2310      	movs	r3, #16
   e441e:	3502      	adds	r5, #2
   e4420:	f04f 3cff 	mov.w	ip, #4294967295
   e4424:	2600      	movs	r6, #0
   e4426:	fbbc fcf3 	udiv	ip, ip, r3
   e442a:	fb03 fa0c 	mul.w	sl, r3, ip
   e442e:	ea6f 0a0a 	mvn.w	sl, sl
   e4432:	4630      	mov	r0, r6
   e4434:	eb09 0e04 	add.w	lr, r9, r4
   e4438:	f89e e001 	ldrb.w	lr, [lr, #1]
   e443c:	f01e 0f04 	tst.w	lr, #4
   e4440:	d001      	beq.n	e4446 <_strtoul_r+0x7e>
   e4442:	3c30      	subs	r4, #48	; 0x30
   e4444:	e00b      	b.n	e445e <_strtoul_r+0x96>
   e4446:	f01e 0e03 	ands.w	lr, lr, #3
   e444a:	d01a      	beq.n	e4482 <_strtoul_r+0xba>
   e444c:	f1be 0f01 	cmp.w	lr, #1
   e4450:	bf0c      	ite	eq
   e4452:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e4456:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e445a:	ebce 0404 	rsb	r4, lr, r4
   e445e:	42a3      	cmp	r3, r4
   e4460:	dd0f      	ble.n	e4482 <_strtoul_r+0xba>
   e4462:	2e00      	cmp	r6, #0
   e4464:	db08      	blt.n	e4478 <_strtoul_r+0xb0>
   e4466:	4560      	cmp	r0, ip
   e4468:	d806      	bhi.n	e4478 <_strtoul_r+0xb0>
   e446a:	d101      	bne.n	e4470 <_strtoul_r+0xa8>
   e446c:	4554      	cmp	r4, sl
   e446e:	dc03      	bgt.n	e4478 <_strtoul_r+0xb0>
   e4470:	fb03 4000 	mla	r0, r3, r0, r4
   e4474:	2601      	movs	r6, #1
   e4476:	e001      	b.n	e447c <_strtoul_r+0xb4>
   e4478:	f04f 36ff 	mov.w	r6, #4294967295
   e447c:	f815 4b01 	ldrb.w	r4, [r5], #1
   e4480:	e7d8      	b.n	e4434 <_strtoul_r+0x6c>
   e4482:	2e00      	cmp	r6, #0
   e4484:	da07      	bge.n	e4496 <_strtoul_r+0xce>
   e4486:	2322      	movs	r3, #34	; 0x22
   e4488:	f8c8 3000 	str.w	r3, [r8]
   e448c:	f04f 30ff 	mov.w	r0, #4294967295
   e4490:	b92a      	cbnz	r2, e449e <_strtoul_r+0xd6>
   e4492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4496:	b107      	cbz	r7, e449a <_strtoul_r+0xd2>
   e4498:	4240      	negs	r0, r0
   e449a:	b172      	cbz	r2, e44ba <_strtoul_r+0xf2>
   e449c:	b106      	cbz	r6, e44a0 <_strtoul_r+0xd8>
   e449e:	1e69      	subs	r1, r5, #1
   e44a0:	6011      	str	r1, [r2, #0]
   e44a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e44a6:	2430      	movs	r4, #48	; 0x30
   e44a8:	2b00      	cmp	r3, #0
   e44aa:	d1b9      	bne.n	e4420 <_strtoul_r+0x58>
   e44ac:	2308      	movs	r3, #8
   e44ae:	e7b7      	b.n	e4420 <_strtoul_r+0x58>
   e44b0:	230a      	movs	r3, #10
   e44b2:	e7b5      	b.n	e4420 <_strtoul_r+0x58>
   e44b4:	2c30      	cmp	r4, #48	; 0x30
   e44b6:	d0ab      	beq.n	e4410 <_strtoul_r+0x48>
   e44b8:	e7b2      	b.n	e4420 <_strtoul_r+0x58>
   e44ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e44be:	bf00      	nop
   e44c0:	2003d638 	.word	0x2003d638

000e44c4 <strtoul>:
   e44c4:	4613      	mov	r3, r2
   e44c6:	460a      	mov	r2, r1
   e44c8:	4601      	mov	r1, r0
   e44ca:	4802      	ldr	r0, [pc, #8]	; (e44d4 <strtoul+0x10>)
   e44cc:	6800      	ldr	r0, [r0, #0]
   e44ce:	f7ff bf7b 	b.w	e43c8 <_strtoul_r>
   e44d2:	bf00      	nop
   e44d4:	2003d69c 	.word	0x2003d69c

000e44d8 <__get_current_time_locale>:
   e44d8:	4b04      	ldr	r3, [pc, #16]	; (e44ec <__get_current_time_locale+0x14>)
   e44da:	4a05      	ldr	r2, [pc, #20]	; (e44f0 <__get_current_time_locale+0x18>)
   e44dc:	6818      	ldr	r0, [r3, #0]
   e44de:	4b05      	ldr	r3, [pc, #20]	; (e44f4 <__get_current_time_locale+0x1c>)
   e44e0:	2800      	cmp	r0, #0
   e44e2:	bf14      	ite	ne
   e44e4:	4610      	movne	r0, r2
   e44e6:	4618      	moveq	r0, r3
   e44e8:	4770      	bx	lr
   e44ea:	bf00      	nop
   e44ec:	2003e6cc 	.word	0x2003e6cc
   e44f0:	2003e6d0 	.word	0x2003e6d0
   e44f4:	000e74e8 	.word	0x000e74e8

000e44f8 <tolower>:
   e44f8:	4b04      	ldr	r3, [pc, #16]	; (e450c <tolower+0x14>)
   e44fa:	681b      	ldr	r3, [r3, #0]
   e44fc:	4403      	add	r3, r0
   e44fe:	785b      	ldrb	r3, [r3, #1]
   e4500:	f003 0303 	and.w	r3, r3, #3
   e4504:	2b01      	cmp	r3, #1
   e4506:	bf08      	it	eq
   e4508:	3020      	addeq	r0, #32
   e450a:	4770      	bx	lr
   e450c:	2003d638 	.word	0x2003d638

000e4510 <__tzcalc_limits>:
   e4510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4514:	4604      	mov	r4, r0
   e4516:	f000 fda5 	bl	e5064 <__gettzinfo>
   e451a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e451e:	429c      	cmp	r4, r3
   e4520:	f340 8096 	ble.w	e4650 <__tzcalc_limits+0x140>
   e4524:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e4528:	18e3      	adds	r3, r4, r3
   e452a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e452e:	109b      	asrs	r3, r3, #2
   e4530:	f240 156d 	movw	r5, #365	; 0x16d
   e4534:	fb05 3502 	mla	r5, r5, r2, r3
   e4538:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e453c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e4540:	fb92 f3f3 	sdiv	r3, r2, r3
   e4544:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e4548:	442b      	add	r3, r5
   e454a:	18a5      	adds	r5, r4, r2
   e454c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4550:	fb95 f5f2 	sdiv	r5, r5, r2
   e4554:	441d      	add	r5, r3
   e4556:	2364      	movs	r3, #100	; 0x64
   e4558:	fb94 f7f2 	sdiv	r7, r4, r2
   e455c:	fb94 f6f3 	sdiv	r6, r4, r3
   e4560:	fb02 4717 	mls	r7, r2, r7, r4
   e4564:	fb03 4616 	mls	r6, r3, r6, r4
   e4568:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e456c:	fab7 fe87 	clz	lr, r7
   e4570:	9301      	str	r3, [sp, #4]
   e4572:	f004 0303 	and.w	r3, r4, #3
   e4576:	6044      	str	r4, [r0, #4]
   e4578:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e457c:	4601      	mov	r1, r0
   e457e:	9300      	str	r3, [sp, #0]
   e4580:	f04f 0c07 	mov.w	ip, #7
   e4584:	7a0b      	ldrb	r3, [r1, #8]
   e4586:	2b4a      	cmp	r3, #74	; 0x4a
   e4588:	d10e      	bne.n	e45a8 <__tzcalc_limits+0x98>
   e458a:	694b      	ldr	r3, [r1, #20]
   e458c:	9a00      	ldr	r2, [sp, #0]
   e458e:	18ec      	adds	r4, r5, r3
   e4590:	b902      	cbnz	r2, e4594 <__tzcalc_limits+0x84>
   e4592:	b906      	cbnz	r6, e4596 <__tzcalc_limits+0x86>
   e4594:	b927      	cbnz	r7, e45a0 <__tzcalc_limits+0x90>
   e4596:	2b3b      	cmp	r3, #59	; 0x3b
   e4598:	bfd4      	ite	le
   e459a:	2300      	movle	r3, #0
   e459c:	2301      	movgt	r3, #1
   e459e:	e000      	b.n	e45a2 <__tzcalc_limits+0x92>
   e45a0:	2300      	movs	r3, #0
   e45a2:	4423      	add	r3, r4
   e45a4:	3b01      	subs	r3, #1
   e45a6:	e03f      	b.n	e4628 <__tzcalc_limits+0x118>
   e45a8:	2b44      	cmp	r3, #68	; 0x44
   e45aa:	d102      	bne.n	e45b2 <__tzcalc_limits+0xa2>
   e45ac:	694b      	ldr	r3, [r1, #20]
   e45ae:	442b      	add	r3, r5
   e45b0:	e03a      	b.n	e4628 <__tzcalc_limits+0x118>
   e45b2:	9b00      	ldr	r3, [sp, #0]
   e45b4:	b92b      	cbnz	r3, e45c2 <__tzcalc_limits+0xb2>
   e45b6:	2e00      	cmp	r6, #0
   e45b8:	bf0c      	ite	eq
   e45ba:	46f0      	moveq	r8, lr
   e45bc:	f04f 0801 	movne.w	r8, #1
   e45c0:	e000      	b.n	e45c4 <__tzcalc_limits+0xb4>
   e45c2:	46f0      	mov	r8, lr
   e45c4:	4b24      	ldr	r3, [pc, #144]	; (e4658 <__tzcalc_limits+0x148>)
   e45c6:	68cc      	ldr	r4, [r1, #12]
   e45c8:	2230      	movs	r2, #48	; 0x30
   e45ca:	fb02 3808 	mla	r8, r2, r8, r3
   e45ce:	f1a8 0a04 	sub.w	sl, r8, #4
   e45d2:	46a9      	mov	r9, r5
   e45d4:	2301      	movs	r3, #1
   e45d6:	42a3      	cmp	r3, r4
   e45d8:	da04      	bge.n	e45e4 <__tzcalc_limits+0xd4>
   e45da:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e45de:	3301      	adds	r3, #1
   e45e0:	44d9      	add	r9, fp
   e45e2:	e7f8      	b.n	e45d6 <__tzcalc_limits+0xc6>
   e45e4:	f109 0304 	add.w	r3, r9, #4
   e45e8:	fb93 fbfc 	sdiv	fp, r3, ip
   e45ec:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e45f0:	2c01      	cmp	r4, #1
   e45f2:	ebca 0a03 	rsb	sl, sl, r3
   e45f6:	694b      	ldr	r3, [r1, #20]
   e45f8:	bfb8      	it	lt
   e45fa:	2401      	movlt	r4, #1
   e45fc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e4600:	ebb3 0a0a 	subs.w	sl, r3, sl
   e4604:	690b      	ldr	r3, [r1, #16]
   e4606:	f104 34ff 	add.w	r4, r4, #4294967295
   e460a:	f103 33ff 	add.w	r3, r3, #4294967295
   e460e:	bf48      	it	mi
   e4610:	f10a 0a07 	addmi.w	sl, sl, #7
   e4614:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e4618:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e461c:	4453      	add	r3, sl
   e461e:	42a3      	cmp	r3, r4
   e4620:	db01      	blt.n	e4626 <__tzcalc_limits+0x116>
   e4622:	3b07      	subs	r3, #7
   e4624:	e7fb      	b.n	e461e <__tzcalc_limits+0x10e>
   e4626:	444b      	add	r3, r9
   e4628:	698c      	ldr	r4, [r1, #24]
   e462a:	4a0c      	ldr	r2, [pc, #48]	; (e465c <__tzcalc_limits+0x14c>)
   e462c:	fb02 4303 	mla	r3, r2, r3, r4
   e4630:	6a0c      	ldr	r4, [r1, #32]
   e4632:	4423      	add	r3, r4
   e4634:	f841 3f1c 	str.w	r3, [r1, #28]!
   e4638:	9b01      	ldr	r3, [sp, #4]
   e463a:	4299      	cmp	r1, r3
   e463c:	d1a2      	bne.n	e4584 <__tzcalc_limits+0x74>
   e463e:	69c3      	ldr	r3, [r0, #28]
   e4640:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e4642:	4293      	cmp	r3, r2
   e4644:	bfac      	ite	ge
   e4646:	2300      	movge	r3, #0
   e4648:	2301      	movlt	r3, #1
   e464a:	6003      	str	r3, [r0, #0]
   e464c:	2001      	movs	r0, #1
   e464e:	e000      	b.n	e4652 <__tzcalc_limits+0x142>
   e4650:	2000      	movs	r0, #0
   e4652:	b003      	add	sp, #12
   e4654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4658:	000e72a4 	.word	0x000e72a4
   e465c:	00015180 	.word	0x00015180

000e4660 <__tz_lock>:
   e4660:	4770      	bx	lr

000e4662 <__tz_unlock>:
   e4662:	4770      	bx	lr

000e4664 <_tzset_unlocked>:
   e4664:	4b01      	ldr	r3, [pc, #4]	; (e466c <_tzset_unlocked+0x8>)
   e4666:	6818      	ldr	r0, [r3, #0]
   e4668:	f000 b802 	b.w	e4670 <_tzset_unlocked_r>
   e466c:	2003d69c 	.word	0x2003d69c

000e4670 <_tzset_unlocked_r>:
   e4670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4674:	b08d      	sub	sp, #52	; 0x34
   e4676:	4607      	mov	r7, r0
   e4678:	f000 fcf4 	bl	e5064 <__gettzinfo>
   e467c:	49b0      	ldr	r1, [pc, #704]	; (e4940 <_tzset_unlocked_r+0x2d0>)
   e467e:	4eb1      	ldr	r6, [pc, #708]	; (e4944 <_tzset_unlocked_r+0x2d4>)
   e4680:	4604      	mov	r4, r0
   e4682:	4638      	mov	r0, r7
   e4684:	f000 fce6 	bl	e5054 <_getenv_r>
   e4688:	4605      	mov	r5, r0
   e468a:	b960      	cbnz	r0, e46a6 <_tzset_unlocked_r+0x36>
   e468c:	4bae      	ldr	r3, [pc, #696]	; (e4948 <_tzset_unlocked_r+0x2d8>)
   e468e:	4aaf      	ldr	r2, [pc, #700]	; (e494c <_tzset_unlocked_r+0x2dc>)
   e4690:	6018      	str	r0, [r3, #0]
   e4692:	4baf      	ldr	r3, [pc, #700]	; (e4950 <_tzset_unlocked_r+0x2e0>)
   e4694:	6018      	str	r0, [r3, #0]
   e4696:	4baf      	ldr	r3, [pc, #700]	; (e4954 <_tzset_unlocked_r+0x2e4>)
   e4698:	6830      	ldr	r0, [r6, #0]
   e469a:	601a      	str	r2, [r3, #0]
   e469c:	605a      	str	r2, [r3, #4]
   e469e:	f7f5 fb0f 	bl	d9cc0 <free>
   e46a2:	6035      	str	r5, [r6, #0]
   e46a4:	e148      	b.n	e4938 <_tzset_unlocked_r+0x2c8>
   e46a6:	6831      	ldr	r1, [r6, #0]
   e46a8:	b979      	cbnz	r1, e46ca <_tzset_unlocked_r+0x5a>
   e46aa:	6830      	ldr	r0, [r6, #0]
   e46ac:	f7f5 fb08 	bl	d9cc0 <free>
   e46b0:	4628      	mov	r0, r5
   e46b2:	f7fe ffa3 	bl	e35fc <strlen>
   e46b6:	1c41      	adds	r1, r0, #1
   e46b8:	4638      	mov	r0, r7
   e46ba:	f7f5 fb41 	bl	d9d40 <_malloc_r>
   e46be:	6030      	str	r0, [r6, #0]
   e46c0:	b148      	cbz	r0, e46d6 <_tzset_unlocked_r+0x66>
   e46c2:	4629      	mov	r1, r5
   e46c4:	f7fe fa62 	bl	e2b8c <strcpy>
   e46c8:	e005      	b.n	e46d6 <_tzset_unlocked_r+0x66>
   e46ca:	f7fe fa55 	bl	e2b78 <strcmp>
   e46ce:	2800      	cmp	r0, #0
   e46d0:	f000 8132 	beq.w	e4938 <_tzset_unlocked_r+0x2c8>
   e46d4:	e7e9      	b.n	e46aa <_tzset_unlocked_r+0x3a>
   e46d6:	782b      	ldrb	r3, [r5, #0]
   e46d8:	4a9f      	ldr	r2, [pc, #636]	; (e4958 <_tzset_unlocked_r+0x2e8>)
   e46da:	49a0      	ldr	r1, [pc, #640]	; (e495c <_tzset_unlocked_r+0x2ec>)
   e46dc:	2b3a      	cmp	r3, #58	; 0x3a
   e46de:	bf08      	it	eq
   e46e0:	3501      	addeq	r5, #1
   e46e2:	ae0a      	add	r6, sp, #40	; 0x28
   e46e4:	4633      	mov	r3, r6
   e46e6:	4628      	mov	r0, r5
   e46e8:	f7f5 fb02 	bl	d9cf0 <siscanf>
   e46ec:	2800      	cmp	r0, #0
   e46ee:	f340 8123 	ble.w	e4938 <_tzset_unlocked_r+0x2c8>
   e46f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e46f4:	18ef      	adds	r7, r5, r3
   e46f6:	5ceb      	ldrb	r3, [r5, r3]
   e46f8:	2b2d      	cmp	r3, #45	; 0x2d
   e46fa:	d103      	bne.n	e4704 <_tzset_unlocked_r+0x94>
   e46fc:	3701      	adds	r7, #1
   e46fe:	f04f 35ff 	mov.w	r5, #4294967295
   e4702:	e003      	b.n	e470c <_tzset_unlocked_r+0x9c>
   e4704:	2b2b      	cmp	r3, #43	; 0x2b
   e4706:	bf08      	it	eq
   e4708:	3701      	addeq	r7, #1
   e470a:	2501      	movs	r5, #1
   e470c:	f10d 0a20 	add.w	sl, sp, #32
   e4710:	f10d 0b1e 	add.w	fp, sp, #30
   e4714:	f04f 0800 	mov.w	r8, #0
   e4718:	9603      	str	r6, [sp, #12]
   e471a:	f8cd a008 	str.w	sl, [sp, #8]
   e471e:	9601      	str	r6, [sp, #4]
   e4720:	f8cd b000 	str.w	fp, [sp]
   e4724:	4633      	mov	r3, r6
   e4726:	aa07      	add	r2, sp, #28
   e4728:	498d      	ldr	r1, [pc, #564]	; (e4960 <_tzset_unlocked_r+0x2f0>)
   e472a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e472e:	4638      	mov	r0, r7
   e4730:	f8ad 8020 	strh.w	r8, [sp, #32]
   e4734:	f7f5 fadc 	bl	d9cf0 <siscanf>
   e4738:	4540      	cmp	r0, r8
   e473a:	f340 80fd 	ble.w	e4938 <_tzset_unlocked_r+0x2c8>
   e473e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e4742:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e4746:	f8df 9224 	ldr.w	r9, [pc, #548]	; e496c <_tzset_unlocked_r+0x2fc>
   e474a:	213c      	movs	r1, #60	; 0x3c
   e474c:	fb01 3302 	mla	r3, r1, r2, r3
   e4750:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e4754:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e4758:	fb01 3302 	mla	r3, r1, r2, r3
   e475c:	435d      	muls	r5, r3
   e475e:	6225      	str	r5, [r4, #32]
   e4760:	4d7c      	ldr	r5, [pc, #496]	; (e4954 <_tzset_unlocked_r+0x2e4>)
   e4762:	4b7d      	ldr	r3, [pc, #500]	; (e4958 <_tzset_unlocked_r+0x2e8>)
   e4764:	602b      	str	r3, [r5, #0]
   e4766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4768:	497c      	ldr	r1, [pc, #496]	; (e495c <_tzset_unlocked_r+0x2ec>)
   e476a:	441f      	add	r7, r3
   e476c:	464a      	mov	r2, r9
   e476e:	4633      	mov	r3, r6
   e4770:	4638      	mov	r0, r7
   e4772:	f7f5 fabd 	bl	d9cf0 <siscanf>
   e4776:	4540      	cmp	r0, r8
   e4778:	dc08      	bgt.n	e478c <_tzset_unlocked_r+0x11c>
   e477a:	682b      	ldr	r3, [r5, #0]
   e477c:	606b      	str	r3, [r5, #4]
   e477e:	4b72      	ldr	r3, [pc, #456]	; (e4948 <_tzset_unlocked_r+0x2d8>)
   e4780:	6a22      	ldr	r2, [r4, #32]
   e4782:	601a      	str	r2, [r3, #0]
   e4784:	4b72      	ldr	r3, [pc, #456]	; (e4950 <_tzset_unlocked_r+0x2e0>)
   e4786:	f8c3 8000 	str.w	r8, [r3]
   e478a:	e0d5      	b.n	e4938 <_tzset_unlocked_r+0x2c8>
   e478c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e478e:	f8c5 9004 	str.w	r9, [r5, #4]
   e4792:	18fd      	adds	r5, r7, r3
   e4794:	5cfb      	ldrb	r3, [r7, r3]
   e4796:	2b2d      	cmp	r3, #45	; 0x2d
   e4798:	d103      	bne.n	e47a2 <_tzset_unlocked_r+0x132>
   e479a:	3501      	adds	r5, #1
   e479c:	f04f 37ff 	mov.w	r7, #4294967295
   e47a0:	e003      	b.n	e47aa <_tzset_unlocked_r+0x13a>
   e47a2:	2b2b      	cmp	r3, #43	; 0x2b
   e47a4:	bf08      	it	eq
   e47a6:	3501      	addeq	r5, #1
   e47a8:	2701      	movs	r7, #1
   e47aa:	2300      	movs	r3, #0
   e47ac:	f8ad 301c 	strh.w	r3, [sp, #28]
   e47b0:	f8ad 301e 	strh.w	r3, [sp, #30]
   e47b4:	f8ad 3020 	strh.w	r3, [sp, #32]
   e47b8:	930a      	str	r3, [sp, #40]	; 0x28
   e47ba:	9603      	str	r6, [sp, #12]
   e47bc:	f8cd a008 	str.w	sl, [sp, #8]
   e47c0:	9601      	str	r6, [sp, #4]
   e47c2:	f8cd b000 	str.w	fp, [sp]
   e47c6:	4633      	mov	r3, r6
   e47c8:	aa07      	add	r2, sp, #28
   e47ca:	4965      	ldr	r1, [pc, #404]	; (e4960 <_tzset_unlocked_r+0x2f0>)
   e47cc:	4628      	mov	r0, r5
   e47ce:	f7f5 fa8f 	bl	d9cf0 <siscanf>
   e47d2:	2800      	cmp	r0, #0
   e47d4:	dc04      	bgt.n	e47e0 <_tzset_unlocked_r+0x170>
   e47d6:	6a23      	ldr	r3, [r4, #32]
   e47d8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e47dc:	63e3      	str	r3, [r4, #60]	; 0x3c
   e47de:	e00e      	b.n	e47fe <_tzset_unlocked_r+0x18e>
   e47e0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e47e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e47e8:	213c      	movs	r1, #60	; 0x3c
   e47ea:	fb01 3302 	mla	r3, r1, r2, r3
   e47ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e47f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e47f6:	fb01 3302 	mla	r3, r1, r2, r3
   e47fa:	435f      	muls	r7, r3
   e47fc:	63e7      	str	r7, [r4, #60]	; 0x3c
   e47fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4800:	4627      	mov	r7, r4
   e4802:	441d      	add	r5, r3
   e4804:	f04f 0900 	mov.w	r9, #0
   e4808:	782b      	ldrb	r3, [r5, #0]
   e480a:	2b2c      	cmp	r3, #44	; 0x2c
   e480c:	bf08      	it	eq
   e480e:	3501      	addeq	r5, #1
   e4810:	f895 8000 	ldrb.w	r8, [r5]
   e4814:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e4818:	d126      	bne.n	e4868 <_tzset_unlocked_r+0x1f8>
   e481a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e481e:	9302      	str	r3, [sp, #8]
   e4820:	ab09      	add	r3, sp, #36	; 0x24
   e4822:	9300      	str	r3, [sp, #0]
   e4824:	9603      	str	r6, [sp, #12]
   e4826:	9601      	str	r6, [sp, #4]
   e4828:	4633      	mov	r3, r6
   e482a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e482e:	494d      	ldr	r1, [pc, #308]	; (e4964 <_tzset_unlocked_r+0x2f4>)
   e4830:	4628      	mov	r0, r5
   e4832:	f7f5 fa5d 	bl	d9cf0 <siscanf>
   e4836:	2803      	cmp	r0, #3
   e4838:	d17e      	bne.n	e4938 <_tzset_unlocked_r+0x2c8>
   e483a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e483e:	1e4b      	subs	r3, r1, #1
   e4840:	2b0b      	cmp	r3, #11
   e4842:	d879      	bhi.n	e4938 <_tzset_unlocked_r+0x2c8>
   e4844:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e4848:	1e53      	subs	r3, r2, #1
   e484a:	2b04      	cmp	r3, #4
   e484c:	d874      	bhi.n	e4938 <_tzset_unlocked_r+0x2c8>
   e484e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e4852:	2b06      	cmp	r3, #6
   e4854:	d870      	bhi.n	e4938 <_tzset_unlocked_r+0x2c8>
   e4856:	f887 8008 	strb.w	r8, [r7, #8]
   e485a:	60f9      	str	r1, [r7, #12]
   e485c:	613a      	str	r2, [r7, #16]
   e485e:	617b      	str	r3, [r7, #20]
   e4860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4862:	eb05 0803 	add.w	r8, r5, r3
   e4866:	e02a      	b.n	e48be <_tzset_unlocked_r+0x24e>
   e4868:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e486c:	bf06      	itte	eq
   e486e:	3501      	addeq	r5, #1
   e4870:	4643      	moveq	r3, r8
   e4872:	2344      	movne	r3, #68	; 0x44
   e4874:	220a      	movs	r2, #10
   e4876:	a90b      	add	r1, sp, #44	; 0x2c
   e4878:	4628      	mov	r0, r5
   e487a:	9305      	str	r3, [sp, #20]
   e487c:	f7ff fe22 	bl	e44c4 <strtoul>
   e4880:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e4884:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e4888:	4545      	cmp	r5, r8
   e488a:	9b05      	ldr	r3, [sp, #20]
   e488c:	d114      	bne.n	e48b8 <_tzset_unlocked_r+0x248>
   e488e:	234d      	movs	r3, #77	; 0x4d
   e4890:	f1b9 0f00 	cmp.w	r9, #0
   e4894:	d107      	bne.n	e48a6 <_tzset_unlocked_r+0x236>
   e4896:	7223      	strb	r3, [r4, #8]
   e4898:	2303      	movs	r3, #3
   e489a:	60e3      	str	r3, [r4, #12]
   e489c:	2302      	movs	r3, #2
   e489e:	6123      	str	r3, [r4, #16]
   e48a0:	f8c4 9014 	str.w	r9, [r4, #20]
   e48a4:	e00b      	b.n	e48be <_tzset_unlocked_r+0x24e>
   e48a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e48aa:	230b      	movs	r3, #11
   e48ac:	62a3      	str	r3, [r4, #40]	; 0x28
   e48ae:	2301      	movs	r3, #1
   e48b0:	62e3      	str	r3, [r4, #44]	; 0x2c
   e48b2:	2300      	movs	r3, #0
   e48b4:	6323      	str	r3, [r4, #48]	; 0x30
   e48b6:	e002      	b.n	e48be <_tzset_unlocked_r+0x24e>
   e48b8:	b280      	uxth	r0, r0
   e48ba:	723b      	strb	r3, [r7, #8]
   e48bc:	6178      	str	r0, [r7, #20]
   e48be:	2302      	movs	r3, #2
   e48c0:	f8ad 301c 	strh.w	r3, [sp, #28]
   e48c4:	2300      	movs	r3, #0
   e48c6:	f8ad 301e 	strh.w	r3, [sp, #30]
   e48ca:	f8ad 3020 	strh.w	r3, [sp, #32]
   e48ce:	930a      	str	r3, [sp, #40]	; 0x28
   e48d0:	f898 3000 	ldrb.w	r3, [r8]
   e48d4:	2b2f      	cmp	r3, #47	; 0x2f
   e48d6:	d10b      	bne.n	e48f0 <_tzset_unlocked_r+0x280>
   e48d8:	9603      	str	r6, [sp, #12]
   e48da:	f8cd a008 	str.w	sl, [sp, #8]
   e48de:	9601      	str	r6, [sp, #4]
   e48e0:	f8cd b000 	str.w	fp, [sp]
   e48e4:	4633      	mov	r3, r6
   e48e6:	aa07      	add	r2, sp, #28
   e48e8:	491f      	ldr	r1, [pc, #124]	; (e4968 <_tzset_unlocked_r+0x2f8>)
   e48ea:	4640      	mov	r0, r8
   e48ec:	f7f5 fa00 	bl	d9cf0 <siscanf>
   e48f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e48f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e48f8:	213c      	movs	r1, #60	; 0x3c
   e48fa:	fb01 3302 	mla	r3, r1, r2, r3
   e48fe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e4902:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e4906:	fb01 3302 	mla	r3, r1, r2, r3
   e490a:	61bb      	str	r3, [r7, #24]
   e490c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e490e:	f109 0901 	add.w	r9, r9, #1
   e4912:	f1b9 0f02 	cmp.w	r9, #2
   e4916:	4445      	add	r5, r8
   e4918:	f107 071c 	add.w	r7, r7, #28
   e491c:	f47f af74 	bne.w	e4808 <_tzset_unlocked_r+0x198>
   e4920:	6860      	ldr	r0, [r4, #4]
   e4922:	f7ff fdf5 	bl	e4510 <__tzcalc_limits>
   e4926:	4b08      	ldr	r3, [pc, #32]	; (e4948 <_tzset_unlocked_r+0x2d8>)
   e4928:	6a22      	ldr	r2, [r4, #32]
   e492a:	601a      	str	r2, [r3, #0]
   e492c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e492e:	1a9b      	subs	r3, r3, r2
   e4930:	4a07      	ldr	r2, [pc, #28]	; (e4950 <_tzset_unlocked_r+0x2e0>)
   e4932:	bf18      	it	ne
   e4934:	2301      	movne	r3, #1
   e4936:	6013      	str	r3, [r2, #0]
   e4938:	b00d      	add	sp, #52	; 0x34
   e493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e493e:	bf00      	nop
   e4940:	000e75e4 	.word	0x000e75e4
   e4944:	2003e7e4 	.word	0x2003e7e4
   e4948:	2003e7ec 	.word	0x2003e7ec
   e494c:	000e75e7 	.word	0x000e75e7
   e4950:	2003e7e8 	.word	0x2003e7e8
   e4954:	2003d6d8 	.word	0x2003d6d8
   e4958:	2003e7d7 	.word	0x2003e7d7
   e495c:	000e75eb 	.word	0x000e75eb
   e4960:	000e760e 	.word	0x000e760e
   e4964:	000e75fa 	.word	0x000e75fa
   e4968:	000e760d 	.word	0x000e760d
   e496c:	2003e7cc 	.word	0x2003e7cc

000e4970 <abs>:
   e4970:	2800      	cmp	r0, #0
   e4972:	bfb8      	it	lt
   e4974:	4240      	neglt	r0, r0
   e4976:	4770      	bx	lr

000e4978 <div>:
   e4978:	2900      	cmp	r1, #0
   e497a:	b510      	push	{r4, lr}
   e497c:	fb91 f4f2 	sdiv	r4, r1, r2
   e4980:	fb02 1314 	mls	r3, r2, r4, r1
   e4984:	db04      	blt.n	e4990 <div+0x18>
   e4986:	2b00      	cmp	r3, #0
   e4988:	da07      	bge.n	e499a <div+0x22>
   e498a:	3401      	adds	r4, #1
   e498c:	1a9b      	subs	r3, r3, r2
   e498e:	e004      	b.n	e499a <div+0x22>
   e4990:	2b00      	cmp	r3, #0
   e4992:	bfc4      	itt	gt
   e4994:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e4998:	189b      	addgt	r3, r3, r2
   e499a:	6004      	str	r4, [r0, #0]
   e499c:	6043      	str	r3, [r0, #4]
   e499e:	bd10      	pop	{r4, pc}

000e49a0 <rshift>:
   e49a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e49a2:	6906      	ldr	r6, [r0, #16]
   e49a4:	114b      	asrs	r3, r1, #5
   e49a6:	42b3      	cmp	r3, r6
   e49a8:	f100 0514 	add.w	r5, r0, #20
   e49ac:	da27      	bge.n	e49fe <rshift+0x5e>
   e49ae:	f011 011f 	ands.w	r1, r1, #31
   e49b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e49b6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e49ba:	d101      	bne.n	e49c0 <rshift+0x20>
   e49bc:	4629      	mov	r1, r5
   e49be:	e016      	b.n	e49ee <rshift+0x4e>
   e49c0:	1d14      	adds	r4, r2, #4
   e49c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e49c6:	f1c1 0e20 	rsb	lr, r1, #32
   e49ca:	40ca      	lsrs	r2, r1
   e49cc:	462b      	mov	r3, r5
   e49ce:	42b4      	cmp	r4, r6
   e49d0:	d209      	bcs.n	e49e6 <rshift+0x46>
   e49d2:	6827      	ldr	r7, [r4, #0]
   e49d4:	fa07 f70e 	lsl.w	r7, r7, lr
   e49d8:	433a      	orrs	r2, r7
   e49da:	f843 2b04 	str.w	r2, [r3], #4
   e49de:	f854 2b04 	ldr.w	r2, [r4], #4
   e49e2:	40ca      	lsrs	r2, r1
   e49e4:	e7f3      	b.n	e49ce <rshift+0x2e>
   e49e6:	601a      	str	r2, [r3, #0]
   e49e8:	b152      	cbz	r2, e4a00 <rshift+0x60>
   e49ea:	3304      	adds	r3, #4
   e49ec:	e008      	b.n	e4a00 <rshift+0x60>
   e49ee:	42b2      	cmp	r2, r6
   e49f0:	460b      	mov	r3, r1
   e49f2:	d205      	bcs.n	e4a00 <rshift+0x60>
   e49f4:	f852 3b04 	ldr.w	r3, [r2], #4
   e49f8:	f841 3b04 	str.w	r3, [r1], #4
   e49fc:	e7f7      	b.n	e49ee <rshift+0x4e>
   e49fe:	462b      	mov	r3, r5
   e4a00:	1b5b      	subs	r3, r3, r5
   e4a02:	109b      	asrs	r3, r3, #2
   e4a04:	6103      	str	r3, [r0, #16]
   e4a06:	b903      	cbnz	r3, e4a0a <rshift+0x6a>
   e4a08:	6143      	str	r3, [r0, #20]
   e4a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e4a0c <__hexdig_fun>:
   e4a0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e4a10:	2b09      	cmp	r3, #9
   e4a12:	d801      	bhi.n	e4a18 <__hexdig_fun+0xc>
   e4a14:	3820      	subs	r0, #32
   e4a16:	e00a      	b.n	e4a2e <__hexdig_fun+0x22>
   e4a18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e4a1c:	2b05      	cmp	r3, #5
   e4a1e:	d801      	bhi.n	e4a24 <__hexdig_fun+0x18>
   e4a20:	3847      	subs	r0, #71	; 0x47
   e4a22:	e004      	b.n	e4a2e <__hexdig_fun+0x22>
   e4a24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e4a28:	2b05      	cmp	r3, #5
   e4a2a:	d802      	bhi.n	e4a32 <__hexdig_fun+0x26>
   e4a2c:	3827      	subs	r0, #39	; 0x27
   e4a2e:	b2c0      	uxtb	r0, r0
   e4a30:	4770      	bx	lr
   e4a32:	2000      	movs	r0, #0
   e4a34:	4770      	bx	lr

000e4a36 <__gethex>:
   e4a36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4a3a:	b08b      	sub	sp, #44	; 0x2c
   e4a3c:	468a      	mov	sl, r1
   e4a3e:	4690      	mov	r8, r2
   e4a40:	9306      	str	r3, [sp, #24]
   e4a42:	9002      	str	r0, [sp, #8]
   e4a44:	f7fd fe0a 	bl	e265c <_localeconv_r>
   e4a48:	6803      	ldr	r3, [r0, #0]
   e4a4a:	9303      	str	r3, [sp, #12]
   e4a4c:	4618      	mov	r0, r3
   e4a4e:	f7fe fdd5 	bl	e35fc <strlen>
   e4a52:	9b03      	ldr	r3, [sp, #12]
   e4a54:	9001      	str	r0, [sp, #4]
   e4a56:	4403      	add	r3, r0
   e4a58:	f04f 0b00 	mov.w	fp, #0
   e4a5c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e4a60:	9307      	str	r3, [sp, #28]
   e4a62:	f8da 3000 	ldr.w	r3, [sl]
   e4a66:	3302      	adds	r3, #2
   e4a68:	461f      	mov	r7, r3
   e4a6a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e4a6e:	2830      	cmp	r0, #48	; 0x30
   e4a70:	d102      	bne.n	e4a78 <__gethex+0x42>
   e4a72:	f10b 0b01 	add.w	fp, fp, #1
   e4a76:	e7f7      	b.n	e4a68 <__gethex+0x32>
   e4a78:	f7ff ffc8 	bl	e4a0c <__hexdig_fun>
   e4a7c:	4604      	mov	r4, r0
   e4a7e:	b9e0      	cbnz	r0, e4aba <__gethex+0x84>
   e4a80:	9a01      	ldr	r2, [sp, #4]
   e4a82:	9903      	ldr	r1, [sp, #12]
   e4a84:	4638      	mov	r0, r7
   e4a86:	f7fe fdc1 	bl	e360c <strncmp>
   e4a8a:	2800      	cmp	r0, #0
   e4a8c:	d134      	bne.n	e4af8 <__gethex+0xc2>
   e4a8e:	9b01      	ldr	r3, [sp, #4]
   e4a90:	5cf8      	ldrb	r0, [r7, r3]
   e4a92:	18fe      	adds	r6, r7, r3
   e4a94:	f7ff ffba 	bl	e4a0c <__hexdig_fun>
   e4a98:	b380      	cbz	r0, e4afc <__gethex+0xc6>
   e4a9a:	4633      	mov	r3, r6
   e4a9c:	7818      	ldrb	r0, [r3, #0]
   e4a9e:	2830      	cmp	r0, #48	; 0x30
   e4aa0:	461f      	mov	r7, r3
   e4aa2:	f103 0301 	add.w	r3, r3, #1
   e4aa6:	d0f9      	beq.n	e4a9c <__gethex+0x66>
   e4aa8:	f7ff ffb0 	bl	e4a0c <__hexdig_fun>
   e4aac:	fab0 f580 	clz	r5, r0
   e4ab0:	096d      	lsrs	r5, r5, #5
   e4ab2:	4634      	mov	r4, r6
   e4ab4:	f04f 0b01 	mov.w	fp, #1
   e4ab8:	e001      	b.n	e4abe <__gethex+0x88>
   e4aba:	2500      	movs	r5, #0
   e4abc:	462c      	mov	r4, r5
   e4abe:	463a      	mov	r2, r7
   e4ac0:	4616      	mov	r6, r2
   e4ac2:	3201      	adds	r2, #1
   e4ac4:	7830      	ldrb	r0, [r6, #0]
   e4ac6:	f7ff ffa1 	bl	e4a0c <__hexdig_fun>
   e4aca:	2800      	cmp	r0, #0
   e4acc:	d1f8      	bne.n	e4ac0 <__gethex+0x8a>
   e4ace:	9a01      	ldr	r2, [sp, #4]
   e4ad0:	9903      	ldr	r1, [sp, #12]
   e4ad2:	4630      	mov	r0, r6
   e4ad4:	f7fe fd9a 	bl	e360c <strncmp>
   e4ad8:	b950      	cbnz	r0, e4af0 <__gethex+0xba>
   e4ada:	b954      	cbnz	r4, e4af2 <__gethex+0xbc>
   e4adc:	9b01      	ldr	r3, [sp, #4]
   e4ade:	18f4      	adds	r4, r6, r3
   e4ae0:	4622      	mov	r2, r4
   e4ae2:	4616      	mov	r6, r2
   e4ae4:	3201      	adds	r2, #1
   e4ae6:	7830      	ldrb	r0, [r6, #0]
   e4ae8:	f7ff ff90 	bl	e4a0c <__hexdig_fun>
   e4aec:	2800      	cmp	r0, #0
   e4aee:	d1f8      	bne.n	e4ae2 <__gethex+0xac>
   e4af0:	b134      	cbz	r4, e4b00 <__gethex+0xca>
   e4af2:	1ba4      	subs	r4, r4, r6
   e4af4:	00a4      	lsls	r4, r4, #2
   e4af6:	e003      	b.n	e4b00 <__gethex+0xca>
   e4af8:	463e      	mov	r6, r7
   e4afa:	e000      	b.n	e4afe <__gethex+0xc8>
   e4afc:	4604      	mov	r4, r0
   e4afe:	2501      	movs	r5, #1
   e4b00:	7833      	ldrb	r3, [r6, #0]
   e4b02:	2b50      	cmp	r3, #80	; 0x50
   e4b04:	d001      	beq.n	e4b0a <__gethex+0xd4>
   e4b06:	2b70      	cmp	r3, #112	; 0x70
   e4b08:	d12a      	bne.n	e4b60 <__gethex+0x12a>
   e4b0a:	7873      	ldrb	r3, [r6, #1]
   e4b0c:	2b2b      	cmp	r3, #43	; 0x2b
   e4b0e:	d008      	beq.n	e4b22 <__gethex+0xec>
   e4b10:	2b2d      	cmp	r3, #45	; 0x2d
   e4b12:	d003      	beq.n	e4b1c <__gethex+0xe6>
   e4b14:	1c71      	adds	r1, r6, #1
   e4b16:	f04f 0900 	mov.w	r9, #0
   e4b1a:	e005      	b.n	e4b28 <__gethex+0xf2>
   e4b1c:	f04f 0901 	mov.w	r9, #1
   e4b20:	e001      	b.n	e4b26 <__gethex+0xf0>
   e4b22:	f04f 0900 	mov.w	r9, #0
   e4b26:	1cb1      	adds	r1, r6, #2
   e4b28:	7808      	ldrb	r0, [r1, #0]
   e4b2a:	f7ff ff6f 	bl	e4a0c <__hexdig_fun>
   e4b2e:	1e43      	subs	r3, r0, #1
   e4b30:	b2db      	uxtb	r3, r3
   e4b32:	2b18      	cmp	r3, #24
   e4b34:	d814      	bhi.n	e4b60 <__gethex+0x12a>
   e4b36:	f1a0 0210 	sub.w	r2, r0, #16
   e4b3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e4b3e:	f7ff ff65 	bl	e4a0c <__hexdig_fun>
   e4b42:	1e43      	subs	r3, r0, #1
   e4b44:	b2db      	uxtb	r3, r3
   e4b46:	2b18      	cmp	r3, #24
   e4b48:	d804      	bhi.n	e4b54 <__gethex+0x11e>
   e4b4a:	230a      	movs	r3, #10
   e4b4c:	fb03 0202 	mla	r2, r3, r2, r0
   e4b50:	3a10      	subs	r2, #16
   e4b52:	e7f2      	b.n	e4b3a <__gethex+0x104>
   e4b54:	f1b9 0f00 	cmp.w	r9, #0
   e4b58:	d000      	beq.n	e4b5c <__gethex+0x126>
   e4b5a:	4252      	negs	r2, r2
   e4b5c:	4414      	add	r4, r2
   e4b5e:	e000      	b.n	e4b62 <__gethex+0x12c>
   e4b60:	4631      	mov	r1, r6
   e4b62:	f8ca 1000 	str.w	r1, [sl]
   e4b66:	b12d      	cbz	r5, e4b74 <__gethex+0x13e>
   e4b68:	f1bb 0f00 	cmp.w	fp, #0
   e4b6c:	bf14      	ite	ne
   e4b6e:	2000      	movne	r0, #0
   e4b70:	2006      	moveq	r0, #6
   e4b72:	e17c      	b.n	e4e6e <__gethex+0x438>
   e4b74:	1bf3      	subs	r3, r6, r7
   e4b76:	3b01      	subs	r3, #1
   e4b78:	4629      	mov	r1, r5
   e4b7a:	2b07      	cmp	r3, #7
   e4b7c:	dd02      	ble.n	e4b84 <__gethex+0x14e>
   e4b7e:	3101      	adds	r1, #1
   e4b80:	105b      	asrs	r3, r3, #1
   e4b82:	e7fa      	b.n	e4b7a <__gethex+0x144>
   e4b84:	9802      	ldr	r0, [sp, #8]
   e4b86:	f000 fb0d 	bl	e51a4 <_Balloc>
   e4b8a:	9b01      	ldr	r3, [sp, #4]
   e4b8c:	f100 0a14 	add.w	sl, r0, #20
   e4b90:	f04f 0900 	mov.w	r9, #0
   e4b94:	f1c3 0301 	rsb	r3, r3, #1
   e4b98:	4605      	mov	r5, r0
   e4b9a:	f8cd a010 	str.w	sl, [sp, #16]
   e4b9e:	46cb      	mov	fp, r9
   e4ba0:	9308      	str	r3, [sp, #32]
   e4ba2:	42b7      	cmp	r7, r6
   e4ba4:	d22f      	bcs.n	e4c06 <__gethex+0x1d0>
   e4ba6:	1e73      	subs	r3, r6, #1
   e4ba8:	9305      	str	r3, [sp, #20]
   e4baa:	9a07      	ldr	r2, [sp, #28]
   e4bac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e4bb0:	4293      	cmp	r3, r2
   e4bb2:	d00b      	beq.n	e4bcc <__gethex+0x196>
   e4bb4:	f1bb 0f20 	cmp.w	fp, #32
   e4bb8:	d116      	bne.n	e4be8 <__gethex+0x1b2>
   e4bba:	9b04      	ldr	r3, [sp, #16]
   e4bbc:	f8c3 9000 	str.w	r9, [r3]
   e4bc0:	3304      	adds	r3, #4
   e4bc2:	f04f 0900 	mov.w	r9, #0
   e4bc6:	9304      	str	r3, [sp, #16]
   e4bc8:	46cb      	mov	fp, r9
   e4bca:	e00d      	b.n	e4be8 <__gethex+0x1b2>
   e4bcc:	9b05      	ldr	r3, [sp, #20]
   e4bce:	9a08      	ldr	r2, [sp, #32]
   e4bd0:	4413      	add	r3, r2
   e4bd2:	429f      	cmp	r7, r3
   e4bd4:	d8ee      	bhi.n	e4bb4 <__gethex+0x17e>
   e4bd6:	4618      	mov	r0, r3
   e4bd8:	9a01      	ldr	r2, [sp, #4]
   e4bda:	9903      	ldr	r1, [sp, #12]
   e4bdc:	9309      	str	r3, [sp, #36]	; 0x24
   e4bde:	f7fe fd15 	bl	e360c <strncmp>
   e4be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e4be4:	b168      	cbz	r0, e4c02 <__gethex+0x1cc>
   e4be6:	e7e5      	b.n	e4bb4 <__gethex+0x17e>
   e4be8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e4bec:	f7ff ff0e 	bl	e4a0c <__hexdig_fun>
   e4bf0:	f000 000f 	and.w	r0, r0, #15
   e4bf4:	fa00 f00b 	lsl.w	r0, r0, fp
   e4bf8:	9b05      	ldr	r3, [sp, #20]
   e4bfa:	ea49 0900 	orr.w	r9, r9, r0
   e4bfe:	f10b 0b04 	add.w	fp, fp, #4
   e4c02:	461e      	mov	r6, r3
   e4c04:	e7cd      	b.n	e4ba2 <__gethex+0x16c>
   e4c06:	9804      	ldr	r0, [sp, #16]
   e4c08:	f840 9b04 	str.w	r9, [r0], #4
   e4c0c:	ebca 0000 	rsb	r0, sl, r0
   e4c10:	1080      	asrs	r0, r0, #2
   e4c12:	6128      	str	r0, [r5, #16]
   e4c14:	0147      	lsls	r7, r0, #5
   e4c16:	4648      	mov	r0, r9
   e4c18:	f000 fb89 	bl	e532e <__hi0bits>
   e4c1c:	f8d8 6000 	ldr.w	r6, [r8]
   e4c20:	1a38      	subs	r0, r7, r0
   e4c22:	42b0      	cmp	r0, r6
   e4c24:	dd26      	ble.n	e4c74 <__gethex+0x23e>
   e4c26:	1b87      	subs	r7, r0, r6
   e4c28:	4639      	mov	r1, r7
   e4c2a:	4628      	mov	r0, r5
   e4c2c:	f000 fe87 	bl	e593e <__any_on>
   e4c30:	b1c8      	cbz	r0, e4c66 <__gethex+0x230>
   e4c32:	1e7b      	subs	r3, r7, #1
   e4c34:	1159      	asrs	r1, r3, #5
   e4c36:	f003 021f 	and.w	r2, r3, #31
   e4c3a:	f04f 0901 	mov.w	r9, #1
   e4c3e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e4c42:	fa09 f202 	lsl.w	r2, r9, r2
   e4c46:	420a      	tst	r2, r1
   e4c48:	d00e      	beq.n	e4c68 <__gethex+0x232>
   e4c4a:	454b      	cmp	r3, r9
   e4c4c:	dc02      	bgt.n	e4c54 <__gethex+0x21e>
   e4c4e:	f04f 0902 	mov.w	r9, #2
   e4c52:	e009      	b.n	e4c68 <__gethex+0x232>
   e4c54:	1eb9      	subs	r1, r7, #2
   e4c56:	4628      	mov	r0, r5
   e4c58:	f000 fe71 	bl	e593e <__any_on>
   e4c5c:	2800      	cmp	r0, #0
   e4c5e:	d0f6      	beq.n	e4c4e <__gethex+0x218>
   e4c60:	f04f 0903 	mov.w	r9, #3
   e4c64:	e000      	b.n	e4c68 <__gethex+0x232>
   e4c66:	4681      	mov	r9, r0
   e4c68:	4639      	mov	r1, r7
   e4c6a:	4628      	mov	r0, r5
   e4c6c:	f7ff fe98 	bl	e49a0 <rshift>
   e4c70:	443c      	add	r4, r7
   e4c72:	e00c      	b.n	e4c8e <__gethex+0x258>
   e4c74:	da09      	bge.n	e4c8a <__gethex+0x254>
   e4c76:	1a37      	subs	r7, r6, r0
   e4c78:	4629      	mov	r1, r5
   e4c7a:	463a      	mov	r2, r7
   e4c7c:	9802      	ldr	r0, [sp, #8]
   e4c7e:	f000 fc8b 	bl	e5598 <__lshift>
   e4c82:	1be4      	subs	r4, r4, r7
   e4c84:	4605      	mov	r5, r0
   e4c86:	f100 0a14 	add.w	sl, r0, #20
   e4c8a:	f04f 0900 	mov.w	r9, #0
   e4c8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e4c92:	429c      	cmp	r4, r3
   e4c94:	dd08      	ble.n	e4ca8 <__gethex+0x272>
   e4c96:	9802      	ldr	r0, [sp, #8]
   e4c98:	4629      	mov	r1, r5
   e4c9a:	f000 fab8 	bl	e520e <_Bfree>
   e4c9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e4ca0:	2300      	movs	r3, #0
   e4ca2:	6013      	str	r3, [r2, #0]
   e4ca4:	20a3      	movs	r0, #163	; 0xa3
   e4ca6:	e0e2      	b.n	e4e6e <__gethex+0x438>
   e4ca8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e4cac:	4284      	cmp	r4, r0
   e4cae:	da53      	bge.n	e4d58 <__gethex+0x322>
   e4cb0:	1b04      	subs	r4, r0, r4
   e4cb2:	42a6      	cmp	r6, r4
   e4cb4:	dc2e      	bgt.n	e4d14 <__gethex+0x2de>
   e4cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e4cba:	2b02      	cmp	r3, #2
   e4cbc:	d01a      	beq.n	e4cf4 <__gethex+0x2be>
   e4cbe:	2b03      	cmp	r3, #3
   e4cc0:	d01c      	beq.n	e4cfc <__gethex+0x2c6>
   e4cc2:	2b01      	cmp	r3, #1
   e4cc4:	d11d      	bne.n	e4d02 <__gethex+0x2cc>
   e4cc6:	42a6      	cmp	r6, r4
   e4cc8:	d11b      	bne.n	e4d02 <__gethex+0x2cc>
   e4cca:	2e01      	cmp	r6, #1
   e4ccc:	dc0b      	bgt.n	e4ce6 <__gethex+0x2b0>
   e4cce:	9a06      	ldr	r2, [sp, #24]
   e4cd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e4cd4:	6013      	str	r3, [r2, #0]
   e4cd6:	2301      	movs	r3, #1
   e4cd8:	612b      	str	r3, [r5, #16]
   e4cda:	f8ca 3000 	str.w	r3, [sl]
   e4cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e4ce0:	2062      	movs	r0, #98	; 0x62
   e4ce2:	601d      	str	r5, [r3, #0]
   e4ce4:	e0c3      	b.n	e4e6e <__gethex+0x438>
   e4ce6:	1e71      	subs	r1, r6, #1
   e4ce8:	4628      	mov	r0, r5
   e4cea:	f000 fe28 	bl	e593e <__any_on>
   e4cee:	2800      	cmp	r0, #0
   e4cf0:	d1ed      	bne.n	e4cce <__gethex+0x298>
   e4cf2:	e006      	b.n	e4d02 <__gethex+0x2cc>
   e4cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4cf6:	2b00      	cmp	r3, #0
   e4cf8:	d0e9      	beq.n	e4cce <__gethex+0x298>
   e4cfa:	e002      	b.n	e4d02 <__gethex+0x2cc>
   e4cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4cfe:	2b00      	cmp	r3, #0
   e4d00:	d1e5      	bne.n	e4cce <__gethex+0x298>
   e4d02:	9802      	ldr	r0, [sp, #8]
   e4d04:	4629      	mov	r1, r5
   e4d06:	f000 fa82 	bl	e520e <_Bfree>
   e4d0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e4d0c:	2300      	movs	r3, #0
   e4d0e:	6013      	str	r3, [r2, #0]
   e4d10:	2050      	movs	r0, #80	; 0x50
   e4d12:	e0ac      	b.n	e4e6e <__gethex+0x438>
   e4d14:	1e67      	subs	r7, r4, #1
   e4d16:	f1b9 0f00 	cmp.w	r9, #0
   e4d1a:	d106      	bne.n	e4d2a <__gethex+0x2f4>
   e4d1c:	b13f      	cbz	r7, e4d2e <__gethex+0x2f8>
   e4d1e:	4639      	mov	r1, r7
   e4d20:	4628      	mov	r0, r5
   e4d22:	f000 fe0c 	bl	e593e <__any_on>
   e4d26:	4681      	mov	r9, r0
   e4d28:	e001      	b.n	e4d2e <__gethex+0x2f8>
   e4d2a:	f04f 0901 	mov.w	r9, #1
   e4d2e:	117a      	asrs	r2, r7, #5
   e4d30:	2301      	movs	r3, #1
   e4d32:	f007 071f 	and.w	r7, r7, #31
   e4d36:	fa03 f707 	lsl.w	r7, r3, r7
   e4d3a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e4d3e:	4621      	mov	r1, r4
   e4d40:	421f      	tst	r7, r3
   e4d42:	4628      	mov	r0, r5
   e4d44:	bf18      	it	ne
   e4d46:	f049 0902 	orrne.w	r9, r9, #2
   e4d4a:	1b36      	subs	r6, r6, r4
   e4d4c:	f7ff fe28 	bl	e49a0 <rshift>
   e4d50:	2702      	movs	r7, #2
   e4d52:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e4d56:	e000      	b.n	e4d5a <__gethex+0x324>
   e4d58:	2701      	movs	r7, #1
   e4d5a:	f1b9 0f00 	cmp.w	r9, #0
   e4d5e:	f000 8081 	beq.w	e4e64 <__gethex+0x42e>
   e4d62:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e4d66:	2b02      	cmp	r3, #2
   e4d68:	d00e      	beq.n	e4d88 <__gethex+0x352>
   e4d6a:	2b03      	cmp	r3, #3
   e4d6c:	d010      	beq.n	e4d90 <__gethex+0x35a>
   e4d6e:	2b01      	cmp	r3, #1
   e4d70:	d176      	bne.n	e4e60 <__gethex+0x42a>
   e4d72:	f019 0f02 	tst.w	r9, #2
   e4d76:	d073      	beq.n	e4e60 <__gethex+0x42a>
   e4d78:	f8da 0000 	ldr.w	r0, [sl]
   e4d7c:	ea49 0900 	orr.w	r9, r9, r0
   e4d80:	f019 0f01 	tst.w	r9, #1
   e4d84:	d107      	bne.n	e4d96 <__gethex+0x360>
   e4d86:	e06b      	b.n	e4e60 <__gethex+0x42a>
   e4d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4d8a:	f1c3 0301 	rsb	r3, r3, #1
   e4d8e:	9315      	str	r3, [sp, #84]	; 0x54
   e4d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e4d92:	2b00      	cmp	r3, #0
   e4d94:	d064      	beq.n	e4e60 <__gethex+0x42a>
   e4d96:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e4d9a:	f105 0314 	add.w	r3, r5, #20
   e4d9e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e4da2:	eb03 0109 	add.w	r1, r3, r9
   e4da6:	2000      	movs	r0, #0
   e4da8:	681a      	ldr	r2, [r3, #0]
   e4daa:	f1b2 3fff 	cmp.w	r2, #4294967295
   e4dae:	d002      	beq.n	e4db6 <__gethex+0x380>
   e4db0:	3201      	adds	r2, #1
   e4db2:	601a      	str	r2, [r3, #0]
   e4db4:	e020      	b.n	e4df8 <__gethex+0x3c2>
   e4db6:	f843 0b04 	str.w	r0, [r3], #4
   e4dba:	4299      	cmp	r1, r3
   e4dbc:	d8f4      	bhi.n	e4da8 <__gethex+0x372>
   e4dbe:	68ab      	ldr	r3, [r5, #8]
   e4dc0:	459a      	cmp	sl, r3
   e4dc2:	db12      	blt.n	e4dea <__gethex+0x3b4>
   e4dc4:	6869      	ldr	r1, [r5, #4]
   e4dc6:	9802      	ldr	r0, [sp, #8]
   e4dc8:	3101      	adds	r1, #1
   e4dca:	f000 f9eb 	bl	e51a4 <_Balloc>
   e4dce:	692a      	ldr	r2, [r5, #16]
   e4dd0:	3202      	adds	r2, #2
   e4dd2:	f105 010c 	add.w	r1, r5, #12
   e4dd6:	4683      	mov	fp, r0
   e4dd8:	0092      	lsls	r2, r2, #2
   e4dda:	300c      	adds	r0, #12
   e4ddc:	f7fd fc42 	bl	e2664 <memcpy>
   e4de0:	4629      	mov	r1, r5
   e4de2:	9802      	ldr	r0, [sp, #8]
   e4de4:	f000 fa13 	bl	e520e <_Bfree>
   e4de8:	465d      	mov	r5, fp
   e4dea:	692b      	ldr	r3, [r5, #16]
   e4dec:	1c5a      	adds	r2, r3, #1
   e4dee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e4df2:	612a      	str	r2, [r5, #16]
   e4df4:	2201      	movs	r2, #1
   e4df6:	615a      	str	r2, [r3, #20]
   e4df8:	2f02      	cmp	r7, #2
   e4dfa:	f105 0214 	add.w	r2, r5, #20
   e4dfe:	d111      	bne.n	e4e24 <__gethex+0x3ee>
   e4e00:	f8d8 3000 	ldr.w	r3, [r8]
   e4e04:	3b01      	subs	r3, #1
   e4e06:	429e      	cmp	r6, r3
   e4e08:	d127      	bne.n	e4e5a <__gethex+0x424>
   e4e0a:	1171      	asrs	r1, r6, #5
   e4e0c:	2301      	movs	r3, #1
   e4e0e:	f006 061f 	and.w	r6, r6, #31
   e4e12:	fa03 f606 	lsl.w	r6, r3, r6
   e4e16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e4e1a:	421e      	tst	r6, r3
   e4e1c:	bf0c      	ite	eq
   e4e1e:	2702      	moveq	r7, #2
   e4e20:	2701      	movne	r7, #1
   e4e22:	e01a      	b.n	e4e5a <__gethex+0x424>
   e4e24:	692b      	ldr	r3, [r5, #16]
   e4e26:	459a      	cmp	sl, r3
   e4e28:	da0a      	bge.n	e4e40 <__gethex+0x40a>
   e4e2a:	2101      	movs	r1, #1
   e4e2c:	4628      	mov	r0, r5
   e4e2e:	f7ff fdb7 	bl	e49a0 <rshift>
   e4e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e4e36:	3401      	adds	r4, #1
   e4e38:	429c      	cmp	r4, r3
   e4e3a:	f73f af2c 	bgt.w	e4c96 <__gethex+0x260>
   e4e3e:	e00b      	b.n	e4e58 <__gethex+0x422>
   e4e40:	f016 061f 	ands.w	r6, r6, #31
   e4e44:	d008      	beq.n	e4e58 <__gethex+0x422>
   e4e46:	4491      	add	r9, r2
   e4e48:	f1c6 0620 	rsb	r6, r6, #32
   e4e4c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e4e50:	f000 fa6d 	bl	e532e <__hi0bits>
   e4e54:	42b0      	cmp	r0, r6
   e4e56:	dbe8      	blt.n	e4e2a <__gethex+0x3f4>
   e4e58:	2701      	movs	r7, #1
   e4e5a:	f047 0720 	orr.w	r7, r7, #32
   e4e5e:	e001      	b.n	e4e64 <__gethex+0x42e>
   e4e60:	f047 0710 	orr.w	r7, r7, #16
   e4e64:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e4e66:	601d      	str	r5, [r3, #0]
   e4e68:	9b06      	ldr	r3, [sp, #24]
   e4e6a:	4638      	mov	r0, r7
   e4e6c:	601c      	str	r4, [r3, #0]
   e4e6e:	b00b      	add	sp, #44	; 0x2c
   e4e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e4e74 <L_shift>:
   e4e74:	f1c2 0208 	rsb	r2, r2, #8
   e4e78:	0092      	lsls	r2, r2, #2
   e4e7a:	b570      	push	{r4, r5, r6, lr}
   e4e7c:	f1c2 0620 	rsb	r6, r2, #32
   e4e80:	6843      	ldr	r3, [r0, #4]
   e4e82:	6805      	ldr	r5, [r0, #0]
   e4e84:	fa03 f406 	lsl.w	r4, r3, r6
   e4e88:	432c      	orrs	r4, r5
   e4e8a:	40d3      	lsrs	r3, r2
   e4e8c:	6004      	str	r4, [r0, #0]
   e4e8e:	f840 3f04 	str.w	r3, [r0, #4]!
   e4e92:	4288      	cmp	r0, r1
   e4e94:	d3f4      	bcc.n	e4e80 <L_shift+0xc>
   e4e96:	bd70      	pop	{r4, r5, r6, pc}

000e4e98 <__match>:
   e4e98:	b530      	push	{r4, r5, lr}
   e4e9a:	6803      	ldr	r3, [r0, #0]
   e4e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e4ea0:	3301      	adds	r3, #1
   e4ea2:	b14c      	cbz	r4, e4eb8 <__match+0x20>
   e4ea4:	781a      	ldrb	r2, [r3, #0]
   e4ea6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e4eaa:	2d19      	cmp	r5, #25
   e4eac:	bf98      	it	ls
   e4eae:	3220      	addls	r2, #32
   e4eb0:	42a2      	cmp	r2, r4
   e4eb2:	d0f3      	beq.n	e4e9c <__match+0x4>
   e4eb4:	2000      	movs	r0, #0
   e4eb6:	bd30      	pop	{r4, r5, pc}
   e4eb8:	6003      	str	r3, [r0, #0]
   e4eba:	2001      	movs	r0, #1
   e4ebc:	bd30      	pop	{r4, r5, pc}

000e4ebe <__hexnan>:
   e4ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4ec2:	680b      	ldr	r3, [r1, #0]
   e4ec4:	f8d0 b000 	ldr.w	fp, [r0]
   e4ec8:	115e      	asrs	r6, r3, #5
   e4eca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e4ece:	f013 031f 	ands.w	r3, r3, #31
   e4ed2:	b085      	sub	sp, #20
   e4ed4:	bf18      	it	ne
   e4ed6:	3604      	addne	r6, #4
   e4ed8:	1f35      	subs	r5, r6, #4
   e4eda:	4617      	mov	r7, r2
   e4edc:	2200      	movs	r2, #0
   e4ede:	4682      	mov	sl, r0
   e4ee0:	9301      	str	r3, [sp, #4]
   e4ee2:	f846 2c04 	str.w	r2, [r6, #-4]
   e4ee6:	46a8      	mov	r8, r5
   e4ee8:	462c      	mov	r4, r5
   e4eea:	9200      	str	r2, [sp, #0]
   e4eec:	4691      	mov	r9, r2
   e4eee:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e4ef2:	2900      	cmp	r1, #0
   e4ef4:	d03c      	beq.n	e4f70 <__hexnan+0xb2>
   e4ef6:	4608      	mov	r0, r1
   e4ef8:	9203      	str	r2, [sp, #12]
   e4efa:	9102      	str	r1, [sp, #8]
   e4efc:	f7ff fd86 	bl	e4a0c <__hexdig_fun>
   e4f00:	9a03      	ldr	r2, [sp, #12]
   e4f02:	bb00      	cbnz	r0, e4f46 <__hexnan+0x88>
   e4f04:	9902      	ldr	r1, [sp, #8]
   e4f06:	2920      	cmp	r1, #32
   e4f08:	d816      	bhi.n	e4f38 <__hexnan+0x7a>
   e4f0a:	9b00      	ldr	r3, [sp, #0]
   e4f0c:	4599      	cmp	r9, r3
   e4f0e:	ddee      	ble.n	e4eee <__hexnan+0x30>
   e4f10:	4544      	cmp	r4, r8
   e4f12:	d205      	bcs.n	e4f20 <__hexnan+0x62>
   e4f14:	2a07      	cmp	r2, #7
   e4f16:	dc03      	bgt.n	e4f20 <__hexnan+0x62>
   e4f18:	4641      	mov	r1, r8
   e4f1a:	4620      	mov	r0, r4
   e4f1c:	f7ff ffaa 	bl	e4e74 <L_shift>
   e4f20:	42bc      	cmp	r4, r7
   e4f22:	d923      	bls.n	e4f6c <__hexnan+0xae>
   e4f24:	2300      	movs	r3, #0
   e4f26:	f1a4 0804 	sub.w	r8, r4, #4
   e4f2a:	f844 3c04 	str.w	r3, [r4, #-4]
   e4f2e:	f8cd 9000 	str.w	r9, [sp]
   e4f32:	4644      	mov	r4, r8
   e4f34:	461a      	mov	r2, r3
   e4f36:	e7da      	b.n	e4eee <__hexnan+0x30>
   e4f38:	2929      	cmp	r1, #41	; 0x29
   e4f3a:	d148      	bne.n	e4fce <__hexnan+0x110>
   e4f3c:	f10b 0301 	add.w	r3, fp, #1
   e4f40:	f8ca 3000 	str.w	r3, [sl]
   e4f44:	e014      	b.n	e4f70 <__hexnan+0xb2>
   e4f46:	3201      	adds	r2, #1
   e4f48:	2a08      	cmp	r2, #8
   e4f4a:	f109 0901 	add.w	r9, r9, #1
   e4f4e:	dd06      	ble.n	e4f5e <__hexnan+0xa0>
   e4f50:	42bc      	cmp	r4, r7
   e4f52:	d9cc      	bls.n	e4eee <__hexnan+0x30>
   e4f54:	2300      	movs	r3, #0
   e4f56:	f844 3c04 	str.w	r3, [r4, #-4]
   e4f5a:	2201      	movs	r2, #1
   e4f5c:	3c04      	subs	r4, #4
   e4f5e:	6821      	ldr	r1, [r4, #0]
   e4f60:	f000 000f 	and.w	r0, r0, #15
   e4f64:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e4f68:	6020      	str	r0, [r4, #0]
   e4f6a:	e7c0      	b.n	e4eee <__hexnan+0x30>
   e4f6c:	2208      	movs	r2, #8
   e4f6e:	e7be      	b.n	e4eee <__hexnan+0x30>
   e4f70:	f1b9 0f00 	cmp.w	r9, #0
   e4f74:	d02b      	beq.n	e4fce <__hexnan+0x110>
   e4f76:	4544      	cmp	r4, r8
   e4f78:	d205      	bcs.n	e4f86 <__hexnan+0xc8>
   e4f7a:	2a07      	cmp	r2, #7
   e4f7c:	dc03      	bgt.n	e4f86 <__hexnan+0xc8>
   e4f7e:	4641      	mov	r1, r8
   e4f80:	4620      	mov	r0, r4
   e4f82:	f7ff ff77 	bl	e4e74 <L_shift>
   e4f86:	42bc      	cmp	r4, r7
   e4f88:	d90c      	bls.n	e4fa4 <__hexnan+0xe6>
   e4f8a:	463b      	mov	r3, r7
   e4f8c:	f854 2b04 	ldr.w	r2, [r4], #4
   e4f90:	f843 2b04 	str.w	r2, [r3], #4
   e4f94:	42a5      	cmp	r5, r4
   e4f96:	d2f9      	bcs.n	e4f8c <__hexnan+0xce>
   e4f98:	2200      	movs	r2, #0
   e4f9a:	f843 2b04 	str.w	r2, [r3], #4
   e4f9e:	429d      	cmp	r5, r3
   e4fa0:	d2fb      	bcs.n	e4f9a <__hexnan+0xdc>
   e4fa2:	e00b      	b.n	e4fbc <__hexnan+0xfe>
   e4fa4:	9b01      	ldr	r3, [sp, #4]
   e4fa6:	b14b      	cbz	r3, e4fbc <__hexnan+0xfe>
   e4fa8:	f1c3 0220 	rsb	r2, r3, #32
   e4fac:	f04f 33ff 	mov.w	r3, #4294967295
   e4fb0:	40d3      	lsrs	r3, r2
   e4fb2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e4fb6:	4013      	ands	r3, r2
   e4fb8:	f846 3c04 	str.w	r3, [r6, #-4]
   e4fbc:	682b      	ldr	r3, [r5, #0]
   e4fbe:	b943      	cbnz	r3, e4fd2 <__hexnan+0x114>
   e4fc0:	42bd      	cmp	r5, r7
   e4fc2:	d102      	bne.n	e4fca <__hexnan+0x10c>
   e4fc4:	2301      	movs	r3, #1
   e4fc6:	602b      	str	r3, [r5, #0]
   e4fc8:	e003      	b.n	e4fd2 <__hexnan+0x114>
   e4fca:	3d04      	subs	r5, #4
   e4fcc:	e7f6      	b.n	e4fbc <__hexnan+0xfe>
   e4fce:	2004      	movs	r0, #4
   e4fd0:	e000      	b.n	e4fd4 <__hexnan+0x116>
   e4fd2:	2005      	movs	r0, #5
   e4fd4:	b005      	add	sp, #20
   e4fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e4fdc <_findenv_r>:
   e4fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4fe0:	4607      	mov	r7, r0
   e4fe2:	468b      	mov	fp, r1
   e4fe4:	4690      	mov	r8, r2
   e4fe6:	f000 fcda 	bl	e599e <__env_lock>
   e4fea:	4b19      	ldr	r3, [pc, #100]	; (e5050 <_findenv_r+0x74>)
   e4fec:	681d      	ldr	r5, [r3, #0]
   e4fee:	469a      	mov	sl, r3
   e4ff0:	b13d      	cbz	r5, e5002 <_findenv_r+0x26>
   e4ff2:	465c      	mov	r4, fp
   e4ff4:	4623      	mov	r3, r4
   e4ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
   e4ffa:	b142      	cbz	r2, e500e <_findenv_r+0x32>
   e4ffc:	2a3d      	cmp	r2, #61	; 0x3d
   e4ffe:	461c      	mov	r4, r3
   e5000:	d1f8      	bne.n	e4ff4 <_findenv_r+0x18>
   e5002:	4638      	mov	r0, r7
   e5004:	f000 fccc 	bl	e59a0 <__env_unlock>
   e5008:	2000      	movs	r0, #0
   e500a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e500e:	ebcb 0404 	rsb	r4, fp, r4
   e5012:	46a9      	mov	r9, r5
   e5014:	f859 0b04 	ldr.w	r0, [r9], #4
   e5018:	2800      	cmp	r0, #0
   e501a:	d0f2      	beq.n	e5002 <_findenv_r+0x26>
   e501c:	4622      	mov	r2, r4
   e501e:	4659      	mov	r1, fp
   e5020:	f7fe faf4 	bl	e360c <strncmp>
   e5024:	b988      	cbnz	r0, e504a <_findenv_r+0x6e>
   e5026:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e502a:	191e      	adds	r6, r3, r4
   e502c:	5d1b      	ldrb	r3, [r3, r4]
   e502e:	2b3d      	cmp	r3, #61	; 0x3d
   e5030:	d10b      	bne.n	e504a <_findenv_r+0x6e>
   e5032:	f8da 3000 	ldr.w	r3, [sl]
   e5036:	1aed      	subs	r5, r5, r3
   e5038:	10ad      	asrs	r5, r5, #2
   e503a:	4638      	mov	r0, r7
   e503c:	f8c8 5000 	str.w	r5, [r8]
   e5040:	f000 fcae 	bl	e59a0 <__env_unlock>
   e5044:	1c70      	adds	r0, r6, #1
   e5046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e504a:	464d      	mov	r5, r9
   e504c:	e7e1      	b.n	e5012 <_findenv_r+0x36>
   e504e:	bf00      	nop
   e5050:	2003d720 	.word	0x2003d720

000e5054 <_getenv_r>:
   e5054:	b507      	push	{r0, r1, r2, lr}
   e5056:	aa01      	add	r2, sp, #4
   e5058:	f7ff ffc0 	bl	e4fdc <_findenv_r>
   e505c:	b003      	add	sp, #12
   e505e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e5064 <__gettzinfo>:
   e5064:	4800      	ldr	r0, [pc, #0]	; (e5068 <__gettzinfo+0x4>)
   e5066:	4770      	bx	lr
   e5068:	2003d6e0 	.word	0x2003d6e0

000e506c <gmtime_r>:
   e506c:	6802      	ldr	r2, [r0, #0]
   e506e:	4b47      	ldr	r3, [pc, #284]	; (e518c <gmtime_r+0x120>)
   e5070:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5072:	fb92 f4f3 	sdiv	r4, r2, r3
   e5076:	fb03 2214 	mls	r2, r3, r4, r2
   e507a:	2a00      	cmp	r2, #0
   e507c:	bfbc      	itt	lt
   e507e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e5082:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e5086:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e508a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e508e:	fb92 f3f0 	sdiv	r3, r2, r0
   e5092:	fb00 2213 	mls	r2, r0, r3, r2
   e5096:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e509a:	bfac      	ite	ge
   e509c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e50a0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e50a4:	608b      	str	r3, [r1, #8]
   e50a6:	fb92 f3f0 	sdiv	r3, r2, r0
   e50aa:	fb00 2213 	mls	r2, r0, r3, r2
   e50ae:	604b      	str	r3, [r1, #4]
   e50b0:	600a      	str	r2, [r1, #0]
   e50b2:	2307      	movs	r3, #7
   e50b4:	1ce2      	adds	r2, r4, #3
   e50b6:	fb92 f3f3 	sdiv	r3, r2, r3
   e50ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e50be:	1ad3      	subs	r3, r2, r3
   e50c0:	618b      	str	r3, [r1, #24]
   e50c2:	4b33      	ldr	r3, [pc, #204]	; (e5190 <gmtime_r+0x124>)
   e50c4:	4d33      	ldr	r5, [pc, #204]	; (e5194 <gmtime_r+0x128>)
   e50c6:	fb94 f5f5 	sdiv	r5, r4, r5
   e50ca:	fb03 4405 	mla	r4, r3, r5, r4
   e50ce:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e50d2:	fbb4 f2f2 	udiv	r2, r4, r2
   e50d6:	4422      	add	r2, r4
   e50d8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e50dc:	fbb4 f3f7 	udiv	r3, r4, r7
   e50e0:	1ad2      	subs	r2, r2, r3
   e50e2:	482d      	ldr	r0, [pc, #180]	; (e5198 <gmtime_r+0x12c>)
   e50e4:	fbb4 f0f0 	udiv	r0, r4, r0
   e50e8:	f648 6694 	movw	r6, #36500	; 0x8e94
   e50ec:	1a13      	subs	r3, r2, r0
   e50ee:	fbb3 f6f6 	udiv	r6, r3, r6
   e50f2:	4434      	add	r4, r6
   e50f4:	f240 126d 	movw	r2, #365	; 0x16d
   e50f8:	fbb3 f0f2 	udiv	r0, r3, r2
   e50fc:	fbb3 f3f7 	udiv	r3, r3, r7
   e5100:	1ae3      	subs	r3, r4, r3
   e5102:	fb02 3310 	mls	r3, r2, r0, r3
   e5106:	2499      	movs	r4, #153	; 0x99
   e5108:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e510c:	3202      	adds	r2, #2
   e510e:	fbb2 f2f4 	udiv	r2, r2, r4
   e5112:	2a0a      	cmp	r2, #10
   e5114:	fb04 f402 	mul.w	r4, r4, r2
   e5118:	f104 0602 	add.w	r6, r4, #2
   e511c:	f04f 0405 	mov.w	r4, #5
   e5120:	fbb6 f4f4 	udiv	r4, r6, r4
   e5124:	bf34      	ite	cc
   e5126:	2602      	movcc	r6, #2
   e5128:	f06f 0609 	mvncs.w	r6, #9
   e512c:	4416      	add	r6, r2
   e512e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e5132:	fb02 0505 	mla	r5, r2, r5, r0
   e5136:	1c5f      	adds	r7, r3, #1
   e5138:	2e01      	cmp	r6, #1
   e513a:	bf98      	it	ls
   e513c:	3501      	addls	r5, #1
   e513e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e5142:	eba7 0704 	sub.w	r7, r7, r4
   e5146:	d302      	bcc.n	e514e <gmtime_r+0xe2>
   e5148:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e514c:	e014      	b.n	e5178 <gmtime_r+0x10c>
   e514e:	0782      	lsls	r2, r0, #30
   e5150:	d105      	bne.n	e515e <gmtime_r+0xf2>
   e5152:	2464      	movs	r4, #100	; 0x64
   e5154:	fbb0 f2f4 	udiv	r2, r0, r4
   e5158:	fb04 0212 	mls	r2, r4, r2, r0
   e515c:	b94a      	cbnz	r2, e5172 <gmtime_r+0x106>
   e515e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e5162:	fbb0 f4f2 	udiv	r4, r0, r2
   e5166:	fb02 0014 	mls	r0, r2, r4, r0
   e516a:	fab0 f280 	clz	r2, r0
   e516e:	0952      	lsrs	r2, r2, #5
   e5170:	e000      	b.n	e5174 <gmtime_r+0x108>
   e5172:	2201      	movs	r2, #1
   e5174:	333b      	adds	r3, #59	; 0x3b
   e5176:	441a      	add	r2, r3
   e5178:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e517c:	2300      	movs	r3, #0
   e517e:	61ca      	str	r2, [r1, #28]
   e5180:	614d      	str	r5, [r1, #20]
   e5182:	610e      	str	r6, [r1, #16]
   e5184:	60cf      	str	r7, [r1, #12]
   e5186:	620b      	str	r3, [r1, #32]
   e5188:	4608      	mov	r0, r1
   e518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e518c:	00015180 	.word	0x00015180
   e5190:	fffdc54f 	.word	0xfffdc54f
   e5194:	00023ab1 	.word	0x00023ab1
   e5198:	00023ab0 	.word	0x00023ab0

000e519c <labs>:
   e519c:	2800      	cmp	r0, #0
   e519e:	bfb8      	it	lt
   e51a0:	4240      	neglt	r0, r0
   e51a2:	4770      	bx	lr

000e51a4 <_Balloc>:
   e51a4:	b570      	push	{r4, r5, r6, lr}
   e51a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e51a8:	4604      	mov	r4, r0
   e51aa:	460e      	mov	r6, r1
   e51ac:	b93d      	cbnz	r5, e51be <_Balloc+0x1a>
   e51ae:	2010      	movs	r0, #16
   e51b0:	f7f4 fd7e 	bl	d9cb0 <malloc>
   e51b4:	6260      	str	r0, [r4, #36]	; 0x24
   e51b6:	6045      	str	r5, [r0, #4]
   e51b8:	6085      	str	r5, [r0, #8]
   e51ba:	6005      	str	r5, [r0, #0]
   e51bc:	60c5      	str	r5, [r0, #12]
   e51be:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e51c0:	68eb      	ldr	r3, [r5, #12]
   e51c2:	b143      	cbz	r3, e51d6 <_Balloc+0x32>
   e51c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e51c6:	68db      	ldr	r3, [r3, #12]
   e51c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e51cc:	b178      	cbz	r0, e51ee <_Balloc+0x4a>
   e51ce:	6802      	ldr	r2, [r0, #0]
   e51d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e51d4:	e017      	b.n	e5206 <_Balloc+0x62>
   e51d6:	2221      	movs	r2, #33	; 0x21
   e51d8:	2104      	movs	r1, #4
   e51da:	4620      	mov	r0, r4
   e51dc:	f000 fbd1 	bl	e5982 <_calloc_r>
   e51e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e51e2:	60e8      	str	r0, [r5, #12]
   e51e4:	68db      	ldr	r3, [r3, #12]
   e51e6:	2b00      	cmp	r3, #0
   e51e8:	d1ec      	bne.n	e51c4 <_Balloc+0x20>
   e51ea:	2000      	movs	r0, #0
   e51ec:	bd70      	pop	{r4, r5, r6, pc}
   e51ee:	2101      	movs	r1, #1
   e51f0:	fa01 f506 	lsl.w	r5, r1, r6
   e51f4:	1d6a      	adds	r2, r5, #5
   e51f6:	0092      	lsls	r2, r2, #2
   e51f8:	4620      	mov	r0, r4
   e51fa:	f000 fbc2 	bl	e5982 <_calloc_r>
   e51fe:	2800      	cmp	r0, #0
   e5200:	d0f3      	beq.n	e51ea <_Balloc+0x46>
   e5202:	6046      	str	r6, [r0, #4]
   e5204:	6085      	str	r5, [r0, #8]
   e5206:	2300      	movs	r3, #0
   e5208:	6103      	str	r3, [r0, #16]
   e520a:	60c3      	str	r3, [r0, #12]
   e520c:	bd70      	pop	{r4, r5, r6, pc}

000e520e <_Bfree>:
   e520e:	b570      	push	{r4, r5, r6, lr}
   e5210:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e5212:	4606      	mov	r6, r0
   e5214:	460d      	mov	r5, r1
   e5216:	b93c      	cbnz	r4, e5228 <_Bfree+0x1a>
   e5218:	2010      	movs	r0, #16
   e521a:	f7f4 fd49 	bl	d9cb0 <malloc>
   e521e:	6270      	str	r0, [r6, #36]	; 0x24
   e5220:	6044      	str	r4, [r0, #4]
   e5222:	6084      	str	r4, [r0, #8]
   e5224:	6004      	str	r4, [r0, #0]
   e5226:	60c4      	str	r4, [r0, #12]
   e5228:	b13d      	cbz	r5, e523a <_Bfree+0x2c>
   e522a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e522c:	686a      	ldr	r2, [r5, #4]
   e522e:	68db      	ldr	r3, [r3, #12]
   e5230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e5234:	6029      	str	r1, [r5, #0]
   e5236:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e523a:	bd70      	pop	{r4, r5, r6, pc}

000e523c <__multadd>:
   e523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e5240:	690d      	ldr	r5, [r1, #16]
   e5242:	461f      	mov	r7, r3
   e5244:	4606      	mov	r6, r0
   e5246:	460c      	mov	r4, r1
   e5248:	f101 0e14 	add.w	lr, r1, #20
   e524c:	2300      	movs	r3, #0
   e524e:	f8de 0000 	ldr.w	r0, [lr]
   e5252:	b281      	uxth	r1, r0
   e5254:	fb02 7101 	mla	r1, r2, r1, r7
   e5258:	0c0f      	lsrs	r7, r1, #16
   e525a:	0c00      	lsrs	r0, r0, #16
   e525c:	fb02 7000 	mla	r0, r2, r0, r7
   e5260:	b289      	uxth	r1, r1
   e5262:	3301      	adds	r3, #1
   e5264:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e5268:	429d      	cmp	r5, r3
   e526a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e526e:	f84e 1b04 	str.w	r1, [lr], #4
   e5272:	dcec      	bgt.n	e524e <__multadd+0x12>
   e5274:	b1d7      	cbz	r7, e52ac <__multadd+0x70>
   e5276:	68a3      	ldr	r3, [r4, #8]
   e5278:	429d      	cmp	r5, r3
   e527a:	db12      	blt.n	e52a2 <__multadd+0x66>
   e527c:	6861      	ldr	r1, [r4, #4]
   e527e:	4630      	mov	r0, r6
   e5280:	3101      	adds	r1, #1
   e5282:	f7ff ff8f 	bl	e51a4 <_Balloc>
   e5286:	6922      	ldr	r2, [r4, #16]
   e5288:	3202      	adds	r2, #2
   e528a:	f104 010c 	add.w	r1, r4, #12
   e528e:	4680      	mov	r8, r0
   e5290:	0092      	lsls	r2, r2, #2
   e5292:	300c      	adds	r0, #12
   e5294:	f7fd f9e6 	bl	e2664 <memcpy>
   e5298:	4621      	mov	r1, r4
   e529a:	4630      	mov	r0, r6
   e529c:	f7ff ffb7 	bl	e520e <_Bfree>
   e52a0:	4644      	mov	r4, r8
   e52a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e52a6:	3501      	adds	r5, #1
   e52a8:	615f      	str	r7, [r3, #20]
   e52aa:	6125      	str	r5, [r4, #16]
   e52ac:	4620      	mov	r0, r4
   e52ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e52b2 <__s2b>:
   e52b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e52b6:	460c      	mov	r4, r1
   e52b8:	4615      	mov	r5, r2
   e52ba:	461f      	mov	r7, r3
   e52bc:	2209      	movs	r2, #9
   e52be:	3308      	adds	r3, #8
   e52c0:	4606      	mov	r6, r0
   e52c2:	fb93 f3f2 	sdiv	r3, r3, r2
   e52c6:	2100      	movs	r1, #0
   e52c8:	2201      	movs	r2, #1
   e52ca:	429a      	cmp	r2, r3
   e52cc:	da02      	bge.n	e52d4 <__s2b+0x22>
   e52ce:	0052      	lsls	r2, r2, #1
   e52d0:	3101      	adds	r1, #1
   e52d2:	e7fa      	b.n	e52ca <__s2b+0x18>
   e52d4:	4630      	mov	r0, r6
   e52d6:	f7ff ff65 	bl	e51a4 <_Balloc>
   e52da:	9b08      	ldr	r3, [sp, #32]
   e52dc:	6143      	str	r3, [r0, #20]
   e52de:	2d09      	cmp	r5, #9
   e52e0:	f04f 0301 	mov.w	r3, #1
   e52e4:	6103      	str	r3, [r0, #16]
   e52e6:	dd11      	ble.n	e530c <__s2b+0x5a>
   e52e8:	f104 0809 	add.w	r8, r4, #9
   e52ec:	46c1      	mov	r9, r8
   e52ee:	442c      	add	r4, r5
   e52f0:	f819 3b01 	ldrb.w	r3, [r9], #1
   e52f4:	4601      	mov	r1, r0
   e52f6:	3b30      	subs	r3, #48	; 0x30
   e52f8:	220a      	movs	r2, #10
   e52fa:	4630      	mov	r0, r6
   e52fc:	f7ff ff9e 	bl	e523c <__multadd>
   e5300:	45a1      	cmp	r9, r4
   e5302:	d1f5      	bne.n	e52f0 <__s2b+0x3e>
   e5304:	eb08 0405 	add.w	r4, r8, r5
   e5308:	3c08      	subs	r4, #8
   e530a:	e001      	b.n	e5310 <__s2b+0x5e>
   e530c:	340a      	adds	r4, #10
   e530e:	2509      	movs	r5, #9
   e5310:	1b2d      	subs	r5, r5, r4
   e5312:	1963      	adds	r3, r4, r5
   e5314:	429f      	cmp	r7, r3
   e5316:	dd08      	ble.n	e532a <__s2b+0x78>
   e5318:	f814 3b01 	ldrb.w	r3, [r4], #1
   e531c:	4601      	mov	r1, r0
   e531e:	3b30      	subs	r3, #48	; 0x30
   e5320:	220a      	movs	r2, #10
   e5322:	4630      	mov	r0, r6
   e5324:	f7ff ff8a 	bl	e523c <__multadd>
   e5328:	e7f3      	b.n	e5312 <__s2b+0x60>
   e532a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e532e <__hi0bits>:
   e532e:	0c03      	lsrs	r3, r0, #16
   e5330:	041b      	lsls	r3, r3, #16
   e5332:	b913      	cbnz	r3, e533a <__hi0bits+0xc>
   e5334:	0400      	lsls	r0, r0, #16
   e5336:	2310      	movs	r3, #16
   e5338:	e000      	b.n	e533c <__hi0bits+0xe>
   e533a:	2300      	movs	r3, #0
   e533c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e5340:	bf04      	itt	eq
   e5342:	0200      	lsleq	r0, r0, #8
   e5344:	3308      	addeq	r3, #8
   e5346:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e534a:	bf04      	itt	eq
   e534c:	0100      	lsleq	r0, r0, #4
   e534e:	3304      	addeq	r3, #4
   e5350:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e5354:	bf04      	itt	eq
   e5356:	0080      	lsleq	r0, r0, #2
   e5358:	3302      	addeq	r3, #2
   e535a:	2800      	cmp	r0, #0
   e535c:	db03      	blt.n	e5366 <__hi0bits+0x38>
   e535e:	0042      	lsls	r2, r0, #1
   e5360:	d503      	bpl.n	e536a <__hi0bits+0x3c>
   e5362:	1c58      	adds	r0, r3, #1
   e5364:	4770      	bx	lr
   e5366:	4618      	mov	r0, r3
   e5368:	4770      	bx	lr
   e536a:	2020      	movs	r0, #32
   e536c:	4770      	bx	lr

000e536e <__lo0bits>:
   e536e:	6803      	ldr	r3, [r0, #0]
   e5370:	f013 0207 	ands.w	r2, r3, #7
   e5374:	d00b      	beq.n	e538e <__lo0bits+0x20>
   e5376:	07d9      	lsls	r1, r3, #31
   e5378:	d422      	bmi.n	e53c0 <__lo0bits+0x52>
   e537a:	079a      	lsls	r2, r3, #30
   e537c:	bf4b      	itete	mi
   e537e:	085b      	lsrmi	r3, r3, #1
   e5380:	089b      	lsrpl	r3, r3, #2
   e5382:	6003      	strmi	r3, [r0, #0]
   e5384:	6003      	strpl	r3, [r0, #0]
   e5386:	bf4c      	ite	mi
   e5388:	2001      	movmi	r0, #1
   e538a:	2002      	movpl	r0, #2
   e538c:	4770      	bx	lr
   e538e:	b299      	uxth	r1, r3
   e5390:	b909      	cbnz	r1, e5396 <__lo0bits+0x28>
   e5392:	0c1b      	lsrs	r3, r3, #16
   e5394:	2210      	movs	r2, #16
   e5396:	f013 0fff 	tst.w	r3, #255	; 0xff
   e539a:	bf04      	itt	eq
   e539c:	0a1b      	lsreq	r3, r3, #8
   e539e:	3208      	addeq	r2, #8
   e53a0:	0719      	lsls	r1, r3, #28
   e53a2:	bf04      	itt	eq
   e53a4:	091b      	lsreq	r3, r3, #4
   e53a6:	3204      	addeq	r2, #4
   e53a8:	0799      	lsls	r1, r3, #30
   e53aa:	bf04      	itt	eq
   e53ac:	089b      	lsreq	r3, r3, #2
   e53ae:	3202      	addeq	r2, #2
   e53b0:	07d9      	lsls	r1, r3, #31
   e53b2:	d402      	bmi.n	e53ba <__lo0bits+0x4c>
   e53b4:	085b      	lsrs	r3, r3, #1
   e53b6:	d005      	beq.n	e53c4 <__lo0bits+0x56>
   e53b8:	3201      	adds	r2, #1
   e53ba:	6003      	str	r3, [r0, #0]
   e53bc:	4610      	mov	r0, r2
   e53be:	4770      	bx	lr
   e53c0:	2000      	movs	r0, #0
   e53c2:	4770      	bx	lr
   e53c4:	2020      	movs	r0, #32
   e53c6:	4770      	bx	lr

000e53c8 <__i2b>:
   e53c8:	b510      	push	{r4, lr}
   e53ca:	460c      	mov	r4, r1
   e53cc:	2101      	movs	r1, #1
   e53ce:	f7ff fee9 	bl	e51a4 <_Balloc>
   e53d2:	2201      	movs	r2, #1
   e53d4:	6144      	str	r4, [r0, #20]
   e53d6:	6102      	str	r2, [r0, #16]
   e53d8:	bd10      	pop	{r4, pc}

000e53da <__multiply>:
   e53da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e53de:	4614      	mov	r4, r2
   e53e0:	690a      	ldr	r2, [r1, #16]
   e53e2:	6923      	ldr	r3, [r4, #16]
   e53e4:	429a      	cmp	r2, r3
   e53e6:	bfb8      	it	lt
   e53e8:	460b      	movlt	r3, r1
   e53ea:	4688      	mov	r8, r1
   e53ec:	bfbc      	itt	lt
   e53ee:	46a0      	movlt	r8, r4
   e53f0:	461c      	movlt	r4, r3
   e53f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e53f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e53fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e53fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e5402:	eb07 0609 	add.w	r6, r7, r9
   e5406:	429e      	cmp	r6, r3
   e5408:	bfc8      	it	gt
   e540a:	3101      	addgt	r1, #1
   e540c:	f7ff feca 	bl	e51a4 <_Balloc>
   e5410:	f100 0514 	add.w	r5, r0, #20
   e5414:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e5418:	462b      	mov	r3, r5
   e541a:	2200      	movs	r2, #0
   e541c:	4563      	cmp	r3, ip
   e541e:	d202      	bcs.n	e5426 <__multiply+0x4c>
   e5420:	f843 2b04 	str.w	r2, [r3], #4
   e5424:	e7fa      	b.n	e541c <__multiply+0x42>
   e5426:	f104 0214 	add.w	r2, r4, #20
   e542a:	f108 0114 	add.w	r1, r8, #20
   e542e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e5432:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e5436:	9300      	str	r3, [sp, #0]
   e5438:	9b00      	ldr	r3, [sp, #0]
   e543a:	9201      	str	r2, [sp, #4]
   e543c:	4293      	cmp	r3, r2
   e543e:	d957      	bls.n	e54f0 <__multiply+0x116>
   e5440:	f8b2 b000 	ldrh.w	fp, [r2]
   e5444:	f1bb 0f00 	cmp.w	fp, #0
   e5448:	d023      	beq.n	e5492 <__multiply+0xb8>
   e544a:	4689      	mov	r9, r1
   e544c:	46ae      	mov	lr, r5
   e544e:	f04f 0800 	mov.w	r8, #0
   e5452:	f859 4b04 	ldr.w	r4, [r9], #4
   e5456:	f8be a000 	ldrh.w	sl, [lr]
   e545a:	b2a3      	uxth	r3, r4
   e545c:	fb0b a303 	mla	r3, fp, r3, sl
   e5460:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e5464:	f8de 4000 	ldr.w	r4, [lr]
   e5468:	4443      	add	r3, r8
   e546a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e546e:	fb0b 840a 	mla	r4, fp, sl, r8
   e5472:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e5476:	46f2      	mov	sl, lr
   e5478:	b29b      	uxth	r3, r3
   e547a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e547e:	454f      	cmp	r7, r9
   e5480:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e5484:	f84a 3b04 	str.w	r3, [sl], #4
   e5488:	d901      	bls.n	e548e <__multiply+0xb4>
   e548a:	46d6      	mov	lr, sl
   e548c:	e7e1      	b.n	e5452 <__multiply+0x78>
   e548e:	f8ce 8004 	str.w	r8, [lr, #4]
   e5492:	9b01      	ldr	r3, [sp, #4]
   e5494:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e5498:	3204      	adds	r2, #4
   e549a:	f1ba 0f00 	cmp.w	sl, #0
   e549e:	d021      	beq.n	e54e4 <__multiply+0x10a>
   e54a0:	682b      	ldr	r3, [r5, #0]
   e54a2:	462c      	mov	r4, r5
   e54a4:	4689      	mov	r9, r1
   e54a6:	f04f 0800 	mov.w	r8, #0
   e54aa:	f8b9 e000 	ldrh.w	lr, [r9]
   e54ae:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e54b2:	fb0a be0e 	mla	lr, sl, lr, fp
   e54b6:	44f0      	add	r8, lr
   e54b8:	46a3      	mov	fp, r4
   e54ba:	b29b      	uxth	r3, r3
   e54bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e54c0:	f84b 3b04 	str.w	r3, [fp], #4
   e54c4:	f859 3b04 	ldr.w	r3, [r9], #4
   e54c8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e54cc:	0c1b      	lsrs	r3, r3, #16
   e54ce:	fb0a e303 	mla	r3, sl, r3, lr
   e54d2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e54d6:	454f      	cmp	r7, r9
   e54d8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e54dc:	d901      	bls.n	e54e2 <__multiply+0x108>
   e54de:	465c      	mov	r4, fp
   e54e0:	e7e3      	b.n	e54aa <__multiply+0xd0>
   e54e2:	6063      	str	r3, [r4, #4]
   e54e4:	3504      	adds	r5, #4
   e54e6:	e7a7      	b.n	e5438 <__multiply+0x5e>
   e54e8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e54ec:	b913      	cbnz	r3, e54f4 <__multiply+0x11a>
   e54ee:	3e01      	subs	r6, #1
   e54f0:	2e00      	cmp	r6, #0
   e54f2:	dcf9      	bgt.n	e54e8 <__multiply+0x10e>
   e54f4:	6106      	str	r6, [r0, #16]
   e54f6:	b003      	add	sp, #12
   e54f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e54fc <__pow5mult>:
   e54fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e5500:	4615      	mov	r5, r2
   e5502:	f012 0203 	ands.w	r2, r2, #3
   e5506:	4606      	mov	r6, r0
   e5508:	460f      	mov	r7, r1
   e550a:	d007      	beq.n	e551c <__pow5mult+0x20>
   e550c:	3a01      	subs	r2, #1
   e550e:	4c21      	ldr	r4, [pc, #132]	; (e5594 <__pow5mult+0x98>)
   e5510:	2300      	movs	r3, #0
   e5512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e5516:	f7ff fe91 	bl	e523c <__multadd>
   e551a:	4607      	mov	r7, r0
   e551c:	10ad      	asrs	r5, r5, #2
   e551e:	d036      	beq.n	e558e <__pow5mult+0x92>
   e5520:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e5522:	b93c      	cbnz	r4, e5534 <__pow5mult+0x38>
   e5524:	2010      	movs	r0, #16
   e5526:	f7f4 fbc3 	bl	d9cb0 <malloc>
   e552a:	6270      	str	r0, [r6, #36]	; 0x24
   e552c:	6044      	str	r4, [r0, #4]
   e552e:	6084      	str	r4, [r0, #8]
   e5530:	6004      	str	r4, [r0, #0]
   e5532:	60c4      	str	r4, [r0, #12]
   e5534:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e5538:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e553c:	b94c      	cbnz	r4, e5552 <__pow5mult+0x56>
   e553e:	f240 2171 	movw	r1, #625	; 0x271
   e5542:	4630      	mov	r0, r6
   e5544:	f7ff ff40 	bl	e53c8 <__i2b>
   e5548:	2300      	movs	r3, #0
   e554a:	f8c8 0008 	str.w	r0, [r8, #8]
   e554e:	4604      	mov	r4, r0
   e5550:	6003      	str	r3, [r0, #0]
   e5552:	f04f 0800 	mov.w	r8, #0
   e5556:	07eb      	lsls	r3, r5, #31
   e5558:	d50a      	bpl.n	e5570 <__pow5mult+0x74>
   e555a:	4639      	mov	r1, r7
   e555c:	4622      	mov	r2, r4
   e555e:	4630      	mov	r0, r6
   e5560:	f7ff ff3b 	bl	e53da <__multiply>
   e5564:	4639      	mov	r1, r7
   e5566:	4681      	mov	r9, r0
   e5568:	4630      	mov	r0, r6
   e556a:	f7ff fe50 	bl	e520e <_Bfree>
   e556e:	464f      	mov	r7, r9
   e5570:	106d      	asrs	r5, r5, #1
   e5572:	d00c      	beq.n	e558e <__pow5mult+0x92>
   e5574:	6820      	ldr	r0, [r4, #0]
   e5576:	b108      	cbz	r0, e557c <__pow5mult+0x80>
   e5578:	4604      	mov	r4, r0
   e557a:	e7ec      	b.n	e5556 <__pow5mult+0x5a>
   e557c:	4622      	mov	r2, r4
   e557e:	4621      	mov	r1, r4
   e5580:	4630      	mov	r0, r6
   e5582:	f7ff ff2a 	bl	e53da <__multiply>
   e5586:	6020      	str	r0, [r4, #0]
   e5588:	f8c0 8000 	str.w	r8, [r0]
   e558c:	e7f4      	b.n	e5578 <__pow5mult+0x7c>
   e558e:	4638      	mov	r0, r7
   e5590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e5594:	000e7710 	.word	0x000e7710

000e5598 <__lshift>:
   e5598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e559c:	460c      	mov	r4, r1
   e559e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e55a2:	6926      	ldr	r6, [r4, #16]
   e55a4:	6849      	ldr	r1, [r1, #4]
   e55a6:	68a3      	ldr	r3, [r4, #8]
   e55a8:	4456      	add	r6, sl
   e55aa:	4607      	mov	r7, r0
   e55ac:	4691      	mov	r9, r2
   e55ae:	1c75      	adds	r5, r6, #1
   e55b0:	42ab      	cmp	r3, r5
   e55b2:	da02      	bge.n	e55ba <__lshift+0x22>
   e55b4:	3101      	adds	r1, #1
   e55b6:	005b      	lsls	r3, r3, #1
   e55b8:	e7fa      	b.n	e55b0 <__lshift+0x18>
   e55ba:	4638      	mov	r0, r7
   e55bc:	f7ff fdf2 	bl	e51a4 <_Balloc>
   e55c0:	2300      	movs	r3, #0
   e55c2:	4680      	mov	r8, r0
   e55c4:	f100 0114 	add.w	r1, r0, #20
   e55c8:	461a      	mov	r2, r3
   e55ca:	4553      	cmp	r3, sl
   e55cc:	da03      	bge.n	e55d6 <__lshift+0x3e>
   e55ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e55d2:	3301      	adds	r3, #1
   e55d4:	e7f9      	b.n	e55ca <__lshift+0x32>
   e55d6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e55da:	6920      	ldr	r0, [r4, #16]
   e55dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e55e0:	f019 091f 	ands.w	r9, r9, #31
   e55e4:	f104 0114 	add.w	r1, r4, #20
   e55e8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e55ec:	d014      	beq.n	e5618 <__lshift+0x80>
   e55ee:	f1c9 0c20 	rsb	ip, r9, #32
   e55f2:	2200      	movs	r2, #0
   e55f4:	6808      	ldr	r0, [r1, #0]
   e55f6:	fa00 f009 	lsl.w	r0, r0, r9
   e55fa:	4302      	orrs	r2, r0
   e55fc:	469a      	mov	sl, r3
   e55fe:	f843 2b04 	str.w	r2, [r3], #4
   e5602:	f851 2b04 	ldr.w	r2, [r1], #4
   e5606:	458e      	cmp	lr, r1
   e5608:	fa22 f20c 	lsr.w	r2, r2, ip
   e560c:	d8f2      	bhi.n	e55f4 <__lshift+0x5c>
   e560e:	f8ca 2004 	str.w	r2, [sl, #4]
   e5612:	b142      	cbz	r2, e5626 <__lshift+0x8e>
   e5614:	1cb5      	adds	r5, r6, #2
   e5616:	e006      	b.n	e5626 <__lshift+0x8e>
   e5618:	3b04      	subs	r3, #4
   e561a:	f851 2b04 	ldr.w	r2, [r1], #4
   e561e:	f843 2f04 	str.w	r2, [r3, #4]!
   e5622:	458e      	cmp	lr, r1
   e5624:	d8f9      	bhi.n	e561a <__lshift+0x82>
   e5626:	3d01      	subs	r5, #1
   e5628:	4638      	mov	r0, r7
   e562a:	f8c8 5010 	str.w	r5, [r8, #16]
   e562e:	4621      	mov	r1, r4
   e5630:	f7ff fded 	bl	e520e <_Bfree>
   e5634:	4640      	mov	r0, r8
   e5636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e563a <__mcmp>:
   e563a:	6903      	ldr	r3, [r0, #16]
   e563c:	690a      	ldr	r2, [r1, #16]
   e563e:	1a9b      	subs	r3, r3, r2
   e5640:	b510      	push	{r4, lr}
   e5642:	d111      	bne.n	e5668 <__mcmp+0x2e>
   e5644:	0092      	lsls	r2, r2, #2
   e5646:	3014      	adds	r0, #20
   e5648:	3114      	adds	r1, #20
   e564a:	1883      	adds	r3, r0, r2
   e564c:	440a      	add	r2, r1
   e564e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e5652:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e5656:	428c      	cmp	r4, r1
   e5658:	d002      	beq.n	e5660 <__mcmp+0x26>
   e565a:	d307      	bcc.n	e566c <__mcmp+0x32>
   e565c:	2001      	movs	r0, #1
   e565e:	bd10      	pop	{r4, pc}
   e5660:	4298      	cmp	r0, r3
   e5662:	d3f4      	bcc.n	e564e <__mcmp+0x14>
   e5664:	2000      	movs	r0, #0
   e5666:	bd10      	pop	{r4, pc}
   e5668:	4618      	mov	r0, r3
   e566a:	bd10      	pop	{r4, pc}
   e566c:	f04f 30ff 	mov.w	r0, #4294967295
   e5670:	bd10      	pop	{r4, pc}

000e5672 <__mdiff>:
   e5672:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e5676:	460c      	mov	r4, r1
   e5678:	4607      	mov	r7, r0
   e567a:	4611      	mov	r1, r2
   e567c:	4620      	mov	r0, r4
   e567e:	4615      	mov	r5, r2
   e5680:	f7ff ffdb 	bl	e563a <__mcmp>
   e5684:	1e06      	subs	r6, r0, #0
   e5686:	d108      	bne.n	e569a <__mdiff+0x28>
   e5688:	4631      	mov	r1, r6
   e568a:	4638      	mov	r0, r7
   e568c:	f7ff fd8a 	bl	e51a4 <_Balloc>
   e5690:	2301      	movs	r3, #1
   e5692:	6103      	str	r3, [r0, #16]
   e5694:	6146      	str	r6, [r0, #20]
   e5696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e569a:	bfbc      	itt	lt
   e569c:	4623      	movlt	r3, r4
   e569e:	462c      	movlt	r4, r5
   e56a0:	4638      	mov	r0, r7
   e56a2:	6861      	ldr	r1, [r4, #4]
   e56a4:	bfba      	itte	lt
   e56a6:	461d      	movlt	r5, r3
   e56a8:	2601      	movlt	r6, #1
   e56aa:	2600      	movge	r6, #0
   e56ac:	f7ff fd7a 	bl	e51a4 <_Balloc>
   e56b0:	692b      	ldr	r3, [r5, #16]
   e56b2:	60c6      	str	r6, [r0, #12]
   e56b4:	6926      	ldr	r6, [r4, #16]
   e56b6:	f105 0914 	add.w	r9, r5, #20
   e56ba:	3414      	adds	r4, #20
   e56bc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e56c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e56c4:	f100 0514 	add.w	r5, r0, #20
   e56c8:	f04f 0c00 	mov.w	ip, #0
   e56cc:	f854 3b04 	ldr.w	r3, [r4], #4
   e56d0:	f859 2b04 	ldr.w	r2, [r9], #4
   e56d4:	fa1c f183 	uxtah	r1, ip, r3
   e56d8:	fa1f fe82 	uxth.w	lr, r2
   e56dc:	0c12      	lsrs	r2, r2, #16
   e56de:	ebce 0101 	rsb	r1, lr, r1
   e56e2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e56e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e56ea:	b289      	uxth	r1, r1
   e56ec:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e56f0:	45c8      	cmp	r8, r9
   e56f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e56f6:	46a6      	mov	lr, r4
   e56f8:	f845 3b04 	str.w	r3, [r5], #4
   e56fc:	d8e6      	bhi.n	e56cc <__mdiff+0x5a>
   e56fe:	45be      	cmp	lr, r7
   e5700:	d20e      	bcs.n	e5720 <__mdiff+0xae>
   e5702:	f85e 1b04 	ldr.w	r1, [lr], #4
   e5706:	fa1c f281 	uxtah	r2, ip, r1
   e570a:	1413      	asrs	r3, r2, #16
   e570c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e5710:	b292      	uxth	r2, r2
   e5712:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e5716:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e571a:	f845 2b04 	str.w	r2, [r5], #4
   e571e:	e7ee      	b.n	e56fe <__mdiff+0x8c>
   e5720:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e5724:	b90b      	cbnz	r3, e572a <__mdiff+0xb8>
   e5726:	3e01      	subs	r6, #1
   e5728:	e7fa      	b.n	e5720 <__mdiff+0xae>
   e572a:	6106      	str	r6, [r0, #16]
   e572c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e5730 <__ulp>:
   e5730:	4b12      	ldr	r3, [pc, #72]	; (e577c <__ulp+0x4c>)
   e5732:	ee10 2a90 	vmov	r2, s1
   e5736:	401a      	ands	r2, r3
   e5738:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e573c:	2b00      	cmp	r3, #0
   e573e:	dd02      	ble.n	e5746 <__ulp+0x16>
   e5740:	2000      	movs	r0, #0
   e5742:	4619      	mov	r1, r3
   e5744:	e017      	b.n	e5776 <__ulp+0x46>
   e5746:	425b      	negs	r3, r3
   e5748:	151b      	asrs	r3, r3, #20
   e574a:	2b13      	cmp	r3, #19
   e574c:	f04f 0000 	mov.w	r0, #0
   e5750:	f04f 0100 	mov.w	r1, #0
   e5754:	dc04      	bgt.n	e5760 <__ulp+0x30>
   e5756:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e575a:	fa42 f103 	asr.w	r1, r2, r3
   e575e:	e00a      	b.n	e5776 <__ulp+0x46>
   e5760:	3b14      	subs	r3, #20
   e5762:	2b1e      	cmp	r3, #30
   e5764:	f04f 0201 	mov.w	r2, #1
   e5768:	bfda      	itte	le
   e576a:	f1c3 031f 	rsble	r3, r3, #31
   e576e:	fa02 f303 	lslle.w	r3, r2, r3
   e5772:	4613      	movgt	r3, r2
   e5774:	4618      	mov	r0, r3
   e5776:	ec41 0b10 	vmov	d0, r0, r1
   e577a:	4770      	bx	lr
   e577c:	7ff00000 	.word	0x7ff00000

000e5780 <__b2d>:
   e5780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e5782:	6905      	ldr	r5, [r0, #16]
   e5784:	f100 0614 	add.w	r6, r0, #20
   e5788:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e578c:	1f2f      	subs	r7, r5, #4
   e578e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e5792:	4620      	mov	r0, r4
   e5794:	f7ff fdcb 	bl	e532e <__hi0bits>
   e5798:	f1c0 0320 	rsb	r3, r0, #32
   e579c:	280a      	cmp	r0, #10
   e579e:	600b      	str	r3, [r1, #0]
   e57a0:	dc14      	bgt.n	e57cc <__b2d+0x4c>
   e57a2:	f1c0 0e0b 	rsb	lr, r0, #11
   e57a6:	fa24 f10e 	lsr.w	r1, r4, lr
   e57aa:	42be      	cmp	r6, r7
   e57ac:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e57b0:	bf34      	ite	cc
   e57b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e57b6:	2100      	movcs	r1, #0
   e57b8:	3015      	adds	r0, #21
   e57ba:	fa04 f000 	lsl.w	r0, r4, r0
   e57be:	fa21 f10e 	lsr.w	r1, r1, lr
   e57c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e57c6:	ea40 0201 	orr.w	r2, r0, r1
   e57ca:	e023      	b.n	e5814 <__b2d+0x94>
   e57cc:	42be      	cmp	r6, r7
   e57ce:	bf3a      	itte	cc
   e57d0:	f1a5 0708 	subcc.w	r7, r5, #8
   e57d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e57d8:	2100      	movcs	r1, #0
   e57da:	380b      	subs	r0, #11
   e57dc:	d015      	beq.n	e580a <__b2d+0x8a>
   e57de:	4084      	lsls	r4, r0
   e57e0:	f1c0 0520 	rsb	r5, r0, #32
   e57e4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e57e8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e57ec:	42b7      	cmp	r7, r6
   e57ee:	fa21 fe05 	lsr.w	lr, r1, r5
   e57f2:	ea44 030e 	orr.w	r3, r4, lr
   e57f6:	bf8c      	ite	hi
   e57f8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e57fc:	2400      	movls	r4, #0
   e57fe:	fa01 f000 	lsl.w	r0, r1, r0
   e5802:	40ec      	lsrs	r4, r5
   e5804:	ea40 0204 	orr.w	r2, r0, r4
   e5808:	e004      	b.n	e5814 <__b2d+0x94>
   e580a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e580e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e5812:	460a      	mov	r2, r1
   e5814:	ec43 2b10 	vmov	d0, r2, r3
   e5818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e581a <__d2b>:
   e581a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e581e:	460e      	mov	r6, r1
   e5820:	2101      	movs	r1, #1
   e5822:	ec59 8b10 	vmov	r8, r9, d0
   e5826:	4615      	mov	r5, r2
   e5828:	f7ff fcbc 	bl	e51a4 <_Balloc>
   e582c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e5830:	4607      	mov	r7, r0
   e5832:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e5836:	b10c      	cbz	r4, e583c <__d2b+0x22>
   e5838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e583c:	9301      	str	r3, [sp, #4]
   e583e:	f1b8 0f00 	cmp.w	r8, #0
   e5842:	d019      	beq.n	e5878 <__d2b+0x5e>
   e5844:	a802      	add	r0, sp, #8
   e5846:	f840 8d08 	str.w	r8, [r0, #-8]!
   e584a:	f7ff fd90 	bl	e536e <__lo0bits>
   e584e:	9b00      	ldr	r3, [sp, #0]
   e5850:	b148      	cbz	r0, e5866 <__d2b+0x4c>
   e5852:	9a01      	ldr	r2, [sp, #4]
   e5854:	f1c0 0120 	rsb	r1, r0, #32
   e5858:	fa02 f101 	lsl.w	r1, r2, r1
   e585c:	430b      	orrs	r3, r1
   e585e:	40c2      	lsrs	r2, r0
   e5860:	617b      	str	r3, [r7, #20]
   e5862:	9201      	str	r2, [sp, #4]
   e5864:	e000      	b.n	e5868 <__d2b+0x4e>
   e5866:	617b      	str	r3, [r7, #20]
   e5868:	9b01      	ldr	r3, [sp, #4]
   e586a:	61bb      	str	r3, [r7, #24]
   e586c:	2b00      	cmp	r3, #0
   e586e:	bf14      	ite	ne
   e5870:	2102      	movne	r1, #2
   e5872:	2101      	moveq	r1, #1
   e5874:	6139      	str	r1, [r7, #16]
   e5876:	e007      	b.n	e5888 <__d2b+0x6e>
   e5878:	a801      	add	r0, sp, #4
   e587a:	f7ff fd78 	bl	e536e <__lo0bits>
   e587e:	9b01      	ldr	r3, [sp, #4]
   e5880:	617b      	str	r3, [r7, #20]
   e5882:	2101      	movs	r1, #1
   e5884:	6139      	str	r1, [r7, #16]
   e5886:	3020      	adds	r0, #32
   e5888:	b134      	cbz	r4, e5898 <__d2b+0x7e>
   e588a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e588e:	4404      	add	r4, r0
   e5890:	6034      	str	r4, [r6, #0]
   e5892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e5896:	e009      	b.n	e58ac <__d2b+0x92>
   e5898:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e589c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e58a0:	6030      	str	r0, [r6, #0]
   e58a2:	6918      	ldr	r0, [r3, #16]
   e58a4:	f7ff fd43 	bl	e532e <__hi0bits>
   e58a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e58ac:	6028      	str	r0, [r5, #0]
   e58ae:	4638      	mov	r0, r7
   e58b0:	b003      	add	sp, #12
   e58b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e58b6 <__ratio>:
   e58b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e58ba:	4688      	mov	r8, r1
   e58bc:	4669      	mov	r1, sp
   e58be:	4681      	mov	r9, r0
   e58c0:	f7ff ff5e 	bl	e5780 <__b2d>
   e58c4:	a901      	add	r1, sp, #4
   e58c6:	4640      	mov	r0, r8
   e58c8:	ec55 4b10 	vmov	r4, r5, d0
   e58cc:	f7ff ff58 	bl	e5780 <__b2d>
   e58d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e58d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e58d8:	1a9a      	subs	r2, r3, r2
   e58da:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e58de:	1ac9      	subs	r1, r1, r3
   e58e0:	ec57 6b10 	vmov	r6, r7, d0
   e58e4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e58e8:	2b00      	cmp	r3, #0
   e58ea:	bfcc      	ite	gt
   e58ec:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e58f0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e58f4:	4632      	mov	r2, r6
   e58f6:	463b      	mov	r3, r7
   e58f8:	4620      	mov	r0, r4
   e58fa:	4629      	mov	r1, r5
   e58fc:	f7fc fb42 	bl	e1f84 <__aeabi_ddiv>
   e5900:	ec41 0b10 	vmov	d0, r0, r1
   e5904:	b003      	add	sp, #12
   e5906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e590a <__copybits>:
   e590a:	3901      	subs	r1, #1
   e590c:	b510      	push	{r4, lr}
   e590e:	1149      	asrs	r1, r1, #5
   e5910:	6914      	ldr	r4, [r2, #16]
   e5912:	3101      	adds	r1, #1
   e5914:	f102 0314 	add.w	r3, r2, #20
   e5918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e591c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e5920:	42a3      	cmp	r3, r4
   e5922:	4602      	mov	r2, r0
   e5924:	d204      	bcs.n	e5930 <__copybits+0x26>
   e5926:	f853 2b04 	ldr.w	r2, [r3], #4
   e592a:	f840 2b04 	str.w	r2, [r0], #4
   e592e:	e7f7      	b.n	e5920 <__copybits+0x16>
   e5930:	2300      	movs	r3, #0
   e5932:	428a      	cmp	r2, r1
   e5934:	d202      	bcs.n	e593c <__copybits+0x32>
   e5936:	f842 3b04 	str.w	r3, [r2], #4
   e593a:	e7fa      	b.n	e5932 <__copybits+0x28>
   e593c:	bd10      	pop	{r4, pc}

000e593e <__any_on>:
   e593e:	f100 0214 	add.w	r2, r0, #20
   e5942:	6900      	ldr	r0, [r0, #16]
   e5944:	114b      	asrs	r3, r1, #5
   e5946:	4298      	cmp	r0, r3
   e5948:	b510      	push	{r4, lr}
   e594a:	db0c      	blt.n	e5966 <__any_on+0x28>
   e594c:	dd0c      	ble.n	e5968 <__any_on+0x2a>
   e594e:	f011 011f 	ands.w	r1, r1, #31
   e5952:	d009      	beq.n	e5968 <__any_on+0x2a>
   e5954:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e5958:	fa24 f001 	lsr.w	r0, r4, r1
   e595c:	fa00 f101 	lsl.w	r1, r0, r1
   e5960:	428c      	cmp	r4, r1
   e5962:	d10c      	bne.n	e597e <__any_on+0x40>
   e5964:	e000      	b.n	e5968 <__any_on+0x2a>
   e5966:	4603      	mov	r3, r0
   e5968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e596c:	4293      	cmp	r3, r2
   e596e:	d904      	bls.n	e597a <__any_on+0x3c>
   e5970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e5974:	2900      	cmp	r1, #0
   e5976:	d0f9      	beq.n	e596c <__any_on+0x2e>
   e5978:	e001      	b.n	e597e <__any_on+0x40>
   e597a:	2000      	movs	r0, #0
   e597c:	bd10      	pop	{r4, pc}
   e597e:	2001      	movs	r0, #1
   e5980:	bd10      	pop	{r4, pc}

000e5982 <_calloc_r>:
   e5982:	b538      	push	{r3, r4, r5, lr}
   e5984:	fb02 f401 	mul.w	r4, r2, r1
   e5988:	4621      	mov	r1, r4
   e598a:	f7f4 f9d9 	bl	d9d40 <_malloc_r>
   e598e:	4605      	mov	r5, r0
   e5990:	b118      	cbz	r0, e599a <_calloc_r+0x18>
   e5992:	4622      	mov	r2, r4
   e5994:	2100      	movs	r1, #0
   e5996:	f7fc fe70 	bl	e267a <memset>
   e599a:	4628      	mov	r0, r5
   e599c:	bd38      	pop	{r3, r4, r5, pc}

000e599e <__env_lock>:
   e599e:	4770      	bx	lr

000e59a0 <__env_unlock>:
   e59a0:	4770      	bx	lr

000e59a2 <link_code_end>:
	...

000e59a4 <dynalib_user>:
   e59a4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e59b4:	0000 0000                                   ....

000e59b8 <functions>:
   e59b8:	5b5e 000e c921 000d 0029 0000 0000 0000     ^[..!...).......
   e59c8:	5b62 000e cca1 000d 0029 0000 0000 0000     b[......).......
   e59d8:	5b67 000e cd65 000d 0029 0000 0000 0000     g[..e...).......
   e59e8:	5b6c 000e c3c9 000d 0029 0000 0000 0000     l[......).......
   e59f8:	5b71 000e ce29 000d 002a 0000 0000 0000     q[..)...*.......
   e5a08:	5b77 000e c741 000d 0029 0000 0000 0000     w[..A...).......
   e5a18:	5b63 000e c861 000d 0029 0000 0000 0000     c[..a...).......
   e5a28:	5b7c 000e ce31 000d 0029 0000 0000 0000     |[..1...).......
   e5a38:	6b99 000e 40c9 000d 0028 0000 0000 0000     .k...@..(.......
   e5a48:	5b81 000e cf09 000d 0029 0000 0000 0000     .[......).......
   e5a58:	5b85 000e 43d9 000d 0029 0000 0000 0000     .[...C..).......
   e5a68:	5b89 000e c931 000d 0029 0000 0000 0000     .[..1...).......
   e5a78:	5b8f 000e d0e9 000d 0029 0000 0000 0000     .[......).......
   e5a88:	5b92 000e d1f9 000d 0029 0000 0000 0000     .[......).......
   e5a98:	5b96 000e d1f9 000d 0029 0000 0000 0000     .[......).......
   e5aa8:	5b9c 000e 4449 000d 002a 0000 0000 0000     .[..ID..*.......
   e5ab8:	5ba0 000e 4509 000d 002a 0000 0000 0000     .[...E..*.......
   e5ac8:	5ba4 000e 40b9 000d 0028 0000 0000 0000     .[...@..(.......
   e5ad8:	5ba7 000e d311 000d 002a 0000 0000 0000     .[......*.......
   e5ae8:	5b68 000e ca51 000d 0029 0000 0000 0000     h[..Q...).......
   e5af8:	5bab 000e d649 000d 0029 0000 0000 0000     .[..I...).......
   e5b08:	5bb0 000e d725 000d 0029 0000 0000 0000     .[..%...).......
   e5b18:	5b6d 000e cb11 000d 0029 0000 0000 0000     m[......).......
   e5b28:	5bb5 000e cb81 000d 0029 0000 0000 0000     .[......).......
	...
   e5b48:	2a25 0073 6625 000a 6f62 6e75 2064 7025     %*s.%f..bound %p
   e5b58:	000a 2566 0064 6261 0073 6361 736f 6100     ..f%d.abs.acos.a
   e5b68:	6973 006e 7461 6e61 6100 6174 326e 6300     sin.atan.atan2.c
   e5b78:	6965 006c 6f63 6873 6500 7078 6600 6361     eil.cosh.exp.fac
   e5b88:	6600 6f6c 726f 6c00 006e 6f6c 0067 6f6c     .floor.ln.log.lo
   e5b98:	3167 0030 636e 0072 706e 0072 6970 7000     g10.ncr.npr.pi.p
   e5ba8:	776f 7300 6e69 0068 7173 7472 7400 6e61     ow.sinh.sqrt.tan
   e5bb8:	0068 0000                                   h...

000e5bbc <_ZTVN8particle9LEDStatusE>:
	...
   e5bc4:	538d 000d 53a9 000d 52f3 000d               .S...S...R..

000e5bd0 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e5bd0:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e35     blnkinf.ver.0.5.
   e5be0:	0034 2d68 6562 7461 3600 0030 7562 6666     4.h-beat.60.buff
   e5bf0:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e5c00:	6974 6c63 0065 7562 6c69 0064 614a 206e     ticle.build.Jan 
   e5c10:	3220 3220 3230 2030 3431 303a 3a34 3934      2 2020 14:04:49
   e5c20:	0000 5d00 0020 4d47 2054 6573 6f63 646e     ...] .GMT second
   e5c30:	2073 666f 7366 7465 6920 3a73 0020 6925     s offset is: .%i
   e5c40:	2500 696c 4300 6e6f 656e 7463 6e69 2067     .%li.Connecting 
   e5c50:	6f74 0020 0a0d 2020 2020 5f5f 205f 5f20     to ...    ___  _
   e5c60:	205f 2020 2020 2020 2020 5f20 0d5f 200a     _          __.. 
   e5c70:	2020 202f 205f 2f29 2f20 205f 5f5f 5f5f       / _ )/ /_ ____
   e5c80:	205f 2f20 2f20 5f5f 0a0d 2020 202f 205f     _  / /__..  / _ 
   e5c90:	2f20 2f20 2f20 202f 202f 205f 2f5c 2020      / / // / _ \/  
   e5ca0:	5f27 0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c     '_/.. /____/_/\_
   e5cb0:	202c 5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a     , /_//_/_/\_\.. 
   e5cc0:	2020 2020 2020 2f20 5f5f 2f5f 7620 2e30            /___/ v0.
   e5cd0:	2e35 2034 6e6f 5020 7261 6974 6c63 0d65     5.4 on Particle.
   e5ce0:	000a 6544 6976 6563 0020 6120 6464 6572     ..Device . addre
   e5cf0:	7373 303a 0078 4e20 544f 6120 0074 6353     ss:0x. NOT at.Sc
   e5d00:	6e61 696e 676e 2e2e 002e 6e55 6e6b 776f     anning....Unknow
   e5d10:	206e 7265 6f72 2072 7461 6120 6464 6572     n error at addre
   e5d20:	7373 3020 0078 6f4e 4920 4332 6420 7665     ss 0x.No I2C dev
   e5d30:	6369 7365 6620 756f 646e 000a 6f64 656e     ices found..done
   e5d40:	000a 6f47 6e69 2067 6f74 6420 6565 2070     ..Going to deep 
   e5d50:	6c73 6565 0070 6944 6373 6e6f 656e 7463     sleep.Disconnect
   e5d60:	6465 4900 696e 6974 6c61 7a69 6e69 2067     ed.Initializing 
   e5d70:	6c61 7261 006d 6553 6f63 646e 0073 6957     alarm.Seconds.Wi
   e5d80:	6946 6e20 746f 7220 6165 7964 4200 796c     Fi not ready.Bly
   e5d90:	6b6e 6e20 746f 6320 6e6f 656e 7463 6465     nk not connected
   e5da0:	4100 656d 6972 6163 4e2f 7765 595f 726f     .America/New_Yor
   e5db0:	006b 6d41 7265 6369 2f61 6843 6369 6761     k.America/Chicag
   e5dc0:	006f 6d41 7265 6369 2f61 6850 656f 696e     o.America/Phoeni
   e5dd0:	0078 6d41 7265 6369 2f61 6f4c 5f73 6e41     x.America/Los_An
   e5de0:	6567 656c 0073 7770 006d 7764 6100 0077     geles.pwm.dw.aw.
   e5df0:	6e49 6176 696c 2064 5748 6320 646d 203a     Invalid HW cmd: 
   e5e00:	4900 766e 6c61 6469 7020 6e69 0020 6d20     .Invalid pin . m
   e5e10:	646f 2065 3e00 4200 6461 6820 7264 6c20     ode .>.Bad hdr l
   e5e20:	6e65 203a 5200 6165 7964 2820 6970 676e     en: .Ready (ping
   e5e30:	203a 6d00 2973 002e 7246 6565 5220 4d41     : .ms)..Free RAM
   e5e40:	203a 4900 766e 6c61 6469 6120 7475 2068     : .Invalid auth 
   e5e50:	6f74 656b 006e 6f43 6e6e 6365 2074 6166     token.Connect fa
   e5e60:	6c69 6465 202e 6f63 6564 203a 5000 6361     iled. code: .Pac
   e5e70:	656b 2074 6f74 206f 6962 3a67 0020 6143     ket too big: .Ca
   e5e80:	276e 2074 6572 6461 6220 646f 0079 6552     n't read body.Re
   e5e90:	6461 0079 6552 6964 6572 7463 6e69 2067     ady.Redirecting 
   e5ea0:	6f74 0020 6e49 6176 696c 2064 6e69 6574     to .Invalid inte
   e5eb0:	6e72 6c61 6320 646d 003a 6553 7672 7265     rnal cmd:.Server
   e5ec0:	203a 4900 766e 6c61 6469 6820 6165 6564     : .Invalid heade
   e5ed0:	2072 7974 6570 203a 4800 6165 7472 6562     r type: .Heartbe
   e5ee0:	7461 7420 6d69 6f65 7475 203a 2c00 0020     at timeout: ., .
   e5ef0:	6f4c 6967 206e 6974 656d 756f 0074 003c     Login timeout.<.
   e5f00:	6d43 2064 7265 6f72 0072 6553 746e 0020     Cmd error.Sent .
   e5f10:	7776 2000 202b 2500 2e32 6633 4300 6e6f     vw. + .%2.3f.Con
   e5f20:	656e 7463 6465 7200 7365 7465 656d 4500     nected.resetme.E
   e5f30:	746e 7265 6320 646f 2065 6f74 7220 7365     nter code to res
   e5f40:	7465 4500 746e 7265 6520 7078 6572 7373     et.Enter express
   e5f50:	6f69 206e 6568 6572 4500 746e 7265 6520     ion here.Enter e
   e5f60:	616d 6c69 6820 7265 0065 6148 6472 5220     mail here.Hard R
   e5f70:	7365 7465 6974 676e 4900 696e 6974 6c61     esetting.Initial
   e5f80:	7a69 6465 6420 6665 7561 746c 7620 6c61     ized default val
   e5f90:	6575 0073 6c42 6e79 206b 7369 6e20 776f     ues.Blynk is now
   e5fa0:	6320 6e6f 656e 7463 6465 2d20 7320 6e79      connected - syn
   e5fb0:	6963 676e 6120 6c6c 7020 6e69 2e73 7000     cing all pins..p
   e5fc0:	316d 7000 326d 7000 346d 7000 316d 0030     m1.pm2.pm4.pm10.
   e5fd0:	6f63 636e 7400 6d65 0070 3225 372e 0066     conc.temp.%2.7f.
   e5fe0:	6854 2065 7865 7270 7365 6973 6e6f 6920     The expression i
   e5ff0:	2073 7254 6575 5400 6568 6520 7078 6572     s True.The expre
   e6000:	7373 6f69 206e 7369 4620 6c61 6573 4500     ssion is False.E
   e6010:	7272 726f 6e20 6165 2072 6863 7261 203a     rror near char: 
   e6020:	2a00 2a2a 4120 4343 4c45 4920 544e 5245     .*** ACCEL INTER
   e6030:	5552 5450 4445 2a20 2a2a 2a00 2a2a 4920     RUPTED ***.*** I
   e6040:	414e 5443 5649 5449 2059 2a2a 002a 447b     NACTIVITY ***.{D
   e6050:	5645 4349 5f45 414e 454d 207d 6174 706d     EVICE_NAME} tamp
   e6060:	7265 6120 616c 6d72 6520 646e 6465 002e     er alarm ended..
   e6070:	447b 5645 4349 5f45 414e 454d 207d 203a     {DEVICE_NAME} : 
   e6080:	6154 706d 7265 6120 616c 6d72 6520 646e     Tamper alarm end
   e6090:	6465 2a00 2a2a 4120 5443 5649 5449 2059     ed.*** ACTIVITY 
   e60a0:	2a2a 002a 447b 5645 4349 5f45 414e 454d     ***.{DEVICE_NAME
   e60b0:	207d 6174 706d 7265 6120 616c 6d72 0021     } tamper alarm!.
   e60c0:	447b 5645 4349 5f45 414e 454d 207d 203a     {DEVICE_NAME} : 
   e60d0:	6154 706d 7265 6120 616c 6d72 4100 7474     Tamper alarm.Att
   e60e0:	6d65 7470 6e69 2067 6f74 6320 6e6f 656e     empting to conne
   e60f0:	7463 5720 4669 2e69 2e2e 5700 4669 2069     ct WiFi....WiFi 
   e6100:	6572 6461 0079 7441 6574 706d 6974 676e     ready.Attempting
   e6110:	7420 206f 6f63 6e6e 6365 2074 6f74 5020      to connect to P
   e6120:	7261 6974 6c63 2e65 2e2e 5000 7261 6974     article....Parti
   e6130:	6c63 2065 6f6e 2074 6f63 6e6e 6365 6574     cle not connecte
   e6140:	0064 6150 7472 6369 656c 6320 6e6f 656e     d.Particle conne
   e6150:	7463 6465 4100 7474 6d65 7470 6e69 2067     cted.Attempting 
   e6160:	6f74 6320 6e6f 656e 7463 7420 206f 6c42     to connect to Bl
   e6170:	6e79 2e6b 2e2e 7a00 7065 6f74 6573 736e     ynk....zeptosens
   e6180:	3265 622e 796c 6b6e 632e 0063 6c42 6e79     e2.blynk.cc.Blyn
   e6190:	206b 6f63 6e6e 6365 6574 0064 6954 656d     k connected.Time
   e61a0:	6920 2073 7973 636e 6527 2064 6f74 7420      is sync'ed to t
   e61b0:	6568 6320 6f6c 6475 2d00 4d2d 7361 2073     he cloud.--Mass 
   e61c0:	6f43 636e 6e65 7274 7461 6f69 2d6e 002d     Concentration--.
   e61d0:	7325 203a 3025 322e 0d66 000a 2d2d 754e     %s: %0.2f...--Nu
   e61e0:	626d 7265 4320 6e6f 6563 746e 6172 6974     mber Concentrati
   e61f0:	6e6f 2d2d 2500 2e30 6631 4600 7400 6d65     on--.%0.1f.F.tem
   e6200:	3170 203a 5600 6167 3a73 0020 6f43 636e     p1: .Vgas: .Conc
   e6210:	203a 2500 2e30 6630 4100 454c 5452 2021     : .%0.0f.ALERT! 
   e6220:	2500 2044 5225 2500 4100 454c 5452 2021     .%D %R.%.ALERT! 
   e6230:	2020 2020 2020 2020 2020 2020 7c00 4f00                 .|.O
   e6240:	204b 4f00 204b 2020 2020 2020 2020 2020     K .OK           
   e6250:	2020 2020 0020 447b 5645 4349 5f45 414e          .{DEVICE_NA
   e6260:	454d 207d 6168 2073 6c61 7261 656d 2164     ME} has alarmed!
   e6270:	7b00 4544 4956 4543 4e5f 4d41 7d45 3a20     .{DEVICE_NAME} :
   e6280:	4120 616c 6d72 7b00 4544 4956 4543 4e5f      Alarm.{DEVICE_N
   e6290:	4d41 7d45 6120 616c 6d72 6520 646e 6465     AME} alarm ended
   e62a0:	002e 447b 5645 4349 5f45 414e 454d 207d     ..{DEVICE_NAME} 
   e62b0:	203a 6c41 7261 206d 6e65 6564 0064 447b     : Alarm ended.{D
   e62c0:	5645 4349 5f45 414e 454d 207d 6162 7474     EVICE_NAME} batt
   e62d0:	7265 2079 7369 0020 2125 7b00 4544 4956     ery is .%!.{DEVI
   e62e0:	4543 4e5f 4d41 7d45 3a20 4220 7461 6574     CE_NAME} : Batte
   e62f0:	7972 4c20 776f 4120 616c 6d72 2500 002e     ry Low Alarm.%..
   e6300:	447b 5645 4349 5f45 414e 454d 207d 203a     {DEVICE_NAME} : 
   e6310:	6142 7474 7265 2079 6f4c 2077 6c41 7261     Battery Low Alar
   e6320:	206d 6e65 6564 0064 6e55 6261 656c 7420     m ended.Unable t
   e6330:	206f 6572 6461 5320 5350 3033 2d20 7220     o read SPS30 - r
   e6340:	7365 7465 6974 676e 6420 7665 6369 0065     esetting device.
   e6350:	3164 253d 0075 6544 6976 6563 6420 6469     d1=%u.Device did
   e6360:	6e20 746f 7720 6b61 2065 7075 6620 6f72      not wake up fro
   e6370:	206d 6150 7472 6369 656c 7320 656c 7065     m Particle sleep
   e6380:	4400 7665 6369 2065 6177 2073 6f77 656b     .Device was woke
   e6390:	206e 7075 6220 2079 2061 6970 006e 6544     n up by a pin.De
   e63a0:	6976 6563 7720 7361 7720 6b6f 6e65 7520     vice was woken u
   e63b0:	2070 7962 7420 6568 5020 7261 6974 6c63     p by the Particl
   e63c0:	2065 5452 2043 6128 7466 7265 6120 7320     e RTC (after a s
   e63d0:	6570 6963 6966 6465 6e20 6d75 6562 2072     pecified number 
   e63e0:	666f 7320 6365 6e6f 7364 0029 6544 6976     of seconds).Devi
   e63f0:	6563 7720 7361 7720 6b6f 6e65 7520 2070     ce was woken up 
   e6400:	7962 6520 7469 6568 2072 2061 6970 206e     by either a pin 
   e6410:	726f 7420 6568 5020 7261 6974 6c63 2065     or the Particle 
   e6420:	5452 2043 6128 7466 7265 6120 7320 6570     RTC (after a spe
   e6430:	6963 6966 6465 6e20 6d75 6562 2072 666f     cified number of
   e6440:	7320 6365 6e6f 7364 0029 6843 6365 696b      seconds).Checki
   e6450:	676e 6920 6332 6420 7665 6369 7365 2e2e     ng i2c devices..
   e6460:	002e 3249 2043 7349 7573 0065 3249 2043     ..I2C Issue.I2C 
   e6470:	4b4f 4200 6665 726f 0065 6641 6574 0072     OK.Before.After.
   e6480:	6d70 3e31 3031 7c30 707c 326d 313e 3030     pm1>100||pm2>100
   e6490:	7c7c 6d70 3e34 3031 7c30 707c 316d 3e30     ||pm4>100||pm10>
   e64a0:	3031 7c30 637c 6e6f 3e63 3031 7c30 747c     100||conc>100||t
   e64b0:	6d65 3e70 3531 0030 6f72 6562 7472 7340     emp>150.robert@s
   e64c0:	6e65 6974 6e65 7474 6968 676e 2e73 6f63     entientthings.co
   e64d0:	006d 6946 7372 2074 7572 2e6e 4e00 746f     m.First run..Not
   e64e0:	6620 7269 7473 7220 6e75 002e 4441 4c58      first run..ADXL
   e64f0:	3433 2035 6553 7574 0070 7356 7075 6620     345 Setup.Vsup f
   e6500:	726f 6120 6c6c 7320 6e65 6f73 7372 3d20     or all sensors =
   e6510:	0020 6356 2063 6f66 2072 6c61 206c 6573      .Vcc for all se
   e6520:	736e 726f 2073 203d 5600 6572 2066 6f66     nsors = .Vref fo
   e6530:	2072 6573 736e 726f 3120 3d20 0020 7a54     r sensor 1 = .Tz
   e6540:	7265 206f 203d 4600 6e69 7369 6568 2064     ero = .Finished 
   e6550:	6553 7474 6e69 2067 7055 5400 2c31 6d20     Setting Up.T1, m
   e6560:	3156 202c 3143 6800 6f6f 2d6b 6572 7073     V1, C1.hook-resp
   e6570:	6e6f 6573 672f 746d 664f 7366 7465 5300     onse/gmtOffset.S
   e6580:	7465 7075 6320 6d6f 6c70 7465 0065 5452     etup complete.RT
   e6590:	0043 7845 0070 5452 2043 4545 5250 4d4f     C.Exp.RTC EEPROM
   e65a0:	4100 4344 4600 4152 004d 4441 4c58 3433     .ADC.FRAM.ADXL34
   e65b0:	0035 5053 3353 0030 4d50 2e30 0035 4d50     5.SPS30.PM0.5.PM
   e65c0:	2e31 0030 4d50 2e32 0035 4d50 2e34 0030     1.0.PM2.5.PM4.0.
   e65d0:	4d50 3031 4f00 646c 7420 6d65 2e70 7320     PM10.Old temp. s
   e65e0:	6170 206e 6e61 2064 666f 7366 7465 203a     pan and offset: 
   e65f0:	4800 4749 0048 4f4c 0057 654e 2077 6574     .HIGH.LOW.New te
   e6600:	706d 202e 7073 6e61 6120 646e 6f20 6666     mp. span and off
   e6610:	6573 3a74 0020 6857 6e65 6720 7361 6320     set: .When gas c
   e6620:	6e6f 6563 746e 6172 6974 6e6f 7320 6574     oncentration ste
   e6630:	6461 2c79 6520 746e 7265 4320 6e6f 6563     ady, enter Conce
   e6640:	746e 6172 6974 6e6f 6920 206e 7070 206d     ntration in ppm 
   e6650:	6f66 6c6c 776f 6465 6220 2079 6327 2772     followed by 'cr'
   e6660:	3d20 0020 7245 6f72 2072 6553 7474 6e69      = .Error Settin
   e6670:	2067 7053 6e61 0000                         g Span..

000e6678 <_ZTV10MB85RC256V>:
	...
   e6680:	88d5 000d 88d7 000d                         ........

000e6688 <CSWTCH.57>:
   e6688:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e6698 <_ZL23BlynkWriteHandlerVector>:
   e6698:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e66a8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e66b8:	9633 000d 9633 000d 66ad 000d 9633 000d     3...3....f..3...
   e66c8:	66c9 000d 9633 000d 6709 000d 9633 000d     .f..3....g..3...
   e66d8:	581d 000d 58c1 000d 5849 000d 9633 000d     .X...X..IX..3...
   e66e8:	6bed 000d 9633 000d 679d 000d 58dd 000d     .k..3....g...X..
   e66f8:	9633 000d 58a1 000d 5875 000d 9633 000d     3....X..uX..3...
   e6708:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6718:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6728:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6738:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6748:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6758:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6768:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6778:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6788:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6798:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67a8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67b8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67c8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67d8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67e8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e67f8:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6808:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6818:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6828:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6838:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6848:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6858:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6868:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6878:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...
   e6888:	9633 000d 9633 000d 9633 000d 9633 000d     3...3...3...3...

000e6898 <_ZL22BlynkReadHandlerVector>:
   e6898:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68a8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68b8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68c8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68d8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68e8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e68f8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6908:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6918:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6928:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6938:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6948:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6958:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6968:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6978:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6988:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6998:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69a8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69b8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69c8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69d8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69e8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e69f8:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a08:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a18:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a28:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a38:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a48:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a58:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a68:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a78:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...
   e6a88:	9631 000d 9631 000d 9631 000d 9631 000d     1...1...1...1...

000e6a98 <_ZTVN5spark13EthernetClassE>:
	...
   e6aa0:	9dbf 000d 9db5 000d 9dab 000d 9da1 000d     ................
   e6ab0:	9d95 000d 9d89 000d 9d7d 000d 9d75 000d     ........}...u...
   e6ac0:	9d6b 000d 9d61 000d be85 000d               k...a.......

000e6acc <_ZTV8SPIClass>:
	...
   e6ad4:	9e2d 000d 9e2f 000d 616e 006e 766f 0066     -.../...nan.ovf.
   e6ae4:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e6af4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e6b04:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e6b14:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e6b24:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e6b34:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e6b44:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e6b54:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e6b64:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   e6b74:	0020 6564 6174 6c69 2073 203d 6600 006e      .details = .fn.
   e6b84:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   e6b94:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   e6ba4:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   e6bb4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   e6bc4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   e6bd4:	0065 0000                                   e...

000e6bd8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e6be0:	ab05 000d ab0b 000d ab4f 000d ab19 000d     ........O.......
   e6bf0:	ab07 000d                                   ....

000e6bf4 <_ZTV9IPAddress>:
	...
   e6bfc:	b09d 000d b08d 000d b08f 000d               ............

000e6c08 <_ZTV9USBSerial>:
	...
   e6c10:	b1a1 000d b1f1 000d b1ff 000d a29d 000d     ................
   e6c20:	b1dd 000d b1a3 000d b1b9 000d b1eb 000d     ................
   e6c30:	b1cf 000d b19d 000d                         ........

000e6c38 <_ZTV11USARTSerial>:
	...
   e6c40:	b301 000d b351 000d b35f 000d a29d 000d     ....Q..._.......
   e6c50:	b315 000d b337 000d b323 000d b34b 000d     ....7...#...K...
   e6c60:	b303 000d b307 000d                         ........

000e6c68 <_ZTV7TwoWire>:
	...
   e6c70:	b439 000d b483 000d b45b 000d b43b 000d     9.......[...;...
   e6c80:	b463 000d b46b 000d b473 000d b47b 000d     c...k...s...{...

000e6c90 <_ZTVN5spark9MeshClassE>:
	...
   e6c98:	b5ad 000d b5a3 000d b599 000d b58f 000d     ................
   e6ca8:	b583 000d b577 000d b56b 000d b563 000d     ....w...k...c...
   e6cb8:	b559 000d b54f 000d be85 000d               Y...O.......

000e6cc4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e6ccc:	b739 000d b73f 000d bc27 000d b74d 000d     9...?...'...M...
   e6cdc:	b73b 000d                                   ;...

000e6ce0 <_ZTV9TCPClient>:
	...
   e6ce8:	a959 000d a979 000d b6b1 000d b6cb 000d     Y...y...........
   e6cf8:	bacd 000d b81f 000d b7f1 000d b6f5 000d     ................
   e6d08:	b9a9 000d b8a5 000d b853 000d ba9d 000d     ........S.......
   e6d18:	b6f7 000d b72f 000d b6dd 000d b751 000d     ..../.......Q...
   e6d28:	b7d1 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e6d38:	7265 6f72 2072 203d 6425 0000               error = %d..

000e6d44 <_ZTVN5spark9WiFiClassE>:
	...
   e6d4c:	bcf3 000d bce9 000d bcdf 000d 5445 000d     ............ET..
   e6d5c:	544f 000d bcd3 000d bcc7 000d bcbf 000d     OT..............
   e6d6c:	bcb5 000d bcab 000d be85 000d               ............

000e6d78 <_ZTV10WiFiSignal>:
	...
   e6d80:	bc3f 000d bc9d 000d bc41 000d bd31 000d     ?.......A...1...
   e6d90:	bc45 000d bcfd 000d bc71 000d               E.......q...

000e6d9c <_ZTVN5spark12NetworkClassE>:
	...
   e6da4:	be1d 000d be27 000d be31 000d be3b 000d     ....'...1...;...
   e6db4:	be45 000d be51 000d be5d 000d be69 000d     E...Q...]...i...
   e6dc4:	be71 000d be7b 000d be85 000d               q...{.......

000e6dd0 <atanlo>:
   e6dd0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e6de0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e6df0 <atanhi>:
   e6df0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e6e00:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e6e10:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e6e20:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e6e30:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e6e40:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e6e58 <halF>:
   e6e58:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e6e68 <ln2LO>:
   e6e68:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e6e78 <ln2HI>:
   e6e78:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e6e88 <Zero>:
	...
   e6e94:	0000 8000                                   ....

000e6e98 <npio2_hw>:
   e6e98:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e6ea8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e6eb8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e6ec8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e6ed8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e6ee8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e6ef8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e6f08:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e6f18 <two_over_pi>:
   e6f18:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e6f28:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e6f38:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e6f48:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e6f58:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e6f68:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e6f78:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e6f88:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e6f98:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e6fa8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e6fb8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e6fc8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e6fd8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e6fe8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e6ff8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e7008:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e7018:	e27b 0060 8c6b 00c0                         {.`.k...

000e7020 <init_jk>:
   e7020:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e7030 <PIo2>:
   e7030:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e7040:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e7050:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e7060:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e7070 <TWO52>:
   e7070:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e7080 <day_name.4725>:
   e7080:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e7090:	6972 6153 4a74                                   riSat

000e7095 <mon_name.4726>:
   e7095:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e70a5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e70b5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e70c5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e70d5:	6425 000a                                   %d..

000e70d9 <_ctype_>:
   e70d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e70e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e70f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e7109:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e7119:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e7129:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e7139:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e7149:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e7159:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e71dc <__sf_fake_stdin>:
	...

000e71fc <__sf_fake_stdout>:
	...

000e721c <__sf_fake_stderr>:
	...
   e723c:	4f50 4953 0058 0000                         POSIX...

000e7244 <_DAYS_BEFORE_MONTH>:
   e7244:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e7254:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e7264:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e7274 <DAYS_IN_MONTH>:
   e7274:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e7284:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e7294:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e72a4 <__month_lengths>:
   e72a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e72b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e72c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e72d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e72e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e72f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e7304:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e7314:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e7324:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e7334:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e7344:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e7354:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

000e7360 <fpi.5344>:
   e7360:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e7370:	0000 0000                                   ....

000e7374 <fpinan.5380>:
   e7374:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e7384:	0000 0000 6e69 7469 0079 0000               ....inity...

000e7390 <tinytens>:
   e7390:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e73a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e73b0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e73c0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e73d0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e73e0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e73f0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e7400:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e7410:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e7420:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e7430:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e7440:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e7450:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e7460:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e7470:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e7480:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e7490:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e74a0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e74b0:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e74c0:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e74d0:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e74e0:	2053 7025 0000 0000                         S %p....

000e74e8 <_C_time_locale>:
   e74e8:	73c0 000e 73c4 000e 73c8 000e 73cc 000e     .s...s...s...s..
   e74f8:	73d0 000e 73d4 000e 73d8 000e 73dc 000e     .s...s...s...s..
   e7508:	73e0 000e 73e4 000e 73e8 000e 73ec 000e     .s...s...s...s..
   e7518:	73f0 000e 73f8 000e 7401 000e 7407 000e     .s...s...t...t..
   e7528:	73d0 000e 740d 000e 7412 000e 7417 000e     .s...t...t...t..
   e7538:	741e 000e 7428 000e 7430 000e 7439 000e     .t..(t..0t..9t..
   e7548:	7442 000e 7446 000e 744a 000e 744e 000e     Bt..Ft..Jt..Nt..
   e7558:	7452 000e 7456 000e 745a 000e 745e 000e     Rt..Vt..Zt..^t..
   e7568:	7465 000e 746c 000e 7474 000e 747e 000e     et..lt..tt..~t..
   e7578:	7487 000e 748e 000e 7497 000e 74a0 000e     .t...t...t...t..
   e7588:	74a9 000e 65a7 000e 74be 000e 74c1 000e     .t...e...t...t..
   e7598:	73f0 000e 73f8 000e 7401 000e 7407 000e     .s...s...t...t..
   e75a8:	73d0 000e 740d 000e 7412 000e 7417 000e     .s...t...t...t..
   e75b8:	741e 000e 7428 000e 7430 000e 7439 000e     .t..(t..0t..9t..
   e75c8:	6b08 000e 74d9 000e 5ce1 000e 5ce1 000e     .k...t...\...\..
   e75d8:	5ce1 000e 5ce1 000e 5ce1 000e 5a54 4700     .\...\...\..TZ.G
   e75e8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e75f8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e7608:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e7618:	3a6e 6825 2575 006e                         n:%hu%n.

000e7620 <__mprec_tens>:
   e7620:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e7630:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e7640:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e7650:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e7660:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e7670:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e7680:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e7690:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e76a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e76b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e76c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e76d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e76e0:	9db4 79d9 7843 44ea                         ...yCx.D

000e76e8 <__mprec_bigtens>:
   e76e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e76f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e7708:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e7710 <p05.5387>:
   e7710:	0005 0000 0019 0000 007d 0000               ........}...

000e771c <link_const_variable_data_end>:
   e771c:	000d7fc1 	.word	0x000d7fc1
   e7720:	000d85b1 	.word	0x000d85b1
   e7724:	000d88d1 	.word	0x000d88d1
   e7728:	000d8a2d 	.word	0x000d8a2d
   e772c:	000d8b95 	.word	0x000d8b95
   e7730:	000d8f65 	.word	0x000d8f65
   e7734:	000d90c7 	.word	0x000d90c7
   e7738:	000d948b 	.word	0x000d948b
   e773c:	000d961d 	.word	0x000d961d
   e7740:	000d962d 	.word	0x000d962d
   e7744:	000d9661 	.word	0x000d9661
   e7748:	000d9dc9 	.word	0x000d9dc9
   e774c:	000d9ebd 	.word	0x000d9ebd
   e7750:	000da28d 	.word	0x000da28d
   e7754:	000da661 	.word	0x000da661
   e7758:	000da91d 	.word	0x000da91d
   e775c:	000da9cd 	.word	0x000da9cd
   e7760:	000db661 	.word	0x000db661
   e7764:	000dbe09 	.word	0x000dbe09
   e7768:	000dbf51 	.word	0x000dbf51
   e776c:	000dc0a1 	.word	0x000dc0a1
   e7770:	000dc139 	.word	0x000dc139
   e7774:	000dc1bd 	.word	0x000dc1bd
   e7778:	000dc281 	.word	0x000dc281
   e777c:	000dc345 	.word	0x000dc345
