
/home/white3/Documents/zeptive/zeptive-052020-v01/ZeptoSenseMaster/target/1.5.2/argon/ZeptoSenseMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015470  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e9490  000e9490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e9498  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000154  2003d65c  000e949c  0002d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001040  2003d7b0  2003d7b0  0003d7b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000e95f0  000e95f0  000395f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e9618  000e9618  00039618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016d549  00000000  00000000  0003961c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001cd34  00000000  00000000  001a6b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003c90  00000000  00000000  001c3899  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004acf3  00000000  00000000  001c7529  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004b211  00000000  00000000  0021221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001216b8  00000000  00000000  0025d42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00032565  00000000  00000000  0037eae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006f80  00000000  00000000  003b104a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000128e4  00000000  00000000  003b7fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00f ffbf 	bl	e3fb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00f ffc4 	bl	e3fca <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d65c 	.word	0x2003d65c
   d404c:	000e949c 	.word	0x000e949c
   d4050:	2003d7b0 	.word	0x2003d7b0
   d4054:	2003d7b0 	.word	0x2003d7b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f008 fa19 	bl	dc494 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e9484 	.word	0x000e9484
   d4084:	000e9424 	.word	0x000e9424

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f004 be14 	b.w	d8cb4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f003 fd6d 	bl	d7b6c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f008 b9bf 	b.w	dc418 <_post_loop>

000d409a <_Znwj>:
   d409a:	f006 bf53 	b.w	daf44 <malloc>

000d409e <_ZdlPv>:
   d409e:	f006 bf59 	b.w	daf54 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f006 bf57 	b.w	daf54 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <pi>:
    te_free_parameters(n);
    free(n);
}


static double pi(void) {return 3.14159265358979323846;}
   d40b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40c0 <pi+0x8>
   d40bc:	4770      	bx	lr
   d40be:	bf00      	nop
   d40c0:	54442d18 	.word	0x54442d18
   d40c4:	400921fb 	.word	0x400921fb

000d40c8 <e>:
static double e(void) {return 2.71828182845904523536;}
   d40c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d40d0 <e+0x8>
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	8b145769 	.word	0x8b145769
   d40d4:	4005bf0a 	.word	0x4005bf0a

000d40d8 <add>:
    return 0;
}



static double add(double a, double b) {return a + b;}
   d40d8:	b508      	push	{r3, lr}
   d40da:	ec51 0b10 	vmov	r0, r1, d0
   d40de:	ec53 2b11 	vmov	r2, r3, d1
   d40e2:	f00e ff6b 	bl	e2fbc <__adddf3>
   d40e6:	ec41 0b10 	vmov	d0, r0, r1
   d40ea:	bd08      	pop	{r3, pc}

000d40ec <sub>:
static double sub(double a, double b) {return a - b;}
   d40ec:	b508      	push	{r3, lr}
   d40ee:	ec51 0b10 	vmov	r0, r1, d0
   d40f2:	ec53 2b11 	vmov	r2, r3, d1
   d40f6:	f00e ff5f 	bl	e2fb8 <__aeabi_dsub>
   d40fa:	ec41 0b10 	vmov	d0, r0, r1
   d40fe:	bd08      	pop	{r3, pc}

000d4100 <mul>:
static double mul(double a, double b) {return a * b;}
   d4100:	b508      	push	{r3, lr}
   d4102:	ec51 0b10 	vmov	r0, r1, d0
   d4106:	ec53 2b11 	vmov	r2, r3, d1
   d410a:	f00f f909 	bl	e3320 <__aeabi_dmul>
   d410e:	ec41 0b10 	vmov	d0, r0, r1
   d4112:	bd08      	pop	{r3, pc}

000d4114 <divide>:
static double divide(double a, double b) {return a / b;}
   d4114:	b508      	push	{r3, lr}
   d4116:	ec51 0b10 	vmov	r0, r1, d0
   d411a:	ec53 2b11 	vmov	r2, r3, d1
   d411e:	f00f fa29 	bl	e3574 <__aeabi_ddiv>
   d4122:	ec41 0b10 	vmov	d0, r0, r1
   d4126:	bd08      	pop	{r3, pc}

000d4128 <negate>:
static double negate(double a) {return -a;}
   d4128:	ec51 0b10 	vmov	r0, r1, d0
   d412c:	ee10 2a10 	vmov	r2, s0
   d4130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d4134:	ec43 2b10 	vmov	d0, r2, r3
   d4138:	4770      	bx	lr

000d413a <comma>:
static double comma(double a, double b) {(void)a; return b;}
   d413a:	eeb0 0a41 	vmov.f32	s0, s2
   d413e:	eef0 0a61 	vmov.f32	s1, s3
   d4142:	4770      	bx	lr
   d4144:	0000      	movs	r0, r0
	...

000d4148 <greater>:

static double greater(double a, double b) {return a > b;}
   d4148:	b508      	push	{r3, lr}
   d414a:	ec51 0b10 	vmov	r0, r1, d0
   d414e:	ec53 2b11 	vmov	r2, r3, d1
   d4152:	f00f fb75 	bl	e3840 <__aeabi_dcmpgt>
   d4156:	b910      	cbnz	r0, d415e <greater+0x16>
   d4158:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4168 <greater+0x20>
   d415c:	bd08      	pop	{r3, pc}
   d415e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4170 <greater+0x28>
   d4162:	bd08      	pop	{r3, pc}
   d4164:	f3af 8000 	nop.w
	...
   d4174:	3ff00000 	.word	0x3ff00000

000d4178 <greater_eq>:
static double greater_eq(double a, double b) {return a >= b;}
   d4178:	b508      	push	{r3, lr}
   d417a:	ec51 0b10 	vmov	r0, r1, d0
   d417e:	ec53 2b11 	vmov	r2, r3, d1
   d4182:	f00f fb53 	bl	e382c <__aeabi_dcmpge>
   d4186:	b910      	cbnz	r0, d418e <greater_eq+0x16>
   d4188:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4198 <greater_eq+0x20>
   d418c:	bd08      	pop	{r3, pc}
   d418e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41a0 <greater_eq+0x28>
   d4192:	bd08      	pop	{r3, pc}
   d4194:	f3af 8000 	nop.w
	...
   d41a4:	3ff00000 	.word	0x3ff00000

000d41a8 <lower>:
static double lower(double a, double b) {return a < b;}
   d41a8:	b508      	push	{r3, lr}
   d41aa:	ec51 0b10 	vmov	r0, r1, d0
   d41ae:	ec53 2b11 	vmov	r2, r3, d1
   d41b2:	f00f fb27 	bl	e3804 <__aeabi_dcmplt>
   d41b6:	b910      	cbnz	r0, d41be <lower+0x16>
   d41b8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41c8 <lower+0x20>
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	ed9f 0b04 	vldr	d0, [pc, #16]	; d41d0 <lower+0x28>
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	f3af 8000 	nop.w
	...
   d41d4:	3ff00000 	.word	0x3ff00000

000d41d8 <lower_eq>:
static double lower_eq(double a, double b) {return a <= b;}
   d41d8:	b508      	push	{r3, lr}
   d41da:	ec51 0b10 	vmov	r0, r1, d0
   d41de:	ec53 2b11 	vmov	r2, r3, d1
   d41e2:	f00f fb19 	bl	e3818 <__aeabi_dcmple>
   d41e6:	b910      	cbnz	r0, d41ee <lower_eq+0x16>
   d41e8:	ed9f 0b03 	vldr	d0, [pc, #12]	; d41f8 <lower_eq+0x20>
   d41ec:	bd08      	pop	{r3, pc}
   d41ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4200 <lower_eq+0x28>
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	f3af 8000 	nop.w
	...
   d4204:	3ff00000 	.word	0x3ff00000

000d4208 <equal>:
static double equal(double a, double b) {return a == b;}
   d4208:	b508      	push	{r3, lr}
   d420a:	ec51 0b10 	vmov	r0, r1, d0
   d420e:	ec53 2b11 	vmov	r2, r3, d1
   d4212:	f00f faed 	bl	e37f0 <__aeabi_dcmpeq>
   d4216:	b910      	cbnz	r0, d421e <equal+0x16>
   d4218:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4228 <equal+0x20>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4230 <equal+0x28>
   d4222:	bd08      	pop	{r3, pc}
   d4224:	f3af 8000 	nop.w
	...
   d4234:	3ff00000 	.word	0x3ff00000

000d4238 <not_equal>:
static double not_equal(double a, double b) {return a != b;}
   d4238:	b508      	push	{r3, lr}
   d423a:	ec51 0b10 	vmov	r0, r1, d0
   d423e:	ec53 2b11 	vmov	r2, r3, d1
   d4242:	f00f fad5 	bl	e37f0 <__aeabi_dcmpeq>
   d4246:	b110      	cbz	r0, d424e <not_equal+0x16>
   d4248:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4258 <not_equal+0x20>
   d424c:	bd08      	pop	{r3, pc}
   d424e:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4260 <not_equal+0x28>
   d4252:	bd08      	pop	{r3, pc}
   d4254:	f3af 8000 	nop.w
	...
   d4264:	3ff00000 	.word	0x3ff00000

000d4268 <logical_and>:
static double logical_and(double a, double b) {return a != 0.0 && b != 0.0;}
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	2300      	movs	r3, #0
   d426c:	2200      	movs	r2, #0
   d426e:	ec51 0b10 	vmov	r0, r1, d0
   d4272:	ed8d 1b00 	vstr	d1, [sp]
   d4276:	f00f fabb 	bl	e37f0 <__aeabi_dcmpeq>
   d427a:	b958      	cbnz	r0, d4294 <logical_and+0x2c>
   d427c:	ed9d 1b00 	vldr	d1, [sp]
   d4280:	2200      	movs	r2, #0
   d4282:	2300      	movs	r3, #0
   d4284:	ec51 0b11 	vmov	r0, r1, d1
   d4288:	f00f fab2 	bl	e37f0 <__aeabi_dcmpeq>
   d428c:	fab0 f080 	clz	r0, r0
   d4290:	0940      	lsrs	r0, r0, #5
   d4292:	e000      	b.n	d4296 <logical_and+0x2e>
   d4294:	2000      	movs	r0, #0
   d4296:	f00e ffdd 	bl	e3254 <__aeabi_i2d>
   d429a:	ec41 0b10 	vmov	d0, r0, r1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <logical_or>:
static double logical_or(double a, double b) {return a != 0.0 || b != 0.0;}
   d42a4:	b507      	push	{r0, r1, r2, lr}
   d42a6:	2300      	movs	r3, #0
   d42a8:	2200      	movs	r2, #0
   d42aa:	ec51 0b10 	vmov	r0, r1, d0
   d42ae:	ed8d 1b00 	vstr	d1, [sp]
   d42b2:	f00f fa9d 	bl	e37f0 <__aeabi_dcmpeq>
   d42b6:	b158      	cbz	r0, d42d0 <logical_or+0x2c>
   d42b8:	ed9d 1b00 	vldr	d1, [sp]
   d42bc:	2200      	movs	r2, #0
   d42be:	2300      	movs	r3, #0
   d42c0:	ec51 0b11 	vmov	r0, r1, d1
   d42c4:	f00f fa94 	bl	e37f0 <__aeabi_dcmpeq>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
   d42ce:	e000      	b.n	d42d2 <logical_or+0x2e>
   d42d0:	2001      	movs	r0, #1
   d42d2:	f00e ffbf 	bl	e3254 <__aeabi_i2d>
   d42d6:	ec41 0b10 	vmov	d0, r0, r1
   d42da:	b003      	add	sp, #12
   d42dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42e0 <logical_not>:
static double logical_not(double a) {return a == 0.0;}
   d42e0:	b508      	push	{r3, lr}
   d42e2:	2200      	movs	r2, #0
   d42e4:	2300      	movs	r3, #0
   d42e6:	ec51 0b10 	vmov	r0, r1, d0
   d42ea:	f00f fa81 	bl	e37f0 <__aeabi_dcmpeq>
   d42ee:	b910      	cbnz	r0, d42f6 <logical_not+0x16>
   d42f0:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4300 <logical_not+0x20>
   d42f4:	bd08      	pop	{r3, pc}
   d42f6:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4308 <logical_not+0x28>
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	f3af 8000 	nop.w
	...
   d430c:	3ff00000 	.word	0x3ff00000

000d4310 <logical_notnot>:
static double logical_notnot(double a) {return a != 0.0;}
   d4310:	b508      	push	{r3, lr}
   d4312:	2200      	movs	r2, #0
   d4314:	2300      	movs	r3, #0
   d4316:	ec51 0b10 	vmov	r0, r1, d0
   d431a:	f00f fa69 	bl	e37f0 <__aeabi_dcmpeq>
   d431e:	b110      	cbz	r0, d4326 <logical_notnot+0x16>
   d4320:	ed9f 0b03 	vldr	d0, [pc, #12]	; d4330 <logical_notnot+0x20>
   d4324:	bd08      	pop	{r3, pc}
   d4326:	ed9f 0b04 	vldr	d0, [pc, #16]	; d4338 <logical_notnot+0x28>
   d432a:	bd08      	pop	{r3, pc}
   d432c:	f3af 8000 	nop.w
	...
   d433c:	3ff00000 	.word	0x3ff00000

000d4340 <negate_logical_not>:
static double negate_logical_not(double a) {return -(a == 0.0);}
   d4340:	b508      	push	{r3, lr}
   d4342:	2200      	movs	r2, #0
   d4344:	2300      	movs	r3, #0
   d4346:	ec51 0b10 	vmov	r0, r1, d0
   d434a:	f00f fa51 	bl	e37f0 <__aeabi_dcmpeq>
   d434e:	3000      	adds	r0, #0
   d4350:	bf18      	it	ne
   d4352:	2001      	movne	r0, #1
   d4354:	4240      	negs	r0, r0
   d4356:	f00e ff7d 	bl	e3254 <__aeabi_i2d>
   d435a:	ec41 0b10 	vmov	d0, r0, r1
   d435e:	bd08      	pop	{r3, pc}

000d4360 <negate_logical_notnot>:
static double negate_logical_notnot(double a) {return -(a != 0.0);}
   d4360:	b508      	push	{r3, lr}
   d4362:	2200      	movs	r2, #0
   d4364:	2300      	movs	r3, #0
   d4366:	ec51 0b10 	vmov	r0, r1, d0
   d436a:	f00f fa41 	bl	e37f0 <__aeabi_dcmpeq>
   d436e:	fab0 f080 	clz	r0, r0
   d4372:	0940      	lsrs	r0, r0, #5
   d4374:	4240      	negs	r0, r0
   d4376:	f00e ff6d 	bl	e3254 <__aeabi_i2d>
   d437a:	ec41 0b10 	vmov	d0, r0, r1
   d437e:	bd08      	pop	{r3, pc}

000d4380 <new_expr>:
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d4380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const int arity = ARITY(type);
   d4384:	f010 0718 	ands.w	r7, r0, #24
   d4388:	bf18      	it	ne
   d438a:	f000 0707 	andne.w	r7, r0, #7
    const int psize = sizeof(void*) * arity;
   d438e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
   d4392:	f010 0f10 	tst.w	r0, #16
   d4396:	bf14      	ite	ne
   d4398:	2304      	movne	r3, #4
   d439a:	2300      	moveq	r3, #0
   d439c:	f109 0614 	add.w	r6, r9, #20
   d43a0:	441e      	add	r6, r3
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a2:	4604      	mov	r4, r0
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a4:	4630      	mov	r0, r6
#define IS_FUNCTION(TYPE) (((TYPE) & TE_FUNCTION0) != 0)
#define IS_CLOSURE(TYPE) (((TYPE) & TE_CLOSURE0) != 0)
#define ARITY(TYPE) ( ((TYPE) & (TE_FUNCTION0 | TE_CLOSURE0)) ? ((TYPE) & 0x00000007) : 0 )
#define NEW_EXPR(type, ...) new_expr((type), (const te_expr*[]){__VA_ARGS__})

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
   d43a6:	4688      	mov	r8, r1
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43a8:	f006 fdcc 	bl	daf44 <malloc>
    memset(ret, 0, size);
   d43ac:	4632      	mov	r2, r6
   d43ae:	2100      	movs	r1, #0

static te_expr *new_expr(const int type, const te_expr *parameters[]) {
    const int arity = ARITY(type);
    const int psize = sizeof(void*) * arity;
    const int size = (sizeof(te_expr) - sizeof(void*)) + psize + (IS_CLOSURE(type) ? sizeof(void*) : 0);
    te_expr *ret = malloc(size);
   d43b0:	4605      	mov	r5, r0
    memset(ret, 0, size);
   d43b2:	f00f fe0a 	bl	e3fca <memset>
    if (arity && parameters) {
   d43b6:	b147      	cbz	r7, d43ca <new_expr+0x4a>
   d43b8:	f1b8 0f00 	cmp.w	r8, #0
   d43bc:	d005      	beq.n	d43ca <new_expr+0x4a>
        memcpy(ret->parameters, parameters, psize);
   d43be:	464a      	mov	r2, r9
   d43c0:	4641      	mov	r1, r8
   d43c2:	f105 0010 	add.w	r0, r5, #16
   d43c6:	f00f fdf5 	bl	e3fb4 <memcpy>
    }
    ret->type = type;
    ret->bound = 0;
   d43ca:	2300      	movs	r3, #0
    te_expr *ret = malloc(size);
    memset(ret, 0, size);
    if (arity && parameters) {
        memcpy(ret->parameters, parameters, psize);
    }
    ret->type = type;
   d43cc:	602c      	str	r4, [r5, #0]
    ret->bound = 0;
   d43ce:	60ab      	str	r3, [r5, #8]
    return ret;
}
   d43d0:	4628      	mov	r0, r5
   d43d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d43d8 <fac>:
}


static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	ec55 4b10 	vmov	r4, r5, d0
    if (a < 0.0)
   d43de:	2200      	movs	r2, #0
   d43e0:	2300      	movs	r3, #0
   d43e2:	ee10 0a10 	vmov	r0, s0
   d43e6:	4629      	mov	r1, r5
   d43e8:	f00f fa0c 	bl	e3804 <__aeabi_dcmplt>
   d43ec:	b9e0      	cbnz	r0, d4428 <fac+0x50>
        return NAN;
    if (a > UINT_MAX)
   d43ee:	a314      	add	r3, pc, #80	; (adr r3, d4440 <fac+0x68>)
   d43f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f4:	4620      	mov	r0, r4
   d43f6:	4629      	mov	r1, r5
   d43f8:	f00f fa22 	bl	e3840 <__aeabi_dcmpgt>
   d43fc:	b9b8      	cbnz	r0, d442e <fac+0x56>
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
   d43fe:	4629      	mov	r1, r5
   d4400:	4620      	mov	r0, r4
   d4402:	f00f fa65 	bl	e38d0 <__aeabi_d2uiz>
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d4406:	2301      	movs	r3, #1
    if (a < 0.0)
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
   d4408:	461a      	mov	r2, r3
    for (i = 1; i <= ua; i++) {
        if (i > ULONG_MAX / result)
   d440a:	f04f 31ff 	mov.w	r1, #4294967295
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d440e:	4298      	cmp	r0, r3
   d4410:	d306      	bcc.n	d4420 <fac+0x48>
        if (i > ULONG_MAX / result)
   d4412:	fbb1 f4f2 	udiv	r4, r1, r2
   d4416:	429c      	cmp	r4, r3
   d4418:	d309      	bcc.n	d442e <fac+0x56>
            return INFINITY;
        result *= i;
   d441a:	435a      	muls	r2, r3
        return NAN;
    if (a > UINT_MAX)
        return INFINITY;
    unsigned int ua = (unsigned int)(a);
    unsigned long int result = 1, i;
    for (i = 1; i <= ua; i++) {
   d441c:	3301      	adds	r3, #1
   d441e:	e7f6      	b.n	d440e <fac+0x36>
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
   d4420:	4610      	mov	r0, r2
   d4422:	f00e ff07 	bl	e3234 <__aeabi_ui2d>
   d4426:	e004      	b.n	d4432 <fac+0x5a>

static double pi(void) {return 3.14159265358979323846;}
static double e(void) {return 2.71828182845904523536;}
static double fac(double a) {/* simplest version of fac */
    if (a < 0.0)
        return NAN;
   d4428:	2000      	movs	r0, #0
   d442a:	4903      	ldr	r1, [pc, #12]	; (d4438 <fac+0x60>)
   d442c:	e001      	b.n	d4432 <fac+0x5a>
    if (a > UINT_MAX)
        return INFINITY;
   d442e:	4903      	ldr	r1, [pc, #12]	; (d443c <fac+0x64>)
   d4430:	2000      	movs	r0, #0
        if (i > ULONG_MAX / result)
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
   d4432:	ec41 0b10 	vmov	d0, r0, r1
   d4436:	bd38      	pop	{r3, r4, r5, pc}
   d4438:	7ff80000 	.word	0x7ff80000
   d443c:	7ff00000 	.word	0x7ff00000
   d4440:	ffe00000 	.word	0xffe00000
   d4444:	41efffff 	.word	0x41efffff

000d4448 <ncr>:
static double ncr(double n, double r) {
   d4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d444a:	ec55 4b10 	vmov	r4, r5, d0
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d444e:	2200      	movs	r2, #0
   d4450:	2300      	movs	r3, #0
   d4452:	ee10 0a10 	vmov	r0, s0
   d4456:	4629      	mov	r1, r5
            return INFINITY;
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
   d4458:	ec57 6b11 	vmov	r6, r7, d1
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d445c:	f00f f9d2 	bl	e3804 <__aeabi_dcmplt>
   d4460:	2800      	cmp	r0, #0
   d4462:	d13f      	bne.n	d44e4 <ncr+0x9c>
   d4464:	2200      	movs	r2, #0
   d4466:	2300      	movs	r3, #0
   d4468:	4630      	mov	r0, r6
   d446a:	4639      	mov	r1, r7
   d446c:	f00f f9ca 	bl	e3804 <__aeabi_dcmplt>
   d4470:	bbc0      	cbnz	r0, d44e4 <ncr+0x9c>
   d4472:	4632      	mov	r2, r6
   d4474:	463b      	mov	r3, r7
   d4476:	4620      	mov	r0, r4
   d4478:	4629      	mov	r1, r5
   d447a:	f00f f9c3 	bl	e3804 <__aeabi_dcmplt>
   d447e:	bb88      	cbnz	r0, d44e4 <ncr+0x9c>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d4480:	a31f      	add	r3, pc, #124	; (adr r3, d4500 <ncr+0xb8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	4620      	mov	r0, r4
   d4488:	4629      	mov	r1, r5
   d448a:	f00f f9d9 	bl	e3840 <__aeabi_dcmpgt>
   d448e:	bb60      	cbnz	r0, d44ea <ncr+0xa2>
   d4490:	a31b      	add	r3, pc, #108	; (adr r3, d4500 <ncr+0xb8>)
   d4492:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4496:	4630      	mov	r0, r6
   d4498:	4639      	mov	r1, r7
   d449a:	f00f f9d1 	bl	e3840 <__aeabi_dcmpgt>
   d449e:	bb20      	cbnz	r0, d44ea <ncr+0xa2>
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
   d44a0:	4629      	mov	r1, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	f00f fa14 	bl	e38d0 <__aeabi_d2uiz>
   d44a8:	4639      	mov	r1, r7
   d44aa:	4604      	mov	r4, r0
   d44ac:	4630      	mov	r0, r6
   d44ae:	f00f fa0f 	bl	e38d0 <__aeabi_d2uiz>
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
   d44b2:	ebb0 0f54 	cmp.w	r0, r4, lsr #1
   d44b6:	bf88      	it	hi
   d44b8:	1a20      	subhi	r0, r4, r0
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
   d44ba:	2301      	movs	r3, #1
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44bc:	461a      	mov	r2, r3
   d44be:	1a24      	subs	r4, r4, r0
        if (result > ULONG_MAX / (un - ur + i))
   d44c0:	f04f 35ff 	mov.w	r5, #4294967295
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44c4:	4290      	cmp	r0, r2
   d44c6:	d309      	bcc.n	d44dc <ncr+0x94>
   d44c8:	18a1      	adds	r1, r4, r2
        if (result > ULONG_MAX / (un - ur + i))
   d44ca:	fbb5 f6f1 	udiv	r6, r5, r1
   d44ce:	429e      	cmp	r6, r3
   d44d0:	d30b      	bcc.n	d44ea <ncr+0xa2>
            return INFINITY;
        result *= un - ur + i;
   d44d2:	434b      	muls	r3, r1
        result /= i;
   d44d4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
    unsigned long int un = (unsigned int)(n), ur = (unsigned int)(r), i;
    unsigned long int result = 1;
    if (ur > un / 2) ur = un - ur;
    for (i = 1; i <= ur; i++) {
   d44d8:	3201      	adds	r2, #1
   d44da:	e7f3      	b.n	d44c4 <ncr+0x7c>
        if (result > ULONG_MAX / (un - ur + i))
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
   d44dc:	4618      	mov	r0, r3
   d44de:	f00e fea9 	bl	e3234 <__aeabi_ui2d>
   d44e2:	e004      	b.n	d44ee <ncr+0xa6>
        result *= i;
    }
    return (double)result;
}
static double ncr(double n, double r) {
    if (n < 0.0 || r < 0.0 || n < r) return NAN;
   d44e4:	2000      	movs	r0, #0
   d44e6:	4904      	ldr	r1, [pc, #16]	; (d44f8 <ncr+0xb0>)
   d44e8:	e001      	b.n	d44ee <ncr+0xa6>
    if (n > UINT_MAX || r > UINT_MAX) return INFINITY;
   d44ea:	4904      	ldr	r1, [pc, #16]	; (d44fc <ncr+0xb4>)
   d44ec:	2000      	movs	r0, #0
            return INFINITY;
        result *= un - ur + i;
        result /= i;
    }
    return result;
}
   d44ee:	ec41 0b10 	vmov	d0, r0, r1
   d44f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44f4:	f3af 8000 	nop.w
   d44f8:	7ff80000 	.word	0x7ff80000
   d44fc:	7ff00000 	.word	0x7ff00000
   d4500:	ffe00000 	.word	0xffe00000
   d4504:	41efffff 	.word	0x41efffff

000d4508 <npr>:
static double npr(double n, double r) {return ncr(n, r) * fac(r);}
   d4508:	b500      	push	{lr}
   d450a:	ed2d 8b02 	vpush	{d8}
   d450e:	eeb0 8a41 	vmov.f32	s16, s2
   d4512:	eef0 8a61 	vmov.f32	s17, s3
   d4516:	b083      	sub	sp, #12
   d4518:	f7ff ff96 	bl	d4448 <ncr>
   d451c:	ec51 0b10 	vmov	r0, r1, d0
   d4520:	eeb0 0a48 	vmov.f32	s0, s16
   d4524:	eef0 0a68 	vmov.f32	s1, s17
   d4528:	e9cd 0100 	strd	r0, r1, [sp]
   d452c:	f7ff ff54 	bl	d43d8 <fac>
   d4530:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4534:	ec53 2b10 	vmov	r2, r3, d0
   d4538:	f00e fef2 	bl	e3320 <__aeabi_dmul>
   d453c:	ec41 0b10 	vmov	d0, r0, r1
   d4540:	b003      	add	sp, #12
   d4542:	ecbd 8b02 	vpop	{d8}
   d4546:	f85d fb04 	ldr.w	pc, [sp], #4

000d454a <te_free>:
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
    }
}


void te_free(te_expr *n) {
   d454a:	b510      	push	{r4, lr}
    if (!n) return;
   d454c:	4604      	mov	r4, r0
   d454e:	b130      	cbz	r0, d455e <te_free+0x14>
    te_free_parameters(n);
   d4550:	f000 f806 	bl	d4560 <te_free_parameters>
    free(n);
   d4554:	4620      	mov	r0, r4
}
   d4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void te_free(te_expr *n) {
    if (!n) return;
    te_free_parameters(n);
    free(n);
   d455a:	f006 bcfb 	b.w	daf54 <free>
   d455e:	bd10      	pop	{r4, pc}

000d4560 <te_free_parameters>:
    ret->bound = 0;
    return ret;
}


void te_free_parameters(te_expr *n) {
   d4560:	b510      	push	{r4, lr}
    if (!n) return;
   d4562:	4604      	mov	r4, r0
   d4564:	b330      	cbz	r0, d45b4 <te_free_parameters+0x54>
    switch (TYPE_MASK(n->type)) {
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	f003 031f 	and.w	r3, r3, #31
   d456c:	3b09      	subs	r3, #9
   d456e:	2b0e      	cmp	r3, #14
   d4570:	d820      	bhi.n	d45b4 <te_free_parameters+0x54>
   d4572:	e8df f003 	tbb	[pc, r3]
   d4576:	171a      	.short	0x171a
   d4578:	0b0e1114 	.word	0x0b0e1114
   d457c:	171a1f08 	.word	0x171a1f08
   d4580:	0b0e1114 	.word	0x0b0e1114
   d4584:	08          	.byte	0x08
   d4585:	00          	.byte	0x00
        case TE_FUNCTION7: case TE_CLOSURE7: te_free(n->parameters[6]);     /* Falls through. */
   d4586:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4588:	f7ff ffdf 	bl	d454a <te_free>
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
   d458c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d458e:	f7ff ffdc 	bl	d454a <te_free>
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
   d4592:	6a20      	ldr	r0, [r4, #32]
   d4594:	f7ff ffd9 	bl	d454a <te_free>
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
   d4598:	69e0      	ldr	r0, [r4, #28]
   d459a:	f7ff ffd6 	bl	d454a <te_free>
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
   d459e:	69a0      	ldr	r0, [r4, #24]
   d45a0:	f7ff ffd3 	bl	d454a <te_free>
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
   d45a4:	6960      	ldr	r0, [r4, #20]
   d45a6:	f7ff ffd0 	bl	d454a <te_free>
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45aa:	6920      	ldr	r0, [r4, #16]
    }
}
   d45ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case TE_FUNCTION6: case TE_CLOSURE6: te_free(n->parameters[5]);     /* Falls through. */
        case TE_FUNCTION5: case TE_CLOSURE5: te_free(n->parameters[4]);     /* Falls through. */
        case TE_FUNCTION4: case TE_CLOSURE4: te_free(n->parameters[3]);     /* Falls through. */
        case TE_FUNCTION3: case TE_CLOSURE3: te_free(n->parameters[2]);     /* Falls through. */
        case TE_FUNCTION2: case TE_CLOSURE2: te_free(n->parameters[1]);     /* Falls through. */
        case TE_FUNCTION1: case TE_CLOSURE1: te_free(n->parameters[0]);
   d45b0:	f7ff bfcb 	b.w	d454a <te_free>
   d45b4:	bd10      	pop	{r4, pc}
	...

000d45b8 <next_token>:
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    s->type = TOK_NULL;
   d45bc:	2318      	movs	r3, #24
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
   d45be:	f8df b270 	ldr.w	fp, [pc, #624]	; d4830 <next_token+0x278>
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
    s->type = TOK_NULL;
   d45c2:	6083      	str	r3, [r0, #8]
static double logical_notnot(double a) {return a != 0.0;}
static double negate_logical_not(double a) {return -(a == 0.0);}
static double negate_logical_notnot(double a) {return -(a != 0.0);}


void next_token(state *s) {
   d45c4:	4604      	mov	r4, r0
    s->type = TOK_NULL;

    do {

        if (!*s->next){
   d45c6:	6865      	ldr	r5, [r4, #4]
   d45c8:	782b      	ldrb	r3, [r5, #0]
   d45ca:	b913      	cbnz	r3, d45d2 <next_token+0x1a>
            s->type = TOK_END;
   d45cc:	231a      	movs	r3, #26
   d45ce:	60a3      	str	r3, [r4, #8]
            return;
   d45d0:	e10c      	b.n	d47ec <next_token+0x234>
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
   d45d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d6:	2a09      	cmp	r2, #9
   d45d8:	d901      	bls.n	d45de <next_token+0x26>
   d45da:	2b2e      	cmp	r3, #46	; 0x2e
   d45dc:	d107      	bne.n	d45ee <next_token+0x36>
            s->value = strtod(s->next, (char**)&s->next);
   d45de:	1d21      	adds	r1, r4, #4
   d45e0:	4628      	mov	r0, r5
   d45e2:	f011 fb01 	bl	e5be8 <strtod>
            s->type = TOK_NUMBER;
   d45e6:	231e      	movs	r3, #30
            return;
        }

        /* Try reading a number. */
        if ((s->next[0] >= '0' && s->next[0] <= '9') || s->next[0] == '.') {
            s->value = strtod(s->next, (char**)&s->next);
   d45e8:	ed84 0b04 	vstr	d0, [r4, #16]
   d45ec:	e0f3      	b.n	d47d6 <next_token+0x21e>
            s->type = TOK_NUMBER;
        } else {
            /* Look for a variable or builtin function call. */
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
   d45ee:	3b61      	subs	r3, #97	; 0x61
   d45f0:	2b19      	cmp	r3, #25
   d45f2:	d85a      	bhi.n	d46aa <next_token+0xf2>
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;
   d45f4:	6863      	ldr	r3, [r4, #4]
   d45f6:	781a      	ldrb	r2, [r3, #0]
   d45f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   d45fc:	2919      	cmp	r1, #25
   d45fe:	d802      	bhi.n	d4606 <next_token+0x4e>
   d4600:	3301      	adds	r3, #1
   d4602:	6063      	str	r3, [r4, #4]
   d4604:	e7f6      	b.n	d45f4 <next_token+0x3c>
   d4606:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d460a:	2909      	cmp	r1, #9
   d460c:	d9f8      	bls.n	d4600 <next_token+0x48>
   d460e:	2a5f      	cmp	r2, #95	; 0x5f
   d4610:	d0f6      	beq.n	d4600 <next_token+0x48>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4612:	69e6      	ldr	r6, [r4, #28]
            if (s->next[0] >= 'a' && s->next[0] <= 'z') {
                const char *start;
                start = s->next;
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
   d4614:	ebc5 0803 	rsb	r8, r5, r3
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d4618:	b17e      	cbz	r6, d463a <next_token+0x82>

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d461a:	6a27      	ldr	r7, [r4, #32]
   d461c:	b177      	cbz	r7, d463c <next_token+0x84>
        if (strncmp(name, var->name, len) == 0 && var->name[len] == '\0') {
   d461e:	f8d6 9000 	ldr.w	r9, [r6]
   d4622:	4642      	mov	r2, r8
   d4624:	4649      	mov	r1, r9
   d4626:	4628      	mov	r0, r5
   d4628:	f010 fc98 	bl	e4f5c <strncmp>
   d462c:	b910      	cbnz	r0, d4634 <next_token+0x7c>
   d462e:	f819 3008 	ldrb.w	r3, [r9, r8]
   d4632:	b32b      	cbz	r3, d4680 <next_token+0xc8>
static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;

    for (var = s->lookup, iters = s->lookup_len; iters; ++var, --iters) {
   d4634:	3610      	adds	r6, #16
   d4636:	3f01      	subs	r7, #1
   d4638:	e7f0      	b.n	d461c <next_token+0x64>
}

static const te_variable *find_lookup(const state *s, const char *name, int len) {
    int iters;
    const te_variable *var;
    if (!s->lookup) return 0;
   d463a:	4637      	mov	r7, r6
   d463c:	f04f 0a17 	mov.w	sl, #23
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
        const int i = (imin + ((imax-imin)/2));
   d4640:	ebc7 090a 	rsb	r9, r7, sl
   d4644:	eb07 0969 	add.w	r9, r7, r9, asr #1
        int c = strncmp(name, functions[i].name, len);
   d4648:	ea4f 1309 	mov.w	r3, r9, lsl #4
   d464c:	eb0b 0603 	add.w	r6, fp, r3
   d4650:	f85b 3003 	ldr.w	r3, [fp, r3]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	4642      	mov	r2, r8
   d4658:	4619      	mov	r1, r3
   d465a:	4628      	mov	r0, r5
   d465c:	f010 fc7e 	bl	e4f5c <strncmp>
        if (!c) c = '\0' - functions[i].name[len];
   d4660:	2800      	cmp	r0, #0
   d4662:	f040 80be 	bne.w	d47e2 <next_token+0x22a>
        if (c == 0) {
   d4666:	9b01      	ldr	r3, [sp, #4]
   d4668:	f813 3008 	ldrb.w	r3, [r3, r8]
   d466c:	b91b      	cbnz	r3, d4676 <next_token+0xbe>
                while ((s->next[0] >= 'a' && s->next[0] <= 'z') || (s->next[0] >= '0' && s->next[0] <= '9') || (s->next[0] == '_')) s->next++;

                const te_variable *var = find_lookup(s, start, s->next - start);
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
   d466e:	2e00      	cmp	r6, #0
   d4670:	f000 80b0 	beq.w	d47d4 <next_token+0x21c>
   d4674:	e004      	b.n	d4680 <next_token+0xc8>
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
            imin = i + 1;
        } else {
            imax = i - 1;
   d4676:	f109 3aff 	add.w	sl, r9, #4294967295
static const te_variable *find_builtin(const char *name, int len) {
    int imin = 0;
    int imax = sizeof(functions) / sizeof(te_variable) - 2;

    /*Binary search.*/
    while (imax >= imin) {
   d467a:	4557      	cmp	r7, sl
   d467c:	dde0      	ble.n	d4640 <next_token+0x88>
   d467e:	e0a9      	b.n	d47d4 <next_token+0x21c>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4680:	68b3      	ldr	r3, [r6, #8]
   d4682:	f003 031f 	and.w	r3, r3, #31
   d4686:	2b0f      	cmp	r3, #15
   d4688:	dc06      	bgt.n	d4698 <next_token+0xe0>
   d468a:	2b08      	cmp	r3, #8
   d468c:	da09      	bge.n	d46a2 <next_token+0xea>
   d468e:	2b00      	cmp	r3, #0
   d4690:	f040 80a2 	bne.w	d47d8 <next_token+0x220>
                    {
                        case TE_VARIABLE:
                            s->type = TOK_VARIABLE;
   d4694:	231f      	movs	r3, #31
   d4696:	e005      	b.n	d46a4 <next_token+0xec>
                if (!var) var = find_builtin(start, s->next - start);

                if (!var) {
                    s->type = TOK_ERROR;
                } else {
                    switch(TYPE_MASK(var->type))
   d4698:	2b17      	cmp	r3, #23
   d469a:	f300 809d 	bgt.w	d47d8 <next_token+0x220>
                            s->bound = var->address;
                            break;

                        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:         /* Falls through. */
                        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:         /* Falls through. */
                            s->context = var->context;                                                  /* Falls through. */
   d469e:	68f3      	ldr	r3, [r6, #12]
   d46a0:	61a3      	str	r3, [r4, #24]

                        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:     /* Falls through. */
                        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:     /* Falls through. */
                            s->type = var->type;
   d46a2:	68b3      	ldr	r3, [r6, #8]
   d46a4:	60a3      	str	r3, [r4, #8]
                            s->function = var->address;
   d46a6:	6873      	ldr	r3, [r6, #4]
   d46a8:	e03d      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46aa:	1c6a      	adds	r2, r5, #1
   d46ac:	6062      	str	r2, [r4, #4]
   d46ae:	782b      	ldrb	r3, [r5, #0]
   d46b0:	2b2a      	cmp	r3, #42	; 0x2a
   d46b2:	d03e      	beq.n	d4732 <next_token+0x17a>
   d46b4:	d81e      	bhi.n	d46f4 <next_token+0x13c>
   d46b6:	2b21      	cmp	r3, #33	; 0x21
   d46b8:	d043      	beq.n	d4742 <next_token+0x18a>
   d46ba:	d80c      	bhi.n	d46d6 <next_token+0x11e>
   d46bc:	2b0d      	cmp	r3, #13
   d46be:	f000 808b 	beq.w	d47d8 <next_token+0x220>
   d46c2:	d804      	bhi.n	d46ce <next_token+0x116>
   d46c4:	3b09      	subs	r3, #9
   d46c6:	2b01      	cmp	r3, #1
   d46c8:	f240 8086 	bls.w	d47d8 <next_token+0x220>
   d46cc:	e082      	b.n	d47d4 <next_token+0x21c>
   d46ce:	2b20      	cmp	r3, #32
   d46d0:	f000 8082 	beq.w	d47d8 <next_token+0x220>
   d46d4:	e07e      	b.n	d47d4 <next_token+0x21c>
   d46d6:	2b26      	cmp	r3, #38	; 0x26
   d46d8:	d066      	beq.n	d47a8 <next_token+0x1f0>
   d46da:	d805      	bhi.n	d46e8 <next_token+0x130>
   d46dc:	2b25      	cmp	r3, #37	; 0x25
   d46de:	d179      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
   d46e0:	2320      	movs	r3, #32
   d46e2:	60a3      	str	r3, [r4, #8]
   d46e4:	4b43      	ldr	r3, [pc, #268]	; (d47f4 <next_token+0x23c>)
   d46e6:	e01e      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46e8:	2b28      	cmp	r3, #40	; 0x28
   d46ea:	d06f      	beq.n	d47cc <next_token+0x214>
   d46ec:	2b29      	cmp	r3, #41	; 0x29
   d46ee:	d171      	bne.n	d47d4 <next_token+0x21c>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
                    case ')': s->type = TOK_CLOSE; break;
   d46f0:	231d      	movs	r3, #29
   d46f2:	e070      	b.n	d47d6 <next_token+0x21e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d46f4:	2b3c      	cmp	r3, #60	; 0x3c
   d46f6:	d03b      	beq.n	d4770 <next_token+0x1b8>
   d46f8:	d80a      	bhi.n	d4710 <next_token+0x158>
   d46fa:	2b2c      	cmp	r3, #44	; 0x2c
   d46fc:	d068      	beq.n	d47d0 <next_token+0x218>
   d46fe:	d30f      	bcc.n	d4720 <next_token+0x168>
   d4700:	2b2d      	cmp	r3, #45	; 0x2d
   d4702:	d012      	beq.n	d472a <next_token+0x172>
   d4704:	2b2f      	cmp	r3, #47	; 0x2f
   d4706:	d165      	bne.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
   d4708:	2320      	movs	r3, #32
   d470a:	60a3      	str	r3, [r4, #8]
   d470c:	4b3a      	ldr	r3, [pc, #232]	; (d47f8 <next_token+0x240>)
   d470e:	e00a      	b.n	d4726 <next_token+0x16e>
                    }
                }

            } else {
                /* Look for an operator or special character. */
                switch (s->next++[0]) {
   d4710:	2b3e      	cmp	r3, #62	; 0x3e
   d4712:	d03b      	beq.n	d478c <next_token+0x1d4>
   d4714:	d323      	bcc.n	d475e <next_token+0x1a6>
   d4716:	2b5e      	cmp	r3, #94	; 0x5e
   d4718:	d00f      	beq.n	d473a <next_token+0x182>
   d471a:	2b7c      	cmp	r3, #124	; 0x7c
   d471c:	d04d      	beq.n	d47ba <next_token+0x202>
   d471e:	e059      	b.n	d47d4 <next_token+0x21c>
                    case '+': s->type = TOK_INFIX; s->function = add; break;
   d4720:	2320      	movs	r3, #32
   d4722:	60a3      	str	r3, [r4, #8]
   d4724:	4b35      	ldr	r3, [pc, #212]	; (d47fc <next_token+0x244>)
   d4726:	6123      	str	r3, [r4, #16]
   d4728:	e056      	b.n	d47d8 <next_token+0x220>
                    case '-': s->type = TOK_INFIX; s->function = sub; break;
   d472a:	2320      	movs	r3, #32
   d472c:	60a3      	str	r3, [r4, #8]
   d472e:	4b34      	ldr	r3, [pc, #208]	; (d4800 <next_token+0x248>)
   d4730:	e7f9      	b.n	d4726 <next_token+0x16e>
                    case '*': s->type = TOK_INFIX; s->function = mul; break;
   d4732:	2320      	movs	r3, #32
   d4734:	60a3      	str	r3, [r4, #8]
   d4736:	4b33      	ldr	r3, [pc, #204]	; (d4804 <next_token+0x24c>)
   d4738:	e7f5      	b.n	d4726 <next_token+0x16e>
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
   d473a:	2320      	movs	r3, #32
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	4b32      	ldr	r3, [pc, #200]	; (d4808 <next_token+0x250>)
   d4740:	e7f1      	b.n	d4726 <next_token+0x16e>
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
   d4742:	1cab      	adds	r3, r5, #2
   d4744:	6063      	str	r3, [r4, #4]
   d4746:	786b      	ldrb	r3, [r5, #1]
   d4748:	2b3d      	cmp	r3, #61	; 0x3d
   d474a:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = not_equal;
   d474e:	bf0b      	itete	eq
   d4750:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = logical_not;
   d4752:	60a3      	strne	r3, [r4, #8]
                    case '/': s->type = TOK_INFIX; s->function = divide; break;
                    case '^': s->type = TOK_INFIX; s->function = pow; break;
                    case '%': s->type = TOK_INFIX; s->function = fmod; break;
                    case '!':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = not_equal;
   d4754:	4b2d      	ldreq	r3, [pc, #180]	; (d480c <next_token+0x254>)
                        } else {
                            s->next--;
   d4756:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = logical_not;
   d4758:	bf18      	it	ne
   d475a:	4b2d      	ldrne	r3, [pc, #180]	; (d4810 <next_token+0x258>)
   d475c:	e7e3      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '=':
                        if (s->next++[0] == '=') {
   d475e:	1cab      	adds	r3, r5, #2
   d4760:	6063      	str	r3, [r4, #4]
   d4762:	786b      	ldrb	r3, [r5, #1]
   d4764:	2b3d      	cmp	r3, #61	; 0x3d
   d4766:	d135      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = equal;
   d4768:	2320      	movs	r3, #32
   d476a:	60a3      	str	r3, [r4, #8]
   d476c:	4b29      	ldr	r3, [pc, #164]	; (d4814 <next_token+0x25c>)
   d476e:	e7da      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
   d4770:	1cab      	adds	r3, r5, #2
   d4772:	6063      	str	r3, [r4, #4]
   d4774:	786b      	ldrb	r3, [r5, #1]
   d4776:	2b3d      	cmp	r3, #61	; 0x3d
   d4778:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = lower_eq;
   d477c:	bf0b      	itete	eq
   d477e:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = lower;
   d4780:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '<':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = lower_eq;
   d4782:	4b25      	ldreq	r3, [pc, #148]	; (d4818 <next_token+0x260>)
                        } else {
                            s->next--;
   d4784:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = lower;
   d4786:	bf18      	it	ne
   d4788:	4b24      	ldrne	r3, [pc, #144]	; (d481c <next_token+0x264>)
   d478a:	e7cc      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
   d478c:	1cab      	adds	r3, r5, #2
   d478e:	6063      	str	r3, [r4, #4]
   d4790:	786b      	ldrb	r3, [r5, #1]
   d4792:	2b3d      	cmp	r3, #61	; 0x3d
   d4794:	f04f 0320 	mov.w	r3, #32
                            s->type = TOK_INFIX; s->function = greater_eq;
   d4798:	bf0b      	itete	eq
   d479a:	60a3      	streq	r3, [r4, #8]
                        } else {
                            s->next--;
                            s->type = TOK_INFIX; s->function = greater;
   d479c:	60a3      	strne	r3, [r4, #8]
                            s->type = TOK_INFIX; s->function = lower;
                        }
                        break;
                    case '>':
                        if (s->next++[0] == '=') {
                            s->type = TOK_INFIX; s->function = greater_eq;
   d479e:	4b20      	ldreq	r3, [pc, #128]	; (d4820 <next_token+0x268>)
                        } else {
                            s->next--;
   d47a0:	6062      	strne	r2, [r4, #4]
                            s->type = TOK_INFIX; s->function = greater;
   d47a2:	bf18      	it	ne
   d47a4:	4b1f      	ldrne	r3, [pc, #124]	; (d4824 <next_token+0x26c>)
   d47a6:	e7be      	b.n	d4726 <next_token+0x16e>
                        }
                        break;
                    case '&':
                        if (s->next++[0] == '&') {
   d47a8:	1cab      	adds	r3, r5, #2
   d47aa:	6063      	str	r3, [r4, #4]
   d47ac:	786b      	ldrb	r3, [r5, #1]
   d47ae:	2b26      	cmp	r3, #38	; 0x26
   d47b0:	d110      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_and;
   d47b2:	2320      	movs	r3, #32
   d47b4:	60a3      	str	r3, [r4, #8]
   d47b6:	4b1c      	ldr	r3, [pc, #112]	; (d4828 <next_token+0x270>)
   d47b8:	e7b5      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '|':
                        if (s->next++[0] == '|') {
   d47ba:	1cab      	adds	r3, r5, #2
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	786b      	ldrb	r3, [r5, #1]
   d47c0:	2b7c      	cmp	r3, #124	; 0x7c
   d47c2:	d107      	bne.n	d47d4 <next_token+0x21c>
                            s->type = TOK_INFIX; s->function = logical_or;
   d47c4:	2320      	movs	r3, #32
   d47c6:	60a3      	str	r3, [r4, #8]
   d47c8:	4b18      	ldr	r3, [pc, #96]	; (d482c <next_token+0x274>)
   d47ca:	e7ac      	b.n	d4726 <next_token+0x16e>
                        } else {
                            s->type = TOK_ERROR;
                        }
                        break;
                    case '(': s->type = TOK_OPEN; break;
   d47cc:	231c      	movs	r3, #28
   d47ce:	e002      	b.n	d47d6 <next_token+0x21e>
                    case ')': s->type = TOK_CLOSE; break;
                    case ',': s->type = TOK_SEP; break;
   d47d0:	231b      	movs	r3, #27
   d47d2:	e000      	b.n	d47d6 <next_token+0x21e>
                    case ' ': case '\t': case '\n': case '\r': break;
                    default: s->type = TOK_ERROR; break;
   d47d4:	2319      	movs	r3, #25
   d47d6:	60a3      	str	r3, [r4, #8]
                }
            }
        }
    } while (s->type == TOK_NULL);
   d47d8:	68a3      	ldr	r3, [r4, #8]
   d47da:	2b18      	cmp	r3, #24
   d47dc:	f43f aef3 	beq.w	d45c6 <next_token+0xe>
   d47e0:	e004      	b.n	d47ec <next_token+0x234>
        const int i = (imin + ((imax-imin)/2));
        int c = strncmp(name, functions[i].name, len);
        if (!c) c = '\0' - functions[i].name[len];
        if (c == 0) {
            return functions + i;
        } else if (c > 0) {
   d47e2:	f77f af48 	ble.w	d4676 <next_token+0xbe>
            imin = i + 1;
   d47e6:	f109 0701 	add.w	r7, r9, #1
   d47ea:	e746      	b.n	d467a <next_token+0xc2>
                    default: s->type = TOK_ERROR; break;
                }
            }
        }
    } while (s->type == TOK_NULL);
}
   d47ec:	b003      	add	sp, #12
   d47ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f2:	bf00      	nop
   d47f4:	000de601 	.word	0x000de601
   d47f8:	000d4115 	.word	0x000d4115
   d47fc:	000d40d9 	.word	0x000d40d9
   d4800:	000d40ed 	.word	0x000d40ed
   d4804:	000d4101 	.word	0x000d4101
   d4808:	000de901 	.word	0x000de901
   d480c:	000d4239 	.word	0x000d4239
   d4810:	000d42e1 	.word	0x000d42e1
   d4814:	000d4209 	.word	0x000d4209
   d4818:	000d41d9 	.word	0x000d41d9
   d481c:	000d41a9 	.word	0x000d41a9
   d4820:	000d4179 	.word	0x000d4179
   d4824:	000d4149 	.word	0x000d4149
   d4828:	000d4269 	.word	0x000d4269
   d482c:	000d42a5 	.word	0x000d42a5
   d4830:	000e7308 	.word	0x000e7308

000d4834 <list>:

    return ret;
}


static te_expr *list(state *s) {
   d4834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4836:	4605      	mov	r5, r0
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d4838:	f000 f9f6 	bl	d4c28 <expr>

    while (s->type == TOK_SEP) {
        next_token(s);
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
        ret->function = comma;
   d483c:	4e0b      	ldr	r6, [pc, #44]	; (d486c <list+0x38>)
}


static te_expr *list(state *s) {
    /* <list>      =    <expr> {"," <expr>} */
    te_expr *ret = expr(s);
   d483e:	4604      	mov	r4, r0

    while (s->type == TOK_SEP) {
   d4840:	68ab      	ldr	r3, [r5, #8]
   d4842:	2b1b      	cmp	r3, #27
   d4844:	d10e      	bne.n	d4864 <list+0x30>
        next_token(s);
   d4846:	4628      	mov	r0, r5
   d4848:	f7ff feb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, expr(s));
   d484c:	4628      	mov	r0, r5
   d484e:	9400      	str	r4, [sp, #0]
   d4850:	f000 f9ea 	bl	d4c28 <expr>
   d4854:	4669      	mov	r1, sp
   d4856:	9001      	str	r0, [sp, #4]
   d4858:	202a      	movs	r0, #42	; 0x2a
   d485a:	f7ff fd91 	bl	d4380 <new_expr>
   d485e:	4604      	mov	r4, r0
        ret->function = comma;
   d4860:	6086      	str	r6, [r0, #8]
   d4862:	e7ed      	b.n	d4840 <list+0xc>
    }

    return ret;
}
   d4864:	4620      	mov	r0, r4
   d4866:	b002      	add	sp, #8
   d4868:	bd70      	pop	{r4, r5, r6, pc}
   d486a:	bf00      	nop
   d486c:	000d413b 	.word	0x000d413b

000d4870 <base>:

static te_expr *list(state *s);
static te_expr *expr(state *s);
static te_expr *power(state *s);

static te_expr *base(state *s) {
   d4870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4874:	4604      	mov	r4, r0
    /* <base>      =    <constant> | <variable> | <function-0> {"(" ")"} | <function-1> <power> | <function-X> "(" <expr> {"," <expr>} ")" | "(" <list> ")" */
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
   d4876:	6880      	ldr	r0, [r0, #8]
   d4878:	f000 031f 	and.w	r3, r0, #31
   d487c:	3b08      	subs	r3, #8
   d487e:	2b17      	cmp	r3, #23
   d4880:	f200 808a 	bhi.w	d4998 <base+0x128>
   d4884:	e8df f003 	tbb	[pc, r3]
   d4888:	4646331e 	.word	0x4646331e
   d488c:	46464646 	.word	0x46464646
   d4890:	4646331e 	.word	0x4646331e
   d4894:	46464646 	.word	0x46464646
   d4898:	88888888 	.word	0x88888888
   d489c:	160c8877 	.word	0x160c8877
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48a0:	2100      	movs	r1, #0
   d48a2:	2001      	movs	r0, #1
   d48a4:	f7ff fd6c 	bl	d4380 <new_expr>
            ret->value = s->value;
   d48a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    te_expr *ret;
    int arity;

    switch (TYPE_MASK(s->type)) {
        case TOK_NUMBER:
            ret = new_expr(TE_CONSTANT, 0);
   d48ac:	4605      	mov	r5, r0
            ret->value = s->value;
   d48ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d48b2:	e06d      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48b4:	2100      	movs	r1, #0
   d48b6:	4608      	mov	r0, r1
   d48b8:	f7ff fd62 	bl	d4380 <new_expr>
            ret->bound = s->bound;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6083      	str	r3, [r0, #8]
            ret->value = s->value;
            next_token(s);
            break;

        case TOK_VARIABLE:
            ret = new_expr(TE_VARIABLE, 0);
   d48c0:	4605      	mov	r5, r0
   d48c2:	e065      	b.n	d4990 <base+0x120>
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48c4:	2100      	movs	r1, #0
   d48c6:	f7ff fd5b 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48ca:	6923      	ldr	r3, [r4, #16]
   d48cc:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	06d9      	lsls	r1, r3, #27
   d48d2:	bf44      	itt	mi
   d48d4:	69a3      	ldrmi	r3, [r4, #24]
   d48d6:	6103      	strmi	r3, [r0, #16]
            next_token(s);
            break;

        case TE_FUNCTION0:
        case TE_CLOSURE0:
            ret = new_expr(s->type, 0);
   d48d8:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[0] = s->context;
            next_token(s);
   d48da:	4620      	mov	r0, r4
   d48dc:	f7ff fe6c 	bl	d45b8 <next_token>
            if (s->type == TOK_OPEN) {
   d48e0:	68a3      	ldr	r3, [r4, #8]
   d48e2:	2b1c      	cmp	r3, #28
   d48e4:	d163      	bne.n	d49ae <base+0x13e>
                next_token(s);
   d48e6:	4620      	mov	r0, r4
   d48e8:	f7ff fe66 	bl	d45b8 <next_token>
   d48ec:	e04a      	b.n	d4984 <base+0x114>
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d48ee:	2100      	movs	r1, #0
   d48f0:	f7ff fd46 	bl	d4380 <new_expr>
            ret->function = s->function;
   d48f4:	6923      	ldr	r3, [r4, #16]
   d48f6:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
   d48f8:	68a3      	ldr	r3, [r4, #8]
   d48fa:	06da      	lsls	r2, r3, #27
   d48fc:	bf44      	itt	mi
   d48fe:	69a3      	ldrmi	r3, [r4, #24]
   d4900:	6143      	strmi	r3, [r0, #20]
            }
            break;

        case TE_FUNCTION1:
        case TE_CLOSURE1:
            ret = new_expr(s->type, 0);
   d4902:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[1] = s->context;
            next_token(s);
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fe57 	bl	d45b8 <next_token>
            ret->parameters[0] = power(s);
   d490a:	4620      	mov	r0, r4
   d490c:	f000 f854 	bl	d49b8 <power>
   d4910:	6128      	str	r0, [r5, #16]
            break;
   d4912:	e04c      	b.n	d49ae <base+0x13e>

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d4914:	f010 0618 	ands.w	r6, r0, #24

            ret = new_expr(s->type, 0);
   d4918:	f04f 0100 	mov.w	r1, #0

        case TE_FUNCTION2: case TE_FUNCTION3: case TE_FUNCTION4:
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);
   d491c:	bf18      	it	ne
   d491e:	f000 0607 	andne.w	r6, r0, #7

            ret = new_expr(s->type, 0);
   d4922:	f7ff fd2d 	bl	d4380 <new_expr>
            ret->function = s->function;
   d4926:	6923      	ldr	r3, [r4, #16]
   d4928:	6083      	str	r3, [r0, #8]
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
   d492a:	68a3      	ldr	r3, [r4, #8]
   d492c:	06db      	lsls	r3, r3, #27
   d492e:	bf42      	ittt	mi
   d4930:	1d33      	addmi	r3, r6, #4
   d4932:	69a2      	ldrmi	r2, [r4, #24]
   d4934:	f840 2023 	strmi.w	r2, [r0, r3, lsl #2]
        case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
        case TE_CLOSURE2: case TE_CLOSURE3: case TE_CLOSURE4:
        case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            arity = ARITY(s->type);

            ret = new_expr(s->type, 0);
   d4938:	4605      	mov	r5, r0
            ret->function = s->function;
            if (IS_CLOSURE(s->type)) ret->parameters[arity] = s->context;
            next_token(s);
   d493a:	4620      	mov	r0, r4
   d493c:	f7ff fe3c 	bl	d45b8 <next_token>

            if (s->type != TOK_OPEN) {
   d4940:	68a3      	ldr	r3, [r4, #8]
   d4942:	2b1c      	cmp	r3, #28
   d4944:	d121      	bne.n	d498a <base+0x11a>
   d4946:	f105 080c 	add.w	r8, r5, #12
   d494a:	2700      	movs	r7, #0
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d494c:	42b7      	cmp	r7, r6
   d494e:	d00a      	beq.n	d4966 <base+0xf6>
                    next_token(s);
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff fe31 	bl	d45b8 <next_token>
                    ret->parameters[i] = expr(s);
   d4956:	4620      	mov	r0, r4
   d4958:	f000 f966 	bl	d4c28 <expr>
   d495c:	f848 0f04 	str.w	r0, [r8, #4]!
                    if(s->type != TOK_SEP) {
   d4960:	68a3      	ldr	r3, [r4, #8]
   d4962:	2b1b      	cmp	r3, #27
   d4964:	d005      	beq.n	d4972 <base+0x102>
                        break;
                    }
                }
                if(s->type != TOK_CLOSE || i != arity - 1) {
   d4966:	68a3      	ldr	r3, [r4, #8]
   d4968:	2b1d      	cmp	r3, #29
   d496a:	d10e      	bne.n	d498a <base+0x11a>
   d496c:	3e01      	subs	r6, #1
   d496e:	42be      	cmp	r6, r7
   d4970:	e00a      	b.n	d4988 <base+0x118>

            if (s->type != TOK_OPEN) {
                s->type = TOK_ERROR;
            } else {
                int i;
                for(i = 0; i < arity; i++) {
   d4972:	3701      	adds	r7, #1
   d4974:	e7ea      	b.n	d494c <base+0xdc>
            }

            break;

        case TOK_OPEN:
            next_token(s);
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff fe1e 	bl	d45b8 <next_token>
            ret = list(s);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff59 	bl	d4834 <list>
   d4982:	4605      	mov	r5, r0
            if (s->type != TOK_CLOSE) {
   d4984:	68a3      	ldr	r3, [r4, #8]
   d4986:	2b1d      	cmp	r3, #29
   d4988:	d002      	beq.n	d4990 <base+0x120>
                s->type = TOK_ERROR;
   d498a:	2319      	movs	r3, #25
   d498c:	60a3      	str	r3, [r4, #8]
   d498e:	e00e      	b.n	d49ae <base+0x13e>
            } else {
                next_token(s);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe11 	bl	d45b8 <next_token>
   d4996:	e00a      	b.n	d49ae <base+0x13e>
            }
            break;

        default:
            ret = new_expr(0, 0);
   d4998:	2100      	movs	r1, #0
   d499a:	4608      	mov	r0, r1
   d499c:	f7ff fcf0 	bl	d4380 <new_expr>
            s->type = TOK_ERROR;
   d49a0:	2319      	movs	r3, #25
   d49a2:	60a3      	str	r3, [r4, #8]
            ret->value = NAN;
   d49a4:	4b03      	ldr	r3, [pc, #12]	; (d49b4 <base+0x144>)
   d49a6:	2200      	movs	r2, #0
   d49a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
                next_token(s);
            }
            break;

        default:
            ret = new_expr(0, 0);
   d49ac:	4605      	mov	r5, r0
            ret->value = NAN;
            break;
    }

    return ret;
}
   d49ae:	4628      	mov	r0, r5
   d49b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d49b4:	7ff80000 	.word	0x7ff80000

000d49b8 <power>:


static te_expr *power(state *s) {
   d49b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49bc:	4f39      	ldr	r7, [pc, #228]	; (d4aa4 <power+0xec>)
   d49be:	4d3a      	ldr	r5, [pc, #232]	; (d4aa8 <power+0xf0>)

    return ret;
}


static te_expr *power(state *s) {
   d49c0:	b087      	sub	sp, #28
   d49c2:	4604      	mov	r4, r0
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
   d49c4:	2601      	movs	r6, #1
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49c6:	68a3      	ldr	r3, [r4, #8]
   d49c8:	2b20      	cmp	r3, #32
   d49ca:	d002      	beq.n	d49d2 <power+0x1a>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d49cc:	2e01      	cmp	r6, #1
   d49ce:	d144      	bne.n	d4a5a <power+0xa2>
   d49d0:	e027      	b.n	d4a22 <power+0x6a>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49d2:	6923      	ldr	r3, [r4, #16]
   d49d4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d4aa4 <power+0xec>
   d49d8:	42bb      	cmp	r3, r7
   d49da:	d103      	bne.n	d49e4 <power+0x2c>
        if (s->function == sub) sign = -sign;
        next_token(s);
   d49dc:	4620      	mov	r0, r4
   d49de:	f7ff fdeb 	bl	d45b8 <next_token>
   d49e2:	e7f0      	b.n	d49c6 <power+0xe>


static te_expr *power(state *s) {
    /* <power>     =    {("-" | "+" | "!")} <base> */
    int sign = 1;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d49e4:	42ab      	cmp	r3, r5
   d49e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; d4aa8 <power+0xf0>
   d49ea:	d101      	bne.n	d49f0 <power+0x38>
        if (s->function == sub) sign = -sign;
   d49ec:	4276      	negs	r6, r6
   d49ee:	e7f5      	b.n	d49dc <power+0x24>
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d49f0:	4f2e      	ldr	r7, [pc, #184]	; (d4aac <power+0xf4>)
   d49f2:	2500      	movs	r5, #0
   d49f4:	68a3      	ldr	r3, [r4, #8]
   d49f6:	2b20      	cmp	r3, #32
   d49f8:	d110      	bne.n	d4a1c <power+0x64>
   d49fa:	6923      	ldr	r3, [r4, #16]
   d49fc:	4543      	cmp	r3, r8
   d49fe:	d103      	bne.n	d4a08 <power+0x50>
                logical = -1;
            } else {
                logical = -logical;
            }
        }
        next_token(s);
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fdd9 	bl	d45b8 <next_token>
   d4a06:	e7f5      	b.n	d49f4 <power+0x3c>
        if (s->function == sub) sign = -sign;
        next_token(s);
    }

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
   d4a08:	454b      	cmp	r3, r9
   d4a0a:	d0f9      	beq.n	d4a00 <power+0x48>
   d4a0c:	42bb      	cmp	r3, r7
   d4a0e:	d105      	bne.n	d4a1c <power+0x64>
        if (s->function == logical_not) {
            if (logical == 0) {
   d4a10:	b10d      	cbz	r5, d4a16 <power+0x5e>
                logical = -1;
            } else {
                logical = -logical;
   d4a12:	426d      	negs	r5, r5
   d4a14:	e7f4      	b.n	d4a00 <power+0x48>

    int logical = 0;
    while (s->type == TOK_INFIX && (s->function == add || s->function == sub || s->function == logical_not)) {
        if (s->function == logical_not) {
            if (logical == 0) {
                logical = -1;
   d4a16:	f04f 35ff 	mov.w	r5, #4294967295
   d4a1a:	e7f1      	b.n	d4a00 <power+0x48>
        next_token(s);
    }

    te_expr *ret;

    if (sign == 1) {
   d4a1c:	2e01      	cmp	r6, #1
   d4a1e:	d11b      	bne.n	d4a58 <power+0xa0>
        if (logical == 0) {
   d4a20:	b91d      	cbnz	r5, d4a2a <power+0x72>
            ret = base(s);
   d4a22:	4620      	mov	r0, r4
   d4a24:	f7ff ff24 	bl	d4870 <base>
   d4a28:	e039      	b.n	d4a9e <power+0xe6>
        } else if (logical == -1) {
   d4a2a:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a2c:	4620      	mov	r0, r4
    te_expr *ret;

    if (sign == 1) {
        if (logical == 0) {
            ret = base(s);
        } else if (logical == -1) {
   d4a2e:	d109      	bne.n	d4a44 <power+0x8c>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a30:	f7ff ff1e 	bl	d4870 <base>
   d4a34:	a906      	add	r1, sp, #24
   d4a36:	f841 0d14 	str.w	r0, [r1, #-20]!
   d4a3a:	2029      	movs	r0, #41	; 0x29
   d4a3c:	f7ff fca0 	bl	d4380 <new_expr>
            ret->function = logical_not;
   d4a40:	4b1a      	ldr	r3, [pc, #104]	; (d4aac <power+0xf4>)
   d4a42:	e02b      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a44:	f7ff ff14 	bl	d4870 <base>
   d4a48:	a906      	add	r1, sp, #24
   d4a4a:	f841 0d10 	str.w	r0, [r1, #-16]!
   d4a4e:	2029      	movs	r0, #41	; 0x29
   d4a50:	f7ff fc96 	bl	d4380 <new_expr>
            ret->function = logical_notnot;
   d4a54:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <power+0xf8>)
   d4a56:	e021      	b.n	d4a9c <power+0xe4>
        }
    } else {
        if (logical == 0) {
   d4a58:	b955      	cbnz	r5, d4a70 <power+0xb8>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f7ff ff08 	bl	d4870 <base>
   d4a60:	a906      	add	r1, sp, #24
   d4a62:	f841 0d0c 	str.w	r0, [r1, #-12]!
   d4a66:	2029      	movs	r0, #41	; 0x29
   d4a68:	f7ff fc8a 	bl	d4380 <new_expr>
            ret->function = negate;
   d4a6c:	4b11      	ldr	r3, [pc, #68]	; (d4ab4 <power+0xfc>)
   d4a6e:	e015      	b.n	d4a9c <power+0xe4>
        } else if (logical == -1) {
   d4a70:	3501      	adds	r5, #1
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a72:	4620      	mov	r0, r4
        }
    } else {
        if (logical == 0) {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
            ret->function = negate;
        } else if (logical == -1) {
   d4a74:	d109      	bne.n	d4a8a <power+0xd2>
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a76:	f7ff fefb 	bl	d4870 <base>
   d4a7a:	a906      	add	r1, sp, #24
   d4a7c:	f841 0d08 	str.w	r0, [r1, #-8]!
   d4a80:	2029      	movs	r0, #41	; 0x29
   d4a82:	f7ff fc7d 	bl	d4380 <new_expr>
            ret->function = negate_logical_not;
   d4a86:	4b0c      	ldr	r3, [pc, #48]	; (d4ab8 <power+0x100>)
   d4a88:	e008      	b.n	d4a9c <power+0xe4>
        } else {
            ret = NEW_EXPR(TE_FUNCTION1 | TE_FLAG_PURE, base(s));
   d4a8a:	f7ff fef1 	bl	d4870 <base>
   d4a8e:	a906      	add	r1, sp, #24
   d4a90:	f841 0d04 	str.w	r0, [r1, #-4]!
   d4a94:	2029      	movs	r0, #41	; 0x29
   d4a96:	f7ff fc73 	bl	d4380 <new_expr>
            ret->function = negate_logical_notnot;
   d4a9a:	4b08      	ldr	r3, [pc, #32]	; (d4abc <power+0x104>)
   d4a9c:	6083      	str	r3, [r0, #8]
        }
    }

    return ret;
}
   d4a9e:	b007      	add	sp, #28
   d4aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4aa4:	000d40d9 	.word	0x000d40d9
   d4aa8:	000d40ed 	.word	0x000d40ed
   d4aac:	000d42e1 	.word	0x000d42e1
   d4ab0:	000d4311 	.word	0x000d4311
   d4ab4:	000d4129 	.word	0x000d4129
   d4ab8:	000d4341 	.word	0x000d4341
   d4abc:	000d4361 	.word	0x000d4361

000d4ac0 <factor>:
    }

    return ret;
}
#else
static te_expr *factor(state *s) {
   d4ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4ac2:	4605      	mov	r5, r0
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4ac4:	f7ff ff78 	bl	d49b8 <power>

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4ac8:	4e0c      	ldr	r6, [pc, #48]	; (d4afc <factor+0x3c>)
    return ret;
}
#else
static te_expr *factor(state *s) {
    /* <factor>    =    <power> {"^" <power>} */
    te_expr *ret = power(s);
   d4aca:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == pow)) {
   d4acc:	68ab      	ldr	r3, [r5, #8]
   d4ace:	2b20      	cmp	r3, #32
   d4ad0:	d111      	bne.n	d4af6 <factor+0x36>
   d4ad2:	692b      	ldr	r3, [r5, #16]
   d4ad4:	42b3      	cmp	r3, r6
   d4ad6:	d10e      	bne.n	d4af6 <factor+0x36>
        te_fun2 t = s->function;
        next_token(s);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f7ff fd6d 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, power(s));
   d4ade:	4628      	mov	r0, r5
   d4ae0:	9400      	str	r4, [sp, #0]
   d4ae2:	f7ff ff69 	bl	d49b8 <power>
   d4ae6:	4669      	mov	r1, sp
   d4ae8:	9001      	str	r0, [sp, #4]
   d4aea:	202a      	movs	r0, #42	; 0x2a
   d4aec:	f7ff fc48 	bl	d4380 <new_expr>
   d4af0:	4604      	mov	r4, r0
        ret->function = t;
   d4af2:	6086      	str	r6, [r0, #8]
   d4af4:	e7ea      	b.n	d4acc <factor+0xc>
    }

    return ret;
}
   d4af6:	4620      	mov	r0, r4
   d4af8:	b002      	add	sp, #8
   d4afa:	bd70      	pop	{r4, r5, r6, pc}
   d4afc:	000de901 	.word	0x000de901

000d4b00 <term>:
#endif



static te_expr *term(state *s) {
   d4b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b04:	4606      	mov	r6, r0
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b06:	f7ff ffdb 	bl	d4ac0 <factor>

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4b54 <term+0x54>
   d4b0e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4b58 <term+0x58>
   d4b12:	4f0f      	ldr	r7, [pc, #60]	; (d4b50 <term+0x50>)



static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);
   d4b14:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b16:	68b3      	ldr	r3, [r6, #8]
   d4b18:	2b20      	cmp	r3, #32
   d4b1a:	d115      	bne.n	d4b48 <term+0x48>
   d4b1c:	6935      	ldr	r5, [r6, #16]
   d4b1e:	4545      	cmp	r5, r8
   d4b20:	d10e      	bne.n	d4b40 <term+0x40>
        te_fun2 t = s->function;
        next_token(s);
   d4b22:	4630      	mov	r0, r6
   d4b24:	f7ff fd48 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
   d4b28:	4630      	mov	r0, r6
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f7ff ffc8 	bl	d4ac0 <factor>
   d4b30:	4669      	mov	r1, sp
   d4b32:	9001      	str	r0, [sp, #4]
   d4b34:	202a      	movs	r0, #42	; 0x2a
   d4b36:	f7ff fc23 	bl	d4380 <new_expr>
   d4b3a:	4604      	mov	r4, r0
        ret->function = t;
   d4b3c:	6085      	str	r5, [r0, #8]
   d4b3e:	e7ea      	b.n	d4b16 <term+0x16>

static te_expr *term(state *s) {
    /* <term>      =    <factor> {("*" | "/" | "%") <factor>} */
    te_expr *ret = factor(s);

    while (s->type == TOK_INFIX && (s->function == mul || s->function == divide || s->function == fmod)) {
   d4b40:	454d      	cmp	r5, r9
   d4b42:	d0ee      	beq.n	d4b22 <term+0x22>
   d4b44:	42bd      	cmp	r5, r7
   d4b46:	d0ec      	beq.n	d4b22 <term+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, factor(s));
        ret->function = t;
    }

    return ret;
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b003      	add	sp, #12
   d4b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b50:	000de601 	.word	0x000de601
   d4b54:	000d4101 	.word	0x000d4101
   d4b58:	000d4115 	.word	0x000d4115

000d4b5c <sum_expr>:


static te_expr *sum_expr(state *s) {
   d4b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4b60:	4605      	mov	r5, r0
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b62:	f7ff ffcd 	bl	d4b00 <term>

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4ba8 <sum_expr+0x4c>
   d4b6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ba4 <sum_expr+0x48>)
}


static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);
   d4b6c:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b6e:	68ab      	ldr	r3, [r5, #8]
   d4b70:	2b20      	cmp	r3, #32
   d4b72:	d113      	bne.n	d4b9c <sum_expr+0x40>
   d4b74:	692e      	ldr	r6, [r5, #16]
   d4b76:	4546      	cmp	r6, r8
   d4b78:	d10e      	bne.n	d4b98 <sum_expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	f7ff fd1c 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
   d4b80:	4628      	mov	r0, r5
   d4b82:	9400      	str	r4, [sp, #0]
   d4b84:	f7ff ffbc 	bl	d4b00 <term>
   d4b88:	4669      	mov	r1, sp
   d4b8a:	9001      	str	r0, [sp, #4]
   d4b8c:	202a      	movs	r0, #42	; 0x2a
   d4b8e:	f7ff fbf7 	bl	d4380 <new_expr>
   d4b92:	4604      	mov	r4, r0
        ret->function = t;
   d4b94:	6086      	str	r6, [r0, #8]
   d4b96:	e7ea      	b.n	d4b6e <sum_expr+0x12>

static te_expr *sum_expr(state *s) {
    /* <expr>      =    <term> {("+" | "-") <term>} */
    te_expr *ret = term(s);

    while (s->type == TOK_INFIX && (s->function == add || s->function == sub)) {
   d4b98:	42be      	cmp	r6, r7
   d4b9a:	d0ee      	beq.n	d4b7a <sum_expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, term(s));
        ret->function = t;
    }

    return ret;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	b002      	add	sp, #8
   d4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ba4:	000d40ed 	.word	0x000d40ed
   d4ba8:	000d40d9 	.word	0x000d40d9

000d4bac <test_expr>:


static te_expr *test_expr(state *s) {
   d4bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4bb0:	4606      	mov	r6, r0
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bb2:	f7ff ffd3 	bl	d4b5c <sum_expr>

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bb6:	4f16      	ldr	r7, [pc, #88]	; (d4c10 <test_expr+0x64>)
   d4bb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d4c20 <test_expr+0x74>
   d4bbc:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4c24 <test_expr+0x78>
}


static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);
   d4bc0:	4605      	mov	r5, r0

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bc2:	68b3      	ldr	r3, [r6, #8]
   d4bc4:	2b20      	cmp	r3, #32
   d4bc6:	d11e      	bne.n	d4c06 <test_expr+0x5a>
   d4bc8:	6934      	ldr	r4, [r6, #16]
   d4bca:	42bc      	cmp	r4, r7
   d4bcc:	d10e      	bne.n	d4bec <test_expr+0x40>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
        te_fun2 t = s->function;
        next_token(s);
   d4bce:	4630      	mov	r0, r6
   d4bd0:	f7ff fcf2 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
   d4bd4:	4630      	mov	r0, r6
   d4bd6:	9500      	str	r5, [sp, #0]
   d4bd8:	f7ff ffc0 	bl	d4b5c <sum_expr>
   d4bdc:	4669      	mov	r1, sp
   d4bde:	9001      	str	r0, [sp, #4]
   d4be0:	202a      	movs	r0, #42	; 0x2a
   d4be2:	f7ff fbcd 	bl	d4380 <new_expr>
   d4be6:	4605      	mov	r5, r0
        ret->function = t;
   d4be8:	6084      	str	r4, [r0, #8]
   d4bea:	e7ea      	b.n	d4bc2 <test_expr+0x16>

static te_expr *test_expr(state *s) {
    /* <expr>      =    <sum_expr> {(">" | ">=" | "<" | "<=" | "==" | "!=") <sum_expr>} */
    te_expr *ret = sum_expr(s);

    while (s->type == TOK_INFIX && (s->function == greater || s->function == greater_eq ||
   d4bec:	4544      	cmp	r4, r8
   d4bee:	d0ee      	beq.n	d4bce <test_expr+0x22>
   d4bf0:	454c      	cmp	r4, r9
   d4bf2:	d0ec      	beq.n	d4bce <test_expr+0x22>
        s->function == lower || s->function == lower_eq || s->function == equal || s->function == not_equal)) {
   d4bf4:	4b07      	ldr	r3, [pc, #28]	; (d4c14 <test_expr+0x68>)
   d4bf6:	429c      	cmp	r4, r3
   d4bf8:	d0e9      	beq.n	d4bce <test_expr+0x22>
   d4bfa:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <test_expr+0x6c>)
   d4bfc:	429c      	cmp	r4, r3
   d4bfe:	d0e6      	beq.n	d4bce <test_expr+0x22>
   d4c00:	4b06      	ldr	r3, [pc, #24]	; (d4c1c <test_expr+0x70>)
   d4c02:	429c      	cmp	r4, r3
   d4c04:	d0e3      	beq.n	d4bce <test_expr+0x22>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, sum_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c06:	4628      	mov	r0, r5
   d4c08:	b003      	add	sp, #12
   d4c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c0e:	bf00      	nop
   d4c10:	000d4149 	.word	0x000d4149
   d4c14:	000d41d9 	.word	0x000d41d9
   d4c18:	000d4209 	.word	0x000d4209
   d4c1c:	000d4239 	.word	0x000d4239
   d4c20:	000d4179 	.word	0x000d4179
   d4c24:	000d41a9 	.word	0x000d41a9

000d4c28 <expr>:


static te_expr *expr(state *s) {
   d4c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c2c:	4605      	mov	r5, r0
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c2e:	f7ff ffbd 	bl	d4bac <test_expr>

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c32:	f8df 8040 	ldr.w	r8, [pc, #64]	; d4c74 <expr+0x4c>
   d4c36:	4f0e      	ldr	r7, [pc, #56]	; (d4c70 <expr+0x48>)
}


static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);
   d4c38:	4604      	mov	r4, r0

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c3a:	68ab      	ldr	r3, [r5, #8]
   d4c3c:	2b20      	cmp	r3, #32
   d4c3e:	d113      	bne.n	d4c68 <expr+0x40>
   d4c40:	692e      	ldr	r6, [r5, #16]
   d4c42:	4546      	cmp	r6, r8
   d4c44:	d10e      	bne.n	d4c64 <expr+0x3c>
        te_fun2 t = s->function;
        next_token(s);
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fcb6 	bl	d45b8 <next_token>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
   d4c4c:	4628      	mov	r0, r5
   d4c4e:	9400      	str	r4, [sp, #0]
   d4c50:	f7ff ffac 	bl	d4bac <test_expr>
   d4c54:	4669      	mov	r1, sp
   d4c56:	9001      	str	r0, [sp, #4]
   d4c58:	202a      	movs	r0, #42	; 0x2a
   d4c5a:	f7ff fb91 	bl	d4380 <new_expr>
   d4c5e:	4604      	mov	r4, r0
        ret->function = t;
   d4c60:	6086      	str	r6, [r0, #8]
   d4c62:	e7ea      	b.n	d4c3a <expr+0x12>

static te_expr *expr(state *s) {
    /* <expr>      =    <test_expr> {("&&" | "||") <test_expr>} */
    te_expr *ret = test_expr(s);

    while (s->type == TOK_INFIX && (s->function == logical_and || s->function == logical_or)) {
   d4c64:	42be      	cmp	r6, r7
   d4c66:	d0ee      	beq.n	d4c46 <expr+0x1e>
        ret = NEW_EXPR(TE_FUNCTION2 | TE_FLAG_PURE, ret, test_expr(s));
        ret->function = t;
    }

    return ret;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b002      	add	sp, #8
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d42a5 	.word	0x000d42a5
   d4c74:	000d4269 	.word	0x000d4269

000d4c78 <te_eval>:

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c78:	b570      	push	{r4, r5, r6, lr}
    if (!n) return NAN;
   d4c7a:	4604      	mov	r4, r0

#define TE_FUN(...) ((double(*)(__VA_ARGS__))n->function)
#define M(e) te_eval(n->parameters[e])


double te_eval(const te_expr *n) {
   d4c7c:	ed2d 8b0c 	vpush	{d8-d13}
    if (!n) return NAN;
   d4c80:	2800      	cmp	r0, #0
   d4c82:	f000 82d1 	beq.w	d5228 <te_eval+0x5b0>

    switch(TYPE_MASK(n->type)) {
   d4c86:	6803      	ldr	r3, [r0, #0]
   d4c88:	f003 021f 	and.w	r2, r3, #31
   d4c8c:	2a0f      	cmp	r2, #15
   d4c8e:	dc08      	bgt.n	d4ca2 <te_eval+0x2a>
   d4c90:	2a08      	cmp	r2, #8
   d4c92:	da0e      	bge.n	d4cb2 <te_eval+0x3a>
   d4c94:	b14a      	cbz	r2, d4caa <te_eval+0x32>
   d4c96:	2a01      	cmp	r2, #1
   d4c98:	f040 82c6 	bne.w	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
   d4c9c:	ed90 0b02 	vldr	d0, [r0, #8]
   d4ca0:	e2c4      	b.n	d522c <te_eval+0x5b4>


double te_eval(const te_expr *n) {
    if (!n) return NAN;

    switch(TYPE_MASK(n->type)) {
   d4ca2:	2a17      	cmp	r2, #23
   d4ca4:	f340 815b 	ble.w	d4f5e <te_eval+0x2e6>
   d4ca8:	e2be      	b.n	d5228 <te_eval+0x5b0>
        case TE_CONSTANT: return n->value;
        case TE_VARIABLE: return *n->bound;
   d4caa:	6883      	ldr	r3, [r0, #8]
   d4cac:	ed93 0b00 	vldr	d0, [r3]
   d4cb0:	e2bc      	b.n	d522c <te_eval+0x5b4>

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
   d4cb2:	f013 0f18 	tst.w	r3, #24
   d4cb6:	6885      	ldr	r5, [r0, #8]
   d4cb8:	d00d      	beq.n	d4cd6 <te_eval+0x5e>
   d4cba:	f003 0307 	and.w	r3, r3, #7
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	2b06      	cmp	r3, #6
   d4cc2:	d808      	bhi.n	d4cd6 <te_eval+0x5e>
   d4cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4cc8:	0016000d 	.word	0x0016000d
   d4ccc:	0051002e 	.word	0x0051002e
   d4cd0:	00b8007f 	.word	0x00b8007f
   d4cd4:	00fc      	.short	0x00fc
            }

        default: return NAN;
    }

}
   d4cd6:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4cda:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_VARIABLE: return *n->bound;

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
   d4ce0:	4718      	bx	r3
                case 1: return TE_FUN(double)(M(0));
   d4ce2:	6900      	ldr	r0, [r0, #16]
   d4ce4:	f7ff ffc8 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4ce8:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cec:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
   d4cf2:	4718      	bx	r3
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4cf4:	6900      	ldr	r0, [r0, #16]
   d4cf6:	f7ff ffbf 	bl	d4c78 <te_eval>
   d4cfa:	6960      	ldr	r0, [r4, #20]
   d4cfc:	eeb0 8a40 	vmov.f32	s16, s0
   d4d00:	eef0 8a60 	vmov.f32	s17, s1
   d4d04:	f7ff ffb8 	bl	d4c78 <te_eval>
   d4d08:	eeb0 1a40 	vmov.f32	s2, s0
   d4d0c:	eef0 1a60 	vmov.f32	s3, s1
   d4d10:	eeb0 0a48 	vmov.f32	s0, s16
   d4d14:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d18:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d1c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION0: case TE_FUNCTION1: case TE_FUNCTION2: case TE_FUNCTION3:
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
   d4d22:	4718      	bx	r3
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d24:	6900      	ldr	r0, [r0, #16]
   d4d26:	f7ff ffa7 	bl	d4c78 <te_eval>
   d4d2a:	6960      	ldr	r0, [r4, #20]
   d4d2c:	eeb0 8a40 	vmov.f32	s16, s0
   d4d30:	eef0 8a60 	vmov.f32	s17, s1
   d4d34:	f7ff ffa0 	bl	d4c78 <te_eval>
   d4d38:	69a0      	ldr	r0, [r4, #24]
   d4d3a:	eeb0 9a40 	vmov.f32	s18, s0
   d4d3e:	eef0 9a60 	vmov.f32	s19, s1
   d4d42:	f7ff ff99 	bl	d4c78 <te_eval>
   d4d46:	eeb0 1a49 	vmov.f32	s2, s18
   d4d4a:	eef0 1a69 	vmov.f32	s3, s19
   d4d4e:	eeb0 2a40 	vmov.f32	s4, s0
   d4d52:	eef0 2a60 	vmov.f32	s5, s1
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
   d4d5a:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4d5e:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d62:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_FUNCTION4: case TE_FUNCTION5: case TE_FUNCTION6: case TE_FUNCTION7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
   d4d68:	4718      	bx	r3
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4d6a:	6900      	ldr	r0, [r0, #16]
   d4d6c:	f7ff ff84 	bl	d4c78 <te_eval>
   d4d70:	6960      	ldr	r0, [r4, #20]
   d4d72:	eeb0 8a40 	vmov.f32	s16, s0
   d4d76:	eef0 8a60 	vmov.f32	s17, s1
   d4d7a:	f7ff ff7d 	bl	d4c78 <te_eval>
   d4d7e:	69a0      	ldr	r0, [r4, #24]
   d4d80:	eeb0 9a40 	vmov.f32	s18, s0
   d4d84:	eef0 9a60 	vmov.f32	s19, s1
   d4d88:	f7ff ff76 	bl	d4c78 <te_eval>
   d4d8c:	69e0      	ldr	r0, [r4, #28]
   d4d8e:	eeb0 aa40 	vmov.f32	s20, s0
   d4d92:	eef0 aa60 	vmov.f32	s21, s1
   d4d96:	f7ff ff6f 	bl	d4c78 <te_eval>
   d4d9a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4d9e:	eef0 2a6a 	vmov.f32	s5, s21
   d4da2:	eeb0 1a49 	vmov.f32	s2, s18
   d4da6:	eef0 1a69 	vmov.f32	s3, s19
   d4daa:	eeb0 3a40 	vmov.f32	s6, s0
   d4dae:	eef0 3a60 	vmov.f32	s7, s1
   d4db2:	eeb0 0a48 	vmov.f32	s0, s16
   d4db6:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4dba:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dbe:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
   d4dc4:	4718      	bx	r3
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4dc6:	6900      	ldr	r0, [r0, #16]
   d4dc8:	f7ff ff56 	bl	d4c78 <te_eval>
   d4dcc:	6960      	ldr	r0, [r4, #20]
   d4dce:	eeb0 8a40 	vmov.f32	s16, s0
   d4dd2:	eef0 8a60 	vmov.f32	s17, s1
   d4dd6:	f7ff ff4f 	bl	d4c78 <te_eval>
   d4dda:	69a0      	ldr	r0, [r4, #24]
   d4ddc:	eeb0 9a40 	vmov.f32	s18, s0
   d4de0:	eef0 9a60 	vmov.f32	s19, s1
   d4de4:	f7ff ff48 	bl	d4c78 <te_eval>
   d4de8:	69e0      	ldr	r0, [r4, #28]
   d4dea:	eeb0 aa40 	vmov.f32	s20, s0
   d4dee:	eef0 aa60 	vmov.f32	s21, s1
   d4df2:	f7ff ff41 	bl	d4c78 <te_eval>
   d4df6:	6a20      	ldr	r0, [r4, #32]
   d4df8:	eeb0 ba40 	vmov.f32	s22, s0
   d4dfc:	eef0 ba60 	vmov.f32	s23, s1
   d4e00:	f7ff ff3a 	bl	d4c78 <te_eval>
   d4e04:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e08:	eef0 3a6b 	vmov.f32	s7, s23
   d4e0c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e10:	eef0 2a6a 	vmov.f32	s5, s21
   d4e14:	eeb0 4a40 	vmov.f32	s8, s0
   d4e18:	eef0 4a60 	vmov.f32	s9, s1
   d4e1c:	eeb0 1a49 	vmov.f32	s2, s18
   d4e20:	eef0 1a69 	vmov.f32	s3, s19
   d4e24:	eeb0 0a48 	vmov.f32	s0, s16
   d4e28:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4e2c:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e30:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void)();
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
   d4e36:	4718      	bx	r3
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4e38:	6900      	ldr	r0, [r0, #16]
   d4e3a:	f7ff ff1d 	bl	d4c78 <te_eval>
   d4e3e:	6960      	ldr	r0, [r4, #20]
   d4e40:	eeb0 8a40 	vmov.f32	s16, s0
   d4e44:	eef0 8a60 	vmov.f32	s17, s1
   d4e48:	f7ff ff16 	bl	d4c78 <te_eval>
   d4e4c:	69a0      	ldr	r0, [r4, #24]
   d4e4e:	eeb0 9a40 	vmov.f32	s18, s0
   d4e52:	eef0 9a60 	vmov.f32	s19, s1
   d4e56:	f7ff ff0f 	bl	d4c78 <te_eval>
   d4e5a:	69e0      	ldr	r0, [r4, #28]
   d4e5c:	eeb0 aa40 	vmov.f32	s20, s0
   d4e60:	eef0 aa60 	vmov.f32	s21, s1
   d4e64:	f7ff ff08 	bl	d4c78 <te_eval>
   d4e68:	6a20      	ldr	r0, [r4, #32]
   d4e6a:	eeb0 ba40 	vmov.f32	s22, s0
   d4e6e:	eef0 ba60 	vmov.f32	s23, s1
   d4e72:	f7ff ff01 	bl	d4c78 <te_eval>
   d4e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e78:	eeb0 ca40 	vmov.f32	s24, s0
   d4e7c:	eef0 ca60 	vmov.f32	s25, s1
   d4e80:	f7ff fefa 	bl	d4c78 <te_eval>
   d4e84:	eeb0 4a4c 	vmov.f32	s8, s24
   d4e88:	eef0 4a6c 	vmov.f32	s9, s25
   d4e8c:	eeb0 3a4b 	vmov.f32	s6, s22
   d4e90:	eef0 3a6b 	vmov.f32	s7, s23
   d4e94:	eeb0 5a40 	vmov.f32	s10, s0
   d4e98:	eef0 5a60 	vmov.f32	s11, s1
   d4e9c:	eeb0 2a4a 	vmov.f32	s4, s20
   d4ea0:	eef0 2a6a 	vmov.f32	s5, s21
   d4ea4:	eeb0 1a49 	vmov.f32	s2, s18
   d4ea8:	eef0 1a69 	vmov.f32	s3, s19
   d4eac:	eeb0 0a48 	vmov.f32	s0, s16
   d4eb0:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4eb4:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4eb8:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(double)(M(0));
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
   d4ebe:	4718      	bx	r3
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4ec0:	6900      	ldr	r0, [r0, #16]
   d4ec2:	f7ff fed9 	bl	d4c78 <te_eval>
   d4ec6:	6960      	ldr	r0, [r4, #20]
   d4ec8:	eeb0 8a40 	vmov.f32	s16, s0
   d4ecc:	eef0 8a60 	vmov.f32	s17, s1
   d4ed0:	f7ff fed2 	bl	d4c78 <te_eval>
   d4ed4:	69a0      	ldr	r0, [r4, #24]
   d4ed6:	eeb0 9a40 	vmov.f32	s18, s0
   d4eda:	eef0 9a60 	vmov.f32	s19, s1
   d4ede:	f7ff fecb 	bl	d4c78 <te_eval>
   d4ee2:	69e0      	ldr	r0, [r4, #28]
   d4ee4:	eeb0 aa40 	vmov.f32	s20, s0
   d4ee8:	eef0 aa60 	vmov.f32	s21, s1
   d4eec:	f7ff fec4 	bl	d4c78 <te_eval>
   d4ef0:	6a20      	ldr	r0, [r4, #32]
   d4ef2:	eeb0 ba40 	vmov.f32	s22, s0
   d4ef6:	eef0 ba60 	vmov.f32	s23, s1
   d4efa:	f7ff febd 	bl	d4c78 <te_eval>
   d4efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f00:	eeb0 ca40 	vmov.f32	s24, s0
   d4f04:	eef0 ca60 	vmov.f32	s25, s1
   d4f08:	f7ff feb6 	bl	d4c78 <te_eval>
   d4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f0e:	eeb0 da40 	vmov.f32	s26, s0
   d4f12:	eef0 da60 	vmov.f32	s27, s1
   d4f16:	f7ff feaf 	bl	d4c78 <te_eval>
   d4f1a:	eeb0 5a4d 	vmov.f32	s10, s26
   d4f1e:	eef0 5a6d 	vmov.f32	s11, s27
   d4f22:	eeb0 4a4c 	vmov.f32	s8, s24
   d4f26:	eef0 4a6c 	vmov.f32	s9, s25
   d4f2a:	eeb0 6a40 	vmov.f32	s12, s0
   d4f2e:	eef0 6a60 	vmov.f32	s13, s1
   d4f32:	eeb0 3a4b 	vmov.f32	s6, s22
   d4f36:	eef0 3a6b 	vmov.f32	s7, s23
   d4f3a:	eeb0 2a4a 	vmov.f32	s4, s20
   d4f3e:	eef0 2a6a 	vmov.f32	s5, s21
   d4f42:	eeb0 1a49 	vmov.f32	s2, s18
   d4f46:	eef0 1a69 	vmov.f32	s3, s19
   d4f4a:	eeb0 0a48 	vmov.f32	s0, s16
   d4f4e:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4f52:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f56:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(double, double)(M(0), M(1));
                case 3: return TE_FUN(double, double, double)(M(0), M(1), M(2));
                case 4: return TE_FUN(double, double, double, double)(M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(double, double, double, double, double, double, double)(M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d4f5c:	4718      	bx	r3
                default: return NAN;
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
   d4f5e:	f013 0f18 	tst.w	r3, #24
   d4f62:	6885      	ldr	r5, [r0, #8]
   d4f64:	d00d      	beq.n	d4f82 <te_eval+0x30a>
   d4f66:	f003 0307 	and.w	r3, r3, #7
   d4f6a:	3b01      	subs	r3, #1
   d4f6c:	2b06      	cmp	r3, #6
   d4f6e:	d808      	bhi.n	d4f82 <te_eval+0x30a>
   d4f70:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f74:	0019000e 	.word	0x0019000e
   d4f78:	00580033 	.word	0x00580033
   d4f7c:	00c30088 	.word	0x00c30088
   d4f80:	0109      	.short	0x0109
            }

        default: return NAN;
    }

}
   d4f82:	ecbd 8b0c 	vpop	{d8-d13}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f86:	6920      	ldr	r0, [r4, #16]
   d4f88:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
   d4f8e:	4718      	bx	r3
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f90:	6946      	ldr	r6, [r0, #20]
   d4f92:	6900      	ldr	r0, [r0, #16]
   d4f94:	f7ff fe70 	bl	d4c78 <te_eval>
            }

        default: return NAN;
    }

}
   d4f98:	ecbd 8b0c 	vpop	{d8-d13}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4f9c:	4630      	mov	r0, r6
   d4f9e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
   d4fa4:	4718      	bx	r3
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fa6:	6986      	ldr	r6, [r0, #24]
   d4fa8:	6900      	ldr	r0, [r0, #16]
   d4faa:	f7ff fe65 	bl	d4c78 <te_eval>
   d4fae:	6960      	ldr	r0, [r4, #20]
   d4fb0:	eeb0 8a40 	vmov.f32	s16, s0
   d4fb4:	eef0 8a60 	vmov.f32	s17, s1
   d4fb8:	f7ff fe5e 	bl	d4c78 <te_eval>
   d4fbc:	eeb0 1a40 	vmov.f32	s2, s0
   d4fc0:	eef0 1a60 	vmov.f32	s3, s1
   d4fc4:	eeb0 0a48 	vmov.f32	s0, s16
   d4fc8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d4fcc:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE0: case TE_CLOSURE1: case TE_CLOSURE2: case TE_CLOSURE3:
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
   d4fd8:	4718      	bx	r3
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d4fda:	69c6      	ldr	r6, [r0, #28]
   d4fdc:	6900      	ldr	r0, [r0, #16]
   d4fde:	f7ff fe4b 	bl	d4c78 <te_eval>
   d4fe2:	6960      	ldr	r0, [r4, #20]
   d4fe4:	eeb0 8a40 	vmov.f32	s16, s0
   d4fe8:	eef0 8a60 	vmov.f32	s17, s1
   d4fec:	f7ff fe44 	bl	d4c78 <te_eval>
   d4ff0:	69a0      	ldr	r0, [r4, #24]
   d4ff2:	eeb0 9a40 	vmov.f32	s18, s0
   d4ff6:	eef0 9a60 	vmov.f32	s19, s1
   d4ffa:	f7ff fe3d 	bl	d4c78 <te_eval>
   d4ffe:	eeb0 1a49 	vmov.f32	s2, s18
   d5002:	eef0 1a69 	vmov.f32	s3, s19
   d5006:	eeb0 2a40 	vmov.f32	s4, s0
   d500a:	eef0 2a60 	vmov.f32	s5, s1
   d500e:	eeb0 0a48 	vmov.f32	s0, s16
   d5012:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5016:	ecbd 8b0c 	vpop	{d8-d13}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d501a:	4630      	mov	r0, r6
   d501c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case TE_CLOSURE4: case TE_CLOSURE5: case TE_CLOSURE6: case TE_CLOSURE7:
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
   d5022:	4718      	bx	r3
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5024:	6a06      	ldr	r6, [r0, #32]
   d5026:	6900      	ldr	r0, [r0, #16]
   d5028:	f7ff fe26 	bl	d4c78 <te_eval>
   d502c:	6960      	ldr	r0, [r4, #20]
   d502e:	eeb0 8a40 	vmov.f32	s16, s0
   d5032:	eef0 8a60 	vmov.f32	s17, s1
   d5036:	f7ff fe1f 	bl	d4c78 <te_eval>
   d503a:	69a0      	ldr	r0, [r4, #24]
   d503c:	eeb0 9a40 	vmov.f32	s18, s0
   d5040:	eef0 9a60 	vmov.f32	s19, s1
   d5044:	f7ff fe18 	bl	d4c78 <te_eval>
   d5048:	69e0      	ldr	r0, [r4, #28]
   d504a:	eeb0 aa40 	vmov.f32	s20, s0
   d504e:	eef0 aa60 	vmov.f32	s21, s1
   d5052:	f7ff fe11 	bl	d4c78 <te_eval>
   d5056:	eeb0 2a4a 	vmov.f32	s4, s20
   d505a:	eef0 2a6a 	vmov.f32	s5, s21
   d505e:	eeb0 1a49 	vmov.f32	s2, s18
   d5062:	eef0 1a69 	vmov.f32	s3, s19
   d5066:	eeb0 3a40 	vmov.f32	s6, s0
   d506a:	eef0 3a60 	vmov.f32	s7, s1
   d506e:	eeb0 0a48 	vmov.f32	s0, s16
   d5072:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5076:	ecbd 8b0c 	vpop	{d8-d13}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d507a:	4630      	mov	r0, r6
   d507c:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d507e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            switch(ARITY(n->type)) {
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
   d5082:	4718      	bx	r3
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d5084:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d5086:	6900      	ldr	r0, [r0, #16]
   d5088:	f7ff fdf6 	bl	d4c78 <te_eval>
   d508c:	6960      	ldr	r0, [r4, #20]
   d508e:	eeb0 8a40 	vmov.f32	s16, s0
   d5092:	eef0 8a60 	vmov.f32	s17, s1
   d5096:	f7ff fdef 	bl	d4c78 <te_eval>
   d509a:	69a0      	ldr	r0, [r4, #24]
   d509c:	eeb0 9a40 	vmov.f32	s18, s0
   d50a0:	eef0 9a60 	vmov.f32	s19, s1
   d50a4:	f7ff fde8 	bl	d4c78 <te_eval>
   d50a8:	69e0      	ldr	r0, [r4, #28]
   d50aa:	eeb0 aa40 	vmov.f32	s20, s0
   d50ae:	eef0 aa60 	vmov.f32	s21, s1
   d50b2:	f7ff fde1 	bl	d4c78 <te_eval>
   d50b6:	6a20      	ldr	r0, [r4, #32]
   d50b8:	eeb0 ba40 	vmov.f32	s22, s0
   d50bc:	eef0 ba60 	vmov.f32	s23, s1
   d50c0:	f7ff fdda 	bl	d4c78 <te_eval>
   d50c4:	eeb0 3a4b 	vmov.f32	s6, s22
   d50c8:	eef0 3a6b 	vmov.f32	s7, s23
   d50cc:	eeb0 2a4a 	vmov.f32	s4, s20
   d50d0:	eef0 2a6a 	vmov.f32	s5, s21
   d50d4:	eeb0 4a40 	vmov.f32	s8, s0
   d50d8:	eef0 4a60 	vmov.f32	s9, s1
   d50dc:	eeb0 1a49 	vmov.f32	s2, s18
   d50e0:	eef0 1a69 	vmov.f32	s3, s19
   d50e4:	eeb0 0a48 	vmov.f32	s0, s16
   d50e8:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d50ec:	ecbd 8b0c 	vpop	{d8-d13}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f0:	4630      	mov	r0, r6
   d50f2:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 0: return TE_FUN(void*)(n->parameters[0]);
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
   d50f8:	4718      	bx	r3
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d50fa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   d50fc:	6900      	ldr	r0, [r0, #16]
   d50fe:	f7ff fdbb 	bl	d4c78 <te_eval>
   d5102:	6960      	ldr	r0, [r4, #20]
   d5104:	eeb0 8a40 	vmov.f32	s16, s0
   d5108:	eef0 8a60 	vmov.f32	s17, s1
   d510c:	f7ff fdb4 	bl	d4c78 <te_eval>
   d5110:	69a0      	ldr	r0, [r4, #24]
   d5112:	eeb0 9a40 	vmov.f32	s18, s0
   d5116:	eef0 9a60 	vmov.f32	s19, s1
   d511a:	f7ff fdad 	bl	d4c78 <te_eval>
   d511e:	69e0      	ldr	r0, [r4, #28]
   d5120:	eeb0 aa40 	vmov.f32	s20, s0
   d5124:	eef0 aa60 	vmov.f32	s21, s1
   d5128:	f7ff fda6 	bl	d4c78 <te_eval>
   d512c:	6a20      	ldr	r0, [r4, #32]
   d512e:	eeb0 ba40 	vmov.f32	s22, s0
   d5132:	eef0 ba60 	vmov.f32	s23, s1
   d5136:	f7ff fd9f 	bl	d4c78 <te_eval>
   d513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d513c:	eeb0 ca40 	vmov.f32	s24, s0
   d5140:	eef0 ca60 	vmov.f32	s25, s1
   d5144:	f7ff fd98 	bl	d4c78 <te_eval>
   d5148:	eeb0 4a4c 	vmov.f32	s8, s24
   d514c:	eef0 4a6c 	vmov.f32	s9, s25
   d5150:	eeb0 3a4b 	vmov.f32	s6, s22
   d5154:	eef0 3a6b 	vmov.f32	s7, s23
   d5158:	eeb0 5a40 	vmov.f32	s10, s0
   d515c:	eef0 5a60 	vmov.f32	s11, s1
   d5160:	eeb0 2a4a 	vmov.f32	s4, s20
   d5164:	eef0 2a6a 	vmov.f32	s5, s21
   d5168:	eeb0 1a49 	vmov.f32	s2, s18
   d516c:	eef0 1a69 	vmov.f32	s3, s19
   d5170:	eeb0 0a48 	vmov.f32	s0, s16
   d5174:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d5178:	ecbd 8b0c 	vpop	{d8-d13}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d517c:	4630      	mov	r0, r6
   d517e:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 1: return TE_FUN(void*, double)(n->parameters[1], M(0));
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
   d5184:	4718      	bx	r3
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5186:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	f7ff fd75 	bl	d4c78 <te_eval>
   d518e:	6960      	ldr	r0, [r4, #20]
   d5190:	eeb0 8a40 	vmov.f32	s16, s0
   d5194:	eef0 8a60 	vmov.f32	s17, s1
   d5198:	f7ff fd6e 	bl	d4c78 <te_eval>
   d519c:	69a0      	ldr	r0, [r4, #24]
   d519e:	eeb0 9a40 	vmov.f32	s18, s0
   d51a2:	eef0 9a60 	vmov.f32	s19, s1
   d51a6:	f7ff fd67 	bl	d4c78 <te_eval>
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	eeb0 aa40 	vmov.f32	s20, s0
   d51b0:	eef0 aa60 	vmov.f32	s21, s1
   d51b4:	f7ff fd60 	bl	d4c78 <te_eval>
   d51b8:	6a20      	ldr	r0, [r4, #32]
   d51ba:	eeb0 ba40 	vmov.f32	s22, s0
   d51be:	eef0 ba60 	vmov.f32	s23, s1
   d51c2:	f7ff fd59 	bl	d4c78 <te_eval>
   d51c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51c8:	eeb0 ca40 	vmov.f32	s24, s0
   d51cc:	eef0 ca60 	vmov.f32	s25, s1
   d51d0:	f7ff fd52 	bl	d4c78 <te_eval>
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	eeb0 da40 	vmov.f32	s26, s0
   d51da:	eef0 da60 	vmov.f32	s27, s1
   d51de:	f7ff fd4b 	bl	d4c78 <te_eval>
   d51e2:	eeb0 5a4d 	vmov.f32	s10, s26
   d51e6:	eef0 5a6d 	vmov.f32	s11, s27
   d51ea:	eeb0 4a4c 	vmov.f32	s8, s24
   d51ee:	eef0 4a6c 	vmov.f32	s9, s25
   d51f2:	eeb0 6a40 	vmov.f32	s12, s0
   d51f6:	eef0 6a60 	vmov.f32	s13, s1
   d51fa:	eeb0 3a4b 	vmov.f32	s6, s22
   d51fe:	eef0 3a6b 	vmov.f32	s7, s23
   d5202:	eeb0 2a4a 	vmov.f32	s4, s20
   d5206:	eef0 2a6a 	vmov.f32	s5, s21
   d520a:	eeb0 1a49 	vmov.f32	s2, s18
   d520e:	eef0 1a69 	vmov.f32	s3, s19
   d5212:	eeb0 0a48 	vmov.f32	s0, s16
   d5216:	eef0 0a68 	vmov.f32	s1, s17
            }

        default: return NAN;
    }

}
   d521a:	ecbd 8b0c 	vpop	{d8-d13}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d521e:	4630      	mov	r0, r6
   d5220:	462b      	mov	r3, r5
            }

        default: return NAN;
    }

}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                case 2: return TE_FUN(void*, double, double)(n->parameters[2], M(0), M(1));
                case 3: return TE_FUN(void*, double, double, double)(n->parameters[3], M(0), M(1), M(2));
                case 4: return TE_FUN(void*, double, double, double, double)(n->parameters[4], M(0), M(1), M(2), M(3));
                case 5: return TE_FUN(void*, double, double, double, double, double)(n->parameters[5], M(0), M(1), M(2), M(3), M(4));
                case 6: return TE_FUN(void*, double, double, double, double, double, double)(n->parameters[6], M(0), M(1), M(2), M(3), M(4), M(5));
                case 7: return TE_FUN(void*, double, double, double, double, double, double, double)(n->parameters[7], M(0), M(1), M(2), M(3), M(4), M(5), M(6));
   d5226:	4718      	bx	r3
                default: return NAN;
            }

        default: return NAN;
   d5228:	ed9f 0b03 	vldr	d0, [pc, #12]	; d5238 <te_eval+0x5c0>
    }

}
   d522c:	ecbd 8b0c 	vpop	{d8-d13}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	f3af 8000 	nop.w
   d5238:	00000000 	.word	0x00000000
   d523c:	7ff80000 	.word	0x7ff80000

000d5240 <optimize>:

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5242:	ed2d 8b02 	vpush	{d8}
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
   d5246:	6802      	ldr	r2, [r0, #0]
    if (n->type == TE_VARIABLE) return;
   d5248:	2a01      	cmp	r2, #1
}

#undef TE_FUN
#undef M

static void optimize(te_expr *n) {
   d524a:	4604      	mov	r4, r0
    /* Evaluates as much as possible. */
    if (n->type == TE_CONSTANT) return;
    if (n->type == TE_VARIABLE) return;
   d524c:	d927      	bls.n	d529e <optimize+0x5e>

    /* Only optimize out functions flagged as pure. */
    if (IS_PURE(n->type)) {
   d524e:	0693      	lsls	r3, r2, #26
   d5250:	d525      	bpl.n	d529e <optimize+0x5e>
        const int arity = ARITY(n->type);
   d5252:	f012 0318 	ands.w	r3, r2, #24
   d5256:	bf18      	it	ne
   d5258:	f002 0307 	andne.w	r3, r2, #7
   d525c:	3303      	adds	r3, #3
   d525e:	f100 060c 	add.w	r6, r0, #12
   d5262:	eb00 0583 	add.w	r5, r0, r3, lsl #2
        int known = 1;
   d5266:	2701      	movs	r7, #1
        int i;
        for (i = 0; i < arity; ++i) {
   d5268:	42ae      	cmp	r6, r5
   d526a:	d009      	beq.n	d5280 <optimize+0x40>
            optimize(n->parameters[i]);
   d526c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d5270:	f7ff ffe6 	bl	d5240 <optimize>
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
   d5274:	6833      	ldr	r3, [r6, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
                known = 0;
   d5278:	2b01      	cmp	r3, #1
   d527a:	bf18      	it	ne
   d527c:	2700      	movne	r7, #0
   d527e:	e7f3      	b.n	d5268 <optimize+0x28>
            }
        }
        if (known) {
   d5280:	b16f      	cbz	r7, d529e <optimize+0x5e>
            const double value = te_eval(n);
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fcf8 	bl	d4c78 <te_eval>
            te_free_parameters(n);
   d5288:	4620      	mov	r0, r4
            if (((te_expr*)(n->parameters[i]))->type != TE_CONSTANT) {
                known = 0;
            }
        }
        if (known) {
            const double value = te_eval(n);
   d528a:	eeb0 8a40 	vmov.f32	s16, s0
   d528e:	eef0 8a60 	vmov.f32	s17, s1
            te_free_parameters(n);
   d5292:	f7ff f965 	bl	d4560 <te_free_parameters>
            n->type = TE_CONSTANT;
            n->value = value;
   d5296:	ed84 8b02 	vstr	d8, [r4, #8]
            }
        }
        if (known) {
            const double value = te_eval(n);
            te_free_parameters(n);
            n->type = TE_CONSTANT;
   d529a:	2301      	movs	r3, #1
   d529c:	6023      	str	r3, [r4, #0]
            n->value = value;
        }
    }
}
   d529e:	ecbd 8b02 	vpop	{d8}
   d52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52a4 <te_compile>:


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b08b      	sub	sp, #44	; 0x2c
   d52a8:	461d      	mov	r5, r3
    state s;
    s.start = s.next = expression;
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	9000      	str	r0, [sp, #0]
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
   d52ae:	4668      	mov	r0, sp


te_expr *te_compile(const char *expression, const te_variable *variables, int var_count, int *error) {
    state s;
    s.start = s.next = expression;
    s.lookup = variables;
   d52b0:	9107      	str	r1, [sp, #28]
    s.lookup_len = var_count;
   d52b2:	9208      	str	r2, [sp, #32]

    next_token(&s);
   d52b4:	f7ff f980 	bl	d45b8 <next_token>
    te_expr *root = list(&s);
   d52b8:	4668      	mov	r0, sp
   d52ba:	f7ff fabb 	bl	d4834 <list>

    if (s.type != TOK_END) {
   d52be:	9b02      	ldr	r3, [sp, #8]
   d52c0:	2b1a      	cmp	r3, #26
    s.start = s.next = expression;
    s.lookup = variables;
    s.lookup_len = var_count;

    next_token(&s);
    te_expr *root = list(&s);
   d52c2:	4604      	mov	r4, r0

    if (s.type != TOK_END) {
   d52c4:	d00d      	beq.n	d52e2 <te_compile+0x3e>
        te_free(root);
   d52c6:	f7ff f940 	bl	d454a <te_free>
        if (error) {
   d52ca:	b90d      	cbnz	r5, d52d0 <te_compile+0x2c>
            *error = (s.next - s.start);
            if (*error == 0) *error = 1;
        }
        return 0;
   d52cc:	2000      	movs	r0, #0
   d52ce:	e00e      	b.n	d52ee <te_compile+0x4a>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d0:	e89d 0005 	ldmia.w	sp, {r0, r2}
            if (*error == 0) *error = 1;
   d52d4:	1a10      	subs	r0, r2, r0
   d52d6:	d001      	beq.n	d52dc <te_compile+0x38>
    te_expr *root = list(&s);

    if (s.type != TOK_END) {
        te_free(root);
        if (error) {
            *error = (s.next - s.start);
   d52d8:	6028      	str	r0, [r5, #0]
   d52da:	e7f7      	b.n	d52cc <te_compile+0x28>
            if (*error == 0) *error = 1;
   d52dc:	2301      	movs	r3, #1
   d52de:	602b      	str	r3, [r5, #0]
   d52e0:	e005      	b.n	d52ee <te_compile+0x4a>
        }
        return 0;
    } else {
        optimize(root);
   d52e2:	f7ff ffad 	bl	d5240 <optimize>
        if (error) *error = 0;
   d52e6:	b10d      	cbz	r5, d52ec <te_compile+0x48>
   d52e8:	2300      	movs	r3, #0
   d52ea:	602b      	str	r3, [r5, #0]
        return root;
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	b00b      	add	sp, #44	; 0x2c
   d52f0:	bd30      	pop	{r4, r5, pc}
	...

000d52f4 <_ZN3ULPC1Eiif>:
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d52f4:	e880 0006 	stmia.w	r0, {r1, r2}
   d52f8:	4a10      	ldr	r2, [pc, #64]	; (d533c <_ZN3ULPC1Eiif+0x48>)
   d52fa:	6382      	str	r2, [r0, #56]	; 0x38
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
   d52fc:	6102      	str	r2, [r0, #16]
  _Tb = 18.0;
   d52fe:	4a10      	ldr	r2, [pc, #64]	; (d5340 <_ZN3ULPC1Eiif+0x4c>)
   d5300:	61c2      	str	r2, [r0, #28]
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d5302:	4a10      	ldr	r2, [pc, #64]	; (d5344 <_ZN3ULPC1Eiif+0x50>)
   d5304:	eddf 6a10 	vldr	s13, [pc, #64]	; d5348 <_ZN3ULPC1Eiif+0x54>
   d5308:	edd2 7a00 	vldr	s15, [r2]

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d530c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d534c <_ZN3ULPC1Eiif+0x58>
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d5310:	490f      	ldr	r1, [pc, #60]	; (d5350 <_ZN3ULPC1Eiif+0x5c>)
  #define DEBUG_PRINT(x)
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
   d5312:	ed80 0a02 	vstr	s0, [r0, #8]
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d5316:	ee67 6aa6 	vmul.f32	s13, s15, s13
#endif



ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
   d531a:	60c1      	str	r1, [r0, #12]
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d531c:	ee86 6a87 	vdiv.f32	s12, s13, s14
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d5320:	eddf 6a0c 	vldr	s13, [pc, #48]	; d5354 <_ZN3ULPC1Eiif+0x60>

ULP::ULP (int a, int b, float c) : _CPin(a), _TPin(b), _Sf(c) {
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
   d5324:	ed80 7a08 	vstr	s14, [r0, #32]
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d5328:	ee67 7aa6 	vmul.f32	s15, s15, s13
  _Htemp = 40.0;
  _Ltemp = 20.0; //temps for cal of temp sensor
  _Tb = 18.0;
  _Ts = 87.0;
  _Tz = 20.0;
  _Hvolt = (_Htemp + _Tb) * _Vsup / _Ts;
   d532c:	ed80 6a05 	vstr	s12, [r0, #20]
  _Lvolt = (_Ltemp + _Tb) * _Vsup / _Ts; //volts for cal of temp sensor
   d5330:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5334:	edc0 6a06 	vstr	s13, [r0, #24]
}
   d5338:	4770      	bx	lr
   d533a:	bf00      	nop
   d533c:	41a00000 	.word	0x41a00000
   d5340:	41900000 	.word	0x41900000
   d5344:	2003d660 	.word	0x2003d660
   d5348:	42680000 	.word	0x42680000
   d534c:	42ae0000 	.word	0x42ae0000
   d5350:	42200000 	.word	0x42200000
   d5354:	42180000 	.word	0x42180000

000d5358 <_ZN3ULP7getTempEiPc>:

//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
   d5358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d535c:	460c      	mov	r4, r1
   d535e:	4606      	mov	r6, r0
   d5360:	4690      	mov	r8, r2

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5362:	f005 fc27 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;
   d5366:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d536a:	fb07 0704 	mla	r7, r7, r4, r0
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d536e:	2400      	movs	r4, #0
//float ULP::_Vcc = 5.0;  //voltage for ADC conversion of analogRead()
float ULP::_Vcc = 3.3;  //voltage for ADC conversion of analogRead()  
float ULP::_Vsup = 3.3; //voltage of ULP supply for thermister, etc.

int  ULP::getTemp(int n, char* U) { //get temperature using n as time in seconds for averaging, and U for units "F"/"C"
  unsigned long etime, i = 0;
   d5370:	4625      	mov	r5, r4
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
    AC = AC + analogRead(_TPin);
   d5372:	88b0      	ldrh	r0, [r6, #4]
   d5374:	f008 f975 	bl	dd662 <analogRead>
   d5378:	4404      	add	r4, r0
    delay(1);
   d537a:	2001      	movs	r0, #1
   d537c:	f007 fad0 	bl	dc920 <delay>
   d5380:	f005 fc18 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d5384:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_TPin);
    delay(1);
    i++;
   d5386:	f105 0501 	add.w	r5, r5, #1
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  float temp;
  etime = millis() + n * 1000;

  do {
   d538a:	d3f2      	bcc.n	d5372 <_ZN3ULP7getTempEiPc+0x1a>

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d538c:	ee07 5a10 	vmov	s14, r5
   d5390:	ee07 4a90 	vmov	s15, r4
   d5394:	eef8 6a47 	vcvt.f32.u32	s13, s14
   d5398:	eef8 7a67 	vcvt.f32.u32	s15, s15
  DEBUG_PRINT(AC);
  DEBUG_PRINT(", ");
  
  float Cnts = float (AC) / float(i);
//  float Volts = Cnts * _Vcc / 1024.0;
float Volts = Cnts * _Vcc / 4096.0;
   d539c:	4b18      	ldr	r3, [pc, #96]	; (d5400 <_ZN3ULP7getTempEiPc+0xa8>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d539e:	edd6 5a08 	vldr	s11, [r6, #32]
   d53a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d53a6:	edd3 7a00 	vldr	s15, [r3]
   d53aa:	4b16      	ldr	r3, [pc, #88]	; (d5404 <_ZN3ULP7getTempEiPc+0xac>)
   d53ac:	ed93 6a00 	vldr	s12, [r3]

  if (U == "F") {
   d53b0:	4b15      	ldr	r3, [pc, #84]	; (d5408 <_ZN3ULP7getTempEiPc+0xb0>)

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d53b2:	eec5 6a86 	vdiv.f32	s13, s11, s12

  if (U == "F") {
   d53b6:	4598      	cmp	r8, r3

  DEBUG_PRINT("Volts: ");
  DEBUG_PRINT(Volts);
  DEBUG_PRINT(", ");

  temp = (_Ts / _Vsup) * Volts - _Tb;
   d53b8:	ee67 7a27 	vmul.f32	s15, s14, s15
   d53bc:	ed9f 7a13 	vldr	s14, [pc, #76]	; d540c <_ZN3ULP7getTempEiPc+0xb4>
   d53c0:	ee27 7a87 	vmul.f32	s14, s15, s14
   d53c4:	edd6 7a07 	vldr	s15, [r6, #28]
   d53c8:	eed7 7a26 	vfnms.f32	s15, s14, s13

  if (U == "F") {
   d53cc:	d10c      	bne.n	d53e8 <_ZN3ULP7getTempEiPc+0x90>
    return temp * 9 / 5 + 32;
   d53ce:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
   d53d2:	ee67 7a87 	vmul.f32	s15, s15, s14
   d53d6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   d53da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d53de:	eddf 7a0c 	vldr	s15, [pc, #48]	; d5410 <_ZN3ULP7getTempEiPc+0xb8>
   d53e2:	ee77 7a27 	vadd.f32	s15, s14, s15
   d53e6:	e002      	b.n	d53ee <_ZN3ULP7getTempEiPc+0x96>
  }
  else if ( U == "C") {
   d53e8:	4b0a      	ldr	r3, [pc, #40]	; (d5414 <_ZN3ULP7getTempEiPc+0xbc>)
   d53ea:	4598      	cmp	r8, r3
   d53ec:	d102      	bne.n	d53f4 <_ZN3ULP7getTempEiPc+0x9c>
    return temp;
   d53ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d53f2:	e001      	b.n	d53f8 <_ZN3ULP7getTempEiPc+0xa0>
  }
  else return 0;
   d53f4:	eddf 7a08 	vldr	s15, [pc, #32]	; d5418 <_ZN3ULP7getTempEiPc+0xc0>
}
   d53f8:	ee17 0a90 	vmov	r0, s15
   d53fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5400:	2003d65c 	.word	0x2003d65c
   d5404:	2003d660 	.word	0x2003d660
   d5408:	000e7506 	.word	0x000e7506
   d540c:	39800000 	.word	0x39800000
   d5410:	42000000 	.word	0x42000000
   d5414:	000e835a 	.word	0x000e835a
   d5418:	00000000 	.word	0x00000000

000d541c <_ZN3ULP4zeroEv>:
  else return 0;
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
   d541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d541e:	4604      	mov	r4, r0
   d5420:	f005 fbc8 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
   d5424:	2500      	movs	r5, #0
  etime = millis() + n * 1000;
   d5426:	f500 571c 	add.w	r7, r0, #9984	; 0x2700
   d542a:	3710      	adds	r7, #16
  
  return _Vref;
}

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
   d542c:	462e      	mov	r6, r5
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d542e:	8820      	ldrh	r0, [r4, #0]
   d5430:	f008 f917 	bl	dd662 <analogRead>
   d5434:	4405      	add	r5, r0
    delay(1);
   d5436:	2001      	movs	r0, #1
   d5438:	f007 fa72 	bl	dc920 <delay>
   d543c:	f005 fbba 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d5440:	42b8      	cmp	r0, r7
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d5442:	f106 0601 	add.w	r6, r6, #1

float  ULP::zero() { //function to zero sensor and get temperature at that zero _Tz
  unsigned long etime, i = 0, n = 10;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d5446:	d3f2      	bcc.n	d542e <_ZN3ULP4zeroEv+0x12>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d5448:	ee07 5a90 	vmov	s15, r5
   d544c:	ee07 6a10 	vmov	s14, r6
   d5450:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5454:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d5458:	4b15      	ldr	r3, [pc, #84]	; (d54b0 <_ZN3ULP4zeroEv+0x94>)
  _Voff = Vgas - _Vref;
   d545a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d545e:	edd3 7a00 	vldr	s15, [r3]
   d5462:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d5466:	ee17 0a90 	vmov	r0, s15
   d546a:	f00d ff05 	bl	e3278 <__aeabi_f2d>
   d546e:	2200      	movs	r2, #0
   d5470:	4b10      	ldr	r3, [pc, #64]	; (d54b4 <_ZN3ULP4zeroEv+0x98>)
   d5472:	f00d ff55 	bl	e3320 <__aeabi_dmul>
   d5476:	4b10      	ldr	r3, [pc, #64]	; (d54b8 <_ZN3ULP4zeroEv+0x9c>)
   d5478:	2200      	movs	r2, #0
   d547a:	f00d ff51 	bl	e3320 <__aeabi_dmul>
   d547e:	f00e fa47 	bl	e3910 <__aeabi_d2f>
   d5482:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  _Tz = getTemp(10);
   d5486:	4a0d      	ldr	r2, [pc, #52]	; (d54bc <_ZN3ULP4zeroEv+0xa0>)
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d5488:	ee07 0a10 	vmov	s14, r0
   d548c:	ee77 7a67 	vsub.f32	s15, s14, s15
  _Tz = getTemp(10);
   d5490:	210a      	movs	r1, #10
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
   d5492:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  _Tz = getTemp(10);
   d5496:	4620      	mov	r0, r4
   d5498:	f7ff ff5e 	bl	d5358 <_ZN3ULP7getTempEiPc>
   d549c:	ee07 0a90 	vmov	s15, r0
   d54a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return _Voff;
} //returns voltage at zero concentration
   d54a4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
  float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  _Voff = Vgas - _Vref;
  _Tz = getTemp(10);
   d54a8:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  return _Voff;
} //returns voltage at zero concentration
   d54ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d54ae:	bf00      	nop
   d54b0:	2003d65c 	.word	0x2003d65c
   d54b4:	408f4000 	.word	0x408f4000
   d54b8:	3f300000 	.word	0x3f300000
   d54bc:	000e835a 	.word	0x000e835a

000d54c0 <_ZN3ULP7getVgasEi>:

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
   d54c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54c2:	460c      	mov	r4, r1
   d54c4:	4607      	mov	r7, r0
   d54c6:	f005 fb75 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
   d54ca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   d54ce:	fb06 0604 	mla	r6, r6, r4, r0
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
   d54d2:	2400      	movs	r4, #0
  return _Voff;
} //returns voltage at zero concentration

float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
   d54d4:	4625      	mov	r5, r4
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
    AC = AC + analogRead(_CPin);
   d54d6:	8838      	ldrh	r0, [r7, #0]
   d54d8:	f008 f8c3 	bl	dd662 <analogRead>
   d54dc:	4404      	add	r4, r0
    delay(1);
   d54de:	2001      	movs	r0, #1
   d54e0:	f007 fa1e 	bl	dc920 <delay>
   d54e4:	f005 fb66 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d54e8:	42b0      	cmp	r0, r6
    AC = AC + analogRead(_CPin);
    delay(1);
    i++;
   d54ea:	f105 0501 	add.w	r5, r5, #1
float ULP::getVgas(int n) //gets the gas voltage from analog read. using n seconds as averaging time
{
  unsigned long etime, i = 0;
  unsigned long AC = 0;
  etime = millis() + n * 1000;
  do {
   d54ee:	d3f2      	bcc.n	d54d6 <_ZN3ULP7getVgasEi+0x16>
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
  return Vgas;
   d54f0:	ee07 4a90 	vmov	s15, r4
   d54f4:	ee07 5a10 	vmov	s14, r5
   d54f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d54fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    i++;
  } while (millis() < etime);
  float Cnts = float (AC) / float(i);

//  float Vgas = Cnts * _Vcc * 1000.0 / 1024.0; //in mV
float Vgas = Cnts * _Vcc * 1000.0 / 4096.0; //in mV
   d5500:	4b0b      	ldr	r3, [pc, #44]	; (d5530 <_ZN3ULP7getVgasEi+0x70>)
  return Vgas;
   d5502:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5506:	edd3 7a00 	vldr	s15, [r3]
   d550a:	ee66 7aa7 	vmul.f32	s15, s13, s15
   d550e:	ee17 0a90 	vmov	r0, s15
   d5512:	f00d feb1 	bl	e3278 <__aeabi_f2d>
   d5516:	2200      	movs	r2, #0
   d5518:	4b06      	ldr	r3, [pc, #24]	; (d5534 <_ZN3ULP7getVgasEi+0x74>)
   d551a:	f00d ff01 	bl	e3320 <__aeabi_dmul>
   d551e:	2200      	movs	r2, #0
   d5520:	4b05      	ldr	r3, [pc, #20]	; (d5538 <_ZN3ULP7getVgasEi+0x78>)
   d5522:	f00d fefd 	bl	e3320 <__aeabi_dmul>
   d5526:	f00e f9f3 	bl	e3910 <__aeabi_d2f>
} //returns voltage at zero concentration
   d552a:	ee00 0a10 	vmov	s0, r0
   d552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5530:	2003d65c 	.word	0x2003d65c
   d5534:	408f4000 	.word	0x408f4000
   d5538:	3f300000 	.word	0x3f300000
   d553c:	00000000 	.word	0x00000000

000d5540 <_ZN3ULP7getConcEif>:



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.
   d5540:	b5d0      	push	{r4, r6, r7, lr}
   d5542:	ed2d 8b02 	vpush	{d8}
   d5546:	4604      	mov	r4, r0
   d5548:	eeb0 8a40 	vmov.f32	s16, s0

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d554c:	f7ff ffb8 	bl	d54c0 <_ZN3ULP7getVgasEi>
   d5550:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   d5554:	ee30 0a67 	vsub.f32	s0, s0, s15
   d5558:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   d555c:	ee70 7a67 	vsub.f32	s15, s0, s15
   d5560:	ee17 0a90 	vmov	r0, s15
   d5564:	f00d fe88 	bl	e3278 <__aeabi_f2d>
   d5568:	2200      	movs	r2, #0
   d556a:	4b21      	ldr	r3, [pc, #132]	; (d55f0 <_ZN3ULP7getConcEif+0xb0>)
   d556c:	f00e f802 	bl	e3574 <__aeabi_ddiv>
   d5570:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
   d5574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5578:	4606      	mov	r6, r0
   d557a:	ee17 0a90 	vmov	r0, s15
   d557e:	460f      	mov	r7, r1
   d5580:	f00d fe7a 	bl	e3278 <__aeabi_f2d>
   d5584:	4602      	mov	r2, r0
   d5586:	460b      	mov	r3, r1
   d5588:	4630      	mov	r0, r6
   d558a:	4639      	mov	r1, r7
   d558c:	f00d fff2 	bl	e3574 <__aeabi_ddiv>
   d5590:	a315      	add	r3, pc, #84	; (adr r3, d55e8 <_ZN3ULP7getConcEif+0xa8>)
   d5592:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5596:	f00d fec3 	bl	e3320 <__aeabi_dmul>
   d559a:	f00e f9b9 	bl	e3910 <__aeabi_d2f>
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
   d559e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
   d55a2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   d55a6:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
   d55aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d55ae:	ee78 6a47 	vsub.f32	s13, s16, s14



float  ULP::getConc(int n, float t) { //gets the concentration using n seconds as averaging time, with temperature correction if including t, otherwise, not temperature corrected.

  float nA = (getVgas(n) - _Vref - _Voff)/1000.0/ float(_Gain) * 1000000000.0;
   d55b2:	ee07 0a90 	vmov	s15, r0
    DEBUG_PRINT(_Vref);
  DEBUG_PRINT(", ");
    DEBUG_PRINT(_Voff);
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
   d55b6:	bfcc      	ite	gt
   d55b8:	ed94 6a0c 	vldrgt	s12, [r4, #48]	; 0x30
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d55bc:	ed94 6a0d 	vldrle	s12, [r4, #52]	; 0x34
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d55c0:	ee38 8a47 	vsub.f32	s16, s16, s14
  DEBUG_PRINT(", ");
  if (t>23){
  nA = nA - _Ah*(t-_Tz); 
  }
  else{
  nA = nA - _Al*(t-_Tz);
   d55c4:	eee6 7a66 	vfms.f32	s15, s12, s13
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d55c8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d55cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d55d0:	eea6 0ac8 	vfms.f32	s0, s13, s16
}
   d55d4:	ecbd 8b02 	vpop	{d8}
  nA = nA - _Al*(t-_Tz);
  }
  
  float Conc = nA /_Sf*(1-_Tc*(t-_Tz));
 
  return Conc;
   d55d8:	edd4 6a02 	vldr	s13, [r4, #8]
   d55dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
   d55e0:	ee20 0a07 	vmul.f32	s0, s0, s14
   d55e4:	bdd0      	pop	{r4, r6, r7, pc}
   d55e6:	bf00      	nop
   d55e8:	00000000 	.word	0x00000000
   d55ec:	41cdcd65 	.word	0x41cdcd65
   d55f0:	408f4000 	.word	0x408f4000

000d55f4 <_ZN3IAQC1Eiif>:
  _Tc = 0.5;
  _Ah = 3.91;
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4603      	mov	r3, r0
   d55f8:	f7ff fe7c 	bl	d52f4 <_ZN3ULPC1Eiif>
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d55fc:	4a0d      	ldr	r2, [pc, #52]	; (d5634 <_ZN3IAQC1Eiif+0x40>)
   d55fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; d5638 <_ZN3IAQC1Eiif+0x44>
   d5602:	edd2 7a00 	vldr	s15, [r2]
   d5606:	eddf 6a0d 	vldr	s13, [pc, #52]	; d563c <_ZN3IAQC1Eiif+0x48>
  _Al = 1.11;
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
   d560a:	4a0d      	ldr	r2, [pc, #52]	; (d5640 <_ZN3IAQC1Eiif+0x4c>)
   d560c:	63da      	str	r2, [r3, #60]	; 0x3c
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d560e:	ee27 7a87 	vmul.f32	s14, s15, s14
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d5612:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d5616:	eec7 7a26 	vdiv.f32	s15, s14, s13
}

IAQ::IAQ(int a, int b, float c) : ULP(a, b, c) {
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
   d561a:	62da      	str	r2, [r3, #44]	; 0x2c
  _Ah = 16.20;
   d561c:	4a09      	ldr	r2, [pc, #36]	; (d5644 <_ZN3IAQC1Eiif+0x50>)
   d561e:	631a      	str	r2, [r3, #48]	; 0x30
  _Al = 4.61;
   d5620:	4a09      	ldr	r2, [pc, #36]	; (d5648 <_ZN3IAQC1Eiif+0x54>)
   d5622:	635a      	str	r2, [r3, #52]	; 0x34
}
   d5624:	4618      	mov	r0, r3
  Serial.println(_Tb);
}

float  ULP::setVref (long R1, long R2, long R3, int bias) { //function for setting vref for custom sensors. Not critical value as call to concentration cancels out _Vref with _Voff
  if (bias>0){
    _Vref = _Vsup * float(R1+R2) / float(R1 + R2 + R3) * 1000.0;
   d5626:	ed9f 7a09 	vldr	s14, [pc, #36]	; d564c <_ZN3IAQC1Eiif+0x58>
   d562a:	ee67 7a87 	vmul.f32	s15, s15, s14
   d562e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  setVref(1000000, 105000, 1000000, +1);
  _Gain = 100000;
  _Tc = 0.5;
  _Ah = 16.20;
  _Al = 4.61;
}
   d5632:	bd08      	pop	{r3, pc}
   d5634:	2003d660 	.word	0x2003d660
   d5638:	4986e340 	.word	0x4986e340
   d563c:	4a007aa0 	.word	0x4a007aa0
   d5640:	000186a0 	.word	0x000186a0
   d5644:	4181999a 	.word	0x4181999a
   d5648:	4093851f 	.word	0x4093851f
   d564c:	447a0000 	.word	0x447a0000

000d5650 <_GLOBAL__sub_I__ZN3ULPC2Eiif>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5650:	f005 baf0 	b.w	dac34 <HAL_Pin_Map>

000d5654 <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d5654:	4770      	bx	lr
	...

000d5658 <_Z8ADXL_ISRv>:

//******************** ISR *********************
// Look for Interrupts and Triggered Action    
// Need to keep this short and must not include I2C etc.
void ADXL_ISR() {
  accelInterrupt=true; 
   d5658:	4b01      	ldr	r3, [pc, #4]	; (d5660 <_Z8ADXL_ISRv+0x8>)
   d565a:	2201      	movs	r2, #1
   d565c:	701a      	strb	r2, [r3, #0]
   d565e:	4770      	bx	lr
   d5660:	2003dfbc 	.word	0x2003dfbc

000d5664 <_Z16gmtOffsetHandlerPKcS0_>:
    saveState();
    return true;
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
   d5664:	b510      	push	{r4, lr}
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5666:	4608      	mov	r0, r1
   d5668:	f00e fb91 	bl	e3d8e <atoi>
   d566c:	4c09      	ldr	r4, [pc, #36]	; (d5694 <_Z16gmtOffsetHandlerPKcS0_+0x30>)
  gmtOffsetValid = true;
   d566e:	4b0a      	ldr	r3, [pc, #40]	; (d5698 <_Z16gmtOffsetHandlerPKcS0_+0x34>)
  }
}

void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
   d5670:	6020      	str	r0, [r4, #0]
  gmtOffsetValid = true;
   d5672:	2201      	movs	r2, #1
   d5674:	701a      	strb	r2, [r3, #0]
  debug("GMT seconds offset is: ");
   d5676:	f007 fb3f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d567a:	4908      	ldr	r1, [pc, #32]	; (d569c <_Z16gmtOffsetHandlerPKcS0_+0x38>)
   d567c:	f007 f979 	bl	dc972 <_ZN5Print5printEPKc>
  debug(gmtOffsetSeconds + "\n");
   d5680:	f007 fb3a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5684:	6823      	ldr	r3, [r4, #0]
   d5686:	4906      	ldr	r1, [pc, #24]	; (d56a0 <_Z16gmtOffsetHandlerPKcS0_+0x3c>)
}
   d5688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void gmtOffsetHandler(const char *event, const char *data) {
  // Handle the integration response
  gmtOffsetSeconds=atoi(data);
  gmtOffsetValid = true;
  debug("GMT seconds offset is: ");
  debug(gmtOffsetSeconds + "\n");
   d568c:	4419      	add	r1, r3
   d568e:	f007 b970 	b.w	dc972 <_ZN5Print5printEPKc>
   d5692:	bf00      	nop
   d5694:	2003d6b4 	.word	0x2003d6b4
   d5698:	2003e060 	.word	0x2003e060
   d569c:	000e7617 	.word	0x000e7617
   d56a0:	000e7962 	.word	0x000e7962

000d56a4 <__tcf_0>:
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d56a4:	b538      	push	{r3, r4, r5, lr}
   d56a6:	4d06      	ldr	r5, [pc, #24]	; (d56c0 <__tcf_0+0x1c>)
   d56a8:	2400      	movs	r4, #0
   d56aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d56ae:	4428      	add	r0, r5
   d56b0:	3c10      	subs	r4, #16
   d56b2:	f007 fd5f 	bl	dd174 <_ZN6StringD1Ev>
   d56b6:	f114 0f70 	cmn.w	r4, #112	; 0x70
   d56ba:	d1f6      	bne.n	d56aa <__tcf_0+0x6>
   d56bc:	bd38      	pop	{r3, r4, r5, pc}
   d56be:	bf00      	nop
   d56c0:	2003d81c 	.word	0x2003d81c

000d56c4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.38>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d56c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d56c6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d56ca:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d56cc:	f88d 3000 	strb.w	r3, [sp]
   d56d0:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d56d2:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d56d4:	f006 fd00 	bl	dc0d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d56d8:	4628      	mov	r0, r5
   d56da:	b003      	add	sp, #12
   d56dc:	bd30      	pop	{r4, r5, pc}

000d56de <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d56de:	2200      	movs	r2, #0
   d56e0:	4611      	mov	r1, r2
   d56e2:	6840      	ldr	r0, [r0, #4]
   d56e4:	f005 bb98 	b.w	dae18 <network_ready>

000d56e8 <_ZN5spark9WiFiClass2onEv>:
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d56e8:	2300      	movs	r3, #0
   d56ea:	461a      	mov	r2, r3
   d56ec:	4619      	mov	r1, r3
   d56ee:	6840      	ldr	r0, [r0, #4]
   d56f0:	f005 bb9a 	b.w	dae28 <network_on>

000d56f4 <_ZN11SystemClass11sleepResultEv>:
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d56f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d56f6:	4b1e      	ldr	r3, [pc, #120]	; (d5770 <_ZN11SystemClass11sleepResultEv+0x7c>)
   d56f8:	781d      	ldrb	r5, [r3, #0]
    inline pin_t wakeUpPin() {
        return sleepResult().pin();
    }

    // FIXME: SystemSleepResult
    SleepResult sleepResult() {
   d56fa:	4606      	mov	r6, r0
   d56fc:	460c      	mov	r4, r1
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d56fe:	b9b5      	cbnz	r5, d572e <_ZN11SystemClass11sleepResultEv+0x3a>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5700:	a802      	add	r0, sp, #8
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
   d5702:	2201      	movs	r2, #1
   d5704:	701a      	strb	r2, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5706:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d570a:	462a      	mov	r2, r5
   d570c:	4629      	mov	r1, r5
   d570e:	f005 fa41 	bl	dab94 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5712:	9b01      	ldr	r3, [sp, #4]
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d5714:	2b1e      	cmp	r3, #30
   d5716:	d10a      	bne.n	d572e <_ZN11SystemClass11sleepResultEv+0x3a>
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d5718:	2303      	movs	r3, #3
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d571a:	6820      	ldr	r0, [r4, #0]
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d571c:	71a3      	strb	r3, [r4, #6]
   d571e:	2308      	movs	r3, #8
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
   d5720:	80a5      	strh	r5, [r4, #4]
        compatResult_ = result.compatResult_;
   d5722:	8125      	strh	r5, [r4, #8]
   d5724:	8163      	strh	r3, [r4, #10]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d5726:	b110      	cbz	r0, d572e <_ZN11SystemClass11sleepResultEv+0x3a>
            free(wakeupSource_);
   d5728:	f005 fc14 	bl	daf54 <free>
            wakeupSource_ = nullptr;
   d572c:	6025      	str	r5, [r4, #0]
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d572e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   d5732:	b90b      	cbnz	r3, d5738 <_ZN11SystemClass11sleepResultEv+0x44>
   d5734:	6822      	ldr	r2, [r4, #0]
   d5736:	b19a      	cbz	r2, d5760 <_ZN11SystemClass11sleepResultEv+0x6c>
   d5738:	6821      	ldr	r1, [r4, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d573a:	b159      	cbz	r1, d5754 <_ZN11SystemClass11sleepResultEv+0x60>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d573c:	888a      	ldrh	r2, [r1, #4]
   d573e:	2a01      	cmp	r2, #1
   d5740:	d003      	beq.n	d574a <_ZN11SystemClass11sleepResultEv+0x56>
   d5742:	2a04      	cmp	r2, #4
   d5744:	d106      	bne.n	d5754 <_ZN11SystemClass11sleepResultEv+0x60>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d5746:	2202      	movs	r2, #2
   d5748:	e005      	b.n	d5756 <_ZN11SystemClass11sleepResultEv+0x62>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d574a:	8989      	ldrh	r1, [r1, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d574c:	8161      	strh	r1, [r4, #10]
   d574e:	71a2      	strb	r2, [r4, #6]
   d5750:	8123      	strh	r3, [r4, #8]
   d5752:	e005      	b.n	d5760 <_ZN11SystemClass11sleepResultEv+0x6c>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d5754:	2204      	movs	r2, #4
   d5756:	8123      	strh	r3, [r4, #8]
   d5758:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d575c:	71a2      	strb	r2, [r4, #6]
   d575e:	8163      	strh	r3, [r4, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d5760:	f854 3f06 	ldr.w	r3, [r4, #6]!
   d5764:	6033      	str	r3, [r6, #0]
   d5766:	88a3      	ldrh	r3, [r4, #4]
   d5768:	80b3      	strh	r3, [r6, #4]
                // Woken up from standby mode
                systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP));
            }
        }
        return systemSleepResult_;
    }
   d576a:	4630      	mov	r0, r6
   d576c:	b002      	add	sp, #8
   d576e:	bd70      	pop	{r4, r5, r6, pc}
   d5770:	2003d7b4 	.word	0x2003d7b4

000d5774 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d5774:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5776:	f005 fa1d 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d577a:	4b03      	ldr	r3, [pc, #12]	; (d5788 <_ZN10CloudClass7processEv+0x14>)
   d577c:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d577e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5782:	f005 baf9 	b.w	dad78 <spark_process>
   d5786:	bf00      	nop
   d5788:	2003e620 	.word	0x2003e620

000d578c <_ZN8particle9LEDStatus9setActiveEb>:
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d578c:	2200      	movs	r2, #0
   d578e:	3004      	adds	r0, #4
   d5790:	f005 bae8 	b.w	dad64 <led_set_status_active>

000d5794 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d5794:	b510      	push	{r4, lr}
   d5796:	4b04      	ldr	r3, [pc, #16]	; (d57a8 <_ZN8particle9LEDStatusD1Ev+0x14>)
   d5798:	6003      	str	r3, [r0, #0]
   d579a:	4604      	mov	r4, r0
    setActive(false);
   d579c:	2100      	movs	r1, #0
   d579e:	f7ff fff5 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
}
   d57a2:	4620      	mov	r0, r4
   d57a4:	bd10      	pop	{r4, pc}
   d57a6:	bf00      	nop
   d57a8:	000e75b8 	.word	0x000e75b8

000d57ac <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d57ac:	b510      	push	{r4, lr}
   d57ae:	4604      	mov	r4, r0
    setActive(false);
}
   d57b0:	f7ff fff0 	bl	d5794 <_ZN8particle9LEDStatusD1Ev>
   d57b4:	4620      	mov	r0, r4
   d57b6:	2120      	movs	r1, #32
   d57b8:	f007 ff9e 	bl	dd6f8 <_ZdlPvj>
   d57bc:	4620      	mov	r0, r4
   d57be:	bd10      	pop	{r4, pc}

000d57c0 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d57c0:	6803      	ldr	r3, [r0, #0]
   d57c2:	b12b      	cbz	r3, d57d0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d57c4:	6842      	ldr	r2, [r0, #4]
   d57c6:	4293      	cmp	r3, r2
   d57c8:	d202      	bcs.n	d57d0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d57ca:	4618      	mov	r0, r3
   d57cc:	f00e badf 	b.w	e3d8e <atoi>
   d57d0:	2000      	movs	r0, #0
   d57d2:	4770      	bx	lr

000d57d4 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d57d4:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d57d6:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d57d8:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d57da:	b145      	cbz	r5, d57ee <_ZN10BlynkParam8iteratorppEv+0x1a>
   d57dc:	6843      	ldr	r3, [r0, #4]
   d57de:	429d      	cmp	r5, r3
   d57e0:	d205      	bcs.n	d57ee <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d57e2:	4628      	mov	r0, r5
   d57e4:	f00f fbb2 	bl	e4f4c <strlen>
   d57e8:	3001      	adds	r0, #1
   d57ea:	4405      	add	r5, r0
   d57ec:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d57ee:	4620      	mov	r0, r4
   d57f0:	bd38      	pop	{r3, r4, r5, pc}

000d57f2 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d57f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57f4:	4604      	mov	r4, r0
    if (str == NULL) {
   d57f6:	460f      	mov	r7, r1
   d57f8:	6846      	ldr	r6, [r0, #4]
   d57fa:	b921      	cbnz	r1, d5806 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d57fc:	6803      	ldr	r3, [r0, #0]
   d57fe:	1c72      	adds	r2, r6, #1
   d5800:	6042      	str	r2, [r0, #4]
   d5802:	5599      	strb	r1, [r3, r6]
        return;
   d5804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d5806:	4608      	mov	r0, r1
   d5808:	f00f fba0 	bl	e4f4c <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d580c:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d580e:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d5810:	19aa      	adds	r2, r5, r6
   d5812:	429a      	cmp	r2, r3
   d5814:	d808      	bhi.n	d5828 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d5816:	6820      	ldr	r0, [r4, #0]
   d5818:	462a      	mov	r2, r5
   d581a:	4639      	mov	r1, r7
   d581c:	4430      	add	r0, r6
   d581e:	f00e fbc9 	bl	e3fb4 <memcpy>
    len += l;
   d5822:	6863      	ldr	r3, [r4, #4]
   d5824:	441d      	add	r5, r3
   d5826:	6065      	str	r5, [r4, #4]
   d5828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d582c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d582c:	b570      	push	{r4, r5, r6, lr}
   d582e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d5830:	6840      	ldr	r0, [r0, #4]
   d5832:	68a6      	ldr	r6, [r4, #8]
   d5834:	6825      	ldr	r5, [r4, #0]
   d5836:	4a05      	ldr	r2, [pc, #20]	; (d584c <_ZN10BlynkParam3addEi+0x20>)
   d5838:	460b      	mov	r3, r1
   d583a:	1a31      	subs	r1, r6, r0
   d583c:	4428      	add	r0, r5
   d583e:	f005 fba9 	bl	daf94 <snprintf>
   d5842:	6863      	ldr	r3, [r4, #4]
   d5844:	3001      	adds	r0, #1
   d5846:	4418      	add	r0, r3
   d5848:	6060      	str	r0, [r4, #4]
   d584a:	bd70      	pop	{r4, r5, r6, pc}
   d584c:	000e762f 	.word	0x000e762f

000d5850 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d5850:	b570      	push	{r4, r5, r6, lr}
   d5852:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	68a6      	ldr	r6, [r4, #8]
   d5858:	6825      	ldr	r5, [r4, #0]
   d585a:	4a05      	ldr	r2, [pc, #20]	; (d5870 <_ZN10BlynkParam3addEl+0x20>)
   d585c:	460b      	mov	r3, r1
   d585e:	1a31      	subs	r1, r6, r0
   d5860:	4428      	add	r0, r5
   d5862:	f005 fb97 	bl	daf94 <snprintf>
   d5866:	6863      	ldr	r3, [r4, #4]
   d5868:	3001      	adds	r0, #1
   d586a:	4418      	add	r0, r3
   d586c:	6060      	str	r0, [r4, #4]
   d586e:	bd70      	pop	{r4, r5, r6, pc}
   d5870:	000e7632 	.word	0x000e7632

000d5874 <_Z15checkI2CDevicesP6StringPhjPb>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d5874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      error = Wire.endTransmission();
    }

    String msg = "Device "+ i2cNames[i] + " address:0x" + String(address, HEX);
    result = i2cExists[i] = (error == 0);
    msg += result ? " FOUND\n" : " NOT FOUND\n";
   d5878:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d5944 <_Z15checkI2CDevicesP6StringPhjPb+0xd0>
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
   d587c:	b08d      	sub	sp, #52	; 0x34
   d587e:	4606      	mov	r6, r0
   d5880:	461c      	mov	r4, r3
   d5882:	f101 38ff 	add.w	r8, r1, #4294967295
   d5886:	eb03 0a02 	add.w	sl, r3, r2
  byte error, address;
  bool result = true;
   d588a:	2501      	movs	r5, #1
  for (size_t i=0; i<i2cLength; ++i)
   d588c:	4554      	cmp	r4, sl
   d588e:	d04f      	beq.n	d5930 <_Z15checkI2CDevicesP6StringPhjPb+0xbc>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d5890:	f818 7f01 	ldrb.w	r7, [r8, #1]!
    Wire.beginTransmission(address);
   d5894:	f007 fe4c 	bl	dd530 <_Z19__fetch_global_Wirev>
   d5898:	4639      	mov	r1, r7
   d589a:	f006 f96e 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d589e:	f007 fe47 	bl	dd530 <_Z19__fetch_global_Wirev>
   d58a2:	f006 f975 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>

    if (!error==0)
   d58a6:	4605      	mov	r5, r0
   d58a8:	b168      	cbz	r0, d58c6 <_Z15checkI2CDevicesP6StringPhjPb+0x52>
    {
      Wire.reset();
   d58aa:	f007 fe41 	bl	dd530 <_Z19__fetch_global_Wirev>
   d58ae:	f006 f976 	bl	dbb9e <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d58b2:	f007 fe3d 	bl	dd530 <_Z19__fetch_global_Wirev>
   d58b6:	4639      	mov	r1, r7
   d58b8:	f006 f95f 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d58bc:	f007 fe38 	bl	dd530 <_Z19__fetch_global_Wirev>
   d58c0:	f006 f966 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
   d58c4:	4605      	mov	r5, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d58c6:	491c      	ldr	r1, [pc, #112]	; (d5938 <_Z15checkI2CDevicesP6StringPhjPb+0xc4>)
   d58c8:	a804      	add	r0, sp, #16
   d58ca:	f007 fc9a 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
    }

    String msg = "Device "+ i2cNames[i] + " address:0x" + String(address, HEX);
   d58ce:	4631      	mov	r1, r6
   d58d0:	a804      	add	r0, sp, #16
   d58d2:	f007 fd6c 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d58d6:	4919      	ldr	r1, [pc, #100]	; (d593c <_Z15checkI2CDevicesP6StringPhjPb+0xc8>)
   d58d8:	f007 fd75 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d58dc:	2210      	movs	r2, #16
   d58de:	4683      	mov	fp, r0
   d58e0:	4639      	mov	r1, r7
   d58e2:	a808      	add	r0, sp, #32
   d58e4:	f007 fcf0 	bl	dd2c8 <_ZN6StringC1Ehh>
   d58e8:	a908      	add	r1, sp, #32
   d58ea:	4658      	mov	r0, fp
   d58ec:	f007 fd5f 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d58f0:	4601      	mov	r1, r0
   d58f2:	4668      	mov	r0, sp
   d58f4:	f007 fcc4 	bl	dd280 <_ZN6StringC1ERKS_>
   d58f8:	a808      	add	r0, sp, #32
   d58fa:	f007 fc3b 	bl	dd174 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d58fe:	a804      	add	r0, sp, #16
   d5900:	f007 fc38 	bl	dd174 <_ZN6StringD1Ev>
    result = i2cExists[i] = (error == 0);
   d5904:	2d00      	cmp	r5, #0
   d5906:	bf0c      	ite	eq
   d5908:	2501      	moveq	r5, #1
   d590a:	2500      	movne	r5, #0
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d590c:	490c      	ldr	r1, [pc, #48]	; (d5940 <_Z15checkI2CDevicesP6StringPhjPb+0xcc>)
   d590e:	f804 5b01 	strb.w	r5, [r4], #1
   d5912:	bf18      	it	ne
   d5914:	4649      	movne	r1, r9
   d5916:	4668      	mov	r0, sp
   d5918:	f007 fd12 	bl	dd340 <_ZN6String6concatEPKc>
    msg += result ? " FOUND\n" : " NOT FOUND\n";
    debug(msg);
   d591c:	f007 f9ec 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5920:	9900      	ldr	r1, [sp, #0]
   d5922:	f007 f826 	bl	dc972 <_ZN5Print5printEPKc>
      Wire.reset();
      Wire.beginTransmission(address);
      error = Wire.endTransmission();
    }

    String msg = "Device "+ i2cNames[i] + " address:0x" + String(address, HEX);
   d5926:	4668      	mov	r0, sp
   d5928:	f007 fc24 	bl	dd174 <_ZN6StringD1Ev>
   d592c:	3610      	adds	r6, #16
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices(String i2cNames[], byte i2cAddr[], size_t i2cLength, bool i2cExists[])
{
  byte error, address;
  bool result = true;
  for (size_t i=0; i<i2cLength; ++i)
   d592e:	e7ad      	b.n	d588c <_Z15checkI2CDevicesP6StringPhjPb+0x18>
    result = i2cExists[i] = (error == 0);
    msg += result ? " FOUND\n" : " NOT FOUND\n";
    debug(msg);
  }
  return result;
}
   d5930:	4628      	mov	r0, r5
   d5932:	b00d      	add	sp, #52	; 0x34
   d5934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5938:	000e7642 	.word	0x000e7642
   d593c:	000e764a 	.word	0x000e764a
   d5940:	000e763a 	.word	0x000e763a
   d5944:	000e7636 	.word	0x000e7636

000d5948 <_Z9saveStatev>:
  debug("\n");
  readingCount++;
}

void saveState()
{
   d5948:	b510      	push	{r4, lr}
  // EEPROM.put(0, state);
  debug("Saving State\n");
   d594a:	f007 f9d5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d594e:	4906      	ldr	r1, [pc, #24]	; (d5968 <_Z9saveStatev+0x20>)
   d5950:	f007 f80f 	bl	dc972 <_ZN5Print5printEPKc>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
        return t;
    }

    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5954:	f240 432c 	movw	r3, #1068	; 0x42c
   d5958:	4a04      	ldr	r2, [pc, #16]	; (d596c <_Z9saveStatev+0x24>)
   d595a:	4805      	ldr	r0, [pc, #20]	; (d5970 <_Z9saveStatev+0x28>)
   d595c:	2100      	movs	r1, #0
  fram.put(0,state);
}
   d595e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5962:	f004 bdbc 	b.w	da4de <_ZN10MB85RC256V9writeDataEjPKhj>
   d5966:	bf00      	nop
   d5968:	000e769f 	.word	0x000e769f
   d596c:	2003db78 	.word	0x2003db78
   d5970:	2003d7e8 	.word	0x2003d7e8

000d5974 <_Z9loadStatev>:

void loadState()
{
   d5974:	b510      	push	{r4, lr}
  // EEPROM.get(0, state);
  debug("Loading State\n");
   d5976:	f007 f9bf 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d597a:	4906      	ldr	r1, [pc, #24]	; (d5994 <_Z9loadStatev+0x20>)
   d597c:	f006 fff9 	bl	dc972 <_ZN5Print5printEPKc>
	inline size_t length() { return MEMORY_SIZE; }

	bool erase();

    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5980:	f240 432c 	movw	r3, #1068	; 0x42c
   d5984:	4a04      	ldr	r2, [pc, #16]	; (d5998 <_Z9loadStatev+0x24>)
   d5986:	4805      	ldr	r0, [pc, #20]	; (d599c <_Z9loadStatev+0x28>)
   d5988:	2100      	movs	r1, #0
  fram.get(0,state);
}
   d598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d598e:	f004 bd59 	b.w	da444 <_ZN10MB85RC256V8readDataEjPhj>
   d5992:	bf00      	nop
   d5994:	000e76ad 	.word	0x000e76ad
   d5998:	2003db78 	.word	0x2003db78
   d599c:	2003d7e8 	.word	0x2003d7e8

000d59a0 <BlynkWidgetWriteInternalPinADIS>:
  appConnected = true;
  setAppWidgets();
  debug("Connected\n");
}

BLYNK_APP_DISCONNECTED() {
   d59a0:	b508      	push	{r3, lr}
// Your code here
 appConnected = false;
   d59a2:	4b05      	ldr	r3, [pc, #20]	; (d59b8 <BlynkWidgetWriteInternalPinADIS+0x18>)
   d59a4:	2200      	movs	r2, #0
   d59a6:	701a      	strb	r2, [r3, #0]
 debug("Disconnected\n");
   d59a8:	f007 f9a6 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d59ac:	4903      	ldr	r1, [pc, #12]	; (d59bc <BlynkWidgetWriteInternalPinADIS+0x1c>)
}
   d59ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

BLYNK_APP_DISCONNECTED() {
// Your code here
 appConnected = false;
 debug("Disconnected\n");
   d59b2:	f006 bfde 	b.w	dc972 <_ZN5Print5printEPKc>
   d59b6:	bf00      	nop
   d59b8:	2003db38 	.word	0x2003db38
   d59bc:	000e76bc 	.word	0x000e76bc

000d59c0 <BlynkWidgetWrite16>:
    runExpression(state.expression);
  }
}

BLYNK_WRITE(V16) //Email Expression
{
   d59c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d59c2:	6809      	ldr	r1, [r1, #0]
   d59c4:	4668      	mov	r0, sp
   d59c6:	f007 fc1c 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d59ca:	4668      	mov	r0, sp
   d59cc:	f007 fd5b 	bl	dd486 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.email,_email.c_str());
   d59d0:	9900      	ldr	r1, [sp, #0]
   d59d2:	4805      	ldr	r0, [pc, #20]	; (d59e8 <BlynkWidgetWrite16+0x28>)
   d59d4:	f00e fd82 	bl	e44dc <strcpy>
    saveState();
   d59d8:	f7ff ffb6 	bl	d5948 <_Z9saveStatev>
  }
}

BLYNK_WRITE(V16) //Email Expression
{
  String _email = param.asStr();
   d59dc:	4668      	mov	r0, sp
   d59de:	f007 fbc9 	bl	dd174 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V16, "Invalid address");
  }
  
}
   d59e2:	b005      	add	sp, #20
   d59e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d59e8:	2003dc88 	.word	0x2003dc88

000d59ec <BlynkWidgetWrite18>:

BLYNK_WRITE(V18) //Email Expression
{
   d59ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d59ee:	6809      	ldr	r1, [r1, #0]
   d59f0:	4668      	mov	r0, sp
   d59f2:	f007 fc06 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d59f6:	4668      	mov	r0, sp
   d59f8:	f007 fd45 	bl	dd486 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.batEmail,_email.c_str());
   d59fc:	9900      	ldr	r1, [sp, #0]
   d59fe:	4805      	ldr	r0, [pc, #20]	; (d5a14 <BlynkWidgetWrite18+0x28>)
   d5a00:	f00e fd6c 	bl	e44dc <strcpy>
    saveState();
   d5a04:	f7ff ffa0 	bl	d5948 <_Z9saveStatev>
  
}

BLYNK_WRITE(V18) //Email Expression
{
  String _email = param.asStr();
   d5a08:	4668      	mov	r0, sp
   d5a0a:	f007 fbb3 	bl	dd174 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V18, "Invalid address");
  }
  
}
   d5a0e:	b005      	add	sp, #20
   d5a10:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a14:	2003dd88 	.word	0x2003dd88

000d5a18 <BlynkWidgetWrite26>:

BLYNK_WRITE(V26) //Email Expression
{
   d5a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _email = param.asStr();
   d5a1a:	6809      	ldr	r1, [r1, #0]
   d5a1c:	4668      	mov	r0, sp
   d5a1e:	f007 fbf0 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  //Add validation later
  bool checkEmail = true;
  _email.toLowerCase();
   d5a22:	4668      	mov	r0, sp
   d5a24:	f007 fd2f 	bl	dd486 <_ZN6String11toLowerCaseEv>
  if (checkEmail)
  {
    strcpy(state.tamperEmail,_email.c_str());
   d5a28:	9900      	ldr	r1, [sp, #0]
   d5a2a:	4805      	ldr	r0, [pc, #20]	; (d5a40 <BlynkWidgetWrite26+0x28>)
   d5a2c:	f00e fd56 	bl	e44dc <strcpy>
    saveState();
   d5a30:	f7ff ff8a 	bl	d5948 <_Z9saveStatev>
  
}

BLYNK_WRITE(V26) //Email Expression
{
  String _email = param.asStr();
   d5a34:	4668      	mov	r0, sp
   d5a36:	f007 fb9d 	bl	dd174 <_ZN6StringD1Ev>
  else
  {
    Blynk.virtualWrite(V26, "Invalid address");
  }
  
}
   d5a3a:	b005      	add	sp, #20
   d5a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a40:	2003de88 	.word	0x2003de88

000d5a44 <BlynkWidgetWrite25>:
  System.reset();
}

//Battery threshold
BLYNK_WRITE(V25) 
{
   d5a44:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
   d5a46:	6808      	ldr	r0, [r1, #0]
   d5a48:	f00e f99e 	bl	e3d88 <atof>
  float thresh = param.asFloat();
  state.batThreshold=thresh;
   d5a4c:	ec51 0b10 	vmov	r0, r1, d0
   d5a50:	f00d ff5e 	bl	e3910 <__aeabi_d2f>
   d5a54:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <BlynkWidgetWrite25+0x1c>)
   d5a56:	6018      	str	r0, [r3, #0]
  saveState();
}
   d5a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//Battery threshold
BLYNK_WRITE(V25) 
{
  float thresh = param.asFloat();
  state.batThreshold=thresh;
  saveState();
   d5a5c:	f7ff bf74 	b.w	d5948 <_Z9saveStatev>
   d5a60:	2003df88 	.word	0x2003df88

000d5a64 <BlynkWidgetWrite17>:
}

BLYNK_WRITE(V17) 
{
   d5a64:	b538      	push	{r3, r4, r5, lr}
  #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5a66:	4c12      	ldr	r4, [pc, #72]	; (d5ab0 <BlynkWidgetWrite17+0x4c>)
  state.batThreshold=thresh;
  saveState();
}

BLYNK_WRITE(V17) 
{
   d5a68:	460d      	mov	r5, r1
  #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5a6a:	8820      	ldrh	r0, [r4, #0]
   d5a6c:	2101      	movs	r1, #1
   d5a6e:	f007 fdcc 	bl	dd60a <digitalWrite>
    delay(5);
   d5a72:	2005      	movs	r0, #5
   d5a74:	f006 ff54 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5a78:	2100      	movs	r1, #0
   d5a7a:	8820      	ldrh	r0, [r4, #0]
   d5a7c:	f007 fdc5 	bl	dd60a <digitalWrite>
    delay(200);  
   d5a80:	20c8      	movs	r0, #200	; 0xc8
   d5a82:	f006 ff4d 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5a86:	2101      	movs	r1, #1
   d5a88:	8820      	ldrh	r0, [r4, #0]
   d5a8a:	f007 fdbe 	bl	dd60a <digitalWrite>
    delay(5);
   d5a8e:	2005      	movs	r0, #5
   d5a90:	f006 ff46 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5a94:	2100      	movs	r1, #0
   d5a96:	8820      	ldrh	r0, [r4, #0]
   d5a98:	f007 fdb7 	bl	dd60a <digitalWrite>
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d5a9c:	6828      	ldr	r0, [r5, #0]
   d5a9e:	f00e f976 	bl	e3d8e <atoi>
   d5aa2:	4b04      	ldr	r3, [pc, #16]	; (d5ab4 <BlynkWidgetWrite17+0x50>)
  #endif
  if (param.asInt()==1)
   d5aa4:	2801      	cmp	r0, #1
  {
    terminalDebug = false;
   d5aa6:	bf0c      	ite	eq
   d5aa8:	2200      	moveq	r2, #0
  }
  else
  {
    terminalDebug = true;
   d5aaa:	2201      	movne	r2, #1
   d5aac:	701a      	strb	r2, [r3, #0]
   d5aae:	bd38      	pop	{r3, r4, r5, pc}
   d5ab0:	2003d678 	.word	0x2003d678
   d5ab4:	2003db39 	.word	0x2003db39

000d5ab8 <BlynkWidgetWrite23>:
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d5ab8:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5aba:	4c1a      	ldr	r4, [pc, #104]	; (d5b24 <BlynkWidgetWrite23+0x6c>)
  }
}

// Update time zone
BLYNK_WRITE(V23) 
{
   d5abc:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5abe:	8820      	ldrh	r0, [r4, #0]
   d5ac0:	2101      	movs	r1, #1
   d5ac2:	f007 fda2 	bl	dd60a <digitalWrite>
    delay(5);
   d5ac6:	2005      	movs	r0, #5
   d5ac8:	f006 ff2a 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5acc:	2100      	movs	r1, #0
   d5ace:	8820      	ldrh	r0, [r4, #0]
   d5ad0:	f007 fd9b 	bl	dd60a <digitalWrite>
    delay(200);  
   d5ad4:	20c8      	movs	r0, #200	; 0xc8
   d5ad6:	f006 ff23 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5ada:	2101      	movs	r1, #1
   d5adc:	8820      	ldrh	r0, [r4, #0]
   d5ade:	f007 fd94 	bl	dd60a <digitalWrite>
    delay(5);
   d5ae2:	2005      	movs	r0, #5
   d5ae4:	f006 ff1c 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5ae8:	2100      	movs	r1, #0
   d5aea:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.deviceZone=param.asInt();
   d5aec:	4c0e      	ldr	r4, [pc, #56]	; (d5b28 <BlynkWidgetWrite23+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5aee:	f007 fd8c 	bl	dd60a <digitalWrite>
   d5af2:	6828      	ldr	r0, [r5, #0]
   d5af4:	f00e f94b 	bl	e3d8e <atoi>
    #endif
    state.deviceZone=param.asInt();
   d5af8:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
#ifdef KURTDEBUG
    debug("*****Device Zone value is: ");
   d5afc:	f007 f8fc 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5b00:	490a      	ldr	r1, [pc, #40]	; (d5b2c <BlynkWidgetWrite23+0x74>)
   d5b02:	f006 ff36 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.deviceZone + "\n");
   d5b06:	f007 f8f7 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5b0a:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
   d5b0e:	4908      	ldr	r1, [pc, #32]	; (d5b30 <BlynkWidgetWrite23+0x78>)
   d5b10:	4419      	add	r1, r3
   d5b12:	f006 ff2e 	bl	dc972 <_ZN5Print5printEPKc>
#endif
    gmtOffsetValid=false;
   d5b16:	4b07      	ldr	r3, [pc, #28]	; (d5b34 <BlynkWidgetWrite23+0x7c>)
   d5b18:	2200      	movs	r2, #0
   d5b1a:	701a      	strb	r2, [r3, #0]
  saveState();
}
   d5b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#ifdef KURTDEBUG
    debug("*****Device Zone value is: ");
    debug(state.deviceZone + "\n");
#endif
    gmtOffsetValid=false;
  saveState();
   d5b20:	f7ff bf12 	b.w	d5948 <_Z9saveStatev>
   d5b24:	2003d678 	.word	0x2003d678
   d5b28:	2003db78 	.word	0x2003db78
   d5b2c:	000e76ca 	.word	0x000e76ca
   d5b30:	000e7962 	.word	0x000e7962
   d5b34:	2003e060 	.word	0x2003e060

000d5b38 <BlynkWidgetWrite24>:
}
// Update buzzerTamper flag
BLYNK_WRITE(V24) 
{
   d5b38:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5b3a:	4c1a      	ldr	r4, [pc, #104]	; (d5ba4 <BlynkWidgetWrite24+0x6c>)
    gmtOffsetValid=false;
  saveState();
}
// Update buzzerTamper flag
BLYNK_WRITE(V24) 
{
   d5b3c:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5b3e:	8820      	ldrh	r0, [r4, #0]
   d5b40:	2101      	movs	r1, #1
   d5b42:	f007 fd62 	bl	dd60a <digitalWrite>
    delay(5);
   d5b46:	2005      	movs	r0, #5
   d5b48:	f006 feea 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5b4c:	2100      	movs	r1, #0
   d5b4e:	8820      	ldrh	r0, [r4, #0]
   d5b50:	f007 fd5b 	bl	dd60a <digitalWrite>
    delay(200);  
   d5b54:	20c8      	movs	r0, #200	; 0xc8
   d5b56:	f006 fee3 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5b5a:	2101      	movs	r1, #1
   d5b5c:	8820      	ldrh	r0, [r4, #0]
   d5b5e:	f007 fd54 	bl	dd60a <digitalWrite>
    delay(5);
   d5b62:	2005      	movs	r0, #5
   d5b64:	f006 fedc 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5b68:	2100      	movs	r1, #0
   d5b6a:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.buzzerTamper=param.asInt();
   d5b6c:	4c0e      	ldr	r4, [pc, #56]	; (d5ba8 <BlynkWidgetWrite24+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5b6e:	f007 fd4c 	bl	dd60a <digitalWrite>
   d5b72:	6828      	ldr	r0, [r5, #0]
   d5b74:	f00e f90b 	bl	e3d8e <atoi>
    #endif
    state.buzzerTamper=param.asInt();
   d5b78:	3000      	adds	r0, #0
   d5b7a:	bf18      	it	ne
   d5b7c:	2001      	movne	r0, #1
   d5b7e:	f884 0417 	strb.w	r0, [r4, #1047]	; 0x417
  saveState();
   d5b82:	f7ff fee1 	bl	d5948 <_Z9saveStatev>

#ifdef KURTDEBUG
    debug("*****Update buzzerTamper flag value is: ");
   d5b86:	f007 f8b7 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5b8a:	4908      	ldr	r1, [pc, #32]	; (d5bac <BlynkWidgetWrite24+0x74>)
   d5b8c:	f006 fef1 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.buzzerTamper + "\n");
   d5b90:	f007 f8b2 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5b94:	f894 3417 	ldrb.w	r3, [r4, #1047]	; 0x417
   d5b98:	4905      	ldr	r1, [pc, #20]	; (d5bb0 <BlynkWidgetWrite24+0x78>)
   d5b9a:	4419      	add	r1, r3
#endif
}
   d5b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    state.buzzerTamper=param.asInt();
  saveState();

#ifdef KURTDEBUG
    debug("*****Update buzzerTamper flag value is: ");
    debug(state.buzzerTamper + "\n");
   d5ba0:	f006 bee7 	b.w	dc972 <_ZN5Print5printEPKc>
   d5ba4:	2003d678 	.word	0x2003d678
   d5ba8:	2003db78 	.word	0x2003db78
   d5bac:	000e76e6 	.word	0x000e76e6
   d5bb0:	000e7962 	.word	0x000e7962

000d5bb4 <BlynkWidgetWrite27>:
#endif
}
// Update buzzerVapor flag
BLYNK_WRITE(V27) 
{
   d5bb4:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5bb6:	4c1a      	ldr	r4, [pc, #104]	; (d5c20 <BlynkWidgetWrite27+0x6c>)
    debug(state.buzzerTamper + "\n");
#endif
}
// Update buzzerVapor flag
BLYNK_WRITE(V27) 
{
   d5bb8:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5bba:	8820      	ldrh	r0, [r4, #0]
   d5bbc:	2101      	movs	r1, #1
   d5bbe:	f007 fd24 	bl	dd60a <digitalWrite>
    delay(5);
   d5bc2:	2005      	movs	r0, #5
   d5bc4:	f006 feac 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5bc8:	2100      	movs	r1, #0
   d5bca:	8820      	ldrh	r0, [r4, #0]
   d5bcc:	f007 fd1d 	bl	dd60a <digitalWrite>
    delay(200);  
   d5bd0:	20c8      	movs	r0, #200	; 0xc8
   d5bd2:	f006 fea5 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5bd6:	2101      	movs	r1, #1
   d5bd8:	8820      	ldrh	r0, [r4, #0]
   d5bda:	f007 fd16 	bl	dd60a <digitalWrite>
    delay(5);
   d5bde:	2005      	movs	r0, #5
   d5be0:	f006 fe9e 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5be4:	2100      	movs	r1, #0
   d5be6:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.buzzerVapor=param.asInt();
   d5be8:	4c0e      	ldr	r4, [pc, #56]	; (d5c24 <BlynkWidgetWrite27+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5bea:	f007 fd0e 	bl	dd60a <digitalWrite>
   d5bee:	6828      	ldr	r0, [r5, #0]
   d5bf0:	f00e f8cd 	bl	e3d8e <atoi>
    #endif
    state.buzzerVapor=param.asInt();
   d5bf4:	3000      	adds	r0, #0
   d5bf6:	bf18      	it	ne
   d5bf8:	2001      	movne	r0, #1
   d5bfa:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
  saveState();
   d5bfe:	f7ff fea3 	bl	d5948 <_Z9saveStatev>
#ifdef KURTDEBUG
    debug("*****Update buzzerVapor flag value is: ");
   d5c02:	f007 f879 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5c06:	4908      	ldr	r1, [pc, #32]	; (d5c28 <BlynkWidgetWrite27+0x74>)
   d5c08:	f006 feb3 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.buzzerVapor + "\n");
   d5c0c:	f007 f874 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5c10:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   d5c14:	4905      	ldr	r1, [pc, #20]	; (d5c2c <BlynkWidgetWrite27+0x78>)
   d5c16:	4419      	add	r1, r3
#endif
}
   d5c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    #endif
    state.buzzerVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    debug("*****Update buzzerVapor flag value is: ");
    debug(state.buzzerVapor + "\n");
   d5c1c:	f006 bea9 	b.w	dc972 <_ZN5Print5printEPKc>
   d5c20:	2003d678 	.word	0x2003d678
   d5c24:	2003db78 	.word	0x2003db78
   d5c28:	000e770f 	.word	0x000e770f
   d5c2c:	000e7962 	.word	0x000e7962

000d5c30 <BlynkWidgetWrite28>:
#endif
}
// Update notifyVapor flag
BLYNK_WRITE(V28) 
{
   d5c30:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5c32:	4c1a      	ldr	r4, [pc, #104]	; (d5c9c <BlynkWidgetWrite28+0x6c>)
    debug(state.buzzerVapor + "\n");
#endif
}
// Update notifyVapor flag
BLYNK_WRITE(V28) 
{
   d5c34:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5c36:	8820      	ldrh	r0, [r4, #0]
   d5c38:	2101      	movs	r1, #1
   d5c3a:	f007 fce6 	bl	dd60a <digitalWrite>
    delay(5);
   d5c3e:	2005      	movs	r0, #5
   d5c40:	f006 fe6e 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5c44:	2100      	movs	r1, #0
   d5c46:	8820      	ldrh	r0, [r4, #0]
   d5c48:	f007 fcdf 	bl	dd60a <digitalWrite>
    delay(200);  
   d5c4c:	20c8      	movs	r0, #200	; 0xc8
   d5c4e:	f006 fe67 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5c52:	2101      	movs	r1, #1
   d5c54:	8820      	ldrh	r0, [r4, #0]
   d5c56:	f007 fcd8 	bl	dd60a <digitalWrite>
    delay(5);
   d5c5a:	2005      	movs	r0, #5
   d5c5c:	f006 fe60 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5c60:	2100      	movs	r1, #0
   d5c62:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.notifyVapor=param.asInt();
   d5c64:	4c0e      	ldr	r4, [pc, #56]	; (d5ca0 <BlynkWidgetWrite28+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5c66:	f007 fcd0 	bl	dd60a <digitalWrite>
   d5c6a:	6828      	ldr	r0, [r5, #0]
   d5c6c:	f00e f88f 	bl	e3d8e <atoi>
    #endif
    state.notifyVapor=param.asInt();
   d5c70:	3000      	adds	r0, #0
   d5c72:	bf18      	it	ne
   d5c74:	2001      	movne	r0, #1
   d5c76:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
  saveState();
   d5c7a:	f7ff fe65 	bl	d5948 <_Z9saveStatev>
#ifdef KURTDEBUG
    debug("*****Update notifyVapor flag value is: ");
   d5c7e:	f007 f83b 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5c82:	4908      	ldr	r1, [pc, #32]	; (d5ca4 <BlynkWidgetWrite28+0x74>)
   d5c84:	f006 fe75 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.notifyVapor + "\n");
   d5c88:	f007 f836 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5c8c:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
   d5c90:	4905      	ldr	r1, [pc, #20]	; (d5ca8 <BlynkWidgetWrite28+0x78>)
   d5c92:	4419      	add	r1, r3
#endif
}
   d5c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    #endif
    state.notifyVapor=param.asInt();
  saveState();
#ifdef KURTDEBUG
    debug("*****Update notifyVapor flag value is: ");
    debug(state.notifyVapor + "\n");
   d5c98:	f006 be6b 	b.w	dc972 <_ZN5Print5printEPKc>
   d5c9c:	2003d678 	.word	0x2003d678
   d5ca0:	2003db78 	.word	0x2003db78
   d5ca4:	000e7737 	.word	0x000e7737
   d5ca8:	000e7962 	.word	0x000e7962

000d5cac <BlynkWidgetWrite29>:
#endif
}
// Update notifyTamper flag
BLYNK_WRITE(V29) 
{
   d5cac:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5cae:	4c1a      	ldr	r4, [pc, #104]	; (d5d18 <BlynkWidgetWrite29+0x6c>)
    debug(state.notifyVapor + "\n");
#endif
}
// Update notifyTamper flag
BLYNK_WRITE(V29) 
{
   d5cb0:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5cb2:	8820      	ldrh	r0, [r4, #0]
   d5cb4:	2101      	movs	r1, #1
   d5cb6:	f007 fca8 	bl	dd60a <digitalWrite>
    delay(5);
   d5cba:	2005      	movs	r0, #5
   d5cbc:	f006 fe30 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5cc0:	2100      	movs	r1, #0
   d5cc2:	8820      	ldrh	r0, [r4, #0]
   d5cc4:	f007 fca1 	bl	dd60a <digitalWrite>
    delay(200);  
   d5cc8:	20c8      	movs	r0, #200	; 0xc8
   d5cca:	f006 fe29 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5cce:	2101      	movs	r1, #1
   d5cd0:	8820      	ldrh	r0, [r4, #0]
   d5cd2:	f007 fc9a 	bl	dd60a <digitalWrite>
    delay(5);
   d5cd6:	2005      	movs	r0, #5
   d5cd8:	f006 fe22 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5cdc:	2100      	movs	r1, #0
   d5cde:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.notifyTamper=param.asInt();
   d5ce0:	4c0e      	ldr	r4, [pc, #56]	; (d5d1c <BlynkWidgetWrite29+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5ce2:	f007 fc92 	bl	dd60a <digitalWrite>
   d5ce6:	6828      	ldr	r0, [r5, #0]
   d5ce8:	f00e f851 	bl	e3d8e <atoi>
    #endif
    state.notifyTamper=param.asInt();
   d5cec:	3000      	adds	r0, #0
   d5cee:	bf18      	it	ne
   d5cf0:	2001      	movne	r0, #1
   d5cf2:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
  saveState();
   d5cf6:	f7ff fe27 	bl	d5948 <_Z9saveStatev>
#ifdef KURTDEBUG
    debug("*****Update notifyTamper flag value is: ");
   d5cfa:	f006 fffd 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5cfe:	4908      	ldr	r1, [pc, #32]	; (d5d20 <BlynkWidgetWrite29+0x74>)
   d5d00:	f006 fe37 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.notifyTamper + "\n");
   d5d04:	f006 fff8 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d08:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   d5d0c:	4905      	ldr	r1, [pc, #20]	; (d5d24 <BlynkWidgetWrite29+0x78>)
   d5d0e:	4419      	add	r1, r3
#endif
}
   d5d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    #endif
    state.notifyTamper=param.asInt();
  saveState();
#ifdef KURTDEBUG
    debug("*****Update notifyTamper flag value is: ");
    debug(state.notifyTamper + "\n");
   d5d14:	f006 be2d 	b.w	dc972 <_ZN5Print5printEPKc>
   d5d18:	2003d678 	.word	0x2003d678
   d5d1c:	2003db78 	.word	0x2003db78
   d5d20:	000e775f 	.word	0x000e775f
   d5d24:	000e7962 	.word	0x000e7962

000d5d28 <BlynkWidgetWrite31>:
#endif
}

//Accelerometer threshold
BLYNK_WRITE(V31) 
{
   d5d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d2a:	6808      	ldr	r0, [r1, #0]
  int thresh = param.asInt();
  int oldvalue=state.ActivityThreshold;
   d5d2c:	4c1e      	ldr	r4, [pc, #120]	; (d5da8 <BlynkWidgetWrite31+0x80>)

#ifdef KURTDEBUG
    debug("*****Update Accelerometer threshold value is: ");
    debug(thresh + "\n");
   d5d2e:	4d1f      	ldr	r5, [pc, #124]	; (d5dac <BlynkWidgetWrite31+0x84>)
   d5d30:	f00e f82d 	bl	e3d8e <atoi>

//Accelerometer threshold
BLYNK_WRITE(V31) 
{
  int thresh = param.asInt();
  int oldvalue=state.ActivityThreshold;
   d5d34:	f8d4 741c 	ldr.w	r7, [r4, #1052]	; 0x41c
   d5d38:	4606      	mov	r6, r0

#ifdef KURTDEBUG
    debug("*****Update Accelerometer threshold value is: ");
   d5d3a:	f006 ffdd 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d3e:	491c      	ldr	r1, [pc, #112]	; (d5db0 <BlynkWidgetWrite31+0x88>)
   d5d40:	f006 fe17 	bl	dc972 <_ZN5Print5printEPKc>
    debug(thresh + "\n");
   d5d44:	f006 ffd8 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d48:	19a9      	adds	r1, r5, r6
   d5d4a:	f006 fe12 	bl	dc972 <_ZN5Print5printEPKc>
#endif
  state.ActivityThreshold=100;
  if (thresh==3)
   d5d4e:	2e03      	cmp	r6, #3
   d5d50:	4623      	mov	r3, r4
   d5d52:	d101      	bne.n	d5d58 <BlynkWidgetWrite31+0x30>
  	state.ActivityThreshold=144;
   d5d54:	2290      	movs	r2, #144	; 0x90
   d5d56:	e003      	b.n	d5d60 <BlynkWidgetWrite31+0x38>
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
   d5d58:	2e01      	cmp	r6, #1

#ifdef KURTDEBUG
    debug("*****Update Accelerometer threshold value is: ");
    debug(thresh + "\n");
#endif
  state.ActivityThreshold=100;
   d5d5a:	bf14      	ite	ne
   d5d5c:	2264      	movne	r2, #100	; 0x64
  if (thresh==3)
  	state.ActivityThreshold=144;
  if (thresh==2)
  	state.ActivityThreshold=100;
  if (thresh==1)
  	state.ActivityThreshold=72;
   d5d5e:	2248      	moveq	r2, #72	; 0x48
   d5d60:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  // If value changed since the acceleromter will need to be reinitalized save the new value and reset
  if (state.ActivityThreshold != oldvalue)
   d5d64:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   d5d68:	429f      	cmp	r7, r3
   d5d6a:	d01b      	beq.n	d5da4 <BlynkWidgetWrite31+0x7c>
  {
#ifdef KURTDEBUG
    debug("Update Accelerometer value is: ");
   d5d6c:	f006 ffc4 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d70:	4910      	ldr	r1, [pc, #64]	; (d5db4 <BlynkWidgetWrite31+0x8c>)
   d5d72:	f006 fdfe 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.ActivityThreshold + "\n");
   d5d76:	f006 ffbf 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d7a:	4b0b      	ldr	r3, [pc, #44]	; (d5da8 <BlynkWidgetWrite31+0x80>)
   d5d7c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   d5d80:	4429      	add	r1, r5
   d5d82:	f006 fdf6 	bl	dc972 <_ZN5Print5printEPKc>
    debug("Will reset system ");
   d5d86:	f006 ffb7 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5d8a:	490b      	ldr	r1, [pc, #44]	; (d5db8 <BlynkWidgetWrite31+0x90>)
   d5d8c:	f006 fdf1 	bl	dc972 <_ZN5Print5printEPKc>
#endif
    saveState();
   d5d90:	f7ff fdda 	bl	d5948 <_Z9saveStatev>
    delay(4000);
   d5d94:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d5d98:	f006 fdc2 	bl	dc920 <delay>
    System.reset();
  }
}
   d5d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    debug(state.ActivityThreshold + "\n");
    debug("Will reset system ");
#endif
    saveState();
    delay(4000);
    System.reset();
   d5da0:	f007 b888 	b.w	dceb4 <_ZN11SystemClass5resetEv>
   d5da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5da6:	bf00      	nop
   d5da8:	2003db78 	.word	0x2003db78
   d5dac:	000e7962 	.word	0x000e7962
   d5db0:	000e7788 	.word	0x000e7788
   d5db4:	000e77b7 	.word	0x000e77b7
   d5db8:	000e77d7 	.word	0x000e77d7

000d5dbc <BlynkWidgetWrite32>:
  }
}

// Update notifyBattery flag
BLYNK_WRITE(V32) 
{
   d5dbc:	b538      	push	{r3, r4, r5, lr}
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5dbe:	4c1a      	ldr	r4, [pc, #104]	; (d5e28 <BlynkWidgetWrite32+0x6c>)
  }
}

// Update notifyBattery flag
BLYNK_WRITE(V32) 
{
   d5dc0:	460d      	mov	r5, r1
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d5dc2:	8820      	ldrh	r0, [r4, #0]
   d5dc4:	2101      	movs	r1, #1
   d5dc6:	f007 fc20 	bl	dd60a <digitalWrite>
    delay(5);
   d5dca:	2005      	movs	r0, #5
   d5dcc:	f006 fda8 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5dd0:	2100      	movs	r1, #0
   d5dd2:	8820      	ldrh	r0, [r4, #0]
   d5dd4:	f007 fc19 	bl	dd60a <digitalWrite>
    delay(200);  
   d5dd8:	20c8      	movs	r0, #200	; 0xc8
   d5dda:	f006 fda1 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d5dde:	2101      	movs	r1, #1
   d5de0:	8820      	ldrh	r0, [r4, #0]
   d5de2:	f007 fc12 	bl	dd60a <digitalWrite>
    delay(5);
   d5de6:	2005      	movs	r0, #5
   d5de8:	f006 fd9a 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d5dec:	2100      	movs	r1, #0
   d5dee:	8820      	ldrh	r0, [r4, #0]
    #endif
    state.notifyBattery=param.asInt();
   d5df0:	4c0e      	ldr	r4, [pc, #56]	; (d5e2c <BlynkWidgetWrite32+0x70>)
    delay(5);
    digitalWrite(buzzer, LOW);
    delay(200);  
    digitalWrite(buzzer, HIGH);
    delay(5);
    digitalWrite(buzzer, LOW);
   d5df2:	f007 fc0a 	bl	dd60a <digitalWrite>
   d5df6:	6828      	ldr	r0, [r5, #0]
   d5df8:	f00d ffc9 	bl	e3d8e <atoi>
    #endif
    state.notifyBattery=param.asInt();
   d5dfc:	3000      	adds	r0, #0
   d5dfe:	bf18      	it	ne
   d5e00:	2001      	movne	r0, #1
   d5e02:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
  saveState();
   d5e06:	f7ff fd9f 	bl	d5948 <_Z9saveStatev>
#ifdef KURTDEBUG
    debug("Update notifyBattery flag value is: ");
   d5e0a:	f006 ff75 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5e0e:	4908      	ldr	r1, [pc, #32]	; (d5e30 <BlynkWidgetWrite32+0x74>)
   d5e10:	f006 fdaf 	bl	dc972 <_ZN5Print5printEPKc>
    debug(state.notifyBattery + "\n");
   d5e14:	f006 ff70 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5e18:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
   d5e1c:	4905      	ldr	r1, [pc, #20]	; (d5e34 <BlynkWidgetWrite32+0x78>)
   d5e1e:	4419      	add	r1, r3
#endif
}
   d5e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    #endif
    state.notifyBattery=param.asInt();
  saveState();
#ifdef KURTDEBUG
    debug("Update notifyBattery flag value is: ");
    debug(state.notifyBattery + "\n");
   d5e24:	f006 bda5 	b.w	dc972 <_ZN5Print5printEPKc>
   d5e28:	2003d678 	.word	0x2003d678
   d5e2c:	2003db78 	.word	0x2003db78
   d5e30:	000e77ea 	.word	0x000e77ea
   d5e34:	000e7962 	.word	0x000e7962

000d5e38 <_Z12alertChangedv>:
  } 
}

// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
   d5e38:	b508      	push	{r3, lr}
  if (currentAlert==state.lastAlert)
   d5e3a:	4b07      	ldr	r3, [pc, #28]	; (d5e58 <_Z12alertChangedv+0x20>)
   d5e3c:	781a      	ldrb	r2, [r3, #0]
   d5e3e:	4b07      	ldr	r3, [pc, #28]	; (d5e5c <_Z12alertChangedv+0x24>)
   d5e40:	f893 1414 	ldrb.w	r1, [r3, #1044]	; 0x414
   d5e44:	4291      	cmp	r1, r2
   d5e46:	d005      	beq.n	d5e54 <_Z12alertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.lastAlert=currentAlert;
   d5e48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    saveState();
   d5e4c:	f7ff fd7c 	bl	d5948 <_Z9saveStatev>
    return true;
   d5e50:	2001      	movs	r0, #1
   d5e52:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool alertChanged()
{
  if (currentAlert==state.lastAlert)
  {
    return false;
   d5e54:	2000      	movs	r0, #0
  {
    state.lastAlert=currentAlert;
    saveState();
    return true;
  }
}
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	2003e0e0 	.word	0x2003e0e0
   d5e5c:	2003db78 	.word	0x2003db78

000d5e60 <_Z15batAlertChangedv>:

// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
   d5e60:	b508      	push	{r3, lr}
  if (batCurrentAlert==state.batLastAlert)
   d5e62:	4b07      	ldr	r3, [pc, #28]	; (d5e80 <_Z15batAlertChangedv+0x20>)
   d5e64:	781a      	ldrb	r2, [r3, #0]
   d5e66:	4b07      	ldr	r3, [pc, #28]	; (d5e84 <_Z15batAlertChangedv+0x24>)
   d5e68:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
   d5e6c:	4291      	cmp	r1, r2
   d5e6e:	d005      	beq.n	d5e7c <_Z15batAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.batLastAlert=batCurrentAlert;
   d5e70:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    saveState();
   d5e74:	f7ff fd68 	bl	d5948 <_Z9saveStatev>
    return true;
   d5e78:	2001      	movs	r0, #1
   d5e7a:	bd08      	pop	{r3, pc}
// Checks if alert status changed and resets lastAlert if it has
bool batAlertChanged()
{
  if (batCurrentAlert==state.batLastAlert)
  {
    return false;
   d5e7c:	2000      	movs	r0, #0
  {
    state.batLastAlert=batCurrentAlert;
    saveState();
    return true;
  }
}
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	2003dfc5 	.word	0x2003dfc5
   d5e84:	2003db78 	.word	0x2003db78

000d5e88 <_Z18tamperAlertChangedv>:

// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
   d5e88:	b508      	push	{r3, lr}
  if (tamperCurrentAlert==state.tamperLastAlert)
   d5e8a:	4b07      	ldr	r3, [pc, #28]	; (d5ea8 <_Z18tamperAlertChangedv+0x20>)
   d5e8c:	781a      	ldrb	r2, [r3, #0]
   d5e8e:	4b07      	ldr	r3, [pc, #28]	; (d5eac <_Z18tamperAlertChangedv+0x24>)
   d5e90:	f893 1416 	ldrb.w	r1, [r3, #1046]	; 0x416
   d5e94:	4291      	cmp	r1, r2
   d5e96:	d005      	beq.n	d5ea4 <_Z18tamperAlertChangedv+0x1c>
  {
    return false;
  }
  else
  {
    state.tamperLastAlert=tamperCurrentAlert;
   d5e98:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    saveState();
   d5e9c:	f7ff fd54 	bl	d5948 <_Z9saveStatev>
    return true;
   d5ea0:	2001      	movs	r0, #1
   d5ea2:	bd08      	pop	{r3, pc}
// Checks if tamper alert status changed 
bool tamperAlertChanged()
{
  if (tamperCurrentAlert==state.tamperLastAlert)
  {
    return false;
   d5ea4:	2000      	movs	r0, #0
  {
    state.tamperLastAlert=tamperCurrentAlert;
    saveState();
    return true;
  }
}
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	2003dfc4 	.word	0x2003dfc4
   d5eac:	2003db78 	.word	0x2003db78

000d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5eb0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5eb2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5eb4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5eb6:	b17c      	cbz	r4, d5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5eb8:	6863      	ldr	r3, [r4, #4]
   d5eba:	3b01      	subs	r3, #1
   d5ebc:	6063      	str	r3, [r4, #4]
   d5ebe:	b95b      	cbnz	r3, d5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5ec0:	6823      	ldr	r3, [r4, #0]
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	689b      	ldr	r3, [r3, #8]
   d5ec6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ec8:	68a3      	ldr	r3, [r4, #8]
   d5eca:	3b01      	subs	r3, #1
   d5ecc:	60a3      	str	r3, [r4, #8]
   d5ece:	b91b      	cbnz	r3, d5ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5ed0:	6823      	ldr	r3, [r4, #0]
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	68db      	ldr	r3, [r3, #12]
   d5ed6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5ed8:	4628      	mov	r0, r5
   d5eda:	bd38      	pop	{r3, r4, r5, pc}

000d5edc <_Z23publishGMTOffsetRequestv>:
  }
  return connected;
}

void publishGMTOffsetRequest()
{
   d5edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Send to https://timezonedb.com webhook for gmtOffset
  debug("publishGMTOffsetRequest Device Zone value is: ");
  debug(state.deviceZone + "\n");
   d5ede:	4c1a      	ldr	r4, [pc, #104]	; (d5f48 <_Z23publishGMTOffsetRequestv+0x6c>)
}

void publishGMTOffsetRequest()
{
  // Send to https://timezonedb.com webhook for gmtOffset
  debug("publishGMTOffsetRequest Device Zone value is: ");
   d5ee0:	f006 ff0a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5ee4:	4919      	ldr	r1, [pc, #100]	; (d5f4c <_Z23publishGMTOffsetRequestv+0x70>)
   d5ee6:	f006 fd44 	bl	dc972 <_ZN5Print5printEPKc>
  debug(state.deviceZone + "\n");
   d5eea:	f006 ff05 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5eee:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
   d5ef2:	4917      	ldr	r1, [pc, #92]	; (d5f50 <_Z23publishGMTOffsetRequestv+0x74>)
   d5ef4:	4419      	add	r1, r3
   d5ef6:	f006 fd3c 	bl	dc972 <_ZN5Print5printEPKc>
  switch (state.deviceZone)
   d5efa:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d5efe:	4b15      	ldr	r3, [pc, #84]	; (d5f54 <_Z23publishGMTOffsetRequestv+0x78>)
   d5f00:	2200      	movs	r2, #0
   d5f02:	2903      	cmp	r1, #3
   d5f04:	d812      	bhi.n	d5f2c <_Z23publishGMTOffsetRequestv+0x50>
   d5f06:	e8df f001 	tbb	[pc, r1]
   d5f0a:	0211      	.short	0x0211
   d5f0c:	0c07      	.short	0x0c07
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5f0e:	781b      	ldrb	r3, [r3, #0]
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);
      break;
    case 1:
      // America/Chicago
      Particle.publish("gmtOffset", "America/Chicago", PRIVATE);
   d5f10:	f88d 2000 	strb.w	r2, [sp]
   d5f14:	4a10      	ldr	r2, [pc, #64]	; (d5f58 <_Z23publishGMTOffsetRequestv+0x7c>)
   d5f16:	e00d      	b.n	d5f34 <_Z23publishGMTOffsetRequestv+0x58>
   d5f18:	781b      	ldrb	r3, [r3, #0]
      break;
    case 2:
      // America/Phoenix
      Particle.publish("gmtOffset", "America/Phoenix", PRIVATE);
   d5f1a:	f88d 2000 	strb.w	r2, [sp]
   d5f1e:	4a0f      	ldr	r2, [pc, #60]	; (d5f5c <_Z23publishGMTOffsetRequestv+0x80>)
   d5f20:	e008      	b.n	d5f34 <_Z23publishGMTOffsetRequestv+0x58>
   d5f22:	781b      	ldrb	r3, [r3, #0]
      break;
    case 3:
      // America/Los_Angeles
      Particle.publish("gmtOffset", "America/Los_Angeles", PRIVATE);
   d5f24:	f88d 2000 	strb.w	r2, [sp]
   d5f28:	4a0d      	ldr	r2, [pc, #52]	; (d5f60 <_Z23publishGMTOffsetRequestv+0x84>)
   d5f2a:	e003      	b.n	d5f34 <_Z23publishGMTOffsetRequestv+0x58>
   d5f2c:	781b      	ldrb	r3, [r3, #0]
      break;
    default:
      // America/New_York
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
   d5f2e:	f88d 2000 	strb.w	r2, [sp]
   d5f32:	4a0c      	ldr	r2, [pc, #48]	; (d5f64 <_Z23publishGMTOffsetRequestv+0x88>)
   d5f34:	490c      	ldr	r1, [pc, #48]	; (d5f68 <_Z23publishGMTOffsetRequestv+0x8c>)
   d5f36:	a802      	add	r0, sp, #8
   d5f38:	f7ff fbc4 	bl	d56c4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.38>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f3c:	a803      	add	r0, sp, #12
   d5f3e:	f7ff ffb7 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d5f42:	b004      	add	sp, #16
   d5f44:	bd10      	pop	{r4, pc}
   d5f46:	bf00      	nop
   d5f48:	2003db78 	.word	0x2003db78
   d5f4c:	000e7850 	.word	0x000e7850
   d5f50:	000e7962 	.word	0x000e7962
   d5f54:	2003d818 	.word	0x2003d818
   d5f58:	000e7890 	.word	0x000e7890
   d5f5c:	000e78a0 	.word	0x000e78a0
   d5f60:	000e78b0 	.word	0x000e78b0
   d5f64:	000e787f 	.word	0x000e787f
   d5f68:	000e82e4 	.word	0x000e82e4

000d5f6c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d5f6c:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5f6e:	4b04      	ldr	r3, [pc, #16]	; (d5f80 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d5f70:	4604      	mov	r4, r0
   d5f72:	f840 3b18 	str.w	r3, [r0], #24
   d5f76:	f7ff ff9b 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	bd10      	pop	{r4, pc}
   d5f7e:	bf00      	nop
   d5f80:	000e8804 	.word	0x000e8804

000d5f84 <_ZN5Print7printlnItLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d5f84:	b538      	push	{r3, r4, r5, lr}
   d5f86:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d5f88:	b922      	cbnz	r2, d5f94 <_ZN5Print7printlnItLi0EEEjT_i+0x10>
        return write(n);
   d5f8a:	6803      	ldr	r3, [r0, #0]
   d5f8c:	b2c9      	uxtb	r1, r1
   d5f8e:	689b      	ldr	r3, [r3, #8]
   d5f90:	4798      	blx	r3
   d5f92:	e002      	b.n	d5f9a <_ZN5Print7printlnItLi0EEEjT_i+0x16>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5f94:	b2d2      	uxtb	r2, r2
   d5f96:	f006 fd09 	bl	dc9ac <_ZN5Print11printNumberEmh>
   d5f9a:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	f006 fcef 	bl	dc980 <_ZN5Print7printlnEv>
        return n;
    }
   d5fa2:	4420      	add	r0, r4
   d5fa4:	bd38      	pop	{r3, r4, r5, pc}

000d5fa6 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d5fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fa8:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d5faa:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d5fae:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d5fb0:	f00d f962 	bl	e3278 <__aeabi_f2d>
   d5fb4:	462a      	mov	r2, r5
   d5fb6:	e9cd 0100 	strd	r0, r1, [sp]
   d5fba:	2100      	movs	r1, #0
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	f006 fde2 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>
    }
   d5fc2:	b003      	add	sp, #12
   d5fc4:	bd30      	pop	{r4, r5, pc}

000d5fc6 <_ZN5Print5printIjLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d5fc6:	b410      	push	{r4}
{
    if (base == 0) {
   d5fc8:	b92a      	cbnz	r2, d5fd6 <_ZN5Print5printIjLi0EEEjT_i+0x10>
        return write(n);
   d5fca:	6803      	ldr	r3, [r0, #0]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d5fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d5fd0:	689b      	ldr	r3, [r3, #8]
   d5fd2:	b2c9      	uxtb	r1, r1
   d5fd4:	4718      	bx	r3
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5fd6:	b2d2      	uxtb	r2, r2
    }
}
   d5fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5fdc:	f006 bce6 	b.w	dc9ac <_ZN5Print11printNumberEmh>

000d5fe0 <_ZL14BLYNK_LOG_TIMEv>:
                                            BLYNK_PRINT.print(ip[2]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.print(ip[1]); BLYNK_PRINT.print('.');  \
                                            BLYNK_PRINT.println(ip[0]); }

        static
        void BLYNK_LOG_TIME() {
   d5fe0:	b510      	push	{r4, lr}
            BLYNK_PRINT.print('[');
   d5fe2:	f006 fe89 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5fe6:	215b      	movs	r1, #91	; 0x5b
   d5fe8:	f006 fcc7 	bl	dc97a <_ZN5Print5printEc>
            BLYNK_PRINT.print(BlynkMillis());
   d5fec:	f006 fe84 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	f003 fbfb 	bl	d97ec <_Z11BlynkMillisv>
   d5ff6:	220a      	movs	r2, #10
   d5ff8:	4601      	mov	r1, r0
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7ff ffe3 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
            BLYNK_PRINT.print(BLYNK_F("] "));
   d6000:	f006 fe7a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6004:	4902      	ldr	r1, [pc, #8]	; (d6010 <_ZL14BLYNK_LOG_TIMEv+0x30>)
        }
   d6006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        static
        void BLYNK_LOG_TIME() {
            BLYNK_PRINT.print('[');
            BLYNK_PRINT.print(BlynkMillis());
            BLYNK_PRINT.print(BLYNK_F("] "));
   d600a:	f006 bcb2 	b.w	dc972 <_ZN5Print5printEPKc>
   d600e:	bf00      	nop
   d6010:	000e78c4 	.word	0x000e78c4

000d6014 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>:
        #include <ctype.h>
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
   d6014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6016:	4604      	mov	r4, r0
   d6018:	460e      	mov	r6, r1
   d601a:	4617      	mov	r7, r2
            if (len) {
                BLYNK_LOG_TIME();
   d601c:	f7ff ffe0 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
                BLYNK_PRINT.print(msg);
   d6020:	f006 fe6a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6024:	4621      	mov	r1, r4
   d6026:	f006 fca4 	bl	dc972 <_ZN5Print5printEPKc>
   d602a:	4437      	add	r7, r6
                int l2 = len;
                const uint8_t* octets = (const uint8_t*)addr;
                bool prev_print = true;
   d602c:	2401      	movs	r4, #1
                while (l2--) {
   d602e:	42be      	cmp	r6, r7
   d6030:	d028      	beq.n	d6084 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x70>
                    const uint8_t c = *octets++ & 0xFF;
   d6032:	f816 5b01 	ldrb.w	r5, [r6], #1
                    if (c >= 32 && c < 127) {
   d6036:	f1a5 0320 	sub.w	r3, r5, #32
   d603a:	2b5e      	cmp	r3, #94	; 0x5e
   d603c:	d80b      	bhi.n	d6056 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x42>
                        if (!prev_print) { BLYNK_PRINT.print(']'); }
   d603e:	b924      	cbnz	r4, d604a <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x36>
   d6040:	f006 fe5a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6044:	215d      	movs	r1, #93	; 0x5d
   d6046:	f006 fc98 	bl	dc97a <_ZN5Print5printEc>
                        BLYNK_PRINT.print((char)c);
   d604a:	f006 fe55 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d604e:	4629      	mov	r1, r5
   d6050:	f006 fc93 	bl	dc97a <_ZN5Print5printEc>
   d6054:	e7ea      	b.n	d602c <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x18>
                        prev_print = true;
                    } else {
                        BLYNK_PRINT.print(prev_print?'[':'|');
   d6056:	f006 fe4f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d605a:	2c00      	cmp	r4, #0
   d605c:	bf14      	ite	ne
   d605e:	215b      	movne	r1, #91	; 0x5b
   d6060:	217c      	moveq	r1, #124	; 0x7c
   d6062:	f006 fc8a 	bl	dc97a <_ZN5Print5printEc>
                        if (c < 0x10) { BLYNK_PRINT.print('0'); }
   d6066:	2d0f      	cmp	r5, #15
   d6068:	d804      	bhi.n	d6074 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x60>
   d606a:	f006 fe45 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d606e:	2130      	movs	r1, #48	; 0x30
   d6070:	f006 fc83 	bl	dc97a <_ZN5Print5printEc>
                        BLYNK_PRINT.print(c, HEX);
   d6074:	f006 fe40 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6078:	2210      	movs	r2, #16
   d607a:	4629      	mov	r1, r5
   d607c:	f006 fc96 	bl	dc9ac <_ZN5Print11printNumberEmh>
                        prev_print = false;
   d6080:	2400      	movs	r4, #0
   d6082:	e7d4      	b.n	d602e <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x1a>
                    }
                }
                if (!prev_print) {
   d6084:	b924      	cbnz	r4, d6090 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26+0x7c>
                    BLYNK_PRINT.print(']');
   d6086:	f006 fe37 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d608a:	215d      	movs	r1, #93	; 0x5d
   d608c:	f006 fc75 	bl	dc97a <_ZN5Print5printEc>
                }
                BLYNK_PRINT.println();
   d6090:	f006 fe32 	bl	dccf8 <_Z22__fetch_global_Serial1v>
            }
        }
   d6094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    }
                }
                if (!prev_print) {
                    BLYNK_PRINT.print(']');
                }
                BLYNK_PRINT.println();
   d6098:	f006 bc72 	b.w	dc980 <_ZN5Print7printlnEv>

000d609c <_ZN22BlynkTransportParticle7connectEv>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d609c:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (domain) {
   d609e:	6b47      	ldr	r7, [r0, #52]	; 0x34
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool connect() {
   d60a0:	b087      	sub	sp, #28
   d60a2:	4604      	mov	r4, r0
        if (domain) {
   d60a4:	b1ef      	cbz	r7, d60e2 <_ZN22BlynkTransportParticle7connectEv+0x46>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
   d60a6:	f7ff ff9b 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d60aa:	f006 fe25 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60ae:	4931      	ldr	r1, [pc, #196]	; (d6174 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
   d60b0:	f006 fc5f 	bl	dc972 <_ZN5Print5printEPKc>
   d60b4:	f006 fe20 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d60ba:	f006 fc5a 	bl	dc972 <_ZN5Print5printEPKc>
   d60be:	f006 fe1b 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60c2:	213a      	movs	r1, #58	; 0x3a
   d60c4:	f006 fc59 	bl	dc97a <_ZN5Print5printEc>
   d60c8:	f006 fe16 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60cc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   d60ce:	220a      	movs	r2, #10
   d60d0:	f7ff ff58 	bl	d5f84 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(domain, port));
   d60d4:	2300      	movs	r3, #0
   d60d6:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d60d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d60da:	4620      	mov	r0, r4
   d60dc:	f005 f944 	bl	db368 <_ZN9TCPClient7connectEPKctm>
   d60e0:	e043      	b.n	d616a <_ZN22BlynkTransportParticle7connectEv+0xce>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
   d60e2:	f7ff ff7d 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d60e6:	f006 fe07 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60ea:	4922      	ldr	r1, [pc, #136]	; (d6174 <_ZN22BlynkTransportParticle7connectEv+0xd8>)
   d60ec:	f006 fc41 	bl	dc972 <_ZN5Print5printEPKc>
   d60f0:	f006 fe02 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d60f4:	220a      	movs	r2, #10
   d60f6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
   d60fa:	f006 fc57 	bl	dc9ac <_ZN5Print11printNumberEmh>
   d60fe:	f006 fdfb 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6102:	212e      	movs	r1, #46	; 0x2e
   d6104:	f006 fc39 	bl	dc97a <_ZN5Print5printEc>
   d6108:	f006 fdf6 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d610c:	220a      	movs	r2, #10
   d610e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   d6112:	f006 fc4b 	bl	dc9ac <_ZN5Print11printNumberEmh>
   d6116:	f006 fdef 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d611a:	212e      	movs	r1, #46	; 0x2e
   d611c:	f006 fc2d 	bl	dc97a <_ZN5Print5printEc>
   d6120:	f006 fdea 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6124:	220a      	movs	r2, #10
   d6126:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   d612a:	f006 fc3f 	bl	dc9ac <_ZN5Print11printNumberEmh>
   d612e:	f006 fde3 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6132:	212e      	movs	r1, #46	; 0x2e
   d6134:	f006 fc21 	bl	dc97a <_ZN5Print5printEc>
   d6138:	f006 fdde 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d613c:	4625      	mov	r5, r4
   d613e:	4606      	mov	r6, r0
   d6140:	220a      	movs	r2, #10
   d6142:	f815 1f20 	ldrb.w	r1, [r5, #32]!
   d6146:	f006 fc31 	bl	dc9ac <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d614a:	4630      	mov	r0, r6
   d614c:	f006 fc18 	bl	dc980 <_ZN5Print7printlnEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6150:	4b09      	ldr	r3, [pc, #36]	; (d6178 <_ZN22BlynkTransportParticle7connectEv+0xdc>)
   d6152:	9300      	str	r3, [sp, #0]
   d6154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6156:	ae01      	add	r6, sp, #4
   d6158:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d615a:	682b      	ldr	r3, [r5, #0]
   d615c:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   d615e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   d6160:	463b      	mov	r3, r7
   d6162:	4669      	mov	r1, sp
   d6164:	4620      	mov	r0, r4
   d6166:	f005 f981 	bl	db46c <_ZN9TCPClient7connectE9IPAddresstm>
   d616a:	1e43      	subs	r3, r0, #1
   d616c:	4258      	negs	r0, r3
   d616e:	4158      	adcs	r0, r3
        }
        return 0;
    }
   d6170:	b007      	add	sp, #28
   d6172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6174:	000e78c7 	.word	0x000e78c7
   d6178:	000e894c 	.word	0x000e894c

000d617c <_ZN13BlynkParticle6configEPKcS1_t>:
public:
    BlynkParticle(BlynkTransportParticle& transp)
        : Base(transp)
    {}

    void config(const char* auth,
   d617c:	b570      	push	{r4, r5, r6, lr}
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d617e:	6041      	str	r1, [r0, #4]
   d6180:	4604      	mov	r4, r0
   d6182:	4616      	mov	r6, r2
   d6184:	461d      	mov	r5, r3
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d6186:	f003 fb31 	bl	d97ec <_Z11BlynkMillisv>
   d618a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d618e:	3808      	subs	r0, #8
   d6190:	6120      	str	r0, [r4, #16]
   d6192:	60e0      	str	r0, [r4, #12]
   d6194:	6160      	str	r0, [r4, #20]

    void printBanner() {
#if defined(BLYNK_NO_FANCY_LOGO)
        BLYNK_LOG1(BLYNK_F("Blynk v" BLYNK_VERSION " on " BLYNK_INFO_DEVICE));
#else
        BLYNK_LOG1(BLYNK_F(BLYNK_NEWLINE
   d6196:	f7ff ff23 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d619a:	f006 fdad 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d619e:	4903      	ldr	r1, [pc, #12]	; (d61ac <_ZN13BlynkParticle6configEPKcS1_t+0x30>)
   d61a0:	f006 fbfa 	bl	dc998 <_ZN5Print7printlnEPKc>
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(domain, port);
   d61a4:	6821      	ldr	r1, [r4, #0]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d61a6:	634e      	str	r6, [r1, #52]	; 0x34
        port = p;
   d61a8:	870d      	strh	r5, [r1, #56]	; 0x38
   d61aa:	bd70      	pop	{r4, r5, r6, pc}
   d61ac:	000e78d6 	.word	0x000e78d6

000d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d61b0:	b508      	push	{r3, lr}
        state = CONNECTING;
   d61b2:	2300      	movs	r3, #0
   d61b4:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d61b6:	6800      	ldr	r0, [r0, #0]
   d61b8:	f005 f9d2 	bl	db560 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d61bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d61c0:	f003 bafa 	b.w	d97b8 <BlynkNoOpCbk>

000d61c4 <_ZN5Print7printlnImLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d61c4:	b538      	push	{r3, r4, r5, lr}
   d61c6:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d61c8:	f7ff fefd 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
   d61cc:	4604      	mov	r4, r0
        n += println();
   d61ce:	4628      	mov	r0, r5
   d61d0:	f006 fbd6 	bl	dc980 <_ZN5Print7printlnEv>
        return n;
    }
   d61d4:	4420      	add	r0, r4
   d61d6:	bd38      	pop	{r3, r4, r5, pc}

000d61d8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d61d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61dc:	4607      	mov	r7, r0
   d61de:	460c      	mov	r4, r1
{
    if (base == 0) {
   d61e0:	4615      	mov	r5, r2
   d61e2:	b92a      	cbnz	r2, d61f0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d61e4:	6803      	ldr	r3, [r0, #0]
   d61e6:	b2c9      	uxtb	r1, r1
   d61e8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d61ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d61ee:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d61f0:	2900      	cmp	r1, #0
   d61f2:	da07      	bge.n	d6204 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d61f4:	2a0a      	cmp	r2, #10
   d61f6:	d105      	bne.n	d6204 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d61f8:	212d      	movs	r1, #45	; 0x2d
   d61fa:	f006 fbbe 	bl	dc97a <_ZN5Print5printEc>
            val = -n;
   d61fe:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d6200:	4606      	mov	r6, r0
            val = -n;
   d6202:	e001      	b.n	d6208 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d6204:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6206:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6208:	b2ea      	uxtb	r2, r5
   d620a:	4638      	mov	r0, r7
   d620c:	f006 fbce 	bl	dc9ac <_ZN5Print11printNumberEmh>
    }
}
   d6210:	4430      	add	r0, r6
   d6212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d6218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d621c:	b08e      	sub	sp, #56	; 0x38
   d621e:	af04      	add	r7, sp, #16
   d6220:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d6222:	2205      	movs	r2, #5
   d6224:	f107 010c 	add.w	r1, r7, #12
   d6228:	6800      	ldr	r0, [r0, #0]
   d622a:	f006 fb64 	bl	dc8f6 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d622e:	4605      	mov	r5, r0
   d6230:	2800      	cmp	r0, #0
   d6232:	f000 8207 	beq.w	d6644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42c>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d6236:	2805      	cmp	r0, #5
   d6238:	d11a      	bne.n	d6270 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x58>
   d623a:	4602      	mov	r2, r0
   d623c:	f107 010c 	add.w	r1, r7, #12
   d6240:	48b8      	ldr	r0, [pc, #736]	; (d6524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d6242:	f7ff fee7 	bl	d6014 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d6246:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d624a:	f8b7 800f 	ldrh.w	r8, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d624e:	0a13      	lsrs	r3, r2, #8
   d6250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d6254:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d6258:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d625c:	b29b      	uxth	r3, r3
    hdr.length = ntohs(hdr.length);
   d625e:	fa1f f888 	uxth.w	r8, r8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d6262:	f8a7 300d 	strh.w	r3, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d6266:	f8a7 800f 	strh.w	r8, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d626a:	b9b3      	cbnz	r3, d629a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
    hdr.length = ntohs(hdr.length);

    return rlen;
   d626c:	462c      	mov	r4, r5
   d626e:	e001      	b.n	d6274 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x5c>
    if (rlen == 0) {
        return 0;
    }

    if (sizeof(hdr) != rlen) {
        return -1;
   d6270:	f04f 34ff 	mov.w	r4, #4294967295
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
   d6274:	f7ff feb4 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6278:	f006 fd3e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d627c:	49aa      	ldr	r1, [pc, #680]	; (d6528 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x310>)
   d627e:	f006 fb78 	bl	dc972 <_ZN5Print5printEPKc>
   d6282:	f006 fd39 	bl	dccf8 <_Z22__fetch_global_Serial1v>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d6286:	220a      	movs	r2, #10
   d6288:	4605      	mov	r5, r0
   d628a:	4621      	mov	r1, r4
   d628c:	f7ff ffa4 	bl	d61d8 <_ZN5Print5printIiLi0EEEjT_i>
        n += println();
   d6290:	4628      	mov	r0, r5
   d6292:	f006 fb75 	bl	dc980 <_ZN5Print7printlnEv>
#endif
        return false;
   d6296:	2000      	movs	r0, #0
   d6298:	e1d9      	b.n	d664e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x436>
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d629a:	7b3b      	ldrb	r3, [r7, #12]
   d629c:	2b00      	cmp	r3, #0
   d629e:	d15f      	bne.n	d6360 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x148>
        lastActivityIn = BlynkMillis();
   d62a0:	f003 faa4 	bl	d97ec <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d62a4:	7f65      	ldrb	r5, [r4, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d62a6:	60e0      	str	r0, [r4, #12]
   d62a8:	f8b7 000f 	ldrh.w	r0, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d62ac:	2d00      	cmp	r5, #0
   d62ae:	d153      	bne.n	d6358 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x140>
   d62b0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
   d62b4:	2b01      	cmp	r3, #1
   d62b6:	d14f      	bne.n	d6358 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x140>
            switch (hdr.length) {
   d62b8:	2809      	cmp	r0, #9
   d62ba:	d034      	beq.n	d6326 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x10e>
   d62bc:	28c8      	cmp	r0, #200	; 0xc8
   d62be:	d001      	beq.n	d62c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xac>
   d62c0:	2804      	cmp	r0, #4
   d62c2:	d13a      	bne.n	d633a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x122>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
   d62c4:	f7ff fe8c 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d62c8:	f006 fd16 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d62cc:	4997      	ldr	r1, [pc, #604]	; (d652c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x314>)
   d62ce:	f006 fb50 	bl	dc972 <_ZN5Print5printEPKc>
   d62d2:	f006 fd11 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d62d6:	6963      	ldr	r3, [r4, #20]
   d62d8:	68e1      	ldr	r1, [r4, #12]
   d62da:	220a      	movs	r2, #10
   d62dc:	1ac9      	subs	r1, r1, r3
   d62de:	f7ff fe72 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
   d62e2:	f006 fd09 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d62e6:	4992      	ldr	r1, [pc, #584]	; (d6530 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x318>)
   d62e8:	f006 fb56 	bl	dc998 <_ZN5Print7printlnEPKc>
                lastHeartbeat = lastActivityIn;
   d62ec:	68e3      	ldr	r3, [r4, #12]
   d62ee:	6163      	str	r3, [r4, #20]
                state = CONNECTED;
   d62f0:	2301      	movs	r3, #1
   d62f2:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
   d62f4:	f003 fa7c 	bl	d97f0 <_Z12BlynkFreeRamv>
   d62f8:	4605      	mov	r5, r0
   d62fa:	b160      	cbz	r0, d6316 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xfe>
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d62fc:	f7ff fe70 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6300:	f006 fcfa 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6304:	498b      	ldr	r1, [pc, #556]	; (d6534 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>)
   d6306:	f006 fb34 	bl	dc972 <_ZN5Print5printEPKc>
   d630a:	f006 fcf5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d630e:	220a      	movs	r2, #10
   d6310:	4629      	mov	r1, r5
   d6312:	f7ff ff57 	bl	d61c4 <_ZN5Print7printlnImLi0EEEjT_i>
                }
#endif
                this->sendInfo();
   d6316:	4620      	mov	r0, r4
   d6318:	f000 fb60 	bl	d69dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d631c:	f7ff fa2a 	bl	d5774 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d6320:	f001 f8c6 	bl	d74b0 <BlynkOnConnected>
   d6324:	e18e      	b.n	d6644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42c>
                return true;
            case BLYNK_INVALID_TOKEN:
                BLYNK_LOG1(BLYNK_F("Invalid auth token"));
   d6326:	f7ff fe5b 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d632a:	f006 fce5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d632e:	4982      	ldr	r1, [pc, #520]	; (d6538 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x320>)
   d6330:	f006 fb32 	bl	dc998 <_ZN5Print7printlnEPKc>
                state = TOKEN_INVALID;
   d6334:	2303      	movs	r3, #3
   d6336:	7763      	strb	r3, [r4, #29]
   d6338:	e7ad      	b.n	d6296 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
                break;
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
   d633a:	f7ff fe51 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d633e:	f006 fcdb 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6342:	497e      	ldr	r1, [pc, #504]	; (d653c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x324>)
   d6344:	f006 fb15 	bl	dc972 <_ZN5Print5printEPKc>
   d6348:	f006 fcd6 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d634c:	220a      	movs	r2, #10
   d634e:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d6352:	f7ff fe17 	bl	d5f84 <_ZN5Print7printlnItLi0EEEjT_i>
   d6356:	e79e      	b.n	d6296 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d6358:	3805      	subs	r0, #5
   d635a:	bf18      	it	ne
   d635c:	2001      	movne	r0, #1
   d635e:	e176      	b.n	d664e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x436>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d6360:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6364:	d911      	bls.n	d638a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x172>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
   d6366:	f7ff fe3b 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d636a:	f006 fcc5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d636e:	4974      	ldr	r1, [pc, #464]	; (d6540 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x328>)
   d6370:	f006 faff 	bl	dc972 <_ZN5Print5printEPKc>
   d6374:	f006 fcc0 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6378:	220a      	movs	r2, #10
   d637a:	f8b7 100f 	ldrh.w	r1, [r7, #15]
   d637e:	f7ff fe01 	bl	d5f84 <_ZN5Print7printlnItLi0EEEjT_i>
        // TODO: Flush
        internalReconnect();
   d6382:	4620      	mov	r0, r4
   d6384:	f7ff ff14 	bl	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d6388:	e15c      	b.n	d6644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x42c>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d638a:	f108 0308 	add.w	r3, r8, #8
   d638e:	f023 0307 	bic.w	r3, r3, #7
   d6392:	466e      	mov	r6, sp
   d6394:	ebad 0d03 	sub.w	sp, sp, r3
   d6398:	ad04      	add	r5, sp, #16
   d639a:	4642      	mov	r2, r8
   d639c:	4629      	mov	r1, r5
   d639e:	6820      	ldr	r0, [r4, #0]
   d63a0:	f006 faa9 	bl	dc8f6 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d63a4:	4580      	cmp	r8, r0
   d63a6:	d007      	beq.n	d63b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
   d63a8:	f7ff fe1a 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d63ac:	f006 fca4 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d63b0:	4964      	ldr	r1, [pc, #400]	; (d6544 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x32c>)
   d63b2:	f006 faf1 	bl	dc998 <_ZN5Print7printlnEPKc>
   d63b6:	e063      	b.n	d6480 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x268>
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d63b8:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d63bc:	2300      	movs	r3, #0
   d63be:	54ab      	strb	r3, [r5, r2]
        #define BLYNK_DBG_BREAK()    { for(;;); }
        #define BLYNK_ASSERT(expr)   { if(!(expr)) { BLYNK_LOG2(BLYNK_F("Assertion failed: "), BLYNK_F(#expr)); BLYNK_DBG_BREAK() } }

        static
        void BLYNK_DBG_DUMP(const char* msg, const void* addr, size_t len) {
            if (len) {
   d63c0:	b11a      	cbz	r2, d63ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b2>
   d63c2:	4629      	mov	r1, r5
   d63c4:	4857      	ldr	r0, [pc, #348]	; (d6524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x30c>)
   d63c6:	f7ff fe25 	bl	d6014 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d63ca:	f003 fa0f 	bl	d97ec <_Z11BlynkMillisv>

    switch (hdr.type)
   d63ce:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d63d0:	60e0      	str	r0, [r4, #12]

    switch (hdr.type)
   d63d2:	2b11      	cmp	r3, #17
   d63d4:	f000 80bc 	beq.w	d6550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x338>
   d63d8:	d808      	bhi.n	d63ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1d4>
   d63da:	2b06      	cmp	r3, #6
   d63dc:	d036      	beq.n	d644c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   d63de:	2b0f      	cmp	r3, #15
   d63e0:	f000 8092 	beq.w	d6508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f0>
   d63e4:	2b02      	cmp	r3, #2
   d63e6:	f040 8116 	bne.w	d6616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
   d63ea:	e00c      	b.n	d6406 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ee>
   d63ec:	2b1d      	cmp	r3, #29
   d63ee:	d00a      	beq.n	d6406 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ee>
   d63f0:	d803      	bhi.n	d63fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1e2>
   d63f2:	2b14      	cmp	r3, #20
   d63f4:	f000 8088 	beq.w	d6508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2f0>
   d63f8:	e10d      	b.n	d6616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
   d63fa:	2b29      	cmp	r3, #41	; 0x29
   d63fc:	d032      	beq.n	d6464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   d63fe:	2b37      	cmp	r3, #55	; 0x37
   d6400:	f000 80f9 	beq.w	d65f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3de>
   d6404:	e107      	b.n	d6616 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3fe>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d6406:	7f63      	ldrb	r3, [r4, #29]
   d6408:	bb03      	cbnz	r3, d644c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
            BLYNK_LOG1(BLYNK_F("Ready"));
   d640a:	f7ff fde9 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d640e:	f006 fc73 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6412:	494d      	ldr	r1, [pc, #308]	; (d6548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x330>)
   d6414:	f006 fac0 	bl	dc998 <_ZN5Print7printlnEPKc>
            state = CONNECTED;
   d6418:	2301      	movs	r3, #1
   d641a:	7763      	strb	r3, [r4, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
   d641c:	f003 f9e8 	bl	d97f0 <_Z12BlynkFreeRamv>
   d6420:	4605      	mov	r5, r0
   d6422:	b160      	cbz	r0, d643e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x226>
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
   d6424:	f7ff fddc 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6428:	f006 fc66 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d642c:	4941      	ldr	r1, [pc, #260]	; (d6534 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x31c>)
   d642e:	f006 faa0 	bl	dc972 <_ZN5Print5printEPKc>
   d6432:	f006 fc61 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6436:	220a      	movs	r2, #10
   d6438:	4629      	mov	r1, r5
   d643a:	f7ff fec3 	bl	d61c4 <_ZN5Print7printlnImLi0EEEjT_i>
            }
#endif
            this->sendInfo();
   d643e:	4620      	mov	r0, r4
   d6440:	f000 facc 	bl	d69dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d6444:	f7ff f996 	bl	d5774 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d6448:	f001 f832 	bl	d74b0 <BlynkOnConnected>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d644c:	2300      	movs	r3, #0
   d644e:	21c8      	movs	r1, #200	; 0xc8
   d6450:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d6454:	9100      	str	r1, [sp, #0]
   d6456:	9302      	str	r3, [sp, #8]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	4619      	mov	r1, r3
   d645c:	4620      	mov	r0, r4
   d645e:	f000 f9d3 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d6462:	e0ec      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d6464:	68a3      	ldr	r3, [r4, #8]
   d6466:	b91b      	cbnz	r3, d6470 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
             redir_serv = (char*)malloc(32);
   d6468:	2020      	movs	r0, #32
   d646a:	f004 fd6b 	bl	daf44 <malloc>
   d646e:	60a0      	str	r0, [r4, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6470:	f8b7 800f 	ldrh.w	r8, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6474:	61fd      	str	r5, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6476:	44a8      	add	r8, r5
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d6478:	4545      	cmp	r5, r8
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d647a:	f8c7 8020 	str.w	r8, [r7, #32]
   d647e:	d301      	bcc.n	d6484 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
            return false;
   d6480:	2000      	movs	r0, #0
   d6482:	e0dd      	b.n	d6640 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x428>

        strncpy(redir_serv, it.asStr(), 32);
   d6484:	4629      	mov	r1, r5
   d6486:	2220      	movs	r2, #32
   d6488:	68a0      	ldr	r0, [r4, #8]
   d648a:	f00e fd7c 	bl	e4f86 <strncpy>
        redir_serv[31] = '\0';
   d648e:	68a3      	ldr	r3, [r4, #8]
   d6490:	2500      	movs	r5, #0
   d6492:	77dd      	strb	r5, [r3, #31]

        if (++it < param.end())
   d6494:	f107 001c 	add.w	r0, r7, #28
   d6498:	f7ff f99c 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d649c:	6803      	ldr	r3, [r0, #0]
   d649e:	4543      	cmp	r3, r8
   d64a0:	d208      	bcs.n	d64b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29c>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d64a2:	69f8      	ldr	r0, [r7, #28]
   d64a4:	b120      	cbz	r0, d64b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x298>
   d64a6:	6a3b      	ldr	r3, [r7, #32]
   d64a8:	4298      	cmp	r0, r3
   d64aa:	f0c0 80cd 	bcc.w	d6648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x430>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d64ae:	4628      	mov	r0, r5
            redir_port = it.asLong();
   d64b0:	b285      	uxth	r5, r0
   d64b2:	e000      	b.n	d64b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d64b4:	2550      	movs	r5, #80	; 0x50
        strncpy(redir_serv, it.asStr(), 32);
        redir_serv[31] = '\0';

        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
   d64b6:	f7ff fd93 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d64ba:	f006 fc1d 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d64be:	4923      	ldr	r1, [pc, #140]	; (d654c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x334>)
   d64c0:	f006 fa57 	bl	dc972 <_ZN5Print5printEPKc>
   d64c4:	f006 fc18 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d64c8:	68a1      	ldr	r1, [r4, #8]
   d64ca:	f006 fa52 	bl	dc972 <_ZN5Print5printEPKc>
   d64ce:	f006 fc13 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d64d2:	213a      	movs	r1, #58	; 0x3a
   d64d4:	f006 fa51 	bl	dc97a <_ZN5Print5printEc>
   d64d8:	f006 fc0e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d64dc:	220a      	movs	r2, #10
   d64de:	4629      	mov	r1, r5
   d64e0:	f7ff fd50 	bl	d5f84 <_ZN5Print7printlnItLi0EEEjT_i>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d64e4:	6820      	ldr	r0, [r4, #0]
   d64e6:	f005 f83b 	bl	db560 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d64ea:	6823      	ldr	r3, [r4, #0]
   d64ec:	68a2      	ldr	r2, [r4, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d64ee:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d64f0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d64f2:	2300      	movs	r3, #0
   d64f4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d64f6:	f003 f979 	bl	d97ec <_Z11BlynkMillisv>
   d64fa:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d64fe:	3808      	subs	r0, #8
   d6500:	6120      	str	r0, [r4, #16]
   d6502:	60e0      	str	r0, [r4, #12]
   d6504:	6160      	str	r0, [r4, #20]
   d6506:	e09a      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d6508:	68fb      	ldr	r3, [r7, #12]
   d650a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d650e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d6510:	f8b7 200f 	ldrh.w	r2, [r7, #15]
   d6514:	4629      	mov	r1, r5
   d6516:	4620      	mov	r0, r4
   d6518:	f000 fa72 	bl	d6a00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d651c:	2300      	movs	r3, #0
   d651e:	8363      	strh	r3, [r4, #26]
   d6520:	e08d      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
   d6522:	bf00      	nop
   d6524:	000e7964 	.word	0x000e7964
   d6528:	000e7966 	.word	0x000e7966
   d652c:	000e7974 	.word	0x000e7974
   d6530:	000e7982 	.word	0x000e7982
   d6534:	000e7987 	.word	0x000e7987
   d6538:	000e7992 	.word	0x000e7992
   d653c:	000e79a5 	.word	0x000e79a5
   d6540:	000e79bc 	.word	0x000e79bc
   d6544:	000e79cd 	.word	0x000e79cd
   d6548:	000e79dd 	.word	0x000e79dd
   d654c:	000e79e3 	.word	0x000e79e3
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d6550:	2300      	movs	r3, #0
   d6552:	713b      	strb	r3, [r7, #4]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6554:	f8b7 300f 	ldrh.w	r3, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6558:	617d      	str	r5, [r7, #20]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d655a:	442b      	add	r3, r5
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d655c:	429d      	cmp	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d655e:	61bb      	str	r3, [r7, #24]
   d6560:	d26d      	bcs.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d6562:	6828      	ldr	r0, [r5, #0]
   d6564:	60b8      	str	r0, [r7, #8]

        ++it;
   d6566:	f107 0014 	add.w	r0, r7, #20
   d656a:	f7ff f933 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d656e:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d6570:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d6574:	61fa      	str	r2, [r7, #28]
   d6576:	1b51      	subs	r1, r2, r5
   d6578:	1a5b      	subs	r3, r3, r1
   d657a:	623b      	str	r3, [r7, #32]
   d657c:	627b      	str	r3, [r7, #36]	; 0x24
        BlynkParam param2(start, length);

        switch (cmd32) {
   d657e:	4a36      	ldr	r2, [pc, #216]	; (d6658 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x440>)
   d6580:	68bb      	ldr	r3, [r7, #8]
   d6582:	4293      	cmp	r3, r2
   d6584:	d02b      	beq.n	d65de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3c6>
   d6586:	d80d      	bhi.n	d65a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x38c>
   d6588:	4a34      	ldr	r2, [pc, #208]	; (d665c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x444>)
   d658a:	4293      	cmp	r3, r2
   d658c:	d01b      	beq.n	d65c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ae>
   d658e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d6592:	3203      	adds	r2, #3
   d6594:	4293      	cmp	r3, r2
   d6596:	d128      	bne.n	d65ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3d2>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d6598:	f107 011c 	add.w	r1, r7, #28
   d659c:	1d38      	adds	r0, r7, #4
   d659e:	f003 f90a 	bl	d97b6 <BlynkWidgetWrite>
   d65a2:	e04c      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d65a4:	4a2e      	ldr	r2, [pc, #184]	; (d6660 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x448>)
   d65a6:	4293      	cmp	r3, r2
   d65a8:	d013      	beq.n	d65d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ba>
   d65aa:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d65ae:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d65b2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d65b6:	4293      	cmp	r3, r2
   d65b8:	d117      	bne.n	d65ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3d2>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d65ba:	f107 011c 	add.w	r1, r7, #28
   d65be:	1d38      	adds	r0, r7, #4
   d65c0:	f7ff f9ee 	bl	d59a0 <BlynkWidgetWriteInternalPinADIS>
   d65c4:	e03b      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d65c6:	f107 011c 	add.w	r1, r7, #28
   d65ca:	1d38      	adds	r0, r7, #4
   d65cc:	f003 f8f3 	bl	d97b6 <BlynkWidgetWrite>
   d65d0:	e035      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d65d2:	f107 011c 	add.w	r1, r7, #28
   d65d6:	1d38      	adds	r0, r7, #4
   d65d8:	f000 fd62 	bl	d70a0 <BlynkWidgetWriteInternalPinACON>
   d65dc:	e02f      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d65de:	f107 011c 	add.w	r1, r7, #28
   d65e2:	1d38      	adds	r0, r7, #4
   d65e4:	f003 f8e7 	bl	d97b6 <BlynkWidgetWrite>
   d65e8:	e029      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
#ifdef BLYNK_DEBUG
        default:             BLYNK_LOG2(BLYNK_F("Invalid internal cmd:"), param.asStr());
   d65ea:	f7ff fcf9 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d65ee:	f006 fb83 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d65f2:	491c      	ldr	r1, [pc, #112]	; (d6664 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x44c>)
   d65f4:	e007      	b.n	d6606 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x3ee>
#endif
        }
    } break;
    case BLYNK_CMD_DEBUG_PRINT: {
        if (hdr.length) {
   d65f6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d65fa:	b303      	cbz	r3, d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
            BLYNK_LOG2(BLYNK_F("Server: "), (char*)inputBuffer);
   d65fc:	f7ff fcf0 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6600:	f006 fb7a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6604:	4918      	ldr	r1, [pc, #96]	; (d6668 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x450>)
   d6606:	f006 f9b4 	bl	dc972 <_ZN5Print5printEPKc>
   d660a:	f006 fb75 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d660e:	4629      	mov	r1, r5
   d6610:	f006 f9c2 	bl	dc998 <_ZN5Print7printlnEPKc>
   d6614:	e013      	b.n	d663e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x426>
        }
    } break;
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
   d6616:	f7ff fce3 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d661a:	f006 fb6d 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d661e:	4913      	ldr	r1, [pc, #76]	; (d666c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x454>)
   d6620:	f006 f9a7 	bl	dc972 <_ZN5Print5printEPKc>
   d6624:	f006 fb68 	bl	dccf8 <_Z22__fetch_global_Serial1v>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6628:	220a      	movs	r2, #10
   d662a:	4605      	mov	r5, r0
   d662c:	7b39      	ldrb	r1, [r7, #12]
   d662e:	f006 f9bd 	bl	dc9ac <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d6632:	4628      	mov	r0, r5
   d6634:	f006 f9a4 	bl	dc980 <_ZN5Print7printlnEv>
#endif
        // TODO: Flush
        internalReconnect();
   d6638:	4620      	mov	r0, r4
   d663a:	f7ff fdb9 	bl	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    } break;
    }

    return true;
   d663e:	2001      	movs	r0, #1
   d6640:	46b5      	mov	sp, r6
   d6642:	e004      	b.n	d664e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x436>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d6644:	2001      	movs	r0, #1
   d6646:	e002      	b.n	d664e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x436>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d6648:	f00d fba5 	bl	e3d96 <atol>
   d664c:	e730      	b.n	d64b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x298>
        internalReconnect();
    } break;
    }

    return true;
}
   d664e:	3728      	adds	r7, #40	; 0x28
   d6650:	46bd      	mov	sp, r7
   d6652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6656:	bf00      	nop
   d6658:	6174656d 	.word	0x6174656d
   d665c:	0061746f 	.word	0x0061746f
   d6660:	6e6f6361 	.word	0x6e6f6361
   d6664:	000e79f3 	.word	0x000e79f3
   d6668:	000e7a09 	.word	0x000e7a09
   d666c:	000e7a12 	.word	0x000e7a12

000d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d6670:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6674:	4604      	mov	r4, r0
   d6676:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d6678:	f7ff f87c 	bl	d5774 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d667c:	7f63      	ldrb	r3, [r4, #29]
   d667e:	2b02      	cmp	r3, #2
   d6680:	f000 80a7 	beq.w	d67d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x162>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d6684:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d6686:	8b62      	ldrh	r2, [r4, #26]
   d6688:	3301      	adds	r3, #1
   d668a:	b2db      	uxtb	r3, r3
   d668c:	7723      	strb	r3, [r4, #28]
   d668e:	2a00      	cmp	r2, #0
   d6690:	d164      	bne.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6692:	2b02      	cmp	r3, #2
   d6694:	d862      	bhi.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6696:	6820      	ldr	r0, [r4, #0]
   d6698:	f004 fd73 	bl	db182 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d669c:	b140      	cbz	r0, d66b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x40>
        while (avail || conn.available() > 0) {
   d669e:	2d00      	cmp	r5, #0
   d66a0:	f040 8099 	bne.w	d67d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
    int available() { return client.available(); }
   d66a4:	6820      	ldr	r0, [r4, #0]
   d66a6:	f004 ff73 	bl	db590 <_ZN9TCPClient9availableEv>
   d66aa:	2800      	cmp	r0, #0
   d66ac:	f300 8093 	bgt.w	d67d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d66b0:	f003 f89c 	bl	d97ec <_Z11BlynkMillisv>
   d66b4:	4607      	mov	r7, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d66b6:	6820      	ldr	r0, [r4, #0]
   d66b8:	f004 fd63 	bl	db182 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d66bc:	7f65      	ldrb	r5, [r4, #29]
   d66be:	2d01      	cmp	r5, #1
   d66c0:	4606      	mov	r6, r0
   d66c2:	d14d      	bne.n	d6760 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xf0>
        if (!tconn) {
   d66c4:	b928      	cbnz	r0, d66d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d66c6:	6167      	str	r7, [r4, #20]
            internalReconnect();
   d66c8:	4620      	mov	r0, r4
   d66ca:	f7ff fd71 	bl	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d66ce:	4635      	mov	r5, r6
   d66d0:	e07b      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d66d2:	68e3      	ldr	r3, [r4, #12]
   d66d4:	4a48      	ldr	r2, [pc, #288]	; (d67f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x188>)
   d66d6:	1afb      	subs	r3, r7, r3
   d66d8:	4293      	cmp	r3, r2
   d66da:	d927      	bls.n	d672c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xbc>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
   d66dc:	f7ff fc80 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d66e0:	f006 fb0a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d66e4:	4945      	ldr	r1, [pc, #276]	; (d67fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x18c>)
   d66e6:	f006 f944 	bl	dc972 <_ZN5Print5printEPKc>
   d66ea:	f006 fb05 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d66ee:	220a      	movs	r2, #10
   d66f0:	4639      	mov	r1, r7
   d66f2:	f7ff fc68 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
   d66f6:	f006 faff 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d66fa:	4941      	ldr	r1, [pc, #260]	; (d6800 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d66fc:	f006 f939 	bl	dc972 <_ZN5Print5printEPKc>
   d6700:	f006 fafa 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6704:	220a      	movs	r2, #10
   d6706:	68e1      	ldr	r1, [r4, #12]
   d6708:	f7ff fc5d 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
   d670c:	f006 faf4 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6710:	493b      	ldr	r1, [pc, #236]	; (d6800 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x190>)
   d6712:	f006 f92e 	bl	dc972 <_ZN5Print5printEPKc>
   d6716:	f006 faef 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d671a:	220a      	movs	r2, #10
   d671c:	6961      	ldr	r1, [r4, #20]
   d671e:	f7ff fd51 	bl	d61c4 <_ZN5Print7printlnImLi0EEEjT_i>
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d6722:	4620      	mov	r0, r4
   d6724:	f7ff fd44 	bl	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d6728:	2500      	movs	r5, #0
   d672a:	e04e      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d672c:	f64e 2260 	movw	r2, #60000	; 0xea60
   d6730:	4293      	cmp	r3, r2
   d6732:	d803      	bhi.n	d673c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xcc>
   d6734:	6923      	ldr	r3, [r4, #16]
   d6736:	1afb      	subs	r3, r7, r3
   d6738:	4293      	cmp	r3, r2
   d673a:	d90f      	bls.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d673c:	6963      	ldr	r3, [r4, #20]
   d673e:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d6742:	1afb      	subs	r3, r7, r3
   d6744:	4293      	cmp	r3, r2
   d6746:	d909      	bls.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d6748:	2300      	movs	r3, #0
   d674a:	9302      	str	r3, [sp, #8]
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	9300      	str	r3, [sp, #0]
   d6750:	461a      	mov	r2, r3
   d6752:	2106      	movs	r1, #6
   d6754:	4620      	mov	r0, r4
   d6756:	f000 f857 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d675a:	6167      	str	r7, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d675c:	2501      	movs	r5, #1
   d675e:	e034      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d6760:	2d00      	cmp	r5, #0
   d6762:	d1fb      	bne.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6764:	6961      	ldr	r1, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d6766:	1a79      	subs	r1, r7, r1
   d6768:	b178      	cbz	r0, d678a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11a>
   d676a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d676e:	4299      	cmp	r1, r3
   d6770:	d9f4      	bls.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
   d6772:	f7ff fc35 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6776:	f006 fabf 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d677a:	4922      	ldr	r1, [pc, #136]	; (d6804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x194>)
   d677c:	f006 f90c 	bl	dc998 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d6780:	6820      	ldr	r0, [r4, #0]
   d6782:	f004 feed 	bl	db560 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            state = CONNECTING;
   d6786:	7765      	strb	r5, [r4, #29]
            return false;
   d6788:	e01f      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d678a:	f241 3388 	movw	r3, #5000	; 0x1388
   d678e:	4299      	cmp	r1, r3
   d6790:	d9e4      	bls.n	d675c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xec>
   d6792:	6820      	ldr	r0, [r4, #0]
   d6794:	f004 fee4 	bl	db560 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d6798:	6820      	ldr	r0, [r4, #0]
   d679a:	f7ff fc7f 	bl	d609c <_ZN22BlynkTransportParticle7connectEv>
   d679e:	4605      	mov	r5, r0
   d67a0:	b908      	cbnz	r0, d67a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x136>
                lastLogin = t;
   d67a2:	6167      	str	r7, [r4, #20]
                return false;
   d67a4:	e011      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d67a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d67aa:	2701      	movs	r7, #1
   d67ac:	8327      	strh	r7, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d67ae:	4640      	mov	r0, r8
   d67b0:	f00e fbcc 	bl	e4f4c <strlen>
   d67b4:	4643      	mov	r3, r8
   d67b6:	e88d 0041 	stmia.w	sp, {r0, r6}
   d67ba:	9602      	str	r6, [sp, #8]
   d67bc:	463a      	mov	r2, r7
   d67be:	211d      	movs	r1, #29
   d67c0:	4620      	mov	r0, r4
   d67c2:	f000 f821 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d67c6:	6923      	ldr	r3, [r4, #16]
   d67c8:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d67ca:	7f23      	ldrb	r3, [r4, #28]
   d67cc:	3b01      	subs	r3, #1
   d67ce:	7723      	strb	r3, [r4, #28]
   d67d0:	e00e      	b.n	d67f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d67d2:	2500      	movs	r5, #0
   d67d4:	e00c      	b.n	d67f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x180>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d67d6:	4620      	mov	r0, r4
   d67d8:	f7ff fd1e 	bl	d6218 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d67dc:	4605      	mov	r5, r0
   d67de:	2800      	cmp	r0, #0
   d67e0:	f47f af60 	bne.w	d66a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
   d67e4:	6820      	ldr	r0, [r4, #0]
   d67e6:	f004 febb 	bl	db560 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d67ea:	f002 ffe5 	bl	d97b8 <BlynkNoOpCbk>
                return false;
   d67ee:	e7ec      	b.n	d67ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            return true;
        }
#endif
    }
    return true;
}
   d67f0:	4628      	mov	r0, r5
   d67f2:	b004      	add	sp, #16
   d67f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67f8:	00010d88 	.word	0x00010d88
   d67fc:	000e7a28 	.word	0x000e7a28
   d6800:	000e7524 	.word	0x000e7524
   d6804:	000e7a3c 	.word	0x000e7a3c

000d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d6808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d680c:	b083      	sub	sp, #12
   d680e:	af00      	add	r7, sp, #0
   d6810:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d6812:	6800      	ldr	r0, [r0, #0]
   d6814:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d6816:	4689      	mov	r9, r1
   d6818:	4616      	mov	r6, r2
   d681a:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d681c:	46ea      	mov	sl, sp
   d681e:	f004 fcb0 	bl	db182 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d6822:	2800      	cmp	r0, #0
   d6824:	d071      	beq.n	d690a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
   d6826:	f1b9 0f1d 	cmp.w	r9, #29
   d682a:	d805      	bhi.n	d6838 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   d682c:	4b67      	ldr	r3, [pc, #412]	; (d69cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c4>)
   d682e:	fa23 f309 	lsr.w	r3, r3, r9
   d6832:	07db      	lsls	r3, r3, #31
   d6834:	f100 80c5 	bmi.w	d69c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ba>
   d6838:	7f63      	ldrb	r3, [r4, #29]
   d683a:	2b01      	cmp	r3, #1
   d683c:	d165      	bne.n	d690a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d683e:	b916      	cbnz	r6, d6846 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d6840:	8b66      	ldrh	r6, [r4, #26]
   d6842:	2e00      	cmp	r6, #0
   d6844:	d066      	beq.n	d6914 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10c>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d6846:	f1a9 030c 	sub.w	r3, r9, #12
   d684a:	2b08      	cmp	r3, #8
   d684c:	d96a      	bls.n	d6924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11c>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d684e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d6850:	f1bb 0f00 	cmp.w	fp, #0
   d6854:	bf14      	ite	ne
   d6856:	46a8      	movne	r8, r5
   d6858:	f04f 0800 	moveq.w	r8, #0
   d685c:	2a00      	cmp	r2, #0
   d685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6860:	f108 0305 	add.w	r3, r8, #5
   d6864:	bf14      	ite	ne
   d6866:	4690      	movne	r8, r2
   d6868:	f04f 0800 	moveq.w	r8, #0
   d686c:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d686e:	f108 0307 	add.w	r3, r8, #7
   d6872:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d6876:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6878:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d687c:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d6880:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d6882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d6886:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d688a:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d688e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d6892:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d6896:	f1bb 0f00 	cmp.w	fp, #0
   d689a:	d063      	beq.n	d6964 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
   d689c:	2d00      	cmp	r5, #0
   d689e:	d061      	beq.n	d6964 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>
        memcpy(buff + pos, data, length);
   d68a0:	462a      	mov	r2, r5
   d68a2:	4659      	mov	r1, fp
   d68a4:	f10d 0005 	add.w	r0, sp, #5
   d68a8:	f00d fb84 	bl	e3fb4 <memcpy>
        pos += length;
   d68ac:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d68ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d68b0:	2b00      	cmp	r3, #0
   d68b2:	d159      	bne.n	d6968 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x160>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d68b4:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d68b6:	4545      	cmp	r5, r8
   d68b8:	d262      	bcs.n	d6980 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x178>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d68ba:	ebc5 0608 	rsb	r6, r5, r8
#define BlynkUtility_h

template<class T>
const T& BlynkMin(const T& a, const T& b)
{
    return (b < a) ? b : a;
   d68be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
   d68c2:	687b      	ldr	r3, [r7, #4]
   d68c4:	bf28      	it	cs
   d68c6:	f44f 6680 	movcs.w	r6, #1024	; 0x400
   d68ca:	eb03 0905 	add.w	r9, r3, r5
   d68ce:	b126      	cbz	r6, d68da <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd2>
   d68d0:	4632      	mov	r2, r6
   d68d2:	4649      	mov	r1, r9
   d68d4:	483e      	ldr	r0, [pc, #248]	; (d69d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c8>)
   d68d6:	f7ff fb9d 	bl	d6014 <_ZL14BLYNK_DBG_DUMPPKcPKvj.part.26>
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d68da:	4632      	mov	r2, r6
   d68dc:	4649      	mov	r1, r9
   d68de:	6820      	ldr	r0, [r4, #0]
   d68e0:	f004 fc39 	bl	db156 <_ZN9TCPClient5writeEPKhj>
   d68e4:	4606      	mov	r6, r0
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d68e6:	2000      	movs	r0, #0
   d68e8:	f002 ff7e 	bl	d97e8 <_Z10BlynkDelaym>
        if (w == 0) {
   d68ec:	2e00      	cmp	r6, #0
   d68ee:	d145      	bne.n	d697c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x174>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
   d68f0:	f7ff fb76 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d68f4:	f006 fa00 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d68f8:	4936      	ldr	r1, [pc, #216]	; (d69d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1cc>)
   d68fa:	f006 f84d 	bl	dc998 <_ZN5Print7printlnEPKc>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d68fe:	6820      	ldr	r0, [r4, #0]
   d6900:	f004 fe2e 	bl	db560 <_ZN9TCPClient4stopEv>
#endif
            conn.disconnect();
            state = CONNECTING;
   d6904:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d6906:	f002 ff57 	bl	d97b8 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d690a:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d690c:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d690e:	46bd      	mov	sp, r7
   d6910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d6914:	8b23      	ldrh	r3, [r4, #24]
   d6916:	3301      	adds	r3, #1
   d6918:	b29b      	uxth	r3, r3
   d691a:	b903      	cbnz	r3, d691e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x116>
        msgIdOut = 1;
   d691c:	2301      	movs	r3, #1
   d691e:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d6920:	8b26      	ldrh	r6, [r4, #24]
   d6922:	e790      	b.n	d6846 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3e>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d6924:	68e3      	ldr	r3, [r4, #12]
   d6926:	6922      	ldr	r2, [r4, #16]
   d6928:	4293      	cmp	r3, r2
   d692a:	bf38      	it	cc
   d692c:	4613      	movcc	r3, r2
   d692e:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d6932:	f002 ff5b 	bl	d97ec <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d6936:	ebc0 0008 	rsb	r0, r0, r8
   d693a:	2800      	cmp	r0, #0
   d693c:	db0a      	blt.n	d6954 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14c>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d693e:	2100      	movs	r1, #0
   d6940:	4620      	mov	r0, r4
   d6942:	f7ff fe95 	bl	d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d6946:	f002 ff51 	bl	d97ec <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d694a:	ebc0 0008 	rsb	r0, r0, r8
   d694e:	2800      	cmp	r0, #0
   d6950:	daf5      	bge.n	d693e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x136>
   d6952:	e77c      	b.n	d684e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d6954:	7f21      	ldrb	r1, [r4, #28]
   d6956:	2900      	cmp	r1, #0
   d6958:	f47f af79 	bne.w	d684e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
            run();
   d695c:	4620      	mov	r0, r4
   d695e:	f7ff fe87 	bl	d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d6962:	e774      	b.n	d684e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d6964:	2005      	movs	r0, #5
   d6966:	e7a2      	b.n	d68ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa6>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d6968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d696a:	2b00      	cmp	r3, #0
   d696c:	d0a2      	beq.n	d68b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        memcpy(buff + pos, data2, length2);
   d696e:	461a      	mov	r2, r3
   d6970:	687b      	ldr	r3, [r7, #4]
   d6972:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d6974:	4418      	add	r0, r3
   d6976:	f00d fb1d 	bl	e3fb4 <memcpy>
   d697a:	e79b      	b.n	d68b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d697c:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d697e:	e79a      	b.n	d68b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xae>
        }
    }

#endif

    if (wlen != full_length) {
   d6980:	d01b      	beq.n	d69ba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1b2>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
   d6982:	f7ff fb2d 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6986:	f006 f9b7 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d698a:	4913      	ldr	r1, [pc, #76]	; (d69d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>)
   d698c:	f005 fff1 	bl	dc972 <_ZN5Print5printEPKc>
   d6990:	f006 f9b2 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6994:	220a      	movs	r2, #10
   d6996:	4629      	mov	r1, r5
   d6998:	f7ff fb15 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
   d699c:	f006 f9ac 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d69a0:	212f      	movs	r1, #47	; 0x2f
   d69a2:	f005 ffea 	bl	dc97a <_ZN5Print5printEc>
   d69a6:	f006 f9a7 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d69aa:	220a      	movs	r2, #10
   d69ac:	4641      	mov	r1, r8
   d69ae:	f7ff fc09 	bl	d61c4 <_ZN5Print7printlnImLi0EEEjT_i>
#endif
        internalReconnect();
   d69b2:	4620      	mov	r0, r4
   d69b4:	f7ff fbfc 	bl	d61b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d69b8:	e7a7      	b.n	d690a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
    }

    lastActivityOut = BlynkMillis();
   d69ba:	f002 ff17 	bl	d97ec <_Z11BlynkMillisv>
   d69be:	6120      	str	r0, [r4, #16]
   d69c0:	e7a3      	b.n	d690a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x102>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d69c2:	2e00      	cmp	r6, #0
   d69c4:	f47f af43 	bne.w	d684e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
   d69c8:	e73a      	b.n	d6840 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x38>
   d69ca:	bf00      	nop
   d69cc:	20000045 	.word	0x20000045
   d69d0:	000e7a4a 	.word	0x000e7a4a
   d69d4:	000e7a4c 	.word	0x000e7a4c
   d69d8:	000e7a56 	.word	0x000e7a56

000d69dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d69dc:	b500      	push	{lr}
   d69de:	b095      	sub	sp, #84	; 0x54
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d69e0:	ab04      	add	r3, sp, #16
   d69e2:	2200      	movs	r2, #0
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	2349      	movs	r3, #73	; 0x49
   d69e8:	9300      	str	r3, [sp, #0]
   d69ea:	9202      	str	r2, [sp, #8]
   d69ec:	4b03      	ldr	r3, [pc, #12]	; (d69fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d69ee:	2111      	movs	r1, #17
   d69f0:	f7ff ff0a 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d69f4:	b015      	add	sp, #84	; 0x54
   d69f6:	f85d fb04 	ldr.w	pc, [sp], #4
   d69fa:	bf00      	nop
   d69fc:	000e75cc 	.word	0x000e75cc

000d6a00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d6a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d6a04:	188e      	adds	r6, r1, r2
   d6a06:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d6a08:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d6a0a:	4680      	mov	r8, r0
   d6a0c:	460d      	mov	r5, r1
   d6a0e:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d6a10:	9105      	str	r1, [sp, #20]
   d6a12:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d6a14:	f080 813d 	bcs.w	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d6a18:	880b      	ldrh	r3, [r1, #0]
   d6a1a:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d6a1e:	a805      	add	r0, sp, #20
   d6a20:	f7fe fed8 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6a24:	6803      	ldr	r3, [r0, #0]
   d6a26:	429e      	cmp	r6, r3
   d6a28:	f240 8133 	bls.w	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d6a2c:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d6a2e:	7803      	ldrb	r3, [r0, #0]
   d6a30:	2b41      	cmp	r3, #65	; 0x41
   d6a32:	d112      	bne.n	d6a5a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5a>
   d6a34:	3001      	adds	r0, #1
   d6a36:	f00d f9aa 	bl	e3d8e <atoi>
   d6a3a:	2805      	cmp	r0, #5
   d6a3c:	dd01      	ble.n	d6a42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d6a3e:	24ff      	movs	r4, #255	; 0xff
   d6a40:	e00f      	b.n	d6a62 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x62>
   d6a42:	9805      	ldr	r0, [sp, #20]
   d6a44:	3001      	adds	r0, #1
   d6a46:	f00d f9a2 	bl	e3d8e <atoi>
   d6a4a:	2800      	cmp	r0, #0
   d6a4c:	dbf7      	blt.n	d6a3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d6a4e:	9805      	ldr	r0, [sp, #20]
   d6a50:	3001      	adds	r0, #1
   d6a52:	f00d f99c 	bl	e3d8e <atoi>
   d6a56:	300e      	adds	r0, #14
   d6a58:	e002      	b.n	d6a60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d6a5a:	a805      	add	r0, sp, #20
   d6a5c:	f7fe feb0 	bl	d57c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d6a60:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d6a62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d6a66:	f247 2276 	movw	r2, #29302	; 0x7276
   d6a6a:	4293      	cmp	r3, r2
   d6a6c:	f000 80b7 	beq.w	d6bde <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1de>
   d6a70:	d80d      	bhi.n	d6a8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d6a72:	f247 2261 	movw	r2, #29281	; 0x7261
   d6a76:	4293      	cmp	r3, r2
   d6a78:	d07d      	beq.n	d6b76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x176>
   d6a7a:	f247 2264 	movw	r2, #29284	; 0x7264
   d6a7e:	4293      	cmp	r3, r2
   d6a80:	d051      	beq.n	d6b26 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d6a82:	f646 5270 	movw	r2, #28016	; 0x6d70
   d6a86:	4293      	cmp	r3, r2
   d6a88:	f040 80d4 	bne.w	d6c34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d6a8c:	e027      	b.n	d6ade <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xde>
   d6a8e:	f247 7264 	movw	r2, #30564	; 0x7764
   d6a92:	4293      	cmp	r3, r2
   d6a94:	d059      	beq.n	d6b4a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d6a96:	f247 7276 	movw	r2, #30582	; 0x7776
   d6a9a:	4293      	cmp	r3, r2
   d6a9c:	f000 80b0 	beq.w	d6c00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>
   d6aa0:	f247 7261 	movw	r2, #30561	; 0x7761
   d6aa4:	4293      	cmp	r3, r2
   d6aa6:	f040 80c5 	bne.w	d6c34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x234>
   d6aaa:	e085      	b.n	d6bb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b8>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d6aac:	7803      	ldrb	r3, [r0, #0]
   d6aae:	2b41      	cmp	r3, #65	; 0x41
   d6ab0:	d125      	bne.n	d6afe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfe>
   d6ab2:	3001      	adds	r0, #1
   d6ab4:	f00d f96b 	bl	e3d8e <atoi>
   d6ab8:	2805      	cmp	r0, #5
   d6aba:	dd14      	ble.n	d6ae6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>
   d6abc:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d6abe:	a805      	add	r0, sp, #20
   d6ac0:	f7fe fe88 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6ac4:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d6ac6:	4974      	ldr	r1, [pc, #464]	; (d6c98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x298>)
   d6ac8:	4628      	mov	r0, r5
   d6aca:	f00d fcfd 	bl	e44c8 <strcmp>
   d6ace:	4601      	mov	r1, r0
   d6ad0:	b9d0      	cbnz	r0, d6b08 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x108>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	f006 fd88 	bl	dd5e8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d6ad8:	a805      	add	r0, sp, #20
   d6ada:	f7fe fe7b 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6ade:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d6ae0:	4286      	cmp	r6, r0
   d6ae2:	d8e3      	bhi.n	d6aac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xac>
   d6ae4:	e0d5      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d6ae6:	9805      	ldr	r0, [sp, #20]
   d6ae8:	3001      	adds	r0, #1
   d6aea:	f00d f950 	bl	e3d8e <atoi>
   d6aee:	2800      	cmp	r0, #0
   d6af0:	dbe4      	blt.n	d6abc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbc>
   d6af2:	9805      	ldr	r0, [sp, #20]
   d6af4:	3001      	adds	r0, #1
   d6af6:	f00d f94a 	bl	e3d8e <atoi>
   d6afa:	300e      	adds	r0, #14
   d6afc:	e002      	b.n	d6b04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x104>
   d6afe:	a805      	add	r0, sp, #20
   d6b00:	f7fe fe5e 	bl	d57c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d6b04:	b2c4      	uxtb	r4, r0
   d6b06:	e7da      	b.n	d6abe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d6b08:	4964      	ldr	r1, [pc, #400]	; (d6c9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x29c>)
   d6b0a:	4628      	mov	r0, r5
   d6b0c:	f00d fcdc 	bl	e44c8 <strcmp>
   d6b10:	2800      	cmp	r0, #0
   d6b12:	f000 80a4 	beq.w	d6c5e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d6b16:	4962      	ldr	r1, [pc, #392]	; (d6ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a0>)
   d6b18:	4628      	mov	r0, r5
   d6b1a:	f00d fcd5 	bl	e44c8 <strcmp>
   d6b1e:	2800      	cmp	r0, #0
   d6b20:	f000 809d 	beq.w	d6c5e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25e>
   d6b24:	e09d      	b.n	d6c62 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x262>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6b26:	ab0a      	add	r3, sp, #40	; 0x28
   d6b28:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d6b2a:	a807      	add	r0, sp, #28
   d6b2c:	2310      	movs	r3, #16
   d6b2e:	2500      	movs	r5, #0
   d6b30:	495c      	ldr	r1, [pc, #368]	; (d6ca4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a4>)
   d6b32:	9309      	str	r3, [sp, #36]	; 0x24
   d6b34:	9508      	str	r5, [sp, #32]
   d6b36:	f7fe fe5c 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d6b3a:	a807      	add	r0, sp, #28
   d6b3c:	4621      	mov	r1, r4
   d6b3e:	f7fe fe75 	bl	d582c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d6b42:	4620      	mov	r0, r4
   d6b44:	f006 fd7a 	bl	dd63c <digitalRead>
   d6b48:	e026      	b.n	d6b98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x198>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d6b4a:	a805      	add	r0, sp, #20
   d6b4c:	f7fe fe42 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6b50:	6803      	ldr	r3, [r0, #0]
   d6b52:	429e      	cmp	r6, r3
   d6b54:	f240 809d 	bls.w	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d6b58:	b2a4      	uxth	r4, r4
   d6b5a:	2101      	movs	r1, #1
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	f006 fd43 	bl	dd5e8 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d6b62:	a805      	add	r0, sp, #20
   d6b64:	f7fe fe2c 	bl	d57c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d6b68:	1c01      	adds	r1, r0, #0
   d6b6a:	bf18      	it	ne
   d6b6c:	2101      	movne	r1, #1
   d6b6e:	4620      	mov	r0, r4
   d6b70:	f006 fd4b 	bl	dd60a <digitalWrite>
    } break;
   d6b74:	e08d      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
   d6b76:	ab0a      	add	r3, sp, #40	; 0x28
   d6b78:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d6b7a:	494b      	ldr	r1, [pc, #300]	; (d6ca8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2a8>)
   d6b7c:	2310      	movs	r3, #16
   d6b7e:	a807      	add	r0, sp, #28
   d6b80:	2500      	movs	r5, #0
   d6b82:	9309      	str	r3, [sp, #36]	; 0x24
   d6b84:	9508      	str	r5, [sp, #32]
   d6b86:	f7fe fe34 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d6b8a:	a807      	add	r0, sp, #28
   d6b8c:	4621      	mov	r1, r4
   d6b8e:	f7fe fe4d 	bl	d582c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d6b92:	4620      	mov	r0, r4
   d6b94:	f006 fd65 	bl	dd662 <analogRead>
   d6b98:	4601      	mov	r1, r0
   d6b9a:	a807      	add	r0, sp, #28
   d6b9c:	f7fe fe58 	bl	d5850 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d6ba0:	9b08      	ldr	r3, [sp, #32]
   d6ba2:	9502      	str	r5, [sp, #8]
   d6ba4:	3b01      	subs	r3, #1
   d6ba6:	9300      	str	r3, [sp, #0]
   d6ba8:	9b07      	ldr	r3, [sp, #28]
   d6baa:	9501      	str	r5, [sp, #4]
   d6bac:	462a      	mov	r2, r5
   d6bae:	2114      	movs	r1, #20
   d6bb0:	4640      	mov	r0, r8
   d6bb2:	f7ff fe29 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d6bb6:	e06c      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d6bb8:	a805      	add	r0, sp, #20
   d6bba:	f7fe fe0b 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6bbe:	6803      	ldr	r3, [r0, #0]
   d6bc0:	429e      	cmp	r6, r3
   d6bc2:	d966      	bls.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d6bc4:	b2a4      	uxth	r4, r4
   d6bc6:	2101      	movs	r1, #1
   d6bc8:	4620      	mov	r0, r4
   d6bca:	f006 fd0d 	bl	dd5e8 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d6bce:	a805      	add	r0, sp, #20
   d6bd0:	f7fe fdf6 	bl	d57c0 <_ZNK10BlynkParam8iterator5asIntEv>
   d6bd4:	4601      	mov	r1, r0
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	f006 fd5a 	bl	dd690 <_Z11analogWritetm>
    } break;
   d6bdc:	e059      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d6bde:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d6be0:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d6be2:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d6be6:	f002 fde9 	bl	d97bc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d6bea:	4603      	mov	r3, r0
            handler(req);
   d6bec:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d6bee:	b123      	cbz	r3, d6bfa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
   d6bf0:	4a2e      	ldr	r2, [pc, #184]	; (d6cac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2ac>)
   d6bf2:	4293      	cmp	r3, r2
   d6bf4:	d001      	beq.n	d6bfa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fa>
            handler(req);
   d6bf6:	4798      	blx	r3
   d6bf8:	e04b      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetReadDefault(req);
   d6bfa:	f002 fddb 	bl	d97b4 <BlynkWidgetRead>
        }
    } break;
   d6bfe:	e048      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    case BLYNK_HW_VW: {
        ++it;
   d6c00:	a805      	add	r0, sp, #20
   d6c02:	f7fe fde7 	bl	d57d4 <_ZN10BlynkParam8iteratorppEv>
   d6c06:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d6c08:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d6c0a:	1b5d      	subs	r5, r3, r5
   d6c0c:	1b7f      	subs	r7, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d6c0e:	4620      	mov	r0, r4
   d6c10:	970b      	str	r7, [sp, #44]	; 0x2c
   d6c12:	970c      	str	r7, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d6c14:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d6c18:	f002 fdda 	bl	d97d0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d6c1c:	4603      	mov	r3, r0
            handler(req, param2);
   d6c1e:	a90a      	add	r1, sp, #40	; 0x28
   d6c20:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d6c22:	b123      	cbz	r3, d6c2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
   d6c24:	4a22      	ldr	r2, [pc, #136]	; (d6cb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b0>)
   d6c26:	4293      	cmp	r3, r2
   d6c28:	d001      	beq.n	d6c2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22e>
            handler(req, param2);
   d6c2a:	4798      	blx	r3
   d6c2c:	e031      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d6c2e:	f002 fdc2 	bl	d97b6 <BlynkWidgetWrite>
        }
    } break;
   d6c32:	e02e      	b.n	d6c92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x292>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
   d6c34:	f7ff f9d4 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6c38:	f006 f85e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6c3c:	491d      	ldr	r1, [pc, #116]	; (d6cb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b4>)
   d6c3e:	f005 fe98 	bl	dc972 <_ZN5Print5printEPKc>
   d6c42:	f006 f859 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6c46:	4629      	mov	r1, r5
   d6c48:	f005 fea6 	bl	dc998 <_ZN5Print7printlnEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d6c4c:	2300      	movs	r3, #0
   d6c4e:	2102      	movs	r1, #2
   d6c50:	9100      	str	r1, [sp, #0]
   d6c52:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d6c56:	9302      	str	r3, [sp, #8]
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	4619      	mov	r1, r3
   d6c5c:	e7a8      	b.n	d6bb0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b0>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d6c5e:	2101      	movs	r1, #1
   d6c60:	e737      	b.n	d6ad2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd2>
            } else if (!strcmp(it.asStr(), "pd")) {
                pinMode(pin, INPUT_PULLDOWN);
#endif
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
   d6c62:	f7ff f9bd 	bl	d5fe0 <_ZL14BLYNK_LOG_TIMEv>
   d6c66:	f006 f847 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6c6a:	4913      	ldr	r1, [pc, #76]	; (d6cb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2b8>)
   d6c6c:	f005 fe81 	bl	dc972 <_ZN5Print5printEPKc>
   d6c70:	f006 f842 	bl	dccf8 <_Z22__fetch_global_Serial1v>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6c74:	220a      	movs	r2, #10
   d6c76:	4621      	mov	r1, r4
   d6c78:	f005 fe98 	bl	dc9ac <_ZN5Print11printNumberEmh>
   d6c7c:	f006 f83c 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6c80:	490e      	ldr	r1, [pc, #56]	; (d6cbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x2bc>)
   d6c82:	f005 fe76 	bl	dc972 <_ZN5Print5printEPKc>
   d6c86:	f006 f837 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6c8a:	9905      	ldr	r1, [sp, #20]
   d6c8c:	f005 fe84 	bl	dc998 <_ZN5Print7printlnEPKc>
   d6c90:	e722      	b.n	d6ad8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd8>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d6c92:	b00e      	add	sp, #56	; 0x38
   d6c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c98:	000e74b5 	.word	0x000e74b5
   d6c9c:	000e7a46 	.word	0x000e7a46
   d6ca0:	000e7a5c 	.word	0x000e7a5c
   d6ca4:	000e7a60 	.word	0x000e7a60
   d6ca8:	000e7a63 	.word	0x000e7a63
   d6cac:	000d97b5 	.word	0x000d97b5
   d6cb0:	000d97b7 	.word	0x000d97b7
   d6cb4:	000e7a66 	.word	0x000e7a66
   d6cb8:	000e7a77 	.word	0x000e7a77
   d6cbc:	000e7a84 	.word	0x000e7a84

000d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cc2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6cc6:	ab08      	add	r3, sp, #32
   d6cc8:	2400      	movs	r4, #0
   d6cca:	4605      	mov	r5, r0
   d6ccc:	460f      	mov	r7, r1
   d6cce:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6cd0:	a805      	add	r0, sp, #20
   d6cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6cd6:	490e      	ldr	r1, [pc, #56]	; (d6d10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_+0x50>)
   d6cd8:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6cda:	4616      	mov	r6, r2
   d6cdc:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6cde:	f7fe fd88 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6ce2:	4639      	mov	r1, r7
   d6ce4:	a805      	add	r0, sp, #20
   d6ce6:	f7fe fda1 	bl	d582c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d6cea:	4631      	mov	r1, r6
   d6cec:	a805      	add	r0, sp, #20
   d6cee:	f7fe fd9d 	bl	d582c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6cf2:	9b06      	ldr	r3, [sp, #24]
   d6cf4:	9402      	str	r4, [sp, #8]
   d6cf6:	3b01      	subs	r3, #1
   d6cf8:	9300      	str	r3, [sp, #0]
   d6cfa:	9401      	str	r4, [sp, #4]
   d6cfc:	9b05      	ldr	r3, [sp, #20]
   d6cfe:	4622      	mov	r2, r4
   d6d00:	2114      	movs	r1, #20
   d6d02:	4628      	mov	r0, r5
   d6d04:	f7ff fd80 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6d08:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d6d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d0e:	bf00      	nop
   d6d10:	000e7a8b 	.word	0x000e7a8b

000d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d16:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6d1a:	ab0c      	add	r3, sp, #48	; 0x30
   d6d1c:	2400      	movs	r4, #0
   d6d1e:	4605      	mov	r5, r0
   d6d20:	460f      	mov	r7, r1
   d6d22:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6d24:	a805      	add	r0, sp, #20
   d6d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6d2a:	4911      	ldr	r1, [pc, #68]	; (d6d70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_+0x5c>)
   d6d2c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6d2e:	4616      	mov	r6, r2
   d6d30:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6d32:	f7fe fd5e 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6d36:	4639      	mov	r1, r7
   d6d38:	a805      	add	r0, sp, #20
   d6d3a:	f7fe fd77 	bl	d582c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
   d6d3e:	4631      	mov	r1, r6
   d6d40:	a808      	add	r0, sp, #32
   d6d42:	f006 fa9d 	bl	dd280 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6d46:	9908      	ldr	r1, [sp, #32]
   d6d48:	a805      	add	r0, sp, #20
   d6d4a:	f7fe fd52 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
   d6d4e:	a808      	add	r0, sp, #32
   d6d50:	f006 fa10 	bl	dd174 <_ZN6StringD1Ev>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6d54:	9b06      	ldr	r3, [sp, #24]
   d6d56:	9402      	str	r4, [sp, #8]
   d6d58:	3b01      	subs	r3, #1
   d6d5a:	9300      	str	r3, [sp, #0]
   d6d5c:	9401      	str	r4, [sp, #4]
   d6d5e:	9b05      	ldr	r3, [sp, #20]
   d6d60:	4622      	mov	r2, r4
   d6d62:	2114      	movs	r1, #20
   d6d64:	4628      	mov	r0, r5
   d6d66:	f7ff fd4f 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6d6a:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d6d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6d70:	000e7a8b 	.word	0x000e7a8b

000d6d74 <_Z9deepSleepv>:
  saveState();
  setAppWidgets();
}

void deepSleep()
{
   d6d74:	b570      	push	{r4, r5, r6, lr}
   d6d76:	b092      	sub	sp, #72	; 0x48
  String statusMessage;
   d6d78:	4962      	ldr	r1, [pc, #392]	; (d6f04 <_Z9deepSleepv+0x190>)
  StateString = "STBY";
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d6d7a:	4c63      	ldr	r4, [pc, #396]	; (d6f08 <_Z9deepSleepv+0x194>)
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6d7c:	a806      	add	r0, sp, #24
   d6d7e:	f006 fa40 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  StateString = "STBY";
   d6d82:	4962      	ldr	r1, [pc, #392]	; (d6f0c <_Z9deepSleepv+0x198>)
   d6d84:	4862      	ldr	r0, [pc, #392]	; (d6f10 <_Z9deepSleepv+0x19c>)
   d6d86:	f006 fa8e 	bl	dd2a6 <_ZN6StringaSEPKc>
   d6d8a:	f003 ff13 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsed = millis() - CycleOnTime;
  state.OnTime=state.OnTime+elapsed;
   d6d8e:	4a61      	ldr	r2, [pc, #388]	; (d6f14 <_Z9deepSleepv+0x1a0>)
   d6d90:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
   d6d94:	6812      	ldr	r2, [r2, #0]
   d6d96:	1a9b      	subs	r3, r3, r2
   d6d98:	4418      	add	r0, r3
   d6d9a:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
  //Save
  saveState();
   d6d9e:	f7fe fdd3 	bl	d5948 <_Z9saveStatev>

  if (timeSynced)
   d6da2:	4b5d      	ldr	r3, [pc, #372]	; (d6f18 <_Z9deepSleepv+0x1a4>)
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6da4:	495a      	ldr	r1, [pc, #360]	; (d6f10 <_Z9deepSleepv+0x19c>)
   d6da6:	781b      	ldrb	r3, [r3, #0]
   d6da8:	b343      	cbz	r3, d6dfc <_Z9deepSleepv+0x88>
   d6daa:	a80a      	add	r0, sp, #40	; 0x28
   d6dac:	f006 fa68 	bl	dd280 <_ZN6StringC1ERKS_>
  {
       statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d6db0:	495a      	ldr	r1, [pc, #360]	; (d6f1c <_Z9deepSleepv+0x1a8>)
   d6db2:	a80a      	add	r0, sp, #40	; 0x28
   d6db4:	f006 fb07 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d6db8:	4605      	mov	r5, r0
   d6dba:	4859      	ldr	r0, [pc, #356]	; (d6f20 <_Z9deepSleepv+0x1ac>)
   d6dbc:	f003 fd38 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d6dc0:	4b58      	ldr	r3, [pc, #352]	; (d6f24 <_Z9deepSleepv+0x1b0>)
   d6dc2:	4959      	ldr	r1, [pc, #356]	; (d6f28 <_Z9deepSleepv+0x1b4>)
   d6dc4:	681a      	ldr	r2, [r3, #0]
   d6dc6:	4b59      	ldr	r3, [pc, #356]	; (d6f2c <_Z9deepSleepv+0x1b8>)
   d6dc8:	4402      	add	r2, r0
   d6dca:	a80e      	add	r0, sp, #56	; 0x38
   d6dcc:	f005 fd12 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
   d6dd0:	a90e      	add	r1, sp, #56	; 0x38
   d6dd2:	4628      	mov	r0, r5
   d6dd4:	f006 faeb 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d6dd8:	4950      	ldr	r1, [pc, #320]	; (d6f1c <_Z9deepSleepv+0x1a8>)
   d6dda:	f006 faf4 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d6dde:	4954      	ldr	r1, [pc, #336]	; (d6f30 <_Z9deepSleepv+0x1bc>)
   d6de0:	f006 fae5 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d6de4:	4953      	ldr	r1, [pc, #332]	; (d6f34 <_Z9deepSleepv+0x1c0>)
   d6de6:	f006 faee 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d6dea:	4601      	mov	r1, r0
   d6dec:	a806      	add	r0, sp, #24
   d6dee:	f006 fa38 	bl	dd262 <_ZN6StringaSERKS_>
   d6df2:	a80e      	add	r0, sp, #56	; 0x38
   d6df4:	f006 f9be 	bl	dd174 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6df8:	a80a      	add	r0, sp, #40	; 0x28
   d6dfa:	e011      	b.n	d6e20 <_Z9deepSleepv+0xac>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d6dfc:	a80e      	add	r0, sp, #56	; 0x38
   d6dfe:	f006 fa3f 	bl	dd280 <_ZN6StringC1ERKS_>

  }
  else
  {
       statusMessage = StateString+"                "+field7+"%";
   d6e02:	494d      	ldr	r1, [pc, #308]	; (d6f38 <_Z9deepSleepv+0x1c4>)
   d6e04:	a80e      	add	r0, sp, #56	; 0x38
   d6e06:	f006 fade 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d6e0a:	4949      	ldr	r1, [pc, #292]	; (d6f30 <_Z9deepSleepv+0x1bc>)
   d6e0c:	f006 facf 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d6e10:	4948      	ldr	r1, [pc, #288]	; (d6f34 <_Z9deepSleepv+0x1c0>)
   d6e12:	f006 fad8 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d6e16:	4601      	mov	r1, r0
   d6e18:	a806      	add	r0, sp, #24
   d6e1a:	f006 fa22 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d6e1e:	a80e      	add	r0, sp, #56	; 0x38
   d6e20:	f006 f9a8 	bl	dd174 <_ZN6StringD1Ev>
  }
  Blynk.virtualWrite(V30,statusMessage);
   d6e24:	a906      	add	r1, sp, #24
   d6e26:	a80e      	add	r0, sp, #56	; 0x38
   d6e28:	f006 fa2a 	bl	dd280 <_ZN6StringC1ERKS_>
   d6e2c:	aa0e      	add	r2, sp, #56	; 0x38
   d6e2e:	211e      	movs	r1, #30
   d6e30:	4842      	ldr	r0, [pc, #264]	; (d6f3c <_Z9deepSleepv+0x1c8>)
   d6e32:	f7ff ff6f 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d6e36:	a80e      	add	r0, sp, #56	; 0x38
   d6e38:	f006 f99c 	bl	dd174 <_ZN6StringD1Ev>
  delay(3000);
   d6e3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d6e40:	f005 fd6e 	bl	dc920 <delay>
  power.setPowerON(EXT3V3,false);
   d6e44:	2200      	movs	r2, #0
   d6e46:	2102      	movs	r1, #2
   d6e48:	483d      	ldr	r0, [pc, #244]	; (d6f40 <_Z9deepSleepv+0x1cc>)
   d6e4a:	f003 fadf 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,false);
   d6e4e:	2200      	movs	r2, #0
   d6e50:	2103      	movs	r1, #3
   d6e52:	483b      	ldr	r0, [pc, #236]	; (d6f40 <_Z9deepSleepv+0x1cc>)
   d6e54:	f003 fada 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
   d6e58:	f006 fb6a 	bl	dd530 <_Z19__fetch_global_Wirev>
   d6e5c:	f004 fe9b 	bl	dbb96 <_ZN7TwoWire9isEnabledEv>
   d6e60:	b918      	cbnz	r0, d6e6a <_Z9deepSleepv+0xf6>
    Wire.end();
   d6e62:	f006 fb65 	bl	dd530 <_Z19__fetch_global_Wirev>
   d6e66:	f004 fe53 	bl	dbb10 <_ZN7TwoWire3endEv>
  }  

  debug("Going to sleep\n");
   d6e6a:	f005 ff45 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6e6e:	4935      	ldr	r1, [pc, #212]	; (d6f44 <_Z9deepSleepv+0x1d0>)
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d6e70:	4d25      	ldr	r5, [pc, #148]	; (d6f08 <_Z9deepSleepv+0x194>)
  // Release I2C bus for expander
  if (!Wire.isEnabled()) {
    Wire.end();
  }  

  debug("Going to sleep\n");
   d6e72:	f005 fd7e 	bl	dc972 <_ZN5Print5printEPKc>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6e76:	4834      	ldr	r0, [pc, #208]	; (d6f48 <_Z9deepSleepv+0x1d4>)
   d6e78:	2300      	movs	r3, #0
   d6e7a:	461a      	mov	r2, r3
   d6e7c:	4619      	mov	r1, r3
   d6e7e:	6840      	ldr	r0, [r0, #4]
   d6e80:	f003 ffda 	bl	dae38 <network_off>
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d6e84:	2300      	movs	r3, #0
  state.bInSleepMode=false;
  #endif  

  delay(1000);
   d6e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    Cellular.off();
  #endif
  #if Wiring_WiFi
  WiFi.off();
  // For wifi FORCE DEEPSLEEP no stanby
  state.bSleepModeStandby=false;
   d6e8a:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d6e8e:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  #endif  

  delay(1000);
   d6e92:	f005 fd45 	bl	dc920 <delay>
  if (state.bSleepModeStandby){
   d6e96:	f894 4424 	ldrb.w	r4, [r4, #1060]	; 0x424
   d6e9a:	b1cc      	cbz	r4, d6ed0 <_Z9deepSleepv+0x15c>
    debug("Going to standby sleep\n");
   d6e9c:	f005 ff2c 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6ea0:	492a      	ldr	r1, [pc, #168]	; (d6f4c <_Z9deepSleepv+0x1d8>)
   d6ea2:	f005 fd66 	bl	dc972 <_ZN5Print5printEPKc>
   d6ea6:	4b2a      	ldr	r3, [pc, #168]	; (d6f50 <_Z9deepSleepv+0x1dc>)
   d6ea8:	6819      	ldr	r1, [r3, #0]
   d6eaa:	2308      	movs	r3, #8
   d6eac:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   d6eb0:	ab12      	add	r3, sp, #72	; 0x48
    state.bInSleepMode=true;
   d6eb2:	2201      	movs	r2, #1
   d6eb4:	f885 2425 	strb.w	r2, [r5, #1061]	; 0x425
   d6eb8:	f803 2d31 	strb.w	r2, [r3, #-49]!
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d6ebc:	9102      	str	r1, [sp, #8]
   d6ebe:	f44f 7161 	mov.w	r1, #900	; 0x384
   d6ec2:	9101      	str	r1, [sp, #4]
   d6ec4:	9200      	str	r2, [sp, #0]
   d6ec6:	a90a      	add	r1, sp, #40	; 0x28
   d6ec8:	a80e      	add	r0, sp, #56	; 0x38
   d6eca:	f006 f835 	bl	dcf38 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d6ece:	e014      	b.n	d6efa <_Z9deepSleepv+0x186>
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    debug("Going to deep sleep\n");
   d6ed0:	f005 ff12 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d6ed4:	491f      	ldr	r1, [pc, #124]	; (d6f54 <_Z9deepSleepv+0x1e0>)
   d6ed6:	f005 fd4c 	bl	dc972 <_ZN5Print5printEPKc>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
   d6eda:	2601      	movs	r6, #1
    delay(2000);
   d6edc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    System.sleep(D8, RISING, 900, SLEEP_NETWORK_STANDBY);
    return;
  }
  else{
    debug("Going to deep sleep\n");
    state.bSleepModeStandby=false;
   d6ee0:	f885 4424 	strb.w	r4, [r5, #1060]	; 0x424
    state.bInSleepMode=true;
   d6ee4:	f885 6425 	strb.w	r6, [r5, #1061]	; 0x425
    delay(2000);
   d6ee8:	f005 fd1a 	bl	dc920 <delay>
    System.sleep(SLEEP_MODE_DEEP); 
   d6eec:	4b1a      	ldr	r3, [pc, #104]	; (d6f58 <_Z9deepSleepv+0x1e4>)
   d6eee:	4622      	mov	r2, r4
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	4631      	mov	r1, r6
   d6ef4:	a80e      	add	r0, sp, #56	; 0x38
   d6ef6:	f005 ffe1 	bl	dcebc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  setAppWidgets();
}

void deepSleep()
{
  String statusMessage;
   d6efa:	a806      	add	r0, sp, #24
   d6efc:	f006 f93a 	bl	dd174 <_ZN6StringD1Ev>
    state.bSleepModeStandby=false;
    state.bInSleepMode=true;
    delay(2000);
    System.sleep(SLEEP_MODE_DEEP); 
    }
}
   d6f00:	b012      	add	sp, #72	; 0x48
   d6f02:	bd70      	pop	{r4, r5, r6, pc}
   d6f04:	000e7963 	.word	0x000e7963
   d6f08:	2003db78 	.word	0x2003db78
   d6f0c:	000e7a8e 	.word	0x000e7a8e
   d6f10:	2003d8cc 	.word	0x2003d8cc
   d6f14:	2003e02c 	.word	0x2003e02c
   d6f18:	2003dfa5 	.word	0x2003dfa5
   d6f1c:	000e7aac 	.word	0x000e7aac
   d6f20:	2003e028 	.word	0x2003e028
   d6f24:	2003d6b4 	.word	0x2003d6b4
   d6f28:	2003e5c8 	.word	0x2003e5c8
   d6f2c:	000e7a93 	.word	0x000e7a93
   d6f30:	2003d8dc 	.word	0x2003d8dc
   d6f34:	000e7a9b 	.word	0x000e7a9b
   d6f38:	000e7a9d 	.word	0x000e7a9d
   d6f3c:	2003e338 	.word	0x2003e338
   d6f40:	2003dfa4 	.word	0x2003dfa4
   d6f44:	000e7aae 	.word	0x000e7aae
   d6f48:	2003e55c 	.word	0x2003e55c
   d6f4c:	000e7abe 	.word	0x000e7abe
   d6f50:	2003dfc0 	.word	0x2003dfc0
   d6f54:	000e7ad6 	.word	0x000e7ad6
   d6f58:	2003e024 	.word	0x2003e024

000d6f5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f5e:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6f62:	ab0c      	add	r3, sp, #48	; 0x30
   d6f64:	2400      	movs	r4, #0
   d6f66:	4605      	mov	r5, r0
   d6f68:	460f      	mov	r7, r1
   d6f6a:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6f6c:	a805      	add	r0, sp, #20
   d6f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6f72:	4911      	ldr	r1, [pc, #68]	; (d6fb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_+0x5c>)
   d6f74:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6f76:	4616      	mov	r6, r2
   d6f78:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6f7a:	f7fe fc3a 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6f7e:	4639      	mov	r1, r7
   d6f80:	a805      	add	r0, sp, #20
   d6f82:	f7fe fc53 	bl	d582c <_ZN10BlynkParam3addEi>
   d6f86:	4631      	mov	r1, r6
   d6f88:	a808      	add	r0, sp, #32
   d6f8a:	f006 f979 	bl	dd280 <_ZN6StringC1ERKS_>
    size_t len = str.length()+1;
    char buff[len];
    const_cast<String&>(str).toCharArray(buff, len);
    add(buff, len);
#else
    add(str.c_str());
   d6f8e:	9908      	ldr	r1, [sp, #32]
   d6f90:	a805      	add	r0, sp, #20
   d6f92:	f7fe fc2e 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
   d6f96:	a808      	add	r0, sp, #32
   d6f98:	f006 f8ec 	bl	dd174 <_ZN6StringD1Ev>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d6f9c:	9b06      	ldr	r3, [sp, #24]
   d6f9e:	9402      	str	r4, [sp, #8]
   d6fa0:	3b01      	subs	r3, #1
   d6fa2:	9300      	str	r3, [sp, #0]
   d6fa4:	9401      	str	r4, [sp, #4]
   d6fa6:	9b05      	ldr	r3, [sp, #20]
   d6fa8:	4622      	mov	r2, r4
   d6faa:	2114      	movs	r1, #20
   d6fac:	4628      	mov	r0, r5
   d6fae:	f7ff fc2b 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d6fb2:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
   d6fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6fb8:	000e7a8b 	.word	0x000e7a8b

000d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fbe:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d6fc2:	ab0a      	add	r3, sp, #40	; 0x28
   d6fc4:	2400      	movs	r4, #0
   d6fc6:	4606      	mov	r6, r0
   d6fc8:	460d      	mov	r5, r1
   d6fca:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6fcc:	a807      	add	r0, sp, #28
   d6fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d6fd2:	4917      	ldr	r1, [pc, #92]	; (d7030 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d6fd4:	ed8d 0a05 	vstr	s0, [sp, #20]
   d6fd8:	9309      	str	r3, [sp, #36]	; 0x24
   d6fda:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d6fdc:	f7fe fc09 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d6fe0:	4629      	mov	r1, r5
   d6fe2:	a807      	add	r0, sp, #28
   d6fe4:	f7fe fc22 	bl	d582c <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d6fe8:	ed9d 0a05 	vldr	s0, [sp, #20]
   d6fec:	9b08      	ldr	r3, [sp, #32]
   d6fee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ff0:	9d07      	ldr	r5, [sp, #28]
   d6ff2:	ee10 0a10 	vmov	r0, s0
   d6ff6:	1acf      	subs	r7, r1, r3
   d6ff8:	441d      	add	r5, r3
   d6ffa:	f00c f93d 	bl	e3278 <__aeabi_f2d>
   d6ffe:	4a0d      	ldr	r2, [pc, #52]	; (d7034 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d7000:	e9cd 0100 	strd	r0, r1, [sp]
   d7004:	4639      	mov	r1, r7
   d7006:	4628      	mov	r0, r5
   d7008:	f003 ffc4 	bl	daf94 <snprintf>
   d700c:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d700e:	9402      	str	r4, [sp, #8]
   d7010:	3001      	adds	r0, #1
   d7012:	4418      	add	r0, r3
   d7014:	9008      	str	r0, [sp, #32]
   d7016:	3801      	subs	r0, #1
   d7018:	9000      	str	r0, [sp, #0]
   d701a:	9401      	str	r4, [sp, #4]
   d701c:	9b07      	ldr	r3, [sp, #28]
   d701e:	4622      	mov	r2, r4
   d7020:	2114      	movs	r1, #20
   d7022:	4630      	mov	r0, r6
   d7024:	f7ff fbf0 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d7028:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d702e:	bf00      	nop
   d7030:	000e7a8b 	.word	0x000e7a8b
   d7034:	000e7aef 	.word	0x000e7aef

000d7038 <_Z13setAppWidgetsv>:
 debug("Disconnected\n");
}

// Update the App UI widgets as needed
void setAppWidgets()
{
   d7038:	b538      	push	{r3, r4, r5, lr}
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d703a:	4d09      	ldr	r5, [pc, #36]	; (d7060 <_Z13setAppWidgetsv+0x28>)
   d703c:	4c09      	ldr	r4, [pc, #36]	; (d7064 <_Z13setAppWidgetsv+0x2c>)
   d703e:	686a      	ldr	r2, [r5, #4]
   d7040:	4620      	mov	r0, r4
   d7042:	210b      	movs	r1, #11
   d7044:	f7ff fe3c 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d7048:	4620      	mov	r0, r4
   d704a:	68aa      	ldr	r2, [r5, #8]
   d704c:	210d      	movs	r1, #13
   d704e:	f7ff fe37 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d7052:	ed95 0a03 	vldr	s0, [r5, #12]
   d7056:	210f      	movs	r1, #15
   d7058:	4620      	mov	r0, r4
   d705a:	f7ff ffaf 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d705e:	bd38      	pop	{r3, r4, r5, pc}
   d7060:	2003db78 	.word	0x2003db78
   d7064:	2003e338 	.word	0x2003e338

000d7068 <BlynkWidgetWrite10>:
}

// BLYNK_WRITE is a function called every time device gets an update of Virtual Pin value from the server (or app):
// Get the desired number of readings from the app
BLYNK_WRITE(V10)
{   
   d7068:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d706a:	6808      	ldr	r0, [r1, #0]
   d706c:	f00c fe8f 	bl	e3d8e <atoi>
  state.numberOfReadings = param.asInt(); // Get value as integer
   d7070:	4b03      	ldr	r3, [pc, #12]	; (d7080 <BlynkWidgetWrite10+0x18>)
   d7072:	6058      	str	r0, [r3, #4]
  //Save
  saveState();
   d7074:	f7fe fc68 	bl	d5948 <_Z9saveStatev>
  setAppWidgets();
}
   d7078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V10)
{   
  state.numberOfReadings = param.asInt(); // Get value as integer
  //Save
  saveState();
  setAppWidgets();
   d707c:	f7ff bfdc 	b.w	d7038 <_Z13setAppWidgetsv>
   d7080:	2003db78 	.word	0x2003db78

000d7084 <BlynkWidgetWrite12>:
}

BLYNK_WRITE(V12)
{   
   d7084:	b508      	push	{r3, lr}
   d7086:	6808      	ldr	r0, [r1, #0]
   d7088:	f00c fe81 	bl	e3d8e <atoi>
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
   d708c:	4b03      	ldr	r3, [pc, #12]	; (d709c <BlynkWidgetWrite12+0x18>)
   d708e:	6098      	str	r0, [r3, #8]
  //Save to FRAM
  saveState();
   d7090:	f7fe fc5a 	bl	d5948 <_Z9saveStatev>
  setAppWidgets();
}
   d7094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
BLYNK_WRITE(V12)
{   
  state.secondsBetweenReadings = param.asInt(); // Get value as integer
  //Save to FRAM
  saveState();
  setAppWidgets();
   d7098:	f7ff bfce 	b.w	d7038 <_Z13setAppWidgetsv>
   d709c:	2003db78 	.word	0x2003db78

000d70a0 <BlynkWidgetWriteInternalPinACON>:
    System.sleep(SLEEP_MODE_DEEP); 
    }
}

// Update app connection state
BLYNK_APP_CONNECTED() {
   d70a0:	b508      	push	{r3, lr}
  appConnected = true;
   d70a2:	4b06      	ldr	r3, [pc, #24]	; (d70bc <BlynkWidgetWriteInternalPinACON+0x1c>)
   d70a4:	2201      	movs	r2, #1
   d70a6:	701a      	strb	r2, [r3, #0]
  setAppWidgets();
   d70a8:	f7ff ffc6 	bl	d7038 <_Z13setAppWidgetsv>
  debug("Connected\n");
   d70ac:	f005 fe24 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d70b0:	4903      	ldr	r1, [pc, #12]	; (d70c0 <BlynkWidgetWriteInternalPinACON+0x20>)
}
   d70b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// Update app connection state
BLYNK_APP_CONNECTED() {
  appConnected = true;
  setAppWidgets();
  debug("Connected\n");
   d70b6:	f005 bc5c 	b.w	dc972 <_ZN5Print5printEPKc>
   d70ba:	bf00      	nop
   d70bc:	2003db38 	.word	0x2003db38
   d70c0:	000e7af5 	.word	0x000e7af5

000d70c4 <BlynkWidgetWrite14>:
  }
  
}
// Calibration
BLYNK_WRITE(V14) 
{
   d70c4:	b510      	push	{r4, lr}
   d70c6:	6808      	ldr	r0, [r1, #0]
   d70c8:	f00c fe61 	bl	e3d8e <atoi>
  if (param.asInt()==1)
   d70cc:	2801      	cmp	r0, #1
   d70ce:	d10d      	bne.n	d70ec <BlynkWidgetWrite14+0x28>
  {
    state.zeroOff = sensor1.zero();
   d70d0:	480d      	ldr	r0, [pc, #52]	; (d7108 <BlynkWidgetWrite14+0x44>)
   d70d2:	4c0e      	ldr	r4, [pc, #56]	; (d710c <BlynkWidgetWrite14+0x48>)
   d70d4:	f7fe f9a2 	bl	d541c <_ZN3ULP4zeroEv>
   d70d8:	ed84 0a03 	vstr	s0, [r4, #12]
    saveState();
   d70dc:	f7fe fc34 	bl	d5948 <_Z9saveStatev>
    Blynk.virtualWrite(V15, state.zeroOff);
   d70e0:	ed94 0a03 	vldr	s0, [r4, #12]
   d70e4:	480a      	ldr	r0, [pc, #40]	; (d7110 <BlynkWidgetWrite14+0x4c>)
   d70e6:	210f      	movs	r1, #15
   d70e8:	f7ff ff68 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  }
  Blynk.virtualWrite(V14, 0);
   d70ec:	2200      	movs	r2, #0
   d70ee:	210e      	movs	r1, #14
   d70f0:	4807      	ldr	r0, [pc, #28]	; (d7110 <BlynkWidgetWrite14+0x4c>)
   d70f2:	f7ff fde5 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  // Since data will be invalid save the new calibration and reset
  delay(4000);
   d70f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d70fa:	f005 fc11 	bl	dc920 <delay>
  System.reset();
}
   d70fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Blynk.virtualWrite(V15, state.zeroOff);
  }
  Blynk.virtualWrite(V14, 0);
  // Since data will be invalid save the new calibration and reset
  delay(4000);
  System.reset();
   d7102:	f005 bed7 	b.w	dceb4 <_ZN11SystemClass5resetEv>
   d7106:	bf00      	nop
   d7108:	2003dfc8 	.word	0x2003dfc8
   d710c:	2003db78 	.word	0x2003db78
   d7110:	2003e338 	.word	0x2003e338

000d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d7114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7116:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d711a:	ab08      	add	r3, sp, #32
   d711c:	2400      	movs	r4, #0
   d711e:	4605      	mov	r5, r0
   d7120:	460f      	mov	r7, r1
   d7122:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d7124:	a805      	add	r0, sp, #20
   d7126:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d712a:	490e      	ldr	r1, [pc, #56]	; (d7164 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_+0x50>)
   d712c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d712e:	4616      	mov	r6, r2
   d7130:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d7132:	f7fe fb5e 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d7136:	4639      	mov	r1, r7
   d7138:	a805      	add	r0, sp, #20
   d713a:	f7fe fb77 	bl	d582c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d713e:	4631      	mov	r1, r6
   d7140:	a805      	add	r0, sp, #20
   d7142:	f7fe fb56 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d7146:	9b06      	ldr	r3, [sp, #24]
   d7148:	9402      	str	r4, [sp, #8]
   d714a:	3b01      	subs	r3, #1
   d714c:	9300      	str	r3, [sp, #0]
   d714e:	9401      	str	r4, [sp, #4]
   d7150:	9b05      	ldr	r3, [sp, #20]
   d7152:	4622      	mov	r2, r4
   d7154:	2114      	movs	r1, #20
   d7156:	4628      	mov	r0, r5
   d7158:	f7ff fb56 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d715c:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d7160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7162:	bf00      	nop
   d7164:	000e7a8b 	.word	0x000e7a8b

000d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d7168:	b5f0      	push	{r4, r5, r6, r7, lr}
   d716a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d716e:	ab08      	add	r3, sp, #32
   d7170:	2400      	movs	r4, #0
   d7172:	4605      	mov	r5, r0
   d7174:	460f      	mov	r7, r1
   d7176:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d7178:	a805      	add	r0, sp, #20
   d717a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d717e:	490e      	ldr	r1, [pc, #56]	; (d71b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_+0x50>)
   d7180:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d7182:	4616      	mov	r6, r2
   d7184:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d7186:	f7fe fb34 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d718a:	4639      	mov	r1, r7
   d718c:	a805      	add	r0, sp, #20
   d718e:	f7fe fb4d 	bl	d582c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d7192:	4631      	mov	r1, r6
   d7194:	a805      	add	r0, sp, #20
   d7196:	f7fe fb49 	bl	d582c <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d719a:	9b06      	ldr	r3, [sp, #24]
   d719c:	9402      	str	r4, [sp, #8]
   d719e:	3b01      	subs	r3, #1
   d71a0:	9300      	str	r3, [sp, #0]
   d71a2:	9401      	str	r4, [sp, #4]
   d71a4:	9b05      	ldr	r3, [sp, #20]
   d71a6:	4622      	mov	r2, r4
   d71a8:	2114      	movs	r1, #20
   d71aa:	4628      	mov	r0, r5
   d71ac:	f7ff fb2c 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d71b0:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d71b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71b6:	bf00      	nop
   d71b8:	000e7a8b 	.word	0x000e7a8b

000d71bc <_Z20initializeAppWidgetsv>:
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
  Blynk.virtualWrite(V15, state.zeroOff);
}

void initializeAppWidgets()
{
   d71bc:	b510      	push	{r4, lr}
  Blynk.virtualWrite(V10, state.numberOfReadings);
   d71be:	4c46      	ldr	r4, [pc, #280]	; (d72d8 <_Z20initializeAppWidgetsv+0x11c>)
   d71c0:	4846      	ldr	r0, [pc, #280]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71c2:	6862      	ldr	r2, [r4, #4]
   d71c4:	210a      	movs	r1, #10
   d71c6:	f7ff fd7b 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d71ca:	68a2      	ldr	r2, [r4, #8]
   d71cc:	4843      	ldr	r0, [pc, #268]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71ce:	210c      	movs	r1, #12
   d71d0:	f7ff fd76 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V11, state.numberOfReadings);
   d71d4:	6862      	ldr	r2, [r4, #4]
   d71d6:	4841      	ldr	r0, [pc, #260]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71d8:	210b      	movs	r1, #11
   d71da:	f7ff fd71 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d71de:	68a2      	ldr	r2, [r4, #8]
   d71e0:	483e      	ldr	r0, [pc, #248]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71e2:	210d      	movs	r1, #13
   d71e4:	f7ff fd6c 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
  Blynk.virtualWrite(V20, state.expression);
   d71e8:	f104 0210 	add.w	r2, r4, #16
   d71ec:	2114      	movs	r1, #20
   d71ee:	483b      	ldr	r0, [pc, #236]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71f0:	f7ff ff90 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V16, state.email);
   d71f4:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d71f8:	2110      	movs	r1, #16
   d71fa:	4838      	ldr	r0, [pc, #224]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d71fc:	f7ff ff8a 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V18, state.batEmail);
   d7200:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d7204:	2112      	movs	r1, #18
   d7206:	4835      	ldr	r0, [pc, #212]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7208:	f7ff ff84 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V26, state.tamperEmail);
   d720c:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d7210:	211a      	movs	r1, #26
   d7212:	4832      	ldr	r0, [pc, #200]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7214:	f7ff ff7e 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  Blynk.virtualWrite(V15, state.zeroOff);
   d7218:	ed94 0a03 	vldr	s0, [r4, #12]
   d721c:	482f      	ldr	r0, [pc, #188]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d721e:	210f      	movs	r1, #15
   d7220:	f7ff fecc 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V25, state.batThreshold);
   d7224:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d7228:	ed93 0a00 	vldr	s0, [r3]
   d722c:	482b      	ldr	r0, [pc, #172]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d722e:	2119      	movs	r1, #25
   d7230:	f7ff fec4 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
  Blynk.virtualWrite(V23, state.deviceZone);
   d7234:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d7238:	4828      	ldr	r0, [pc, #160]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d723a:	2117      	movs	r1, #23
   d723c:	f7ff fd40 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
 // Blynk.virtualWrite(V24, state.buzzerActivated);
  Blynk.virtualWrite(V22,"Enter code to reset");
   d7240:	4a27      	ldr	r2, [pc, #156]	; (d72e0 <_Z20initializeAppWidgetsv+0x124>)
   d7242:	4826      	ldr	r0, [pc, #152]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7244:	2116      	movs	r1, #22
   d7246:	f7ff ff65 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  // New Pins
  Blynk.virtualWrite(V24, state.buzzerTamper); // Buzzer Tamper
   d724a:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d724e:	4823      	ldr	r0, [pc, #140]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7250:	2118      	movs	r1, #24
   d7252:	f7ff ff89 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d7256:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d725a:	4820      	ldr	r0, [pc, #128]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d725c:	211b      	movs	r1, #27
   d725e:	f7ff ff83 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d7262:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d7266:	481d      	ldr	r0, [pc, #116]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7268:	211c      	movs	r1, #28
   d726a:	f7ff ff7d 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d726e:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d7272:	481a      	ldr	r0, [pc, #104]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7274:	211d      	movs	r1, #29
   d7276:	f7ff ff77 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d727a:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d727e:	4817      	ldr	r0, [pc, #92]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d7280:	2120      	movs	r1, #32
   d7282:	f7ff ff71 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
  if (state.ActivityThreshold==144)
   d7286:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   d728a:	2b90      	cmp	r3, #144	; 0x90
   d728c:	d101      	bne.n	d7292 <_Z20initializeAppWidgetsv+0xd6>
  	Blynk.virtualWrite(V31, 3); // Tamper Setting Hammer
   d728e:	2203      	movs	r2, #3
   d7290:	e003      	b.n	d729a <_Z20initializeAppWidgetsv+0xde>
  else  if (state.ActivityThreshold==72)
   d7292:	2b48      	cmp	r3, #72	; 0x48
  	Blynk.virtualWrite(V31, 1); // Tamper Setting feather
   d7294:	bf0c      	ite	eq
   d7296:	2201      	moveq	r2, #1
  else
  	Blynk.virtualWrite(V31, 2); // Tamper Setting default
   d7298:	2202      	movne	r2, #2
   d729a:	211f      	movs	r1, #31
   d729c:	480f      	ldr	r0, [pc, #60]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d729e:	f7ff fd0f 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>

  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
   d72a2:	4b10      	ldr	r3, [pc, #64]	; (d72e4 <_Z20initializeAppWidgetsv+0x128>)
   d72a4:	781b      	ldrb	r3, [r3, #0]
   d72a6:	b123      	cbz	r3, d72b2 <_Z20initializeAppWidgetsv+0xf6>
   d72a8:	4a0f      	ldr	r2, [pc, #60]	; (d72e8 <_Z20initializeAppWidgetsv+0x12c>)
   d72aa:	480c      	ldr	r0, [pc, #48]	; (d72dc <_Z20initializeAppWidgetsv+0x120>)
   d72ac:	2115      	movs	r1, #21
   d72ae:	f7ff ff31 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  state.firstRunCheck = firstRunValue;
   d72b2:	4b0e      	ldr	r3, [pc, #56]	; (d72ec <_Z20initializeAppWidgetsv+0x130>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	6023      	str	r3, [r4, #0]
  state.bSleepModeStandby=true;
   d72b8:	2301      	movs	r3, #1
   d72ba:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
  state.bInSleepMode=false;
   d72be:	2300      	movs	r3, #0
   d72c0:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  debug("Finished Initialization\n");
   d72c4:	f005 fd18 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d72c8:	4909      	ldr	r1, [pc, #36]	; (d72f0 <_Z20initializeAppWidgetsv+0x134>)
   d72ca:	f005 fb52 	bl	dc972 <_ZN5Print5printEPKc>
  saveState();
}
   d72ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (terminalDebug) Blynk.virtualWrite(V21, "Initialized default values");
  state.firstRunCheck = firstRunValue;
  state.bSleepModeStandby=true;
  state.bInSleepMode=false;
  debug("Finished Initialization\n");
  saveState();
   d72d2:	f7fe bb39 	b.w	d5948 <_Z9saveStatev>
   d72d6:	bf00      	nop
   d72d8:	2003db78 	.word	0x2003db78
   d72dc:	2003e338 	.word	0x2003e338
   d72e0:	000e7b00 	.word	0x000e7b00
   d72e4:	2003db39 	.word	0x2003db39
   d72e8:	000e7b14 	.word	0x000e7b14
   d72ec:	2003d688 	.word	0x2003d688
   d72f0:	000e7b2f 	.word	0x000e7b2f

000d72f4 <BlynkWidgetWrite22>:
}

BLYNK_WRITE(V22) //Reset Expression
{
   d72f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String _resetKey = param.asStr();
   d72f8:	6809      	ldr	r1, [r1, #0]
   d72fa:	4668      	mov	r0, sp
   d72fc:	f005 ff81 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  if (_resetKey.equals("resetme"))
   d7300:	4961      	ldr	r1, [pc, #388]	; (d7488 <BlynkWidgetWrite22+0x194>)
   d7302:	4668      	mov	r0, sp
   d7304:	f006 f885 	bl	dd412 <_ZNK6String6equalsEPKc>
   d7308:	2800      	cmp	r0, #0
   d730a:	f000 80b6 	beq.w	d747a <BlynkWidgetWrite22+0x186>
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d730e:	4c5f      	ldr	r4, [pc, #380]	; (d748c <BlynkWidgetWrite22+0x198>)
BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
   d7310:	4a5f      	ldr	r2, [pc, #380]	; (d7490 <BlynkWidgetWrite22+0x19c>)
   d7312:	4860      	ldr	r0, [pc, #384]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7314:	2116      	movs	r1, #22
   d7316:	f7ff fefd 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
   d731a:	2305      	movs	r3, #5
    state.firstRunCheck = 0;
   d731c:	2500      	movs	r5, #0
    state.bSleepModeStandby=true;
   d731e:	2701      	movs	r7, #1
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d7320:	f04f 080f 	mov.w	r8, #15
    state.secondsBetweenReadings=5;
   d7324:	60a3      	str	r3, [r4, #8]
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d7326:	495c      	ldr	r1, [pc, #368]	; (d7498 <BlynkWidgetWrite22+0x1a4>)
{
  String _resetKey = param.asStr();
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
   d7328:	f8c4 8004 	str.w	r8, [r4, #4]
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d732c:	2300      	movs	r3, #0
    strcpy(state.expression,"Enter expression here");
   d732e:	f104 0010 	add.w	r0, r4, #16
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
    state.bSleepModeStandby=true;
    state.bInSleepMode=false;
    state.zeroOff = 0;
   d7332:	60e3      	str	r3, [r4, #12]
  if (_resetKey.equals("resetme"))
  {
    Blynk.virtualWrite(V22,"Enter code to reset");
    state.numberOfReadings = 15;
    state.secondsBetweenReadings=5;
    state.firstRunCheck = 0;
   d7334:	6025      	str	r5, [r4, #0]
    state.bSleepModeStandby=true;
   d7336:	f884 7424 	strb.w	r7, [r4, #1060]	; 0x424
    state.bInSleepMode=false;
   d733a:	f884 5425 	strb.w	r5, [r4, #1061]	; 0x425
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
   d733e:	f00d f8cd 	bl	e44dc <strcpy>
    strcpy(state.email,"Enter email here");
   d7342:	4956      	ldr	r1, [pc, #344]	; (d749c <BlynkWidgetWrite22+0x1a8>)
   d7344:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d7348:	f00d f8c8 	bl	e44dc <strcpy>
    strcpy(state.batEmail,"Enter email here");
   d734c:	4953      	ldr	r1, [pc, #332]	; (d749c <BlynkWidgetWrite22+0x1a8>)
   d734e:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d7352:	f00d f8c3 	bl	e44dc <strcpy>
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
   d7356:	f504 6682 	add.w	r6, r4, #1040	; 0x410
    state.bInSleepMode=false;
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
   d735a:	4950      	ldr	r1, [pc, #320]	; (d749c <BlynkWidgetWrite22+0x1a8>)
   d735c:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d7360:	f00d f8bc 	bl	e44dc <strcpy>
    state.deviceZone=0;
    state.batThreshold = 20;
   d7364:	4b4e      	ldr	r3, [pc, #312]	; (d74a0 <BlynkWidgetWrite22+0x1ac>)
   d7366:	6033      	str	r3, [r6, #0]
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d7368:	4642      	mov	r2, r8
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d736a:	2364      	movs	r3, #100	; 0x64
    state.buzzerVapor=false; // Vapor Buzzer
    state.notifyVapor=true; // Vapor Notify
    state.notifyTamper=true; // Tamper Notify
    state.notifyBattery=true; // Battery Notify
    state.OnTime=0;
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d736c:	210a      	movs	r1, #10
   d736e:	4849      	ldr	r0, [pc, #292]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
    state.batThreshold = 20;
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d7370:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
    state.zeroOff = 0;
    strcpy(state.expression,"Enter expression here");
    strcpy(state.email,"Enter email here");
    strcpy(state.batEmail,"Enter email here");
    strcpy(state.tamperEmail,"Enter email here");
    state.deviceZone=0;
   d7374:	f8c4 5420 	str.w	r5, [r4, #1056]	; 0x420
    state.batThreshold = 20;
    state.lastAlert=false;
   d7378:	f884 5414 	strb.w	r5, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d737c:	f884 5415 	strb.w	r5, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d7380:	f884 7417 	strb.w	r7, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d7384:	f884 5418 	strb.w	r5, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d7388:	f884 7419 	strb.w	r7, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d738c:	f884 741a 	strb.w	r7, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d7390:	f884 741b 	strb.w	r7, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d7394:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
    Blynk.virtualWrite(V10, state.numberOfReadings);
   d7398:	f7ff fc92 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V12, state.secondsBetweenReadings);
   d739c:	68a2      	ldr	r2, [r4, #8]
   d739e:	483d      	ldr	r0, [pc, #244]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73a0:	210c      	movs	r1, #12
   d73a2:	f7ff fc8d 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V11, state.numberOfReadings);
   d73a6:	6862      	ldr	r2, [r4, #4]
   d73a8:	483a      	ldr	r0, [pc, #232]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73aa:	210b      	movs	r1, #11
   d73ac:	f7ff fc88 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V13, state.secondsBetweenReadings);
   d73b0:	68a2      	ldr	r2, [r4, #8]
   d73b2:	4838      	ldr	r0, [pc, #224]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73b4:	210d      	movs	r1, #13
   d73b6:	f7ff fc83 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V20, state.expression);
   d73ba:	f104 0210 	add.w	r2, r4, #16
   d73be:	2114      	movs	r1, #20
   d73c0:	4834      	ldr	r0, [pc, #208]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73c2:	f7ff fea7 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V16, state.email);
   d73c6:	f504 7288 	add.w	r2, r4, #272	; 0x110
   d73ca:	2110      	movs	r1, #16
   d73cc:	4831      	ldr	r0, [pc, #196]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73ce:	f7ff fea1 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V18, state.batEmail);
   d73d2:	f504 7204 	add.w	r2, r4, #528	; 0x210
   d73d6:	2112      	movs	r1, #18
   d73d8:	482e      	ldr	r0, [pc, #184]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73da:	f7ff fe9b 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V26, state.tamperEmail);
   d73de:	f504 7244 	add.w	r2, r4, #784	; 0x310
   d73e2:	211a      	movs	r1, #26
   d73e4:	482b      	ldr	r0, [pc, #172]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73e6:	f7ff fe95 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    Blynk.virtualWrite(V15, state.zeroOff);
   d73ea:	ed94 0a03 	vldr	s0, [r4, #12]
   d73ee:	4829      	ldr	r0, [pc, #164]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73f0:	4641      	mov	r1, r8
   d73f2:	f7ff fde3 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V25, state.batThreshold);
   d73f6:	ed96 0a00 	vldr	s0, [r6]
   d73fa:	4826      	ldr	r0, [pc, #152]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d73fc:	2119      	movs	r1, #25
   d73fe:	f7ff fddd 	bl	d6fbc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    Blynk.virtualWrite(V23, state.deviceZone);
   d7402:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
   d7406:	4823      	ldr	r0, [pc, #140]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7408:	2117      	movs	r1, #23
   d740a:	f7ff fc59 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V24, state.buzzerTamper);  // Buzzer Tamper
   d740e:	f894 2417 	ldrb.w	r2, [r4, #1047]	; 0x417
   d7412:	4820      	ldr	r0, [pc, #128]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7414:	2118      	movs	r1, #24
   d7416:	f7ff fea7 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V27, state.buzzerVapor); // Vapor Buzzer
   d741a:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
   d741e:	481d      	ldr	r0, [pc, #116]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7420:	211b      	movs	r1, #27
   d7422:	f7ff fea1 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V28, state.notifyVapor); // Vapor Notify
   d7426:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   d742a:	481a      	ldr	r0, [pc, #104]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d742c:	211c      	movs	r1, #28
   d742e:	f7ff fe9b 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V29, state.notifyTamper); // Tamper Notify
   d7432:	f894 241a 	ldrb.w	r2, [r4, #1050]	; 0x41a
   d7436:	4817      	ldr	r0, [pc, #92]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7438:	211d      	movs	r1, #29
   d743a:	f7ff fe95 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    Blynk.virtualWrite(V31, 2); // Which is 100 for the accelerometer
   d743e:	2202      	movs	r2, #2
   d7440:	211f      	movs	r1, #31
   d7442:	4814      	ldr	r0, [pc, #80]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d7444:	f7ff fc3c 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
    Blynk.virtualWrite(V32, state.notifyBattery); // Battery Notify
   d7448:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
   d744c:	4811      	ldr	r0, [pc, #68]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d744e:	2120      	movs	r1, #32
   d7450:	f7ff fe8a 	bl	d7168 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIbEEEviDpT_>
    // EEPROM.clear();
    fram.erase();
   d7454:	4813      	ldr	r0, [pc, #76]	; (d74a4 <BlynkWidgetWrite22+0x1b0>)
   d7456:	f003 f877 	bl	da548 <_ZN10MB85RC256V5eraseEv>
    Blynk.virtualWrite(V21, "Hard Resetting");
   d745a:	4a13      	ldr	r2, [pc, #76]	; (d74a8 <BlynkWidgetWrite22+0x1b4>)
   d745c:	480d      	ldr	r0, [pc, #52]	; (d7494 <BlynkWidgetWrite22+0x1a0>)
   d745e:	2115      	movs	r1, #21
   d7460:	f7ff fe58 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
    debug("Hard Resetting\n");
   d7464:	f005 fc48 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7468:	4910      	ldr	r1, [pc, #64]	; (d74ac <BlynkWidgetWrite22+0x1b8>)
   d746a:	f005 fa82 	bl	dc972 <_ZN5Print5printEPKc>
    delay(500);
   d746e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d7472:	f005 fa55 	bl	dc920 <delay>
    System.reset();
   d7476:	f005 fd1d 	bl	dceb4 <_ZN11SystemClass5resetEv>
  saveState();
}

BLYNK_WRITE(V22) //Reset Expression
{
  String _resetKey = param.asStr();
   d747a:	4668      	mov	r0, sp
   d747c:	f005 fe7a 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V21, "Hard Resetting");
    debug("Hard Resetting\n");
    delay(500);
    System.reset();
  }
}
   d7480:	b004      	add	sp, #16
   d7482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7486:	bf00      	nop
   d7488:	000e7b48 	.word	0x000e7b48
   d748c:	2003db78 	.word	0x2003db78
   d7490:	000e7b00 	.word	0x000e7b00
   d7494:	2003e338 	.word	0x2003e338
   d7498:	000e7b50 	.word	0x000e7b50
   d749c:	000e7b66 	.word	0x000e7b66
   d74a0:	41a00000 	.word	0x41a00000
   d74a4:	2003d7e8 	.word	0x2003d7e8
   d74a8:	000e7b77 	.word	0x000e7b77
   d74ac:	000e7b86 	.word	0x000e7b86

000d74b0 <BlynkOnConnected>:

// This function will run every time Blynk connection is established
BLYNK_CONNECTED() {
   d74b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Request Blynk server to re-send latest values for all pins
  debug("Blynk is now connected - syncing all pins.\n");
   d74b2:	f005 fc21 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d74b6:	490b      	ldr	r1, [pc, #44]	; (d74e4 <BlynkOnConnected+0x34>)
   d74b8:	f005 fa5b 	bl	dc972 <_ZN5Print5printEPKc>
  if (state.firstRunCheck != firstRunValue)
   d74bc:	4b0a      	ldr	r3, [pc, #40]	; (d74e8 <BlynkOnConnected+0x38>)
   d74be:	681a      	ldr	r2, [r3, #0]
   d74c0:	4b0a      	ldr	r3, [pc, #40]	; (d74ec <BlynkOnConnected+0x3c>)
   d74c2:	681b      	ldr	r3, [r3, #0]
   d74c4:	429a      	cmp	r2, r3
   d74c6:	d001      	beq.n	d74cc <BlynkOnConnected+0x1c>
  {
    initializeAppWidgets();
   d74c8:	f7ff fe78 	bl	d71bc <_Z20initializeAppWidgetsv>

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d74cc:	2300      	movs	r3, #0
   d74ce:	9302      	str	r3, [sp, #8]
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	9300      	str	r3, [sp, #0]
   d74d4:	461a      	mov	r2, r3
   d74d6:	2110      	movs	r1, #16
   d74d8:	4805      	ldr	r0, [pc, #20]	; (d74f0 <BlynkOnConnected+0x40>)
   d74da:	f7ff f995 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  }
  Blynk.syncAll();
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}
   d74de:	b005      	add	sp, #20
   d74e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d74e4:	000e7b96 	.word	0x000e7b96
   d74e8:	2003db78 	.word	0x2003db78
   d74ec:	2003d688 	.word	0x2003d688
   d74f0:	2003e338 	.word	0x2003e338

000d74f4 <_Z13runExpressionPc>:
    debug("Update notifyBattery flag value is: ");
    debug(state.notifyBattery + "\n");
#endif
}
bool runExpression(char *expression)
{   
   d74f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74f8:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
   d74fc:	4605      	mov	r5, r0
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d74fe:	2260      	movs	r2, #96	; 0x60
   d7500:	2100      	movs	r1, #0
   d7502:	a81c      	add	r0, sp, #112	; 0x70
   d7504:	f00c fd61 	bl	e3fca <memset>
   d7508:	4b7e      	ldr	r3, [pc, #504]	; (d7704 <_Z13runExpressionPc+0x210>)
   d750a:	931c      	str	r3, [sp, #112]	; 0x70
   d750c:	4b7e      	ldr	r3, [pc, #504]	; (d7708 <_Z13runExpressionPc+0x214>)
   d750e:	9320      	str	r3, [sp, #128]	; 0x80
   d7510:	4b7e      	ldr	r3, [pc, #504]	; (d770c <_Z13runExpressionPc+0x218>)
   d7512:	9324      	str	r3, [sp, #144]	; 0x90
   d7514:	4b7e      	ldr	r3, [pc, #504]	; (d7710 <_Z13runExpressionPc+0x21c>)
   d7516:	9328      	str	r3, [sp, #160]	; 0xa0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d7518:	4c7e      	ldr	r4, [pc, #504]	; (d7714 <_Z13runExpressionPc+0x220>)
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d751a:	4b7f      	ldr	r3, [pc, #508]	; (d7718 <_Z13runExpressionPc+0x224>)
   d751c:	932c      	str	r3, [sp, #176]	; 0xb0
   d751e:	4b7f      	ldr	r3, [pc, #508]	; (d771c <_Z13runExpressionPc+0x228>)
   d7520:	9330      	str	r3, [sp, #192]	; 0xc0
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d7522:	7823      	ldrb	r3, [r4, #0]
}
bool runExpression(char *expression)
{   
  double pm1, pm2, pm4, pm10, conc, temp;
  // Store variable names and pointers. 
  te_variable vars[] = {{"pm1", &pm1}, {"pm2", &pm2}, {"pm4", &pm4}, {"pm10", &pm10}, {"conc", &conc}, {"temp", &temp}};
   d7524:	f10d 0b20 	add.w	fp, sp, #32
   d7528:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   d752c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   d7530:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   d7534:	af10      	add	r7, sp, #64	; 0x40
   d7536:	ae12      	add	r6, sp, #72	; 0x48
   d7538:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   d753c:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
   d7540:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   d7544:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
   d7548:	972d      	str	r7, [sp, #180]	; 0xb4
   d754a:	9631      	str	r6, [sp, #196]	; 0xc4
  if (terminalDebug) Blynk.virtualWrite(V21, expression); 
   d754c:	b123      	cbz	r3, d7558 <_Z13runExpressionPc+0x64>
   d754e:	462a      	mov	r2, r5
   d7550:	2115      	movs	r1, #21
   d7552:	4873      	ldr	r0, [pc, #460]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d7554:	f7ff fdde 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
  int err;
  // Compile the expression with variables.
  // te_expr *expr = te_compile(_expression.c_str(), vars, 6, &err);
  te_expr *expr = te_compile(expression, vars, 6, &err);
   d7558:	ab07      	add	r3, sp, #28
   d755a:	2206      	movs	r2, #6
   d755c:	a91c      	add	r1, sp, #112	; 0x70
   d755e:	4628      	mov	r0, r5
   d7560:	f7fd fea0 	bl	d52a4 <te_compile>

  if (expr) {
   d7564:	9005      	str	r0, [sp, #20]
   d7566:	2800      	cmp	r0, #0
   d7568:	f000 809d 	beq.w	d76a6 <_Z13runExpressionPc+0x1b2>

      pm1 = (double)Sensor.massPM1;
   d756c:	4d6d      	ldr	r5, [pc, #436]	; (d7724 <_Z13runExpressionPc+0x230>)
   d756e:	6868      	ldr	r0, [r5, #4]
   d7570:	f00b fe82 	bl	e3278 <__aeabi_f2d>
   d7574:	e9cb 0100 	strd	r0, r1, [fp]
      pm2 = (double)Sensor.massPM25;
   d7578:	68a8      	ldr	r0, [r5, #8]
   d757a:	f00b fe7d 	bl	e3278 <__aeabi_f2d>
   d757e:	e9ca 0100 	strd	r0, r1, [sl]
      pm4 = (double)Sensor.massPM4;
   d7582:	68e8      	ldr	r0, [r5, #12]
   d7584:	f00b fe78 	bl	e3278 <__aeabi_f2d>
   d7588:	e9c9 0100 	strd	r0, r1, [r9]
      pm10 = (double)Sensor.massPM10;
   d758c:	6928      	ldr	r0, [r5, #16]
   d758e:	f00b fe73 	bl	e3278 <__aeabi_f2d>
      conc = (double)conc1;
   d7592:	4a65      	ldr	r2, [pc, #404]	; (d7728 <_Z13runExpressionPc+0x234>)
  if (expr) {

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
   d7594:	e9c8 0100 	strd	r0, r1, [r8]
      conc = (double)conc1;
   d7598:	6810      	ldr	r0, [r2, #0]
   d759a:	f00b fe6d 	bl	e3278 <__aeabi_f2d>
      temp = (double)temp1;
   d759e:	4a63      	ldr	r2, [pc, #396]	; (d772c <_Z13runExpressionPc+0x238>)

      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
   d75a0:	e9c7 0100 	strd	r0, r1, [r7]
      temp = (double)temp1;
   d75a4:	6810      	ldr	r0, [r2, #0]
   d75a6:	f00b fe67 	bl	e3278 <__aeabi_f2d>
      const double h2 = te_eval(expr);
   d75aa:	9b05      	ldr	r3, [sp, #20]
      pm1 = (double)Sensor.massPM1;
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
   d75ac:	e9c6 0100 	strd	r0, r1, [r6]
      const double h2 = te_eval(expr);
   d75b0:	4618      	mov	r0, r3
   d75b2:	f7fd fb61 	bl	d4c78 <te_eval>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d75b6:	7823      	ldrb	r3, [r4, #0]
      pm2 = (double)Sensor.massPM25;
      pm4 = (double)Sensor.massPM4;
      pm10 = (double)Sensor.massPM10;
      conc = (double)conc1;
      temp = (double)temp1;
      const double h2 = te_eval(expr);
   d75b8:	ec57 6b10 	vmov	r6, r7, d0
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
   d75bc:	b15b      	cbz	r3, d75d6 <_Z13runExpressionPc+0xe2>
   d75be:	495c      	ldr	r1, [pc, #368]	; (d7730 <_Z13runExpressionPc+0x23c>)
   d75c0:	a834      	add	r0, sp, #208	; 0xd0
   d75c2:	f005 fe5d 	bl	dd280 <_ZN6StringC1ERKS_>
   d75c6:	4856      	ldr	r0, [pc, #344]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d75c8:	aa34      	add	r2, sp, #208	; 0xd0
   d75ca:	2115      	movs	r1, #21
   d75cc:	f7ff fba2 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d75d0:	a834      	add	r0, sp, #208	; 0xd0
   d75d2:	f005 fdcf 	bl	dd174 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
   d75d6:	7823      	ldrb	r3, [r4, #0]
   d75d8:	b333      	cbz	r3, d7628 <_Z13runExpressionPc+0x134>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d75da:	ab34      	add	r3, sp, #208	; 0xd0
   d75dc:	2500      	movs	r5, #0
   d75de:	9318      	str	r3, [sp, #96]	; 0x60
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d75e0:	4954      	ldr	r1, [pc, #336]	; (d7734 <_Z13runExpressionPc+0x240>)
   d75e2:	9519      	str	r5, [sp, #100]	; 0x64
   d75e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d75e8:	a818      	add	r0, sp, #96	; 0x60
   d75ea:	931a      	str	r3, [sp, #104]	; 0x68
   d75ec:	f7fe f901 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d75f0:	2115      	movs	r1, #21
   d75f2:	a818      	add	r0, sp, #96	; 0x60
   d75f4:	f7fe f91a 	bl	d582c <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d75f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d75fa:	991a      	ldr	r1, [sp, #104]	; 0x68
   d75fc:	9818      	ldr	r0, [sp, #96]	; 0x60
   d75fe:	4a4e      	ldr	r2, [pc, #312]	; (d7738 <_Z13runExpressionPc+0x244>)
   d7600:	1ac9      	subs	r1, r1, r3
   d7602:	4418      	add	r0, r3
   d7604:	e9cd 6700 	strd	r6, r7, [sp]
   d7608:	f003 fcc4 	bl	daf94 <snprintf>
   d760c:	9b19      	ldr	r3, [sp, #100]	; 0x64
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d760e:	9502      	str	r5, [sp, #8]
   d7610:	3001      	adds	r0, #1
   d7612:	4418      	add	r0, r3
   d7614:	9019      	str	r0, [sp, #100]	; 0x64
   d7616:	3801      	subs	r0, #1
   d7618:	9000      	str	r0, [sp, #0]
   d761a:	9501      	str	r5, [sp, #4]
   d761c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d761e:	4840      	ldr	r0, [pc, #256]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d7620:	462a      	mov	r2, r5
   d7622:	2114      	movs	r1, #20
   d7624:	f7ff f8f0 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
   d7628:	7823      	ldrb	r3, [r4, #0]
   d762a:	b15b      	cbz	r3, d7644 <_Z13runExpressionPc+0x150>
   d762c:	4943      	ldr	r1, [pc, #268]	; (d773c <_Z13runExpressionPc+0x248>)
   d762e:	a834      	add	r0, sp, #208	; 0xd0
   d7630:	f005 fe26 	bl	dd280 <_ZN6StringC1ERKS_>
   d7634:	483a      	ldr	r0, [pc, #232]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d7636:	aa34      	add	r2, sp, #208	; 0xd0
   d7638:	2115      	movs	r1, #21
   d763a:	f7ff fb6b 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d763e:	a834      	add	r0, sp, #208	; 0xd0
   d7640:	f005 fd98 	bl	dd174 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);
   d7644:	7823      	ldrb	r3, [r4, #0]
   d7646:	b1eb      	cbz	r3, d7684 <_Z13runExpressionPc+0x190>
   d7648:	493d      	ldr	r1, [pc, #244]	; (d7740 <_Z13runExpressionPc+0x24c>)
   d764a:	a834      	add	r0, sp, #208	; 0xd0
   d764c:	f005 fe18 	bl	dd280 <_ZN6StringC1ERKS_>
   d7650:	aa34      	add	r2, sp, #208	; 0xd0
   d7652:	2115      	movs	r1, #21
   d7654:	4832      	ldr	r0, [pc, #200]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d7656:	f7ff fb5d 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d765a:	a834      	add	r0, sp, #208	; 0xd0
   d765c:	f005 fd8a 	bl	dd174 <_ZN6StringD1Ev>

      if (h2==1.0)
   d7660:	2200      	movs	r2, #0
   d7662:	4b38      	ldr	r3, [pc, #224]	; (d7744 <_Z13runExpressionPc+0x250>)
   d7664:	4630      	mov	r0, r6
   d7666:	4639      	mov	r1, r7
   d7668:	f00c f8c2 	bl	e37f0 <__aeabi_dcmpeq>
   d766c:	b190      	cbz	r0, d7694 <_Z13runExpressionPc+0x1a0>
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d766e:	4b29      	ldr	r3, [pc, #164]	; (d7714 <_Z13runExpressionPc+0x220>)
   d7670:	781c      	ldrb	r4, [r3, #0]
   d7672:	b90c      	cbnz	r4, d7678 <_Z13runExpressionPc+0x184>
        return true;
   d7674:	2401      	movs	r4, #1
   d7676:	e03f      	b.n	d76f8 <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
   d7678:	4a33      	ldr	r2, [pc, #204]	; (d7748 <_Z13runExpressionPc+0x254>)
   d767a:	4829      	ldr	r0, [pc, #164]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d767c:	2115      	movs	r1, #21
   d767e:	f7ff fd49 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d7682:	e039      	b.n	d76f8 <_Z13runExpressionPc+0x204>
      if (terminalDebug) Blynk.virtualWrite(V21, datastring);
      if (terminalDebug) Blynk.virtualWrite(V21, h2);
      if (terminalDebug) Blynk.virtualWrite(V21, InstallLocation);
      if (terminalDebug) Blynk.virtualWrite(V21, iSoftwareVersion);

      if (h2==1.0)
   d7684:	2200      	movs	r2, #0
   d7686:	4b2f      	ldr	r3, [pc, #188]	; (d7744 <_Z13runExpressionPc+0x250>)
   d7688:	4630      	mov	r0, r6
   d768a:	4639      	mov	r1, r7
   d768c:	f00c f8b0 	bl	e37f0 <__aeabi_dcmpeq>
   d7690:	2800      	cmp	r0, #0
   d7692:	d1ef      	bne.n	d7674 <_Z13runExpressionPc+0x180>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is True");
        return true;
      }
      else
      {
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
   d7694:	7824      	ldrb	r4, [r4, #0]
   d7696:	2c00      	cmp	r4, #0
   d7698:	d02e      	beq.n	d76f8 <_Z13runExpressionPc+0x204>
   d769a:	4a2c      	ldr	r2, [pc, #176]	; (d774c <_Z13runExpressionPc+0x258>)
   d769c:	4820      	ldr	r0, [pc, #128]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d769e:	2115      	movs	r1, #21
   d76a0:	f7ff fd38 	bl	d7114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPcEEEviDpT_>
   d76a4:	e027      	b.n	d76f6 <_Z13runExpressionPc+0x202>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d76a6:	492a      	ldr	r1, [pc, #168]	; (d7750 <_Z13runExpressionPc+0x25c>)
   d76a8:	a834      	add	r0, sp, #208	; 0xd0
   d76aa:	f005 fdaa 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d76ae:	220a      	movs	r2, #10
   d76b0:	9907      	ldr	r1, [sp, #28]
   d76b2:	a818      	add	r0, sp, #96	; 0x60
   d76b4:	f005 fe1a 	bl	dd2ec <_ZN6StringC1Eih>
   d76b8:	a918      	add	r1, sp, #96	; 0x60
   d76ba:	a834      	add	r0, sp, #208	; 0xd0
   d76bc:	f005 fe77 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d76c0:	4601      	mov	r1, r0
   d76c2:	a814      	add	r0, sp, #80	; 0x50
   d76c4:	f005 fddc 	bl	dd280 <_ZN6StringC1ERKS_>
   d76c8:	a818      	add	r0, sp, #96	; 0x60
   d76ca:	f005 fd53 	bl	dd174 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d76ce:	a834      	add	r0, sp, #208	; 0xd0
   d76d0:	f005 fd50 	bl	dd174 <_ZN6StringD1Ev>
      // debugf("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
   d76d4:	7823      	ldrb	r3, [r4, #0]
   d76d6:	b15b      	cbz	r3, d76f0 <_Z13runExpressionPc+0x1fc>
   d76d8:	a914      	add	r1, sp, #80	; 0x50
   d76da:	a834      	add	r0, sp, #208	; 0xd0
   d76dc:	f005 fdd0 	bl	dd280 <_ZN6StringC1ERKS_>
   d76e0:	480f      	ldr	r0, [pc, #60]	; (d7720 <_Z13runExpressionPc+0x22c>)
   d76e2:	aa34      	add	r2, sp, #208	; 0xd0
   d76e4:	2115      	movs	r1, #21
   d76e6:	f7ff fb15 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d76ea:	a834      	add	r0, sp, #208	; 0xd0
   d76ec:	f005 fd42 	bl	dd174 <_ZN6StringD1Ev>
        if (terminalDebug) Blynk.virtualWrite(V21, "The expression is False");
        return false;        
      }     
      te_free(expr);
  } else {
      String mess = "Error near char: " + String(err);
   d76f0:	a814      	add	r0, sp, #80	; 0x50
   d76f2:	f005 fd3f 	bl	dd174 <_ZN6StringD1Ev>
      // debugf("Parse error at %d\n", err);
      if (terminalDebug) Blynk.virtualWrite(V21, mess);
      return false;
   d76f6:	2400      	movs	r4, #0
  } 
}
   d76f8:	4620      	mov	r0, r4
   d76fa:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
   d76fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7702:	bf00      	nop
   d7704:	000e7bc2 	.word	0x000e7bc2
   d7708:	000e7bc6 	.word	0x000e7bc6
   d770c:	000e7bca 	.word	0x000e7bca
   d7710:	000e7bce 	.word	0x000e7bce
   d7714:	2003db39 	.word	0x2003db39
   d7718:	000e7bd3 	.word	0x000e7bd3
   d771c:	000e7bd8 	.word	0x000e7bd8
   d7720:	2003e338 	.word	0x2003e338
   d7724:	2003e0b0 	.word	0x2003e0b0
   d7728:	2003e010 	.word	0x2003e010
   d772c:	2003e36c 	.word	0x2003e36c
   d7730:	2003dfa8 	.word	0x2003dfa8
   d7734:	000e7a8b 	.word	0x000e7a8b
   d7738:	000e7bdd 	.word	0x000e7bdd
   d773c:	2003e044 	.word	0x2003e044
   d7740:	2003e0e4 	.word	0x2003e0e4
   d7744:	3ff00000 	.word	0x3ff00000
   d7748:	000e7be3 	.word	0x000e7be3
   d774c:	000e7bfa 	.word	0x000e7bfa
   d7750:	000e7c12 	.word	0x000e7c12

000d7754 <BlynkWidgetWrite20>:
  // You can also update individual virtual pins like this:
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
   d7754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String _expression = param.asStr();
   d7756:	6809      	ldr	r1, [r1, #0]
   d7758:	4668      	mov	r0, sp
   d775a:	f005 fd52 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
  //Only lower case is allowed
  _expression.toLowerCase();
   d775e:	4668      	mov	r0, sp
   d7760:	f005 fe91 	bl	dd486 <_ZN6String11toLowerCaseEv>
  strcpy(state.expression,_expression.c_str());
   d7764:	9900      	ldr	r1, [sp, #0]
   d7766:	4808      	ldr	r0, [pc, #32]	; (d7788 <BlynkWidgetWrite20+0x34>)
   d7768:	f00c feb8 	bl	e44dc <strcpy>
  saveState();
   d776c:	f7fe f8ec 	bl	d5948 <_Z9saveStatev>
  if (sensorValid)
   d7770:	4b06      	ldr	r3, [pc, #24]	; (d778c <BlynkWidgetWrite20+0x38>)
   d7772:	781b      	ldrb	r3, [r3, #0]
   d7774:	b113      	cbz	r3, d777c <BlynkWidgetWrite20+0x28>
  {
    runExpression(state.expression);
   d7776:	4804      	ldr	r0, [pc, #16]	; (d7788 <BlynkWidgetWrite20+0x34>)
   d7778:	f7ff febc 	bl	d74f4 <_Z13runExpressionPc>
  //Blynk.syncVirtual(V0, V2);
}

BLYNK_WRITE(V20) //Alarm Expression
{
  String _expression = param.asStr();
   d777c:	4668      	mov	r0, sp
   d777e:	f005 fcf9 	bl	dd174 <_ZN6StringD1Ev>
  saveState();
  if (sensorValid)
  {
    runExpression(state.expression);
  }
}
   d7782:	b005      	add	sp, #20
   d7784:	f85d fb04 	ldr.w	pc, [sp], #4
   d7788:	2003db88 	.word	0x2003db88
   d778c:	2003e030 	.word	0x2003e030

000d7790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   d7790:	b530      	push	{r4, r5, lr}
   d7792:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d7796:	ab08      	add	r3, sp, #32
   d7798:	2400      	movs	r4, #0
   d779a:	4605      	mov	r5, r0
   d779c:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   d779e:	a805      	add	r0, sp, #20
   d77a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d77a4:	9307      	str	r3, [sp, #28]
   d77a6:	9406      	str	r4, [sp, #24]
   d77a8:	f7fe f823 	bl	d57f2 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   d77ac:	9b06      	ldr	r3, [sp, #24]
   d77ae:	9402      	str	r4, [sp, #8]
   d77b0:	3b01      	subs	r3, #1
   d77b2:	9300      	str	r3, [sp, #0]
   d77b4:	9401      	str	r4, [sp, #4]
   d77b6:	9b05      	ldr	r3, [sp, #20]
   d77b8:	4622      	mov	r2, r4
   d77ba:	2140      	movs	r1, #64	; 0x40
   d77bc:	4628      	mov	r0, r5
   d77be:	f7ff f823 	bl	d6808 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d77c2:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d77c6:	bd30      	pop	{r4, r5, pc}

000d77c8 <_Z10checkAccelv>:
void ADXL_ISR() {
  accelInterrupt=true; 
}

void checkAccel()
{
   d77c8:	b570      	push	{r4, r5, r6, lr}
  // Not ideal to have this in the loop
  if (accelInterrupt)
   d77ca:	4b2f      	ldr	r3, [pc, #188]	; (d7888 <_Z10checkAccelv+0xc0>)
   d77cc:	4c2f      	ldr	r4, [pc, #188]	; (d788c <_Z10checkAccelv+0xc4>)
   d77ce:	781a      	ldrb	r2, [r3, #0]
   d77d0:	461e      	mov	r6, r3
   d77d2:	2a00      	cmp	r2, #0
   d77d4:	d041      	beq.n	d785a <_Z10checkAccelv+0x92>
  {
    debug("*** ACCEL INTERRUPTED ***\n");
   d77d6:	f005 fa8f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d77da:	492d      	ldr	r1, [pc, #180]	; (d7890 <_Z10checkAccelv+0xc8>)
   d77dc:	f005 f8c9 	bl	dc972 <_ZN5Print5printEPKc>
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
   d77e0:	2100      	movs	r1, #0
   d77e2:	482c      	ldr	r0, [pc, #176]	; (d7894 <_Z10checkAccelv+0xcc>)
   d77e4:	f002 fd5f 	bl	da2a6 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(0);
   d77e8:	2100      	movs	r1, #0
   d77ea:	482a      	ldr	r0, [pc, #168]	; (d7894 <_Z10checkAccelv+0xcc>)
   d77ec:	f002 fd55 	bl	da29a <_ZN7ADXL34511ActivityINTEb>
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d77f0:	4828      	ldr	r0, [pc, #160]	; (d7894 <_Z10checkAccelv+0xcc>)
   d77f2:	f002 fc9d 	bl	da130 <_ZN7ADXL34518getInterruptSourceEv>

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d77f6:	2203      	movs	r2, #3
    // Turn off Interrupts for Activity(1 == ON, 0 == OFF)
    adxl.InactivityINT(0);
    adxl.ActivityINT(0);
    // getInterruptSource clears all triggered actions after returning value
    // Do not call again until you need to recheck for triggered actions
    byte interrupts = adxl.getInterruptSource();
   d77f8:	4605      	mov	r5, r0

    // Inactivity
    if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
   d77fa:	4601      	mov	r1, r0
   d77fc:	4825      	ldr	r0, [pc, #148]	; (d7894 <_Z10checkAccelv+0xcc>)
   d77fe:	f002 fbdb 	bl	d9fb8 <_ZN7ADXL3459triggeredEhi>
   d7802:	b160      	cbz	r0, d781e <_Z10checkAccelv+0x56>
      debug("*** INACTIVITY ***\n");
   d7804:	f005 fa78 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7808:	4923      	ldr	r1, [pc, #140]	; (d7898 <_Z10checkAccelv+0xd0>)
   d780a:	f005 f8b2 	bl	dc972 <_ZN5Print5printEPKc>
      // *Temp Debug* Turn off the LED.
      // digitalWrite(ledPin, LOW);
      //Robert add code here for Blynk to do when inactivity is sensed
      tamperCurrentAlert = false;
   d780e:	2300      	movs	r3, #0
   d7810:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d7812:	f7fe fb39 	bl	d5e88 <_Z18tamperAlertChangedv>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm ended", "{DEVICE_NAME} tamper alarm ended.");
        #endif  */   
      }
      // Toggle interrupts - i.e after inactivity check for activity
      adxl.ActivityINT(1);
   d7816:	2101      	movs	r1, #1
   d7818:	481e      	ldr	r0, [pc, #120]	; (d7894 <_Z10checkAccelv+0xcc>)
   d781a:	f002 fd3e 	bl	da29a <_ZN7ADXL34511ActivityINTEb>
    }
    // Activity
    if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
   d781e:	2204      	movs	r2, #4
   d7820:	4629      	mov	r1, r5
   d7822:	481c      	ldr	r0, [pc, #112]	; (d7894 <_Z10checkAccelv+0xcc>)
   d7824:	f002 fbc8 	bl	d9fb8 <_ZN7ADXL3459triggeredEhi>
   d7828:	b1a8      	cbz	r0, d7856 <_Z10checkAccelv+0x8e>
      debug("*** ACTIVITY ***\n");
   d782a:	f005 fa65 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d782e:	491b      	ldr	r1, [pc, #108]	; (d789c <_Z10checkAccelv+0xd4>)
   d7830:	f005 f89f 	bl	dc972 <_ZN5Print5printEPKc>
      // *Temp Debug* Turn on the LED.
      // digitalWrite(ledPin, HIGH);
      //Robert add code here for Blynk to do when activity is sensed
      tamperCurrentAlert = true;
   d7834:	2301      	movs	r3, #1
   d7836:	7023      	strb	r3, [r4, #0]
      if (tamperAlertChanged())
   d7838:	f7fe fb26 	bl	d5e88 <_Z18tamperAlertChangedv>
   d783c:	b138      	cbz	r0, d784e <_Z10checkAccelv+0x86>
      {
        #ifdef Version_2
        if (state.notifyTamper==true)
   d783e:	4b18      	ldr	r3, [pc, #96]	; (d78a0 <_Z10checkAccelv+0xd8>)
   d7840:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
   d7844:	b11b      	cbz	r3, d784e <_Z10checkAccelv+0x86>
          Blynk.logEvent("tamper_alert");
   d7846:	4917      	ldr	r1, [pc, #92]	; (d78a4 <_Z10checkAccelv+0xdc>)
   d7848:	4817      	ldr	r0, [pc, #92]	; (d78a8 <_Z10checkAccelv+0xe0>)
   d784a:	f7ff ffa1 	bl	d7790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
        #else
        Blynk.email(state.tamperEmail, "{DEVICE_NAME} : Tamper alarm", "{DEVICE_NAME} tamper alarm!");
        #endif      
      }
      // Toggle interrupts - i.e after activity check for inactivity
      adxl.InactivityINT(1);
   d784e:	2101      	movs	r1, #1
   d7850:	4810      	ldr	r0, [pc, #64]	; (d7894 <_Z10checkAccelv+0xcc>)
   d7852:	f002 fd28 	bl	da2a6 <_ZN7ADXL34513InactivityINTEb>
    }
    accelInterrupt=false;
   d7856:	2300      	movs	r3, #0
   d7858:	7033      	strb	r3, [r6, #0]
  }

// Only buzzer for tamper 
  if ((tamperCurrentAlert==false)&&(!VapeBuzzerOn))
   d785a:	7823      	ldrb	r3, [r4, #0]
   d785c:	b933      	cbnz	r3, d786c <_Z10checkAccelv+0xa4>
   d785e:	4b13      	ldr	r3, [pc, #76]	; (d78ac <_Z10checkAccelv+0xe4>)
   d7860:	7819      	ldrb	r1, [r3, #0]
   d7862:	b919      	cbnz	r1, d786c <_Z10checkAccelv+0xa4>
  {
    //Buzzer Off
    digitalWrite(buzzer, LOW);
   d7864:	4b12      	ldr	r3, [pc, #72]	; (d78b0 <_Z10checkAccelv+0xe8>)
   d7866:	8818      	ldrh	r0, [r3, #0]
   d7868:	f005 fecf 	bl	dd60a <digitalWrite>
  }

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
   d786c:	7823      	ldrb	r3, [r4, #0]
   d786e:	b153      	cbz	r3, d7886 <_Z10checkAccelv+0xbe>
   d7870:	4b0b      	ldr	r3, [pc, #44]	; (d78a0 <_Z10checkAccelv+0xd8>)
   d7872:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
   d7876:	b133      	cbz	r3, d7886 <_Z10checkAccelv+0xbe>
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d7878:	4b0d      	ldr	r3, [pc, #52]	; (d78b0 <_Z10checkAccelv+0xe8>)
   d787a:	2101      	movs	r1, #1
   d787c:	8818      	ldrh	r0, [r3, #0]
  }

}
   d787e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  if ((tamperCurrentAlert==true)&&(state.buzzerTamper==true))
  {
    //Buzzer On
    if (state.buzzerTamper)
      digitalWrite(buzzer, HIGH);
   d7882:	f005 bec2 	b.w	dd60a <digitalWrite>
   d7886:	bd70      	pop	{r4, r5, r6, pc}
   d7888:	2003dfbc 	.word	0x2003dfbc
   d788c:	2003dfc4 	.word	0x2003dfc4
   d7890:	000e7c24 	.word	0x000e7c24
   d7894:	2003db40 	.word	0x2003db40
   d7898:	000e7c3f 	.word	0x000e7c3f
   d789c:	000e7c53 	.word	0x000e7c53
   d78a0:	2003db78 	.word	0x2003db78
   d78a4:	000e7c65 	.word	0x000e7c65
   d78a8:	2003e338 	.word	0x2003e338
   d78ac:	2003d8ec 	.word	0x2003d8ec
   d78b0:	2003d678 	.word	0x2003d678

000d78b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>:

    bool connected() const { return state == CONNECTED; }

    bool isTokenInvalid() const { return state == TOKEN_INVALID; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
   d78b4:	b570      	push	{r4, r5, r6, lr}
   d78b6:	4604      	mov	r4, r0
   d78b8:	6800      	ldr	r0, [r0, #0]
   d78ba:	460e      	mov	r6, r1
   d78bc:	f003 fe50 	bl	db560 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        state = CONNECTING;
   d78c0:	2300      	movs	r3, #0
   d78c2:	7763      	strb	r3, [r4, #29]
        millis_time_t started = BlynkMillis();
   d78c4:	f001 ff92 	bl	d97ec <_Z11BlynkMillisv>
   d78c8:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d78ca:	7f63      	ldrb	r3, [r4, #29]
   d78cc:	2b01      	cmp	r3, #1
   d78ce:	d009      	beq.n	d78e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
   d78d0:	f001 ff8c 	bl	d97ec <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d78d4:	1b40      	subs	r0, r0, r5
   d78d6:	42b0      	cmp	r0, r6
   d78d8:	d204      	bcs.n	d78e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x30>
               (BlynkMillis() - started < timeout))
        {
            run();
   d78da:	2100      	movs	r1, #0
   d78dc:	4620      	mov	r0, r4
   d78de:	f7fe fec7 	bl	d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d78e2:	e7f2      	b.n	d78ca <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm+0x16>
               (BlynkMillis() - started < timeout))
        {
            run();
        }
        return state == CONNECTED;
   d78e4:	7f60      	ldrb	r0, [r4, #29]
    }
   d78e6:	1e43      	subs	r3, r0, #1
   d78e8:	4258      	negs	r0, r3
   d78ea:	4158      	adcs	r0, r3
   d78ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d78f0 <_Z7connectv>:
    
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d78f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    debug("Cellular ready\n");
  }
  #endif
  #if Wiring_WiFi
  bool cellready=WiFi.ready();
   d78f2:	4d55      	ldr	r5, [pc, #340]	; (d7a48 <_Z7connectv+0x158>)
   d78f4:	4628      	mov	r0, r5
   d78f6:	f7fd fef2 	bl	d56de <_ZN5spark9WiFiClass5readyEv>
  if (!cellready)
   d78fa:	4604      	mov	r4, r0
   d78fc:	bb30      	cbnz	r0, d794c <_Z7connectv+0x5c>
  {
    debug("Attempting to connect WiFi...\n");
   d78fe:	f005 f9fb 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7902:	4952      	ldr	r1, [pc, #328]	; (d7a4c <_Z7connectv+0x15c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7904:	4e52      	ldr	r6, [pc, #328]	; (d7a50 <_Z7connectv+0x160>)
   d7906:	f005 f834 	bl	dc972 <_ZN5Print5printEPKc>
    WiFi.on();
   d790a:	4628      	mov	r0, r5
   d790c:	f7fd feec 	bl	d56e8 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7910:	4623      	mov	r3, r4
   d7912:	4622      	mov	r2, r4
   d7914:	4621      	mov	r1, r4
   d7916:	6868      	ldr	r0, [r5, #4]
   d7918:	f003 fa66 	bl	dade8 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d791c:	4620      	mov	r0, r4
   d791e:	f003 f961 	bl	dabe4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7922:	2500      	movs	r5, #0
   d7924:	4604      	mov	r4, r0
   d7926:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d7928:	2000      	movs	r0, #0
   d792a:	f003 f95b 	bl	dabe4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d792e:	1b00      	subs	r0, r0, r4
   d7930:	eb61 0105 	sbc.w	r1, r1, r5
   d7934:	428f      	cmp	r7, r1
   d7936:	bf08      	it	eq
   d7938:	4286      	cmpeq	r6, r0
   d793a:	d35f      	bcc.n	d79fc <_Z7connectv+0x10c>
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d793c:	4842      	ldr	r0, [pc, #264]	; (d7a48 <_Z7connectv+0x158>)
   d793e:	f7fd fece 	bl	d56de <_ZN5spark9WiFiClass5readyEv>
   d7942:	2800      	cmp	r0, #0
   d7944:	d15a      	bne.n	d79fc <_Z7connectv+0x10c>
            spark_process();
   d7946:	f003 fa17 	bl	dad78 <spark_process>
   d794a:	e7ed      	b.n	d7928 <_Z7connectv+0x38>
    System.reset();
    }
  }
  else
  {
    debug("WiFi ready\n");
   d794c:	f005 f9d4 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7950:	4940      	ldr	r1, [pc, #256]	; (d7a54 <_Z7connectv+0x164>)
   d7952:	f005 f80e 	bl	dc972 <_ZN5Print5printEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7956:	f003 fa1f 	bl	dad98 <spark_cloud_flag_connected>
  }
  #endif  
//*** Commented out for testing without particle connected ***
  bool partconnected=Particle.connected();
  if (!partconnected)
   d795a:	4604      	mov	r4, r0
   d795c:	b9f8      	cbnz	r0, d799e <_Z7connectv+0xae>
  {
    debug("Attempting to connect to Particle...\n");
   d795e:	f005 f9cb 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7962:	493d      	ldr	r1, [pc, #244]	; (d7a58 <_Z7connectv+0x168>)
   d7964:	f005 f805 	bl	dc972 <_ZN5Print5printEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7968:	f003 fa0e 	bl	dad88 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d796c:	4620      	mov	r0, r4
   d796e:	f003 f939 	bl	dabe4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7972:	2500      	movs	r5, #0
   d7974:	4604      	mov	r4, r0
   d7976:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d797a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d797c:	2000      	movs	r0, #0
   d797e:	f003 f931 	bl	dabe4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7982:	1b00      	subs	r0, r0, r4
   d7984:	eb61 0105 	sbc.w	r1, r1, r5
   d7988:	428f      	cmp	r7, r1
   d798a:	bf08      	it	eq
   d798c:	4286      	cmpeq	r6, r0
   d798e:	d348      	bcc.n	d7a22 <_Z7connectv+0x132>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7990:	f003 fa02 	bl	dad98 <spark_cloud_flag_connected>
   d7994:	2800      	cmp	r0, #0
   d7996:	d144      	bne.n	d7a22 <_Z7connectv+0x132>
            spark_process();
   d7998:	f003 f9ee 	bl	dad78 <spark_process>
   d799c:	e7ee      	b.n	d797c <_Z7connectv+0x8c>
      System.reset();
    } 
  }
  else
  {
    debug("Particle connected\n");
   d799e:	f005 f9ab 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d79a2:	492e      	ldr	r1, [pc, #184]	; (d7a5c <_Z7connectv+0x16c>)
   d79a4:	f004 ffe5 	bl	dc972 <_ZN5Print5printEPKc>
   d79a8:	4c2d      	ldr	r4, [pc, #180]	; (d7a60 <_Z7connectv+0x170>)
  }
//*** Commented out for testing without particle connected ***
  bool blynkconnected=Blynk.connected();
  if (!blynkconnected)
   d79aa:	7f63      	ldrb	r3, [r4, #29]
   d79ac:	2b01      	cmp	r3, #1
   d79ae:	d01e      	beq.n	d79ee <_Z7connectv+0xfe>
  {
    debug("Attempting to connect to Blynk...\n");
   d79b0:	f005 f9a2 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d79b4:	492b      	ldr	r1, [pc, #172]	; (d7a64 <_Z7connectv+0x174>)
   d79b6:	f004 ffdc 	bl	dc972 <_ZN5Print5printEPKc>
    #ifdef Version_2
    Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d79ba:	4b2b      	ldr	r3, [pc, #172]	; (d7a68 <_Z7connectv+0x178>)
   d79bc:	492b      	ldr	r1, [pc, #172]	; (d7a6c <_Z7connectv+0x17c>)
   d79be:	881b      	ldrh	r3, [r3, #0]
   d79c0:	4a2b      	ldr	r2, [pc, #172]	; (d7a70 <_Z7connectv+0x180>)
   d79c2:	4620      	mov	r0, r4
   d79c4:	f7fe fbda 	bl	d617c <_ZN13BlynkParticle6configEPKcS1_t>
    #else
    Blynk.config(auth, "zeptosense.blynk.cc");
    #endif
    if (!Blynk.connect())
   d79c8:	f242 3128 	movw	r1, #9000	; 0x2328
   d79cc:	4620      	mov	r0, r4
   d79ce:	f7ff ff71 	bl	d78b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d79d2:	2800      	cmp	r0, #0
   d79d4:	d136      	bne.n	d7a44 <_Z7connectv+0x154>
    {
      debug("Blynk not connected\n");
   d79d6:	f005 f98f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d79da:	4926      	ldr	r1, [pc, #152]	; (d7a74 <_Z7connectv+0x184>)
   d79dc:	f004 ffc9 	bl	dc972 <_ZN5Print5printEPKc>
      delay(200);
   d79e0:	20c8      	movs	r0, #200	; 0xc8
   d79e2:	f004 ff9d 	bl	dc920 <delay>
  }
  else
  {
    debug("Blynk connected\n");
  }
}
   d79e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!Blynk.connect())
    {
      debug("Blynk not connected\n");
      delay(200);
      // timerSleep(3);
      System.reset();      
   d79ea:	f005 ba63 	b.w	dceb4 <_ZN11SystemClass5resetEv>
    }
  }
  else
  {
    debug("Blynk connected\n");
   d79ee:	f005 f983 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d79f2:	4921      	ldr	r1, [pc, #132]	; (d7a78 <_Z7connectv+0x188>)
  }
}
   d79f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();      
    }
  }
  else
  {
    debug("Blynk connected\n");
   d79f8:	f004 bfbb 	b.w	dc972 <_ZN5Print5printEPKc>
  if (!cellready)
  {
    debug("Attempting to connect WiFi...\n");
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,180000);
   d79fc:	4812      	ldr	r0, [pc, #72]	; (d7a48 <_Z7connectv+0x158>)
   d79fe:	f7fd fe6e 	bl	d56de <_ZN5spark9WiFiClass5readyEv>
    if (!WiFi.ready())
   d7a02:	4811      	ldr	r0, [pc, #68]	; (d7a48 <_Z7connectv+0x158>)
   d7a04:	f7fd fe6b 	bl	d56de <_ZN5spark9WiFiClass5readyEv>
   d7a08:	2800      	cmp	r0, #0
   d7a0a:	d1a4      	bne.n	d7956 <_Z7connectv+0x66>
    {
    debug("WiFi not ready\n");
   d7a0c:	f005 f974 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7a10:	491a      	ldr	r1, [pc, #104]	; (d7a7c <_Z7connectv+0x18c>)
   d7a12:	f004 ffae 	bl	dc972 <_ZN5Print5printEPKc>
    delay(200);
   d7a16:	20c8      	movs	r0, #200	; 0xc8
   d7a18:	f004 ff82 	bl	dc920 <delay>
    // timerSleep(3);
    System.reset();
   d7a1c:	f005 fa4a 	bl	dceb4 <_ZN11SystemClass5resetEv>
   d7a20:	e799      	b.n	d7956 <_Z7connectv+0x66>
   d7a22:	f003 f9b9 	bl	dad98 <spark_cloud_flag_connected>
   d7a26:	f003 f9b7 	bl	dad98 <spark_cloud_flag_connected>
  if (!partconnected)
  {
    debug("Attempting to connect to Particle...\n");
    Particle.connect();
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d7a2a:	2800      	cmp	r0, #0
   d7a2c:	d1bc      	bne.n	d79a8 <_Z7connectv+0xb8>
    {
      debug("Particle not connected\n");
   d7a2e:	f005 f963 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7a32:	4913      	ldr	r1, [pc, #76]	; (d7a80 <_Z7connectv+0x190>)
   d7a34:	f004 ff9d 	bl	dc972 <_ZN5Print5printEPKc>
      delay(200);
   d7a38:	20c8      	movs	r0, #200	; 0xc8
   d7a3a:	f004 ff71 	bl	dc920 <delay>
      // timerSleep(3);
      System.reset();
   d7a3e:	f005 fa39 	bl	dceb4 <_ZN11SystemClass5resetEv>
   d7a42:	e7b1      	b.n	d79a8 <_Z7connectv+0xb8>
   d7a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7a46:	bf00      	nop
   d7a48:	2003e55c 	.word	0x2003e55c
   d7a4c:	000e7c72 	.word	0x000e7c72
   d7a50:	0002bf1f 	.word	0x0002bf1f
   d7a54:	000e7c91 	.word	0x000e7c91
   d7a58:	000e7c9d 	.word	0x000e7c9d
   d7a5c:	000e7cdb 	.word	0x000e7cdb
   d7a60:	2003e338 	.word	0x2003e338
   d7a64:	000e7cef 	.word	0x000e7cef
   d7a68:	2003d684 	.word	0x2003d684
   d7a6c:	2003d690 	.word	0x2003d690
   d7a70:	000e7d12 	.word	0x000e7d12
   d7a74:	000e783b 	.word	0x000e783b
   d7a78:	000e7d27 	.word	0x000e7d27
   d7a7c:	000e782b 	.word	0x000e782b
   d7a80:	000e7cc3 	.word	0x000e7cc3

000d7a84 <_Z21connectWithoutWaitingv>:
    debug("Blynk connected\n");
  }
}

void connectWithoutWaiting()
{
   d7a84:	b570      	push	{r4, r5, r6, lr}
      Cellular.connect();
    }
  }
  #endif
  #if Wiring_WiFi
  bool wifiready=WiFi.ready();
   d7a86:	4c2e      	ldr	r4, [pc, #184]	; (d7b40 <_Z21connectWithoutWaitingv+0xbc>)
   d7a88:	4620      	mov	r0, r4
   d7a8a:	f7fd fe28 	bl	d56de <_ZN5spark9WiFiClass5readyEv>
  if (!wifiready)
   d7a8e:	4605      	mov	r5, r0
   d7a90:	b9e0      	cbnz	r0, d7acc <_Z21connectWithoutWaitingv+0x48>
  {
    debug("WiFi not ready\n");
   d7a92:	f005 f931 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7a96:	492b      	ldr	r1, [pc, #172]	; (d7b44 <_Z21connectWithoutWaitingv+0xc0>)
   d7a98:	f004 ff6b 	bl	dc972 <_ZN5Print5printEPKc>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7a9c:	462a      	mov	r2, r5
   d7a9e:	4629      	mov	r1, r5
   d7aa0:	6860      	ldr	r0, [r4, #4]
   d7aa2:	f003 f9a9 	bl	dadf8 <network_connecting>
    if (!WiFi.connecting())
   d7aa6:	4605      	mov	r5, r0
   d7aa8:	2800      	cmp	r0, #0
   d7aaa:	d148      	bne.n	d7b3e <_Z21connectWithoutWaitingv+0xba>
    {
      debug("Attempting to connect WiFi...\n");
   d7aac:	f005 f924 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7ab0:	4925      	ldr	r1, [pc, #148]	; (d7b48 <_Z21connectWithoutWaitingv+0xc4>)
   d7ab2:	f004 ff5e 	bl	dc972 <_ZN5Print5printEPKc>
      WiFi.on();
   d7ab6:	4620      	mov	r0, r4
   d7ab8:	f7fd fe16 	bl	d56e8 <_ZN5spark9WiFiClass2onEv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7abc:	462b      	mov	r3, r5
   d7abe:	462a      	mov	r2, r5
   d7ac0:	4629      	mov	r1, r5
   d7ac2:	6860      	ldr	r0, [r4, #4]
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d7ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7ac8:	f003 b98e 	b.w	dade8 <network_connect>
   d7acc:	4c1f      	ldr	r4, [pc, #124]	; (d7b4c <_Z21connectWithoutWaitingv+0xc8>)
  {
    #if Wiring_Cellular
    debug("Cellular ready\n");
    #endif
    #if Wiring_WiFi
    debug("WiFi ready\n");
   d7ace:	f005 f913 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7ad2:	491f      	ldr	r1, [pc, #124]	; (d7b50 <_Z21connectWithoutWaitingv+0xcc>)
   d7ad4:	f004 ff4d 	bl	dc972 <_ZN5Print5printEPKc>
    #endif    
    bool blynkconnected=Blynk.connected();
    if (!blynkconnected)
   d7ad8:	7f63      	ldrb	r3, [r4, #29]
   d7ada:	2b01      	cmp	r3, #1
   d7adc:	d012      	beq.n	d7b04 <_Z21connectWithoutWaitingv+0x80>
    {
      debug("Attempting to connect to Blynk...\n");
   d7ade:	f005 f90b 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7ae2:	491c      	ldr	r1, [pc, #112]	; (d7b54 <_Z21connectWithoutWaitingv+0xd0>)
   d7ae4:	f004 ff45 	bl	dc972 <_ZN5Print5printEPKc>

      Blynk.run();
   d7ae8:	2100      	movs	r1, #0
   d7aea:	4620      	mov	r0, r4
   d7aec:	f7fe fdc0 	bl	d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
      if (!Blynk.connect())
   d7af0:	f242 3128 	movw	r1, #9000	; 0x2328
   d7af4:	4620      	mov	r0, r4
   d7af6:	f7ff fedd 	bl	d78b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7connectEm>
   d7afa:	b940      	cbnz	r0, d7b0e <_Z21connectWithoutWaitingv+0x8a>
      {
        debug("Blynk not connected\n");
   d7afc:	f005 f8fc 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b00:	4915      	ldr	r1, [pc, #84]	; (d7b58 <_Z21connectWithoutWaitingv+0xd4>)
   d7b02:	e002      	b.n	d7b0a <_Z21connectWithoutWaitingv+0x86>
      }
    }
    else
    {
      debug("Blynk connected\n");
   d7b04:	f005 f8f8 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b08:	4914      	ldr	r1, [pc, #80]	; (d7b5c <_Z21connectWithoutWaitingv+0xd8>)
   d7b0a:	f004 ff32 	bl	dc972 <_ZN5Print5printEPKc>
   d7b0e:	f003 f943 	bl	dad98 <spark_cloud_flag_connected>
    }

  //*** Commented out for testing without particle connected ***
    bool partconnected=Particle.connected();
    if (!partconnected)
   d7b12:	b968      	cbnz	r0, d7b30 <_Z21connectWithoutWaitingv+0xac>
    {
      debug("Attempting to connect to Particle...\n");
   d7b14:	f005 f8f0 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b18:	4911      	ldr	r1, [pc, #68]	; (d7b60 <_Z21connectWithoutWaitingv+0xdc>)
   d7b1a:	f004 ff2a 	bl	dc972 <_ZN5Print5printEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d7b1e:	f003 f933 	bl	dad88 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b22:	f003 f939 	bl	dad98 <spark_cloud_flag_connected>
      Particle.connect();
      if (!Particle.connected())
   d7b26:	b950      	cbnz	r0, d7b3e <_Z21connectWithoutWaitingv+0xba>
      {
        debug("Particle not connected\n");
   d7b28:	f005 f8e6 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b2c:	490d      	ldr	r1, [pc, #52]	; (d7b64 <_Z21connectWithoutWaitingv+0xe0>)
   d7b2e:	e002      	b.n	d7b36 <_Z21connectWithoutWaitingv+0xb2>
      } 
    }
    else
    {
      debug("Particle connected\n");
   d7b30:	f005 f8e2 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b34:	490c      	ldr	r1, [pc, #48]	; (d7b68 <_Z21connectWithoutWaitingv+0xe4>)
    }
  //*** Commented out for testing without particle connected ***
  }


}  
   d7b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        debug("Particle not connected\n");
      } 
    }
    else
    {
      debug("Particle connected\n");
   d7b3a:	f004 bf1a 	b.w	dc972 <_ZN5Print5printEPKc>
   d7b3e:	bd70      	pop	{r4, r5, r6, pc}
   d7b40:	2003e55c 	.word	0x2003e55c
   d7b44:	000e782b 	.word	0x000e782b
   d7b48:	000e7c72 	.word	0x000e7c72
   d7b4c:	2003e338 	.word	0x2003e338
   d7b50:	000e7c91 	.word	0x000e7c91
   d7b54:	000e7cef 	.word	0x000e7cef
   d7b58:	000e783b 	.word	0x000e783b
   d7b5c:	000e7d27 	.word	0x000e7d27
   d7b60:	000e7c9d 	.word	0x000e7c9d
   d7b64:	000e7cc3 	.word	0x000e7cc3
   d7b68:	000e7cdb 	.word	0x000e7cdb

000d7b6c <loop>:
  readSensors(); 
  debug("End Setup() function\n");
}

void loop()
{
   d7b6c:	b513      	push	{r0, r1, r4, lr}
   //If woken up by a RTC Sleep then was in Standby so go into Deep Sleep now
  SleepResult result = System.sleepResult();
   d7b6e:	491c      	ldr	r1, [pc, #112]	; (d7be0 <loop+0x74>)
   d7b70:	4c1c      	ldr	r4, [pc, #112]	; (d7be4 <loop+0x78>)
   d7b72:	4668      	mov	r0, sp
   d7b74:	f7fd fdbe 	bl	d56f4 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d7b78:	4668      	mov	r0, sp
   d7b7a:	f005 fa15 	bl	dcfa8 <_ZNK11SleepResult6reasonEv>
   d7b7e:	2802      	cmp	r0, #2
   d7b80:	d111      	bne.n	d7ba6 <loop+0x3a>
    }
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      debug("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep\n");
   d7b82:	f005 f8b9 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7b86:	4918      	ldr	r1, [pc, #96]	; (d7be8 <loop+0x7c>)
   d7b88:	f004 fef3 	bl	dc972 <_ZN5Print5printEPKc>
      state.bSleepModeStandby=false;
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d7b8c:	4b17      	ldr	r3, [pc, #92]	; (d7bec <loop+0x80>)
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      debug("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep\n");
      state.bSleepModeStandby=false;
   d7b8e:	2100      	movs	r1, #0
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d7b90:	8818      	ldrh	r0, [r3, #0]
    case WAKEUP_REASON_PIN: {
      break;
    }
    case WAKEUP_REASON_RTC: {
      debug("Device was woken up by the Particle RTC (after 15 minutes), go into Deep Sleep\n");
      state.bSleepModeStandby=false;
   d7b92:	f884 1424 	strb.w	r1, [r4, #1060]	; 0x424
      // Delay here in loop is okay because we are about to sleep
      digitalWrite(buzzer, LOW);
   d7b96:	f005 fd38 	bl	dd60a <digitalWrite>
      delay(2000);
   d7b9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d7b9e:	f004 febf 	bl	dc920 <delay>
      deepSleep();
   d7ba2:	f7ff f8e7 	bl	d6d74 <_Z9deepSleepv>
    case WAKEUP_REASON_PIN_OR_RTC: {
      break;
    }
  }

  Blynk.run();
   d7ba6:	2100      	movs	r1, #0
   d7ba8:	4811      	ldr	r0, [pc, #68]	; (d7bf0 <loop+0x84>)
   d7baa:	f7fe fd61 	bl	d6670 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  // Note the use of timers in the loop per Blynk best practice
  sensorTimer.run(); // BlynkTimer is working...
   d7bae:	4811      	ldr	r0, [pc, #68]	; (d7bf4 <loop+0x88>)
   d7bb0:	f001 fe9f 	bl	d98f2 <_ZN10BlynkTimer3runEv>
  accelTimer.run();
   d7bb4:	4810      	ldr	r0, [pc, #64]	; (d7bf8 <loop+0x8c>)
   d7bb6:	f001 fe9c 	bl	d98f2 <_ZN10BlynkTimer3runEv>

  if (readingCount>=state.numberOfReadings)// Number of readings variable
   d7bba:	4b10      	ldr	r3, [pc, #64]	; (d7bfc <loop+0x90>)
   d7bbc:	6862      	ldr	r2, [r4, #4]
   d7bbe:	681b      	ldr	r3, [r3, #0]
   d7bc0:	429a      	cmp	r2, r3
   d7bc2:	dc0a      	bgt.n	d7bda <loop+0x6e>
  {
    // Delay here in loop is okay because we are about to sleep
    digitalWrite(buzzer, LOW);
   d7bc4:	4b09      	ldr	r3, [pc, #36]	; (d7bec <loop+0x80>)
   d7bc6:	2100      	movs	r1, #0
   d7bc8:	8818      	ldrh	r0, [r3, #0]
   d7bca:	f005 fd1e 	bl	dd60a <digitalWrite>
    delay(2000);
   d7bce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d7bd2:	f004 fea5 	bl	dc920 <delay>
    deepSleep();
   d7bd6:	f7ff f8cd 	bl	d6d74 <_Z9deepSleepv>
  }

}
   d7bda:	b002      	add	sp, #8
   d7bdc:	bd10      	pop	{r4, pc}
   d7bde:	bf00      	nop
   d7be0:	2003e5f4 	.word	0x2003e5f4
   d7be4:	2003db78 	.word	0x2003db78
   d7be8:	000e7d38 	.word	0x000e7d38
   d7bec:	2003d678 	.word	0x2003d678
   d7bf0:	2003e338 	.word	0x2003e338
   d7bf4:	2003d8f0 	.word	0x2003d8f0
   d7bf8:	2003e0f4 	.word	0x2003e0f4
   d7bfc:	2003d814 	.word	0x2003d814

000d7c00 <_Z11readSensorsv>:
//float ULP::_Vsup =3.3;  //voltage supplied to V+ of ULP, ideally 3.3 Volts 

///////////////////////

void readSensors()
{
   d7c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c04:	ed2d 8b02 	vpush	{d8}
   d7c08:	b0a9      	sub	sp, #164	; 0xa4
  debug("start readSensors\n");
   d7c0a:	f005 f875 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7c0e:	49b0      	ldr	r1, [pc, #704]	; (d7ed0 <_Z11readSensorsv+0x2d0>)
#ifdef KURTDEBUG
  String msg = "";
  msg = msg + "State values are: \n" +
    "Buzzer Tamper " + state.buzzerTamper + "\n" +
   d7c10:	4cb0      	ldr	r4, [pc, #704]	; (d7ed4 <_Z11readSensorsv+0x2d4>)

///////////////////////

void readSensors()
{
  debug("start readSensors\n");
   d7c12:	f004 feae 	bl	dc972 <_ZN5Print5printEPKc>
#ifdef KURTDEBUG
  String msg = "";
   d7c16:	49b0      	ldr	r1, [pc, #704]	; (d7ed8 <_Z11readSensorsv+0x2d8>)
   d7c18:	a803      	add	r0, sp, #12
   d7c1a:	f005 faf2 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7c1e:	a903      	add	r1, sp, #12
   d7c20:	a81f      	add	r0, sp, #124	; 0x7c
   d7c22:	f005 fb2d 	bl	dd280 <_ZN6StringC1ERKS_>
  msg = msg + "State values are: \n" +
   d7c26:	49ad      	ldr	r1, [pc, #692]	; (d7edc <_Z11readSensorsv+0x2dc>)
   d7c28:	a81f      	add	r0, sp, #124	; 0x7c
   d7c2a:	f005 fbcc 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Buzzer Tamper " + state.buzzerTamper + "\n" +
   d7c2e:	49ac      	ldr	r1, [pc, #688]	; (d7ee0 <_Z11readSensorsv+0x2e0>)
   d7c30:	f005 fbc9 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c34:	f894 1417 	ldrb.w	r1, [r4, #1047]	; 0x417
   d7c38:	f005 fbd7 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7c3c:	49a9      	ldr	r1, [pc, #676]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7c3e:	f005 fbc2 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Buzzer Vapor " + state.buzzerVapor + "\n" +
   d7c42:	49a9      	ldr	r1, [pc, #676]	; (d7ee8 <_Z11readSensorsv+0x2e8>)
   d7c44:	f005 fbbf 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c48:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   d7c4c:	f005 fbcd 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7c50:	49a4      	ldr	r1, [pc, #656]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7c52:	f005 fbb8 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Notify Vapor " + state.notifyVapor + "\n" +
   d7c56:	49a5      	ldr	r1, [pc, #660]	; (d7eec <_Z11readSensorsv+0x2ec>)
   d7c58:	f005 fbb5 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c5c:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
   d7c60:	f005 fbc3 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7c64:	499f      	ldr	r1, [pc, #636]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7c66:	f005 fbae 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Notify Tamper " + state.notifyTamper + "\n" +
   d7c6a:	49a1      	ldr	r1, [pc, #644]	; (d7ef0 <_Z11readSensorsv+0x2f0>)
   d7c6c:	f005 fbab 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c70:	f894 141a 	ldrb.w	r1, [r4, #1050]	; 0x41a
   d7c74:	f005 fbb9 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7c78:	499a      	ldr	r1, [pc, #616]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7c7a:	f005 fba4 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Notify Battery " + state.notifyBattery + "\n" +
   d7c7e:	499d      	ldr	r1, [pc, #628]	; (d7ef4 <_Z11readSensorsv+0x2f4>)
   d7c80:	f005 fba1 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c84:	f894 141b 	ldrb.w	r1, [r4, #1051]	; 0x41b
   d7c88:	f005 fbaf 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7c8c:	4995      	ldr	r1, [pc, #596]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7c8e:	f005 fb9a 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Activity Threshold " + state.ActivityThreshold + "\n" +
   d7c92:	4999      	ldr	r1, [pc, #612]	; (d7ef8 <_Z11readSensorsv+0x2f8>)
   d7c94:	f005 fb97 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7c98:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d7c9c:	f005 fba5 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7ca0:	4990      	ldr	r1, [pc, #576]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7ca2:	f005 fb90 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Device Zone " + state.deviceZone + "\n";
   d7ca6:	4995      	ldr	r1, [pc, #596]	; (d7efc <_Z11readSensorsv+0x2fc>)
   d7ca8:	f005 fb8d 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7cac:	f8d4 1420 	ldr.w	r1, [r4, #1056]	; 0x420
   d7cb0:	f005 fb9b 	bl	dd3ea <_ZplRK15StringSumHelperi>
   d7cb4:	498b      	ldr	r1, [pc, #556]	; (d7ee4 <_Z11readSensorsv+0x2e4>)
   d7cb6:	f005 fb86 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d7cba:	4601      	mov	r1, r0
   d7cbc:	a803      	add	r0, sp, #12
   d7cbe:	f005 fad0 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d7cc2:	a81f      	add	r0, sp, #124	; 0x7c
   d7cc4:	f005 fa56 	bl	dd174 <_ZN6StringD1Ev>
  debug(msg);
   d7cc8:	f005 f816 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7ccc:	9903      	ldr	r1, [sp, #12]
   d7cce:	f004 fe50 	bl	dc972 <_ZN5Print5printEPKc>
#endif 
  // Woke up out of a sleep - setup the HW
  if (state.bInSleepMode){
   d7cd2:	f894 3425 	ldrb.w	r3, [r4, #1061]	; 0x425
   d7cd6:	2b00      	cmp	r3, #0
   d7cd8:	f000 824d 	beq.w	d8176 <_Z11readSensorsv+0x576>
    
    Wire.setSpeed(20000);
   d7cdc:	f005 fc28 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7ce0:	f644 6120 	movw	r1, #20000	; 0x4e20
   d7ce4:	f003 ff0a 	bl	dbafc <_ZN7TwoWire8setSpeedEm>
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
   d7ce8:	2103      	movs	r1, #3
   d7cea:	2008      	movs	r0, #8
   d7cec:	f005 fc7c 	bl	dd5e8 <pinMode>
    Serial.begin(115200);
   d7cf0:	f003 ffea 	bl	dbcc8 <_Z16_fetch_usbserialv>
   d7cf4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7cf8:	f003 ffda 	bl	dbcb0 <_ZN9USBSerial5beginEl>
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
    delay(100);

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d7cfc:	4d80      	ldr	r5, [pc, #512]	; (d7f00 <_Z11readSensorsv+0x300>)
    Wire.setSpeed(20000);
    // Debug console
    pinMode(D8, INPUT_PULLDOWN);
    Serial.begin(115200);
    // Used to monitor debug without USB connection
    Serial1.begin(115200);
   d7cfe:	f004 fffb 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7d02:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d7d06:	f004 fff1 	bl	dccec <_ZN11USARTSerial5beginEm>
    delay(100);
   d7d0a:	2064      	movs	r0, #100	; 0x64
   d7d0c:	f004 fe08 	bl	dc920 <delay>

    // Buzzer connected to D7
    pinMode(buzzer, OUTPUT);
   d7d10:	2101      	movs	r1, #1
   d7d12:	8828      	ldrh	r0, [r5, #0]
   d7d14:	f005 fc68 	bl	dd5e8 <pinMode>
    digitalWrite(buzzer, LOW);
   d7d18:	2100      	movs	r1, #0
   d7d1a:	8828      	ldrh	r0, [r5, #0]
   d7d1c:	f005 fc75 	bl	dd60a <digitalWrite>

    Wire.begin();
   d7d20:	f005 fc06 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d24:	f003 feee 	bl	dbb04 <_ZN7TwoWire5beginEv>
    delay(100);
   d7d28:	2064      	movs	r0, #100	; 0x64
   d7d2a:	f004 fdf9 	bl	dc920 <delay>
    debug("Start Setup section after a sleep\n");
   d7d2e:	f004 ffe3 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7d32:	4974      	ldr	r1, [pc, #464]	; (d7f04 <_Z11readSensorsv+0x304>)
   d7d34:	f004 fe1d 	bl	dc972 <_ZN5Print5printEPKc>
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    byte expandererror, expanderaddress;

    expanderaddress = 0x20; // MCP23017 address
    Wire.beginTransmission(expanderaddress);
   d7d38:	f005 fbfa 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d3c:	2120      	movs	r1, #32
   d7d3e:	f003 ff1c 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d7d42:	f005 fbf5 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d46:	f003 ff23 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!expandererror==0)
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	d041      	beq.n	d7dd2 <_Z11readSensorsv+0x1d2>
    {
      Wire.reset();
   d7d4e:	f005 fbef 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d52:	f003 ff24 	bl	dbb9e <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(expanderaddress);
   d7d56:	f005 fbeb 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d5a:	2120      	movs	r1, #32
   d7d5c:	f003 ff0d 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
      expandererror = Wire.endTransmission();
   d7d60:	f005 fbe6 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7d64:	f003 ff14 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
    }

    // Blink LED and reset if there is an error
    if (!expandererror == 0)
   d7d68:	b398      	cbz	r0, d7dd2 <_Z11readSensorsv+0x1d2>
    {
      debug("Unable to read Expander - resetting in 9 seconds\n");
   d7d6a:	f004 ffc5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7d6e:	4966      	ldr	r1, [pc, #408]	; (d7f08 <_Z11readSensorsv+0x308>)
   d7d70:	f004 fdff 	bl	dc972 <_ZN5Print5printEPKc>
   d7d74:	4b65      	ldr	r3, [pc, #404]	; (d7f0c <_Z11readSensorsv+0x30c>)
      Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d7d76:	4a66      	ldr	r2, [pc, #408]	; (d7f10 <_Z11readSensorsv+0x310>)
   d7d78:	781b      	ldrb	r3, [r3, #0]
   d7d7a:	4966      	ldr	r1, [pc, #408]	; (d7f14 <_Z11readSensorsv+0x314>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d7d7c:	2600      	movs	r6, #0
   d7d7e:	a81f      	add	r0, sp, #124	; 0x7c
   d7d80:	f88d 6000 	strb.w	r6, [sp]
   d7d84:	f7fd fc9e 	bl	d56c4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.38>
   d7d88:	a820      	add	r0, sp, #128	; 0x80
   d7d8a:	f7fe f891 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      blinkRed.setActive(true);
   d7d8e:	2101      	movs	r1, #1
   d7d90:	4861      	ldr	r0, [pc, #388]	; (d7f18 <_Z11readSensorsv+0x318>)
   d7d92:	f7fd fcfb 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7d96:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7d9a:	f004 fdc1 	bl	dc920 <delay>
      blinkRed.setActive(false);
   d7d9e:	4631      	mov	r1, r6
   d7da0:	485d      	ldr	r0, [pc, #372]	; (d7f18 <_Z11readSensorsv+0x318>)
   d7da2:	f7fd fcf3 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
      blinkYellow.setActive(true);
   d7da6:	2101      	movs	r1, #1
   d7da8:	485c      	ldr	r0, [pc, #368]	; (d7f1c <_Z11readSensorsv+0x31c>)
   d7daa:	f7fd fcef 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7dae:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7db2:	f004 fdb5 	bl	dc920 <delay>
      blinkYellow.setActive(false);
   d7db6:	4631      	mov	r1, r6
   d7db8:	4858      	ldr	r0, [pc, #352]	; (d7f1c <_Z11readSensorsv+0x31c>)
   d7dba:	f7fd fce7 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
      blinkRed.setActive(true);
   d7dbe:	2101      	movs	r1, #1
   d7dc0:	4855      	ldr	r0, [pc, #340]	; (d7f18 <_Z11readSensorsv+0x318>)
   d7dc2:	f7fd fce3 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
      delay(3000);
   d7dc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7dca:	f004 fda9 	bl	dc920 <delay>
      System.reset();
   d7dce:	f005 f871 	bl	dceb4 <_ZN11SystemClass5resetEv>
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7dd2:	4853      	ldr	r0, [pc, #332]	; (d7f20 <_Z11readSensorsv+0x320>)
   d7dd4:	f8df 9160 	ldr.w	r9, [pc, #352]	; d7f38 <_Z11readSensorsv+0x338>

    for (size_t x=0; x<i2cLength;++x)
    {
      debug(i2cNames[x]);
      debug(": ");
      debug(i2cExists[x] + "\n");
   d7dd8:	f8df 8154 	ldr.w	r8, [pc, #340]	; d7f30 <_Z11readSensorsv+0x330>
    }
    // END CHECK
    //////////////////////////////////////////////////////////

    // Need this to switch on the power
    power.begin();
   d7ddc:	f002 fa6c 	bl	da2b8 <_ZN12IoTNodePower5beginEv>
    power.setPowerON(EXT3V3,true);
   d7de0:	2201      	movs	r2, #1
   d7de2:	2102      	movs	r1, #2
   d7de4:	484e      	ldr	r0, [pc, #312]	; (d7f20 <_Z11readSensorsv+0x320>)
   d7de6:	f002 fb11 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
    power.setPowerON(EXT5V,true);
   d7dea:	2201      	movs	r2, #1
   d7dec:	2103      	movs	r1, #3
   d7dee:	484c      	ldr	r0, [pc, #304]	; (d7f20 <_Z11readSensorsv+0x320>)
   d7df0:	f002 fb0c 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
    // Allow time to settle
    delay(100);
   d7df4:	2064      	movs	r0, #100	; 0x64
   d7df6:	f004 fd93 	bl	dc920 <delay>

    uint32_t d1=0;
   d7dfa:	aa28      	add	r2, sp, #160	; 0xa0
   d7dfc:	2600      	movs	r6, #0
   d7dfe:	f842 6d44 	str.w	r6, [r2, #-68]!
    fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d7e02:	2304      	movs	r3, #4
   d7e04:	4631      	mov	r1, r6
   d7e06:	4847      	ldr	r0, [pc, #284]	; (d7f24 <_Z11readSensorsv+0x324>)
   d7e08:	f002 fb1c 	bl	da444 <_ZN10MB85RC256V8readDataEjPhj>
    Serial1.printlnf("d1=%u", d1);
   d7e0c:	f004 ff74 	bl	dccf8 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d7e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7e12:	4a45      	ldr	r2, [pc, #276]	; (d7f28 <_Z11readSensorsv+0x328>)
   d7e14:	2101      	movs	r1, #1
   d7e16:	f004 feb6 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>

    debug("Checking i2c devices...\n");
   d7e1a:	f004 ff6d 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7e1e:	4943      	ldr	r1, [pc, #268]	; (d7f2c <_Z11readSensorsv+0x32c>)
   d7e20:	f004 fda7 	bl	dc972 <_ZN5Print5printEPKc>

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d7e24:	4b42      	ldr	r3, [pc, #264]	; (d7f30 <_Z11readSensorsv+0x330>)
   d7e26:	4943      	ldr	r1, [pc, #268]	; (d7f34 <_Z11readSensorsv+0x334>)
   d7e28:	4843      	ldr	r0, [pc, #268]	; (d7f38 <_Z11readSensorsv+0x338>)
   d7e2a:	2207      	movs	r2, #7
   d7e2c:	f7fd fd22 	bl	d5874 <_Z15checkI2CDevicesP6StringPhjPb>
   d7e30:	4607      	mov	r7, r0

    for (size_t x=0; x<i2cLength;++x)
    {
      debug(i2cNames[x]);
   d7e32:	f004 ff61 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7e36:	0133      	lsls	r3, r6, #4
   d7e38:	f853 1009 	ldr.w	r1, [r3, r9]
   d7e3c:	f004 fd99 	bl	dc972 <_ZN5Print5printEPKc>
      debug(": ");
   d7e40:	f004 ff5a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7e44:	493d      	ldr	r1, [pc, #244]	; (d7f3c <_Z11readSensorsv+0x33c>)
   d7e46:	f004 fd94 	bl	dc972 <_ZN5Print5printEPKc>
      debug(i2cExists[x] + "\n");
   d7e4a:	f004 ff55 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7e4e:	f816 3008 	ldrb.w	r3, [r6, r8]
   d7e52:	4924      	ldr	r1, [pc, #144]	; (d7ee4 <_Z11readSensorsv+0x2e4>)

    debug("Checking i2c devices...\n");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d7e54:	3601      	adds	r6, #1
    {
      debug(i2cNames[x]);
      debug(": ");
      debug(i2cExists[x] + "\n");
   d7e56:	4419      	add	r1, r3
   d7e58:	f004 fd8b 	bl	dc972 <_ZN5Print5printEPKc>

    debug("Checking i2c devices...\n");

    bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

    for (size_t x=0; x<i2cLength;++x)
   d7e5c:	2e07      	cmp	r6, #7
   d7e5e:	d1e8      	bne.n	d7e32 <_Z11readSensorsv+0x232>
    {
      debug(i2cNames[x]);
      debug(": ");
      debug(i2cExists[x] + "\n");
    }
    if (!i2cOK)
   d7e60:	2f00      	cmp	r7, #0
   d7e62:	d173      	bne.n	d7f4c <_Z11readSensorsv+0x34c>
    {
      StateString = "ERR";
   d7e64:	4936      	ldr	r1, [pc, #216]	; (d7f40 <_Z11readSensorsv+0x340>)
   d7e66:	4837      	ldr	r0, [pc, #220]	; (d7f44 <_Z11readSensorsv+0x344>)
   d7e68:	f005 fa1d 	bl	dd2a6 <_ZN6StringaSEPKc>
      debug("I2C Issue\n");
   d7e6c:	f004 ff44 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7e70:	4935      	ldr	r1, [pc, #212]	; (d7f48 <_Z11readSensorsv+0x348>)
   d7e72:	f004 fd7e 	bl	dc972 <_ZN5Print5printEPKc>
      RGB.control(true);
   d7e76:	2001      	movs	r0, #1
   d7e78:	f004 fb61 	bl	dc53e <_ZN8RGBClass7controlEb>
      // the following sets the RGB LED to red
      RGB.color(255, 0, 0);
   d7e7c:	463a      	mov	r2, r7
   d7e7e:	4639      	mov	r1, r7
   d7e80:	20ff      	movs	r0, #255	; 0xff
   d7e82:	f004 fb6c 	bl	dc55e <_ZN8RGBClass5colorEiii>
      delay(3000);
   d7e86:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d7e8a:	f004 fd49 	bl	dc920 <delay>
      // resume normal operation
      RGB.control(false);    
   d7e8e:	4638      	mov	r0, r7
   d7e90:	f004 fb55 	bl	dc53e <_ZN8RGBClass7controlEb>
  #ifdef BEEP
      digitalWrite(buzzer, HIGH);
   d7e94:	2101      	movs	r1, #1
   d7e96:	8828      	ldrh	r0, [r5, #0]
   d7e98:	f005 fbb7 	bl	dd60a <digitalWrite>
      delay(100);
   d7e9c:	2064      	movs	r0, #100	; 0x64
   d7e9e:	f004 fd3f 	bl	dc920 <delay>
      digitalWrite(buzzer, LOW);
   d7ea2:	4639      	mov	r1, r7
   d7ea4:	8828      	ldrh	r0, [r5, #0]
   d7ea6:	f005 fbb0 	bl	dd60a <digitalWrite>
  #endif
      //Generate 9 pulses on SCL to tell slave to release the bus 
      Wire.reset();     
   d7eaa:	f005 fb41 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7eae:	f003 fe76 	bl	dbb9e <_ZN7TwoWire5resetEv>
      if (!Wire.isEnabled()) {
   d7eb2:	f005 fb3d 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7eb6:	f003 fe6e 	bl	dbb96 <_ZN7TwoWire9isEnabledEv>
   d7eba:	b918      	cbnz	r0, d7ec4 <_Z11readSensorsv+0x2c4>
        Wire.begin();
   d7ebc:	f005 fb38 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7ec0:	f003 fe20 	bl	dbb04 <_ZN7TwoWire5beginEv>
      }
      Wire.end();
   d7ec4:	f005 fb34 	bl	dd530 <_Z19__fetch_global_Wirev>
   d7ec8:	f003 fe22 	bl	dbb10 <_ZN7TwoWire3endEv>
   d7ecc:	e06e      	b.n	d7fac <_Z11readSensorsv+0x3ac>
   d7ece:	bf00      	nop
   d7ed0:	000e7d88 	.word	0x000e7d88
   d7ed4:	2003db78 	.word	0x2003db78
   d7ed8:	000e7963 	.word	0x000e7963
   d7edc:	000e7d9b 	.word	0x000e7d9b
   d7ee0:	000e7daf 	.word	0x000e7daf
   d7ee4:	000e7962 	.word	0x000e7962
   d7ee8:	000e7dbe 	.word	0x000e7dbe
   d7eec:	000e7dcc 	.word	0x000e7dcc
   d7ef0:	000e7dda 	.word	0x000e7dda
   d7ef4:	000e7de9 	.word	0x000e7de9
   d7ef8:	000e7df9 	.word	0x000e7df9
   d7efc:	000e7e0d 	.word	0x000e7e0d
   d7f00:	2003d678 	.word	0x2003d678
   d7f04:	000e7e1a 	.word	0x000e7e1a
   d7f08:	000e7e3d 	.word	0x000e7e3d
   d7f0c:	2003d818 	.word	0x2003d818
   d7f10:	000e7e6f 	.word	0x000e7e6f
   d7f14:	000e7ea0 	.word	0x000e7ea0
   d7f18:	2003d7c8 	.word	0x2003d7c8
   d7f1c:	2003d7f4 	.word	0x2003d7f4
   d7f20:	2003dfa4 	.word	0x2003dfa4
   d7f24:	2003d7e8 	.word	0x2003d7e8
   d7f28:	000e7ea6 	.word	0x000e7ea6
   d7f2c:	000e7eac 	.word	0x000e7eac
   d7f30:	2003e008 	.word	0x2003e008
   d7f34:	2003d67c 	.word	0x2003d67c
   d7f38:	2003d81c 	.word	0x2003d81c
   d7f3c:	000e8a1b 	.word	0x000e8a1b
   d7f40:	000e7ec5 	.word	0x000e7ec5
   d7f44:	2003d8cc 	.word	0x2003d8cc
   d7f48:	000e7ec9 	.word	0x000e7ec9
    }
    else
    {
      StateString = "RDY";
   d7f4c:	49c1      	ldr	r1, [pc, #772]	; (d8254 <_Z11readSensorsv+0x654>)
   d7f4e:	48c2      	ldr	r0, [pc, #776]	; (d8258 <_Z11readSensorsv+0x658>)
   d7f50:	f005 f9a9 	bl	dd2a6 <_ZN6StringaSEPKc>
      debug("I2C OK\n");
   d7f54:	f004 fed0 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7f58:	49c0      	ldr	r1, [pc, #768]	; (d825c <_Z11readSensorsv+0x65c>)
   d7f5a:	f004 fd0a 	bl	dc972 <_ZN5Print5printEPKc>
      #ifdef BEEP
      digitalWrite(buzzer, HIGH);
   d7f5e:	2101      	movs	r1, #1
   d7f60:	8828      	ldrh	r0, [r5, #0]
   d7f62:	f005 fb52 	bl	dd60a <digitalWrite>
      delay(5);
   d7f66:	2005      	movs	r0, #5
   d7f68:	f004 fcda 	bl	dc920 <delay>
      digitalWrite(buzzer, LOW);
   d7f6c:	2100      	movs	r1, #0
   d7f6e:	8828      	ldrh	r0, [r5, #0]
   d7f70:	f005 fb4b 	bl	dd60a <digitalWrite>
      delay(200);  
   d7f74:	20c8      	movs	r0, #200	; 0xc8
   d7f76:	f004 fcd3 	bl	dc920 <delay>
      digitalWrite(buzzer, HIGH);
   d7f7a:	2101      	movs	r1, #1
   d7f7c:	8828      	ldrh	r0, [r5, #0]
   d7f7e:	f005 fb44 	bl	dd60a <digitalWrite>
      delay(5);
   d7f82:	2005      	movs	r0, #5
   d7f84:	f004 fccc 	bl	dc920 <delay>
      digitalWrite(buzzer, LOW);
   d7f88:	2100      	movs	r1, #0
   d7f8a:	8828      	ldrh	r0, [r5, #0]
   d7f8c:	f005 fb3d 	bl	dd60a <digitalWrite>
      delay(200);  
   d7f90:	20c8      	movs	r0, #200	; 0xc8
   d7f92:	f004 fcc5 	bl	dc920 <delay>
      digitalWrite(buzzer, HIGH);
   d7f96:	2101      	movs	r1, #1
   d7f98:	8828      	ldrh	r0, [r5, #0]
   d7f9a:	f005 fb36 	bl	dd60a <digitalWrite>
      delay(5);
   d7f9e:	2005      	movs	r0, #5
   d7fa0:	f004 fcbe 	bl	dc920 <delay>
      digitalWrite(buzzer, LOW);
   d7fa4:	2100      	movs	r1, #0
   d7fa6:	8828      	ldrh	r0, [r5, #0]
   d7fa8:	f005 fb2f 	bl	dd60a <digitalWrite>
      #endif
    }
    delay(200);
   d7fac:	20c8      	movs	r0, #200	; 0xc8
   d7fae:	f004 fcb7 	bl	dc920 <delay>
    if (!i2cOK)
   d7fb2:	b90f      	cbnz	r7, d7fb8 <_Z11readSensorsv+0x3b8>
    {
      System.reset();
   d7fb4:	f004 ff7e 	bl	dceb4 <_ZN11SystemClass5resetEv>
    }

    long int clockTime = rtc.rtcNow();
   d7fb8:	48a9      	ldr	r0, [pc, #676]	; (d8260 <_Z11readSensorsv+0x660>)
    debug("Before\n");
    debug(clockTime);
    debug(": \n");
    debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d7fba:	4eaa      	ldr	r6, [pc, #680]	; (d8264 <_Z11readSensorsv+0x664>)
    if (!i2cOK)
    {
      System.reset();
    }

    long int clockTime = rtc.rtcNow();
   d7fbc:	f002 fc38 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d7fc0:	4605      	mov	r5, r0
    debug("Before\n");
   d7fc2:	f004 fe99 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7fc6:	49a8      	ldr	r1, [pc, #672]	; (d8268 <_Z11readSensorsv+0x668>)
   d7fc8:	f004 fcd3 	bl	dc972 <_ZN5Print5printEPKc>
    debug(clockTime);
   d7fcc:	f004 fe94 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7fd0:	220a      	movs	r2, #10
   d7fd2:	4629      	mov	r1, r5
   d7fd4:	f7fe f900 	bl	d61d8 <_ZN5Print5printIiLi0EEEjT_i>
    debug(": \n");
   d7fd8:	f004 fe8e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7fdc:	49a3      	ldr	r1, [pc, #652]	; (d826c <_Z11readSensorsv+0x66c>)
   d7fde:	f004 fcc8 	bl	dc972 <_ZN5Print5printEPKc>
    debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d7fe2:	f004 fe89 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d7fe6:	6833      	ldr	r3, [r6, #0]
   d7fe8:	49a1      	ldr	r1, [pc, #644]	; (d8270 <_Z11readSensorsv+0x670>)
   d7fea:	462a      	mov	r2, r5
   d7fec:	4607      	mov	r7, r0
   d7fee:	a81b      	add	r0, sp, #108	; 0x6c
   d7ff0:	f004 fc00 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d7ff4:	a91b      	add	r1, sp, #108	; 0x6c
   d7ff6:	a81f      	add	r0, sp, #124	; 0x7c
   d7ff8:	f005 f942 	bl	dd280 <_ZN6StringC1ERKS_>
   d7ffc:	499d      	ldr	r1, [pc, #628]	; (d8274 <_Z11readSensorsv+0x674>)
   d7ffe:	a81f      	add	r0, sp, #124	; 0x7c
   d8000:	f005 f9e1 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8004:	6801      	ldr	r1, [r0, #0]
   d8006:	4638      	mov	r0, r7
   d8008:	f004 fcb3 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d800c:	a81f      	add	r0, sp, #124	; 0x7c
   d800e:	f005 f8b1 	bl	dd174 <_ZN6StringD1Ev>
   d8012:	a81b      	add	r0, sp, #108	; 0x6c
   d8014:	f005 f8ae 	bl	dd174 <_ZN6StringD1Ev>
    if (clockTime<946684800||clockTime>4102444799)
   d8018:	4b97      	ldr	r3, [pc, #604]	; (d8278 <_Z11readSensorsv+0x678>)
   d801a:	429d      	cmp	r5, r3
   d801c:	dc32      	bgt.n	d8084 <_Z11readSensorsv+0x484>
    {
      // 2019-01-01T00:00:00+00:00 in ISO 8601
      // Actual time is not important for rtc reset but needs to be a positive unix time
      rtc.setUnixTime(1262304000);
   d801e:	4997      	ldr	r1, [pc, #604]	; (d827c <_Z11readSensorsv+0x67c>)
   d8020:	488f      	ldr	r0, [pc, #572]	; (d8260 <_Z11readSensorsv+0x660>)
   d8022:	f002 fbbc 	bl	da79e <_ZN8MCP7941x11setUnixTimeEm>
      long int clockTime = rtc.rtcNow();
   d8026:	488e      	ldr	r0, [pc, #568]	; (d8260 <_Z11readSensorsv+0x660>)
   d8028:	f002 fc02 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d802c:	4605      	mov	r5, r0
      debug("After\n");
   d802e:	f004 fe63 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8032:	4993      	ldr	r1, [pc, #588]	; (d8280 <_Z11readSensorsv+0x680>)
   d8034:	f004 fc9d 	bl	dc972 <_ZN5Print5printEPKc>
      debug(clockTime);
   d8038:	f004 fe5e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d803c:	220a      	movs	r2, #10
   d803e:	4629      	mov	r1, r5
   d8040:	f7fe f8ca 	bl	d61d8 <_ZN5Print5printIiLi0EEEjT_i>
      debug(": \n");
   d8044:	f004 fe58 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8048:	4988      	ldr	r1, [pc, #544]	; (d826c <_Z11readSensorsv+0x66c>)
   d804a:	f004 fc92 	bl	dc972 <_ZN5Print5printEPKc>
      debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d804e:	f004 fe53 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8052:	6833      	ldr	r3, [r6, #0]
   d8054:	4986      	ldr	r1, [pc, #536]	; (d8270 <_Z11readSensorsv+0x670>)
   d8056:	462a      	mov	r2, r5
   d8058:	4607      	mov	r7, r0
   d805a:	a81b      	add	r0, sp, #108	; 0x6c
   d805c:	f004 fbca 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8060:	a91b      	add	r1, sp, #108	; 0x6c
   d8062:	a81f      	add	r0, sp, #124	; 0x7c
   d8064:	f005 f90c 	bl	dd280 <_ZN6StringC1ERKS_>
   d8068:	4982      	ldr	r1, [pc, #520]	; (d8274 <_Z11readSensorsv+0x674>)
   d806a:	a81f      	add	r0, sp, #124	; 0x7c
   d806c:	f005 f9ab 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8070:	6801      	ldr	r1, [r0, #0]
   d8072:	4638      	mov	r0, r7
   d8074:	f004 fc7d 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8078:	a81f      	add	r0, sp, #124	; 0x7c
   d807a:	f005 f87b 	bl	dd174 <_ZN6StringD1Ev>
   d807e:	a81b      	add	r0, sp, #108	; 0x6c
   d8080:	f005 f878 	bl	dd174 <_ZN6StringD1Ev>
    }
    timeSynced=false;
   d8084:	4b7f      	ldr	r3, [pc, #508]	; (d8284 <_Z11readSensorsv+0x684>)
   d8086:	2500      	movs	r5, #0
   d8088:	701d      	strb	r5, [r3, #0]
class SPS30
{
  public:
	SPS30(void);

	boolean begin(TwoWire &wirePort = Wire); //By default use Wire port
   d808a:	f005 fa51 	bl	dd530 <_Z19__fetch_global_Wirev>
    Sensor.begin();
   d808e:	4601      	mov	r1, r0
   d8090:	487d      	ldr	r0, [pc, #500]	; (d8288 <_Z11readSensorsv+0x688>)
   d8092:	f001 fe53 	bl	d9d3c <_ZN5SPS305beginER7TwoWire>

    // Load state
    loadState();
   d8096:	f7fd fc6d 	bl	d5974 <_Z9loadStatev>
 
   /////////////
  // Setup ADXL345
    debug("ADXL345 Setup");
   d809a:	f004 fe2d 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d809e:	497b      	ldr	r1, [pc, #492]	; (d828c <_Z11readSensorsv+0x68c>)
   d80a0:	f004 fc67 	bl	dc972 <_ZN5Print5printEPKc>
    debug("\n");
   d80a4:	f004 fe28 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d80a8:	4972      	ldr	r1, [pc, #456]	; (d8274 <_Z11readSensorsv+0x674>)
   d80aa:	f004 fc62 	bl	dc972 <_ZN5Print5printEPKc>
    // // *Temp Debug* Set the pin mode to output, so you may control it.
    // pinMode(ledPin, OUTPUT);
    // Power on the ADXL345
    adxl.powerOn();
   d80ae:	4878      	ldr	r0, [pc, #480]	; (d8290 <_Z11readSensorsv+0x690>)
   d80b0:	f001 ffc4 	bl	da03c <_ZN7ADXL3457powerOnEv>

  // Configure Chip
    adxl.setRangeSetting(4);            // Give the range settings
   d80b4:	2104      	movs	r1, #4
   d80b6:	4876      	ldr	r0, [pc, #472]	; (d8290 <_Z11readSensorsv+0x690>)
   d80b8:	f002 f81a 	bl	da0f0 <_ZN7ADXL34515setRangeSettingEi>
                                        // Accepted values are 2g, 4g, 8g or 16g
                                        // Higher Values = Wider Measurement Range
                                        // Lower Values = Greater Sensitivity

    // No TAP or Freefall detection only Activity
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d80bc:	2301      	movs	r3, #1
   d80be:	461a      	mov	r2, r3
   d80c0:	4619      	mov	r1, r3
   d80c2:	4873      	ldr	r0, [pc, #460]	; (d8290 <_Z11readSensorsv+0x690>)
   d80c4:	f002 f86c 	bl	da1a0 <_ZN7ADXL34514setActivityXYZEbbb>
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
   d80c8:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d80cc:	4870      	ldr	r0, [pc, #448]	; (d8290 <_Z11readSensorsv+0x690>)
   d80ce:	f001 ffcf 	bl	da070 <_ZN7ADXL34520setActivityThresholdEi>
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d80d2:	2301      	movs	r3, #1
   d80d4:	461a      	mov	r2, r3
   d80d6:	4619      	mov	r1, r3
   d80d8:	486d      	ldr	r0, [pc, #436]	; (d8290 <_Z11readSensorsv+0x690>)
   d80da:	f002 f880 	bl	da1de <_ZN7ADXL34516setInactivityXYZEbbb>
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d80de:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d80e2:	486b      	ldr	r0, [pc, #428]	; (d8290 <_Z11readSensorsv+0x690>)
   d80e4:	f001 ffca 	bl	da07c <_ZN7ADXL34522setInactivityThresholdEi>
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d80e8:	2601      	movs	r6, #1
    adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255) 36,72,100 or 144
  
    adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
    adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
    adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d80ea:	210a      	movs	r1, #10
   d80ec:	4868      	ldr	r0, [pc, #416]	; (d8290 <_Z11readSensorsv+0x690>)
   d80ee:	f001 ffcb 	bl	da088 <_ZN7ADXL34517setTimeInactivityEi>

      // Setting all interupts to take place on INT1 pin
    adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d80f2:	462b      	mov	r3, r5
   d80f4:	462a      	mov	r2, r5
   d80f6:	4629      	mov	r1, r5
   d80f8:	9601      	str	r6, [sp, #4]
   d80fa:	9600      	str	r6, [sp, #0]
   d80fc:	4864      	ldr	r0, [pc, #400]	; (d8290 <_Z11readSensorsv+0x690>)
   d80fe:	f002 f883 	bl	da208 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
   d8102:	4631      	mov	r1, r6
   d8104:	4862      	ldr	r0, [pc, #392]	; (d8290 <_Z11readSensorsv+0x690>)
   d8106:	f002 f8ce 	bl	da2a6 <_ZN7ADXL34513InactivityINTEb>
    adxl.ActivityINT(1);
   d810a:	4631      	mov	r1, r6

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d810c:	4e61      	ldr	r6, [pc, #388]	; (d8294 <_Z11readSensorsv+0x694>)
                                                          // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
        
  // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
  // These are both set on to start and then toggled
    adxl.InactivityINT(1);
    adxl.ActivityINT(1);
   d810e:	4860      	ldr	r0, [pc, #384]	; (d8290 <_Z11readSensorsv+0x690>)
   d8110:	f002 f8c3 	bl	da29a <_ZN7ADXL34511ActivityINTEb>

    // Need to set int1 pin as an input before calling atttachInterrupt
    pinMode(interruptPin,INPUT);
   d8114:	4629      	mov	r1, r5
   d8116:	8830      	ldrh	r0, [r6, #0]
   d8118:	f005 fa66 	bl	dd5e8 <pinMode>
    attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d811c:	462a      	mov	r2, r5
   d811e:	f04f 33ff 	mov.w	r3, #4294967295
   d8122:	495d      	ldr	r1, [pc, #372]	; (d8298 <_Z11readSensorsv+0x698>)
   d8124:	8830      	ldrh	r0, [r6, #0]
   d8126:	9500      	str	r5, [sp, #0]
   d8128:	f004 fa3c 	bl	dc5a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
 
    delay(300);  
   d812c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d8130:	f004 fbf6 	bl	dc920 <delay>
   d8134:	f002 fd3e 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
   d8138:	4605      	mov	r5, r0
   d813a:	f002 fd3b 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>

    // SPS30 checks
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
   d813e:	1b40      	subs	r0, r0, r5
   d8140:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d8144:	f0c0 856c 	bcc.w	d8c20 <_Z11readSensorsv+0x1020>
   d8148:	f000 bd93 	b.w	d8c72 <_Z11readSensorsv+0x1072>
        debug("Unable to read SPS30 - trying again\n");
        delay(1000);
      }
      else
      {
        debug("Read SPS30\n");
   d814c:	f004 fdd4 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8150:	4952      	ldr	r1, [pc, #328]	; (d829c <_Z11readSensorsv+0x69c>)
   d8152:	f004 fc0e 	bl	dc972 <_ZN5Print5printEPKc>
   d8156:	f002 fd2d 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d815a:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d815e:	4605      	mov	r5, r0
   d8160:	4849      	ldr	r0, [pc, #292]	; (d8288 <_Z11readSensorsv+0x688>)
   d8162:	f001 fc58 	bl	d9a16 <_ZN5SPS3013dataAvailableEv>
   d8166:	2800      	cmp	r0, #0
   d8168:	f000 856e 	beq.w	d8c48 <_Z11readSensorsv+0x1048>
    {
      delay(100);
      checkAccel();
    }

    readingCount=0;
   d816c:	4a4c      	ldr	r2, [pc, #304]	; (d82a0 <_Z11readSensorsv+0x6a0>)
   d816e:	2300      	movs	r3, #0
   d8170:	6013      	str	r3, [r2, #0]
    state.bInSleepMode=false;
   d8172:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
  }
  StateString = "RDY";
   d8176:	4937      	ldr	r1, [pc, #220]	; (d8254 <_Z11readSensorsv+0x654>)
   d8178:	4837      	ldr	r0, [pc, #220]	; (d8258 <_Z11readSensorsv+0x658>)
   d817a:	f005 f894 	bl	dd2a6 <_ZN6StringaSEPKc>
  connectWithoutWaiting();
   d817e:	f7ff fc81 	bl	d7a84 <_Z21connectWithoutWaitingv>
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
   d8182:	f004 fb69 	bl	dc858 <_ZN9TimeClass7isValidEv>
   d8186:	b328      	cbz	r0, d81d4 <_Z11readSensorsv+0x5d4>
   d8188:	4b3e      	ldr	r3, [pc, #248]	; (d8284 <_Z11readSensorsv+0x684>)
   d818a:	781a      	ldrb	r2, [r3, #0]
   d818c:	461e      	mov	r6, r3
   d818e:	bb0a      	cbnz	r2, d81d4 <_Z11readSensorsv+0x5d4>
  {
    rtc.setUnixTime(Time.now());
   d8190:	f004 fb83 	bl	dc89a <_ZN9TimeClass3nowEv>
   d8194:	4601      	mov	r1, r0
   d8196:	4832      	ldr	r0, [pc, #200]	; (d8260 <_Z11readSensorsv+0x660>)
   d8198:	f002 fb01 	bl	da79e <_ZN8MCP7941x11setUnixTimeEm>
    if (abs(Time.now()-rtc.rtcNow())<10)
   d819c:	f004 fb7d 	bl	dc89a <_ZN9TimeClass3nowEv>
   d81a0:	4605      	mov	r5, r0
   d81a2:	482f      	ldr	r0, [pc, #188]	; (d8260 <_Z11readSensorsv+0x660>)
   d81a4:	f002 fb44 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d81a8:	4285      	cmp	r5, r0
   d81aa:	f000 855a 	beq.w	d8c62 <_Z11readSensorsv+0x1062>
   d81ae:	f004 fb74 	bl	dc89a <_ZN9TimeClass3nowEv>
   d81b2:	4605      	mov	r5, r0
   d81b4:	482a      	ldr	r0, [pc, #168]	; (d8260 <_Z11readSensorsv+0x660>)
   d81b6:	f002 fb3b 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d81ba:	1a28      	subs	r0, r5, r0
   d81bc:	2809      	cmp	r0, #9
   d81be:	bf8c      	ite	hi
   d81c0:	2000      	movhi	r0, #0
   d81c2:	2001      	movls	r0, #1
   d81c4:	b130      	cbz	r0, d81d4 <_Z11readSensorsv+0x5d4>
    {
      timeSynced=true;
   d81c6:	2301      	movs	r3, #1
   d81c8:	7033      	strb	r3, [r6, #0]
      debug("Time is synced to the cloud\n"); 
   d81ca:	f004 fd95 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d81ce:	4935      	ldr	r1, [pc, #212]	; (d82a4 <_Z11readSensorsv+0x6a4>)
   d81d0:	f004 fbcf 	bl	dc972 <_ZN5Print5printEPKc>
      debug(TimeMsg); + "\n"*/

    }
  }
  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d81d4:	4b34      	ldr	r3, [pc, #208]	; (d82a8 <_Z11readSensorsv+0x6a8>)
   d81d6:	781b      	ldrb	r3, [r3, #0]
   d81d8:	b90b      	cbnz	r3, d81de <_Z11readSensorsv+0x5de>
  {
    publishGMTOffsetRequest();
   d81da:	f7fd fe7f 	bl	d5edc <_Z23publishGMTOffsetRequestv>
  }
  checkAccel();
   d81de:	f7ff faf3 	bl	d77c8 <_Z10checkAccelv>
  if (Sensor.dataAvailable()) { 
   d81e2:	4829      	ldr	r0, [pc, #164]	; (d8288 <_Z11readSensorsv+0x688>)
   d81e4:	4d28      	ldr	r5, [pc, #160]	; (d8288 <_Z11readSensorsv+0x688>)
   d81e6:	f001 fc16 	bl	d9a16 <_ZN5SPS3013dataAvailableEv>
   d81ea:	2800      	cmp	r0, #0
   d81ec:	f000 84c0 	beq.w	d8b70 <_Z11readSensorsv+0xf70>
    Sensor.getMass(mass_concen);
   d81f0:	492e      	ldr	r1, [pc, #184]	; (d82ac <_Z11readSensorsv+0x6ac>)
    Sensor.getNum(num_concen);

    debug("--Mass Concentration--\n");
    for(i=0; i<4;i++) {
   d81f2:	4e2f      	ldr	r6, [pc, #188]	; (d82b0 <_Z11readSensorsv+0x6b0>)
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d81f4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d82c0 <_Z11readSensorsv+0x6c0>
   d81f8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d82ac <_Z11readSensorsv+0x6ac>
  {
    publishGMTOffsetRequest();
  }
  checkAccel();
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
   d81fc:	4628      	mov	r0, r5
   d81fe:	f001 fd23 	bl	d9c48 <_ZN5SPS307getMassEPf>
    Sensor.getNum(num_concen);
   d8202:	492c      	ldr	r1, [pc, #176]	; (d82b4 <_Z11readSensorsv+0x6b4>)
   d8204:	4628      	mov	r0, r5
   d8206:	f001 fd33 	bl	d9c70 <_ZN5SPS306getNumEPf>

    debug("--Mass Concentration--\n");
   d820a:	f004 fd75 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d820e:	492a      	ldr	r1, [pc, #168]	; (d82b8 <_Z11readSensorsv+0x6b8>)
   d8210:	f004 fbaf 	bl	dc972 <_ZN5Print5printEPKc>
    for(i=0; i<4;i++) {
   d8214:	2300      	movs	r3, #0
   d8216:	6033      	str	r3, [r6, #0]
   d8218:	4637      	mov	r7, r6
   d821a:	6833      	ldr	r3, [r6, #0]
   d821c:	f8df 8090 	ldr.w	r8, [pc, #144]	; d82b0 <_Z11readSensorsv+0x6b0>
   d8220:	2b03      	cmp	r3, #3
   d8222:	dc4f      	bgt.n	d82c4 <_Z11readSensorsv+0x6c4>
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
   d8224:	f004 fd68 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8228:	683b      	ldr	r3, [r7, #0]
   d822a:	f103 0b01 	add.w	fp, r3, #1
   d822e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   d8232:	4680      	mov	r8, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d8234:	6818      	ldr	r0, [r3, #0]
   d8236:	f00b f81f 	bl	e3278 <__aeabi_f2d>
   d823a:	e9cd 0100 	strd	r0, r1, [sp]
   d823e:	4a1f      	ldr	r2, [pc, #124]	; (d82bc <_Z11readSensorsv+0x6bc>)
   d8240:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
   d8244:	2100      	movs	r1, #0
   d8246:	4640      	mov	r0, r8
   d8248:	f004 fc9d 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>
  if (Sensor.dataAvailable()) { 
    Sensor.getMass(mass_concen);
    Sensor.getNum(num_concen);

    debug("--Mass Concentration--\n");
    for(i=0; i<4;i++) {
   d824c:	683b      	ldr	r3, [r7, #0]
   d824e:	3301      	adds	r3, #1
   d8250:	603b      	str	r3, [r7, #0]
   d8252:	e7e2      	b.n	d821a <_Z11readSensorsv+0x61a>
   d8254:	000e7ed4 	.word	0x000e7ed4
   d8258:	2003d8cc 	.word	0x2003d8cc
   d825c:	000e7ed8 	.word	0x000e7ed8
   d8260:	2003e028 	.word	0x2003e028
   d8264:	2003d6b8 	.word	0x2003d6b8
   d8268:	000e7ee0 	.word	0x000e7ee0
   d826c:	000e7dab 	.word	0x000e7dab
   d8270:	2003e5c8 	.word	0x2003e5c8
   d8274:	000e7962 	.word	0x000e7962
   d8278:	386d437f 	.word	0x386d437f
   d827c:	4b3d3b00 	.word	0x4b3d3b00
   d8280:	000e7ee8 	.word	0x000e7ee8
   d8284:	2003dfa5 	.word	0x2003dfa5
   d8288:	2003e0b0 	.word	0x2003e0b0
   d828c:	000e7eef 	.word	0x000e7eef
   d8290:	2003db40 	.word	0x2003db40
   d8294:	2003d68c 	.word	0x2003d68c
   d8298:	000d5659 	.word	0x000d5659
   d829c:	000e7f22 	.word	0x000e7f22
   d82a0:	2003d814 	.word	0x2003d814
   d82a4:	000e7f2e 	.word	0x000e7f2e
   d82a8:	2003e060 	.word	0x2003e060
   d82ac:	2003e014 	.word	0x2003e014
   d82b0:	2003dfb8 	.word	0x2003dfb8
   d82b4:	2003e358 	.word	0x2003e358
   d82b8:	000e7f4b 	.word	0x000e7f4b
   d82bc:	000e7f63 	.word	0x000e7f63
   d82c0:	2003d664 	.word	0x2003d664
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    debug("--Number Concentration--\n");
   d82c4:	f004 fd18 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d82c8:	4912      	ldr	r1, [pc, #72]	; (d8314 <_Z11readSensorsv+0x714>)
    for(i=0; i<5;i++) {
        debugf("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d82ca:	f8df 9050 	ldr.w	r9, [pc, #80]	; d831c <_Z11readSensorsv+0x71c>
    debug("--Mass Concentration--\n");
    for(i=0; i<4;i++) {
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    debug("--Number Concentration--\n");
   d82ce:	f004 fb50 	bl	dc972 <_ZN5Print5printEPKc>
    for(i=0; i<5;i++) {
   d82d2:	2300      	movs	r3, #0
   d82d4:	f8c8 3000 	str.w	r3, [r8]
   d82d8:	4647      	mov	r7, r8
        debugf("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d82da:	f8df 8044 	ldr.w	r8, [pc, #68]	; d8320 <_Z11readSensorsv+0x720>
    for(i=0; i<4;i++) {
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    debug("--Number Concentration--\n");
    for(i=0; i<5;i++) {
   d82de:	6833      	ldr	r3, [r6, #0]
   d82e0:	2b04      	cmp	r3, #4
   d82e2:	dc1f      	bgt.n	d8324 <_Z11readSensorsv+0x724>
        debugf("%s: %0.2f\r\n", pm[i],num_concen[i]);
   d82e4:	f004 fd08 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d82e8:	f8d7 a000 	ldr.w	sl, [r7]
   d82ec:	eb09 038a 	add.w	r3, r9, sl, lsl #2
   d82f0:	4683      	mov	fp, r0
   d82f2:	6818      	ldr	r0, [r3, #0]
   d82f4:	f00a ffc0 	bl	e3278 <__aeabi_f2d>
   d82f8:	e9cd 0100 	strd	r0, r1, [sp]
   d82fc:	4a06      	ldr	r2, [pc, #24]	; (d8318 <_Z11readSensorsv+0x718>)
   d82fe:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   d8302:	2100      	movs	r1, #0
   d8304:	4658      	mov	r0, fp
   d8306:	f004 fc3e 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>
    for(i=0; i<4;i++) {
        debugf("%s: %0.2f\r\n", pm[i+1],mass_concen[i]);
    }
    
    debug("--Number Concentration--\n");
    for(i=0; i<5;i++) {
   d830a:	683b      	ldr	r3, [r7, #0]
   d830c:	3301      	adds	r3, #1
   d830e:	603b      	str	r3, [r7, #0]
   d8310:	e7e5      	b.n	d82de <_Z11readSensorsv+0x6de>
   d8312:	bf00      	nop
   d8314:	000e7f6f 	.word	0x000e7f6f
   d8318:	000e7f63 	.word	0x000e7f63
   d831c:	2003e358 	.word	0x2003e358
   d8320:	2003d664 	.word	0x2003d664
        debugf("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d8324:	6868      	ldr	r0, [r5, #4]
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d8326:	4ec2      	ldr	r6, [pc, #776]	; (d8630 <_Z11readSensorsv+0xa30>)
    debug("--Number Concentration--\n");
    for(i=0; i<5;i++) {
        debugf("%s: %0.2f\r\n", pm[i],num_concen[i]);
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
   d8328:	f00a ffa6 	bl	e3278 <__aeabi_f2d>
   d832c:	4602      	mov	r2, r0
   d832e:	460b      	mov	r3, r1
   d8330:	a81f      	add	r0, sp, #124	; 0x7c
   d8332:	49c0      	ldr	r1, [pc, #768]	; (d8634 <_Z11readSensorsv+0xa34>)
   d8334:	f005 f8ba 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8338:	a91f      	add	r1, sp, #124	; 0x7c
   d833a:	48bf      	ldr	r0, [pc, #764]	; (d8638 <_Z11readSensorsv+0xa38>)
   d833c:	f004 ffab 	bl	dd296 <_ZN6StringaSEOS_>
   d8340:	a81f      	add	r0, sp, #124	; 0x7c
   d8342:	f004 ff17 	bl	dd174 <_ZN6StringD1Ev>
    field2 = String::format("%0.1f", Sensor.massPM25);
   d8346:	68a8      	ldr	r0, [r5, #8]
   d8348:	f00a ff96 	bl	e3278 <__aeabi_f2d>
   d834c:	4602      	mov	r2, r0
   d834e:	460b      	mov	r3, r1
   d8350:	a81f      	add	r0, sp, #124	; 0x7c
   d8352:	49b8      	ldr	r1, [pc, #736]	; (d8634 <_Z11readSensorsv+0xa34>)
   d8354:	f005 f8aa 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8358:	a91f      	add	r1, sp, #124	; 0x7c
   d835a:	48b8      	ldr	r0, [pc, #736]	; (d863c <_Z11readSensorsv+0xa3c>)
   d835c:	f004 ff9b 	bl	dd296 <_ZN6StringaSEOS_>
   d8360:	a81f      	add	r0, sp, #124	; 0x7c
   d8362:	f004 ff07 	bl	dd174 <_ZN6StringD1Ev>
    field3 = String::format("%0.1f", Sensor.massPM4);
   d8366:	68e8      	ldr	r0, [r5, #12]
   d8368:	f00a ff86 	bl	e3278 <__aeabi_f2d>
   d836c:	4602      	mov	r2, r0
   d836e:	460b      	mov	r3, r1
   d8370:	a81f      	add	r0, sp, #124	; 0x7c
   d8372:	49b0      	ldr	r1, [pc, #704]	; (d8634 <_Z11readSensorsv+0xa34>)
   d8374:	f005 f89a 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8378:	a91f      	add	r1, sp, #124	; 0x7c
   d837a:	48b1      	ldr	r0, [pc, #708]	; (d8640 <_Z11readSensorsv+0xa40>)
   d837c:	f004 ff8b 	bl	dd296 <_ZN6StringaSEOS_>
   d8380:	a81f      	add	r0, sp, #124	; 0x7c
   d8382:	f004 fef7 	bl	dd174 <_ZN6StringD1Ev>
    field4 = String::format("%0.1f", Sensor.massPM10);
   d8386:	6928      	ldr	r0, [r5, #16]

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d8388:	4dae      	ldr	r5, [pc, #696]	; (d8644 <_Z11readSensorsv+0xa44>)
    }
    // Sensor.massPM1, Sensor.massPM25, Sensor.massPM4, Sensor.massPM10     
    field1 = String::format("%0.1f", Sensor.massPM1);
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);
   d838a:	f00a ff75 	bl	e3278 <__aeabi_f2d>
   d838e:	460b      	mov	r3, r1
   d8390:	4602      	mov	r2, r0
   d8392:	49a8      	ldr	r1, [pc, #672]	; (d8634 <_Z11readSensorsv+0xa34>)
   d8394:	a81f      	add	r0, sp, #124	; 0x7c
   d8396:	f005 f889 	bl	dd4ac <_ZN6String6formatEPKcz>
   d839a:	a91f      	add	r1, sp, #124	; 0x7c
   d839c:	48aa      	ldr	r0, [pc, #680]	; (d8648 <_Z11readSensorsv+0xa48>)
   d839e:	f004 ff7a 	bl	dd296 <_ZN6StringaSEOS_>
   d83a2:	a81f      	add	r0, sp, #124	; 0x7c
   d83a4:	f004 fee6 	bl	dd174 <_ZN6StringD1Ev>

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d83a8:	4aa8      	ldr	r2, [pc, #672]	; (d864c <_Z11readSensorsv+0xa4c>)
   d83aa:	48a9      	ldr	r0, [pc, #676]	; (d8650 <_Z11readSensorsv+0xa50>)
   d83ac:	2101      	movs	r1, #1
   d83ae:	f7fc ffd3 	bl	d5358 <_ZN3ULP7getTempEiPc>
   d83b2:	ee07 0a90 	vmov	s15, r0
   d83b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d83ba:	4aa6      	ldr	r2, [pc, #664]	; (d8654 <_Z11readSensorsv+0xa54>)
   d83bc:	48a4      	ldr	r0, [pc, #656]	; (d8650 <_Z11readSensorsv+0xa50>)
    field2 = String::format("%0.1f", Sensor.massPM25);
    field3 = String::format("%0.1f", Sensor.massPM4);
    field4 = String::format("%0.1f", Sensor.massPM10);

    //////////
    temp1 = sensor1.getTemp(1,"F");  // Use .getTemp(n, "F") to get temp in Fahrenheit, with n as int number of seconds for averaging and "F" or "C" for temp units
   d83be:	edc5 7a00 	vstr	s15, [r5]
    conc1 = sensor1.getConc(1,sensor1.getTemp(1));
   d83c2:	2101      	movs	r1, #1
   d83c4:	f7fc ffc8 	bl	d5358 <_ZN3ULP7getTempEiPc>
   d83c8:	ee07 0a90 	vmov	s15, r0
   d83cc:	2101      	movs	r1, #1
   d83ce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d83d2:	489f      	ldr	r0, [pc, #636]	; (d8650 <_Z11readSensorsv+0xa50>)
   d83d4:	f7fd f8b4 	bl	d5540 <_ZN3ULP7getConcEif>
   d83d8:	ed86 0a00 	vstr	s0, [r6]
    
    debugf("temp1: %f\n", temp1);
   d83dc:	f004 fc8c 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d83e0:	ed95 0a00 	vldr	s0, [r5]
   d83e4:	499c      	ldr	r1, [pc, #624]	; (d8658 <_Z11readSensorsv+0xa58>)
   d83e6:	f7fd fdde 	bl	d5fa6 <_ZN5Print6printfIIfEEEjPKcDpT_>
    //Use .getVgas(int n) where n is the number of seconds to average
    //Use ._Vref to read the reference voltage (voltage offset)
    debugf("Vgas: %f\n", sensor1.getVgas(1));
   d83ea:	f004 fc85 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d83ee:	2101      	movs	r1, #1
   d83f0:	4607      	mov	r7, r0
   d83f2:	4897      	ldr	r0, [pc, #604]	; (d8650 <_Z11readSensorsv+0xa50>)
   d83f4:	f7fd f864 	bl	d54c0 <_ZN3ULP7getVgasEi>
   d83f8:	4998      	ldr	r1, [pc, #608]	; (d865c <_Z11readSensorsv+0xa5c>)
   d83fa:	4638      	mov	r0, r7
   d83fc:	f7fd fdd3 	bl	d5fa6 <_ZN5Print6printfIIfEEEjPKcDpT_>
    //Use .getConc(1, temp1) where temp1 is in deg C for temperature corrected span
    debugf("Conc: %f\n", conc1);
   d8400:	f004 fc7a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8404:	ed96 0a00 	vldr	s0, [r6]
   d8408:	4995      	ldr	r1, [pc, #596]	; (d8660 <_Z11readSensorsv+0xa60>)
   d840a:	f7fd fdcc 	bl	d5fa6 <_ZN5Print6printfIIfEEEjPKcDpT_>

    field5 = String::format("%0.1f", conc1);
   d840e:	6830      	ldr	r0, [r6, #0]
   d8410:	4e94      	ldr	r6, [pc, #592]	; (d8664 <_Z11readSensorsv+0xa64>)
   d8412:	f00a ff31 	bl	e3278 <__aeabi_f2d>
   d8416:	4602      	mov	r2, r0
   d8418:	460b      	mov	r3, r1
   d841a:	a81f      	add	r0, sp, #124	; 0x7c
   d841c:	4985      	ldr	r1, [pc, #532]	; (d8634 <_Z11readSensorsv+0xa34>)
   d841e:	f005 f845 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8422:	a91f      	add	r1, sp, #124	; 0x7c
   d8424:	4890      	ldr	r0, [pc, #576]	; (d8668 <_Z11readSensorsv+0xa68>)
   d8426:	f004 ff36 	bl	dd296 <_ZN6StringaSEOS_>
   d842a:	a81f      	add	r0, sp, #124	; 0x7c
   d842c:	f004 fea2 	bl	dd174 <_ZN6StringD1Ev>
    field6 = String::format("%0.1f", temp1);
   d8430:	6828      	ldr	r0, [r5, #0]
   d8432:	f00a ff21 	bl	e3278 <__aeabi_f2d>
   d8436:	4602      	mov	r2, r0
   d8438:	460b      	mov	r3, r1
   d843a:	a81f      	add	r0, sp, #124	; 0x7c
   d843c:	497d      	ldr	r1, [pc, #500]	; (d8634 <_Z11readSensorsv+0xa34>)
   d843e:	f005 f835 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8442:	a91f      	add	r1, sp, #124	; 0x7c
   d8444:	4889      	ldr	r0, [pc, #548]	; (d866c <_Z11readSensorsv+0xa6c>)
   d8446:	f004 ff26 	bl	dd296 <_ZN6StringaSEOS_>
   d844a:	a81f      	add	r0, sp, #124	; 0x7c
   d844c:	f004 fe92 	bl	dd174 <_ZN6StringD1Ev>
    CellularSignal sig = Cellular.RSSI();
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
   d8450:	2021      	movs	r0, #33	; 0x21
   d8452:	f005 f906 	bl	dd662 <analogRead>
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d8456:	f00a fefd 	bl	e3254 <__aeabi_i2d>
   d845a:	a36f      	add	r3, pc, #444	; (adr r3, d8618 <_Z11readSensorsv+0xa18>)
   d845c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8460:	f00a ff5e 	bl	e3320 <__aeabi_dmul>
   d8464:	f00b fa54 	bl	e3910 <__aeabi_d2f>
   d8468:	f00a ff06 	bl	e3278 <__aeabi_f2d>
   d846c:	a36c      	add	r3, pc, #432	; (adr r3, d8620 <_Z11readSensorsv+0xa20>)
   d846e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8472:	f00a ff55 	bl	e3320 <__aeabi_dmul>
   d8476:	ec41 0b10 	vmov	d0, r0, r1
   d847a:	f006 f83d 	bl	de4f8 <exp>
   d847e:	a36a      	add	r3, pc, #424	; (adr r3, d8628 <_Z11readSensorsv+0xa28>)
   d8480:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8484:	ec51 0b10 	vmov	r0, r1, d0
   d8488:	f00a ff4a 	bl	e3320 <__aeabi_dmul>
   d848c:	f00b fa40 	bl	e3910 <__aeabi_d2f>
    if (batCharge>100) batCharge = 100;
   d8490:	eddf 7a77 	vldr	s15, [pc, #476]	; d8670 <_Z11readSensorsv+0xa70>
    field8 = String::format("%d", 100*sig.qual/49);
    #endif

    #if Wiring_WiFi
    float voltage = analogRead(BATT) * 0.0011224;
    float batCharge = exp(5.0601*voltage)*0.0000001;
   d8494:	ee08 0a10 	vmov	s16, r0
    if (batCharge>100) batCharge = 100;
   d8498:	eeb4 8a67 	vcmp.f32	s16, s15
   d849c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84a0:	bfc8      	it	gt
   d84a2:	eeb0 8a67 	vmovgt.f32	s16, s15
    field7 = String::format("%0.0f", batCharge);
   d84a6:	ee18 0a10 	vmov	r0, s16
   d84aa:	f00a fee5 	bl	e3278 <__aeabi_f2d>
   d84ae:	460b      	mov	r3, r1
   d84b0:	4602      	mov	r2, r0
   d84b2:	4970      	ldr	r1, [pc, #448]	; (d8674 <_Z11readSensorsv+0xa74>)
   d84b4:	a81f      	add	r0, sp, #124	; 0x7c
   d84b6:	f004 fff9 	bl	dd4ac <_ZN6String6formatEPKcz>
   d84ba:	a91f      	add	r1, sp, #124	; 0x7c
   d84bc:	486e      	ldr	r0, [pc, #440]	; (d8678 <_Z11readSensorsv+0xa78>)
   d84be:	f004 feea 	bl	dd296 <_ZN6StringaSEOS_>
   d84c2:	a81f      	add	r0, sp, #124	; 0x7c
   d84c4:	f004 fe56 	bl	dd174 <_ZN6StringD1Ev>
    WiFiSignal sig = WiFi.RSSI();
   d84c8:	496c      	ldr	r1, [pc, #432]	; (d867c <_Z11readSensorsv+0xa7c>)
   d84ca:	a81f      	add	r0, sp, #124	; 0x7c
   d84cc:	f003 fa9c 	bl	dba08 <_ZN5spark9WiFiClass4RSSIEv>
    field8 = String::format("%d", (int)sig.getQuality());
   d84d0:	a81f      	add	r0, sp, #124	; 0x7c
   d84d2:	f003 fa45 	bl	db960 <_ZNK10WiFiSignal10getQualityEv>
   d84d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d84da:	4969      	ldr	r1, [pc, #420]	; (d8680 <_Z11readSensorsv+0xa80>)
   d84dc:	ee17 2a90 	vmov	r2, s15
   d84e0:	a81b      	add	r0, sp, #108	; 0x6c
   d84e2:	f004 ffe3 	bl	dd4ac <_ZN6String6formatEPKcz>
   d84e6:	a91b      	add	r1, sp, #108	; 0x6c
   d84e8:	4866      	ldr	r0, [pc, #408]	; (d8684 <_Z11readSensorsv+0xa84>)
   d84ea:	f004 fed4 	bl	dd296 <_ZN6StringaSEOS_>
   d84ee:	a81b      	add	r0, sp, #108	; 0x6c
   d84f0:	f004 fe40 	bl	dd174 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d84f4:	4950      	ldr	r1, [pc, #320]	; (d8638 <_Z11readSensorsv+0xa38>)
   d84f6:	a81b      	add	r0, sp, #108	; 0x6c
   d84f8:	f004 fec2 	bl	dd280 <_ZN6StringC1ERKS_>
    #endif

    datastring = field1+":"+field2+":"+field3+":"+field4+":"+field5+":"+field6+":"+field7+":"+field8;
   d84fc:	4962      	ldr	r1, [pc, #392]	; (d8688 <_Z11readSensorsv+0xa88>)
   d84fe:	a81b      	add	r0, sp, #108	; 0x6c
   d8500:	f004 ff61 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8504:	494d      	ldr	r1, [pc, #308]	; (d863c <_Z11readSensorsv+0xa3c>)
   d8506:	f004 ff52 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d850a:	495f      	ldr	r1, [pc, #380]	; (d8688 <_Z11readSensorsv+0xa88>)
   d850c:	f004 ff5b 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8510:	494b      	ldr	r1, [pc, #300]	; (d8640 <_Z11readSensorsv+0xa40>)
   d8512:	f004 ff4c 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8516:	495c      	ldr	r1, [pc, #368]	; (d8688 <_Z11readSensorsv+0xa88>)
   d8518:	f004 ff55 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d851c:	494a      	ldr	r1, [pc, #296]	; (d8648 <_Z11readSensorsv+0xa48>)
   d851e:	f004 ff46 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8522:	4959      	ldr	r1, [pc, #356]	; (d8688 <_Z11readSensorsv+0xa88>)
   d8524:	f004 ff4f 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8528:	494f      	ldr	r1, [pc, #316]	; (d8668 <_Z11readSensorsv+0xa68>)
   d852a:	f004 ff40 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d852e:	4956      	ldr	r1, [pc, #344]	; (d8688 <_Z11readSensorsv+0xa88>)
   d8530:	f004 ff49 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8534:	494d      	ldr	r1, [pc, #308]	; (d866c <_Z11readSensorsv+0xa6c>)
   d8536:	f004 ff3a 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d853a:	4953      	ldr	r1, [pc, #332]	; (d8688 <_Z11readSensorsv+0xa88>)
   d853c:	f004 ff43 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8540:	494d      	ldr	r1, [pc, #308]	; (d8678 <_Z11readSensorsv+0xa78>)
   d8542:	f004 ff34 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8546:	4950      	ldr	r1, [pc, #320]	; (d8688 <_Z11readSensorsv+0xa88>)
   d8548:	f004 ff3d 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d854c:	494d      	ldr	r1, [pc, #308]	; (d8684 <_Z11readSensorsv+0xa84>)
   d854e:	f004 ff2e 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8552:	4601      	mov	r1, r0
   d8554:	484d      	ldr	r0, [pc, #308]	; (d868c <_Z11readSensorsv+0xa8c>)
   d8556:	f004 fe84 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d855a:	a81b      	add	r0, sp, #108	; 0x6c
   d855c:	f004 fe0a 	bl	dd174 <_ZN6StringD1Ev>
    // Blynk.virtualWrite(V4, Sensor.massPM10);
    // Blynk.virtualWrite(V5, conc);
    // Blynk.virtualWrite(V6, temp1);
    // Blynk.virtualWrite(V7, fuel.getSoC());
    // Blynk.virtualWrite(V8, sig.qual);
    Blynk.virtualWrite(V1, field1);
   d8560:	4935      	ldr	r1, [pc, #212]	; (d8638 <_Z11readSensorsv+0xa38>)
   d8562:	a81b      	add	r0, sp, #108	; 0x6c
   d8564:	f004 fe8c 	bl	dd280 <_ZN6StringC1ERKS_>
   d8568:	aa1b      	add	r2, sp, #108	; 0x6c
   d856a:	2101      	movs	r1, #1
   d856c:	4848      	ldr	r0, [pc, #288]	; (d8690 <_Z11readSensorsv+0xa90>)
   d856e:	f7fe fbd1 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8572:	a81b      	add	r0, sp, #108	; 0x6c
   d8574:	f004 fdfe 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V2, field2);
   d8578:	4930      	ldr	r1, [pc, #192]	; (d863c <_Z11readSensorsv+0xa3c>)
   d857a:	a81b      	add	r0, sp, #108	; 0x6c
   d857c:	f004 fe80 	bl	dd280 <_ZN6StringC1ERKS_>
   d8580:	aa1b      	add	r2, sp, #108	; 0x6c
   d8582:	2102      	movs	r1, #2
   d8584:	4842      	ldr	r0, [pc, #264]	; (d8690 <_Z11readSensorsv+0xa90>)
   d8586:	f7fe fbc5 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d858a:	a81b      	add	r0, sp, #108	; 0x6c
   d858c:	f004 fdf2 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V3, field3);
   d8590:	492b      	ldr	r1, [pc, #172]	; (d8640 <_Z11readSensorsv+0xa40>)
   d8592:	a81b      	add	r0, sp, #108	; 0x6c
   d8594:	f004 fe74 	bl	dd280 <_ZN6StringC1ERKS_>
   d8598:	aa1b      	add	r2, sp, #108	; 0x6c
   d859a:	2103      	movs	r1, #3
   d859c:	483c      	ldr	r0, [pc, #240]	; (d8690 <_Z11readSensorsv+0xa90>)
   d859e:	f7fe fbb9 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d85a2:	a81b      	add	r0, sp, #108	; 0x6c
   d85a4:	f004 fde6 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V4, field4);
   d85a8:	4927      	ldr	r1, [pc, #156]	; (d8648 <_Z11readSensorsv+0xa48>)
   d85aa:	a81b      	add	r0, sp, #108	; 0x6c
   d85ac:	f004 fe68 	bl	dd280 <_ZN6StringC1ERKS_>
   d85b0:	aa1b      	add	r2, sp, #108	; 0x6c
   d85b2:	2104      	movs	r1, #4
   d85b4:	4836      	ldr	r0, [pc, #216]	; (d8690 <_Z11readSensorsv+0xa90>)
   d85b6:	f7fe fbad 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d85ba:	a81b      	add	r0, sp, #108	; 0x6c
   d85bc:	f004 fdda 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V5, field5);
   d85c0:	4929      	ldr	r1, [pc, #164]	; (d8668 <_Z11readSensorsv+0xa68>)
   d85c2:	a81b      	add	r0, sp, #108	; 0x6c
   d85c4:	f004 fe5c 	bl	dd280 <_ZN6StringC1ERKS_>
   d85c8:	aa1b      	add	r2, sp, #108	; 0x6c
   d85ca:	2105      	movs	r1, #5
   d85cc:	4830      	ldr	r0, [pc, #192]	; (d8690 <_Z11readSensorsv+0xa90>)
   d85ce:	f7fe fba1 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d85d2:	a81b      	add	r0, sp, #108	; 0x6c
   d85d4:	f004 fdce 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V6, field6);
   d85d8:	4924      	ldr	r1, [pc, #144]	; (d866c <_Z11readSensorsv+0xa6c>)
   d85da:	a81b      	add	r0, sp, #108	; 0x6c
   d85dc:	f004 fe50 	bl	dd280 <_ZN6StringC1ERKS_>
   d85e0:	aa1b      	add	r2, sp, #108	; 0x6c
   d85e2:	2106      	movs	r1, #6
   d85e4:	482a      	ldr	r0, [pc, #168]	; (d8690 <_Z11readSensorsv+0xa90>)
   d85e6:	f7fe fb95 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d85ea:	a81b      	add	r0, sp, #108	; 0x6c
   d85ec:	f004 fdc2 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V7, field7);
   d85f0:	4921      	ldr	r1, [pc, #132]	; (d8678 <_Z11readSensorsv+0xa78>)
   d85f2:	a81b      	add	r0, sp, #108	; 0x6c
   d85f4:	f004 fe44 	bl	dd280 <_ZN6StringC1ERKS_>
   d85f8:	aa1b      	add	r2, sp, #108	; 0x6c
   d85fa:	2107      	movs	r1, #7
   d85fc:	4824      	ldr	r0, [pc, #144]	; (d8690 <_Z11readSensorsv+0xa90>)
   d85fe:	f7fe fb89 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8602:	a81b      	add	r0, sp, #108	; 0x6c
   d8604:	f004 fdb6 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   
   d8608:	491e      	ldr	r1, [pc, #120]	; (d8684 <_Z11readSensorsv+0xa84>)
   d860a:	a81b      	add	r0, sp, #108	; 0x6c
   d860c:	f004 fe38 	bl	dd280 <_ZN6StringC1ERKS_>
   d8610:	aa1b      	add	r2, sp, #108	; 0x6c
   d8612:	e03f      	b.n	d8694 <_Z11readSensorsv+0xa94>
   d8614:	f3af 8000 	nop.w
   d8618:	d2c10294 	.word	0xd2c10294
   d861c:	3f5263af 	.word	0x3f5263af
   d8620:	dab9f55a 	.word	0xdab9f55a
   d8624:	40143d8a 	.word	0x40143d8a
   d8628:	9abcaf48 	.word	0x9abcaf48
   d862c:	3e7ad7f2 	.word	0x3e7ad7f2
   d8630:	2003e010 	.word	0x2003e010
   d8634:	000e7f89 	.word	0x000e7f89
   d8638:	2003e0a0 	.word	0x2003e0a0
   d863c:	2003d88c 	.word	0x2003d88c
   d8640:	2003d89c 	.word	0x2003d89c
   d8644:	2003e36c 	.word	0x2003e36c
   d8648:	2003d8ac 	.word	0x2003d8ac
   d864c:	000e7506 	.word	0x000e7506
   d8650:	2003dfc8 	.word	0x2003dfc8
   d8654:	000e835a 	.word	0x000e835a
   d8658:	000e7f8f 	.word	0x000e7f8f
   d865c:	000e7f9a 	.word	0x000e7f9a
   d8660:	000e7fa4 	.word	0x000e7fa4
   d8664:	2003dfa5 	.word	0x2003dfa5
   d8668:	2003d8bc 	.word	0x2003d8bc
   d866c:	2003e034 	.word	0x2003e034
   d8670:	42c80000 	.word	0x42c80000
   d8674:	000e7fae 	.word	0x000e7fae
   d8678:	2003d8dc 	.word	0x2003d8dc
   d867c:	2003e55c 	.word	0x2003e55c
   d8680:	000e885c 	.word	0x000e885c
   d8684:	2003d7b8 	.word	0x2003d7b8
   d8688:	000e7a07 	.word	0x000e7a07
   d868c:	2003dfa8 	.word	0x2003dfa8
   d8690:	2003e338 	.word	0x2003e338
   d8694:	2108      	movs	r1, #8
   d8696:	4875      	ldr	r0, [pc, #468]	; (d886c <_Z11readSensorsv+0xc6c>)
   d8698:	f7fe fb3c 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d869c:	a81b      	add	r0, sp, #108	; 0x6c
   d869e:	f004 fd69 	bl	dd174 <_ZN6StringD1Ev>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    debug(datastring + "\n");
   d86a2:	f004 fb29 	bl	dccf8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d86a6:	4972      	ldr	r1, [pc, #456]	; (d8870 <_Z11readSensorsv+0xc70>)
   d86a8:	4605      	mov	r5, r0
   d86aa:	a81b      	add	r0, sp, #108	; 0x6c
   d86ac:	f004 fde8 	bl	dd280 <_ZN6StringC1ERKS_>
   d86b0:	4970      	ldr	r1, [pc, #448]	; (d8874 <_Z11readSensorsv+0xc74>)
   d86b2:	a81b      	add	r0, sp, #108	; 0x6c
   d86b4:	f004 fe87 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d86b8:	6801      	ldr	r1, [r0, #0]
   d86ba:	4628      	mov	r0, r5
   d86bc:	f004 f959 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d86c0:	a81b      	add	r0, sp, #108	; 0x6c
   d86c2:	f004 fd57 	bl	dd174 <_ZN6StringD1Ev>
    sensorValid = true;
   d86c6:	4b6c      	ldr	r3, [pc, #432]	; (d8878 <_Z11readSensorsv+0xc78>)
    String statusMessage;
   d86c8:	496c      	ldr	r1, [pc, #432]	; (d887c <_Z11readSensorsv+0xc7c>)
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    debug(datastring + "\n");
    sensorValid = true;
   d86ca:	2501      	movs	r5, #1
    String statusMessage;
   d86cc:	a807      	add	r0, sp, #28
    Blynk.virtualWrite(V7, field7);
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    debug(datastring + "\n");
    sensorValid = true;
   d86ce:	701d      	strb	r5, [r3, #0]
    String statusMessage;
   d86d0:	f004 fd97 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
    String alertMessage;
   d86d4:	4969      	ldr	r1, [pc, #420]	; (d887c <_Z11readSensorsv+0xc7c>)
   d86d6:	a80b      	add	r0, sp, #44	; 0x2c
   d86d8:	f004 fd93 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
   d86dc:	4868      	ldr	r0, [pc, #416]	; (d8880 <_Z11readSensorsv+0xc80>)
   d86de:	f7fe ff09 	bl	d74f4 <_Z13runExpressionPc>
   d86e2:	4602      	mov	r2, r0
   d86e4:	2800      	cmp	r0, #0
   d86e6:	f000 8084 	beq.w	d87f2 <_Z11readSensorsv+0xbf2>
    {
      currentAlert = true;
   d86ea:	4b66      	ldr	r3, [pc, #408]	; (d8884 <_Z11readSensorsv+0xc84>)
      Blynk.virtualWrite(V9,alertGreenImage);
   d86ec:	485f      	ldr	r0, [pc, #380]	; (d886c <_Z11readSensorsv+0xc6c>)
    String statusMessage;
    String alertMessage;
    // Check to see if there is an alert state and act on it
    if (runExpression(state.expression))
    {
      currentAlert = true;
   d86ee:	701d      	strb	r5, [r3, #0]
      Blynk.virtualWrite(V9,alertGreenImage);
   d86f0:	2200      	movs	r2, #0
   d86f2:	2109      	movs	r1, #9
   d86f4:	f7fe fae4 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      Blynk.virtualWrite(V9,alertRedImage);
   d86f8:	462a      	mov	r2, r5
   d86fa:	2109      	movs	r1, #9
   d86fc:	485b      	ldr	r0, [pc, #364]	; (d886c <_Z11readSensorsv+0xc6c>)
   d86fe:	f7fe fadf 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      
      if (timeSynced)
   d8702:	7833      	ldrb	r3, [r6, #0]
   d8704:	b31b      	cbz	r3, d874e <_Z11readSensorsv+0xb4e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d8706:	4960      	ldr	r1, [pc, #384]	; (d8888 <_Z11readSensorsv+0xc88>)
   d8708:	a81b      	add	r0, sp, #108	; 0x6c
   d870a:	f004 fd7a 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
      {
        // statusMessage = "ALERT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = "ALRT! "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d870e:	485f      	ldr	r0, [pc, #380]	; (d888c <_Z11readSensorsv+0xc8c>)
   d8710:	f002 f88e 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d8714:	4b5e      	ldr	r3, [pc, #376]	; (d8890 <_Z11readSensorsv+0xc90>)
   d8716:	495f      	ldr	r1, [pc, #380]	; (d8894 <_Z11readSensorsv+0xc94>)
   d8718:	681a      	ldr	r2, [r3, #0]
   d871a:	4b5f      	ldr	r3, [pc, #380]	; (d8898 <_Z11readSensorsv+0xc98>)
   d871c:	4402      	add	r2, r0
   d871e:	a817      	add	r0, sp, #92	; 0x5c
   d8720:	f004 f868 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
   d8724:	a917      	add	r1, sp, #92	; 0x5c
   d8726:	a81b      	add	r0, sp, #108	; 0x6c
   d8728:	f004 fe41 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d872c:	495b      	ldr	r1, [pc, #364]	; (d889c <_Z11readSensorsv+0xc9c>)
   d872e:	f004 fe4a 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8732:	495b      	ldr	r1, [pc, #364]	; (d88a0 <_Z11readSensorsv+0xca0>)
   d8734:	f004 fe3b 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8738:	495a      	ldr	r1, [pc, #360]	; (d88a4 <_Z11readSensorsv+0xca4>)
   d873a:	f004 fe44 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d873e:	4601      	mov	r1, r0
   d8740:	a807      	add	r0, sp, #28
   d8742:	f004 fd8e 	bl	dd262 <_ZN6StringaSERKS_>
   d8746:	a817      	add	r0, sp, #92	; 0x5c
   d8748:	f004 fd14 	bl	dd174 <_ZN6StringD1Ev>
   d874c:	e00e      	b.n	d876c <_Z11readSensorsv+0xb6c>
   d874e:	4956      	ldr	r1, [pc, #344]	; (d88a8 <_Z11readSensorsv+0xca8>)
   d8750:	a81b      	add	r0, sp, #108	; 0x6c
   d8752:	f004 fd56 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        statusMessage = "ALERT!             "+field7+"%";
   d8756:	4952      	ldr	r1, [pc, #328]	; (d88a0 <_Z11readSensorsv+0xca0>)
   d8758:	a81b      	add	r0, sp, #108	; 0x6c
   d875a:	f004 fe28 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d875e:	4951      	ldr	r1, [pc, #324]	; (d88a4 <_Z11readSensorsv+0xca4>)
   d8760:	f004 fe31 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8764:	4601      	mov	r1, r0
   d8766:	a807      	add	r0, sp, #28
   d8768:	f004 fd7b 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d876c:	a81b      	add	r0, sp, #108	; 0x6c
   d876e:	f004 fd01 	bl	dd174 <_ZN6StringD1Ev>
      }
      Blynk.virtualWrite(V30,statusMessage);
   d8772:	a907      	add	r1, sp, #28
   d8774:	a81b      	add	r0, sp, #108	; 0x6c
   d8776:	f004 fd83 	bl	dd280 <_ZN6StringC1ERKS_>
   d877a:	aa1b      	add	r2, sp, #108	; 0x6c
   d877c:	211e      	movs	r1, #30
   d877e:	483b      	ldr	r0, [pc, #236]	; (d886c <_Z11readSensorsv+0xc6c>)
   d8780:	f7fe fac8 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8784:	a81b      	add	r0, sp, #108	; 0x6c
   d8786:	f004 fcf5 	bl	dd174 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d878a:	4b48      	ldr	r3, [pc, #288]	; (d88ac <_Z11readSensorsv+0xcac>)
   d878c:	781b      	ldrb	r3, [r3, #0]
   d878e:	2b00      	cmp	r3, #0
   d8790:	f000 8110 	beq.w	d89b4 <_Z11readSensorsv+0xdb4>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d8794:	f004 f881 	bl	dc89a <_ZN9TimeClass3nowEv>
   d8798:	4601      	mov	r1, r0
   d879a:	a80f      	add	r0, sp, #60	; 0x3c
   d879c:	f003 ffa6 	bl	dc6ec <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d87a0:	a90f      	add	r1, sp, #60	; 0x3c
   d87a2:	a813      	add	r0, sp, #76	; 0x4c
   d87a4:	f004 fd6c 	bl	dd280 <_ZN6StringC1ERKS_>
   d87a8:	4941      	ldr	r1, [pc, #260]	; (d88b0 <_Z11readSensorsv+0xcb0>)
   d87aa:	a813      	add	r0, sp, #76	; 0x4c
   d87ac:	f004 fe0b 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d87b0:	4b37      	ldr	r3, [pc, #220]	; (d8890 <_Z11readSensorsv+0xc90>)
   d87b2:	220a      	movs	r2, #10
   d87b4:	6819      	ldr	r1, [r3, #0]
   d87b6:	4605      	mov	r5, r0
   d87b8:	a817      	add	r0, sp, #92	; 0x5c
   d87ba:	f004 fd97 	bl	dd2ec <_ZN6StringC1Eih>
   d87be:	a917      	add	r1, sp, #92	; 0x5c
   d87c0:	4628      	mov	r0, r5
   d87c2:	f004 fdf4 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d87c6:	4601      	mov	r1, r0
   d87c8:	a81b      	add	r0, sp, #108	; 0x6c
   d87ca:	f004 fd59 	bl	dd280 <_ZN6StringC1ERKS_>
   d87ce:	aa1b      	add	r2, sp, #108	; 0x6c
   d87d0:	2115      	movs	r1, #21
   d87d2:	4826      	ldr	r0, [pc, #152]	; (d886c <_Z11readSensorsv+0xc6c>)
   d87d4:	f7fe fbc2 	bl	d6f5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d87d8:	a81b      	add	r0, sp, #108	; 0x6c
   d87da:	f004 fccb 	bl	dd174 <_ZN6StringD1Ev>
   d87de:	a817      	add	r0, sp, #92	; 0x5c
   d87e0:	f004 fcc8 	bl	dd174 <_ZN6StringD1Ev>
   d87e4:	a813      	add	r0, sp, #76	; 0x4c
   d87e6:	f004 fcc5 	bl	dd174 <_ZN6StringD1Ev>
   d87ea:	a80f      	add	r0, sp, #60	; 0x3c
   d87ec:	f004 fcc2 	bl	dd174 <_ZN6StringD1Ev>
   d87f0:	e0e0      	b.n	d89b4 <_Z11readSensorsv+0xdb4>
    }
    else
    {
      Blynk.virtualWrite(V0,0);
   d87f2:	4601      	mov	r1, r0
   d87f4:	481d      	ldr	r0, [pc, #116]	; (d886c <_Z11readSensorsv+0xc6c>)
   d87f6:	f7fe fa63 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (tamperCurrentAlert){
   d87fa:	4b2e      	ldr	r3, [pc, #184]	; (d88b4 <_Z11readSensorsv+0xcb4>)
   d87fc:	781a      	ldrb	r2, [r3, #0]
   d87fe:	b122      	cbz	r2, d880a <_Z11readSensorsv+0xc0a>
        StateString="ALRT!";
   d8800:	492d      	ldr	r1, [pc, #180]	; (d88b8 <_Z11readSensorsv+0xcb8>)
   d8802:	482e      	ldr	r0, [pc, #184]	; (d88bc <_Z11readSensorsv+0xcbc>)
   d8804:	f004 fd4f 	bl	dd2a6 <_ZN6StringaSEPKc>
        Blynk.virtualWrite(V9,alertRedImage);
   d8808:	462a      	mov	r2, r5
      }
      else
        Blynk.virtualWrite(V9,alertGreenImage);
   d880a:	2109      	movs	r1, #9
   d880c:	4817      	ldr	r0, [pc, #92]	; (d886c <_Z11readSensorsv+0xc6c>)
   d880e:	f7fe fa57 	bl	d6cc0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiEEEviDpT_>
      if (timeSynced)
   d8812:	7833      	ldrb	r3, [r6, #0]
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8814:	4929      	ldr	r1, [pc, #164]	; (d88bc <_Z11readSensorsv+0xcbc>)
   d8816:	2b00      	cmp	r3, #0
   d8818:	d052      	beq.n	d88c0 <_Z11readSensorsv+0xcc0>
   d881a:	a817      	add	r0, sp, #92	; 0x5c
   d881c:	f004 fd30 	bl	dd280 <_ZN6StringC1ERKS_>
      {
        // statusMessage = "OK "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%D %R")+" "+field7+"%";
        statusMessage = StateString+" "+Time.format(rtc.rtcNow()+gmtOffsetSeconds,"%h%e %R")+" "+field7+"%";
   d8820:	491e      	ldr	r1, [pc, #120]	; (d889c <_Z11readSensorsv+0xc9c>)
   d8822:	a817      	add	r0, sp, #92	; 0x5c
   d8824:	f004 fdcf 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8828:	4605      	mov	r5, r0
   d882a:	4818      	ldr	r0, [pc, #96]	; (d888c <_Z11readSensorsv+0xc8c>)
   d882c:	f002 f800 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d8830:	4b17      	ldr	r3, [pc, #92]	; (d8890 <_Z11readSensorsv+0xc90>)
   d8832:	4918      	ldr	r1, [pc, #96]	; (d8894 <_Z11readSensorsv+0xc94>)
   d8834:	681a      	ldr	r2, [r3, #0]
   d8836:	4b18      	ldr	r3, [pc, #96]	; (d8898 <_Z11readSensorsv+0xc98>)
   d8838:	4402      	add	r2, r0
   d883a:	a81b      	add	r0, sp, #108	; 0x6c
   d883c:	f003 ffda 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
   d8840:	a91b      	add	r1, sp, #108	; 0x6c
   d8842:	4628      	mov	r0, r5
   d8844:	f004 fdb3 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8848:	4914      	ldr	r1, [pc, #80]	; (d889c <_Z11readSensorsv+0xc9c>)
   d884a:	f004 fdbc 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d884e:	4914      	ldr	r1, [pc, #80]	; (d88a0 <_Z11readSensorsv+0xca0>)
   d8850:	f004 fdad 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d8854:	4913      	ldr	r1, [pc, #76]	; (d88a4 <_Z11readSensorsv+0xca4>)
   d8856:	f004 fdb6 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d885a:	4601      	mov	r1, r0
   d885c:	a807      	add	r0, sp, #28
   d885e:	f004 fd00 	bl	dd262 <_ZN6StringaSERKS_>
   d8862:	a81b      	add	r0, sp, #108	; 0x6c
   d8864:	f004 fc86 	bl	dd174 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8868:	a817      	add	r0, sp, #92	; 0x5c
   d886a:	e03b      	b.n	d88e4 <_Z11readSensorsv+0xce4>
   d886c:	2003e338 	.word	0x2003e338
   d8870:	2003dfa8 	.word	0x2003dfa8
   d8874:	000e7962 	.word	0x000e7962
   d8878:	2003e030 	.word	0x2003e030
   d887c:	000e7963 	.word	0x000e7963
   d8880:	2003db88 	.word	0x2003db88
   d8884:	2003e0e0 	.word	0x2003e0e0
   d8888:	000e7fb4 	.word	0x000e7fb4
   d888c:	2003e028 	.word	0x2003e028
   d8890:	2003d6b4 	.word	0x2003d6b4
   d8894:	2003e5c8 	.word	0x2003e5c8
   d8898:	000e7a93 	.word	0x000e7a93
   d889c:	000e7aac 	.word	0x000e7aac
   d88a0:	2003d8dc 	.word	0x2003d8dc
   d88a4:	000e7a9b 	.word	0x000e7a9b
   d88a8:	000e7fbb 	.word	0x000e7fbb
   d88ac:	2003db39 	.word	0x2003db39
   d88b0:	000e7fcf 	.word	0x000e7fcf
   d88b4:	2003dfc4 	.word	0x2003dfc4
   d88b8:	000e7fd1 	.word	0x000e7fd1
   d88bc:	2003d8cc 	.word	0x2003d8cc
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d88c0:	a81b      	add	r0, sp, #108	; 0x6c
   d88c2:	f004 fcdd 	bl	dd280 <_ZN6StringC1ERKS_>
      }
      else
      {
        statusMessage = StateString+"                "+field7+"%";
   d88c6:	4995      	ldr	r1, [pc, #596]	; (d8b1c <_Z11readSensorsv+0xf1c>)
   d88c8:	a81b      	add	r0, sp, #108	; 0x6c
   d88ca:	f004 fd7c 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d88ce:	4994      	ldr	r1, [pc, #592]	; (d8b20 <_Z11readSensorsv+0xf20>)
   d88d0:	f004 fd6d 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d88d4:	4993      	ldr	r1, [pc, #588]	; (d8b24 <_Z11readSensorsv+0xf24>)
   d88d6:	f004 fd76 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d88da:	4601      	mov	r1, r0
   d88dc:	a807      	add	r0, sp, #28
   d88de:	f004 fcc0 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d88e2:	a81b      	add	r0, sp, #108	; 0x6c
   d88e4:	f004 fc46 	bl	dd174 <_ZN6StringD1Ev>
      }
      int messagesize=statusMessage.length();
      if (messagesize<5){
   d88e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d88ea:	2b04      	cmp	r3, #4
   d88ec:	dc22      	bgt.n	d8934 <_Z11readSensorsv+0xd34>
        statusMessage=String::format("Updating");
   d88ee:	498e      	ldr	r1, [pc, #568]	; (d8b28 <_Z11readSensorsv+0xf28>)
   d88f0:	a81b      	add	r0, sp, #108	; 0x6c
   d88f2:	f004 fddb 	bl	dd4ac <_ZN6String6formatEPKcz>
   d88f6:	a91b      	add	r1, sp, #108	; 0x6c
   d88f8:	a807      	add	r0, sp, #28
   d88fa:	f004 fccc 	bl	dd296 <_ZN6StringaSEOS_>
   d88fe:	a81b      	add	r0, sp, #108	; 0x6c
   d8900:	f004 fc38 	bl	dd174 <_ZN6StringD1Ev>
        debug(statusMessage + "\n");
   d8904:	f004 f9f8 	bl	dccf8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8908:	a907      	add	r1, sp, #28
   d890a:	4605      	mov	r5, r0
   d890c:	a81b      	add	r0, sp, #108	; 0x6c
   d890e:	f004 fcb7 	bl	dd280 <_ZN6StringC1ERKS_>
   d8912:	4986      	ldr	r1, [pc, #536]	; (d8b2c <_Z11readSensorsv+0xf2c>)
   d8914:	a81b      	add	r0, sp, #108	; 0x6c
   d8916:	f004 fd56 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d891a:	6801      	ldr	r1, [r0, #0]
   d891c:	4628      	mov	r0, r5
   d891e:	f004 f828 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8922:	a81b      	add	r0, sp, #108	; 0x6c
   d8924:	f004 fc26 	bl	dd174 <_ZN6StringD1Ev>
        delay(1000);
   d8928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d892c:	f003 fff8 	bl	dc920 <delay>
        System.reset();
   d8930:	f004 fac0 	bl	dceb4 <_ZN11SystemClass5resetEv>
      }
        
      Blynk.virtualWrite(V30,statusMessage);
   d8934:	a907      	add	r1, sp, #28
   d8936:	a81b      	add	r0, sp, #108	; 0x6c
   d8938:	f004 fca2 	bl	dd280 <_ZN6StringC1ERKS_>
   d893c:	aa1b      	add	r2, sp, #108	; 0x6c
   d893e:	211e      	movs	r1, #30
   d8940:	487b      	ldr	r0, [pc, #492]	; (d8b30 <_Z11readSensorsv+0xf30>)
   d8942:	f7fe f9e7 	bl	d6d14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII6StringEEEviDpT_>
   d8946:	a81b      	add	r0, sp, #108	; 0x6c
   d8948:	f004 fc14 	bl	dd174 <_ZN6StringD1Ev>
      if (terminalDebug) Blynk.virtualWrite(V21, Time.timeStr()+"|"+String(gmtOffsetSeconds));
   d894c:	4b79      	ldr	r3, [pc, #484]	; (d8b34 <_Z11readSensorsv+0xf34>)
   d894e:	781b      	ldrb	r3, [r3, #0]
   d8950:	b36b      	cbz	r3, d89ae <_Z11readSensorsv+0xdae>
   d8952:	f003 ffa2 	bl	dc89a <_ZN9TimeClass3nowEv>
   d8956:	4601      	mov	r1, r0
   d8958:	a80f      	add	r0, sp, #60	; 0x3c
   d895a:	f003 fec7 	bl	dc6ec <_ZN9TimeClass7timeStrEl>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d895e:	a90f      	add	r1, sp, #60	; 0x3c
   d8960:	a813      	add	r0, sp, #76	; 0x4c
   d8962:	f004 fc8d 	bl	dd280 <_ZN6StringC1ERKS_>
   d8966:	4974      	ldr	r1, [pc, #464]	; (d8b38 <_Z11readSensorsv+0xf38>)
   d8968:	a813      	add	r0, sp, #76	; 0x4c
   d896a:	f004 fd2c 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d896e:	4b73      	ldr	r3, [pc, #460]	; (d8b3c <_Z11readSensorsv+0xf3c>)
   d8970:	220a      	movs	r2, #10
   d8972:	6819      	ldr	r1, [r3, #0]
   d8974:	4605      	mov	r5, r0
   d8976:	a817      	add	r0, sp, #92	; 0x5c
   d8978:	f004 fcb8 	bl	dd2ec <_ZN6StringC1Eih>
   d897c:	a917      	add	r1, sp, #92	; 0x5c
   d897e:	4628      	mov	r0, r5
   d8980:	f004 fd15 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8984:	4601      	mov	r1, r0
   d8986:	a81b      	add	r0, sp, #108	; 0x6c
   d8988:	f004 fc7a 	bl	dd280 <_ZN6StringC1ERKS_>
   d898c:	aa1b      	add	r2, sp, #108	; 0x6c
   d898e:	2115      	movs	r1, #21
   d8990:	4867      	ldr	r0, [pc, #412]	; (d8b30 <_Z11readSensorsv+0xf30>)
   d8992:	f7fe fae3 	bl	d6f5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d8996:	a81b      	add	r0, sp, #108	; 0x6c
   d8998:	f004 fbec 	bl	dd174 <_ZN6StringD1Ev>
   d899c:	a817      	add	r0, sp, #92	; 0x5c
   d899e:	f004 fbe9 	bl	dd174 <_ZN6StringD1Ev>
   d89a2:	a813      	add	r0, sp, #76	; 0x4c
   d89a4:	f004 fbe6 	bl	dd174 <_ZN6StringD1Ev>
   d89a8:	a80f      	add	r0, sp, #60	; 0x3c
   d89aa:	f004 fbe3 	bl	dd174 <_ZN6StringD1Ev>
      currentAlert = false;
   d89ae:	4b64      	ldr	r3, [pc, #400]	; (d8b40 <_Z11readSensorsv+0xf40>)
   d89b0:	2200      	movs	r2, #0
   d89b2:	701a      	strb	r2, [r3, #0]
    }
     if (VapeBuzzerOn)
   d89b4:	4e63      	ldr	r6, [pc, #396]	; (d8b44 <_Z11readSensorsv+0xf44>)
   d89b6:	7833      	ldrb	r3, [r6, #0]
   d89b8:	b363      	cbz	r3, d8a14 <_Z11readSensorsv+0xe14>
   d89ba:	f002 f8fb 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d89be:	4b62      	ldr	r3, [pc, #392]	; (d8b48 <_Z11readSensorsv+0xf48>)
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d89c0:	4962      	ldr	r1, [pc, #392]	; (d8b4c <_Z11readSensorsv+0xf4c>)
      currentAlert = false;
    }
     if (VapeBuzzerOn)
     {
         //Turn Buzzer Off if timer expired
         unsigned long vape_elapsed_buzzer =  millis() - VapeAlertBuzzerTime;
   d89c2:	681d      	ldr	r5, [r3, #0]
   d89c4:	1b45      	subs	r5, r0, r5
  	 alertMessage=String::format("buzzer total time %ul ****", vape_elapsed_buzzer);
   d89c6:	462a      	mov	r2, r5
   d89c8:	a81b      	add	r0, sp, #108	; 0x6c
   d89ca:	f004 fd6f 	bl	dd4ac <_ZN6String6formatEPKcz>
   d89ce:	a91b      	add	r1, sp, #108	; 0x6c
   d89d0:	a80b      	add	r0, sp, #44	; 0x2c
   d89d2:	f004 fc60 	bl	dd296 <_ZN6StringaSEOS_>
   d89d6:	a81b      	add	r0, sp, #108	; 0x6c
   d89d8:	f004 fbcc 	bl	dd174 <_ZN6StringD1Ev>
         debug(alertMessage + "\n");
   d89dc:	f004 f98c 	bl	dccf8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d89e0:	a90b      	add	r1, sp, #44	; 0x2c
   d89e2:	4607      	mov	r7, r0
   d89e4:	a81b      	add	r0, sp, #108	; 0x6c
   d89e6:	f004 fc4b 	bl	dd280 <_ZN6StringC1ERKS_>
   d89ea:	4950      	ldr	r1, [pc, #320]	; (d8b2c <_Z11readSensorsv+0xf2c>)
   d89ec:	a81b      	add	r0, sp, #108	; 0x6c
   d89ee:	f004 fcea 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d89f2:	6801      	ldr	r1, [r0, #0]
   d89f4:	4638      	mov	r0, r7
   d89f6:	f003 ffbc 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d89fa:	a81b      	add	r0, sp, #108	; 0x6c
   d89fc:	f004 fbba 	bl	dd174 <_ZN6StringD1Ev>
         if (vape_elapsed_buzzer>8000){
   d8a00:	f5b5 5ffa 	cmp.w	r5, #8000	; 0x1f40
   d8a04:	d906      	bls.n	d8a14 <_Z11readSensorsv+0xe14>
           digitalWrite(buzzer, LOW);
   d8a06:	4b52      	ldr	r3, [pc, #328]	; (d8b50 <_Z11readSensorsv+0xf50>)
   d8a08:	2100      	movs	r1, #0
   d8a0a:	8818      	ldrh	r0, [r3, #0]
   d8a0c:	f004 fdfd 	bl	dd60a <digitalWrite>
	         VapeBuzzerOn=false;
   d8a10:	2300      	movs	r3, #0
   d8a12:	7033      	strb	r3, [r6, #0]
	       }
     }

    if (alertChanged())
   d8a14:	f7fd fa10 	bl	d5e38 <_Z12alertChangedv>
   d8a18:	2800      	cmp	r0, #0
   d8a1a:	d060      	beq.n	d8ade <_Z11readSensorsv+0xede>
    {
      if (currentAlert)
   d8a1c:	4b48      	ldr	r3, [pc, #288]	; (d8b40 <_Z11readSensorsv+0xf40>)
   d8a1e:	781b      	ldrb	r3, [r3, #0]
   d8a20:	2b00      	cmp	r3, #0
   d8a22:	d037      	beq.n	d8a94 <_Z11readSensorsv+0xe94>
      {
          
        if (state.buzzerVapor==true)
   d8a24:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   d8a28:	b343      	cbz	r3, d8a7c <_Z11readSensorsv+0xe7c>
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
   d8a2a:	4b49      	ldr	r3, [pc, #292]	; (d8b50 <_Z11readSensorsv+0xf50>)
   d8a2c:	2101      	movs	r1, #1
   d8a2e:	8818      	ldrh	r0, [r3, #0]
   d8a30:	f004 fdeb 	bl	dd60a <digitalWrite>
   d8a34:	f002 f8be 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
            VapeAlertBuzzerTime = millis();
   d8a38:	4b43      	ldr	r3, [pc, #268]	; (d8b48 <_Z11readSensorsv+0xf48>)
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d8a3a:	4946      	ldr	r1, [pc, #280]	; (d8b54 <_Z11readSensorsv+0xf54>)
          
        if (state.buzzerVapor==true)
        {
            //Buzzer On
            digitalWrite(buzzer, HIGH);
            VapeAlertBuzzerTime = millis();
   d8a3c:	6018      	str	r0, [r3, #0]
   d8a3e:	4602      	mov	r2, r0
            alertMessage=String::format("Vape alert buzzer time reset at %ul ****", VapeAlertBuzzerTime);
   d8a40:	a81b      	add	r0, sp, #108	; 0x6c
   d8a42:	f004 fd33 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8a46:	a91b      	add	r1, sp, #108	; 0x6c
   d8a48:	a80b      	add	r0, sp, #44	; 0x2c
   d8a4a:	f004 fc24 	bl	dd296 <_ZN6StringaSEOS_>
   d8a4e:	a81b      	add	r0, sp, #108	; 0x6c
   d8a50:	f004 fb90 	bl	dd174 <_ZN6StringD1Ev>
            debug(alertMessage + "\n");
   d8a54:	f004 f950 	bl	dccf8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8a58:	a90b      	add	r1, sp, #44	; 0x2c
   d8a5a:	4605      	mov	r5, r0
   d8a5c:	a81b      	add	r0, sp, #108	; 0x6c
   d8a5e:	f004 fc0f 	bl	dd280 <_ZN6StringC1ERKS_>
   d8a62:	4932      	ldr	r1, [pc, #200]	; (d8b2c <_Z11readSensorsv+0xf2c>)
   d8a64:	a81b      	add	r0, sp, #108	; 0x6c
   d8a66:	f004 fcae 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8a6a:	6801      	ldr	r1, [r0, #0]
   d8a6c:	4628      	mov	r0, r5
   d8a6e:	f003 ff80 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8a72:	a81b      	add	r0, sp, #108	; 0x6c
   d8a74:	f004 fb7e 	bl	dd174 <_ZN6StringD1Ev>
	          VapeBuzzerOn=true;
   d8a78:	2301      	movs	r3, #1
   d8a7a:	7033      	strb	r3, [r6, #0]
            //delay(8000);
        }
        if (state.notifyVapor==true)
   d8a7c:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
   d8a80:	b36b      	cbz	r3, d8ade <_Z11readSensorsv+0xede>
        {
          #ifdef Version_2
          Blynk.logEvent("vape_alert");
   d8a82:	4935      	ldr	r1, [pc, #212]	; (d8b58 <_Z11readSensorsv+0xf58>)
   d8a84:	482a      	ldr	r0, [pc, #168]	; (d8b30 <_Z11readSensorsv+0xf30>)
   d8a86:	f7fe fe83 	bl	d7790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>
   d8a8a:	f002 f893 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
          VapeAlertTime = millis();
   d8a8e:	4b33      	ldr	r3, [pc, #204]	; (d8b5c <_Z11readSensorsv+0xf5c>)
   d8a90:	6018      	str	r0, [r3, #0]
   d8a92:	e024      	b.n	d8ade <_Z11readSensorsv+0xede>
   d8a94:	f002 f88e 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
          #endif
        }
      }
      else
      {
       unsigned long elapsed = millis() - VapeAlertTime;
   d8a98:	4b30      	ldr	r3, [pc, #192]	; (d8b5c <_Z11readSensorsv+0xf5c>)
  	   alertMessage=String::format("Vape Alert total time %ul milliseconds", elapsed/10);
   d8a9a:	4931      	ldr	r1, [pc, #196]	; (d8b60 <_Z11readSensorsv+0xf60>)
   d8a9c:	681a      	ldr	r2, [r3, #0]
   d8a9e:	230a      	movs	r3, #10
   d8aa0:	1a82      	subs	r2, r0, r2
   d8aa2:	a81b      	add	r0, sp, #108	; 0x6c
   d8aa4:	fbb2 f2f3 	udiv	r2, r2, r3
   d8aa8:	f004 fd00 	bl	dd4ac <_ZN6String6formatEPKcz>
   d8aac:	a91b      	add	r1, sp, #108	; 0x6c
   d8aae:	a80b      	add	r0, sp, #44	; 0x2c
   d8ab0:	f004 fbf1 	bl	dd296 <_ZN6StringaSEOS_>
   d8ab4:	a81b      	add	r0, sp, #108	; 0x6c
   d8ab6:	f004 fb5d 	bl	dd174 <_ZN6StringD1Ev>
       debug(alertMessage + "\n");
   d8aba:	f004 f91d 	bl	dccf8 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8abe:	a90b      	add	r1, sp, #44	; 0x2c
   d8ac0:	4605      	mov	r5, r0
   d8ac2:	a81b      	add	r0, sp, #108	; 0x6c
   d8ac4:	f004 fbdc 	bl	dd280 <_ZN6StringC1ERKS_>
   d8ac8:	4918      	ldr	r1, [pc, #96]	; (d8b2c <_Z11readSensorsv+0xf2c>)
   d8aca:	a81b      	add	r0, sp, #108	; 0x6c
   d8acc:	f004 fc7b 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d8ad0:	6801      	ldr	r1, [r0, #0]
   d8ad2:	4628      	mov	r0, r5
   d8ad4:	f003 ff4d 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8ad8:	a81b      	add	r0, sp, #108	; 0x6c
   d8ada:	f004 fb4b 	bl	dd174 <_ZN6StringD1Ev>
        }
      }
      
    }

    if (batCharge<state.batThreshold)
   d8ade:	4b21      	ldr	r3, [pc, #132]	; (d8b64 <_Z11readSensorsv+0xf64>)
   d8ae0:	4d21      	ldr	r5, [pc, #132]	; (d8b68 <_Z11readSensorsv+0xf68>)
   d8ae2:	edd3 7a00 	vldr	s15, [r3]
   d8ae6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d8aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      batCurrentAlert = true;
   d8aee:	bf4c      	ite	mi
   d8af0:	2301      	movmi	r3, #1
    }
    else
    {
      batCurrentAlert = false;
   d8af2:	2300      	movpl	r3, #0
   d8af4:	702b      	strb	r3, [r5, #0]
    }

    if (batAlertChanged())
   d8af6:	f7fd f9b3 	bl	d5e60 <_Z15batAlertChangedv>
   d8afa:	b140      	cbz	r0, d8b0e <_Z11readSensorsv+0xf0e>
    {
      if (batCurrentAlert)
   d8afc:	782b      	ldrb	r3, [r5, #0]
   d8afe:	b133      	cbz	r3, d8b0e <_Z11readSensorsv+0xf0e>
      {
       if (state.notifyBattery==true)
   d8b00:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
   d8b04:	b11b      	cbz	r3, d8b0e <_Z11readSensorsv+0xf0e>
        {
          #ifdef Version_2
          Blynk.logEvent("low_battery_alert_20");
   d8b06:	4919      	ldr	r1, [pc, #100]	; (d8b6c <_Z11readSensorsv+0xf6c>)
   d8b08:	4809      	ldr	r0, [pc, #36]	; (d8b30 <_Z11readSensorsv+0xf30>)
   d8b0a:	f7fe fe41 	bl	d7790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA13_cEEvRKT_>

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    debug(datastring + "\n");
    sensorValid = true;
    String statusMessage;
    String alertMessage;
   d8b0e:	a80b      	add	r0, sp, #44	; 0x2c
   d8b10:	f004 fb30 	bl	dd174 <_ZN6StringD1Ev>
    Blynk.virtualWrite(V8, field8);   

    // Particle.publish("Test readings",datastring,60,PRIVATE);
    debug(datastring + "\n");
    sensorValid = true;
    String statusMessage;
   d8b14:	a807      	add	r0, sp, #28
   d8b16:	f004 fb2d 	bl	dd174 <_ZN6StringD1Ev>
   d8b1a:	e038      	b.n	d8b8e <_Z11readSensorsv+0xf8e>
   d8b1c:	000e7a9d 	.word	0x000e7a9d
   d8b20:	2003d8dc 	.word	0x2003d8dc
   d8b24:	000e7a9b 	.word	0x000e7a9b
   d8b28:	000e7fd7 	.word	0x000e7fd7
   d8b2c:	000e7962 	.word	0x000e7962
   d8b30:	2003e338 	.word	0x2003e338
   d8b34:	2003db39 	.word	0x2003db39
   d8b38:	000e7fcf 	.word	0x000e7fcf
   d8b3c:	2003d6b4 	.word	0x2003d6b4
   d8b40:	2003e0e0 	.word	0x2003e0e0
   d8b44:	2003d8ec 	.word	0x2003d8ec
   d8b48:	2003db34 	.word	0x2003db34
   d8b4c:	000e7fe0 	.word	0x000e7fe0
   d8b50:	2003d678 	.word	0x2003d678
   d8b54:	000e7ffb 	.word	0x000e7ffb
   d8b58:	000e8024 	.word	0x000e8024
   d8b5c:	2003e054 	.word	0x2003e054
   d8b60:	000e802f 	.word	0x000e802f
   d8b64:	2003df88 	.word	0x2003df88
   d8b68:	2003dfc5 	.word	0x2003dfc5
   d8b6c:	000e8056 	.word	0x000e8056
    }

  }
  else 
  { 
    if (!Sensor.beginMeasuring())
   d8b70:	4628      	mov	r0, r5
   d8b72:	f001 f8de 	bl	d9d32 <_ZN5SPS3014beginMeasuringEv>
   d8b76:	b950      	cbnz	r0, d8b8e <_Z11readSensorsv+0xf8e>
    {
      debug("Unable to read SPS30 - resetting device 1\n");
   d8b78:	f004 f8be 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8b7c:	4943      	ldr	r1, [pc, #268]	; (d8c8c <_Z11readSensorsv+0x108c>)
   d8b7e:	f003 fef8 	bl	dc972 <_ZN5Print5printEPKc>
      delay(1000);
   d8b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8b86:	f003 fecb 	bl	dc920 <delay>
      System.reset();
   d8b8a:	f004 f993 	bl	dceb4 <_ZN11SystemClass5resetEv>
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
   d8b8e:	4b40      	ldr	r3, [pc, #256]	; (d8c90 <_Z11readSensorsv+0x1090>)
   d8b90:	4c40      	ldr	r4, [pc, #256]	; (d8c94 <_Z11readSensorsv+0x1094>)
   d8b92:	781b      	ldrb	r3, [r3, #0]
   d8b94:	b1f3      	cbz	r3, d8bd4 <_Z11readSensorsv+0xfd4>
   d8b96:	220a      	movs	r2, #10
   d8b98:	6821      	ldr	r1, [r4, #0]
   d8b9a:	a817      	add	r0, sp, #92	; 0x5c
   d8b9c:	f004 fba6 	bl	dd2ec <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8ba0:	a917      	add	r1, sp, #92	; 0x5c
   d8ba2:	a81b      	add	r0, sp, #108	; 0x6c
   d8ba4:	f004 fb6c 	bl	dd280 <_ZN6StringC1ERKS_>
   d8ba8:	493b      	ldr	r1, [pc, #236]	; (d8c98 <_Z11readSensorsv+0x1098>)
   d8baa:	a81b      	add	r0, sp, #108	; 0x6c
   d8bac:	f004 fc0b 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8bb0:	4601      	mov	r1, r0
   d8bb2:	a81f      	add	r0, sp, #124	; 0x7c
   d8bb4:	f004 fb64 	bl	dd280 <_ZN6StringC1ERKS_>
   d8bb8:	aa1f      	add	r2, sp, #124	; 0x7c
   d8bba:	2115      	movs	r1, #21
   d8bbc:	4837      	ldr	r0, [pc, #220]	; (d8c9c <_Z11readSensorsv+0x109c>)
   d8bbe:	f7fe f9cd 	bl	d6f5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII15StringSumHelperEEEviDpT_>
   d8bc2:	a81f      	add	r0, sp, #124	; 0x7c
   d8bc4:	f004 fad6 	bl	dd174 <_ZN6StringD1Ev>
   d8bc8:	a81b      	add	r0, sp, #108	; 0x6c
   d8bca:	f004 fad3 	bl	dd174 <_ZN6StringD1Ev>
   d8bce:	a817      	add	r0, sp, #92	; 0x5c
   d8bd0:	f004 fad0 	bl	dd174 <_ZN6StringD1Ev>
  debug(millis());
   d8bd4:	f004 f890 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8bd8:	4605      	mov	r5, r0
   d8bda:	f001 ffeb 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
   d8bde:	220a      	movs	r2, #10
   d8be0:	4601      	mov	r1, r0
   d8be2:	4628      	mov	r0, r5
   d8be4:	f7fd f9ef 	bl	d5fc6 <_ZN5Print5printIjLi0EEEjT_i>
  debug(": ");
   d8be8:	f004 f886 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8bec:	492c      	ldr	r1, [pc, #176]	; (d8ca0 <_Z11readSensorsv+0x10a0>)
  debug(readingCount + "\n");
   d8bee:	4d2a      	ldr	r5, [pc, #168]	; (d8c98 <_Z11readSensorsv+0x1098>)
    }

  }
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
  debug(millis());
  debug(": ");
   d8bf0:	f003 febf 	bl	dc972 <_ZN5Print5printEPKc>
  debug(readingCount + "\n");
   d8bf4:	f004 f880 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8bf8:	6821      	ldr	r1, [r4, #0]
   d8bfa:	4429      	add	r1, r5
   d8bfc:	f003 feb9 	bl	dc972 <_ZN5Print5printEPKc>
  debug("\n");
   d8c00:	f004 f87a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8c04:	4629      	mov	r1, r5
   d8c06:	f003 feb4 	bl	dc972 <_ZN5Print5printEPKc>
  readingCount++;
   d8c0a:	6823      	ldr	r3, [r4, #0]

void readSensors()
{
  debug("start readSensors\n");
#ifdef KURTDEBUG
  String msg = "";
   d8c0c:	a803      	add	r0, sp, #12
  if (terminalDebug) Blynk.virtualWrite(V21, String(readingCount)+"\n");
  debug(millis());
  debug(": ");
  debug(readingCount + "\n");
  debug("\n");
  readingCount++;
   d8c0e:	3301      	adds	r3, #1
   d8c10:	6023      	str	r3, [r4, #0]

void readSensors()
{
  debug("start readSensors\n");
#ifdef KURTDEBUG
  String msg = "";
   d8c12:	f004 faaf 	bl	dd174 <_ZN6StringD1Ev>
  debug(millis());
  debug(": ");
  debug(readingCount + "\n");
  debug("\n");
  readingCount++;
}
   d8c16:	b029      	add	sp, #164	; 0xa4
   d8c18:	ecbd 8b02 	vpop	{d8}
   d8c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c20:	f004 fc86 	bl	dd530 <_Z19__fetch_global_Wirev>
    bool sps30OK = false;
    uint32_t sps30start = millis();

    while (!sps30OK && millis()-sps30start<8000)
    {
      if (!Sensor.begin())
   d8c24:	4601      	mov	r1, r0
   d8c26:	481f      	ldr	r0, [pc, #124]	; (d8ca4 <_Z11readSensorsv+0x10a4>)
   d8c28:	f001 f888 	bl	d9d3c <_ZN5SPS305beginER7TwoWire>
   d8c2c:	2800      	cmp	r0, #0
   d8c2e:	f47f aa8d 	bne.w	d814c <_Z11readSensorsv+0x54c>
      {
        debug("Unable to read SPS30 - trying again\n");
   d8c32:	f004 f861 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8c36:	491c      	ldr	r1, [pc, #112]	; (d8ca8 <_Z11readSensorsv+0x10a8>)
   d8c38:	f003 fe9b 	bl	dc972 <_ZN5Print5printEPKc>
        delay(1000);
   d8c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8c40:	f003 fe6e 	bl	dc920 <delay>
   d8c44:	f7ff ba79 	b.w	d813a <_Z11readSensorsv+0x53a>
   d8c48:	f001 ffb4 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8c4c:	1b40      	subs	r0, r0, r5
   d8c4e:	42b0      	cmp	r0, r6
   d8c50:	f63f aa8c 	bhi.w	d816c <_Z11readSensorsv+0x56c>
    {
      delay(100);
   d8c54:	2064      	movs	r0, #100	; 0x64
   d8c56:	f003 fe63 	bl	dc920 <delay>
      checkAccel();
   d8c5a:	f7fe fdb5 	bl	d77c8 <_Z10checkAccelv>
      System.reset();    
    }

    // Delay 8 seconds or until the SPS30 is ready
    unsigned long waitForSPS30 = millis();
    while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d8c5e:	f7ff ba7f 	b.w	d8160 <_Z11readSensorsv+0x560>
  connectWithoutWaiting();
  // Sync time if needed
  if (Time.isValid()&&!timeSynced)
  {
    rtc.setUnixTime(Time.now());
    if (abs(Time.now()-rtc.rtcNow())<10)
   d8c62:	4812      	ldr	r0, [pc, #72]	; (d8cac <_Z11readSensorsv+0x10ac>)
   d8c64:	f001 fde4 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d8c68:	4605      	mov	r5, r0
   d8c6a:	f003 fe16 	bl	dc89a <_ZN9TimeClass3nowEv>
   d8c6e:	f7ff baa4 	b.w	d81ba <_Z11readSensorsv+0x5ba>
      }
    }
    
    if (!sps30OK)
    {
      debug("Unable to read SPS30 - resetting device\n");
   d8c72:	f004 f841 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8c76:	490e      	ldr	r1, [pc, #56]	; (d8cb0 <_Z11readSensorsv+0x10b0>)
   d8c78:	f003 fe7b 	bl	dc972 <_ZN5Print5printEPKc>
      delay(1000);
   d8c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8c80:	f003 fe4e 	bl	dc920 <delay>
      System.reset();    
   d8c84:	f004 f916 	bl	dceb4 <_ZN11SystemClass5resetEv>
   d8c88:	f7ff ba65 	b.w	d8156 <_Z11readSensorsv+0x556>
   d8c8c:	000e806b 	.word	0x000e806b
   d8c90:	2003db39 	.word	0x2003db39
   d8c94:	2003d814 	.word	0x2003d814
   d8c98:	000e7962 	.word	0x000e7962
   d8c9c:	2003e338 	.word	0x2003e338
   d8ca0:	000e8a1b 	.word	0x000e8a1b
   d8ca4:	2003e0b0 	.word	0x2003e0b0
   d8ca8:	000e7efd 	.word	0x000e7efd
   d8cac:	2003e028 	.word	0x2003e028
   d8cb0:	000e8096 	.word	0x000e8096

000d8cb4 <setup>:
      Particle.publish("gmtOffset", "America/New_York", PRIVATE);  
  }
}

void setup()
{
   d8cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8cb8:	b08e      	sub	sp, #56	; 0x38
   d8cba:	f001 ff7b 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  CycleOnTime = millis();
   d8cbe:	4b8b      	ldr	r3, [pc, #556]	; (d8eec <setup+0x238>)
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
  delay(100);

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d8cc0:	4c8b      	ldr	r4, [pc, #556]	; (d8ef0 <setup+0x23c>)
  }
}

void setup()
{
  CycleOnTime = millis();
   d8cc2:	6018      	str	r0, [r3, #0]
  Wire.setSpeed(20000);
   d8cc4:	f004 fc34 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8cc8:	f644 6120 	movw	r1, #20000	; 0x4e20
   d8ccc:	f002 ff16 	bl	dbafc <_ZN7TwoWire8setSpeedEm>
  // Debug console
  pinMode(D8, INPUT_PULLDOWN);
   d8cd0:	2103      	movs	r1, #3
   d8cd2:	2008      	movs	r0, #8
   d8cd4:	f004 fc88 	bl	dd5e8 <pinMode>
  Serial.begin(115200);
   d8cd8:	f002 fff6 	bl	dbcc8 <_Z16_fetch_usbserialv>
   d8cdc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d8ce0:	f002 ffe6 	bl	dbcb0 <_ZN9USBSerial5beginEl>
  // Used to monitor debug without USB connection
  Serial1.begin(115200);
   d8ce4:	f004 f808 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8ce8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d8cec:	f003 fffe 	bl	dccec <_ZN11USARTSerial5beginEm>
  delay(100);
   d8cf0:	2064      	movs	r0, #100	; 0x64
   d8cf2:	f003 fe15 	bl	dc920 <delay>

  // Buzzer connected to D7
  pinMode(buzzer, OUTPUT);
   d8cf6:	2101      	movs	r1, #1
   d8cf8:	8820      	ldrh	r0, [r4, #0]
   d8cfa:	f004 fc75 	bl	dd5e8 <pinMode>
  digitalWrite(buzzer, LOW);
   d8cfe:	2100      	movs	r1, #0
   d8d00:	8820      	ldrh	r0, [r4, #0]
   d8d02:	f004 fc82 	bl	dd60a <digitalWrite>

  Wire.begin();
   d8d06:	f004 fc13 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d0a:	f002 fefb 	bl	dbb04 <_ZN7TwoWire5beginEv>
  delay(100);
   d8d0e:	2064      	movs	r0, #100	; 0x64
   d8d10:	f003 fe06 	bl	dc920 <delay>
  debug("Start Setup() function\n");
   d8d14:	f003 fff0 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8d18:	4976      	ldr	r1, [pc, #472]	; (d8ef4 <setup+0x240>)
   d8d1a:	f003 fe2a 	bl	dc972 <_ZN5Print5printEPKc>
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  byte expandererror, expanderaddress;

  expanderaddress = 0x20; // MCP23017 address
  Wire.beginTransmission(expanderaddress);
   d8d1e:	f004 fc07 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d22:	2120      	movs	r1, #32
   d8d24:	f002 ff29 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
  expandererror = Wire.endTransmission();
   d8d28:	f004 fc02 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d2c:	f002 ff30 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!expandererror==0)
   d8d30:	2800      	cmp	r0, #0
   d8d32:	d041      	beq.n	d8db8 <setup+0x104>
  {
    Wire.reset();
   d8d34:	f004 fbfc 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d38:	f002 ff31 	bl	dbb9e <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(expanderaddress);
   d8d3c:	f004 fbf8 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d40:	2120      	movs	r1, #32
   d8d42:	f002 ff1a 	bl	dbb7a <_ZN7TwoWire17beginTransmissionEh>
    expandererror = Wire.endTransmission();
   d8d46:	f004 fbf3 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8d4a:	f002 ff21 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
  }

  // Blink LED and reset if there is an error
  if (!expandererror == 0)
   d8d4e:	b398      	cbz	r0, d8db8 <setup+0x104>
  {
    debug("Unable to read Expander - resetting in 9 seconds\n");
   d8d50:	f003 ffd2 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8d54:	4968      	ldr	r1, [pc, #416]	; (d8ef8 <setup+0x244>)
   d8d56:	f003 fe0c 	bl	dc972 <_ZN5Print5printEPKc>
   d8d5a:	4b68      	ldr	r3, [pc, #416]	; (d8efc <setup+0x248>)
    Particle.publish("Error","Unable to read Expander - resetting in 9 seconds",PRIVATE);
   d8d5c:	4a68      	ldr	r2, [pc, #416]	; (d8f00 <setup+0x24c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d8d5e:	781b      	ldrb	r3, [r3, #0]
   d8d60:	4968      	ldr	r1, [pc, #416]	; (d8f04 <setup+0x250>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d8d62:	2500      	movs	r5, #0
   d8d64:	a80a      	add	r0, sp, #40	; 0x28
   d8d66:	f88d 5000 	strb.w	r5, [sp]
   d8d6a:	f7fc fcab 	bl	d56c4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.30.constprop.38>
   d8d6e:	a80b      	add	r0, sp, #44	; 0x2c
   d8d70:	f7fd f89e 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    blinkRed.setActive(true);
   d8d74:	2101      	movs	r1, #1
   d8d76:	4864      	ldr	r0, [pc, #400]	; (d8f08 <setup+0x254>)
   d8d78:	f7fc fd08 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d8d7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8d80:	f003 fdce 	bl	dc920 <delay>
    blinkRed.setActive(false);
   d8d84:	4629      	mov	r1, r5
   d8d86:	4860      	ldr	r0, [pc, #384]	; (d8f08 <setup+0x254>)
   d8d88:	f7fc fd00 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
    blinkYellow.setActive(true);
   d8d8c:	2101      	movs	r1, #1
   d8d8e:	485f      	ldr	r0, [pc, #380]	; (d8f0c <setup+0x258>)
   d8d90:	f7fc fcfc 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d8d94:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8d98:	f003 fdc2 	bl	dc920 <delay>
    blinkYellow.setActive(false);
   d8d9c:	4629      	mov	r1, r5
   d8d9e:	485b      	ldr	r0, [pc, #364]	; (d8f0c <setup+0x258>)
   d8da0:	f7fc fcf4 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
    blinkRed.setActive(true);
   d8da4:	2101      	movs	r1, #1
   d8da6:	4858      	ldr	r0, [pc, #352]	; (d8f08 <setup+0x254>)
   d8da8:	f7fc fcf0 	bl	d578c <_ZN8particle9LEDStatus9setActiveEb>
    delay(3000);
   d8dac:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8db0:	f003 fdb6 	bl	dc920 <delay>
    System.reset();
   d8db4:	f004 f87e 	bl	dceb4 <_ZN11SystemClass5resetEv>
  }
  // END CHECK
  //////////////////////////////////////////////////////////

  // Need this to switch on the power
  power.begin();
   d8db8:	4855      	ldr	r0, [pc, #340]	; (d8f10 <setup+0x25c>)
   d8dba:	f001 fa7d 	bl	da2b8 <_ZN12IoTNodePower5beginEv>
  power.setPowerON(EXT3V3,true);
   d8dbe:	2201      	movs	r2, #1
   d8dc0:	2102      	movs	r1, #2
   d8dc2:	4853      	ldr	r0, [pc, #332]	; (d8f10 <setup+0x25c>)
   d8dc4:	f001 fb22 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
  power.setPowerON(EXT5V,true);
   d8dc8:	2201      	movs	r2, #1
   d8dca:	2103      	movs	r1, #3
   d8dcc:	4850      	ldr	r0, [pc, #320]	; (d8f10 <setup+0x25c>)
   d8dce:	f001 fb1d 	bl	da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>
  // Allow time to settle
  delay(100);
   d8dd2:	2064      	movs	r0, #100	; 0x64
   d8dd4:	f003 fda4 	bl	dc920 <delay>

  uint32_t d1=0;
   d8dd8:	aa0e      	add	r2, sp, #56	; 0x38
   d8dda:	2100      	movs	r1, #0
   d8ddc:	f842 1d2c 	str.w	r1, [r2, #-44]!
	fram.readData(0, (uint8_t *)&d1, sizeof(d1));
   d8de0:	2304      	movs	r3, #4
   d8de2:	484c      	ldr	r0, [pc, #304]	; (d8f14 <setup+0x260>)
   d8de4:	f001 fb2e 	bl	da444 <_ZN10MB85RC256V8readDataEjPhj>
	Serial1.printlnf("d1=%u", d1);
   d8de8:	f003 ff86 	bl	dccf8 <_Z22__fetch_global_Serial1v>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d8dec:	9b03      	ldr	r3, [sp, #12]
   d8dee:	4a4a      	ldr	r2, [pc, #296]	; (d8f18 <setup+0x264>)
   d8df0:	2101      	movs	r1, #1
   d8df2:	f003 fec8 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>

  SleepResult result = System.sleepResult();
   d8df6:	a804      	add	r0, sp, #16
   d8df8:	4948      	ldr	r1, [pc, #288]	; (d8f1c <setup+0x268>)
   d8dfa:	f7fc fc7b 	bl	d56f4 <_ZN11SystemClass11sleepResultEv>
  switch (result.reason()) {
   d8dfe:	a804      	add	r0, sp, #16
   d8e00:	f004 f8d2 	bl	dcfa8 <_ZNK11SleepResult6reasonEv>
   d8e04:	2803      	cmp	r0, #3
   d8e06:	d814      	bhi.n	d8e32 <setup+0x17e>
   d8e08:	e8df f000 	tbb	[pc, r0]
   d8e0c:	0e0a0602 	.word	0x0e0a0602
    case WAKEUP_REASON_NONE: {
      debug("Device did not wake up from Particle sleep\n");
   d8e10:	f003 ff72 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e14:	4942      	ldr	r1, [pc, #264]	; (d8f20 <setup+0x26c>)
   d8e16:	e00a      	b.n	d8e2e <setup+0x17a>
      break;
    }
    case WAKEUP_REASON_PIN: {
      debug("Device was woken up by a pin\n");
   d8e18:	f003 ff6e 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e1c:	4941      	ldr	r1, [pc, #260]	; (d8f24 <setup+0x270>)
   d8e1e:	e006      	b.n	d8e2e <setup+0x17a>
      break;
    }
    case WAKEUP_REASON_RTC: {
      debug("Device was woken up by the Particle RTC (after a specified number of seconds)\n");
   d8e20:	f003 ff6a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e24:	4940      	ldr	r1, [pc, #256]	; (d8f28 <setup+0x274>)
   d8e26:	e002      	b.n	d8e2e <setup+0x17a>
      break;
    }
    case WAKEUP_REASON_PIN_OR_RTC: {
      debug("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)\n");
   d8e28:	f003 ff66 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e2c:	493f      	ldr	r1, [pc, #252]	; (d8f2c <setup+0x278>)
   d8e2e:	f003 fda0 	bl	dc972 <_ZN5Print5printEPKc>
      break;
    }
  }
  debug("Checking i2c devices...\n");
   d8e32:	f003 ff61 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e36:	493e      	ldr	r1, [pc, #248]	; (d8f30 <setup+0x27c>)
   d8e38:	f8df 8100 	ldr.w	r8, [pc, #256]	; d8f3c <setup+0x288>

  for (size_t x=0; x<i2cLength;++x)
  {
    debug(i2cNames[x]);
    debug(": ");
    debug(i2cExists[x] + "\n");
   d8e3c:	4f3d      	ldr	r7, [pc, #244]	; (d8f34 <setup+0x280>)
    case WAKEUP_REASON_PIN_OR_RTC: {
      debug("Device was woken up by either a pin or the Particle RTC (after a specified number of seconds)\n");
      break;
    }
  }
  debug("Checking i2c devices...\n");
   d8e3e:	f003 fd98 	bl	dc972 <_ZN5Print5printEPKc>

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d8e42:	4b3c      	ldr	r3, [pc, #240]	; (d8f34 <setup+0x280>)
   d8e44:	493c      	ldr	r1, [pc, #240]	; (d8f38 <setup+0x284>)
   d8e46:	483d      	ldr	r0, [pc, #244]	; (d8f3c <setup+0x288>)
   d8e48:	2207      	movs	r2, #7
   d8e4a:	f7fc fd13 	bl	d5874 <_Z15checkI2CDevicesP6StringPhjPb>

  for (size_t x=0; x<i2cLength;++x)
   d8e4e:	2600      	movs	r6, #0
      break;
    }
  }
  debug("Checking i2c devices...\n");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);
   d8e50:	4605      	mov	r5, r0

  for (size_t x=0; x<i2cLength;++x)
  {
    debug(i2cNames[x]);
   d8e52:	f003 ff51 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e56:	0133      	lsls	r3, r6, #4
   d8e58:	f853 1008 	ldr.w	r1, [r3, r8]
   d8e5c:	f003 fd89 	bl	dc972 <_ZN5Print5printEPKc>
    debug(": ");
   d8e60:	f003 ff4a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e64:	4936      	ldr	r1, [pc, #216]	; (d8f40 <setup+0x28c>)
   d8e66:	f003 fd84 	bl	dc972 <_ZN5Print5printEPKc>
    debug(i2cExists[x] + "\n");
   d8e6a:	f003 ff45 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e6e:	5df3      	ldrb	r3, [r6, r7]
   d8e70:	4934      	ldr	r1, [pc, #208]	; (d8f44 <setup+0x290>)
  }
  debug("Checking i2c devices...\n");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d8e72:	3601      	adds	r6, #1
  {
    debug(i2cNames[x]);
    debug(": ");
    debug(i2cExists[x] + "\n");
   d8e74:	4419      	add	r1, r3
   d8e76:	f003 fd7c 	bl	dc972 <_ZN5Print5printEPKc>
  }
  debug("Checking i2c devices...\n");

  bool i2cOK = checkI2CDevices(i2cNames, i2cAddr, i2cLength, i2cExists);

  for (size_t x=0; x<i2cLength;++x)
   d8e7a:	2e07      	cmp	r6, #7
   d8e7c:	d1e9      	bne.n	d8e52 <setup+0x19e>
  {
    debug(i2cNames[x]);
    debug(": ");
    debug(i2cExists[x] + "\n");
  }
  if (!i2cOK)
   d8e7e:	2d00      	cmp	r5, #0
   d8e80:	d168      	bne.n	d8f54 <setup+0x2a0>
  {
    StateString = "ERR";
   d8e82:	4931      	ldr	r1, [pc, #196]	; (d8f48 <setup+0x294>)
   d8e84:	4831      	ldr	r0, [pc, #196]	; (d8f4c <setup+0x298>)
   d8e86:	f004 fa0e 	bl	dd2a6 <_ZN6StringaSEPKc>
    debug("I2C Issue\n");
   d8e8a:	f003 ff35 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8e8e:	4930      	ldr	r1, [pc, #192]	; (d8f50 <setup+0x29c>)
   d8e90:	f003 fd6f 	bl	dc972 <_ZN5Print5printEPKc>
    RGB.control(true);
   d8e94:	2001      	movs	r0, #1
   d8e96:	f003 fb52 	bl	dc53e <_ZN8RGBClass7controlEb>
    // the following sets the RGB LED to red
    RGB.color(255, 0, 0);
   d8e9a:	462a      	mov	r2, r5
   d8e9c:	4629      	mov	r1, r5
   d8e9e:	20ff      	movs	r0, #255	; 0xff
   d8ea0:	f003 fb5d 	bl	dc55e <_ZN8RGBClass5colorEiii>
    delay(3000);
   d8ea4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d8ea8:	f003 fd3a 	bl	dc920 <delay>
    // resume normal operation
    RGB.control(false);    
   d8eac:	4628      	mov	r0, r5
   d8eae:	f003 fb46 	bl	dc53e <_ZN8RGBClass7controlEb>
#ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d8eb2:	2101      	movs	r1, #1
   d8eb4:	8820      	ldrh	r0, [r4, #0]
   d8eb6:	f004 fba8 	bl	dd60a <digitalWrite>
    delay(100);
   d8eba:	2064      	movs	r0, #100	; 0x64
   d8ebc:	f003 fd30 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d8ec0:	4629      	mov	r1, r5
   d8ec2:	8820      	ldrh	r0, [r4, #0]
   d8ec4:	f004 fba1 	bl	dd60a <digitalWrite>
#endif
    //Generate 9 pulses on SCL to tell slave to release the bus 
    Wire.reset();     
   d8ec8:	f004 fb32 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8ecc:	f002 fe67 	bl	dbb9e <_ZN7TwoWire5resetEv>
    if (!Wire.isEnabled()) {
   d8ed0:	f004 fb2e 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8ed4:	f002 fe5f 	bl	dbb96 <_ZN7TwoWire9isEnabledEv>
   d8ed8:	b918      	cbnz	r0, d8ee2 <setup+0x22e>
      Wire.begin();
   d8eda:	f004 fb29 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8ede:	f002 fe11 	bl	dbb04 <_ZN7TwoWire5beginEv>
    }
    Wire.end();
   d8ee2:	f004 fb25 	bl	dd530 <_Z19__fetch_global_Wirev>
   d8ee6:	f002 fe13 	bl	dbb10 <_ZN7TwoWire3endEv>
   d8eea:	e063      	b.n	d8fb4 <setup+0x300>
   d8eec:	2003e02c 	.word	0x2003e02c
   d8ef0:	2003d678 	.word	0x2003d678
   d8ef4:	000e80bf 	.word	0x000e80bf
   d8ef8:	000e7e3d 	.word	0x000e7e3d
   d8efc:	2003d818 	.word	0x2003d818
   d8f00:	000e7e6f 	.word	0x000e7e6f
   d8f04:	000e7ea0 	.word	0x000e7ea0
   d8f08:	2003d7c8 	.word	0x2003d7c8
   d8f0c:	2003d7f4 	.word	0x2003d7f4
   d8f10:	2003dfa4 	.word	0x2003dfa4
   d8f14:	2003d7e8 	.word	0x2003d7e8
   d8f18:	000e7ea6 	.word	0x000e7ea6
   d8f1c:	2003e5f4 	.word	0x2003e5f4
   d8f20:	000e80d7 	.word	0x000e80d7
   d8f24:	000e8103 	.word	0x000e8103
   d8f28:	000e8121 	.word	0x000e8121
   d8f2c:	000e8170 	.word	0x000e8170
   d8f30:	000e7eac 	.word	0x000e7eac
   d8f34:	2003e008 	.word	0x2003e008
   d8f38:	2003d67c 	.word	0x2003d67c
   d8f3c:	2003d81c 	.word	0x2003d81c
   d8f40:	000e8a1b 	.word	0x000e8a1b
   d8f44:	000e7962 	.word	0x000e7962
   d8f48:	000e7ec5 	.word	0x000e7ec5
   d8f4c:	2003d8cc 	.word	0x2003d8cc
   d8f50:	000e7ec9 	.word	0x000e7ec9
  }
  else
  {
    StateString = "RDY";
   d8f54:	4979      	ldr	r1, [pc, #484]	; (d913c <setup+0x488>)
   d8f56:	487a      	ldr	r0, [pc, #488]	; (d9140 <setup+0x48c>)
   d8f58:	f004 f9a5 	bl	dd2a6 <_ZN6StringaSEPKc>
    debug("I2C OK\n");
   d8f5c:	f003 fecc 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8f60:	4978      	ldr	r1, [pc, #480]	; (d9144 <setup+0x490>)
   d8f62:	f003 fd06 	bl	dc972 <_ZN5Print5printEPKc>
    #ifdef BEEP
    digitalWrite(buzzer, HIGH);
   d8f66:	2101      	movs	r1, #1
   d8f68:	8820      	ldrh	r0, [r4, #0]
   d8f6a:	f004 fb4e 	bl	dd60a <digitalWrite>
    delay(5);
   d8f6e:	2005      	movs	r0, #5
   d8f70:	f003 fcd6 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d8f74:	2100      	movs	r1, #0
   d8f76:	8820      	ldrh	r0, [r4, #0]
   d8f78:	f004 fb47 	bl	dd60a <digitalWrite>
    delay(200);  
   d8f7c:	20c8      	movs	r0, #200	; 0xc8
   d8f7e:	f003 fccf 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d8f82:	2101      	movs	r1, #1
   d8f84:	8820      	ldrh	r0, [r4, #0]
   d8f86:	f004 fb40 	bl	dd60a <digitalWrite>
    delay(5);
   d8f8a:	2005      	movs	r0, #5
   d8f8c:	f003 fcc8 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d8f90:	2100      	movs	r1, #0
   d8f92:	8820      	ldrh	r0, [r4, #0]
   d8f94:	f004 fb39 	bl	dd60a <digitalWrite>
    delay(200);  
   d8f98:	20c8      	movs	r0, #200	; 0xc8
   d8f9a:	f003 fcc1 	bl	dc920 <delay>
    digitalWrite(buzzer, HIGH);
   d8f9e:	2101      	movs	r1, #1
   d8fa0:	8820      	ldrh	r0, [r4, #0]
   d8fa2:	f004 fb32 	bl	dd60a <digitalWrite>
    delay(5);
   d8fa6:	2005      	movs	r0, #5
   d8fa8:	f003 fcba 	bl	dc920 <delay>
    digitalWrite(buzzer, LOW);
   d8fac:	2100      	movs	r1, #0
   d8fae:	8820      	ldrh	r0, [r4, #0]
   d8fb0:	f004 fb2b 	bl	dd60a <digitalWrite>
    #endif
  }
  delay(200);
   d8fb4:	20c8      	movs	r0, #200	; 0xc8
   d8fb6:	f003 fcb3 	bl	dc920 <delay>
  if (!i2cOK)
   d8fba:	b90d      	cbnz	r5, d8fc0 <setup+0x30c>
  {
    System.reset();
   d8fbc:	f003 ff7a 	bl	dceb4 <_ZN11SystemClass5resetEv>
  }

  long int clockTime = rtc.rtcNow();
   d8fc0:	4861      	ldr	r0, [pc, #388]	; (d9148 <setup+0x494>)
  debug("Before\n");
  debug(clockTime);
  debug(": \n");
  debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d8fc2:	4d62      	ldr	r5, [pc, #392]	; (d914c <setup+0x498>)
  if (!i2cOK)
  {
    System.reset();
  }

  long int clockTime = rtc.rtcNow();
   d8fc4:	f001 fc34 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d8fc8:	4604      	mov	r4, r0
  debug("Before\n");
   d8fca:	f003 fe95 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8fce:	4960      	ldr	r1, [pc, #384]	; (d9150 <setup+0x49c>)
   d8fd0:	f003 fccf 	bl	dc972 <_ZN5Print5printEPKc>
  debug(clockTime);
   d8fd4:	f003 fe90 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8fd8:	220a      	movs	r2, #10
   d8fda:	4621      	mov	r1, r4
   d8fdc:	f7fd f8fc 	bl	d61d8 <_ZN5Print5printIiLi0EEEjT_i>
  debug(": \n");
   d8fe0:	f003 fe8a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8fe4:	495b      	ldr	r1, [pc, #364]	; (d9154 <setup+0x4a0>)
   d8fe6:	f003 fcc4 	bl	dc972 <_ZN5Print5printEPKc>
  debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d8fea:	f003 fe85 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d8fee:	682b      	ldr	r3, [r5, #0]
   d8ff0:	4959      	ldr	r1, [pc, #356]	; (d9158 <setup+0x4a4>)
   d8ff2:	4622      	mov	r2, r4
   d8ff4:	4606      	mov	r6, r0
   d8ff6:	a806      	add	r0, sp, #24
   d8ff8:	f003 fbfc 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8ffc:	a906      	add	r1, sp, #24
   d8ffe:	a80a      	add	r0, sp, #40	; 0x28
   d9000:	f004 f93e 	bl	dd280 <_ZN6StringC1ERKS_>
   d9004:	4955      	ldr	r1, [pc, #340]	; (d915c <setup+0x4a8>)
   d9006:	a80a      	add	r0, sp, #40	; 0x28
   d9008:	f004 f9dd 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d900c:	6801      	ldr	r1, [r0, #0]
   d900e:	4630      	mov	r0, r6
   d9010:	f003 fcaf 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d9014:	a80a      	add	r0, sp, #40	; 0x28
   d9016:	f004 f8ad 	bl	dd174 <_ZN6StringD1Ev>
   d901a:	a806      	add	r0, sp, #24
   d901c:	f004 f8aa 	bl	dd174 <_ZN6StringD1Ev>
  if (clockTime<946684800||clockTime>4102444799)
   d9020:	4b4f      	ldr	r3, [pc, #316]	; (d9160 <setup+0x4ac>)
   d9022:	429c      	cmp	r4, r3
   d9024:	dc32      	bgt.n	d908c <setup+0x3d8>
  {
    // 2019-01-01T00:00:00+00:00 in ISO 8601
    // Actual time is not important for rtc reset but needs to be a positive unix time
    rtc.setUnixTime(1262304000);
   d9026:	494f      	ldr	r1, [pc, #316]	; (d9164 <setup+0x4b0>)
   d9028:	4847      	ldr	r0, [pc, #284]	; (d9148 <setup+0x494>)
   d902a:	f001 fbb8 	bl	da79e <_ZN8MCP7941x11setUnixTimeEm>
    long int clockTime = rtc.rtcNow();
   d902e:	4846      	ldr	r0, [pc, #280]	; (d9148 <setup+0x494>)
   d9030:	f001 fbfe 	bl	da830 <_ZN8MCP7941x6rtcNowEv>
   d9034:	4604      	mov	r4, r0
    debug("After\n");
   d9036:	f003 fe5f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d903a:	494b      	ldr	r1, [pc, #300]	; (d9168 <setup+0x4b4>)
   d903c:	f003 fc99 	bl	dc972 <_ZN5Print5printEPKc>
    debug(clockTime);
   d9040:	f003 fe5a 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d9044:	220a      	movs	r2, #10
   d9046:	4621      	mov	r1, r4
   d9048:	f7fd f8c6 	bl	d61d8 <_ZN5Print5printIiLi0EEEjT_i>
    debug(": \n");
   d904c:	f003 fe54 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d9050:	4940      	ldr	r1, [pc, #256]	; (d9154 <setup+0x4a0>)
   d9052:	f003 fc8e 	bl	dc972 <_ZN5Print5printEPKc>
    debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
   d9056:	f003 fe4f 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d905a:	682b      	ldr	r3, [r5, #0]
   d905c:	493e      	ldr	r1, [pc, #248]	; (d9158 <setup+0x4a4>)
   d905e:	4622      	mov	r2, r4
   d9060:	4606      	mov	r6, r0
   d9062:	a806      	add	r0, sp, #24
   d9064:	f003 fbc6 	bl	dc7f4 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d9068:	a906      	add	r1, sp, #24
   d906a:	a80a      	add	r0, sp, #40	; 0x28
   d906c:	f004 f908 	bl	dd280 <_ZN6StringC1ERKS_>
   d9070:	493a      	ldr	r1, [pc, #232]	; (d915c <setup+0x4a8>)
   d9072:	a80a      	add	r0, sp, #40	; 0x28
   d9074:	f004 f9a7 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d9078:	6801      	ldr	r1, [r0, #0]
   d907a:	4630      	mov	r0, r6
   d907c:	f003 fc79 	bl	dc972 <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d9080:	a80a      	add	r0, sp, #40	; 0x28
   d9082:	f004 f877 	bl	dd174 <_ZN6StringD1Ev>
   d9086:	a806      	add	r0, sp, #24
   d9088:	f004 f874 	bl	dd174 <_ZN6StringD1Ev>
   d908c:	f004 fa50 	bl	dd530 <_Z19__fetch_global_Wirev>

  // Load state
  loadState();

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d9090:	4c36      	ldr	r4, [pc, #216]	; (d916c <setup+0x4b8>)
   d9092:	4d37      	ldr	r5, [pc, #220]	; (d9170 <setup+0x4bc>)
    debug("After\n");
    debug(clockTime);
    debug(": \n");
    debug(String(Time.format(clockTime, TIME_FORMAT_ISO8601_FULL)) + "\n");
  }
  Sensor.begin();
   d9094:	4601      	mov	r1, r0
   d9096:	4837      	ldr	r0, [pc, #220]	; (d9174 <setup+0x4c0>)
   d9098:	f000 fe50 	bl	d9d3c <_ZN5SPS305beginER7TwoWire>
  adxl.powerOn();
   d909c:	4836      	ldr	r0, [pc, #216]	; (d9178 <setup+0x4c4>)
   d909e:	f000 ffcd 	bl	da03c <_ZN7ADXL3457powerOnEv>

  // Load state
  loadState();
   d90a2:	f7fc fc67 	bl	d5974 <_Z9loadStatev>

  //Check for first time the firmware runs
  if (state.firstRunCheck != firstRunValue)
   d90a6:	6822      	ldr	r2, [r4, #0]
   d90a8:	682b      	ldr	r3, [r5, #0]
   d90aa:	429a      	cmp	r2, r3
   d90ac:	d072      	beq.n	d9194 <setup+0x4e0>
  {
    // Then this is the first time running so set defaults
    debugf("state.firstRunCheck = %b firstRunValue = %d\n",  state.firstRunCheck, firstRunValue);
   d90ae:	f003 fe23 	bl	dccf8 <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d90b2:	682b      	ldr	r3, [r5, #0]
   d90b4:	9300      	str	r3, [sp, #0]
   d90b6:	4a31      	ldr	r2, [pc, #196]	; (d917c <setup+0x4c8>)
   d90b8:	6823      	ldr	r3, [r4, #0]
   d90ba:	2100      	movs	r1, #0
   d90bc:	f003 fd63 	bl	dcb86 <_ZN5Print11printf_implEbPKcz>
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
   d90c0:	2318      	movs	r3, #24
   d90c2:	6063      	str	r3, [r4, #4]
    state.secondsBetweenReadings = 5;
   d90c4:	2305      	movs	r3, #5
   d90c6:	60a3      	str	r3, [r4, #8]
    state.zeroOff = -156;
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d90c8:	492d      	ldr	r1, [pc, #180]	; (d9180 <setup+0x4cc>)
    // Then this is the first time running so set defaults
    debugf("state.firstRunCheck = %b firstRunValue = %d\n",  state.firstRunCheck, firstRunValue);
    // state.firstRunCheck = firstRunValue; Move this to the initializeAppWidget() function
    state.numberOfReadings = 24;
    state.secondsBetweenReadings = 5;
    state.zeroOff = -156;
   d90ca:	4b2e      	ldr	r3, [pc, #184]	; (d9184 <setup+0x4d0>)
   d90cc:	60e3      	str	r3, [r4, #12]
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
   d90ce:	f104 0010 	add.w	r0, r4, #16
   d90d2:	f00b fa03 	bl	e44dc <strcpy>
    strcpy(state.email,"bistany@comcast.net");
   d90d6:	492c      	ldr	r1, [pc, #176]	; (d9188 <setup+0x4d4>)
   d90d8:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d90dc:	f00b f9fe 	bl	e44dc <strcpy>
    strcpy(state.batEmail,"bistany@comcast.net");
   d90e0:	4929      	ldr	r1, [pc, #164]	; (d9188 <setup+0x4d4>)
   d90e2:	f504 7004 	add.w	r0, r4, #528	; 0x210
   d90e6:	f00b f9f9 	bl	e44dc <strcpy>
    strcpy(state.tamperEmail,"bistany@comcast.net");
   d90ea:	4927      	ldr	r1, [pc, #156]	; (d9188 <setup+0x4d4>)
   d90ec:	f504 7044 	add.w	r0, r4, #784	; 0x310
   d90f0:	f00b f9f4 	bl	e44dc <strcpy>
    state.batThreshold = 20.0;
   d90f4:	f504 6382 	add.w	r3, r4, #1040	; 0x410
   d90f8:	4a24      	ldr	r2, [pc, #144]	; (d918c <setup+0x4d8>)
   d90fa:	601a      	str	r2, [r3, #0]
    state.lastAlert=false;
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d90fc:	2264      	movs	r2, #100	; 0x64
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d90fe:	2300      	movs	r3, #0
    state.batLastAlert=false;
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
   d9100:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
    state.buzzerTamper=true;  // Buzzer Tamper
   d9104:	2201      	movs	r2, #1
    strcpy(state.expression,"pm1>300||pm2>300||pm4>300||pm10>300&&conc>100||temp>150");
    strcpy(state.email,"bistany@comcast.net");
    strcpy(state.batEmail,"bistany@comcast.net");
    strcpy(state.tamperEmail,"bistany@comcast.net");
    state.batThreshold = 20.0;
    state.lastAlert=false;
   d9106:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
    state.batLastAlert=false;
   d910a:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
    state.ActivityThreshold=100; // Which is set to 1 in Blynk
    state.buzzerTamper=true;  // Buzzer Tamper
   d910e:	f884 2417 	strb.w	r2, [r4, #1047]	; 0x417
    state.buzzerVapor=false; // Vapor Buzzer
   d9112:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    state.notifyVapor=true; // Vapor Notify
   d9116:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    state.notifyTamper=true; // Tamper Notify
   d911a:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
    state.notifyBattery=true; // Battery Notify
   d911e:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    state.OnTime=0;
   d9122:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    // firstRun = true;
    state.deviceZone=0; //America/New_York
   d9126:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    // Save state
    // saveState(); // Move this to the initializeAppWidget() function
    debug("First run.\n");
   d912a:	f003 fde5 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d912e:	4918      	ldr	r1, [pc, #96]	; (d9190 <setup+0x4dc>)
   d9130:	f003 fc1f 	bl	dc972 <_ZN5Print5printEPKc>
    // Force a connect here for the first time the device runs
    connect();
   d9134:	f7fe fbdc 	bl	d78f0 <_Z7connectv>
   d9138:	e031      	b.n	d919e <setup+0x4ea>
   d913a:	bf00      	nop
   d913c:	000e7ed4 	.word	0x000e7ed4
   d9140:	2003d8cc 	.word	0x2003d8cc
   d9144:	000e7ed8 	.word	0x000e7ed8
   d9148:	2003e028 	.word	0x2003e028
   d914c:	2003d6b8 	.word	0x2003d6b8
   d9150:	000e7ee0 	.word	0x000e7ee0
   d9154:	000e7dab 	.word	0x000e7dab
   d9158:	2003e5c8 	.word	0x2003e5c8
   d915c:	000e7962 	.word	0x000e7962
   d9160:	386d437f 	.word	0x386d437f
   d9164:	4b3d3b00 	.word	0x4b3d3b00
   d9168:	000e7ee8 	.word	0x000e7ee8
   d916c:	2003db78 	.word	0x2003db78
   d9170:	2003d688 	.word	0x2003d688
   d9174:	2003e0b0 	.word	0x2003e0b0
   d9178:	2003db40 	.word	0x2003db40
   d917c:	000e81cf 	.word	0x000e81cf
   d9180:	000e81fc 	.word	0x000e81fc
   d9184:	c31c0000 	.word	0xc31c0000
   d9188:	000e8234 	.word	0x000e8234
   d918c:	41a00000 	.word	0x41a00000
   d9190:	000e8248 	.word	0x000e8248
  }
  else
  {
    debug("Not first run.\n");
   d9194:	f003 fdb0 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d9198:	4997      	ldr	r1, [pc, #604]	; (d93f8 <setup+0x744>)
   d919a:	f003 fbea 	bl	dc972 <_ZN5Print5printEPKc>
  }


/////////////
// Setup ADXL345
  debug("ADXL345 Setup");
   d919e:	f003 fdab 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d91a2:	4996      	ldr	r1, [pc, #600]	; (d93fc <setup+0x748>)
   d91a4:	f003 fbe5 	bl	dc972 <_ZN5Print5printEPKc>
  debug("\n");
   d91a8:	f003 fda6 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d91ac:	4994      	ldr	r1, [pc, #592]	; (d9400 <setup+0x74c>)
   d91ae:	f003 fbe0 	bl	dc972 <_ZN5Print5printEPKc>
  // // *Temp Debug* Set the pin mode to output, so you may control it.
  // pinMode(ledPin, OUTPUT);
  // Power on the ADXL345
  adxl.powerOn();
   d91b2:	4894      	ldr	r0, [pc, #592]	; (d9404 <setup+0x750>)
   d91b4:	f000 ff42 	bl	da03c <_ZN7ADXL3457powerOnEv>

// Configure Chip
  adxl.setRangeSetting(4);            // Give the range settings
   d91b8:	2104      	movs	r1, #4
   d91ba:	4892      	ldr	r0, [pc, #584]	; (d9404 <setup+0x750>)
   d91bc:	f000 ff98 	bl	da0f0 <_ZN7ADXL34515setRangeSettingEi>
                                      // Accepted values are 2g, 4g, 8g or 16g
                                      // Higher Values = Wider Measurement Range
                                      // Lower Values = Greater Sensitivity

   // No TAP or Freefall detection only Activity
  adxl.setActivityXYZ(1, 1, 1);       // Set to activate movement detection in the axes "adxl.setActivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d91c0:	2301      	movs	r3, #1
   d91c2:	461a      	mov	r2, r3
   d91c4:	4619      	mov	r1, r3
   d91c6:	488f      	ldr	r0, [pc, #572]	; (d9404 <setup+0x750>)
   d91c8:	f000 ffea 	bl	da1a0 <_ZN7ADXL34514setActivityXYZEbbb>
  adxl.setActivityThreshold(state.ActivityThreshold);      // 62.5mg per increment   // Set activity   // Inactivity thresholds (0-255)
   d91cc:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d91d0:	488c      	ldr	r0, [pc, #560]	; (d9404 <setup+0x750>)
   d91d2:	f000 ff4d 	bl	da070 <_ZN7ADXL34520setActivityThresholdEi>
 
  adxl.setInactivityXYZ(1, 1, 1);     // Set to detect inactivity in all the axes "adxl.setInactivityXYZ(X, Y, Z);" (1 == ON, 0 == OFF)
   d91d6:	2301      	movs	r3, #1
   d91d8:	461a      	mov	r2, r3
   d91da:	4619      	mov	r1, r3
   d91dc:	4889      	ldr	r0, [pc, #548]	; (d9404 <setup+0x750>)
   d91de:	f000 fffe 	bl	da1de <_ZN7ADXL34516setInactivityXYZEbbb>
  adxl.setInactivityThreshold(state.ActivityThreshold);    // 62.5mg per increment   // Set inactivity // Inactivity thresholds (0-255)
   d91e2:	f8d4 141c 	ldr.w	r1, [r4, #1052]	; 0x41c
   d91e6:	4887      	ldr	r0, [pc, #540]	; (d9404 <setup+0x750>)
   d91e8:	f000 ff48 	bl	da07c <_ZN7ADXL34522setInactivityThresholdEi>
  adxl.setTimeInactivity(10);         // How many seconds of no activity is inactive?
   d91ec:	210a      	movs	r1, #10
   d91ee:	4885      	ldr	r0, [pc, #532]	; (d9404 <setup+0x750>)
   d91f0:	f000 ff4a 	bl	da088 <_ZN7ADXL34517setTimeInactivityEi>

     // Setting all interupts to take place on INT1 pin
  adxl.setImportantInterruptMapping(0, 0, 0, 1, 1);     // Sets "adxl.setEveryInterruptMapping(single tap, double tap, free fall, activity, inactivity);" 
   d91f4:	2501      	movs	r5, #1
   d91f6:	2300      	movs	r3, #0
   d91f8:	461a      	mov	r2, r3
   d91fa:	4619      	mov	r1, r3
   d91fc:	9501      	str	r5, [sp, #4]
   d91fe:	9500      	str	r5, [sp, #0]
   d9200:	4880      	ldr	r0, [pc, #512]	; (d9404 <setup+0x750>)
   d9202:	f001 f801 	bl	da208 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
   d9206:	4629      	mov	r1, r5
   d9208:	487e      	ldr	r0, [pc, #504]	; (d9404 <setup+0x750>)
   d920a:	f001 f84c 	bl	da2a6 <_ZN7ADXL34513InactivityINTEb>
  adxl.ActivityINT(1);
   d920e:	4629      	mov	r1, r5

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d9210:	4d7d      	ldr	r5, [pc, #500]	; (d9408 <setup+0x754>)
                                                        // Accepts only 1 or 2 values for pins INT1 and INT2. This chooses the pin on the ADXL345 to use for Interrupts.
      
 // Turn on Interrupts for Activity(1 == ON, 0 == OFF)
 // These are both set on to start and then toggled
  adxl.InactivityINT(1);
  adxl.ActivityINT(1);
   d9212:	487c      	ldr	r0, [pc, #496]	; (d9404 <setup+0x750>)
   d9214:	f001 f841 	bl	da29a <_ZN7ADXL34511ActivityINTEb>

  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
   d9218:	8828      	ldrh	r0, [r5, #0]
   d921a:	2100      	movs	r1, #0
   d921c:	f004 f9e4 	bl	dd5e8 <pinMode>
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);
   d9220:	2200      	movs	r2, #0
   d9222:	f04f 33ff 	mov.w	r3, #4294967295
   d9226:	8828      	ldrh	r0, [r5, #0]
   d9228:	4978      	ldr	r1, [pc, #480]	; (d940c <setup+0x758>)
   d922a:	9200      	str	r2, [sp, #0]
   d922c:	f003 f9ba 	bl	dc5a4 <_Z15attachInterrupttPFvvE13InterruptModeah>

/////////////
  debug("\n");
   d9230:	f003 fd62 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d9234:	4972      	ldr	r1, [pc, #456]	; (d9400 <setup+0x74c>)
  String msg = "";
  msg = msg + "\n" + "Setting Up\n" +
    iSoftwareVersion + "\n" +
    "Vsup for all sensors = " + ULP::_Vsup + "\n" +
    "Vcc for all sensors = " + ULP::_Vcc + "\n" +
    "Vref for sensor 1 = " + sensor1._Vref + "\n";
   d9236:	4d76      	ldr	r5, [pc, #472]	; (d9410 <setup+0x75c>)
  // Need to set int1 pin as an input before calling atttachInterrupt
  pinMode(interruptPin,INPUT);
  attachInterrupt(interruptPin, ADXL_ISR, CHANGE);

/////////////
  debug("\n");
   d9238:	f003 fb9b 	bl	dc972 <_ZN5Print5printEPKc>


/////////////
  String msg = "";
   d923c:	4975      	ldr	r1, [pc, #468]	; (d9414 <setup+0x760>)
   d923e:	a806      	add	r0, sp, #24
   d9240:	f003 ffdf 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d9244:	a906      	add	r1, sp, #24
   d9246:	a80a      	add	r0, sp, #40	; 0x28
   d9248:	f004 f81a 	bl	dd280 <_ZN6StringC1ERKS_>
  msg = msg + "\n" + "Setting Up\n" +
   d924c:	496c      	ldr	r1, [pc, #432]	; (d9400 <setup+0x74c>)
   d924e:	a80a      	add	r0, sp, #40	; 0x28
   d9250:	f004 f8b9 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d9254:	4970      	ldr	r1, [pc, #448]	; (d9418 <setup+0x764>)
   d9256:	f004 f8b6 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    iSoftwareVersion + "\n" +
   d925a:	4970      	ldr	r1, [pc, #448]	; (d941c <setup+0x768>)
   d925c:	f004 f8a7 	bl	dd3ae <_ZplRK15StringSumHelperRK6String>
   d9260:	4967      	ldr	r1, [pc, #412]	; (d9400 <setup+0x74c>)
   d9262:	f004 f8b0 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Vsup for all sensors = " + ULP::_Vsup + "\n" +
   d9266:	496e      	ldr	r1, [pc, #440]	; (d9420 <setup+0x76c>)
   d9268:	f004 f8ad 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d926c:	4b6d      	ldr	r3, [pc, #436]	; (d9424 <setup+0x770>)
   d926e:	ed93 0a00 	vldr	s0, [r3]
   d9272:	f004 f8c4 	bl	dd3fe <_ZplRK15StringSumHelperf>
   d9276:	4962      	ldr	r1, [pc, #392]	; (d9400 <setup+0x74c>)
   d9278:	f004 f8a5 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Vcc for all sensors = " + ULP::_Vcc + "\n" +
   d927c:	496a      	ldr	r1, [pc, #424]	; (d9428 <setup+0x774>)
   d927e:	f004 f8a2 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d9282:	4b6a      	ldr	r3, [pc, #424]	; (d942c <setup+0x778>)
   d9284:	ed93 0a00 	vldr	s0, [r3]
   d9288:	f004 f8b9 	bl	dd3fe <_ZplRK15StringSumHelperf>
   d928c:	495c      	ldr	r1, [pc, #368]	; (d9400 <setup+0x74c>)
   d928e:	f004 f89a 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
    "Vref for sensor 1 = " + sensor1._Vref + "\n";
   d9292:	4967      	ldr	r1, [pc, #412]	; (d9430 <setup+0x77c>)
   d9294:	f004 f897 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d9298:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
   d929c:	f004 f8af 	bl	dd3fe <_ZplRK15StringSumHelperf>
   d92a0:	4957      	ldr	r1, [pc, #348]	; (d9400 <setup+0x74c>)
   d92a2:	f004 f890 	bl	dd3c6 <_ZplRK15StringSumHelperPKc>
   d92a6:	4601      	mov	r1, r0
   d92a8:	a806      	add	r0, sp, #24
   d92aa:	f003 ffda 	bl	dd262 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d92ae:	a80a      	add	r0, sp, #40	; 0x28
   d92b0:	f003 ff60 	bl	dd174 <_ZN6StringD1Ev>
  debug(msg);
   d92b4:	f003 fd20 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d92b8:	9906      	ldr	r1, [sp, #24]
   d92ba:	f003 fb5a 	bl	dc972 <_ZN5Print5printEPKc>
  //int bias = 1; //alternatively bias=-1; for negative bias.
  //sensor1.setVref(R1, R2, R3, bias); //will set the new Vref for custom sensor voltage ladder. bias is necessary to set the correct arrangement
  //sensor1._Gain = 49900; //resistor R6

  // This is not calibrated.
  sensor1._Voff = state.zeroOff;
   d92be:	68e3      	ldr	r3, [r4, #12]
   d92c0:	626b      	str	r3, [r5, #36]	; 0x24
  debug(sensor1._Voff);
   d92c2:	f003 fd19 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d92c6:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
   d92ca:	2102      	movs	r1, #2
   d92cc:	f003 fc4c 	bl	dcb68 <_ZN5Print5printEfi>

  //  Vref is not necessary if zero() is called for each sensor. If you already know the sensor zero you can comment this out, and set the zero with zero1 = measured mV.
  //   debug("Vzero = ");
  //   debug(Vzero1 = sensor1.zero());   //.zero() sets and returns the baseline voltage at current temperature with only clean air prese + "\n"nt
  //   Particle.publish("Vzero", String(Vzero1));
  debugf("Tzero = %f\n", sensor1._Tz);
   d92d0:	f003 fd12 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d92d4:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
   d92d8:	4956      	ldr	r1, [pc, #344]	; (d9434 <setup+0x780>)
   d92da:	f7fc fe64 	bl	d5fa6 <_ZN5Print6printfIIfEEEjPKcDpT_>
  //sensor1.setXSpan();                                
  //Must have previously zeroed in clean air, returns new span factor.
  //When calibrating the temperature use "LOW"/"HIGH" for the temperature range ie .setTSpan(40.2, "HIGH") where T is the current high temperature
  //sensor1.setTSpan((71 - 32.0) * 5.0 / 9.0, "LOW");

  debug("Finished Setting Up\n");
   d92de:	f003 fd0b 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d92e2:	4955      	ldr	r1, [pc, #340]	; (d9438 <setup+0x784>)
   d92e4:	f003 fb45 	bl	dc972 <_ZN5Print5printEPKc>
  debug("T1, mV1, C1\n");
   d92e8:	f003 fd06 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d92ec:	4953      	ldr	r1, [pc, #332]	; (d943c <setup+0x788>)
   d92ee:	f003 fb40 	bl	dc972 <_ZN5Print5printEPKc>
  ////////////

  delay(300);  
   d92f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d92f6:	f003 fb13 	bl	dc920 <delay>
   d92fa:	f001 fc5b 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
   d92fe:	4605      	mov	r5, r0
   d9300:	f001 fc58 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>

  // SPS30 checks
  bool sps30OK = false;
  uint32_t sps30start = millis();

  while (!sps30OK && millis()-sps30start<8000)
   d9304:	1b40      	subs	r0, r0, r5
   d9306:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   d930a:	d268      	bcs.n	d93de <setup+0x72a>
   d930c:	f004 f910 	bl	dd530 <_Z19__fetch_global_Wirev>
  {
    if (!Sensor.begin())
   d9310:	4601      	mov	r1, r0
   d9312:	484b      	ldr	r0, [pc, #300]	; (d9440 <setup+0x78c>)
   d9314:	f000 fd12 	bl	d9d3c <_ZN5SPS305beginER7TwoWire>
   d9318:	b948      	cbnz	r0, d932e <setup+0x67a>
    {
      debug("Unable to read SPS30 - trying again\n");
   d931a:	f003 fced 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d931e:	4949      	ldr	r1, [pc, #292]	; (d9444 <setup+0x790>)
   d9320:	f003 fb27 	bl	dc972 <_ZN5Print5printEPKc>
      delay(1000);
   d9324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d9328:	f003 fafa 	bl	dc920 <delay>
   d932c:	e7e8      	b.n	d9300 <setup+0x64c>
    }
    else
    {
      debug("Read SPS30\n");
   d932e:	f003 fce3 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d9332:	4945      	ldr	r1, [pc, #276]	; (d9448 <setup+0x794>)
   d9334:	f003 fb1d 	bl	dc972 <_ZN5Print5printEPKc>
    delay(1000);
    System.reset();    
  }

  #ifdef Version_2
  Blynk.config(auth, "zeptosense2.blynk.cc",portBlynk);
   d9338:	4b44      	ldr	r3, [pc, #272]	; (d944c <setup+0x798>)
   d933a:	4a45      	ldr	r2, [pc, #276]	; (d9450 <setup+0x79c>)
   d933c:	881b      	ldrh	r3, [r3, #0]
   d933e:	4945      	ldr	r1, [pc, #276]	; (d9454 <setup+0x7a0>)
   d9340:	4845      	ldr	r0, [pc, #276]	; (d9458 <setup+0x7a4>)
   d9342:	f7fc ff1b 	bl	d617c <_ZN13BlynkParticle6configEPKcS1_t>
  #else
  Blynk.config(auth, "zeptosense.blynk.cc");
  #endif

  connectWithoutWaiting();
   d9346:	f7fe fb9d 	bl	d7a84 <_Z21connectWithoutWaitingv>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d934a:	2300      	movs	r3, #0
   d934c:	9301      	str	r3, [sp, #4]
   d934e:	9300      	str	r3, [sp, #0]
   d9350:	461a      	mov	r2, r3
   d9352:	4942      	ldr	r1, [pc, #264]	; (d945c <setup+0x7a8>)
   d9354:	4842      	ldr	r0, [pc, #264]	; (d9460 <setup+0x7ac>)
   d9356:	f001 fd2f 	bl	dadb8 <spark_subscribe>
  //*** Commented out for testing without particle connected ***
  // Subscribe to the gmtOffset response event
  Particle.subscribe("hook-response/gmtOffset", gmtOffsetHandler, MY_DEVICES);

  // Request the GMT offset if Particle is connected and it has not yet been received
  if (Particle.connected&&!gmtOffsetValid)
   d935a:	4b42      	ldr	r3, [pc, #264]	; (d9464 <setup+0x7b0>)
   d935c:	781b      	ldrb	r3, [r3, #0]
   d935e:	b90b      	cbnz	r3, d9364 <setup+0x6b0>
  {
    publishGMTOffsetRequest();
   d9360:	f7fc fdbc 	bl	d5edc <_Z23publishGMTOffsetRequestv>
   d9364:	f001 fc26 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d9368:	f641 76a3 	movw	r6, #8099	; 0x1fa3
   d936c:	4605      	mov	r5, r0
   d936e:	4834      	ldr	r0, [pc, #208]	; (d9440 <setup+0x78c>)
   d9370:	f000 fb51 	bl	d9a16 <_ZN5SPS3013dataAvailableEv>
   d9374:	b950      	cbnz	r0, d938c <setup+0x6d8>
   d9376:	f001 fc1d 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
   d937a:	1b40      	subs	r0, r0, r5
   d937c:	42b0      	cmp	r0, r6
   d937e:	d805      	bhi.n	d938c <setup+0x6d8>
  {
    delay(100);
   d9380:	2064      	movs	r0, #100	; 0x64
   d9382:	f003 facd 	bl	dc920 <delay>
    checkAccel();
   d9386:	f7fe fa1f 	bl	d77c8 <_Z10checkAccelv>
  }
  //*** Commented out for testing without particle connected ***
 
  // Delay 8 seconds or until the SPS30 is ready
  unsigned long waitForSPS30 = millis();
  while ((!Sensor.dataAvailable()) && (millis()-waitForSPS30<8100))
   d938a:	e7f0      	b.n	d936e <setup+0x6ba>
  {
    delay(100);
    checkAccel();
  }

  sensorTimer.setInterval((long)state.secondsBetweenReadings*1000, readSensors); //  Here you set interval and which function to call
   d938c:	68a3      	ldr	r3, [r4, #8]
   d938e:	4a36      	ldr	r2, [pc, #216]	; (d9468 <setup+0x7b4>)
   d9390:	4836      	ldr	r0, [pc, #216]	; (d946c <setup+0x7b8>)
   d9392:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d9396:	4359      	muls	r1, r3
   d9398:	f000 fa89 	bl	d98ae <_ZN10BlynkTimer11setIntervalEmPFvvE>
  sensorTimer.run(); // BlynkTimer is working...
   d939c:	4833      	ldr	r0, [pc, #204]	; (d946c <setup+0x7b8>)
   d939e:	f000 faa8 	bl	d98f2 <_ZN10BlynkTimer3runEv>
  // There is a delay in startup until the accel can be read
  // This can be optimized to a certain extent by software but the best way is to
  // use ADXL345 Int2 as well as Int1 on new adapter board to differentiate
  // between ativity and no activity interrupts
  // without having to perform I2C calls that are blocked during connection
  accelTimer.setInterval(111,checkAccel); // timer to check accel
   d93a2:	4a33      	ldr	r2, [pc, #204]	; (d9470 <setup+0x7bc>)
   d93a4:	4833      	ldr	r0, [pc, #204]	; (d9474 <setup+0x7c0>)
   d93a6:	216f      	movs	r1, #111	; 0x6f
   d93a8:	f000 fa81 	bl	d98ae <_ZN10BlynkTimer11setIntervalEmPFvvE>
  accelTimer.run();
   d93ac:	4831      	ldr	r0, [pc, #196]	; (d9474 <setup+0x7c0>)
   d93ae:	f000 faa0 	bl	d98f2 <_ZN10BlynkTimer3runEv>

  debug("Setup complete\n");
   d93b2:	f003 fca1 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d93b6:	4930      	ldr	r1, [pc, #192]	; (d9478 <setup+0x7c4>)
   d93b8:	f003 fadb 	bl	dc972 <_ZN5Print5printEPKc>
  StateString = "RDY";
   d93bc:	492f      	ldr	r1, [pc, #188]	; (d947c <setup+0x7c8>)
   d93be:	4830      	ldr	r0, [pc, #192]	; (d9480 <setup+0x7cc>)
   d93c0:	f003 ff71 	bl	dd2a6 <_ZN6StringaSEPKc>
  readSensors(); 
   d93c4:	f7fe fc1c 	bl	d7c00 <_Z11readSensorsv>
  debug("End Setup() function\n");
   d93c8:	f003 fc96 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d93cc:	492d      	ldr	r1, [pc, #180]	; (d9484 <setup+0x7d0>)
   d93ce:	f003 fad0 	bl	dc972 <_ZN5Print5printEPKc>
/////////////
  debug("\n");


/////////////
  String msg = "";
   d93d2:	a806      	add	r0, sp, #24
   d93d4:	f003 fece 	bl	dd174 <_ZN6StringD1Ev>

  debug("Setup complete\n");
  StateString = "RDY";
  readSensors(); 
  debug("End Setup() function\n");
}
   d93d8:	b00e      	add	sp, #56	; 0x38
   d93da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  if (!sps30OK)
  {
    debug("Unable to read SPS30 - resetting device\n");
   d93de:	f003 fc8b 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   d93e2:	4929      	ldr	r1, [pc, #164]	; (d9488 <setup+0x7d4>)
   d93e4:	f003 fac5 	bl	dc972 <_ZN5Print5printEPKc>
    delay(1000);
   d93e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d93ec:	f003 fa98 	bl	dc920 <delay>
    System.reset();    
   d93f0:	f003 fd60 	bl	dceb4 <_ZN11SystemClass5resetEv>
   d93f4:	e7a0      	b.n	d9338 <setup+0x684>
   d93f6:	bf00      	nop
   d93f8:	000e8254 	.word	0x000e8254
   d93fc:	000e7eef 	.word	0x000e7eef
   d9400:	000e7962 	.word	0x000e7962
   d9404:	2003db40 	.word	0x2003db40
   d9408:	2003d68c 	.word	0x2003d68c
   d940c:	000d5659 	.word	0x000d5659
   d9410:	2003dfc8 	.word	0x2003dfc8
   d9414:	000e7963 	.word	0x000e7963
   d9418:	000e82bd 	.word	0x000e82bd
   d941c:	2003e0e4 	.word	0x2003e0e4
   d9420:	000e8264 	.word	0x000e8264
   d9424:	2003d660 	.word	0x2003d660
   d9428:	000e827c 	.word	0x000e827c
   d942c:	2003d65c 	.word	0x2003d65c
   d9430:	000e8293 	.word	0x000e8293
   d9434:	000e82a8 	.word	0x000e82a8
   d9438:	000e82b4 	.word	0x000e82b4
   d943c:	000e82c9 	.word	0x000e82c9
   d9440:	2003e0b0 	.word	0x2003e0b0
   d9444:	000e7efd 	.word	0x000e7efd
   d9448:	000e7f22 	.word	0x000e7f22
   d944c:	2003d684 	.word	0x2003d684
   d9450:	000e7d12 	.word	0x000e7d12
   d9454:	2003d690 	.word	0x2003d690
   d9458:	2003e338 	.word	0x2003e338
   d945c:	000d5665 	.word	0x000d5665
   d9460:	000e82d6 	.word	0x000e82d6
   d9464:	2003e060 	.word	0x2003e060
   d9468:	000d7c01 	.word	0x000d7c01
   d946c:	2003d8f0 	.word	0x2003d8f0
   d9470:	000d77c9 	.word	0x000d77c9
   d9474:	2003e0f4 	.word	0x2003e0f4
   d9478:	000e82ee 	.word	0x000e82ee
   d947c:	000e7ed4 	.word	0x000e7ed4
   d9480:	2003d8cc 	.word	0x2003d8cc
   d9484:	000e82fe 	.word	0x000e82fe
   d9488:	000e8096 	.word	0x000e8096

000d948c <_GLOBAL__sub_I_CycleOnTime>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d948c:	4b98      	ldr	r3, [pc, #608]	; (d96f0 <_GLOBAL__sub_I_CycleOnTime+0x264>)
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d948e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9492:	2500      	movs	r5, #0
   d9494:	601d      	str	r5, [r3, #0]
   d9496:	4b97      	ldr	r3, [pc, #604]	; (d96f4 <_GLOBAL__sub_I_CycleOnTime+0x268>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d9498:	4e97      	ldr	r6, [pc, #604]	; (d96f8 <_GLOBAL__sub_I_CycleOnTime+0x26c>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d949a:	4c98      	ldr	r4, [pc, #608]	; (d96fc <_GLOBAL__sub_I_CycleOnTime+0x270>)

// SYSTEM_MODE(SEMI_AUTOMATIC);
// SYSTEM_THREAD(ENABLED);

// EXAMPLE - defining and using a LED status
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d949c:	f8df 82ec 	ldr.w	r8, [pc, #748]	; d978c <_GLOBAL__sub_I_CycleOnTime+0x300>
   d94a0:	2701      	movs	r7, #1
   d94a2:	601f      	str	r7, [r3, #0]
   d94a4:	4b96      	ldr	r3, [pc, #600]	; (d9700 <_GLOBAL__sub_I_CycleOnTime+0x274>)
   d94a6:	701f      	strb	r7, [r3, #0]
   d94a8:	f001 fbc4 	bl	dac34 <HAL_Pin_Map>
   d94ac:	4630      	mov	r0, r6
   d94ae:	f002 f90b 	bl	db6c8 <_ZN9TCPClientC1Ev>
   d94b2:	f106 001c 	add.w	r0, r6, #28
   d94b6:	f002 fc67 	bl	dbd88 <_ZN9IPAddressC1Ev>
   d94ba:	4622      	mov	r2, r4
   d94bc:	4991      	ldr	r1, [pc, #580]	; (d9704 <_GLOBAL__sub_I_CycleOnTime+0x278>)
   d94be:	6375      	str	r5, [r6, #52]	; 0x34
   d94c0:	4630      	mov	r0, r6
   d94c2:	8735      	strh	r5, [r6, #56]	; 0x38
   d94c4:	f004 f90a 	bl	dd6dc <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d94c8:	4b8f      	ldr	r3, [pc, #572]	; (d9708 <_GLOBAL__sub_I_CycleOnTime+0x27c>)
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d94ca:	462a      	mov	r2, r5
   d94cc:	601e      	str	r6, [r3, #0]
   d94ce:	605d      	str	r5, [r3, #4]
   d94d0:	609d      	str	r5, [r3, #8]
   d94d2:	60dd      	str	r5, [r3, #12]
   d94d4:	611d      	str	r5, [r3, #16]
   d94d6:	615d      	str	r5, [r3, #20]
   d94d8:	831d      	strh	r5, [r3, #24]
   d94da:	835d      	strh	r5, [r3, #26]
   d94dc:	771d      	strb	r5, [r3, #28]
   d94de:	775d      	strb	r5, [r3, #29]
   d94e0:	2114      	movs	r1, #20
   d94e2:	2002      	movs	r0, #2
   d94e4:	f001 fd08 	bl	daef8 <led_pattern_period>
   d94e8:	4e88      	ldr	r6, [pc, #544]	; (d970c <_GLOBAL__sub_I_CycleOnTime+0x280>)
   d94ea:	9701      	str	r7, [sp, #4]
   d94ec:	f04f 091e 	mov.w	r9, #30
   d94f0:	4603      	mov	r3, r0
   d94f2:	f8cd 9000 	str.w	r9, [sp]
   d94f6:	2202      	movs	r2, #2
   d94f8:	4985      	ldr	r1, [pc, #532]	; (d9710 <_GLOBAL__sub_I_CycleOnTime+0x284>)
   d94fa:	4630      	mov	r0, r6
   d94fc:	f003 fd76 	bl	dcfec <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   d9500:	4622      	mov	r2, r4
   d9502:	4641      	mov	r1, r8
   d9504:	4630      	mov	r0, r6
   d9506:	f004 f8e9 	bl	dd6dc <__aeabi_atexit>
   d950a:	462a      	mov	r2, r5
   d950c:	2114      	movs	r1, #20
   d950e:	2002      	movs	r0, #2
   d9510:	f001 fcf2 	bl	daef8 <led_pattern_period>
   d9514:	4e7f      	ldr	r6, [pc, #508]	; (d9714 <_GLOBAL__sub_I_CycleOnTime+0x288>)
   d9516:	9701      	str	r7, [sp, #4]
   d9518:	4603      	mov	r3, r0
   d951a:	f8cd 9000 	str.w	r9, [sp]
   d951e:	2202      	movs	r2, #2
   d9520:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d9524:	4630      	mov	r0, r6
   d9526:	f003 fd61 	bl	dcfec <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d952a:	4622      	mov	r2, r4
   d952c:	4641      	mov	r1, r8
   d952e:	4630      	mov	r0, r6
   d9530:	f004 f8d4 	bl	dd6dc <__aeabi_atexit>

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d9534:	4878      	ldr	r0, [pc, #480]	; (d9718 <_GLOBAL__sub_I_CycleOnTime+0x28c>)

MB85RC256V fram(Wire, 0);
   d9536:	4e79      	ldr	r6, [pc, #484]	; (d971c <_GLOBAL__sub_I_CycleOnTime+0x290>)
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d9538:	4f79      	ldr	r7, [pc, #484]	; (d9720 <_GLOBAL__sub_I_CycleOnTime+0x294>)
   d953a:	f8df 8254 	ldr.w	r8, [pc, #596]	; d9790 <_GLOBAL__sub_I_CycleOnTime+0x304>
LEDStatus blinkYellow(RGB_COLOR_YELLOW, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

//********** ADXL345 COMMUNICATION ***********
ADXL345 adxl = ADXL345();             // USE FOR ACCEL COMMUNICATION in I2C mode
   d953e:	f000 fcbb 	bl	d9eb8 <_ZN7ADXL345C1Ev>

MB85RC256V fram(Wire, 0);
   d9542:	f003 fff5 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9546:	462a      	mov	r2, r5
   d9548:	4601      	mov	r1, r0
   d954a:	4630      	mov	r0, r6
   d954c:	f000 ff72 	bl	da434 <_ZN10MB85RC256VC1ER7TwoWirei>
   d9550:	4622      	mov	r2, r4
   d9552:	4974      	ldr	r1, [pc, #464]	; (d9724 <_GLOBAL__sub_I_CycleOnTime+0x298>)
   d9554:	4630      	mov	r0, r6
   d9556:	f004 f8c1 	bl	dd6dc <__aeabi_atexit>

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d955a:	4873      	ldr	r0, [pc, #460]	; (d9728 <_GLOBAL__sub_I_CycleOnTime+0x29c>)
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
SPS30 Sensor;

FuelGauge fuel;
   d955c:	4e73      	ldr	r6, [pc, #460]	; (d972c <_GLOBAL__sub_I_CycleOnTime+0x2a0>)

int firstRunValue = 1967689;

// Create new instance of RTC class:
// Use to hard power cycle the device to reset I2C
MCP7941x rtc = MCP7941x();
   d955e:	f001 f80c 	bl	da57a <_ZN8MCP7941xC1Ev>
}

bool powerOn, appConnected, sensorValid = false, currentAlert = false, terminalDebug = false;
bool batCurrentAlert = false, tamperCurrentAlert = false;

IoTNodePower power;
   d9562:	4873      	ldr	r0, [pc, #460]	; (d9730 <_GLOBAL__sub_I_CycleOnTime+0x2a4>)
   d9564:	f000 fea7 	bl	da2b6 <_ZN12IoTNodePowerC1Ev>
SPS30 Sensor;
   d9568:	4872      	ldr	r0, [pc, #456]	; (d9734 <_GLOBAL__sub_I_CycleOnTime+0x2a8>)
   d956a:	f000 fa12 	bl	d9992 <_ZN5SPS30C1Ev>

FuelGauge fuel;
   d956e:	4629      	mov	r1, r5
   d9570:	4630      	mov	r0, r6
   d9572:	f002 ffc7 	bl	dc504 <_ZN9FuelGaugeC1Eb>
   d9576:	4622      	mov	r2, r4
   d9578:	496f      	ldr	r1, [pc, #444]	; (d9738 <_GLOBAL__sub_I_CycleOnTime+0x2ac>)
   d957a:	4630      	mov	r0, r6
   d957c:	f004 f8ae 	bl	dd6dc <__aeabi_atexit>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d9580:	4e6e      	ldr	r6, [pc, #440]	; (d973c <_GLOBAL__sub_I_CycleOnTime+0x2b0>)
   d9582:	4639      	mov	r1, r7
   d9584:	4640      	mov	r0, r8
   d9586:	f003 fe3c 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d958a:	4640      	mov	r0, r8
   d958c:	f8df 8204 	ldr.w	r8, [pc, #516]	; d9794 <_GLOBAL__sub_I_CycleOnTime+0x308>
   d9590:	4622      	mov	r2, r4
   d9592:	4631      	mov	r1, r6
   d9594:	f004 f8a2 	bl	dd6dc <__aeabi_atexit>
   d9598:	4639      	mov	r1, r7
   d959a:	4640      	mov	r0, r8
   d959c:	f003 fe31 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d95a0:	4640      	mov	r0, r8
   d95a2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d9798 <_GLOBAL__sub_I_CycleOnTime+0x30c>
   d95a6:	4622      	mov	r2, r4
   d95a8:	4631      	mov	r1, r6
   d95aa:	f004 f897 	bl	dd6dc <__aeabi_atexit>
   d95ae:	4639      	mov	r1, r7
   d95b0:	4640      	mov	r0, r8
   d95b2:	f003 fe26 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d95b6:	4640      	mov	r0, r8
   d95b8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d979c <_GLOBAL__sub_I_CycleOnTime+0x310>
   d95bc:	4622      	mov	r2, r4
   d95be:	4631      	mov	r1, r6
   d95c0:	f004 f88c 	bl	dd6dc <__aeabi_atexit>
   d95c4:	4639      	mov	r1, r7
   d95c6:	4640      	mov	r0, r8
   d95c8:	f003 fe1b 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d95cc:	4640      	mov	r0, r8
   d95ce:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d97a0 <_GLOBAL__sub_I_CycleOnTime+0x314>
   d95d2:	4622      	mov	r2, r4
   d95d4:	4631      	mov	r1, r6
   d95d6:	f004 f881 	bl	dd6dc <__aeabi_atexit>
   d95da:	4639      	mov	r1, r7
   d95dc:	4640      	mov	r0, r8
   d95de:	f003 fe10 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d95e2:	4640      	mov	r0, r8
   d95e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d97a4 <_GLOBAL__sub_I_CycleOnTime+0x318>
   d95e8:	4622      	mov	r2, r4
   d95ea:	4631      	mov	r1, r6
   d95ec:	f004 f876 	bl	dd6dc <__aeabi_atexit>
   d95f0:	4639      	mov	r1, r7
   d95f2:	4640      	mov	r0, r8
   d95f4:	f003 fe05 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d95f8:	4640      	mov	r0, r8
   d95fa:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d97a8 <_GLOBAL__sub_I_CycleOnTime+0x31c>
   d95fe:	4622      	mov	r2, r4
   d9600:	4631      	mov	r1, r6
   d9602:	f004 f86b 	bl	dd6dc <__aeabi_atexit>
   d9606:	4639      	mov	r1, r7
   d9608:	4640      	mov	r0, r8
   d960a:	f003 fdfa 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d960e:	4640      	mov	r0, r8
   d9610:	f8df 8198 	ldr.w	r8, [pc, #408]	; d97ac <_GLOBAL__sub_I_CycleOnTime+0x320>
   d9614:	4622      	mov	r2, r4
   d9616:	4631      	mov	r1, r6
   d9618:	f004 f860 	bl	dd6dc <__aeabi_atexit>
   d961c:	4639      	mov	r1, r7
   d961e:	4640      	mov	r0, r8
   d9620:	f003 fdef 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d9624:	4640      	mov	r0, r8
String datastring;
   d9626:	f8df 8188 	ldr.w	r8, [pc, #392]	; d97b0 <_GLOBAL__sub_I_CycleOnTime+0x324>
// Flag to check if the offset has been updated
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
   d962a:	4622      	mov	r2, r4
   d962c:	4631      	mov	r1, r6
   d962e:	f004 f855 	bl	dd6dc <__aeabi_atexit>
String datastring;
   d9632:	4639      	mov	r1, r7
   d9634:	4640      	mov	r0, r8
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d9636:	4f42      	ldr	r7, [pc, #264]	; (d9740 <_GLOBAL__sub_I_CycleOnTime+0x2b4>)
bool gmtOffsetValid = false;
// Flag to check if the time has been synced
bool timeSynced = false;

String field1,field2,field3,field4,field5,field6,field7,field8;
String datastring;
   d9638:	f003 fde3 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d963c:	4622      	mov	r2, r4
   d963e:	4631      	mov	r1, r6
   d9640:	4640      	mov	r0, r8
   d9642:	f004 f84b 	bl	dd6dc <__aeabi_atexit>
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d9646:	493f      	ldr	r1, [pc, #252]	; (d9744 <_GLOBAL__sub_I_CycleOnTime+0x2b8>)
   d9648:	4638      	mov	r0, r7
   d964a:	f003 fdda 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d964e:	4638      	mov	r0, r7
String InstallLocation = " Loc = Test Unit ";
   d9650:	4f3d      	ldr	r7, [pc, #244]	; (d9748 <_GLOBAL__sub_I_CycleOnTime+0x2bc>)
//char auth[] = "IODR4bIAgZKqMptIpYHIvpLx3L8qmLfS"; //Bathroom 2 (New)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
   d9652:	4622      	mov	r2, r4
   d9654:	4631      	mov	r1, r6
   d9656:	f004 f841 	bl	dd6dc <__aeabi_atexit>
String InstallLocation = " Loc = Test Unit ";
   d965a:	493c      	ldr	r1, [pc, #240]	; (d974c <_GLOBAL__sub_I_CycleOnTime+0x2c0>)
   d965c:	4638      	mov	r0, r7
   d965e:	f003 fdd0 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d9662:	4638      	mov	r0, r7
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d9664:	4f3a      	ldr	r7, [pc, #232]	; (d9750 <_GLOBAL__sub_I_CycleOnTime+0x2c4>)
//char auth[] = "Z8lveVS4uGA9G2iVjKZQKUEwJf5ZWClf "; //Bathroom 2 (Blynk 2 new)
// char auth[] = "2DNcMB9D3Q9IMJAHkHl0NqyCtE326uGm"; //Bathroom 3
// char auth[] = "wjKKdx0kjzS_33wY3C4CCtOJRn8Lfh3D"; //Bathroom 4
char auth[] = "pUSnK9eAbHcgOAi_v1vN1cPYUIID6Iwv"; //Bathroom 5 (Blynk 2 new)
String iSoftwareVersion = " SW Ver = 2019116 S/N = Zep2W ";
String InstallLocation = " Loc = Test Unit ";
   d9666:	4622      	mov	r2, r4
   d9668:	4631      	mov	r1, r6
   d966a:	f004 f837 	bl	dd6dc <__aeabi_atexit>
#endif
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";
   d966e:	4939      	ldr	r1, [pc, #228]	; (d9754 <_GLOBAL__sub_I_CycleOnTime+0x2c8>)
   d9670:	4638      	mov	r0, r7
   d9672:	f003 fdc6 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d9676:	4622      	mov	r2, r4
   d9678:	4631      	mov	r1, r6
   d967a:	4638      	mov	r0, r7
   d967c:	f004 f82e 	bl	dd6dc <__aeabi_atexit>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d9680:	4e35      	ldr	r6, [pc, #212]	; (d9758 <_GLOBAL__sub_I_CycleOnTime+0x2cc>)
//  char auth[] = "q4ey21hbwczzBHyRj_Z-f7EJieP491Qu"; // Sentient Things Test 2.0
 // I8213EIuNfVpyoW6dITCAy4glOI7s7Fs

String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
   d9682:	4836      	ldr	r0, [pc, #216]	; (d975c <_GLOBAL__sub_I_CycleOnTime+0x2d0>)
   d9684:	f000 f8b8 	bl	d97f8 <_ZN10BlynkTimerC1Ev>
BlynkTimer accelTimer; // Create an accelerometer Timer object
   d9688:	4835      	ldr	r0, [pc, #212]	; (d9760 <_GLOBAL__sub_I_CycleOnTime+0x2d4>)
   d968a:	f000 f8b5 	bl	d97f8 <_ZN10BlynkTimerC1Ev>
    "RTC EEPROM",
    "ADC",
    "FRAM",
    "ADXL345",
    "SPS30"
};
   d968e:	4935      	ldr	r1, [pc, #212]	; (d9764 <_GLOBAL__sub_I_CycleOnTime+0x2d8>)
   d9690:	4630      	mov	r0, r6
   d9692:	f003 fdb6 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d9696:	4934      	ldr	r1, [pc, #208]	; (d9768 <_GLOBAL__sub_I_CycleOnTime+0x2dc>)
   d9698:	f106 0010 	add.w	r0, r6, #16
   d969c:	f003 fdb1 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d96a0:	4932      	ldr	r1, [pc, #200]	; (d976c <_GLOBAL__sub_I_CycleOnTime+0x2e0>)
   d96a2:	f106 0020 	add.w	r0, r6, #32
   d96a6:	f003 fdac 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d96aa:	4931      	ldr	r1, [pc, #196]	; (d9770 <_GLOBAL__sub_I_CycleOnTime+0x2e4>)
   d96ac:	f106 0030 	add.w	r0, r6, #48	; 0x30
   d96b0:	f003 fda7 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d96b4:	492f      	ldr	r1, [pc, #188]	; (d9774 <_GLOBAL__sub_I_CycleOnTime+0x2e8>)
   d96b6:	f106 0040 	add.w	r0, r6, #64	; 0x40
   d96ba:	f003 fda2 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d96be:	492e      	ldr	r1, [pc, #184]	; (d9778 <_GLOBAL__sub_I_CycleOnTime+0x2ec>)
   d96c0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   d96c4:	f003 fd9d 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
   d96c8:	492c      	ldr	r1, [pc, #176]	; (d977c <_GLOBAL__sub_I_CycleOnTime+0x2f0>)
   d96ca:	f106 0060 	add.w	r0, r6, #96	; 0x60
   d96ce:	f003 fd98 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
String StateString = "RDY";

BlynkTimer sensorTimer; // Create a Timer object called "sensorTimer"!
BlynkTimer accelTimer; // Create an accelerometer Timer object

String i2cNames[] =
   d96d2:	4622      	mov	r2, r4
   d96d4:	492a      	ldr	r1, [pc, #168]	; (d9780 <_GLOBAL__sub_I_CycleOnTime+0x2f4>)
   d96d6:	4628      	mov	r0, r5
   d96d8:	f004 f800 	bl	dd6dc <__aeabi_atexit>

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d96dc:	ed9f 0a29 	vldr	s0, [pc, #164]	; d9784 <_GLOBAL__sub_I_CycleOnTime+0x2f8>
   d96e0:	4829      	ldr	r0, [pc, #164]	; (d9788 <_GLOBAL__sub_I_CycleOnTime+0x2fc>)
   d96e2:	220f      	movs	r2, #15
   d96e4:	2111      	movs	r1, #17
    digitalWrite(buzzer, LOW);
    delay(2000);
    deepSleep();
  }

}
   d96e6:	b003      	add	sp, #12
   d96e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

float conc1, temp1;
float TZero;
float Vzero1;

IAQ sensor1(A2, A4, Sf1);  //Sensor Types are EtOH, H2S, CO, IAQ, SO2, NO2, RESP, O3, and SPEC (custom)
   d96ec:	f7fb bf82 	b.w	d55f4 <_ZN3IAQC1Eiif>
   d96f0:	2003e024 	.word	0x2003e024
   d96f4:	2003dfc0 	.word	0x2003dfc0
   d96f8:	2003e064 	.word	0x2003e064
   d96fc:	2003d7b0 	.word	0x2003d7b0
   d9700:	2003d818 	.word	0x2003d818
   d9704:	000d5f6d 	.word	0x000d5f6d
   d9708:	2003e338 	.word	0x2003e338
   d970c:	2003d7f4 	.word	0x2003d7f4
   d9710:	00ffff00 	.word	0x00ffff00
   d9714:	2003d7c8 	.word	0x2003d7c8
   d9718:	2003db40 	.word	0x2003db40
   d971c:	2003d7e8 	.word	0x2003d7e8
   d9720:	000e7963 	.word	0x000e7963
   d9724:	000da41d 	.word	0x000da41d
   d9728:	2003e028 	.word	0x2003e028
   d972c:	2003e058 	.word	0x2003e058
   d9730:	2003dfa4 	.word	0x2003dfa4
   d9734:	2003e0b0 	.word	0x2003e0b0
   d9738:	000dc523 	.word	0x000dc523
   d973c:	000dd175 	.word	0x000dd175
   d9740:	2003e0e4 	.word	0x2003e0e4
   d9744:	000e8314 	.word	0x000e8314
   d9748:	2003e044 	.word	0x2003e044
   d974c:	000e8333 	.word	0x000e8333
   d9750:	2003d8cc 	.word	0x2003d8cc
   d9754:	000e7ed4 	.word	0x000e7ed4
   d9758:	2003d81c 	.word	0x2003d81c
   d975c:	2003d8f0 	.word	0x2003d8f0
   d9760:	2003e0f4 	.word	0x2003e0f4
   d9764:	000e8345 	.word	0x000e8345
   d9768:	000e8349 	.word	0x000e8349
   d976c:	000e834d 	.word	0x000e834d
   d9770:	000e8358 	.word	0x000e8358
   d9774:	000e835c 	.word	0x000e835c
   d9778:	000e8361 	.word	0x000e8361
   d977c:	000e8369 	.word	0x000e8369
   d9780:	000d56a5 	.word	0x000d56a5
   d9784:	4081999a 	.word	0x4081999a
   d9788:	2003dfc8 	.word	0x2003dfc8
   d978c:	000d5795 	.word	0x000d5795
   d9790:	2003e0a0 	.word	0x2003e0a0
   d9794:	2003d88c 	.word	0x2003d88c
   d9798:	2003d89c 	.word	0x2003d89c
   d979c:	2003d8ac 	.word	0x2003d8ac
   d97a0:	2003d8bc 	.word	0x2003d8bc
   d97a4:	2003e034 	.word	0x2003e034
   d97a8:	2003d8dc 	.word	0x2003d8dc
   d97ac:	2003d7b8 	.word	0x2003d7b8
   d97b0:	2003dfa8 	.word	0x2003dfa8

000d97b4 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d97b4:	4770      	bx	lr

000d97b6 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d97b6:	4770      	bx	lr

000d97b8 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d97b8:	4770      	bx	lr
	...

000d97bc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d97bc:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d97be:	bf9a      	itte	ls
   d97c0:	4b02      	ldrls	r3, [pc, #8]	; (d97cc <GetReadHandler+0x10>)
   d97c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d97c6:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d97c8:	4770      	bx	lr
   d97ca:	bf00      	nop
   d97cc:	000e858c 	.word	0x000e858c

000d97d0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d97d0:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d97d2:	bf9a      	itte	ls
   d97d4:	4b02      	ldrls	r3, [pc, #8]	; (d97e0 <GetWriteHandler+0x10>)
   d97d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d97da:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d97dc:	4770      	bx	lr
   d97de:	bf00      	nop
   d97e0:	000e838c 	.word	0x000e838c

000d97e4 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d97e4:	f001 ba26 	b.w	dac34 <HAL_Pin_Map>

000d97e8 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d97e8:	f003 b89a 	b.w	dc920 <delay>

000d97ec <_Z11BlynkMillisv>:
   d97ec:	f001 b9e2 	b.w	dabb4 <HAL_Timer_Get_Milli_Seconds>

000d97f0 <_Z12BlynkFreeRamv>:

#ifdef _BLYNK_USE_DEFAULT_FREE_RAM
    size_t BlynkFreeRam()
    {
        return 0;
    }
   d97f0:	2000      	movs	r0, #0
   d97f2:	4770      	bx	lr

000d97f4 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d97f4:	f001 ba1e 	b.w	dac34 <HAL_Pin_Map>

000d97f8 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d97f8:	f04f 33ff 	mov.w	r3, #4294967295
   d97fc:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d9800:	4770      	bx	lr

000d9802 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d9802:	b570      	push	{r4, r5, r6, lr}
   d9804:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9806:	f7ff fff1 	bl	d97ec <_Z11BlynkMillisv>
   d980a:	2400      	movs	r4, #0
   d980c:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d980e:	1928      	adds	r0, r5, r4
   d9810:	2224      	movs	r2, #36	; 0x24
   d9812:	2100      	movs	r1, #0
   d9814:	f00a fbd9 	bl	e3fca <memset>
        timer[i].prev_millis = current_millis;
   d9818:	512e      	str	r6, [r5, r4]
   d981a:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   d981c:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   d9820:	d1f5      	bne.n	d980e <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   d9822:	2300      	movs	r3, #0
   d9824:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   d9828:	bd70      	pop	{r4, r5, r6, pc}

000d982a <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d982a:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d982e:	2b0f      	cmp	r3, #15
   d9830:	dc08      	bgt.n	d9844 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   d9832:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   d9834:	2224      	movs	r2, #36	; 0x24
   d9836:	fb02 0103 	mla	r1, r2, r3, r0
   d983a:	6849      	ldr	r1, [r1, #4]
   d983c:	b129      	cbz	r1, d984a <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d983e:	3301      	adds	r3, #1
   d9840:	2b10      	cmp	r3, #16
   d9842:	d1f8      	bne.n	d9836 <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   d9844:	f04f 30ff 	mov.w	r0, #4294967295
   d9848:	4770      	bx	lr
   d984a:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   d984c:	4770      	bx	lr

000d984e <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d984e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9852:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d9854:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d9858:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d985a:	4605      	mov	r5, r0
   d985c:	4689      	mov	r9, r1
   d985e:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   d9860:	da01      	bge.n	d9866 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d9862:	f7ff ffce 	bl	d9802 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d9866:	4628      	mov	r0, r5
   d9868:	f7ff ffdf 	bl	d982a <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d986c:	1e04      	subs	r4, r0, #0
   d986e:	db1a      	blt.n	d98a6 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   d9870:	b1cf      	cbz	r7, d98a6 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   d9872:	2624      	movs	r6, #36	; 0x24
   d9874:	4366      	muls	r6, r4
   d9876:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d9878:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d987c:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   d987e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d9880:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   d9882:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   d9884:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   d9888:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   d988a:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   d988e:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d9890:	f7ff ffac 	bl	d97ec <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   d9894:	51a8      	str	r0, [r5, r6]

    numTimers++;
   d9896:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   d989a:	3301      	adds	r3, #1
   d989c:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   d98a0:	4620      	mov	r0, r4
   d98a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   d98a6:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   d98aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d98ae <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d98ae:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d98b0:	2300      	movs	r3, #0
   d98b2:	9301      	str	r3, [sp, #4]
   d98b4:	9300      	str	r3, [sp, #0]
   d98b6:	f7ff ffca 	bl	d984e <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d98ba:	b003      	add	sp, #12
   d98bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d98c0 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d98c0:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   d98c2:	b538      	push	{r3, r4, r5, lr}
   d98c4:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d98c6:	d813      	bhi.n	d98f0 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d98c8:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d98cc:	b183      	cbz	r3, d98f0 <_ZN10BlynkTimer11deleteTimerEj+0x30>
   d98ce:	2224      	movs	r2, #36	; 0x24
   d98d0:	fb02 f501 	mul.w	r5, r2, r1
   d98d4:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d98d6:	6843      	ldr	r3, [r0, #4]
   d98d8:	b153      	cbz	r3, d98f0 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d98da:	2100      	movs	r1, #0
   d98dc:	f00a fb75 	bl	e3fca <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d98e0:	f7ff ff84 	bl	d97ec <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   d98e4:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d98e6:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d98ea:	3b01      	subs	r3, #1
   d98ec:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   d98f0:	bd38      	pop	{r3, r4, r5, pc}

000d98f2 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   d98f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d98f6:	4605      	mov	r5, r0
   d98f8:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d98fc:	f7ff ff76 	bl	d97ec <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9900:	2601      	movs	r6, #1
   d9902:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d9904:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d9908:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d990c:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d990e:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d9912:	b1e2      	cbz	r2, d994e <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d9914:	f853 8c04 	ldr.w	r8, [r3, #-4]
   d9918:	68dc      	ldr	r4, [r3, #12]
   d991a:	ebc8 0200 	rsb	r2, r8, r0
   d991e:	42a2      	cmp	r2, r4
   d9920:	d315      	bcc.n	d994e <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d9922:	fbb2 f1f4 	udiv	r1, r2, r4
   d9926:	fb04 8201 	mla	r2, r4, r1, r8
   d992a:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   d992e:	7e1a      	ldrb	r2, [r3, #24]
   d9930:	b16a      	cbz	r2, d994e <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d9932:	6919      	ldr	r1, [r3, #16]
   d9934:	b909      	cbnz	r1, d993a <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9936:	61de      	str	r6, [r3, #28]
   d9938:	e009      	b.n	d994e <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d993a:	695a      	ldr	r2, [r3, #20]
   d993c:	4291      	cmp	r1, r2
   d993e:	d906      	bls.n	d994e <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   d9940:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d9942:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d9944:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   d9946:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d9948:	bf98      	it	ls
   d994a:	f8c3 c01c 	strls.w	ip, [r3, #28]
   d994e:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   d9950:	42bb      	cmp	r3, r7
   d9952:	d1db      	bne.n	d990c <_ZN10BlynkTimer3runEv+0x1a>
   d9954:	462c      	mov	r4, r5
   d9956:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d9958:	6a23      	ldr	r3, [r4, #32]
   d995a:	b16b      	cbz	r3, d9978 <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   d995c:	7b22      	ldrb	r2, [r4, #12]
   d995e:	6863      	ldr	r3, [r4, #4]
   d9960:	b112      	cbz	r2, d9968 <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d9962:	68a0      	ldr	r0, [r4, #8]
   d9964:	4798      	blx	r3
   d9966:	e000      	b.n	d996a <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   d9968:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d996a:	6a23      	ldr	r3, [r4, #32]
   d996c:	2b02      	cmp	r3, #2
   d996e:	d103      	bne.n	d9978 <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   d9970:	4631      	mov	r1, r6
   d9972:	4628      	mov	r0, r5
   d9974:	f7ff ffa4 	bl	d98c0 <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   d9978:	3601      	adds	r6, #1
   d997a:	2e10      	cmp	r6, #16
   d997c:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d9980:	d1ea      	bne.n	d9958 <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   d9982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9986 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d9986:	f001 b955 	b.w	dac34 <HAL_Pin_Map>

000d998a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d998a:	6803      	ldr	r3, [r0, #0]
   d998c:	b2c9      	uxtb	r1, r1
   d998e:	689b      	ldr	r3, [r3, #8]
   d9990:	4718      	bx	r3

000d9992 <_ZN5SPS30C1Ev>:
#include "SPS30.h"

SPS30::SPS30(void)
   d9992:	2200      	movs	r2, #0
   d9994:	6042      	str	r2, [r0, #4]
   d9996:	6082      	str	r2, [r0, #8]
   d9998:	60c2      	str	r2, [r0, #12]
   d999a:	6102      	str	r2, [r0, #16]
   d999c:	6142      	str	r2, [r0, #20]
   d999e:	6182      	str	r2, [r0, #24]
   d99a0:	61c2      	str	r2, [r0, #28]
   d99a2:	6202      	str	r2, [r0, #32]
   d99a4:	6242      	str	r2, [r0, #36]	; 0x24
   d99a6:	6282      	str	r2, [r0, #40]	; 0x28
   d99a8:	2201      	movs	r2, #1
   d99aa:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d99ae:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
   d99b2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
{
  // Constructor
}
   d99b6:	4770      	bx	lr

000d99b8 <_ZN5SPS3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SPS30::readRegister(uint16_t registerAddress)
{
   d99b8:	b538      	push	{r3, r4, r5, lr}
   d99ba:	4605      	mov	r5, r0
   d99bc:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d99be:	6800      	ldr	r0, [r0, #0]
   d99c0:	2169      	movs	r1, #105	; 0x69
   d99c2:	f002 f8de 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8);   //MSB
   d99c6:	0a21      	lsrs	r1, r4, #8
   d99c8:	6828      	ldr	r0, [r5, #0]
   d99ca:	f7ff ffde 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d99ce:	b2e1      	uxtb	r1, r4
   d99d0:	6828      	ldr	r0, [r5, #0]
   d99d2:	f7ff ffda 	bl	d998a <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d99d6:	6828      	ldr	r0, [r5, #0]
   d99d8:	f002 f8da 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
   d99dc:	b108      	cbz	r0, d99e2 <_ZN5SPS3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d99de:	2000      	movs	r0, #0
   d99e0:	bd38      	pop	{r3, r4, r5, pc}

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)2);
   d99e2:	2202      	movs	r2, #2
   d99e4:	2169      	movs	r1, #105	; 0x69
   d99e6:	6828      	ldr	r0, [r5, #0]
   d99e8:	f002 f8c4 	bl	dbb74 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d99ec:	6828      	ldr	r0, [r5, #0]
   d99ee:	6803      	ldr	r3, [r0, #0]
   d99f0:	691b      	ldr	r3, [r3, #16]
   d99f2:	4798      	blx	r3
   d99f4:	2800      	cmp	r0, #0
   d99f6:	d0f2      	beq.n	d99de <_ZN5SPS3012readRegisterEt+0x26>
  {
    uint8_t msb = _i2cPort->read();
   d99f8:	6828      	ldr	r0, [r5, #0]
   d99fa:	6803      	ldr	r3, [r0, #0]
   d99fc:	695b      	ldr	r3, [r3, #20]
   d99fe:	4798      	blx	r3
   d9a00:	4604      	mov	r4, r0
    uint8_t lsb = _i2cPort->read();
   d9a02:	6828      	ldr	r0, [r5, #0]
   d9a04:	6803      	ldr	r3, [r0, #0]
   d9a06:	695b      	ldr	r3, [r3, #20]
   d9a08:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d9a0a:	0224      	lsls	r4, r4, #8
   d9a0c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   d9a10:	b2c0      	uxtb	r0, r0
   d9a12:	4320      	orrs	r0, r4
  }
  return (0); //Sensor did not respond
}
   d9a14:	bd38      	pop	{r3, r4, r5, pc}

000d9a16 <_ZN5SPS3013dataAvailableEv>:
  sendCommand(COMMAND_AUTO_CLEAN_INTERVAL, interval);
}

//Returns true when data is available
boolean SPS30::dataAvailable()
{
   d9a16:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d9a18:	f240 2102 	movw	r1, #514	; 0x202
   d9a1c:	f7ff ffcc 	bl	d99b8 <_ZN5SPS3012readRegisterEt>

  if (response == 1)
    return (true);
  return (false);
}
   d9a20:	1e43      	subs	r3, r0, #1
   d9a22:	4258      	negs	r0, r3
   d9a24:	4158      	adcs	r0, r3
   d9a26:	bd08      	pop	{r3, pc}

000d9a28 <_ZN5SPS3015readMeasurementEv>:

//Get 60 bytes from SCD30
//Updates global variables with floats
//Returns true if success
boolean SPS30::readMeasurement()
{
   d9a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a2a:	b08b      	sub	sp, #44	; 0x2c
   d9a2c:	4605      	mov	r5, r0
  //Verify we have data from the sensor
  if (dataAvailable() == false)
   d9a2e:	f7ff fff2 	bl	d9a16 <_ZN5SPS3013dataAvailableEv>
   d9a32:	4604      	mov	r4, r0
   d9a34:	2800      	cmp	r0, #0
   d9a36:	f000 8104 	beq.w	d9c42 <_ZN5SPS3015readMeasurementEv+0x21a>
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9a3a:	2700      	movs	r7, #0
  uint32_t tempNumPM10 = 0;

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9a3c:	2169      	movs	r1, #105	; 0x69
   d9a3e:	6828      	ldr	r0, [r5, #0]
  //Verify we have data from the sensor
  if (dataAvailable() == false)
    return (false);

  // Mass conentration of PM1.0 - PM10 (μg/m³)
  uint32_t tempMassPM1 = 0;
   d9a40:	9700      	str	r7, [sp, #0]
  uint32_t tempMassPM25 = 0;
   d9a42:	9701      	str	r7, [sp, #4]
  uint32_t tempMassPM4 = 0;
   d9a44:	9702      	str	r7, [sp, #8]
  uint32_t tempMassPM10 = 0;
   d9a46:	9703      	str	r7, [sp, #12]

  // Number concentration of PM0.5 - PM10 (#/cm³)
  uint32_t tempNumPM05 = 0;
   d9a48:	9704      	str	r7, [sp, #16]
  uint32_t tempNumPM1 = 0;
   d9a4a:	9705      	str	r7, [sp, #20]
  uint32_t tempNumPM25 = 0;
   d9a4c:	9706      	str	r7, [sp, #24]
  uint32_t tempNumPM4 = 0;
   d9a4e:	9707      	str	r7, [sp, #28]
  uint32_t tempNumPM10 = 0;
   d9a50:	9708      	str	r7, [sp, #32]

  // Typical particle size (μm)
  uint32_t tempTypPartSize = 0;
   d9a52:	9709      	str	r7, [sp, #36]	; 0x24

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9a54:	f002 f895 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
   d9a58:	2103      	movs	r1, #3
   d9a5a:	6828      	ldr	r0, [r5, #0]
   d9a5c:	f7ff ff95 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d9a60:	4639      	mov	r1, r7
   d9a62:	6828      	ldr	r0, [r5, #0]
   d9a64:	f7ff ff91 	bl	d998a <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d9a68:	6828      	ldr	r0, [r5, #0]
   d9a6a:	f002 f891 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
   d9a6e:	4606      	mov	r6, r0
   d9a70:	2800      	cmp	r0, #0
   d9a72:	f040 80e5 	bne.w	d9c40 <_ZN5SPS3015readMeasurementEv+0x218>
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
   d9a76:	223c      	movs	r2, #60	; 0x3c
   d9a78:	2169      	movs	r1, #105	; 0x69
   d9a7a:	6828      	ldr	r0, [r5, #0]
   d9a7c:	f002 f87a 	bl	dbb74 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d9a80:	6828      	ldr	r0, [r5, #0]
   d9a82:	6803      	ldr	r3, [r0, #0]
   d9a84:	691b      	ldr	r3, [r3, #16]
   d9a86:	4798      	blx	r3
   d9a88:	bb18      	cbnz	r0, d9ad2 <_ZN5SPS3015readMeasurementEv+0xaa>
  }

  //Now copy the uint32s into their associated floats

  // Mass concentrations
  memcpy(&massPM1, &tempMassPM1, sizeof(massPM1));
   d9a8a:	9800      	ldr	r0, [sp, #0]
   d9a8c:	6068      	str	r0, [r5, #4]
  memcpy(&massPM25, &tempMassPM25, sizeof(massPM25));
   d9a8e:	9801      	ldr	r0, [sp, #4]
   d9a90:	60a8      	str	r0, [r5, #8]
  memcpy(&massPM4, &tempMassPM4, sizeof(massPM4));
   d9a92:	9802      	ldr	r0, [sp, #8]
   d9a94:	60e8      	str	r0, [r5, #12]
  memcpy(&massPM10, &tempMassPM10, sizeof(massPM10));
   d9a96:	9803      	ldr	r0, [sp, #12]
   d9a98:	6128      	str	r0, [r5, #16]

  // Number concentrations
  memcpy(&numPM05, &tempNumPM05, sizeof(numPM05));
   d9a9a:	9804      	ldr	r0, [sp, #16]
   d9a9c:	6168      	str	r0, [r5, #20]
  memcpy(&numPM1, &tempNumPM1, sizeof(numPM1));
   d9a9e:	9805      	ldr	r0, [sp, #20]
   d9aa0:	61a8      	str	r0, [r5, #24]
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
   d9aa2:	9806      	ldr	r0, [sp, #24]
   d9aa4:	61e8      	str	r0, [r5, #28]
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
   d9aa6:	9807      	ldr	r0, [sp, #28]
   d9aa8:	6228      	str	r0, [r5, #32]
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));
   d9aaa:	9808      	ldr	r0, [sp, #32]
   d9aac:	6268      	str	r0, [r5, #36]	; 0x24

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9aae:	2300      	movs	r3, #0
  memcpy(&numPM25, &tempNumPM25, sizeof(numPM25));
  memcpy(&numPM4, &tempNumPM4, sizeof(numPM4));
  memcpy(&numPM10, &tempNumPM10, sizeof(numPM10));

  // Typ particle size
  memcpy(&typPartSize, &tempTypPartSize, sizeof(typPartSize));
   d9ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9ab2:	62a8      	str	r0, [r5, #40]	; 0x28

  //Mark our global variables as fresh
  massHasBeenReported = false;
   d9ab4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  numberHasBeenReported = false;
   d9ab8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  typHasBeenReported = false;
   d9abc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   d9ac0:	e0bf      	b.n	d9c42 <_ZN5SPS3015readMeasurementEv+0x21a>
      case 1:
      case 3:
      case 4:
        // mass pm1.0
        tempMassPM1 <<= 8;
        tempMassPM1 |= incoming;
   d9ac2:	9b00      	ldr	r3, [sp, #0]
   d9ac4:	b2c0      	uxtb	r0, r0
   d9ac6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9aca:	9000      	str	r0, [sp, #0]
   d9acc:	3601      	adds	r6, #1
    return (0); //Sensor did not ACK

  _i2cPort->requestFrom((uint8_t)SPS30_ADDRESS, (uint8_t)60);
  if (_i2cPort->available())
  {
    for (byte x = 0; x < 60; x++)
   d9ace:	2e3c      	cmp	r6, #60	; 0x3c
   d9ad0:	d0db      	beq.n	d9a8a <_ZN5SPS3015readMeasurementEv+0x62>
    {
      byte incoming = _i2cPort->read();
   d9ad2:	6828      	ldr	r0, [r5, #0]
   d9ad4:	6803      	ldr	r3, [r0, #0]
   d9ad6:	695b      	ldr	r3, [r3, #20]
   d9ad8:	4798      	blx	r3

      switch (x)
   d9ada:	b2f3      	uxtb	r3, r6
   d9adc:	2b3a      	cmp	r3, #58	; 0x3a
   d9ade:	d8f5      	bhi.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
   d9ae0:	a201      	add	r2, pc, #4	; (adr r2, d9ae8 <_ZN5SPS3015readMeasurementEv+0xc0>)
   d9ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d9ae6:	bf00      	nop
   d9ae8:	000d9ac3 	.word	0x000d9ac3
   d9aec:	000d9ac3 	.word	0x000d9ac3
   d9af0:	000d9acd 	.word	0x000d9acd
   d9af4:	000d9ac3 	.word	0x000d9ac3
   d9af8:	000d9ac3 	.word	0x000d9ac3
   d9afc:	000d9acd 	.word	0x000d9acd
   d9b00:	000d9bd5 	.word	0x000d9bd5
   d9b04:	000d9bd5 	.word	0x000d9bd5
   d9b08:	000d9acd 	.word	0x000d9acd
   d9b0c:	000d9bd5 	.word	0x000d9bd5
   d9b10:	000d9bd5 	.word	0x000d9bd5
   d9b14:	000d9acd 	.word	0x000d9acd
   d9b18:	000d9be1 	.word	0x000d9be1
   d9b1c:	000d9be1 	.word	0x000d9be1
   d9b20:	000d9acd 	.word	0x000d9acd
   d9b24:	000d9be1 	.word	0x000d9be1
   d9b28:	000d9be1 	.word	0x000d9be1
   d9b2c:	000d9acd 	.word	0x000d9acd
   d9b30:	000d9bed 	.word	0x000d9bed
   d9b34:	000d9bed 	.word	0x000d9bed
   d9b38:	000d9acd 	.word	0x000d9acd
   d9b3c:	000d9bed 	.word	0x000d9bed
   d9b40:	000d9bed 	.word	0x000d9bed
   d9b44:	000d9acd 	.word	0x000d9acd
   d9b48:	000d9bf9 	.word	0x000d9bf9
   d9b4c:	000d9bf9 	.word	0x000d9bf9
   d9b50:	000d9acd 	.word	0x000d9acd
   d9b54:	000d9bf9 	.word	0x000d9bf9
   d9b58:	000d9bf9 	.word	0x000d9bf9
   d9b5c:	000d9acd 	.word	0x000d9acd
   d9b60:	000d9c05 	.word	0x000d9c05
   d9b64:	000d9c05 	.word	0x000d9c05
   d9b68:	000d9acd 	.word	0x000d9acd
   d9b6c:	000d9c05 	.word	0x000d9c05
   d9b70:	000d9c05 	.word	0x000d9c05
   d9b74:	000d9acd 	.word	0x000d9acd
   d9b78:	000d9c11 	.word	0x000d9c11
   d9b7c:	000d9c11 	.word	0x000d9c11
   d9b80:	000d9acd 	.word	0x000d9acd
   d9b84:	000d9c11 	.word	0x000d9c11
   d9b88:	000d9c11 	.word	0x000d9c11
   d9b8c:	000d9acd 	.word	0x000d9acd
   d9b90:	000d9c1d 	.word	0x000d9c1d
   d9b94:	000d9c1d 	.word	0x000d9c1d
   d9b98:	000d9acd 	.word	0x000d9acd
   d9b9c:	000d9c1d 	.word	0x000d9c1d
   d9ba0:	000d9c1d 	.word	0x000d9c1d
   d9ba4:	000d9acd 	.word	0x000d9acd
   d9ba8:	000d9c29 	.word	0x000d9c29
   d9bac:	000d9c29 	.word	0x000d9c29
   d9bb0:	000d9acd 	.word	0x000d9acd
   d9bb4:	000d9c29 	.word	0x000d9c29
   d9bb8:	000d9c29 	.word	0x000d9c29
   d9bbc:	000d9acd 	.word	0x000d9acd
   d9bc0:	000d9c35 	.word	0x000d9c35
   d9bc4:	000d9c35 	.word	0x000d9c35
   d9bc8:	000d9acd 	.word	0x000d9acd
   d9bcc:	000d9c35 	.word	0x000d9c35
   d9bd0:	000d9c35 	.word	0x000d9c35
      case 7:
      case 9:
      case 10:
        // mass pm2.5
        tempMassPM25 <<= 8;
        tempMassPM25 |= incoming;
   d9bd4:	9b01      	ldr	r3, [sp, #4]
   d9bd6:	b2c0      	uxtb	r0, r0
   d9bd8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9bdc:	9001      	str	r0, [sp, #4]
   d9bde:	e775      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 13:
      case 15:
      case 16:
        // mass pm4.0
        tempMassPM4 <<= 8;
        tempMassPM4 |= incoming;
   d9be0:	9b02      	ldr	r3, [sp, #8]
   d9be2:	b2c0      	uxtb	r0, r0
   d9be4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9be8:	9002      	str	r0, [sp, #8]
   d9bea:	e76f      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 19:
      case 21:
      case 22:
        // mass pm10
        tempMassPM10 <<= 8;
        tempMassPM10 |= incoming;
   d9bec:	9b03      	ldr	r3, [sp, #12]
   d9bee:	b2c0      	uxtb	r0, r0
   d9bf0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9bf4:	9003      	str	r0, [sp, #12]
   d9bf6:	e769      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 25:
      case 27:
      case 28:
        // number pm0.5
        tempNumPM05 <<= 8;
        tempNumPM05 |= incoming;
   d9bf8:	9b04      	ldr	r3, [sp, #16]
   d9bfa:	b2c0      	uxtb	r0, r0
   d9bfc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9c00:	9004      	str	r0, [sp, #16]
   d9c02:	e763      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 31:
      case 33:
      case 34:
        // number pm1.0
        tempNumPM1 <<= 8;
        tempNumPM1 |= incoming;
   d9c04:	9b05      	ldr	r3, [sp, #20]
   d9c06:	b2c0      	uxtb	r0, r0
   d9c08:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d9c0c:	9005      	str	r0, [sp, #20]
   d9c0e:	e75d      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 37:
      case 39:
      case 40:
        // number pm2.5
        tempNumPM25 <<= 8;
        tempNumPM25 |= incoming;
   d9c10:	9b06      	ldr	r3, [sp, #24]
   d9c12:	b2c0      	uxtb	r0, r0
   d9c14:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
   d9c18:	9306      	str	r3, [sp, #24]
   d9c1a:	e757      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 43:
      case 45:
      case 46:
        // number pm4.0
        tempNumPM4 <<= 8;
        tempNumPM4 |= incoming;
   d9c1c:	b2c3      	uxtb	r3, r0
   d9c1e:	9807      	ldr	r0, [sp, #28]
   d9c20:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9c24:	9307      	str	r3, [sp, #28]
   d9c26:	e751      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 49:
      case 51:
      case 52:
        // number pm10
        tempNumPM10 <<= 8;
        tempNumPM10 |= incoming;
   d9c28:	b2c3      	uxtb	r3, r0
   d9c2a:	9808      	ldr	r0, [sp, #32]
   d9c2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9c30:	9308      	str	r3, [sp, #32]
   d9c32:	e74b      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>
      case 55:
      case 57:
      case 58:
        // typ particle size
        tempTypPartSize <<= 8;
        tempTypPartSize |= incoming;
   d9c34:	b2c3      	uxtb	r3, r0
   d9c36:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9c38:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9c3c:	9309      	str	r3, [sp, #36]	; 0x24
   d9c3e:	e745      	b.n	d9acc <_ZN5SPS3015readMeasurementEv+0xa4>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8);   //MSB
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
  if (_i2cPort->endTransmission() != 0)
    return (0); //Sensor did not ACK
   d9c40:	463c      	mov	r4, r7
  massHasBeenReported = false;
  numberHasBeenReported = false;
  typHasBeenReported = false;

  return (true); //Success! New data available in globals.
}
   d9c42:	4620      	mov	r0, r4
   d9c44:	b00b      	add	sp, #44	; 0x2c
   d9c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c48 <_ZN5SPS307getMassEPf>:
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d9c48:	b538      	push	{r3, r4, r5, lr}
  if (massHasBeenReported == true) //Trigger a new read
   d9c4a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
}

//Returns the latest available CO2 level
//If the current level has already been reported, trigger a new read
void *SPS30::getMass(float array[4])
{
   d9c4e:	4604      	mov	r4, r0
   d9c50:	460d      	mov	r5, r1
  if (massHasBeenReported == true) //Trigger a new read
   d9c52:	b10b      	cbz	r3, d9c58 <_ZN5SPS307getMassEPf+0x10>
    readMeasurement();             //Pull in new co2, humidity, and temp into global vars
   d9c54:	f7ff fee8 	bl	d9a28 <_ZN5SPS3015readMeasurementEv>

  massHasBeenReported = true;
   d9c58:	2301      	movs	r3, #1
   d9c5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  array[0] = massPM1;
   d9c5e:	6863      	ldr	r3, [r4, #4]
   d9c60:	602b      	str	r3, [r5, #0]
  array[1] = massPM25;
   d9c62:	68a3      	ldr	r3, [r4, #8]
   d9c64:	606b      	str	r3, [r5, #4]
  array[2] = massPM4;
   d9c66:	68e3      	ldr	r3, [r4, #12]
   d9c68:	60ab      	str	r3, [r5, #8]
  array[3] = massPM10;
   d9c6a:	6923      	ldr	r3, [r4, #16]
   d9c6c:	60eb      	str	r3, [r5, #12]
}
   d9c6e:	bd38      	pop	{r3, r4, r5, pc}

000d9c70 <_ZN5SPS306getNumEPf>:

void *SPS30::getNum(float array[5])
{
   d9c70:	b538      	push	{r3, r4, r5, lr}
  if (numberHasBeenReported == true) //Trigger a new read
   d9c72:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  array[2] = massPM4;
  array[3] = massPM10;
}

void *SPS30::getNum(float array[5])
{
   d9c76:	4604      	mov	r4, r0
   d9c78:	460d      	mov	r5, r1
  if (numberHasBeenReported == true) //Trigger a new read
   d9c7a:	b10b      	cbz	r3, d9c80 <_ZN5SPS306getNumEPf+0x10>
    readMeasurement();               //Pull in new co2, humidity, and temp into global vars
   d9c7c:	f7ff fed4 	bl	d9a28 <_ZN5SPS3015readMeasurementEv>

  numberHasBeenReported = true;
   d9c80:	2301      	movs	r3, #1
   d9c82:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

  array[0] = numPM05;
   d9c86:	6963      	ldr	r3, [r4, #20]
   d9c88:	602b      	str	r3, [r5, #0]
  array[1] = numPM1;
   d9c8a:	69a3      	ldr	r3, [r4, #24]
   d9c8c:	606b      	str	r3, [r5, #4]
  array[2] = numPM25;
   d9c8e:	69e3      	ldr	r3, [r4, #28]
   d9c90:	60ab      	str	r3, [r5, #8]
  array[3] = numPM4;
   d9c92:	6a23      	ldr	r3, [r4, #32]
   d9c94:	60eb      	str	r3, [r5, #12]
  array[4] = numPM10;
   d9c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9c98:	612b      	str	r3, [r5, #16]
}
   d9c9a:	bd38      	pop	{r3, r4, r5, pc}

000d9c9c <_ZN5SPS3011computeCRC8EPhh>:
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d9c9c:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; //Init with 0xFF
   d9c9e:	20ff      	movs	r0, #255	; 0xff
//CRC is only calc'd on the data portion (two bytes) of the four bytes being sent
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SPS30::computeCRC8(uint8_t data[], uint8_t len)
{
   d9ca0:	460c      	mov	r4, r1
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0; x < len; x++)
   d9ca2:	1a63      	subs	r3, r4, r1
   d9ca4:	b2db      	uxtb	r3, r3
   d9ca6:	429a      	cmp	r2, r3
   d9ca8:	d911      	bls.n	d9cce <_ZN5SPS3011computeCRC8EPhh+0x32>
  {
    crc ^= data[x]; // XOR-in the next input byte
   d9caa:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9cae:	4058      	eors	r0, r3
   d9cb0:	2308      	movs	r3, #8

    for (uint8_t i = 0; i < 8; i++)
    {
      if ((crc & 0x80) != 0)
   d9cb2:	f010 0f80 	tst.w	r0, #128	; 0x80
   d9cb6:	f103 33ff 	add.w	r3, r3, #4294967295
   d9cba:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   d9cbe:	bf18      	it	ne
   d9cc0:	f080 0031 	eorne.w	r0, r0, #49	; 0x31

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d9cc4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    {
      if ((crc & 0x80) != 0)
        crc = (uint8_t)((crc << 1) ^ 0x31);
      else
        crc <<= 1;
   d9cc8:	b2c0      	uxtb	r0, r0

  for (uint8_t x = 0; x < len; x++)
  {
    crc ^= data[x]; // XOR-in the next input byte

    for (uint8_t i = 0; i < 8; i++)
   d9cca:	d1f2      	bne.n	d9cb2 <_ZN5SPS3011computeCRC8EPhh+0x16>
   d9ccc:	e7e9      	b.n	d9ca2 <_ZN5SPS3011computeCRC8EPhh+0x6>
        crc <<= 1;
    }
  }

  return crc; //No output reflection
}
   d9cce:	bd10      	pop	{r4, pc}

000d9cd0 <_ZN5SPS3011sendCommandEtt>:
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9cd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9cd4:	460f      	mov	r7, r1
  uint8_t data[2];
  data[0] = arguments >> 8;
   d9cd6:	1216      	asrs	r6, r2, #8
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9cd8:	4615      	mov	r5, r2
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
   d9cda:	f88d 2005 	strb.w	r2, [sp, #5]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9cde:	a901      	add	r1, sp, #4
   d9ce0:	2202      	movs	r2, #2
  return (0); //Sensor did not respond
}

//Sends a command along with arguments and CRC
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
   d9ce2:	4604      	mov	r4, r0
  uint8_t data[2];
  data[0] = arguments >> 8;
   d9ce4:	f88d 6004 	strb.w	r6, [sp, #4]
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9ce8:	f7ff ffd8 	bl	d9c9c <_ZN5SPS3011computeCRC8EPhh>

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9cec:	2169      	movs	r1, #105	; 0x69
boolean SPS30::sendCommand(uint16_t command, uint16_t arguments)
{
  uint8_t data[2];
  data[0] = arguments >> 8;
  data[1] = arguments & 0xFF;
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d9cee:	4680      	mov	r8, r0

  _i2cPort->beginTransmission(SPS30_ADDRESS);
   d9cf0:	6820      	ldr	r0, [r4, #0]
   d9cf2:	f001 ff46 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8);     //MSB
   d9cf6:	0a39      	lsrs	r1, r7, #8
   d9cf8:	6820      	ldr	r0, [r4, #0]
   d9cfa:	f7ff fe46 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF);   //LSB
   d9cfe:	b2f9      	uxtb	r1, r7
   d9d00:	6820      	ldr	r0, [r4, #0]
   d9d02:	f7ff fe42 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8);   //MSB
   d9d06:	4631      	mov	r1, r6
   d9d08:	6820      	ldr	r0, [r4, #0]
   d9d0a:	f7ff fe3e 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   d9d0e:	b2e9      	uxtb	r1, r5
   d9d10:	6820      	ldr	r0, [r4, #0]
   d9d12:	f7ff fe3a 	bl	d998a <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   d9d16:	6820      	ldr	r0, [r4, #0]
   d9d18:	6803      	ldr	r3, [r0, #0]
   d9d1a:	4641      	mov	r1, r8
   d9d1c:	689b      	ldr	r3, [r3, #8]
   d9d1e:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d9d20:	6820      	ldr	r0, [r4, #0]
   d9d22:	f001 ff35 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK

  return (true);
}
   d9d26:	fab0 f080 	clz	r0, r0
   d9d2a:	0940      	lsrs	r0, r0, #5
   d9d2c:	b002      	add	sp, #8
   d9d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9d32 <_ZN5SPS3014beginMeasuringEv>:
//is powered down while continuous measurement mode is active SCD30 will measure
//continuously after repowering without sending the measurement command.
//Returns true if successful
boolean SPS30::beginMeasuring()
{
  return (sendCommand(COMMAND_START_MEASUREMENT, 0x0300));
   d9d32:	f44f 7240 	mov.w	r2, #768	; 0x300
   d9d36:	2110      	movs	r1, #16
   d9d38:	f7ff bfca 	b.w	d9cd0 <_ZN5SPS3011sendCommandEtt>

000d9d3c <_ZN5SPS305beginER7TwoWire>:
  // Constructor
}

//Initialize the Serial port
boolean SPS30::begin(TwoWire &wirePort)
{
   d9d3c:	b510      	push	{r4, lr}
   d9d3e:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d9d40:	6001      	str	r1, [r0, #0]

  //We expect caller to begin their I2C port, with the speed of their choice external to the library
  //But if they forget, we start the hardware here.
  _i2cPort->begin();
   d9d42:	4608      	mov	r0, r1
   d9d44:	f001 fede 	bl	dbb04 <_ZN7TwoWire5beginEv>
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d9d48:	4620      	mov	r0, r4
  {
    return (true);
  }

  return (false); //Something went wrong
}
   d9d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(ARDUINO_ARCH_ESP8266)
  _i2cPort->setClockStretchLimit(200000);
#endif

  //Check for device to respond correctly
  if (beginMeasuring() == true) //Start continuous measurements
   d9d4e:	f7ff bff0 	b.w	d9d32 <_ZN5SPS3014beginMeasuringEv>

000d9d52 <_GLOBAL__sub_I__ZN5SPS30C2Ev>:
   d9d52:	f000 bf6f 	b.w	dac34 <HAL_Pin_Map>

000d9d56 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d9d56:	b510      	push	{r4, lr}
   d9d58:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9d5a:	f003 fbe9 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9d5e:	6803      	ldr	r3, [r0, #0]
   d9d60:	4621      	mov	r1, r4
   d9d62:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d9d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d9d68:	4718      	bx	r3

000d9d6a <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d9d6a:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d9d6c:	f003 fbe0 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9d70:	6803      	ldr	r3, [r0, #0]
   d9d72:	695b      	ldr	r3, [r3, #20]
   d9d74:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d9d76:	b2c0      	uxtb	r0, r0
   d9d78:	bd08      	pop	{r3, pc}

000d9d7a <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d9d7a:	b538      	push	{r3, r4, r5, lr}
   d9d7c:	4604      	mov	r4, r0
   d9d7e:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9d80:	f003 fbd6 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9d84:	7821      	ldrb	r1, [r4, #0]
   d9d86:	f041 0120 	orr.w	r1, r1, #32
   d9d8a:	f001 fefa 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d9d8e:	4628      	mov	r0, r5
   d9d90:	f7ff ffe1 	bl	d9d56 <_ZL8wiresendh>
	Wire.endTransmission();
   d9d94:	f003 fbcc 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9d98:	f001 fefa 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d9d9c:	f003 fbc8 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9da0:	7821      	ldrb	r1, [r4, #0]
   d9da2:	2201      	movs	r2, #1
   d9da4:	f041 0120 	orr.w	r1, r1, #32
   d9da8:	f001 fee4 	bl	dbb74 <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d9dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d9db0:	f7ff bfdb 	b.w	d9d6a <_ZL8wirerecvv>

000d9db4 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d9db4:	b570      	push	{r4, r5, r6, lr}
   d9db6:	4606      	mov	r6, r0
   d9db8:	4614      	mov	r4, r2
   d9dba:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d9dbc:	f003 fbb8 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9dc0:	7831      	ldrb	r1, [r6, #0]
   d9dc2:	f041 0120 	orr.w	r1, r1, #32
   d9dc6:	f001 fedc 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d9dca:	4628      	mov	r0, r5
   d9dcc:	f7ff ffc3 	bl	d9d56 <_ZL8wiresendh>
	wiresend(regValue);
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	f7ff ffc0 	bl	d9d56 <_ZL8wiresendh>
	Wire.endTransmission();
   d9dd6:	f003 fbab 	bl	dd530 <_Z19__fetch_global_Wirev>
}
   d9dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d9dde:	f001 bed7 	b.w	dbb90 <_ZN7TwoWire15endTransmissionEv>

000d9de2 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9de6:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9dea:	2907      	cmp	r1, #7
   d9dec:	bf98      	it	ls
   d9dee:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9df0:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9df4:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9df6:	4631      	mov	r1, r6
   d9df8:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d9dfa:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9dfc:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d9dfe:	f7ff ffbc 	bl	d9d7a <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d9e02:	f1b8 0f00 	cmp.w	r8, #0
   d9e06:	d001      	beq.n	d9e0c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d9e08:	4304      	orrs	r4, r0
   d9e0a:	e001      	b.n	d9e10 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d9e0c:	ea20 0404 	bic.w	r4, r0, r4
   d9e10:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d9e12:	4631      	mov	r1, r6
   d9e14:	4628      	mov	r0, r5
}
   d9e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d9e1a:	f7ff bfcb 	b.w	d9db4 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e1e <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9e1e:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d9e20:	2907      	cmp	r1, #7
   d9e22:	bf28      	it	cs
   d9e24:	2107      	movcs	r1, #7
   d9e26:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d9e28:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d9e2a:	f003 fb81 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9e2e:	f001 fe69 	bl	dbb04 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d9e32:	4620      	mov	r0, r4
   d9e34:	22ff      	movs	r2, #255	; 0xff
   d9e36:	2100      	movs	r1, #0
   d9e38:	f7ff ffbc 	bl	d9db4 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d9e3c:	4620      	mov	r0, r4
   d9e3e:	22ff      	movs	r2, #255	; 0xff
   d9e40:	2101      	movs	r1, #1
}
   d9e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d9e46:	f7ff bfb5 	b.w	d9db4 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9e4a <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d9e4a:	2100      	movs	r1, #0
   d9e4c:	f7ff bfe7 	b.w	d9e1e <_ZN17Adafruit_MCP230175beginEh>

000d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d9e50:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d9e52:	2301      	movs	r3, #1
   d9e54:	fab2 f282 	clz	r2, r2
   d9e58:	9300      	str	r3, [sp, #0]
   d9e5a:	0952      	lsrs	r2, r2, #5
   d9e5c:	2300      	movs	r3, #0
   d9e5e:	f7ff ffc0 	bl	d9de2 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9e62:	b003      	add	sp, #12
   d9e64:	f85d fb04 	ldr.w	pc, [sp], #4

000d9e68 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9e68:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d9e6c:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e70:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9e72:	bf34      	ite	cc
   d9e74:	2114      	movcc	r1, #20
   d9e76:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d9e78:	4605      	mov	r5, r0
   d9e7a:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d9e7c:	f7ff ff7d 	bl	d9d7a <_ZN17Adafruit_MCP2301712readRegisterEh>
   d9e80:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e82:	40b3      	lsls	r3, r6
   d9e84:	b10f      	cbz	r7, d9e8a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d9e86:	4303      	orrs	r3, r0
   d9e88:	e001      	b.n	d9e8e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d9e8a:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d9e8e:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d9e90:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e92:	4628      	mov	r0, r5
   d9e94:	bf34      	ite	cc
   d9e96:	2112      	movcc	r1, #18
   d9e98:	2113      	movcs	r1, #19
}
   d9e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d9e9e:	f7ff bf89 	b.w	d9db4 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d9ea2:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d9ea4:	230d      	movs	r3, #13
   d9ea6:	9300      	str	r3, [sp, #0]
   d9ea8:	230c      	movs	r3, #12
   d9eaa:	f7ff ff9a 	bl	d9de2 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d9eae:	b003      	add	sp, #12
   d9eb0:	f85d fb04 	ldr.w	pc, [sp], #4

000d9eb4 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d9eb4:	f000 bebe 	b.w	dac34 <HAL_Pin_Map>

000d9eb8 <_ZN7ADXL345C1Ev>:
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9eb8:	b530      	push	{r4, r5, lr}
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
   d9eba:	a50e      	add	r5, pc, #56	; (adr r5, d9ef4 <_ZN7ADXL345C1Ev+0x3c>)
   d9ebc:	e9d5 4500 	ldrd	r4, r5, [r5]
   d9ec0:	e9c0 4502 	strd	r4, r5, [r0, #8]
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9ec4:	a50d      	add	r5, pc, #52	; (adr r5, d9efc <_ZN7ADXL345C1Ev+0x44>)
   d9ec6:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9eca:	220a      	movs	r2, #10
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
   d9ecc:	e9c0 4504 	strd	r4, r5, [r0, #16]
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9ed0:	a50c      	add	r5, pc, #48	; (adr r5, d9f04 <_ZN7ADXL345C1Ev+0x4c>)
   d9ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9ed6:	6282      	str	r2, [r0, #40]	; 0x28
   d9ed8:	2201      	movs	r2, #1
   d9eda:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
   d9ede:	4904      	ldr	r1, [pc, #16]	; (d9ef0 <_ZN7ADXL345C1Ev+0x38>)
	status = ADXL345_OK;
   d9ee0:	7002      	strb	r2, [r0, #0]
	error_code = ADXL345_NO_ERROR;
   d9ee2:	2200      	movs	r2, #0
#include "SparkFun_ADXL345ST.h"

#define ADXL345_DEVICE (0x53)    // Device Address for ADXL345
#define ADXL345_TO_READ (6)      // Number of Bytes Read - Two Bytes Per Axis

ADXL345::ADXL345() {
   d9ee4:	6301      	str	r1, [r0, #48]	; 0x30
	status = ADXL345_OK;
	error_code = ADXL345_NO_ERROR;
   d9ee6:	7042      	strb	r2, [r0, #1]
	
	gains[0] = 0.00376390;		// Original gain 0.00376390 
	gains[1] = 0.00376009;		// Original gain 0.00376009
	gains[2] = 0.00349265;		// Original gain 0.00349265
   d9ee8:	e9c0 4506 	strd	r4, r5, [r0, #24]
	I2C = true;
}
   d9eec:	bd30      	pop	{r4, r5, pc}
   d9eee:	bf00      	nop
   d9ef0:	004c4b40 	.word	0x004c4b40
   d9ef4:	6cf9279f 	.word	0x6cf9279f
   d9ef8:	3f6ed578 	.word	0x3f6ed578
   d9efc:	f28f7f0e 	.word	0xf28f7f0e
   d9f00:	3f6ecd7a 	.word	0x3f6ecd7a
   d9f04:	30d80f20 	.word	0x30d80f20
   d9f08:	3f6c9c9e 	.word	0x3f6c9c9e

000d9f0c <_ZN7ADXL34510writeToI2CEhh>:
	}
}

/*************************** WRITE TO I2C ***************************/
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
   d9f0c:	b538      	push	{r3, r4, r5, lr}
   d9f0e:	4614      	mov	r4, r2
   d9f10:	460d      	mov	r5, r1
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9f12:	f003 fb0d 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f16:	2153      	movs	r1, #83	; 0x53
   d9f18:	f001 fe33 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(_address);             
   d9f1c:	f003 fb08 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f20:	6803      	ldr	r3, [r0, #0]
   d9f22:	4629      	mov	r1, r5
   d9f24:	689b      	ldr	r3, [r3, #8]
   d9f26:	4798      	blx	r3
	Wire.write(_val);                 
   d9f28:	f003 fb02 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f2c:	6803      	ldr	r3, [r0, #0]
   d9f2e:	4621      	mov	r1, r4
   d9f30:	689b      	ldr	r3, [r3, #8]
   d9f32:	4798      	blx	r3
	Wire.endTransmission();         
   d9f34:	f003 fafc 	bl	dd530 <_Z19__fetch_global_Wirev>
}
   d9f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/*      Start; Send Register Address; Send Value To Write; End      */
void ADXL345::writeToI2C(byte _address, byte _val) {
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.write(_address);             
	Wire.write(_val);                 
	Wire.endTransmission();         
   d9f3c:	f001 be28 	b.w	dbb90 <_ZN7TwoWire15endTransmissionEv>

000d9f40 <_ZN7ADXL34511readFromI2CEhiPh>:
}

/*************************** READ FROM I2C **************************/
/*                Start; Send Address To Read; End                  */
void ADXL345::readFromI2C(byte address, int num, byte _buff[]) {
   d9f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9f44:	4616      	mov	r6, r2
   d9f46:	461f      	mov	r7, r3
   d9f48:	460c      	mov	r4, r1
   d9f4a:	4605      	mov	r5, r0
	Wire.beginTransmission(ADXL345_DEVICE);  
   d9f4c:	f003 faf0 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f50:	2153      	movs	r1, #83	; 0x53
   d9f52:	f001 fe16 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);             
   d9f56:	f003 faeb 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f5a:	6803      	ldr	r3, [r0, #0]
   d9f5c:	4621      	mov	r1, r4
   d9f5e:	689b      	ldr	r3, [r3, #8]
   d9f60:	4798      	blx	r3
	Wire.endTransmission();         
   d9f62:	f003 fae5 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f66:	f001 fe13 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(ADXL345_DEVICE); 
   d9f6a:	f003 fae1 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f6e:	2153      	movs	r1, #83	; 0x53
   d9f70:	f001 fe07 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
   d9f74:	f003 fadc 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f78:	4632      	mov	r2, r6
   d9f7a:	2153      	movs	r1, #83	; 0x53
   d9f7c:	f001 fdfa 	bl	dbb74 <_ZN7TwoWire11requestFromEhj>
   d9f80:	463c      	mov	r4, r7
	
	int i = 0;
	while(Wire.available())					
   d9f82:	f003 fad5 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f86:	6803      	ldr	r3, [r0, #0]
   d9f88:	691b      	ldr	r3, [r3, #16]
   d9f8a:	ebc7 0804 	rsb	r8, r7, r4
   d9f8e:	4798      	blx	r3
   d9f90:	b138      	cbz	r0, d9fa2 <_ZN7ADXL34511readFromI2CEhiPh+0x62>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
   d9f92:	f003 facd 	bl	dd530 <_Z19__fetch_global_Wirev>
   d9f96:	6803      	ldr	r3, [r0, #0]
   d9f98:	695b      	ldr	r3, [r3, #20]
   d9f9a:	4798      	blx	r3
   d9f9c:	f804 0b01 	strb.w	r0, [r4], #1
	
	Wire.beginTransmission(ADXL345_DEVICE); 
	Wire.requestFrom(ADXL345_DEVICE, num);  // Request 6 Bytes
	
	int i = 0;
	while(Wire.available())					
   d9fa0:	e7ef      	b.n	d9f82 <_ZN7ADXL34511readFromI2CEhiPh+0x42>
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
   d9fa2:	4546      	cmp	r6, r8
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
   d9fa4:	bf1e      	ittt	ne
   d9fa6:	2301      	movne	r3, #1
	{ 
		_buff[i] = Wire.read();				// Receive Byte
		i++;
	}
	if(i != num){
		status = ADXL345_ERROR;
   d9fa8:	7028      	strbne	r0, [r5, #0]
		error_code = ADXL345_READ_ERROR;
   d9faa:	706b      	strbne	r3, [r5, #1]
	}
	Wire.endTransmission();         	
   d9fac:	f003 fac0 	bl	dd530 <_Z19__fetch_global_Wirev>
}
   d9fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	}
	if(i != num){
		status = ADXL345_ERROR;
		error_code = ADXL345_READ_ERROR;
	}
	Wire.endTransmission();         	
   d9fb4:	f001 bdec 	b.w	dbb90 <_ZN7TwoWire15endTransmissionEv>

000d9fb8 <_ZN7ADXL3459triggeredEhi>:
/************************* TRIGGER CHECK  ***************************/
/*                                                                  */
// Check if Action was Triggered in Interrupts
// Example triggered(interrupts, ADXL345_SINGLE_TAP);
bool ADXL345::triggered(byte interrupts, int mask){
	return ((interrupts >> mask) & 1);
   d9fb8:	fa41 f202 	asr.w	r2, r1, r2
}
   d9fbc:	f002 0001 	and.w	r0, r2, #1
   d9fc0:	4770      	bx	lr
	...

000d9fc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d9fc4:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d9fc6:	4d09      	ldr	r5, [pc, #36]	; (d9fec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d9fc8:	6829      	ldr	r1, [r5, #0]
   d9fca:	f011 0401 	ands.w	r4, r1, #1
   d9fce:	d10a      	bne.n	d9fe6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d9fd0:	4628      	mov	r0, r5
   d9fd2:	f7fa f868 	bl	d40a6 <__cxa_guard_acquire>
   d9fd6:	b130      	cbz	r0, d9fe6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d9fd8:	4621      	mov	r1, r4
   d9fda:	4805      	ldr	r0, [pc, #20]	; (d9ff0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d9fdc:	f001 fc4e 	bl	db87c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9fe0:	4628      	mov	r0, r5
   d9fe2:	f7fa f865 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d9fe6:	4802      	ldr	r0, [pc, #8]	; (d9ff0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d9fe8:	bd38      	pop	{r3, r4, r5, pc}
   d9fea:	bf00      	nop
   d9fec:	2003e370 	.word	0x2003e370
   d9ff0:	2003e374 	.word	0x2003e374

000d9ff4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.4>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d9ff4:	b510      	push	{r4, lr}
   d9ff6:	4604      	mov	r4, r0
        return instance().transfer(data);
   d9ff8:	f7ff ffe4 	bl	d9fc4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d9ffc:	4621      	mov	r1, r4
    }
   d9ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   da002:	f001 bc45 	b.w	db890 <_ZN8SPIClass8transferEh>

000da006 <_ZN7ADXL34510writeToSPIEhh>:
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   da006:	b570      	push	{r4, r5, r6, lr}
   da008:	4604      	mov	r4, r0
   da00a:	460e      	mov	r6, r1
  digitalWrite(_CS, LOW);
   da00c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   da00e:	2100      	movs	r1, #0
	Wire.endTransmission();         	
}

/************************** WRITE FROM SPI **************************/
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
   da010:	4615      	mov	r5, r2
  digitalWrite(_CS, LOW);
   da012:	f003 fafa 	bl	dd60a <digitalWrite>
  SPI.transfer(__reg_address); 
   da016:	4630      	mov	r0, r6
   da018:	f7ff ffec 	bl	d9ff4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.4>
  SPI.transfer(__val); 
   da01c:	4628      	mov	r0, r5
   da01e:	f7ff ffe9 	bl	d9ff4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.4>
  digitalWrite(_CS, HIGH); 
   da022:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   da024:	2101      	movs	r1, #1
}
   da026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/*         Point to Destination; Write Value; Turn Off              */
void ADXL345::writeToSPI(byte __reg_address, byte __val) {
  digitalWrite(_CS, LOW);
  SPI.transfer(__reg_address); 
  SPI.transfer(__val); 
  digitalWrite(_CS, HIGH); 
   da02a:	f003 baee 	b.w	dd60a <digitalWrite>

000da02e <_ZN7ADXL3457writeToEhh>:
	}
}

/***************** WRITES VALUE TO ADDRESS REGISTER *****************/
void ADXL345::writeTo(byte address, byte val) {
	if(I2C) {
   da02e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   da032:	b10b      	cbz	r3, da038 <_ZN7ADXL3457writeToEhh+0xa>
		writeToI2C(address, val);
   da034:	f7ff bf6a 	b.w	d9f0c <_ZN7ADXL34510writeToI2CEhh>
	}
	else {
		writeToSPI(address, val);
   da038:	f7ff bfe5 	b.w	da006 <_ZN7ADXL34510writeToSPIEhh>

000da03c <_ZN7ADXL3457powerOnEv>:
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   da03c:	b510      	push	{r4, lr}
	if(I2C) {
   da03e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
	SPI.setDataMode(SPI_MODE3);
	pinMode(_CS, OUTPUT);
	digitalWrite(_CS, HIGH);
}

void ADXL345::powerOn() {
   da042:	4604      	mov	r4, r0
	if(I2C) {
   da044:	b11b      	cbz	r3, da04e <_ZN7ADXL3457powerOnEv+0x12>
		Wire.begin();				// If in I2C Mode Only
   da046:	f003 fa73 	bl	dd530 <_Z19__fetch_global_Wirev>
   da04a:	f001 fd5b 	bl	dbb04 <_ZN7TwoWire5beginEv>
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
   da04e:	4620      	mov	r0, r4
   da050:	2200      	movs	r2, #0
   da052:	212d      	movs	r1, #45	; 0x2d
   da054:	f7ff ffeb 	bl	da02e <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
   da058:	4620      	mov	r0, r4
   da05a:	2210      	movs	r2, #16
   da05c:	212d      	movs	r1, #45	; 0x2d
   da05e:	f7ff ffe6 	bl	da02e <_ZN7ADXL3457writeToEhh>
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   da062:	4620      	mov	r0, r4
   da064:	2208      	movs	r2, #8
   da066:	212d      	movs	r1, #45	; 0x2d
}
   da068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Wire.begin();				// If in I2C Mode Only
	}
	//ADXL345 TURN ON
	writeTo(ADXL345_POWER_CTL, 0);	// Wakeup     
	writeTo(ADXL345_POWER_CTL, 16);	// Auto_Sleep
	writeTo(ADXL345_POWER_CTL, 8);	// Measure
   da06c:	f7ff bfdf 	b.w	da02e <_ZN7ADXL3457writeToEhh>

000da070 <_ZN7ADXL34520setActivityThresholdEi>:
// Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
	activityThreshold = constrain(activityThreshold,0,255);
	byte _b = byte (activityThreshold);
	writeTo(ADXL345_THRESH_ACT, _b);  
   da070:	f381 0208 	usat	r2, #8, r1
   da074:	b2d2      	uxtb	r2, r2
   da076:	2124      	movs	r1, #36	; 0x24
   da078:	f7ff bfd9 	b.w	da02e <_ZN7ADXL3457writeToEhh>

000da07c <_ZN7ADXL34522setInactivityThresholdEi>:
// Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled. 
// It Accepts a Maximum Value of 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
	inactivityThreshold = constrain(inactivityThreshold,0,255);
	byte _b = byte (inactivityThreshold);
	writeTo(ADXL345_THRESH_INACT, _b);  
   da07c:	f381 0208 	usat	r2, #8, r1
   da080:	b2d2      	uxtb	r2, r2
   da082:	2125      	movs	r1, #37	; 0x25
   da084:	f7ff bfd3 	b.w	da02e <_ZN7ADXL3457writeToEhh>

000da088 <_ZN7ADXL34517setTimeInactivityEi>:
// Scale Factor is 1sec/LSB. 
// Value Must Be Between 0 and 255. 
void ADXL345::setTimeInactivity(int timeInactivity) {
	timeInactivity = constrain(timeInactivity,0,255);
	byte _b = byte (timeInactivity);
	writeTo(ADXL345_TIME_INACT, _b);  
   da088:	f381 0208 	usat	r2, #8, r1
   da08c:	b2d2      	uxtb	r2, r2
   da08e:	2126      	movs	r1, #38	; 0x26
   da090:	f7ff bfcd 	b.w	da02e <_ZN7ADXL3457writeToEhh>

000da094 <_ZN7ADXL34511readFromSPIEhiPh>:
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   da094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
   da096:	2a01      	cmp	r2, #1

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
  // Read: Most Sig Bit of Reg Address Set
  char _address = 0x80 | __reg_address;
   da098:	bfd4      	ite	le
   da09a:	f041 0480 	orrle.w	r4, r1, #128	; 0x80
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
   da09e:	f041 04c0 	orrgt.w	r4, r1, #192	; 0xc0
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   da0a2:	4605      	mov	r5, r0
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   da0a4:	2100      	movs	r1, #0
   da0a6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
  digitalWrite(_CS, HIGH); 
}

/*************************** READ FROM SPI **************************/
/*                                                                  */
void ADXL345::readFromSPI(byte __reg_address, int num, byte _buff[]) {
   da0a8:	461f      	mov	r7, r3
   da0aa:	4616      	mov	r6, r2
  // If Multi-Byte Read: Bit 6 Set 
  if(num > 1) {
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
   da0ac:	f003 faad 	bl	dd60a <digitalWrite>
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
   da0b0:	4620      	mov	r0, r4
   da0b2:	f7ff ff9f 	bl	d9ff4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.4>
   da0b6:	463c      	mov	r4, r7
  for(int i=0; i<num; i++){
   da0b8:	1be3      	subs	r3, r4, r7
   da0ba:	429e      	cmp	r6, r3
   da0bc:	dd05      	ble.n	da0ca <_ZN7ADXL34511readFromSPIEhiPh+0x36>
    _buff[i] = SPI.transfer(0x00);
   da0be:	2000      	movs	r0, #0
   da0c0:	f7ff ff98 	bl	d9ff4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.4>
   da0c4:	f804 0b01 	strb.w	r0, [r4], #1
  	_address = _address | 0x40;
  }

  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
   da0c8:	e7f6      	b.n	da0b8 <_ZN7ADXL34511readFromSPIEhiPh+0x24>
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   da0ca:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   da0cc:	2101      	movs	r1, #1
}
   da0ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(_CS, LOW);
  SPI.transfer(_address);		// Transfer Starting Reg Address To Be Read  
  for(int i=0; i<num; i++){
    _buff[i] = SPI.transfer(0x00);
  }
  digitalWrite(_CS, HIGH);
   da0d2:	f003 ba9a 	b.w	dd60a <digitalWrite>

000da0d6 <_ZN7ADXL3458readFromEhiPh>:
	}
}

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   da0d6:	b410      	push	{r4}
	if(I2C) {
   da0d8:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   da0dc:	b11c      	cbz	r4, da0e6 <_ZN7ADXL3458readFromEhiPh+0x10>
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   da0de:	f85d 4b04 	ldr.w	r4, [sp], #4

/************************ READING NUM BYTES *************************/
/*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
   da0e2:	f7ff bf2d 	b.w	d9f40 <_ZN7ADXL34511readFromI2CEhiPh>
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
	}
}
   da0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
	if(I2C) {
		readFromI2C(address, num, _buff);	// If I2C Communication
	}
	else {
		readFromSPI(address, num, _buff);	// If SPI Communication 
   da0ea:	f7ff bfd3 	b.w	da094 <_ZN7ADXL34511readFromSPIEhiPh>
	...

000da0f0 <_ZN7ADXL34515setRangeSettingEi>:
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   da0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da0f2:	3904      	subs	r1, #4
   da0f4:	290c      	cmp	r1, #12
   da0f6:	bf98      	it	ls
   da0f8:	4b0c      	ldrls	r3, [pc, #48]	; (da12c <_ZN7ADXL34515setRangeSettingEi+0x3c>)
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   da0fa:	f04f 0201 	mov.w	r2, #1
   da0fe:	bf98      	it	ls
   da100:	5c5d      	ldrbls	r5, [r3, r1]
   da102:	f10d 0307 	add.w	r3, sp, #7
   da106:	f04f 0131 	mov.w	r1, #49	; 0x31

void ADXL345::setRangeSetting(int val) {
	byte _s;
	byte _b;
	
	switch (val) {
   da10a:	bf88      	it	hi
   da10c:	2500      	movhi	r5, #0
	byte _b;
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
	*rangeSetting = _b & B00000011;
}

void ADXL345::setRangeSetting(int val) {
   da10e:	4604      	mov	r4, r0
			_s = B00000011; 
			break;
		default: 
			_s = B00000000;
	}
	readFrom(ADXL345_DATA_FORMAT, 1, &_b);
   da110:	f7ff ffe1 	bl	da0d6 <_ZN7ADXL3458readFromEhiPh>
	_s |= (_b & B11101100);
   da114:	f89d 2007 	ldrb.w	r2, [sp, #7]
   da118:	f022 0213 	bic.w	r2, r2, #19
	writeTo(ADXL345_DATA_FORMAT, _s);
   da11c:	432a      	orrs	r2, r5
   da11e:	2131      	movs	r1, #49	; 0x31
   da120:	4620      	mov	r0, r4
   da122:	f7ff ff84 	bl	da02e <_ZN7ADXL3457writeToEhh>
}
   da126:	b003      	add	sp, #12
   da128:	bd30      	pop	{r4, r5, pc}
   da12a:	bf00      	nop
   da12c:	000e878c 	.word	0x000e878c

000da130 <_ZN7ADXL34518getInterruptSourceEv>:
 ADXL345_WATERMARK
 ADXL345_OVERRUNY
 */


byte ADXL345::getInterruptSource() {
   da130:	b507      	push	{r0, r1, r2, lr}
	byte _b;
	readFrom(ADXL345_INT_SOURCE, 1, &_b);
   da132:	2201      	movs	r2, #1
   da134:	f10d 0307 	add.w	r3, sp, #7
   da138:	2130      	movs	r1, #48	; 0x30
   da13a:	f7ff ffcc 	bl	da0d6 <_ZN7ADXL3458readFromEhiPh>
	return _b;
}
   da13e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   da142:	b003      	add	sp, #12
   da144:	f85d fb04 	ldr.w	pc, [sp], #4

000da148 <_ZN7ADXL34514setRegisterBitEhib>:
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   da148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da14a:	4616      	mov	r6, r2
   da14c:	461f      	mov	r7, r3
	byte _b;
	readFrom(regAdress, 1, &_b);
   da14e:	2201      	movs	r2, #1
   da150:	f10d 0307 	add.w	r3, sp, #7
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
	}
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   da154:	4604      	mov	r4, r0
   da156:	460d      	mov	r5, r1
	byte _b;
	readFrom(regAdress, 1, &_b);
   da158:	f7ff ffbd 	bl	da0d6 <_ZN7ADXL3458readFromEhiPh>
   da15c:	2201      	movs	r2, #1
   da15e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (state) {
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   da162:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
	byte _b;
	readFrom(regAdress, 1, &_b);
	if (state) {
   da164:	b10f      	cbz	r7, da16a <_ZN7ADXL34514setRegisterBitEhib+0x22>
		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.  
   da166:	4313      	orrs	r3, r2
   da168:	e001      	b.n	da16e <_ZN7ADXL34514setRegisterBitEhib+0x26>
	} 
	else {
		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
   da16a:	ea23 0302 	bic.w	r3, r3, r2
   da16e:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	writeTo(regAdress, _b);  
   da172:	f89d 2007 	ldrb.w	r2, [sp, #7]
   da176:	4629      	mov	r1, r5
   da178:	4620      	mov	r0, r4
   da17a:	f7ff ff58 	bl	da02e <_ZN7ADXL3457writeToEhh>
}
   da17e:	b003      	add	sp, #12
   da180:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da182 <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
	return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   da182:	460b      	mov	r3, r1
   da184:	2206      	movs	r2, #6
   da186:	2127      	movs	r1, #39	; 0x27
   da188:	f7ff bfde 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da18c <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   da18c:	460b      	mov	r3, r1
   da18e:	2205      	movs	r2, #5
   da190:	2127      	movs	r1, #39	; 0x27
   da192:	f7ff bfd9 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da196 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   da196:	460b      	mov	r3, r1
   da198:	2204      	movs	r2, #4
   da19a:	2127      	movs	r1, #39	; 0x27
   da19c:	f7ff bfd4 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da1a0 <_ZN7ADXL34514setActivityXYZEbbb>:
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
   da1a0:	b570      	push	{r4, r5, r6, lr}
   da1a2:	4604      	mov	r4, r0
   da1a4:	4616      	mov	r6, r2
   da1a6:	461d      	mov	r5, r3
	setActivityX(stateX);
   da1a8:	f7ff ffeb 	bl	da182 <_ZN7ADXL34512setActivityXEb>
	setActivityY(stateY);
   da1ac:	4631      	mov	r1, r6
   da1ae:	4620      	mov	r0, r4
   da1b0:	f7ff ffec 	bl	da18c <_ZN7ADXL34512setActivityYEb>
	setActivityZ(stateZ);
   da1b4:	4629      	mov	r1, r5
   da1b6:	4620      	mov	r0, r4
}
   da1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setActivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setActivityX(stateX);
	setActivityY(stateY);
	setActivityZ(stateZ);
   da1bc:	f7ff bfeb 	b.w	da196 <_ZN7ADXL34512setActivityZEb>

000da1c0 <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   da1c0:	460b      	mov	r3, r1
   da1c2:	2202      	movs	r2, #2
   da1c4:	2127      	movs	r1, #39	; 0x27
   da1c6:	f7ff bfbf 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da1ca <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   da1ca:	460b      	mov	r3, r1
   da1cc:	2201      	movs	r2, #1
   da1ce:	2127      	movs	r1, #39	; 0x27
   da1d0:	f7ff bfba 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da1d4 <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   da1d4:	460b      	mov	r3, r1
   da1d6:	2200      	movs	r2, #0
   da1d8:	2127      	movs	r1, #39	; 0x27
   da1da:	f7ff bfb5 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da1de <_ZN7ADXL34516setInactivityXYZEbbb>:
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
   da1de:	b570      	push	{r4, r5, r6, lr}
   da1e0:	4604      	mov	r4, r0
   da1e2:	4616      	mov	r6, r2
   da1e4:	461d      	mov	r5, r3
	setInactivityX(stateX);
   da1e6:	f7ff ffeb 	bl	da1c0 <_ZN7ADXL34514setInactivityXEb>
	setInactivityY(stateY);
   da1ea:	4631      	mov	r1, r6
   da1ec:	4620      	mov	r0, r4
   da1ee:	f7ff ffec 	bl	da1ca <_ZN7ADXL34514setInactivityYEb>
	setInactivityZ(stateZ);
   da1f2:	4629      	mov	r1, r5
   da1f4:	4620      	mov	r0, r4
}
   da1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}
void ADXL345::setInactivityXYZ(bool stateX, bool stateY, bool stateZ) {
	setInactivityX(stateX);
	setInactivityY(stateY);
	setInactivityZ(stateZ);
   da1fa:	f7ff bfeb 	b.w	da1d4 <_ZN7ADXL34514setInactivityZEb>

000da1fe <_ZN7ADXL34519setInterruptMappingEhb>:

/*********************** INTERRUPT MAPPING **************************/
/*         Set the Mapping of an Interrupt to pin1 or pin2          */
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   da1fe:	4613      	mov	r3, r2
   da200:	460a      	mov	r2, r1
   da202:	212f      	movs	r1, #47	; 0x2f
   da204:	f7ff bfa0 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da208 <_ZN7ADXL34528setImportantInterruptMappingEiiiii>:
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   da208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(single_tap == 1) {
   da20c:	2901      	cmp	r1, #1
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
	setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

void ADXL345::setImportantInterruptMapping(int single_tap, int double_tap, int free_fall, int activity, int inactivity) {
   da20e:	4604      	mov	r4, r0
   da210:	4690      	mov	r8, r2
   da212:	461d      	mov	r5, r3
   da214:	9f06      	ldr	r7, [sp, #24]
   da216:	9e07      	ldr	r6, [sp, #28]
	if(single_tap == 1) {
   da218:	d101      	bne.n	da21e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x16>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
   da21a:	2200      	movs	r2, #0
   da21c:	e002      	b.n	da224 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x1c>
	else if(single_tap == 2) {
   da21e:	2902      	cmp	r1, #2
   da220:	d103      	bne.n	da22a <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x22>
		setInterruptMapping( ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
   da222:	2201      	movs	r2, #1
   da224:	2106      	movs	r1, #6
   da226:	f7ff ffea 	bl	da1fe <_ZN7ADXL34519setInterruptMappingEhb>

	if(double_tap == 1) {
   da22a:	f1b8 0f01 	cmp.w	r8, #1
   da22e:	d101      	bne.n	da234 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x2c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
   da230:	2200      	movs	r2, #0
   da232:	e003      	b.n	da23c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x34>
	else if(double_tap == 2) {
   da234:	f1b8 0f02 	cmp.w	r8, #2
   da238:	d104      	bne.n	da244 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x3c>
		setInterruptMapping( ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
   da23a:	2201      	movs	r2, #1
   da23c:	2105      	movs	r1, #5
   da23e:	4620      	mov	r0, r4
   da240:	f7ff ffdd 	bl	da1fe <_ZN7ADXL34519setInterruptMappingEhb>

	if(free_fall == 1) {
   da244:	2d01      	cmp	r5, #1
   da246:	d102      	bne.n	da24e <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x46>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
   da248:	2200      	movs	r2, #0
   da24a:	2102      	movs	r1, #2
   da24c:	e003      	b.n	da256 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x4e>
	else if(free_fall == 2) {
   da24e:	2d02      	cmp	r5, #2
   da250:	d104      	bne.n	da25c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x54>
		setInterruptMapping( ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
   da252:	2201      	movs	r2, #1
   da254:	4629      	mov	r1, r5
   da256:	4620      	mov	r0, r4
   da258:	f7ff ffd1 	bl	da1fe <_ZN7ADXL34519setInterruptMappingEhb>

	if(activity == 1) {
   da25c:	2f01      	cmp	r7, #1
   da25e:	d101      	bne.n	da264 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x5c>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
   da260:	2200      	movs	r2, #0
   da262:	e002      	b.n	da26a <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x62>
	else if(activity == 2) {
   da264:	2f02      	cmp	r7, #2
   da266:	d104      	bne.n	da272 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x6a>
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
   da268:	2201      	movs	r2, #1
   da26a:	2104      	movs	r1, #4
   da26c:	4620      	mov	r0, r4
   da26e:	f7ff ffc6 	bl	da1fe <_ZN7ADXL34519setInterruptMappingEhb>

	if(inactivity == 1) {
   da272:	2e01      	cmp	r6, #1
   da274:	d101      	bne.n	da27a <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x72>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
   da276:	2200      	movs	r2, #0
   da278:	e002      	b.n	da280 <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x78>
	else if(inactivity == 2) {
   da27a:	2e02      	cmp	r6, #2
   da27c:	d106      	bne.n	da28c <_ZN7ADXL34528setImportantInterruptMappingEiiiii+0x84>
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   da27e:	2201      	movs	r2, #1
   da280:	4620      	mov	r0, r4
   da282:	2103      	movs	r1, #3
}
   da284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		setInterruptMapping( ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}

	if(inactivity == 1) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
	else if(inactivity == 2) {
		setInterruptMapping( ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
   da288:	f7ff bfb9 	b.w	da1fe <_ZN7ADXL34519setInterruptMappingEhb>
   da28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da290 <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
	return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
	setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   da290:	4613      	mov	r3, r2
   da292:	460a      	mov	r2, r1
   da294:	212e      	movs	r1, #46	; 0x2e
   da296:	f7ff bf57 	b.w	da148 <_ZN7ADXL34514setRegisterBitEhib>

000da29a <_ZN7ADXL34511ActivityINTEb>:
	else {
		setInterrupt( ADXL345_INT_FREE_FALL_BIT,  0);
	}	
}
void ADXL345::ActivityINT(bool status) {
	if(status) {
   da29a:	460a      	mov	r2, r1
   da29c:	b101      	cbz	r1, da2a0 <_ZN7ADXL34511ActivityINTEb+0x6>
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   1);
   da29e:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_ACTIVITY_BIT,   0);
   da2a0:	2104      	movs	r1, #4
   da2a2:	f7ff bff5 	b.w	da290 <_ZN7ADXL34512setInterruptEhb>

000da2a6 <_ZN7ADXL34513InactivityINTEb>:
	}
}
void ADXL345::InactivityINT(bool status) {
	if(status) {
   da2a6:	460a      	mov	r2, r1
   da2a8:	b101      	cbz	r1, da2ac <_ZN7ADXL34513InactivityINTEb+0x6>
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 1);
   da2aa:	2201      	movs	r2, #1
	}
	else {
		setInterrupt( ADXL345_INT_INACTIVITY_BIT, 0);
   da2ac:	2103      	movs	r1, #3
   da2ae:	f7ff bfef 	b.w	da290 <_ZN7ADXL34512setInterruptEhb>

000da2b2 <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   da2b2:	f000 bcbf 	b.w	dac34 <HAL_Pin_Map>

000da2b6 <_ZN12IoTNodePowerC1Ev>:

// Constructor
IoTNodePower::IoTNodePower()
    {

    }
   da2b6:	4770      	bx	lr

000da2b8 <_ZN12IoTNodePower5beginEv>:

void IoTNodePower::begin()
{
   da2b8:	b510      	push	{r4, lr}

      IOexp.begin();
   da2ba:	4c53      	ldr	r4, [pc, #332]	; (da408 <_ZN12IoTNodePower5beginEv+0x150>)
   da2bc:	4620      	mov	r0, r4
   da2be:	f7ff fdc4 	bl	d9e4a <_ZN17Adafruit_MCP230175beginEv>
      //Set pin direction 1 = out, 0 = in
      //PORT_A,0b10111111 | PORT_B,0b00001111
      IOexp.pinMode(0,OUTPUT);
   da2c2:	4620      	mov	r0, r4
   da2c4:	2201      	movs	r2, #1
   da2c6:	2100      	movs	r1, #0
   da2c8:	f7ff fdc2 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(1,OUTPUT);
   da2cc:	2201      	movs	r2, #1
   da2ce:	4611      	mov	r1, r2
   da2d0:	4620      	mov	r0, r4
   da2d2:	f7ff fdbd 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(2,OUTPUT);
   da2d6:	4620      	mov	r0, r4
   da2d8:	2201      	movs	r2, #1
   da2da:	2102      	movs	r1, #2
   da2dc:	f7ff fdb8 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(3,OUTPUT);
   da2e0:	4620      	mov	r0, r4
   da2e2:	2201      	movs	r2, #1
   da2e4:	2103      	movs	r1, #3
   da2e6:	f7ff fdb3 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(4,OUTPUT);
   da2ea:	4620      	mov	r0, r4
   da2ec:	2201      	movs	r2, #1
   da2ee:	2104      	movs	r1, #4
   da2f0:	f7ff fdae 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(5,OUTPUT);
   da2f4:	4620      	mov	r0, r4
   da2f6:	2201      	movs	r2, #1
   da2f8:	2105      	movs	r1, #5
   da2fa:	f7ff fda9 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(6,INPUT);
   da2fe:	4620      	mov	r0, r4
   da300:	2200      	movs	r2, #0
   da302:	2106      	movs	r1, #6
   da304:	f7ff fda4 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(7,OUTPUT);
   da308:	4620      	mov	r0, r4
   da30a:	2201      	movs	r2, #1
   da30c:	2107      	movs	r1, #7
   da30e:	f7ff fd9f 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(8,INPUT);
   da312:	4620      	mov	r0, r4
   da314:	2200      	movs	r2, #0
   da316:	2108      	movs	r1, #8
   da318:	f7ff fd9a 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(9,INPUT);
   da31c:	4620      	mov	r0, r4
   da31e:	2200      	movs	r2, #0
   da320:	2109      	movs	r1, #9
   da322:	f7ff fd95 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(10,INPUT);
   da326:	4620      	mov	r0, r4
   da328:	2200      	movs	r2, #0
   da32a:	210a      	movs	r1, #10
   da32c:	f7ff fd90 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(11,INPUT);
   da330:	4620      	mov	r0, r4
   da332:	2200      	movs	r2, #0
   da334:	210b      	movs	r1, #11
   da336:	f7ff fd8b 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(12,INPUT);
   da33a:	4620      	mov	r0, r4
   da33c:	2200      	movs	r2, #0
   da33e:	210c      	movs	r1, #12
   da340:	f7ff fd86 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(13,INPUT);
   da344:	4620      	mov	r0, r4
   da346:	2200      	movs	r2, #0
   da348:	210d      	movs	r1, #13
   da34a:	f7ff fd81 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(14,INPUT);
   da34e:	4620      	mov	r0, r4
   da350:	2200      	movs	r2, #0
   da352:	210e      	movs	r1, #14
   da354:	f7ff fd7c 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>
      IOexp.pinMode(15,INPUT);
   da358:	4620      	mov	r0, r4
   da35a:	2200      	movs	r2, #0
   da35c:	210f      	movs	r1, #15
   da35e:	f7ff fd77 	bl	d9e50 <_ZN17Adafruit_MCP230177pinModeEhh>


      IOexp.pullUp(0,HIGH);
   da362:	4620      	mov	r0, r4
   da364:	2201      	movs	r2, #1
   da366:	2100      	movs	r1, #0
   da368:	f7ff fd9b 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(1,HIGH);
   da36c:	2201      	movs	r2, #1
   da36e:	4611      	mov	r1, r2
   da370:	4620      	mov	r0, r4
   da372:	f7ff fd96 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(2,HIGH);
   da376:	4620      	mov	r0, r4
   da378:	2201      	movs	r2, #1
   da37a:	2102      	movs	r1, #2
   da37c:	f7ff fd91 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(3,HIGH);
   da380:	4620      	mov	r0, r4
   da382:	2201      	movs	r2, #1
   da384:	2103      	movs	r1, #3
   da386:	f7ff fd8c 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(4,HIGH);
   da38a:	4620      	mov	r0, r4
   da38c:	2201      	movs	r2, #1
   da38e:	2104      	movs	r1, #4
   da390:	f7ff fd87 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(5,HIGH);
   da394:	4620      	mov	r0, r4
   da396:	2201      	movs	r2, #1
   da398:	2105      	movs	r1, #5
   da39a:	f7ff fd82 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(6,HIGH);
   da39e:	4620      	mov	r0, r4
   da3a0:	2201      	movs	r2, #1
   da3a2:	2106      	movs	r1, #6
   da3a4:	f7ff fd7d 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(7,HIGH);
   da3a8:	4620      	mov	r0, r4
   da3aa:	2201      	movs	r2, #1
   da3ac:	2107      	movs	r1, #7
   da3ae:	f7ff fd78 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(8,HIGH);
   da3b2:	4620      	mov	r0, r4
   da3b4:	2201      	movs	r2, #1
   da3b6:	2108      	movs	r1, #8
   da3b8:	f7ff fd73 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(9,HIGH);
   da3bc:	4620      	mov	r0, r4
   da3be:	2201      	movs	r2, #1
   da3c0:	2109      	movs	r1, #9
   da3c2:	f7ff fd6e 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(10,HIGH);
   da3c6:	4620      	mov	r0, r4
   da3c8:	2201      	movs	r2, #1
   da3ca:	210a      	movs	r1, #10
   da3cc:	f7ff fd69 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(11,HIGH); 
   da3d0:	4620      	mov	r0, r4
   da3d2:	2201      	movs	r2, #1
   da3d4:	210b      	movs	r1, #11
   da3d6:	f7ff fd64 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(12,HIGH);
   da3da:	4620      	mov	r0, r4
   da3dc:	2201      	movs	r2, #1
   da3de:	210c      	movs	r1, #12
   da3e0:	f7ff fd5f 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(13,HIGH);
   da3e4:	4620      	mov	r0, r4
   da3e6:	2201      	movs	r2, #1
   da3e8:	210d      	movs	r1, #13
   da3ea:	f7ff fd5a 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(14,HIGH);
   da3ee:	4620      	mov	r0, r4
   da3f0:	2201      	movs	r2, #1
   da3f2:	210e      	movs	r1, #14
   da3f4:	f7ff fd55 	bl	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
      IOexp.pullUp(15,HIGH);
   da3f8:	4620      	mov	r0, r4
   da3fa:	2201      	movs	r2, #1
   da3fc:	210f      	movs	r1, #15

      //IOexp.writeGPIOAB(0);
}
   da3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      IOexp.pullUp(10,HIGH);
      IOexp.pullUp(11,HIGH); 
      IOexp.pullUp(12,HIGH);
      IOexp.pullUp(13,HIGH);
      IOexp.pullUp(14,HIGH);
      IOexp.pullUp(15,HIGH);
   da402:	f7ff bd4e 	b.w	d9ea2 <_ZN17Adafruit_MCP230176pullUpEhh>
   da406:	bf00      	nop
   da408:	2003e37c 	.word	0x2003e37c

000da40c <_ZN12IoTNodePower10setPowerONE9powerNameb>:
      //IOexp.writeGPIOAB(0);
}

void IoTNodePower::setPowerON(powerName pwrName, bool state)
    {
        IOexp.digitalWrite(pwrName, state);
   da40c:	4801      	ldr	r0, [pc, #4]	; (da414 <_ZN12IoTNodePower10setPowerONE9powerNameb+0x8>)
   da40e:	f7ff bd2b 	b.w	d9e68 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   da412:	bf00      	nop
   da414:	2003e37c 	.word	0x2003e37c

000da418 <_GLOBAL__sub_I_IOexp>:
   da418:	f000 bc0c 	b.w	dac34 <HAL_Pin_Map>

000da41c <_ZN10MB85RC256VD1Ev>:
MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
}
   da41c:	4770      	bx	lr

000da41e <_ZN10MB85RC256VD0Ev>:

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   da41e:	b510      	push	{r4, lr}
}
   da420:	210c      	movs	r1, #12

MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
	wire(wire), addr(addr) {
}

MB85RC256V::~MB85RC256V() {
   da422:	4604      	mov	r4, r0
}
   da424:	f003 f968 	bl	dd6f8 <_ZdlPvj>
   da428:	4620      	mov	r0, r4
   da42a:	bd10      	pop	{r4, pc}

000da42c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   da42c:	6803      	ldr	r3, [r0, #0]
   da42e:	b2c9      	uxtb	r1, r1
   da430:	689b      	ldr	r3, [r3, #8]
   da432:	4718      	bx	r3

000da434 <_ZN10MB85RC256VC1ER7TwoWirei>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC256V::MB85RC256V(TwoWire &wire, int addr) :
   da434:	b510      	push	{r4, lr}
	wire(wire), addr(addr) {
   da436:	4c02      	ldr	r4, [pc, #8]	; (da440 <_ZN10MB85RC256VC1ER7TwoWirei+0xc>)
   da438:	6004      	str	r4, [r0, #0]
   da43a:	6041      	str	r1, [r0, #4]
   da43c:	6082      	str	r2, [r0, #8]
}
   da43e:	bd10      	pop	{r4, pc}
   da440:	000e87a4 	.word	0x000e87a4

000da444 <_ZN10MB85RC256V8readDataEjPhj>:
	}
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   da444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da448:	4604      	mov	r4, r0
   da44a:	460d      	mov	r5, r1
   da44c:	4617      	mov	r7, r2
   da44e:	4698      	mov	r8, r3
	bool result = true;

	while(dataLen > 0) {
   da450:	f1b8 0f00 	cmp.w	r8, #0
   da454:	d040      	beq.n	da4d8 <_ZN10MB85RC256V8readDataEjPhj+0x94>
		wire.beginTransmission(addr | DEVICE_ADDR);
   da456:	68a1      	ldr	r1, [r4, #8]
   da458:	6860      	ldr	r0, [r4, #4]
   da45a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   da45e:	f001 fb90 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   da462:	0a29      	lsrs	r1, r5, #8
   da464:	6860      	ldr	r0, [r4, #4]
   da466:	f7ff ffe1 	bl	da42c <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   da46a:	4629      	mov	r1, r5
   da46c:	6860      	ldr	r0, [r4, #4]
   da46e:	f7ff ffdd 	bl	da42c <_ZN7TwoWire5writeEj>
		int stat = wire.endTransmission(false);
   da472:	2100      	movs	r1, #0
   da474:	6860      	ldr	r0, [r4, #4]
   da476:	f001 fb87 	bl	dbb88 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   da47a:	b110      	cbz	r0, da482 <_ZN10MB85RC256V8readDataEjPhj+0x3e>
			//Serial.printlnf("read set address failed %d", stat);
			result = false;
   da47c:	2000      	movs	r0, #0
   da47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		size_t bytesToRead = dataLen;
		if (bytesToRead > 32) {
			bytesToRead = 32;
		}

		wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   da482:	68a1      	ldr	r1, [r4, #8]
   da484:	6860      	ldr	r0, [r4, #4]
   da486:	f1b8 0f20 	cmp.w	r8, #32
   da48a:	46c1      	mov	r9, r8
   da48c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   da490:	bf28      	it	cs
   da492:	f04f 0920 	movcs.w	r9, #32
   da496:	2301      	movs	r3, #1
   da498:	464a      	mov	r2, r9
   da49a:	b2c9      	uxtb	r1, r1
   da49c:	f001 fb58 	bl	dbb50 <_ZN7TwoWire11requestFromEhjh>

		if (Wire.available() < (int) bytesToRead) {
   da4a0:	f003 f846 	bl	dd530 <_Z19__fetch_global_Wirev>
   da4a4:	6803      	ldr	r3, [r0, #0]
   da4a6:	691b      	ldr	r3, [r3, #16]
   da4a8:	4798      	blx	r3
   da4aa:	4548      	cmp	r0, r9
   da4ac:	dbe6      	blt.n	da47c <_ZN10MB85RC256V8readDataEjPhj+0x38>
   da4ae:	463e      	mov	r6, r7
   da4b0:	ebc7 0a05 	rsb	sl, r7, r5
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
		    *data++ = Wire.read();    // receive a byte as character
   da4b4:	f003 f83c 	bl	dd530 <_Z19__fetch_global_Wirev>
   da4b8:	6803      	ldr	r3, [r0, #0]
   da4ba:	695b      	ldr	r3, [r3, #20]
   da4bc:	4798      	blx	r3
   da4be:	f806 0b01 	strb.w	r0, [r6], #1
		if (Wire.available() < (int) bytesToRead) {
			result = false;
			break;
		}

		for(size_t ii = 0; ii < bytesToRead; ii++) {
   da4c2:	1bf2      	subs	r2, r6, r7
   da4c4:	ebc6 0308 	rsb	r3, r6, r8
   da4c8:	4591      	cmp	r9, r2
   da4ca:	eb06 050a 	add.w	r5, r6, sl
   da4ce:	443b      	add	r3, r7
   da4d0:	d8f0      	bhi.n	da4b4 <_ZN10MB85RC256V8readDataEjPhj+0x70>
   da4d2:	4698      	mov	r8, r3
		    *data++ = Wire.read();    // receive a byte as character
   da4d4:	4637      	mov	r7, r6
   da4d6:	e7bb      	b.n	da450 <_ZN10MB85RC256V8readDataEjPhj+0xc>
	return true;
}


bool MB85RC256V::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;
   da4d8:	2001      	movs	r0, #1
		    framAddr++;
		    dataLen--;
		}
	}
	return result;
}
   da4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da4de <_ZN10MB85RC256V9writeDataEjPKhj>:


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   da4de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da4e2:	4604      	mov	r4, r0
   da4e4:	460d      	mov	r5, r1
   da4e6:	4690      	mov	r8, r2
   da4e8:	461f      	mov	r7, r3
	bool result = true;

	while(dataLen > 0) {
   da4ea:	b357      	cbz	r7, da542 <_ZN10MB85RC256V9writeDataEjPKhj+0x64>
		wire.beginTransmission(addr | DEVICE_ADDR);
   da4ec:	68a1      	ldr	r1, [r4, #8]
   da4ee:	6860      	ldr	r0, [r4, #4]
   da4f0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   da4f4:	f001 fb45 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
		wire.write(framAddr >> 8);
   da4f8:	0a29      	lsrs	r1, r5, #8
   da4fa:	6860      	ldr	r0, [r4, #4]
   da4fc:	f7ff ff96 	bl	da42c <_ZN7TwoWire5writeEj>
		wire.write(framAddr);
   da500:	4629      	mov	r1, r5
   da502:	6860      	ldr	r0, [r4, #4]
   da504:	f7ff ff92 	bl	da42c <_ZN7TwoWire5writeEj>
   da508:	f108 091e 	add.w	r9, r8, #30
   da50c:	4646      	mov	r6, r8
   da50e:	ebc8 0a05 	rsb	sl, r8, r5

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
			wire.write(*data);
   da512:	6860      	ldr	r0, [r4, #4]
   da514:	f816 1b01 	ldrb.w	r1, [r6], #1
   da518:	6803      	ldr	r3, [r0, #0]
   da51a:	689b      	ldr	r3, [r3, #8]
   da51c:	4798      	blx	r3
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   da51e:	454e      	cmp	r6, r9
   da520:	eb06 050a 	add.w	r5, r6, sl
			wire.write(*data);
			framAddr++;
			data++;
   da524:	46b0      	mov	r8, r6
			dataLen--;
   da526:	f107 37ff 	add.w	r7, r7, #4294967295
	while(dataLen > 0) {
		wire.beginTransmission(addr | DEVICE_ADDR);
		wire.write(framAddr >> 8);
		wire.write(framAddr);

		for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   da52a:	d001      	beq.n	da530 <_ZN10MB85RC256V9writeDataEjPKhj+0x52>
   da52c:	2f00      	cmp	r7, #0
   da52e:	d1f0      	bne.n	da512 <_ZN10MB85RC256V9writeDataEjPKhj+0x34>
			framAddr++;
			data++;
			dataLen--;
		}

		int stat = wire.endTransmission(true);
   da530:	2101      	movs	r1, #1
   da532:	6860      	ldr	r0, [r4, #4]
   da534:	f001 fb28 	bl	dbb88 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   da538:	2800      	cmp	r0, #0
   da53a:	d0d6      	beq.n	da4ea <_ZN10MB85RC256V9writeDataEjPKhj+0xc>
			//Serial.printlnf("write failed %d", stat);
			result = false;
   da53c:	2000      	movs	r0, #0
   da53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return result;
}


bool MB85RC256V::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;
   da542:	2001      	movs	r0, #1
			result = false;
			break;
		}
	}
	return result;
}
   da544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da548 <_ZN10MB85RC256V5eraseEv>:

void MB85RC256V::begin() {
	wire.begin();
}

bool MB85RC256V::erase() {
   da548:	b530      	push	{r4, r5, lr}
   da54a:	b089      	sub	sp, #36	; 0x24
   da54c:	4605      	mov	r5, r0

	size_t framAddr = 0;
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));
   da54e:	2220      	movs	r2, #32
   da550:	2100      	movs	r1, #0
   da552:	4668      	mov	r0, sp
   da554:	f009 fd39 	bl	e3fca <memset>
	wire.begin();
}

bool MB85RC256V::erase() {

	size_t framAddr = 0;
   da558:	2400      	movs	r4, #0

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
		bool result = writeData(framAddr, zero, sizeof(zero));
   da55a:	2320      	movs	r3, #32
   da55c:	466a      	mov	r2, sp
   da55e:	4621      	mov	r1, r4
   da560:	4628      	mov	r0, r5
   da562:	f7ff ffbc 	bl	da4de <_ZN10MB85RC256V9writeDataEjPKhj>
		if (!result) {
   da566:	b120      	cbz	r0, da572 <_ZN10MB85RC256V5eraseEv+0x2a>
			return false;
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
   da568:	3420      	adds	r4, #32
	size_t totalLen = MEMORY_SIZE;

	uint8_t zero[32];
	memset(zero, 0, sizeof(zero));

	while(totalLen > 0) {
   da56a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   da56e:	d1f4      	bne.n	da55a <_ZN10MB85RC256V5eraseEv+0x12>
		}

		totalLen -= sizeof(zero);
		framAddr += sizeof(zero);
	}
	return true;
   da570:	2001      	movs	r0, #1
}
   da572:	b009      	add	sp, #36	; 0x24
   da574:	bd30      	pop	{r4, r5, pc}

000da576 <_GLOBAL__sub_I__ZN10MB85RC256VC2ER7TwoWirei>:
   da576:	f000 bb5d 	b.w	dac34 <HAL_Pin_Map>

000da57a <_ZN8MCP7941xC1Ev>:

#include "MCP7941x.h"


// Constructor:
MCP7941x::MCP7941x()
   da57a:	b510      	push	{r4, lr}
   da57c:	4604      	mov	r4, r0
{
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  if (!Wire.isEnabled()) {
   da57e:	f002 ffd7 	bl	dd530 <_Z19__fetch_global_Wirev>
   da582:	f001 fb08 	bl	dbb96 <_ZN7TwoWire9isEnabledEv>
   da586:	b918      	cbnz	r0, da590 <_ZN8MCP7941xC1Ev+0x16>
      Wire.begin();
   da588:	f002 ffd2 	bl	dd530 <_Z19__fetch_global_Wirev>
   da58c:	f001 faba 	bl	dbb04 <_ZN7TwoWire5beginEv>
  }
}
   da590:	4620      	mov	r0, r4
   da592:	bd10      	pop	{r4, pc}

000da594 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   da594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da598:	4692      	mov	sl, r2
   da59a:	4698      	mov	r8, r3
   da59c:	460d      	mov	r5, r1
   da59e:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   da5a2:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   da5a6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   da5aa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   da5ae:	f002 ffbf 	bl	dd530 <_Z19__fetch_global_Wirev>
   da5b2:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   da5b4:	240a      	movs	r4, #10
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   da5b6:	f001 fae4 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   da5ba:	f002 ffb9 	bl	dd530 <_Z19__fetch_global_Wirev>
   da5be:	2100      	movs	r1, #0
   da5c0:	f7ff f9e3 	bl	d998a <_ZN7TwoWire5writeEi>

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   da5c4:	f002 ffb4 	bl	dd530 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   da5c8:	fbb5 f3f4 	udiv	r3, r5, r4
   da5cc:	fb04 5513 	mls	r5, r4, r3, r5
   da5d0:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   da5d4:	b2ed      	uxtb	r5, r5
  byte yr)          // 0-99
{
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);

  WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   da5d6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   da5da:	f7ff f9d6 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   da5de:	f002 ffa7 	bl	dd530 <_Z19__fetch_global_Wirev>
   da5e2:	fbba f1f4 	udiv	r1, sl, r4
   da5e6:	fb04 aa11 	mls	sl, r4, r1, sl
   da5ea:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   da5ee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   da5f2:	f7ff f9ca 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   da5f6:	f002 ff9b 	bl	dd530 <_Z19__fetch_global_Wirev>
   da5fa:	fbb8 f1f4 	udiv	r1, r8, r4
   da5fe:	fb04 8811 	mls	r8, r4, r1, r8
   da602:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   da606:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   da60a:	f7ff f9be 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   da60e:	f002 ff8f 	bl	dd530 <_Z19__fetch_global_Wirev>
   da612:	fbbb f1f4 	udiv	r1, fp, r4
   da616:	fb04 b111 	mls	r1, r4, r1, fp
   da61a:	f001 0107 	and.w	r1, r1, #7
   da61e:	f041 0108 	orr.w	r1, r1, #8
   da622:	f7ff f9b2 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   da626:	f002 ff83 	bl	dd530 <_Z19__fetch_global_Wirev>
   da62a:	fbb7 f1f4 	udiv	r1, r7, r4
   da62e:	fb04 7711 	mls	r7, r4, r1, r7
   da632:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   da636:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   da63a:	f7ff f9a6 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   da63e:	f002 ff77 	bl	dd530 <_Z19__fetch_global_Wirev>
   da642:	fbb6 f1f4 	udiv	r1, r6, r4
   da646:	fb04 6611 	mls	r6, r4, r1, r6
   da64a:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   da64e:	f001 011f 	and.w	r1, r1, #31
   da652:	f7ff f99a 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(yr));                       // set the yr (11111111)
   da656:	f002 ff6b 	bl	dd530 <_Z19__fetch_global_Wirev>
   da65a:	fbb9 f1f4 	udiv	r1, r9, r4
   da65e:	6803      	ldr	r3, [r0, #0]
   da660:	fb04 9411 	mls	r4, r4, r1, r9
   da664:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   da668:	689b      	ldr	r3, [r3, #8]
   da66a:	b2c9      	uxtb	r1, r1
   da66c:	4798      	blx	r3

  Wire.endTransmission();
   da66e:	f002 ff5f 	bl	dd530 <_Z19__fetch_global_Wirev>
   da672:	f001 fa8d 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   da676:	f002 ff5b 	bl	dd530 <_Z19__fetch_global_Wirev>
   da67a:	216f      	movs	r1, #111	; 0x6f
   da67c:	f001 fa81 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   da680:	f002 ff56 	bl	dd530 <_Z19__fetch_global_Wirev>
   da684:	2100      	movs	r1, #0
   da686:	f7ff f980 	bl	d998a <_ZN7TwoWire5writeEi>
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   da68a:	f002 ff51 	bl	dd530 <_Z19__fetch_global_Wirev>
   da68e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   da692:	f7ff f97a 	bl	d998a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   da696:	f002 ff4b 	bl	dd530 <_Z19__fetch_global_Wirev>

// Serial1.print("Set time: ");
// Serial1.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   da69a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // Start Clock:
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
  WireSend(RTC_LOCATION);
  WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
  Wire.endTransmission();
   da69e:	f001 ba77 	b.w	dbb90 <_ZN7TwoWire15endTransmissionEv>

000da6a2 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   da6a2:	b570      	push	{r4, r5, r6, lr}
   da6a4:	461c      	mov	r4, r3
   da6a6:	4615      	mov	r5, r2
   da6a8:	460e      	mov	r6, r1
  Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   da6aa:	f002 ff41 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6ae:	216f      	movs	r1, #111	; 0x6f
   da6b0:	f001 fa67 	bl	dbb82 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(RTC_LOCATION);
   da6b4:	f002 ff3c 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6b8:	2100      	movs	r1, #0
   da6ba:	f7ff f966 	bl	d998a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   da6be:	f002 ff37 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6c2:	f001 fa65 	bl	dbb90 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   da6c6:	f002 ff33 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6ca:	216f      	movs	r1, #111	; 0x6f
   da6cc:	2207      	movs	r2, #7
   da6ce:	f001 fa51 	bl	dbb74 <_ZN7TwoWire11requestFromEhj>

  // A few of these need masks because certain bits are control bits
  *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   da6d2:	f002 ff2d 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6d6:	6803      	ldr	r3, [r0, #0]
   da6d8:	695b      	ldr	r3, [r3, #20]
   da6da:	4798      	blx	r3
   da6dc:	b2c0      	uxtb	r0, r0
   da6de:	f3c0 1302 	ubfx	r3, r0, #4, #3
   da6e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   da6e6:	f000 000f 	and.w	r0, r0, #15
   da6ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da6ee:	7030      	strb	r0, [r6, #0]
  *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   da6f0:	f002 ff1e 	bl	dd530 <_Z19__fetch_global_Wirev>
   da6f4:	6803      	ldr	r3, [r0, #0]
   da6f6:	695b      	ldr	r3, [r3, #20]
   da6f8:	4798      	blx	r3
   da6fa:	b2c0      	uxtb	r0, r0
   da6fc:	f3c0 1302 	ubfx	r3, r0, #4, #3
   da700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   da704:	f000 000f 	and.w	r0, r0, #15
   da708:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da70c:	7028      	strb	r0, [r5, #0]
  *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   da70e:	f002 ff0f 	bl	dd530 <_Z19__fetch_global_Wirev>
   da712:	6803      	ldr	r3, [r0, #0]
   da714:	695b      	ldr	r3, [r3, #20]
   da716:	4798      	blx	r3
   da718:	b2c0      	uxtb	r0, r0
   da71a:	f3c0 1301 	ubfx	r3, r0, #4, #2
   da71e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   da722:	f000 000f 	and.w	r0, r0, #15
   da726:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da72a:	7020      	strb	r0, [r4, #0]
  *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   da72c:	f002 ff00 	bl	dd530 <_Z19__fetch_global_Wirev>
   da730:	6803      	ldr	r3, [r0, #0]
   da732:	695b      	ldr	r3, [r3, #20]
   da734:	4798      	blx	r3
   da736:	9b04      	ldr	r3, [sp, #16]
   da738:	f000 0007 	and.w	r0, r0, #7
   da73c:	7018      	strb	r0, [r3, #0]
  *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   da73e:	f002 fef7 	bl	dd530 <_Z19__fetch_global_Wirev>
   da742:	6803      	ldr	r3, [r0, #0]
   da744:	695b      	ldr	r3, [r3, #20]
   da746:	4798      	blx	r3
   da748:	b2c0      	uxtb	r0, r0
   da74a:	f3c0 1301 	ubfx	r3, r0, #4, #2
   da74e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   da752:	f000 000f 	and.w	r0, r0, #15
   da756:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da75a:	9b05      	ldr	r3, [sp, #20]
   da75c:	7018      	strb	r0, [r3, #0]
  *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   da75e:	f002 fee7 	bl	dd530 <_Z19__fetch_global_Wirev>
   da762:	6803      	ldr	r3, [r0, #0]
   da764:	695b      	ldr	r3, [r3, #20]
   da766:	4798      	blx	r3
   da768:	b2c0      	uxtb	r0, r0
   da76a:	f3c0 1200 	ubfx	r2, r0, #4, #1
   da76e:	0093      	lsls	r3, r2, #2
   da770:	4413      	add	r3, r2
   da772:	f000 000f 	and.w	r0, r0, #15
   da776:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da77a:	9b06      	ldr	r3, [sp, #24]
   da77c:	7018      	strb	r0, [r3, #0]
  *yr       = bcdToDec(WireReceive());         // 11111111
   da77e:	f002 fed7 	bl	dd530 <_Z19__fetch_global_Wirev>
   da782:	6803      	ldr	r3, [r0, #0]
   da784:	695b      	ldr	r3, [r3, #20]
   da786:	4798      	blx	r3
   da788:	b2c0      	uxtb	r0, r0
   da78a:	0903      	lsrs	r3, r0, #4
   da78c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   da790:	f000 000f 	and.w	r0, r0, #15
   da794:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   da798:	9b07      	ldr	r3, [sp, #28]
   da79a:	7018      	strb	r0, [r3, #0]
   da79c:	bd70      	pop	{r4, r5, r6, pc}

000da79e <_ZN8MCP7941x11setUnixTimeEm>:
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   da79e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7a2:	4607      	mov	r7, r0
   da7a4:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   da7a6:	4608      	mov	r0, r1
// }

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   da7a8:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   da7aa:	f001 ff73 	bl	dc694 <_ZN9TimeClass6secondEl>
   da7ae:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   da7b0:	4620      	mov	r0, r4
   da7b2:	f001 ff67 	bl	dc684 <_ZN9TimeClass6minuteEl>
   da7b6:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   da7b8:	4620      	mov	r0, r4
   da7ba:	f001 ff5b 	bl	dc674 <_ZN9TimeClass4hourEl>
   da7be:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   da7c0:	4620      	mov	r0, r4
   da7c2:	f001 ff77 	bl	dc6b4 <_ZN9TimeClass7weekdayEl>
   da7c6:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   da7c8:	4620      	mov	r0, r4
   da7ca:	f001 ff6b 	bl	dc6a4 <_ZN9TimeClass3dayEl>
   da7ce:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   da7d0:	4620      	mov	r0, r4
   da7d2:	f001 ff79 	bl	dc6c8 <_ZN9TimeClass5monthEl>
   da7d6:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   da7d8:	4620      	mov	r0, r4
   da7da:	f001 ff7f 	bl	dc6dc <_ZN9TimeClass4yearEl>
   da7de:	220a      	movs	r2, #10
   da7e0:	4601      	mov	r1, r0
   da7e2:	a804      	add	r0, sp, #16
   da7e4:	f002 fd82 	bl	dd2ec <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   da7e8:	a904      	add	r1, sp, #16
   da7ea:	2202      	movs	r2, #2
   da7ec:	a808      	add	r0, sp, #32
   da7ee:	f002 fe43 	bl	dd478 <_ZNK6String9substringEj>
   da7f2:	a808      	add	r0, sp, #32
   da7f4:	f002 fe54 	bl	dd4a0 <_ZNK6String5toIntEv>
   da7f8:	4604      	mov	r4, r0
   da7fa:	a808      	add	r0, sp, #32
   da7fc:	f002 fcba 	bl	dd174 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   da800:	b2e4      	uxtb	r4, r4
   da802:	fa5f f38b 	uxtb.w	r3, fp
   da806:	b2f6      	uxtb	r6, r6
   da808:	b2ed      	uxtb	r5, r5
   da80a:	9302      	str	r3, [sp, #8]
   da80c:	fa5f f289 	uxtb.w	r2, r9
   da810:	fa5f f38a 	uxtb.w	r3, sl
   da814:	fa5f f188 	uxtb.w	r1, r8
   da818:	4638      	mov	r0, r7
   da81a:	9403      	str	r4, [sp, #12]
   da81c:	9601      	str	r6, [sp, #4]
   da81e:	9500      	str	r5, [sp, #0]
   da820:	f7ff feb8 	bl	da594 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   da824:	a804      	add	r0, sp, #16
   da826:	f002 fca5 	bl	dd174 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   da82a:	b00d      	add	sp, #52	; 0x34
   da82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da830 <_ZN8MCP7941x6rtcNowEv>:
}

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
uint32_t MCP7941x::rtcNow(){
   da830:	b500      	push	{lr}
   da832:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   da834:	f10d 031b 	add.w	r3, sp, #27
   da838:	9303      	str	r3, [sp, #12]
   da83a:	f10d 031a 	add.w	r3, sp, #26
   da83e:	9302      	str	r3, [sp, #8]
   da840:	f10d 0319 	add.w	r3, sp, #25
   da844:	9301      	str	r3, [sp, #4]
   da846:	ab06      	add	r3, sp, #24
   da848:	9300      	str	r3, [sp, #0]
   da84a:	f10d 0216 	add.w	r2, sp, #22
   da84e:	f10d 0317 	add.w	r3, sp, #23
   da852:	f10d 0115 	add.w	r1, sp, #21
   da856:	f7ff ff24 	bl	da6a2 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>



  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   da85a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   da85e:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   da860:	f89d 3016 	ldrb.w	r3, [sp, #22]
   da864:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   da866:	f89d 3017 	ldrb.w	r3, [sp, #23]
   da86a:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   da86c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   da870:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   da872:	f89d 301a 	ldrb.w	r3, [sp, #26]
   da876:	3b01      	subs	r3, #1
   da878:	930b      	str	r3, [sp, #44]	; 0x2c
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   da87a:	f89d 301b 	ldrb.w	r3, [sp, #27]
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   da87e:	a807      	add	r0, sp, #28
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  // tm.tm_year = yr + 52; // for some reason... the clock is set with this year ofset....
  tm.tm_year = yr + 100; // The above was a 4 yr to 2 year bug
   da880:	3364      	adds	r3, #100	; 0x64
   da882:	930c      	str	r3, [sp, #48]	; 0x30
                  // The number of years since 1900 (by definition of tm)

  time_t moment = mktime(&tm);//create epoc time_t object
   da884:	f009 fc86 	bl	e4194 <mktime>

  return uint32_t(moment);
}
   da888:	b011      	add	sp, #68	; 0x44
   da88a:	f85d fb04 	ldr.w	pc, [sp], #4

000da88e <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   da88e:	f000 b9d1 	b.w	dac34 <HAL_Pin_Map>
	...

000da894 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   da894:	b508      	push	{r3, lr}
   da896:	4b02      	ldr	r3, [pc, #8]	; (da8a0 <wlan_connected_info+0xc>)
   da898:	681b      	ldr	r3, [r3, #0]
   da89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   da89c:	9301      	str	r3, [sp, #4]
   da89e:	bd08      	pop	{r3, pc}
   da8a0:	00030274 	.word	0x00030274

000da8a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   da8a4:	b508      	push	{r3, lr}
   da8a6:	4b02      	ldr	r3, [pc, #8]	; (da8b0 <HAL_USB_USART_Init+0xc>)
   da8a8:	681b      	ldr	r3, [r3, #0]
   da8aa:	681b      	ldr	r3, [r3, #0]
   da8ac:	9301      	str	r3, [sp, #4]
   da8ae:	bd08      	pop	{r3, pc}
   da8b0:	0003024c 	.word	0x0003024c

000da8b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   da8b4:	b508      	push	{r3, lr}
   da8b6:	4b02      	ldr	r3, [pc, #8]	; (da8c0 <HAL_USB_USART_Begin+0xc>)
   da8b8:	681b      	ldr	r3, [r3, #0]
   da8ba:	685b      	ldr	r3, [r3, #4]
   da8bc:	9301      	str	r3, [sp, #4]
   da8be:	bd08      	pop	{r3, pc}
   da8c0:	0003024c 	.word	0x0003024c

000da8c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   da8c4:	b508      	push	{r3, lr}
   da8c6:	4b02      	ldr	r3, [pc, #8]	; (da8d0 <HAL_USB_USART_Available_Data+0xc>)
   da8c8:	681b      	ldr	r3, [r3, #0]
   da8ca:	691b      	ldr	r3, [r3, #16]
   da8cc:	9301      	str	r3, [sp, #4]
   da8ce:	bd08      	pop	{r3, pc}
   da8d0:	0003024c 	.word	0x0003024c

000da8d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   da8d4:	b508      	push	{r3, lr}
   da8d6:	4b02      	ldr	r3, [pc, #8]	; (da8e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   da8d8:	681b      	ldr	r3, [r3, #0]
   da8da:	695b      	ldr	r3, [r3, #20]
   da8dc:	9301      	str	r3, [sp, #4]
   da8de:	bd08      	pop	{r3, pc}
   da8e0:	0003024c 	.word	0x0003024c

000da8e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da8e4:	b508      	push	{r3, lr}
   da8e6:	4b02      	ldr	r3, [pc, #8]	; (da8f0 <HAL_USB_USART_Receive_Data+0xc>)
   da8e8:	681b      	ldr	r3, [r3, #0]
   da8ea:	699b      	ldr	r3, [r3, #24]
   da8ec:	9301      	str	r3, [sp, #4]
   da8ee:	bd08      	pop	{r3, pc}
   da8f0:	0003024c 	.word	0x0003024c

000da8f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   da8f4:	b508      	push	{r3, lr}
   da8f6:	4b02      	ldr	r3, [pc, #8]	; (da900 <HAL_USB_USART_Send_Data+0xc>)
   da8f8:	681b      	ldr	r3, [r3, #0]
   da8fa:	69db      	ldr	r3, [r3, #28]
   da8fc:	9301      	str	r3, [sp, #4]
   da8fe:	bd08      	pop	{r3, pc}
   da900:	0003024c 	.word	0x0003024c

000da904 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   da904:	b508      	push	{r3, lr}
   da906:	4b02      	ldr	r3, [pc, #8]	; (da910 <HAL_USB_USART_Flush_Data+0xc>)
   da908:	681b      	ldr	r3, [r3, #0]
   da90a:	6a1b      	ldr	r3, [r3, #32]
   da90c:	9301      	str	r3, [sp, #4]
   da90e:	bd08      	pop	{r3, pc}
   da910:	0003024c 	.word	0x0003024c

000da914 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   da914:	b508      	push	{r3, lr}
   da916:	4b02      	ldr	r3, [pc, #8]	; (da920 <HAL_I2C_Set_Speed+0xc>)
   da918:	681b      	ldr	r3, [r3, #0]
   da91a:	681b      	ldr	r3, [r3, #0]
   da91c:	9301      	str	r3, [sp, #4]
   da91e:	bd08      	pop	{r3, pc}
   da920:	00030228 	.word	0x00030228

000da924 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   da924:	b508      	push	{r3, lr}
   da926:	4b02      	ldr	r3, [pc, #8]	; (da930 <HAL_I2C_Begin+0xc>)
   da928:	681b      	ldr	r3, [r3, #0]
   da92a:	68db      	ldr	r3, [r3, #12]
   da92c:	9301      	str	r3, [sp, #4]
   da92e:	bd08      	pop	{r3, pc}
   da930:	00030228 	.word	0x00030228

000da934 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   da934:	b508      	push	{r3, lr}
   da936:	4b02      	ldr	r3, [pc, #8]	; (da940 <HAL_I2C_End+0xc>)
   da938:	681b      	ldr	r3, [r3, #0]
   da93a:	691b      	ldr	r3, [r3, #16]
   da93c:	9301      	str	r3, [sp, #4]
   da93e:	bd08      	pop	{r3, pc}
   da940:	00030228 	.word	0x00030228

000da944 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   da944:	b508      	push	{r3, lr}
   da946:	4b02      	ldr	r3, [pc, #8]	; (da950 <HAL_I2C_Begin_Transmission+0xc>)
   da948:	681b      	ldr	r3, [r3, #0]
   da94a:	699b      	ldr	r3, [r3, #24]
   da94c:	9301      	str	r3, [sp, #4]
   da94e:	bd08      	pop	{r3, pc}
   da950:	00030228 	.word	0x00030228

000da954 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   da954:	b508      	push	{r3, lr}
   da956:	4b02      	ldr	r3, [pc, #8]	; (da960 <HAL_I2C_End_Transmission+0xc>)
   da958:	681b      	ldr	r3, [r3, #0]
   da95a:	69db      	ldr	r3, [r3, #28]
   da95c:	9301      	str	r3, [sp, #4]
   da95e:	bd08      	pop	{r3, pc}
   da960:	00030228 	.word	0x00030228

000da964 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   da964:	b508      	push	{r3, lr}
   da966:	4b02      	ldr	r3, [pc, #8]	; (da970 <HAL_I2C_Write_Data+0xc>)
   da968:	681b      	ldr	r3, [r3, #0]
   da96a:	6a1b      	ldr	r3, [r3, #32]
   da96c:	9301      	str	r3, [sp, #4]
   da96e:	bd08      	pop	{r3, pc}
   da970:	00030228 	.word	0x00030228

000da974 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   da974:	b508      	push	{r3, lr}
   da976:	4b02      	ldr	r3, [pc, #8]	; (da980 <HAL_I2C_Available_Data+0xc>)
   da978:	681b      	ldr	r3, [r3, #0]
   da97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   da97c:	9301      	str	r3, [sp, #4]
   da97e:	bd08      	pop	{r3, pc}
   da980:	00030228 	.word	0x00030228

000da984 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   da984:	b508      	push	{r3, lr}
   da986:	4b02      	ldr	r3, [pc, #8]	; (da990 <HAL_I2C_Read_Data+0xc>)
   da988:	681b      	ldr	r3, [r3, #0]
   da98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   da98c:	9301      	str	r3, [sp, #4]
   da98e:	bd08      	pop	{r3, pc}
   da990:	00030228 	.word	0x00030228

000da994 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   da994:	b508      	push	{r3, lr}
   da996:	4b02      	ldr	r3, [pc, #8]	; (da9a0 <HAL_I2C_Peek_Data+0xc>)
   da998:	681b      	ldr	r3, [r3, #0]
   da99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da99c:	9301      	str	r3, [sp, #4]
   da99e:	bd08      	pop	{r3, pc}
   da9a0:	00030228 	.word	0x00030228

000da9a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   da9a4:	b508      	push	{r3, lr}
   da9a6:	4b02      	ldr	r3, [pc, #8]	; (da9b0 <HAL_I2C_Flush_Data+0xc>)
   da9a8:	681b      	ldr	r3, [r3, #0]
   da9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da9ac:	9301      	str	r3, [sp, #4]
   da9ae:	bd08      	pop	{r3, pc}
   da9b0:	00030228 	.word	0x00030228

000da9b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   da9b4:	b508      	push	{r3, lr}
   da9b6:	4b02      	ldr	r3, [pc, #8]	; (da9c0 <HAL_I2C_Is_Enabled+0xc>)
   da9b8:	681b      	ldr	r3, [r3, #0]
   da9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   da9bc:	9301      	str	r3, [sp, #4]
   da9be:	bd08      	pop	{r3, pc}
   da9c0:	00030228 	.word	0x00030228

000da9c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   da9c4:	b508      	push	{r3, lr}
   da9c6:	4b02      	ldr	r3, [pc, #8]	; (da9d0 <HAL_I2C_Init+0xc>)
   da9c8:	681b      	ldr	r3, [r3, #0]
   da9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da9cc:	9301      	str	r3, [sp, #4]
   da9ce:	bd08      	pop	{r3, pc}
   da9d0:	00030228 	.word	0x00030228

000da9d4 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   da9d4:	b508      	push	{r3, lr}
   da9d6:	4b02      	ldr	r3, [pc, #8]	; (da9e0 <HAL_I2C_Reset+0xc>)
   da9d8:	681b      	ldr	r3, [r3, #0]
   da9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da9dc:	9301      	str	r3, [sp, #4]
   da9de:	bd08      	pop	{r3, pc}
   da9e0:	00030228 	.word	0x00030228

000da9e4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   da9e4:	b508      	push	{r3, lr}
   da9e6:	4b02      	ldr	r3, [pc, #8]	; (da9f0 <HAL_I2C_Acquire+0xc>)
   da9e8:	681b      	ldr	r3, [r3, #0]
   da9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da9ec:	9301      	str	r3, [sp, #4]
   da9ee:	bd08      	pop	{r3, pc}
   da9f0:	00030228 	.word	0x00030228

000da9f4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   da9f4:	b508      	push	{r3, lr}
   da9f6:	4b02      	ldr	r3, [pc, #8]	; (daa00 <HAL_I2C_Release+0xc>)
   da9f8:	681b      	ldr	r3, [r3, #0]
   da9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   da9fc:	9301      	str	r3, [sp, #4]
   da9fe:	bd08      	pop	{r3, pc}
   daa00:	00030228 	.word	0x00030228

000daa04 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   daa04:	b508      	push	{r3, lr}
   daa06:	4b02      	ldr	r3, [pc, #8]	; (daa10 <HAL_I2C_Request_Data_Ex+0xc>)
   daa08:	681b      	ldr	r3, [r3, #0]
   daa0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   daa0c:	9301      	str	r3, [sp, #4]
   daa0e:	bd08      	pop	{r3, pc}
   daa10:	00030228 	.word	0x00030228

000daa14 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   daa14:	b508      	push	{r3, lr}
   daa16:	4b02      	ldr	r3, [pc, #8]	; (daa20 <sock_setsockopt+0xc>)
   daa18:	681b      	ldr	r3, [r3, #0]
   daa1a:	699b      	ldr	r3, [r3, #24]
   daa1c:	9301      	str	r3, [sp, #4]
   daa1e:	bd08      	pop	{r3, pc}
   daa20:	00030238 	.word	0x00030238

000daa24 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   daa24:	b508      	push	{r3, lr}
   daa26:	4b02      	ldr	r3, [pc, #8]	; (daa30 <sock_close+0xc>)
   daa28:	681b      	ldr	r3, [r3, #0]
   daa2a:	69db      	ldr	r3, [r3, #28]
   daa2c:	9301      	str	r3, [sp, #4]
   daa2e:	bd08      	pop	{r3, pc}
   daa30:	00030238 	.word	0x00030238

000daa34 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   daa34:	b508      	push	{r3, lr}
   daa36:	4b02      	ldr	r3, [pc, #8]	; (daa40 <sock_connect+0xc>)
   daa38:	681b      	ldr	r3, [r3, #0]
   daa3a:	6a1b      	ldr	r3, [r3, #32]
   daa3c:	9301      	str	r3, [sp, #4]
   daa3e:	bd08      	pop	{r3, pc}
   daa40:	00030238 	.word	0x00030238

000daa44 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   daa44:	b508      	push	{r3, lr}
   daa46:	4b02      	ldr	r3, [pc, #8]	; (daa50 <sock_recv+0xc>)
   daa48:	681b      	ldr	r3, [r3, #0]
   daa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daa4c:	9301      	str	r3, [sp, #4]
   daa4e:	bd08      	pop	{r3, pc}
   daa50:	00030238 	.word	0x00030238

000daa54 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   daa54:	b508      	push	{r3, lr}
   daa56:	4b02      	ldr	r3, [pc, #8]	; (daa60 <sock_send+0xc>)
   daa58:	681b      	ldr	r3, [r3, #0]
   daa5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daa5c:	9301      	str	r3, [sp, #4]
   daa5e:	bd08      	pop	{r3, pc}
   daa60:	00030238 	.word	0x00030238

000daa64 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   daa64:	b508      	push	{r3, lr}
   daa66:	4b02      	ldr	r3, [pc, #8]	; (daa70 <sock_socket+0xc>)
   daa68:	681b      	ldr	r3, [r3, #0]
   daa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   daa6c:	9301      	str	r3, [sp, #4]
   daa6e:	bd08      	pop	{r3, pc}
   daa70:	00030238 	.word	0x00030238

000daa74 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   daa74:	b508      	push	{r3, lr}
   daa76:	4b02      	ldr	r3, [pc, #8]	; (daa80 <HAL_USART_Init+0xc>)
   daa78:	681b      	ldr	r3, [r3, #0]
   daa7a:	681b      	ldr	r3, [r3, #0]
   daa7c:	9301      	str	r3, [sp, #4]
   daa7e:	bd08      	pop	{r3, pc}
   daa80:	0003023c 	.word	0x0003023c

000daa84 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   daa84:	b508      	push	{r3, lr}
   daa86:	4b02      	ldr	r3, [pc, #8]	; (daa90 <HAL_USART_Write_Data+0xc>)
   daa88:	681b      	ldr	r3, [r3, #0]
   daa8a:	68db      	ldr	r3, [r3, #12]
   daa8c:	9301      	str	r3, [sp, #4]
   daa8e:	bd08      	pop	{r3, pc}
   daa90:	0003023c 	.word	0x0003023c

000daa94 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   daa94:	b508      	push	{r3, lr}
   daa96:	4b02      	ldr	r3, [pc, #8]	; (daaa0 <HAL_USART_Available_Data+0xc>)
   daa98:	681b      	ldr	r3, [r3, #0]
   daa9a:	691b      	ldr	r3, [r3, #16]
   daa9c:	9301      	str	r3, [sp, #4]
   daa9e:	bd08      	pop	{r3, pc}
   daaa0:	0003023c 	.word	0x0003023c

000daaa4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   daaa4:	b508      	push	{r3, lr}
   daaa6:	4b02      	ldr	r3, [pc, #8]	; (daab0 <HAL_USART_Read_Data+0xc>)
   daaa8:	681b      	ldr	r3, [r3, #0]
   daaaa:	695b      	ldr	r3, [r3, #20]
   daaac:	9301      	str	r3, [sp, #4]
   daaae:	bd08      	pop	{r3, pc}
   daab0:	0003023c 	.word	0x0003023c

000daab4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   daab4:	b508      	push	{r3, lr}
   daab6:	4b02      	ldr	r3, [pc, #8]	; (daac0 <HAL_USART_Peek_Data+0xc>)
   daab8:	681b      	ldr	r3, [r3, #0]
   daaba:	699b      	ldr	r3, [r3, #24]
   daabc:	9301      	str	r3, [sp, #4]
   daabe:	bd08      	pop	{r3, pc}
   daac0:	0003023c 	.word	0x0003023c

000daac4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   daac4:	b508      	push	{r3, lr}
   daac6:	4b02      	ldr	r3, [pc, #8]	; (daad0 <HAL_USART_Flush_Data+0xc>)
   daac8:	681b      	ldr	r3, [r3, #0]
   daaca:	69db      	ldr	r3, [r3, #28]
   daacc:	9301      	str	r3, [sp, #4]
   daace:	bd08      	pop	{r3, pc}
   daad0:	0003023c 	.word	0x0003023c

000daad4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   daad4:	b508      	push	{r3, lr}
   daad6:	4b02      	ldr	r3, [pc, #8]	; (daae0 <HAL_USART_Is_Enabled+0xc>)
   daad8:	681b      	ldr	r3, [r3, #0]
   daada:	6a1b      	ldr	r3, [r3, #32]
   daadc:	9301      	str	r3, [sp, #4]
   daade:	bd08      	pop	{r3, pc}
   daae0:	0003023c 	.word	0x0003023c

000daae4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   daae4:	b508      	push	{r3, lr}
   daae6:	4b02      	ldr	r3, [pc, #8]	; (daaf0 <HAL_USART_Available_Data_For_Write+0xc>)
   daae8:	681b      	ldr	r3, [r3, #0]
   daaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daaec:	9301      	str	r3, [sp, #4]
   daaee:	bd08      	pop	{r3, pc}
   daaf0:	0003023c 	.word	0x0003023c

000daaf4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   daaf4:	b508      	push	{r3, lr}
   daaf6:	4b02      	ldr	r3, [pc, #8]	; (dab00 <HAL_USART_BeginConfig+0xc>)
   daaf8:	681b      	ldr	r3, [r3, #0]
   daafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   daafc:	9301      	str	r3, [sp, #4]
   daafe:	bd08      	pop	{r3, pc}
   dab00:	0003023c 	.word	0x0003023c

000dab04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dab04:	b508      	push	{r3, lr}
   dab06:	4b02      	ldr	r3, [pc, #8]	; (dab10 <inet_inet_ntop+0xc>)
   dab08:	681b      	ldr	r3, [r3, #0]
   dab0a:	695b      	ldr	r3, [r3, #20]
   dab0c:	9301      	str	r3, [sp, #4]
   dab0e:	bd08      	pop	{r3, pc}
   dab10:	00030264 	.word	0x00030264

000dab14 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   dab14:	b508      	push	{r3, lr}
   dab16:	4b02      	ldr	r3, [pc, #8]	; (dab20 <inet_htonl+0xc>)
   dab18:	681b      	ldr	r3, [r3, #0]
   dab1a:	6a1b      	ldr	r3, [r3, #32]
   dab1c:	9301      	str	r3, [sp, #4]
   dab1e:	bd08      	pop	{r3, pc}
   dab20:	00030264 	.word	0x00030264

000dab24 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   dab24:	b508      	push	{r3, lr}
   dab26:	4b02      	ldr	r3, [pc, #8]	; (dab30 <inet_htons+0xc>)
   dab28:	681b      	ldr	r3, [r3, #0]
   dab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dab2c:	9301      	str	r3, [sp, #4]
   dab2e:	bd08      	pop	{r3, pc}
   dab30:	00030264 	.word	0x00030264

000dab34 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dab34:	b508      	push	{r3, lr}
   dab36:	4b02      	ldr	r3, [pc, #8]	; (dab40 <os_thread_is_current+0xc>)
   dab38:	681b      	ldr	r3, [r3, #0]
   dab3a:	689b      	ldr	r3, [r3, #8]
   dab3c:	9301      	str	r3, [sp, #4]
   dab3e:	bd08      	pop	{r3, pc}
   dab40:	00030248 	.word	0x00030248

000dab44 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dab44:	b508      	push	{r3, lr}
   dab46:	4b02      	ldr	r3, [pc, #8]	; (dab50 <os_thread_join+0xc>)
   dab48:	681b      	ldr	r3, [r3, #0]
   dab4a:	691b      	ldr	r3, [r3, #16]
   dab4c:	9301      	str	r3, [sp, #4]
   dab4e:	bd08      	pop	{r3, pc}
   dab50:	00030248 	.word	0x00030248

000dab54 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dab54:	b508      	push	{r3, lr}
   dab56:	4b02      	ldr	r3, [pc, #8]	; (dab60 <os_thread_cleanup+0xc>)
   dab58:	681b      	ldr	r3, [r3, #0]
   dab5a:	695b      	ldr	r3, [r3, #20]
   dab5c:	9301      	str	r3, [sp, #4]
   dab5e:	bd08      	pop	{r3, pc}
   dab60:	00030248 	.word	0x00030248

000dab64 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dab64:	b508      	push	{r3, lr}
   dab66:	4b02      	ldr	r3, [pc, #8]	; (dab70 <os_mutex_recursive_create+0xc>)
   dab68:	681b      	ldr	r3, [r3, #0]
   dab6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dab6c:	9301      	str	r3, [sp, #4]
   dab6e:	bd08      	pop	{r3, pc}
   dab70:	00030248 	.word	0x00030248

000dab74 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dab74:	b508      	push	{r3, lr}
   dab76:	4b02      	ldr	r3, [pc, #8]	; (dab80 <os_mutex_recursive_destroy+0xc>)
   dab78:	681b      	ldr	r3, [r3, #0]
   dab7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dab7c:	9301      	str	r3, [sp, #4]
   dab7e:	bd08      	pop	{r3, pc}
   dab80:	00030248 	.word	0x00030248

000dab84 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   dab84:	b508      	push	{r3, lr}
   dab86:	4b02      	ldr	r3, [pc, #8]	; (dab90 <HAL_Core_System_Reset_Ex+0xc>)
   dab88:	681b      	ldr	r3, [r3, #0]
   dab8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dab8c:	9301      	str	r3, [sp, #4]
   dab8e:	bd08      	pop	{r3, pc}
   dab90:	00030234 	.word	0x00030234

000dab94 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   dab94:	b508      	push	{r3, lr}
   dab96:	4b02      	ldr	r3, [pc, #8]	; (daba0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   dab98:	681b      	ldr	r3, [r3, #0]
   dab9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dab9c:	9301      	str	r3, [sp, #4]
   dab9e:	bd08      	pop	{r3, pc}
   daba0:	00030234 	.word	0x00030234

000daba4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   daba4:	b508      	push	{r3, lr}
   daba6:	4b02      	ldr	r3, [pc, #8]	; (dabb0 <HAL_RNG_GetRandomNumber+0xc>)
   daba8:	681b      	ldr	r3, [r3, #0]
   dabaa:	685b      	ldr	r3, [r3, #4]
   dabac:	9301      	str	r3, [sp, #4]
   dabae:	bd08      	pop	{r3, pc}
   dabb0:	00030218 	.word	0x00030218

000dabb4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dabb4:	b508      	push	{r3, lr}
   dabb6:	4b02      	ldr	r3, [pc, #8]	; (dabc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   dabb8:	681b      	ldr	r3, [r3, #0]
   dabba:	695b      	ldr	r3, [r3, #20]
   dabbc:	9301      	str	r3, [sp, #4]
   dabbe:	bd08      	pop	{r3, pc}
   dabc0:	00030218 	.word	0x00030218

000dabc4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   dabc4:	b508      	push	{r3, lr}
   dabc6:	4b02      	ldr	r3, [pc, #8]	; (dabd0 <HAL_RTC_Get_UnixTime+0xc>)
   dabc8:	681b      	ldr	r3, [r3, #0]
   dabca:	69db      	ldr	r3, [r3, #28]
   dabcc:	9301      	str	r3, [sp, #4]
   dabce:	bd08      	pop	{r3, pc}
   dabd0:	00030218 	.word	0x00030218

000dabd4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   dabd4:	b508      	push	{r3, lr}
   dabd6:	4b02      	ldr	r3, [pc, #8]	; (dabe0 <HAL_RTC_Time_Is_Valid+0xc>)
   dabd8:	681b      	ldr	r3, [r3, #0]
   dabda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dabdc:	9301      	str	r3, [sp, #4]
   dabde:	bd08      	pop	{r3, pc}
   dabe0:	00030218 	.word	0x00030218

000dabe4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dabe4:	b508      	push	{r3, lr}
   dabe6:	4b02      	ldr	r3, [pc, #8]	; (dabf0 <hal_timer_millis+0xc>)
   dabe8:	681b      	ldr	r3, [r3, #0]
   dabea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dabec:	9301      	str	r3, [sp, #4]
   dabee:	bd08      	pop	{r3, pc}
   dabf0:	00030218 	.word	0x00030218

000dabf4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   dabf4:	b508      	push	{r3, lr}
   dabf6:	4b02      	ldr	r3, [pc, #8]	; (dac00 <if_index_to_name+0xc>)
   dabf8:	681b      	ldr	r3, [r3, #0]
   dabfa:	695b      	ldr	r3, [r3, #20]
   dabfc:	9301      	str	r3, [sp, #4]
   dabfe:	bd08      	pop	{r3, pc}
   dac00:	0003026c 	.word	0x0003026c

000dac04 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   dac04:	b508      	push	{r3, lr}
   dac06:	4b02      	ldr	r3, [pc, #8]	; (dac10 <HAL_SPI_Send_Receive_Data+0xc>)
   dac08:	681b      	ldr	r3, [r3, #0]
   dac0a:	695b      	ldr	r3, [r3, #20]
   dac0c:	9301      	str	r3, [sp, #4]
   dac0e:	bd08      	pop	{r3, pc}
   dac10:	00030230 	.word	0x00030230

000dac14 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   dac14:	b508      	push	{r3, lr}
   dac16:	4b02      	ldr	r3, [pc, #8]	; (dac20 <HAL_SPI_Init+0xc>)
   dac18:	681b      	ldr	r3, [r3, #0]
   dac1a:	69db      	ldr	r3, [r3, #28]
   dac1c:	9301      	str	r3, [sp, #4]
   dac1e:	bd08      	pop	{r3, pc}
   dac20:	00030230 	.word	0x00030230

000dac24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   dac24:	b508      	push	{r3, lr}
   dac26:	4b02      	ldr	r3, [pc, #8]	; (dac30 <HAL_SPI_Is_Enabled+0xc>)
   dac28:	681b      	ldr	r3, [r3, #0]
   dac2a:	6a1b      	ldr	r3, [r3, #32]
   dac2c:	9301      	str	r3, [sp, #4]
   dac2e:	bd08      	pop	{r3, pc}
   dac30:	00030230 	.word	0x00030230

000dac34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   dac34:	b508      	push	{r3, lr}
   dac36:	4b02      	ldr	r3, [pc, #8]	; (dac40 <HAL_Pin_Map+0xc>)
   dac38:	681b      	ldr	r3, [r3, #0]
   dac3a:	681b      	ldr	r3, [r3, #0]
   dac3c:	9301      	str	r3, [sp, #4]
   dac3e:	bd08      	pop	{r3, pc}
   dac40:	0003022c 	.word	0x0003022c

000dac44 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dac44:	b508      	push	{r3, lr}
   dac46:	4b02      	ldr	r3, [pc, #8]	; (dac50 <HAL_Validate_Pin_Function+0xc>)
   dac48:	681b      	ldr	r3, [r3, #0]
   dac4a:	685b      	ldr	r3, [r3, #4]
   dac4c:	9301      	str	r3, [sp, #4]
   dac4e:	bd08      	pop	{r3, pc}
   dac50:	0003022c 	.word	0x0003022c

000dac54 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   dac54:	b508      	push	{r3, lr}
   dac56:	4b02      	ldr	r3, [pc, #8]	; (dac60 <HAL_Pin_Mode+0xc>)
   dac58:	681b      	ldr	r3, [r3, #0]
   dac5a:	689b      	ldr	r3, [r3, #8]
   dac5c:	9301      	str	r3, [sp, #4]
   dac5e:	bd08      	pop	{r3, pc}
   dac60:	0003022c 	.word	0x0003022c

000dac64 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dac64:	b508      	push	{r3, lr}
   dac66:	4b02      	ldr	r3, [pc, #8]	; (dac70 <HAL_Get_Pin_Mode+0xc>)
   dac68:	681b      	ldr	r3, [r3, #0]
   dac6a:	68db      	ldr	r3, [r3, #12]
   dac6c:	9301      	str	r3, [sp, #4]
   dac6e:	bd08      	pop	{r3, pc}
   dac70:	0003022c 	.word	0x0003022c

000dac74 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dac74:	b508      	push	{r3, lr}
   dac76:	4b02      	ldr	r3, [pc, #8]	; (dac80 <HAL_GPIO_Write+0xc>)
   dac78:	681b      	ldr	r3, [r3, #0]
   dac7a:	691b      	ldr	r3, [r3, #16]
   dac7c:	9301      	str	r3, [sp, #4]
   dac7e:	bd08      	pop	{r3, pc}
   dac80:	0003022c 	.word	0x0003022c

000dac84 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   dac84:	b508      	push	{r3, lr}
   dac86:	4b02      	ldr	r3, [pc, #8]	; (dac90 <HAL_GPIO_Read+0xc>)
   dac88:	681b      	ldr	r3, [r3, #0]
   dac8a:	695b      	ldr	r3, [r3, #20]
   dac8c:	9301      	str	r3, [sp, #4]
   dac8e:	bd08      	pop	{r3, pc}
   dac90:	0003022c 	.word	0x0003022c

000dac94 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   dac94:	b508      	push	{r3, lr}
   dac96:	4b02      	ldr	r3, [pc, #8]	; (daca0 <HAL_Interrupts_Attach+0xc>)
   dac98:	681b      	ldr	r3, [r3, #0]
   dac9a:	699b      	ldr	r3, [r3, #24]
   dac9c:	9301      	str	r3, [sp, #4]
   dac9e:	bd08      	pop	{r3, pc}
   daca0:	0003022c 	.word	0x0003022c

000daca4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   daca4:	b508      	push	{r3, lr}
   daca6:	4b02      	ldr	r3, [pc, #8]	; (dacb0 <HAL_Interrupts_Detach+0xc>)
   daca8:	681b      	ldr	r3, [r3, #0]
   dacaa:	69db      	ldr	r3, [r3, #28]
   dacac:	9301      	str	r3, [sp, #4]
   dacae:	bd08      	pop	{r3, pc}
   dacb0:	0003022c 	.word	0x0003022c

000dacb4 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   dacb4:	b508      	push	{r3, lr}
   dacb6:	4b02      	ldr	r3, [pc, #8]	; (dacc0 <HAL_DAC_Write+0xc>)
   dacb8:	681b      	ldr	r3, [r3, #0]
   dacba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dacbc:	9301      	str	r3, [sp, #4]
   dacbe:	bd08      	pop	{r3, pc}
   dacc0:	0003022c 	.word	0x0003022c

000dacc4 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   dacc4:	b508      	push	{r3, lr}
   dacc6:	4b02      	ldr	r3, [pc, #8]	; (dacd0 <HAL_ADC_Read+0xc>)
   dacc8:	681b      	ldr	r3, [r3, #0]
   dacca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daccc:	9301      	str	r3, [sp, #4]
   dacce:	bd08      	pop	{r3, pc}
   dacd0:	0003022c 	.word	0x0003022c

000dacd4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   dacd4:	b508      	push	{r3, lr}
   dacd6:	4b02      	ldr	r3, [pc, #8]	; (dace0 <HAL_PWM_Write_Ext+0xc>)
   dacd8:	681b      	ldr	r3, [r3, #0]
   dacda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   dacdc:	9301      	str	r3, [sp, #4]
   dacde:	bd08      	pop	{r3, pc}
   dace0:	0003022c 	.word	0x0003022c

000dace4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dace4:	b508      	push	{r3, lr}
   dace6:	4b02      	ldr	r3, [pc, #8]	; (dacf0 <netdb_freeaddrinfo+0xc>)
   dace8:	681b      	ldr	r3, [r3, #0]
   dacea:	689b      	ldr	r3, [r3, #8]
   dacec:	9301      	str	r3, [sp, #4]
   dacee:	bd08      	pop	{r3, pc}
   dacf0:	00030268 	.word	0x00030268

000dacf4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dacf4:	b508      	push	{r3, lr}
   dacf6:	4b02      	ldr	r3, [pc, #8]	; (dad00 <netdb_getaddrinfo+0xc>)
   dacf8:	681b      	ldr	r3, [r3, #0]
   dacfa:	68db      	ldr	r3, [r3, #12]
   dacfc:	9301      	str	r3, [sp, #4]
   dacfe:	bd08      	pop	{r3, pc}
   dad00:	00030268 	.word	0x00030268

000dad04 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   dad04:	b508      	push	{r3, lr}
   dad06:	4b02      	ldr	r3, [pc, #8]	; (dad10 <LED_SetSignalingColor+0xc>)
   dad08:	681b      	ldr	r3, [r3, #0]
   dad0a:	685b      	ldr	r3, [r3, #4]
   dad0c:	9301      	str	r3, [sp, #4]
   dad0e:	bd08      	pop	{r3, pc}
   dad10:	00030260 	.word	0x00030260

000dad14 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   dad14:	b508      	push	{r3, lr}
   dad16:	4b02      	ldr	r3, [pc, #8]	; (dad20 <LED_Signaling_Start+0xc>)
   dad18:	681b      	ldr	r3, [r3, #0]
   dad1a:	689b      	ldr	r3, [r3, #8]
   dad1c:	9301      	str	r3, [sp, #4]
   dad1e:	bd08      	pop	{r3, pc}
   dad20:	00030260 	.word	0x00030260

000dad24 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   dad24:	b508      	push	{r3, lr}
   dad26:	4b02      	ldr	r3, [pc, #8]	; (dad30 <LED_Signaling_Stop+0xc>)
   dad28:	681b      	ldr	r3, [r3, #0]
   dad2a:	68db      	ldr	r3, [r3, #12]
   dad2c:	9301      	str	r3, [sp, #4]
   dad2e:	bd08      	pop	{r3, pc}
   dad30:	00030260 	.word	0x00030260

000dad34 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   dad34:	b508      	push	{r3, lr}
   dad36:	4b02      	ldr	r3, [pc, #8]	; (dad40 <LED_RGB_IsOverRidden+0xc>)
   dad38:	681b      	ldr	r3, [r3, #0]
   dad3a:	699b      	ldr	r3, [r3, #24]
   dad3c:	9301      	str	r3, [sp, #4]
   dad3e:	bd08      	pop	{r3, pc}
   dad40:	00030260 	.word	0x00030260

000dad44 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   dad44:	b508      	push	{r3, lr}
   dad46:	4b02      	ldr	r3, [pc, #8]	; (dad50 <LED_On+0xc>)
   dad48:	681b      	ldr	r3, [r3, #0]
   dad4a:	69db      	ldr	r3, [r3, #28]
   dad4c:	9301      	str	r3, [sp, #4]
   dad4e:	bd08      	pop	{r3, pc}
   dad50:	00030260 	.word	0x00030260

000dad54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dad54:	b508      	push	{r3, lr}
   dad56:	4b02      	ldr	r3, [pc, #8]	; (dad60 <log_message+0xc>)
   dad58:	681b      	ldr	r3, [r3, #0]
   dad5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dad5c:	9301      	str	r3, [sp, #4]
   dad5e:	bd08      	pop	{r3, pc}
   dad60:	00030260 	.word	0x00030260

000dad64 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   dad64:	b508      	push	{r3, lr}
   dad66:	4b03      	ldr	r3, [pc, #12]	; (dad74 <led_set_status_active+0x10>)
   dad68:	681b      	ldr	r3, [r3, #0]
   dad6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   dad6e:	9301      	str	r3, [sp, #4]
   dad70:	bd08      	pop	{r3, pc}
   dad72:	0000      	.short	0x0000
   dad74:	00030260 	.word	0x00030260

000dad78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dad78:	b508      	push	{r3, lr}
   dad7a:	4b02      	ldr	r3, [pc, #8]	; (dad84 <spark_process+0xc>)
   dad7c:	681b      	ldr	r3, [r3, #0]
   dad7e:	689b      	ldr	r3, [r3, #8]
   dad80:	9301      	str	r3, [sp, #4]
   dad82:	bd08      	pop	{r3, pc}
   dad84:	00030244 	.word	0x00030244

000dad88 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dad88:	b508      	push	{r3, lr}
   dad8a:	4b02      	ldr	r3, [pc, #8]	; (dad94 <spark_cloud_flag_connect+0xc>)
   dad8c:	681b      	ldr	r3, [r3, #0]
   dad8e:	68db      	ldr	r3, [r3, #12]
   dad90:	9301      	str	r3, [sp, #4]
   dad92:	bd08      	pop	{r3, pc}
   dad94:	00030244 	.word	0x00030244

000dad98 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dad98:	b508      	push	{r3, lr}
   dad9a:	4b02      	ldr	r3, [pc, #8]	; (dada4 <spark_cloud_flag_connected+0xc>)
   dad9c:	681b      	ldr	r3, [r3, #0]
   dad9e:	695b      	ldr	r3, [r3, #20]
   dada0:	9301      	str	r3, [sp, #4]
   dada2:	bd08      	pop	{r3, pc}
   dada4:	00030244 	.word	0x00030244

000dada8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dada8:	b508      	push	{r3, lr}
   dadaa:	4b02      	ldr	r3, [pc, #8]	; (dadb4 <spark_send_event+0xc>)
   dadac:	681b      	ldr	r3, [r3, #0]
   dadae:	6a1b      	ldr	r3, [r3, #32]
   dadb0:	9301      	str	r3, [sp, #4]
   dadb2:	bd08      	pop	{r3, pc}
   dadb4:	00030244 	.word	0x00030244

000dadb8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   dadb8:	b508      	push	{r3, lr}
   dadba:	4b02      	ldr	r3, [pc, #8]	; (dadc4 <spark_subscribe+0xc>)
   dadbc:	681b      	ldr	r3, [r3, #0]
   dadbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dadc0:	9301      	str	r3, [sp, #4]
   dadc2:	bd08      	pop	{r3, pc}
   dadc4:	00030244 	.word	0x00030244

000dadc8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dadc8:	b508      	push	{r3, lr}
   dadca:	4b02      	ldr	r3, [pc, #8]	; (dadd4 <spark_sync_time_pending+0xc>)
   dadcc:	681b      	ldr	r3, [r3, #0]
   dadce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dadd0:	9301      	str	r3, [sp, #4]
   dadd2:	bd08      	pop	{r3, pc}
   dadd4:	00030244 	.word	0x00030244

000dadd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dadd8:	b508      	push	{r3, lr}
   dadda:	4b02      	ldr	r3, [pc, #8]	; (dade4 <spark_set_random_seed_from_cloud_handler+0xc>)
   daddc:	681b      	ldr	r3, [r3, #0]
   dadde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dade0:	9301      	str	r3, [sp, #4]
   dade2:	bd08      	pop	{r3, pc}
   dade4:	00030244 	.word	0x00030244

000dade8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dade8:	b508      	push	{r3, lr}
   dadea:	4b02      	ldr	r3, [pc, #8]	; (dadf4 <network_connect+0xc>)
   dadec:	681b      	ldr	r3, [r3, #0]
   dadee:	685b      	ldr	r3, [r3, #4]
   dadf0:	9301      	str	r3, [sp, #4]
   dadf2:	bd08      	pop	{r3, pc}
   dadf4:	00030240 	.word	0x00030240

000dadf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dadf8:	b508      	push	{r3, lr}
   dadfa:	4b02      	ldr	r3, [pc, #8]	; (dae04 <network_connecting+0xc>)
   dadfc:	681b      	ldr	r3, [r3, #0]
   dadfe:	689b      	ldr	r3, [r3, #8]
   dae00:	9301      	str	r3, [sp, #4]
   dae02:	bd08      	pop	{r3, pc}
   dae04:	00030240 	.word	0x00030240

000dae08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dae08:	b508      	push	{r3, lr}
   dae0a:	4b02      	ldr	r3, [pc, #8]	; (dae14 <network_disconnect+0xc>)
   dae0c:	681b      	ldr	r3, [r3, #0]
   dae0e:	68db      	ldr	r3, [r3, #12]
   dae10:	9301      	str	r3, [sp, #4]
   dae12:	bd08      	pop	{r3, pc}
   dae14:	00030240 	.word	0x00030240

000dae18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dae18:	b508      	push	{r3, lr}
   dae1a:	4b02      	ldr	r3, [pc, #8]	; (dae24 <network_ready+0xc>)
   dae1c:	681b      	ldr	r3, [r3, #0]
   dae1e:	691b      	ldr	r3, [r3, #16]
   dae20:	9301      	str	r3, [sp, #4]
   dae22:	bd08      	pop	{r3, pc}
   dae24:	00030240 	.word	0x00030240

000dae28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dae28:	b508      	push	{r3, lr}
   dae2a:	4b02      	ldr	r3, [pc, #8]	; (dae34 <network_on+0xc>)
   dae2c:	681b      	ldr	r3, [r3, #0]
   dae2e:	695b      	ldr	r3, [r3, #20]
   dae30:	9301      	str	r3, [sp, #4]
   dae32:	bd08      	pop	{r3, pc}
   dae34:	00030240 	.word	0x00030240

000dae38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dae38:	b508      	push	{r3, lr}
   dae3a:	4b02      	ldr	r3, [pc, #8]	; (dae44 <network_off+0xc>)
   dae3c:	681b      	ldr	r3, [r3, #0]
   dae3e:	699b      	ldr	r3, [r3, #24]
   dae40:	9301      	str	r3, [sp, #4]
   dae42:	bd08      	pop	{r3, pc}
   dae44:	00030240 	.word	0x00030240

000dae48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dae48:	b508      	push	{r3, lr}
   dae4a:	4b02      	ldr	r3, [pc, #8]	; (dae54 <network_listen+0xc>)
   dae4c:	681b      	ldr	r3, [r3, #0]
   dae4e:	69db      	ldr	r3, [r3, #28]
   dae50:	9301      	str	r3, [sp, #4]
   dae52:	bd08      	pop	{r3, pc}
   dae54:	00030240 	.word	0x00030240

000dae58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dae58:	b508      	push	{r3, lr}
   dae5a:	4b02      	ldr	r3, [pc, #8]	; (dae64 <network_listening+0xc>)
   dae5c:	681b      	ldr	r3, [r3, #0]
   dae5e:	6a1b      	ldr	r3, [r3, #32]
   dae60:	9301      	str	r3, [sp, #4]
   dae62:	bd08      	pop	{r3, pc}
   dae64:	00030240 	.word	0x00030240

000dae68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dae68:	b508      	push	{r3, lr}
   dae6a:	4b02      	ldr	r3, [pc, #8]	; (dae74 <network_set_listen_timeout+0xc>)
   dae6c:	681b      	ldr	r3, [r3, #0]
   dae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dae70:	9301      	str	r3, [sp, #4]
   dae72:	bd08      	pop	{r3, pc}
   dae74:	00030240 	.word	0x00030240

000dae78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dae78:	b508      	push	{r3, lr}
   dae7a:	4b02      	ldr	r3, [pc, #8]	; (dae84 <network_get_listen_timeout+0xc>)
   dae7c:	681b      	ldr	r3, [r3, #0]
   dae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dae80:	9301      	str	r3, [sp, #4]
   dae82:	bd08      	pop	{r3, pc}
   dae84:	00030240 	.word	0x00030240

000dae88 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dae88:	b508      	push	{r3, lr}
   dae8a:	4b02      	ldr	r3, [pc, #8]	; (dae94 <system_mode+0xc>)
   dae8c:	681b      	ldr	r3, [r3, #0]
   dae8e:	681b      	ldr	r3, [r3, #0]
   dae90:	9301      	str	r3, [sp, #4]
   dae92:	bd08      	pop	{r3, pc}
   dae94:	00030220 	.word	0x00030220

000dae98 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dae98:	b508      	push	{r3, lr}
   dae9a:	4b02      	ldr	r3, [pc, #8]	; (daea4 <set_system_mode+0xc>)
   dae9c:	681b      	ldr	r3, [r3, #0]
   dae9e:	685b      	ldr	r3, [r3, #4]
   daea0:	9301      	str	r3, [sp, #4]
   daea2:	bd08      	pop	{r3, pc}
   daea4:	00030220 	.word	0x00030220

000daea8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   daea8:	b508      	push	{r3, lr}
   daeaa:	4b02      	ldr	r3, [pc, #8]	; (daeb4 <system_delay_ms+0xc>)
   daeac:	681b      	ldr	r3, [r3, #0]
   daeae:	695b      	ldr	r3, [r3, #20]
   daeb0:	9301      	str	r3, [sp, #4]
   daeb2:	bd08      	pop	{r3, pc}
   daeb4:	00030220 	.word	0x00030220

000daeb8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   daeb8:	b508      	push	{r3, lr}
   daeba:	4b02      	ldr	r3, [pc, #8]	; (daec4 <system_sleep+0xc>)
   daebc:	681b      	ldr	r3, [r3, #0]
   daebe:	699b      	ldr	r3, [r3, #24]
   daec0:	9301      	str	r3, [sp, #4]
   daec2:	bd08      	pop	{r3, pc}
   daec4:	00030220 	.word	0x00030220

000daec8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   daec8:	b508      	push	{r3, lr}
   daeca:	4b02      	ldr	r3, [pc, #8]	; (daed4 <application_thread_current+0xc>)
   daecc:	681b      	ldr	r3, [r3, #0]
   daece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   daed0:	9301      	str	r3, [sp, #4]
   daed2:	bd08      	pop	{r3, pc}
   daed4:	00030220 	.word	0x00030220

000daed8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   daed8:	b508      	push	{r3, lr}
   daeda:	4b02      	ldr	r3, [pc, #8]	; (daee4 <application_thread_invoke+0xc>)
   daedc:	681b      	ldr	r3, [r3, #0]
   daede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   daee0:	9301      	str	r3, [sp, #4]
   daee2:	bd08      	pop	{r3, pc}
   daee4:	00030220 	.word	0x00030220

000daee8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   daee8:	b508      	push	{r3, lr}
   daeea:	4b02      	ldr	r3, [pc, #8]	; (daef4 <system_thread_get_state+0xc>)
   daeec:	681b      	ldr	r3, [r3, #0]
   daeee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   daef0:	9301      	str	r3, [sp, #4]
   daef2:	bd08      	pop	{r3, pc}
   daef4:	00030220 	.word	0x00030220

000daef8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   daef8:	b508      	push	{r3, lr}
   daefa:	4b02      	ldr	r3, [pc, #8]	; (daf04 <led_pattern_period+0xc>)
   daefc:	681b      	ldr	r3, [r3, #0]
   daefe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   daf00:	9301      	str	r3, [sp, #4]
   daf02:	bd08      	pop	{r3, pc}
   daf04:	00030220 	.word	0x00030220

000daf08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   daf08:	b508      	push	{r3, lr}
   daf0a:	4b03      	ldr	r3, [pc, #12]	; (daf18 <system_ctrl_set_app_request_handler+0x10>)
   daf0c:	681b      	ldr	r3, [r3, #0]
   daf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   daf12:	9301      	str	r3, [sp, #4]
   daf14:	bd08      	pop	{r3, pc}
   daf16:	0000      	.short	0x0000
   daf18:	00030220 	.word	0x00030220

000daf1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   daf1c:	b508      	push	{r3, lr}
   daf1e:	4b03      	ldr	r3, [pc, #12]	; (daf2c <system_ctrl_set_result+0x10>)
   daf20:	681b      	ldr	r3, [r3, #0]
   daf22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   daf26:	9301      	str	r3, [sp, #4]
   daf28:	bd08      	pop	{r3, pc}
   daf2a:	0000      	.short	0x0000
   daf2c:	00030220 	.word	0x00030220

000daf30 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   daf30:	b508      	push	{r3, lr}
   daf32:	4b03      	ldr	r3, [pc, #12]	; (daf40 <system_sleep_pins+0x10>)
   daf34:	681b      	ldr	r3, [r3, #0]
   daf36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   daf3a:	9301      	str	r3, [sp, #4]
   daf3c:	bd08      	pop	{r3, pc}
   daf3e:	0000      	.short	0x0000
   daf40:	00030220 	.word	0x00030220

000daf44 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   daf44:	b508      	push	{r3, lr}
   daf46:	4b02      	ldr	r3, [pc, #8]	; (daf50 <malloc+0xc>)
   daf48:	681b      	ldr	r3, [r3, #0]
   daf4a:	681b      	ldr	r3, [r3, #0]
   daf4c:	9301      	str	r3, [sp, #4]
   daf4e:	bd08      	pop	{r3, pc}
   daf50:	0003021c 	.word	0x0003021c

000daf54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   daf54:	b508      	push	{r3, lr}
   daf56:	4b02      	ldr	r3, [pc, #8]	; (daf60 <free+0xc>)
   daf58:	681b      	ldr	r3, [r3, #0]
   daf5a:	685b      	ldr	r3, [r3, #4]
   daf5c:	9301      	str	r3, [sp, #4]
   daf5e:	bd08      	pop	{r3, pc}
   daf60:	0003021c 	.word	0x0003021c

000daf64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   daf64:	b508      	push	{r3, lr}
   daf66:	4b02      	ldr	r3, [pc, #8]	; (daf70 <realloc+0xc>)
   daf68:	681b      	ldr	r3, [r3, #0]
   daf6a:	689b      	ldr	r3, [r3, #8]
   daf6c:	9301      	str	r3, [sp, #4]
   daf6e:	bd08      	pop	{r3, pc}
   daf70:	0003021c 	.word	0x0003021c

000daf74 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   daf74:	b508      	push	{r3, lr}
   daf76:	4b02      	ldr	r3, [pc, #8]	; (daf80 <siprintf+0xc>)
   daf78:	681b      	ldr	r3, [r3, #0]
   daf7a:	691b      	ldr	r3, [r3, #16]
   daf7c:	9301      	str	r3, [sp, #4]
   daf7e:	bd08      	pop	{r3, pc}
   daf80:	0003021c 	.word	0x0003021c

000daf84 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   daf84:	b508      	push	{r3, lr}
   daf86:	4b02      	ldr	r3, [pc, #8]	; (daf90 <siscanf+0xc>)
   daf88:	681b      	ldr	r3, [r3, #0]
   daf8a:	699b      	ldr	r3, [r3, #24]
   daf8c:	9301      	str	r3, [sp, #4]
   daf8e:	bd08      	pop	{r3, pc}
   daf90:	0003021c 	.word	0x0003021c

000daf94 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   daf94:	b508      	push	{r3, lr}
   daf96:	4b02      	ldr	r3, [pc, #8]	; (dafa0 <snprintf+0xc>)
   daf98:	681b      	ldr	r3, [r3, #0]
   daf9a:	69db      	ldr	r3, [r3, #28]
   daf9c:	9301      	str	r3, [sp, #4]
   daf9e:	bd08      	pop	{r3, pc}
   dafa0:	0003021c 	.word	0x0003021c

000dafa4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   dafa4:	b508      	push	{r3, lr}
   dafa6:	4b02      	ldr	r3, [pc, #8]	; (dafb0 <sniprintf+0xc>)
   dafa8:	681b      	ldr	r3, [r3, #0]
   dafaa:	6a1b      	ldr	r3, [r3, #32]
   dafac:	9301      	str	r3, [sp, #4]
   dafae:	bd08      	pop	{r3, pc}
   dafb0:	0003021c 	.word	0x0003021c

000dafb4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dafb4:	b508      	push	{r3, lr}
   dafb6:	4b02      	ldr	r3, [pc, #8]	; (dafc0 <vsnprintf+0xc>)
   dafb8:	681b      	ldr	r3, [r3, #0]
   dafba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dafbc:	9301      	str	r3, [sp, #4]
   dafbe:	bd08      	pop	{r3, pc}
   dafc0:	0003021c 	.word	0x0003021c

000dafc4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dafc4:	b508      	push	{r3, lr}
   dafc6:	4b02      	ldr	r3, [pc, #8]	; (dafd0 <abort+0xc>)
   dafc8:	681b      	ldr	r3, [r3, #0]
   dafca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dafcc:	9301      	str	r3, [sp, #4]
   dafce:	bd08      	pop	{r3, pc}
   dafd0:	0003021c 	.word	0x0003021c

000dafd4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dafd4:	b508      	push	{r3, lr}
   dafd6:	4b02      	ldr	r3, [pc, #8]	; (dafe0 <_malloc_r+0xc>)
   dafd8:	681b      	ldr	r3, [r3, #0]
   dafda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dafdc:	9301      	str	r3, [sp, #4]
   dafde:	bd08      	pop	{r3, pc}
   dafe0:	0003021c 	.word	0x0003021c

000dafe4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dafe4:	b508      	push	{r3, lr}
   dafe6:	4b02      	ldr	r3, [pc, #8]	; (daff0 <__errno+0xc>)
   dafe8:	681b      	ldr	r3, [r3, #0]
   dafea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dafec:	9301      	str	r3, [sp, #4]
   dafee:	bd08      	pop	{r3, pc}
   daff0:	0003021c 	.word	0x0003021c

000daff4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   daff4:	2300      	movs	r3, #0
   daff6:	461a      	mov	r2, r3
   daff8:	6840      	ldr	r0, [r0, #4]
   daffa:	f7ff bef5 	b.w	dade8 <network_connect>

000daffe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   daffe:	2200      	movs	r2, #0
   db000:	2102      	movs	r1, #2
   db002:	6840      	ldr	r0, [r0, #4]
   db004:	f7ff bf00 	b.w	dae08 <network_disconnect>

000db008 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db008:	2200      	movs	r2, #0
   db00a:	4611      	mov	r1, r2
   db00c:	6840      	ldr	r0, [r0, #4]
   db00e:	f7ff bef3 	b.w	dadf8 <network_connecting>

000db012 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db012:	2200      	movs	r2, #0
   db014:	4611      	mov	r1, r2
   db016:	6840      	ldr	r0, [r0, #4]
   db018:	f7ff befe 	b.w	dae18 <network_ready>

000db01c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db01c:	2300      	movs	r3, #0
   db01e:	461a      	mov	r2, r3
   db020:	4619      	mov	r1, r3
   db022:	6840      	ldr	r0, [r0, #4]
   db024:	f7ff bf00 	b.w	dae28 <network_on>

000db028 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db028:	2300      	movs	r3, #0
   db02a:	461a      	mov	r2, r3
   db02c:	4619      	mov	r1, r3
   db02e:	6840      	ldr	r0, [r0, #4]
   db030:	f7ff bf02 	b.w	dae38 <network_off>

000db034 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db034:	2200      	movs	r2, #0
   db036:	f081 0101 	eor.w	r1, r1, #1
   db03a:	6840      	ldr	r0, [r0, #4]
   db03c:	f7ff bf04 	b.w	dae48 <network_listen>

000db040 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db040:	2200      	movs	r2, #0
   db042:	6840      	ldr	r0, [r0, #4]
   db044:	f7ff bf10 	b.w	dae68 <network_set_listen_timeout>

000db048 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db048:	2200      	movs	r2, #0
   db04a:	4611      	mov	r1, r2
   db04c:	6840      	ldr	r0, [r0, #4]
   db04e:	f7ff bf13 	b.w	dae78 <network_get_listen_timeout>

000db052 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db052:	2200      	movs	r2, #0
   db054:	4611      	mov	r1, r2
   db056:	6840      	ldr	r0, [r0, #4]
   db058:	f7ff befe 	b.w	dae58 <network_listening>

000db05c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db060:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   db062:	b095      	sub	sp, #84	; 0x54
   db064:	4616      	mov	r6, r2
   db066:	460d      	mov	r5, r1
   db068:	4607      	mov	r7, r0
    IPAddress addr;
   db06a:	f000 fe8d 	bl	dbd88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   db06e:	4621      	mov	r1, r4
   db070:	2220      	movs	r2, #32
   db072:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db074:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db076:	f008 ffa8 	bl	e3fca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db07a:	2340      	movs	r3, #64	; 0x40
   db07c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db07e:	4621      	mov	r1, r4
   db080:	466b      	mov	r3, sp
   db082:	aa0c      	add	r2, sp, #48	; 0x30
   db084:	4630      	mov	r0, r6
   db086:	f7ff fe35 	bl	dacf4 <netdb_getaddrinfo>
    if (!r) {
   db08a:	4604      	mov	r4, r0
   db08c:	2800      	cmp	r0, #0
   db08e:	d144      	bne.n	db11a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db090:	4602      	mov	r2, r0
   db092:	2101      	movs	r1, #1
   db094:	6868      	ldr	r0, [r5, #4]
   db096:	f7ff febf 	bl	dae18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db09a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db09c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db09e:	4622      	mov	r2, r4
   db0a0:	6868      	ldr	r0, [r5, #4]
   db0a2:	f7ff feb9 	bl	dae18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db0a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db0a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   db0aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db0ac:	2e00      	cmp	r6, #0
   db0ae:	d034      	beq.n	db11a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   db0b0:	2900      	cmp	r1, #0
   db0b2:	d132      	bne.n	db11a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db0b4:	6873      	ldr	r3, [r6, #4]
   db0b6:	2b02      	cmp	r3, #2
   db0b8:	d002      	beq.n	db0c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   db0ba:	2b0a      	cmp	r3, #10
   db0bc:	d009      	beq.n	db0d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   db0be:	e02a      	b.n	db116 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   db0c0:	f1b8 0f00 	cmp.w	r8, #0
   db0c4:	d027      	beq.n	db116 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db0c6:	6971      	ldr	r1, [r6, #20]
   db0c8:	4638      	mov	r0, r7
   db0ca:	3104      	adds	r1, #4
   db0cc:	f000 fe9f 	bl	dbe0e <_ZN9IPAddressaSEPKh>
   db0d0:	e020      	b.n	db114 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db0d2:	f1b9 0f00 	cmp.w	r9, #0
   db0d6:	d01e      	beq.n	db116 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db0d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db0da:	2211      	movs	r2, #17
   db0dc:	a801      	add	r0, sp, #4
   db0de:	f008 ff74 	bl	e3fca <memset>
                    a.v = 6;
   db0e2:	2306      	movs	r3, #6
   db0e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db0e8:	ad01      	add	r5, sp, #4
   db0ea:	f104 0308 	add.w	r3, r4, #8
   db0ee:	3418      	adds	r4, #24
   db0f0:	6818      	ldr	r0, [r3, #0]
   db0f2:	6859      	ldr	r1, [r3, #4]
   db0f4:	462a      	mov	r2, r5
   db0f6:	c203      	stmia	r2!, {r0, r1}
   db0f8:	3308      	adds	r3, #8
   db0fa:	42a3      	cmp	r3, r4
   db0fc:	4615      	mov	r5, r2
   db0fe:	d1f7      	bne.n	db0f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   db100:	a901      	add	r1, sp, #4
   db102:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db104:	ad07      	add	r5, sp, #28
   db106:	f000 fe4d 	bl	dbda4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db10a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db10c:	1d3c      	adds	r4, r7, #4
   db10e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db110:	682b      	ldr	r3, [r5, #0]
   db112:	7023      	strb	r3, [r4, #0]
                    ok = true;
   db114:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db116:	69f6      	ldr	r6, [r6, #28]
   db118:	e7c8      	b.n	db0ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db11a:	9800      	ldr	r0, [sp, #0]
   db11c:	f7ff fde2 	bl	dace4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db120:	4638      	mov	r0, r7
   db122:	b015      	add	sp, #84	; 0x54
   db124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db128 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   db128:	4b02      	ldr	r3, [pc, #8]	; (db134 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db12a:	4a03      	ldr	r2, [pc, #12]	; (db138 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db12c:	601a      	str	r2, [r3, #0]
   db12e:	2200      	movs	r2, #0
   db130:	605a      	str	r2, [r3, #4]
   db132:	4770      	bx	lr
   db134:	2003e380 	.word	0x2003e380
   db138:	000e87b4 	.word	0x000e87b4

000db13c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db13e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db140:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   db142:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   db146:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db148:	2201      	movs	r2, #1
   db14a:	f04f 33ff 	mov.w	r3, #4294967295
   db14e:	4621      	mov	r1, r4
   db150:	47a8      	blx	r5
}
   db152:	b003      	add	sp, #12
   db154:	bd30      	pop	{r4, r5, pc}

000db156 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   db156:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db158:	6803      	ldr	r3, [r0, #0]
   db15a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   db15c:	f04f 33ff 	mov.w	r3, #4294967295
   db160:	46a4      	mov	ip, r4
}
   db162:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   db166:	4760      	bx	ip

000db168 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db16a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   db16c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   db16e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   db172:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   db174:	4621      	mov	r1, r4
   db176:	4613      	mov	r3, r2
   db178:	2201      	movs	r2, #1
   db17a:	47a8      	blx	r5
}
   db17c:	b003      	add	sp, #12
   db17e:	bd30      	pop	{r4, r5, pc}

000db180 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   db180:	4770      	bx	lr

000db182 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db182:	b538      	push	{r3, r4, r5, lr}
   db184:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   db186:	681a      	ldr	r2, [r3, #0]
   db188:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   db18a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   db18c:	da05      	bge.n	db19a <_ZN9TCPClient9connectedEv+0x18>
   db18e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db192:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db196:	429a      	cmp	r2, r3
   db198:	d001      	beq.n	db19e <_ZN9TCPClient9connectedEv+0x1c>
   db19a:	2501      	movs	r5, #1
   db19c:	e00b      	b.n	db1b6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   db19e:	6803      	ldr	r3, [r0, #0]
   db1a0:	691b      	ldr	r3, [r3, #16]
   db1a2:	4798      	blx	r3
   db1a4:	2800      	cmp	r0, #0
   db1a6:	bf14      	ite	ne
   db1a8:	2501      	movne	r5, #1
   db1aa:	2500      	moveq	r5, #0
        if (!rv) {
   db1ac:	d103      	bne.n	db1b6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   db1ae:	6823      	ldr	r3, [r4, #0]
   db1b0:	4620      	mov	r0, r4
   db1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db1b4:	4798      	blx	r3
        }
    }
    return rv;
}
   db1b6:	4628      	mov	r0, r5
   db1b8:	bd38      	pop	{r3, r4, r5, pc}

000db1ba <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   db1ba:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   db1bc:	6818      	ldr	r0, [r3, #0]
}
   db1be:	43c0      	mvns	r0, r0
   db1c0:	0fc0      	lsrs	r0, r0, #31
   db1c2:	4770      	bx	lr

000db1c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db1c4:	4770      	bx	lr

000db1c6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   db1c6:	2000      	movs	r0, #0
   db1c8:	4770      	bx	lr

000db1ca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   db1ca:	b510      	push	{r4, lr}
   db1cc:	2114      	movs	r1, #20
   db1ce:	4604      	mov	r4, r0
   db1d0:	f002 fa92 	bl	dd6f8 <_ZdlPvj>
   db1d4:	4620      	mov	r0, r4
   db1d6:	bd10      	pop	{r4, pc}

000db1d8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   db1d8:	f7f8 bf61 	b.w	d409e <_ZdlPv>

000db1dc <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db1dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db1de:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   db1e0:	2200      	movs	r2, #0
   db1e2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   db1e4:	9202      	str	r2, [sp, #8]
   db1e6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   db1e8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   db1ea:	4604      	mov	r4, r0
   db1ec:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   db1ee:	d008      	beq.n	db202 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   db1f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db1f4:	fbb3 f1f2 	udiv	r1, r3, r2
   db1f8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   db1fa:	fb02 3111 	mls	r1, r2, r1, r3
   db1fe:	434a      	muls	r2, r1
   db200:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   db202:	6960      	ldr	r0, [r4, #20]
   db204:	2308      	movs	r3, #8
   db206:	9300      	str	r3, [sp, #0]
   db208:	f241 0205 	movw	r2, #4101	; 0x1005
   db20c:	446b      	add	r3, sp
   db20e:	f640 71ff 	movw	r1, #4095	; 0xfff
   db212:	6800      	ldr	r0, [r0, #0]
   db214:	f7ff fbfe 	bl	daa14 <sock_setsockopt>
    if (ret < 0) {
   db218:	2800      	cmp	r0, #0
   db21a:	db08      	blt.n	db22e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   db21c:	6960      	ldr	r0, [r4, #20]
   db21e:	2300      	movs	r3, #0
   db220:	4632      	mov	r2, r6
   db222:	4629      	mov	r1, r5
   db224:	6800      	ldr	r0, [r0, #0]
   db226:	f7ff fc15 	bl	daa54 <sock_send>
    if (ret < 0) {
   db22a:	2800      	cmp	r0, #0
   db22c:	da04      	bge.n	db238 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   db22e:	f7ff fed9 	bl	dafe4 <__errno>
   db232:	6803      	ldr	r3, [r0, #0]
   db234:	6063      	str	r3, [r4, #4]
   db236:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   db238:	b004      	add	sp, #16
   db23a:	bd70      	pop	{r4, r5, r6, pc}

000db23c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db23c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db23e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   db240:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   db242:	689b      	ldr	r3, [r3, #8]
   db244:	4798      	blx	r3
          if (--_M_weak_count == 0)
   db246:	68a3      	ldr	r3, [r4, #8]
   db248:	3b01      	subs	r3, #1
   db24a:	60a3      	str	r3, [r4, #8]
   db24c:	b92b      	cbnz	r3, db25a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   db24e:	6823      	ldr	r3, [r4, #0]
   db250:	4620      	mov	r0, r4
   db252:	68db      	ldr	r3, [r3, #12]
        }
    }
   db254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   db258:	4718      	bx	r3
   db25a:	bd10      	pop	{r4, pc}

000db25c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   db25c:	b570      	push	{r4, r5, r6, lr}
   db25e:	4604      	mov	r4, r0
   db260:	694d      	ldr	r5, [r1, #20]
   db262:	4b05      	ldr	r3, [pc, #20]	; (db278 <_ZN9TCPClient8remoteIPEv+0x1c>)
   db264:	f844 3b04 	str.w	r3, [r4], #4
   db268:	358c      	adds	r5, #140	; 0x8c
   db26a:	4606      	mov	r6, r0
   db26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db270:	682b      	ldr	r3, [r5, #0]
   db272:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   db274:	4630      	mov	r0, r6
   db276:	bd70      	pop	{r4, r5, r6, pc}
   db278:	000e894c 	.word	0x000e894c

000db27c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db27c:	b510      	push	{r4, lr}
   db27e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db280:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db284:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db288:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   db28a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   db28c:	d005      	beq.n	db29a <_ZN9TCPClient4peekEv+0x1e>
   db28e:	6962      	ldr	r2, [r4, #20]
   db290:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db294:	4413      	add	r3, r2
   db296:	7918      	ldrb	r0, [r3, #4]
   db298:	bd10      	pop	{r4, pc}
   db29a:	6803      	ldr	r3, [r0, #0]
   db29c:	691b      	ldr	r3, [r3, #16]
   db29e:	4798      	blx	r3
   db2a0:	2800      	cmp	r0, #0
   db2a2:	d1f4      	bne.n	db28e <_ZN9TCPClient4peekEv+0x12>
   db2a4:	f04f 30ff 	mov.w	r0, #4294967295
}
   db2a8:	bd10      	pop	{r4, pc}

000db2aa <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db2aa:	b510      	push	{r4, lr}
   db2ac:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db2ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db2b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db2b6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   db2b8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   db2ba:	d008      	beq.n	db2ce <_ZN9TCPClient4readEv+0x24>
   db2bc:	6962      	ldr	r2, [r4, #20]
   db2be:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db2c2:	1c59      	adds	r1, r3, #1
   db2c4:	4413      	add	r3, r2
   db2c6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   db2ca:	7918      	ldrb	r0, [r3, #4]
   db2cc:	bd10      	pop	{r4, pc}
   db2ce:	6803      	ldr	r3, [r0, #0]
   db2d0:	691b      	ldr	r3, [r3, #16]
   db2d2:	4798      	blx	r3
   db2d4:	2800      	cmp	r0, #0
   db2d6:	d1f1      	bne.n	db2bc <_ZN9TCPClient4readEv+0x12>
   db2d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   db2dc:	bd10      	pop	{r4, pc}
	...

000db2e0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   db2e0:	b510      	push	{r4, lr}
   db2e2:	4b06      	ldr	r3, [pc, #24]	; (db2fc <_ZN9TCPClientD1Ev+0x1c>)
   db2e4:	6003      	str	r3, [r0, #0]
   db2e6:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   db2e8:	6980      	ldr	r0, [r0, #24]
   db2ea:	b128      	cbz	r0, db2f8 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   db2ec:	6843      	ldr	r3, [r0, #4]
   db2ee:	3b01      	subs	r3, #1
   db2f0:	6043      	str	r3, [r0, #4]
   db2f2:	b90b      	cbnz	r3, db2f8 <_ZN9TCPClientD1Ev+0x18>
   db2f4:	f7ff ffa2 	bl	db23c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
   db2f8:	4620      	mov	r0, r4
   db2fa:	bd10      	pop	{r4, pc}
   db2fc:	000e8804 	.word	0x000e8804

000db300 <_ZN9TCPClientD0Ev>:
   db300:	b510      	push	{r4, lr}
   db302:	4604      	mov	r4, r0
   db304:	f7ff ffec 	bl	db2e0 <_ZN9TCPClientD1Ev>
   db308:	4620      	mov	r0, r4
   db30a:	211c      	movs	r1, #28
   db30c:	f002 f9f4 	bl	dd6f8 <_ZdlPvj>
   db310:	4620      	mov	r0, r4
   db312:	bd10      	pop	{r4, pc}

000db314 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   db314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db316:	6943      	ldr	r3, [r0, #20]
   db318:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   db31a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db31e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   db322:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   db324:	4605      	mov	r5, r0
   db326:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   db328:	d106      	bne.n	db338 <_ZN9TCPClient4readEPhj+0x24>
   db32a:	6803      	ldr	r3, [r0, #0]
   db32c:	691b      	ldr	r3, [r3, #16]
   db32e:	4798      	blx	r3
   db330:	b910      	cbnz	r0, db338 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   db332:	f04f 34ff 	mov.w	r4, #4294967295
   db336:	e014      	b.n	db362 <_ZN9TCPClient4readEPhj+0x4e>
   db338:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   db33a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   db33e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   db342:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   db344:	42bc      	cmp	r4, r7
   db346:	bf28      	it	cs
   db348:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   db34a:	4419      	add	r1, r3
   db34c:	4622      	mov	r2, r4
   db34e:	3104      	adds	r1, #4
   db350:	4630      	mov	r0, r6
   db352:	f008 fe2f 	bl	e3fb4 <memcpy>
   db356:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   db358:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   db35c:	4423      	add	r3, r4
   db35e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   db362:	4620      	mov	r0, r4
   db364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000db368 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db36c:	4698      	mov	r8, r3
    stop();
   db36e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db370:	b093      	sub	sp, #76	; 0x4c
    stop();
   db372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   db374:	460d      	mov	r5, r1
   db376:	4606      	mov	r6, r0
   db378:	4617      	mov	r7, r2
    stop();
   db37a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   db37c:	ab12      	add	r3, sp, #72	; 0x48
   db37e:	2400      	movs	r4, #0
   db380:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db384:	4622      	mov	r2, r4
   db386:	4621      	mov	r1, r4
   db388:	4628      	mov	r0, r5
   db38a:	f7ff fcb3 	bl	dacf4 <netdb_getaddrinfo>
   db38e:	4681      	mov	r9, r0
   db390:	2800      	cmp	r0, #0
   db392:	d13d      	bne.n	db410 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   db394:	9b00      	ldr	r3, [sp, #0]
   db396:	2b00      	cmp	r3, #0
   db398:	d056      	beq.n	db448 <_ZN9TCPClient7connectEPKctm+0xe0>
   db39a:	695b      	ldr	r3, [r3, #20]
   db39c:	2b00      	cmp	r3, #0
   db39e:	d053      	beq.n	db448 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   db3a0:	a806      	add	r0, sp, #24
   db3a2:	f000 fcf1 	bl	dbd88 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   db3a6:	9b00      	ldr	r3, [sp, #0]
   db3a8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   db3aa:	7863      	ldrb	r3, [r4, #1]
   db3ac:	2b02      	cmp	r3, #2
   db3ae:	d101      	bne.n	db3b4 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   db3b0:	1d21      	adds	r1, r4, #4
   db3b2:	e013      	b.n	db3dc <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   db3b4:	2b0a      	cmp	r3, #10
   db3b6:	d114      	bne.n	db3e2 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   db3b8:	2211      	movs	r2, #17
   db3ba:	4649      	mov	r1, r9
   db3bc:	a801      	add	r0, sp, #4
   db3be:	f008 fe04 	bl	e3fca <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   db3c2:	68a3      	ldr	r3, [r4, #8]
   db3c4:	bb33      	cbnz	r3, db414 <_ZN9TCPClient7connectEPKctm+0xac>
   db3c6:	68e3      	ldr	r3, [r4, #12]
   db3c8:	bb23      	cbnz	r3, db414 <_ZN9TCPClient7connectEPKctm+0xac>
   db3ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
   db3ce:	6925      	ldr	r5, [r4, #16]
   db3d0:	f7ff fba0 	bl	dab14 <inet_htonl>
   db3d4:	4285      	cmp	r5, r0
   db3d6:	d11d      	bne.n	db414 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   db3d8:	f104 0114 	add.w	r1, r4, #20
   db3dc:	a806      	add	r0, sp, #24
   db3de:	f000 fd16 	bl	dbe0e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   db3e2:	a806      	add	r0, sp, #24
   db3e4:	f000 fcf0 	bl	dbdc8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   db3e8:	2800      	cmp	r0, #0
   db3ea:	d02d      	beq.n	db448 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   db3ec:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db3ee:	ad07      	add	r5, sp, #28
   db3f0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   db3f4:	4b18      	ldr	r3, [pc, #96]	; (db458 <_ZN9TCPClient7connectEPKctm+0xf0>)
   db3f6:	930c      	str	r3, [sp, #48]	; 0x30
   db3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db3fa:	ac0d      	add	r4, sp, #52	; 0x34
   db3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db3fe:	682b      	ldr	r3, [r5, #0]
   db400:	7023      	strb	r3, [r4, #0]
   db402:	463a      	mov	r2, r7
   db404:	4643      	mov	r3, r8
   db406:	a90c      	add	r1, sp, #48	; 0x30
   db408:	4630      	mov	r0, r6
   db40a:	47c8      	blx	r9
   db40c:	4681      	mov	r9, r0
   db40e:	e01b      	b.n	db448 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   db410:	46a1      	mov	r9, r4
   db412:	e019      	b.n	db448 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   db414:	f104 0308 	add.w	r3, r4, #8
   db418:	ad01      	add	r5, sp, #4
   db41a:	3418      	adds	r4, #24
   db41c:	6818      	ldr	r0, [r3, #0]
   db41e:	6859      	ldr	r1, [r3, #4]
   db420:	462a      	mov	r2, r5
   db422:	c203      	stmia	r2!, {r0, r1}
   db424:	3308      	adds	r3, #8
   db426:	42a3      	cmp	r3, r4
   db428:	4615      	mov	r5, r2
   db42a:	d1f7      	bne.n	db41c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   db42c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   db42e:	a901      	add	r1, sp, #4
   db430:	a80c      	add	r0, sp, #48	; 0x30
   db432:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   db434:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   db438:	f000 fcb4 	bl	dbda4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db43c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db43e:	ac07      	add	r4, sp, #28
   db440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db442:	682b      	ldr	r3, [r5, #0]
   db444:	7023      	strb	r3, [r4, #0]
   db446:	e7cc      	b.n	db3e2 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   db448:	9800      	ldr	r0, [sp, #0]
   db44a:	f7ff fc4b 	bl	dace4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   db44e:	4648      	mov	r0, r9
   db450:	b013      	add	sp, #76	; 0x4c
   db452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db456:	bf00      	nop
   db458:	000e894c 	.word	0x000e894c

000db45c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   db45c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   db45e:	2300      	movs	r3, #0
   db460:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   db464:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   db466:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   db46a:	4770      	bx	lr

000db46c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db470:	461e      	mov	r6, r3
    stop();
   db472:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db474:	460c      	mov	r4, r1
   db476:	b08a      	sub	sp, #40	; 0x28
    stop();
   db478:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   db47a:	4605      	mov	r5, r0
   db47c:	4617      	mov	r7, r2
    stop();
   db47e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   db480:	7d23      	ldrb	r3, [r4, #20]
   db482:	f8d5 8014 	ldr.w	r8, [r5, #20]
   db486:	2b04      	cmp	r3, #4
   db488:	bf0c      	ite	eq
   db48a:	2002      	moveq	r0, #2
   db48c:	200a      	movne	r0, #10
   db48e:	2206      	movs	r2, #6
   db490:	2101      	movs	r1, #1
   db492:	f7ff fae7 	bl	daa64 <sock_socket>
   db496:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   db49a:	696b      	ldr	r3, [r5, #20]
   db49c:	681b      	ldr	r3, [r3, #0]
   db49e:	2b00      	cmp	r3, #0
   db4a0:	db18      	blt.n	db4d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   db4a2:	4628      	mov	r0, r5
   db4a4:	f7ff ffda 	bl	db45c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   db4a8:	b1d6      	cbz	r6, db4e0 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   db4aa:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db4ac:	a903      	add	r1, sp, #12
   db4ae:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   db4b0:	9303      	str	r3, [sp, #12]
   db4b2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db4b6:	f7ff fb9d 	bl	dabf4 <if_index_to_name>
   db4ba:	b958      	cbnz	r0, db4d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   db4bc:	6968      	ldr	r0, [r5, #20]
   db4be:	2306      	movs	r3, #6
   db4c0:	9300      	str	r3, [sp, #0]
   db4c2:	f241 020b 	movw	r2, #4107	; 0x100b
   db4c6:	ab03      	add	r3, sp, #12
   db4c8:	f640 71ff 	movw	r1, #4095	; 0xfff
   db4cc:	6800      	ldr	r0, [r0, #0]
   db4ce:	f7ff faa1 	bl	daa14 <sock_setsockopt>
   db4d2:	b128      	cbz	r0, db4e0 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   db4d4:	682b      	ldr	r3, [r5, #0]
   db4d6:	4628      	mov	r0, r5
   db4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   db4da:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   db4dc:	4798      	blx	r3
   db4de:	e03b      	b.n	db558 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   db4e0:	261c      	movs	r6, #28
   db4e2:	4632      	mov	r2, r6
   db4e4:	2100      	movs	r1, #0
   db4e6:	a803      	add	r0, sp, #12
   db4e8:	f008 fd6f 	bl	e3fca <memset>
    if (ip.version() == 4) {
   db4ec:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   db4ee:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   db4f2:	2b04      	cmp	r3, #4
   db4f4:	d10c      	bne.n	db510 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   db4f6:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   db4f8:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   db4fa:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   db4fe:	f7ff fb11 	bl	dab24 <inet_htons>
   db502:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   db506:	6860      	ldr	r0, [r4, #4]
   db508:	f7ff fb04 	bl	dab14 <inet_htonl>
   db50c:	9004      	str	r0, [sp, #16]
   db50e:	e013      	b.n	db538 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   db510:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   db512:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   db514:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   db518:	f7ff fb04 	bl	dab24 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   db51c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   db51e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   db522:	1d23      	adds	r3, r4, #4
   db524:	f104 0714 	add.w	r7, r4, #20
   db528:	6818      	ldr	r0, [r3, #0]
   db52a:	6859      	ldr	r1, [r3, #4]
   db52c:	4632      	mov	r2, r6
   db52e:	c203      	stmia	r2!, {r0, r1}
   db530:	3308      	adds	r3, #8
   db532:	42bb      	cmp	r3, r7
   db534:	4616      	mov	r6, r2
   db536:	d1f7      	bne.n	db528 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   db538:	696b      	ldr	r3, [r5, #20]
   db53a:	221c      	movs	r2, #28
   db53c:	a903      	add	r1, sp, #12
   db53e:	6818      	ldr	r0, [r3, #0]
   db540:	f7ff fa78 	bl	daa34 <sock_connect>
   db544:	2800      	cmp	r0, #0
   db546:	d1c5      	bne.n	db4d4 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   db548:	3404      	adds	r4, #4
   db54a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db54c:	696d      	ldr	r5, [r5, #20]
   db54e:	358c      	adds	r5, #140	; 0x8c
   db550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db552:	6823      	ldr	r3, [r4, #0]
   db554:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   db556:	2401      	movs	r4, #1
}
   db558:	4620      	mov	r0, r4
   db55a:	b00a      	add	sp, #40	; 0x28
   db55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db560 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   db560:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   db562:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   db564:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   db566:	6818      	ldr	r0, [r3, #0]
   db568:	2800      	cmp	r0, #0
   db56a:	db01      	blt.n	db570 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   db56c:	f7ff fa5a 	bl	daa24 <sock_close>
   db570:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   db572:	f04f 32ff 	mov.w	r2, #4294967295
   db576:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   db578:	6960      	ldr	r0, [r4, #20]
   db57a:	2211      	movs	r2, #17
   db57c:	2100      	movs	r1, #0
   db57e:	308c      	adds	r0, #140	; 0x8c
   db580:	f008 fd23 	bl	e3fca <memset>
    d_->remoteIP.clear();
    flush_buffer();
   db584:	4620      	mov	r0, r4
}
   db586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   db58a:	f7ff bf67 	b.w	db45c <_ZN9TCPClient12flush_bufferEv>
	...

000db590 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   db590:	b530      	push	{r4, r5, lr}
   db592:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   db594:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   db598:	b08b      	sub	sp, #44	; 0x2c
   db59a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   db59c:	b11b      	cbz	r3, db5a6 <_ZN9TCPClient9availableEv+0x16>
   db59e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   db5a2:	429a      	cmp	r2, r3
   db5a4:	d040      	beq.n	db628 <_ZN9TCPClient9availableEv+0x98>
   db5a6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   db5a8:	6818      	ldr	r0, [r3, #0]
   db5aa:	2800      	cmp	r0, #0
   db5ac:	db3f      	blt.n	db62e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   db5ae:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   db5b2:	2d7f      	cmp	r5, #127	; 0x7f
   db5b4:	d83b      	bhi.n	db62e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   db5b6:	1d19      	adds	r1, r3, #4
   db5b8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   db5bc:	2308      	movs	r3, #8
   db5be:	4429      	add	r1, r5
   db5c0:	f7ff fa40 	bl	daa44 <sock_recv>
            if (ret > 0) {
   db5c4:	2800      	cmp	r0, #0
   db5c6:	dd0c      	ble.n	db5e2 <_ZN9TCPClient9availableEv+0x52>
   db5c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   db5ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   db5ce:	b90a      	cbnz	r2, db5d4 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   db5d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   db5d4:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   db5d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   db5da:	4418      	add	r0, r3
   db5dc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   db5e0:	e025      	b.n	db62e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   db5e2:	f7ff fcff 	bl	dafe4 <__errno>
   db5e6:	6803      	ldr	r3, [r0, #0]
   db5e8:	2b0b      	cmp	r3, #11
   db5ea:	d020      	beq.n	db62e <_ZN9TCPClient9availableEv+0x9e>
   db5ec:	f7ff fcfa 	bl	dafe4 <__errno>
   db5f0:	6803      	ldr	r3, [r0, #0]
   db5f2:	2b0b      	cmp	r3, #11
   db5f4:	d01b      	beq.n	db62e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   db5f6:	2320      	movs	r3, #32
   db5f8:	2500      	movs	r5, #0
   db5fa:	9302      	str	r3, [sp, #8]
   db5fc:	9503      	str	r5, [sp, #12]
   db5fe:	f7ff fcf1 	bl	dafe4 <__errno>
   db602:	6803      	ldr	r3, [r0, #0]
   db604:	9301      	str	r3, [sp, #4]
   db606:	4b0e      	ldr	r3, [pc, #56]	; (db640 <_ZN9TCPClient9availableEv+0xb0>)
   db608:	9300      	str	r3, [sp, #0]
   db60a:	aa02      	add	r2, sp, #8
   db60c:	462b      	mov	r3, r5
   db60e:	490d      	ldr	r1, [pc, #52]	; (db644 <_ZN9TCPClient9availableEv+0xb4>)
   db610:	2032      	movs	r0, #50	; 0x32
   db612:	f7ff fb9f 	bl	dad54 <log_message>
                    sock_close(d_->sock);
   db616:	6963      	ldr	r3, [r4, #20]
   db618:	6818      	ldr	r0, [r3, #0]
   db61a:	f7ff fa03 	bl	daa24 <sock_close>
   db61e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   db620:	f04f 32ff 	mov.w	r2, #4294967295
   db624:	601a      	str	r2, [r3, #0]
   db626:	e002      	b.n	db62e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   db628:	f7ff ff18 	bl	db45c <_ZN9TCPClient12flush_bufferEv>
   db62c:	e7bb      	b.n	db5a6 <_ZN9TCPClient9availableEv+0x16>
   db62e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   db630:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   db634:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   db638:	1a18      	subs	r0, r3, r0
}
   db63a:	b00b      	add	sp, #44	; 0x2c
   db63c:	bd30      	pop	{r4, r5, pc}
   db63e:	bf00      	nop
   db640:	000e884f 	.word	0x000e884f
   db644:	000e8848 	.word	0x000e8848

000db648 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   db648:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   db64a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   db64c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   db64e:	6001      	str	r1, [r0, #0]
   db650:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   db654:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   db658:	3088      	adds	r0, #136	; 0x88
   db65a:	f000 fb95 	bl	dbd88 <_ZN9IPAddressC1Ev>
}
   db65e:	4620      	mov	r0, r4
   db660:	bd10      	pop	{r4, pc}
	...

000db664 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   db668:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db66a:	2300      	movs	r3, #0
   db66c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   db66e:	4a14      	ldr	r2, [pc, #80]	; (db6c0 <_ZN9TCPClientC1Ei+0x5c>)
   db670:	6043      	str	r3, [r0, #4]
   db672:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   db674:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   db676:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   db678:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db67a:	20a0      	movs	r0, #160	; 0xa0
   db67c:	460e      	mov	r6, r1
   db67e:	f7f8 fd0c 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db682:	4605      	mov	r5, r0
   db684:	b110      	cbz	r0, db68c <_ZN9TCPClientC1Ei+0x28>
   db686:	4631      	mov	r1, r6
   db688:	f7ff ffde 	bl	db648 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db68c:	2014      	movs	r0, #20
   db68e:	f7f8 fd04 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   db692:	4603      	mov	r3, r0
   db694:	b128      	cbz	r0, db6a2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   db696:	2201      	movs	r2, #1
   db698:	6042      	str	r2, [r0, #4]
   db69a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   db69c:	4a09      	ldr	r2, [pc, #36]	; (db6c4 <_ZN9TCPClientC1Ei+0x60>)
   db69e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   db6a0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   db6a2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   db6a4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   db6a6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   db6a8:	b128      	cbz	r0, db6b6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   db6aa:	6843      	ldr	r3, [r0, #4]
   db6ac:	3b01      	subs	r3, #1
   db6ae:	6043      	str	r3, [r0, #4]
   db6b0:	b90b      	cbnz	r3, db6b6 <_ZN9TCPClientC1Ei+0x52>
   db6b2:	f7ff fdc3 	bl	db23c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   db6b6:	4620      	mov	r0, r4
   db6b8:	f7ff fed0 	bl	db45c <_ZN9TCPClient12flush_bufferEv>
}
   db6bc:	4620      	mov	r0, r4
   db6be:	bd70      	pop	{r4, r5, r6, pc}
   db6c0:	000e8804 	.word	0x000e8804
   db6c4:	000e87e8 	.word	0x000e87e8

000db6c8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   db6c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   db6ca:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   db6ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   db6d0:	f7ff ffc8 	bl	db664 <_ZN9TCPClientC1Ei>
}
   db6d4:	4620      	mov	r0, r4
   db6d6:	bd10      	pop	{r4, pc}

000db6d8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   db6d8:	b510      	push	{r4, lr}
   db6da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   db6dc:	6800      	ldr	r0, [r0, #0]
   db6de:	2800      	cmp	r0, #0
   db6e0:	db01      	blt.n	db6e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   db6e2:	f7ff f99f 	bl	daa24 <sock_close>
    }
}
   db6e6:	4620      	mov	r0, r4
   db6e8:	bd10      	pop	{r4, pc}

000db6ea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   db6ea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   db6ec:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   db6ee:	4620      	mov	r0, r4
   db6f0:	f7ff fff2 	bl	db6d8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   db6f4:	b124      	cbz	r4, db700 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   db6f6:	4620      	mov	r0, r4
   db6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db6fc:	f7f8 bccf 	b.w	d409e <_ZdlPv>
   db700:	bd10      	pop	{r4, pc}

000db702 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db702:	2200      	movs	r2, #0
   db704:	4611      	mov	r1, r2
   db706:	6840      	ldr	r0, [r0, #4]
   db708:	f7ff bba6 	b.w	dae58 <network_listening>

000db70c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db70c:	2200      	movs	r2, #0
   db70e:	4611      	mov	r1, r2
   db710:	6840      	ldr	r0, [r0, #4]
   db712:	f7ff bbb1 	b.w	dae78 <network_get_listen_timeout>

000db716 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db716:	2200      	movs	r2, #0
   db718:	6840      	ldr	r0, [r0, #4]
   db71a:	f7ff bba5 	b.w	dae68 <network_set_listen_timeout>

000db71e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db71e:	2200      	movs	r2, #0
   db720:	f081 0101 	eor.w	r1, r1, #1
   db724:	6840      	ldr	r0, [r0, #4]
   db726:	f7ff bb8f 	b.w	dae48 <network_listen>

000db72a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db72a:	2300      	movs	r3, #0
   db72c:	461a      	mov	r2, r3
   db72e:	2101      	movs	r1, #1
   db730:	6840      	ldr	r0, [r0, #4]
   db732:	f7ff bb81 	b.w	dae38 <network_off>

000db736 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db736:	2300      	movs	r3, #0
   db738:	461a      	mov	r2, r3
   db73a:	4619      	mov	r1, r3
   db73c:	6840      	ldr	r0, [r0, #4]
   db73e:	f7ff bb73 	b.w	dae28 <network_on>

000db742 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db742:	2200      	movs	r2, #0
   db744:	4611      	mov	r1, r2
   db746:	6840      	ldr	r0, [r0, #4]
   db748:	f7ff bb66 	b.w	dae18 <network_ready>

000db74c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db74c:	2200      	movs	r2, #0
   db74e:	4611      	mov	r1, r2
   db750:	6840      	ldr	r0, [r0, #4]
   db752:	f7ff bb51 	b.w	dadf8 <network_connecting>

000db756 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db756:	2200      	movs	r2, #0
   db758:	2102      	movs	r1, #2
   db75a:	6840      	ldr	r0, [r0, #4]
   db75c:	f7ff bb54 	b.w	dae08 <network_disconnect>

000db760 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db760:	2300      	movs	r3, #0
   db762:	461a      	mov	r2, r3
   db764:	6840      	ldr	r0, [r0, #4]
   db766:	f7ff bb3f 	b.w	dade8 <network_connect>

000db76a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db76a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db76c:	4605      	mov	r5, r0
   db76e:	b188      	cbz	r0, db794 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db770:	6804      	ldr	r4, [r0, #0]
   db772:	b14c      	cbz	r4, db788 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db774:	68a3      	ldr	r3, [r4, #8]
   db776:	b11b      	cbz	r3, db780 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db778:	2203      	movs	r2, #3
   db77a:	4621      	mov	r1, r4
   db77c:	4620      	mov	r0, r4
   db77e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db780:	2110      	movs	r1, #16
   db782:	4620      	mov	r0, r4
   db784:	f001 ffb8 	bl	dd6f8 <_ZdlPvj>
   db788:	4628      	mov	r0, r5
   db78a:	2114      	movs	r1, #20
      }
   db78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db790:	f001 bfb2 	b.w	dd6f8 <_ZdlPvj>
   db794:	bd38      	pop	{r3, r4, r5, pc}

000db796 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db796:	b110      	cbz	r0, db79e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db798:	6803      	ldr	r3, [r0, #0]
   db79a:	685b      	ldr	r3, [r3, #4]
   db79c:	4718      	bx	r3
   db79e:	4770      	bx	lr

000db7a0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db7a0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db7a2:	6803      	ldr	r3, [r0, #0]
   db7a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db7a6:	b1bb      	cbz	r3, db7d8 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db7a8:	6858      	ldr	r0, [r3, #4]
   db7aa:	f7ff f9c3 	bl	dab34 <os_thread_is_current>
   db7ae:	b978      	cbnz	r0, db7d0 <_ZN6ThreadD1Ev+0x30>
   db7b0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db7b2:	7c5a      	ldrb	r2, [r3, #17]
   db7b4:	b912      	cbnz	r2, db7bc <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db7b6:	6858      	ldr	r0, [r3, #4]
   db7b8:	f7ff f9c4 	bl	dab44 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db7bc:	6823      	ldr	r3, [r4, #0]
   db7be:	6858      	ldr	r0, [r3, #4]
   db7c0:	f7ff f9c8 	bl	dab54 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db7c4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db7c6:	2300      	movs	r3, #0
   db7c8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db7ca:	b128      	cbz	r0, db7d8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db7cc:	f7ff ffcd 	bl	db76a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db7d0:	6820      	ldr	r0, [r4, #0]
   db7d2:	b108      	cbz	r0, db7d8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db7d4:	f7ff ffc9 	bl	db76a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db7d8:	4620      	mov	r0, r4
   db7da:	bd10      	pop	{r4, pc}

000db7dc <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   db7dc:	b538      	push	{r3, r4, r5, lr}
   db7de:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db7e0:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   db7e4:	b108      	cbz	r0, db7ea <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db7e6:	f7f8 fc5c 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db7ea:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   db7ee:	b108      	cbz	r0, db7f4 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   db7f0:	f7ff f9c0 	bl	dab74 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db7f4:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   db7f8:	b135      	cbz	r5, db808 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db7fa:	4628      	mov	r0, r5
   db7fc:	f7ff ffd0 	bl	db7a0 <_ZN6ThreadD1Ev>
   db800:	2104      	movs	r1, #4
   db802:	4628      	mov	r0, r5
   db804:	f001 ff78 	bl	dd6f8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db808:	6820      	ldr	r0, [r4, #0]
   db80a:	b108      	cbz	r0, db810 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   db80c:	f7ff ffc3 	bl	db796 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db810:	4620      	mov	r0, r4
   db812:	bd38      	pop	{r3, r4, r5, pc}

000db814 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db814:	b510      	push	{r4, lr}
   db816:	4b04      	ldr	r3, [pc, #16]	; (db828 <_ZN5spark9MeshClassD1Ev+0x14>)
   db818:	4604      	mov	r4, r0
   db81a:	f840 3b08 	str.w	r3, [r0], #8
   db81e:	f7ff ffdd 	bl	db7dc <_ZN5spark11MeshPublishD1Ev>
   db822:	4620      	mov	r0, r4
   db824:	bd10      	pop	{r4, pc}
   db826:	bf00      	nop
   db828:	000e8868 	.word	0x000e8868

000db82c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db82c:	b538      	push	{r3, r4, r5, lr}
   db82e:	4c0e      	ldr	r4, [pc, #56]	; (db868 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db830:	4b0e      	ldr	r3, [pc, #56]	; (db86c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db832:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db834:	2500      	movs	r5, #0
   db836:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db838:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db83c:	6063      	str	r3, [r4, #4]
   db83e:	60a5      	str	r5, [r4, #8]
   db840:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db844:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db848:	f7ff f98c 	bl	dab64 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db84c:	4b08      	ldr	r3, [pc, #32]	; (db870 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db84e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db852:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db856:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db858:	4620      	mov	r0, r4
   db85a:	4a06      	ldr	r2, [pc, #24]	; (db874 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db85c:	4906      	ldr	r1, [pc, #24]	; (db878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db862:	f001 bf3b 	b.w	dd6dc <__aeabi_atexit>
   db866:	bf00      	nop
   db868:	2003e388 	.word	0x2003e388
   db86c:	000e87b4 	.word	0x000e87b4
   db870:	000e8868 	.word	0x000e8868
   db874:	2003d7b0 	.word	0x2003d7b0
   db878:	000db815 	.word	0x000db815

000db87c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   db87c:	b510      	push	{r4, lr}
   db87e:	4604      	mov	r4, r0
{
    _spi = spi;
   db880:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   db882:	4608      	mov	r0, r1
   db884:	f7ff f9c6 	bl	dac14 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db888:	2300      	movs	r3, #0
   db88a:	6063      	str	r3, [r4, #4]
}
   db88c:	4620      	mov	r0, r4
   db88e:	bd10      	pop	{r4, pc}

000db890 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   db890:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   db892:	7800      	ldrb	r0, [r0, #0]
   db894:	f7ff f9b6 	bl	dac04 <HAL_SPI_Send_Receive_Data>
}
   db898:	b2c0      	uxtb	r0, r0
   db89a:	bd08      	pop	{r3, pc}

000db89c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   db89c:	7800      	ldrb	r0, [r0, #0]
   db89e:	f7ff b9c1 	b.w	dac24 <HAL_SPI_Is_Enabled>

000db8a2 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   db8a2:	4770      	bx	lr

000db8a4 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   db8a4:	2001      	movs	r0, #1
   db8a6:	4770      	bx	lr

000db8a8 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   db8a8:	8983      	ldrh	r3, [r0, #12]
   db8aa:	b11b      	cbz	r3, db8b4 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   db8ac:	6903      	ldr	r3, [r0, #16]
   db8ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db8b2:	d102      	bne.n	db8ba <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   db8b4:	ed9f 0a05 	vldr	s0, [pc, #20]	; db8cc <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   db8b8:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   db8ba:	ee07 3a90 	vmov	s15, r3
   db8be:	ed9f 7a04 	vldr	s14, [pc, #16]	; db8d0 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   db8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db8c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   db8ca:	4770      	bx	lr
   db8cc:	00000000 	.word	0x00000000
   db8d0:	42c80000 	.word	0x42c80000

000db8d4 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   db8d4:	8983      	ldrh	r3, [r0, #12]
   db8d6:	b11b      	cbz	r3, db8e0 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   db8d8:	6983      	ldr	r3, [r0, #24]
   db8da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db8de:	d102      	bne.n	db8e6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   db8e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; db8f8 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   db8e4:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   db8e6:	ee07 3a90 	vmov	s15, r3
   db8ea:	ed9f 7a04 	vldr	s14, [pc, #16]	; db8fc <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   db8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   db8f2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   db8f6:	4770      	bx	lr
   db8f8:	00000000 	.word	0x00000000
   db8fc:	42c80000 	.word	0x42c80000

000db900 <_ZN10WiFiSignalD0Ev>:
   db900:	b510      	push	{r4, lr}
   db902:	2124      	movs	r1, #36	; 0x24
   db904:	4604      	mov	r4, r0
   db906:	f001 fef7 	bl	dd6f8 <_ZdlPvj>
   db90a:	4620      	mov	r0, r4
   db90c:	bd10      	pop	{r4, pc}

000db90e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db90e:	2200      	movs	r2, #0
   db910:	4611      	mov	r1, r2
   db912:	6840      	ldr	r0, [r0, #4]
   db914:	f7ff baa0 	b.w	dae58 <network_listening>

000db918 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db918:	2200      	movs	r2, #0
   db91a:	4611      	mov	r1, r2
   db91c:	6840      	ldr	r0, [r0, #4]
   db91e:	f7ff baab 	b.w	dae78 <network_get_listen_timeout>

000db922 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db922:	2200      	movs	r2, #0
   db924:	6840      	ldr	r0, [r0, #4]
   db926:	f7ff ba9f 	b.w	dae68 <network_set_listen_timeout>

000db92a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db92a:	2200      	movs	r2, #0
   db92c:	f081 0101 	eor.w	r1, r1, #1
   db930:	6840      	ldr	r0, [r0, #4]
   db932:	f7ff ba89 	b.w	dae48 <network_listen>

000db936 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   db936:	2300      	movs	r3, #0
   db938:	461a      	mov	r2, r3
   db93a:	4619      	mov	r1, r3
   db93c:	6840      	ldr	r0, [r0, #4]
   db93e:	f7ff ba7b 	b.w	dae38 <network_off>

000db942 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db942:	2200      	movs	r2, #0
   db944:	4611      	mov	r1, r2
   db946:	6840      	ldr	r0, [r0, #4]
   db948:	f7ff ba56 	b.w	dadf8 <network_connecting>

000db94c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db94c:	2200      	movs	r2, #0
   db94e:	2102      	movs	r1, #2
   db950:	6840      	ldr	r0, [r0, #4]
   db952:	f7ff ba59 	b.w	dae08 <network_disconnect>

000db956 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db956:	2300      	movs	r3, #0
   db958:	461a      	mov	r2, r3
   db95a:	6840      	ldr	r0, [r0, #4]
   db95c:	f7ff ba44 	b.w	dade8 <network_connect>

000db960 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   db960:	8983      	ldrh	r3, [r0, #12]
   db962:	b17b      	cbz	r3, db984 <_ZNK10WiFiSignal10getQualityEv+0x24>
   db964:	6a03      	ldr	r3, [r0, #32]
   db966:	2b00      	cmp	r3, #0
   db968:	db0c      	blt.n	db984 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   db96a:	ee07 3a90 	vmov	s15, r3
   db96e:	eddf 6a07 	vldr	s13, [pc, #28]	; db98c <_ZNK10WiFiSignal10getQualityEv+0x2c>
   db972:	ed9f 0a07 	vldr	s0, [pc, #28]	; db990 <_ZNK10WiFiSignal10getQualityEv+0x30>
   db976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   db97a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   db97e:	ee27 0a80 	vmul.f32	s0, s15, s0
   db982:	4770      	bx	lr
    }
    return -1.0f;
   db984:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db988:	4770      	bx	lr
   db98a:	bf00      	nop
   db98c:	477fff00 	.word	0x477fff00
   db990:	42c80000 	.word	0x42c80000

000db994 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   db994:	8983      	ldrh	r3, [r0, #12]
   db996:	b17b      	cbz	r3, db9b8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   db998:	6943      	ldr	r3, [r0, #20]
   db99a:	2b00      	cmp	r3, #0
   db99c:	db0c      	blt.n	db9b8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   db99e:	ee07 3a90 	vmov	s15, r3
   db9a2:	eddf 6a07 	vldr	s13, [pc, #28]	; db9c0 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   db9a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; db9c4 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   db9aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   db9ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
   db9b2:	ee27 0a80 	vmul.f32	s0, s15, s0
   db9b6:	4770      	bx	lr
    }
    return -1.0f;
   db9b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   db9bc:	4770      	bx	lr
   db9be:	bf00      	nop
   db9c0:	477fff00 	.word	0x477fff00
   db9c4:	42c80000 	.word	0x42c80000

000db9c8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   db9c8:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   db9ca:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   db9cc:	4606      	mov	r6, r0
    inf_ = inf;
   db9ce:	f100 040c 	add.w	r4, r0, #12
   db9d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db9d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db9d6:	e895 0003 	ldmia.w	r5, {r0, r1}
   db9da:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   db9de:	6933      	ldr	r3, [r6, #16]
   db9e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db9e4:	bf0e      	itee	eq
   db9e6:	2302      	moveq	r3, #2
   db9e8:	2264      	movne	r2, #100	; 0x64
   db9ea:	fb93 f3f2 	sdivne	r3, r3, r2
   db9ee:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   db9f0:	69b3      	ldr	r3, [r6, #24]
   db9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   db9f6:	bf0e      	itee	eq
   db9f8:	2300      	moveq	r3, #0
   db9fa:	2264      	movne	r2, #100	; 0x64
   db9fc:	fb93 f3f2 	sdivne	r3, r3, r2
   dba00:	60b3      	str	r3, [r6, #8]
    return true;
}
   dba02:	2001      	movs	r0, #1
   dba04:	bd70      	pop	{r4, r5, r6, pc}
	...

000dba08 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   dba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   dba0c:	4b16      	ldr	r3, [pc, #88]	; (dba68 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   dba0e:	6003      	str	r3, [r0, #0]
   dba10:	2500      	movs	r5, #0
   dba12:	4688      	mov	r8, r1
   dba14:	2702      	movs	r7, #2
   dba16:	2618      	movs	r6, #24
   dba18:	b086      	sub	sp, #24
   dba1a:	6047      	str	r7, [r0, #4]
   dba1c:	6085      	str	r5, [r0, #8]
   dba1e:	4632      	mov	r2, r6
   dba20:	4629      	mov	r1, r5
   dba22:	4604      	mov	r4, r0
   dba24:	300c      	adds	r0, #12
   dba26:	f008 fad0 	bl	e3fca <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dba2a:	462a      	mov	r2, r5
   dba2c:	4629      	mov	r1, r5
   dba2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dba32:	f7ff f9f1 	bl	dae18 <network_ready>
   dba36:	b190      	cbz	r0, dba5e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   dba38:	4632      	mov	r2, r6
   dba3a:	4629      	mov	r1, r5
   dba3c:	4668      	mov	r0, sp
   dba3e:	f008 fac4 	bl	e3fca <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dba42:	462a      	mov	r2, r5
   dba44:	4669      	mov	r1, sp
   dba46:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   dba48:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   dba4c:	f7fe ff22 	bl	da894 <wlan_connected_info>
        if (r == 0) {
   dba50:	b920      	cbnz	r0, dba5c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   dba52:	4669      	mov	r1, sp
   dba54:	4620      	mov	r0, r4
   dba56:	f7ff ffb7 	bl	db9c8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   dba5a:	e000      	b.n	dba5e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   dba5c:	6067      	str	r7, [r4, #4]
        return sig;
    }
   dba5e:	4620      	mov	r0, r4
   dba60:	b006      	add	sp, #24
   dba62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dba66:	bf00      	nop
   dba68:	000e88d0 	.word	0x000e88d0

000dba6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   dba6c:	4b02      	ldr	r3, [pc, #8]	; (dba78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   dba6e:	2204      	movs	r2, #4
   dba70:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   dba72:	4a02      	ldr	r2, [pc, #8]	; (dba7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   dba74:	601a      	str	r2, [r3, #0]
   dba76:	4770      	bx	lr
   dba78:	2003e55c 	.word	0x2003e55c
   dba7c:	000e889c 	.word	0x000e889c

000dba80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   dba80:	4770      	bx	lr

000dba82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dba82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dba84:	4606      	mov	r6, r0
   dba86:	4615      	mov	r5, r2
   dba88:	460c      	mov	r4, r1
   dba8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dba8c:	42bc      	cmp	r4, r7
   dba8e:	d006      	beq.n	dba9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dba90:	6833      	ldr	r3, [r6, #0]
   dba92:	f814 1b01 	ldrb.w	r1, [r4], #1
   dba96:	689b      	ldr	r3, [r3, #8]
   dba98:	4630      	mov	r0, r6
   dba9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dba9c:	e7f6      	b.n	dba8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dba9e:	4628      	mov	r0, r5
   dbaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbaa2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dbaa2:	2200      	movs	r2, #0
   dbaa4:	7c00      	ldrb	r0, [r0, #16]
   dbaa6:	f7fe bf5d 	b.w	da964 <HAL_I2C_Write_Data>

000dbaaa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dbaaa:	2100      	movs	r1, #0
   dbaac:	7c00      	ldrb	r0, [r0, #16]
   dbaae:	f7fe bf61 	b.w	da974 <HAL_I2C_Available_Data>

000dbab2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dbab2:	2100      	movs	r1, #0
   dbab4:	7c00      	ldrb	r0, [r0, #16]
   dbab6:	f7fe bf65 	b.w	da984 <HAL_I2C_Read_Data>

000dbaba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dbaba:	2100      	movs	r1, #0
   dbabc:	7c00      	ldrb	r0, [r0, #16]
   dbabe:	f7fe bf69 	b.w	da994 <HAL_I2C_Peek_Data>

000dbac2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dbac2:	2100      	movs	r1, #0
   dbac4:	7c00      	ldrb	r0, [r0, #16]
   dbac6:	f7fe bf6d 	b.w	da9a4 <HAL_I2C_Flush_Data>

000dbaca <_ZN7TwoWireD0Ev>:
   dbaca:	b510      	push	{r4, lr}
   dbacc:	2114      	movs	r1, #20
   dbace:	4604      	mov	r4, r0
   dbad0:	f001 fe12 	bl	dd6f8 <_ZdlPvj>
   dbad4:	4620      	mov	r0, r4
   dbad6:	bd10      	pop	{r4, pc}

000dbad8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dbad8:	b510      	push	{r4, lr}
   dbada:	4604      	mov	r4, r0
   dbadc:	2300      	movs	r3, #0
   dbade:	6063      	str	r3, [r4, #4]
   dbae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbae4:	60a3      	str	r3, [r4, #8]
   dbae6:	4b04      	ldr	r3, [pc, #16]	; (dbaf8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   dbae8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dbaea:	4608      	mov	r0, r1
   dbaec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   dbaee:	4611      	mov	r1, r2
   dbaf0:	f7fe ff68 	bl	da9c4 <HAL_I2C_Init>
}
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	bd10      	pop	{r4, pc}
   dbaf8:	000e88f4 	.word	0x000e88f4

000dbafc <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   dbafc:	2200      	movs	r2, #0
   dbafe:	7c00      	ldrb	r0, [r0, #16]
   dbb00:	f7fe bf08 	b.w	da914 <HAL_I2C_Set_Speed>

000dbb04 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dbb04:	2300      	movs	r3, #0
   dbb06:	461a      	mov	r2, r3
   dbb08:	4619      	mov	r1, r3
   dbb0a:	7c00      	ldrb	r0, [r0, #16]
   dbb0c:	f7fe bf0a 	b.w	da924 <HAL_I2C_Begin>

000dbb10 <_ZN7TwoWire3endEv>:
  begin((uint8_t)address);
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   dbb10:	2100      	movs	r1, #0
   dbb12:	7c00      	ldrb	r0, [r0, #16]
   dbb14:	f7fe bf0e 	b.w	da934 <HAL_I2C_End>

000dbb18 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dbb18:	b570      	push	{r4, r5, r6, lr}
   dbb1a:	460c      	mov	r4, r1
   dbb1c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   dbb1e:	2514      	movs	r5, #20
   dbb20:	4606      	mov	r6, r0
   dbb22:	462a      	mov	r2, r5
   dbb24:	2100      	movs	r1, #0
   dbb26:	a801      	add	r0, sp, #4
   dbb28:	f008 fa4f 	bl	e3fca <memset>
   dbb2c:	7823      	ldrb	r3, [r4, #0]
   dbb2e:	f88d 3008 	strb.w	r3, [sp, #8]
   dbb32:	6863      	ldr	r3, [r4, #4]
   dbb34:	9303      	str	r3, [sp, #12]
   dbb36:	68e3      	ldr	r3, [r4, #12]
   dbb38:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   dbb3a:	2200      	movs	r2, #0
   dbb3c:	7a23      	ldrb	r3, [r4, #8]
   dbb3e:	7c30      	ldrb	r0, [r6, #16]
   dbb40:	f8ad 5004 	strh.w	r5, [sp, #4]
   dbb44:	a901      	add	r1, sp, #4
   dbb46:	9305      	str	r3, [sp, #20]
   dbb48:	f7fe ff5c 	bl	daa04 <HAL_I2C_Request_Data_Ex>
}
   dbb4c:	b006      	add	sp, #24
   dbb4e:	bd70      	pop	{r4, r5, r6, pc}

000dbb50 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   dbb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dbb52:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dbb54:	f88d 1000 	strb.w	r1, [sp]
   dbb58:	f04f 0164 	mov.w	r1, #100	; 0x64
   dbb5c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dbb5e:	bf18      	it	ne
   dbb60:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dbb62:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   dbb64:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dbb66:	f88d 3008 	strb.w	r3, [sp, #8]
   dbb6a:	f7ff ffd5 	bl	dbb18 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dbb6e:	b005      	add	sp, #20
   dbb70:	f85d fb04 	ldr.w	pc, [sp], #4

000dbb74 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   dbb74:	2301      	movs	r3, #1
   dbb76:	f7ff bfeb 	b.w	dbb50 <_ZN7TwoWire11requestFromEhjh>

000dbb7a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   dbb7a:	2200      	movs	r2, #0
   dbb7c:	7c00      	ldrb	r0, [r0, #16]
   dbb7e:	f7fe bee1 	b.w	da944 <HAL_I2C_Begin_Transmission>

000dbb82 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   dbb82:	b2c9      	uxtb	r1, r1
   dbb84:	f7ff bff9 	b.w	dbb7a <_ZN7TwoWire17beginTransmissionEh>

000dbb88 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   dbb88:	2200      	movs	r2, #0
   dbb8a:	7c00      	ldrb	r0, [r0, #16]
   dbb8c:	f7fe bee2 	b.w	da954 <HAL_I2C_End_Transmission>

000dbb90 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   dbb90:	2101      	movs	r1, #1
   dbb92:	f7ff bff9 	b.w	dbb88 <_ZN7TwoWire15endTransmissionEh>

000dbb96 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dbb96:	2100      	movs	r1, #0
   dbb98:	7c00      	ldrb	r0, [r0, #16]
   dbb9a:	f7fe bf0b 	b.w	da9b4 <HAL_I2C_Is_Enabled>

000dbb9e <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   dbb9e:	2200      	movs	r2, #0
   dbba0:	4611      	mov	r1, r2
   dbba2:	7c00      	ldrb	r0, [r0, #16]
   dbba4:	f7fe bf16 	b.w	da9d4 <HAL_I2C_Reset>

000dbba8 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   dbba8:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   dbbaa:	2100      	movs	r1, #0
   dbbac:	7c00      	ldrb	r0, [r0, #16]
   dbbae:	f7fe ff19 	bl	da9e4 <HAL_I2C_Acquire>
}
   dbbb2:	fab0 f080 	clz	r0, r0
   dbbb6:	0940      	lsrs	r0, r0, #5
   dbbb8:	bd08      	pop	{r3, pc}

000dbbba <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dbbba:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   dbbbc:	2100      	movs	r1, #0
   dbbbe:	7c00      	ldrb	r0, [r0, #16]
   dbbc0:	f7fe ff18 	bl	da9f4 <HAL_I2C_Release>
}
   dbbc4:	fab0 f080 	clz	r0, r0
   dbbc8:	0940      	lsrs	r0, r0, #5
   dbbca:	bd08      	pop	{r3, pc}

000dbbcc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dbbcc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbbce:	6883      	ldr	r3, [r0, #8]
   dbbd0:	4604      	mov	r4, r0
   dbbd2:	b90b      	cbnz	r3, dbbd8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dbbd4:	f001 fda3 	bl	dd71e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbbd8:	68c3      	ldr	r3, [r0, #12]
   dbbda:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dbbdc:	68a3      	ldr	r3, [r4, #8]
   dbbde:	b11b      	cbz	r3, dbbe8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dbbe0:	2203      	movs	r2, #3
   dbbe2:	4621      	mov	r1, r4
   dbbe4:	4620      	mov	r0, r4
   dbbe6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dbbe8:	4620      	mov	r0, r4
   dbbea:	2110      	movs	r1, #16
}
   dbbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dbbf0:	f001 bd82 	b.w	dd6f8 <_ZdlPvj>

000dbbf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   dbbf4:	680b      	ldr	r3, [r1, #0]
   dbbf6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   dbbf8:	b113      	cbz	r3, dbc00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   dbbfa:	685a      	ldr	r2, [r3, #4]
   dbbfc:	3201      	adds	r2, #1
   dbbfe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   dbc00:	4770      	bx	lr

000dbc02 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbc02:	7441      	strb	r1, [r0, #17]
   dbc04:	4770      	bx	lr

000dbc06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dbc06:	4770      	bx	lr

000dbc08 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dbc08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dbc0a:	2100      	movs	r1, #0
   dbc0c:	7c00      	ldrb	r0, [r0, #16]
   dbc0e:	f7fe fe69 	bl	da8e4 <HAL_USB_USART_Receive_Data>
}
   dbc12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbc16:	bf28      	it	cs
   dbc18:	f04f 30ff 	movcs.w	r0, #4294967295
   dbc1c:	bd08      	pop	{r3, pc}

000dbc1e <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dbc1e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dbc20:	2101      	movs	r1, #1
   dbc22:	7c00      	ldrb	r0, [r0, #16]
   dbc24:	f7fe fe5e 	bl	da8e4 <HAL_USB_USART_Receive_Data>
}
   dbc28:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dbc2c:	bf28      	it	cs
   dbc2e:	f04f 30ff 	movcs.w	r0, #4294967295
   dbc32:	bd08      	pop	{r3, pc}

000dbc34 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dbc34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dbc36:	7c00      	ldrb	r0, [r0, #16]
   dbc38:	f7fe fe4c 	bl	da8d4 <HAL_USB_USART_Available_Data_For_Write>
}
   dbc3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbc40:	bd08      	pop	{r3, pc}

000dbc42 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dbc42:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dbc44:	7c00      	ldrb	r0, [r0, #16]
   dbc46:	f7fe fe3d 	bl	da8c4 <HAL_USB_USART_Available_Data>
}
   dbc4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbc4e:	bd08      	pop	{r3, pc}

000dbc50 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dbc50:	7c00      	ldrb	r0, [r0, #16]
   dbc52:	f7fe be57 	b.w	da904 <HAL_USB_USART_Flush_Data>

000dbc56 <_ZN9USBSerialD0Ev>:
   dbc56:	b510      	push	{r4, lr}
   dbc58:	2114      	movs	r1, #20
   dbc5a:	4604      	mov	r4, r0
   dbc5c:	f001 fd4c 	bl	dd6f8 <_ZdlPvj>
   dbc60:	4620      	mov	r0, r4
   dbc62:	bd10      	pop	{r4, pc}

000dbc64 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dbc64:	b538      	push	{r3, r4, r5, lr}
   dbc66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbc68:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dbc6a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbc6c:	f7fe fe32 	bl	da8d4 <HAL_USB_USART_Available_Data_For_Write>
   dbc70:	2800      	cmp	r0, #0
   dbc72:	dc01      	bgt.n	dbc78 <_ZN9USBSerial5writeEh+0x14>
   dbc74:	7c60      	ldrb	r0, [r4, #17]
   dbc76:	b128      	cbz	r0, dbc84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dbc78:	4629      	mov	r1, r5
   dbc7a:	7c20      	ldrb	r0, [r4, #16]
   dbc7c:	f7fe fe3a 	bl	da8f4 <HAL_USB_USART_Send_Data>
   dbc80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dbc84:	bd38      	pop	{r3, r4, r5, pc}
	...

000dbc88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbc88:	b510      	push	{r4, lr}
   dbc8a:	4604      	mov	r4, r0
   dbc8c:	2300      	movs	r3, #0
   dbc8e:	6063      	str	r3, [r4, #4]
   dbc90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbc94:	60a3      	str	r3, [r4, #8]
   dbc96:	4b05      	ldr	r3, [pc, #20]	; (dbcac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dbc98:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dbc9a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbc9c:	4608      	mov	r0, r1
{
  _serial = serial;
   dbc9e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dbca0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dbca2:	4611      	mov	r1, r2
   dbca4:	f7fe fdfe 	bl	da8a4 <HAL_USB_USART_Init>
}
   dbca8:	4620      	mov	r0, r4
   dbcaa:	bd10      	pop	{r4, pc}
   dbcac:	000e891c 	.word	0x000e891c

000dbcb0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dbcb0:	2200      	movs	r2, #0
   dbcb2:	7c00      	ldrb	r0, [r0, #16]
   dbcb4:	f7fe bdfe 	b.w	da8b4 <HAL_USB_USART_Begin>

000dbcb8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dbcb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dbcba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dbcbc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dbcbe:	2100      	movs	r1, #0
   dbcc0:	f008 f983 	bl	e3fca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dbcc4:	4620      	mov	r0, r4
   dbcc6:	bd10      	pop	{r4, pc}

000dbcc8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dbcc8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbcca:	4d0e      	ldr	r5, [pc, #56]	; (dbd04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dbccc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dbcce:	a801      	add	r0, sp, #4
   dbcd0:	f7ff fff2 	bl	dbcb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbcd4:	6829      	ldr	r1, [r5, #0]
   dbcd6:	f011 0401 	ands.w	r4, r1, #1
   dbcda:	d110      	bne.n	dbcfe <_Z16_fetch_usbserialv+0x36>
   dbcdc:	4628      	mov	r0, r5
   dbcde:	f7f8 f9e2 	bl	d40a6 <__cxa_guard_acquire>
   dbce2:	b160      	cbz	r0, dbcfe <_Z16_fetch_usbserialv+0x36>
   dbce4:	aa01      	add	r2, sp, #4
   dbce6:	4621      	mov	r1, r4
   dbce8:	4807      	ldr	r0, [pc, #28]	; (dbd08 <_Z16_fetch_usbserialv+0x40>)
   dbcea:	f7ff ffcd 	bl	dbc88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dbcee:	4628      	mov	r0, r5
   dbcf0:	f7f8 f9de 	bl	d40b0 <__cxa_guard_release>
   dbcf4:	4a05      	ldr	r2, [pc, #20]	; (dbd0c <_Z16_fetch_usbserialv+0x44>)
   dbcf6:	4906      	ldr	r1, [pc, #24]	; (dbd10 <_Z16_fetch_usbserialv+0x48>)
   dbcf8:	4803      	ldr	r0, [pc, #12]	; (dbd08 <_Z16_fetch_usbserialv+0x40>)
   dbcfa:	f001 fcef 	bl	dd6dc <__aeabi_atexit>
	return _usbserial;
}
   dbcfe:	4802      	ldr	r0, [pc, #8]	; (dbd08 <_Z16_fetch_usbserialv+0x40>)
   dbd00:	b007      	add	sp, #28
   dbd02:	bd30      	pop	{r4, r5, pc}
   dbd04:	2003e564 	.word	0x2003e564
   dbd08:	2003e568 	.word	0x2003e568
   dbd0c:	2003d7b0 	.word	0x2003d7b0
   dbd10:	000dbc07 	.word	0x000dbc07

000dbd14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dbd14:	4770      	bx	lr

000dbd16 <_ZN9IPAddressD0Ev>:
   dbd16:	b510      	push	{r4, lr}
   dbd18:	2118      	movs	r1, #24
   dbd1a:	4604      	mov	r4, r0
   dbd1c:	f001 fcec 	bl	dd6f8 <_ZdlPvj>
   dbd20:	4620      	mov	r0, r4
   dbd22:	bd10      	pop	{r4, pc}

000dbd24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dbd24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dbd26:	7d03      	ldrb	r3, [r0, #20]
   dbd28:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dbd2a:	b08d      	sub	sp, #52	; 0x34
   dbd2c:	460e      	mov	r6, r1
   dbd2e:	f100 0704 	add.w	r7, r0, #4
   dbd32:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dbd36:	d002      	beq.n	dbd3e <_ZNK9IPAddress7printToER5Print+0x1a>
   dbd38:	f100 0508 	add.w	r5, r0, #8
   dbd3c:	e018      	b.n	dbd70 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dbd3e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbd40:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dbd42:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dbd46:	232f      	movs	r3, #47	; 0x2f
   dbd48:	462a      	mov	r2, r5
   dbd4a:	200a      	movs	r0, #10
   dbd4c:	f7fe feda 	bl	dab04 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dbd50:	4628      	mov	r0, r5
   dbd52:	f009 f8fb 	bl	e4f4c <strlen>
   dbd56:	6833      	ldr	r3, [r6, #0]
   dbd58:	4602      	mov	r2, r0
   dbd5a:	68db      	ldr	r3, [r3, #12]
   dbd5c:	4629      	mov	r1, r5
   dbd5e:	4630      	mov	r0, r6
   dbd60:	4798      	blx	r3
   dbd62:	e00f      	b.n	dbd84 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dbd64:	b124      	cbz	r4, dbd70 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dbd66:	212e      	movs	r1, #46	; 0x2e
   dbd68:	4630      	mov	r0, r6
   dbd6a:	f000 fe06 	bl	dc97a <_ZN5Print5printEc>
   dbd6e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dbd70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dbd74:	220a      	movs	r2, #10
   dbd76:	4630      	mov	r0, r6
   dbd78:	f000 fe18 	bl	dc9ac <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dbd7c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dbd7e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dbd80:	d1f0      	bne.n	dbd64 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dbd82:	4620      	mov	r0, r4
    }
    return n;
}
   dbd84:	b00d      	add	sp, #52	; 0x34
   dbd86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbd88 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dbd88:	b510      	push	{r4, lr}
   dbd8a:	4b05      	ldr	r3, [pc, #20]	; (dbda0 <_ZN9IPAddressC1Ev+0x18>)
   dbd8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dbd8e:	2211      	movs	r2, #17
   dbd90:	f840 3b04 	str.w	r3, [r0], #4
   dbd94:	2100      	movs	r1, #0
   dbd96:	f008 f918 	bl	e3fca <memset>
{
    clear();
}
   dbd9a:	4620      	mov	r0, r4
   dbd9c:	bd10      	pop	{r4, pc}
   dbd9e:	bf00      	nop
   dbda0:	000e894c 	.word	0x000e894c

000dbda4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dbda4:	4603      	mov	r3, r0
   dbda6:	4a07      	ldr	r2, [pc, #28]	; (dbdc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dbda8:	b510      	push	{r4, lr}
   dbdaa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dbdae:	f101 0210 	add.w	r2, r1, #16
   dbdb2:	f851 4b04 	ldr.w	r4, [r1], #4
   dbdb6:	f843 4b04 	str.w	r4, [r3], #4
   dbdba:	4291      	cmp	r1, r2
   dbdbc:	d1f9      	bne.n	dbdb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dbdbe:	780a      	ldrb	r2, [r1, #0]
   dbdc0:	701a      	strb	r2, [r3, #0]
}
   dbdc2:	bd10      	pop	{r4, pc}
   dbdc4:	000e894c 	.word	0x000e894c

000dbdc8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dbdc8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dbdca:	2b04      	cmp	r3, #4
   dbdcc:	d101      	bne.n	dbdd2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dbdce:	6840      	ldr	r0, [r0, #4]
   dbdd0:	e008      	b.n	dbde4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dbdd2:	2b06      	cmp	r3, #6
   dbdd4:	d10a      	bne.n	dbdec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dbdd6:	6843      	ldr	r3, [r0, #4]
   dbdd8:	b953      	cbnz	r3, dbdf0 <_ZNK9IPAddresscvbEv+0x28>
   dbdda:	6883      	ldr	r3, [r0, #8]
   dbddc:	b943      	cbnz	r3, dbdf0 <_ZNK9IPAddresscvbEv+0x28>
   dbdde:	68c3      	ldr	r3, [r0, #12]
   dbde0:	b933      	cbnz	r3, dbdf0 <_ZNK9IPAddresscvbEv+0x28>
   dbde2:	6900      	ldr	r0, [r0, #16]
   dbde4:	3000      	adds	r0, #0
   dbde6:	bf18      	it	ne
   dbde8:	2001      	movne	r0, #1
   dbdea:	4770      	bx	lr
    } else {
        return false;
   dbdec:	2000      	movs	r0, #0
   dbdee:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dbdf0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dbdf2:	4770      	bx	lr

000dbdf4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dbdf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dbdf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dbdfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dbdfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dbe02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dbe06:	2304      	movs	r3, #4
   dbe08:	6041      	str	r1, [r0, #4]
   dbe0a:	7503      	strb	r3, [r0, #20]
   dbe0c:	bd10      	pop	{r4, pc}

000dbe0e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dbe0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dbe10:	780d      	ldrb	r5, [r1, #0]
   dbe12:	788b      	ldrb	r3, [r1, #2]
   dbe14:	784a      	ldrb	r2, [r1, #1]
   dbe16:	78c9      	ldrb	r1, [r1, #3]
   dbe18:	9100      	str	r1, [sp, #0]
   dbe1a:	4629      	mov	r1, r5
   dbe1c:	f7ff ffea 	bl	dbdf4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dbe20:	b003      	add	sp, #12
   dbe22:	bd30      	pop	{r4, r5, pc}

000dbe24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbe24:	4770      	bx	lr

000dbe26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dbe26:	2000      	movs	r0, #0
   dbe28:	4770      	bx	lr

000dbe2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dbe2a:	b510      	push	{r4, lr}
   dbe2c:	2110      	movs	r1, #16
   dbe2e:	4604      	mov	r4, r0
   dbe30:	f001 fc62 	bl	dd6f8 <_ZdlPvj>
   dbe34:	4620      	mov	r0, r4
   dbe36:	bd10      	pop	{r4, pc}

000dbe38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dbe38:	b508      	push	{r3, lr}
      { delete this; }
   dbe3a:	b108      	cbz	r0, dbe40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dbe3c:	f7ff fff5 	bl	dbe2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dbe40:	bd08      	pop	{r3, pc}

000dbe42 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dbe42:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   dbe44:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dbe46:	4604      	mov	r4, r0
    {
      if (_M_manager)
   dbe48:	b113      	cbz	r3, dbe50 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dbe4a:	2203      	movs	r2, #3
   dbe4c:	4601      	mov	r1, r0
   dbe4e:	4798      	blx	r3
    }
   dbe50:	4620      	mov	r0, r4
   dbe52:	bd10      	pop	{r4, pc}

000dbe54 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbe54:	2200      	movs	r2, #0
   dbe56:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dbe58:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dbe5a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dbe5e:	8082      	strh	r2, [r0, #4]
   dbe60:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dbe64:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe66:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe68:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dbe6a:	680c      	ldr	r4, [r1, #0]
   dbe6c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dbe6e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dbe70:	bd10      	pop	{r4, pc}

000dbe72 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dbe72:	b510      	push	{r4, lr}
   dbe74:	4604      	mov	r4, r0
    free((void*)msg_);
   dbe76:	6800      	ldr	r0, [r0, #0]
   dbe78:	f7ff f86c 	bl	daf54 <free>
}
   dbe7c:	4620      	mov	r0, r4
   dbe7e:	bd10      	pop	{r4, pc}

000dbe80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dbe80:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dbe82:	68c4      	ldr	r4, [r0, #12]
   dbe84:	b1f4      	cbz	r4, dbec4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dbe86:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dbe88:	2b02      	cmp	r3, #2
   dbe8a:	d103      	bne.n	dbe94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dbe8c:	f104 000c 	add.w	r0, r4, #12
   dbe90:	f7ff ffef 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dbe94:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dbe96:	b135      	cbz	r5, dbea6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dbe98:	4628      	mov	r0, r5
   dbe9a:	f7ff ffd2 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
   dbe9e:	2110      	movs	r1, #16
   dbea0:	4628      	mov	r0, r5
   dbea2:	f001 fc29 	bl	dd6f8 <_ZdlPvj>
   dbea6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dbea8:	b135      	cbz	r5, dbeb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dbeaa:	4628      	mov	r0, r5
   dbeac:	f7ff ffc9 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
   dbeb0:	2110      	movs	r1, #16
   dbeb2:	4628      	mov	r0, r5
   dbeb4:	f001 fc20 	bl	dd6f8 <_ZdlPvj>
   dbeb8:	4620      	mov	r0, r4
   dbeba:	2114      	movs	r1, #20
   dbebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbec0:	f001 bc1a 	b.w	dd6f8 <_ZdlPvj>
   dbec4:	bd38      	pop	{r3, r4, r5, pc}

000dbec6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dbec6:	b513      	push	{r0, r1, r4, lr}
   dbec8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dbeca:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dbece:	2300      	movs	r3, #0
   dbed0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbed2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dbed4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dbed6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbed8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dbeda:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dbedc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbede:	f7f9 ffe7 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbee2:	4620      	mov	r0, r4
   dbee4:	b002      	add	sp, #8
   dbee6:	bd10      	pop	{r4, pc}

000dbee8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dbee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dbeea:	460c      	mov	r4, r1
   dbeec:	ad02      	add	r5, sp, #8
   dbeee:	f854 3b04 	ldr.w	r3, [r4], #4
   dbef2:	f845 3d08 	str.w	r3, [r5, #-8]!
   dbef6:	4606      	mov	r6, r0
   dbef8:	460f      	mov	r7, r1
   dbefa:	a801      	add	r0, sp, #4
   dbefc:	4621      	mov	r1, r4
   dbefe:	f7ff fe79 	bl	dbbf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dbf02:	4629      	mov	r1, r5
   dbf04:	4630      	mov	r0, r6
   dbf06:	f7ff ffde 	bl	dbec6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dbf0a:	a801      	add	r0, sp, #4
   dbf0c:	f7f9 ffd0 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbf10:	4620      	mov	r0, r4
   dbf12:	f7f9 ffcd 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dbf16:	4638      	mov	r0, r7
   dbf18:	2108      	movs	r1, #8
   dbf1a:	f001 fbed 	bl	dd6f8 <_ZdlPvj>
        return p;
    }
   dbf1e:	4630      	mov	r0, r6
   dbf20:	b003      	add	sp, #12
   dbf22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbf24 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dbf24:	b513      	push	{r0, r1, r4, lr}
   dbf26:	460b      	mov	r3, r1
   dbf28:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbf2a:	c803      	ldmia	r0, {r0, r1}
   dbf2c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dbf30:	e893 0003 	ldmia.w	r3, {r0, r1}
   dbf34:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dbf38:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dbf3c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dbf40:	b002      	add	sp, #8
   dbf42:	bd10      	pop	{r4, pc}

000dbf44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbf44:	b538      	push	{r3, r4, r5, lr}
   dbf46:	2300      	movs	r3, #0
   dbf48:	4604      	mov	r4, r0
   dbf4a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbf4c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dbf4e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbf50:	f7f8 f8a3 	bl	d409a <_Znwj>
   dbf54:	b128      	cbz	r0, dbf62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dbf56:	2301      	movs	r3, #1
   dbf58:	6043      	str	r3, [r0, #4]
   dbf5a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dbf5c:	4b02      	ldr	r3, [pc, #8]	; (dbf68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dbf5e:	6003      	str	r3, [r0, #0]
   dbf60:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dbf62:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dbf64:	4620      	mov	r0, r4
   dbf66:	bd38      	pop	{r3, r4, r5, pc}
   dbf68:	000e8960 	.word	0x000e8960

000dbf6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbf6c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbf6e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbf70:	b90a      	cbnz	r2, dbf76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dbf72:	f001 fbd4 	bl	dd71e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbf76:	68c3      	ldr	r3, [r0, #12]
    }
   dbf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbf7c:	4718      	bx	r3

000dbf7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbf7e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbf80:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbf82:	f100 0110 	add.w	r1, r0, #16
   dbf86:	f7ff fff1 	bl	dbf6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dbf8a:	bd08      	pop	{r3, pc}

000dbf8c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbf8c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dbf8e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dbf90:	b90a      	cbnz	r2, dbf96 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dbf92:	f001 fbc4 	bl	dd71e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbf96:	68c3      	ldr	r3, [r0, #12]
    }
   dbf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbf9c:	4718      	bx	r3

000dbf9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dbf9e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dbfa0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dbfa2:	f100 0110 	add.w	r1, r0, #16
   dbfa6:	f7ff fff1 	bl	dbf8c <_ZNKSt8functionIFvRKbEEclES1_>
   dbfaa:	bd08      	pop	{r3, pc}

000dbfac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbfac:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dbfae:	2300      	movs	r3, #0
   dbfb0:	6083      	str	r3, [r0, #8]
   dbfb2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dbfb4:	4604      	mov	r4, r0
   dbfb6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dbfb8:	b12b      	cbz	r3, dbfc6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dbfba:	2202      	movs	r2, #2
   dbfbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dbfbe:	68eb      	ldr	r3, [r5, #12]
   dbfc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dbfc2:	68ab      	ldr	r3, [r5, #8]
   dbfc4:	60a3      	str	r3, [r4, #8]
	}
    }
   dbfc6:	4620      	mov	r0, r4
   dbfc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000dbfcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dbfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbfce:	b089      	sub	sp, #36	; 0x24
   dbfd0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dbfd2:	4668      	mov	r0, sp
   dbfd4:	f7ff ff3e 	bl	dbe54 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dbfd8:	2300      	movs	r3, #0
   dbfda:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dbfde:	f04f 0202 	mov.w	r2, #2
   dbfe2:	e8d4 3f4f 	ldrexb	r3, [r4]
   dbfe6:	2b00      	cmp	r3, #0
   dbfe8:	d103      	bne.n	dbff2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dbfea:	e8c4 2f41 	strexb	r1, r2, [r4]
   dbfee:	2900      	cmp	r1, #0
   dbff0:	d1f7      	bne.n	dbfe2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dbff2:	d002      	beq.n	dbffa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dbff4:	f88d 3008 	strb.w	r3, [sp, #8]
   dbff8:	e063      	b.n	dc0c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dbffa:	f114 050c 	adds.w	r5, r4, #12
   dbffe:	d003      	beq.n	dc008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dc000:	4669      	mov	r1, sp
   dc002:	4628      	mov	r0, r5
   dc004:	f7ff ff26 	bl	dbe54 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dc008:	f3bf 8f5f 	dmb	sy
   dc00c:	2301      	movs	r3, #1
   dc00e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dc010:	2000      	movs	r0, #0
   dc012:	f104 0308 	add.w	r3, r4, #8
   dc016:	f3bf 8f5f 	dmb	sy
   dc01a:	e853 6f00 	ldrex	r6, [r3]
   dc01e:	e843 0200 	strex	r2, r0, [r3]
   dc022:	2a00      	cmp	r2, #0
   dc024:	d1f9      	bne.n	dc01a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dc026:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dc02a:	2e00      	cmp	r6, #0
   dc02c:	d049      	beq.n	dc0c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dc02e:	f7fe ff4b 	bl	daec8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dc032:	b120      	cbz	r0, dc03e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dc034:	4629      	mov	r1, r5
   dc036:	4630      	mov	r0, r6
   dc038:	f7ff ff98 	bl	dbf6c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dc03c:	e03a      	b.n	dc0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dc03e:	4631      	mov	r1, r6
   dc040:	a802      	add	r0, sp, #8
   dc042:	f7ff ffb3 	bl	dbfac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dc046:	68e0      	ldr	r0, [r4, #12]
   dc048:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dc04c:	b108      	cbz	r0, dc052 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dc04e:	f008 fa4d 	bl	e44ec <strdup>
   dc052:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dc054:	2010      	movs	r0, #16
   dc056:	f8ad 501c 	strh.w	r5, [sp, #28]
   dc05a:	f7f8 f81e 	bl	d409a <_Znwj>
   dc05e:	4605      	mov	r5, r0
   dc060:	b1e8      	cbz	r0, dc09e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc062:	2700      	movs	r7, #0
   dc064:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc066:	2018      	movs	r0, #24
   dc068:	f7f8 f817 	bl	d409a <_Znwj>
   dc06c:	4604      	mov	r4, r0
   dc06e:	b188      	cbz	r0, dc094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dc070:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc072:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dc074:	a802      	add	r0, sp, #8
   dc076:	f7ff ff55 	bl	dbf24 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc07a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc07c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc07e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc080:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dc082:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dc084:	a906      	add	r1, sp, #24
   dc086:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc088:	60e3      	str	r3, [r4, #12]
   dc08a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dc08e:	9205      	str	r2, [sp, #20]
   dc090:	f7ff fee0 	bl	dbe54 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dc094:	4b0d      	ldr	r3, [pc, #52]	; (dc0cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dc096:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc098:	4b0d      	ldr	r3, [pc, #52]	; (dc0d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc09a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dc09c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dc09e:	a806      	add	r0, sp, #24
   dc0a0:	f7ff fee7 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc0a4:	a802      	add	r0, sp, #8
   dc0a6:	f7ff fecc 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc0aa:	2200      	movs	r2, #0
   dc0ac:	4629      	mov	r1, r5
   dc0ae:	4809      	ldr	r0, [pc, #36]	; (dc0d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dc0b0:	f7fe ff12 	bl	daed8 <application_thread_invoke>
   dc0b4:	4630      	mov	r0, r6
   dc0b6:	f7ff fec4 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dc0ba:	2110      	movs	r1, #16
   dc0bc:	4630      	mov	r0, r6
   dc0be:	f001 fb1b 	bl	dd6f8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dc0c2:	4668      	mov	r0, sp
   dc0c4:	f7ff fed5 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
    }
   dc0c8:	b009      	add	sp, #36	; 0x24
   dc0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc0cc:	000dbf7f 	.word	0x000dbf7f
   dc0d0:	000dc1f5 	.word	0x000dc1f5
   dc0d4:	000dbbcd 	.word	0x000dbbcd

000dc0d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dc0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc0dc:	b08b      	sub	sp, #44	; 0x2c
   dc0de:	4606      	mov	r6, r0
   dc0e0:	460f      	mov	r7, r1
   dc0e2:	4690      	mov	r8, r2
   dc0e4:	4699      	mov	r9, r3
   dc0e6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc0ea:	f7fe fe55 	bl	dad98 <spark_cloud_flag_connected>
   dc0ee:	ad07      	add	r5, sp, #28
    if (!connected()) {
   dc0f0:	4683      	mov	fp, r0
   dc0f2:	bb30      	cbnz	r0, dc142 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dc0f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dc0f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc0fa:	a905      	add	r1, sp, #20
   dc0fc:	4628      	mov	r0, r5
   dc0fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc102:	f7ff fea7 	bl	dbe54 <_ZN8particle5ErrorC1EOS0_>
   dc106:	2014      	movs	r0, #20
   dc108:	f7f7 ffc7 	bl	d409a <_Znwj>
   dc10c:	4604      	mov	r4, r0
   dc10e:	b158      	cbz	r0, dc128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dc110:	2302      	movs	r3, #2
   dc112:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc114:	2301      	movs	r3, #1
   dc116:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc118:	f8c0 b004 	str.w	fp, [r0, #4]
   dc11c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dc120:	4629      	mov	r1, r5
   dc122:	300c      	adds	r0, #12
   dc124:	f7ff fe96 	bl	dbe54 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dc128:	4630      	mov	r0, r6
   dc12a:	4621      	mov	r1, r4
   dc12c:	f840 4b04 	str.w	r4, [r0], #4
   dc130:	f7ff ff08 	bl	dbf44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dc134:	4628      	mov	r0, r5
   dc136:	f7ff fe9c 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dc13a:	a805      	add	r0, sp, #20
   dc13c:	f7ff fe99 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
   dc140:	e052      	b.n	dc1e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dc142:	2400      	movs	r4, #0
   dc144:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dc146:	2014      	movs	r0, #20
   dc148:	606c      	str	r4, [r5, #4]
   dc14a:	60ac      	str	r4, [r5, #8]
   dc14c:	9307      	str	r3, [sp, #28]
   dc14e:	f7f7 ffa4 	bl	d409a <_Znwj>
   dc152:	4601      	mov	r1, r0
   dc154:	b118      	cbz	r0, dc15e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dc156:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dc158:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dc15a:	6044      	str	r4, [r0, #4]
   dc15c:	6084      	str	r4, [r0, #8]
   dc15e:	a804      	add	r0, sp, #16
   dc160:	9103      	str	r1, [sp, #12]
   dc162:	f7ff feef 	bl	dbf44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dc166:	4b22      	ldr	r3, [pc, #136]	; (dc1f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dc168:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dc16a:	2008      	movs	r0, #8
   dc16c:	f7f7 ff95 	bl	d409a <_Znwj>
   dc170:	4604      	mov	r4, r0
   dc172:	b128      	cbz	r0, dc180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc174:	9b03      	ldr	r3, [sp, #12]
   dc176:	f840 3b04 	str.w	r3, [r0], #4
   dc17a:	a904      	add	r1, sp, #16
   dc17c:	f7ff fd3a 	bl	dbbf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc180:	9500      	str	r5, [sp, #0]
   dc182:	fa5f f38a 	uxtb.w	r3, sl
   dc186:	464a      	mov	r2, r9
   dc188:	4641      	mov	r1, r8
   dc18a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dc18c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dc18e:	f7fe fe0b 	bl	dada8 <spark_send_event>
   dc192:	b920      	cbnz	r0, dc19e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dc194:	9b03      	ldr	r3, [sp, #12]
   dc196:	785b      	ldrb	r3, [r3, #1]
   dc198:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dc19c:	b183      	cbz	r3, dc1c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dc19e:	9b03      	ldr	r3, [sp, #12]
   dc1a0:	9305      	str	r3, [sp, #20]
   dc1a2:	a904      	add	r1, sp, #16
   dc1a4:	a806      	add	r0, sp, #24
   dc1a6:	f7ff fd25 	bl	dbbf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dc1aa:	a905      	add	r1, sp, #20
   dc1ac:	4630      	mov	r0, r6
   dc1ae:	f7ff fe8a 	bl	dbec6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dc1b2:	a806      	add	r0, sp, #24
   dc1b4:	f7f9 fe7c 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc1b8:	a804      	add	r0, sp, #16
   dc1ba:	f7f9 fe79 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc1be:	e013      	b.n	dc1e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dc1c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dc1c4:	a905      	add	r1, sp, #20
   dc1c6:	a803      	add	r0, sp, #12
   dc1c8:	9205      	str	r2, [sp, #20]
   dc1ca:	f8ad 3018 	strh.w	r3, [sp, #24]
   dc1ce:	f7ff fefd 	bl	dbfcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc1d2:	a805      	add	r0, sp, #20
   dc1d4:	f7ff fe4d 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dc1d8:	a805      	add	r0, sp, #20
   dc1da:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc1dc:	f7ff fe84 	bl	dbee8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dc1e0:	a806      	add	r0, sp, #24
   dc1e2:	f7f9 fe65 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc1e6:	e7da      	b.n	dc19e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dc1e8:	4630      	mov	r0, r6
   dc1ea:	b00b      	add	sp, #44	; 0x2c
   dc1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc1f0:	000dc365 	.word	0x000dc365

000dc1f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dc1f4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc1f8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dc1fa:	d006      	beq.n	dc20a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dc1fc:	2a03      	cmp	r2, #3
   dc1fe:	d017      	beq.n	dc230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dc200:	2a01      	cmp	r2, #1
   dc202:	d122      	bne.n	dc24a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dc204:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dc206:	6003      	str	r3, [r0, #0]
	      break;
   dc208:	e01f      	b.n	dc24a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc20a:	2018      	movs	r0, #24
   dc20c:	680e      	ldr	r6, [r1, #0]
   dc20e:	f7f7 ff44 	bl	d409a <_Znwj>
   dc212:	4605      	mov	r5, r0
   dc214:	b150      	cbz	r0, dc22c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dc216:	4631      	mov	r1, r6
   dc218:	f7ff fec8 	bl	dbfac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dc21c:	6930      	ldr	r0, [r6, #16]
   dc21e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dc222:	b108      	cbz	r0, dc228 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dc224:	f008 f962 	bl	e44ec <strdup>
   dc228:	6128      	str	r0, [r5, #16]
   dc22a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc22c:	6025      	str	r5, [r4, #0]
   dc22e:	e00c      	b.n	dc24a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc230:	6804      	ldr	r4, [r0, #0]
   dc232:	b154      	cbz	r4, dc24a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dc234:	f104 0010 	add.w	r0, r4, #16
   dc238:	f7ff fe1b 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc23c:	4620      	mov	r0, r4
   dc23e:	f7ff fe00 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc242:	2118      	movs	r1, #24
   dc244:	4620      	mov	r0, r4
   dc246:	f001 fa57 	bl	dd6f8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dc24a:	2000      	movs	r0, #0
   dc24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc24e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dc24e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc250:	2300      	movs	r3, #0
   dc252:	6083      	str	r3, [r0, #8]
   dc254:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dc256:	4604      	mov	r4, r0
   dc258:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dc25a:	b12b      	cbz	r3, dc268 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc25c:	2202      	movs	r2, #2
   dc25e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc260:	68eb      	ldr	r3, [r5, #12]
   dc262:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc264:	68ab      	ldr	r3, [r5, #8]
   dc266:	60a3      	str	r3, [r4, #8]
	}
    }
   dc268:	4620      	mov	r0, r4
   dc26a:	bd38      	pop	{r3, r4, r5, pc}

000dc26c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dc26c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dc26e:	b570      	push	{r4, r5, r6, lr}
   dc270:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dc272:	d006      	beq.n	dc282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dc274:	2a03      	cmp	r2, #3
   dc276:	d011      	beq.n	dc29c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dc278:	2a01      	cmp	r2, #1
   dc27a:	d118      	bne.n	dc2ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dc27c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dc27e:	6003      	str	r3, [r0, #0]
	      break;
   dc280:	e015      	b.n	dc2ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc282:	2014      	movs	r0, #20
   dc284:	680e      	ldr	r6, [r1, #0]
   dc286:	f7f7 ff08 	bl	d409a <_Znwj>
   dc28a:	4605      	mov	r5, r0
   dc28c:	b120      	cbz	r0, dc298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dc28e:	4631      	mov	r1, r6
   dc290:	f7ff ffdd 	bl	dc24e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dc294:	7c33      	ldrb	r3, [r6, #16]
   dc296:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dc298:	6025      	str	r5, [r4, #0]
   dc29a:	e008      	b.n	dc2ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc29c:	6804      	ldr	r4, [r0, #0]
   dc29e:	b134      	cbz	r4, dc2ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc2a0:	4620      	mov	r0, r4
   dc2a2:	f7ff fdce 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dc2a6:	2114      	movs	r1, #20
   dc2a8:	4620      	mov	r0, r4
   dc2aa:	f001 fa25 	bl	dd6f8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dc2ae:	2000      	movs	r0, #0
   dc2b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc2b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dc2b4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dc2b6:	2300      	movs	r3, #0
   dc2b8:	b087      	sub	sp, #28
   dc2ba:	460c      	mov	r4, r1
   dc2bc:	f3bf 8f5f 	dmb	sy
   dc2c0:	e850 6f00 	ldrex	r6, [r0]
   dc2c4:	e840 3200 	strex	r2, r3, [r0]
   dc2c8:	2a00      	cmp	r2, #0
   dc2ca:	d1f9      	bne.n	dc2c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dc2cc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dc2d0:	2e00      	cmp	r6, #0
   dc2d2:	d03f      	beq.n	dc354 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dc2d4:	4618      	mov	r0, r3
   dc2d6:	f7fe fdf7 	bl	daec8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dc2da:	4607      	mov	r7, r0
   dc2dc:	b120      	cbz	r0, dc2e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dc2de:	4621      	mov	r1, r4
   dc2e0:	4630      	mov	r0, r6
   dc2e2:	f7ff fe53 	bl	dbf8c <_ZNKSt8functionIFvRKbEEclES1_>
   dc2e6:	e02e      	b.n	dc346 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dc2e8:	4631      	mov	r1, r6
   dc2ea:	a801      	add	r0, sp, #4
   dc2ec:	f7ff ffaf 	bl	dc24e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dc2f0:	7823      	ldrb	r3, [r4, #0]
   dc2f2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dc2f6:	2010      	movs	r0, #16
   dc2f8:	f7f7 fecf 	bl	d409a <_Znwj>
   dc2fc:	4605      	mov	r5, r0
   dc2fe:	b1d0      	cbz	r0, dc336 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc300:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc302:	2014      	movs	r0, #20
   dc304:	f7f7 fec9 	bl	d409a <_Znwj>
   dc308:	4604      	mov	r4, r0
   dc30a:	b178      	cbz	r0, dc32c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc30c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dc30e:	4601      	mov	r1, r0
   dc310:	a801      	add	r0, sp, #4
   dc312:	f7ff fe07 	bl	dbf24 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc316:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dc318:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dc31a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc31c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dc31e:	9203      	str	r2, [sp, #12]
   dc320:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dc322:	60e3      	str	r3, [r4, #12]
   dc324:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dc328:	9204      	str	r2, [sp, #16]
   dc32a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dc32c:	4b0a      	ldr	r3, [pc, #40]	; (dc358 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dc32e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dc330:	4b0a      	ldr	r3, [pc, #40]	; (dc35c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dc332:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dc334:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc336:	a801      	add	r0, sp, #4
   dc338:	f7ff fd83 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dc33c:	2200      	movs	r2, #0
   dc33e:	4629      	mov	r1, r5
   dc340:	4807      	ldr	r0, [pc, #28]	; (dc360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dc342:	f7fe fdc9 	bl	daed8 <application_thread_invoke>
   dc346:	4630      	mov	r0, r6
   dc348:	f7ff fd7b 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dc34c:	2110      	movs	r1, #16
   dc34e:	4630      	mov	r0, r6
   dc350:	f001 f9d2 	bl	dd6f8 <_ZdlPvj>
        }
    }
   dc354:	b007      	add	sp, #28
   dc356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc358:	000dbf9f 	.word	0x000dbf9f
   dc35c:	000dc26d 	.word	0x000dc26d
   dc360:	000dbbcd 	.word	0x000dbbcd

000dc364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dc364:	b530      	push	{r4, r5, lr}
   dc366:	b085      	sub	sp, #20
   dc368:	4604      	mov	r4, r0
   dc36a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dc36c:	4668      	mov	r0, sp
   dc36e:	4611      	mov	r1, r2
   dc370:	f7ff fdba 	bl	dbee8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dc374:	b17c      	cbz	r4, dc396 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dc376:	b224      	sxth	r4, r4
   dc378:	4628      	mov	r0, r5
   dc37a:	b10d      	cbz	r5, dc380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dc37c:	f008 f8b6 	bl	e44ec <strdup>
   dc380:	9002      	str	r0, [sp, #8]
   dc382:	a902      	add	r1, sp, #8
   dc384:	4668      	mov	r0, sp
   dc386:	f8ad 400c 	strh.w	r4, [sp, #12]
   dc38a:	f7ff fe1f 	bl	dbfcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dc38e:	a802      	add	r0, sp, #8
   dc390:	f7ff fd6f 	bl	dbe72 <_ZN8particle5ErrorD1Ev>
   dc394:	e01d      	b.n	dc3d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dc396:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dc398:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dc39c:	f04f 0201 	mov.w	r2, #1
   dc3a0:	e8d0 3f4f 	ldrexb	r3, [r0]
   dc3a4:	42a3      	cmp	r3, r4
   dc3a6:	d103      	bne.n	dc3b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dc3a8:	e8c0 2f41 	strexb	r1, r2, [r0]
   dc3ac:	2900      	cmp	r1, #0
   dc3ae:	d1f7      	bne.n	dc3a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dc3b0:	d002      	beq.n	dc3b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dc3b2:	f88d 3008 	strb.w	r3, [sp, #8]
   dc3b6:	e00c      	b.n	dc3d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dc3b8:	f110 010c 	adds.w	r1, r0, #12
   dc3bc:	f04f 0301 	mov.w	r3, #1
   dc3c0:	bf18      	it	ne
   dc3c2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dc3c4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dc3c8:	3004      	adds	r0, #4
   dc3ca:	f800 3c03 	strb.w	r3, [r0, #-3]
   dc3ce:	f7ff ff71 	bl	dc2b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dc3d2:	a801      	add	r0, sp, #4
   dc3d4:	f7f9 fd6c 	bl	d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dc3d8:	b005      	add	sp, #20
   dc3da:	bd30      	pop	{r4, r5, pc}

000dc3dc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dc3dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dc3de:	4b0c      	ldr	r3, [pc, #48]	; (dc410 <serialEventRun+0x34>)
   dc3e0:	b133      	cbz	r3, dc3f0 <serialEventRun+0x14>
   dc3e2:	f7ff fc71 	bl	dbcc8 <_Z16_fetch_usbserialv>
   dc3e6:	6803      	ldr	r3, [r0, #0]
   dc3e8:	691b      	ldr	r3, [r3, #16]
   dc3ea:	4798      	blx	r3
   dc3ec:	2800      	cmp	r0, #0
   dc3ee:	dc09      	bgt.n	dc404 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dc3f0:	4b08      	ldr	r3, [pc, #32]	; (dc414 <serialEventRun+0x38>)
   dc3f2:	b163      	cbz	r3, dc40e <serialEventRun+0x32>
   dc3f4:	f000 fc80 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   dc3f8:	6803      	ldr	r3, [r0, #0]
   dc3fa:	691b      	ldr	r3, [r3, #16]
   dc3fc:	4798      	blx	r3
   dc3fe:	2800      	cmp	r0, #0
   dc400:	dc03      	bgt.n	dc40a <serialEventRun+0x2e>
   dc402:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dc404:	f3af 8000 	nop.w
   dc408:	e7f2      	b.n	dc3f0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dc40a:	f3af 8000 	nop.w
   dc40e:	bd08      	pop	{r3, pc}
	...

000dc418 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dc418:	b508      	push	{r3, lr}
	serialEventRun();
   dc41a:	f7ff ffdf 	bl	dc3dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dc41e:	f7fe fbc9 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dc422:	4b01      	ldr	r3, [pc, #4]	; (dc428 <_post_loop+0x10>)
   dc424:	6018      	str	r0, [r3, #0]
   dc426:	bd08      	pop	{r3, pc}
   dc428:	2003e620 	.word	0x2003e620

000dc42c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dc42c:	4802      	ldr	r0, [pc, #8]	; (dc438 <_Z33system_initialize_user_backup_ramv+0xc>)
   dc42e:	4a03      	ldr	r2, [pc, #12]	; (dc43c <_Z33system_initialize_user_backup_ramv+0x10>)
   dc430:	4903      	ldr	r1, [pc, #12]	; (dc440 <_Z33system_initialize_user_backup_ramv+0x14>)
   dc432:	1a12      	subs	r2, r2, r0
   dc434:	f007 bdbe 	b.w	e3fb4 <memcpy>
   dc438:	2003f400 	.word	0x2003f400
   dc43c:	2003f404 	.word	0x2003f404
   dc440:	000e9498 	.word	0x000e9498

000dc444 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dc444:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc446:	2300      	movs	r3, #0
   dc448:	9300      	str	r3, [sp, #0]
   dc44a:	461a      	mov	r2, r3
   dc44c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc450:	f7fe fd64 	bl	daf1c <system_ctrl_set_result>
}
   dc454:	b003      	add	sp, #12
   dc456:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc45c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dc45c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dc45e:	8843      	ldrh	r3, [r0, #2]
   dc460:	2b0a      	cmp	r3, #10
   dc462:	d008      	beq.n	dc476 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dc464:	2b50      	cmp	r3, #80	; 0x50
   dc466:	d109      	bne.n	dc47c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dc468:	4b09      	ldr	r3, [pc, #36]	; (dc490 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dc46a:	681b      	ldr	r3, [r3, #0]
   dc46c:	b13b      	cbz	r3, dc47e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dc46e:	b003      	add	sp, #12
   dc470:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dc474:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dc476:	f7ff ffe5 	bl	dc444 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dc47a:	e006      	b.n	dc48a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc47c:	2300      	movs	r3, #0
   dc47e:	9300      	str	r3, [sp, #0]
   dc480:	461a      	mov	r2, r3
   dc482:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc486:	f7fe fd49 	bl	daf1c <system_ctrl_set_result>
        break;
    }
}
   dc48a:	b003      	add	sp, #12
   dc48c:	f85d fb04 	ldr.w	pc, [sp], #4
   dc490:	2003e57c 	.word	0x2003e57c

000dc494 <module_user_init_hook>:

void module_user_init_hook()
{
   dc494:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dc496:	4c10      	ldr	r4, [pc, #64]	; (dc4d8 <module_user_init_hook+0x44>)
   dc498:	4d10      	ldr	r5, [pc, #64]	; (dc4dc <module_user_init_hook+0x48>)
   dc49a:	6823      	ldr	r3, [r4, #0]
   dc49c:	42ab      	cmp	r3, r5
   dc49e:	4b10      	ldr	r3, [pc, #64]	; (dc4e0 <module_user_init_hook+0x4c>)
   dc4a0:	bf0c      	ite	eq
   dc4a2:	2201      	moveq	r2, #1
   dc4a4:	2200      	movne	r2, #0
   dc4a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dc4a8:	d002      	beq.n	dc4b0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dc4aa:	f7ff ffbf 	bl	dc42c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dc4ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dc4b0:	f7fe fb78 	bl	daba4 <HAL_RNG_GetRandomNumber>
   dc4b4:	4604      	mov	r4, r0
    srand(seed);
   dc4b6:	f007 ffdf 	bl	e4478 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dc4ba:	4b0a      	ldr	r3, [pc, #40]	; (dc4e4 <module_user_init_hook+0x50>)
   dc4bc:	b113      	cbz	r3, dc4c4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dc4be:	4620      	mov	r0, r4
   dc4c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dc4c4:	2100      	movs	r1, #0
   dc4c6:	4807      	ldr	r0, [pc, #28]	; (dc4e4 <module_user_init_hook+0x50>)
   dc4c8:	f7fe fc86 	bl	dadd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dc4cc:	2100      	movs	r1, #0
   dc4ce:	4806      	ldr	r0, [pc, #24]	; (dc4e8 <module_user_init_hook+0x54>)
}
   dc4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dc4d4:	f7fe bd18 	b.w	daf08 <system_ctrl_set_app_request_handler>
   dc4d8:	2003f400 	.word	0x2003f400
   dc4dc:	9a271c1e 	.word	0x9a271c1e
   dc4e0:	2003e580 	.word	0x2003e580
   dc4e4:	00000000 	.word	0x00000000
   dc4e8:	000dc45d 	.word	0x000dc45d

000dc4ec <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   dc4ec:	6800      	ldr	r0, [r0, #0]
   dc4ee:	f7ff bb5b 	b.w	dbba8 <_ZN7TwoWire4lockEv>

000dc4f2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   dc4f2:	b510      	push	{r4, lr}
   dc4f4:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   dc4f6:	6001      	str	r1, [r0, #0]
   dc4f8:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   dc4fa:	b10a      	cbz	r2, dc500 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   dc4fc:	f7ff fff6 	bl	dc4ec <_ZN9FuelGauge4lockEv>
    }
}
   dc500:	4620      	mov	r0, r4
   dc502:	bd10      	pop	{r4, pc}

000dc504 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   dc504:	b538      	push	{r3, r4, r5, lr}
   dc506:	4604      	mov	r4, r0
   dc508:	460d      	mov	r5, r1
        }
#endif // Wiring_Wire3
    }
#endif // HAL_PLATFORM_FUELGAUGE_MAX17043

    return &Wire;
   dc50a:	f001 f811 	bl	dd530 <_Z19__fetch_global_Wirev>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   dc50e:	462a      	mov	r2, r5
   dc510:	4601      	mov	r1, r0
   dc512:	4620      	mov	r0, r4
   dc514:	f7ff ffed 	bl	dc4f2 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   dc518:	4620      	mov	r0, r4
   dc51a:	bd38      	pop	{r3, r4, r5, pc}

000dc51c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   dc51c:	6800      	ldr	r0, [r0, #0]
   dc51e:	f7ff bb4c 	b.w	dbbba <_ZN7TwoWire6unlockEv>

000dc522 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   dc522:	b510      	push	{r4, lr}
{
    if (lock_) {
   dc524:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   dc526:	4604      	mov	r4, r0
{
    if (lock_) {
   dc528:	b10b      	cbz	r3, dc52e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   dc52a:	f7ff fff7 	bl	dc51c <_ZN9FuelGauge6unlockEv>
    }
}
   dc52e:	4620      	mov	r0, r4
   dc530:	bd10      	pop	{r4, pc}

000dc532 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dc532:	b510      	push	{r4, lr}
   dc534:	4604      	mov	r4, r0
   dc536:	f7ff fc84 	bl	dbe42 <_ZNSt14_Function_baseD1Ev>
   dc53a:	4620      	mov	r0, r4
   dc53c:	bd10      	pop	{r4, pc}

000dc53e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   dc53e:	b510      	push	{r4, lr}
   dc540:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dc542:	f7fe fbf7 	bl	dad34 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   dc546:	4284      	cmp	r4, r0
   dc548:	d008      	beq.n	dc55c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   dc54a:	b11c      	cbz	r4, dc554 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   dc54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   dc550:	f7fe bbe0 	b.w	dad14 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   dc554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   dc558:	f7fe bbe4 	b.w	dad24 <LED_Signaling_Stop>
   dc55c:	bd10      	pop	{r4, pc}

000dc55e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   dc55e:	b570      	push	{r4, r5, r6, lr}
   dc560:	4605      	mov	r5, r0
   dc562:	460e      	mov	r6, r1
   dc564:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dc566:	f7fe fbe5 	bl	dad34 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   dc56a:	b150      	cbz	r0, dc582 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   dc56c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   dc570:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   dc574:	f7fe fbc6 	bl	dad04 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   dc578:	20e7      	movs	r0, #231	; 0xe7
}
   dc57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   dc57e:	f7fe bbe1 	b.w	dad44 <LED_On>
   dc582:	bd70      	pop	{r4, r5, r6, pc}

000dc584 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc584:	4803      	ldr	r0, [pc, #12]	; (dc594 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dc586:	4a04      	ldr	r2, [pc, #16]	; (dc598 <_GLOBAL__sub_I_RGB+0x14>)
   dc588:	4904      	ldr	r1, [pc, #16]	; (dc59c <_GLOBAL__sub_I_RGB+0x18>)
   dc58a:	2300      	movs	r3, #0
   dc58c:	6083      	str	r3, [r0, #8]
   dc58e:	f001 b8a5 	b.w	dd6dc <__aeabi_atexit>
   dc592:	bf00      	nop
   dc594:	2003e584 	.word	0x2003e584
   dc598:	2003d7b0 	.word	0x2003d7b0
   dc59c:	000dc533 	.word	0x000dc533

000dc5a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   dc5a0:	4700      	bx	r0
	...

000dc5a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dc5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc5a6:	b085      	sub	sp, #20
   dc5a8:	461c      	mov	r4, r3
   dc5aa:	460e      	mov	r6, r1
   dc5ac:	4617      	mov	r7, r2
   dc5ae:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   dc5b0:	f7fe fb78 	bl	daca4 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   dc5b4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   dc5b6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc5b8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   dc5bc:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dc5be:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dc5c2:	bfa5      	ittet	ge
   dc5c4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dc5c8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dc5cc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dc5ce:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc5d0:	9300      	str	r3, [sp, #0]
   dc5d2:	4632      	mov	r2, r6
   dc5d4:	463b      	mov	r3, r7
   dc5d6:	4906      	ldr	r1, [pc, #24]	; (dc5f0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dc5d8:	bfa8      	it	ge
   dc5da:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dc5de:	4628      	mov	r0, r5
   dc5e0:	f7fe fb58 	bl	dac94 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   dc5e4:	fab0 f080 	clz	r0, r0
   dc5e8:	0940      	lsrs	r0, r0, #5
   dc5ea:	b005      	add	sp, #20
   dc5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc5ee:	bf00      	nop
   dc5f0:	000dc5a1 	.word	0x000dc5a1

000dc5f4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dc5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dc5f6:	4b14      	ldr	r3, [pc, #80]	; (dc648 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dc5f8:	4f14      	ldr	r7, [pc, #80]	; (dc64c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dc5fa:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dc5fc:	4b14      	ldr	r3, [pc, #80]	; (dc650 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dc5fe:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dc600:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dc602:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dc604:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dc606:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dc608:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dc60a:	d01b      	beq.n	dc644 <_ZL22Refresh_UnixTime_Cachel+0x50>
   dc60c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dc60e:	ad01      	add	r5, sp, #4
   dc610:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dc614:	f007 fbd2 	bl	e3dbc <localtime>
	calendar_time->tm_year += 1900;
   dc618:	6943      	ldr	r3, [r0, #20]
   dc61a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dc61e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dc620:	4604      	mov	r4, r0
   dc622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc62a:	f8d4 e000 	ldr.w	lr, [r4]
   dc62e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dc632:	ad01      	add	r5, sp, #4
   dc634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc636:	4c07      	ldr	r4, [pc, #28]	; (dc654 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dc638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc63a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc63c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dc63e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dc640:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dc644:	b00b      	add	sp, #44	; 0x2c
   dc646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc648:	2003e5c4 	.word	0x2003e5c4
   dc64c:	2003e5c0 	.word	0x2003e5c0
   dc650:	2003e5bc 	.word	0x2003e5bc
   dc654:	2003e594 	.word	0x2003e594

000dc658 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dc658:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc65a:	2000      	movs	r0, #0
   dc65c:	f7fe fbb4 	bl	dadc8 <spark_sync_time_pending>
   dc660:	b128      	cbz	r0, dc66e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc662:	f7fe fb99 	bl	dad98 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc666:	f080 0001 	eor.w	r0, r0, #1
   dc66a:	b2c0      	uxtb	r0, r0
   dc66c:	bd08      	pop	{r3, pc}
   dc66e:	2001      	movs	r0, #1
    }
   dc670:	bd08      	pop	{r3, pc}
	...

000dc674 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dc674:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc676:	f7ff ffbd 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   dc67a:	4b01      	ldr	r3, [pc, #4]	; (dc680 <_ZN9TimeClass4hourEl+0xc>)
   dc67c:	6898      	ldr	r0, [r3, #8]
   dc67e:	bd08      	pop	{r3, pc}
   dc680:	2003e594 	.word	0x2003e594

000dc684 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   dc684:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc686:	f7ff ffb5 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   dc68a:	4b01      	ldr	r3, [pc, #4]	; (dc690 <_ZN9TimeClass6minuteEl+0xc>)
   dc68c:	6858      	ldr	r0, [r3, #4]
   dc68e:	bd08      	pop	{r3, pc}
   dc690:	2003e594 	.word	0x2003e594

000dc694 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   dc694:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc696:	f7ff ffad 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   dc69a:	4b01      	ldr	r3, [pc, #4]	; (dc6a0 <_ZN9TimeClass6secondEl+0xc>)
   dc69c:	6818      	ldr	r0, [r3, #0]
   dc69e:	bd08      	pop	{r3, pc}
   dc6a0:	2003e594 	.word	0x2003e594

000dc6a4 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dc6a4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc6a6:	f7ff ffa5 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   dc6aa:	4b01      	ldr	r3, [pc, #4]	; (dc6b0 <_ZN9TimeClass3dayEl+0xc>)
   dc6ac:	68d8      	ldr	r0, [r3, #12]
   dc6ae:	bd08      	pop	{r3, pc}
   dc6b0:	2003e594 	.word	0x2003e594

000dc6b4 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dc6b4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc6b6:	f7ff ff9d 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dc6ba:	4b02      	ldr	r3, [pc, #8]	; (dc6c4 <_ZN9TimeClass7weekdayEl+0x10>)
   dc6bc:	6998      	ldr	r0, [r3, #24]
}
   dc6be:	3001      	adds	r0, #1
   dc6c0:	bd08      	pop	{r3, pc}
   dc6c2:	bf00      	nop
   dc6c4:	2003e594 	.word	0x2003e594

000dc6c8 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dc6c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc6ca:	f7ff ff93 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dc6ce:	4b02      	ldr	r3, [pc, #8]	; (dc6d8 <_ZN9TimeClass5monthEl+0x10>)
   dc6d0:	6918      	ldr	r0, [r3, #16]
}
   dc6d2:	3001      	adds	r0, #1
   dc6d4:	bd08      	pop	{r3, pc}
   dc6d6:	bf00      	nop
   dc6d8:	2003e594 	.word	0x2003e594

000dc6dc <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   dc6dc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc6de:	f7ff ff89 	bl	dc5f4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   dc6e2:	4b01      	ldr	r3, [pc, #4]	; (dc6e8 <_ZN9TimeClass4yearEl+0xc>)
   dc6e4:	6958      	ldr	r0, [r3, #20]
   dc6e6:	bd08      	pop	{r3, pc}
   dc6e8:	2003e594 	.word	0x2003e594

000dc6ec <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dc6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   dc6ee:	4b0e      	ldr	r3, [pc, #56]	; (dc728 <_ZN9TimeClass7timeStrEl+0x3c>)
   dc6f0:	681b      	ldr	r3, [r3, #0]
   dc6f2:	4419      	add	r1, r3
   dc6f4:	4b0d      	ldr	r3, [pc, #52]	; (dc72c <_ZN9TimeClass7timeStrEl+0x40>)
   dc6f6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dc6f8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   dc6fa:	a802      	add	r0, sp, #8
   dc6fc:	4419      	add	r1, r3
   dc6fe:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   dc702:	f007 fb5b 	bl	e3dbc <localtime>
        char* ascstr = asctime(calendar_time);
   dc706:	f007 fb03 	bl	e3d10 <asctime>
   dc70a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   dc70c:	f008 fc1e 	bl	e4f4c <strlen>
        ascstr[len-1] = 0; // remove final newline
   dc710:	4428      	add	r0, r5
   dc712:	2300      	movs	r3, #0
   dc714:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   dc718:	4629      	mov	r1, r5
   dc71a:	4620      	mov	r0, r4
   dc71c:	f000 fd71 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dc720:	4620      	mov	r0, r4
   dc722:	b003      	add	sp, #12
   dc724:	bd30      	pop	{r4, r5, pc}
   dc726:	bf00      	nop
   dc728:	2003e5c4 	.word	0x2003e5c4
   dc72c:	2003e5bc 	.word	0x2003e5bc

000dc730 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc734:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc736:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc738:	4607      	mov	r7, r0
   dc73a:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc73c:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc73e:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc740:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc742:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc744:	f008 fc1f 	bl	e4f86 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc748:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc74a:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc74c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc750:	f008 fbfc 	bl	e4f4c <strlen>
   dc754:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dc756:	b925      	cbnz	r5, dc762 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   dc758:	4924      	ldr	r1, [pc, #144]	; (dc7ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   dc75a:	a803      	add	r0, sp, #12
   dc75c:	f007 febe 	bl	e44dc <strcpy>
   dc760:	e013      	b.n	dc78a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dc762:	213c      	movs	r1, #60	; 0x3c
   dc764:	fb95 f2f1 	sdiv	r2, r5, r1
   dc768:	2a00      	cmp	r2, #0
   dc76a:	bfb8      	it	lt
   dc76c:	4252      	neglt	r2, r2
   dc76e:	fb92 f3f1 	sdiv	r3, r2, r1
   dc772:	fb01 2213 	mls	r2, r1, r3, r2
   dc776:	9200      	str	r2, [sp, #0]
   dc778:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc77c:	4a1c      	ldr	r2, [pc, #112]	; (dc7f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   dc77e:	fb95 f3f3 	sdiv	r3, r5, r3
   dc782:	2110      	movs	r1, #16
   dc784:	a803      	add	r0, sp, #12
   dc786:	f7fe fc05 	bl	daf94 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc78a:	4625      	mov	r5, r4
   dc78c:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dc78e:	f108 3aff 	add.w	sl, r8, #4294967295
   dc792:	45b2      	cmp	sl, r6
   dc794:	d91b      	bls.n	dc7ce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dc796:	782b      	ldrb	r3, [r5, #0]
   dc798:	2b25      	cmp	r3, #37	; 0x25
   dc79a:	d116      	bne.n	dc7ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   dc79c:	786b      	ldrb	r3, [r5, #1]
   dc79e:	2b7a      	cmp	r3, #122	; 0x7a
   dc7a0:	d113      	bne.n	dc7ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   dc7a2:	a803      	add	r0, sp, #12
   dc7a4:	f008 fbd2 	bl	e4f4c <strlen>
   dc7a8:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dc7aa:	4430      	add	r0, r6
   dc7ac:	ebc6 020a 	rsb	r2, r6, sl
   dc7b0:	1ca9      	adds	r1, r5, #2
   dc7b2:	4420      	add	r0, r4
   dc7b4:	f007 fbfe 	bl	e3fb4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dc7b8:	4642      	mov	r2, r8
   dc7ba:	a903      	add	r1, sp, #12
   dc7bc:	4628      	mov	r0, r5
   dc7be:	f007 fbf9 	bl	e3fb4 <memcpy>
            len = strlen(format_str);
   dc7c2:	4620      	mov	r0, r4
   dc7c4:	f008 fbc2 	bl	e4f4c <strlen>
   dc7c8:	4680      	mov	r8, r0
   dc7ca:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dc7cc:	e7de      	b.n	dc78c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   dc7ce:	464b      	mov	r3, r9
   dc7d0:	4622      	mov	r2, r4
   dc7d2:	2132      	movs	r1, #50	; 0x32
   dc7d4:	a807      	add	r0, sp, #28
   dc7d6:	f007 ff05 	bl	e45e4 <strftime>
    return String(buf);
   dc7da:	a907      	add	r1, sp, #28
   dc7dc:	4638      	mov	r0, r7
   dc7de:	f000 fd10 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dc7e2:	4638      	mov	r0, r7
   dc7e4:	b024      	add	sp, #144	; 0x90
   dc7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc7ea:	bf00      	nop
   dc7ec:	000e92ed 	.word	0x000e92ed
   dc7f0:	000e8974 	.word	0x000e8974

000dc7f4 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   dc7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dc7f6:	4605      	mov	r5, r0
   dc7f8:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   dc7fa:	461c      	mov	r4, r3
   dc7fc:	b913      	cbnz	r3, dc804 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   dc7fe:	4b12      	ldr	r3, [pc, #72]	; (dc848 <_ZN9TimeClass6formatElPKc+0x54>)
   dc800:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   dc802:	b12c      	cbz	r4, dc810 <_ZN9TimeClass6formatElPKc+0x1c>
   dc804:	4b11      	ldr	r3, [pc, #68]	; (dc84c <_ZN9TimeClass6formatElPKc+0x58>)
   dc806:	4620      	mov	r0, r4
   dc808:	6819      	ldr	r1, [r3, #0]
   dc80a:	f007 fe5d 	bl	e44c8 <strcmp>
   dc80e:	b920      	cbnz	r0, dc81a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   dc810:	9901      	ldr	r1, [sp, #4]
   dc812:	4628      	mov	r0, r5
   dc814:	f7ff ff6a 	bl	dc6ec <_ZN9TimeClass7timeStrEl>
   dc818:	e013      	b.n	dc842 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   dc81a:	4f0d      	ldr	r7, [pc, #52]	; (dc850 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   dc81c:	9a01      	ldr	r2, [sp, #4]
   dc81e:	683b      	ldr	r3, [r7, #0]
   dc820:	4e0c      	ldr	r6, [pc, #48]	; (dc854 <_ZN9TimeClass6formatElPKc+0x60>)
   dc822:	441a      	add	r2, r3
   dc824:	6833      	ldr	r3, [r6, #0]
   dc826:	a802      	add	r0, sp, #8
   dc828:	4413      	add	r3, r2
   dc82a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   dc82e:	f007 fac5 	bl	e3dbc <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dc832:	683a      	ldr	r2, [r7, #0]
   dc834:	6833      	ldr	r3, [r6, #0]
   dc836:	4601      	mov	r1, r0
   dc838:	4413      	add	r3, r2
   dc83a:	4628      	mov	r0, r5
   dc83c:	4622      	mov	r2, r4
   dc83e:	f7ff ff77 	bl	dc730 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   dc842:	4628      	mov	r0, r5
   dc844:	b003      	add	sp, #12
   dc846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc848:	2003e5b8 	.word	0x2003e5b8
   dc84c:	2003d6bc 	.word	0x2003d6bc
   dc850:	2003e5c4 	.word	0x2003e5c4
   dc854:	2003e5bc 	.word	0x2003e5bc

000dc858 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dc858:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dc85a:	2000      	movs	r0, #0
   dc85c:	f7fe f9ba 	bl	dabd4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dc860:	4604      	mov	r4, r0
   dc862:	b968      	cbnz	r0, dc880 <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dc864:	f7fe fb10 	bl	dae88 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dc868:	2801      	cmp	r0, #1
   dc86a:	d10b      	bne.n	dc884 <_ZN9TimeClass7isValidEv+0x2c>
   dc86c:	4620      	mov	r0, r4
   dc86e:	f7fe fb3b 	bl	daee8 <system_thread_get_state>
   dc872:	b938      	cbnz	r0, dc884 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dc874:	f7ff fef0 	bl	dc658 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dc878:	b930      	cbnz	r0, dc888 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dc87a:	f7fe fa7d 	bl	dad78 <spark_process>
   dc87e:	e7f9      	b.n	dc874 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dc880:	2001      	movs	r0, #1
   dc882:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dc884:	2000      	movs	r0, #0
   dc886:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dc888:	f7ff fee6 	bl	dc658 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dc88c:	2000      	movs	r0, #0
   dc88e:	f7fe f9a1 	bl	dabd4 <HAL_RTC_Time_Is_Valid>
   dc892:	3000      	adds	r0, #0
   dc894:	bf18      	it	ne
   dc896:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dc898:	bd10      	pop	{r4, pc}

000dc89a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dc89a:	b508      	push	{r3, lr}
    (void)isValid();
   dc89c:	f7ff ffdc 	bl	dc858 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dc8a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dc8a4:	f7fe b98e 	b.w	dabc4 <HAL_RTC_Get_UnixTime>

000dc8a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dc8a8:	4b02      	ldr	r3, [pc, #8]	; (dc8b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dc8aa:	681a      	ldr	r2, [r3, #0]
   dc8ac:	4b02      	ldr	r3, [pc, #8]	; (dc8b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dc8ae:	601a      	str	r2, [r3, #0]
   dc8b0:	4770      	bx	lr
   dc8b2:	bf00      	nop
   dc8b4:	2003d6bc 	.word	0x2003d6bc
   dc8b8:	2003e5b8 	.word	0x2003e5b8

000dc8bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dc8bc:	4b01      	ldr	r3, [pc, #4]	; (dc8c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dc8be:	4a02      	ldr	r2, [pc, #8]	; (dc8c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dc8c0:	601a      	str	r2, [r3, #0]
   dc8c2:	4770      	bx	lr
   dc8c4:	2003e5cc 	.word	0x2003e5cc
   dc8c8:	000e8a0e 	.word	0x000e8a0e

000dc8cc <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   dc8cc:	b510      	push	{r4, lr}
   dc8ce:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   dc8d0:	f7fe f970 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   dc8d4:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   dc8d6:	6823      	ldr	r3, [r4, #0]
   dc8d8:	4620      	mov	r0, r4
   dc8da:	695b      	ldr	r3, [r3, #20]
   dc8dc:	4798      	blx	r3
    if (c >= 0) return c;
   dc8de:	2800      	cmp	r0, #0
   dc8e0:	da08      	bge.n	dc8f4 <_ZN6Stream9timedReadEv+0x28>
   dc8e2:	f7fe f967 	bl	dabb4 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   dc8e6:	68e3      	ldr	r3, [r4, #12]
   dc8e8:	1ac0      	subs	r0, r0, r3
   dc8ea:	68a3      	ldr	r3, [r4, #8]
   dc8ec:	4298      	cmp	r0, r3
   dc8ee:	d3f2      	bcc.n	dc8d6 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   dc8f0:	f04f 30ff 	mov.w	r0, #4294967295
}
   dc8f4:	bd10      	pop	{r4, pc}

000dc8f6 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   dc8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc8fa:	4680      	mov	r8, r0
   dc8fc:	460d      	mov	r5, r1
   dc8fe:	188f      	adds	r7, r1, r2
   dc900:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   dc902:	42bc      	cmp	r4, r7
   dc904:	eba4 0605 	sub.w	r6, r4, r5
   dc908:	d007      	beq.n	dc91a <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   dc90a:	4640      	mov	r0, r8
   dc90c:	f7ff ffde 	bl	dc8cc <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   dc910:	2800      	cmp	r0, #0
   dc912:	db02      	blt.n	dc91a <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   dc914:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   dc918:	e7f3      	b.n	dc902 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   dc91a:	4630      	mov	r0, r6
   dc91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc920 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dc920:	2100      	movs	r1, #0
   dc922:	f7fe bac1 	b.w	daea8 <system_delay_ms>

000dc926 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dc926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc928:	4606      	mov	r6, r0
   dc92a:	460d      	mov	r5, r1
   dc92c:	188f      	adds	r7, r1, r2
  size_t n = 0;
   dc92e:	2400      	movs	r4, #0
  while (size--) {
   dc930:	42bd      	cmp	r5, r7
   dc932:	d00c      	beq.n	dc94e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dc934:	6833      	ldr	r3, [r6, #0]
   dc936:	f815 1b01 	ldrb.w	r1, [r5], #1
   dc93a:	689b      	ldr	r3, [r3, #8]
   dc93c:	4630      	mov	r0, r6
   dc93e:	4798      	blx	r3
     if (chunk>=0)
   dc940:	2800      	cmp	r0, #0
   dc942:	db01      	blt.n	dc948 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dc944:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   dc946:	e7f3      	b.n	dc930 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dc948:	2c00      	cmp	r4, #0
   dc94a:	bf08      	it	eq
   dc94c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   dc94e:	4620      	mov	r0, r4
   dc950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc952 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   dc952:	b570      	push	{r4, r5, r6, lr}
   dc954:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   dc956:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   dc958:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   dc95a:	b149      	cbz	r1, dc970 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   dc95c:	f008 faf6 	bl	e4f4c <strlen>
   dc960:	682b      	ldr	r3, [r5, #0]
   dc962:	4602      	mov	r2, r0
   dc964:	4621      	mov	r1, r4
   dc966:	4628      	mov	r0, r5
   dc968:	68db      	ldr	r3, [r3, #12]
    }
   dc96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dc96e:	4718      	bx	r3
    }
   dc970:	bd70      	pop	{r4, r5, r6, pc}

000dc972 <_ZN5Print5printEPKc>:
   dc972:	b508      	push	{r3, lr}
   dc974:	f7ff ffed 	bl	dc952 <_ZN5Print5writeEPKc>
   dc978:	bd08      	pop	{r3, pc}

000dc97a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dc97a:	6803      	ldr	r3, [r0, #0]
   dc97c:	689b      	ldr	r3, [r3, #8]
   dc97e:	4718      	bx	r3

000dc980 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc980:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dc982:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc984:	4605      	mov	r5, r0
  size_t n = print('\r');
   dc986:	f7ff fff8 	bl	dc97a <_ZN5Print5printEc>
  n += print('\n');
   dc98a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   dc98c:	4604      	mov	r4, r0
  n += print('\n');
   dc98e:	4628      	mov	r0, r5
   dc990:	f7ff fff3 	bl	dc97a <_ZN5Print5printEc>
  return n;
}
   dc994:	4420      	add	r0, r4
   dc996:	bd38      	pop	{r3, r4, r5, pc}

000dc998 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   dc998:	b538      	push	{r3, r4, r5, lr}
   dc99a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc99c:	f7ff ffd9 	bl	dc952 <_ZN5Print5writeEPKc>
   dc9a0:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   dc9a2:	4628      	mov	r0, r5
   dc9a4:	f7ff ffec 	bl	dc980 <_ZN5Print7printlnEv>
  return n;
}
   dc9a8:	4420      	add	r0, r4
   dc9aa:	bd38      	pop	{r3, r4, r5, pc}

000dc9ac <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dc9ac:	b530      	push	{r4, r5, lr}
   dc9ae:	b08b      	sub	sp, #44	; 0x2c
   dc9b0:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dc9b2:	2100      	movs	r1, #0
   dc9b4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dc9b8:	2a01      	cmp	r2, #1
   dc9ba:	bf98      	it	ls
   dc9bc:	220a      	movls	r2, #10
   dc9be:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dc9c2:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dc9c6:	fb05 3312 	mls	r3, r5, r2, r3
   dc9ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc9ce:	2b09      	cmp	r3, #9
   dc9d0:	bf94      	ite	ls
   dc9d2:	3330      	addls	r3, #48	; 0x30
   dc9d4:	3337      	addhi	r3, #55	; 0x37
   dc9d6:	b2db      	uxtb	r3, r3
   dc9d8:	4621      	mov	r1, r4
   dc9da:	f804 3901 	strb.w	r3, [r4], #-1
   dc9de:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dc9e0:	2d00      	cmp	r5, #0
   dc9e2:	d1ee      	bne.n	dc9c2 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dc9e4:	f7ff ffb5 	bl	dc952 <_ZN5Print5writeEPKc>
}
   dc9e8:	b00b      	add	sp, #44	; 0x2c
   dc9ea:	bd30      	pop	{r4, r5, pc}

000dc9ec <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   dc9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc9f0:	ec57 6b10 	vmov	r6, r7, d0
   dc9f4:	4682      	mov	sl, r0
   dc9f6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   dc9f8:	ee10 2a10 	vmov	r2, s0
   dc9fc:	463b      	mov	r3, r7
   dc9fe:	ee10 0a10 	vmov	r0, s0
   dca02:	4639      	mov	r1, r7
   dca04:	f006 ff26 	bl	e3854 <__aeabi_dcmpun>
   dca08:	b108      	cbz	r0, dca0e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca0a:	494e      	ldr	r1, [pc, #312]	; (dcb44 <_ZN5Print10printFloatEdh+0x158>)
   dca0c:	e012      	b.n	dca34 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dca0e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dca12:	f04f 32ff 	mov.w	r2, #4294967295
   dca16:	4b4c      	ldr	r3, [pc, #304]	; (dcb48 <_ZN5Print10printFloatEdh+0x15c>)
   dca18:	4630      	mov	r0, r6
   dca1a:	4649      	mov	r1, r9
   dca1c:	f006 ff1a 	bl	e3854 <__aeabi_dcmpun>
   dca20:	b968      	cbnz	r0, dca3e <_ZN5Print10printFloatEdh+0x52>
   dca22:	f04f 32ff 	mov.w	r2, #4294967295
   dca26:	4b48      	ldr	r3, [pc, #288]	; (dcb48 <_ZN5Print10printFloatEdh+0x15c>)
   dca28:	4630      	mov	r0, r6
   dca2a:	4649      	mov	r1, r9
   dca2c:	f006 fef4 	bl	e3818 <__aeabi_dcmple>
   dca30:	b928      	cbnz	r0, dca3e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca32:	4946      	ldr	r1, [pc, #280]	; (dcb4c <_ZN5Print10printFloatEdh+0x160>)
   dca34:	4650      	mov	r0, sl
   dca36:	f7ff ff8c 	bl	dc952 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dca3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   dca3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dca42:	4b43      	ldr	r3, [pc, #268]	; (dcb50 <_ZN5Print10printFloatEdh+0x164>)
   dca44:	4630      	mov	r0, r6
   dca46:	4639      	mov	r1, r7
   dca48:	f006 fefa 	bl	e3840 <__aeabi_dcmpgt>
   dca4c:	b108      	cbz	r0, dca52 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca4e:	4941      	ldr	r1, [pc, #260]	; (dcb54 <_ZN5Print10printFloatEdh+0x168>)
   dca50:	e7f0      	b.n	dca34 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   dca52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dca56:	4b40      	ldr	r3, [pc, #256]	; (dcb58 <_ZN5Print10printFloatEdh+0x16c>)
   dca58:	4630      	mov	r0, r6
   dca5a:	4639      	mov	r1, r7
   dca5c:	f006 fed2 	bl	e3804 <__aeabi_dcmplt>
   dca60:	2800      	cmp	r0, #0
   dca62:	d1f4      	bne.n	dca4e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   dca64:	2200      	movs	r2, #0
   dca66:	2300      	movs	r3, #0
   dca68:	4630      	mov	r0, r6
   dca6a:	4639      	mov	r1, r7
   dca6c:	f006 feca 	bl	e3804 <__aeabi_dcmplt>
   dca70:	b140      	cbz	r0, dca84 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   dca72:	212d      	movs	r1, #45	; 0x2d
   dca74:	4650      	mov	r0, sl
   dca76:	f7ff ff80 	bl	dc97a <_ZN5Print5printEc>
     number = -number;
   dca7a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   dca7e:	4604      	mov	r4, r0
     number = -number;
   dca80:	461f      	mov	r7, r3
   dca82:	e000      	b.n	dca86 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dca84:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dca86:	4935      	ldr	r1, [pc, #212]	; (dcb5c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dca88:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dca8c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   dca8e:	fa5f f388 	uxtb.w	r3, r8
   dca92:	429d      	cmp	r5, r3
   dca94:	d906      	bls.n	dcaa4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   dca96:	2200      	movs	r2, #0
   dca98:	4b31      	ldr	r3, [pc, #196]	; (dcb60 <_ZN5Print10printFloatEdh+0x174>)
   dca9a:	f006 fd6b 	bl	e3574 <__aeabi_ddiv>
   dca9e:	f108 0801 	add.w	r8, r8, #1
   dcaa2:	e7f4      	b.n	dca8e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   dcaa4:	4632      	mov	r2, r6
   dcaa6:	463b      	mov	r3, r7
   dcaa8:	f006 fa88 	bl	e2fbc <__adddf3>
   dcaac:	460f      	mov	r7, r1
   dcaae:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   dcab0:	f006 ff0e 	bl	e38d0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dcab4:	220a      	movs	r2, #10
   dcab6:	4601      	mov	r1, r0
   dcab8:	4680      	mov	r8, r0
   dcaba:	4650      	mov	r0, sl
   dcabc:	f7ff ff76 	bl	dc9ac <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   dcac0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   dcac2:	b3e5      	cbz	r5, dcb3e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   dcac4:	4640      	mov	r0, r8
   dcac6:	f006 fbb5 	bl	e3234 <__aeabi_ui2d>
   dcaca:	4602      	mov	r2, r0
   dcacc:	460b      	mov	r3, r1
   dcace:	4630      	mov	r0, r6
   dcad0:	4639      	mov	r1, r7
   dcad2:	f006 fa71 	bl	e2fb8 <__aeabi_dsub>
   dcad6:	4606      	mov	r6, r0
   dcad8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcada:	4650      	mov	r0, sl
   dcadc:	4921      	ldr	r1, [pc, #132]	; (dcb64 <_ZN5Print10printFloatEdh+0x178>)
   dcade:	f7ff ff38 	bl	dc952 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   dcae2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   dcae4:	2200      	movs	r2, #0
   dcae6:	4b1e      	ldr	r3, [pc, #120]	; (dcb60 <_ZN5Print10printFloatEdh+0x174>)
   dcae8:	4630      	mov	r0, r6
   dcaea:	4639      	mov	r1, r7
   dcaec:	f006 fc18 	bl	e3320 <__aeabi_dmul>
   dcaf0:	4606      	mov	r6, r0
   dcaf2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   dcaf4:	f006 fec4 	bl	e3880 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   dcaf8:	f1b0 0900 	subs.w	r9, r0, #0
   dcafc:	da07      	bge.n	dcb0e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   dcafe:	212d      	movs	r1, #45	; 0x2d
   dcb00:	4650      	mov	r0, sl
   dcb02:	f7ff ff3a 	bl	dc97a <_ZN5Print5printEc>
            val = -n;
   dcb06:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   dcb0a:	4680      	mov	r8, r0
   dcb0c:	e002      	b.n	dcb14 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   dcb0e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   dcb10:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dcb14:	220a      	movs	r2, #10
   dcb16:	4650      	mov	r0, sl
   dcb18:	f7ff ff48 	bl	dc9ac <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   dcb1c:	4440      	add	r0, r8
   dcb1e:	4404      	add	r4, r0
    remainder -= toPrint;
   dcb20:	4648      	mov	r0, r9
   dcb22:	f006 fb97 	bl	e3254 <__aeabi_i2d>
   dcb26:	4602      	mov	r2, r0
   dcb28:	460b      	mov	r3, r1
   dcb2a:	4630      	mov	r0, r6
   dcb2c:	4639      	mov	r1, r7
   dcb2e:	f006 fa43 	bl	e2fb8 <__aeabi_dsub>
   dcb32:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dcb34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   dcb38:	4606      	mov	r6, r0
   dcb3a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dcb3c:	d1d2      	bne.n	dcae4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   dcb3e:	4620      	mov	r0, r4
   dcb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcb44:	000e8a62 	.word	0x000e8a62
   dcb48:	7fefffff 	.word	0x7fefffff
   dcb4c:	000e8a6a 	.word	0x000e8a6a
   dcb50:	41efffff 	.word	0x41efffff
   dcb54:	000e8a66 	.word	0x000e8a66
   dcb58:	c1efffff 	.word	0xc1efffff
   dcb5c:	3fe00000 	.word	0x3fe00000
   dcb60:	40240000 	.word	0x40240000
   dcb64:	000e7985 	.word	0x000e7985

000dcb68 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   dcb68:	b538      	push	{r3, r4, r5, lr}
   dcb6a:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   dcb6c:	ee10 0a10 	vmov	r0, s0
   dcb70:	b2cd      	uxtb	r5, r1
   dcb72:	f006 fb81 	bl	e3278 <__aeabi_f2d>
   dcb76:	ec41 0b10 	vmov	d0, r0, r1
   dcb7a:	4629      	mov	r1, r5
   dcb7c:	4620      	mov	r0, r4
}
   dcb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   dcb82:	f7ff bf33 	b.w	dc9ec <_ZN5Print10printFloatEdh>

000dcb86 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dcb86:	b40c      	push	{r2, r3}
   dcb88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcb8c:	b087      	sub	sp, #28
   dcb8e:	af00      	add	r7, sp, #0
   dcb90:	f107 0438 	add.w	r4, r7, #56	; 0x38
   dcb94:	4605      	mov	r5, r0
   dcb96:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   dcb9a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dcb9c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   dcb9e:	4623      	mov	r3, r4
   dcba0:	464a      	mov	r2, r9
   dcba2:	2114      	movs	r1, #20
   dcba4:	1d38      	adds	r0, r7, #4
   dcba6:	f7fe fa05 	bl	dafb4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   dcbaa:	2813      	cmp	r0, #19
   dcbac:	d805      	bhi.n	dcbba <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcbae:	1d39      	adds	r1, r7, #4
   dcbb0:	4628      	mov	r0, r5
   dcbb2:	f7ff fece 	bl	dc952 <_ZN5Print5writeEPKc>
   dcbb6:	4604      	mov	r4, r0
   dcbb8:	e013      	b.n	dcbe2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dcbba:	f100 0308 	add.w	r3, r0, #8
   dcbbe:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   dcbc2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dcbc4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   dcbc8:	1c41      	adds	r1, r0, #1
   dcbca:	4623      	mov	r3, r4
   dcbcc:	464a      	mov	r2, r9
   dcbce:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   dcbd0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   dcbd2:	f7fe f9ef 	bl	dafb4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcbd6:	4669      	mov	r1, sp
   dcbd8:	4628      	mov	r0, r5
   dcbda:	f7ff feba 	bl	dc952 <_ZN5Print5writeEPKc>
   dcbde:	4604      	mov	r4, r0
   dcbe0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   dcbe2:	b11e      	cbz	r6, dcbec <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   dcbe4:	4628      	mov	r0, r5
   dcbe6:	f7ff fecb 	bl	dc980 <_ZN5Print7printlnEv>
   dcbea:	4404      	add	r4, r0
    return n;
}
   dcbec:	4620      	mov	r0, r4
   dcbee:	371c      	adds	r7, #28
   dcbf0:	46bd      	mov	sp, r7
   dcbf2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcbf6:	b002      	add	sp, #8
   dcbf8:	4770      	bx	lr

000dcbfa <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   dcbfa:	b510      	push	{r4, lr}
   dcbfc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dcbfe:	6800      	ldr	r0, [r0, #0]
   dcc00:	b108      	cbz	r0, dcc06 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   dcc02:	f7fd ffb7 	bl	dab74 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   dcc06:	4620      	mov	r0, r4
   dcc08:	bd10      	pop	{r4, pc}
	...

000dcc0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dcc0c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dcc0e:	4c06      	ldr	r4, [pc, #24]	; (dcc28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   dcc10:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   dcc12:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dcc14:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   dcc16:	f7fd ffa5 	bl	dab64 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dcc1a:	4620      	mov	r0, r4
   dcc1c:	4a03      	ldr	r2, [pc, #12]	; (dcc2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   dcc1e:	4904      	ldr	r1, [pc, #16]	; (dcc30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dcc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dcc24:	f000 bd5a 	b.w	dd6dc <__aeabi_atexit>
   dcc28:	2003e5d0 	.word	0x2003e5d0
   dcc2c:	2003d7b0 	.word	0x2003d7b0
   dcc30:	000dcbfb 	.word	0x000dcbfb

000dcc34 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dcc34:	4770      	bx	lr

000dcc36 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dcc36:	7441      	strb	r1, [r0, #17]
   dcc38:	4770      	bx	lr

000dcc3a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dcc3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dcc3c:	7c00      	ldrb	r0, [r0, #16]
   dcc3e:	f7fd ff51 	bl	daae4 <HAL_USART_Available_Data_For_Write>
}
   dcc42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcc46:	bd08      	pop	{r3, pc}

000dcc48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dcc48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dcc4a:	7c00      	ldrb	r0, [r0, #16]
   dcc4c:	f7fd ff22 	bl	daa94 <HAL_USART_Available_Data>
}
   dcc50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcc54:	bd08      	pop	{r3, pc}

000dcc56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dcc56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dcc58:	7c00      	ldrb	r0, [r0, #16]
   dcc5a:	f7fd ff2b 	bl	daab4 <HAL_USART_Peek_Data>
}
   dcc5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dcc62:	bf28      	it	cs
   dcc64:	f04f 30ff 	movcs.w	r0, #4294967295
   dcc68:	bd08      	pop	{r3, pc}

000dcc6a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dcc6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dcc6c:	7c00      	ldrb	r0, [r0, #16]
   dcc6e:	f7fd ff19 	bl	daaa4 <HAL_USART_Read_Data>
}
   dcc72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dcc76:	bf28      	it	cs
   dcc78:	f04f 30ff 	movcs.w	r0, #4294967295
   dcc7c:	bd08      	pop	{r3, pc}

000dcc7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dcc7e:	7c00      	ldrb	r0, [r0, #16]
   dcc80:	f7fd bf20 	b.w	daac4 <HAL_USART_Flush_Data>

000dcc84 <_ZN11USARTSerialD0Ev>:
   dcc84:	b510      	push	{r4, lr}
   dcc86:	2114      	movs	r1, #20
   dcc88:	4604      	mov	r4, r0
   dcc8a:	f000 fd35 	bl	dd6f8 <_ZdlPvj>
   dcc8e:	4620      	mov	r0, r4
   dcc90:	bd10      	pop	{r4, pc}

000dcc92 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dcc92:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dcc94:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dcc96:	4604      	mov	r4, r0
   dcc98:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dcc9a:	b925      	cbnz	r5, dcca6 <_ZN11USARTSerial5writeEh+0x14>
   dcc9c:	7c00      	ldrb	r0, [r0, #16]
   dcc9e:	f7fd ff21 	bl	daae4 <HAL_USART_Available_Data_For_Write>
   dcca2:	2800      	cmp	r0, #0
   dcca4:	dd05      	ble.n	dccb2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dcca6:	4631      	mov	r1, r6
   dcca8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dccaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dccae:	f7fd bee9 	b.w	daa84 <HAL_USART_Write_Data>
  }
  return 0;
}
   dccb2:	4628      	mov	r0, r5
   dccb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000dccb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dccb8:	b510      	push	{r4, lr}
   dccba:	4604      	mov	r4, r0
   dccbc:	4608      	mov	r0, r1
   dccbe:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dccc0:	2200      	movs	r2, #0
   dccc2:	6062      	str	r2, [r4, #4]
   dccc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dccc8:	60a2      	str	r2, [r4, #8]
   dccca:	4a05      	ldr	r2, [pc, #20]	; (dcce0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dcccc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dccce:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dccd0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dccd2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dccd4:	461a      	mov	r2, r3
   dccd6:	f7fd fecd 	bl	daa74 <HAL_USART_Init>
}
   dccda:	4620      	mov	r0, r4
   dccdc:	bd10      	pop	{r4, pc}
   dccde:	bf00      	nop
   dcce0:	000e8a78 	.word	0x000e8a78

000dcce4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dcce4:	2300      	movs	r3, #0
   dcce6:	7c00      	ldrb	r0, [r0, #16]
   dcce8:	f7fd bf04 	b.w	daaf4 <HAL_USART_BeginConfig>

000dccec <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dccec:	2200      	movs	r2, #0
   dccee:	f7ff bff9 	b.w	dcce4 <_ZN11USARTSerial5beginEmm>

000dccf2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dccf2:	7c00      	ldrb	r0, [r0, #16]
   dccf4:	f7fd beee 	b.w	daad4 <HAL_USART_Is_Enabled>

000dccf8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   dccfa:	4c19      	ldr	r4, [pc, #100]	; (dcd60 <_Z22__fetch_global_Serial1v+0x68>)
   dccfc:	6825      	ldr	r5, [r4, #0]
   dccfe:	b94d      	cbnz	r5, dcd14 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   dcd00:	2084      	movs	r0, #132	; 0x84
   dcd02:	f7f7 f9ca 	bl	d409a <_Znwj>
   dcd06:	4606      	mov	r6, r0
   dcd08:	b118      	cbz	r0, dcd12 <_Z22__fetch_global_Serial1v+0x1a>
   dcd0a:	2284      	movs	r2, #132	; 0x84
   dcd0c:	4629      	mov	r1, r5
   dcd0e:	f007 f95c 	bl	e3fca <memset>
   dcd12:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   dcd14:	4d13      	ldr	r5, [pc, #76]	; (dcd64 <_Z22__fetch_global_Serial1v+0x6c>)
   dcd16:	682e      	ldr	r6, [r5, #0]
   dcd18:	b94e      	cbnz	r6, dcd2e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   dcd1a:	2084      	movs	r0, #132	; 0x84
   dcd1c:	f7f7 f9bd 	bl	d409a <_Znwj>
   dcd20:	4607      	mov	r7, r0
   dcd22:	b118      	cbz	r0, dcd2c <_Z22__fetch_global_Serial1v+0x34>
   dcd24:	2284      	movs	r2, #132	; 0x84
   dcd26:	4631      	mov	r1, r6
   dcd28:	f007 f94f 	bl	e3fca <memset>
   dcd2c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   dcd2e:	4f0e      	ldr	r7, [pc, #56]	; (dcd68 <_Z22__fetch_global_Serial1v+0x70>)
   dcd30:	6839      	ldr	r1, [r7, #0]
   dcd32:	f011 0601 	ands.w	r6, r1, #1
   dcd36:	d111      	bne.n	dcd5c <_Z22__fetch_global_Serial1v+0x64>
   dcd38:	4638      	mov	r0, r7
   dcd3a:	f7f7 f9b4 	bl	d40a6 <__cxa_guard_acquire>
   dcd3e:	b168      	cbz	r0, dcd5c <_Z22__fetch_global_Serial1v+0x64>
   dcd40:	6822      	ldr	r2, [r4, #0]
   dcd42:	682b      	ldr	r3, [r5, #0]
   dcd44:	4809      	ldr	r0, [pc, #36]	; (dcd6c <_Z22__fetch_global_Serial1v+0x74>)
   dcd46:	4631      	mov	r1, r6
   dcd48:	f7ff ffb6 	bl	dccb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dcd4c:	4638      	mov	r0, r7
   dcd4e:	f7f7 f9af 	bl	d40b0 <__cxa_guard_release>
   dcd52:	4a07      	ldr	r2, [pc, #28]	; (dcd70 <_Z22__fetch_global_Serial1v+0x78>)
   dcd54:	4907      	ldr	r1, [pc, #28]	; (dcd74 <_Z22__fetch_global_Serial1v+0x7c>)
   dcd56:	4805      	ldr	r0, [pc, #20]	; (dcd6c <_Z22__fetch_global_Serial1v+0x74>)
   dcd58:	f000 fcc0 	bl	dd6dc <__aeabi_atexit>
#endif
	return serial1;
}
   dcd5c:	4803      	ldr	r0, [pc, #12]	; (dcd6c <_Z22__fetch_global_Serial1v+0x74>)
   dcd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dcd60:	2003e5f0 	.word	0x2003e5f0
   dcd64:	2003e5e8 	.word	0x2003e5e8
   dcd68:	2003e5ec 	.word	0x2003e5ec
   dcd6c:	2003e5d4 	.word	0x2003e5d4
   dcd70:	2003d7b0 	.word	0x2003d7b0
   dcd74:	000dcc35 	.word	0x000dcc35

000dcd78 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   dcd78:	b510      	push	{r4, lr}
   dcd7a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   dcd7c:	f008 f8e6 	bl	e4f4c <strlen>
   dcd80:	3801      	subs	r0, #1
   dcd82:	1823      	adds	r3, r4, r0
   dcd84:	4620      	mov	r0, r4
	while(i<j){
   dcd86:	4298      	cmp	r0, r3
   dcd88:	d206      	bcs.n	dcd98 <_Z11str_reversePc+0x20>
		c = *i;
   dcd8a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   dcd8c:	7819      	ldrb	r1, [r3, #0]
   dcd8e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   dcd92:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   dcd96:	e7f6      	b.n	dcd86 <_Z11str_reversePc+0xe>
   dcd98:	bd10      	pop	{r4, pc}

000dcd9a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   dcd9a:	b570      	push	{r4, r5, r6, lr}
   dcd9c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   dcd9e:	1e91      	subs	r1, r2, #2
   dcda0:	2922      	cmp	r1, #34	; 0x22
   dcda2:	d820      	bhi.n	dcde6 <ultoa+0x4c>
   dcda4:	4625      	mov	r5, r4
   dcda6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dcda8:	b910      	cbnz	r0, dcdb0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dcdaa:	4423      	add	r3, r4
            *ptr++ = '0';
   dcdac:	2230      	movs	r2, #48	; 0x30
   dcdae:	e00e      	b.n	dcdce <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   dcdb0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   dcdb4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   dcdb8:	b2c1      	uxtb	r1, r0
   dcdba:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   dcdbe:	2809      	cmp	r0, #9
                *ptr += '0';
   dcdc0:	bf94      	ite	ls
   dcdc2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   dcdc4:	3157      	addhi	r1, #87	; 0x57
   dcdc6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   dcdca:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dcdcc:	e7eb      	b.n	dcda6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dcdce:	4299      	cmp	r1, r3
   dcdd0:	d202      	bcs.n	dcdd8 <ultoa+0x3e>
            *ptr++ = '0';
   dcdd2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dcdd6:	e7fa      	b.n	dcdce <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   dcdd8:	2300      	movs	r3, #0
	str_reverse(buffer);
   dcdda:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   dcddc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   dcdde:	f7ff ffcb 	bl	dcd78 <_Z11str_reversePc>
	return buffer;
   dcde2:	4620      	mov	r0, r4
   dcde4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   dcde6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   dcde8:	bd70      	pop	{r4, r5, r6, pc}

000dcdea <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dcdea:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   dcdec:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dcdee:	460c      	mov	r4, r1
   dcdf0:	4615      	mov	r5, r2
	if(a<0){
   dcdf2:	da0b      	bge.n	dce0c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dcdf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dcdf8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dcdfc:	bf14      	ite	ne
   dcdfe:	4258      	negne	r0, r3
   dce00:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   dce02:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dce04:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   dce06:	462a      	mov	r2, r5
   dce08:	4419      	add	r1, r3
   dce0a:	e000      	b.n	dce0e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   dce0c:	2301      	movs	r3, #1
   dce0e:	f7ff ffc4 	bl	dcd9a <ultoa>
	}
	return buffer;
}
   dce12:	4620      	mov	r0, r4
   dce14:	bd38      	pop	{r3, r4, r5, pc}

000dce16 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   dce16:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   dce18:	2301      	movs	r3, #1
   dce1a:	f7ff ffbe 	bl	dcd9a <ultoa>
}
   dce1e:	bd08      	pop	{r3, pc}

000dce20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dce20:	b510      	push	{r4, lr}
   dce22:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dce24:	6800      	ldr	r0, [r0, #0]
   dce26:	b118      	cbz	r0, dce30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   dce28:	f7fe f894 	bl	daf54 <free>
            wakeupSource_ = nullptr;
   dce2c:	2300      	movs	r3, #0
   dce2e:	6023      	str	r3, [r4, #0]
   dce30:	bd10      	pop	{r4, pc}

000dce32 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dce32:	b510      	push	{r4, lr}
   dce34:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dce36:	f7ff fff3 	bl	dce20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dce3a:	4620      	mov	r0, r4
   dce3c:	bd10      	pop	{r4, pc}

000dce3e <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dce3e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dce40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dce44:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dce46:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dce48:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   dce4a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dce4e:	f8c0 2006 	str.w	r2, [r0, #6]
   dce52:	889b      	ldrh	r3, [r3, #4]
   dce54:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dce56:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   dce58:	f7ff ffe2 	bl	dce20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   dce5c:	682b      	ldr	r3, [r5, #0]
   dce5e:	b113      	cbz	r3, dce66 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dce60:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dce62:	2300      	movs	r3, #0
   dce64:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   dce66:	4620      	mov	r0, r4
   dce68:	bd38      	pop	{r3, r4, r5, pc}

000dce6a <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   dce6a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   dce6e:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   dce70:	b90b      	cbnz	r3, dce76 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   dce72:	680a      	ldr	r2, [r1, #0]
   dce74:	b19a      	cbz	r2, dce9e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   dce76:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   dce78:	b15c      	cbz	r4, dce92 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   dce7a:	88a2      	ldrh	r2, [r4, #4]
   dce7c:	2a01      	cmp	r2, #1
   dce7e:	d003      	beq.n	dce88 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   dce80:	2a04      	cmp	r2, #4
   dce82:	d106      	bne.n	dce92 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   dce84:	2202      	movs	r2, #2
   dce86:	e005      	b.n	dce94 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   dce88:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   dce8a:	814c      	strh	r4, [r1, #10]
   dce8c:	718a      	strb	r2, [r1, #6]
   dce8e:	810b      	strh	r3, [r1, #8]
                    break;
   dce90:	e005      	b.n	dce9e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   dce92:	2204      	movs	r2, #4
   dce94:	810b      	strh	r3, [r1, #8]
   dce96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dce9a:	718a      	strb	r2, [r1, #6]
   dce9c:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   dce9e:	f851 3f06 	ldr.w	r3, [r1, #6]!
   dcea2:	6003      	str	r3, [r0, #0]
   dcea4:	888b      	ldrh	r3, [r1, #4]
   dcea6:	8083      	strh	r3, [r0, #4]
    }
   dcea8:	bd10      	pop	{r4, pc}

000dceaa <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   dceaa:	4601      	mov	r1, r0
   dceac:	2200      	movs	r2, #0
   dceae:	208c      	movs	r0, #140	; 0x8c
   dceb0:	f7fd be68 	b.w	dab84 <HAL_Core_System_Reset_Ex>

000dceb4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   dceb4:	2000      	movs	r0, #0
   dceb6:	f7ff bff8 	b.w	dceaa <_ZN11SystemClass5resetEm>
	...

000dcebc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   dcebc:	b530      	push	{r4, r5, lr}
   dcebe:	4604      	mov	r4, r0
   dcec0:	b085      	sub	sp, #20
   dcec2:	4608      	mov	r0, r1
   dcec4:	4611      	mov	r1, r2
   dcec6:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   dcec8:	2300      	movs	r3, #0
   dceca:	f7fd fff5 	bl	daeb8 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   dcece:	4d0d      	ldr	r5, [pc, #52]	; (dcf04 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   dced0:	f8ad 000c 	strh.w	r0, [sp, #12]
   dced4:	2300      	movs	r3, #0
   dced6:	a901      	add	r1, sp, #4
   dced8:	9301      	str	r3, [sp, #4]
   dceda:	f8ad 3008 	strh.w	r3, [sp, #8]
   dcede:	f88d 300a 	strb.w	r3, [sp, #10]
   dcee2:	4628      	mov	r0, r5
   dcee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dcee8:	f8ad 300e 	strh.w	r3, [sp, #14]
   dceec:	f7ff ffa7 	bl	dce3e <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dcef0:	a801      	add	r0, sp, #4
   dcef2:	f7ff ff95 	bl	dce20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   dcef6:	4620      	mov	r0, r4
   dcef8:	4629      	mov	r1, r5
   dcefa:	f7ff ffb6 	bl	dce6a <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   dcefe:	4620      	mov	r0, r4
   dcf00:	b005      	add	sp, #20
   dcf02:	bd30      	pop	{r4, r5, pc}
   dcf04:	2003e5f4 	.word	0x2003e5f4

000dcf08 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dcf08:	b510      	push	{r4, lr}
   dcf0a:	2400      	movs	r4, #0
   dcf0c:	7004      	strb	r4, [r0, #0]
   dcf0e:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   dcf10:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   dcf12:	f64f 74ff 	movw	r4, #65535	; 0xffff
   dcf16:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   dcf18:	dd07      	ble.n	dcf2a <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   dcf1a:	3901      	subs	r1, #1
   dcf1c:	4299      	cmp	r1, r3
   dcf1e:	d209      	bcs.n	dcf34 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   dcf20:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   dcf24:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   dcf26:	2301      	movs	r3, #1
   dcf28:	e001      	b.n	dcf2e <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   dcf2a:	d102      	bne.n	dcf32 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   dcf2c:	2302      	movs	r3, #2
   dcf2e:	7003      	strb	r3, [r0, #0]
   dcf30:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   dcf32:	8041      	strh	r1, [r0, #2]
    }
}
   dcf34:	bd10      	pop	{r4, pc}
	...

000dcf38 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dcf38:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcf3a:	b08b      	sub	sp, #44	; 0x2c
   dcf3c:	4617      	mov	r7, r2
   dcf3e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dcf40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dcf42:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dcf44:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dcf46:	2400      	movs	r4, #0
   dcf48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dcf4a:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   dcf4c:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   dcf4e:	9300      	str	r3, [sp, #0]
   dcf50:	4639      	mov	r1, r7
   dcf52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dcf54:	4630      	mov	r0, r6
   dcf56:	f7fd ffeb 	bl	daf30 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   dcf5a:	463b      	mov	r3, r7
   dcf5c:	4632      	mov	r2, r6
   dcf5e:	4601      	mov	r1, r0
   dcf60:	a805      	add	r0, sp, #20
   dcf62:	f7ff ffd1 	bl	dcf08 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   dcf66:	9407      	str	r4, [sp, #28]
   dcf68:	f8ad 4020 	strh.w	r4, [sp, #32]
   dcf6c:	4c0d      	ldr	r4, [pc, #52]	; (dcfa4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   dcf6e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   dcf72:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   dcf76:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   dcf7a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   dcf7e:	4620      	mov	r0, r4
   dcf80:	a907      	add	r1, sp, #28
   dcf82:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   dcf86:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   dcf8a:	f7ff ff58 	bl	dce3e <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dcf8e:	a807      	add	r0, sp, #28
   dcf90:	f7ff ff46 	bl	dce20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   dcf94:	4628      	mov	r0, r5
   dcf96:	4621      	mov	r1, r4
   dcf98:	f7ff ff67 	bl	dce6a <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   dcf9c:	4628      	mov	r0, r5
   dcf9e:	b00b      	add	sp, #44	; 0x2c
   dcfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcfa2:	bf00      	nop
   dcfa4:	2003e5f4 	.word	0x2003e5f4

000dcfa8 <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   dcfa8:	7800      	ldrb	r0, [r0, #0]
   dcfaa:	4770      	bx	lr

000dcfac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dcfac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dcfae:	4c09      	ldr	r4, [pc, #36]	; (dcfd4 <_GLOBAL__sub_I_System+0x28>)
   dcfb0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dcfb2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dcfb6:	6020      	str	r0, [r4, #0]
   dcfb8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dcfba:	71a0      	strb	r0, [r4, #6]
   dcfbc:	8120      	strh	r0, [r4, #8]
   dcfbe:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dcfc0:	f7fd ff6a 	bl	dae98 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dcfc4:	4620      	mov	r0, r4
   dcfc6:	4a04      	ldr	r2, [pc, #16]	; (dcfd8 <_GLOBAL__sub_I_System+0x2c>)
   dcfc8:	4904      	ldr	r1, [pc, #16]	; (dcfdc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dcfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dcfce:	f000 bb85 	b.w	dd6dc <__aeabi_atexit>
   dcfd2:	bf00      	nop
   dcfd4:	2003e5f4 	.word	0x2003e5f4
   dcfd8:	2003d7b0 	.word	0x2003d7b0
   dcfdc:	000dce33 	.word	0x000dce33

000dcfe0 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dcfe0:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   dcfe2:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dcfe4:	6892      	ldr	r2, [r2, #8]
   dcfe6:	4601      	mov	r1, r0
   dcfe8:	4618      	mov	r0, r3
   dcfea:	4710      	bx	r2

000dcfec <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   dcfec:	b570      	push	{r4, r5, r6, lr}
   dcfee:	4c0e      	ldr	r4, [pc, #56]	; (dd028 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   dcff0:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   dcff2:	241c      	movs	r4, #28
   dcff4:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dcff6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dcffa:	f89d 6010 	ldrb.w	r6, [sp, #16]
   dcffe:	f004 0403 	and.w	r4, r4, #3
   dd002:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dd006:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dd008:	b2e4      	uxtb	r4, r4
   dd00a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   dd00c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   dd00e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   dd010:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dd012:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dd014:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dd016:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   dd018:	bf08      	it	eq
   dd01a:	4b04      	ldreq	r3, [pc, #16]	; (dd02c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   dd01c:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   dd01e:	bf06      	itte	eq
   dd020:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   dd022:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   dd024:	8303      	strhne	r3, [r0, #24]
    }
}
   dd026:	bd70      	pop	{r4, r5, r6, pc}
   dd028:	000e75b8 	.word	0x000e75b8
   dd02c:	000dcfe1 	.word	0x000dcfe1

000dd030 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dd030:	2200      	movs	r2, #0
   dd032:	4611      	mov	r1, r2
   dd034:	6840      	ldr	r0, [r0, #4]
   dd036:	f7fd bf0f 	b.w	dae58 <network_listening>

000dd03a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dd03a:	2200      	movs	r2, #0
   dd03c:	4611      	mov	r1, r2
   dd03e:	6840      	ldr	r0, [r0, #4]
   dd040:	f7fd bf1a 	b.w	dae78 <network_get_listen_timeout>

000dd044 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dd044:	2200      	movs	r2, #0
   dd046:	6840      	ldr	r0, [r0, #4]
   dd048:	f7fd bf0e 	b.w	dae68 <network_set_listen_timeout>

000dd04c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dd04c:	2200      	movs	r2, #0
   dd04e:	f081 0101 	eor.w	r1, r1, #1
   dd052:	6840      	ldr	r0, [r0, #4]
   dd054:	f7fd bef8 	b.w	dae48 <network_listen>

000dd058 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   dd058:	2300      	movs	r3, #0
   dd05a:	461a      	mov	r2, r3
   dd05c:	4619      	mov	r1, r3
   dd05e:	6840      	ldr	r0, [r0, #4]
   dd060:	f7fd beea 	b.w	dae38 <network_off>

000dd064 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dd064:	2300      	movs	r3, #0
   dd066:	461a      	mov	r2, r3
   dd068:	4619      	mov	r1, r3
   dd06a:	6840      	ldr	r0, [r0, #4]
   dd06c:	f7fd bedc 	b.w	dae28 <network_on>

000dd070 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dd070:	2200      	movs	r2, #0
   dd072:	4611      	mov	r1, r2
   dd074:	6840      	ldr	r0, [r0, #4]
   dd076:	f7fd becf 	b.w	dae18 <network_ready>

000dd07a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dd07a:	2200      	movs	r2, #0
   dd07c:	4611      	mov	r1, r2
   dd07e:	6840      	ldr	r0, [r0, #4]
   dd080:	f7fd beba 	b.w	dadf8 <network_connecting>

000dd084 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd084:	2200      	movs	r2, #0
   dd086:	2102      	movs	r1, #2
   dd088:	6840      	ldr	r0, [r0, #4]
   dd08a:	f7fd bebd 	b.w	dae08 <network_disconnect>

000dd08e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dd08e:	2300      	movs	r3, #0
   dd090:	461a      	mov	r2, r3
   dd092:	6840      	ldr	r0, [r0, #4]
   dd094:	f7fd bea8 	b.w	dade8 <network_connect>

000dd098 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dd098:	4b02      	ldr	r3, [pc, #8]	; (dd0a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dd09a:	2203      	movs	r2, #3
   dd09c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dd09e:	4a02      	ldr	r2, [pc, #8]	; (dd0a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dd0a0:	601a      	str	r2, [r3, #0]
   dd0a2:	4770      	bx	lr
   dd0a4:	2003e600 	.word	0x2003e600
   dd0a8:	000e8aa8 	.word	0x000e8aa8

000dd0ac <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   dd0ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd0b0:	ec59 8b10 	vmov	r8, r9, d0
   dd0b4:	4607      	mov	r7, r0
   dd0b6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   dd0b8:	2200      	movs	r2, #0
   dd0ba:	2300      	movs	r3, #0
   dd0bc:	ee10 0a10 	vmov	r0, s0
   dd0c0:	4649      	mov	r1, r9
   dd0c2:	f006 fb9f 	bl	e3804 <__aeabi_dcmplt>
   dd0c6:	b128      	cbz	r0, dd0d4 <_Z4dtoadhPc+0x28>
        val = -val;
   dd0c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dd0cc:	4699      	mov	r9, r3
        *sout++ = '-';
   dd0ce:	232d      	movs	r3, #45	; 0x2d
   dd0d0:	7033      	strb	r3, [r6, #0]
   dd0d2:	3601      	adds	r6, #1
   dd0d4:	2300      	movs	r3, #0
    }
    long scale = 1;
   dd0d6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   dd0d8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dd0da:	b2d9      	uxtb	r1, r3
   dd0dc:	428f      	cmp	r7, r1
   dd0de:	d902      	bls.n	dd0e6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   dd0e0:	4354      	muls	r4, r2
   dd0e2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dd0e4:	e7f9      	b.n	dd0da <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   dd0e6:	4620      	mov	r0, r4
   dd0e8:	f006 f8b4 	bl	e3254 <__aeabi_i2d>
   dd0ec:	4642      	mov	r2, r8
   dd0ee:	464b      	mov	r3, r9
   dd0f0:	f006 f916 	bl	e3320 <__aeabi_dmul>
   dd0f4:	4682      	mov	sl, r0
   dd0f6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   dd0f8:	f006 fc72 	bl	e39e0 <__aeabi_d2ulz>
   dd0fc:	4680      	mov	r8, r0
   dd0fe:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   dd100:	f006 f8d8 	bl	e32b4 <__aeabi_ul2d>
   dd104:	4602      	mov	r2, r0
   dd106:	460b      	mov	r3, r1
   dd108:	4650      	mov	r0, sl
   dd10a:	4659      	mov	r1, fp
   dd10c:	f005 ff54 	bl	e2fb8 <__aeabi_dsub>
   dd110:	2200      	movs	r2, #0
   dd112:	4b17      	ldr	r3, [pc, #92]	; (dd170 <_Z4dtoadhPc+0xc4>)
   dd114:	f006 fb8a 	bl	e382c <__aeabi_dcmpge>
   dd118:	b118      	cbz	r0, dd122 <_Z4dtoadhPc+0x76>
        fixed++;
   dd11a:	f118 0801 	adds.w	r8, r8, #1
   dd11e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   dd122:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   dd124:	4622      	mov	r2, r4
   dd126:	462b      	mov	r3, r5
   dd128:	4640      	mov	r0, r8
   dd12a:	4649      	mov	r1, r9
   dd12c:	f006 fc40 	bl	e39b0 <__aeabi_uldivmod>
   dd130:	2301      	movs	r3, #1
   dd132:	220a      	movs	r2, #10
   dd134:	4631      	mov	r1, r6
   dd136:	f7ff fe30 	bl	dcd9a <ultoa>
    if (prec) {
   dd13a:	b1af      	cbz	r7, dd168 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   dd13c:	4630      	mov	r0, r6
   dd13e:	f007 ff05 	bl	e4f4c <strlen>
        *sout++ = '.';
   dd142:	232e      	movs	r3, #46	; 0x2e
   dd144:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   dd146:	3001      	adds	r0, #1
   dd148:	4406      	add	r6, r0
   dd14a:	4622      	mov	r2, r4
   dd14c:	462b      	mov	r3, r5
   dd14e:	4640      	mov	r0, r8
   dd150:	4649      	mov	r1, r9
   dd152:	f006 fc2d 	bl	e39b0 <__aeabi_uldivmod>
   dd156:	463b      	mov	r3, r7
   dd158:	4610      	mov	r0, r2
   dd15a:	4631      	mov	r1, r6
   dd15c:	220a      	movs	r2, #10
    }
}
   dd15e:	b001      	add	sp, #4
   dd160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   dd164:	f7ff be19 	b.w	dcd9a <ultoa>
    }
}
   dd168:	b001      	add	sp, #4
   dd16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd16e:	bf00      	nop
   dd170:	3fe00000 	.word	0x3fe00000

000dd174 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dd174:	b510      	push	{r4, lr}
   dd176:	4604      	mov	r4, r0
{
	free(buffer);
   dd178:	6800      	ldr	r0, [r0, #0]
   dd17a:	f7fd feeb 	bl	daf54 <free>
}
   dd17e:	4620      	mov	r0, r4
   dd180:	bd10      	pop	{r4, pc}

000dd182 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dd182:	b510      	push	{r4, lr}
   dd184:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dd186:	6800      	ldr	r0, [r0, #0]
   dd188:	b108      	cbz	r0, dd18e <_ZN6String10invalidateEv+0xc>
   dd18a:	f7fd fee3 	bl	daf54 <free>
	buffer = NULL;
   dd18e:	2300      	movs	r3, #0
   dd190:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dd192:	60a3      	str	r3, [r4, #8]
   dd194:	6063      	str	r3, [r4, #4]
   dd196:	bd10      	pop	{r4, pc}

000dd198 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dd198:	b538      	push	{r3, r4, r5, lr}
   dd19a:	4604      	mov	r4, r0
   dd19c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dd19e:	6800      	ldr	r0, [r0, #0]
   dd1a0:	3101      	adds	r1, #1
   dd1a2:	f7fd fedf 	bl	daf64 <realloc>
	if (newbuffer) {
   dd1a6:	b110      	cbz	r0, dd1ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dd1a8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dd1ac:	2001      	movs	r0, #1
	}
	return 0;
}
   dd1ae:	bd38      	pop	{r3, r4, r5, pc}

000dd1b0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dd1b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dd1b2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dd1b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dd1b6:	b113      	cbz	r3, dd1be <_ZN6String7reserveEj+0xe>
   dd1b8:	6843      	ldr	r3, [r0, #4]
   dd1ba:	428b      	cmp	r3, r1
   dd1bc:	d207      	bcs.n	dd1ce <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dd1be:	4620      	mov	r0, r4
   dd1c0:	f7ff ffea 	bl	dd198 <_ZN6String12changeBufferEj>
   dd1c4:	b120      	cbz	r0, dd1d0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dd1c6:	68a3      	ldr	r3, [r4, #8]
   dd1c8:	b90b      	cbnz	r3, dd1ce <_ZN6String7reserveEj+0x1e>
   dd1ca:	6822      	ldr	r2, [r4, #0]
   dd1cc:	7013      	strb	r3, [r2, #0]
   dd1ce:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dd1d0:	bd10      	pop	{r4, pc}

000dd1d2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dd1d2:	b570      	push	{r4, r5, r6, lr}
   dd1d4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dd1d6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dd1d8:	4604      	mov	r4, r0
   dd1da:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dd1dc:	f7ff ffe8 	bl	dd1b0 <_ZN6String7reserveEj>
   dd1e0:	b918      	cbnz	r0, dd1ea <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dd1e2:	4620      	mov	r0, r4
   dd1e4:	f7ff ffcd 	bl	dd182 <_ZN6String10invalidateEv>
		return *this;
   dd1e8:	e009      	b.n	dd1fe <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dd1ea:	462a      	mov	r2, r5
   dd1ec:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dd1ee:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dd1f0:	6820      	ldr	r0, [r4, #0]
   dd1f2:	f006 fedf 	bl	e3fb4 <memcpy>
	buffer[len] = 0;
   dd1f6:	6822      	ldr	r2, [r4, #0]
   dd1f8:	68a3      	ldr	r3, [r4, #8]
   dd1fa:	2100      	movs	r1, #0
   dd1fc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   dd1fe:	4620      	mov	r0, r4
   dd200:	bd70      	pop	{r4, r5, r6, pc}

000dd202 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dd202:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd204:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dd206:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd208:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dd20a:	6043      	str	r3, [r0, #4]
	len = 0;
   dd20c:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd20e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   dd210:	460d      	mov	r5, r1
   dd212:	b139      	cbz	r1, dd224 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   dd214:	4608      	mov	r0, r1
   dd216:	f007 fe99 	bl	e4f4c <strlen>
   dd21a:	4629      	mov	r1, r5
   dd21c:	4602      	mov	r2, r0
   dd21e:	4620      	mov	r0, r4
   dd220:	f7ff ffd7 	bl	dd1d2 <_ZN6String4copyEPKcj>
}
   dd224:	4620      	mov	r0, r4
   dd226:	bd38      	pop	{r3, r4, r5, pc}

000dd228 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dd228:	b538      	push	{r3, r4, r5, lr}
   dd22a:	4605      	mov	r5, r0
	if (buffer) {
   dd22c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dd22e:	460c      	mov	r4, r1
	if (buffer) {
   dd230:	b160      	cbz	r0, dd24c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   dd232:	686a      	ldr	r2, [r5, #4]
   dd234:	688b      	ldr	r3, [r1, #8]
   dd236:	429a      	cmp	r2, r3
   dd238:	d306      	bcc.n	dd248 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   dd23a:	6809      	ldr	r1, [r1, #0]
   dd23c:	f007 f94e 	bl	e44dc <strcpy>
			len = rhs.len;
   dd240:	68a3      	ldr	r3, [r4, #8]
   dd242:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dd244:	2300      	movs	r3, #0
   dd246:	e00a      	b.n	dd25e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   dd248:	f7fd fe84 	bl	daf54 <free>
		}
	}
	buffer = rhs.buffer;
   dd24c:	6823      	ldr	r3, [r4, #0]
   dd24e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dd250:	6863      	ldr	r3, [r4, #4]
   dd252:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dd254:	68a3      	ldr	r3, [r4, #8]
   dd256:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dd258:	2300      	movs	r3, #0
   dd25a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   dd25c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   dd25e:	60a3      	str	r3, [r4, #8]
   dd260:	bd38      	pop	{r3, r4, r5, pc}

000dd262 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dd262:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   dd264:	b510      	push	{r4, lr}
   dd266:	460b      	mov	r3, r1
   dd268:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dd26a:	d007      	beq.n	dd27c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dd26c:	6809      	ldr	r1, [r1, #0]
   dd26e:	b119      	cbz	r1, dd278 <_ZN6StringaSERKS_+0x16>
   dd270:	689a      	ldr	r2, [r3, #8]
   dd272:	f7ff ffae 	bl	dd1d2 <_ZN6String4copyEPKcj>
   dd276:	e001      	b.n	dd27c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   dd278:	f7ff ff83 	bl	dd182 <_ZN6String10invalidateEv>

	return *this;
}
   dd27c:	4620      	mov	r0, r4
   dd27e:	bd10      	pop	{r4, pc}

000dd280 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dd280:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd282:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dd284:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd286:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dd288:	6043      	str	r3, [r0, #4]
	len = 0;
   dd28a:	6083      	str	r3, [r0, #8]
	flags = 0;
   dd28c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   dd28e:	f7ff ffe8 	bl	dd262 <_ZN6StringaSERKS_>
}
   dd292:	4620      	mov	r0, r4
   dd294:	bd10      	pop	{r4, pc}

000dd296 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dd296:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   dd298:	b510      	push	{r4, lr}
   dd29a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dd29c:	d001      	beq.n	dd2a2 <_ZN6StringaSEOS_+0xc>
   dd29e:	f7ff ffc3 	bl	dd228 <_ZN6String4moveERS_>
	return *this;
}
   dd2a2:	4620      	mov	r0, r4
   dd2a4:	bd10      	pop	{r4, pc}

000dd2a6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dd2a6:	b538      	push	{r3, r4, r5, lr}
   dd2a8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   dd2aa:	460c      	mov	r4, r1
   dd2ac:	b141      	cbz	r1, dd2c0 <_ZN6StringaSEPKc+0x1a>
   dd2ae:	4608      	mov	r0, r1
   dd2b0:	f007 fe4c 	bl	e4f4c <strlen>
   dd2b4:	4621      	mov	r1, r4
   dd2b6:	4602      	mov	r2, r0
   dd2b8:	4628      	mov	r0, r5
   dd2ba:	f7ff ff8a 	bl	dd1d2 <_ZN6String4copyEPKcj>
   dd2be:	e001      	b.n	dd2c4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   dd2c0:	f7ff ff5f 	bl	dd182 <_ZN6String10invalidateEv>

	return *this;
}
   dd2c4:	4628      	mov	r0, r5
   dd2c6:	bd38      	pop	{r3, r4, r5, pc}

000dd2c8 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   dd2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dd2ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd2cc:	2300      	movs	r3, #0
   dd2ce:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dd2d0:	6063      	str	r3, [r4, #4]
	len = 0;
   dd2d2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dd2d4:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   dd2d6:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   dd2d8:	a901      	add	r1, sp, #4
   dd2da:	f7ff fd9c 	bl	dce16 <utoa>
	*this = buf;
   dd2de:	a901      	add	r1, sp, #4
   dd2e0:	4620      	mov	r0, r4
   dd2e2:	f7ff ffe0 	bl	dd2a6 <_ZN6StringaSEPKc>
}
   dd2e6:	4620      	mov	r0, r4
   dd2e8:	b004      	add	sp, #16
   dd2ea:	bd10      	pop	{r4, pc}

000dd2ec <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   dd2ec:	b510      	push	{r4, lr}
   dd2ee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd2f0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dd2f2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dd2f4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dd2f6:	6063      	str	r3, [r4, #4]
	len = 0;
   dd2f8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dd2fa:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dd2fc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   dd2fe:	a901      	add	r1, sp, #4
   dd300:	f7ff fd73 	bl	dcdea <itoa>
	*this = buf;
   dd304:	a901      	add	r1, sp, #4
   dd306:	4620      	mov	r0, r4
   dd308:	f7ff ffcd 	bl	dd2a6 <_ZN6StringaSEPKc>
}
   dd30c:	4620      	mov	r0, r4
   dd30e:	b00a      	add	sp, #40	; 0x28
   dd310:	bd10      	pop	{r4, pc}

000dd312 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dd312:	b570      	push	{r4, r5, r6, lr}
   dd314:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dd316:	460e      	mov	r6, r1
   dd318:	b909      	cbnz	r1, dd31e <_ZN6String6concatEPKcj+0xc>
   dd31a:	2000      	movs	r0, #0
   dd31c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dd31e:	b16a      	cbz	r2, dd33c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   dd320:	6883      	ldr	r3, [r0, #8]
   dd322:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   dd324:	4629      	mov	r1, r5
   dd326:	f7ff ff43 	bl	dd1b0 <_ZN6String7reserveEj>
   dd32a:	2800      	cmp	r0, #0
   dd32c:	d0f5      	beq.n	dd31a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dd32e:	6820      	ldr	r0, [r4, #0]
   dd330:	68a3      	ldr	r3, [r4, #8]
   dd332:	4631      	mov	r1, r6
   dd334:	4418      	add	r0, r3
   dd336:	f007 f8d1 	bl	e44dc <strcpy>
	len = newlen;
   dd33a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   dd33c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dd33e:	bd70      	pop	{r4, r5, r6, pc}

000dd340 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dd340:	b538      	push	{r3, r4, r5, lr}
   dd342:	4605      	mov	r5, r0
	if (!cstr) return 0;
   dd344:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   dd346:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   dd348:	b141      	cbz	r1, dd35c <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   dd34a:	f007 fdff 	bl	e4f4c <strlen>
   dd34e:	4621      	mov	r1, r4
   dd350:	4602      	mov	r2, r0
   dd352:	4628      	mov	r0, r5
}
   dd354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   dd358:	f7ff bfdb 	b.w	dd312 <_ZN6String6concatEPKcj>
}
   dd35c:	bd38      	pop	{r3, r4, r5, pc}

000dd35e <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   dd35e:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   dd360:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   dd362:	4604      	mov	r4, r0
   dd364:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
   dd366:	4669      	mov	r1, sp
   dd368:	f7ff fd3f 	bl	dcdea <itoa>
	return concat(buf, strlen(buf));
   dd36c:	4668      	mov	r0, sp
   dd36e:	f007 fded 	bl	e4f4c <strlen>
   dd372:	4669      	mov	r1, sp
   dd374:	4602      	mov	r2, r0
   dd376:	4620      	mov	r0, r4
   dd378:	f7ff ffcb 	bl	dd312 <_ZN6String6concatEPKcj>
}
   dd37c:	b002      	add	sp, #8
   dd37e:	bd10      	pop	{r4, pc}

000dd380 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
   dd380:	b510      	push	{r4, lr}
   dd382:	4604      	mov	r4, r0
   dd384:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
   dd386:	ee10 0a10 	vmov	r0, s0
   dd38a:	f005 ff75 	bl	e3278 <__aeabi_f2d>
   dd38e:	ec41 0b10 	vmov	d0, r0, r1
   dd392:	a901      	add	r1, sp, #4
   dd394:	2006      	movs	r0, #6
   dd396:	f7ff fe89 	bl	dd0ac <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   dd39a:	a801      	add	r0, sp, #4
   dd39c:	f007 fdd6 	bl	e4f4c <strlen>
   dd3a0:	a901      	add	r1, sp, #4
   dd3a2:	4602      	mov	r2, r0
   dd3a4:	4620      	mov	r0, r4
   dd3a6:	f7ff ffb4 	bl	dd312 <_ZN6String6concatEPKcj>
}
   dd3aa:	b006      	add	sp, #24
   dd3ac:	bd10      	pop	{r4, pc}

000dd3ae <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dd3ae:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd3b0:	688a      	ldr	r2, [r1, #8]
   dd3b2:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dd3b4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dd3b6:	f7ff ffac 	bl	dd312 <_ZN6String6concatEPKcj>
   dd3ba:	b910      	cbnz	r0, dd3c2 <_ZplRK15StringSumHelperRK6String+0x14>
   dd3bc:	4620      	mov	r0, r4
   dd3be:	f7ff fee0 	bl	dd182 <_ZN6String10invalidateEv>
	return a;
}
   dd3c2:	4620      	mov	r0, r4
   dd3c4:	bd10      	pop	{r4, pc}

000dd3c6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dd3c6:	b538      	push	{r3, r4, r5, lr}
   dd3c8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dd3ca:	460d      	mov	r5, r1
   dd3cc:	b141      	cbz	r1, dd3e0 <_ZplRK15StringSumHelperPKc+0x1a>
   dd3ce:	4608      	mov	r0, r1
   dd3d0:	f007 fdbc 	bl	e4f4c <strlen>
   dd3d4:	4629      	mov	r1, r5
   dd3d6:	4602      	mov	r2, r0
   dd3d8:	4620      	mov	r0, r4
   dd3da:	f7ff ff9a 	bl	dd312 <_ZN6String6concatEPKcj>
   dd3de:	b910      	cbnz	r0, dd3e6 <_ZplRK15StringSumHelperPKc+0x20>
   dd3e0:	4620      	mov	r0, r4
   dd3e2:	f7ff fece 	bl	dd182 <_ZN6String10invalidateEv>
	return a;
}
   dd3e6:	4620      	mov	r0, r4
   dd3e8:	bd38      	pop	{r3, r4, r5, pc}

000dd3ea <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   dd3ea:	b510      	push	{r4, lr}
   dd3ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   dd3ee:	f7ff ffb6 	bl	dd35e <_ZN6String6concatEi>
   dd3f2:	b910      	cbnz	r0, dd3fa <_ZplRK15StringSumHelperi+0x10>
   dd3f4:	4620      	mov	r0, r4
   dd3f6:	f7ff fec4 	bl	dd182 <_ZN6String10invalidateEv>
	return a;
}
   dd3fa:	4620      	mov	r0, r4
   dd3fc:	bd10      	pop	{r4, pc}

000dd3fe <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
   dd3fe:	b510      	push	{r4, lr}
   dd400:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   dd402:	f7ff ffbd 	bl	dd380 <_ZN6String6concatEf>
   dd406:	b910      	cbnz	r0, dd40e <_ZplRK15StringSumHelperf+0x10>
   dd408:	4620      	mov	r0, r4
   dd40a:	f7ff feba 	bl	dd182 <_ZN6String10invalidateEv>
	return a;
}
   dd40e:	4620      	mov	r0, r4
   dd410:	bd10      	pop	{r4, pc}

000dd412 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dd412:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd414:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dd416:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dd418:	b912      	cbnz	r2, dd420 <_ZNK6String6equalsEPKc+0xe>
   dd41a:	b919      	cbnz	r1, dd424 <_ZNK6String6equalsEPKc+0x12>
   dd41c:	2001      	movs	r0, #1
   dd41e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dd420:	b911      	cbnz	r1, dd428 <_ZNK6String6equalsEPKc+0x16>
   dd422:	6803      	ldr	r3, [r0, #0]
   dd424:	7818      	ldrb	r0, [r3, #0]
   dd426:	e002      	b.n	dd42e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   dd428:	6800      	ldr	r0, [r0, #0]
   dd42a:	f007 f84d 	bl	e44c8 <strcmp>
   dd42e:	fab0 f080 	clz	r0, r0
   dd432:	0940      	lsrs	r0, r0, #5
}
   dd434:	bd08      	pop	{r3, pc}
	...

000dd438 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dd43a:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd43c:	460f      	mov	r7, r1
   dd43e:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dd440:	490c      	ldr	r1, [pc, #48]	; (dd474 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   dd442:	bf88      	it	hi
   dd444:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dd446:	4614      	mov	r4, r2
   dd448:	4606      	mov	r6, r0
	if (left > right) {
   dd44a:	bf84      	itt	hi
   dd44c:	462c      	movhi	r4, r5
   dd44e:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dd450:	f7ff fed7 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   dd454:	68ba      	ldr	r2, [r7, #8]
   dd456:	4294      	cmp	r4, r2
   dd458:	d80a      	bhi.n	dd470 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dd45a:	6839      	ldr	r1, [r7, #0]
   dd45c:	4295      	cmp	r5, r2
   dd45e:	bf94      	ite	ls
   dd460:	ebc4 0205 	rsbls	r2, r4, r5
   dd464:	ebc4 0202 	rsbhi	r2, r4, r2
   dd468:	4421      	add	r1, r4
   dd46a:	4630      	mov	r0, r6
   dd46c:	f7ff feb1 	bl	dd1d2 <_ZN6String4copyEPKcj>
	return out;
}
   dd470:	4630      	mov	r0, r6
   dd472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd474:	000e7963 	.word	0x000e7963

000dd478 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   dd478:	b510      	push	{r4, lr}
   dd47a:	4604      	mov	r4, r0
	return substring(left, len);
   dd47c:	688b      	ldr	r3, [r1, #8]
   dd47e:	f7ff ffdb 	bl	dd438 <_ZNK6String9substringEjj>
}
   dd482:	4620      	mov	r0, r4
   dd484:	bd10      	pop	{r4, pc}

000dd486 <_ZN6String11toLowerCaseEv>:
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   dd486:	b538      	push	{r3, r4, r5, lr}
	if (buffer) {
   dd488:	6804      	ldr	r4, [r0, #0]
	buffer[len] = 0;
	return *this;
}

String& String::toLowerCase(void)
{
   dd48a:	4605      	mov	r5, r0
	if (buffer) {
   dd48c:	b134      	cbz	r4, dd49c <_ZN6String11toLowerCaseEv+0x16>
            for (char *p = buffer; *p; p++) {
   dd48e:	7820      	ldrb	r0, [r4, #0]
   dd490:	b120      	cbz	r0, dd49c <_ZN6String11toLowerCaseEv+0x16>
                    *p = tolower(*p);
   dd492:	f008 fcd9 	bl	e5e48 <tolower>
   dd496:	f804 0b01 	strb.w	r0, [r4], #1
}

String& String::toLowerCase(void)
{
	if (buffer) {
            for (char *p = buffer; *p; p++) {
   dd49a:	e7f8      	b.n	dd48e <_ZN6String11toLowerCaseEv+0x8>
                    *p = tolower(*p);
            }
        }
        return *this;
}
   dd49c:	4628      	mov	r0, r5
   dd49e:	bd38      	pop	{r3, r4, r5, pc}

000dd4a0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   dd4a0:	6800      	ldr	r0, [r0, #0]
   dd4a2:	b108      	cbz	r0, dd4a8 <_ZNK6String5toIntEv+0x8>
   dd4a4:	f006 bc77 	b.w	e3d96 <atol>
	return 0;
}
   dd4a8:	4770      	bx	lr
	...

000dd4ac <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dd4ac:	b40e      	push	{r1, r2, r3}
   dd4ae:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   dd4b0:	ac09      	add	r4, sp, #36	; 0x24
   dd4b2:	4605      	mov	r5, r0
   dd4b4:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   dd4b8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd4ba:	4623      	mov	r3, r4
   dd4bc:	463a      	mov	r2, r7
   dd4be:	2105      	movs	r1, #5
   dd4c0:	a802      	add	r0, sp, #8
   dd4c2:	f7fd fd77 	bl	dafb4 <vsnprintf>
    va_end(marker);

    String result;
   dd4c6:	490c      	ldr	r1, [pc, #48]	; (dd4f8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dd4c8:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   dd4ca:	4628      	mov	r0, r5
   dd4cc:	f7ff fe99 	bl	dd202 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   dd4d0:	4631      	mov	r1, r6
   dd4d2:	4628      	mov	r0, r5
   dd4d4:	f7ff fe6c 	bl	dd1b0 <_ZN6String7reserveEj>
    if (result.buffer) {
   dd4d8:	6828      	ldr	r0, [r5, #0]
   dd4da:	b130      	cbz	r0, dd4ea <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd4dc:	4623      	mov	r3, r4
   dd4de:	463a      	mov	r2, r7
   dd4e0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   dd4e2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dd4e4:	f7fd fd66 	bl	dafb4 <vsnprintf>
        va_end(marker);
        result.len = n;
   dd4e8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   dd4ea:	4628      	mov	r0, r5
   dd4ec:	b004      	add	sp, #16
   dd4ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dd4f2:	b003      	add	sp, #12
   dd4f4:	4770      	bx	lr
   dd4f6:	bf00      	nop
   dd4f8:	000e7963 	.word	0x000e7963

000dd4fc <_Z17acquireWireBufferv>:
   dd4fc:	b570      	push	{r4, r5, r6, lr}
   dd4fe:	4604      	mov	r4, r0
   dd500:	2514      	movs	r5, #20
   dd502:	462a      	mov	r2, r5
   dd504:	4e09      	ldr	r6, [pc, #36]	; (dd52c <_Z17acquireWireBufferv+0x30>)
   dd506:	2100      	movs	r1, #0
   dd508:	f006 fd5f 	bl	e3fca <memset>
   dd50c:	8025      	strh	r5, [r4, #0]
   dd50e:	2520      	movs	r5, #32
   dd510:	4631      	mov	r1, r6
   dd512:	60a5      	str	r5, [r4, #8]
   dd514:	6125      	str	r5, [r4, #16]
   dd516:	4628      	mov	r0, r5
   dd518:	f000 f8f0 	bl	dd6fc <_ZnajRKSt9nothrow_t>
   dd51c:	4631      	mov	r1, r6
   dd51e:	6060      	str	r0, [r4, #4]
   dd520:	4628      	mov	r0, r5
   dd522:	f000 f8eb 	bl	dd6fc <_ZnajRKSt9nothrow_t>
   dd526:	60e0      	str	r0, [r4, #12]
   dd528:	4620      	mov	r0, r4
   dd52a:	bd70      	pop	{r4, r5, r6, pc}
   dd52c:	000e8ad4 	.word	0x000e8ad4

000dd530 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dd530:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd532:	4d0e      	ldr	r5, [pc, #56]	; (dd56c <_Z19__fetch_global_Wirev+0x3c>)
   dd534:	6829      	ldr	r1, [r5, #0]
   dd536:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dd53a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dd53c:	d113      	bne.n	dd566 <_Z19__fetch_global_Wirev+0x36>
   dd53e:	4628      	mov	r0, r5
   dd540:	f7f6 fdb1 	bl	d40a6 <__cxa_guard_acquire>
   dd544:	b178      	cbz	r0, dd566 <_Z19__fetch_global_Wirev+0x36>
   dd546:	a801      	add	r0, sp, #4
   dd548:	f7ff ffd8 	bl	dd4fc <_Z17acquireWireBufferv>
   dd54c:	aa01      	add	r2, sp, #4
   dd54e:	4621      	mov	r1, r4
   dd550:	4807      	ldr	r0, [pc, #28]	; (dd570 <_Z19__fetch_global_Wirev+0x40>)
   dd552:	f7fe fac1 	bl	dbad8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dd556:	4628      	mov	r0, r5
   dd558:	f7f6 fdaa 	bl	d40b0 <__cxa_guard_release>
   dd55c:	4a05      	ldr	r2, [pc, #20]	; (dd574 <_Z19__fetch_global_Wirev+0x44>)
   dd55e:	4906      	ldr	r1, [pc, #24]	; (dd578 <_Z19__fetch_global_Wirev+0x48>)
   dd560:	4803      	ldr	r0, [pc, #12]	; (dd570 <_Z19__fetch_global_Wirev+0x40>)
   dd562:	f000 f8bb 	bl	dd6dc <__aeabi_atexit>
	return wire;
}
   dd566:	4802      	ldr	r0, [pc, #8]	; (dd570 <_Z19__fetch_global_Wirev+0x40>)
   dd568:	b007      	add	sp, #28
   dd56a:	bd30      	pop	{r4, r5, pc}
   dd56c:	2003e608 	.word	0x2003e608
   dd570:	2003e60c 	.word	0x2003e60c
   dd574:	2003d7b0 	.word	0x2003d7b0
   dd578:	000dba81 	.word	0x000dba81

000dd57c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   dd57c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dd57e:	4e18      	ldr	r6, [pc, #96]	; (dd5e0 <pinAvailable+0x64>)
   dd580:	6831      	ldr	r1, [r6, #0]
   dd582:	f011 0501 	ands.w	r5, r1, #1
   dd586:	4604      	mov	r4, r0
   dd588:	d10a      	bne.n	dd5a0 <pinAvailable+0x24>
   dd58a:	4630      	mov	r0, r6
   dd58c:	f7f6 fd8b 	bl	d40a6 <__cxa_guard_acquire>
   dd590:	b130      	cbz	r0, dd5a0 <pinAvailable+0x24>
   dd592:	4629      	mov	r1, r5
   dd594:	4813      	ldr	r0, [pc, #76]	; (dd5e4 <pinAvailable+0x68>)
   dd596:	f7fe f971 	bl	db87c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   dd59a:	4630      	mov	r0, r6
   dd59c:	f7f6 fd88 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   dd5a0:	4810      	ldr	r0, [pc, #64]	; (dd5e4 <pinAvailable+0x68>)
   dd5a2:	f7fe f97b 	bl	db89c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   dd5a6:	b128      	cbz	r0, dd5b4 <pinAvailable+0x38>
   dd5a8:	f1a4 030b 	sub.w	r3, r4, #11
   dd5ac:	2b02      	cmp	r3, #2
   dd5ae:	d801      	bhi.n	dd5b4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   dd5b0:	2000      	movs	r0, #0
   dd5b2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   dd5b4:	f7ff ffbc 	bl	dd530 <_Z19__fetch_global_Wirev>
   dd5b8:	f7fe faed 	bl	dbb96 <_ZN7TwoWire9isEnabledEv>
   dd5bc:	b108      	cbz	r0, dd5c2 <pinAvailable+0x46>
   dd5be:	2c01      	cmp	r4, #1
   dd5c0:	d9f6      	bls.n	dd5b0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   dd5c2:	f7ff fb99 	bl	dccf8 <_Z22__fetch_global_Serial1v>
   dd5c6:	f7ff fb94 	bl	dccf2 <_ZN11USARTSerial9isEnabledEv>
   dd5ca:	b118      	cbz	r0, dd5d4 <pinAvailable+0x58>
   dd5cc:	f1a4 0309 	sub.w	r3, r4, #9
   dd5d0:	2b01      	cmp	r3, #1
   dd5d2:	d9ed      	bls.n	dd5b0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   dd5d4:	2c23      	cmp	r4, #35	; 0x23
   dd5d6:	bf8c      	ite	hi
   dd5d8:	2000      	movhi	r0, #0
   dd5da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   dd5dc:	bd70      	pop	{r4, r5, r6, pc}
   dd5de:	bf00      	nop
   dd5e0:	2003e370 	.word	0x2003e370
   dd5e4:	2003e374 	.word	0x2003e374

000dd5e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd5e8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   dd5ea:	b538      	push	{r3, r4, r5, lr}
   dd5ec:	4604      	mov	r4, r0
   dd5ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dd5f0:	d80a      	bhi.n	dd608 <pinMode+0x20>
   dd5f2:	29ff      	cmp	r1, #255	; 0xff
   dd5f4:	d008      	beq.n	dd608 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dd5f6:	f7ff ffc1 	bl	dd57c <pinAvailable>
   dd5fa:	b128      	cbz	r0, dd608 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dd5fc:	4629      	mov	r1, r5
   dd5fe:	4620      	mov	r0, r4
}
   dd600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   dd604:	f7fd bb26 	b.w	dac54 <HAL_Pin_Mode>
   dd608:	bd38      	pop	{r3, r4, r5, pc}

000dd60a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dd60a:	b538      	push	{r3, r4, r5, lr}
   dd60c:	4604      	mov	r4, r0
   dd60e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd610:	f7fd fb28 	bl	dac64 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dd614:	28ff      	cmp	r0, #255	; 0xff
   dd616:	d010      	beq.n	dd63a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   dd618:	2806      	cmp	r0, #6
   dd61a:	d804      	bhi.n	dd626 <digitalWrite+0x1c>
   dd61c:	234d      	movs	r3, #77	; 0x4d
   dd61e:	fa23 f000 	lsr.w	r0, r3, r0
   dd622:	07c3      	lsls	r3, r0, #31
   dd624:	d409      	bmi.n	dd63a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dd626:	4620      	mov	r0, r4
   dd628:	f7ff ffa8 	bl	dd57c <pinAvailable>
   dd62c:	b128      	cbz	r0, dd63a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dd62e:	4629      	mov	r1, r5
   dd630:	4620      	mov	r0, r4
}
   dd632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   dd636:	f7fd bb1d 	b.w	dac74 <HAL_GPIO_Write>
   dd63a:	bd38      	pop	{r3, r4, r5, pc}

000dd63c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dd63c:	b510      	push	{r4, lr}
   dd63e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dd640:	f7fd fb10 	bl	dac64 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   dd644:	3804      	subs	r0, #4
   dd646:	b2c0      	uxtb	r0, r0
   dd648:	2801      	cmp	r0, #1
   dd64a:	d908      	bls.n	dd65e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dd64c:	4620      	mov	r0, r4
   dd64e:	f7ff ff95 	bl	dd57c <pinAvailable>
   dd652:	b120      	cbz	r0, dd65e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dd654:	4620      	mov	r0, r4
}
   dd656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dd65a:	f7fd bb13 	b.w	dac84 <HAL_GPIO_Read>
}
   dd65e:	2000      	movs	r0, #0
   dd660:	bd10      	pop	{r4, pc}

000dd662 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dd662:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   dd664:	b510      	push	{r4, lr}
   dd666:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   dd668:	bf9c      	itt	ls
   dd66a:	340e      	addls	r4, #14
   dd66c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dd66e:	4620      	mov	r0, r4
   dd670:	f7ff ff84 	bl	dd57c <pinAvailable>
   dd674:	b150      	cbz	r0, dd68c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dd676:	2103      	movs	r1, #3
   dd678:	4620      	mov	r0, r4
   dd67a:	f7fd fae3 	bl	dac44 <HAL_Validate_Pin_Function>
   dd67e:	2803      	cmp	r0, #3
   dd680:	d104      	bne.n	dd68c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dd682:	4620      	mov	r0, r4
}
   dd684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   dd688:	f7fd bb1c 	b.w	dacc4 <HAL_ADC_Read>
}
   dd68c:	2000      	movs	r0, #0
   dd68e:	bd10      	pop	{r4, pc}

000dd690 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   dd690:	b538      	push	{r3, r4, r5, lr}
   dd692:	4604      	mov	r4, r0
   dd694:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   dd696:	f7ff ff71 	bl	dd57c <pinAvailable>
   dd69a:	b1f0      	cbz	r0, dd6da <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   dd69c:	2104      	movs	r1, #4
   dd69e:	4620      	mov	r0, r4
   dd6a0:	f7fd fad0 	bl	dac44 <HAL_Validate_Pin_Function>
   dd6a4:	2804      	cmp	r0, #4
   dd6a6:	d105      	bne.n	dd6b4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   dd6a8:	b2a9      	uxth	r1, r5
   dd6aa:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   dd6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   dd6b0:	f7fd bb00 	b.w	dacb4 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   dd6b4:	2102      	movs	r1, #2
   dd6b6:	4620      	mov	r0, r4
   dd6b8:	f7fd fac4 	bl	dac44 <HAL_Validate_Pin_Function>
   dd6bc:	2802      	cmp	r0, #2
   dd6be:	d10c      	bne.n	dd6da <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   dd6c0:	4620      	mov	r0, r4
   dd6c2:	f7fd facf 	bl	dac64 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   dd6c6:	2801      	cmp	r0, #1
   dd6c8:	d001      	beq.n	dd6ce <_Z11analogWritetm+0x3e>
   dd6ca:	2804      	cmp	r0, #4
   dd6cc:	d105      	bne.n	dd6da <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd6ce:	4629      	mov	r1, r5
   dd6d0:	4620      	mov	r0, r4
    }
}
   dd6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   dd6d6:	f7fd bafd 	b.w	dacd4 <HAL_PWM_Write_Ext>
   dd6da:	bd38      	pop	{r3, r4, r5, pc}

000dd6dc <__aeabi_atexit>:
   dd6dc:	460b      	mov	r3, r1
   dd6de:	4601      	mov	r1, r0
   dd6e0:	4618      	mov	r0, r3
   dd6e2:	f006 bb5d 	b.w	e3da0 <__cxa_atexit>
	...

000dd6e8 <_ZSt15get_new_handlerv>:
   dd6e8:	4b02      	ldr	r3, [pc, #8]	; (dd6f4 <_ZSt15get_new_handlerv+0xc>)
   dd6ea:	6818      	ldr	r0, [r3, #0]
   dd6ec:	f3bf 8f5f 	dmb	sy
   dd6f0:	4770      	bx	lr
   dd6f2:	bf00      	nop
   dd6f4:	2003e624 	.word	0x2003e624

000dd6f8 <_ZdlPvj>:
   dd6f8:	f7f6 bcd1 	b.w	d409e <_ZdlPv>

000dd6fc <_ZnajRKSt9nothrow_t>:
   dd6fc:	f000 b800 	b.w	dd700 <_ZnwjRKSt9nothrow_t>

000dd700 <_ZnwjRKSt9nothrow_t>:
   dd700:	b510      	push	{r4, lr}
   dd702:	2800      	cmp	r0, #0
   dd704:	bf14      	ite	ne
   dd706:	4604      	movne	r4, r0
   dd708:	2401      	moveq	r4, #1
   dd70a:	4620      	mov	r0, r4
   dd70c:	f7fd fc1a 	bl	daf44 <malloc>
   dd710:	b920      	cbnz	r0, dd71c <_ZnwjRKSt9nothrow_t+0x1c>
   dd712:	f7ff ffe9 	bl	dd6e8 <_ZSt15get_new_handlerv>
   dd716:	b108      	cbz	r0, dd71c <_ZnwjRKSt9nothrow_t+0x1c>
   dd718:	4780      	blx	r0
   dd71a:	e7f6      	b.n	dd70a <_ZnwjRKSt9nothrow_t+0xa>
   dd71c:	bd10      	pop	{r4, pc}

000dd71e <_ZSt25__throw_bad_function_callv>:
   dd71e:	b508      	push	{r3, lr}
   dd720:	f7fd fc50 	bl	dafc4 <abort>

000dd724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd724:	4b18      	ldr	r3, [pc, #96]	; (dd788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd726:	681a      	ldr	r2, [r3, #0]
   dd728:	07d1      	lsls	r1, r2, #31
   dd72a:	bf5c      	itt	pl
   dd72c:	2201      	movpl	r2, #1
   dd72e:	601a      	strpl	r2, [r3, #0]
   dd730:	4b16      	ldr	r3, [pc, #88]	; (dd78c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd732:	681a      	ldr	r2, [r3, #0]
   dd734:	07d2      	lsls	r2, r2, #31
   dd736:	bf5c      	itt	pl
   dd738:	2201      	movpl	r2, #1
   dd73a:	601a      	strpl	r2, [r3, #0]
   dd73c:	4b14      	ldr	r3, [pc, #80]	; (dd790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd73e:	681a      	ldr	r2, [r3, #0]
   dd740:	07d0      	lsls	r0, r2, #31
   dd742:	bf5c      	itt	pl
   dd744:	2201      	movpl	r2, #1
   dd746:	601a      	strpl	r2, [r3, #0]
   dd748:	4b12      	ldr	r3, [pc, #72]	; (dd794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd74a:	681a      	ldr	r2, [r3, #0]
   dd74c:	07d1      	lsls	r1, r2, #31
   dd74e:	bf5c      	itt	pl
   dd750:	2201      	movpl	r2, #1
   dd752:	601a      	strpl	r2, [r3, #0]
   dd754:	4b10      	ldr	r3, [pc, #64]	; (dd798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd756:	681a      	ldr	r2, [r3, #0]
   dd758:	07d2      	lsls	r2, r2, #31
   dd75a:	bf5c      	itt	pl
   dd75c:	2201      	movpl	r2, #1
   dd75e:	601a      	strpl	r2, [r3, #0]
   dd760:	4b0e      	ldr	r3, [pc, #56]	; (dd79c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd762:	681a      	ldr	r2, [r3, #0]
   dd764:	07d0      	lsls	r0, r2, #31
   dd766:	bf5c      	itt	pl
   dd768:	2201      	movpl	r2, #1
   dd76a:	601a      	strpl	r2, [r3, #0]
   dd76c:	4b0c      	ldr	r3, [pc, #48]	; (dd7a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd76e:	681a      	ldr	r2, [r3, #0]
   dd770:	07d1      	lsls	r1, r2, #31
   dd772:	bf5c      	itt	pl
   dd774:	2201      	movpl	r2, #1
   dd776:	601a      	strpl	r2, [r3, #0]
   dd778:	4b0a      	ldr	r3, [pc, #40]	; (dd7a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd77a:	681a      	ldr	r2, [r3, #0]
   dd77c:	07d2      	lsls	r2, r2, #31
   dd77e:	bf5c      	itt	pl
   dd780:	2201      	movpl	r2, #1
   dd782:	601a      	strpl	r2, [r3, #0]
   dd784:	4770      	bx	lr
   dd786:	bf00      	nop
   dd788:	2003e644 	.word	0x2003e644
   dd78c:	2003e640 	.word	0x2003e640
   dd790:	2003e63c 	.word	0x2003e63c
   dd794:	2003e638 	.word	0x2003e638
   dd798:	2003e634 	.word	0x2003e634
   dd79c:	2003e630 	.word	0x2003e630
   dd7a0:	2003e62c 	.word	0x2003e62c
   dd7a4:	2003e628 	.word	0x2003e628

000dd7a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dd7a8:	4b24      	ldr	r3, [pc, #144]	; (dd83c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dd7aa:	681a      	ldr	r2, [r3, #0]
   dd7ac:	07d0      	lsls	r0, r2, #31
   dd7ae:	bf5c      	itt	pl
   dd7b0:	2201      	movpl	r2, #1
   dd7b2:	601a      	strpl	r2, [r3, #0]
   dd7b4:	4b22      	ldr	r3, [pc, #136]	; (dd840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dd7b6:	681a      	ldr	r2, [r3, #0]
   dd7b8:	07d1      	lsls	r1, r2, #31
   dd7ba:	bf5c      	itt	pl
   dd7bc:	2201      	movpl	r2, #1
   dd7be:	601a      	strpl	r2, [r3, #0]
   dd7c0:	4b20      	ldr	r3, [pc, #128]	; (dd844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dd7c2:	681a      	ldr	r2, [r3, #0]
   dd7c4:	07d2      	lsls	r2, r2, #31
   dd7c6:	bf5c      	itt	pl
   dd7c8:	2201      	movpl	r2, #1
   dd7ca:	601a      	strpl	r2, [r3, #0]
   dd7cc:	4b1e      	ldr	r3, [pc, #120]	; (dd848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dd7ce:	681a      	ldr	r2, [r3, #0]
   dd7d0:	07d0      	lsls	r0, r2, #31
   dd7d2:	bf5c      	itt	pl
   dd7d4:	2201      	movpl	r2, #1
   dd7d6:	601a      	strpl	r2, [r3, #0]
   dd7d8:	4b1c      	ldr	r3, [pc, #112]	; (dd84c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dd7da:	681a      	ldr	r2, [r3, #0]
   dd7dc:	07d1      	lsls	r1, r2, #31
   dd7de:	bf5c      	itt	pl
   dd7e0:	2201      	movpl	r2, #1
   dd7e2:	601a      	strpl	r2, [r3, #0]
   dd7e4:	4b1a      	ldr	r3, [pc, #104]	; (dd850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dd7e6:	681a      	ldr	r2, [r3, #0]
   dd7e8:	07d2      	lsls	r2, r2, #31
   dd7ea:	bf5c      	itt	pl
   dd7ec:	2201      	movpl	r2, #1
   dd7ee:	601a      	strpl	r2, [r3, #0]
   dd7f0:	4b18      	ldr	r3, [pc, #96]	; (dd854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dd7f2:	681a      	ldr	r2, [r3, #0]
   dd7f4:	07d0      	lsls	r0, r2, #31
   dd7f6:	bf5c      	itt	pl
   dd7f8:	2201      	movpl	r2, #1
   dd7fa:	601a      	strpl	r2, [r3, #0]
   dd7fc:	4b16      	ldr	r3, [pc, #88]	; (dd858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dd7fe:	681a      	ldr	r2, [r3, #0]
   dd800:	07d1      	lsls	r1, r2, #31
   dd802:	bf5c      	itt	pl
   dd804:	2201      	movpl	r2, #1
   dd806:	601a      	strpl	r2, [r3, #0]
   dd808:	4b14      	ldr	r3, [pc, #80]	; (dd85c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dd80a:	681a      	ldr	r2, [r3, #0]
   dd80c:	07d2      	lsls	r2, r2, #31
   dd80e:	bf5c      	itt	pl
   dd810:	2201      	movpl	r2, #1
   dd812:	601a      	strpl	r2, [r3, #0]
   dd814:	4b12      	ldr	r3, [pc, #72]	; (dd860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dd816:	681a      	ldr	r2, [r3, #0]
   dd818:	07d0      	lsls	r0, r2, #31
   dd81a:	bf5c      	itt	pl
   dd81c:	2201      	movpl	r2, #1
   dd81e:	601a      	strpl	r2, [r3, #0]
   dd820:	4b10      	ldr	r3, [pc, #64]	; (dd864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dd822:	681a      	ldr	r2, [r3, #0]
   dd824:	07d1      	lsls	r1, r2, #31
   dd826:	bf5c      	itt	pl
   dd828:	2201      	movpl	r2, #1
   dd82a:	601a      	strpl	r2, [r3, #0]
   dd82c:	4b0e      	ldr	r3, [pc, #56]	; (dd868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dd82e:	681a      	ldr	r2, [r3, #0]
   dd830:	07d2      	lsls	r2, r2, #31
   dd832:	bf5c      	itt	pl
   dd834:	2201      	movpl	r2, #1
   dd836:	601a      	strpl	r2, [r3, #0]
   dd838:	4770      	bx	lr
   dd83a:	bf00      	nop
   dd83c:	2003e674 	.word	0x2003e674
   dd840:	2003e670 	.word	0x2003e670
   dd844:	2003e66c 	.word	0x2003e66c
   dd848:	2003e668 	.word	0x2003e668
   dd84c:	2003e664 	.word	0x2003e664
   dd850:	2003e660 	.word	0x2003e660
   dd854:	2003e65c 	.word	0x2003e65c
   dd858:	2003e658 	.word	0x2003e658
   dd85c:	2003e654 	.word	0x2003e654
   dd860:	2003e650 	.word	0x2003e650
   dd864:	2003e64c 	.word	0x2003e64c
   dd868:	2003e648 	.word	0x2003e648

000dd86c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dd86c:	4b24      	ldr	r3, [pc, #144]	; (dd900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dd86e:	681a      	ldr	r2, [r3, #0]
   dd870:	07d0      	lsls	r0, r2, #31
   dd872:	bf5c      	itt	pl
   dd874:	2201      	movpl	r2, #1
   dd876:	601a      	strpl	r2, [r3, #0]
   dd878:	4b22      	ldr	r3, [pc, #136]	; (dd904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dd87a:	681a      	ldr	r2, [r3, #0]
   dd87c:	07d1      	lsls	r1, r2, #31
   dd87e:	bf5c      	itt	pl
   dd880:	2201      	movpl	r2, #1
   dd882:	601a      	strpl	r2, [r3, #0]
   dd884:	4b20      	ldr	r3, [pc, #128]	; (dd908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dd886:	681a      	ldr	r2, [r3, #0]
   dd888:	07d2      	lsls	r2, r2, #31
   dd88a:	bf5c      	itt	pl
   dd88c:	2201      	movpl	r2, #1
   dd88e:	601a      	strpl	r2, [r3, #0]
   dd890:	4b1e      	ldr	r3, [pc, #120]	; (dd90c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dd892:	681a      	ldr	r2, [r3, #0]
   dd894:	07d0      	lsls	r0, r2, #31
   dd896:	bf5c      	itt	pl
   dd898:	2201      	movpl	r2, #1
   dd89a:	601a      	strpl	r2, [r3, #0]
   dd89c:	4b1c      	ldr	r3, [pc, #112]	; (dd910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dd89e:	681a      	ldr	r2, [r3, #0]
   dd8a0:	07d1      	lsls	r1, r2, #31
   dd8a2:	bf5c      	itt	pl
   dd8a4:	2201      	movpl	r2, #1
   dd8a6:	601a      	strpl	r2, [r3, #0]
   dd8a8:	4b1a      	ldr	r3, [pc, #104]	; (dd914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dd8aa:	681a      	ldr	r2, [r3, #0]
   dd8ac:	07d2      	lsls	r2, r2, #31
   dd8ae:	bf5c      	itt	pl
   dd8b0:	2201      	movpl	r2, #1
   dd8b2:	601a      	strpl	r2, [r3, #0]
   dd8b4:	4b18      	ldr	r3, [pc, #96]	; (dd918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dd8b6:	681a      	ldr	r2, [r3, #0]
   dd8b8:	07d0      	lsls	r0, r2, #31
   dd8ba:	bf5c      	itt	pl
   dd8bc:	2201      	movpl	r2, #1
   dd8be:	601a      	strpl	r2, [r3, #0]
   dd8c0:	4b16      	ldr	r3, [pc, #88]	; (dd91c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dd8c2:	681a      	ldr	r2, [r3, #0]
   dd8c4:	07d1      	lsls	r1, r2, #31
   dd8c6:	bf5c      	itt	pl
   dd8c8:	2201      	movpl	r2, #1
   dd8ca:	601a      	strpl	r2, [r3, #0]
   dd8cc:	4b14      	ldr	r3, [pc, #80]	; (dd920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dd8ce:	681a      	ldr	r2, [r3, #0]
   dd8d0:	07d2      	lsls	r2, r2, #31
   dd8d2:	bf5c      	itt	pl
   dd8d4:	2201      	movpl	r2, #1
   dd8d6:	601a      	strpl	r2, [r3, #0]
   dd8d8:	4b12      	ldr	r3, [pc, #72]	; (dd924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dd8da:	681a      	ldr	r2, [r3, #0]
   dd8dc:	07d0      	lsls	r0, r2, #31
   dd8de:	bf5c      	itt	pl
   dd8e0:	2201      	movpl	r2, #1
   dd8e2:	601a      	strpl	r2, [r3, #0]
   dd8e4:	4b10      	ldr	r3, [pc, #64]	; (dd928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dd8e6:	681a      	ldr	r2, [r3, #0]
   dd8e8:	07d1      	lsls	r1, r2, #31
   dd8ea:	bf5c      	itt	pl
   dd8ec:	2201      	movpl	r2, #1
   dd8ee:	601a      	strpl	r2, [r3, #0]
   dd8f0:	4b0e      	ldr	r3, [pc, #56]	; (dd92c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dd8f2:	681a      	ldr	r2, [r3, #0]
   dd8f4:	07d2      	lsls	r2, r2, #31
   dd8f6:	bf5c      	itt	pl
   dd8f8:	2201      	movpl	r2, #1
   dd8fa:	601a      	strpl	r2, [r3, #0]
   dd8fc:	4770      	bx	lr
   dd8fe:	bf00      	nop
   dd900:	2003e6a4 	.word	0x2003e6a4
   dd904:	2003e6a0 	.word	0x2003e6a0
   dd908:	2003e69c 	.word	0x2003e69c
   dd90c:	2003e698 	.word	0x2003e698
   dd910:	2003e694 	.word	0x2003e694
   dd914:	2003e690 	.word	0x2003e690
   dd918:	2003e68c 	.word	0x2003e68c
   dd91c:	2003e688 	.word	0x2003e688
   dd920:	2003e684 	.word	0x2003e684
   dd924:	2003e680 	.word	0x2003e680
   dd928:	2003e67c 	.word	0x2003e67c
   dd92c:	2003e678 	.word	0x2003e678

000dd930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dd930:	4b18      	ldr	r3, [pc, #96]	; (dd994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dd932:	681a      	ldr	r2, [r3, #0]
   dd934:	07d1      	lsls	r1, r2, #31
   dd936:	bf5c      	itt	pl
   dd938:	2201      	movpl	r2, #1
   dd93a:	601a      	strpl	r2, [r3, #0]
   dd93c:	4b16      	ldr	r3, [pc, #88]	; (dd998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dd93e:	681a      	ldr	r2, [r3, #0]
   dd940:	07d2      	lsls	r2, r2, #31
   dd942:	bf5c      	itt	pl
   dd944:	2201      	movpl	r2, #1
   dd946:	601a      	strpl	r2, [r3, #0]
   dd948:	4b14      	ldr	r3, [pc, #80]	; (dd99c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dd94a:	681a      	ldr	r2, [r3, #0]
   dd94c:	07d0      	lsls	r0, r2, #31
   dd94e:	bf5c      	itt	pl
   dd950:	2201      	movpl	r2, #1
   dd952:	601a      	strpl	r2, [r3, #0]
   dd954:	4b12      	ldr	r3, [pc, #72]	; (dd9a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dd956:	681a      	ldr	r2, [r3, #0]
   dd958:	07d1      	lsls	r1, r2, #31
   dd95a:	bf5c      	itt	pl
   dd95c:	2201      	movpl	r2, #1
   dd95e:	601a      	strpl	r2, [r3, #0]
   dd960:	4b10      	ldr	r3, [pc, #64]	; (dd9a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dd962:	681a      	ldr	r2, [r3, #0]
   dd964:	07d2      	lsls	r2, r2, #31
   dd966:	bf5c      	itt	pl
   dd968:	2201      	movpl	r2, #1
   dd96a:	601a      	strpl	r2, [r3, #0]
   dd96c:	4b0e      	ldr	r3, [pc, #56]	; (dd9a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dd96e:	681a      	ldr	r2, [r3, #0]
   dd970:	07d0      	lsls	r0, r2, #31
   dd972:	bf5c      	itt	pl
   dd974:	2201      	movpl	r2, #1
   dd976:	601a      	strpl	r2, [r3, #0]
   dd978:	4b0c      	ldr	r3, [pc, #48]	; (dd9ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dd97a:	681a      	ldr	r2, [r3, #0]
   dd97c:	07d1      	lsls	r1, r2, #31
   dd97e:	bf5c      	itt	pl
   dd980:	2201      	movpl	r2, #1
   dd982:	601a      	strpl	r2, [r3, #0]
   dd984:	4b0a      	ldr	r3, [pc, #40]	; (dd9b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dd986:	681a      	ldr	r2, [r3, #0]
   dd988:	07d2      	lsls	r2, r2, #31
   dd98a:	bf5c      	itt	pl
   dd98c:	2201      	movpl	r2, #1
   dd98e:	601a      	strpl	r2, [r3, #0]
   dd990:	4770      	bx	lr
   dd992:	bf00      	nop
   dd994:	2003e6c4 	.word	0x2003e6c4
   dd998:	2003e6c0 	.word	0x2003e6c0
   dd99c:	2003e6bc 	.word	0x2003e6bc
   dd9a0:	2003e6b8 	.word	0x2003e6b8
   dd9a4:	2003e6b4 	.word	0x2003e6b4
   dd9a8:	2003e6b0 	.word	0x2003e6b0
   dd9ac:	2003e6ac 	.word	0x2003e6ac
   dd9b0:	2003e6a8 	.word	0x2003e6a8
   dd9b4:	00000000 	.word	0x00000000

000dd9b8 <atan>:
   dd9b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd9bc:	ec55 4b10 	vmov	r4, r5, d0
   dd9c0:	4bd1      	ldr	r3, [pc, #836]	; (ddd08 <atan+0x350>)
   dd9c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dd9c6:	429e      	cmp	r6, r3
   dd9c8:	46ab      	mov	fp, r5
   dd9ca:	dd10      	ble.n	dd9ee <atan+0x36>
   dd9cc:	4bcf      	ldr	r3, [pc, #828]	; (ddd0c <atan+0x354>)
   dd9ce:	429e      	cmp	r6, r3
   dd9d0:	f300 80b2 	bgt.w	ddb38 <atan+0x180>
   dd9d4:	f000 80ad 	beq.w	ddb32 <atan+0x17a>
   dd9d8:	f1bb 0f00 	cmp.w	fp, #0
   dd9dc:	f340 80fd 	ble.w	ddbda <atan+0x222>
   dd9e0:	a5ad      	add	r5, pc, #692	; (adr r5, ddc98 <atan+0x2e0>)
   dd9e2:	e9d5 4500 	ldrd	r4, r5, [r5]
   dd9e6:	ec45 4b10 	vmov	d0, r4, r5
   dd9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd9ee:	4bc8      	ldr	r3, [pc, #800]	; (ddd10 <atan+0x358>)
   dd9f0:	429e      	cmp	r6, r3
   dd9f2:	f300 80c0 	bgt.w	ddb76 <atan+0x1be>
   dd9f6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dd9fa:	429e      	cmp	r6, r3
   dd9fc:	f340 80a8 	ble.w	ddb50 <atan+0x198>
   dda00:	f04f 3aff 	mov.w	sl, #4294967295
   dda04:	4622      	mov	r2, r4
   dda06:	462b      	mov	r3, r5
   dda08:	4620      	mov	r0, r4
   dda0a:	4629      	mov	r1, r5
   dda0c:	f005 fc88 	bl	e3320 <__aeabi_dmul>
   dda10:	4602      	mov	r2, r0
   dda12:	460b      	mov	r3, r1
   dda14:	4680      	mov	r8, r0
   dda16:	4689      	mov	r9, r1
   dda18:	f005 fc82 	bl	e3320 <__aeabi_dmul>
   dda1c:	a3a0      	add	r3, pc, #640	; (adr r3, ddca0 <atan+0x2e8>)
   dda1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda22:	4606      	mov	r6, r0
   dda24:	460f      	mov	r7, r1
   dda26:	f005 fc7b 	bl	e3320 <__aeabi_dmul>
   dda2a:	a39f      	add	r3, pc, #636	; (adr r3, ddca8 <atan+0x2f0>)
   dda2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda30:	f005 fac4 	bl	e2fbc <__adddf3>
   dda34:	4632      	mov	r2, r6
   dda36:	463b      	mov	r3, r7
   dda38:	f005 fc72 	bl	e3320 <__aeabi_dmul>
   dda3c:	a39c      	add	r3, pc, #624	; (adr r3, ddcb0 <atan+0x2f8>)
   dda3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda42:	f005 fabb 	bl	e2fbc <__adddf3>
   dda46:	4632      	mov	r2, r6
   dda48:	463b      	mov	r3, r7
   dda4a:	f005 fc69 	bl	e3320 <__aeabi_dmul>
   dda4e:	a39a      	add	r3, pc, #616	; (adr r3, ddcb8 <atan+0x300>)
   dda50:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda54:	f005 fab2 	bl	e2fbc <__adddf3>
   dda58:	4632      	mov	r2, r6
   dda5a:	463b      	mov	r3, r7
   dda5c:	f005 fc60 	bl	e3320 <__aeabi_dmul>
   dda60:	a397      	add	r3, pc, #604	; (adr r3, ddcc0 <atan+0x308>)
   dda62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda66:	f005 faa9 	bl	e2fbc <__adddf3>
   dda6a:	4632      	mov	r2, r6
   dda6c:	463b      	mov	r3, r7
   dda6e:	f005 fc57 	bl	e3320 <__aeabi_dmul>
   dda72:	a395      	add	r3, pc, #596	; (adr r3, ddcc8 <atan+0x310>)
   dda74:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda78:	f005 faa0 	bl	e2fbc <__adddf3>
   dda7c:	4642      	mov	r2, r8
   dda7e:	464b      	mov	r3, r9
   dda80:	f005 fc4e 	bl	e3320 <__aeabi_dmul>
   dda84:	a392      	add	r3, pc, #584	; (adr r3, ddcd0 <atan+0x318>)
   dda86:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda8a:	4680      	mov	r8, r0
   dda8c:	4689      	mov	r9, r1
   dda8e:	4630      	mov	r0, r6
   dda90:	4639      	mov	r1, r7
   dda92:	f005 fc45 	bl	e3320 <__aeabi_dmul>
   dda96:	a390      	add	r3, pc, #576	; (adr r3, ddcd8 <atan+0x320>)
   dda98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dda9c:	f005 fa8c 	bl	e2fb8 <__aeabi_dsub>
   ddaa0:	4632      	mov	r2, r6
   ddaa2:	463b      	mov	r3, r7
   ddaa4:	f005 fc3c 	bl	e3320 <__aeabi_dmul>
   ddaa8:	a38d      	add	r3, pc, #564	; (adr r3, ddce0 <atan+0x328>)
   ddaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddaae:	f005 fa83 	bl	e2fb8 <__aeabi_dsub>
   ddab2:	4632      	mov	r2, r6
   ddab4:	463b      	mov	r3, r7
   ddab6:	f005 fc33 	bl	e3320 <__aeabi_dmul>
   ddaba:	a38b      	add	r3, pc, #556	; (adr r3, ddce8 <atan+0x330>)
   ddabc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddac0:	f005 fa7a 	bl	e2fb8 <__aeabi_dsub>
   ddac4:	4632      	mov	r2, r6
   ddac6:	463b      	mov	r3, r7
   ddac8:	f005 fc2a 	bl	e3320 <__aeabi_dmul>
   ddacc:	a388      	add	r3, pc, #544	; (adr r3, ddcf0 <atan+0x338>)
   ddace:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddad2:	f005 fa71 	bl	e2fb8 <__aeabi_dsub>
   ddad6:	4632      	mov	r2, r6
   ddad8:	463b      	mov	r3, r7
   ddada:	f005 fc21 	bl	e3320 <__aeabi_dmul>
   ddade:	f1ba 3fff 	cmp.w	sl, #4294967295
   ddae2:	4602      	mov	r2, r0
   ddae4:	460b      	mov	r3, r1
   ddae6:	d07c      	beq.n	ddbe2 <atan+0x22a>
   ddae8:	4640      	mov	r0, r8
   ddaea:	4649      	mov	r1, r9
   ddaec:	f005 fa66 	bl	e2fbc <__adddf3>
   ddaf0:	4622      	mov	r2, r4
   ddaf2:	462b      	mov	r3, r5
   ddaf4:	f005 fc14 	bl	e3320 <__aeabi_dmul>
   ddaf8:	4e86      	ldr	r6, [pc, #536]	; (ddd14 <atan+0x35c>)
   ddafa:	4b87      	ldr	r3, [pc, #540]	; (ddd18 <atan+0x360>)
   ddafc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   ddb00:	4456      	add	r6, sl
   ddb02:	449a      	add	sl, r3
   ddb04:	e9da 2300 	ldrd	r2, r3, [sl]
   ddb08:	f005 fa56 	bl	e2fb8 <__aeabi_dsub>
   ddb0c:	4622      	mov	r2, r4
   ddb0e:	462b      	mov	r3, r5
   ddb10:	f005 fa52 	bl	e2fb8 <__aeabi_dsub>
   ddb14:	4602      	mov	r2, r0
   ddb16:	460b      	mov	r3, r1
   ddb18:	e9d6 0100 	ldrd	r0, r1, [r6]
   ddb1c:	f005 fa4c 	bl	e2fb8 <__aeabi_dsub>
   ddb20:	f1bb 0f00 	cmp.w	fp, #0
   ddb24:	db52      	blt.n	ddbcc <atan+0x214>
   ddb26:	4604      	mov	r4, r0
   ddb28:	460d      	mov	r5, r1
   ddb2a:	ec45 4b10 	vmov	d0, r4, r5
   ddb2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb32:	2c00      	cmp	r4, #0
   ddb34:	f43f af50 	beq.w	dd9d8 <atan+0x20>
   ddb38:	4622      	mov	r2, r4
   ddb3a:	462b      	mov	r3, r5
   ddb3c:	4620      	mov	r0, r4
   ddb3e:	4629      	mov	r1, r5
   ddb40:	f005 fa3c 	bl	e2fbc <__adddf3>
   ddb44:	4604      	mov	r4, r0
   ddb46:	460d      	mov	r5, r1
   ddb48:	ec45 4b10 	vmov	d0, r4, r5
   ddb4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb50:	a369      	add	r3, pc, #420	; (adr r3, ddcf8 <atan+0x340>)
   ddb52:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddb56:	ee10 0a10 	vmov	r0, s0
   ddb5a:	4629      	mov	r1, r5
   ddb5c:	f005 fa2e 	bl	e2fbc <__adddf3>
   ddb60:	2200      	movs	r2, #0
   ddb62:	4b6e      	ldr	r3, [pc, #440]	; (ddd1c <atan+0x364>)
   ddb64:	f005 fe6c 	bl	e3840 <__aeabi_dcmpgt>
   ddb68:	2800      	cmp	r0, #0
   ddb6a:	f43f af49 	beq.w	dda00 <atan+0x48>
   ddb6e:	ec45 4b10 	vmov	d0, r4, r5
   ddb72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb76:	f000 f9cb 	bl	ddf10 <fabs>
   ddb7a:	4b69      	ldr	r3, [pc, #420]	; (ddd20 <atan+0x368>)
   ddb7c:	429e      	cmp	r6, r3
   ddb7e:	ec55 4b10 	vmov	r4, r5, d0
   ddb82:	dc3f      	bgt.n	ddc04 <atan+0x24c>
   ddb84:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   ddb88:	429e      	cmp	r6, r3
   ddb8a:	dc68      	bgt.n	ddc5e <atan+0x2a6>
   ddb8c:	ee10 2a10 	vmov	r2, s0
   ddb90:	ee10 0a10 	vmov	r0, s0
   ddb94:	462b      	mov	r3, r5
   ddb96:	4629      	mov	r1, r5
   ddb98:	f005 fa10 	bl	e2fbc <__adddf3>
   ddb9c:	2200      	movs	r2, #0
   ddb9e:	4b5f      	ldr	r3, [pc, #380]	; (ddd1c <atan+0x364>)
   ddba0:	f005 fa0a 	bl	e2fb8 <__aeabi_dsub>
   ddba4:	2200      	movs	r2, #0
   ddba6:	4606      	mov	r6, r0
   ddba8:	460f      	mov	r7, r1
   ddbaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ddbae:	4620      	mov	r0, r4
   ddbb0:	4629      	mov	r1, r5
   ddbb2:	f005 fa03 	bl	e2fbc <__adddf3>
   ddbb6:	4602      	mov	r2, r0
   ddbb8:	460b      	mov	r3, r1
   ddbba:	4630      	mov	r0, r6
   ddbbc:	4639      	mov	r1, r7
   ddbbe:	f005 fcd9 	bl	e3574 <__aeabi_ddiv>
   ddbc2:	f04f 0a00 	mov.w	sl, #0
   ddbc6:	4604      	mov	r4, r0
   ddbc8:	460d      	mov	r5, r1
   ddbca:	e71b      	b.n	dda04 <atan+0x4c>
   ddbcc:	4604      	mov	r4, r0
   ddbce:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   ddbd2:	ec45 4b10 	vmov	d0, r4, r5
   ddbd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddbda:	a549      	add	r5, pc, #292	; (adr r5, ddd00 <atan+0x348>)
   ddbdc:	e9d5 4500 	ldrd	r4, r5, [r5]
   ddbe0:	e7b2      	b.n	ddb48 <atan+0x190>
   ddbe2:	4640      	mov	r0, r8
   ddbe4:	4649      	mov	r1, r9
   ddbe6:	f005 f9e9 	bl	e2fbc <__adddf3>
   ddbea:	4622      	mov	r2, r4
   ddbec:	462b      	mov	r3, r5
   ddbee:	f005 fb97 	bl	e3320 <__aeabi_dmul>
   ddbf2:	4602      	mov	r2, r0
   ddbf4:	460b      	mov	r3, r1
   ddbf6:	4620      	mov	r0, r4
   ddbf8:	4629      	mov	r1, r5
   ddbfa:	f005 f9dd 	bl	e2fb8 <__aeabi_dsub>
   ddbfe:	4604      	mov	r4, r0
   ddc00:	460d      	mov	r5, r1
   ddc02:	e7a1      	b.n	ddb48 <atan+0x190>
   ddc04:	4b47      	ldr	r3, [pc, #284]	; (ddd24 <atan+0x36c>)
   ddc06:	429e      	cmp	r6, r3
   ddc08:	dc1d      	bgt.n	ddc46 <atan+0x28e>
   ddc0a:	ee10 0a10 	vmov	r0, s0
   ddc0e:	2200      	movs	r2, #0
   ddc10:	4b45      	ldr	r3, [pc, #276]	; (ddd28 <atan+0x370>)
   ddc12:	4629      	mov	r1, r5
   ddc14:	f005 f9d0 	bl	e2fb8 <__aeabi_dsub>
   ddc18:	2200      	movs	r2, #0
   ddc1a:	4606      	mov	r6, r0
   ddc1c:	460f      	mov	r7, r1
   ddc1e:	4b42      	ldr	r3, [pc, #264]	; (ddd28 <atan+0x370>)
   ddc20:	4620      	mov	r0, r4
   ddc22:	4629      	mov	r1, r5
   ddc24:	f005 fb7c 	bl	e3320 <__aeabi_dmul>
   ddc28:	2200      	movs	r2, #0
   ddc2a:	4b3c      	ldr	r3, [pc, #240]	; (ddd1c <atan+0x364>)
   ddc2c:	f005 f9c6 	bl	e2fbc <__adddf3>
   ddc30:	4602      	mov	r2, r0
   ddc32:	460b      	mov	r3, r1
   ddc34:	4630      	mov	r0, r6
   ddc36:	4639      	mov	r1, r7
   ddc38:	f005 fc9c 	bl	e3574 <__aeabi_ddiv>
   ddc3c:	f04f 0a02 	mov.w	sl, #2
   ddc40:	4604      	mov	r4, r0
   ddc42:	460d      	mov	r5, r1
   ddc44:	e6de      	b.n	dda04 <atan+0x4c>
   ddc46:	462b      	mov	r3, r5
   ddc48:	ee10 2a10 	vmov	r2, s0
   ddc4c:	2000      	movs	r0, #0
   ddc4e:	4937      	ldr	r1, [pc, #220]	; (ddd2c <atan+0x374>)
   ddc50:	f005 fc90 	bl	e3574 <__aeabi_ddiv>
   ddc54:	f04f 0a03 	mov.w	sl, #3
   ddc58:	4604      	mov	r4, r0
   ddc5a:	460d      	mov	r5, r1
   ddc5c:	e6d2      	b.n	dda04 <atan+0x4c>
   ddc5e:	ee10 0a10 	vmov	r0, s0
   ddc62:	2200      	movs	r2, #0
   ddc64:	4b2d      	ldr	r3, [pc, #180]	; (ddd1c <atan+0x364>)
   ddc66:	4629      	mov	r1, r5
   ddc68:	f005 f9a6 	bl	e2fb8 <__aeabi_dsub>
   ddc6c:	2200      	movs	r2, #0
   ddc6e:	4606      	mov	r6, r0
   ddc70:	460f      	mov	r7, r1
   ddc72:	4b2a      	ldr	r3, [pc, #168]	; (ddd1c <atan+0x364>)
   ddc74:	4620      	mov	r0, r4
   ddc76:	4629      	mov	r1, r5
   ddc78:	f005 f9a0 	bl	e2fbc <__adddf3>
   ddc7c:	4602      	mov	r2, r0
   ddc7e:	460b      	mov	r3, r1
   ddc80:	4630      	mov	r0, r6
   ddc82:	4639      	mov	r1, r7
   ddc84:	f005 fc76 	bl	e3574 <__aeabi_ddiv>
   ddc88:	f04f 0a01 	mov.w	sl, #1
   ddc8c:	4604      	mov	r4, r0
   ddc8e:	460d      	mov	r5, r1
   ddc90:	e6b8      	b.n	dda04 <atan+0x4c>
   ddc92:	bf00      	nop
   ddc94:	f3af 8000 	nop.w
   ddc98:	54442d18 	.word	0x54442d18
   ddc9c:	3ff921fb 	.word	0x3ff921fb
   ddca0:	e322da11 	.word	0xe322da11
   ddca4:	3f90ad3a 	.word	0x3f90ad3a
   ddca8:	24760deb 	.word	0x24760deb
   ddcac:	3fa97b4b 	.word	0x3fa97b4b
   ddcb0:	a0d03d51 	.word	0xa0d03d51
   ddcb4:	3fb10d66 	.word	0x3fb10d66
   ddcb8:	c54c206e 	.word	0xc54c206e
   ddcbc:	3fb745cd 	.word	0x3fb745cd
   ddcc0:	920083ff 	.word	0x920083ff
   ddcc4:	3fc24924 	.word	0x3fc24924
   ddcc8:	5555550d 	.word	0x5555550d
   ddccc:	3fd55555 	.word	0x3fd55555
   ddcd0:	2c6a6c2f 	.word	0x2c6a6c2f
   ddcd4:	bfa2b444 	.word	0xbfa2b444
   ddcd8:	52defd9a 	.word	0x52defd9a
   ddcdc:	3fadde2d 	.word	0x3fadde2d
   ddce0:	af749a6d 	.word	0xaf749a6d
   ddce4:	3fb3b0f2 	.word	0x3fb3b0f2
   ddce8:	fe231671 	.word	0xfe231671
   ddcec:	3fbc71c6 	.word	0x3fbc71c6
   ddcf0:	9998ebc4 	.word	0x9998ebc4
   ddcf4:	3fc99999 	.word	0x3fc99999
   ddcf8:	8800759c 	.word	0x8800759c
   ddcfc:	7e37e43c 	.word	0x7e37e43c
   ddd00:	54442d18 	.word	0x54442d18
   ddd04:	bff921fb 	.word	0xbff921fb
   ddd08:	440fffff 	.word	0x440fffff
   ddd0c:	7ff00000 	.word	0x7ff00000
   ddd10:	3fdbffff 	.word	0x3fdbffff
   ddd14:	000e8af8 	.word	0x000e8af8
   ddd18:	000e8ad8 	.word	0x000e8ad8
   ddd1c:	3ff00000 	.word	0x3ff00000
   ddd20:	3ff2ffff 	.word	0x3ff2ffff
   ddd24:	40037fff 	.word	0x40037fff
   ddd28:	3ff80000 	.word	0x3ff80000
   ddd2c:	bff00000 	.word	0xbff00000

000ddd30 <ceil>:
   ddd30:	ec51 0b10 	vmov	r0, r1, d0
   ddd34:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ddd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddd3c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   ddd40:	2d13      	cmp	r5, #19
   ddd42:	460c      	mov	r4, r1
   ddd44:	460f      	mov	r7, r1
   ddd46:	ee10 6a10 	vmov	r6, s0
   ddd4a:	dc22      	bgt.n	ddd92 <ceil+0x62>
   ddd4c:	2d00      	cmp	r5, #0
   ddd4e:	db52      	blt.n	dddf6 <ceil+0xc6>
   ddd50:	4b3d      	ldr	r3, [pc, #244]	; (dde48 <ceil+0x118>)
   ddd52:	fa43 f805 	asr.w	r8, r3, r5
   ddd56:	ea01 0308 	and.w	r3, r1, r8
   ddd5a:	4303      	orrs	r3, r0
   ddd5c:	d01e      	beq.n	ddd9c <ceil+0x6c>
   ddd5e:	a338      	add	r3, pc, #224	; (adr r3, dde40 <ceil+0x110>)
   ddd60:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddd64:	f005 f92a 	bl	e2fbc <__adddf3>
   ddd68:	2200      	movs	r2, #0
   ddd6a:	2300      	movs	r3, #0
   ddd6c:	f005 fd68 	bl	e3840 <__aeabi_dcmpgt>
   ddd70:	b148      	cbz	r0, ddd86 <ceil+0x56>
   ddd72:	2c00      	cmp	r4, #0
   ddd74:	dd04      	ble.n	ddd80 <ceil+0x50>
   ddd76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   ddd7a:	fa43 f505 	asr.w	r5, r3, r5
   ddd7e:	442f      	add	r7, r5
   ddd80:	ea27 0408 	bic.w	r4, r7, r8
   ddd84:	2600      	movs	r6, #0
   ddd86:	4623      	mov	r3, r4
   ddd88:	4632      	mov	r2, r6
   ddd8a:	ec43 2b10 	vmov	d0, r2, r3
   ddd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddd92:	2d33      	cmp	r5, #51	; 0x33
   ddd94:	dd06      	ble.n	ddda4 <ceil+0x74>
   ddd96:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   ddd9a:	d03e      	beq.n	dde1a <ceil+0xea>
   ddd9c:	ec41 0b10 	vmov	d0, r0, r1
   ddda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddda4:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   ddda8:	f04f 38ff 	mov.w	r8, #4294967295
   dddac:	fa28 f803 	lsr.w	r8, r8, r3
   dddb0:	ea10 0f08 	tst.w	r0, r8
   dddb4:	d0f2      	beq.n	ddd9c <ceil+0x6c>
   dddb6:	a322      	add	r3, pc, #136	; (adr r3, dde40 <ceil+0x110>)
   dddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddbc:	f005 f8fe 	bl	e2fbc <__adddf3>
   dddc0:	2200      	movs	r2, #0
   dddc2:	2300      	movs	r3, #0
   dddc4:	f005 fd3c 	bl	e3840 <__aeabi_dcmpgt>
   dddc8:	2800      	cmp	r0, #0
   dddca:	d0dc      	beq.n	ddd86 <ceil+0x56>
   dddcc:	2c00      	cmp	r4, #0
   dddce:	dd09      	ble.n	ddde4 <ceil+0xb4>
   dddd0:	2d14      	cmp	r5, #20
   dddd2:	d031      	beq.n	dde38 <ceil+0x108>
   dddd4:	2301      	movs	r3, #1
   dddd6:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dddda:	fa03 f505 	lsl.w	r5, r3, r5
   dddde:	19ae      	adds	r6, r5, r6
   ddde0:	bf28      	it	cs
   ddde2:	18ff      	addcs	r7, r7, r3
   ddde4:	463c      	mov	r4, r7
   ddde6:	ea26 0608 	bic.w	r6, r6, r8
   dddea:	4623      	mov	r3, r4
   dddec:	4632      	mov	r2, r6
   dddee:	ec43 2b10 	vmov	d0, r2, r3
   dddf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dddf6:	a312      	add	r3, pc, #72	; (adr r3, dde40 <ceil+0x110>)
   dddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dddfc:	f005 f8de 	bl	e2fbc <__adddf3>
   dde00:	2200      	movs	r2, #0
   dde02:	2300      	movs	r3, #0
   dde04:	f005 fd1c 	bl	e3840 <__aeabi_dcmpgt>
   dde08:	2800      	cmp	r0, #0
   dde0a:	d0bc      	beq.n	ddd86 <ceil+0x56>
   dde0c:	2c00      	cmp	r4, #0
   dde0e:	db0f      	blt.n	dde30 <ceil+0x100>
   dde10:	4326      	orrs	r6, r4
   dde12:	d00b      	beq.n	dde2c <ceil+0xfc>
   dde14:	2600      	movs	r6, #0
   dde16:	4c0d      	ldr	r4, [pc, #52]	; (dde4c <ceil+0x11c>)
   dde18:	e7b5      	b.n	ddd86 <ceil+0x56>
   dde1a:	ee10 2a10 	vmov	r2, s0
   dde1e:	460b      	mov	r3, r1
   dde20:	f005 f8cc 	bl	e2fbc <__adddf3>
   dde24:	ec41 0b10 	vmov	d0, r0, r1
   dde28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dde2c:	4634      	mov	r4, r6
   dde2e:	e7aa      	b.n	ddd86 <ceil+0x56>
   dde30:	2600      	movs	r6, #0
   dde32:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dde36:	e7a6      	b.n	ddd86 <ceil+0x56>
   dde38:	3701      	adds	r7, #1
   dde3a:	e7d3      	b.n	ddde4 <ceil+0xb4>
   dde3c:	f3af 8000 	nop.w
   dde40:	8800759c 	.word	0x8800759c
   dde44:	7e37e43c 	.word	0x7e37e43c
   dde48:	000fffff 	.word	0x000fffff
   dde4c:	3ff00000 	.word	0x3ff00000

000dde50 <cos>:
   dde50:	b500      	push	{lr}
   dde52:	ec51 0b10 	vmov	r0, r1, d0
   dde56:	4a2c      	ldr	r2, [pc, #176]	; (ddf08 <cos+0xb8>)
   dde58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dde5c:	4293      	cmp	r3, r2
   dde5e:	b085      	sub	sp, #20
   dde60:	dd20      	ble.n	ddea4 <cos+0x54>
   dde62:	4a2a      	ldr	r2, [pc, #168]	; (ddf0c <cos+0xbc>)
   dde64:	4293      	cmp	r3, r2
   dde66:	dd09      	ble.n	dde7c <cos+0x2c>
   dde68:	ee10 2a10 	vmov	r2, s0
   dde6c:	460b      	mov	r3, r1
   dde6e:	f005 f8a3 	bl	e2fb8 <__aeabi_dsub>
   dde72:	ec41 0b10 	vmov	d0, r0, r1
   dde76:	b005      	add	sp, #20
   dde78:	f85d fb04 	ldr.w	pc, [sp], #4
   dde7c:	4668      	mov	r0, sp
   dde7e:	f003 f91b 	bl	e10b8 <__ieee754_rem_pio2>
   dde82:	f000 0003 	and.w	r0, r0, #3
   dde86:	2801      	cmp	r0, #1
   dde88:	d028      	beq.n	ddedc <cos+0x8c>
   dde8a:	2802      	cmp	r0, #2
   dde8c:	d015      	beq.n	ddeba <cos+0x6a>
   dde8e:	b360      	cbz	r0, ddeea <cos+0x9a>
   dde90:	2001      	movs	r0, #1
   dde92:	ed9d 1b02 	vldr	d1, [sp, #8]
   dde96:	ed9d 0b00 	vldr	d0, [sp]
   dde9a:	f004 fa3d 	bl	e2318 <__kernel_sin>
   dde9e:	ec51 0b10 	vmov	r0, r1, d0
   ddea2:	e7e6      	b.n	dde72 <cos+0x22>
   ddea4:	ed9f 1b16 	vldr	d1, [pc, #88]	; ddf00 <cos+0xb0>
   ddea8:	f003 fce2 	bl	e1870 <__kernel_cos>
   ddeac:	ec51 0b10 	vmov	r0, r1, d0
   ddeb0:	ec41 0b10 	vmov	d0, r0, r1
   ddeb4:	b005      	add	sp, #20
   ddeb6:	f85d fb04 	ldr.w	pc, [sp], #4
   ddeba:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddebe:	ed9d 0b00 	vldr	d0, [sp]
   ddec2:	f003 fcd5 	bl	e1870 <__kernel_cos>
   ddec6:	ec53 2b10 	vmov	r2, r3, d0
   ddeca:	ee10 0a10 	vmov	r0, s0
   ddece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dded2:	ec41 0b10 	vmov	d0, r0, r1
   dded6:	b005      	add	sp, #20
   dded8:	f85d fb04 	ldr.w	pc, [sp], #4
   ddedc:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddee0:	ed9d 0b00 	vldr	d0, [sp]
   ddee4:	f004 fa18 	bl	e2318 <__kernel_sin>
   ddee8:	e7ed      	b.n	ddec6 <cos+0x76>
   ddeea:	ed9d 1b02 	vldr	d1, [sp, #8]
   ddeee:	ed9d 0b00 	vldr	d0, [sp]
   ddef2:	f003 fcbd 	bl	e1870 <__kernel_cos>
   ddef6:	ec51 0b10 	vmov	r0, r1, d0
   ddefa:	e7ba      	b.n	dde72 <cos+0x22>
   ddefc:	f3af 8000 	nop.w
	...
   ddf08:	3fe921fb 	.word	0x3fe921fb
   ddf0c:	7fefffff 	.word	0x7fefffff

000ddf10 <fabs>:
   ddf10:	ec53 2b10 	vmov	r2, r3, d0
   ddf14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   ddf18:	ec43 2b10 	vmov	d0, r2, r3
   ddf1c:	4770      	bx	lr
   ddf1e:	bf00      	nop

000ddf20 <floor>:
   ddf20:	ec51 0b10 	vmov	r0, r1, d0
   ddf24:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ddf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddf2c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   ddf30:	2d13      	cmp	r5, #19
   ddf32:	460c      	mov	r4, r1
   ddf34:	460f      	mov	r7, r1
   ddf36:	ee10 6a10 	vmov	r6, s0
   ddf3a:	dc1d      	bgt.n	ddf78 <floor+0x58>
   ddf3c:	2d00      	cmp	r5, #0
   ddf3e:	db43      	blt.n	ddfc8 <floor+0xa8>
   ddf40:	4b3d      	ldr	r3, [pc, #244]	; (de038 <floor+0x118>)
   ddf42:	fa43 f805 	asr.w	r8, r3, r5
   ddf46:	ea01 0308 	and.w	r3, r1, r8
   ddf4a:	4303      	orrs	r3, r0
   ddf4c:	d019      	beq.n	ddf82 <floor+0x62>
   ddf4e:	a338      	add	r3, pc, #224	; (adr r3, de030 <floor+0x110>)
   ddf50:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddf54:	f005 f832 	bl	e2fbc <__adddf3>
   ddf58:	2200      	movs	r2, #0
   ddf5a:	2300      	movs	r3, #0
   ddf5c:	f005 fc70 	bl	e3840 <__aeabi_dcmpgt>
   ddf60:	b120      	cbz	r0, ddf6c <floor+0x4c>
   ddf62:	2c00      	cmp	r4, #0
   ddf64:	db49      	blt.n	ddffa <floor+0xda>
   ddf66:	ea27 0408 	bic.w	r4, r7, r8
   ddf6a:	2600      	movs	r6, #0
   ddf6c:	4623      	mov	r3, r4
   ddf6e:	4632      	mov	r2, r6
   ddf70:	ec43 2b10 	vmov	d0, r2, r3
   ddf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddf78:	2d33      	cmp	r5, #51	; 0x33
   ddf7a:	dd06      	ble.n	ddf8a <floor+0x6a>
   ddf7c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   ddf80:	d032      	beq.n	ddfe8 <floor+0xc8>
   ddf82:	ec41 0b10 	vmov	d0, r0, r1
   ddf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddf8a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   ddf8e:	f04f 38ff 	mov.w	r8, #4294967295
   ddf92:	fa28 f803 	lsr.w	r8, r8, r3
   ddf96:	ea10 0f08 	tst.w	r0, r8
   ddf9a:	d0f2      	beq.n	ddf82 <floor+0x62>
   ddf9c:	a324      	add	r3, pc, #144	; (adr r3, de030 <floor+0x110>)
   ddf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddfa2:	f005 f80b 	bl	e2fbc <__adddf3>
   ddfa6:	2200      	movs	r2, #0
   ddfa8:	2300      	movs	r3, #0
   ddfaa:	f005 fc49 	bl	e3840 <__aeabi_dcmpgt>
   ddfae:	2800      	cmp	r0, #0
   ddfb0:	d0dc      	beq.n	ddf6c <floor+0x4c>
   ddfb2:	2c00      	cmp	r4, #0
   ddfb4:	db27      	blt.n	de006 <floor+0xe6>
   ddfb6:	463c      	mov	r4, r7
   ddfb8:	ea26 0608 	bic.w	r6, r6, r8
   ddfbc:	4623      	mov	r3, r4
   ddfbe:	4632      	mov	r2, r6
   ddfc0:	ec43 2b10 	vmov	d0, r2, r3
   ddfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddfc8:	a319      	add	r3, pc, #100	; (adr r3, de030 <floor+0x110>)
   ddfca:	e9d3 2300 	ldrd	r2, r3, [r3]
   ddfce:	f004 fff5 	bl	e2fbc <__adddf3>
   ddfd2:	2200      	movs	r2, #0
   ddfd4:	2300      	movs	r3, #0
   ddfd6:	f005 fc33 	bl	e3840 <__aeabi_dcmpgt>
   ddfda:	2800      	cmp	r0, #0
   ddfdc:	d0c6      	beq.n	ddf6c <floor+0x4c>
   ddfde:	2c00      	cmp	r4, #0
   ddfe0:	db1c      	blt.n	de01c <floor+0xfc>
   ddfe2:	2600      	movs	r6, #0
   ddfe4:	4634      	mov	r4, r6
   ddfe6:	e7c1      	b.n	ddf6c <floor+0x4c>
   ddfe8:	ee10 2a10 	vmov	r2, s0
   ddfec:	460b      	mov	r3, r1
   ddfee:	f004 ffe5 	bl	e2fbc <__adddf3>
   ddff2:	ec41 0b10 	vmov	d0, r0, r1
   ddff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   ddffe:	fa43 f505 	asr.w	r5, r3, r5
   de002:	442f      	add	r7, r5
   de004:	e7af      	b.n	ddf66 <floor+0x46>
   de006:	2d14      	cmp	r5, #20
   de008:	d010      	beq.n	de02c <floor+0x10c>
   de00a:	2301      	movs	r3, #1
   de00c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   de010:	fa03 f505 	lsl.w	r5, r3, r5
   de014:	19ae      	adds	r6, r5, r6
   de016:	bf28      	it	cs
   de018:	18ff      	addcs	r7, r7, r3
   de01a:	e7cc      	b.n	ddfb6 <floor+0x96>
   de01c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   de020:	4b06      	ldr	r3, [pc, #24]	; (de03c <floor+0x11c>)
   de022:	4332      	orrs	r2, r6
   de024:	bf18      	it	ne
   de026:	461c      	movne	r4, r3
   de028:	2600      	movs	r6, #0
   de02a:	e79f      	b.n	ddf6c <floor+0x4c>
   de02c:	3701      	adds	r7, #1
   de02e:	e7c2      	b.n	ddfb6 <floor+0x96>
   de030:	8800759c 	.word	0x8800759c
   de034:	7e37e43c 	.word	0x7e37e43c
   de038:	000fffff 	.word	0x000fffff
   de03c:	bff00000 	.word	0xbff00000

000de040 <sin>:
   de040:	b500      	push	{lr}
   de042:	ec51 0b10 	vmov	r0, r1, d0
   de046:	4a2c      	ldr	r2, [pc, #176]	; (de0f8 <sin+0xb8>)
   de048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   de04c:	4293      	cmp	r3, r2
   de04e:	b085      	sub	sp, #20
   de050:	dd27      	ble.n	de0a2 <sin+0x62>
   de052:	4a2a      	ldr	r2, [pc, #168]	; (de0fc <sin+0xbc>)
   de054:	4293      	cmp	r3, r2
   de056:	dd09      	ble.n	de06c <sin+0x2c>
   de058:	ee10 2a10 	vmov	r2, s0
   de05c:	460b      	mov	r3, r1
   de05e:	f004 ffab 	bl	e2fb8 <__aeabi_dsub>
   de062:	ec41 0b10 	vmov	d0, r0, r1
   de066:	b005      	add	sp, #20
   de068:	f85d fb04 	ldr.w	pc, [sp], #4
   de06c:	4668      	mov	r0, sp
   de06e:	f003 f823 	bl	e10b8 <__ieee754_rem_pio2>
   de072:	f000 0003 	and.w	r0, r0, #3
   de076:	2801      	cmp	r0, #1
   de078:	d027      	beq.n	de0ca <sin+0x8a>
   de07a:	2802      	cmp	r0, #2
   de07c:	d01d      	beq.n	de0ba <sin+0x7a>
   de07e:	b368      	cbz	r0, de0dc <sin+0x9c>
   de080:	ed9d 1b02 	vldr	d1, [sp, #8]
   de084:	ed9d 0b00 	vldr	d0, [sp]
   de088:	f003 fbf2 	bl	e1870 <__kernel_cos>
   de08c:	ec53 2b10 	vmov	r2, r3, d0
   de090:	ee10 0a10 	vmov	r0, s0
   de094:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   de098:	ec41 0b10 	vmov	d0, r0, r1
   de09c:	b005      	add	sp, #20
   de09e:	f85d fb04 	ldr.w	pc, [sp], #4
   de0a2:	2000      	movs	r0, #0
   de0a4:	ed9f 1b12 	vldr	d1, [pc, #72]	; de0f0 <sin+0xb0>
   de0a8:	f004 f936 	bl	e2318 <__kernel_sin>
   de0ac:	ec51 0b10 	vmov	r0, r1, d0
   de0b0:	ec41 0b10 	vmov	d0, r0, r1
   de0b4:	b005      	add	sp, #20
   de0b6:	f85d fb04 	ldr.w	pc, [sp], #4
   de0ba:	2001      	movs	r0, #1
   de0bc:	ed9d 1b02 	vldr	d1, [sp, #8]
   de0c0:	ed9d 0b00 	vldr	d0, [sp]
   de0c4:	f004 f928 	bl	e2318 <__kernel_sin>
   de0c8:	e7e0      	b.n	de08c <sin+0x4c>
   de0ca:	ed9d 1b02 	vldr	d1, [sp, #8]
   de0ce:	ed9d 0b00 	vldr	d0, [sp]
   de0d2:	f003 fbcd 	bl	e1870 <__kernel_cos>
   de0d6:	ec51 0b10 	vmov	r0, r1, d0
   de0da:	e7c2      	b.n	de062 <sin+0x22>
   de0dc:	2001      	movs	r0, #1
   de0de:	ed9d 1b02 	vldr	d1, [sp, #8]
   de0e2:	ed9d 0b00 	vldr	d0, [sp]
   de0e6:	f004 f917 	bl	e2318 <__kernel_sin>
   de0ea:	ec51 0b10 	vmov	r0, r1, d0
   de0ee:	e7b8      	b.n	de062 <sin+0x22>
	...
   de0f8:	3fe921fb 	.word	0x3fe921fb
   de0fc:	7fefffff 	.word	0x7fefffff

000de100 <tan>:
   de100:	b500      	push	{lr}
   de102:	ec51 0b10 	vmov	r0, r1, d0
   de106:	4a18      	ldr	r2, [pc, #96]	; (de168 <tan+0x68>)
   de108:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   de10c:	4293      	cmp	r3, r2
   de10e:	b085      	sub	sp, #20
   de110:	dd1d      	ble.n	de14e <tan+0x4e>
   de112:	4a16      	ldr	r2, [pc, #88]	; (de16c <tan+0x6c>)
   de114:	4293      	cmp	r3, r2
   de116:	dd09      	ble.n	de12c <tan+0x2c>
   de118:	ee10 2a10 	vmov	r2, s0
   de11c:	460b      	mov	r3, r1
   de11e:	f004 ff4b 	bl	e2fb8 <__aeabi_dsub>
   de122:	ec41 0b10 	vmov	d0, r0, r1
   de126:	b005      	add	sp, #20
   de128:	f85d fb04 	ldr.w	pc, [sp], #4
   de12c:	4668      	mov	r0, sp
   de12e:	f002 ffc3 	bl	e10b8 <__ieee754_rem_pio2>
   de132:	0040      	lsls	r0, r0, #1
   de134:	f000 0002 	and.w	r0, r0, #2
   de138:	f1c0 0001 	rsb	r0, r0, #1
   de13c:	ed9d 1b02 	vldr	d1, [sp, #8]
   de140:	ed9d 0b00 	vldr	d0, [sp]
   de144:	f004 f9b4 	bl	e24b0 <__kernel_tan>
   de148:	b005      	add	sp, #20
   de14a:	f85d fb04 	ldr.w	pc, [sp], #4
   de14e:	2001      	movs	r0, #1
   de150:	ed9f 1b03 	vldr	d1, [pc, #12]	; de160 <tan+0x60>
   de154:	f004 f9ac 	bl	e24b0 <__kernel_tan>
   de158:	b005      	add	sp, #20
   de15a:	f85d fb04 	ldr.w	pc, [sp], #4
   de15e:	bf00      	nop
	...
   de168:	3fe921fb 	.word	0x3fe921fb
   de16c:	7fefffff 	.word	0x7fefffff

000de170 <tanh>:
   de170:	b5d0      	push	{r4, r6, r7, lr}
   de172:	ec57 6b10 	vmov	r6, r7, d0
   de176:	4a42      	ldr	r2, [pc, #264]	; (de280 <tanh+0x110>)
   de178:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   de17c:	4293      	cmp	r3, r2
   de17e:	463c      	mov	r4, r7
   de180:	dd10      	ble.n	de1a4 <tanh+0x34>
   de182:	2f00      	cmp	r7, #0
   de184:	ee10 2a10 	vmov	r2, s0
   de188:	463b      	mov	r3, r7
   de18a:	f04f 0000 	mov.w	r0, #0
   de18e:	493d      	ldr	r1, [pc, #244]	; (de284 <tanh+0x114>)
   de190:	db40      	blt.n	de214 <tanh+0xa4>
   de192:	f005 f9ef 	bl	e3574 <__aeabi_ddiv>
   de196:	2200      	movs	r2, #0
   de198:	4b3a      	ldr	r3, [pc, #232]	; (de284 <tanh+0x114>)
   de19a:	f004 ff0f 	bl	e2fbc <__adddf3>
   de19e:	ec41 0b10 	vmov	d0, r0, r1
   de1a2:	bdd0      	pop	{r4, r6, r7, pc}
   de1a4:	4a38      	ldr	r2, [pc, #224]	; (de288 <tanh+0x118>)
   de1a6:	4293      	cmp	r3, r2
   de1a8:	dd0a      	ble.n	de1c0 <tanh+0x50>
   de1aa:	4b36      	ldr	r3, [pc, #216]	; (de284 <tanh+0x114>)
   de1ac:	2200      	movs	r2, #0
   de1ae:	2c00      	cmp	r4, #0
   de1b0:	4610      	mov	r0, r2
   de1b2:	bfb4      	ite	lt
   de1b4:	f103 4100 	addlt.w	r1, r3, #2147483648	; 0x80000000
   de1b8:	4619      	movge	r1, r3
   de1ba:	ec41 0b10 	vmov	d0, r0, r1
   de1be:	bdd0      	pop	{r4, r6, r7, pc}
   de1c0:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
   de1c4:	db2f      	blt.n	de226 <tanh+0xb6>
   de1c6:	4a31      	ldr	r2, [pc, #196]	; (de28c <tanh+0x11c>)
   de1c8:	4293      	cmp	r3, r2
   de1ca:	dd38      	ble.n	de23e <tanh+0xce>
   de1cc:	f7ff fea0 	bl	ddf10 <fabs>
   de1d0:	ec53 2b10 	vmov	r2, r3, d0
   de1d4:	ee10 0a10 	vmov	r0, s0
   de1d8:	4619      	mov	r1, r3
   de1da:	f004 feef 	bl	e2fbc <__adddf3>
   de1de:	ec41 0b10 	vmov	d0, r0, r1
   de1e2:	f004 fb49 	bl	e2878 <expm1>
   de1e6:	2200      	movs	r2, #0
   de1e8:	ec51 0b10 	vmov	r0, r1, d0
   de1ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de1f0:	f004 fee4 	bl	e2fbc <__adddf3>
   de1f4:	4602      	mov	r2, r0
   de1f6:	460b      	mov	r3, r1
   de1f8:	2000      	movs	r0, #0
   de1fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   de1fe:	f005 f9b9 	bl	e3574 <__aeabi_ddiv>
   de202:	4602      	mov	r2, r0
   de204:	460b      	mov	r3, r1
   de206:	2000      	movs	r0, #0
   de208:	491e      	ldr	r1, [pc, #120]	; (de284 <tanh+0x114>)
   de20a:	f004 fed5 	bl	e2fb8 <__aeabi_dsub>
   de20e:	4602      	mov	r2, r0
   de210:	460b      	mov	r3, r1
   de212:	e7cc      	b.n	de1ae <tanh+0x3e>
   de214:	f005 f9ae 	bl	e3574 <__aeabi_ddiv>
   de218:	2200      	movs	r2, #0
   de21a:	4b1a      	ldr	r3, [pc, #104]	; (de284 <tanh+0x114>)
   de21c:	f004 fecc 	bl	e2fb8 <__aeabi_dsub>
   de220:	ec41 0b10 	vmov	d0, r0, r1
   de224:	bdd0      	pop	{r4, r6, r7, pc}
   de226:	2200      	movs	r2, #0
   de228:	4b16      	ldr	r3, [pc, #88]	; (de284 <tanh+0x114>)
   de22a:	ee10 0a10 	vmov	r0, s0
   de22e:	4639      	mov	r1, r7
   de230:	f004 fec4 	bl	e2fbc <__adddf3>
   de234:	4632      	mov	r2, r6
   de236:	463b      	mov	r3, r7
   de238:	f005 f872 	bl	e3320 <__aeabi_dmul>
   de23c:	e7af      	b.n	de19e <tanh+0x2e>
   de23e:	f7ff fe67 	bl	ddf10 <fabs>
   de242:	2200      	movs	r2, #0
   de244:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   de248:	ec51 0b10 	vmov	r0, r1, d0
   de24c:	f005 f868 	bl	e3320 <__aeabi_dmul>
   de250:	ec41 0b10 	vmov	d0, r0, r1
   de254:	f004 fb10 	bl	e2878 <expm1>
   de258:	ec51 0b10 	vmov	r0, r1, d0
   de25c:	2200      	movs	r2, #0
   de25e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de262:	ee10 6a10 	vmov	r6, s0
   de266:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   de26a:	f004 fea7 	bl	e2fbc <__adddf3>
   de26e:	4602      	mov	r2, r0
   de270:	460b      	mov	r3, r1
   de272:	4630      	mov	r0, r6
   de274:	4639      	mov	r1, r7
   de276:	f005 f97d 	bl	e3574 <__aeabi_ddiv>
   de27a:	4602      	mov	r2, r0
   de27c:	460b      	mov	r3, r1
   de27e:	e796      	b.n	de1ae <tanh+0x3e>
   de280:	7fefffff 	.word	0x7fefffff
   de284:	3ff00000 	.word	0x3ff00000
   de288:	4035ffff 	.word	0x4035ffff
   de28c:	3fefffff 	.word	0x3fefffff

000de290 <acos>:
   de290:	b530      	push	{r4, r5, lr}
   de292:	ed2d 8b04 	vpush	{d8-d9}
   de296:	eeb0 8a40 	vmov.f32	s16, s0
   de29a:	eef0 8a60 	vmov.f32	s17, s1
   de29e:	4c29      	ldr	r4, [pc, #164]	; (de344 <acos+0xb4>)
   de2a0:	b08b      	sub	sp, #44	; 0x2c
   de2a2:	f000 fd99 	bl	dedd8 <__ieee754_acos>
   de2a6:	f994 3000 	ldrsb.w	r3, [r4]
   de2aa:	eeb0 9a40 	vmov.f32	s18, s0
   de2ae:	eef0 9a60 	vmov.f32	s19, s1
   de2b2:	3301      	adds	r3, #1
   de2b4:	d032      	beq.n	de31c <acos+0x8c>
   de2b6:	ec53 2b18 	vmov	r2, r3, d8
   de2ba:	ec51 0b18 	vmov	r0, r1, d8
   de2be:	f005 fac9 	bl	e3854 <__aeabi_dcmpun>
   de2c2:	4605      	mov	r5, r0
   de2c4:	bb50      	cbnz	r0, de31c <acos+0x8c>
   de2c6:	eeb0 0a48 	vmov.f32	s0, s16
   de2ca:	eef0 0a68 	vmov.f32	s1, s17
   de2ce:	f7ff fe1f 	bl	ddf10 <fabs>
   de2d2:	2200      	movs	r2, #0
   de2d4:	4b1c      	ldr	r3, [pc, #112]	; (de348 <acos+0xb8>)
   de2d6:	ec51 0b10 	vmov	r0, r1, d0
   de2da:	f005 fab1 	bl	e3840 <__aeabi_dcmpgt>
   de2de:	b1e8      	cbz	r0, de31c <acos+0x8c>
   de2e0:	4b1a      	ldr	r3, [pc, #104]	; (de34c <acos+0xbc>)
   de2e2:	481b      	ldr	r0, [pc, #108]	; (de350 <acos+0xc0>)
   de2e4:	9508      	str	r5, [sp, #32]
   de2e6:	2201      	movs	r2, #1
   de2e8:	e88d 000c 	stmia.w	sp, {r2, r3}
   de2ec:	ed8d 8b04 	vstr	d8, [sp, #16]
   de2f0:	ed8d 8b02 	vstr	d8, [sp, #8]
   de2f4:	f004 fd2c 	bl	e2d50 <nan>
   de2f8:	f994 3000 	ldrsb.w	r3, [r4]
   de2fc:	2b02      	cmp	r3, #2
   de2fe:	ed8d 0b06 	vstr	d0, [sp, #24]
   de302:	d013      	beq.n	de32c <acos+0x9c>
   de304:	4668      	mov	r0, sp
   de306:	f004 fd21 	bl	e2d4c <matherr>
   de30a:	b178      	cbz	r0, de32c <acos+0x9c>
   de30c:	9b08      	ldr	r3, [sp, #32]
   de30e:	b9a3      	cbnz	r3, de33a <acos+0xaa>
   de310:	ed9d 0b06 	vldr	d0, [sp, #24]
   de314:	b00b      	add	sp, #44	; 0x2c
   de316:	ecbd 8b04 	vpop	{d8-d9}
   de31a:	bd30      	pop	{r4, r5, pc}
   de31c:	eeb0 0a49 	vmov.f32	s0, s18
   de320:	eef0 0a69 	vmov.f32	s1, s19
   de324:	b00b      	add	sp, #44	; 0x2c
   de326:	ecbd 8b04 	vpop	{d8-d9}
   de32a:	bd30      	pop	{r4, r5, pc}
   de32c:	f7fc fe5a 	bl	dafe4 <__errno>
   de330:	2321      	movs	r3, #33	; 0x21
   de332:	6003      	str	r3, [r0, #0]
   de334:	9b08      	ldr	r3, [sp, #32]
   de336:	2b00      	cmp	r3, #0
   de338:	d0ea      	beq.n	de310 <acos+0x80>
   de33a:	f7fc fe53 	bl	dafe4 <__errno>
   de33e:	9b08      	ldr	r3, [sp, #32]
   de340:	6003      	str	r3, [r0, #0]
   de342:	e7e5      	b.n	de310 <acos+0x80>
   de344:	2003d6c0 	.word	0x2003d6c0
   de348:	3ff00000 	.word	0x3ff00000
   de34c:	000e8b18 	.word	0x000e8b18
   de350:	000e8b38 	.word	0x000e8b38

000de354 <asin>:
   de354:	b530      	push	{r4, r5, lr}
   de356:	ed2d 8b04 	vpush	{d8-d9}
   de35a:	eeb0 8a40 	vmov.f32	s16, s0
   de35e:	eef0 8a60 	vmov.f32	s17, s1
   de362:	4c29      	ldr	r4, [pc, #164]	; (de408 <asin+0xb4>)
   de364:	b08b      	sub	sp, #44	; 0x2c
   de366:	f000 ffa7 	bl	df2b8 <__ieee754_asin>
   de36a:	f994 3000 	ldrsb.w	r3, [r4]
   de36e:	eeb0 9a40 	vmov.f32	s18, s0
   de372:	eef0 9a60 	vmov.f32	s19, s1
   de376:	3301      	adds	r3, #1
   de378:	d032      	beq.n	de3e0 <asin+0x8c>
   de37a:	ec53 2b18 	vmov	r2, r3, d8
   de37e:	ec51 0b18 	vmov	r0, r1, d8
   de382:	f005 fa67 	bl	e3854 <__aeabi_dcmpun>
   de386:	4605      	mov	r5, r0
   de388:	bb50      	cbnz	r0, de3e0 <asin+0x8c>
   de38a:	eeb0 0a48 	vmov.f32	s0, s16
   de38e:	eef0 0a68 	vmov.f32	s1, s17
   de392:	f7ff fdbd 	bl	ddf10 <fabs>
   de396:	2200      	movs	r2, #0
   de398:	4b1c      	ldr	r3, [pc, #112]	; (de40c <asin+0xb8>)
   de39a:	ec51 0b10 	vmov	r0, r1, d0
   de39e:	f005 fa4f 	bl	e3840 <__aeabi_dcmpgt>
   de3a2:	b1e8      	cbz	r0, de3e0 <asin+0x8c>
   de3a4:	4b1a      	ldr	r3, [pc, #104]	; (de410 <asin+0xbc>)
   de3a6:	481b      	ldr	r0, [pc, #108]	; (de414 <asin+0xc0>)
   de3a8:	9508      	str	r5, [sp, #32]
   de3aa:	2201      	movs	r2, #1
   de3ac:	e88d 000c 	stmia.w	sp, {r2, r3}
   de3b0:	ed8d 8b04 	vstr	d8, [sp, #16]
   de3b4:	ed8d 8b02 	vstr	d8, [sp, #8]
   de3b8:	f004 fcca 	bl	e2d50 <nan>
   de3bc:	f994 3000 	ldrsb.w	r3, [r4]
   de3c0:	2b02      	cmp	r3, #2
   de3c2:	ed8d 0b06 	vstr	d0, [sp, #24]
   de3c6:	d013      	beq.n	de3f0 <asin+0x9c>
   de3c8:	4668      	mov	r0, sp
   de3ca:	f004 fcbf 	bl	e2d4c <matherr>
   de3ce:	b178      	cbz	r0, de3f0 <asin+0x9c>
   de3d0:	9b08      	ldr	r3, [sp, #32]
   de3d2:	b9a3      	cbnz	r3, de3fe <asin+0xaa>
   de3d4:	ed9d 0b06 	vldr	d0, [sp, #24]
   de3d8:	b00b      	add	sp, #44	; 0x2c
   de3da:	ecbd 8b04 	vpop	{d8-d9}
   de3de:	bd30      	pop	{r4, r5, pc}
   de3e0:	eeb0 0a49 	vmov.f32	s0, s18
   de3e4:	eef0 0a69 	vmov.f32	s1, s19
   de3e8:	b00b      	add	sp, #44	; 0x2c
   de3ea:	ecbd 8b04 	vpop	{d8-d9}
   de3ee:	bd30      	pop	{r4, r5, pc}
   de3f0:	f7fc fdf8 	bl	dafe4 <__errno>
   de3f4:	2321      	movs	r3, #33	; 0x21
   de3f6:	6003      	str	r3, [r0, #0]
   de3f8:	9b08      	ldr	r3, [sp, #32]
   de3fa:	2b00      	cmp	r3, #0
   de3fc:	d0ea      	beq.n	de3d4 <asin+0x80>
   de3fe:	f7fc fdf1 	bl	dafe4 <__errno>
   de402:	9b08      	ldr	r3, [sp, #32]
   de404:	6003      	str	r3, [r0, #0]
   de406:	e7e5      	b.n	de3d4 <asin+0x80>
   de408:	2003d6c0 	.word	0x2003d6c0
   de40c:	3ff00000 	.word	0x3ff00000
   de410:	000e8b20 	.word	0x000e8b20
   de414:	000e8b38 	.word	0x000e8b38

000de418 <atan2>:
   de418:	f001 b99e 	b.w	df758 <__ieee754_atan2>
   de41c:	0000      	movs	r0, r0
	...

000de420 <cosh>:
   de420:	b530      	push	{r4, r5, lr}
   de422:	ed2d 8b04 	vpush	{d8-d9}
   de426:	eeb0 8a40 	vmov.f32	s16, s0
   de42a:	eef0 8a60 	vmov.f32	s17, s1
   de42e:	4c2e      	ldr	r4, [pc, #184]	; (de4e8 <cosh+0xc8>)
   de430:	b08b      	sub	sp, #44	; 0x2c
   de432:	f001 fa89 	bl	df948 <__ieee754_cosh>
   de436:	f994 3000 	ldrsb.w	r3, [r4]
   de43a:	eeb0 9a40 	vmov.f32	s18, s0
   de43e:	eef0 9a60 	vmov.f32	s19, s1
   de442:	3301      	adds	r3, #1
   de444:	d032      	beq.n	de4ac <cosh+0x8c>
   de446:	ec53 2b18 	vmov	r2, r3, d8
   de44a:	ec51 0b18 	vmov	r0, r1, d8
   de44e:	f005 fa01 	bl	e3854 <__aeabi_dcmpun>
   de452:	4605      	mov	r5, r0
   de454:	bb50      	cbnz	r0, de4ac <cosh+0x8c>
   de456:	eeb0 0a48 	vmov.f32	s0, s16
   de45a:	eef0 0a68 	vmov.f32	s1, s17
   de45e:	f7ff fd57 	bl	ddf10 <fabs>
   de462:	a31f      	add	r3, pc, #124	; (adr r3, de4e0 <cosh+0xc0>)
   de464:	e9d3 2300 	ldrd	r2, r3, [r3]
   de468:	ec51 0b10 	vmov	r0, r1, d0
   de46c:	f005 f9e8 	bl	e3840 <__aeabi_dcmpgt>
   de470:	b1e0      	cbz	r0, de4ac <cosh+0x8c>
   de472:	4a1e      	ldr	r2, [pc, #120]	; (de4ec <cosh+0xcc>)
   de474:	f994 3000 	ldrsb.w	r3, [r4]
   de478:	9508      	str	r5, [sp, #32]
   de47a:	2103      	movs	r1, #3
   de47c:	ed8d 8b04 	vstr	d8, [sp, #16]
   de480:	ed8d 8b02 	vstr	d8, [sp, #8]
   de484:	e88d 0006 	stmia.w	sp, {r1, r2}
   de488:	b9c3      	cbnz	r3, de4bc <cosh+0x9c>
   de48a:	4b19      	ldr	r3, [pc, #100]	; (de4f0 <cosh+0xd0>)
   de48c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de490:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de494:	4668      	mov	r0, sp
   de496:	f004 fc59 	bl	e2d4c <matherr>
   de49a:	b1a8      	cbz	r0, de4c8 <cosh+0xa8>
   de49c:	9b08      	ldr	r3, [sp, #32]
   de49e:	b9d3      	cbnz	r3, de4d6 <cosh+0xb6>
   de4a0:	ed9d 0b06 	vldr	d0, [sp, #24]
   de4a4:	b00b      	add	sp, #44	; 0x2c
   de4a6:	ecbd 8b04 	vpop	{d8-d9}
   de4aa:	bd30      	pop	{r4, r5, pc}
   de4ac:	eeb0 0a49 	vmov.f32	s0, s18
   de4b0:	eef0 0a69 	vmov.f32	s1, s19
   de4b4:	b00b      	add	sp, #44	; 0x2c
   de4b6:	ecbd 8b04 	vpop	{d8-d9}
   de4ba:	bd30      	pop	{r4, r5, pc}
   de4bc:	490d      	ldr	r1, [pc, #52]	; (de4f4 <cosh+0xd4>)
   de4be:	2000      	movs	r0, #0
   de4c0:	2b02      	cmp	r3, #2
   de4c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de4c6:	d1e5      	bne.n	de494 <cosh+0x74>
   de4c8:	f7fc fd8c 	bl	dafe4 <__errno>
   de4cc:	2322      	movs	r3, #34	; 0x22
   de4ce:	6003      	str	r3, [r0, #0]
   de4d0:	9b08      	ldr	r3, [sp, #32]
   de4d2:	2b00      	cmp	r3, #0
   de4d4:	d0e4      	beq.n	de4a0 <cosh+0x80>
   de4d6:	f7fc fd85 	bl	dafe4 <__errno>
   de4da:	9b08      	ldr	r3, [sp, #32]
   de4dc:	6003      	str	r3, [r0, #0]
   de4de:	e7df      	b.n	de4a0 <cosh+0x80>
   de4e0:	8fb9f87d 	.word	0x8fb9f87d
   de4e4:	408633ce 	.word	0x408633ce
   de4e8:	2003d6c0 	.word	0x2003d6c0
   de4ec:	000e8b28 	.word	0x000e8b28
   de4f0:	47efffff 	.word	0x47efffff
   de4f4:	7ff00000 	.word	0x7ff00000

000de4f8 <exp>:
   de4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   de4fa:	ed2d 8b04 	vpush	{d8-d9}
   de4fe:	eeb0 9a40 	vmov.f32	s18, s0
   de502:	eef0 9a60 	vmov.f32	s19, s1
   de506:	4c3a      	ldr	r4, [pc, #232]	; (de5f0 <exp+0xf8>)
   de508:	b08b      	sub	sp, #44	; 0x2c
   de50a:	f001 fad9 	bl	dfac0 <__ieee754_exp>
   de50e:	f994 3000 	ldrsb.w	r3, [r4]
   de512:	eeb0 8a40 	vmov.f32	s16, s0
   de516:	eef0 8a60 	vmov.f32	s17, s1
   de51a:	3301      	adds	r3, #1
   de51c:	d038      	beq.n	de590 <exp+0x98>
   de51e:	eeb0 0a49 	vmov.f32	s0, s18
   de522:	eef0 0a69 	vmov.f32	s1, s19
   de526:	f004 fc09 	bl	e2d3c <finite>
   de52a:	b388      	cbz	r0, de590 <exp+0x98>
   de52c:	a32c      	add	r3, pc, #176	; (adr r3, de5e0 <exp+0xe8>)
   de52e:	e9d3 2300 	ldrd	r2, r3, [r3]
   de532:	ec51 0b19 	vmov	r0, r1, d9
   de536:	f005 f983 	bl	e3840 <__aeabi_dcmpgt>
   de53a:	4605      	mov	r5, r0
   de53c:	bb80      	cbnz	r0, de5a0 <exp+0xa8>
   de53e:	a32a      	add	r3, pc, #168	; (adr r3, de5e8 <exp+0xf0>)
   de540:	e9d3 2300 	ldrd	r2, r3, [r3]
   de544:	ec51 0b19 	vmov	r0, r1, d9
   de548:	f005 f95c 	bl	e3804 <__aeabi_dcmplt>
   de54c:	b300      	cbz	r0, de590 <exp+0x98>
   de54e:	f994 3000 	ldrsb.w	r3, [r4]
   de552:	4a28      	ldr	r2, [pc, #160]	; (de5f4 <exp+0xfc>)
   de554:	9508      	str	r5, [sp, #32]
   de556:	2600      	movs	r6, #0
   de558:	2700      	movs	r7, #0
   de55a:	2104      	movs	r1, #4
   de55c:	2b02      	cmp	r3, #2
   de55e:	ed8d 9b04 	vstr	d9, [sp, #16]
   de562:	ed8d 9b02 	vstr	d9, [sp, #8]
   de566:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de56a:	e88d 0006 	stmia.w	sp, {r1, r2}
   de56e:	d030      	beq.n	de5d2 <exp+0xda>
   de570:	4668      	mov	r0, sp
   de572:	f004 fbeb 	bl	e2d4c <matherr>
   de576:	b360      	cbz	r0, de5d2 <exp+0xda>
   de578:	9b08      	ldr	r3, [sp, #32]
   de57a:	b11b      	cbz	r3, de584 <exp+0x8c>
   de57c:	f7fc fd32 	bl	dafe4 <__errno>
   de580:	9b08      	ldr	r3, [sp, #32]
   de582:	6003      	str	r3, [r0, #0]
   de584:	ed9d 0b06 	vldr	d0, [sp, #24]
   de588:	b00b      	add	sp, #44	; 0x2c
   de58a:	ecbd 8b04 	vpop	{d8-d9}
   de58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de590:	eeb0 0a48 	vmov.f32	s0, s16
   de594:	eef0 0a68 	vmov.f32	s1, s17
   de598:	b00b      	add	sp, #44	; 0x2c
   de59a:	ecbd 8b04 	vpop	{d8-d9}
   de59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de5a0:	4a14      	ldr	r2, [pc, #80]	; (de5f4 <exp+0xfc>)
   de5a2:	f994 3000 	ldrsb.w	r3, [r4]
   de5a6:	9201      	str	r2, [sp, #4]
   de5a8:	2103      	movs	r1, #3
   de5aa:	2200      	movs	r2, #0
   de5ac:	ed8d 9b04 	vstr	d9, [sp, #16]
   de5b0:	ed8d 9b02 	vstr	d9, [sp, #8]
   de5b4:	9100      	str	r1, [sp, #0]
   de5b6:	9208      	str	r2, [sp, #32]
   de5b8:	b92b      	cbnz	r3, de5c6 <exp+0xce>
   de5ba:	4b0f      	ldr	r3, [pc, #60]	; (de5f8 <exp+0x100>)
   de5bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   de5c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   de5c4:	e7d4      	b.n	de570 <exp+0x78>
   de5c6:	490d      	ldr	r1, [pc, #52]	; (de5fc <exp+0x104>)
   de5c8:	2000      	movs	r0, #0
   de5ca:	2b02      	cmp	r3, #2
   de5cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de5d0:	d1ce      	bne.n	de570 <exp+0x78>
   de5d2:	f7fc fd07 	bl	dafe4 <__errno>
   de5d6:	2322      	movs	r3, #34	; 0x22
   de5d8:	6003      	str	r3, [r0, #0]
   de5da:	e7cd      	b.n	de578 <exp+0x80>
   de5dc:	f3af 8000 	nop.w
   de5e0:	fefa39ef 	.word	0xfefa39ef
   de5e4:	40862e42 	.word	0x40862e42
   de5e8:	d52d3051 	.word	0xd52d3051
   de5ec:	c0874910 	.word	0xc0874910
   de5f0:	2003d6c0 	.word	0x2003d6c0
   de5f4:	000e8b30 	.word	0x000e8b30
   de5f8:	47efffff 	.word	0x47efffff
   de5fc:	7ff00000 	.word	0x7ff00000

000de600 <fmod>:
   de600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de604:	ed2d 8b02 	vpush	{d8}
   de608:	b08b      	sub	sp, #44	; 0x2c
   de60a:	ec57 6b10 	vmov	r6, r7, d0
   de60e:	ec55 4b11 	vmov	r4, r5, d1
   de612:	f001 fbe7 	bl	dfde4 <__ieee754_fmod>
   de616:	4b2e      	ldr	r3, [pc, #184]	; (de6d0 <fmod+0xd0>)
   de618:	eeb0 8a40 	vmov.f32	s16, s0
   de61c:	eef0 8a60 	vmov.f32	s17, s1
   de620:	f993 8000 	ldrsb.w	r8, [r3]
   de624:	f1b8 3fff 	cmp.w	r8, #4294967295
   de628:	d031      	beq.n	de68e <fmod+0x8e>
   de62a:	4622      	mov	r2, r4
   de62c:	462b      	mov	r3, r5
   de62e:	4620      	mov	r0, r4
   de630:	4629      	mov	r1, r5
   de632:	f005 f90f 	bl	e3854 <__aeabi_dcmpun>
   de636:	bb50      	cbnz	r0, de68e <fmod+0x8e>
   de638:	4632      	mov	r2, r6
   de63a:	463b      	mov	r3, r7
   de63c:	4630      	mov	r0, r6
   de63e:	4639      	mov	r1, r7
   de640:	f005 f908 	bl	e3854 <__aeabi_dcmpun>
   de644:	4681      	mov	r9, r0
   de646:	bb10      	cbnz	r0, de68e <fmod+0x8e>
   de648:	2200      	movs	r2, #0
   de64a:	2300      	movs	r3, #0
   de64c:	4620      	mov	r0, r4
   de64e:	4629      	mov	r1, r5
   de650:	f005 f8ce 	bl	e37f0 <__aeabi_dcmpeq>
   de654:	b1d8      	cbz	r0, de68e <fmod+0x8e>
   de656:	4b1f      	ldr	r3, [pc, #124]	; (de6d4 <fmod+0xd4>)
   de658:	f8cd 9020 	str.w	r9, [sp, #32]
   de65c:	2201      	movs	r2, #1
   de65e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de662:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de666:	e88d 000c 	stmia.w	sp, {r2, r3}
   de66a:	f1b8 0f00 	cmp.w	r8, #0
   de66e:	d117      	bne.n	de6a0 <fmod+0xa0>
   de670:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de674:	4668      	mov	r0, sp
   de676:	f004 fb69 	bl	e2d4c <matherr>
   de67a:	b1e0      	cbz	r0, de6b6 <fmod+0xb6>
   de67c:	9b08      	ldr	r3, [sp, #32]
   de67e:	bb0b      	cbnz	r3, de6c4 <fmod+0xc4>
   de680:	ed9d 0b06 	vldr	d0, [sp, #24]
   de684:	b00b      	add	sp, #44	; 0x2c
   de686:	ecbd 8b02 	vpop	{d8}
   de68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de68e:	eeb0 0a48 	vmov.f32	s0, s16
   de692:	eef0 0a68 	vmov.f32	s1, s17
   de696:	b00b      	add	sp, #44	; 0x2c
   de698:	ecbd 8b02 	vpop	{d8}
   de69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de6a0:	2200      	movs	r2, #0
   de6a2:	2300      	movs	r3, #0
   de6a4:	4610      	mov	r0, r2
   de6a6:	4619      	mov	r1, r3
   de6a8:	f004 ff64 	bl	e3574 <__aeabi_ddiv>
   de6ac:	f1b8 0f02 	cmp.w	r8, #2
   de6b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   de6b4:	d1de      	bne.n	de674 <fmod+0x74>
   de6b6:	f7fc fc95 	bl	dafe4 <__errno>
   de6ba:	2321      	movs	r3, #33	; 0x21
   de6bc:	6003      	str	r3, [r0, #0]
   de6be:	9b08      	ldr	r3, [sp, #32]
   de6c0:	2b00      	cmp	r3, #0
   de6c2:	d0dd      	beq.n	de680 <fmod+0x80>
   de6c4:	f7fc fc8e 	bl	dafe4 <__errno>
   de6c8:	9b08      	ldr	r3, [sp, #32]
   de6ca:	6003      	str	r3, [r0, #0]
   de6cc:	e7d8      	b.n	de680 <fmod+0x80>
   de6ce:	bf00      	nop
   de6d0:	2003d6c0 	.word	0x2003d6c0
   de6d4:	000e8b34 	.word	0x000e8b34

000de6d8 <log>:
   de6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de6dc:	ed2d 8b02 	vpush	{d8}
   de6e0:	b08b      	sub	sp, #44	; 0x2c
   de6e2:	ec55 4b10 	vmov	r4, r5, d0
   de6e6:	f001 fcb7 	bl	e0058 <__ieee754_log>
   de6ea:	4b3a      	ldr	r3, [pc, #232]	; (de7d4 <log+0xfc>)
   de6ec:	eeb0 8a40 	vmov.f32	s16, s0
   de6f0:	eef0 8a60 	vmov.f32	s17, s1
   de6f4:	f993 6000 	ldrsb.w	r6, [r3]
   de6f8:	1c73      	adds	r3, r6, #1
   de6fa:	d00d      	beq.n	de718 <log+0x40>
   de6fc:	4622      	mov	r2, r4
   de6fe:	462b      	mov	r3, r5
   de700:	4620      	mov	r0, r4
   de702:	4629      	mov	r1, r5
   de704:	f005 f8a6 	bl	e3854 <__aeabi_dcmpun>
   de708:	b930      	cbnz	r0, de718 <log+0x40>
   de70a:	2200      	movs	r2, #0
   de70c:	2300      	movs	r3, #0
   de70e:	4620      	mov	r0, r4
   de710:	4629      	mov	r1, r5
   de712:	f005 f895 	bl	e3840 <__aeabi_dcmpgt>
   de716:	b140      	cbz	r0, de72a <log+0x52>
   de718:	eeb0 0a48 	vmov.f32	s0, s16
   de71c:	eef0 0a68 	vmov.f32	s1, s17
   de720:	b00b      	add	sp, #44	; 0x2c
   de722:	ecbd 8b02 	vpop	{d8}
   de726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de72a:	4b2b      	ldr	r3, [pc, #172]	; (de7d8 <log+0x100>)
   de72c:	9008      	str	r0, [sp, #32]
   de72e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de732:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de736:	9301      	str	r3, [sp, #4]
   de738:	b9de      	cbnz	r6, de772 <log+0x9a>
   de73a:	4f28      	ldr	r7, [pc, #160]	; (de7dc <log+0x104>)
   de73c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de740:	4620      	mov	r0, r4
   de742:	4629      	mov	r1, r5
   de744:	2200      	movs	r2, #0
   de746:	2300      	movs	r3, #0
   de748:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de74c:	f005 f850 	bl	e37f0 <__aeabi_dcmpeq>
   de750:	2800      	cmp	r0, #0
   de752:	d037      	beq.n	de7c4 <log+0xec>
   de754:	2302      	movs	r3, #2
   de756:	9300      	str	r3, [sp, #0]
   de758:	4668      	mov	r0, sp
   de75a:	f004 faf7 	bl	e2d4c <matherr>
   de75e:	b1c8      	cbz	r0, de794 <log+0xbc>
   de760:	9b08      	ldr	r3, [sp, #32]
   de762:	b9e3      	cbnz	r3, de79e <log+0xc6>
   de764:	ed9d 0b06 	vldr	d0, [sp, #24]
   de768:	b00b      	add	sp, #44	; 0x2c
   de76a:	ecbd 8b02 	vpop	{d8}
   de76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de772:	f8df 9070 	ldr.w	r9, [pc, #112]	; de7e4 <log+0x10c>
   de776:	f04f 0800 	mov.w	r8, #0
   de77a:	4620      	mov	r0, r4
   de77c:	4629      	mov	r1, r5
   de77e:	2200      	movs	r2, #0
   de780:	2300      	movs	r3, #0
   de782:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de786:	f005 f833 	bl	e37f0 <__aeabi_dcmpeq>
   de78a:	b168      	cbz	r0, de7a8 <log+0xd0>
   de78c:	2302      	movs	r3, #2
   de78e:	429e      	cmp	r6, r3
   de790:	9300      	str	r3, [sp, #0]
   de792:	d1e1      	bne.n	de758 <log+0x80>
   de794:	f7fc fc26 	bl	dafe4 <__errno>
   de798:	2322      	movs	r3, #34	; 0x22
   de79a:	6003      	str	r3, [r0, #0]
   de79c:	e7e0      	b.n	de760 <log+0x88>
   de79e:	f7fc fc21 	bl	dafe4 <__errno>
   de7a2:	9b08      	ldr	r3, [sp, #32]
   de7a4:	6003      	str	r3, [r0, #0]
   de7a6:	e7dd      	b.n	de764 <log+0x8c>
   de7a8:	2301      	movs	r3, #1
   de7aa:	2e02      	cmp	r6, #2
   de7ac:	9300      	str	r3, [sp, #0]
   de7ae:	d10b      	bne.n	de7c8 <log+0xf0>
   de7b0:	f7fc fc18 	bl	dafe4 <__errno>
   de7b4:	2321      	movs	r3, #33	; 0x21
   de7b6:	6003      	str	r3, [r0, #0]
   de7b8:	4809      	ldr	r0, [pc, #36]	; (de7e0 <log+0x108>)
   de7ba:	f004 fac9 	bl	e2d50 <nan>
   de7be:	ed8d 0b06 	vstr	d0, [sp, #24]
   de7c2:	e7cd      	b.n	de760 <log+0x88>
   de7c4:	2301      	movs	r3, #1
   de7c6:	9300      	str	r3, [sp, #0]
   de7c8:	4668      	mov	r0, sp
   de7ca:	f004 fabf 	bl	e2d4c <matherr>
   de7ce:	2800      	cmp	r0, #0
   de7d0:	d1f2      	bne.n	de7b8 <log+0xe0>
   de7d2:	e7ed      	b.n	de7b0 <log+0xd8>
   de7d4:	2003d6c0 	.word	0x2003d6c0
   de7d8:	000e8b3c 	.word	0x000e8b3c
   de7dc:	c7efffff 	.word	0xc7efffff
   de7e0:	000e8b38 	.word	0x000e8b38
   de7e4:	fff00000 	.word	0xfff00000

000de7e8 <log10>:
   de7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   de7ec:	ed2d 8b02 	vpush	{d8}
   de7f0:	b08b      	sub	sp, #44	; 0x2c
   de7f2:	ec55 4b10 	vmov	r4, r5, d0
   de7f6:	f001 fe33 	bl	e0460 <__ieee754_log10>
   de7fa:	4b3b      	ldr	r3, [pc, #236]	; (de8e8 <log10+0x100>)
   de7fc:	eeb0 8a40 	vmov.f32	s16, s0
   de800:	eef0 8a60 	vmov.f32	s17, s1
   de804:	f993 6000 	ldrsb.w	r6, [r3]
   de808:	1c73      	adds	r3, r6, #1
   de80a:	d00e      	beq.n	de82a <log10+0x42>
   de80c:	4622      	mov	r2, r4
   de80e:	462b      	mov	r3, r5
   de810:	4620      	mov	r0, r4
   de812:	4629      	mov	r1, r5
   de814:	f005 f81e 	bl	e3854 <__aeabi_dcmpun>
   de818:	4607      	mov	r7, r0
   de81a:	b930      	cbnz	r0, de82a <log10+0x42>
   de81c:	2200      	movs	r2, #0
   de81e:	2300      	movs	r3, #0
   de820:	4620      	mov	r0, r4
   de822:	4629      	mov	r1, r5
   de824:	f004 fff8 	bl	e3818 <__aeabi_dcmple>
   de828:	b940      	cbnz	r0, de83c <log10+0x54>
   de82a:	eeb0 0a48 	vmov.f32	s0, s16
   de82e:	eef0 0a68 	vmov.f32	s1, s17
   de832:	b00b      	add	sp, #44	; 0x2c
   de834:	ecbd 8b02 	vpop	{d8}
   de838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de83c:	4b2b      	ldr	r3, [pc, #172]	; (de8ec <log10+0x104>)
   de83e:	9708      	str	r7, [sp, #32]
   de840:	e9cd 4502 	strd	r4, r5, [sp, #8]
   de844:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de848:	9301      	str	r3, [sp, #4]
   de84a:	b9de      	cbnz	r6, de884 <log10+0x9c>
   de84c:	4f28      	ldr	r7, [pc, #160]	; (de8f0 <log10+0x108>)
   de84e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   de852:	4620      	mov	r0, r4
   de854:	4629      	mov	r1, r5
   de856:	2200      	movs	r2, #0
   de858:	2300      	movs	r3, #0
   de85a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   de85e:	f004 ffc7 	bl	e37f0 <__aeabi_dcmpeq>
   de862:	2800      	cmp	r0, #0
   de864:	d037      	beq.n	de8d6 <log10+0xee>
   de866:	2302      	movs	r3, #2
   de868:	9300      	str	r3, [sp, #0]
   de86a:	4668      	mov	r0, sp
   de86c:	f004 fa6e 	bl	e2d4c <matherr>
   de870:	b1c8      	cbz	r0, de8a6 <log10+0xbe>
   de872:	9b08      	ldr	r3, [sp, #32]
   de874:	b9e3      	cbnz	r3, de8b0 <log10+0xc8>
   de876:	ed9d 0b06 	vldr	d0, [sp, #24]
   de87a:	b00b      	add	sp, #44	; 0x2c
   de87c:	ecbd 8b02 	vpop	{d8}
   de880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de884:	f8df 9070 	ldr.w	r9, [pc, #112]	; de8f8 <log10+0x110>
   de888:	f04f 0800 	mov.w	r8, #0
   de88c:	4620      	mov	r0, r4
   de88e:	4629      	mov	r1, r5
   de890:	2200      	movs	r2, #0
   de892:	2300      	movs	r3, #0
   de894:	e9cd 8906 	strd	r8, r9, [sp, #24]
   de898:	f004 ffaa 	bl	e37f0 <__aeabi_dcmpeq>
   de89c:	b168      	cbz	r0, de8ba <log10+0xd2>
   de89e:	2302      	movs	r3, #2
   de8a0:	429e      	cmp	r6, r3
   de8a2:	9300      	str	r3, [sp, #0]
   de8a4:	d1e1      	bne.n	de86a <log10+0x82>
   de8a6:	f7fc fb9d 	bl	dafe4 <__errno>
   de8aa:	2322      	movs	r3, #34	; 0x22
   de8ac:	6003      	str	r3, [r0, #0]
   de8ae:	e7e0      	b.n	de872 <log10+0x8a>
   de8b0:	f7fc fb98 	bl	dafe4 <__errno>
   de8b4:	9b08      	ldr	r3, [sp, #32]
   de8b6:	6003      	str	r3, [r0, #0]
   de8b8:	e7dd      	b.n	de876 <log10+0x8e>
   de8ba:	2301      	movs	r3, #1
   de8bc:	2e02      	cmp	r6, #2
   de8be:	9300      	str	r3, [sp, #0]
   de8c0:	d10b      	bne.n	de8da <log10+0xf2>
   de8c2:	f7fc fb8f 	bl	dafe4 <__errno>
   de8c6:	2321      	movs	r3, #33	; 0x21
   de8c8:	6003      	str	r3, [r0, #0]
   de8ca:	480a      	ldr	r0, [pc, #40]	; (de8f4 <log10+0x10c>)
   de8cc:	f004 fa40 	bl	e2d50 <nan>
   de8d0:	ed8d 0b06 	vstr	d0, [sp, #24]
   de8d4:	e7cd      	b.n	de872 <log10+0x8a>
   de8d6:	2301      	movs	r3, #1
   de8d8:	9300      	str	r3, [sp, #0]
   de8da:	4668      	mov	r0, sp
   de8dc:	f004 fa36 	bl	e2d4c <matherr>
   de8e0:	2800      	cmp	r0, #0
   de8e2:	d1f2      	bne.n	de8ca <log10+0xe2>
   de8e4:	e7ed      	b.n	de8c2 <log10+0xda>
   de8e6:	bf00      	nop
   de8e8:	2003d6c0 	.word	0x2003d6c0
   de8ec:	000e8b40 	.word	0x000e8b40
   de8f0:	c7efffff 	.word	0xc7efffff
   de8f4:	000e8b38 	.word	0x000e8b38
   de8f8:	fff00000 	.word	0xfff00000
   de8fc:	00000000 	.word	0x00000000

000de900 <pow>:
   de900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de904:	ed2d 8b02 	vpush	{d8}
   de908:	f8df a324 	ldr.w	sl, [pc, #804]	; dec30 <pow+0x330>
   de90c:	b08b      	sub	sp, #44	; 0x2c
   de90e:	ec57 6b10 	vmov	r6, r7, d0
   de912:	ec55 4b11 	vmov	r4, r5, d1
   de916:	f001 fe47 	bl	e05a8 <__ieee754_pow>
   de91a:	f99a 8000 	ldrsb.w	r8, [sl]
   de91e:	eeb0 8a40 	vmov.f32	s16, s0
   de922:	eef0 8a60 	vmov.f32	s17, s1
   de926:	f1b8 3fff 	cmp.w	r8, #4294967295
   de92a:	d048      	beq.n	de9be <pow+0xbe>
   de92c:	4622      	mov	r2, r4
   de92e:	462b      	mov	r3, r5
   de930:	4620      	mov	r0, r4
   de932:	4629      	mov	r1, r5
   de934:	f004 ff8e 	bl	e3854 <__aeabi_dcmpun>
   de938:	4683      	mov	fp, r0
   de93a:	2800      	cmp	r0, #0
   de93c:	d13f      	bne.n	de9be <pow+0xbe>
   de93e:	4632      	mov	r2, r6
   de940:	463b      	mov	r3, r7
   de942:	4630      	mov	r0, r6
   de944:	4639      	mov	r1, r7
   de946:	f004 ff85 	bl	e3854 <__aeabi_dcmpun>
   de94a:	4681      	mov	r9, r0
   de94c:	2800      	cmp	r0, #0
   de94e:	f040 8090 	bne.w	dea72 <pow+0x172>
   de952:	4630      	mov	r0, r6
   de954:	4639      	mov	r1, r7
   de956:	2200      	movs	r2, #0
   de958:	2300      	movs	r3, #0
   de95a:	f004 ff49 	bl	e37f0 <__aeabi_dcmpeq>
   de95e:	2800      	cmp	r0, #0
   de960:	d036      	beq.n	de9d0 <pow+0xd0>
   de962:	2200      	movs	r2, #0
   de964:	2300      	movs	r3, #0
   de966:	4620      	mov	r0, r4
   de968:	4629      	mov	r1, r5
   de96a:	f004 ff41 	bl	e37f0 <__aeabi_dcmpeq>
   de96e:	4683      	mov	fp, r0
   de970:	b1b8      	cbz	r0, de9a2 <pow+0xa2>
   de972:	ed9f 7ba5 	vldr	d7, [pc, #660]	; dec08 <pow+0x308>
   de976:	2201      	movs	r2, #1
   de978:	4ba9      	ldr	r3, [pc, #676]	; (dec20 <pow+0x320>)
   de97a:	f8cd 9020 	str.w	r9, [sp, #32]
   de97e:	9200      	str	r2, [sp, #0]
   de980:	e9cd 6702 	strd	r6, r7, [sp, #8]
   de984:	e9cd 4504 	strd	r4, r5, [sp, #16]
   de988:	ed8d 7b06 	vstr	d7, [sp, #24]
   de98c:	9301      	str	r3, [sp, #4]
   de98e:	f1b8 0f00 	cmp.w	r8, #0
   de992:	d05b      	beq.n	dea4c <pow+0x14c>
   de994:	ed9f 0b9e 	vldr	d0, [pc, #632]	; dec10 <pow+0x310>
   de998:	b00b      	add	sp, #44	; 0x2c
   de99a:	ecbd 8b02 	vpop	{d8}
   de99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9a2:	ec45 4b10 	vmov	d0, r4, r5
   de9a6:	f004 f9c9 	bl	e2d3c <finite>
   de9aa:	b140      	cbz	r0, de9be <pow+0xbe>
   de9ac:	2200      	movs	r2, #0
   de9ae:	2300      	movs	r3, #0
   de9b0:	4620      	mov	r0, r4
   de9b2:	4629      	mov	r1, r5
   de9b4:	f004 ff26 	bl	e3804 <__aeabi_dcmplt>
   de9b8:	2800      	cmp	r0, #0
   de9ba:	f040 80c5 	bne.w	deb48 <pow+0x248>
   de9be:	eeb0 0a48 	vmov.f32	s0, s16
   de9c2:	eef0 0a68 	vmov.f32	s1, s17
   de9c6:	b00b      	add	sp, #44	; 0x2c
   de9c8:	ecbd 8b02 	vpop	{d8}
   de9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de9d0:	eeb0 0a48 	vmov.f32	s0, s16
   de9d4:	eef0 0a68 	vmov.f32	s1, s17
   de9d8:	f004 f9b0 	bl	e2d3c <finite>
   de9dc:	4680      	mov	r8, r0
   de9de:	2800      	cmp	r0, #0
   de9e0:	d061      	beq.n	deaa6 <pow+0x1a6>
   de9e2:	f04f 0800 	mov.w	r8, #0
   de9e6:	f04f 0900 	mov.w	r9, #0
   de9ea:	ec51 0b18 	vmov	r0, r1, d8
   de9ee:	4642      	mov	r2, r8
   de9f0:	464b      	mov	r3, r9
   de9f2:	f004 fefd 	bl	e37f0 <__aeabi_dcmpeq>
   de9f6:	2800      	cmp	r0, #0
   de9f8:	d0e1      	beq.n	de9be <pow+0xbe>
   de9fa:	ec47 6b10 	vmov	d0, r6, r7
   de9fe:	f004 f99d 	bl	e2d3c <finite>
   dea02:	2800      	cmp	r0, #0
   dea04:	d0db      	beq.n	de9be <pow+0xbe>
   dea06:	ec45 4b10 	vmov	d0, r4, r5
   dea0a:	f004 f997 	bl	e2d3c <finite>
   dea0e:	2800      	cmp	r0, #0
   dea10:	d0d5      	beq.n	de9be <pow+0xbe>
   dea12:	f99a 3000 	ldrsb.w	r3, [sl]
   dea16:	4a82      	ldr	r2, [pc, #520]	; (dec20 <pow+0x320>)
   dea18:	9201      	str	r2, [sp, #4]
   dea1a:	2104      	movs	r1, #4
   dea1c:	2200      	movs	r2, #0
   dea1e:	2b02      	cmp	r3, #2
   dea20:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dea24:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dea28:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dea2c:	9100      	str	r1, [sp, #0]
   dea2e:	9208      	str	r2, [sp, #32]
   dea30:	d003      	beq.n	dea3a <pow+0x13a>
   dea32:	4668      	mov	r0, sp
   dea34:	f004 f98a 	bl	e2d4c <matherr>
   dea38:	b970      	cbnz	r0, dea58 <pow+0x158>
   dea3a:	f7fc fad3 	bl	dafe4 <__errno>
   dea3e:	2322      	movs	r3, #34	; 0x22
   dea40:	6003      	str	r3, [r0, #0]
   dea42:	e009      	b.n	dea58 <pow+0x158>
   dea44:	ed9f 7b70 	vldr	d7, [pc, #448]	; dec08 <pow+0x308>
   dea48:	ed8d 7b06 	vstr	d7, [sp, #24]
   dea4c:	4668      	mov	r0, sp
   dea4e:	f004 f97d 	bl	e2d4c <matherr>
   dea52:	2800      	cmp	r0, #0
   dea54:	f000 808e 	beq.w	deb74 <pow+0x274>
   dea58:	9b08      	ldr	r3, [sp, #32]
   dea5a:	b11b      	cbz	r3, dea64 <pow+0x164>
   dea5c:	f7fc fac2 	bl	dafe4 <__errno>
   dea60:	9b08      	ldr	r3, [sp, #32]
   dea62:	6003      	str	r3, [r0, #0]
   dea64:	ed9d 0b06 	vldr	d0, [sp, #24]
   dea68:	b00b      	add	sp, #44	; 0x2c
   dea6a:	ecbd 8b02 	vpop	{d8}
   dea6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea72:	2200      	movs	r2, #0
   dea74:	2300      	movs	r3, #0
   dea76:	4620      	mov	r0, r4
   dea78:	4629      	mov	r1, r5
   dea7a:	f004 feb9 	bl	e37f0 <__aeabi_dcmpeq>
   dea7e:	2800      	cmp	r0, #0
   dea80:	d09d      	beq.n	de9be <pow+0xbe>
   dea82:	ed9f 0b63 	vldr	d0, [pc, #396]	; dec10 <pow+0x310>
   dea86:	4b66      	ldr	r3, [pc, #408]	; (dec20 <pow+0x320>)
   dea88:	f8cd b020 	str.w	fp, [sp, #32]
   dea8c:	2201      	movs	r2, #1
   dea8e:	f1b8 0f02 	cmp.w	r8, #2
   dea92:	e9cd 6702 	strd	r6, r7, [sp, #8]
   dea96:	e9cd 4504 	strd	r4, r5, [sp, #16]
   dea9a:	ed8d 0b06 	vstr	d0, [sp, #24]
   dea9e:	e88d 000c 	stmia.w	sp, {r2, r3}
   deaa2:	d1d3      	bne.n	dea4c <pow+0x14c>
   deaa4:	e78f      	b.n	de9c6 <pow+0xc6>
   deaa6:	ec47 6b10 	vmov	d0, r6, r7
   deaaa:	f004 f947 	bl	e2d3c <finite>
   deaae:	2800      	cmp	r0, #0
   deab0:	d097      	beq.n	de9e2 <pow+0xe2>
   deab2:	ec45 4b10 	vmov	d0, r4, r5
   deab6:	f004 f941 	bl	e2d3c <finite>
   deaba:	2800      	cmp	r0, #0
   deabc:	d091      	beq.n	de9e2 <pow+0xe2>
   deabe:	ec53 2b18 	vmov	r2, r3, d8
   deac2:	ee18 0a10 	vmov	r0, s16
   deac6:	4619      	mov	r1, r3
   deac8:	f004 fec4 	bl	e3854 <__aeabi_dcmpun>
   deacc:	2800      	cmp	r0, #0
   deace:	d17c      	bne.n	debca <pow+0x2ca>
   dead0:	2303      	movs	r3, #3
   dead2:	f99a 8000 	ldrsb.w	r8, [sl]
   dead6:	9300      	str	r3, [sp, #0]
   dead8:	4b51      	ldr	r3, [pc, #324]	; (dec20 <pow+0x320>)
   deada:	9008      	str	r0, [sp, #32]
   deadc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   deae0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   deae4:	9301      	str	r3, [sp, #4]
   deae6:	f1b8 0f00 	cmp.w	r8, #0
   deaea:	d148      	bne.n	deb7e <pow+0x27e>
   deaec:	f8df 9144 	ldr.w	r9, [pc, #324]	; dec34 <pow+0x334>
   deaf0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   deaf4:	2200      	movs	r2, #0
   deaf6:	2300      	movs	r3, #0
   deaf8:	4630      	mov	r0, r6
   deafa:	4639      	mov	r1, r7
   deafc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   deb00:	f004 fe80 	bl	e3804 <__aeabi_dcmplt>
   deb04:	2800      	cmp	r0, #0
   deb06:	d094      	beq.n	dea32 <pow+0x132>
   deb08:	2200      	movs	r2, #0
   deb0a:	4b46      	ldr	r3, [pc, #280]	; (dec24 <pow+0x324>)
   deb0c:	4620      	mov	r0, r4
   deb0e:	4629      	mov	r1, r5
   deb10:	f004 fc06 	bl	e3320 <__aeabi_dmul>
   deb14:	4604      	mov	r4, r0
   deb16:	460d      	mov	r5, r1
   deb18:	ec45 4b10 	vmov	d0, r4, r5
   deb1c:	f004 f920 	bl	e2d60 <rint>
   deb20:	4620      	mov	r0, r4
   deb22:	ec53 2b10 	vmov	r2, r3, d0
   deb26:	4629      	mov	r1, r5
   deb28:	f004 fe62 	bl	e37f0 <__aeabi_dcmpeq>
   deb2c:	2800      	cmp	r0, #0
   deb2e:	d149      	bne.n	debc4 <pow+0x2c4>
   deb30:	4b3d      	ldr	r3, [pc, #244]	; (dec28 <pow+0x328>)
   deb32:	f99a 8000 	ldrsb.w	r8, [sl]
   deb36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   deb3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   deb3e:	f1b8 0f02 	cmp.w	r8, #2
   deb42:	f47f af76 	bne.w	dea32 <pow+0x132>
   deb46:	e778      	b.n	dea3a <pow+0x13a>
   deb48:	4a35      	ldr	r2, [pc, #212]	; (dec20 <pow+0x320>)
   deb4a:	f99a 3000 	ldrsb.w	r3, [sl]
   deb4e:	f8cd b020 	str.w	fp, [sp, #32]
   deb52:	2101      	movs	r1, #1
   deb54:	e9cd 6702 	strd	r6, r7, [sp, #8]
   deb58:	e9cd 4504 	strd	r4, r5, [sp, #16]
   deb5c:	e88d 0006 	stmia.w	sp, {r1, r2}
   deb60:	2b00      	cmp	r3, #0
   deb62:	f43f af6f 	beq.w	dea44 <pow+0x144>
   deb66:	4931      	ldr	r1, [pc, #196]	; (dec2c <pow+0x32c>)
   deb68:	2000      	movs	r0, #0
   deb6a:	2b02      	cmp	r3, #2
   deb6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   deb70:	f47f af6c 	bne.w	dea4c <pow+0x14c>
   deb74:	f7fc fa36 	bl	dafe4 <__errno>
   deb78:	2321      	movs	r3, #33	; 0x21
   deb7a:	6003      	str	r3, [r0, #0]
   deb7c:	e76c      	b.n	dea58 <pow+0x158>
   deb7e:	ed9f 7b26 	vldr	d7, [pc, #152]	; dec18 <pow+0x318>
   deb82:	2200      	movs	r2, #0
   deb84:	2300      	movs	r3, #0
   deb86:	4630      	mov	r0, r6
   deb88:	4639      	mov	r1, r7
   deb8a:	ed8d 7b06 	vstr	d7, [sp, #24]
   deb8e:	f004 fe39 	bl	e3804 <__aeabi_dcmplt>
   deb92:	2800      	cmp	r0, #0
   deb94:	d0d3      	beq.n	deb3e <pow+0x23e>
   deb96:	2200      	movs	r2, #0
   deb98:	4b22      	ldr	r3, [pc, #136]	; (dec24 <pow+0x324>)
   deb9a:	4620      	mov	r0, r4
   deb9c:	4629      	mov	r1, r5
   deb9e:	f004 fbbf 	bl	e3320 <__aeabi_dmul>
   deba2:	4604      	mov	r4, r0
   deba4:	460d      	mov	r5, r1
   deba6:	ec45 4b10 	vmov	d0, r4, r5
   debaa:	f004 f8d9 	bl	e2d60 <rint>
   debae:	4620      	mov	r0, r4
   debb0:	ec53 2b10 	vmov	r2, r3, d0
   debb4:	4629      	mov	r1, r5
   debb6:	f004 fe1b 	bl	e37f0 <__aeabi_dcmpeq>
   debba:	b918      	cbnz	r0, debc4 <pow+0x2c4>
   debbc:	4b1b      	ldr	r3, [pc, #108]	; (dec2c <pow+0x32c>)
   debbe:	2200      	movs	r2, #0
   debc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   debc4:	f99a 8000 	ldrsb.w	r8, [sl]
   debc8:	e7b9      	b.n	deb3e <pow+0x23e>
   debca:	4b15      	ldr	r3, [pc, #84]	; (dec20 <pow+0x320>)
   debcc:	f99a 9000 	ldrsb.w	r9, [sl]
   debd0:	f8cd 8020 	str.w	r8, [sp, #32]
   debd4:	2201      	movs	r2, #1
   debd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   debda:	e9cd 4504 	strd	r4, r5, [sp, #16]
   debde:	e88d 000c 	stmia.w	sp, {r2, r3}
   debe2:	f1b9 0f00 	cmp.w	r9, #0
   debe6:	f43f af2d 	beq.w	dea44 <pow+0x144>
   debea:	2200      	movs	r2, #0
   debec:	2300      	movs	r3, #0
   debee:	4610      	mov	r0, r2
   debf0:	4619      	mov	r1, r3
   debf2:	f004 fcbf 	bl	e3574 <__aeabi_ddiv>
   debf6:	f1b9 0f02 	cmp.w	r9, #2
   debfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   debfe:	d0b9      	beq.n	deb74 <pow+0x274>
   dec00:	e724      	b.n	dea4c <pow+0x14c>
   dec02:	bf00      	nop
   dec04:	f3af 8000 	nop.w
	...
   dec14:	3ff00000 	.word	0x3ff00000
   dec18:	00000000 	.word	0x00000000
   dec1c:	7ff00000 	.word	0x7ff00000
   dec20:	000e8b48 	.word	0x000e8b48
   dec24:	3fe00000 	.word	0x3fe00000
   dec28:	c7efffff 	.word	0xc7efffff
   dec2c:	fff00000 	.word	0xfff00000
   dec30:	2003d6c0 	.word	0x2003d6c0
   dec34:	47efffff 	.word	0x47efffff

000dec38 <sinh>:
   dec38:	b530      	push	{r4, r5, lr}
   dec3a:	ed2d 8b04 	vpush	{d8-d9}
   dec3e:	eeb0 9a40 	vmov.f32	s18, s0
   dec42:	eef0 9a60 	vmov.f32	s19, s1
   dec46:	4c2d      	ldr	r4, [pc, #180]	; (decfc <sinh+0xc4>)
   dec48:	b08b      	sub	sp, #44	; 0x2c
   dec4a:	f002 fc5d 	bl	e1508 <__ieee754_sinh>
   dec4e:	f994 3000 	ldrsb.w	r3, [r4]
   dec52:	eeb0 8a40 	vmov.f32	s16, s0
   dec56:	eef0 8a60 	vmov.f32	s17, s1
   dec5a:	3301      	adds	r3, #1
   dec5c:	d003      	beq.n	dec66 <sinh+0x2e>
   dec5e:	f004 f86d 	bl	e2d3c <finite>
   dec62:	4605      	mov	r5, r0
   dec64:	b138      	cbz	r0, dec76 <sinh+0x3e>
   dec66:	eeb0 0a48 	vmov.f32	s0, s16
   dec6a:	eef0 0a68 	vmov.f32	s1, s17
   dec6e:	b00b      	add	sp, #44	; 0x2c
   dec70:	ecbd 8b04 	vpop	{d8-d9}
   dec74:	bd30      	pop	{r4, r5, pc}
   dec76:	eeb0 0a49 	vmov.f32	s0, s18
   dec7a:	eef0 0a69 	vmov.f32	s1, s19
   dec7e:	f004 f85d 	bl	e2d3c <finite>
   dec82:	2800      	cmp	r0, #0
   dec84:	d0ef      	beq.n	dec66 <sinh+0x2e>
   dec86:	4b1e      	ldr	r3, [pc, #120]	; (ded00 <sinh+0xc8>)
   dec88:	f994 4000 	ldrsb.w	r4, [r4]
   dec8c:	9508      	str	r5, [sp, #32]
   dec8e:	2203      	movs	r2, #3
   dec90:	e88d 000c 	stmia.w	sp, {r2, r3}
   dec94:	ed8d 9b04 	vstr	d9, [sp, #16]
   dec98:	ed8d 9b02 	vstr	d9, [sp, #8]
   dec9c:	2200      	movs	r2, #0
   dec9e:	2300      	movs	r3, #0
   deca0:	ec51 0b19 	vmov	r0, r1, d9
   deca4:	b99c      	cbnz	r4, decce <sinh+0x96>
   deca6:	f004 fdcb 	bl	e3840 <__aeabi_dcmpgt>
   decaa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   decae:	b308      	cbz	r0, decf4 <sinh+0xbc>
   decb0:	4b14      	ldr	r3, [pc, #80]	; (ded04 <sinh+0xcc>)
   decb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   decb6:	4668      	mov	r0, sp
   decb8:	f004 f848 	bl	e2d4c <matherr>
   decbc:	b180      	cbz	r0, dece0 <sinh+0xa8>
   decbe:	9b08      	ldr	r3, [sp, #32]
   decc0:	b99b      	cbnz	r3, decea <sinh+0xb2>
   decc2:	ed9d 0b06 	vldr	d0, [sp, #24]
   decc6:	b00b      	add	sp, #44	; 0x2c
   decc8:	ecbd 8b04 	vpop	{d8-d9}
   deccc:	bd30      	pop	{r4, r5, pc}
   decce:	f004 fdb7 	bl	e3840 <__aeabi_dcmpgt>
   decd2:	2200      	movs	r2, #0
   decd4:	b180      	cbz	r0, decf8 <sinh+0xc0>
   decd6:	4b0c      	ldr	r3, [pc, #48]	; (ded08 <sinh+0xd0>)
   decd8:	2c02      	cmp	r4, #2
   decda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   decde:	d1ea      	bne.n	decb6 <sinh+0x7e>
   dece0:	f7fc f980 	bl	dafe4 <__errno>
   dece4:	2322      	movs	r3, #34	; 0x22
   dece6:	6003      	str	r3, [r0, #0]
   dece8:	e7e9      	b.n	decbe <sinh+0x86>
   decea:	f7fc f97b 	bl	dafe4 <__errno>
   decee:	9b08      	ldr	r3, [sp, #32]
   decf0:	6003      	str	r3, [r0, #0]
   decf2:	e7e6      	b.n	decc2 <sinh+0x8a>
   decf4:	4b05      	ldr	r3, [pc, #20]	; (ded0c <sinh+0xd4>)
   decf6:	e7dc      	b.n	decb2 <sinh+0x7a>
   decf8:	4b05      	ldr	r3, [pc, #20]	; (ded10 <sinh+0xd8>)
   decfa:	e7ed      	b.n	decd8 <sinh+0xa0>
   decfc:	2003d6c0 	.word	0x2003d6c0
   ded00:	000e8b4c 	.word	0x000e8b4c
   ded04:	47efffff 	.word	0x47efffff
   ded08:	7ff00000 	.word	0x7ff00000
   ded0c:	c7efffff 	.word	0xc7efffff
   ded10:	fff00000 	.word	0xfff00000

000ded14 <sqrt>:
   ded14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ded18:	ed2d 8b02 	vpush	{d8}
   ded1c:	b08b      	sub	sp, #44	; 0x2c
   ded1e:	ec55 4b10 	vmov	r4, r5, d0
   ded22:	f002 fcd5 	bl	e16d0 <__ieee754_sqrt>
   ded26:	4b29      	ldr	r3, [pc, #164]	; (dedcc <sqrt+0xb8>)
   ded28:	eeb0 8a40 	vmov.f32	s16, s0
   ded2c:	eef0 8a60 	vmov.f32	s17, s1
   ded30:	f993 6000 	ldrsb.w	r6, [r3]
   ded34:	1c73      	adds	r3, r6, #1
   ded36:	d012      	beq.n	ded5e <sqrt+0x4a>
   ded38:	4622      	mov	r2, r4
   ded3a:	462b      	mov	r3, r5
   ded3c:	4620      	mov	r0, r4
   ded3e:	4629      	mov	r1, r5
   ded40:	f004 fd88 	bl	e3854 <__aeabi_dcmpun>
   ded44:	4607      	mov	r7, r0
   ded46:	b950      	cbnz	r0, ded5e <sqrt+0x4a>
   ded48:	f04f 0800 	mov.w	r8, #0
   ded4c:	f04f 0900 	mov.w	r9, #0
   ded50:	4620      	mov	r0, r4
   ded52:	4629      	mov	r1, r5
   ded54:	4642      	mov	r2, r8
   ded56:	464b      	mov	r3, r9
   ded58:	f004 fd54 	bl	e3804 <__aeabi_dcmplt>
   ded5c:	b940      	cbnz	r0, ded70 <sqrt+0x5c>
   ded5e:	eeb0 0a48 	vmov.f32	s0, s16
   ded62:	eef0 0a68 	vmov.f32	s1, s17
   ded66:	b00b      	add	sp, #44	; 0x2c
   ded68:	ecbd 8b02 	vpop	{d8}
   ded6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ded70:	4b17      	ldr	r3, [pc, #92]	; (dedd0 <sqrt+0xbc>)
   ded72:	9708      	str	r7, [sp, #32]
   ded74:	2201      	movs	r2, #1
   ded76:	e9cd 4504 	strd	r4, r5, [sp, #16]
   ded7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   ded7e:	e88d 000c 	stmia.w	sp, {r2, r3}
   ded82:	b1b6      	cbz	r6, dedb2 <sqrt+0x9e>
   ded84:	4642      	mov	r2, r8
   ded86:	464b      	mov	r3, r9
   ded88:	4640      	mov	r0, r8
   ded8a:	4649      	mov	r1, r9
   ded8c:	f004 fbf2 	bl	e3574 <__aeabi_ddiv>
   ded90:	2e02      	cmp	r6, #2
   ded92:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ded96:	d10e      	bne.n	dedb6 <sqrt+0xa2>
   ded98:	f7fc f924 	bl	dafe4 <__errno>
   ded9c:	2321      	movs	r3, #33	; 0x21
   ded9e:	6003      	str	r3, [r0, #0]
   deda0:	9b08      	ldr	r3, [sp, #32]
   deda2:	b973      	cbnz	r3, dedc2 <sqrt+0xae>
   deda4:	ed9d 0b06 	vldr	d0, [sp, #24]
   deda8:	b00b      	add	sp, #44	; 0x2c
   dedaa:	ecbd 8b02 	vpop	{d8}
   dedae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dedb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   dedb6:	4668      	mov	r0, sp
   dedb8:	f003 ffc8 	bl	e2d4c <matherr>
   dedbc:	2800      	cmp	r0, #0
   dedbe:	d1ef      	bne.n	deda0 <sqrt+0x8c>
   dedc0:	e7ea      	b.n	ded98 <sqrt+0x84>
   dedc2:	f7fc f90f 	bl	dafe4 <__errno>
   dedc6:	9b08      	ldr	r3, [sp, #32]
   dedc8:	6003      	str	r3, [r0, #0]
   dedca:	e7eb      	b.n	deda4 <sqrt+0x90>
   dedcc:	2003d6c0 	.word	0x2003d6c0
   dedd0:	000e8b54 	.word	0x000e8b54
   dedd4:	00000000 	.word	0x00000000

000dedd8 <__ieee754_acos>:
   dedd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deddc:	ec55 4b10 	vmov	r4, r5, d0
   dede0:	49cd      	ldr	r1, [pc, #820]	; (df118 <__ieee754_acos+0x340>)
   dede2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   dede6:	428b      	cmp	r3, r1
   dede8:	dd0d      	ble.n	dee06 <__ieee754_acos+0x2e>
   dedea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
   dedee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   dedf2:	4323      	orrs	r3, r4
   dedf4:	f040 80bd 	bne.w	def72 <__ieee754_acos+0x19a>
   dedf8:	2d00      	cmp	r5, #0
   dedfa:	f340 814f 	ble.w	df09c <__ieee754_acos+0x2c4>
   dedfe:	ed9f 0baa 	vldr	d0, [pc, #680]	; df0a8 <__ieee754_acos+0x2d0>
   dee02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee06:	49c5      	ldr	r1, [pc, #788]	; (df11c <__ieee754_acos+0x344>)
   dee08:	428b      	cmp	r3, r1
   dee0a:	f340 80ab 	ble.w	def64 <__ieee754_acos+0x18c>
   dee0e:	2d00      	cmp	r5, #0
   dee10:	f2c0 818c 	blt.w	df12c <__ieee754_acos+0x354>
   dee14:	ee10 2a10 	vmov	r2, s0
   dee18:	462b      	mov	r3, r5
   dee1a:	2000      	movs	r0, #0
   dee1c:	49c0      	ldr	r1, [pc, #768]	; (df120 <__ieee754_acos+0x348>)
   dee1e:	f004 f8cb 	bl	e2fb8 <__aeabi_dsub>
   dee22:	2200      	movs	r2, #0
   dee24:	4bbf      	ldr	r3, [pc, #764]	; (df124 <__ieee754_acos+0x34c>)
   dee26:	f004 fa7b 	bl	e3320 <__aeabi_dmul>
   dee2a:	4604      	mov	r4, r0
   dee2c:	460d      	mov	r5, r1
   dee2e:	ec45 4b10 	vmov	d0, r4, r5
   dee32:	f002 fc4d 	bl	e16d0 <__ieee754_sqrt>
   dee36:	4620      	mov	r0, r4
   dee38:	4629      	mov	r1, r5
   dee3a:	a39d      	add	r3, pc, #628	; (adr r3, df0b0 <__ieee754_acos+0x2d8>)
   dee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee40:	ec59 8b10 	vmov	r8, r9, d0
   dee44:	f004 fa6c 	bl	e3320 <__aeabi_dmul>
   dee48:	a39b      	add	r3, pc, #620	; (adr r3, df0b8 <__ieee754_acos+0x2e0>)
   dee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee4e:	f004 f8b5 	bl	e2fbc <__adddf3>
   dee52:	4622      	mov	r2, r4
   dee54:	462b      	mov	r3, r5
   dee56:	f004 fa63 	bl	e3320 <__aeabi_dmul>
   dee5a:	a399      	add	r3, pc, #612	; (adr r3, df0c0 <__ieee754_acos+0x2e8>)
   dee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee60:	f004 f8aa 	bl	e2fb8 <__aeabi_dsub>
   dee64:	4622      	mov	r2, r4
   dee66:	462b      	mov	r3, r5
   dee68:	f004 fa5a 	bl	e3320 <__aeabi_dmul>
   dee6c:	a396      	add	r3, pc, #600	; (adr r3, df0c8 <__ieee754_acos+0x2f0>)
   dee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee72:	f004 f8a3 	bl	e2fbc <__adddf3>
   dee76:	4622      	mov	r2, r4
   dee78:	462b      	mov	r3, r5
   dee7a:	f004 fa51 	bl	e3320 <__aeabi_dmul>
   dee7e:	a394      	add	r3, pc, #592	; (adr r3, df0d0 <__ieee754_acos+0x2f8>)
   dee80:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee84:	f004 f898 	bl	e2fb8 <__aeabi_dsub>
   dee88:	4622      	mov	r2, r4
   dee8a:	462b      	mov	r3, r5
   dee8c:	f004 fa48 	bl	e3320 <__aeabi_dmul>
   dee90:	a391      	add	r3, pc, #580	; (adr r3, df0d8 <__ieee754_acos+0x300>)
   dee92:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee96:	f004 f891 	bl	e2fbc <__adddf3>
   dee9a:	4622      	mov	r2, r4
   dee9c:	462b      	mov	r3, r5
   dee9e:	f004 fa3f 	bl	e3320 <__aeabi_dmul>
   deea2:	a38f      	add	r3, pc, #572	; (adr r3, df0e0 <__ieee754_acos+0x308>)
   deea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   deea8:	4682      	mov	sl, r0
   deeaa:	468b      	mov	fp, r1
   deeac:	4620      	mov	r0, r4
   deeae:	4629      	mov	r1, r5
   deeb0:	f004 fa36 	bl	e3320 <__aeabi_dmul>
   deeb4:	a38c      	add	r3, pc, #560	; (adr r3, df0e8 <__ieee754_acos+0x310>)
   deeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   deeba:	f004 f87d 	bl	e2fb8 <__aeabi_dsub>
   deebe:	4622      	mov	r2, r4
   deec0:	462b      	mov	r3, r5
   deec2:	f004 fa2d 	bl	e3320 <__aeabi_dmul>
   deec6:	a38a      	add	r3, pc, #552	; (adr r3, df0f0 <__ieee754_acos+0x318>)
   deec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deecc:	f004 f876 	bl	e2fbc <__adddf3>
   deed0:	4622      	mov	r2, r4
   deed2:	462b      	mov	r3, r5
   deed4:	f004 fa24 	bl	e3320 <__aeabi_dmul>
   deed8:	a387      	add	r3, pc, #540	; (adr r3, df0f8 <__ieee754_acos+0x320>)
   deeda:	e9d3 2300 	ldrd	r2, r3, [r3]
   deede:	f004 f86b 	bl	e2fb8 <__aeabi_dsub>
   deee2:	4622      	mov	r2, r4
   deee4:	462b      	mov	r3, r5
   deee6:	f004 fa1b 	bl	e3320 <__aeabi_dmul>
   deeea:	2200      	movs	r2, #0
   deeec:	4b8c      	ldr	r3, [pc, #560]	; (df120 <__ieee754_acos+0x348>)
   deeee:	f004 f865 	bl	e2fbc <__adddf3>
   deef2:	4602      	mov	r2, r0
   deef4:	460b      	mov	r3, r1
   deef6:	4650      	mov	r0, sl
   deef8:	4659      	mov	r1, fp
   deefa:	f004 fb3b 	bl	e3574 <__aeabi_ddiv>
   deefe:	4642      	mov	r2, r8
   def00:	464b      	mov	r3, r9
   def02:	f004 fa0d 	bl	e3320 <__aeabi_dmul>
   def06:	2600      	movs	r6, #0
   def08:	4682      	mov	sl, r0
   def0a:	468b      	mov	fp, r1
   def0c:	4632      	mov	r2, r6
   def0e:	464b      	mov	r3, r9
   def10:	4630      	mov	r0, r6
   def12:	4649      	mov	r1, r9
   def14:	f004 fa04 	bl	e3320 <__aeabi_dmul>
   def18:	4602      	mov	r2, r0
   def1a:	460b      	mov	r3, r1
   def1c:	4620      	mov	r0, r4
   def1e:	4629      	mov	r1, r5
   def20:	f004 f84a 	bl	e2fb8 <__aeabi_dsub>
   def24:	4632      	mov	r2, r6
   def26:	4604      	mov	r4, r0
   def28:	460d      	mov	r5, r1
   def2a:	464b      	mov	r3, r9
   def2c:	4640      	mov	r0, r8
   def2e:	4649      	mov	r1, r9
   def30:	f004 f844 	bl	e2fbc <__adddf3>
   def34:	4602      	mov	r2, r0
   def36:	460b      	mov	r3, r1
   def38:	4620      	mov	r0, r4
   def3a:	4629      	mov	r1, r5
   def3c:	f004 fb1a 	bl	e3574 <__aeabi_ddiv>
   def40:	4602      	mov	r2, r0
   def42:	460b      	mov	r3, r1
   def44:	4650      	mov	r0, sl
   def46:	4659      	mov	r1, fp
   def48:	f004 f838 	bl	e2fbc <__adddf3>
   def4c:	4632      	mov	r2, r6
   def4e:	464b      	mov	r3, r9
   def50:	f004 f834 	bl	e2fbc <__adddf3>
   def54:	4602      	mov	r2, r0
   def56:	460b      	mov	r3, r1
   def58:	f004 f830 	bl	e2fbc <__adddf3>
   def5c:	ec41 0b10 	vmov	d0, r0, r1
   def60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def64:	4a70      	ldr	r2, [pc, #448]	; (df128 <__ieee754_acos+0x350>)
   def66:	4293      	cmp	r3, r2
   def68:	dc12      	bgt.n	def90 <__ieee754_acos+0x1b8>
   def6a:	ed9f 0b65 	vldr	d0, [pc, #404]	; df100 <__ieee754_acos+0x328>
   def6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def72:	ee10 2a10 	vmov	r2, s0
   def76:	462b      	mov	r3, r5
   def78:	4620      	mov	r0, r4
   def7a:	4629      	mov	r1, r5
   def7c:	f004 f81c 	bl	e2fb8 <__aeabi_dsub>
   def80:	4602      	mov	r2, r0
   def82:	460b      	mov	r3, r1
   def84:	f004 faf6 	bl	e3574 <__aeabi_ddiv>
   def88:	ec41 0b10 	vmov	d0, r0, r1
   def8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def90:	ee10 2a10 	vmov	r2, s0
   def94:	ee10 0a10 	vmov	r0, s0
   def98:	462b      	mov	r3, r5
   def9a:	4629      	mov	r1, r5
   def9c:	f004 f9c0 	bl	e3320 <__aeabi_dmul>
   defa0:	a343      	add	r3, pc, #268	; (adr r3, df0b0 <__ieee754_acos+0x2d8>)
   defa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   defa6:	4606      	mov	r6, r0
   defa8:	460f      	mov	r7, r1
   defaa:	f004 f9b9 	bl	e3320 <__aeabi_dmul>
   defae:	a342      	add	r3, pc, #264	; (adr r3, df0b8 <__ieee754_acos+0x2e0>)
   defb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   defb4:	f004 f802 	bl	e2fbc <__adddf3>
   defb8:	4632      	mov	r2, r6
   defba:	463b      	mov	r3, r7
   defbc:	f004 f9b0 	bl	e3320 <__aeabi_dmul>
   defc0:	a33f      	add	r3, pc, #252	; (adr r3, df0c0 <__ieee754_acos+0x2e8>)
   defc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   defc6:	f003 fff7 	bl	e2fb8 <__aeabi_dsub>
   defca:	4632      	mov	r2, r6
   defcc:	463b      	mov	r3, r7
   defce:	f004 f9a7 	bl	e3320 <__aeabi_dmul>
   defd2:	a33d      	add	r3, pc, #244	; (adr r3, df0c8 <__ieee754_acos+0x2f0>)
   defd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   defd8:	f003 fff0 	bl	e2fbc <__adddf3>
   defdc:	4632      	mov	r2, r6
   defde:	463b      	mov	r3, r7
   defe0:	f004 f99e 	bl	e3320 <__aeabi_dmul>
   defe4:	a33a      	add	r3, pc, #232	; (adr r3, df0d0 <__ieee754_acos+0x2f8>)
   defe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   defea:	f003 ffe5 	bl	e2fb8 <__aeabi_dsub>
   defee:	4632      	mov	r2, r6
   deff0:	463b      	mov	r3, r7
   deff2:	f004 f995 	bl	e3320 <__aeabi_dmul>
   deff6:	a338      	add	r3, pc, #224	; (adr r3, df0d8 <__ieee754_acos+0x300>)
   deff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deffc:	f003 ffde 	bl	e2fbc <__adddf3>
   df000:	4632      	mov	r2, r6
   df002:	463b      	mov	r3, r7
   df004:	f004 f98c 	bl	e3320 <__aeabi_dmul>
   df008:	a335      	add	r3, pc, #212	; (adr r3, df0e0 <__ieee754_acos+0x308>)
   df00a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df00e:	4680      	mov	r8, r0
   df010:	4689      	mov	r9, r1
   df012:	4630      	mov	r0, r6
   df014:	4639      	mov	r1, r7
   df016:	f004 f983 	bl	e3320 <__aeabi_dmul>
   df01a:	a333      	add	r3, pc, #204	; (adr r3, df0e8 <__ieee754_acos+0x310>)
   df01c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df020:	f003 ffca 	bl	e2fb8 <__aeabi_dsub>
   df024:	4632      	mov	r2, r6
   df026:	463b      	mov	r3, r7
   df028:	f004 f97a 	bl	e3320 <__aeabi_dmul>
   df02c:	a330      	add	r3, pc, #192	; (adr r3, df0f0 <__ieee754_acos+0x318>)
   df02e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df032:	f003 ffc3 	bl	e2fbc <__adddf3>
   df036:	4632      	mov	r2, r6
   df038:	463b      	mov	r3, r7
   df03a:	f004 f971 	bl	e3320 <__aeabi_dmul>
   df03e:	a32e      	add	r3, pc, #184	; (adr r3, df0f8 <__ieee754_acos+0x320>)
   df040:	e9d3 2300 	ldrd	r2, r3, [r3]
   df044:	f003 ffb8 	bl	e2fb8 <__aeabi_dsub>
   df048:	4632      	mov	r2, r6
   df04a:	463b      	mov	r3, r7
   df04c:	f004 f968 	bl	e3320 <__aeabi_dmul>
   df050:	2200      	movs	r2, #0
   df052:	4b33      	ldr	r3, [pc, #204]	; (df120 <__ieee754_acos+0x348>)
   df054:	f003 ffb2 	bl	e2fbc <__adddf3>
   df058:	4602      	mov	r2, r0
   df05a:	460b      	mov	r3, r1
   df05c:	4640      	mov	r0, r8
   df05e:	4649      	mov	r1, r9
   df060:	f004 fa88 	bl	e3574 <__aeabi_ddiv>
   df064:	4622      	mov	r2, r4
   df066:	462b      	mov	r3, r5
   df068:	f004 f95a 	bl	e3320 <__aeabi_dmul>
   df06c:	4602      	mov	r2, r0
   df06e:	460b      	mov	r3, r1
   df070:	a125      	add	r1, pc, #148	; (adr r1, df108 <__ieee754_acos+0x330>)
   df072:	e9d1 0100 	ldrd	r0, r1, [r1]
   df076:	f003 ff9f 	bl	e2fb8 <__aeabi_dsub>
   df07a:	4602      	mov	r2, r0
   df07c:	460b      	mov	r3, r1
   df07e:	4620      	mov	r0, r4
   df080:	4629      	mov	r1, r5
   df082:	f003 ff99 	bl	e2fb8 <__aeabi_dsub>
   df086:	4602      	mov	r2, r0
   df088:	460b      	mov	r3, r1
   df08a:	a11d      	add	r1, pc, #116	; (adr r1, df100 <__ieee754_acos+0x328>)
   df08c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df090:	f003 ff92 	bl	e2fb8 <__aeabi_dsub>
   df094:	ec41 0b10 	vmov	d0, r0, r1
   df098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df09c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; df110 <__ieee754_acos+0x338>
   df0a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df0a4:	f3af 8000 	nop.w
	...
   df0b0:	0dfdf709 	.word	0x0dfdf709
   df0b4:	3f023de1 	.word	0x3f023de1
   df0b8:	7501b288 	.word	0x7501b288
   df0bc:	3f49efe0 	.word	0x3f49efe0
   df0c0:	b5688f3b 	.word	0xb5688f3b
   df0c4:	3fa48228 	.word	0x3fa48228
   df0c8:	0e884455 	.word	0x0e884455
   df0cc:	3fc9c155 	.word	0x3fc9c155
   df0d0:	03eb6f7d 	.word	0x03eb6f7d
   df0d4:	3fd4d612 	.word	0x3fd4d612
   df0d8:	55555555 	.word	0x55555555
   df0dc:	3fc55555 	.word	0x3fc55555
   df0e0:	b12e9282 	.word	0xb12e9282
   df0e4:	3fb3b8c5 	.word	0x3fb3b8c5
   df0e8:	1b8d0159 	.word	0x1b8d0159
   df0ec:	3fe6066c 	.word	0x3fe6066c
   df0f0:	9c598ac8 	.word	0x9c598ac8
   df0f4:	40002ae5 	.word	0x40002ae5
   df0f8:	1c8a2d4b 	.word	0x1c8a2d4b
   df0fc:	40033a27 	.word	0x40033a27
   df100:	54442d18 	.word	0x54442d18
   df104:	3ff921fb 	.word	0x3ff921fb
   df108:	33145c07 	.word	0x33145c07
   df10c:	3c91a626 	.word	0x3c91a626
   df110:	54442d18 	.word	0x54442d18
   df114:	400921fb 	.word	0x400921fb
   df118:	3fefffff 	.word	0x3fefffff
   df11c:	3fdfffff 	.word	0x3fdfffff
   df120:	3ff00000 	.word	0x3ff00000
   df124:	3fe00000 	.word	0x3fe00000
   df128:	3c600000 	.word	0x3c600000
   df12c:	ee10 0a10 	vmov	r0, s0
   df130:	4629      	mov	r1, r5
   df132:	2200      	movs	r2, #0
   df134:	4b5e      	ldr	r3, [pc, #376]	; (df2b0 <__ieee754_acos+0x4d8>)
   df136:	f003 ff41 	bl	e2fbc <__adddf3>
   df13a:	2200      	movs	r2, #0
   df13c:	4b5d      	ldr	r3, [pc, #372]	; (df2b4 <__ieee754_acos+0x4dc>)
   df13e:	f004 f8ef 	bl	e3320 <__aeabi_dmul>
   df142:	a343      	add	r3, pc, #268	; (adr r3, df250 <__ieee754_acos+0x478>)
   df144:	e9d3 2300 	ldrd	r2, r3, [r3]
   df148:	4604      	mov	r4, r0
   df14a:	460d      	mov	r5, r1
   df14c:	f004 f8e8 	bl	e3320 <__aeabi_dmul>
   df150:	a341      	add	r3, pc, #260	; (adr r3, df258 <__ieee754_acos+0x480>)
   df152:	e9d3 2300 	ldrd	r2, r3, [r3]
   df156:	f003 ff31 	bl	e2fbc <__adddf3>
   df15a:	4622      	mov	r2, r4
   df15c:	462b      	mov	r3, r5
   df15e:	f004 f8df 	bl	e3320 <__aeabi_dmul>
   df162:	a33f      	add	r3, pc, #252	; (adr r3, df260 <__ieee754_acos+0x488>)
   df164:	e9d3 2300 	ldrd	r2, r3, [r3]
   df168:	f003 ff26 	bl	e2fb8 <__aeabi_dsub>
   df16c:	4622      	mov	r2, r4
   df16e:	462b      	mov	r3, r5
   df170:	f004 f8d6 	bl	e3320 <__aeabi_dmul>
   df174:	a33c      	add	r3, pc, #240	; (adr r3, df268 <__ieee754_acos+0x490>)
   df176:	e9d3 2300 	ldrd	r2, r3, [r3]
   df17a:	f003 ff1f 	bl	e2fbc <__adddf3>
   df17e:	4622      	mov	r2, r4
   df180:	462b      	mov	r3, r5
   df182:	f004 f8cd 	bl	e3320 <__aeabi_dmul>
   df186:	a33a      	add	r3, pc, #232	; (adr r3, df270 <__ieee754_acos+0x498>)
   df188:	e9d3 2300 	ldrd	r2, r3, [r3]
   df18c:	f003 ff14 	bl	e2fb8 <__aeabi_dsub>
   df190:	4622      	mov	r2, r4
   df192:	462b      	mov	r3, r5
   df194:	f004 f8c4 	bl	e3320 <__aeabi_dmul>
   df198:	a337      	add	r3, pc, #220	; (adr r3, df278 <__ieee754_acos+0x4a0>)
   df19a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df19e:	f003 ff0d 	bl	e2fbc <__adddf3>
   df1a2:	4622      	mov	r2, r4
   df1a4:	462b      	mov	r3, r5
   df1a6:	f004 f8bb 	bl	e3320 <__aeabi_dmul>
   df1aa:	ec45 4b10 	vmov	d0, r4, r5
   df1ae:	4680      	mov	r8, r0
   df1b0:	4689      	mov	r9, r1
   df1b2:	f002 fa8d 	bl	e16d0 <__ieee754_sqrt>
   df1b6:	4620      	mov	r0, r4
   df1b8:	4629      	mov	r1, r5
   df1ba:	a331      	add	r3, pc, #196	; (adr r3, df280 <__ieee754_acos+0x4a8>)
   df1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1c0:	ec57 6b10 	vmov	r6, r7, d0
   df1c4:	f004 f8ac 	bl	e3320 <__aeabi_dmul>
   df1c8:	a32f      	add	r3, pc, #188	; (adr r3, df288 <__ieee754_acos+0x4b0>)
   df1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1ce:	f003 fef3 	bl	e2fb8 <__aeabi_dsub>
   df1d2:	4622      	mov	r2, r4
   df1d4:	462b      	mov	r3, r5
   df1d6:	f004 f8a3 	bl	e3320 <__aeabi_dmul>
   df1da:	a32d      	add	r3, pc, #180	; (adr r3, df290 <__ieee754_acos+0x4b8>)
   df1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1e0:	f003 feec 	bl	e2fbc <__adddf3>
   df1e4:	4622      	mov	r2, r4
   df1e6:	462b      	mov	r3, r5
   df1e8:	f004 f89a 	bl	e3320 <__aeabi_dmul>
   df1ec:	a32a      	add	r3, pc, #168	; (adr r3, df298 <__ieee754_acos+0x4c0>)
   df1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   df1f2:	f003 fee1 	bl	e2fb8 <__aeabi_dsub>
   df1f6:	4622      	mov	r2, r4
   df1f8:	462b      	mov	r3, r5
   df1fa:	f004 f891 	bl	e3320 <__aeabi_dmul>
   df1fe:	2200      	movs	r2, #0
   df200:	4b2b      	ldr	r3, [pc, #172]	; (df2b0 <__ieee754_acos+0x4d8>)
   df202:	f003 fedb 	bl	e2fbc <__adddf3>
   df206:	4602      	mov	r2, r0
   df208:	460b      	mov	r3, r1
   df20a:	4640      	mov	r0, r8
   df20c:	4649      	mov	r1, r9
   df20e:	f004 f9b1 	bl	e3574 <__aeabi_ddiv>
   df212:	4632      	mov	r2, r6
   df214:	463b      	mov	r3, r7
   df216:	f004 f883 	bl	e3320 <__aeabi_dmul>
   df21a:	a321      	add	r3, pc, #132	; (adr r3, df2a0 <__ieee754_acos+0x4c8>)
   df21c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df220:	f003 feca 	bl	e2fb8 <__aeabi_dsub>
   df224:	4632      	mov	r2, r6
   df226:	463b      	mov	r3, r7
   df228:	f003 fec8 	bl	e2fbc <__adddf3>
   df22c:	4602      	mov	r2, r0
   df22e:	460b      	mov	r3, r1
   df230:	f003 fec4 	bl	e2fbc <__adddf3>
   df234:	4602      	mov	r2, r0
   df236:	460b      	mov	r3, r1
   df238:	a11b      	add	r1, pc, #108	; (adr r1, df2a8 <__ieee754_acos+0x4d0>)
   df23a:	e9d1 0100 	ldrd	r0, r1, [r1]
   df23e:	f003 febb 	bl	e2fb8 <__aeabi_dsub>
   df242:	ec41 0b10 	vmov	d0, r0, r1
   df246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df24a:	bf00      	nop
   df24c:	f3af 8000 	nop.w
   df250:	0dfdf709 	.word	0x0dfdf709
   df254:	3f023de1 	.word	0x3f023de1
   df258:	7501b288 	.word	0x7501b288
   df25c:	3f49efe0 	.word	0x3f49efe0
   df260:	b5688f3b 	.word	0xb5688f3b
   df264:	3fa48228 	.word	0x3fa48228
   df268:	0e884455 	.word	0x0e884455
   df26c:	3fc9c155 	.word	0x3fc9c155
   df270:	03eb6f7d 	.word	0x03eb6f7d
   df274:	3fd4d612 	.word	0x3fd4d612
   df278:	55555555 	.word	0x55555555
   df27c:	3fc55555 	.word	0x3fc55555
   df280:	b12e9282 	.word	0xb12e9282
   df284:	3fb3b8c5 	.word	0x3fb3b8c5
   df288:	1b8d0159 	.word	0x1b8d0159
   df28c:	3fe6066c 	.word	0x3fe6066c
   df290:	9c598ac8 	.word	0x9c598ac8
   df294:	40002ae5 	.word	0x40002ae5
   df298:	1c8a2d4b 	.word	0x1c8a2d4b
   df29c:	40033a27 	.word	0x40033a27
   df2a0:	33145c07 	.word	0x33145c07
   df2a4:	3c91a626 	.word	0x3c91a626
   df2a8:	54442d18 	.word	0x54442d18
   df2ac:	400921fb 	.word	0x400921fb
   df2b0:	3ff00000 	.word	0x3ff00000
   df2b4:	3fe00000 	.word	0x3fe00000

000df2b8 <__ieee754_asin>:
   df2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df2bc:	ec57 6b10 	vmov	r6, r7, d0
   df2c0:	4bcb      	ldr	r3, [pc, #812]	; (df5f0 <__ieee754_asin+0x338>)
   df2c2:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
   df2c6:	429d      	cmp	r5, r3
   df2c8:	b083      	sub	sp, #12
   df2ca:	dd17      	ble.n	df2fc <__ieee754_asin+0x44>
   df2cc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
   df2d0:	ee10 3a10 	vmov	r3, s0
   df2d4:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
   df2d8:	432b      	orrs	r3, r5
   df2da:	d02b      	beq.n	df334 <__ieee754_asin+0x7c>
   df2dc:	ee10 2a10 	vmov	r2, s0
   df2e0:	463b      	mov	r3, r7
   df2e2:	4630      	mov	r0, r6
   df2e4:	4639      	mov	r1, r7
   df2e6:	f003 fe67 	bl	e2fb8 <__aeabi_dsub>
   df2ea:	4602      	mov	r2, r0
   df2ec:	460b      	mov	r3, r1
   df2ee:	f004 f941 	bl	e3574 <__aeabi_ddiv>
   df2f2:	ec41 0b10 	vmov	d0, r0, r1
   df2f6:	b003      	add	sp, #12
   df2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df2fc:	4bbd      	ldr	r3, [pc, #756]	; (df5f4 <__ieee754_asin+0x33c>)
   df2fe:	429d      	cmp	r5, r3
   df300:	463c      	mov	r4, r7
   df302:	dc33      	bgt.n	df36c <__ieee754_asin+0xb4>
   df304:	f1b5 5f79 	cmp.w	r5, #1044381696	; 0x3e400000
   df308:	f280 817c 	bge.w	df604 <__ieee754_asin+0x34c>
   df30c:	a39c      	add	r3, pc, #624	; (adr r3, df580 <__ieee754_asin+0x2c8>)
   df30e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df312:	ee10 0a10 	vmov	r0, s0
   df316:	4639      	mov	r1, r7
   df318:	f003 fe50 	bl	e2fbc <__adddf3>
   df31c:	2200      	movs	r2, #0
   df31e:	4bb6      	ldr	r3, [pc, #728]	; (df5f8 <__ieee754_asin+0x340>)
   df320:	f004 fa8e 	bl	e3840 <__aeabi_dcmpgt>
   df324:	b310      	cbz	r0, df36c <__ieee754_asin+0xb4>
   df326:	4630      	mov	r0, r6
   df328:	4639      	mov	r1, r7
   df32a:	ec41 0b10 	vmov	d0, r0, r1
   df32e:	b003      	add	sp, #12
   df330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df334:	ee10 0a10 	vmov	r0, s0
   df338:	a393      	add	r3, pc, #588	; (adr r3, df588 <__ieee754_asin+0x2d0>)
   df33a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df33e:	4639      	mov	r1, r7
   df340:	f003 ffee 	bl	e3320 <__aeabi_dmul>
   df344:	a392      	add	r3, pc, #584	; (adr r3, df590 <__ieee754_asin+0x2d8>)
   df346:	e9d3 2300 	ldrd	r2, r3, [r3]
   df34a:	4604      	mov	r4, r0
   df34c:	460d      	mov	r5, r1
   df34e:	4630      	mov	r0, r6
   df350:	4639      	mov	r1, r7
   df352:	f003 ffe5 	bl	e3320 <__aeabi_dmul>
   df356:	4602      	mov	r2, r0
   df358:	460b      	mov	r3, r1
   df35a:	4620      	mov	r0, r4
   df35c:	4629      	mov	r1, r5
   df35e:	f003 fe2d 	bl	e2fbc <__adddf3>
   df362:	ec41 0b10 	vmov	d0, r0, r1
   df366:	b003      	add	sp, #12
   df368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df36c:	ec47 6b10 	vmov	d0, r6, r7
   df370:	f7fe fdce 	bl	ddf10 <fabs>
   df374:	2000      	movs	r0, #0
   df376:	ec53 2b10 	vmov	r2, r3, d0
   df37a:	499f      	ldr	r1, [pc, #636]	; (df5f8 <__ieee754_asin+0x340>)
   df37c:	f003 fe1c 	bl	e2fb8 <__aeabi_dsub>
   df380:	2200      	movs	r2, #0
   df382:	4b9e      	ldr	r3, [pc, #632]	; (df5fc <__ieee754_asin+0x344>)
   df384:	f003 ffcc 	bl	e3320 <__aeabi_dmul>
   df388:	a383      	add	r3, pc, #524	; (adr r3, df598 <__ieee754_asin+0x2e0>)
   df38a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df38e:	4606      	mov	r6, r0
   df390:	460f      	mov	r7, r1
   df392:	f003 ffc5 	bl	e3320 <__aeabi_dmul>
   df396:	a382      	add	r3, pc, #520	; (adr r3, df5a0 <__ieee754_asin+0x2e8>)
   df398:	e9d3 2300 	ldrd	r2, r3, [r3]
   df39c:	f003 fe0e 	bl	e2fbc <__adddf3>
   df3a0:	4632      	mov	r2, r6
   df3a2:	463b      	mov	r3, r7
   df3a4:	f003 ffbc 	bl	e3320 <__aeabi_dmul>
   df3a8:	a37f      	add	r3, pc, #508	; (adr r3, df5a8 <__ieee754_asin+0x2f0>)
   df3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3ae:	f003 fe03 	bl	e2fb8 <__aeabi_dsub>
   df3b2:	4632      	mov	r2, r6
   df3b4:	463b      	mov	r3, r7
   df3b6:	f003 ffb3 	bl	e3320 <__aeabi_dmul>
   df3ba:	a37d      	add	r3, pc, #500	; (adr r3, df5b0 <__ieee754_asin+0x2f8>)
   df3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3c0:	f003 fdfc 	bl	e2fbc <__adddf3>
   df3c4:	4632      	mov	r2, r6
   df3c6:	463b      	mov	r3, r7
   df3c8:	f003 ffaa 	bl	e3320 <__aeabi_dmul>
   df3cc:	a37a      	add	r3, pc, #488	; (adr r3, df5b8 <__ieee754_asin+0x300>)
   df3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3d2:	f003 fdf1 	bl	e2fb8 <__aeabi_dsub>
   df3d6:	4632      	mov	r2, r6
   df3d8:	463b      	mov	r3, r7
   df3da:	f003 ffa1 	bl	e3320 <__aeabi_dmul>
   df3de:	a378      	add	r3, pc, #480	; (adr r3, df5c0 <__ieee754_asin+0x308>)
   df3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3e4:	f003 fdea 	bl	e2fbc <__adddf3>
   df3e8:	4632      	mov	r2, r6
   df3ea:	463b      	mov	r3, r7
   df3ec:	f003 ff98 	bl	e3320 <__aeabi_dmul>
   df3f0:	a375      	add	r3, pc, #468	; (adr r3, df5c8 <__ieee754_asin+0x310>)
   df3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3f6:	4680      	mov	r8, r0
   df3f8:	4689      	mov	r9, r1
   df3fa:	4630      	mov	r0, r6
   df3fc:	4639      	mov	r1, r7
   df3fe:	f003 ff8f 	bl	e3320 <__aeabi_dmul>
   df402:	a373      	add	r3, pc, #460	; (adr r3, df5d0 <__ieee754_asin+0x318>)
   df404:	e9d3 2300 	ldrd	r2, r3, [r3]
   df408:	f003 fdd6 	bl	e2fb8 <__aeabi_dsub>
   df40c:	4632      	mov	r2, r6
   df40e:	463b      	mov	r3, r7
   df410:	f003 ff86 	bl	e3320 <__aeabi_dmul>
   df414:	a370      	add	r3, pc, #448	; (adr r3, df5d8 <__ieee754_asin+0x320>)
   df416:	e9d3 2300 	ldrd	r2, r3, [r3]
   df41a:	f003 fdcf 	bl	e2fbc <__adddf3>
   df41e:	4632      	mov	r2, r6
   df420:	463b      	mov	r3, r7
   df422:	f003 ff7d 	bl	e3320 <__aeabi_dmul>
   df426:	a36e      	add	r3, pc, #440	; (adr r3, df5e0 <__ieee754_asin+0x328>)
   df428:	e9d3 2300 	ldrd	r2, r3, [r3]
   df42c:	f003 fdc4 	bl	e2fb8 <__aeabi_dsub>
   df430:	4632      	mov	r2, r6
   df432:	463b      	mov	r3, r7
   df434:	f003 ff74 	bl	e3320 <__aeabi_dmul>
   df438:	4b6f      	ldr	r3, [pc, #444]	; (df5f8 <__ieee754_asin+0x340>)
   df43a:	2200      	movs	r2, #0
   df43c:	f003 fdbe 	bl	e2fbc <__adddf3>
   df440:	ec47 6b10 	vmov	d0, r6, r7
   df444:	e9cd 0100 	strd	r0, r1, [sp]
   df448:	f002 f942 	bl	e16d0 <__ieee754_sqrt>
   df44c:	4b6c      	ldr	r3, [pc, #432]	; (df600 <__ieee754_asin+0x348>)
   df44e:	429d      	cmp	r5, r3
   df450:	ec5b ab10 	vmov	sl, fp, d0
   df454:	e9dd 0100 	ldrd	r0, r1, [sp]
   df458:	dc6e      	bgt.n	df538 <__ieee754_asin+0x280>
   df45a:	4602      	mov	r2, r0
   df45c:	460b      	mov	r3, r1
   df45e:	4640      	mov	r0, r8
   df460:	4649      	mov	r1, r9
   df462:	2500      	movs	r5, #0
   df464:	e9cd ab00 	strd	sl, fp, [sp]
   df468:	9500      	str	r5, [sp, #0]
   df46a:	f004 f883 	bl	e3574 <__aeabi_ddiv>
   df46e:	e9dd 8900 	ldrd	r8, r9, [sp]
   df472:	4652      	mov	r2, sl
   df474:	e9cd 0100 	strd	r0, r1, [sp]
   df478:	465b      	mov	r3, fp
   df47a:	4650      	mov	r0, sl
   df47c:	4659      	mov	r1, fp
   df47e:	f003 fd9d 	bl	e2fbc <__adddf3>
   df482:	4602      	mov	r2, r0
   df484:	460b      	mov	r3, r1
   df486:	e9dd 0100 	ldrd	r0, r1, [sp]
   df48a:	f003 ff49 	bl	e3320 <__aeabi_dmul>
   df48e:	4642      	mov	r2, r8
   df490:	e9cd 0100 	strd	r0, r1, [sp]
   df494:	464b      	mov	r3, r9
   df496:	4640      	mov	r0, r8
   df498:	4649      	mov	r1, r9
   df49a:	f003 ff41 	bl	e3320 <__aeabi_dmul>
   df49e:	4602      	mov	r2, r0
   df4a0:	460b      	mov	r3, r1
   df4a2:	4630      	mov	r0, r6
   df4a4:	4639      	mov	r1, r7
   df4a6:	f003 fd87 	bl	e2fb8 <__aeabi_dsub>
   df4aa:	4642      	mov	r2, r8
   df4ac:	4606      	mov	r6, r0
   df4ae:	460f      	mov	r7, r1
   df4b0:	464b      	mov	r3, r9
   df4b2:	4650      	mov	r0, sl
   df4b4:	4659      	mov	r1, fp
   df4b6:	f003 fd81 	bl	e2fbc <__adddf3>
   df4ba:	4602      	mov	r2, r0
   df4bc:	460b      	mov	r3, r1
   df4be:	4630      	mov	r0, r6
   df4c0:	4639      	mov	r1, r7
   df4c2:	f004 f857 	bl	e3574 <__aeabi_ddiv>
   df4c6:	4602      	mov	r2, r0
   df4c8:	460b      	mov	r3, r1
   df4ca:	f003 fd77 	bl	e2fbc <__adddf3>
   df4ce:	4602      	mov	r2, r0
   df4d0:	460b      	mov	r3, r1
   df4d2:	a12f      	add	r1, pc, #188	; (adr r1, df590 <__ieee754_asin+0x2d8>)
   df4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   df4d8:	f003 fd6e 	bl	e2fb8 <__aeabi_dsub>
   df4dc:	4602      	mov	r2, r0
   df4de:	460b      	mov	r3, r1
   df4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
   df4e4:	f003 fd68 	bl	e2fb8 <__aeabi_dsub>
   df4e8:	4642      	mov	r2, r8
   df4ea:	4606      	mov	r6, r0
   df4ec:	460f      	mov	r7, r1
   df4ee:	464b      	mov	r3, r9
   df4f0:	4640      	mov	r0, r8
   df4f2:	4649      	mov	r1, r9
   df4f4:	f003 fd62 	bl	e2fbc <__adddf3>
   df4f8:	4602      	mov	r2, r0
   df4fa:	460b      	mov	r3, r1
   df4fc:	a13a      	add	r1, pc, #232	; (adr r1, df5e8 <__ieee754_asin+0x330>)
   df4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   df502:	f003 fd59 	bl	e2fb8 <__aeabi_dsub>
   df506:	4602      	mov	r2, r0
   df508:	460b      	mov	r3, r1
   df50a:	4630      	mov	r0, r6
   df50c:	4639      	mov	r1, r7
   df50e:	f003 fd53 	bl	e2fb8 <__aeabi_dsub>
   df512:	4602      	mov	r2, r0
   df514:	460b      	mov	r3, r1
   df516:	a134      	add	r1, pc, #208	; (adr r1, df5e8 <__ieee754_asin+0x330>)
   df518:	e9d1 0100 	ldrd	r0, r1, [r1]
   df51c:	f003 fd4c 	bl	e2fb8 <__aeabi_dsub>
   df520:	4602      	mov	r2, r0
   df522:	460b      	mov	r3, r1
   df524:	2c00      	cmp	r4, #0
   df526:	f340 80e4 	ble.w	df6f2 <__ieee754_asin+0x43a>
   df52a:	4610      	mov	r0, r2
   df52c:	4619      	mov	r1, r3
   df52e:	ec41 0b10 	vmov	d0, r0, r1
   df532:	b003      	add	sp, #12
   df534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df538:	4602      	mov	r2, r0
   df53a:	460b      	mov	r3, r1
   df53c:	4640      	mov	r0, r8
   df53e:	4649      	mov	r1, r9
   df540:	f004 f818 	bl	e3574 <__aeabi_ddiv>
   df544:	4652      	mov	r2, sl
   df546:	465b      	mov	r3, fp
   df548:	f003 feea 	bl	e3320 <__aeabi_dmul>
   df54c:	4652      	mov	r2, sl
   df54e:	465b      	mov	r3, fp
   df550:	f003 fd34 	bl	e2fbc <__adddf3>
   df554:	4602      	mov	r2, r0
   df556:	460b      	mov	r3, r1
   df558:	f003 fd30 	bl	e2fbc <__adddf3>
   df55c:	a30c      	add	r3, pc, #48	; (adr r3, df590 <__ieee754_asin+0x2d8>)
   df55e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df562:	f003 fd29 	bl	e2fb8 <__aeabi_dsub>
   df566:	4602      	mov	r2, r0
   df568:	460b      	mov	r3, r1
   df56a:	a107      	add	r1, pc, #28	; (adr r1, df588 <__ieee754_asin+0x2d0>)
   df56c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df570:	f003 fd22 	bl	e2fb8 <__aeabi_dsub>
   df574:	4602      	mov	r2, r0
   df576:	460b      	mov	r3, r1
   df578:	e7d4      	b.n	df524 <__ieee754_asin+0x26c>
   df57a:	bf00      	nop
   df57c:	f3af 8000 	nop.w
   df580:	8800759c 	.word	0x8800759c
   df584:	7e37e43c 	.word	0x7e37e43c
   df588:	54442d18 	.word	0x54442d18
   df58c:	3ff921fb 	.word	0x3ff921fb
   df590:	33145c07 	.word	0x33145c07
   df594:	3c91a626 	.word	0x3c91a626
   df598:	0dfdf709 	.word	0x0dfdf709
   df59c:	3f023de1 	.word	0x3f023de1
   df5a0:	7501b288 	.word	0x7501b288
   df5a4:	3f49efe0 	.word	0x3f49efe0
   df5a8:	b5688f3b 	.word	0xb5688f3b
   df5ac:	3fa48228 	.word	0x3fa48228
   df5b0:	0e884455 	.word	0x0e884455
   df5b4:	3fc9c155 	.word	0x3fc9c155
   df5b8:	03eb6f7d 	.word	0x03eb6f7d
   df5bc:	3fd4d612 	.word	0x3fd4d612
   df5c0:	55555555 	.word	0x55555555
   df5c4:	3fc55555 	.word	0x3fc55555
   df5c8:	b12e9282 	.word	0xb12e9282
   df5cc:	3fb3b8c5 	.word	0x3fb3b8c5
   df5d0:	1b8d0159 	.word	0x1b8d0159
   df5d4:	3fe6066c 	.word	0x3fe6066c
   df5d8:	9c598ac8 	.word	0x9c598ac8
   df5dc:	40002ae5 	.word	0x40002ae5
   df5e0:	1c8a2d4b 	.word	0x1c8a2d4b
   df5e4:	40033a27 	.word	0x40033a27
   df5e8:	54442d18 	.word	0x54442d18
   df5ec:	3fe921fb 	.word	0x3fe921fb
   df5f0:	3fefffff 	.word	0x3fefffff
   df5f4:	3fdfffff 	.word	0x3fdfffff
   df5f8:	3ff00000 	.word	0x3ff00000
   df5fc:	3fe00000 	.word	0x3fe00000
   df600:	3fef3332 	.word	0x3fef3332
   df604:	ee10 2a10 	vmov	r2, s0
   df608:	ee10 0a10 	vmov	r0, s0
   df60c:	463b      	mov	r3, r7
   df60e:	4639      	mov	r1, r7
   df610:	f003 fe86 	bl	e3320 <__aeabi_dmul>
   df614:	a33b      	add	r3, pc, #236	; (adr r3, df704 <__ieee754_asin+0x44c>)
   df616:	e9d3 2300 	ldrd	r2, r3, [r3]
   df61a:	4604      	mov	r4, r0
   df61c:	460d      	mov	r5, r1
   df61e:	f003 fe7f 	bl	e3320 <__aeabi_dmul>
   df622:	a33a      	add	r3, pc, #232	; (adr r3, df70c <__ieee754_asin+0x454>)
   df624:	e9d3 2300 	ldrd	r2, r3, [r3]
   df628:	f003 fcc8 	bl	e2fbc <__adddf3>
   df62c:	4622      	mov	r2, r4
   df62e:	462b      	mov	r3, r5
   df630:	f003 fe76 	bl	e3320 <__aeabi_dmul>
   df634:	a337      	add	r3, pc, #220	; (adr r3, df714 <__ieee754_asin+0x45c>)
   df636:	e9d3 2300 	ldrd	r2, r3, [r3]
   df63a:	f003 fcbd 	bl	e2fb8 <__aeabi_dsub>
   df63e:	4622      	mov	r2, r4
   df640:	462b      	mov	r3, r5
   df642:	f003 fe6d 	bl	e3320 <__aeabi_dmul>
   df646:	a335      	add	r3, pc, #212	; (adr r3, df71c <__ieee754_asin+0x464>)
   df648:	e9d3 2300 	ldrd	r2, r3, [r3]
   df64c:	f003 fcb6 	bl	e2fbc <__adddf3>
   df650:	4622      	mov	r2, r4
   df652:	462b      	mov	r3, r5
   df654:	f003 fe64 	bl	e3320 <__aeabi_dmul>
   df658:	a332      	add	r3, pc, #200	; (adr r3, df724 <__ieee754_asin+0x46c>)
   df65a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df65e:	f003 fcab 	bl	e2fb8 <__aeabi_dsub>
   df662:	4622      	mov	r2, r4
   df664:	462b      	mov	r3, r5
   df666:	f003 fe5b 	bl	e3320 <__aeabi_dmul>
   df66a:	a330      	add	r3, pc, #192	; (adr r3, df72c <__ieee754_asin+0x474>)
   df66c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df670:	f003 fca4 	bl	e2fbc <__adddf3>
   df674:	4622      	mov	r2, r4
   df676:	462b      	mov	r3, r5
   df678:	f003 fe52 	bl	e3320 <__aeabi_dmul>
   df67c:	a32d      	add	r3, pc, #180	; (adr r3, df734 <__ieee754_asin+0x47c>)
   df67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df682:	4680      	mov	r8, r0
   df684:	4689      	mov	r9, r1
   df686:	4620      	mov	r0, r4
   df688:	4629      	mov	r1, r5
   df68a:	f003 fe49 	bl	e3320 <__aeabi_dmul>
   df68e:	a32b      	add	r3, pc, #172	; (adr r3, df73c <__ieee754_asin+0x484>)
   df690:	e9d3 2300 	ldrd	r2, r3, [r3]
   df694:	f003 fc90 	bl	e2fb8 <__aeabi_dsub>
   df698:	4622      	mov	r2, r4
   df69a:	462b      	mov	r3, r5
   df69c:	f003 fe40 	bl	e3320 <__aeabi_dmul>
   df6a0:	a328      	add	r3, pc, #160	; (adr r3, df744 <__ieee754_asin+0x48c>)
   df6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6a6:	f003 fc89 	bl	e2fbc <__adddf3>
   df6aa:	4622      	mov	r2, r4
   df6ac:	462b      	mov	r3, r5
   df6ae:	f003 fe37 	bl	e3320 <__aeabi_dmul>
   df6b2:	a326      	add	r3, pc, #152	; (adr r3, df74c <__ieee754_asin+0x494>)
   df6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6b8:	f003 fc7e 	bl	e2fb8 <__aeabi_dsub>
   df6bc:	4622      	mov	r2, r4
   df6be:	462b      	mov	r3, r5
   df6c0:	f003 fe2e 	bl	e3320 <__aeabi_dmul>
   df6c4:	2200      	movs	r2, #0
   df6c6:	4b0e      	ldr	r3, [pc, #56]	; (df700 <__ieee754_asin+0x448>)
   df6c8:	f003 fc78 	bl	e2fbc <__adddf3>
   df6cc:	4602      	mov	r2, r0
   df6ce:	460b      	mov	r3, r1
   df6d0:	4640      	mov	r0, r8
   df6d2:	4649      	mov	r1, r9
   df6d4:	f003 ff4e 	bl	e3574 <__aeabi_ddiv>
   df6d8:	4632      	mov	r2, r6
   df6da:	463b      	mov	r3, r7
   df6dc:	f003 fe20 	bl	e3320 <__aeabi_dmul>
   df6e0:	4632      	mov	r2, r6
   df6e2:	463b      	mov	r3, r7
   df6e4:	f003 fc6a 	bl	e2fbc <__adddf3>
   df6e8:	ec41 0b10 	vmov	d0, r0, r1
   df6ec:	b003      	add	sp, #12
   df6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df6f2:	4610      	mov	r0, r2
   df6f4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df6f8:	e5fb      	b.n	df2f2 <__ieee754_asin+0x3a>
   df6fa:	bf00      	nop
   df6fc:	f3af 8000 	nop.w
   df700:	3ff00000 	.word	0x3ff00000
   df704:	0dfdf709 	.word	0x0dfdf709
   df708:	3f023de1 	.word	0x3f023de1
   df70c:	7501b288 	.word	0x7501b288
   df710:	3f49efe0 	.word	0x3f49efe0
   df714:	b5688f3b 	.word	0xb5688f3b
   df718:	3fa48228 	.word	0x3fa48228
   df71c:	0e884455 	.word	0x0e884455
   df720:	3fc9c155 	.word	0x3fc9c155
   df724:	03eb6f7d 	.word	0x03eb6f7d
   df728:	3fd4d612 	.word	0x3fd4d612
   df72c:	55555555 	.word	0x55555555
   df730:	3fc55555 	.word	0x3fc55555
   df734:	b12e9282 	.word	0xb12e9282
   df738:	3fb3b8c5 	.word	0x3fb3b8c5
   df73c:	1b8d0159 	.word	0x1b8d0159
   df740:	3fe6066c 	.word	0x3fe6066c
   df744:	9c598ac8 	.word	0x9c598ac8
   df748:	40002ae5 	.word	0x40002ae5
   df74c:	1c8a2d4b 	.word	0x1c8a2d4b
   df750:	40033a27 	.word	0x40033a27
   df754:	00000000 	.word	0x00000000

000df758 <__ieee754_atan2>:
   df758:	ec51 0b11 	vmov	r0, r1, d1
   df75c:	4243      	negs	r3, r0
   df75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df762:	4303      	orrs	r3, r0
   df764:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   df768:	4f75      	ldr	r7, [pc, #468]	; (df940 <__ieee754_atan2+0x1e8>)
   df76a:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   df76e:	42bb      	cmp	r3, r7
   df770:	ec55 4b10 	vmov	r4, r5, d0
   df774:	d849      	bhi.n	df80a <__ieee754_atan2+0xb2>
   df776:	4263      	negs	r3, r4
   df778:	4323      	orrs	r3, r4
   df77a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   df77e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   df782:	42bb      	cmp	r3, r7
   df784:	46a9      	mov	r9, r5
   df786:	d840      	bhi.n	df80a <__ieee754_atan2+0xb2>
   df788:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   df78c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   df790:	4303      	orrs	r3, r0
   df792:	468e      	mov	lr, r1
   df794:	d050      	beq.n	df838 <__ieee754_atan2+0xe0>
   df796:	178e      	asrs	r6, r1, #30
   df798:	f006 0602 	and.w	r6, r6, #2
   df79c:	ea54 030a 	orrs.w	r3, r4, sl
   df7a0:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
   df7a4:	d039      	beq.n	df81a <__ieee754_atan2+0xc2>
   df7a6:	ea50 0308 	orrs.w	r3, r0, r8
   df7aa:	d03e      	beq.n	df82a <__ieee754_atan2+0xd2>
   df7ac:	45b8      	cmp	r8, r7
   df7ae:	d055      	beq.n	df85c <__ieee754_atan2+0x104>
   df7b0:	45ba      	cmp	sl, r7
   df7b2:	d03a      	beq.n	df82a <__ieee754_atan2+0xd2>
   df7b4:	ebc8 080a 	rsb	r8, r8, sl
   df7b8:	ea4f 5828 	mov.w	r8, r8, asr #20
   df7bc:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
   df7c0:	dc40      	bgt.n	df844 <__ieee754_atan2+0xec>
   df7c2:	2900      	cmp	r1, #0
   df7c4:	db70      	blt.n	df8a8 <__ieee754_atan2+0x150>
   df7c6:	4602      	mov	r2, r0
   df7c8:	460b      	mov	r3, r1
   df7ca:	4620      	mov	r0, r4
   df7cc:	4629      	mov	r1, r5
   df7ce:	f003 fed1 	bl	e3574 <__aeabi_ddiv>
   df7d2:	ec41 0b10 	vmov	d0, r0, r1
   df7d6:	f7fe fb9b 	bl	ddf10 <fabs>
   df7da:	f7fe f8ed 	bl	dd9b8 <atan>
   df7de:	ec51 0b10 	vmov	r0, r1, d0
   df7e2:	2e01      	cmp	r6, #1
   df7e4:	d05a      	beq.n	df89c <__ieee754_atan2+0x144>
   df7e6:	2e02      	cmp	r6, #2
   df7e8:	d048      	beq.n	df87c <__ieee754_atan2+0x124>
   df7ea:	2e00      	cmp	r6, #0
   df7ec:	d042      	beq.n	df874 <__ieee754_atan2+0x11c>
   df7ee:	a33e      	add	r3, pc, #248	; (adr r3, df8e8 <__ieee754_atan2+0x190>)
   df7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7f4:	f003 fbe0 	bl	e2fb8 <__aeabi_dsub>
   df7f8:	a33d      	add	r3, pc, #244	; (adr r3, df8f0 <__ieee754_atan2+0x198>)
   df7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7fe:	f003 fbdb 	bl	e2fb8 <__aeabi_dsub>
   df802:	ec41 0b10 	vmov	d0, r0, r1
   df806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df80a:	4622      	mov	r2, r4
   df80c:	462b      	mov	r3, r5
   df80e:	f003 fbd5 	bl	e2fbc <__adddf3>
   df812:	ec41 0b10 	vmov	d0, r0, r1
   df816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df81a:	2e02      	cmp	r6, #2
   df81c:	d016      	beq.n	df84c <__ieee754_atan2+0xf4>
   df81e:	2e03      	cmp	r6, #3
   df820:	d10e      	bne.n	df840 <__ieee754_atan2+0xe8>
   df822:	ed9f 0b35 	vldr	d0, [pc, #212]	; df8f8 <__ieee754_atan2+0x1a0>
   df826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df82a:	f1b9 0f00 	cmp.w	r9, #0
   df82e:	db11      	blt.n	df854 <__ieee754_atan2+0xfc>
   df830:	ed9f 0b33 	vldr	d0, [pc, #204]	; df900 <__ieee754_atan2+0x1a8>
   df834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df83c:	f7fe b8bc 	b.w	dd9b8 <atan>
   df840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df844:	a12e      	add	r1, pc, #184	; (adr r1, df900 <__ieee754_atan2+0x1a8>)
   df846:	e9d1 0100 	ldrd	r0, r1, [r1]
   df84a:	e7ca      	b.n	df7e2 <__ieee754_atan2+0x8a>
   df84c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df8f0 <__ieee754_atan2+0x198>
   df850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df854:	ed9f 0b2c 	vldr	d0, [pc, #176]	; df908 <__ieee754_atan2+0x1b0>
   df858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df85c:	45c2      	cmp	sl, r8
   df85e:	d029      	beq.n	df8b4 <__ieee754_atan2+0x15c>
   df860:	2e02      	cmp	r6, #2
   df862:	d0f3      	beq.n	df84c <__ieee754_atan2+0xf4>
   df864:	2e03      	cmp	r6, #3
   df866:	d0dc      	beq.n	df822 <__ieee754_atan2+0xca>
   df868:	2e01      	cmp	r6, #1
   df86a:	d02d      	beq.n	df8c8 <__ieee754_atan2+0x170>
   df86c:	ed9f 0b28 	vldr	d0, [pc, #160]	; df910 <__ieee754_atan2+0x1b8>
   df870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df874:	ec41 0b10 	vmov	d0, r0, r1
   df878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df87c:	a31a      	add	r3, pc, #104	; (adr r3, df8e8 <__ieee754_atan2+0x190>)
   df87e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df882:	f003 fb99 	bl	e2fb8 <__aeabi_dsub>
   df886:	4602      	mov	r2, r0
   df888:	460b      	mov	r3, r1
   df88a:	a119      	add	r1, pc, #100	; (adr r1, df8f0 <__ieee754_atan2+0x198>)
   df88c:	e9d1 0100 	ldrd	r0, r1, [r1]
   df890:	f003 fb92 	bl	e2fb8 <__aeabi_dsub>
   df894:	ec41 0b10 	vmov	d0, r0, r1
   df898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df89c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   df8a0:	ec41 0b10 	vmov	d0, r0, r1
   df8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8a8:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
   df8ac:	da8b      	bge.n	df7c6 <__ieee754_atan2+0x6e>
   df8ae:	2000      	movs	r0, #0
   df8b0:	2100      	movs	r1, #0
   df8b2:	e796      	b.n	df7e2 <__ieee754_atan2+0x8a>
   df8b4:	2e02      	cmp	r6, #2
   df8b6:	d013      	beq.n	df8e0 <__ieee754_atan2+0x188>
   df8b8:	2e03      	cmp	r6, #3
   df8ba:	d00d      	beq.n	df8d8 <__ieee754_atan2+0x180>
   df8bc:	2e01      	cmp	r6, #1
   df8be:	d007      	beq.n	df8d0 <__ieee754_atan2+0x178>
   df8c0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df918 <__ieee754_atan2+0x1c0>
   df8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8c8:	ed9f 0b15 	vldr	d0, [pc, #84]	; df920 <__ieee754_atan2+0x1c8>
   df8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8d0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df928 <__ieee754_atan2+0x1d0>
   df8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8d8:	ed9f 0b15 	vldr	d0, [pc, #84]	; df930 <__ieee754_atan2+0x1d8>
   df8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8e0:	ed9f 0b15 	vldr	d0, [pc, #84]	; df938 <__ieee754_atan2+0x1e0>
   df8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8e8:	33145c07 	.word	0x33145c07
   df8ec:	3ca1a626 	.word	0x3ca1a626
   df8f0:	54442d18 	.word	0x54442d18
   df8f4:	400921fb 	.word	0x400921fb
   df8f8:	54442d18 	.word	0x54442d18
   df8fc:	c00921fb 	.word	0xc00921fb
   df900:	54442d18 	.word	0x54442d18
   df904:	3ff921fb 	.word	0x3ff921fb
   df908:	54442d18 	.word	0x54442d18
   df90c:	bff921fb 	.word	0xbff921fb
	...
   df918:	54442d18 	.word	0x54442d18
   df91c:	3fe921fb 	.word	0x3fe921fb
   df920:	00000000 	.word	0x00000000
   df924:	80000000 	.word	0x80000000
   df928:	54442d18 	.word	0x54442d18
   df92c:	bfe921fb 	.word	0xbfe921fb
   df930:	7f3321d2 	.word	0x7f3321d2
   df934:	c002d97c 	.word	0xc002d97c
   df938:	7f3321d2 	.word	0x7f3321d2
   df93c:	4002d97c 	.word	0x4002d97c
   df940:	7ff00000 	.word	0x7ff00000
   df944:	00000000 	.word	0x00000000

000df948 <__ieee754_cosh>:
   df948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   df94c:	ec53 2b10 	vmov	r2, r3, d0
   df950:	4953      	ldr	r1, [pc, #332]	; (dfaa0 <__ieee754_cosh+0x158>)
   df952:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   df956:	428c      	cmp	r4, r1
   df958:	dc12      	bgt.n	df980 <__ieee754_cosh+0x38>
   df95a:	4952      	ldr	r1, [pc, #328]	; (dfaa4 <__ieee754_cosh+0x15c>)
   df95c:	428c      	cmp	r4, r1
   df95e:	dd17      	ble.n	df990 <__ieee754_cosh+0x48>
   df960:	4951      	ldr	r1, [pc, #324]	; (dfaa8 <__ieee754_cosh+0x160>)
   df962:	428c      	cmp	r4, r1
   df964:	dd64      	ble.n	dfa30 <__ieee754_cosh+0xe8>
   df966:	4951      	ldr	r1, [pc, #324]	; (dfaac <__ieee754_cosh+0x164>)
   df968:	428c      	cmp	r4, r1
   df96a:	f340 8084 	ble.w	dfa76 <__ieee754_cosh+0x12e>
   df96e:	4950      	ldr	r1, [pc, #320]	; (dfab0 <__ieee754_cosh+0x168>)
   df970:	428c      	cmp	r4, r1
   df972:	dd3e      	ble.n	df9f2 <__ieee754_cosh+0xaa>
   df974:	3101      	adds	r1, #1
   df976:	428c      	cmp	r4, r1
   df978:	d038      	beq.n	df9ec <__ieee754_cosh+0xa4>
   df97a:	a347      	add	r3, pc, #284	; (adr r3, dfa98 <__ieee754_cosh+0x150>)
   df97c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df980:	4610      	mov	r0, r2
   df982:	4619      	mov	r1, r3
   df984:	f003 fccc 	bl	e3320 <__aeabi_dmul>
   df988:	ec41 0b10 	vmov	d0, r0, r1
   df98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df990:	f7fe fabe 	bl	ddf10 <fabs>
   df994:	f002 ff70 	bl	e2878 <expm1>
   df998:	ec59 8b10 	vmov	r8, r9, d0
   df99c:	2200      	movs	r2, #0
   df99e:	4b45      	ldr	r3, [pc, #276]	; (dfab4 <__ieee754_cosh+0x16c>)
   df9a0:	ee10 0a10 	vmov	r0, s0
   df9a4:	4649      	mov	r1, r9
   df9a6:	f003 fb09 	bl	e2fbc <__adddf3>
   df9aa:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
   df9ae:	4606      	mov	r6, r0
   df9b0:	460f      	mov	r7, r1
   df9b2:	db5c      	blt.n	dfa6e <__ieee754_cosh+0x126>
   df9b4:	4642      	mov	r2, r8
   df9b6:	464b      	mov	r3, r9
   df9b8:	4640      	mov	r0, r8
   df9ba:	4649      	mov	r1, r9
   df9bc:	f003 fcb0 	bl	e3320 <__aeabi_dmul>
   df9c0:	4632      	mov	r2, r6
   df9c2:	4604      	mov	r4, r0
   df9c4:	460d      	mov	r5, r1
   df9c6:	463b      	mov	r3, r7
   df9c8:	4630      	mov	r0, r6
   df9ca:	4639      	mov	r1, r7
   df9cc:	f003 faf6 	bl	e2fbc <__adddf3>
   df9d0:	4602      	mov	r2, r0
   df9d2:	460b      	mov	r3, r1
   df9d4:	4620      	mov	r0, r4
   df9d6:	4629      	mov	r1, r5
   df9d8:	f003 fdcc 	bl	e3574 <__aeabi_ddiv>
   df9dc:	2200      	movs	r2, #0
   df9de:	4b35      	ldr	r3, [pc, #212]	; (dfab4 <__ieee754_cosh+0x16c>)
   df9e0:	f003 faec 	bl	e2fbc <__adddf3>
   df9e4:	ec41 0b10 	vmov	d0, r0, r1
   df9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   df9ec:	4932      	ldr	r1, [pc, #200]	; (dfab8 <__ieee754_cosh+0x170>)
   df9ee:	428a      	cmp	r2, r1
   df9f0:	d8c3      	bhi.n	df97a <__ieee754_cosh+0x32>
   df9f2:	ec43 2b10 	vmov	d0, r2, r3
   df9f6:	f7fe fa8b 	bl	ddf10 <fabs>
   df9fa:	2200      	movs	r2, #0
   df9fc:	4b2f      	ldr	r3, [pc, #188]	; (dfabc <__ieee754_cosh+0x174>)
   df9fe:	ec51 0b10 	vmov	r0, r1, d0
   dfa02:	f003 fc8d 	bl	e3320 <__aeabi_dmul>
   dfa06:	ec41 0b10 	vmov	d0, r0, r1
   dfa0a:	f000 f859 	bl	dfac0 <__ieee754_exp>
   dfa0e:	ec55 4b10 	vmov	r4, r5, d0
   dfa12:	ee10 0a10 	vmov	r0, s0
   dfa16:	2200      	movs	r2, #0
   dfa18:	4b28      	ldr	r3, [pc, #160]	; (dfabc <__ieee754_cosh+0x174>)
   dfa1a:	4629      	mov	r1, r5
   dfa1c:	f003 fc80 	bl	e3320 <__aeabi_dmul>
   dfa20:	4622      	mov	r2, r4
   dfa22:	462b      	mov	r3, r5
   dfa24:	f003 fc7c 	bl	e3320 <__aeabi_dmul>
   dfa28:	ec41 0b10 	vmov	d0, r0, r1
   dfa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dfa30:	f7fe fa6e 	bl	ddf10 <fabs>
   dfa34:	f000 f844 	bl	dfac0 <__ieee754_exp>
   dfa38:	ec55 4b10 	vmov	r4, r5, d0
   dfa3c:	ee10 0a10 	vmov	r0, s0
   dfa40:	2200      	movs	r2, #0
   dfa42:	4b1e      	ldr	r3, [pc, #120]	; (dfabc <__ieee754_cosh+0x174>)
   dfa44:	4629      	mov	r1, r5
   dfa46:	f003 fc6b 	bl	e3320 <__aeabi_dmul>
   dfa4a:	4622      	mov	r2, r4
   dfa4c:	4606      	mov	r6, r0
   dfa4e:	460f      	mov	r7, r1
   dfa50:	462b      	mov	r3, r5
   dfa52:	2000      	movs	r0, #0
   dfa54:	4919      	ldr	r1, [pc, #100]	; (dfabc <__ieee754_cosh+0x174>)
   dfa56:	f003 fd8d 	bl	e3574 <__aeabi_ddiv>
   dfa5a:	4602      	mov	r2, r0
   dfa5c:	460b      	mov	r3, r1
   dfa5e:	4630      	mov	r0, r6
   dfa60:	4639      	mov	r1, r7
   dfa62:	f003 faab 	bl	e2fbc <__adddf3>
   dfa66:	ec41 0b10 	vmov	d0, r0, r1
   dfa6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dfa6e:	ec47 6b10 	vmov	d0, r6, r7
   dfa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dfa76:	f7fe fa4b 	bl	ddf10 <fabs>
   dfa7a:	f000 f821 	bl	dfac0 <__ieee754_exp>
   dfa7e:	2200      	movs	r2, #0
   dfa80:	4b0e      	ldr	r3, [pc, #56]	; (dfabc <__ieee754_cosh+0x174>)
   dfa82:	ec51 0b10 	vmov	r0, r1, d0
   dfa86:	f003 fc4b 	bl	e3320 <__aeabi_dmul>
   dfa8a:	ec41 0b10 	vmov	d0, r0, r1
   dfa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dfa92:	bf00      	nop
   dfa94:	f3af 8000 	nop.w
   dfa98:	8800759c 	.word	0x8800759c
   dfa9c:	7e37e43c 	.word	0x7e37e43c
   dfaa0:	7fefffff 	.word	0x7fefffff
   dfaa4:	3fd62e42 	.word	0x3fd62e42
   dfaa8:	4035ffff 	.word	0x4035ffff
   dfaac:	40862e41 	.word	0x40862e41
   dfab0:	408633cd 	.word	0x408633cd
   dfab4:	3ff00000 	.word	0x3ff00000
   dfab8:	8fb9f87d 	.word	0x8fb9f87d
   dfabc:	3fe00000 	.word	0x3fe00000

000dfac0 <__ieee754_exp>:
   dfac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfac4:	ec55 4b10 	vmov	r4, r5, d0
   dfac8:	49bd      	ldr	r1, [pc, #756]	; (dfdc0 <__ieee754_exp+0x300>)
   dfaca:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   dface:	428a      	cmp	r2, r1
   dfad0:	b083      	sub	sp, #12
   dfad2:	ea4f 77d5 	mov.w	r7, r5, lsr #31
   dfad6:	d90d      	bls.n	dfaf4 <__ieee754_exp+0x34>
   dfad8:	49ba      	ldr	r1, [pc, #744]	; (dfdc4 <__ieee754_exp+0x304>)
   dfada:	428a      	cmp	r2, r1
   dfadc:	d92a      	bls.n	dfb34 <__ieee754_exp+0x74>
   dfade:	f3c5 0313 	ubfx	r3, r5, #0, #20
   dfae2:	4323      	orrs	r3, r4
   dfae4:	f040 80fa 	bne.w	dfcdc <__ieee754_exp+0x21c>
   dfae8:	b10f      	cbz	r7, dfaee <__ieee754_exp+0x2e>
   dfaea:	ed9f 0b9d 	vldr	d0, [pc, #628]	; dfd60 <__ieee754_exp+0x2a0>
   dfaee:	b003      	add	sp, #12
   dfaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfaf4:	4bb4      	ldr	r3, [pc, #720]	; (dfdc8 <__ieee754_exp+0x308>)
   dfaf6:	429a      	cmp	r2, r3
   dfaf8:	f200 80d5 	bhi.w	dfca6 <__ieee754_exp+0x1e6>
   dfafc:	4bb3      	ldr	r3, [pc, #716]	; (dfdcc <__ieee754_exp+0x30c>)
   dfafe:	429a      	cmp	r2, r3
   dfb00:	f200 80ea 	bhi.w	dfcd8 <__ieee754_exp+0x218>
   dfb04:	a398      	add	r3, pc, #608	; (adr r3, dfd68 <__ieee754_exp+0x2a8>)
   dfb06:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb0a:	ee10 0a10 	vmov	r0, s0
   dfb0e:	4629      	mov	r1, r5
   dfb10:	f003 fa54 	bl	e2fbc <__adddf3>
   dfb14:	2200      	movs	r2, #0
   dfb16:	4bae      	ldr	r3, [pc, #696]	; (dfdd0 <__ieee754_exp+0x310>)
   dfb18:	f003 fe92 	bl	e3840 <__aeabi_dcmpgt>
   dfb1c:	2800      	cmp	r0, #0
   dfb1e:	f000 811c 	beq.w	dfd5a <__ieee754_exp+0x29a>
   dfb22:	4620      	mov	r0, r4
   dfb24:	4629      	mov	r1, r5
   dfb26:	2200      	movs	r2, #0
   dfb28:	4ba9      	ldr	r3, [pc, #676]	; (dfdd0 <__ieee754_exp+0x310>)
   dfb2a:	f003 fa47 	bl	e2fbc <__adddf3>
   dfb2e:	ec41 0b10 	vmov	d0, r0, r1
   dfb32:	e7dc      	b.n	dfaee <__ieee754_exp+0x2e>
   dfb34:	a38e      	add	r3, pc, #568	; (adr r3, dfd70 <__ieee754_exp+0x2b0>)
   dfb36:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb3a:	ee10 0a10 	vmov	r0, s0
   dfb3e:	4629      	mov	r1, r5
   dfb40:	f003 fe7e 	bl	e3840 <__aeabi_dcmpgt>
   dfb44:	2800      	cmp	r0, #0
   dfb46:	f040 80d3 	bne.w	dfcf0 <__ieee754_exp+0x230>
   dfb4a:	a38b      	add	r3, pc, #556	; (adr r3, dfd78 <__ieee754_exp+0x2b8>)
   dfb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb50:	4620      	mov	r0, r4
   dfb52:	4629      	mov	r1, r5
   dfb54:	f003 fe56 	bl	e3804 <__aeabi_dcmplt>
   dfb58:	2800      	cmp	r0, #0
   dfb5a:	d1c6      	bne.n	dfaea <__ieee754_exp+0x2a>
   dfb5c:	4e9d      	ldr	r6, [pc, #628]	; (dfdd4 <__ieee754_exp+0x314>)
   dfb5e:	a388      	add	r3, pc, #544	; (adr r3, dfd80 <__ieee754_exp+0x2c0>)
   dfb60:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb64:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   dfb68:	4620      	mov	r0, r4
   dfb6a:	4629      	mov	r1, r5
   dfb6c:	f003 fbd8 	bl	e3320 <__aeabi_dmul>
   dfb70:	e9d6 2300 	ldrd	r2, r3, [r6]
   dfb74:	f003 fa22 	bl	e2fbc <__adddf3>
   dfb78:	f003 fe82 	bl	e3880 <__aeabi_d2iz>
   dfb7c:	4606      	mov	r6, r0
   dfb7e:	f003 fb69 	bl	e3254 <__aeabi_i2d>
   dfb82:	a381      	add	r3, pc, #516	; (adr r3, dfd88 <__ieee754_exp+0x2c8>)
   dfb84:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb88:	4680      	mov	r8, r0
   dfb8a:	4689      	mov	r9, r1
   dfb8c:	f003 fbc8 	bl	e3320 <__aeabi_dmul>
   dfb90:	4602      	mov	r2, r0
   dfb92:	460b      	mov	r3, r1
   dfb94:	4620      	mov	r0, r4
   dfb96:	4629      	mov	r1, r5
   dfb98:	f003 fa0e 	bl	e2fb8 <__aeabi_dsub>
   dfb9c:	a37c      	add	r3, pc, #496	; (adr r3, dfd90 <__ieee754_exp+0x2d0>)
   dfb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfba2:	e9cd 0100 	strd	r0, r1, [sp]
   dfba6:	4640      	mov	r0, r8
   dfba8:	4649      	mov	r1, r9
   dfbaa:	f003 fbb9 	bl	e3320 <__aeabi_dmul>
   dfbae:	4682      	mov	sl, r0
   dfbb0:	468b      	mov	fp, r1
   dfbb2:	4652      	mov	r2, sl
   dfbb4:	465b      	mov	r3, fp
   dfbb6:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfbba:	f003 f9fd 	bl	e2fb8 <__aeabi_dsub>
   dfbbe:	4604      	mov	r4, r0
   dfbc0:	460d      	mov	r5, r1
   dfbc2:	4622      	mov	r2, r4
   dfbc4:	462b      	mov	r3, r5
   dfbc6:	4620      	mov	r0, r4
   dfbc8:	4629      	mov	r1, r5
   dfbca:	f003 fba9 	bl	e3320 <__aeabi_dmul>
   dfbce:	a372      	add	r3, pc, #456	; (adr r3, dfd98 <__ieee754_exp+0x2d8>)
   dfbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbd4:	4680      	mov	r8, r0
   dfbd6:	4689      	mov	r9, r1
   dfbd8:	f003 fba2 	bl	e3320 <__aeabi_dmul>
   dfbdc:	a370      	add	r3, pc, #448	; (adr r3, dfda0 <__ieee754_exp+0x2e0>)
   dfbde:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbe2:	f003 f9e9 	bl	e2fb8 <__aeabi_dsub>
   dfbe6:	4642      	mov	r2, r8
   dfbe8:	464b      	mov	r3, r9
   dfbea:	f003 fb99 	bl	e3320 <__aeabi_dmul>
   dfbee:	a36e      	add	r3, pc, #440	; (adr r3, dfda8 <__ieee754_exp+0x2e8>)
   dfbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfbf4:	f003 f9e2 	bl	e2fbc <__adddf3>
   dfbf8:	4642      	mov	r2, r8
   dfbfa:	464b      	mov	r3, r9
   dfbfc:	f003 fb90 	bl	e3320 <__aeabi_dmul>
   dfc00:	a36b      	add	r3, pc, #428	; (adr r3, dfdb0 <__ieee754_exp+0x2f0>)
   dfc02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc06:	f003 f9d7 	bl	e2fb8 <__aeabi_dsub>
   dfc0a:	4642      	mov	r2, r8
   dfc0c:	464b      	mov	r3, r9
   dfc0e:	f003 fb87 	bl	e3320 <__aeabi_dmul>
   dfc12:	a369      	add	r3, pc, #420	; (adr r3, dfdb8 <__ieee754_exp+0x2f8>)
   dfc14:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc18:	f003 f9d0 	bl	e2fbc <__adddf3>
   dfc1c:	4642      	mov	r2, r8
   dfc1e:	464b      	mov	r3, r9
   dfc20:	f003 fb7e 	bl	e3320 <__aeabi_dmul>
   dfc24:	4602      	mov	r2, r0
   dfc26:	460b      	mov	r3, r1
   dfc28:	4620      	mov	r0, r4
   dfc2a:	4629      	mov	r1, r5
   dfc2c:	f003 f9c4 	bl	e2fb8 <__aeabi_dsub>
   dfc30:	4680      	mov	r8, r0
   dfc32:	4689      	mov	r9, r1
   dfc34:	2e00      	cmp	r6, #0
   dfc36:	d065      	beq.n	dfd04 <__ieee754_exp+0x244>
   dfc38:	4620      	mov	r0, r4
   dfc3a:	4629      	mov	r1, r5
   dfc3c:	4642      	mov	r2, r8
   dfc3e:	464b      	mov	r3, r9
   dfc40:	f003 fb6e 	bl	e3320 <__aeabi_dmul>
   dfc44:	4642      	mov	r2, r8
   dfc46:	4604      	mov	r4, r0
   dfc48:	460d      	mov	r5, r1
   dfc4a:	464b      	mov	r3, r9
   dfc4c:	2000      	movs	r0, #0
   dfc4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   dfc52:	f003 f9b1 	bl	e2fb8 <__aeabi_dsub>
   dfc56:	4602      	mov	r2, r0
   dfc58:	460b      	mov	r3, r1
   dfc5a:	4620      	mov	r0, r4
   dfc5c:	4629      	mov	r1, r5
   dfc5e:	f003 fc89 	bl	e3574 <__aeabi_ddiv>
   dfc62:	4602      	mov	r2, r0
   dfc64:	460b      	mov	r3, r1
   dfc66:	4650      	mov	r0, sl
   dfc68:	4659      	mov	r1, fp
   dfc6a:	f003 f9a5 	bl	e2fb8 <__aeabi_dsub>
   dfc6e:	e9dd 2300 	ldrd	r2, r3, [sp]
   dfc72:	f003 f9a1 	bl	e2fb8 <__aeabi_dsub>
   dfc76:	460b      	mov	r3, r1
   dfc78:	4602      	mov	r2, r0
   dfc7a:	4955      	ldr	r1, [pc, #340]	; (dfdd0 <__ieee754_exp+0x310>)
   dfc7c:	2000      	movs	r0, #0
   dfc7e:	f003 f99b 	bl	e2fb8 <__aeabi_dsub>
   dfc82:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   dfc86:	429e      	cmp	r6, r3
   dfc88:	da60      	bge.n	dfd4c <__ieee754_exp+0x28c>
   dfc8a:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
   dfc8e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   dfc92:	2200      	movs	r2, #0
   dfc94:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
   dfc98:	f003 fb42 	bl	e3320 <__aeabi_dmul>
   dfc9c:	ec41 0b10 	vmov	d0, r0, r1
   dfca0:	b003      	add	sp, #12
   dfca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfca6:	4b4c      	ldr	r3, [pc, #304]	; (dfdd8 <__ieee754_exp+0x318>)
   dfca8:	429a      	cmp	r2, r3
   dfcaa:	f63f af57 	bhi.w	dfb5c <__ieee754_exp+0x9c>
   dfcae:	4b4b      	ldr	r3, [pc, #300]	; (dfddc <__ieee754_exp+0x31c>)
   dfcb0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
   dfcb4:	4443      	add	r3, r8
   dfcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcba:	ee10 0a10 	vmov	r0, s0
   dfcbe:	4629      	mov	r1, r5
   dfcc0:	f003 f97a 	bl	e2fb8 <__aeabi_dsub>
   dfcc4:	4b46      	ldr	r3, [pc, #280]	; (dfde0 <__ieee754_exp+0x320>)
   dfcc6:	f1c7 0601 	rsb	r6, r7, #1
   dfcca:	4498      	add	r8, r3
   dfccc:	e9cd 0100 	strd	r0, r1, [sp]
   dfcd0:	e9d8 ab00 	ldrd	sl, fp, [r8]
   dfcd4:	1bf6      	subs	r6, r6, r7
   dfcd6:	e76c      	b.n	dfbb2 <__ieee754_exp+0xf2>
   dfcd8:	2600      	movs	r6, #0
   dfcda:	e772      	b.n	dfbc2 <__ieee754_exp+0x102>
   dfcdc:	ee10 2a10 	vmov	r2, s0
   dfce0:	462b      	mov	r3, r5
   dfce2:	4620      	mov	r0, r4
   dfce4:	4629      	mov	r1, r5
   dfce6:	f003 f969 	bl	e2fbc <__adddf3>
   dfcea:	ec41 0b10 	vmov	d0, r0, r1
   dfcee:	e6fe      	b.n	dfaee <__ieee754_exp+0x2e>
   dfcf0:	a31d      	add	r3, pc, #116	; (adr r3, dfd68 <__ieee754_exp+0x2a8>)
   dfcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfcf6:	4610      	mov	r0, r2
   dfcf8:	4619      	mov	r1, r3
   dfcfa:	f003 fb11 	bl	e3320 <__aeabi_dmul>
   dfcfe:	ec41 0b10 	vmov	d0, r0, r1
   dfd02:	e6f4      	b.n	dfaee <__ieee754_exp+0x2e>
   dfd04:	4602      	mov	r2, r0
   dfd06:	460b      	mov	r3, r1
   dfd08:	4620      	mov	r0, r4
   dfd0a:	4629      	mov	r1, r5
   dfd0c:	f003 fb08 	bl	e3320 <__aeabi_dmul>
   dfd10:	2200      	movs	r2, #0
   dfd12:	4606      	mov	r6, r0
   dfd14:	460f      	mov	r7, r1
   dfd16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dfd1a:	4640      	mov	r0, r8
   dfd1c:	4649      	mov	r1, r9
   dfd1e:	f003 f94b 	bl	e2fb8 <__aeabi_dsub>
   dfd22:	4602      	mov	r2, r0
   dfd24:	460b      	mov	r3, r1
   dfd26:	4630      	mov	r0, r6
   dfd28:	4639      	mov	r1, r7
   dfd2a:	f003 fc23 	bl	e3574 <__aeabi_ddiv>
   dfd2e:	4622      	mov	r2, r4
   dfd30:	462b      	mov	r3, r5
   dfd32:	f003 f941 	bl	e2fb8 <__aeabi_dsub>
   dfd36:	4602      	mov	r2, r0
   dfd38:	460b      	mov	r3, r1
   dfd3a:	2000      	movs	r0, #0
   dfd3c:	4924      	ldr	r1, [pc, #144]	; (dfdd0 <__ieee754_exp+0x310>)
   dfd3e:	f003 f93b 	bl	e2fb8 <__aeabi_dsub>
   dfd42:	ec41 0b10 	vmov	d0, r0, r1
   dfd46:	b003      	add	sp, #12
   dfd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd4c:	eb01 5106 	add.w	r1, r1, r6, lsl #20
   dfd50:	ec41 0b10 	vmov	d0, r0, r1
   dfd54:	b003      	add	sp, #12
   dfd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd5a:	4606      	mov	r6, r0
   dfd5c:	e731      	b.n	dfbc2 <__ieee754_exp+0x102>
   dfd5e:	bf00      	nop
	...
   dfd68:	8800759c 	.word	0x8800759c
   dfd6c:	7e37e43c 	.word	0x7e37e43c
   dfd70:	fefa39ef 	.word	0xfefa39ef
   dfd74:	40862e42 	.word	0x40862e42
   dfd78:	d52d3051 	.word	0xd52d3051
   dfd7c:	c0874910 	.word	0xc0874910
   dfd80:	652b82fe 	.word	0x652b82fe
   dfd84:	3ff71547 	.word	0x3ff71547
   dfd88:	fee00000 	.word	0xfee00000
   dfd8c:	3fe62e42 	.word	0x3fe62e42
   dfd90:	35793c76 	.word	0x35793c76
   dfd94:	3dea39ef 	.word	0x3dea39ef
   dfd98:	72bea4d0 	.word	0x72bea4d0
   dfd9c:	3e663769 	.word	0x3e663769
   dfda0:	c5d26bf1 	.word	0xc5d26bf1
   dfda4:	3ebbbd41 	.word	0x3ebbbd41
   dfda8:	af25de2c 	.word	0xaf25de2c
   dfdac:	3f11566a 	.word	0x3f11566a
   dfdb0:	16bebd93 	.word	0x16bebd93
   dfdb4:	3f66c16c 	.word	0x3f66c16c
   dfdb8:	5555553e 	.word	0x5555553e
   dfdbc:	3fc55555 	.word	0x3fc55555
   dfdc0:	40862e41 	.word	0x40862e41
   dfdc4:	7fefffff 	.word	0x7fefffff
   dfdc8:	3fd62e42 	.word	0x3fd62e42
   dfdcc:	3e2fffff 	.word	0x3e2fffff
   dfdd0:	3ff00000 	.word	0x3ff00000
   dfdd4:	000e8b60 	.word	0x000e8b60
   dfdd8:	3ff0a2b1 	.word	0x3ff0a2b1
   dfddc:	000e8b80 	.word	0x000e8b80
   dfde0:	000e8b70 	.word	0x000e8b70

000dfde4 <__ieee754_fmod>:
   dfde4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfde8:	ec53 2b11 	vmov	r2, r3, d1
   dfdec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   dfdf0:	ea52 0009 	orrs.w	r0, r2, r9
   dfdf4:	ec55 4b10 	vmov	r4, r5, d0
   dfdf8:	d025      	beq.n	dfe46 <__ieee754_fmod+0x62>
   dfdfa:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   dfdfe:	488f      	ldr	r0, [pc, #572]	; (e003c <__ieee754_fmod+0x258>)
   dfe00:	ea85 0b06 	eor.w	fp, r5, r6
   dfe04:	4583      	cmp	fp, r0
   dfe06:	dc1e      	bgt.n	dfe46 <__ieee754_fmod+0x62>
   dfe08:	4250      	negs	r0, r2
   dfe0a:	4310      	orrs	r0, r2
   dfe0c:	f8df c244 	ldr.w	ip, [pc, #580]	; e0054 <__ieee754_fmod+0x270>
   dfe10:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   dfe14:	4560      	cmp	r0, ip
   dfe16:	ee11 8a10 	vmov	r8, s2
   dfe1a:	d814      	bhi.n	dfe46 <__ieee754_fmod+0x62>
   dfe1c:	45cb      	cmp	fp, r9
   dfe1e:	461f      	mov	r7, r3
   dfe20:	ee10 aa10 	vmov	sl, s0
   dfe24:	ee11 ea10 	vmov	lr, s2
   dfe28:	ee10 1a10 	vmov	r1, s0
   dfe2c:	dc17      	bgt.n	dfe5e <__ieee754_fmod+0x7a>
   dfe2e:	db28      	blt.n	dfe82 <__ieee754_fmod+0x9e>
   dfe30:	4294      	cmp	r4, r2
   dfe32:	d326      	bcc.n	dfe82 <__ieee754_fmod+0x9e>
   dfe34:	d113      	bne.n	dfe5e <__ieee754_fmod+0x7a>
   dfe36:	4b82      	ldr	r3, [pc, #520]	; (e0040 <__ieee754_fmod+0x25c>)
   dfe38:	0ff6      	lsrs	r6, r6, #31
   dfe3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   dfe3e:	ed93 0b00 	vldr	d0, [r3]
   dfe42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe46:	4620      	mov	r0, r4
   dfe48:	4629      	mov	r1, r5
   dfe4a:	f003 fa69 	bl	e3320 <__aeabi_dmul>
   dfe4e:	4602      	mov	r2, r0
   dfe50:	460b      	mov	r3, r1
   dfe52:	f003 fb8f 	bl	e3574 <__aeabi_ddiv>
   dfe56:	ec41 0b10 	vmov	d0, r0, r1
   dfe5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe5e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   dfe62:	da12      	bge.n	dfe8a <__ieee754_fmod+0xa6>
   dfe64:	f1bb 0f00 	cmp.w	fp, #0
   dfe68:	f040 80a7 	bne.w	dffba <__ieee754_fmod+0x1d6>
   dfe6c:	f1ba 0f00 	cmp.w	sl, #0
   dfe70:	4653      	mov	r3, sl
   dfe72:	4874      	ldr	r0, [pc, #464]	; (e0044 <__ieee754_fmod+0x260>)
   dfe74:	dd0d      	ble.n	dfe92 <__ieee754_fmod+0xae>
   dfe76:	005b      	lsls	r3, r3, #1
   dfe78:	2b00      	cmp	r3, #0
   dfe7a:	f100 30ff 	add.w	r0, r0, #4294967295
   dfe7e:	dcfa      	bgt.n	dfe76 <__ieee754_fmod+0x92>
   dfe80:	e007      	b.n	dfe92 <__ieee754_fmod+0xae>
   dfe82:	ec45 4b10 	vmov	d0, r4, r5
   dfe86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe8a:	ea4f 502b 	mov.w	r0, fp, asr #20
   dfe8e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   dfe92:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   dfe96:	da0f      	bge.n	dfeb8 <__ieee754_fmod+0xd4>
   dfe98:	f1b9 0f00 	cmp.w	r9, #0
   dfe9c:	f040 80a7 	bne.w	dffee <__ieee754_fmod+0x20a>
   dfea0:	f1b8 0f00 	cmp.w	r8, #0
   dfea4:	4643      	mov	r3, r8
   dfea6:	f8df c19c 	ldr.w	ip, [pc, #412]	; e0044 <__ieee754_fmod+0x260>
   dfeaa:	dd09      	ble.n	dfec0 <__ieee754_fmod+0xdc>
   dfeac:	005b      	lsls	r3, r3, #1
   dfeae:	2b00      	cmp	r3, #0
   dfeb0:	f10c 3cff 	add.w	ip, ip, #4294967295
   dfeb4:	dcfa      	bgt.n	dfeac <__ieee754_fmod+0xc8>
   dfeb6:	e003      	b.n	dfec0 <__ieee754_fmod+0xdc>
   dfeb8:	ea4f 5c29 	mov.w	ip, r9, asr #20
   dfebc:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   dfec0:	4b61      	ldr	r3, [pc, #388]	; (e0048 <__ieee754_fmod+0x264>)
   dfec2:	4298      	cmp	r0, r3
   dfec4:	db5b      	blt.n	dff7e <__ieee754_fmod+0x19a>
   dfec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dfeca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dfece:	4a5e      	ldr	r2, [pc, #376]	; (e0048 <__ieee754_fmod+0x264>)
   dfed0:	4594      	cmp	ip, r2
   dfed2:	db63      	blt.n	dff9c <__ieee754_fmod+0x1b8>
   dfed4:	f3c7 0513 	ubfx	r5, r7, #0, #20
   dfed8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   dfedc:	ebcc 0000 	rsb	r0, ip, r0
   dfee0:	e007      	b.n	dfef2 <__ieee754_fmod+0x10e>
   dfee2:	ea52 0304 	orrs.w	r3, r2, r4
   dfee6:	d013      	beq.n	dff10 <__ieee754_fmod+0x12c>
   dfee8:	0fe3      	lsrs	r3, r4, #31
   dfeea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   dfeee:	0061      	lsls	r1, r4, #1
   dfef0:	3801      	subs	r0, #1
   dfef2:	ebce 0401 	rsb	r4, lr, r1
   dfef6:	1b5a      	subs	r2, r3, r5
   dfef8:	b190      	cbz	r0, dff20 <__ieee754_fmod+0x13c>
   dfefa:	4571      	cmp	r1, lr
   dfefc:	bf38      	it	cc
   dfefe:	f102 32ff 	addcc.w	r2, r2, #4294967295
   dff02:	2a00      	cmp	r2, #0
   dff04:	daed      	bge.n	dfee2 <__ieee754_fmod+0xfe>
   dff06:	0fca      	lsrs	r2, r1, #31
   dff08:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   dff0c:	0049      	lsls	r1, r1, #1
   dff0e:	e7ef      	b.n	dfef0 <__ieee754_fmod+0x10c>
   dff10:	4b4b      	ldr	r3, [pc, #300]	; (e0040 <__ieee754_fmod+0x25c>)
   dff12:	0ff6      	lsrs	r6, r6, #31
   dff14:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   dff18:	ed96 0b00 	vldr	d0, [r6]
   dff1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff20:	4571      	cmp	r1, lr
   dff22:	4615      	mov	r5, r2
   dff24:	bf38      	it	cc
   dff26:	f102 35ff 	addcc.w	r5, r2, #4294967295
   dff2a:	2d00      	cmp	r5, #0
   dff2c:	bfac      	ite	ge
   dff2e:	ebce 0101 	rsbge	r1, lr, r1
   dff32:	461d      	movlt	r5, r3
   dff34:	ea55 0301 	orrs.w	r3, r5, r1
   dff38:	d0ea      	beq.n	dff10 <__ieee754_fmod+0x12c>
   dff3a:	4a44      	ldr	r2, [pc, #272]	; (e004c <__ieee754_fmod+0x268>)
   dff3c:	4295      	cmp	r5, r2
   dff3e:	dc08      	bgt.n	dff52 <__ieee754_fmod+0x16e>
   dff40:	0fcb      	lsrs	r3, r1, #31
   dff42:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   dff46:	4295      	cmp	r5, r2
   dff48:	f10c 3cff 	add.w	ip, ip, #4294967295
   dff4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   dff50:	ddf6      	ble.n	dff40 <__ieee754_fmod+0x15c>
   dff52:	4b3d      	ldr	r3, [pc, #244]	; (e0048 <__ieee754_fmod+0x264>)
   dff54:	459c      	cmp	ip, r3
   dff56:	da54      	bge.n	e0002 <__ieee754_fmod+0x21e>
   dff58:	4a3b      	ldr	r2, [pc, #236]	; (e0048 <__ieee754_fmod+0x264>)
   dff5a:	ebcc 0202 	rsb	r2, ip, r2
   dff5e:	2a14      	cmp	r2, #20
   dff60:	dc5b      	bgt.n	e001a <__ieee754_fmod+0x236>
   dff62:	f1c2 0320 	rsb	r3, r2, #32
   dff66:	fa05 f303 	lsl.w	r3, r5, r3
   dff6a:	40d1      	lsrs	r1, r2
   dff6c:	430b      	orrs	r3, r1
   dff6e:	4115      	asrs	r5, r2
   dff70:	ea45 0106 	orr.w	r1, r5, r6
   dff74:	4618      	mov	r0, r3
   dff76:	ec41 0b10 	vmov	d0, r0, r1
   dff7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff7e:	4932      	ldr	r1, [pc, #200]	; (e0048 <__ieee754_fmod+0x264>)
   dff80:	1a09      	subs	r1, r1, r0
   dff82:	291f      	cmp	r1, #31
   dff84:	dc2d      	bgt.n	dffe2 <__ieee754_fmod+0x1fe>
   dff86:	f1c1 0320 	rsb	r3, r1, #32
   dff8a:	fa0b fb01 	lsl.w	fp, fp, r1
   dff8e:	fa2a f303 	lsr.w	r3, sl, r3
   dff92:	ea43 030b 	orr.w	r3, r3, fp
   dff96:	fa0a f101 	lsl.w	r1, sl, r1
   dff9a:	e798      	b.n	dfece <__ieee754_fmod+0xea>
   dff9c:	4c2a      	ldr	r4, [pc, #168]	; (e0048 <__ieee754_fmod+0x264>)
   dff9e:	ebcc 0404 	rsb	r4, ip, r4
   dffa2:	2c1f      	cmp	r4, #31
   dffa4:	dc15      	bgt.n	dffd2 <__ieee754_fmod+0x1ee>
   dffa6:	f1c4 0220 	rsb	r2, r4, #32
   dffaa:	fa09 f504 	lsl.w	r5, r9, r4
   dffae:	fa28 f202 	lsr.w	r2, r8, r2
   dffb2:	4315      	orrs	r5, r2
   dffb4:	fa08 fe04 	lsl.w	lr, r8, r4
   dffb8:	e790      	b.n	dfedc <__ieee754_fmod+0xf8>
   dffba:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   dffbe:	2b00      	cmp	r3, #0
   dffc0:	4821      	ldr	r0, [pc, #132]	; (e0048 <__ieee754_fmod+0x264>)
   dffc2:	f77f af66 	ble.w	dfe92 <__ieee754_fmod+0xae>
   dffc6:	005b      	lsls	r3, r3, #1
   dffc8:	2b00      	cmp	r3, #0
   dffca:	f100 30ff 	add.w	r0, r0, #4294967295
   dffce:	dcfa      	bgt.n	dffc6 <__ieee754_fmod+0x1e2>
   dffd0:	e75f      	b.n	dfe92 <__ieee754_fmod+0xae>
   dffd2:	4d1f      	ldr	r5, [pc, #124]	; (e0050 <__ieee754_fmod+0x26c>)
   dffd4:	ebcc 0505 	rsb	r5, ip, r5
   dffd8:	fa08 f505 	lsl.w	r5, r8, r5
   dffdc:	f04f 0e00 	mov.w	lr, #0
   dffe0:	e77c      	b.n	dfedc <__ieee754_fmod+0xf8>
   dffe2:	4b1b      	ldr	r3, [pc, #108]	; (e0050 <__ieee754_fmod+0x26c>)
   dffe4:	1a1b      	subs	r3, r3, r0
   dffe6:	fa0a f303 	lsl.w	r3, sl, r3
   dffea:	2100      	movs	r1, #0
   dffec:	e76f      	b.n	dfece <__ieee754_fmod+0xea>
   dffee:	f8df c058 	ldr.w	ip, [pc, #88]	; e0048 <__ieee754_fmod+0x264>
   dfff2:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   dfff6:	005b      	lsls	r3, r3, #1
   dfff8:	2b00      	cmp	r3, #0
   dfffa:	f10c 3cff 	add.w	ip, ip, #4294967295
   dfffe:	dcfa      	bgt.n	dfff6 <__ieee754_fmod+0x212>
   e0000:	e75e      	b.n	dfec0 <__ieee754_fmod+0xdc>
   e0002:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   e0006:	432e      	orrs	r6, r5
   e0008:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   e000c:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   e0010:	460a      	mov	r2, r1
   e0012:	ec43 2b10 	vmov	d0, r2, r3
   e0016:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e001a:	2a1f      	cmp	r2, #31
   e001c:	dc07      	bgt.n	e002e <__ieee754_fmod+0x24a>
   e001e:	f1c2 0320 	rsb	r3, r2, #32
   e0022:	409d      	lsls	r5, r3
   e0024:	40d1      	lsrs	r1, r2
   e0026:	ea45 0301 	orr.w	r3, r5, r1
   e002a:	4635      	mov	r5, r6
   e002c:	e7a0      	b.n	dff70 <__ieee754_fmod+0x18c>
   e002e:	4b08      	ldr	r3, [pc, #32]	; (e0050 <__ieee754_fmod+0x26c>)
   e0030:	ebcc 0303 	rsb	r3, ip, r3
   e0034:	fa45 f303 	asr.w	r3, r5, r3
   e0038:	4635      	mov	r5, r6
   e003a:	e799      	b.n	dff70 <__ieee754_fmod+0x18c>
   e003c:	7fefffff 	.word	0x7fefffff
   e0040:	000e8b90 	.word	0x000e8b90
   e0044:	fffffbed 	.word	0xfffffbed
   e0048:	fffffc02 	.word	0xfffffc02
   e004c:	000fffff 	.word	0x000fffff
   e0050:	fffffbe2 	.word	0xfffffbe2
   e0054:	7ff00000 	.word	0x7ff00000

000e0058 <__ieee754_log>:
   e0058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e005c:	ec51 0b10 	vmov	r0, r1, d0
   e0060:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e0064:	b085      	sub	sp, #20
   e0066:	460b      	mov	r3, r1
   e0068:	da59      	bge.n	e011e <__ieee754_log+0xc6>
   e006a:	ee10 2a10 	vmov	r2, s0
   e006e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   e0072:	4322      	orrs	r2, r4
   e0074:	f000 80f8 	beq.w	e0268 <__ieee754_log+0x210>
   e0078:	2900      	cmp	r1, #0
   e007a:	f2c0 8180 	blt.w	e037e <__ieee754_log+0x326>
   e007e:	2200      	movs	r2, #0
   e0080:	4bdd      	ldr	r3, [pc, #884]	; (e03f8 <__ieee754_log+0x3a0>)
   e0082:	4cde      	ldr	r4, [pc, #888]	; (e03fc <__ieee754_log+0x3a4>)
   e0084:	f003 f94c 	bl	e3320 <__aeabi_dmul>
   e0088:	460b      	mov	r3, r1
   e008a:	42a3      	cmp	r3, r4
   e008c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   e0090:	dc4a      	bgt.n	e0128 <__ieee754_log+0xd0>
   e0092:	f3c3 0513 	ubfx	r5, r3, #0, #20
   e0096:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   e009a:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   e009e:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   e00a2:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   e00a6:	151b      	asrs	r3, r3, #20
   e00a8:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   e00ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e00b0:	ea44 0105 	orr.w	r1, r4, r5
   e00b4:	189c      	adds	r4, r3, r2
   e00b6:	2200      	movs	r2, #0
   e00b8:	4bd1      	ldr	r3, [pc, #836]	; (e0400 <__ieee754_log+0x3a8>)
   e00ba:	f002 ff7d 	bl	e2fb8 <__aeabi_dsub>
   e00be:	1cab      	adds	r3, r5, #2
   e00c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e00c4:	2b02      	cmp	r3, #2
   e00c6:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   e00ca:	4682      	mov	sl, r0
   e00cc:	468b      	mov	fp, r1
   e00ce:	f04f 0200 	mov.w	r2, #0
   e00d2:	dc32      	bgt.n	e013a <__ieee754_log+0xe2>
   e00d4:	2300      	movs	r3, #0
   e00d6:	f003 fb8b 	bl	e37f0 <__aeabi_dcmpeq>
   e00da:	2800      	cmp	r0, #0
   e00dc:	f000 80cf 	beq.w	e027e <__ieee754_log+0x226>
   e00e0:	2c00      	cmp	r4, #0
   e00e2:	f000 8158 	beq.w	e0396 <__ieee754_log+0x33e>
   e00e6:	4620      	mov	r0, r4
   e00e8:	f003 f8b4 	bl	e3254 <__aeabi_i2d>
   e00ec:	a3ac      	add	r3, pc, #688	; (adr r3, e03a0 <__ieee754_log+0x348>)
   e00ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   e00f2:	4606      	mov	r6, r0
   e00f4:	460f      	mov	r7, r1
   e00f6:	f003 f913 	bl	e3320 <__aeabi_dmul>
   e00fa:	a3ab      	add	r3, pc, #684	; (adr r3, e03a8 <__ieee754_log+0x350>)
   e00fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0100:	4604      	mov	r4, r0
   e0102:	460d      	mov	r5, r1
   e0104:	4630      	mov	r0, r6
   e0106:	4639      	mov	r1, r7
   e0108:	f003 f90a 	bl	e3320 <__aeabi_dmul>
   e010c:	4602      	mov	r2, r0
   e010e:	460b      	mov	r3, r1
   e0110:	4620      	mov	r0, r4
   e0112:	4629      	mov	r1, r5
   e0114:	f002 ff52 	bl	e2fbc <__adddf3>
   e0118:	ec41 0b10 	vmov	d0, r0, r1
   e011c:	e00a      	b.n	e0134 <__ieee754_log+0xdc>
   e011e:	4cb7      	ldr	r4, [pc, #732]	; (e03fc <__ieee754_log+0x3a4>)
   e0120:	42a3      	cmp	r3, r4
   e0122:	f04f 0200 	mov.w	r2, #0
   e0126:	ddb4      	ble.n	e0092 <__ieee754_log+0x3a>
   e0128:	4602      	mov	r2, r0
   e012a:	460b      	mov	r3, r1
   e012c:	f002 ff46 	bl	e2fbc <__adddf3>
   e0130:	ec41 0b10 	vmov	d0, r0, r1
   e0134:	b005      	add	sp, #20
   e0136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e013a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e013e:	f002 ff3d 	bl	e2fbc <__adddf3>
   e0142:	4602      	mov	r2, r0
   e0144:	460b      	mov	r3, r1
   e0146:	4650      	mov	r0, sl
   e0148:	4659      	mov	r1, fp
   e014a:	f003 fa13 	bl	e3574 <__aeabi_ddiv>
   e014e:	4606      	mov	r6, r0
   e0150:	4620      	mov	r0, r4
   e0152:	460f      	mov	r7, r1
   e0154:	f003 f87e 	bl	e3254 <__aeabi_i2d>
   e0158:	4632      	mov	r2, r6
   e015a:	e9cd 0100 	strd	r0, r1, [sp]
   e015e:	463b      	mov	r3, r7
   e0160:	4630      	mov	r0, r6
   e0162:	4639      	mov	r1, r7
   e0164:	e9cd 6702 	strd	r6, r7, [sp, #8]
   e0168:	f003 f8da 	bl	e3320 <__aeabi_dmul>
   e016c:	4602      	mov	r2, r0
   e016e:	460b      	mov	r3, r1
   e0170:	4680      	mov	r8, r0
   e0172:	4689      	mov	r9, r1
   e0174:	f003 f8d4 	bl	e3320 <__aeabi_dmul>
   e0178:	a38d      	add	r3, pc, #564	; (adr r3, e03b0 <__ieee754_log+0x358>)
   e017a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e017e:	4606      	mov	r6, r0
   e0180:	460f      	mov	r7, r1
   e0182:	f003 f8cd 	bl	e3320 <__aeabi_dmul>
   e0186:	a38c      	add	r3, pc, #560	; (adr r3, e03b8 <__ieee754_log+0x360>)
   e0188:	e9d3 2300 	ldrd	r2, r3, [r3]
   e018c:	f002 ff16 	bl	e2fbc <__adddf3>
   e0190:	4632      	mov	r2, r6
   e0192:	463b      	mov	r3, r7
   e0194:	f003 f8c4 	bl	e3320 <__aeabi_dmul>
   e0198:	a389      	add	r3, pc, #548	; (adr r3, e03c0 <__ieee754_log+0x368>)
   e019a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e019e:	f002 ff0d 	bl	e2fbc <__adddf3>
   e01a2:	4632      	mov	r2, r6
   e01a4:	463b      	mov	r3, r7
   e01a6:	f003 f8bb 	bl	e3320 <__aeabi_dmul>
   e01aa:	a387      	add	r3, pc, #540	; (adr r3, e03c8 <__ieee754_log+0x370>)
   e01ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01b0:	f002 ff04 	bl	e2fbc <__adddf3>
   e01b4:	4642      	mov	r2, r8
   e01b6:	464b      	mov	r3, r9
   e01b8:	f003 f8b2 	bl	e3320 <__aeabi_dmul>
   e01bc:	a384      	add	r3, pc, #528	; (adr r3, e03d0 <__ieee754_log+0x378>)
   e01be:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01c2:	4680      	mov	r8, r0
   e01c4:	4689      	mov	r9, r1
   e01c6:	4630      	mov	r0, r6
   e01c8:	4639      	mov	r1, r7
   e01ca:	f003 f8a9 	bl	e3320 <__aeabi_dmul>
   e01ce:	a382      	add	r3, pc, #520	; (adr r3, e03d8 <__ieee754_log+0x380>)
   e01d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01d4:	f002 fef2 	bl	e2fbc <__adddf3>
   e01d8:	4632      	mov	r2, r6
   e01da:	463b      	mov	r3, r7
   e01dc:	f003 f8a0 	bl	e3320 <__aeabi_dmul>
   e01e0:	a37f      	add	r3, pc, #508	; (adr r3, e03e0 <__ieee754_log+0x388>)
   e01e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01e6:	f002 fee9 	bl	e2fbc <__adddf3>
   e01ea:	4632      	mov	r2, r6
   e01ec:	463b      	mov	r3, r7
   e01ee:	f003 f897 	bl	e3320 <__aeabi_dmul>
   e01f2:	460b      	mov	r3, r1
   e01f4:	4602      	mov	r2, r0
   e01f6:	4649      	mov	r1, r9
   e01f8:	4640      	mov	r0, r8
   e01fa:	f002 fedf 	bl	e2fbc <__adddf3>
   e01fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   e0202:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   e0206:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   e020a:	3551      	adds	r5, #81	; 0x51
   e020c:	431d      	orrs	r5, r3
   e020e:	2d00      	cmp	r5, #0
   e0210:	4680      	mov	r8, r0
   e0212:	4689      	mov	r9, r1
   e0214:	dd5c      	ble.n	e02d0 <__ieee754_log+0x278>
   e0216:	2200      	movs	r2, #0
   e0218:	4b7a      	ldr	r3, [pc, #488]	; (e0404 <__ieee754_log+0x3ac>)
   e021a:	4650      	mov	r0, sl
   e021c:	4659      	mov	r1, fp
   e021e:	f003 f87f 	bl	e3320 <__aeabi_dmul>
   e0222:	4652      	mov	r2, sl
   e0224:	465b      	mov	r3, fp
   e0226:	f003 f87b 	bl	e3320 <__aeabi_dmul>
   e022a:	4606      	mov	r6, r0
   e022c:	460f      	mov	r7, r1
   e022e:	2c00      	cmp	r4, #0
   e0230:	d16e      	bne.n	e0310 <__ieee754_log+0x2b8>
   e0232:	4632      	mov	r2, r6
   e0234:	463b      	mov	r3, r7
   e0236:	4640      	mov	r0, r8
   e0238:	4649      	mov	r1, r9
   e023a:	f002 febf 	bl	e2fbc <__adddf3>
   e023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0242:	f003 f86d 	bl	e3320 <__aeabi_dmul>
   e0246:	4602      	mov	r2, r0
   e0248:	460b      	mov	r3, r1
   e024a:	4630      	mov	r0, r6
   e024c:	4639      	mov	r1, r7
   e024e:	f002 feb3 	bl	e2fb8 <__aeabi_dsub>
   e0252:	4602      	mov	r2, r0
   e0254:	460b      	mov	r3, r1
   e0256:	4650      	mov	r0, sl
   e0258:	4659      	mov	r1, fp
   e025a:	f002 fead 	bl	e2fb8 <__aeabi_dsub>
   e025e:	ec41 0b10 	vmov	d0, r0, r1
   e0262:	b005      	add	sp, #20
   e0264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0268:	2200      	movs	r2, #0
   e026a:	2300      	movs	r3, #0
   e026c:	2000      	movs	r0, #0
   e026e:	4966      	ldr	r1, [pc, #408]	; (e0408 <__ieee754_log+0x3b0>)
   e0270:	f003 f980 	bl	e3574 <__aeabi_ddiv>
   e0274:	ec41 0b10 	vmov	d0, r0, r1
   e0278:	b005      	add	sp, #20
   e027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e027e:	a35a      	add	r3, pc, #360	; (adr r3, e03e8 <__ieee754_log+0x390>)
   e0280:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0284:	4650      	mov	r0, sl
   e0286:	4659      	mov	r1, fp
   e0288:	f003 f84a 	bl	e3320 <__aeabi_dmul>
   e028c:	4602      	mov	r2, r0
   e028e:	460b      	mov	r3, r1
   e0290:	2000      	movs	r0, #0
   e0292:	495c      	ldr	r1, [pc, #368]	; (e0404 <__ieee754_log+0x3ac>)
   e0294:	f002 fe90 	bl	e2fb8 <__aeabi_dsub>
   e0298:	4652      	mov	r2, sl
   e029a:	4606      	mov	r6, r0
   e029c:	460f      	mov	r7, r1
   e029e:	465b      	mov	r3, fp
   e02a0:	4650      	mov	r0, sl
   e02a2:	4659      	mov	r1, fp
   e02a4:	f003 f83c 	bl	e3320 <__aeabi_dmul>
   e02a8:	4602      	mov	r2, r0
   e02aa:	460b      	mov	r3, r1
   e02ac:	4630      	mov	r0, r6
   e02ae:	4639      	mov	r1, r7
   e02b0:	f003 f836 	bl	e3320 <__aeabi_dmul>
   e02b4:	4606      	mov	r6, r0
   e02b6:	460f      	mov	r7, r1
   e02b8:	2c00      	cmp	r4, #0
   e02ba:	f040 80a7 	bne.w	e040c <__ieee754_log+0x3b4>
   e02be:	4602      	mov	r2, r0
   e02c0:	460b      	mov	r3, r1
   e02c2:	4650      	mov	r0, sl
   e02c4:	4659      	mov	r1, fp
   e02c6:	f002 fe77 	bl	e2fb8 <__aeabi_dsub>
   e02ca:	ec41 0b10 	vmov	d0, r0, r1
   e02ce:	e731      	b.n	e0134 <__ieee754_log+0xdc>
   e02d0:	2c00      	cmp	r4, #0
   e02d2:	f000 80af 	beq.w	e0434 <__ieee754_log+0x3dc>
   e02d6:	a332      	add	r3, pc, #200	; (adr r3, e03a0 <__ieee754_log+0x348>)
   e02d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e02dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   e02e0:	f003 f81e 	bl	e3320 <__aeabi_dmul>
   e02e4:	4642      	mov	r2, r8
   e02e6:	464b      	mov	r3, r9
   e02e8:	4604      	mov	r4, r0
   e02ea:	460d      	mov	r5, r1
   e02ec:	4650      	mov	r0, sl
   e02ee:	4659      	mov	r1, fp
   e02f0:	f002 fe62 	bl	e2fb8 <__aeabi_dsub>
   e02f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e02f8:	f003 f812 	bl	e3320 <__aeabi_dmul>
   e02fc:	a32a      	add	r3, pc, #168	; (adr r3, e03a8 <__ieee754_log+0x350>)
   e02fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0302:	4606      	mov	r6, r0
   e0304:	460f      	mov	r7, r1
   e0306:	e9dd 0100 	ldrd	r0, r1, [sp]
   e030a:	f003 f809 	bl	e3320 <__aeabi_dmul>
   e030e:	e021      	b.n	e0354 <__ieee754_log+0x2fc>
   e0310:	a323      	add	r3, pc, #140	; (adr r3, e03a0 <__ieee754_log+0x348>)
   e0312:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0316:	e9dd 0100 	ldrd	r0, r1, [sp]
   e031a:	f003 f801 	bl	e3320 <__aeabi_dmul>
   e031e:	4632      	mov	r2, r6
   e0320:	463b      	mov	r3, r7
   e0322:	4604      	mov	r4, r0
   e0324:	460d      	mov	r5, r1
   e0326:	4640      	mov	r0, r8
   e0328:	4649      	mov	r1, r9
   e032a:	f002 fe47 	bl	e2fbc <__adddf3>
   e032e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0332:	f002 fff5 	bl	e3320 <__aeabi_dmul>
   e0336:	a31c      	add	r3, pc, #112	; (adr r3, e03a8 <__ieee754_log+0x350>)
   e0338:	e9d3 2300 	ldrd	r2, r3, [r3]
   e033c:	4680      	mov	r8, r0
   e033e:	4689      	mov	r9, r1
   e0340:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0344:	f002 ffec 	bl	e3320 <__aeabi_dmul>
   e0348:	4602      	mov	r2, r0
   e034a:	460b      	mov	r3, r1
   e034c:	4640      	mov	r0, r8
   e034e:	4649      	mov	r1, r9
   e0350:	f002 fe34 	bl	e2fbc <__adddf3>
   e0354:	4602      	mov	r2, r0
   e0356:	460b      	mov	r3, r1
   e0358:	4630      	mov	r0, r6
   e035a:	4639      	mov	r1, r7
   e035c:	f002 fe2c 	bl	e2fb8 <__aeabi_dsub>
   e0360:	4652      	mov	r2, sl
   e0362:	465b      	mov	r3, fp
   e0364:	f002 fe28 	bl	e2fb8 <__aeabi_dsub>
   e0368:	4602      	mov	r2, r0
   e036a:	460b      	mov	r3, r1
   e036c:	4620      	mov	r0, r4
   e036e:	4629      	mov	r1, r5
   e0370:	f002 fe22 	bl	e2fb8 <__aeabi_dsub>
   e0374:	ec41 0b10 	vmov	d0, r0, r1
   e0378:	b005      	add	sp, #20
   e037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e037e:	ee10 2a10 	vmov	r2, s0
   e0382:	460b      	mov	r3, r1
   e0384:	f002 fe18 	bl	e2fb8 <__aeabi_dsub>
   e0388:	2200      	movs	r2, #0
   e038a:	2300      	movs	r3, #0
   e038c:	f003 f8f2 	bl	e3574 <__aeabi_ddiv>
   e0390:	ec41 0b10 	vmov	d0, r0, r1
   e0394:	e6ce      	b.n	e0134 <__ieee754_log+0xdc>
   e0396:	ed9f 0b16 	vldr	d0, [pc, #88]	; e03f0 <__ieee754_log+0x398>
   e039a:	e6cb      	b.n	e0134 <__ieee754_log+0xdc>
   e039c:	f3af 8000 	nop.w
   e03a0:	fee00000 	.word	0xfee00000
   e03a4:	3fe62e42 	.word	0x3fe62e42
   e03a8:	35793c76 	.word	0x35793c76
   e03ac:	3dea39ef 	.word	0x3dea39ef
   e03b0:	df3e5244 	.word	0xdf3e5244
   e03b4:	3fc2f112 	.word	0x3fc2f112
   e03b8:	96cb03de 	.word	0x96cb03de
   e03bc:	3fc74664 	.word	0x3fc74664
   e03c0:	94229359 	.word	0x94229359
   e03c4:	3fd24924 	.word	0x3fd24924
   e03c8:	55555593 	.word	0x55555593
   e03cc:	3fe55555 	.word	0x3fe55555
   e03d0:	d078c69f 	.word	0xd078c69f
   e03d4:	3fc39a09 	.word	0x3fc39a09
   e03d8:	1d8e78af 	.word	0x1d8e78af
   e03dc:	3fcc71c5 	.word	0x3fcc71c5
   e03e0:	9997fa04 	.word	0x9997fa04
   e03e4:	3fd99999 	.word	0x3fd99999
   e03e8:	55555555 	.word	0x55555555
   e03ec:	3fd55555 	.word	0x3fd55555
	...
   e03f8:	43500000 	.word	0x43500000
   e03fc:	7fefffff 	.word	0x7fefffff
   e0400:	3ff00000 	.word	0x3ff00000
   e0404:	3fe00000 	.word	0x3fe00000
   e0408:	c3500000 	.word	0xc3500000
   e040c:	4620      	mov	r0, r4
   e040e:	f002 ff21 	bl	e3254 <__aeabi_i2d>
   e0412:	a30f      	add	r3, pc, #60	; (adr r3, e0450 <__ieee754_log+0x3f8>)
   e0414:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0418:	4680      	mov	r8, r0
   e041a:	4689      	mov	r9, r1
   e041c:	f002 ff80 	bl	e3320 <__aeabi_dmul>
   e0420:	a30d      	add	r3, pc, #52	; (adr r3, e0458 <__ieee754_log+0x400>)
   e0422:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0426:	4604      	mov	r4, r0
   e0428:	460d      	mov	r5, r1
   e042a:	4640      	mov	r0, r8
   e042c:	4649      	mov	r1, r9
   e042e:	f002 ff77 	bl	e3320 <__aeabi_dmul>
   e0432:	e78f      	b.n	e0354 <__ieee754_log+0x2fc>
   e0434:	4602      	mov	r2, r0
   e0436:	460b      	mov	r3, r1
   e0438:	4650      	mov	r0, sl
   e043a:	4659      	mov	r1, fp
   e043c:	f002 fdbc 	bl	e2fb8 <__aeabi_dsub>
   e0440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0444:	f002 ff6c 	bl	e3320 <__aeabi_dmul>
   e0448:	e703      	b.n	e0252 <__ieee754_log+0x1fa>
   e044a:	bf00      	nop
   e044c:	f3af 8000 	nop.w
   e0450:	fee00000 	.word	0xfee00000
   e0454:	3fe62e42 	.word	0x3fe62e42
   e0458:	35793c76 	.word	0x35793c76
   e045c:	3dea39ef 	.word	0x3dea39ef

000e0460 <__ieee754_log10>:
   e0460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e0464:	ec55 4b10 	vmov	r4, r5, d0
   e0468:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   e046c:	b083      	sub	sp, #12
   e046e:	462b      	mov	r3, r5
   e0470:	da21      	bge.n	e04b6 <__ieee754_log10+0x56>
   e0472:	ee10 2a10 	vmov	r2, s0
   e0476:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e047a:	430a      	orrs	r2, r1
   e047c:	d064      	beq.n	e0548 <__ieee754_log10+0xe8>
   e047e:	2d00      	cmp	r5, #0
   e0480:	db6d      	blt.n	e055e <__ieee754_log10+0xfe>
   e0482:	4629      	mov	r1, r5
   e0484:	2200      	movs	r2, #0
   e0486:	4b44      	ldr	r3, [pc, #272]	; (e0598 <__ieee754_log10+0x138>)
   e0488:	ee10 0a10 	vmov	r0, s0
   e048c:	f002 ff48 	bl	e3320 <__aeabi_dmul>
   e0490:	460b      	mov	r3, r1
   e0492:	460d      	mov	r5, r1
   e0494:	4941      	ldr	r1, [pc, #260]	; (e059c <__ieee754_log10+0x13c>)
   e0496:	428b      	cmp	r3, r1
   e0498:	4604      	mov	r4, r0
   e049a:	f06f 0235 	mvn.w	r2, #53	; 0x35
   e049e:	dd0f      	ble.n	e04c0 <__ieee754_log10+0x60>
   e04a0:	4622      	mov	r2, r4
   e04a2:	462b      	mov	r3, r5
   e04a4:	4620      	mov	r0, r4
   e04a6:	4629      	mov	r1, r5
   e04a8:	f002 fd88 	bl	e2fbc <__adddf3>
   e04ac:	ec41 0b10 	vmov	d0, r0, r1
   e04b0:	b003      	add	sp, #12
   e04b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e04b6:	4939      	ldr	r1, [pc, #228]	; (e059c <__ieee754_log10+0x13c>)
   e04b8:	428b      	cmp	r3, r1
   e04ba:	f04f 0200 	mov.w	r2, #0
   e04be:	dcef      	bgt.n	e04a0 <__ieee754_log10+0x40>
   e04c0:	1518      	asrs	r0, r3, #20
   e04c2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   e04c6:	4410      	add	r0, r2
   e04c8:	ea4f 79d0 	mov.w	r9, r0, lsr #31
   e04cc:	4448      	add	r0, r9
   e04ce:	f3c3 0813 	ubfx	r8, r3, #0, #20
   e04d2:	f002 febf 	bl	e3254 <__aeabi_i2d>
   e04d6:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
   e04da:	3303      	adds	r3, #3
   e04dc:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
   e04e0:	ec45 4b10 	vmov	d0, r4, r5
   e04e4:	4606      	mov	r6, r0
   e04e6:	460f      	mov	r7, r1
   e04e8:	f7ff fdb6 	bl	e0058 <__ieee754_log>
   e04ec:	4630      	mov	r0, r6
   e04ee:	4639      	mov	r1, r7
   e04f0:	a323      	add	r3, pc, #140	; (adr r3, e0580 <__ieee754_log10+0x120>)
   e04f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04f6:	ed8d 0b00 	vstr	d0, [sp]
   e04fa:	f002 ff11 	bl	e3320 <__aeabi_dmul>
   e04fe:	ed9d 0b00 	vldr	d0, [sp]
   e0502:	4604      	mov	r4, r0
   e0504:	460d      	mov	r5, r1
   e0506:	a320      	add	r3, pc, #128	; (adr r3, e0588 <__ieee754_log10+0x128>)
   e0508:	e9d3 2300 	ldrd	r2, r3, [r3]
   e050c:	ec51 0b10 	vmov	r0, r1, d0
   e0510:	f002 ff06 	bl	e3320 <__aeabi_dmul>
   e0514:	4602      	mov	r2, r0
   e0516:	460b      	mov	r3, r1
   e0518:	4620      	mov	r0, r4
   e051a:	4629      	mov	r1, r5
   e051c:	f002 fd4e 	bl	e2fbc <__adddf3>
   e0520:	a31b      	add	r3, pc, #108	; (adr r3, e0590 <__ieee754_log10+0x130>)
   e0522:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0526:	4604      	mov	r4, r0
   e0528:	460d      	mov	r5, r1
   e052a:	4630      	mov	r0, r6
   e052c:	4639      	mov	r1, r7
   e052e:	f002 fef7 	bl	e3320 <__aeabi_dmul>
   e0532:	4602      	mov	r2, r0
   e0534:	460b      	mov	r3, r1
   e0536:	4620      	mov	r0, r4
   e0538:	4629      	mov	r1, r5
   e053a:	f002 fd3f 	bl	e2fbc <__adddf3>
   e053e:	ec41 0b10 	vmov	d0, r0, r1
   e0542:	b003      	add	sp, #12
   e0544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e0548:	2200      	movs	r2, #0
   e054a:	2300      	movs	r3, #0
   e054c:	2000      	movs	r0, #0
   e054e:	4914      	ldr	r1, [pc, #80]	; (e05a0 <__ieee754_log10+0x140>)
   e0550:	f003 f810 	bl	e3574 <__aeabi_ddiv>
   e0554:	ec41 0b10 	vmov	d0, r0, r1
   e0558:	b003      	add	sp, #12
   e055a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e055e:	ee10 2a10 	vmov	r2, s0
   e0562:	462b      	mov	r3, r5
   e0564:	4620      	mov	r0, r4
   e0566:	4629      	mov	r1, r5
   e0568:	f002 fd26 	bl	e2fb8 <__aeabi_dsub>
   e056c:	2200      	movs	r2, #0
   e056e:	2300      	movs	r3, #0
   e0570:	f003 f800 	bl	e3574 <__aeabi_ddiv>
   e0574:	ec41 0b10 	vmov	d0, r0, r1
   e0578:	e79a      	b.n	e04b0 <__ieee754_log10+0x50>
   e057a:	bf00      	nop
   e057c:	f3af 8000 	nop.w
   e0580:	11f12b36 	.word	0x11f12b36
   e0584:	3d59fef3 	.word	0x3d59fef3
   e0588:	1526e50e 	.word	0x1526e50e
   e058c:	3fdbcb7b 	.word	0x3fdbcb7b
   e0590:	509f6000 	.word	0x509f6000
   e0594:	3fd34413 	.word	0x3fd34413
   e0598:	43500000 	.word	0x43500000
   e059c:	7fefffff 	.word	0x7fefffff
   e05a0:	c3500000 	.word	0xc3500000
   e05a4:	00000000 	.word	0x00000000

000e05a8 <__ieee754_pow>:
   e05a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e05ac:	ec51 0b11 	vmov	r0, r1, d1
   e05b0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e05b4:	ea58 0400 	orrs.w	r4, r8, r0
   e05b8:	b093      	sub	sp, #76	; 0x4c
   e05ba:	d03c      	beq.n	e0636 <__ieee754_pow+0x8e>
   e05bc:	ec53 2b10 	vmov	r2, r3, d0
   e05c0:	4e6d      	ldr	r6, [pc, #436]	; (e0778 <__ieee754_pow+0x1d0>)
   e05c2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   e05c6:	42b4      	cmp	r4, r6
   e05c8:	ee10 aa10 	vmov	sl, s0
   e05cc:	461d      	mov	r5, r3
   e05ce:	dc2b      	bgt.n	e0628 <__ieee754_pow+0x80>
   e05d0:	4689      	mov	r9, r1
   e05d2:	ee11 ea10 	vmov	lr, s2
   e05d6:	d026      	beq.n	e0626 <__ieee754_pow+0x7e>
   e05d8:	45b0      	cmp	r8, r6
   e05da:	dc25      	bgt.n	e0628 <__ieee754_pow+0x80>
   e05dc:	4e66      	ldr	r6, [pc, #408]	; (e0778 <__ieee754_pow+0x1d0>)
   e05de:	45b0      	cmp	r8, r6
   e05e0:	d077      	beq.n	e06d2 <__ieee754_pow+0x12a>
   e05e2:	2d00      	cmp	r5, #0
   e05e4:	4616      	mov	r6, r2
   e05e6:	461f      	mov	r7, r3
   e05e8:	e9cd 0100 	strd	r0, r1, [sp]
   e05ec:	db75      	blt.n	e06da <__ieee754_pow+0x132>
   e05ee:	f04f 0b00 	mov.w	fp, #0
   e05f2:	f1be 0f00 	cmp.w	lr, #0
   e05f6:	d12d      	bne.n	e0654 <__ieee754_pow+0xac>
   e05f8:	4b5f      	ldr	r3, [pc, #380]	; (e0778 <__ieee754_pow+0x1d0>)
   e05fa:	4598      	cmp	r8, r3
   e05fc:	f000 8089 	beq.w	e0712 <__ieee754_pow+0x16a>
   e0600:	4b5e      	ldr	r3, [pc, #376]	; (e077c <__ieee754_pow+0x1d4>)
   e0602:	4598      	cmp	r8, r3
   e0604:	d05e      	beq.n	e06c4 <__ieee754_pow+0x11c>
   e0606:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   e060a:	f000 83de 	beq.w	e0dca <__ieee754_pow+0x822>
   e060e:	4b5c      	ldr	r3, [pc, #368]	; (e0780 <__ieee754_pow+0x1d8>)
   e0610:	4599      	cmp	r9, r3
   e0612:	d11f      	bne.n	e0654 <__ieee754_pow+0xac>
   e0614:	2d00      	cmp	r5, #0
   e0616:	db1d      	blt.n	e0654 <__ieee754_pow+0xac>
   e0618:	ec47 6b10 	vmov	d0, r6, r7
   e061c:	b013      	add	sp, #76	; 0x4c
   e061e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0622:	f001 b855 	b.w	e16d0 <__ieee754_sqrt>
   e0626:	b15a      	cbz	r2, e0640 <__ieee754_pow+0x98>
   e0628:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e062c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e0630:	ea54 030a 	orrs.w	r3, r4, sl
   e0634:	d106      	bne.n	e0644 <__ieee754_pow+0x9c>
   e0636:	ed9f 0b4a 	vldr	d0, [pc, #296]	; e0760 <__ieee754_pow+0x1b8>
   e063a:	b013      	add	sp, #76	; 0x4c
   e063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0640:	45a0      	cmp	r8, r4
   e0642:	ddcb      	ble.n	e05dc <__ieee754_pow+0x34>
   e0644:	484f      	ldr	r0, [pc, #316]	; (e0784 <__ieee754_pow+0x1dc>)
   e0646:	b013      	add	sp, #76	; 0x4c
   e0648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e064c:	f002 bb80 	b.w	e2d50 <nan>
   e0650:	f04f 0b00 	mov.w	fp, #0
   e0654:	ec47 6b10 	vmov	d0, r6, r7
   e0658:	f7fd fc5a 	bl	ddf10 <fabs>
   e065c:	ec51 0b10 	vmov	r0, r1, d0
   e0660:	f1ba 0f00 	cmp.w	sl, #0
   e0664:	d01e      	beq.n	e06a4 <__ieee754_pow+0xfc>
   e0666:	0fed      	lsrs	r5, r5, #31
   e0668:	f105 3aff 	add.w	sl, r5, #4294967295
   e066c:	ea5b 030a 	orrs.w	r3, fp, sl
   e0670:	d063      	beq.n	e073a <__ieee754_pow+0x192>
   e0672:	4b45      	ldr	r3, [pc, #276]	; (e0788 <__ieee754_pow+0x1e0>)
   e0674:	4598      	cmp	r8, r3
   e0676:	f340 808d 	ble.w	e0794 <__ieee754_pow+0x1ec>
   e067a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   e067e:	4598      	cmp	r8, r3
   e0680:	f340 8438 	ble.w	e0ef4 <__ieee754_pow+0x94c>
   e0684:	4b41      	ldr	r3, [pc, #260]	; (e078c <__ieee754_pow+0x1e4>)
   e0686:	429c      	cmp	r4, r3
   e0688:	dd62      	ble.n	e0750 <__ieee754_pow+0x1a8>
   e068a:	f1b9 0f00 	cmp.w	r9, #0
   e068e:	dd62      	ble.n	e0756 <__ieee754_pow+0x1ae>
   e0690:	a335      	add	r3, pc, #212	; (adr r3, e0768 <__ieee754_pow+0x1c0>)
   e0692:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0696:	4610      	mov	r0, r2
   e0698:	4619      	mov	r1, r3
   e069a:	f002 fe41 	bl	e3320 <__aeabi_dmul>
   e069e:	ec41 0b10 	vmov	d0, r0, r1
   e06a2:	e7ca      	b.n	e063a <__ieee754_pow+0x92>
   e06a4:	b124      	cbz	r4, e06b0 <__ieee754_pow+0x108>
   e06a6:	4b35      	ldr	r3, [pc, #212]	; (e077c <__ieee754_pow+0x1d4>)
   e06a8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   e06ac:	429a      	cmp	r2, r3
   e06ae:	d1da      	bne.n	e0666 <__ieee754_pow+0xbe>
   e06b0:	f1b9 0f00 	cmp.w	r9, #0
   e06b4:	f2c0 83cb 	blt.w	e0e4e <__ieee754_pow+0x8a6>
   e06b8:	2d00      	cmp	r5, #0
   e06ba:	f2c0 8374 	blt.w	e0da6 <__ieee754_pow+0x7fe>
   e06be:	ec41 0b10 	vmov	d0, r0, r1
   e06c2:	e7ba      	b.n	e063a <__ieee754_pow+0x92>
   e06c4:	f1b9 0f00 	cmp.w	r9, #0
   e06c8:	f2c0 847a 	blt.w	e0fc0 <__ieee754_pow+0xa18>
   e06cc:	ec47 6b10 	vmov	d0, r6, r7
   e06d0:	e7b3      	b.n	e063a <__ieee754_pow+0x92>
   e06d2:	f1be 0f00 	cmp.w	lr, #0
   e06d6:	d084      	beq.n	e05e2 <__ieee754_pow+0x3a>
   e06d8:	e7a6      	b.n	e0628 <__ieee754_pow+0x80>
   e06da:	4b2d      	ldr	r3, [pc, #180]	; (e0790 <__ieee754_pow+0x1e8>)
   e06dc:	4598      	cmp	r8, r3
   e06de:	dc29      	bgt.n	e0734 <__ieee754_pow+0x18c>
   e06e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   e06e4:	4598      	cmp	r8, r3
   e06e6:	dd82      	ble.n	e05ee <__ieee754_pow+0x46>
   e06e8:	ea4f 5328 	mov.w	r3, r8, asr #20
   e06ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e06f0:	2b14      	cmp	r3, #20
   e06f2:	f340 847f 	ble.w	e0ff4 <__ieee754_pow+0xa4c>
   e06f6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   e06fa:	fa2e f203 	lsr.w	r2, lr, r3
   e06fe:	fa02 f303 	lsl.w	r3, r2, r3
   e0702:	459e      	cmp	lr, r3
   e0704:	f47f af73 	bne.w	e05ee <__ieee754_pow+0x46>
   e0708:	f002 0201 	and.w	r2, r2, #1
   e070c:	f1c2 0b02 	rsb	fp, r2, #2
   e0710:	e76f      	b.n	e05f2 <__ieee754_pow+0x4a>
   e0712:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   e0716:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   e071a:	ea53 030a 	orrs.w	r3, r3, sl
   e071e:	d08a      	beq.n	e0636 <__ieee754_pow+0x8e>
   e0720:	4b1a      	ldr	r3, [pc, #104]	; (e078c <__ieee754_pow+0x1e4>)
   e0722:	429c      	cmp	r4, r3
   e0724:	f340 8385 	ble.w	e0e32 <__ieee754_pow+0x88a>
   e0728:	f1b9 0f00 	cmp.w	r9, #0
   e072c:	db13      	blt.n	e0756 <__ieee754_pow+0x1ae>
   e072e:	ed9d 0b00 	vldr	d0, [sp]
   e0732:	e782      	b.n	e063a <__ieee754_pow+0x92>
   e0734:	f04f 0b02 	mov.w	fp, #2
   e0738:	e75b      	b.n	e05f2 <__ieee754_pow+0x4a>
   e073a:	4632      	mov	r2, r6
   e073c:	463b      	mov	r3, r7
   e073e:	4610      	mov	r0, r2
   e0740:	4619      	mov	r1, r3
   e0742:	f002 fc39 	bl	e2fb8 <__aeabi_dsub>
   e0746:	4602      	mov	r2, r0
   e0748:	460b      	mov	r3, r1
   e074a:	f002 ff13 	bl	e3574 <__aeabi_ddiv>
   e074e:	e7b6      	b.n	e06be <__ieee754_pow+0x116>
   e0750:	f1b9 0f00 	cmp.w	r9, #0
   e0754:	db9c      	blt.n	e0690 <__ieee754_pow+0xe8>
   e0756:	ed9f 0b06 	vldr	d0, [pc, #24]	; e0770 <__ieee754_pow+0x1c8>
   e075a:	e76e      	b.n	e063a <__ieee754_pow+0x92>
   e075c:	f3af 8000 	nop.w
   e0760:	00000000 	.word	0x00000000
   e0764:	3ff00000 	.word	0x3ff00000
   e0768:	8800759c 	.word	0x8800759c
   e076c:	7e37e43c 	.word	0x7e37e43c
	...
   e0778:	7ff00000 	.word	0x7ff00000
   e077c:	3ff00000 	.word	0x3ff00000
   e0780:	3fe00000 	.word	0x3fe00000
   e0784:	000e8b38 	.word	0x000e8b38
   e0788:	41e00000 	.word	0x41e00000
   e078c:	3fefffff 	.word	0x3fefffff
   e0790:	433fffff 	.word	0x433fffff
   e0794:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   e0798:	f04f 0200 	mov.w	r2, #0
   e079c:	da05      	bge.n	e07aa <__ieee754_pow+0x202>
   e079e:	4bd6      	ldr	r3, [pc, #856]	; (e0af8 <__ieee754_pow+0x550>)
   e07a0:	f002 fdbe 	bl	e3320 <__aeabi_dmul>
   e07a4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   e07a8:	460c      	mov	r4, r1
   e07aa:	1523      	asrs	r3, r4, #20
   e07ac:	4ed3      	ldr	r6, [pc, #844]	; (e0afc <__ieee754_pow+0x554>)
   e07ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
   e07b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   e07b6:	4413      	add	r3, r2
   e07b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   e07bc:	42b4      	cmp	r4, r6
   e07be:	461a      	mov	r2, r3
   e07c0:	930d      	str	r3, [sp, #52]	; 0x34
   e07c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   e07c6:	f340 8349 	ble.w	e0e5c <__ieee754_pow+0x8b4>
   e07ca:	4bcd      	ldr	r3, [pc, #820]	; (e0b00 <__ieee754_pow+0x558>)
   e07cc:	429c      	cmp	r4, r3
   e07ce:	f340 842d 	ble.w	e102c <__ieee754_pow+0xa84>
   e07d2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; e0aa0 <__ieee754_pow+0x4f8>
   e07d6:	ed8d 7b08 	vstr	d7, [sp, #32]
   e07da:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e07de:	ed9f 7bb2 	vldr	d7, [pc, #712]	; e0aa8 <__ieee754_pow+0x500>
   e07e2:	4613      	mov	r3, r2
   e07e4:	ed8d 7b06 	vstr	d7, [sp, #24]
   e07e8:	3301      	adds	r3, #1
   e07ea:	930d      	str	r3, [sp, #52]	; 0x34
   e07ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   e07f0:	f04f 0800 	mov.w	r8, #0
   e07f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e07f8:	4629      	mov	r1, r5
   e07fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e07fe:	f002 fbdb 	bl	e2fb8 <__aeabi_dsub>
   e0802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0806:	4606      	mov	r6, r0
   e0808:	460f      	mov	r7, r1
   e080a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e080e:	f002 fbd5 	bl	e2fbc <__adddf3>
   e0812:	4602      	mov	r2, r0
   e0814:	460b      	mov	r3, r1
   e0816:	2000      	movs	r0, #0
   e0818:	49ba      	ldr	r1, [pc, #744]	; (e0b04 <__ieee754_pow+0x55c>)
   e081a:	f002 feab 	bl	e3574 <__aeabi_ddiv>
   e081e:	4603      	mov	r3, r0
   e0820:	460c      	mov	r4, r1
   e0822:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   e0826:	4602      	mov	r2, r0
   e0828:	460b      	mov	r3, r1
   e082a:	4630      	mov	r0, r6
   e082c:	4639      	mov	r1, r7
   e082e:	f002 fd77 	bl	e3320 <__aeabi_dmul>
   e0832:	106b      	asrs	r3, r5, #1
   e0834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   e0838:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   e083c:	eb03 0508 	add.w	r5, r3, r8
   e0840:	460a      	mov	r2, r1
   e0842:	2300      	movs	r3, #0
   e0844:	4601      	mov	r1, r0
   e0846:	e9cd 1202 	strd	r1, r2, [sp, #8]
   e084a:	9302      	str	r3, [sp, #8]
   e084c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   e0850:	2400      	movs	r4, #0
   e0852:	e9cd 1204 	strd	r1, r2, [sp, #16]
   e0856:	462b      	mov	r3, r5
   e0858:	4622      	mov	r2, r4
   e085a:	4640      	mov	r0, r8
   e085c:	4649      	mov	r1, r9
   e085e:	f002 fd5f 	bl	e3320 <__aeabi_dmul>
   e0862:	4602      	mov	r2, r0
   e0864:	460b      	mov	r3, r1
   e0866:	4630      	mov	r0, r6
   e0868:	4639      	mov	r1, r7
   e086a:	f002 fba5 	bl	e2fb8 <__aeabi_dsub>
   e086e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0872:	4606      	mov	r6, r0
   e0874:	460f      	mov	r7, r1
   e0876:	4620      	mov	r0, r4
   e0878:	4629      	mov	r1, r5
   e087a:	f002 fb9d 	bl	e2fb8 <__aeabi_dsub>
   e087e:	4602      	mov	r2, r0
   e0880:	460b      	mov	r3, r1
   e0882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e0886:	f002 fb97 	bl	e2fb8 <__aeabi_dsub>
   e088a:	4642      	mov	r2, r8
   e088c:	464b      	mov	r3, r9
   e088e:	f002 fd47 	bl	e3320 <__aeabi_dmul>
   e0892:	4602      	mov	r2, r0
   e0894:	460b      	mov	r3, r1
   e0896:	4630      	mov	r0, r6
   e0898:	4639      	mov	r1, r7
   e089a:	f002 fb8d 	bl	e2fb8 <__aeabi_dsub>
   e089e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   e08a2:	f002 fd3d 	bl	e3320 <__aeabi_dmul>
   e08a6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e08aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e08ae:	4622      	mov	r2, r4
   e08b0:	462b      	mov	r3, r5
   e08b2:	4620      	mov	r0, r4
   e08b4:	4629      	mov	r1, r5
   e08b6:	f002 fd33 	bl	e3320 <__aeabi_dmul>
   e08ba:	a37d      	add	r3, pc, #500	; (adr r3, e0ab0 <__ieee754_pow+0x508>)
   e08bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08c0:	4604      	mov	r4, r0
   e08c2:	460d      	mov	r5, r1
   e08c4:	f002 fd2c 	bl	e3320 <__aeabi_dmul>
   e08c8:	a37b      	add	r3, pc, #492	; (adr r3, e0ab8 <__ieee754_pow+0x510>)
   e08ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08ce:	f002 fb75 	bl	e2fbc <__adddf3>
   e08d2:	4622      	mov	r2, r4
   e08d4:	462b      	mov	r3, r5
   e08d6:	f002 fd23 	bl	e3320 <__aeabi_dmul>
   e08da:	a379      	add	r3, pc, #484	; (adr r3, e0ac0 <__ieee754_pow+0x518>)
   e08dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08e0:	f002 fb6c 	bl	e2fbc <__adddf3>
   e08e4:	4622      	mov	r2, r4
   e08e6:	462b      	mov	r3, r5
   e08e8:	f002 fd1a 	bl	e3320 <__aeabi_dmul>
   e08ec:	a376      	add	r3, pc, #472	; (adr r3, e0ac8 <__ieee754_pow+0x520>)
   e08ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   e08f2:	f002 fb63 	bl	e2fbc <__adddf3>
   e08f6:	4622      	mov	r2, r4
   e08f8:	462b      	mov	r3, r5
   e08fa:	f002 fd11 	bl	e3320 <__aeabi_dmul>
   e08fe:	a374      	add	r3, pc, #464	; (adr r3, e0ad0 <__ieee754_pow+0x528>)
   e0900:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0904:	f002 fb5a 	bl	e2fbc <__adddf3>
   e0908:	4622      	mov	r2, r4
   e090a:	462b      	mov	r3, r5
   e090c:	f002 fd08 	bl	e3320 <__aeabi_dmul>
   e0910:	a371      	add	r3, pc, #452	; (adr r3, e0ad8 <__ieee754_pow+0x530>)
   e0912:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0916:	f002 fb51 	bl	e2fbc <__adddf3>
   e091a:	4622      	mov	r2, r4
   e091c:	4606      	mov	r6, r0
   e091e:	460f      	mov	r7, r1
   e0920:	462b      	mov	r3, r5
   e0922:	4620      	mov	r0, r4
   e0924:	4629      	mov	r1, r5
   e0926:	f002 fcfb 	bl	e3320 <__aeabi_dmul>
   e092a:	4602      	mov	r2, r0
   e092c:	460b      	mov	r3, r1
   e092e:	4630      	mov	r0, r6
   e0930:	4639      	mov	r1, r7
   e0932:	f002 fcf5 	bl	e3320 <__aeabi_dmul>
   e0936:	4642      	mov	r2, r8
   e0938:	4604      	mov	r4, r0
   e093a:	460d      	mov	r5, r1
   e093c:	464b      	mov	r3, r9
   e093e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0942:	f002 fb3b 	bl	e2fbc <__adddf3>
   e0946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e094a:	f002 fce9 	bl	e3320 <__aeabi_dmul>
   e094e:	4622      	mov	r2, r4
   e0950:	462b      	mov	r3, r5
   e0952:	f002 fb33 	bl	e2fbc <__adddf3>
   e0956:	4642      	mov	r2, r8
   e0958:	4606      	mov	r6, r0
   e095a:	460f      	mov	r7, r1
   e095c:	464b      	mov	r3, r9
   e095e:	4640      	mov	r0, r8
   e0960:	4649      	mov	r1, r9
   e0962:	f002 fcdd 	bl	e3320 <__aeabi_dmul>
   e0966:	2200      	movs	r2, #0
   e0968:	4b67      	ldr	r3, [pc, #412]	; (e0b08 <__ieee754_pow+0x560>)
   e096a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e096e:	f002 fb25 	bl	e2fbc <__adddf3>
   e0972:	4632      	mov	r2, r6
   e0974:	463b      	mov	r3, r7
   e0976:	f002 fb21 	bl	e2fbc <__adddf3>
   e097a:	9802      	ldr	r0, [sp, #8]
   e097c:	460d      	mov	r5, r1
   e097e:	4604      	mov	r4, r0
   e0980:	4622      	mov	r2, r4
   e0982:	462b      	mov	r3, r5
   e0984:	4640      	mov	r0, r8
   e0986:	4649      	mov	r1, r9
   e0988:	f002 fcca 	bl	e3320 <__aeabi_dmul>
   e098c:	2200      	movs	r2, #0
   e098e:	4680      	mov	r8, r0
   e0990:	4689      	mov	r9, r1
   e0992:	4b5d      	ldr	r3, [pc, #372]	; (e0b08 <__ieee754_pow+0x560>)
   e0994:	4620      	mov	r0, r4
   e0996:	4629      	mov	r1, r5
   e0998:	f002 fb0e 	bl	e2fb8 <__aeabi_dsub>
   e099c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e09a0:	f002 fb0a 	bl	e2fb8 <__aeabi_dsub>
   e09a4:	4602      	mov	r2, r0
   e09a6:	460b      	mov	r3, r1
   e09a8:	4630      	mov	r0, r6
   e09aa:	4639      	mov	r1, r7
   e09ac:	f002 fb04 	bl	e2fb8 <__aeabi_dsub>
   e09b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e09b4:	f002 fcb4 	bl	e3320 <__aeabi_dmul>
   e09b8:	4622      	mov	r2, r4
   e09ba:	4606      	mov	r6, r0
   e09bc:	460f      	mov	r7, r1
   e09be:	462b      	mov	r3, r5
   e09c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e09c4:	f002 fcac 	bl	e3320 <__aeabi_dmul>
   e09c8:	4602      	mov	r2, r0
   e09ca:	460b      	mov	r3, r1
   e09cc:	4630      	mov	r0, r6
   e09ce:	4639      	mov	r1, r7
   e09d0:	f002 faf4 	bl	e2fbc <__adddf3>
   e09d4:	4606      	mov	r6, r0
   e09d6:	460f      	mov	r7, r1
   e09d8:	4602      	mov	r2, r0
   e09da:	460b      	mov	r3, r1
   e09dc:	4640      	mov	r0, r8
   e09de:	4649      	mov	r1, r9
   e09e0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e09e4:	f002 faea 	bl	e2fbc <__adddf3>
   e09e8:	9802      	ldr	r0, [sp, #8]
   e09ea:	a33d      	add	r3, pc, #244	; (adr r3, e0ae0 <__ieee754_pow+0x538>)
   e09ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e09f0:	4604      	mov	r4, r0
   e09f2:	460d      	mov	r5, r1
   e09f4:	f002 fc94 	bl	e3320 <__aeabi_dmul>
   e09f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e09fc:	4680      	mov	r8, r0
   e09fe:	4689      	mov	r9, r1
   e0a00:	4620      	mov	r0, r4
   e0a02:	4629      	mov	r1, r5
   e0a04:	f002 fad8 	bl	e2fb8 <__aeabi_dsub>
   e0a08:	4602      	mov	r2, r0
   e0a0a:	460b      	mov	r3, r1
   e0a0c:	4630      	mov	r0, r6
   e0a0e:	4639      	mov	r1, r7
   e0a10:	f002 fad2 	bl	e2fb8 <__aeabi_dsub>
   e0a14:	a334      	add	r3, pc, #208	; (adr r3, e0ae8 <__ieee754_pow+0x540>)
   e0a16:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0a1a:	f002 fc81 	bl	e3320 <__aeabi_dmul>
   e0a1e:	a334      	add	r3, pc, #208	; (adr r3, e0af0 <__ieee754_pow+0x548>)
   e0a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0a24:	4606      	mov	r6, r0
   e0a26:	460f      	mov	r7, r1
   e0a28:	4620      	mov	r0, r4
   e0a2a:	4629      	mov	r1, r5
   e0a2c:	f002 fc78 	bl	e3320 <__aeabi_dmul>
   e0a30:	4602      	mov	r2, r0
   e0a32:	460b      	mov	r3, r1
   e0a34:	4630      	mov	r0, r6
   e0a36:	4639      	mov	r1, r7
   e0a38:	f002 fac0 	bl	e2fbc <__adddf3>
   e0a3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   e0a40:	f002 fabc 	bl	e2fbc <__adddf3>
   e0a44:	4606      	mov	r6, r0
   e0a46:	980d      	ldr	r0, [sp, #52]	; 0x34
   e0a48:	460f      	mov	r7, r1
   e0a4a:	f002 fc03 	bl	e3254 <__aeabi_i2d>
   e0a4e:	4632      	mov	r2, r6
   e0a50:	4604      	mov	r4, r0
   e0a52:	460d      	mov	r5, r1
   e0a54:	463b      	mov	r3, r7
   e0a56:	4640      	mov	r0, r8
   e0a58:	4649      	mov	r1, r9
   e0a5a:	f002 faaf 	bl	e2fbc <__adddf3>
   e0a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0a62:	f002 faab 	bl	e2fbc <__adddf3>
   e0a66:	4622      	mov	r2, r4
   e0a68:	462b      	mov	r3, r5
   e0a6a:	f002 faa7 	bl	e2fbc <__adddf3>
   e0a6e:	9802      	ldr	r0, [sp, #8]
   e0a70:	4622      	mov	r2, r4
   e0a72:	462b      	mov	r3, r5
   e0a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0a78:	f002 fa9e 	bl	e2fb8 <__aeabi_dsub>
   e0a7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e0a80:	f002 fa9a 	bl	e2fb8 <__aeabi_dsub>
   e0a84:	4642      	mov	r2, r8
   e0a86:	464b      	mov	r3, r9
   e0a88:	f002 fa96 	bl	e2fb8 <__aeabi_dsub>
   e0a8c:	4602      	mov	r2, r0
   e0a8e:	460b      	mov	r3, r1
   e0a90:	4630      	mov	r0, r6
   e0a92:	4639      	mov	r1, r7
   e0a94:	f002 fa90 	bl	e2fb8 <__aeabi_dsub>
   e0a98:	4680      	mov	r8, r0
   e0a9a:	4689      	mov	r9, r1
   e0a9c:	e036      	b.n	e0b0c <__ieee754_pow+0x564>
   e0a9e:	bf00      	nop
	...
   e0aac:	3ff00000 	.word	0x3ff00000
   e0ab0:	4a454eef 	.word	0x4a454eef
   e0ab4:	3fca7e28 	.word	0x3fca7e28
   e0ab8:	93c9db65 	.word	0x93c9db65
   e0abc:	3fcd864a 	.word	0x3fcd864a
   e0ac0:	a91d4101 	.word	0xa91d4101
   e0ac4:	3fd17460 	.word	0x3fd17460
   e0ac8:	518f264d 	.word	0x518f264d
   e0acc:	3fd55555 	.word	0x3fd55555
   e0ad0:	db6fabff 	.word	0xdb6fabff
   e0ad4:	3fdb6db6 	.word	0x3fdb6db6
   e0ad8:	33333303 	.word	0x33333303
   e0adc:	3fe33333 	.word	0x3fe33333
   e0ae0:	e0000000 	.word	0xe0000000
   e0ae4:	3feec709 	.word	0x3feec709
   e0ae8:	dc3a03fd 	.word	0xdc3a03fd
   e0aec:	3feec709 	.word	0x3feec709
   e0af0:	145b01f5 	.word	0x145b01f5
   e0af4:	be3e2fe0 	.word	0xbe3e2fe0
   e0af8:	43400000 	.word	0x43400000
   e0afc:	0003988e 	.word	0x0003988e
   e0b00:	000bb679 	.word	0x000bb679
   e0b04:	3ff00000 	.word	0x3ff00000
   e0b08:	40080000 	.word	0x40080000
   e0b0c:	f10b 33ff 	add.w	r3, fp, #4294967295
   e0b10:	ea53 030a 	orrs.w	r3, r3, sl
   e0b14:	f000 8188 	beq.w	e0e28 <__ieee754_pow+0x880>
   e0b18:	ed9f 7bd7 	vldr	d7, [pc, #860]	; e0e78 <__ieee754_pow+0x8d0>
   e0b1c:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0b20:	e9dd ab00 	ldrd	sl, fp, [sp]
   e0b24:	4653      	mov	r3, sl
   e0b26:	465c      	mov	r4, fp
   e0b28:	e9cd 3400 	strd	r3, r4, [sp]
   e0b2c:	2300      	movs	r3, #0
   e0b2e:	9300      	str	r3, [sp, #0]
   e0b30:	e9dd 4500 	ldrd	r4, r5, [sp]
   e0b34:	4650      	mov	r0, sl
   e0b36:	4622      	mov	r2, r4
   e0b38:	462b      	mov	r3, r5
   e0b3a:	4659      	mov	r1, fp
   e0b3c:	f002 fa3c 	bl	e2fb8 <__aeabi_dsub>
   e0b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0b44:	f002 fbec 	bl	e3320 <__aeabi_dmul>
   e0b48:	4652      	mov	r2, sl
   e0b4a:	4606      	mov	r6, r0
   e0b4c:	460f      	mov	r7, r1
   e0b4e:	465b      	mov	r3, fp
   e0b50:	4640      	mov	r0, r8
   e0b52:	4649      	mov	r1, r9
   e0b54:	f002 fbe4 	bl	e3320 <__aeabi_dmul>
   e0b58:	4602      	mov	r2, r0
   e0b5a:	460b      	mov	r3, r1
   e0b5c:	4630      	mov	r0, r6
   e0b5e:	4639      	mov	r1, r7
   e0b60:	f002 fa2c 	bl	e2fbc <__adddf3>
   e0b64:	4622      	mov	r2, r4
   e0b66:	4680      	mov	r8, r0
   e0b68:	4689      	mov	r9, r1
   e0b6a:	462b      	mov	r3, r5
   e0b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0b70:	e9cd 8904 	strd	r8, r9, [sp, #16]
   e0b74:	f002 fbd4 	bl	e3320 <__aeabi_dmul>
   e0b78:	460b      	mov	r3, r1
   e0b7a:	4602      	mov	r2, r0
   e0b7c:	4606      	mov	r6, r0
   e0b7e:	460f      	mov	r7, r1
   e0b80:	4640      	mov	r0, r8
   e0b82:	4649      	mov	r1, r9
   e0b84:	f002 fa1a 	bl	e2fbc <__adddf3>
   e0b88:	4bd5      	ldr	r3, [pc, #852]	; (e0ee0 <__ieee754_pow+0x938>)
   e0b8a:	4299      	cmp	r1, r3
   e0b8c:	4604      	mov	r4, r0
   e0b8e:	460d      	mov	r5, r1
   e0b90:	468a      	mov	sl, r1
   e0b92:	f340 8123 	ble.w	e0ddc <__ieee754_pow+0x834>
   e0b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   e0b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   e0b9e:	4303      	orrs	r3, r0
   e0ba0:	f040 8218 	bne.w	e0fd4 <__ieee754_pow+0xa2c>
   e0ba4:	a3b6      	add	r3, pc, #728	; (adr r3, e0e80 <__ieee754_pow+0x8d8>)
   e0ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0bae:	f002 fa05 	bl	e2fbc <__adddf3>
   e0bb2:	4632      	mov	r2, r6
   e0bb4:	4680      	mov	r8, r0
   e0bb6:	4689      	mov	r9, r1
   e0bb8:	463b      	mov	r3, r7
   e0bba:	4620      	mov	r0, r4
   e0bbc:	4629      	mov	r1, r5
   e0bbe:	f002 f9fb 	bl	e2fb8 <__aeabi_dsub>
   e0bc2:	4602      	mov	r2, r0
   e0bc4:	460b      	mov	r3, r1
   e0bc6:	4640      	mov	r0, r8
   e0bc8:	4649      	mov	r1, r9
   e0bca:	f002 fe39 	bl	e3840 <__aeabi_dcmpgt>
   e0bce:	2800      	cmp	r0, #0
   e0bd0:	f040 8200 	bne.w	e0fd4 <__ieee754_pow+0xa2c>
   e0bd4:	46a8      	mov	r8, r5
   e0bd6:	ea4f 5328 	mov.w	r3, r8, asr #20
   e0bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   e0bde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   e0be2:	fa42 f303 	asr.w	r3, r2, r3
   e0be6:	4453      	add	r3, sl
   e0be8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   e0bec:	4dbd      	ldr	r5, [pc, #756]	; (e0ee4 <__ieee754_pow+0x93c>)
   e0bee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   e0bf2:	4115      	asrs	r5, r2
   e0bf4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   e0bf8:	2000      	movs	r0, #0
   e0bfa:	f1c2 0414 	rsb	r4, r2, #20
   e0bfe:	ea23 0105 	bic.w	r1, r3, r5
   e0c02:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   e0c06:	f1ba 0f00 	cmp.w	sl, #0
   e0c0a:	4602      	mov	r2, r0
   e0c0c:	460b      	mov	r3, r1
   e0c0e:	fa4b fb04 	asr.w	fp, fp, r4
   e0c12:	4630      	mov	r0, r6
   e0c14:	4639      	mov	r1, r7
   e0c16:	bfb8      	it	lt
   e0c18:	f1cb 0b00 	rsblt	fp, fp, #0
   e0c1c:	f002 f9cc 	bl	e2fb8 <__aeabi_dsub>
   e0c20:	4602      	mov	r2, r0
   e0c22:	460b      	mov	r3, r1
   e0c24:	4606      	mov	r6, r0
   e0c26:	460f      	mov	r7, r1
   e0c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0c2c:	f002 f9c6 	bl	e2fbc <__adddf3>
   e0c30:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   e0c34:	2400      	movs	r4, #0
   e0c36:	a394      	add	r3, pc, #592	; (adr r3, e0e88 <__ieee754_pow+0x8e0>)
   e0c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c3c:	4620      	mov	r0, r4
   e0c3e:	460d      	mov	r5, r1
   e0c40:	f002 fb6e 	bl	e3320 <__aeabi_dmul>
   e0c44:	4632      	mov	r2, r6
   e0c46:	4680      	mov	r8, r0
   e0c48:	4689      	mov	r9, r1
   e0c4a:	463b      	mov	r3, r7
   e0c4c:	4620      	mov	r0, r4
   e0c4e:	4629      	mov	r1, r5
   e0c50:	f002 f9b2 	bl	e2fb8 <__aeabi_dsub>
   e0c54:	4602      	mov	r2, r0
   e0c56:	460b      	mov	r3, r1
   e0c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0c5c:	f002 f9ac 	bl	e2fb8 <__aeabi_dsub>
   e0c60:	a38b      	add	r3, pc, #556	; (adr r3, e0e90 <__ieee754_pow+0x8e8>)
   e0c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c66:	f002 fb5b 	bl	e3320 <__aeabi_dmul>
   e0c6a:	a38b      	add	r3, pc, #556	; (adr r3, e0e98 <__ieee754_pow+0x8f0>)
   e0c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0c70:	4606      	mov	r6, r0
   e0c72:	460f      	mov	r7, r1
   e0c74:	4620      	mov	r0, r4
   e0c76:	4629      	mov	r1, r5
   e0c78:	f002 fb52 	bl	e3320 <__aeabi_dmul>
   e0c7c:	4602      	mov	r2, r0
   e0c7e:	460b      	mov	r3, r1
   e0c80:	4630      	mov	r0, r6
   e0c82:	4639      	mov	r1, r7
   e0c84:	f002 f99a 	bl	e2fbc <__adddf3>
   e0c88:	4606      	mov	r6, r0
   e0c8a:	460f      	mov	r7, r1
   e0c8c:	4602      	mov	r2, r0
   e0c8e:	460b      	mov	r3, r1
   e0c90:	4640      	mov	r0, r8
   e0c92:	4649      	mov	r1, r9
   e0c94:	f002 f992 	bl	e2fbc <__adddf3>
   e0c98:	4642      	mov	r2, r8
   e0c9a:	464b      	mov	r3, r9
   e0c9c:	4604      	mov	r4, r0
   e0c9e:	460d      	mov	r5, r1
   e0ca0:	f002 f98a 	bl	e2fb8 <__aeabi_dsub>
   e0ca4:	4602      	mov	r2, r0
   e0ca6:	460b      	mov	r3, r1
   e0ca8:	4630      	mov	r0, r6
   e0caa:	4639      	mov	r1, r7
   e0cac:	f002 f984 	bl	e2fb8 <__aeabi_dsub>
   e0cb0:	4622      	mov	r2, r4
   e0cb2:	4680      	mov	r8, r0
   e0cb4:	4689      	mov	r9, r1
   e0cb6:	462b      	mov	r3, r5
   e0cb8:	4620      	mov	r0, r4
   e0cba:	4629      	mov	r1, r5
   e0cbc:	f002 fb30 	bl	e3320 <__aeabi_dmul>
   e0cc0:	a377      	add	r3, pc, #476	; (adr r3, e0ea0 <__ieee754_pow+0x8f8>)
   e0cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cc6:	4606      	mov	r6, r0
   e0cc8:	460f      	mov	r7, r1
   e0cca:	f002 fb29 	bl	e3320 <__aeabi_dmul>
   e0cce:	a376      	add	r3, pc, #472	; (adr r3, e0ea8 <__ieee754_pow+0x900>)
   e0cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cd4:	f002 f970 	bl	e2fb8 <__aeabi_dsub>
   e0cd8:	4632      	mov	r2, r6
   e0cda:	463b      	mov	r3, r7
   e0cdc:	f002 fb20 	bl	e3320 <__aeabi_dmul>
   e0ce0:	a373      	add	r3, pc, #460	; (adr r3, e0eb0 <__ieee754_pow+0x908>)
   e0ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0ce6:	f002 f969 	bl	e2fbc <__adddf3>
   e0cea:	4632      	mov	r2, r6
   e0cec:	463b      	mov	r3, r7
   e0cee:	f002 fb17 	bl	e3320 <__aeabi_dmul>
   e0cf2:	a371      	add	r3, pc, #452	; (adr r3, e0eb8 <__ieee754_pow+0x910>)
   e0cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0cf8:	f002 f95e 	bl	e2fb8 <__aeabi_dsub>
   e0cfc:	4632      	mov	r2, r6
   e0cfe:	463b      	mov	r3, r7
   e0d00:	f002 fb0e 	bl	e3320 <__aeabi_dmul>
   e0d04:	a36e      	add	r3, pc, #440	; (adr r3, e0ec0 <__ieee754_pow+0x918>)
   e0d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0d0a:	f002 f957 	bl	e2fbc <__adddf3>
   e0d0e:	4632      	mov	r2, r6
   e0d10:	463b      	mov	r3, r7
   e0d12:	f002 fb05 	bl	e3320 <__aeabi_dmul>
   e0d16:	4602      	mov	r2, r0
   e0d18:	460b      	mov	r3, r1
   e0d1a:	4620      	mov	r0, r4
   e0d1c:	4629      	mov	r1, r5
   e0d1e:	f002 f94b 	bl	e2fb8 <__aeabi_dsub>
   e0d22:	4606      	mov	r6, r0
   e0d24:	460f      	mov	r7, r1
   e0d26:	4602      	mov	r2, r0
   e0d28:	460b      	mov	r3, r1
   e0d2a:	4620      	mov	r0, r4
   e0d2c:	4629      	mov	r1, r5
   e0d2e:	f002 faf7 	bl	e3320 <__aeabi_dmul>
   e0d32:	2200      	movs	r2, #0
   e0d34:	e9cd 0100 	strd	r0, r1, [sp]
   e0d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e0d3c:	4630      	mov	r0, r6
   e0d3e:	4639      	mov	r1, r7
   e0d40:	f002 f93a 	bl	e2fb8 <__aeabi_dsub>
   e0d44:	4602      	mov	r2, r0
   e0d46:	460b      	mov	r3, r1
   e0d48:	e9dd 0100 	ldrd	r0, r1, [sp]
   e0d4c:	f002 fc12 	bl	e3574 <__aeabi_ddiv>
   e0d50:	4642      	mov	r2, r8
   e0d52:	4606      	mov	r6, r0
   e0d54:	460f      	mov	r7, r1
   e0d56:	464b      	mov	r3, r9
   e0d58:	4620      	mov	r0, r4
   e0d5a:	4629      	mov	r1, r5
   e0d5c:	f002 fae0 	bl	e3320 <__aeabi_dmul>
   e0d60:	4642      	mov	r2, r8
   e0d62:	464b      	mov	r3, r9
   e0d64:	f002 f92a 	bl	e2fbc <__adddf3>
   e0d68:	4602      	mov	r2, r0
   e0d6a:	460b      	mov	r3, r1
   e0d6c:	4630      	mov	r0, r6
   e0d6e:	4639      	mov	r1, r7
   e0d70:	f002 f922 	bl	e2fb8 <__aeabi_dsub>
   e0d74:	4622      	mov	r2, r4
   e0d76:	462b      	mov	r3, r5
   e0d78:	f002 f91e 	bl	e2fb8 <__aeabi_dsub>
   e0d7c:	4602      	mov	r2, r0
   e0d7e:	460b      	mov	r3, r1
   e0d80:	2000      	movs	r0, #0
   e0d82:	4959      	ldr	r1, [pc, #356]	; (e0ee8 <__ieee754_pow+0x940>)
   e0d84:	f002 f918 	bl	e2fb8 <__aeabi_dsub>
   e0d88:	448a      	add	sl, r1
   e0d8a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   e0d8e:	4602      	mov	r2, r0
   e0d90:	460b      	mov	r3, r1
   e0d92:	f2c0 815b 	blt.w	e104c <__ieee754_pow+0xaa4>
   e0d96:	4651      	mov	r1, sl
   e0d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e0d9c:	f002 fac0 	bl	e3320 <__aeabi_dmul>
   e0da0:	ec41 0b10 	vmov	d0, r0, r1
   e0da4:	e449      	b.n	e063a <__ieee754_pow+0x92>
   e0da6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   e0daa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   e0dae:	ea54 030b 	orrs.w	r3, r4, fp
   e0db2:	f000 8137 	beq.w	e1024 <__ieee754_pow+0xa7c>
   e0db6:	f1bb 0f01 	cmp.w	fp, #1
   e0dba:	f47f ac80 	bne.w	e06be <__ieee754_pow+0x116>
   e0dbe:	4602      	mov	r2, r0
   e0dc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0dc4:	ec43 2b10 	vmov	d0, r2, r3
   e0dc8:	e437      	b.n	e063a <__ieee754_pow+0x92>
   e0dca:	4632      	mov	r2, r6
   e0dcc:	463b      	mov	r3, r7
   e0dce:	4630      	mov	r0, r6
   e0dd0:	4639      	mov	r1, r7
   e0dd2:	f002 faa5 	bl	e3320 <__aeabi_dmul>
   e0dd6:	ec41 0b10 	vmov	d0, r0, r1
   e0dda:	e42e      	b.n	e063a <__ieee754_pow+0x92>
   e0ddc:	4b43      	ldr	r3, [pc, #268]	; (e0eec <__ieee754_pow+0x944>)
   e0dde:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   e0de2:	4598      	cmp	r8, r3
   e0de4:	f340 8115 	ble.w	e1012 <__ieee754_pow+0xa6a>
   e0de8:	4b41      	ldr	r3, [pc, #260]	; (e0ef0 <__ieee754_pow+0x948>)
   e0dea:	440b      	add	r3, r1
   e0dec:	4303      	orrs	r3, r0
   e0dee:	d10c      	bne.n	e0e0a <__ieee754_pow+0x862>
   e0df0:	4632      	mov	r2, r6
   e0df2:	463b      	mov	r3, r7
   e0df4:	f002 f8e0 	bl	e2fb8 <__aeabi_dsub>
   e0df8:	4602      	mov	r2, r0
   e0dfa:	460b      	mov	r3, r1
   e0dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e0e00:	f002 fd0a 	bl	e3818 <__aeabi_dcmple>
   e0e04:	2800      	cmp	r0, #0
   e0e06:	f43f aee6 	beq.w	e0bd6 <__ieee754_pow+0x62e>
   e0e0a:	a32f      	add	r3, pc, #188	; (adr r3, e0ec8 <__ieee754_pow+0x920>)
   e0e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0e14:	f002 fa84 	bl	e3320 <__aeabi_dmul>
   e0e18:	a32b      	add	r3, pc, #172	; (adr r3, e0ec8 <__ieee754_pow+0x920>)
   e0e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0e1e:	f002 fa7f 	bl	e3320 <__aeabi_dmul>
   e0e22:	ec41 0b10 	vmov	d0, r0, r1
   e0e26:	e408      	b.n	e063a <__ieee754_pow+0x92>
   e0e28:	ed9f 7b29 	vldr	d7, [pc, #164]	; e0ed0 <__ieee754_pow+0x928>
   e0e2c:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0e30:	e676      	b.n	e0b20 <__ieee754_pow+0x578>
   e0e32:	f1b9 0f00 	cmp.w	r9, #0
   e0e36:	f6bf ac8e 	bge.w	e0756 <__ieee754_pow+0x1ae>
   e0e3a:	e9dd 3400 	ldrd	r3, r4, [sp]
   e0e3e:	ee00 3a10 	vmov	s0, r3
   e0e42:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   e0e46:	ee00 3a90 	vmov	s1, r3
   e0e4a:	f7ff bbf6 	b.w	e063a <__ieee754_pow+0x92>
   e0e4e:	4602      	mov	r2, r0
   e0e50:	460b      	mov	r3, r1
   e0e52:	2000      	movs	r0, #0
   e0e54:	4924      	ldr	r1, [pc, #144]	; (e0ee8 <__ieee754_pow+0x940>)
   e0e56:	f002 fb8d 	bl	e3574 <__aeabi_ddiv>
   e0e5a:	e42d      	b.n	e06b8 <__ieee754_pow+0x110>
   e0e5c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; e0ed8 <__ieee754_pow+0x930>
   e0e60:	ed8d 7b08 	vstr	d7, [sp, #32]
   e0e64:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e0e68:	ed9f 7b03 	vldr	d7, [pc, #12]	; e0e78 <__ieee754_pow+0x8d0>
   e0e6c:	f04f 0800 	mov.w	r8, #0
   e0e70:	ed8d 7b06 	vstr	d7, [sp, #24]
   e0e74:	e4be      	b.n	e07f4 <__ieee754_pow+0x24c>
   e0e76:	bf00      	nop
   e0e78:	00000000 	.word	0x00000000
   e0e7c:	3ff00000 	.word	0x3ff00000
   e0e80:	652b82fe 	.word	0x652b82fe
   e0e84:	3c971547 	.word	0x3c971547
   e0e88:	00000000 	.word	0x00000000
   e0e8c:	3fe62e43 	.word	0x3fe62e43
   e0e90:	fefa39ef 	.word	0xfefa39ef
   e0e94:	3fe62e42 	.word	0x3fe62e42
   e0e98:	0ca86c39 	.word	0x0ca86c39
   e0e9c:	be205c61 	.word	0xbe205c61
   e0ea0:	72bea4d0 	.word	0x72bea4d0
   e0ea4:	3e663769 	.word	0x3e663769
   e0ea8:	c5d26bf1 	.word	0xc5d26bf1
   e0eac:	3ebbbd41 	.word	0x3ebbbd41
   e0eb0:	af25de2c 	.word	0xaf25de2c
   e0eb4:	3f11566a 	.word	0x3f11566a
   e0eb8:	16bebd93 	.word	0x16bebd93
   e0ebc:	3f66c16c 	.word	0x3f66c16c
   e0ec0:	5555553e 	.word	0x5555553e
   e0ec4:	3fc55555 	.word	0x3fc55555
   e0ec8:	c2f8f359 	.word	0xc2f8f359
   e0ecc:	01a56e1f 	.word	0x01a56e1f
   e0ed0:	00000000 	.word	0x00000000
   e0ed4:	bff00000 	.word	0xbff00000
	...
   e0ee0:	408fffff 	.word	0x408fffff
   e0ee4:	000fffff 	.word	0x000fffff
   e0ee8:	3ff00000 	.word	0x3ff00000
   e0eec:	4090cbff 	.word	0x4090cbff
   e0ef0:	3f6f3400 	.word	0x3f6f3400
   e0ef4:	4b6c      	ldr	r3, [pc, #432]	; (e10a8 <__ieee754_pow+0xb00>)
   e0ef6:	429c      	cmp	r4, r3
   e0ef8:	f77f ac2a 	ble.w	e0750 <__ieee754_pow+0x1a8>
   e0efc:	4b6b      	ldr	r3, [pc, #428]	; (e10ac <__ieee754_pow+0xb04>)
   e0efe:	429c      	cmp	r4, r3
   e0f00:	f73f abc3 	bgt.w	e068a <__ieee754_pow+0xe2>
   e0f04:	2200      	movs	r2, #0
   e0f06:	4b69      	ldr	r3, [pc, #420]	; (e10ac <__ieee754_pow+0xb04>)
   e0f08:	f002 f856 	bl	e2fb8 <__aeabi_dsub>
   e0f0c:	a356      	add	r3, pc, #344	; (adr r3, e1068 <__ieee754_pow+0xac0>)
   e0f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f12:	4604      	mov	r4, r0
   e0f14:	460d      	mov	r5, r1
   e0f16:	f002 fa03 	bl	e3320 <__aeabi_dmul>
   e0f1a:	a355      	add	r3, pc, #340	; (adr r3, e1070 <__ieee754_pow+0xac8>)
   e0f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f20:	4680      	mov	r8, r0
   e0f22:	4689      	mov	r9, r1
   e0f24:	4620      	mov	r0, r4
   e0f26:	4629      	mov	r1, r5
   e0f28:	f002 f9fa 	bl	e3320 <__aeabi_dmul>
   e0f2c:	2200      	movs	r2, #0
   e0f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0f32:	4b5f      	ldr	r3, [pc, #380]	; (e10b0 <__ieee754_pow+0xb08>)
   e0f34:	4620      	mov	r0, r4
   e0f36:	4629      	mov	r1, r5
   e0f38:	f002 f9f2 	bl	e3320 <__aeabi_dmul>
   e0f3c:	4602      	mov	r2, r0
   e0f3e:	460b      	mov	r3, r1
   e0f40:	a14d      	add	r1, pc, #308	; (adr r1, e1078 <__ieee754_pow+0xad0>)
   e0f42:	e9d1 0100 	ldrd	r0, r1, [r1]
   e0f46:	f002 f837 	bl	e2fb8 <__aeabi_dsub>
   e0f4a:	4622      	mov	r2, r4
   e0f4c:	462b      	mov	r3, r5
   e0f4e:	f002 f9e7 	bl	e3320 <__aeabi_dmul>
   e0f52:	4602      	mov	r2, r0
   e0f54:	460b      	mov	r3, r1
   e0f56:	2000      	movs	r0, #0
   e0f58:	4956      	ldr	r1, [pc, #344]	; (e10b4 <__ieee754_pow+0xb0c>)
   e0f5a:	f002 f82d 	bl	e2fb8 <__aeabi_dsub>
   e0f5e:	4622      	mov	r2, r4
   e0f60:	462b      	mov	r3, r5
   e0f62:	4606      	mov	r6, r0
   e0f64:	460f      	mov	r7, r1
   e0f66:	4620      	mov	r0, r4
   e0f68:	4629      	mov	r1, r5
   e0f6a:	f002 f9d9 	bl	e3320 <__aeabi_dmul>
   e0f6e:	4602      	mov	r2, r0
   e0f70:	460b      	mov	r3, r1
   e0f72:	4630      	mov	r0, r6
   e0f74:	4639      	mov	r1, r7
   e0f76:	f002 f9d3 	bl	e3320 <__aeabi_dmul>
   e0f7a:	a341      	add	r3, pc, #260	; (adr r3, e1080 <__ieee754_pow+0xad8>)
   e0f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0f80:	f002 f9ce 	bl	e3320 <__aeabi_dmul>
   e0f84:	4602      	mov	r2, r0
   e0f86:	460b      	mov	r3, r1
   e0f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e0f8c:	f002 f814 	bl	e2fb8 <__aeabi_dsub>
   e0f90:	4602      	mov	r2, r0
   e0f92:	460b      	mov	r3, r1
   e0f94:	4604      	mov	r4, r0
   e0f96:	460d      	mov	r5, r1
   e0f98:	4640      	mov	r0, r8
   e0f9a:	4649      	mov	r1, r9
   e0f9c:	f002 f80e 	bl	e2fbc <__adddf3>
   e0fa0:	4642      	mov	r2, r8
   e0fa2:	464b      	mov	r3, r9
   e0fa4:	2000      	movs	r0, #0
   e0fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0faa:	f002 f805 	bl	e2fb8 <__aeabi_dsub>
   e0fae:	4602      	mov	r2, r0
   e0fb0:	460b      	mov	r3, r1
   e0fb2:	4620      	mov	r0, r4
   e0fb4:	4629      	mov	r1, r5
   e0fb6:	f001 ffff 	bl	e2fb8 <__aeabi_dsub>
   e0fba:	4680      	mov	r8, r0
   e0fbc:	4689      	mov	r9, r1
   e0fbe:	e5a5      	b.n	e0b0c <__ieee754_pow+0x564>
   e0fc0:	4632      	mov	r2, r6
   e0fc2:	463b      	mov	r3, r7
   e0fc4:	2000      	movs	r0, #0
   e0fc6:	4939      	ldr	r1, [pc, #228]	; (e10ac <__ieee754_pow+0xb04>)
   e0fc8:	f002 fad4 	bl	e3574 <__aeabi_ddiv>
   e0fcc:	ec41 0b10 	vmov	d0, r0, r1
   e0fd0:	f7ff bb33 	b.w	e063a <__ieee754_pow+0x92>
   e0fd4:	a32c      	add	r3, pc, #176	; (adr r3, e1088 <__ieee754_pow+0xae0>)
   e0fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e0fde:	f002 f99f 	bl	e3320 <__aeabi_dmul>
   e0fe2:	a329      	add	r3, pc, #164	; (adr r3, e1088 <__ieee754_pow+0xae0>)
   e0fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0fe8:	f002 f99a 	bl	e3320 <__aeabi_dmul>
   e0fec:	ec41 0b10 	vmov	d0, r0, r1
   e0ff0:	f7ff bb23 	b.w	e063a <__ieee754_pow+0x92>
   e0ff4:	f1be 0f00 	cmp.w	lr, #0
   e0ff8:	f47f ab2a 	bne.w	e0650 <__ieee754_pow+0xa8>
   e0ffc:	f1c3 0314 	rsb	r3, r3, #20
   e1000:	fa48 f203 	asr.w	r2, r8, r3
   e1004:	fa02 f303 	lsl.w	r3, r2, r3
   e1008:	4598      	cmp	r8, r3
   e100a:	d027      	beq.n	e105c <__ieee754_pow+0xab4>
   e100c:	46f3      	mov	fp, lr
   e100e:	f7ff baf7 	b.w	e0600 <__ieee754_pow+0x58>
   e1012:	4b28      	ldr	r3, [pc, #160]	; (e10b4 <__ieee754_pow+0xb0c>)
   e1014:	4598      	cmp	r8, r3
   e1016:	f73f adde 	bgt.w	e0bd6 <__ieee754_pow+0x62e>
   e101a:	e9dd 3400 	ldrd	r3, r4, [sp]
   e101e:	469a      	mov	sl, r3
   e1020:	469b      	mov	fp, r3
   e1022:	e607      	b.n	e0c34 <__ieee754_pow+0x68c>
   e1024:	4602      	mov	r2, r0
   e1026:	460b      	mov	r3, r1
   e1028:	f7ff bb89 	b.w	e073e <__ieee754_pow+0x196>
   e102c:	ed9f 7b18 	vldr	d7, [pc, #96]	; e1090 <__ieee754_pow+0xae8>
   e1030:	ed8d 7b08 	vstr	d7, [sp, #32]
   e1034:	ed9f 7b18 	vldr	d7, [pc, #96]	; e1098 <__ieee754_pow+0xaf0>
   e1038:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   e103c:	ed9f 7b18 	vldr	d7, [pc, #96]	; e10a0 <__ieee754_pow+0xaf8>
   e1040:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   e1044:	ed8d 7b06 	vstr	d7, [sp, #24]
   e1048:	f7ff bbd4 	b.w	e07f4 <__ieee754_pow+0x24c>
   e104c:	4658      	mov	r0, fp
   e104e:	ec43 2b10 	vmov	d0, r2, r3
   e1052:	f001 ff19 	bl	e2e88 <scalbn>
   e1056:	ec51 0b10 	vmov	r0, r1, d0
   e105a:	e69d      	b.n	e0d98 <__ieee754_pow+0x7f0>
   e105c:	f002 0201 	and.w	r2, r2, #1
   e1060:	f1c2 0b02 	rsb	fp, r2, #2
   e1064:	f7ff bacc 	b.w	e0600 <__ieee754_pow+0x58>
   e1068:	60000000 	.word	0x60000000
   e106c:	3ff71547 	.word	0x3ff71547
   e1070:	f85ddf44 	.word	0xf85ddf44
   e1074:	3e54ae0b 	.word	0x3e54ae0b
   e1078:	55555555 	.word	0x55555555
   e107c:	3fd55555 	.word	0x3fd55555
   e1080:	652b82fe 	.word	0x652b82fe
   e1084:	3ff71547 	.word	0x3ff71547
   e1088:	8800759c 	.word	0x8800759c
   e108c:	7e37e43c 	.word	0x7e37e43c
   e1090:	40000000 	.word	0x40000000
   e1094:	3fe2b803 	.word	0x3fe2b803
   e1098:	43cfd006 	.word	0x43cfd006
   e109c:	3e4cfdeb 	.word	0x3e4cfdeb
   e10a0:	00000000 	.word	0x00000000
   e10a4:	3ff80000 	.word	0x3ff80000
   e10a8:	3feffffe 	.word	0x3feffffe
   e10ac:	3ff00000 	.word	0x3ff00000
   e10b0:	3fd00000 	.word	0x3fd00000
   e10b4:	3fe00000 	.word	0x3fe00000

000e10b8 <__ieee754_rem_pio2>:
   e10b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e10bc:	ec53 2b10 	vmov	r2, r3, d0
   e10c0:	4997      	ldr	r1, [pc, #604]	; (e1320 <__ieee754_rem_pio2+0x268>)
   e10c2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   e10c6:	458b      	cmp	fp, r1
   e10c8:	b08f      	sub	sp, #60	; 0x3c
   e10ca:	f340 8087 	ble.w	e11dc <__ieee754_rem_pio2+0x124>
   e10ce:	4995      	ldr	r1, [pc, #596]	; (e1324 <__ieee754_rem_pio2+0x26c>)
   e10d0:	458b      	cmp	fp, r1
   e10d2:	461c      	mov	r4, r3
   e10d4:	4682      	mov	sl, r0
   e10d6:	dc29      	bgt.n	e112c <__ieee754_rem_pio2+0x74>
   e10d8:	2c00      	cmp	r4, #0
   e10da:	4619      	mov	r1, r3
   e10dc:	ee10 0a10 	vmov	r0, s0
   e10e0:	a385      	add	r3, pc, #532	; (adr r3, e12f8 <__ieee754_rem_pio2+0x240>)
   e10e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e10e6:	f340 81a5 	ble.w	e1434 <__ieee754_rem_pio2+0x37c>
   e10ea:	f001 ff65 	bl	e2fb8 <__aeabi_dsub>
   e10ee:	4b8e      	ldr	r3, [pc, #568]	; (e1328 <__ieee754_rem_pio2+0x270>)
   e10f0:	459b      	cmp	fp, r3
   e10f2:	4604      	mov	r4, r0
   e10f4:	460d      	mov	r5, r1
   e10f6:	f000 8087 	beq.w	e1208 <__ieee754_rem_pio2+0x150>
   e10fa:	a381      	add	r3, pc, #516	; (adr r3, e1300 <__ieee754_rem_pio2+0x248>)
   e10fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1100:	f001 ff5a 	bl	e2fb8 <__aeabi_dsub>
   e1104:	4602      	mov	r2, r0
   e1106:	460b      	mov	r3, r1
   e1108:	e9ca 2300 	strd	r2, r3, [sl]
   e110c:	4620      	mov	r0, r4
   e110e:	4629      	mov	r1, r5
   e1110:	f001 ff52 	bl	e2fb8 <__aeabi_dsub>
   e1114:	a37a      	add	r3, pc, #488	; (adr r3, e1300 <__ieee754_rem_pio2+0x248>)
   e1116:	e9d3 2300 	ldrd	r2, r3, [r3]
   e111a:	f001 ff4d 	bl	e2fb8 <__aeabi_dsub>
   e111e:	2501      	movs	r5, #1
   e1120:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e1124:	4628      	mov	r0, r5
   e1126:	b00f      	add	sp, #60	; 0x3c
   e1128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e112c:	497f      	ldr	r1, [pc, #508]	; (e132c <__ieee754_rem_pio2+0x274>)
   e112e:	458b      	cmp	fp, r1
   e1130:	f340 8087 	ble.w	e1242 <__ieee754_rem_pio2+0x18a>
   e1134:	497e      	ldr	r1, [pc, #504]	; (e1330 <__ieee754_rem_pio2+0x278>)
   e1136:	458b      	cmp	fp, r1
   e1138:	dc5b      	bgt.n	e11f2 <__ieee754_rem_pio2+0x13a>
   e113a:	ea4f 552b 	mov.w	r5, fp, asr #20
   e113e:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   e1142:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   e1146:	4610      	mov	r0, r2
   e1148:	4639      	mov	r1, r7
   e114a:	ee10 6a10 	vmov	r6, s0
   e114e:	f002 fb97 	bl	e3880 <__aeabi_d2iz>
   e1152:	f002 f87f 	bl	e3254 <__aeabi_i2d>
   e1156:	4680      	mov	r8, r0
   e1158:	4689      	mov	r9, r1
   e115a:	4642      	mov	r2, r8
   e115c:	464b      	mov	r3, r9
   e115e:	4630      	mov	r0, r6
   e1160:	4639      	mov	r1, r7
   e1162:	e9cd 8908 	strd	r8, r9, [sp, #32]
   e1166:	f001 ff27 	bl	e2fb8 <__aeabi_dsub>
   e116a:	2200      	movs	r2, #0
   e116c:	4b71      	ldr	r3, [pc, #452]	; (e1334 <__ieee754_rem_pio2+0x27c>)
   e116e:	f002 f8d7 	bl	e3320 <__aeabi_dmul>
   e1172:	4689      	mov	r9, r1
   e1174:	4680      	mov	r8, r0
   e1176:	f002 fb83 	bl	e3880 <__aeabi_d2iz>
   e117a:	f002 f86b 	bl	e3254 <__aeabi_i2d>
   e117e:	4606      	mov	r6, r0
   e1180:	460f      	mov	r7, r1
   e1182:	4632      	mov	r2, r6
   e1184:	463b      	mov	r3, r7
   e1186:	4640      	mov	r0, r8
   e1188:	4649      	mov	r1, r9
   e118a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   e118e:	f001 ff13 	bl	e2fb8 <__aeabi_dsub>
   e1192:	2200      	movs	r2, #0
   e1194:	4b67      	ldr	r3, [pc, #412]	; (e1334 <__ieee754_rem_pio2+0x27c>)
   e1196:	f002 f8c3 	bl	e3320 <__aeabi_dmul>
   e119a:	2200      	movs	r2, #0
   e119c:	2300      	movs	r3, #0
   e119e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e11a2:	f002 fb25 	bl	e37f0 <__aeabi_dcmpeq>
   e11a6:	2800      	cmp	r0, #0
   e11a8:	f000 8170 	beq.w	e148c <__ieee754_rem_pio2+0x3d4>
   e11ac:	2300      	movs	r3, #0
   e11ae:	4630      	mov	r0, r6
   e11b0:	4639      	mov	r1, r7
   e11b2:	2200      	movs	r2, #0
   e11b4:	f002 fb1c 	bl	e37f0 <__aeabi_dcmpeq>
   e11b8:	2800      	cmp	r0, #0
   e11ba:	bf14      	ite	ne
   e11bc:	2301      	movne	r3, #1
   e11be:	2302      	moveq	r3, #2
   e11c0:	4a5d      	ldr	r2, [pc, #372]	; (e1338 <__ieee754_rem_pio2+0x280>)
   e11c2:	9201      	str	r2, [sp, #4]
   e11c4:	2102      	movs	r1, #2
   e11c6:	9100      	str	r1, [sp, #0]
   e11c8:	462a      	mov	r2, r5
   e11ca:	4651      	mov	r1, sl
   e11cc:	a808      	add	r0, sp, #32
   e11ce:	f000 fc93 	bl	e1af8 <__kernel_rem_pio2>
   e11d2:	2c00      	cmp	r4, #0
   e11d4:	f2c0 814c 	blt.w	e1470 <__ieee754_rem_pio2+0x3b8>
   e11d8:	4605      	mov	r5, r0
   e11da:	e006      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e11dc:	ed80 0b00 	vstr	d0, [r0]
   e11e0:	2500      	movs	r5, #0
   e11e2:	2400      	movs	r4, #0
   e11e4:	e9c0 4502 	strd	r4, r5, [r0, #8]
   e11e8:	2500      	movs	r5, #0
   e11ea:	4628      	mov	r0, r5
   e11ec:	b00f      	add	sp, #60	; 0x3c
   e11ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e11f2:	ee10 0a10 	vmov	r0, s0
   e11f6:	4619      	mov	r1, r3
   e11f8:	f001 fede 	bl	e2fb8 <__aeabi_dsub>
   e11fc:	2500      	movs	r5, #0
   e11fe:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e1202:	e9ca 0100 	strd	r0, r1, [sl]
   e1206:	e7f0      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e1208:	a33f      	add	r3, pc, #252	; (adr r3, e1308 <__ieee754_rem_pio2+0x250>)
   e120a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e120e:	f001 fed3 	bl	e2fb8 <__aeabi_dsub>
   e1212:	a33f      	add	r3, pc, #252	; (adr r3, e1310 <__ieee754_rem_pio2+0x258>)
   e1214:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1218:	460d      	mov	r5, r1
   e121a:	4604      	mov	r4, r0
   e121c:	f001 fecc 	bl	e2fb8 <__aeabi_dsub>
   e1220:	4602      	mov	r2, r0
   e1222:	460b      	mov	r3, r1
   e1224:	e9ca 2300 	strd	r2, r3, [sl]
   e1228:	4629      	mov	r1, r5
   e122a:	4620      	mov	r0, r4
   e122c:	f001 fec4 	bl	e2fb8 <__aeabi_dsub>
   e1230:	a337      	add	r3, pc, #220	; (adr r3, e1310 <__ieee754_rem_pio2+0x258>)
   e1232:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1236:	f001 febf 	bl	e2fb8 <__aeabi_dsub>
   e123a:	2501      	movs	r5, #1
   e123c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e1240:	e7d3      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e1242:	f7fc fe65 	bl	ddf10 <fabs>
   e1246:	ec57 6b10 	vmov	r6, r7, d0
   e124a:	ee10 0a10 	vmov	r0, s0
   e124e:	a332      	add	r3, pc, #200	; (adr r3, e1318 <__ieee754_rem_pio2+0x260>)
   e1250:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1254:	4639      	mov	r1, r7
   e1256:	f002 f863 	bl	e3320 <__aeabi_dmul>
   e125a:	2200      	movs	r2, #0
   e125c:	4b37      	ldr	r3, [pc, #220]	; (e133c <__ieee754_rem_pio2+0x284>)
   e125e:	f001 fead 	bl	e2fbc <__adddf3>
   e1262:	f002 fb0d 	bl	e3880 <__aeabi_d2iz>
   e1266:	4605      	mov	r5, r0
   e1268:	f001 fff4 	bl	e3254 <__aeabi_i2d>
   e126c:	a322      	add	r3, pc, #136	; (adr r3, e12f8 <__ieee754_rem_pio2+0x240>)
   e126e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1272:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e1276:	f002 f853 	bl	e3320 <__aeabi_dmul>
   e127a:	4602      	mov	r2, r0
   e127c:	460b      	mov	r3, r1
   e127e:	4630      	mov	r0, r6
   e1280:	4639      	mov	r1, r7
   e1282:	f001 fe99 	bl	e2fb8 <__aeabi_dsub>
   e1286:	a31e      	add	r3, pc, #120	; (adr r3, e1300 <__ieee754_rem_pio2+0x248>)
   e1288:	e9d3 2300 	ldrd	r2, r3, [r3]
   e128c:	4680      	mov	r8, r0
   e128e:	4689      	mov	r9, r1
   e1290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1294:	f002 f844 	bl	e3320 <__aeabi_dmul>
   e1298:	2d1f      	cmp	r5, #31
   e129a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e129e:	dc51      	bgt.n	e1344 <__ieee754_rem_pio2+0x28c>
   e12a0:	4b27      	ldr	r3, [pc, #156]	; (e1340 <__ieee754_rem_pio2+0x288>)
   e12a2:	1e6a      	subs	r2, r5, #1
   e12a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e12a8:	459b      	cmp	fp, r3
   e12aa:	d04b      	beq.n	e1344 <__ieee754_rem_pio2+0x28c>
   e12ac:	4602      	mov	r2, r0
   e12ae:	460b      	mov	r3, r1
   e12b0:	4640      	mov	r0, r8
   e12b2:	4649      	mov	r1, r9
   e12b4:	f001 fe80 	bl	e2fb8 <__aeabi_dsub>
   e12b8:	4606      	mov	r6, r0
   e12ba:	460f      	mov	r7, r1
   e12bc:	e9ca 6700 	strd	r6, r7, [sl]
   e12c0:	4632      	mov	r2, r6
   e12c2:	463b      	mov	r3, r7
   e12c4:	4640      	mov	r0, r8
   e12c6:	4649      	mov	r1, r9
   e12c8:	f001 fe76 	bl	e2fb8 <__aeabi_dsub>
   e12cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e12d0:	f001 fe72 	bl	e2fb8 <__aeabi_dsub>
   e12d4:	2c00      	cmp	r4, #0
   e12d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e12da:	da86      	bge.n	e11ea <__ieee754_rem_pio2+0x132>
   e12dc:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   e12e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e12e4:	426d      	negs	r5, r5
   e12e6:	f8ca 6000 	str.w	r6, [sl]
   e12ea:	f8ca 4004 	str.w	r4, [sl, #4]
   e12ee:	f8ca 0008 	str.w	r0, [sl, #8]
   e12f2:	f8ca 300c 	str.w	r3, [sl, #12]
   e12f6:	e778      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e12f8:	54400000 	.word	0x54400000
   e12fc:	3ff921fb 	.word	0x3ff921fb
   e1300:	1a626331 	.word	0x1a626331
   e1304:	3dd0b461 	.word	0x3dd0b461
   e1308:	1a600000 	.word	0x1a600000
   e130c:	3dd0b461 	.word	0x3dd0b461
   e1310:	2e037073 	.word	0x2e037073
   e1314:	3ba3198a 	.word	0x3ba3198a
   e1318:	6dc9c883 	.word	0x6dc9c883
   e131c:	3fe45f30 	.word	0x3fe45f30
   e1320:	3fe921fb 	.word	0x3fe921fb
   e1324:	4002d97b 	.word	0x4002d97b
   e1328:	3ff921fb 	.word	0x3ff921fb
   e132c:	413921fb 	.word	0x413921fb
   e1330:	7fefffff 	.word	0x7fefffff
   e1334:	41700000 	.word	0x41700000
   e1338:	000e8c20 	.word	0x000e8c20
   e133c:	3fe00000 	.word	0x3fe00000
   e1340:	000e8ba0 	.word	0x000e8ba0
   e1344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e1348:	4640      	mov	r0, r8
   e134a:	4649      	mov	r1, r9
   e134c:	f001 fe34 	bl	e2fb8 <__aeabi_dsub>
   e1350:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   e1354:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e1358:	ebc3 030b 	rsb	r3, r3, fp
   e135c:	4606      	mov	r6, r0
   e135e:	460f      	mov	r7, r1
   e1360:	2b10      	cmp	r3, #16
   e1362:	e9ca 6700 	strd	r6, r7, [sl]
   e1366:	ddab      	ble.n	e12c0 <__ieee754_rem_pio2+0x208>
   e1368:	a35d      	add	r3, pc, #372	; (adr r3, e14e0 <__ieee754_rem_pio2+0x428>)
   e136a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e136e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1372:	f001 ffd5 	bl	e3320 <__aeabi_dmul>
   e1376:	4606      	mov	r6, r0
   e1378:	460f      	mov	r7, r1
   e137a:	4602      	mov	r2, r0
   e137c:	460b      	mov	r3, r1
   e137e:	4640      	mov	r0, r8
   e1380:	4649      	mov	r1, r9
   e1382:	f001 fe19 	bl	e2fb8 <__aeabi_dsub>
   e1386:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e138a:	4602      	mov	r2, r0
   e138c:	460b      	mov	r3, r1
   e138e:	4640      	mov	r0, r8
   e1390:	4649      	mov	r1, r9
   e1392:	f001 fe11 	bl	e2fb8 <__aeabi_dsub>
   e1396:	4632      	mov	r2, r6
   e1398:	463b      	mov	r3, r7
   e139a:	f001 fe0d 	bl	e2fb8 <__aeabi_dsub>
   e139e:	a352      	add	r3, pc, #328	; (adr r3, e14e8 <__ieee754_rem_pio2+0x430>)
   e13a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13a4:	4606      	mov	r6, r0
   e13a6:	460f      	mov	r7, r1
   e13a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e13ac:	f001 ffb8 	bl	e3320 <__aeabi_dmul>
   e13b0:	4632      	mov	r2, r6
   e13b2:	463b      	mov	r3, r7
   e13b4:	f001 fe00 	bl	e2fb8 <__aeabi_dsub>
   e13b8:	460b      	mov	r3, r1
   e13ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e13be:	4602      	mov	r2, r0
   e13c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e13c4:	f001 fdf8 	bl	e2fb8 <__aeabi_dsub>
   e13c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e13cc:	ebc3 0b0b 	rsb	fp, r3, fp
   e13d0:	4606      	mov	r6, r0
   e13d2:	460f      	mov	r7, r1
   e13d4:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   e13d8:	e9ca 6700 	strd	r6, r7, [sl]
   e13dc:	dd76      	ble.n	e14cc <__ieee754_rem_pio2+0x414>
   e13de:	a345      	add	r3, pc, #276	; (adr r3, e14f4 <__ieee754_rem_pio2+0x43c>)
   e13e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e13e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e13e8:	f001 ff9a 	bl	e3320 <__aeabi_dmul>
   e13ec:	4606      	mov	r6, r0
   e13ee:	460f      	mov	r7, r1
   e13f0:	4602      	mov	r2, r0
   e13f2:	460b      	mov	r3, r1
   e13f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e13f8:	f001 fdde 	bl	e2fb8 <__aeabi_dsub>
   e13fc:	4602      	mov	r2, r0
   e13fe:	460b      	mov	r3, r1
   e1400:	4680      	mov	r8, r0
   e1402:	4689      	mov	r9, r1
   e1404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e1408:	f001 fdd6 	bl	e2fb8 <__aeabi_dsub>
   e140c:	4632      	mov	r2, r6
   e140e:	463b      	mov	r3, r7
   e1410:	f001 fdd2 	bl	e2fb8 <__aeabi_dsub>
   e1414:	a339      	add	r3, pc, #228	; (adr r3, e14fc <__ieee754_rem_pio2+0x444>)
   e1416:	e9d3 2300 	ldrd	r2, r3, [r3]
   e141a:	4606      	mov	r6, r0
   e141c:	460f      	mov	r7, r1
   e141e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e1422:	f001 ff7d 	bl	e3320 <__aeabi_dmul>
   e1426:	4632      	mov	r2, r6
   e1428:	463b      	mov	r3, r7
   e142a:	f001 fdc5 	bl	e2fb8 <__aeabi_dsub>
   e142e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e1432:	e73b      	b.n	e12ac <__ieee754_rem_pio2+0x1f4>
   e1434:	f001 fdc2 	bl	e2fbc <__adddf3>
   e1438:	4b2d      	ldr	r3, [pc, #180]	; (e14f0 <__ieee754_rem_pio2+0x438>)
   e143a:	459b      	cmp	fp, r3
   e143c:	4604      	mov	r4, r0
   e143e:	460d      	mov	r5, r1
   e1440:	d026      	beq.n	e1490 <__ieee754_rem_pio2+0x3d8>
   e1442:	a325      	add	r3, pc, #148	; (adr r3, e14d8 <__ieee754_rem_pio2+0x420>)
   e1444:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1448:	f001 fdb8 	bl	e2fbc <__adddf3>
   e144c:	4602      	mov	r2, r0
   e144e:	460b      	mov	r3, r1
   e1450:	e9ca 2300 	strd	r2, r3, [sl]
   e1454:	4629      	mov	r1, r5
   e1456:	4620      	mov	r0, r4
   e1458:	f001 fdae 	bl	e2fb8 <__aeabi_dsub>
   e145c:	a31e      	add	r3, pc, #120	; (adr r3, e14d8 <__ieee754_rem_pio2+0x420>)
   e145e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1462:	f001 fdab 	bl	e2fbc <__adddf3>
   e1466:	f04f 35ff 	mov.w	r5, #4294967295
   e146a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e146e:	e6bc      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e1470:	f8da 2004 	ldr.w	r2, [sl, #4]
   e1474:	f8da 300c 	ldr.w	r3, [sl, #12]
   e1478:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e147c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e1480:	4245      	negs	r5, r0
   e1482:	f8ca 2004 	str.w	r2, [sl, #4]
   e1486:	f8ca 300c 	str.w	r3, [sl, #12]
   e148a:	e6ae      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e148c:	2303      	movs	r3, #3
   e148e:	e697      	b.n	e11c0 <__ieee754_rem_pio2+0x108>
   e1490:	a313      	add	r3, pc, #76	; (adr r3, e14e0 <__ieee754_rem_pio2+0x428>)
   e1492:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1496:	f001 fd91 	bl	e2fbc <__adddf3>
   e149a:	a313      	add	r3, pc, #76	; (adr r3, e14e8 <__ieee754_rem_pio2+0x430>)
   e149c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e14a0:	460d      	mov	r5, r1
   e14a2:	4604      	mov	r4, r0
   e14a4:	f001 fd8a 	bl	e2fbc <__adddf3>
   e14a8:	4602      	mov	r2, r0
   e14aa:	460b      	mov	r3, r1
   e14ac:	e9ca 2300 	strd	r2, r3, [sl]
   e14b0:	4629      	mov	r1, r5
   e14b2:	4620      	mov	r0, r4
   e14b4:	f001 fd80 	bl	e2fb8 <__aeabi_dsub>
   e14b8:	a30b      	add	r3, pc, #44	; (adr r3, e14e8 <__ieee754_rem_pio2+0x430>)
   e14ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e14be:	f001 fd7d 	bl	e2fbc <__adddf3>
   e14c2:	f04f 35ff 	mov.w	r5, #4294967295
   e14c6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   e14ca:	e68e      	b.n	e11ea <__ieee754_rem_pio2+0x132>
   e14cc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   e14d0:	e6f6      	b.n	e12c0 <__ieee754_rem_pio2+0x208>
   e14d2:	bf00      	nop
   e14d4:	f3af 8000 	nop.w
   e14d8:	1a626331 	.word	0x1a626331
   e14dc:	3dd0b461 	.word	0x3dd0b461
   e14e0:	1a600000 	.word	0x1a600000
   e14e4:	3dd0b461 	.word	0x3dd0b461
   e14e8:	2e037073 	.word	0x2e037073
   e14ec:	3ba3198a 	.word	0x3ba3198a
   e14f0:	3ff921fb 	.word	0x3ff921fb
   e14f4:	2e000000 	.word	0x2e000000
   e14f8:	3ba3198a 	.word	0x3ba3198a
   e14fc:	252049c1 	.word	0x252049c1
   e1500:	397b839a 	.word	0x397b839a
   e1504:	00000000 	.word	0x00000000

000e1508 <__ieee754_sinh>:
   e1508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e150c:	ec57 6b10 	vmov	r6, r7, d0
   e1510:	4a65      	ldr	r2, [pc, #404]	; (e16a8 <__ieee754_sinh+0x1a0>)
   e1512:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   e1516:	4590      	cmp	r8, r2
   e1518:	dc32      	bgt.n	e1580 <__ieee754_sinh+0x78>
   e151a:	4b64      	ldr	r3, [pc, #400]	; (e16ac <__ieee754_sinh+0x1a4>)
   e151c:	2f00      	cmp	r7, #0
   e151e:	bfb4      	ite	lt
   e1520:	4d63      	ldrlt	r5, [pc, #396]	; (e16b0 <__ieee754_sinh+0x1a8>)
   e1522:	4d64      	ldrge	r5, [pc, #400]	; (e16b4 <__ieee754_sinh+0x1ac>)
   e1524:	4598      	cmp	r8, r3
   e1526:	f04f 0400 	mov.w	r4, #0
   e152a:	dc14      	bgt.n	e1556 <__ieee754_sinh+0x4e>
   e152c:	4b62      	ldr	r3, [pc, #392]	; (e16b8 <__ieee754_sinh+0x1b0>)
   e152e:	4598      	cmp	r8, r3
   e1530:	f300 8085 	bgt.w	e163e <__ieee754_sinh+0x136>
   e1534:	a35a      	add	r3, pc, #360	; (adr r3, e16a0 <__ieee754_sinh+0x198>)
   e1536:	e9d3 2300 	ldrd	r2, r3, [r3]
   e153a:	ee10 0a10 	vmov	r0, s0
   e153e:	4639      	mov	r1, r7
   e1540:	f001 fd3c 	bl	e2fbc <__adddf3>
   e1544:	2200      	movs	r2, #0
   e1546:	4b5d      	ldr	r3, [pc, #372]	; (e16bc <__ieee754_sinh+0x1b4>)
   e1548:	f002 f97a 	bl	e3840 <__aeabi_dcmpgt>
   e154c:	b318      	cbz	r0, e1596 <__ieee754_sinh+0x8e>
   e154e:	ec47 6b10 	vmov	d0, r6, r7
   e1552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1556:	4b5a      	ldr	r3, [pc, #360]	; (e16c0 <__ieee754_sinh+0x1b8>)
   e1558:	4598      	cmp	r8, r3
   e155a:	f340 8092 	ble.w	e1682 <__ieee754_sinh+0x17a>
   e155e:	4b59      	ldr	r3, [pc, #356]	; (e16c4 <__ieee754_sinh+0x1bc>)
   e1560:	4598      	cmp	r8, r3
   e1562:	dd4d      	ble.n	e1600 <__ieee754_sinh+0xf8>
   e1564:	3301      	adds	r3, #1
   e1566:	4598      	cmp	r8, r3
   e1568:	d047      	beq.n	e15fa <__ieee754_sinh+0xf2>
   e156a:	4630      	mov	r0, r6
   e156c:	4639      	mov	r1, r7
   e156e:	a34c      	add	r3, pc, #304	; (adr r3, e16a0 <__ieee754_sinh+0x198>)
   e1570:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1574:	f001 fed4 	bl	e3320 <__aeabi_dmul>
   e1578:	ec41 0b10 	vmov	d0, r0, r1
   e157c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1580:	ee10 2a10 	vmov	r2, s0
   e1584:	463b      	mov	r3, r7
   e1586:	4630      	mov	r0, r6
   e1588:	4639      	mov	r1, r7
   e158a:	f001 fd17 	bl	e2fbc <__adddf3>
   e158e:	ec41 0b10 	vmov	d0, r0, r1
   e1592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1596:	ec47 6b10 	vmov	d0, r6, r7
   e159a:	f7fc fcb9 	bl	ddf10 <fabs>
   e159e:	f001 f96b 	bl	e2878 <expm1>
   e15a2:	ec57 6b10 	vmov	r6, r7, d0
   e15a6:	4632      	mov	r2, r6
   e15a8:	463b      	mov	r3, r7
   e15aa:	4630      	mov	r0, r6
   e15ac:	4639      	mov	r1, r7
   e15ae:	f001 fd05 	bl	e2fbc <__adddf3>
   e15b2:	4632      	mov	r2, r6
   e15b4:	4682      	mov	sl, r0
   e15b6:	468b      	mov	fp, r1
   e15b8:	463b      	mov	r3, r7
   e15ba:	4630      	mov	r0, r6
   e15bc:	4639      	mov	r1, r7
   e15be:	f001 feaf 	bl	e3320 <__aeabi_dmul>
   e15c2:	2200      	movs	r2, #0
   e15c4:	4680      	mov	r8, r0
   e15c6:	4689      	mov	r9, r1
   e15c8:	4b3c      	ldr	r3, [pc, #240]	; (e16bc <__ieee754_sinh+0x1b4>)
   e15ca:	4630      	mov	r0, r6
   e15cc:	4639      	mov	r1, r7
   e15ce:	f001 fcf5 	bl	e2fbc <__adddf3>
   e15d2:	4602      	mov	r2, r0
   e15d4:	460b      	mov	r3, r1
   e15d6:	4640      	mov	r0, r8
   e15d8:	4649      	mov	r1, r9
   e15da:	f001 ffcb 	bl	e3574 <__aeabi_ddiv>
   e15de:	4602      	mov	r2, r0
   e15e0:	460b      	mov	r3, r1
   e15e2:	4650      	mov	r0, sl
   e15e4:	4659      	mov	r1, fp
   e15e6:	f001 fce7 	bl	e2fb8 <__aeabi_dsub>
   e15ea:	4622      	mov	r2, r4
   e15ec:	462b      	mov	r3, r5
   e15ee:	f001 fe97 	bl	e3320 <__aeabi_dmul>
   e15f2:	ec41 0b10 	vmov	d0, r0, r1
   e15f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e15fa:	4b33      	ldr	r3, [pc, #204]	; (e16c8 <__ieee754_sinh+0x1c0>)
   e15fc:	429e      	cmp	r6, r3
   e15fe:	d8b4      	bhi.n	e156a <__ieee754_sinh+0x62>
   e1600:	ec47 6b10 	vmov	d0, r6, r7
   e1604:	f7fc fc84 	bl	ddf10 <fabs>
   e1608:	2200      	movs	r2, #0
   e160a:	4b2a      	ldr	r3, [pc, #168]	; (e16b4 <__ieee754_sinh+0x1ac>)
   e160c:	ec51 0b10 	vmov	r0, r1, d0
   e1610:	f001 fe86 	bl	e3320 <__aeabi_dmul>
   e1614:	ec41 0b10 	vmov	d0, r0, r1
   e1618:	f7fe fa52 	bl	dfac0 <__ieee754_exp>
   e161c:	ec57 6b10 	vmov	r6, r7, d0
   e1620:	ee10 2a10 	vmov	r2, s0
   e1624:	463b      	mov	r3, r7
   e1626:	4620      	mov	r0, r4
   e1628:	4629      	mov	r1, r5
   e162a:	f001 fe79 	bl	e3320 <__aeabi_dmul>
   e162e:	4632      	mov	r2, r6
   e1630:	463b      	mov	r3, r7
   e1632:	f001 fe75 	bl	e3320 <__aeabi_dmul>
   e1636:	ec41 0b10 	vmov	d0, r0, r1
   e163a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e163e:	f7fc fc67 	bl	ddf10 <fabs>
   e1642:	f001 f919 	bl	e2878 <expm1>
   e1646:	4b21      	ldr	r3, [pc, #132]	; (e16cc <__ieee754_sinh+0x1c4>)
   e1648:	4598      	cmp	r8, r3
   e164a:	ec57 6b10 	vmov	r6, r7, d0
   e164e:	ddaa      	ble.n	e15a6 <__ieee754_sinh+0x9e>
   e1650:	ee10 0a10 	vmov	r0, s0
   e1654:	2200      	movs	r2, #0
   e1656:	4b19      	ldr	r3, [pc, #100]	; (e16bc <__ieee754_sinh+0x1b4>)
   e1658:	4639      	mov	r1, r7
   e165a:	f001 fcaf 	bl	e2fbc <__adddf3>
   e165e:	4602      	mov	r2, r0
   e1660:	460b      	mov	r3, r1
   e1662:	4630      	mov	r0, r6
   e1664:	4639      	mov	r1, r7
   e1666:	f001 ff85 	bl	e3574 <__aeabi_ddiv>
   e166a:	4632      	mov	r2, r6
   e166c:	463b      	mov	r3, r7
   e166e:	f001 fca5 	bl	e2fbc <__adddf3>
   e1672:	4622      	mov	r2, r4
   e1674:	462b      	mov	r3, r5
   e1676:	f001 fe53 	bl	e3320 <__aeabi_dmul>
   e167a:	ec41 0b10 	vmov	d0, r0, r1
   e167e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1682:	f7fc fc45 	bl	ddf10 <fabs>
   e1686:	f7fe fa1b 	bl	dfac0 <__ieee754_exp>
   e168a:	4620      	mov	r0, r4
   e168c:	ec53 2b10 	vmov	r2, r3, d0
   e1690:	4629      	mov	r1, r5
   e1692:	f001 fe45 	bl	e3320 <__aeabi_dmul>
   e1696:	ec41 0b10 	vmov	d0, r0, r1
   e169a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e169e:	bf00      	nop
   e16a0:	3cac7433 	.word	0x3cac7433
   e16a4:	7fac7b1f 	.word	0x7fac7b1f
   e16a8:	7fefffff 	.word	0x7fefffff
   e16ac:	4035ffff 	.word	0x4035ffff
   e16b0:	bfe00000 	.word	0xbfe00000
   e16b4:	3fe00000 	.word	0x3fe00000
   e16b8:	3e2fffff 	.word	0x3e2fffff
   e16bc:	3ff00000 	.word	0x3ff00000
   e16c0:	40862e41 	.word	0x40862e41
   e16c4:	408633cd 	.word	0x408633cd
   e16c8:	8fb9f87d 	.word	0x8fb9f87d
   e16cc:	3fefffff 	.word	0x3fefffff

000e16d0 <__ieee754_sqrt>:
   e16d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e16d4:	4965      	ldr	r1, [pc, #404]	; (e186c <__ieee754_sqrt+0x19c>)
   e16d6:	ec55 4b10 	vmov	r4, r5, d0
   e16da:	460e      	mov	r6, r1
   e16dc:	4029      	ands	r1, r5
   e16de:	42b1      	cmp	r1, r6
   e16e0:	f000 8097 	beq.w	e1812 <__ieee754_sqrt+0x142>
   e16e4:	2d00      	cmp	r5, #0
   e16e6:	462b      	mov	r3, r5
   e16e8:	ee10 2a10 	vmov	r2, s0
   e16ec:	dd74      	ble.n	e17d8 <__ieee754_sqrt+0x108>
   e16ee:	152f      	asrs	r7, r5, #20
   e16f0:	d07f      	beq.n	e17f2 <__ieee754_sqrt+0x122>
   e16f2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   e16f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   e16fa:	07f9      	lsls	r1, r7, #31
   e16fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e1700:	d465      	bmi.n	e17ce <__ieee754_sqrt+0xfe>
   e1702:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   e1706:	2600      	movs	r6, #0
   e1708:	440b      	add	r3, r1
   e170a:	107f      	asrs	r7, r7, #1
   e170c:	0052      	lsls	r2, r2, #1
   e170e:	46b6      	mov	lr, r6
   e1710:	2016      	movs	r0, #22
   e1712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   e1716:	eb0e 0401 	add.w	r4, lr, r1
   e171a:	429c      	cmp	r4, r3
   e171c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   e1720:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1724:	dc03      	bgt.n	e172e <__ieee754_sqrt+0x5e>
   e1726:	1b1b      	subs	r3, r3, r4
   e1728:	eb04 0e01 	add.w	lr, r4, r1
   e172c:	440e      	add	r6, r1
   e172e:	3801      	subs	r0, #1
   e1730:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   e1734:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1738:	d1ed      	bne.n	e1716 <__ieee754_sqrt+0x46>
   e173a:	4684      	mov	ip, r0
   e173c:	2420      	movs	r4, #32
   e173e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   e1742:	e009      	b.n	e1758 <__ieee754_sqrt+0x88>
   e1744:	d020      	beq.n	e1788 <__ieee754_sqrt+0xb8>
   e1746:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   e174a:	3c01      	subs	r4, #1
   e174c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   e1750:	442b      	add	r3, r5
   e1752:	ea4f 0242 	mov.w	r2, r2, lsl #1
   e1756:	d020      	beq.n	e179a <__ieee754_sqrt+0xca>
   e1758:	459e      	cmp	lr, r3
   e175a:	eb01 050c 	add.w	r5, r1, ip
   e175e:	daf1      	bge.n	e1744 <__ieee754_sqrt+0x74>
   e1760:	2d00      	cmp	r5, #0
   e1762:	eb05 0c01 	add.w	ip, r5, r1
   e1766:	db09      	blt.n	e177c <__ieee754_sqrt+0xac>
   e1768:	46f0      	mov	r8, lr
   e176a:	4295      	cmp	r5, r2
   e176c:	ebce 0303 	rsb	r3, lr, r3
   e1770:	d900      	bls.n	e1774 <__ieee754_sqrt+0xa4>
   e1772:	3b01      	subs	r3, #1
   e1774:	1b52      	subs	r2, r2, r5
   e1776:	4408      	add	r0, r1
   e1778:	46c6      	mov	lr, r8
   e177a:	e7e4      	b.n	e1746 <__ieee754_sqrt+0x76>
   e177c:	f1bc 0f00 	cmp.w	ip, #0
   e1780:	dbf2      	blt.n	e1768 <__ieee754_sqrt+0x98>
   e1782:	f10e 0801 	add.w	r8, lr, #1
   e1786:	e7f0      	b.n	e176a <__ieee754_sqrt+0x9a>
   e1788:	4295      	cmp	r5, r2
   e178a:	d81e      	bhi.n	e17ca <__ieee754_sqrt+0xfa>
   e178c:	2d00      	cmp	r5, #0
   e178e:	eb05 0c01 	add.w	ip, r5, r1
   e1792:	db50      	blt.n	e1836 <__ieee754_sqrt+0x166>
   e1794:	4698      	mov	r8, r3
   e1796:	2300      	movs	r3, #0
   e1798:	e7ec      	b.n	e1774 <__ieee754_sqrt+0xa4>
   e179a:	4313      	orrs	r3, r2
   e179c:	d004      	beq.n	e17a8 <__ieee754_sqrt+0xd8>
   e179e:	1c42      	adds	r2, r0, #1
   e17a0:	d04d      	beq.n	e183e <__ieee754_sqrt+0x16e>
   e17a2:	f000 0301 	and.w	r3, r0, #1
   e17a6:	4418      	add	r0, r3
   e17a8:	0840      	lsrs	r0, r0, #1
   e17aa:	1071      	asrs	r1, r6, #1
   e17ac:	07f3      	lsls	r3, r6, #31
   e17ae:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   e17b2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   e17b6:	bf48      	it	mi
   e17b8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   e17bc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   e17c0:	4602      	mov	r2, r0
   e17c2:	ec43 2b10 	vmov	d0, r2, r3
   e17c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e17ca:	4673      	mov	r3, lr
   e17cc:	e7bb      	b.n	e1746 <__ieee754_sqrt+0x76>
   e17ce:	005b      	lsls	r3, r3, #1
   e17d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   e17d4:	0052      	lsls	r2, r2, #1
   e17d6:	e794      	b.n	e1702 <__ieee754_sqrt+0x32>
   e17d8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   e17dc:	4321      	orrs	r1, r4
   e17de:	d028      	beq.n	e1832 <__ieee754_sqrt+0x162>
   e17e0:	bbad      	cbnz	r5, e184e <__ieee754_sqrt+0x17e>
   e17e2:	462f      	mov	r7, r5
   e17e4:	0ad3      	lsrs	r3, r2, #11
   e17e6:	3f15      	subs	r7, #21
   e17e8:	0552      	lsls	r2, r2, #21
   e17ea:	2b00      	cmp	r3, #0
   e17ec:	d0fa      	beq.n	e17e4 <__ieee754_sqrt+0x114>
   e17ee:	02dd      	lsls	r5, r3, #11
   e17f0:	d428      	bmi.n	e1844 <__ieee754_sqrt+0x174>
   e17f2:	2100      	movs	r1, #0
   e17f4:	e000      	b.n	e17f8 <__ieee754_sqrt+0x128>
   e17f6:	4601      	mov	r1, r0
   e17f8:	005b      	lsls	r3, r3, #1
   e17fa:	02dc      	lsls	r4, r3, #11
   e17fc:	f101 0001 	add.w	r0, r1, #1
   e1800:	d5f9      	bpl.n	e17f6 <__ieee754_sqrt+0x126>
   e1802:	f1c0 0420 	rsb	r4, r0, #32
   e1806:	fa22 f404 	lsr.w	r4, r2, r4
   e180a:	4323      	orrs	r3, r4
   e180c:	1a7f      	subs	r7, r7, r1
   e180e:	4082      	lsls	r2, r0
   e1810:	e76f      	b.n	e16f2 <__ieee754_sqrt+0x22>
   e1812:	ee10 2a10 	vmov	r2, s0
   e1816:	462b      	mov	r3, r5
   e1818:	ee10 0a10 	vmov	r0, s0
   e181c:	4629      	mov	r1, r5
   e181e:	f001 fd7f 	bl	e3320 <__aeabi_dmul>
   e1822:	4622      	mov	r2, r4
   e1824:	462b      	mov	r3, r5
   e1826:	f001 fbc9 	bl	e2fbc <__adddf3>
   e182a:	ec41 0b10 	vmov	d0, r0, r1
   e182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1836:	f1bc 0f00 	cmp.w	ip, #0
   e183a:	daa2      	bge.n	e1782 <__ieee754_sqrt+0xb2>
   e183c:	e7aa      	b.n	e1794 <__ieee754_sqrt+0xc4>
   e183e:	3601      	adds	r6, #1
   e1840:	4620      	mov	r0, r4
   e1842:	e7b2      	b.n	e17aa <__ieee754_sqrt+0xda>
   e1844:	2420      	movs	r4, #32
   e1846:	f04f 31ff 	mov.w	r1, #4294967295
   e184a:	2000      	movs	r0, #0
   e184c:	e7db      	b.n	e1806 <__ieee754_sqrt+0x136>
   e184e:	ee10 2a10 	vmov	r2, s0
   e1852:	462b      	mov	r3, r5
   e1854:	4620      	mov	r0, r4
   e1856:	4629      	mov	r1, r5
   e1858:	f001 fbae 	bl	e2fb8 <__aeabi_dsub>
   e185c:	4602      	mov	r2, r0
   e185e:	460b      	mov	r3, r1
   e1860:	f001 fe88 	bl	e3574 <__aeabi_ddiv>
   e1864:	ec41 0b10 	vmov	d0, r0, r1
   e1868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e186c:	7ff00000 	.word	0x7ff00000

000e1870 <__kernel_cos>:
   e1870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1874:	ec57 6b10 	vmov	r6, r7, d0
   e1878:	ed2d 8b02 	vpush	{d8}
   e187c:	eeb0 8a41 	vmov.f32	s16, s2
   e1880:	eef0 8a61 	vmov.f32	s17, s3
   e1884:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   e1888:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   e188c:	b083      	sub	sp, #12
   e188e:	da72      	bge.n	e1976 <__kernel_cos+0x106>
   e1890:	ee10 0a10 	vmov	r0, s0
   e1894:	4639      	mov	r1, r7
   e1896:	f001 fff3 	bl	e3880 <__aeabi_d2iz>
   e189a:	2800      	cmp	r0, #0
   e189c:	f000 80f6 	beq.w	e1a8c <__kernel_cos+0x21c>
   e18a0:	4632      	mov	r2, r6
   e18a2:	463b      	mov	r3, r7
   e18a4:	4630      	mov	r0, r6
   e18a6:	4639      	mov	r1, r7
   e18a8:	f001 fd3a 	bl	e3320 <__aeabi_dmul>
   e18ac:	a37c      	add	r3, pc, #496	; (adr r3, e1aa0 <__kernel_cos+0x230>)
   e18ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18b2:	4604      	mov	r4, r0
   e18b4:	460d      	mov	r5, r1
   e18b6:	f001 fd33 	bl	e3320 <__aeabi_dmul>
   e18ba:	a37b      	add	r3, pc, #492	; (adr r3, e1aa8 <__kernel_cos+0x238>)
   e18bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18c0:	f001 fb7c 	bl	e2fbc <__adddf3>
   e18c4:	4622      	mov	r2, r4
   e18c6:	462b      	mov	r3, r5
   e18c8:	f001 fd2a 	bl	e3320 <__aeabi_dmul>
   e18cc:	a378      	add	r3, pc, #480	; (adr r3, e1ab0 <__kernel_cos+0x240>)
   e18ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18d2:	f001 fb71 	bl	e2fb8 <__aeabi_dsub>
   e18d6:	4622      	mov	r2, r4
   e18d8:	462b      	mov	r3, r5
   e18da:	f001 fd21 	bl	e3320 <__aeabi_dmul>
   e18de:	a376      	add	r3, pc, #472	; (adr r3, e1ab8 <__kernel_cos+0x248>)
   e18e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18e4:	f001 fb6a 	bl	e2fbc <__adddf3>
   e18e8:	4622      	mov	r2, r4
   e18ea:	462b      	mov	r3, r5
   e18ec:	f001 fd18 	bl	e3320 <__aeabi_dmul>
   e18f0:	a373      	add	r3, pc, #460	; (adr r3, e1ac0 <__kernel_cos+0x250>)
   e18f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e18f6:	f001 fb5f 	bl	e2fb8 <__aeabi_dsub>
   e18fa:	4622      	mov	r2, r4
   e18fc:	462b      	mov	r3, r5
   e18fe:	f001 fd0f 	bl	e3320 <__aeabi_dmul>
   e1902:	a371      	add	r3, pc, #452	; (adr r3, e1ac8 <__kernel_cos+0x258>)
   e1904:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1908:	f001 fb58 	bl	e2fbc <__adddf3>
   e190c:	4622      	mov	r2, r4
   e190e:	462b      	mov	r3, r5
   e1910:	f001 fd06 	bl	e3320 <__aeabi_dmul>
   e1914:	4682      	mov	sl, r0
   e1916:	468b      	mov	fp, r1
   e1918:	2200      	movs	r2, #0
   e191a:	4b71      	ldr	r3, [pc, #452]	; (e1ae0 <__kernel_cos+0x270>)
   e191c:	4620      	mov	r0, r4
   e191e:	4629      	mov	r1, r5
   e1920:	f001 fcfe 	bl	e3320 <__aeabi_dmul>
   e1924:	4652      	mov	r2, sl
   e1926:	4680      	mov	r8, r0
   e1928:	4689      	mov	r9, r1
   e192a:	465b      	mov	r3, fp
   e192c:	4620      	mov	r0, r4
   e192e:	4629      	mov	r1, r5
   e1930:	f001 fcf6 	bl	e3320 <__aeabi_dmul>
   e1934:	ec53 2b18 	vmov	r2, r3, d8
   e1938:	4604      	mov	r4, r0
   e193a:	460d      	mov	r5, r1
   e193c:	4630      	mov	r0, r6
   e193e:	4639      	mov	r1, r7
   e1940:	f001 fcee 	bl	e3320 <__aeabi_dmul>
   e1944:	4602      	mov	r2, r0
   e1946:	460b      	mov	r3, r1
   e1948:	4620      	mov	r0, r4
   e194a:	4629      	mov	r1, r5
   e194c:	f001 fb34 	bl	e2fb8 <__aeabi_dsub>
   e1950:	4602      	mov	r2, r0
   e1952:	460b      	mov	r3, r1
   e1954:	4640      	mov	r0, r8
   e1956:	4649      	mov	r1, r9
   e1958:	f001 fb2e 	bl	e2fb8 <__aeabi_dsub>
   e195c:	4602      	mov	r2, r0
   e195e:	460b      	mov	r3, r1
   e1960:	2000      	movs	r0, #0
   e1962:	4960      	ldr	r1, [pc, #384]	; (e1ae4 <__kernel_cos+0x274>)
   e1964:	f001 fb28 	bl	e2fb8 <__aeabi_dsub>
   e1968:	ec41 0b10 	vmov	d0, r0, r1
   e196c:	b003      	add	sp, #12
   e196e:	ecbd 8b02 	vpop	{d8}
   e1972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1976:	ee10 2a10 	vmov	r2, s0
   e197a:	ee10 0a10 	vmov	r0, s0
   e197e:	463b      	mov	r3, r7
   e1980:	4639      	mov	r1, r7
   e1982:	f001 fccd 	bl	e3320 <__aeabi_dmul>
   e1986:	a346      	add	r3, pc, #280	; (adr r3, e1aa0 <__kernel_cos+0x230>)
   e1988:	e9d3 2300 	ldrd	r2, r3, [r3]
   e198c:	4604      	mov	r4, r0
   e198e:	460d      	mov	r5, r1
   e1990:	f001 fcc6 	bl	e3320 <__aeabi_dmul>
   e1994:	a344      	add	r3, pc, #272	; (adr r3, e1aa8 <__kernel_cos+0x238>)
   e1996:	e9d3 2300 	ldrd	r2, r3, [r3]
   e199a:	f001 fb0f 	bl	e2fbc <__adddf3>
   e199e:	4622      	mov	r2, r4
   e19a0:	462b      	mov	r3, r5
   e19a2:	f001 fcbd 	bl	e3320 <__aeabi_dmul>
   e19a6:	a342      	add	r3, pc, #264	; (adr r3, e1ab0 <__kernel_cos+0x240>)
   e19a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e19ac:	f001 fb04 	bl	e2fb8 <__aeabi_dsub>
   e19b0:	4622      	mov	r2, r4
   e19b2:	462b      	mov	r3, r5
   e19b4:	f001 fcb4 	bl	e3320 <__aeabi_dmul>
   e19b8:	a33f      	add	r3, pc, #252	; (adr r3, e1ab8 <__kernel_cos+0x248>)
   e19ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   e19be:	f001 fafd 	bl	e2fbc <__adddf3>
   e19c2:	4622      	mov	r2, r4
   e19c4:	462b      	mov	r3, r5
   e19c6:	f001 fcab 	bl	e3320 <__aeabi_dmul>
   e19ca:	a33d      	add	r3, pc, #244	; (adr r3, e1ac0 <__kernel_cos+0x250>)
   e19cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e19d0:	f001 faf2 	bl	e2fb8 <__aeabi_dsub>
   e19d4:	4622      	mov	r2, r4
   e19d6:	462b      	mov	r3, r5
   e19d8:	f001 fca2 	bl	e3320 <__aeabi_dmul>
   e19dc:	a33a      	add	r3, pc, #232	; (adr r3, e1ac8 <__kernel_cos+0x258>)
   e19de:	e9d3 2300 	ldrd	r2, r3, [r3]
   e19e2:	f001 faeb 	bl	e2fbc <__adddf3>
   e19e6:	462b      	mov	r3, r5
   e19e8:	4622      	mov	r2, r4
   e19ea:	f001 fc99 	bl	e3320 <__aeabi_dmul>
   e19ee:	4b3e      	ldr	r3, [pc, #248]	; (e1ae8 <__kernel_cos+0x278>)
   e19f0:	4599      	cmp	r9, r3
   e19f2:	4682      	mov	sl, r0
   e19f4:	468b      	mov	fp, r1
   e19f6:	dd8f      	ble.n	e1918 <__kernel_cos+0xa8>
   e19f8:	4b3c      	ldr	r3, [pc, #240]	; (e1aec <__kernel_cos+0x27c>)
   e19fa:	4599      	cmp	r9, r3
   e19fc:	dc3d      	bgt.n	e1a7a <__kernel_cos+0x20a>
   e19fe:	2200      	movs	r2, #0
   e1a00:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   e1a04:	2000      	movs	r0, #0
   e1a06:	4937      	ldr	r1, [pc, #220]	; (e1ae4 <__kernel_cos+0x274>)
   e1a08:	4690      	mov	r8, r2
   e1a0a:	4699      	mov	r9, r3
   e1a0c:	f001 fad4 	bl	e2fb8 <__aeabi_dsub>
   e1a10:	e9cd 0100 	strd	r0, r1, [sp]
   e1a14:	2200      	movs	r2, #0
   e1a16:	4b32      	ldr	r3, [pc, #200]	; (e1ae0 <__kernel_cos+0x270>)
   e1a18:	4620      	mov	r0, r4
   e1a1a:	4629      	mov	r1, r5
   e1a1c:	f001 fc80 	bl	e3320 <__aeabi_dmul>
   e1a20:	4642      	mov	r2, r8
   e1a22:	464b      	mov	r3, r9
   e1a24:	f001 fac8 	bl	e2fb8 <__aeabi_dsub>
   e1a28:	4652      	mov	r2, sl
   e1a2a:	4680      	mov	r8, r0
   e1a2c:	4689      	mov	r9, r1
   e1a2e:	465b      	mov	r3, fp
   e1a30:	4620      	mov	r0, r4
   e1a32:	4629      	mov	r1, r5
   e1a34:	f001 fc74 	bl	e3320 <__aeabi_dmul>
   e1a38:	ec53 2b18 	vmov	r2, r3, d8
   e1a3c:	4604      	mov	r4, r0
   e1a3e:	460d      	mov	r5, r1
   e1a40:	4630      	mov	r0, r6
   e1a42:	4639      	mov	r1, r7
   e1a44:	f001 fc6c 	bl	e3320 <__aeabi_dmul>
   e1a48:	4602      	mov	r2, r0
   e1a4a:	460b      	mov	r3, r1
   e1a4c:	4620      	mov	r0, r4
   e1a4e:	4629      	mov	r1, r5
   e1a50:	f001 fab2 	bl	e2fb8 <__aeabi_dsub>
   e1a54:	4602      	mov	r2, r0
   e1a56:	460b      	mov	r3, r1
   e1a58:	4640      	mov	r0, r8
   e1a5a:	4649      	mov	r1, r9
   e1a5c:	f001 faac 	bl	e2fb8 <__aeabi_dsub>
   e1a60:	4602      	mov	r2, r0
   e1a62:	460b      	mov	r3, r1
   e1a64:	e9dd 0100 	ldrd	r0, r1, [sp]
   e1a68:	f001 faa6 	bl	e2fb8 <__aeabi_dsub>
   e1a6c:	ec41 0b10 	vmov	d0, r0, r1
   e1a70:	b003      	add	sp, #12
   e1a72:	ecbd 8b02 	vpop	{d8}
   e1a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1a7a:	ed9f 7b15 	vldr	d7, [pc, #84]	; e1ad0 <__kernel_cos+0x260>
   e1a7e:	f04f 0800 	mov.w	r8, #0
   e1a82:	ed8d 7b00 	vstr	d7, [sp]
   e1a86:	f8df 9068 	ldr.w	r9, [pc, #104]	; e1af0 <__kernel_cos+0x280>
   e1a8a:	e7c3      	b.n	e1a14 <__kernel_cos+0x1a4>
   e1a8c:	ed9f 0b12 	vldr	d0, [pc, #72]	; e1ad8 <__kernel_cos+0x268>
   e1a90:	b003      	add	sp, #12
   e1a92:	ecbd 8b02 	vpop	{d8}
   e1a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1a9a:	bf00      	nop
   e1a9c:	f3af 8000 	nop.w
   e1aa0:	be8838d4 	.word	0xbe8838d4
   e1aa4:	bda8fae9 	.word	0xbda8fae9
   e1aa8:	bdb4b1c4 	.word	0xbdb4b1c4
   e1aac:	3e21ee9e 	.word	0x3e21ee9e
   e1ab0:	809c52ad 	.word	0x809c52ad
   e1ab4:	3e927e4f 	.word	0x3e927e4f
   e1ab8:	19cb1590 	.word	0x19cb1590
   e1abc:	3efa01a0 	.word	0x3efa01a0
   e1ac0:	16c15177 	.word	0x16c15177
   e1ac4:	3f56c16c 	.word	0x3f56c16c
   e1ac8:	5555554c 	.word	0x5555554c
   e1acc:	3fa55555 	.word	0x3fa55555
   e1ad0:	00000000 	.word	0x00000000
   e1ad4:	3fe70000 	.word	0x3fe70000
   e1ad8:	00000000 	.word	0x00000000
   e1adc:	3ff00000 	.word	0x3ff00000
   e1ae0:	3fe00000 	.word	0x3fe00000
   e1ae4:	3ff00000 	.word	0x3ff00000
   e1ae8:	3fd33332 	.word	0x3fd33332
   e1aec:	3fe90000 	.word	0x3fe90000
   e1af0:	3fd20000 	.word	0x3fd20000
   e1af4:	00000000 	.word	0x00000000

000e1af8 <__kernel_rem_pio2>:
   e1af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1afc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   e1b00:	4c81      	ldr	r4, [pc, #516]	; (e1d08 <__kernel_rem_pio2+0x210>)
   e1b02:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   e1b04:	4d81      	ldr	r5, [pc, #516]	; (e1d0c <__kernel_rem_pio2+0x214>)
   e1b06:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   e1b0a:	9407      	str	r4, [sp, #28]
   e1b0c:	4626      	mov	r6, r4
   e1b0e:	1ed4      	subs	r4, r2, #3
   e1b10:	fb85 7504 	smull	r7, r5, r5, r4
   e1b14:	17e4      	asrs	r4, r4, #31
   e1b16:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   e1b1a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   e1b1e:	461d      	mov	r5, r3
   e1b20:	930a      	str	r3, [sp, #40]	; 0x28
   e1b22:	1c63      	adds	r3, r4, #1
   e1b24:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   e1b28:	3d01      	subs	r5, #1
   e1b2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e1b2e:	9306      	str	r3, [sp, #24]
   e1b30:	462b      	mov	r3, r5
   e1b32:	940b      	str	r4, [sp, #44]	; 0x2c
   e1b34:	9500      	str	r5, [sp, #0]
   e1b36:	1b65      	subs	r5, r4, r5
   e1b38:	18f4      	adds	r4, r6, r3
   e1b3a:	9003      	str	r0, [sp, #12]
   e1b3c:	9108      	str	r1, [sp, #32]
   e1b3e:	d416      	bmi.n	e1b6e <__kernel_rem_pio2+0x76>
   e1b40:	442c      	add	r4, r5
   e1b42:	3401      	adds	r4, #1
   e1b44:	ae22      	add	r6, sp, #136	; 0x88
   e1b46:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   e1b48:	e008      	b.n	e1b5c <__kernel_rem_pio2+0x64>
   e1b4a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   e1b4e:	f001 fb81 	bl	e3254 <__aeabi_i2d>
   e1b52:	3501      	adds	r5, #1
   e1b54:	42a5      	cmp	r5, r4
   e1b56:	e8e6 0102 	strd	r0, r1, [r6], #8
   e1b5a:	d008      	beq.n	e1b6e <__kernel_rem_pio2+0x76>
   e1b5c:	2d00      	cmp	r5, #0
   e1b5e:	daf4      	bge.n	e1b4a <__kernel_rem_pio2+0x52>
   e1b60:	3501      	adds	r5, #1
   e1b62:	2000      	movs	r0, #0
   e1b64:	2100      	movs	r1, #0
   e1b66:	42a5      	cmp	r5, r4
   e1b68:	e8e6 0102 	strd	r0, r1, [r6], #8
   e1b6c:	d1f6      	bne.n	e1b5c <__kernel_rem_pio2+0x64>
   e1b6e:	9b07      	ldr	r3, [sp, #28]
   e1b70:	2b00      	cmp	r3, #0
   e1b72:	f2c0 83c2 	blt.w	e22fa <__kernel_rem_pio2+0x802>
   e1b76:	9b07      	ldr	r3, [sp, #28]
   e1b78:	f103 0b01 	add.w	fp, r3, #1
   e1b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e1b7e:	a922      	add	r1, sp, #136	; 0x88
   e1b80:	00db      	lsls	r3, r3, #3
   e1b82:	461a      	mov	r2, r3
   e1b84:	eb01 0903 	add.w	r9, r1, r3
   e1b88:	9304      	str	r3, [sp, #16]
   e1b8a:	9b03      	ldr	r3, [sp, #12]
   e1b8c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e1b90:	4619      	mov	r1, r3
   e1b92:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   e1b96:	eb01 0802 	add.w	r8, r1, r2
   e1b9a:	9b00      	ldr	r3, [sp, #0]
   e1b9c:	2b00      	cmp	r3, #0
   e1b9e:	f2c0 818f 	blt.w	e1ec0 <__kernel_rem_pio2+0x3c8>
   e1ba2:	9c03      	ldr	r4, [sp, #12]
   e1ba4:	464d      	mov	r5, r9
   e1ba6:	2600      	movs	r6, #0
   e1ba8:	2700      	movs	r7, #0
   e1baa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1bae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e1bb2:	f001 fbb5 	bl	e3320 <__aeabi_dmul>
   e1bb6:	4602      	mov	r2, r0
   e1bb8:	460b      	mov	r3, r1
   e1bba:	4630      	mov	r0, r6
   e1bbc:	4639      	mov	r1, r7
   e1bbe:	f001 f9fd 	bl	e2fbc <__adddf3>
   e1bc2:	4544      	cmp	r4, r8
   e1bc4:	4606      	mov	r6, r0
   e1bc6:	460f      	mov	r7, r1
   e1bc8:	d1ef      	bne.n	e1baa <__kernel_rem_pio2+0xb2>
   e1bca:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1bce:	45da      	cmp	sl, fp
   e1bd0:	f109 0908 	add.w	r9, r9, #8
   e1bd4:	d1e1      	bne.n	e1b9a <__kernel_rem_pio2+0xa2>
   e1bd6:	9907      	ldr	r1, [sp, #28]
   e1bd8:	9804      	ldr	r0, [sp, #16]
   e1bda:	9c03      	ldr	r4, [sp, #12]
   e1bdc:	9104      	str	r1, [sp, #16]
   e1bde:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   e1be2:	3b02      	subs	r3, #2
   e1be4:	009b      	lsls	r3, r3, #2
   e1be6:	4420      	add	r0, r4
   e1be8:	1d1a      	adds	r2, r3, #4
   e1bea:	4683      	mov	fp, r0
   e1bec:	a80e      	add	r0, sp, #56	; 0x38
   e1bee:	4402      	add	r2, r0
   e1bf0:	4403      	add	r3, r0
   e1bf2:	920d      	str	r2, [sp, #52]	; 0x34
   e1bf4:	930c      	str	r3, [sp, #48]	; 0x30
   e1bf6:	9a04      	ldr	r2, [sp, #16]
   e1bf8:	a99a      	add	r1, sp, #616	; 0x268
   e1bfa:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   e1bfe:	2a00      	cmp	r2, #0
   e1c00:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   e1c04:	dd29      	ble.n	e1c5a <__kernel_rem_pio2+0x162>
   e1c06:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   e1c0a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   e1c0e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   e1c12:	2200      	movs	r2, #0
   e1c14:	4b3e      	ldr	r3, [pc, #248]	; (e1d10 <__kernel_rem_pio2+0x218>)
   e1c16:	4620      	mov	r0, r4
   e1c18:	4629      	mov	r1, r5
   e1c1a:	f001 fb81 	bl	e3320 <__aeabi_dmul>
   e1c1e:	f001 fe2f 	bl	e3880 <__aeabi_d2iz>
   e1c22:	f001 fb17 	bl	e3254 <__aeabi_i2d>
   e1c26:	2200      	movs	r2, #0
   e1c28:	4b3a      	ldr	r3, [pc, #232]	; (e1d14 <__kernel_rem_pio2+0x21c>)
   e1c2a:	4606      	mov	r6, r0
   e1c2c:	460f      	mov	r7, r1
   e1c2e:	f001 fb77 	bl	e3320 <__aeabi_dmul>
   e1c32:	4602      	mov	r2, r0
   e1c34:	460b      	mov	r3, r1
   e1c36:	4620      	mov	r0, r4
   e1c38:	4629      	mov	r1, r5
   e1c3a:	f001 f9bd 	bl	e2fb8 <__aeabi_dsub>
   e1c3e:	f001 fe1f 	bl	e3880 <__aeabi_d2iz>
   e1c42:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   e1c46:	f849 0f04 	str.w	r0, [r9, #4]!
   e1c4a:	4639      	mov	r1, r7
   e1c4c:	4630      	mov	r0, r6
   e1c4e:	f001 f9b5 	bl	e2fbc <__adddf3>
   e1c52:	45d0      	cmp	r8, sl
   e1c54:	4604      	mov	r4, r0
   e1c56:	460d      	mov	r5, r1
   e1c58:	d1db      	bne.n	e1c12 <__kernel_rem_pio2+0x11a>
   e1c5a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   e1c5e:	ec45 4b10 	vmov	d0, r4, r5
   e1c62:	4648      	mov	r0, r9
   e1c64:	f001 f910 	bl	e2e88 <scalbn>
   e1c68:	ec55 4b10 	vmov	r4, r5, d0
   e1c6c:	2200      	movs	r2, #0
   e1c6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   e1c72:	ee10 0a10 	vmov	r0, s0
   e1c76:	4629      	mov	r1, r5
   e1c78:	f001 fb52 	bl	e3320 <__aeabi_dmul>
   e1c7c:	ec41 0b10 	vmov	d0, r0, r1
   e1c80:	f7fc f94e 	bl	ddf20 <floor>
   e1c84:	2200      	movs	r2, #0
   e1c86:	ec51 0b10 	vmov	r0, r1, d0
   e1c8a:	4b23      	ldr	r3, [pc, #140]	; (e1d18 <__kernel_rem_pio2+0x220>)
   e1c8c:	f001 fb48 	bl	e3320 <__aeabi_dmul>
   e1c90:	4602      	mov	r2, r0
   e1c92:	460b      	mov	r3, r1
   e1c94:	4620      	mov	r0, r4
   e1c96:	4629      	mov	r1, r5
   e1c98:	f001 f98e 	bl	e2fb8 <__aeabi_dsub>
   e1c9c:	460d      	mov	r5, r1
   e1c9e:	4604      	mov	r4, r0
   e1ca0:	f001 fdee 	bl	e3880 <__aeabi_d2iz>
   e1ca4:	4680      	mov	r8, r0
   e1ca6:	f001 fad5 	bl	e3254 <__aeabi_i2d>
   e1caa:	460b      	mov	r3, r1
   e1cac:	4602      	mov	r2, r0
   e1cae:	4629      	mov	r1, r5
   e1cb0:	4620      	mov	r0, r4
   e1cb2:	f001 f981 	bl	e2fb8 <__aeabi_dsub>
   e1cb6:	464b      	mov	r3, r9
   e1cb8:	2b00      	cmp	r3, #0
   e1cba:	4606      	mov	r6, r0
   e1cbc:	460f      	mov	r7, r1
   e1cbe:	f340 80e5 	ble.w	e1e8c <__kernel_rem_pio2+0x394>
   e1cc2:	9a04      	ldr	r2, [sp, #16]
   e1cc4:	a90e      	add	r1, sp, #56	; 0x38
   e1cc6:	3a01      	subs	r2, #1
   e1cc8:	f1c9 0318 	rsb	r3, r9, #24
   e1ccc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e1cd0:	fa45 f103 	asr.w	r1, r5, r3
   e1cd4:	fa01 f303 	lsl.w	r3, r1, r3
   e1cd8:	a80e      	add	r0, sp, #56	; 0x38
   e1cda:	1aeb      	subs	r3, r5, r3
   e1cdc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   e1ce0:	f1c9 0517 	rsb	r5, r9, #23
   e1ce4:	4488      	add	r8, r1
   e1ce6:	fa43 f505 	asr.w	r5, r3, r5
   e1cea:	2d00      	cmp	r5, #0
   e1cec:	dd41      	ble.n	e1d72 <__kernel_rem_pio2+0x27a>
   e1cee:	9b04      	ldr	r3, [sp, #16]
   e1cf0:	2b00      	cmp	r3, #0
   e1cf2:	f108 0801 	add.w	r8, r8, #1
   e1cf6:	f340 82c9 	ble.w	e228c <__kernel_rem_pio2+0x794>
   e1cfa:	2200      	movs	r2, #0
   e1cfc:	4614      	mov	r4, r2
   e1cfe:	a90d      	add	r1, sp, #52	; 0x34
   e1d00:	9804      	ldr	r0, [sp, #16]
   e1d02:	46ae      	mov	lr, r5
   e1d04:	e012      	b.n	e1d2c <__kernel_rem_pio2+0x234>
   e1d06:	bf00      	nop
   e1d08:	000e8d28 	.word	0x000e8d28
   e1d0c:	2aaaaaab 	.word	0x2aaaaaab
   e1d10:	3e700000 	.word	0x3e700000
   e1d14:	41700000 	.word	0x41700000
   e1d18:	40200000 	.word	0x40200000
   e1d1c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   e1d20:	b10b      	cbz	r3, e1d26 <__kernel_rem_pio2+0x22e>
   e1d22:	600d      	str	r5, [r1, #0]
   e1d24:	2401      	movs	r4, #1
   e1d26:	3201      	adds	r2, #1
   e1d28:	4290      	cmp	r0, r2
   e1d2a:	dd0d      	ble.n	e1d48 <__kernel_rem_pio2+0x250>
   e1d2c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   e1d30:	2c00      	cmp	r4, #0
   e1d32:	d0f3      	beq.n	e1d1c <__kernel_rem_pio2+0x224>
   e1d34:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   e1d38:	3201      	adds	r2, #1
   e1d3a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   e1d3e:	4290      	cmp	r0, r2
   e1d40:	600b      	str	r3, [r1, #0]
   e1d42:	f04f 0401 	mov.w	r4, #1
   e1d46:	dcf1      	bgt.n	e1d2c <__kernel_rem_pio2+0x234>
   e1d48:	4675      	mov	r5, lr
   e1d4a:	9b06      	ldr	r3, [sp, #24]
   e1d4c:	2b00      	cmp	r3, #0
   e1d4e:	dd0e      	ble.n	e1d6e <__kernel_rem_pio2+0x276>
   e1d50:	2b01      	cmp	r3, #1
   e1d52:	f000 80a3 	beq.w	e1e9c <__kernel_rem_pio2+0x3a4>
   e1d56:	2b02      	cmp	r3, #2
   e1d58:	d109      	bne.n	e1d6e <__kernel_rem_pio2+0x276>
   e1d5a:	9b04      	ldr	r3, [sp, #16]
   e1d5c:	1e5a      	subs	r2, r3, #1
   e1d5e:	ab0e      	add	r3, sp, #56	; 0x38
   e1d60:	a90e      	add	r1, sp, #56	; 0x38
   e1d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1d66:	f3c3 0315 	ubfx	r3, r3, #0, #22
   e1d6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e1d6e:	2d02      	cmp	r5, #2
   e1d70:	d074      	beq.n	e1e5c <__kernel_rem_pio2+0x364>
   e1d72:	2200      	movs	r2, #0
   e1d74:	2300      	movs	r3, #0
   e1d76:	4630      	mov	r0, r6
   e1d78:	4639      	mov	r1, r7
   e1d7a:	f001 fd39 	bl	e37f0 <__aeabi_dcmpeq>
   e1d7e:	2800      	cmp	r0, #0
   e1d80:	f000 8249 	beq.w	e2216 <__kernel_rem_pio2+0x71e>
   e1d84:	9a04      	ldr	r2, [sp, #16]
   e1d86:	9b07      	ldr	r3, [sp, #28]
   e1d88:	1e50      	subs	r0, r2, #1
   e1d8a:	4283      	cmp	r3, r0
   e1d8c:	dc10      	bgt.n	e1db0 <__kernel_rem_pio2+0x2b8>
   e1d8e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   e1d92:	3b01      	subs	r3, #1
   e1d94:	aa0e      	add	r2, sp, #56	; 0x38
   e1d96:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   e1d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e1d9c:	2200      	movs	r2, #0
   e1d9e:	f853 1904 	ldr.w	r1, [r3], #-4
   e1da2:	42a3      	cmp	r3, r4
   e1da4:	ea42 0201 	orr.w	r2, r2, r1
   e1da8:	d1f9      	bne.n	e1d9e <__kernel_rem_pio2+0x2a6>
   e1daa:	2a00      	cmp	r2, #0
   e1dac:	f040 80a4 	bne.w	e1ef8 <__kernel_rem_pio2+0x400>
   e1db0:	9b07      	ldr	r3, [sp, #28]
   e1db2:	aa0e      	add	r2, sp, #56	; 0x38
   e1db4:	3b01      	subs	r3, #1
   e1db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   e1dba:	2b00      	cmp	r3, #0
   e1dbc:	f040 8264 	bne.w	e2288 <__kernel_rem_pio2+0x790>
   e1dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e1dc2:	2301      	movs	r3, #1
   e1dc4:	f852 1904 	ldr.w	r1, [r2], #-4
   e1dc8:	3301      	adds	r3, #1
   e1dca:	2900      	cmp	r1, #0
   e1dcc:	d0fa      	beq.n	e1dc4 <__kernel_rem_pio2+0x2cc>
   e1dce:	9a04      	ldr	r2, [sp, #16]
   e1dd0:	18d3      	adds	r3, r2, r3
   e1dd2:	f102 0a01 	add.w	sl, r2, #1
   e1dd6:	459a      	cmp	sl, r3
   e1dd8:	9309      	str	r3, [sp, #36]	; 0x24
   e1dda:	dc3c      	bgt.n	e1e56 <__kernel_rem_pio2+0x35e>
   e1ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e1dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e1de0:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1de2:	eb0a 0903 	add.w	r9, sl, r3
   e1de6:	9b04      	ldr	r3, [sp, #16]
   e1de8:	4698      	mov	r8, r3
   e1dea:	4490      	add	r8, r2
   e1dec:	188b      	adds	r3, r1, r2
   e1dee:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   e1df2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   e1df4:	f109 39ff 	add.w	r9, r9, #4294967295
   e1df8:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   e1dfc:	aa22      	add	r2, sp, #136	; 0x88
   e1dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   e1e02:	9304      	str	r3, [sp, #16]
   e1e04:	ab72      	add	r3, sp, #456	; 0x1c8
   e1e06:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   e1e0a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   e1e0e:	f859 0f04 	ldr.w	r0, [r9, #4]!
   e1e12:	f001 fa1f 	bl	e3254 <__aeabi_i2d>
   e1e16:	9b00      	ldr	r3, [sp, #0]
   e1e18:	2b00      	cmp	r3, #0
   e1e1a:	e8e8 0102 	strd	r0, r1, [r8], #8
   e1e1e:	f04f 0600 	mov.w	r6, #0
   e1e22:	f04f 0700 	mov.w	r7, #0
   e1e26:	db11      	blt.n	e1e4c <__kernel_rem_pio2+0x354>
   e1e28:	9c03      	ldr	r4, [sp, #12]
   e1e2a:	4645      	mov	r5, r8
   e1e2c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e1e30:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   e1e34:	f001 fa74 	bl	e3320 <__aeabi_dmul>
   e1e38:	4602      	mov	r2, r0
   e1e3a:	460b      	mov	r3, r1
   e1e3c:	4630      	mov	r0, r6
   e1e3e:	4639      	mov	r1, r7
   e1e40:	f001 f8bc 	bl	e2fbc <__adddf3>
   e1e44:	455c      	cmp	r4, fp
   e1e46:	4606      	mov	r6, r0
   e1e48:	460f      	mov	r7, r1
   e1e4a:	d1ef      	bne.n	e1e2c <__kernel_rem_pio2+0x334>
   e1e4c:	9b04      	ldr	r3, [sp, #16]
   e1e4e:	4598      	cmp	r8, r3
   e1e50:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1e54:	d1db      	bne.n	e1e0e <__kernel_rem_pio2+0x316>
   e1e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1e58:	9304      	str	r3, [sp, #16]
   e1e5a:	e6cc      	b.n	e1bf6 <__kernel_rem_pio2+0xfe>
   e1e5c:	4632      	mov	r2, r6
   e1e5e:	463b      	mov	r3, r7
   e1e60:	2000      	movs	r0, #0
   e1e62:	49b3      	ldr	r1, [pc, #716]	; (e2130 <__kernel_rem_pio2+0x638>)
   e1e64:	f001 f8a8 	bl	e2fb8 <__aeabi_dsub>
   e1e68:	4606      	mov	r6, r0
   e1e6a:	460f      	mov	r7, r1
   e1e6c:	2c00      	cmp	r4, #0
   e1e6e:	d080      	beq.n	e1d72 <__kernel_rem_pio2+0x27a>
   e1e70:	9806      	ldr	r0, [sp, #24]
   e1e72:	ed9f 0bab 	vldr	d0, [pc, #684]	; e2120 <__kernel_rem_pio2+0x628>
   e1e76:	f001 f807 	bl	e2e88 <scalbn>
   e1e7a:	4630      	mov	r0, r6
   e1e7c:	4639      	mov	r1, r7
   e1e7e:	ec53 2b10 	vmov	r2, r3, d0
   e1e82:	f001 f899 	bl	e2fb8 <__aeabi_dsub>
   e1e86:	4606      	mov	r6, r0
   e1e88:	460f      	mov	r7, r1
   e1e8a:	e772      	b.n	e1d72 <__kernel_rem_pio2+0x27a>
   e1e8c:	d111      	bne.n	e1eb2 <__kernel_rem_pio2+0x3ba>
   e1e8e:	9b04      	ldr	r3, [sp, #16]
   e1e90:	aa0e      	add	r2, sp, #56	; 0x38
   e1e92:	3b01      	subs	r3, #1
   e1e94:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   e1e98:	15ed      	asrs	r5, r5, #23
   e1e9a:	e726      	b.n	e1cea <__kernel_rem_pio2+0x1f2>
   e1e9c:	9b04      	ldr	r3, [sp, #16]
   e1e9e:	1e5a      	subs	r2, r3, #1
   e1ea0:	ab0e      	add	r3, sp, #56	; 0x38
   e1ea2:	a90e      	add	r1, sp, #56	; 0x38
   e1ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e1ea8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   e1eac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   e1eb0:	e75d      	b.n	e1d6e <__kernel_rem_pio2+0x276>
   e1eb2:	2200      	movs	r2, #0
   e1eb4:	4b9f      	ldr	r3, [pc, #636]	; (e2134 <__kernel_rem_pio2+0x63c>)
   e1eb6:	f001 fcb9 	bl	e382c <__aeabi_dcmpge>
   e1eba:	b958      	cbnz	r0, e1ed4 <__kernel_rem_pio2+0x3dc>
   e1ebc:	4605      	mov	r5, r0
   e1ebe:	e758      	b.n	e1d72 <__kernel_rem_pio2+0x27a>
   e1ec0:	2600      	movs	r6, #0
   e1ec2:	2700      	movs	r7, #0
   e1ec4:	e8ea 6702 	strd	r6, r7, [sl], #8
   e1ec8:	45da      	cmp	sl, fp
   e1eca:	f109 0908 	add.w	r9, r9, #8
   e1ece:	f47f ae64 	bne.w	e1b9a <__kernel_rem_pio2+0xa2>
   e1ed2:	e680      	b.n	e1bd6 <__kernel_rem_pio2+0xde>
   e1ed4:	9b04      	ldr	r3, [sp, #16]
   e1ed6:	2b00      	cmp	r3, #0
   e1ed8:	f108 0801 	add.w	r8, r8, #1
   e1edc:	bfc8      	it	gt
   e1ede:	2502      	movgt	r5, #2
   e1ee0:	f73f af0b 	bgt.w	e1cfa <__kernel_rem_pio2+0x202>
   e1ee4:	4632      	mov	r2, r6
   e1ee6:	463b      	mov	r3, r7
   e1ee8:	2000      	movs	r0, #0
   e1eea:	4991      	ldr	r1, [pc, #580]	; (e2130 <__kernel_rem_pio2+0x638>)
   e1eec:	f001 f864 	bl	e2fb8 <__aeabi_dsub>
   e1ef0:	2502      	movs	r5, #2
   e1ef2:	4606      	mov	r6, r0
   e1ef4:	460f      	mov	r7, r1
   e1ef6:	e73c      	b.n	e1d72 <__kernel_rem_pio2+0x27a>
   e1ef8:	a90e      	add	r1, sp, #56	; 0x38
   e1efa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e1efe:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e1f02:	9906      	ldr	r1, [sp, #24]
   e1f04:	9000      	str	r0, [sp, #0]
   e1f06:	3918      	subs	r1, #24
   e1f08:	4602      	mov	r2, r0
   e1f0a:	9503      	str	r5, [sp, #12]
   e1f0c:	9106      	str	r1, [sp, #24]
   e1f0e:	b96b      	cbnz	r3, e1f2c <__kernel_rem_pio2+0x434>
   e1f10:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e1f14:	3b01      	subs	r3, #1
   e1f16:	a80e      	add	r0, sp, #56	; 0x38
   e1f18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   e1f1c:	f853 0904 	ldr.w	r0, [r3], #-4
   e1f20:	3a01      	subs	r2, #1
   e1f22:	3918      	subs	r1, #24
   e1f24:	2800      	cmp	r0, #0
   e1f26:	d0f9      	beq.n	e1f1c <__kernel_rem_pio2+0x424>
   e1f28:	9200      	str	r2, [sp, #0]
   e1f2a:	9106      	str	r1, [sp, #24]
   e1f2c:	9806      	ldr	r0, [sp, #24]
   e1f2e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; e2120 <__kernel_rem_pio2+0x628>
   e1f32:	f000 ffa9 	bl	e2e88 <scalbn>
   e1f36:	9b00      	ldr	r3, [sp, #0]
   e1f38:	2b00      	cmp	r3, #0
   e1f3a:	ec55 4b10 	vmov	r4, r5, d0
   e1f3e:	f2c0 81c1 	blt.w	e22c4 <__kernel_rem_pio2+0x7cc>
   e1f42:	00da      	lsls	r2, r3, #3
   e1f44:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   e1f48:	a90e      	add	r1, sp, #56	; 0x38
   e1f4a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   e1f4e:	eb08 0b02 	add.w	fp, r8, r2
   e1f52:	9206      	str	r2, [sp, #24]
   e1f54:	3604      	adds	r6, #4
   e1f56:	f10b 0708 	add.w	r7, fp, #8
   e1f5a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   e1f5e:	f001 f979 	bl	e3254 <__aeabi_i2d>
   e1f62:	4622      	mov	r2, r4
   e1f64:	462b      	mov	r3, r5
   e1f66:	f001 f9db 	bl	e3320 <__aeabi_dmul>
   e1f6a:	2200      	movs	r2, #0
   e1f6c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   e1f70:	4b71      	ldr	r3, [pc, #452]	; (e2138 <__kernel_rem_pio2+0x640>)
   e1f72:	4620      	mov	r0, r4
   e1f74:	4629      	mov	r1, r5
   e1f76:	f001 f9d3 	bl	e3320 <__aeabi_dmul>
   e1f7a:	4547      	cmp	r7, r8
   e1f7c:	4604      	mov	r4, r0
   e1f7e:	460d      	mov	r5, r1
   e1f80:	d1eb      	bne.n	e1f5a <__kernel_rem_pio2+0x462>
   e1f82:	ac4a      	add	r4, sp, #296	; 0x128
   e1f84:	f8dd 901c 	ldr.w	r9, [sp, #28]
   e1f88:	9404      	str	r4, [sp, #16]
   e1f8a:	f04f 0a00 	mov.w	sl, #0
   e1f8e:	f1b9 0f00 	cmp.w	r9, #0
   e1f92:	f2c0 812b 	blt.w	e21ec <__kernel_rem_pio2+0x6f4>
   e1f96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e213c <__kernel_rem_pio2+0x644>
   e1f9a:	465d      	mov	r5, fp
   e1f9c:	a362      	add	r3, pc, #392	; (adr r3, e2128 <__kernel_rem_pio2+0x630>)
   e1f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1fa2:	2600      	movs	r6, #0
   e1fa4:	2700      	movs	r7, #0
   e1fa6:	2400      	movs	r4, #0
   e1fa8:	e003      	b.n	e1fb2 <__kernel_rem_pio2+0x4ba>
   e1faa:	45a2      	cmp	sl, r4
   e1fac:	db10      	blt.n	e1fd0 <__kernel_rem_pio2+0x4d8>
   e1fae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   e1fb2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   e1fb6:	f001 f9b3 	bl	e3320 <__aeabi_dmul>
   e1fba:	4602      	mov	r2, r0
   e1fbc:	460b      	mov	r3, r1
   e1fbe:	4630      	mov	r0, r6
   e1fc0:	4639      	mov	r1, r7
   e1fc2:	f000 fffb 	bl	e2fbc <__adddf3>
   e1fc6:	3401      	adds	r4, #1
   e1fc8:	45a1      	cmp	r9, r4
   e1fca:	4606      	mov	r6, r0
   e1fcc:	460f      	mov	r7, r1
   e1fce:	daec      	bge.n	e1faa <__kernel_rem_pio2+0x4b2>
   e1fd0:	9b04      	ldr	r3, [sp, #16]
   e1fd2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   e1fd6:	f1ab 0b08 	sub.w	fp, fp, #8
   e1fda:	e9c3 6700 	strd	r6, r7, [r3]
   e1fde:	ab70      	add	r3, sp, #448	; 0x1c0
   e1fe0:	459b      	cmp	fp, r3
   e1fe2:	f10a 0a01 	add.w	sl, sl, #1
   e1fe6:	d1d2      	bne.n	e1f8e <__kernel_rem_pio2+0x496>
   e1fe8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e1fea:	9c04      	ldr	r4, [sp, #16]
   e1fec:	2b03      	cmp	r3, #3
   e1fee:	f200 808d 	bhi.w	e210c <__kernel_rem_pio2+0x614>
   e1ff2:	e8df f013 	tbh	[pc, r3, lsl #1]
   e1ff6:	00dd      	.short	0x00dd
   e1ff8:	00a500a5 	.word	0x00a500a5
   e1ffc:	0004      	.short	0x0004
   e1ffe:	9b00      	ldr	r3, [sp, #0]
   e2000:	2b00      	cmp	r3, #0
   e2002:	f340 815c 	ble.w	e22be <__kernel_rem_pio2+0x7c6>
   e2006:	9b00      	ldr	r3, [sp, #0]
   e2008:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   e200c:	9b06      	ldr	r3, [sp, #24]
   e200e:	f10b 3bff 	add.w	fp, fp, #4294967295
   e2012:	18e2      	adds	r2, r4, r3
   e2014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   e2018:	e9d2 8900 	ldrd	r8, r9, [r2]
   e201c:	f103 0208 	add.w	r2, r3, #8
   e2020:	3310      	adds	r3, #16
   e2022:	eb04 0a02 	add.w	sl, r4, r2
   e2026:	18e5      	adds	r5, r4, r3
   e2028:	ed3a 7b02 	vldmdb	sl!, {d7}
   e202c:	4642      	mov	r2, r8
   e202e:	464b      	mov	r3, r9
   e2030:	ec51 0b17 	vmov	r0, r1, d7
   e2034:	ed8d 7b04 	vstr	d7, [sp, #16]
   e2038:	f000 ffc0 	bl	e2fbc <__adddf3>
   e203c:	4606      	mov	r6, r0
   e203e:	460f      	mov	r7, r1
   e2040:	4602      	mov	r2, r0
   e2042:	460b      	mov	r3, r1
   e2044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2048:	f000 ffb6 	bl	e2fb8 <__aeabi_dsub>
   e204c:	464b      	mov	r3, r9
   e204e:	4642      	mov	r2, r8
   e2050:	f000 ffb4 	bl	e2fbc <__adddf3>
   e2054:	e965 0102 	strd	r0, r1, [r5, #-8]!
   e2058:	ab4c      	add	r3, sp, #304	; 0x130
   e205a:	429d      	cmp	r5, r3
   e205c:	46b0      	mov	r8, r6
   e205e:	46b9      	mov	r9, r7
   e2060:	e9ca 6700 	strd	r6, r7, [sl]
   e2064:	d1e0      	bne.n	e2028 <__kernel_rem_pio2+0x530>
   e2066:	9b00      	ldr	r3, [sp, #0]
   e2068:	2b01      	cmp	r3, #1
   e206a:	f340 8128 	ble.w	e22be <__kernel_rem_pio2+0x7c6>
   e206e:	9b06      	ldr	r3, [sp, #24]
   e2070:	4423      	add	r3, r4
   e2072:	ed93 7b00 	vldr	d7, [r3]
   e2076:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   e207a:	f10b 0a10 	add.w	sl, fp, #16
   e207e:	ed8d 7b00 	vstr	d7, [sp]
   e2082:	44a2      	add	sl, r4
   e2084:	f10b 0b08 	add.w	fp, fp, #8
   e2088:	eb04 050b 	add.w	r5, r4, fp
   e208c:	46d0      	mov	r8, sl
   e208e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   e2092:	f8cd a010 	str.w	sl, [sp, #16]
   e2096:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   e209a:	e9dd 0100 	ldrd	r0, r1, [sp]
   e209e:	464a      	mov	r2, r9
   e20a0:	4653      	mov	r3, sl
   e20a2:	f000 ff8b 	bl	e2fbc <__adddf3>
   e20a6:	4606      	mov	r6, r0
   e20a8:	460f      	mov	r7, r1
   e20aa:	4602      	mov	r2, r0
   e20ac:	460b      	mov	r3, r1
   e20ae:	4648      	mov	r0, r9
   e20b0:	4651      	mov	r1, sl
   e20b2:	f000 ff81 	bl	e2fb8 <__aeabi_dsub>
   e20b6:	e9dd 2300 	ldrd	r2, r3, [sp]
   e20ba:	f000 ff7f 	bl	e2fbc <__adddf3>
   e20be:	e968 0102 	strd	r0, r1, [r8, #-8]!
   e20c2:	45c3      	cmp	fp, r8
   e20c4:	e9cd 6700 	strd	r6, r7, [sp]
   e20c8:	e9c5 6700 	strd	r6, r7, [r5]
   e20cc:	d1e3      	bne.n	e2096 <__kernel_rem_pio2+0x59e>
   e20ce:	f8dd a010 	ldr.w	sl, [sp, #16]
   e20d2:	2000      	movs	r0, #0
   e20d4:	2100      	movs	r1, #0
   e20d6:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   e20da:	f000 ff6f 	bl	e2fbc <__adddf3>
   e20de:	45d3      	cmp	fp, sl
   e20e0:	d1f9      	bne.n	e20d6 <__kernel_rem_pio2+0x5de>
   e20e2:	9b03      	ldr	r3, [sp, #12]
   e20e4:	2b00      	cmp	r3, #0
   e20e6:	f000 80d3 	beq.w	e2290 <__kernel_rem_pio2+0x798>
   e20ea:	6862      	ldr	r2, [r4, #4]
   e20ec:	68e3      	ldr	r3, [r4, #12]
   e20ee:	9f08      	ldr	r7, [sp, #32]
   e20f0:	6825      	ldr	r5, [r4, #0]
   e20f2:	68a4      	ldr	r4, [r4, #8]
   e20f4:	603d      	str	r5, [r7, #0]
   e20f6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   e20fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   e20fe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   e2102:	607a      	str	r2, [r7, #4]
   e2104:	60fb      	str	r3, [r7, #12]
   e2106:	60bc      	str	r4, [r7, #8]
   e2108:	6138      	str	r0, [r7, #16]
   e210a:	6179      	str	r1, [r7, #20]
   e210c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e210e:	f003 0007 	and.w	r0, r3, #7
   e2112:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e2116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e211a:	bf00      	nop
   e211c:	f3af 8000 	nop.w
   e2120:	00000000 	.word	0x00000000
   e2124:	3ff00000 	.word	0x3ff00000
   e2128:	40000000 	.word	0x40000000
   e212c:	3ff921fb 	.word	0x3ff921fb
   e2130:	3ff00000 	.word	0x3ff00000
   e2134:	3fe00000 	.word	0x3fe00000
   e2138:	3e700000 	.word	0x3e700000
   e213c:	000e8d40 	.word	0x000e8d40
   e2140:	9d06      	ldr	r5, [sp, #24]
   e2142:	3508      	adds	r5, #8
   e2144:	4425      	add	r5, r4
   e2146:	2000      	movs	r0, #0
   e2148:	2100      	movs	r1, #0
   e214a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   e214e:	f000 ff35 	bl	e2fbc <__adddf3>
   e2152:	42a5      	cmp	r5, r4
   e2154:	d1f9      	bne.n	e214a <__kernel_rem_pio2+0x652>
   e2156:	9b03      	ldr	r3, [sp, #12]
   e2158:	2b00      	cmp	r3, #0
   e215a:	d04a      	beq.n	e21f2 <__kernel_rem_pio2+0x6fa>
   e215c:	9e08      	ldr	r6, [sp, #32]
   e215e:	4602      	mov	r2, r0
   e2160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2164:	e886 000c 	stmia.w	r6, {r2, r3}
   e2168:	460b      	mov	r3, r1
   e216a:	4602      	mov	r2, r0
   e216c:	e9d4 0100 	ldrd	r0, r1, [r4]
   e2170:	f000 ff22 	bl	e2fb8 <__aeabi_dsub>
   e2174:	9b00      	ldr	r3, [sp, #0]
   e2176:	2b00      	cmp	r3, #0
   e2178:	dd0d      	ble.n	e2196 <__kernel_rem_pio2+0x69e>
   e217a:	ad4c      	add	r5, sp, #304	; 0x130
   e217c:	2401      	movs	r4, #1
   e217e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   e2182:	f000 ff1b 	bl	e2fbc <__adddf3>
   e2186:	9b00      	ldr	r3, [sp, #0]
   e2188:	3401      	adds	r4, #1
   e218a:	42a3      	cmp	r3, r4
   e218c:	daf7      	bge.n	e217e <__kernel_rem_pio2+0x686>
   e218e:	9b03      	ldr	r3, [sp, #12]
   e2190:	2b00      	cmp	r3, #0
   e2192:	f000 80a7 	beq.w	e22e4 <__kernel_rem_pio2+0x7ec>
   e2196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e219a:	9908      	ldr	r1, [sp, #32]
   e219c:	4602      	mov	r2, r0
   e219e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e21a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e21a4:	f003 0007 	and.w	r0, r3, #7
   e21a8:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e21ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e21b0:	9b06      	ldr	r3, [sp, #24]
   e21b2:	9d00      	ldr	r5, [sp, #0]
   e21b4:	3308      	adds	r3, #8
   e21b6:	2000      	movs	r0, #0
   e21b8:	2100      	movs	r1, #0
   e21ba:	441c      	add	r4, r3
   e21bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e21c0:	3d01      	subs	r5, #1
   e21c2:	f000 fefb 	bl	e2fbc <__adddf3>
   e21c6:	1c6b      	adds	r3, r5, #1
   e21c8:	d1f8      	bne.n	e21bc <__kernel_rem_pio2+0x6c4>
   e21ca:	9b03      	ldr	r3, [sp, #12]
   e21cc:	4602      	mov	r2, r0
   e21ce:	2b00      	cmp	r3, #0
   e21d0:	f000 808e 	beq.w	e22f0 <__kernel_rem_pio2+0x7f8>
   e21d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e21d8:	9908      	ldr	r1, [sp, #32]
   e21da:	e9c1 2300 	strd	r2, r3, [r1]
   e21de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e21e0:	f003 0007 	and.w	r0, r3, #7
   e21e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e21e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e21ec:	2600      	movs	r6, #0
   e21ee:	2700      	movs	r7, #0
   e21f0:	e6ee      	b.n	e1fd0 <__kernel_rem_pio2+0x4d8>
   e21f2:	9b08      	ldr	r3, [sp, #32]
   e21f4:	4602      	mov	r2, r0
   e21f6:	e9c3 0100 	strd	r0, r1, [r3]
   e21fa:	460b      	mov	r3, r1
   e21fc:	e9d4 0100 	ldrd	r0, r1, [r4]
   e2200:	f000 feda 	bl	e2fb8 <__aeabi_dsub>
   e2204:	9c00      	ldr	r4, [sp, #0]
   e2206:	2c00      	cmp	r4, #0
   e2208:	4602      	mov	r2, r0
   e220a:	460b      	mov	r3, r1
   e220c:	dcb5      	bgt.n	e217a <__kernel_rem_pio2+0x682>
   e220e:	9908      	ldr	r1, [sp, #32]
   e2210:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e2214:	e7c5      	b.n	e21a2 <__kernel_rem_pio2+0x6aa>
   e2216:	9b06      	ldr	r3, [sp, #24]
   e2218:	9503      	str	r5, [sp, #12]
   e221a:	4258      	negs	r0, r3
   e221c:	ec47 6b10 	vmov	d0, r6, r7
   e2220:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e2224:	f000 fe30 	bl	e2e88 <scalbn>
   e2228:	ec55 4b10 	vmov	r4, r5, d0
   e222c:	2200      	movs	r2, #0
   e222e:	4b38      	ldr	r3, [pc, #224]	; (e2310 <__kernel_rem_pio2+0x818>)
   e2230:	ee10 0a10 	vmov	r0, s0
   e2234:	4629      	mov	r1, r5
   e2236:	f001 faf9 	bl	e382c <__aeabi_dcmpge>
   e223a:	2800      	cmp	r0, #0
   e223c:	d034      	beq.n	e22a8 <__kernel_rem_pio2+0x7b0>
   e223e:	2200      	movs	r2, #0
   e2240:	4b34      	ldr	r3, [pc, #208]	; (e2314 <__kernel_rem_pio2+0x81c>)
   e2242:	4620      	mov	r0, r4
   e2244:	4629      	mov	r1, r5
   e2246:	f001 f86b 	bl	e3320 <__aeabi_dmul>
   e224a:	f001 fb19 	bl	e3880 <__aeabi_d2iz>
   e224e:	4606      	mov	r6, r0
   e2250:	f001 f800 	bl	e3254 <__aeabi_i2d>
   e2254:	2200      	movs	r2, #0
   e2256:	4b2e      	ldr	r3, [pc, #184]	; (e2310 <__kernel_rem_pio2+0x818>)
   e2258:	f001 f862 	bl	e3320 <__aeabi_dmul>
   e225c:	4602      	mov	r2, r0
   e225e:	460b      	mov	r3, r1
   e2260:	4620      	mov	r0, r4
   e2262:	4629      	mov	r1, r5
   e2264:	f000 fea8 	bl	e2fb8 <__aeabi_dsub>
   e2268:	f001 fb0a 	bl	e3880 <__aeabi_d2iz>
   e226c:	9904      	ldr	r1, [sp, #16]
   e226e:	9b06      	ldr	r3, [sp, #24]
   e2270:	460a      	mov	r2, r1
   e2272:	3318      	adds	r3, #24
   e2274:	3201      	adds	r2, #1
   e2276:	9306      	str	r3, [sp, #24]
   e2278:	460b      	mov	r3, r1
   e227a:	a90e      	add	r1, sp, #56	; 0x38
   e227c:	9200      	str	r2, [sp, #0]
   e227e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e2282:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e2286:	e651      	b.n	e1f2c <__kernel_rem_pio2+0x434>
   e2288:	2301      	movs	r3, #1
   e228a:	e5a0      	b.n	e1dce <__kernel_rem_pio2+0x2d6>
   e228c:	2400      	movs	r4, #0
   e228e:	e55c      	b.n	e1d4a <__kernel_rem_pio2+0x252>
   e2290:	e9d4 6700 	ldrd	r6, r7, [r4]
   e2294:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e2298:	9d08      	ldr	r5, [sp, #32]
   e229a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e229e:	e9c5 6700 	strd	r6, r7, [r5]
   e22a2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e22a6:	e731      	b.n	e210c <__kernel_rem_pio2+0x614>
   e22a8:	4629      	mov	r1, r5
   e22aa:	4620      	mov	r0, r4
   e22ac:	f001 fae8 	bl	e3880 <__aeabi_d2iz>
   e22b0:	9a04      	ldr	r2, [sp, #16]
   e22b2:	9200      	str	r2, [sp, #0]
   e22b4:	a90e      	add	r1, sp, #56	; 0x38
   e22b6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e22ba:	e637      	b.n	e1f2c <__kernel_rem_pio2+0x434>
   e22bc:	ac4a      	add	r4, sp, #296	; 0x128
   e22be:	2000      	movs	r0, #0
   e22c0:	2100      	movs	r1, #0
   e22c2:	e70e      	b.n	e20e2 <__kernel_rem_pio2+0x5ea>
   e22c4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e22c6:	2b03      	cmp	r3, #3
   e22c8:	f63f af20 	bhi.w	e210c <__kernel_rem_pio2+0x614>
   e22cc:	a201      	add	r2, pc, #4	; (adr r2, e22d4 <__kernel_rem_pio2+0x7dc>)
   e22ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e22d2:	bf00      	nop
   e22d4:	000e230b 	.word	0x000e230b
   e22d8:	000e2303 	.word	0x000e2303
   e22dc:	000e2303 	.word	0x000e2303
   e22e0:	000e22bd 	.word	0x000e22bd
   e22e4:	460b      	mov	r3, r1
   e22e6:	9908      	ldr	r1, [sp, #32]
   e22e8:	4602      	mov	r2, r0
   e22ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e22ee:	e758      	b.n	e21a2 <__kernel_rem_pio2+0x6aa>
   e22f0:	460b      	mov	r3, r1
   e22f2:	9908      	ldr	r1, [sp, #32]
   e22f4:	e9c1 2300 	strd	r2, r3, [r1]
   e22f8:	e771      	b.n	e21de <__kernel_rem_pio2+0x6e6>
   e22fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e22fc:	00db      	lsls	r3, r3, #3
   e22fe:	9304      	str	r3, [sp, #16]
   e2300:	e469      	b.n	e1bd6 <__kernel_rem_pio2+0xde>
   e2302:	2000      	movs	r0, #0
   e2304:	2100      	movs	r1, #0
   e2306:	ac4a      	add	r4, sp, #296	; 0x128
   e2308:	e725      	b.n	e2156 <__kernel_rem_pio2+0x65e>
   e230a:	2000      	movs	r0, #0
   e230c:	2100      	movs	r1, #0
   e230e:	e75c      	b.n	e21ca <__kernel_rem_pio2+0x6d2>
   e2310:	41700000 	.word	0x41700000
   e2314:	3e700000 	.word	0x3e700000

000e2318 <__kernel_sin>:
   e2318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e231c:	ec55 4b10 	vmov	r4, r5, d0
   e2320:	ed2d 8b02 	vpush	{d8}
   e2324:	eeb0 8a41 	vmov.f32	s16, s2
   e2328:	eef0 8a61 	vmov.f32	s17, s3
   e232c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e2330:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e2334:	b083      	sub	sp, #12
   e2336:	4682      	mov	sl, r0
   e2338:	da07      	bge.n	e234a <__kernel_sin+0x32>
   e233a:	ee10 0a10 	vmov	r0, s0
   e233e:	4629      	mov	r1, r5
   e2340:	f001 fa9e 	bl	e3880 <__aeabi_d2iz>
   e2344:	2800      	cmp	r0, #0
   e2346:	f000 808e 	beq.w	e2466 <__kernel_sin+0x14e>
   e234a:	4622      	mov	r2, r4
   e234c:	462b      	mov	r3, r5
   e234e:	4620      	mov	r0, r4
   e2350:	4629      	mov	r1, r5
   e2352:	f000 ffe5 	bl	e3320 <__aeabi_dmul>
   e2356:	4606      	mov	r6, r0
   e2358:	460f      	mov	r7, r1
   e235a:	4602      	mov	r2, r0
   e235c:	460b      	mov	r3, r1
   e235e:	4620      	mov	r0, r4
   e2360:	4629      	mov	r1, r5
   e2362:	f000 ffdd 	bl	e3320 <__aeabi_dmul>
   e2366:	a347      	add	r3, pc, #284	; (adr r3, e2484 <__kernel_sin+0x16c>)
   e2368:	e9d3 2300 	ldrd	r2, r3, [r3]
   e236c:	4680      	mov	r8, r0
   e236e:	4689      	mov	r9, r1
   e2370:	4630      	mov	r0, r6
   e2372:	4639      	mov	r1, r7
   e2374:	f000 ffd4 	bl	e3320 <__aeabi_dmul>
   e2378:	a344      	add	r3, pc, #272	; (adr r3, e248c <__kernel_sin+0x174>)
   e237a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e237e:	f000 fe1b 	bl	e2fb8 <__aeabi_dsub>
   e2382:	4632      	mov	r2, r6
   e2384:	463b      	mov	r3, r7
   e2386:	f000 ffcb 	bl	e3320 <__aeabi_dmul>
   e238a:	a342      	add	r3, pc, #264	; (adr r3, e2494 <__kernel_sin+0x17c>)
   e238c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2390:	f000 fe14 	bl	e2fbc <__adddf3>
   e2394:	4632      	mov	r2, r6
   e2396:	463b      	mov	r3, r7
   e2398:	f000 ffc2 	bl	e3320 <__aeabi_dmul>
   e239c:	a33f      	add	r3, pc, #252	; (adr r3, e249c <__kernel_sin+0x184>)
   e239e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23a2:	f000 fe09 	bl	e2fb8 <__aeabi_dsub>
   e23a6:	4632      	mov	r2, r6
   e23a8:	463b      	mov	r3, r7
   e23aa:	f000 ffb9 	bl	e3320 <__aeabi_dmul>
   e23ae:	a33d      	add	r3, pc, #244	; (adr r3, e24a4 <__kernel_sin+0x18c>)
   e23b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23b4:	f000 fe02 	bl	e2fbc <__adddf3>
   e23b8:	e9cd 0100 	strd	r0, r1, [sp]
   e23bc:	f1ba 0f00 	cmp.w	sl, #0
   e23c0:	d037      	beq.n	e2432 <__kernel_sin+0x11a>
   e23c2:	2200      	movs	r2, #0
   e23c4:	4b2e      	ldr	r3, [pc, #184]	; (e2480 <__kernel_sin+0x168>)
   e23c6:	ec51 0b18 	vmov	r0, r1, d8
   e23ca:	f000 ffa9 	bl	e3320 <__aeabi_dmul>
   e23ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   e23d2:	4682      	mov	sl, r0
   e23d4:	468b      	mov	fp, r1
   e23d6:	4640      	mov	r0, r8
   e23d8:	4649      	mov	r1, r9
   e23da:	f000 ffa1 	bl	e3320 <__aeabi_dmul>
   e23de:	4602      	mov	r2, r0
   e23e0:	460b      	mov	r3, r1
   e23e2:	4650      	mov	r0, sl
   e23e4:	4659      	mov	r1, fp
   e23e6:	f000 fde7 	bl	e2fb8 <__aeabi_dsub>
   e23ea:	4632      	mov	r2, r6
   e23ec:	463b      	mov	r3, r7
   e23ee:	f000 ff97 	bl	e3320 <__aeabi_dmul>
   e23f2:	ec53 2b18 	vmov	r2, r3, d8
   e23f6:	f000 fddf 	bl	e2fb8 <__aeabi_dsub>
   e23fa:	a31f      	add	r3, pc, #124	; (adr r3, e2478 <__kernel_sin+0x160>)
   e23fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2400:	4606      	mov	r6, r0
   e2402:	460f      	mov	r7, r1
   e2404:	4640      	mov	r0, r8
   e2406:	4649      	mov	r1, r9
   e2408:	f000 ff8a 	bl	e3320 <__aeabi_dmul>
   e240c:	4602      	mov	r2, r0
   e240e:	460b      	mov	r3, r1
   e2410:	4630      	mov	r0, r6
   e2412:	4639      	mov	r1, r7
   e2414:	f000 fdd2 	bl	e2fbc <__adddf3>
   e2418:	4602      	mov	r2, r0
   e241a:	460b      	mov	r3, r1
   e241c:	4620      	mov	r0, r4
   e241e:	4629      	mov	r1, r5
   e2420:	f000 fdca 	bl	e2fb8 <__aeabi_dsub>
   e2424:	ec41 0b10 	vmov	d0, r0, r1
   e2428:	b003      	add	sp, #12
   e242a:	ecbd 8b02 	vpop	{d8}
   e242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2432:	4602      	mov	r2, r0
   e2434:	460b      	mov	r3, r1
   e2436:	4630      	mov	r0, r6
   e2438:	4639      	mov	r1, r7
   e243a:	f000 ff71 	bl	e3320 <__aeabi_dmul>
   e243e:	a30e      	add	r3, pc, #56	; (adr r3, e2478 <__kernel_sin+0x160>)
   e2440:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2444:	f000 fdb8 	bl	e2fb8 <__aeabi_dsub>
   e2448:	4642      	mov	r2, r8
   e244a:	464b      	mov	r3, r9
   e244c:	f000 ff68 	bl	e3320 <__aeabi_dmul>
   e2450:	4622      	mov	r2, r4
   e2452:	462b      	mov	r3, r5
   e2454:	f000 fdb2 	bl	e2fbc <__adddf3>
   e2458:	ec41 0b10 	vmov	d0, r0, r1
   e245c:	b003      	add	sp, #12
   e245e:	ecbd 8b02 	vpop	{d8}
   e2462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2466:	ec45 4b10 	vmov	d0, r4, r5
   e246a:	b003      	add	sp, #12
   e246c:	ecbd 8b02 	vpop	{d8}
   e2470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2474:	f3af 8000 	nop.w
   e2478:	55555549 	.word	0x55555549
   e247c:	3fc55555 	.word	0x3fc55555
   e2480:	3fe00000 	.word	0x3fe00000
   e2484:	5acfd57c 	.word	0x5acfd57c
   e2488:	3de5d93a 	.word	0x3de5d93a
   e248c:	8a2b9ceb 	.word	0x8a2b9ceb
   e2490:	3e5ae5e6 	.word	0x3e5ae5e6
   e2494:	57b1fe7d 	.word	0x57b1fe7d
   e2498:	3ec71de3 	.word	0x3ec71de3
   e249c:	19c161d5 	.word	0x19c161d5
   e24a0:	3f2a01a0 	.word	0x3f2a01a0
   e24a4:	1110f8a6 	.word	0x1110f8a6
   e24a8:	3f811111 	.word	0x3f811111
   e24ac:	00000000 	.word	0x00000000

000e24b0 <__kernel_tan>:
   e24b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e24b4:	ec59 8b10 	vmov	r8, r9, d0
   e24b8:	4be1      	ldr	r3, [pc, #900]	; (e2840 <__kernel_tan+0x390>)
   e24ba:	b089      	sub	sp, #36	; 0x24
   e24bc:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   e24c0:	429e      	cmp	r6, r3
   e24c2:	f8cd 9014 	str.w	r9, [sp, #20]
   e24c6:	4607      	mov	r7, r0
   e24c8:	ed8d 1b00 	vstr	d1, [sp]
   e24cc:	dc19      	bgt.n	e2502 <__kernel_tan+0x52>
   e24ce:	ee10 0a10 	vmov	r0, s0
   e24d2:	4649      	mov	r1, r9
   e24d4:	f001 f9d4 	bl	e3880 <__aeabi_d2iz>
   e24d8:	bba0      	cbnz	r0, e2544 <__kernel_tan+0x94>
   e24da:	4643      	mov	r3, r8
   e24dc:	431e      	orrs	r6, r3
   e24de:	1c7b      	adds	r3, r7, #1
   e24e0:	4333      	orrs	r3, r6
   e24e2:	f000 815e 	beq.w	e27a2 <__kernel_tan+0x2f2>
   e24e6:	2f01      	cmp	r7, #1
   e24e8:	f000 81c2 	beq.w	e2870 <__kernel_tan+0x3c0>
   e24ec:	4642      	mov	r2, r8
   e24ee:	464b      	mov	r3, r9
   e24f0:	2000      	movs	r0, #0
   e24f2:	49d4      	ldr	r1, [pc, #848]	; (e2844 <__kernel_tan+0x394>)
   e24f4:	f001 f83e 	bl	e3574 <__aeabi_ddiv>
   e24f8:	ec41 0b10 	vmov	d0, r0, r1
   e24fc:	b009      	add	sp, #36	; 0x24
   e24fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2502:	4bd1      	ldr	r3, [pc, #836]	; (e2848 <__kernel_tan+0x398>)
   e2504:	429e      	cmp	r6, r3
   e2506:	dd1d      	ble.n	e2544 <__kernel_tan+0x94>
   e2508:	9b05      	ldr	r3, [sp, #20]
   e250a:	2b00      	cmp	r3, #0
   e250c:	f2c0 81a0 	blt.w	e2850 <__kernel_tan+0x3a0>
   e2510:	4642      	mov	r2, r8
   e2512:	464b      	mov	r3, r9
   e2514:	a1aa      	add	r1, pc, #680	; (adr r1, e27c0 <__kernel_tan+0x310>)
   e2516:	e9d1 0100 	ldrd	r0, r1, [r1]
   e251a:	f000 fd4d 	bl	e2fb8 <__aeabi_dsub>
   e251e:	e9dd 2300 	ldrd	r2, r3, [sp]
   e2522:	4604      	mov	r4, r0
   e2524:	460d      	mov	r5, r1
   e2526:	a1a8      	add	r1, pc, #672	; (adr r1, e27c8 <__kernel_tan+0x318>)
   e2528:	e9d1 0100 	ldrd	r0, r1, [r1]
   e252c:	f000 fd44 	bl	e2fb8 <__aeabi_dsub>
   e2530:	ed9f 7ba7 	vldr	d7, [pc, #668]	; e27d0 <__kernel_tan+0x320>
   e2534:	4622      	mov	r2, r4
   e2536:	462b      	mov	r3, r5
   e2538:	ed8d 7b00 	vstr	d7, [sp]
   e253c:	f000 fd3e 	bl	e2fbc <__adddf3>
   e2540:	4680      	mov	r8, r0
   e2542:	4689      	mov	r9, r1
   e2544:	4642      	mov	r2, r8
   e2546:	464b      	mov	r3, r9
   e2548:	4640      	mov	r0, r8
   e254a:	4649      	mov	r1, r9
   e254c:	f000 fee8 	bl	e3320 <__aeabi_dmul>
   e2550:	4602      	mov	r2, r0
   e2552:	460b      	mov	r3, r1
   e2554:	4682      	mov	sl, r0
   e2556:	468b      	mov	fp, r1
   e2558:	f000 fee2 	bl	e3320 <__aeabi_dmul>
   e255c:	4652      	mov	r2, sl
   e255e:	4604      	mov	r4, r0
   e2560:	460d      	mov	r5, r1
   e2562:	465b      	mov	r3, fp
   e2564:	4640      	mov	r0, r8
   e2566:	4649      	mov	r1, r9
   e2568:	f000 feda 	bl	e3320 <__aeabi_dmul>
   e256c:	a39a      	add	r3, pc, #616	; (adr r3, e27d8 <__kernel_tan+0x328>)
   e256e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2572:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e2576:	4620      	mov	r0, r4
   e2578:	4629      	mov	r1, r5
   e257a:	f000 fed1 	bl	e3320 <__aeabi_dmul>
   e257e:	a398      	add	r3, pc, #608	; (adr r3, e27e0 <__kernel_tan+0x330>)
   e2580:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2584:	f000 fd1a 	bl	e2fbc <__adddf3>
   e2588:	4622      	mov	r2, r4
   e258a:	462b      	mov	r3, r5
   e258c:	f000 fec8 	bl	e3320 <__aeabi_dmul>
   e2590:	a395      	add	r3, pc, #596	; (adr r3, e27e8 <__kernel_tan+0x338>)
   e2592:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2596:	f000 fd11 	bl	e2fbc <__adddf3>
   e259a:	4622      	mov	r2, r4
   e259c:	462b      	mov	r3, r5
   e259e:	f000 febf 	bl	e3320 <__aeabi_dmul>
   e25a2:	a393      	add	r3, pc, #588	; (adr r3, e27f0 <__kernel_tan+0x340>)
   e25a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25a8:	f000 fd08 	bl	e2fbc <__adddf3>
   e25ac:	4622      	mov	r2, r4
   e25ae:	462b      	mov	r3, r5
   e25b0:	f000 feb6 	bl	e3320 <__aeabi_dmul>
   e25b4:	a390      	add	r3, pc, #576	; (adr r3, e27f8 <__kernel_tan+0x348>)
   e25b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25ba:	f000 fcff 	bl	e2fbc <__adddf3>
   e25be:	4622      	mov	r2, r4
   e25c0:	462b      	mov	r3, r5
   e25c2:	f000 fead 	bl	e3320 <__aeabi_dmul>
   e25c6:	a38e      	add	r3, pc, #568	; (adr r3, e2800 <__kernel_tan+0x350>)
   e25c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25cc:	f000 fcf6 	bl	e2fbc <__adddf3>
   e25d0:	4652      	mov	r2, sl
   e25d2:	465b      	mov	r3, fp
   e25d4:	f000 fea4 	bl	e3320 <__aeabi_dmul>
   e25d8:	a38b      	add	r3, pc, #556	; (adr r3, e2808 <__kernel_tan+0x358>)
   e25da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25de:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e25e2:	4620      	mov	r0, r4
   e25e4:	4629      	mov	r1, r5
   e25e6:	f000 fe9b 	bl	e3320 <__aeabi_dmul>
   e25ea:	a389      	add	r3, pc, #548	; (adr r3, e2810 <__kernel_tan+0x360>)
   e25ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e25f0:	f000 fce4 	bl	e2fbc <__adddf3>
   e25f4:	4622      	mov	r2, r4
   e25f6:	462b      	mov	r3, r5
   e25f8:	f000 fe92 	bl	e3320 <__aeabi_dmul>
   e25fc:	a386      	add	r3, pc, #536	; (adr r3, e2818 <__kernel_tan+0x368>)
   e25fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2602:	f000 fcdb 	bl	e2fbc <__adddf3>
   e2606:	4622      	mov	r2, r4
   e2608:	462b      	mov	r3, r5
   e260a:	f000 fe89 	bl	e3320 <__aeabi_dmul>
   e260e:	a384      	add	r3, pc, #528	; (adr r3, e2820 <__kernel_tan+0x370>)
   e2610:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2614:	f000 fcd2 	bl	e2fbc <__adddf3>
   e2618:	4622      	mov	r2, r4
   e261a:	462b      	mov	r3, r5
   e261c:	f000 fe80 	bl	e3320 <__aeabi_dmul>
   e2620:	a381      	add	r3, pc, #516	; (adr r3, e2828 <__kernel_tan+0x378>)
   e2622:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2626:	f000 fcc9 	bl	e2fbc <__adddf3>
   e262a:	4622      	mov	r2, r4
   e262c:	462b      	mov	r3, r5
   e262e:	f000 fe77 	bl	e3320 <__aeabi_dmul>
   e2632:	a37f      	add	r3, pc, #508	; (adr r3, e2830 <__kernel_tan+0x380>)
   e2634:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2638:	f000 fcc0 	bl	e2fbc <__adddf3>
   e263c:	4602      	mov	r2, r0
   e263e:	460b      	mov	r3, r1
   e2640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e2644:	f000 fcba 	bl	e2fbc <__adddf3>
   e2648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e264c:	f000 fe68 	bl	e3320 <__aeabi_dmul>
   e2650:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2654:	4622      	mov	r2, r4
   e2656:	462b      	mov	r3, r5
   e2658:	f000 fcb0 	bl	e2fbc <__adddf3>
   e265c:	4652      	mov	r2, sl
   e265e:	465b      	mov	r3, fp
   e2660:	f000 fe5e 	bl	e3320 <__aeabi_dmul>
   e2664:	4602      	mov	r2, r0
   e2666:	460b      	mov	r3, r1
   e2668:	4620      	mov	r0, r4
   e266a:	4629      	mov	r1, r5
   e266c:	f000 fca6 	bl	e2fbc <__adddf3>
   e2670:	a371      	add	r3, pc, #452	; (adr r3, e2838 <__kernel_tan+0x388>)
   e2672:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2676:	4604      	mov	r4, r0
   e2678:	460d      	mov	r5, r1
   e267a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e267e:	f000 fe4f 	bl	e3320 <__aeabi_dmul>
   e2682:	4622      	mov	r2, r4
   e2684:	462b      	mov	r3, r5
   e2686:	f000 fc99 	bl	e2fbc <__adddf3>
   e268a:	460b      	mov	r3, r1
   e268c:	4602      	mov	r2, r0
   e268e:	4649      	mov	r1, r9
   e2690:	4640      	mov	r0, r8
   e2692:	e9cd 2300 	strd	r2, r3, [sp]
   e2696:	f000 fc91 	bl	e2fbc <__adddf3>
   e269a:	4b6b      	ldr	r3, [pc, #428]	; (e2848 <__kernel_tan+0x398>)
   e269c:	429e      	cmp	r6, r3
   e269e:	4604      	mov	r4, r0
   e26a0:	460d      	mov	r5, r1
   e26a2:	dc3c      	bgt.n	e271e <__kernel_tan+0x26e>
   e26a4:	2f01      	cmp	r7, #1
   e26a6:	f000 80e0 	beq.w	e286a <__kernel_tan+0x3ba>
   e26aa:	4602      	mov	r2, r0
   e26ac:	460b      	mov	r3, r1
   e26ae:	2000      	movs	r0, #0
   e26b0:	4964      	ldr	r1, [pc, #400]	; (e2844 <__kernel_tan+0x394>)
   e26b2:	f000 ff5f 	bl	e3574 <__aeabi_ddiv>
   e26b6:	2400      	movs	r4, #0
   e26b8:	460f      	mov	r7, r1
   e26ba:	464b      	mov	r3, r9
   e26bc:	4606      	mov	r6, r0
   e26be:	4629      	mov	r1, r5
   e26c0:	4620      	mov	r0, r4
   e26c2:	4642      	mov	r2, r8
   e26c4:	f000 fc78 	bl	e2fb8 <__aeabi_dsub>
   e26c8:	4602      	mov	r2, r0
   e26ca:	460b      	mov	r3, r1
   e26cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   e26d0:	f000 fc72 	bl	e2fb8 <__aeabi_dsub>
   e26d4:	4622      	mov	r2, r4
   e26d6:	463b      	mov	r3, r7
   e26d8:	f000 fe22 	bl	e3320 <__aeabi_dmul>
   e26dc:	46a2      	mov	sl, r4
   e26de:	46a9      	mov	r9, r5
   e26e0:	4604      	mov	r4, r0
   e26e2:	460d      	mov	r5, r1
   e26e4:	4652      	mov	r2, sl
   e26e6:	463b      	mov	r3, r7
   e26e8:	4650      	mov	r0, sl
   e26ea:	4649      	mov	r1, r9
   e26ec:	f000 fe18 	bl	e3320 <__aeabi_dmul>
   e26f0:	2200      	movs	r2, #0
   e26f2:	4b56      	ldr	r3, [pc, #344]	; (e284c <__kernel_tan+0x39c>)
   e26f4:	f000 fc62 	bl	e2fbc <__adddf3>
   e26f8:	4602      	mov	r2, r0
   e26fa:	460b      	mov	r3, r1
   e26fc:	4620      	mov	r0, r4
   e26fe:	4629      	mov	r1, r5
   e2700:	f000 fc5c 	bl	e2fbc <__adddf3>
   e2704:	4632      	mov	r2, r6
   e2706:	463b      	mov	r3, r7
   e2708:	f000 fe0a 	bl	e3320 <__aeabi_dmul>
   e270c:	4652      	mov	r2, sl
   e270e:	463b      	mov	r3, r7
   e2710:	f000 fc54 	bl	e2fbc <__adddf3>
   e2714:	ec41 0b10 	vmov	d0, r0, r1
   e2718:	b009      	add	sp, #36	; 0x24
   e271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e271e:	4638      	mov	r0, r7
   e2720:	f000 fd98 	bl	e3254 <__aeabi_i2d>
   e2724:	4622      	mov	r2, r4
   e2726:	4606      	mov	r6, r0
   e2728:	460f      	mov	r7, r1
   e272a:	462b      	mov	r3, r5
   e272c:	4620      	mov	r0, r4
   e272e:	4629      	mov	r1, r5
   e2730:	f000 fdf6 	bl	e3320 <__aeabi_dmul>
   e2734:	4632      	mov	r2, r6
   e2736:	4682      	mov	sl, r0
   e2738:	468b      	mov	fp, r1
   e273a:	463b      	mov	r3, r7
   e273c:	4620      	mov	r0, r4
   e273e:	4629      	mov	r1, r5
   e2740:	f000 fc3c 	bl	e2fbc <__adddf3>
   e2744:	4602      	mov	r2, r0
   e2746:	460b      	mov	r3, r1
   e2748:	4650      	mov	r0, sl
   e274a:	4659      	mov	r1, fp
   e274c:	f000 ff12 	bl	e3574 <__aeabi_ddiv>
   e2750:	e9dd 2300 	ldrd	r2, r3, [sp]
   e2754:	f000 fc30 	bl	e2fb8 <__aeabi_dsub>
   e2758:	4602      	mov	r2, r0
   e275a:	460b      	mov	r3, r1
   e275c:	4640      	mov	r0, r8
   e275e:	4649      	mov	r1, r9
   e2760:	f000 fc2a 	bl	e2fb8 <__aeabi_dsub>
   e2764:	4602      	mov	r2, r0
   e2766:	460b      	mov	r3, r1
   e2768:	f000 fc28 	bl	e2fbc <__adddf3>
   e276c:	4602      	mov	r2, r0
   e276e:	460b      	mov	r3, r1
   e2770:	4630      	mov	r0, r6
   e2772:	4639      	mov	r1, r7
   e2774:	f000 fc20 	bl	e2fb8 <__aeabi_dsub>
   e2778:	9b05      	ldr	r3, [sp, #20]
   e277a:	4604      	mov	r4, r0
   e277c:	1798      	asrs	r0, r3, #30
   e277e:	f000 0002 	and.w	r0, r0, #2
   e2782:	f1c0 0001 	rsb	r0, r0, #1
   e2786:	460d      	mov	r5, r1
   e2788:	f000 fd64 	bl	e3254 <__aeabi_i2d>
   e278c:	4602      	mov	r2, r0
   e278e:	460b      	mov	r3, r1
   e2790:	4620      	mov	r0, r4
   e2792:	4629      	mov	r1, r5
   e2794:	f000 fdc4 	bl	e3320 <__aeabi_dmul>
   e2798:	ec41 0b10 	vmov	d0, r0, r1
   e279c:	b009      	add	sp, #36	; 0x24
   e279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e27a2:	ec49 8b10 	vmov	d0, r8, r9
   e27a6:	f7fb fbb3 	bl	ddf10 <fabs>
   e27aa:	2000      	movs	r0, #0
   e27ac:	ec53 2b10 	vmov	r2, r3, d0
   e27b0:	4926      	ldr	r1, [pc, #152]	; (e284c <__kernel_tan+0x39c>)
   e27b2:	f000 fedf 	bl	e3574 <__aeabi_ddiv>
   e27b6:	ec41 0b10 	vmov	d0, r0, r1
   e27ba:	e7ad      	b.n	e2718 <__kernel_tan+0x268>
   e27bc:	f3af 8000 	nop.w
   e27c0:	54442d18 	.word	0x54442d18
   e27c4:	3fe921fb 	.word	0x3fe921fb
   e27c8:	33145c07 	.word	0x33145c07
   e27cc:	3c81a626 	.word	0x3c81a626
	...
   e27d8:	74bf7ad4 	.word	0x74bf7ad4
   e27dc:	3efb2a70 	.word	0x3efb2a70
   e27e0:	32f0a7e9 	.word	0x32f0a7e9
   e27e4:	3f12b80f 	.word	0x3f12b80f
   e27e8:	1a8d1068 	.word	0x1a8d1068
   e27ec:	3f3026f7 	.word	0x3f3026f7
   e27f0:	fee08315 	.word	0xfee08315
   e27f4:	3f57dbc8 	.word	0x3f57dbc8
   e27f8:	e96e8493 	.word	0xe96e8493
   e27fc:	3f8226e3 	.word	0x3f8226e3
   e2800:	1bb341fe 	.word	0x1bb341fe
   e2804:	3faba1ba 	.word	0x3faba1ba
   e2808:	db605373 	.word	0xdb605373
   e280c:	bef375cb 	.word	0xbef375cb
   e2810:	a03792a6 	.word	0xa03792a6
   e2814:	3f147e88 	.word	0x3f147e88
   e2818:	f2f26501 	.word	0xf2f26501
   e281c:	3f4344d8 	.word	0x3f4344d8
   e2820:	c9560328 	.word	0xc9560328
   e2824:	3f6d6d22 	.word	0x3f6d6d22
   e2828:	8406d637 	.word	0x8406d637
   e282c:	3f9664f4 	.word	0x3f9664f4
   e2830:	1110fe7a 	.word	0x1110fe7a
   e2834:	3fc11111 	.word	0x3fc11111
   e2838:	55555563 	.word	0x55555563
   e283c:	3fd55555 	.word	0x3fd55555
   e2840:	3e2fffff 	.word	0x3e2fffff
   e2844:	bff00000 	.word	0xbff00000
   e2848:	3fe59427 	.word	0x3fe59427
   e284c:	3ff00000 	.word	0x3ff00000
   e2850:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2854:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   e2858:	4622      	mov	r2, r4
   e285a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   e285e:	ee10 8a10 	vmov	r8, s0
   e2862:	4689      	mov	r9, r1
   e2864:	e9cd 2300 	strd	r2, r3, [sp]
   e2868:	e652      	b.n	e2510 <__kernel_tan+0x60>
   e286a:	ec45 4b10 	vmov	d0, r4, r5
   e286e:	e753      	b.n	e2718 <__kernel_tan+0x268>
   e2870:	ec49 8b10 	vmov	d0, r8, r9
   e2874:	e750      	b.n	e2718 <__kernel_tan+0x268>
   e2876:	bf00      	nop

000e2878 <expm1>:
   e2878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e287c:	ec5b ab10 	vmov	sl, fp, d0
   e2880:	49d7      	ldr	r1, [pc, #860]	; (e2be0 <expm1+0x368>)
   e2882:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2886:	428b      	cmp	r3, r1
   e2888:	b085      	sub	sp, #20
   e288a:	f00b 4400 	and.w	r4, fp, #2147483648	; 0x80000000
   e288e:	d953      	bls.n	e2938 <expm1+0xc0>
   e2890:	49d4      	ldr	r1, [pc, #848]	; (e2be4 <expm1+0x36c>)
   e2892:	428b      	cmp	r3, r1
   e2894:	f200 8105 	bhi.w	e2aa2 <expm1+0x22a>
   e2898:	2c00      	cmp	r4, #0
   e289a:	f000 81de 	beq.w	e2c5a <expm1+0x3e2>
   e289e:	a3b6      	add	r3, pc, #728	; (adr r3, e2b78 <expm1+0x300>)
   e28a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28a4:	4650      	mov	r0, sl
   e28a6:	4659      	mov	r1, fp
   e28a8:	f000 fb88 	bl	e2fbc <__adddf3>
   e28ac:	2200      	movs	r2, #0
   e28ae:	2300      	movs	r3, #0
   e28b0:	f000 ffa8 	bl	e3804 <__aeabi_dcmplt>
   e28b4:	2800      	cmp	r0, #0
   e28b6:	f040 80ff 	bne.w	e2ab8 <expm1+0x240>
   e28ba:	a3b1      	add	r3, pc, #708	; (adr r3, e2b80 <expm1+0x308>)
   e28bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28c0:	4650      	mov	r0, sl
   e28c2:	4659      	mov	r1, fp
   e28c4:	f000 fd2c 	bl	e3320 <__aeabi_dmul>
   e28c8:	4602      	mov	r2, r0
   e28ca:	460b      	mov	r3, r1
   e28cc:	2000      	movs	r0, #0
   e28ce:	49c6      	ldr	r1, [pc, #792]	; (e2be8 <expm1+0x370>)
   e28d0:	f000 fb74 	bl	e2fbc <__adddf3>
   e28d4:	f000 ffd4 	bl	e3880 <__aeabi_d2iz>
   e28d8:	9001      	str	r0, [sp, #4]
   e28da:	f000 fcbb 	bl	e3254 <__aeabi_i2d>
   e28de:	a3aa      	add	r3, pc, #680	; (adr r3, e2b88 <expm1+0x310>)
   e28e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28e4:	4606      	mov	r6, r0
   e28e6:	460f      	mov	r7, r1
   e28e8:	f000 fd1a 	bl	e3320 <__aeabi_dmul>
   e28ec:	4602      	mov	r2, r0
   e28ee:	460b      	mov	r3, r1
   e28f0:	4650      	mov	r0, sl
   e28f2:	4659      	mov	r1, fp
   e28f4:	f000 fb60 	bl	e2fb8 <__aeabi_dsub>
   e28f8:	a3a5      	add	r3, pc, #660	; (adr r3, e2b90 <expm1+0x318>)
   e28fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28fe:	4680      	mov	r8, r0
   e2900:	4689      	mov	r9, r1
   e2902:	4630      	mov	r0, r6
   e2904:	4639      	mov	r1, r7
   e2906:	f000 fd0b 	bl	e3320 <__aeabi_dmul>
   e290a:	4606      	mov	r6, r0
   e290c:	460f      	mov	r7, r1
   e290e:	4632      	mov	r2, r6
   e2910:	463b      	mov	r3, r7
   e2912:	4640      	mov	r0, r8
   e2914:	4649      	mov	r1, r9
   e2916:	f000 fb4f 	bl	e2fb8 <__aeabi_dsub>
   e291a:	4602      	mov	r2, r0
   e291c:	460b      	mov	r3, r1
   e291e:	4682      	mov	sl, r0
   e2920:	468b      	mov	fp, r1
   e2922:	4640      	mov	r0, r8
   e2924:	4649      	mov	r1, r9
   e2926:	f000 fb47 	bl	e2fb8 <__aeabi_dsub>
   e292a:	4632      	mov	r2, r6
   e292c:	463b      	mov	r3, r7
   e292e:	f000 fb43 	bl	e2fb8 <__aeabi_dsub>
   e2932:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e2936:	e009      	b.n	e294c <expm1+0xd4>
   e2938:	4aac      	ldr	r2, [pc, #688]	; (e2bec <expm1+0x374>)
   e293a:	4293      	cmp	r3, r2
   e293c:	f200 80e7 	bhi.w	e2b0e <expm1+0x296>
   e2940:	4aab      	ldr	r2, [pc, #684]	; (e2bf0 <expm1+0x378>)
   e2942:	4293      	cmp	r3, r2
   e2944:	f240 8162 	bls.w	e2c0c <expm1+0x394>
   e2948:	2300      	movs	r3, #0
   e294a:	9301      	str	r3, [sp, #4]
   e294c:	2200      	movs	r2, #0
   e294e:	4ba9      	ldr	r3, [pc, #676]	; (e2bf4 <expm1+0x37c>)
   e2950:	4650      	mov	r0, sl
   e2952:	4659      	mov	r1, fp
   e2954:	f000 fce4 	bl	e3320 <__aeabi_dmul>
   e2958:	4606      	mov	r6, r0
   e295a:	460f      	mov	r7, r1
   e295c:	4602      	mov	r2, r0
   e295e:	460b      	mov	r3, r1
   e2960:	4650      	mov	r0, sl
   e2962:	4659      	mov	r1, fp
   e2964:	f000 fcdc 	bl	e3320 <__aeabi_dmul>
   e2968:	a38b      	add	r3, pc, #556	; (adr r3, e2b98 <expm1+0x320>)
   e296a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e296e:	4604      	mov	r4, r0
   e2970:	460d      	mov	r5, r1
   e2972:	f000 fcd5 	bl	e3320 <__aeabi_dmul>
   e2976:	a38a      	add	r3, pc, #552	; (adr r3, e2ba0 <expm1+0x328>)
   e2978:	e9d3 2300 	ldrd	r2, r3, [r3]
   e297c:	f000 fb1e 	bl	e2fbc <__adddf3>
   e2980:	4622      	mov	r2, r4
   e2982:	462b      	mov	r3, r5
   e2984:	f000 fccc 	bl	e3320 <__aeabi_dmul>
   e2988:	a387      	add	r3, pc, #540	; (adr r3, e2ba8 <expm1+0x330>)
   e298a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e298e:	f000 fb13 	bl	e2fb8 <__aeabi_dsub>
   e2992:	4622      	mov	r2, r4
   e2994:	462b      	mov	r3, r5
   e2996:	f000 fcc3 	bl	e3320 <__aeabi_dmul>
   e299a:	a385      	add	r3, pc, #532	; (adr r3, e2bb0 <expm1+0x338>)
   e299c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e29a0:	f000 fb0c 	bl	e2fbc <__adddf3>
   e29a4:	4622      	mov	r2, r4
   e29a6:	462b      	mov	r3, r5
   e29a8:	f000 fcba 	bl	e3320 <__aeabi_dmul>
   e29ac:	a382      	add	r3, pc, #520	; (adr r3, e2bb8 <expm1+0x340>)
   e29ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e29b2:	f000 fb01 	bl	e2fb8 <__aeabi_dsub>
   e29b6:	4622      	mov	r2, r4
   e29b8:	462b      	mov	r3, r5
   e29ba:	f000 fcb1 	bl	e3320 <__aeabi_dmul>
   e29be:	2200      	movs	r2, #0
   e29c0:	4b8d      	ldr	r3, [pc, #564]	; (e2bf8 <expm1+0x380>)
   e29c2:	f000 fafb 	bl	e2fbc <__adddf3>
   e29c6:	4680      	mov	r8, r0
   e29c8:	4689      	mov	r9, r1
   e29ca:	4602      	mov	r2, r0
   e29cc:	460b      	mov	r3, r1
   e29ce:	4630      	mov	r0, r6
   e29d0:	4639      	mov	r1, r7
   e29d2:	f000 fca5 	bl	e3320 <__aeabi_dmul>
   e29d6:	4602      	mov	r2, r0
   e29d8:	460b      	mov	r3, r1
   e29da:	2000      	movs	r0, #0
   e29dc:	4987      	ldr	r1, [pc, #540]	; (e2bfc <expm1+0x384>)
   e29de:	f000 faeb 	bl	e2fb8 <__aeabi_dsub>
   e29e2:	4606      	mov	r6, r0
   e29e4:	4602      	mov	r2, r0
   e29e6:	460b      	mov	r3, r1
   e29e8:	460f      	mov	r7, r1
   e29ea:	4640      	mov	r0, r8
   e29ec:	4649      	mov	r1, r9
   e29ee:	f000 fae3 	bl	e2fb8 <__aeabi_dsub>
   e29f2:	4632      	mov	r2, r6
   e29f4:	4680      	mov	r8, r0
   e29f6:	4689      	mov	r9, r1
   e29f8:	463b      	mov	r3, r7
   e29fa:	4650      	mov	r0, sl
   e29fc:	4659      	mov	r1, fp
   e29fe:	f000 fc8f 	bl	e3320 <__aeabi_dmul>
   e2a02:	4602      	mov	r2, r0
   e2a04:	460b      	mov	r3, r1
   e2a06:	2000      	movs	r0, #0
   e2a08:	497d      	ldr	r1, [pc, #500]	; (e2c00 <expm1+0x388>)
   e2a0a:	f000 fad5 	bl	e2fb8 <__aeabi_dsub>
   e2a0e:	4602      	mov	r2, r0
   e2a10:	460b      	mov	r3, r1
   e2a12:	4640      	mov	r0, r8
   e2a14:	4649      	mov	r1, r9
   e2a16:	f000 fdad 	bl	e3574 <__aeabi_ddiv>
   e2a1a:	4622      	mov	r2, r4
   e2a1c:	462b      	mov	r3, r5
   e2a1e:	f000 fc7f 	bl	e3320 <__aeabi_dmul>
   e2a22:	9e01      	ldr	r6, [sp, #4]
   e2a24:	4602      	mov	r2, r0
   e2a26:	460b      	mov	r3, r1
   e2a28:	2e00      	cmp	r6, #0
   e2a2a:	d048      	beq.n	e2abe <expm1+0x246>
   e2a2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e2a30:	4632      	mov	r2, r6
   e2a32:	463b      	mov	r3, r7
   e2a34:	f000 fac0 	bl	e2fb8 <__aeabi_dsub>
   e2a38:	4652      	mov	r2, sl
   e2a3a:	465b      	mov	r3, fp
   e2a3c:	f000 fc70 	bl	e3320 <__aeabi_dmul>
   e2a40:	4632      	mov	r2, r6
   e2a42:	463b      	mov	r3, r7
   e2a44:	f000 fab8 	bl	e2fb8 <__aeabi_dsub>
   e2a48:	462b      	mov	r3, r5
   e2a4a:	4622      	mov	r2, r4
   e2a4c:	f000 fab4 	bl	e2fb8 <__aeabi_dsub>
   e2a50:	9b01      	ldr	r3, [sp, #4]
   e2a52:	3301      	adds	r3, #1
   e2a54:	4606      	mov	r6, r0
   e2a56:	460f      	mov	r7, r1
   e2a58:	f000 810b 	beq.w	e2c72 <expm1+0x3fa>
   e2a5c:	9b01      	ldr	r3, [sp, #4]
   e2a5e:	2b01      	cmp	r3, #1
   e2a60:	f000 80df 	beq.w	e2c22 <expm1+0x3aa>
   e2a64:	9b01      	ldr	r3, [sp, #4]
   e2a66:	3301      	adds	r3, #1
   e2a68:	2b39      	cmp	r3, #57	; 0x39
   e2a6a:	d866      	bhi.n	e2b3a <expm1+0x2c2>
   e2a6c:	9b01      	ldr	r3, [sp, #4]
   e2a6e:	2b13      	cmp	r3, #19
   e2a70:	f340 8110 	ble.w	e2c94 <expm1+0x41c>
   e2a74:	9c01      	ldr	r4, [sp, #4]
   e2a76:	f5c4 757f 	rsb	r5, r4, #1020	; 0x3fc
   e2a7a:	3503      	adds	r5, #3
   e2a7c:	2200      	movs	r2, #0
   e2a7e:	052b      	lsls	r3, r5, #20
   e2a80:	f000 fa9c 	bl	e2fbc <__adddf3>
   e2a84:	4602      	mov	r2, r0
   e2a86:	460b      	mov	r3, r1
   e2a88:	4650      	mov	r0, sl
   e2a8a:	4659      	mov	r1, fp
   e2a8c:	f000 fa94 	bl	e2fb8 <__aeabi_dsub>
   e2a90:	2200      	movs	r2, #0
   e2a92:	4b59      	ldr	r3, [pc, #356]	; (e2bf8 <expm1+0x380>)
   e2a94:	f000 fa92 	bl	e2fbc <__adddf3>
   e2a98:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e2a9c:	ec41 0b10 	vmov	d0, r0, r1
   e2aa0:	e01d      	b.n	e2ade <expm1+0x266>
   e2aa2:	4958      	ldr	r1, [pc, #352]	; (e2c04 <expm1+0x38c>)
   e2aa4:	428b      	cmp	r3, r1
   e2aa6:	d91d      	bls.n	e2ae4 <expm1+0x26c>
   e2aa8:	ee10 3a10 	vmov	r3, s0
   e2aac:	f3cb 0213 	ubfx	r2, fp, #0, #20
   e2ab0:	4313      	orrs	r3, r2
   e2ab2:	f040 8128 	bne.w	e2d06 <expm1+0x48e>
   e2ab6:	b194      	cbz	r4, e2ade <expm1+0x266>
   e2ab8:	ed9f 0b41 	vldr	d0, [pc, #260]	; e2bc0 <expm1+0x348>
   e2abc:	e00f      	b.n	e2ade <expm1+0x266>
   e2abe:	4650      	mov	r0, sl
   e2ac0:	4659      	mov	r1, fp
   e2ac2:	f000 fc2d 	bl	e3320 <__aeabi_dmul>
   e2ac6:	4622      	mov	r2, r4
   e2ac8:	462b      	mov	r3, r5
   e2aca:	f000 fa75 	bl	e2fb8 <__aeabi_dsub>
   e2ace:	4602      	mov	r2, r0
   e2ad0:	460b      	mov	r3, r1
   e2ad2:	4650      	mov	r0, sl
   e2ad4:	4659      	mov	r1, fp
   e2ad6:	f000 fa6f 	bl	e2fb8 <__aeabi_dsub>
   e2ada:	ec41 0b10 	vmov	d0, r0, r1
   e2ade:	b005      	add	sp, #20
   e2ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2ae4:	a338      	add	r3, pc, #224	; (adr r3, e2bc8 <expm1+0x350>)
   e2ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2aea:	ee10 0a10 	vmov	r0, s0
   e2aee:	4659      	mov	r1, fp
   e2af0:	f000 fea6 	bl	e3840 <__aeabi_dcmpgt>
   e2af4:	2800      	cmp	r0, #0
   e2af6:	f43f aecf 	beq.w	e2898 <expm1+0x20>
   e2afa:	a335      	add	r3, pc, #212	; (adr r3, e2bd0 <expm1+0x358>)
   e2afc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2b00:	4610      	mov	r0, r2
   e2b02:	4619      	mov	r1, r3
   e2b04:	f000 fc0c 	bl	e3320 <__aeabi_dmul>
   e2b08:	ec41 0b10 	vmov	d0, r0, r1
   e2b0c:	e7e7      	b.n	e2ade <expm1+0x266>
   e2b0e:	4a3e      	ldr	r2, [pc, #248]	; (e2c08 <expm1+0x390>)
   e2b10:	4293      	cmp	r3, r2
   e2b12:	f200 80d7 	bhi.w	e2cc4 <expm1+0x44c>
   e2b16:	ee10 0a10 	vmov	r0, s0
   e2b1a:	4659      	mov	r1, fp
   e2b1c:	a31a      	add	r3, pc, #104	; (adr r3, e2b88 <expm1+0x310>)
   e2b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2b22:	b1f4      	cbz	r4, e2b62 <expm1+0x2ea>
   e2b24:	f000 fa4a 	bl	e2fbc <__adddf3>
   e2b28:	f04f 33ff 	mov.w	r3, #4294967295
   e2b2c:	4680      	mov	r8, r0
   e2b2e:	4689      	mov	r9, r1
   e2b30:	9301      	str	r3, [sp, #4]
   e2b32:	a729      	add	r7, pc, #164	; (adr r7, e2bd8 <expm1+0x360>)
   e2b34:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2b38:	e6e9      	b.n	e290e <expm1+0x96>
   e2b3a:	4652      	mov	r2, sl
   e2b3c:	465b      	mov	r3, fp
   e2b3e:	f000 fa3b 	bl	e2fb8 <__aeabi_dsub>
   e2b42:	4602      	mov	r2, r0
   e2b44:	460b      	mov	r3, r1
   e2b46:	2000      	movs	r0, #0
   e2b48:	492b      	ldr	r1, [pc, #172]	; (e2bf8 <expm1+0x380>)
   e2b4a:	f000 fa35 	bl	e2fb8 <__aeabi_dsub>
   e2b4e:	9a01      	ldr	r2, [sp, #4]
   e2b50:	4b29      	ldr	r3, [pc, #164]	; (e2bf8 <expm1+0x380>)
   e2b52:	eb01 5102 	add.w	r1, r1, r2, lsl #20
   e2b56:	2200      	movs	r2, #0
   e2b58:	f000 fa2e 	bl	e2fb8 <__aeabi_dsub>
   e2b5c:	ec41 0b10 	vmov	d0, r0, r1
   e2b60:	e7bd      	b.n	e2ade <expm1+0x266>
   e2b62:	f000 fa29 	bl	e2fb8 <__aeabi_dsub>
   e2b66:	2301      	movs	r3, #1
   e2b68:	4680      	mov	r8, r0
   e2b6a:	4689      	mov	r9, r1
   e2b6c:	9301      	str	r3, [sp, #4]
   e2b6e:	a708      	add	r7, pc, #32	; (adr r7, e2b90 <expm1+0x318>)
   e2b70:	e9d7 6700 	ldrd	r6, r7, [r7]
   e2b74:	e6cb      	b.n	e290e <expm1+0x96>
   e2b76:	bf00      	nop
   e2b78:	c2f8f359 	.word	0xc2f8f359
   e2b7c:	01a56e1f 	.word	0x01a56e1f
   e2b80:	652b82fe 	.word	0x652b82fe
   e2b84:	3ff71547 	.word	0x3ff71547
   e2b88:	fee00000 	.word	0xfee00000
   e2b8c:	3fe62e42 	.word	0x3fe62e42
   e2b90:	35793c76 	.word	0x35793c76
   e2b94:	3dea39ef 	.word	0x3dea39ef
   e2b98:	6e09c32d 	.word	0x6e09c32d
   e2b9c:	be8afdb7 	.word	0xbe8afdb7
   e2ba0:	86e65239 	.word	0x86e65239
   e2ba4:	3ed0cfca 	.word	0x3ed0cfca
   e2ba8:	9eaadbb7 	.word	0x9eaadbb7
   e2bac:	3f14ce19 	.word	0x3f14ce19
   e2bb0:	19fe5585 	.word	0x19fe5585
   e2bb4:	3f5a01a0 	.word	0x3f5a01a0
   e2bb8:	111110f4 	.word	0x111110f4
   e2bbc:	3fa11111 	.word	0x3fa11111
   e2bc0:	00000000 	.word	0x00000000
   e2bc4:	bff00000 	.word	0xbff00000
   e2bc8:	fefa39ef 	.word	0xfefa39ef
   e2bcc:	40862e42 	.word	0x40862e42
   e2bd0:	8800759c 	.word	0x8800759c
   e2bd4:	7e37e43c 	.word	0x7e37e43c
   e2bd8:	35793c76 	.word	0x35793c76
   e2bdc:	bdea39ef 	.word	0xbdea39ef
   e2be0:	40436879 	.word	0x40436879
   e2be4:	40862e41 	.word	0x40862e41
   e2be8:	bfe00000 	.word	0xbfe00000
   e2bec:	3fd62e42 	.word	0x3fd62e42
   e2bf0:	3c8fffff 	.word	0x3c8fffff
   e2bf4:	3fe00000 	.word	0x3fe00000
   e2bf8:	3ff00000 	.word	0x3ff00000
   e2bfc:	40080000 	.word	0x40080000
   e2c00:	40180000 	.word	0x40180000
   e2c04:	7fefffff 	.word	0x7fefffff
   e2c08:	3ff0a2b1 	.word	0x3ff0a2b1
   e2c0c:	a349      	add	r3, pc, #292	; (adr r3, e2d34 <expm1+0x4bc>)
   e2c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2c12:	ee10 0a10 	vmov	r0, s0
   e2c16:	4659      	mov	r1, fp
   e2c18:	f000 f9d0 	bl	e2fbc <__adddf3>
   e2c1c:	4602      	mov	r2, r0
   e2c1e:	460b      	mov	r3, r1
   e2c20:	e753      	b.n	e2aca <expm1+0x252>
   e2c22:	2200      	movs	r2, #0
   e2c24:	4b40      	ldr	r3, [pc, #256]	; (e2d28 <expm1+0x4b0>)
   e2c26:	4650      	mov	r0, sl
   e2c28:	4659      	mov	r1, fp
   e2c2a:	f000 fdeb 	bl	e3804 <__aeabi_dcmplt>
   e2c2e:	2800      	cmp	r0, #0
   e2c30:	d058      	beq.n	e2ce4 <expm1+0x46c>
   e2c32:	2200      	movs	r2, #0
   e2c34:	4b3d      	ldr	r3, [pc, #244]	; (e2d2c <expm1+0x4b4>)
   e2c36:	4650      	mov	r0, sl
   e2c38:	4659      	mov	r1, fp
   e2c3a:	f000 f9bf 	bl	e2fbc <__adddf3>
   e2c3e:	4602      	mov	r2, r0
   e2c40:	460b      	mov	r3, r1
   e2c42:	4630      	mov	r0, r6
   e2c44:	4639      	mov	r1, r7
   e2c46:	f000 f9b7 	bl	e2fb8 <__aeabi_dsub>
   e2c4a:	2200      	movs	r2, #0
   e2c4c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   e2c50:	f000 fb66 	bl	e3320 <__aeabi_dmul>
   e2c54:	ec41 0b10 	vmov	d0, r0, r1
   e2c58:	e741      	b.n	e2ade <expm1+0x266>
   e2c5a:	a331      	add	r3, pc, #196	; (adr r3, e2d20 <expm1+0x4a8>)
   e2c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2c60:	4650      	mov	r0, sl
   e2c62:	4659      	mov	r1, fp
   e2c64:	f000 fb5c 	bl	e3320 <__aeabi_dmul>
   e2c68:	4602      	mov	r2, r0
   e2c6a:	460b      	mov	r3, r1
   e2c6c:	2000      	movs	r0, #0
   e2c6e:	492f      	ldr	r1, [pc, #188]	; (e2d2c <expm1+0x4b4>)
   e2c70:	e62e      	b.n	e28d0 <expm1+0x58>
   e2c72:	4602      	mov	r2, r0
   e2c74:	460b      	mov	r3, r1
   e2c76:	4650      	mov	r0, sl
   e2c78:	4659      	mov	r1, fp
   e2c7a:	f000 f99d 	bl	e2fb8 <__aeabi_dsub>
   e2c7e:	2200      	movs	r2, #0
   e2c80:	4b2a      	ldr	r3, [pc, #168]	; (e2d2c <expm1+0x4b4>)
   e2c82:	f000 fb4d 	bl	e3320 <__aeabi_dmul>
   e2c86:	2200      	movs	r2, #0
   e2c88:	4b28      	ldr	r3, [pc, #160]	; (e2d2c <expm1+0x4b4>)
   e2c8a:	f000 f995 	bl	e2fb8 <__aeabi_dsub>
   e2c8e:	ec41 0b10 	vmov	d0, r0, r1
   e2c92:	e724      	b.n	e2ade <expm1+0x266>
   e2c94:	9c01      	ldr	r4, [sp, #4]
   e2c96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   e2c9a:	4123      	asrs	r3, r4
   e2c9c:	f1c3 577f 	rsb	r7, r3, #1069547520	; 0x3fc00000
   e2ca0:	4652      	mov	r2, sl
   e2ca2:	465b      	mov	r3, fp
   e2ca4:	f000 f988 	bl	e2fb8 <__aeabi_dsub>
   e2ca8:	2600      	movs	r6, #0
   e2caa:	f507 1740 	add.w	r7, r7, #3145728	; 0x300000
   e2cae:	4602      	mov	r2, r0
   e2cb0:	460b      	mov	r3, r1
   e2cb2:	4630      	mov	r0, r6
   e2cb4:	4639      	mov	r1, r7
   e2cb6:	f000 f97f 	bl	e2fb8 <__aeabi_dsub>
   e2cba:	eb01 5104 	add.w	r1, r1, r4, lsl #20
   e2cbe:	ec41 0b10 	vmov	d0, r0, r1
   e2cc2:	e70c      	b.n	e2ade <expm1+0x266>
   e2cc4:	a316      	add	r3, pc, #88	; (adr r3, e2d20 <expm1+0x4a8>)
   e2cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2cca:	ee10 0a10 	vmov	r0, s0
   e2cce:	4659      	mov	r1, fp
   e2cd0:	f000 fb26 	bl	e3320 <__aeabi_dmul>
   e2cd4:	4602      	mov	r2, r0
   e2cd6:	460b      	mov	r3, r1
   e2cd8:	2000      	movs	r0, #0
   e2cda:	2c00      	cmp	r4, #0
   e2cdc:	f47f adf7 	bne.w	e28ce <expm1+0x56>
   e2ce0:	4912      	ldr	r1, [pc, #72]	; (e2d2c <expm1+0x4b4>)
   e2ce2:	e5f5      	b.n	e28d0 <expm1+0x58>
   e2ce4:	4632      	mov	r2, r6
   e2ce6:	463b      	mov	r3, r7
   e2ce8:	4650      	mov	r0, sl
   e2cea:	4659      	mov	r1, fp
   e2cec:	f000 f964 	bl	e2fb8 <__aeabi_dsub>
   e2cf0:	4602      	mov	r2, r0
   e2cf2:	460b      	mov	r3, r1
   e2cf4:	f000 f962 	bl	e2fbc <__adddf3>
   e2cf8:	2200      	movs	r2, #0
   e2cfa:	4b0d      	ldr	r3, [pc, #52]	; (e2d30 <expm1+0x4b8>)
   e2cfc:	f000 f95e 	bl	e2fbc <__adddf3>
   e2d00:	ec41 0b10 	vmov	d0, r0, r1
   e2d04:	e6eb      	b.n	e2ade <expm1+0x266>
   e2d06:	ee10 2a10 	vmov	r2, s0
   e2d0a:	ee10 0a10 	vmov	r0, s0
   e2d0e:	465b      	mov	r3, fp
   e2d10:	4659      	mov	r1, fp
   e2d12:	f000 f953 	bl	e2fbc <__adddf3>
   e2d16:	ec41 0b10 	vmov	d0, r0, r1
   e2d1a:	e6e0      	b.n	e2ade <expm1+0x266>
   e2d1c:	f3af 8000 	nop.w
   e2d20:	652b82fe 	.word	0x652b82fe
   e2d24:	3ff71547 	.word	0x3ff71547
   e2d28:	bfd00000 	.word	0xbfd00000
   e2d2c:	3fe00000 	.word	0x3fe00000
   e2d30:	3ff00000 	.word	0x3ff00000
   e2d34:	8800759c 	.word	0x8800759c
   e2d38:	7e37e43c 	.word	0x7e37e43c

000e2d3c <finite>:
   e2d3c:	ee10 3a90 	vmov	r3, s1
   e2d40:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   e2d44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   e2d48:	0fc0      	lsrs	r0, r0, #31
   e2d4a:	4770      	bx	lr

000e2d4c <matherr>:
   e2d4c:	2000      	movs	r0, #0
   e2d4e:	4770      	bx	lr

000e2d50 <nan>:
   e2d50:	ed9f 0b01 	vldr	d0, [pc, #4]	; e2d58 <nan+0x8>
   e2d54:	4770      	bx	lr
   e2d56:	bf00      	nop
   e2d58:	00000000 	.word	0x00000000
   e2d5c:	7ff80000 	.word	0x7ff80000

000e2d60 <rint>:
   e2d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2d62:	ec53 2b10 	vmov	r2, r3, d0
   e2d66:	f3c3 560a 	ubfx	r6, r3, #20, #11
   e2d6a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   e2d6e:	2813      	cmp	r0, #19
   e2d70:	b083      	sub	sp, #12
   e2d72:	4619      	mov	r1, r3
   e2d74:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   e2d78:	ee10 5a10 	vmov	r5, s0
   e2d7c:	dc2f      	bgt.n	e2dde <rint+0x7e>
   e2d7e:	2800      	cmp	r0, #0
   e2d80:	db49      	blt.n	e2e16 <rint+0xb6>
   e2d82:	4e3f      	ldr	r6, [pc, #252]	; (e2e80 <rint+0x120>)
   e2d84:	4106      	asrs	r6, r0
   e2d86:	ea03 0706 	and.w	r7, r3, r6
   e2d8a:	4317      	orrs	r7, r2
   e2d8c:	d02c      	beq.n	e2de8 <rint+0x88>
   e2d8e:	0876      	lsrs	r6, r6, #1
   e2d90:	4033      	ands	r3, r6
   e2d92:	431d      	orrs	r5, r3
   e2d94:	d00c      	beq.n	e2db0 <rint+0x50>
   e2d96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   e2d9a:	2813      	cmp	r0, #19
   e2d9c:	ea21 0606 	bic.w	r6, r1, r6
   e2da0:	fa43 f100 	asr.w	r1, r3, r0
   e2da4:	ea41 0106 	orr.w	r1, r1, r6
   e2da8:	bf0c      	ite	eq
   e2daa:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   e2dae:	2500      	movne	r5, #0
   e2db0:	4834      	ldr	r0, [pc, #208]	; (e2e84 <rint+0x124>)
   e2db2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   e2db6:	462a      	mov	r2, r5
   e2db8:	e9d4 4500 	ldrd	r4, r5, [r4]
   e2dbc:	4610      	mov	r0, r2
   e2dbe:	462b      	mov	r3, r5
   e2dc0:	4622      	mov	r2, r4
   e2dc2:	f000 f8fb 	bl	e2fbc <__adddf3>
   e2dc6:	e9cd 0100 	strd	r0, r1, [sp]
   e2dca:	4622      	mov	r2, r4
   e2dcc:	462b      	mov	r3, r5
   e2dce:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2dd2:	f000 f8f1 	bl	e2fb8 <__aeabi_dsub>
   e2dd6:	ec41 0b10 	vmov	d0, r0, r1
   e2dda:	b003      	add	sp, #12
   e2ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2dde:	2833      	cmp	r0, #51	; 0x33
   e2de0:	dd06      	ble.n	e2df0 <rint+0x90>
   e2de2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   e2de6:	d042      	beq.n	e2e6e <rint+0x10e>
   e2de8:	ec43 2b10 	vmov	d0, r2, r3
   e2dec:	b003      	add	sp, #12
   e2dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2df0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   e2df4:	f04f 30ff 	mov.w	r0, #4294967295
   e2df8:	40f0      	lsrs	r0, r6
   e2dfa:	4202      	tst	r2, r0
   e2dfc:	d0f4      	beq.n	e2de8 <rint+0x88>
   e2dfe:	0840      	lsrs	r0, r0, #1
   e2e00:	4202      	tst	r2, r0
   e2e02:	d0d5      	beq.n	e2db0 <rint+0x50>
   e2e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e2e08:	ea25 0000 	bic.w	r0, r5, r0
   e2e0c:	fa43 f606 	asr.w	r6, r3, r6
   e2e10:	ea46 0500 	orr.w	r5, r6, r0
   e2e14:	e7cc      	b.n	e2db0 <rint+0x50>
   e2e16:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   e2e1a:	4310      	orrs	r0, r2
   e2e1c:	ee10 7a10 	vmov	r7, s0
   e2e20:	d0e2      	beq.n	e2de8 <rint+0x88>
   e2e22:	f3c3 0013 	ubfx	r0, r3, #0, #20
   e2e26:	4307      	orrs	r7, r0
   e2e28:	4278      	negs	r0, r7
   e2e2a:	4307      	orrs	r7, r0
   e2e2c:	4815      	ldr	r0, [pc, #84]	; (e2e84 <rint+0x124>)
   e2e2e:	0c59      	lsrs	r1, r3, #17
   e2e30:	0b3f      	lsrs	r7, r7, #12
   e2e32:	0449      	lsls	r1, r1, #17
   e2e34:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   e2e38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   e2e3c:	ea47 0301 	orr.w	r3, r7, r1
   e2e40:	e9d0 6700 	ldrd	r6, r7, [r0]
   e2e44:	4619      	mov	r1, r3
   e2e46:	4610      	mov	r0, r2
   e2e48:	463b      	mov	r3, r7
   e2e4a:	4632      	mov	r2, r6
   e2e4c:	f000 f8b6 	bl	e2fbc <__adddf3>
   e2e50:	e9cd 0100 	strd	r0, r1, [sp]
   e2e54:	463b      	mov	r3, r7
   e2e56:	4632      	mov	r2, r6
   e2e58:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2e5c:	f000 f8ac 	bl	e2fb8 <__aeabi_dsub>
   e2e60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2e64:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   e2e68:	ec41 0b10 	vmov	d0, r0, r1
   e2e6c:	e7be      	b.n	e2dec <rint+0x8c>
   e2e6e:	ee10 0a10 	vmov	r0, s0
   e2e72:	4619      	mov	r1, r3
   e2e74:	f000 f8a2 	bl	e2fbc <__adddf3>
   e2e78:	ec41 0b10 	vmov	d0, r0, r1
   e2e7c:	e7b6      	b.n	e2dec <rint+0x8c>
   e2e7e:	bf00      	nop
   e2e80:	000fffff 	.word	0x000fffff
   e2e84:	000e8d78 	.word	0x000e8d78

000e2e88 <scalbn>:
   e2e88:	ec53 2b10 	vmov	r2, r3, d0
   e2e8c:	b570      	push	{r4, r5, r6, lr}
   e2e8e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e2e92:	4619      	mov	r1, r3
   e2e94:	4605      	mov	r5, r0
   e2e96:	bb14      	cbnz	r4, e2ede <scalbn+0x56>
   e2e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e2e9c:	4311      	orrs	r1, r2
   e2e9e:	d02a      	beq.n	e2ef6 <scalbn+0x6e>
   e2ea0:	4619      	mov	r1, r3
   e2ea2:	2200      	movs	r2, #0
   e2ea4:	4b38      	ldr	r3, [pc, #224]	; (e2f88 <scalbn+0x100>)
   e2ea6:	4e39      	ldr	r6, [pc, #228]	; (e2f8c <scalbn+0x104>)
   e2ea8:	ee10 0a10 	vmov	r0, s0
   e2eac:	f000 fa38 	bl	e3320 <__aeabi_dmul>
   e2eb0:	42b5      	cmp	r5, r6
   e2eb2:	4602      	mov	r2, r0
   e2eb4:	460b      	mov	r3, r1
   e2eb6:	db1f      	blt.n	e2ef8 <scalbn+0x70>
   e2eb8:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e2ebc:	3c36      	subs	r4, #54	; 0x36
   e2ebe:	442c      	add	r4, r5
   e2ec0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e2ec4:	4284      	cmp	r4, r0
   e2ec6:	dc1f      	bgt.n	e2f08 <scalbn+0x80>
   e2ec8:	2c00      	cmp	r4, #0
   e2eca:	dd2d      	ble.n	e2f28 <scalbn+0xa0>
   e2ecc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e2ed0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e2ed4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2ed8:	ec43 2b10 	vmov	d0, r2, r3
   e2edc:	bd70      	pop	{r4, r5, r6, pc}
   e2ede:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e2ee2:	4284      	cmp	r4, r0
   e2ee4:	d1eb      	bne.n	e2ebe <scalbn+0x36>
   e2ee6:	ee10 0a10 	vmov	r0, s0
   e2eea:	4619      	mov	r1, r3
   e2eec:	f000 f866 	bl	e2fbc <__adddf3>
   e2ef0:	ec41 0b10 	vmov	d0, r0, r1
   e2ef4:	bd70      	pop	{r4, r5, r6, pc}
   e2ef6:	bd70      	pop	{r4, r5, r6, pc}
   e2ef8:	a31f      	add	r3, pc, #124	; (adr r3, e2f78 <scalbn+0xf0>)
   e2efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2efe:	f000 fa0f 	bl	e3320 <__aeabi_dmul>
   e2f02:	ec41 0b10 	vmov	d0, r0, r1
   e2f06:	bd70      	pop	{r4, r5, r6, pc}
   e2f08:	ec43 2b11 	vmov	d1, r2, r3
   e2f0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e2f80 <scalbn+0xf8>
   e2f10:	f000 f840 	bl	e2f94 <copysign>
   e2f14:	a31a      	add	r3, pc, #104	; (adr r3, e2f80 <scalbn+0xf8>)
   e2f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2f1a:	ec51 0b10 	vmov	r0, r1, d0
   e2f1e:	f000 f9ff 	bl	e3320 <__aeabi_dmul>
   e2f22:	ec41 0b10 	vmov	d0, r0, r1
   e2f26:	bd70      	pop	{r4, r5, r6, pc}
   e2f28:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e2f2c:	da13      	bge.n	e2f56 <scalbn+0xce>
   e2f2e:	f24c 3150 	movw	r1, #50000	; 0xc350
   e2f32:	428d      	cmp	r5, r1
   e2f34:	ec43 2b11 	vmov	d1, r2, r3
   e2f38:	dce8      	bgt.n	e2f0c <scalbn+0x84>
   e2f3a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e2f78 <scalbn+0xf0>
   e2f3e:	f000 f829 	bl	e2f94 <copysign>
   e2f42:	a30d      	add	r3, pc, #52	; (adr r3, e2f78 <scalbn+0xf0>)
   e2f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2f48:	ec51 0b10 	vmov	r0, r1, d0
   e2f4c:	f000 f9e8 	bl	e3320 <__aeabi_dmul>
   e2f50:	ec41 0b10 	vmov	d0, r0, r1
   e2f54:	bd70      	pop	{r4, r5, r6, pc}
   e2f56:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e2f5a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e2f5e:	3436      	adds	r4, #54	; 0x36
   e2f60:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e2f64:	4610      	mov	r0, r2
   e2f66:	4619      	mov	r1, r3
   e2f68:	2200      	movs	r2, #0
   e2f6a:	4b09      	ldr	r3, [pc, #36]	; (e2f90 <scalbn+0x108>)
   e2f6c:	f000 f9d8 	bl	e3320 <__aeabi_dmul>
   e2f70:	ec41 0b10 	vmov	d0, r0, r1
   e2f74:	bd70      	pop	{r4, r5, r6, pc}
   e2f76:	bf00      	nop
   e2f78:	c2f8f359 	.word	0xc2f8f359
   e2f7c:	01a56e1f 	.word	0x01a56e1f
   e2f80:	8800759c 	.word	0x8800759c
   e2f84:	7e37e43c 	.word	0x7e37e43c
   e2f88:	43500000 	.word	0x43500000
   e2f8c:	ffff3cb0 	.word	0xffff3cb0
   e2f90:	3c900000 	.word	0x3c900000

000e2f94 <copysign>:
   e2f94:	ec53 2b10 	vmov	r2, r3, d0
   e2f98:	ee11 0a90 	vmov	r0, s3
   e2f9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e2fa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e2fa4:	ea41 0300 	orr.w	r3, r1, r0
   e2fa8:	ec43 2b10 	vmov	d0, r2, r3
   e2fac:	4770      	bx	lr
   e2fae:	bf00      	nop

000e2fb0 <__aeabi_drsub>:
   e2fb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e2fb4:	e002      	b.n	e2fbc <__adddf3>
   e2fb6:	bf00      	nop

000e2fb8 <__aeabi_dsub>:
   e2fb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e2fbc <__adddf3>:
   e2fbc:	b530      	push	{r4, r5, lr}
   e2fbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e2fc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e2fc6:	ea94 0f05 	teq	r4, r5
   e2fca:	bf08      	it	eq
   e2fcc:	ea90 0f02 	teqeq	r0, r2
   e2fd0:	bf1f      	itttt	ne
   e2fd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   e2fd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   e2fda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e2fde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e2fe2:	f000 80e2 	beq.w	e31aa <__adddf3+0x1ee>
   e2fe6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e2fea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e2fee:	bfb8      	it	lt
   e2ff0:	426d      	neglt	r5, r5
   e2ff2:	dd0c      	ble.n	e300e <__adddf3+0x52>
   e2ff4:	442c      	add	r4, r5
   e2ff6:	ea80 0202 	eor.w	r2, r0, r2
   e2ffa:	ea81 0303 	eor.w	r3, r1, r3
   e2ffe:	ea82 0000 	eor.w	r0, r2, r0
   e3002:	ea83 0101 	eor.w	r1, r3, r1
   e3006:	ea80 0202 	eor.w	r2, r0, r2
   e300a:	ea81 0303 	eor.w	r3, r1, r3
   e300e:	2d36      	cmp	r5, #54	; 0x36
   e3010:	bf88      	it	hi
   e3012:	bd30      	pophi	{r4, r5, pc}
   e3014:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e3018:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e301c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e3020:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e3024:	d002      	beq.n	e302c <__adddf3+0x70>
   e3026:	4240      	negs	r0, r0
   e3028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e302c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e3030:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e3034:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e3038:	d002      	beq.n	e3040 <__adddf3+0x84>
   e303a:	4252      	negs	r2, r2
   e303c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e3040:	ea94 0f05 	teq	r4, r5
   e3044:	f000 80a7 	beq.w	e3196 <__adddf3+0x1da>
   e3048:	f1a4 0401 	sub.w	r4, r4, #1
   e304c:	f1d5 0e20 	rsbs	lr, r5, #32
   e3050:	db0d      	blt.n	e306e <__adddf3+0xb2>
   e3052:	fa02 fc0e 	lsl.w	ip, r2, lr
   e3056:	fa22 f205 	lsr.w	r2, r2, r5
   e305a:	1880      	adds	r0, r0, r2
   e305c:	f141 0100 	adc.w	r1, r1, #0
   e3060:	fa03 f20e 	lsl.w	r2, r3, lr
   e3064:	1880      	adds	r0, r0, r2
   e3066:	fa43 f305 	asr.w	r3, r3, r5
   e306a:	4159      	adcs	r1, r3
   e306c:	e00e      	b.n	e308c <__adddf3+0xd0>
   e306e:	f1a5 0520 	sub.w	r5, r5, #32
   e3072:	f10e 0e20 	add.w	lr, lr, #32
   e3076:	2a01      	cmp	r2, #1
   e3078:	fa03 fc0e 	lsl.w	ip, r3, lr
   e307c:	bf28      	it	cs
   e307e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e3082:	fa43 f305 	asr.w	r3, r3, r5
   e3086:	18c0      	adds	r0, r0, r3
   e3088:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e308c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e3090:	d507      	bpl.n	e30a2 <__adddf3+0xe6>
   e3092:	f04f 0e00 	mov.w	lr, #0
   e3096:	f1dc 0c00 	rsbs	ip, ip, #0
   e309a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e309e:	eb6e 0101 	sbc.w	r1, lr, r1
   e30a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e30a6:	d31b      	bcc.n	e30e0 <__adddf3+0x124>
   e30a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e30ac:	d30c      	bcc.n	e30c8 <__adddf3+0x10c>
   e30ae:	0849      	lsrs	r1, r1, #1
   e30b0:	ea5f 0030 	movs.w	r0, r0, rrx
   e30b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e30b8:	f104 0401 	add.w	r4, r4, #1
   e30bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e30c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e30c4:	f080 809a 	bcs.w	e31fc <__adddf3+0x240>
   e30c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e30cc:	bf08      	it	eq
   e30ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e30d2:	f150 0000 	adcs.w	r0, r0, #0
   e30d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e30da:	ea41 0105 	orr.w	r1, r1, r5
   e30de:	bd30      	pop	{r4, r5, pc}
   e30e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e30e4:	4140      	adcs	r0, r0
   e30e6:	eb41 0101 	adc.w	r1, r1, r1
   e30ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e30ee:	f1a4 0401 	sub.w	r4, r4, #1
   e30f2:	d1e9      	bne.n	e30c8 <__adddf3+0x10c>
   e30f4:	f091 0f00 	teq	r1, #0
   e30f8:	bf04      	itt	eq
   e30fa:	4601      	moveq	r1, r0
   e30fc:	2000      	moveq	r0, #0
   e30fe:	fab1 f381 	clz	r3, r1
   e3102:	bf08      	it	eq
   e3104:	3320      	addeq	r3, #32
   e3106:	f1a3 030b 	sub.w	r3, r3, #11
   e310a:	f1b3 0220 	subs.w	r2, r3, #32
   e310e:	da0c      	bge.n	e312a <__adddf3+0x16e>
   e3110:	320c      	adds	r2, #12
   e3112:	dd08      	ble.n	e3126 <__adddf3+0x16a>
   e3114:	f102 0c14 	add.w	ip, r2, #20
   e3118:	f1c2 020c 	rsb	r2, r2, #12
   e311c:	fa01 f00c 	lsl.w	r0, r1, ip
   e3120:	fa21 f102 	lsr.w	r1, r1, r2
   e3124:	e00c      	b.n	e3140 <__adddf3+0x184>
   e3126:	f102 0214 	add.w	r2, r2, #20
   e312a:	bfd8      	it	le
   e312c:	f1c2 0c20 	rsble	ip, r2, #32
   e3130:	fa01 f102 	lsl.w	r1, r1, r2
   e3134:	fa20 fc0c 	lsr.w	ip, r0, ip
   e3138:	bfdc      	itt	le
   e313a:	ea41 010c 	orrle.w	r1, r1, ip
   e313e:	4090      	lslle	r0, r2
   e3140:	1ae4      	subs	r4, r4, r3
   e3142:	bfa2      	ittt	ge
   e3144:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e3148:	4329      	orrge	r1, r5
   e314a:	bd30      	popge	{r4, r5, pc}
   e314c:	ea6f 0404 	mvn.w	r4, r4
   e3150:	3c1f      	subs	r4, #31
   e3152:	da1c      	bge.n	e318e <__adddf3+0x1d2>
   e3154:	340c      	adds	r4, #12
   e3156:	dc0e      	bgt.n	e3176 <__adddf3+0x1ba>
   e3158:	f104 0414 	add.w	r4, r4, #20
   e315c:	f1c4 0220 	rsb	r2, r4, #32
   e3160:	fa20 f004 	lsr.w	r0, r0, r4
   e3164:	fa01 f302 	lsl.w	r3, r1, r2
   e3168:	ea40 0003 	orr.w	r0, r0, r3
   e316c:	fa21 f304 	lsr.w	r3, r1, r4
   e3170:	ea45 0103 	orr.w	r1, r5, r3
   e3174:	bd30      	pop	{r4, r5, pc}
   e3176:	f1c4 040c 	rsb	r4, r4, #12
   e317a:	f1c4 0220 	rsb	r2, r4, #32
   e317e:	fa20 f002 	lsr.w	r0, r0, r2
   e3182:	fa01 f304 	lsl.w	r3, r1, r4
   e3186:	ea40 0003 	orr.w	r0, r0, r3
   e318a:	4629      	mov	r1, r5
   e318c:	bd30      	pop	{r4, r5, pc}
   e318e:	fa21 f004 	lsr.w	r0, r1, r4
   e3192:	4629      	mov	r1, r5
   e3194:	bd30      	pop	{r4, r5, pc}
   e3196:	f094 0f00 	teq	r4, #0
   e319a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e319e:	bf06      	itte	eq
   e31a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e31a4:	3401      	addeq	r4, #1
   e31a6:	3d01      	subne	r5, #1
   e31a8:	e74e      	b.n	e3048 <__adddf3+0x8c>
   e31aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e31ae:	bf18      	it	ne
   e31b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e31b4:	d029      	beq.n	e320a <__adddf3+0x24e>
   e31b6:	ea94 0f05 	teq	r4, r5
   e31ba:	bf08      	it	eq
   e31bc:	ea90 0f02 	teqeq	r0, r2
   e31c0:	d005      	beq.n	e31ce <__adddf3+0x212>
   e31c2:	ea54 0c00 	orrs.w	ip, r4, r0
   e31c6:	bf04      	itt	eq
   e31c8:	4619      	moveq	r1, r3
   e31ca:	4610      	moveq	r0, r2
   e31cc:	bd30      	pop	{r4, r5, pc}
   e31ce:	ea91 0f03 	teq	r1, r3
   e31d2:	bf1e      	ittt	ne
   e31d4:	2100      	movne	r1, #0
   e31d6:	2000      	movne	r0, #0
   e31d8:	bd30      	popne	{r4, r5, pc}
   e31da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e31de:	d105      	bne.n	e31ec <__adddf3+0x230>
   e31e0:	0040      	lsls	r0, r0, #1
   e31e2:	4149      	adcs	r1, r1
   e31e4:	bf28      	it	cs
   e31e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e31ea:	bd30      	pop	{r4, r5, pc}
   e31ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e31f0:	bf3c      	itt	cc
   e31f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e31f6:	bd30      	popcc	{r4, r5, pc}
   e31f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e31fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e3200:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e3204:	f04f 0000 	mov.w	r0, #0
   e3208:	bd30      	pop	{r4, r5, pc}
   e320a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e320e:	bf1a      	itte	ne
   e3210:	4619      	movne	r1, r3
   e3212:	4610      	movne	r0, r2
   e3214:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e3218:	bf1c      	itt	ne
   e321a:	460b      	movne	r3, r1
   e321c:	4602      	movne	r2, r0
   e321e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e3222:	bf06      	itte	eq
   e3224:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e3228:	ea91 0f03 	teqeq	r1, r3
   e322c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e3230:	bd30      	pop	{r4, r5, pc}
   e3232:	bf00      	nop

000e3234 <__aeabi_ui2d>:
   e3234:	f090 0f00 	teq	r0, #0
   e3238:	bf04      	itt	eq
   e323a:	2100      	moveq	r1, #0
   e323c:	4770      	bxeq	lr
   e323e:	b530      	push	{r4, r5, lr}
   e3240:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e3244:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e3248:	f04f 0500 	mov.w	r5, #0
   e324c:	f04f 0100 	mov.w	r1, #0
   e3250:	e750      	b.n	e30f4 <__adddf3+0x138>
   e3252:	bf00      	nop

000e3254 <__aeabi_i2d>:
   e3254:	f090 0f00 	teq	r0, #0
   e3258:	bf04      	itt	eq
   e325a:	2100      	moveq	r1, #0
   e325c:	4770      	bxeq	lr
   e325e:	b530      	push	{r4, r5, lr}
   e3260:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e3264:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e3268:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e326c:	bf48      	it	mi
   e326e:	4240      	negmi	r0, r0
   e3270:	f04f 0100 	mov.w	r1, #0
   e3274:	e73e      	b.n	e30f4 <__adddf3+0x138>
   e3276:	bf00      	nop

000e3278 <__aeabi_f2d>:
   e3278:	0042      	lsls	r2, r0, #1
   e327a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e327e:	ea4f 0131 	mov.w	r1, r1, rrx
   e3282:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e3286:	bf1f      	itttt	ne
   e3288:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e328c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e3290:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e3294:	4770      	bxne	lr
   e3296:	f092 0f00 	teq	r2, #0
   e329a:	bf14      	ite	ne
   e329c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e32a0:	4770      	bxeq	lr
   e32a2:	b530      	push	{r4, r5, lr}
   e32a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   e32a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e32ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e32b0:	e720      	b.n	e30f4 <__adddf3+0x138>
   e32b2:	bf00      	nop

000e32b4 <__aeabi_ul2d>:
   e32b4:	ea50 0201 	orrs.w	r2, r0, r1
   e32b8:	bf08      	it	eq
   e32ba:	4770      	bxeq	lr
   e32bc:	b530      	push	{r4, r5, lr}
   e32be:	f04f 0500 	mov.w	r5, #0
   e32c2:	e00a      	b.n	e32da <__aeabi_l2d+0x16>

000e32c4 <__aeabi_l2d>:
   e32c4:	ea50 0201 	orrs.w	r2, r0, r1
   e32c8:	bf08      	it	eq
   e32ca:	4770      	bxeq	lr
   e32cc:	b530      	push	{r4, r5, lr}
   e32ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e32d2:	d502      	bpl.n	e32da <__aeabi_l2d+0x16>
   e32d4:	4240      	negs	r0, r0
   e32d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e32da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e32de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e32e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e32e6:	f43f aedc 	beq.w	e30a2 <__adddf3+0xe6>
   e32ea:	f04f 0203 	mov.w	r2, #3
   e32ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e32f2:	bf18      	it	ne
   e32f4:	3203      	addne	r2, #3
   e32f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e32fa:	bf18      	it	ne
   e32fc:	3203      	addne	r2, #3
   e32fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e3302:	f1c2 0320 	rsb	r3, r2, #32
   e3306:	fa00 fc03 	lsl.w	ip, r0, r3
   e330a:	fa20 f002 	lsr.w	r0, r0, r2
   e330e:	fa01 fe03 	lsl.w	lr, r1, r3
   e3312:	ea40 000e 	orr.w	r0, r0, lr
   e3316:	fa21 f102 	lsr.w	r1, r1, r2
   e331a:	4414      	add	r4, r2
   e331c:	e6c1      	b.n	e30a2 <__adddf3+0xe6>
   e331e:	bf00      	nop

000e3320 <__aeabi_dmul>:
   e3320:	b570      	push	{r4, r5, r6, lr}
   e3322:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e3326:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e332a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e332e:	bf1d      	ittte	ne
   e3330:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e3334:	ea94 0f0c 	teqne	r4, ip
   e3338:	ea95 0f0c 	teqne	r5, ip
   e333c:	f000 f8de 	bleq	e34fc <__aeabi_dmul+0x1dc>
   e3340:	442c      	add	r4, r5
   e3342:	ea81 0603 	eor.w	r6, r1, r3
   e3346:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e334a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e334e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e3352:	bf18      	it	ne
   e3354:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e3358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e335c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e3360:	d038      	beq.n	e33d4 <__aeabi_dmul+0xb4>
   e3362:	fba0 ce02 	umull	ip, lr, r0, r2
   e3366:	f04f 0500 	mov.w	r5, #0
   e336a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e336e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e3372:	fbe0 e503 	umlal	lr, r5, r0, r3
   e3376:	f04f 0600 	mov.w	r6, #0
   e337a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e337e:	f09c 0f00 	teq	ip, #0
   e3382:	bf18      	it	ne
   e3384:	f04e 0e01 	orrne.w	lr, lr, #1
   e3388:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e338c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e3390:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e3394:	d204      	bcs.n	e33a0 <__aeabi_dmul+0x80>
   e3396:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e339a:	416d      	adcs	r5, r5
   e339c:	eb46 0606 	adc.w	r6, r6, r6
   e33a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e33a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e33a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e33ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e33b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e33b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e33b8:	bf88      	it	hi
   e33ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e33be:	d81e      	bhi.n	e33fe <__aeabi_dmul+0xde>
   e33c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e33c4:	bf08      	it	eq
   e33c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e33ca:	f150 0000 	adcs.w	r0, r0, #0
   e33ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e33d2:	bd70      	pop	{r4, r5, r6, pc}
   e33d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e33d8:	ea46 0101 	orr.w	r1, r6, r1
   e33dc:	ea40 0002 	orr.w	r0, r0, r2
   e33e0:	ea81 0103 	eor.w	r1, r1, r3
   e33e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e33e8:	bfc2      	ittt	gt
   e33ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   e33ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e33f2:	bd70      	popgt	{r4, r5, r6, pc}
   e33f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e33f8:	f04f 0e00 	mov.w	lr, #0
   e33fc:	3c01      	subs	r4, #1
   e33fe:	f300 80ab 	bgt.w	e3558 <__aeabi_dmul+0x238>
   e3402:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e3406:	bfde      	ittt	le
   e3408:	2000      	movle	r0, #0
   e340a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e340e:	bd70      	pople	{r4, r5, r6, pc}
   e3410:	f1c4 0400 	rsb	r4, r4, #0
   e3414:	3c20      	subs	r4, #32
   e3416:	da35      	bge.n	e3484 <__aeabi_dmul+0x164>
   e3418:	340c      	adds	r4, #12
   e341a:	dc1b      	bgt.n	e3454 <__aeabi_dmul+0x134>
   e341c:	f104 0414 	add.w	r4, r4, #20
   e3420:	f1c4 0520 	rsb	r5, r4, #32
   e3424:	fa00 f305 	lsl.w	r3, r0, r5
   e3428:	fa20 f004 	lsr.w	r0, r0, r4
   e342c:	fa01 f205 	lsl.w	r2, r1, r5
   e3430:	ea40 0002 	orr.w	r0, r0, r2
   e3434:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e3438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e343c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e3440:	fa21 f604 	lsr.w	r6, r1, r4
   e3444:	eb42 0106 	adc.w	r1, r2, r6
   e3448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e344c:	bf08      	it	eq
   e344e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e3452:	bd70      	pop	{r4, r5, r6, pc}
   e3454:	f1c4 040c 	rsb	r4, r4, #12
   e3458:	f1c4 0520 	rsb	r5, r4, #32
   e345c:	fa00 f304 	lsl.w	r3, r0, r4
   e3460:	fa20 f005 	lsr.w	r0, r0, r5
   e3464:	fa01 f204 	lsl.w	r2, r1, r4
   e3468:	ea40 0002 	orr.w	r0, r0, r2
   e346c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e3470:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e3474:	f141 0100 	adc.w	r1, r1, #0
   e3478:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e347c:	bf08      	it	eq
   e347e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e3482:	bd70      	pop	{r4, r5, r6, pc}
   e3484:	f1c4 0520 	rsb	r5, r4, #32
   e3488:	fa00 f205 	lsl.w	r2, r0, r5
   e348c:	ea4e 0e02 	orr.w	lr, lr, r2
   e3490:	fa20 f304 	lsr.w	r3, r0, r4
   e3494:	fa01 f205 	lsl.w	r2, r1, r5
   e3498:	ea43 0302 	orr.w	r3, r3, r2
   e349c:	fa21 f004 	lsr.w	r0, r1, r4
   e34a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e34a4:	fa21 f204 	lsr.w	r2, r1, r4
   e34a8:	ea20 0002 	bic.w	r0, r0, r2
   e34ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e34b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e34b4:	bf08      	it	eq
   e34b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e34ba:	bd70      	pop	{r4, r5, r6, pc}
   e34bc:	f094 0f00 	teq	r4, #0
   e34c0:	d10f      	bne.n	e34e2 <__aeabi_dmul+0x1c2>
   e34c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e34c6:	0040      	lsls	r0, r0, #1
   e34c8:	eb41 0101 	adc.w	r1, r1, r1
   e34cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e34d0:	bf08      	it	eq
   e34d2:	3c01      	subeq	r4, #1
   e34d4:	d0f7      	beq.n	e34c6 <__aeabi_dmul+0x1a6>
   e34d6:	ea41 0106 	orr.w	r1, r1, r6
   e34da:	f095 0f00 	teq	r5, #0
   e34de:	bf18      	it	ne
   e34e0:	4770      	bxne	lr
   e34e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e34e6:	0052      	lsls	r2, r2, #1
   e34e8:	eb43 0303 	adc.w	r3, r3, r3
   e34ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e34f0:	bf08      	it	eq
   e34f2:	3d01      	subeq	r5, #1
   e34f4:	d0f7      	beq.n	e34e6 <__aeabi_dmul+0x1c6>
   e34f6:	ea43 0306 	orr.w	r3, r3, r6
   e34fa:	4770      	bx	lr
   e34fc:	ea94 0f0c 	teq	r4, ip
   e3500:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e3504:	bf18      	it	ne
   e3506:	ea95 0f0c 	teqne	r5, ip
   e350a:	d00c      	beq.n	e3526 <__aeabi_dmul+0x206>
   e350c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e3510:	bf18      	it	ne
   e3512:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e3516:	d1d1      	bne.n	e34bc <__aeabi_dmul+0x19c>
   e3518:	ea81 0103 	eor.w	r1, r1, r3
   e351c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e3520:	f04f 0000 	mov.w	r0, #0
   e3524:	bd70      	pop	{r4, r5, r6, pc}
   e3526:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e352a:	bf06      	itte	eq
   e352c:	4610      	moveq	r0, r2
   e352e:	4619      	moveq	r1, r3
   e3530:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e3534:	d019      	beq.n	e356a <__aeabi_dmul+0x24a>
   e3536:	ea94 0f0c 	teq	r4, ip
   e353a:	d102      	bne.n	e3542 <__aeabi_dmul+0x222>
   e353c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e3540:	d113      	bne.n	e356a <__aeabi_dmul+0x24a>
   e3542:	ea95 0f0c 	teq	r5, ip
   e3546:	d105      	bne.n	e3554 <__aeabi_dmul+0x234>
   e3548:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e354c:	bf1c      	itt	ne
   e354e:	4610      	movne	r0, r2
   e3550:	4619      	movne	r1, r3
   e3552:	d10a      	bne.n	e356a <__aeabi_dmul+0x24a>
   e3554:	ea81 0103 	eor.w	r1, r1, r3
   e3558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e355c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e3560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e3564:	f04f 0000 	mov.w	r0, #0
   e3568:	bd70      	pop	{r4, r5, r6, pc}
   e356a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e356e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e3572:	bd70      	pop	{r4, r5, r6, pc}

000e3574 <__aeabi_ddiv>:
   e3574:	b570      	push	{r4, r5, r6, lr}
   e3576:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e357a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e357e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e3582:	bf1d      	ittte	ne
   e3584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e3588:	ea94 0f0c 	teqne	r4, ip
   e358c:	ea95 0f0c 	teqne	r5, ip
   e3590:	f000 f8a7 	bleq	e36e2 <__aeabi_ddiv+0x16e>
   e3594:	eba4 0405 	sub.w	r4, r4, r5
   e3598:	ea81 0e03 	eor.w	lr, r1, r3
   e359c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e35a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e35a4:	f000 8088 	beq.w	e36b8 <__aeabi_ddiv+0x144>
   e35a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e35ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e35b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e35b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e35b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e35bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e35c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e35c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e35c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e35cc:	429d      	cmp	r5, r3
   e35ce:	bf08      	it	eq
   e35d0:	4296      	cmpeq	r6, r2
   e35d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e35d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e35da:	d202      	bcs.n	e35e2 <__aeabi_ddiv+0x6e>
   e35dc:	085b      	lsrs	r3, r3, #1
   e35de:	ea4f 0232 	mov.w	r2, r2, rrx
   e35e2:	1ab6      	subs	r6, r6, r2
   e35e4:	eb65 0503 	sbc.w	r5, r5, r3
   e35e8:	085b      	lsrs	r3, r3, #1
   e35ea:	ea4f 0232 	mov.w	r2, r2, rrx
   e35ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e35f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e35f6:	ebb6 0e02 	subs.w	lr, r6, r2
   e35fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e35fe:	bf22      	ittt	cs
   e3600:	1ab6      	subcs	r6, r6, r2
   e3602:	4675      	movcs	r5, lr
   e3604:	ea40 000c 	orrcs.w	r0, r0, ip
   e3608:	085b      	lsrs	r3, r3, #1
   e360a:	ea4f 0232 	mov.w	r2, r2, rrx
   e360e:	ebb6 0e02 	subs.w	lr, r6, r2
   e3612:	eb75 0e03 	sbcs.w	lr, r5, r3
   e3616:	bf22      	ittt	cs
   e3618:	1ab6      	subcs	r6, r6, r2
   e361a:	4675      	movcs	r5, lr
   e361c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e3620:	085b      	lsrs	r3, r3, #1
   e3622:	ea4f 0232 	mov.w	r2, r2, rrx
   e3626:	ebb6 0e02 	subs.w	lr, r6, r2
   e362a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e362e:	bf22      	ittt	cs
   e3630:	1ab6      	subcs	r6, r6, r2
   e3632:	4675      	movcs	r5, lr
   e3634:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e3638:	085b      	lsrs	r3, r3, #1
   e363a:	ea4f 0232 	mov.w	r2, r2, rrx
   e363e:	ebb6 0e02 	subs.w	lr, r6, r2
   e3642:	eb75 0e03 	sbcs.w	lr, r5, r3
   e3646:	bf22      	ittt	cs
   e3648:	1ab6      	subcs	r6, r6, r2
   e364a:	4675      	movcs	r5, lr
   e364c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e3650:	ea55 0e06 	orrs.w	lr, r5, r6
   e3654:	d018      	beq.n	e3688 <__aeabi_ddiv+0x114>
   e3656:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e365a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e365e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e3662:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e3666:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e366a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e366e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e3672:	d1c0      	bne.n	e35f6 <__aeabi_ddiv+0x82>
   e3674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e3678:	d10b      	bne.n	e3692 <__aeabi_ddiv+0x11e>
   e367a:	ea41 0100 	orr.w	r1, r1, r0
   e367e:	f04f 0000 	mov.w	r0, #0
   e3682:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e3686:	e7b6      	b.n	e35f6 <__aeabi_ddiv+0x82>
   e3688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e368c:	bf04      	itt	eq
   e368e:	4301      	orreq	r1, r0
   e3690:	2000      	moveq	r0, #0
   e3692:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e3696:	bf88      	it	hi
   e3698:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e369c:	f63f aeaf 	bhi.w	e33fe <__aeabi_dmul+0xde>
   e36a0:	ebb5 0c03 	subs.w	ip, r5, r3
   e36a4:	bf04      	itt	eq
   e36a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e36aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e36ae:	f150 0000 	adcs.w	r0, r0, #0
   e36b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e36b6:	bd70      	pop	{r4, r5, r6, pc}
   e36b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e36bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e36c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e36c4:	bfc2      	ittt	gt
   e36c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   e36ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e36ce:	bd70      	popgt	{r4, r5, r6, pc}
   e36d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e36d4:	f04f 0e00 	mov.w	lr, #0
   e36d8:	3c01      	subs	r4, #1
   e36da:	e690      	b.n	e33fe <__aeabi_dmul+0xde>
   e36dc:	ea45 0e06 	orr.w	lr, r5, r6
   e36e0:	e68d      	b.n	e33fe <__aeabi_dmul+0xde>
   e36e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e36e6:	ea94 0f0c 	teq	r4, ip
   e36ea:	bf08      	it	eq
   e36ec:	ea95 0f0c 	teqeq	r5, ip
   e36f0:	f43f af3b 	beq.w	e356a <__aeabi_dmul+0x24a>
   e36f4:	ea94 0f0c 	teq	r4, ip
   e36f8:	d10a      	bne.n	e3710 <__aeabi_ddiv+0x19c>
   e36fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e36fe:	f47f af34 	bne.w	e356a <__aeabi_dmul+0x24a>
   e3702:	ea95 0f0c 	teq	r5, ip
   e3706:	f47f af25 	bne.w	e3554 <__aeabi_dmul+0x234>
   e370a:	4610      	mov	r0, r2
   e370c:	4619      	mov	r1, r3
   e370e:	e72c      	b.n	e356a <__aeabi_dmul+0x24a>
   e3710:	ea95 0f0c 	teq	r5, ip
   e3714:	d106      	bne.n	e3724 <__aeabi_ddiv+0x1b0>
   e3716:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e371a:	f43f aefd 	beq.w	e3518 <__aeabi_dmul+0x1f8>
   e371e:	4610      	mov	r0, r2
   e3720:	4619      	mov	r1, r3
   e3722:	e722      	b.n	e356a <__aeabi_dmul+0x24a>
   e3724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e3728:	bf18      	it	ne
   e372a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e372e:	f47f aec5 	bne.w	e34bc <__aeabi_dmul+0x19c>
   e3732:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e3736:	f47f af0d 	bne.w	e3554 <__aeabi_dmul+0x234>
   e373a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e373e:	f47f aeeb 	bne.w	e3518 <__aeabi_dmul+0x1f8>
   e3742:	e712      	b.n	e356a <__aeabi_dmul+0x24a>

000e3744 <__gedf2>:
   e3744:	f04f 3cff 	mov.w	ip, #4294967295
   e3748:	e006      	b.n	e3758 <__cmpdf2+0x4>
   e374a:	bf00      	nop

000e374c <__ledf2>:
   e374c:	f04f 0c01 	mov.w	ip, #1
   e3750:	e002      	b.n	e3758 <__cmpdf2+0x4>
   e3752:	bf00      	nop

000e3754 <__cmpdf2>:
   e3754:	f04f 0c01 	mov.w	ip, #1
   e3758:	f84d cd04 	str.w	ip, [sp, #-4]!
   e375c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e3764:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3768:	bf18      	it	ne
   e376a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e376e:	d01b      	beq.n	e37a8 <__cmpdf2+0x54>
   e3770:	b001      	add	sp, #4
   e3772:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e3776:	bf0c      	ite	eq
   e3778:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e377c:	ea91 0f03 	teqne	r1, r3
   e3780:	bf02      	ittt	eq
   e3782:	ea90 0f02 	teqeq	r0, r2
   e3786:	2000      	moveq	r0, #0
   e3788:	4770      	bxeq	lr
   e378a:	f110 0f00 	cmn.w	r0, #0
   e378e:	ea91 0f03 	teq	r1, r3
   e3792:	bf58      	it	pl
   e3794:	4299      	cmppl	r1, r3
   e3796:	bf08      	it	eq
   e3798:	4290      	cmpeq	r0, r2
   e379a:	bf2c      	ite	cs
   e379c:	17d8      	asrcs	r0, r3, #31
   e379e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e37a2:	f040 0001 	orr.w	r0, r0, #1
   e37a6:	4770      	bx	lr
   e37a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e37ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e37b0:	d102      	bne.n	e37b8 <__cmpdf2+0x64>
   e37b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e37b6:	d107      	bne.n	e37c8 <__cmpdf2+0x74>
   e37b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e37bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e37c0:	d1d6      	bne.n	e3770 <__cmpdf2+0x1c>
   e37c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e37c6:	d0d3      	beq.n	e3770 <__cmpdf2+0x1c>
   e37c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   e37cc:	4770      	bx	lr
   e37ce:	bf00      	nop

000e37d0 <__aeabi_cdrcmple>:
   e37d0:	4684      	mov	ip, r0
   e37d2:	4610      	mov	r0, r2
   e37d4:	4662      	mov	r2, ip
   e37d6:	468c      	mov	ip, r1
   e37d8:	4619      	mov	r1, r3
   e37da:	4663      	mov	r3, ip
   e37dc:	e000      	b.n	e37e0 <__aeabi_cdcmpeq>
   e37de:	bf00      	nop

000e37e0 <__aeabi_cdcmpeq>:
   e37e0:	b501      	push	{r0, lr}
   e37e2:	f7ff ffb7 	bl	e3754 <__cmpdf2>
   e37e6:	2800      	cmp	r0, #0
   e37e8:	bf48      	it	mi
   e37ea:	f110 0f00 	cmnmi.w	r0, #0
   e37ee:	bd01      	pop	{r0, pc}

000e37f0 <__aeabi_dcmpeq>:
   e37f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e37f4:	f7ff fff4 	bl	e37e0 <__aeabi_cdcmpeq>
   e37f8:	bf0c      	ite	eq
   e37fa:	2001      	moveq	r0, #1
   e37fc:	2000      	movne	r0, #0
   e37fe:	f85d fb08 	ldr.w	pc, [sp], #8
   e3802:	bf00      	nop

000e3804 <__aeabi_dcmplt>:
   e3804:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3808:	f7ff ffea 	bl	e37e0 <__aeabi_cdcmpeq>
   e380c:	bf34      	ite	cc
   e380e:	2001      	movcc	r0, #1
   e3810:	2000      	movcs	r0, #0
   e3812:	f85d fb08 	ldr.w	pc, [sp], #8
   e3816:	bf00      	nop

000e3818 <__aeabi_dcmple>:
   e3818:	f84d ed08 	str.w	lr, [sp, #-8]!
   e381c:	f7ff ffe0 	bl	e37e0 <__aeabi_cdcmpeq>
   e3820:	bf94      	ite	ls
   e3822:	2001      	movls	r0, #1
   e3824:	2000      	movhi	r0, #0
   e3826:	f85d fb08 	ldr.w	pc, [sp], #8
   e382a:	bf00      	nop

000e382c <__aeabi_dcmpge>:
   e382c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3830:	f7ff ffce 	bl	e37d0 <__aeabi_cdrcmple>
   e3834:	bf94      	ite	ls
   e3836:	2001      	movls	r0, #1
   e3838:	2000      	movhi	r0, #0
   e383a:	f85d fb08 	ldr.w	pc, [sp], #8
   e383e:	bf00      	nop

000e3840 <__aeabi_dcmpgt>:
   e3840:	f84d ed08 	str.w	lr, [sp, #-8]!
   e3844:	f7ff ffc4 	bl	e37d0 <__aeabi_cdrcmple>
   e3848:	bf34      	ite	cc
   e384a:	2001      	movcc	r0, #1
   e384c:	2000      	movcs	r0, #0
   e384e:	f85d fb08 	ldr.w	pc, [sp], #8
   e3852:	bf00      	nop

000e3854 <__aeabi_dcmpun>:
   e3854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e3858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e385c:	d102      	bne.n	e3864 <__aeabi_dcmpun+0x10>
   e385e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e3862:	d10a      	bne.n	e387a <__aeabi_dcmpun+0x26>
   e3864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e3868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e386c:	d102      	bne.n	e3874 <__aeabi_dcmpun+0x20>
   e386e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e3872:	d102      	bne.n	e387a <__aeabi_dcmpun+0x26>
   e3874:	f04f 0000 	mov.w	r0, #0
   e3878:	4770      	bx	lr
   e387a:	f04f 0001 	mov.w	r0, #1
   e387e:	4770      	bx	lr

000e3880 <__aeabi_d2iz>:
   e3880:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e3884:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e3888:	d215      	bcs.n	e38b6 <__aeabi_d2iz+0x36>
   e388a:	d511      	bpl.n	e38b0 <__aeabi_d2iz+0x30>
   e388c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e3890:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e3894:	d912      	bls.n	e38bc <__aeabi_d2iz+0x3c>
   e3896:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e389a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e389e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e38a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e38a6:	fa23 f002 	lsr.w	r0, r3, r2
   e38aa:	bf18      	it	ne
   e38ac:	4240      	negne	r0, r0
   e38ae:	4770      	bx	lr
   e38b0:	f04f 0000 	mov.w	r0, #0
   e38b4:	4770      	bx	lr
   e38b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e38ba:	d105      	bne.n	e38c8 <__aeabi_d2iz+0x48>
   e38bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e38c0:	bf08      	it	eq
   e38c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e38c6:	4770      	bx	lr
   e38c8:	f04f 0000 	mov.w	r0, #0
   e38cc:	4770      	bx	lr
   e38ce:	bf00      	nop

000e38d0 <__aeabi_d2uiz>:
   e38d0:	004a      	lsls	r2, r1, #1
   e38d2:	d211      	bcs.n	e38f8 <__aeabi_d2uiz+0x28>
   e38d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e38d8:	d211      	bcs.n	e38fe <__aeabi_d2uiz+0x2e>
   e38da:	d50d      	bpl.n	e38f8 <__aeabi_d2uiz+0x28>
   e38dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e38e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e38e4:	d40e      	bmi.n	e3904 <__aeabi_d2uiz+0x34>
   e38e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e38ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e38ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e38f2:	fa23 f002 	lsr.w	r0, r3, r2
   e38f6:	4770      	bx	lr
   e38f8:	f04f 0000 	mov.w	r0, #0
   e38fc:	4770      	bx	lr
   e38fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e3902:	d102      	bne.n	e390a <__aeabi_d2uiz+0x3a>
   e3904:	f04f 30ff 	mov.w	r0, #4294967295
   e3908:	4770      	bx	lr
   e390a:	f04f 0000 	mov.w	r0, #0
   e390e:	4770      	bx	lr

000e3910 <__aeabi_d2f>:
   e3910:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e3914:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e3918:	bf24      	itt	cs
   e391a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e391e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e3922:	d90d      	bls.n	e3940 <__aeabi_d2f+0x30>
   e3924:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e3928:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e392c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e3930:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e3934:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e3938:	bf08      	it	eq
   e393a:	f020 0001 	biceq.w	r0, r0, #1
   e393e:	4770      	bx	lr
   e3940:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e3944:	d121      	bne.n	e398a <__aeabi_d2f+0x7a>
   e3946:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e394a:	bfbc      	itt	lt
   e394c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e3950:	4770      	bxlt	lr
   e3952:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e3956:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e395a:	f1c2 0218 	rsb	r2, r2, #24
   e395e:	f1c2 0c20 	rsb	ip, r2, #32
   e3962:	fa10 f30c 	lsls.w	r3, r0, ip
   e3966:	fa20 f002 	lsr.w	r0, r0, r2
   e396a:	bf18      	it	ne
   e396c:	f040 0001 	orrne.w	r0, r0, #1
   e3970:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e3974:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e3978:	fa03 fc0c 	lsl.w	ip, r3, ip
   e397c:	ea40 000c 	orr.w	r0, r0, ip
   e3980:	fa23 f302 	lsr.w	r3, r3, r2
   e3984:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e3988:	e7cc      	b.n	e3924 <__aeabi_d2f+0x14>
   e398a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e398e:	d107      	bne.n	e39a0 <__aeabi_d2f+0x90>
   e3990:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e3994:	bf1e      	ittt	ne
   e3996:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e399a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e399e:	4770      	bxne	lr
   e39a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e39a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e39a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e39ac:	4770      	bx	lr
   e39ae:	bf00      	nop

000e39b0 <__aeabi_uldivmod>:
   e39b0:	b953      	cbnz	r3, e39c8 <__aeabi_uldivmod+0x18>
   e39b2:	b94a      	cbnz	r2, e39c8 <__aeabi_uldivmod+0x18>
   e39b4:	2900      	cmp	r1, #0
   e39b6:	bf08      	it	eq
   e39b8:	2800      	cmpeq	r0, #0
   e39ba:	bf1c      	itt	ne
   e39bc:	f04f 31ff 	movne.w	r1, #4294967295
   e39c0:	f04f 30ff 	movne.w	r0, #4294967295
   e39c4:	f000 b9a2 	b.w	e3d0c <__aeabi_idiv0>
   e39c8:	f1ad 0c08 	sub.w	ip, sp, #8
   e39cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e39d0:	f000 f82a 	bl	e3a28 <__udivmoddi4>
   e39d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   e39d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e39dc:	b004      	add	sp, #16
   e39de:	4770      	bx	lr

000e39e0 <__aeabi_d2ulz>:
   e39e0:	b5d0      	push	{r4, r6, r7, lr}
   e39e2:	2200      	movs	r2, #0
   e39e4:	4b0e      	ldr	r3, [pc, #56]	; (e3a20 <__aeabi_d2ulz+0x40>)
   e39e6:	4606      	mov	r6, r0
   e39e8:	460f      	mov	r7, r1
   e39ea:	f7ff fc99 	bl	e3320 <__aeabi_dmul>
   e39ee:	f7ff ff6f 	bl	e38d0 <__aeabi_d2uiz>
   e39f2:	4604      	mov	r4, r0
   e39f4:	f7ff fc1e 	bl	e3234 <__aeabi_ui2d>
   e39f8:	2200      	movs	r2, #0
   e39fa:	4b0a      	ldr	r3, [pc, #40]	; (e3a24 <__aeabi_d2ulz+0x44>)
   e39fc:	f7ff fc90 	bl	e3320 <__aeabi_dmul>
   e3a00:	4602      	mov	r2, r0
   e3a02:	460b      	mov	r3, r1
   e3a04:	4630      	mov	r0, r6
   e3a06:	4639      	mov	r1, r7
   e3a08:	f7ff fad6 	bl	e2fb8 <__aeabi_dsub>
   e3a0c:	f7ff ff60 	bl	e38d0 <__aeabi_d2uiz>
   e3a10:	4623      	mov	r3, r4
   e3a12:	2200      	movs	r2, #0
   e3a14:	ea42 0200 	orr.w	r2, r2, r0
   e3a18:	4610      	mov	r0, r2
   e3a1a:	4619      	mov	r1, r3
   e3a1c:	bdd0      	pop	{r4, r6, r7, pc}
   e3a1e:	bf00      	nop
   e3a20:	3df00000 	.word	0x3df00000
   e3a24:	41f00000 	.word	0x41f00000

000e3a28 <__udivmoddi4>:
   e3a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3a2c:	468c      	mov	ip, r1
   e3a2e:	460e      	mov	r6, r1
   e3a30:	4604      	mov	r4, r0
   e3a32:	9d08      	ldr	r5, [sp, #32]
   e3a34:	2b00      	cmp	r3, #0
   e3a36:	d150      	bne.n	e3ada <__udivmoddi4+0xb2>
   e3a38:	428a      	cmp	r2, r1
   e3a3a:	4617      	mov	r7, r2
   e3a3c:	d96c      	bls.n	e3b18 <__udivmoddi4+0xf0>
   e3a3e:	fab2 fe82 	clz	lr, r2
   e3a42:	f1be 0f00 	cmp.w	lr, #0
   e3a46:	d00b      	beq.n	e3a60 <__udivmoddi4+0x38>
   e3a48:	f1ce 0420 	rsb	r4, lr, #32
   e3a4c:	fa20 f404 	lsr.w	r4, r0, r4
   e3a50:	fa01 f60e 	lsl.w	r6, r1, lr
   e3a54:	ea44 0c06 	orr.w	ip, r4, r6
   e3a58:	fa02 f70e 	lsl.w	r7, r2, lr
   e3a5c:	fa00 f40e 	lsl.w	r4, r0, lr
   e3a60:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e3a64:	0c22      	lsrs	r2, r4, #16
   e3a66:	fbbc f0f9 	udiv	r0, ip, r9
   e3a6a:	fa1f f887 	uxth.w	r8, r7
   e3a6e:	fb09 c610 	mls	r6, r9, r0, ip
   e3a72:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e3a76:	fb00 f308 	mul.w	r3, r0, r8
   e3a7a:	42b3      	cmp	r3, r6
   e3a7c:	d909      	bls.n	e3a92 <__udivmoddi4+0x6a>
   e3a7e:	19f6      	adds	r6, r6, r7
   e3a80:	f100 32ff 	add.w	r2, r0, #4294967295
   e3a84:	f080 8122 	bcs.w	e3ccc <__udivmoddi4+0x2a4>
   e3a88:	42b3      	cmp	r3, r6
   e3a8a:	f240 811f 	bls.w	e3ccc <__udivmoddi4+0x2a4>
   e3a8e:	3802      	subs	r0, #2
   e3a90:	443e      	add	r6, r7
   e3a92:	1af6      	subs	r6, r6, r3
   e3a94:	b2a2      	uxth	r2, r4
   e3a96:	fbb6 f3f9 	udiv	r3, r6, r9
   e3a9a:	fb09 6613 	mls	r6, r9, r3, r6
   e3a9e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e3aa2:	fb03 f808 	mul.w	r8, r3, r8
   e3aa6:	45a0      	cmp	r8, r4
   e3aa8:	d909      	bls.n	e3abe <__udivmoddi4+0x96>
   e3aaa:	19e4      	adds	r4, r4, r7
   e3aac:	f103 32ff 	add.w	r2, r3, #4294967295
   e3ab0:	f080 810a 	bcs.w	e3cc8 <__udivmoddi4+0x2a0>
   e3ab4:	45a0      	cmp	r8, r4
   e3ab6:	f240 8107 	bls.w	e3cc8 <__udivmoddi4+0x2a0>
   e3aba:	3b02      	subs	r3, #2
   e3abc:	443c      	add	r4, r7
   e3abe:	ebc8 0404 	rsb	r4, r8, r4
   e3ac2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e3ac6:	2100      	movs	r1, #0
   e3ac8:	2d00      	cmp	r5, #0
   e3aca:	d062      	beq.n	e3b92 <__udivmoddi4+0x16a>
   e3acc:	fa24 f40e 	lsr.w	r4, r4, lr
   e3ad0:	2300      	movs	r3, #0
   e3ad2:	602c      	str	r4, [r5, #0]
   e3ad4:	606b      	str	r3, [r5, #4]
   e3ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3ada:	428b      	cmp	r3, r1
   e3adc:	d907      	bls.n	e3aee <__udivmoddi4+0xc6>
   e3ade:	2d00      	cmp	r5, #0
   e3ae0:	d055      	beq.n	e3b8e <__udivmoddi4+0x166>
   e3ae2:	2100      	movs	r1, #0
   e3ae4:	e885 0041 	stmia.w	r5, {r0, r6}
   e3ae8:	4608      	mov	r0, r1
   e3aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3aee:	fab3 f183 	clz	r1, r3
   e3af2:	2900      	cmp	r1, #0
   e3af4:	f040 8090 	bne.w	e3c18 <__udivmoddi4+0x1f0>
   e3af8:	42b3      	cmp	r3, r6
   e3afa:	d302      	bcc.n	e3b02 <__udivmoddi4+0xda>
   e3afc:	4282      	cmp	r2, r0
   e3afe:	f200 80f8 	bhi.w	e3cf2 <__udivmoddi4+0x2ca>
   e3b02:	1a84      	subs	r4, r0, r2
   e3b04:	eb66 0603 	sbc.w	r6, r6, r3
   e3b08:	2001      	movs	r0, #1
   e3b0a:	46b4      	mov	ip, r6
   e3b0c:	2d00      	cmp	r5, #0
   e3b0e:	d040      	beq.n	e3b92 <__udivmoddi4+0x16a>
   e3b10:	e885 1010 	stmia.w	r5, {r4, ip}
   e3b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3b18:	b912      	cbnz	r2, e3b20 <__udivmoddi4+0xf8>
   e3b1a:	2701      	movs	r7, #1
   e3b1c:	fbb7 f7f2 	udiv	r7, r7, r2
   e3b20:	fab7 fe87 	clz	lr, r7
   e3b24:	f1be 0f00 	cmp.w	lr, #0
   e3b28:	d135      	bne.n	e3b96 <__udivmoddi4+0x16e>
   e3b2a:	1bf3      	subs	r3, r6, r7
   e3b2c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e3b30:	fa1f fc87 	uxth.w	ip, r7
   e3b34:	2101      	movs	r1, #1
   e3b36:	fbb3 f0f8 	udiv	r0, r3, r8
   e3b3a:	0c22      	lsrs	r2, r4, #16
   e3b3c:	fb08 3610 	mls	r6, r8, r0, r3
   e3b40:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e3b44:	fb0c f300 	mul.w	r3, ip, r0
   e3b48:	42b3      	cmp	r3, r6
   e3b4a:	d907      	bls.n	e3b5c <__udivmoddi4+0x134>
   e3b4c:	19f6      	adds	r6, r6, r7
   e3b4e:	f100 32ff 	add.w	r2, r0, #4294967295
   e3b52:	d202      	bcs.n	e3b5a <__udivmoddi4+0x132>
   e3b54:	42b3      	cmp	r3, r6
   e3b56:	f200 80ce 	bhi.w	e3cf6 <__udivmoddi4+0x2ce>
   e3b5a:	4610      	mov	r0, r2
   e3b5c:	1af6      	subs	r6, r6, r3
   e3b5e:	b2a2      	uxth	r2, r4
   e3b60:	fbb6 f3f8 	udiv	r3, r6, r8
   e3b64:	fb08 6613 	mls	r6, r8, r3, r6
   e3b68:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e3b6c:	fb0c fc03 	mul.w	ip, ip, r3
   e3b70:	45a4      	cmp	ip, r4
   e3b72:	d907      	bls.n	e3b84 <__udivmoddi4+0x15c>
   e3b74:	19e4      	adds	r4, r4, r7
   e3b76:	f103 32ff 	add.w	r2, r3, #4294967295
   e3b7a:	d202      	bcs.n	e3b82 <__udivmoddi4+0x15a>
   e3b7c:	45a4      	cmp	ip, r4
   e3b7e:	f200 80b5 	bhi.w	e3cec <__udivmoddi4+0x2c4>
   e3b82:	4613      	mov	r3, r2
   e3b84:	ebcc 0404 	rsb	r4, ip, r4
   e3b88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e3b8c:	e79c      	b.n	e3ac8 <__udivmoddi4+0xa0>
   e3b8e:	4629      	mov	r1, r5
   e3b90:	4628      	mov	r0, r5
   e3b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3b96:	f1ce 0120 	rsb	r1, lr, #32
   e3b9a:	fa06 f30e 	lsl.w	r3, r6, lr
   e3b9e:	fa07 f70e 	lsl.w	r7, r7, lr
   e3ba2:	fa20 f901 	lsr.w	r9, r0, r1
   e3ba6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e3baa:	40ce      	lsrs	r6, r1
   e3bac:	ea49 0903 	orr.w	r9, r9, r3
   e3bb0:	fbb6 faf8 	udiv	sl, r6, r8
   e3bb4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e3bb8:	fb08 661a 	mls	r6, r8, sl, r6
   e3bbc:	fa1f fc87 	uxth.w	ip, r7
   e3bc0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e3bc4:	fb0a f20c 	mul.w	r2, sl, ip
   e3bc8:	429a      	cmp	r2, r3
   e3bca:	fa00 f40e 	lsl.w	r4, r0, lr
   e3bce:	d90a      	bls.n	e3be6 <__udivmoddi4+0x1be>
   e3bd0:	19db      	adds	r3, r3, r7
   e3bd2:	f10a 31ff 	add.w	r1, sl, #4294967295
   e3bd6:	f080 8087 	bcs.w	e3ce8 <__udivmoddi4+0x2c0>
   e3bda:	429a      	cmp	r2, r3
   e3bdc:	f240 8084 	bls.w	e3ce8 <__udivmoddi4+0x2c0>
   e3be0:	f1aa 0a02 	sub.w	sl, sl, #2
   e3be4:	443b      	add	r3, r7
   e3be6:	1a9b      	subs	r3, r3, r2
   e3be8:	fa1f f989 	uxth.w	r9, r9
   e3bec:	fbb3 f1f8 	udiv	r1, r3, r8
   e3bf0:	fb08 3311 	mls	r3, r8, r1, r3
   e3bf4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e3bf8:	fb01 f60c 	mul.w	r6, r1, ip
   e3bfc:	429e      	cmp	r6, r3
   e3bfe:	d907      	bls.n	e3c10 <__udivmoddi4+0x1e8>
   e3c00:	19db      	adds	r3, r3, r7
   e3c02:	f101 32ff 	add.w	r2, r1, #4294967295
   e3c06:	d26b      	bcs.n	e3ce0 <__udivmoddi4+0x2b8>
   e3c08:	429e      	cmp	r6, r3
   e3c0a:	d969      	bls.n	e3ce0 <__udivmoddi4+0x2b8>
   e3c0c:	3902      	subs	r1, #2
   e3c0e:	443b      	add	r3, r7
   e3c10:	1b9b      	subs	r3, r3, r6
   e3c12:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e3c16:	e78e      	b.n	e3b36 <__udivmoddi4+0x10e>
   e3c18:	f1c1 0e20 	rsb	lr, r1, #32
   e3c1c:	fa22 f40e 	lsr.w	r4, r2, lr
   e3c20:	408b      	lsls	r3, r1
   e3c22:	4323      	orrs	r3, r4
   e3c24:	fa20 f70e 	lsr.w	r7, r0, lr
   e3c28:	fa06 f401 	lsl.w	r4, r6, r1
   e3c2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e3c30:	fa26 f60e 	lsr.w	r6, r6, lr
   e3c34:	433c      	orrs	r4, r7
   e3c36:	fbb6 f9fc 	udiv	r9, r6, ip
   e3c3a:	0c27      	lsrs	r7, r4, #16
   e3c3c:	fb0c 6619 	mls	r6, ip, r9, r6
   e3c40:	fa1f f883 	uxth.w	r8, r3
   e3c44:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e3c48:	fb09 f708 	mul.w	r7, r9, r8
   e3c4c:	42b7      	cmp	r7, r6
   e3c4e:	fa02 f201 	lsl.w	r2, r2, r1
   e3c52:	fa00 fa01 	lsl.w	sl, r0, r1
   e3c56:	d908      	bls.n	e3c6a <__udivmoddi4+0x242>
   e3c58:	18f6      	adds	r6, r6, r3
   e3c5a:	f109 30ff 	add.w	r0, r9, #4294967295
   e3c5e:	d241      	bcs.n	e3ce4 <__udivmoddi4+0x2bc>
   e3c60:	42b7      	cmp	r7, r6
   e3c62:	d93f      	bls.n	e3ce4 <__udivmoddi4+0x2bc>
   e3c64:	f1a9 0902 	sub.w	r9, r9, #2
   e3c68:	441e      	add	r6, r3
   e3c6a:	1bf6      	subs	r6, r6, r7
   e3c6c:	b2a0      	uxth	r0, r4
   e3c6e:	fbb6 f4fc 	udiv	r4, r6, ip
   e3c72:	fb0c 6614 	mls	r6, ip, r4, r6
   e3c76:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e3c7a:	fb04 f808 	mul.w	r8, r4, r8
   e3c7e:	45b8      	cmp	r8, r7
   e3c80:	d907      	bls.n	e3c92 <__udivmoddi4+0x26a>
   e3c82:	18ff      	adds	r7, r7, r3
   e3c84:	f104 30ff 	add.w	r0, r4, #4294967295
   e3c88:	d228      	bcs.n	e3cdc <__udivmoddi4+0x2b4>
   e3c8a:	45b8      	cmp	r8, r7
   e3c8c:	d926      	bls.n	e3cdc <__udivmoddi4+0x2b4>
   e3c8e:	3c02      	subs	r4, #2
   e3c90:	441f      	add	r7, r3
   e3c92:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e3c96:	ebc8 0707 	rsb	r7, r8, r7
   e3c9a:	fba0 8902 	umull	r8, r9, r0, r2
   e3c9e:	454f      	cmp	r7, r9
   e3ca0:	4644      	mov	r4, r8
   e3ca2:	464e      	mov	r6, r9
   e3ca4:	d314      	bcc.n	e3cd0 <__udivmoddi4+0x2a8>
   e3ca6:	d029      	beq.n	e3cfc <__udivmoddi4+0x2d4>
   e3ca8:	b365      	cbz	r5, e3d04 <__udivmoddi4+0x2dc>
   e3caa:	ebba 0304 	subs.w	r3, sl, r4
   e3cae:	eb67 0706 	sbc.w	r7, r7, r6
   e3cb2:	fa07 fe0e 	lsl.w	lr, r7, lr
   e3cb6:	40cb      	lsrs	r3, r1
   e3cb8:	40cf      	lsrs	r7, r1
   e3cba:	ea4e 0303 	orr.w	r3, lr, r3
   e3cbe:	e885 0088 	stmia.w	r5, {r3, r7}
   e3cc2:	2100      	movs	r1, #0
   e3cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3cc8:	4613      	mov	r3, r2
   e3cca:	e6f8      	b.n	e3abe <__udivmoddi4+0x96>
   e3ccc:	4610      	mov	r0, r2
   e3cce:	e6e0      	b.n	e3a92 <__udivmoddi4+0x6a>
   e3cd0:	ebb8 0402 	subs.w	r4, r8, r2
   e3cd4:	eb69 0603 	sbc.w	r6, r9, r3
   e3cd8:	3801      	subs	r0, #1
   e3cda:	e7e5      	b.n	e3ca8 <__udivmoddi4+0x280>
   e3cdc:	4604      	mov	r4, r0
   e3cde:	e7d8      	b.n	e3c92 <__udivmoddi4+0x26a>
   e3ce0:	4611      	mov	r1, r2
   e3ce2:	e795      	b.n	e3c10 <__udivmoddi4+0x1e8>
   e3ce4:	4681      	mov	r9, r0
   e3ce6:	e7c0      	b.n	e3c6a <__udivmoddi4+0x242>
   e3ce8:	468a      	mov	sl, r1
   e3cea:	e77c      	b.n	e3be6 <__udivmoddi4+0x1be>
   e3cec:	3b02      	subs	r3, #2
   e3cee:	443c      	add	r4, r7
   e3cf0:	e748      	b.n	e3b84 <__udivmoddi4+0x15c>
   e3cf2:	4608      	mov	r0, r1
   e3cf4:	e70a      	b.n	e3b0c <__udivmoddi4+0xe4>
   e3cf6:	3802      	subs	r0, #2
   e3cf8:	443e      	add	r6, r7
   e3cfa:	e72f      	b.n	e3b5c <__udivmoddi4+0x134>
   e3cfc:	45c2      	cmp	sl, r8
   e3cfe:	d3e7      	bcc.n	e3cd0 <__udivmoddi4+0x2a8>
   e3d00:	463e      	mov	r6, r7
   e3d02:	e7d1      	b.n	e3ca8 <__udivmoddi4+0x280>
   e3d04:	4629      	mov	r1, r5
   e3d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3d0a:	bf00      	nop

000e3d0c <__aeabi_idiv0>:
   e3d0c:	4770      	bx	lr
   e3d0e:	bf00      	nop

000e3d10 <asctime>:
   e3d10:	4b09      	ldr	r3, [pc, #36]	; (e3d38 <asctime+0x28>)
   e3d12:	b570      	push	{r4, r5, r6, lr}
   e3d14:	681c      	ldr	r4, [r3, #0]
   e3d16:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e3d18:	4606      	mov	r6, r0
   e3d1a:	b93d      	cbnz	r5, e3d2c <asctime+0x1c>
   e3d1c:	201a      	movs	r0, #26
   e3d1e:	f7f7 f911 	bl	daf44 <malloc>
   e3d22:	221a      	movs	r2, #26
   e3d24:	6420      	str	r0, [r4, #64]	; 0x40
   e3d26:	4629      	mov	r1, r5
   e3d28:	f000 f94f 	bl	e3fca <memset>
   e3d2c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e3d2e:	4630      	mov	r0, r6
   e3d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e3d34:	f000 b802 	b.w	e3d3c <asctime_r>
   e3d38:	2003d728 	.word	0x2003d728

000e3d3c <asctime_r>:
   e3d3c:	b510      	push	{r4, lr}
   e3d3e:	460c      	mov	r4, r1
   e3d40:	6941      	ldr	r1, [r0, #20]
   e3d42:	6903      	ldr	r3, [r0, #16]
   e3d44:	6982      	ldr	r2, [r0, #24]
   e3d46:	b086      	sub	sp, #24
   e3d48:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e3d4c:	9104      	str	r1, [sp, #16]
   e3d4e:	6801      	ldr	r1, [r0, #0]
   e3d50:	9103      	str	r1, [sp, #12]
   e3d52:	6841      	ldr	r1, [r0, #4]
   e3d54:	9102      	str	r1, [sp, #8]
   e3d56:	6881      	ldr	r1, [r0, #8]
   e3d58:	9101      	str	r1, [sp, #4]
   e3d5a:	68c1      	ldr	r1, [r0, #12]
   e3d5c:	9100      	str	r1, [sp, #0]
   e3d5e:	4907      	ldr	r1, [pc, #28]	; (e3d7c <asctime_r+0x40>)
   e3d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e3d64:	440b      	add	r3, r1
   e3d66:	4906      	ldr	r1, [pc, #24]	; (e3d80 <asctime_r+0x44>)
   e3d68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e3d6c:	440a      	add	r2, r1
   e3d6e:	4620      	mov	r0, r4
   e3d70:	4904      	ldr	r1, [pc, #16]	; (e3d84 <asctime_r+0x48>)
   e3d72:	f7f7 f8ff 	bl	daf74 <siprintf>
   e3d76:	4620      	mov	r0, r4
   e3d78:	b006      	add	sp, #24
   e3d7a:	bd10      	pop	{r4, pc}
   e3d7c:	000e8d9d 	.word	0x000e8d9d
   e3d80:	000e8d88 	.word	0x000e8d88
   e3d84:	000e8dc1 	.word	0x000e8dc1

000e3d88 <atof>:
   e3d88:	2100      	movs	r1, #0
   e3d8a:	f001 bf2d 	b.w	e5be8 <strtod>

000e3d8e <atoi>:
   e3d8e:	220a      	movs	r2, #10
   e3d90:	2100      	movs	r1, #0
   e3d92:	f001 bfb7 	b.w	e5d04 <strtol>

000e3d96 <atol>:
   e3d96:	220a      	movs	r2, #10
   e3d98:	2100      	movs	r1, #0
   e3d9a:	f001 bfb3 	b.w	e5d04 <strtol>
	...

000e3da0 <__cxa_atexit>:
   e3da0:	b510      	push	{r4, lr}
   e3da2:	4c05      	ldr	r4, [pc, #20]	; (e3db8 <__cxa_atexit+0x18>)
   e3da4:	4613      	mov	r3, r2
   e3da6:	b12c      	cbz	r4, e3db4 <__cxa_atexit+0x14>
   e3da8:	460a      	mov	r2, r1
   e3daa:	4601      	mov	r1, r0
   e3dac:	2002      	movs	r0, #2
   e3dae:	f3af 8000 	nop.w
   e3db2:	bd10      	pop	{r4, pc}
   e3db4:	4620      	mov	r0, r4
   e3db6:	bd10      	pop	{r4, pc}
   e3db8:	00000000 	.word	0x00000000

000e3dbc <localtime>:
   e3dbc:	b538      	push	{r3, r4, r5, lr}
   e3dbe:	4b07      	ldr	r3, [pc, #28]	; (e3ddc <localtime+0x20>)
   e3dc0:	681c      	ldr	r4, [r3, #0]
   e3dc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3dc4:	4605      	mov	r5, r0
   e3dc6:	b91b      	cbnz	r3, e3dd0 <localtime+0x14>
   e3dc8:	2024      	movs	r0, #36	; 0x24
   e3dca:	f7f7 f8bb 	bl	daf44 <malloc>
   e3dce:	63e0      	str	r0, [r4, #60]	; 0x3c
   e3dd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e3dd2:	4628      	mov	r0, r5
   e3dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e3dd8:	f000 b802 	b.w	e3de0 <localtime_r>
   e3ddc:	2003d728 	.word	0x2003d728

000e3de0 <localtime_r>:
   e3de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3de4:	460c      	mov	r4, r1
   e3de6:	4680      	mov	r8, r0
   e3de8:	f002 fde4 	bl	e69b4 <__gettzinfo>
   e3dec:	4621      	mov	r1, r4
   e3dee:	4607      	mov	r7, r0
   e3df0:	4640      	mov	r0, r8
   e3df2:	f002 fde3 	bl	e69bc <gmtime_r>
   e3df6:	6946      	ldr	r6, [r0, #20]
   e3df8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e3dfc:	07b3      	lsls	r3, r6, #30
   e3dfe:	4604      	mov	r4, r0
   e3e00:	d105      	bne.n	e3e0e <localtime_r+0x2e>
   e3e02:	2264      	movs	r2, #100	; 0x64
   e3e04:	fb96 f3f2 	sdiv	r3, r6, r2
   e3e08:	fb02 6313 	mls	r3, r2, r3, r6
   e3e0c:	b94b      	cbnz	r3, e3e22 <localtime_r+0x42>
   e3e0e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e3e12:	fb96 f3f5 	sdiv	r3, r6, r5
   e3e16:	fb05 6513 	mls	r5, r5, r3, r6
   e3e1a:	fab5 f385 	clz	r3, r5
   e3e1e:	095b      	lsrs	r3, r3, #5
   e3e20:	e000      	b.n	e3e24 <localtime_r+0x44>
   e3e22:	2301      	movs	r3, #1
   e3e24:	4a5f      	ldr	r2, [pc, #380]	; (e3fa4 <localtime_r+0x1c4>)
   e3e26:	2530      	movs	r5, #48	; 0x30
   e3e28:	fb05 2503 	mla	r5, r5, r3, r2
   e3e2c:	f002 f8c0 	bl	e5fb0 <__tz_lock>
   e3e30:	f002 f8c0 	bl	e5fb4 <_tzset_unlocked>
   e3e34:	4b5c      	ldr	r3, [pc, #368]	; (e3fa8 <localtime_r+0x1c8>)
   e3e36:	681b      	ldr	r3, [r3, #0]
   e3e38:	b1f3      	cbz	r3, e3e78 <localtime_r+0x98>
   e3e3a:	687b      	ldr	r3, [r7, #4]
   e3e3c:	429e      	cmp	r6, r3
   e3e3e:	d105      	bne.n	e3e4c <localtime_r+0x6c>
   e3e40:	6839      	ldr	r1, [r7, #0]
   e3e42:	f8d8 3000 	ldr.w	r3, [r8]
   e3e46:	69fa      	ldr	r2, [r7, #28]
   e3e48:	b941      	cbnz	r1, e3e5c <localtime_r+0x7c>
   e3e4a:	e00a      	b.n	e3e62 <localtime_r+0x82>
   e3e4c:	4630      	mov	r0, r6
   e3e4e:	f002 f807 	bl	e5e60 <__tzcalc_limits>
   e3e52:	2800      	cmp	r0, #0
   e3e54:	d1f4      	bne.n	e3e40 <localtime_r+0x60>
   e3e56:	f04f 33ff 	mov.w	r3, #4294967295
   e3e5a:	e00d      	b.n	e3e78 <localtime_r+0x98>
   e3e5c:	4293      	cmp	r3, r2
   e3e5e:	db08      	blt.n	e3e72 <localtime_r+0x92>
   e3e60:	e001      	b.n	e3e66 <localtime_r+0x86>
   e3e62:	4293      	cmp	r3, r2
   e3e64:	da07      	bge.n	e3e76 <localtime_r+0x96>
   e3e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e3e68:	4293      	cmp	r3, r2
   e3e6a:	bfac      	ite	ge
   e3e6c:	2300      	movge	r3, #0
   e3e6e:	2301      	movlt	r3, #1
   e3e70:	e002      	b.n	e3e78 <localtime_r+0x98>
   e3e72:	2300      	movs	r3, #0
   e3e74:	e000      	b.n	e3e78 <localtime_r+0x98>
   e3e76:	2301      	movs	r3, #1
   e3e78:	6223      	str	r3, [r4, #32]
   e3e7a:	6a23      	ldr	r3, [r4, #32]
   e3e7c:	2b01      	cmp	r3, #1
   e3e7e:	bf0c      	ite	eq
   e3e80:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e3e82:	6a39      	ldrne	r1, [r7, #32]
   e3e84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e3e88:	203c      	movs	r0, #60	; 0x3c
   e3e8a:	fb91 f6f3 	sdiv	r6, r1, r3
   e3e8e:	fb03 1316 	mls	r3, r3, r6, r1
   e3e92:	6861      	ldr	r1, [r4, #4]
   e3e94:	fb93 f2f0 	sdiv	r2, r3, r0
   e3e98:	fb00 3012 	mls	r0, r0, r2, r3
   e3e9c:	6823      	ldr	r3, [r4, #0]
   e3e9e:	1a89      	subs	r1, r1, r2
   e3ea0:	68a2      	ldr	r2, [r4, #8]
   e3ea2:	6061      	str	r1, [r4, #4]
   e3ea4:	1a1b      	subs	r3, r3, r0
   e3ea6:	1b92      	subs	r2, r2, r6
   e3ea8:	2b3b      	cmp	r3, #59	; 0x3b
   e3eaa:	6023      	str	r3, [r4, #0]
   e3eac:	60a2      	str	r2, [r4, #8]
   e3eae:	dd03      	ble.n	e3eb8 <localtime_r+0xd8>
   e3eb0:	3101      	adds	r1, #1
   e3eb2:	6061      	str	r1, [r4, #4]
   e3eb4:	3b3c      	subs	r3, #60	; 0x3c
   e3eb6:	e004      	b.n	e3ec2 <localtime_r+0xe2>
   e3eb8:	2b00      	cmp	r3, #0
   e3eba:	da03      	bge.n	e3ec4 <localtime_r+0xe4>
   e3ebc:	3901      	subs	r1, #1
   e3ebe:	6061      	str	r1, [r4, #4]
   e3ec0:	333c      	adds	r3, #60	; 0x3c
   e3ec2:	6023      	str	r3, [r4, #0]
   e3ec4:	6863      	ldr	r3, [r4, #4]
   e3ec6:	2b3b      	cmp	r3, #59	; 0x3b
   e3ec8:	dd03      	ble.n	e3ed2 <localtime_r+0xf2>
   e3eca:	3201      	adds	r2, #1
   e3ecc:	60a2      	str	r2, [r4, #8]
   e3ece:	3b3c      	subs	r3, #60	; 0x3c
   e3ed0:	e004      	b.n	e3edc <localtime_r+0xfc>
   e3ed2:	2b00      	cmp	r3, #0
   e3ed4:	da03      	bge.n	e3ede <localtime_r+0xfe>
   e3ed6:	3a01      	subs	r2, #1
   e3ed8:	60a2      	str	r2, [r4, #8]
   e3eda:	333c      	adds	r3, #60	; 0x3c
   e3edc:	6063      	str	r3, [r4, #4]
   e3ede:	68a3      	ldr	r3, [r4, #8]
   e3ee0:	2b17      	cmp	r3, #23
   e3ee2:	dd22      	ble.n	e3f2a <localtime_r+0x14a>
   e3ee4:	69e2      	ldr	r2, [r4, #28]
   e3ee6:	3201      	adds	r2, #1
   e3ee8:	61e2      	str	r2, [r4, #28]
   e3eea:	69a2      	ldr	r2, [r4, #24]
   e3eec:	3201      	adds	r2, #1
   e3eee:	2a06      	cmp	r2, #6
   e3ef0:	bfc8      	it	gt
   e3ef2:	2200      	movgt	r2, #0
   e3ef4:	61a2      	str	r2, [r4, #24]
   e3ef6:	68e2      	ldr	r2, [r4, #12]
   e3ef8:	3b18      	subs	r3, #24
   e3efa:	3201      	adds	r2, #1
   e3efc:	60a3      	str	r3, [r4, #8]
   e3efe:	6923      	ldr	r3, [r4, #16]
   e3f00:	60e2      	str	r2, [r4, #12]
   e3f02:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e3f06:	428a      	cmp	r2, r1
   e3f08:	dd46      	ble.n	e3f98 <localtime_r+0x1b8>
   e3f0a:	3301      	adds	r3, #1
   e3f0c:	2b0c      	cmp	r3, #12
   e3f0e:	bf0c      	ite	eq
   e3f10:	6963      	ldreq	r3, [r4, #20]
   e3f12:	6123      	strne	r3, [r4, #16]
   e3f14:	eba2 0201 	sub.w	r2, r2, r1
   e3f18:	60e2      	str	r2, [r4, #12]
   e3f1a:	bf01      	itttt	eq
   e3f1c:	3301      	addeq	r3, #1
   e3f1e:	2200      	moveq	r2, #0
   e3f20:	6122      	streq	r2, [r4, #16]
   e3f22:	6163      	streq	r3, [r4, #20]
   e3f24:	bf08      	it	eq
   e3f26:	61e2      	streq	r2, [r4, #28]
   e3f28:	e036      	b.n	e3f98 <localtime_r+0x1b8>
   e3f2a:	2b00      	cmp	r3, #0
   e3f2c:	da34      	bge.n	e3f98 <localtime_r+0x1b8>
   e3f2e:	69e2      	ldr	r2, [r4, #28]
   e3f30:	3a01      	subs	r2, #1
   e3f32:	61e2      	str	r2, [r4, #28]
   e3f34:	69a2      	ldr	r2, [r4, #24]
   e3f36:	3a01      	subs	r2, #1
   e3f38:	bf48      	it	mi
   e3f3a:	2206      	movmi	r2, #6
   e3f3c:	61a2      	str	r2, [r4, #24]
   e3f3e:	68e2      	ldr	r2, [r4, #12]
   e3f40:	3318      	adds	r3, #24
   e3f42:	3a01      	subs	r2, #1
   e3f44:	60e2      	str	r2, [r4, #12]
   e3f46:	60a3      	str	r3, [r4, #8]
   e3f48:	bb32      	cbnz	r2, e3f98 <localtime_r+0x1b8>
   e3f4a:	6923      	ldr	r3, [r4, #16]
   e3f4c:	3b01      	subs	r3, #1
   e3f4e:	d401      	bmi.n	e3f54 <localtime_r+0x174>
   e3f50:	6123      	str	r3, [r4, #16]
   e3f52:	e01d      	b.n	e3f90 <localtime_r+0x1b0>
   e3f54:	230b      	movs	r3, #11
   e3f56:	6123      	str	r3, [r4, #16]
   e3f58:	6963      	ldr	r3, [r4, #20]
   e3f5a:	1e5a      	subs	r2, r3, #1
   e3f5c:	f012 0f03 	tst.w	r2, #3
   e3f60:	6162      	str	r2, [r4, #20]
   e3f62:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e3f66:	d105      	bne.n	e3f74 <localtime_r+0x194>
   e3f68:	2164      	movs	r1, #100	; 0x64
   e3f6a:	fb93 f2f1 	sdiv	r2, r3, r1
   e3f6e:	fb01 3212 	mls	r2, r1, r2, r3
   e3f72:	b94a      	cbnz	r2, e3f88 <localtime_r+0x1a8>
   e3f74:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e3f78:	fb93 f2f1 	sdiv	r2, r3, r1
   e3f7c:	fb01 3312 	mls	r3, r1, r2, r3
   e3f80:	fab3 f383 	clz	r3, r3
   e3f84:	095b      	lsrs	r3, r3, #5
   e3f86:	e000      	b.n	e3f8a <localtime_r+0x1aa>
   e3f88:	2301      	movs	r3, #1
   e3f8a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e3f8e:	61e3      	str	r3, [r4, #28]
   e3f90:	6923      	ldr	r3, [r4, #16]
   e3f92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e3f96:	60e3      	str	r3, [r4, #12]
   e3f98:	f002 f80b 	bl	e5fb2 <__tz_unlock>
   e3f9c:	4620      	mov	r0, r4
   e3f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e3fa2:	bf00      	nop
   e3fa4:	000e8fac 	.word	0x000e8fac
   e3fa8:	2003e7e4 	.word	0x2003e7e4

000e3fac <_localeconv_r>:
   e3fac:	4800      	ldr	r0, [pc, #0]	; (e3fb0 <_localeconv_r+0x4>)
   e3fae:	4770      	bx	lr
   e3fb0:	2003d72c 	.word	0x2003d72c

000e3fb4 <memcpy>:
   e3fb4:	b510      	push	{r4, lr}
   e3fb6:	1e43      	subs	r3, r0, #1
   e3fb8:	440a      	add	r2, r1
   e3fba:	4291      	cmp	r1, r2
   e3fbc:	d004      	beq.n	e3fc8 <memcpy+0x14>
   e3fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   e3fc6:	e7f8      	b.n	e3fba <memcpy+0x6>
   e3fc8:	bd10      	pop	{r4, pc}

000e3fca <memset>:
   e3fca:	4402      	add	r2, r0
   e3fcc:	4603      	mov	r3, r0
   e3fce:	4293      	cmp	r3, r2
   e3fd0:	d002      	beq.n	e3fd8 <memset+0xe>
   e3fd2:	f803 1b01 	strb.w	r1, [r3], #1
   e3fd6:	e7fa      	b.n	e3fce <memset+0x4>
   e3fd8:	4770      	bx	lr
	...

000e3fdc <validate_structure>:
   e3fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e3fde:	6801      	ldr	r1, [r0, #0]
   e3fe0:	293b      	cmp	r1, #59	; 0x3b
   e3fe2:	4604      	mov	r4, r0
   e3fe4:	d911      	bls.n	e400a <validate_structure+0x2e>
   e3fe6:	223c      	movs	r2, #60	; 0x3c
   e3fe8:	4668      	mov	r0, sp
   e3fea:	f002 f96d 	bl	e62c8 <div>
   e3fee:	9a01      	ldr	r2, [sp, #4]
   e3ff0:	6863      	ldr	r3, [r4, #4]
   e3ff2:	9900      	ldr	r1, [sp, #0]
   e3ff4:	2a00      	cmp	r2, #0
   e3ff6:	440b      	add	r3, r1
   e3ff8:	6063      	str	r3, [r4, #4]
   e3ffa:	bfbb      	ittet	lt
   e3ffc:	323c      	addlt	r2, #60	; 0x3c
   e3ffe:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e4002:	6022      	strge	r2, [r4, #0]
   e4004:	6022      	strlt	r2, [r4, #0]
   e4006:	bfb8      	it	lt
   e4008:	6063      	strlt	r3, [r4, #4]
   e400a:	6861      	ldr	r1, [r4, #4]
   e400c:	293b      	cmp	r1, #59	; 0x3b
   e400e:	d911      	bls.n	e4034 <validate_structure+0x58>
   e4010:	223c      	movs	r2, #60	; 0x3c
   e4012:	4668      	mov	r0, sp
   e4014:	f002 f958 	bl	e62c8 <div>
   e4018:	9a01      	ldr	r2, [sp, #4]
   e401a:	68a1      	ldr	r1, [r4, #8]
   e401c:	9b00      	ldr	r3, [sp, #0]
   e401e:	2a00      	cmp	r2, #0
   e4020:	440b      	add	r3, r1
   e4022:	60a3      	str	r3, [r4, #8]
   e4024:	bfbb      	ittet	lt
   e4026:	323c      	addlt	r2, #60	; 0x3c
   e4028:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e402c:	6062      	strge	r2, [r4, #4]
   e402e:	6062      	strlt	r2, [r4, #4]
   e4030:	bfb8      	it	lt
   e4032:	60a3      	strlt	r3, [r4, #8]
   e4034:	68a1      	ldr	r1, [r4, #8]
   e4036:	2917      	cmp	r1, #23
   e4038:	d911      	bls.n	e405e <validate_structure+0x82>
   e403a:	2218      	movs	r2, #24
   e403c:	4668      	mov	r0, sp
   e403e:	f002 f943 	bl	e62c8 <div>
   e4042:	9a01      	ldr	r2, [sp, #4]
   e4044:	68e1      	ldr	r1, [r4, #12]
   e4046:	9b00      	ldr	r3, [sp, #0]
   e4048:	2a00      	cmp	r2, #0
   e404a:	440b      	add	r3, r1
   e404c:	60e3      	str	r3, [r4, #12]
   e404e:	bfbb      	ittet	lt
   e4050:	3218      	addlt	r2, #24
   e4052:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e4056:	60a2      	strge	r2, [r4, #8]
   e4058:	60a2      	strlt	r2, [r4, #8]
   e405a:	bfb8      	it	lt
   e405c:	60e3      	strlt	r3, [r4, #12]
   e405e:	6921      	ldr	r1, [r4, #16]
   e4060:	290b      	cmp	r1, #11
   e4062:	d911      	bls.n	e4088 <validate_structure+0xac>
   e4064:	220c      	movs	r2, #12
   e4066:	4668      	mov	r0, sp
   e4068:	f002 f92e 	bl	e62c8 <div>
   e406c:	9a01      	ldr	r2, [sp, #4]
   e406e:	6961      	ldr	r1, [r4, #20]
   e4070:	9b00      	ldr	r3, [sp, #0]
   e4072:	2a00      	cmp	r2, #0
   e4074:	440b      	add	r3, r1
   e4076:	6163      	str	r3, [r4, #20]
   e4078:	bfbb      	ittet	lt
   e407a:	320c      	addlt	r2, #12
   e407c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e4080:	6122      	strge	r2, [r4, #16]
   e4082:	6122      	strlt	r2, [r4, #16]
   e4084:	bfb8      	it	lt
   e4086:	6163      	strlt	r3, [r4, #20]
   e4088:	6963      	ldr	r3, [r4, #20]
   e408a:	0799      	lsls	r1, r3, #30
   e408c:	d112      	bne.n	e40b4 <validate_structure+0xd8>
   e408e:	2164      	movs	r1, #100	; 0x64
   e4090:	fb93 f2f1 	sdiv	r2, r3, r1
   e4094:	fb01 3212 	mls	r2, r1, r2, r3
   e4098:	b972      	cbnz	r2, e40b8 <validate_structure+0xdc>
   e409a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e409e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e40a2:	fb93 f2f1 	sdiv	r2, r3, r1
   e40a6:	fb01 3312 	mls	r3, r1, r2, r3
   e40aa:	2b00      	cmp	r3, #0
   e40ac:	bf14      	ite	ne
   e40ae:	231c      	movne	r3, #28
   e40b0:	231d      	moveq	r3, #29
   e40b2:	e002      	b.n	e40ba <validate_structure+0xde>
   e40b4:	231c      	movs	r3, #28
   e40b6:	e000      	b.n	e40ba <validate_structure+0xde>
   e40b8:	231d      	movs	r3, #29
   e40ba:	68e2      	ldr	r2, [r4, #12]
   e40bc:	2a00      	cmp	r2, #0
   e40be:	dd06      	ble.n	e40ce <validate_structure+0xf2>
   e40c0:	4f33      	ldr	r7, [pc, #204]	; (e4190 <validate_structure+0x1b4>)
   e40c2:	f04f 0e00 	mov.w	lr, #0
   e40c6:	2564      	movs	r5, #100	; 0x64
   e40c8:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e40cc:	e039      	b.n	e4142 <validate_structure+0x166>
   e40ce:	4f30      	ldr	r7, [pc, #192]	; (e4190 <validate_structure+0x1b4>)
   e40d0:	260b      	movs	r6, #11
   e40d2:	2064      	movs	r0, #100	; 0x64
   e40d4:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e40d8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e40dc:	f1be 0f00 	cmp.w	lr, #0
   e40e0:	dc53      	bgt.n	e418a <validate_structure+0x1ae>
   e40e2:	6921      	ldr	r1, [r4, #16]
   e40e4:	3901      	subs	r1, #1
   e40e6:	6121      	str	r1, [r4, #16]
   e40e8:	3101      	adds	r1, #1
   e40ea:	d118      	bne.n	e411e <validate_structure+0x142>
   e40ec:	6963      	ldr	r3, [r4, #20]
   e40ee:	6126      	str	r6, [r4, #16]
   e40f0:	1e59      	subs	r1, r3, #1
   e40f2:	078a      	lsls	r2, r1, #30
   e40f4:	6161      	str	r1, [r4, #20]
   e40f6:	d10f      	bne.n	e4118 <validate_structure+0x13c>
   e40f8:	fb91 f2f0 	sdiv	r2, r1, r0
   e40fc:	fb00 1112 	mls	r1, r0, r2, r1
   e4100:	b961      	cbnz	r1, e411c <validate_structure+0x140>
   e4102:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e4106:	fb93 f2f5 	sdiv	r2, r3, r5
   e410a:	fb05 3312 	mls	r3, r5, r2, r3
   e410e:	2b00      	cmp	r3, #0
   e4110:	bf14      	ite	ne
   e4112:	231c      	movne	r3, #28
   e4114:	231d      	moveq	r3, #29
   e4116:	e002      	b.n	e411e <validate_structure+0x142>
   e4118:	231c      	movs	r3, #28
   e411a:	e000      	b.n	e411e <validate_structure+0x142>
   e411c:	231d      	movs	r3, #29
   e411e:	6922      	ldr	r2, [r4, #16]
   e4120:	2a01      	cmp	r2, #1
   e4122:	bf14      	ite	ne
   e4124:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e4128:	461a      	moveq	r2, r3
   e412a:	4472      	add	r2, lr
   e412c:	60e2      	str	r2, [r4, #12]
   e412e:	e7d3      	b.n	e40d8 <validate_structure+0xfc>
   e4130:	428b      	cmp	r3, r1
   e4132:	da2a      	bge.n	e418a <validate_structure+0x1ae>
   e4134:	4618      	mov	r0, r3
   e4136:	3201      	adds	r2, #1
   e4138:	1a09      	subs	r1, r1, r0
   e413a:	2a0c      	cmp	r2, #12
   e413c:	60e1      	str	r1, [r4, #12]
   e413e:	6122      	str	r2, [r4, #16]
   e4140:	d008      	beq.n	e4154 <validate_structure+0x178>
   e4142:	6922      	ldr	r2, [r4, #16]
   e4144:	68e1      	ldr	r1, [r4, #12]
   e4146:	2a01      	cmp	r2, #1
   e4148:	d0f2      	beq.n	e4130 <validate_structure+0x154>
   e414a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e414e:	4281      	cmp	r1, r0
   e4150:	dcf1      	bgt.n	e4136 <validate_structure+0x15a>
   e4152:	e01a      	b.n	e418a <validate_structure+0x1ae>
   e4154:	6963      	ldr	r3, [r4, #20]
   e4156:	f8c4 e010 	str.w	lr, [r4, #16]
   e415a:	1c5a      	adds	r2, r3, #1
   e415c:	0791      	lsls	r1, r2, #30
   e415e:	6162      	str	r2, [r4, #20]
   e4160:	d10f      	bne.n	e4182 <validate_structure+0x1a6>
   e4162:	fb92 f1f5 	sdiv	r1, r2, r5
   e4166:	fb05 2211 	mls	r2, r5, r1, r2
   e416a:	b962      	cbnz	r2, e4186 <validate_structure+0x1aa>
   e416c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e4170:	fb93 f2f6 	sdiv	r2, r3, r6
   e4174:	fb06 3312 	mls	r3, r6, r2, r3
   e4178:	2b00      	cmp	r3, #0
   e417a:	bf14      	ite	ne
   e417c:	231c      	movne	r3, #28
   e417e:	231d      	moveq	r3, #29
   e4180:	e7df      	b.n	e4142 <validate_structure+0x166>
   e4182:	231c      	movs	r3, #28
   e4184:	e7dd      	b.n	e4142 <validate_structure+0x166>
   e4186:	231d      	movs	r3, #29
   e4188:	e7db      	b.n	e4142 <validate_structure+0x166>
   e418a:	b003      	add	sp, #12
   e418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e418e:	bf00      	nop
   e4190:	000e8f7c 	.word	0x000e8f7c

000e4194 <mktime>:
   e4194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e4198:	4605      	mov	r5, r0
   e419a:	f002 fc0b 	bl	e69b4 <__gettzinfo>
   e419e:	4681      	mov	r9, r0
   e41a0:	4628      	mov	r0, r5
   e41a2:	f7ff ff1b 	bl	e3fdc <validate_structure>
   e41a6:	e895 000c 	ldmia.w	r5, {r2, r3}
   e41aa:	213c      	movs	r1, #60	; 0x3c
   e41ac:	fb01 2303 	mla	r3, r1, r3, r2
   e41b0:	68aa      	ldr	r2, [r5, #8]
   e41b2:	68ec      	ldr	r4, [r5, #12]
   e41b4:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e41b8:	fb08 3102 	mla	r1, r8, r2, r3
   e41bc:	692b      	ldr	r3, [r5, #16]
   e41be:	4aab      	ldr	r2, [pc, #684]	; (e446c <mktime+0x2d8>)
   e41c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e41c4:	3c01      	subs	r4, #1
   e41c6:	2b01      	cmp	r3, #1
   e41c8:	4414      	add	r4, r2
   e41ca:	696b      	ldr	r3, [r5, #20]
   e41cc:	dd11      	ble.n	e41f2 <mktime+0x5e>
   e41ce:	079e      	lsls	r6, r3, #30
   e41d0:	d10f      	bne.n	e41f2 <mktime+0x5e>
   e41d2:	2064      	movs	r0, #100	; 0x64
   e41d4:	fb93 f2f0 	sdiv	r2, r3, r0
   e41d8:	fb00 3212 	mls	r2, r0, r2, r3
   e41dc:	b942      	cbnz	r2, e41f0 <mktime+0x5c>
   e41de:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e41e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e41e6:	fb96 f0f2 	sdiv	r0, r6, r2
   e41ea:	fb02 6210 	mls	r2, r2, r0, r6
   e41ee:	b902      	cbnz	r2, e41f2 <mktime+0x5e>
   e41f0:	3401      	adds	r4, #1
   e41f2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e41f6:	3210      	adds	r2, #16
   e41f8:	f644 6020 	movw	r0, #20000	; 0x4e20
   e41fc:	4282      	cmp	r2, r0
   e41fe:	61ec      	str	r4, [r5, #28]
   e4200:	461f      	mov	r7, r3
   e4202:	f200 812e 	bhi.w	e4462 <mktime+0x2ce>
   e4206:	2b46      	cmp	r3, #70	; 0x46
   e4208:	dd22      	ble.n	e4250 <mktime+0xbc>
   e420a:	2246      	movs	r2, #70	; 0x46
   e420c:	f240 1c6d 	movw	ip, #365	; 0x16d
   e4210:	2664      	movs	r6, #100	; 0x64
   e4212:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e4216:	0790      	lsls	r0, r2, #30
   e4218:	d110      	bne.n	e423c <mktime+0xa8>
   e421a:	fb92 f0f6 	sdiv	r0, r2, r6
   e421e:	fb06 2010 	mls	r0, r6, r0, r2
   e4222:	b970      	cbnz	r0, e4242 <mktime+0xae>
   e4224:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e4228:	fb98 f0fe 	sdiv	r0, r8, lr
   e422c:	fb0e 8010 	mls	r0, lr, r0, r8
   e4230:	2800      	cmp	r0, #0
   e4232:	bf14      	ite	ne
   e4234:	4660      	movne	r0, ip
   e4236:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e423a:	e004      	b.n	e4246 <mktime+0xb2>
   e423c:	f240 106d 	movw	r0, #365	; 0x16d
   e4240:	e001      	b.n	e4246 <mktime+0xb2>
   e4242:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e4246:	3201      	adds	r2, #1
   e4248:	4293      	cmp	r3, r2
   e424a:	4404      	add	r4, r0
   e424c:	d1e3      	bne.n	e4216 <mktime+0x82>
   e424e:	e044      	b.n	e42da <mktime+0x146>
   e4250:	d043      	beq.n	e42da <mktime+0x146>
   e4252:	2245      	movs	r2, #69	; 0x45
   e4254:	f240 1e6d 	movw	lr, #365	; 0x16d
   e4258:	2664      	movs	r6, #100	; 0x64
   e425a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e425e:	429a      	cmp	r2, r3
   e4260:	dd1a      	ble.n	e4298 <mktime+0x104>
   e4262:	0790      	lsls	r0, r2, #30
   e4264:	d110      	bne.n	e4288 <mktime+0xf4>
   e4266:	fb92 f0f6 	sdiv	r0, r2, r6
   e426a:	fb06 2010 	mls	r0, r6, r0, r2
   e426e:	b970      	cbnz	r0, e428e <mktime+0xfa>
   e4270:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e4274:	fb9c f0f7 	sdiv	r0, ip, r7
   e4278:	fb07 c010 	mls	r0, r7, r0, ip
   e427c:	2800      	cmp	r0, #0
   e427e:	bf14      	ite	ne
   e4280:	4670      	movne	r0, lr
   e4282:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e4286:	e004      	b.n	e4292 <mktime+0xfe>
   e4288:	f240 106d 	movw	r0, #365	; 0x16d
   e428c:	e001      	b.n	e4292 <mktime+0xfe>
   e428e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e4292:	1a24      	subs	r4, r4, r0
   e4294:	3a01      	subs	r2, #1
   e4296:	e7e2      	b.n	e425e <mktime+0xca>
   e4298:	2b45      	cmp	r3, #69	; 0x45
   e429a:	bfa8      	it	ge
   e429c:	2345      	movge	r3, #69	; 0x45
   e429e:	079e      	lsls	r6, r3, #30
   e42a0:	461f      	mov	r7, r3
   e42a2:	d114      	bne.n	e42ce <mktime+0x13a>
   e42a4:	2264      	movs	r2, #100	; 0x64
   e42a6:	fb93 f3f2 	sdiv	r3, r3, r2
   e42aa:	fb02 7313 	mls	r3, r2, r3, r7
   e42ae:	b98b      	cbnz	r3, e42d4 <mktime+0x140>
   e42b0:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e42b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e42b8:	fb90 f2f3 	sdiv	r2, r0, r3
   e42bc:	fb03 0312 	mls	r3, r3, r2, r0
   e42c0:	2b00      	cmp	r3, #0
   e42c2:	f240 136d 	movw	r3, #365	; 0x16d
   e42c6:	bf08      	it	eq
   e42c8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e42cc:	e004      	b.n	e42d8 <mktime+0x144>
   e42ce:	f240 136d 	movw	r3, #365	; 0x16d
   e42d2:	e001      	b.n	e42d8 <mktime+0x144>
   e42d4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e42d8:	1ae4      	subs	r4, r4, r3
   e42da:	4865      	ldr	r0, [pc, #404]	; (e4470 <mktime+0x2dc>)
   e42dc:	fb00 1804 	mla	r8, r0, r4, r1
   e42e0:	f001 fe66 	bl	e5fb0 <__tz_lock>
   e42e4:	f001 fe66 	bl	e5fb4 <_tzset_unlocked>
   e42e8:	4b62      	ldr	r3, [pc, #392]	; (e4474 <mktime+0x2e0>)
   e42ea:	681e      	ldr	r6, [r3, #0]
   e42ec:	2e00      	cmp	r6, #0
   e42ee:	f000 80a4 	beq.w	e443a <mktime+0x2a6>
   e42f2:	6a2b      	ldr	r3, [r5, #32]
   e42f4:	6968      	ldr	r0, [r5, #20]
   e42f6:	2b01      	cmp	r3, #1
   e42f8:	bfa8      	it	ge
   e42fa:	2301      	movge	r3, #1
   e42fc:	469a      	mov	sl, r3
   e42fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e4302:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4306:	4298      	cmp	r0, r3
   e4308:	d10d      	bne.n	e4326 <mktime+0x192>
   e430a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e430e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e4312:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e4316:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e431a:	1ad6      	subs	r6, r2, r3
   e431c:	45b0      	cmp	r8, r6
   e431e:	eba1 0100 	sub.w	r1, r1, r0
   e4322:	da05      	bge.n	e4330 <mktime+0x19c>
   e4324:	e007      	b.n	e4336 <mktime+0x1a2>
   e4326:	f001 fd9b 	bl	e5e60 <__tzcalc_limits>
   e432a:	2800      	cmp	r0, #0
   e432c:	d1ed      	bne.n	e430a <mktime+0x176>
   e432e:	e076      	b.n	e441e <mktime+0x28a>
   e4330:	1a12      	subs	r2, r2, r0
   e4332:	4590      	cmp	r8, r2
   e4334:	db73      	blt.n	e441e <mktime+0x28a>
   e4336:	f8d9 2000 	ldr.w	r2, [r9]
   e433a:	b112      	cbz	r2, e4342 <mktime+0x1ae>
   e433c:	4588      	cmp	r8, r1
   e433e:	db77      	blt.n	e4430 <mktime+0x29c>
   e4340:	e001      	b.n	e4346 <mktime+0x1b2>
   e4342:	4588      	cmp	r8, r1
   e4344:	da07      	bge.n	e4356 <mktime+0x1c2>
   e4346:	45b0      	cmp	r8, r6
   e4348:	bfac      	ite	ge
   e434a:	2600      	movge	r6, #0
   e434c:	2601      	movlt	r6, #1
   e434e:	f1ba 0f00 	cmp.w	sl, #0
   e4352:	da04      	bge.n	e435e <mktime+0x1ca>
   e4354:	e064      	b.n	e4420 <mktime+0x28c>
   e4356:	f1ba 0f00 	cmp.w	sl, #0
   e435a:	db63      	blt.n	e4424 <mktime+0x290>
   e435c:	2601      	movs	r6, #1
   e435e:	ea8a 0a06 	eor.w	sl, sl, r6
   e4362:	f1ba 0f01 	cmp.w	sl, #1
   e4366:	d15b      	bne.n	e4420 <mktime+0x28c>
   e4368:	1a1b      	subs	r3, r3, r0
   e436a:	b906      	cbnz	r6, e436e <mktime+0x1da>
   e436c:	425b      	negs	r3, r3
   e436e:	682a      	ldr	r2, [r5, #0]
   e4370:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e4374:	441a      	add	r2, r3
   e4376:	602a      	str	r2, [r5, #0]
   e4378:	4628      	mov	r0, r5
   e437a:	4498      	add	r8, r3
   e437c:	f7ff fe2e 	bl	e3fdc <validate_structure>
   e4380:	68eb      	ldr	r3, [r5, #12]
   e4382:	ebb3 030a 	subs.w	r3, r3, sl
   e4386:	d04b      	beq.n	e4420 <mktime+0x28c>
   e4388:	2b01      	cmp	r3, #1
   e438a:	dc03      	bgt.n	e4394 <mktime+0x200>
   e438c:	1c98      	adds	r0, r3, #2
   e438e:	bfd8      	it	le
   e4390:	2301      	movle	r3, #1
   e4392:	e001      	b.n	e4398 <mktime+0x204>
   e4394:	f04f 33ff 	mov.w	r3, #4294967295
   e4398:	69ea      	ldr	r2, [r5, #28]
   e439a:	441c      	add	r4, r3
   e439c:	189b      	adds	r3, r3, r2
   e439e:	d51d      	bpl.n	e43dc <mktime+0x248>
   e43a0:	1e7b      	subs	r3, r7, #1
   e43a2:	0799      	lsls	r1, r3, #30
   e43a4:	d114      	bne.n	e43d0 <mktime+0x23c>
   e43a6:	2164      	movs	r1, #100	; 0x64
   e43a8:	fb93 f2f1 	sdiv	r2, r3, r1
   e43ac:	fb01 3312 	mls	r3, r1, r2, r3
   e43b0:	b98b      	cbnz	r3, e43d6 <mktime+0x242>
   e43b2:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e43b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e43ba:	fb97 f3f2 	sdiv	r3, r7, r2
   e43be:	fb02 7713 	mls	r7, r2, r3, r7
   e43c2:	2f00      	cmp	r7, #0
   e43c4:	f240 136d 	movw	r3, #365	; 0x16d
   e43c8:	bf18      	it	ne
   e43ca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e43ce:	e024      	b.n	e441a <mktime+0x286>
   e43d0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e43d4:	e021      	b.n	e441a <mktime+0x286>
   e43d6:	f240 136d 	movw	r3, #365	; 0x16d
   e43da:	e01e      	b.n	e441a <mktime+0x286>
   e43dc:	07ba      	lsls	r2, r7, #30
   e43de:	d114      	bne.n	e440a <mktime+0x276>
   e43e0:	2164      	movs	r1, #100	; 0x64
   e43e2:	fb97 f2f1 	sdiv	r2, r7, r1
   e43e6:	fb01 7212 	mls	r2, r1, r2, r7
   e43ea:	b98a      	cbnz	r2, e4410 <mktime+0x27c>
   e43ec:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e43f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e43f4:	fb97 f2f1 	sdiv	r2, r7, r1
   e43f8:	fb01 7712 	mls	r7, r1, r2, r7
   e43fc:	2f00      	cmp	r7, #0
   e43fe:	f240 126d 	movw	r2, #365	; 0x16d
   e4402:	bf08      	it	eq
   e4404:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e4408:	e004      	b.n	e4414 <mktime+0x280>
   e440a:	f240 126d 	movw	r2, #365	; 0x16d
   e440e:	e001      	b.n	e4414 <mktime+0x280>
   e4410:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e4414:	429a      	cmp	r2, r3
   e4416:	bfd8      	it	le
   e4418:	1a9b      	suble	r3, r3, r2
   e441a:	61eb      	str	r3, [r5, #28]
   e441c:	e000      	b.n	e4420 <mktime+0x28c>
   e441e:	4656      	mov	r6, sl
   e4420:	2e01      	cmp	r6, #1
   e4422:	d10a      	bne.n	e443a <mktime+0x2a6>
   e4424:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e4428:	2601      	movs	r6, #1
   e442a:	eb08 0700 	add.w	r7, r8, r0
   e442e:	e008      	b.n	e4442 <mktime+0x2ae>
   e4430:	f1ba 0f00 	cmp.w	sl, #0
   e4434:	f04f 0600 	mov.w	r6, #0
   e4438:	da91      	bge.n	e435e <mktime+0x1ca>
   e443a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e443e:	eb08 0700 	add.w	r7, r8, r0
   e4442:	f001 fdb6 	bl	e5fb2 <__tz_unlock>
   e4446:	3404      	adds	r4, #4
   e4448:	2307      	movs	r3, #7
   e444a:	fb94 f3f3 	sdiv	r3, r4, r3
   e444e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e4452:	1ae4      	subs	r4, r4, r3
   e4454:	bf48      	it	mi
   e4456:	3407      	addmi	r4, #7
   e4458:	622e      	str	r6, [r5, #32]
   e445a:	61ac      	str	r4, [r5, #24]
   e445c:	4638      	mov	r0, r7
   e445e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4462:	f04f 30ff 	mov.w	r0, #4294967295
   e4466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e446a:	bf00      	nop
   e446c:	000e8f4c 	.word	0x000e8f4c
   e4470:	00015180 	.word	0x00015180
   e4474:	2003e7e4 	.word	0x2003e7e4

000e4478 <srand>:
   e4478:	b538      	push	{r3, r4, r5, lr}
   e447a:	4b12      	ldr	r3, [pc, #72]	; (e44c4 <srand+0x4c>)
   e447c:	681c      	ldr	r4, [r3, #0]
   e447e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e4480:	4605      	mov	r5, r0
   e4482:	b9d3      	cbnz	r3, e44ba <srand+0x42>
   e4484:	2018      	movs	r0, #24
   e4486:	f7f6 fd5d 	bl	daf44 <malloc>
   e448a:	f243 330e 	movw	r3, #13070	; 0x330e
   e448e:	63a0      	str	r0, [r4, #56]	; 0x38
   e4490:	8003      	strh	r3, [r0, #0]
   e4492:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e4496:	8043      	strh	r3, [r0, #2]
   e4498:	f241 2334 	movw	r3, #4660	; 0x1234
   e449c:	8083      	strh	r3, [r0, #4]
   e449e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e44a2:	80c3      	strh	r3, [r0, #6]
   e44a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e44a8:	8103      	strh	r3, [r0, #8]
   e44aa:	2305      	movs	r3, #5
   e44ac:	8143      	strh	r3, [r0, #10]
   e44ae:	230b      	movs	r3, #11
   e44b0:	8183      	strh	r3, [r0, #12]
   e44b2:	2201      	movs	r2, #1
   e44b4:	2300      	movs	r3, #0
   e44b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e44ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e44bc:	2200      	movs	r2, #0
   e44be:	611d      	str	r5, [r3, #16]
   e44c0:	615a      	str	r2, [r3, #20]
   e44c2:	bd38      	pop	{r3, r4, r5, pc}
   e44c4:	2003d728 	.word	0x2003d728

000e44c8 <strcmp>:
   e44c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   e44cc:	f811 3b01 	ldrb.w	r3, [r1], #1
   e44d0:	2a01      	cmp	r2, #1
   e44d2:	bf28      	it	cs
   e44d4:	429a      	cmpcs	r2, r3
   e44d6:	d0f7      	beq.n	e44c8 <strcmp>
   e44d8:	1ad0      	subs	r0, r2, r3
   e44da:	4770      	bx	lr

000e44dc <strcpy>:
   e44dc:	4603      	mov	r3, r0
   e44de:	f811 2b01 	ldrb.w	r2, [r1], #1
   e44e2:	f803 2b01 	strb.w	r2, [r3], #1
   e44e6:	2a00      	cmp	r2, #0
   e44e8:	d1f9      	bne.n	e44de <strcpy+0x2>
   e44ea:	4770      	bx	lr

000e44ec <strdup>:
   e44ec:	4b02      	ldr	r3, [pc, #8]	; (e44f8 <strdup+0xc>)
   e44ee:	4601      	mov	r1, r0
   e44f0:	6818      	ldr	r0, [r3, #0]
   e44f2:	f000 b803 	b.w	e44fc <_strdup_r>
   e44f6:	bf00      	nop
   e44f8:	2003d728 	.word	0x2003d728

000e44fc <_strdup_r>:
   e44fc:	b570      	push	{r4, r5, r6, lr}
   e44fe:	4606      	mov	r6, r0
   e4500:	4608      	mov	r0, r1
   e4502:	460c      	mov	r4, r1
   e4504:	f000 fd22 	bl	e4f4c <strlen>
   e4508:	1c45      	adds	r5, r0, #1
   e450a:	4629      	mov	r1, r5
   e450c:	4630      	mov	r0, r6
   e450e:	f7f6 fd61 	bl	dafd4 <_malloc_r>
   e4512:	4606      	mov	r6, r0
   e4514:	b118      	cbz	r0, e451e <_strdup_r+0x22>
   e4516:	462a      	mov	r2, r5
   e4518:	4621      	mov	r1, r4
   e451a:	f7ff fd4b 	bl	e3fb4 <memcpy>
   e451e:	4630      	mov	r0, r6
   e4520:	bd70      	pop	{r4, r5, r6, pc}

000e4522 <iso_year_adjust>:
   e4522:	6941      	ldr	r1, [r0, #20]
   e4524:	078b      	lsls	r3, r1, #30
   e4526:	b510      	push	{r4, lr}
   e4528:	d10c      	bne.n	e4544 <iso_year_adjust+0x22>
   e452a:	2900      	cmp	r1, #0
   e452c:	f240 736c 	movw	r3, #1900	; 0x76c
   e4530:	bfa8      	it	ge
   e4532:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e4536:	440b      	add	r3, r1
   e4538:	2464      	movs	r4, #100	; 0x64
   e453a:	fb93 f2f4 	sdiv	r2, r3, r4
   e453e:	fb04 3312 	mls	r3, r4, r2, r3
   e4542:	b983      	cbnz	r3, e4566 <iso_year_adjust+0x44>
   e4544:	2900      	cmp	r1, #0
   e4546:	f240 736c 	movw	r3, #1900	; 0x76c
   e454a:	bfa8      	it	ge
   e454c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e4550:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4554:	440b      	add	r3, r1
   e4556:	fb93 f1f2 	sdiv	r1, r3, r2
   e455a:	fb02 3311 	mls	r3, r2, r1, r3
   e455e:	fab3 f283 	clz	r2, r3
   e4562:	0952      	lsrs	r2, r2, #5
   e4564:	e000      	b.n	e4568 <iso_year_adjust+0x46>
   e4566:	2201      	movs	r2, #1
   e4568:	6983      	ldr	r3, [r0, #24]
   e456a:	69c1      	ldr	r1, [r0, #28]
   e456c:	005b      	lsls	r3, r3, #1
   e456e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e4572:	4413      	add	r3, r2
   e4574:	2b21      	cmp	r3, #33	; 0x21
   e4576:	dc0e      	bgt.n	e4596 <iso_year_adjust+0x74>
   e4578:	2b20      	cmp	r3, #32
   e457a:	da2f      	bge.n	e45dc <iso_year_adjust+0xba>
   e457c:	2b0d      	cmp	r3, #13
   e457e:	dc02      	bgt.n	e4586 <iso_year_adjust+0x64>
   e4580:	2b0a      	cmp	r3, #10
   e4582:	db05      	blt.n	e4590 <iso_year_adjust+0x6e>
   e4584:	e02a      	b.n	e45dc <iso_year_adjust+0xba>
   e4586:	2b10      	cmp	r3, #16
   e4588:	db26      	blt.n	e45d8 <iso_year_adjust+0xb6>
   e458a:	2b11      	cmp	r3, #17
   e458c:	dd26      	ble.n	e45dc <iso_year_adjust+0xba>
   e458e:	3b1c      	subs	r3, #28
   e4590:	2b01      	cmp	r3, #1
   e4592:	d923      	bls.n	e45dc <iso_year_adjust+0xba>
   e4594:	e020      	b.n	e45d8 <iso_year_adjust+0xb6>
   e4596:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e459a:	4293      	cmp	r3, r2
   e459c:	dc0e      	bgt.n	e45bc <iso_year_adjust+0x9a>
   e459e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e45a2:	4293      	cmp	r3, r2
   e45a4:	da16      	bge.n	e45d4 <iso_year_adjust+0xb2>
   e45a6:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e45aa:	4293      	cmp	r3, r2
   e45ac:	d012      	beq.n	e45d4 <iso_year_adjust+0xb2>
   e45ae:	db13      	blt.n	e45d8 <iso_year_adjust+0xb6>
   e45b0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e45b4:	3b12      	subs	r3, #18
   e45b6:	2b02      	cmp	r3, #2
   e45b8:	d90c      	bls.n	e45d4 <iso_year_adjust+0xb2>
   e45ba:	e00d      	b.n	e45d8 <iso_year_adjust+0xb6>
   e45bc:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e45c0:	4293      	cmp	r3, r2
   e45c2:	d007      	beq.n	e45d4 <iso_year_adjust+0xb2>
   e45c4:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e45c8:	4293      	cmp	r3, r2
   e45ca:	d003      	beq.n	e45d4 <iso_year_adjust+0xb2>
   e45cc:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e45d0:	4293      	cmp	r3, r2
   e45d2:	d101      	bne.n	e45d8 <iso_year_adjust+0xb6>
   e45d4:	2001      	movs	r0, #1
   e45d6:	bd10      	pop	{r4, pc}
   e45d8:	2000      	movs	r0, #0
   e45da:	bd10      	pop	{r4, pc}
   e45dc:	f04f 30ff 	mov.w	r0, #4294967295
   e45e0:	bd10      	pop	{r4, pc}
	...

000e45e4 <strftime>:
   e45e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e45e8:	b093      	sub	sp, #76	; 0x4c
   e45ea:	460e      	mov	r6, r1
   e45ec:	461d      	mov	r5, r3
   e45ee:	4607      	mov	r7, r0
   e45f0:	4691      	mov	r9, r2
   e45f2:	f001 fc19 	bl	e5e28 <__get_current_time_locale>
   e45f6:	2300      	movs	r3, #0
   e45f8:	9306      	str	r3, [sp, #24]
   e45fa:	461c      	mov	r4, r3
   e45fc:	1e73      	subs	r3, r6, #1
   e45fe:	9003      	str	r0, [sp, #12]
   e4600:	9302      	str	r3, [sp, #8]
   e4602:	f899 3000 	ldrb.w	r3, [r9]
   e4606:	2b00      	cmp	r3, #0
   e4608:	f000 8492 	beq.w	e4f30 <strftime+0x94c>
   e460c:	2b25      	cmp	r3, #37	; 0x25
   e460e:	d008      	beq.n	e4622 <strftime+0x3e>
   e4610:	9a02      	ldr	r2, [sp, #8]
   e4612:	4294      	cmp	r4, r2
   e4614:	f080 8490 	bcs.w	e4f38 <strftime+0x954>
   e4618:	553b      	strb	r3, [r7, r4]
   e461a:	f109 0901 	add.w	r9, r9, #1
   e461e:	3401      	adds	r4, #1
   e4620:	e7ef      	b.n	e4602 <strftime+0x1e>
   e4622:	f899 a001 	ldrb.w	sl, [r9, #1]
   e4626:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e462a:	d007      	beq.n	e463c <strftime+0x58>
   e462c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e4630:	d004      	beq.n	e463c <strftime+0x58>
   e4632:	f109 0901 	add.w	r9, r9, #1
   e4636:	f04f 0a00 	mov.w	sl, #0
   e463a:	e001      	b.n	e4640 <strftime+0x5c>
   e463c:	f109 0902 	add.w	r9, r9, #2
   e4640:	f899 3000 	ldrb.w	r3, [r9]
   e4644:	3b31      	subs	r3, #49	; 0x31
   e4646:	2b08      	cmp	r3, #8
   e4648:	d808      	bhi.n	e465c <strftime+0x78>
   e464a:	4648      	mov	r0, r9
   e464c:	220a      	movs	r2, #10
   e464e:	a90a      	add	r1, sp, #40	; 0x28
   e4650:	f001 fbe0 	bl	e5e14 <strtoul>
   e4654:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e4658:	4680      	mov	r8, r0
   e465a:	e001      	b.n	e4660 <strftime+0x7c>
   e465c:	f04f 0800 	mov.w	r8, #0
   e4660:	f899 3000 	ldrb.w	r3, [r9]
   e4664:	2b45      	cmp	r3, #69	; 0x45
   e4666:	d001      	beq.n	e466c <strftime+0x88>
   e4668:	2b4f      	cmp	r3, #79	; 0x4f
   e466a:	d101      	bne.n	e4670 <strftime+0x8c>
   e466c:	f109 0901 	add.w	r9, r9, #1
   e4670:	f899 0000 	ldrb.w	r0, [r9]
   e4674:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e4678:	2b55      	cmp	r3, #85	; 0x55
   e467a:	f200 845d 	bhi.w	e4f38 <strftime+0x954>
   e467e:	e8df f013 	tbh	[pc, r3, lsl #1]
   e4682:	044a      	.short	0x044a
   e4684:	045b045b 	.word	0x045b045b
   e4688:	045b045b 	.word	0x045b045b
   e468c:	045b045b 	.word	0x045b045b
   e4690:	045b045b 	.word	0x045b045b
   e4694:	045b045b 	.word	0x045b045b
   e4698:	045b045b 	.word	0x045b045b
   e469c:	045b045b 	.word	0x045b045b
   e46a0:	045b045b 	.word	0x045b045b
   e46a4:	045b045b 	.word	0x045b045b
   e46a8:	045b045b 	.word	0x045b045b
   e46ac:	045b045b 	.word	0x045b045b
   e46b0:	045b045b 	.word	0x045b045b
   e46b4:	045b045b 	.word	0x045b045b
   e46b8:	006f045b 	.word	0x006f045b
   e46bc:	00d400a1 	.word	0x00d400a1
   e46c0:	045b011a 	.word	0x045b011a
   e46c4:	01a0013f 	.word	0x01a0013f
   e46c8:	022d0226 	.word	0x022d0226
   e46cc:	045b045b 	.word	0x045b045b
   e46d0:	0260045b 	.word	0x0260045b
   e46d4:	045b045b 	.word	0x045b045b
   e46d8:	045b0268 	.word	0x045b0268
   e46dc:	031d0297 	.word	0x031d0297
   e46e0:	033b0325 	.word	0x033b0325
   e46e4:	03860343 	.word	0x03860343
   e46e8:	03a000c6 	.word	0x03a000c6
   e46ec:	045b041f 	.word	0x045b041f
   e46f0:	045b045b 	.word	0x045b045b
   e46f4:	045b045b 	.word	0x045b045b
   e46f8:	0056045b 	.word	0x0056045b
   e46fc:	00ba0089 	.word	0x00ba0089
   e4700:	010c010c 	.word	0x010c010c
   e4704:	0171045b 	.word	0x0171045b
   e4708:	045b0089 	.word	0x045b0089
   e470c:	0226023d 	.word	0x0226023d
   e4710:	025d022d 	.word	0x025d022d
   e4714:	045b0262 	.word	0x045b0262
   e4718:	045b0268 	.word	0x045b0268
   e471c:	029c00be 	.word	0x029c00be
   e4720:	032e031f 	.word	0x032e031f
   e4724:	037f045b 	.word	0x037f045b
   e4728:	039200c2 	.word	0x039200c2
   e472c:	03e7      	.short	0x03e7
   e472e:	69ab      	ldr	r3, [r5, #24]
   e4730:	9a03      	ldr	r2, [sp, #12]
   e4732:	3318      	adds	r3, #24
   e4734:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e4738:	4640      	mov	r0, r8
   e473a:	f000 fc07 	bl	e4f4c <strlen>
   e473e:	f108 38ff 	add.w	r8, r8, #4294967295
   e4742:	193b      	adds	r3, r7, r4
   e4744:	4420      	add	r0, r4
   e4746:	4284      	cmp	r4, r0
   e4748:	f000 83eb 	beq.w	e4f22 <strftime+0x93e>
   e474c:	9a02      	ldr	r2, [sp, #8]
   e474e:	4294      	cmp	r4, r2
   e4750:	f080 83f2 	bcs.w	e4f38 <strftime+0x954>
   e4754:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e4758:	f803 2b01 	strb.w	r2, [r3], #1
   e475c:	3401      	adds	r4, #1
   e475e:	e7f2      	b.n	e4746 <strftime+0x162>
   e4760:	69ab      	ldr	r3, [r5, #24]
   e4762:	9a03      	ldr	r2, [sp, #12]
   e4764:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e4768:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e476c:	4640      	mov	r0, r8
   e476e:	f000 fbed 	bl	e4f4c <strlen>
   e4772:	f108 38ff 	add.w	r8, r8, #4294967295
   e4776:	193b      	adds	r3, r7, r4
   e4778:	4420      	add	r0, r4
   e477a:	4284      	cmp	r4, r0
   e477c:	f000 83d1 	beq.w	e4f22 <strftime+0x93e>
   e4780:	9a02      	ldr	r2, [sp, #8]
   e4782:	4294      	cmp	r4, r2
   e4784:	f080 83d8 	bcs.w	e4f38 <strftime+0x954>
   e4788:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e478c:	f803 2b01 	strb.w	r2, [r3], #1
   e4790:	3401      	adds	r4, #1
   e4792:	e7f2      	b.n	e477a <strftime+0x196>
   e4794:	692b      	ldr	r3, [r5, #16]
   e4796:	9a03      	ldr	r2, [sp, #12]
   e4798:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e479c:	4640      	mov	r0, r8
   e479e:	f000 fbd5 	bl	e4f4c <strlen>
   e47a2:	f108 38ff 	add.w	r8, r8, #4294967295
   e47a6:	193b      	adds	r3, r7, r4
   e47a8:	4420      	add	r0, r4
   e47aa:	4284      	cmp	r4, r0
   e47ac:	f000 83b9 	beq.w	e4f22 <strftime+0x93e>
   e47b0:	9a02      	ldr	r2, [sp, #8]
   e47b2:	4294      	cmp	r4, r2
   e47b4:	f080 83c0 	bcs.w	e4f38 <strftime+0x954>
   e47b8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e47bc:	f803 2b01 	strb.w	r2, [r3], #1
   e47c0:	3401      	adds	r4, #1
   e47c2:	e7f2      	b.n	e47aa <strftime+0x1c6>
   e47c4:	692b      	ldr	r3, [r5, #16]
   e47c6:	9a03      	ldr	r2, [sp, #12]
   e47c8:	330c      	adds	r3, #12
   e47ca:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e47ce:	4640      	mov	r0, r8
   e47d0:	f000 fbbc 	bl	e4f4c <strlen>
   e47d4:	f108 38ff 	add.w	r8, r8, #4294967295
   e47d8:	193b      	adds	r3, r7, r4
   e47da:	4420      	add	r0, r4
   e47dc:	4284      	cmp	r4, r0
   e47de:	f000 83a0 	beq.w	e4f22 <strftime+0x93e>
   e47e2:	9a02      	ldr	r2, [sp, #8]
   e47e4:	4294      	cmp	r4, r2
   e47e6:	f080 83a7 	bcs.w	e4f38 <strftime+0x954>
   e47ea:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e47ee:	f803 2b01 	strb.w	r2, [r3], #1
   e47f2:	3401      	adds	r4, #1
   e47f4:	e7f2      	b.n	e47dc <strftime+0x1f8>
   e47f6:	9b03      	ldr	r3, [sp, #12]
   e47f8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e47fc:	e00a      	b.n	e4814 <strftime+0x230>
   e47fe:	9b03      	ldr	r3, [sp, #12]
   e4800:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e4804:	e006      	b.n	e4814 <strftime+0x230>
   e4806:	9b03      	ldr	r3, [sp, #12]
   e4808:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e480c:	e002      	b.n	e4814 <strftime+0x230>
   e480e:	9b03      	ldr	r3, [sp, #12]
   e4810:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e4814:	4640      	mov	r0, r8
   e4816:	f000 fb99 	bl	e4f4c <strlen>
   e481a:	f898 3000 	ldrb.w	r3, [r8]
   e481e:	2b00      	cmp	r3, #0
   e4820:	f000 837f 	beq.w	e4f22 <strftime+0x93e>
   e4824:	462b      	mov	r3, r5
   e4826:	4642      	mov	r2, r8
   e4828:	e093      	b.n	e4952 <strftime+0x36e>
   e482a:	49b6      	ldr	r1, [pc, #728]	; (e4b04 <strftime+0x520>)
   e482c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e4830:	458b      	cmp	fp, r1
   e4832:	bfac      	ite	ge
   e4834:	2100      	movge	r1, #0
   e4836:	2101      	movlt	r1, #1
   e4838:	f1bb 0f00 	cmp.w	fp, #0
   e483c:	db04      	blt.n	e4848 <strftime+0x264>
   e483e:	2064      	movs	r0, #100	; 0x64
   e4840:	fb9b f0f0 	sdiv	r0, fp, r0
   e4844:	3013      	adds	r0, #19
   e4846:	e008      	b.n	e485a <strftime+0x276>
   e4848:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e484c:	9107      	str	r1, [sp, #28]
   e484e:	f001 fd37 	bl	e62c0 <abs>
   e4852:	9907      	ldr	r1, [sp, #28]
   e4854:	2364      	movs	r3, #100	; 0x64
   e4856:	fb90 f0f3 	sdiv	r0, r0, r3
   e485a:	f1ba 0f00 	cmp.w	sl, #0
   e485e:	d008      	beq.n	e4872 <strftime+0x28e>
   e4860:	2863      	cmp	r0, #99	; 0x63
   e4862:	dd09      	ble.n	e4878 <strftime+0x294>
   e4864:	4ba8      	ldr	r3, [pc, #672]	; (e4b08 <strftime+0x524>)
   e4866:	4aa9      	ldr	r2, [pc, #676]	; (e4b0c <strftime+0x528>)
   e4868:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e486c:	bf18      	it	ne
   e486e:	4613      	movne	r3, r2
   e4870:	e003      	b.n	e487a <strftime+0x296>
   e4872:	4ba6      	ldr	r3, [pc, #664]	; (e4b0c <strftime+0x528>)
   e4874:	4aa6      	ldr	r2, [pc, #664]	; (e4b10 <strftime+0x52c>)
   e4876:	e001      	b.n	e487c <strftime+0x298>
   e4878:	4ba4      	ldr	r3, [pc, #656]	; (e4b0c <strftime+0x528>)
   e487a:	4aa6      	ldr	r2, [pc, #664]	; (e4b14 <strftime+0x530>)
   e487c:	9001      	str	r0, [sp, #4]
   e487e:	f1b8 0f01 	cmp.w	r8, #1
   e4882:	bf98      	it	ls
   e4884:	f04f 0802 	movls.w	r8, #2
   e4888:	ebc1 0108 	rsb	r1, r1, r8
   e488c:	9100      	str	r1, [sp, #0]
   e488e:	489d      	ldr	r0, [pc, #628]	; (e4b04 <strftime+0x520>)
   e4890:	49a1      	ldr	r1, [pc, #644]	; (e4b18 <strftime+0x534>)
   e4892:	4583      	cmp	fp, r0
   e4894:	bfb8      	it	lt
   e4896:	460b      	movlt	r3, r1
   e4898:	e21e      	b.n	e4cd8 <strftime+0x6f4>
   e489a:	4aa0      	ldr	r2, [pc, #640]	; (e4b1c <strftime+0x538>)
   e489c:	49a0      	ldr	r1, [pc, #640]	; (e4b20 <strftime+0x53c>)
   e489e:	68eb      	ldr	r3, [r5, #12]
   e48a0:	2864      	cmp	r0, #100	; 0x64
   e48a2:	bf08      	it	eq
   e48a4:	460a      	moveq	r2, r1
   e48a6:	1b31      	subs	r1, r6, r4
   e48a8:	1938      	adds	r0, r7, r4
   e48aa:	f7f6 fb7b 	bl	dafa4 <sniprintf>
   e48ae:	2800      	cmp	r0, #0
   e48b0:	f280 8302 	bge.w	e4eb8 <strftime+0x8d4>
   e48b4:	e340      	b.n	e4f38 <strftime+0x954>
   e48b6:	6968      	ldr	r0, [r5, #20]
   e48b8:	692b      	ldr	r3, [r5, #16]
   e48ba:	2800      	cmp	r0, #0
   e48bc:	f103 0b01 	add.w	fp, r3, #1
   e48c0:	eb07 0804 	add.w	r8, r7, r4
   e48c4:	ebc4 0a06 	rsb	sl, r4, r6
   e48c8:	68eb      	ldr	r3, [r5, #12]
   e48ca:	db05      	blt.n	e48d8 <strftime+0x2f4>
   e48cc:	2264      	movs	r2, #100	; 0x64
   e48ce:	fb90 f1f2 	sdiv	r1, r0, r2
   e48d2:	fb02 0011 	mls	r0, r2, r1, r0
   e48d6:	e00a      	b.n	e48ee <strftime+0x30a>
   e48d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e48dc:	9307      	str	r3, [sp, #28]
   e48de:	f001 fcef 	bl	e62c0 <abs>
   e48e2:	2264      	movs	r2, #100	; 0x64
   e48e4:	9b07      	ldr	r3, [sp, #28]
   e48e6:	fb90 f1f2 	sdiv	r1, r0, r2
   e48ea:	fb01 0012 	mls	r0, r1, r2, r0
   e48ee:	4a8d      	ldr	r2, [pc, #564]	; (e4b24 <strftime+0x540>)
   e48f0:	9001      	str	r0, [sp, #4]
   e48f2:	9300      	str	r3, [sp, #0]
   e48f4:	4651      	mov	r1, sl
   e48f6:	465b      	mov	r3, fp
   e48f8:	4640      	mov	r0, r8
   e48fa:	f7f6 fb53 	bl	dafa4 <sniprintf>
   e48fe:	e7d6      	b.n	e48ae <strftime+0x2ca>
   e4900:	2325      	movs	r3, #37	; 0x25
   e4902:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4906:	f1ba 0f00 	cmp.w	sl, #0
   e490a:	d007      	beq.n	e491c <strftime+0x338>
   e490c:	f1b8 0f05 	cmp.w	r8, #5
   e4910:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e4914:	bf98      	it	ls
   e4916:	f04f 0806 	movls.w	r8, #6
   e491a:	e004      	b.n	e4926 <strftime+0x342>
   e491c:	232b      	movs	r3, #43	; 0x2b
   e491e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e4922:	f04f 080a 	mov.w	r8, #10
   e4926:	f1b8 0306 	subs.w	r3, r8, #6
   e492a:	d102      	bne.n	e4932 <strftime+0x34e>
   e492c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e4930:	e00a      	b.n	e4948 <strftime+0x364>
   e4932:	4a7d      	ldr	r2, [pc, #500]	; (e4b28 <strftime+0x544>)
   e4934:	211e      	movs	r1, #30
   e4936:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e493a:	f7f6 fb33 	bl	dafa4 <sniprintf>
   e493e:	2800      	cmp	r0, #0
   e4940:	ddf4      	ble.n	e492c <strftime+0x348>
   e4942:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e4946:	4418      	add	r0, r3
   e4948:	4978      	ldr	r1, [pc, #480]	; (e4b2c <strftime+0x548>)
   e494a:	f7ff fdc7 	bl	e44dc <strcpy>
   e494e:	462b      	mov	r3, r5
   e4950:	aa0a      	add	r2, sp, #40	; 0x28
   e4952:	1b31      	subs	r1, r6, r4
   e4954:	1938      	adds	r0, r7, r4
   e4956:	f7ff fe45 	bl	e45e4 <strftime>
   e495a:	2800      	cmp	r0, #0
   e495c:	f340 82ec 	ble.w	e4f38 <strftime+0x954>
   e4960:	4404      	add	r4, r0
   e4962:	e2de      	b.n	e4f22 <strftime+0x93e>
   e4964:	4628      	mov	r0, r5
   e4966:	f7ff fddc 	bl	e4522 <iso_year_adjust>
   e496a:	4680      	mov	r8, r0
   e496c:	6968      	ldr	r0, [r5, #20]
   e496e:	2800      	cmp	r0, #0
   e4970:	db05      	blt.n	e497e <strftime+0x39a>
   e4972:	2264      	movs	r2, #100	; 0x64
   e4974:	fb90 f1f2 	sdiv	r1, r0, r2
   e4978:	fb02 0011 	mls	r0, r2, r1, r0
   e497c:	e008      	b.n	e4990 <strftime+0x3ac>
   e497e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4982:	f001 fc9d 	bl	e62c0 <abs>
   e4986:	2264      	movs	r2, #100	; 0x64
   e4988:	fb90 f3f2 	sdiv	r3, r0, r2
   e498c:	fb03 0012 	mls	r0, r3, r2, r0
   e4990:	f1b8 0f00 	cmp.w	r8, #0
   e4994:	da06      	bge.n	e49a4 <strftime+0x3c0>
   e4996:	696a      	ldr	r2, [r5, #20]
   e4998:	4b65      	ldr	r3, [pc, #404]	; (e4b30 <strftime+0x54c>)
   e499a:	429a      	cmp	r2, r3
   e499c:	bfb8      	it	lt
   e499e:	f04f 0801 	movlt.w	r8, #1
   e49a2:	e006      	b.n	e49b2 <strftime+0x3ce>
   e49a4:	d005      	beq.n	e49b2 <strftime+0x3ce>
   e49a6:	696a      	ldr	r2, [r5, #20]
   e49a8:	4b56      	ldr	r3, [pc, #344]	; (e4b04 <strftime+0x520>)
   e49aa:	429a      	cmp	r2, r3
   e49ac:	bfb8      	it	lt
   e49ae:	f04f 38ff 	movlt.w	r8, #4294967295
   e49b2:	2364      	movs	r3, #100	; 0x64
   e49b4:	4440      	add	r0, r8
   e49b6:	fb90 f2f3 	sdiv	r2, r0, r3
   e49ba:	fb03 0012 	mls	r0, r3, r2, r0
   e49be:	4418      	add	r0, r3
   e49c0:	e1f9      	b.n	e4db6 <strftime+0x7d2>
   e49c2:	4b50      	ldr	r3, [pc, #320]	; (e4b04 <strftime+0x520>)
   e49c4:	6969      	ldr	r1, [r5, #20]
   e49c6:	9108      	str	r1, [sp, #32]
   e49c8:	4299      	cmp	r1, r3
   e49ca:	bfac      	ite	ge
   e49cc:	2300      	movge	r3, #0
   e49ce:	2301      	movlt	r3, #1
   e49d0:	4628      	mov	r0, r5
   e49d2:	9307      	str	r3, [sp, #28]
   e49d4:	f7ff fda5 	bl	e4522 <iso_year_adjust>
   e49d8:	9908      	ldr	r1, [sp, #32]
   e49da:	2900      	cmp	r1, #0
   e49dc:	4683      	mov	fp, r0
   e49de:	db04      	blt.n	e49ea <strftime+0x406>
   e49e0:	2364      	movs	r3, #100	; 0x64
   e49e2:	fb91 f3f3 	sdiv	r3, r1, r3
   e49e6:	3313      	adds	r3, #19
   e49e8:	e008      	b.n	e49fc <strftime+0x418>
   e49ea:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e49ee:	9108      	str	r1, [sp, #32]
   e49f0:	f001 fc66 	bl	e62c0 <abs>
   e49f4:	9908      	ldr	r1, [sp, #32]
   e49f6:	2364      	movs	r3, #100	; 0x64
   e49f8:	fb90 f3f3 	sdiv	r3, r0, r3
   e49fc:	6968      	ldr	r0, [r5, #20]
   e49fe:	2800      	cmp	r0, #0
   e4a00:	db06      	blt.n	e4a10 <strftime+0x42c>
   e4a02:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4a06:	fb90 fcfe 	sdiv	ip, r0, lr
   e4a0a:	fb0e 001c 	mls	r0, lr, ip, r0
   e4a0e:	e00d      	b.n	e4a2c <strftime+0x448>
   e4a10:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4a14:	9109      	str	r1, [sp, #36]	; 0x24
   e4a16:	9308      	str	r3, [sp, #32]
   e4a18:	f001 fc52 	bl	e62c0 <abs>
   e4a1c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4a20:	9909      	ldr	r1, [sp, #36]	; 0x24
   e4a22:	9b08      	ldr	r3, [sp, #32]
   e4a24:	fb90 fcfe 	sdiv	ip, r0, lr
   e4a28:	fb0c 001e 	mls	r0, ip, lr, r0
   e4a2c:	f1bb 0f00 	cmp.w	fp, #0
   e4a30:	da08      	bge.n	e4a44 <strftime+0x460>
   e4a32:	6969      	ldr	r1, [r5, #20]
   e4a34:	4a3e      	ldr	r2, [pc, #248]	; (e4b30 <strftime+0x54c>)
   e4a36:	4291      	cmp	r1, r2
   e4a38:	da0a      	bge.n	e4a50 <strftime+0x46c>
   e4a3a:	f04f 0b01 	mov.w	fp, #1
   e4a3e:	f8cd b01c 	str.w	fp, [sp, #28]
   e4a42:	e005      	b.n	e4a50 <strftime+0x46c>
   e4a44:	d004      	beq.n	e4a50 <strftime+0x46c>
   e4a46:	4a2f      	ldr	r2, [pc, #188]	; (e4b04 <strftime+0x520>)
   e4a48:	4291      	cmp	r1, r2
   e4a4a:	bfb8      	it	lt
   e4a4c:	f04f 3bff 	movlt.w	fp, #4294967295
   e4a50:	eb0b 0200 	add.w	r2, fp, r0
   e4a54:	1c50      	adds	r0, r2, #1
   e4a56:	d102      	bne.n	e4a5e <strftime+0x47a>
   e4a58:	3b01      	subs	r3, #1
   e4a5a:	2263      	movs	r2, #99	; 0x63
   e4a5c:	e003      	b.n	e4a66 <strftime+0x482>
   e4a5e:	2a64      	cmp	r2, #100	; 0x64
   e4a60:	bf04      	itt	eq
   e4a62:	3301      	addeq	r3, #1
   e4a64:	2200      	moveq	r2, #0
   e4a66:	2064      	movs	r0, #100	; 0x64
   e4a68:	fb00 2303 	mla	r3, r0, r3, r2
   e4a6c:	9a07      	ldr	r2, [sp, #28]
   e4a6e:	b142      	cbz	r2, e4a82 <strftime+0x49e>
   e4a70:	222d      	movs	r2, #45	; 0x2d
   e4a72:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e4a76:	f1b8 0f00 	cmp.w	r8, #0
   e4a7a:	d013      	beq.n	e4aa4 <strftime+0x4c0>
   e4a7c:	f108 38ff 	add.w	r8, r8, #4294967295
   e4a80:	e010      	b.n	e4aa4 <strftime+0x4c0>
   e4a82:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e4a86:	d110      	bne.n	e4aaa <strftime+0x4c6>
   e4a88:	f242 720f 	movw	r2, #9999	; 0x270f
   e4a8c:	4293      	cmp	r3, r2
   e4a8e:	d90c      	bls.n	e4aaa <strftime+0x4c6>
   e4a90:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e4a94:	f1b8 0f00 	cmp.w	r8, #0
   e4a98:	d1f0      	bne.n	e4a7c <strftime+0x498>
   e4a9a:	aa12      	add	r2, sp, #72	; 0x48
   e4a9c:	2125      	movs	r1, #37	; 0x25
   e4a9e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e4aa2:	e00a      	b.n	e4aba <strftime+0x4d6>
   e4aa4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e4aa8:	e000      	b.n	e4aac <strftime+0x4c8>
   e4aaa:	aa0a      	add	r2, sp, #40	; 0x28
   e4aac:	2125      	movs	r1, #37	; 0x25
   e4aae:	7011      	strb	r1, [r2, #0]
   e4ab0:	f1ba 0f00 	cmp.w	sl, #0
   e4ab4:	d101      	bne.n	e4aba <strftime+0x4d6>
   e4ab6:	1c50      	adds	r0, r2, #1
   e4ab8:	e002      	b.n	e4ac0 <strftime+0x4dc>
   e4aba:	2130      	movs	r1, #48	; 0x30
   e4abc:	1c90      	adds	r0, r2, #2
   e4abe:	7051      	strb	r1, [r2, #1]
   e4ac0:	491c      	ldr	r1, [pc, #112]	; (e4b34 <strftime+0x550>)
   e4ac2:	9307      	str	r3, [sp, #28]
   e4ac4:	f7ff fd0a 	bl	e44dc <strcpy>
   e4ac8:	9b07      	ldr	r3, [sp, #28]
   e4aca:	9300      	str	r3, [sp, #0]
   e4acc:	e1ad      	b.n	e4e2a <strftime+0x846>
   e4ace:	4a14      	ldr	r2, [pc, #80]	; (e4b20 <strftime+0x53c>)
   e4ad0:	4912      	ldr	r1, [pc, #72]	; (e4b1c <strftime+0x538>)
   e4ad2:	68ab      	ldr	r3, [r5, #8]
   e4ad4:	286b      	cmp	r0, #107	; 0x6b
   e4ad6:	bf08      	it	eq
   e4ad8:	460a      	moveq	r2, r1
   e4ada:	e6e4      	b.n	e48a6 <strftime+0x2c2>
   e4adc:	68a9      	ldr	r1, [r5, #8]
   e4ade:	230c      	movs	r3, #12
   e4ae0:	b131      	cbz	r1, e4af0 <strftime+0x50c>
   e4ae2:	4299      	cmp	r1, r3
   e4ae4:	bf0e      	itee	eq
   e4ae6:	460b      	moveq	r3, r1
   e4ae8:	fb91 f2f3 	sdivne	r2, r1, r3
   e4aec:	fb03 1312 	mlsne	r3, r3, r2, r1
   e4af0:	4a0a      	ldr	r2, [pc, #40]	; (e4b1c <strftime+0x538>)
   e4af2:	490b      	ldr	r1, [pc, #44]	; (e4b20 <strftime+0x53c>)
   e4af4:	2849      	cmp	r0, #73	; 0x49
   e4af6:	bf08      	it	eq
   e4af8:	460a      	moveq	r2, r1
   e4afa:	e6d4      	b.n	e48a6 <strftime+0x2c2>
   e4afc:	69eb      	ldr	r3, [r5, #28]
   e4afe:	4a0e      	ldr	r2, [pc, #56]	; (e4b38 <strftime+0x554>)
   e4b00:	3301      	adds	r3, #1
   e4b02:	e6d0      	b.n	e48a6 <strftime+0x2c2>
   e4b04:	fffff894 	.word	0xfffff894
   e4b08:	000e901b 	.word	0x000e901b
   e4b0c:	000e7963 	.word	0x000e7963
   e4b10:	000e900c 	.word	0x000e900c
   e4b14:	000e9013 	.word	0x000e9013
   e4b18:	000e901d 	.word	0x000e901d
   e4b1c:	000e901f 	.word	0x000e901f
   e4b20:	000e902d 	.word	0x000e902d
   e4b24:	000e9023 	.word	0x000e9023
   e4b28:	000e9032 	.word	0x000e9032
   e4b2c:	000e9036 	.word	0x000e9036
   e4b30:	fffff895 	.word	0xfffff895
   e4b34:	000e903e 	.word	0x000e903e
   e4b38:	000e9042 	.word	0x000e9042
   e4b3c:	692b      	ldr	r3, [r5, #16]
   e4b3e:	3301      	adds	r3, #1
   e4b40:	e13d      	b.n	e4dbe <strftime+0x7da>
   e4b42:	686b      	ldr	r3, [r5, #4]
   e4b44:	e13b      	b.n	e4dbe <strftime+0x7da>
   e4b46:	9b02      	ldr	r3, [sp, #8]
   e4b48:	429c      	cmp	r4, r3
   e4b4a:	f080 81f5 	bcs.w	e4f38 <strftime+0x954>
   e4b4e:	230a      	movs	r3, #10
   e4b50:	e1e5      	b.n	e4f1e <strftime+0x93a>
   e4b52:	68ab      	ldr	r3, [r5, #8]
   e4b54:	9a03      	ldr	r2, [sp, #12]
   e4b56:	2b0b      	cmp	r3, #11
   e4b58:	bfcc      	ite	gt
   e4b5a:	23a4      	movgt	r3, #164	; 0xa4
   e4b5c:	23a0      	movle	r3, #160	; 0xa0
   e4b5e:	4413      	add	r3, r2
   e4b60:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e4b64:	4640      	mov	r0, r8
   e4b66:	f000 f9f1 	bl	e4f4c <strlen>
   e4b6a:	4bb2      	ldr	r3, [pc, #712]	; (e4e34 <strftime+0x850>)
   e4b6c:	f8d3 e000 	ldr.w	lr, [r3]
   e4b70:	1939      	adds	r1, r7, r4
   e4b72:	4642      	mov	r2, r8
   e4b74:	4420      	add	r0, r4
   e4b76:	4284      	cmp	r4, r0
   e4b78:	f000 81d3 	beq.w	e4f22 <strftime+0x93e>
   e4b7c:	9b02      	ldr	r3, [sp, #8]
   e4b7e:	429c      	cmp	r4, r3
   e4b80:	f080 81da 	bcs.w	e4f38 <strftime+0x954>
   e4b84:	f899 3000 	ldrb.w	r3, [r9]
   e4b88:	2b50      	cmp	r3, #80	; 0x50
   e4b8a:	f104 0401 	add.w	r4, r4, #1
   e4b8e:	7813      	ldrb	r3, [r2, #0]
   e4b90:	d10a      	bne.n	e4ba8 <strftime+0x5c4>
   e4b92:	eb0e 0c03 	add.w	ip, lr, r3
   e4b96:	f89c c001 	ldrb.w	ip, [ip, #1]
   e4b9a:	f00c 0c03 	and.w	ip, ip, #3
   e4b9e:	f1bc 0f01 	cmp.w	ip, #1
   e4ba2:	bf08      	it	eq
   e4ba4:	3320      	addeq	r3, #32
   e4ba6:	b2db      	uxtb	r3, r3
   e4ba8:	f801 3b01 	strb.w	r3, [r1], #1
   e4bac:	3201      	adds	r2, #1
   e4bae:	e7e2      	b.n	e4b76 <strftime+0x592>
   e4bb0:	686b      	ldr	r3, [r5, #4]
   e4bb2:	9300      	str	r3, [sp, #0]
   e4bb4:	4aa0      	ldr	r2, [pc, #640]	; (e4e38 <strftime+0x854>)
   e4bb6:	68ab      	ldr	r3, [r5, #8]
   e4bb8:	e139      	b.n	e4e2e <strftime+0x84a>
   e4bba:	6a2b      	ldr	r3, [r5, #32]
   e4bbc:	2b00      	cmp	r3, #0
   e4bbe:	db17      	blt.n	e4bf0 <strftime+0x60c>
   e4bc0:	f001 f9f6 	bl	e5fb0 <__tz_lock>
   e4bc4:	9b06      	ldr	r3, [sp, #24]
   e4bc6:	b91b      	cbnz	r3, e4bd0 <strftime+0x5ec>
   e4bc8:	f001 f9f4 	bl	e5fb4 <_tzset_unlocked>
   e4bcc:	2301      	movs	r3, #1
   e4bce:	9306      	str	r3, [sp, #24]
   e4bd0:	f001 fef0 	bl	e69b4 <__gettzinfo>
   e4bd4:	6a2b      	ldr	r3, [r5, #32]
   e4bd6:	2b00      	cmp	r3, #0
   e4bd8:	bfd4      	ite	le
   e4bda:	2300      	movle	r3, #0
   e4bdc:	2301      	movgt	r3, #1
   e4bde:	221c      	movs	r2, #28
   e4be0:	fb02 0003 	mla	r0, r2, r3, r0
   e4be4:	6a03      	ldr	r3, [r0, #32]
   e4be6:	f1c3 0800 	rsb	r8, r3, #0
   e4bea:	f001 f9e2 	bl	e5fb2 <__tz_unlock>
   e4bee:	e001      	b.n	e4bf4 <strftime+0x610>
   e4bf0:	f04f 0800 	mov.w	r8, #0
   e4bf4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e4bf8:	4670      	mov	r0, lr
   e4bfa:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e4bfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e4c02:	f141 33ff 	adc.w	r3, r1, #4294967295
   e4c06:	2a00      	cmp	r2, #0
   e4c08:	f173 0b00 	sbcs.w	fp, r3, #0
   e4c0c:	ebc4 0c06 	rsb	ip, r4, r6
   e4c10:	eb07 0a04 	add.w	sl, r7, r4
   e4c14:	da03      	bge.n	e4c1e <strftime+0x63a>
   e4c16:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e4c1a:	f141 33ff 	adc.w	r3, r1, #4294967295
   e4c1e:	0891      	lsrs	r1, r2, #2
   e4c20:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e4c24:	109b      	asrs	r3, r3, #2
   e4c26:	9104      	str	r1, [sp, #16]
   e4c28:	9305      	str	r3, [sp, #20]
   e4c2a:	f10e 31ff 	add.w	r1, lr, #4294967295
   e4c2e:	2364      	movs	r3, #100	; 0x64
   e4c30:	fb91 f1f3 	sdiv	r1, r1, r3
   e4c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e4c38:	1a52      	subs	r2, r2, r1
   e4c3a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e4c3e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e4c42:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e4c46:	fb90 f1f1 	sdiv	r1, r0, r1
   e4c4a:	1852      	adds	r2, r2, r1
   e4c4c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4c50:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e4c54:	f240 116d 	movw	r1, #365	; 0x16d
   e4c58:	fb01 fe0e 	mul.w	lr, r1, lr
   e4c5c:	69e9      	ldr	r1, [r5, #28]
   e4c5e:	eb12 020e 	adds.w	r2, r2, lr
   e4c62:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e4c66:	1852      	adds	r2, r2, r1
   e4c68:	f04f 0e18 	mov.w	lr, #24
   e4c6c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4c70:	fba2 010e 	umull	r0, r1, r2, lr
   e4c74:	fb0e 1103 	mla	r1, lr, r3, r1
   e4c78:	68ab      	ldr	r3, [r5, #8]
   e4c7a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e4c7e:	18c0      	adds	r0, r0, r3
   e4c80:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e4c84:	fba0 230e 	umull	r2, r3, r0, lr
   e4c88:	fb0e 3301 	mla	r3, lr, r1, r3
   e4c8c:	6869      	ldr	r1, [r5, #4]
   e4c8e:	1852      	adds	r2, r2, r1
   e4c90:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e4c94:	fba2 010e 	umull	r0, r1, r2, lr
   e4c98:	fb0e 1103 	mla	r1, lr, r3, r1
   e4c9c:	682b      	ldr	r3, [r5, #0]
   e4c9e:	4a67      	ldr	r2, [pc, #412]	; (e4e3c <strftime+0x858>)
   e4ca0:	18c0      	adds	r0, r0, r3
   e4ca2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e4ca6:	ebb0 0008 	subs.w	r0, r0, r8
   e4caa:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e4cae:	e9cd 0100 	strd	r0, r1, [sp]
   e4cb2:	4661      	mov	r1, ip
   e4cb4:	4650      	mov	r0, sl
   e4cb6:	f7f6 f975 	bl	dafa4 <sniprintf>
   e4cba:	e5f8      	b.n	e48ae <strftime+0x2ca>
   e4cbc:	682b      	ldr	r3, [r5, #0]
   e4cbe:	e07e      	b.n	e4dbe <strftime+0x7da>
   e4cc0:	9b02      	ldr	r3, [sp, #8]
   e4cc2:	429c      	cmp	r4, r3
   e4cc4:	f080 8138 	bcs.w	e4f38 <strftime+0x954>
   e4cc8:	2309      	movs	r3, #9
   e4cca:	e128      	b.n	e4f1e <strftime+0x93a>
   e4ccc:	682b      	ldr	r3, [r5, #0]
   e4cce:	9301      	str	r3, [sp, #4]
   e4cd0:	686b      	ldr	r3, [r5, #4]
   e4cd2:	9300      	str	r3, [sp, #0]
   e4cd4:	4a5a      	ldr	r2, [pc, #360]	; (e4e40 <strftime+0x85c>)
   e4cd6:	68ab      	ldr	r3, [r5, #8]
   e4cd8:	1b31      	subs	r1, r6, r4
   e4cda:	1938      	adds	r0, r7, r4
   e4cdc:	e60d      	b.n	e48fa <strftime+0x316>
   e4cde:	9b02      	ldr	r3, [sp, #8]
   e4ce0:	429c      	cmp	r4, r3
   e4ce2:	f080 8129 	bcs.w	e4f38 <strftime+0x954>
   e4ce6:	69ab      	ldr	r3, [r5, #24]
   e4ce8:	1c62      	adds	r2, r4, #1
   e4cea:	b90b      	cbnz	r3, e4cf0 <strftime+0x70c>
   e4cec:	2337      	movs	r3, #55	; 0x37
   e4cee:	e000      	b.n	e4cf2 <strftime+0x70e>
   e4cf0:	3330      	adds	r3, #48	; 0x30
   e4cf2:	553b      	strb	r3, [r7, r4]
   e4cf4:	4614      	mov	r4, r2
   e4cf6:	e114      	b.n	e4f22 <strftime+0x93e>
   e4cf8:	69eb      	ldr	r3, [r5, #28]
   e4cfa:	69aa      	ldr	r2, [r5, #24]
   e4cfc:	3307      	adds	r3, #7
   e4cfe:	1a9b      	subs	r3, r3, r2
   e4d00:	2207      	movs	r2, #7
   e4d02:	fb93 f3f2 	sdiv	r3, r3, r2
   e4d06:	e05a      	b.n	e4dbe <strftime+0x7da>
   e4d08:	4628      	mov	r0, r5
   e4d0a:	f7ff fc0a 	bl	e4522 <iso_year_adjust>
   e4d0e:	69aa      	ldr	r2, [r5, #24]
   e4d10:	b10a      	cbz	r2, e4d16 <strftime+0x732>
   e4d12:	1e53      	subs	r3, r2, #1
   e4d14:	e000      	b.n	e4d18 <strftime+0x734>
   e4d16:	2306      	movs	r3, #6
   e4d18:	2800      	cmp	r0, #0
   e4d1a:	dc2f      	bgt.n	e4d7c <strftime+0x798>
   e4d1c:	69ea      	ldr	r2, [r5, #28]
   e4d1e:	d101      	bne.n	e4d24 <strftime+0x740>
   e4d20:	320a      	adds	r2, #10
   e4d22:	e03b      	b.n	e4d9c <strftime+0x7b8>
   e4d24:	1a9a      	subs	r2, r3, r2
   e4d26:	696b      	ldr	r3, [r5, #20]
   e4d28:	f240 716b 	movw	r1, #1899	; 0x76b
   e4d2c:	2b00      	cmp	r3, #0
   e4d2e:	bfb4      	ite	lt
   e4d30:	4608      	movlt	r0, r1
   e4d32:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e4d36:	4418      	add	r0, r3
   e4d38:	0781      	lsls	r1, r0, #30
   e4d3a:	d107      	bne.n	e4d4c <strftime+0x768>
   e4d3c:	4601      	mov	r1, r0
   e4d3e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e4d42:	fb90 f0fe 	sdiv	r0, r0, lr
   e4d46:	fb0e 1110 	mls	r1, lr, r0, r1
   e4d4a:	b981      	cbnz	r1, e4d6e <strftime+0x78a>
   e4d4c:	2b00      	cmp	r3, #0
   e4d4e:	f240 716b 	movw	r1, #1899	; 0x76b
   e4d52:	bfa8      	it	ge
   e4d54:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e4d58:	4419      	add	r1, r3
   e4d5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e4d5e:	fb91 f0f3 	sdiv	r0, r1, r3
   e4d62:	fb03 1110 	mls	r1, r3, r0, r1
   e4d66:	fab1 f181 	clz	r1, r1
   e4d6a:	0949      	lsrs	r1, r1, #5
   e4d6c:	e000      	b.n	e4d70 <strftime+0x78c>
   e4d6e:	2101      	movs	r1, #1
   e4d70:	1a52      	subs	r2, r2, r1
   e4d72:	2a05      	cmp	r2, #5
   e4d74:	bfb4      	ite	lt
   e4d76:	2335      	movlt	r3, #53	; 0x35
   e4d78:	2334      	movge	r3, #52	; 0x34
   e4d7a:	e020      	b.n	e4dbe <strftime+0x7da>
   e4d7c:	2301      	movs	r3, #1
   e4d7e:	e01e      	b.n	e4dbe <strftime+0x7da>
   e4d80:	9b02      	ldr	r3, [sp, #8]
   e4d82:	429c      	cmp	r4, r3
   e4d84:	f080 80d8 	bcs.w	e4f38 <strftime+0x954>
   e4d88:	69ab      	ldr	r3, [r5, #24]
   e4d8a:	3330      	adds	r3, #48	; 0x30
   e4d8c:	e0c7      	b.n	e4f1e <strftime+0x93a>
   e4d8e:	69aa      	ldr	r2, [r5, #24]
   e4d90:	b10a      	cbz	r2, e4d96 <strftime+0x7b2>
   e4d92:	1e53      	subs	r3, r2, #1
   e4d94:	e000      	b.n	e4d98 <strftime+0x7b4>
   e4d96:	2306      	movs	r3, #6
   e4d98:	69ea      	ldr	r2, [r5, #28]
   e4d9a:	3207      	adds	r2, #7
   e4d9c:	1ad2      	subs	r2, r2, r3
   e4d9e:	2307      	movs	r3, #7
   e4da0:	fb92 f3f3 	sdiv	r3, r2, r3
   e4da4:	e00b      	b.n	e4dbe <strftime+0x7da>
   e4da6:	6968      	ldr	r0, [r5, #20]
   e4da8:	2800      	cmp	r0, #0
   e4daa:	da03      	bge.n	e4db4 <strftime+0x7d0>
   e4dac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e4db0:	f001 fa86 	bl	e62c0 <abs>
   e4db4:	2364      	movs	r3, #100	; 0x64
   e4db6:	fb90 f2f3 	sdiv	r2, r0, r3
   e4dba:	fb02 0313 	mls	r3, r2, r3, r0
   e4dbe:	4a21      	ldr	r2, [pc, #132]	; (e4e44 <strftime+0x860>)
   e4dc0:	e571      	b.n	e48a6 <strftime+0x2c2>
   e4dc2:	696b      	ldr	r3, [r5, #20]
   e4dc4:	4a20      	ldr	r2, [pc, #128]	; (e4e48 <strftime+0x864>)
   e4dc6:	4293      	cmp	r3, r2
   e4dc8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e4dcc:	da05      	bge.n	e4dda <strftime+0x7f6>
   e4dce:	232d      	movs	r3, #45	; 0x2d
   e4dd0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4dd4:	f1cb 0b00 	rsb	fp, fp, #0
   e4dd8:	e008      	b.n	e4dec <strftime+0x808>
   e4dda:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e4dde:	d10d      	bne.n	e4dfc <strftime+0x818>
   e4de0:	f242 730f 	movw	r3, #9999	; 0x270f
   e4de4:	459b      	cmp	fp, r3
   e4de6:	d911      	bls.n	e4e0c <strftime+0x828>
   e4de8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e4dec:	f1b8 0f00 	cmp.w	r8, #0
   e4df0:	d001      	beq.n	e4df6 <strftime+0x812>
   e4df2:	f108 38ff 	add.w	r8, r8, #4294967295
   e4df6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e4dfa:	e000      	b.n	e4dfe <strftime+0x81a>
   e4dfc:	ab0a      	add	r3, sp, #40	; 0x28
   e4dfe:	2225      	movs	r2, #37	; 0x25
   e4e00:	701a      	strb	r2, [r3, #0]
   e4e02:	f1ba 0f00 	cmp.w	sl, #0
   e4e06:	d108      	bne.n	e4e1a <strftime+0x836>
   e4e08:	1c58      	adds	r0, r3, #1
   e4e0a:	e009      	b.n	e4e20 <strftime+0x83c>
   e4e0c:	f1b8 0f00 	cmp.w	r8, #0
   e4e10:	d1f4      	bne.n	e4dfc <strftime+0x818>
   e4e12:	2325      	movs	r3, #37	; 0x25
   e4e14:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e4e18:	ab0a      	add	r3, sp, #40	; 0x28
   e4e1a:	2230      	movs	r2, #48	; 0x30
   e4e1c:	1c98      	adds	r0, r3, #2
   e4e1e:	705a      	strb	r2, [r3, #1]
   e4e20:	490a      	ldr	r1, [pc, #40]	; (e4e4c <strftime+0x868>)
   e4e22:	f7ff fb5b 	bl	e44dc <strcpy>
   e4e26:	f8cd b000 	str.w	fp, [sp]
   e4e2a:	4643      	mov	r3, r8
   e4e2c:	aa0a      	add	r2, sp, #40	; 0x28
   e4e2e:	1b31      	subs	r1, r6, r4
   e4e30:	1938      	adds	r0, r7, r4
   e4e32:	e03e      	b.n	e4eb2 <strftime+0x8ce>
   e4e34:	2003d6c4 	.word	0x2003d6c4
   e4e38:	000e9051 	.word	0x000e9051
   e4e3c:	000e9047 	.word	0x000e9047
   e4e40:	000e904c 	.word	0x000e904c
   e4e44:	000e902d 	.word	0x000e902d
   e4e48:	fffff894 	.word	0xfffff894
   e4e4c:	000e903e 	.word	0x000e903e
   e4e50:	6a2b      	ldr	r3, [r5, #32]
   e4e52:	2b00      	cmp	r3, #0
   e4e54:	db65      	blt.n	e4f22 <strftime+0x93e>
   e4e56:	f001 f8ab 	bl	e5fb0 <__tz_lock>
   e4e5a:	9b06      	ldr	r3, [sp, #24]
   e4e5c:	b91b      	cbnz	r3, e4e66 <strftime+0x882>
   e4e5e:	f001 f8a9 	bl	e5fb4 <_tzset_unlocked>
   e4e62:	2301      	movs	r3, #1
   e4e64:	9306      	str	r3, [sp, #24]
   e4e66:	f001 fda5 	bl	e69b4 <__gettzinfo>
   e4e6a:	6a2b      	ldr	r3, [r5, #32]
   e4e6c:	2b00      	cmp	r3, #0
   e4e6e:	bfd4      	ite	le
   e4e70:	2300      	movle	r3, #0
   e4e72:	2301      	movgt	r3, #1
   e4e74:	221c      	movs	r2, #28
   e4e76:	fb02 0003 	mla	r0, r2, r3, r0
   e4e7a:	eb07 0a04 	add.w	sl, r7, r4
   e4e7e:	6a03      	ldr	r3, [r0, #32]
   e4e80:	f1c3 0800 	rsb	r8, r3, #0
   e4e84:	f001 f895 	bl	e5fb2 <__tz_unlock>
   e4e88:	233c      	movs	r3, #60	; 0x3c
   e4e8a:	fb98 f0f3 	sdiv	r0, r8, r3
   e4e8e:	9307      	str	r3, [sp, #28]
   e4e90:	f001 fe2c 	bl	e6aec <labs>
   e4e94:	9b07      	ldr	r3, [sp, #28]
   e4e96:	fb90 f2f3 	sdiv	r2, r0, r3
   e4e9a:	ebc4 0b06 	rsb	fp, r4, r6
   e4e9e:	fb02 0013 	mls	r0, r2, r3, r0
   e4ea2:	4a28      	ldr	r2, [pc, #160]	; (e4f44 <strftime+0x960>)
   e4ea4:	9000      	str	r0, [sp, #0]
   e4ea6:	4659      	mov	r1, fp
   e4ea8:	4650      	mov	r0, sl
   e4eaa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e4eae:	fb98 f3f3 	sdiv	r3, r8, r3
   e4eb2:	f7f6 f877 	bl	dafa4 <sniprintf>
   e4eb6:	e4fa      	b.n	e48ae <strftime+0x2ca>
   e4eb8:	4404      	add	r4, r0
   e4eba:	42a6      	cmp	r6, r4
   e4ebc:	d831      	bhi.n	e4f22 <strftime+0x93e>
   e4ebe:	e03b      	b.n	e4f38 <strftime+0x954>
   e4ec0:	6a2b      	ldr	r3, [r5, #32]
   e4ec2:	2b00      	cmp	r3, #0
   e4ec4:	db2d      	blt.n	e4f22 <strftime+0x93e>
   e4ec6:	f001 f873 	bl	e5fb0 <__tz_lock>
   e4eca:	9b06      	ldr	r3, [sp, #24]
   e4ecc:	b91b      	cbnz	r3, e4ed6 <strftime+0x8f2>
   e4ece:	f001 f871 	bl	e5fb4 <_tzset_unlocked>
   e4ed2:	2301      	movs	r3, #1
   e4ed4:	9306      	str	r3, [sp, #24]
   e4ed6:	6a2b      	ldr	r3, [r5, #32]
   e4ed8:	4a1b      	ldr	r2, [pc, #108]	; (e4f48 <strftime+0x964>)
   e4eda:	2b00      	cmp	r3, #0
   e4edc:	bfd4      	ite	le
   e4ede:	2300      	movle	r3, #0
   e4ee0:	2301      	movgt	r3, #1
   e4ee2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e4ee6:	4640      	mov	r0, r8
   e4ee8:	f000 f830 	bl	e4f4c <strlen>
   e4eec:	f108 38ff 	add.w	r8, r8, #4294967295
   e4ef0:	193b      	adds	r3, r7, r4
   e4ef2:	4420      	add	r0, r4
   e4ef4:	4284      	cmp	r4, r0
   e4ef6:	d00b      	beq.n	e4f10 <strftime+0x92c>
   e4ef8:	9a02      	ldr	r2, [sp, #8]
   e4efa:	4294      	cmp	r4, r2
   e4efc:	d205      	bcs.n	e4f0a <strftime+0x926>
   e4efe:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e4f02:	f803 2b01 	strb.w	r2, [r3], #1
   e4f06:	3401      	adds	r4, #1
   e4f08:	e7f4      	b.n	e4ef4 <strftime+0x910>
   e4f0a:	f001 f852 	bl	e5fb2 <__tz_unlock>
   e4f0e:	e013      	b.n	e4f38 <strftime+0x954>
   e4f10:	f001 f84f 	bl	e5fb2 <__tz_unlock>
   e4f14:	e005      	b.n	e4f22 <strftime+0x93e>
   e4f16:	9b02      	ldr	r3, [sp, #8]
   e4f18:	429c      	cmp	r4, r3
   e4f1a:	d20d      	bcs.n	e4f38 <strftime+0x954>
   e4f1c:	2325      	movs	r3, #37	; 0x25
   e4f1e:	553b      	strb	r3, [r7, r4]
   e4f20:	3401      	adds	r4, #1
   e4f22:	f899 3000 	ldrb.w	r3, [r9]
   e4f26:	b11b      	cbz	r3, e4f30 <strftime+0x94c>
   e4f28:	f109 0901 	add.w	r9, r9, #1
   e4f2c:	f7ff bb69 	b.w	e4602 <strftime+0x1e>
   e4f30:	b126      	cbz	r6, e4f3c <strftime+0x958>
   e4f32:	2300      	movs	r3, #0
   e4f34:	553b      	strb	r3, [r7, r4]
   e4f36:	e001      	b.n	e4f3c <strftime+0x958>
   e4f38:	2000      	movs	r0, #0
   e4f3a:	e000      	b.n	e4f3e <strftime+0x95a>
   e4f3c:	4620      	mov	r0, r4
   e4f3e:	b013      	add	sp, #76	; 0x4c
   e4f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4f44:	000e905b 	.word	0x000e905b
   e4f48:	2003d764 	.word	0x2003d764

000e4f4c <strlen>:
   e4f4c:	4603      	mov	r3, r0
   e4f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e4f52:	2a00      	cmp	r2, #0
   e4f54:	d1fb      	bne.n	e4f4e <strlen+0x2>
   e4f56:	1a18      	subs	r0, r3, r0
   e4f58:	3801      	subs	r0, #1
   e4f5a:	4770      	bx	lr

000e4f5c <strncmp>:
   e4f5c:	b530      	push	{r4, r5, lr}
   e4f5e:	b182      	cbz	r2, e4f82 <strncmp+0x26>
   e4f60:	1e45      	subs	r5, r0, #1
   e4f62:	3901      	subs	r1, #1
   e4f64:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e4f68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e4f6c:	42a3      	cmp	r3, r4
   e4f6e:	d106      	bne.n	e4f7e <strncmp+0x22>
   e4f70:	43ec      	mvns	r4, r5
   e4f72:	4414      	add	r4, r2
   e4f74:	42e0      	cmn	r0, r4
   e4f76:	d001      	beq.n	e4f7c <strncmp+0x20>
   e4f78:	2b00      	cmp	r3, #0
   e4f7a:	d1f3      	bne.n	e4f64 <strncmp+0x8>
   e4f7c:	461c      	mov	r4, r3
   e4f7e:	1b18      	subs	r0, r3, r4
   e4f80:	bd30      	pop	{r4, r5, pc}
   e4f82:	4610      	mov	r0, r2
   e4f84:	bd30      	pop	{r4, r5, pc}

000e4f86 <strncpy>:
   e4f86:	b510      	push	{r4, lr}
   e4f88:	4603      	mov	r3, r0
   e4f8a:	b142      	cbz	r2, e4f9e <strncpy+0x18>
   e4f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e4f90:	f803 4b01 	strb.w	r4, [r3], #1
   e4f94:	3a01      	subs	r2, #1
   e4f96:	2c00      	cmp	r4, #0
   e4f98:	d1f7      	bne.n	e4f8a <strncpy+0x4>
   e4f9a:	441a      	add	r2, r3
   e4f9c:	e000      	b.n	e4fa0 <strncpy+0x1a>
   e4f9e:	bd10      	pop	{r4, pc}
   e4fa0:	4293      	cmp	r3, r2
   e4fa2:	d002      	beq.n	e4faa <strncpy+0x24>
   e4fa4:	f803 4b01 	strb.w	r4, [r3], #1
   e4fa8:	e7fa      	b.n	e4fa0 <strncpy+0x1a>
   e4faa:	bd10      	pop	{r4, pc}

000e4fac <sulp>:
   e4fac:	b570      	push	{r4, r5, r6, lr}
   e4fae:	4604      	mov	r4, r0
   e4fb0:	460d      	mov	r5, r1
   e4fb2:	ec45 4b10 	vmov	d0, r4, r5
   e4fb6:	4616      	mov	r6, r2
   e4fb8:	f002 f862 	bl	e7080 <__ulp>
   e4fbc:	ec51 0b10 	vmov	r0, r1, d0
   e4fc0:	b17e      	cbz	r6, e4fe2 <sulp+0x36>
   e4fc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e4fc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e4fca:	2b00      	cmp	r3, #0
   e4fcc:	dd09      	ble.n	e4fe2 <sulp+0x36>
   e4fce:	051b      	lsls	r3, r3, #20
   e4fd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e4fd4:	2400      	movs	r4, #0
   e4fd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e4fda:	4622      	mov	r2, r4
   e4fdc:	462b      	mov	r3, r5
   e4fde:	f7fe f99f 	bl	e3320 <__aeabi_dmul>
   e4fe2:	bd70      	pop	{r4, r5, r6, pc}
   e4fe4:	0000      	movs	r0, r0
	...

000e4fe8 <_strtod_r>:
   e4fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e4fec:	b09d      	sub	sp, #116	; 0x74
   e4fee:	2300      	movs	r3, #0
   e4ff0:	9002      	str	r0, [sp, #8]
   e4ff2:	460c      	mov	r4, r1
   e4ff4:	9213      	str	r2, [sp, #76]	; 0x4c
   e4ff6:	9318      	str	r3, [sp, #96]	; 0x60
   e4ff8:	f04f 0a00 	mov.w	sl, #0
   e4ffc:	f04f 0b00 	mov.w	fp, #0
   e5000:	9117      	str	r1, [sp, #92]	; 0x5c
   e5002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5004:	781a      	ldrb	r2, [r3, #0]
   e5006:	2a0d      	cmp	r2, #13
   e5008:	d805      	bhi.n	e5016 <_strtod_r+0x2e>
   e500a:	2a09      	cmp	r2, #9
   e500c:	d213      	bcs.n	e5036 <_strtod_r+0x4e>
   e500e:	2a00      	cmp	r2, #0
   e5010:	f000 81ac 	beq.w	e536c <_strtod_r+0x384>
   e5014:	e012      	b.n	e503c <_strtod_r+0x54>
   e5016:	2a2b      	cmp	r2, #43	; 0x2b
   e5018:	d004      	beq.n	e5024 <_strtod_r+0x3c>
   e501a:	2a2d      	cmp	r2, #45	; 0x2d
   e501c:	d004      	beq.n	e5028 <_strtod_r+0x40>
   e501e:	2a20      	cmp	r2, #32
   e5020:	d10c      	bne.n	e503c <_strtod_r+0x54>
   e5022:	e008      	b.n	e5036 <_strtod_r+0x4e>
   e5024:	2200      	movs	r2, #0
   e5026:	e000      	b.n	e502a <_strtod_r+0x42>
   e5028:	2201      	movs	r2, #1
   e502a:	920c      	str	r2, [sp, #48]	; 0x30
   e502c:	1c5a      	adds	r2, r3, #1
   e502e:	9217      	str	r2, [sp, #92]	; 0x5c
   e5030:	785b      	ldrb	r3, [r3, #1]
   e5032:	b92b      	cbnz	r3, e5040 <_strtod_r+0x58>
   e5034:	e19a      	b.n	e536c <_strtod_r+0x384>
   e5036:	3301      	adds	r3, #1
   e5038:	9317      	str	r3, [sp, #92]	; 0x5c
   e503a:	e7e2      	b.n	e5002 <_strtod_r+0x1a>
   e503c:	2300      	movs	r3, #0
   e503e:	930c      	str	r3, [sp, #48]	; 0x30
   e5040:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e5042:	782b      	ldrb	r3, [r5, #0]
   e5044:	2b30      	cmp	r3, #48	; 0x30
   e5046:	d15c      	bne.n	e5102 <_strtod_r+0x11a>
   e5048:	786b      	ldrb	r3, [r5, #1]
   e504a:	2b58      	cmp	r3, #88	; 0x58
   e504c:	d001      	beq.n	e5052 <_strtod_r+0x6a>
   e504e:	2b78      	cmp	r3, #120	; 0x78
   e5050:	d14c      	bne.n	e50ec <_strtod_r+0x104>
   e5052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e5054:	9301      	str	r3, [sp, #4]
   e5056:	ab18      	add	r3, sp, #96	; 0x60
   e5058:	9300      	str	r3, [sp, #0]
   e505a:	4aa9      	ldr	r2, [pc, #676]	; (e5300 <_strtod_r+0x318>)
   e505c:	9802      	ldr	r0, [sp, #8]
   e505e:	ab19      	add	r3, sp, #100	; 0x64
   e5060:	a917      	add	r1, sp, #92	; 0x5c
   e5062:	f001 f990 	bl	e6386 <__gethex>
   e5066:	f010 0607 	ands.w	r6, r0, #7
   e506a:	4604      	mov	r4, r0
   e506c:	f000 8587 	beq.w	e5b7e <_strtod_r+0xb96>
   e5070:	2e06      	cmp	r6, #6
   e5072:	d105      	bne.n	e5080 <_strtod_r+0x98>
   e5074:	3501      	adds	r5, #1
   e5076:	2300      	movs	r3, #0
   e5078:	9517      	str	r5, [sp, #92]	; 0x5c
   e507a:	930c      	str	r3, [sp, #48]	; 0x30
   e507c:	f000 bd7f 	b.w	e5b7e <_strtod_r+0xb96>
   e5080:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e5082:	b13a      	cbz	r2, e5094 <_strtod_r+0xac>
   e5084:	2135      	movs	r1, #53	; 0x35
   e5086:	a81a      	add	r0, sp, #104	; 0x68
   e5088:	f002 f8e7 	bl	e725a <__copybits>
   e508c:	9918      	ldr	r1, [sp, #96]	; 0x60
   e508e:	9802      	ldr	r0, [sp, #8]
   e5090:	f001 fd65 	bl	e6b5e <_Bfree>
   e5094:	2e06      	cmp	r6, #6
   e5096:	d822      	bhi.n	e50de <_strtod_r+0xf6>
   e5098:	e8df f006 	tbb	[pc, r6]
   e509c:	18080d04 	.word	0x18080d04
   e50a0:	0d1d      	.short	0x0d1d
   e50a2:	04          	.byte	0x04
   e50a3:	00          	.byte	0x00
   e50a4:	f04f 0b00 	mov.w	fp, #0
   e50a8:	46da      	mov	sl, fp
   e50aa:	e018      	b.n	e50de <_strtod_r+0xf6>
   e50ac:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e50b0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e50b4:	e013      	b.n	e50de <_strtod_r+0xf6>
   e50b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e50b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e50ba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e50be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e50c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e50c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e50ca:	e008      	b.n	e50de <_strtod_r+0xf6>
   e50cc:	f8df b234 	ldr.w	fp, [pc, #564]	; e5304 <_strtod_r+0x31c>
   e50d0:	f04f 0a00 	mov.w	sl, #0
   e50d4:	e003      	b.n	e50de <_strtod_r+0xf6>
   e50d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e50da:	f04f 3aff 	mov.w	sl, #4294967295
   e50de:	0721      	lsls	r1, r4, #28
   e50e0:	f140 854d 	bpl.w	e5b7e <_strtod_r+0xb96>
   e50e4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e50e8:	f000 bd49 	b.w	e5b7e <_strtod_r+0xb96>
   e50ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e50ee:	1c5a      	adds	r2, r3, #1
   e50f0:	9217      	str	r2, [sp, #92]	; 0x5c
   e50f2:	785b      	ldrb	r3, [r3, #1]
   e50f4:	2b30      	cmp	r3, #48	; 0x30
   e50f6:	d0f9      	beq.n	e50ec <_strtod_r+0x104>
   e50f8:	2b00      	cmp	r3, #0
   e50fa:	f000 8540 	beq.w	e5b7e <_strtod_r+0xb96>
   e50fe:	2301      	movs	r3, #1
   e5100:	e000      	b.n	e5104 <_strtod_r+0x11c>
   e5102:	2300      	movs	r3, #0
   e5104:	f04f 0800 	mov.w	r8, #0
   e5108:	9306      	str	r3, [sp, #24]
   e510a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e510c:	9307      	str	r3, [sp, #28]
   e510e:	f8cd 8014 	str.w	r8, [sp, #20]
   e5112:	f8cd 8010 	str.w	r8, [sp, #16]
   e5116:	220a      	movs	r2, #10
   e5118:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e511a:	782e      	ldrb	r6, [r5, #0]
   e511c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e5120:	b2d9      	uxtb	r1, r3
   e5122:	2909      	cmp	r1, #9
   e5124:	d80e      	bhi.n	e5144 <_strtod_r+0x15c>
   e5126:	9904      	ldr	r1, [sp, #16]
   e5128:	2908      	cmp	r1, #8
   e512a:	bfdd      	ittte	le
   e512c:	9905      	ldrle	r1, [sp, #20]
   e512e:	fb02 3301 	mlale	r3, r2, r1, r3
   e5132:	9305      	strle	r3, [sp, #20]
   e5134:	fb02 3808 	mlagt	r8, r2, r8, r3
   e5138:	9b04      	ldr	r3, [sp, #16]
   e513a:	3501      	adds	r5, #1
   e513c:	3301      	adds	r3, #1
   e513e:	9304      	str	r3, [sp, #16]
   e5140:	9517      	str	r5, [sp, #92]	; 0x5c
   e5142:	e7e9      	b.n	e5118 <_strtod_r+0x130>
   e5144:	9802      	ldr	r0, [sp, #8]
   e5146:	f7fe ff31 	bl	e3fac <_localeconv_r>
   e514a:	6807      	ldr	r7, [r0, #0]
   e514c:	9802      	ldr	r0, [sp, #8]
   e514e:	f7fe ff2d 	bl	e3fac <_localeconv_r>
   e5152:	6800      	ldr	r0, [r0, #0]
   e5154:	f7ff fefa 	bl	e4f4c <strlen>
   e5158:	4639      	mov	r1, r7
   e515a:	4602      	mov	r2, r0
   e515c:	4628      	mov	r0, r5
   e515e:	f7ff fefd 	bl	e4f5c <strncmp>
   e5162:	4607      	mov	r7, r0
   e5164:	b128      	cbz	r0, e5172 <_strtod_r+0x18a>
   e5166:	2000      	movs	r0, #0
   e5168:	4633      	mov	r3, r6
   e516a:	9d04      	ldr	r5, [sp, #16]
   e516c:	4602      	mov	r2, r0
   e516e:	4601      	mov	r1, r0
   e5170:	e057      	b.n	e5222 <_strtod_r+0x23a>
   e5172:	9802      	ldr	r0, [sp, #8]
   e5174:	f7fe ff1a 	bl	e3fac <_localeconv_r>
   e5178:	6800      	ldr	r0, [r0, #0]
   e517a:	f7ff fee7 	bl	e4f4c <strlen>
   e517e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5180:	181a      	adds	r2, r3, r0
   e5182:	9217      	str	r2, [sp, #92]	; 0x5c
   e5184:	9a04      	ldr	r2, [sp, #16]
   e5186:	5c1b      	ldrb	r3, [r3, r0]
   e5188:	2a00      	cmp	r2, #0
   e518a:	d142      	bne.n	e5212 <_strtod_r+0x22a>
   e518c:	4610      	mov	r0, r2
   e518e:	2b30      	cmp	r3, #48	; 0x30
   e5190:	d105      	bne.n	e519e <_strtod_r+0x1b6>
   e5192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5194:	1c5a      	adds	r2, r3, #1
   e5196:	9217      	str	r2, [sp, #92]	; 0x5c
   e5198:	3001      	adds	r0, #1
   e519a:	785b      	ldrb	r3, [r3, #1]
   e519c:	e7f7      	b.n	e518e <_strtod_r+0x1a6>
   e519e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e51a2:	2a08      	cmp	r2, #8
   e51a4:	d843      	bhi.n	e522e <_strtod_r+0x246>
   e51a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e51a8:	9207      	str	r2, [sp, #28]
   e51aa:	4602      	mov	r2, r0
   e51ac:	2000      	movs	r0, #0
   e51ae:	4605      	mov	r5, r0
   e51b0:	3b30      	subs	r3, #48	; 0x30
   e51b2:	f100 0101 	add.w	r1, r0, #1
   e51b6:	d026      	beq.n	e5206 <_strtod_r+0x21e>
   e51b8:	440a      	add	r2, r1
   e51ba:	eb05 0c00 	add.w	ip, r5, r0
   e51be:	4629      	mov	r1, r5
   e51c0:	260a      	movs	r6, #10
   e51c2:	4561      	cmp	r1, ip
   e51c4:	d00e      	beq.n	e51e4 <_strtod_r+0x1fc>
   e51c6:	3101      	adds	r1, #1
   e51c8:	f101 3eff 	add.w	lr, r1, #4294967295
   e51cc:	f1be 0f08 	cmp.w	lr, #8
   e51d0:	dc03      	bgt.n	e51da <_strtod_r+0x1f2>
   e51d2:	9f05      	ldr	r7, [sp, #20]
   e51d4:	4377      	muls	r7, r6
   e51d6:	9705      	str	r7, [sp, #20]
   e51d8:	e7f3      	b.n	e51c2 <_strtod_r+0x1da>
   e51da:	2910      	cmp	r1, #16
   e51dc:	bfd8      	it	le
   e51de:	fb06 f808 	mulle.w	r8, r6, r8
   e51e2:	e7ee      	b.n	e51c2 <_strtod_r+0x1da>
   e51e4:	4428      	add	r0, r5
   e51e6:	2808      	cmp	r0, #8
   e51e8:	f100 0501 	add.w	r5, r0, #1
   e51ec:	dc05      	bgt.n	e51fa <_strtod_r+0x212>
   e51ee:	9805      	ldr	r0, [sp, #20]
   e51f0:	210a      	movs	r1, #10
   e51f2:	fb01 3300 	mla	r3, r1, r0, r3
   e51f6:	9305      	str	r3, [sp, #20]
   e51f8:	e004      	b.n	e5204 <_strtod_r+0x21c>
   e51fa:	2d10      	cmp	r5, #16
   e51fc:	bfdc      	itt	le
   e51fe:	210a      	movle	r1, #10
   e5200:	fb01 3808 	mlale	r8, r1, r8, r3
   e5204:	2100      	movs	r1, #0
   e5206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5208:	1c58      	adds	r0, r3, #1
   e520a:	9017      	str	r0, [sp, #92]	; 0x5c
   e520c:	785b      	ldrb	r3, [r3, #1]
   e520e:	4608      	mov	r0, r1
   e5210:	e002      	b.n	e5218 <_strtod_r+0x230>
   e5212:	9d04      	ldr	r5, [sp, #16]
   e5214:	4638      	mov	r0, r7
   e5216:	463a      	mov	r2, r7
   e5218:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e521c:	2909      	cmp	r1, #9
   e521e:	d9c7      	bls.n	e51b0 <_strtod_r+0x1c8>
   e5220:	2101      	movs	r1, #1
   e5222:	2b65      	cmp	r3, #101	; 0x65
   e5224:	d001      	beq.n	e522a <_strtod_r+0x242>
   e5226:	2b45      	cmp	r3, #69	; 0x45
   e5228:	d151      	bne.n	e52ce <_strtod_r+0x2e6>
   e522a:	b96d      	cbnz	r5, e5248 <_strtod_r+0x260>
   e522c:	e004      	b.n	e5238 <_strtod_r+0x250>
   e522e:	2b65      	cmp	r3, #101	; 0x65
   e5230:	f040 84b3 	bne.w	e5b9a <_strtod_r+0xbb2>
   e5234:	2200      	movs	r2, #0
   e5236:	2101      	movs	r1, #1
   e5238:	b928      	cbnz	r0, e5246 <_strtod_r+0x25e>
   e523a:	9b06      	ldr	r3, [sp, #24]
   e523c:	2b00      	cmp	r3, #0
   e523e:	f000 8095 	beq.w	e536c <_strtod_r+0x384>
   e5242:	4605      	mov	r5, r0
   e5244:	e000      	b.n	e5248 <_strtod_r+0x260>
   e5246:	2500      	movs	r5, #0
   e5248:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e524a:	1c63      	adds	r3, r4, #1
   e524c:	9317      	str	r3, [sp, #92]	; 0x5c
   e524e:	7863      	ldrb	r3, [r4, #1]
   e5250:	2b2b      	cmp	r3, #43	; 0x2b
   e5252:	d006      	beq.n	e5262 <_strtod_r+0x27a>
   e5254:	2b2d      	cmp	r3, #45	; 0x2d
   e5256:	d002      	beq.n	e525e <_strtod_r+0x276>
   e5258:	2600      	movs	r6, #0
   e525a:	9603      	str	r6, [sp, #12]
   e525c:	e006      	b.n	e526c <_strtod_r+0x284>
   e525e:	2301      	movs	r3, #1
   e5260:	e000      	b.n	e5264 <_strtod_r+0x27c>
   e5262:	2300      	movs	r3, #0
   e5264:	9303      	str	r3, [sp, #12]
   e5266:	1ca3      	adds	r3, r4, #2
   e5268:	9317      	str	r3, [sp, #92]	; 0x5c
   e526a:	78a3      	ldrb	r3, [r4, #2]
   e526c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e5270:	2e09      	cmp	r6, #9
   e5272:	d82b      	bhi.n	e52cc <_strtod_r+0x2e4>
   e5274:	2b30      	cmp	r3, #48	; 0x30
   e5276:	d104      	bne.n	e5282 <_strtod_r+0x29a>
   e5278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e527a:	1c5e      	adds	r6, r3, #1
   e527c:	9617      	str	r6, [sp, #92]	; 0x5c
   e527e:	785b      	ldrb	r3, [r3, #1]
   e5280:	e7f8      	b.n	e5274 <_strtod_r+0x28c>
   e5282:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e5286:	2e08      	cmp	r6, #8
   e5288:	d821      	bhi.n	e52ce <_strtod_r+0x2e6>
   e528a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e528e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5290:	f04f 0c0a 	mov.w	ip, #10
   e5294:	461f      	mov	r7, r3
   e5296:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5298:	1c5e      	adds	r6, r3, #1
   e529a:	9617      	str	r6, [sp, #92]	; 0x5c
   e529c:	785b      	ldrb	r3, [r3, #1]
   e529e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e52a2:	f1b9 0f09 	cmp.w	r9, #9
   e52a6:	d804      	bhi.n	e52b2 <_strtod_r+0x2ca>
   e52a8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e52ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e52b0:	e7f1      	b.n	e5296 <_strtod_r+0x2ae>
   e52b2:	1bf6      	subs	r6, r6, r7
   e52b4:	2e08      	cmp	r6, #8
   e52b6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e52ba:	dc02      	bgt.n	e52c2 <_strtod_r+0x2da>
   e52bc:	45f1      	cmp	r9, lr
   e52be:	bfa8      	it	ge
   e52c0:	46f1      	movge	r9, lr
   e52c2:	9e03      	ldr	r6, [sp, #12]
   e52c4:	b12e      	cbz	r6, e52d2 <_strtod_r+0x2ea>
   e52c6:	f1c9 0900 	rsb	r9, r9, #0
   e52ca:	e002      	b.n	e52d2 <_strtod_r+0x2ea>
   e52cc:	9417      	str	r4, [sp, #92]	; 0x5c
   e52ce:	f04f 0900 	mov.w	r9, #0
   e52d2:	2d00      	cmp	r5, #0
   e52d4:	d153      	bne.n	e537e <_strtod_r+0x396>
   e52d6:	2800      	cmp	r0, #0
   e52d8:	f040 8451 	bne.w	e5b7e <_strtod_r+0xb96>
   e52dc:	9a06      	ldr	r2, [sp, #24]
   e52de:	2a00      	cmp	r2, #0
   e52e0:	f040 844d 	bne.w	e5b7e <_strtod_r+0xb96>
   e52e4:	2900      	cmp	r1, #0
   e52e6:	d141      	bne.n	e536c <_strtod_r+0x384>
   e52e8:	2b4e      	cmp	r3, #78	; 0x4e
   e52ea:	d020      	beq.n	e532e <_strtod_r+0x346>
   e52ec:	dc02      	bgt.n	e52f4 <_strtod_r+0x30c>
   e52ee:	2b49      	cmp	r3, #73	; 0x49
   e52f0:	d00a      	beq.n	e5308 <_strtod_r+0x320>
   e52f2:	e03b      	b.n	e536c <_strtod_r+0x384>
   e52f4:	2b69      	cmp	r3, #105	; 0x69
   e52f6:	d007      	beq.n	e5308 <_strtod_r+0x320>
   e52f8:	2b6e      	cmp	r3, #110	; 0x6e
   e52fa:	d018      	beq.n	e532e <_strtod_r+0x346>
   e52fc:	e036      	b.n	e536c <_strtod_r+0x384>
   e52fe:	bf00      	nop
   e5300:	000e9068 	.word	0x000e9068
   e5304:	7ff00000 	.word	0x7ff00000
   e5308:	49a8      	ldr	r1, [pc, #672]	; (e55ac <_strtod_r+0x5c4>)
   e530a:	a817      	add	r0, sp, #92	; 0x5c
   e530c:	f001 fa6c 	bl	e67e8 <__match>
   e5310:	b360      	cbz	r0, e536c <_strtod_r+0x384>
   e5312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5314:	49a6      	ldr	r1, [pc, #664]	; (e55b0 <_strtod_r+0x5c8>)
   e5316:	3b01      	subs	r3, #1
   e5318:	a817      	add	r0, sp, #92	; 0x5c
   e531a:	9317      	str	r3, [sp, #92]	; 0x5c
   e531c:	f001 fa64 	bl	e67e8 <__match>
   e5320:	b910      	cbnz	r0, e5328 <_strtod_r+0x340>
   e5322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5324:	3301      	adds	r3, #1
   e5326:	9317      	str	r3, [sp, #92]	; 0x5c
   e5328:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e55cc <_strtod_r+0x5e4>
   e532c:	e01a      	b.n	e5364 <_strtod_r+0x37c>
   e532e:	49a1      	ldr	r1, [pc, #644]	; (e55b4 <_strtod_r+0x5cc>)
   e5330:	a817      	add	r0, sp, #92	; 0x5c
   e5332:	f001 fa59 	bl	e67e8 <__match>
   e5336:	b1c8      	cbz	r0, e536c <_strtod_r+0x384>
   e5338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e533a:	781b      	ldrb	r3, [r3, #0]
   e533c:	2b28      	cmp	r3, #40	; 0x28
   e533e:	d10f      	bne.n	e5360 <_strtod_r+0x378>
   e5340:	aa1a      	add	r2, sp, #104	; 0x68
   e5342:	499d      	ldr	r1, [pc, #628]	; (e55b8 <_strtod_r+0x5d0>)
   e5344:	a817      	add	r0, sp, #92	; 0x5c
   e5346:	f001 fa62 	bl	e680e <__hexnan>
   e534a:	2805      	cmp	r0, #5
   e534c:	d108      	bne.n	e5360 <_strtod_r+0x378>
   e534e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e5350:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e5354:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e5358:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e535c:	f000 bc0f 	b.w	e5b7e <_strtod_r+0xb96>
   e5360:	f8df b26c 	ldr.w	fp, [pc, #620]	; e55d0 <_strtod_r+0x5e8>
   e5364:	f04f 0a00 	mov.w	sl, #0
   e5368:	f000 bc09 	b.w	e5b7e <_strtod_r+0xb96>
   e536c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e536e:	9417      	str	r4, [sp, #92]	; 0x5c
   e5370:	2b00      	cmp	r3, #0
   e5372:	f000 840f 	beq.w	e5b94 <_strtod_r+0xbac>
   e5376:	2300      	movs	r3, #0
   e5378:	930c      	str	r3, [sp, #48]	; 0x30
   e537a:	f000 bc02 	b.w	e5b82 <_strtod_r+0xb9a>
   e537e:	9b04      	ldr	r3, [sp, #16]
   e5380:	9805      	ldr	r0, [sp, #20]
   e5382:	2b00      	cmp	r3, #0
   e5384:	bf08      	it	eq
   e5386:	462b      	moveq	r3, r5
   e5388:	2d10      	cmp	r5, #16
   e538a:	462c      	mov	r4, r5
   e538c:	ebc2 0909 	rsb	r9, r2, r9
   e5390:	bfa8      	it	ge
   e5392:	2410      	movge	r4, #16
   e5394:	9304      	str	r3, [sp, #16]
   e5396:	f7fd ff4d 	bl	e3234 <__aeabi_ui2d>
   e539a:	2c09      	cmp	r4, #9
   e539c:	4682      	mov	sl, r0
   e539e:	468b      	mov	fp, r1
   e53a0:	dd13      	ble.n	e53ca <_strtod_r+0x3e2>
   e53a2:	4b86      	ldr	r3, [pc, #536]	; (e55bc <_strtod_r+0x5d4>)
   e53a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e53a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e53ac:	f7fd ffb8 	bl	e3320 <__aeabi_dmul>
   e53b0:	4606      	mov	r6, r0
   e53b2:	4640      	mov	r0, r8
   e53b4:	460f      	mov	r7, r1
   e53b6:	f7fd ff3d 	bl	e3234 <__aeabi_ui2d>
   e53ba:	4602      	mov	r2, r0
   e53bc:	460b      	mov	r3, r1
   e53be:	4630      	mov	r0, r6
   e53c0:	4639      	mov	r1, r7
   e53c2:	f7fd fdfb 	bl	e2fbc <__adddf3>
   e53c6:	4682      	mov	sl, r0
   e53c8:	468b      	mov	fp, r1
   e53ca:	2d0f      	cmp	r5, #15
   e53cc:	dc36      	bgt.n	e543c <_strtod_r+0x454>
   e53ce:	f1b9 0f00 	cmp.w	r9, #0
   e53d2:	f000 83d4 	beq.w	e5b7e <_strtod_r+0xb96>
   e53d6:	dd24      	ble.n	e5422 <_strtod_r+0x43a>
   e53d8:	f1b9 0f16 	cmp.w	r9, #22
   e53dc:	dc07      	bgt.n	e53ee <_strtod_r+0x406>
   e53de:	4d77      	ldr	r5, [pc, #476]	; (e55bc <_strtod_r+0x5d4>)
   e53e0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e53e4:	4652      	mov	r2, sl
   e53e6:	465b      	mov	r3, fp
   e53e8:	e9d9 0100 	ldrd	r0, r1, [r9]
   e53ec:	e014      	b.n	e5418 <_strtod_r+0x430>
   e53ee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e53f2:	4599      	cmp	r9, r3
   e53f4:	dc22      	bgt.n	e543c <_strtod_r+0x454>
   e53f6:	4c71      	ldr	r4, [pc, #452]	; (e55bc <_strtod_r+0x5d4>)
   e53f8:	f1c5 050f 	rsb	r5, r5, #15
   e53fc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e5400:	ebc5 0509 	rsb	r5, r5, r9
   e5404:	4652      	mov	r2, sl
   e5406:	465b      	mov	r3, fp
   e5408:	e9d1 0100 	ldrd	r0, r1, [r1]
   e540c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e5410:	f7fd ff86 	bl	e3320 <__aeabi_dmul>
   e5414:	e9d4 2300 	ldrd	r2, r3, [r4]
   e5418:	f7fd ff82 	bl	e3320 <__aeabi_dmul>
   e541c:	4682      	mov	sl, r0
   e541e:	468b      	mov	fp, r1
   e5420:	e3ad      	b.n	e5b7e <_strtod_r+0xb96>
   e5422:	f119 0f16 	cmn.w	r9, #22
   e5426:	db09      	blt.n	e543c <_strtod_r+0x454>
   e5428:	4d64      	ldr	r5, [pc, #400]	; (e55bc <_strtod_r+0x5d4>)
   e542a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e542e:	e9d9 2300 	ldrd	r2, r3, [r9]
   e5432:	4650      	mov	r0, sl
   e5434:	4659      	mov	r1, fp
   e5436:	f7fe f89d 	bl	e3574 <__aeabi_ddiv>
   e543a:	e7ef      	b.n	e541c <_strtod_r+0x434>
   e543c:	1b2c      	subs	r4, r5, r4
   e543e:	444c      	add	r4, r9
   e5440:	2c00      	cmp	r4, #0
   e5442:	dd57      	ble.n	e54f4 <_strtod_r+0x50c>
   e5444:	f014 010f 	ands.w	r1, r4, #15
   e5448:	d00a      	beq.n	e5460 <_strtod_r+0x478>
   e544a:	4b5c      	ldr	r3, [pc, #368]	; (e55bc <_strtod_r+0x5d4>)
   e544c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e5450:	4652      	mov	r2, sl
   e5452:	465b      	mov	r3, fp
   e5454:	e9d1 0100 	ldrd	r0, r1, [r1]
   e5458:	f7fd ff62 	bl	e3320 <__aeabi_dmul>
   e545c:	4682      	mov	sl, r0
   e545e:	468b      	mov	fp, r1
   e5460:	f034 040f 	bics.w	r4, r4, #15
   e5464:	f000 80b8 	beq.w	e55d8 <_strtod_r+0x5f0>
   e5468:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e546c:	dd0b      	ble.n	e5486 <_strtod_r+0x49e>
   e546e:	2400      	movs	r4, #0
   e5470:	4625      	mov	r5, r4
   e5472:	9405      	str	r4, [sp, #20]
   e5474:	9404      	str	r4, [sp, #16]
   e5476:	9a02      	ldr	r2, [sp, #8]
   e5478:	f8df b150 	ldr.w	fp, [pc, #336]	; e55cc <_strtod_r+0x5e4>
   e547c:	2322      	movs	r3, #34	; 0x22
   e547e:	6013      	str	r3, [r2, #0]
   e5480:	f04f 0a00 	mov.w	sl, #0
   e5484:	e187      	b.n	e5796 <_strtod_r+0x7ae>
   e5486:	4e4e      	ldr	r6, [pc, #312]	; (e55c0 <_strtod_r+0x5d8>)
   e5488:	2300      	movs	r3, #0
   e548a:	1124      	asrs	r4, r4, #4
   e548c:	4650      	mov	r0, sl
   e548e:	4659      	mov	r1, fp
   e5490:	4698      	mov	r8, r3
   e5492:	4637      	mov	r7, r6
   e5494:	2c01      	cmp	r4, #1
   e5496:	dd0b      	ble.n	e54b0 <_strtod_r+0x4c8>
   e5498:	07e2      	lsls	r2, r4, #31
   e549a:	d504      	bpl.n	e54a6 <_strtod_r+0x4be>
   e549c:	e9d6 2300 	ldrd	r2, r3, [r6]
   e54a0:	f7fd ff3e 	bl	e3320 <__aeabi_dmul>
   e54a4:	2301      	movs	r3, #1
   e54a6:	f108 0801 	add.w	r8, r8, #1
   e54aa:	1064      	asrs	r4, r4, #1
   e54ac:	3608      	adds	r6, #8
   e54ae:	e7f1      	b.n	e5494 <_strtod_r+0x4ac>
   e54b0:	b10b      	cbz	r3, e54b6 <_strtod_r+0x4ce>
   e54b2:	4682      	mov	sl, r0
   e54b4:	468b      	mov	fp, r1
   e54b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e54ba:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e54be:	4652      	mov	r2, sl
   e54c0:	465b      	mov	r3, fp
   e54c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   e54c6:	f7fd ff2b 	bl	e3320 <__aeabi_dmul>
   e54ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e54ce:	468b      	mov	fp, r1
   e54d0:	460a      	mov	r2, r1
   e54d2:	0d1b      	lsrs	r3, r3, #20
   e54d4:	493b      	ldr	r1, [pc, #236]	; (e55c4 <_strtod_r+0x5dc>)
   e54d6:	051b      	lsls	r3, r3, #20
   e54d8:	428b      	cmp	r3, r1
   e54da:	4682      	mov	sl, r0
   e54dc:	d8c7      	bhi.n	e546e <_strtod_r+0x486>
   e54de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e54e2:	428b      	cmp	r3, r1
   e54e4:	bf86      	itte	hi
   e54e6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e55d4 <_strtod_r+0x5ec>
   e54ea:	f04f 3aff 	movhi.w	sl, #4294967295
   e54ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e54f2:	e071      	b.n	e55d8 <_strtod_r+0x5f0>
   e54f4:	d070      	beq.n	e55d8 <_strtod_r+0x5f0>
   e54f6:	4264      	negs	r4, r4
   e54f8:	f014 020f 	ands.w	r2, r4, #15
   e54fc:	d00a      	beq.n	e5514 <_strtod_r+0x52c>
   e54fe:	4b2f      	ldr	r3, [pc, #188]	; (e55bc <_strtod_r+0x5d4>)
   e5500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e5504:	4650      	mov	r0, sl
   e5506:	4659      	mov	r1, fp
   e5508:	e9d3 2300 	ldrd	r2, r3, [r3]
   e550c:	f7fe f832 	bl	e3574 <__aeabi_ddiv>
   e5510:	4682      	mov	sl, r0
   e5512:	468b      	mov	fp, r1
   e5514:	1124      	asrs	r4, r4, #4
   e5516:	d05f      	beq.n	e55d8 <_strtod_r+0x5f0>
   e5518:	2c1f      	cmp	r4, #31
   e551a:	dd04      	ble.n	e5526 <_strtod_r+0x53e>
   e551c:	2400      	movs	r4, #0
   e551e:	4625      	mov	r5, r4
   e5520:	9405      	str	r4, [sp, #20]
   e5522:	9404      	str	r4, [sp, #16]
   e5524:	e130      	b.n	e5788 <_strtod_r+0x7a0>
   e5526:	f014 0f10 	tst.w	r4, #16
   e552a:	bf0c      	ite	eq
   e552c:	2300      	moveq	r3, #0
   e552e:	236a      	movne	r3, #106	; 0x6a
   e5530:	4e25      	ldr	r6, [pc, #148]	; (e55c8 <_strtod_r+0x5e0>)
   e5532:	9303      	str	r3, [sp, #12]
   e5534:	4650      	mov	r0, sl
   e5536:	4659      	mov	r1, fp
   e5538:	2300      	movs	r3, #0
   e553a:	2c00      	cmp	r4, #0
   e553c:	dd09      	ble.n	e5552 <_strtod_r+0x56a>
   e553e:	07e2      	lsls	r2, r4, #31
   e5540:	d504      	bpl.n	e554c <_strtod_r+0x564>
   e5542:	e9d6 2300 	ldrd	r2, r3, [r6]
   e5546:	f7fd feeb 	bl	e3320 <__aeabi_dmul>
   e554a:	2301      	movs	r3, #1
   e554c:	1064      	asrs	r4, r4, #1
   e554e:	3608      	adds	r6, #8
   e5550:	e7f3      	b.n	e553a <_strtod_r+0x552>
   e5552:	b10b      	cbz	r3, e5558 <_strtod_r+0x570>
   e5554:	4682      	mov	sl, r0
   e5556:	468b      	mov	fp, r1
   e5558:	9b03      	ldr	r3, [sp, #12]
   e555a:	b1eb      	cbz	r3, e5598 <_strtod_r+0x5b0>
   e555c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e5560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e5564:	2b00      	cmp	r3, #0
   e5566:	4659      	mov	r1, fp
   e5568:	dd16      	ble.n	e5598 <_strtod_r+0x5b0>
   e556a:	2b1f      	cmp	r3, #31
   e556c:	dd0e      	ble.n	e558c <_strtod_r+0x5a4>
   e556e:	2b34      	cmp	r3, #52	; 0x34
   e5570:	bfde      	ittt	le
   e5572:	3b20      	suble	r3, #32
   e5574:	f04f 32ff 	movle.w	r2, #4294967295
   e5578:	fa02 f303 	lslle.w	r3, r2, r3
   e557c:	f04f 0a00 	mov.w	sl, #0
   e5580:	bfcc      	ite	gt
   e5582:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e5586:	ea03 0b01 	andle.w	fp, r3, r1
   e558a:	e005      	b.n	e5598 <_strtod_r+0x5b0>
   e558c:	f04f 32ff 	mov.w	r2, #4294967295
   e5590:	fa02 f303 	lsl.w	r3, r2, r3
   e5594:	ea03 0a0a 	and.w	sl, r3, sl
   e5598:	2200      	movs	r2, #0
   e559a:	2300      	movs	r3, #0
   e559c:	4650      	mov	r0, sl
   e559e:	4659      	mov	r1, fp
   e55a0:	f7fe f926 	bl	e37f0 <__aeabi_dcmpeq>
   e55a4:	2800      	cmp	r0, #0
   e55a6:	d1b9      	bne.n	e551c <_strtod_r+0x534>
   e55a8:	e018      	b.n	e55dc <_strtod_r+0x5f4>
   e55aa:	bf00      	nop
   e55ac:	000e8a6b 	.word	0x000e8a6b
   e55b0:	000e9090 	.word	0x000e9090
   e55b4:	000e90c9 	.word	0x000e90c9
   e55b8:	000e907c 	.word	0x000e907c
   e55bc:	000e9328 	.word	0x000e9328
   e55c0:	000e93f0 	.word	0x000e93f0
   e55c4:	7ca00000 	.word	0x7ca00000
   e55c8:	000e9098 	.word	0x000e9098
   e55cc:	7ff00000 	.word	0x7ff00000
   e55d0:	fff80000 	.word	0xfff80000
   e55d4:	7fefffff 	.word	0x7fefffff
   e55d8:	2300      	movs	r3, #0
   e55da:	9303      	str	r3, [sp, #12]
   e55dc:	9b05      	ldr	r3, [sp, #20]
   e55de:	9300      	str	r3, [sp, #0]
   e55e0:	9a04      	ldr	r2, [sp, #16]
   e55e2:	9907      	ldr	r1, [sp, #28]
   e55e4:	9802      	ldr	r0, [sp, #8]
   e55e6:	462b      	mov	r3, r5
   e55e8:	f001 fb0b 	bl	e6c02 <__s2b>
   e55ec:	9005      	str	r0, [sp, #20]
   e55ee:	2800      	cmp	r0, #0
   e55f0:	f43f af3d 	beq.w	e546e <_strtod_r+0x486>
   e55f4:	f1b9 0f00 	cmp.w	r9, #0
   e55f8:	f1c9 0300 	rsb	r3, r9, #0
   e55fc:	bfa8      	it	ge
   e55fe:	2300      	movge	r3, #0
   e5600:	930d      	str	r3, [sp, #52]	; 0x34
   e5602:	2400      	movs	r4, #0
   e5604:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e5608:	9312      	str	r3, [sp, #72]	; 0x48
   e560a:	4625      	mov	r5, r4
   e560c:	9b05      	ldr	r3, [sp, #20]
   e560e:	9802      	ldr	r0, [sp, #8]
   e5610:	6859      	ldr	r1, [r3, #4]
   e5612:	f001 fa6f 	bl	e6af4 <_Balloc>
   e5616:	9004      	str	r0, [sp, #16]
   e5618:	2800      	cmp	r0, #0
   e561a:	f43f af2c 	beq.w	e5476 <_strtod_r+0x48e>
   e561e:	9b05      	ldr	r3, [sp, #20]
   e5620:	691a      	ldr	r2, [r3, #16]
   e5622:	3202      	adds	r2, #2
   e5624:	f103 010c 	add.w	r1, r3, #12
   e5628:	0092      	lsls	r2, r2, #2
   e562a:	300c      	adds	r0, #12
   e562c:	f7fe fcc2 	bl	e3fb4 <memcpy>
   e5630:	aa1a      	add	r2, sp, #104	; 0x68
   e5632:	a919      	add	r1, sp, #100	; 0x64
   e5634:	ec4b ab10 	vmov	d0, sl, fp
   e5638:	9802      	ldr	r0, [sp, #8]
   e563a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e563e:	f001 fd94 	bl	e716a <__d2b>
   e5642:	9018      	str	r0, [sp, #96]	; 0x60
   e5644:	2800      	cmp	r0, #0
   e5646:	f43f af16 	beq.w	e5476 <_strtod_r+0x48e>
   e564a:	2101      	movs	r1, #1
   e564c:	9802      	ldr	r0, [sp, #8]
   e564e:	f001 fb63 	bl	e6d18 <__i2b>
   e5652:	4605      	mov	r5, r0
   e5654:	2800      	cmp	r0, #0
   e5656:	f43f af0e 	beq.w	e5476 <_strtod_r+0x48e>
   e565a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e565c:	9903      	ldr	r1, [sp, #12]
   e565e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e5660:	2b00      	cmp	r3, #0
   e5662:	bfad      	iteet	ge
   e5664:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e5666:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e5668:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e566c:	eb02 0803 	addge.w	r8, r2, r3
   e5670:	bfb8      	it	lt
   e5672:	1ad2      	sublt	r2, r2, r3
   e5674:	eba3 0301 	sub.w	r3, r3, r1
   e5678:	4433      	add	r3, r6
   e567a:	49b5      	ldr	r1, [pc, #724]	; (e5950 <_strtod_r+0x968>)
   e567c:	bfa8      	it	ge
   e567e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e5680:	3b01      	subs	r3, #1
   e5682:	428b      	cmp	r3, r1
   e5684:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e5688:	f280 808a 	bge.w	e57a0 <_strtod_r+0x7b8>
   e568c:	1ac9      	subs	r1, r1, r3
   e568e:	291f      	cmp	r1, #31
   e5690:	bfc8      	it	gt
   e5692:	4fb0      	ldrgt	r7, [pc, #704]	; (e5954 <_strtod_r+0x96c>)
   e5694:	f04f 0901 	mov.w	r9, #1
   e5698:	bfd4      	ite	le
   e569a:	fa09 f301 	lslle.w	r3, r9, r1
   e569e:	1aff      	subgt	r7, r7, r3
   e56a0:	eba6 0601 	sub.w	r6, r6, r1
   e56a4:	bfd9      	ittee	le
   e56a6:	9306      	strle	r3, [sp, #24]
   e56a8:	2700      	movle	r7, #0
   e56aa:	fa09 f707 	lslgt.w	r7, r9, r7
   e56ae:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e56b2:	eb08 0906 	add.w	r9, r8, r6
   e56b6:	9b03      	ldr	r3, [sp, #12]
   e56b8:	45c8      	cmp	r8, r9
   e56ba:	4416      	add	r6, r2
   e56bc:	441e      	add	r6, r3
   e56be:	4643      	mov	r3, r8
   e56c0:	bfa8      	it	ge
   e56c2:	464b      	movge	r3, r9
   e56c4:	42b3      	cmp	r3, r6
   e56c6:	bfa8      	it	ge
   e56c8:	4633      	movge	r3, r6
   e56ca:	2b00      	cmp	r3, #0
   e56cc:	bfc2      	ittt	gt
   e56ce:	ebc3 0909 	rsbgt	r9, r3, r9
   e56d2:	1af6      	subgt	r6, r6, r3
   e56d4:	ebc3 0808 	rsbgt	r8, r3, r8
   e56d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e56da:	2b00      	cmp	r3, #0
   e56dc:	d164      	bne.n	e57a8 <_strtod_r+0x7c0>
   e56de:	f1b9 0f00 	cmp.w	r9, #0
   e56e2:	dc7a      	bgt.n	e57da <_strtod_r+0x7f2>
   e56e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e56e6:	2b00      	cmp	r3, #0
   e56e8:	f040 8081 	bne.w	e57ee <_strtod_r+0x806>
   e56ec:	2e00      	cmp	r6, #0
   e56ee:	f300 8088 	bgt.w	e5802 <_strtod_r+0x81a>
   e56f2:	f1b8 0f00 	cmp.w	r8, #0
   e56f6:	f300 808e 	bgt.w	e5816 <_strtod_r+0x82e>
   e56fa:	9a04      	ldr	r2, [sp, #16]
   e56fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e56fe:	9802      	ldr	r0, [sp, #8]
   e5700:	f001 fc5f 	bl	e6fc2 <__mdiff>
   e5704:	4604      	mov	r4, r0
   e5706:	2800      	cmp	r0, #0
   e5708:	f43f aeb5 	beq.w	e5476 <_strtod_r+0x48e>
   e570c:	68c3      	ldr	r3, [r0, #12]
   e570e:	9307      	str	r3, [sp, #28]
   e5710:	2300      	movs	r3, #0
   e5712:	60c3      	str	r3, [r0, #12]
   e5714:	4629      	mov	r1, r5
   e5716:	f001 fc38 	bl	e6f8a <__mcmp>
   e571a:	2800      	cmp	r0, #0
   e571c:	f280 8089 	bge.w	e5832 <_strtod_r+0x84a>
   e5720:	9b07      	ldr	r3, [sp, #28]
   e5722:	2b00      	cmp	r3, #0
   e5724:	f040 8204 	bne.w	e5b30 <_strtod_r+0xb48>
   e5728:	f1ba 0f00 	cmp.w	sl, #0
   e572c:	f040 8200 	bne.w	e5b30 <_strtod_r+0xb48>
   e5730:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e5734:	2b00      	cmp	r3, #0
   e5736:	f040 81fb 	bne.w	e5b30 <_strtod_r+0xb48>
   e573a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e573e:	0d1b      	lsrs	r3, r3, #20
   e5740:	051b      	lsls	r3, r3, #20
   e5742:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e5746:	f240 81f3 	bls.w	e5b30 <_strtod_r+0xb48>
   e574a:	6963      	ldr	r3, [r4, #20]
   e574c:	2b00      	cmp	r3, #0
   e574e:	d06c      	beq.n	e582a <_strtod_r+0x842>
   e5750:	4621      	mov	r1, r4
   e5752:	2201      	movs	r2, #1
   e5754:	9802      	ldr	r0, [sp, #8]
   e5756:	f001 fbc7 	bl	e6ee8 <__lshift>
   e575a:	4629      	mov	r1, r5
   e575c:	4604      	mov	r4, r0
   e575e:	f001 fc14 	bl	e6f8a <__mcmp>
   e5762:	2800      	cmp	r0, #0
   e5764:	f340 81e4 	ble.w	e5b30 <_strtod_r+0xb48>
   e5768:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e576c:	9a03      	ldr	r2, [sp, #12]
   e576e:	0d1b      	lsrs	r3, r3, #20
   e5770:	051b      	lsls	r3, r3, #20
   e5772:	2a00      	cmp	r2, #0
   e5774:	f000 808c 	beq.w	e5890 <_strtod_r+0x8a8>
   e5778:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e577c:	f300 8088 	bgt.w	e5890 <_strtod_r+0x8a8>
   e5780:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e5784:	f300 81d6 	bgt.w	e5b34 <_strtod_r+0xb4c>
   e5788:	9a02      	ldr	r2, [sp, #8]
   e578a:	2322      	movs	r3, #34	; 0x22
   e578c:	f04f 0a00 	mov.w	sl, #0
   e5790:	f04f 0b00 	mov.w	fp, #0
   e5794:	6013      	str	r3, [r2, #0]
   e5796:	9b05      	ldr	r3, [sp, #20]
   e5798:	2b00      	cmp	r3, #0
   e579a:	f040 81dc 	bne.w	e5b56 <_strtod_r+0xb6e>
   e579e:	e1ee      	b.n	e5b7e <_strtod_r+0xb96>
   e57a0:	2301      	movs	r3, #1
   e57a2:	2700      	movs	r7, #0
   e57a4:	9306      	str	r3, [sp, #24]
   e57a6:	e784      	b.n	e56b2 <_strtod_r+0x6ca>
   e57a8:	4629      	mov	r1, r5
   e57aa:	461a      	mov	r2, r3
   e57ac:	9802      	ldr	r0, [sp, #8]
   e57ae:	f001 fb4d 	bl	e6e4c <__pow5mult>
   e57b2:	4605      	mov	r5, r0
   e57b4:	2800      	cmp	r0, #0
   e57b6:	f43f ae5e 	beq.w	e5476 <_strtod_r+0x48e>
   e57ba:	4601      	mov	r1, r0
   e57bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e57be:	9802      	ldr	r0, [sp, #8]
   e57c0:	f001 fab3 	bl	e6d2a <__multiply>
   e57c4:	9007      	str	r0, [sp, #28]
   e57c6:	2800      	cmp	r0, #0
   e57c8:	f43f ae55 	beq.w	e5476 <_strtod_r+0x48e>
   e57cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e57ce:	9802      	ldr	r0, [sp, #8]
   e57d0:	f001 f9c5 	bl	e6b5e <_Bfree>
   e57d4:	9b07      	ldr	r3, [sp, #28]
   e57d6:	9318      	str	r3, [sp, #96]	; 0x60
   e57d8:	e781      	b.n	e56de <_strtod_r+0x6f6>
   e57da:	464a      	mov	r2, r9
   e57dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   e57de:	9802      	ldr	r0, [sp, #8]
   e57e0:	f001 fb82 	bl	e6ee8 <__lshift>
   e57e4:	9018      	str	r0, [sp, #96]	; 0x60
   e57e6:	2800      	cmp	r0, #0
   e57e8:	f47f af7c 	bne.w	e56e4 <_strtod_r+0x6fc>
   e57ec:	e643      	b.n	e5476 <_strtod_r+0x48e>
   e57ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e57f0:	9904      	ldr	r1, [sp, #16]
   e57f2:	9802      	ldr	r0, [sp, #8]
   e57f4:	f001 fb2a 	bl	e6e4c <__pow5mult>
   e57f8:	9004      	str	r0, [sp, #16]
   e57fa:	2800      	cmp	r0, #0
   e57fc:	f47f af76 	bne.w	e56ec <_strtod_r+0x704>
   e5800:	e639      	b.n	e5476 <_strtod_r+0x48e>
   e5802:	4632      	mov	r2, r6
   e5804:	9904      	ldr	r1, [sp, #16]
   e5806:	9802      	ldr	r0, [sp, #8]
   e5808:	f001 fb6e 	bl	e6ee8 <__lshift>
   e580c:	9004      	str	r0, [sp, #16]
   e580e:	2800      	cmp	r0, #0
   e5810:	f47f af6f 	bne.w	e56f2 <_strtod_r+0x70a>
   e5814:	e62f      	b.n	e5476 <_strtod_r+0x48e>
   e5816:	4629      	mov	r1, r5
   e5818:	4642      	mov	r2, r8
   e581a:	9802      	ldr	r0, [sp, #8]
   e581c:	f001 fb64 	bl	e6ee8 <__lshift>
   e5820:	4605      	mov	r5, r0
   e5822:	2800      	cmp	r0, #0
   e5824:	f47f af69 	bne.w	e56fa <_strtod_r+0x712>
   e5828:	e625      	b.n	e5476 <_strtod_r+0x48e>
   e582a:	6923      	ldr	r3, [r4, #16]
   e582c:	2b01      	cmp	r3, #1
   e582e:	dc8f      	bgt.n	e5750 <_strtod_r+0x768>
   e5830:	e17e      	b.n	e5b30 <_strtod_r+0xb48>
   e5832:	d161      	bne.n	e58f8 <_strtod_r+0x910>
   e5834:	9a07      	ldr	r2, [sp, #28]
   e5836:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e583a:	b322      	cbz	r2, e5886 <_strtod_r+0x89e>
   e583c:	4946      	ldr	r1, [pc, #280]	; (e5958 <_strtod_r+0x970>)
   e583e:	428b      	cmp	r3, r1
   e5840:	465a      	mov	r2, fp
   e5842:	d12e      	bne.n	e58a2 <_strtod_r+0x8ba>
   e5844:	9b03      	ldr	r3, [sp, #12]
   e5846:	4651      	mov	r1, sl
   e5848:	b163      	cbz	r3, e5864 <_strtod_r+0x87c>
   e584a:	4b44      	ldr	r3, [pc, #272]	; (e595c <_strtod_r+0x974>)
   e584c:	4013      	ands	r3, r2
   e584e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e5852:	d807      	bhi.n	e5864 <_strtod_r+0x87c>
   e5854:	0d1b      	lsrs	r3, r3, #20
   e5856:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e585a:	f04f 30ff 	mov.w	r0, #4294967295
   e585e:	fa00 f303 	lsl.w	r3, r0, r3
   e5862:	e001      	b.n	e5868 <_strtod_r+0x880>
   e5864:	f04f 33ff 	mov.w	r3, #4294967295
   e5868:	428b      	cmp	r3, r1
   e586a:	d11a      	bne.n	e58a2 <_strtod_r+0x8ba>
   e586c:	493c      	ldr	r1, [pc, #240]	; (e5960 <_strtod_r+0x978>)
   e586e:	428a      	cmp	r2, r1
   e5870:	d102      	bne.n	e5878 <_strtod_r+0x890>
   e5872:	3301      	adds	r3, #1
   e5874:	f43f adff 	beq.w	e5476 <_strtod_r+0x48e>
   e5878:	4b38      	ldr	r3, [pc, #224]	; (e595c <_strtod_r+0x974>)
   e587a:	4013      	ands	r3, r2
   e587c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e5880:	f04f 0a00 	mov.w	sl, #0
   e5884:	e154      	b.n	e5b30 <_strtod_r+0xb48>
   e5886:	b963      	cbnz	r3, e58a2 <_strtod_r+0x8ba>
   e5888:	f1ba 0f00 	cmp.w	sl, #0
   e588c:	d109      	bne.n	e58a2 <_strtod_r+0x8ba>
   e588e:	e76b      	b.n	e5768 <_strtod_r+0x780>
   e5890:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e5894:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e5898:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e589c:	f04f 3aff 	mov.w	sl, #4294967295
   e58a0:	e146      	b.n	e5b30 <_strtod_r+0xb48>
   e58a2:	b117      	cbz	r7, e58aa <_strtod_r+0x8c2>
   e58a4:	ea17 0f0b 	tst.w	r7, fp
   e58a8:	e002      	b.n	e58b0 <_strtod_r+0x8c8>
   e58aa:	9b06      	ldr	r3, [sp, #24]
   e58ac:	ea13 0f0a 	tst.w	r3, sl
   e58b0:	f000 813e 	beq.w	e5b30 <_strtod_r+0xb48>
   e58b4:	9b07      	ldr	r3, [sp, #28]
   e58b6:	9a03      	ldr	r2, [sp, #12]
   e58b8:	4650      	mov	r0, sl
   e58ba:	4659      	mov	r1, fp
   e58bc:	b153      	cbz	r3, e58d4 <_strtod_r+0x8ec>
   e58be:	f7ff fb75 	bl	e4fac <sulp>
   e58c2:	4602      	mov	r2, r0
   e58c4:	460b      	mov	r3, r1
   e58c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e58ca:	f7fd fb77 	bl	e2fbc <__adddf3>
   e58ce:	4682      	mov	sl, r0
   e58d0:	468b      	mov	fp, r1
   e58d2:	e12d      	b.n	e5b30 <_strtod_r+0xb48>
   e58d4:	f7ff fb6a 	bl	e4fac <sulp>
   e58d8:	4602      	mov	r2, r0
   e58da:	460b      	mov	r3, r1
   e58dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e58e0:	f7fd fb6a 	bl	e2fb8 <__aeabi_dsub>
   e58e4:	2200      	movs	r2, #0
   e58e6:	2300      	movs	r3, #0
   e58e8:	4682      	mov	sl, r0
   e58ea:	468b      	mov	fp, r1
   e58ec:	f7fd ff80 	bl	e37f0 <__aeabi_dcmpeq>
   e58f0:	2800      	cmp	r0, #0
   e58f2:	f47f af49 	bne.w	e5788 <_strtod_r+0x7a0>
   e58f6:	e11b      	b.n	e5b30 <_strtod_r+0xb48>
   e58f8:	4629      	mov	r1, r5
   e58fa:	4620      	mov	r0, r4
   e58fc:	f001 fc83 	bl	e7206 <__ratio>
   e5900:	ec57 6b10 	vmov	r6, r7, d0
   e5904:	2200      	movs	r2, #0
   e5906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e590a:	ee10 0a10 	vmov	r0, s0
   e590e:	4639      	mov	r1, r7
   e5910:	f7fd ff82 	bl	e3818 <__aeabi_dcmple>
   e5914:	2800      	cmp	r0, #0
   e5916:	d042      	beq.n	e599e <_strtod_r+0x9b6>
   e5918:	9b07      	ldr	r3, [sp, #28]
   e591a:	b123      	cbz	r3, e5926 <_strtod_r+0x93e>
   e591c:	f04f 0800 	mov.w	r8, #0
   e5920:	f8df 9040 	ldr.w	r9, [pc, #64]	; e5964 <_strtod_r+0x97c>
   e5924:	e011      	b.n	e594a <_strtod_r+0x962>
   e5926:	f1ba 0f00 	cmp.w	sl, #0
   e592a:	d103      	bne.n	e5934 <_strtod_r+0x94c>
   e592c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e5930:	b93b      	cbnz	r3, e5942 <_strtod_r+0x95a>
   e5932:	e01b      	b.n	e596c <_strtod_r+0x984>
   e5934:	f1ba 0f01 	cmp.w	sl, #1
   e5938:	d103      	bne.n	e5942 <_strtod_r+0x95a>
   e593a:	f1bb 0f00 	cmp.w	fp, #0
   e593e:	f43f af23 	beq.w	e5788 <_strtod_r+0x7a0>
   e5942:	f8df 9024 	ldr.w	r9, [pc, #36]	; e5968 <_strtod_r+0x980>
   e5946:	f04f 0800 	mov.w	r8, #0
   e594a:	2600      	movs	r6, #0
   e594c:	4f05      	ldr	r7, [pc, #20]	; (e5964 <_strtod_r+0x97c>)
   e594e:	e039      	b.n	e59c4 <_strtod_r+0x9dc>
   e5950:	fffffc02 	.word	0xfffffc02
   e5954:	fffffbe2 	.word	0xfffffbe2
   e5958:	000fffff 	.word	0x000fffff
   e595c:	7ff00000 	.word	0x7ff00000
   e5960:	7fefffff 	.word	0x7fefffff
   e5964:	3ff00000 	.word	0x3ff00000
   e5968:	bff00000 	.word	0xbff00000
   e596c:	2200      	movs	r2, #0
   e596e:	4b98      	ldr	r3, [pc, #608]	; (e5bd0 <_strtod_r+0xbe8>)
   e5970:	4630      	mov	r0, r6
   e5972:	4639      	mov	r1, r7
   e5974:	f7fd ff46 	bl	e3804 <__aeabi_dcmplt>
   e5978:	b940      	cbnz	r0, e598c <_strtod_r+0x9a4>
   e597a:	4630      	mov	r0, r6
   e597c:	4639      	mov	r1, r7
   e597e:	2200      	movs	r2, #0
   e5980:	4b94      	ldr	r3, [pc, #592]	; (e5bd4 <_strtod_r+0xbec>)
   e5982:	f7fd fccd 	bl	e3320 <__aeabi_dmul>
   e5986:	4606      	mov	r6, r0
   e5988:	460f      	mov	r7, r1
   e598a:	e001      	b.n	e5990 <_strtod_r+0x9a8>
   e598c:	4f91      	ldr	r7, [pc, #580]	; (e5bd4 <_strtod_r+0xbec>)
   e598e:	2600      	movs	r6, #0
   e5990:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e5994:	9614      	str	r6, [sp, #80]	; 0x50
   e5996:	9315      	str	r3, [sp, #84]	; 0x54
   e5998:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e599c:	e012      	b.n	e59c4 <_strtod_r+0x9dc>
   e599e:	4b8d      	ldr	r3, [pc, #564]	; (e5bd4 <_strtod_r+0xbec>)
   e59a0:	4630      	mov	r0, r6
   e59a2:	4639      	mov	r1, r7
   e59a4:	2200      	movs	r2, #0
   e59a6:	f7fd fcbb 	bl	e3320 <__aeabi_dmul>
   e59aa:	9b07      	ldr	r3, [sp, #28]
   e59ac:	4606      	mov	r6, r0
   e59ae:	460f      	mov	r7, r1
   e59b0:	b923      	cbnz	r3, e59bc <_strtod_r+0x9d4>
   e59b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e59b6:	900e      	str	r0, [sp, #56]	; 0x38
   e59b8:	930f      	str	r3, [sp, #60]	; 0x3c
   e59ba:	e001      	b.n	e59c0 <_strtod_r+0x9d8>
   e59bc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e59c0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e59c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e59c8:	0d1b      	lsrs	r3, r3, #20
   e59ca:	051b      	lsls	r3, r3, #20
   e59cc:	9306      	str	r3, [sp, #24]
   e59ce:	9a06      	ldr	r2, [sp, #24]
   e59d0:	4b81      	ldr	r3, [pc, #516]	; (e5bd8 <_strtod_r+0xbf0>)
   e59d2:	429a      	cmp	r2, r3
   e59d4:	d12b      	bne.n	e5a2e <_strtod_r+0xa46>
   e59d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e59da:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e59de:	ec4b ab10 	vmov	d0, sl, fp
   e59e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e59e6:	f001 fb4b 	bl	e7080 <__ulp>
   e59ea:	4640      	mov	r0, r8
   e59ec:	ec53 2b10 	vmov	r2, r3, d0
   e59f0:	4649      	mov	r1, r9
   e59f2:	f7fd fc95 	bl	e3320 <__aeabi_dmul>
   e59f6:	4652      	mov	r2, sl
   e59f8:	465b      	mov	r3, fp
   e59fa:	f7fd fadf 	bl	e2fbc <__adddf3>
   e59fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e5a02:	0d1b      	lsrs	r3, r3, #20
   e5a04:	4a75      	ldr	r2, [pc, #468]	; (e5bdc <_strtod_r+0xbf4>)
   e5a06:	051b      	lsls	r3, r3, #20
   e5a08:	4293      	cmp	r3, r2
   e5a0a:	4682      	mov	sl, r0
   e5a0c:	d90c      	bls.n	e5a28 <_strtod_r+0xa40>
   e5a0e:	4b74      	ldr	r3, [pc, #464]	; (e5be0 <_strtod_r+0xbf8>)
   e5a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e5a12:	429a      	cmp	r2, r3
   e5a14:	d103      	bne.n	e5a1e <_strtod_r+0xa36>
   e5a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5a18:	3301      	adds	r3, #1
   e5a1a:	f43f ad2c 	beq.w	e5476 <_strtod_r+0x48e>
   e5a1e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e5be0 <_strtod_r+0xbf8>
   e5a22:	f04f 3aff 	mov.w	sl, #4294967295
   e5a26:	e072      	b.n	e5b0e <_strtod_r+0xb26>
   e5a28:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e5a2c:	e038      	b.n	e5aa0 <_strtod_r+0xab8>
   e5a2e:	9b03      	ldr	r3, [sp, #12]
   e5a30:	b333      	cbz	r3, e5a80 <_strtod_r+0xa98>
   e5a32:	9b06      	ldr	r3, [sp, #24]
   e5a34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e5a38:	d822      	bhi.n	e5a80 <_strtod_r+0xa98>
   e5a3a:	a35d      	add	r3, pc, #372	; (adr r3, e5bb0 <_strtod_r+0xbc8>)
   e5a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5a40:	4630      	mov	r0, r6
   e5a42:	4639      	mov	r1, r7
   e5a44:	f7fd fee8 	bl	e3818 <__aeabi_dcmple>
   e5a48:	b1a8      	cbz	r0, e5a76 <_strtod_r+0xa8e>
   e5a4a:	4639      	mov	r1, r7
   e5a4c:	4630      	mov	r0, r6
   e5a4e:	f7fd ff3f 	bl	e38d0 <__aeabi_d2uiz>
   e5a52:	2800      	cmp	r0, #0
   e5a54:	bf08      	it	eq
   e5a56:	2001      	moveq	r0, #1
   e5a58:	f7fd fbec 	bl	e3234 <__aeabi_ui2d>
   e5a5c:	9b07      	ldr	r3, [sp, #28]
   e5a5e:	4606      	mov	r6, r0
   e5a60:	460f      	mov	r7, r1
   e5a62:	b923      	cbnz	r3, e5a6e <_strtod_r+0xa86>
   e5a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e5a68:	9010      	str	r0, [sp, #64]	; 0x40
   e5a6a:	9311      	str	r3, [sp, #68]	; 0x44
   e5a6c:	e001      	b.n	e5a72 <_strtod_r+0xa8a>
   e5a6e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e5a72:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e5a76:	9a06      	ldr	r2, [sp, #24]
   e5a78:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e5a7c:	ebc2 0903 	rsb	r9, r2, r3
   e5a80:	ed9d 0b08 	vldr	d0, [sp, #32]
   e5a84:	f001 fafc 	bl	e7080 <__ulp>
   e5a88:	4640      	mov	r0, r8
   e5a8a:	ec53 2b10 	vmov	r2, r3, d0
   e5a8e:	4649      	mov	r1, r9
   e5a90:	f7fd fc46 	bl	e3320 <__aeabi_dmul>
   e5a94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e5a98:	f7fd fa90 	bl	e2fbc <__adddf3>
   e5a9c:	4682      	mov	sl, r0
   e5a9e:	468b      	mov	fp, r1
   e5aa0:	9b03      	ldr	r3, [sp, #12]
   e5aa2:	bba3      	cbnz	r3, e5b0e <_strtod_r+0xb26>
   e5aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e5aa8:	0d1b      	lsrs	r3, r3, #20
   e5aaa:	9a06      	ldr	r2, [sp, #24]
   e5aac:	051b      	lsls	r3, r3, #20
   e5aae:	429a      	cmp	r2, r3
   e5ab0:	46d8      	mov	r8, fp
   e5ab2:	d12c      	bne.n	e5b0e <_strtod_r+0xb26>
   e5ab4:	4639      	mov	r1, r7
   e5ab6:	4630      	mov	r0, r6
   e5ab8:	f7fd fee2 	bl	e3880 <__aeabi_d2iz>
   e5abc:	f7fd fbca 	bl	e3254 <__aeabi_i2d>
   e5ac0:	460b      	mov	r3, r1
   e5ac2:	4602      	mov	r2, r0
   e5ac4:	4639      	mov	r1, r7
   e5ac6:	4630      	mov	r0, r6
   e5ac8:	f7fd fa76 	bl	e2fb8 <__aeabi_dsub>
   e5acc:	9b07      	ldr	r3, [sp, #28]
   e5ace:	4606      	mov	r6, r0
   e5ad0:	460f      	mov	r7, r1
   e5ad2:	b92b      	cbnz	r3, e5ae0 <_strtod_r+0xaf8>
   e5ad4:	f1ba 0f00 	cmp.w	sl, #0
   e5ad8:	d102      	bne.n	e5ae0 <_strtod_r+0xaf8>
   e5ada:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e5ade:	b183      	cbz	r3, e5b02 <_strtod_r+0xb1a>
   e5ae0:	a335      	add	r3, pc, #212	; (adr r3, e5bb8 <_strtod_r+0xbd0>)
   e5ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5ae6:	4630      	mov	r0, r6
   e5ae8:	4639      	mov	r1, r7
   e5aea:	f7fd fe8b 	bl	e3804 <__aeabi_dcmplt>
   e5aee:	2800      	cmp	r0, #0
   e5af0:	d131      	bne.n	e5b56 <_strtod_r+0xb6e>
   e5af2:	a333      	add	r3, pc, #204	; (adr r3, e5bc0 <_strtod_r+0xbd8>)
   e5af4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5af8:	4630      	mov	r0, r6
   e5afa:	4639      	mov	r1, r7
   e5afc:	f7fd fea0 	bl	e3840 <__aeabi_dcmpgt>
   e5b00:	e004      	b.n	e5b0c <_strtod_r+0xb24>
   e5b02:	a331      	add	r3, pc, #196	; (adr r3, e5bc8 <_strtod_r+0xbe0>)
   e5b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   e5b08:	f7fd fe7c 	bl	e3804 <__aeabi_dcmplt>
   e5b0c:	bb18      	cbnz	r0, e5b56 <_strtod_r+0xb6e>
   e5b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e5b10:	9802      	ldr	r0, [sp, #8]
   e5b12:	f001 f824 	bl	e6b5e <_Bfree>
   e5b16:	9904      	ldr	r1, [sp, #16]
   e5b18:	9802      	ldr	r0, [sp, #8]
   e5b1a:	f001 f820 	bl	e6b5e <_Bfree>
   e5b1e:	4629      	mov	r1, r5
   e5b20:	9802      	ldr	r0, [sp, #8]
   e5b22:	f001 f81c 	bl	e6b5e <_Bfree>
   e5b26:	4621      	mov	r1, r4
   e5b28:	9802      	ldr	r0, [sp, #8]
   e5b2a:	f001 f818 	bl	e6b5e <_Bfree>
   e5b2e:	e56d      	b.n	e560c <_strtod_r+0x624>
   e5b30:	9b03      	ldr	r3, [sp, #12]
   e5b32:	b183      	cbz	r3, e5b56 <_strtod_r+0xb6e>
   e5b34:	4b2b      	ldr	r3, [pc, #172]	; (e5be4 <_strtod_r+0xbfc>)
   e5b36:	930b      	str	r3, [sp, #44]	; 0x2c
   e5b38:	2300      	movs	r3, #0
   e5b3a:	930a      	str	r3, [sp, #40]	; 0x28
   e5b3c:	4650      	mov	r0, sl
   e5b3e:	4659      	mov	r1, fp
   e5b40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e5b44:	f7fd fbec 	bl	e3320 <__aeabi_dmul>
   e5b48:	4682      	mov	sl, r0
   e5b4a:	468b      	mov	fp, r1
   e5b4c:	b919      	cbnz	r1, e5b56 <_strtod_r+0xb6e>
   e5b4e:	b910      	cbnz	r0, e5b56 <_strtod_r+0xb6e>
   e5b50:	9a02      	ldr	r2, [sp, #8]
   e5b52:	2322      	movs	r3, #34	; 0x22
   e5b54:	6013      	str	r3, [r2, #0]
   e5b56:	9918      	ldr	r1, [sp, #96]	; 0x60
   e5b58:	9802      	ldr	r0, [sp, #8]
   e5b5a:	f001 f800 	bl	e6b5e <_Bfree>
   e5b5e:	9904      	ldr	r1, [sp, #16]
   e5b60:	9802      	ldr	r0, [sp, #8]
   e5b62:	f000 fffc 	bl	e6b5e <_Bfree>
   e5b66:	4629      	mov	r1, r5
   e5b68:	9802      	ldr	r0, [sp, #8]
   e5b6a:	f000 fff8 	bl	e6b5e <_Bfree>
   e5b6e:	9905      	ldr	r1, [sp, #20]
   e5b70:	9802      	ldr	r0, [sp, #8]
   e5b72:	f000 fff4 	bl	e6b5e <_Bfree>
   e5b76:	4621      	mov	r1, r4
   e5b78:	9802      	ldr	r0, [sp, #8]
   e5b7a:	f000 fff0 	bl	e6b5e <_Bfree>
   e5b7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e5b80:	b113      	cbz	r3, e5b88 <_strtod_r+0xba0>
   e5b82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e5b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e5b86:	6013      	str	r3, [r2, #0]
   e5b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e5b8a:	b11b      	cbz	r3, e5b94 <_strtod_r+0xbac>
   e5b8c:	4652      	mov	r2, sl
   e5b8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e5b92:	e007      	b.n	e5ba4 <_strtod_r+0xbbc>
   e5b94:	4652      	mov	r2, sl
   e5b96:	465b      	mov	r3, fp
   e5b98:	e004      	b.n	e5ba4 <_strtod_r+0xbbc>
   e5b9a:	2500      	movs	r5, #0
   e5b9c:	462a      	mov	r2, r5
   e5b9e:	2101      	movs	r1, #1
   e5ba0:	f7ff bb41 	b.w	e5226 <_strtod_r+0x23e>
   e5ba4:	ec43 2b10 	vmov	d0, r2, r3
   e5ba8:	b01d      	add	sp, #116	; 0x74
   e5baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5bae:	bf00      	nop
   e5bb0:	ffc00000 	.word	0xffc00000
   e5bb4:	41dfffff 	.word	0x41dfffff
   e5bb8:	94a03595 	.word	0x94a03595
   e5bbc:	3fdfffff 	.word	0x3fdfffff
   e5bc0:	35afe535 	.word	0x35afe535
   e5bc4:	3fe00000 	.word	0x3fe00000
   e5bc8:	94a03595 	.word	0x94a03595
   e5bcc:	3fcfffff 	.word	0x3fcfffff
   e5bd0:	3ff00000 	.word	0x3ff00000
   e5bd4:	3fe00000 	.word	0x3fe00000
   e5bd8:	7fe00000 	.word	0x7fe00000
   e5bdc:	7c9fffff 	.word	0x7c9fffff
   e5be0:	7fefffff 	.word	0x7fefffff
   e5be4:	39500000 	.word	0x39500000

000e5be8 <strtod>:
   e5be8:	4b02      	ldr	r3, [pc, #8]	; (e5bf4 <strtod+0xc>)
   e5bea:	460a      	mov	r2, r1
   e5bec:	4601      	mov	r1, r0
   e5bee:	6818      	ldr	r0, [r3, #0]
   e5bf0:	f7ff b9fa 	b.w	e4fe8 <_strtod_r>
   e5bf4:	2003d728 	.word	0x2003d728

000e5bf8 <_strtol_r>:
   e5bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e5bfc:	4680      	mov	r8, r0
   e5bfe:	4840      	ldr	r0, [pc, #256]	; (e5d00 <_strtol_r+0x108>)
   e5c00:	f8d0 9000 	ldr.w	r9, [r0]
   e5c04:	460f      	mov	r7, r1
   e5c06:	463d      	mov	r5, r7
   e5c08:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5c0c:	eb09 0004 	add.w	r0, r9, r4
   e5c10:	7840      	ldrb	r0, [r0, #1]
   e5c12:	f000 0008 	and.w	r0, r0, #8
   e5c16:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e5c1a:	b108      	cbz	r0, e5c20 <_strtol_r+0x28>
   e5c1c:	462f      	mov	r7, r5
   e5c1e:	e7f2      	b.n	e5c06 <_strtol_r+0xe>
   e5c20:	2c2d      	cmp	r4, #45	; 0x2d
   e5c22:	d103      	bne.n	e5c2c <_strtol_r+0x34>
   e5c24:	1cbd      	adds	r5, r7, #2
   e5c26:	787c      	ldrb	r4, [r7, #1]
   e5c28:	2601      	movs	r6, #1
   e5c2a:	e003      	b.n	e5c34 <_strtol_r+0x3c>
   e5c2c:	2c2b      	cmp	r4, #43	; 0x2b
   e5c2e:	bf04      	itt	eq
   e5c30:	787c      	ldrbeq	r4, [r7, #1]
   e5c32:	1cbd      	addeq	r5, r7, #2
   e5c34:	b113      	cbz	r3, e5c3c <_strtol_r+0x44>
   e5c36:	2b10      	cmp	r3, #16
   e5c38:	d10a      	bne.n	e5c50 <_strtol_r+0x58>
   e5c3a:	e05b      	b.n	e5cf4 <_strtol_r+0xfc>
   e5c3c:	2c30      	cmp	r4, #48	; 0x30
   e5c3e:	d157      	bne.n	e5cf0 <_strtol_r+0xf8>
   e5c40:	7828      	ldrb	r0, [r5, #0]
   e5c42:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5c46:	2858      	cmp	r0, #88	; 0x58
   e5c48:	d14d      	bne.n	e5ce6 <_strtol_r+0xee>
   e5c4a:	786c      	ldrb	r4, [r5, #1]
   e5c4c:	2310      	movs	r3, #16
   e5c4e:	3502      	adds	r5, #2
   e5c50:	2e00      	cmp	r6, #0
   e5c52:	bf14      	ite	ne
   e5c54:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e5c58:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e5c5c:	2700      	movs	r7, #0
   e5c5e:	fbbc faf3 	udiv	sl, ip, r3
   e5c62:	4638      	mov	r0, r7
   e5c64:	fb03 cc1a 	mls	ip, r3, sl, ip
   e5c68:	eb09 0e04 	add.w	lr, r9, r4
   e5c6c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e5c70:	f01e 0f04 	tst.w	lr, #4
   e5c74:	d001      	beq.n	e5c7a <_strtol_r+0x82>
   e5c76:	3c30      	subs	r4, #48	; 0x30
   e5c78:	e00b      	b.n	e5c92 <_strtol_r+0x9a>
   e5c7a:	f01e 0e03 	ands.w	lr, lr, #3
   e5c7e:	d01b      	beq.n	e5cb8 <_strtol_r+0xc0>
   e5c80:	f1be 0f01 	cmp.w	lr, #1
   e5c84:	bf0c      	ite	eq
   e5c86:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e5c8a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e5c8e:	ebce 0404 	rsb	r4, lr, r4
   e5c92:	42a3      	cmp	r3, r4
   e5c94:	dd10      	ble.n	e5cb8 <_strtol_r+0xc0>
   e5c96:	f1b7 3fff 	cmp.w	r7, #4294967295
   e5c9a:	d00a      	beq.n	e5cb2 <_strtol_r+0xba>
   e5c9c:	4550      	cmp	r0, sl
   e5c9e:	d806      	bhi.n	e5cae <_strtol_r+0xb6>
   e5ca0:	d101      	bne.n	e5ca6 <_strtol_r+0xae>
   e5ca2:	4564      	cmp	r4, ip
   e5ca4:	dc03      	bgt.n	e5cae <_strtol_r+0xb6>
   e5ca6:	fb03 4000 	mla	r0, r3, r0, r4
   e5caa:	2701      	movs	r7, #1
   e5cac:	e001      	b.n	e5cb2 <_strtol_r+0xba>
   e5cae:	f04f 37ff 	mov.w	r7, #4294967295
   e5cb2:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5cb6:	e7d7      	b.n	e5c68 <_strtol_r+0x70>
   e5cb8:	1c7b      	adds	r3, r7, #1
   e5cba:	d10c      	bne.n	e5cd6 <_strtol_r+0xde>
   e5cbc:	2e00      	cmp	r6, #0
   e5cbe:	f04f 0322 	mov.w	r3, #34	; 0x22
   e5cc2:	bf14      	ite	ne
   e5cc4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e5cc8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e5ccc:	f8c8 3000 	str.w	r3, [r8]
   e5cd0:	b92a      	cbnz	r2, e5cde <_strtol_r+0xe6>
   e5cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5cd6:	b106      	cbz	r6, e5cda <_strtol_r+0xe2>
   e5cd8:	4240      	negs	r0, r0
   e5cda:	b172      	cbz	r2, e5cfa <_strtol_r+0x102>
   e5cdc:	b107      	cbz	r7, e5ce0 <_strtol_r+0xe8>
   e5cde:	1e69      	subs	r1, r5, #1
   e5ce0:	6011      	str	r1, [r2, #0]
   e5ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5ce6:	2430      	movs	r4, #48	; 0x30
   e5ce8:	2b00      	cmp	r3, #0
   e5cea:	d1b1      	bne.n	e5c50 <_strtol_r+0x58>
   e5cec:	2308      	movs	r3, #8
   e5cee:	e7af      	b.n	e5c50 <_strtol_r+0x58>
   e5cf0:	230a      	movs	r3, #10
   e5cf2:	e7ad      	b.n	e5c50 <_strtol_r+0x58>
   e5cf4:	2c30      	cmp	r4, #48	; 0x30
   e5cf6:	d0a3      	beq.n	e5c40 <_strtol_r+0x48>
   e5cf8:	e7aa      	b.n	e5c50 <_strtol_r+0x58>
   e5cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5cfe:	bf00      	nop
   e5d00:	2003d6c4 	.word	0x2003d6c4

000e5d04 <strtol>:
   e5d04:	4613      	mov	r3, r2
   e5d06:	460a      	mov	r2, r1
   e5d08:	4601      	mov	r1, r0
   e5d0a:	4802      	ldr	r0, [pc, #8]	; (e5d14 <strtol+0x10>)
   e5d0c:	6800      	ldr	r0, [r0, #0]
   e5d0e:	f7ff bf73 	b.w	e5bf8 <_strtol_r>
   e5d12:	bf00      	nop
   e5d14:	2003d728 	.word	0x2003d728

000e5d18 <_strtoul_r>:
   e5d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e5d1c:	4680      	mov	r8, r0
   e5d1e:	483c      	ldr	r0, [pc, #240]	; (e5e10 <_strtoul_r+0xf8>)
   e5d20:	f8d0 9000 	ldr.w	r9, [r0]
   e5d24:	460e      	mov	r6, r1
   e5d26:	4635      	mov	r5, r6
   e5d28:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5d2c:	eb09 0004 	add.w	r0, r9, r4
   e5d30:	7840      	ldrb	r0, [r0, #1]
   e5d32:	f000 0008 	and.w	r0, r0, #8
   e5d36:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e5d3a:	b108      	cbz	r0, e5d40 <_strtoul_r+0x28>
   e5d3c:	462e      	mov	r6, r5
   e5d3e:	e7f2      	b.n	e5d26 <_strtoul_r+0xe>
   e5d40:	2c2d      	cmp	r4, #45	; 0x2d
   e5d42:	d103      	bne.n	e5d4c <_strtoul_r+0x34>
   e5d44:	1cb5      	adds	r5, r6, #2
   e5d46:	7874      	ldrb	r4, [r6, #1]
   e5d48:	2701      	movs	r7, #1
   e5d4a:	e003      	b.n	e5d54 <_strtoul_r+0x3c>
   e5d4c:	2c2b      	cmp	r4, #43	; 0x2b
   e5d4e:	bf04      	itt	eq
   e5d50:	7874      	ldrbeq	r4, [r6, #1]
   e5d52:	1cb5      	addeq	r5, r6, #2
   e5d54:	b113      	cbz	r3, e5d5c <_strtoul_r+0x44>
   e5d56:	2b10      	cmp	r3, #16
   e5d58:	d10a      	bne.n	e5d70 <_strtoul_r+0x58>
   e5d5a:	e053      	b.n	e5e04 <_strtoul_r+0xec>
   e5d5c:	2c30      	cmp	r4, #48	; 0x30
   e5d5e:	d14f      	bne.n	e5e00 <_strtoul_r+0xe8>
   e5d60:	7828      	ldrb	r0, [r5, #0]
   e5d62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e5d66:	2858      	cmp	r0, #88	; 0x58
   e5d68:	d145      	bne.n	e5df6 <_strtoul_r+0xde>
   e5d6a:	786c      	ldrb	r4, [r5, #1]
   e5d6c:	2310      	movs	r3, #16
   e5d6e:	3502      	adds	r5, #2
   e5d70:	f04f 3cff 	mov.w	ip, #4294967295
   e5d74:	2600      	movs	r6, #0
   e5d76:	fbbc fcf3 	udiv	ip, ip, r3
   e5d7a:	fb03 fa0c 	mul.w	sl, r3, ip
   e5d7e:	ea6f 0a0a 	mvn.w	sl, sl
   e5d82:	4630      	mov	r0, r6
   e5d84:	eb09 0e04 	add.w	lr, r9, r4
   e5d88:	f89e e001 	ldrb.w	lr, [lr, #1]
   e5d8c:	f01e 0f04 	tst.w	lr, #4
   e5d90:	d001      	beq.n	e5d96 <_strtoul_r+0x7e>
   e5d92:	3c30      	subs	r4, #48	; 0x30
   e5d94:	e00b      	b.n	e5dae <_strtoul_r+0x96>
   e5d96:	f01e 0e03 	ands.w	lr, lr, #3
   e5d9a:	d01a      	beq.n	e5dd2 <_strtoul_r+0xba>
   e5d9c:	f1be 0f01 	cmp.w	lr, #1
   e5da0:	bf0c      	ite	eq
   e5da2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e5da6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e5daa:	ebce 0404 	rsb	r4, lr, r4
   e5dae:	42a3      	cmp	r3, r4
   e5db0:	dd0f      	ble.n	e5dd2 <_strtoul_r+0xba>
   e5db2:	2e00      	cmp	r6, #0
   e5db4:	db08      	blt.n	e5dc8 <_strtoul_r+0xb0>
   e5db6:	4560      	cmp	r0, ip
   e5db8:	d806      	bhi.n	e5dc8 <_strtoul_r+0xb0>
   e5dba:	d101      	bne.n	e5dc0 <_strtoul_r+0xa8>
   e5dbc:	4554      	cmp	r4, sl
   e5dbe:	dc03      	bgt.n	e5dc8 <_strtoul_r+0xb0>
   e5dc0:	fb03 4000 	mla	r0, r3, r0, r4
   e5dc4:	2601      	movs	r6, #1
   e5dc6:	e001      	b.n	e5dcc <_strtoul_r+0xb4>
   e5dc8:	f04f 36ff 	mov.w	r6, #4294967295
   e5dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
   e5dd0:	e7d8      	b.n	e5d84 <_strtoul_r+0x6c>
   e5dd2:	2e00      	cmp	r6, #0
   e5dd4:	da07      	bge.n	e5de6 <_strtoul_r+0xce>
   e5dd6:	2322      	movs	r3, #34	; 0x22
   e5dd8:	f8c8 3000 	str.w	r3, [r8]
   e5ddc:	f04f 30ff 	mov.w	r0, #4294967295
   e5de0:	b92a      	cbnz	r2, e5dee <_strtoul_r+0xd6>
   e5de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5de6:	b107      	cbz	r7, e5dea <_strtoul_r+0xd2>
   e5de8:	4240      	negs	r0, r0
   e5dea:	b172      	cbz	r2, e5e0a <_strtoul_r+0xf2>
   e5dec:	b106      	cbz	r6, e5df0 <_strtoul_r+0xd8>
   e5dee:	1e69      	subs	r1, r5, #1
   e5df0:	6011      	str	r1, [r2, #0]
   e5df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5df6:	2430      	movs	r4, #48	; 0x30
   e5df8:	2b00      	cmp	r3, #0
   e5dfa:	d1b9      	bne.n	e5d70 <_strtoul_r+0x58>
   e5dfc:	2308      	movs	r3, #8
   e5dfe:	e7b7      	b.n	e5d70 <_strtoul_r+0x58>
   e5e00:	230a      	movs	r3, #10
   e5e02:	e7b5      	b.n	e5d70 <_strtoul_r+0x58>
   e5e04:	2c30      	cmp	r4, #48	; 0x30
   e5e06:	d0ab      	beq.n	e5d60 <_strtoul_r+0x48>
   e5e08:	e7b2      	b.n	e5d70 <_strtoul_r+0x58>
   e5e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e5e0e:	bf00      	nop
   e5e10:	2003d6c4 	.word	0x2003d6c4

000e5e14 <strtoul>:
   e5e14:	4613      	mov	r3, r2
   e5e16:	460a      	mov	r2, r1
   e5e18:	4601      	mov	r1, r0
   e5e1a:	4802      	ldr	r0, [pc, #8]	; (e5e24 <strtoul+0x10>)
   e5e1c:	6800      	ldr	r0, [r0, #0]
   e5e1e:	f7ff bf7b 	b.w	e5d18 <_strtoul_r>
   e5e22:	bf00      	nop
   e5e24:	2003d728 	.word	0x2003d728

000e5e28 <__get_current_time_locale>:
   e5e28:	4b04      	ldr	r3, [pc, #16]	; (e5e3c <__get_current_time_locale+0x14>)
   e5e2a:	4a05      	ldr	r2, [pc, #20]	; (e5e40 <__get_current_time_locale+0x18>)
   e5e2c:	6818      	ldr	r0, [r3, #0]
   e5e2e:	4b05      	ldr	r3, [pc, #20]	; (e5e44 <__get_current_time_locale+0x1c>)
   e5e30:	2800      	cmp	r0, #0
   e5e32:	bf14      	ite	ne
   e5e34:	4610      	movne	r0, r2
   e5e36:	4618      	moveq	r0, r3
   e5e38:	4770      	bx	lr
   e5e3a:	bf00      	nop
   e5e3c:	2003e6c8 	.word	0x2003e6c8
   e5e40:	2003e6cc 	.word	0x2003e6cc
   e5e44:	000e91f0 	.word	0x000e91f0

000e5e48 <tolower>:
   e5e48:	4b04      	ldr	r3, [pc, #16]	; (e5e5c <tolower+0x14>)
   e5e4a:	681b      	ldr	r3, [r3, #0]
   e5e4c:	4403      	add	r3, r0
   e5e4e:	785b      	ldrb	r3, [r3, #1]
   e5e50:	f003 0303 	and.w	r3, r3, #3
   e5e54:	2b01      	cmp	r3, #1
   e5e56:	bf08      	it	eq
   e5e58:	3020      	addeq	r0, #32
   e5e5a:	4770      	bx	lr
   e5e5c:	2003d6c4 	.word	0x2003d6c4

000e5e60 <__tzcalc_limits>:
   e5e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5e64:	4604      	mov	r4, r0
   e5e66:	f000 fda5 	bl	e69b4 <__gettzinfo>
   e5e6a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e5e6e:	429c      	cmp	r4, r3
   e5e70:	f340 8096 	ble.w	e5fa0 <__tzcalc_limits+0x140>
   e5e74:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e5e78:	18e3      	adds	r3, r4, r3
   e5e7a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e5e7e:	109b      	asrs	r3, r3, #2
   e5e80:	f240 156d 	movw	r5, #365	; 0x16d
   e5e84:	fb05 3502 	mla	r5, r5, r2, r3
   e5e88:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e5e8c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e5e90:	fb92 f3f3 	sdiv	r3, r2, r3
   e5e94:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e5e98:	442b      	add	r3, r5
   e5e9a:	18a5      	adds	r5, r4, r2
   e5e9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e5ea0:	fb95 f5f2 	sdiv	r5, r5, r2
   e5ea4:	441d      	add	r5, r3
   e5ea6:	2364      	movs	r3, #100	; 0x64
   e5ea8:	fb94 f7f2 	sdiv	r7, r4, r2
   e5eac:	fb94 f6f3 	sdiv	r6, r4, r3
   e5eb0:	fb02 4717 	mls	r7, r2, r7, r4
   e5eb4:	fb03 4616 	mls	r6, r3, r6, r4
   e5eb8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e5ebc:	fab7 fe87 	clz	lr, r7
   e5ec0:	9301      	str	r3, [sp, #4]
   e5ec2:	f004 0303 	and.w	r3, r4, #3
   e5ec6:	6044      	str	r4, [r0, #4]
   e5ec8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e5ecc:	4601      	mov	r1, r0
   e5ece:	9300      	str	r3, [sp, #0]
   e5ed0:	f04f 0c07 	mov.w	ip, #7
   e5ed4:	7a0b      	ldrb	r3, [r1, #8]
   e5ed6:	2b4a      	cmp	r3, #74	; 0x4a
   e5ed8:	d10e      	bne.n	e5ef8 <__tzcalc_limits+0x98>
   e5eda:	694b      	ldr	r3, [r1, #20]
   e5edc:	9a00      	ldr	r2, [sp, #0]
   e5ede:	18ec      	adds	r4, r5, r3
   e5ee0:	b902      	cbnz	r2, e5ee4 <__tzcalc_limits+0x84>
   e5ee2:	b906      	cbnz	r6, e5ee6 <__tzcalc_limits+0x86>
   e5ee4:	b927      	cbnz	r7, e5ef0 <__tzcalc_limits+0x90>
   e5ee6:	2b3b      	cmp	r3, #59	; 0x3b
   e5ee8:	bfd4      	ite	le
   e5eea:	2300      	movle	r3, #0
   e5eec:	2301      	movgt	r3, #1
   e5eee:	e000      	b.n	e5ef2 <__tzcalc_limits+0x92>
   e5ef0:	2300      	movs	r3, #0
   e5ef2:	4423      	add	r3, r4
   e5ef4:	3b01      	subs	r3, #1
   e5ef6:	e03f      	b.n	e5f78 <__tzcalc_limits+0x118>
   e5ef8:	2b44      	cmp	r3, #68	; 0x44
   e5efa:	d102      	bne.n	e5f02 <__tzcalc_limits+0xa2>
   e5efc:	694b      	ldr	r3, [r1, #20]
   e5efe:	442b      	add	r3, r5
   e5f00:	e03a      	b.n	e5f78 <__tzcalc_limits+0x118>
   e5f02:	9b00      	ldr	r3, [sp, #0]
   e5f04:	b92b      	cbnz	r3, e5f12 <__tzcalc_limits+0xb2>
   e5f06:	2e00      	cmp	r6, #0
   e5f08:	bf0c      	ite	eq
   e5f0a:	46f0      	moveq	r8, lr
   e5f0c:	f04f 0801 	movne.w	r8, #1
   e5f10:	e000      	b.n	e5f14 <__tzcalc_limits+0xb4>
   e5f12:	46f0      	mov	r8, lr
   e5f14:	4b24      	ldr	r3, [pc, #144]	; (e5fa8 <__tzcalc_limits+0x148>)
   e5f16:	68cc      	ldr	r4, [r1, #12]
   e5f18:	2230      	movs	r2, #48	; 0x30
   e5f1a:	fb02 3808 	mla	r8, r2, r8, r3
   e5f1e:	f1a8 0a04 	sub.w	sl, r8, #4
   e5f22:	46a9      	mov	r9, r5
   e5f24:	2301      	movs	r3, #1
   e5f26:	42a3      	cmp	r3, r4
   e5f28:	da04      	bge.n	e5f34 <__tzcalc_limits+0xd4>
   e5f2a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e5f2e:	3301      	adds	r3, #1
   e5f30:	44d9      	add	r9, fp
   e5f32:	e7f8      	b.n	e5f26 <__tzcalc_limits+0xc6>
   e5f34:	f109 0304 	add.w	r3, r9, #4
   e5f38:	fb93 fbfc 	sdiv	fp, r3, ip
   e5f3c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e5f40:	2c01      	cmp	r4, #1
   e5f42:	ebca 0a03 	rsb	sl, sl, r3
   e5f46:	694b      	ldr	r3, [r1, #20]
   e5f48:	bfb8      	it	lt
   e5f4a:	2401      	movlt	r4, #1
   e5f4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e5f50:	ebb3 0a0a 	subs.w	sl, r3, sl
   e5f54:	690b      	ldr	r3, [r1, #16]
   e5f56:	f104 34ff 	add.w	r4, r4, #4294967295
   e5f5a:	f103 33ff 	add.w	r3, r3, #4294967295
   e5f5e:	bf48      	it	mi
   e5f60:	f10a 0a07 	addmi.w	sl, sl, #7
   e5f64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e5f68:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e5f6c:	4453      	add	r3, sl
   e5f6e:	42a3      	cmp	r3, r4
   e5f70:	db01      	blt.n	e5f76 <__tzcalc_limits+0x116>
   e5f72:	3b07      	subs	r3, #7
   e5f74:	e7fb      	b.n	e5f6e <__tzcalc_limits+0x10e>
   e5f76:	444b      	add	r3, r9
   e5f78:	698c      	ldr	r4, [r1, #24]
   e5f7a:	4a0c      	ldr	r2, [pc, #48]	; (e5fac <__tzcalc_limits+0x14c>)
   e5f7c:	fb02 4303 	mla	r3, r2, r3, r4
   e5f80:	6a0c      	ldr	r4, [r1, #32]
   e5f82:	4423      	add	r3, r4
   e5f84:	f841 3f1c 	str.w	r3, [r1, #28]!
   e5f88:	9b01      	ldr	r3, [sp, #4]
   e5f8a:	4299      	cmp	r1, r3
   e5f8c:	d1a2      	bne.n	e5ed4 <__tzcalc_limits+0x74>
   e5f8e:	69c3      	ldr	r3, [r0, #28]
   e5f90:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e5f92:	4293      	cmp	r3, r2
   e5f94:	bfac      	ite	ge
   e5f96:	2300      	movge	r3, #0
   e5f98:	2301      	movlt	r3, #1
   e5f9a:	6003      	str	r3, [r0, #0]
   e5f9c:	2001      	movs	r0, #1
   e5f9e:	e000      	b.n	e5fa2 <__tzcalc_limits+0x142>
   e5fa0:	2000      	movs	r0, #0
   e5fa2:	b003      	add	sp, #12
   e5fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e5fa8:	000e8fac 	.word	0x000e8fac
   e5fac:	00015180 	.word	0x00015180

000e5fb0 <__tz_lock>:
   e5fb0:	4770      	bx	lr

000e5fb2 <__tz_unlock>:
   e5fb2:	4770      	bx	lr

000e5fb4 <_tzset_unlocked>:
   e5fb4:	4b01      	ldr	r3, [pc, #4]	; (e5fbc <_tzset_unlocked+0x8>)
   e5fb6:	6818      	ldr	r0, [r3, #0]
   e5fb8:	f000 b802 	b.w	e5fc0 <_tzset_unlocked_r>
   e5fbc:	2003d728 	.word	0x2003d728

000e5fc0 <_tzset_unlocked_r>:
   e5fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e5fc4:	b08d      	sub	sp, #52	; 0x34
   e5fc6:	4607      	mov	r7, r0
   e5fc8:	f000 fcf4 	bl	e69b4 <__gettzinfo>
   e5fcc:	49b0      	ldr	r1, [pc, #704]	; (e6290 <_tzset_unlocked_r+0x2d0>)
   e5fce:	4eb1      	ldr	r6, [pc, #708]	; (e6294 <_tzset_unlocked_r+0x2d4>)
   e5fd0:	4604      	mov	r4, r0
   e5fd2:	4638      	mov	r0, r7
   e5fd4:	f000 fce6 	bl	e69a4 <_getenv_r>
   e5fd8:	4605      	mov	r5, r0
   e5fda:	b960      	cbnz	r0, e5ff6 <_tzset_unlocked_r+0x36>
   e5fdc:	4bae      	ldr	r3, [pc, #696]	; (e6298 <_tzset_unlocked_r+0x2d8>)
   e5fde:	4aaf      	ldr	r2, [pc, #700]	; (e629c <_tzset_unlocked_r+0x2dc>)
   e5fe0:	6018      	str	r0, [r3, #0]
   e5fe2:	4baf      	ldr	r3, [pc, #700]	; (e62a0 <_tzset_unlocked_r+0x2e0>)
   e5fe4:	6018      	str	r0, [r3, #0]
   e5fe6:	4baf      	ldr	r3, [pc, #700]	; (e62a4 <_tzset_unlocked_r+0x2e4>)
   e5fe8:	6830      	ldr	r0, [r6, #0]
   e5fea:	601a      	str	r2, [r3, #0]
   e5fec:	605a      	str	r2, [r3, #4]
   e5fee:	f7f4 ffb1 	bl	daf54 <free>
   e5ff2:	6035      	str	r5, [r6, #0]
   e5ff4:	e148      	b.n	e6288 <_tzset_unlocked_r+0x2c8>
   e5ff6:	6831      	ldr	r1, [r6, #0]
   e5ff8:	b979      	cbnz	r1, e601a <_tzset_unlocked_r+0x5a>
   e5ffa:	6830      	ldr	r0, [r6, #0]
   e5ffc:	f7f4 ffaa 	bl	daf54 <free>
   e6000:	4628      	mov	r0, r5
   e6002:	f7fe ffa3 	bl	e4f4c <strlen>
   e6006:	1c41      	adds	r1, r0, #1
   e6008:	4638      	mov	r0, r7
   e600a:	f7f4 ffe3 	bl	dafd4 <_malloc_r>
   e600e:	6030      	str	r0, [r6, #0]
   e6010:	b148      	cbz	r0, e6026 <_tzset_unlocked_r+0x66>
   e6012:	4629      	mov	r1, r5
   e6014:	f7fe fa62 	bl	e44dc <strcpy>
   e6018:	e005      	b.n	e6026 <_tzset_unlocked_r+0x66>
   e601a:	f7fe fa55 	bl	e44c8 <strcmp>
   e601e:	2800      	cmp	r0, #0
   e6020:	f000 8132 	beq.w	e6288 <_tzset_unlocked_r+0x2c8>
   e6024:	e7e9      	b.n	e5ffa <_tzset_unlocked_r+0x3a>
   e6026:	782b      	ldrb	r3, [r5, #0]
   e6028:	4a9f      	ldr	r2, [pc, #636]	; (e62a8 <_tzset_unlocked_r+0x2e8>)
   e602a:	49a0      	ldr	r1, [pc, #640]	; (e62ac <_tzset_unlocked_r+0x2ec>)
   e602c:	2b3a      	cmp	r3, #58	; 0x3a
   e602e:	bf08      	it	eq
   e6030:	3501      	addeq	r5, #1
   e6032:	ae0a      	add	r6, sp, #40	; 0x28
   e6034:	4633      	mov	r3, r6
   e6036:	4628      	mov	r0, r5
   e6038:	f7f4 ffa4 	bl	daf84 <siscanf>
   e603c:	2800      	cmp	r0, #0
   e603e:	f340 8123 	ble.w	e6288 <_tzset_unlocked_r+0x2c8>
   e6042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e6044:	18ef      	adds	r7, r5, r3
   e6046:	5ceb      	ldrb	r3, [r5, r3]
   e6048:	2b2d      	cmp	r3, #45	; 0x2d
   e604a:	d103      	bne.n	e6054 <_tzset_unlocked_r+0x94>
   e604c:	3701      	adds	r7, #1
   e604e:	f04f 35ff 	mov.w	r5, #4294967295
   e6052:	e003      	b.n	e605c <_tzset_unlocked_r+0x9c>
   e6054:	2b2b      	cmp	r3, #43	; 0x2b
   e6056:	bf08      	it	eq
   e6058:	3701      	addeq	r7, #1
   e605a:	2501      	movs	r5, #1
   e605c:	f10d 0a20 	add.w	sl, sp, #32
   e6060:	f10d 0b1e 	add.w	fp, sp, #30
   e6064:	f04f 0800 	mov.w	r8, #0
   e6068:	9603      	str	r6, [sp, #12]
   e606a:	f8cd a008 	str.w	sl, [sp, #8]
   e606e:	9601      	str	r6, [sp, #4]
   e6070:	f8cd b000 	str.w	fp, [sp]
   e6074:	4633      	mov	r3, r6
   e6076:	aa07      	add	r2, sp, #28
   e6078:	498d      	ldr	r1, [pc, #564]	; (e62b0 <_tzset_unlocked_r+0x2f0>)
   e607a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e607e:	4638      	mov	r0, r7
   e6080:	f8ad 8020 	strh.w	r8, [sp, #32]
   e6084:	f7f4 ff7e 	bl	daf84 <siscanf>
   e6088:	4540      	cmp	r0, r8
   e608a:	f340 80fd 	ble.w	e6288 <_tzset_unlocked_r+0x2c8>
   e608e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e6092:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e6096:	f8df 9224 	ldr.w	r9, [pc, #548]	; e62bc <_tzset_unlocked_r+0x2fc>
   e609a:	213c      	movs	r1, #60	; 0x3c
   e609c:	fb01 3302 	mla	r3, r1, r2, r3
   e60a0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e60a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e60a8:	fb01 3302 	mla	r3, r1, r2, r3
   e60ac:	435d      	muls	r5, r3
   e60ae:	6225      	str	r5, [r4, #32]
   e60b0:	4d7c      	ldr	r5, [pc, #496]	; (e62a4 <_tzset_unlocked_r+0x2e4>)
   e60b2:	4b7d      	ldr	r3, [pc, #500]	; (e62a8 <_tzset_unlocked_r+0x2e8>)
   e60b4:	602b      	str	r3, [r5, #0]
   e60b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e60b8:	497c      	ldr	r1, [pc, #496]	; (e62ac <_tzset_unlocked_r+0x2ec>)
   e60ba:	441f      	add	r7, r3
   e60bc:	464a      	mov	r2, r9
   e60be:	4633      	mov	r3, r6
   e60c0:	4638      	mov	r0, r7
   e60c2:	f7f4 ff5f 	bl	daf84 <siscanf>
   e60c6:	4540      	cmp	r0, r8
   e60c8:	dc08      	bgt.n	e60dc <_tzset_unlocked_r+0x11c>
   e60ca:	682b      	ldr	r3, [r5, #0]
   e60cc:	606b      	str	r3, [r5, #4]
   e60ce:	4b72      	ldr	r3, [pc, #456]	; (e6298 <_tzset_unlocked_r+0x2d8>)
   e60d0:	6a22      	ldr	r2, [r4, #32]
   e60d2:	601a      	str	r2, [r3, #0]
   e60d4:	4b72      	ldr	r3, [pc, #456]	; (e62a0 <_tzset_unlocked_r+0x2e0>)
   e60d6:	f8c3 8000 	str.w	r8, [r3]
   e60da:	e0d5      	b.n	e6288 <_tzset_unlocked_r+0x2c8>
   e60dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e60de:	f8c5 9004 	str.w	r9, [r5, #4]
   e60e2:	18fd      	adds	r5, r7, r3
   e60e4:	5cfb      	ldrb	r3, [r7, r3]
   e60e6:	2b2d      	cmp	r3, #45	; 0x2d
   e60e8:	d103      	bne.n	e60f2 <_tzset_unlocked_r+0x132>
   e60ea:	3501      	adds	r5, #1
   e60ec:	f04f 37ff 	mov.w	r7, #4294967295
   e60f0:	e003      	b.n	e60fa <_tzset_unlocked_r+0x13a>
   e60f2:	2b2b      	cmp	r3, #43	; 0x2b
   e60f4:	bf08      	it	eq
   e60f6:	3501      	addeq	r5, #1
   e60f8:	2701      	movs	r7, #1
   e60fa:	2300      	movs	r3, #0
   e60fc:	f8ad 301c 	strh.w	r3, [sp, #28]
   e6100:	f8ad 301e 	strh.w	r3, [sp, #30]
   e6104:	f8ad 3020 	strh.w	r3, [sp, #32]
   e6108:	930a      	str	r3, [sp, #40]	; 0x28
   e610a:	9603      	str	r6, [sp, #12]
   e610c:	f8cd a008 	str.w	sl, [sp, #8]
   e6110:	9601      	str	r6, [sp, #4]
   e6112:	f8cd b000 	str.w	fp, [sp]
   e6116:	4633      	mov	r3, r6
   e6118:	aa07      	add	r2, sp, #28
   e611a:	4965      	ldr	r1, [pc, #404]	; (e62b0 <_tzset_unlocked_r+0x2f0>)
   e611c:	4628      	mov	r0, r5
   e611e:	f7f4 ff31 	bl	daf84 <siscanf>
   e6122:	2800      	cmp	r0, #0
   e6124:	dc04      	bgt.n	e6130 <_tzset_unlocked_r+0x170>
   e6126:	6a23      	ldr	r3, [r4, #32]
   e6128:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e612c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e612e:	e00e      	b.n	e614e <_tzset_unlocked_r+0x18e>
   e6130:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e6134:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e6138:	213c      	movs	r1, #60	; 0x3c
   e613a:	fb01 3302 	mla	r3, r1, r2, r3
   e613e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e6142:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e6146:	fb01 3302 	mla	r3, r1, r2, r3
   e614a:	435f      	muls	r7, r3
   e614c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e6150:	4627      	mov	r7, r4
   e6152:	441d      	add	r5, r3
   e6154:	f04f 0900 	mov.w	r9, #0
   e6158:	782b      	ldrb	r3, [r5, #0]
   e615a:	2b2c      	cmp	r3, #44	; 0x2c
   e615c:	bf08      	it	eq
   e615e:	3501      	addeq	r5, #1
   e6160:	f895 8000 	ldrb.w	r8, [r5]
   e6164:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e6168:	d126      	bne.n	e61b8 <_tzset_unlocked_r+0x1f8>
   e616a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e616e:	9302      	str	r3, [sp, #8]
   e6170:	ab09      	add	r3, sp, #36	; 0x24
   e6172:	9300      	str	r3, [sp, #0]
   e6174:	9603      	str	r6, [sp, #12]
   e6176:	9601      	str	r6, [sp, #4]
   e6178:	4633      	mov	r3, r6
   e617a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e617e:	494d      	ldr	r1, [pc, #308]	; (e62b4 <_tzset_unlocked_r+0x2f4>)
   e6180:	4628      	mov	r0, r5
   e6182:	f7f4 feff 	bl	daf84 <siscanf>
   e6186:	2803      	cmp	r0, #3
   e6188:	d17e      	bne.n	e6288 <_tzset_unlocked_r+0x2c8>
   e618a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e618e:	1e4b      	subs	r3, r1, #1
   e6190:	2b0b      	cmp	r3, #11
   e6192:	d879      	bhi.n	e6288 <_tzset_unlocked_r+0x2c8>
   e6194:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e6198:	1e53      	subs	r3, r2, #1
   e619a:	2b04      	cmp	r3, #4
   e619c:	d874      	bhi.n	e6288 <_tzset_unlocked_r+0x2c8>
   e619e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e61a2:	2b06      	cmp	r3, #6
   e61a4:	d870      	bhi.n	e6288 <_tzset_unlocked_r+0x2c8>
   e61a6:	f887 8008 	strb.w	r8, [r7, #8]
   e61aa:	60f9      	str	r1, [r7, #12]
   e61ac:	613a      	str	r2, [r7, #16]
   e61ae:	617b      	str	r3, [r7, #20]
   e61b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e61b2:	eb05 0803 	add.w	r8, r5, r3
   e61b6:	e02a      	b.n	e620e <_tzset_unlocked_r+0x24e>
   e61b8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e61bc:	bf06      	itte	eq
   e61be:	3501      	addeq	r5, #1
   e61c0:	4643      	moveq	r3, r8
   e61c2:	2344      	movne	r3, #68	; 0x44
   e61c4:	220a      	movs	r2, #10
   e61c6:	a90b      	add	r1, sp, #44	; 0x2c
   e61c8:	4628      	mov	r0, r5
   e61ca:	9305      	str	r3, [sp, #20]
   e61cc:	f7ff fe22 	bl	e5e14 <strtoul>
   e61d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e61d4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e61d8:	4545      	cmp	r5, r8
   e61da:	9b05      	ldr	r3, [sp, #20]
   e61dc:	d114      	bne.n	e6208 <_tzset_unlocked_r+0x248>
   e61de:	234d      	movs	r3, #77	; 0x4d
   e61e0:	f1b9 0f00 	cmp.w	r9, #0
   e61e4:	d107      	bne.n	e61f6 <_tzset_unlocked_r+0x236>
   e61e6:	7223      	strb	r3, [r4, #8]
   e61e8:	2303      	movs	r3, #3
   e61ea:	60e3      	str	r3, [r4, #12]
   e61ec:	2302      	movs	r3, #2
   e61ee:	6123      	str	r3, [r4, #16]
   e61f0:	f8c4 9014 	str.w	r9, [r4, #20]
   e61f4:	e00b      	b.n	e620e <_tzset_unlocked_r+0x24e>
   e61f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e61fa:	230b      	movs	r3, #11
   e61fc:	62a3      	str	r3, [r4, #40]	; 0x28
   e61fe:	2301      	movs	r3, #1
   e6200:	62e3      	str	r3, [r4, #44]	; 0x2c
   e6202:	2300      	movs	r3, #0
   e6204:	6323      	str	r3, [r4, #48]	; 0x30
   e6206:	e002      	b.n	e620e <_tzset_unlocked_r+0x24e>
   e6208:	b280      	uxth	r0, r0
   e620a:	723b      	strb	r3, [r7, #8]
   e620c:	6178      	str	r0, [r7, #20]
   e620e:	2302      	movs	r3, #2
   e6210:	f8ad 301c 	strh.w	r3, [sp, #28]
   e6214:	2300      	movs	r3, #0
   e6216:	f8ad 301e 	strh.w	r3, [sp, #30]
   e621a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e621e:	930a      	str	r3, [sp, #40]	; 0x28
   e6220:	f898 3000 	ldrb.w	r3, [r8]
   e6224:	2b2f      	cmp	r3, #47	; 0x2f
   e6226:	d10b      	bne.n	e6240 <_tzset_unlocked_r+0x280>
   e6228:	9603      	str	r6, [sp, #12]
   e622a:	f8cd a008 	str.w	sl, [sp, #8]
   e622e:	9601      	str	r6, [sp, #4]
   e6230:	f8cd b000 	str.w	fp, [sp]
   e6234:	4633      	mov	r3, r6
   e6236:	aa07      	add	r2, sp, #28
   e6238:	491f      	ldr	r1, [pc, #124]	; (e62b8 <_tzset_unlocked_r+0x2f8>)
   e623a:	4640      	mov	r0, r8
   e623c:	f7f4 fea2 	bl	daf84 <siscanf>
   e6240:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e6244:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e6248:	213c      	movs	r1, #60	; 0x3c
   e624a:	fb01 3302 	mla	r3, r1, r2, r3
   e624e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e6252:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e6256:	fb01 3302 	mla	r3, r1, r2, r3
   e625a:	61bb      	str	r3, [r7, #24]
   e625c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e625e:	f109 0901 	add.w	r9, r9, #1
   e6262:	f1b9 0f02 	cmp.w	r9, #2
   e6266:	4445      	add	r5, r8
   e6268:	f107 071c 	add.w	r7, r7, #28
   e626c:	f47f af74 	bne.w	e6158 <_tzset_unlocked_r+0x198>
   e6270:	6860      	ldr	r0, [r4, #4]
   e6272:	f7ff fdf5 	bl	e5e60 <__tzcalc_limits>
   e6276:	4b08      	ldr	r3, [pc, #32]	; (e6298 <_tzset_unlocked_r+0x2d8>)
   e6278:	6a22      	ldr	r2, [r4, #32]
   e627a:	601a      	str	r2, [r3, #0]
   e627c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e627e:	1a9b      	subs	r3, r3, r2
   e6280:	4a07      	ldr	r2, [pc, #28]	; (e62a0 <_tzset_unlocked_r+0x2e0>)
   e6282:	bf18      	it	ne
   e6284:	2301      	movne	r3, #1
   e6286:	6013      	str	r3, [r2, #0]
   e6288:	b00d      	add	sp, #52	; 0x34
   e628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e628e:	bf00      	nop
   e6290:	000e92ec 	.word	0x000e92ec
   e6294:	2003e7e0 	.word	0x2003e7e0
   e6298:	2003e7e8 	.word	0x2003e7e8
   e629c:	000e92ef 	.word	0x000e92ef
   e62a0:	2003e7e4 	.word	0x2003e7e4
   e62a4:	2003d764 	.word	0x2003d764
   e62a8:	2003e7d3 	.word	0x2003e7d3
   e62ac:	000e92f3 	.word	0x000e92f3
   e62b0:	000e9316 	.word	0x000e9316
   e62b4:	000e9302 	.word	0x000e9302
   e62b8:	000e9315 	.word	0x000e9315
   e62bc:	2003e7c8 	.word	0x2003e7c8

000e62c0 <abs>:
   e62c0:	2800      	cmp	r0, #0
   e62c2:	bfb8      	it	lt
   e62c4:	4240      	neglt	r0, r0
   e62c6:	4770      	bx	lr

000e62c8 <div>:
   e62c8:	2900      	cmp	r1, #0
   e62ca:	b510      	push	{r4, lr}
   e62cc:	fb91 f4f2 	sdiv	r4, r1, r2
   e62d0:	fb02 1314 	mls	r3, r2, r4, r1
   e62d4:	db04      	blt.n	e62e0 <div+0x18>
   e62d6:	2b00      	cmp	r3, #0
   e62d8:	da07      	bge.n	e62ea <div+0x22>
   e62da:	3401      	adds	r4, #1
   e62dc:	1a9b      	subs	r3, r3, r2
   e62de:	e004      	b.n	e62ea <div+0x22>
   e62e0:	2b00      	cmp	r3, #0
   e62e2:	bfc4      	itt	gt
   e62e4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e62e8:	189b      	addgt	r3, r3, r2
   e62ea:	6004      	str	r4, [r0, #0]
   e62ec:	6043      	str	r3, [r0, #4]
   e62ee:	bd10      	pop	{r4, pc}

000e62f0 <rshift>:
   e62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e62f2:	6906      	ldr	r6, [r0, #16]
   e62f4:	114b      	asrs	r3, r1, #5
   e62f6:	42b3      	cmp	r3, r6
   e62f8:	f100 0514 	add.w	r5, r0, #20
   e62fc:	da27      	bge.n	e634e <rshift+0x5e>
   e62fe:	f011 011f 	ands.w	r1, r1, #31
   e6302:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e6306:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e630a:	d101      	bne.n	e6310 <rshift+0x20>
   e630c:	4629      	mov	r1, r5
   e630e:	e016      	b.n	e633e <rshift+0x4e>
   e6310:	1d14      	adds	r4, r2, #4
   e6312:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e6316:	f1c1 0e20 	rsb	lr, r1, #32
   e631a:	40ca      	lsrs	r2, r1
   e631c:	462b      	mov	r3, r5
   e631e:	42b4      	cmp	r4, r6
   e6320:	d209      	bcs.n	e6336 <rshift+0x46>
   e6322:	6827      	ldr	r7, [r4, #0]
   e6324:	fa07 f70e 	lsl.w	r7, r7, lr
   e6328:	433a      	orrs	r2, r7
   e632a:	f843 2b04 	str.w	r2, [r3], #4
   e632e:	f854 2b04 	ldr.w	r2, [r4], #4
   e6332:	40ca      	lsrs	r2, r1
   e6334:	e7f3      	b.n	e631e <rshift+0x2e>
   e6336:	601a      	str	r2, [r3, #0]
   e6338:	b152      	cbz	r2, e6350 <rshift+0x60>
   e633a:	3304      	adds	r3, #4
   e633c:	e008      	b.n	e6350 <rshift+0x60>
   e633e:	42b2      	cmp	r2, r6
   e6340:	460b      	mov	r3, r1
   e6342:	d205      	bcs.n	e6350 <rshift+0x60>
   e6344:	f852 3b04 	ldr.w	r3, [r2], #4
   e6348:	f841 3b04 	str.w	r3, [r1], #4
   e634c:	e7f7      	b.n	e633e <rshift+0x4e>
   e634e:	462b      	mov	r3, r5
   e6350:	1b5b      	subs	r3, r3, r5
   e6352:	109b      	asrs	r3, r3, #2
   e6354:	6103      	str	r3, [r0, #16]
   e6356:	b903      	cbnz	r3, e635a <rshift+0x6a>
   e6358:	6143      	str	r3, [r0, #20]
   e635a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e635c <__hexdig_fun>:
   e635c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e6360:	2b09      	cmp	r3, #9
   e6362:	d801      	bhi.n	e6368 <__hexdig_fun+0xc>
   e6364:	3820      	subs	r0, #32
   e6366:	e00a      	b.n	e637e <__hexdig_fun+0x22>
   e6368:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e636c:	2b05      	cmp	r3, #5
   e636e:	d801      	bhi.n	e6374 <__hexdig_fun+0x18>
   e6370:	3847      	subs	r0, #71	; 0x47
   e6372:	e004      	b.n	e637e <__hexdig_fun+0x22>
   e6374:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e6378:	2b05      	cmp	r3, #5
   e637a:	d802      	bhi.n	e6382 <__hexdig_fun+0x26>
   e637c:	3827      	subs	r0, #39	; 0x27
   e637e:	b2c0      	uxtb	r0, r0
   e6380:	4770      	bx	lr
   e6382:	2000      	movs	r0, #0
   e6384:	4770      	bx	lr

000e6386 <__gethex>:
   e6386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e638a:	b08b      	sub	sp, #44	; 0x2c
   e638c:	468a      	mov	sl, r1
   e638e:	4690      	mov	r8, r2
   e6390:	9306      	str	r3, [sp, #24]
   e6392:	9002      	str	r0, [sp, #8]
   e6394:	f7fd fe0a 	bl	e3fac <_localeconv_r>
   e6398:	6803      	ldr	r3, [r0, #0]
   e639a:	9303      	str	r3, [sp, #12]
   e639c:	4618      	mov	r0, r3
   e639e:	f7fe fdd5 	bl	e4f4c <strlen>
   e63a2:	9b03      	ldr	r3, [sp, #12]
   e63a4:	9001      	str	r0, [sp, #4]
   e63a6:	4403      	add	r3, r0
   e63a8:	f04f 0b00 	mov.w	fp, #0
   e63ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e63b0:	9307      	str	r3, [sp, #28]
   e63b2:	f8da 3000 	ldr.w	r3, [sl]
   e63b6:	3302      	adds	r3, #2
   e63b8:	461f      	mov	r7, r3
   e63ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   e63be:	2830      	cmp	r0, #48	; 0x30
   e63c0:	d102      	bne.n	e63c8 <__gethex+0x42>
   e63c2:	f10b 0b01 	add.w	fp, fp, #1
   e63c6:	e7f7      	b.n	e63b8 <__gethex+0x32>
   e63c8:	f7ff ffc8 	bl	e635c <__hexdig_fun>
   e63cc:	4604      	mov	r4, r0
   e63ce:	b9e0      	cbnz	r0, e640a <__gethex+0x84>
   e63d0:	9a01      	ldr	r2, [sp, #4]
   e63d2:	9903      	ldr	r1, [sp, #12]
   e63d4:	4638      	mov	r0, r7
   e63d6:	f7fe fdc1 	bl	e4f5c <strncmp>
   e63da:	2800      	cmp	r0, #0
   e63dc:	d134      	bne.n	e6448 <__gethex+0xc2>
   e63de:	9b01      	ldr	r3, [sp, #4]
   e63e0:	5cf8      	ldrb	r0, [r7, r3]
   e63e2:	18fe      	adds	r6, r7, r3
   e63e4:	f7ff ffba 	bl	e635c <__hexdig_fun>
   e63e8:	b380      	cbz	r0, e644c <__gethex+0xc6>
   e63ea:	4633      	mov	r3, r6
   e63ec:	7818      	ldrb	r0, [r3, #0]
   e63ee:	2830      	cmp	r0, #48	; 0x30
   e63f0:	461f      	mov	r7, r3
   e63f2:	f103 0301 	add.w	r3, r3, #1
   e63f6:	d0f9      	beq.n	e63ec <__gethex+0x66>
   e63f8:	f7ff ffb0 	bl	e635c <__hexdig_fun>
   e63fc:	fab0 f580 	clz	r5, r0
   e6400:	096d      	lsrs	r5, r5, #5
   e6402:	4634      	mov	r4, r6
   e6404:	f04f 0b01 	mov.w	fp, #1
   e6408:	e001      	b.n	e640e <__gethex+0x88>
   e640a:	2500      	movs	r5, #0
   e640c:	462c      	mov	r4, r5
   e640e:	463a      	mov	r2, r7
   e6410:	4616      	mov	r6, r2
   e6412:	3201      	adds	r2, #1
   e6414:	7830      	ldrb	r0, [r6, #0]
   e6416:	f7ff ffa1 	bl	e635c <__hexdig_fun>
   e641a:	2800      	cmp	r0, #0
   e641c:	d1f8      	bne.n	e6410 <__gethex+0x8a>
   e641e:	9a01      	ldr	r2, [sp, #4]
   e6420:	9903      	ldr	r1, [sp, #12]
   e6422:	4630      	mov	r0, r6
   e6424:	f7fe fd9a 	bl	e4f5c <strncmp>
   e6428:	b950      	cbnz	r0, e6440 <__gethex+0xba>
   e642a:	b954      	cbnz	r4, e6442 <__gethex+0xbc>
   e642c:	9b01      	ldr	r3, [sp, #4]
   e642e:	18f4      	adds	r4, r6, r3
   e6430:	4622      	mov	r2, r4
   e6432:	4616      	mov	r6, r2
   e6434:	3201      	adds	r2, #1
   e6436:	7830      	ldrb	r0, [r6, #0]
   e6438:	f7ff ff90 	bl	e635c <__hexdig_fun>
   e643c:	2800      	cmp	r0, #0
   e643e:	d1f8      	bne.n	e6432 <__gethex+0xac>
   e6440:	b134      	cbz	r4, e6450 <__gethex+0xca>
   e6442:	1ba4      	subs	r4, r4, r6
   e6444:	00a4      	lsls	r4, r4, #2
   e6446:	e003      	b.n	e6450 <__gethex+0xca>
   e6448:	463e      	mov	r6, r7
   e644a:	e000      	b.n	e644e <__gethex+0xc8>
   e644c:	4604      	mov	r4, r0
   e644e:	2501      	movs	r5, #1
   e6450:	7833      	ldrb	r3, [r6, #0]
   e6452:	2b50      	cmp	r3, #80	; 0x50
   e6454:	d001      	beq.n	e645a <__gethex+0xd4>
   e6456:	2b70      	cmp	r3, #112	; 0x70
   e6458:	d12a      	bne.n	e64b0 <__gethex+0x12a>
   e645a:	7873      	ldrb	r3, [r6, #1]
   e645c:	2b2b      	cmp	r3, #43	; 0x2b
   e645e:	d008      	beq.n	e6472 <__gethex+0xec>
   e6460:	2b2d      	cmp	r3, #45	; 0x2d
   e6462:	d003      	beq.n	e646c <__gethex+0xe6>
   e6464:	1c71      	adds	r1, r6, #1
   e6466:	f04f 0900 	mov.w	r9, #0
   e646a:	e005      	b.n	e6478 <__gethex+0xf2>
   e646c:	f04f 0901 	mov.w	r9, #1
   e6470:	e001      	b.n	e6476 <__gethex+0xf0>
   e6472:	f04f 0900 	mov.w	r9, #0
   e6476:	1cb1      	adds	r1, r6, #2
   e6478:	7808      	ldrb	r0, [r1, #0]
   e647a:	f7ff ff6f 	bl	e635c <__hexdig_fun>
   e647e:	1e43      	subs	r3, r0, #1
   e6480:	b2db      	uxtb	r3, r3
   e6482:	2b18      	cmp	r3, #24
   e6484:	d814      	bhi.n	e64b0 <__gethex+0x12a>
   e6486:	f1a0 0210 	sub.w	r2, r0, #16
   e648a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e648e:	f7ff ff65 	bl	e635c <__hexdig_fun>
   e6492:	1e43      	subs	r3, r0, #1
   e6494:	b2db      	uxtb	r3, r3
   e6496:	2b18      	cmp	r3, #24
   e6498:	d804      	bhi.n	e64a4 <__gethex+0x11e>
   e649a:	230a      	movs	r3, #10
   e649c:	fb03 0202 	mla	r2, r3, r2, r0
   e64a0:	3a10      	subs	r2, #16
   e64a2:	e7f2      	b.n	e648a <__gethex+0x104>
   e64a4:	f1b9 0f00 	cmp.w	r9, #0
   e64a8:	d000      	beq.n	e64ac <__gethex+0x126>
   e64aa:	4252      	negs	r2, r2
   e64ac:	4414      	add	r4, r2
   e64ae:	e000      	b.n	e64b2 <__gethex+0x12c>
   e64b0:	4631      	mov	r1, r6
   e64b2:	f8ca 1000 	str.w	r1, [sl]
   e64b6:	b12d      	cbz	r5, e64c4 <__gethex+0x13e>
   e64b8:	f1bb 0f00 	cmp.w	fp, #0
   e64bc:	bf14      	ite	ne
   e64be:	2000      	movne	r0, #0
   e64c0:	2006      	moveq	r0, #6
   e64c2:	e17c      	b.n	e67be <__gethex+0x438>
   e64c4:	1bf3      	subs	r3, r6, r7
   e64c6:	3b01      	subs	r3, #1
   e64c8:	4629      	mov	r1, r5
   e64ca:	2b07      	cmp	r3, #7
   e64cc:	dd02      	ble.n	e64d4 <__gethex+0x14e>
   e64ce:	3101      	adds	r1, #1
   e64d0:	105b      	asrs	r3, r3, #1
   e64d2:	e7fa      	b.n	e64ca <__gethex+0x144>
   e64d4:	9802      	ldr	r0, [sp, #8]
   e64d6:	f000 fb0d 	bl	e6af4 <_Balloc>
   e64da:	9b01      	ldr	r3, [sp, #4]
   e64dc:	f100 0a14 	add.w	sl, r0, #20
   e64e0:	f04f 0900 	mov.w	r9, #0
   e64e4:	f1c3 0301 	rsb	r3, r3, #1
   e64e8:	4605      	mov	r5, r0
   e64ea:	f8cd a010 	str.w	sl, [sp, #16]
   e64ee:	46cb      	mov	fp, r9
   e64f0:	9308      	str	r3, [sp, #32]
   e64f2:	42b7      	cmp	r7, r6
   e64f4:	d22f      	bcs.n	e6556 <__gethex+0x1d0>
   e64f6:	1e73      	subs	r3, r6, #1
   e64f8:	9305      	str	r3, [sp, #20]
   e64fa:	9a07      	ldr	r2, [sp, #28]
   e64fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e6500:	4293      	cmp	r3, r2
   e6502:	d00b      	beq.n	e651c <__gethex+0x196>
   e6504:	f1bb 0f20 	cmp.w	fp, #32
   e6508:	d116      	bne.n	e6538 <__gethex+0x1b2>
   e650a:	9b04      	ldr	r3, [sp, #16]
   e650c:	f8c3 9000 	str.w	r9, [r3]
   e6510:	3304      	adds	r3, #4
   e6512:	f04f 0900 	mov.w	r9, #0
   e6516:	9304      	str	r3, [sp, #16]
   e6518:	46cb      	mov	fp, r9
   e651a:	e00d      	b.n	e6538 <__gethex+0x1b2>
   e651c:	9b05      	ldr	r3, [sp, #20]
   e651e:	9a08      	ldr	r2, [sp, #32]
   e6520:	4413      	add	r3, r2
   e6522:	429f      	cmp	r7, r3
   e6524:	d8ee      	bhi.n	e6504 <__gethex+0x17e>
   e6526:	4618      	mov	r0, r3
   e6528:	9a01      	ldr	r2, [sp, #4]
   e652a:	9903      	ldr	r1, [sp, #12]
   e652c:	9309      	str	r3, [sp, #36]	; 0x24
   e652e:	f7fe fd15 	bl	e4f5c <strncmp>
   e6532:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e6534:	b168      	cbz	r0, e6552 <__gethex+0x1cc>
   e6536:	e7e5      	b.n	e6504 <__gethex+0x17e>
   e6538:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e653c:	f7ff ff0e 	bl	e635c <__hexdig_fun>
   e6540:	f000 000f 	and.w	r0, r0, #15
   e6544:	fa00 f00b 	lsl.w	r0, r0, fp
   e6548:	9b05      	ldr	r3, [sp, #20]
   e654a:	ea49 0900 	orr.w	r9, r9, r0
   e654e:	f10b 0b04 	add.w	fp, fp, #4
   e6552:	461e      	mov	r6, r3
   e6554:	e7cd      	b.n	e64f2 <__gethex+0x16c>
   e6556:	9804      	ldr	r0, [sp, #16]
   e6558:	f840 9b04 	str.w	r9, [r0], #4
   e655c:	ebca 0000 	rsb	r0, sl, r0
   e6560:	1080      	asrs	r0, r0, #2
   e6562:	6128      	str	r0, [r5, #16]
   e6564:	0147      	lsls	r7, r0, #5
   e6566:	4648      	mov	r0, r9
   e6568:	f000 fb89 	bl	e6c7e <__hi0bits>
   e656c:	f8d8 6000 	ldr.w	r6, [r8]
   e6570:	1a38      	subs	r0, r7, r0
   e6572:	42b0      	cmp	r0, r6
   e6574:	dd26      	ble.n	e65c4 <__gethex+0x23e>
   e6576:	1b87      	subs	r7, r0, r6
   e6578:	4639      	mov	r1, r7
   e657a:	4628      	mov	r0, r5
   e657c:	f000 fe87 	bl	e728e <__any_on>
   e6580:	b1c8      	cbz	r0, e65b6 <__gethex+0x230>
   e6582:	1e7b      	subs	r3, r7, #1
   e6584:	1159      	asrs	r1, r3, #5
   e6586:	f003 021f 	and.w	r2, r3, #31
   e658a:	f04f 0901 	mov.w	r9, #1
   e658e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e6592:	fa09 f202 	lsl.w	r2, r9, r2
   e6596:	420a      	tst	r2, r1
   e6598:	d00e      	beq.n	e65b8 <__gethex+0x232>
   e659a:	454b      	cmp	r3, r9
   e659c:	dc02      	bgt.n	e65a4 <__gethex+0x21e>
   e659e:	f04f 0902 	mov.w	r9, #2
   e65a2:	e009      	b.n	e65b8 <__gethex+0x232>
   e65a4:	1eb9      	subs	r1, r7, #2
   e65a6:	4628      	mov	r0, r5
   e65a8:	f000 fe71 	bl	e728e <__any_on>
   e65ac:	2800      	cmp	r0, #0
   e65ae:	d0f6      	beq.n	e659e <__gethex+0x218>
   e65b0:	f04f 0903 	mov.w	r9, #3
   e65b4:	e000      	b.n	e65b8 <__gethex+0x232>
   e65b6:	4681      	mov	r9, r0
   e65b8:	4639      	mov	r1, r7
   e65ba:	4628      	mov	r0, r5
   e65bc:	f7ff fe98 	bl	e62f0 <rshift>
   e65c0:	443c      	add	r4, r7
   e65c2:	e00c      	b.n	e65de <__gethex+0x258>
   e65c4:	da09      	bge.n	e65da <__gethex+0x254>
   e65c6:	1a37      	subs	r7, r6, r0
   e65c8:	4629      	mov	r1, r5
   e65ca:	463a      	mov	r2, r7
   e65cc:	9802      	ldr	r0, [sp, #8]
   e65ce:	f000 fc8b 	bl	e6ee8 <__lshift>
   e65d2:	1be4      	subs	r4, r4, r7
   e65d4:	4605      	mov	r5, r0
   e65d6:	f100 0a14 	add.w	sl, r0, #20
   e65da:	f04f 0900 	mov.w	r9, #0
   e65de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e65e2:	429c      	cmp	r4, r3
   e65e4:	dd08      	ble.n	e65f8 <__gethex+0x272>
   e65e6:	9802      	ldr	r0, [sp, #8]
   e65e8:	4629      	mov	r1, r5
   e65ea:	f000 fab8 	bl	e6b5e <_Bfree>
   e65ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e65f0:	2300      	movs	r3, #0
   e65f2:	6013      	str	r3, [r2, #0]
   e65f4:	20a3      	movs	r0, #163	; 0xa3
   e65f6:	e0e2      	b.n	e67be <__gethex+0x438>
   e65f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e65fc:	4284      	cmp	r4, r0
   e65fe:	da53      	bge.n	e66a8 <__gethex+0x322>
   e6600:	1b04      	subs	r4, r0, r4
   e6602:	42a6      	cmp	r6, r4
   e6604:	dc2e      	bgt.n	e6664 <__gethex+0x2de>
   e6606:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e660a:	2b02      	cmp	r3, #2
   e660c:	d01a      	beq.n	e6644 <__gethex+0x2be>
   e660e:	2b03      	cmp	r3, #3
   e6610:	d01c      	beq.n	e664c <__gethex+0x2c6>
   e6612:	2b01      	cmp	r3, #1
   e6614:	d11d      	bne.n	e6652 <__gethex+0x2cc>
   e6616:	42a6      	cmp	r6, r4
   e6618:	d11b      	bne.n	e6652 <__gethex+0x2cc>
   e661a:	2e01      	cmp	r6, #1
   e661c:	dc0b      	bgt.n	e6636 <__gethex+0x2b0>
   e661e:	9a06      	ldr	r2, [sp, #24]
   e6620:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e6624:	6013      	str	r3, [r2, #0]
   e6626:	2301      	movs	r3, #1
   e6628:	612b      	str	r3, [r5, #16]
   e662a:	f8ca 3000 	str.w	r3, [sl]
   e662e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e6630:	2062      	movs	r0, #98	; 0x62
   e6632:	601d      	str	r5, [r3, #0]
   e6634:	e0c3      	b.n	e67be <__gethex+0x438>
   e6636:	1e71      	subs	r1, r6, #1
   e6638:	4628      	mov	r0, r5
   e663a:	f000 fe28 	bl	e728e <__any_on>
   e663e:	2800      	cmp	r0, #0
   e6640:	d1ed      	bne.n	e661e <__gethex+0x298>
   e6642:	e006      	b.n	e6652 <__gethex+0x2cc>
   e6644:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e6646:	2b00      	cmp	r3, #0
   e6648:	d0e9      	beq.n	e661e <__gethex+0x298>
   e664a:	e002      	b.n	e6652 <__gethex+0x2cc>
   e664c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e664e:	2b00      	cmp	r3, #0
   e6650:	d1e5      	bne.n	e661e <__gethex+0x298>
   e6652:	9802      	ldr	r0, [sp, #8]
   e6654:	4629      	mov	r1, r5
   e6656:	f000 fa82 	bl	e6b5e <_Bfree>
   e665a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e665c:	2300      	movs	r3, #0
   e665e:	6013      	str	r3, [r2, #0]
   e6660:	2050      	movs	r0, #80	; 0x50
   e6662:	e0ac      	b.n	e67be <__gethex+0x438>
   e6664:	1e67      	subs	r7, r4, #1
   e6666:	f1b9 0f00 	cmp.w	r9, #0
   e666a:	d106      	bne.n	e667a <__gethex+0x2f4>
   e666c:	b13f      	cbz	r7, e667e <__gethex+0x2f8>
   e666e:	4639      	mov	r1, r7
   e6670:	4628      	mov	r0, r5
   e6672:	f000 fe0c 	bl	e728e <__any_on>
   e6676:	4681      	mov	r9, r0
   e6678:	e001      	b.n	e667e <__gethex+0x2f8>
   e667a:	f04f 0901 	mov.w	r9, #1
   e667e:	117a      	asrs	r2, r7, #5
   e6680:	2301      	movs	r3, #1
   e6682:	f007 071f 	and.w	r7, r7, #31
   e6686:	fa03 f707 	lsl.w	r7, r3, r7
   e668a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e668e:	4621      	mov	r1, r4
   e6690:	421f      	tst	r7, r3
   e6692:	4628      	mov	r0, r5
   e6694:	bf18      	it	ne
   e6696:	f049 0902 	orrne.w	r9, r9, #2
   e669a:	1b36      	subs	r6, r6, r4
   e669c:	f7ff fe28 	bl	e62f0 <rshift>
   e66a0:	2702      	movs	r7, #2
   e66a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e66a6:	e000      	b.n	e66aa <__gethex+0x324>
   e66a8:	2701      	movs	r7, #1
   e66aa:	f1b9 0f00 	cmp.w	r9, #0
   e66ae:	f000 8081 	beq.w	e67b4 <__gethex+0x42e>
   e66b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e66b6:	2b02      	cmp	r3, #2
   e66b8:	d00e      	beq.n	e66d8 <__gethex+0x352>
   e66ba:	2b03      	cmp	r3, #3
   e66bc:	d010      	beq.n	e66e0 <__gethex+0x35a>
   e66be:	2b01      	cmp	r3, #1
   e66c0:	d176      	bne.n	e67b0 <__gethex+0x42a>
   e66c2:	f019 0f02 	tst.w	r9, #2
   e66c6:	d073      	beq.n	e67b0 <__gethex+0x42a>
   e66c8:	f8da 0000 	ldr.w	r0, [sl]
   e66cc:	ea49 0900 	orr.w	r9, r9, r0
   e66d0:	f019 0f01 	tst.w	r9, #1
   e66d4:	d107      	bne.n	e66e6 <__gethex+0x360>
   e66d6:	e06b      	b.n	e67b0 <__gethex+0x42a>
   e66d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e66da:	f1c3 0301 	rsb	r3, r3, #1
   e66de:	9315      	str	r3, [sp, #84]	; 0x54
   e66e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e66e2:	2b00      	cmp	r3, #0
   e66e4:	d064      	beq.n	e67b0 <__gethex+0x42a>
   e66e6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e66ea:	f105 0314 	add.w	r3, r5, #20
   e66ee:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e66f2:	eb03 0109 	add.w	r1, r3, r9
   e66f6:	2000      	movs	r0, #0
   e66f8:	681a      	ldr	r2, [r3, #0]
   e66fa:	f1b2 3fff 	cmp.w	r2, #4294967295
   e66fe:	d002      	beq.n	e6706 <__gethex+0x380>
   e6700:	3201      	adds	r2, #1
   e6702:	601a      	str	r2, [r3, #0]
   e6704:	e020      	b.n	e6748 <__gethex+0x3c2>
   e6706:	f843 0b04 	str.w	r0, [r3], #4
   e670a:	4299      	cmp	r1, r3
   e670c:	d8f4      	bhi.n	e66f8 <__gethex+0x372>
   e670e:	68ab      	ldr	r3, [r5, #8]
   e6710:	459a      	cmp	sl, r3
   e6712:	db12      	blt.n	e673a <__gethex+0x3b4>
   e6714:	6869      	ldr	r1, [r5, #4]
   e6716:	9802      	ldr	r0, [sp, #8]
   e6718:	3101      	adds	r1, #1
   e671a:	f000 f9eb 	bl	e6af4 <_Balloc>
   e671e:	692a      	ldr	r2, [r5, #16]
   e6720:	3202      	adds	r2, #2
   e6722:	f105 010c 	add.w	r1, r5, #12
   e6726:	4683      	mov	fp, r0
   e6728:	0092      	lsls	r2, r2, #2
   e672a:	300c      	adds	r0, #12
   e672c:	f7fd fc42 	bl	e3fb4 <memcpy>
   e6730:	4629      	mov	r1, r5
   e6732:	9802      	ldr	r0, [sp, #8]
   e6734:	f000 fa13 	bl	e6b5e <_Bfree>
   e6738:	465d      	mov	r5, fp
   e673a:	692b      	ldr	r3, [r5, #16]
   e673c:	1c5a      	adds	r2, r3, #1
   e673e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e6742:	612a      	str	r2, [r5, #16]
   e6744:	2201      	movs	r2, #1
   e6746:	615a      	str	r2, [r3, #20]
   e6748:	2f02      	cmp	r7, #2
   e674a:	f105 0214 	add.w	r2, r5, #20
   e674e:	d111      	bne.n	e6774 <__gethex+0x3ee>
   e6750:	f8d8 3000 	ldr.w	r3, [r8]
   e6754:	3b01      	subs	r3, #1
   e6756:	429e      	cmp	r6, r3
   e6758:	d127      	bne.n	e67aa <__gethex+0x424>
   e675a:	1171      	asrs	r1, r6, #5
   e675c:	2301      	movs	r3, #1
   e675e:	f006 061f 	and.w	r6, r6, #31
   e6762:	fa03 f606 	lsl.w	r6, r3, r6
   e6766:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e676a:	421e      	tst	r6, r3
   e676c:	bf0c      	ite	eq
   e676e:	2702      	moveq	r7, #2
   e6770:	2701      	movne	r7, #1
   e6772:	e01a      	b.n	e67aa <__gethex+0x424>
   e6774:	692b      	ldr	r3, [r5, #16]
   e6776:	459a      	cmp	sl, r3
   e6778:	da0a      	bge.n	e6790 <__gethex+0x40a>
   e677a:	2101      	movs	r1, #1
   e677c:	4628      	mov	r0, r5
   e677e:	f7ff fdb7 	bl	e62f0 <rshift>
   e6782:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e6786:	3401      	adds	r4, #1
   e6788:	429c      	cmp	r4, r3
   e678a:	f73f af2c 	bgt.w	e65e6 <__gethex+0x260>
   e678e:	e00b      	b.n	e67a8 <__gethex+0x422>
   e6790:	f016 061f 	ands.w	r6, r6, #31
   e6794:	d008      	beq.n	e67a8 <__gethex+0x422>
   e6796:	4491      	add	r9, r2
   e6798:	f1c6 0620 	rsb	r6, r6, #32
   e679c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e67a0:	f000 fa6d 	bl	e6c7e <__hi0bits>
   e67a4:	42b0      	cmp	r0, r6
   e67a6:	dbe8      	blt.n	e677a <__gethex+0x3f4>
   e67a8:	2701      	movs	r7, #1
   e67aa:	f047 0720 	orr.w	r7, r7, #32
   e67ae:	e001      	b.n	e67b4 <__gethex+0x42e>
   e67b0:	f047 0710 	orr.w	r7, r7, #16
   e67b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e67b6:	601d      	str	r5, [r3, #0]
   e67b8:	9b06      	ldr	r3, [sp, #24]
   e67ba:	4638      	mov	r0, r7
   e67bc:	601c      	str	r4, [r3, #0]
   e67be:	b00b      	add	sp, #44	; 0x2c
   e67c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e67c4 <L_shift>:
   e67c4:	f1c2 0208 	rsb	r2, r2, #8
   e67c8:	0092      	lsls	r2, r2, #2
   e67ca:	b570      	push	{r4, r5, r6, lr}
   e67cc:	f1c2 0620 	rsb	r6, r2, #32
   e67d0:	6843      	ldr	r3, [r0, #4]
   e67d2:	6805      	ldr	r5, [r0, #0]
   e67d4:	fa03 f406 	lsl.w	r4, r3, r6
   e67d8:	432c      	orrs	r4, r5
   e67da:	40d3      	lsrs	r3, r2
   e67dc:	6004      	str	r4, [r0, #0]
   e67de:	f840 3f04 	str.w	r3, [r0, #4]!
   e67e2:	4288      	cmp	r0, r1
   e67e4:	d3f4      	bcc.n	e67d0 <L_shift+0xc>
   e67e6:	bd70      	pop	{r4, r5, r6, pc}

000e67e8 <__match>:
   e67e8:	b530      	push	{r4, r5, lr}
   e67ea:	6803      	ldr	r3, [r0, #0]
   e67ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   e67f0:	3301      	adds	r3, #1
   e67f2:	b14c      	cbz	r4, e6808 <__match+0x20>
   e67f4:	781a      	ldrb	r2, [r3, #0]
   e67f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e67fa:	2d19      	cmp	r5, #25
   e67fc:	bf98      	it	ls
   e67fe:	3220      	addls	r2, #32
   e6800:	42a2      	cmp	r2, r4
   e6802:	d0f3      	beq.n	e67ec <__match+0x4>
   e6804:	2000      	movs	r0, #0
   e6806:	bd30      	pop	{r4, r5, pc}
   e6808:	6003      	str	r3, [r0, #0]
   e680a:	2001      	movs	r0, #1
   e680c:	bd30      	pop	{r4, r5, pc}

000e680e <__hexnan>:
   e680e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e6812:	680b      	ldr	r3, [r1, #0]
   e6814:	f8d0 b000 	ldr.w	fp, [r0]
   e6818:	115e      	asrs	r6, r3, #5
   e681a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e681e:	f013 031f 	ands.w	r3, r3, #31
   e6822:	b085      	sub	sp, #20
   e6824:	bf18      	it	ne
   e6826:	3604      	addne	r6, #4
   e6828:	1f35      	subs	r5, r6, #4
   e682a:	4617      	mov	r7, r2
   e682c:	2200      	movs	r2, #0
   e682e:	4682      	mov	sl, r0
   e6830:	9301      	str	r3, [sp, #4]
   e6832:	f846 2c04 	str.w	r2, [r6, #-4]
   e6836:	46a8      	mov	r8, r5
   e6838:	462c      	mov	r4, r5
   e683a:	9200      	str	r2, [sp, #0]
   e683c:	4691      	mov	r9, r2
   e683e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e6842:	2900      	cmp	r1, #0
   e6844:	d03c      	beq.n	e68c0 <__hexnan+0xb2>
   e6846:	4608      	mov	r0, r1
   e6848:	9203      	str	r2, [sp, #12]
   e684a:	9102      	str	r1, [sp, #8]
   e684c:	f7ff fd86 	bl	e635c <__hexdig_fun>
   e6850:	9a03      	ldr	r2, [sp, #12]
   e6852:	bb00      	cbnz	r0, e6896 <__hexnan+0x88>
   e6854:	9902      	ldr	r1, [sp, #8]
   e6856:	2920      	cmp	r1, #32
   e6858:	d816      	bhi.n	e6888 <__hexnan+0x7a>
   e685a:	9b00      	ldr	r3, [sp, #0]
   e685c:	4599      	cmp	r9, r3
   e685e:	ddee      	ble.n	e683e <__hexnan+0x30>
   e6860:	4544      	cmp	r4, r8
   e6862:	d205      	bcs.n	e6870 <__hexnan+0x62>
   e6864:	2a07      	cmp	r2, #7
   e6866:	dc03      	bgt.n	e6870 <__hexnan+0x62>
   e6868:	4641      	mov	r1, r8
   e686a:	4620      	mov	r0, r4
   e686c:	f7ff ffaa 	bl	e67c4 <L_shift>
   e6870:	42bc      	cmp	r4, r7
   e6872:	d923      	bls.n	e68bc <__hexnan+0xae>
   e6874:	2300      	movs	r3, #0
   e6876:	f1a4 0804 	sub.w	r8, r4, #4
   e687a:	f844 3c04 	str.w	r3, [r4, #-4]
   e687e:	f8cd 9000 	str.w	r9, [sp]
   e6882:	4644      	mov	r4, r8
   e6884:	461a      	mov	r2, r3
   e6886:	e7da      	b.n	e683e <__hexnan+0x30>
   e6888:	2929      	cmp	r1, #41	; 0x29
   e688a:	d148      	bne.n	e691e <__hexnan+0x110>
   e688c:	f10b 0301 	add.w	r3, fp, #1
   e6890:	f8ca 3000 	str.w	r3, [sl]
   e6894:	e014      	b.n	e68c0 <__hexnan+0xb2>
   e6896:	3201      	adds	r2, #1
   e6898:	2a08      	cmp	r2, #8
   e689a:	f109 0901 	add.w	r9, r9, #1
   e689e:	dd06      	ble.n	e68ae <__hexnan+0xa0>
   e68a0:	42bc      	cmp	r4, r7
   e68a2:	d9cc      	bls.n	e683e <__hexnan+0x30>
   e68a4:	2300      	movs	r3, #0
   e68a6:	f844 3c04 	str.w	r3, [r4, #-4]
   e68aa:	2201      	movs	r2, #1
   e68ac:	3c04      	subs	r4, #4
   e68ae:	6821      	ldr	r1, [r4, #0]
   e68b0:	f000 000f 	and.w	r0, r0, #15
   e68b4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e68b8:	6020      	str	r0, [r4, #0]
   e68ba:	e7c0      	b.n	e683e <__hexnan+0x30>
   e68bc:	2208      	movs	r2, #8
   e68be:	e7be      	b.n	e683e <__hexnan+0x30>
   e68c0:	f1b9 0f00 	cmp.w	r9, #0
   e68c4:	d02b      	beq.n	e691e <__hexnan+0x110>
   e68c6:	4544      	cmp	r4, r8
   e68c8:	d205      	bcs.n	e68d6 <__hexnan+0xc8>
   e68ca:	2a07      	cmp	r2, #7
   e68cc:	dc03      	bgt.n	e68d6 <__hexnan+0xc8>
   e68ce:	4641      	mov	r1, r8
   e68d0:	4620      	mov	r0, r4
   e68d2:	f7ff ff77 	bl	e67c4 <L_shift>
   e68d6:	42bc      	cmp	r4, r7
   e68d8:	d90c      	bls.n	e68f4 <__hexnan+0xe6>
   e68da:	463b      	mov	r3, r7
   e68dc:	f854 2b04 	ldr.w	r2, [r4], #4
   e68e0:	f843 2b04 	str.w	r2, [r3], #4
   e68e4:	42a5      	cmp	r5, r4
   e68e6:	d2f9      	bcs.n	e68dc <__hexnan+0xce>
   e68e8:	2200      	movs	r2, #0
   e68ea:	f843 2b04 	str.w	r2, [r3], #4
   e68ee:	429d      	cmp	r5, r3
   e68f0:	d2fb      	bcs.n	e68ea <__hexnan+0xdc>
   e68f2:	e00b      	b.n	e690c <__hexnan+0xfe>
   e68f4:	9b01      	ldr	r3, [sp, #4]
   e68f6:	b14b      	cbz	r3, e690c <__hexnan+0xfe>
   e68f8:	f1c3 0220 	rsb	r2, r3, #32
   e68fc:	f04f 33ff 	mov.w	r3, #4294967295
   e6900:	40d3      	lsrs	r3, r2
   e6902:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e6906:	4013      	ands	r3, r2
   e6908:	f846 3c04 	str.w	r3, [r6, #-4]
   e690c:	682b      	ldr	r3, [r5, #0]
   e690e:	b943      	cbnz	r3, e6922 <__hexnan+0x114>
   e6910:	42bd      	cmp	r5, r7
   e6912:	d102      	bne.n	e691a <__hexnan+0x10c>
   e6914:	2301      	movs	r3, #1
   e6916:	602b      	str	r3, [r5, #0]
   e6918:	e003      	b.n	e6922 <__hexnan+0x114>
   e691a:	3d04      	subs	r5, #4
   e691c:	e7f6      	b.n	e690c <__hexnan+0xfe>
   e691e:	2004      	movs	r0, #4
   e6920:	e000      	b.n	e6924 <__hexnan+0x116>
   e6922:	2005      	movs	r0, #5
   e6924:	b005      	add	sp, #20
   e6926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e692c <_findenv_r>:
   e692c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e6930:	4607      	mov	r7, r0
   e6932:	468b      	mov	fp, r1
   e6934:	4690      	mov	r8, r2
   e6936:	f000 fcda 	bl	e72ee <__env_lock>
   e693a:	4b19      	ldr	r3, [pc, #100]	; (e69a0 <_findenv_r+0x74>)
   e693c:	681d      	ldr	r5, [r3, #0]
   e693e:	469a      	mov	sl, r3
   e6940:	b13d      	cbz	r5, e6952 <_findenv_r+0x26>
   e6942:	465c      	mov	r4, fp
   e6944:	4623      	mov	r3, r4
   e6946:	f813 2b01 	ldrb.w	r2, [r3], #1
   e694a:	b142      	cbz	r2, e695e <_findenv_r+0x32>
   e694c:	2a3d      	cmp	r2, #61	; 0x3d
   e694e:	461c      	mov	r4, r3
   e6950:	d1f8      	bne.n	e6944 <_findenv_r+0x18>
   e6952:	4638      	mov	r0, r7
   e6954:	f000 fccc 	bl	e72f0 <__env_unlock>
   e6958:	2000      	movs	r0, #0
   e695a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e695e:	ebcb 0404 	rsb	r4, fp, r4
   e6962:	46a9      	mov	r9, r5
   e6964:	f859 0b04 	ldr.w	r0, [r9], #4
   e6968:	2800      	cmp	r0, #0
   e696a:	d0f2      	beq.n	e6952 <_findenv_r+0x26>
   e696c:	4622      	mov	r2, r4
   e696e:	4659      	mov	r1, fp
   e6970:	f7fe faf4 	bl	e4f5c <strncmp>
   e6974:	b988      	cbnz	r0, e699a <_findenv_r+0x6e>
   e6976:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e697a:	191e      	adds	r6, r3, r4
   e697c:	5d1b      	ldrb	r3, [r3, r4]
   e697e:	2b3d      	cmp	r3, #61	; 0x3d
   e6980:	d10b      	bne.n	e699a <_findenv_r+0x6e>
   e6982:	f8da 3000 	ldr.w	r3, [sl]
   e6986:	1aed      	subs	r5, r5, r3
   e6988:	10ad      	asrs	r5, r5, #2
   e698a:	4638      	mov	r0, r7
   e698c:	f8c8 5000 	str.w	r5, [r8]
   e6990:	f000 fcae 	bl	e72f0 <__env_unlock>
   e6994:	1c70      	adds	r0, r6, #1
   e6996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e699a:	464d      	mov	r5, r9
   e699c:	e7e1      	b.n	e6962 <_findenv_r+0x36>
   e699e:	bf00      	nop
   e69a0:	2003d7ac 	.word	0x2003d7ac

000e69a4 <_getenv_r>:
   e69a4:	b507      	push	{r0, r1, r2, lr}
   e69a6:	aa01      	add	r2, sp, #4
   e69a8:	f7ff ffc0 	bl	e692c <_findenv_r>
   e69ac:	b003      	add	sp, #12
   e69ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e69b4 <__gettzinfo>:
   e69b4:	4800      	ldr	r0, [pc, #0]	; (e69b8 <__gettzinfo+0x4>)
   e69b6:	4770      	bx	lr
   e69b8:	2003d76c 	.word	0x2003d76c

000e69bc <gmtime_r>:
   e69bc:	6802      	ldr	r2, [r0, #0]
   e69be:	4b47      	ldr	r3, [pc, #284]	; (e6adc <gmtime_r+0x120>)
   e69c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e69c2:	fb92 f4f3 	sdiv	r4, r2, r3
   e69c6:	fb03 2214 	mls	r2, r3, r4, r2
   e69ca:	2a00      	cmp	r2, #0
   e69cc:	bfbc      	itt	lt
   e69ce:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e69d2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e69d6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e69da:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e69de:	fb92 f3f0 	sdiv	r3, r2, r0
   e69e2:	fb00 2213 	mls	r2, r0, r3, r2
   e69e6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e69ea:	bfac      	ite	ge
   e69ec:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e69f0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e69f4:	608b      	str	r3, [r1, #8]
   e69f6:	fb92 f3f0 	sdiv	r3, r2, r0
   e69fa:	fb00 2213 	mls	r2, r0, r3, r2
   e69fe:	604b      	str	r3, [r1, #4]
   e6a00:	600a      	str	r2, [r1, #0]
   e6a02:	2307      	movs	r3, #7
   e6a04:	1ce2      	adds	r2, r4, #3
   e6a06:	fb92 f3f3 	sdiv	r3, r2, r3
   e6a0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e6a0e:	1ad3      	subs	r3, r2, r3
   e6a10:	618b      	str	r3, [r1, #24]
   e6a12:	4b33      	ldr	r3, [pc, #204]	; (e6ae0 <gmtime_r+0x124>)
   e6a14:	4d33      	ldr	r5, [pc, #204]	; (e6ae4 <gmtime_r+0x128>)
   e6a16:	fb94 f5f5 	sdiv	r5, r4, r5
   e6a1a:	fb03 4405 	mla	r4, r3, r5, r4
   e6a1e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e6a22:	fbb4 f2f2 	udiv	r2, r4, r2
   e6a26:	4422      	add	r2, r4
   e6a28:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e6a2c:	fbb4 f3f7 	udiv	r3, r4, r7
   e6a30:	1ad2      	subs	r2, r2, r3
   e6a32:	482d      	ldr	r0, [pc, #180]	; (e6ae8 <gmtime_r+0x12c>)
   e6a34:	fbb4 f0f0 	udiv	r0, r4, r0
   e6a38:	f648 6694 	movw	r6, #36500	; 0x8e94
   e6a3c:	1a13      	subs	r3, r2, r0
   e6a3e:	fbb3 f6f6 	udiv	r6, r3, r6
   e6a42:	4434      	add	r4, r6
   e6a44:	f240 126d 	movw	r2, #365	; 0x16d
   e6a48:	fbb3 f0f2 	udiv	r0, r3, r2
   e6a4c:	fbb3 f3f7 	udiv	r3, r3, r7
   e6a50:	1ae3      	subs	r3, r4, r3
   e6a52:	fb02 3310 	mls	r3, r2, r0, r3
   e6a56:	2499      	movs	r4, #153	; 0x99
   e6a58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e6a5c:	3202      	adds	r2, #2
   e6a5e:	fbb2 f2f4 	udiv	r2, r2, r4
   e6a62:	2a0a      	cmp	r2, #10
   e6a64:	fb04 f402 	mul.w	r4, r4, r2
   e6a68:	f104 0602 	add.w	r6, r4, #2
   e6a6c:	f04f 0405 	mov.w	r4, #5
   e6a70:	fbb6 f4f4 	udiv	r4, r6, r4
   e6a74:	bf34      	ite	cc
   e6a76:	2602      	movcc	r6, #2
   e6a78:	f06f 0609 	mvncs.w	r6, #9
   e6a7c:	4416      	add	r6, r2
   e6a7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6a82:	fb02 0505 	mla	r5, r2, r5, r0
   e6a86:	1c5f      	adds	r7, r3, #1
   e6a88:	2e01      	cmp	r6, #1
   e6a8a:	bf98      	it	ls
   e6a8c:	3501      	addls	r5, #1
   e6a8e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e6a92:	eba7 0704 	sub.w	r7, r7, r4
   e6a96:	d302      	bcc.n	e6a9e <gmtime_r+0xe2>
   e6a98:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e6a9c:	e014      	b.n	e6ac8 <gmtime_r+0x10c>
   e6a9e:	0782      	lsls	r2, r0, #30
   e6aa0:	d105      	bne.n	e6aae <gmtime_r+0xf2>
   e6aa2:	2464      	movs	r4, #100	; 0x64
   e6aa4:	fbb0 f2f4 	udiv	r2, r0, r4
   e6aa8:	fb04 0212 	mls	r2, r4, r2, r0
   e6aac:	b94a      	cbnz	r2, e6ac2 <gmtime_r+0x106>
   e6aae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e6ab2:	fbb0 f4f2 	udiv	r4, r0, r2
   e6ab6:	fb02 0014 	mls	r0, r2, r4, r0
   e6aba:	fab0 f280 	clz	r2, r0
   e6abe:	0952      	lsrs	r2, r2, #5
   e6ac0:	e000      	b.n	e6ac4 <gmtime_r+0x108>
   e6ac2:	2201      	movs	r2, #1
   e6ac4:	333b      	adds	r3, #59	; 0x3b
   e6ac6:	441a      	add	r2, r3
   e6ac8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e6acc:	2300      	movs	r3, #0
   e6ace:	61ca      	str	r2, [r1, #28]
   e6ad0:	614d      	str	r5, [r1, #20]
   e6ad2:	610e      	str	r6, [r1, #16]
   e6ad4:	60cf      	str	r7, [r1, #12]
   e6ad6:	620b      	str	r3, [r1, #32]
   e6ad8:	4608      	mov	r0, r1
   e6ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e6adc:	00015180 	.word	0x00015180
   e6ae0:	fffdc54f 	.word	0xfffdc54f
   e6ae4:	00023ab1 	.word	0x00023ab1
   e6ae8:	00023ab0 	.word	0x00023ab0

000e6aec <labs>:
   e6aec:	2800      	cmp	r0, #0
   e6aee:	bfb8      	it	lt
   e6af0:	4240      	neglt	r0, r0
   e6af2:	4770      	bx	lr

000e6af4 <_Balloc>:
   e6af4:	b570      	push	{r4, r5, r6, lr}
   e6af6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e6af8:	4604      	mov	r4, r0
   e6afa:	460e      	mov	r6, r1
   e6afc:	b93d      	cbnz	r5, e6b0e <_Balloc+0x1a>
   e6afe:	2010      	movs	r0, #16
   e6b00:	f7f4 fa20 	bl	daf44 <malloc>
   e6b04:	6260      	str	r0, [r4, #36]	; 0x24
   e6b06:	6045      	str	r5, [r0, #4]
   e6b08:	6085      	str	r5, [r0, #8]
   e6b0a:	6005      	str	r5, [r0, #0]
   e6b0c:	60c5      	str	r5, [r0, #12]
   e6b0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e6b10:	68eb      	ldr	r3, [r5, #12]
   e6b12:	b143      	cbz	r3, e6b26 <_Balloc+0x32>
   e6b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6b16:	68db      	ldr	r3, [r3, #12]
   e6b18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e6b1c:	b178      	cbz	r0, e6b3e <_Balloc+0x4a>
   e6b1e:	6802      	ldr	r2, [r0, #0]
   e6b20:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e6b24:	e017      	b.n	e6b56 <_Balloc+0x62>
   e6b26:	2221      	movs	r2, #33	; 0x21
   e6b28:	2104      	movs	r1, #4
   e6b2a:	4620      	mov	r0, r4
   e6b2c:	f000 fbd1 	bl	e72d2 <_calloc_r>
   e6b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e6b32:	60e8      	str	r0, [r5, #12]
   e6b34:	68db      	ldr	r3, [r3, #12]
   e6b36:	2b00      	cmp	r3, #0
   e6b38:	d1ec      	bne.n	e6b14 <_Balloc+0x20>
   e6b3a:	2000      	movs	r0, #0
   e6b3c:	bd70      	pop	{r4, r5, r6, pc}
   e6b3e:	2101      	movs	r1, #1
   e6b40:	fa01 f506 	lsl.w	r5, r1, r6
   e6b44:	1d6a      	adds	r2, r5, #5
   e6b46:	0092      	lsls	r2, r2, #2
   e6b48:	4620      	mov	r0, r4
   e6b4a:	f000 fbc2 	bl	e72d2 <_calloc_r>
   e6b4e:	2800      	cmp	r0, #0
   e6b50:	d0f3      	beq.n	e6b3a <_Balloc+0x46>
   e6b52:	6046      	str	r6, [r0, #4]
   e6b54:	6085      	str	r5, [r0, #8]
   e6b56:	2300      	movs	r3, #0
   e6b58:	6103      	str	r3, [r0, #16]
   e6b5a:	60c3      	str	r3, [r0, #12]
   e6b5c:	bd70      	pop	{r4, r5, r6, pc}

000e6b5e <_Bfree>:
   e6b5e:	b570      	push	{r4, r5, r6, lr}
   e6b60:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e6b62:	4606      	mov	r6, r0
   e6b64:	460d      	mov	r5, r1
   e6b66:	b93c      	cbnz	r4, e6b78 <_Bfree+0x1a>
   e6b68:	2010      	movs	r0, #16
   e6b6a:	f7f4 f9eb 	bl	daf44 <malloc>
   e6b6e:	6270      	str	r0, [r6, #36]	; 0x24
   e6b70:	6044      	str	r4, [r0, #4]
   e6b72:	6084      	str	r4, [r0, #8]
   e6b74:	6004      	str	r4, [r0, #0]
   e6b76:	60c4      	str	r4, [r0, #12]
   e6b78:	b13d      	cbz	r5, e6b8a <_Bfree+0x2c>
   e6b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e6b7c:	686a      	ldr	r2, [r5, #4]
   e6b7e:	68db      	ldr	r3, [r3, #12]
   e6b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e6b84:	6029      	str	r1, [r5, #0]
   e6b86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e6b8a:	bd70      	pop	{r4, r5, r6, pc}

000e6b8c <__multadd>:
   e6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6b90:	690d      	ldr	r5, [r1, #16]
   e6b92:	461f      	mov	r7, r3
   e6b94:	4606      	mov	r6, r0
   e6b96:	460c      	mov	r4, r1
   e6b98:	f101 0e14 	add.w	lr, r1, #20
   e6b9c:	2300      	movs	r3, #0
   e6b9e:	f8de 0000 	ldr.w	r0, [lr]
   e6ba2:	b281      	uxth	r1, r0
   e6ba4:	fb02 7101 	mla	r1, r2, r1, r7
   e6ba8:	0c0f      	lsrs	r7, r1, #16
   e6baa:	0c00      	lsrs	r0, r0, #16
   e6bac:	fb02 7000 	mla	r0, r2, r0, r7
   e6bb0:	b289      	uxth	r1, r1
   e6bb2:	3301      	adds	r3, #1
   e6bb4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e6bb8:	429d      	cmp	r5, r3
   e6bba:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e6bbe:	f84e 1b04 	str.w	r1, [lr], #4
   e6bc2:	dcec      	bgt.n	e6b9e <__multadd+0x12>
   e6bc4:	b1d7      	cbz	r7, e6bfc <__multadd+0x70>
   e6bc6:	68a3      	ldr	r3, [r4, #8]
   e6bc8:	429d      	cmp	r5, r3
   e6bca:	db12      	blt.n	e6bf2 <__multadd+0x66>
   e6bcc:	6861      	ldr	r1, [r4, #4]
   e6bce:	4630      	mov	r0, r6
   e6bd0:	3101      	adds	r1, #1
   e6bd2:	f7ff ff8f 	bl	e6af4 <_Balloc>
   e6bd6:	6922      	ldr	r2, [r4, #16]
   e6bd8:	3202      	adds	r2, #2
   e6bda:	f104 010c 	add.w	r1, r4, #12
   e6bde:	4680      	mov	r8, r0
   e6be0:	0092      	lsls	r2, r2, #2
   e6be2:	300c      	adds	r0, #12
   e6be4:	f7fd f9e6 	bl	e3fb4 <memcpy>
   e6be8:	4621      	mov	r1, r4
   e6bea:	4630      	mov	r0, r6
   e6bec:	f7ff ffb7 	bl	e6b5e <_Bfree>
   e6bf0:	4644      	mov	r4, r8
   e6bf2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e6bf6:	3501      	adds	r5, #1
   e6bf8:	615f      	str	r7, [r3, #20]
   e6bfa:	6125      	str	r5, [r4, #16]
   e6bfc:	4620      	mov	r0, r4
   e6bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e6c02 <__s2b>:
   e6c02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6c06:	460c      	mov	r4, r1
   e6c08:	4615      	mov	r5, r2
   e6c0a:	461f      	mov	r7, r3
   e6c0c:	2209      	movs	r2, #9
   e6c0e:	3308      	adds	r3, #8
   e6c10:	4606      	mov	r6, r0
   e6c12:	fb93 f3f2 	sdiv	r3, r3, r2
   e6c16:	2100      	movs	r1, #0
   e6c18:	2201      	movs	r2, #1
   e6c1a:	429a      	cmp	r2, r3
   e6c1c:	da02      	bge.n	e6c24 <__s2b+0x22>
   e6c1e:	0052      	lsls	r2, r2, #1
   e6c20:	3101      	adds	r1, #1
   e6c22:	e7fa      	b.n	e6c1a <__s2b+0x18>
   e6c24:	4630      	mov	r0, r6
   e6c26:	f7ff ff65 	bl	e6af4 <_Balloc>
   e6c2a:	9b08      	ldr	r3, [sp, #32]
   e6c2c:	6143      	str	r3, [r0, #20]
   e6c2e:	2d09      	cmp	r5, #9
   e6c30:	f04f 0301 	mov.w	r3, #1
   e6c34:	6103      	str	r3, [r0, #16]
   e6c36:	dd11      	ble.n	e6c5c <__s2b+0x5a>
   e6c38:	f104 0809 	add.w	r8, r4, #9
   e6c3c:	46c1      	mov	r9, r8
   e6c3e:	442c      	add	r4, r5
   e6c40:	f819 3b01 	ldrb.w	r3, [r9], #1
   e6c44:	4601      	mov	r1, r0
   e6c46:	3b30      	subs	r3, #48	; 0x30
   e6c48:	220a      	movs	r2, #10
   e6c4a:	4630      	mov	r0, r6
   e6c4c:	f7ff ff9e 	bl	e6b8c <__multadd>
   e6c50:	45a1      	cmp	r9, r4
   e6c52:	d1f5      	bne.n	e6c40 <__s2b+0x3e>
   e6c54:	eb08 0405 	add.w	r4, r8, r5
   e6c58:	3c08      	subs	r4, #8
   e6c5a:	e001      	b.n	e6c60 <__s2b+0x5e>
   e6c5c:	340a      	adds	r4, #10
   e6c5e:	2509      	movs	r5, #9
   e6c60:	1b2d      	subs	r5, r5, r4
   e6c62:	1963      	adds	r3, r4, r5
   e6c64:	429f      	cmp	r7, r3
   e6c66:	dd08      	ble.n	e6c7a <__s2b+0x78>
   e6c68:	f814 3b01 	ldrb.w	r3, [r4], #1
   e6c6c:	4601      	mov	r1, r0
   e6c6e:	3b30      	subs	r3, #48	; 0x30
   e6c70:	220a      	movs	r2, #10
   e6c72:	4630      	mov	r0, r6
   e6c74:	f7ff ff8a 	bl	e6b8c <__multadd>
   e6c78:	e7f3      	b.n	e6c62 <__s2b+0x60>
   e6c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e6c7e <__hi0bits>:
   e6c7e:	0c03      	lsrs	r3, r0, #16
   e6c80:	041b      	lsls	r3, r3, #16
   e6c82:	b913      	cbnz	r3, e6c8a <__hi0bits+0xc>
   e6c84:	0400      	lsls	r0, r0, #16
   e6c86:	2310      	movs	r3, #16
   e6c88:	e000      	b.n	e6c8c <__hi0bits+0xe>
   e6c8a:	2300      	movs	r3, #0
   e6c8c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e6c90:	bf04      	itt	eq
   e6c92:	0200      	lsleq	r0, r0, #8
   e6c94:	3308      	addeq	r3, #8
   e6c96:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e6c9a:	bf04      	itt	eq
   e6c9c:	0100      	lsleq	r0, r0, #4
   e6c9e:	3304      	addeq	r3, #4
   e6ca0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e6ca4:	bf04      	itt	eq
   e6ca6:	0080      	lsleq	r0, r0, #2
   e6ca8:	3302      	addeq	r3, #2
   e6caa:	2800      	cmp	r0, #0
   e6cac:	db03      	blt.n	e6cb6 <__hi0bits+0x38>
   e6cae:	0042      	lsls	r2, r0, #1
   e6cb0:	d503      	bpl.n	e6cba <__hi0bits+0x3c>
   e6cb2:	1c58      	adds	r0, r3, #1
   e6cb4:	4770      	bx	lr
   e6cb6:	4618      	mov	r0, r3
   e6cb8:	4770      	bx	lr
   e6cba:	2020      	movs	r0, #32
   e6cbc:	4770      	bx	lr

000e6cbe <__lo0bits>:
   e6cbe:	6803      	ldr	r3, [r0, #0]
   e6cc0:	f013 0207 	ands.w	r2, r3, #7
   e6cc4:	d00b      	beq.n	e6cde <__lo0bits+0x20>
   e6cc6:	07d9      	lsls	r1, r3, #31
   e6cc8:	d422      	bmi.n	e6d10 <__lo0bits+0x52>
   e6cca:	079a      	lsls	r2, r3, #30
   e6ccc:	bf4b      	itete	mi
   e6cce:	085b      	lsrmi	r3, r3, #1
   e6cd0:	089b      	lsrpl	r3, r3, #2
   e6cd2:	6003      	strmi	r3, [r0, #0]
   e6cd4:	6003      	strpl	r3, [r0, #0]
   e6cd6:	bf4c      	ite	mi
   e6cd8:	2001      	movmi	r0, #1
   e6cda:	2002      	movpl	r0, #2
   e6cdc:	4770      	bx	lr
   e6cde:	b299      	uxth	r1, r3
   e6ce0:	b909      	cbnz	r1, e6ce6 <__lo0bits+0x28>
   e6ce2:	0c1b      	lsrs	r3, r3, #16
   e6ce4:	2210      	movs	r2, #16
   e6ce6:	f013 0fff 	tst.w	r3, #255	; 0xff
   e6cea:	bf04      	itt	eq
   e6cec:	0a1b      	lsreq	r3, r3, #8
   e6cee:	3208      	addeq	r2, #8
   e6cf0:	0719      	lsls	r1, r3, #28
   e6cf2:	bf04      	itt	eq
   e6cf4:	091b      	lsreq	r3, r3, #4
   e6cf6:	3204      	addeq	r2, #4
   e6cf8:	0799      	lsls	r1, r3, #30
   e6cfa:	bf04      	itt	eq
   e6cfc:	089b      	lsreq	r3, r3, #2
   e6cfe:	3202      	addeq	r2, #2
   e6d00:	07d9      	lsls	r1, r3, #31
   e6d02:	d402      	bmi.n	e6d0a <__lo0bits+0x4c>
   e6d04:	085b      	lsrs	r3, r3, #1
   e6d06:	d005      	beq.n	e6d14 <__lo0bits+0x56>
   e6d08:	3201      	adds	r2, #1
   e6d0a:	6003      	str	r3, [r0, #0]
   e6d0c:	4610      	mov	r0, r2
   e6d0e:	4770      	bx	lr
   e6d10:	2000      	movs	r0, #0
   e6d12:	4770      	bx	lr
   e6d14:	2020      	movs	r0, #32
   e6d16:	4770      	bx	lr

000e6d18 <__i2b>:
   e6d18:	b510      	push	{r4, lr}
   e6d1a:	460c      	mov	r4, r1
   e6d1c:	2101      	movs	r1, #1
   e6d1e:	f7ff fee9 	bl	e6af4 <_Balloc>
   e6d22:	2201      	movs	r2, #1
   e6d24:	6144      	str	r4, [r0, #20]
   e6d26:	6102      	str	r2, [r0, #16]
   e6d28:	bd10      	pop	{r4, pc}

000e6d2a <__multiply>:
   e6d2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e6d2e:	4614      	mov	r4, r2
   e6d30:	690a      	ldr	r2, [r1, #16]
   e6d32:	6923      	ldr	r3, [r4, #16]
   e6d34:	429a      	cmp	r2, r3
   e6d36:	bfb8      	it	lt
   e6d38:	460b      	movlt	r3, r1
   e6d3a:	4688      	mov	r8, r1
   e6d3c:	bfbc      	itt	lt
   e6d3e:	46a0      	movlt	r8, r4
   e6d40:	461c      	movlt	r4, r3
   e6d42:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e6d46:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e6d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e6d4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e6d52:	eb07 0609 	add.w	r6, r7, r9
   e6d56:	429e      	cmp	r6, r3
   e6d58:	bfc8      	it	gt
   e6d5a:	3101      	addgt	r1, #1
   e6d5c:	f7ff feca 	bl	e6af4 <_Balloc>
   e6d60:	f100 0514 	add.w	r5, r0, #20
   e6d64:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e6d68:	462b      	mov	r3, r5
   e6d6a:	2200      	movs	r2, #0
   e6d6c:	4563      	cmp	r3, ip
   e6d6e:	d202      	bcs.n	e6d76 <__multiply+0x4c>
   e6d70:	f843 2b04 	str.w	r2, [r3], #4
   e6d74:	e7fa      	b.n	e6d6c <__multiply+0x42>
   e6d76:	f104 0214 	add.w	r2, r4, #20
   e6d7a:	f108 0114 	add.w	r1, r8, #20
   e6d7e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e6d82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e6d86:	9300      	str	r3, [sp, #0]
   e6d88:	9b00      	ldr	r3, [sp, #0]
   e6d8a:	9201      	str	r2, [sp, #4]
   e6d8c:	4293      	cmp	r3, r2
   e6d8e:	d957      	bls.n	e6e40 <__multiply+0x116>
   e6d90:	f8b2 b000 	ldrh.w	fp, [r2]
   e6d94:	f1bb 0f00 	cmp.w	fp, #0
   e6d98:	d023      	beq.n	e6de2 <__multiply+0xb8>
   e6d9a:	4689      	mov	r9, r1
   e6d9c:	46ae      	mov	lr, r5
   e6d9e:	f04f 0800 	mov.w	r8, #0
   e6da2:	f859 4b04 	ldr.w	r4, [r9], #4
   e6da6:	f8be a000 	ldrh.w	sl, [lr]
   e6daa:	b2a3      	uxth	r3, r4
   e6dac:	fb0b a303 	mla	r3, fp, r3, sl
   e6db0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e6db4:	f8de 4000 	ldr.w	r4, [lr]
   e6db8:	4443      	add	r3, r8
   e6dba:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e6dbe:	fb0b 840a 	mla	r4, fp, sl, r8
   e6dc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e6dc6:	46f2      	mov	sl, lr
   e6dc8:	b29b      	uxth	r3, r3
   e6dca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e6dce:	454f      	cmp	r7, r9
   e6dd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e6dd4:	f84a 3b04 	str.w	r3, [sl], #4
   e6dd8:	d901      	bls.n	e6dde <__multiply+0xb4>
   e6dda:	46d6      	mov	lr, sl
   e6ddc:	e7e1      	b.n	e6da2 <__multiply+0x78>
   e6dde:	f8ce 8004 	str.w	r8, [lr, #4]
   e6de2:	9b01      	ldr	r3, [sp, #4]
   e6de4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e6de8:	3204      	adds	r2, #4
   e6dea:	f1ba 0f00 	cmp.w	sl, #0
   e6dee:	d021      	beq.n	e6e34 <__multiply+0x10a>
   e6df0:	682b      	ldr	r3, [r5, #0]
   e6df2:	462c      	mov	r4, r5
   e6df4:	4689      	mov	r9, r1
   e6df6:	f04f 0800 	mov.w	r8, #0
   e6dfa:	f8b9 e000 	ldrh.w	lr, [r9]
   e6dfe:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e6e02:	fb0a be0e 	mla	lr, sl, lr, fp
   e6e06:	44f0      	add	r8, lr
   e6e08:	46a3      	mov	fp, r4
   e6e0a:	b29b      	uxth	r3, r3
   e6e0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e6e10:	f84b 3b04 	str.w	r3, [fp], #4
   e6e14:	f859 3b04 	ldr.w	r3, [r9], #4
   e6e18:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e6e1c:	0c1b      	lsrs	r3, r3, #16
   e6e1e:	fb0a e303 	mla	r3, sl, r3, lr
   e6e22:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e6e26:	454f      	cmp	r7, r9
   e6e28:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e6e2c:	d901      	bls.n	e6e32 <__multiply+0x108>
   e6e2e:	465c      	mov	r4, fp
   e6e30:	e7e3      	b.n	e6dfa <__multiply+0xd0>
   e6e32:	6063      	str	r3, [r4, #4]
   e6e34:	3504      	adds	r5, #4
   e6e36:	e7a7      	b.n	e6d88 <__multiply+0x5e>
   e6e38:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e6e3c:	b913      	cbnz	r3, e6e44 <__multiply+0x11a>
   e6e3e:	3e01      	subs	r6, #1
   e6e40:	2e00      	cmp	r6, #0
   e6e42:	dcf9      	bgt.n	e6e38 <__multiply+0x10e>
   e6e44:	6106      	str	r6, [r0, #16]
   e6e46:	b003      	add	sp, #12
   e6e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e6e4c <__pow5mult>:
   e6e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6e50:	4615      	mov	r5, r2
   e6e52:	f012 0203 	ands.w	r2, r2, #3
   e6e56:	4606      	mov	r6, r0
   e6e58:	460f      	mov	r7, r1
   e6e5a:	d007      	beq.n	e6e6c <__pow5mult+0x20>
   e6e5c:	3a01      	subs	r2, #1
   e6e5e:	4c21      	ldr	r4, [pc, #132]	; (e6ee4 <__pow5mult+0x98>)
   e6e60:	2300      	movs	r3, #0
   e6e62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e6e66:	f7ff fe91 	bl	e6b8c <__multadd>
   e6e6a:	4607      	mov	r7, r0
   e6e6c:	10ad      	asrs	r5, r5, #2
   e6e6e:	d036      	beq.n	e6ede <__pow5mult+0x92>
   e6e70:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e6e72:	b93c      	cbnz	r4, e6e84 <__pow5mult+0x38>
   e6e74:	2010      	movs	r0, #16
   e6e76:	f7f4 f865 	bl	daf44 <malloc>
   e6e7a:	6270      	str	r0, [r6, #36]	; 0x24
   e6e7c:	6044      	str	r4, [r0, #4]
   e6e7e:	6084      	str	r4, [r0, #8]
   e6e80:	6004      	str	r4, [r0, #0]
   e6e82:	60c4      	str	r4, [r0, #12]
   e6e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e6e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e6e8c:	b94c      	cbnz	r4, e6ea2 <__pow5mult+0x56>
   e6e8e:	f240 2171 	movw	r1, #625	; 0x271
   e6e92:	4630      	mov	r0, r6
   e6e94:	f7ff ff40 	bl	e6d18 <__i2b>
   e6e98:	2300      	movs	r3, #0
   e6e9a:	f8c8 0008 	str.w	r0, [r8, #8]
   e6e9e:	4604      	mov	r4, r0
   e6ea0:	6003      	str	r3, [r0, #0]
   e6ea2:	f04f 0800 	mov.w	r8, #0
   e6ea6:	07eb      	lsls	r3, r5, #31
   e6ea8:	d50a      	bpl.n	e6ec0 <__pow5mult+0x74>
   e6eaa:	4639      	mov	r1, r7
   e6eac:	4622      	mov	r2, r4
   e6eae:	4630      	mov	r0, r6
   e6eb0:	f7ff ff3b 	bl	e6d2a <__multiply>
   e6eb4:	4639      	mov	r1, r7
   e6eb6:	4681      	mov	r9, r0
   e6eb8:	4630      	mov	r0, r6
   e6eba:	f7ff fe50 	bl	e6b5e <_Bfree>
   e6ebe:	464f      	mov	r7, r9
   e6ec0:	106d      	asrs	r5, r5, #1
   e6ec2:	d00c      	beq.n	e6ede <__pow5mult+0x92>
   e6ec4:	6820      	ldr	r0, [r4, #0]
   e6ec6:	b108      	cbz	r0, e6ecc <__pow5mult+0x80>
   e6ec8:	4604      	mov	r4, r0
   e6eca:	e7ec      	b.n	e6ea6 <__pow5mult+0x5a>
   e6ecc:	4622      	mov	r2, r4
   e6ece:	4621      	mov	r1, r4
   e6ed0:	4630      	mov	r0, r6
   e6ed2:	f7ff ff2a 	bl	e6d2a <__multiply>
   e6ed6:	6020      	str	r0, [r4, #0]
   e6ed8:	f8c0 8000 	str.w	r8, [r0]
   e6edc:	e7f4      	b.n	e6ec8 <__pow5mult+0x7c>
   e6ede:	4638      	mov	r0, r7
   e6ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e6ee4:	000e9418 	.word	0x000e9418

000e6ee8 <__lshift>:
   e6ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e6eec:	460c      	mov	r4, r1
   e6eee:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e6ef2:	6926      	ldr	r6, [r4, #16]
   e6ef4:	6849      	ldr	r1, [r1, #4]
   e6ef6:	68a3      	ldr	r3, [r4, #8]
   e6ef8:	4456      	add	r6, sl
   e6efa:	4607      	mov	r7, r0
   e6efc:	4691      	mov	r9, r2
   e6efe:	1c75      	adds	r5, r6, #1
   e6f00:	42ab      	cmp	r3, r5
   e6f02:	da02      	bge.n	e6f0a <__lshift+0x22>
   e6f04:	3101      	adds	r1, #1
   e6f06:	005b      	lsls	r3, r3, #1
   e6f08:	e7fa      	b.n	e6f00 <__lshift+0x18>
   e6f0a:	4638      	mov	r0, r7
   e6f0c:	f7ff fdf2 	bl	e6af4 <_Balloc>
   e6f10:	2300      	movs	r3, #0
   e6f12:	4680      	mov	r8, r0
   e6f14:	f100 0114 	add.w	r1, r0, #20
   e6f18:	461a      	mov	r2, r3
   e6f1a:	4553      	cmp	r3, sl
   e6f1c:	da03      	bge.n	e6f26 <__lshift+0x3e>
   e6f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e6f22:	3301      	adds	r3, #1
   e6f24:	e7f9      	b.n	e6f1a <__lshift+0x32>
   e6f26:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e6f2a:	6920      	ldr	r0, [r4, #16]
   e6f2c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e6f30:	f019 091f 	ands.w	r9, r9, #31
   e6f34:	f104 0114 	add.w	r1, r4, #20
   e6f38:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e6f3c:	d014      	beq.n	e6f68 <__lshift+0x80>
   e6f3e:	f1c9 0c20 	rsb	ip, r9, #32
   e6f42:	2200      	movs	r2, #0
   e6f44:	6808      	ldr	r0, [r1, #0]
   e6f46:	fa00 f009 	lsl.w	r0, r0, r9
   e6f4a:	4302      	orrs	r2, r0
   e6f4c:	469a      	mov	sl, r3
   e6f4e:	f843 2b04 	str.w	r2, [r3], #4
   e6f52:	f851 2b04 	ldr.w	r2, [r1], #4
   e6f56:	458e      	cmp	lr, r1
   e6f58:	fa22 f20c 	lsr.w	r2, r2, ip
   e6f5c:	d8f2      	bhi.n	e6f44 <__lshift+0x5c>
   e6f5e:	f8ca 2004 	str.w	r2, [sl, #4]
   e6f62:	b142      	cbz	r2, e6f76 <__lshift+0x8e>
   e6f64:	1cb5      	adds	r5, r6, #2
   e6f66:	e006      	b.n	e6f76 <__lshift+0x8e>
   e6f68:	3b04      	subs	r3, #4
   e6f6a:	f851 2b04 	ldr.w	r2, [r1], #4
   e6f6e:	f843 2f04 	str.w	r2, [r3, #4]!
   e6f72:	458e      	cmp	lr, r1
   e6f74:	d8f9      	bhi.n	e6f6a <__lshift+0x82>
   e6f76:	3d01      	subs	r5, #1
   e6f78:	4638      	mov	r0, r7
   e6f7a:	f8c8 5010 	str.w	r5, [r8, #16]
   e6f7e:	4621      	mov	r1, r4
   e6f80:	f7ff fded 	bl	e6b5e <_Bfree>
   e6f84:	4640      	mov	r0, r8
   e6f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e6f8a <__mcmp>:
   e6f8a:	6903      	ldr	r3, [r0, #16]
   e6f8c:	690a      	ldr	r2, [r1, #16]
   e6f8e:	1a9b      	subs	r3, r3, r2
   e6f90:	b510      	push	{r4, lr}
   e6f92:	d111      	bne.n	e6fb8 <__mcmp+0x2e>
   e6f94:	0092      	lsls	r2, r2, #2
   e6f96:	3014      	adds	r0, #20
   e6f98:	3114      	adds	r1, #20
   e6f9a:	1883      	adds	r3, r0, r2
   e6f9c:	440a      	add	r2, r1
   e6f9e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e6fa2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e6fa6:	428c      	cmp	r4, r1
   e6fa8:	d002      	beq.n	e6fb0 <__mcmp+0x26>
   e6faa:	d307      	bcc.n	e6fbc <__mcmp+0x32>
   e6fac:	2001      	movs	r0, #1
   e6fae:	bd10      	pop	{r4, pc}
   e6fb0:	4298      	cmp	r0, r3
   e6fb2:	d3f4      	bcc.n	e6f9e <__mcmp+0x14>
   e6fb4:	2000      	movs	r0, #0
   e6fb6:	bd10      	pop	{r4, pc}
   e6fb8:	4618      	mov	r0, r3
   e6fba:	bd10      	pop	{r4, pc}
   e6fbc:	f04f 30ff 	mov.w	r0, #4294967295
   e6fc0:	bd10      	pop	{r4, pc}

000e6fc2 <__mdiff>:
   e6fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e6fc6:	460c      	mov	r4, r1
   e6fc8:	4607      	mov	r7, r0
   e6fca:	4611      	mov	r1, r2
   e6fcc:	4620      	mov	r0, r4
   e6fce:	4615      	mov	r5, r2
   e6fd0:	f7ff ffdb 	bl	e6f8a <__mcmp>
   e6fd4:	1e06      	subs	r6, r0, #0
   e6fd6:	d108      	bne.n	e6fea <__mdiff+0x28>
   e6fd8:	4631      	mov	r1, r6
   e6fda:	4638      	mov	r0, r7
   e6fdc:	f7ff fd8a 	bl	e6af4 <_Balloc>
   e6fe0:	2301      	movs	r3, #1
   e6fe2:	6103      	str	r3, [r0, #16]
   e6fe4:	6146      	str	r6, [r0, #20]
   e6fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e6fea:	bfbc      	itt	lt
   e6fec:	4623      	movlt	r3, r4
   e6fee:	462c      	movlt	r4, r5
   e6ff0:	4638      	mov	r0, r7
   e6ff2:	6861      	ldr	r1, [r4, #4]
   e6ff4:	bfba      	itte	lt
   e6ff6:	461d      	movlt	r5, r3
   e6ff8:	2601      	movlt	r6, #1
   e6ffa:	2600      	movge	r6, #0
   e6ffc:	f7ff fd7a 	bl	e6af4 <_Balloc>
   e7000:	692b      	ldr	r3, [r5, #16]
   e7002:	60c6      	str	r6, [r0, #12]
   e7004:	6926      	ldr	r6, [r4, #16]
   e7006:	f105 0914 	add.w	r9, r5, #20
   e700a:	3414      	adds	r4, #20
   e700c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e7010:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e7014:	f100 0514 	add.w	r5, r0, #20
   e7018:	f04f 0c00 	mov.w	ip, #0
   e701c:	f854 3b04 	ldr.w	r3, [r4], #4
   e7020:	f859 2b04 	ldr.w	r2, [r9], #4
   e7024:	fa1c f183 	uxtah	r1, ip, r3
   e7028:	fa1f fe82 	uxth.w	lr, r2
   e702c:	0c12      	lsrs	r2, r2, #16
   e702e:	ebce 0101 	rsb	r1, lr, r1
   e7032:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e7036:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e703a:	b289      	uxth	r1, r1
   e703c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e7040:	45c8      	cmp	r8, r9
   e7042:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e7046:	46a6      	mov	lr, r4
   e7048:	f845 3b04 	str.w	r3, [r5], #4
   e704c:	d8e6      	bhi.n	e701c <__mdiff+0x5a>
   e704e:	45be      	cmp	lr, r7
   e7050:	d20e      	bcs.n	e7070 <__mdiff+0xae>
   e7052:	f85e 1b04 	ldr.w	r1, [lr], #4
   e7056:	fa1c f281 	uxtah	r2, ip, r1
   e705a:	1413      	asrs	r3, r2, #16
   e705c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e7060:	b292      	uxth	r2, r2
   e7062:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e7066:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e706a:	f845 2b04 	str.w	r2, [r5], #4
   e706e:	e7ee      	b.n	e704e <__mdiff+0x8c>
   e7070:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e7074:	b90b      	cbnz	r3, e707a <__mdiff+0xb8>
   e7076:	3e01      	subs	r6, #1
   e7078:	e7fa      	b.n	e7070 <__mdiff+0xae>
   e707a:	6106      	str	r6, [r0, #16]
   e707c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e7080 <__ulp>:
   e7080:	4b12      	ldr	r3, [pc, #72]	; (e70cc <__ulp+0x4c>)
   e7082:	ee10 2a90 	vmov	r2, s1
   e7086:	401a      	ands	r2, r3
   e7088:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e708c:	2b00      	cmp	r3, #0
   e708e:	dd02      	ble.n	e7096 <__ulp+0x16>
   e7090:	2000      	movs	r0, #0
   e7092:	4619      	mov	r1, r3
   e7094:	e017      	b.n	e70c6 <__ulp+0x46>
   e7096:	425b      	negs	r3, r3
   e7098:	151b      	asrs	r3, r3, #20
   e709a:	2b13      	cmp	r3, #19
   e709c:	f04f 0000 	mov.w	r0, #0
   e70a0:	f04f 0100 	mov.w	r1, #0
   e70a4:	dc04      	bgt.n	e70b0 <__ulp+0x30>
   e70a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e70aa:	fa42 f103 	asr.w	r1, r2, r3
   e70ae:	e00a      	b.n	e70c6 <__ulp+0x46>
   e70b0:	3b14      	subs	r3, #20
   e70b2:	2b1e      	cmp	r3, #30
   e70b4:	f04f 0201 	mov.w	r2, #1
   e70b8:	bfda      	itte	le
   e70ba:	f1c3 031f 	rsble	r3, r3, #31
   e70be:	fa02 f303 	lslle.w	r3, r2, r3
   e70c2:	4613      	movgt	r3, r2
   e70c4:	4618      	mov	r0, r3
   e70c6:	ec41 0b10 	vmov	d0, r0, r1
   e70ca:	4770      	bx	lr
   e70cc:	7ff00000 	.word	0x7ff00000

000e70d0 <__b2d>:
   e70d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e70d2:	6905      	ldr	r5, [r0, #16]
   e70d4:	f100 0614 	add.w	r6, r0, #20
   e70d8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e70dc:	1f2f      	subs	r7, r5, #4
   e70de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e70e2:	4620      	mov	r0, r4
   e70e4:	f7ff fdcb 	bl	e6c7e <__hi0bits>
   e70e8:	f1c0 0320 	rsb	r3, r0, #32
   e70ec:	280a      	cmp	r0, #10
   e70ee:	600b      	str	r3, [r1, #0]
   e70f0:	dc14      	bgt.n	e711c <__b2d+0x4c>
   e70f2:	f1c0 0e0b 	rsb	lr, r0, #11
   e70f6:	fa24 f10e 	lsr.w	r1, r4, lr
   e70fa:	42be      	cmp	r6, r7
   e70fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e7100:	bf34      	ite	cc
   e7102:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e7106:	2100      	movcs	r1, #0
   e7108:	3015      	adds	r0, #21
   e710a:	fa04 f000 	lsl.w	r0, r4, r0
   e710e:	fa21 f10e 	lsr.w	r1, r1, lr
   e7112:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e7116:	ea40 0201 	orr.w	r2, r0, r1
   e711a:	e023      	b.n	e7164 <__b2d+0x94>
   e711c:	42be      	cmp	r6, r7
   e711e:	bf3a      	itte	cc
   e7120:	f1a5 0708 	subcc.w	r7, r5, #8
   e7124:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e7128:	2100      	movcs	r1, #0
   e712a:	380b      	subs	r0, #11
   e712c:	d015      	beq.n	e715a <__b2d+0x8a>
   e712e:	4084      	lsls	r4, r0
   e7130:	f1c0 0520 	rsb	r5, r0, #32
   e7134:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e7138:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e713c:	42b7      	cmp	r7, r6
   e713e:	fa21 fe05 	lsr.w	lr, r1, r5
   e7142:	ea44 030e 	orr.w	r3, r4, lr
   e7146:	bf8c      	ite	hi
   e7148:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e714c:	2400      	movls	r4, #0
   e714e:	fa01 f000 	lsl.w	r0, r1, r0
   e7152:	40ec      	lsrs	r4, r5
   e7154:	ea40 0204 	orr.w	r2, r0, r4
   e7158:	e004      	b.n	e7164 <__b2d+0x94>
   e715a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e715e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e7162:	460a      	mov	r2, r1
   e7164:	ec43 2b10 	vmov	d0, r2, r3
   e7168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e716a <__d2b>:
   e716a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e716e:	460e      	mov	r6, r1
   e7170:	2101      	movs	r1, #1
   e7172:	ec59 8b10 	vmov	r8, r9, d0
   e7176:	4615      	mov	r5, r2
   e7178:	f7ff fcbc 	bl	e6af4 <_Balloc>
   e717c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e7180:	4607      	mov	r7, r0
   e7182:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e7186:	b10c      	cbz	r4, e718c <__d2b+0x22>
   e7188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e718c:	9301      	str	r3, [sp, #4]
   e718e:	f1b8 0f00 	cmp.w	r8, #0
   e7192:	d019      	beq.n	e71c8 <__d2b+0x5e>
   e7194:	a802      	add	r0, sp, #8
   e7196:	f840 8d08 	str.w	r8, [r0, #-8]!
   e719a:	f7ff fd90 	bl	e6cbe <__lo0bits>
   e719e:	9b00      	ldr	r3, [sp, #0]
   e71a0:	b148      	cbz	r0, e71b6 <__d2b+0x4c>
   e71a2:	9a01      	ldr	r2, [sp, #4]
   e71a4:	f1c0 0120 	rsb	r1, r0, #32
   e71a8:	fa02 f101 	lsl.w	r1, r2, r1
   e71ac:	430b      	orrs	r3, r1
   e71ae:	40c2      	lsrs	r2, r0
   e71b0:	617b      	str	r3, [r7, #20]
   e71b2:	9201      	str	r2, [sp, #4]
   e71b4:	e000      	b.n	e71b8 <__d2b+0x4e>
   e71b6:	617b      	str	r3, [r7, #20]
   e71b8:	9b01      	ldr	r3, [sp, #4]
   e71ba:	61bb      	str	r3, [r7, #24]
   e71bc:	2b00      	cmp	r3, #0
   e71be:	bf14      	ite	ne
   e71c0:	2102      	movne	r1, #2
   e71c2:	2101      	moveq	r1, #1
   e71c4:	6139      	str	r1, [r7, #16]
   e71c6:	e007      	b.n	e71d8 <__d2b+0x6e>
   e71c8:	a801      	add	r0, sp, #4
   e71ca:	f7ff fd78 	bl	e6cbe <__lo0bits>
   e71ce:	9b01      	ldr	r3, [sp, #4]
   e71d0:	617b      	str	r3, [r7, #20]
   e71d2:	2101      	movs	r1, #1
   e71d4:	6139      	str	r1, [r7, #16]
   e71d6:	3020      	adds	r0, #32
   e71d8:	b134      	cbz	r4, e71e8 <__d2b+0x7e>
   e71da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e71de:	4404      	add	r4, r0
   e71e0:	6034      	str	r4, [r6, #0]
   e71e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e71e6:	e009      	b.n	e71fc <__d2b+0x92>
   e71e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e71ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e71f0:	6030      	str	r0, [r6, #0]
   e71f2:	6918      	ldr	r0, [r3, #16]
   e71f4:	f7ff fd43 	bl	e6c7e <__hi0bits>
   e71f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e71fc:	6028      	str	r0, [r5, #0]
   e71fe:	4638      	mov	r0, r7
   e7200:	b003      	add	sp, #12
   e7202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e7206 <__ratio>:
   e7206:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e720a:	4688      	mov	r8, r1
   e720c:	4669      	mov	r1, sp
   e720e:	4681      	mov	r9, r0
   e7210:	f7ff ff5e 	bl	e70d0 <__b2d>
   e7214:	a901      	add	r1, sp, #4
   e7216:	4640      	mov	r0, r8
   e7218:	ec55 4b10 	vmov	r4, r5, d0
   e721c:	f7ff ff58 	bl	e70d0 <__b2d>
   e7220:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e7224:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e7228:	1a9a      	subs	r2, r3, r2
   e722a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e722e:	1ac9      	subs	r1, r1, r3
   e7230:	ec57 6b10 	vmov	r6, r7, d0
   e7234:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e7238:	2b00      	cmp	r3, #0
   e723a:	bfcc      	ite	gt
   e723c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e7240:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e7244:	4632      	mov	r2, r6
   e7246:	463b      	mov	r3, r7
   e7248:	4620      	mov	r0, r4
   e724a:	4629      	mov	r1, r5
   e724c:	f7fc f992 	bl	e3574 <__aeabi_ddiv>
   e7250:	ec41 0b10 	vmov	d0, r0, r1
   e7254:	b003      	add	sp, #12
   e7256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e725a <__copybits>:
   e725a:	3901      	subs	r1, #1
   e725c:	b510      	push	{r4, lr}
   e725e:	1149      	asrs	r1, r1, #5
   e7260:	6914      	ldr	r4, [r2, #16]
   e7262:	3101      	adds	r1, #1
   e7264:	f102 0314 	add.w	r3, r2, #20
   e7268:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e726c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e7270:	42a3      	cmp	r3, r4
   e7272:	4602      	mov	r2, r0
   e7274:	d204      	bcs.n	e7280 <__copybits+0x26>
   e7276:	f853 2b04 	ldr.w	r2, [r3], #4
   e727a:	f840 2b04 	str.w	r2, [r0], #4
   e727e:	e7f7      	b.n	e7270 <__copybits+0x16>
   e7280:	2300      	movs	r3, #0
   e7282:	428a      	cmp	r2, r1
   e7284:	d202      	bcs.n	e728c <__copybits+0x32>
   e7286:	f842 3b04 	str.w	r3, [r2], #4
   e728a:	e7fa      	b.n	e7282 <__copybits+0x28>
   e728c:	bd10      	pop	{r4, pc}

000e728e <__any_on>:
   e728e:	f100 0214 	add.w	r2, r0, #20
   e7292:	6900      	ldr	r0, [r0, #16]
   e7294:	114b      	asrs	r3, r1, #5
   e7296:	4298      	cmp	r0, r3
   e7298:	b510      	push	{r4, lr}
   e729a:	db0c      	blt.n	e72b6 <__any_on+0x28>
   e729c:	dd0c      	ble.n	e72b8 <__any_on+0x2a>
   e729e:	f011 011f 	ands.w	r1, r1, #31
   e72a2:	d009      	beq.n	e72b8 <__any_on+0x2a>
   e72a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e72a8:	fa24 f001 	lsr.w	r0, r4, r1
   e72ac:	fa00 f101 	lsl.w	r1, r0, r1
   e72b0:	428c      	cmp	r4, r1
   e72b2:	d10c      	bne.n	e72ce <__any_on+0x40>
   e72b4:	e000      	b.n	e72b8 <__any_on+0x2a>
   e72b6:	4603      	mov	r3, r0
   e72b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e72bc:	4293      	cmp	r3, r2
   e72be:	d904      	bls.n	e72ca <__any_on+0x3c>
   e72c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e72c4:	2900      	cmp	r1, #0
   e72c6:	d0f9      	beq.n	e72bc <__any_on+0x2e>
   e72c8:	e001      	b.n	e72ce <__any_on+0x40>
   e72ca:	2000      	movs	r0, #0
   e72cc:	bd10      	pop	{r4, pc}
   e72ce:	2001      	movs	r0, #1
   e72d0:	bd10      	pop	{r4, pc}

000e72d2 <_calloc_r>:
   e72d2:	b538      	push	{r3, r4, r5, lr}
   e72d4:	fb02 f401 	mul.w	r4, r2, r1
   e72d8:	4621      	mov	r1, r4
   e72da:	f7f3 fe7b 	bl	dafd4 <_malloc_r>
   e72de:	4605      	mov	r5, r0
   e72e0:	b118      	cbz	r0, e72ea <_calloc_r+0x18>
   e72e2:	4622      	mov	r2, r4
   e72e4:	2100      	movs	r1, #0
   e72e6:	f7fc fe70 	bl	e3fca <memset>
   e72ea:	4628      	mov	r0, r5
   e72ec:	bd38      	pop	{r3, r4, r5, pc}

000e72ee <__env_lock>:
   e72ee:	4770      	bx	lr

000e72f0 <__env_unlock>:
   e72f0:	4770      	bx	lr

000e72f2 <link_code_end>:
	...

000e72f4 <dynalib_user>:
   e72f4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e7304:	0000 0000                                   ....

000e7308 <functions>:
   e7308:	74aa 000e df11 000d 0029 0000 0000 0000     .t......).......
   e7318:	74ae 000e e291 000d 0029 0000 0000 0000     .t......).......
   e7328:	74b3 000e e355 000d 0029 0000 0000 0000     .t..U...).......
   e7338:	74b8 000e d9b9 000d 0029 0000 0000 0000     .t......).......
   e7348:	74bd 000e e419 000d 002a 0000 0000 0000     .t......*.......
   e7358:	74c3 000e dd31 000d 0029 0000 0000 0000     .t..1...).......
   e7368:	74af 000e de51 000d 0029 0000 0000 0000     .t..Q...).......
   e7378:	74c8 000e e421 000d 0029 0000 0000 0000     .t..!...).......
   e7388:	8a4c 000e 40c9 000d 0028 0000 0000 0000     L....@..(.......
   e7398:	74cd 000e e4f9 000d 0029 0000 0000 0000     .t......).......
   e73a8:	74d1 000e 43d9 000d 0029 0000 0000 0000     .t...C..).......
   e73b8:	74d5 000e df21 000d 0029 0000 0000 0000     .t..!...).......
   e73c8:	74db 000e e6d9 000d 0029 0000 0000 0000     .t......).......
   e73d8:	74de 000e e7e9 000d 0029 0000 0000 0000     .t......).......
   e73e8:	74e2 000e e7e9 000d 0029 0000 0000 0000     .t......).......
   e73f8:	74e8 000e 4449 000d 002a 0000 0000 0000     .t..ID..*.......
   e7408:	74ec 000e 4509 000d 002a 0000 0000 0000     .t...E..*.......
   e7418:	74f0 000e 40b9 000d 0028 0000 0000 0000     .t...@..(.......
   e7428:	74f3 000e e901 000d 002a 0000 0000 0000     .t......*.......
   e7438:	74b4 000e e041 000d 0029 0000 0000 0000     .t..A...).......
   e7448:	74f7 000e ec39 000d 0029 0000 0000 0000     .t..9...).......
   e7458:	74fc 000e ed15 000d 0029 0000 0000 0000     .t......).......
   e7468:	74b9 000e e101 000d 0029 0000 0000 0000     .t......).......
   e7478:	7501 000e e171 000d 0029 0000 0000 0000     .u..q...).......
	...
   e7498:	2a25 0073 6f62 6e75 2064 7025 000a 2566     %*s.bound %p..f%
   e74a8:	0064 6261 0073 6361 736f 6100 6973 006e     d.abs.acos.asin.
   e74b8:	7461 6e61 6100 6174 326e 6300 6965 006c     atan.atan2.ceil.
   e74c8:	6f63 6873 6500 7078 6600 6361 6600 6f6c     cosh.exp.fac.flo
   e74d8:	726f 6c00 006e 6f6c 0067 6f6c 3167 0030     or.ln.log.log10.
   e74e8:	636e 0072 706e 0072 6970 7000 776f 7300     ncr.npr.pi.pow.s
   e74f8:	6e69 0068 7173 7472 7400 6e61 0068 0046     inh.sqrt.tanh.F.
   e7508:	6c4f 2064 6574 706d 202e 7073 6e61 6120     Old temp. span a
   e7518:	646e 6f20 6666 6573 3a74 0020 202c 4800     nd offset: ., .H
   e7528:	4749 0048 4f4c 0057 654e 2077 6574 706d     IGH.LOW.New temp
   e7538:	202e 7073 6e61 6120 646e 6f20 6666 6573     . span and offse
   e7548:	3a74 0020 6857 6e65 6720 7361 6320 6e6f     t: .When gas con
   e7558:	6563 746e 6172 6974 6e6f 7320 6574 6461     centration stead
   e7568:	2c79 6520 746e 7265 4320 6e6f 6563 746e     y, enter Concent
   e7578:	6172 6974 6e6f 6920 206e 7070 206d 6f66     ration in ppm fo
   e7588:	6c6c 776f 6465 6220 2079 6327 2772 3d20     llowed by 'cr' =
   e7598:	0020 7245 6f72 2072 6553 7474 6e69 2067      .Error Setting 
   e75a8:	7053 6e61 0000 0000                         Span....

000e75b0 <_ZTVN8particle9LEDStatusE>:
	...
   e75b8:	5795 000d 57ad 000d 5655 000d               .W...W..UV..

000e75c4 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   e75c4:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e36     blnkinf.ver.0.6.
   e75d4:	0033 2d68 6562 7461 3600 0030 7562 6666     3.h-beat.60.buff
   e75e4:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   e75f4:	6974 6c63 0065 7562 6c69 0064 614d 2079     ticle.build.May 
   e7604:	3033 3220 3230 2030 3631 323a 3a34 3230     30 2020 16:24:02
   e7614:	0000 4700 544d 7320 6365 6e6f 7364 6f20     ...GMT seconds o
   e7624:	6666 6573 2074 7369 203a 2500 0069 6c25     ffset is: .%i.%l
   e7634:	0069 4e20 544f 4620 554f 444e 000a 6544     i. NOT FOUND..De
   e7644:	6976 6563 0020 6120 6464 6572 7373 303a     vice . address:0
   e7654:	0078 6120 0074 6353 6e61 696e 676e 2e2e     x. at.Scanning..
   e7664:	0a2e 5500 6b6e 6f6e 6e77 6520 7272 726f     ...Unknown error
   e7674:	6120 2074 6461 7264 7365 2073 7830 4e00      at address 0x.N
   e7684:	206f 3249 2043 6564 6976 6563 2073 6f66     o I2C devices fo
   e7694:	6e75 0a64 6400 6e6f 0a65 5300 7661 6e69     und..done..Savin
   e76a4:	2067 7453 7461 0a65 4c00 616f 6964 676e     g State..Loading
   e76b4:	5320 6174 6574 000a 6944 6373 6e6f 656e      State..Disconne
   e76c4:	7463 6465 000a 2a2a 2a2a 442a 7665 6369     cted..*****Devic
   e76d4:	2065 6f5a 656e 7620 6c61 6575 6920 3a73     e Zone value is:
   e76e4:	0020 2a2a 2a2a 552a 6470 7461 2065 7562      .*****Update bu
   e76f4:	7a7a 7265 6154 706d 7265 6620 616c 2067     zzerTamper flag 
   e7704:	6176 756c 2065 7369 203a 2a00 2a2a 2a2a     value is: .*****
   e7714:	7055 6164 6574 6220 7a75 657a 5672 7061     Update buzzerVap
   e7724:	726f 6620 616c 2067 6176 756c 2065 7369     or flag value is
   e7734:	203a 2a00 2a2a 2a2a 7055 6164 6574 6e20     : .*****Update n
   e7744:	746f 6669 5679 7061 726f 6620 616c 2067     otifyVapor flag 
   e7754:	6176 756c 2065 7369 203a 2a00 2a2a 2a2a     value is: .*****
   e7764:	7055 6164 6574 6e20 746f 6669 5479 6d61     Update notifyTam
   e7774:	6570 2072 6c66 6761 7620 6c61 6575 6920     per flag value i
   e7784:	3a73 0020 2a2a 2a2a 552a 6470 7461 2065     s: .*****Update 
   e7794:	6341 6563 656c 6f72 656d 6574 2072 6874     Accelerometer th
   e77a4:	6572 6873 6c6f 2064 6176 756c 2065 7369     reshold value is
   e77b4:	203a 5500 6470 7461 2065 6341 6563 656c     : .Update Accele
   e77c4:	6f72 656d 6574 2072 6176 756c 2065 7369     rometer value is
   e77d4:	203a 5700 6c69 206c 6572 6573 2074 7973     : .Will reset sy
   e77e4:	7473 6d65 0020 7055 6164 6574 6e20 746f     stem .Update not
   e77f4:	6669 4279 7461 6574 7972 6620 616c 2067     ifyBattery flag 
   e7804:	6176 756c 2065 7369 203a 4900 696e 6974     value is: .Initi
   e7814:	6c61 7a69 6e69 2067 6c61 7261 0a6d 5300     alizing alarm..S
   e7824:	6365 6e6f 7364 5700 4669 2069 6f6e 2074     econds.WiFi not 
   e7834:	6572 6461 0a79 4200 796c 6b6e 6e20 746f     ready..Blynk not
   e7844:	6320 6e6f 656e 7463 6465 000a 7570 6c62      connected..publ
   e7854:	7369 4768 544d 664f 7366 7465 6552 7571     ishGMTOffsetRequ
   e7864:	7365 2074 6544 6976 6563 5a20 6e6f 2065     est Device Zone 
   e7874:	6176 756c 2065 7369 203a 4100 656d 6972     value is: .Ameri
   e7884:	6163 4e2f 7765 595f 726f 006b 6d41 7265     ca/New_York.Amer
   e7894:	6369 2f61 6843 6369 6761 006f 6d41 7265     ica/Chicago.Amer
   e78a4:	6369 2f61 6850 656f 696e 0078 6d41 7265     ica/Phoenix.Amer
   e78b4:	6369 2f61 6f4c 5f73 6e41 6567 656c 0073     ica/Los_Angeles.
   e78c4:	205d 4300 6e6f 656e 7463 6e69 2067 6f74     ] .Connecting to
   e78d4:	0020 0a0d 2020 2020 5f5f 205f 5f20 205f      ...    ___  __ 
   e78e4:	2020 2020 2020 2020 5f20 0d5f 200a 2020              __..   
   e78f4:	202f 205f 2f29 2f20 205f 5f5f 5f5f 205f     / _ )/ /_ _____ 
   e7904:	2f20 2f20 5f5f 0a0d 2020 202f 205f 2f20      / /__..  / _  /
   e7914:	2f20 2f20 202f 202f 205f 2f5c 2020 5f27      / // / _ \/  '_
   e7924:	0d2f 200a 5f2f 5f5f 2f5f 2f5f 5f5c 202c     /.. /____/_/\_, 
   e7934:	5f2f 2f2f 2f5f 2f5f 5f5c 0d5c 200a 2020     /_//_/_/\_\..   
   e7944:	2020 2020 2f20 5f5f 2f5f 7620 2e30 2e36          /___/ v0.6.
   e7954:	2033 6e6f 5020 7261 6974 6c63 0d65 000a     3 on Particle...
   e7964:	003e 6142 2064 6468 2072 656c 3a6e 0020     >.Bad hdr len: .
   e7974:	6552 6461 2079 7028 6e69 3a67 0020 736d     Ready (ping: .ms
   e7984:	2e29 4600 6572 2065 4152 3a4d 0020 6e49     )..Free RAM: .In
   e7994:	6176 696c 2064 7561 6874 7420 6b6f 6e65     valid auth token
   e79a4:	4300 6e6f 656e 7463 6620 6961 656c 2e64     .Connect failed.
   e79b4:	6320 646f 3a65 0020 6150 6b63 7465 7420      code: .Packet t
   e79c4:	6f6f 6220 6769 203a 4300 6e61 7427 7220     oo big: .Can't r
   e79d4:	6165 2064 6f62 7964 5200 6165 7964 5200     ead body.Ready.R
   e79e4:	6465 7269 6365 6974 676e 7420 206f 4900     edirecting to .I
   e79f4:	766e 6c61 6469 6920 746e 7265 616e 206c     nvalid internal 
   e7a04:	6d63 3a64 5300 7265 6576 3a72 0020 6e49     cmd:.Server: .In
   e7a14:	6176 696c 2064 6568 6461 7265 7420 7079     valid header typ
   e7a24:	3a65 0020 6548 7261 6274 6165 2074 6974     e: .Heartbeat ti
   e7a34:	656d 756f 3a74 0020 6f4c 6967 206e 6974     meout: .Login ti
   e7a44:	656d 756f 0074 003c 6d43 2064 7265 6f72     meout.<.Cmd erro
   e7a54:	0072 6553 746e 0020 7770 006d 7764 6100     r.Sent .pwm.dw.a
   e7a64:	0077 6e49 6176 696c 2064 5748 6320 646d     w.Invalid HW cmd
   e7a74:	203a 4900 766e 6c61 6469 7020 6e69 0020     : .Invalid pin .
   e7a84:	6d20 646f 2065 7600 0077 5453 5942 2500      mode .vw.STBY.%
   e7a94:	2568 2065 5225 2500 2000 2020 2020 2020     h%e %R.%.       
   e7aa4:	2020 2020 2020 2020 0020 6f47 6e69 2067              .Going 
   e7ab4:	6f74 7320 656c 7065 000a 6f47 6e69 2067     to sleep..Going 
   e7ac4:	6f74 7320 6174 646e 7962 7320 656c 7065     to standby sleep
   e7ad4:	000a 6f47 6e69 2067 6f74 6420 6565 2070     ..Going to deep 
   e7ae4:	6c73 6565 0a70 2000 202b 2500 2e32 6633     sleep.. + .%2.3f
   e7af4:	4300 6e6f 656e 7463 6465 000a 6e45 6574     .Connected..Ente
   e7b04:	2072 6f63 6564 7420 206f 6572 6573 0074     r code to reset.
   e7b14:	6e49 7469 6169 696c 657a 2064 6564 6166     Initialized defa
   e7b24:	6c75 2074 6176 756c 7365 4600 6e69 7369     ult values.Finis
   e7b34:	6568 2064 6e49 7469 6169 696c 617a 6974     hed Initializati
   e7b44:	6e6f 000a 6572 6573 6d74 0065 6e45 6574     on..resetme.Ente
   e7b54:	2072 7865 7270 7365 6973 6e6f 6820 7265     r expression her
   e7b64:	0065 6e45 6574 2072 6d65 6961 206c 6568     e.Enter email he
   e7b74:	6572 4800 7261 2064 6552 6573 7474 6e69     re.Hard Resettin
   e7b84:	0067 6148 6472 5220 7365 7465 6974 676e     g.Hard Resetting
   e7b94:	000a 6c42 6e79 206b 7369 6e20 776f 6320     ..Blynk is now c
   e7ba4:	6e6f 656e 7463 6465 2d20 7320 6e79 6963     onnected - synci
   e7bb4:	676e 6120 6c6c 7020 6e69 2e73 000a 6d70     ng all pins...pm
   e7bc4:	0031 6d70 0032 6d70 0034 6d70 3031 6300     1.pm2.pm4.pm10.c
   e7bd4:	6e6f 0063 6574 706d 2500 2e32 6637 5400     onc.temp.%2.7f.T
   e7be4:	6568 6520 7078 6572 7373 6f69 206e 7369     he expression is
   e7bf4:	5420 7572 0065 6854 2065 7865 7270 7365      True.The expres
   e7c04:	6973 6e6f 6920 2073 6146 736c 0065 7245     sion is False.Er
   e7c14:	6f72 2072 656e 7261 6320 6168 3a72 0020     ror near char: .
   e7c24:	2a2a 202a 4341 4543 204c 4e49 4554 5252     *** ACCEL INTERR
   e7c34:	5055 4554 2044 2a2a 0a2a 2a00 2a2a 4920     UPTED ***..*** I
   e7c44:	414e 5443 5649 5449 2059 2a2a 0a2a 2a00     NACTIVITY ***..*
   e7c54:	2a2a 4120 5443 5649 5449 2059 2a2a 0a2a     ** ACTIVITY ***.
   e7c64:	7400 6d61 6570 5f72 6c61 7265 0074 7441     .tamper_alert.At
   e7c74:	6574 706d 6974 676e 7420 206f 6f63 6e6e     tempting to conn
   e7c84:	6365 2074 6957 6946 2e2e 0a2e 5700 4669     ect WiFi.....WiF
   e7c94:	2069 6572 6461 0a79 4100 7474 6d65 7470     i ready..Attempt
   e7ca4:	6e69 2067 6f74 6320 6e6f 656e 7463 7420     ing to connect t
   e7cb4:	206f 6150 7472 6369 656c 2e2e 0a2e 5000     o Particle.....P
   e7cc4:	7261 6974 6c63 2065 6f6e 2074 6f63 6e6e     article not conn
   e7cd4:	6365 6574 0a64 5000 7261 6974 6c63 2065     ected..Particle 
   e7ce4:	6f63 6e6e 6365 6574 0a64 4100 7474 6d65     connected..Attem
   e7cf4:	7470 6e69 2067 6f74 6320 6e6f 656e 7463     pting to connect
   e7d04:	7420 206f 6c42 6e79 2e6b 2e2e 000a 657a      to Blynk.....ze
   e7d14:	7470 736f 6e65 6573 2e32 6c62 6e79 2e6b     ptosense2.blynk.
   e7d24:	6363 4200 796c 6b6e 6320 6e6f 656e 7463     cc.Blynk connect
   e7d34:	6465 000a 6544 6976 6563 7720 7361 7720     ed..Device was w
   e7d44:	6b6f 6e65 7520 2070 7962 7420 6568 5020     oken up by the P
   e7d54:	7261 6974 6c63 2065 5452 2043 6128 7466     article RTC (aft
   e7d64:	7265 3120 2035 696d 756e 6574 2973 202c     er 15 minutes), 
   e7d74:	6f67 6920 746e 206f 6544 7065 5320 656c     go into Deep Sle
   e7d84:	7065 000a 7473 7261 2074 6572 6461 6553     ep..start readSe
   e7d94:	736e 726f 0a73 5300 6174 6574 7620 6c61     nsors..State val
   e7da4:	6575 2073 7261 3a65 0a20 4200 7a75 657a     ues are: ..Buzze
   e7db4:	2072 6154 706d 7265 0020 7542 7a7a 7265     r Tamper .Buzzer
   e7dc4:	5620 7061 726f 0020 6f4e 6974 7966 5620      Vapor .Notify V
   e7dd4:	7061 726f 0020 6f4e 6974 7966 5420 6d61     apor .Notify Tam
   e7de4:	6570 2072 4e00 746f 6669 2079 6142 7474     per .Notify Batt
   e7df4:	7265 2079 4100 7463 7669 7469 2079 6854     ery .Activity Th
   e7e04:	6572 6873 6c6f 2064 4400 7665 6369 2065     reshold .Device 
   e7e14:	6f5a 656e 0020 7453 7261 2074 6553 7574     Zone .Start Setu
   e7e24:	2070 6573 7463 6f69 206e 6661 6574 2072     p section after 
   e7e34:	2061 6c73 6565 0a70 5500 616e 6c62 2065     a sleep..Unable 
   e7e44:	6f74 7220 6165 2064 7845 6170 646e 7265     to read Expander
   e7e54:	2d20 7220 7365 7465 6974 676e 6920 206e      - resetting in 
   e7e64:	2039 6573 6f63 646e 0a73 5500 616e 6c62     9 seconds..Unabl
   e7e74:	2065 6f74 7220 6165 2064 7845 6170 646e     e to read Expand
   e7e84:	7265 2d20 7220 7365 7465 6974 676e 6920     er - resetting i
   e7e94:	206e 2039 6573 6f63 646e 0073 7245 6f72     n 9 seconds.Erro
   e7ea4:	0072 3164 253d 0075 6843 6365 696b 676e     r.d1=%u.Checking
   e7eb4:	6920 6332 6420 7665 6369 7365 2e2e 0a2e      i2c devices....
   e7ec4:	4500 5252 4900 4332 4920 7373 6575 000a     .ERR.I2C Issue..
   e7ed4:	4452 0059 3249 2043 4b4f 000a 6542 6f66     RDY.I2C OK..Befo
   e7ee4:	6572 000a 6641 6574 0a72 4100 5844 334c     re..After..ADXL3
   e7ef4:	3534 5320 7465 7075 5500 616e 6c62 2065     45 Setup.Unable 
   e7f04:	6f74 7220 6165 2064 5053 3353 2030 202d     to read SPS30 - 
   e7f14:	7274 6979 676e 6120 6167 6e69 000a 6552     trying again..Re
   e7f24:	6461 5320 5350 3033 000a 6954 656d 6920     ad SPS30..Time i
   e7f34:	2073 7973 636e 6465 7420 206f 6874 2065     s synced to the 
   e7f44:	6c63 756f 0a64 2d00 4d2d 7361 2073 6f43     cloud..--Mass Co
   e7f54:	636e 6e65 7274 7461 6f69 2d6e 0a2d 2500     ncentration--..%
   e7f64:	3a73 2520 2e30 6632 0a0d 2d00 4e2d 6d75     s: %0.2f...--Num
   e7f74:	6562 2072 6f43 636e 6e65 7274 7461 6f69     ber Concentratio
   e7f84:	2d6e 0a2d 2500 2e30 6631 7400 6d65 3170     n--..%0.1f.temp1
   e7f94:	203a 6625 000a 6756 7361 203a 6625 000a     : %f..Vgas: %f..
   e7fa4:	6f43 636e 203a 6625 000a 3025 302e 0066     Conc: %f..%0.0f.
   e7fb4:	4c41 5452 2021 4100 454c 5452 2021 2020     ALRT! .ALERT!   
   e7fc4:	2020 2020 2020 2020 2020 7c00 4100 524c               .|.ALR
   e7fd4:	2154 5500 6470 7461 6e69 0067 7562 7a7a     T!.Updating.buzz
   e7fe4:	7265 7420 746f 6c61 7420 6d69 2065 7525     er total time %u
   e7ff4:	206c 2a2a 2a2a 5600 7061 2065 6c61 7265     l ****.Vape aler
   e8004:	2074 7562 7a7a 7265 7420 6d69 2065 6572     t buzzer time re
   e8014:	6573 2074 7461 2520 6c75 2a20 2a2a 002a     set at %ul ****.
   e8024:	6176 6570 615f 656c 7472 5600 7061 2065     vape_alert.Vape 
   e8034:	6c41 7265 2074 6f74 6174 206c 6974 656d     Alert total time
   e8044:	2520 6c75 6d20 6c69 696c 6573 6f63 646e      %ul millisecond
   e8054:	0073 6f6c 5f77 6162 7474 7265 5f79 6c61     s.low_battery_al
   e8064:	7265 5f74 3032 5500 616e 6c62 2065 6f74     ert_20.Unable to
   e8074:	7220 6165 2064 5053 3353 2030 202d 6572      read SPS30 - re
   e8084:	6573 7474 6e69 2067 6564 6976 6563 3120     setting device 1
   e8094:	000a 6e55 6261 656c 7420 206f 6572 6461     ..Unable to read
   e80a4:	5320 5350 3033 2d20 7220 7365 7465 6974      SPS30 - resetti
   e80b4:	676e 6420 7665 6369 0a65 5300 6174 7472     ng device..Start
   e80c4:	5320 7465 7075 2928 6620 6e75 7463 6f69      Setup() functio
   e80d4:	0a6e 4400 7665 6369 2065 6964 2064 6f6e     n..Device did no
   e80e4:	2074 6177 656b 7520 2070 7266 6d6f 5020     t wake up from P
   e80f4:	7261 6974 6c63 2065 6c73 6565 0a70 4400     article sleep..D
   e8104:	7665 6369 2065 6177 2073 6f77 656b 206e     evice was woken 
   e8114:	7075 6220 2079 2061 6970 0a6e 4400 7665     up by a pin..Dev
   e8124:	6369 2065 6177 2073 6f77 656b 206e 7075     ice was woken up
   e8134:	6220 2079 6874 2065 6150 7472 6369 656c      by the Particle
   e8144:	5220 4354 2820 6661 6574 2072 2061 7073      RTC (after a sp
   e8154:	6365 6669 6569 2064 756e 626d 7265 6f20     ecified number o
   e8164:	2066 6573 6f63 646e 2973 000a 6544 6976     f seconds)..Devi
   e8174:	6563 7720 7361 7720 6b6f 6e65 7520 2070     ce was woken up 
   e8184:	7962 6520 7469 6568 2072 2061 6970 206e     by either a pin 
   e8194:	726f 7420 6568 5020 7261 6974 6c63 2065     or the Particle 
   e81a4:	5452 2043 6128 7466 7265 6120 7320 6570     RTC (after a spe
   e81b4:	6963 6966 6465 6e20 6d75 6562 2072 666f     cified number of
   e81c4:	7320 6365 6e6f 7364 0a29 7300 6174 6574      seconds)..state
   e81d4:	662e 7269 7473 7552 436e 6568 6b63 3d20     .firstRunCheck =
   e81e4:	2520 2062 6966 7372 5274 6e75 6156 756c      %b firstRunValu
   e81f4:	2065 203d 6425 000a 6d70 3e31 3033 7c30     e = %d..pm1>300|
   e8204:	707c 326d 333e 3030 7c7c 6d70 3e34 3033     |pm2>300||pm4>30
   e8214:	7c30 707c 316d 3e30 3033 2630 6326 6e6f     0||pm10>300&&con
   e8224:	3e63 3031 7c30 747c 6d65 3e70 3531 0030     c>100||temp>150.
   e8234:	6962 7473 6e61 4079 6f63 636d 7361 2e74     bistany@comcast.
   e8244:	656e 0074 6946 7372 2074 7572 2e6e 000a     net.First run...
   e8254:	6f4e 2074 6966 7372 2074 7572 2e6e 000a     Not first run...
   e8264:	7356 7075 6620 726f 6120 6c6c 7320 6e65     Vsup for all sen
   e8274:	6f73 7372 3d20 0020 6356 2063 6f66 2072     sors = .Vcc for 
   e8284:	6c61 206c 6573 736e 726f 2073 203d 5600     all sensors = .V
   e8294:	6572 2066 6f66 2072 6573 736e 726f 3120     ref for sensor 1
   e82a4:	3d20 0020 7a54 7265 206f 203d 6625 000a      = .Tzero = %f..
   e82b4:	6946 696e 6873 6465 5320 7465 6974 676e     Finished Setting
   e82c4:	5520 0a70 5400 2c31 6d20 3156 202c 3143      Up..T1, mV1, C1
   e82d4:	000a 6f68 6b6f 722d 7365 6f70 736e 2f65     ..hook-response/
   e82e4:	6d67 4f74 6666 6573 0074 6553 7574 2070     gmtOffset.Setup 
   e82f4:	6f63 706d 656c 6574 000a 6e45 2064 6553     complete..End Se
   e8304:	7574 2870 2029 7566 636e 6974 6e6f 000a     tup() function..
   e8314:	5320 2057 6556 2072 203d 3032 3931 3131      SW Ver = 201911
   e8324:	2036 2f53 204e 203d 655a 3270 2057 2000     6 S/N = Zep2W . 
   e8334:	6f4c 2063 203d 6554 7473 5520 696e 2074     Loc = Test Unit 
   e8344:	5200 4354 4500 7078 5200 4354 4520 5045     .RTC.Exp.RTC EEP
   e8354:	4f52 004d 4441 0043 5246 4d41 4100 5844     ROM.ADC.FRAM.ADX
   e8364:	334c 3534 5300 5350 3033 5000 304d 352e     L345.SPS30.PM0.5
   e8374:	5000 314d 302e 5000 324d 352e 5000 344d     .PM1.0.PM2.5.PM4
   e8384:	302e 5000 314d 0030                         .0.PM10.

000e838c <_ZL23BlynkWriteHandlerVector>:
   e838c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e839c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e83ac:	97b7 000d 97b7 000d 7069 000d 97b7 000d     ........ip......
   e83bc:	7085 000d 97b7 000d 70c5 000d 97b7 000d     .p.......p......
   e83cc:	59c1 000d 5a65 000d 59ed 000d 97b7 000d     .Y..eZ...Y......
   e83dc:	7755 000d 97b7 000d 72f5 000d 5ab9 000d     Uw.......r...Z..
   e83ec:	5b39 000d 5a45 000d 5a19 000d 5bb5 000d     9[..EZ...Z...[..
   e83fc:	5c31 000d 5cad 000d 97b7 000d 5d29 000d     1\...\......)]..
   e840c:	5dbd 000d 97b7 000d 97b7 000d 97b7 000d     .]..............
   e841c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e842c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e843c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e844c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e845c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e846c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e847c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e848c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e849c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84ac:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84bc:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84cc:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84dc:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84ec:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e84fc:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e850c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e851c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e852c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e853c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e854c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e855c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e856c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................
   e857c:	97b7 000d 97b7 000d 97b7 000d 97b7 000d     ................

000e858c <_ZL22BlynkReadHandlerVector>:
   e858c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e859c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85ac:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85bc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85cc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85dc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85ec:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e85fc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e860c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e861c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e862c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e863c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e864c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e865c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e866c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e867c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e868c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e869c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86ac:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86bc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86cc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86dc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86ec:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e86fc:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e870c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e871c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e872c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e873c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e874c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e875c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e876c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................
   e877c:	97b5 000d 97b5 000d 97b5 000d 97b5 000d     ................

000e878c <CSWTCH.78>:
   e878c:	0001 0000 0002 0000 0000 0000 0003 0000     ................

000e879c <_ZTV10MB85RC256V>:
	...
   e87a4:	a41d 000d a41f 000d                         ........

000e87ac <_ZTVN5spark12NetworkClassE>:
	...
   e87b4:	aff5 000d afff 000d b009 000d b013 000d     ................
   e87c4:	b01d 000d b029 000d b035 000d b041 000d     ....)...5...A...
   e87d4:	b049 000d b053 000d b05d 000d               I...S...]...

000e87e0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e87e8:	b1c5 000d b1cb 000d b6eb 000d b1d9 000d     ................
   e87f8:	b1c7 000d                                   ....

000e87fc <_ZTV9TCPClient>:
	...
   e8804:	b2e1 000d b301 000d b13d 000d b157 000d     ........=...W...
   e8814:	b591 000d b2ab 000d b27d 000d b181 000d     ........}.......
   e8824:	b46d 000d b369 000d b315 000d b561 000d     m...i.......a...
   e8834:	b183 000d b1bb 000d b169 000d b1dd 000d     ........i.......
   e8844:	b25d 000d 6977 6972 676e 7200 6365 2076     ]...wiring.recv 
   e8854:	7265 6f72 2072 203d 6425 0000               error = %d..

000e8860 <_ZTVN5spark9MeshClassE>:
	...
   e8868:	b761 000d b757 000d b74d 000d b743 000d     a...W...M...C...
   e8878:	b737 000d b72b 000d b71f 000d b717 000d     7...+...........
   e8888:	b70d 000d b703 000d b05d 000d               ........]...

000e8894 <_ZTVN5spark9WiFiClassE>:
	...
   e889c:	b957 000d b94d 000d b943 000d 56df 000d     W...M...C....V..
   e88ac:	56e9 000d b937 000d b92b 000d b923 000d     .V..7...+...#...
   e88bc:	b919 000d b90f 000d b05d 000d               ........]...

000e88c8 <_ZTV10WiFiSignal>:
	...
   e88d0:	b8a3 000d b901 000d b8a5 000d b995 000d     ................
   e88e0:	b8a9 000d b961 000d b8d5 000d               ....a.......

000e88ec <_ZTV7TwoWire>:
	...
   e88f4:	ba81 000d bacb 000d baa3 000d ba83 000d     ................
   e8904:	baab 000d bab3 000d babb 000d bac3 000d     ................

000e8914 <_ZTV9USBSerial>:
	...
   e891c:	bc07 000d bc57 000d bc65 000d c927 000d     ....W...e...'...
   e892c:	bc43 000d bc09 000d bc1f 000d bc51 000d     C...........Q...
   e893c:	bc35 000d bc03 000d                         5.......

000e8944 <_ZTV9IPAddress>:
	...
   e894c:	bd25 000d bd15 000d bd17 000d               %...........

000e8958 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e8960:	be25 000d be2b 000d be81 000d be39 000d     %...+.......9...
   e8970:	be27 000d 2b25 3330 3a64 3025 7532 2500     '...%+03d:%02u.%
   e8980:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e8990:	7a25 6100 6373 6974 656d 6200 7561 0064     %z.asctime.baud.
   e89a0:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   e89b0:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   e89c0:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   e89d0:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   e89e0:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   e89f0:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   e8a00:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   e8a10:	0070 3025 3031 2075 2800 3a29 0020 5b20     p.%010u .(): . [
   e8a20:	6300 646f 2065 203d 6400 7465 6961 736c     .code = .details
   e8a30:	3d20 0020 6e66 6300 646f 0065 6564 6174      = .fn.code.deta
   e8a40:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   e8a50:	6f66 7700 7261 006e 6170 696e 0063 6c61     fo.warn.panic.al
   e8a60:	006c 616e 006e 766f 0066 6e69 0066 0000     l.nan.ovf.inf...

000e8a70 <_ZTV11USARTSerial>:
	...
   e8a78:	cc35 000d cc85 000d cc93 000d c927 000d     5...........'...
   e8a88:	cc49 000d cc6b 000d cc57 000d cc7f 000d     I...k...W.......
   e8a98:	cc37 000d cc3b 000d                         7...;...

000e8aa0 <_ZTVN5spark13EthernetClassE>:
	...
   e8aa8:	d08f 000d d085 000d d07b 000d d071 000d     ........{...q...
   e8ab8:	d065 000d d059 000d d04d 000d d045 000d     e...Y...M...E...
   e8ac8:	d03b 000d d031 000d b05d 000d               ;...1...]...

000e8ad4 <_ZSt7nothrow>:
   e8ad4:	0000 0000                                   ....

000e8ad8 <atanlo>:
   e8ad8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e8ae8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e8af8 <atanhi>:
   e8af8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e8b08:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
   e8b18:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
   e8b28:	6f63 6873 0000 0000 7865 0070 6d66 646f     cosh....exp.fmod
   e8b38:	0000 0000 6f6c 0067 6f6c 3167 0030 0000     ....log.log10...
   e8b48:	6f70 0077 6973 686e 0000 0000 7173 7472     pow.sinh....sqrt
	...

000e8b60 <halF>:
   e8b60:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

000e8b70 <ln2LO>:
   e8b70:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

000e8b80 <ln2HI>:
   e8b80:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

000e8b90 <Zero>:
	...
   e8b9c:	0000 8000                                   ....

000e8ba0 <npio2_hw>:
   e8ba0:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e8bb0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e8bc0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e8bd0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e8be0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e8bf0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e8c00:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e8c10:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e8c20 <two_over_pi>:
   e8c20:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e8c30:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e8c40:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e8c50:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e8c60:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e8c70:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e8c80:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e8c90:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e8ca0:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e8cb0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e8cc0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e8cd0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e8ce0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e8cf0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e8d00:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e8d10:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e8d20:	e27b 0060 8c6b 00c0                         {.`.k...

000e8d28 <init_jk>:
   e8d28:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e8d38 <PIo2>:
   e8d38:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e8d48:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e8d58:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e8d68:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e8d78 <TWO52>:
   e8d78:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000e8d88 <day_name.4725>:
   e8d88:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e8d98:	6972 6153 4a74                                   riSat

000e8d9d <mon_name.4726>:
   e8d9d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e8dad:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e8dbd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e8dcd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e8ddd:	6425 000a                                   %d..

000e8de1 <_ctype_>:
   e8de1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e8df1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e8e01:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e8e11:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e8e21:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e8e31:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e8e41:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e8e51:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e8e61:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e8ee4 <__sf_fake_stdin>:
	...

000e8f04 <__sf_fake_stdout>:
	...

000e8f24 <__sf_fake_stderr>:
	...
   e8f44:	4f50 4953 0058 0000                         POSIX...

000e8f4c <_DAYS_BEFORE_MONTH>:
   e8f4c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e8f5c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e8f6c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e8f7c <DAYS_IN_MONTH>:
   e8f7c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e8f8c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e8f9c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e8fac <__month_lengths>:
   e8fac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e8fbc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e8fcc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e8fdc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e8fec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e8ffc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e900c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e901c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   e902c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   e903c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   e904c:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   e905c:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000e9068 <fpi.5344>:
   e9068:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e9078:	0000 0000                                   ....

000e907c <fpinan.5380>:
   e907c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e908c:	0000 0000 6e69 7469 0079 0000               ....inity...

000e9098 <tinytens>:
   e9098:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e90a8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e90b8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e90c8:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e90d8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e90e8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e90f8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e9108:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e9118:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e9128:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e9138:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e9148:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e9158:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e9168:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e9178:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e9188:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e9198:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e91a8:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e91b8:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e91c8:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e91d8:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e91e8:	2053 7025 0000 0000                         S %p....

000e91f0 <_C_time_locale>:
   e91f0:	90c8 000e 90cc 000e 90d0 000e 90d4 000e     ................
   e9200:	90d8 000e 90dc 000e 90e0 000e 90e4 000e     ................
   e9210:	90e8 000e 90ec 000e 90f0 000e 90f4 000e     ................
   e9220:	90f8 000e 9100 000e 9109 000e 910f 000e     ................
   e9230:	90d8 000e 9115 000e 911a 000e 911f 000e     ................
   e9240:	9126 000e 9130 000e 9138 000e 9141 000e     &...0...8...A...
   e9250:	914a 000e 914e 000e 9152 000e 9156 000e     J...N...R...V...
   e9260:	915a 000e 915e 000e 9162 000e 9166 000e     Z...^...b...f...
   e9270:	916d 000e 9174 000e 917c 000e 9186 000e     m...t...|.......
   e9280:	918f 000e 9196 000e 919f 000e 91a8 000e     ................
   e9290:	91b1 000e 835e 000e 91c6 000e 91c9 000e     ....^...........
   e92a0:	90f8 000e 9100 000e 9109 000e 910f 000e     ................
   e92b0:	90d8 000e 9115 000e 911a 000e 911f 000e     ................
   e92c0:	9126 000e 9130 000e 9138 000e 9141 000e     &...0...8...A...
   e92d0:	89bb 000e 91e1 000e 7963 000e 7963 000e     ........cy..cy..
   e92e0:	7963 000e 7963 000e 7963 000e 5a54 4700     cy..cy..cy..TZ.G
   e92f0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e9300:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e9310:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e9320:	3a6e 6825 2575 006e                         n:%hu%n.

000e9328 <__mprec_tens>:
   e9328:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e9338:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e9348:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e9358:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e9368:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e9378:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e9388:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e9398:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e93a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e93b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e93c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e93d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e93e8:	9db4 79d9 7843 44ea                         ...yCx.D

000e93f0 <__mprec_bigtens>:
   e93f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e9400:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e9410:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e9418 <p05.5387>:
   e9418:	0005 0000 0019 0000 007d 0000               ........}...

000e9424 <link_const_variable_data_end>:
   e9424:	000d5651 	.word	0x000d5651
   e9428:	000d948d 	.word	0x000d948d
   e942c:	000d97e5 	.word	0x000d97e5
   e9430:	000d97f5 	.word	0x000d97f5
   e9434:	000d9987 	.word	0x000d9987
   e9438:	000d9d53 	.word	0x000d9d53
   e943c:	000d9eb5 	.word	0x000d9eb5
   e9440:	000da2b3 	.word	0x000da2b3
   e9444:	000da419 	.word	0x000da419
   e9448:	000da577 	.word	0x000da577
   e944c:	000da88f 	.word	0x000da88f
   e9450:	000db129 	.word	0x000db129
   e9454:	000db82d 	.word	0x000db82d
   e9458:	000dba6d 	.word	0x000dba6d
   e945c:	000dc585 	.word	0x000dc585
   e9460:	000dc8a9 	.word	0x000dc8a9
   e9464:	000dc8bd 	.word	0x000dc8bd
   e9468:	000dcc0d 	.word	0x000dcc0d
   e946c:	000dcfad 	.word	0x000dcfad
   e9470:	000dd099 	.word	0x000dd099
   e9474:	000dd725 	.word	0x000dd725
   e9478:	000dd7a9 	.word	0x000dd7a9
   e947c:	000dd86d 	.word	0x000dd86d
   e9480:	000dd931 	.word	0x000dd931

000e9484 <link_constructors_end>:
	...
